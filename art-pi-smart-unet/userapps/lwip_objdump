
root/bin/lwIPKit.elf:     file format elf32-littlearm


Disassembly of section .text:

00100000 <_start>:
  100000:	e1a0d003 	mov	sp, r3
  100004:	ebffffff 	bl	100008 <_start_c>

00100008 <_start_c>:
  100008:	e3a0c000 	mov	ip, #0
  10000c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  100010:	e59f3018 	ldr	r3, [pc, #24]	; 100030 <_start_c+0x28>
  100014:	e24dd00c 	sub	sp, sp, #12
  100018:	e5901000 	ldr	r1, [r0]
  10001c:	e2802004 	add	r2, r0, #4
  100020:	e88d1008 	stm	sp, {r3, ip}
  100024:	e59f0008 	ldr	r0, [pc, #8]	; 100034 <_start_c+0x2c>
  100028:	e59f3008 	ldr	r3, [pc, #8]	; 100038 <_start_c+0x30>
  10002c:	eb00e39c 	bl	138ea4 <__libc_start_main>
  100030:	00145380 	.word	0x00145380
  100034:	00103c5c 	.word	0x00103c5c
  100038:	00145374 	.word	0x00145374

0010003c <deregister_tm_clones>:
  10003c:	e59f0018 	ldr	r0, [pc, #24]	; 10005c <deregister_tm_clones+0x20>
  100040:	e59f3018 	ldr	r3, [pc, #24]	; 100060 <deregister_tm_clones+0x24>
  100044:	e1530000 	cmp	r3, r0
  100048:	012fff1e 	bxeq	lr
  10004c:	e59f3010 	ldr	r3, [pc, #16]	; 100064 <deregister_tm_clones+0x28>
  100050:	e3530000 	cmp	r3, #0
  100054:	012fff1e 	bxeq	lr
  100058:	e12fff13 	bx	r3
  10005c:	0014d3f0 	.word	0x0014d3f0
  100060:	0014d3f0 	.word	0x0014d3f0
  100064:	00000000 	.word	0x00000000

00100068 <register_tm_clones>:
  100068:	e59f0024 	ldr	r0, [pc, #36]	; 100094 <register_tm_clones+0x2c>
  10006c:	e59f1024 	ldr	r1, [pc, #36]	; 100098 <register_tm_clones+0x30>
  100070:	e0411000 	sub	r1, r1, r0
  100074:	e1a01141 	asr	r1, r1, #2
  100078:	e0811fa1 	add	r1, r1, r1, lsr #31
  10007c:	e1b010c1 	asrs	r1, r1, #1
  100080:	012fff1e 	bxeq	lr
  100084:	e59f3010 	ldr	r3, [pc, #16]	; 10009c <register_tm_clones+0x34>
  100088:	e3530000 	cmp	r3, #0
  10008c:	012fff1e 	bxeq	lr
  100090:	e12fff13 	bx	r3
  100094:	0014d3f0 	.word	0x0014d3f0
  100098:	0014d3f0 	.word	0x0014d3f0
  10009c:	00000000 	.word	0x00000000

001000a0 <__do_global_dtors_aux>:
  1000a0:	e92d4010 	push	{r4, lr}
  1000a4:	e59f402c 	ldr	r4, [pc, #44]	; 1000d8 <__do_global_dtors_aux+0x38>
  1000a8:	e5d43000 	ldrb	r3, [r4]
  1000ac:	e3530000 	cmp	r3, #0
  1000b0:	18bd8010 	popne	{r4, pc}
  1000b4:	ebffffe0 	bl	10003c <deregister_tm_clones>
  1000b8:	e59f301c 	ldr	r3, [pc, #28]	; 1000dc <__do_global_dtors_aux+0x3c>
  1000bc:	e3530000 	cmp	r3, #0
  1000c0:	0a000001 	beq	1000cc <__do_global_dtors_aux+0x2c>
  1000c4:	e59f0014 	ldr	r0, [pc, #20]	; 1000e0 <__do_global_dtors_aux+0x40>
  1000c8:	e320f000 	nop	{0}
  1000cc:	e3a03001 	mov	r3, #1
  1000d0:	e5c43000 	strb	r3, [r4]
  1000d4:	e8bd8010 	pop	{r4, pc}
  1000d8:	0014d3f0 	.word	0x0014d3f0
  1000dc:	00000000 	.word	0x00000000
  1000e0:	0014cfc4 	.word	0x0014cfc4

001000e4 <frame_dummy>:
  1000e4:	e59f3020 	ldr	r3, [pc, #32]	; 10010c <frame_dummy+0x28>
  1000e8:	e3530000 	cmp	r3, #0
  1000ec:	0a000005 	beq	100108 <frame_dummy+0x24>
  1000f0:	e92d4010 	push	{r4, lr}
  1000f4:	e59f1014 	ldr	r1, [pc, #20]	; 100110 <frame_dummy+0x2c>
  1000f8:	e59f0014 	ldr	r0, [pc, #20]	; 100114 <frame_dummy+0x30>
  1000fc:	e320f000 	nop	{0}
  100100:	e8bd4010 	pop	{r4, lr}
  100104:	eaffffd7 	b	100068 <register_tm_clones>
  100108:	eaffffd6 	b	100068 <register_tm_clones>
  10010c:	00000000 	.word	0x00000000
  100110:	0014d3f4 	.word	0x0014d3f4
  100114:	0014cfc4 	.word	0x0014cfc4

00100118 <rt_channel_open>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

int rt_channel_open(const char *name, int flags)
{
  100118:	e92d4800 	push	{fp, lr}
  10011c:	e28db004 	add	fp, sp, #4
  100120:	e24dd008 	sub	sp, sp, #8
  100124:	e50b0008 	str	r0, [fp, #-8]
  100128:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_open, name, flags);
  10012c:	e51b200c 	ldr	r2, [fp, #-12]
  100130:	e51b1008 	ldr	r1, [fp, #-8]
  100134:	e3a0002c 	mov	r0, #44	; 0x2c
  100138:	eb00f0c9 	bl	13c464 <syscall>
  10013c:	e1a03000 	mov	r3, r0
}
  100140:	e1a00003 	mov	r0, r3
  100144:	e24bd004 	sub	sp, fp, #4
  100148:	e8bd8800 	pop	{fp, pc}

0010014c <rt_channel_close>:

rt_err_t rt_channel_close(int fd)
{
  10014c:	e92d4800 	push	{fp, lr}
  100150:	e28db004 	add	fp, sp, #4
  100154:	e24dd008 	sub	sp, sp, #8
  100158:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_channel_close, fd);
  10015c:	e51b1008 	ldr	r1, [fp, #-8]
  100160:	e3a0002d 	mov	r0, #45	; 0x2d
  100164:	eb00f0be 	bl	13c464 <syscall>
  100168:	e1a03000 	mov	r3, r0
}
  10016c:	e1a00003 	mov	r0, r3
  100170:	e24bd004 	sub	sp, fp, #4
  100174:	e8bd8800 	pop	{fp, pc}

00100178 <rt_channel_send_recv>:

rt_err_t rt_channel_send_recv(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret)
{
  100178:	e92d4800 	push	{fp, lr}
  10017c:	e28db004 	add	fp, sp, #4
  100180:	e24dd018 	sub	sp, sp, #24
  100184:	e50b0008 	str	r0, [fp, #-8]
  100188:	e50b100c 	str	r1, [fp, #-12]
  10018c:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, RT_WAITING_FOREVER);
  100190:	e3e03000 	mvn	r3, #0
  100194:	e58d3000 	str	r3, [sp]
  100198:	e51b3010 	ldr	r3, [fp, #-16]
  10019c:	e51b200c 	ldr	r2, [fp, #-12]
  1001a0:	e51b1008 	ldr	r1, [fp, #-8]
  1001a4:	e3a0002f 	mov	r0, #47	; 0x2f
  1001a8:	eb00f0ad 	bl	13c464 <syscall>
  1001ac:	e1a03000 	mov	r3, r0
}
  1001b0:	e1a00003 	mov	r0, r3
  1001b4:	e24bd004 	sub	sp, fp, #4
  1001b8:	e8bd8800 	pop	{fp, pc}

001001bc <rt_channel_send_recv_timeout>:

rt_err_t rt_channel_send_recv_timeout(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret, rt_int32_t time)
{
  1001bc:	e92d4800 	push	{fp, lr}
  1001c0:	e28db004 	add	fp, sp, #4
  1001c4:	e24dd018 	sub	sp, sp, #24
  1001c8:	e50b0008 	str	r0, [fp, #-8]
  1001cc:	e50b100c 	str	r1, [fp, #-12]
  1001d0:	e50b2010 	str	r2, [fp, #-16]
  1001d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, time);
  1001d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1001dc:	e58d3000 	str	r3, [sp]
  1001e0:	e51b3010 	ldr	r3, [fp, #-16]
  1001e4:	e51b200c 	ldr	r2, [fp, #-12]
  1001e8:	e51b1008 	ldr	r1, [fp, #-8]
  1001ec:	e3a0002f 	mov	r0, #47	; 0x2f
  1001f0:	eb00f09b 	bl	13c464 <syscall>
  1001f4:	e1a03000 	mov	r3, r0
}
  1001f8:	e1a00003 	mov	r0, r3
  1001fc:	e24bd004 	sub	sp, fp, #4
  100200:	e8bd8800 	pop	{fp, pc}

00100204 <rt_channel_send>:

rt_err_t rt_channel_send(int fd, rt_channel_msg_t data)
{
  100204:	e92d4800 	push	{fp, lr}
  100208:	e28db004 	add	fp, sp, #4
  10020c:	e24dd008 	sub	sp, sp, #8
  100210:	e50b0008 	str	r0, [fp, #-8]
  100214:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_send, fd, data);
  100218:	e51b200c 	ldr	r2, [fp, #-12]
  10021c:	e51b1008 	ldr	r1, [fp, #-8]
  100220:	e3a0002e 	mov	r0, #46	; 0x2e
  100224:	eb00f08e 	bl	13c464 <syscall>
  100228:	e1a03000 	mov	r3, r0
}
  10022c:	e1a00003 	mov	r0, r3
  100230:	e24bd004 	sub	sp, fp, #4
  100234:	e8bd8800 	pop	{fp, pc}

00100238 <rt_channel_reply>:

rt_err_t rt_channel_reply(int fd, rt_channel_msg_t data)
{
  100238:	e92d4800 	push	{fp, lr}
  10023c:	e28db004 	add	fp, sp, #4
  100240:	e24dd008 	sub	sp, sp, #8
  100244:	e50b0008 	str	r0, [fp, #-8]
  100248:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_reply, fd, data);
  10024c:	e51b200c 	ldr	r2, [fp, #-12]
  100250:	e51b1008 	ldr	r1, [fp, #-8]
  100254:	e3a00030 	mov	r0, #48	; 0x30
  100258:	eb00f081 	bl	13c464 <syscall>
  10025c:	e1a03000 	mov	r3, r0
}
  100260:	e1a00003 	mov	r0, r3
  100264:	e24bd004 	sub	sp, fp, #4
  100268:	e8bd8800 	pop	{fp, pc}

0010026c <rt_channel_recv>:

rt_err_t rt_channel_recv(int fd, rt_channel_msg_t data)
{
  10026c:	e92d4800 	push	{fp, lr}
  100270:	e28db004 	add	fp, sp, #4
  100274:	e24dd008 	sub	sp, sp, #8
  100278:	e50b0008 	str	r0, [fp, #-8]
  10027c:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, RT_WAITING_FOREVER);
  100280:	e3e03000 	mvn	r3, #0
  100284:	e51b200c 	ldr	r2, [fp, #-12]
  100288:	e51b1008 	ldr	r1, [fp, #-8]
  10028c:	e3a00031 	mov	r0, #49	; 0x31
  100290:	eb00f073 	bl	13c464 <syscall>
  100294:	e1a03000 	mov	r3, r0
}
  100298:	e1a00003 	mov	r0, r3
  10029c:	e24bd004 	sub	sp, fp, #4
  1002a0:	e8bd8800 	pop	{fp, pc}

001002a4 <rt_channel_recv_timeout>:

rt_err_t rt_channel_recv_timeout(int fd, rt_channel_msg_t data, rt_int32_t time)
{
  1002a4:	e92d4800 	push	{fp, lr}
  1002a8:	e28db004 	add	fp, sp, #4
  1002ac:	e24dd010 	sub	sp, sp, #16
  1002b0:	e50b0008 	str	r0, [fp, #-8]
  1002b4:	e50b100c 	str	r1, [fp, #-12]
  1002b8:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, time);
  1002bc:	e51b3010 	ldr	r3, [fp, #-16]
  1002c0:	e51b200c 	ldr	r2, [fp, #-12]
  1002c4:	e51b1008 	ldr	r1, [fp, #-8]
  1002c8:	e3a00031 	mov	r0, #49	; 0x31
  1002cc:	eb00f064 	bl	13c464 <syscall>
  1002d0:	e1a03000 	mov	r3, r0
}
  1002d4:	e1a00003 	mov	r0, r3
  1002d8:	e24bd004 	sub	sp, fp, #4
  1002dc:	e8bd8800 	pop	{fp, pc}

001002e0 <rt_channel_peek>:

rt_err_t rt_channel_peek(int fd, rt_channel_msg_t data)
{
  1002e0:	e92d4800 	push	{fp, lr}
  1002e4:	e28db004 	add	fp, sp, #4
  1002e8:	e24dd008 	sub	sp, sp, #8
  1002ec:	e50b0008 	str	r0, [fp, #-8]
  1002f0:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, 0);
  1002f4:	e3a03000 	mov	r3, #0
  1002f8:	e51b200c 	ldr	r2, [fp, #-12]
  1002fc:	e51b1008 	ldr	r1, [fp, #-8]
  100300:	e3a00031 	mov	r0, #49	; 0x31
  100304:	eb00f056 	bl	13c464 <syscall>
  100308:	e1a03000 	mov	r3, r0
}
  10030c:	e1a00003 	mov	r0, r3
  100310:	e24bd004 	sub	sp, fp, #4
  100314:	e8bd8800 	pop	{fp, pc}

00100318 <rt_completion_init>:
 * 2019-10-01     Bernard      code cleanup
 */
#include <rtdevice.h>

void rt_completion_init(struct rt_completion *completion)
{
  100318:	e92d4800 	push	{fp, lr}
  10031c:	e28db004 	add	fp, sp, #4
  100320:	e24dd008 	sub	sp, sp, #8
  100324:	e50b0008 	str	r0, [fp, #-8]
    if (completion && completion->flag == 0)
  100328:	e51b3008 	ldr	r3, [fp, #-8]
  10032c:	e3530000 	cmp	r3, #0
  100330:	0a00000d 	beq	10036c <rt_completion_init+0x54>
  100334:	e51b3008 	ldr	r3, [fp, #-8]
  100338:	e5933000 	ldr	r3, [r3]
  10033c:	e3530000 	cmp	r3, #0
  100340:	1a000009 	bne	10036c <rt_completion_init+0x54>
    {
        completion->flag = 0x5A5A;
  100344:	e51b3008 	ldr	r3, [fp, #-8]
  100348:	e3052a5a 	movw	r2, #23130	; 0x5a5a
  10034c:	e5832000 	str	r2, [r3]
        completion->wait_event = rt_event_create("completion", RT_IPC_FLAG_FIFO);
  100350:	e3a01000 	mov	r1, #0
  100354:	e305038c 	movw	r0, #21388	; 0x538c
  100358:	e3400014 	movt	r0, #20
  10035c:	eb0005e5 	bl	101af8 <rt_event_create>
  100360:	e1a02000 	mov	r2, r0
  100364:	e51b3008 	ldr	r3, [fp, #-8]
  100368:	e5832004 	str	r2, [r3, #4]
    }
}
  10036c:	e320f000 	nop	{0}
  100370:	e24bd004 	sub	sp, fp, #4
  100374:	e8bd8800 	pop	{fp, pc}

00100378 <rt_completion_wait>:

rt_err_t rt_completion_wait(struct rt_completion *completion,
    rt_int32_t timeout)
{
  100378:	e92d4800 	push	{fp, lr}
  10037c:	e28db004 	add	fp, sp, #4
  100380:	e24dd018 	sub	sp, sp, #24
  100384:	e50b0010 	str	r0, [fp, #-16]
  100388:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_err_t ret;
    rt_uint32_t recv = 0;
  10038c:	e3a03000 	mov	r3, #0
  100390:	e50b300c 	str	r3, [fp, #-12]

    ret = rt_event_recv(completion->wait_event, 0x01, RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, timeout, &recv);
  100394:	e51b3010 	ldr	r3, [fp, #-16]
  100398:	e5930004 	ldr	r0, [r3, #4]
  10039c:	e24b300c 	sub	r3, fp, #12
  1003a0:	e58d3000 	str	r3, [sp]
  1003a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1003a8:	e3a02006 	mov	r2, #6
  1003ac:	e3a01001 	mov	r1, #1
  1003b0:	eb000684 	bl	101dc8 <rt_event_recv>
  1003b4:	e50b0008 	str	r0, [fp, #-8]

    return ret;
  1003b8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1003bc:	e1a00003 	mov	r0, r3
  1003c0:	e24bd004 	sub	sp, fp, #4
  1003c4:	e8bd8800 	pop	{fp, pc}

001003c8 <rt_completion_done>:

void rt_completion_done(struct rt_completion *completion)
{
  1003c8:	e92d4800 	push	{fp, lr}
  1003cc:	e28db004 	add	fp, sp, #4
  1003d0:	e24dd008 	sub	sp, sp, #8
  1003d4:	e50b0008 	str	r0, [fp, #-8]
    rt_event_send(completion->wait_event, 0x01);
  1003d8:	e51b3008 	ldr	r3, [fp, #-8]
  1003dc:	e5933004 	ldr	r3, [r3, #4]
  1003e0:	e3a01001 	mov	r1, #1
  1003e4:	e1a00003 	mov	r0, r3
  1003e8:	eb000658 	bl	101d50 <rt_event_send>
}
  1003ec:	e320f000 	nop	{0}
  1003f0:	e24bd004 	sub	sp, fp, #4
  1003f4:	e8bd8800 	pop	{fp, pc}

001003f8 <rt_device_init>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

rt_err_t rt_device_init(rt_device_t dev)
{
  1003f8:	e92d4800 	push	{fp, lr}
  1003fc:	e28db004 	add	fp, sp, #4
  100400:	e24dd008 	sub	sp, sp, #8
  100404:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_init, dev);
  100408:	e51b1008 	ldr	r1, [fp, #-8]
  10040c:	e3a0003b 	mov	r0, #59	; 0x3b
  100410:	eb00f013 	bl	13c464 <syscall>
  100414:	e1a03000 	mov	r3, r0
}
  100418:	e1a00003 	mov	r0, r3
  10041c:	e24bd004 	sub	sp, fp, #4
  100420:	e8bd8800 	pop	{fp, pc}

00100424 <rt_device_register>:

rt_err_t rt_device_register(rt_device_t dev,
        const char *name,
        rt_uint16_t flags)
{
  100424:	e92d4800 	push	{fp, lr}
  100428:	e28db004 	add	fp, sp, #4
  10042c:	e24dd010 	sub	sp, sp, #16
  100430:	e50b0008 	str	r0, [fp, #-8]
  100434:	e50b100c 	str	r1, [fp, #-12]
  100438:	e1a03002 	mov	r3, r2
  10043c:	e14b30be 	strh	r3, [fp, #-14]
    return syscall(_NRSYS_rt_device_register, dev, name, flags);
  100440:	e15b30be 	ldrh	r3, [fp, #-14]
  100444:	e51b200c 	ldr	r2, [fp, #-12]
  100448:	e51b1008 	ldr	r1, [fp, #-8]
  10044c:	e3a0003c 	mov	r0, #60	; 0x3c
  100450:	eb00f003 	bl	13c464 <syscall>
  100454:	e1a03000 	mov	r3, r0
}
  100458:	e1a00003 	mov	r0, r3
  10045c:	e24bd004 	sub	sp, fp, #4
  100460:	e8bd8800 	pop	{fp, pc}

00100464 <rt_device_control>:

rt_err_t rt_device_control(rt_device_t dev, int cmd, void *arg)
{
  100464:	e92d4800 	push	{fp, lr}
  100468:	e28db004 	add	fp, sp, #4
  10046c:	e24dd010 	sub	sp, sp, #16
  100470:	e50b0008 	str	r0, [fp, #-8]
  100474:	e50b100c 	str	r1, [fp, #-12]
  100478:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_rt_device_control, dev, cmd, arg);
  10047c:	e51b3010 	ldr	r3, [fp, #-16]
  100480:	e51b200c 	ldr	r2, [fp, #-12]
  100484:	e51b1008 	ldr	r1, [fp, #-8]
  100488:	e3a0003d 	mov	r0, #61	; 0x3d
  10048c:	eb00eff4 	bl	13c464 <syscall>
  100490:	e1a03000 	mov	r3, r0
}
  100494:	e1a00003 	mov	r0, r3
  100498:	e24bd004 	sub	sp, fp, #4
  10049c:	e8bd8800 	pop	{fp, pc}

001004a0 <rt_device_find>:

rt_device_t rt_device_find(const char *name)
{
  1004a0:	e92d4800 	push	{fp, lr}
  1004a4:	e28db004 	add	fp, sp, #4
  1004a8:	e24dd008 	sub	sp, sp, #8
  1004ac:	e50b0008 	str	r0, [fp, #-8]
    return (rt_device_t)syscall(_NRSYS_rt_device_find, name);
  1004b0:	e51b1008 	ldr	r1, [fp, #-8]
  1004b4:	e3a0003e 	mov	r0, #62	; 0x3e
  1004b8:	eb00efe9 	bl	13c464 <syscall>
  1004bc:	e1a03000 	mov	r3, r0
}
  1004c0:	e1a00003 	mov	r0, r3
  1004c4:	e24bd004 	sub	sp, fp, #4
  1004c8:	e8bd8800 	pop	{fp, pc}

001004cc <rt_device_open>:

rt_err_t rt_device_open(rt_device_t dev, rt_uint16_t oflag)
{
  1004cc:	e92d4800 	push	{fp, lr}
  1004d0:	e28db004 	add	fp, sp, #4
  1004d4:	e24dd008 	sub	sp, sp, #8
  1004d8:	e50b0008 	str	r0, [fp, #-8]
  1004dc:	e1a03001 	mov	r3, r1
  1004e0:	e14b30ba 	strh	r3, [fp, #-10]
    return syscall(_NRSYS_rt_device_open, dev, oflag);
  1004e4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1004e8:	e1a02003 	mov	r2, r3
  1004ec:	e51b1008 	ldr	r1, [fp, #-8]
  1004f0:	e3a0003f 	mov	r0, #63	; 0x3f
  1004f4:	eb00efda 	bl	13c464 <syscall>
  1004f8:	e1a03000 	mov	r3, r0
}
  1004fc:	e1a00003 	mov	r0, r3
  100500:	e24bd004 	sub	sp, fp, #4
  100504:	e8bd8800 	pop	{fp, pc}

00100508 <rt_device_close>:

rt_err_t rt_device_close(rt_device_t dev)
{
  100508:	e92d4800 	push	{fp, lr}
  10050c:	e28db004 	add	fp, sp, #4
  100510:	e24dd008 	sub	sp, sp, #8
  100514:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_close, dev);
  100518:	e51b1008 	ldr	r1, [fp, #-8]
  10051c:	e3a00040 	mov	r0, #64	; 0x40
  100520:	eb00efcf 	bl	13c464 <syscall>
  100524:	e1a03000 	mov	r3, r0
}
  100528:	e1a00003 	mov	r0, r3
  10052c:	e24bd004 	sub	sp, fp, #4
  100530:	e8bd8800 	pop	{fp, pc}

00100534 <rt_device_read>:

rt_size_t rt_device_read(rt_device_t dev,
        rt_off_t    pos,
        void       *buffer,
        rt_size_t   size)
{
  100534:	e92d4800 	push	{fp, lr}
  100538:	e28db004 	add	fp, sp, #4
  10053c:	e24dd018 	sub	sp, sp, #24
  100540:	e50b0008 	str	r0, [fp, #-8]
  100544:	e50b100c 	str	r1, [fp, #-12]
  100548:	e50b2010 	str	r2, [fp, #-16]
  10054c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_read, dev, pos, buffer, size);
  100550:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100554:	e58d3000 	str	r3, [sp]
  100558:	e51b3010 	ldr	r3, [fp, #-16]
  10055c:	e51b200c 	ldr	r2, [fp, #-12]
  100560:	e51b1008 	ldr	r1, [fp, #-8]
  100564:	e3a00041 	mov	r0, #65	; 0x41
  100568:	eb00efbd 	bl	13c464 <syscall>
  10056c:	e1a03000 	mov	r3, r0
}
  100570:	e1a00003 	mov	r0, r3
  100574:	e24bd004 	sub	sp, fp, #4
  100578:	e8bd8800 	pop	{fp, pc}

0010057c <rt_device_write>:

rt_size_t rt_device_write(rt_device_t dev,
        rt_off_t    pos,
        const void *buffer,
        rt_size_t   size)
{
  10057c:	e92d4800 	push	{fp, lr}
  100580:	e28db004 	add	fp, sp, #4
  100584:	e24dd018 	sub	sp, sp, #24
  100588:	e50b0008 	str	r0, [fp, #-8]
  10058c:	e50b100c 	str	r1, [fp, #-12]
  100590:	e50b2010 	str	r2, [fp, #-16]
  100594:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_write, dev, pos, buffer, size);;
  100598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10059c:	e58d3000 	str	r3, [sp]
  1005a0:	e51b3010 	ldr	r3, [fp, #-16]
  1005a4:	e51b200c 	ldr	r2, [fp, #-12]
  1005a8:	e51b1008 	ldr	r1, [fp, #-8]
  1005ac:	e3a00042 	mov	r0, #66	; 0x42
  1005b0:	eb00efab 	bl	13c464 <syscall>
  1005b4:	e1a03000 	mov	r3, r0
}
  1005b8:	e1a00003 	mov	r0, r3
  1005bc:	e24bd004 	sub	sp, fp, #4
  1005c0:	e8bd8800 	pop	{fp, pc}

001005c4 <closesocket>:
#include <netinet/in.h>
#include <fcntl.h>
#include <time.h>

int closesocket(int s)
{
  1005c4:	e92d4800 	push	{fp, lr}
  1005c8:	e28db004 	add	fp, sp, #4
  1005cc:	e24dd008 	sub	sp, sp, #8
  1005d0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_closesocket, s);
  1005d4:	e51b1008 	ldr	r1, [fp, #-8]
  1005d8:	e3a00053 	mov	r0, #83	; 0x53
  1005dc:	eb00efa0 	bl	13c464 <syscall>
  1005e0:	e1a03000 	mov	r3, r0
}
  1005e4:	e1a00003 	mov	r0, r3
  1005e8:	e24bd004 	sub	sp, fp, #4
  1005ec:	e8bd8800 	pop	{fp, pc}

001005f0 <getaddrinfo>:

int getaddrinfo(const char *restrict host, const char *restrict serv, const struct addrinfo *restrict hint, struct addrinfo **restrict res)
{
  1005f0:	e92d4800 	push	{fp, lr}
  1005f4:	e28db004 	add	fp, sp, #4
  1005f8:	e24dd020 	sub	sp, sp, #32
  1005fc:	e50b0010 	str	r0, [fp, #-16]
  100600:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100604:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100608:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct addrinfo *ret = NULL;
  10060c:	e3a03000 	mov	r3, #0
  100610:	e50b3008 	str	r3, [fp, #-8]

    ret = (struct addrinfo *) malloc(sizeof(struct addrinfo) + sizeof(struct sockaddr));
  100614:	e3a00030 	mov	r0, #48	; 0x30
  100618:	eb00f34e 	bl	13d358 <malloc>
  10061c:	e1a03000 	mov	r3, r0
  100620:	e50b3008 	str	r3, [fp, #-8]
    if (ret)
  100624:	e51b3008 	ldr	r3, [fp, #-8]
  100628:	e3530000 	cmp	r3, #0
  10062c:	0a000011 	beq	100678 <getaddrinfo+0x88>
    {
        ret->ai_addr = (struct sockaddr *)(ret + 1);
  100630:	e51b3008 	ldr	r3, [fp, #-8]
  100634:	e2832020 	add	r2, r3, #32
  100638:	e51b3008 	ldr	r3, [fp, #-8]
  10063c:	e5832014 	str	r2, [r3, #20]

        /* invoke syscall */
        int result = syscall(_NRSYS_getaddrinfo, host, serv, hint, ret);
  100640:	e51b3008 	ldr	r3, [fp, #-8]
  100644:	e58d3000 	str	r3, [sp]
  100648:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10064c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  100650:	e51b1010 	ldr	r1, [fp, #-16]
  100654:	e3a00054 	mov	r0, #84	; 0x54
  100658:	eb00ef81 	bl	13c464 <syscall>
  10065c:	e50b000c 	str	r0, [fp, #-12]
        if (result == 0)
  100660:	e51b300c 	ldr	r3, [fp, #-12]
  100664:	e3530000 	cmp	r3, #0
  100668:	1a000002 	bne	100678 <getaddrinfo+0x88>
        {
            *res = ret;
  10066c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100670:	e51b2008 	ldr	r2, [fp, #-8]
  100674:	e5832000 	str	r2, [r3]
        }
    }

    return 0;
  100678:	e3a03000 	mov	r3, #0
}
  10067c:	e1a00003 	mov	r0, r3
  100680:	e24bd004 	sub	sp, fp, #4
  100684:	e8bd8800 	pop	{fp, pc}

00100688 <freeaddrinfo>:

void freeaddrinfo(struct addrinfo *p)
{
  100688:	e92d4800 	push	{fp, lr}
  10068c:	e28db004 	add	fp, sp, #4
  100690:	e24dd008 	sub	sp, sp, #8
  100694:	e50b0008 	str	r0, [fp, #-8]
    /* p->ai_canonname, p->ai_next should be NULL. */
    free(p);
  100698:	e51b0008 	ldr	r0, [fp, #-8]
  10069c:	eb00f4e9 	bl	13da48 <free>
}
  1006a0:	e320f000 	nop	{0}
  1006a4:	e24bd004 	sub	sp, fp, #4
  1006a8:	e8bd8800 	pop	{fp, pc}

001006ac <gethostbyname2_r>:

int gethostbyname2_r(const char *name, int af, struct hostent *ret,
                    char *buf, size_t buflen,
                    struct hostent **result, int *err)
{
  1006ac:	e92d4800 	push	{fp, lr}
  1006b0:	e28db004 	add	fp, sp, #4
  1006b4:	e24dd020 	sub	sp, sp, #32
  1006b8:	e50b0008 	str	r0, [fp, #-8]
  1006bc:	e50b100c 	str	r1, [fp, #-12]
  1006c0:	e50b2010 	str	r2, [fp, #-16]
  1006c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_gethostbyname2_r, name, af, ret, buf, buflen, result, err);
  1006c8:	e59b300c 	ldr	r3, [fp, #12]
  1006cc:	e58d300c 	str	r3, [sp, #12]
  1006d0:	e59b3008 	ldr	r3, [fp, #8]
  1006d4:	e58d3008 	str	r3, [sp, #8]
  1006d8:	e59b3004 	ldr	r3, [fp, #4]
  1006dc:	e58d3004 	str	r3, [sp, #4]
  1006e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1006e4:	e58d3000 	str	r3, [sp]
  1006e8:	e51b3010 	ldr	r3, [fp, #-16]
  1006ec:	e51b200c 	ldr	r2, [fp, #-12]
  1006f0:	e51b1008 	ldr	r1, [fp, #-8]
  1006f4:	e3a00055 	mov	r0, #85	; 0x55
  1006f8:	eb00ef59 	bl	13c464 <syscall>
  1006fc:	e1a03000 	mov	r3, r0
}
  100700:	e1a00003 	mov	r0, r3
  100704:	e24bd004 	sub	sp, fp, #4
  100708:	e8bd8800 	pop	{fp, pc}

0010070c <setnonblocking>:

/* set non-blocking */
int setnonblocking(int fd)
{
  10070c:	e92d4800 	push	{fp, lr}
  100710:	e28db004 	add	fp, sp, #4
  100714:	e24dd010 	sub	sp, sp, #16
  100718:	e50b0010 	str	r0, [fp, #-16]
    int old_option = fcntl( fd, F_GETFL, 0);
  10071c:	e3a02000 	mov	r2, #0
  100720:	e3a01003 	mov	r1, #3
  100724:	e51b0010 	ldr	r0, [fp, #-16]
  100728:	eb00e23b 	bl	13901c <fcntl>
  10072c:	e50b0008 	str	r0, [fp, #-8]
    int new_option = old_option | O_NONBLOCK;
  100730:	e51b3008 	ldr	r3, [fp, #-8]
  100734:	e3833b02 	orr	r3, r3, #2048	; 0x800
  100738:	e50b300c 	str	r3, [fp, #-12]
    if (fcntl(fd, F_SETFL, new_option) == -1)
  10073c:	e51b200c 	ldr	r2, [fp, #-12]
  100740:	e3a01004 	mov	r1, #4
  100744:	e51b0010 	ldr	r0, [fp, #-16]
  100748:	eb00e233 	bl	13901c <fcntl>
  10074c:	e1a03000 	mov	r3, r0
  100750:	e3730001 	cmn	r3, #1
  100754:	1a000004 	bne	10076c <setnonblocking+0x60>
    {
        printf("Set noblocking error!\n");
  100758:	e3050398 	movw	r0, #21400	; 0x5398
  10075c:	e3400014 	movt	r0, #20
  100760:	eb00f7a4 	bl	13e5f8 <puts>
        return 1;
  100764:	e3a03001 	mov	r3, #1
  100768:	ea000000 	b	100770 <setnonblocking+0x64>
    }
    return old_option;
  10076c:	e51b3008 	ldr	r3, [fp, #-8]
}
  100770:	e1a00003 	mov	r0, r3
  100774:	e24bd004 	sub	sp, fp, #4
  100778:	e8bd8800 	pop	{fp, pc}

0010077c <socketpair>:

int socketpair(int domain, int type, int protocol, int sv[2])
{
  10077c:	e92d4810 	push	{r4, fp, lr}
  100780:	e28db008 	add	fp, sp, #8
  100784:	e24ddf43 	sub	sp, sp, #268	; 0x10c
  100788:	e50b0100 	str	r0, [fp, #-256]	; 0xffffff00
  10078c:	e50b1104 	str	r1, [fp, #-260]	; 0xfffffefc
  100790:	e50b2108 	str	r2, [fp, #-264]	; 0xfffffef8
  100794:	e50b310c 	str	r3, [fp, #-268]	; 0xfffffef4
    int listenfd = -1, acceptfd = -1, clientfd = -1;
  100798:	e3e03000 	mvn	r3, #0
  10079c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1007a0:	e3e03000 	mvn	r3, #0
  1007a4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  1007a8:	e3e03000 	mvn	r3, #0
  1007ac:	e50b3010 	str	r3, [fp, #-16]
    /* for server, accept, client */
    struct sockaddr_in saddr, aaddr, caddr;
    socklen_t len = sizeof(struct sockaddr_in);
  1007b0:	e3a03010 	mov	r3, #16
  1007b4:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
    int on = 1;
  1007b8:	e3a03001 	mov	r3, #1
  1007bc:	e50b3068 	str	r3, [fp, #-104]	; 0xffffff98
    int fdopt;
    int rt_port;

    /* for select */
    int maxfdp = 0;
  1007c0:	e3a03000 	mov	r3, #0
  1007c4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int rst;
    fd_set rfd;
    struct timeval timeout = {0, 1000};
  1007c8:	e3a02000 	mov	r2, #0
  1007cc:	e3a03000 	mov	r3, #0
  1007d0:	e14b2ffc 	strd	r2, [fp, #-252]	; 0xffffff04
  1007d4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  1007d8:	e50b30f4 	str	r3, [fp, #-244]	; 0xffffff0c

    /* server socket */
    if ((listenfd = socket(domain, type, protocol)) < 0)
  1007dc:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1007e0:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1007e4:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1007e8:	eb00f616 	bl	13e048 <socket>
  1007ec:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  1007f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1007f4:	e3530000 	cmp	r3, #0
  1007f8:	aa00000f 	bge	10083c <socketpair+0xc0>
    {
        printf("Create listenfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  1007fc:	eb00e1b7 	bl	138ee0 <__errno_location>
  100800:	e1a03000 	mov	r3, r0
  100804:	e5933000 	ldr	r3, [r3]
  100808:	e1a00003 	mov	r0, r3
  10080c:	eb00e1d5 	bl	138f68 <strerror>
  100810:	e1a04000 	mov	r4, r0
  100814:	eb00e1b1 	bl	138ee0 <__errno_location>
  100818:	e1a03000 	mov	r3, r0
  10081c:	e5933000 	ldr	r3, [r3]
  100820:	e1a02003 	mov	r2, r3
  100824:	e1a01004 	mov	r1, r4
  100828:	e30503b0 	movw	r0, #21424	; 0x53b0
  10082c:	e3400014 	movt	r0, #20
  100830:	eb00f762 	bl	13e5c0 <printf>
        return -1;
  100834:	e3e03000 	mvn	r3, #0
  100838:	ea000117 	b	100c9c <socketpair+0x520>
    }
    /* non-blocking */
    setnonblocking(listenfd);
  10083c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100840:	ebffffb1 	bl	10070c <setnonblocking>

    /* get random port: 5001~65001 */
    srand((unsigned)time(NULL));
  100844:	e3a00000 	mov	r0, #0
  100848:	eb010940 	bl	142d50 <time>
  10084c:	e1a02000 	mov	r2, r0
  100850:	e1a03001 	mov	r3, r1
  100854:	e1a03002 	mov	r3, r2
  100858:	e1a00003 	mov	r0, r3
  10085c:	eb00f646 	bl	13e17c <srand>
    rt_port = rand() % 60000 + 5001;
  100860:	eb00f64b 	bl	13e194 <rand>
  100864:	e1a02000 	mov	r2, r0
  100868:	e30b3273 	movw	r3, #45683	; 0xb273
  10086c:	e34435e7 	movt	r3, #17895	; 0x45e7
  100870:	e0c10392 	smull	r0, r1, r2, r3
  100874:	e1a01741 	asr	r1, r1, #14
  100878:	e1a03fc2 	asr	r3, r2, #31
  10087c:	e0413003 	sub	r3, r1, r3
  100880:	e30e1a60 	movw	r1, #60000	; 0xea60
  100884:	e0030391 	mul	r3, r1, r3
  100888:	e0423003 	sub	r3, r2, r3
  10088c:	e2833d4e 	add	r3, r3, #4992	; 0x1380
  100890:	e2833009 	add	r3, r3, #9
  100894:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* bind and listen */
    memset(&saddr, 0, sizeof(saddr));
  100898:	e24b3040 	sub	r3, fp, #64	; 0x40
  10089c:	e3a02010 	mov	r2, #16
  1008a0:	e3a01000 	mov	r1, #0
  1008a4:	e1a00003 	mov	r0, r3
  1008a8:	eb010273 	bl	14127c <memset>
    memset(&aaddr, 0, sizeof(aaddr));
  1008ac:	e24b3050 	sub	r3, fp, #80	; 0x50
  1008b0:	e3a02010 	mov	r2, #16
  1008b4:	e3a01000 	mov	r1, #0
  1008b8:	e1a00003 	mov	r0, r3
  1008bc:	eb01026e 	bl	14127c <memset>
    saddr.sin_family = domain;
  1008c0:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  1008c4:	e6ff3073 	uxth	r3, r3
  1008c8:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
    saddr.sin_port = htons(rt_port);
  1008cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1008d0:	e6ff3073 	uxth	r3, r3
  1008d4:	e1a00003 	mov	r0, r3
  1008d8:	eb00f5a8 	bl	13df80 <htons>
  1008dc:	e1a03000 	mov	r3, r0
  1008e0:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
    saddr.sin_addr.s_addr = htonl(INADDR_ANY);
  1008e4:	e3a00000 	mov	r0, #0
  1008e8:	eb00f59f 	bl	13df6c <htonl>
  1008ec:	e1a03000 	mov	r3, r0
  1008f0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4

    if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, (const char*)&on, sizeof(int)) < 0)
  1008f4:	e24b2068 	sub	r2, fp, #104	; 0x68
  1008f8:	e3a03004 	mov	r3, #4
  1008fc:	e58d3000 	str	r3, [sp]
  100900:	e1a03002 	mov	r3, r2
  100904:	e3a02002 	mov	r2, #2
  100908:	e3a01001 	mov	r1, #1
  10090c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100910:	eb00f5b3 	bl	13dfe4 <setsockopt>
  100914:	e1a03000 	mov	r3, r0
  100918:	e3530000 	cmp	r3, #0
  10091c:	aa000003 	bge	100930 <socketpair+0x1b4>
    {
        perror("Setsockopt reuseadd failed");
  100920:	e30503e0 	movw	r0, #21472	; 0x53e0
  100924:	e3400014 	movt	r0, #20
  100928:	eb00f6db 	bl	13e49c <perror>
        goto __exit;
  10092c:	ea0000cf 	b	100c70 <socketpair+0x4f4>
    }

    if (bind(listenfd, (struct sockaddr*)&saddr, sizeof(saddr)) == -1)
  100930:	e24b3040 	sub	r3, fp, #64	; 0x40
  100934:	e3a02010 	mov	r2, #16
  100938:	e1a01003 	mov	r1, r3
  10093c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100940:	eb00f564 	bl	13ded8 <bind>
  100944:	e1a03000 	mov	r3, r0
  100948:	e3730001 	cmn	r3, #1
  10094c:	1a00000e 	bne	10098c <socketpair+0x210>
    {
        printf("Bind socket error: %s(errno: %d), fd=%d\n", strerror(errno), errno, listenfd);
  100950:	eb00e162 	bl	138ee0 <__errno_location>
  100954:	e1a03000 	mov	r3, r0
  100958:	e5933000 	ldr	r3, [r3]
  10095c:	e1a00003 	mov	r0, r3
  100960:	eb00e180 	bl	138f68 <strerror>
  100964:	e1a04000 	mov	r4, r0
  100968:	eb00e15c 	bl	138ee0 <__errno_location>
  10096c:	e1a03000 	mov	r3, r0
  100970:	e5932000 	ldr	r2, [r3]
  100974:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100978:	e1a01004 	mov	r1, r4
  10097c:	e30503fc 	movw	r0, #21500	; 0x53fc
  100980:	e3400014 	movt	r0, #20
  100984:	eb00f70d 	bl	13e5c0 <printf>
        goto __exit;
  100988:	ea0000b8 	b	100c70 <socketpair+0x4f4>
    }

    if (listen(listenfd, 10) == -1)
  10098c:	e3a0100a 	mov	r1, #10
  100990:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100994:	eb00f57e 	bl	13df94 <listen>
  100998:	e1a03000 	mov	r3, r0
  10099c:	e3730001 	cmn	r3, #1
  1009a0:	1a00000e 	bne	1009e0 <socketpair+0x264>
    {
        printf("Listen socket error: %s(errno: %d)\n", strerror(errno), errno);
  1009a4:	eb00e14d 	bl	138ee0 <__errno_location>
  1009a8:	e1a03000 	mov	r3, r0
  1009ac:	e5933000 	ldr	r3, [r3]
  1009b0:	e1a00003 	mov	r0, r3
  1009b4:	eb00e16b 	bl	138f68 <strerror>
  1009b8:	e1a04000 	mov	r4, r0
  1009bc:	eb00e147 	bl	138ee0 <__errno_location>
  1009c0:	e1a03000 	mov	r3, r0
  1009c4:	e5933000 	ldr	r3, [r3]
  1009c8:	e1a02003 	mov	r2, r3
  1009cc:	e1a01004 	mov	r1, r4
  1009d0:	e3050428 	movw	r0, #21544	; 0x5428
  1009d4:	e3400014 	movt	r0, #20
  1009d8:	eb00f6f8 	bl	13e5c0 <printf>
        goto __exit;
  1009dc:	ea0000a3 	b	100c70 <socketpair+0x4f4>
    }

    /* client socket */
    if ((clientfd = socket(domain, type, protocol)) < 0)
  1009e0:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1009e4:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1009e8:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1009ec:	eb00f595 	bl	13e048 <socket>
  1009f0:	e50b0010 	str	r0, [fp, #-16]
  1009f4:	e51b3010 	ldr	r3, [fp, #-16]
  1009f8:	e3530000 	cmp	r3, #0
  1009fc:	aa00000e 	bge	100a3c <socketpair+0x2c0>
    {
        printf("Create clientfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  100a00:	eb00e136 	bl	138ee0 <__errno_location>
  100a04:	e1a03000 	mov	r3, r0
  100a08:	e5933000 	ldr	r3, [r3]
  100a0c:	e1a00003 	mov	r0, r3
  100a10:	eb00e154 	bl	138f68 <strerror>
  100a14:	e1a04000 	mov	r4, r0
  100a18:	eb00e130 	bl	138ee0 <__errno_location>
  100a1c:	e1a03000 	mov	r3, r0
  100a20:	e5933000 	ldr	r3, [r3]
  100a24:	e1a02003 	mov	r2, r3
  100a28:	e1a01004 	mov	r1, r4
  100a2c:	e305044c 	movw	r0, #21580	; 0x544c
  100a30:	e3400014 	movt	r0, #20
  100a34:	eb00f6e1 	bl	13e5c0 <printf>
        goto __exit;
  100a38:	ea00008c 	b	100c70 <socketpair+0x4f4>
    }

    /* non-blocking */
    fdopt = setnonblocking(clientfd);
  100a3c:	e51b0010 	ldr	r0, [fp, #-16]
  100a40:	ebffff31 	bl	10070c <setnonblocking>
  100a44:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    /* client connect */
    memset(&caddr, 0, sizeof(caddr));
  100a48:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a4c:	e3a02010 	mov	r2, #16
  100a50:	e3a01000 	mov	r1, #0
  100a54:	e1a00003 	mov	r0, r3
  100a58:	eb010207 	bl	14127c <memset>
    caddr.sin_family = domain;
  100a5c:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  100a60:	e6ff3073 	uxth	r3, r3
  100a64:	e14b36b0 	strh	r3, [fp, #-96]	; 0xffffffa0
    caddr.sin_port =htons(rt_port);
  100a68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  100a6c:	e6ff3073 	uxth	r3, r3
  100a70:	e1a00003 	mov	r0, r3
  100a74:	eb00f541 	bl	13df80 <htons>
  100a78:	e1a03000 	mov	r3, r0
  100a7c:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
    caddr.sin_addr.s_addr=htonl(INADDR_ANY);
  100a80:	e3a00000 	mov	r0, #0
  100a84:	eb00f538 	bl	13df6c <htonl>
  100a88:	e1a03000 	mov	r3, r0
  100a8c:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    connect(clientfd, (struct sockaddr*)&caddr, sizeof(caddr));
  100a90:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a94:	e3a02010 	mov	r2, #16
  100a98:	e1a01003 	mov	r1, r3
  100a9c:	e51b0010 	ldr	r0, [fp, #-16]
  100aa0:	eb00f522 	bl	13df30 <connect>

    /* do select */
    FD_ZERO(&rfd);
  100aa4:	e24b30e8 	sub	r3, fp, #232	; 0xe8
  100aa8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  100aac:	e3a03020 	mov	r3, #32
  100ab0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ab4:	ea000007 	b	100ad8 <socketpair+0x35c>
  100ab8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  100abc:	e2832004 	add	r2, r3, #4
  100ac0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100ac4:	e3a02000 	mov	r2, #0
  100ac8:	e5832000 	str	r2, [r3]
  100acc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100ad0:	e2433001 	sub	r3, r3, #1
  100ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100adc:	e3530000 	cmp	r3, #0
  100ae0:	1afffff4 	bne	100ab8 <socketpair+0x33c>
    FD_SET(listenfd, &rfd);
  100ae4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100ae8:	e1a022a3 	lsr	r2, r3, #5
  100aec:	e1a03102 	lsl	r3, r2, #2
  100af0:	e24b100c 	sub	r1, fp, #12
  100af4:	e0813003 	add	r3, r1, r3
  100af8:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100afc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b00:	e203301f 	and	r3, r3, #31
  100b04:	e3a00001 	mov	r0, #1
  100b08:	e1a03310 	lsl	r3, r0, r3
  100b0c:	e1811003 	orr	r1, r1, r3
  100b10:	e1a03102 	lsl	r3, r2, #2
  100b14:	e24b200c 	sub	r2, fp, #12
  100b18:	e0823003 	add	r3, r2, r3
  100b1c:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    FD_SET(clientfd, &rfd);
  100b20:	e51b3010 	ldr	r3, [fp, #-16]
  100b24:	e1a022a3 	lsr	r2, r3, #5
  100b28:	e1a03102 	lsl	r3, r2, #2
  100b2c:	e24b100c 	sub	r1, fp, #12
  100b30:	e0813003 	add	r3, r1, r3
  100b34:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100b38:	e51b3010 	ldr	r3, [fp, #-16]
  100b3c:	e203301f 	and	r3, r3, #31
  100b40:	e3a00001 	mov	r0, #1
  100b44:	e1a03310 	lsl	r3, r0, r3
  100b48:	e1811003 	orr	r1, r1, r3
  100b4c:	e1a03102 	lsl	r3, r2, #2
  100b50:	e24b200c 	sub	r2, fp, #12
  100b54:	e0823003 	add	r3, r2, r3
  100b58:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    maxfdp = listenfd > clientfd ? listenfd+1 : clientfd+1;
  100b5c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  100b60:	e51b3010 	ldr	r3, [fp, #-16]
  100b64:	e1520003 	cmp	r2, r3
  100b68:	da000002 	ble	100b78 <socketpair+0x3fc>
  100b6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b70:	e2833001 	add	r3, r3, #1
  100b74:	ea000001 	b	100b80 <socketpair+0x404>
  100b78:	e51b3010 	ldr	r3, [fp, #-16]
  100b7c:	e2833001 	add	r3, r3, #1
  100b80:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    rst = select(maxfdp, &rfd, NULL, NULL, &timeout);
  100b84:	e24b10e8 	sub	r1, fp, #232	; 0xe8
  100b88:	e24b30fc 	sub	r3, fp, #252	; 0xfc
  100b8c:	e58d3000 	str	r3, [sp]
  100b90:	e3a03000 	mov	r3, #0
  100b94:	e3a02000 	mov	r2, #0
  100b98:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  100b9c:	eb00f58e 	bl	13e1dc <select>
  100ba0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    switch(rst)
  100ba4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  100ba8:	e3730001 	cmn	r3, #1
  100bac:	0a000002 	beq	100bbc <socketpair+0x440>
  100bb0:	e3530000 	cmp	r3, #0
  100bb4:	0a000004 	beq	100bcc <socketpair+0x450>
  100bb8:	ea000007 	b	100bdc <socketpair+0x460>
    {
    case -1:
        perror("select error");
  100bbc:	e305047c 	movw	r0, #21628	; 0x547c
  100bc0:	e3400014 	movt	r0, #20
  100bc4:	eb00f634 	bl	13e49c <perror>
        goto __exit;
  100bc8:	ea000028 	b	100c70 <socketpair+0x4f4>
        break;
    case 0:
        perror("continue");
  100bcc:	e305048c 	movw	r0, #21644	; 0x548c
  100bd0:	e3400014 	movt	r0, #20
  100bd4:	eb00f630 	bl	13e49c <perror>
        break;
  100bd8:	ea000024 	b	100c70 <socketpair+0x4f4>
    default:
        if (FD_ISSET(listenfd, &rfd))
  100bdc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100be0:	e1a032a3 	lsr	r3, r3, #5
  100be4:	e1a03103 	lsl	r3, r3, #2
  100be8:	e24b200c 	sub	r2, fp, #12
  100bec:	e0823003 	add	r3, r2, r3
  100bf0:	e51320dc 	ldr	r2, [r3, #-220]	; 0xffffff24
  100bf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100bf8:	e203301f 	and	r3, r3, #31
  100bfc:	e1a03332 	lsr	r3, r2, r3
  100c00:	e2033001 	and	r3, r3, #1
  100c04:	e3530000 	cmp	r3, #0
  100c08:	0a000017 	beq	100c6c <socketpair+0x4f0>
        {
            if ((acceptfd = accept(listenfd, (struct sockaddr*)&caddr, &len)) > 0)
  100c0c:	e24b2064 	sub	r2, fp, #100	; 0x64
  100c10:	e24b3060 	sub	r3, fp, #96	; 0x60
  100c14:	e1a01003 	mov	r1, r3
  100c18:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c1c:	eb00f49e 	bl	13de9c <accept>
  100c20:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  100c24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  100c28:	e3530000 	cmp	r3, #0
  100c2c:	da00000c 	ble	100c64 <socketpair+0x4e8>
            {
                close(listenfd);
  100c30:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c34:	eb010851 	bl	142d80 <close>
                /* set old optional back */
                fcntl(clientfd, F_SETFL, fdopt);
  100c38:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  100c3c:	e3a01004 	mov	r1, #4
  100c40:	e51b0010 	ldr	r0, [fp, #-16]
  100c44:	eb00e0f4 	bl	13901c <fcntl>
                sv[0] = clientfd;
  100c48:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c4c:	e51b2010 	ldr	r2, [fp, #-16]
  100c50:	e5832000 	str	r2, [r3]
                sv[1] = acceptfd;
  100c54:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c58:	e2833004 	add	r3, r3, #4
  100c5c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  100c60:	e5832000 	str	r2, [r3]
            }

            return 0;
  100c64:	e3a03000 	mov	r3, #0
  100c68:	ea00000b 	b	100c9c <socketpair+0x520>
        }
    }

__exit:
  100c6c:	e320f000 	nop	{0}
    if (listenfd >= 0) close(listenfd);
  100c70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100c74:	e3530000 	cmp	r3, #0
  100c78:	ba000001 	blt	100c84 <socketpair+0x508>
  100c7c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c80:	eb01083e 	bl	142d80 <close>
    if (clientfd >= 0) close(clientfd);
  100c84:	e51b3010 	ldr	r3, [fp, #-16]
  100c88:	e3530000 	cmp	r3, #0
  100c8c:	ba000001 	blt	100c98 <socketpair+0x51c>
  100c90:	e51b0010 	ldr	r0, [fp, #-16]
  100c94:	eb010839 	bl	142d80 <close>

    return -1;
  100c98:	e3e03000 	mvn	r3, #0
}
  100c9c:	e1a00003 	mov	r0, r3
  100ca0:	e24bd008 	sub	sp, fp, #8
  100ca4:	e8bd8810 	pop	{r4, fp, pc}

00100ca8 <rt_mutex_create>:
            return RT_EIO;\
        }\
    } while (0)

rt_mutex_t rt_mutex_create(const char *name, rt_uint8_t flag)
{
  100ca8:	e92d4800 	push	{fp, lr}
  100cac:	e28db004 	add	fp, sp, #4
  100cb0:	e24dd010 	sub	sp, sp, #16
  100cb4:	e50b0010 	str	r0, [fp, #-16]
  100cb8:	e1a03001 	mov	r3, r1
  100cbc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100cc0:	e3a00008 	mov	r0, #8
  100cc4:	eb00f1a3 	bl	13d358 <malloc>
  100cc8:	e1a03000 	mov	r3, r0
  100ccc:	e50b3008 	str	r3, [fp, #-8]
  100cd0:	e51b3008 	ldr	r3, [fp, #-8]
  100cd4:	e3530000 	cmp	r3, #0
  100cd8:	1a000001 	bne	100ce4 <rt_mutex_create+0x3c>
  100cdc:	e3a03000 	mov	r3, #0
  100ce0:	ea000015 	b	100d3c <rt_mutex_create+0x94>
  100ce4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  100ce8:	e1a02003 	mov	r2, r3
  100cec:	e51b1010 	ldr	r1, [fp, #-16]
  100cf0:	e3a00016 	mov	r0, #22
  100cf4:	eb00edda 	bl	13c464 <syscall>
  100cf8:	e1a03000 	mov	r3, r0
  100cfc:	e1a02003 	mov	r2, r3
  100d00:	e51b3008 	ldr	r3, [fp, #-8]
  100d04:	e5832004 	str	r2, [r3, #4]
  100d08:	e51b3008 	ldr	r3, [fp, #-8]
  100d0c:	e5933004 	ldr	r3, [r3, #4]
  100d10:	e3530000 	cmp	r3, #0
  100d14:	0a000003 	beq	100d28 <rt_mutex_create+0x80>
  100d18:	e51b3008 	ldr	r3, [fp, #-8]
  100d1c:	e3a02003 	mov	r2, #3
  100d20:	e5832000 	str	r2, [r3]
  100d24:	ea000003 	b	100d38 <rt_mutex_create+0x90>
  100d28:	e51b0008 	ldr	r0, [fp, #-8]
  100d2c:	eb00f345 	bl	13da48 <free>
  100d30:	e3a03000 	mov	r3, #0
  100d34:	e50b3008 	str	r3, [fp, #-8]
  100d38:	e51b3008 	ldr	r3, [fp, #-8]
}
  100d3c:	e1a00003 	mov	r0, r3
  100d40:	e24bd004 	sub	sp, fp, #4
  100d44:	e8bd8800 	pop	{fp, pc}

00100d48 <rt_mutex_init>:

rt_err_t rt_mutex_init(rt_mutex_t mutex, const char *name, rt_uint8_t flag)
{
  100d48:	e92d4800 	push	{fp, lr}
  100d4c:	e28db004 	add	fp, sp, #4
  100d50:	e24dd010 	sub	sp, sp, #16
  100d54:	e50b0008 	str	r0, [fp, #-8]
  100d58:	e50b100c 	str	r1, [fp, #-12]
  100d5c:	e1a03002 	mov	r3, r2
  100d60:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100d64:	e51b3008 	ldr	r3, [fp, #-8]
  100d68:	e3530000 	cmp	r3, #0
  100d6c:	1a000001 	bne	100d78 <rt_mutex_init+0x30>
  100d70:	e3a03008 	mov	r3, #8
  100d74:	ea000012 	b	100dc4 <rt_mutex_init+0x7c>
  100d78:	e55b300d 	ldrb	r3, [fp, #-13]
  100d7c:	e1a02003 	mov	r2, r3
  100d80:	e51b100c 	ldr	r1, [fp, #-12]
  100d84:	e3a00016 	mov	r0, #22
  100d88:	eb00edb5 	bl	13c464 <syscall>
  100d8c:	e1a03000 	mov	r3, r0
  100d90:	e1a02003 	mov	r2, r3
  100d94:	e51b3008 	ldr	r3, [fp, #-8]
  100d98:	e5832004 	str	r2, [r3, #4]
  100d9c:	e51b3008 	ldr	r3, [fp, #-8]
  100da0:	e5933004 	ldr	r3, [r3, #4]
  100da4:	e3530000 	cmp	r3, #0
  100da8:	0a000004 	beq	100dc0 <rt_mutex_init+0x78>
  100dac:	e51b3008 	ldr	r3, [fp, #-8]
  100db0:	e3a02003 	mov	r2, #3
  100db4:	e5832000 	str	r2, [r3]
  100db8:	e3a03000 	mov	r3, #0
  100dbc:	ea000000 	b	100dc4 <rt_mutex_init+0x7c>
  100dc0:	e3a03001 	mov	r3, #1
}
  100dc4:	e1a00003 	mov	r0, r3
  100dc8:	e24bd004 	sub	sp, fp, #4
  100dcc:	e8bd8800 	pop	{fp, pc}

00100dd0 <rt_mutex_delete>:

rt_err_t rt_mutex_delete(rt_mutex_t mutex)
{
  100dd0:	e92d4800 	push	{fp, lr}
  100dd4:	e28db004 	add	fp, sp, #4
  100dd8:	e24dd010 	sub	sp, sp, #16
  100ddc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100de0:	e51b3010 	ldr	r3, [fp, #-16]
  100de4:	e3530000 	cmp	r3, #0
  100de8:	0a000003 	beq	100dfc <rt_mutex_delete+0x2c>
  100dec:	e51b3010 	ldr	r3, [fp, #-16]
  100df0:	e5933004 	ldr	r3, [r3, #4]
  100df4:	e3530000 	cmp	r3, #0
  100df8:	1a000001 	bne	100e04 <rt_mutex_delete+0x34>
  100dfc:	e3a03008 	mov	r3, #8
  100e00:	ea000013 	b	100e54 <rt_mutex_delete+0x84>
  100e04:	e51b3010 	ldr	r3, [fp, #-16]
  100e08:	e5933000 	ldr	r3, [r3]
  100e0c:	e3530003 	cmp	r3, #3
  100e10:	0a000001 	beq	100e1c <rt_mutex_delete+0x4c>
  100e14:	e3a03008 	mov	r3, #8
  100e18:	ea00000d 	b	100e54 <rt_mutex_delete+0x84>
  100e1c:	e51b3010 	ldr	r3, [fp, #-16]
  100e20:	e5933004 	ldr	r3, [r3, #4]
  100e24:	e1a01003 	mov	r1, r3
  100e28:	e3a00017 	mov	r0, #23
  100e2c:	eb00ed8c 	bl	13c464 <syscall>
  100e30:	e50b0008 	str	r0, [fp, #-8]
  100e34:	e51b3008 	ldr	r3, [fp, #-8]
  100e38:	e3530000 	cmp	r3, #0
  100e3c:	0a000001 	beq	100e48 <rt_mutex_delete+0x78>
  100e40:	e51b3008 	ldr	r3, [fp, #-8]
  100e44:	ea000002 	b	100e54 <rt_mutex_delete+0x84>
  100e48:	e51b0010 	ldr	r0, [fp, #-16]
  100e4c:	eb00f2fd 	bl	13da48 <free>
  100e50:	e3a03000 	mov	r3, #0
}
  100e54:	e1a00003 	mov	r0, r3
  100e58:	e24bd004 	sub	sp, fp, #4
  100e5c:	e8bd8800 	pop	{fp, pc}

00100e60 <rt_mutex_detach>:

rt_err_t rt_mutex_detach(rt_mutex_t mutex)
{
  100e60:	e92d4800 	push	{fp, lr}
  100e64:	e28db004 	add	fp, sp, #4
  100e68:	e24dd010 	sub	sp, sp, #16
  100e6c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100e70:	e51b3010 	ldr	r3, [fp, #-16]
  100e74:	e3530000 	cmp	r3, #0
  100e78:	0a000003 	beq	100e8c <rt_mutex_detach+0x2c>
  100e7c:	e51b3010 	ldr	r3, [fp, #-16]
  100e80:	e5933004 	ldr	r3, [r3, #4]
  100e84:	e3530000 	cmp	r3, #0
  100e88:	1a000001 	bne	100e94 <rt_mutex_detach+0x34>
  100e8c:	e3a03008 	mov	r3, #8
  100e90:	ea000017 	b	100ef4 <rt_mutex_detach+0x94>
  100e94:	e51b3010 	ldr	r3, [fp, #-16]
  100e98:	e5933000 	ldr	r3, [r3]
  100e9c:	e3530003 	cmp	r3, #3
  100ea0:	0a000001 	beq	100eac <rt_mutex_detach+0x4c>
  100ea4:	e3a03008 	mov	r3, #8
  100ea8:	ea000011 	b	100ef4 <rt_mutex_detach+0x94>
  100eac:	e51b3010 	ldr	r3, [fp, #-16]
  100eb0:	e5933004 	ldr	r3, [r3, #4]
  100eb4:	e1a01003 	mov	r1, r3
  100eb8:	e3a00017 	mov	r0, #23
  100ebc:	eb00ed68 	bl	13c464 <syscall>
  100ec0:	e50b0008 	str	r0, [fp, #-8]
  100ec4:	e51b3008 	ldr	r3, [fp, #-8]
  100ec8:	e3530000 	cmp	r3, #0
  100ecc:	0a000001 	beq	100ed8 <rt_mutex_detach+0x78>
  100ed0:	e51b3008 	ldr	r3, [fp, #-8]
  100ed4:	ea000006 	b	100ef4 <rt_mutex_detach+0x94>
  100ed8:	e51b3010 	ldr	r3, [fp, #-16]
  100edc:	e3a02000 	mov	r2, #0
  100ee0:	e5832000 	str	r2, [r3]
  100ee4:	e51b3010 	ldr	r3, [fp, #-16]
  100ee8:	e3a02000 	mov	r2, #0
  100eec:	e5832004 	str	r2, [r3, #4]
  100ef0:	e3a03000 	mov	r3, #0
}
  100ef4:	e1a00003 	mov	r0, r3
  100ef8:	e24bd004 	sub	sp, fp, #4
  100efc:	e8bd8800 	pop	{fp, pc}

00100f00 <rt_mutex_take>:

rt_err_t rt_mutex_take(rt_mutex_t mutex, rt_int32_t time)
{
  100f00:	e92d4800 	push	{fp, lr}
  100f04:	e28db004 	add	fp, sp, #4
  100f08:	e24dd008 	sub	sp, sp, #8
  100f0c:	e50b0008 	str	r0, [fp, #-8]
  100f10:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f14:	e51b3008 	ldr	r3, [fp, #-8]
  100f18:	e3530000 	cmp	r3, #0
  100f1c:	0a000003 	beq	100f30 <rt_mutex_take+0x30>
  100f20:	e51b3008 	ldr	r3, [fp, #-8]
  100f24:	e5933004 	ldr	r3, [r3, #4]
  100f28:	e3530000 	cmp	r3, #0
  100f2c:	1a000001 	bne	100f38 <rt_mutex_take+0x38>
  100f30:	e3a03008 	mov	r3, #8
  100f34:	ea00000c 	b	100f6c <rt_mutex_take+0x6c>
  100f38:	e51b3008 	ldr	r3, [fp, #-8]
  100f3c:	e5933000 	ldr	r3, [r3]
  100f40:	e3530003 	cmp	r3, #3
  100f44:	0a000001 	beq	100f50 <rt_mutex_take+0x50>
  100f48:	e3a03008 	mov	r3, #8
  100f4c:	ea000006 	b	100f6c <rt_mutex_take+0x6c>
    return syscall(_NRSYS_mutex_take, mutex->data, time);
  100f50:	e51b3008 	ldr	r3, [fp, #-8]
  100f54:	e5933004 	ldr	r3, [r3, #4]
  100f58:	e51b200c 	ldr	r2, [fp, #-12]
  100f5c:	e1a01003 	mov	r1, r3
  100f60:	e3a00018 	mov	r0, #24
  100f64:	eb00ed3e 	bl	13c464 <syscall>
  100f68:	e1a03000 	mov	r3, r0
}
  100f6c:	e1a00003 	mov	r0, r3
  100f70:	e24bd004 	sub	sp, fp, #4
  100f74:	e8bd8800 	pop	{fp, pc}

00100f78 <rt_mutex_release>:

rt_err_t rt_mutex_release(rt_mutex_t mutex)
{
  100f78:	e92d4800 	push	{fp, lr}
  100f7c:	e28db004 	add	fp, sp, #4
  100f80:	e24dd008 	sub	sp, sp, #8
  100f84:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f88:	e51b3008 	ldr	r3, [fp, #-8]
  100f8c:	e3530000 	cmp	r3, #0
  100f90:	0a000003 	beq	100fa4 <rt_mutex_release+0x2c>
  100f94:	e51b3008 	ldr	r3, [fp, #-8]
  100f98:	e5933004 	ldr	r3, [r3, #4]
  100f9c:	e3530000 	cmp	r3, #0
  100fa0:	1a000001 	bne	100fac <rt_mutex_release+0x34>
  100fa4:	e3a03008 	mov	r3, #8
  100fa8:	ea00000b 	b	100fdc <rt_mutex_release+0x64>
  100fac:	e51b3008 	ldr	r3, [fp, #-8]
  100fb0:	e5933000 	ldr	r3, [r3]
  100fb4:	e3530003 	cmp	r3, #3
  100fb8:	0a000001 	beq	100fc4 <rt_mutex_release+0x4c>
  100fbc:	e3a03008 	mov	r3, #8
  100fc0:	ea000005 	b	100fdc <rt_mutex_release+0x64>
    return syscall(_NRSYS_mutex_release, mutex->data);
  100fc4:	e51b3008 	ldr	r3, [fp, #-8]
  100fc8:	e5933004 	ldr	r3, [r3, #4]
  100fcc:	e1a01003 	mov	r1, r3
  100fd0:	e3a00019 	mov	r0, #25
  100fd4:	eb00ed22 	bl	13c464 <syscall>
  100fd8:	e1a03000 	mov	r3, r0
}
  100fdc:	e1a00003 	mov	r0, r3
  100fe0:	e24bd004 	sub	sp, fp, #4
  100fe4:	e8bd8800 	pop	{fp, pc}

00100fe8 <rt_sem_create>:

rt_sem_t rt_sem_create(const char *name, rt_uint32_t value, rt_uint8_t flag)
{
  100fe8:	e92d4800 	push	{fp, lr}
  100fec:	e28db004 	add	fp, sp, #4
  100ff0:	e24dd018 	sub	sp, sp, #24
  100ff4:	e50b0010 	str	r0, [fp, #-16]
  100ff8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100ffc:	e1a03002 	mov	r3, r2
  101000:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  101004:	e3a00008 	mov	r0, #8
  101008:	eb00f0d2 	bl	13d358 <malloc>
  10100c:	e1a03000 	mov	r3, r0
  101010:	e50b3008 	str	r3, [fp, #-8]
  101014:	e51b3008 	ldr	r3, [fp, #-8]
  101018:	e3530000 	cmp	r3, #0
  10101c:	1a000001 	bne	101028 <rt_sem_create+0x40>
  101020:	e3a03000 	mov	r3, #0
  101024:	ea000015 	b	101080 <rt_sem_create+0x98>
  101028:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10102c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101030:	e51b1010 	ldr	r1, [fp, #-16]
  101034:	e3a00012 	mov	r0, #18
  101038:	eb00ed09 	bl	13c464 <syscall>
  10103c:	e1a03000 	mov	r3, r0
  101040:	e1a02003 	mov	r2, r3
  101044:	e51b3008 	ldr	r3, [fp, #-8]
  101048:	e5832004 	str	r2, [r3, #4]
  10104c:	e51b3008 	ldr	r3, [fp, #-8]
  101050:	e5933004 	ldr	r3, [r3, #4]
  101054:	e3530000 	cmp	r3, #0
  101058:	0a000003 	beq	10106c <rt_sem_create+0x84>
  10105c:	e51b3008 	ldr	r3, [fp, #-8]
  101060:	e3a02002 	mov	r2, #2
  101064:	e5832000 	str	r2, [r3]
  101068:	ea000003 	b	10107c <rt_sem_create+0x94>
  10106c:	e51b0008 	ldr	r0, [fp, #-8]
  101070:	eb00f274 	bl	13da48 <free>
  101074:	e3a03000 	mov	r3, #0
  101078:	e50b3008 	str	r3, [fp, #-8]
  10107c:	e51b3008 	ldr	r3, [fp, #-8]
}
  101080:	e1a00003 	mov	r0, r3
  101084:	e24bd004 	sub	sp, fp, #4
  101088:	e8bd8800 	pop	{fp, pc}

0010108c <rt_sem_init>:

rt_err_t rt_sem_init(rt_sem_t sem,
                     const char *name,
                     rt_uint32_t value,
                     rt_uint8_t  flag)
{
  10108c:	e92d4800 	push	{fp, lr}
  101090:	e28db004 	add	fp, sp, #4
  101094:	e24dd010 	sub	sp, sp, #16
  101098:	e50b0008 	str	r0, [fp, #-8]
  10109c:	e50b100c 	str	r1, [fp, #-12]
  1010a0:	e50b2010 	str	r2, [fp, #-16]
  1010a4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_INIT(sem, RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  1010a8:	e51b3008 	ldr	r3, [fp, #-8]
  1010ac:	e3530000 	cmp	r3, #0
  1010b0:	1a000001 	bne	1010bc <rt_sem_init+0x30>
  1010b4:	e3a03008 	mov	r3, #8
  1010b8:	ea000012 	b	101108 <rt_sem_init+0x7c>
  1010bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1010c0:	e51b2010 	ldr	r2, [fp, #-16]
  1010c4:	e51b100c 	ldr	r1, [fp, #-12]
  1010c8:	e3a00012 	mov	r0, #18
  1010cc:	eb00ece4 	bl	13c464 <syscall>
  1010d0:	e1a03000 	mov	r3, r0
  1010d4:	e1a02003 	mov	r2, r3
  1010d8:	e51b3008 	ldr	r3, [fp, #-8]
  1010dc:	e5832004 	str	r2, [r3, #4]
  1010e0:	e51b3008 	ldr	r3, [fp, #-8]
  1010e4:	e5933004 	ldr	r3, [r3, #4]
  1010e8:	e3530000 	cmp	r3, #0
  1010ec:	0a000004 	beq	101104 <rt_sem_init+0x78>
  1010f0:	e51b3008 	ldr	r3, [fp, #-8]
  1010f4:	e3a02002 	mov	r2, #2
  1010f8:	e5832000 	str	r2, [r3]
  1010fc:	e3a03000 	mov	r3, #0
  101100:	ea000000 	b	101108 <rt_sem_init+0x7c>
  101104:	e3a03001 	mov	r3, #1
}
  101108:	e1a00003 	mov	r0, r3
  10110c:	e24bd004 	sub	sp, fp, #4
  101110:	e8bd8800 	pop	{fp, pc}

00101114 <rt_sem_delete>:

rt_err_t rt_sem_delete(rt_sem_t sem)
{
  101114:	e92d4800 	push	{fp, lr}
  101118:	e28db004 	add	fp, sp, #4
  10111c:	e24dd010 	sub	sp, sp, #16
  101120:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  101124:	e51b3010 	ldr	r3, [fp, #-16]
  101128:	e3530000 	cmp	r3, #0
  10112c:	0a000003 	beq	101140 <rt_sem_delete+0x2c>
  101130:	e51b3010 	ldr	r3, [fp, #-16]
  101134:	e5933004 	ldr	r3, [r3, #4]
  101138:	e3530000 	cmp	r3, #0
  10113c:	1a000001 	bne	101148 <rt_sem_delete+0x34>
  101140:	e3a03008 	mov	r3, #8
  101144:	ea000013 	b	101198 <rt_sem_delete+0x84>
  101148:	e51b3010 	ldr	r3, [fp, #-16]
  10114c:	e5933000 	ldr	r3, [r3]
  101150:	e3530002 	cmp	r3, #2
  101154:	0a000001 	beq	101160 <rt_sem_delete+0x4c>
  101158:	e3a03008 	mov	r3, #8
  10115c:	ea00000d 	b	101198 <rt_sem_delete+0x84>
  101160:	e51b3010 	ldr	r3, [fp, #-16]
  101164:	e5933004 	ldr	r3, [r3, #4]
  101168:	e1a01003 	mov	r1, r3
  10116c:	e3a00013 	mov	r0, #19
  101170:	eb00ecbb 	bl	13c464 <syscall>
  101174:	e50b0008 	str	r0, [fp, #-8]
  101178:	e51b3008 	ldr	r3, [fp, #-8]
  10117c:	e3530000 	cmp	r3, #0
  101180:	0a000001 	beq	10118c <rt_sem_delete+0x78>
  101184:	e51b3008 	ldr	r3, [fp, #-8]
  101188:	ea000002 	b	101198 <rt_sem_delete+0x84>
  10118c:	e51b0010 	ldr	r0, [fp, #-16]
  101190:	eb00f22c 	bl	13da48 <free>
  101194:	e3a03000 	mov	r3, #0
}
  101198:	e1a00003 	mov	r0, r3
  10119c:	e24bd004 	sub	sp, fp, #4
  1011a0:	e8bd8800 	pop	{fp, pc}

001011a4 <rt_sem_detach>:

rt_err_t rt_sem_detach(rt_sem_t sem)
{
  1011a4:	e92d4800 	push	{fp, lr}
  1011a8:	e28db004 	add	fp, sp, #4
  1011ac:	e24dd010 	sub	sp, sp, #16
  1011b0:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  1011b4:	e51b3010 	ldr	r3, [fp, #-16]
  1011b8:	e3530000 	cmp	r3, #0
  1011bc:	0a000003 	beq	1011d0 <rt_sem_detach+0x2c>
  1011c0:	e51b3010 	ldr	r3, [fp, #-16]
  1011c4:	e5933004 	ldr	r3, [r3, #4]
  1011c8:	e3530000 	cmp	r3, #0
  1011cc:	1a000001 	bne	1011d8 <rt_sem_detach+0x34>
  1011d0:	e3a03008 	mov	r3, #8
  1011d4:	ea000017 	b	101238 <rt_sem_detach+0x94>
  1011d8:	e51b3010 	ldr	r3, [fp, #-16]
  1011dc:	e5933000 	ldr	r3, [r3]
  1011e0:	e3530002 	cmp	r3, #2
  1011e4:	0a000001 	beq	1011f0 <rt_sem_detach+0x4c>
  1011e8:	e3a03008 	mov	r3, #8
  1011ec:	ea000011 	b	101238 <rt_sem_detach+0x94>
  1011f0:	e51b3010 	ldr	r3, [fp, #-16]
  1011f4:	e5933004 	ldr	r3, [r3, #4]
  1011f8:	e1a01003 	mov	r1, r3
  1011fc:	e3a00013 	mov	r0, #19
  101200:	eb00ec97 	bl	13c464 <syscall>
  101204:	e50b0008 	str	r0, [fp, #-8]
  101208:	e51b3008 	ldr	r3, [fp, #-8]
  10120c:	e3530000 	cmp	r3, #0
  101210:	0a000001 	beq	10121c <rt_sem_detach+0x78>
  101214:	e51b3008 	ldr	r3, [fp, #-8]
  101218:	ea000006 	b	101238 <rt_sem_detach+0x94>
  10121c:	e51b3010 	ldr	r3, [fp, #-16]
  101220:	e3a02000 	mov	r2, #0
  101224:	e5832000 	str	r2, [r3]
  101228:	e51b3010 	ldr	r3, [fp, #-16]
  10122c:	e3a02000 	mov	r2, #0
  101230:	e5832004 	str	r2, [r3, #4]
  101234:	e3a03000 	mov	r3, #0
}
  101238:	e1a00003 	mov	r0, r3
  10123c:	e24bd004 	sub	sp, fp, #4
  101240:	e8bd8800 	pop	{fp, pc}

00101244 <rt_sem_release>:

rt_err_t rt_sem_release(rt_sem_t sem)
{
  101244:	e92d4800 	push	{fp, lr}
  101248:	e28db004 	add	fp, sp, #4
  10124c:	e24dd008 	sub	sp, sp, #8
  101250:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  101254:	e51b3008 	ldr	r3, [fp, #-8]
  101258:	e3530000 	cmp	r3, #0
  10125c:	0a000003 	beq	101270 <rt_sem_release+0x2c>
  101260:	e51b3008 	ldr	r3, [fp, #-8]
  101264:	e5933004 	ldr	r3, [r3, #4]
  101268:	e3530000 	cmp	r3, #0
  10126c:	1a000001 	bne	101278 <rt_sem_release+0x34>
  101270:	e3a03008 	mov	r3, #8
  101274:	ea00000b 	b	1012a8 <rt_sem_release+0x64>
  101278:	e51b3008 	ldr	r3, [fp, #-8]
  10127c:	e5933000 	ldr	r3, [r3]
  101280:	e3530002 	cmp	r3, #2
  101284:	0a000001 	beq	101290 <rt_sem_release+0x4c>
  101288:	e3a03008 	mov	r3, #8
  10128c:	ea000005 	b	1012a8 <rt_sem_release+0x64>
    return syscall(_NRSYS_sem_release, sem->data);
  101290:	e51b3008 	ldr	r3, [fp, #-8]
  101294:	e5933004 	ldr	r3, [r3, #4]
  101298:	e1a01003 	mov	r1, r3
  10129c:	e3a00015 	mov	r0, #21
  1012a0:	eb00ec6f 	bl	13c464 <syscall>
  1012a4:	e1a03000 	mov	r3, r0
}
  1012a8:	e1a00003 	mov	r0, r3
  1012ac:	e24bd004 	sub	sp, fp, #4
  1012b0:	e8bd8800 	pop	{fp, pc}

001012b4 <rt_sem_take>:

rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t time)
{
  1012b4:	e92d4800 	push	{fp, lr}
  1012b8:	e28db004 	add	fp, sp, #4
  1012bc:	e24dd008 	sub	sp, sp, #8
  1012c0:	e50b0008 	str	r0, [fp, #-8]
  1012c4:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  1012c8:	e51b3008 	ldr	r3, [fp, #-8]
  1012cc:	e3530000 	cmp	r3, #0
  1012d0:	0a000003 	beq	1012e4 <rt_sem_take+0x30>
  1012d4:	e51b3008 	ldr	r3, [fp, #-8]
  1012d8:	e5933004 	ldr	r3, [r3, #4]
  1012dc:	e3530000 	cmp	r3, #0
  1012e0:	1a000001 	bne	1012ec <rt_sem_take+0x38>
  1012e4:	e3a03008 	mov	r3, #8
  1012e8:	ea00000c 	b	101320 <rt_sem_take+0x6c>
  1012ec:	e51b3008 	ldr	r3, [fp, #-8]
  1012f0:	e5933000 	ldr	r3, [r3]
  1012f4:	e3530002 	cmp	r3, #2
  1012f8:	0a000001 	beq	101304 <rt_sem_take+0x50>
  1012fc:	e3a03008 	mov	r3, #8
  101300:	ea000006 	b	101320 <rt_sem_take+0x6c>
    return syscall(_NRSYS_sem_take, sem->data, time);
  101304:	e51b3008 	ldr	r3, [fp, #-8]
  101308:	e5933004 	ldr	r3, [r3, #4]
  10130c:	e51b200c 	ldr	r2, [fp, #-12]
  101310:	e1a01003 	mov	r1, r3
  101314:	e3a00014 	mov	r0, #20
  101318:	eb00ec51 	bl	13c464 <syscall>
  10131c:	e1a03000 	mov	r3, r0
}
  101320:	e1a00003 	mov	r0, r3
  101324:	e24bd004 	sub	sp, fp, #4
  101328:	e8bd8800 	pop	{fp, pc}

0010132c <rt_mb_create>:

rt_mailbox_t rt_mb_create(const char *name, rt_size_t size, rt_uint8_t flag)
{
  10132c:	e92d4800 	push	{fp, lr}
  101330:	e28db004 	add	fp, sp, #4
  101334:	e24dd018 	sub	sp, sp, #24
  101338:	e50b0010 	str	r0, [fp, #-16]
  10133c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  101340:	e1a03002 	mov	r3, r2
  101344:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  101348:	e3a00008 	mov	r0, #8
  10134c:	eb00f001 	bl	13d358 <malloc>
  101350:	e1a03000 	mov	r3, r0
  101354:	e50b3008 	str	r3, [fp, #-8]
  101358:	e51b3008 	ldr	r3, [fp, #-8]
  10135c:	e3530000 	cmp	r3, #0
  101360:	1a000001 	bne	10136c <rt_mb_create+0x40>
  101364:	e3a03000 	mov	r3, #0
  101368:	ea000015 	b	1013c4 <rt_mb_create+0x98>
  10136c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  101370:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101374:	e51b1010 	ldr	r1, [fp, #-16]
  101378:	e3a0001e 	mov	r0, #30
  10137c:	eb00ec38 	bl	13c464 <syscall>
  101380:	e1a03000 	mov	r3, r0
  101384:	e1a02003 	mov	r2, r3
  101388:	e51b3008 	ldr	r3, [fp, #-8]
  10138c:	e5832004 	str	r2, [r3, #4]
  101390:	e51b3008 	ldr	r3, [fp, #-8]
  101394:	e5933004 	ldr	r3, [r3, #4]
  101398:	e3530000 	cmp	r3, #0
  10139c:	0a000003 	beq	1013b0 <rt_mb_create+0x84>
  1013a0:	e51b3008 	ldr	r3, [fp, #-8]
  1013a4:	e3a02005 	mov	r2, #5
  1013a8:	e5832000 	str	r2, [r3]
  1013ac:	ea000003 	b	1013c0 <rt_mb_create+0x94>
  1013b0:	e51b0008 	ldr	r0, [fp, #-8]
  1013b4:	eb00f1a3 	bl	13da48 <free>
  1013b8:	e3a03000 	mov	r3, #0
  1013bc:	e50b3008 	str	r3, [fp, #-8]
  1013c0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1013c4:	e1a00003 	mov	r0, r3
  1013c8:	e24bd004 	sub	sp, fp, #4
  1013cc:	e8bd8800 	pop	{fp, pc}

001013d0 <rt_mb_init>:
rt_err_t rt_mb_init(rt_mailbox_t mb,
                    const char  *name,
                    void        *msgpool,
                    rt_size_t    size,
                    rt_uint8_t   flag)
{
  1013d0:	e92d4800 	push	{fp, lr}
  1013d4:	e28db004 	add	fp, sp, #4
  1013d8:	e24dd010 	sub	sp, sp, #16
  1013dc:	e50b0008 	str	r0, [fp, #-8]
  1013e0:	e50b100c 	str	r1, [fp, #-12]
  1013e4:	e50b2010 	str	r2, [fp, #-16]
  1013e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mb, RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  1013ec:	e51b3008 	ldr	r3, [fp, #-8]
  1013f0:	e3530000 	cmp	r3, #0
  1013f4:	1a000001 	bne	101400 <rt_mb_init+0x30>
  1013f8:	e3a03008 	mov	r3, #8
  1013fc:	ea000012 	b	10144c <rt_mb_init+0x7c>
  101400:	e5db3004 	ldrb	r3, [fp, #4]
  101404:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101408:	e51b100c 	ldr	r1, [fp, #-12]
  10140c:	e3a0001e 	mov	r0, #30
  101410:	eb00ec13 	bl	13c464 <syscall>
  101414:	e1a03000 	mov	r3, r0
  101418:	e1a02003 	mov	r2, r3
  10141c:	e51b3008 	ldr	r3, [fp, #-8]
  101420:	e5832004 	str	r2, [r3, #4]
  101424:	e51b3008 	ldr	r3, [fp, #-8]
  101428:	e5933004 	ldr	r3, [r3, #4]
  10142c:	e3530000 	cmp	r3, #0
  101430:	0a000004 	beq	101448 <rt_mb_init+0x78>
  101434:	e51b3008 	ldr	r3, [fp, #-8]
  101438:	e3a02005 	mov	r2, #5
  10143c:	e5832000 	str	r2, [r3]
  101440:	e3a03000 	mov	r3, #0
  101444:	ea000000 	b	10144c <rt_mb_init+0x7c>
  101448:	e3a03001 	mov	r3, #1
}
  10144c:	e1a00003 	mov	r0, r3
  101450:	e24bd004 	sub	sp, fp, #4
  101454:	e8bd8800 	pop	{fp, pc}

00101458 <rt_mb_delete>:


rt_err_t rt_mb_delete(rt_mailbox_t mb)
{
  101458:	e92d4800 	push	{fp, lr}
  10145c:	e28db004 	add	fp, sp, #4
  101460:	e24dd010 	sub	sp, sp, #16
  101464:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  101468:	e51b3010 	ldr	r3, [fp, #-16]
  10146c:	e3530000 	cmp	r3, #0
  101470:	0a000003 	beq	101484 <rt_mb_delete+0x2c>
  101474:	e51b3010 	ldr	r3, [fp, #-16]
  101478:	e5933004 	ldr	r3, [r3, #4]
  10147c:	e3530000 	cmp	r3, #0
  101480:	1a000001 	bne	10148c <rt_mb_delete+0x34>
  101484:	e3a03008 	mov	r3, #8
  101488:	ea000013 	b	1014dc <rt_mb_delete+0x84>
  10148c:	e51b3010 	ldr	r3, [fp, #-16]
  101490:	e5933000 	ldr	r3, [r3]
  101494:	e3530005 	cmp	r3, #5
  101498:	0a000001 	beq	1014a4 <rt_mb_delete+0x4c>
  10149c:	e3a03008 	mov	r3, #8
  1014a0:	ea00000d 	b	1014dc <rt_mb_delete+0x84>
  1014a4:	e51b3010 	ldr	r3, [fp, #-16]
  1014a8:	e5933004 	ldr	r3, [r3, #4]
  1014ac:	e1a01003 	mov	r1, r3
  1014b0:	e3a0001f 	mov	r0, #31
  1014b4:	eb00ebea 	bl	13c464 <syscall>
  1014b8:	e50b0008 	str	r0, [fp, #-8]
  1014bc:	e51b3008 	ldr	r3, [fp, #-8]
  1014c0:	e3530000 	cmp	r3, #0
  1014c4:	0a000001 	beq	1014d0 <rt_mb_delete+0x78>
  1014c8:	e51b3008 	ldr	r3, [fp, #-8]
  1014cc:	ea000002 	b	1014dc <rt_mb_delete+0x84>
  1014d0:	e51b0010 	ldr	r0, [fp, #-16]
  1014d4:	eb00f15b 	bl	13da48 <free>
  1014d8:	e3a03000 	mov	r3, #0
}
  1014dc:	e1a00003 	mov	r0, r3
  1014e0:	e24bd004 	sub	sp, fp, #4
  1014e4:	e8bd8800 	pop	{fp, pc}

001014e8 <rt_mb_detach>:

rt_err_t rt_mb_detach(rt_mailbox_t mb)
{
  1014e8:	e92d4800 	push	{fp, lr}
  1014ec:	e28db004 	add	fp, sp, #4
  1014f0:	e24dd010 	sub	sp, sp, #16
  1014f4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  1014f8:	e51b3010 	ldr	r3, [fp, #-16]
  1014fc:	e3530000 	cmp	r3, #0
  101500:	0a000003 	beq	101514 <rt_mb_detach+0x2c>
  101504:	e51b3010 	ldr	r3, [fp, #-16]
  101508:	e5933004 	ldr	r3, [r3, #4]
  10150c:	e3530000 	cmp	r3, #0
  101510:	1a000001 	bne	10151c <rt_mb_detach+0x34>
  101514:	e3a03008 	mov	r3, #8
  101518:	ea000017 	b	10157c <rt_mb_detach+0x94>
  10151c:	e51b3010 	ldr	r3, [fp, #-16]
  101520:	e5933000 	ldr	r3, [r3]
  101524:	e3530005 	cmp	r3, #5
  101528:	0a000001 	beq	101534 <rt_mb_detach+0x4c>
  10152c:	e3a03008 	mov	r3, #8
  101530:	ea000011 	b	10157c <rt_mb_detach+0x94>
  101534:	e51b3010 	ldr	r3, [fp, #-16]
  101538:	e5933004 	ldr	r3, [r3, #4]
  10153c:	e1a01003 	mov	r1, r3
  101540:	e3a0001f 	mov	r0, #31
  101544:	eb00ebc6 	bl	13c464 <syscall>
  101548:	e50b0008 	str	r0, [fp, #-8]
  10154c:	e51b3008 	ldr	r3, [fp, #-8]
  101550:	e3530000 	cmp	r3, #0
  101554:	0a000001 	beq	101560 <rt_mb_detach+0x78>
  101558:	e51b3008 	ldr	r3, [fp, #-8]
  10155c:	ea000006 	b	10157c <rt_mb_detach+0x94>
  101560:	e51b3010 	ldr	r3, [fp, #-16]
  101564:	e3a02000 	mov	r2, #0
  101568:	e5832000 	str	r2, [r3]
  10156c:	e51b3010 	ldr	r3, [fp, #-16]
  101570:	e3a02000 	mov	r2, #0
  101574:	e5832004 	str	r2, [r3, #4]
  101578:	e3a03000 	mov	r3, #0
}
  10157c:	e1a00003 	mov	r0, r3
  101580:	e24bd004 	sub	sp, fp, #4
  101584:	e8bd8800 	pop	{fp, pc}

00101588 <rt_mb_send_wait>:

rt_err_t rt_mb_send_wait(rt_mailbox_t mb,
        rt_ubase_t   value,
        rt_int32_t   timeout)
{
  101588:	e92d4800 	push	{fp, lr}
  10158c:	e28db004 	add	fp, sp, #4
  101590:	e24dd010 	sub	sp, sp, #16
  101594:	e50b0008 	str	r0, [fp, #-8]
  101598:	e50b100c 	str	r1, [fp, #-12]
  10159c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  1015a0:	e51b3008 	ldr	r3, [fp, #-8]
  1015a4:	e3530000 	cmp	r3, #0
  1015a8:	0a000003 	beq	1015bc <rt_mb_send_wait+0x34>
  1015ac:	e51b3008 	ldr	r3, [fp, #-8]
  1015b0:	e5933004 	ldr	r3, [r3, #4]
  1015b4:	e3530000 	cmp	r3, #0
  1015b8:	1a000001 	bne	1015c4 <rt_mb_send_wait+0x3c>
  1015bc:	e3a03008 	mov	r3, #8
  1015c0:	ea00000c 	b	1015f8 <rt_mb_send_wait+0x70>
  1015c4:	e51b3008 	ldr	r3, [fp, #-8]
  1015c8:	e5933000 	ldr	r3, [r3]
  1015cc:	e3530005 	cmp	r3, #5
  1015d0:	0a000001 	beq	1015dc <rt_mb_send_wait+0x54>
  1015d4:	e3a03008 	mov	r3, #8
  1015d8:	ea000006 	b	1015f8 <rt_mb_send_wait+0x70>
    return syscall(_NRSYS_mb_send_wait, mb->data, value, timeout);
  1015dc:	e51b3008 	ldr	r3, [fp, #-8]
  1015e0:	e5931004 	ldr	r1, [r3, #4]
  1015e4:	e51b3010 	ldr	r3, [fp, #-16]
  1015e8:	e51b200c 	ldr	r2, [fp, #-12]
  1015ec:	e3a00021 	mov	r0, #33	; 0x21
  1015f0:	eb00eb9b 	bl	13c464 <syscall>
  1015f4:	e1a03000 	mov	r3, r0
}
  1015f8:	e1a00003 	mov	r0, r3
  1015fc:	e24bd004 	sub	sp, fp, #4
  101600:	e8bd8800 	pop	{fp, pc}

00101604 <rt_mb_send>:

rt_err_t rt_mb_send(rt_mailbox_t mb, rt_ubase_t value)
{
  101604:	e92d4800 	push	{fp, lr}
  101608:	e28db004 	add	fp, sp, #4
  10160c:	e24dd008 	sub	sp, sp, #8
  101610:	e50b0008 	str	r0, [fp, #-8]
  101614:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101618:	e51b3008 	ldr	r3, [fp, #-8]
  10161c:	e3530000 	cmp	r3, #0
  101620:	0a000003 	beq	101634 <rt_mb_send+0x30>
  101624:	e51b3008 	ldr	r3, [fp, #-8]
  101628:	e5933004 	ldr	r3, [r3, #4]
  10162c:	e3530000 	cmp	r3, #0
  101630:	1a000001 	bne	10163c <rt_mb_send+0x38>
  101634:	e3a03008 	mov	r3, #8
  101638:	ea00000c 	b	101670 <rt_mb_send+0x6c>
  10163c:	e51b3008 	ldr	r3, [fp, #-8]
  101640:	e5933000 	ldr	r3, [r3]
  101644:	e3530005 	cmp	r3, #5
  101648:	0a000001 	beq	101654 <rt_mb_send+0x50>
  10164c:	e3a03008 	mov	r3, #8
  101650:	ea000006 	b	101670 <rt_mb_send+0x6c>
    return syscall(_NRSYS_mb_send, mb->data, value);
  101654:	e51b3008 	ldr	r3, [fp, #-8]
  101658:	e5933004 	ldr	r3, [r3, #4]
  10165c:	e51b200c 	ldr	r2, [fp, #-12]
  101660:	e1a01003 	mov	r1, r3
  101664:	e3a00020 	mov	r0, #32
  101668:	eb00eb7d 	bl	13c464 <syscall>
  10166c:	e1a03000 	mov	r3, r0
}
  101670:	e1a00003 	mov	r0, r3
  101674:	e24bd004 	sub	sp, fp, #4
  101678:	e8bd8800 	pop	{fp, pc}

0010167c <rt_mb_recv>:

rt_err_t rt_mb_recv(rt_mailbox_t mb, rt_ubase_t *value, rt_int32_t timeout)
{
  10167c:	e92d4800 	push	{fp, lr}
  101680:	e28db004 	add	fp, sp, #4
  101684:	e24dd010 	sub	sp, sp, #16
  101688:	e50b0008 	str	r0, [fp, #-8]
  10168c:	e50b100c 	str	r1, [fp, #-12]
  101690:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101694:	e51b3008 	ldr	r3, [fp, #-8]
  101698:	e3530000 	cmp	r3, #0
  10169c:	0a000003 	beq	1016b0 <rt_mb_recv+0x34>
  1016a0:	e51b3008 	ldr	r3, [fp, #-8]
  1016a4:	e5933004 	ldr	r3, [r3, #4]
  1016a8:	e3530000 	cmp	r3, #0
  1016ac:	1a000001 	bne	1016b8 <rt_mb_recv+0x3c>
  1016b0:	e3a03008 	mov	r3, #8
  1016b4:	ea00000c 	b	1016ec <rt_mb_recv+0x70>
  1016b8:	e51b3008 	ldr	r3, [fp, #-8]
  1016bc:	e5933000 	ldr	r3, [r3]
  1016c0:	e3530005 	cmp	r3, #5
  1016c4:	0a000001 	beq	1016d0 <rt_mb_recv+0x54>
  1016c8:	e3a03008 	mov	r3, #8
  1016cc:	ea000006 	b	1016ec <rt_mb_recv+0x70>
    return syscall(_NRSYS_mb_recv, mb->data, value, timeout);
  1016d0:	e51b3008 	ldr	r3, [fp, #-8]
  1016d4:	e5931004 	ldr	r1, [r3, #4]
  1016d8:	e51b3010 	ldr	r3, [fp, #-16]
  1016dc:	e51b200c 	ldr	r2, [fp, #-12]
  1016e0:	e3a00022 	mov	r0, #34	; 0x22
  1016e4:	eb00eb5e 	bl	13c464 <syscall>
  1016e8:	e1a03000 	mov	r3, r0
}
  1016ec:	e1a00003 	mov	r0, r3
  1016f0:	e24bd004 	sub	sp, fp, #4
  1016f4:	e8bd8800 	pop	{fp, pc}

001016f8 <rt_mq_create>:

rt_mq_t rt_mq_create(const char *name,
                     rt_size_t   msg_size,
                     rt_size_t   max_msgs,
                     rt_uint8_t  flag)
{
  1016f8:	e92d4800 	push	{fp, lr}
  1016fc:	e28db004 	add	fp, sp, #4
  101700:	e24dd020 	sub	sp, sp, #32
  101704:	e50b0010 	str	r0, [fp, #-16]
  101708:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10170c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  101710:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    RT_USER_IPC_CREATE(RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, max_msgs, flag);
  101714:	e3a00008 	mov	r0, #8
  101718:	eb00ef0e 	bl	13d358 <malloc>
  10171c:	e1a03000 	mov	r3, r0
  101720:	e50b3008 	str	r3, [fp, #-8]
  101724:	e51b3008 	ldr	r3, [fp, #-8]
  101728:	e3530000 	cmp	r3, #0
  10172c:	1a000001 	bne	101738 <rt_mq_create+0x40>
  101730:	e3a03000 	mov	r3, #0
  101734:	ea000017 	b	101798 <rt_mq_create+0xa0>
  101738:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  10173c:	e58d3000 	str	r3, [sp]
  101740:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  101744:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101748:	e51b1010 	ldr	r1, [fp, #-16]
  10174c:	e3a00023 	mov	r0, #35	; 0x23
  101750:	eb00eb43 	bl	13c464 <syscall>
  101754:	e1a03000 	mov	r3, r0
  101758:	e1a02003 	mov	r2, r3
  10175c:	e51b3008 	ldr	r3, [fp, #-8]
  101760:	e5832004 	str	r2, [r3, #4]
  101764:	e51b3008 	ldr	r3, [fp, #-8]
  101768:	e5933004 	ldr	r3, [r3, #4]
  10176c:	e3530000 	cmp	r3, #0
  101770:	0a000003 	beq	101784 <rt_mq_create+0x8c>
  101774:	e51b3008 	ldr	r3, [fp, #-8]
  101778:	e3a02006 	mov	r2, #6
  10177c:	e5832000 	str	r2, [r3]
  101780:	ea000003 	b	101794 <rt_mq_create+0x9c>
  101784:	e51b0008 	ldr	r0, [fp, #-8]
  101788:	eb00f0ae 	bl	13da48 <free>
  10178c:	e3a03000 	mov	r3, #0
  101790:	e50b3008 	str	r3, [fp, #-8]
  101794:	e51b3008 	ldr	r3, [fp, #-8]
}
  101798:	e1a00003 	mov	r0, r3
  10179c:	e24bd004 	sub	sp, fp, #4
  1017a0:	e8bd8800 	pop	{fp, pc}

001017a4 <rt_mq_init>:
                    const char *name,
                    void       *msgpool,
                    rt_size_t   msg_size,
                    rt_size_t   pool_size,
                    rt_uint8_t  flag)
{
  1017a4:	e92d4800 	push	{fp, lr}
  1017a8:	e28db004 	add	fp, sp, #4
  1017ac:	e24dd018 	sub	sp, sp, #24
  1017b0:	e50b0008 	str	r0, [fp, #-8]
  1017b4:	e50b100c 	str	r1, [fp, #-12]
  1017b8:	e50b2010 	str	r2, [fp, #-16]
  1017bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, pool_size/msg_size, flag);
  1017c0:	e51b3008 	ldr	r3, [fp, #-8]
  1017c4:	e3530000 	cmp	r3, #0
  1017c8:	1a000001 	bne	1017d4 <rt_mq_init+0x30>
  1017cc:	e3a03008 	mov	r3, #8
  1017d0:	ea000019 	b	10183c <rt_mq_init+0x98>
  1017d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1017d8:	e59b0004 	ldr	r0, [fp, #4]
  1017dc:	eb00dc26 	bl	13887c <__udivsi3>
  1017e0:	e1a03000 	mov	r3, r0
  1017e4:	e1a02003 	mov	r2, r3
  1017e8:	e5db3008 	ldrb	r3, [fp, #8]
  1017ec:	e58d3000 	str	r3, [sp]
  1017f0:	e1a03002 	mov	r3, r2
  1017f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1017f8:	e51b100c 	ldr	r1, [fp, #-12]
  1017fc:	e3a00023 	mov	r0, #35	; 0x23
  101800:	eb00eb17 	bl	13c464 <syscall>
  101804:	e1a03000 	mov	r3, r0
  101808:	e1a02003 	mov	r2, r3
  10180c:	e51b3008 	ldr	r3, [fp, #-8]
  101810:	e5832004 	str	r2, [r3, #4]
  101814:	e51b3008 	ldr	r3, [fp, #-8]
  101818:	e5933004 	ldr	r3, [r3, #4]
  10181c:	e3530000 	cmp	r3, #0
  101820:	0a000004 	beq	101838 <rt_mq_init+0x94>
  101824:	e51b3008 	ldr	r3, [fp, #-8]
  101828:	e3a02006 	mov	r2, #6
  10182c:	e5832000 	str	r2, [r3]
  101830:	e3a03000 	mov	r3, #0
  101834:	ea000000 	b	10183c <rt_mq_init+0x98>
  101838:	e3a03001 	mov	r3, #1
}
  10183c:	e1a00003 	mov	r0, r3
  101840:	e24bd004 	sub	sp, fp, #4
  101844:	e8bd8800 	pop	{fp, pc}

00101848 <rt_mq_delete>:

rt_err_t rt_mq_delete(rt_mq_t mq)
{
  101848:	e92d4800 	push	{fp, lr}
  10184c:	e28db004 	add	fp, sp, #4
  101850:	e24dd010 	sub	sp, sp, #16
  101854:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  101858:	e51b3010 	ldr	r3, [fp, #-16]
  10185c:	e3530000 	cmp	r3, #0
  101860:	0a000003 	beq	101874 <rt_mq_delete+0x2c>
  101864:	e51b3010 	ldr	r3, [fp, #-16]
  101868:	e5933004 	ldr	r3, [r3, #4]
  10186c:	e3530000 	cmp	r3, #0
  101870:	1a000001 	bne	10187c <rt_mq_delete+0x34>
  101874:	e3a03008 	mov	r3, #8
  101878:	ea000013 	b	1018cc <rt_mq_delete+0x84>
  10187c:	e51b3010 	ldr	r3, [fp, #-16]
  101880:	e5933000 	ldr	r3, [r3]
  101884:	e3530006 	cmp	r3, #6
  101888:	0a000001 	beq	101894 <rt_mq_delete+0x4c>
  10188c:	e3a03008 	mov	r3, #8
  101890:	ea00000d 	b	1018cc <rt_mq_delete+0x84>
  101894:	e51b3010 	ldr	r3, [fp, #-16]
  101898:	e5933004 	ldr	r3, [r3, #4]
  10189c:	e1a01003 	mov	r1, r3
  1018a0:	e3a00024 	mov	r0, #36	; 0x24
  1018a4:	eb00eaee 	bl	13c464 <syscall>
  1018a8:	e50b0008 	str	r0, [fp, #-8]
  1018ac:	e51b3008 	ldr	r3, [fp, #-8]
  1018b0:	e3530000 	cmp	r3, #0
  1018b4:	0a000001 	beq	1018c0 <rt_mq_delete+0x78>
  1018b8:	e51b3008 	ldr	r3, [fp, #-8]
  1018bc:	ea000002 	b	1018cc <rt_mq_delete+0x84>
  1018c0:	e51b0010 	ldr	r0, [fp, #-16]
  1018c4:	eb00f05f 	bl	13da48 <free>
  1018c8:	e3a03000 	mov	r3, #0
}
  1018cc:	e1a00003 	mov	r0, r3
  1018d0:	e24bd004 	sub	sp, fp, #4
  1018d4:	e8bd8800 	pop	{fp, pc}

001018d8 <rt_mq_detach>:

rt_err_t rt_mq_detach(rt_mq_t mq)
{
  1018d8:	e92d4800 	push	{fp, lr}
  1018dc:	e28db004 	add	fp, sp, #4
  1018e0:	e24dd010 	sub	sp, sp, #16
  1018e4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  1018e8:	e51b3010 	ldr	r3, [fp, #-16]
  1018ec:	e3530000 	cmp	r3, #0
  1018f0:	0a000003 	beq	101904 <rt_mq_detach+0x2c>
  1018f4:	e51b3010 	ldr	r3, [fp, #-16]
  1018f8:	e5933004 	ldr	r3, [r3, #4]
  1018fc:	e3530000 	cmp	r3, #0
  101900:	1a000001 	bne	10190c <rt_mq_detach+0x34>
  101904:	e3a03008 	mov	r3, #8
  101908:	ea000017 	b	10196c <rt_mq_detach+0x94>
  10190c:	e51b3010 	ldr	r3, [fp, #-16]
  101910:	e5933000 	ldr	r3, [r3]
  101914:	e3530006 	cmp	r3, #6
  101918:	0a000001 	beq	101924 <rt_mq_detach+0x4c>
  10191c:	e3a03008 	mov	r3, #8
  101920:	ea000011 	b	10196c <rt_mq_detach+0x94>
  101924:	e51b3010 	ldr	r3, [fp, #-16]
  101928:	e5933004 	ldr	r3, [r3, #4]
  10192c:	e1a01003 	mov	r1, r3
  101930:	e3a00024 	mov	r0, #36	; 0x24
  101934:	eb00eaca 	bl	13c464 <syscall>
  101938:	e50b0008 	str	r0, [fp, #-8]
  10193c:	e51b3008 	ldr	r3, [fp, #-8]
  101940:	e3530000 	cmp	r3, #0
  101944:	0a000001 	beq	101950 <rt_mq_detach+0x78>
  101948:	e51b3008 	ldr	r3, [fp, #-8]
  10194c:	ea000006 	b	10196c <rt_mq_detach+0x94>
  101950:	e51b3010 	ldr	r3, [fp, #-16]
  101954:	e3a02000 	mov	r2, #0
  101958:	e5832000 	str	r2, [r3]
  10195c:	e51b3010 	ldr	r3, [fp, #-16]
  101960:	e3a02000 	mov	r2, #0
  101964:	e5832004 	str	r2, [r3, #4]
  101968:	e3a03000 	mov	r3, #0
}
  10196c:	e1a00003 	mov	r0, r3
  101970:	e24bd004 	sub	sp, fp, #4
  101974:	e8bd8800 	pop	{fp, pc}

00101978 <rt_mq_send>:

rt_err_t rt_mq_send(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  101978:	e92d4800 	push	{fp, lr}
  10197c:	e28db004 	add	fp, sp, #4
  101980:	e24dd010 	sub	sp, sp, #16
  101984:	e50b0008 	str	r0, [fp, #-8]
  101988:	e50b100c 	str	r1, [fp, #-12]
  10198c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101990:	e51b3008 	ldr	r3, [fp, #-8]
  101994:	e3530000 	cmp	r3, #0
  101998:	0a000003 	beq	1019ac <rt_mq_send+0x34>
  10199c:	e51b3008 	ldr	r3, [fp, #-8]
  1019a0:	e5933004 	ldr	r3, [r3, #4]
  1019a4:	e3530000 	cmp	r3, #0
  1019a8:	1a000001 	bne	1019b4 <rt_mq_send+0x3c>
  1019ac:	e3a03008 	mov	r3, #8
  1019b0:	ea00000c 	b	1019e8 <rt_mq_send+0x70>
  1019b4:	e51b3008 	ldr	r3, [fp, #-8]
  1019b8:	e5933000 	ldr	r3, [r3]
  1019bc:	e3530006 	cmp	r3, #6
  1019c0:	0a000001 	beq	1019cc <rt_mq_send+0x54>
  1019c4:	e3a03008 	mov	r3, #8
  1019c8:	ea000006 	b	1019e8 <rt_mq_send+0x70>
    return syscall(_NRSYS_mq_send, mq->data, buffer, size);
  1019cc:	e51b3008 	ldr	r3, [fp, #-8]
  1019d0:	e5931004 	ldr	r1, [r3, #4]
  1019d4:	e51b3010 	ldr	r3, [fp, #-16]
  1019d8:	e51b200c 	ldr	r2, [fp, #-12]
  1019dc:	e3a00025 	mov	r0, #37	; 0x25
  1019e0:	eb00ea9f 	bl	13c464 <syscall>
  1019e4:	e1a03000 	mov	r3, r0
}
  1019e8:	e1a00003 	mov	r0, r3
  1019ec:	e24bd004 	sub	sp, fp, #4
  1019f0:	e8bd8800 	pop	{fp, pc}

001019f4 <rt_mq_urgent>:

rt_err_t rt_mq_urgent(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  1019f4:	e92d4800 	push	{fp, lr}
  1019f8:	e28db004 	add	fp, sp, #4
  1019fc:	e24dd010 	sub	sp, sp, #16
  101a00:	e50b0008 	str	r0, [fp, #-8]
  101a04:	e50b100c 	str	r1, [fp, #-12]
  101a08:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a0c:	e51b3008 	ldr	r3, [fp, #-8]
  101a10:	e3530000 	cmp	r3, #0
  101a14:	0a000003 	beq	101a28 <rt_mq_urgent+0x34>
  101a18:	e51b3008 	ldr	r3, [fp, #-8]
  101a1c:	e5933004 	ldr	r3, [r3, #4]
  101a20:	e3530000 	cmp	r3, #0
  101a24:	1a000001 	bne	101a30 <rt_mq_urgent+0x3c>
  101a28:	e3a03008 	mov	r3, #8
  101a2c:	ea00000c 	b	101a64 <rt_mq_urgent+0x70>
  101a30:	e51b3008 	ldr	r3, [fp, #-8]
  101a34:	e5933000 	ldr	r3, [r3]
  101a38:	e3530006 	cmp	r3, #6
  101a3c:	0a000001 	beq	101a48 <rt_mq_urgent+0x54>
  101a40:	e3a03008 	mov	r3, #8
  101a44:	ea000006 	b	101a64 <rt_mq_urgent+0x70>
    return syscall(_NRSYS_mq_urgent, mq->data, buffer, size);
  101a48:	e51b3008 	ldr	r3, [fp, #-8]
  101a4c:	e5931004 	ldr	r1, [r3, #4]
  101a50:	e51b3010 	ldr	r3, [fp, #-16]
  101a54:	e51b200c 	ldr	r2, [fp, #-12]
  101a58:	e3a00026 	mov	r0, #38	; 0x26
  101a5c:	eb00ea80 	bl	13c464 <syscall>
  101a60:	e1a03000 	mov	r3, r0
}
  101a64:	e1a00003 	mov	r0, r3
  101a68:	e24bd004 	sub	sp, fp, #4
  101a6c:	e8bd8800 	pop	{fp, pc}

00101a70 <rt_mq_recv>:

rt_err_t rt_mq_recv(rt_mq_t    mq,
                    void      *buffer,
                    rt_size_t  size,
                    rt_int32_t timeout)
{
  101a70:	e92d4800 	push	{fp, lr}
  101a74:	e28db004 	add	fp, sp, #4
  101a78:	e24dd018 	sub	sp, sp, #24
  101a7c:	e50b0008 	str	r0, [fp, #-8]
  101a80:	e50b100c 	str	r1, [fp, #-12]
  101a84:	e50b2010 	str	r2, [fp, #-16]
  101a88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a8c:	e51b3008 	ldr	r3, [fp, #-8]
  101a90:	e3530000 	cmp	r3, #0
  101a94:	0a000003 	beq	101aa8 <rt_mq_recv+0x38>
  101a98:	e51b3008 	ldr	r3, [fp, #-8]
  101a9c:	e5933004 	ldr	r3, [r3, #4]
  101aa0:	e3530000 	cmp	r3, #0
  101aa4:	1a000001 	bne	101ab0 <rt_mq_recv+0x40>
  101aa8:	e3a03008 	mov	r3, #8
  101aac:	ea00000e 	b	101aec <rt_mq_recv+0x7c>
  101ab0:	e51b3008 	ldr	r3, [fp, #-8]
  101ab4:	e5933000 	ldr	r3, [r3]
  101ab8:	e3530006 	cmp	r3, #6
  101abc:	0a000001 	beq	101ac8 <rt_mq_recv+0x58>
  101ac0:	e3a03008 	mov	r3, #8
  101ac4:	ea000008 	b	101aec <rt_mq_recv+0x7c>
    return syscall(_NRSYS_mq_recv, mq->data, buffer, size, timeout);
  101ac8:	e51b3008 	ldr	r3, [fp, #-8]
  101acc:	e5931004 	ldr	r1, [r3, #4]
  101ad0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101ad4:	e58d3000 	str	r3, [sp]
  101ad8:	e51b3010 	ldr	r3, [fp, #-16]
  101adc:	e51b200c 	ldr	r2, [fp, #-12]
  101ae0:	e3a00027 	mov	r0, #39	; 0x27
  101ae4:	eb00ea5e 	bl	13c464 <syscall>
  101ae8:	e1a03000 	mov	r3, r0
}
  101aec:	e1a00003 	mov	r0, r3
  101af0:	e24bd004 	sub	sp, fp, #4
  101af4:	e8bd8800 	pop	{fp, pc}

00101af8 <rt_event_create>:

rt_event_t rt_event_create(const char *name, rt_uint8_t flag)
{
  101af8:	e92d4800 	push	{fp, lr}
  101afc:	e28db004 	add	fp, sp, #4
  101b00:	e24dd010 	sub	sp, sp, #16
  101b04:	e50b0010 	str	r0, [fp, #-16]
  101b08:	e1a03001 	mov	r3, r1
  101b0c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101b10:	e3a00008 	mov	r0, #8
  101b14:	eb00ee0f 	bl	13d358 <malloc>
  101b18:	e1a03000 	mov	r3, r0
  101b1c:	e50b3008 	str	r3, [fp, #-8]
  101b20:	e51b3008 	ldr	r3, [fp, #-8]
  101b24:	e3530000 	cmp	r3, #0
  101b28:	1a000001 	bne	101b34 <rt_event_create+0x3c>
  101b2c:	e3a03000 	mov	r3, #0
  101b30:	ea000015 	b	101b8c <rt_event_create+0x94>
  101b34:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  101b38:	e1a02003 	mov	r2, r3
  101b3c:	e51b1010 	ldr	r1, [fp, #-16]
  101b40:	e3a0001a 	mov	r0, #26
  101b44:	eb00ea46 	bl	13c464 <syscall>
  101b48:	e1a03000 	mov	r3, r0
  101b4c:	e1a02003 	mov	r2, r3
  101b50:	e51b3008 	ldr	r3, [fp, #-8]
  101b54:	e5832004 	str	r2, [r3, #4]
  101b58:	e51b3008 	ldr	r3, [fp, #-8]
  101b5c:	e5933004 	ldr	r3, [r3, #4]
  101b60:	e3530000 	cmp	r3, #0
  101b64:	0a000003 	beq	101b78 <rt_event_create+0x80>
  101b68:	e51b3008 	ldr	r3, [fp, #-8]
  101b6c:	e3a02004 	mov	r2, #4
  101b70:	e5832000 	str	r2, [r3]
  101b74:	ea000003 	b	101b88 <rt_event_create+0x90>
  101b78:	e51b0008 	ldr	r0, [fp, #-8]
  101b7c:	eb00efb1 	bl	13da48 <free>
  101b80:	e3a03000 	mov	r3, #0
  101b84:	e50b3008 	str	r3, [fp, #-8]
  101b88:	e51b3008 	ldr	r3, [fp, #-8]
}
  101b8c:	e1a00003 	mov	r0, r3
  101b90:	e24bd004 	sub	sp, fp, #4
  101b94:	e8bd8800 	pop	{fp, pc}

00101b98 <rt_event_init>:

rt_err_t rt_event_init(rt_event_t event, const char *name, rt_uint8_t flag)
{
  101b98:	e92d4800 	push	{fp, lr}
  101b9c:	e28db004 	add	fp, sp, #4
  101ba0:	e24dd010 	sub	sp, sp, #16
  101ba4:	e50b0008 	str	r0, [fp, #-8]
  101ba8:	e50b100c 	str	r1, [fp, #-12]
  101bac:	e1a03002 	mov	r3, r2
  101bb0:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(event, RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101bb4:	e51b3008 	ldr	r3, [fp, #-8]
  101bb8:	e3530000 	cmp	r3, #0
  101bbc:	1a000001 	bne	101bc8 <rt_event_init+0x30>
  101bc0:	e3a03008 	mov	r3, #8
  101bc4:	ea000012 	b	101c14 <rt_event_init+0x7c>
  101bc8:	e55b300d 	ldrb	r3, [fp, #-13]
  101bcc:	e1a02003 	mov	r2, r3
  101bd0:	e51b100c 	ldr	r1, [fp, #-12]
  101bd4:	e3a0001a 	mov	r0, #26
  101bd8:	eb00ea21 	bl	13c464 <syscall>
  101bdc:	e1a03000 	mov	r3, r0
  101be0:	e1a02003 	mov	r2, r3
  101be4:	e51b3008 	ldr	r3, [fp, #-8]
  101be8:	e5832004 	str	r2, [r3, #4]
  101bec:	e51b3008 	ldr	r3, [fp, #-8]
  101bf0:	e5933004 	ldr	r3, [r3, #4]
  101bf4:	e3530000 	cmp	r3, #0
  101bf8:	0a000004 	beq	101c10 <rt_event_init+0x78>
  101bfc:	e51b3008 	ldr	r3, [fp, #-8]
  101c00:	e3a02004 	mov	r2, #4
  101c04:	e5832000 	str	r2, [r3]
  101c08:	e3a03000 	mov	r3, #0
  101c0c:	ea000000 	b	101c14 <rt_event_init+0x7c>
  101c10:	e3a03001 	mov	r3, #1
}
  101c14:	e1a00003 	mov	r0, r3
  101c18:	e24bd004 	sub	sp, fp, #4
  101c1c:	e8bd8800 	pop	{fp, pc}

00101c20 <rt_event_delete>:

rt_err_t rt_event_delete(rt_event_t event)
{
  101c20:	e92d4800 	push	{fp, lr}
  101c24:	e28db004 	add	fp, sp, #4
  101c28:	e24dd010 	sub	sp, sp, #16
  101c2c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101c30:	e51b3010 	ldr	r3, [fp, #-16]
  101c34:	e3530000 	cmp	r3, #0
  101c38:	0a000003 	beq	101c4c <rt_event_delete+0x2c>
  101c3c:	e51b3010 	ldr	r3, [fp, #-16]
  101c40:	e5933004 	ldr	r3, [r3, #4]
  101c44:	e3530000 	cmp	r3, #0
  101c48:	1a000001 	bne	101c54 <rt_event_delete+0x34>
  101c4c:	e3a03008 	mov	r3, #8
  101c50:	ea000013 	b	101ca4 <rt_event_delete+0x84>
  101c54:	e51b3010 	ldr	r3, [fp, #-16]
  101c58:	e5933000 	ldr	r3, [r3]
  101c5c:	e3530004 	cmp	r3, #4
  101c60:	0a000001 	beq	101c6c <rt_event_delete+0x4c>
  101c64:	e3a03008 	mov	r3, #8
  101c68:	ea00000d 	b	101ca4 <rt_event_delete+0x84>
  101c6c:	e51b3010 	ldr	r3, [fp, #-16]
  101c70:	e5933004 	ldr	r3, [r3, #4]
  101c74:	e1a01003 	mov	r1, r3
  101c78:	e3a0001b 	mov	r0, #27
  101c7c:	eb00e9f8 	bl	13c464 <syscall>
  101c80:	e50b0008 	str	r0, [fp, #-8]
  101c84:	e51b3008 	ldr	r3, [fp, #-8]
  101c88:	e3530000 	cmp	r3, #0
  101c8c:	0a000001 	beq	101c98 <rt_event_delete+0x78>
  101c90:	e51b3008 	ldr	r3, [fp, #-8]
  101c94:	ea000002 	b	101ca4 <rt_event_delete+0x84>
  101c98:	e51b0010 	ldr	r0, [fp, #-16]
  101c9c:	eb00ef69 	bl	13da48 <free>
  101ca0:	e3a03000 	mov	r3, #0
}
  101ca4:	e1a00003 	mov	r0, r3
  101ca8:	e24bd004 	sub	sp, fp, #4
  101cac:	e8bd8800 	pop	{fp, pc}

00101cb0 <rt_event_detach>:

rt_err_t rt_event_detach(rt_event_t event)
{
  101cb0:	e92d4800 	push	{fp, lr}
  101cb4:	e28db004 	add	fp, sp, #4
  101cb8:	e24dd010 	sub	sp, sp, #16
  101cbc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101cc0:	e51b3010 	ldr	r3, [fp, #-16]
  101cc4:	e3530000 	cmp	r3, #0
  101cc8:	0a000003 	beq	101cdc <rt_event_detach+0x2c>
  101ccc:	e51b3010 	ldr	r3, [fp, #-16]
  101cd0:	e5933004 	ldr	r3, [r3, #4]
  101cd4:	e3530000 	cmp	r3, #0
  101cd8:	1a000001 	bne	101ce4 <rt_event_detach+0x34>
  101cdc:	e3a03008 	mov	r3, #8
  101ce0:	ea000017 	b	101d44 <rt_event_detach+0x94>
  101ce4:	e51b3010 	ldr	r3, [fp, #-16]
  101ce8:	e5933000 	ldr	r3, [r3]
  101cec:	e3530004 	cmp	r3, #4
  101cf0:	0a000001 	beq	101cfc <rt_event_detach+0x4c>
  101cf4:	e3a03008 	mov	r3, #8
  101cf8:	ea000011 	b	101d44 <rt_event_detach+0x94>
  101cfc:	e51b3010 	ldr	r3, [fp, #-16]
  101d00:	e5933004 	ldr	r3, [r3, #4]
  101d04:	e1a01003 	mov	r1, r3
  101d08:	e3a0001b 	mov	r0, #27
  101d0c:	eb00e9d4 	bl	13c464 <syscall>
  101d10:	e50b0008 	str	r0, [fp, #-8]
  101d14:	e51b3008 	ldr	r3, [fp, #-8]
  101d18:	e3530000 	cmp	r3, #0
  101d1c:	0a000001 	beq	101d28 <rt_event_detach+0x78>
  101d20:	e51b3008 	ldr	r3, [fp, #-8]
  101d24:	ea000006 	b	101d44 <rt_event_detach+0x94>
  101d28:	e51b3010 	ldr	r3, [fp, #-16]
  101d2c:	e3a02000 	mov	r2, #0
  101d30:	e5832000 	str	r2, [r3]
  101d34:	e51b3010 	ldr	r3, [fp, #-16]
  101d38:	e3a02000 	mov	r2, #0
  101d3c:	e5832004 	str	r2, [r3, #4]
  101d40:	e3a03000 	mov	r3, #0
}
  101d44:	e1a00003 	mov	r0, r3
  101d48:	e24bd004 	sub	sp, fp, #4
  101d4c:	e8bd8800 	pop	{fp, pc}

00101d50 <rt_event_send>:

rt_err_t rt_event_send(rt_event_t event, rt_uint32_t set)
{
  101d50:	e92d4800 	push	{fp, lr}
  101d54:	e28db004 	add	fp, sp, #4
  101d58:	e24dd008 	sub	sp, sp, #8
  101d5c:	e50b0008 	str	r0, [fp, #-8]
  101d60:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101d64:	e51b3008 	ldr	r3, [fp, #-8]
  101d68:	e3530000 	cmp	r3, #0
  101d6c:	0a000003 	beq	101d80 <rt_event_send+0x30>
  101d70:	e51b3008 	ldr	r3, [fp, #-8]
  101d74:	e5933004 	ldr	r3, [r3, #4]
  101d78:	e3530000 	cmp	r3, #0
  101d7c:	1a000001 	bne	101d88 <rt_event_send+0x38>
  101d80:	e3a03008 	mov	r3, #8
  101d84:	ea00000c 	b	101dbc <rt_event_send+0x6c>
  101d88:	e51b3008 	ldr	r3, [fp, #-8]
  101d8c:	e5933000 	ldr	r3, [r3]
  101d90:	e3530004 	cmp	r3, #4
  101d94:	0a000001 	beq	101da0 <rt_event_send+0x50>
  101d98:	e3a03008 	mov	r3, #8
  101d9c:	ea000006 	b	101dbc <rt_event_send+0x6c>
    return syscall(_NRSYS_event_send, event->data, set);
  101da0:	e51b3008 	ldr	r3, [fp, #-8]
  101da4:	e5933004 	ldr	r3, [r3, #4]
  101da8:	e51b200c 	ldr	r2, [fp, #-12]
  101dac:	e1a01003 	mov	r1, r3
  101db0:	e3a0001c 	mov	r0, #28
  101db4:	eb00e9aa 	bl	13c464 <syscall>
  101db8:	e1a03000 	mov	r3, r0
}
  101dbc:	e1a00003 	mov	r0, r3
  101dc0:	e24bd004 	sub	sp, fp, #4
  101dc4:	e8bd8800 	pop	{fp, pc}

00101dc8 <rt_event_recv>:
rt_err_t rt_event_recv(rt_event_t   event,
                       rt_uint32_t  set,
                       rt_uint8_t   opt,
                       rt_int32_t   timeout,
                       rt_uint32_t *recved)
{
  101dc8:	e92d4800 	push	{fp, lr}
  101dcc:	e28db004 	add	fp, sp, #4
  101dd0:	e24dd018 	sub	sp, sp, #24
  101dd4:	e50b0008 	str	r0, [fp, #-8]
  101dd8:	e50b100c 	str	r1, [fp, #-12]
  101ddc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  101de0:	e1a03002 	mov	r3, r2
  101de4:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101de8:	e51b3008 	ldr	r3, [fp, #-8]
  101dec:	e3530000 	cmp	r3, #0
  101df0:	0a000003 	beq	101e04 <rt_event_recv+0x3c>
  101df4:	e51b3008 	ldr	r3, [fp, #-8]
  101df8:	e5933004 	ldr	r3, [r3, #4]
  101dfc:	e3530000 	cmp	r3, #0
  101e00:	1a000001 	bne	101e0c <rt_event_recv+0x44>
  101e04:	e3a03008 	mov	r3, #8
  101e08:	ea000011 	b	101e54 <rt_event_recv+0x8c>
  101e0c:	e51b3008 	ldr	r3, [fp, #-8]
  101e10:	e5933000 	ldr	r3, [r3]
  101e14:	e3530004 	cmp	r3, #4
  101e18:	0a000001 	beq	101e24 <rt_event_recv+0x5c>
  101e1c:	e3a03008 	mov	r3, #8
  101e20:	ea00000b 	b	101e54 <rt_event_recv+0x8c>
    return syscall(_NRSYS_event_recv, event->data, set, opt, timeout, recved);
  101e24:	e51b3008 	ldr	r3, [fp, #-8]
  101e28:	e5931004 	ldr	r1, [r3, #4]
  101e2c:	e55b200d 	ldrb	r2, [fp, #-13]
  101e30:	e59b3004 	ldr	r3, [fp, #4]
  101e34:	e58d3004 	str	r3, [sp, #4]
  101e38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101e3c:	e58d3000 	str	r3, [sp]
  101e40:	e1a03002 	mov	r3, r2
  101e44:	e51b200c 	ldr	r2, [fp, #-12]
  101e48:	e3a0001d 	mov	r0, #29
  101e4c:	eb00e984 	bl	13c464 <syscall>
  101e50:	e1a03000 	mov	r3, r0
}
  101e54:	e1a00003 	mov	r0, r3
  101e58:	e24bd004 	sub	sp, fp, #4
  101e5c:	e8bd8800 	pop	{fp, pc}

00101e60 <rt_tick_get>:

rt_tick_t rt_tick_get(void)
{
  101e60:	e92d4800 	push	{fp, lr}
  101e64:	e28db004 	add	fp, sp, #4
    return (rt_tick_t)syscall(_NRSYS_rt_tick_get);
  101e68:	e3a00061 	mov	r0, #97	; 0x61
  101e6c:	eb00e97c 	bl	13c464 <syscall>
  101e70:	e1a03000 	mov	r3, r0
}
  101e74:	e1a00003 	mov	r0, r3
  101e78:	e8bd8800 	pop	{fp, pc}

00101e7c <rt_thread_mdelay>:

rt_err_t rt_thread_mdelay(rt_int32_t ms)
{
  101e7c:	e92d4800 	push	{fp, lr}
  101e80:	e28db004 	add	fp, sp, #4
  101e84:	e24dd008 	sub	sp, sp, #8
  101e88:	e50b0008 	str	r0, [fp, #-8]
    return (rt_err_t)syscall(_NRSYS_rt_thread_mdelay, ms);
  101e8c:	e51b1008 	ldr	r1, [fp, #-8]
  101e90:	e3a00066 	mov	r0, #102	; 0x66
  101e94:	eb00e972 	bl	13c464 <syscall>
  101e98:	e1a03000 	mov	r3, r0
}
  101e9c:	e1a00003 	mov	r0, r3
  101ea0:	e24bd004 	sub	sp, fp, #4
  101ea4:	e8bd8800 	pop	{fp, pc}

00101ea8 <lwp_shmget>:

int lwp_shmget(size_t key, size_t size, int create)
{
  101ea8:	e92d4800 	push	{fp, lr}
  101eac:	e28db004 	add	fp, sp, #4
  101eb0:	e24dd010 	sub	sp, sp, #16
  101eb4:	e50b0008 	str	r0, [fp, #-8]
  101eb8:	e50b100c 	str	r1, [fp, #-12]
  101ebc:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_shmget, key, size, create);
  101ec0:	e51b3010 	ldr	r3, [fp, #-16]
  101ec4:	e51b200c 	ldr	r2, [fp, #-12]
  101ec8:	e51b1008 	ldr	r1, [fp, #-8]
  101ecc:	e3a00037 	mov	r0, #55	; 0x37
  101ed0:	eb00e963 	bl	13c464 <syscall>
  101ed4:	e1a03000 	mov	r3, r0
}
  101ed8:	e1a00003 	mov	r0, r3
  101edc:	e24bd004 	sub	sp, fp, #4
  101ee0:	e8bd8800 	pop	{fp, pc}

00101ee4 <lwp_shmrm>:

int lwp_shmrm(int id)
{
  101ee4:	e92d4800 	push	{fp, lr}
  101ee8:	e28db004 	add	fp, sp, #4
  101eec:	e24dd008 	sub	sp, sp, #8
  101ef0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmrm, id);
  101ef4:	e51b1008 	ldr	r1, [fp, #-8]
  101ef8:	e3a00038 	mov	r0, #56	; 0x38
  101efc:	eb00e958 	bl	13c464 <syscall>
  101f00:	e1a03000 	mov	r3, r0
}
  101f04:	e1a00003 	mov	r0, r3
  101f08:	e24bd004 	sub	sp, fp, #4
  101f0c:	e8bd8800 	pop	{fp, pc}

00101f10 <lwp_shmat>:

void* lwp_shmat(int id, void* shm_vaddr)
{
  101f10:	e92d4800 	push	{fp, lr}
  101f14:	e28db004 	add	fp, sp, #4
  101f18:	e24dd008 	sub	sp, sp, #8
  101f1c:	e50b0008 	str	r0, [fp, #-8]
  101f20:	e50b100c 	str	r1, [fp, #-12]
    return (void*)syscall(_NRSYS_shmat, id, shm_vaddr);
  101f24:	e51b200c 	ldr	r2, [fp, #-12]
  101f28:	e51b1008 	ldr	r1, [fp, #-8]
  101f2c:	e3a00039 	mov	r0, #57	; 0x39
  101f30:	eb00e94b 	bl	13c464 <syscall>
  101f34:	e1a03000 	mov	r3, r0
}
  101f38:	e1a00003 	mov	r0, r3
  101f3c:	e24bd004 	sub	sp, fp, #4
  101f40:	e8bd8800 	pop	{fp, pc}

00101f44 <lwp_shmdt>:

int lwp_shmdt(void* shm_vaddr)
{
  101f44:	e92d4800 	push	{fp, lr}
  101f48:	e28db004 	add	fp, sp, #4
  101f4c:	e24dd008 	sub	sp, sp, #8
  101f50:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmdt, shm_vaddr);
  101f54:	e51b1008 	ldr	r1, [fp, #-8]
  101f58:	e3a0003a 	mov	r0, #58	; 0x3a
  101f5c:	eb00e940 	bl	13c464 <syscall>
  101f60:	e1a03000 	mov	r3, r0
}
  101f64:	e1a00003 	mov	r0, r3
  101f68:	e24bd004 	sub	sp, fp, #4
  101f6c:	e8bd8800 	pop	{fp, pc}

00101f70 <exec>:

int exec(char *filename, int argc, char **argv, char **envp)
{
  101f70:	e92d4800 	push	{fp, lr}
  101f74:	e28db004 	add	fp, sp, #4
  101f78:	e24dd018 	sub	sp, sp, #24
  101f7c:	e50b0008 	str	r0, [fp, #-8]
  101f80:	e50b100c 	str	r1, [fp, #-12]
  101f84:	e50b2010 	str	r2, [fp, #-16]
  101f88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (int)syscall(_NRSYS_exec, filename, argc, argv, envp);
  101f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101f90:	e58d3000 	str	r3, [sp]
  101f94:	e51b3010 	ldr	r3, [fp, #-16]
  101f98:	e51b200c 	ldr	r2, [fp, #-12]
  101f9c:	e51b1008 	ldr	r1, [fp, #-8]
  101fa0:	e3a0000d 	mov	r0, #13
  101fa4:	eb00e92e 	bl	13c464 <syscall>
  101fa8:	e1a03000 	mov	r3, r0
}
  101fac:	e1a00003 	mov	r0, r3
  101fb0:	e24bd004 	sub	sp, fp, #4
  101fb4:	e8bd8800 	pop	{fp, pc}

00101fb8 <lwp_kill>:

int lwp_kill(pid_t pid, int sig)
{
  101fb8:	e92d4800 	push	{fp, lr}
  101fbc:	e28db004 	add	fp, sp, #4
  101fc0:	e24dd008 	sub	sp, sp, #8
  101fc4:	e50b0008 	str	r0, [fp, #-8]
  101fc8:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_kill, pid, sig);
  101fcc:	e51b200c 	ldr	r2, [fp, #-12]
  101fd0:	e51b1008 	ldr	r1, [fp, #-8]
  101fd4:	e3a0000e 	mov	r0, #14
  101fd8:	eb00e921 	bl	13c464 <syscall>
  101fdc:	e1a03000 	mov	r3, r0
}
  101fe0:	e1a00003 	mov	r0, r3
  101fe4:	e24bd004 	sub	sp, fp, #4
  101fe8:	e8bd8800 	pop	{fp, pc}

00101fec <lwp_tkill>:

int lwp_tkill(int tid, int sig)
{
  101fec:	e92d4800 	push	{fp, lr}
  101ff0:	e28db004 	add	fp, sp, #4
  101ff4:	e24dd008 	sub	sp, sp, #8
  101ff8:	e50b0008 	str	r0, [fp, #-8]
  101ffc:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_tkill, tid, sig);
  102000:	e51b200c 	ldr	r2, [fp, #-12]
  102004:	e51b1008 	ldr	r1, [fp, #-8]
  102008:	e3a00069 	mov	r0, #105	; 0x69
  10200c:	eb00e914 	bl	13c464 <syscall>
  102010:	e1a03000 	mov	r3, r0
}
  102014:	e1a00003 	mov	r0, r3
  102018:	e24bd004 	sub	sp, fp, #4
  10201c:	e8bd8800 	pop	{fp, pc}

00102020 <waitpid>:

pid_t waitpid(pid_t pid, int *status, int options)
{
  102020:	e92d4800 	push	{fp, lr}
  102024:	e28db004 	add	fp, sp, #4
  102028:	e24dd010 	sub	sp, sp, #16
  10202c:	e50b0008 	str	r0, [fp, #-8]
  102030:	e50b100c 	str	r1, [fp, #-12]
  102034:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_waitpid, pid, status, options);
  102038:	e51b3010 	ldr	r3, [fp, #-16]
  10203c:	e51b200c 	ldr	r2, [fp, #-12]
  102040:	e51b1008 	ldr	r1, [fp, #-8]
  102044:	e3a0006e 	mov	r0, #110	; 0x6e
  102048:	eb00e905 	bl	13c464 <syscall>
  10204c:	e1a03000 	mov	r3, r0
}
  102050:	e1a00003 	mov	r0, r3
  102054:	e24bd004 	sub	sp, fp, #4
  102058:	e8bd8800 	pop	{fp, pc}

0010205c <rt_get_errno>:

rt_err_t rt_get_errno(void)
{
  10205c:	e92d4800 	push	{fp, lr}
  102060:	e28db004 	add	fp, sp, #4
    return (rt_err_t)syscall(_NRSYS_rt_get_errno);
  102064:	e3a0007a 	mov	r0, #122	; 0x7a
  102068:	eb00e8fd 	bl	13c464 <syscall>
  10206c:	e1a03000 	mov	r3, r0
}
  102070:	e1a00003 	mov	r0, r3
  102074:	e8bd8800 	pop	{fp, pc}

00102078 <rt_thread_find>:
#include <pthread.h>

void __pthread_init_run(void (*enter)(void *parameter), void *parameter);

rt_thread_t rt_thread_find(char *name)
{
  102078:	e92d4800 	push	{fp, lr}
  10207c:	e28db004 	add	fp, sp, #4
  102080:	e24dd008 	sub	sp, sp, #8
  102084:	e50b0008 	str	r0, [fp, #-8]
    return (rt_thread_t)syscall(_NRSYS_rt_thread_find, name);
  102088:	e51b1008 	ldr	r1, [fp, #-8]
  10208c:	e3a00044 	mov	r0, #68	; 0x44
  102090:	eb00e8f3 	bl	13c464 <syscall>
  102094:	e1a03000 	mov	r3, r0
}
  102098:	e1a00003 	mov	r0, r3
  10209c:	e24bd004 	sub	sp, fp, #4
  1020a0:	e8bd8800 	pop	{fp, pc}

001020a4 <rt_thread_user_entry>:
    void (*entry)(void *parameter);
    void *parameter;
};

static void rt_thread_user_entry(void *arg)
{
  1020a4:	e92d4800 	push	{fp, lr}
  1020a8:	e28db004 	add	fp, sp, #4
  1020ac:	e24dd018 	sub	sp, sp, #24
  1020b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct rt_thread_startup_ucontext *ucontext;
    void (*entry)(void *parameter);
    void *parameter;

    ucontext = (struct rt_thread_startup_ucontext *)arg;
  1020b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1020b8:	e50b3008 	str	r3, [fp, #-8]
    entry = ucontext->entry;
  1020bc:	e51b3008 	ldr	r3, [fp, #-8]
  1020c0:	e5933000 	ldr	r3, [r3]
  1020c4:	e50b300c 	str	r3, [fp, #-12]
    parameter = ucontext->parameter;
  1020c8:	e51b3008 	ldr	r3, [fp, #-8]
  1020cc:	e5933004 	ldr	r3, [r3, #4]
  1020d0:	e50b3010 	str	r3, [fp, #-16]
    rt_free(ucontext);
  1020d4:	e51b0008 	ldr	r0, [fp, #-8]
  1020d8:	eb0003b7 	bl	102fbc <rt_free>

    __pthread_init_run(entry, parameter);
  1020dc:	e51b1010 	ldr	r1, [fp, #-16]
  1020e0:	e51b000c 	ldr	r0, [fp, #-12]
  1020e4:	eb0102ba 	bl	142bd4 <__pthread_init_run>
}
  1020e8:	e320f000 	nop	{0}
  1020ec:	e24bd004 	sub	sp, fp, #4
  1020f0:	e8bd8800 	pop	{fp, pc}

001020f4 <rt_thread_create>:
        void (*entry)(void *parameter),
        void       *parameter,
        rt_uint32_t stack_size,
        rt_uint8_t  priority,
        rt_uint32_t tick)
{
  1020f4:	e92d4800 	push	{fp, lr}
  1020f8:	e28db004 	add	fp, sp, #4
  1020fc:	e24dd030 	sub	sp, sp, #48	; 0x30
  102100:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  102104:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  102108:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10210c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    rt_thread_t thread;
    void * arg[] = {(void *)name, (void*)entry, (void*)parameter, (void*)(size_t)stack_size, (void*)(size_t)priority, (void*)(size_t)tick};
  102110:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  102114:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  102118:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10211c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  102120:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  102124:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  102128:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10212c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  102130:	e5db3004 	ldrb	r3, [fp, #4]
  102134:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  102138:	e59b3008 	ldr	r3, [fp, #8]
  10213c:	e50b3010 	str	r3, [fp, #-16]
    struct rt_thread_startup_ucontext *ucontext;

    ucontext = rt_malloc(sizeof *ucontext);
  102140:	e3a00008 	mov	r0, #8
  102144:	eb000392 	bl	102f94 <rt_malloc>
  102148:	e50b0008 	str	r0, [fp, #-8]
    if (!ucontext)
  10214c:	e51b3008 	ldr	r3, [fp, #-8]
  102150:	e3530000 	cmp	r3, #0
  102154:	1a000001 	bne	102160 <rt_thread_create+0x6c>
    {
        return RT_NULL;
  102158:	e3a03000 	mov	r3, #0
  10215c:	ea000016 	b	1021bc <rt_thread_create+0xc8>
    }
    ucontext->entry = entry;
  102160:	e51b3008 	ldr	r3, [fp, #-8]
  102164:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  102168:	e5832000 	str	r2, [r3]
    ucontext->parameter = parameter;
  10216c:	e51b3008 	ldr	r3, [fp, #-8]
  102170:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  102174:	e5832004 	str	r2, [r3, #4]
    arg[1] = rt_thread_user_entry;
  102178:	e30230a4 	movw	r3, #8356	; 0x20a4
  10217c:	e3403010 	movt	r3, #16
  102180:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    arg[2] = ucontext;
  102184:	e51b3008 	ldr	r3, [fp, #-8]
  102188:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    thread = (rt_thread_t)syscall(_NRSYS_thread_create, arg);
  10218c:	e24b3024 	sub	r3, fp, #36	; 0x24
  102190:	e1a01003 	mov	r1, r3
  102194:	e3a00028 	mov	r0, #40	; 0x28
  102198:	eb00e8b1 	bl	13c464 <syscall>
  10219c:	e1a03000 	mov	r3, r0
  1021a0:	e50b300c 	str	r3, [fp, #-12]
    if (!thread)
  1021a4:	e51b300c 	ldr	r3, [fp, #-12]
  1021a8:	e3530000 	cmp	r3, #0
  1021ac:	1a000001 	bne	1021b8 <rt_thread_create+0xc4>
    {
        rt_free(ucontext);
  1021b0:	e51b0008 	ldr	r0, [fp, #-8]
  1021b4:	eb000380 	bl	102fbc <rt_free>
    }
    return thread;
  1021b8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1021bc:	e1a00003 	mov	r0, r3
  1021c0:	e24bd004 	sub	sp, fp, #4
  1021c4:	e8bd8800 	pop	{fp, pc}

001021c8 <rt_thread_startup>:

rt_err_t rt_thread_startup(rt_thread_t thread)
{
  1021c8:	e92d4800 	push	{fp, lr}
  1021cc:	e28db004 	add	fp, sp, #4
  1021d0:	e24dd008 	sub	sp, sp, #8
  1021d4:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_startup, thread);
  1021d8:	e51b1008 	ldr	r1, [fp, #-8]
  1021dc:	e3a0002a 	mov	r0, #42	; 0x2a
  1021e0:	eb00e89f 	bl	13c464 <syscall>
  1021e4:	e1a03000 	mov	r3, r0
}
  1021e8:	e1a00003 	mov	r0, r3
  1021ec:	e24bd004 	sub	sp, fp, #4
  1021f0:	e8bd8800 	pop	{fp, pc}

001021f4 <rt_thread_self>:

rt_thread_t rt_thread_self(void)
{
  1021f4:	e92d4800 	push	{fp, lr}
  1021f8:	e28db004 	add	fp, sp, #4
    return (rt_thread_t)syscall(_NRSYS_thread_self);
  1021fc:	e3a0002b 	mov	r0, #43	; 0x2b
  102200:	eb00e897 	bl	13c464 <syscall>
  102204:	e1a03000 	mov	r3, r0
}
  102208:	e1a00003 	mov	r0, r3
  10220c:	e8bd8800 	pop	{fp, pc}

00102210 <rt_thread_delete>:

rt_err_t rt_thread_delete(rt_thread_t thread)
{
  102210:	e92d4800 	push	{fp, lr}
  102214:	e28db004 	add	fp, sp, #4
  102218:	e24dd008 	sub	sp, sp, #8
  10221c:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_delete, thread);
  102220:	e51b1008 	ldr	r1, [fp, #-8]
  102224:	e3a00029 	mov	r0, #41	; 0x29
  102228:	eb00e88d 	bl	13c464 <syscall>
  10222c:	e1a03000 	mov	r3, r0
}
  102230:	e1a00003 	mov	r0, r3
  102234:	e24bd004 	sub	sp, fp, #4
  102238:	e8bd8800 	pop	{fp, pc}

0010223c <rt_enter_critical>:

void rt_enter_critical(void)
{
  10223c:	e92d4800 	push	{fp, lr}
  102240:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_enter_critical);
  102244:	e3a00032 	mov	r0, #50	; 0x32
  102248:	eb00e885 	bl	13c464 <syscall>
}
  10224c:	e320f000 	nop	{0}
  102250:	e8bd8800 	pop	{fp, pc}

00102254 <rt_exit_critical>:

void rt_exit_critical(void)
{
  102254:	e92d4800 	push	{fp, lr}
  102258:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_exit_critical);
  10225c:	e3a00033 	mov	r0, #51	; 0x33
  102260:	eb00e87f 	bl	13c464 <syscall>
}
  102264:	e320f000 	nop	{0}
  102268:	e8bd8800 	pop	{fp, pc}

0010226c <cacheflush>:

int cacheflush(void *addr, int size, int cache)
{
  10226c:	e92d4800 	push	{fp, lr}
  102270:	e28db004 	add	fp, sp, #4
  102274:	e24dd010 	sub	sp, sp, #16
  102278:	e50b0008 	str	r0, [fp, #-8]
  10227c:	e50b100c 	str	r1, [fp, #-12]
  102280:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_cacheflush, addr, size, cache);
  102284:	e51b3010 	ldr	r3, [fp, #-16]
  102288:	e51b200c 	ldr	r2, [fp, #-12]
  10228c:	e51b1008 	ldr	r1, [fp, #-8]
  102290:	e3a0006b 	mov	r0, #107	; 0x6b
  102294:	eb00e872 	bl	13c464 <syscall>
  102298:	e1a03000 	mov	r3, r0
}
  10229c:	e1a00003 	mov	r0, r3
  1022a0:	e24bd004 	sub	sp, fp, #4
  1022a4:	e8bd8800 	pop	{fp, pc}

001022a8 <rt_list_init>:
 * @brief initialize a list
 *
 * @param l list to be initialized
 */
rt_inline void rt_list_init(rt_list_t *l)
{
  1022a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022ac:	e28db000 	add	fp, sp, #0
  1022b0:	e24dd00c 	sub	sp, sp, #12
  1022b4:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  1022b8:	e51b3008 	ldr	r3, [fp, #-8]
  1022bc:	e51b2008 	ldr	r2, [fp, #-8]
  1022c0:	e5832004 	str	r2, [r3, #4]
  1022c4:	e51b3008 	ldr	r3, [fp, #-8]
  1022c8:	e5932004 	ldr	r2, [r3, #4]
  1022cc:	e51b3008 	ldr	r3, [fp, #-8]
  1022d0:	e5832000 	str	r2, [r3]
}
  1022d4:	e320f000 	nop	{0}
  1022d8:	e28bd000 	add	sp, fp, #0
  1022dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1022e0:	e12fff1e 	bx	lr

001022e4 <rt_list_insert_after>:
 *
 * @param l list to insert it
 * @param n new node to be inserted
 */
rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
{
  1022e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022e8:	e28db000 	add	fp, sp, #0
  1022ec:	e24dd00c 	sub	sp, sp, #12
  1022f0:	e50b0008 	str	r0, [fp, #-8]
  1022f4:	e50b100c 	str	r1, [fp, #-12]
    l->next->prev = n;
  1022f8:	e51b3008 	ldr	r3, [fp, #-8]
  1022fc:	e5933000 	ldr	r3, [r3]
  102300:	e51b200c 	ldr	r2, [fp, #-12]
  102304:	e5832004 	str	r2, [r3, #4]
    n->next = l->next;
  102308:	e51b3008 	ldr	r3, [fp, #-8]
  10230c:	e5932000 	ldr	r2, [r3]
  102310:	e51b300c 	ldr	r3, [fp, #-12]
  102314:	e5832000 	str	r2, [r3]

    l->next = n;
  102318:	e51b3008 	ldr	r3, [fp, #-8]
  10231c:	e51b200c 	ldr	r2, [fp, #-12]
  102320:	e5832000 	str	r2, [r3]
    n->prev = l;
  102324:	e51b300c 	ldr	r3, [fp, #-12]
  102328:	e51b2008 	ldr	r2, [fp, #-8]
  10232c:	e5832004 	str	r2, [r3, #4]
}
  102330:	e320f000 	nop	{0}
  102334:	e28bd000 	add	sp, fp, #0
  102338:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10233c:	e12fff1e 	bx	lr

00102340 <rt_list_remove>:
/**
 * @brief remove node from list.
 * @param n the node to remove from the list.
 */
rt_inline void rt_list_remove(rt_list_t *n)
{
  102340:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102344:	e28db000 	add	fp, sp, #0
  102348:	e24dd00c 	sub	sp, sp, #12
  10234c:	e50b0008 	str	r0, [fp, #-8]
    n->next->prev = n->prev;
  102350:	e51b3008 	ldr	r3, [fp, #-8]
  102354:	e5933000 	ldr	r3, [r3]
  102358:	e51b2008 	ldr	r2, [fp, #-8]
  10235c:	e5922004 	ldr	r2, [r2, #4]
  102360:	e5832004 	str	r2, [r3, #4]
    n->prev->next = n->next;
  102364:	e51b3008 	ldr	r3, [fp, #-8]
  102368:	e5933004 	ldr	r3, [r3, #4]
  10236c:	e51b2008 	ldr	r2, [fp, #-8]
  102370:	e5922000 	ldr	r2, [r2]
  102374:	e5832000 	str	r2, [r3]

    n->next = n->prev = n;
  102378:	e51b3008 	ldr	r3, [fp, #-8]
  10237c:	e51b2008 	ldr	r2, [fp, #-8]
  102380:	e5832004 	str	r2, [r3, #4]
  102384:	e51b3008 	ldr	r3, [fp, #-8]
  102388:	e5932004 	ldr	r2, [r3, #4]
  10238c:	e51b3008 	ldr	r3, [fp, #-8]
  102390:	e5832000 	str	r2, [r3]
}
  102394:	e320f000 	nop	{0}
  102398:	e28bd000 	add	sp, fp, #0
  10239c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023a0:	e12fff1e 	bx	lr

001023a4 <rt_list_isempty>:
/**
 * @brief tests whether a list is empty
 * @param l the list to test.
 */
rt_inline int rt_list_isempty(const rt_list_t *l)
{
  1023a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1023a8:	e28db000 	add	fp, sp, #0
  1023ac:	e24dd00c 	sub	sp, sp, #12
  1023b0:	e50b0008 	str	r0, [fp, #-8]
    return l->next == l;
  1023b4:	e51b3008 	ldr	r3, [fp, #-8]
  1023b8:	e5933000 	ldr	r3, [r3]
  1023bc:	e51b2008 	ldr	r2, [fp, #-8]
  1023c0:	e1520003 	cmp	r2, r3
  1023c4:	03a03001 	moveq	r3, #1
  1023c8:	13a03000 	movne	r3, #0
  1023cc:	e6ef3073 	uxtb	r3, r3
}
  1023d0:	e1a00003 	mov	r0, r3
  1023d4:	e28bd000 	add	sp, fp, #0
  1023d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023dc:	e12fff1e 	bx	lr

001023e0 <_rt_timer_init>:
static void _rt_timer_init(rt_timer_t timer,
                           void (*timeout)(void *parameter),
                           void      *parameter,
                           rt_tick_t  time,
                           rt_uint8_t flag)
{
  1023e0:	e92d4800 	push	{fp, lr}
  1023e4:	e28db004 	add	fp, sp, #4
  1023e8:	e24dd018 	sub	sp, sp, #24
  1023ec:	e50b0010 	str	r0, [fp, #-16]
  1023f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1023f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1023f8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int i;

    /* set flag */
    timer->parent.flag  = flag;
  1023fc:	e51b3010 	ldr	r3, [fp, #-16]
  102400:	e5db2004 	ldrb	r2, [fp, #4]
  102404:	e5c32009 	strb	r2, [r3, #9]

    /* set deactivated */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102408:	e51b3010 	ldr	r3, [fp, #-16]
  10240c:	e5d33009 	ldrb	r3, [r3, #9]
  102410:	e3c33001 	bic	r3, r3, #1
  102414:	e6ef2073 	uxtb	r2, r3
  102418:	e51b3010 	ldr	r3, [fp, #-16]
  10241c:	e5c32009 	strb	r2, [r3, #9]

    timer->timeout_func = timeout;
  102420:	e51b3010 	ldr	r3, [fp, #-16]
  102424:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  102428:	e583201c 	str	r2, [r3, #28]
    timer->parameter    = parameter;
  10242c:	e51b3010 	ldr	r3, [fp, #-16]
  102430:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102434:	e5832020 	str	r2, [r3, #32]

    timer->timeout_tick = 0;
  102438:	e51b3010 	ldr	r3, [fp, #-16]
  10243c:	e3a02000 	mov	r2, #0
  102440:	e5832028 	str	r2, [r3, #40]	; 0x28
    timer->init_tick    = time;
  102444:	e51b3010 	ldr	r3, [fp, #-16]
  102448:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10244c:	e5832024 	str	r2, [r3, #36]	; 0x24

    /* initialize timer list */
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102450:	e3a03000 	mov	r3, #0
  102454:	e50b3008 	str	r3, [fp, #-8]
  102458:	ea00000a 	b	102488 <_rt_timer_init+0xa8>
    {
        rt_list_init(&(timer->row[i]));
  10245c:	e51b3008 	ldr	r3, [fp, #-8]
  102460:	e2833002 	add	r3, r3, #2
  102464:	e1a03183 	lsl	r3, r3, #3
  102468:	e51b2010 	ldr	r2, [fp, #-16]
  10246c:	e0823003 	add	r3, r2, r3
  102470:	e2833004 	add	r3, r3, #4
  102474:	e1a00003 	mov	r0, r3
  102478:	ebffff8a 	bl	1022a8 <rt_list_init>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10247c:	e51b3008 	ldr	r3, [fp, #-8]
  102480:	e2833001 	add	r3, r3, #1
  102484:	e50b3008 	str	r3, [fp, #-8]
  102488:	e51b3008 	ldr	r3, [fp, #-8]
  10248c:	e3530000 	cmp	r3, #0
  102490:	dafffff1 	ble	10245c <_rt_timer_init+0x7c>
    }
}
  102494:	e320f000 	nop	{0}
  102498:	e24bd004 	sub	sp, fp, #4
  10249c:	e8bd8800 	pop	{fp, pc}

001024a0 <rt_timer_list_next_timeout>:

/* the fist timer always in the last row */
static rt_tick_t rt_timer_list_next_timeout(rt_list_t timer_list[])
{
  1024a0:	e92d4800 	push	{fp, lr}
  1024a4:	e28db004 	add	fp, sp, #4
  1024a8:	e24dd010 	sub	sp, sp, #16
  1024ac:	e50b0010 	str	r0, [fp, #-16]
    struct rt_timer *timer;

    if (rt_list_isempty(&timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
  1024b0:	e51b0010 	ldr	r0, [fp, #-16]
  1024b4:	ebffffba 	bl	1023a4 <rt_list_isempty>
  1024b8:	e1a03000 	mov	r3, r0
  1024bc:	e3530000 	cmp	r3, #0
  1024c0:	0a000001 	beq	1024cc <rt_timer_list_next_timeout+0x2c>
        return RT_TICK_MAX;
  1024c4:	e3e03000 	mvn	r3, #0
  1024c8:	ea000005 	b	1024e4 <rt_timer_list_next_timeout+0x44>

    timer = rt_list_entry(timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
  1024cc:	e51b3010 	ldr	r3, [fp, #-16]
  1024d0:	e5933000 	ldr	r3, [r3]
  1024d4:	e2433014 	sub	r3, r3, #20
  1024d8:	e50b3008 	str	r3, [fp, #-8]
                          struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);

    return timer->timeout_tick;
  1024dc:	e51b3008 	ldr	r3, [fp, #-8]
  1024e0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
}
  1024e4:	e1a00003 	mov	r0, r3
  1024e8:	e24bd004 	sub	sp, fp, #4
  1024ec:	e8bd8800 	pop	{fp, pc}

001024f0 <_rt_timer_remove>:

rt_inline void _rt_timer_remove(rt_timer_t timer)
{
  1024f0:	e92d4800 	push	{fp, lr}
  1024f4:	e28db004 	add	fp, sp, #4
  1024f8:	e24dd010 	sub	sp, sp, #16
  1024fc:	e50b0010 	str	r0, [fp, #-16]
    int i;

    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102500:	e3a03000 	mov	r3, #0
  102504:	e50b3008 	str	r3, [fp, #-8]
  102508:	ea00000a 	b	102538 <_rt_timer_remove+0x48>
    {
        rt_list_remove(&timer->row[i]);
  10250c:	e51b3008 	ldr	r3, [fp, #-8]
  102510:	e2833002 	add	r3, r3, #2
  102514:	e1a03183 	lsl	r3, r3, #3
  102518:	e51b2010 	ldr	r2, [fp, #-16]
  10251c:	e0823003 	add	r3, r2, r3
  102520:	e2833004 	add	r3, r3, #4
  102524:	e1a00003 	mov	r0, r3
  102528:	ebffff84 	bl	102340 <rt_list_remove>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10252c:	e51b3008 	ldr	r3, [fp, #-8]
  102530:	e2833001 	add	r3, r3, #1
  102534:	e50b3008 	str	r3, [fp, #-8]
  102538:	e51b3008 	ldr	r3, [fp, #-8]
  10253c:	e3530000 	cmp	r3, #0
  102540:	dafffff1 	ble	10250c <_rt_timer_remove+0x1c>
    }
}
  102544:	e320f000 	nop	{0}
  102548:	e24bd004 	sub	sp, fp, #4
  10254c:	e8bd8800 	pop	{fp, pc}

00102550 <rt_timer_init>:
                   const char *name,
                   void (*timeout)(void *parameter),
                   void       *parameter,
                   rt_tick_t   time,
                   rt_uint8_t  flag)
{
  102550:	e92d4800 	push	{fp, lr}
  102554:	e28db004 	add	fp, sp, #4
  102558:	e24dd018 	sub	sp, sp, #24
  10255c:	e50b0008 	str	r0, [fp, #-8]
  102560:	e50b100c 	str	r1, [fp, #-12]
  102564:	e50b2010 	str	r2, [fp, #-16]
  102568:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    _rt_timer_init(timer, timeout, parameter, time, flag);
  10256c:	e5db3008 	ldrb	r3, [fp, #8]
  102570:	e58d3000 	str	r3, [sp]
  102574:	e59b3004 	ldr	r3, [fp, #4]
  102578:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10257c:	e51b1010 	ldr	r1, [fp, #-16]
  102580:	e51b0008 	ldr	r0, [fp, #-8]
  102584:	ebffff95 	bl	1023e0 <_rt_timer_init>
}
  102588:	e320f000 	nop	{0}
  10258c:	e24bd004 	sub	sp, fp, #4
  102590:	e8bd8800 	pop	{fp, pc}

00102594 <rt_timer_detach>:
 * @param timer the static timer object
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_detach(rt_timer_t timer)
{
  102594:	e92d4800 	push	{fp, lr}
  102598:	e28db004 	add	fp, sp, #4
  10259c:	e24dd008 	sub	sp, sp, #8
  1025a0:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1025a4:	e320f000 	nop	{0}
  1025a8:	e30d3410 	movw	r3, #54288	; 0xd410
  1025ac:	e3403014 	movt	r3, #20
  1025b0:	e5933000 	ldr	r3, [r3]
  1025b4:	e3e01000 	mvn	r1, #0
  1025b8:	e1a00003 	mov	r0, r3
  1025bc:	ebfffa4f 	bl	100f00 <rt_mutex_take>
  1025c0:	e1a03000 	mov	r3, r0
  1025c4:	e3530000 	cmp	r3, #0
  1025c8:	1afffff6 	bne	1025a8 <rt_timer_detach+0x14>

    _rt_timer_remove(timer);
  1025cc:	e51b0008 	ldr	r0, [fp, #-8]
  1025d0:	ebffffc6 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  1025d4:	e30d3410 	movw	r3, #54288	; 0xd410
  1025d8:	e3403014 	movt	r3, #20
  1025dc:	e5933000 	ldr	r3, [r3]
  1025e0:	e1a00003 	mov	r0, r3
  1025e4:	ebfffa63 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1025e8:	e3a03000 	mov	r3, #0
}
  1025ec:	e1a00003 	mov	r0, r3
  1025f0:	e24bd004 	sub	sp, fp, #4
  1025f4:	e8bd8800 	pop	{fp, pc}

001025f8 <rt_timer_create>:
rt_timer_t rt_timer_create(const char *name,
                           void (*timeout)(void *parameter),
                           void       *parameter,
                           rt_tick_t   time,
                           rt_uint8_t  flag)
{
  1025f8:	e92d4800 	push	{fp, lr}
  1025fc:	e28db004 	add	fp, sp, #4
  102600:	e24dd020 	sub	sp, sp, #32
  102604:	e50b0010 	str	r0, [fp, #-16]
  102608:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10260c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  102610:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct rt_timer *timer;

    /* allocate a timer object */
    timer = (struct rt_timer *)malloc(sizeof(struct rt_timer));
  102614:	e3a0002c 	mov	r0, #44	; 0x2c
  102618:	eb00eb4e 	bl	13d358 <malloc>
  10261c:	e1a03000 	mov	r3, r0
  102620:	e50b3008 	str	r3, [fp, #-8]
    if (timer == RT_NULL)
  102624:	e51b3008 	ldr	r3, [fp, #-8]
  102628:	e3530000 	cmp	r3, #0
  10262c:	1a000001 	bne	102638 <rt_timer_create+0x40>
    {
        return RT_NULL;
  102630:	e3a03000 	mov	r3, #0
  102634:	ea000007 	b	102658 <rt_timer_create+0x60>
    }

    _rt_timer_init(timer, timeout, parameter, time, flag);
  102638:	e5db3004 	ldrb	r3, [fp, #4]
  10263c:	e58d3000 	str	r3, [sp]
  102640:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  102644:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102648:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10264c:	e51b0008 	ldr	r0, [fp, #-8]
  102650:	ebffff62 	bl	1023e0 <_rt_timer_init>

    return timer;
  102654:	e51b3008 	ldr	r3, [fp, #-8]
}
  102658:	e1a00003 	mov	r0, r3
  10265c:	e24bd004 	sub	sp, fp, #4
  102660:	e8bd8800 	pop	{fp, pc}

00102664 <rt_timer_delete>:
 * @param timer the timer to be deleted
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_delete(rt_timer_t timer)
{
  102664:	e92d4800 	push	{fp, lr}
  102668:	e28db004 	add	fp, sp, #4
  10266c:	e24dd008 	sub	sp, sp, #8
  102670:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102674:	e320f000 	nop	{0}
  102678:	e30d3410 	movw	r3, #54288	; 0xd410
  10267c:	e3403014 	movt	r3, #20
  102680:	e5933000 	ldr	r3, [r3]
  102684:	e3e01000 	mvn	r1, #0
  102688:	e1a00003 	mov	r0, r3
  10268c:	ebfffa1b 	bl	100f00 <rt_mutex_take>
  102690:	e1a03000 	mov	r3, r0
  102694:	e3530000 	cmp	r3, #0
  102698:	1afffff6 	bne	102678 <rt_timer_delete+0x14>

    _rt_timer_remove(timer);
  10269c:	e51b0008 	ldr	r0, [fp, #-8]
  1026a0:	ebffff92 	bl	1024f0 <_rt_timer_remove>

    /*free timer object */
    free(timer);
  1026a4:	e51b0008 	ldr	r0, [fp, #-8]
  1026a8:	eb00ece6 	bl	13da48 <free>

    /* release mutex */
    rt_mutex_release(mutex);
  1026ac:	e30d3410 	movw	r3, #54288	; 0xd410
  1026b0:	e3403014 	movt	r3, #20
  1026b4:	e5933000 	ldr	r3, [r3]
  1026b8:	e1a00003 	mov	r0, r3
  1026bc:	ebfffa2d 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1026c0:	e3a03000 	mov	r3, #0
}
  1026c4:	e1a00003 	mov	r0, r3
  1026c8:	e24bd004 	sub	sp, fp, #4
  1026cc:	e8bd8800 	pop	{fp, pc}

001026d0 <rt_timer_start>:
 * @param timer the timer to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_start(rt_timer_t timer)
{
  1026d0:	e92d4800 	push	{fp, lr}
  1026d4:	e28db004 	add	fp, sp, #4
  1026d8:	e24dd020 	sub	sp, sp, #32
  1026dc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    rt_list_t *row_head[RT_TIMER_SKIP_LIST_LEVEL];
    unsigned int tst_nr;
    static unsigned int random_nr;

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1026e0:	e320f000 	nop	{0}
  1026e4:	e30d3410 	movw	r3, #54288	; 0xd410
  1026e8:	e3403014 	movt	r3, #20
  1026ec:	e5933000 	ldr	r3, [r3]
  1026f0:	e3e01000 	mvn	r1, #0
  1026f4:	e1a00003 	mov	r0, r3
  1026f8:	ebfffa00 	bl	100f00 <rt_mutex_take>
  1026fc:	e1a03000 	mov	r3, r0
  102700:	e3530000 	cmp	r3, #0
  102704:	1afffff6 	bne	1026e4 <rt_timer_start+0x14>
    /* remove timer from list */
    _rt_timer_remove(timer);
  102708:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10270c:	ebffff77 	bl	1024f0 <_rt_timer_remove>
    /* change status of timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102710:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102714:	e5d33009 	ldrb	r3, [r3, #9]
  102718:	e3c33001 	bic	r3, r3, #1
  10271c:	e6ef2073 	uxtb	r2, r3
  102720:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102724:	e5c32009 	strb	r2, [r3, #9]
    /* release mutex */
    rt_mutex_release(mutex);
  102728:	e30d3410 	movw	r3, #54288	; 0xd410
  10272c:	e3403014 	movt	r3, #20
  102730:	e5933000 	ldr	r3, [r3]
  102734:	e1a00003 	mov	r0, r3
  102738:	ebfffa0e 	bl	100f78 <rt_mutex_release>

    /*
     * get timeout tick,
     * the max timeout tick shall not great than RT_TICK_MAX/2
     */
    timer->timeout_tick = rt_tick_get() + timer->init_tick;
  10273c:	ebfffdc7 	bl	101e60 <rt_tick_get>
  102740:	e1a02000 	mov	r2, r0
  102744:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102748:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10274c:	e0822003 	add	r2, r2, r3
  102750:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102754:	e5832028 	str	r2, [r3, #40]	; 0x28

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102758:	e320f000 	nop	{0}
  10275c:	e30d3410 	movw	r3, #54288	; 0xd410
  102760:	e3403014 	movt	r3, #20
  102764:	e5933000 	ldr	r3, [r3]
  102768:	e3e01000 	mvn	r1, #0
  10276c:	e1a00003 	mov	r0, r3
  102770:	ebfff9e2 	bl	100f00 <rt_mutex_take>
  102774:	e1a03000 	mov	r3, r0
  102778:	e3530000 	cmp	r3, #0
  10277c:	1afffff6 	bne	10275c <rt_timer_start+0x8c>

    /* insert timer to soft timer list */
    timer_list = rt_soft_timer_list;
  102780:	e30d3418 	movw	r3, #54296	; 0xd418
  102784:	e3403014 	movt	r3, #20
  102788:	e50b3010 	str	r3, [fp, #-16]

    row_head[0]  = &timer_list[0];
  10278c:	e51b3010 	ldr	r3, [fp, #-16]
  102790:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102794:	e3a03000 	mov	r3, #0
  102798:	e50b3008 	str	r3, [fp, #-8]
  10279c:	ea000047 	b	1028c0 <rt_timer_start+0x1f0>
    {
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
             row_head[row_lvl]  = row_head[row_lvl]->next)
        {
            struct rt_timer *t;
            rt_list_t *p = row_head[row_lvl]->next;
  1027a0:	e51b3008 	ldr	r3, [fp, #-8]
  1027a4:	e1a03103 	lsl	r3, r3, #2
  1027a8:	e24b2004 	sub	r2, fp, #4
  1027ac:	e0823003 	add	r3, r2, r3
  1027b0:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  1027b4:	e5933000 	ldr	r3, [r3]
  1027b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

            /* fix up the entry pointer */
            t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
  1027bc:	e51b3008 	ldr	r3, [fp, #-8]
  1027c0:	e1a03183 	lsl	r3, r3, #3
  1027c4:	e2833014 	add	r3, r3, #20
  1027c8:	e2633000 	rsb	r3, r3, #0
  1027cc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1027d0:	e0823003 	add	r3, r2, r3
  1027d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* If we have two timers that timeout at the same time, it's
             * preferred that the timer inserted early get called early.
             * So insert the new timer to the end the the some-timeout timer
             * list.
             */
            if ((t->timeout_tick - timer->timeout_tick) == 0)
  1027d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027dc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1027e8:	e1520003 	cmp	r2, r3
  1027ec:	0a000007 	beq	102810 <rt_timer_start+0x140>
            {
                continue;
            }
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
  1027f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027f4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027fc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102800:	e0423003 	sub	r3, r2, r3
  102804:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102808:	9a000019 	bls	102874 <rt_timer_start+0x1a4>
  10280c:	ea000000 	b	102814 <rt_timer_start+0x144>
                continue;
  102810:	e320f000 	nop	{0}
             row_head[row_lvl]  = row_head[row_lvl]->next)
  102814:	e51b3008 	ldr	r3, [fp, #-8]
  102818:	e1a03103 	lsl	r3, r3, #2
  10281c:	e24b2004 	sub	r2, fp, #4
  102820:	e0823003 	add	r3, r2, r3
  102824:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  102828:	e5932000 	ldr	r2, [r3]
  10282c:	e51b3008 	ldr	r3, [fp, #-8]
  102830:	e1a03103 	lsl	r3, r3, #2
  102834:	e24b1004 	sub	r1, fp, #4
  102838:	e0813003 	add	r3, r1, r3
  10283c:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
  102840:	e51b3008 	ldr	r3, [fp, #-8]
  102844:	e1a03103 	lsl	r3, r3, #2
  102848:	e24b2004 	sub	r2, fp, #4
  10284c:	e0823003 	add	r3, r2, r3
  102850:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102854:	e51b3008 	ldr	r3, [fp, #-8]
  102858:	e1a03183 	lsl	r3, r3, #3
  10285c:	e51b1010 	ldr	r1, [fp, #-16]
  102860:	e0813003 	add	r3, r1, r3
  102864:	e5933004 	ldr	r3, [r3, #4]
  102868:	e1520003 	cmp	r2, r3
  10286c:	1affffcb 	bne	1027a0 <rt_timer_start+0xd0>
  102870:	ea000000 	b	102878 <rt_timer_start+0x1a8>
            {
                break;
  102874:	e320f000 	nop	{0}
            }
        }
        if (row_lvl != RT_TIMER_SKIP_LIST_LEVEL - 1)
  102878:	e51b3008 	ldr	r3, [fp, #-8]
  10287c:	e3530000 	cmp	r3, #0
  102880:	0a00000b 	beq	1028b4 <rt_timer_start+0x1e4>
            row_head[row_lvl + 1] = row_head[row_lvl] + 1;
  102884:	e51b3008 	ldr	r3, [fp, #-8]
  102888:	e1a03103 	lsl	r3, r3, #2
  10288c:	e24b2004 	sub	r2, fp, #4
  102890:	e0823003 	add	r3, r2, r3
  102894:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102898:	e51b3008 	ldr	r3, [fp, #-8]
  10289c:	e2833001 	add	r3, r3, #1
  1028a0:	e2822008 	add	r2, r2, #8
  1028a4:	e1a03103 	lsl	r3, r3, #2
  1028a8:	e24b1004 	sub	r1, fp, #4
  1028ac:	e0813003 	add	r3, r1, r3
  1028b0:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  1028b4:	e51b3008 	ldr	r3, [fp, #-8]
  1028b8:	e2833001 	add	r3, r3, #1
  1028bc:	e50b3008 	str	r3, [fp, #-8]
  1028c0:	e51b3008 	ldr	r3, [fp, #-8]
  1028c4:	e3530000 	cmp	r3, #0
  1028c8:	0affffdc 	beq	102840 <rt_timer_start+0x170>

    /* Interestingly, this super simple timer insert counter works very very
     * well on distributing the list height uniformly. By means of "very very
     * well", I mean it beats the randomness of timer->timeout_tick very easily
     * (actually, the timeout_tick is not random and easy to be attacked). */
    random_nr++;
  1028cc:	e30d3420 	movw	r3, #54304	; 0xd420
  1028d0:	e3403014 	movt	r3, #20
  1028d4:	e5933000 	ldr	r3, [r3]
  1028d8:	e2832001 	add	r2, r3, #1
  1028dc:	e30d3420 	movw	r3, #54304	; 0xd420
  1028e0:	e3403014 	movt	r3, #20
  1028e4:	e5832000 	str	r2, [r3]
    tst_nr = random_nr;
  1028e8:	e30d3420 	movw	r3, #54304	; 0xd420
  1028ec:	e3403014 	movt	r3, #20
  1028f0:	e5933000 	ldr	r3, [r3]
  1028f4:	e50b300c 	str	r3, [fp, #-12]

    rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
  1028f8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1028fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102900:	e2833014 	add	r3, r3, #20
  102904:	e1a01003 	mov	r1, r3
  102908:	e1a00002 	mov	r0, r2
  10290c:	ebfffe74 	bl	1022e4 <rt_list_insert_after>
                         &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102910:	e3a03002 	mov	r3, #2
  102914:	e50b3008 	str	r3, [fp, #-8]
  102918:	ea000018 	b	102980 <rt_timer_start+0x2b0>
    {
        if (!(tst_nr & RT_TIMER_SKIP_LIST_MASK))
  10291c:	e51b300c 	ldr	r3, [fp, #-12]
  102920:	e2033003 	and	r3, r3, #3
  102924:	e3530000 	cmp	r3, #0
  102928:	1a000018 	bne	102990 <rt_timer_start+0x2c0>
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10292c:	e51b3008 	ldr	r3, [fp, #-8]
  102930:	e2633001 	rsb	r3, r3, #1
  102934:	e1a03103 	lsl	r3, r3, #2
  102938:	e24b2004 	sub	r2, fp, #4
  10293c:	e0823003 	add	r3, r2, r3
  102940:	e5130018 	ldr	r0, [r3, #-24]	; 0xffffffe8
                                 &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - row_lvl]));
  102944:	e51b3008 	ldr	r3, [fp, #-8]
  102948:	e2633001 	rsb	r3, r3, #1
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10294c:	e2833002 	add	r3, r3, #2
  102950:	e1a03183 	lsl	r3, r3, #3
  102954:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  102958:	e0823003 	add	r3, r2, r3
  10295c:	e2833004 	add	r3, r3, #4
  102960:	e1a01003 	mov	r1, r3
  102964:	ebfffe5e 	bl	1022e4 <rt_list_insert_after>
        else
            break;
        /* Shift over the bits we have tested. Works well with 1 bit and 2
         * bits. */
        tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
  102968:	e51b300c 	ldr	r3, [fp, #-12]
  10296c:	e1a03123 	lsr	r3, r3, #2
  102970:	e50b300c 	str	r3, [fp, #-12]
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102974:	e51b3008 	ldr	r3, [fp, #-8]
  102978:	e2833001 	add	r3, r3, #1
  10297c:	e50b3008 	str	r3, [fp, #-8]
  102980:	e51b3008 	ldr	r3, [fp, #-8]
  102984:	e3530001 	cmp	r3, #1
  102988:	9affffe3 	bls	10291c <rt_timer_start+0x24c>
  10298c:	ea000000 	b	102994 <rt_timer_start+0x2c4>
            break;
  102990:	e320f000 	nop	{0}
    }

    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
  102994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102998:	e5d33009 	ldrb	r3, [r3, #9]
  10299c:	e3833001 	orr	r3, r3, #1
  1029a0:	e6ef2073 	uxtb	r2, r3
  1029a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1029a8:	e5c32009 	strb	r2, [r3, #9]

    /* release mutex */
    rt_mutex_release(mutex);
  1029ac:	e30d3410 	movw	r3, #54288	; 0xd410
  1029b0:	e3403014 	movt	r3, #20
  1029b4:	e5933000 	ldr	r3, [r3]
  1029b8:	e1a00003 	mov	r0, r3
  1029bc:	ebfff96d 	bl	100f78 <rt_mutex_release>

    /* update hardware timer */
    rt_hw_timer_update();
  1029c0:	eb0000cc 	bl	102cf8 <rt_hw_timer_update>

    return RT_EOK;
  1029c4:	e3a03000 	mov	r3, #0
}
  1029c8:	e1a00003 	mov	r0, r3
  1029cc:	e24bd004 	sub	sp, fp, #4
  1029d0:	e8bd8800 	pop	{fp, pc}

001029d4 <rt_timer_stop>:
 * @param timer the timer to be stopped
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_stop(rt_timer_t timer)
{
  1029d4:	e92d4800 	push	{fp, lr}
  1029d8:	e28db004 	add	fp, sp, #4
  1029dc:	e24dd008 	sub	sp, sp, #8
  1029e0:	e50b0008 	str	r0, [fp, #-8]
    if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  1029e4:	e51b3008 	ldr	r3, [fp, #-8]
  1029e8:	e5d33009 	ldrb	r3, [r3, #9]
  1029ec:	e2033001 	and	r3, r3, #1
  1029f0:	e3530000 	cmp	r3, #0
  1029f4:	1a000001 	bne	102a00 <rt_timer_stop+0x2c>
        return -RT_ERROR;
  1029f8:	e3e03000 	mvn	r3, #0
  1029fc:	ea000017 	b	102a60 <rt_timer_stop+0x8c>

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102a00:	e320f000 	nop	{0}
  102a04:	e30d3410 	movw	r3, #54288	; 0xd410
  102a08:	e3403014 	movt	r3, #20
  102a0c:	e5933000 	ldr	r3, [r3]
  102a10:	e3e01000 	mvn	r1, #0
  102a14:	e1a00003 	mov	r0, r3
  102a18:	ebfff938 	bl	100f00 <rt_mutex_take>
  102a1c:	e1a03000 	mov	r3, r0
  102a20:	e3530000 	cmp	r3, #0
  102a24:	1afffff6 	bne	102a04 <rt_timer_stop+0x30>

    _rt_timer_remove(timer);
  102a28:	e51b0008 	ldr	r0, [fp, #-8]
  102a2c:	ebfffeaf 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  102a30:	e30d3410 	movw	r3, #54288	; 0xd410
  102a34:	e3403014 	movt	r3, #20
  102a38:	e5933000 	ldr	r3, [r3]
  102a3c:	e1a00003 	mov	r0, r3
  102a40:	ebfff94c 	bl	100f78 <rt_mutex_release>

    /* change stat */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102a44:	e51b3008 	ldr	r3, [fp, #-8]
  102a48:	e5d33009 	ldrb	r3, [r3, #9]
  102a4c:	e3c33001 	bic	r3, r3, #1
  102a50:	e6ef2073 	uxtb	r2, r3
  102a54:	e51b3008 	ldr	r3, [fp, #-8]
  102a58:	e5c32009 	strb	r2, [r3, #9]

    return RT_EOK;
  102a5c:	e3a03000 	mov	r3, #0
}
  102a60:	e1a00003 	mov	r0, r3
  102a64:	e24bd004 	sub	sp, fp, #4
  102a68:	e8bd8800 	pop	{fp, pc}

00102a6c <rt_timer_control>:
 * @param arg the argument
 *
 * @return RT_EOK
 */
rt_err_t rt_timer_control(rt_timer_t timer, int cmd, void *arg)
{
  102a6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102a70:	e28db000 	add	fp, sp, #0
  102a74:	e24dd014 	sub	sp, sp, #20
  102a78:	e50b0008 	str	r0, [fp, #-8]
  102a7c:	e50b100c 	str	r1, [fp, #-12]
  102a80:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  102a84:	e51b300c 	ldr	r3, [fp, #-12]
  102a88:	e3530008 	cmp	r3, #8
  102a8c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  102a90:	ea000032 	b	102b60 <rt_timer_control+0xf4>
  102a94:	00102acc 	.word	0x00102acc
  102a98:	00102ab8 	.word	0x00102ab8
  102a9c:	00102ae0 	.word	0x00102ae0
  102aa0:	00102afc 	.word	0x00102afc
  102aa4:	00102b60 	.word	0x00102b60
  102aa8:	00102b18 	.word	0x00102b18
  102aac:	00102b2c 	.word	0x00102b2c
  102ab0:	00102b3c 	.word	0x00102b3c
  102ab4:	00102b50 	.word	0x00102b50
    {
    case RT_TIMER_CTRL_GET_TIME:
        *(rt_tick_t *)arg = timer->init_tick;
  102ab8:	e51b3008 	ldr	r3, [fp, #-8]
  102abc:	e5932024 	ldr	r2, [r3, #36]	; 0x24
  102ac0:	e51b3010 	ldr	r3, [fp, #-16]
  102ac4:	e5832000 	str	r2, [r3]
        break;
  102ac8:	ea000024 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_TIME:
        timer->init_tick = *(rt_tick_t *)arg;
  102acc:	e51b3010 	ldr	r3, [fp, #-16]
  102ad0:	e5932000 	ldr	r2, [r3]
  102ad4:	e51b3008 	ldr	r3, [fp, #-8]
  102ad8:	e5832024 	str	r2, [r3, #36]	; 0x24
        break;
  102adc:	ea00001f 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_ONESHOT:
        timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
  102ae0:	e51b3008 	ldr	r3, [fp, #-8]
  102ae4:	e5d33009 	ldrb	r3, [r3, #9]
  102ae8:	e3c33002 	bic	r3, r3, #2
  102aec:	e6ef2073 	uxtb	r2, r3
  102af0:	e51b3008 	ldr	r3, [fp, #-8]
  102af4:	e5c32009 	strb	r2, [r3, #9]
        break;
  102af8:	ea000018 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PERIODIC:
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
  102afc:	e51b3008 	ldr	r3, [fp, #-8]
  102b00:	e5d33009 	ldrb	r3, [r3, #9]
  102b04:	e3833002 	orr	r3, r3, #2
  102b08:	e6ef2073 	uxtb	r2, r3
  102b0c:	e51b3008 	ldr	r3, [fp, #-8]
  102b10:	e5c32009 	strb	r2, [r3, #9]
        break;
  102b14:	ea000011 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_FUNC:
        *(void **)arg = timer->timeout_func;
  102b18:	e51b3008 	ldr	r3, [fp, #-8]
  102b1c:	e593201c 	ldr	r2, [r3, #28]
  102b20:	e51b3010 	ldr	r3, [fp, #-16]
  102b24:	e5832000 	str	r2, [r3]
        break;
  102b28:	ea00000c 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_FUNC:
        timer->timeout_func = (void (*)(void*))arg;
  102b2c:	e51b2010 	ldr	r2, [fp, #-16]
  102b30:	e51b3008 	ldr	r3, [fp, #-8]
  102b34:	e583201c 	str	r2, [r3, #28]
        break;
  102b38:	ea000008 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_PARM:
        *(void **)arg = timer->parameter;
  102b3c:	e51b3008 	ldr	r3, [fp, #-8]
  102b40:	e5932020 	ldr	r2, [r3, #32]
  102b44:	e51b3010 	ldr	r3, [fp, #-16]
  102b48:	e5832000 	str	r2, [r3]
        break;
  102b4c:	ea000003 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PARM:
        timer->parameter = arg;
  102b50:	e51b3008 	ldr	r3, [fp, #-8]
  102b54:	e51b2010 	ldr	r2, [fp, #-16]
  102b58:	e5832020 	str	r2, [r3, #32]
        break;
  102b5c:	e320f000 	nop	{0}
    }

    return RT_EOK;
  102b60:	e3a03000 	mov	r3, #0
}
  102b64:	e1a00003 	mov	r0, r3
  102b68:	e28bd000 	add	sp, fp, #0
  102b6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  102b70:	e12fff1e 	bx	lr

00102b74 <rt_soft_timer_check>:
/**
 * This function will check timer list, if a timeout event happens, the
 * corresponding timeout function will be invoked.
 */
void rt_soft_timer_check(void)
{
  102b74:	e92d4800 	push	{fp, lr}
  102b78:	e28db004 	add	fp, sp, #4
  102b7c:	e24dd010 	sub	sp, sp, #16
    rt_list_t *n;
    struct rt_timer *t;

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check enter\n"));

    current_tick = rt_tick_get();
  102b80:	ebfffcb6 	bl	101e60 <rt_tick_get>
  102b84:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102b88:	e320f000 	nop	{0}
  102b8c:	e30d3410 	movw	r3, #54288	; 0xd410
  102b90:	e3403014 	movt	r3, #20
  102b94:	e5933000 	ldr	r3, [r3]
  102b98:	e3e01000 	mvn	r1, #0
  102b9c:	e1a00003 	mov	r0, r3
  102ba0:	ebfff8d6 	bl	100f00 <rt_mutex_take>
  102ba4:	e1a03000 	mov	r3, r0
  102ba8:	e3530000 	cmp	r3, #0
  102bac:	1afffff6 	bne	102b8c <rt_soft_timer_check+0x18>

    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102bb0:	e30d3418 	movw	r3, #54296	; 0xd418
  102bb4:	e3403014 	movt	r3, #20
  102bb8:	e5933000 	ldr	r3, [r3]
  102bbc:	e50b300c 	str	r3, [fp, #-12]
  102bc0:	ea00003d 	b	102cbc <rt_soft_timer_check+0x148>
         n != &(rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]);)
    {
        t = rt_list_entry(n, struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
  102bc4:	e51b300c 	ldr	r3, [fp, #-12]
  102bc8:	e2433014 	sub	r3, r3, #20
  102bcc:	e50b3010 	str	r3, [fp, #-16]

        /*
         * It supposes that the new tick shall less than the half duration of
         * tick max.
         */
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
  102bd0:	e51b3010 	ldr	r3, [fp, #-16]
  102bd4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102bd8:	e51b2008 	ldr	r2, [fp, #-8]
  102bdc:	e0423003 	sub	r3, r2, r3
  102be0:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102be4:	8a00003a 	bhi	102cd4 <rt_soft_timer_check+0x160>
        {
            /* move node to the next */
            n = n->next;
  102be8:	e51b300c 	ldr	r3, [fp, #-12]
  102bec:	e5933000 	ldr	r3, [r3]
  102bf0:	e50b300c 	str	r3, [fp, #-12]

            /* remove timer from timer list firstly */
            _rt_timer_remove(t);
  102bf4:	e51b0010 	ldr	r0, [fp, #-16]
  102bf8:	ebfffe3c 	bl	1024f0 <_rt_timer_remove>

            /* release mutex */
            rt_mutex_release(mutex);
  102bfc:	e30d3410 	movw	r3, #54288	; 0xd410
  102c00:	e3403014 	movt	r3, #20
  102c04:	e5933000 	ldr	r3, [r3]
  102c08:	e1a00003 	mov	r0, r3
  102c0c:	ebfff8d9 	bl	100f78 <rt_mutex_release>
            /* call timeout function */
            t->timeout_func(t->parameter);
  102c10:	e51b3010 	ldr	r3, [fp, #-16]
  102c14:	e593301c 	ldr	r3, [r3, #28]
  102c18:	e51b2010 	ldr	r2, [fp, #-16]
  102c1c:	e5922020 	ldr	r2, [r2, #32]
  102c20:	e1a00002 	mov	r0, r2
  102c24:	e12fff33 	blx	r3

            /* re-get tick */
            current_tick = rt_tick_get();
  102c28:	ebfffc8c 	bl	101e60 <rt_tick_get>
  102c2c:	e50b0008 	str	r0, [fp, #-8]

            RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));

            /* make sure take mutex */
            while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102c30:	e320f000 	nop	{0}
  102c34:	e30d3410 	movw	r3, #54288	; 0xd410
  102c38:	e3403014 	movt	r3, #20
  102c3c:	e5933000 	ldr	r3, [r3]
  102c40:	e3e01000 	mvn	r1, #0
  102c44:	e1a00003 	mov	r0, r3
  102c48:	ebfff8ac 	bl	100f00 <rt_mutex_take>
  102c4c:	e1a03000 	mov	r3, r0
  102c50:	e3530000 	cmp	r3, #0
  102c54:	1afffff6 	bne	102c34 <rt_soft_timer_check+0xc0>


            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c58:	e51b3010 	ldr	r3, [fp, #-16]
  102c5c:	e5d33009 	ldrb	r3, [r3, #9]
  102c60:	e2033002 	and	r3, r3, #2
  102c64:	e3530000 	cmp	r3, #0
  102c68:	0a00000d 	beq	102ca4 <rt_soft_timer_check+0x130>
                    (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  102c6c:	e51b3010 	ldr	r3, [fp, #-16]
  102c70:	e5d33009 	ldrb	r3, [r3, #9]
  102c74:	e2033001 	and	r3, r3, #1
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c78:	e3530000 	cmp	r3, #0
  102c7c:	0a000008 	beq	102ca4 <rt_soft_timer_check+0x130>
            {
                /* start it */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102c80:	e51b3010 	ldr	r3, [fp, #-16]
  102c84:	e5d33009 	ldrb	r3, [r3, #9]
  102c88:	e3c33001 	bic	r3, r3, #1
  102c8c:	e6ef2073 	uxtb	r2, r3
  102c90:	e51b3010 	ldr	r3, [fp, #-16]
  102c94:	e5c32009 	strb	r2, [r3, #9]
                rt_timer_start(t);
  102c98:	e51b0010 	ldr	r0, [fp, #-16]
  102c9c:	ebfffe8b 	bl	1026d0 <rt_timer_start>
  102ca0:	ea000005 	b	102cbc <rt_soft_timer_check+0x148>
            }
            else
            {
                /* stop timer */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102ca4:	e51b3010 	ldr	r3, [fp, #-16]
  102ca8:	e5d33009 	ldrb	r3, [r3, #9]
  102cac:	e3c33001 	bic	r3, r3, #1
  102cb0:	e6ef2073 	uxtb	r2, r3
  102cb4:	e51b3010 	ldr	r3, [fp, #-16]
  102cb8:	e5c32009 	strb	r2, [r3, #9]
    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102cbc:	e51b200c 	ldr	r2, [fp, #-12]
  102cc0:	e30d3418 	movw	r3, #54296	; 0xd418
  102cc4:	e3403014 	movt	r3, #20
  102cc8:	e1520003 	cmp	r2, r3
  102ccc:	1affffbc 	bne	102bc4 <rt_soft_timer_check+0x50>
  102cd0:	ea000000 	b	102cd8 <rt_soft_timer_check+0x164>
            }
        }
        else break; /* not check anymore */
  102cd4:	e320f000 	nop	{0}
    }

    /* release mutex */
    rt_mutex_release(mutex);
  102cd8:	e30d3410 	movw	r3, #54288	; 0xd410
  102cdc:	e3403014 	movt	r3, #20
  102ce0:	e5933000 	ldr	r3, [r3]
  102ce4:	e1a00003 	mov	r0, r3
  102ce8:	ebfff8a2 	bl	100f78 <rt_mutex_release>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check leave\n"));
}
  102cec:	e320f000 	nop	{0}
  102cf0:	e24bd004 	sub	sp, fp, #4
  102cf4:	e8bd8800 	pop	{fp, pc}

00102cf8 <rt_hw_timer_update>:

/* update hardware timer */
static void rt_hw_timer_update(void)
{
  102cf8:	e92d4800 	push	{fp, lr}
  102cfc:	e28db004 	add	fp, sp, #4
  102d00:	e24dd008 	sub	sp, sp, #8
    rt_tick_t next_timeout;
    rt_tick_t current_tick;

    /* get the next timeout tick */
    next_timeout = rt_timer_list_next_timeout(rt_soft_timer_list);
  102d04:	e30d0418 	movw	r0, #54296	; 0xd418
  102d08:	e3400014 	movt	r0, #20
  102d0c:	ebfffde3 	bl	1024a0 <rt_timer_list_next_timeout>
  102d10:	e1a03000 	mov	r3, r0
  102d14:	e50b300c 	str	r3, [fp, #-12]
    if (next_timeout == RT_TICK_MAX)
  102d18:	e51b300c 	ldr	r3, [fp, #-12]
  102d1c:	e3730001 	cmn	r3, #1
  102d20:	0a00001f 	beq	102da4 <rt_hw_timer_update+0xac>
        /* no software timer exist, return. */
        return;
    }

    /* get current tick */
    current_tick = rt_tick_get();
  102d24:	ebfffc4d 	bl	101e60 <rt_tick_get>
  102d28:	e50b0008 	str	r0, [fp, #-8]

    if ((next_timeout - current_tick) < RT_TICK_MAX / 2)
  102d2c:	e51b200c 	ldr	r2, [fp, #-12]
  102d30:	e51b3008 	ldr	r3, [fp, #-8]
  102d34:	e0423003 	sub	r3, r2, r3
  102d38:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102d3c:	8a00001a 	bhi	102dac <rt_hw_timer_update+0xb4>
    {
        syscall(_NRSYS_timer_stop, hw_timer);
  102d40:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d44:	e3403014 	movt	r3, #20
  102d48:	e5933000 	ldr	r3, [r3]
  102d4c:	e1a01003 	mov	r1, r3
  102d50:	e3a00072 	mov	r0, #114	; 0x72
  102d54:	eb00e5c2 	bl	13c464 <syscall>
        /* get the delta timeout tick */
        next_timeout = next_timeout - current_tick;
  102d58:	e51b200c 	ldr	r2, [fp, #-12]
  102d5c:	e51b3008 	ldr	r3, [fp, #-8]
  102d60:	e0423003 	sub	r3, r2, r3
  102d64:	e50b300c 	str	r3, [fp, #-12]
        syscall(_NRSYS_timer_control,
  102d68:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d6c:	e3403014 	movt	r3, #20
  102d70:	e5931000 	ldr	r1, [r3]
  102d74:	e24b300c 	sub	r3, fp, #12
  102d78:	e3a02000 	mov	r2, #0
  102d7c:	e3a00073 	mov	r0, #115	; 0x73
  102d80:	eb00e5b7 	bl	13c464 <syscall>
                hw_timer,
                RT_TIMER_CTRL_SET_TIME,
                &next_timeout);
        syscall(_NRSYS_timer_start, hw_timer);
  102d84:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d88:	e3403014 	movt	r3, #20
  102d8c:	e5933000 	ldr	r3, [r3]
  102d90:	e1a01003 	mov	r1, r3
  102d94:	e3a00071 	mov	r0, #113	; 0x71
  102d98:	eb00e5b1 	bl	13c464 <syscall>
    }
    return;
  102d9c:	e320f000 	nop	{0}
  102da0:	ea000001 	b	102dac <rt_hw_timer_update+0xb4>
        return;
  102da4:	e320f000 	nop	{0}
  102da8:	ea000000 	b	102db0 <rt_hw_timer_update+0xb8>
    return;
  102dac:	e320f000 	nop	{0}
}
  102db0:	e24bd004 	sub	sp, fp, #4
  102db4:	e8bd8800 	pop	{fp, pc}

00102db8 <rt_thread_timer_handler>:

/* timer signal handler */
static void rt_thread_timer_handler(void)
{
  102db8:	e92d4800 	push	{fp, lr}
  102dbc:	e28db004 	add	fp, sp, #4
    /* update hardware timer */
    rt_hw_timer_update();
  102dc0:	ebffffcc 	bl	102cf8 <rt_hw_timer_update>
    /* check software timer */
    rt_soft_timer_check();
  102dc4:	ebffff6a 	bl	102b74 <rt_soft_timer_check>
}
  102dc8:	e320f000 	nop	{0}
  102dcc:	e8bd8800 	pop	{fp, pc}

00102dd0 <timer_thread_entry>:

static void timer_thread_entry(void* parameter)
{
  102dd0:	e92d4800 	push	{fp, lr}
  102dd4:	e28db004 	add	fp, sp, #4
  102dd8:	e24dd010 	sub	sp, sp, #16
  102ddc:	e50b0010 	str	r0, [fp, #-16]
    while (1)
    {
        rt_err_t ret;
        ret = rt_sem_take(sem, RT_WAITING_FOREVER);
  102de0:	e30d3414 	movw	r3, #54292	; 0xd414
  102de4:	e3403014 	movt	r3, #20
  102de8:	e5933000 	ldr	r3, [r3]
  102dec:	e3e01000 	mvn	r1, #0
  102df0:	e1a00003 	mov	r0, r3
  102df4:	ebfff92e 	bl	1012b4 <rt_sem_take>
  102df8:	e50b0008 	str	r0, [fp, #-8]
        if (ret != RT_EOK)
  102dfc:	e51b3008 	ldr	r3, [fp, #-8]
  102e00:	e3530000 	cmp	r3, #0
  102e04:	1a000001 	bne	102e10 <timer_thread_entry+0x40>
        {
            break;
        }
        rt_thread_timer_handler();
  102e08:	ebffffea 	bl	102db8 <rt_thread_timer_handler>
    {
  102e0c:	eafffff3 	b	102de0 <timer_thread_entry+0x10>
            break;
  102e10:	e320f000 	nop	{0}
    }
}
  102e14:	e320f000 	nop	{0}
  102e18:	e24bd004 	sub	sp, fp, #4
  102e1c:	e8bd8800 	pop	{fp, pc}

00102e20 <rt_system_timer_init>:

void rt_system_timer_init(rt_uint32_t timer_stack_size)
{
  102e20:	e92d4800 	push	{fp, lr}
  102e24:	e28db004 	add	fp, sp, #4
  102e28:	e24dd018 	sub	sp, sp, #24
  102e2c:	e50b0010 	str	r0, [fp, #-16]
    int i;
    rt_thread_t tid;

    if (!sem)
  102e30:	e30d3414 	movw	r3, #54292	; 0xd414
  102e34:	e3403014 	movt	r3, #20
  102e38:	e5933000 	ldr	r3, [r3]
  102e3c:	e3530000 	cmp	r3, #0
  102e40:	1a000008 	bne	102e68 <rt_system_timer_init+0x48>
    {
        sem = rt_sem_create("u_timer", 0, RT_IPC_FLAG_FIFO);
  102e44:	e3a02000 	mov	r2, #0
  102e48:	e3a01000 	mov	r1, #0
  102e4c:	e3050498 	movw	r0, #21656	; 0x5498
  102e50:	e3400014 	movt	r0, #20
  102e54:	ebfff863 	bl	100fe8 <rt_sem_create>
  102e58:	e1a02000 	mov	r2, r0
  102e5c:	e30d3414 	movw	r3, #54292	; 0xd414
  102e60:	e3403014 	movt	r3, #20
  102e64:	e5832000 	str	r2, [r3]
    }

    if (!mutex)
  102e68:	e30d3410 	movw	r3, #54288	; 0xd410
  102e6c:	e3403014 	movt	r3, #20
  102e70:	e5933000 	ldr	r3, [r3]
  102e74:	e3530000 	cmp	r3, #0
  102e78:	1a000007 	bne	102e9c <rt_system_timer_init+0x7c>
    {
        mutex = rt_mutex_create("utm_mutex", RT_IPC_FLAG_FIFO);
  102e7c:	e3a01000 	mov	r1, #0
  102e80:	e30504a0 	movw	r0, #21664	; 0x54a0
  102e84:	e3400014 	movt	r0, #20
  102e88:	ebfff786 	bl	100ca8 <rt_mutex_create>
  102e8c:	e1a02000 	mov	r2, r0
  102e90:	e30d3410 	movw	r3, #54288	; 0xd410
  102e94:	e3403014 	movt	r3, #20
  102e98:	e5832000 	str	r2, [r3]
    }

    for (i = 0;
  102e9c:	e3a03000 	mov	r3, #0
  102ea0:	e50b3008 	str	r3, [fp, #-8]
  102ea4:	ea000009 	b	102ed0 <rt_system_timer_init+0xb0>
         i < sizeof(rt_soft_timer_list) / sizeof(rt_soft_timer_list[0]);
         i++)
    {
        rt_list_init(rt_soft_timer_list + i);
  102ea8:	e51b3008 	ldr	r3, [fp, #-8]
  102eac:	e1a02183 	lsl	r2, r3, #3
  102eb0:	e30d3418 	movw	r3, #54296	; 0xd418
  102eb4:	e3403014 	movt	r3, #20
  102eb8:	e0823003 	add	r3, r2, r3
  102ebc:	e1a00003 	mov	r0, r3
  102ec0:	ebfffcf8 	bl	1022a8 <rt_list_init>
         i++)
  102ec4:	e51b3008 	ldr	r3, [fp, #-8]
  102ec8:	e2833001 	add	r3, r3, #1
  102ecc:	e50b3008 	str	r3, [fp, #-8]
    for (i = 0;
  102ed0:	e51b3008 	ldr	r3, [fp, #-8]
  102ed4:	e3530000 	cmp	r3, #0
  102ed8:	0afffff2 	beq	102ea8 <rt_system_timer_init+0x88>
    }

    /* initial hardware timer */
    if (!hw_timer)
  102edc:	e30d340c 	movw	r3, #54284	; 0xd40c
  102ee0:	e3403014 	movt	r3, #20
  102ee4:	e5933000 	ldr	r3, [r3]
  102ee8:	e3530000 	cmp	r3, #0
  102eec:	1a00000f 	bne	102f30 <rt_system_timer_init+0x110>
    {
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
                "u_timer",
                sem->data, //SIG_HW_TIMER,
  102ef0:	e30d3414 	movw	r3, #54292	; 0xd414
  102ef4:	e3403014 	movt	r3, #20
  102ef8:	e5933000 	ldr	r3, [r3]
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
  102efc:	e5932004 	ldr	r2, [r3, #4]
  102f00:	e3a03000 	mov	r3, #0
  102f04:	e58d3000 	str	r3, [sp]
  102f08:	e3a03000 	mov	r3, #0
  102f0c:	e3051498 	movw	r1, #21656	; 0x5498
  102f10:	e3401014 	movt	r1, #20
  102f14:	e3a0006f 	mov	r0, #111	; 0x6f
  102f18:	eb00e551 	bl	13c464 <syscall>
  102f1c:	e1a03000 	mov	r3, r0
  102f20:	e1a02003 	mov	r2, r3
  102f24:	e30d340c 	movw	r3, #54284	; 0xd40c
  102f28:	e3403014 	movt	r3, #20
  102f2c:	e5832000 	str	r2, [r3]
                0,
                RT_TIMER_FLAG_ONE_SHOT|RT_TIMER_FLAG_HARD_TIMER);
    }

    if (timer_stack_size < 4096)
  102f30:	e51b3010 	ldr	r3, [fp, #-16]
  102f34:	e3530a01 	cmp	r3, #4096	; 0x1000
  102f38:	2a000001 	bcs	102f44 <rt_system_timer_init+0x124>
    {
        timer_stack_size = 4096;
  102f3c:	e3a03a01 	mov	r3, #4096	; 0x1000
  102f40:	e50b3010 	str	r3, [fp, #-16]
    }

    tid = rt_thread_create("u_timer", timer_thread_entry, RT_NULL,
  102f44:	e3a0300a 	mov	r3, #10
  102f48:	e58d3004 	str	r3, [sp, #4]
  102f4c:	e3a03002 	mov	r3, #2
  102f50:	e58d3000 	str	r3, [sp]
  102f54:	e51b3010 	ldr	r3, [fp, #-16]
  102f58:	e3a02000 	mov	r2, #0
  102f5c:	e3021dd0 	movw	r1, #11728	; 0x2dd0
  102f60:	e3401010 	movt	r1, #16
  102f64:	e3050498 	movw	r0, #21656	; 0x5498
  102f68:	e3400014 	movt	r0, #20
  102f6c:	ebfffc60 	bl	1020f4 <rt_thread_create>
  102f70:	e50b000c 	str	r0, [fp, #-12]
            timer_stack_size, 2, 10);
    if (tid)
  102f74:	e51b300c 	ldr	r3, [fp, #-12]
  102f78:	e3530000 	cmp	r3, #0
  102f7c:	0a000001 	beq	102f88 <rt_system_timer_init+0x168>
    {
        rt_thread_startup(tid);
  102f80:	e51b000c 	ldr	r0, [fp, #-12]
  102f84:	ebfffc8f 	bl	1021c8 <rt_thread_startup>
    }
}
  102f88:	e320f000 	nop	{0}
  102f8c:	e24bd004 	sub	sp, fp, #4
  102f90:	e8bd8800 	pop	{fp, pc}

00102f94 <rt_malloc>:
#include <stdarg.h>

#include <rtthread.h>

void *rt_malloc(rt_size_t nbytes)
{
  102f94:	e92d4800 	push	{fp, lr}
  102f98:	e28db004 	add	fp, sp, #4
  102f9c:	e24dd008 	sub	sp, sp, #8
  102fa0:	e50b0008 	str	r0, [fp, #-8]
    return malloc(nbytes);
  102fa4:	e51b0008 	ldr	r0, [fp, #-8]
  102fa8:	eb00e8ea 	bl	13d358 <malloc>
  102fac:	e1a03000 	mov	r3, r0
}
  102fb0:	e1a00003 	mov	r0, r3
  102fb4:	e24bd004 	sub	sp, fp, #4
  102fb8:	e8bd8800 	pop	{fp, pc}

00102fbc <rt_free>:

void rt_free(void *ptr)
{
  102fbc:	e92d4800 	push	{fp, lr}
  102fc0:	e28db004 	add	fp, sp, #4
  102fc4:	e24dd008 	sub	sp, sp, #8
  102fc8:	e50b0008 	str	r0, [fp, #-8]
    return free(ptr);
  102fcc:	e51b0008 	ldr	r0, [fp, #-8]
  102fd0:	eb00ea9c 	bl	13da48 <free>
}
  102fd4:	e24bd004 	sub	sp, fp, #4
  102fd8:	e8bd8800 	pop	{fp, pc}

00102fdc <rt_realloc>:

void *rt_realloc(void *ptr, rt_size_t nbytes)
{
  102fdc:	e92d4800 	push	{fp, lr}
  102fe0:	e28db004 	add	fp, sp, #4
  102fe4:	e24dd008 	sub	sp, sp, #8
  102fe8:	e50b0008 	str	r0, [fp, #-8]
  102fec:	e50b100c 	str	r1, [fp, #-12]
    return realloc(ptr, nbytes);
  102ff0:	e51b100c 	ldr	r1, [fp, #-12]
  102ff4:	e51b0008 	ldr	r0, [fp, #-8]
  102ff8:	eb00eaa1 	bl	13da84 <realloc>
  102ffc:	e1a03000 	mov	r3, r0
}
  103000:	e1a00003 	mov	r0, r3
  103004:	e24bd004 	sub	sp, fp, #4
  103008:	e8bd8800 	pop	{fp, pc}

0010300c <rt_calloc>:

void *rt_calloc(rt_size_t count, rt_size_t size)
{
  10300c:	e92d4800 	push	{fp, lr}
  103010:	e28db004 	add	fp, sp, #4
  103014:	e24dd008 	sub	sp, sp, #8
  103018:	e50b0008 	str	r0, [fp, #-8]
  10301c:	e50b100c 	str	r1, [fp, #-12]
    return calloc(count, size);
  103020:	e51b100c 	ldr	r1, [fp, #-12]
  103024:	e51b0008 	ldr	r0, [fp, #-8]
  103028:	eb00ea4f 	bl	13d96c <calloc>
  10302c:	e1a03000 	mov	r3, r0
}
  103030:	e1a00003 	mov	r0, r3
  103034:	e24bd004 	sub	sp, fp, #4
  103038:	e8bd8800 	pop	{fp, pc}

0010303c <rt_snprintf>:

rt_int32_t rt_snprintf(char *buf, rt_size_t size, const char *format, ...)
{
  10303c:	e92d000c 	push	{r2, r3}
  103040:	e92d4800 	push	{fp, lr}
  103044:	e28db004 	add	fp, sp, #4
  103048:	e24dd010 	sub	sp, sp, #16
  10304c:	e50b0010 	str	r0, [fp, #-16]
  103050:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  103054:	e28b3008 	add	r3, fp, #8
  103058:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, size, format, ap);
  10305c:	e51b300c 	ldr	r3, [fp, #-12]
  103060:	e59b2004 	ldr	r2, [fp, #4]
  103064:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  103068:	e51b0010 	ldr	r0, [fp, #-16]
  10306c:	eb00f6e3 	bl	140c00 <vsnprintf>
  103070:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    return ret;
  103074:	e51b3008 	ldr	r3, [fp, #-8]
}
  103078:	e1a00003 	mov	r0, r3
  10307c:	e24bd004 	sub	sp, fp, #4
  103080:	e8bd4800 	pop	{fp, lr}
  103084:	e28dd008 	add	sp, sp, #8
  103088:	e12fff1e 	bx	lr

0010308c <rt_sprintf>:

rt_int32_t rt_sprintf(char *buf, const char *format, ...)
{
  10308c:	e92d000e 	push	{r1, r2, r3}
  103090:	e92d4800 	push	{fp, lr}
  103094:	e28db004 	add	fp, sp, #4
  103098:	e24dd014 	sub	sp, sp, #20
  10309c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  1030a0:	e28b3008 	add	r3, fp, #8
  1030a4:	e50b3010 	str	r3, [fp, #-16]
    ret = vsprintf(buf, format, ap);
  1030a8:	e51b2010 	ldr	r2, [fp, #-16]
  1030ac:	e59b1004 	ldr	r1, [fp, #4]
  1030b0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1030b4:	eb00f708 	bl	140cdc <vsprintf>
  1030b8:	e50b000c 	str	r0, [fp, #-12]
    va_end(ap);
    return ret;
  1030bc:	e51b300c 	ldr	r3, [fp, #-12]
}
  1030c0:	e1a00003 	mov	r0, r3
  1030c4:	e24bd004 	sub	sp, fp, #4
  1030c8:	e8bd4800 	pop	{fp, lr}
  1030cc:	e28dd00c 	add	sp, sp, #12
  1030d0:	e12fff1e 	bx	lr

001030d4 <rt_vsnprintf>:

rt_int32_t rt_vsnprintf(char *buf,
    rt_size_t size,
    const char *fmt,
    va_list args)
{
  1030d4:	e92d4800 	push	{fp, lr}
  1030d8:	e28db004 	add	fp, sp, #4
  1030dc:	e24dd010 	sub	sp, sp, #16
  1030e0:	e50b0008 	str	r0, [fp, #-8]
  1030e4:	e50b100c 	str	r1, [fp, #-12]
  1030e8:	e50b2010 	str	r2, [fp, #-16]
  1030ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (rt_int32_t)vsnprintf(buf, size, fmt, args);
  1030f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1030f4:	e51b2010 	ldr	r2, [fp, #-16]
  1030f8:	e51b100c 	ldr	r1, [fp, #-12]
  1030fc:	e51b0008 	ldr	r0, [fp, #-8]
  103100:	eb00f6be 	bl	140c00 <vsnprintf>
  103104:	e1a03000 	mov	r3, r0
}
  103108:	e1a00003 	mov	r0, r3
  10310c:	e24bd004 	sub	sp, fp, #4
  103110:	e8bd8800 	pop	{fp, pc}

00103114 <rt_kprintf>:

void rt_kprintf(const char *fmt, ...)
{
  103114:	e92d000f 	push	{r0, r1, r2, r3}
  103118:	e92d4800 	push	{fp, lr}
  10311c:	e28db004 	add	fp, sp, #4
  103120:	e24dd060 	sub	sp, sp, #96	; 0x60
    int ret;
    va_list ap;
    char buf[81];

    va_start(ap, fmt);
  103124:	e28b3008 	add	r3, fp, #8
  103128:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, 81, fmt, ap);
  10312c:	e24b0060 	sub	r0, fp, #96	; 0x60
  103130:	e51b300c 	ldr	r3, [fp, #-12]
  103134:	e59b2004 	ldr	r2, [fp, #4]
  103138:	e3a01051 	mov	r1, #81	; 0x51
  10313c:	eb00f6af 	bl	140c00 <vsnprintf>
  103140:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    if (ret > 0)
  103144:	e51b3008 	ldr	r3, [fp, #-8]
  103148:	e3530000 	cmp	r3, #0
  10314c:	da000004 	ble	103164 <rt_kprintf+0x50>
        printf("%s", buf);
  103150:	e24b3060 	sub	r3, fp, #96	; 0x60
  103154:	e1a01003 	mov	r1, r3
  103158:	e30504ac 	movw	r0, #21676	; 0x54ac
  10315c:	e3400014 	movt	r0, #20
  103160:	eb00ed16 	bl	13e5c0 <printf>
}
  103164:	e320f000 	nop	{0}
  103168:	e24bd004 	sub	sp, fp, #4
  10316c:	e8bd4800 	pop	{fp, lr}
  103170:	e28dd010 	add	sp, sp, #16
  103174:	e12fff1e 	bx	lr

00103178 <rt_strdup>:

char *rt_strdup(const char* s)
{
  103178:	e92d4800 	push	{fp, lr}
  10317c:	e28db004 	add	fp, sp, #4
  103180:	e24dd008 	sub	sp, sp, #8
  103184:	e50b0008 	str	r0, [fp, #-8]
    return strdup(s);
  103188:	e51b0008 	ldr	r0, [fp, #-8]
  10318c:	eb00f8bf 	bl	141490 <strdup>
  103190:	e1a03000 	mov	r3, r0
}
  103194:	e1a00003 	mov	r0, r3
  103198:	e24bd004 	sub	sp, fp, #4
  10319c:	e8bd8800 	pop	{fp, pc}

001031a0 <rt_strstr>:

char *rt_strstr(const char *s1, const char *s2)
{
  1031a0:	e92d4800 	push	{fp, lr}
  1031a4:	e28db004 	add	fp, sp, #4
  1031a8:	e24dd008 	sub	sp, sp, #8
  1031ac:	e50b0008 	str	r0, [fp, #-8]
  1031b0:	e50b100c 	str	r1, [fp, #-12]
    return strstr(s1, s2);
  1031b4:	e51b100c 	ldr	r1, [fp, #-12]
  1031b8:	e51b0008 	ldr	r0, [fp, #-8]
  1031bc:	eb00f9fa 	bl	1419ac <strstr>
  1031c0:	e1a03000 	mov	r3, r0
}
  1031c4:	e1a00003 	mov	r0, r3
  1031c8:	e24bd004 	sub	sp, fp, #4
  1031cc:	e8bd8800 	pop	{fp, pc}

001031d0 <rt_strcmp>:

rt_int32_t rt_strcmp(const char *cs, const char *ct)
{
  1031d0:	e92d4800 	push	{fp, lr}
  1031d4:	e28db004 	add	fp, sp, #4
  1031d8:	e24dd008 	sub	sp, sp, #8
  1031dc:	e50b0008 	str	r0, [fp, #-8]
  1031e0:	e50b100c 	str	r1, [fp, #-12]
    return (rt_int32_t)strcmp(cs, ct);
  1031e4:	e51b100c 	ldr	r1, [fp, #-12]
  1031e8:	e51b0008 	ldr	r0, [fp, #-8]
  1031ec:	eb00f891 	bl	141438 <strcmp>
  1031f0:	e1a03000 	mov	r3, r0
}
  1031f4:	e1a00003 	mov	r0, r3
  1031f8:	e24bd004 	sub	sp, fp, #4
  1031fc:	e8bd8800 	pop	{fp, pc}

00103200 <rt_strlen>:

rt_size_t rt_strlen(const char *src)
{
  103200:	e92d4800 	push	{fp, lr}
  103204:	e28db004 	add	fp, sp, #4
  103208:	e24dd008 	sub	sp, sp, #8
  10320c:	e50b0008 	str	r0, [fp, #-8]
    return strlen(src);
  103210:	e51b0008 	ldr	r0, [fp, #-8]
  103214:	eb00f8a9 	bl	1414c0 <strlen>
  103218:	e1a03000 	mov	r3, r0
}
  10321c:	e1a00003 	mov	r0, r3
  103220:	e24bd004 	sub	sp, fp, #4
  103224:	e8bd8800 	pop	{fp, pc}

00103228 <rt_strncmp>:

rt_int32_t rt_strncmp(const char *cs, const char *ct, rt_ubase_t count)
{
  103228:	e92d4800 	push	{fp, lr}
  10322c:	e28db004 	add	fp, sp, #4
  103230:	e24dd010 	sub	sp, sp, #16
  103234:	e50b0008 	str	r0, [fp, #-8]
  103238:	e50b100c 	str	r1, [fp, #-12]
  10323c:	e50b2010 	str	r2, [fp, #-16]
    return strncmp(cs, ct, count);
  103240:	e51b2010 	ldr	r2, [fp, #-16]
  103244:	e51b100c 	ldr	r1, [fp, #-12]
  103248:	e51b0008 	ldr	r0, [fp, #-8]
  10324c:	eb00f8c7 	bl	141570 <strncmp>
  103250:	e1a03000 	mov	r3, r0
}
  103254:	e1a00003 	mov	r0, r3
  103258:	e24bd004 	sub	sp, fp, #4
  10325c:	e8bd8800 	pop	{fp, pc}

00103260 <rt_strncpy>:

char *rt_strncpy(char *dest, const char *src, rt_ubase_t n)
{
  103260:	e92d4800 	push	{fp, lr}
  103264:	e28db004 	add	fp, sp, #4
  103268:	e24dd010 	sub	sp, sp, #16
  10326c:	e50b0008 	str	r0, [fp, #-8]
  103270:	e50b100c 	str	r1, [fp, #-12]
  103274:	e50b2010 	str	r2, [fp, #-16]
    return strncpy(dest, src, n);
  103278:	e51b2010 	ldr	r2, [fp, #-16]
  10327c:	e51b100c 	ldr	r1, [fp, #-12]
  103280:	e51b0008 	ldr	r0, [fp, #-8]
  103284:	eb00f8de 	bl	141604 <strncpy>
  103288:	e1a03000 	mov	r3, r0
}
  10328c:	e1a00003 	mov	r0, r3
  103290:	e24bd004 	sub	sp, fp, #4
  103294:	e8bd8800 	pop	{fp, pc}

00103298 <rt_strcasecmp>:

rt_uint32_t rt_strcasecmp(const char *a, const char *b)
{
  103298:	e92d4800 	push	{fp, lr}
  10329c:	e28db004 	add	fp, sp, #4
  1032a0:	e24dd008 	sub	sp, sp, #8
  1032a4:	e50b0008 	str	r0, [fp, #-8]
  1032a8:	e50b100c 	str	r1, [fp, #-12]
    return strcasecmp(a, b);
  1032ac:	e51b100c 	ldr	r1, [fp, #-12]
  1032b0:	e51b0008 	ldr	r0, [fp, #-8]
  1032b4:	eb00f837 	bl	141398 <strcasecmp>
  1032b8:	e1a03000 	mov	r3, r0
}
  1032bc:	e1a00003 	mov	r0, r3
  1032c0:	e24bd004 	sub	sp, fp, #4
  1032c4:	e8bd8800 	pop	{fp, pc}

001032c8 <rt_memset>:

void *rt_memset(void *src, int c, rt_ubase_t n)
{
  1032c8:	e92d4800 	push	{fp, lr}
  1032cc:	e28db004 	add	fp, sp, #4
  1032d0:	e24dd010 	sub	sp, sp, #16
  1032d4:	e50b0008 	str	r0, [fp, #-8]
  1032d8:	e50b100c 	str	r1, [fp, #-12]
  1032dc:	e50b2010 	str	r2, [fp, #-16]
    return memset(src, c, n);
  1032e0:	e51b2010 	ldr	r2, [fp, #-16]
  1032e4:	e51b100c 	ldr	r1, [fp, #-12]
  1032e8:	e51b0008 	ldr	r0, [fp, #-8]
  1032ec:	eb00f7e2 	bl	14127c <memset>
  1032f0:	e1a03000 	mov	r3, r0
}
  1032f4:	e1a00003 	mov	r0, r3
  1032f8:	e24bd004 	sub	sp, fp, #4
  1032fc:	e8bd8800 	pop	{fp, pc}

00103300 <rt_memcpy>:

void *rt_memcpy(void *dest, const void *src, rt_ubase_t n)
{
  103300:	e92d4800 	push	{fp, lr}
  103304:	e28db004 	add	fp, sp, #4
  103308:	e24dd010 	sub	sp, sp, #16
  10330c:	e50b0008 	str	r0, [fp, #-8]
  103310:	e50b100c 	str	r1, [fp, #-12]
  103314:	e50b2010 	str	r2, [fp, #-16]
    return memcpy(dest, src, n);
  103318:	e51b2010 	ldr	r2, [fp, #-16]
  10331c:	e51b100c 	ldr	r1, [fp, #-12]
  103320:	e51b0008 	ldr	r0, [fp, #-8]
  103324:	eb00f69c 	bl	140d9c <memcpy>
  103328:	e1a03000 	mov	r3, r0
}
  10332c:	e1a00003 	mov	r0, r3
  103330:	e24bd004 	sub	sp, fp, #4
  103334:	e8bd8800 	pop	{fp, pc}

00103338 <rt_memcmp>:

rt_int32_t rt_memcmp(const void *cs, const void *ct, rt_ubase_t count)
{
  103338:	e92d4800 	push	{fp, lr}
  10333c:	e28db004 	add	fp, sp, #4
  103340:	e24dd010 	sub	sp, sp, #16
  103344:	e50b0008 	str	r0, [fp, #-8]
  103348:	e50b100c 	str	r1, [fp, #-12]
  10334c:	e50b2010 	str	r2, [fp, #-16]
    return memcmp(cs, ct, count);
  103350:	e51b2010 	ldr	r2, [fp, #-16]
  103354:	e51b100c 	ldr	r1, [fp, #-12]
  103358:	e51b0008 	ldr	r0, [fp, #-8]
  10335c:	eb00f74d 	bl	141098 <memcmp>
  103360:	e1a03000 	mov	r3, r0
}
  103364:	e1a00003 	mov	r0, r3
  103368:	e24bd004 	sub	sp, fp, #4
  10336c:	e8bd8800 	pop	{fp, pc}

00103370 <rt_memmove>:

void *rt_memmove(void *dest, const void *src, rt_ubase_t n)
{
  103370:	e92d4800 	push	{fp, lr}
  103374:	e28db004 	add	fp, sp, #4
  103378:	e24dd010 	sub	sp, sp, #16
  10337c:	e50b0008 	str	r0, [fp, #-8]
  103380:	e50b100c 	str	r1, [fp, #-12]
  103384:	e50b2010 	str	r2, [fp, #-16]
    return memmove(dest, src, n);
  103388:	e51b2010 	ldr	r2, [fp, #-16]
  10338c:	e51b100c 	ldr	r1, [fp, #-12]
  103390:	e51b0008 	ldr	r0, [fp, #-8]
  103394:	eb00f752 	bl	1410e4 <memmove>
  103398:	e1a03000 	mov	r3, r0
}
  10339c:	e1a00003 	mov	r0, r3
  1033a0:	e24bd004 	sub	sp, fp, #4
  1033a4:	e8bd8800 	pop	{fp, pc}

001033a8 <rt_tick_from_millisecond>:

rt_tick_t rt_tick_from_millisecond(rt_int32_t ms)
{
  1033a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1033ac:	e28db000 	add	fp, sp, #0
  1033b0:	e24dd014 	sub	sp, sp, #20
  1033b4:	e50b0010 	str	r0, [fp, #-16]
    rt_tick_t tick;

    if (ms < 0)
  1033b8:	e51b3010 	ldr	r3, [fp, #-16]
  1033bc:	e3530000 	cmp	r3, #0
  1033c0:	aa000002 	bge	1033d0 <rt_tick_from_millisecond+0x28>
    {
        tick = (rt_tick_t)RT_WAITING_FOREVER;
  1033c4:	e3e03000 	mvn	r3, #0
  1033c8:	e50b3008 	str	r3, [fp, #-8]
  1033cc:	ea000021 	b	103458 <rt_tick_from_millisecond+0xb0>
    }
    else
    {
        tick = RT_TICK_PER_SECOND * (ms / 1000);
  1033d0:	e51b1010 	ldr	r1, [fp, #-16]
  1033d4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1033d8:	e3413062 	movt	r3, #4194	; 0x1062
  1033dc:	e0c32391 	smull	r2, r3, r1, r3
  1033e0:	e1a02343 	asr	r2, r3, #6
  1033e4:	e1a03fc1 	asr	r3, r1, #31
  1033e8:	e0423003 	sub	r3, r2, r3
  1033ec:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1033f0:	e0030392 	mul	r3, r2, r3
  1033f4:	e50b3008 	str	r3, [fp, #-8]
        tick += (RT_TICK_PER_SECOND * (ms % 1000) + 999) / 1000;
  1033f8:	e51b2010 	ldr	r2, [fp, #-16]
  1033fc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  103400:	e3413062 	movt	r3, #4194	; 0x1062
  103404:	e0c10392 	smull	r0, r1, r2, r3
  103408:	e1a01341 	asr	r1, r1, #6
  10340c:	e1a03fc2 	asr	r3, r2, #31
  103410:	e0413003 	sub	r3, r1, r3
  103414:	e3a01ffa 	mov	r1, #1000	; 0x3e8
  103418:	e0030391 	mul	r3, r1, r3
  10341c:	e0423003 	sub	r3, r2, r3
  103420:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  103424:	e0030392 	mul	r3, r2, r3
  103428:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  10342c:	e2833003 	add	r3, r3, #3
  103430:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  103434:	e3412062 	movt	r2, #4194	; 0x1062
  103438:	e0c10293 	smull	r0, r1, r3, r2
  10343c:	e1a02341 	asr	r2, r1, #6
  103440:	e1a03fc3 	asr	r3, r3, #31
  103444:	e0423003 	sub	r3, r2, r3
  103448:	e1a02003 	mov	r2, r3
  10344c:	e51b3008 	ldr	r3, [fp, #-8]
  103450:	e0833002 	add	r3, r3, r2
  103454:	e50b3008 	str	r3, [fp, #-8]
    }

    /* return the calculated tick */
    return tick;
  103458:	e51b3008 	ldr	r3, [fp, #-8]
}
  10345c:	e1a00003 	mov	r0, r3
  103460:	e28bd000 	add	sp, fp, #0
  103464:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103468:	e12fff1e 	bx	lr

0010346c <rt_malloc_align>:
 * @param align the alignment size
 *
 * @return the allocated memory block on successful, otherwise returns RT_NULL
 */
void *rt_malloc_align(rt_size_t size, rt_size_t align)
{
  10346c:	e92d4800 	push	{fp, lr}
  103470:	e28db004 	add	fp, sp, #4
  103474:	e24dd018 	sub	sp, sp, #24
  103478:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10347c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    void *align_ptr;
    int uintptr_size;
    rt_size_t align_size;

    /* sizeof pointer */
    uintptr_size = sizeof(void*);
  103480:	e3a03004 	mov	r3, #4
  103484:	e50b3010 	str	r3, [fp, #-16]
    uintptr_size -= 1;
  103488:	e51b3010 	ldr	r3, [fp, #-16]
  10348c:	e2433001 	sub	r3, r3, #1
  103490:	e50b3010 	str	r3, [fp, #-16]

    /* align the alignment size to uintptr size byte */
    align = ((align + uintptr_size) & ~uintptr_size);
  103494:	e51b2010 	ldr	r2, [fp, #-16]
  103498:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10349c:	e0823003 	add	r3, r2, r3
  1034a0:	e51b2010 	ldr	r2, [fp, #-16]
  1034a4:	e1e02002 	mvn	r2, r2
  1034a8:	e0033002 	and	r3, r3, r2
  1034ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* get total aligned size */
    align_size = ((size + uintptr_size) & ~uintptr_size) + align;
  1034b0:	e51b2010 	ldr	r2, [fp, #-16]
  1034b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1034b8:	e0823003 	add	r3, r2, r3
  1034bc:	e51b2010 	ldr	r2, [fp, #-16]
  1034c0:	e1e02002 	mvn	r2, r2
  1034c4:	e0033002 	and	r3, r3, r2
  1034c8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1034cc:	e0823003 	add	r3, r2, r3
  1034d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* allocate memory block from heap */
    ptr = rt_malloc(align_size);
  1034d4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1034d8:	ebfffead 	bl	102f94 <rt_malloc>
  1034dc:	e50b0008 	str	r0, [fp, #-8]
    if (ptr != RT_NULL)
  1034e0:	e51b3008 	ldr	r3, [fp, #-8]
  1034e4:	e3530000 	cmp	r3, #0
  1034e8:	0a000019 	beq	103554 <rt_malloc_align+0xe8>
    {
        /* the allocated memory block is aligned */
        if (((rt_ubase_t)ptr & (align - 1)) == 0)
  1034ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1034f0:	e2432001 	sub	r2, r3, #1
  1034f4:	e51b3008 	ldr	r3, [fp, #-8]
  1034f8:	e0033002 	and	r3, r3, r2
  1034fc:	e3530000 	cmp	r3, #0
  103500:	1a000004 	bne	103518 <rt_malloc_align+0xac>
        {
            align_ptr = (void *)((rt_ubase_t)ptr + align);
  103504:	e51b2008 	ldr	r2, [fp, #-8]
  103508:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10350c:	e0823003 	add	r3, r2, r3
  103510:	e50b300c 	str	r3, [fp, #-12]
  103514:	ea000007 	b	103538 <rt_malloc_align+0xcc>
        }
        else
        {
            align_ptr = (void *)(((rt_ubase_t)ptr + (align - 1)) & ~(align - 1));
  103518:	e51b2008 	ldr	r2, [fp, #-8]
  10351c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103520:	e0823003 	add	r3, r2, r3
  103524:	e2432001 	sub	r2, r3, #1
  103528:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10352c:	e2633000 	rsb	r3, r3, #0
  103530:	e0033002 	and	r3, r3, r2
  103534:	e50b300c 	str	r3, [fp, #-12]
        }

        /* set the pointer before alignment pointer to the real pointer */
        *((rt_ubase_t *)((rt_ubase_t)align_ptr - sizeof(void *))) = (rt_ubase_t)ptr;
  103538:	e51b300c 	ldr	r3, [fp, #-12]
  10353c:	e2433004 	sub	r3, r3, #4
  103540:	e1a02003 	mov	r2, r3
  103544:	e51b3008 	ldr	r3, [fp, #-8]
  103548:	e5823000 	str	r3, [r2]

        ptr = align_ptr;
  10354c:	e51b300c 	ldr	r3, [fp, #-12]
  103550:	e50b3008 	str	r3, [fp, #-8]
    }

    return ptr;
  103554:	e51b3008 	ldr	r3, [fp, #-8]
}
  103558:	e1a00003 	mov	r0, r3
  10355c:	e24bd004 	sub	sp, fp, #4
  103560:	e8bd8800 	pop	{fp, pc}

00103564 <rt_free_align>:
 * rt_malloc_align function and address is aligned.
 *
 * @param ptr the memory block pointer
 */
void rt_free_align(void *ptr)
{
  103564:	e92d4800 	push	{fp, lr}
  103568:	e28db004 	add	fp, sp, #4
  10356c:	e24dd010 	sub	sp, sp, #16
  103570:	e50b0010 	str	r0, [fp, #-16]
    void *real_ptr;

    real_ptr = (void *) * (rt_ubase_t *)((rt_ubase_t)ptr - sizeof(void *));
  103574:	e51b3010 	ldr	r3, [fp, #-16]
  103578:	e2433004 	sub	r3, r3, #4
  10357c:	e5933000 	ldr	r3, [r3]
  103580:	e50b3008 	str	r3, [fp, #-8]
    rt_free(real_ptr);
  103584:	e51b0008 	ldr	r0, [fp, #-8]
  103588:	ebfffe8b 	bl	102fbc <rt_free>
}
  10358c:	e320f000 	nop	{0}
  103590:	e24bd004 	sub	sp, fp, #4
  103594:	e8bd8800 	pop	{fp, pc}

00103598 <rt_assert_handler>:

void rt_assert_handler(const char *ex_string, const char *func, rt_size_t line)
{
  103598:	e92d4800 	push	{fp, lr}
  10359c:	e28db004 	add	fp, sp, #4
  1035a0:	e24dd010 	sub	sp, sp, #16
  1035a4:	e50b0008 	str	r0, [fp, #-8]
  1035a8:	e50b100c 	str	r1, [fp, #-12]
  1035ac:	e50b2010 	str	r2, [fp, #-16]
    printf("UserAPP: (%s) assertion failed at function:%s, line number:%d \n", ex_string, func, (int)line);
  1035b0:	e51b3010 	ldr	r3, [fp, #-16]
  1035b4:	e51b200c 	ldr	r2, [fp, #-12]
  1035b8:	e51b1008 	ldr	r1, [fp, #-8]
  1035bc:	e30504b0 	movw	r0, #21680	; 0x54b0
  1035c0:	e3400014 	movt	r0, #20
  1035c4:	eb00ebfd 	bl	13e5c0 <printf>
    exit(-1);
  1035c8:	e3e00000 	mvn	r0, #0
  1035cc:	eb00d68b 	bl	139000 <exit>

001035d0 <channel_cmd_send>:
    /* Watch this, we use a void pointer to transfer the returned value. */
    return chn_msg.u.d;
}

rt_inline void channel_cmd_send(int channel, void *cmd)
{
  1035d0:	e92d4800 	push	{fp, lr}
  1035d4:	e28db004 	add	fp, sp, #4
  1035d8:	e24dd018 	sub	sp, sp, #24
  1035dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1035e0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  1035e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1035e8:	e3530000 	cmp	r3, #0
  1035ec:	aa000005 	bge	103608 <channel_cmd_send+0x38>
  1035f0:	e3a0201a 	mov	r2, #26
  1035f4:	e305183c 	movw	r1, #22588	; 0x583c
  1035f8:	e3401014 	movt	r1, #20
  1035fc:	e30504f0 	movw	r0, #21744	; 0x54f0
  103600:	e3400014 	movt	r0, #20
  103604:	ebffffe3 	bl	103598 <rt_assert_handler>

    /* wrap the command and data into an IPC message */
    struct rt_channel_msg chn_msg;
    chn_msg.type   = RT_CHANNEL_RAW;
  103608:	e3a03000 	mov	r3, #0
  10360c:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d    = cmd;
  103610:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103614:	e50b300c 	str	r3, [fp, #-12]

    /* send the command and not wait for the result */
    rt_channel_send(channel, &chn_msg);
  103618:	e24b3014 	sub	r3, fp, #20
  10361c:	e1a01003 	mov	r1, r3
  103620:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103624:	ebfff2f6 	bl	100204 <rt_channel_send>
}
  103628:	e320f000 	nop	{0}
  10362c:	e24bd004 	sub	sp, fp, #4
  103630:	e8bd8800 	pop	{fp, pc}

00103634 <channel_cmd_recv>:

rt_inline void *channel_cmd_recv(int channel)
{
  103634:	e92d4800 	push	{fp, lr}
  103638:	e28db004 	add	fp, sp, #4
  10363c:	e24dd018 	sub	sp, sp, #24
  103640:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  103644:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103648:	e3530000 	cmp	r3, #0
  10364c:	aa000005 	bge	103668 <channel_cmd_recv+0x34>
  103650:	e3a02027 	mov	r2, #39	; 0x27
  103654:	e3051814 	movw	r1, #22548	; 0x5814
  103658:	e3401014 	movt	r1, #20
  10365c:	e30504f0 	movw	r0, #21744	; 0x54f0
  103660:	e3400014 	movt	r0, #20
  103664:	ebffffcb 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  103668:	e3a03000 	mov	r3, #0
  10366c:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  103670:	e24b3014 	sub	r3, fp, #20
  103674:	e1a01003 	mov	r1, r3
  103678:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10367c:	ebfff2fa 	bl	10026c <rt_channel_recv>

    return chn_msg.u.d;
  103680:	e51b300c 	ldr	r3, [fp, #-12]
}
  103684:	e1a00003 	mov	r0, r3
  103688:	e24bd004 	sub	sp, fp, #4
  10368c:	e8bd8800 	pop	{fp, pc}

00103690 <channel_cmd_reply>:

rt_inline void channel_cmd_reply(int channel, void *cmd)
{
  103690:	e92d4800 	push	{fp, lr}
  103694:	e28db004 	add	fp, sp, #4
  103698:	e24dd018 	sub	sp, sp, #24
  10369c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1036a0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  1036a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1036a8:	e3530000 	cmp	r3, #0
  1036ac:	aa000005 	bge	1036c8 <channel_cmd_reply+0x38>
  1036b0:	e3a02032 	mov	r2, #50	; 0x32
  1036b4:	e3051828 	movw	r1, #22568	; 0x5828
  1036b8:	e3401014 	movt	r1, #20
  1036bc:	e30504f0 	movw	r0, #21744	; 0x54f0
  1036c0:	e3400014 	movt	r0, #20
  1036c4:	ebffffb3 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  1036c8:	e3a03000 	mov	r3, #0
  1036cc:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d = cmd;
  1036d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1036d4:	e50b300c 	str	r3, [fp, #-12]

    rt_channel_reply(channel, &chn_msg);
  1036d8:	e24b3014 	sub	r3, fp, #20
  1036dc:	e1a01003 	mov	r1, r3
  1036e0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1036e4:	ebfff2d3 	bl	100238 <rt_channel_reply>
}
  1036e8:	e320f000 	nop	{0}
  1036ec:	e24bd004 	sub	sp, fp, #4
  1036f0:	e8bd8800 	pop	{fp, pc}

001036f4 <stack_init>:
 *  0: initialization completes successfully, further actions can be carried on
 *  1: initialization has been done before, we could do anything but another
 *  initialization
 */
int stack_init(void)
{
  1036f4:	e92d4800 	push	{fp, lr}
  1036f8:	e28db004 	add	fp, sp, #4
    /* stack channel as a flag whether the stack has been initialized */
    stack_channel = rt_channel_open(chn_name, O_CREAT);
  1036fc:	e30d3014 	movw	r3, #53268	; 0xd014
  103700:	e3403014 	movt	r3, #20
  103704:	e5933000 	ldr	r3, [r3]
  103708:	e3a01040 	mov	r1, #64	; 0x40
  10370c:	e1a00003 	mov	r0, r3
  103710:	ebfff280 	bl	100118 <rt_channel_open>
  103714:	e1a02000 	mov	r2, r0
  103718:	e30d3010 	movw	r3, #53264	; 0xd010
  10371c:	e3403014 	movt	r3, #20
  103720:	e5832000 	str	r2, [r3]
    if (stack_channel < 0) return 1;    /* initialization has been done */
  103724:	e30d3010 	movw	r3, #53264	; 0xd010
  103728:	e3403014 	movt	r3, #20
  10372c:	e5933000 	ldr	r3, [r3]
  103730:	e3530000 	cmp	r3, #0
  103734:	aa000001 	bge	103740 <stack_init+0x4c>
  103738:	e3a03001 	mov	r3, #1
  10373c:	ea000001 	b	103748 <stack_init+0x54>
    //     printf("attach stack failed!\n");
    //     goto close_unet_channel;
    // }

    /* start the TCPIP thread */
    lwip_system_init();
  103740:	eb001be5 	bl	10a6dc <lwip_system_init>
    return 0;
  103744:	e3a03000 	mov	r3, #0
//     data_channel = -1;
// close_stack_channel:
//     rt_channel_close(stack_channel);
//     stack_channel = -1;
//     return -1;      /* initialization fails */
}
  103748:	e1a00003 	mov	r0, r3
  10374c:	e8bd8800 	pop	{fp, pc}

00103750 <stack_run>:
};
extern struct lwip_sock *lwip_tryget_socket(int s);
extern struct lwip_sock * get_socket(int s);
extern int access_is_blocking(u32_t flags, struct lwip_sock *sock);
int stack_run(void)
{
  103750:	e92d4800 	push	{fp, lr}
  103754:	e28db004 	add	fp, sp, #4
  103758:	e24dd050 	sub	sp, sp, #80	; 0x50
    // struct lwip_sock *sock = RT_NULL;

    /* run stack event loop */
    while (1)
    {
        int shmid = (int)(size_t)channel_cmd_recv(stack_channel);
  10375c:	e30d3010 	movw	r3, #53264	; 0xd010
  103760:	e3403014 	movt	r3, #20
  103764:	e5933000 	ldr	r3, [r3]
  103768:	e1a00003 	mov	r0, r3
  10376c:	ebffffb0 	bl	103634 <channel_cmd_recv>
  103770:	e1a03000 	mov	r3, r0
  103774:	e50b300c 	str	r3, [fp, #-12]
        if (shmid >= 0)
  103778:	e51b300c 	ldr	r3, [fp, #-12]
  10377c:	e3530000 	cmp	r3, #0
  103780:	ba000124 	blt	103c18 <stack_run+0x4c8>
        {
            cmd = lwp_shmat(shmid, NULL);
  103784:	e3a01000 	mov	r1, #0
  103788:	e51b000c 	ldr	r0, [fp, #-12]
  10378c:	ebfff9df 	bl	101f10 <lwp_shmat>
  103790:	e50b0010 	str	r0, [fp, #-16]
            if (!cmd)
  103794:	e51b3010 	ldr	r3, [fp, #-16]
  103798:	e3530000 	cmp	r3, #0
  10379c:	1a000002 	bne	1037ac <stack_run+0x5c>
            {
                lwp_shmrm(shmid);
  1037a0:	e51b000c 	ldr	r0, [fp, #-12]
  1037a4:	ebfff9ce 	bl	101ee4 <lwp_shmrm>
                continue;
  1037a8:	ea00011d 	b	103c24 <stack_run+0x4d4>
            }

            switch (cmd->cmd)
  1037ac:	e51b3010 	ldr	r3, [fp, #-16]
  1037b0:	e5933000 	ldr	r3, [r3]
  1037b4:	e2433014 	sub	r3, r3, #20
  1037b8:	e3530009 	cmp	r3, #9
  1037bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1037c0:	ea000116 	b	103c20 <stack_run+0x4d0>
  1037c4:	001037ec 	.word	0x001037ec
  1037c8:	00103c20 	.word	0x00103c20
  1037cc:	0010384c 	.word	0x0010384c
  1037d0:	001038b0 	.word	0x001038b0
  1037d4:	001038fc 	.word	0x001038fc
  1037d8:	00103960 	.word	0x00103960
  1037dc:	001039bc 	.word	0x001039bc
  1037e0:	00103ac8 	.word	0x00103ac8
  1037e4:	00103c20 	.word	0x00103c20
  1037e8:	00103b94 	.word	0x00103b94
            {
            /* handle socket requests */
            case UNET_SRV_CMD_SOCKET:
                domain = (int)(size_t)cmd->argv[0];
  1037ec:	e51b3010 	ldr	r3, [fp, #-16]
  1037f0:	e5933004 	ldr	r3, [r3, #4]
  1037f4:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
                type = (int)(size_t)cmd->argv[1];
  1037f8:	e51b3010 	ldr	r3, [fp, #-16]
  1037fc:	e5933008 	ldr	r3, [r3, #8]
  103800:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8
                protocol = (int)(size_t)cmd->argv[2];
  103804:	e51b3010 	ldr	r3, [fp, #-16]
  103808:	e593300c 	ldr	r3, [r3, #12]
  10380c:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
                socket = socket_internal(domain, type, protocol);
  103810:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
  103814:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  103818:	e51b0044 	ldr	r0, [fp, #-68]	; 0xffffffbc
  10381c:	eb001823 	bl	1098b0 <socket_internal>
  103820:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
                lwp_shmdt(cmd);
  103824:	e51b0010 	ldr	r0, [fp, #-16]
  103828:	ebfff9c5 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)socket);
  10382c:	e30d3010 	movw	r3, #53264	; 0xd010
  103830:	e3403014 	movt	r3, #20
  103834:	e5933000 	ldr	r3, [r3]
  103838:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10383c:	e1a01002 	mov	r1, r2
  103840:	e1a00003 	mov	r0, r3
  103844:	ebffff91 	bl	103690 <channel_cmd_reply>
                break;
  103848:	ea0000f5 	b	103c24 <stack_run+0x4d4>
            //     lwp_shmdt(cmd);
            //     channel_cmd_reply(stack_channel, (void *)(size_t)result);
            //     break;

            case UNET_SRV_CMD_BIND:
                socket = (int)(size_t)cmd->argv[0];
  10384c:	e51b3010 	ldr	r3, [fp, #-16]
  103850:	e5933004 	ldr	r3, [r3, #4]
  103854:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103858:	e51b3010 	ldr	r3, [fp, #-16]
  10385c:	e283301c 	add	r3, r3, #28
  103860:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  103864:	e51b3010 	ldr	r3, [fp, #-16]
  103868:	e5933008 	ldr	r3, [r3, #8]
  10386c:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = bind_internal(socket, psockaddr, len);
  103870:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  103874:	e1a02003 	mov	r2, r3
  103878:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  10387c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103880:	eb001768 	bl	109628 <bind_internal>
  103884:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103888:	e51b0010 	ldr	r0, [fp, #-16]
  10388c:	ebfff9ac 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103890:	e30d3010 	movw	r3, #53264	; 0xd010
  103894:	e3403014 	movt	r3, #20
  103898:	e5933000 	ldr	r3, [r3]
  10389c:	e51b2008 	ldr	r2, [fp, #-8]
  1038a0:	e1a01002 	mov	r1, r2
  1038a4:	e1a00003 	mov	r0, r3
  1038a8:	ebffff78 	bl	103690 <channel_cmd_reply>
                break;
  1038ac:	ea0000dc 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_LISTEN:
                socket = (int)(size_t)cmd->argv[0];
  1038b0:	e51b3010 	ldr	r3, [fp, #-16]
  1038b4:	e5933004 	ldr	r3, [r3, #4]
  1038b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

                result = listen_internal(socket, (int)(size_t)cmd->argv[1]);
  1038bc:	e51b3010 	ldr	r3, [fp, #-16]
  1038c0:	e5933008 	ldr	r3, [r3, #8]
  1038c4:	e1a01003 	mov	r1, r3
  1038c8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1038cc:	eb00178c 	bl	109704 <listen_internal>
  1038d0:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  1038d4:	e51b0010 	ldr	r0, [fp, #-16]
  1038d8:	ebfff999 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  1038dc:	e30d3010 	movw	r3, #53264	; 0xd010
  1038e0:	e3403014 	movt	r3, #20
  1038e4:	e5933000 	ldr	r3, [r3]
  1038e8:	e51b2008 	ldr	r2, [fp, #-8]
  1038ec:	e1a01002 	mov	r1, r2
  1038f0:	e1a00003 	mov	r0, r3
  1038f4:	ebffff65 	bl	103690 <channel_cmd_reply>
                break;
  1038f8:	ea0000c9 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_CONNECT:
                socket = (int)(size_t)cmd->argv[0];
  1038fc:	e51b3010 	ldr	r3, [fp, #-16]
  103900:	e5933004 	ldr	r3, [r3, #4]
  103904:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103908:	e51b3010 	ldr	r3, [fp, #-16]
  10390c:	e283301c 	add	r3, r3, #28
  103910:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  103914:	e51b3010 	ldr	r3, [fp, #-16]
  103918:	e5933008 	ldr	r3, [r3, #8]
  10391c:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = connect_internal(socket, psockaddr, len);
  103920:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  103924:	e1a02003 	mov	r2, r3
  103928:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  10392c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103930:	eb00174d 	bl	10966c <connect_internal>
  103934:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103938:	e51b0010 	ldr	r0, [fp, #-16]
  10393c:	ebfff980 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103940:	e30d3010 	movw	r3, #53264	; 0xd010
  103944:	e3403014 	movt	r3, #20
  103948:	e5933000 	ldr	r3, [r3]
  10394c:	e51b2008 	ldr	r2, [fp, #-8]
  103950:	e1a01002 	mov	r1, r2
  103954:	e1a00003 	mov	r0, r3
  103958:	ebffff4c 	bl	103690 <channel_cmd_reply>
                break;
  10395c:	ea0000b0 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_ACCEPT:
                socket = (int)(size_t)cmd->argv[0];
  103960:	e51b3010 	ldr	r3, [fp, #-16]
  103964:	e5933004 	ldr	r3, [r3, #4]
  103968:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  10396c:	e51b3010 	ldr	r3, [fp, #-16]
  103970:	e283301c 	add	r3, r3, #28
  103974:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                result = accept_internal(socket, psockaddr, (socklen_t *)&cmd->argv[1]);
  103978:	e51b3010 	ldr	r3, [fp, #-16]
  10397c:	e2833008 	add	r3, r3, #8
  103980:	e1a02003 	mov	r2, r3
  103984:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  103988:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10398c:	eb0016bd 	bl	109488 <accept_internal>
  103990:	e50b0008 	str	r0, [fp, #-8]
                lwp_shmdt(cmd);
  103994:	e51b0010 	ldr	r0, [fp, #-16]
  103998:	ebfff969 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  10399c:	e30d3010 	movw	r3, #53264	; 0xd010
  1039a0:	e3403014 	movt	r3, #20
  1039a4:	e5933000 	ldr	r3, [r3]
  1039a8:	e51b2008 	ldr	r2, [fp, #-8]
  1039ac:	e1a01002 	mov	r1, r2
  1039b0:	e1a00003 	mov	r0, r3
  1039b4:	ebffff35 	bl	103690 <channel_cmd_reply>
                break;
  1039b8:	ea000099 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_SENDTO:
                socket = (int)(size_t)cmd->argv[0];
  1039bc:	e51b3010 	ldr	r3, [fp, #-16]
  1039c0:	e5933004 	ldr	r3, [r3, #4]
  1039c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  1039c8:	e51b3010 	ldr	r3, [fp, #-16]
  1039cc:	e5933008 	ldr	r3, [r3, #8]
  1039d0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  1039d4:	e51b3010 	ldr	r3, [fp, #-16]
  1039d8:	e593300c 	ldr	r3, [r3, #12]
  1039dc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                tolen = (int)(size_t)cmd->argv[3];
  1039e0:	e51b3010 	ldr	r3, [fp, #-16]
  1039e4:	e5933010 	ldr	r3, [r3, #16]
  1039e8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  1039ec:	e51b3010 	ldr	r3, [fp, #-16]
  1039f0:	e283301c 	add	r3, r3, #28
  1039f4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                lwip_send_count++;
  1039f8:	e30d3424 	movw	r3, #54308	; 0xd424
  1039fc:	e3403014 	movt	r3, #20
  103a00:	e5933000 	ldr	r3, [r3]
  103a04:	e2832001 	add	r2, r3, #1
  103a08:	e30d3424 	movw	r3, #54308	; 0xd424
  103a0c:	e3403014 	movt	r3, #20
  103a10:	e5832000 	str	r2, [r3]
                if(tolen  == 0)
  103a14:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  103a18:	e3530000 	cmp	r3, #0
  103a1c:	1a000006 	bne	103a3c <stack_run+0x2ec>
                {
                    result = send_internal(socket, data, size, flags);
  103a20:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103a24:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103a28:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103a2c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103a30:	eb001770 	bl	1097f8 <send_internal>
  103a34:	e50b0008 	str	r0, [fp, #-8]
  103a38:	ea00000f 	b	103a7c <stack_run+0x32c>
                }
                else
                {
                    psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  103a3c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103a40:	e283301c 	add	r3, r3, #28
  103a44:	e51b2010 	ldr	r2, [fp, #-16]
  103a48:	e0823003 	add	r3, r2, r3
  103a4c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = sendto_internal(socket, data, size, flags, psockaddr, tolen);
  103a50:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  103a54:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  103a58:	e58d3004 	str	r3, [sp, #4]
  103a5c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  103a60:	e58d3000 	str	r3, [sp]
  103a64:	e1a03002 	mov	r3, r2
  103a68:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103a6c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103a70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103a74:	eb001776 	bl	109854 <sendto_internal>
  103a78:	e50b0008 	str	r0, [fp, #-8]
                }
                if(result <= 0)
  103a7c:	e51b3008 	ldr	r3, [fp, #-8]
  103a80:	e3530000 	cmp	r3, #0
  103a84:	ca000005 	bgt	103aa0 <stack_run+0x350>
                {
                    rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  103a88:	e3a02f53 	mov	r2, #332	; 0x14c
  103a8c:	e3051808 	movw	r1, #22536	; 0x5808
  103a90:	e3401014 	movt	r1, #20
  103a94:	e3050510 	movw	r0, #21776	; 0x5510
  103a98:	e3400014 	movt	r0, #20
  103a9c:	ebfffd9c 	bl	103114 <rt_kprintf>
                }
                lwp_shmdt(cmd);
  103aa0:	e51b0010 	ldr	r0, [fp, #-16]
  103aa4:	ebfff926 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103aa8:	e30d3010 	movw	r3, #53264	; 0xd010
  103aac:	e3403014 	movt	r3, #20
  103ab0:	e5933000 	ldr	r3, [r3]
  103ab4:	e51b2008 	ldr	r2, [fp, #-8]
  103ab8:	e1a01002 	mov	r1, r2
  103abc:	e1a00003 	mov	r0, r3
  103ac0:	ebfffef2 	bl	103690 <channel_cmd_reply>
                break;
  103ac4:	ea000056 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_RECVFROM:
                socket = (int)(size_t)cmd->argv[0];
  103ac8:	e51b3010 	ldr	r3, [fp, #-16]
  103acc:	e5933004 	ldr	r3, [r3, #4]
  103ad0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  103ad4:	e51b3010 	ldr	r3, [fp, #-16]
  103ad8:	e5933008 	ldr	r3, [r3, #8]
  103adc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  103ae0:	e51b3010 	ldr	r3, [fp, #-16]
  103ae4:	e593300c 	ldr	r3, [r3, #12]
  103ae8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                fromlen = (socklen_t*)cmd->argv[3];
  103aec:	e51b3010 	ldr	r3, [fp, #-16]
  103af0:	e5933010 	ldr	r3, [r3, #16]
  103af4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103af8:	e51b3010 	ldr	r3, [fp, #-16]
  103afc:	e283301c 	add	r3, r3, #28
  103b00:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                if(fromlen == RT_NULL)
  103b04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103b08:	e3530000 	cmp	r3, #0
  103b0c:	1a000006 	bne	103b2c <stack_run+0x3dc>
                {
                    result = recv_internal(socket, data, size, flags);
  103b10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103b14:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103b18:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103b1c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103b20:	eb001706 	bl	109740 <recv_internal>
  103b24:	e50b0008 	str	r0, [fp, #-8]
  103b28:	ea00000f 	b	103b6c <stack_run+0x41c>
                }
                else
                {
                    psockaddr =  (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  103b2c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103b30:	e283301c 	add	r3, r3, #28
  103b34:	e51b2010 	ldr	r2, [fp, #-16]
  103b38:	e0823003 	add	r3, r2, r3
  103b3c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = recvfrom_internal(socket, data, size, flags , psockaddr, fromlen);
  103b40:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  103b44:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103b48:	e58d3004 	str	r3, [sp, #4]
  103b4c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  103b50:	e58d3000 	str	r3, [sp]
  103b54:	e1a03002 	mov	r3, r2
  103b58:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103b5c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103b60:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103b64:	eb00170c 	bl	10979c <recvfrom_internal>
  103b68:	e50b0008 	str	r0, [fp, #-8]
                }

                lwp_shmdt(cmd);
  103b6c:	e51b0010 	ldr	r0, [fp, #-16]
  103b70:	ebfff8f3 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103b74:	e30d3010 	movw	r3, #53264	; 0xd010
  103b78:	e3403014 	movt	r3, #20
  103b7c:	e5933000 	ldr	r3, [r3]
  103b80:	e51b2008 	ldr	r2, [fp, #-8]
  103b84:	e1a01002 	mov	r1, r2
  103b88:	e1a00003 	mov	r0, r3
  103b8c:	ebfffebf 	bl	103690 <channel_cmd_reply>
                break;
  103b90:	ea000023 	b	103c24 <stack_run+0x4d4>
            //     channel_cmd_reply(stack_channel, (void *)(size_t)result);
            //     break;

            case UNET_SRV_CMD_SETSOCKOPT:
            {
                socket = (int)(size_t)cmd->argv[0];
  103b94:	e51b3010 	ldr	r3, [fp, #-16]
  103b98:	e5933004 	ldr	r3, [r3, #4]
  103b9c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                int level = (int)(size_t)cmd->argv[1];
  103ba0:	e51b3010 	ldr	r3, [fp, #-16]
  103ba4:	e5933008 	ldr	r3, [r3, #8]
  103ba8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                int opt = (int)(size_t)cmd->argv[2];
  103bac:	e51b3010 	ldr	r3, [fp, #-16]
  103bb0:	e593300c 	ldr	r3, [r3, #12]
  103bb4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                socklen = (socklen_t)(size_t)cmd->argv[3];
  103bb8:	e51b3010 	ldr	r3, [fp, #-16]
  103bbc:	e5933010 	ldr	r3, [r3, #16]
  103bc0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                void *optval =  (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103bc4:	e51b3010 	ldr	r3, [fp, #-16]
  103bc8:	e283301c 	add	r3, r3, #28
  103bcc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

                result = setsockopt_internal(socket, level, opt, optval, socklen);
  103bd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  103bd4:	e58d3000 	str	r3, [sp]
  103bd8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  103bdc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  103be0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  103be4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103be8:	eb0016b0 	bl	1096b0 <setsockopt_internal>
  103bec:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103bf0:	e51b0010 	ldr	r0, [fp, #-16]
  103bf4:	ebfff8d2 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103bf8:	e30d3010 	movw	r3, #53264	; 0xd010
  103bfc:	e3403014 	movt	r3, #20
  103c00:	e5933000 	ldr	r3, [r3]
  103c04:	e51b2008 	ldr	r2, [fp, #-8]
  103c08:	e1a01002 	mov	r1, r2
  103c0c:	e1a00003 	mov	r0, r3
  103c10:	ebfffe9e 	bl	103690 <channel_cmd_reply>
                break;
  103c14:	ea000002 	b	103c24 <stack_run+0x4d4>
    //             break;

            default :
                break;
            }
        }
  103c18:	e320f000 	nop	{0}
  103c1c:	eafffece 	b	10375c <stack_run+0xc>
                break;
  103c20:	e320f000 	nop	{0}
    {
  103c24:	eafffecc 	b	10375c <stack_run+0xc>

00103c28 <lwipkit_status>:

    return 0;
}

static void lwipkit_status(void)
{
  103c28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  103c2c:	e28db000 	add	fp, sp, #0
}
  103c30:	e320f000 	nop	{0}
  103c34:	e28bd000 	add	sp, fp, #0
  103c38:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103c3c:	e12fff1e 	bx	lr

00103c40 <lwipkit_usage>:

/* lwIPKit initialization should be done once at most */
static void lwipkit_usage(void)
{
  103c40:	e92d4800 	push	{fp, lr}
  103c44:	e28db004 	add	fp, sp, #4
    printf("lwIPKit Usage:\n"
  103c48:	e305052c 	movw	r0, #21804	; 0x552c
  103c4c:	e3400014 	movt	r0, #20
  103c50:	eb00ea68 	bl	13e5f8 <puts>
            "\tlwIPKit               :  run lwIPKit, wait for ethdev to attach\n"
            "\tlwIPKit attach   <eth>:  attach the device <eth> to lwIPKit\n"
            "\tlwIPKit deattach <eth>:  de-attach the device <eth> from lwIPKit\n"
            "\tlwIPKit default  <eth>:  set <eth> as the default device\n"
            "\tlwIPKit status        :  show the status of running lwIPKIt\n");
}
  103c54:	e320f000 	nop	{0}
  103c58:	e8bd8800 	pop	{fp, pc}

00103c5c <main>:

/* entry point */
extern void sal_init(void);
extern int dfs_init(void);
int main(int argc, char **argv)
{
  103c5c:	e92d4810 	push	{r4, fp, lr}
  103c60:	e28db008 	add	fp, sp, #8
  103c64:	e24dd034 	sub	sp, sp, #52	; 0x34
  103c68:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  103c6c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    int initialized = 0;
  103c70:	e3a03000 	mov	r3, #0
  103c74:	e50b3010 	str	r3, [fp, #-16]

    int data_channel = -1;  /* local variable, not the global one */
  103c78:	e3e03000 	mvn	r3, #0
  103c7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    int shmid = -1;
  103c80:	e3e03000 	mvn	r3, #0
  103c84:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    struct channel_cmd *cmd = NULL;
  103c88:	e3a03000 	mov	r3, #0
  103c8c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* no arguments, we want to run lwIPKit as a server */
    if (argc < 2)
  103c90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103c94:	e3530001 	cmp	r3, #1
  103c98:	ca000035 	bgt	103d74 <main+0x118>
    {        
        printf("lwIPKit: starts to run as the server");
  103c9c:	e3050674 	movw	r0, #22132	; 0x5674
  103ca0:	e3400014 	movt	r0, #20
  103ca4:	eb00ea45 	bl	13e5c0 <printf>
        initialized = stack_init();
  103ca8:	ebfffe91 	bl	1036f4 <stack_init>
  103cac:	e50b0010 	str	r0, [fp, #-16]
        if (initialized < 0)
  103cb0:	e51b3010 	ldr	r3, [fp, #-16]
  103cb4:	e3530000 	cmp	r3, #0
  103cb8:	aa000004 	bge	103cd0 <main+0x74>
        {
            printf(" ...failed!\n");
  103cbc:	e305069c 	movw	r0, #22172	; 0x569c
  103cc0:	e3400014 	movt	r0, #20
  103cc4:	eb00ea4b 	bl	13e5f8 <puts>
            return -1;
  103cc8:	e3e03000 	mvn	r3, #0
  103ccc:	ea0000f7 	b	1040b0 <main+0x454>
        }
        else if (initialized > 0)   /* valid lwIPKit process exists */
  103cd0:	e51b3010 	ldr	r3, [fp, #-16]
  103cd4:	e3530000 	cmp	r3, #0
  103cd8:	da000004 	ble	103cf0 <main+0x94>
        {
            printf(" ...skipped! Already initialized\n");
  103cdc:	e30506a8 	movw	r0, #22184	; 0x56a8
  103ce0:	e3400014 	movt	r0, #20
  103ce4:	eb00ea43 	bl	13e5f8 <puts>
            return 0;
  103ce8:	e3a03000 	mov	r3, #0
  103cec:	ea0000ef 	b	1040b0 <main+0x454>
        }
        else
        {
            // netdev_list_init();
            printf(" ...succeeded!\n");
  103cf0:	e30506cc 	movw	r0, #22220	; 0x56cc
  103cf4:	e3400014 	movt	r0, #20
  103cf8:	eb00ea3e 	bl	13e5f8 <puts>

            // rt_thread_t tid = rt_thread_create("ipdata", stack_data_input, NULL, 8192,
            //     25, 10);            /* handle the input data */
            // if (tid) rt_thread_startup(tid);

            printf("lwIPKit: init eth dev...");
  103cfc:	e30506dc 	movw	r0, #22236	; 0x56dc
  103d00:	e3400014 	movt	r0, #20
  103d04:	eb00ea2d 	bl	13e5c0 <printf>
            const char * eth_name;
            initialized = imx6ul_eth_init(0, &eth_name);
  103d08:	e24b3024 	sub	r3, fp, #36	; 0x24
  103d0c:	e1a01003 	mov	r1, r3
  103d10:	e3a00000 	mov	r0, #0
  103d14:	eb00c6b2 	bl	1357e4 <imx6ul_eth_init>
  103d18:	e50b0010 	str	r0, [fp, #-16]
            if (initialized < 0)
  103d1c:	e51b3010 	ldr	r3, [fp, #-16]
  103d20:	e3530000 	cmp	r3, #0
  103d24:	aa000004 	bge	103d3c <main+0xe0>
            {
                printf(" ...failed!\n");
  103d28:	e305069c 	movw	r0, #22172	; 0x569c
  103d2c:	e3400014 	movt	r0, #20
  103d30:	eb00ea30 	bl	13e5f8 <puts>
                return -1;
  103d34:	e3e03000 	mvn	r3, #0
  103d38:	ea0000dc 	b	1040b0 <main+0x454>
            }
            else if (initialized > 0)   /* valid lwIPKit process exists */
  103d3c:	e51b3010 	ldr	r3, [fp, #-16]
  103d40:	e3530000 	cmp	r3, #0
  103d44:	da000004 	ble	103d5c <main+0x100>
            {
                printf(" ...skipped! Already initialized\n");
  103d48:	e30506a8 	movw	r0, #22184	; 0x56a8
  103d4c:	e3400014 	movt	r0, #20
  103d50:	eb00ea28 	bl	13e5f8 <puts>
                return 0;
  103d54:	e3a03000 	mov	r3, #0
  103d58:	ea0000d4 	b	1040b0 <main+0x454>
            } 
            else 
            {
                printf("succeeded\n");
  103d5c:	e30506f8 	movw	r0, #22264	; 0x56f8
  103d60:	e3400014 	movt	r0, #20
  103d64:	eb00ea23 	bl	13e5f8 <puts>
                dfs_init();
  103d68:	eb001730 	bl	109a30 <dfs_init>
                sal_init();
  103d6c:	eb000c20 	bl	106df4 <sal_init>
                // netdev_init(eth_name);
            }

            stack_run();            /* handle network requests, never return */
  103d70:	ebfffe76 	bl	103750 <stack_run>
        }
    }

    /* attach the device */
    if (argc >= 3 && strncmp(argv[1], "attach", 6) == 0)
  103d74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103d78:	e3530002 	cmp	r3, #2
  103d7c:	da000050 	ble	103ec4 <main+0x268>
  103d80:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103d84:	e2833004 	add	r3, r3, #4
  103d88:	e5933000 	ldr	r3, [r3]
  103d8c:	e3a02006 	mov	r2, #6
  103d90:	e3051704 	movw	r1, #22276	; 0x5704
  103d94:	e3401014 	movt	r1, #20
  103d98:	e1a00003 	mov	r0, r3
  103d9c:	eb00f5f3 	bl	141570 <strncmp>
  103da0:	e1a03000 	mov	r3, r0
  103da4:	e3530000 	cmp	r3, #0
  103da8:	1a000045 	bne	103ec4 <main+0x268>
    {
        int static_ip = 0;
  103dac:	e3a03000 	mov	r3, #0
  103db0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
        printf("lwIPKit: attach device %s\n", argv[2]);
  103db4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103db8:	e2833008 	add	r3, r3, #8
  103dbc:	e5933000 	ldr	r3, [r3]
  103dc0:	e1a01003 	mov	r1, r3
  103dc4:	e305070c 	movw	r0, #22284	; 0x570c
  103dc8:	e3400014 	movt	r0, #20
  103dcc:	eb00e9fb 	bl	13e5c0 <printf>

        data_channel = rt_channel_open(data_name, O_RDWR);
  103dd0:	e30d3018 	movw	r3, #53272	; 0xd018
  103dd4:	e3403014 	movt	r3, #20
  103dd8:	e5933000 	ldr	r3, [r3]
  103ddc:	e3a01002 	mov	r1, #2
  103de0:	e1a00003 	mov	r0, r3
  103de4:	ebfff0cb 	bl	100118 <rt_channel_open>
  103de8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (data_channel < 0)
  103dec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103df0:	e3530000 	cmp	r3, #0
  103df4:	aa000004 	bge	103e0c <main+0x1b0>
        {
            printf("cannot open data_channel, please make sure lwIPKit server is running!\n");
  103df8:	e3050728 	movw	r0, #22312	; 0x5728
  103dfc:	e3400014 	movt	r0, #20
  103e00:	eb00e9fc 	bl	13e5f8 <puts>
            return -1;
  103e04:	e3e03000 	mvn	r3, #0
  103e08:	ea0000a8 	b	1040b0 <main+0x454>
        }

        shmid = channel_compose_cmd1(UNET_NETDEV_REQ_ATTACH, (void *)(size_t)static_ip, strlen(argv[2]) + 1);
  103e0c:	e51b4020 	ldr	r4, [fp, #-32]	; 0xffffffe0
  103e10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103e14:	e2833008 	add	r3, r3, #8
  103e18:	e5933000 	ldr	r3, [r3]
  103e1c:	e1a00003 	mov	r0, r3
  103e20:	eb00f5a6 	bl	1414c0 <strlen>
  103e24:	e1a03000 	mov	r3, r0
  103e28:	e2833001 	add	r3, r3, #1
  103e2c:	e58d300c 	str	r3, [sp, #12]
  103e30:	e3a03000 	mov	r3, #0
  103e34:	e58d3008 	str	r3, [sp, #8]
  103e38:	e3a03000 	mov	r3, #0
  103e3c:	e58d3004 	str	r3, [sp, #4]
  103e40:	e3a03000 	mov	r3, #0
  103e44:	e58d3000 	str	r3, [sp]
  103e48:	e3a03000 	mov	r3, #0
  103e4c:	e3a02000 	mov	r2, #0
  103e50:	e1a01004 	mov	r1, r4
  103e54:	e3a00065 	mov	r0, #101	; 0x65
  103e58:	eb000097 	bl	1040bc <channel_compose_cmd>
  103e5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  103e60:	e3a01000 	mov	r1, #0
  103e64:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103e68:	ebfff828 	bl	101f10 <lwp_shmat>
  103e6c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (cmd)
  103e70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103e74:	e3530000 	cmp	r3, #0
  103e78:	0a000009 	beq	103ea4 <main+0x248>
        {
            strcpy(CHANNEL_CMD_DATA(cmd), argv[2]);
  103e7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103e80:	e283201c 	add	r2, r3, #28
  103e84:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103e88:	e2833008 	add	r3, r3, #8
  103e8c:	e5933000 	ldr	r3, [r3]
  103e90:	e1a01003 	mov	r1, r3
  103e94:	e1a00002 	mov	r0, r2
  103e98:	eb00f577 	bl	14147c <strcpy>
            lwp_shmdt(cmd);
  103e9c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  103ea0:	ebfff827 	bl	101f44 <lwp_shmdt>
        }
        channel_cmd_send(data_channel, (void *)(size_t)shmid);
  103ea4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103ea8:	e1a01003 	mov	r1, r3
  103eac:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103eb0:	ebfffdc6 	bl	1035d0 <channel_cmd_send>
        rt_channel_close(data_channel);
  103eb4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103eb8:	ebfff0a3 	bl	10014c <rt_channel_close>

        return 0;
  103ebc:	e3a03000 	mov	r3, #0
  103ec0:	ea00007a 	b	1040b0 <main+0x454>
    }

    /* deattach the device and restore it to the uninitialized state */
    if (argc == 3)
  103ec4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103ec8:	e3530003 	cmp	r3, #3
  103ecc:	1a000061 	bne	104058 <main+0x3fc>
    {
        if (strncmp(argv[1], "deattach", 8) == 0)
  103ed0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103ed4:	e2833004 	add	r3, r3, #4
  103ed8:	e5933000 	ldr	r3, [r3]
  103edc:	e3a02008 	mov	r2, #8
  103ee0:	e3051770 	movw	r1, #22384	; 0x5770
  103ee4:	e3401014 	movt	r1, #20
  103ee8:	e1a00003 	mov	r0, r3
  103eec:	eb00f59f 	bl	141570 <strncmp>
  103ef0:	e1a03000 	mov	r3, r0
  103ef4:	e3530000 	cmp	r3, #0
  103ef8:	1a000042 	bne	104008 <main+0x3ac>
        {
            printf("lwIPKit: de-attach device %s\n", argv[2]);
  103efc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103f00:	e2833008 	add	r3, r3, #8
  103f04:	e5933000 	ldr	r3, [r3]
  103f08:	e1a01003 	mov	r1, r3
  103f0c:	e305077c 	movw	r0, #22396	; 0x577c
  103f10:	e3400014 	movt	r0, #20
  103f14:	eb00e9a9 	bl	13e5c0 <printf>

            data_channel = rt_channel_open(data_name, O_RDWR);
  103f18:	e30d3018 	movw	r3, #53272	; 0xd018
  103f1c:	e3403014 	movt	r3, #20
  103f20:	e5933000 	ldr	r3, [r3]
  103f24:	e3a01002 	mov	r1, #2
  103f28:	e1a00003 	mov	r0, r3
  103f2c:	ebfff079 	bl	100118 <rt_channel_open>
  103f30:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
            if (data_channel < 0)
  103f34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103f38:	e3530000 	cmp	r3, #0
  103f3c:	aa000004 	bge	103f54 <main+0x2f8>
            {
                printf("cannot open data_channel, please make sure lwIPKit server is running!\n");
  103f40:	e3050728 	movw	r0, #22312	; 0x5728
  103f44:	e3400014 	movt	r0, #20
  103f48:	eb00e9aa 	bl	13e5f8 <puts>
                return -1;
  103f4c:	e3e03000 	mvn	r3, #0
  103f50:	ea000056 	b	1040b0 <main+0x454>
            }

            shmid = channel_compose_cmd0(UNET_NETDEV_REQ_DETACH, strlen(argv[2]) + 1);
  103f54:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103f58:	e2833008 	add	r3, r3, #8
  103f5c:	e5933000 	ldr	r3, [r3]
  103f60:	e1a00003 	mov	r0, r3
  103f64:	eb00f555 	bl	1414c0 <strlen>
  103f68:	e1a03000 	mov	r3, r0
  103f6c:	e2833001 	add	r3, r3, #1
  103f70:	e58d300c 	str	r3, [sp, #12]
  103f74:	e3a03000 	mov	r3, #0
  103f78:	e58d3008 	str	r3, [sp, #8]
  103f7c:	e3a03000 	mov	r3, #0
  103f80:	e58d3004 	str	r3, [sp, #4]
  103f84:	e3a03000 	mov	r3, #0
  103f88:	e58d3000 	str	r3, [sp]
  103f8c:	e3a03000 	mov	r3, #0
  103f90:	e3a02000 	mov	r2, #0
  103f94:	e3a01000 	mov	r1, #0
  103f98:	e3a00066 	mov	r0, #102	; 0x66
  103f9c:	eb000046 	bl	1040bc <channel_compose_cmd>
  103fa0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
            cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  103fa4:	e3a01000 	mov	r1, #0
  103fa8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103fac:	ebfff7d7 	bl	101f10 <lwp_shmat>
  103fb0:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
            if (cmd)
  103fb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103fb8:	e3530000 	cmp	r3, #0
  103fbc:	0a000009 	beq	103fe8 <main+0x38c>
            {
                strcpy(CHANNEL_CMD_DATA(cmd), argv[2]);
  103fc0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103fc4:	e283201c 	add	r2, r3, #28
  103fc8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103fcc:	e2833008 	add	r3, r3, #8
  103fd0:	e5933000 	ldr	r3, [r3]
  103fd4:	e1a01003 	mov	r1, r3
  103fd8:	e1a00002 	mov	r0, r2
  103fdc:	eb00f526 	bl	14147c <strcpy>
                lwp_shmdt(cmd);
  103fe0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  103fe4:	ebfff7d6 	bl	101f44 <lwp_shmdt>
            }
            channel_cmd_send(data_channel, (void *)(size_t)shmid);
  103fe8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103fec:	e1a01003 	mov	r1, r3
  103ff0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103ff4:	ebfffd75 	bl	1035d0 <channel_cmd_send>
            rt_channel_close(data_channel);
  103ff8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103ffc:	ebfff052 	bl	10014c <rt_channel_close>

            return 0;
  104000:	e3a03000 	mov	r3, #0
  104004:	ea000029 	b	1040b0 <main+0x454>
        }


        if (strncmp(argv[1], "default", 8) == 0)
  104008:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10400c:	e2833004 	add	r3, r3, #4
  104010:	e5933000 	ldr	r3, [r3]
  104014:	e3a02008 	mov	r2, #8
  104018:	e305179c 	movw	r1, #22428	; 0x579c
  10401c:	e3401014 	movt	r1, #20
  104020:	e1a00003 	mov	r0, r3
  104024:	eb00f551 	bl	141570 <strncmp>
  104028:	e1a03000 	mov	r3, r0
  10402c:	e3530000 	cmp	r3, #0
  104030:	1a000008 	bne	104058 <main+0x3fc>
        {
            printf("lwIPKit: set the default device %s", argv[2]);
  104034:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104038:	e2833008 	add	r3, r3, #8
  10403c:	e5933000 	ldr	r3, [r3]
  104040:	e1a01003 	mov	r1, r3
  104044:	e30507a4 	movw	r0, #22436	; 0x57a4
  104048:	e3400014 	movt	r0, #20
  10404c:	eb00e95b 	bl	13e5c0 <printf>
            //eth_set_default(argv[2]);
            return 0;
  104050:	e3a03000 	mov	r3, #0
  104054:	ea000015 	b	1040b0 <main+0x454>
        }
    }

    /* show the status */
    if (argc == 2 && strncmp(argv[1], "status", 6) == 0)
  104058:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10405c:	e3530002 	cmp	r3, #2
  104060:	1a000010 	bne	1040a8 <main+0x44c>
  104064:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104068:	e2833004 	add	r3, r3, #4
  10406c:	e5933000 	ldr	r3, [r3]
  104070:	e3a02006 	mov	r2, #6
  104074:	e30517c8 	movw	r1, #22472	; 0x57c8
  104078:	e3401014 	movt	r1, #20
  10407c:	e1a00003 	mov	r0, r3
  104080:	eb00f53a 	bl	141570 <strncmp>
  104084:	e1a03000 	mov	r3, r0
  104088:	e3530000 	cmp	r3, #0
  10408c:	1a000005 	bne	1040a8 <main+0x44c>
    {
        printf("lwIPKit: the status of the attached devices as follows\n");
  104090:	e30507d0 	movw	r0, #22480	; 0x57d0
  104094:	e3400014 	movt	r0, #20
  104098:	eb00e956 	bl	13e5f8 <puts>
        lwipkit_status();
  10409c:	ebfffee1 	bl	103c28 <lwipkit_status>
        return 0;
  1040a0:	e3a03000 	mov	r3, #0
  1040a4:	ea000001 	b	1040b0 <main+0x454>
    }

    lwipkit_usage();
  1040a8:	ebfffee4 	bl	103c40 <lwipkit_usage>
    return -1;
  1040ac:	e3e03000 	mvn	r3, #0
}
  1040b0:	e1a00003 	mov	r0, r3
  1040b4:	e24bd008 	sub	sp, fp, #8
  1040b8:	e8bd8810 	pop	{r4, fp, pc}

001040bc <channel_compose_cmd>:
#include "channel.h"

static int _shm_key = -1;
int channel_compose_cmd(uint32_t cmd, void *arg0, void *arg1, void *arg2,
    void *arg3, void *arg4, void *arg5, size_t datalen)
{
  1040bc:	e92d4800 	push	{fp, lr}
  1040c0:	e28db004 	add	fp, sp, #4
  1040c4:	e24dd020 	sub	sp, sp, #32
  1040c8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1040cc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1040d0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1040d4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int shmid;
    void *shm_vaddr = NULL;
  1040d8:	e3a03000 	mov	r3, #0
  1040dc:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *pcmd = NULL;
  1040e0:	e3a03000 	mov	r3, #0
  1040e4:	e50b300c 	str	r3, [fp, #-12]

    /* the shared memory includes the command and the possible data */
    size_t len = datalen + CHANNEL_CMD_OFFSET;
  1040e8:	e59b3010 	ldr	r3, [fp, #16]
  1040ec:	e283301c 	add	r3, r3, #28
  1040f0:	e50b3010 	str	r3, [fp, #-16]

    /* use the current thread ID to label the shared memory */
    if (_shm_key == -1)_shm_key = (int)(unsigned long)rt_thread_self();
  1040f4:	e30d301c 	movw	r3, #53276	; 0xd01c
  1040f8:	e3403014 	movt	r3, #20
  1040fc:	e5933000 	ldr	r3, [r3]
  104100:	e3730001 	cmn	r3, #1
  104104:	1a000005 	bne	104120 <channel_compose_cmd+0x64>
  104108:	ebfff839 	bl	1021f4 <rt_thread_self>
  10410c:	e1a03000 	mov	r3, r0
  104110:	e1a02003 	mov	r2, r3
  104114:	e30d301c 	movw	r3, #53276	; 0xd01c
  104118:	e3403014 	movt	r3, #20
  10411c:	e5832000 	str	r2, [r3]
    _shm_key = _shm_key + 2;
  104120:	e30d301c 	movw	r3, #53276	; 0xd01c
  104124:	e3403014 	movt	r3, #20
  104128:	e5933000 	ldr	r3, [r3]
  10412c:	e2832002 	add	r2, r3, #2
  104130:	e30d301c 	movw	r3, #53276	; 0xd01c
  104134:	e3403014 	movt	r3, #20
  104138:	e5832000 	str	r2, [r3]

    shmid = lwp_shmget(_shm_key, len, 1);    /* create a new shared-memory */
  10413c:	e30d301c 	movw	r3, #53276	; 0xd01c
  104140:	e3403014 	movt	r3, #20
  104144:	e5933000 	ldr	r3, [r3]
  104148:	e3a02001 	mov	r2, #1
  10414c:	e51b1010 	ldr	r1, [fp, #-16]
  104150:	e1a00003 	mov	r0, r3
  104154:	ebfff753 	bl	101ea8 <lwp_shmget>
  104158:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (shmid == -1)
  10415c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104160:	e3730001 	cmn	r3, #1
  104164:	1a00000a 	bne	104194 <channel_compose_cmd+0xd8>
    {
        rt_kprintf("%s :Fail to allocate a shared memory! _shm_key %ld\n",__func__,_shm_key);
  104168:	e30d301c 	movw	r3, #53276	; 0xd01c
  10416c:	e3403014 	movt	r3, #20
  104170:	e5933000 	ldr	r3, [r3]
  104174:	e1a02003 	mov	r2, r3
  104178:	e30518c0 	movw	r1, #22720	; 0x58c0
  10417c:	e3401014 	movt	r1, #20
  104180:	e3050850 	movw	r0, #22608	; 0x5850
  104184:	e3400014 	movt	r0, #20
  104188:	ebfffbe1 	bl	103114 <rt_kprintf>
        return -1;
  10418c:	e3e03000 	mvn	r3, #0
  104190:	ea000027 	b	104234 <channel_compose_cmd+0x178>
    }

    /* get the start address of the shared memory */
    shm_vaddr = lwp_shmat(shmid, NULL);
  104194:	e3a01000 	mov	r1, #0
  104198:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10419c:	ebfff75b 	bl	101f10 <lwp_shmat>
  1041a0:	e50b0008 	str	r0, [fp, #-8]
    if (shm_vaddr == NULL)
  1041a4:	e51b3008 	ldr	r3, [fp, #-8]
  1041a8:	e3530000 	cmp	r3, #0
  1041ac:	1a000006 	bne	1041cc <channel_compose_cmd+0x110>
    {
        printf("The allocated shared memory doesn't have a valid address!\n");
  1041b0:	e3050884 	movw	r0, #22660	; 0x5884
  1041b4:	e3400014 	movt	r0, #20
  1041b8:	eb00e90e 	bl	13e5f8 <puts>
        lwp_shmrm(shmid);
  1041bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1041c0:	ebfff747 	bl	101ee4 <lwp_shmrm>
        return -1;
  1041c4:	e3e03000 	mvn	r3, #0
  1041c8:	ea000019 	b	104234 <channel_compose_cmd+0x178>
    }

    /* prepare the command structure */
    pcmd = (struct channel_cmd *) shm_vaddr;
  1041cc:	e51b3008 	ldr	r3, [fp, #-8]
  1041d0:	e50b300c 	str	r3, [fp, #-12]

    pcmd->cmd = cmd;
  1041d4:	e51b300c 	ldr	r3, [fp, #-12]
  1041d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1041dc:	e5832000 	str	r2, [r3]
    pcmd->argv[0] = arg0;
  1041e0:	e51b300c 	ldr	r3, [fp, #-12]
  1041e4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1041e8:	e5832004 	str	r2, [r3, #4]
    pcmd->argv[1] = arg1;
  1041ec:	e51b300c 	ldr	r3, [fp, #-12]
  1041f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1041f4:	e5832008 	str	r2, [r3, #8]
    pcmd->argv[2] = arg2;
  1041f8:	e51b300c 	ldr	r3, [fp, #-12]
  1041fc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  104200:	e583200c 	str	r2, [r3, #12]
    pcmd->argv[3] = arg3;
  104204:	e51b300c 	ldr	r3, [fp, #-12]
  104208:	e59b2004 	ldr	r2, [fp, #4]
  10420c:	e5832010 	str	r2, [r3, #16]
    pcmd->argv[4] = arg4;
  104210:	e51b300c 	ldr	r3, [fp, #-12]
  104214:	e59b2008 	ldr	r2, [fp, #8]
  104218:	e5832014 	str	r2, [r3, #20]
    pcmd->argv[5] = arg5;
  10421c:	e51b300c 	ldr	r3, [fp, #-12]
  104220:	e59b200c 	ldr	r2, [fp, #12]
  104224:	e5832018 	str	r2, [r3, #24]

    lwp_shmdt(shm_vaddr);
  104228:	e51b0008 	ldr	r0, [fp, #-8]
  10422c:	ebfff744 	bl	101f44 <lwp_shmdt>

    return shmid;
  104230:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  104234:	e1a00003 	mov	r0, r3
  104238:	e24bd004 	sub	sp, fp, #4
  10423c:	e8bd8800 	pop	{fp, pc}

00104240 <channel_cmd_send_recv>:
{
  104240:	e92d4800 	push	{fp, lr}
  104244:	e28db004 	add	fp, sp, #4
  104248:	e24dd018 	sub	sp, sp, #24
  10424c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  104250:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  104254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104258:	e3530000 	cmp	r3, #0
  10425c:	aa000005 	bge	104278 <channel_cmd_send_recv+0x38>
  104260:	e3a0200a 	mov	r2, #10
  104264:	e3051920 	movw	r1, #22816	; 0x5920
  104268:	e3401014 	movt	r1, #20
  10426c:	e30508d4 	movw	r0, #22740	; 0x58d4
  104270:	e3400014 	movt	r0, #20
  104274:	ebfffcc7 	bl	103598 <rt_assert_handler>
    chn_msg.type   = RT_CHANNEL_RAW;
  104278:	e3a03000 	mov	r3, #0
  10427c:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d    = cmd;
  104280:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  104284:	e50b300c 	str	r3, [fp, #-12]
    rt_channel_send_recv(channel, &chn_msg, &chn_msg);
  104288:	e24b2014 	sub	r2, fp, #20
  10428c:	e24b3014 	sub	r3, fp, #20
  104290:	e1a01003 	mov	r1, r3
  104294:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  104298:	ebffefb6 	bl	100178 <rt_channel_send_recv>
    return chn_msg.u.d;
  10429c:	e51b300c 	ldr	r3, [fp, #-12]
}
  1042a0:	e1a00003 	mov	r0, r3
  1042a4:	e24bd004 	sub	sp, fp, #4
  1042a8:	e8bd8800 	pop	{fp, pc}

001042ac <channel_cmd_recv>:
{
  1042ac:	e92d4800 	push	{fp, lr}
  1042b0:	e28db004 	add	fp, sp, #4
  1042b4:	e24dd018 	sub	sp, sp, #24
  1042b8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  1042bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1042c0:	e3530000 	cmp	r3, #0
  1042c4:	aa000005 	bge	1042e0 <channel_cmd_recv+0x34>
  1042c8:	e3a02027 	mov	r2, #39	; 0x27
  1042cc:	e305190c 	movw	r1, #22796	; 0x590c
  1042d0:	e3401014 	movt	r1, #20
  1042d4:	e30508d4 	movw	r0, #22740	; 0x58d4
  1042d8:	e3400014 	movt	r0, #20
  1042dc:	ebfffcad 	bl	103598 <rt_assert_handler>
    chn_msg.type = RT_CHANNEL_RAW;
  1042e0:	e3a03000 	mov	r3, #0
  1042e4:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  1042e8:	e24b3014 	sub	r3, fp, #20
  1042ec:	e1a01003 	mov	r1, r3
  1042f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1042f4:	ebffefdc 	bl	10026c <rt_channel_recv>
    return chn_msg.u.d;
  1042f8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1042fc:	e1a00003 	mov	r0, r3
  104300:	e24bd004 	sub	sp, fp, #4
  104304:	e8bd8800 	pop	{fp, pc}

00104308 <ipc_service_init>:
const char *ueth_srv_name = "ueth_srv";
static int ueth_int_channel = -1;
const char *ueth_int_name = "ueth_int";

rt_err_t ipc_service_init()
{
  104308:	e92d4800 	push	{fp, lr}
  10430c:	e28db004 	add	fp, sp, #4
    ueth_ueth_srv_channel = rt_channel_open(ueth_srv_name, O_RDWR);
  104310:	e30d3024 	movw	r3, #53284	; 0xd024
  104314:	e3403014 	movt	r3, #20
  104318:	e5933000 	ldr	r3, [r3]
  10431c:	e3a01002 	mov	r1, #2
  104320:	e1a00003 	mov	r0, r3
  104324:	ebffef7b 	bl	100118 <rt_channel_open>
  104328:	e1a02000 	mov	r2, r0
  10432c:	e30d3020 	movw	r3, #53280	; 0xd020
  104330:	e3403014 	movt	r3, #20
  104334:	e5832000 	str	r2, [r3]
    if (ueth_ueth_srv_channel < 0)
  104338:	e30d3020 	movw	r3, #53280	; 0xd020
  10433c:	e3403014 	movt	r3, #20
  104340:	e5933000 	ldr	r3, [r3]
  104344:	e3530000 	cmp	r3, #0
  104348:	aa000008 	bge	104370 <ipc_service_init+0x68>
    {
        printf("open %s failed\n", ueth_srv_name);
  10434c:	e30d3024 	movw	r3, #53284	; 0xd024
  104350:	e3403014 	movt	r3, #20
  104354:	e5933000 	ldr	r3, [r3]
  104358:	e1a01003 	mov	r1, r3
  10435c:	e30508fc 	movw	r0, #22780	; 0x58fc
  104360:	e3400014 	movt	r0, #20
  104364:	eb00e895 	bl	13e5c0 <printf>
        return RT_ERROR;
  104368:	e3a03001 	mov	r3, #1
  10436c:	ea000018 	b	1043d4 <ipc_service_init+0xcc>
    }

    ueth_int_channel = rt_channel_open(ueth_int_name, O_RDWR);
  104370:	e30d302c 	movw	r3, #53292	; 0xd02c
  104374:	e3403014 	movt	r3, #20
  104378:	e5933000 	ldr	r3, [r3]
  10437c:	e3a01002 	mov	r1, #2
  104380:	e1a00003 	mov	r0, r3
  104384:	ebffef63 	bl	100118 <rt_channel_open>
  104388:	e1a02000 	mov	r2, r0
  10438c:	e30d3028 	movw	r3, #53288	; 0xd028
  104390:	e3403014 	movt	r3, #20
  104394:	e5832000 	str	r2, [r3]
    if (ueth_int_channel < 0)
  104398:	e30d3028 	movw	r3, #53288	; 0xd028
  10439c:	e3403014 	movt	r3, #20
  1043a0:	e5933000 	ldr	r3, [r3]
  1043a4:	e3530000 	cmp	r3, #0
  1043a8:	aa000008 	bge	1043d0 <ipc_service_init+0xc8>
    {
        printf("open %s failed\n", ueth_int_name);
  1043ac:	e30d302c 	movw	r3, #53292	; 0xd02c
  1043b0:	e3403014 	movt	r3, #20
  1043b4:	e5933000 	ldr	r3, [r3]
  1043b8:	e1a01003 	mov	r1, r3
  1043bc:	e30508fc 	movw	r0, #22780	; 0x58fc
  1043c0:	e3400014 	movt	r0, #20
  1043c4:	eb00e87d 	bl	13e5c0 <printf>
        return RT_ERROR;
  1043c8:	e3a03001 	mov	r3, #1
  1043cc:	ea000000 	b	1043d4 <ipc_service_init+0xcc>
    }

    return RT_EOK;
  1043d0:	e3a03000 	mov	r3, #0
}
  1043d4:	e1a00003 	mov	r0, r3
  1043d8:	e8bd8800 	pop	{fp, pc}

001043dc <ueth_int_recv>:

void ueth_int_recv(void)
{
  1043dc:	e92d4800 	push	{fp, lr}
  1043e0:	e28db004 	add	fp, sp, #4
    channel_cmd_recv(ueth_int_channel);
  1043e4:	e30d3028 	movw	r3, #53288	; 0xd028
  1043e8:	e3403014 	movt	r3, #20
  1043ec:	e5933000 	ldr	r3, [r3]
  1043f0:	e1a00003 	mov	r0, r3
  1043f4:	ebffffac 	bl	1042ac <channel_cmd_recv>
}
  1043f8:	e320f000 	nop	{0}
  1043fc:	e8bd8800 	pop	{fp, pc}

00104400 <ueth_v2p>:

void *ueth_v2p(void * addr)
{
  104400:	e92d4800 	push	{fp, lr}
  104404:	e28db004 	add	fp, sp, #4
  104408:	e24dd028 	sub	sp, sp, #40	; 0x28
  10440c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    void* thread_self = rt_thread_self();
  104410:	ebfff777 	bl	1021f4 <rt_thread_self>
  104414:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd3(UETH_V2P_REQ, (void*)0, thread_self, addr, 0);
  104418:	e3a03000 	mov	r3, #0
  10441c:	e58d300c 	str	r3, [sp, #12]
  104420:	e3a03000 	mov	r3, #0
  104424:	e58d3008 	str	r3, [sp, #8]
  104428:	e3a03000 	mov	r3, #0
  10442c:	e58d3004 	str	r3, [sp, #4]
  104430:	e3a03000 	mov	r3, #0
  104434:	e58d3000 	str	r3, [sp]
  104438:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10443c:	e51b200c 	ldr	r2, [fp, #-12]
  104440:	e3a01000 	mov	r1, #0
  104444:	e3a00005 	mov	r0, #5
  104448:	ebffff1b 	bl	1040bc <channel_compose_cmd>
  10444c:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  104450:	e3a03000 	mov	r3, #0
  104454:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  104458:	e3a01000 	mov	r1, #0
  10445c:	e51b0010 	ldr	r0, [fp, #-16]
  104460:	ebfff6aa 	bl	101f10 <lwp_shmat>
  104464:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  104468:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10446c:	e3530000 	cmp	r3, #0
  104470:	0a000009 	beq	10449c <ueth_v2p+0x9c>
    {
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  104474:	e30d3020 	movw	r3, #53280	; 0xd020
  104478:	e3403014 	movt	r3, #20
  10447c:	e5933000 	ldr	r3, [r3]
  104480:	e51b2010 	ldr	r2, [fp, #-16]
  104484:	e1a01002 	mov	r1, r2
  104488:	e1a00003 	mov	r0, r3
  10448c:	ebffff6b 	bl	104240 <channel_cmd_send_recv>
  104490:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  104494:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104498:	ebfff6a9 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  10449c:	e51b0010 	ldr	r0, [fp, #-16]
  1044a0:	ebfff68f 	bl	101ee4 <lwp_shmrm>
    return res;
  1044a4:	e51b3008 	ldr	r3, [fp, #-8]

}
  1044a8:	e1a00003 	mov	r0, r3
  1044ac:	e24bd004 	sub	sp, fp, #4
  1044b0:	e8bd8800 	pop	{fp, pc}

001044b4 <ueth_remap>:

void *ueth_remap(void * addr, int type, size_t size) 
{
  1044b4:	e92d4800 	push	{fp, lr}
  1044b8:	e28db004 	add	fp, sp, #4
  1044bc:	e24dd030 	sub	sp, sp, #48	; 0x30
  1044c0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1044c4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1044c8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    void* thread_self = rt_thread_self();
  1044cc:	ebfff748 	bl	1021f4 <rt_thread_self>
  1044d0:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd4(UETH_REMAP_REQ, (void*)0, thread_self, (void*)type, addr, sizeof(size_t));
  1044d4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1044d8:	e3a03004 	mov	r3, #4
  1044dc:	e58d300c 	str	r3, [sp, #12]
  1044e0:	e3a03000 	mov	r3, #0
  1044e4:	e58d3008 	str	r3, [sp, #8]
  1044e8:	e3a03000 	mov	r3, #0
  1044ec:	e58d3004 	str	r3, [sp, #4]
  1044f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1044f4:	e58d3000 	str	r3, [sp]
  1044f8:	e1a03002 	mov	r3, r2
  1044fc:	e51b200c 	ldr	r2, [fp, #-12]
  104500:	e3a01000 	mov	r1, #0
  104504:	e3a00001 	mov	r0, #1
  104508:	ebfffeeb 	bl	1040bc <channel_compose_cmd>
  10450c:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  104510:	e3a03000 	mov	r3, #0
  104514:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  104518:	e3a01000 	mov	r1, #0
  10451c:	e51b0010 	ldr	r0, [fp, #-16]
  104520:	ebfff67a 	bl	101f10 <lwp_shmat>
  104524:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  104528:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10452c:	e3530000 	cmp	r3, #0
  104530:	0a00000d 	beq	10456c <ueth_remap+0xb8>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  104534:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104538:	e283301c 	add	r3, r3, #28
  10453c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  104540:	e5832000 	str	r2, [r3]
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  104544:	e30d3020 	movw	r3, #53280	; 0xd020
  104548:	e3403014 	movt	r3, #20
  10454c:	e5933000 	ldr	r3, [r3]
  104550:	e51b2010 	ldr	r2, [fp, #-16]
  104554:	e1a01002 	mov	r1, r2
  104558:	e1a00003 	mov	r0, r3
  10455c:	ebffff37 	bl	104240 <channel_cmd_send_recv>
  104560:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  104564:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104568:	ebfff675 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  10456c:	e51b0010 	ldr	r0, [fp, #-16]
  104570:	ebfff65b 	bl	101ee4 <lwp_shmrm>
    return res;
  104574:	e51b3008 	ldr	r3, [fp, #-8]
}
  104578:	e1a00003 	mov	r0, r3
  10457c:	e24bd004 	sub	sp, fp, #4
  104580:	e8bd8800 	pop	{fp, pc}

00104584 <ueth_gpioinit>:

void ueth_gpioinit(void *gpio, size_t size) 
{
  104584:	e92d4800 	push	{fp, lr}
  104588:	e28db004 	add	fp, sp, #4
  10458c:	e24dd020 	sub	sp, sp, #32
  104590:	e50b0010 	str	r0, [fp, #-16]
  104594:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd1(UETH_GPIOINIT_REQ, (void*)0, size);
  104598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10459c:	e58d300c 	str	r3, [sp, #12]
  1045a0:	e3a03000 	mov	r3, #0
  1045a4:	e58d3008 	str	r3, [sp, #8]
  1045a8:	e3a03000 	mov	r3, #0
  1045ac:	e58d3004 	str	r3, [sp, #4]
  1045b0:	e3a03000 	mov	r3, #0
  1045b4:	e58d3000 	str	r3, [sp]
  1045b8:	e3a03000 	mov	r3, #0
  1045bc:	e3a02000 	mov	r2, #0
  1045c0:	e3a01000 	mov	r1, #0
  1045c4:	e3a00002 	mov	r0, #2
  1045c8:	ebfffebb 	bl	1040bc <channel_compose_cmd>
  1045cc:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  1045d0:	e3a01000 	mov	r1, #0
  1045d4:	e51b0008 	ldr	r0, [fp, #-8]
  1045d8:	ebfff64c 	bl	101f10 <lwp_shmat>
  1045dc:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1045e0:	e51b300c 	ldr	r3, [fp, #-12]
  1045e4:	e3530000 	cmp	r3, #0
  1045e8:	0a00000e 	beq	104628 <ueth_gpioinit+0xa4>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), gpio, size);
  1045ec:	e51b300c 	ldr	r3, [fp, #-12]
  1045f0:	e283301c 	add	r3, r3, #28
  1045f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1045f8:	e51b1010 	ldr	r1, [fp, #-16]
  1045fc:	e1a00003 	mov	r0, r3
  104600:	eb00f1e5 	bl	140d9c <memcpy>
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  104604:	e30d3020 	movw	r3, #53280	; 0xd020
  104608:	e3403014 	movt	r3, #20
  10460c:	e5933000 	ldr	r3, [r3]
  104610:	e51b2008 	ldr	r2, [fp, #-8]
  104614:	e1a01002 	mov	r1, r2
  104618:	e1a00003 	mov	r0, r3
  10461c:	ebffff07 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104620:	e51b000c 	ldr	r0, [fp, #-12]
  104624:	ebfff646 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104628:	e51b0008 	ldr	r0, [fp, #-8]
  10462c:	ebfff62c 	bl	101ee4 <lwp_shmrm>
}
  104630:	e320f000 	nop	{0}
  104634:	e24bd004 	sub	sp, fp, #4
  104638:	e8bd8800 	pop	{fp, pc}

0010463c <ueth_init_clock>:

void ueth_init_clock() 
{
  10463c:	e92d4800 	push	{fp, lr}
  104640:	e28db004 	add	fp, sp, #4
  104644:	e24dd018 	sub	sp, sp, #24
    int shmid = channel_compose_cmd1(UETH_CLOCKINIT_REQ, (void*)0, 0);
  104648:	e3a03000 	mov	r3, #0
  10464c:	e58d300c 	str	r3, [sp, #12]
  104650:	e3a03000 	mov	r3, #0
  104654:	e58d3008 	str	r3, [sp, #8]
  104658:	e3a03000 	mov	r3, #0
  10465c:	e58d3004 	str	r3, [sp, #4]
  104660:	e3a03000 	mov	r3, #0
  104664:	e58d3000 	str	r3, [sp]
  104668:	e3a03000 	mov	r3, #0
  10466c:	e3a02000 	mov	r2, #0
  104670:	e3a01000 	mov	r1, #0
  104674:	e3a00003 	mov	r0, #3
  104678:	ebfffe8f 	bl	1040bc <channel_compose_cmd>
  10467c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104680:	e3a01000 	mov	r1, #0
  104684:	e51b0008 	ldr	r0, [fp, #-8]
  104688:	ebfff620 	bl	101f10 <lwp_shmat>
  10468c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104690:	e51b300c 	ldr	r3, [fp, #-12]
  104694:	e3530000 	cmp	r3, #0
  104698:	0a000008 	beq	1046c0 <ueth_init_clock+0x84>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10469c:	e30d3020 	movw	r3, #53280	; 0xd020
  1046a0:	e3403014 	movt	r3, #20
  1046a4:	e5933000 	ldr	r3, [r3]
  1046a8:	e51b2008 	ldr	r2, [fp, #-8]
  1046ac:	e1a01002 	mov	r1, r2
  1046b0:	e1a00003 	mov	r0, r3
  1046b4:	ebfffee1 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1046b8:	e51b000c 	ldr	r0, [fp, #-12]
  1046bc:	ebfff620 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  1046c0:	e51b0008 	ldr	r0, [fp, #-8]
  1046c4:	ebfff606 	bl	101ee4 <lwp_shmrm>
}
  1046c8:	e320f000 	nop	{0}
  1046cc:	e24bd004 	sub	sp, fp, #4
  1046d0:	e8bd8800 	pop	{fp, pc}

001046d4 <ueth_dcache_clean>:

void ueth_dcache_clean(void *paddr, size_t size)
{
  1046d4:	e92d4800 	push	{fp, lr}
  1046d8:	e28db004 	add	fp, sp, #4
  1046dc:	e24dd020 	sub	sp, sp, #32
  1046e0:	e50b0010 	str	r0, [fp, #-16]
  1046e4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_DCACHE_REQ, (void*)0, (void*)UETH_DCACHE_CLEAN, paddr, sizeof(size_t));
  1046e8:	e3a03004 	mov	r3, #4
  1046ec:	e58d300c 	str	r3, [sp, #12]
  1046f0:	e3a03000 	mov	r3, #0
  1046f4:	e58d3008 	str	r3, [sp, #8]
  1046f8:	e3a03000 	mov	r3, #0
  1046fc:	e58d3004 	str	r3, [sp, #4]
  104700:	e3a03000 	mov	r3, #0
  104704:	e58d3000 	str	r3, [sp]
  104708:	e51b3010 	ldr	r3, [fp, #-16]
  10470c:	e3a02001 	mov	r2, #1
  104710:	e3a01000 	mov	r1, #0
  104714:	e3a00004 	mov	r0, #4
  104718:	ebfffe67 	bl	1040bc <channel_compose_cmd>
  10471c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104720:	e3a01000 	mov	r1, #0
  104724:	e51b0008 	ldr	r0, [fp, #-8]
  104728:	ebfff5f8 	bl	101f10 <lwp_shmat>
  10472c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104730:	e51b300c 	ldr	r3, [fp, #-12]
  104734:	e3530000 	cmp	r3, #0
  104738:	0a00000c 	beq	104770 <ueth_dcache_clean+0x9c>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  10473c:	e51b300c 	ldr	r3, [fp, #-12]
  104740:	e283301c 	add	r3, r3, #28
  104744:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104748:	e5832000 	str	r2, [r3]
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10474c:	e30d3020 	movw	r3, #53280	; 0xd020
  104750:	e3403014 	movt	r3, #20
  104754:	e5933000 	ldr	r3, [r3]
  104758:	e51b2008 	ldr	r2, [fp, #-8]
  10475c:	e1a01002 	mov	r1, r2
  104760:	e1a00003 	mov	r0, r3
  104764:	ebfffeb5 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104768:	e51b000c 	ldr	r0, [fp, #-12]
  10476c:	ebfff5f4 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104770:	e51b0008 	ldr	r0, [fp, #-8]
  104774:	ebfff5da 	bl	101ee4 <lwp_shmrm>
    return;
  104778:	e320f000 	nop	{0}
}
  10477c:	e24bd004 	sub	sp, fp, #4
  104780:	e8bd8800 	pop	{fp, pc}

00104784 <ueth_dcache_invalid>:

void ueth_dcache_invalid(void *paddr, size_t size)
{
  104784:	e92d4800 	push	{fp, lr}
  104788:	e28db004 	add	fp, sp, #4
  10478c:	e24dd020 	sub	sp, sp, #32
  104790:	e50b0010 	str	r0, [fp, #-16]
  104794:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_DCACHE_REQ, (void*)0, (void*)UETH_DCACHE_INVALID, paddr, sizeof(size_t));
  104798:	e3a03004 	mov	r3, #4
  10479c:	e58d300c 	str	r3, [sp, #12]
  1047a0:	e3a03000 	mov	r3, #0
  1047a4:	e58d3008 	str	r3, [sp, #8]
  1047a8:	e3a03000 	mov	r3, #0
  1047ac:	e58d3004 	str	r3, [sp, #4]
  1047b0:	e3a03000 	mov	r3, #0
  1047b4:	e58d3000 	str	r3, [sp]
  1047b8:	e51b3010 	ldr	r3, [fp, #-16]
  1047bc:	e3a02002 	mov	r2, #2
  1047c0:	e3a01000 	mov	r1, #0
  1047c4:	e3a00004 	mov	r0, #4
  1047c8:	ebfffe3b 	bl	1040bc <channel_compose_cmd>
  1047cc:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  1047d0:	e3a01000 	mov	r1, #0
  1047d4:	e51b0008 	ldr	r0, [fp, #-8]
  1047d8:	ebfff5cc 	bl	101f10 <lwp_shmat>
  1047dc:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1047e0:	e51b300c 	ldr	r3, [fp, #-12]
  1047e4:	e3530000 	cmp	r3, #0
  1047e8:	0a00000c 	beq	104820 <ueth_dcache_invalid+0x9c>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  1047ec:	e51b300c 	ldr	r3, [fp, #-12]
  1047f0:	e283301c 	add	r3, r3, #28
  1047f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1047f8:	e5832000 	str	r2, [r3]
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  1047fc:	e30d3020 	movw	r3, #53280	; 0xd020
  104800:	e3403014 	movt	r3, #20
  104804:	e5933000 	ldr	r3, [r3]
  104808:	e51b2008 	ldr	r2, [fp, #-8]
  10480c:	e1a01002 	mov	r1, r2
  104810:	e1a00003 	mov	r0, r3
  104814:	ebfffe89 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104818:	e51b000c 	ldr	r0, [fp, #-12]
  10481c:	ebfff5c8 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104820:	e51b0008 	ldr	r0, [fp, #-8]
  104824:	ebfff5ae 	bl	101ee4 <lwp_shmrm>
    return;
  104828:	e320f000 	nop	{0}
}
  10482c:	e24bd004 	sub	sp, fp, #4
  104830:	e8bd8800 	pop	{fp, pc}

00104834 <ueth_hw_interrupt_install>:

void ueth_hw_interrupt_install(int vector, void * param) {
  104834:	e92d4800 	push	{fp, lr}
  104838:	e28db004 	add	fp, sp, #4
  10483c:	e24dd020 	sub	sp, sp, #32
  104840:	e50b0010 	str	r0, [fp, #-16]
  104844:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_INSTALL_INTERRUPT_REQ, (void*)0, (void*)vector, param, 0);
  104848:	e51b2010 	ldr	r2, [fp, #-16]
  10484c:	e3a03000 	mov	r3, #0
  104850:	e58d300c 	str	r3, [sp, #12]
  104854:	e3a03000 	mov	r3, #0
  104858:	e58d3008 	str	r3, [sp, #8]
  10485c:	e3a03000 	mov	r3, #0
  104860:	e58d3004 	str	r3, [sp, #4]
  104864:	e3a03000 	mov	r3, #0
  104868:	e58d3000 	str	r3, [sp]
  10486c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104870:	e3a01000 	mov	r1, #0
  104874:	e3a00006 	mov	r0, #6
  104878:	ebfffe0f 	bl	1040bc <channel_compose_cmd>
  10487c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104880:	e3a01000 	mov	r1, #0
  104884:	e51b0008 	ldr	r0, [fp, #-8]
  104888:	ebfff5a0 	bl	101f10 <lwp_shmat>
  10488c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104890:	e51b300c 	ldr	r3, [fp, #-12]
  104894:	e3530000 	cmp	r3, #0
  104898:	0a000008 	beq	1048c0 <ueth_hw_interrupt_install+0x8c>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10489c:	e30d3020 	movw	r3, #53280	; 0xd020
  1048a0:	e3403014 	movt	r3, #20
  1048a4:	e5933000 	ldr	r3, [r3]
  1048a8:	e51b2008 	ldr	r2, [fp, #-8]
  1048ac:	e1a01002 	mov	r1, r2
  1048b0:	e1a00003 	mov	r0, r3
  1048b4:	ebfffe61 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1048b8:	e51b000c 	ldr	r0, [fp, #-12]
  1048bc:	ebfff5a0 	bl	101f44 <lwp_shmdt>
        
    }
    
    lwp_shmrm(shmid);
  1048c0:	e51b0008 	ldr	r0, [fp, #-8]
  1048c4:	ebfff586 	bl	101ee4 <lwp_shmrm>
  1048c8:	e320f000 	nop	{0}
  1048cc:	e24bd004 	sub	sp, fp, #4
  1048d0:	e8bd8800 	pop	{fp, pc}

001048d4 <inet_ioctlsocket>:
// #include "af_inet.h"

#include "netdev.h"

int inet_ioctlsocket(int socket, long cmd, void *arg)
{
  1048d4:	e92d4800 	push	{fp, lr}
  1048d8:	e28db004 	add	fp, sp, #4
  1048dc:	e24dd010 	sub	sp, sp, #16
  1048e0:	e50b0008 	str	r0, [fp, #-8]
  1048e4:	e50b100c 	str	r1, [fp, #-12]
  1048e8:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  1048ec:	e51b300c 	ldr	r3, [fp, #-12]
  1048f0:	e2433003 	sub	r3, r3, #3
  1048f4:	e3530001 	cmp	r3, #1
  1048f8:	8a000006 	bhi	104918 <inet_ioctlsocket+0x44>
    {
    case F_GETFL:
    case F_SETFL:
        return unet_fcntl(socket, cmd, (int)(unsigned long) arg);
  1048fc:	e51b3010 	ldr	r3, [fp, #-16]
  104900:	e1a02003 	mov	r2, r3
  104904:	e51b100c 	ldr	r1, [fp, #-12]
  104908:	e51b0008 	ldr	r0, [fp, #-8]
  10490c:	eb00123d 	bl	109208 <unet_fcntl>
  104910:	e1a03000 	mov	r3, r0
  104914:	ea000004 	b	10492c <inet_ioctlsocket+0x58>

    default:
        return unet_ioctl(socket, cmd, arg);
  104918:	e51b2010 	ldr	r2, [fp, #-16]
  10491c:	e51b100c 	ldr	r1, [fp, #-12]
  104920:	e51b0008 	ldr	r0, [fp, #-8]
  104924:	eb001245 	bl	109240 <unet_ioctl>
  104928:	e1a03000 	mov	r3, r0
    }
}
  10492c:	e1a00003 	mov	r0, r3
  104930:	e24bd004 	sub	sp, fp, #4
  104934:	e8bd8800 	pop	{fp, pc}

00104938 <sal_unet_netdev_set_pf_info>:
    &unet_netdb_ops,
};

/* Set lwIP network interface device protocol family information */
int sal_unet_netdev_set_pf_info(struct netdev *netdev)
{
  104938:	e92d4800 	push	{fp, lr}
  10493c:	e28db004 	add	fp, sp, #4
  104940:	e24dd008 	sub	sp, sp, #8
  104944:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  104948:	e51b3008 	ldr	r3, [fp, #-8]
  10494c:	e3530000 	cmp	r3, #0
  104950:	1a000005 	bne	10496c <sal_unet_netdev_set_pf_info+0x34>
  104954:	e3a02086 	mov	r2, #134	; 0x86
  104958:	e305199c 	movw	r1, #22940	; 0x599c
  10495c:	e3401014 	movt	r1, #20
  104960:	e3050994 	movw	r0, #22932	; 0x5994
  104964:	e3400014 	movt	r0, #20
  104968:	ebfffb0a 	bl	103598 <rt_assert_handler>

    netdev->sal_user_data = (void *)(unsigned long) &unet_inet_family;
  10496c:	e51b2008 	ldr	r2, [fp, #-8]
  104970:	e3053984 	movw	r3, #22916	; 0x5984
  104974:	e3403014 	movt	r3, #20
  104978:	e582303c 	str	r3, [r2, #60]	; 0x3c
    return 0;
  10497c:	e3a03000 	mov	r3, #0
}
  104980:	e1a00003 	mov	r0, r3
  104984:	e24bd004 	sub	sp, fp, #4
  104988:	e8bd8800 	pop	{fp, pc}

0010498c <ueth_device_find>:
#define MAX_DEV_NUM 3
static eth_device_node ueth_dev_list[MAX_DEV_NUM];
static char ueth_dev_list_valid[MAX_DEV_NUM];

rt_device_t ueth_device_find(const char *name)
{
  10498c:	e92d4800 	push	{fp, lr}
  104990:	e28db004 	add	fp, sp, #4
  104994:	e24dd010 	sub	sp, sp, #16
  104998:	e50b0010 	str	r0, [fp, #-16]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  10499c:	e3a03000 	mov	r3, #0
  1049a0:	e50b3008 	str	r3, [fp, #-8]
  1049a4:	ea00001f 	b	104a28 <ueth_device_find+0x9c>
    {
        if (ueth_dev_list_valid[i])
  1049a8:	e30d344c 	movw	r3, #54348	; 0xd44c
  1049ac:	e3403014 	movt	r3, #20
  1049b0:	e51b2008 	ldr	r2, [fp, #-8]
  1049b4:	e0833002 	add	r3, r3, r2
  1049b8:	e5d33000 	ldrb	r3, [r3]
  1049bc:	e3530000 	cmp	r3, #0
  1049c0:	0a000015 	beq	104a1c <ueth_device_find+0x90>
        {
            if (strncmp(ueth_dev_list[i].name, name, 8) == 0)
  1049c4:	e51b3008 	ldr	r3, [fp, #-8]
  1049c8:	e3a0200c 	mov	r2, #12
  1049cc:	e0020392 	mul	r2, r2, r3
  1049d0:	e30d3428 	movw	r3, #54312	; 0xd428
  1049d4:	e3403014 	movt	r3, #20
  1049d8:	e0823003 	add	r3, r2, r3
  1049dc:	e2833004 	add	r3, r3, #4
  1049e0:	e3a02008 	mov	r2, #8
  1049e4:	e51b1010 	ldr	r1, [fp, #-16]
  1049e8:	e1a00003 	mov	r0, r3
  1049ec:	eb00f2df 	bl	141570 <strncmp>
  1049f0:	e1a03000 	mov	r3, r0
  1049f4:	e3530000 	cmp	r3, #0
  1049f8:	1a000007 	bne	104a1c <ueth_device_find+0x90>
            {  
                return ueth_dev_list[i].dev;
  1049fc:	e30d3428 	movw	r3, #54312	; 0xd428
  104a00:	e3403014 	movt	r3, #20
  104a04:	e51b2008 	ldr	r2, [fp, #-8]
  104a08:	e3a0100c 	mov	r1, #12
  104a0c:	e0020291 	mul	r2, r1, r2
  104a10:	e0833002 	add	r3, r3, r2
  104a14:	e5933000 	ldr	r3, [r3]
  104a18:	ea000006 	b	104a38 <ueth_device_find+0xac>
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104a1c:	e51b3008 	ldr	r3, [fp, #-8]
  104a20:	e2833001 	add	r3, r3, #1
  104a24:	e50b3008 	str	r3, [fp, #-8]
  104a28:	e51b3008 	ldr	r3, [fp, #-8]
  104a2c:	e3530002 	cmp	r3, #2
  104a30:	daffffdc 	ble	1049a8 <ueth_device_find+0x1c>
            }
        }
    }

    return RT_NULL;
  104a34:	e3a03000 	mov	r3, #0
}
  104a38:	e1a00003 	mov	r0, r3
  104a3c:	e24bd004 	sub	sp, fp, #4
  104a40:	e8bd8800 	pop	{fp, pc}

00104a44 <ueth_device_register>:

rt_err_t ueth_device_register(rt_device_t dev, const char *name, rt_uint16_t flags)
{
  104a44:	e92d4800 	push	{fp, lr}
  104a48:	e28db004 	add	fp, sp, #4
  104a4c:	e24dd018 	sub	sp, sp, #24
  104a50:	e50b0010 	str	r0, [fp, #-16]
  104a54:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  104a58:	e1a03002 	mov	r3, r2
  104a5c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (dev == RT_NULL)
  104a60:	e51b3010 	ldr	r3, [fp, #-16]
  104a64:	e3530000 	cmp	r3, #0
  104a68:	1a000001 	bne	104a74 <ueth_device_register+0x30>
        return -RT_ERROR;
  104a6c:	e3e03000 	mvn	r3, #0
  104a70:	ea000042 	b	104b80 <ueth_device_register+0x13c>

    if (ueth_device_find(name) != RT_NULL)
  104a74:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104a78:	ebffffc3 	bl	10498c <ueth_device_find>
  104a7c:	e1a03000 	mov	r3, r0
  104a80:	e3530000 	cmp	r3, #0
  104a84:	0a000001 	beq	104a90 <ueth_device_register+0x4c>
        return -RT_ERROR;
  104a88:	e3e03000 	mvn	r3, #0
  104a8c:	ea00003b 	b	104b80 <ueth_device_register+0x13c>

    int ueth_dev_list_index = 0;
  104a90:	e3a03000 	mov	r3, #0
  104a94:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104a98:	ea000009 	b	104ac4 <ueth_device_register+0x80>
    {
        if (!ueth_dev_list_valid[ueth_dev_list_index])
  104a9c:	e30d344c 	movw	r3, #54348	; 0xd44c
  104aa0:	e3403014 	movt	r3, #20
  104aa4:	e51b2008 	ldr	r2, [fp, #-8]
  104aa8:	e0833002 	add	r3, r3, r2
  104aac:	e5d33000 	ldrb	r3, [r3]
  104ab0:	e3530000 	cmp	r3, #0
  104ab4:	0a000006 	beq	104ad4 <ueth_device_register+0x90>
        {
            break;
        }
        ueth_dev_list_index++;
  104ab8:	e51b3008 	ldr	r3, [fp, #-8]
  104abc:	e2833001 	add	r3, r3, #1
  104ac0:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104ac4:	e51b3008 	ldr	r3, [fp, #-8]
  104ac8:	e3530002 	cmp	r3, #2
  104acc:	dafffff2 	ble	104a9c <ueth_device_register+0x58>
  104ad0:	ea000000 	b	104ad8 <ueth_device_register+0x94>
            break;
  104ad4:	e320f000 	nop	{0}
    }

    if (ueth_dev_list_index == MAX_DEV_NUM)
  104ad8:	e51b3008 	ldr	r3, [fp, #-8]
  104adc:	e3530003 	cmp	r3, #3
  104ae0:	1a000001 	bne	104aec <ueth_device_register+0xa8>
    {
        return -RT_ERROR;
  104ae4:	e3e03000 	mvn	r3, #0
  104ae8:	ea000024 	b	104b80 <ueth_device_register+0x13c>
    }
    
    strcpy(ueth_dev_list[ueth_dev_list_index].name, name);
  104aec:	e51b3008 	ldr	r3, [fp, #-8]
  104af0:	e3a0200c 	mov	r2, #12
  104af4:	e0020392 	mul	r2, r2, r3
  104af8:	e30d3428 	movw	r3, #54312	; 0xd428
  104afc:	e3403014 	movt	r3, #20
  104b00:	e0823003 	add	r3, r2, r3
  104b04:	e2833004 	add	r3, r3, #4
  104b08:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  104b0c:	e1a00003 	mov	r0, r3
  104b10:	eb00f259 	bl	14147c <strcpy>
    ueth_dev_list[ueth_dev_list_index].dev = dev;
  104b14:	e30d3428 	movw	r3, #54312	; 0xd428
  104b18:	e3403014 	movt	r3, #20
  104b1c:	e51b2008 	ldr	r2, [fp, #-8]
  104b20:	e3a0100c 	mov	r1, #12
  104b24:	e0020291 	mul	r2, r1, r2
  104b28:	e0833002 	add	r3, r3, r2
  104b2c:	e51b2010 	ldr	r2, [fp, #-16]
  104b30:	e5832000 	str	r2, [r3]
    ueth_dev_list_valid[ueth_dev_list_index] = 1;
  104b34:	e30d344c 	movw	r3, #54348	; 0xd44c
  104b38:	e3403014 	movt	r3, #20
  104b3c:	e51b2008 	ldr	r2, [fp, #-8]
  104b40:	e0833002 	add	r3, r3, r2
  104b44:	e3a02001 	mov	r2, #1
  104b48:	e5c32000 	strb	r2, [r3]
    dev->flag = flags;
  104b4c:	e51b3010 	ldr	r3, [fp, #-16]
  104b50:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  104b54:	e1c321bc 	strh	r2, [r3, #28]
    dev->ref_count = 0;
  104b58:	e51b3010 	ldr	r3, [fp, #-16]
  104b5c:	e3a02000 	mov	r2, #0
  104b60:	e5c32020 	strb	r2, [r3, #32]
    dev->open_flag = 0;
  104b64:	e51b3010 	ldr	r3, [fp, #-16]
  104b68:	e3a02000 	mov	r2, #0
  104b6c:	e1c321be 	strh	r2, [r3, #30]

    dev->parent.type = RT_Object_Class_Device;
  104b70:	e51b3010 	ldr	r3, [fp, #-16]
  104b74:	e3a02009 	mov	r2, #9
  104b78:	e5c32008 	strb	r2, [r3, #8]

    return RT_EOK;
  104b7c:	e3a03000 	mov	r3, #0
}
  104b80:	e1a00003 	mov	r0, r3
  104b84:	e24bd004 	sub	sp, fp, #4
  104b88:	e8bd8800 	pop	{fp, pc}

00104b8c <ueth_device_unregister>:

rt_err_t ueth_device_unregister(rt_device_t dev)
{
  104b8c:	e92d4800 	push	{fp, lr}
  104b90:	e28db004 	add	fp, sp, #4
  104b94:	e24dd010 	sub	sp, sp, #16
  104b98:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  104b9c:	e51b3010 	ldr	r3, [fp, #-16]
  104ba0:	e3530000 	cmp	r3, #0
  104ba4:	1a000005 	bne	104bc0 <ueth_device_unregister+0x34>
  104ba8:	e3a02048 	mov	r2, #72	; 0x48
  104bac:	e3051a2c 	movw	r1, #23084	; 0x5a2c
  104bb0:	e3401014 	movt	r1, #20
  104bb4:	e30509b8 	movw	r0, #22968	; 0x59b8
  104bb8:	e3400014 	movt	r0, #20
  104bbc:	ebfffa75 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104bc0:	e51b3010 	ldr	r3, [fp, #-16]
  104bc4:	e5d33008 	ldrb	r3, [r3, #8]
  104bc8:	e3530009 	cmp	r3, #9
  104bcc:	0a000005 	beq	104be8 <ueth_device_unregister+0x5c>
  104bd0:	e3a02049 	mov	r2, #73	; 0x49
  104bd4:	e3051a2c 	movw	r1, #23084	; 0x5a2c
  104bd8:	e3401014 	movt	r1, #20
  104bdc:	e30509c8 	movw	r0, #22984	; 0x59c8
  104be0:	e3400014 	movt	r0, #20
  104be4:	ebfffa6b 	bl	103598 <rt_assert_handler>

    for (int i = 0; i < MAX_DEV_NUM; i++)
  104be8:	e3a03000 	mov	r3, #0
  104bec:	e50b3008 	str	r3, [fp, #-8]
  104bf0:	ea000019 	b	104c5c <ueth_device_unregister+0xd0>
    {
        if (ueth_dev_list_valid[i] && dev == ueth_dev_list[i].dev)
  104bf4:	e30d344c 	movw	r3, #54348	; 0xd44c
  104bf8:	e3403014 	movt	r3, #20
  104bfc:	e51b2008 	ldr	r2, [fp, #-8]
  104c00:	e0833002 	add	r3, r3, r2
  104c04:	e5d33000 	ldrb	r3, [r3]
  104c08:	e3530000 	cmp	r3, #0
  104c0c:	0a00000f 	beq	104c50 <ueth_device_unregister+0xc4>
  104c10:	e30d3428 	movw	r3, #54312	; 0xd428
  104c14:	e3403014 	movt	r3, #20
  104c18:	e51b2008 	ldr	r2, [fp, #-8]
  104c1c:	e3a0100c 	mov	r1, #12
  104c20:	e0020291 	mul	r2, r1, r2
  104c24:	e0833002 	add	r3, r3, r2
  104c28:	e5933000 	ldr	r3, [r3]
  104c2c:	e51b2010 	ldr	r2, [fp, #-16]
  104c30:	e1520003 	cmp	r2, r3
  104c34:	1a000005 	bne	104c50 <ueth_device_unregister+0xc4>
        {
            ueth_dev_list_valid[i] = 0;
  104c38:	e30d344c 	movw	r3, #54348	; 0xd44c
  104c3c:	e3403014 	movt	r3, #20
  104c40:	e51b2008 	ldr	r2, [fp, #-8]
  104c44:	e0833002 	add	r3, r3, r2
  104c48:	e3a02000 	mov	r2, #0
  104c4c:	e5c32000 	strb	r2, [r3]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104c50:	e51b3008 	ldr	r3, [fp, #-8]
  104c54:	e2833001 	add	r3, r3, #1
  104c58:	e50b3008 	str	r3, [fp, #-8]
  104c5c:	e51b3008 	ldr	r3, [fp, #-8]
  104c60:	e3530002 	cmp	r3, #2
  104c64:	daffffe2 	ble	104bf4 <ueth_device_unregister+0x68>
        }
    }

    return RT_EOK;
  104c68:	e3a03000 	mov	r3, #0
}
  104c6c:	e1a00003 	mov	r0, r3
  104c70:	e24bd004 	sub	sp, fp, #4
  104c74:	e8bd8800 	pop	{fp, pc}

00104c78 <ueth_device_init>:

rt_err_t ueth_device_init(rt_device_t dev)
{
  104c78:	e92d4800 	push	{fp, lr}
  104c7c:	e28db004 	add	fp, sp, #4
  104c80:	e24dd010 	sub	sp, sp, #16
  104c84:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  104c88:	e3a03000 	mov	r3, #0
  104c8c:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104c90:	e51b3010 	ldr	r3, [fp, #-16]
  104c94:	e3530000 	cmp	r3, #0
  104c98:	1a000005 	bne	104cb4 <ueth_device_init+0x3c>
  104c9c:	e3a0205a 	mov	r2, #90	; 0x5a
  104ca0:	e3051a44 	movw	r1, #23108	; 0x5a44
  104ca4:	e3401014 	movt	r1, #20
  104ca8:	e30509b8 	movw	r0, #22968	; 0x59b8
  104cac:	e3400014 	movt	r0, #20
  104cb0:	ebfffa38 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104cb4:	e51b3010 	ldr	r3, [fp, #-16]
  104cb8:	e5d33008 	ldrb	r3, [r3, #8]
  104cbc:	e3530009 	cmp	r3, #9
  104cc0:	0a000005 	beq	104cdc <ueth_device_init+0x64>
  104cc4:	e3a0205b 	mov	r2, #91	; 0x5b
  104cc8:	e3051a44 	movw	r1, #23108	; 0x5a44
  104ccc:	e3401014 	movt	r1, #20
  104cd0:	e30509c8 	movw	r0, #22984	; 0x59c8
  104cd4:	e3400014 	movt	r0, #20
  104cd8:	ebfffa2e 	bl	103598 <rt_assert_handler>

    /* get device_init handler */
    if (DEV_INIT != RT_NULL)
  104cdc:	e51b3010 	ldr	r3, [fp, #-16]
  104ce0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ce4:	e5933000 	ldr	r3, [r3]
  104ce8:	e3530000 	cmp	r3, #0
  104cec:	0a00001a 	beq	104d5c <ueth_device_init+0xe4>
    {
        if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
  104cf0:	e51b3010 	ldr	r3, [fp, #-16]
  104cf4:	e1d331bc 	ldrh	r3, [r3, #28]
  104cf8:	e2033010 	and	r3, r3, #16
  104cfc:	e3530000 	cmp	r3, #0
  104d00:	1a000015 	bne	104d5c <ueth_device_init+0xe4>
        {
            result = DEV_INIT(dev);
  104d04:	e51b3010 	ldr	r3, [fp, #-16]
  104d08:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104d0c:	e5933000 	ldr	r3, [r3]
  104d10:	e51b0010 	ldr	r0, [fp, #-16]
  104d14:	e12fff33 	blx	r3
  104d18:	e50b0008 	str	r0, [fp, #-8]
            if (result != RT_EOK)
  104d1c:	e51b3008 	ldr	r3, [fp, #-8]
  104d20:	e3530000 	cmp	r3, #0
  104d24:	0a000006 	beq	104d44 <ueth_device_init+0xcc>
            {
                printf("To initialize device:%s failed. The error code is %ld\n",
                           dev->parent.name, result);
  104d28:	e51b3010 	ldr	r3, [fp, #-16]
                printf("To initialize device:%s failed. The error code is %ld\n",
  104d2c:	e51b2008 	ldr	r2, [fp, #-8]
  104d30:	e1a01003 	mov	r1, r3
  104d34:	e30509f4 	movw	r0, #23028	; 0x59f4
  104d38:	e3400014 	movt	r0, #20
  104d3c:	eb00e61f 	bl	13e5c0 <printf>
  104d40:	ea000005 	b	104d5c <ueth_device_init+0xe4>
            }
            else
            {
                dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
  104d44:	e51b3010 	ldr	r3, [fp, #-16]
  104d48:	e1d331bc 	ldrh	r3, [r3, #28]
  104d4c:	e3833010 	orr	r3, r3, #16
  104d50:	e6ff2073 	uxth	r2, r3
  104d54:	e51b3010 	ldr	r3, [fp, #-16]
  104d58:	e1c321bc 	strh	r2, [r3, #28]
            }
        }
    }

    return result;
  104d5c:	e51b3008 	ldr	r3, [fp, #-8]
}
  104d60:	e1a00003 	mov	r0, r3
  104d64:	e24bd004 	sub	sp, fp, #4
  104d68:	e8bd8800 	pop	{fp, pc}

00104d6c <ueth_device_close>:

rt_err_t ueth_device_close(rt_device_t dev)
{
  104d6c:	e92d4800 	push	{fp, lr}
  104d70:	e28db004 	add	fp, sp, #4
  104d74:	e24dd010 	sub	sp, sp, #16
  104d78:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  104d7c:	e3a03000 	mov	r3, #0
  104d80:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104d84:	e51b3010 	ldr	r3, [fp, #-16]
  104d88:	e3530000 	cmp	r3, #0
  104d8c:	1a000005 	bne	104da8 <ueth_device_close+0x3c>
  104d90:	e3a02076 	mov	r2, #118	; 0x76
  104d94:	e3051a58 	movw	r1, #23128	; 0x5a58
  104d98:	e3401014 	movt	r1, #20
  104d9c:	e30509b8 	movw	r0, #22968	; 0x59b8
  104da0:	e3400014 	movt	r0, #20
  104da4:	ebfff9fb 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104da8:	e51b3010 	ldr	r3, [fp, #-16]
  104dac:	e5d33008 	ldrb	r3, [r3, #8]
  104db0:	e3530009 	cmp	r3, #9
  104db4:	0a000005 	beq	104dd0 <ueth_device_close+0x64>
  104db8:	e3a02077 	mov	r2, #119	; 0x77
  104dbc:	e3051a58 	movw	r1, #23128	; 0x5a58
  104dc0:	e3401014 	movt	r1, #20
  104dc4:	e30509c8 	movw	r0, #22984	; 0x59c8
  104dc8:	e3400014 	movt	r0, #20
  104dcc:	ebfff9f1 	bl	103598 <rt_assert_handler>

    if (dev->ref_count == 0)
  104dd0:	e51b3010 	ldr	r3, [fp, #-16]
  104dd4:	e5d33020 	ldrb	r3, [r3, #32]
  104dd8:	e3530000 	cmp	r3, #0
  104ddc:	1a000001 	bne	104de8 <ueth_device_close+0x7c>
        return -RT_ERROR;
  104de0:	e3e03000 	mvn	r3, #0
  104de4:	ea000020 	b	104e6c <ueth_device_close+0x100>

    dev->ref_count--;
  104de8:	e51b3010 	ldr	r3, [fp, #-16]
  104dec:	e5d33020 	ldrb	r3, [r3, #32]
  104df0:	e2433001 	sub	r3, r3, #1
  104df4:	e6ef2073 	uxtb	r2, r3
  104df8:	e51b3010 	ldr	r3, [fp, #-16]
  104dfc:	e5c32020 	strb	r2, [r3, #32]

    if (dev->ref_count != 0)
  104e00:	e51b3010 	ldr	r3, [fp, #-16]
  104e04:	e5d33020 	ldrb	r3, [r3, #32]
  104e08:	e3530000 	cmp	r3, #0
  104e0c:	0a000001 	beq	104e18 <ueth_device_close+0xac>
        return RT_EOK;
  104e10:	e3a03000 	mov	r3, #0
  104e14:	ea000014 	b	104e6c <ueth_device_close+0x100>

    /* call device_close interface */
    if (DEV_CLOSE != RT_NULL)
  104e18:	e51b3010 	ldr	r3, [fp, #-16]
  104e1c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104e20:	e5933008 	ldr	r3, [r3, #8]
  104e24:	e3530000 	cmp	r3, #0
  104e28:	0a000005 	beq	104e44 <ueth_device_close+0xd8>
    {
        result = DEV_CLOSE(dev);
  104e2c:	e51b3010 	ldr	r3, [fp, #-16]
  104e30:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104e34:	e5933008 	ldr	r3, [r3, #8]
  104e38:	e51b0010 	ldr	r0, [fp, #-16]
  104e3c:	e12fff33 	blx	r3
  104e40:	e50b0008 	str	r0, [fp, #-8]
    }

    /* set open flag */
    if (result == RT_EOK || result == -RT_ENOSYS)
  104e44:	e51b3008 	ldr	r3, [fp, #-8]
  104e48:	e3530000 	cmp	r3, #0
  104e4c:	0a000002 	beq	104e5c <ueth_device_close+0xf0>
  104e50:	e51b3008 	ldr	r3, [fp, #-8]
  104e54:	e3730006 	cmn	r3, #6
  104e58:	1a000002 	bne	104e68 <ueth_device_close+0xfc>
        dev->open_flag = RT_DEVICE_OFLAG_CLOSE;
  104e5c:	e51b3010 	ldr	r3, [fp, #-16]
  104e60:	e3a02000 	mov	r2, #0
  104e64:	e1c321be 	strh	r2, [r3, #30]

    return result;
  104e68:	e51b3008 	ldr	r3, [fp, #-8]
}
  104e6c:	e1a00003 	mov	r0, r3
  104e70:	e24bd004 	sub	sp, fp, #4
  104e74:	e8bd8800 	pop	{fp, pc}

00104e78 <ueth_device_control>:

rt_err_t ueth_device_control(rt_device_t dev, int cmd, void *arg)
{
  104e78:	e92d4800 	push	{fp, lr}
  104e7c:	e28db004 	add	fp, sp, #4
  104e80:	e24dd010 	sub	sp, sp, #16
  104e84:	e50b0008 	str	r0, [fp, #-8]
  104e88:	e50b100c 	str	r1, [fp, #-12]
  104e8c:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  104e90:	e51b3008 	ldr	r3, [fp, #-8]
  104e94:	e3530000 	cmp	r3, #0
  104e98:	1a000005 	bne	104eb4 <ueth_device_control+0x3c>
  104e9c:	e3a02090 	mov	r2, #144	; 0x90
  104ea0:	e3051a6c 	movw	r1, #23148	; 0x5a6c
  104ea4:	e3401014 	movt	r1, #20
  104ea8:	e30509b8 	movw	r0, #22968	; 0x59b8
  104eac:	e3400014 	movt	r0, #20
  104eb0:	ebfff9b8 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104eb4:	e51b3008 	ldr	r3, [fp, #-8]
  104eb8:	e5d33008 	ldrb	r3, [r3, #8]
  104ebc:	e3530009 	cmp	r3, #9
  104ec0:	0a000005 	beq	104edc <ueth_device_control+0x64>
  104ec4:	e3a02091 	mov	r2, #145	; 0x91
  104ec8:	e3051a6c 	movw	r1, #23148	; 0x5a6c
  104ecc:	e3401014 	movt	r1, #20
  104ed0:	e30509c8 	movw	r0, #22984	; 0x59c8
  104ed4:	e3400014 	movt	r0, #20
  104ed8:	ebfff9ae 	bl	103598 <rt_assert_handler>

    /* call device_write interface */
    if (DEV_CONTROL != RT_NULL)
  104edc:	e51b3008 	ldr	r3, [fp, #-8]
  104ee0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ee4:	e5933014 	ldr	r3, [r3, #20]
  104ee8:	e3530000 	cmp	r3, #0
  104eec:	0a000008 	beq	104f14 <ueth_device_control+0x9c>
    {
        return DEV_CONTROL(dev, cmd, arg);
  104ef0:	e51b3008 	ldr	r3, [fp, #-8]
  104ef4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ef8:	e5933014 	ldr	r3, [r3, #20]
  104efc:	e51b2010 	ldr	r2, [fp, #-16]
  104f00:	e51b100c 	ldr	r1, [fp, #-12]
  104f04:	e51b0008 	ldr	r0, [fp, #-8]
  104f08:	e12fff33 	blx	r3
  104f0c:	e1a03000 	mov	r3, r0
  104f10:	ea000000 	b	104f18 <ueth_device_control+0xa0>
    }

    return -RT_ENOSYS;
  104f14:	e3e03005 	mvn	r3, #5
  104f18:	e1a00003 	mov	r0, r3
  104f1c:	e24bd004 	sub	sp, fp, #4
  104f20:	e8bd8800 	pop	{fp, pc}

00104f24 <rt_slist_init>:
 * @brief initialize a single list
 *
 * @param l the single list to be initialized
 */
rt_inline void rt_slist_init(rt_slist_t *l)
{
  104f24:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104f28:	e28db000 	add	fp, sp, #0
  104f2c:	e24dd00c 	sub	sp, sp, #12
  104f30:	e50b0008 	str	r0, [fp, #-8]
    l->next = RT_NULL;
  104f34:	e51b3008 	ldr	r3, [fp, #-8]
  104f38:	e3a02000 	mov	r2, #0
  104f3c:	e5832000 	str	r2, [r3]
}
  104f40:	e320f000 	nop	{0}
  104f44:	e28bd000 	add	sp, fp, #0
  104f48:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104f4c:	e12fff1e 	bx	lr

00104f50 <rt_slist_append>:

rt_inline void rt_slist_append(rt_slist_t *l, rt_slist_t *n)
{
  104f50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104f54:	e28db000 	add	fp, sp, #0
  104f58:	e24dd014 	sub	sp, sp, #20
  104f5c:	e50b0010 	str	r0, [fp, #-16]
  104f60:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct rt_slist_node *node;

    node = l;
  104f64:	e51b3010 	ldr	r3, [fp, #-16]
  104f68:	e50b3008 	str	r3, [fp, #-8]
    while (node->next) node = node->next;
  104f6c:	ea000002 	b	104f7c <rt_slist_append+0x2c>
  104f70:	e51b3008 	ldr	r3, [fp, #-8]
  104f74:	e5933000 	ldr	r3, [r3]
  104f78:	e50b3008 	str	r3, [fp, #-8]
  104f7c:	e51b3008 	ldr	r3, [fp, #-8]
  104f80:	e5933000 	ldr	r3, [r3]
  104f84:	e3530000 	cmp	r3, #0
  104f88:	1afffff8 	bne	104f70 <rt_slist_append+0x20>

    /* append the node to the tail */
    node->next = n;
  104f8c:	e51b3008 	ldr	r3, [fp, #-8]
  104f90:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104f94:	e5832000 	str	r2, [r3]
    n->next = RT_NULL;
  104f98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104f9c:	e3a02000 	mov	r2, #0
  104fa0:	e5832000 	str	r2, [r3]
}
  104fa4:	e320f000 	nop	{0}
  104fa8:	e28bd000 	add	sp, fp, #0
  104fac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104fb0:	e12fff1e 	bx	lr

00104fb4 <rt_slist_remove>:

    return len;
}

rt_inline rt_slist_t *rt_slist_remove(rt_slist_t *l, rt_slist_t *n)
{
  104fb4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104fb8:	e28db000 	add	fp, sp, #0
  104fbc:	e24dd014 	sub	sp, sp, #20
  104fc0:	e50b0010 	str	r0, [fp, #-16]
  104fc4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    /* remove slist head */
    struct rt_slist_node *node = l;
  104fc8:	e51b3010 	ldr	r3, [fp, #-16]
  104fcc:	e50b3008 	str	r3, [fp, #-8]
    while (node->next && node->next != n) node = node->next;
  104fd0:	ea000002 	b	104fe0 <rt_slist_remove+0x2c>
  104fd4:	e51b3008 	ldr	r3, [fp, #-8]
  104fd8:	e5933000 	ldr	r3, [r3]
  104fdc:	e50b3008 	str	r3, [fp, #-8]
  104fe0:	e51b3008 	ldr	r3, [fp, #-8]
  104fe4:	e5933000 	ldr	r3, [r3]
  104fe8:	e3530000 	cmp	r3, #0
  104fec:	0a000004 	beq	105004 <rt_slist_remove+0x50>
  104ff0:	e51b3008 	ldr	r3, [fp, #-8]
  104ff4:	e5933000 	ldr	r3, [r3]
  104ff8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104ffc:	e1520003 	cmp	r2, r3
  105000:	1afffff3 	bne	104fd4 <rt_slist_remove+0x20>

    /* remove node */
    if (node->next != (rt_slist_t *)0) node->next = node->next->next;
  105004:	e51b3008 	ldr	r3, [fp, #-8]
  105008:	e5933000 	ldr	r3, [r3]
  10500c:	e3530000 	cmp	r3, #0
  105010:	0a000004 	beq	105028 <rt_slist_remove+0x74>
  105014:	e51b3008 	ldr	r3, [fp, #-8]
  105018:	e5933000 	ldr	r3, [r3]
  10501c:	e5932000 	ldr	r2, [r3]
  105020:	e51b3008 	ldr	r3, [fp, #-8]
  105024:	e5832000 	str	r2, [r3]

    return l;
  105028:	e51b3010 	ldr	r3, [fp, #-16]
}
  10502c:	e1a00003 	mov	r0, r3
  105030:	e28bd000 	add	sp, fp, #0
  105034:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  105038:	e12fff1e 	bx	lr

0010503c <rt_slist_next>:

    return l;
}

rt_inline rt_slist_t *rt_slist_next(rt_slist_t *n)
{
  10503c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  105040:	e28db000 	add	fp, sp, #0
  105044:	e24dd00c 	sub	sp, sp, #12
  105048:	e50b0008 	str	r0, [fp, #-8]
    return n->next;
  10504c:	e51b3008 	ldr	r3, [fp, #-8]
  105050:	e5933000 	ldr	r3, [r3]
}
  105054:	e1a00003 	mov	r0, r3
  105058:	e28bd000 	add	sp, fp, #0
  10505c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  105060:	e12fff1e 	bx	lr

00105064 <netdev_register>:
 *
 * @return  0: registered successfully
 *         -1: registered failed
 */
int netdev_register(struct netdev *netdev, const char *name, void *user_data)
{
  105064:	e92d4810 	push	{r4, fp, lr}
  105068:	e28db008 	add	fp, sp, #8
  10506c:	e24dd01c 	sub	sp, sp, #28
  105070:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  105074:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  105078:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    // rt_base_t level;
    uint16_t flags_mask;
    int index;

    RT_ASSERT(netdev);
  10507c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105080:	e3530000 	cmp	r3, #0
  105084:	1a000005 	bne	1050a0 <netdev_register+0x3c>
  105088:	e3a02032 	mov	r2, #50	; 0x32
  10508c:	e3051de0 	movw	r1, #24032	; 0x5de0
  105090:	e3401014 	movt	r1, #20
  105094:	e3050a80 	movw	r0, #23168	; 0x5a80
  105098:	e3400014 	movt	r0, #20
  10509c:	ebfff93d 	bl	103598 <rt_assert_handler>
    RT_ASSERT(name);
  1050a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1050a4:	e3530000 	cmp	r3, #0
  1050a8:	1a000005 	bne	1050c4 <netdev_register+0x60>
  1050ac:	e3a02033 	mov	r2, #51	; 0x33
  1050b0:	e3051de0 	movw	r1, #24032	; 0x5de0
  1050b4:	e3401014 	movt	r1, #20
  1050b8:	e3050a88 	movw	r0, #23176	; 0x5a88
  1050bc:	e3400014 	movt	r0, #20
  1050c0:	ebfff934 	bl	103598 <rt_assert_handler>

    /* clean network interface device */
    flags_mask = NETDEV_FLAG_UP | NETDEV_FLAG_LINK_UP | NETDEV_FLAG_INTERNET_UP | NETDEV_FLAG_DHCP;
  1050c4:	e3003185 	movw	r3, #389	; 0x185
  1050c8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    netdev->flags &= ~flags_mask;
  1050cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050d0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1050d4:	e6bf2073 	sxth	r2, r3
  1050d8:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  1050dc:	e1e03003 	mvn	r3, r3
  1050e0:	e6bf3073 	sxth	r3, r3
  1050e4:	e0033002 	and	r3, r3, r2
  1050e8:	e6bf3073 	sxth	r3, r3
  1050ec:	e6ff2073 	uxth	r2, r3
  1050f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050f4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    ip_addr_set_zero(&(netdev->ip_addr));
  1050f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050fc:	e3a02000 	mov	r2, #0
  105100:	e583200c 	str	r2, [r3, #12]
    ip_addr_set_zero(&(netdev->netmask));
  105104:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105108:	e3a02000 	mov	r2, #0
  10510c:	e5832010 	str	r2, [r3, #16]
    ip_addr_set_zero(&(netdev->gw));
  105110:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105114:	e3a02000 	mov	r2, #0
  105118:	e5832014 	str	r2, [r3, #20]
    {
        ip_addr_set_zero(&(netdev->ip6_addr[index]));
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V6);
    }
#endif /* NETDEV_IPV6 */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  10511c:	e3a03000 	mov	r3, #0
  105120:	e50b3010 	str	r3, [fp, #-16]
  105124:	ea000007 	b	105148 <netdev_register+0xe4>
    {
        ip_addr_set_zero(&(netdev->dns_servers[index]));
  105128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10512c:	e51b2010 	ldr	r2, [fp, #-16]
  105130:	e2822006 	add	r2, r2, #6
  105134:	e3a01000 	mov	r1, #0
  105138:	e7831102 	str	r1, [r3, r2, lsl #2]
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  10513c:	e51b3010 	ldr	r3, [fp, #-16]
  105140:	e2833001 	add	r3, r3, #1
  105144:	e50b3010 	str	r3, [fp, #-16]
  105148:	e51b3010 	ldr	r3, [fp, #-16]
  10514c:	e3530001 	cmp	r3, #1
  105150:	9afffff4 	bls	105128 <netdev_register+0xc4>
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V4);
    }
    netdev->status_callback = RT_NULL;
  105154:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105158:	e3a02000 	mov	r2, #0
  10515c:	e5832034 	str	r2, [r3, #52]	; 0x34
    netdev->addr_callback = RT_NULL;
  105160:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105164:	e3a02000 	mov	r2, #0
  105168:	e5832038 	str	r2, [r3, #56]	; 0x38

    /* fill network interface device */
    rt_strncpy(netdev->name, name, rt_strlen(name));
  10516c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105170:	e2834004 	add	r4, r3, #4
  105174:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  105178:	ebfff820 	bl	103200 <rt_strlen>
  10517c:	e1a03000 	mov	r3, r0
  105180:	e1a02003 	mov	r2, r3
  105184:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  105188:	e1a00004 	mov	r0, r4
  10518c:	ebfff833 	bl	103260 <rt_strncpy>
    netdev->user_data = user_data;
  105190:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105194:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  105198:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* initialize current network interface device single list */
    rt_slist_init(&(netdev->list));
  10519c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051a0:	e1a00003 	mov	r0, r3
  1051a4:	ebffff5e 	bl	104f24 <rt_slist_init>

    // level = rt_hw_interrupt_disable();

    if (netdev_list == RT_NULL)
  1051a8:	e30f3578 	movw	r3, #62840	; 0xf578
  1051ac:	e3403014 	movt	r3, #20
  1051b0:	e5933000 	ldr	r3, [r3]
  1051b4:	e3530000 	cmp	r3, #0
  1051b8:	1a000008 	bne	1051e0 <netdev_register+0x17c>
    {
        netdev_list = netdev;
  1051bc:	e30f3578 	movw	r3, #62840	; 0xf578
  1051c0:	e3403014 	movt	r3, #20
  1051c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1051c8:	e5832000 	str	r2, [r3]
        netdev_default = netdev;
  1051cc:	e30f3574 	movw	r3, #62836	; 0xf574
  1051d0:	e3403014 	movt	r3, #20
  1051d4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1051d8:	e5832000 	str	r2, [r3]
  1051dc:	ea000007 	b	105200 <netdev_register+0x19c>
    }
    else
    {
        /* tail insertion */
        rt_slist_append(&(netdev_list->list), &(netdev->list));
  1051e0:	e30f3578 	movw	r3, #62840	; 0xf578
  1051e4:	e3403014 	movt	r3, #20
  1051e8:	e5933000 	ldr	r3, [r3]
  1051ec:	e1a02003 	mov	r2, r3
  1051f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051f4:	e1a01003 	mov	r1, r3
  1051f8:	e1a00002 	mov	r0, r2
  1051fc:	ebffff53 	bl	104f50 <rt_slist_append>
    }

    // rt_hw_interrupt_enable(level);

    return RT_EOK;
  105200:	e3a03000 	mov	r3, #0
}
  105204:	e1a00003 	mov	r0, r3
  105208:	e24bd008 	sub	sp, fp, #8
  10520c:	e8bd8810 	pop	{r4, fp, pc}

00105210 <netdev_unregister>:
 *
 * @return  0: unregistered successfully
 *         -1: unregistered failed
 */
int netdev_unregister(struct netdev *netdev)
{
  105210:	e92d4800 	push	{fp, lr}
  105214:	e28db004 	add	fp, sp, #4
  105218:	e24dd010 	sub	sp, sp, #16
  10521c:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105220:	e3a03000 	mov	r3, #0
  105224:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *cur_netdev = RT_NULL;
  105228:	e3a03000 	mov	r3, #0
  10522c:	e50b300c 	str	r3, [fp, #-12]

    RT_ASSERT(netdev);
  105230:	e51b3010 	ldr	r3, [fp, #-16]
  105234:	e3530000 	cmp	r3, #0
  105238:	1a000005 	bne	105254 <netdev_unregister+0x44>
  10523c:	e3a02077 	mov	r2, #119	; 0x77
  105240:	e3051df0 	movw	r1, #24048	; 0x5df0
  105244:	e3401014 	movt	r1, #20
  105248:	e3050a80 	movw	r0, #23168	; 0x5a80
  10524c:	e3400014 	movt	r0, #20
  105250:	ebfff8d0 	bl	103598 <rt_assert_handler>

    if (netdev_list == RT_NULL)
  105254:	e30f3578 	movw	r3, #62840	; 0xf578
  105258:	e3403014 	movt	r3, #20
  10525c:	e5933000 	ldr	r3, [r3]
  105260:	e3530000 	cmp	r3, #0
  105264:	1a000001 	bne	105270 <netdev_unregister+0x60>
    {
        return -RT_ERROR;
  105268:	e3e03000 	mvn	r3, #0
  10526c:	ea000045 	b	105388 <netdev_unregister+0x178>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105270:	e30f3578 	movw	r3, #62840	; 0xf578
  105274:	e3403014 	movt	r3, #20
  105278:	e5933000 	ldr	r3, [r3]
  10527c:	e50b3008 	str	r3, [fp, #-8]
  105280:	ea000030 	b	105348 <netdev_unregister+0x138>
    {
        cur_netdev = rt_slist_entry(node, struct netdev, list);
  105284:	e51b3008 	ldr	r3, [fp, #-8]
  105288:	e50b300c 	str	r3, [fp, #-12]
        if (cur_netdev == netdev)
  10528c:	e51b200c 	ldr	r2, [fp, #-12]
  105290:	e51b3010 	ldr	r3, [fp, #-16]
  105294:	e1520003 	cmp	r2, r3
  105298:	1a000027 	bne	10533c <netdev_unregister+0x12c>
        {
            /* find this network interface device in network interface device list */
            if (netdev_list == netdev && rt_slist_next(&netdev_list->list) == RT_NULL)
  10529c:	e30f3578 	movw	r3, #62840	; 0xf578
  1052a0:	e3403014 	movt	r3, #20
  1052a4:	e5933000 	ldr	r3, [r3]
  1052a8:	e51b2010 	ldr	r2, [fp, #-16]
  1052ac:	e1520003 	cmp	r2, r3
  1052b0:	1a00000c 	bne	1052e8 <netdev_unregister+0xd8>
  1052b4:	e30f3578 	movw	r3, #62840	; 0xf578
  1052b8:	e3403014 	movt	r3, #20
  1052bc:	e5933000 	ldr	r3, [r3]
  1052c0:	e1a00003 	mov	r0, r3
  1052c4:	ebffff5c 	bl	10503c <rt_slist_next>
  1052c8:	e1a03000 	mov	r3, r0
  1052cc:	e3530000 	cmp	r3, #0
  1052d0:	1a000004 	bne	1052e8 <netdev_unregister+0xd8>
            {
                netdev_list = RT_NULL;
  1052d4:	e30f3578 	movw	r3, #62840	; 0xf578
  1052d8:	e3403014 	movt	r3, #20
  1052dc:	e3a02000 	mov	r2, #0
  1052e0:	e5832000 	str	r2, [r3]
  1052e4:	ea000007 	b	105308 <netdev_unregister+0xf8>
            }
            else
            {
                rt_slist_remove(&(netdev_list->list), &(cur_netdev->list));
  1052e8:	e30f3578 	movw	r3, #62840	; 0xf578
  1052ec:	e3403014 	movt	r3, #20
  1052f0:	e5933000 	ldr	r3, [r3]
  1052f4:	e1a02003 	mov	r2, r3
  1052f8:	e51b300c 	ldr	r3, [fp, #-12]
  1052fc:	e1a01003 	mov	r1, r3
  105300:	e1a00002 	mov	r0, r2
  105304:	ebffff2a 	bl	104fb4 <rt_slist_remove>
            }
            if (netdev_default == netdev)
  105308:	e30f3574 	movw	r3, #62836	; 0xf574
  10530c:	e3403014 	movt	r3, #20
  105310:	e5933000 	ldr	r3, [r3]
  105314:	e51b2010 	ldr	r2, [fp, #-16]
  105318:	e1520003 	cmp	r2, r3
  10531c:	1a00000d 	bne	105358 <netdev_unregister+0x148>
            {
                netdev_default = netdev_list;
  105320:	e30f3578 	movw	r3, #62840	; 0xf578
  105324:	e3403014 	movt	r3, #20
  105328:	e5932000 	ldr	r2, [r3]
  10532c:	e30f3574 	movw	r3, #62836	; 0xf574
  105330:	e3403014 	movt	r3, #20
  105334:	e5832000 	str	r2, [r3]
            }
            break;
  105338:	ea000006 	b	105358 <netdev_unregister+0x148>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10533c:	e51b0008 	ldr	r0, [fp, #-8]
  105340:	ebffff3d 	bl	10503c <rt_slist_next>
  105344:	e50b0008 	str	r0, [fp, #-8]
  105348:	e51b3008 	ldr	r3, [fp, #-8]
  10534c:	e3530000 	cmp	r3, #0
  105350:	1affffcb 	bne	105284 <netdev_unregister+0x74>
  105354:	ea000000 	b	10535c <netdev_unregister+0x14c>
            break;
  105358:	e320f000 	nop	{0}
        }
    }
    // rt_hw_interrupt_enable(level);

    if (cur_netdev == netdev)
  10535c:	e51b200c 	ldr	r2, [fp, #-12]
  105360:	e51b3010 	ldr	r3, [fp, #-16]
  105364:	e1520003 	cmp	r2, r3
  105368:	1a000005 	bne	105384 <netdev_unregister+0x174>
    {
#ifdef RT_USING_SAL
        extern int sal_netdev_cleanup(struct netdev *netdev);
        sal_netdev_cleanup(netdev);
  10536c:	e51b0010 	ldr	r0, [fp, #-16]
  105370:	eb000823 	bl	107404 <sal_netdev_cleanup>
#endif
        rt_memset(netdev, 0, sizeof(*netdev));
  105374:	e3a02044 	mov	r2, #68	; 0x44
  105378:	e3a01000 	mov	r1, #0
  10537c:	e51b0010 	ldr	r0, [fp, #-16]
  105380:	ebfff7d0 	bl	1032c8 <rt_memset>
    }

    return -RT_ERROR;
  105384:	e3e03000 	mvn	r3, #0
}
  105388:	e1a00003 	mov	r0, r3
  10538c:	e24bd004 	sub	sp, fp, #4
  105390:	e8bd8800 	pop	{fp, pc}

00105394 <netdev_get_first_by_flags>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_first_by_flags(uint16_t flags)
{
  105394:	e92d4800 	push	{fp, lr}
  105398:	e28db004 	add	fp, sp, #4
  10539c:	e24dd010 	sub	sp, sp, #16
  1053a0:	e1a03000 	mov	r3, r0
  1053a4:	e14b30be 	strh	r3, [fp, #-14]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  1053a8:	e3a03000 	mov	r3, #0
  1053ac:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1053b0:	e3a03000 	mov	r3, #0
  1053b4:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  1053b8:	e30f3578 	movw	r3, #62840	; 0xf578
  1053bc:	e3403014 	movt	r3, #20
  1053c0:	e5933000 	ldr	r3, [r3]
  1053c4:	e3530000 	cmp	r3, #0
  1053c8:	1a000001 	bne	1053d4 <netdev_get_first_by_flags+0x40>
    {
        return RT_NULL;
  1053cc:	e3a03000 	mov	r3, #0
  1053d0:	ea000019 	b	10543c <netdev_get_first_by_flags+0xa8>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1053d4:	e30f3578 	movw	r3, #62840	; 0xf578
  1053d8:	e3403014 	movt	r3, #20
  1053dc:	e5933000 	ldr	r3, [r3]
  1053e0:	e50b3008 	str	r3, [fp, #-8]
  1053e4:	ea000010 	b	10542c <netdev_get_first_by_flags+0x98>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  1053e8:	e51b3008 	ldr	r3, [fp, #-8]
  1053ec:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && (netdev->flags & flags) != 0)
  1053f0:	e51b300c 	ldr	r3, [fp, #-12]
  1053f4:	e3530000 	cmp	r3, #0
  1053f8:	0a000008 	beq	105420 <netdev_get_first_by_flags+0x8c>
  1053fc:	e51b300c 	ldr	r3, [fp, #-12]
  105400:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  105404:	e15b30be 	ldrh	r3, [fp, #-14]
  105408:	e0033002 	and	r3, r3, r2
  10540c:	e6ff3073 	uxth	r3, r3
  105410:	e3530000 	cmp	r3, #0
  105414:	0a000001 	beq	105420 <netdev_get_first_by_flags+0x8c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105418:	e51b300c 	ldr	r3, [fp, #-12]
  10541c:	ea000006 	b	10543c <netdev_get_first_by_flags+0xa8>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105420:	e51b0008 	ldr	r0, [fp, #-8]
  105424:	ebffff04 	bl	10503c <rt_slist_next>
  105428:	e50b0008 	str	r0, [fp, #-8]
  10542c:	e51b3008 	ldr	r3, [fp, #-8]
  105430:	e3530000 	cmp	r3, #0
  105434:	1affffeb 	bne	1053e8 <netdev_get_first_by_flags+0x54>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  105438:	e3a03000 	mov	r3, #0
}
  10543c:	e1a00003 	mov	r0, r3
  105440:	e24bd004 	sub	sp, fp, #4
  105444:	e8bd8800 	pop	{fp, pc}

00105448 <netdev_get_by_ipaddr>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_ipaddr(ip_addr_t *ip_addr)
{
  105448:	e92d4800 	push	{fp, lr}
  10544c:	e28db004 	add	fp, sp, #4
  105450:	e24dd010 	sub	sp, sp, #16
  105454:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105458:	e3a03000 	mov	r3, #0
  10545c:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  105460:	e3a03000 	mov	r3, #0
  105464:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  105468:	e30f3578 	movw	r3, #62840	; 0xf578
  10546c:	e3403014 	movt	r3, #20
  105470:	e5933000 	ldr	r3, [r3]
  105474:	e3530000 	cmp	r3, #0
  105478:	1a000001 	bne	105484 <netdev_get_by_ipaddr+0x3c>
    {
        return RT_NULL;
  10547c:	e3a03000 	mov	r3, #0
  105480:	ea000018 	b	1054e8 <netdev_get_by_ipaddr+0xa0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105484:	e30f3578 	movw	r3, #62840	; 0xf578
  105488:	e3403014 	movt	r3, #20
  10548c:	e5933000 	ldr	r3, [r3]
  105490:	e50b3008 	str	r3, [fp, #-8]
  105494:	ea00000f 	b	1054d8 <netdev_get_by_ipaddr+0x90>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105498:	e51b3008 	ldr	r3, [fp, #-8]
  10549c:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr))
  1054a0:	e51b300c 	ldr	r3, [fp, #-12]
  1054a4:	e3530000 	cmp	r3, #0
  1054a8:	0a000007 	beq	1054cc <netdev_get_by_ipaddr+0x84>
  1054ac:	e51b300c 	ldr	r3, [fp, #-12]
  1054b0:	e593200c 	ldr	r2, [r3, #12]
  1054b4:	e51b3010 	ldr	r3, [fp, #-16]
  1054b8:	e5933000 	ldr	r3, [r3]
  1054bc:	e1520003 	cmp	r2, r3
  1054c0:	1a000001 	bne	1054cc <netdev_get_by_ipaddr+0x84>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  1054c4:	e51b300c 	ldr	r3, [fp, #-12]
  1054c8:	ea000006 	b	1054e8 <netdev_get_by_ipaddr+0xa0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1054cc:	e51b0008 	ldr	r0, [fp, #-8]
  1054d0:	ebfffed9 	bl	10503c <rt_slist_next>
  1054d4:	e50b0008 	str	r0, [fp, #-8]
  1054d8:	e51b3008 	ldr	r3, [fp, #-8]
  1054dc:	e3530000 	cmp	r3, #0
  1054e0:	1affffec 	bne	105498 <netdev_get_by_ipaddr+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  1054e4:	e3a03000 	mov	r3, #0
}
  1054e8:	e1a00003 	mov	r0, r3
  1054ec:	e24bd004 	sub	sp, fp, #4
  1054f0:	e8bd8800 	pop	{fp, pc}

001054f4 <netdev_get_by_name>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_name(const char *name)
{
  1054f4:	e92d4810 	push	{r4, fp, lr}
  1054f8:	e28db008 	add	fp, sp, #8
  1054fc:	e24dd014 	sub	sp, sp, #20
  105500:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105504:	e3a03000 	mov	r3, #0
  105508:	e50b3010 	str	r3, [fp, #-16]
    struct netdev *netdev = RT_NULL;
  10550c:	e3a03000 	mov	r3, #0
  105510:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (netdev_list == RT_NULL)
  105514:	e30f3578 	movw	r3, #62840	; 0xf578
  105518:	e3403014 	movt	r3, #20
  10551c:	e5933000 	ldr	r3, [r3]
  105520:	e3530000 	cmp	r3, #0
  105524:	1a000001 	bne	105530 <netdev_get_by_name+0x3c>
    {
        return RT_NULL;
  105528:	e3a03000 	mov	r3, #0
  10552c:	ea000020 	b	1055b4 <netdev_get_by_name+0xc0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105530:	e30f3578 	movw	r3, #62840	; 0xf578
  105534:	e3403014 	movt	r3, #20
  105538:	e5933000 	ldr	r3, [r3]
  10553c:	e50b3010 	str	r3, [fp, #-16]
  105540:	ea000017 	b	1055a4 <netdev_get_by_name+0xb0>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105544:	e51b3010 	ldr	r3, [fp, #-16]
  105548:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        if (netdev && (rt_strncmp(netdev->name, name, rt_strlen(netdev->name)) == 0))
  10554c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105550:	e3530000 	cmp	r3, #0
  105554:	0a00000f 	beq	105598 <netdev_get_by_name+0xa4>
  105558:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10555c:	e2834004 	add	r4, r3, #4
  105560:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105564:	e2833004 	add	r3, r3, #4
  105568:	e1a00003 	mov	r0, r3
  10556c:	ebfff723 	bl	103200 <rt_strlen>
  105570:	e1a03000 	mov	r3, r0
  105574:	e1a02003 	mov	r2, r3
  105578:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10557c:	e1a00004 	mov	r0, r4
  105580:	ebfff728 	bl	103228 <rt_strncmp>
  105584:	e1a03000 	mov	r3, r0
  105588:	e3530000 	cmp	r3, #0
  10558c:	1a000001 	bne	105598 <netdev_get_by_name+0xa4>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105594:	ea000006 	b	1055b4 <netdev_get_by_name+0xc0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105598:	e51b0010 	ldr	r0, [fp, #-16]
  10559c:	ebfffea6 	bl	10503c <rt_slist_next>
  1055a0:	e50b0010 	str	r0, [fp, #-16]
  1055a4:	e51b3010 	ldr	r3, [fp, #-16]
  1055a8:	e3530000 	cmp	r3, #0
  1055ac:	1affffe4 	bne	105544 <netdev_get_by_name+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  1055b0:	e3a03000 	mov	r3, #0
}
  1055b4:	e1a00003 	mov	r0, r3
  1055b8:	e24bd008 	sub	sp, fp, #8
  1055bc:	e8bd8810 	pop	{r4, fp, pc}

001055c0 <netdev_get_by_family>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_family(int family)
{
  1055c0:	e92d4800 	push	{fp, lr}
  1055c4:	e28db004 	add	fp, sp, #4
  1055c8:	e24dd018 	sub	sp, sp, #24
  1055cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  1055d0:	e3a03000 	mov	r3, #0
  1055d4:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1055d8:	e3a03000 	mov	r3, #0
  1055dc:	e50b300c 	str	r3, [fp, #-12]
    struct sal_proto_family *pf = RT_NULL;
  1055e0:	e3a03000 	mov	r3, #0
  1055e4:	e50b3010 	str	r3, [fp, #-16]

    if (netdev_list == RT_NULL)
  1055e8:	e30f3578 	movw	r3, #62840	; 0xf578
  1055ec:	e3403014 	movt	r3, #20
  1055f0:	e5933000 	ldr	r3, [r3]
  1055f4:	e3530000 	cmp	r3, #0
  1055f8:	1a000001 	bne	105604 <netdev_get_by_family+0x44>
    {
        return RT_NULL;
  1055fc:	e3a03000 	mov	r3, #0
  105600:	ea000048 	b	105728 <netdev_get_by_family+0x168>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105604:	e30f3578 	movw	r3, #62840	; 0xf578
  105608:	e3403014 	movt	r3, #20
  10560c:	e5933000 	ldr	r3, [r3]
  105610:	e50b3008 	str	r3, [fp, #-8]
  105614:	ea00001b 	b	105688 <netdev_get_by_family+0xc8>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105618:	e51b3008 	ldr	r3, [fp, #-8]
  10561c:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  105620:	e51b300c 	ldr	r3, [fp, #-12]
  105624:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  105628:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->family == family && netdev_is_up(netdev))
  10562c:	e51b3010 	ldr	r3, [fp, #-16]
  105630:	e3530000 	cmp	r3, #0
  105634:	0a000010 	beq	10567c <netdev_get_by_family+0xbc>
  105638:	e51b3010 	ldr	r3, [fp, #-16]
  10563c:	e5933008 	ldr	r3, [r3, #8]
  105640:	e3530000 	cmp	r3, #0
  105644:	0a00000c 	beq	10567c <netdev_get_by_family+0xbc>
  105648:	e51b3010 	ldr	r3, [fp, #-16]
  10564c:	e5933000 	ldr	r3, [r3]
  105650:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  105654:	e1520003 	cmp	r2, r3
  105658:	1a000007 	bne	10567c <netdev_get_by_family+0xbc>
  10565c:	e51b300c 	ldr	r3, [fp, #-12]
  105660:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105664:	e2033001 	and	r3, r3, #1
  105668:	e6ef3073 	uxtb	r3, r3
  10566c:	e3530000 	cmp	r3, #0
  105670:	0a000001 	beq	10567c <netdev_get_by_family+0xbc>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105674:	e51b300c 	ldr	r3, [fp, #-12]
  105678:	ea00002a 	b	105728 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10567c:	e51b0008 	ldr	r0, [fp, #-8]
  105680:	ebfffe6d 	bl	10503c <rt_slist_next>
  105684:	e50b0008 	str	r0, [fp, #-8]
  105688:	e51b3008 	ldr	r3, [fp, #-8]
  10568c:	e3530000 	cmp	r3, #0
  105690:	1affffe0 	bne	105618 <netdev_get_by_family+0x58>
        }
    }

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105694:	e30f3578 	movw	r3, #62840	; 0xf578
  105698:	e3403014 	movt	r3, #20
  10569c:	e5933000 	ldr	r3, [r3]
  1056a0:	e50b3008 	str	r3, [fp, #-8]
  1056a4:	ea00001b 	b	105718 <netdev_get_by_family+0x158>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  1056a8:	e51b3008 	ldr	r3, [fp, #-8]
  1056ac:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  1056b0:	e51b300c 	ldr	r3, [fp, #-12]
  1056b4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1056b8:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->sec_family == family && netdev_is_up(netdev))
  1056bc:	e51b3010 	ldr	r3, [fp, #-16]
  1056c0:	e3530000 	cmp	r3, #0
  1056c4:	0a000010 	beq	10570c <netdev_get_by_family+0x14c>
  1056c8:	e51b3010 	ldr	r3, [fp, #-16]
  1056cc:	e5933008 	ldr	r3, [r3, #8]
  1056d0:	e3530000 	cmp	r3, #0
  1056d4:	0a00000c 	beq	10570c <netdev_get_by_family+0x14c>
  1056d8:	e51b3010 	ldr	r3, [fp, #-16]
  1056dc:	e5933004 	ldr	r3, [r3, #4]
  1056e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1056e4:	e1520003 	cmp	r2, r3
  1056e8:	1a000007 	bne	10570c <netdev_get_by_family+0x14c>
  1056ec:	e51b300c 	ldr	r3, [fp, #-12]
  1056f0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1056f4:	e2033001 	and	r3, r3, #1
  1056f8:	e6ef3073 	uxtb	r3, r3
  1056fc:	e3530000 	cmp	r3, #0
  105700:	0a000001 	beq	10570c <netdev_get_by_family+0x14c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105704:	e51b300c 	ldr	r3, [fp, #-12]
  105708:	ea000006 	b	105728 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10570c:	e51b0008 	ldr	r0, [fp, #-8]
  105710:	ebfffe49 	bl	10503c <rt_slist_next>
  105714:	e50b0008 	str	r0, [fp, #-8]
  105718:	e51b3008 	ldr	r3, [fp, #-8]
  10571c:	e3530000 	cmp	r3, #0
  105720:	1affffe0 	bne	1056a8 <netdev_get_by_family+0xe8>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  105724:	e3a03000 	mov	r3, #0
}
  105728:	e1a00003 	mov	r0, r3
  10572c:	e24bd004 	sub	sp, fp, #4
  105730:	e8bd8800 	pop	{fp, pc}

00105734 <netdev_family_get>:
 * @param netdev network interface device object
 *
 * @return the network interface device family type
 */
int netdev_family_get(struct netdev *netdev)
{
  105734:	e92d4800 	push	{fp, lr}
  105738:	e28db004 	add	fp, sp, #4
  10573c:	e24dd008 	sub	sp, sp, #8
  105740:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  105744:	e51b3008 	ldr	r3, [fp, #-8]
  105748:	e3530000 	cmp	r3, #0
  10574c:	1a000005 	bne	105768 <netdev_family_get+0x34>
  105750:	e300214e 	movw	r2, #334	; 0x14e
  105754:	e3051e04 	movw	r1, #24068	; 0x5e04
  105758:	e3401014 	movt	r1, #20
  10575c:	e3050a80 	movw	r0, #23168	; 0x5a80
  105760:	e3400014 	movt	r0, #20
  105764:	ebfff78b 	bl	103598 <rt_assert_handler>

    return ((struct sal_proto_family *)netdev->sal_user_data)->family;
  105768:	e51b3008 	ldr	r3, [fp, #-8]
  10576c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  105770:	e5933000 	ldr	r3, [r3]
}
  105774:	e1a00003 	mov	r0, r3
  105778:	e24bd004 	sub	sp, fp, #4
  10577c:	e8bd8800 	pop	{fp, pc}

00105780 <netdev_set_default>:
 * This function will set default network interface device.
 *
 * @param netdev the network interface device to change
 */
void netdev_set_default(struct netdev *netdev)
{
  105780:	e92d4800 	push	{fp, lr}
  105784:	e28db004 	add	fp, sp, #4
  105788:	e24dd008 	sub	sp, sp, #8
  10578c:	e50b0008 	str	r0, [fp, #-8]
    if (netdev)
  105790:	e51b3008 	ldr	r3, [fp, #-8]
  105794:	e3530000 	cmp	r3, #0
  105798:	0a00000d 	beq	1057d4 <netdev_set_default+0x54>
    {
        netdev_default = netdev;
  10579c:	e30f3574 	movw	r3, #62836	; 0xf574
  1057a0:	e3403014 	movt	r3, #20
  1057a4:	e51b2008 	ldr	r2, [fp, #-8]
  1057a8:	e5832000 	str	r2, [r3]

        if (netdev->ops->set_default)
  1057ac:	e51b3008 	ldr	r3, [fp, #-8]
  1057b0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1057b4:	e593301c 	ldr	r3, [r3, #28]
  1057b8:	e3530000 	cmp	r3, #0
  1057bc:	0a000004 	beq	1057d4 <netdev_set_default+0x54>
        {
            /* set default network interface device in the current network stack */
            netdev->ops->set_default(netdev);
  1057c0:	e51b3008 	ldr	r3, [fp, #-8]
  1057c4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1057c8:	e593301c 	ldr	r3, [r3, #28]
  1057cc:	e51b0008 	ldr	r0, [fp, #-8]
  1057d0:	e12fff33 	blx	r3
        }
        LOG_D("Setting default network interface device name(%s) successfully.", netdev->name);
    }
}
  1057d4:	e320f000 	nop	{0}
  1057d8:	e24bd004 	sub	sp, fp, #4
  1057dc:	e8bd8800 	pop	{fp, pc}

001057e0 <netdev_set_up>:
 *
 * @return  0: set status successfully
 *         -1: set status failed
 */
int netdev_set_up(struct netdev *netdev)
{
  1057e0:	e92d4800 	push	{fp, lr}
  1057e4:	e28db004 	add	fp, sp, #4
  1057e8:	e24dd008 	sub	sp, sp, #8
  1057ec:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1057f0:	e51b3008 	ldr	r3, [fp, #-8]
  1057f4:	e3530000 	cmp	r3, #0
  1057f8:	1a000005 	bne	105814 <netdev_set_up+0x34>
  1057fc:	e3002173 	movw	r2, #371	; 0x173
  105800:	e3051e18 	movw	r1, #24088	; 0x5e18
  105804:	e3401014 	movt	r1, #20
  105808:	e3050a80 	movw	r0, #23168	; 0x5a80
  10580c:	e3400014 	movt	r0, #20
  105810:	ebfff760 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_up)
  105814:	e51b3008 	ldr	r3, [fp, #-8]
  105818:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10581c:	e3530000 	cmp	r3, #0
  105820:	0a000004 	beq	105838 <netdev_set_up+0x58>
  105824:	e51b3008 	ldr	r3, [fp, #-8]
  105828:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10582c:	e5933000 	ldr	r3, [r3]
  105830:	e3530000 	cmp	r3, #0
  105834:	1a00000d 	bne	105870 <netdev_set_up+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  105838:	e3050a90 	movw	r0, #23184	; 0x5a90
  10583c:	e3400014 	movt	r0, #20
  105840:	ebfff633 	bl	103114 <rt_kprintf>
  105844:	e51b3008 	ldr	r3, [fp, #-8]
  105848:	e2833004 	add	r3, r3, #4
  10584c:	e1a01003 	mov	r1, r3
  105850:	e3050aa4 	movw	r0, #23204	; 0x5aa4
  105854:	e3400014 	movt	r0, #20
  105858:	ebfff62d 	bl	103114 <rt_kprintf>
  10585c:	e3050ae0 	movw	r0, #23264	; 0x5ae0
  105860:	e3400014 	movt	r0, #20
  105864:	ebfff62a 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105868:	e3e03000 	mvn	r3, #0
  10586c:	ea00000d 	b	1058a8 <netdev_set_up+0xc8>
    }

    /* network interface device status flags check */
    if (netdev_is_up(netdev))
  105870:	e51b3008 	ldr	r3, [fp, #-8]
  105874:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105878:	e2033001 	and	r3, r3, #1
  10587c:	e6ef3073 	uxtb	r3, r3
  105880:	e3530000 	cmp	r3, #0
  105884:	0a000001 	beq	105890 <netdev_set_up+0xb0>
    {
        return RT_EOK;
  105888:	e3a03000 	mov	r3, #0
  10588c:	ea000005 	b	1058a8 <netdev_set_up+0xc8>
    }

    /* execute enable network interface device operations by network interface device driver */
    return netdev->ops->set_up(netdev);
  105890:	e51b3008 	ldr	r3, [fp, #-8]
  105894:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105898:	e5933000 	ldr	r3, [r3]
  10589c:	e51b0008 	ldr	r0, [fp, #-8]
  1058a0:	e12fff33 	blx	r3
  1058a4:	e1a03000 	mov	r3, r0
}
  1058a8:	e1a00003 	mov	r0, r3
  1058ac:	e24bd004 	sub	sp, fp, #4
  1058b0:	e8bd8800 	pop	{fp, pc}

001058b4 <netdev_set_down>:
 *
 * @return  0: set status successfully
 *         -1: set sttaus failed
 */
int netdev_set_down(struct netdev *netdev)
{
  1058b4:	e92d4800 	push	{fp, lr}
  1058b8:	e28db004 	add	fp, sp, #4
  1058bc:	e24dd008 	sub	sp, sp, #8
  1058c0:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1058c4:	e51b3008 	ldr	r3, [fp, #-8]
  1058c8:	e3530000 	cmp	r3, #0
  1058cc:	1a000005 	bne	1058e8 <netdev_set_down+0x34>
  1058d0:	e300218e 	movw	r2, #398	; 0x18e
  1058d4:	e3051e28 	movw	r1, #24104	; 0x5e28
  1058d8:	e3401014 	movt	r1, #20
  1058dc:	e3050a80 	movw	r0, #23168	; 0x5a80
  1058e0:	e3400014 	movt	r0, #20
  1058e4:	ebfff72b 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_down)
  1058e8:	e51b3008 	ldr	r3, [fp, #-8]
  1058ec:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1058f0:	e3530000 	cmp	r3, #0
  1058f4:	0a000004 	beq	10590c <netdev_set_down+0x58>
  1058f8:	e51b3008 	ldr	r3, [fp, #-8]
  1058fc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105900:	e5933004 	ldr	r3, [r3, #4]
  105904:	e3530000 	cmp	r3, #0
  105908:	1a00000d 	bne	105944 <netdev_set_down+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  10590c:	e3050a90 	movw	r0, #23184	; 0x5a90
  105910:	e3400014 	movt	r0, #20
  105914:	ebfff5fe 	bl	103114 <rt_kprintf>
  105918:	e51b3008 	ldr	r3, [fp, #-8]
  10591c:	e2833004 	add	r3, r3, #4
  105920:	e1a01003 	mov	r1, r3
  105924:	e3050aa4 	movw	r0, #23204	; 0x5aa4
  105928:	e3400014 	movt	r0, #20
  10592c:	ebfff5f8 	bl	103114 <rt_kprintf>
  105930:	e3050ae0 	movw	r0, #23264	; 0x5ae0
  105934:	e3400014 	movt	r0, #20
  105938:	ebfff5f5 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  10593c:	e3e03000 	mvn	r3, #0
  105940:	ea00000c 	b	105978 <netdev_set_down+0xc4>
    }

    /* network interface device status flags check */
    if (!netdev_is_up(netdev))
  105944:	e51b3008 	ldr	r3, [fp, #-8]
  105948:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10594c:	e2033001 	and	r3, r3, #1
  105950:	e3530000 	cmp	r3, #0
  105954:	1a000001 	bne	105960 <netdev_set_down+0xac>
    {
        return RT_EOK;
  105958:	e3a03000 	mov	r3, #0
  10595c:	ea000005 	b	105978 <netdev_set_down+0xc4>
    }

    /* execute disable network interface device operations by network interface driver */
    return netdev->ops->set_down(netdev);
  105960:	e51b3008 	ldr	r3, [fp, #-8]
  105964:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105968:	e5933004 	ldr	r3, [r3, #4]
  10596c:	e51b0008 	ldr	r0, [fp, #-8]
  105970:	e12fff33 	blx	r3
  105974:	e1a03000 	mov	r3, r0
}
  105978:	e1a00003 	mov	r0, r3
  10597c:	e24bd004 	sub	sp, fp, #4
  105980:	e8bd8800 	pop	{fp, pc}

00105984 <netdev_dhcp_enabled>:
 *
 * @return  0: set DHCP status successfully
 *         -1: set DHCP status failed
 */
int netdev_dhcp_enabled(struct netdev *netdev, rt_bool_t is_enabled)
{
  105984:	e92d4800 	push	{fp, lr}
  105988:	e28db004 	add	fp, sp, #4
  10598c:	e24dd008 	sub	sp, sp, #8
  105990:	e50b0008 	str	r0, [fp, #-8]
  105994:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105998:	e51b3008 	ldr	r3, [fp, #-8]
  10599c:	e3530000 	cmp	r3, #0
  1059a0:	1a000005 	bne	1059bc <netdev_dhcp_enabled+0x38>
  1059a4:	e30021ab 	movw	r2, #427	; 0x1ab
  1059a8:	e3051e38 	movw	r1, #24120	; 0x5e38
  1059ac:	e3401014 	movt	r1, #20
  1059b0:	e3050a80 	movw	r0, #23168	; 0x5a80
  1059b4:	e3400014 	movt	r0, #20
  1059b8:	ebfff6f6 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_dhcp)
  1059bc:	e51b3008 	ldr	r3, [fp, #-8]
  1059c0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1059c4:	e3530000 	cmp	r3, #0
  1059c8:	0a000004 	beq	1059e0 <netdev_dhcp_enabled+0x5c>
  1059cc:	e51b3008 	ldr	r3, [fp, #-8]
  1059d0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1059d4:	e5933010 	ldr	r3, [r3, #16]
  1059d8:	e3530000 	cmp	r3, #0
  1059dc:	1a00000d 	bne	105a18 <netdev_dhcp_enabled+0x94>
    {
        LOG_E("The network interface device(%s) not support to set DHCP status.", netdev->name);
  1059e0:	e3050a90 	movw	r0, #23184	; 0x5a90
  1059e4:	e3400014 	movt	r0, #20
  1059e8:	ebfff5c9 	bl	103114 <rt_kprintf>
  1059ec:	e51b3008 	ldr	r3, [fp, #-8]
  1059f0:	e2833004 	add	r3, r3, #4
  1059f4:	e1a01003 	mov	r1, r3
  1059f8:	e3050ae8 	movw	r0, #23272	; 0x5ae8
  1059fc:	e3400014 	movt	r0, #20
  105a00:	ebfff5c3 	bl	103114 <rt_kprintf>
  105a04:	e3050ae0 	movw	r0, #23264	; 0x5ae0
  105a08:	e3400014 	movt	r0, #20
  105a0c:	ebfff5c0 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105a10:	e3e03000 	mvn	r3, #0
  105a14:	ea00000f 	b	105a58 <netdev_dhcp_enabled+0xd4>
    }

    /* network interface device DHCP flags check */
    if (netdev_is_dhcp_enabled(netdev) == is_enabled)
  105a18:	e51b3008 	ldr	r3, [fp, #-8]
  105a1c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105a20:	e1a03423 	lsr	r3, r3, #8
  105a24:	e2033001 	and	r3, r3, #1
  105a28:	e51b200c 	ldr	r2, [fp, #-12]
  105a2c:	e1520003 	cmp	r2, r3
  105a30:	1a000001 	bne	105a3c <netdev_dhcp_enabled+0xb8>
    {
        return RT_EOK;
  105a34:	e3a03000 	mov	r3, #0
  105a38:	ea000006 	b	105a58 <netdev_dhcp_enabled+0xd4>
    }

    /* execute network interface device DHCP capability control operations */
    return netdev->ops->set_dhcp(netdev, is_enabled);
  105a3c:	e51b3008 	ldr	r3, [fp, #-8]
  105a40:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105a44:	e5933010 	ldr	r3, [r3, #16]
  105a48:	e51b100c 	ldr	r1, [fp, #-12]
  105a4c:	e51b0008 	ldr	r0, [fp, #-8]
  105a50:	e12fff33 	blx	r3
  105a54:	e1a03000 	mov	r3, r0
}
  105a58:	e1a00003 	mov	r0, r3
  105a5c:	e24bd004 	sub	sp, fp, #4
  105a60:	e8bd8800 	pop	{fp, pc}

00105a64 <netdev_set_ipaddr>:
 *
 * @return  0: set IP address successfully
 *         -1: set IP address failed
 */
int netdev_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  105a64:	e92d4810 	push	{r4, fp, lr}
  105a68:	e28db008 	add	fp, sp, #8
  105a6c:	e24dd00c 	sub	sp, sp, #12
  105a70:	e50b0010 	str	r0, [fp, #-16]
  105a74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105a78:	e51b3010 	ldr	r3, [fp, #-16]
  105a7c:	e3530000 	cmp	r3, #0
  105a80:	1a000005 	bne	105a9c <netdev_set_ipaddr+0x38>
  105a84:	e3a02f72 	mov	r2, #456	; 0x1c8
  105a88:	e3051e4c 	movw	r1, #24140	; 0x5e4c
  105a8c:	e3401014 	movt	r1, #20
  105a90:	e3050a80 	movw	r0, #23168	; 0x5a80
  105a94:	e3400014 	movt	r0, #20
  105a98:	ebfff6be 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ip_addr);
  105a9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105aa0:	e3530000 	cmp	r3, #0
  105aa4:	1a000005 	bne	105ac0 <netdev_set_ipaddr+0x5c>
  105aa8:	e30021c9 	movw	r2, #457	; 0x1c9
  105aac:	e3051e4c 	movw	r1, #24140	; 0x5e4c
  105ab0:	e3401014 	movt	r1, #20
  105ab4:	e3050b2c 	movw	r0, #23340	; 0x5b2c
  105ab8:	e3400014 	movt	r0, #20
  105abc:	ebfff6b5 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105ac0:	e51b3010 	ldr	r3, [fp, #-16]
  105ac4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ac8:	e3530000 	cmp	r3, #0
  105acc:	0a000004 	beq	105ae4 <netdev_set_ipaddr+0x80>
  105ad0:	e51b3010 	ldr	r3, [fp, #-16]
  105ad4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ad8:	e5933008 	ldr	r3, [r3, #8]
  105adc:	e3530000 	cmp	r3, #0
  105ae0:	1a00000d 	bne	105b1c <netdev_set_ipaddr+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set IP address.", netdev->name);
  105ae4:	e3050a90 	movw	r0, #23184	; 0x5a90
  105ae8:	e3400014 	movt	r0, #20
  105aec:	ebfff588 	bl	103114 <rt_kprintf>
  105af0:	e51b3010 	ldr	r3, [fp, #-16]
  105af4:	e2833004 	add	r3, r3, #4
  105af8:	e1a01003 	mov	r1, r3
  105afc:	e3050b34 	movw	r0, #23348	; 0x5b34
  105b00:	e3400014 	movt	r0, #20
  105b04:	ebfff582 	bl	103114 <rt_kprintf>
  105b08:	e3050ae0 	movw	r0, #23264	; 0x5ae0
  105b0c:	e3400014 	movt	r0, #20
  105b10:	ebfff57f 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105b14:	e3e03000 	mvn	r3, #0
  105b18:	ea00001d 	b	105b94 <netdev_set_ipaddr+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105b1c:	e51b3010 	ldr	r3, [fp, #-16]
  105b20:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105b24:	e1a03423 	lsr	r3, r3, #8
  105b28:	e2033001 	and	r3, r3, #1
  105b2c:	e6ef3073 	uxtb	r3, r3
  105b30:	e3530000 	cmp	r3, #0
  105b34:	0a00000d 	beq	105b70 <netdev_set_ipaddr+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set IP address.", netdev->name);
  105b38:	e3050a90 	movw	r0, #23184	; 0x5a90
  105b3c:	e3400014 	movt	r0, #20
  105b40:	ebfff573 	bl	103114 <rt_kprintf>
  105b44:	e51b3010 	ldr	r3, [fp, #-16]
  105b48:	e2833004 	add	r3, r3, #4
  105b4c:	e1a01003 	mov	r1, r3
  105b50:	e3050b74 	movw	r0, #23412	; 0x5b74
  105b54:	e3400014 	movt	r0, #20
  105b58:	ebfff56d 	bl	103114 <rt_kprintf>
  105b5c:	e3050ae0 	movw	r0, #23264	; 0x5ae0
  105b60:	e3400014 	movt	r0, #20
  105b64:	ebfff56a 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105b68:	e3e03000 	mvn	r3, #0
  105b6c:	ea000008 	b	105b94 <netdev_set_ipaddr+0x130>
    }

     /* execute network interface device set IP address operations */
    return netdev->ops->set_addr_info(netdev, (ip_addr_t *)ip_addr, RT_NULL, RT_NULL);
  105b70:	e51b3010 	ldr	r3, [fp, #-16]
  105b74:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105b78:	e5934008 	ldr	r4, [r3, #8]
  105b7c:	e3a03000 	mov	r3, #0
  105b80:	e3a02000 	mov	r2, #0
  105b84:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  105b88:	e51b0010 	ldr	r0, [fp, #-16]
  105b8c:	e12fff34 	blx	r4
  105b90:	e1a03000 	mov	r3, r0
}
  105b94:	e1a00003 	mov	r0, r3
  105b98:	e24bd008 	sub	sp, fp, #8
  105b9c:	e8bd8810 	pop	{r4, fp, pc}

00105ba0 <netdev_set_netmask>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  105ba0:	e92d4810 	push	{r4, fp, lr}
  105ba4:	e28db008 	add	fp, sp, #8
  105ba8:	e24dd00c 	sub	sp, sp, #12
  105bac:	e50b0010 	str	r0, [fp, #-16]
  105bb0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105bb4:	e51b3010 	ldr	r3, [fp, #-16]
  105bb8:	e3530000 	cmp	r3, #0
  105bbc:	1a000005 	bne	105bd8 <netdev_set_netmask+0x38>
  105bc0:	e30021e6 	movw	r2, #486	; 0x1e6
  105bc4:	e3051e60 	movw	r1, #24160	; 0x5e60
  105bc8:	e3401014 	movt	r1, #20
  105bcc:	e3050a80 	movw	r0, #23168	; 0x5a80
  105bd0:	e3400014 	movt	r0, #20
  105bd4:	ebfff66f 	bl	103598 <rt_assert_handler>
    RT_ASSERT(netmask);
  105bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105bdc:	e3530000 	cmp	r3, #0
  105be0:	1a000005 	bne	105bfc <netdev_set_netmask+0x5c>
  105be4:	e30021e7 	movw	r2, #487	; 0x1e7
  105be8:	e3051e60 	movw	r1, #24160	; 0x5e60
  105bec:	e3401014 	movt	r1, #20
  105bf0:	e3050bcc 	movw	r0, #23500	; 0x5bcc
  105bf4:	e3400014 	movt	r0, #20
  105bf8:	ebfff666 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105bfc:	e51b3010 	ldr	r3, [fp, #-16]
  105c00:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105c04:	e3530000 	cmp	r3, #0
  105c08:	0a000004 	beq	105c20 <netdev_set_netmask+0x80>
  105c0c:	e51b3010 	ldr	r3, [fp, #-16]
  105c10:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105c14:	e5933008 	ldr	r3, [r3, #8]
  105c18:	e3530000 	cmp	r3, #0
  105c1c:	1a00000d 	bne	105c58 <netdev_set_netmask+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set netmask address.", netdev->name);
  105c20:	e3050a90 	movw	r0, #23184	; 0x5a90
  105c24:	e3400014 	movt	r0, #20
  105c28:	ebfff539 	bl	103114 <rt_kprintf>
  105c2c:	e51b3010 	ldr	r3, [fp, #-16]
  105c30:	e2833004 	add	r3, r3, #4
  105c34:	e1a01003 	mov	r1, r3
  105c38:	e3050bd4 	movw	r0, #23508	; 0x5bd4
  105c3c:	e3400014 	movt	r0, #20
  105c40:	ebfff533 	bl	103114 <rt_kprintf>
  105c44:	e3050ae0 	movw	r0, #23264	; 0x5ae0
  105c48:	e3400014 	movt	r0, #20
  105c4c:	ebfff530 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105c50:	e3e03000 	mvn	r3, #0
  105c54:	ea00001d 	b	105cd0 <netdev_set_netmask+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105c58:	e51b3010 	ldr	r3, [fp, #-16]
  105c5c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105c60:	e1a03423 	lsr	r3, r3, #8
  105c64:	e2033001 	and	r3, r3, #1
  105c68:	e6ef3073 	uxtb	r3, r3
  105c6c:	e3530000 	cmp	r3, #0
  105c70:	0a00000d 	beq	105cac <netdev_set_netmask+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set netmask address.", netdev->name);
  105c74:	e3050a90 	movw	r0, #23184	; 0x5a90
  105c78:	e3400014 	movt	r0, #20
  105c7c:	ebfff524 	bl	103114 <rt_kprintf>
  105c80:	e51b3010 	ldr	r3, [fp, #-16]
  105c84:	e2833004 	add	r3, r3, #4
  105c88:	e1a01003 	mov	r1, r3
  105c8c:	e3050c1c 	movw	r0, #23580	; 0x5c1c
  105c90:	e3400014 	movt	r0, #20
  105c94:	ebfff51e 	bl	103114 <rt_kprintf>
  105c98:	e3050ae0 	movw	r0, #23264	; 0x5ae0
  105c9c:	e3400014 	movt	r0, #20
  105ca0:	ebfff51b 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105ca4:	e3e03000 	mvn	r3, #0
  105ca8:	ea000008 	b	105cd0 <netdev_set_netmask+0x130>
    }

    /* execute network interface device set netmask address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, (ip_addr_t *)netmask, RT_NULL);
  105cac:	e51b3010 	ldr	r3, [fp, #-16]
  105cb0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105cb4:	e5934008 	ldr	r4, [r3, #8]
  105cb8:	e3a03000 	mov	r3, #0
  105cbc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105cc0:	e3a01000 	mov	r1, #0
  105cc4:	e51b0010 	ldr	r0, [fp, #-16]
  105cc8:	e12fff34 	blx	r4
  105ccc:	e1a03000 	mov	r3, r0
}
  105cd0:	e1a00003 	mov	r0, r3
  105cd4:	e24bd008 	sub	sp, fp, #8
  105cd8:	e8bd8810 	pop	{r4, fp, pc}

00105cdc <netdev_set_gw>:
 *
 * @return  0: set gateway address successfully
 *         -1: set gateway address failed
 */
int netdev_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  105cdc:	e92d4810 	push	{r4, fp, lr}
  105ce0:	e28db008 	add	fp, sp, #8
  105ce4:	e24dd00c 	sub	sp, sp, #12
  105ce8:	e50b0010 	str	r0, [fp, #-16]
  105cec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105cf0:	e51b3010 	ldr	r3, [fp, #-16]
  105cf4:	e3530000 	cmp	r3, #0
  105cf8:	1a000005 	bne	105d14 <netdev_set_gw+0x38>
  105cfc:	e3a02f81 	mov	r2, #516	; 0x204
  105d00:	e3051e74 	movw	r1, #24180	; 0x5e74
  105d04:	e3401014 	movt	r1, #20
  105d08:	e3050a80 	movw	r0, #23168	; 0x5a80
  105d0c:	e3400014 	movt	r0, #20
  105d10:	ebfff620 	bl	103598 <rt_assert_handler>
    RT_ASSERT(gw);
  105d14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105d18:	e3530000 	cmp	r3, #0
  105d1c:	1a000005 	bne	105d38 <netdev_set_gw+0x5c>
  105d20:	e3002205 	movw	r2, #517	; 0x205
  105d24:	e3051e74 	movw	r1, #24180	; 0x5e74
  105d28:	e3401014 	movt	r1, #20
  105d2c:	e3050c7c 	movw	r0, #23676	; 0x5c7c
  105d30:	e3400014 	movt	r0, #20
  105d34:	ebfff617 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105d38:	e51b3010 	ldr	r3, [fp, #-16]
  105d3c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105d40:	e3530000 	cmp	r3, #0
  105d44:	0a000004 	beq	105d5c <netdev_set_gw+0x80>
  105d48:	e51b3010 	ldr	r3, [fp, #-16]
  105d4c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105d50:	e5933008 	ldr	r3, [r3, #8]
  105d54:	e3530000 	cmp	r3, #0
  105d58:	1a00000d 	bne	105d94 <netdev_set_gw+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set gateway address.", netdev->name);
  105d5c:	e3050a90 	movw	r0, #23184	; 0x5a90
  105d60:	e3400014 	movt	r0, #20
  105d64:	ebfff4ea 	bl	103114 <rt_kprintf>
  105d68:	e51b3010 	ldr	r3, [fp, #-16]
  105d6c:	e2833004 	add	r3, r3, #4
  105d70:	e1a01003 	mov	r1, r3
  105d74:	e3050c80 	movw	r0, #23680	; 0x5c80
  105d78:	e3400014 	movt	r0, #20
  105d7c:	ebfff4e4 	bl	103114 <rt_kprintf>
  105d80:	e3050ae0 	movw	r0, #23264	; 0x5ae0
  105d84:	e3400014 	movt	r0, #20
  105d88:	ebfff4e1 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105d8c:	e3e03000 	mvn	r3, #0
  105d90:	ea00001d 	b	105e0c <netdev_set_gw+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105d94:	e51b3010 	ldr	r3, [fp, #-16]
  105d98:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105d9c:	e1a03423 	lsr	r3, r3, #8
  105da0:	e2033001 	and	r3, r3, #1
  105da4:	e6ef3073 	uxtb	r3, r3
  105da8:	e3530000 	cmp	r3, #0
  105dac:	0a00000d 	beq	105de8 <netdev_set_gw+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set gateway address.", netdev->name);
  105db0:	e3050a90 	movw	r0, #23184	; 0x5a90
  105db4:	e3400014 	movt	r0, #20
  105db8:	ebfff4d5 	bl	103114 <rt_kprintf>
  105dbc:	e51b3010 	ldr	r3, [fp, #-16]
  105dc0:	e2833004 	add	r3, r3, #4
  105dc4:	e1a01003 	mov	r1, r3
  105dc8:	e3050cc8 	movw	r0, #23752	; 0x5cc8
  105dcc:	e3400014 	movt	r0, #20
  105dd0:	ebfff4cf 	bl	103114 <rt_kprintf>
  105dd4:	e3050ae0 	movw	r0, #23264	; 0x5ae0
  105dd8:	e3400014 	movt	r0, #20
  105ddc:	ebfff4cc 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105de0:	e3e03000 	mvn	r3, #0
  105de4:	ea000008 	b	105e0c <netdev_set_gw+0x130>
    }

    /* execute network interface device set gateway address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, RT_NULL, (ip_addr_t *)gw);
  105de8:	e51b3010 	ldr	r3, [fp, #-16]
  105dec:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105df0:	e5934008 	ldr	r4, [r3, #8]
  105df4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105df8:	e3a02000 	mov	r2, #0
  105dfc:	e3a01000 	mov	r1, #0
  105e00:	e51b0010 	ldr	r0, [fp, #-16]
  105e04:	e12fff34 	blx	r4
  105e08:	e1a03000 	mov	r3, r0
}
  105e0c:	e1a00003 	mov	r0, r3
  105e10:	e24bd008 	sub	sp, fp, #8
  105e14:	e8bd8810 	pop	{r4, fp, pc}

00105e18 <netdev_set_dns_server>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  105e18:	e92d4800 	push	{fp, lr}
  105e1c:	e28db004 	add	fp, sp, #4
  105e20:	e24dd010 	sub	sp, sp, #16
  105e24:	e50b0008 	str	r0, [fp, #-8]
  105e28:	e1a03001 	mov	r3, r1
  105e2c:	e50b2010 	str	r2, [fp, #-16]
  105e30:	e54b3009 	strb	r3, [fp, #-9]
    RT_ASSERT(netdev);
  105e34:	e51b3008 	ldr	r3, [fp, #-8]
  105e38:	e3530000 	cmp	r3, #0
  105e3c:	1a000005 	bne	105e58 <netdev_set_dns_server+0x40>
  105e40:	e3002222 	movw	r2, #546	; 0x222
  105e44:	e3051e84 	movw	r1, #24196	; 0x5e84
  105e48:	e3401014 	movt	r1, #20
  105e4c:	e3050a80 	movw	r0, #23168	; 0x5a80
  105e50:	e3400014 	movt	r0, #20
  105e54:	ebfff5cf 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dns_server);
  105e58:	e51b3010 	ldr	r3, [fp, #-16]
  105e5c:	e3530000 	cmp	r3, #0
  105e60:	1a000005 	bne	105e7c <netdev_set_dns_server+0x64>
  105e64:	e3002223 	movw	r2, #547	; 0x223
  105e68:	e3051e84 	movw	r1, #24196	; 0x5e84
  105e6c:	e3401014 	movt	r1, #20
  105e70:	e3050d28 	movw	r0, #23848	; 0x5d28
  105e74:	e3400014 	movt	r0, #20
  105e78:	ebfff5c6 	bl	103598 <rt_assert_handler>

    if (dns_num >= NETDEV_DNS_SERVERS_NUM)
  105e7c:	e55b3009 	ldrb	r3, [fp, #-9]
  105e80:	e3530001 	cmp	r3, #1
  105e84:	9a00000e 	bls	105ec4 <netdev_set_dns_server+0xac>
    {
        LOG_E("The number of DNS servers(%d) set exceeds the maximum number(%d).", dns_num + 1, NETDEV_DNS_SERVERS_NUM);
  105e88:	e3050a90 	movw	r0, #23184	; 0x5a90
  105e8c:	e3400014 	movt	r0, #20
  105e90:	ebfff49f 	bl	103114 <rt_kprintf>
  105e94:	e55b3009 	ldrb	r3, [fp, #-9]
  105e98:	e2833001 	add	r3, r3, #1
  105e9c:	e3a02002 	mov	r2, #2
  105ea0:	e1a01003 	mov	r1, r3
  105ea4:	e3050d34 	movw	r0, #23860	; 0x5d34
  105ea8:	e3400014 	movt	r0, #20
  105eac:	ebfff498 	bl	103114 <rt_kprintf>
  105eb0:	e3050ae0 	movw	r0, #23264	; 0x5ae0
  105eb4:	e3400014 	movt	r0, #20
  105eb8:	ebfff495 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105ebc:	e3e03000 	mvn	r3, #0
  105ec0:	ea00001e 	b	105f40 <netdev_set_dns_server+0x128>
    }

    if (!netdev->ops || !netdev->ops->set_dns_server)
  105ec4:	e51b3008 	ldr	r3, [fp, #-8]
  105ec8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ecc:	e3530000 	cmp	r3, #0
  105ed0:	0a000004 	beq	105ee8 <netdev_set_dns_server+0xd0>
  105ed4:	e51b3008 	ldr	r3, [fp, #-8]
  105ed8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105edc:	e593300c 	ldr	r3, [r3, #12]
  105ee0:	e3530000 	cmp	r3, #0
  105ee4:	1a00000d 	bne	105f20 <netdev_set_dns_server+0x108>
    {
        LOG_E("The network interface device(%s) not support to set DNS server address.", netdev->name);
  105ee8:	e3050a90 	movw	r0, #23184	; 0x5a90
  105eec:	e3400014 	movt	r0, #20
  105ef0:	ebfff487 	bl	103114 <rt_kprintf>
  105ef4:	e51b3008 	ldr	r3, [fp, #-8]
  105ef8:	e2833004 	add	r3, r3, #4
  105efc:	e1a01003 	mov	r1, r3
  105f00:	e3050d78 	movw	r0, #23928	; 0x5d78
  105f04:	e3400014 	movt	r0, #20
  105f08:	ebfff481 	bl	103114 <rt_kprintf>
  105f0c:	e3050ae0 	movw	r0, #23264	; 0x5ae0
  105f10:	e3400014 	movt	r0, #20
  105f14:	ebfff47e 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105f18:	e3e03000 	mvn	r3, #0
  105f1c:	ea000007 	b	105f40 <netdev_set_dns_server+0x128>
    }

    /* execute network interface device set DNS server address operations */
    return netdev->ops->set_dns_server(netdev, dns_num, (ip_addr_t *)dns_server);
  105f20:	e51b3008 	ldr	r3, [fp, #-8]
  105f24:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105f28:	e593300c 	ldr	r3, [r3, #12]
  105f2c:	e55b1009 	ldrb	r1, [fp, #-9]
  105f30:	e51b2010 	ldr	r2, [fp, #-16]
  105f34:	e51b0008 	ldr	r0, [fp, #-8]
  105f38:	e12fff33 	blx	r3
  105f3c:	e1a03000 	mov	r3, r0
}
  105f40:	e1a00003 	mov	r0, r3
  105f44:	e24bd004 	sub	sp, fp, #4
  105f48:	e8bd8800 	pop	{fp, pc}

00105f4c <netdev_set_status_callback>:
 *
 * @param netdev the network interface device to change
 * @param status_callback the callback be called when the status has been changed.
 */
void netdev_set_status_callback(struct netdev *netdev, netdev_callback_fn status_callback)
{
  105f4c:	e92d4800 	push	{fp, lr}
  105f50:	e28db004 	add	fp, sp, #4
  105f54:	e24dd008 	sub	sp, sp, #8
  105f58:	e50b0008 	str	r0, [fp, #-8]
  105f5c:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105f60:	e51b3008 	ldr	r3, [fp, #-8]
  105f64:	e3530000 	cmp	r3, #0
  105f68:	1a000005 	bne	105f84 <netdev_set_status_callback+0x38>
  105f6c:	e300223d 	movw	r2, #573	; 0x23d
  105f70:	e3051e9c 	movw	r1, #24220	; 0x5e9c
  105f74:	e3401014 	movt	r1, #20
  105f78:	e3050a80 	movw	r0, #23168	; 0x5a80
  105f7c:	e3400014 	movt	r0, #20
  105f80:	ebfff584 	bl	103598 <rt_assert_handler>
    RT_ASSERT(status_callback);
  105f84:	e51b300c 	ldr	r3, [fp, #-12]
  105f88:	e3530000 	cmp	r3, #0
  105f8c:	1a000005 	bne	105fa8 <netdev_set_status_callback+0x5c>
  105f90:	e300223e 	movw	r2, #574	; 0x23e
  105f94:	e3051e9c 	movw	r1, #24220	; 0x5e9c
  105f98:	e3401014 	movt	r1, #20
  105f9c:	e3050dc0 	movw	r0, #24000	; 0x5dc0
  105fa0:	e3400014 	movt	r0, #20
  105fa4:	ebfff57b 	bl	103598 <rt_assert_handler>

    netdev->status_callback = status_callback;
  105fa8:	e51b3008 	ldr	r3, [fp, #-8]
  105fac:	e51b200c 	ldr	r2, [fp, #-12]
  105fb0:	e5832034 	str	r2, [r3, #52]	; 0x34
}
  105fb4:	e320f000 	nop	{0}
  105fb8:	e24bd004 	sub	sp, fp, #4
  105fbc:	e8bd8800 	pop	{fp, pc}

00105fc0 <netdev_set_addr_callback>:
 *
 * @param netdev the network interface device to change
 * @param addr_callback the callback be called when the address has been changed.
 */
void netdev_set_addr_callback(struct netdev *netdev, netdev_callback_fn addr_callback)
{
  105fc0:	e92d4800 	push	{fp, lr}
  105fc4:	e28db004 	add	fp, sp, #4
  105fc8:	e24dd008 	sub	sp, sp, #8
  105fcc:	e50b0008 	str	r0, [fp, #-8]
  105fd0:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105fd4:	e51b3008 	ldr	r3, [fp, #-8]
  105fd8:	e3530000 	cmp	r3, #0
  105fdc:	1a000005 	bne	105ff8 <netdev_set_addr_callback+0x38>
  105fe0:	e300224b 	movw	r2, #587	; 0x24b
  105fe4:	e3051eb8 	movw	r1, #24248	; 0x5eb8
  105fe8:	e3401014 	movt	r1, #20
  105fec:	e3050a80 	movw	r0, #23168	; 0x5a80
  105ff0:	e3400014 	movt	r0, #20
  105ff4:	ebfff567 	bl	103598 <rt_assert_handler>
    RT_ASSERT(addr_callback);
  105ff8:	e51b300c 	ldr	r3, [fp, #-12]
  105ffc:	e3530000 	cmp	r3, #0
  106000:	1a000005 	bne	10601c <netdev_set_addr_callback+0x5c>
  106004:	e3a02f93 	mov	r2, #588	; 0x24c
  106008:	e3051eb8 	movw	r1, #24248	; 0x5eb8
  10600c:	e3401014 	movt	r1, #20
  106010:	e3050dd0 	movw	r0, #24016	; 0x5dd0
  106014:	e3400014 	movt	r0, #20
  106018:	ebfff55e 	bl	103598 <rt_assert_handler>

    netdev->addr_callback = addr_callback;
  10601c:	e51b3008 	ldr	r3, [fp, #-8]
  106020:	e51b200c 	ldr	r2, [fp, #-12]
  106024:	e5832038 	str	r2, [r3, #56]	; 0x38
}
  106028:	e320f000 	nop	{0}
  10602c:	e24bd004 	sub	sp, fp, #4
  106030:	e8bd8800 	pop	{fp, pc}

00106034 <netdev_low_level_set_ipaddr>:
 *
 * @param netdev the network interface device to change
 * @param ipaddr the new IP address
 */
void netdev_low_level_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  106034:	e92d4800 	push	{fp, lr}
  106038:	e28db004 	add	fp, sp, #4
  10603c:	e24dd008 	sub	sp, sp, #8
  106040:	e50b0008 	str	r0, [fp, #-8]
  106044:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(ip_addr);
  106048:	e51b300c 	ldr	r3, [fp, #-12]
  10604c:	e3530000 	cmp	r3, #0
  106050:	1a000005 	bne	10606c <netdev_low_level_set_ipaddr+0x38>
  106054:	e300225b 	movw	r2, #603	; 0x25b
  106058:	e3051ed4 	movw	r1, #24276	; 0x5ed4
  10605c:	e3401014 	movt	r1, #20
  106060:	e3050b2c 	movw	r0, #23340	; 0x5b2c
  106064:	e3400014 	movt	r0, #20
  106068:	ebfff54a 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr) == 0)
  10606c:	e51b3008 	ldr	r3, [fp, #-8]
  106070:	e3530000 	cmp	r3, #0
  106074:	0a000025 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
  106078:	e51b3008 	ldr	r3, [fp, #-8]
  10607c:	e593200c 	ldr	r2, [r3, #12]
  106080:	e51b300c 	ldr	r3, [fp, #-12]
  106084:	e5933000 	ldr	r3, [r3]
  106088:	e1520003 	cmp	r2, r3
  10608c:	0a00001f 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
    {
        ip_addr_copy(netdev->ip_addr, *ip_addr);
  106090:	e51b300c 	ldr	r3, [fp, #-12]
  106094:	e5932000 	ldr	r2, [r3]
  106098:	e51b3008 	ldr	r3, [fp, #-8]
  10609c:	e583200c 	str	r2, [r3, #12]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev))
  1060a0:	e51b3008 	ldr	r3, [fp, #-8]
  1060a4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060a8:	e2033001 	and	r3, r3, #1
  1060ac:	e6ef3073 	uxtb	r3, r3
  1060b0:	e3530000 	cmp	r3, #0
  1060b4:	0a00000c 	beq	1060ec <netdev_low_level_set_ipaddr+0xb8>
  1060b8:	e51b3008 	ldr	r3, [fp, #-8]
  1060bc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060c0:	e1a03123 	lsr	r3, r3, #2
  1060c4:	e2033001 	and	r3, r3, #1
  1060c8:	e6ef3073 	uxtb	r3, r3
  1060cc:	e3530000 	cmp	r3, #0
  1060d0:	0a000005 	beq	1060ec <netdev_low_level_set_ipaddr+0xb8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1060d4:	e51b3008 	ldr	r3, [fp, #-8]
  1060d8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060dc:	e3833080 	orr	r3, r3, #128	; 0x80
  1060e0:	e6ff2073 	uxth	r2, r3
  1060e4:	e51b3008 	ldr	r3, [fp, #-8]
  1060e8:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute IP address change callback function */
        if (netdev->addr_callback)
  1060ec:	e51b3008 	ldr	r3, [fp, #-8]
  1060f0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1060f4:	e3530000 	cmp	r3, #0
  1060f8:	0a000004 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_IP);
  1060fc:	e51b3008 	ldr	r3, [fp, #-8]
  106100:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106104:	e3a01000 	mov	r1, #0
  106108:	e51b0008 	ldr	r0, [fp, #-8]
  10610c:	e12fff33 	blx	r3
        }
    }
}
  106110:	e320f000 	nop	{0}
  106114:	e24bd004 	sub	sp, fp, #4
  106118:	e8bd8800 	pop	{fp, pc}

0010611c <netdev_low_level_set_netmask>:
 *
 * @param netdev the network interface device to change
 * @param netmask the new netmask address
 */
void netdev_low_level_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  10611c:	e92d4800 	push	{fp, lr}
  106120:	e28db004 	add	fp, sp, #4
  106124:	e24dd008 	sub	sp, sp, #8
  106128:	e50b0008 	str	r0, [fp, #-8]
  10612c:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netmask);
  106130:	e51b300c 	ldr	r3, [fp, #-12]
  106134:	e3530000 	cmp	r3, #0
  106138:	1a000005 	bne	106154 <netdev_low_level_set_netmask+0x38>
  10613c:	e3a02f9f 	mov	r2, #636	; 0x27c
  106140:	e3051ef0 	movw	r1, #24304	; 0x5ef0
  106144:	e3401014 	movt	r1, #20
  106148:	e3050bcc 	movw	r0, #23500	; 0x5bcc
  10614c:	e3400014 	movt	r0, #20
  106150:	ebfff510 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->netmask), netmask) == 0)
  106154:	e51b3008 	ldr	r3, [fp, #-8]
  106158:	e3530000 	cmp	r3, #0
  10615c:	0a00002d 	beq	106218 <netdev_low_level_set_netmask+0xfc>
  106160:	e51b3008 	ldr	r3, [fp, #-8]
  106164:	e5932010 	ldr	r2, [r3, #16]
  106168:	e51b300c 	ldr	r3, [fp, #-12]
  10616c:	e5933000 	ldr	r3, [r3]
  106170:	e1520003 	cmp	r2, r3
  106174:	0a000027 	beq	106218 <netdev_low_level_set_netmask+0xfc>
    {
        ip_addr_copy(netdev->netmask, *netmask);
  106178:	e51b300c 	ldr	r3, [fp, #-12]
  10617c:	e5932000 	ldr	r2, [r3]
  106180:	e51b3008 	ldr	r3, [fp, #-8]
  106184:	e5832010 	str	r2, [r3, #16]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  106188:	e51b3008 	ldr	r3, [fp, #-8]
  10618c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106190:	e2033001 	and	r3, r3, #1
  106194:	e6ef3073 	uxtb	r3, r3
  106198:	e3530000 	cmp	r3, #0
  10619c:	0a000014 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
  1061a0:	e51b3008 	ldr	r3, [fp, #-8]
  1061a4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1061a8:	e1a03123 	lsr	r3, r3, #2
  1061ac:	e2033001 	and	r3, r3, #1
  1061b0:	e6ef3073 	uxtb	r3, r3
  1061b4:	e3530000 	cmp	r3, #0
  1061b8:	0a00000d 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1061bc:	e51b3008 	ldr	r3, [fp, #-8]
  1061c0:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  1061c4:	e3530000 	cmp	r3, #0
  1061c8:	0a000009 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1061cc:	e51b3008 	ldr	r3, [fp, #-8]
  1061d0:	e593300c 	ldr	r3, [r3, #12]
  1061d4:	e3530000 	cmp	r3, #0
  1061d8:	0a000005 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1061dc:	e51b3008 	ldr	r3, [fp, #-8]
  1061e0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1061e4:	e3833080 	orr	r3, r3, #128	; 0x80
  1061e8:	e6ff2073 	uxth	r2, r3
  1061ec:	e51b3008 	ldr	r3, [fp, #-8]
  1061f0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute netmask address change callback function */
        if (netdev->addr_callback)
  1061f4:	e51b3008 	ldr	r3, [fp, #-8]
  1061f8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1061fc:	e3530000 	cmp	r3, #0
  106200:	0a000004 	beq	106218 <netdev_low_level_set_netmask+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_NETMASK);
  106204:	e51b3008 	ldr	r3, [fp, #-8]
  106208:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10620c:	e3a01001 	mov	r1, #1
  106210:	e51b0008 	ldr	r0, [fp, #-8]
  106214:	e12fff33 	blx	r3
        }
    }
}
  106218:	e320f000 	nop	{0}
  10621c:	e24bd004 	sub	sp, fp, #4
  106220:	e8bd8800 	pop	{fp, pc}

00106224 <netdev_low_level_set_gw>:
 *
 * @param netdev the network interface device to change
 * @param gateway the new gateway address
 */
void netdev_low_level_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  106224:	e92d4800 	push	{fp, lr}
  106228:	e28db004 	add	fp, sp, #4
  10622c:	e24dd008 	sub	sp, sp, #8
  106230:	e50b0008 	str	r0, [fp, #-8]
  106234:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(gw);
  106238:	e51b300c 	ldr	r3, [fp, #-12]
  10623c:	e3530000 	cmp	r3, #0
  106240:	1a000005 	bne	10625c <netdev_low_level_set_gw+0x38>
  106244:	e300229e 	movw	r2, #670	; 0x29e
  106248:	e3051f10 	movw	r1, #24336	; 0x5f10
  10624c:	e3401014 	movt	r1, #20
  106250:	e3050c7c 	movw	r0, #23676	; 0x5c7c
  106254:	e3400014 	movt	r0, #20
  106258:	ebfff4ce 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->gw), gw) == 0)
  10625c:	e51b3008 	ldr	r3, [fp, #-8]
  106260:	e3530000 	cmp	r3, #0
  106264:	0a00002d 	beq	106320 <netdev_low_level_set_gw+0xfc>
  106268:	e51b3008 	ldr	r3, [fp, #-8]
  10626c:	e5932014 	ldr	r2, [r3, #20]
  106270:	e51b300c 	ldr	r3, [fp, #-12]
  106274:	e5933000 	ldr	r3, [r3]
  106278:	e1520003 	cmp	r2, r3
  10627c:	0a000027 	beq	106320 <netdev_low_level_set_gw+0xfc>
    {
        ip_addr_copy(netdev->gw, *gw);
  106280:	e51b300c 	ldr	r3, [fp, #-12]
  106284:	e5932000 	ldr	r2, [r3]
  106288:	e51b3008 	ldr	r3, [fp, #-8]
  10628c:	e5832014 	str	r2, [r3, #20]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  106290:	e51b3008 	ldr	r3, [fp, #-8]
  106294:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106298:	e2033001 	and	r3, r3, #1
  10629c:	e6ef3073 	uxtb	r3, r3
  1062a0:	e3530000 	cmp	r3, #0
  1062a4:	0a000014 	beq	1062fc <netdev_low_level_set_gw+0xd8>
  1062a8:	e51b3008 	ldr	r3, [fp, #-8]
  1062ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1062b0:	e1a03123 	lsr	r3, r3, #2
  1062b4:	e2033001 	and	r3, r3, #1
  1062b8:	e6ef3073 	uxtb	r3, r3
  1062bc:	e3530000 	cmp	r3, #0
  1062c0:	0a00000d 	beq	1062fc <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1062c4:	e51b3008 	ldr	r3, [fp, #-8]
  1062c8:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  1062cc:	e3530000 	cmp	r3, #0
  1062d0:	0a000009 	beq	1062fc <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1062d4:	e51b3008 	ldr	r3, [fp, #-8]
  1062d8:	e593300c 	ldr	r3, [r3, #12]
  1062dc:	e3530000 	cmp	r3, #0
  1062e0:	0a000005 	beq	1062fc <netdev_low_level_set_gw+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1062e4:	e51b3008 	ldr	r3, [fp, #-8]
  1062e8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1062ec:	e3833080 	orr	r3, r3, #128	; 0x80
  1062f0:	e6ff2073 	uxth	r2, r3
  1062f4:	e51b3008 	ldr	r3, [fp, #-8]
  1062f8:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute gateway address change callback function */
        if (netdev->addr_callback)
  1062fc:	e51b3008 	ldr	r3, [fp, #-8]
  106300:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106304:	e3530000 	cmp	r3, #0
  106308:	0a000004 	beq	106320 <netdev_low_level_set_gw+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_GATEWAY);
  10630c:	e51b3008 	ldr	r3, [fp, #-8]
  106310:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106314:	e3a01002 	mov	r1, #2
  106318:	e51b0008 	ldr	r0, [fp, #-8]
  10631c:	e12fff33 	blx	r3
        }
    }
}
  106320:	e320f000 	nop	{0}
  106324:	e24bd004 	sub	sp, fp, #4
  106328:	e8bd8800 	pop	{fp, pc}

0010632c <netdev_low_level_set_dns_server>:
 * @param netdev the network interface device to change
 * @param dns_server the new DNS server address
 *
 */
void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  10632c:	e92d4800 	push	{fp, lr}
  106330:	e28db004 	add	fp, sp, #4
  106334:	e24dd018 	sub	sp, sp, #24
  106338:	e50b0010 	str	r0, [fp, #-16]
  10633c:	e1a03001 	mov	r3, r1
  106340:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  106344:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    int index;

    RT_ASSERT(dns_server);
  106348:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10634c:	e3530000 	cmp	r3, #0
  106350:	1a000005 	bne	10636c <netdev_low_level_set_dns_server+0x40>
  106354:	e30022c3 	movw	r2, #707	; 0x2c3
  106358:	e3051f28 	movw	r1, #24360	; 0x5f28
  10635c:	e3401014 	movt	r1, #20
  106360:	e3050d28 	movw	r0, #23848	; 0x5d28
  106364:	e3400014 	movt	r0, #20
  106368:	ebfff48a 	bl	103598 <rt_assert_handler>

    if (netdev == RT_NULL)
  10636c:	e51b3010 	ldr	r3, [fp, #-16]
  106370:	e3530000 	cmp	r3, #0
  106374:	0a000023 	beq	106408 <netdev_low_level_set_dns_server+0xdc>
    {
        return;
    }
    /* check DNS servers is exist */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  106378:	e3a03000 	mov	r3, #0
  10637c:	e50b3008 	str	r3, [fp, #-8]
  106380:	ea00000a 	b	1063b0 <netdev_low_level_set_dns_server+0x84>
    {
        if (ip_addr_cmp(&(netdev->dns_servers[index]), dns_server))
  106384:	e51b3010 	ldr	r3, [fp, #-16]
  106388:	e51b2008 	ldr	r2, [fp, #-8]
  10638c:	e2822006 	add	r2, r2, #6
  106390:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  106394:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106398:	e5933000 	ldr	r3, [r3]
  10639c:	e1520003 	cmp	r2, r3
  1063a0:	0a00001a 	beq	106410 <netdev_low_level_set_dns_server+0xe4>
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  1063a4:	e51b3008 	ldr	r3, [fp, #-8]
  1063a8:	e2833001 	add	r3, r3, #1
  1063ac:	e50b3008 	str	r3, [fp, #-8]
  1063b0:	e51b3008 	ldr	r3, [fp, #-8]
  1063b4:	e3530001 	cmp	r3, #1
  1063b8:	9afffff1 	bls	106384 <netdev_low_level_set_dns_server+0x58>
        {
            return;
        }
    }

    if (dns_num < NETDEV_DNS_SERVERS_NUM)
  1063bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1063c0:	e3530001 	cmp	r3, #1
  1063c4:	8a000012 	bhi	106414 <netdev_low_level_set_dns_server+0xe8>
    {
        ip_addr_copy(netdev->dns_servers[dns_num], *dns_server);
  1063c8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1063cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1063d0:	e5931000 	ldr	r1, [r3]
  1063d4:	e51b3010 	ldr	r3, [fp, #-16]
  1063d8:	e2822006 	add	r2, r2, #6
  1063dc:	e7831102 	str	r1, [r3, r2, lsl #2]

        /* execute DNS servers address change callback function */
        if (netdev->addr_callback)
  1063e0:	e51b3010 	ldr	r3, [fp, #-16]
  1063e4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1063e8:	e3530000 	cmp	r3, #0
  1063ec:	0a000008 	beq	106414 <netdev_low_level_set_dns_server+0xe8>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_DNS_SERVER);
  1063f0:	e51b3010 	ldr	r3, [fp, #-16]
  1063f4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1063f8:	e3a01003 	mov	r1, #3
  1063fc:	e51b0010 	ldr	r0, [fp, #-16]
  106400:	e12fff33 	blx	r3
  106404:	ea000002 	b	106414 <netdev_low_level_set_dns_server+0xe8>
        return;
  106408:	e320f000 	nop	{0}
  10640c:	ea000000 	b	106414 <netdev_low_level_set_dns_server+0xe8>
            return;
  106410:	e320f000 	nop	{0}
        }
    }
}
  106414:	e24bd004 	sub	sp, fp, #4
  106418:	e8bd8800 	pop	{fp, pc}

0010641c <netdev_low_level_set_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new status
 */
void netdev_low_level_set_status(struct netdev *netdev, rt_bool_t is_up)
{
  10641c:	e92d4800 	push	{fp, lr}
  106420:	e28db004 	add	fp, sp, #4
  106424:	e24dd008 	sub	sp, sp, #8
  106428:	e50b0008 	str	r0, [fp, #-8]
  10642c:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_up(netdev) != is_up)
  106430:	e51b3008 	ldr	r3, [fp, #-8]
  106434:	e3530000 	cmp	r3, #0
  106438:	0a000024 	beq	1064d0 <netdev_low_level_set_status+0xb4>
  10643c:	e51b3008 	ldr	r3, [fp, #-8]
  106440:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106444:	e2033001 	and	r3, r3, #1
  106448:	e51b200c 	ldr	r2, [fp, #-12]
  10644c:	e1520003 	cmp	r2, r3
  106450:	0a00001e 	beq	1064d0 <netdev_low_level_set_status+0xb4>
    {
        if (is_up)
  106454:	e51b300c 	ldr	r3, [fp, #-12]
  106458:	e3530000 	cmp	r3, #0
  10645c:	0a000006 	beq	10647c <netdev_low_level_set_status+0x60>
        {
            netdev->flags |= NETDEV_FLAG_UP;
  106460:	e51b3008 	ldr	r3, [fp, #-8]
  106464:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106468:	e3833001 	orr	r3, r3, #1
  10646c:	e6ff2073 	uxth	r2, r3
  106470:	e51b3008 	ldr	r3, [fp, #-8]
  106474:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106478:	ea000005 	b	106494 <netdev_low_level_set_status+0x78>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_UP;
  10647c:	e51b3008 	ldr	r3, [fp, #-8]
  106480:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106484:	e3c33001 	bic	r3, r3, #1
  106488:	e6ff2073 	uxth	r2, r3
  10648c:	e51b3008 	ldr	r3, [fp, #-8]
  106490:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */
        }

        /* execute  network interface device status change callback function */
        if (netdev->status_callback)
  106494:	e51b3008 	ldr	r3, [fp, #-8]
  106498:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10649c:	e3530000 	cmp	r3, #0
  1064a0:	0a00000a 	beq	1064d0 <netdev_low_level_set_status+0xb4>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_UP : NETDEV_CB_STATUS_DOWN);
  1064a4:	e51b3008 	ldr	r3, [fp, #-8]
  1064a8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1064ac:	e51b200c 	ldr	r2, [fp, #-12]
  1064b0:	e3520000 	cmp	r2, #0
  1064b4:	0a000001 	beq	1064c0 <netdev_low_level_set_status+0xa4>
  1064b8:	e3a02004 	mov	r2, #4
  1064bc:	ea000000 	b	1064c4 <netdev_low_level_set_status+0xa8>
  1064c0:	e3a02005 	mov	r2, #5
  1064c4:	e1a01002 	mov	r1, r2
  1064c8:	e51b0008 	ldr	r0, [fp, #-8]
  1064cc:	e12fff33 	blx	r3
        }
    }
}
  1064d0:	e320f000 	nop	{0}
  1064d4:	e24bd004 	sub	sp, fp, #4
  1064d8:	e8bd8800 	pop	{fp, pc}

001064dc <netdev_low_level_set_link_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new link status
 */
void netdev_low_level_set_link_status(struct netdev *netdev, rt_bool_t is_up)
{
  1064dc:	e92d4800 	push	{fp, lr}
  1064e0:	e28db004 	add	fp, sp, #4
  1064e4:	e24dd008 	sub	sp, sp, #8
  1064e8:	e50b0008 	str	r0, [fp, #-8]
  1064ec:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_link_up(netdev) != is_up)
  1064f0:	e51b3008 	ldr	r3, [fp, #-8]
  1064f4:	e3530000 	cmp	r3, #0
  1064f8:	0a00003f 	beq	1065fc <netdev_low_level_set_link_status+0x120>
  1064fc:	e51b3008 	ldr	r3, [fp, #-8]
  106500:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106504:	e1a03123 	lsr	r3, r3, #2
  106508:	e2033001 	and	r3, r3, #1
  10650c:	e51b200c 	ldr	r2, [fp, #-12]
  106510:	e1520003 	cmp	r2, r3
  106514:	0a000038 	beq	1065fc <netdev_low_level_set_link_status+0x120>
    {
        if (is_up)
  106518:	e51b300c 	ldr	r3, [fp, #-12]
  10651c:	e3530000 	cmp	r3, #0
  106520:	0a00001a 	beq	106590 <netdev_low_level_set_link_status+0xb4>
        {
            netdev->flags |= NETDEV_FLAG_LINK_UP;
  106524:	e51b3008 	ldr	r3, [fp, #-8]
  106528:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10652c:	e3833004 	orr	r3, r3, #4
  106530:	e6ff2073 	uxth	r2, r3
  106534:	e51b3008 	ldr	r3, [fp, #-8]
  106538:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

#ifdef RT_USING_SAL
            /* set network interface device flags to internet up */
            if (netdev_is_up(netdev) && !ip_addr_isany(&(netdev->ip_addr)))
  10653c:	e51b3008 	ldr	r3, [fp, #-8]
  106540:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106544:	e2033001 	and	r3, r3, #1
  106548:	e6ef3073 	uxtb	r3, r3
  10654c:	e3530000 	cmp	r3, #0
  106550:	0a00001a 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
  106554:	e51b3008 	ldr	r3, [fp, #-8]
  106558:	e283300c 	add	r3, r3, #12
  10655c:	e3530000 	cmp	r3, #0
  106560:	0a000016 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
  106564:	e51b3008 	ldr	r3, [fp, #-8]
  106568:	e593300c 	ldr	r3, [r3, #12]
  10656c:	e3530000 	cmp	r3, #0
  106570:	0a000012 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
            {
                // sal_check_netdev_internet_up(netdev);
                // check_netdev_internet_up_work(netdev);
                netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  106574:	e51b3008 	ldr	r3, [fp, #-8]
  106578:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10657c:	e3833080 	orr	r3, r3, #128	; 0x80
  106580:	e6ff2073 	uxth	r2, r3
  106584:	e51b3008 	ldr	r3, [fp, #-8]
  106588:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  10658c:	ea00000b 	b	1065c0 <netdev_low_level_set_link_status+0xe4>
            }
#endif /* RT_USING_SAL */
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_LINK_UP;
  106590:	e51b3008 	ldr	r3, [fp, #-8]
  106594:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106598:	e3c33004 	bic	r3, r3, #4
  10659c:	e6ff2073 	uxth	r2, r3
  1065a0:	e51b3008 	ldr	r3, [fp, #-8]
  1065a4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

            /* set network interface device flags to internet down */
            netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  1065a8:	e51b3008 	ldr	r3, [fp, #-8]
  1065ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1065b0:	e3c33080 	bic	r3, r3, #128	; 0x80
  1065b4:	e6ff2073 	uxth	r2, r3
  1065b8:	e51b3008 	ldr	r3, [fp, #-8]
  1065bc:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            /* change to the first link_up network interface device automatically */
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */

        /* execute link status change callback function */
        if (netdev->status_callback)
  1065c0:	e51b3008 	ldr	r3, [fp, #-8]
  1065c4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1065c8:	e3530000 	cmp	r3, #0
  1065cc:	0a00000a 	beq	1065fc <netdev_low_level_set_link_status+0x120>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_LINK_UP : NETDEV_CB_STATUS_LINK_DOWN);
  1065d0:	e51b3008 	ldr	r3, [fp, #-8]
  1065d4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1065d8:	e51b200c 	ldr	r2, [fp, #-12]
  1065dc:	e3520000 	cmp	r2, #0
  1065e0:	0a000001 	beq	1065ec <netdev_low_level_set_link_status+0x110>
  1065e4:	e3a02006 	mov	r2, #6
  1065e8:	ea000000 	b	1065f0 <netdev_low_level_set_link_status+0x114>
  1065ec:	e3a02007 	mov	r2, #7
  1065f0:	e1a01002 	mov	r1, r2
  1065f4:	e51b0008 	ldr	r0, [fp, #-8]
  1065f8:	e12fff33 	blx	r3
        }
    }
}
  1065fc:	e320f000 	nop	{0}
  106600:	e24bd004 	sub	sp, fp, #4
  106604:	e8bd8800 	pop	{fp, pc}

00106608 <netdev_low_level_set_dhcp_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new DHCP status
 */
void netdev_low_level_set_dhcp_status(struct netdev *netdev, rt_bool_t is_enable)
{
  106608:	e92d4800 	push	{fp, lr}
  10660c:	e28db004 	add	fp, sp, #4
  106610:	e24dd008 	sub	sp, sp, #8
  106614:	e50b0008 	str	r0, [fp, #-8]
  106618:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_dhcp_enabled(netdev) != is_enable)
  10661c:	e51b3008 	ldr	r3, [fp, #-8]
  106620:	e3530000 	cmp	r3, #0
  106624:	0a000025 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
  106628:	e51b3008 	ldr	r3, [fp, #-8]
  10662c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106630:	e1a03423 	lsr	r3, r3, #8
  106634:	e2033001 	and	r3, r3, #1
  106638:	e51b200c 	ldr	r2, [fp, #-12]
  10663c:	e1520003 	cmp	r2, r3
  106640:	0a00001e 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
    {
        if (is_enable)
  106644:	e51b300c 	ldr	r3, [fp, #-12]
  106648:	e3530000 	cmp	r3, #0
  10664c:	0a000006 	beq	10666c <netdev_low_level_set_dhcp_status+0x64>
        {
            netdev->flags |= NETDEV_FLAG_DHCP;
  106650:	e51b3008 	ldr	r3, [fp, #-8]
  106654:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106658:	e3833c01 	orr	r3, r3, #256	; 0x100
  10665c:	e6ff2073 	uxth	r2, r3
  106660:	e51b3008 	ldr	r3, [fp, #-8]
  106664:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106668:	ea000005 	b	106684 <netdev_low_level_set_dhcp_status+0x7c>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_DHCP;
  10666c:	e51b3008 	ldr	r3, [fp, #-8]
  106670:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106674:	e3c33c01 	bic	r3, r3, #256	; 0x100
  106678:	e6ff2073 	uxth	r2, r3
  10667c:	e51b3008 	ldr	r3, [fp, #-8]
  106680:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }

        /* execute DHCP status change callback function */
        if (netdev->status_callback)
  106684:	e51b3008 	ldr	r3, [fp, #-8]
  106688:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10668c:	e3530000 	cmp	r3, #0
  106690:	0a00000a 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
        {
            netdev->status_callback(netdev, is_enable ? NETDEV_CB_STATUS_DHCP_ENABLE : NETDEV_CB_STATUS_DHCP_DISABLE);
  106694:	e51b3008 	ldr	r3, [fp, #-8]
  106698:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10669c:	e51b200c 	ldr	r2, [fp, #-12]
  1066a0:	e3520000 	cmp	r2, #0
  1066a4:	0a000001 	beq	1066b0 <netdev_low_level_set_dhcp_status+0xa8>
  1066a8:	e3a0200a 	mov	r2, #10
  1066ac:	ea000000 	b	1066b4 <netdev_low_level_set_dhcp_status+0xac>
  1066b0:	e3a0200b 	mov	r2, #11
  1066b4:	e1a01002 	mov	r1, r2
  1066b8:	e51b0008 	ldr	r0, [fp, #-8]
  1066bc:	e12fff33 	blx	r3
        }
    }
}
  1066c0:	e320f000 	nop	{0}
  1066c4:	e24bd004 	sub	sp, fp, #4
  1066c8:	e8bd8800 	pop	{fp, pc}

001066cc <netdev_ip4addr_aton>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int netdev_ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  1066cc:	e92d4800 	push	{fp, lr}
  1066d0:	e28db004 	add	fp, sp, #4
  1066d4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1066d8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1066dc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    uint32_t val;
    uint8_t base;
    char c;
    uint32_t parts[4];
    uint32_t *pp = parts;
  1066e0:	e24b3020 	sub	r3, fp, #32
  1066e4:	e50b3010 	str	r3, [fp, #-16]

    c = *cp;
  1066e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1066ec:	e5d33000 	ldrb	r3, [r3]
  1066f0:	e54b300a 	strb	r3, [fp, #-10]
        /*
         * Collect number up to ``.''.
         * Values are specified as for C:
         * 0x=hex, 0=octal, 1-9=decimal.
         */
        if (!isdigit(c))
  1066f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1066f8:	e353002f 	cmp	r3, #47	; 0x2f
  1066fc:	9a000002 	bls	10670c <netdev_ip4addr_aton+0x40>
  106700:	e55b300a 	ldrb	r3, [fp, #-10]
  106704:	e3530039 	cmp	r3, #57	; 0x39
  106708:	9a000001 	bls	106714 <netdev_ip4addr_aton+0x48>
        {
            return 0;
  10670c:	e3a03000 	mov	r3, #0
  106710:	ea0000f7 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val = 0;
  106714:	e3a03000 	mov	r3, #0
  106718:	e50b3008 	str	r3, [fp, #-8]
        base = 10;
  10671c:	e3a0300a 	mov	r3, #10
  106720:	e54b3009 	strb	r3, [fp, #-9]
        if (c == '0')
  106724:	e55b300a 	ldrb	r3, [fp, #-10]
  106728:	e3530030 	cmp	r3, #48	; 0x30
  10672c:	1a000016 	bne	10678c <netdev_ip4addr_aton+0xc0>
        {
            c = *++cp;
  106730:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106734:	e2833001 	add	r3, r3, #1
  106738:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  10673c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106740:	e5d33000 	ldrb	r3, [r3]
  106744:	e54b300a 	strb	r3, [fp, #-10]
            if (c == 'x' || c == 'X')
  106748:	e55b300a 	ldrb	r3, [fp, #-10]
  10674c:	e3530078 	cmp	r3, #120	; 0x78
  106750:	0a000002 	beq	106760 <netdev_ip4addr_aton+0x94>
  106754:	e55b300a 	ldrb	r3, [fp, #-10]
  106758:	e3530058 	cmp	r3, #88	; 0x58
  10675c:	1a000008 	bne	106784 <netdev_ip4addr_aton+0xb8>
            {
                base = 16;
  106760:	e3a03010 	mov	r3, #16
  106764:	e54b3009 	strb	r3, [fp, #-9]
                c = *++cp;
  106768:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10676c:	e2833001 	add	r3, r3, #1
  106770:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  106774:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106778:	e5d33000 	ldrb	r3, [r3]
  10677c:	e54b300a 	strb	r3, [fp, #-10]
  106780:	ea000001 	b	10678c <netdev_ip4addr_aton+0xc0>
            }
            else
            {
                base = 8;
  106784:	e3a03008 	mov	r3, #8
  106788:	e54b3009 	strb	r3, [fp, #-9]
            }
        }
        for (;;)
        {
            if (isdigit(c))
  10678c:	e55b300a 	ldrb	r3, [fp, #-10]
  106790:	e353002f 	cmp	r3, #47	; 0x2f
  106794:	9a000010 	bls	1067dc <netdev_ip4addr_aton+0x110>
  106798:	e55b300a 	ldrb	r3, [fp, #-10]
  10679c:	e3530039 	cmp	r3, #57	; 0x39
  1067a0:	8a00000d 	bhi	1067dc <netdev_ip4addr_aton+0x110>
            {
                val = (val * base) + (uint32_t) (c - '0');
  1067a4:	e55b3009 	ldrb	r3, [fp, #-9]
  1067a8:	e51b2008 	ldr	r2, [fp, #-8]
  1067ac:	e0020392 	mul	r2, r2, r3
  1067b0:	e55b300a 	ldrb	r3, [fp, #-10]
  1067b4:	e0823003 	add	r3, r2, r3
  1067b8:	e2433030 	sub	r3, r3, #48	; 0x30
  1067bc:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  1067c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1067c4:	e2833001 	add	r3, r3, #1
  1067c8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1067cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1067d0:	e5d33000 	ldrb	r3, [r3]
  1067d4:	e54b300a 	strb	r3, [fp, #-10]
  1067d8:	ea00002a 	b	106888 <netdev_ip4addr_aton+0x1bc>
            }
            else if (base == 16 && isxdigit(c))
  1067dc:	e55b3009 	ldrb	r3, [fp, #-9]
  1067e0:	e3530010 	cmp	r3, #16
  1067e4:	1a000028 	bne	10688c <netdev_ip4addr_aton+0x1c0>
  1067e8:	e55b300a 	ldrb	r3, [fp, #-10]
  1067ec:	e353002f 	cmp	r3, #47	; 0x2f
  1067f0:	9a000002 	bls	106800 <netdev_ip4addr_aton+0x134>
  1067f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1067f8:	e3530039 	cmp	r3, #57	; 0x39
  1067fc:	9a00000b 	bls	106830 <netdev_ip4addr_aton+0x164>
  106800:	e55b300a 	ldrb	r3, [fp, #-10]
  106804:	e3530060 	cmp	r3, #96	; 0x60
  106808:	9a000002 	bls	106818 <netdev_ip4addr_aton+0x14c>
  10680c:	e55b300a 	ldrb	r3, [fp, #-10]
  106810:	e3530066 	cmp	r3, #102	; 0x66
  106814:	9a000005 	bls	106830 <netdev_ip4addr_aton+0x164>
  106818:	e55b300a 	ldrb	r3, [fp, #-10]
  10681c:	e3530040 	cmp	r3, #64	; 0x40
  106820:	9a000019 	bls	10688c <netdev_ip4addr_aton+0x1c0>
  106824:	e55b300a 	ldrb	r3, [fp, #-10]
  106828:	e3530046 	cmp	r3, #70	; 0x46
  10682c:	8a000016 	bhi	10688c <netdev_ip4addr_aton+0x1c0>
            {
                val = (val << 4) | (uint32_t) (c + 10 - (islower(c) ? 'a' : 'A'));
  106830:	e51b3008 	ldr	r3, [fp, #-8]
  106834:	e1a03203 	lsl	r3, r3, #4
  106838:	e55b200a 	ldrb	r2, [fp, #-10]
  10683c:	e282100a 	add	r1, r2, #10
  106840:	e55b200a 	ldrb	r2, [fp, #-10]
  106844:	e3520060 	cmp	r2, #96	; 0x60
  106848:	9a000004 	bls	106860 <netdev_ip4addr_aton+0x194>
  10684c:	e55b200a 	ldrb	r2, [fp, #-10]
  106850:	e352007a 	cmp	r2, #122	; 0x7a
  106854:	8a000001 	bhi	106860 <netdev_ip4addr_aton+0x194>
  106858:	e3a02061 	mov	r2, #97	; 0x61
  10685c:	ea000000 	b	106864 <netdev_ip4addr_aton+0x198>
  106860:	e3a02041 	mov	r2, #65	; 0x41
  106864:	e0412002 	sub	r2, r1, r2
  106868:	e1833002 	orr	r3, r3, r2
  10686c:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  106870:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106874:	e2833001 	add	r3, r3, #1
  106878:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  10687c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106880:	e5d33000 	ldrb	r3, [r3]
  106884:	e54b300a 	strb	r3, [fp, #-10]
            if (isdigit(c))
  106888:	eaffffbf 	b	10678c <netdev_ip4addr_aton+0xc0>
            else
            {
                break;
            }
        }
        if (c == '.')
  10688c:	e55b300a 	ldrb	r3, [fp, #-10]
  106890:	e353002e 	cmp	r3, #46	; 0x2e
  106894:	1a000012 	bne	1068e4 <netdev_ip4addr_aton+0x218>
             * Internet format:
             *  a.b.c.d
             *  a.b.c   (with c treated as 16 bits)
             *  a.b (with b treated as 24 bits)
             */
            if (pp >= parts + 3)
  106898:	e24b3020 	sub	r3, fp, #32
  10689c:	e283300c 	add	r3, r3, #12
  1068a0:	e51b2010 	ldr	r2, [fp, #-16]
  1068a4:	e1520003 	cmp	r2, r3
  1068a8:	3a000001 	bcc	1068b4 <netdev_ip4addr_aton+0x1e8>
            {
                return 0;
  1068ac:	e3a03000 	mov	r3, #0
  1068b0:	ea00008f 	b	106af4 <netdev_ip4addr_aton+0x428>
            }
            *pp++ = val;
  1068b4:	e51b3010 	ldr	r3, [fp, #-16]
  1068b8:	e2832004 	add	r2, r3, #4
  1068bc:	e50b2010 	str	r2, [fp, #-16]
  1068c0:	e51b2008 	ldr	r2, [fp, #-8]
  1068c4:	e5832000 	str	r2, [r3]
            c = *++cp;
  1068c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1068cc:	e2833001 	add	r3, r3, #1
  1068d0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1068d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1068d8:	e5d33000 	ldrb	r3, [r3]
  1068dc:	e54b300a 	strb	r3, [fp, #-10]
        if (!isdigit(c))
  1068e0:	eaffff83 	b	1066f4 <netdev_ip4addr_aton+0x28>
        }
        else
        {
            break;
  1068e4:	e320f000 	nop	{0}
        }
    }
    /*
     * Check for trailing characters.
     */
    if (c != '\0' && !isspace(c))
  1068e8:	e55b300a 	ldrb	r3, [fp, #-10]
  1068ec:	e3530000 	cmp	r3, #0
  1068f0:	0a000013 	beq	106944 <netdev_ip4addr_aton+0x278>
  1068f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1068f8:	e3530020 	cmp	r3, #32
  1068fc:	0a000010 	beq	106944 <netdev_ip4addr_aton+0x278>
  106900:	e55b300a 	ldrb	r3, [fp, #-10]
  106904:	e353000c 	cmp	r3, #12
  106908:	0a00000d 	beq	106944 <netdev_ip4addr_aton+0x278>
  10690c:	e55b300a 	ldrb	r3, [fp, #-10]
  106910:	e353000a 	cmp	r3, #10
  106914:	0a00000a 	beq	106944 <netdev_ip4addr_aton+0x278>
  106918:	e55b300a 	ldrb	r3, [fp, #-10]
  10691c:	e353000d 	cmp	r3, #13
  106920:	0a000007 	beq	106944 <netdev_ip4addr_aton+0x278>
  106924:	e55b300a 	ldrb	r3, [fp, #-10]
  106928:	e3530009 	cmp	r3, #9
  10692c:	0a000004 	beq	106944 <netdev_ip4addr_aton+0x278>
  106930:	e55b300a 	ldrb	r3, [fp, #-10]
  106934:	e353000b 	cmp	r3, #11
  106938:	0a000001 	beq	106944 <netdev_ip4addr_aton+0x278>
    {
        return 0;
  10693c:	e3a03000 	mov	r3, #0
  106940:	ea00006b 	b	106af4 <netdev_ip4addr_aton+0x428>
    }
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
    switch (pp - parts + 1)
  106944:	e51b2010 	ldr	r2, [fp, #-16]
  106948:	e24b3020 	sub	r3, fp, #32
  10694c:	e0423003 	sub	r3, r2, r3
  106950:	e1a03143 	asr	r3, r3, #2
  106954:	e2833001 	add	r3, r3, #1
  106958:	e3530004 	cmp	r3, #4
  10695c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  106960:	ea000048 	b	106a88 <netdev_ip4addr_aton+0x3bc>
  106964:	00106978 	.word	0x00106978
  106968:	00106aa4 	.word	0x00106aa4
  10696c:	00106980 	.word	0x00106980
  106970:	001069c0 	.word	0x001069c0
  106974:	00106a18 	.word	0x00106a18
    {

    case 0:
        return 0; /* initial nondigit */
  106978:	e3a03000 	mov	r3, #0
  10697c:	ea00005c 	b	106af4 <netdev_ip4addr_aton+0x428>

    case 1: /* a -- 32 bits */
        break;

    case 2: /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
  106980:	e51b3008 	ldr	r3, [fp, #-8]
  106984:	e3530401 	cmp	r3, #16777216	; 0x1000000
  106988:	3a000001 	bcc	106994 <netdev_ip4addr_aton+0x2c8>
        {
            return 0;
  10698c:	e3a03000 	mov	r3, #0
  106990:	ea000057 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if (parts[0] > 0xff)
  106994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106998:	e35300ff 	cmp	r3, #255	; 0xff
  10699c:	9a000001 	bls	1069a8 <netdev_ip4addr_aton+0x2dc>
        {
            return 0;
  1069a0:	e3a03000 	mov	r3, #0
  1069a4:	ea000052 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= parts[0] << 24;
  1069a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069ac:	e1a03c03 	lsl	r3, r3, #24
  1069b0:	e51b2008 	ldr	r2, [fp, #-8]
  1069b4:	e1823003 	orr	r3, r2, r3
  1069b8:	e50b3008 	str	r3, [fp, #-8]
        break;
  1069bc:	ea000039 	b	106aa8 <netdev_ip4addr_aton+0x3dc>

    case 3: /* a.b.c -- 8.8.16 bits */
        if (val > 0xffff)
  1069c0:	e51b3008 	ldr	r3, [fp, #-8]
  1069c4:	e3530801 	cmp	r3, #65536	; 0x10000
  1069c8:	3a000001 	bcc	1069d4 <netdev_ip4addr_aton+0x308>
        {
            return 0;
  1069cc:	e3a03000 	mov	r3, #0
  1069d0:	ea000047 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff))
  1069d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069d8:	e35300ff 	cmp	r3, #255	; 0xff
  1069dc:	8a000002 	bhi	1069ec <netdev_ip4addr_aton+0x320>
  1069e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1069e4:	e35300ff 	cmp	r3, #255	; 0xff
  1069e8:	9a000001 	bls	1069f4 <netdev_ip4addr_aton+0x328>
        {
            return 0;
  1069ec:	e3a03000 	mov	r3, #0
  1069f0:	ea00003f 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16);
  1069f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069f8:	e1a02c03 	lsl	r2, r3, #24
  1069fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a00:	e1a03803 	lsl	r3, r3, #16
  106a04:	e1823003 	orr	r3, r2, r3
  106a08:	e51b2008 	ldr	r2, [fp, #-8]
  106a0c:	e1823003 	orr	r3, r2, r3
  106a10:	e50b3008 	str	r3, [fp, #-8]
        break;
  106a14:	ea000023 	b	106aa8 <netdev_ip4addr_aton+0x3dc>

    case 4: /* a.b.c.d -- 8.8.8.8 bits */
        if (val > 0xff)
  106a18:	e51b3008 	ldr	r3, [fp, #-8]
  106a1c:	e35300ff 	cmp	r3, #255	; 0xff
  106a20:	9a000001 	bls	106a2c <netdev_ip4addr_aton+0x360>
        {
            return 0;
  106a24:	e3a03000 	mov	r3, #0
  106a28:	ea000031 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff))
  106a2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a30:	e35300ff 	cmp	r3, #255	; 0xff
  106a34:	8a000005 	bhi	106a50 <netdev_ip4addr_aton+0x384>
  106a38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a3c:	e35300ff 	cmp	r3, #255	; 0xff
  106a40:	8a000002 	bhi	106a50 <netdev_ip4addr_aton+0x384>
  106a44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106a48:	e35300ff 	cmp	r3, #255	; 0xff
  106a4c:	9a000001 	bls	106a58 <netdev_ip4addr_aton+0x38c>
        {
            return 0;
  106a50:	e3a03000 	mov	r3, #0
  106a54:	ea000026 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  106a58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a5c:	e1a02c03 	lsl	r2, r3, #24
  106a60:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a64:	e1a03803 	lsl	r3, r3, #16
  106a68:	e1822003 	orr	r2, r2, r3
  106a6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106a70:	e1a03403 	lsl	r3, r3, #8
  106a74:	e1823003 	orr	r3, r2, r3
  106a78:	e51b2008 	ldr	r2, [fp, #-8]
  106a7c:	e1823003 	orr	r3, r2, r3
  106a80:	e50b3008 	str	r3, [fp, #-8]
        break;
  106a84:	ea000007 	b	106aa8 <netdev_ip4addr_aton+0x3dc>
    default:
        RT_ASSERT(0);
  106a88:	e3a020a7 	mov	r2, #167	; 0xa7
  106a8c:	e3051f4c 	movw	r1, #24396	; 0x5f4c
  106a90:	e3401014 	movt	r1, #20
  106a94:	e3050f48 	movw	r0, #24392	; 0x5f48
  106a98:	e3400014 	movt	r0, #20
  106a9c:	ebfff2bd 	bl	103598 <rt_assert_handler>
        break;
  106aa0:	ea000000 	b	106aa8 <netdev_ip4addr_aton+0x3dc>
        break;
  106aa4:	e320f000 	nop	{0}
    }
    if (addr)
  106aa8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106aac:	e3530000 	cmp	r3, #0
  106ab0:	0a00000e 	beq	106af0 <netdev_ip4addr_aton+0x424>
    {
        ip4_addr_set_u32(addr, htonl(val));
  106ab4:	e51b3008 	ldr	r3, [fp, #-8]
  106ab8:	e1a02c03 	lsl	r2, r3, #24
  106abc:	e51b3008 	ldr	r3, [fp, #-8]
  106ac0:	e1a03403 	lsl	r3, r3, #8
  106ac4:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  106ac8:	e1822003 	orr	r2, r2, r3
  106acc:	e51b3008 	ldr	r3, [fp, #-8]
  106ad0:	e1a03423 	lsr	r3, r3, #8
  106ad4:	e2033cff 	and	r3, r3, #65280	; 0xff00
  106ad8:	e1822003 	orr	r2, r2, r3
  106adc:	e51b3008 	ldr	r3, [fp, #-8]
  106ae0:	e1a03c23 	lsr	r3, r3, #24
  106ae4:	e1822003 	orr	r2, r2, r3
  106ae8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106aec:	e5832000 	str	r2, [r3]
    }
    return 1;
  106af0:	e3a03001 	mov	r3, #1
}
  106af4:	e1a00003 	mov	r0, r3
  106af8:	e24bd004 	sub	sp, fp, #4
  106afc:	e8bd8800 	pop	{fp, pc}

00106b00 <netdev_ip4addr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *netdev_ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  106b00:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  106b04:	e28db000 	add	fp, sp, #0
  106b08:	e24dd034 	sub	sp, sp, #52	; 0x34
  106b0c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  106b10:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  106b14:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    char *rp;
    uint8_t *ap;
    uint8_t rem;
    uint8_t n;
    uint8_t i;
    int len = 0;
  106b18:	e3a03000 	mov	r3, #0
  106b1c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    s_addr = ip4_addr_get_u32(addr);
  106b20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106b24:	e5933000 	ldr	r3, [r3]
  106b28:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    rp = buf;
  106b2c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106b30:	e50b3008 	str	r3, [fp, #-8]
    ap = (uint8_t *) &s_addr;
  106b34:	e24b301c 	sub	r3, fp, #28
  106b38:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  106b3c:	e3a03000 	mov	r3, #0
  106b40:	e54b300d 	strb	r3, [fp, #-13]
  106b44:	ea00004b 	b	106c78 <netdev_ip4addr_ntoa_r+0x178>
    {
        i = 0;
  106b48:	e3a03000 	mov	r3, #0
  106b4c:	e54b300e 	strb	r3, [fp, #-14]
        do
        {
            rem = *ap % (uint8_t) 10;
  106b50:	e51b300c 	ldr	r3, [fp, #-12]
  106b54:	e5d31000 	ldrb	r1, [r3]
  106b58:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  106b5c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106b60:	e0832391 	umull	r2, r3, r1, r3
  106b64:	e1a031a3 	lsr	r3, r3, #3
  106b68:	e3a0200a 	mov	r2, #10
  106b6c:	e0030392 	mul	r3, r2, r3
  106b70:	e0413003 	sub	r3, r1, r3
  106b74:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            *ap /= (uint8_t) 10;
  106b78:	e51b300c 	ldr	r3, [fp, #-12]
  106b7c:	e5d32000 	ldrb	r2, [r3]
  106b80:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  106b84:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106b88:	e0832392 	umull	r2, r3, r2, r3
  106b8c:	e1a031a3 	lsr	r3, r3, #3
  106b90:	e6ef2073 	uxtb	r2, r3
  106b94:	e51b300c 	ldr	r3, [fp, #-12]
  106b98:	e5c32000 	strb	r2, [r3]
            inv[i++] = (char) ('0' + rem);
  106b9c:	e55b300e 	ldrb	r3, [fp, #-14]
  106ba0:	e2832001 	add	r2, r3, #1
  106ba4:	e54b200e 	strb	r2, [fp, #-14]
  106ba8:	e1a01003 	mov	r1, r3
  106bac:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  106bb0:	e2833030 	add	r3, r3, #48	; 0x30
  106bb4:	e6ef2073 	uxtb	r2, r3
  106bb8:	e24b3004 	sub	r3, fp, #4
  106bbc:	e0833001 	add	r3, r3, r1
  106bc0:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
        } while (*ap);
  106bc4:	e51b300c 	ldr	r3, [fp, #-12]
  106bc8:	e5d33000 	ldrb	r3, [r3]
  106bcc:	e3530000 	cmp	r3, #0
  106bd0:	1affffde 	bne	106b50 <netdev_ip4addr_ntoa_r+0x50>
        while (i--)
  106bd4:	ea00000f 	b	106c18 <netdev_ip4addr_ntoa_r+0x118>
        {
            if (len++ >= buflen)
  106bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106bdc:	e2832001 	add	r2, r3, #1
  106be0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  106be4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  106be8:	e1520003 	cmp	r2, r3
  106bec:	ca000001 	bgt	106bf8 <netdev_ip4addr_ntoa_r+0xf8>
            {
                return NULL;
  106bf0:	e3a03000 	mov	r3, #0
  106bf4:	ea000029 	b	106ca0 <netdev_ip4addr_ntoa_r+0x1a0>
            }
            *rp++ = inv[i];
  106bf8:	e55b200e 	ldrb	r2, [fp, #-14]
  106bfc:	e51b3008 	ldr	r3, [fp, #-8]
  106c00:	e2831001 	add	r1, r3, #1
  106c04:	e50b1008 	str	r1, [fp, #-8]
  106c08:	e24b1004 	sub	r1, fp, #4
  106c0c:	e0812002 	add	r2, r1, r2
  106c10:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  106c14:	e5c32000 	strb	r2, [r3]
        while (i--)
  106c18:	e55b300e 	ldrb	r3, [fp, #-14]
  106c1c:	e2432001 	sub	r2, r3, #1
  106c20:	e54b200e 	strb	r2, [fp, #-14]
  106c24:	e3530000 	cmp	r3, #0
  106c28:	1affffea 	bne	106bd8 <netdev_ip4addr_ntoa_r+0xd8>
        }
        if (len++ >= buflen)
  106c2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106c30:	e2832001 	add	r2, r3, #1
  106c34:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  106c38:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  106c3c:	e1520003 	cmp	r2, r3
  106c40:	ca000001 	bgt	106c4c <netdev_ip4addr_ntoa_r+0x14c>
        {
            return NULL;
  106c44:	e3a03000 	mov	r3, #0
  106c48:	ea000014 	b	106ca0 <netdev_ip4addr_ntoa_r+0x1a0>
        }
        *rp++ = '.';
  106c4c:	e51b3008 	ldr	r3, [fp, #-8]
  106c50:	e2832001 	add	r2, r3, #1
  106c54:	e50b2008 	str	r2, [fp, #-8]
  106c58:	e3a0202e 	mov	r2, #46	; 0x2e
  106c5c:	e5c32000 	strb	r2, [r3]
        ap++;
  106c60:	e51b300c 	ldr	r3, [fp, #-12]
  106c64:	e2833001 	add	r3, r3, #1
  106c68:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  106c6c:	e55b300d 	ldrb	r3, [fp, #-13]
  106c70:	e2833001 	add	r3, r3, #1
  106c74:	e54b300d 	strb	r3, [fp, #-13]
  106c78:	e55b300d 	ldrb	r3, [fp, #-13]
  106c7c:	e3530003 	cmp	r3, #3
  106c80:	9affffb0 	bls	106b48 <netdev_ip4addr_ntoa_r+0x48>
    }
    *--rp = 0;
  106c84:	e51b3008 	ldr	r3, [fp, #-8]
  106c88:	e2433001 	sub	r3, r3, #1
  106c8c:	e50b3008 	str	r3, [fp, #-8]
  106c90:	e51b3008 	ldr	r3, [fp, #-8]
  106c94:	e3a02000 	mov	r2, #0
  106c98:	e5c32000 	strb	r2, [r3]
    return buf;
  106c9c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  106ca0:	e1a00003 	mov	r0, r3
  106ca4:	e28bd000 	add	sp, fp, #0
  106ca8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  106cac:	e12fff1e 	bx	lr

00106cb0 <netdev_ip4addr_ntoa>:
 * @param addr ip address in network order to convert
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *netdev_ip4addr_ntoa(const ip4_addr_t *addr)
{
  106cb0:	e92d4800 	push	{fp, lr}
  106cb4:	e28db004 	add	fp, sp, #4
  106cb8:	e24dd008 	sub	sp, sp, #8
  106cbc:	e50b0008 	str	r0, [fp, #-8]
    static char str[IP4ADDR_STRLEN_MAX];
    return netdev_ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  106cc0:	e3a02010 	mov	r2, #16
  106cc4:	e30d1450 	movw	r1, #54352	; 0xd450
  106cc8:	e3401014 	movt	r1, #20
  106ccc:	e51b0008 	ldr	r0, [fp, #-8]
  106cd0:	ebffff8a 	bl	106b00 <netdev_ip4addr_ntoa_r>
  106cd4:	e1a03000 	mov	r3, r0
}
  106cd8:	e1a00003 	mov	r0, r3
  106cdc:	e24bd004 	sub	sp, fp, #4
  106ce0:	e8bd8800 	pop	{fp, pc}

00106ce4 <netdev_ipaddr_addr>:
 *
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
in_addr_t netdev_ipaddr_addr(const char *cp)
{
  106ce4:	e92d4800 	push	{fp, lr}
  106ce8:	e28db004 	add	fp, sp, #4
  106cec:	e24dd010 	sub	sp, sp, #16
  106cf0:	e50b0010 	str	r0, [fp, #-16]
    ip4_addr_t val;

    if (netdev_ip4addr_aton(cp, &val)) {
  106cf4:	e24b3008 	sub	r3, fp, #8
  106cf8:	e1a01003 	mov	r1, r3
  106cfc:	e51b0010 	ldr	r0, [fp, #-16]
  106d00:	ebfffe71 	bl	1066cc <netdev_ip4addr_aton>
  106d04:	e1a03000 	mov	r3, r0
  106d08:	e3530000 	cmp	r3, #0
  106d0c:	0a000001 	beq	106d18 <netdev_ipaddr_addr+0x34>
        return ip4_addr_get_u32(&val);
  106d10:	e51b3008 	ldr	r3, [fp, #-8]
  106d14:	ea000000 	b	106d1c <netdev_ipaddr_addr+0x38>
    }
    return (IPADDR_NONE);
  106d18:	e3e03000 	mvn	r3, #0
}
  106d1c:	e1a00003 	mov	r0, r3
  106d20:	e24bd004 	sub	sp, fp, #4
  106d24:	e8bd8800 	pop	{fp, pc}

00106d28 <netdev_inet_ntop>:

#endif /* NETDEV_IPV6 */

const char *
netdev_inet_ntop(int af, const void *src, char *dst, int32_t size)
{
  106d28:	e92d4800 	push	{fp, lr}
  106d2c:	e28db004 	add	fp, sp, #4
  106d30:	e24dd018 	sub	sp, sp, #24
  106d34:	e50b0010 	str	r0, [fp, #-16]
  106d38:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  106d3c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  106d40:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#define AF_INET         2
#define AF_INET6        10

    const char *ret = NULL;
  106d44:	e3a03000 	mov	r3, #0
  106d48:	e50b3008 	str	r3, [fp, #-8]
    int size_int = (int)size;
  106d4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106d50:	e50b300c 	str	r3, [fp, #-12]
    if (size_int < 0)
  106d54:	e51b300c 	ldr	r3, [fp, #-12]
  106d58:	e3530000 	cmp	r3, #0
  106d5c:	aa000001 	bge	106d68 <netdev_inet_ntop+0x40>
    {
        return NULL;
  106d60:	e3a03000 	mov	r3, #0
  106d64:	ea00000a 	b	106d94 <netdev_inet_ntop+0x6c>
    }
    switch (af)
  106d68:	e51b3010 	ldr	r3, [fp, #-16]
  106d6c:	e3530002 	cmp	r3, #2
  106d70:	0a000002 	beq	106d80 <netdev_inet_ntop+0x58>
#if NETDEV_IPV6
    case AF_INET6:
        return netdev_ip6addr_ntoa_r((const ip6_addr_t *)src, dst, size_int);
#endif
    default:
        break;
  106d74:	e320f000 	nop	{0}
    }
    return ret;
  106d78:	e51b3008 	ldr	r3, [fp, #-8]
  106d7c:	ea000004 	b	106d94 <netdev_inet_ntop+0x6c>
        return netdev_ip4addr_ntoa_r((const ip4_addr_t *)src, dst, size_int);
  106d80:	e51b200c 	ldr	r2, [fp, #-12]
  106d84:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106d88:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106d8c:	ebffff5b 	bl	106b00 <netdev_ip4addr_ntoa_r>
  106d90:	e1a03000 	mov	r3, r0
}
  106d94:	e1a00003 	mov	r0, r3
  106d98:	e24bd004 	sub	sp, fp, #4
  106d9c:	e8bd8800 	pop	{fp, pc}

00106da0 <netdev_inet_pton>:

int
netdev_inet_pton(int af, const char *src, void *dst)
{
  106da0:	e92d4800 	push	{fp, lr}
  106da4:	e28db004 	add	fp, sp, #4
  106da8:	e24dd018 	sub	sp, sp, #24
  106dac:	e50b0010 	str	r0, [fp, #-16]
  106db0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  106db4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
#define AF_INET         2
#define AF_INET6        10

    int err;
    switch (af)
  106db8:	e51b3010 	ldr	r3, [fp, #-16]
  106dbc:	e3530002 	cmp	r3, #2
  106dc0:	1a000004 	bne	106dd8 <netdev_inet_pton+0x38>
    {
#if NETDEV_IPV4
    case AF_INET:
        err = netdev_ip4addr_aton(src, (ip4_addr_t *)dst);
  106dc4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106dc8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106dcc:	ebfffe3e 	bl	1066cc <netdev_ip4addr_aton>
  106dd0:	e50b0008 	str	r0, [fp, #-8]
        break;
  106dd4:	ea000002 	b	106de4 <netdev_inet_pton+0x44>
        }
        break;
    }
#endif
    default:
        err = -1;
  106dd8:	e3e03000 	mvn	r3, #0
  106ddc:	e50b3008 	str	r3, [fp, #-8]
        break;
  106de0:	e320f000 	nop	{0}
    }
    return err;
  106de4:	e51b3008 	ldr	r3, [fp, #-8]
}
  106de8:	e1a00003 	mov	r0, r3
  106dec:	e24bd004 	sub	sp, fp, #4
  106df0:	e8bd8800 	pop	{fp, pc}

00106df4 <sal_init>:
 *
 * @return result  0: initialize success
 *                -1: initialize failed
 */
int sal_init(void)
{
  106df4:	e92d4800 	push	{fp, lr}
  106df8:	e28db004 	add	fp, sp, #4
  106dfc:	e24dd008 	sub	sp, sp, #8
    int cn;

    if (init_ok)
  106e00:	e30d3490 	movw	r3, #54416	; 0xd490
  106e04:	e3403014 	movt	r3, #20
  106e08:	e5933000 	ldr	r3, [r3]
  106e0c:	e3530000 	cmp	r3, #0
  106e10:	0a000001 	beq	106e1c <sal_init+0x28>
    {
        LOG_D("Socket Abstraction Layer is already initialized.");
        return 0;
  106e14:	e3a03000 	mov	r3, #0
  106e18:	ea000032 	b	106ee8 <sal_init+0xf4>
    }

    /* init sal socket table */
    cn = SOCKET_TABLE_STEP_LEN < SAL_SOCKETS_NUM ? SOCKET_TABLE_STEP_LEN : SAL_SOCKETS_NUM;
  106e1c:	e3a03004 	mov	r3, #4
  106e20:	e50b3008 	str	r3, [fp, #-8]
    socket_table.max_socket = cn;
  106e24:	e51b2008 	ldr	r2, [fp, #-8]
  106e28:	e30d3460 	movw	r3, #54368	; 0xd460
  106e2c:	e3403014 	movt	r3, #20
  106e30:	e5832000 	str	r2, [r3]
    socket_table.sockets = rt_calloc(1, cn * sizeof(struct sal_socket *));
  106e34:	e51b3008 	ldr	r3, [fp, #-8]
  106e38:	e1a03103 	lsl	r3, r3, #2
  106e3c:	e1a01003 	mov	r1, r3
  106e40:	e3a00001 	mov	r0, #1
  106e44:	ebfff070 	bl	10300c <rt_calloc>
  106e48:	e1a02000 	mov	r2, r0
  106e4c:	e30d3460 	movw	r3, #54368	; 0xd460
  106e50:	e3403014 	movt	r3, #20
  106e54:	e5832004 	str	r2, [r3, #4]
    if (socket_table.sockets == RT_NULL)
  106e58:	e30d3460 	movw	r3, #54368	; 0xd460
  106e5c:	e3403014 	movt	r3, #20
  106e60:	e5933004 	ldr	r3, [r3, #4]
  106e64:	e3530000 	cmp	r3, #0
  106e68:	1a00000a 	bne	106e98 <sal_init+0xa4>
    {
        LOG_E("No memory for socket table.\n");
  106e6c:	e3050f60 	movw	r0, #24416	; 0x5f60
  106e70:	e3400014 	movt	r0, #20
  106e74:	ebfff0a6 	bl	103114 <rt_kprintf>
  106e78:	e3050f74 	movw	r0, #24436	; 0x5f74
  106e7c:	e3400014 	movt	r0, #20
  106e80:	ebfff0a3 	bl	103114 <rt_kprintf>
  106e84:	e3050f94 	movw	r0, #24468	; 0x5f94
  106e88:	e3400014 	movt	r0, #20
  106e8c:	ebfff0a0 	bl	103114 <rt_kprintf>
        return -1;
  106e90:	e3e03000 	mvn	r3, #0
  106e94:	ea000013 	b	106ee8 <sal_init+0xf4>
    }

    /* create sal socket lock */
    rt_mutex_init(&sal_core_lock, "sal_lock", RT_IPC_FLAG_FIFO);
  106e98:	e3a02000 	mov	r2, #0
  106e9c:	e3051f9c 	movw	r1, #24476	; 0x5f9c
  106ea0:	e3401014 	movt	r1, #20
  106ea4:	e30d0468 	movw	r0, #54376	; 0xd468
  106ea8:	e3400014 	movt	r0, #20
  106eac:	ebffe7a5 	bl	100d48 <rt_mutex_init>

    LOG_I("Socket Abstraction Layer initialize success.");
  106eb0:	e3050fa8 	movw	r0, #24488	; 0x5fa8
  106eb4:	e3400014 	movt	r0, #20
  106eb8:	ebfff095 	bl	103114 <rt_kprintf>
  106ebc:	e3050fbc 	movw	r0, #24508	; 0x5fbc
  106ec0:	e3400014 	movt	r0, #20
  106ec4:	ebfff092 	bl	103114 <rt_kprintf>
  106ec8:	e3050f94 	movw	r0, #24468	; 0x5f94
  106ecc:	e3400014 	movt	r0, #20
  106ed0:	ebfff08f 	bl	103114 <rt_kprintf>
    init_ok = RT_TRUE;
  106ed4:	e30d3490 	movw	r3, #54416	; 0xd490
  106ed8:	e3403014 	movt	r3, #20
  106edc:	e3a02001 	mov	r2, #1
  106ee0:	e5832000 	str	r2, [r3]

    return 0;
  106ee4:	e3a03000 	mov	r3, #0
}
  106ee8:	e1a00003 	mov	r0, r3
  106eec:	e24bd004 	sub	sp, fp, #4
  106ef0:	e8bd8800 	pop	{fp, pc}

00106ef4 <check_netdev_internet_up_work>:

/* check SAL network interface device internet status */
void check_netdev_internet_up_work(void *work_data)
{
  106ef4:	e92d4810 	push	{r4, fp, lr}
  106ef8:	e28db008 	add	fp, sp, #8
  106efc:	e24dd0ac 	sub	sp, sp, #172	; 0xac
  106f00:	e50b00a8 	str	r0, [fp, #-168]	; 0xffffff58
#define SAL_INTERNET_PORT      8101

#define SAL_INTERNET_MONTH_LEN 4
#define SAL_INTERNET_DATE_LEN  16

    int index, sockfd = -1, result = 0;
  106f04:	e3e03000 	mvn	r3, #0
  106f08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  106f0c:	e3a03000 	mov	r3, #0
  106f10:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    struct sockaddr_in server_addr;
    struct hostent *host;
    struct timeval timeout;
    struct netdev *netdev = (struct netdev *)work_data;
  106f14:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xffffff58
  106f18:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    socklen_t addr_len = sizeof(struct sockaddr_in);
  106f1c:	e3a03010 	mov	r3, #16
  106f20:	e50b3050 	str	r3, [fp, #-80]	; 0xffffffb0
    char send_data[SAL_INTERNET_BUFF_LEN], recv_data = 0;
  106f24:	e3a03000 	mov	r3, #0
  106f28:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
    // struct rt_delayed_work *delay_work = (struct rt_delayed_work *)work;

    const char month[][SAL_INTERNET_MONTH_LEN] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
  106f2c:	e3063010 	movw	r3, #24592	; 0x6010
  106f30:	e3403014 	movt	r3, #20
  106f34:	e24bc090 	sub	ip, fp, #144	; 0x90
  106f38:	e1a0e003 	mov	lr, r3
  106f3c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  106f40:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  106f44:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  106f48:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  106f4c:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  106f50:	e88c000f 	stm	ip, {r0, r1, r2, r3}
    char date[SAL_INTERNET_DATE_LEN];
    int moth_num = 0;
  106f54:	e3a03000 	mov	r3, #0
  106f58:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    struct sal_proto_family *pf = (struct sal_proto_family *) netdev->sal_user_data;
  106f5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106f60:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  106f64:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    // {
    //     rt_free(delay_work);
    // }

    /* get network interface socket operations */
    if (pf == RT_NULL || pf->skt_ops == RT_NULL)
  106f68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f6c:	e3530000 	cmp	r3, #0
  106f70:	0a000003 	beq	106f84 <check_netdev_internet_up_work+0x90>
  106f74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f78:	e5933008 	ldr	r3, [r3, #8]
  106f7c:	e3530000 	cmp	r3, #0
  106f80:	1a000002 	bne	106f90 <check_netdev_internet_up_work+0x9c>
    {
        result = -RT_ERROR;
  106f84:	e3e03000 	mvn	r3, #0
  106f88:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106f8c:	ea0000bc 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    host = (struct hostent *) pf->netdb_ops->gethostbyname(SAL_INTERNET_HOST);
  106f90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f94:	e593300c 	ldr	r3, [r3, #12]
  106f98:	e5933000 	ldr	r3, [r3]
  106f9c:	e3050fec 	movw	r0, #24556	; 0x5fec
  106fa0:	e3400014 	movt	r0, #20
  106fa4:	e12fff33 	blx	r3
  106fa8:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    if (host == RT_NULL)
  106fac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106fb0:	e3530000 	cmp	r3, #0
  106fb4:	1a000002 	bne	106fc4 <check_netdev_internet_up_work+0xd0>
    {
        result = -RT_ERROR;
  106fb8:	e3e03000 	mvn	r3, #0
  106fbc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106fc0:	ea0000af 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    skt_ops = pf->skt_ops;
  106fc4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106fc8:	e5933008 	ldr	r3, [r3, #8]
  106fcc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if ((sockfd = skt_ops->socket(AF_INET, SOCK_DGRAM, 0)) < 0)
  106fd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106fd4:	e5933000 	ldr	r3, [r3]
  106fd8:	e3a02000 	mov	r2, #0
  106fdc:	e3a01002 	mov	r1, #2
  106fe0:	e3a00002 	mov	r0, #2
  106fe4:	e12fff33 	blx	r3
  106fe8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  106fec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106ff0:	e3530000 	cmp	r3, #0
  106ff4:	aa000002 	bge	107004 <check_netdev_internet_up_work+0x110>
    {
        result = -RT_ERROR;
  106ff8:	e3e03000 	mvn	r3, #0
  106ffc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107000:	ea00009f 	b	107284 <check_netdev_internet_up_work+0x390>
    }
    
    server_addr.sin_family = AF_INET;
  107004:	e3a03002 	mov	r3, #2
  107008:	e54b303b 	strb	r3, [fp, #-59]	; 0xffffffc5
    server_addr.sin_port = htons(SAL_INTERNET_PORT);
  10700c:	e30a351f 	movw	r3, #42271	; 0xa51f
  107010:	e34f3fff 	movt	r3, #65535	; 0xffff
  107014:	e14b33ba 	strh	r3, [fp, #-58]	; 0xffffffc6
    server_addr.sin_addr = *((struct in_addr *)host->h_addr);
  107018:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10701c:	e5933010 	ldr	r3, [r3, #16]
  107020:	e5933000 	ldr	r3, [r3]
  107024:	e5933000 	ldr	r3, [r3]
  107028:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    rt_memset(&(server_addr.sin_zero), 0, sizeof(server_addr.sin_zero));
  10702c:	e24b303c 	sub	r3, fp, #60	; 0x3c
  107030:	e2833008 	add	r3, r3, #8
  107034:	e3a02008 	mov	r2, #8
  107038:	e3a01000 	mov	r1, #0
  10703c:	e1a00003 	mov	r0, r3
  107040:	ebfff0a0 	bl	1032c8 <rt_memset>

    timeout.tv_sec = SAL_INTERNET_TIMEOUT;
  107044:	e3a02002 	mov	r2, #2
  107048:	e3a03000 	mov	r3, #0
  10704c:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
    timeout.tv_usec = 0;
  107050:	e3a03000 	mov	r3, #0
  107054:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc

    /* set receive and send timeout */
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, (void *) &timeout, sizeof(timeout));
  107058:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10705c:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  107060:	e24b204c 	sub	r2, fp, #76	; 0x4c
  107064:	e3a03010 	mov	r3, #16
  107068:	e58d3000 	str	r3, [sp]
  10706c:	e1a03002 	mov	r3, r2
  107070:	e3012006 	movw	r2, #4102	; 0x1006
  107074:	e3001fff 	movw	r1, #4095	; 0xfff
  107078:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10707c:	e12fff34 	blx	r4
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, (void *) &timeout, sizeof(timeout));
  107080:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107084:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  107088:	e24b204c 	sub	r2, fp, #76	; 0x4c
  10708c:	e3a03010 	mov	r3, #16
  107090:	e58d3000 	str	r3, [sp]
  107094:	e1a03002 	mov	r3, r2
  107098:	e3012005 	movw	r2, #4101	; 0x1005
  10709c:	e3001fff 	movw	r1, #4095	; 0xfff
  1070a0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1070a4:	e12fff34 	blx	r4

    /* get build moth value*/
    rt_memset(date, 0x00, SAL_INTERNET_DATE_LEN);
  1070a8:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1070ac:	e3a02010 	mov	r2, #16
  1070b0:	e3a01000 	mov	r1, #0
  1070b4:	e1a00003 	mov	r0, r3
  1070b8:	ebfff082 	bl	1032c8 <rt_memset>
    rt_snprintf(date, SAL_INTERNET_DATE_LEN, "%s", __DATE__);
  1070bc:	e24b00a0 	sub	r0, fp, #160	; 0xa0
  1070c0:	e3063000 	movw	r3, #24576	; 0x6000
  1070c4:	e3403014 	movt	r3, #20
  1070c8:	e306200c 	movw	r2, #24588	; 0x600c
  1070cc:	e3402014 	movt	r2, #20
  1070d0:	e3a01010 	mov	r1, #16
  1070d4:	ebffefd8 	bl	10303c <rt_snprintf>

    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  1070d8:	e3a03000 	mov	r3, #0
  1070dc:	e50b3010 	str	r3, [fp, #-16]
  1070e0:	ea000011 	b	10712c <check_netdev_internet_up_work+0x238>
    {
        if (rt_memcmp(date, month[index], SAL_INTERNET_MONTH_LEN - 1) == 0)
  1070e4:	e24b2090 	sub	r2, fp, #144	; 0x90
  1070e8:	e51b3010 	ldr	r3, [fp, #-16]
  1070ec:	e1a03103 	lsl	r3, r3, #2
  1070f0:	e0821003 	add	r1, r2, r3
  1070f4:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1070f8:	e3a02003 	mov	r2, #3
  1070fc:	e1a00003 	mov	r0, r3
  107100:	ebfff08c 	bl	103338 <rt_memcmp>
  107104:	e1a03000 	mov	r3, r0
  107108:	e3530000 	cmp	r3, #0
  10710c:	1a000003 	bne	107120 <check_netdev_internet_up_work+0x22c>
        {
            moth_num = index + 1;
  107110:	e51b3010 	ldr	r3, [fp, #-16]
  107114:	e2833001 	add	r3, r3, #1
  107118:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
  10711c:	ea000005 	b	107138 <check_netdev_internet_up_work+0x244>
    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  107120:	e51b3010 	ldr	r3, [fp, #-16]
  107124:	e2833001 	add	r3, r3, #1
  107128:	e50b3010 	str	r3, [fp, #-16]
  10712c:	e51b3010 	ldr	r3, [fp, #-16]
  107130:	e353000b 	cmp	r3, #11
  107134:	9affffea 	bls	1070e4 <check_netdev_internet_up_work+0x1f0>
        }
    }

    /* not find build month */
    if (moth_num == 0 || moth_num > sizeof(month) / SAL_INTERNET_MONTH_LEN)
  107138:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10713c:	e3530000 	cmp	r3, #0
  107140:	0a000002 	beq	107150 <check_netdev_internet_up_work+0x25c>
  107144:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107148:	e353000c 	cmp	r3, #12
  10714c:	9a000002 	bls	10715c <check_netdev_internet_up_work+0x268>
    {
        result = -RT_ERROR;
  107150:	e3e03000 	mvn	r3, #0
  107154:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107158:	ea000049 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    rt_memset(send_data, 0x00, SAL_INTERNET_BUFF_LEN);
  10715c:	e24b305c 	sub	r3, fp, #92	; 0x5c
  107160:	e3a0200c 	mov	r2, #12
  107164:	e3a01000 	mov	r1, #0
  107168:	e1a00003 	mov	r0, r3
  10716c:	ebfff055 	bl	1032c8 <rt_memset>
    send_data[0] = SAL_INTERNET_VERSION;
  107170:	e3a03000 	mov	r3, #0
  107174:	e54b305c 	strb	r3, [fp, #-92]	; 0xffffffa4
    for (index = 0; index < netdev->hwaddr_len; index++)
  107178:	e3a03000 	mov	r3, #0
  10717c:	e50b3010 	str	r3, [fp, #-16]
  107180:	ea000010 	b	1071c8 <check_netdev_internet_up_work+0x2d4>
    {
        send_data[index + 1] = netdev->hwaddr[index] + moth_num;
  107184:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  107188:	e51b3010 	ldr	r3, [fp, #-16]
  10718c:	e0823003 	add	r3, r2, r3
  107190:	e2833021 	add	r3, r3, #33	; 0x21
  107194:	e5d31000 	ldrb	r1, [r3]
  107198:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10719c:	e6ef2073 	uxtb	r2, r3
  1071a0:	e51b3010 	ldr	r3, [fp, #-16]
  1071a4:	e2833001 	add	r3, r3, #1
  1071a8:	e0812002 	add	r2, r1, r2
  1071ac:	e6ef2072 	uxtb	r2, r2
  1071b0:	e24b100c 	sub	r1, fp, #12
  1071b4:	e0813003 	add	r3, r1, r3
  1071b8:	e5432050 	strb	r2, [r3, #-80]	; 0xffffffb0
    for (index = 0; index < netdev->hwaddr_len; index++)
  1071bc:	e51b3010 	ldr	r3, [fp, #-16]
  1071c0:	e2833001 	add	r3, r3, #1
  1071c4:	e50b3010 	str	r3, [fp, #-16]
  1071c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1071cc:	e5d33020 	ldrb	r3, [r3, #32]
  1071d0:	e1a02003 	mov	r2, r3
  1071d4:	e51b3010 	ldr	r3, [fp, #-16]
  1071d8:	e1530002 	cmp	r3, r2
  1071dc:	baffffe8 	blt	107184 <check_netdev_internet_up_work+0x290>
    }
    send_data[9] = RT_VERSION;
  1071e0:	e3a03005 	mov	r3, #5
  1071e4:	e54b3053 	strb	r3, [fp, #-83]	; 0xffffffad
    send_data[10] = RT_SUBVERSION;
  1071e8:	e3a03000 	mov	r3, #0
  1071ec:	e54b3052 	strb	r3, [fp, #-82]	; 0xffffffae
    send_data[11] = RT_REVISION;
  1071f0:	e3a03000 	mov	r3, #0
  1071f4:	e54b3051 	strb	r3, [fp, #-81]	; 0xffffffaf

    skt_ops->sendto(sockfd, send_data, SAL_INTERNET_BUFF_LEN, 0,
  1071f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1071fc:	e5934018 	ldr	r4, [r3, #24]
  107200:	e24b105c 	sub	r1, fp, #92	; 0x5c
  107204:	e3a03010 	mov	r3, #16
  107208:	e58d3004 	str	r3, [sp, #4]
  10720c:	e24b303c 	sub	r3, fp, #60	; 0x3c
  107210:	e58d3000 	str	r3, [sp]
  107214:	e3a03000 	mov	r3, #0
  107218:	e3a0200c 	mov	r2, #12
  10721c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107220:	e12fff34 	blx	r4
                    (struct sockaddr *)&server_addr, sizeof(struct sockaddr));

    result = skt_ops->recvfrom(sockfd, &recv_data, sizeof(recv_data), 0, (struct sockaddr *)&server_addr, &addr_len);
  107224:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107228:	e593401c 	ldr	r4, [r3, #28]
  10722c:	e24b105d 	sub	r1, fp, #93	; 0x5d
  107230:	e24b3050 	sub	r3, fp, #80	; 0x50
  107234:	e58d3004 	str	r3, [sp, #4]
  107238:	e24b303c 	sub	r3, fp, #60	; 0x3c
  10723c:	e58d3000 	str	r3, [sp]
  107240:	e3a03000 	mov	r3, #0
  107244:	e3a02001 	mov	r2, #1
  107248:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10724c:	e12fff34 	blx	r4
  107250:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (result < 0)
  107254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107258:	e3530000 	cmp	r3, #0
  10725c:	ba000005 	blt	107278 <check_netdev_internet_up_work+0x384>
    {
        goto __exit;
    }

    if (recv_data == RT_FALSE)
  107260:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
  107264:	e3530000 	cmp	r3, #0
  107268:	1a000004 	bne	107280 <check_netdev_internet_up_work+0x38c>
    {
        result = -RT_ERROR;
  10726c:	e3e03000 	mvn	r3, #0
  107270:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107274:	ea000002 	b	107284 <check_netdev_internet_up_work+0x390>
        goto __exit;
  107278:	e320f000 	nop	{0}
  10727c:	ea000000 	b	107284 <check_netdev_internet_up_work+0x390>
    }

__exit:
  107280:	e320f000 	nop	{0}
    if (result > 0)
  107284:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107288:	e3530000 	cmp	r3, #0
  10728c:	da000006 	ble	1072ac <check_netdev_internet_up_work+0x3b8>
    {
        LOG_D("Set network interface device(%s) internet status up.", netdev->name);
        netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  107290:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107294:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107298:	e3833080 	orr	r3, r3, #128	; 0x80
  10729c:	e6ff2073 	uxth	r2, r3
  1072a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072a4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  1072a8:	ea000005 	b	1072c4 <check_netdev_internet_up_work+0x3d0>
    }
    else
    {
        LOG_D("Set network interface device(%s) internet status down.", netdev->name);
        netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  1072ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072b0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1072b4:	e3c33080 	bic	r3, r3, #128	; 0x80
  1072b8:	e6ff2073 	uxth	r2, r3
  1072bc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072c0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    }

    if (sockfd >= 0)
  1072c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1072c8:	e3530000 	cmp	r3, #0
  1072cc:	ba000003 	blt	1072e0 <check_netdev_internet_up_work+0x3ec>
    {
        skt_ops->closesocket(sockfd);
  1072d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1072d4:	e5933004 	ldr	r3, [r3, #4]
  1072d8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1072dc:	e12fff33 	blx	r3
    }
}
  1072e0:	e320f000 	nop	{0}
  1072e4:	e24bd008 	sub	sp, fp, #8
  1072e8:	e8bd8810 	pop	{r4, fp, pc}

001072ec <sal_get_socket>:
 * @param socket sal socket index
 *
 * @return sal socket object of the current sal socket index
 */
struct sal_socket *sal_get_socket(int socket)
{
  1072ec:	e92d4800 	push	{fp, lr}
  1072f0:	e28db004 	add	fp, sp, #4
  1072f4:	e24dd010 	sub	sp, sp, #16
  1072f8:	e50b0010 	str	r0, [fp, #-16]
    struct sal_socket_table *st = &socket_table;
  1072fc:	e30d3460 	movw	r3, #54368	; 0xd460
  107300:	e3403014 	movt	r3, #20
  107304:	e50b3008 	str	r3, [fp, #-8]

    if (socket < 0 || socket >= (int) st->max_socket)
  107308:	e51b3010 	ldr	r3, [fp, #-16]
  10730c:	e3530000 	cmp	r3, #0
  107310:	ba000005 	blt	10732c <sal_get_socket+0x40>
  107314:	e51b3008 	ldr	r3, [fp, #-8]
  107318:	e5933000 	ldr	r3, [r3]
  10731c:	e1a02003 	mov	r2, r3
  107320:	e51b3010 	ldr	r3, [fp, #-16]
  107324:	e1530002 	cmp	r3, r2
  107328:	ba000001 	blt	107334 <sal_get_socket+0x48>
    {
        return RT_NULL;
  10732c:	e3a03000 	mov	r3, #0
  107330:	ea000015 	b	10738c <sal_get_socket+0xa0>
    }

    socket = socket - SAL_SOCKET_OFFSET;
    /* check socket structure valid or not */
    RT_ASSERT(st->sockets[socket]->magic == SAL_SOCKET_MAGIC);
  107334:	e51b3008 	ldr	r3, [fp, #-8]
  107338:	e5932004 	ldr	r2, [r3, #4]
  10733c:	e51b3010 	ldr	r3, [fp, #-16]
  107340:	e1a03103 	lsl	r3, r3, #2
  107344:	e0823003 	add	r3, r2, r3
  107348:	e5933000 	ldr	r3, [r3]
  10734c:	e5933000 	ldr	r3, [r3]
  107350:	e3052a10 	movw	r2, #23056	; 0x5a10
  107354:	e1530002 	cmp	r3, r2
  107358:	0a000005 	beq	107374 <sal_get_socket+0x88>
  10735c:	e300213b 	movw	r2, #315	; 0x13b
  107360:	e3061134 	movw	r1, #24884	; 0x6134
  107364:	e3401014 	movt	r1, #20
  107368:	e3060040 	movw	r0, #24640	; 0x6040
  10736c:	e3400014 	movt	r0, #20
  107370:	ebfff088 	bl	103598 <rt_assert_handler>

    return st->sockets[socket];
  107374:	e51b3008 	ldr	r3, [fp, #-8]
  107378:	e5932004 	ldr	r2, [r3, #4]
  10737c:	e51b3010 	ldr	r3, [fp, #-16]
  107380:	e1a03103 	lsl	r3, r3, #2
  107384:	e0823003 	add	r3, r2, r3
  107388:	e5933000 	ldr	r3, [r3]
}
  10738c:	e1a00003 	mov	r0, r3
  107390:	e24bd004 	sub	sp, fp, #4
  107394:	e8bd8800 	pop	{fp, pc}

00107398 <sal_lock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_lock(void)
{
  107398:	e92d4800 	push	{fp, lr}
  10739c:	e28db004 	add	fp, sp, #4
  1073a0:	e24dd008 	sub	sp, sp, #8
    rt_err_t result;

    result = rt_mutex_take(&sal_core_lock, RT_WAITING_FOREVER);
  1073a4:	e3e01000 	mvn	r1, #0
  1073a8:	e30d0468 	movw	r0, #54376	; 0xd468
  1073ac:	e3400014 	movt	r0, #20
  1073b0:	ebffe6d2 	bl	100f00 <rt_mutex_take>
  1073b4:	e50b0008 	str	r0, [fp, #-8]
    if (result != RT_EOK)
  1073b8:	e51b3008 	ldr	r3, [fp, #-8]
  1073bc:	e3530000 	cmp	r3, #0
  1073c0:	0a000005 	beq	1073dc <sal_lock+0x44>
    {
        RT_ASSERT(0);
  1073c4:	e3a02f53 	mov	r2, #332	; 0x14c
  1073c8:	e3061144 	movw	r1, #24900	; 0x6144
  1073cc:	e3401014 	movt	r1, #20
  1073d0:	e3060070 	movw	r0, #24688	; 0x6070
  1073d4:	e3400014 	movt	r0, #20
  1073d8:	ebfff06e 	bl	103598 <rt_assert_handler>
    }
}
  1073dc:	e320f000 	nop	{0}
  1073e0:	e24bd004 	sub	sp, fp, #4
  1073e4:	e8bd8800 	pop	{fp, pc}

001073e8 <sal_unlock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_unlock(void)
{
  1073e8:	e92d4800 	push	{fp, lr}
  1073ec:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&sal_core_lock);
  1073f0:	e30d0468 	movw	r0, #54376	; 0xd468
  1073f4:	e3400014 	movt	r0, #20
  1073f8:	ebffe6de 	bl	100f78 <rt_mutex_release>
}
  1073fc:	e320f000 	nop	{0}
  107400:	e8bd8800 	pop	{fp, pc}

00107404 <sal_netdev_cleanup>:
 * This function will clean the netdev.
 *
 * @note please don't invoke it on ISR.
 */
int sal_netdev_cleanup(struct netdev *netdev)
{
  107404:	e92d4800 	push	{fp, lr}
  107408:	e28db004 	add	fp, sp, #4
  10740c:	e24dd010 	sub	sp, sp, #16
  107410:	e50b0010 	str	r0, [fp, #-16]
    int idx = 0, find_dev;
  107414:	e3a03000 	mov	r3, #0
  107418:	e50b3008 	str	r3, [fp, #-8]

    do
    {
        find_dev = 0;
  10741c:	e3a03000 	mov	r3, #0
  107420:	e50b300c 	str	r3, [fp, #-12]
        sal_lock();
  107424:	ebffffdb 	bl	107398 <sal_lock>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  107428:	e3a03000 	mov	r3, #0
  10742c:	e50b3008 	str	r3, [fp, #-8]
  107430:	ea000019 	b	10749c <sal_netdev_cleanup+0x98>
        {
            if (socket_table.sockets[idx] && socket_table.sockets[idx]->netdev == netdev)
  107434:	e30d3460 	movw	r3, #54368	; 0xd460
  107438:	e3403014 	movt	r3, #20
  10743c:	e5932004 	ldr	r2, [r3, #4]
  107440:	e51b3008 	ldr	r3, [fp, #-8]
  107444:	e1a03103 	lsl	r3, r3, #2
  107448:	e0823003 	add	r3, r2, r3
  10744c:	e5933000 	ldr	r3, [r3]
  107450:	e3530000 	cmp	r3, #0
  107454:	0a00000d 	beq	107490 <sal_netdev_cleanup+0x8c>
  107458:	e30d3460 	movw	r3, #54368	; 0xd460
  10745c:	e3403014 	movt	r3, #20
  107460:	e5932004 	ldr	r2, [r3, #4]
  107464:	e51b3008 	ldr	r3, [fp, #-8]
  107468:	e1a03103 	lsl	r3, r3, #2
  10746c:	e0823003 	add	r3, r2, r3
  107470:	e5933000 	ldr	r3, [r3]
  107474:	e5933014 	ldr	r3, [r3, #20]
  107478:	e51b2010 	ldr	r2, [fp, #-16]
  10747c:	e1520003 	cmp	r2, r3
  107480:	1a000002 	bne	107490 <sal_netdev_cleanup+0x8c>
            {
                find_dev = 1;
  107484:	e3a03001 	mov	r3, #1
  107488:	e50b300c 	str	r3, [fp, #-12]
                break;
  10748c:	ea000008 	b	1074b4 <sal_netdev_cleanup+0xb0>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  107490:	e51b3008 	ldr	r3, [fp, #-8]
  107494:	e2833001 	add	r3, r3, #1
  107498:	e50b3008 	str	r3, [fp, #-8]
  10749c:	e30d3460 	movw	r3, #54368	; 0xd460
  1074a0:	e3403014 	movt	r3, #20
  1074a4:	e5932000 	ldr	r2, [r3]
  1074a8:	e51b3008 	ldr	r3, [fp, #-8]
  1074ac:	e1520003 	cmp	r2, r3
  1074b0:	8affffdf 	bhi	107434 <sal_netdev_cleanup+0x30>
            }
        }
        sal_unlock();
  1074b4:	ebffffcb 	bl	1073e8 <sal_unlock>
        if (find_dev)
  1074b8:	e51b300c 	ldr	r3, [fp, #-12]
  1074bc:	e3530000 	cmp	r3, #0
  1074c0:	0a000001 	beq	1074cc <sal_netdev_cleanup+0xc8>
        {
            rt_thread_mdelay(100);
  1074c4:	e3a00064 	mov	r0, #100	; 0x64
  1074c8:	ebffea6b 	bl	101e7c <rt_thread_mdelay>
        }
    }
    while (find_dev);
  1074cc:	e51b300c 	ldr	r3, [fp, #-12]
  1074d0:	e3530000 	cmp	r3, #0
  1074d4:	1affffd0 	bne	10741c <sal_netdev_cleanup+0x18>

    return 0;
  1074d8:	e3a03000 	mov	r3, #0
}
  1074dc:	e1a00003 	mov	r0, r3
  1074e0:	e24bd004 	sub	sp, fp, #4
  1074e4:	e8bd8800 	pop	{fp, pc}

001074e8 <socket_init>:
 *         -1 : input the wrong family
 *         -2 : input the wrong socket type
 *         -3 : get network interface failed
 */
static int socket_init(int family, int type, int protocol, struct sal_socket **res)
{
  1074e8:	e92d4800 	push	{fp, lr}
  1074ec:	e28db004 	add	fp, sp, #4
  1074f0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1074f4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1074f8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1074fc:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  107500:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4

    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct netdev *netdv_def = netdev_default;
  107504:	e30f3574 	movw	r3, #62836	; 0xf574
  107508:	e3403014 	movt	r3, #20
  10750c:	e5933000 	ldr	r3, [r3]
  107510:	e50b300c 	str	r3, [fp, #-12]
    struct netdev *netdev = RT_NULL;
  107514:	e3a03000 	mov	r3, #0
  107518:	e50b3010 	str	r3, [fp, #-16]
    rt_bool_t flag = RT_FALSE;
  10751c:	e3a03000 	mov	r3, #0
  107520:	e50b3008 	str	r3, [fp, #-8]

    if (family < 0 || family > AF_MAX)
  107524:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107528:	e3530000 	cmp	r3, #0
  10752c:	ba000002 	blt	10753c <socket_init+0x54>
  107530:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107534:	e353002f 	cmp	r3, #47	; 0x2f
  107538:	da000001 	ble	107544 <socket_init+0x5c>
    {
        return -1;
  10753c:	e3e03000 	mvn	r3, #0
  107540:	ea000050 	b	107688 <socket_init+0x1a0>
    }

    if (type < 0 || type > SOCK_MAX)
  107544:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107548:	e3530000 	cmp	r3, #0
  10754c:	ba000004 	blt	107564 <socket_init+0x7c>
  107550:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  107554:	e3a03001 	mov	r3, #1
  107558:	e3403008 	movt	r3, #8
  10755c:	e1520003 	cmp	r2, r3
  107560:	da000001 	ble	10756c <socket_init+0x84>
    {
        return -2;
  107564:	e3e03001 	mvn	r3, #1
  107568:	ea000046 	b	107688 <socket_init+0x1a0>
    }

    sock = *res;
  10756c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107570:	e5933000 	ldr	r3, [r3]
  107574:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sock->domain = family;
  107578:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10757c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107580:	e5832008 	str	r2, [r3, #8]
    sock->type = type;
  107584:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107588:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  10758c:	e583200c 	str	r2, [r3, #12]
    sock->protocol = protocol;
  107590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107594:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107598:	e5832010 	str	r2, [r3, #16]

    if (netdv_def && netdev_is_up(netdv_def))
  10759c:	e51b300c 	ldr	r3, [fp, #-12]
  1075a0:	e3530000 	cmp	r3, #0
  1075a4:	0a00001e 	beq	107624 <socket_init+0x13c>
  1075a8:	e51b300c 	ldr	r3, [fp, #-12]
  1075ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1075b0:	e2033001 	and	r3, r3, #1
  1075b4:	e6ef3073 	uxtb	r3, r3
  1075b8:	e3530000 	cmp	r3, #0
  1075bc:	0a000018 	beq	107624 <socket_init+0x13c>
    {
        /* check default network interface device protocol family */
        pf = (struct sal_proto_family *) netdv_def->sal_user_data;
  1075c0:	e51b300c 	ldr	r3, [fp, #-12]
  1075c4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1075c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        if (pf != RT_NULL && pf->skt_ops && (pf->family == family || pf->sec_family == family))
  1075cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075d0:	e3530000 	cmp	r3, #0
  1075d4:	0a000012 	beq	107624 <socket_init+0x13c>
  1075d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075dc:	e5933008 	ldr	r3, [r3, #8]
  1075e0:	e3530000 	cmp	r3, #0
  1075e4:	0a00000e 	beq	107624 <socket_init+0x13c>
  1075e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075ec:	e5933000 	ldr	r3, [r3]
  1075f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1075f4:	e1520003 	cmp	r2, r3
  1075f8:	0a000004 	beq	107610 <socket_init+0x128>
  1075fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107600:	e5933004 	ldr	r3, [r3, #4]
  107604:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107608:	e1520003 	cmp	r2, r3
  10760c:	1a000004 	bne	107624 <socket_init+0x13c>
        {
            sock->netdev = netdv_def;
  107610:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107614:	e51b200c 	ldr	r2, [fp, #-12]
  107618:	e5832014 	str	r2, [r3, #20]
            flag = RT_TRUE;
  10761c:	e3a03001 	mov	r3, #1
  107620:	e50b3008 	str	r3, [fp, #-8]
        }
    }

    if (flag == RT_FALSE)
  107624:	e51b3008 	ldr	r3, [fp, #-8]
  107628:	e3530000 	cmp	r3, #0
  10762c:	1a000014 	bne	107684 <socket_init+0x19c>
    {
        /* get network interface device by protocol family */
        netdev = netdev_get_by_family(family);
  107630:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107634:	ebfff7e1 	bl	1055c0 <netdev_get_by_family>
  107638:	e50b0010 	str	r0, [fp, #-16]
        if (netdev == RT_NULL)
  10763c:	e51b3010 	ldr	r3, [fp, #-16]
  107640:	e3530000 	cmp	r3, #0
  107644:	1a00000b 	bne	107678 <socket_init+0x190>
        {
            LOG_E("not find network interface device by protocol family(%d).", family);
  107648:	e3050f60 	movw	r0, #24416	; 0x5f60
  10764c:	e3400014 	movt	r0, #20
  107650:	ebffeeaf 	bl	103114 <rt_kprintf>
  107654:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  107658:	e3060074 	movw	r0, #24692	; 0x6074
  10765c:	e3400014 	movt	r0, #20
  107660:	ebffeeab 	bl	103114 <rt_kprintf>
  107664:	e3050f94 	movw	r0, #24468	; 0x5f94
  107668:	e3400014 	movt	r0, #20
  10766c:	ebffeea8 	bl	103114 <rt_kprintf>
            return -3;
  107670:	e3e03002 	mvn	r3, #2
  107674:	ea000003 	b	107688 <socket_init+0x1a0>
        }

        sock->netdev = netdev;
  107678:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10767c:	e51b2010 	ldr	r2, [fp, #-16]
  107680:	e5832014 	str	r2, [r3, #20]
    }

    return 0;
  107684:	e3a03000 	mov	r3, #0
}
  107688:	e1a00003 	mov	r0, r3
  10768c:	e24bd004 	sub	sp, fp, #4
  107690:	e8bd8800 	pop	{fp, pc}

00107694 <socket_alloc>:

static int socket_alloc(struct sal_socket_table *st, int f_socket)
{
  107694:	e92d4810 	push	{r4, fp, lr}
  107698:	e28db008 	add	fp, sp, #8
  10769c:	e24dd01c 	sub	sp, sp, #28
  1076a0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1076a4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
    int idx;

    /* find an empty socket entry */
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  1076a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1076ac:	e50b3010 	str	r3, [fp, #-16]
  1076b0:	ea00000a 	b	1076e0 <socket_alloc+0x4c>
    {
        if (st->sockets[idx] == RT_NULL)
  1076b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1076b8:	e5932004 	ldr	r2, [r3, #4]
  1076bc:	e51b3010 	ldr	r3, [fp, #-16]
  1076c0:	e1a03103 	lsl	r3, r3, #2
  1076c4:	e0823003 	add	r3, r2, r3
  1076c8:	e5933000 	ldr	r3, [r3]
  1076cc:	e3530000 	cmp	r3, #0
  1076d0:	0a000009 	beq	1076fc <socket_alloc+0x68>
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  1076d4:	e51b3010 	ldr	r3, [fp, #-16]
  1076d8:	e2833001 	add	r3, r3, #1
  1076dc:	e50b3010 	str	r3, [fp, #-16]
  1076e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1076e4:	e5933000 	ldr	r3, [r3]
  1076e8:	e1a02003 	mov	r2, r3
  1076ec:	e51b3010 	ldr	r3, [fp, #-16]
  1076f0:	e1530002 	cmp	r3, r2
  1076f4:	baffffee 	blt	1076b4 <socket_alloc+0x20>
  1076f8:	ea000000 	b	107700 <socket_alloc+0x6c>
        {
            break;
  1076fc:	e320f000 	nop	{0}
        }
    }

    /* allocate a larger sockte container */
    if (idx == (int) st->max_socket &&  st->max_socket < SAL_SOCKETS_NUM)
  107700:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107704:	e5933000 	ldr	r3, [r3]
  107708:	e1a02003 	mov	r2, r3
  10770c:	e51b3010 	ldr	r3, [fp, #-16]
  107710:	e1530002 	cmp	r3, r2
  107714:	1a00002e 	bne	1077d4 <socket_alloc+0x140>
  107718:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10771c:	e5933000 	ldr	r3, [r3]
  107720:	e353001f 	cmp	r3, #31
  107724:	8a00002a 	bhi	1077d4 <socket_alloc+0x140>
    {
        int cnt, index;
        struct sal_socket **sockets;

        /* increase the number of socket with 4 step length */
        cnt = st->max_socket + SOCKET_TABLE_STEP_LEN;
  107728:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10772c:	e5933000 	ldr	r3, [r3]
  107730:	e2833004 	add	r3, r3, #4
  107734:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        cnt = cnt > SAL_SOCKETS_NUM ? SAL_SOCKETS_NUM : cnt;
  107738:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10773c:	e3530020 	cmp	r3, #32
  107740:	b1a03003 	movlt	r3, r3
  107744:	a3a03020 	movge	r3, #32
  107748:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

        sockets = rt_realloc(st->sockets, cnt * sizeof(struct sal_socket *));
  10774c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107750:	e5932004 	ldr	r2, [r3, #4]
  107754:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107758:	e1a03103 	lsl	r3, r3, #2
  10775c:	e1a01003 	mov	r1, r3
  107760:	e1a00002 	mov	r0, r2
  107764:	ebffee1c 	bl	102fdc <rt_realloc>
  107768:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sockets == RT_NULL)
  10776c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107770:	e3530000 	cmp	r3, #0
  107774:	0a00003a 	beq	107864 <socket_alloc+0x1d0>
            goto __result; /* return st->max_socket */

        /* clean the new allocated fds */
        for (index = st->max_socket; index < cnt; index++)
  107778:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10777c:	e5933000 	ldr	r3, [r3]
  107780:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  107784:	ea000008 	b	1077ac <socket_alloc+0x118>
        {
            sockets[index] = RT_NULL;
  107788:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10778c:	e1a03103 	lsl	r3, r3, #2
  107790:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  107794:	e0823003 	add	r3, r2, r3
  107798:	e3a02000 	mov	r2, #0
  10779c:	e5832000 	str	r2, [r3]
        for (index = st->max_socket; index < cnt; index++)
  1077a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1077a4:	e2833001 	add	r3, r3, #1
  1077a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1077ac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1077b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1077b4:	e1520003 	cmp	r2, r3
  1077b8:	bafffff2 	blt	107788 <socket_alloc+0xf4>
        }

        st->sockets = sockets;
  1077bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077c0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1077c4:	e5832004 	str	r2, [r3, #4]
        st->max_socket = cnt;
  1077c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1077cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077d0:	e5832000 	str	r2, [r3]
    }

    /* allocate  'struct sal_socket' */
    if (idx < (int) st->max_socket && st->sockets[idx] == RT_NULL)
  1077d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077d8:	e5933000 	ldr	r3, [r3]
  1077dc:	e1a02003 	mov	r2, r3
  1077e0:	e51b3010 	ldr	r3, [fp, #-16]
  1077e4:	e1530002 	cmp	r3, r2
  1077e8:	aa00001f 	bge	10786c <socket_alloc+0x1d8>
  1077ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077f0:	e5932004 	ldr	r2, [r3, #4]
  1077f4:	e51b3010 	ldr	r3, [fp, #-16]
  1077f8:	e1a03103 	lsl	r3, r3, #2
  1077fc:	e0823003 	add	r3, r2, r3
  107800:	e5933000 	ldr	r3, [r3]
  107804:	e3530000 	cmp	r3, #0
  107808:	1a000017 	bne	10786c <socket_alloc+0x1d8>
    {
        st->sockets[idx] = rt_calloc(1, sizeof(struct sal_socket));
  10780c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107810:	e5932004 	ldr	r2, [r3, #4]
  107814:	e51b3010 	ldr	r3, [fp, #-16]
  107818:	e1a03103 	lsl	r3, r3, #2
  10781c:	e0824003 	add	r4, r2, r3
  107820:	e3a0101c 	mov	r1, #28
  107824:	e3a00001 	mov	r0, #1
  107828:	ebffedf7 	bl	10300c <rt_calloc>
  10782c:	e1a03000 	mov	r3, r0
  107830:	e5843000 	str	r3, [r4]
        if (st->sockets[idx] == RT_NULL)
  107834:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107838:	e5932004 	ldr	r2, [r3, #4]
  10783c:	e51b3010 	ldr	r3, [fp, #-16]
  107840:	e1a03103 	lsl	r3, r3, #2
  107844:	e0823003 	add	r3, r2, r3
  107848:	e5933000 	ldr	r3, [r3]
  10784c:	e3530000 	cmp	r3, #0
  107850:	1a000005 	bne	10786c <socket_alloc+0x1d8>
        {
            idx = st->max_socket;
  107854:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107858:	e5933000 	ldr	r3, [r3]
  10785c:	e50b3010 	str	r3, [fp, #-16]
  107860:	ea000002 	b	107870 <socket_alloc+0x1dc>
            goto __result; /* return st->max_socket */
  107864:	e320f000 	nop	{0}
  107868:	ea000000 	b	107870 <socket_alloc+0x1dc>
        }
    }

__result:
  10786c:	e320f000 	nop	{0}
    return idx;
  107870:	e51b3010 	ldr	r3, [fp, #-16]
}
  107874:	e1a00003 	mov	r0, r3
  107878:	e24bd008 	sub	sp, fp, #8
  10787c:	e8bd8810 	pop	{r4, fp, pc}

00107880 <socket_free>:

static void socket_free(struct sal_socket_table *st, int idx)
{
  107880:	e92d4800 	push	{fp, lr}
  107884:	e28db004 	add	fp, sp, #4
  107888:	e24dd010 	sub	sp, sp, #16
  10788c:	e50b0010 	str	r0, [fp, #-16]
  107890:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;

    sock = st->sockets[idx];
  107894:	e51b3010 	ldr	r3, [fp, #-16]
  107898:	e5932004 	ldr	r2, [r3, #4]
  10789c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1078a0:	e1a03103 	lsl	r3, r3, #2
  1078a4:	e0823003 	add	r3, r2, r3
  1078a8:	e5933000 	ldr	r3, [r3]
  1078ac:	e50b3008 	str	r3, [fp, #-8]
    st->sockets[idx] = RT_NULL;
  1078b0:	e51b3010 	ldr	r3, [fp, #-16]
  1078b4:	e5932004 	ldr	r2, [r3, #4]
  1078b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1078bc:	e1a03103 	lsl	r3, r3, #2
  1078c0:	e0823003 	add	r3, r2, r3
  1078c4:	e3a02000 	mov	r2, #0
  1078c8:	e5832000 	str	r2, [r3]
    rt_free(sock);
  1078cc:	e51b0008 	ldr	r0, [fp, #-8]
  1078d0:	ebffedb9 	bl	102fbc <rt_free>
}
  1078d4:	e320f000 	nop	{0}
  1078d8:	e24bd004 	sub	sp, fp, #4
  1078dc:	e8bd8800 	pop	{fp, pc}

001078e0 <socket_new>:

static int socket_new(void)
{
  1078e0:	e92d4800 	push	{fp, lr}
  1078e4:	e28db004 	add	fp, sp, #4
  1078e8:	e24dd010 	sub	sp, sp, #16
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  1078ec:	e30d3460 	movw	r3, #54368	; 0xd460
  1078f0:	e3403014 	movt	r3, #20
  1078f4:	e50b300c 	str	r3, [fp, #-12]
    int idx;

    sal_lock();
  1078f8:	ebfffea6 	bl	107398 <sal_lock>

    /* find an empty sal socket entry */
    idx = socket_alloc(st, 0);
  1078fc:	e3a01000 	mov	r1, #0
  107900:	e51b000c 	ldr	r0, [fp, #-12]
  107904:	ebffff62 	bl	107694 <socket_alloc>
  107908:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty sal socket entry */
    if (idx == (int) st->max_socket)
  10790c:	e51b300c 	ldr	r3, [fp, #-12]
  107910:	e5933000 	ldr	r3, [r3]
  107914:	e1a02003 	mov	r2, r3
  107918:	e51b3008 	ldr	r3, [fp, #-8]
  10791c:	e1530002 	cmp	r3, r2
  107920:	1a000002 	bne	107930 <socket_new+0x50>
    {
        idx = -(1 + SAL_SOCKET_OFFSET);
  107924:	e3e03000 	mvn	r3, #0
  107928:	e50b3008 	str	r3, [fp, #-8]
        goto __result;
  10792c:	ea000012 	b	10797c <socket_new+0x9c>
    }

    sock = st->sockets[idx];
  107930:	e51b300c 	ldr	r3, [fp, #-12]
  107934:	e5932004 	ldr	r2, [r3, #4]
  107938:	e51b3008 	ldr	r3, [fp, #-8]
  10793c:	e1a03103 	lsl	r3, r3, #2
  107940:	e0823003 	add	r3, r2, r3
  107944:	e5933000 	ldr	r3, [r3]
  107948:	e50b3010 	str	r3, [fp, #-16]
    sock->socket = idx + SAL_SOCKET_OFFSET;
  10794c:	e51b3010 	ldr	r3, [fp, #-16]
  107950:	e51b2008 	ldr	r2, [fp, #-8]
  107954:	e5832004 	str	r2, [r3, #4]
    sock->magic = SAL_SOCKET_MAGIC;
  107958:	e51b3010 	ldr	r3, [fp, #-16]
  10795c:	e3052a10 	movw	r2, #23056	; 0x5a10
  107960:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  107964:	e51b3010 	ldr	r3, [fp, #-16]
  107968:	e3a02000 	mov	r2, #0
  10796c:	e5832014 	str	r2, [r3, #20]
    sock->user_data = RT_NULL;
  107970:	e51b3010 	ldr	r3, [fp, #-16]
  107974:	e3a02000 	mov	r2, #0
  107978:	e5832018 	str	r2, [r3, #24]
#ifdef SAL_USING_TLS
    sock->user_data_tls = RT_NULL;
#endif

__result:
    sal_unlock();
  10797c:	ebfffe99 	bl	1073e8 <sal_unlock>
    return idx + SAL_SOCKET_OFFSET;
  107980:	e51b3008 	ldr	r3, [fp, #-8]
}
  107984:	e1a00003 	mov	r0, r3
  107988:	e24bd004 	sub	sp, fp, #4
  10798c:	e8bd8800 	pop	{fp, pc}

00107990 <socket_delete>:

static void socket_delete(int socket)
{
  107990:	e92d4800 	push	{fp, lr}
  107994:	e28db004 	add	fp, sp, #4
  107998:	e24dd018 	sub	sp, sp, #24
  10799c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  1079a0:	e30d3460 	movw	r3, #54368	; 0xd460
  1079a4:	e3403014 	movt	r3, #20
  1079a8:	e50b3008 	str	r3, [fp, #-8]
    int idx;

    idx = socket - SAL_SOCKET_OFFSET;
  1079ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1079b0:	e50b300c 	str	r3, [fp, #-12]
    if (idx < 0 || idx >= (int) st->max_socket)
  1079b4:	e51b300c 	ldr	r3, [fp, #-12]
  1079b8:	e3530000 	cmp	r3, #0
  1079bc:	ba00001d 	blt	107a38 <socket_delete+0xa8>
  1079c0:	e51b3008 	ldr	r3, [fp, #-8]
  1079c4:	e5933000 	ldr	r3, [r3]
  1079c8:	e1a02003 	mov	r2, r3
  1079cc:	e51b300c 	ldr	r3, [fp, #-12]
  1079d0:	e1530002 	cmp	r3, r2
  1079d4:	aa000017 	bge	107a38 <socket_delete+0xa8>
    {
        return;
    }
    sal_lock();
  1079d8:	ebfffe6e 	bl	107398 <sal_lock>
    sock = sal_get_socket(socket);
  1079dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1079e0:	ebfffe41 	bl	1072ec <sal_get_socket>
  1079e4:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(sock != RT_NULL);
  1079e8:	e51b3010 	ldr	r3, [fp, #-16]
  1079ec:	e3530000 	cmp	r3, #0
  1079f0:	1a000005 	bne	107a0c <socket_delete+0x7c>
  1079f4:	e3002223 	movw	r2, #547	; 0x223
  1079f8:	e3061150 	movw	r1, #24912	; 0x6150
  1079fc:	e3401014 	movt	r1, #20
  107a00:	e30600b0 	movw	r0, #24752	; 0x60b0
  107a04:	e3400014 	movt	r0, #20
  107a08:	ebffeee2 	bl	103598 <rt_assert_handler>
    sock->magic = 0;
  107a0c:	e51b3010 	ldr	r3, [fp, #-16]
  107a10:	e3a02000 	mov	r2, #0
  107a14:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  107a18:	e51b3010 	ldr	r3, [fp, #-16]
  107a1c:	e3a02000 	mov	r2, #0
  107a20:	e5832014 	str	r2, [r3, #20]
    socket_free(st, idx);
  107a24:	e51b100c 	ldr	r1, [fp, #-12]
  107a28:	e51b0008 	ldr	r0, [fp, #-8]
  107a2c:	ebffff93 	bl	107880 <socket_free>
    sal_unlock();
  107a30:	ebfffe6c 	bl	1073e8 <sal_unlock>
  107a34:	ea000000 	b	107a3c <socket_delete+0xac>
        return;
  107a38:	e320f000 	nop	{0}
}
  107a3c:	e24bd004 	sub	sp, fp, #4
  107a40:	e8bd8800 	pop	{fp, pc}

00107a44 <sal_accept>:

int sal_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  107a44:	e92d4800 	push	{fp, lr}
  107a48:	e28db004 	add	fp, sp, #4
  107a4c:	e24dd028 	sub	sp, sp, #40	; 0x28
  107a50:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  107a54:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  107a58:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107a5c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107a60:	ebfffe21 	bl	1072ec <sal_get_socket>
  107a64:	e50b0008 	str	r0, [fp, #-8]
  107a68:	e51b3008 	ldr	r3, [fp, #-8]
  107a6c:	e3530000 	cmp	r3, #0
  107a70:	1a000001 	bne	107a7c <sal_accept+0x38>
  107a74:	e3e03000 	mvn	r3, #0
  107a78:	ea000059 	b	107be4 <sal_accept+0x1a0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  107a7c:	e51b3008 	ldr	r3, [fp, #-8]
  107a80:	e5933014 	ldr	r3, [r3, #20]
  107a84:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107a88:	e2033001 	and	r3, r3, #1
  107a8c:	e3530000 	cmp	r3, #0
  107a90:	1a000001 	bne	107a9c <sal_accept+0x58>
  107a94:	e3e03000 	mvn	r3, #0
  107a98:	ea000051 	b	107be4 <sal_accept+0x1a0>

    /* check the network interface socket operations */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, accept);
  107a9c:	e51b3008 	ldr	r3, [fp, #-8]
  107aa0:	e5933014 	ldr	r3, [r3, #20]
  107aa4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107aa8:	e50b300c 	str	r3, [fp, #-12]
  107aac:	e51b300c 	ldr	r3, [fp, #-12]
  107ab0:	e5933008 	ldr	r3, [r3, #8]
  107ab4:	e5933014 	ldr	r3, [r3, #20]
  107ab8:	e3530000 	cmp	r3, #0
  107abc:	1a000001 	bne	107ac8 <sal_accept+0x84>
  107ac0:	e3e03000 	mvn	r3, #0
  107ac4:	ea000046 	b	107be4 <sal_accept+0x1a0>

    new_socket = pf->skt_ops->accept((int)(size_t)sock->user_data, addr, addrlen);
  107ac8:	e51b300c 	ldr	r3, [fp, #-12]
  107acc:	e5933008 	ldr	r3, [r3, #8]
  107ad0:	e5933014 	ldr	r3, [r3, #20]
  107ad4:	e51b2008 	ldr	r2, [fp, #-8]
  107ad8:	e5922018 	ldr	r2, [r2, #24]
  107adc:	e1a00002 	mov	r0, r2
  107ae0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107ae4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  107ae8:	e12fff33 	blx	r3
  107aec:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  107af0:	e51b3010 	ldr	r3, [fp, #-16]
  107af4:	e3730001 	cmn	r3, #1
  107af8:	0a000038 	beq	107be0 <sal_accept+0x19c>
        int retval;
        int new_sal_socket;
        struct sal_socket *new_sock;

        /* allocate a new socket structure and registered socket options */
        new_sal_socket = socket_new();
  107afc:	ebffff77 	bl	1078e0 <socket_new>
  107b00:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        new_sock = sal_get_socket(new_sal_socket);
  107b04:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107b08:	ebfffdf7 	bl	1072ec <sal_get_socket>
  107b0c:	e1a03000 	mov	r3, r0
  107b10:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (new_sock == RT_NULL)
  107b14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107b18:	e3530000 	cmp	r3, #0
  107b1c:	1a000006 	bne	107b3c <sal_accept+0xf8>
        {
            pf->skt_ops->closesocket(new_socket);
  107b20:	e51b300c 	ldr	r3, [fp, #-12]
  107b24:	e5933008 	ldr	r3, [r3, #8]
  107b28:	e5933004 	ldr	r3, [r3, #4]
  107b2c:	e51b0010 	ldr	r0, [fp, #-16]
  107b30:	e12fff33 	blx	r3
            return -1;
  107b34:	e3e03000 	mvn	r3, #0
  107b38:	ea000029 	b	107be4 <sal_accept+0x1a0>
        }

        retval = socket_init(sock->domain, sock->type, sock->protocol, &new_sock);
  107b3c:	e51b3008 	ldr	r3, [fp, #-8]
  107b40:	e5930008 	ldr	r0, [r3, #8]
  107b44:	e51b3008 	ldr	r3, [fp, #-8]
  107b48:	e593100c 	ldr	r1, [r3, #12]
  107b4c:	e51b3008 	ldr	r3, [fp, #-8]
  107b50:	e5932010 	ldr	r2, [r3, #16]
  107b54:	e24b301c 	sub	r3, fp, #28
  107b58:	ebfffe62 	bl	1074e8 <socket_init>
  107b5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (retval < 0)
  107b60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107b64:	e3530000 	cmp	r3, #0
  107b68:	aa000017 	bge	107bcc <sal_accept+0x188>
        {
            pf->skt_ops->closesocket(new_socket);
  107b6c:	e51b300c 	ldr	r3, [fp, #-12]
  107b70:	e5933008 	ldr	r3, [r3, #8]
  107b74:	e5933004 	ldr	r3, [r3, #4]
  107b78:	e51b0010 	ldr	r0, [fp, #-16]
  107b7c:	e12fff33 	blx	r3
            rt_memset(new_sock, 0x00, sizeof(struct sal_socket));
  107b80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107b84:	e3a0201c 	mov	r2, #28
  107b88:	e3a01000 	mov	r1, #0
  107b8c:	e1a00003 	mov	r0, r3
  107b90:	ebffedcc 	bl	1032c8 <rt_memset>
            /* socket init failed, delete socket */
            socket_delete(new_sal_socket);
  107b94:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107b98:	ebffff7c 	bl	107990 <socket_delete>
            LOG_E("New socket registered failed, return error %d.", retval);
  107b9c:	e3050f60 	movw	r0, #24416	; 0x5f60
  107ba0:	e3400014 	movt	r0, #20
  107ba4:	ebffed5a 	bl	103114 <rt_kprintf>
  107ba8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  107bac:	e30600c0 	movw	r0, #24768	; 0x60c0
  107bb0:	e3400014 	movt	r0, #20
  107bb4:	ebffed56 	bl	103114 <rt_kprintf>
  107bb8:	e3050f94 	movw	r0, #24468	; 0x5f94
  107bbc:	e3400014 	movt	r0, #20
  107bc0:	ebffed53 	bl	103114 <rt_kprintf>
            return -1;
  107bc4:	e3e03000 	mvn	r3, #0
  107bc8:	ea000005 	b	107be4 <sal_accept+0x1a0>
        }

        /* socket structure user_data used to store the acquired new socket */
        new_sock->user_data = (void *)(size_t)new_socket;
  107bcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107bd0:	e51b2010 	ldr	r2, [fp, #-16]
  107bd4:	e5832018 	str	r2, [r3, #24]

        return new_sal_socket;
  107bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107bdc:	ea000000 	b	107be4 <sal_accept+0x1a0>
    }

    return -1;
  107be0:	e3e03000 	mvn	r3, #0
}
  107be4:	e1a00003 	mov	r0, r3
  107be8:	e24bd004 	sub	sp, fp, #4
  107bec:	e8bd8800 	pop	{fp, pc}

00107bf0 <sal_sockaddr_to_ipaddr>:

static void sal_sockaddr_to_ipaddr(const struct sockaddr *name, ip_addr_t *local_ipaddr)
{
  107bf0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  107bf4:	e28db000 	add	fp, sp, #0
  107bf8:	e24dd014 	sub	sp, sp, #20
  107bfc:	e50b0010 	str	r0, [fp, #-16]
  107c00:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    const struct sockaddr_in *svr_addr = (const struct sockaddr_in *) name;
  107c04:	e51b3010 	ldr	r3, [fp, #-16]
  107c08:	e50b3008 	str	r3, [fp, #-8]

#if NETDEV_IPV4 && NETDEV_IPV6
    local_ipaddr->u_addr.ip4.addr = svr_addr->sin_addr.s_addr;
    local_ipaddr->type = IPADDR_TYPE_V4;
#elif NETDEV_IPV4
    local_ipaddr->addr = svr_addr->sin_addr.s_addr;
  107c0c:	e51b3008 	ldr	r3, [fp, #-8]
  107c10:	e5932004 	ldr	r2, [r3, #4]
  107c14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107c18:	e5832000 	str	r2, [r3]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
}
  107c1c:	e320f000 	nop	{0}
  107c20:	e28bd000 	add	sp, fp, #0
  107c24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  107c28:	e12fff1e 	bx	lr

00107c2c <sal_bind>:

int sal_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  107c2c:	e92d4800 	push	{fp, lr}
  107c30:	e28db004 	add	fp, sp, #4
  107c34:	e24dd030 	sub	sp, sp, #48	; 0x30
  107c38:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  107c3c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  107c40:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    ip_addr_t input_ipaddr;

    RT_ASSERT(name);
  107c44:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107c48:	e3530000 	cmp	r3, #0
  107c4c:	1a000005 	bne	107c68 <sal_bind+0x3c>
  107c50:	e3002271 	movw	r2, #625	; 0x271
  107c54:	e3061160 	movw	r1, #24928	; 0x6160
  107c58:	e3401014 	movt	r1, #20
  107c5c:	e30600f0 	movw	r0, #24816	; 0x60f0
  107c60:	e3400014 	movt	r0, #20
  107c64:	ebffee4b 	bl	103598 <rt_assert_handler>

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107c68:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  107c6c:	ebfffd9e 	bl	1072ec <sal_get_socket>
  107c70:	e50b0008 	str	r0, [fp, #-8]
  107c74:	e51b3008 	ldr	r3, [fp, #-8]
  107c78:	e3530000 	cmp	r3, #0
  107c7c:	1a000001 	bne	107c88 <sal_bind+0x5c>
  107c80:	e3e03000 	mvn	r3, #0
  107c84:	ea000062 	b	107e14 <sal_bind+0x1e8>

    /* bind network interface by ip address */
    sal_sockaddr_to_ipaddr(name, &input_ipaddr);
  107c88:	e24b3020 	sub	r3, fp, #32
  107c8c:	e1a01003 	mov	r1, r3
  107c90:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  107c94:	ebffffd5 	bl	107bf0 <sal_sockaddr_to_ipaddr>

    /* check input ipaddr is default netdev ipaddr */
    if (!ip_addr_isany_val(input_ipaddr))
  107c98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107c9c:	e3530000 	cmp	r3, #0
  107ca0:	0a000046 	beq	107dc0 <sal_bind+0x194>
    {
        struct sal_proto_family *input_pf = RT_NULL, *local_pf = RT_NULL;
  107ca4:	e3a03000 	mov	r3, #0
  107ca8:	e50b300c 	str	r3, [fp, #-12]
  107cac:	e3a03000 	mov	r3, #0
  107cb0:	e50b3010 	str	r3, [fp, #-16]
        struct netdev *new_netdev = RT_NULL;
  107cb4:	e3a03000 	mov	r3, #0
  107cb8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

        new_netdev = netdev_get_by_ipaddr(&input_ipaddr);
  107cbc:	e24b3020 	sub	r3, fp, #32
  107cc0:	e1a00003 	mov	r0, r3
  107cc4:	ebfff5df 	bl	105448 <netdev_get_by_ipaddr>
  107cc8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (new_netdev == RT_NULL)
  107ccc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107cd0:	e3530000 	cmp	r3, #0
  107cd4:	1a000001 	bne	107ce0 <sal_bind+0xb4>
        {
            return -1;
  107cd8:	e3e03000 	mvn	r3, #0
  107cdc:	ea00004c 	b	107e14 <sal_bind+0x1e8>
        }

        /* get input and local ip address proto_family */
        SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, local_pf, bind);
  107ce0:	e51b3008 	ldr	r3, [fp, #-8]
  107ce4:	e5933014 	ldr	r3, [r3, #20]
  107ce8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107cec:	e50b3010 	str	r3, [fp, #-16]
  107cf0:	e51b3010 	ldr	r3, [fp, #-16]
  107cf4:	e5933008 	ldr	r3, [r3, #8]
  107cf8:	e5933008 	ldr	r3, [r3, #8]
  107cfc:	e3530000 	cmp	r3, #0
  107d00:	1a000001 	bne	107d0c <sal_bind+0xe0>
  107d04:	e3e03000 	mvn	r3, #0
  107d08:	ea000041 	b	107e14 <sal_bind+0x1e8>
        SAL_NETDEV_SOCKETOPS_VALID(new_netdev, input_pf, bind);
  107d0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107d10:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107d14:	e50b300c 	str	r3, [fp, #-12]
  107d18:	e51b300c 	ldr	r3, [fp, #-12]
  107d1c:	e5933008 	ldr	r3, [r3, #8]
  107d20:	e5933008 	ldr	r3, [r3, #8]
  107d24:	e3530000 	cmp	r3, #0
  107d28:	1a000001 	bne	107d34 <sal_bind+0x108>
  107d2c:	e3e03000 	mvn	r3, #0
  107d30:	ea000037 	b	107e14 <sal_bind+0x1e8>

        /* check the network interface protocol family type */
        if (input_pf->family != local_pf->family)
  107d34:	e51b300c 	ldr	r3, [fp, #-12]
  107d38:	e5932000 	ldr	r2, [r3]
  107d3c:	e51b3010 	ldr	r3, [fp, #-16]
  107d40:	e5933000 	ldr	r3, [r3]
  107d44:	e1520003 	cmp	r2, r3
  107d48:	0a00001c 	beq	107dc0 <sal_bind+0x194>
        {
            int new_socket = -1;
  107d4c:	e3e03000 	mvn	r3, #0
  107d50:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

            /* protocol family is different, close old socket and create new socket by input ip address */
            local_pf->skt_ops->closesocket(socket);
  107d54:	e51b3010 	ldr	r3, [fp, #-16]
  107d58:	e5933008 	ldr	r3, [r3, #8]
  107d5c:	e5933004 	ldr	r3, [r3, #4]
  107d60:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  107d64:	e12fff33 	blx	r3

            new_socket = input_pf->skt_ops->socket(input_pf->family, sock->type, sock->protocol);
  107d68:	e51b300c 	ldr	r3, [fp, #-12]
  107d6c:	e5933008 	ldr	r3, [r3, #8]
  107d70:	e5933000 	ldr	r3, [r3]
  107d74:	e51b200c 	ldr	r2, [fp, #-12]
  107d78:	e5920000 	ldr	r0, [r2]
  107d7c:	e51b2008 	ldr	r2, [fp, #-8]
  107d80:	e592100c 	ldr	r1, [r2, #12]
  107d84:	e51b2008 	ldr	r2, [fp, #-8]
  107d88:	e5922010 	ldr	r2, [r2, #16]
  107d8c:	e12fff33 	blx	r3
  107d90:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
            if (new_socket < 0)
  107d94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107d98:	e3530000 	cmp	r3, #0
  107d9c:	aa000001 	bge	107da8 <sal_bind+0x17c>
            {
                return -1;
  107da0:	e3e03000 	mvn	r3, #0
  107da4:	ea00001a 	b	107e14 <sal_bind+0x1e8>
            }
            sock->netdev = new_netdev;
  107da8:	e51b3008 	ldr	r3, [fp, #-8]
  107dac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  107db0:	e5832014 	str	r2, [r3, #20]
            sock->user_data = (void *)(size_t)new_socket;
  107db4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107db8:	e51b3008 	ldr	r3, [fp, #-8]
  107dbc:	e5832018 	str	r2, [r3, #24]
        }
    }

    /* check and get protocol families by the network interface device */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, bind);
  107dc0:	e51b3008 	ldr	r3, [fp, #-8]
  107dc4:	e5933014 	ldr	r3, [r3, #20]
  107dc8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107dcc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  107dd0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107dd4:	e5933008 	ldr	r3, [r3, #8]
  107dd8:	e5933008 	ldr	r3, [r3, #8]
  107ddc:	e3530000 	cmp	r3, #0
  107de0:	1a000001 	bne	107dec <sal_bind+0x1c0>
  107de4:	e3e03000 	mvn	r3, #0
  107de8:	ea000009 	b	107e14 <sal_bind+0x1e8>
    return pf->skt_ops->bind((int)(size_t)sock->user_data, name, namelen);
  107dec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107df0:	e5933008 	ldr	r3, [r3, #8]
  107df4:	e5933008 	ldr	r3, [r3, #8]
  107df8:	e51b2008 	ldr	r2, [fp, #-8]
  107dfc:	e5922018 	ldr	r2, [r2, #24]
  107e00:	e1a00002 	mov	r0, r2
  107e04:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  107e08:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  107e0c:	e12fff33 	blx	r3
  107e10:	e1a03000 	mov	r3, r0
}
  107e14:	e1a00003 	mov	r0, r3
  107e18:	e24bd004 	sub	sp, fp, #4
  107e1c:	e8bd8800 	pop	{fp, pc}

00107e20 <sal_shutdown>:

int sal_shutdown(int socket, int how)
{
  107e20:	e92d4800 	push	{fp, lr}
  107e24:	e28db004 	add	fp, sp, #4
  107e28:	e24dd018 	sub	sp, sp, #24
  107e2c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  107e30:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  107e34:	e3a03000 	mov	r3, #0
  107e38:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107e3c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  107e40:	ebfffd29 	bl	1072ec <sal_get_socket>
  107e44:	e50b000c 	str	r0, [fp, #-12]
  107e48:	e51b300c 	ldr	r3, [fp, #-12]
  107e4c:	e3530000 	cmp	r3, #0
  107e50:	1a000001 	bne	107e5c <sal_shutdown+0x3c>
  107e54:	e3e03000 	mvn	r3, #0
  107e58:	ea00001b 	b	107ecc <sal_shutdown+0xac>

    /* shutdown operation not need to check network interface status */
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, shutdown);
  107e5c:	e51b300c 	ldr	r3, [fp, #-12]
  107e60:	e5933014 	ldr	r3, [r3, #20]
  107e64:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107e68:	e50b3010 	str	r3, [fp, #-16]
  107e6c:	e51b3010 	ldr	r3, [fp, #-16]
  107e70:	e5933008 	ldr	r3, [r3, #8]
  107e74:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107e78:	e3530000 	cmp	r3, #0
  107e7c:	1a000001 	bne	107e88 <sal_shutdown+0x68>
  107e80:	e3e03000 	mvn	r3, #0
  107e84:	ea000010 	b	107ecc <sal_shutdown+0xac>

    if (pf->skt_ops->shutdown((int)(size_t)sock->user_data, how) == 0)
  107e88:	e51b3010 	ldr	r3, [fp, #-16]
  107e8c:	e5933008 	ldr	r3, [r3, #8]
  107e90:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107e94:	e51b200c 	ldr	r2, [fp, #-12]
  107e98:	e5922018 	ldr	r2, [r2, #24]
  107e9c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  107ea0:	e1a00002 	mov	r0, r2
  107ea4:	e12fff33 	blx	r3
  107ea8:	e1a03000 	mov	r3, r0
  107eac:	e3530000 	cmp	r3, #0
  107eb0:	1a000002 	bne	107ec0 <sal_shutdown+0xa0>
            {
                return -1;
            }
        }
#endif
        error = 0;
  107eb4:	e3a03000 	mov	r3, #0
  107eb8:	e50b3008 	str	r3, [fp, #-8]
  107ebc:	ea000001 	b	107ec8 <sal_shutdown+0xa8>
    }
    else
    {
        error = -1;
  107ec0:	e3e03000 	mvn	r3, #0
  107ec4:	e50b3008 	str	r3, [fp, #-8]
    }


    return error;
  107ec8:	e51b3008 	ldr	r3, [fp, #-8]
}
  107ecc:	e1a00003 	mov	r0, r3
  107ed0:	e24bd004 	sub	sp, fp, #4
  107ed4:	e8bd8800 	pop	{fp, pc}

00107ed8 <sal_getpeername>:

int sal_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  107ed8:	e92d4800 	push	{fp, lr}
  107edc:	e28db004 	add	fp, sp, #4
  107ee0:	e24dd018 	sub	sp, sp, #24
  107ee4:	e50b0010 	str	r0, [fp, #-16]
  107ee8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  107eec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107ef0:	e51b0010 	ldr	r0, [fp, #-16]
  107ef4:	ebfffcfc 	bl	1072ec <sal_get_socket>
  107ef8:	e50b0008 	str	r0, [fp, #-8]
  107efc:	e51b3008 	ldr	r3, [fp, #-8]
  107f00:	e3530000 	cmp	r3, #0
  107f04:	1a000001 	bne	107f10 <sal_getpeername+0x38>
  107f08:	e3e03000 	mvn	r3, #0
  107f0c:	ea000014 	b	107f64 <sal_getpeername+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getpeername);
  107f10:	e51b3008 	ldr	r3, [fp, #-8]
  107f14:	e5933014 	ldr	r3, [r3, #20]
  107f18:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107f1c:	e50b300c 	str	r3, [fp, #-12]
  107f20:	e51b300c 	ldr	r3, [fp, #-12]
  107f24:	e5933008 	ldr	r3, [r3, #8]
  107f28:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  107f2c:	e3530000 	cmp	r3, #0
  107f30:	1a000001 	bne	107f3c <sal_getpeername+0x64>
  107f34:	e3e03000 	mvn	r3, #0
  107f38:	ea000009 	b	107f64 <sal_getpeername+0x8c>

    return pf->skt_ops->getpeername((int)(size_t)sock->user_data, name, namelen);
  107f3c:	e51b300c 	ldr	r3, [fp, #-12]
  107f40:	e5933008 	ldr	r3, [r3, #8]
  107f44:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  107f48:	e51b2008 	ldr	r2, [fp, #-8]
  107f4c:	e5922018 	ldr	r2, [r2, #24]
  107f50:	e1a00002 	mov	r0, r2
  107f54:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107f58:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  107f5c:	e12fff33 	blx	r3
  107f60:	e1a03000 	mov	r3, r0
}
  107f64:	e1a00003 	mov	r0, r3
  107f68:	e24bd004 	sub	sp, fp, #4
  107f6c:	e8bd8800 	pop	{fp, pc}

00107f70 <sal_getsockname>:

int sal_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  107f70:	e92d4800 	push	{fp, lr}
  107f74:	e28db004 	add	fp, sp, #4
  107f78:	e24dd018 	sub	sp, sp, #24
  107f7c:	e50b0010 	str	r0, [fp, #-16]
  107f80:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  107f84:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107f88:	e51b0010 	ldr	r0, [fp, #-16]
  107f8c:	ebfffcd6 	bl	1072ec <sal_get_socket>
  107f90:	e50b0008 	str	r0, [fp, #-8]
  107f94:	e51b3008 	ldr	r3, [fp, #-8]
  107f98:	e3530000 	cmp	r3, #0
  107f9c:	1a000001 	bne	107fa8 <sal_getsockname+0x38>
  107fa0:	e3e03000 	mvn	r3, #0
  107fa4:	ea000014 	b	107ffc <sal_getsockname+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockname);
  107fa8:	e51b3008 	ldr	r3, [fp, #-8]
  107fac:	e5933014 	ldr	r3, [r3, #20]
  107fb0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107fb4:	e50b300c 	str	r3, [fp, #-12]
  107fb8:	e51b300c 	ldr	r3, [fp, #-12]
  107fbc:	e5933008 	ldr	r3, [r3, #8]
  107fc0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  107fc4:	e3530000 	cmp	r3, #0
  107fc8:	1a000001 	bne	107fd4 <sal_getsockname+0x64>
  107fcc:	e3e03000 	mvn	r3, #0
  107fd0:	ea000009 	b	107ffc <sal_getsockname+0x8c>

    return pf->skt_ops->getsockname((int)(size_t)sock->user_data, name, namelen);
  107fd4:	e51b300c 	ldr	r3, [fp, #-12]
  107fd8:	e5933008 	ldr	r3, [r3, #8]
  107fdc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  107fe0:	e51b2008 	ldr	r2, [fp, #-8]
  107fe4:	e5922018 	ldr	r2, [r2, #24]
  107fe8:	e1a00002 	mov	r0, r2
  107fec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107ff0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  107ff4:	e12fff33 	blx	r3
  107ff8:	e1a03000 	mov	r3, r0
}
  107ffc:	e1a00003 	mov	r0, r3
  108000:	e24bd004 	sub	sp, fp, #4
  108004:	e8bd8800 	pop	{fp, pc}

00108008 <sal_getsockopt>:

int sal_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  108008:	e92d4810 	push	{r4, fp, lr}
  10800c:	e28db008 	add	fp, sp, #8
  108010:	e24dd024 	sub	sp, sp, #36	; 0x24
  108014:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108018:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10801c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108020:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108024:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108028:	ebfffcaf 	bl	1072ec <sal_get_socket>
  10802c:	e50b0010 	str	r0, [fp, #-16]
  108030:	e51b3010 	ldr	r3, [fp, #-16]
  108034:	e3530000 	cmp	r3, #0
  108038:	1a000001 	bne	108044 <sal_getsockopt+0x3c>
  10803c:	e3e03000 	mvn	r3, #0
  108040:	ea000017 	b	1080a4 <sal_getsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockopt);
  108044:	e51b3010 	ldr	r3, [fp, #-16]
  108048:	e5933014 	ldr	r3, [r3, #20]
  10804c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108050:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108058:	e5933008 	ldr	r3, [r3, #8]
  10805c:	e5933020 	ldr	r3, [r3, #32]
  108060:	e3530000 	cmp	r3, #0
  108064:	1a000001 	bne	108070 <sal_getsockopt+0x68>
  108068:	e3e03000 	mvn	r3, #0
  10806c:	ea00000c 	b	1080a4 <sal_getsockopt+0x9c>

    return pf->skt_ops->getsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  108070:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108074:	e5933008 	ldr	r3, [r3, #8]
  108078:	e5934020 	ldr	r4, [r3, #32]
  10807c:	e51b3010 	ldr	r3, [fp, #-16]
  108080:	e5933018 	ldr	r3, [r3, #24]
  108084:	e1a00003 	mov	r0, r3
  108088:	e59b3004 	ldr	r3, [fp, #4]
  10808c:	e58d3000 	str	r3, [sp]
  108090:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108094:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108098:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10809c:	e12fff34 	blx	r4
  1080a0:	e1a03000 	mov	r3, r0
}
  1080a4:	e1a00003 	mov	r0, r3
  1080a8:	e24bd008 	sub	sp, fp, #8
  1080ac:	e8bd8810 	pop	{r4, fp, pc}

001080b0 <sal_setsockopt>:

int sal_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  1080b0:	e92d4810 	push	{r4, fp, lr}
  1080b4:	e28db008 	add	fp, sp, #8
  1080b8:	e24dd024 	sub	sp, sp, #36	; 0x24
  1080bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1080c0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1080c4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1080c8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1080cc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1080d0:	ebfffc85 	bl	1072ec <sal_get_socket>
  1080d4:	e50b0010 	str	r0, [fp, #-16]
  1080d8:	e51b3010 	ldr	r3, [fp, #-16]
  1080dc:	e3530000 	cmp	r3, #0
  1080e0:	1a000001 	bne	1080ec <sal_setsockopt+0x3c>
  1080e4:	e3e03000 	mvn	r3, #0
  1080e8:	ea000017 	b	10814c <sal_setsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, setsockopt);
  1080ec:	e51b3010 	ldr	r3, [fp, #-16]
  1080f0:	e5933014 	ldr	r3, [r3, #20]
  1080f4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1080f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1080fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108100:	e5933008 	ldr	r3, [r3, #8]
  108104:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  108108:	e3530000 	cmp	r3, #0
  10810c:	1a000001 	bne	108118 <sal_setsockopt+0x68>
  108110:	e3e03000 	mvn	r3, #0
  108114:	ea00000c 	b	10814c <sal_setsockopt+0x9c>
    else
    {
        return pf->skt_ops->setsockopt((int) sock->user_data, level, optname, optval, optlen);
    }
#else
    return pf->skt_ops->setsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  108118:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10811c:	e5933008 	ldr	r3, [r3, #8]
  108120:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  108124:	e51b3010 	ldr	r3, [fp, #-16]
  108128:	e5933018 	ldr	r3, [r3, #24]
  10812c:	e1a00003 	mov	r0, r3
  108130:	e59b3004 	ldr	r3, [fp, #4]
  108134:	e58d3000 	str	r3, [sp]
  108138:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10813c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108140:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108144:	e12fff34 	blx	r4
  108148:	e1a03000 	mov	r3, r0
#endif /* SAL_USING_TLS */
}
  10814c:	e1a00003 	mov	r0, r3
  108150:	e24bd008 	sub	sp, fp, #8
  108154:	e8bd8810 	pop	{r4, fp, pc}

00108158 <sal_connect>:

int sal_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108158:	e92d4800 	push	{fp, lr}
  10815c:	e28db004 	add	fp, sp, #4
  108160:	e24dd020 	sub	sp, sp, #32
  108164:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108168:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10816c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int ret;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108170:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108174:	ebfffc5c 	bl	1072ec <sal_get_socket>
  108178:	e50b0008 	str	r0, [fp, #-8]
  10817c:	e51b3008 	ldr	r3, [fp, #-8]
  108180:	e3530000 	cmp	r3, #0
  108184:	1a000001 	bne	108190 <sal_connect+0x38>
  108188:	e3e03000 	mvn	r3, #0
  10818c:	ea00001d 	b	108208 <sal_connect+0xb0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  108190:	e51b3008 	ldr	r3, [fp, #-8]
  108194:	e5933014 	ldr	r3, [r3, #20]
  108198:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10819c:	e2033001 	and	r3, r3, #1
  1081a0:	e3530000 	cmp	r3, #0
  1081a4:	1a000001 	bne	1081b0 <sal_connect+0x58>
  1081a8:	e3e03000 	mvn	r3, #0
  1081ac:	ea000015 	b	108208 <sal_connect+0xb0>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, connect);
  1081b0:	e51b3008 	ldr	r3, [fp, #-8]
  1081b4:	e5933014 	ldr	r3, [r3, #20]
  1081b8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1081bc:	e50b300c 	str	r3, [fp, #-12]
  1081c0:	e51b300c 	ldr	r3, [fp, #-12]
  1081c4:	e5933008 	ldr	r3, [r3, #8]
  1081c8:	e5933010 	ldr	r3, [r3, #16]
  1081cc:	e3530000 	cmp	r3, #0
  1081d0:	1a000001 	bne	1081dc <sal_connect+0x84>
  1081d4:	e3e03000 	mvn	r3, #0
  1081d8:	ea00000a 	b	108208 <sal_connect+0xb0>

    ret = pf->skt_ops->connect((int)(size_t)sock->user_data, name, namelen);
  1081dc:	e51b300c 	ldr	r3, [fp, #-12]
  1081e0:	e5933008 	ldr	r3, [r3, #8]
  1081e4:	e5933010 	ldr	r3, [r3, #16]
  1081e8:	e51b2008 	ldr	r2, [fp, #-8]
  1081ec:	e5922018 	ldr	r2, [r2, #24]
  1081f0:	e1a00002 	mov	r0, r2
  1081f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1081f8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1081fc:	e12fff33 	blx	r3
  108200:	e50b0010 	str	r0, [fp, #-16]

        return ret;
    }
#endif

    return ret;
  108204:	e51b3010 	ldr	r3, [fp, #-16]
}
  108208:	e1a00003 	mov	r0, r3
  10820c:	e24bd004 	sub	sp, fp, #4
  108210:	e8bd8800 	pop	{fp, pc}

00108214 <sal_listen>:

int sal_listen(int socket, int backlog)
{
  108214:	e92d4800 	push	{fp, lr}
  108218:	e28db004 	add	fp, sp, #4
  10821c:	e24dd010 	sub	sp, sp, #16
  108220:	e50b0010 	str	r0, [fp, #-16]
  108224:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108228:	e51b0010 	ldr	r0, [fp, #-16]
  10822c:	ebfffc2e 	bl	1072ec <sal_get_socket>
  108230:	e50b0008 	str	r0, [fp, #-8]
  108234:	e51b3008 	ldr	r3, [fp, #-8]
  108238:	e3530000 	cmp	r3, #0
  10823c:	1a000001 	bne	108248 <sal_listen+0x34>
  108240:	e3e03000 	mvn	r3, #0
  108244:	ea000013 	b	108298 <sal_listen+0x84>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, listen);
  108248:	e51b3008 	ldr	r3, [fp, #-8]
  10824c:	e5933014 	ldr	r3, [r3, #20]
  108250:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108254:	e50b300c 	str	r3, [fp, #-12]
  108258:	e51b300c 	ldr	r3, [fp, #-12]
  10825c:	e5933008 	ldr	r3, [r3, #8]
  108260:	e593300c 	ldr	r3, [r3, #12]
  108264:	e3530000 	cmp	r3, #0
  108268:	1a000001 	bne	108274 <sal_listen+0x60>
  10826c:	e3e03000 	mvn	r3, #0
  108270:	ea000008 	b	108298 <sal_listen+0x84>

    return pf->skt_ops->listen((int)(size_t)sock->user_data, backlog);
  108274:	e51b300c 	ldr	r3, [fp, #-12]
  108278:	e5933008 	ldr	r3, [r3, #8]
  10827c:	e593300c 	ldr	r3, [r3, #12]
  108280:	e51b2008 	ldr	r2, [fp, #-8]
  108284:	e5922018 	ldr	r2, [r2, #24]
  108288:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10828c:	e1a00002 	mov	r0, r2
  108290:	e12fff33 	blx	r3
  108294:	e1a03000 	mov	r3, r0
}
  108298:	e1a00003 	mov	r0, r3
  10829c:	e24bd004 	sub	sp, fp, #4
  1082a0:	e8bd8800 	pop	{fp, pc}

001082a4 <sal_recvfrom>:

int sal_recvfrom(int socket, void *mem, size_t len, int flags,
                 struct sockaddr *from, socklen_t *fromlen)
{
  1082a4:	e92d4810 	push	{r4, fp, lr}
  1082a8:	e28db008 	add	fp, sp, #8
  1082ac:	e24dd024 	sub	sp, sp, #36	; 0x24
  1082b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1082b4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1082b8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1082bc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1082c0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1082c4:	ebfffc08 	bl	1072ec <sal_get_socket>
  1082c8:	e50b0010 	str	r0, [fp, #-16]
  1082cc:	e51b3010 	ldr	r3, [fp, #-16]
  1082d0:	e3530000 	cmp	r3, #0
  1082d4:	1a000001 	bne	1082e0 <sal_recvfrom+0x3c>
  1082d8:	e3e03000 	mvn	r3, #0
  1082dc:	ea000021 	b	108368 <sal_recvfrom+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1082e0:	e51b3010 	ldr	r3, [fp, #-16]
  1082e4:	e5933014 	ldr	r3, [r3, #20]
  1082e8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1082ec:	e2033001 	and	r3, r3, #1
  1082f0:	e3530000 	cmp	r3, #0
  1082f4:	1a000001 	bne	108300 <sal_recvfrom+0x5c>
  1082f8:	e3e03000 	mvn	r3, #0
  1082fc:	ea000019 	b	108368 <sal_recvfrom+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, recvfrom);
  108300:	e51b3010 	ldr	r3, [fp, #-16]
  108304:	e5933014 	ldr	r3, [r3, #20]
  108308:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10830c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108310:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108314:	e5933008 	ldr	r3, [r3, #8]
  108318:	e593301c 	ldr	r3, [r3, #28]
  10831c:	e3530000 	cmp	r3, #0
  108320:	1a000001 	bne	10832c <sal_recvfrom+0x88>
  108324:	e3e03000 	mvn	r3, #0
  108328:	ea00000e 	b	108368 <sal_recvfrom+0xc4>
    else
    {
        return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
    }
#else
    return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
  10832c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108330:	e5933008 	ldr	r3, [r3, #8]
  108334:	e593401c 	ldr	r4, [r3, #28]
  108338:	e51b3010 	ldr	r3, [fp, #-16]
  10833c:	e5933018 	ldr	r3, [r3, #24]
  108340:	e1a00003 	mov	r0, r3
  108344:	e59b3008 	ldr	r3, [fp, #8]
  108348:	e58d3004 	str	r3, [sp, #4]
  10834c:	e59b3004 	ldr	r3, [fp, #4]
  108350:	e58d3000 	str	r3, [sp]
  108354:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108358:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10835c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108360:	e12fff34 	blx	r4
  108364:	e1a03000 	mov	r3, r0
#endif
}
  108368:	e1a00003 	mov	r0, r3
  10836c:	e24bd008 	sub	sp, fp, #8
  108370:	e8bd8810 	pop	{r4, fp, pc}

00108374 <sal_sendto>:

int sal_sendto(int socket, const void *dataptr, size_t size, int flags,
               const struct sockaddr *to, socklen_t tolen)
{
  108374:	e92d4810 	push	{r4, fp, lr}
  108378:	e28db008 	add	fp, sp, #8
  10837c:	e24dd024 	sub	sp, sp, #36	; 0x24
  108380:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108384:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108388:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  10838c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108390:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108394:	ebfffbd4 	bl	1072ec <sal_get_socket>
  108398:	e50b0010 	str	r0, [fp, #-16]
  10839c:	e51b3010 	ldr	r3, [fp, #-16]
  1083a0:	e3530000 	cmp	r3, #0
  1083a4:	1a000001 	bne	1083b0 <sal_sendto+0x3c>
  1083a8:	e3e03000 	mvn	r3, #0
  1083ac:	ea000021 	b	108438 <sal_sendto+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1083b0:	e51b3010 	ldr	r3, [fp, #-16]
  1083b4:	e5933014 	ldr	r3, [r3, #20]
  1083b8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1083bc:	e2033001 	and	r3, r3, #1
  1083c0:	e3530000 	cmp	r3, #0
  1083c4:	1a000001 	bne	1083d0 <sal_sendto+0x5c>
  1083c8:	e3e03000 	mvn	r3, #0
  1083cc:	ea000019 	b	108438 <sal_sendto+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, sendto);
  1083d0:	e51b3010 	ldr	r3, [fp, #-16]
  1083d4:	e5933014 	ldr	r3, [r3, #20]
  1083d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1083dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1083e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1083e4:	e5933008 	ldr	r3, [r3, #8]
  1083e8:	e5933018 	ldr	r3, [r3, #24]
  1083ec:	e3530000 	cmp	r3, #0
  1083f0:	1a000001 	bne	1083fc <sal_sendto+0x88>
  1083f4:	e3e03000 	mvn	r3, #0
  1083f8:	ea00000e 	b	108438 <sal_sendto+0xc4>
    else
    {
        return pf->skt_ops->sendto((int) sock->user_data, dataptr, size, flags, to, tolen);
    }
#else
    return pf->skt_ops->sendto((int)(size_t)sock->user_data, dataptr, size, flags, to, tolen);
  1083fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108400:	e5933008 	ldr	r3, [r3, #8]
  108404:	e5934018 	ldr	r4, [r3, #24]
  108408:	e51b3010 	ldr	r3, [fp, #-16]
  10840c:	e5933018 	ldr	r3, [r3, #24]
  108410:	e1a00003 	mov	r0, r3
  108414:	e59b3008 	ldr	r3, [fp, #8]
  108418:	e58d3004 	str	r3, [sp, #4]
  10841c:	e59b3004 	ldr	r3, [fp, #4]
  108420:	e58d3000 	str	r3, [sp]
  108424:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108428:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10842c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108430:	e12fff34 	blx	r4
  108434:	e1a03000 	mov	r3, r0
#endif
}
  108438:	e1a00003 	mov	r0, r3
  10843c:	e24bd008 	sub	sp, fp, #8
  108440:	e8bd8810 	pop	{r4, fp, pc}

00108444 <sal_socket>:

int sal_socket(int domain, int type, int protocol)
{
  108444:	e92d4800 	push	{fp, lr}
  108448:	e28db004 	add	fp, sp, #4
  10844c:	e24dd028 	sub	sp, sp, #40	; 0x28
  108450:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  108454:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  108458:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int socket, proto_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* allocate a new socket and registered socket options */
    socket = socket_new();
  10845c:	ebfffd1f 	bl	1078e0 <socket_new>
  108460:	e50b0008 	str	r0, [fp, #-8]
    if (socket < 0)
  108464:	e51b3008 	ldr	r3, [fp, #-8]
  108468:	e3530000 	cmp	r3, #0
  10846c:	aa000001 	bge	108478 <sal_socket+0x34>
    {
        return -1;
  108470:	e3e03000 	mvn	r3, #0
  108474:	ea000040 	b	10857c <sal_socket+0x138>
    }

    /* get sal socket object by socket descriptor */
    sock = sal_get_socket(socket);
  108478:	e51b0008 	ldr	r0, [fp, #-8]
  10847c:	ebfffb9a 	bl	1072ec <sal_get_socket>
  108480:	e1a03000 	mov	r3, r0
  108484:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (sock == RT_NULL)
  108488:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10848c:	e3530000 	cmp	r3, #0
  108490:	1a000003 	bne	1084a4 <sal_socket+0x60>
    {
        socket_delete(socket);
  108494:	e51b0008 	ldr	r0, [fp, #-8]
  108498:	ebfffd3c 	bl	107990 <socket_delete>
        return -1;
  10849c:	e3e03000 	mvn	r3, #0
  1084a0:	ea000035 	b	10857c <sal_socket+0x138>
    }

    /* Initialize sal socket object */
    retval = socket_init(domain, type, protocol, &sock);
  1084a4:	e24b3018 	sub	r3, fp, #24
  1084a8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1084ac:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1084b0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1084b4:	ebfffc0b 	bl	1074e8 <socket_init>
  1084b8:	e50b000c 	str	r0, [fp, #-12]
    if (retval < 0)
  1084bc:	e51b300c 	ldr	r3, [fp, #-12]
  1084c0:	e3530000 	cmp	r3, #0
  1084c4:	aa00000d 	bge	108500 <sal_socket+0xbc>
    {
        LOG_E("SAL socket protocol family input failed, return error %d.", retval);
  1084c8:	e3050f60 	movw	r0, #24416	; 0x5f60
  1084cc:	e3400014 	movt	r0, #20
  1084d0:	ebffeb0f 	bl	103114 <rt_kprintf>
  1084d4:	e51b100c 	ldr	r1, [fp, #-12]
  1084d8:	e30600f8 	movw	r0, #24824	; 0x60f8
  1084dc:	e3400014 	movt	r0, #20
  1084e0:	ebffeb0b 	bl	103114 <rt_kprintf>
  1084e4:	e3050f94 	movw	r0, #24468	; 0x5f94
  1084e8:	e3400014 	movt	r0, #20
  1084ec:	ebffeb08 	bl	103114 <rt_kprintf>
        socket_delete(socket);
  1084f0:	e51b0008 	ldr	r0, [fp, #-8]
  1084f4:	ebfffd25 	bl	107990 <socket_delete>
        return -1;
  1084f8:	e3e03000 	mvn	r3, #0
  1084fc:	ea00001e 	b	10857c <sal_socket+0x138>
    }

    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  108500:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108504:	e5933014 	ldr	r3, [r3, #20]
  108508:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10850c:	e50b3010 	str	r3, [fp, #-16]
  108510:	e51b3010 	ldr	r3, [fp, #-16]
  108514:	e5933008 	ldr	r3, [r3, #8]
  108518:	e5933000 	ldr	r3, [r3]
  10851c:	e3530000 	cmp	r3, #0
  108520:	1a000001 	bne	10852c <sal_socket+0xe8>
  108524:	e3e03000 	mvn	r3, #0
  108528:	ea000013 	b	10857c <sal_socket+0x138>

    proto_socket = pf->skt_ops->socket(domain, type, protocol);
  10852c:	e51b3010 	ldr	r3, [fp, #-16]
  108530:	e5933008 	ldr	r3, [r3, #8]
  108534:	e5933000 	ldr	r3, [r3]
  108538:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  10853c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  108540:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  108544:	e12fff33 	blx	r3
  108548:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (proto_socket >= 0)
  10854c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108550:	e3530000 	cmp	r3, #0
  108554:	ba000005 	blt	108570 <sal_socket+0x12c>
                socket_delete(socket);
                return -1;
            }
        }
#endif
        sock->user_data = (void *)(size_t)proto_socket;
  108558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10855c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  108560:	e5832018 	str	r2, [r3, #24]
        return sock->socket;
  108564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108568:	e5933004 	ldr	r3, [r3, #4]
  10856c:	ea000002 	b	10857c <sal_socket+0x138>
    }
    socket_delete(socket);
  108570:	e51b0008 	ldr	r0, [fp, #-8]
  108574:	ebfffd05 	bl	107990 <socket_delete>
    return -1;
  108578:	e3e03000 	mvn	r3, #0
}
  10857c:	e1a00003 	mov	r0, r3
  108580:	e24bd004 	sub	sp, fp, #4
  108584:	e8bd8800 	pop	{fp, pc}

00108588 <sal_closesocket>:

int sal_closesocket(int socket)
{
  108588:	e92d4800 	push	{fp, lr}
  10858c:	e28db004 	add	fp, sp, #4
  108590:	e24dd018 	sub	sp, sp, #24
  108594:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  108598:	e3a03000 	mov	r3, #0
  10859c:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1085a0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1085a4:	ebfffb50 	bl	1072ec <sal_get_socket>
  1085a8:	e50b000c 	str	r0, [fp, #-12]
  1085ac:	e51b300c 	ldr	r3, [fp, #-12]
  1085b0:	e3530000 	cmp	r3, #0
  1085b4:	1a000001 	bne	1085c0 <sal_closesocket+0x38>
  1085b8:	e3e03000 	mvn	r3, #0
  1085bc:	ea00001c 	b	108634 <sal_closesocket+0xac>

    /* clsoesocket operation not need to vaild network interface status */
    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  1085c0:	e51b300c 	ldr	r3, [fp, #-12]
  1085c4:	e5933014 	ldr	r3, [r3, #20]
  1085c8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1085cc:	e50b3010 	str	r3, [fp, #-16]
  1085d0:	e51b3010 	ldr	r3, [fp, #-16]
  1085d4:	e5933008 	ldr	r3, [r3, #8]
  1085d8:	e5933000 	ldr	r3, [r3]
  1085dc:	e3530000 	cmp	r3, #0
  1085e0:	1a000001 	bne	1085ec <sal_closesocket+0x64>
  1085e4:	e3e03000 	mvn	r3, #0
  1085e8:	ea000011 	b	108634 <sal_closesocket+0xac>

    if (pf->skt_ops->closesocket((int)(size_t)sock->user_data) == 0)
  1085ec:	e51b3010 	ldr	r3, [fp, #-16]
  1085f0:	e5933008 	ldr	r3, [r3, #8]
  1085f4:	e5933004 	ldr	r3, [r3, #4]
  1085f8:	e51b200c 	ldr	r2, [fp, #-12]
  1085fc:	e5922018 	ldr	r2, [r2, #24]
  108600:	e1a00002 	mov	r0, r2
  108604:	e12fff33 	blx	r3
  108608:	e1a03000 	mov	r3, r0
  10860c:	e3530000 	cmp	r3, #0
  108610:	1a000002 	bne	108620 <sal_closesocket+0x98>
            {
                return -1;
            }
        }
#endif
        error = 0;
  108614:	e3a03000 	mov	r3, #0
  108618:	e50b3008 	str	r3, [fp, #-8]
  10861c:	ea000001 	b	108628 <sal_closesocket+0xa0>
    }
    else
    {
        error = -1;
  108620:	e3e03000 	mvn	r3, #0
  108624:	e50b3008 	str	r3, [fp, #-8]
    }

    /* delete socket */
    socket_delete(socket);
  108628:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10862c:	ebfffcd7 	bl	107990 <socket_delete>

    return error;
  108630:	e51b3008 	ldr	r3, [fp, #-8]
}
  108634:	e1a00003 	mov	r0, r3
  108638:	e24bd004 	sub	sp, fp, #4
  10863c:	e8bd8800 	pop	{fp, pc}

00108640 <sal_ioctlsocket>:

int sal_ioctlsocket(int socket, long cmd, void *arg)
{
  108640:	e92d4800 	push	{fp, lr}
  108644:	e28db004 	add	fp, sp, #4
  108648:	e24dd028 	sub	sp, sp, #40	; 0x28
  10864c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  108650:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  108654:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct sockaddr_in *addr_in = RT_NULL;
  108658:	e3a03000 	mov	r3, #0
  10865c:	e50b3008 	str	r3, [fp, #-8]
    struct sockaddr *addr = RT_NULL;
  108660:	e3a03000 	mov	r3, #0
  108664:	e50b300c 	str	r3, [fp, #-12]
    ip_addr_t input_ipaddr;
    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108668:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10866c:	ebfffb1e 	bl	1072ec <sal_get_socket>
  108670:	e50b0010 	str	r0, [fp, #-16]
  108674:	e51b3010 	ldr	r3, [fp, #-16]
  108678:	e3530000 	cmp	r3, #0
  10867c:	1a000001 	bne	108688 <sal_ioctlsocket+0x48>
  108680:	e3e03000 	mvn	r3, #0
  108684:	ea000086 	b	1088a4 <sal_ioctlsocket+0x264>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, ioctlsocket);
  108688:	e51b3010 	ldr	r3, [fp, #-16]
  10868c:	e5933014 	ldr	r3, [r3, #20]
  108690:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108694:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108698:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10869c:	e5933008 	ldr	r3, [r3, #8]
  1086a0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1086a4:	e3530000 	cmp	r3, #0
  1086a8:	1a000001 	bne	1086b4 <sal_ioctlsocket+0x74>
  1086ac:	e3e03000 	mvn	r3, #0
  1086b0:	ea00007b 	b	1088a4 <sal_ioctlsocket+0x264>

    struct sal_ifreq *ifr = (struct sal_ifreq *)arg;
  1086b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1086b8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if((sock->domain == AF_INET)&&(sock->netdev)&&(ifr != RT_NULL))
  1086bc:	e51b3010 	ldr	r3, [fp, #-16]
  1086c0:	e5933008 	ldr	r3, [r3, #8]
  1086c4:	e3530002 	cmp	r3, #2
  1086c8:	1a000068 	bne	108870 <sal_ioctlsocket+0x230>
  1086cc:	e51b3010 	ldr	r3, [fp, #-16]
  1086d0:	e5933014 	ldr	r3, [r3, #20]
  1086d4:	e3530000 	cmp	r3, #0
  1086d8:	0a000064 	beq	108870 <sal_ioctlsocket+0x230>
  1086dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1086e0:	e3530000 	cmp	r3, #0
  1086e4:	0a000061 	beq	108870 <sal_ioctlsocket+0x230>
    {
        switch (cmd)
  1086e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1086ec:	e2433c89 	sub	r3, r3, #35072	; 0x8900
  1086f0:	e2433015 	sub	r3, r3, #21
  1086f4:	e3530012 	cmp	r3, #18
  1086f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1086fc:	ea00005d 	b	108878 <sal_ioctlsocket+0x238>
  108700:	0010874c 	.word	0x0010874c
  108704:	00108774 	.word	0x00108774
  108708:	00108878 	.word	0x00108878
  10870c:	00108878 	.word	0x00108878
  108710:	00108878 	.word	0x00108878
  108714:	00108878 	.word	0x00108878
  108718:	001087b0 	.word	0x001087b0
  10871c:	001087d8 	.word	0x001087d8
  108720:	00108878 	.word	0x00108878
  108724:	00108878 	.word	0x00108878
  108728:	00108878 	.word	0x00108878
  10872c:	00108878 	.word	0x00108878
  108730:	00108850 	.word	0x00108850
  108734:	00108878 	.word	0x00108878
  108738:	00108878 	.word	0x00108878
  10873c:	00108878 	.word	0x00108878
  108740:	00108878 	.word	0x00108878
  108744:	00108878 	.word	0x00108878
  108748:	00108814 	.word	0x00108814
        {
        case SIOCGIFADDR:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_addr);
  10874c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108750:	e2833010 	add	r3, r3, #16
  108754:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.addr;
  108758:	e51b3010 	ldr	r3, [fp, #-16]
  10875c:	e5933014 	ldr	r3, [r3, #20]
  108760:	e593200c 	ldr	r2, [r3, #12]
  108764:	e51b3008 	ldr	r3, [fp, #-8]
  108768:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  10876c:	e3a03000 	mov	r3, #0
  108770:	ea00004b 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCSIFADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_addr);
  108774:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108778:	e2833010 	add	r3, r3, #16
  10877c:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  108780:	e24b301c 	sub	r3, fp, #28
  108784:	e1a01003 	mov	r1, r3
  108788:	e51b000c 	ldr	r0, [fp, #-12]
  10878c:	ebfffd17 	bl	107bf0 <sal_sockaddr_to_ipaddr>
            netdev_set_ipaddr(sock->netdev,&input_ipaddr);
  108790:	e51b3010 	ldr	r3, [fp, #-16]
  108794:	e5933014 	ldr	r3, [r3, #20]
  108798:	e24b201c 	sub	r2, fp, #28
  10879c:	e1a01002 	mov	r1, r2
  1087a0:	e1a00003 	mov	r0, r3
  1087a4:	ebfff4ae 	bl	105a64 <netdev_set_ipaddr>
            return 0;    
  1087a8:	e3a03000 	mov	r3, #0
  1087ac:	ea00003c 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFNETMASK:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_netmask);
  1087b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1087b4:	e2833010 	add	r3, r3, #16
  1087b8:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->netmask.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->netmask.addr;
  1087bc:	e51b3010 	ldr	r3, [fp, #-16]
  1087c0:	e5933014 	ldr	r3, [r3, #20]
  1087c4:	e5932010 	ldr	r2, [r3, #16]
  1087c8:	e51b3008 	ldr	r3, [fp, #-8]
  1087cc:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  1087d0:	e3a03000 	mov	r3, #0
  1087d4:	ea000032 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCSIFNETMASK:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_netmask);
  1087d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1087dc:	e2833010 	add	r3, r3, #16
  1087e0:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  1087e4:	e24b301c 	sub	r3, fp, #28
  1087e8:	e1a01003 	mov	r1, r3
  1087ec:	e51b000c 	ldr	r0, [fp, #-12]
  1087f0:	ebfffcfe 	bl	107bf0 <sal_sockaddr_to_ipaddr>
            netdev_set_netmask(sock->netdev,&input_ipaddr);
  1087f4:	e51b3010 	ldr	r3, [fp, #-16]
  1087f8:	e5933014 	ldr	r3, [r3, #20]
  1087fc:	e24b201c 	sub	r2, fp, #28
  108800:	e1a01002 	mov	r1, r2
  108804:	e1a00003 	mov	r0, r3
  108808:	ebfff4e4 	bl	105ba0 <netdev_set_netmask>
            return 0;            
  10880c:	e3a03000 	mov	r3, #0
  108810:	ea000023 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFHWADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_hwaddr);
  108814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108818:	e2833010 	add	r3, r3, #16
  10881c:	e50b300c 	str	r3, [fp, #-12]
            rt_memcpy(addr->sa_data,sock->netdev->hwaddr,sock->netdev->hwaddr_len);
  108820:	e51b300c 	ldr	r3, [fp, #-12]
  108824:	e2830002 	add	r0, r3, #2
  108828:	e51b3010 	ldr	r3, [fp, #-16]
  10882c:	e5933014 	ldr	r3, [r3, #20]
  108830:	e2831021 	add	r1, r3, #33	; 0x21
  108834:	e51b3010 	ldr	r3, [fp, #-16]
  108838:	e5933014 	ldr	r3, [r3, #20]
  10883c:	e5d33020 	ldrb	r3, [r3, #32]
  108840:	e1a02003 	mov	r2, r3
  108844:	ebffeaad 	bl	103300 <rt_memcpy>
            return 0;
  108848:	e3a03000 	mov	r3, #0
  10884c:	ea000014 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFMTU:
            ifr->ifr_ifru.ifru_mtu = sock->netdev->mtu;
  108850:	e51b3010 	ldr	r3, [fp, #-16]
  108854:	e5933014 	ldr	r3, [r3, #20]
  108858:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  10885c:	e1a02003 	mov	r2, r3
  108860:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108864:	e5832010 	str	r2, [r3, #16]
            return 0;            
  108868:	e3a03000 	mov	r3, #0
  10886c:	ea00000c 	b	1088a4 <sal_ioctlsocket+0x264>

        default:
            break;
        }
    }
  108870:	e320f000 	nop	{0}
  108874:	ea000000 	b	10887c <sal_ioctlsocket+0x23c>
            break;
  108878:	e320f000 	nop	{0}
    return pf->skt_ops->ioctlsocket((int)(size_t)sock->user_data, cmd, arg);
  10887c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108880:	e5933008 	ldr	r3, [r3, #8]
  108884:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  108888:	e51b2010 	ldr	r2, [fp, #-16]
  10888c:	e5922018 	ldr	r2, [r2, #24]
  108890:	e1a00002 	mov	r0, r2
  108894:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  108898:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  10889c:	e12fff33 	blx	r3
  1088a0:	e1a03000 	mov	r3, r0
}
  1088a4:	e1a00003 	mov	r0, r3
  1088a8:	e24bd004 	sub	sp, fp, #4
  1088ac:	e8bd8800 	pop	{fp, pc}

001088b0 <sal_poll>:

#ifdef SAL_USING_POSIX
int sal_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  1088b0:	e92d4800 	push	{fp, lr}
  1088b4:	e28db004 	add	fp, sp, #4
  1088b8:	e24dd018 	sub	sp, sp, #24
  1088bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1088c0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int socket = (int)(size_t)file->fnode->data;
  1088c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1088c8:	e5933018 	ldr	r3, [r3, #24]
  1088cc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1088d0:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1088d4:	e51b0008 	ldr	r0, [fp, #-8]
  1088d8:	ebfffa83 	bl	1072ec <sal_get_socket>
  1088dc:	e50b000c 	str	r0, [fp, #-12]
  1088e0:	e51b300c 	ldr	r3, [fp, #-12]
  1088e4:	e3530000 	cmp	r3, #0
  1088e8:	1a000001 	bne	1088f4 <sal_poll+0x44>
  1088ec:	e3e03000 	mvn	r3, #0
  1088f0:	ea000019 	b	10895c <sal_poll+0xac>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1088f4:	e51b300c 	ldr	r3, [fp, #-12]
  1088f8:	e5933014 	ldr	r3, [r3, #20]
  1088fc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108900:	e2033001 	and	r3, r3, #1
  108904:	e3530000 	cmp	r3, #0
  108908:	1a000001 	bne	108914 <sal_poll+0x64>
  10890c:	e3e03000 	mvn	r3, #0
  108910:	ea000011 	b	10895c <sal_poll+0xac>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, poll);
  108914:	e51b300c 	ldr	r3, [fp, #-12]
  108918:	e5933014 	ldr	r3, [r3, #20]
  10891c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108920:	e50b3010 	str	r3, [fp, #-16]
  108924:	e51b3010 	ldr	r3, [fp, #-16]
  108928:	e5933008 	ldr	r3, [r3, #8]
  10892c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  108930:	e3530000 	cmp	r3, #0
  108934:	1a000001 	bne	108940 <sal_poll+0x90>
  108938:	e3e03000 	mvn	r3, #0
  10893c:	ea000006 	b	10895c <sal_poll+0xac>

    return pf->skt_ops->poll(file, req);
  108940:	e51b3010 	ldr	r3, [fp, #-16]
  108944:	e5933008 	ldr	r3, [r3, #8]
  108948:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10894c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108950:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108954:	e12fff33 	blx	r3
  108958:	e1a03000 	mov	r3, r0
}
  10895c:	e1a00003 	mov	r0, r3
  108960:	e24bd004 	sub	sp, fp, #4
  108964:	e8bd8800 	pop	{fp, pc}

00108968 <sal_gethostbyname>:
#endif

struct hostent *sal_gethostbyname(const char *name)
{
  108968:	e92d4800 	push	{fp, lr}
  10896c:	e28db004 	add	fp, sp, #4
  108970:	e24dd010 	sub	sp, sp, #16
  108974:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  108978:	e30f3574 	movw	r3, #62836	; 0xf574
  10897c:	e3403014 	movt	r3, #20
  108980:	e5933000 	ldr	r3, [r3]
  108984:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  108988:	e51b3008 	ldr	r3, [fp, #-8]
  10898c:	e3530000 	cmp	r3, #0
  108990:	0a000017 	beq	1089f4 <sal_gethostbyname+0x8c>
  108994:	e51b3008 	ldr	r3, [fp, #-8]
  108998:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10899c:	e2033001 	and	r3, r3, #1
  1089a0:	e6ef3073 	uxtb	r3, r3
  1089a4:	e3530000 	cmp	r3, #0
  1089a8:	0a000011 	beq	1089f4 <sal_gethostbyname+0x8c>
  1089ac:	e51b3008 	ldr	r3, [fp, #-8]
  1089b0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1089b4:	e50b300c 	str	r3, [fp, #-12]
  1089b8:	e51b300c 	ldr	r3, [fp, #-12]
  1089bc:	e3530000 	cmp	r3, #0
  1089c0:	0a00000b 	beq	1089f4 <sal_gethostbyname+0x8c>
  1089c4:	e51b300c 	ldr	r3, [fp, #-12]
  1089c8:	e593300c 	ldr	r3, [r3, #12]
  1089cc:	e5933000 	ldr	r3, [r3]
  1089d0:	e3530000 	cmp	r3, #0
  1089d4:	0a000006 	beq	1089f4 <sal_gethostbyname+0x8c>
    {
        return pf->netdb_ops->gethostbyname(name);
  1089d8:	e51b300c 	ldr	r3, [fp, #-12]
  1089dc:	e593300c 	ldr	r3, [r3, #12]
  1089e0:	e5933000 	ldr	r3, [r3]
  1089e4:	e51b0010 	ldr	r0, [fp, #-16]
  1089e8:	e12fff33 	blx	r3
  1089ec:	e1a03000 	mov	r3, r0
  1089f0:	ea00001e 	b	108a70 <sal_gethostbyname+0x108>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  1089f4:	e3a00001 	mov	r0, #1
  1089f8:	ebfff265 	bl	105394 <netdev_get_first_by_flags>
  1089fc:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  108a00:	e51b3008 	ldr	r3, [fp, #-8]
  108a04:	e3530000 	cmp	r3, #0
  108a08:	0a000017 	beq	108a6c <sal_gethostbyname+0x104>
  108a0c:	e51b3008 	ldr	r3, [fp, #-8]
  108a10:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108a14:	e2033001 	and	r3, r3, #1
  108a18:	e6ef3073 	uxtb	r3, r3
  108a1c:	e3530000 	cmp	r3, #0
  108a20:	0a000011 	beq	108a6c <sal_gethostbyname+0x104>
  108a24:	e51b3008 	ldr	r3, [fp, #-8]
  108a28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108a2c:	e50b300c 	str	r3, [fp, #-12]
  108a30:	e51b300c 	ldr	r3, [fp, #-12]
  108a34:	e3530000 	cmp	r3, #0
  108a38:	0a00000b 	beq	108a6c <sal_gethostbyname+0x104>
  108a3c:	e51b300c 	ldr	r3, [fp, #-12]
  108a40:	e593300c 	ldr	r3, [r3, #12]
  108a44:	e5933000 	ldr	r3, [r3]
  108a48:	e3530000 	cmp	r3, #0
  108a4c:	0a000006 	beq	108a6c <sal_gethostbyname+0x104>
        {
            return pf->netdb_ops->gethostbyname(name);
  108a50:	e51b300c 	ldr	r3, [fp, #-12]
  108a54:	e593300c 	ldr	r3, [r3, #12]
  108a58:	e5933000 	ldr	r3, [r3]
  108a5c:	e51b0010 	ldr	r0, [fp, #-16]
  108a60:	e12fff33 	blx	r3
  108a64:	e1a03000 	mov	r3, r0
  108a68:	ea000000 	b	108a70 <sal_gethostbyname+0x108>
        }
    }

    return RT_NULL;
  108a6c:	e3a03000 	mov	r3, #0
}
  108a70:	e1a00003 	mov	r0, r3
  108a74:	e24bd004 	sub	sp, fp, #4
  108a78:	e8bd8800 	pop	{fp, pc}

00108a7c <sal_gethostbyname_r>:

int sal_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                        size_t buflen, struct hostent **result, int *h_errnop)
{
  108a7c:	e92d4810 	push	{r4, fp, lr}
  108a80:	e28db008 	add	fp, sp, #8
  108a84:	e24dd024 	sub	sp, sp, #36	; 0x24
  108a88:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108a8c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108a90:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108a94:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  108a98:	e30f3574 	movw	r3, #62836	; 0xf574
  108a9c:	e3403014 	movt	r3, #20
  108aa0:	e5933000 	ldr	r3, [r3]
  108aa4:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  108aa8:	e51b3010 	ldr	r3, [fp, #-16]
  108aac:	e3530000 	cmp	r3, #0
  108ab0:	0a00001e 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108ab4:	e51b3010 	ldr	r3, [fp, #-16]
  108ab8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108abc:	e2033001 	and	r3, r3, #1
  108ac0:	e6ef3073 	uxtb	r3, r3
  108ac4:	e3530000 	cmp	r3, #0
  108ac8:	0a000018 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108acc:	e51b3010 	ldr	r3, [fp, #-16]
  108ad0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108adc:	e3530000 	cmp	r3, #0
  108ae0:	0a000012 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108ae4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108ae8:	e593300c 	ldr	r3, [r3, #12]
  108aec:	e5933004 	ldr	r3, [r3, #4]
  108af0:	e3530000 	cmp	r3, #0
  108af4:	0a00000d 	beq	108b30 <sal_gethostbyname_r+0xb4>
    {
        return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  108af8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108afc:	e593300c 	ldr	r3, [r3, #12]
  108b00:	e5934004 	ldr	r4, [r3, #4]
  108b04:	e59b3008 	ldr	r3, [fp, #8]
  108b08:	e58d3004 	str	r3, [sp, #4]
  108b0c:	e59b3004 	ldr	r3, [fp, #4]
  108b10:	e58d3000 	str	r3, [sp]
  108b14:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108b18:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108b1c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108b20:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108b24:	e12fff34 	blx	r4
  108b28:	e1a03000 	mov	r3, r0
  108b2c:	ea000025 	b	108bc8 <sal_gethostbyname_r+0x14c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108b30:	e3a00001 	mov	r0, #1
  108b34:	ebfff216 	bl	105394 <netdev_get_first_by_flags>
  108b38:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  108b3c:	e51b3010 	ldr	r3, [fp, #-16]
  108b40:	e3530000 	cmp	r3, #0
  108b44:	0a00001e 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b48:	e51b3010 	ldr	r3, [fp, #-16]
  108b4c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108b50:	e2033001 	and	r3, r3, #1
  108b54:	e6ef3073 	uxtb	r3, r3
  108b58:	e3530000 	cmp	r3, #0
  108b5c:	0a000018 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b60:	e51b3010 	ldr	r3, [fp, #-16]
  108b64:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108b68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108b6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b70:	e3530000 	cmp	r3, #0
  108b74:	0a000012 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b7c:	e593300c 	ldr	r3, [r3, #12]
  108b80:	e5933004 	ldr	r3, [r3, #4]
  108b84:	e3530000 	cmp	r3, #0
  108b88:	0a00000d 	beq	108bc4 <sal_gethostbyname_r+0x148>
        {
            return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  108b8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b90:	e593300c 	ldr	r3, [r3, #12]
  108b94:	e5934004 	ldr	r4, [r3, #4]
  108b98:	e59b3008 	ldr	r3, [fp, #8]
  108b9c:	e58d3004 	str	r3, [sp, #4]
  108ba0:	e59b3004 	ldr	r3, [fp, #4]
  108ba4:	e58d3000 	str	r3, [sp]
  108ba8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108bac:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108bb0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108bb4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108bb8:	e12fff34 	blx	r4
  108bbc:	e1a03000 	mov	r3, r0
  108bc0:	ea000000 	b	108bc8 <sal_gethostbyname_r+0x14c>
        }
    }

    return -1;
  108bc4:	e3e03000 	mvn	r3, #0
}
  108bc8:	e1a00003 	mov	r0, r3
  108bcc:	e24bd008 	sub	sp, fp, #8
  108bd0:	e8bd8810 	pop	{r4, fp, pc}

00108bd4 <sal_getaddrinfo>:

int sal_getaddrinfo(const char *nodename,
                    const char *servname,
                    const struct addrinfo *hints,
                    struct addrinfo **res)
{
  108bd4:	e92d4810 	push	{r4, fp, lr}
  108bd8:	e28db008 	add	fp, sp, #8
  108bdc:	e24dd01c 	sub	sp, sp, #28
  108be0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108be4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108be8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108bec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  108bf0:	e30f3574 	movw	r3, #62836	; 0xf574
  108bf4:	e3403014 	movt	r3, #20
  108bf8:	e5933000 	ldr	r3, [r3]
  108bfc:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  108c00:	e51b3010 	ldr	r3, [fp, #-16]
  108c04:	e3530000 	cmp	r3, #0
  108c08:	0a00001a 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c0c:	e51b3010 	ldr	r3, [fp, #-16]
  108c10:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108c14:	e2033001 	and	r3, r3, #1
  108c18:	e6ef3073 	uxtb	r3, r3
  108c1c:	e3530000 	cmp	r3, #0
  108c20:	0a000014 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c24:	e51b3010 	ldr	r3, [fp, #-16]
  108c28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108c2c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108c30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c34:	e3530000 	cmp	r3, #0
  108c38:	0a00000e 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c40:	e593300c 	ldr	r3, [r3, #12]
  108c44:	e5933008 	ldr	r3, [r3, #8]
  108c48:	e3530000 	cmp	r3, #0
  108c4c:	0a000009 	beq	108c78 <sal_getaddrinfo+0xa4>
    {
        return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108c50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c54:	e593300c 	ldr	r3, [r3, #12]
  108c58:	e5934008 	ldr	r4, [r3, #8]
  108c5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108c60:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108c64:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108c68:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108c6c:	e12fff34 	blx	r4
  108c70:	e1a03000 	mov	r3, r0
  108c74:	ea000021 	b	108d00 <sal_getaddrinfo+0x12c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108c78:	e3a00001 	mov	r0, #1
  108c7c:	ebfff1c4 	bl	105394 <netdev_get_first_by_flags>
  108c80:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  108c84:	e51b3010 	ldr	r3, [fp, #-16]
  108c88:	e3530000 	cmp	r3, #0
  108c8c:	0a00001a 	beq	108cfc <sal_getaddrinfo+0x128>
  108c90:	e51b3010 	ldr	r3, [fp, #-16]
  108c94:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108c98:	e2033001 	and	r3, r3, #1
  108c9c:	e6ef3073 	uxtb	r3, r3
  108ca0:	e3530000 	cmp	r3, #0
  108ca4:	0a000014 	beq	108cfc <sal_getaddrinfo+0x128>
  108ca8:	e51b3010 	ldr	r3, [fp, #-16]
  108cac:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108cb0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108cb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cb8:	e3530000 	cmp	r3, #0
  108cbc:	0a00000e 	beq	108cfc <sal_getaddrinfo+0x128>
  108cc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cc4:	e593300c 	ldr	r3, [r3, #12]
  108cc8:	e5933008 	ldr	r3, [r3, #8]
  108ccc:	e3530000 	cmp	r3, #0
  108cd0:	0a000009 	beq	108cfc <sal_getaddrinfo+0x128>
        {
            return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108cd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cd8:	e593300c 	ldr	r3, [r3, #12]
  108cdc:	e5934008 	ldr	r4, [r3, #8]
  108ce0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108ce4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108ce8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108cec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108cf0:	e12fff34 	blx	r4
  108cf4:	e1a03000 	mov	r3, r0
  108cf8:	ea000000 	b	108d00 <sal_getaddrinfo+0x12c>
        }
    }

    return -1;
  108cfc:	e3e03000 	mvn	r3, #0
}
  108d00:	e1a00003 	mov	r0, r3
  108d04:	e24bd008 	sub	sp, fp, #8
  108d08:	e8bd8810 	pop	{r4, fp, pc}

00108d0c <sal_freeaddrinfo>:

void sal_freeaddrinfo(struct addrinfo *ai)
{
  108d0c:	e92d4800 	push	{fp, lr}
  108d10:	e28db004 	add	fp, sp, #4
  108d14:	e24dd010 	sub	sp, sp, #16
  108d18:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  108d1c:	e30f3574 	movw	r3, #62836	; 0xf574
  108d20:	e3403014 	movt	r3, #20
  108d24:	e5933000 	ldr	r3, [r3]
  108d28:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  108d2c:	e51b3008 	ldr	r3, [fp, #-8]
  108d30:	e3530000 	cmp	r3, #0
  108d34:	0a000016 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d38:	e51b3008 	ldr	r3, [fp, #-8]
  108d3c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108d40:	e2033001 	and	r3, r3, #1
  108d44:	e6ef3073 	uxtb	r3, r3
  108d48:	e3530000 	cmp	r3, #0
  108d4c:	0a000010 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d50:	e51b3008 	ldr	r3, [fp, #-8]
  108d54:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108d58:	e50b300c 	str	r3, [fp, #-12]
  108d5c:	e51b300c 	ldr	r3, [fp, #-12]
  108d60:	e3530000 	cmp	r3, #0
  108d64:	0a00000a 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d68:	e51b300c 	ldr	r3, [fp, #-12]
  108d6c:	e593300c 	ldr	r3, [r3, #12]
  108d70:	e593300c 	ldr	r3, [r3, #12]
  108d74:	e3530000 	cmp	r3, #0
  108d78:	0a000005 	beq	108d94 <sal_freeaddrinfo+0x88>
    {
        pf->netdb_ops->freeaddrinfo(ai);
  108d7c:	e51b300c 	ldr	r3, [fp, #-12]
  108d80:	e593300c 	ldr	r3, [r3, #12]
  108d84:	e593300c 	ldr	r3, [r3, #12]
  108d88:	e51b0010 	ldr	r0, [fp, #-16]
  108d8c:	e12fff33 	blx	r3
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
        {
            pf->netdb_ops->freeaddrinfo(ai);
        }
    }
}
  108d90:	ea00001b 	b	108e04 <sal_freeaddrinfo+0xf8>
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108d94:	e3a00001 	mov	r0, #1
  108d98:	ebfff17d 	bl	105394 <netdev_get_first_by_flags>
  108d9c:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  108da0:	e51b3008 	ldr	r3, [fp, #-8]
  108da4:	e3530000 	cmp	r3, #0
  108da8:	0a000015 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108dac:	e51b3008 	ldr	r3, [fp, #-8]
  108db0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108db4:	e2033001 	and	r3, r3, #1
  108db8:	e6ef3073 	uxtb	r3, r3
  108dbc:	e3530000 	cmp	r3, #0
  108dc0:	0a00000f 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108dc4:	e51b3008 	ldr	r3, [fp, #-8]
  108dc8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108dcc:	e50b300c 	str	r3, [fp, #-12]
  108dd0:	e51b300c 	ldr	r3, [fp, #-12]
  108dd4:	e3530000 	cmp	r3, #0
  108dd8:	0a000009 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108ddc:	e51b300c 	ldr	r3, [fp, #-12]
  108de0:	e593300c 	ldr	r3, [r3, #12]
  108de4:	e593300c 	ldr	r3, [r3, #12]
  108de8:	e3530000 	cmp	r3, #0
  108dec:	0a000004 	beq	108e04 <sal_freeaddrinfo+0xf8>
            pf->netdb_ops->freeaddrinfo(ai);
  108df0:	e51b300c 	ldr	r3, [fp, #-12]
  108df4:	e593300c 	ldr	r3, [r3, #12]
  108df8:	e593300c 	ldr	r3, [r3, #12]
  108dfc:	e51b0010 	ldr	r0, [fp, #-16]
  108e00:	e12fff33 	blx	r3
}
  108e04:	e320f000 	nop	{0}
  108e08:	e24bd004 	sub	sp, fp, #4
  108e0c:	e8bd8800 	pop	{fp, pc}

00108e10 <unet_socket>:
 * socket options. To solve the issue, we do it separately in 2 steps.
 */
#define INTF_SOCK_NONBLOCK  04000
#define IMPL_SOCK_NONBLOCK  1
int unet_socket(int domain, int type, int protocol)
{
  108e10:	e92d4800 	push	{fp, lr}
  108e14:	e28db004 	add	fp, sp, #4
  108e18:	e24dd018 	sub	sp, sp, #24
  108e1c:	e50b0010 	str	r0, [fp, #-16]
  108e20:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  108e24:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket;

    /* filter-out socket options: SOCK_NONBLOCK & SOCK_CLOEXEC (not supported) */
    int flag = type & INTF_SOCK_NONBLOCK;
  108e28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108e2c:	e2033b02 	and	r3, r3, #2048	; 0x800
  108e30:	e50b3008 	str	r3, [fp, #-8]
    type &= ~INTF_SOCK_NONBLOCK;
  108e34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108e38:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  108e3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    socket = lwip_socket(domain, type, protocol);
  108e40:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  108e44:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108e48:	e51b0010 	ldr	r0, [fp, #-16]
  108e4c:	eb0027a7 	bl	112cf0 <lwip_socket>
  108e50:	e50b000c 	str	r0, [fp, #-12]
    // sock_wqueue_add((void*)get_socket(socket));

    /* handle the socket options */
    if (socket >= 0 && flag != 0)
  108e54:	e51b300c 	ldr	r3, [fp, #-12]
  108e58:	e3530000 	cmp	r3, #0
  108e5c:	ba000006 	blt	108e7c <unet_socket+0x6c>
  108e60:	e51b3008 	ldr	r3, [fp, #-8]
  108e64:	e3530000 	cmp	r3, #0
  108e68:	0a000003 	beq	108e7c <unet_socket+0x6c>
        unet_fcntl(socket, F_SETFL, flag);
  108e6c:	e51b2008 	ldr	r2, [fp, #-8]
  108e70:	e3a01004 	mov	r1, #4
  108e74:	e51b000c 	ldr	r0, [fp, #-12]
  108e78:	eb0000e2 	bl	109208 <unet_fcntl>

    return socket;
  108e7c:	e51b300c 	ldr	r3, [fp, #-12]
}
  108e80:	e1a00003 	mov	r0, r3
  108e84:	e24bd004 	sub	sp, fp, #4
  108e88:	e8bd8800 	pop	{fp, pc}

00108e8c <unet_close>:

int unet_close(int socket)
{
  108e8c:	e92d4800 	push	{fp, lr}
  108e90:	e28db004 	add	fp, sp, #4
  108e94:	e24dd010 	sub	sp, sp, #16
  108e98:	e50b0010 	str	r0, [fp, #-16]
    int result = lwip_close(socket);
  108e9c:	e51b0010 	ldr	r0, [fp, #-16]
  108ea0:	eb00227c 	bl	111898 <lwip_close>
  108ea4:	e50b0008 	str	r0, [fp, #-8]
    // sock_wqueue_delete((void*)get_socket(socket));

    return result;
  108ea8:	e51b3008 	ldr	r3, [fp, #-8]
}
  108eac:	e1a00003 	mov	r0, r3
  108eb0:	e24bd004 	sub	sp, fp, #4
  108eb4:	e8bd8800 	pop	{fp, pc}

00108eb8 <unet_bind>:

int unet_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108eb8:	e92d4800 	push	{fp, lr}
  108ebc:	e28db004 	add	fp, sp, #4
  108ec0:	e24dd010 	sub	sp, sp, #16
  108ec4:	e50b0008 	str	r0, [fp, #-8]
  108ec8:	e50b100c 	str	r1, [fp, #-12]
  108ecc:	e50b2010 	str	r2, [fp, #-16]
    return lwip_bind(socket, name, namelen);
  108ed0:	e51b2010 	ldr	r2, [fp, #-16]
  108ed4:	e51b100c 	ldr	r1, [fp, #-12]
  108ed8:	e51b0008 	ldr	r0, [fp, #-8]
  108edc:	eb002207 	bl	111700 <lwip_bind>
  108ee0:	e1a03000 	mov	r3, r0
}
  108ee4:	e1a00003 	mov	r0, r3
  108ee8:	e24bd004 	sub	sp, fp, #4
  108eec:	e8bd8800 	pop	{fp, pc}

00108ef0 <unet_listen>:

int unet_listen(int socket, int backlog)
{
  108ef0:	e92d4800 	push	{fp, lr}
  108ef4:	e28db004 	add	fp, sp, #4
  108ef8:	e24dd008 	sub	sp, sp, #8
  108efc:	e50b0008 	str	r0, [fp, #-8]
  108f00:	e50b100c 	str	r1, [fp, #-12]
    return lwip_listen(socket, backlog);
  108f04:	e51b100c 	ldr	r1, [fp, #-12]
  108f08:	e51b0008 	ldr	r0, [fp, #-8]
  108f0c:	eb002320 	bl	111b94 <lwip_listen>
  108f10:	e1a03000 	mov	r3, r0
}
  108f14:	e1a00003 	mov	r0, r3
  108f18:	e24bd004 	sub	sp, fp, #4
  108f1c:	e8bd8800 	pop	{fp, pc}

00108f20 <unet_connect>:

int unet_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108f20:	e92d4800 	push	{fp, lr}
  108f24:	e28db004 	add	fp, sp, #4
  108f28:	e24dd010 	sub	sp, sp, #16
  108f2c:	e50b0008 	str	r0, [fp, #-8]
  108f30:	e50b100c 	str	r1, [fp, #-12]
  108f34:	e50b2010 	str	r2, [fp, #-16]
    return lwip_connect(socket, name, namelen);
  108f38:	e51b2010 	ldr	r2, [fp, #-16]
  108f3c:	e51b100c 	ldr	r1, [fp, #-12]
  108f40:	e51b0008 	ldr	r0, [fp, #-8]
  108f44:	eb00229d 	bl	1119c0 <lwip_connect>
  108f48:	e1a03000 	mov	r3, r0
}
  108f4c:	e1a00003 	mov	r0, r3
  108f50:	e24bd004 	sub	sp, fp, #4
  108f54:	e8bd8800 	pop	{fp, pc}

00108f58 <unet_accept>:

int unet_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  108f58:	e92d4800 	push	{fp, lr}
  108f5c:	e28db004 	add	fp, sp, #4
  108f60:	e24dd010 	sub	sp, sp, #16
  108f64:	e50b0008 	str	r0, [fp, #-8]
  108f68:	e50b100c 	str	r1, [fp, #-12]
  108f6c:	e50b2010 	str	r2, [fp, #-16]
    socket = lwip_accept(socket, addr, addrlen);
  108f70:	e51b2010 	ldr	r2, [fp, #-16]
  108f74:	e51b100c 	ldr	r1, [fp, #-12]
  108f78:	e51b0008 	ldr	r0, [fp, #-8]
  108f7c:	eb0020d1 	bl	1112c8 <lwip_accept>
  108f80:	e50b0008 	str	r0, [fp, #-8]
    // sock_wqueue_add((void*)get_socket(socket));

    return socket;
  108f84:	e51b3008 	ldr	r3, [fp, #-8]
}
  108f88:	e1a00003 	mov	r0, r3
  108f8c:	e24bd004 	sub	sp, fp, #4
  108f90:	e8bd8800 	pop	{fp, pc}

00108f94 <unet_sendto>:

int unet_sendto(int socket, const void *data, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)
{
  108f94:	e92d4800 	push	{fp, lr}
  108f98:	e28db004 	add	fp, sp, #4
  108f9c:	e24dd020 	sub	sp, sp, #32
  108fa0:	e50b0010 	str	r0, [fp, #-16]
  108fa4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  108fa8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  108fac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int result;
    if(tolen  == 0)
  108fb0:	e59b3008 	ldr	r3, [fp, #8]
  108fb4:	e3530000 	cmp	r3, #0
  108fb8:	1a00000a 	bne	108fe8 <unet_sendto+0x54>
    {
        result = lwip_sendto(socket, data, size, flags, RT_NULL, RT_NULL);
  108fbc:	e3a03000 	mov	r3, #0
  108fc0:	e58d3004 	str	r3, [sp, #4]
  108fc4:	e3a03000 	mov	r3, #0
  108fc8:	e58d3000 	str	r3, [sp]
  108fcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108fd0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  108fd4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108fd8:	e51b0010 	ldr	r0, [fp, #-16]
  108fdc:	eb0026af 	bl	112aa0 <lwip_sendto>
  108fe0:	e50b0008 	str	r0, [fp, #-8]
  108fe4:	ea000009 	b	109010 <unet_sendto+0x7c>
    }
    else
    {
        result = lwip_sendto(socket, data, size, flags, to, tolen);
  108fe8:	e59b3008 	ldr	r3, [fp, #8]
  108fec:	e58d3004 	str	r3, [sp, #4]
  108ff0:	e59b3004 	ldr	r3, [fp, #4]
  108ff4:	e58d3000 	str	r3, [sp]
  108ff8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108ffc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109000:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109004:	e51b0010 	ldr	r0, [fp, #-16]
  109008:	eb0026a4 	bl	112aa0 <lwip_sendto>
  10900c:	e50b0008 	str	r0, [fp, #-8]
    }
    if(result <= 0)
  109010:	e51b3008 	ldr	r3, [fp, #-8]
  109014:	e3530000 	cmp	r3, #0
  109018:	ca000005 	bgt	109034 <unet_sendto+0xa0>
    {
        rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  10901c:	e3a02058 	mov	r2, #88	; 0x58
  109020:	e3061188 	movw	r1, #24968	; 0x6188
  109024:	e3401014 	movt	r1, #20
  109028:	e306016c 	movw	r0, #24940	; 0x616c
  10902c:	e3400014 	movt	r0, #20
  109030:	ebffe837 	bl	103114 <rt_kprintf>
    }
    return result;
  109034:	e51b3008 	ldr	r3, [fp, #-8]
}
  109038:	e1a00003 	mov	r0, r3
  10903c:	e24bd004 	sub	sp, fp, #4
  109040:	e8bd8800 	pop	{fp, pc}

00109044 <unet_recvfrom>:

int unet_recvfrom(int socket, void *mem, size_t size, int flags, struct sockaddr *from, socklen_t *fromlen)
{
  109044:	e92d4800 	push	{fp, lr}
  109048:	e28db004 	add	fp, sp, #4
  10904c:	e24dd018 	sub	sp, sp, #24
  109050:	e50b0008 	str	r0, [fp, #-8]
  109054:	e50b100c 	str	r1, [fp, #-12]
  109058:	e50b2010 	str	r2, [fp, #-16]
  10905c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if(from && fromlen)
  109060:	e59b3004 	ldr	r3, [fp, #4]
  109064:	e3530000 	cmp	r3, #0
  109068:	0a00000d 	beq	1090a4 <unet_recvfrom+0x60>
  10906c:	e59b3008 	ldr	r3, [fp, #8]
  109070:	e3530000 	cmp	r3, #0
  109074:	0a00000a 	beq	1090a4 <unet_recvfrom+0x60>
    {
        return lwip_recvfrom(socket, mem, size, flags, from, fromlen);
  109078:	e59b3008 	ldr	r3, [fp, #8]
  10907c:	e58d3004 	str	r3, [sp, #4]
  109080:	e59b3004 	ldr	r3, [fp, #4]
  109084:	e58d3000 	str	r3, [sp]
  109088:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10908c:	e51b2010 	ldr	r2, [fp, #-16]
  109090:	e51b100c 	ldr	r1, [fp, #-12]
  109094:	e51b0008 	ldr	r0, [fp, #-8]
  109098:	eb002315 	bl	111cf4 <lwip_recvfrom>
  10909c:	e1a03000 	mov	r3, r0
  1090a0:	ea000009 	b	1090cc <unet_recvfrom+0x88>
    }
    else
    {
        return lwip_recvfrom(socket, mem, size, flags, RT_NULL, RT_NULL);
  1090a4:	e3a03000 	mov	r3, #0
  1090a8:	e58d3004 	str	r3, [sp, #4]
  1090ac:	e3a03000 	mov	r3, #0
  1090b0:	e58d3000 	str	r3, [sp]
  1090b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1090b8:	e51b2010 	ldr	r2, [fp, #-16]
  1090bc:	e51b100c 	ldr	r1, [fp, #-12]
  1090c0:	e51b0008 	ldr	r0, [fp, #-8]
  1090c4:	eb00230a 	bl	111cf4 <lwip_recvfrom>
  1090c8:	e1a03000 	mov	r3, r0
    }
}
  1090cc:	e1a00003 	mov	r0, r3
  1090d0:	e24bd004 	sub	sp, fp, #4
  1090d4:	e8bd8800 	pop	{fp, pc}

001090d8 <unet_getsockopt>:

int unet_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  1090d8:	e92d4800 	push	{fp, lr}
  1090dc:	e28db004 	add	fp, sp, #4
  1090e0:	e24dd018 	sub	sp, sp, #24
  1090e4:	e50b0008 	str	r0, [fp, #-8]
  1090e8:	e50b100c 	str	r1, [fp, #-12]
  1090ec:	e50b2010 	str	r2, [fp, #-16]
  1090f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getsockopt(socket, level, optname, optval, optlen);
  1090f4:	e59b3004 	ldr	r3, [fp, #4]
  1090f8:	e58d3000 	str	r3, [sp]
  1090fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109100:	e51b2010 	ldr	r2, [fp, #-16]
  109104:	e51b100c 	ldr	r1, [fp, #-12]
  109108:	e51b0008 	ldr	r0, [fp, #-8]
  10910c:	eb002c0d 	bl	114148 <lwip_getsockopt>
  109110:	e1a03000 	mov	r3, r0
}
  109114:	e1a00003 	mov	r0, r3
  109118:	e24bd004 	sub	sp, fp, #4
  10911c:	e8bd8800 	pop	{fp, pc}

00109120 <unet_setsockopt>:

int unet_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  109120:	e92d4800 	push	{fp, lr}
  109124:	e28db004 	add	fp, sp, #4
  109128:	e24dd018 	sub	sp, sp, #24
  10912c:	e50b0008 	str	r0, [fp, #-8]
  109130:	e50b100c 	str	r1, [fp, #-12]
  109134:	e50b2010 	str	r2, [fp, #-16]
  109138:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_setsockopt(socket, level, optname, optval, optlen);
  10913c:	e59b3004 	ldr	r3, [fp, #4]
  109140:	e58d3000 	str	r3, [sp]
  109144:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109148:	e51b2010 	ldr	r2, [fp, #-16]
  10914c:	e51b100c 	ldr	r1, [fp, #-12]
  109150:	e51b0008 	ldr	r0, [fp, #-8]
  109154:	eb002ec3 	bl	114c68 <lwip_setsockopt>
  109158:	e1a03000 	mov	r3, r0
}
  10915c:	e1a00003 	mov	r0, r3
  109160:	e24bd004 	sub	sp, fp, #4
  109164:	e8bd8800 	pop	{fp, pc}

00109168 <unet_shutdown>:

int unet_shutdown(int socket, int how)
{
  109168:	e92d4800 	push	{fp, lr}
  10916c:	e28db004 	add	fp, sp, #4
  109170:	e24dd008 	sub	sp, sp, #8
  109174:	e50b0008 	str	r0, [fp, #-8]
  109178:	e50b100c 	str	r1, [fp, #-12]
    return lwip_shutdown(socket, how);
  10917c:	e51b100c 	ldr	r1, [fp, #-12]
  109180:	e51b0008 	ldr	r0, [fp, #-8]
  109184:	eb002af5 	bl	113d60 <lwip_shutdown>
  109188:	e1a03000 	mov	r3, r0
}
  10918c:	e1a00003 	mov	r0, r3
  109190:	e24bd004 	sub	sp, fp, #4
  109194:	e8bd8800 	pop	{fp, pc}

00109198 <unet_getpeername>:

int unet_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  109198:	e92d4800 	push	{fp, lr}
  10919c:	e28db004 	add	fp, sp, #4
  1091a0:	e24dd010 	sub	sp, sp, #16
  1091a4:	e50b0008 	str	r0, [fp, #-8]
  1091a8:	e50b100c 	str	r1, [fp, #-12]
  1091ac:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getpeername(socket, name, namelen);
  1091b0:	e51b2010 	ldr	r2, [fp, #-16]
  1091b4:	e51b100c 	ldr	r1, [fp, #-12]
  1091b8:	e51b0008 	ldr	r0, [fp, #-8]
  1091bc:	eb002bc3 	bl	1140d0 <lwip_getpeername>
  1091c0:	e1a03000 	mov	r3, r0
}
  1091c4:	e1a00003 	mov	r0, r3
  1091c8:	e24bd004 	sub	sp, fp, #4
  1091cc:	e8bd8800 	pop	{fp, pc}

001091d0 <unet_getsockname>:

int unet_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  1091d0:	e92d4800 	push	{fp, lr}
  1091d4:	e28db004 	add	fp, sp, #4
  1091d8:	e24dd010 	sub	sp, sp, #16
  1091dc:	e50b0008 	str	r0, [fp, #-8]
  1091e0:	e50b100c 	str	r1, [fp, #-12]
  1091e4:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getsockname(socket, name, namelen);
  1091e8:	e51b2010 	ldr	r2, [fp, #-16]
  1091ec:	e51b100c 	ldr	r1, [fp, #-12]
  1091f0:	e51b0008 	ldr	r0, [fp, #-8]
  1091f4:	eb002bc4 	bl	11410c <lwip_getsockname>
  1091f8:	e1a03000 	mov	r3, r0
}
  1091fc:	e1a00003 	mov	r0, r3
  109200:	e24bd004 	sub	sp, fp, #4
  109204:	e8bd8800 	pop	{fp, pc}

00109208 <unet_fcntl>:

int unet_fcntl(int socket, int cmd, int val)
{
  109208:	e92d4800 	push	{fp, lr}
  10920c:	e28db004 	add	fp, sp, #4
  109210:	e24dd010 	sub	sp, sp, #16
  109214:	e50b0008 	str	r0, [fp, #-8]
  109218:	e50b100c 	str	r1, [fp, #-12]
  10921c:	e50b2010 	str	r2, [fp, #-16]
    return lwip_fcntl(socket, cmd, val);
  109220:	e51b2010 	ldr	r2, [fp, #-16]
  109224:	e51b100c 	ldr	r1, [fp, #-12]
  109228:	e51b0008 	ldr	r0, [fp, #-8]
  10922c:	eb0031d9 	bl	115998 <lwip_fcntl>
  109230:	e1a03000 	mov	r3, r0
}
  109234:	e1a00003 	mov	r0, r3
  109238:	e24bd004 	sub	sp, fp, #4
  10923c:	e8bd8800 	pop	{fp, pc}

00109240 <unet_ioctl>:

/* Observe the 'real' IOCTL operations in unet 'api/sockets.c' and find that
 * 'argp' is used as an integer pointer. */
int unet_ioctl(int socket, long cmd, void *argp)
{
  109240:	e92d4800 	push	{fp, lr}
  109244:	e28db004 	add	fp, sp, #4
  109248:	e24dd010 	sub	sp, sp, #16
  10924c:	e50b0008 	str	r0, [fp, #-8]
  109250:	e50b100c 	str	r1, [fp, #-12]
  109254:	e50b2010 	str	r2, [fp, #-16]
    return lwip_ioctl(socket, cmd, argp);
  109258:	e51b2010 	ldr	r2, [fp, #-16]
  10925c:	e51b100c 	ldr	r1, [fp, #-12]
  109260:	e51b0008 	ldr	r0, [fp, #-8]
  109264:	eb003124 	bl	1156fc <lwip_ioctl>
  109268:	e1a03000 	mov	r3, r0
}
  10926c:	e1a00003 	mov	r0, r3
  109270:	e24bd004 	sub	sp, fp, #4
  109274:	e8bd8800 	pop	{fp, pc}

00109278 <unet_gethostbyname>:
#include <stdio.h>
struct hostent* unet_gethostbyname(const char *name)
{
  109278:	e92d4800 	push	{fp, lr}
  10927c:	e28db004 	add	fp, sp, #4
  109280:	e24dd008 	sub	sp, sp, #8
  109284:	e50b0008 	str	r0, [fp, #-8]
    static struct hostent s_hostent, *p_hostent = RT_NULL;
    static char *s_aliases;
    static ip_addr_t s_hostent_addr;
    static ip_addr_t *s_phostent_addr[2];
    static char s_hostname[DNS_MAX_NAME_LENGTH + 1];
    p_hostent = lwip_gethostbyname(name);
  109288:	e51b0008 	ldr	r0, [fp, #-8]
  10928c:	eb001c88 	bl	1104b4 <lwip_gethostbyname>
  109290:	e1a02000 	mov	r2, r0
  109294:	e30d3494 	movw	r3, #54420	; 0xd494
  109298:	e3403014 	movt	r3, #20
  10929c:	e5832000 	str	r2, [r3]
    memset(&s_hostent, 0, sizeof(s_hostent));
  1092a0:	e3a02014 	mov	r2, #20
  1092a4:	e3a01000 	mov	r1, #0
  1092a8:	e30d0498 	movw	r0, #54424	; 0xd498
  1092ac:	e3400014 	movt	r0, #20
  1092b0:	eb00dff1 	bl	14127c <memset>
    /* fill hostent */
    s_hostent_addr = *((ip_addr_t *) p_hostent->h_addr);
  1092b4:	e30d3494 	movw	r3, #54420	; 0xd494
  1092b8:	e3403014 	movt	r3, #20
  1092bc:	e5933000 	ldr	r3, [r3]
  1092c0:	e5933010 	ldr	r3, [r3, #16]
  1092c4:	e5932000 	ldr	r2, [r3]
  1092c8:	e30d34ac 	movw	r3, #54444	; 0xd4ac
  1092cc:	e3403014 	movt	r3, #20
  1092d0:	e5922000 	ldr	r2, [r2]
  1092d4:	e5832000 	str	r2, [r3]
    s_phostent_addr[0] = &s_hostent_addr;
  1092d8:	e30d34b0 	movw	r3, #54448	; 0xd4b0
  1092dc:	e3403014 	movt	r3, #20
  1092e0:	e30d24ac 	movw	r2, #54444	; 0xd4ac
  1092e4:	e3402014 	movt	r2, #20
  1092e8:	e5832000 	str	r2, [r3]
    s_phostent_addr[1] = NULL;
  1092ec:	e30d34b0 	movw	r3, #54448	; 0xd4b0
  1092f0:	e3403014 	movt	r3, #20
  1092f4:	e3a02000 	mov	r2, #0
  1092f8:	e5832004 	str	r2, [r3, #4]
    strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  1092fc:	e3a02c01 	mov	r2, #256	; 0x100
  109300:	e51b1008 	ldr	r1, [fp, #-8]
  109304:	e30d04b8 	movw	r0, #54456	; 0xd4b8
  109308:	e3400014 	movt	r0, #20
  10930c:	eb00e0bc 	bl	141604 <strncpy>
    s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  109310:	e30d34b8 	movw	r3, #54456	; 0xd4b8
  109314:	e3403014 	movt	r3, #20
  109318:	e3a02000 	mov	r2, #0
  10931c:	e5c32100 	strb	r2, [r3, #256]	; 0x100
    s_hostent.h_name = s_hostname;
  109320:	e30d3498 	movw	r3, #54424	; 0xd498
  109324:	e3403014 	movt	r3, #20
  109328:	e30d24b8 	movw	r2, #54456	; 0xd4b8
  10932c:	e3402014 	movt	r2, #20
  109330:	e5832000 	str	r2, [r3]
    s_aliases = NULL;
  109334:	e30d35bc 	movw	r3, #54716	; 0xd5bc
  109338:	e3403014 	movt	r3, #20
  10933c:	e3a02000 	mov	r2, #0
  109340:	e5832000 	str	r2, [r3]
    s_hostent.h_aliases = &s_aliases;
  109344:	e30d3498 	movw	r3, #54424	; 0xd498
  109348:	e3403014 	movt	r3, #20
  10934c:	e30d25bc 	movw	r2, #54716	; 0xd5bc
  109350:	e3402014 	movt	r2, #20
  109354:	e5832004 	str	r2, [r3, #4]
    s_hostent.h_addrtype = AF_INET;
  109358:	e30d3498 	movw	r3, #54424	; 0xd498
  10935c:	e3403014 	movt	r3, #20
  109360:	e3a02002 	mov	r2, #2
  109364:	e5832008 	str	r2, [r3, #8]
    s_hostent.h_length = sizeof(ip_addr_t);
  109368:	e30d3498 	movw	r3, #54424	; 0xd498
  10936c:	e3403014 	movt	r3, #20
  109370:	e3a02004 	mov	r2, #4
  109374:	e583200c 	str	r2, [r3, #12]
    s_hostent.h_addr_list = (char**)&s_phostent_addr;
  109378:	e30d3498 	movw	r3, #54424	; 0xd498
  10937c:	e3403014 	movt	r3, #20
  109380:	e30d24b0 	movw	r2, #54448	; 0xd4b0
  109384:	e3402014 	movt	r2, #20
  109388:	e5832010 	str	r2, [r3, #16]
    p_hostent = &s_hostent;
  10938c:	e30d3494 	movw	r3, #54420	; 0xd494
  109390:	e3403014 	movt	r3, #20
  109394:	e30d2498 	movw	r2, #54424	; 0xd498
  109398:	e3402014 	movt	r2, #20
  10939c:	e5832000 	str	r2, [r3]

    return p_hostent;
  1093a0:	e30d3494 	movw	r3, #54420	; 0xd494
  1093a4:	e3403014 	movt	r3, #20
  1093a8:	e5933000 	ldr	r3, [r3]
}
  1093ac:	e1a00003 	mov	r0, r3
  1093b0:	e24bd004 	sub	sp, fp, #4
  1093b4:	e8bd8800 	pop	{fp, pc}

001093b8 <unet_gethostbyname_r>:

int unet_gethostbyname_r(const char *name, struct hostent *ret, char *buf, size_t buflen, struct hostent **result, int *h_errnop)
{
  1093b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1093bc:	e28db000 	add	fp, sp, #0
  1093c0:	e24dd014 	sub	sp, sp, #20
  1093c4:	e50b0008 	str	r0, [fp, #-8]
  1093c8:	e50b100c 	str	r1, [fp, #-12]
  1093cc:	e50b2010 	str	r2, [fp, #-16]
  1093d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return 0;
  1093d4:	e3a03000 	mov	r3, #0
}
  1093d8:	e1a00003 	mov	r0, r3
  1093dc:	e28bd000 	add	sp, fp, #0
  1093e0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1093e4:	e12fff1e 	bx	lr

001093e8 <unet_getaddrinfo>:

int unet_getaddrinfo(const char *nodename, const char *servname, const struct addrinfo *hints, struct addrinfo **res)
{
  1093e8:	e92d4800 	push	{fp, lr}
  1093ec:	e28db004 	add	fp, sp, #4
  1093f0:	e24dd010 	sub	sp, sp, #16
  1093f4:	e50b0008 	str	r0, [fp, #-8]
  1093f8:	e50b100c 	str	r1, [fp, #-12]
  1093fc:	e50b2010 	str	r2, [fp, #-16]
  109400:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getaddrinfo(nodename, servname, hints, res);
  109404:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109408:	e51b2010 	ldr	r2, [fp, #-16]
  10940c:	e51b100c 	ldr	r1, [fp, #-12]
  109410:	e51b0008 	ldr	r0, [fp, #-8]
  109414:	eb001cf4 	bl	1107ec <lwip_getaddrinfo>
  109418:	e1a03000 	mov	r3, r0
}
  10941c:	e1a00003 	mov	r0, r3
  109420:	e24bd004 	sub	sp, fp, #4
  109424:	e8bd8800 	pop	{fp, pc}

00109428 <unet_freeaddrinfo>:

void unet_freeaddrinfo(struct addrinfo *ai)
{
  109428:	e92d4800 	push	{fp, lr}
  10942c:	e28db004 	add	fp, sp, #4
  109430:	e24dd008 	sub	sp, sp, #8
  109434:	e50b0008 	str	r0, [fp, #-8]
    lwip_freeaddrinfo(ai);
  109438:	e51b0008 	ldr	r0, [fp, #-8]
  10943c:	eb001cd7 	bl	1107a0 <lwip_freeaddrinfo>
}
  109440:	e320f000 	nop	{0}
  109444:	e24bd004 	sub	sp, fp, #4
  109448:	e8bd8800 	pop	{fp, pc}

0010944c <rt_list_init>:
{
  10944c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  109450:	e28db000 	add	fp, sp, #0
  109454:	e24dd00c 	sub	sp, sp, #12
  109458:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  10945c:	e51b3008 	ldr	r3, [fp, #-8]
  109460:	e51b2008 	ldr	r2, [fp, #-8]
  109464:	e5832004 	str	r2, [r3, #4]
  109468:	e51b3008 	ldr	r3, [fp, #-8]
  10946c:	e5932004 	ldr	r2, [r3, #4]
  109470:	e51b3008 	ldr	r3, [fp, #-8]
  109474:	e5832000 	str	r2, [r3]
}
  109478:	e320f000 	nop	{0}
  10947c:	e28bd000 	add	sp, fp, #0
  109480:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  109484:	e12fff1e 	bx	lr

00109488 <accept_internal>:
#include "dfs_net.h"

#include "sal_socket.h"

int accept_internal(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  109488:	e92d4810 	push	{r4, fp, lr}
  10948c:	e28db008 	add	fp, sp, #8
  109490:	e24dd024 	sub	sp, sp, #36	; 0x24
  109494:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  109498:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  10949c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket = -1;
  1094a0:	e3e03000 	mvn	r3, #0
  1094a4:	e50b3010 	str	r3, [fp, #-16]
    int socket = dfs_net_getsocket(s);
  1094a8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1094ac:	eb000352 	bl	10a1fc <dfs_net_getsocket>
  1094b0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec

    new_socket = sal_accept(socket, addr, addrlen);
  1094b4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1094b8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1094bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1094c0:	ebfff95f 	bl	107a44 <sal_accept>
  1094c4:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  1094c8:	e51b3010 	ldr	r3, [fp, #-16]
  1094cc:	e3730001 	cmn	r3, #1
  1094d0:	0a000050 	beq	109618 <accept_internal+0x190>
        /* this is a new socket, create it in file system fd */
        int fd;
        struct dfs_fd *d;

        /* allocate a fd */
        fd = fd_new();
  1094d4:	eb000272 	bl	109ea4 <fd_new>
  1094d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (fd < 0)
  1094dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1094e0:	e3530000 	cmp	r3, #0
  1094e4:	aa000003 	bge	1094f8 <accept_internal+0x70>
        {
            sal_closesocket(new_socket);
  1094e8:	e51b0010 	ldr	r0, [fp, #-16]
  1094ec:	ebfffc25 	bl	108588 <sal_closesocket>
            return -ENOMEM;
  1094f0:	e3e0300b 	mvn	r3, #11
  1094f4:	ea000048 	b	10961c <accept_internal+0x194>
        }

        d = fd_get(fd);
  1094f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1094fc:	eb00029d 	bl	109f78 <fd_get>
  109500:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if(d)
  109504:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109508:	e3530000 	cmp	r3, #0
  10950c:	0a00003d 	beq	109608 <accept_internal+0x180>
        {
            /* this is a socket fd */
            d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  109510:	e3a00028 	mov	r0, #40	; 0x28
  109514:	ebffe69e 	bl	102f94 <rt_malloc>
  109518:	e1a02000 	mov	r2, r0
  10951c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109520:	e5832018 	str	r2, [r3, #24]
            if (!d->fnode)
  109524:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109528:	e5933018 	ldr	r3, [r3, #24]
  10952c:	e3530000 	cmp	r3, #0
  109530:	1a000003 	bne	109544 <accept_internal+0xbc>
            {
                /* release fd */
                fd_release(fd);
  109534:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  109538:	eb0002ed 	bl	10a0f4 <fd_release>
                return -ENOMEM;
  10953c:	e3e0300b 	mvn	r3, #11
  109540:	ea000035 	b	10961c <accept_internal+0x194>
            }
            rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  109544:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109548:	e5933018 	ldr	r3, [r3, #24]
  10954c:	e3a02028 	mov	r2, #40	; 0x28
  109550:	e3a01000 	mov	r1, #0
  109554:	e1a00003 	mov	r0, r3
  109558:	ebffe75a 	bl	1032c8 <rt_memset>
            rt_list_init(&d->fnode->list);
  10955c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109560:	e5933018 	ldr	r3, [r3, #24]
  109564:	e2833010 	add	r3, r3, #16
  109568:	e1a00003 	mov	r0, r3
  10956c:	ebffffb6 	bl	10944c <rt_list_init>

            d->fnode->type = FT_SOCKET;
  109570:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109574:	e5933018 	ldr	r3, [r3, #24]
  109578:	e3a02001 	mov	r2, #1
  10957c:	e1c320b0 	strh	r2, [r3]
            d->fnode->path = NULL;
  109580:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109584:	e5933018 	ldr	r3, [r3, #24]
  109588:	e3a02000 	mov	r2, #0
  10958c:	e5832004 	str	r2, [r3, #4]
            d->fnode->fullpath = NULL;
  109590:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109594:	e5933018 	ldr	r3, [r3, #24]
  109598:	e3a02000 	mov	r2, #0
  10959c:	e5832008 	str	r2, [r3, #8]
            d->fnode->ref_count = 1;
  1095a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095a4:	e5933018 	ldr	r3, [r3, #24]
  1095a8:	e3a02001 	mov	r2, #1
  1095ac:	e583200c 	str	r2, [r3, #12]
            d->fnode->fops = dfs_net_get_fops();
  1095b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095b4:	e5934018 	ldr	r4, [r3, #24]
  1095b8:	eb0003ae 	bl	10a478 <dfs_net_get_fops>
  1095bc:	e1a03000 	mov	r3, r0
  1095c0:	e5843018 	str	r3, [r4, #24]
            d->flags = O_RDWR; /* set flags as read and write */
  1095c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095c8:	e3a02002 	mov	r2, #2
  1095cc:	e5832004 	str	r2, [r3, #4]
            d->fnode->size = 0;
  1095d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095d4:	e5933018 	ldr	r3, [r3, #24]
  1095d8:	e3a02000 	mov	r2, #0
  1095dc:	e5832020 	str	r2, [r3, #32]
            d->pos = 0;
  1095e0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1095e4:	e3a02000 	mov	r2, #0
  1095e8:	e3a03000 	mov	r3, #0
  1095ec:	e1c121f0 	strd	r2, [r1, #16]

            /* set socket to the data of dfs_fd */
            d->fnode->data = (void *)(size_t)new_socket;
  1095f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095f4:	e5933018 	ldr	r3, [r3, #24]
  1095f8:	e51b2010 	ldr	r2, [fp, #-16]
  1095fc:	e5832024 	str	r2, [r3, #36]	; 0x24

            return fd;
  109600:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109604:	ea000004 	b	10961c <accept_internal+0x194>
        }

        sal_closesocket(new_socket);
  109608:	e51b0010 	ldr	r0, [fp, #-16]
  10960c:	ebfffbdd 	bl	108588 <sal_closesocket>
        return -ENOMEM;
  109610:	e3e0300b 	mvn	r3, #11
  109614:	ea000000 	b	10961c <accept_internal+0x194>
    }

    return -1;
  109618:	e3e03000 	mvn	r3, #0
}
  10961c:	e1a00003 	mov	r0, r3
  109620:	e24bd008 	sub	sp, fp, #8
  109624:	e8bd8810 	pop	{r4, fp, pc}

00109628 <bind_internal>:

int bind_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  109628:	e92d4800 	push	{fp, lr}
  10962c:	e28db004 	add	fp, sp, #4
  109630:	e24dd018 	sub	sp, sp, #24
  109634:	e50b0010 	str	r0, [fp, #-16]
  109638:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10963c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  109640:	e51b0010 	ldr	r0, [fp, #-16]
  109644:	eb0002ec 	bl	10a1fc <dfs_net_getsocket>
  109648:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_bind(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_bind(socket, name, namelen);
  10964c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109650:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109654:	e51b0008 	ldr	r0, [fp, #-8]
  109658:	ebfff973 	bl	107c2c <sal_bind>
  10965c:	e1a03000 	mov	r3, r0
}
  109660:	e1a00003 	mov	r0, r3
  109664:	e24bd004 	sub	sp, fp, #4
  109668:	e8bd8800 	pop	{fp, pc}

0010966c <connect_internal>:

int connect_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  10966c:	e92d4800 	push	{fp, lr}
  109670:	e28db004 	add	fp, sp, #4
  109674:	e24dd018 	sub	sp, sp, #24
  109678:	e50b0010 	str	r0, [fp, #-16]
  10967c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109680:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  109684:	e51b0010 	ldr	r0, [fp, #-16]
  109688:	eb0002db 	bl	10a1fc <dfs_net_getsocket>
  10968c:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_connect(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_connect(socket, name, namelen);
  109690:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109694:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109698:	e51b0008 	ldr	r0, [fp, #-8]
  10969c:	ebfffaad 	bl	108158 <sal_connect>
  1096a0:	e1a03000 	mov	r3, r0
}
  1096a4:	e1a00003 	mov	r0, r3
  1096a8:	e24bd004 	sub	sp, fp, #4
  1096ac:	e8bd8800 	pop	{fp, pc}

001096b0 <setsockopt_internal>:

int setsockopt_internal(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  1096b0:	e92d4800 	push	{fp, lr}
  1096b4:	e28db004 	add	fp, sp, #4
  1096b8:	e24dd020 	sub	sp, sp, #32
  1096bc:	e50b0010 	str	r0, [fp, #-16]
  1096c0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1096c4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1096c8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  1096cc:	e51b0010 	ldr	r0, [fp, #-16]
  1096d0:	eb0002c9 	bl	10a1fc <dfs_net_getsocket>
  1096d4:	e50b0008 	str	r0, [fp, #-8]

    return sal_setsockopt(socket, level, optname, optval, optlen);
  1096d8:	e59b3004 	ldr	r3, [fp, #4]
  1096dc:	e58d3000 	str	r3, [sp]
  1096e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1096e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1096e8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1096ec:	e51b0008 	ldr	r0, [fp, #-8]
  1096f0:	ebfffa6e 	bl	1080b0 <sal_setsockopt>
  1096f4:	e1a03000 	mov	r3, r0
}
  1096f8:	e1a00003 	mov	r0, r3
  1096fc:	e24bd004 	sub	sp, fp, #4
  109700:	e8bd8800 	pop	{fp, pc}

00109704 <listen_internal>:

int listen_internal(int s, int backlog)
{
  109704:	e92d4800 	push	{fp, lr}
  109708:	e28db004 	add	fp, sp, #4
  10970c:	e24dd010 	sub	sp, sp, #16
  109710:	e50b0010 	str	r0, [fp, #-16]
  109714:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int socket = dfs_net_getsocket(s);
  109718:	e51b0010 	ldr	r0, [fp, #-16]
  10971c:	eb0002b6 	bl	10a1fc <dfs_net_getsocket>
  109720:	e50b0008 	str	r0, [fp, #-8]

    return sal_listen(socket, backlog);
  109724:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109728:	e51b0008 	ldr	r0, [fp, #-8]
  10972c:	ebfffab8 	bl	108214 <sal_listen>
  109730:	e1a03000 	mov	r3, r0
}
  109734:	e1a00003 	mov	r0, r3
  109738:	e24bd004 	sub	sp, fp, #4
  10973c:	e8bd8800 	pop	{fp, pc}

00109740 <recv_internal>:


int recv_internal(int s, void *mem, size_t len, int flags)
{
  109740:	e92d4800 	push	{fp, lr}
  109744:	e28db004 	add	fp, sp, #4
  109748:	e24dd020 	sub	sp, sp, #32
  10974c:	e50b0010 	str	r0, [fp, #-16]
  109750:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109754:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109758:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  10975c:	e51b0010 	ldr	r0, [fp, #-16]
  109760:	eb0002a5 	bl	10a1fc <dfs_net_getsocket>
  109764:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, NULL, NULL);
  109768:	e3a03000 	mov	r3, #0
  10976c:	e58d3004 	str	r3, [sp, #4]
  109770:	e3a03000 	mov	r3, #0
  109774:	e58d3000 	str	r3, [sp]
  109778:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10977c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109780:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109784:	e51b0008 	ldr	r0, [fp, #-8]
  109788:	ebfffac5 	bl	1082a4 <sal_recvfrom>
  10978c:	e1a03000 	mov	r3, r0
}
  109790:	e1a00003 	mov	r0, r3
  109794:	e24bd004 	sub	sp, fp, #4
  109798:	e8bd8800 	pop	{fp, pc}

0010979c <recvfrom_internal>:

int recvfrom_internal(int s, void *mem, size_t len, int flags,
             struct sockaddr *from, socklen_t *fromlen)
{
  10979c:	e92d4800 	push	{fp, lr}
  1097a0:	e28db004 	add	fp, sp, #4
  1097a4:	e24dd020 	sub	sp, sp, #32
  1097a8:	e50b0010 	str	r0, [fp, #-16]
  1097ac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1097b0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1097b4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  1097b8:	e51b0010 	ldr	r0, [fp, #-16]
  1097bc:	eb00028e 	bl	10a1fc <dfs_net_getsocket>
  1097c0:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, from, fromlen);
  1097c4:	e59b3008 	ldr	r3, [fp, #8]
  1097c8:	e58d3004 	str	r3, [sp, #4]
  1097cc:	e59b3004 	ldr	r3, [fp, #4]
  1097d0:	e58d3000 	str	r3, [sp]
  1097d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1097d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1097dc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1097e0:	e51b0008 	ldr	r0, [fp, #-8]
  1097e4:	ebfffaae 	bl	1082a4 <sal_recvfrom>
  1097e8:	e1a03000 	mov	r3, r0
}
  1097ec:	e1a00003 	mov	r0, r3
  1097f0:	e24bd004 	sub	sp, fp, #4
  1097f4:	e8bd8800 	pop	{fp, pc}

001097f8 <send_internal>:

int send_internal(int s, const void *dataptr, size_t size, int flags)
{
  1097f8:	e92d4800 	push	{fp, lr}
  1097fc:	e28db004 	add	fp, sp, #4
  109800:	e24dd020 	sub	sp, sp, #32
  109804:	e50b0010 	str	r0, [fp, #-16]
  109808:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10980c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109810:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109814:	e51b0010 	ldr	r0, [fp, #-16]
  109818:	eb000277 	bl	10a1fc <dfs_net_getsocket>
  10981c:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, NULL, 0);
  109820:	e3a03000 	mov	r3, #0
  109824:	e58d3004 	str	r3, [sp, #4]
  109828:	e3a03000 	mov	r3, #0
  10982c:	e58d3000 	str	r3, [sp]
  109830:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109834:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109838:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10983c:	e51b0008 	ldr	r0, [fp, #-8]
  109840:	ebfffacb 	bl	108374 <sal_sendto>
  109844:	e1a03000 	mov	r3, r0
}
  109848:	e1a00003 	mov	r0, r3
  10984c:	e24bd004 	sub	sp, fp, #4
  109850:	e8bd8800 	pop	{fp, pc}

00109854 <sendto_internal>:

int sendto_internal(int s, const void *dataptr, size_t size, int flags,
           const struct sockaddr *to, socklen_t tolen)
{
  109854:	e92d4800 	push	{fp, lr}
  109858:	e28db004 	add	fp, sp, #4
  10985c:	e24dd020 	sub	sp, sp, #32
  109860:	e50b0010 	str	r0, [fp, #-16]
  109864:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109868:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10986c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109870:	e51b0010 	ldr	r0, [fp, #-16]
  109874:	eb000260 	bl	10a1fc <dfs_net_getsocket>
  109878:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, to, tolen);
  10987c:	e59b3008 	ldr	r3, [fp, #8]
  109880:	e58d3004 	str	r3, [sp, #4]
  109884:	e59b3004 	ldr	r3, [fp, #4]
  109888:	e58d3000 	str	r3, [sp]
  10988c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109890:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109894:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109898:	e51b0008 	ldr	r0, [fp, #-8]
  10989c:	ebfffab4 	bl	108374 <sal_sendto>
  1098a0:	e1a03000 	mov	r3, r0
}
  1098a4:	e1a00003 	mov	r0, r3
  1098a8:	e24bd004 	sub	sp, fp, #4
  1098ac:	e8bd8800 	pop	{fp, pc}

001098b0 <socket_internal>:

int socket_internal(int domain, int type, int protocol)
{
  1098b0:	e92d4810 	push	{r4, fp, lr}
  1098b4:	e28db008 	add	fp, sp, #8
  1098b8:	e24dd024 	sub	sp, sp, #36	; 0x24
  1098bc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1098c0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1098c4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int fd;
    int socket;
    struct dfs_fd *d;

    /* allocate a fd */
    fd = fd_new();
  1098c8:	eb000175 	bl	109ea4 <fd_new>
  1098cc:	e50b0010 	str	r0, [fp, #-16]
    if (fd < 0)
  1098d0:	e51b3010 	ldr	r3, [fp, #-16]
  1098d4:	e3530000 	cmp	r3, #0
  1098d8:	aa000001 	bge	1098e4 <socket_internal+0x34>
    {
        return -ENOMEM;
  1098dc:	e3e0300b 	mvn	r3, #11
  1098e0:	ea00004f 	b	109a24 <socket_internal+0x174>
    }
    d = fd_get(fd);
  1098e4:	e51b0010 	ldr	r0, [fp, #-16]
  1098e8:	eb0001a2 	bl	109f78 <fd_get>
  1098ec:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  1098f0:	e3a00028 	mov	r0, #40	; 0x28
  1098f4:	ebffe5a6 	bl	102f94 <rt_malloc>
  1098f8:	e1a02000 	mov	r2, r0
  1098fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109900:	e5832018 	str	r2, [r3, #24]
    if (!d->fnode)
  109904:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109908:	e5933018 	ldr	r3, [r3, #24]
  10990c:	e3530000 	cmp	r3, #0
  109910:	1a000003 	bne	109924 <socket_internal+0x74>
    {
        /* release fd */
        fd_release(fd);
  109914:	e51b0010 	ldr	r0, [fp, #-16]
  109918:	eb0001f5 	bl	10a0f4 <fd_release>
        return -ENOMEM;
  10991c:	e3e0300b 	mvn	r3, #11
  109920:	ea00003f 	b	109a24 <socket_internal+0x174>
    {
        domain = AF_INET;
    }
#endif /* SAL_USING_AF_UNIX */
    /* create socket  and then put it to the dfs_fd */
    socket = sal_socket(domain, type, protocol);
  109924:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  109928:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  10992c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  109930:	ebfffac3 	bl	108444 <sal_socket>
  109934:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (socket >= 0)
  109938:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10993c:	e3530000 	cmp	r3, #0
  109940:	ba000030 	blt	109a08 <socket_internal+0x158>
    {
        rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  109944:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109948:	e5933018 	ldr	r3, [r3, #24]
  10994c:	e3a02028 	mov	r2, #40	; 0x28
  109950:	e3a01000 	mov	r1, #0
  109954:	e1a00003 	mov	r0, r3
  109958:	ebffe65a 	bl	1032c8 <rt_memset>
        rt_list_init(&d->fnode->list);
  10995c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109960:	e5933018 	ldr	r3, [r3, #24]
  109964:	e2833010 	add	r3, r3, #16
  109968:	e1a00003 	mov	r0, r3
  10996c:	ebfffeb6 	bl	10944c <rt_list_init>
        /* this is a socket fd */
        d->fnode->type = FT_SOCKET;
  109970:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109974:	e5933018 	ldr	r3, [r3, #24]
  109978:	e3a02001 	mov	r2, #1
  10997c:	e1c320b0 	strh	r2, [r3]
        d->fnode->path = NULL;
  109980:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109984:	e5933018 	ldr	r3, [r3, #24]
  109988:	e3a02000 	mov	r2, #0
  10998c:	e5832004 	str	r2, [r3, #4]
        d->fnode->fullpath = NULL;
  109990:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109994:	e5933018 	ldr	r3, [r3, #24]
  109998:	e3a02000 	mov	r2, #0
  10999c:	e5832008 	str	r2, [r3, #8]
        d->fnode->ref_count = 1;
  1099a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099a4:	e5933018 	ldr	r3, [r3, #24]
  1099a8:	e3a02001 	mov	r2, #1
  1099ac:	e583200c 	str	r2, [r3, #12]
        d->fnode->fops = dfs_net_get_fops();
  1099b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099b4:	e5934018 	ldr	r4, [r3, #24]
  1099b8:	eb0002ae 	bl	10a478 <dfs_net_get_fops>
  1099bc:	e1a03000 	mov	r3, r0
  1099c0:	e5843018 	str	r3, [r4, #24]

        d->flags = O_RDWR; /* set flags as read and write */
  1099c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099c8:	e3a02002 	mov	r2, #2
  1099cc:	e5832004 	str	r2, [r3, #4]
        d->fnode->size = 0;
  1099d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099d4:	e5933018 	ldr	r3, [r3, #24]
  1099d8:	e3a02000 	mov	r2, #0
  1099dc:	e5832020 	str	r2, [r3, #32]
        d->pos = 0;
  1099e0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1099e4:	e3a02000 	mov	r2, #0
  1099e8:	e3a03000 	mov	r3, #0
  1099ec:	e1c121f0 	strd	r2, [r1, #16]

        /* set socket to the data of dfs_fd */
        d->fnode->data = (void *)(size_t)socket;
  1099f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099f4:	e5933018 	ldr	r3, [r3, #24]
  1099f8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1099fc:	e5832024 	str	r2, [r3, #36]	; 0x24
        /* release fd */
        fd_release(fd);
        return -ENOMEM;
    }

    return fd;
  109a00:	e51b3010 	ldr	r3, [fp, #-16]
  109a04:	ea000006 	b	109a24 <socket_internal+0x174>
        rt_free(d->fnode);
  109a08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a0c:	e5933018 	ldr	r3, [r3, #24]
  109a10:	e1a00003 	mov	r0, r3
  109a14:	ebffe568 	bl	102fbc <rt_free>
        fd_release(fd);
  109a18:	e51b0010 	ldr	r0, [fp, #-16]
  109a1c:	eb0001b4 	bl	10a0f4 <fd_release>
        return -ENOMEM;
  109a20:	e3e0300b 	mvn	r3, #11
  109a24:	e1a00003 	mov	r0, r3
  109a28:	e24bd008 	sub	sp, fp, #8
  109a2c:	e8bd8810 	pop	{r4, fp, pc}

00109a30 <dfs_init>:

/**
 * this function will initialize device file system.
 */
int dfs_init(void)
{
  109a30:	e92d4800 	push	{fp, lr}
  109a34:	e28db004 	add	fp, sp, #4
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  109a38:	e30d3618 	movw	r3, #54808	; 0xd618
  109a3c:	e3403014 	movt	r3, #20
  109a40:	e5933000 	ldr	r3, [r3]
  109a44:	e3530000 	cmp	r3, #0
  109a48:	0a000004 	beq	109a60 <dfs_init+0x30>
    {
        rt_kprintf("dfs already init.\n");
  109a4c:	e3060194 	movw	r0, #24980	; 0x6194
  109a50:	e3400014 	movt	r0, #20
  109a54:	ebffe5ae 	bl	103114 <rt_kprintf>
        return 0;
  109a58:	e3a03000 	mov	r3, #0
  109a5c:	ea000016 	b	109abc <dfs_init+0x8c>
    }

    /* init fnode hash table */
    dfs_fnode_mgr_init();
  109a60:	eb0001c6 	bl	10a180 <dfs_fnode_mgr_init>

    /* clean fd table */
    memset(&_fdtab, 0, sizeof(_fdtab));
  109a64:	e3a02008 	mov	r2, #8
  109a68:	e3a01000 	mov	r1, #0
  109a6c:	e30d0610 	movw	r0, #54800	; 0xd610
  109a70:	e3400014 	movt	r0, #20
  109a74:	eb00de00 	bl	14127c <memset>

    /* create device filesystem lock */
    rt_mutex_init(&fslock, "fslock", RT_IPC_FLAG_FIFO);
  109a78:	e3a02000 	mov	r2, #0
  109a7c:	e30611a8 	movw	r1, #25000	; 0x61a8
  109a80:	e3401014 	movt	r1, #20
  109a84:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109a88:	e3400014 	movt	r0, #20
  109a8c:	ebffdcad 	bl	100d48 <rt_mutex_init>
    rt_mutex_init(&fdlock, "fdlock", RT_IPC_FLAG_FIFO);
  109a90:	e3a02000 	mov	r2, #0
  109a94:	e30611b0 	movw	r1, #25008	; 0x61b0
  109a98:	e3401014 	movt	r1, #20
  109a9c:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109aa0:	e3400014 	movt	r0, #20
  109aa4:	ebffdca7 	bl	100d48 <rt_mutex_init>

    init_ok = RT_TRUE;
  109aa8:	e30d3618 	movw	r3, #54808	; 0xd618
  109aac:	e3403014 	movt	r3, #20
  109ab0:	e3a02001 	mov	r2, #1
  109ab4:	e5832000 	str	r2, [r3]

    return 0;
  109ab8:	e3a03000 	mov	r3, #0
}
  109abc:	e1a00003 	mov	r0, r3
  109ac0:	e8bd8800 	pop	{fp, pc}

00109ac4 <dfs_lock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_lock(void)
{
  109ac4:	e92d4800 	push	{fp, lr}
  109ac8:	e28db004 	add	fp, sp, #4
  109acc:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  109ad0:	e3e03006 	mvn	r3, #6
  109ad4:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  109ad8:	ea000004 	b	109af0 <dfs_lock+0x2c>
    {
        result = rt_mutex_take(&fslock, RT_WAITING_FOREVER);
  109adc:	e3e01000 	mvn	r1, #0
  109ae0:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109ae4:	e3400014 	movt	r0, #20
  109ae8:	ebffdd04 	bl	100f00 <rt_mutex_take>
  109aec:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  109af0:	e51b3008 	ldr	r3, [fp, #-8]
  109af4:	e3730007 	cmn	r3, #7
  109af8:	0afffff7 	beq	109adc <dfs_lock+0x18>
    }

    if (result != RT_EOK)
  109afc:	e51b3008 	ldr	r3, [fp, #-8]
  109b00:	e3530000 	cmp	r3, #0
  109b04:	0a000005 	beq	109b20 <dfs_lock+0x5c>
    {
        RT_ASSERT(0);
  109b08:	e3a0203d 	mov	r2, #61	; 0x3d
  109b0c:	e3061224 	movw	r1, #25124	; 0x6224
  109b10:	e3401014 	movt	r1, #20
  109b14:	e30601b8 	movw	r0, #25016	; 0x61b8
  109b18:	e3400014 	movt	r0, #20
  109b1c:	ebffe69d 	bl	103598 <rt_assert_handler>
    }
}
  109b20:	e320f000 	nop	{0}
  109b24:	e24bd004 	sub	sp, fp, #4
  109b28:	e8bd8800 	pop	{fp, pc}

00109b2c <dfs_fd_lock>:

void dfs_fd_lock(void)
{
  109b2c:	e92d4800 	push	{fp, lr}
  109b30:	e28db004 	add	fp, sp, #4
  109b34:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  109b38:	e3e03006 	mvn	r3, #6
  109b3c:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  109b40:	ea000004 	b	109b58 <dfs_fd_lock+0x2c>
    {
        result = rt_mutex_take(&fdlock, RT_WAITING_FOREVER);
  109b44:	e3e01000 	mvn	r1, #0
  109b48:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109b4c:	e3400014 	movt	r0, #20
  109b50:	ebffdcea 	bl	100f00 <rt_mutex_take>
  109b54:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  109b58:	e51b3008 	ldr	r3, [fp, #-8]
  109b5c:	e3730007 	cmn	r3, #7
  109b60:	0afffff7 	beq	109b44 <dfs_fd_lock+0x18>
    }

    if (result != RT_EOK)
  109b64:	e51b3008 	ldr	r3, [fp, #-8]
  109b68:	e3530000 	cmp	r3, #0
  109b6c:	0a000005 	beq	109b88 <dfs_fd_lock+0x5c>
    {
        RT_ASSERT(0);
  109b70:	e3a0204c 	mov	r2, #76	; 0x4c
  109b74:	e3061230 	movw	r1, #25136	; 0x6230
  109b78:	e3401014 	movt	r1, #20
  109b7c:	e30601b8 	movw	r0, #25016	; 0x61b8
  109b80:	e3400014 	movt	r0, #20
  109b84:	ebffe683 	bl	103598 <rt_assert_handler>
    }
}
  109b88:	e320f000 	nop	{0}
  109b8c:	e24bd004 	sub	sp, fp, #4
  109b90:	e8bd8800 	pop	{fp, pc}

00109b94 <dfs_unlock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_unlock(void)
{
  109b94:	e92d4800 	push	{fp, lr}
  109b98:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fslock);
  109b9c:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109ba0:	e3400014 	movt	r0, #20
  109ba4:	ebffdcf3 	bl	100f78 <rt_mutex_release>
}
  109ba8:	e320f000 	nop	{0}
  109bac:	e8bd8800 	pop	{fp, pc}

00109bb0 <dfs_fd_unlock>:

void dfs_fd_unlock(void)
{
  109bb0:	e92d4800 	push	{fp, lr}
  109bb4:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fdlock);
  109bb8:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109bbc:	e3400014 	movt	r0, #20
  109bc0:	ebffdcec 	bl	100f78 <rt_mutex_release>
}
  109bc4:	e320f000 	nop	{0}
  109bc8:	e8bd8800 	pop	{fp, pc}

00109bcc <fd_slot_expand>:

static int fd_slot_expand(struct dfs_fdtable *fdt, int fd)
{
  109bcc:	e92d4800 	push	{fp, lr}
  109bd0:	e28db004 	add	fp, sp, #4
  109bd4:	e24dd018 	sub	sp, sp, #24
  109bd8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  109bdc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int nr;
    int index;
    struct dfs_fd **fds = NULL;
  109be0:	e3a03000 	mov	r3, #0
  109be4:	e50b3010 	str	r3, [fp, #-16]

    if (fd < fdt->maxfd)
  109be8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109bec:	e5932000 	ldr	r2, [r3]
  109bf0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109bf4:	e1520003 	cmp	r2, r3
  109bf8:	9a000001 	bls	109c04 <fd_slot_expand+0x38>
    {
        return fd;
  109bfc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c00:	ea000032 	b	109cd0 <fd_slot_expand+0x104>
    }
    if (fd >= DFS_FD_MAX)
  109c04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c08:	e353001f 	cmp	r3, #31
  109c0c:	da000001 	ble	109c18 <fd_slot_expand+0x4c>
    {
        return -1;
  109c10:	e3e03000 	mvn	r3, #0
  109c14:	ea00002d 	b	109cd0 <fd_slot_expand+0x104>
    }

    nr = ((fd + 4) & ~3);
  109c18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c1c:	e2833004 	add	r3, r3, #4
  109c20:	e3c33003 	bic	r3, r3, #3
  109c24:	e50b3008 	str	r3, [fp, #-8]
    if (nr > DFS_FD_MAX)
  109c28:	e51b3008 	ldr	r3, [fp, #-8]
  109c2c:	e3530020 	cmp	r3, #32
  109c30:	da000001 	ble	109c3c <fd_slot_expand+0x70>
    {
        nr = DFS_FD_MAX;
  109c34:	e3a03020 	mov	r3, #32
  109c38:	e50b3008 	str	r3, [fp, #-8]
    }
    fds = (struct dfs_fd **)rt_realloc(fdt->fds, nr * sizeof(struct dfs_fd *));
  109c3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109c40:	e5932004 	ldr	r2, [r3, #4]
  109c44:	e51b3008 	ldr	r3, [fp, #-8]
  109c48:	e1a03103 	lsl	r3, r3, #2
  109c4c:	e1a01003 	mov	r1, r3
  109c50:	e1a00002 	mov	r0, r2
  109c54:	ebffe4e0 	bl	102fdc <rt_realloc>
  109c58:	e50b0010 	str	r0, [fp, #-16]
    if (!fds)
  109c5c:	e51b3010 	ldr	r3, [fp, #-16]
  109c60:	e3530000 	cmp	r3, #0
  109c64:	1a000001 	bne	109c70 <fd_slot_expand+0xa4>
    {
        return -1;
  109c68:	e3e03000 	mvn	r3, #0
  109c6c:	ea000017 	b	109cd0 <fd_slot_expand+0x104>
    }

    /* clean the new allocated fds */
    for (index = fdt->maxfd; index < nr; index++)
  109c70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109c74:	e5933000 	ldr	r3, [r3]
  109c78:	e50b300c 	str	r3, [fp, #-12]
  109c7c:	ea000008 	b	109ca4 <fd_slot_expand+0xd8>
    {
        fds[index] = NULL;
  109c80:	e51b300c 	ldr	r3, [fp, #-12]
  109c84:	e1a03103 	lsl	r3, r3, #2
  109c88:	e51b2010 	ldr	r2, [fp, #-16]
  109c8c:	e0823003 	add	r3, r2, r3
  109c90:	e3a02000 	mov	r2, #0
  109c94:	e5832000 	str	r2, [r3]
    for (index = fdt->maxfd; index < nr; index++)
  109c98:	e51b300c 	ldr	r3, [fp, #-12]
  109c9c:	e2833001 	add	r3, r3, #1
  109ca0:	e50b300c 	str	r3, [fp, #-12]
  109ca4:	e51b200c 	ldr	r2, [fp, #-12]
  109ca8:	e51b3008 	ldr	r3, [fp, #-8]
  109cac:	e1520003 	cmp	r2, r3
  109cb0:	bafffff2 	blt	109c80 <fd_slot_expand+0xb4>
    }
    fdt->fds   = fds;
  109cb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109cb8:	e51b2010 	ldr	r2, [fp, #-16]
  109cbc:	e5832004 	str	r2, [r3, #4]
    fdt->maxfd = nr;
  109cc0:	e51b2008 	ldr	r2, [fp, #-8]
  109cc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109cc8:	e5832000 	str	r2, [r3]

    return fd;
  109ccc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  109cd0:	e1a00003 	mov	r0, r3
  109cd4:	e24bd004 	sub	sp, fp, #4
  109cd8:	e8bd8800 	pop	{fp, pc}

00109cdc <fd_slot_alloc>:

static int fd_slot_alloc(struct dfs_fdtable *fdt, int startfd)
{
  109cdc:	e92d4800 	push	{fp, lr}
  109ce0:	e28db004 	add	fp, sp, #4
  109ce4:	e24dd010 	sub	sp, sp, #16
  109ce8:	e50b0010 	str	r0, [fp, #-16]
  109cec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;

    /* find an empty fd slot */
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  109cf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109cf4:	e50b3008 	str	r3, [fp, #-8]
  109cf8:	ea00000c 	b	109d30 <fd_slot_alloc+0x54>
    {
        if (fdt->fds[idx] == RT_NULL)
  109cfc:	e51b3010 	ldr	r3, [fp, #-16]
  109d00:	e5932004 	ldr	r2, [r3, #4]
  109d04:	e51b3008 	ldr	r3, [fp, #-8]
  109d08:	e1a03103 	lsl	r3, r3, #2
  109d0c:	e0823003 	add	r3, r2, r3
  109d10:	e5933000 	ldr	r3, [r3]
  109d14:	e3530000 	cmp	r3, #0
  109d18:	1a000001 	bne	109d24 <fd_slot_alloc+0x48>
        {
            return idx;
  109d1c:	e51b3008 	ldr	r3, [fp, #-8]
  109d20:	ea00001a 	b	109d90 <fd_slot_alloc+0xb4>
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  109d24:	e51b3008 	ldr	r3, [fp, #-8]
  109d28:	e2833001 	add	r3, r3, #1
  109d2c:	e50b3008 	str	r3, [fp, #-8]
  109d30:	e51b3010 	ldr	r3, [fp, #-16]
  109d34:	e5933000 	ldr	r3, [r3]
  109d38:	e1a02003 	mov	r2, r3
  109d3c:	e51b3008 	ldr	r3, [fp, #-8]
  109d40:	e1530002 	cmp	r3, r2
  109d44:	baffffec 	blt	109cfc <fd_slot_alloc+0x20>
        }
    }

    idx = fdt->maxfd;
  109d48:	e51b3010 	ldr	r3, [fp, #-16]
  109d4c:	e5933000 	ldr	r3, [r3]
  109d50:	e50b3008 	str	r3, [fp, #-8]
    if (idx < startfd)
  109d54:	e51b2008 	ldr	r2, [fp, #-8]
  109d58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109d5c:	e1520003 	cmp	r2, r3
  109d60:	aa000001 	bge	109d6c <fd_slot_alloc+0x90>
    {
        idx = startfd;
  109d64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109d68:	e50b3008 	str	r3, [fp, #-8]
    }
    if (fd_slot_expand(fdt, idx) < 0)
  109d6c:	e51b1008 	ldr	r1, [fp, #-8]
  109d70:	e51b0010 	ldr	r0, [fp, #-16]
  109d74:	ebffff94 	bl	109bcc <fd_slot_expand>
  109d78:	e1a03000 	mov	r3, r0
  109d7c:	e3530000 	cmp	r3, #0
  109d80:	aa000001 	bge	109d8c <fd_slot_alloc+0xb0>
    {
        return -1;
  109d84:	e3e03000 	mvn	r3, #0
  109d88:	ea000000 	b	109d90 <fd_slot_alloc+0xb4>
    }
    return idx;
  109d8c:	e51b3008 	ldr	r3, [fp, #-8]
}
  109d90:	e1a00003 	mov	r0, r3
  109d94:	e24bd004 	sub	sp, fp, #4
  109d98:	e8bd8800 	pop	{fp, pc}

00109d9c <fd_alloc>:

static int fd_alloc(struct dfs_fdtable *fdt, int startfd)
{
  109d9c:	e92d4800 	push	{fp, lr}
  109da0:	e28db004 	add	fp, sp, #4
  109da4:	e24dd010 	sub	sp, sp, #16
  109da8:	e50b0010 	str	r0, [fp, #-16]
  109dac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;
    struct dfs_fd *fd = NULL;
  109db0:	e3a03000 	mov	r3, #0
  109db4:	e50b3008 	str	r3, [fp, #-8]

    idx = fd_slot_alloc(fdt, startfd);
  109db8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109dbc:	e51b0010 	ldr	r0, [fp, #-16]
  109dc0:	ebffffc5 	bl	109cdc <fd_slot_alloc>
  109dc4:	e50b000c 	str	r0, [fp, #-12]

    /* allocate  'struct dfs_fd' */
    if (idx < 0)
  109dc8:	e51b300c 	ldr	r3, [fp, #-12]
  109dcc:	e3530000 	cmp	r3, #0
  109dd0:	aa000001 	bge	109ddc <fd_alloc+0x40>
    {
        return -1;
  109dd4:	e3e03000 	mvn	r3, #0
  109dd8:	ea00001a 	b	109e48 <fd_alloc+0xac>
    }
    fd = (struct dfs_fd *)rt_calloc(1, sizeof(struct dfs_fd));
  109ddc:	e3a01020 	mov	r1, #32
  109de0:	e3a00001 	mov	r0, #1
  109de4:	ebffe488 	bl	10300c <rt_calloc>
  109de8:	e50b0008 	str	r0, [fp, #-8]
    if (!fd)
  109dec:	e51b3008 	ldr	r3, [fp, #-8]
  109df0:	e3530000 	cmp	r3, #0
  109df4:	1a000001 	bne	109e00 <fd_alloc+0x64>
    {
        return -1;
  109df8:	e3e03000 	mvn	r3, #0
  109dfc:	ea000011 	b	109e48 <fd_alloc+0xac>
    }
    fd->ref_count = 1;
  109e00:	e51b3008 	ldr	r3, [fp, #-8]
  109e04:	e3a02001 	mov	r2, #1
  109e08:	e5832008 	str	r2, [r3, #8]
    fd->magic = DFS_FD_MAGIC;
  109e0c:	e51b2008 	ldr	r2, [fp, #-8]
  109e10:	e30f3dfd 	movw	r3, #65021	; 0xfdfd
  109e14:	e34f3fff 	movt	r3, #65535	; 0xffff
  109e18:	e1c230b0 	strh	r3, [r2]
    fd->fnode = NULL;
  109e1c:	e51b3008 	ldr	r3, [fp, #-8]
  109e20:	e3a02000 	mov	r2, #0
  109e24:	e5832018 	str	r2, [r3, #24]
    fdt->fds[idx] = fd;
  109e28:	e51b3010 	ldr	r3, [fp, #-16]
  109e2c:	e5932004 	ldr	r2, [r3, #4]
  109e30:	e51b300c 	ldr	r3, [fp, #-12]
  109e34:	e1a03103 	lsl	r3, r3, #2
  109e38:	e0823003 	add	r3, r2, r3
  109e3c:	e51b2008 	ldr	r2, [fp, #-8]
  109e40:	e5832000 	str	r2, [r3]

    return idx;
  109e44:	e51b300c 	ldr	r3, [fp, #-12]
}
  109e48:	e1a00003 	mov	r0, r3
  109e4c:	e24bd004 	sub	sp, fp, #4
  109e50:	e8bd8800 	pop	{fp, pc}

00109e54 <fdt_fd_new>:
 * This function will allocate a file descriptor.
 *
 * @return -1 on failed or the allocated file descriptor.
 */
int fdt_fd_new(struct dfs_fdtable *fdt)
{
  109e54:	e92d4800 	push	{fp, lr}
  109e58:	e28db004 	add	fp, sp, #4
  109e5c:	e24dd010 	sub	sp, sp, #16
  109e60:	e50b0010 	str	r0, [fp, #-16]
    int idx;

    /* lock filesystem */
    dfs_fd_lock();
  109e64:	ebffff30 	bl	109b2c <dfs_fd_lock>

    /* find an empty fd entry */
    idx = fd_alloc(fdt, DFS_STDIO_OFFSET);
  109e68:	e3a01003 	mov	r1, #3
  109e6c:	e51b0010 	ldr	r0, [fp, #-16]
  109e70:	ebffffc9 	bl	109d9c <fd_alloc>
  109e74:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty fd entry */
    if (idx < 0)
  109e78:	e51b3008 	ldr	r3, [fp, #-8]
  109e7c:	e3530000 	cmp	r3, #0
  109e80:	aa000002 	bge	109e90 <fdt_fd_new+0x3c>
    {
        rt_kprintf("DFS fd new is failed! Could not found an empty fd entry.");
  109e84:	e30601bc 	movw	r0, #25020	; 0x61bc
  109e88:	e3400014 	movt	r0, #20
  109e8c:	ebffe4a0 	bl	103114 <rt_kprintf>
    }

    dfs_fd_unlock();
  109e90:	ebffff46 	bl	109bb0 <dfs_fd_unlock>
    return idx;
  109e94:	e51b3008 	ldr	r3, [fp, #-8]
}
  109e98:	e1a00003 	mov	r0, r3
  109e9c:	e24bd004 	sub	sp, fp, #4
  109ea0:	e8bd8800 	pop	{fp, pc}

00109ea4 <fd_new>:

int fd_new(void)
{
  109ea4:	e92d4800 	push	{fp, lr}
  109ea8:	e28db004 	add	fp, sp, #4
  109eac:	e24dd008 	sub	sp, sp, #8
    struct dfs_fdtable *fdt = NULL;
  109eb0:	e3a03000 	mov	r3, #0
  109eb4:	e50b3008 	str	r3, [fp, #-8]

    fdt = dfs_fdtable_get();
  109eb8:	eb000099 	bl	10a124 <dfs_fdtable_get>
  109ebc:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_new(fdt);
  109ec0:	e51b0008 	ldr	r0, [fp, #-8]
  109ec4:	ebffffe2 	bl	109e54 <fdt_fd_new>
  109ec8:	e1a03000 	mov	r3, r0
}
  109ecc:	e1a00003 	mov	r0, r3
  109ed0:	e24bd004 	sub	sp, fp, #4
  109ed4:	e8bd8800 	pop	{fp, pc}

00109ed8 <fdt_fd_get>:
 * @return NULL on on this file descriptor or the file descriptor structure
 * pointer.
 */

struct dfs_fd *fdt_fd_get(struct dfs_fdtable* fdt, int fd)
{
  109ed8:	e92d4800 	push	{fp, lr}
  109edc:	e28db004 	add	fp, sp, #4
  109ee0:	e24dd010 	sub	sp, sp, #16
  109ee4:	e50b0010 	str	r0, [fp, #-16]
  109ee8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *d;

    if (fd < 0 || fd >= (int)fdt->maxfd)
  109eec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109ef0:	e3530000 	cmp	r3, #0
  109ef4:	ba000005 	blt	109f10 <fdt_fd_get+0x38>
  109ef8:	e51b3010 	ldr	r3, [fp, #-16]
  109efc:	e5933000 	ldr	r3, [r3]
  109f00:	e1a02003 	mov	r2, r3
  109f04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109f08:	e1530002 	cmp	r3, r2
  109f0c:	ba000001 	blt	109f18 <fdt_fd_get+0x40>
    {
        return NULL;
  109f10:	e3a03000 	mov	r3, #0
  109f14:	ea000014 	b	109f6c <fdt_fd_get+0x94>
    }

    dfs_fd_lock();
  109f18:	ebffff03 	bl	109b2c <dfs_fd_lock>
    d = fdt->fds[fd];
  109f1c:	e51b3010 	ldr	r3, [fp, #-16]
  109f20:	e5932004 	ldr	r2, [r3, #4]
  109f24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109f28:	e1a03103 	lsl	r3, r3, #2
  109f2c:	e0823003 	add	r3, r2, r3
  109f30:	e5933000 	ldr	r3, [r3]
  109f34:	e50b3008 	str	r3, [fp, #-8]

    /* check dfs_fd valid or not */
    if ((d == NULL) || (d->magic != DFS_FD_MAGIC))
  109f38:	e51b3008 	ldr	r3, [fp, #-8]
  109f3c:	e3530000 	cmp	r3, #0
  109f40:	0a000004 	beq	109f58 <fdt_fd_get+0x80>
  109f44:	e51b3008 	ldr	r3, [fp, #-8]
  109f48:	e1d330b0 	ldrh	r3, [r3]
  109f4c:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  109f50:	e1530002 	cmp	r3, r2
  109f54:	0a000002 	beq	109f64 <fdt_fd_get+0x8c>
    {
        dfs_fd_unlock();
  109f58:	ebffff14 	bl	109bb0 <dfs_fd_unlock>
        return NULL;
  109f5c:	e3a03000 	mov	r3, #0
  109f60:	ea000001 	b	109f6c <fdt_fd_get+0x94>
    }

    dfs_fd_unlock();
  109f64:	ebffff11 	bl	109bb0 <dfs_fd_unlock>

    return d;
  109f68:	e51b3008 	ldr	r3, [fp, #-8]
}
  109f6c:	e1a00003 	mov	r0, r3
  109f70:	e24bd004 	sub	sp, fp, #4
  109f74:	e8bd8800 	pop	{fp, pc}

00109f78 <fd_get>:

struct dfs_fd *fd_get(int fd)
{
  109f78:	e92d4800 	push	{fp, lr}
  109f7c:	e28db004 	add	fp, sp, #4
  109f80:	e24dd010 	sub	sp, sp, #16
  109f84:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  109f88:	eb000065 	bl	10a124 <dfs_fdtable_get>
  109f8c:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_get(fdt, fd);
  109f90:	e51b1010 	ldr	r1, [fp, #-16]
  109f94:	e51b0008 	ldr	r0, [fp, #-8]
  109f98:	ebffffce 	bl	109ed8 <fdt_fd_get>
  109f9c:	e1a03000 	mov	r3, r0
}
  109fa0:	e1a00003 	mov	r0, r3
  109fa4:	e24bd004 	sub	sp, fp, #4
  109fa8:	e8bd8800 	pop	{fp, pc}

00109fac <fdt_fd_release>:
 * @ingroup Fd
 *
 * This function will put the file descriptor.
 */
void fdt_fd_release(struct dfs_fdtable* fdt, int fd)
{
  109fac:	e92d4800 	push	{fp, lr}
  109fb0:	e28db004 	add	fp, sp, #4
  109fb4:	e24dd010 	sub	sp, sp, #16
  109fb8:	e50b0010 	str	r0, [fp, #-16]
  109fbc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *fd_slot = NULL;
  109fc0:	e3a03000 	mov	r3, #0
  109fc4:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(fdt != NULL);
  109fc8:	e51b3010 	ldr	r3, [fp, #-16]
  109fcc:	e3530000 	cmp	r3, #0
  109fd0:	1a000005 	bne	109fec <fdt_fd_release+0x40>
  109fd4:	e300210b 	movw	r2, #267	; 0x10b
  109fd8:	e306123c 	movw	r1, #25148	; 0x623c
  109fdc:	e3401014 	movt	r1, #20
  109fe0:	e30601f8 	movw	r0, #25080	; 0x61f8
  109fe4:	e3400014 	movt	r0, #20
  109fe8:	ebffe56a 	bl	103598 <rt_assert_handler>

    dfs_fd_lock();
  109fec:	ebfffece 	bl	109b2c <dfs_fd_lock>

    if ((fd < 0) || (fd >= fdt->maxfd))
  109ff0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109ff4:	e3530000 	cmp	r3, #0
  109ff8:	ba000004 	blt	10a010 <fdt_fd_release+0x64>
  109ffc:	e51b3010 	ldr	r3, [fp, #-16]
  10a000:	e5932000 	ldr	r2, [r3]
  10a004:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a008:	e1520003 	cmp	r2, r3
  10a00c:	8a000001 	bhi	10a018 <fdt_fd_release+0x6c>
    {
        dfs_fd_unlock();
  10a010:	ebfffee6 	bl	109bb0 <dfs_fd_unlock>
        return;
  10a014:	ea000034 	b	10a0ec <fdt_fd_release+0x140>
    }

    fd_slot = fdt->fds[fd];
  10a018:	e51b3010 	ldr	r3, [fp, #-16]
  10a01c:	e5932004 	ldr	r2, [r3, #4]
  10a020:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a024:	e1a03103 	lsl	r3, r3, #2
  10a028:	e0823003 	add	r3, r2, r3
  10a02c:	e5933000 	ldr	r3, [r3]
  10a030:	e50b3008 	str	r3, [fp, #-8]
    if (fd_slot == NULL)
  10a034:	e51b3008 	ldr	r3, [fp, #-8]
  10a038:	e3530000 	cmp	r3, #0
  10a03c:	1a000001 	bne	10a048 <fdt_fd_release+0x9c>
    {
        dfs_fd_unlock();
  10a040:	ebfffeda 	bl	109bb0 <dfs_fd_unlock>
        return;
  10a044:	ea000028 	b	10a0ec <fdt_fd_release+0x140>
    }
    fdt->fds[fd] = NULL;
  10a048:	e51b3010 	ldr	r3, [fp, #-16]
  10a04c:	e5932004 	ldr	r2, [r3, #4]
  10a050:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a054:	e1a03103 	lsl	r3, r3, #2
  10a058:	e0823003 	add	r3, r2, r3
  10a05c:	e3a02000 	mov	r2, #0
  10a060:	e5832000 	str	r2, [r3]

    /* check fd */
    RT_ASSERT(fd_slot->magic == DFS_FD_MAGIC);
  10a064:	e51b3008 	ldr	r3, [fp, #-8]
  10a068:	e1d330b0 	ldrh	r3, [r3]
  10a06c:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  10a070:	e1530002 	cmp	r3, r2
  10a074:	0a000005 	beq	10a090 <fdt_fd_release+0xe4>
  10a078:	e300211e 	movw	r2, #286	; 0x11e
  10a07c:	e306123c 	movw	r1, #25148	; 0x623c
  10a080:	e3401014 	movt	r1, #20
  10a084:	e3060204 	movw	r0, #25092	; 0x6204
  10a088:	e3400014 	movt	r0, #20
  10a08c:	ebffe541 	bl	103598 <rt_assert_handler>

    fd_slot->ref_count--;
  10a090:	e51b3008 	ldr	r3, [fp, #-8]
  10a094:	e5933008 	ldr	r3, [r3, #8]
  10a098:	e2432001 	sub	r2, r3, #1
  10a09c:	e51b3008 	ldr	r3, [fp, #-8]
  10a0a0:	e5832008 	str	r2, [r3, #8]

    /* clear this fd entry */
    if (fd_slot->ref_count == 0)
  10a0a4:	e51b3008 	ldr	r3, [fp, #-8]
  10a0a8:	e5933008 	ldr	r3, [r3, #8]
  10a0ac:	e3530000 	cmp	r3, #0
  10a0b0:	1a00000c 	bne	10a0e8 <fdt_fd_release+0x13c>
    {
        struct dfs_fnode *fnode = fd_slot->fnode;
  10a0b4:	e51b3008 	ldr	r3, [fp, #-8]
  10a0b8:	e5933018 	ldr	r3, [r3, #24]
  10a0bc:	e50b300c 	str	r3, [fp, #-12]
        if (fnode)
  10a0c0:	e51b300c 	ldr	r3, [fp, #-12]
  10a0c4:	e3530000 	cmp	r3, #0
  10a0c8:	0a000004 	beq	10a0e0 <fdt_fd_release+0x134>
        {
            fnode->ref_count--;
  10a0cc:	e51b300c 	ldr	r3, [fp, #-12]
  10a0d0:	e593300c 	ldr	r3, [r3, #12]
  10a0d4:	e2432001 	sub	r2, r3, #1
  10a0d8:	e51b300c 	ldr	r3, [fp, #-12]
  10a0dc:	e583200c 	str	r2, [r3, #12]
        }
        rt_free(fd_slot);
  10a0e0:	e51b0008 	ldr	r0, [fp, #-8]
  10a0e4:	ebffe3b4 	bl	102fbc <rt_free>
    }
    dfs_fd_unlock();
  10a0e8:	ebfffeb0 	bl	109bb0 <dfs_fd_unlock>
}
  10a0ec:	e24bd004 	sub	sp, fp, #4
  10a0f0:	e8bd8800 	pop	{fp, pc}

0010a0f4 <fd_release>:

void fd_release(int fd)
{
  10a0f4:	e92d4800 	push	{fp, lr}
  10a0f8:	e28db004 	add	fp, sp, #4
  10a0fc:	e24dd010 	sub	sp, sp, #16
  10a100:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  10a104:	eb000006 	bl	10a124 <dfs_fdtable_get>
  10a108:	e50b0008 	str	r0, [fp, #-8]
    fdt_fd_release(fdt, fd);
  10a10c:	e51b1010 	ldr	r1, [fp, #-16]
  10a110:	e51b0008 	ldr	r0, [fp, #-8]
  10a114:	ebffffa4 	bl	109fac <fdt_fd_release>
}
  10a118:	e320f000 	nop	{0}
  10a11c:	e24bd004 	sub	sp, fp, #4
  10a120:	e8bd8800 	pop	{fp, pc}

0010a124 <dfs_fdtable_get>:

/**
 * This function will get the file descriptor table of current process.
 */
struct dfs_fdtable *dfs_fdtable_get(void)
{
  10a124:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a128:	e28db000 	add	fp, sp, #0
    return &_fdtab;
  10a12c:	e30d3610 	movw	r3, #54800	; 0xd610
  10a130:	e3403014 	movt	r3, #20
}
  10a134:	e1a00003 	mov	r0, r3
  10a138:	e28bd000 	add	sp, fp, #0
  10a13c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a140:	e12fff1e 	bx	lr

0010a144 <rt_list_init>:
{
  10a144:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a148:	e28db000 	add	fp, sp, #0
  10a14c:	e24dd00c 	sub	sp, sp, #12
  10a150:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  10a154:	e51b3008 	ldr	r3, [fp, #-8]
  10a158:	e51b2008 	ldr	r2, [fp, #-8]
  10a15c:	e5832004 	str	r2, [r3, #4]
  10a160:	e51b3008 	ldr	r3, [fp, #-8]
  10a164:	e5932004 	ldr	r2, [r3, #4]
  10a168:	e51b3008 	ldr	r3, [fp, #-8]
  10a16c:	e5832000 	str	r2, [r3]
}
  10a170:	e320f000 	nop	{0}
  10a174:	e28bd000 	add	sp, fp, #0
  10a178:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a17c:	e12fff1e 	bx	lr

0010a180 <dfs_fnode_mgr_init>:
};

static struct dfs_fnode_mgr dfs_fm;

void dfs_fnode_mgr_init(void)
{
  10a180:	e92d4800 	push	{fp, lr}
  10a184:	e28db004 	add	fp, sp, #4
  10a188:	e24dd008 	sub	sp, sp, #8
    int i = 0;
  10a18c:	e3a03000 	mov	r3, #0
  10a190:	e50b3008 	str	r3, [fp, #-8]

    rt_mutex_init(&dfs_fm.lock, "dfs_mgr", RT_IPC_FLAG_PRIO);
  10a194:	e3a02001 	mov	r2, #1
  10a198:	e306124c 	movw	r1, #25164	; 0x624c
  10a19c:	e3401014 	movt	r1, #20
  10a1a0:	e30d061c 	movw	r0, #54812	; 0xd61c
  10a1a4:	e3400014 	movt	r0, #20
  10a1a8:	ebffdae6 	bl	100d48 <rt_mutex_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  10a1ac:	e3a03000 	mov	r3, #0
  10a1b0:	e50b3008 	str	r3, [fp, #-8]
  10a1b4:	ea00000a 	b	10a1e4 <dfs_fnode_mgr_init+0x64>
    {
        rt_list_init(&dfs_fm.head[i]);
  10a1b8:	e51b3008 	ldr	r3, [fp, #-8]
  10a1bc:	e2833005 	add	r3, r3, #5
  10a1c0:	e1a02183 	lsl	r2, r3, #3
  10a1c4:	e30d361c 	movw	r3, #54812	; 0xd61c
  10a1c8:	e3403014 	movt	r3, #20
  10a1cc:	e0823003 	add	r3, r2, r3
  10a1d0:	e1a00003 	mov	r0, r3
  10a1d4:	ebffffda 	bl	10a144 <rt_list_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  10a1d8:	e51b3008 	ldr	r3, [fp, #-8]
  10a1dc:	e2833001 	add	r3, r3, #1
  10a1e0:	e50b3008 	str	r3, [fp, #-8]
  10a1e4:	e51b3008 	ldr	r3, [fp, #-8]
  10a1e8:	e353007f 	cmp	r3, #127	; 0x7f
  10a1ec:	dafffff1 	ble	10a1b8 <dfs_fnode_mgr_init+0x38>
    }
  10a1f0:	e320f000 	nop	{0}
  10a1f4:	e24bd004 	sub	sp, fp, #4
  10a1f8:	e8bd8800 	pop	{fp, pc}

0010a1fc <dfs_net_getsocket>:
#include "dfs.h"
#include "dfs_net.h"
#include "../netdev/sal_socket.h"

int dfs_net_getsocket(int fd)
{
  10a1fc:	e92d4800 	push	{fp, lr}
  10a200:	e28db004 	add	fp, sp, #4
  10a204:	e24dd010 	sub	sp, sp, #16
  10a208:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    struct dfs_fd *_dfs_fd;

    _dfs_fd = fd_get(fd);
  10a20c:	e51b0010 	ldr	r0, [fp, #-16]
  10a210:	ebffff58 	bl	109f78 <fd_get>
  10a214:	e50b000c 	str	r0, [fp, #-12]
    if (_dfs_fd == NULL) return -1;
  10a218:	e51b300c 	ldr	r3, [fp, #-12]
  10a21c:	e3530000 	cmp	r3, #0
  10a220:	1a000001 	bne	10a22c <dfs_net_getsocket+0x30>
  10a224:	e3e03000 	mvn	r3, #0
  10a228:	ea00000c 	b	10a260 <dfs_net_getsocket+0x64>

    if (_dfs_fd->fnode->type != FT_SOCKET) socket = -1;
  10a22c:	e51b300c 	ldr	r3, [fp, #-12]
  10a230:	e5933018 	ldr	r3, [r3, #24]
  10a234:	e1d330b0 	ldrh	r3, [r3]
  10a238:	e3530001 	cmp	r3, #1
  10a23c:	0a000002 	beq	10a24c <dfs_net_getsocket+0x50>
  10a240:	e3e03000 	mvn	r3, #0
  10a244:	e50b3008 	str	r3, [fp, #-8]
  10a248:	ea000003 	b	10a25c <dfs_net_getsocket+0x60>
    else socket = (int)(size_t)_dfs_fd->fnode->data;
  10a24c:	e51b300c 	ldr	r3, [fp, #-12]
  10a250:	e5933018 	ldr	r3, [r3, #24]
  10a254:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a258:	e50b3008 	str	r3, [fp, #-8]

    return socket;
  10a25c:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a260:	e1a00003 	mov	r0, r3
  10a264:	e24bd004 	sub	sp, fp, #4
  10a268:	e8bd8800 	pop	{fp, pc}

0010a26c <dfs_net_ioctl>:

static int dfs_net_ioctl(struct dfs_fd* file, int cmd, void* args)
{
  10a26c:	e92d4800 	push	{fp, lr}
  10a270:	e28db004 	add	fp, sp, #4
  10a274:	e24dd018 	sub	sp, sp, #24
  10a278:	e50b0010 	str	r0, [fp, #-16]
  10a27c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a280:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a284:	e51b3010 	ldr	r3, [fp, #-16]
  10a288:	e5933018 	ldr	r3, [r3, #24]
  10a28c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a290:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_ioctlsocket(socket, cmd, args);
  10a294:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a298:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a29c:	e51b0008 	ldr	r0, [fp, #-8]
  10a2a0:	ebfff8e6 	bl	108640 <sal_ioctlsocket>
  10a2a4:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a2a8:	e51b300c 	ldr	r3, [fp, #-12]
  10a2ac:	e3530000 	cmp	r3, #0
  10a2b0:	aa000006 	bge	10a2d0 <dfs_net_ioctl+0x64>
    {
        ret = rt_get_errno();
  10a2b4:	ebffdf68 	bl	10205c <rt_get_errno>
  10a2b8:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a2bc:	e51b300c 	ldr	r3, [fp, #-12]
  10a2c0:	e3530000 	cmp	r3, #0
  10a2c4:	b2633000 	rsblt	r3, r3, #0
  10a2c8:	e2633000 	rsb	r3, r3, #0
  10a2cc:	ea000000 	b	10a2d4 <dfs_net_ioctl+0x68>
    }
    return ret;
  10a2d0:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a2d4:	e1a00003 	mov	r0, r3
  10a2d8:	e24bd004 	sub	sp, fp, #4
  10a2dc:	e8bd8800 	pop	{fp, pc}

0010a2e0 <dfs_net_read>:

static int dfs_net_read(struct dfs_fd* file, void *buf, size_t count)
{
  10a2e0:	e92d4800 	push	{fp, lr}
  10a2e4:	e28db004 	add	fp, sp, #4
  10a2e8:	e24dd020 	sub	sp, sp, #32
  10a2ec:	e50b0010 	str	r0, [fp, #-16]
  10a2f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a2f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a2f8:	e51b3010 	ldr	r3, [fp, #-16]
  10a2fc:	e5933018 	ldr	r3, [r3, #24]
  10a300:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a304:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_recvfrom(socket, buf, count, 0, NULL, NULL);
  10a308:	e3a03000 	mov	r3, #0
  10a30c:	e58d3004 	str	r3, [sp, #4]
  10a310:	e3a03000 	mov	r3, #0
  10a314:	e58d3000 	str	r3, [sp]
  10a318:	e3a03000 	mov	r3, #0
  10a31c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a320:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a324:	e51b0008 	ldr	r0, [fp, #-8]
  10a328:	ebfff7dd 	bl	1082a4 <sal_recvfrom>
  10a32c:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a330:	e51b300c 	ldr	r3, [fp, #-12]
  10a334:	e3530000 	cmp	r3, #0
  10a338:	aa000006 	bge	10a358 <dfs_net_read+0x78>
    {
        ret = rt_get_errno();
  10a33c:	ebffdf46 	bl	10205c <rt_get_errno>
  10a340:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a344:	e51b300c 	ldr	r3, [fp, #-12]
  10a348:	e3530000 	cmp	r3, #0
  10a34c:	b2633000 	rsblt	r3, r3, #0
  10a350:	e2633000 	rsb	r3, r3, #0
  10a354:	ea000000 	b	10a35c <dfs_net_read+0x7c>
    }
    return ret;
  10a358:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a35c:	e1a00003 	mov	r0, r3
  10a360:	e24bd004 	sub	sp, fp, #4
  10a364:	e8bd8800 	pop	{fp, pc}

0010a368 <dfs_net_write>:

static int dfs_net_write(struct dfs_fd *file, const void *buf, size_t count)
{
  10a368:	e92d4800 	push	{fp, lr}
  10a36c:	e28db004 	add	fp, sp, #4
  10a370:	e24dd020 	sub	sp, sp, #32
  10a374:	e50b0010 	str	r0, [fp, #-16]
  10a378:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a37c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a380:	e51b3010 	ldr	r3, [fp, #-16]
  10a384:	e5933018 	ldr	r3, [r3, #24]
  10a388:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a38c:	e50b3008 	str	r3, [fp, #-8]
    
    ret = sal_sendto(socket, buf, count, 0, NULL, 0);
  10a390:	e3a03000 	mov	r3, #0
  10a394:	e58d3004 	str	r3, [sp, #4]
  10a398:	e3a03000 	mov	r3, #0
  10a39c:	e58d3000 	str	r3, [sp]
  10a3a0:	e3a03000 	mov	r3, #0
  10a3a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a3a8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a3ac:	e51b0008 	ldr	r0, [fp, #-8]
  10a3b0:	ebfff7ef 	bl	108374 <sal_sendto>
  10a3b4:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a3b8:	e51b300c 	ldr	r3, [fp, #-12]
  10a3bc:	e3530000 	cmp	r3, #0
  10a3c0:	aa000006 	bge	10a3e0 <dfs_net_write+0x78>
    {
        ret = rt_get_errno();
  10a3c4:	ebffdf24 	bl	10205c <rt_get_errno>
  10a3c8:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a3cc:	e51b300c 	ldr	r3, [fp, #-12]
  10a3d0:	e3530000 	cmp	r3, #0
  10a3d4:	b2633000 	rsblt	r3, r3, #0
  10a3d8:	e2633000 	rsb	r3, r3, #0
  10a3dc:	ea000000 	b	10a3e4 <dfs_net_write+0x7c>
    }
    return ret;
  10a3e0:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a3e4:	e1a00003 	mov	r0, r3
  10a3e8:	e24bd004 	sub	sp, fp, #4
  10a3ec:	e8bd8800 	pop	{fp, pc}

0010a3f0 <dfs_net_close>:
static int dfs_net_close(struct dfs_fd* file)
{
  10a3f0:	e92d4800 	push	{fp, lr}
  10a3f4:	e28db004 	add	fp, sp, #4
  10a3f8:	e24dd010 	sub	sp, sp, #16
  10a3fc:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    int ret = 0;
  10a400:	e3a03000 	mov	r3, #0
  10a404:	e50b3008 	str	r3, [fp, #-8]

    if (file->fnode->ref_count == 1)
  10a408:	e51b3010 	ldr	r3, [fp, #-16]
  10a40c:	e5933018 	ldr	r3, [r3, #24]
  10a410:	e593300c 	ldr	r3, [r3, #12]
  10a414:	e3530001 	cmp	r3, #1
  10a418:	1a000006 	bne	10a438 <dfs_net_close+0x48>
    {
        socket = (int)(size_t)file->fnode->data;
  10a41c:	e51b3010 	ldr	r3, [fp, #-16]
  10a420:	e5933018 	ldr	r3, [r3, #24]
  10a424:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a428:	e50b300c 	str	r3, [fp, #-12]
        ret = sal_closesocket(socket);
  10a42c:	e51b000c 	ldr	r0, [fp, #-12]
  10a430:	ebfff854 	bl	108588 <sal_closesocket>
  10a434:	e50b0008 	str	r0, [fp, #-8]
    }
    return ret;
  10a438:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a43c:	e1a00003 	mov	r0, r3
  10a440:	e24bd004 	sub	sp, fp, #4
  10a444:	e8bd8800 	pop	{fp, pc}

0010a448 <dfs_net_poll>:

static int dfs_net_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  10a448:	e92d4800 	push	{fp, lr}
  10a44c:	e28db004 	add	fp, sp, #4
  10a450:	e24dd008 	sub	sp, sp, #8
  10a454:	e50b0008 	str	r0, [fp, #-8]
  10a458:	e50b100c 	str	r1, [fp, #-12]
    extern int sal_poll(struct dfs_fd *file, struct rt_pollreq *req);

    return sal_poll(file, req);
  10a45c:	e51b100c 	ldr	r1, [fp, #-12]
  10a460:	e51b0008 	ldr	r0, [fp, #-8]
  10a464:	ebfff911 	bl	1088b0 <sal_poll>
  10a468:	e1a03000 	mov	r3, r0
}
  10a46c:	e1a00003 	mov	r0, r3
  10a470:	e24bd004 	sub	sp, fp, #4
  10a474:	e8bd8800 	pop	{fp, pc}

0010a478 <dfs_net_get_fops>:
    dfs_net_write,
    dfs_net_poll,
};

const struct dfs_file_ops *dfs_net_get_fops(void)
{
  10a478:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a47c:	e28db000 	add	fp, sp, #0
    return &_net_fops;
  10a480:	e3063254 	movw	r3, #25172	; 0x6254
  10a484:	e3403014 	movt	r3, #20
}
  10a488:	e1a00003 	mov	r0, r3
  10a48c:	e28bd000 	add	sp, fp, #0
  10a490:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a494:	e12fff1e 	bx	lr

0010a498 <tcpip_init_done_callback>:

/*
 * Initialize the ethernetif layer and set network interface device up
 */
static void tcpip_init_done_callback(void *arg)
{
  10a498:	e92d4800 	push	{fp, lr}
  10a49c:	e28db004 	add	fp, sp, #4
  10a4a0:	e24dd008 	sub	sp, sp, #8
  10a4a4:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release((rt_sem_t)arg);
  10a4a8:	e51b0008 	ldr	r0, [fp, #-8]
  10a4ac:	ebffdb64 	bl	101244 <rt_sem_release>
}
  10a4b0:	e320f000 	nop	{0}
  10a4b4:	e24bd004 	sub	sp, fp, #4
  10a4b8:	e8bd8800 	pop	{fp, pc}

0010a4bc <buffer_full>:
#define INPUT_BUF_LEN 3
static void* INPUT_buffer[INPUT_BUF_LEN];
static int input_ptr = 0;
static int output_ptr = 0;
static int buffer_full()
{
  10a4bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a4c0:	e28db000 	add	fp, sp, #0
    return output_ptr == ((input_ptr + 1) % INPUT_BUF_LEN);
  10a4c4:	e30d3a54 	movw	r3, #55892	; 0xda54
  10a4c8:	e3403014 	movt	r3, #20
  10a4cc:	e5933000 	ldr	r3, [r3]
  10a4d0:	e2831001 	add	r1, r3, #1
  10a4d4:	e3053556 	movw	r3, #21846	; 0x5556
  10a4d8:	e3453555 	movt	r3, #21845	; 0x5555
  10a4dc:	e0c32391 	smull	r2, r3, r1, r3
  10a4e0:	e1a00fc1 	asr	r0, r1, #31
  10a4e4:	e0432000 	sub	r2, r3, r0
  10a4e8:	e1a03002 	mov	r3, r2
  10a4ec:	e1a03083 	lsl	r3, r3, #1
  10a4f0:	e0833002 	add	r3, r3, r2
  10a4f4:	e0412003 	sub	r2, r1, r3
  10a4f8:	e30d3a58 	movw	r3, #55896	; 0xda58
  10a4fc:	e3403014 	movt	r3, #20
  10a500:	e5933000 	ldr	r3, [r3]
  10a504:	e1520003 	cmp	r2, r3
  10a508:	03a03001 	moveq	r3, #1
  10a50c:	13a03000 	movne	r3, #0
  10a510:	e6ef3073 	uxtb	r3, r3
}
  10a514:	e1a00003 	mov	r0, r3
  10a518:	e28bd000 	add	sp, fp, #0
  10a51c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a520:	e12fff1e 	bx	lr

0010a524 <buffer_empty>:

static int buffer_empty()
{
  10a524:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a528:	e28db000 	add	fp, sp, #0
    return input_ptr == output_ptr;
  10a52c:	e30d3a54 	movw	r3, #55892	; 0xda54
  10a530:	e3403014 	movt	r3, #20
  10a534:	e5932000 	ldr	r2, [r3]
  10a538:	e30d3a58 	movw	r3, #55896	; 0xda58
  10a53c:	e3403014 	movt	r3, #20
  10a540:	e5933000 	ldr	r3, [r3]
  10a544:	e1520003 	cmp	r2, r3
  10a548:	03a03001 	moveq	r3, #1
  10a54c:	13a03000 	movne	r3, #0
  10a550:	e6ef3073 	uxtb	r3, r3
}
  10a554:	e1a00003 	mov	r0, r3
  10a558:	e28bd000 	add	sp, fp, #0
  10a55c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a560:	e12fff1e 	bx	lr

0010a564 <buffer_enqueue>:

static int buffer_enqueue(void *data)
{
  10a564:	e92d4800 	push	{fp, lr}
  10a568:	e28db004 	add	fp, sp, #4
  10a56c:	e24dd008 	sub	sp, sp, #8
  10a570:	e50b0008 	str	r0, [fp, #-8]
    if (buffer_full())
  10a574:	ebffffd0 	bl	10a4bc <buffer_full>
  10a578:	e1a03000 	mov	r3, r0
  10a57c:	e3530000 	cmp	r3, #0
  10a580:	0a000001 	beq	10a58c <buffer_enqueue+0x28>
    {
        return -1;
  10a584:	e3e03000 	mvn	r3, #0
  10a588:	ea000017 	b	10a5ec <buffer_enqueue+0x88>
    }

    INPUT_buffer[input_ptr] = data;
  10a58c:	e30d3a54 	movw	r3, #55892	; 0xda54
  10a590:	e3403014 	movt	r3, #20
  10a594:	e5932000 	ldr	r2, [r3]
  10a598:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a59c:	e3403014 	movt	r3, #20
  10a5a0:	e51b1008 	ldr	r1, [fp, #-8]
  10a5a4:	e7831102 	str	r1, [r3, r2, lsl #2]
    input_ptr = (input_ptr + 1) % INPUT_BUF_LEN;
  10a5a8:	e30d3a54 	movw	r3, #55892	; 0xda54
  10a5ac:	e3403014 	movt	r3, #20
  10a5b0:	e5933000 	ldr	r3, [r3]
  10a5b4:	e2831001 	add	r1, r3, #1
  10a5b8:	e3053556 	movw	r3, #21846	; 0x5556
  10a5bc:	e3453555 	movt	r3, #21845	; 0x5555
  10a5c0:	e0c32391 	smull	r2, r3, r1, r3
  10a5c4:	e1a00fc1 	asr	r0, r1, #31
  10a5c8:	e0432000 	sub	r2, r3, r0
  10a5cc:	e1a03002 	mov	r3, r2
  10a5d0:	e1a03083 	lsl	r3, r3, #1
  10a5d4:	e0833002 	add	r3, r3, r2
  10a5d8:	e0412003 	sub	r2, r1, r3
  10a5dc:	e30d3a54 	movw	r3, #55892	; 0xda54
  10a5e0:	e3403014 	movt	r3, #20
  10a5e4:	e5832000 	str	r2, [r3]
    // printf("e %d\n", input_ptr);

    return 0;
  10a5e8:	e3a03000 	mov	r3, #0
}
  10a5ec:	e1a00003 	mov	r0, r3
  10a5f0:	e24bd004 	sub	sp, fp, #4
  10a5f4:	e8bd8800 	pop	{fp, pc}

0010a5f8 <buffer_dequeue>:

static void* buffer_dequeue()
{
  10a5f8:	e92d4800 	push	{fp, lr}
  10a5fc:	e28db004 	add	fp, sp, #4
  10a600:	e24dd008 	sub	sp, sp, #8
    if (buffer_empty())
  10a604:	ebffffc6 	bl	10a524 <buffer_empty>
  10a608:	e1a03000 	mov	r3, r0
  10a60c:	e3530000 	cmp	r3, #0
  10a610:	0a000001 	beq	10a61c <buffer_dequeue+0x24>
    {
        return RT_NULL;
  10a614:	e3a03000 	mov	r3, #0
  10a618:	ea000017 	b	10a67c <buffer_dequeue+0x84>
    }

    void *res = INPUT_buffer[output_ptr];
  10a61c:	e30d3a58 	movw	r3, #55896	; 0xda58
  10a620:	e3403014 	movt	r3, #20
  10a624:	e5932000 	ldr	r2, [r3]
  10a628:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a62c:	e3403014 	movt	r3, #20
  10a630:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  10a634:	e50b3008 	str	r3, [fp, #-8]
    output_ptr = (output_ptr + 1) % INPUT_BUF_LEN;
  10a638:	e30d3a58 	movw	r3, #55896	; 0xda58
  10a63c:	e3403014 	movt	r3, #20
  10a640:	e5933000 	ldr	r3, [r3]
  10a644:	e2831001 	add	r1, r3, #1
  10a648:	e3053556 	movw	r3, #21846	; 0x5556
  10a64c:	e3453555 	movt	r3, #21845	; 0x5555
  10a650:	e0c32391 	smull	r2, r3, r1, r3
  10a654:	e1a00fc1 	asr	r0, r1, #31
  10a658:	e0432000 	sub	r2, r3, r0
  10a65c:	e1a03002 	mov	r3, r2
  10a660:	e1a03083 	lsl	r3, r3, #1
  10a664:	e0833002 	add	r3, r3, r2
  10a668:	e0412003 	sub	r2, r1, r3
  10a66c:	e30d3a58 	movw	r3, #55896	; 0xda58
  10a670:	e3403014 	movt	r3, #20
  10a674:	e5832000 	str	r2, [r3]
    // printf("d %d\n", output_ptr);

    return res;
  10a678:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a67c:	e1a00003 	mov	r0, r3
  10a680:	e24bd004 	sub	sp, fp, #4
  10a684:	e8bd8800 	pop	{fp, pc}

0010a688 <tcpip_input_timer_entry>:

#define INPUT_NOTIFICATION 0x01
sys_mbox_t * mbox_global = 0;
void tcpip_input_timer_entry()
{
  10a688:	e92d4800 	push	{fp, lr}
  10a68c:	e28db004 	add	fp, sp, #4
    while (1)
    {
        rt_thread_mdelay(1);
  10a690:	e3a00001 	mov	r0, #1
  10a694:	ebffddf8 	bl	101e7c <rt_thread_mdelay>
        if (mbox_global && !buffer_empty())
  10a698:	e30d3a44 	movw	r3, #55876	; 0xda44
  10a69c:	e3403014 	movt	r3, #20
  10a6a0:	e5933000 	ldr	r3, [r3]
  10a6a4:	e3530000 	cmp	r3, #0
  10a6a8:	0afffff8 	beq	10a690 <tcpip_input_timer_entry+0x8>
  10a6ac:	ebffff9c 	bl	10a524 <buffer_empty>
  10a6b0:	e1a03000 	mov	r3, r0
  10a6b4:	e3530000 	cmp	r3, #0
  10a6b8:	1afffff4 	bne	10a690 <tcpip_input_timer_entry+0x8>
        {
            rt_mb_send(*mbox_global, INPUT_NOTIFICATION);
  10a6bc:	e30d3a44 	movw	r3, #55876	; 0xda44
  10a6c0:	e3403014 	movt	r3, #20
  10a6c4:	e5933000 	ldr	r3, [r3]
  10a6c8:	e5933000 	ldr	r3, [r3]
  10a6cc:	e3a01001 	mov	r1, #1
  10a6d0:	e1a00003 	mov	r0, r3
  10a6d4:	ebffdbca 	bl	101604 <rt_mb_send>
        rt_thread_mdelay(1);
  10a6d8:	eaffffec 	b	10a690 <tcpip_input_timer_entry+0x8>

0010a6dc <lwip_system_init>:
    }
}

extern int eth_system_device_init_private(void);
int lwip_system_init(void)
{
  10a6dc:	e92d4800 	push	{fp, lr}
  10a6e0:	e28db004 	add	fp, sp, #4
  10a6e4:	e24dd010 	sub	sp, sp, #16
    struct rt_semaphore *done_sem;
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  10a6e8:	e30d3a5c 	movw	r3, #55900	; 0xda5c
  10a6ec:	e3403014 	movt	r3, #20
  10a6f0:	e5933000 	ldr	r3, [r3]
  10a6f4:	e3530000 	cmp	r3, #0
  10a6f8:	0a000004 	beq	10a710 <lwip_system_init+0x34>
    {
        rt_kprintf("lwip system already init.\n");
  10a6fc:	e3060268 	movw	r0, #25192	; 0x6268
  10a700:	e3400014 	movt	r0, #20
  10a704:	ebffe282 	bl	103114 <rt_kprintf>
        return 0;
  10a708:	e3a03000 	mov	r3, #0
  10a70c:	ea00003c 	b	10a804 <lwip_system_init+0x128>
    }

    eth_system_device_init_private();
  10a710:	eb007d94 	bl	129d68 <eth_system_device_init_private>

    /* set default netif to NULL */
    netif_default = RT_NULL;
  10a714:	e30e3a0c 	movw	r3, #59916	; 0xea0c
  10a718:	e3403056 	movt	r3, #86	; 0x56
  10a71c:	e3a02000 	mov	r2, #0
  10a720:	e5832000 	str	r2, [r3]
    done_sem = rt_sem_create("done", 0, RT_IPC_FLAG_FIFO);
  10a724:	e3a02000 	mov	r2, #0
  10a728:	e3a01000 	mov	r1, #0
  10a72c:	e3060284 	movw	r0, #25220	; 0x6284
  10a730:	e3400014 	movt	r0, #20
  10a734:	ebffda2b 	bl	100fe8 <rt_sem_create>
  10a738:	e50b0008 	str	r0, [fp, #-8]

    if (done_sem == RT_NULL)
  10a73c:	e51b3008 	ldr	r3, [fp, #-8]
  10a740:	e3530000 	cmp	r3, #0
  10a744:	1a000008 	bne	10a76c <lwip_system_init+0x90>
    {
        LWIP_ASSERT("Failed to create semaphore", 0);
  10a748:	e306028c 	movw	r0, #25228	; 0x628c
  10a74c:	e3400014 	movt	r0, #20
  10a750:	ebffe26f 	bl	103114 <rt_kprintf>
  10a754:	e3a01095 	mov	r1, #149	; 0x95
  10a758:	e30602a8 	movw	r0, #25256	; 0x62a8
  10a75c:	e3400014 	movt	r0, #20
  10a760:	eb000262 	bl	10b0f0 <sys_arch_assert>

        return -1;
  10a764:	e3e03000 	mvn	r3, #0
  10a768:	ea000025 	b	10a804 <lwip_system_init+0x128>
    }

    tcpip_init(tcpip_init_done_callback, (void *)done_sem);
  10a76c:	e51b1008 	ldr	r1, [fp, #-8]
  10a770:	e30a0498 	movw	r0, #42136	; 0xa498
  10a774:	e3400010 	movt	r0, #16
  10a778:	eb002f3e 	bl	116478 <tcpip_init>

    /* waiting for initialization done */
    if (rt_sem_take(done_sem, RT_WAITING_FOREVER) != RT_EOK)
  10a77c:	e3e01000 	mvn	r1, #0
  10a780:	e51b0008 	ldr	r0, [fp, #-8]
  10a784:	ebffdaca 	bl	1012b4 <rt_sem_take>
  10a788:	e1a03000 	mov	r3, r0
  10a78c:	e3530000 	cmp	r3, #0
  10a790:	0a000003 	beq	10a7a4 <lwip_system_init+0xc8>
    {
        rt_sem_delete(done_sem);
  10a794:	e51b0008 	ldr	r0, [fp, #-8]
  10a798:	ebffda5d 	bl	101114 <rt_sem_delete>

        return -1;
  10a79c:	e3e03000 	mvn	r3, #0
  10a7a0:	ea000017 	b	10a804 <lwip_system_init+0x128>
    }
    rt_sem_delete(done_sem);
  10a7a4:	e51b0008 	ldr	r0, [fp, #-8]
  10a7a8:	ebffda59 	bl	101114 <rt_sem_delete>

        netifapi_netif_set_addr(netif_default, &ipaddr, &netmask, &gw);
    }
#endif

    rt_thread_t tid = rt_thread_create("tcpip_input_timer", tcpip_input_timer_entry, NULL, 1024, 25, 10); 
  10a7ac:	e3a0300a 	mov	r3, #10
  10a7b0:	e58d3004 	str	r3, [sp, #4]
  10a7b4:	e3a03019 	mov	r3, #25
  10a7b8:	e58d3000 	str	r3, [sp]
  10a7bc:	e3a03b01 	mov	r3, #1024	; 0x400
  10a7c0:	e3a02000 	mov	r2, #0
  10a7c4:	e30a1688 	movw	r1, #42632	; 0xa688
  10a7c8:	e3401010 	movt	r1, #16
  10a7cc:	e30602d8 	movw	r0, #25304	; 0x62d8
  10a7d0:	e3400014 	movt	r0, #20
  10a7d4:	ebffde46 	bl	1020f4 <rt_thread_create>
  10a7d8:	e50b000c 	str	r0, [fp, #-12]
    if (tid) rt_thread_startup(tid);
  10a7dc:	e51b300c 	ldr	r3, [fp, #-12]
  10a7e0:	e3530000 	cmp	r3, #0
  10a7e4:	0a000001 	beq	10a7f0 <lwip_system_init+0x114>
  10a7e8:	e51b000c 	ldr	r0, [fp, #-12]
  10a7ec:	ebffde75 	bl	1021c8 <rt_thread_startup>

    init_ok = RT_TRUE;
  10a7f0:	e30d3a5c 	movw	r3, #55900	; 0xda5c
  10a7f4:	e3403014 	movt	r3, #20
  10a7f8:	e3a02001 	mov	r2, #1
  10a7fc:	e5832000 	str	r2, [r3]

    return 0;
  10a800:	e3a03000 	mov	r3, #0
}
  10a804:	e1a00003 	mov	r0, r3
  10a808:	e24bd004 	sub	sp, fp, #4
  10a80c:	e8bd8800 	pop	{fp, pc}

0010a810 <sys_init>:

void sys_init(void)
{
  10a810:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a814:	e28db000 	add	fp, sp, #0
    /* nothing on RT-Thread porting */
}
  10a818:	e320f000 	nop	{0}
  10a81c:	e28bd000 	add	sp, fp, #0
  10a820:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a824:	e12fff1e 	bx	lr

0010a828 <lwip_sys_init>:

void lwip_sys_init(void)
{
  10a828:	e92d4800 	push	{fp, lr}
  10a82c:	e28db004 	add	fp, sp, #4
    lwip_system_init();
  10a830:	ebffffa9 	bl	10a6dc <lwip_system_init>
}
  10a834:	e320f000 	nop	{0}
  10a838:	e8bd8800 	pop	{fp, pc}

0010a83c <sys_sem_new>:
 * Create a new semaphore
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
  10a83c:	e92d4800 	push	{fp, lr}
  10a840:	e28db004 	add	fp, sp, #4
  10a844:	e24dd020 	sub	sp, sp, #32
  10a848:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a84c:	e1a03001 	mov	r3, r1
  10a850:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    char tname[RT_NAME_MAX];
    sys_sem_t tmpsem;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_SEM_NAME, counter);
  10a854:	e30d3a60 	movw	r3, #55904	; 0xda60
  10a858:	e3403014 	movt	r3, #20
  10a85c:	e1d330b0 	ldrh	r3, [r3]
  10a860:	e24b0010 	sub	r0, fp, #16
  10a864:	e58d3000 	str	r3, [sp]
  10a868:	e30632ec 	movw	r3, #25324	; 0x62ec
  10a86c:	e3403014 	movt	r3, #20
  10a870:	e30622f0 	movw	r2, #25328	; 0x62f0
  10a874:	e3402014 	movt	r2, #20
  10a878:	e3a01008 	mov	r1, #8
  10a87c:	ebffe1ee 	bl	10303c <rt_snprintf>
    counter ++;
  10a880:	e30d3a60 	movw	r3, #55904	; 0xda60
  10a884:	e3403014 	movt	r3, #20
  10a888:	e1d330b0 	ldrh	r3, [r3]
  10a88c:	e2833001 	add	r3, r3, #1
  10a890:	e6ff2073 	uxth	r2, r3
  10a894:	e30d3a60 	movw	r3, #55904	; 0xda60
  10a898:	e3403014 	movt	r3, #20
  10a89c:	e1c320b0 	strh	r2, [r3]

    tmpsem = rt_sem_create(tname, count, RT_IPC_FLAG_FIFO);
  10a8a0:	e55b1019 	ldrb	r1, [fp, #-25]	; 0xffffffe7
  10a8a4:	e24b3010 	sub	r3, fp, #16
  10a8a8:	e3a02000 	mov	r2, #0
  10a8ac:	e1a00003 	mov	r0, r3
  10a8b0:	ebffd9cc 	bl	100fe8 <rt_sem_create>
  10a8b4:	e50b0008 	str	r0, [fp, #-8]
    if (tmpsem == RT_NULL)
  10a8b8:	e51b3008 	ldr	r3, [fp, #-8]
  10a8bc:	e3530000 	cmp	r3, #0
  10a8c0:	1a000001 	bne	10a8cc <sys_sem_new+0x90>
        return ERR_MEM;
  10a8c4:	e3e03000 	mvn	r3, #0
  10a8c8:	ea000003 	b	10a8dc <sys_sem_new+0xa0>
    else
    {
        *sem = tmpsem;
  10a8cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a8d0:	e51b2008 	ldr	r2, [fp, #-8]
  10a8d4:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10a8d8:	e3a03000 	mov	r3, #0
    }
}
  10a8dc:	e1a00003 	mov	r0, r3
  10a8e0:	e24bd004 	sub	sp, fp, #4
  10a8e4:	e8bd8800 	pop	{fp, pc}

0010a8e8 <sys_sem_free>:

/*
 * Deallocate a semaphore
 */
void sys_sem_free(sys_sem_t *sem)
{
  10a8e8:	e92d4800 	push	{fp, lr}
  10a8ec:	e28db004 	add	fp, sp, #4
  10a8f0:	e24dd008 	sub	sp, sp, #8
  10a8f4:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_sem_delete(*sem);
  10a8f8:	e51b3008 	ldr	r3, [fp, #-8]
  10a8fc:	e5933000 	ldr	r3, [r3]
  10a900:	e1a00003 	mov	r0, r3
  10a904:	ebffda02 	bl	101114 <rt_sem_delete>
}
  10a908:	e320f000 	nop	{0}
  10a90c:	e24bd004 	sub	sp, fp, #4
  10a910:	e8bd8800 	pop	{fp, pc}

0010a914 <sys_sem_signal>:

/*
 * Signal a semaphore
 */
void sys_sem_signal(sys_sem_t *sem)
{
  10a914:	e92d4800 	push	{fp, lr}
  10a918:	e28db004 	add	fp, sp, #4
  10a91c:	e24dd008 	sub	sp, sp, #8
  10a920:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release(*sem);
  10a924:	e51b3008 	ldr	r3, [fp, #-8]
  10a928:	e5933000 	ldr	r3, [r3]
  10a92c:	e1a00003 	mov	r0, r3
  10a930:	ebffda43 	bl	101244 <rt_sem_release>
}
  10a934:	e320f000 	nop	{0}
  10a938:	e24bd004 	sub	sp, fp, #4
  10a93c:	e8bd8800 	pop	{fp, pc}

0010a940 <sys_arch_sem_wait>:
 *         spent waiting for the semaphore to be signaled; If the semaphore isn't signaled
 *         within the specified time, it will return SYS_ARCH_TIMEOUT; If the thread doesn't
 *         wait for the semaphore, it will return zero
 */
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
  10a940:	e92d4800 	push	{fp, lr}
  10a944:	e28db004 	add	fp, sp, #4
  10a948:	e24dd018 	sub	sp, sp, #24
  10a94c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a950:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10a954:	ebffdd41 	bl	101e60 <rt_tick_get>
  10a958:	e50b000c 	str	r0, [fp, #-12]
    if (timeout == 0)
  10a95c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a960:	e3530000 	cmp	r3, #0
  10a964:	1a000002 	bne	10a974 <sys_arch_sem_wait+0x34>
        t = RT_WAITING_FOREVER;
  10a968:	e3e03000 	mvn	r3, #0
  10a96c:	e50b3008 	str	r3, [fp, #-8]
  10a970:	ea000007 	b	10a994 <sys_arch_sem_wait+0x54>
    else
    {
        /* convert msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10a974:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a978:	e3530000 	cmp	r3, #0
  10a97c:	1a000002 	bne	10a98c <sys_arch_sem_wait+0x4c>
            t = 1;
  10a980:	e3a03001 	mov	r3, #1
  10a984:	e50b3008 	str	r3, [fp, #-8]
  10a988:	ea000001 	b	10a994 <sys_arch_sem_wait+0x54>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10a98c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a990:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = rt_sem_take(*sem, t);
  10a994:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a998:	e5933000 	ldr	r3, [r3]
  10a99c:	e51b1008 	ldr	r1, [fp, #-8]
  10a9a0:	e1a00003 	mov	r0, r3
  10a9a4:	ebffda42 	bl	1012b4 <rt_sem_take>
  10a9a8:	e50b0010 	str	r0, [fp, #-16]

    if (ret == -RT_ETIMEOUT)
  10a9ac:	e51b3010 	ldr	r3, [fp, #-16]
  10a9b0:	e3730002 	cmn	r3, #2
  10a9b4:	1a000001 	bne	10a9c0 <sys_arch_sem_wait+0x80>
        return SYS_ARCH_TIMEOUT;
  10a9b8:	e3e03000 	mvn	r3, #0
  10a9bc:	ea00000f 	b	10aa00 <sys_arch_sem_wait+0xc0>
    else
    {
        if (ret == RT_EOK)
  10a9c0:	e51b3010 	ldr	r3, [fp, #-16]
  10a9c4:	e3530000 	cmp	r3, #0
  10a9c8:	1a000001 	bne	10a9d4 <sys_arch_sem_wait+0x94>
            ret = 1;
  10a9cc:	e3a03001 	mov	r3, #1
  10a9d0:	e50b3010 	str	r3, [fp, #-16]
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10a9d4:	ebffdd21 	bl	101e60 <rt_tick_get>
  10a9d8:	e1a02000 	mov	r2, r0
  10a9dc:	e51b300c 	ldr	r3, [fp, #-12]
  10a9e0:	e0423003 	sub	r3, r2, r3
  10a9e4:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10a9e8:	e51b300c 	ldr	r3, [fp, #-12]
  10a9ec:	e3530000 	cmp	r3, #0
  10a9f0:	1a000001 	bne	10a9fc <sys_arch_sem_wait+0xbc>
        tick = 1;
  10a9f4:	e3a03001 	mov	r3, #1
  10a9f8:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10a9fc:	e51b300c 	ldr	r3, [fp, #-12]
}
  10aa00:	e1a00003 	mov	r0, r3
  10aa04:	e24bd004 	sub	sp, fp, #4
  10aa08:	e8bd8800 	pop	{fp, pc}

0010aa0c <sys_sem_valid>:
#ifndef sys_sem_valid
/** Check if a semaphore is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_ubase_t sys_sem_valid(sys_sem_t *sem)
{
  10aa0c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10aa10:	e28db000 	add	fp, sp, #0
  10aa14:	e24dd00c 	sub	sp, sp, #12
  10aa18:	e50b0008 	str	r0, [fp, #-8]
    return (rt_ubase_t)(*sem);
  10aa1c:	e51b3008 	ldr	r3, [fp, #-8]
  10aa20:	e5933000 	ldr	r3, [r3]
}
  10aa24:	e1a00003 	mov	r0, r3
  10aa28:	e28bd000 	add	sp, fp, #0
  10aa2c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10aa30:	e12fff1e 	bx	lr

0010aa34 <sys_sem_set_invalid>:

#ifndef sys_sem_set_invalid
/** Set a semaphore invalid so that sys_sem_valid returns 0
 */
void sys_sem_set_invalid(sys_sem_t *sem)
{
  10aa34:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10aa38:	e28db000 	add	fp, sp, #0
  10aa3c:	e24dd00c 	sub	sp, sp, #12
  10aa40:	e50b0008 	str	r0, [fp, #-8]
    *sem = RT_NULL;
  10aa44:	e51b3008 	ldr	r3, [fp, #-8]
  10aa48:	e3a02000 	mov	r2, #0
  10aa4c:	e5832000 	str	r2, [r3]
}
  10aa50:	e320f000 	nop	{0}
  10aa54:	e28bd000 	add	sp, fp, #0
  10aa58:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10aa5c:	e12fff1e 	bx	lr

0010aa60 <sys_mutex_new>:
/** Create a new mutex
 * @param mutex pointer to the mutex to create
 * @return a new mutex
 */
err_t sys_mutex_new(sys_mutex_t *mutex)
{
  10aa60:	e92d4800 	push	{fp, lr}
  10aa64:	e28db004 	add	fp, sp, #4
  10aa68:	e24dd020 	sub	sp, sp, #32
  10aa6c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    char tname[RT_NAME_MAX];
    sys_mutex_t tmpmutex;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MUTEX_NAME, counter);
  10aa70:	e30d3a62 	movw	r3, #55906	; 0xda62
  10aa74:	e3403014 	movt	r3, #20
  10aa78:	e1d330b0 	ldrh	r3, [r3]
  10aa7c:	e24b0010 	sub	r0, fp, #16
  10aa80:	e58d3000 	str	r3, [sp]
  10aa84:	e30632f8 	movw	r3, #25336	; 0x62f8
  10aa88:	e3403014 	movt	r3, #20
  10aa8c:	e30622f0 	movw	r2, #25328	; 0x62f0
  10aa90:	e3402014 	movt	r2, #20
  10aa94:	e3a01008 	mov	r1, #8
  10aa98:	ebffe167 	bl	10303c <rt_snprintf>
    counter ++;
  10aa9c:	e30d3a62 	movw	r3, #55906	; 0xda62
  10aaa0:	e3403014 	movt	r3, #20
  10aaa4:	e1d330b0 	ldrh	r3, [r3]
  10aaa8:	e2833001 	add	r3, r3, #1
  10aaac:	e6ff2073 	uxth	r2, r3
  10aab0:	e30d3a62 	movw	r3, #55906	; 0xda62
  10aab4:	e3403014 	movt	r3, #20
  10aab8:	e1c320b0 	strh	r2, [r3]

    tmpmutex = rt_mutex_create(tname, RT_IPC_FLAG_FIFO);
  10aabc:	e24b3010 	sub	r3, fp, #16
  10aac0:	e3a01000 	mov	r1, #0
  10aac4:	e1a00003 	mov	r0, r3
  10aac8:	ebffd876 	bl	100ca8 <rt_mutex_create>
  10aacc:	e50b0008 	str	r0, [fp, #-8]
    if (tmpmutex == RT_NULL)
  10aad0:	e51b3008 	ldr	r3, [fp, #-8]
  10aad4:	e3530000 	cmp	r3, #0
  10aad8:	1a000001 	bne	10aae4 <sys_mutex_new+0x84>
        return ERR_MEM;
  10aadc:	e3e03000 	mvn	r3, #0
  10aae0:	ea000003 	b	10aaf4 <sys_mutex_new+0x94>
    else
    {
        *mutex = tmpmutex;
  10aae4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10aae8:	e51b2008 	ldr	r2, [fp, #-8]
  10aaec:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10aaf0:	e3a03000 	mov	r3, #0
    }
}
  10aaf4:	e1a00003 	mov	r0, r3
  10aaf8:	e24bd004 	sub	sp, fp, #4
  10aafc:	e8bd8800 	pop	{fp, pc}

0010ab00 <sys_mutex_lock>:

/** Lock a mutex
 * @param mutex the mutex to lock
 */
void sys_mutex_lock(sys_mutex_t *mutex)
{
  10ab00:	e92d4800 	push	{fp, lr}
  10ab04:	e28db004 	add	fp, sp, #4
  10ab08:	e24dd008 	sub	sp, sp, #8
  10ab0c:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_mutex_take(*mutex, RT_WAITING_FOREVER);
  10ab10:	e51b3008 	ldr	r3, [fp, #-8]
  10ab14:	e5933000 	ldr	r3, [r3]
  10ab18:	e3e01000 	mvn	r1, #0
  10ab1c:	e1a00003 	mov	r0, r3
  10ab20:	ebffd8f6 	bl	100f00 <rt_mutex_take>

    return;
  10ab24:	e320f000 	nop	{0}
}
  10ab28:	e24bd004 	sub	sp, fp, #4
  10ab2c:	e8bd8800 	pop	{fp, pc}

0010ab30 <sys_mutex_unlock>:

/** Unlock a mutex
 * @param mutex the mutex to unlock
 */
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  10ab30:	e92d4800 	push	{fp, lr}
  10ab34:	e28db004 	add	fp, sp, #4
  10ab38:	e24dd008 	sub	sp, sp, #8
  10ab3c:	e50b0008 	str	r0, [fp, #-8]
    rt_mutex_release(*mutex);
  10ab40:	e51b3008 	ldr	r3, [fp, #-8]
  10ab44:	e5933000 	ldr	r3, [r3]
  10ab48:	e1a00003 	mov	r0, r3
  10ab4c:	ebffd909 	bl	100f78 <rt_mutex_release>
}
  10ab50:	e320f000 	nop	{0}
  10ab54:	e24bd004 	sub	sp, fp, #4
  10ab58:	e8bd8800 	pop	{fp, pc}

0010ab5c <sys_mutex_free>:

/** Delete a semaphore
 * @param mutex the mutex to delete
 */
void sys_mutex_free(sys_mutex_t *mutex)
{
  10ab5c:	e92d4800 	push	{fp, lr}
  10ab60:	e28db004 	add	fp, sp, #4
  10ab64:	e24dd008 	sub	sp, sp, #8
  10ab68:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mutex_delete(*mutex);
  10ab6c:	e51b3008 	ldr	r3, [fp, #-8]
  10ab70:	e5933000 	ldr	r3, [r3]
  10ab74:	e1a00003 	mov	r0, r3
  10ab78:	ebffd894 	bl	100dd0 <rt_mutex_delete>
}
  10ab7c:	e320f000 	nop	{0}
  10ab80:	e24bd004 	sub	sp, fp, #4
  10ab84:	e8bd8800 	pop	{fp, pc}

0010ab88 <sys_mutex_valid>:
#ifndef sys_mutex_valid
/** Check if a mutex is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mutex_valid(sys_mutex_t *mutex)
{
  10ab88:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ab8c:	e28db000 	add	fp, sp, #0
  10ab90:	e24dd00c 	sub	sp, sp, #12
  10ab94:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mutex);
  10ab98:	e51b3008 	ldr	r3, [fp, #-8]
  10ab9c:	e5933000 	ldr	r3, [r3]
}
  10aba0:	e1a00003 	mov	r0, r3
  10aba4:	e28bd000 	add	sp, fp, #0
  10aba8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10abac:	e12fff1e 	bx	lr

0010abb0 <sys_mutex_set_invalid>:

#ifndef sys_mutex_set_invalid
/** Set a mutex invalid so that sys_mutex_valid returns 0
 */
void sys_mutex_set_invalid(sys_mutex_t *mutex)
{
  10abb0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10abb4:	e28db000 	add	fp, sp, #0
  10abb8:	e24dd00c 	sub	sp, sp, #12
  10abbc:	e50b0008 	str	r0, [fp, #-8]
    *mutex = RT_NULL;
  10abc0:	e51b3008 	ldr	r3, [fp, #-8]
  10abc4:	e3a02000 	mov	r2, #0
  10abc8:	e5832000 	str	r2, [r3]
}
  10abcc:	e320f000 	nop	{0}
  10abd0:	e28bd000 	add	sp, fp, #0
  10abd4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10abd8:	e12fff1e 	bx	lr

0010abdc <sys_mbox_new>:
 * Create an empty mailbox for maximum "size" elements
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
  10abdc:	e92d4800 	push	{fp, lr}
  10abe0:	e28db004 	add	fp, sp, #4
  10abe4:	e24dd020 	sub	sp, sp, #32
  10abe8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10abec:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    if (size == RT_LWIP_TCPTHREAD_MBOX_SIZE)
  10abf0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10abf4:	e3002101 	movw	r2, #257	; 0x101
  10abf8:	e1530002 	cmp	r3, r2
  10abfc:	1a000006 	bne	10ac1c <sys_mbox_new+0x40>
    {
        printf("set mbox_global\n");
  10ac00:	e30602fc 	movw	r0, #25340	; 0x62fc
  10ac04:	e3400014 	movt	r0, #20
  10ac08:	eb00ce7a 	bl	13e5f8 <puts>
        mbox_global = mbox;
  10ac0c:	e30d3a44 	movw	r3, #55876	; 0xda44
  10ac10:	e3403014 	movt	r3, #20
  10ac14:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10ac18:	e5832000 	str	r2, [r3]
    char tname[RT_NAME_MAX];
    sys_mbox_t tmpmbox;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MBOX_NAME, counter);
  10ac1c:	e30d3a64 	movw	r3, #55908	; 0xda64
  10ac20:	e3403014 	movt	r3, #20
  10ac24:	e1d330b0 	ldrh	r3, [r3]
  10ac28:	e24b0010 	sub	r0, fp, #16
  10ac2c:	e58d3000 	str	r3, [sp]
  10ac30:	e306330c 	movw	r3, #25356	; 0x630c
  10ac34:	e3403014 	movt	r3, #20
  10ac38:	e30622f0 	movw	r2, #25328	; 0x62f0
  10ac3c:	e3402014 	movt	r2, #20
  10ac40:	e3a01008 	mov	r1, #8
  10ac44:	ebffe0fc 	bl	10303c <rt_snprintf>
    counter ++;
  10ac48:	e30d3a64 	movw	r3, #55908	; 0xda64
  10ac4c:	e3403014 	movt	r3, #20
  10ac50:	e1d330b0 	ldrh	r3, [r3]
  10ac54:	e2833001 	add	r3, r3, #1
  10ac58:	e6ff2073 	uxth	r2, r3
  10ac5c:	e30d3a64 	movw	r3, #55908	; 0xda64
  10ac60:	e3403014 	movt	r3, #20
  10ac64:	e1c320b0 	strh	r2, [r3]

    tmpmbox = rt_mb_create(tname, size, RT_IPC_FLAG_FIFO);
  10ac68:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10ac6c:	e24b3010 	sub	r3, fp, #16
  10ac70:	e3a02000 	mov	r2, #0
  10ac74:	e1a00003 	mov	r0, r3
  10ac78:	ebffd9ab 	bl	10132c <rt_mb_create>
  10ac7c:	e50b0008 	str	r0, [fp, #-8]
    if (tmpmbox != RT_NULL)
  10ac80:	e51b3008 	ldr	r3, [fp, #-8]
  10ac84:	e3530000 	cmp	r3, #0
  10ac88:	0a000004 	beq	10aca0 <sys_mbox_new+0xc4>
    {
        *mbox = tmpmbox;
  10ac8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ac90:	e51b2008 	ldr	r2, [fp, #-8]
  10ac94:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10ac98:	e3a03000 	mov	r3, #0
  10ac9c:	ea000000 	b	10aca4 <sys_mbox_new+0xc8>
    }

    return ERR_MEM;
  10aca0:	e3e03000 	mvn	r3, #0
}
  10aca4:	e1a00003 	mov	r0, r3
  10aca8:	e24bd004 	sub	sp, fp, #4
  10acac:	e8bd8800 	pop	{fp, pc}

0010acb0 <sys_mbox_free>:

/*
 * Deallocate a mailbox
 */
void sys_mbox_free(sys_mbox_t *mbox)
{
  10acb0:	e92d4800 	push	{fp, lr}
  10acb4:	e28db004 	add	fp, sp, #4
  10acb8:	e24dd008 	sub	sp, sp, #8
  10acbc:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mb_delete(*mbox);
  10acc0:	e51b3008 	ldr	r3, [fp, #-8]
  10acc4:	e5933000 	ldr	r3, [r3]
  10acc8:	e1a00003 	mov	r0, r3
  10accc:	ebffd9e1 	bl	101458 <rt_mb_delete>

    return;
  10acd0:	e320f000 	nop	{0}
}
  10acd4:	e24bd004 	sub	sp, fp, #4
  10acd8:	e8bd8800 	pop	{fp, pc}

0010acdc <post_msg>:

rt_err_t post_msg(sys_mbox_t *mbox, void **msg)
{
  10acdc:	e92d4800 	push	{fp, lr}
  10ace0:	e28db004 	add	fp, sp, #4
  10ace4:	e24dd008 	sub	sp, sp, #8
  10ace8:	e50b0008 	str	r0, [fp, #-8]
  10acec:	e50b100c 	str	r1, [fp, #-12]
    if (mbox == mbox_global)
  10acf0:	e30d3a44 	movw	r3, #55876	; 0xda44
  10acf4:	e3403014 	movt	r3, #20
  10acf8:	e5933000 	ldr	r3, [r3]
  10acfc:	e51b2008 	ldr	r2, [fp, #-8]
  10ad00:	e1520003 	cmp	r2, r3
  10ad04:	1a000010 	bne	10ad4c <post_msg+0x70>
    {
        if (((struct tcpip_msg*)msg)->type == TCPIP_MSG_INPKT)
  10ad08:	e51b300c 	ldr	r3, [fp, #-12]
  10ad0c:	e5933000 	ldr	r3, [r3]
  10ad10:	e3530002 	cmp	r3, #2
  10ad14:	1a00000c 	bne	10ad4c <post_msg+0x70>
        {
            while (buffer_enqueue(msg) == -1)
  10ad18:	ea000004 	b	10ad30 <post_msg+0x54>
            {
                rt_mb_send(*mbox, INPUT_NOTIFICATION);
  10ad1c:	e51b3008 	ldr	r3, [fp, #-8]
  10ad20:	e5933000 	ldr	r3, [r3]
  10ad24:	e3a01001 	mov	r1, #1
  10ad28:	e1a00003 	mov	r0, r3
  10ad2c:	ebffda34 	bl	101604 <rt_mb_send>
            while (buffer_enqueue(msg) == -1)
  10ad30:	e51b000c 	ldr	r0, [fp, #-12]
  10ad34:	ebfffe0a 	bl	10a564 <buffer_enqueue>
  10ad38:	e1a03000 	mov	r3, r0
  10ad3c:	e3730001 	cmn	r3, #1
  10ad40:	0afffff5 	beq	10ad1c <post_msg+0x40>
            }

            return ERR_OK;
  10ad44:	e3a03000 	mov	r3, #0
  10ad48:	ea000006 	b	10ad68 <post_msg+0x8c>
        } 
    }

    return rt_mb_send_wait(*mbox, (rt_ubase_t)msg, RT_WAITING_FOREVER);
  10ad4c:	e51b3008 	ldr	r3, [fp, #-8]
  10ad50:	e5933000 	ldr	r3, [r3]
  10ad54:	e51b100c 	ldr	r1, [fp, #-12]
  10ad58:	e3e02000 	mvn	r2, #0
  10ad5c:	e1a00003 	mov	r0, r3
  10ad60:	ebffda08 	bl	101588 <rt_mb_send_wait>
  10ad64:	e1a03000 	mov	r3, r0
}
  10ad68:	e1a00003 	mov	r0, r3
  10ad6c:	e24bd004 	sub	sp, fp, #4
  10ad70:	e8bd8800 	pop	{fp, pc}

0010ad74 <fetch_msg>:

rt_err_t fetch_msg(sys_mbox_t *mbox, void **msg, u32_t t)
{
  10ad74:	e92d4800 	push	{fp, lr}
  10ad78:	e28db004 	add	fp, sp, #4
  10ad7c:	e24dd018 	sub	sp, sp, #24
  10ad80:	e50b0010 	str	r0, [fp, #-16]
  10ad84:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10ad88:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    if (mbox == mbox_global)
  10ad8c:	e30d3a44 	movw	r3, #55876	; 0xda44
  10ad90:	e3403014 	movt	r3, #20
  10ad94:	e5933000 	ldr	r3, [r3]
  10ad98:	e51b2010 	ldr	r2, [fp, #-16]
  10ad9c:	e1520003 	cmp	r2, r3
  10ada0:	1a000016 	bne	10ae00 <fetch_msg+0x8c>
    {
        rt_err_t ret;
        do
        {
            *msg = buffer_dequeue();
  10ada4:	ebfffe13 	bl	10a5f8 <buffer_dequeue>
  10ada8:	e1a02000 	mov	r2, r0
  10adac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10adb0:	e5832000 	str	r2, [r3]
            if (*msg)
  10adb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10adb8:	e5933000 	ldr	r3, [r3]
  10adbc:	e3530000 	cmp	r3, #0
  10adc0:	0a000001 	beq	10adcc <fetch_msg+0x58>
            {
                return RT_EOK;
  10adc4:	e3a03000 	mov	r3, #0
  10adc8:	ea000013 	b	10ae1c <fetch_msg+0xa8>
            } 
            ret = rt_mb_recv(*mbox, (rt_ubase_t *)msg, t);
  10adcc:	e51b3010 	ldr	r3, [fp, #-16]
  10add0:	e5933000 	ldr	r3, [r3]
  10add4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10add8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10addc:	e1a00003 	mov	r0, r3
  10ade0:	ebffda25 	bl	10167c <rt_mb_recv>
  10ade4:	e50b0008 	str	r0, [fp, #-8]
        } while (*msg == (void*)INPUT_NOTIFICATION);
  10ade8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10adec:	e5933000 	ldr	r3, [r3]
  10adf0:	e3530001 	cmp	r3, #1
  10adf4:	0affffea 	beq	10ada4 <fetch_msg+0x30>

        return ret;
  10adf8:	e51b3008 	ldr	r3, [fp, #-8]
  10adfc:	ea000006 	b	10ae1c <fetch_msg+0xa8>
    }
    else 
    {
        return rt_mb_recv(*mbox, (rt_ubase_t *)msg, t); 
  10ae00:	e51b3010 	ldr	r3, [fp, #-16]
  10ae04:	e5933000 	ldr	r3, [r3]
  10ae08:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10ae0c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10ae10:	e1a00003 	mov	r0, r3
  10ae14:	ebffda18 	bl	10167c <rt_mb_recv>
  10ae18:	e1a03000 	mov	r3, r0
    }
}
  10ae1c:	e1a00003 	mov	r0, r3
  10ae20:	e24bd004 	sub	sp, fp, #4
  10ae24:	e8bd8800 	pop	{fp, pc}

0010ae28 <sys_mbox_post>:
 * -> blocks if full, only used from tasks not from ISR
 * @param mbox mbox to posts the message
 * @param msg message to post (ATTENTION: can be NULL)
 */
void sys_mbox_post(sys_mbox_t *mbox, void *msg)
{
  10ae28:	e92d4800 	push	{fp, lr}
  10ae2c:	e28db004 	add	fp, sp, #4
  10ae30:	e24dd008 	sub	sp, sp, #8
  10ae34:	e50b0008 	str	r0, [fp, #-8]
  10ae38:	e50b100c 	str	r1, [fp, #-12]
    RT_DEBUG_NOT_IN_INTERRUPT;

    // rt_mb_send_wait(*mbox, (rt_ubase_t)msg, RT_WAITING_FOREVER);
    post_msg(mbox, msg);
  10ae3c:	e51b100c 	ldr	r1, [fp, #-12]
  10ae40:	e51b0008 	ldr	r0, [fp, #-8]
  10ae44:	ebffffa4 	bl	10acdc <post_msg>

    return;
  10ae48:	e320f000 	nop	{0}
}
  10ae4c:	e24bd004 	sub	sp, fp, #4
  10ae50:	e8bd8800 	pop	{fp, pc}

0010ae54 <sys_mbox_trypost>:
 *
 * @return return ERR_OK if the "msg" is posted, ERR_MEM if the mailbox is full
 */

err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  10ae54:	e92d4800 	push	{fp, lr}
  10ae58:	e28db004 	add	fp, sp, #4
  10ae5c:	e24dd008 	sub	sp, sp, #8
  10ae60:	e50b0008 	str	r0, [fp, #-8]
  10ae64:	e50b100c 	str	r1, [fp, #-12]
    return post_msg(mbox, msg);
  10ae68:	e51b100c 	ldr	r1, [fp, #-12]
  10ae6c:	e51b0008 	ldr	r0, [fp, #-8]
  10ae70:	ebffff99 	bl	10acdc <post_msg>
  10ae74:	e1a03000 	mov	r3, r0
  10ae78:	e6af3073 	sxtb	r3, r3
}
  10ae7c:	e1a00003 	mov	r0, r3
  10ae80:	e24bd004 	sub	sp, fp, #4
  10ae84:	e8bd8800 	pop	{fp, pc}

0010ae88 <sys_arch_mbox_fetch>:
 * @return time (in milliseconds) waited for a message, may be 0 if not waited
           or SYS_ARCH_TIMEOUT on timeout
 *         The returned time has to be accurate to prevent timer jitter!
 */
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
  10ae88:	e92d4800 	push	{fp, lr}
  10ae8c:	e28db004 	add	fp, sp, #4
  10ae90:	e24dd020 	sub	sp, sp, #32
  10ae94:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10ae98:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10ae9c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10aea0:	ebffdbee 	bl	101e60 <rt_tick_get>
  10aea4:	e50b000c 	str	r0, [fp, #-12]

    if(timeout == 0)
  10aea8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10aeac:	e3530000 	cmp	r3, #0
  10aeb0:	1a000002 	bne	10aec0 <sys_arch_mbox_fetch+0x38>
        t = RT_WAITING_FOREVER;
  10aeb4:	e3e03000 	mvn	r3, #0
  10aeb8:	e50b3008 	str	r3, [fp, #-8]
  10aebc:	ea000007 	b	10aee0 <sys_arch_mbox_fetch+0x58>
    else
    {
        /* convirt msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10aec0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10aec4:	e3530000 	cmp	r3, #0
  10aec8:	1a000002 	bne	10aed8 <sys_arch_mbox_fetch+0x50>
            t = 1;
  10aecc:	e3a03001 	mov	r3, #1
  10aed0:	e50b3008 	str	r3, [fp, #-8]
  10aed4:	ea000001 	b	10aee0 <sys_arch_mbox_fetch+0x58>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10aed8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10aedc:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = fetch_msg(mbox, msg, t);
  10aee0:	e51b3008 	ldr	r3, [fp, #-8]
  10aee4:	e1a02003 	mov	r2, r3
  10aee8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10aeec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10aef0:	ebffff9f 	bl	10ad74 <fetch_msg>
  10aef4:	e50b0010 	str	r0, [fp, #-16]

    if(ret == -RT_ETIMEOUT)
  10aef8:	e51b3010 	ldr	r3, [fp, #-16]
  10aefc:	e3730002 	cmn	r3, #2
  10af00:	1a000001 	bne	10af0c <sys_arch_mbox_fetch+0x84>
        return SYS_ARCH_TIMEOUT;
  10af04:	e3e03000 	mvn	r3, #0
  10af08:	ea000014 	b	10af60 <sys_arch_mbox_fetch+0xd8>
    else
    {
        LWIP_ASSERT("rt_mb_recv returned with error!", ret == RT_EOK);
  10af0c:	e51b3010 	ldr	r3, [fp, #-16]
  10af10:	e3530000 	cmp	r3, #0
  10af14:	0a000006 	beq	10af34 <sys_arch_mbox_fetch+0xac>
  10af18:	e3060314 	movw	r0, #25364	; 0x6314
  10af1c:	e3400014 	movt	r0, #20
  10af20:	ebffe07b 	bl	103114 <rt_kprintf>
  10af24:	e3a01f86 	mov	r1, #536	; 0x218
  10af28:	e30602a8 	movw	r0, #25256	; 0x62a8
  10af2c:	e3400014 	movt	r0, #20
  10af30:	eb00006e 	bl	10b0f0 <sys_arch_assert>
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10af34:	ebffdbc9 	bl	101e60 <rt_tick_get>
  10af38:	e1a02000 	mov	r2, r0
  10af3c:	e51b300c 	ldr	r3, [fp, #-12]
  10af40:	e0423003 	sub	r3, r2, r3
  10af44:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10af48:	e51b300c 	ldr	r3, [fp, #-12]
  10af4c:	e3530000 	cmp	r3, #0
  10af50:	1a000001 	bne	10af5c <sys_arch_mbox_fetch+0xd4>
        tick = 1;
  10af54:	e3a03001 	mov	r3, #1
  10af58:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10af5c:	e51b300c 	ldr	r3, [fp, #-12]
}
  10af60:	e1a00003 	mov	r0, r3
  10af64:	e24bd004 	sub	sp, fp, #4
  10af68:	e8bd8800 	pop	{fp, pc}

0010af6c <sys_arch_mbox_tryfetch>:
 * @param timeout maximum time (in milliseconds) to wait for a message
 * @return 0 (milliseconds) if a message has been received
 *         or SYS_MBOX_EMPTY if the mailbox is empty
 */
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
  10af6c:	e92d4800 	push	{fp, lr}
  10af70:	e28db004 	add	fp, sp, #4
  10af74:	e24dd010 	sub	sp, sp, #16
  10af78:	e50b0010 	str	r0, [fp, #-16]
  10af7c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;

    ret = fetch_msg(mbox, msg, 0);
  10af80:	e3a02000 	mov	r2, #0
  10af84:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10af88:	e51b0010 	ldr	r0, [fp, #-16]
  10af8c:	ebffff78 	bl	10ad74 <fetch_msg>
  10af90:	e50b0008 	str	r0, [fp, #-8]
       
    if(ret == -RT_ETIMEOUT)
  10af94:	e51b3008 	ldr	r3, [fp, #-8]
  10af98:	e3730002 	cmn	r3, #2
  10af9c:	1a000001 	bne	10afa8 <sys_arch_mbox_tryfetch+0x3c>
        return SYS_ARCH_TIMEOUT;
  10afa0:	e3e03000 	mvn	r3, #0
  10afa4:	ea000005 	b	10afc0 <sys_arch_mbox_tryfetch+0x54>
    else
    {
        if (ret == RT_EOK)
  10afa8:	e51b3008 	ldr	r3, [fp, #-8]
  10afac:	e3530000 	cmp	r3, #0
  10afb0:	1a000001 	bne	10afbc <sys_arch_mbox_tryfetch+0x50>
            ret = 1;
  10afb4:	e3a03001 	mov	r3, #1
  10afb8:	e50b3008 	str	r3, [fp, #-8]
    }

    return ret;
  10afbc:	e51b3008 	ldr	r3, [fp, #-8]
}
  10afc0:	e1a00003 	mov	r0, r3
  10afc4:	e24bd004 	sub	sp, fp, #4
  10afc8:	e8bd8800 	pop	{fp, pc}

0010afcc <sys_mbox_valid>:
#ifndef sys_mbox_valid
/** Check if an mbox is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mbox_valid(sys_mbox_t *mbox)
{
  10afcc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10afd0:	e28db000 	add	fp, sp, #0
  10afd4:	e24dd00c 	sub	sp, sp, #12
  10afd8:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mbox);
  10afdc:	e51b3008 	ldr	r3, [fp, #-8]
  10afe0:	e5933000 	ldr	r3, [r3]
}
  10afe4:	e1a00003 	mov	r0, r3
  10afe8:	e28bd000 	add	sp, fp, #0
  10afec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10aff0:	e12fff1e 	bx	lr

0010aff4 <sys_mbox_set_invalid>:

#ifndef sys_mbox_set_invalid
/** Set an mbox invalid so that sys_mbox_valid returns 0
 */
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
  10aff4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10aff8:	e28db000 	add	fp, sp, #0
  10affc:	e24dd00c 	sub	sp, sp, #12
  10b000:	e50b0008 	str	r0, [fp, #-8]
    *mbox = RT_NULL;
  10b004:	e51b3008 	ldr	r3, [fp, #-8]
  10b008:	e3a02000 	mov	r2, #0
  10b00c:	e5832000 	str	r2, [r3]
}
  10b010:	e320f000 	nop	{0}
  10b014:	e28bd000 	add	sp, fp, #0
  10b018:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b01c:	e12fff1e 	bx	lr

0010b020 <sys_thread_new>:
sys_thread_t sys_thread_new(const char    *name,
                            lwip_thread_fn thread,
                            void          *arg,
                            int            stacksize,
                            int            prio)
{
  10b020:	e92d4800 	push	{fp, lr}
  10b024:	e28db004 	add	fp, sp, #4
  10b028:	e24dd020 	sub	sp, sp, #32
  10b02c:	e50b0010 	str	r0, [fp, #-16]
  10b030:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10b034:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10b038:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    rt_thread_t t;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* create thread */
    t = rt_thread_create(name, thread, arg, stacksize, prio, 20);
  10b03c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10b040:	e59b3004 	ldr	r3, [fp, #4]
  10b044:	e6ef3073 	uxtb	r3, r3
  10b048:	e3a02014 	mov	r2, #20
  10b04c:	e58d2004 	str	r2, [sp, #4]
  10b050:	e58d3000 	str	r3, [sp]
  10b054:	e1a03001 	mov	r3, r1
  10b058:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10b05c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10b060:	e51b0010 	ldr	r0, [fp, #-16]
  10b064:	ebffdc22 	bl	1020f4 <rt_thread_create>
  10b068:	e50b0008 	str	r0, [fp, #-8]
    
    RT_ASSERT(t != RT_NULL);
  10b06c:	e51b3008 	ldr	r3, [fp, #-8]
  10b070:	e3530000 	cmp	r3, #0
  10b074:	1a000005 	bne	10b090 <sys_thread_new+0x70>
  10b078:	e3002265 	movw	r2, #613	; 0x265
  10b07c:	e3061360 	movw	r1, #25440	; 0x6360
  10b080:	e3401014 	movt	r1, #20
  10b084:	e3060334 	movw	r0, #25396	; 0x6334
  10b088:	e3400014 	movt	r0, #20
  10b08c:	ebffe141 	bl	103598 <rt_assert_handler>

    /* startup thread */
    rt_thread_startup(t);
  10b090:	e51b0008 	ldr	r0, [fp, #-8]
  10b094:	ebffdc4b 	bl	1021c8 <rt_thread_startup>

    return t;
  10b098:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b09c:	e1a00003 	mov	r0, r3
  10b0a0:	e24bd004 	sub	sp, fp, #4
  10b0a4:	e8bd8800 	pop	{fp, pc}

0010b0a8 <sys_arch_protect>:

sys_prot_t sys_arch_protect(void)
{
  10b0a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b0ac:	e28db000 	add	fp, sp, #0
  10b0b0:	e24dd00c 	sub	sp, sp, #12
    //rt_base_t level;
    rt_base_t level = 0;
  10b0b4:	e3a03000 	mov	r3, #0
  10b0b8:	e50b3008 	str	r3, [fp, #-8]

    /* disable interrupt */
    //level = rt_hw_interrupt_disable();

    return level;
  10b0bc:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b0c0:	e1a00003 	mov	r0, r3
  10b0c4:	e28bd000 	add	sp, fp, #0
  10b0c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b0cc:	e12fff1e 	bx	lr

0010b0d0 <sys_arch_unprotect>:

void sys_arch_unprotect(sys_prot_t pval)
{
  10b0d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b0d4:	e28db000 	add	fp, sp, #0
  10b0d8:	e24dd00c 	sub	sp, sp, #12
  10b0dc:	e50b0008 	str	r0, [fp, #-8]
    /* enable interrupt */
    //rt_hw_interrupt_enable(pval);

    return;
  10b0e0:	e320f000 	nop	{0}
}
  10b0e4:	e28bd000 	add	sp, fp, #0
  10b0e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b0ec:	e12fff1e 	bx	lr

0010b0f0 <sys_arch_assert>:

void sys_arch_assert(const char *file, int line)
{
  10b0f0:	e92d4800 	push	{fp, lr}
  10b0f4:	e28db004 	add	fp, sp, #4
  10b0f8:	e24dd008 	sub	sp, sp, #8
  10b0fc:	e50b0008 	str	r0, [fp, #-8]
  10b100:	e50b100c 	str	r1, [fp, #-12]
    rt_kprintf("\nAssertion: %d in %s\n", line, file);
  10b104:	e51b2008 	ldr	r2, [fp, #-8]
  10b108:	e51b100c 	ldr	r1, [fp, #-12]
  10b10c:	e3060344 	movw	r0, #25412	; 0x6344
  10b110:	e3400014 	movt	r0, #20
  10b114:	ebffdffe 	bl	103114 <rt_kprintf>
    RT_ASSERT(0);
  10b118:	e3002283 	movw	r2, #643	; 0x283
  10b11c:	e3061370 	movw	r1, #25456	; 0x6370
  10b120:	e3401014 	movt	r1, #20
  10b124:	e306035c 	movw	r0, #25436	; 0x635c
  10b128:	e3400014 	movt	r0, #20
  10b12c:	ebffe119 	bl	103598 <rt_assert_handler>
}
  10b130:	e320f000 	nop	{0}
  10b134:	e24bd004 	sub	sp, fp, #4
  10b138:	e8bd8800 	pop	{fp, pc}

0010b13c <sys_jiffies>:

u32_t sys_jiffies(void)
{
  10b13c:	e92d4800 	push	{fp, lr}
  10b140:	e28db004 	add	fp, sp, #4
    return rt_tick_get();
  10b144:	ebffdb45 	bl	101e60 <rt_tick_get>
  10b148:	e1a03000 	mov	r3, r0
}
  10b14c:	e1a00003 	mov	r0, r3
  10b150:	e8bd8800 	pop	{fp, pc}

0010b154 <sys_now>:

u32_t sys_now(void)
{
  10b154:	e92d4800 	push	{fp, lr}
  10b158:	e28db004 	add	fp, sp, #4
    return rt_tick_get() * (1000 / RT_TICK_PER_SECOND);
  10b15c:	ebffdb3f 	bl	101e60 <rt_tick_get>
  10b160:	e1a03000 	mov	r3, r0
}
  10b164:	e1a00003 	mov	r0, r3
  10b168:	e8bd8800 	pop	{fp, pc}

0010b16c <mem_init>:


RT_WEAK
void mem_init(void)
{
  10b16c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b170:	e28db000 	add	fp, sp, #0
}
  10b174:	e320f000 	nop	{0}
  10b178:	e28bd000 	add	sp, fp, #0
  10b17c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b180:	e12fff1e 	bx	lr

0010b184 <mem_calloc>:

void *mem_calloc(mem_size_t count, mem_size_t size)
{
  10b184:	e92d4800 	push	{fp, lr}
  10b188:	e28db004 	add	fp, sp, #4
  10b18c:	e24dd008 	sub	sp, sp, #8
  10b190:	e1a03000 	mov	r3, r0
  10b194:	e1a02001 	mov	r2, r1
  10b198:	e14b30b6 	strh	r3, [fp, #-6]
  10b19c:	e1a03002 	mov	r3, r2
  10b1a0:	e14b30b8 	strh	r3, [fp, #-8]
    return rt_calloc(count, size);
  10b1a4:	e15b30b6 	ldrh	r3, [fp, #-6]
  10b1a8:	e15b20b8 	ldrh	r2, [fp, #-8]
  10b1ac:	e1a01002 	mov	r1, r2
  10b1b0:	e1a00003 	mov	r0, r3
  10b1b4:	ebffdf94 	bl	10300c <rt_calloc>
  10b1b8:	e1a03000 	mov	r3, r0
}
  10b1bc:	e1a00003 	mov	r0, r3
  10b1c0:	e24bd004 	sub	sp, fp, #4
  10b1c4:	e8bd8800 	pop	{fp, pc}

0010b1c8 <mem_trim>:

void *mem_trim(void *mem, mem_size_t size)
{
  10b1c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b1cc:	e28db000 	add	fp, sp, #0
  10b1d0:	e24dd00c 	sub	sp, sp, #12
  10b1d4:	e50b0008 	str	r0, [fp, #-8]
  10b1d8:	e1a03001 	mov	r3, r1
  10b1dc:	e14b30ba 	strh	r3, [fp, #-10]
    /* not support trim yet */
    return mem;
  10b1e0:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b1e4:	e1a00003 	mov	r0, r3
  10b1e8:	e28bd000 	add	sp, fp, #0
  10b1ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b1f0:	e12fff1e 	bx	lr

0010b1f4 <mem_malloc>:

void *mem_malloc(mem_size_t size)
{
  10b1f4:	e92d4800 	push	{fp, lr}
  10b1f8:	e28db004 	add	fp, sp, #4
  10b1fc:	e24dd008 	sub	sp, sp, #8
  10b200:	e1a03000 	mov	r3, r0
  10b204:	e14b30b6 	strh	r3, [fp, #-6]
    return rt_malloc(size);
  10b208:	e15b30b6 	ldrh	r3, [fp, #-6]
  10b20c:	e1a00003 	mov	r0, r3
  10b210:	ebffdf5f 	bl	102f94 <rt_malloc>
  10b214:	e1a03000 	mov	r3, r0
}
  10b218:	e1a00003 	mov	r0, r3
  10b21c:	e24bd004 	sub	sp, fp, #4
  10b220:	e8bd8800 	pop	{fp, pc}

0010b224 <mem_free>:

void  mem_free(void *mem)
{
  10b224:	e92d4800 	push	{fp, lr}
  10b228:	e28db004 	add	fp, sp, #4
  10b22c:	e24dd008 	sub	sp, sp, #8
  10b230:	e50b0008 	str	r0, [fp, #-8]
    rt_free(mem);
  10b234:	e51b0008 	ldr	r0, [fp, #-8]
  10b238:	ebffdf5f 	bl	102fbc <rt_free>
}
  10b23c:	e320f000 	nop	{0}
  10b240:	e24bd004 	sub	sp, fp, #4
  10b244:	e8bd8800 	pop	{fp, pc}

0010b248 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
  10b248:	e92d4800 	push	{fp, lr}
  10b24c:	e28db004 	add	fp, sp, #4
  10b250:	e24dd010 	sub	sp, sp, #16
  10b254:	e50b0010 	str	r0, [fp, #-16]
  10b258:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
  10b25c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b260:	e5933000 	ldr	r3, [r3]
  10b264:	e2833010 	add	r3, r3, #16
  10b268:	e1a02003 	mov	r2, r3
  10b26c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10b270:	e51b0010 	ldr	r0, [fp, #-16]
  10b274:	eb002c18 	bl	1162dc <tcpip_send_msg_wait_sem>
  10b278:	e1a03000 	mov	r3, r0
  10b27c:	e54b3005 	strb	r3, [fp, #-5]
  if (err == ERR_OK) {
  10b280:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b284:	e3530000 	cmp	r3, #0
  10b288:	1a000002 	bne	10b298 <netconn_apimsg+0x50>
    return apimsg->err;
  10b28c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b290:	e1d330d4 	ldrsb	r3, [r3, #4]
  10b294:	ea000000 	b	10b29c <netconn_apimsg+0x54>
  }
  return err;
  10b298:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b29c:	e1a00003 	mov	r0, r3
  10b2a0:	e24bd004 	sub	sp, fp, #4
  10b2a4:	e8bd8800 	pop	{fp, pc}

0010b2a8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
  10b2a8:	e92d4800 	push	{fp, lr}
  10b2ac:	e28db004 	add	fp, sp, #4
  10b2b0:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b2b4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b2b8:	e1a03001 	mov	r3, r1
  10b2bc:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10b2c0:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
  10b2c4:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  10b2c8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b2cc:	eb00087a 	bl	10d4bc <netconn_alloc>
  10b2d0:	e50b0008 	str	r0, [fp, #-8]
  if (conn != NULL) {
  10b2d4:	e51b3008 	ldr	r3, [fp, #-8]
  10b2d8:	e3530000 	cmp	r3, #0
  10b2dc:	0a00004f 	beq	10b420 <netconn_new_with_proto_and_callback+0x178>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
  10b2e0:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10b2e4:	e54b301c 	strb	r3, [fp, #-28]	; 0xffffffe4
    API_MSG_VAR_REF(msg).conn = conn;
  10b2e8:	e51b3008 	ldr	r3, [fp, #-8]
  10b2ec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
  10b2f0:	e24b3024 	sub	r3, fp, #36	; 0x24
  10b2f4:	e1a01003 	mov	r1, r3
  10b2f8:	e30d0430 	movw	r0, #54320	; 0xd430
  10b2fc:	e3400010 	movt	r0, #16
  10b300:	ebffffd0 	bl	10b248 <netconn_apimsg>
  10b304:	e1a03000 	mov	r3, r0
  10b308:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10b30c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10b310:	e3530000 	cmp	r3, #0
  10b314:	0a000041 	beq	10b420 <netconn_new_with_proto_and_callback+0x178>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
  10b318:	e51b3008 	ldr	r3, [fp, #-8]
  10b31c:	e5933008 	ldr	r3, [r3, #8]
  10b320:	e3530000 	cmp	r3, #0
  10b324:	0a000006 	beq	10b344 <netconn_new_with_proto_and_callback+0x9c>
  10b328:	e3060380 	movw	r0, #25472	; 0x6380
  10b32c:	e3400014 	movt	r0, #20
  10b330:	ebffdf77 	bl	103114 <rt_kprintf>
  10b334:	e3a01089 	mov	r1, #137	; 0x89
  10b338:	e30603a4 	movw	r0, #25508	; 0x63a4
  10b33c:	e3400014 	movt	r0, #20
  10b340:	ebffff6a 	bl	10b0f0 <sys_arch_assert>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
  10b344:	e51b3008 	ldr	r3, [fp, #-8]
  10b348:	e2833014 	add	r3, r3, #20
  10b34c:	e1a00003 	mov	r0, r3
  10b350:	ebffff1d 	bl	10afcc <sys_mbox_valid>
  10b354:	e1a03000 	mov	r3, r0
  10b358:	e3530000 	cmp	r3, #0
  10b35c:	1a000006 	bne	10b37c <netconn_new_with_proto_and_callback+0xd4>
  10b360:	e30603d4 	movw	r0, #25556	; 0x63d4
  10b364:	e3400014 	movt	r0, #20
  10b368:	ebffdf69 	bl	103114 <rt_kprintf>
  10b36c:	e3a0108a 	mov	r1, #138	; 0x8a
  10b370:	e30603a4 	movw	r0, #25508	; 0x63a4
  10b374:	e3400014 	movt	r0, #20
  10b378:	ebffff5c 	bl	10b0f0 <sys_arch_assert>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
  10b37c:	e51b3008 	ldr	r3, [fp, #-8]
  10b380:	e2833018 	add	r3, r3, #24
  10b384:	e1a00003 	mov	r0, r3
  10b388:	ebffff0f 	bl	10afcc <sys_mbox_valid>
  10b38c:	e1a03000 	mov	r3, r0
  10b390:	e3530000 	cmp	r3, #0
  10b394:	0a000006 	beq	10b3b4 <netconn_new_with_proto_and_callback+0x10c>
  10b398:	e30603ec 	movw	r0, #25580	; 0x63ec
  10b39c:	e3400014 	movt	r0, #20
  10b3a0:	ebffdf5b 	bl	103114 <rt_kprintf>
  10b3a4:	e3a0108c 	mov	r1, #140	; 0x8c
  10b3a8:	e30603a4 	movw	r0, #25508	; 0x63a4
  10b3ac:	e3400014 	movt	r0, #20
  10b3b0:	ebffff4e 	bl	10b0f0 <sys_arch_assert>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
  10b3b4:	e51b3008 	ldr	r3, [fp, #-8]
  10b3b8:	e2833010 	add	r3, r3, #16
  10b3bc:	e1a00003 	mov	r0, r3
  10b3c0:	ebfffd91 	bl	10aa0c <sys_sem_valid>
  10b3c4:	e1a03000 	mov	r3, r0
  10b3c8:	e3530000 	cmp	r3, #0
  10b3cc:	1a000006 	bne	10b3ec <netconn_new_with_proto_and_callback+0x144>
  10b3d0:	e3060410 	movw	r0, #25616	; 0x6410
  10b3d4:	e3400014 	movt	r0, #20
  10b3d8:	ebffdf4d 	bl	103114 <rt_kprintf>
  10b3dc:	e3a0108f 	mov	r1, #143	; 0x8f
  10b3e0:	e30603a4 	movw	r0, #25508	; 0x63a4
  10b3e4:	e3400014 	movt	r0, #20
  10b3e8:	ebffff40 	bl	10b0f0 <sys_arch_assert>
      sys_sem_free(&conn->op_completed);
  10b3ec:	e51b3008 	ldr	r3, [fp, #-8]
  10b3f0:	e2833010 	add	r3, r3, #16
  10b3f4:	e1a00003 	mov	r0, r3
  10b3f8:	ebfffd3a 	bl	10a8e8 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
  10b3fc:	e51b3008 	ldr	r3, [fp, #-8]
  10b400:	e2833014 	add	r3, r3, #20
  10b404:	e1a00003 	mov	r0, r3
  10b408:	ebfffe28 	bl	10acb0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
  10b40c:	e51b1008 	ldr	r1, [fp, #-8]
  10b410:	e3a00008 	mov	r0, #8
  10b414:	eb00379a 	bl	119284 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
  10b418:	e3a03000 	mov	r3, #0
  10b41c:	ea000000 	b	10b424 <netconn_new_with_proto_and_callback+0x17c>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
  10b420:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b424:	e1a00003 	mov	r0, r3
  10b428:	e24bd004 	sub	sp, fp, #4
  10b42c:	e8bd8800 	pop	{fp, pc}

0010b430 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
  10b430:	e92d4800 	push	{fp, lr}
  10b434:	e28db004 	add	fp, sp, #4
  10b438:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b43c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
  10b440:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b444:	e3530000 	cmp	r3, #0
  10b448:	1a000001 	bne	10b454 <netconn_delete+0x24>
    return ERR_OK;
  10b44c:	e3a03000 	mov	r3, #0
  10b450:	ea000013 	b	10b4a4 <netconn_delete+0x74>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b454:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b458:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10b45c:	ebffff3c 	bl	10b154 <sys_now>
  10b460:	e1a03000 	mov	r3, r0
  10b464:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
  10b468:	e24b3020 	sub	r3, fp, #32
  10b46c:	e1a01003 	mov	r1, r3
  10b470:	e30d0e58 	movw	r0, #56920	; 0xde58
  10b474:	e3400010 	movt	r0, #16
  10b478:	ebffff72 	bl	10b248 <netconn_apimsg>
  10b47c:	e1a03000 	mov	r3, r0
  10b480:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
  10b484:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b488:	e3530000 	cmp	r3, #0
  10b48c:	0a000001 	beq	10b498 <netconn_delete+0x68>
    return err;
  10b490:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b494:	ea000002 	b	10b4a4 <netconn_delete+0x74>
  }

  netconn_free(conn);
  10b498:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b49c:	eb00087a 	bl	10d68c <netconn_free>

  return ERR_OK;
  10b4a0:	e3a03000 	mov	r3, #0
}
  10b4a4:	e1a00003 	mov	r0, r3
  10b4a8:	e24bd004 	sub	sp, fp, #4
  10b4ac:	e8bd8800 	pop	{fp, pc}

0010b4b0 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
  10b4b0:	e92d4800 	push	{fp, lr}
  10b4b4:	e28db004 	add	fp, sp, #4
  10b4b8:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b4bc:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b4c0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b4c4:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10b4c8:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
  10b4cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b4d0:	e3530000 	cmp	r3, #0
  10b4d4:	1a000008 	bne	10b4fc <netconn_getaddr+0x4c>
  10b4d8:	e306042c 	movw	r0, #25644	; 0x642c
  10b4dc:	e3400014 	movt	r0, #20
  10b4e0:	ebffdf0b 	bl	103114 <rt_kprintf>
  10b4e4:	e3a010d9 	mov	r1, #217	; 0xd9
  10b4e8:	e30603a4 	movw	r0, #25508	; 0x63a4
  10b4ec:	e3400014 	movt	r0, #20
  10b4f0:	ebfffefe 	bl	10b0f0 <sys_arch_assert>
  10b4f4:	e3e0300f 	mvn	r3, #15
  10b4f8:	ea000027 	b	10b59c <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
  10b4fc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b500:	e3530000 	cmp	r3, #0
  10b504:	1a000008 	bne	10b52c <netconn_getaddr+0x7c>
  10b508:	e306044c 	movw	r0, #25676	; 0x644c
  10b50c:	e3400014 	movt	r0, #20
  10b510:	ebffdeff 	bl	103114 <rt_kprintf>
  10b514:	e3a010da 	mov	r1, #218	; 0xda
  10b518:	e30603a4 	movw	r0, #25508	; 0x63a4
  10b51c:	e3400014 	movt	r0, #20
  10b520:	ebfffef2 	bl	10b0f0 <sys_arch_assert>
  10b524:	e3e0300f 	mvn	r3, #15
  10b528:	ea00001b 	b	10b59c <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
  10b52c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b530:	e3530000 	cmp	r3, #0
  10b534:	1a000008 	bne	10b55c <netconn_getaddr+0xac>
  10b538:	e306046c 	movw	r0, #25708	; 0x646c
  10b53c:	e3400014 	movt	r0, #20
  10b540:	ebffdef3 	bl	103114 <rt_kprintf>
  10b544:	e3a010db 	mov	r1, #219	; 0xdb
  10b548:	e30603a4 	movw	r0, #25508	; 0x63a4
  10b54c:	e3400014 	movt	r0, #20
  10b550:	ebfffee6 	bl	10b0f0 <sys_arch_assert>
  10b554:	e3e0300f 	mvn	r3, #15
  10b558:	ea00000f 	b	10b59c <netconn_getaddr+0xec>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b55c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b560:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.ad.local = local;
  10b564:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10b568:	e54b3010 	strb	r3, [fp, #-16]
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
  10b56c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b570:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg.ad.port = port;
  10b574:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b578:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
  10b57c:	e24b3020 	sub	r3, fp, #32
  10b580:	e1a01003 	mov	r1, r3
  10b584:	e30f077c 	movw	r0, #63356	; 0xf77c
  10b588:	e3400010 	movt	r0, #16
  10b58c:	ebffff2d 	bl	10b248 <netconn_apimsg>
  10b590:	e1a03000 	mov	r3, r0
  10b594:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
  10b598:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b59c:	e1a00003 	mov	r0, r3
  10b5a0:	e24bd004 	sub	sp, fp, #4
  10b5a4:	e8bd8800 	pop	{fp, pc}

0010b5a8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b5a8:	e92d4800 	push	{fp, lr}
  10b5ac:	e28db004 	add	fp, sp, #4
  10b5b0:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b5b4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b5b8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b5bc:	e1a03002 	mov	r3, r2
  10b5c0:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
  10b5c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b5c8:	e3530000 	cmp	r3, #0
  10b5cc:	1a000008 	bne	10b5f4 <netconn_bind+0x4c>
  10b5d0:	e306048c 	movw	r0, #25740	; 0x648c
  10b5d4:	e3400014 	movt	r0, #20
  10b5d8:	ebffdecd 	bl	103114 <rt_kprintf>
  10b5dc:	e3a010ff 	mov	r1, #255	; 0xff
  10b5e0:	e30603a4 	movw	r0, #25508	; 0x63a4
  10b5e4:	e3400014 	movt	r0, #20
  10b5e8:	ebfffec0 	bl	10b0f0 <sys_arch_assert>
  10b5ec:	e3e0300f 	mvn	r3, #15
  10b5f0:	ea000013 	b	10b644 <netconn_bind+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b5f4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b5f8:	e3530000 	cmp	r3, #0
  10b5fc:	1a000002 	bne	10b60c <netconn_bind+0x64>
    addr = IP4_ADDR_ANY;
  10b600:	e3093910 	movw	r3, #39184	; 0x9910
  10b604:	e3403014 	movt	r3, #20
  10b608:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b60c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b610:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b614:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b618:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b61c:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b620:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
  10b624:	e24b3020 	sub	r3, fp, #32
  10b628:	e1a01003 	mov	r1, r3
  10b62c:	e30e0204 	movw	r0, #57860	; 0xe204
  10b630:	e3400010 	movt	r0, #16
  10b634:	ebffff03 	bl	10b248 <netconn_apimsg>
  10b638:	e1a03000 	mov	r3, r0
  10b63c:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b640:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b644:	e1a00003 	mov	r0, r3
  10b648:	e24bd004 	sub	sp, fp, #4
  10b64c:	e8bd8800 	pop	{fp, pc}

0010b650 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b650:	e92d4800 	push	{fp, lr}
  10b654:	e28db004 	add	fp, sp, #4
  10b658:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b65c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b660:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b664:	e1a03002 	mov	r3, r2
  10b668:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b66c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b670:	e3530000 	cmp	r3, #0
  10b674:	1a000008 	bne	10b69c <netconn_connect+0x4c>
  10b678:	e30604a8 	movw	r0, #25768	; 0x64a8
  10b67c:	e3400014 	movt	r0, #20
  10b680:	ebffdea3 	bl	103114 <rt_kprintf>
  10b684:	e300112b 	movw	r1, #299	; 0x12b
  10b688:	e30603a4 	movw	r0, #25508	; 0x63a4
  10b68c:	e3400014 	movt	r0, #20
  10b690:	ebfffe96 	bl	10b0f0 <sys_arch_assert>
  10b694:	e3e0300f 	mvn	r3, #15
  10b698:	ea000013 	b	10b6ec <netconn_connect+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b69c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b6a0:	e3530000 	cmp	r3, #0
  10b6a4:	1a000002 	bne	10b6b4 <netconn_connect+0x64>
    addr = IP4_ADDR_ANY;
  10b6a8:	e3093910 	movw	r3, #39184	; 0x9910
  10b6ac:	e3403014 	movt	r3, #20
  10b6b0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b6b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b6b8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b6bc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b6c0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b6c4:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b6c8:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
  10b6cc:	e24b3020 	sub	r3, fp, #32
  10b6d0:	e1a01003 	mov	r1, r3
  10b6d4:	e30e05a8 	movw	r0, #58792	; 0xe5a8
  10b6d8:	e3400010 	movt	r0, #16
  10b6dc:	ebfffed9 	bl	10b248 <netconn_apimsg>
  10b6e0:	e1a03000 	mov	r3, r0
  10b6e4:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b6e8:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b6ec:	e1a00003 	mov	r0, r3
  10b6f0:	e24bd004 	sub	sp, fp, #4
  10b6f4:	e8bd8800 	pop	{fp, pc}

0010b6f8 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
  10b6f8:	e92d4800 	push	{fp, lr}
  10b6fc:	e28db004 	add	fp, sp, #4
  10b700:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b704:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b708:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b70c:	e3530000 	cmp	r3, #0
  10b710:	1a000008 	bne	10b738 <netconn_disconnect+0x40>
  10b714:	e30604c8 	movw	r0, #25800	; 0x64c8
  10b718:	e3400014 	movt	r0, #20
  10b71c:	ebffde7c 	bl	103114 <rt_kprintf>
  10b720:	e300114b 	movw	r1, #331	; 0x14b
  10b724:	e30603a4 	movw	r0, #25508	; 0x63a4
  10b728:	e3400014 	movt	r0, #20
  10b72c:	ebfffe6f 	bl	10b0f0 <sys_arch_assert>
  10b730:	e3e0300f 	mvn	r3, #15
  10b734:	ea000009 	b	10b760 <netconn_disconnect+0x68>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b738:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b73c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
  10b740:	e24b3020 	sub	r3, fp, #32
  10b744:	e1a01003 	mov	r1, r3
  10b748:	e30e08e0 	movw	r0, #59616	; 0xe8e0
  10b74c:	e3400010 	movt	r0, #16
  10b750:	ebfffebc 	bl	10b248 <netconn_apimsg>
  10b754:	e1a03000 	mov	r3, r0
  10b758:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b75c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b760:	e1a00003 	mov	r0, r3
  10b764:	e24bd004 	sub	sp, fp, #4
  10b768:	e8bd8800 	pop	{fp, pc}

0010b76c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
  10b76c:	e92d4800 	push	{fp, lr}
  10b770:	e28db004 	add	fp, sp, #4
  10b774:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b778:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b77c:	e1a03001 	mov	r3, r1
  10b780:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
  10b784:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b788:	e3530000 	cmp	r3, #0
  10b78c:	1a000008 	bne	10b7b4 <netconn_listen_with_backlog+0x48>
  10b790:	e30604ec 	movw	r0, #25836	; 0x64ec
  10b794:	e3400014 	movt	r0, #20
  10b798:	ebffde5d 	bl	103114 <rt_kprintf>
  10b79c:	e3a01f5a 	mov	r1, #360	; 0x168
  10b7a0:	e30603a4 	movw	r0, #25508	; 0x63a4
  10b7a4:	e3400014 	movt	r0, #20
  10b7a8:	ebfffe50 	bl	10b0f0 <sys_arch_assert>
  10b7ac:	e3e0300f 	mvn	r3, #15
  10b7b0:	ea000009 	b	10b7dc <netconn_listen_with_backlog+0x70>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b7b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b7b8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
  10b7bc:	e24b3020 	sub	r3, fp, #32
  10b7c0:	e1a01003 	mov	r1, r3
  10b7c4:	e30e098c 	movw	r0, #59788	; 0xe98c
  10b7c8:	e3400010 	movt	r0, #16
  10b7cc:	ebfffe9d 	bl	10b248 <netconn_apimsg>
  10b7d0:	e1a03000 	mov	r3, r0
  10b7d4:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b7d8:	e15b30d5 	ldrsb	r3, [fp, #-5]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10b7dc:	e1a00003 	mov	r0, r3
  10b7e0:	e24bd004 	sub	sp, fp, #4
  10b7e4:	e8bd8800 	pop	{fp, pc}

0010b7e8 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
  10b7e8:	e92d4800 	push	{fp, lr}
  10b7ec:	e28db004 	add	fp, sp, #4
  10b7f0:	e24dd010 	sub	sp, sp, #16
  10b7f4:	e50b0010 	str	r0, [fp, #-16]
  10b7f8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
  10b7fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b800:	e3530000 	cmp	r3, #0
  10b804:	1a000008 	bne	10b82c <netconn_accept+0x44>
  10b808:	e306050c 	movw	r0, #25868	; 0x650c
  10b80c:	e3400014 	movt	r0, #20
  10b810:	ebffde3f 	bl	103114 <rt_kprintf>
  10b814:	e300118d 	movw	r1, #397	; 0x18d
  10b818:	e30603a4 	movw	r0, #25508	; 0x63a4
  10b81c:	e3400014 	movt	r0, #20
  10b820:	ebfffe32 	bl	10b0f0 <sys_arch_assert>
  10b824:	e3e0300f 	mvn	r3, #15
  10b828:	ea000053 	b	10b97c <netconn_accept+0x194>
  *new_conn = NULL;
  10b82c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b830:	e3a02000 	mov	r2, #0
  10b834:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
  10b838:	e51b3010 	ldr	r3, [fp, #-16]
  10b83c:	e3530000 	cmp	r3, #0
  10b840:	1a000008 	bne	10b868 <netconn_accept+0x80>
  10b844:	e306052c 	movw	r0, #25900	; 0x652c
  10b848:	e3400014 	movt	r0, #20
  10b84c:	ebffde30 	bl	103114 <rt_kprintf>
  10b850:	e300118f 	movw	r1, #399	; 0x18f
  10b854:	e30603a4 	movw	r0, #25508	; 0x63a4
  10b858:	e3400014 	movt	r0, #20
  10b85c:	ebfffe23 	bl	10b0f0 <sys_arch_assert>
  10b860:	e3e0300f 	mvn	r3, #15
  10b864:	ea000044 	b	10b97c <netconn_accept+0x194>

  if (ERR_IS_FATAL(conn->last_err)) {
  10b868:	e51b3010 	ldr	r3, [fp, #-16]
  10b86c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b870:	e373000c 	cmn	r3, #12
  10b874:	aa000002 	bge	10b884 <netconn_accept+0x9c>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
  10b878:	e51b3010 	ldr	r3, [fp, #-16]
  10b87c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b880:	ea00003d 	b	10b97c <netconn_accept+0x194>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10b884:	e51b3010 	ldr	r3, [fp, #-16]
  10b888:	e2833018 	add	r3, r3, #24
  10b88c:	e1a00003 	mov	r0, r3
  10b890:	ebfffdcd 	bl	10afcc <sys_mbox_valid>
  10b894:	e1a03000 	mov	r3, r0
  10b898:	e3530000 	cmp	r3, #0
  10b89c:	1a000001 	bne	10b8a8 <netconn_accept+0xc0>
    return ERR_CLSD;
  10b8a0:	e3e0300e 	mvn	r3, #14
  10b8a4:	ea000034 	b	10b97c <netconn_accept+0x194>
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_ALLOC(msg);
#endif /* TCP_LISTEN_BACKLOG */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10b8a8:	e51b3010 	ldr	r3, [fp, #-16]
  10b8ac:	e2830018 	add	r0, r3, #24
  10b8b0:	e51b3010 	ldr	r3, [fp, #-16]
  10b8b4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10b8b8:	e1a02003 	mov	r2, r3
  10b8bc:	e24b300c 	sub	r3, fp, #12
  10b8c0:	e1a01003 	mov	r1, r3
  10b8c4:	ebfffd6f 	bl	10ae88 <sys_arch_mbox_fetch>
  10b8c8:	e1a03000 	mov	r3, r0
  10b8cc:	e3730001 	cmn	r3, #1
  10b8d0:	1a000001 	bne	10b8dc <netconn_accept+0xf4>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  10b8d4:	e3e03002 	mvn	r3, #2
  10b8d8:	ea000027 	b	10b97c <netconn_accept+0x194>
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
  10b8dc:	e51b300c 	ldr	r3, [fp, #-12]
  10b8e0:	e50b3008 	str	r3, [fp, #-8]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10b8e4:	e51b3010 	ldr	r3, [fp, #-16]
  10b8e8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b8ec:	e3530000 	cmp	r3, #0
  10b8f0:	0a000005 	beq	10b90c <netconn_accept+0x124>
  10b8f4:	e51b3010 	ldr	r3, [fp, #-16]
  10b8f8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b8fc:	e3a02000 	mov	r2, #0
  10b900:	e3a01001 	mov	r1, #1
  10b904:	e51b0010 	ldr	r0, [fp, #-16]
  10b908:	e12fff33 	blx	r3

  if (accept_ptr == &netconn_aborted) {
  10b90c:	e51b200c 	ldr	r2, [fp, #-12]
  10b910:	e30f358c 	movw	r3, #62860	; 0xf58c
  10b914:	e3403014 	movt	r3, #20
  10b918:	e1520003 	cmp	r2, r3
  10b91c:	1a000001 	bne	10b928 <netconn_accept+0x140>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
  10b920:	e3e0300c 	mvn	r3, #12
  10b924:	ea000014 	b	10b97c <netconn_accept+0x194>
  }
  if (newconn == NULL) {
  10b928:	e51b3008 	ldr	r3, [fp, #-8]
  10b92c:	e3530000 	cmp	r3, #0
  10b930:	1a00000d 	bne	10b96c <netconn_accept+0x184>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
  10b934:	e51b3010 	ldr	r3, [fp, #-16]
  10b938:	e3530000 	cmp	r3, #0
  10b93c:	0a000008 	beq	10b964 <netconn_accept+0x17c>
  10b940:	ebffda3d 	bl	10223c <rt_enter_critical>
  10b944:	e51b3010 	ldr	r3, [fp, #-16]
  10b948:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b94c:	e373000c 	cmn	r3, #12
  10b950:	ba000002 	blt	10b960 <netconn_accept+0x178>
  10b954:	e51b3010 	ldr	r3, [fp, #-16]
  10b958:	e3e0200e 	mvn	r2, #14
  10b95c:	e5c3200c 	strb	r2, [r3, #12]
  10b960:	ebffda3b 	bl	102254 <rt_exit_critical>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
  10b964:	e3e0300e 	mvn	r3, #14
  10b968:	ea000003 	b	10b97c <netconn_accept+0x194>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
  10b96c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b970:	e51b2008 	ldr	r2, [fp, #-8]
  10b974:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10b978:	e3a03000 	mov	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10b97c:	e1a00003 	mov	r0, r3
  10b980:	e24bd004 	sub	sp, fp, #4
  10b984:	e8bd8800 	pop	{fp, pc}

0010b988 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
  10b988:	e92d4800 	push	{fp, lr}
  10b98c:	e28db004 	add	fp, sp, #4
  10b990:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b994:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b998:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  void *buf = NULL;
  10b99c:	e3a03000 	mov	r3, #0
  10b9a0:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10b9a4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b9a8:	e3530000 	cmp	r3, #0
  10b9ac:	1a000008 	bne	10b9d4 <netconn_recv_data+0x4c>
  10b9b0:	e306054c 	movw	r0, #25932	; 0x654c
  10b9b4:	e3400014 	movt	r0, #20
  10b9b8:	ebffddd5 	bl	103114 <rt_kprintf>
  10b9bc:	e30011e7 	movw	r1, #487	; 0x1e7
  10b9c0:	e30603a4 	movw	r0, #25508	; 0x63a4
  10b9c4:	e3400014 	movt	r0, #20
  10b9c8:	ebfffdc8 	bl	10b0f0 <sys_arch_assert>
  10b9cc:	e3e0300f 	mvn	r3, #15
  10b9d0:	ea0000a5 	b	10bc6c <netconn_recv_data+0x2e4>
  *new_buf = NULL;
  10b9d4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b9d8:	e3a02000 	mov	r2, #0
  10b9dc:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10b9e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b9e4:	e3530000 	cmp	r3, #0
  10b9e8:	1a000008 	bne	10ba10 <netconn_recv_data+0x88>
  10b9ec:	e306056c 	movw	r0, #25964	; 0x656c
  10b9f0:	e3400014 	movt	r0, #20
  10b9f4:	ebffddc6 	bl	103114 <rt_kprintf>
  10b9f8:	e30011e9 	movw	r1, #489	; 0x1e9
  10b9fc:	e30603a4 	movw	r0, #25508	; 0x63a4
  10ba00:	e3400014 	movt	r0, #20
  10ba04:	ebfffdb9 	bl	10b0f0 <sys_arch_assert>
  10ba08:	e3e0300f 	mvn	r3, #15
  10ba0c:	ea000096 	b	10bc6c <netconn_recv_data+0x2e4>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10ba10:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba14:	e5933000 	ldr	r3, [r3]
  10ba18:	e20330f0 	and	r3, r3, #240	; 0xf0
  10ba1c:	e3530010 	cmp	r3, #16
  10ba20:	1a000011 	bne	10ba6c <netconn_recv_data+0xe4>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
  10ba24:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba28:	e2833014 	add	r3, r3, #20
  10ba2c:	e1a00003 	mov	r0, r3
  10ba30:	ebfffd65 	bl	10afcc <sys_mbox_valid>
  10ba34:	e1a03000 	mov	r3, r0
  10ba38:	e3530000 	cmp	r3, #0
  10ba3c:	1a00000a 	bne	10ba6c <netconn_recv_data+0xe4>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
  10ba40:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba44:	e2833018 	add	r3, r3, #24
  10ba48:	e1a00003 	mov	r0, r3
  10ba4c:	ebfffd5e 	bl	10afcc <sys_mbox_valid>
  10ba50:	e1a03000 	mov	r3, r0
  10ba54:	e3530000 	cmp	r3, #0
  10ba58:	0a000001 	beq	10ba64 <netconn_recv_data+0xdc>
  10ba5c:	e3e0300a 	mvn	r3, #10
  10ba60:	ea000081 	b	10bc6c <netconn_recv_data+0x2e4>
  10ba64:	e3e0300e 	mvn	r3, #14
  10ba68:	ea00007f 	b	10bc6c <netconn_recv_data+0x2e4>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
  10ba6c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba70:	e2833014 	add	r3, r3, #20
  10ba74:	e1a00003 	mov	r0, r3
  10ba78:	ebfffd53 	bl	10afcc <sys_mbox_valid>
  10ba7c:	e1a03000 	mov	r3, r0
  10ba80:	e3530000 	cmp	r3, #0
  10ba84:	1a000008 	bne	10baac <netconn_recv_data+0x124>
  10ba88:	e3060588 	movw	r0, #25992	; 0x6588
  10ba8c:	e3400014 	movt	r0, #20
  10ba90:	ebffdd9f 	bl	103114 <rt_kprintf>
  10ba94:	e30011f5 	movw	r1, #501	; 0x1f5
  10ba98:	e30603a4 	movw	r0, #25508	; 0x63a4
  10ba9c:	e3400014 	movt	r0, #20
  10baa0:	ebfffd92 	bl	10b0f0 <sys_arch_assert>
  10baa4:	e3e0300a 	mvn	r3, #10
  10baa8:	ea00006f 	b	10bc6c <netconn_recv_data+0x2e4>

  if (ERR_IS_FATAL(conn->last_err)) {
  10baac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bab0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bab4:	e373000c 	cmn	r3, #12
  10bab8:	aa000002 	bge	10bac8 <netconn_recv_data+0x140>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
  10babc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bac0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bac4:	ea000068 	b	10bc6c <netconn_recv_data+0x2e4>
    API_MSG_VAR_ALLOC(msg);
  }
#endif /* LWIP_TCP */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10bac8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bacc:	e2830014 	add	r0, r3, #20
  10bad0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bad4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10bad8:	e1a02003 	mov	r2, r3
  10badc:	e24b300c 	sub	r3, fp, #12
  10bae0:	e1a01003 	mov	r1, r3
  10bae4:	ebfffce7 	bl	10ae88 <sys_arch_mbox_fetch>
  10bae8:	e1a03000 	mov	r3, r0
  10baec:	e3730001 	cmn	r3, #1
  10baf0:	1a000001 	bne	10bafc <netconn_recv_data+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
    {
      API_MSG_VAR_FREE(msg);
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  10baf4:	e3e03002 	mvn	r3, #2
  10baf8:	ea00005b 	b	10bc6c <netconn_recv_data+0x2e4>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10bafc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb00:	e5933000 	ldr	r3, [r3]
  10bb04:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bb08:	e3530010 	cmp	r3, #16
  10bb0c:	1a000032 	bne	10bbdc <netconn_recv_data+0x254>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
  10bb10:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb14:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (buf != NULL) {
  10bb18:	e51b300c 	ldr	r3, [fp, #-12]
  10bb1c:	e3530000 	cmp	r3, #0
  10bb20:	0a000003 	beq	10bb34 <netconn_recv_data+0x1ac>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
  10bb24:	e51b300c 	ldr	r3, [fp, #-12]
  10bb28:	e1d330b8 	ldrh	r3, [r3, #8]
  10bb2c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  10bb30:	ea000001 	b	10bb3c <netconn_recv_data+0x1b4>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
  10bb34:	e3a03001 	mov	r3, #1
  10bb38:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
  10bb3c:	e24b3024 	sub	r3, fp, #36	; 0x24
  10bb40:	e1a01003 	mov	r1, r3
  10bb44:	e30e0e38 	movw	r0, #60984	; 0xee38
  10bb48:	e3400010 	movt	r0, #16
  10bb4c:	ebfffdbd 	bl	10b248 <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
  10bb50:	e51b300c 	ldr	r3, [fp, #-12]
  10bb54:	e3530000 	cmp	r3, #0
  10bb58:	1a00001b 	bne	10bbcc <netconn_recv_data+0x244>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10bb5c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb60:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bb64:	e3530000 	cmp	r3, #0
  10bb68:	0a000005 	beq	10bb84 <netconn_recv_data+0x1fc>
  10bb6c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb70:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bb74:	e3a02000 	mov	r2, #0
  10bb78:	e3a01001 	mov	r1, #1
  10bb7c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10bb80:	e12fff33 	blx	r3
      if (conn->pcb.ip == NULL) {
  10bb84:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb88:	e5933008 	ldr	r3, [r3, #8]
  10bb8c:	e3530000 	cmp	r3, #0
  10bb90:	1a000008 	bne	10bbb8 <netconn_recv_data+0x230>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
  10bb94:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb98:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bb9c:	e3530000 	cmp	r3, #0
  10bba0:	0a000002 	beq	10bbb0 <netconn_recv_data+0x228>
  10bba4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bba8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bbac:	ea00002e 	b	10bc6c <netconn_recv_data+0x2e4>
  10bbb0:	e3e0300d 	mvn	r3, #13
  10bbb4:	ea00002c 	b	10bc6c <netconn_recv_data+0x2e4>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
  10bbb8:	e3a01001 	mov	r1, #1
  10bbbc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10bbc0:	eb00015a 	bl	10c130 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
  10bbc4:	e3e0300e 	mvn	r3, #14
  10bbc8:	ea000027 	b	10bc6c <netconn_recv_data+0x2e4>
    }
    len = ((struct pbuf *)buf)->tot_len;
  10bbcc:	e51b300c 	ldr	r3, [fp, #-12]
  10bbd0:	e1d330b8 	ldrh	r3, [r3, #8]
  10bbd4:	e14b30b6 	strh	r3, [fp, #-6]
  10bbd8:	ea00000d 	b	10bc14 <netconn_recv_data+0x28c>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
  10bbdc:	e51b300c 	ldr	r3, [fp, #-12]
  10bbe0:	e3530000 	cmp	r3, #0
  10bbe4:	1a000006 	bne	10bc04 <netconn_recv_data+0x27c>
  10bbe8:	e30605a8 	movw	r0, #26024	; 0x65a8
  10bbec:	e3400014 	movt	r0, #20
  10bbf0:	ebffdd47 	bl	103114 <rt_kprintf>
  10bbf4:	e300123e 	movw	r1, #574	; 0x23e
  10bbf8:	e30603a4 	movw	r0, #25508	; 0x63a4
  10bbfc:	e3400014 	movt	r0, #20
  10bc00:	ebfffd3a 	bl	10b0f0 <sys_arch_assert>
    len = netbuf_len((struct netbuf*)buf);
  10bc04:	e51b300c 	ldr	r3, [fp, #-12]
  10bc08:	e5933000 	ldr	r3, [r3]
  10bc0c:	e1d330b8 	ldrh	r3, [r3, #8]
  10bc10:	e14b30b6 	strh	r3, [fp, #-6]
  }
#endif /* (LWIP_UDP || LWIP_RAW) */

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
  10bc14:	ebffd988 	bl	10223c <rt_enter_critical>
  10bc18:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc1c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10bc20:	e15b30b6 	ldrh	r3, [fp, #-6]
  10bc24:	e0422003 	sub	r2, r2, r3
  10bc28:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc2c:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10bc30:	ebffd987 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
  10bc34:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc38:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bc3c:	e3530000 	cmp	r3, #0
  10bc40:	0a000005 	beq	10bc5c <netconn_recv_data+0x2d4>
  10bc44:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc48:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bc4c:	e15b20b6 	ldrh	r2, [fp, #-6]
  10bc50:	e3a01001 	mov	r1, #1
  10bc54:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10bc58:	e12fff33 	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  10bc5c:	e51b200c 	ldr	r2, [fp, #-12]
  10bc60:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bc64:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10bc68:	e3a03000 	mov	r3, #0
}
  10bc6c:	e1a00003 	mov	r0, r3
  10bc70:	e24bd004 	sub	sp, fp, #4
  10bc74:	e8bd8800 	pop	{fp, pc}

0010bc78 <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
  10bc78:	e92d4800 	push	{fp, lr}
  10bc7c:	e28db004 	add	fp, sp, #4
  10bc80:	e24dd008 	sub	sp, sp, #8
  10bc84:	e50b0008 	str	r0, [fp, #-8]
  10bc88:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
  10bc8c:	e51b3008 	ldr	r3, [fp, #-8]
  10bc90:	e3530000 	cmp	r3, #0
  10bc94:	0a000004 	beq	10bcac <netconn_recv_tcp_pbuf+0x34>
  10bc98:	e51b3008 	ldr	r3, [fp, #-8]
  10bc9c:	e5933000 	ldr	r3, [r3]
  10bca0:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bca4:	e3530010 	cmp	r3, #16
  10bca8:	0a000008 	beq	10bcd0 <netconn_recv_tcp_pbuf+0x58>
  10bcac:	e306056c 	movw	r0, #25964	; 0x656c
  10bcb0:	e3400014 	movt	r0, #20
  10bcb4:	ebffdd16 	bl	103114 <rt_kprintf>
  10bcb8:	e300125e 	movw	r1, #606	; 0x25e
  10bcbc:	e30603a4 	movw	r0, #25508	; 0x63a4
  10bcc0:	e3400014 	movt	r0, #20
  10bcc4:	ebfffd09 	bl	10b0f0 <sys_arch_assert>
  10bcc8:	e3e0300f 	mvn	r3, #15
  10bccc:	ea000003 	b	10bce0 <netconn_recv_tcp_pbuf+0x68>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
  10bcd0:	e51b100c 	ldr	r1, [fp, #-12]
  10bcd4:	e51b0008 	ldr	r0, [fp, #-8]
  10bcd8:	ebffff2a 	bl	10b988 <netconn_recv_data>
  10bcdc:	e1a03000 	mov	r3, r0
}
  10bce0:	e1a00003 	mov	r0, r3
  10bce4:	e24bd004 	sub	sp, fp, #4
  10bce8:	e8bd8800 	pop	{fp, pc}

0010bcec <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
  10bcec:	e92d4800 	push	{fp, lr}
  10bcf0:	e28db004 	add	fp, sp, #4
  10bcf4:	e24dd018 	sub	sp, sp, #24
  10bcf8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10bcfc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
#if LWIP_TCP
  struct netbuf *buf = NULL;
  10bd00:	e3a03000 	mov	r3, #0
  10bd04:	e50b3008 	str	r3, [fp, #-8]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10bd08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10bd0c:	e3530000 	cmp	r3, #0
  10bd10:	1a000008 	bne	10bd38 <netconn_recv+0x4c>
  10bd14:	e306054c 	movw	r0, #25932	; 0x654c
  10bd18:	e3400014 	movt	r0, #20
  10bd1c:	ebffdcfc 	bl	103114 <rt_kprintf>
  10bd20:	e3a01f9d 	mov	r1, #628	; 0x274
  10bd24:	e30603a4 	movw	r0, #25508	; 0x63a4
  10bd28:	e3400014 	movt	r0, #20
  10bd2c:	ebfffcef 	bl	10b0f0 <sys_arch_assert>
  10bd30:	e3e0300f 	mvn	r3, #15
  10bd34:	ea00004d 	b	10be70 <netconn_recv+0x184>
  *new_buf = NULL;
  10bd38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10bd3c:	e3a02000 	mov	r2, #0
  10bd40:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10bd44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10bd48:	e3530000 	cmp	r3, #0
  10bd4c:	1a000008 	bne	10bd74 <netconn_recv+0x88>
  10bd50:	e306056c 	movw	r0, #25964	; 0x656c
  10bd54:	e3400014 	movt	r0, #20
  10bd58:	ebffdced 	bl	103114 <rt_kprintf>
  10bd5c:	e3001276 	movw	r1, #630	; 0x276
  10bd60:	e30603a4 	movw	r0, #25508	; 0x63a4
  10bd64:	e3400014 	movt	r0, #20
  10bd68:	ebfffce0 	bl	10b0f0 <sys_arch_assert>
  10bd6c:	e3e0300f 	mvn	r3, #15
  10bd70:	ea00003e 	b	10be70 <netconn_recv+0x184>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10bd74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10bd78:	e5933000 	ldr	r3, [r3]
  10bd7c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bd80:	e3530010 	cmp	r3, #16
  10bd84:	1a000035 	bne	10be60 <netconn_recv+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
  10bd88:	e3a03000 	mov	r3, #0
  10bd8c:	e50b3010 	str	r3, [fp, #-16]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10bd90:	e3a02d0a 	mov	r2, #640	; 0x280
  10bd94:	e30613a4 	movw	r1, #25508	; 0x63a4
  10bd98:	e3401014 	movt	r1, #20
  10bd9c:	e3a00007 	mov	r0, #7
  10bda0:	eb0034cf 	bl	1190e4 <memp_malloc_fn>
  10bda4:	e50b0008 	str	r0, [fp, #-8]
    if (buf == NULL) {
  10bda8:	e51b3008 	ldr	r3, [fp, #-8]
  10bdac:	e3530000 	cmp	r3, #0
  10bdb0:	1a000001 	bne	10bdbc <netconn_recv+0xd0>
      return ERR_MEM;
  10bdb4:	e3e03000 	mvn	r3, #0
  10bdb8:	ea00002c 	b	10be70 <netconn_recv+0x184>
    }

    err = netconn_recv_data(conn, (void **)&p);
  10bdbc:	e24b3010 	sub	r3, fp, #16
  10bdc0:	e1a01003 	mov	r1, r3
  10bdc4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10bdc8:	ebfffeee 	bl	10b988 <netconn_recv_data>
  10bdcc:	e1a03000 	mov	r3, r0
  10bdd0:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10bdd4:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10bdd8:	e3530000 	cmp	r3, #0
  10bddc:	0a000004 	beq	10bdf4 <netconn_recv+0x108>
      memp_free(MEMP_NETBUF, buf);
  10bde0:	e51b1008 	ldr	r1, [fp, #-8]
  10bde4:	e3a00007 	mov	r0, #7
  10bde8:	eb003525 	bl	119284 <memp_free>
      return err;
  10bdec:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10bdf0:	ea00001e 	b	10be70 <netconn_recv+0x184>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
  10bdf4:	e51b3010 	ldr	r3, [fp, #-16]
  10bdf8:	e3530000 	cmp	r3, #0
  10bdfc:	1a000006 	bne	10be1c <netconn_recv+0x130>
  10be00:	e30605b4 	movw	r0, #26036	; 0x65b4
  10be04:	e3400014 	movt	r0, #20
  10be08:	ebffdcc1 	bl	103114 <rt_kprintf>
  10be0c:	e300128a 	movw	r1, #650	; 0x28a
  10be10:	e30603a4 	movw	r0, #25508	; 0x63a4
  10be14:	e3400014 	movt	r0, #20
  10be18:	ebfffcb4 	bl	10b0f0 <sys_arch_assert>

    buf->p = p;
  10be1c:	e51b2010 	ldr	r2, [fp, #-16]
  10be20:	e51b3008 	ldr	r3, [fp, #-8]
  10be24:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10be28:	e51b2010 	ldr	r2, [fp, #-16]
  10be2c:	e51b3008 	ldr	r3, [fp, #-8]
  10be30:	e5832004 	str	r2, [r3, #4]
    buf->port = 0;
  10be34:	e51b3008 	ldr	r3, [fp, #-8]
  10be38:	e3a02000 	mov	r2, #0
  10be3c:	e1c320bc 	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
  10be40:	e51b3008 	ldr	r3, [fp, #-8]
  10be44:	e3a02000 	mov	r2, #0
  10be48:	e5832008 	str	r2, [r3, #8]
    *new_buf = buf;
  10be4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10be50:	e51b2008 	ldr	r2, [fp, #-8]
  10be54:	e5832000 	str	r2, [r3]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
  10be58:	e3a03000 	mov	r3, #0
  10be5c:	ea000003 	b	10be70 <netconn_recv+0x184>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
  10be60:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10be64:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10be68:	ebfffec6 	bl	10b988 <netconn_recv_data>
  10be6c:	e1a03000 	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
  10be70:	e1a00003 	mov	r0, r3
  10be74:	e24bd004 	sub	sp, fp, #4
  10be78:	e8bd8800 	pop	{fp, pc}

0010be7c <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
  10be7c:	e92d4800 	push	{fp, lr}
  10be80:	e28db004 	add	fp, sp, #4
  10be84:	e24dd010 	sub	sp, sp, #16
  10be88:	e50b0008 	str	r0, [fp, #-8]
  10be8c:	e50b100c 	str	r1, [fp, #-12]
  10be90:	e50b2010 	str	r2, [fp, #-16]
  10be94:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (buf != NULL) {
  10be98:	e51b300c 	ldr	r3, [fp, #-12]
  10be9c:	e3530000 	cmp	r3, #0
  10bea0:	0a000010 	beq	10bee8 <netconn_sendto+0x6c>
    ip_addr_set(&buf->addr, addr);
  10bea4:	e51b3010 	ldr	r3, [fp, #-16]
  10bea8:	e3530000 	cmp	r3, #0
  10beac:	0a000002 	beq	10bebc <netconn_sendto+0x40>
  10beb0:	e51b3010 	ldr	r3, [fp, #-16]
  10beb4:	e5933000 	ldr	r3, [r3]
  10beb8:	ea000000 	b	10bec0 <netconn_sendto+0x44>
  10bebc:	e3a03000 	mov	r3, #0
  10bec0:	e51b200c 	ldr	r2, [fp, #-12]
  10bec4:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10bec8:	e51b300c 	ldr	r3, [fp, #-12]
  10becc:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10bed0:	e1c320bc 	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
  10bed4:	e51b100c 	ldr	r1, [fp, #-12]
  10bed8:	e51b0008 	ldr	r0, [fp, #-8]
  10bedc:	eb000005 	bl	10bef8 <netconn_send>
  10bee0:	e1a03000 	mov	r3, r0
  10bee4:	ea000000 	b	10beec <netconn_sendto+0x70>
  }
  return ERR_VAL;
  10bee8:	e3e03005 	mvn	r3, #5
}
  10beec:	e1a00003 	mov	r0, r3
  10bef0:	e24bd004 	sub	sp, fp, #4
  10bef4:	e8bd8800 	pop	{fp, pc}

0010bef8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
  10bef8:	e92d4800 	push	{fp, lr}
  10befc:	e28db004 	add	fp, sp, #4
  10bf00:	e24dd028 	sub	sp, sp, #40	; 0x28
  10bf04:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bf08:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bf0c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf10:	e3530000 	cmp	r3, #0
  10bf14:	1a000008 	bne	10bf3c <netconn_send+0x44>
  10bf18:	e30605c0 	movw	r0, #26048	; 0x65c0
  10bf1c:	e3400014 	movt	r0, #20
  10bf20:	ebffdc7b 	bl	103114 <rt_kprintf>
  10bf24:	e30012c3 	movw	r1, #707	; 0x2c3
  10bf28:	e30603a4 	movw	r0, #25508	; 0x63a4
  10bf2c:	e3400014 	movt	r0, #20
  10bf30:	ebfffc6e 	bl	10b0f0 <sys_arch_assert>
  10bf34:	e3e0300f 	mvn	r3, #15
  10bf38:	ea00000b 	b	10bf6c <netconn_send+0x74>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10bf3c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf40:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.b = buf;
  10bf44:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bf48:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
  10bf4c:	e24b3020 	sub	r3, fp, #32
  10bf50:	e1a01003 	mov	r1, r3
  10bf54:	e30e0c2c 	movw	r0, #60460	; 0xec2c
  10bf58:	e3400010 	movt	r0, #16
  10bf5c:	ebfffcb9 	bl	10b248 <netconn_apimsg>
  10bf60:	e1a03000 	mov	r3, r0
  10bf64:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10bf68:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10bf6c:	e1a00003 	mov	r0, r3
  10bf70:	e24bd004 	sub	sp, fp, #4
  10bf74:	e8bd8800 	pop	{fp, pc}

0010bf78 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
  10bf78:	e92d4800 	push	{fp, lr}
  10bf7c:	e28db004 	add	fp, sp, #4
  10bf80:	e24dd030 	sub	sp, sp, #48	; 0x30
  10bf84:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bf88:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10bf8c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10bf90:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bf94:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf98:	e3530000 	cmp	r3, #0
  10bf9c:	1a000008 	bne	10bfc4 <netconn_write_partly+0x4c>
  10bfa0:	e30605dc 	movw	r0, #26076	; 0x65dc
  10bfa4:	e3400014 	movt	r0, #20
  10bfa8:	ebffdc59 	bl	103114 <rt_kprintf>
  10bfac:	e30012e6 	movw	r1, #742	; 0x2e6
  10bfb0:	e30603a4 	movw	r0, #25508	; 0x63a4
  10bfb4:	e3400014 	movt	r0, #20
  10bfb8:	ebfffc4c 	bl	10b0f0 <sys_arch_assert>
  10bfbc:	e3e0300f 	mvn	r3, #15
  10bfc0:	ea000057 	b	10c124 <netconn_write_partly+0x1ac>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
  10bfc4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bfc8:	e5933000 	ldr	r3, [r3]
  10bfcc:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bfd0:	e3530010 	cmp	r3, #16
  10bfd4:	0a000008 	beq	10bffc <netconn_write_partly+0x84>
  10bfd8:	e30605f8 	movw	r0, #26104	; 0x65f8
  10bfdc:	e3400014 	movt	r0, #20
  10bfe0:	ebffdc4b 	bl	103114 <rt_kprintf>
  10bfe4:	e30012e7 	movw	r1, #743	; 0x2e7
  10bfe8:	e30603a4 	movw	r0, #25508	; 0x63a4
  10bfec:	e3400014 	movt	r0, #20
  10bff0:	ebfffc3e 	bl	10b0f0 <sys_arch_assert>
  10bff4:	e3e03005 	mvn	r3, #5
  10bff8:	ea000049 	b	10c124 <netconn_write_partly+0x1ac>
  if (size == 0) {
  10bffc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c000:	e3530000 	cmp	r3, #0
  10c004:	1a000001 	bne	10c010 <netconn_write_partly+0x98>
    return ERR_OK;
  10c008:	e3a03000 	mov	r3, #0
  10c00c:	ea000044 	b	10c124 <netconn_write_partly+0x1ac>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10c010:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c014:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10c018:	e2033002 	and	r3, r3, #2
  10c01c:	e3530000 	cmp	r3, #0
  10c020:	1a000003 	bne	10c034 <netconn_write_partly+0xbc>
  10c024:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10c028:	e2033004 	and	r3, r3, #4
  10c02c:	e3530000 	cmp	r3, #0
  10c030:	0a000001 	beq	10c03c <netconn_write_partly+0xc4>
  10c034:	e3a03001 	mov	r3, #1
  10c038:	ea000000 	b	10c040 <netconn_write_partly+0xc8>
  10c03c:	e3a03000 	mov	r3, #0
  10c040:	e54b3005 	strb	r3, [fp, #-5]
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10c044:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c048:	e5933020 	ldr	r3, [r3, #32]
  10c04c:	e3530000 	cmp	r3, #0
  10c050:	0a000001 	beq	10c05c <netconn_write_partly+0xe4>
    dontblock = 1;
  10c054:	e3a03001 	mov	r3, #1
  10c058:	e54b3005 	strb	r3, [fp, #-5]
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
  10c05c:	e55b3005 	ldrb	r3, [fp, #-5]
  10c060:	e3530000 	cmp	r3, #0
  10c064:	0a000004 	beq	10c07c <netconn_write_partly+0x104>
  10c068:	e59b3004 	ldr	r3, [fp, #4]
  10c06c:	e3530000 	cmp	r3, #0
  10c070:	1a000001 	bne	10c07c <netconn_write_partly+0x104>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
  10c074:	e3e03005 	mvn	r3, #5
  10c078:	ea000029 	b	10c124 <netconn_write_partly+0x1ac>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
  10c07c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c080:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
  10c084:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c088:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
  10c08c:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10c090:	e54b3010 	strb	r3, [fp, #-16]
  API_MSG_VAR_REF(msg).msg.w.len = size;
  10c094:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c098:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10c09c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c0a0:	e5933020 	ldr	r3, [r3, #32]
  10c0a4:	e3530000 	cmp	r3, #0
  10c0a8:	0a000003 	beq	10c0bc <netconn_write_partly+0x144>
    /* get the time we started, which is later compared to
        sys_now() + conn->send_timeout */
    API_MSG_VAR_REF(msg).msg.w.time_started = sys_now();
  10c0ac:	ebfffc28 	bl	10b154 <sys_now>
  10c0b0:	e1a03000 	mov	r3, r0
  10c0b4:	e50b300c 	str	r3, [fp, #-12]
  10c0b8:	ea000001 	b	10c0c4 <netconn_write_partly+0x14c>
  } else {
    API_MSG_VAR_REF(msg).msg.w.time_started = 0;
  10c0bc:	e3a03000 	mov	r3, #0
  10c0c0:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
  10c0c4:	e24b3020 	sub	r3, fp, #32
  10c0c8:	e1a01003 	mov	r1, r3
  10c0cc:	e30f0528 	movw	r0, #62760	; 0xf528
  10c0d0:	e3400010 	movt	r0, #16
  10c0d4:	ebfffc5b 	bl	10b248 <netconn_apimsg>
  10c0d8:	e1a03000 	mov	r3, r0
  10c0dc:	e54b3006 	strb	r3, [fp, #-6]
  if ((err == ERR_OK) && (bytes_written != NULL)) {
  10c0e0:	e15b30d6 	ldrsb	r3, [fp, #-6]
  10c0e4:	e3530000 	cmp	r3, #0
  10c0e8:	1a00000c 	bne	10c120 <netconn_write_partly+0x1a8>
  10c0ec:	e59b3004 	ldr	r3, [fp, #4]
  10c0f0:	e3530000 	cmp	r3, #0
  10c0f4:	0a000009 	beq	10c120 <netconn_write_partly+0x1a8>
    if (dontblock) {
  10c0f8:	e55b3005 	ldrb	r3, [fp, #-5]
  10c0fc:	e3530000 	cmp	r3, #0
  10c100:	0a000003 	beq	10c114 <netconn_write_partly+0x19c>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
  10c104:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10c108:	e59b3004 	ldr	r3, [fp, #4]
  10c10c:	e5832000 	str	r2, [r3]
  10c110:	ea000002 	b	10c120 <netconn_write_partly+0x1a8>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
  10c114:	e59b3004 	ldr	r3, [fp, #4]
  10c118:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  10c11c:	e5832000 	str	r2, [r3]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
  10c120:	e15b30d6 	ldrsb	r3, [fp, #-6]
}
  10c124:	e1a00003 	mov	r0, r3
  10c128:	e24bd004 	sub	sp, fp, #4
  10c12c:	e8bd8800 	pop	{fp, pc}

0010c130 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
  10c130:	e92d4800 	push	{fp, lr}
  10c134:	e28db004 	add	fp, sp, #4
  10c138:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c13c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c140:	e1a03001 	mov	r3, r1
  10c144:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
  10c148:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c14c:	e3530000 	cmp	r3, #0
  10c150:	1a000008 	bne	10c178 <netconn_close_shutdown+0x48>
  10c154:	e306061c 	movw	r0, #26140	; 0x661c
  10c158:	e3400014 	movt	r0, #20
  10c15c:	ebffdbec 	bl	103114 <rt_kprintf>
  10c160:	e3a01fca 	mov	r1, #808	; 0x328
  10c164:	e30603a4 	movw	r0, #25508	; 0x63a4
  10c168:	e3400014 	movt	r0, #20
  10c16c:	ebfffbdf 	bl	10b0f0 <sys_arch_assert>
  10c170:	e3e0300f 	mvn	r3, #15
  10c174:	ea00000e 	b	10c1b4 <netconn_close_shutdown+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10c178:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c17c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
  10c180:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10c184:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10c188:	ebfffbf1 	bl	10b154 <sys_now>
  10c18c:	e1a03000 	mov	r3, r0
  10c190:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  10c194:	e24b3020 	sub	r3, fp, #32
  10c198:	e1a01003 	mov	r1, r3
  10c19c:	e30f09fc 	movw	r0, #63996	; 0xf9fc
  10c1a0:	e3400010 	movt	r0, #16
  10c1a4:	ebfffc27 	bl	10b248 <netconn_apimsg>
  10c1a8:	e1a03000 	mov	r3, r0
  10c1ac:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10c1b0:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10c1b4:	e1a00003 	mov	r0, r3
  10c1b8:	e24bd004 	sub	sp, fp, #4
  10c1bc:	e8bd8800 	pop	{fp, pc}

0010c1c0 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
  10c1c0:	e92d4800 	push	{fp, lr}
  10c1c4:	e28db004 	add	fp, sp, #4
  10c1c8:	e24dd008 	sub	sp, sp, #8
  10c1cc:	e50b0008 	str	r0, [fp, #-8]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
  10c1d0:	e3a01003 	mov	r1, #3
  10c1d4:	e51b0008 	ldr	r0, [fp, #-8]
  10c1d8:	ebffffd4 	bl	10c130 <netconn_close_shutdown>
  10c1dc:	e1a03000 	mov	r3, r0
}
  10c1e0:	e1a00003 	mov	r0, r3
  10c1e4:	e24bd004 	sub	sp, fp, #4
  10c1e8:	e8bd8800 	pop	{fp, pc}

0010c1ec <netconn_shutdown>:
 * @param shut_tx shut down the TX side (no more write possible after this)
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)
{
  10c1ec:	e92d4800 	push	{fp, lr}
  10c1f0:	e28db004 	add	fp, sp, #4
  10c1f4:	e24dd008 	sub	sp, sp, #8
  10c1f8:	e50b0008 	str	r0, [fp, #-8]
  10c1fc:	e1a03001 	mov	r3, r1
  10c200:	e54b3009 	strb	r3, [fp, #-9]
  10c204:	e1a03002 	mov	r3, r2
  10c208:	e54b300a 	strb	r3, [fp, #-10]
  return netconn_close_shutdown(conn, (shut_rx ? NETCONN_SHUT_RD : 0) | (shut_tx ? NETCONN_SHUT_WR : 0));
  10c20c:	e55b3009 	ldrb	r3, [fp, #-9]
  10c210:	e3530000 	cmp	r3, #0
  10c214:	13a03001 	movne	r3, #1
  10c218:	03a03000 	moveq	r3, #0
  10c21c:	e6ef3073 	uxtb	r3, r3
  10c220:	e6af3073 	sxtb	r3, r3
  10c224:	e55b200a 	ldrb	r2, [fp, #-10]
  10c228:	e3520000 	cmp	r2, #0
  10c22c:	0a000001 	beq	10c238 <netconn_shutdown+0x4c>
  10c230:	e3a02002 	mov	r2, #2
  10c234:	ea000000 	b	10c23c <netconn_shutdown+0x50>
  10c238:	e3a02000 	mov	r2, #0
  10c23c:	e1823003 	orr	r3, r2, r3
  10c240:	e6af3073 	sxtb	r3, r3
  10c244:	e6ef3073 	uxtb	r3, r3
  10c248:	e1a01003 	mov	r1, r3
  10c24c:	e51b0008 	ldr	r0, [fp, #-8]
  10c250:	ebffffb6 	bl	10c130 <netconn_close_shutdown>
  10c254:	e1a03000 	mov	r3, r0
}
  10c258:	e1a00003 	mov	r0, r3
  10c25c:	e24bd004 	sub	sp, fp, #4
  10c260:	e8bd8800 	pop	{fp, pc}

0010c264 <netconn_join_leave_group>:
err_t
netconn_join_leave_group(struct netconn *conn,
                         const ip_addr_t *multiaddr,
                         const ip_addr_t *netif_addr,
                         enum netconn_igmp join_or_leave)
{
  10c264:	e92d4800 	push	{fp, lr}
  10c268:	e28db004 	add	fp, sp, #4
  10c26c:	e24dd030 	sub	sp, sp, #48	; 0x30
  10c270:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c274:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10c278:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10c27c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_join_leave_group: invalid conn",  (conn != NULL), return ERR_ARG;);
  10c280:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c284:	e3530000 	cmp	r3, #0
  10c288:	1a000008 	bne	10c2b0 <netconn_join_leave_group+0x4c>
  10c28c:	e3060638 	movw	r0, #26168	; 0x6638
  10c290:	e3400014 	movt	r0, #20
  10c294:	ebffdb9e 	bl	103114 <rt_kprintf>
  10c298:	e3a01e37 	mov	r1, #880	; 0x370
  10c29c:	e30603a4 	movw	r0, #25508	; 0x63a4
  10c2a0:	e3400014 	movt	r0, #20
  10c2a4:	ebfffb91 	bl	10b0f0 <sys_arch_assert>
  10c2a8:	e3e0300f 	mvn	r3, #15
  10c2ac:	ea00001b 	b	10c320 <netconn_join_leave_group+0xbc>

  API_MSG_VAR_ALLOC(msg);

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (multiaddr == NULL) {
  10c2b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c2b4:	e3530000 	cmp	r3, #0
  10c2b8:	1a000002 	bne	10c2c8 <netconn_join_leave_group+0x64>
    multiaddr = IP4_ADDR_ANY;
  10c2bc:	e3093910 	movw	r3, #39184	; 0x9910
  10c2c0:	e3403014 	movt	r3, #20
  10c2c4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
  if (netif_addr == NULL) {
  10c2c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c2cc:	e3530000 	cmp	r3, #0
  10c2d0:	1a000002 	bne	10c2e0 <netconn_join_leave_group+0x7c>
    netif_addr = IP4_ADDR_ANY;
  10c2d4:	e3093910 	movw	r3, #39184	; 0x9910
  10c2d8:	e3403014 	movt	r3, #20
  10c2dc:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_REF(msg).conn = conn;
  10c2e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c2e4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.jl.multiaddr = API_MSG_VAR_REF(multiaddr);
  10c2e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c2ec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.jl.netif_addr = API_MSG_VAR_REF(netif_addr);
  10c2f0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c2f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
  10c2f8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10c2fc:	e50b3010 	str	r3, [fp, #-16]
  err = netconn_apimsg(lwip_netconn_do_join_leave_group, &API_MSG_VAR_REF(msg));
  10c300:	e24b3020 	sub	r3, fp, #32
  10c304:	e1a01003 	mov	r1, r3
  10c308:	e30f0c3c 	movw	r0, #64572	; 0xfc3c
  10c30c:	e3400010 	movt	r0, #16
  10c310:	ebfffbcc 	bl	10b248 <netconn_apimsg>
  10c314:	e1a03000 	mov	r3, r0
  10c318:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10c31c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10c320:	e1a00003 	mov	r0, r3
  10c324:	e24bd004 	sub	sp, fp, #4
  10c328:	e8bd8800 	pop	{fp, pc}

0010c32c <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
  10c32c:	e92d4800 	push	{fp, lr}
  10c330:	e28db004 	add	fp, sp, #4
  10c334:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c338:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c33c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
  10c340:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c344:	e3530000 	cmp	r3, #0
  10c348:	1a000008 	bne	10c370 <netconn_gethostbyname+0x44>
  10c34c:	e3060660 	movw	r0, #26208	; 0x6660
  10c350:	e3400014 	movt	r0, #20
  10c354:	ebffdb6e 	bl	103114 <rt_kprintf>
  10c358:	e30013a5 	movw	r1, #933	; 0x3a5
  10c35c:	e30603a4 	movw	r0, #25508	; 0x63a4
  10c360:	e3400014 	movt	r0, #20
  10c364:	ebfffb61 	bl	10b0f0 <sys_arch_assert>
  10c368:	e3e0300f 	mvn	r3, #15
  10c36c:	ea000036 	b	10c44c <netconn_gethostbyname+0x120>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
  10c370:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c374:	e3530000 	cmp	r3, #0
  10c378:	1a000008 	bne	10c3a0 <netconn_gethostbyname+0x74>
  10c37c:	e3060684 	movw	r0, #26244	; 0x6684
  10c380:	e3400014 	movt	r0, #20
  10c384:	ebffdb62 	bl	103114 <rt_kprintf>
  10c388:	e30013a6 	movw	r1, #934	; 0x3a6
  10c38c:	e30603a4 	movw	r0, #25508	; 0x63a4
  10c390:	e3400014 	movt	r0, #20
  10c394:	ebfffb55 	bl	10b0f0 <sys_arch_assert>
  10c398:	e3e0300f 	mvn	r3, #15
  10c39c:	ea00002a 	b	10c44c <netconn_gethostbyname+0x120>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH-1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH-1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
  10c3a0:	e24b301d 	sub	r3, fp, #29
  10c3a4:	e50b300c 	str	r3, [fp, #-12]
  msg.sem = &sem;
  10c3a8:	e24b301c 	sub	r3, fp, #28
  10c3ac:	e50b3010 	str	r3, [fp, #-16]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
  10c3b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c3b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_VAR_REF(msg).name = name;
  10c3b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c3bc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
  10c3c0:	e51b3010 	ldr	r3, [fp, #-16]
  10c3c4:	e3a01000 	mov	r1, #0
  10c3c8:	e1a00003 	mov	r0, r3
  10c3cc:	ebfff91a 	bl	10a83c <sys_sem_new>
  10c3d0:	e1a03000 	mov	r3, r0
  10c3d4:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (err != ERR_OK) {
  10c3d8:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c3dc:	e3530000 	cmp	r3, #0
  10c3e0:	0a000001 	beq	10c3ec <netconn_gethostbyname+0xc0>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
  10c3e4:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c3e8:	ea000017 	b	10c44c <netconn_gethostbyname+0x120>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_callback(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg));
  10c3ec:	e24b3018 	sub	r3, fp, #24
  10c3f0:	e3a02001 	mov	r2, #1
  10c3f4:	e1a01003 	mov	r1, r3
  10c3f8:	e30f0e04 	movw	r0, #65028	; 0xfe04
  10c3fc:	e3400010 	movt	r0, #16
  10c400:	eb002775 	bl	1161dc <tcpip_callback_with_block>
  10c404:	e1a03000 	mov	r3, r0
  10c408:	e54b3005 	strb	r3, [fp, #-5]
  if (cberr != ERR_OK) {
  10c40c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c410:	e3530000 	cmp	r3, #0
  10c414:	0a000004 	beq	10c42c <netconn_gethostbyname+0x100>
#if !LWIP_NETCONN_SEM_PER_THREAD
    sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c418:	e51b3010 	ldr	r3, [fp, #-16]
  10c41c:	e1a00003 	mov	r0, r3
  10c420:	ebfff930 	bl	10a8e8 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
  10c424:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c428:	ea000007 	b	10c44c <netconn_gethostbyname+0x120>
  }
  sys_sem_wait(API_EXPR_REF_SEM(API_VAR_REF(msg).sem));
  10c42c:	e51b3010 	ldr	r3, [fp, #-16]
  10c430:	e3a01000 	mov	r1, #0
  10c434:	e1a00003 	mov	r0, r3
  10c438:	ebfff940 	bl	10a940 <sys_arch_sem_wait>
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c43c:	e51b3010 	ldr	r3, [fp, #-16]
  10c440:	e1a00003 	mov	r0, r3
  10c444:	ebfff927 	bl	10a8e8 <sys_sem_free>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
  10c448:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
}
  10c44c:	e1a00003 	mov	r0, r3
  10c450:	e24bd004 	sub	sp, fp, #4
  10c454:	e8bd8800 	pop	{fp, pc}

0010c458 <recv_raw>:
 * @see raw.h (struct raw_pcb.recv) for parameters and return value
 */
static u8_t
recv_raw(void *arg, struct raw_pcb *pcb, struct pbuf *p,
    const ip_addr_t *addr)
{
  10c458:	e92d4800 	push	{fp, lr}
  10c45c:	e28db004 	add	fp, sp, #4
  10c460:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c464:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10c468:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  10c46c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  10c470:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct pbuf *q;
  struct netbuf *buf;
  struct netconn *conn;

  LWIP_UNUSED_ARG(addr);
  conn = (struct netconn *)arg;
  10c474:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c478:	e50b300c 	str	r3, [fp, #-12]

  if ((conn != NULL) && sys_mbox_valid(&conn->recvmbox)) {
  10c47c:	e51b300c 	ldr	r3, [fp, #-12]
  10c480:	e3530000 	cmp	r3, #0
  10c484:	0a00006b 	beq	10c638 <recv_raw+0x1e0>
  10c488:	e51b300c 	ldr	r3, [fp, #-12]
  10c48c:	e2833014 	add	r3, r3, #20
  10c490:	e1a00003 	mov	r0, r3
  10c494:	ebfffacc 	bl	10afcc <sys_mbox_valid>
  10c498:	e1a03000 	mov	r3, r0
  10c49c:	e3530000 	cmp	r3, #0
  10c4a0:	0a000064 	beq	10c638 <recv_raw+0x1e0>
#if LWIP_SO_RCVBUF
    int recv_avail;
    SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c4a4:	ebffd764 	bl	10223c <rt_enter_critical>
  10c4a8:	e51b300c 	ldr	r3, [fp, #-12]
  10c4ac:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c4b0:	e50b3010 	str	r3, [fp, #-16]
  10c4b4:	ebffd766 	bl	102254 <rt_exit_critical>
    if ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize) {
  10c4b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c4bc:	e1d330b8 	ldrh	r3, [r3, #8]
  10c4c0:	e1a02003 	mov	r2, r3
  10c4c4:	e51b3010 	ldr	r3, [fp, #-16]
  10c4c8:	e0822003 	add	r2, r2, r3
  10c4cc:	e51b300c 	ldr	r3, [fp, #-12]
  10c4d0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  10c4d4:	e1520003 	cmp	r2, r3
  10c4d8:	da000001 	ble	10c4e4 <recv_raw+0x8c>
      return 0;
  10c4dc:	e3a03000 	mov	r3, #0
  10c4e0:	ea000055 	b	10c63c <recv_raw+0x1e4>
    }
#endif /* LWIP_SO_RCVBUF */
    /* copy the whole packet into new pbufs */
    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  10c4e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c4e8:	e1d330b8 	ldrh	r3, [r3, #8]
  10c4ec:	e3a02000 	mov	r2, #0
  10c4f0:	e1a01003 	mov	r1, r3
  10c4f4:	e3a00004 	mov	r0, #4
  10c4f8:	eb003768 	bl	11a2a0 <pbuf_alloc>
  10c4fc:	e50b0008 	str	r0, [fp, #-8]
    if (q != NULL) {
  10c500:	e51b3008 	ldr	r3, [fp, #-8]
  10c504:	e3530000 	cmp	r3, #0
  10c508:	0a000009 	beq	10c534 <recv_raw+0xdc>
      if (pbuf_copy(q, p) != ERR_OK) {
  10c50c:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  10c510:	e51b0008 	ldr	r0, [fp, #-8]
  10c514:	eb003bbd 	bl	11b410 <pbuf_copy>
  10c518:	e1a03000 	mov	r3, r0
  10c51c:	e3530000 	cmp	r3, #0
  10c520:	0a000003 	beq	10c534 <recv_raw+0xdc>
        pbuf_free(q);
  10c524:	e51b0008 	ldr	r0, [fp, #-8]
  10c528:	eb003a63 	bl	11aebc <pbuf_free>
        q = NULL;
  10c52c:	e3a03000 	mov	r3, #0
  10c530:	e50b3008 	str	r3, [fp, #-8]
      }
    }

    if (q != NULL) {
  10c534:	e51b3008 	ldr	r3, [fp, #-8]
  10c538:	e3530000 	cmp	r3, #0
  10c53c:	0a00003d 	beq	10c638 <recv_raw+0x1e0>
      u16_t len;
      buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c540:	e3a02081 	mov	r2, #129	; 0x81
  10c544:	e30616a8 	movw	r1, #26280	; 0x66a8
  10c548:	e3401014 	movt	r1, #20
  10c54c:	e3a00007 	mov	r0, #7
  10c550:	eb0032e3 	bl	1190e4 <memp_malloc_fn>
  10c554:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (buf == NULL) {
  10c558:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c55c:	e3530000 	cmp	r3, #0
  10c560:	1a000003 	bne	10c574 <recv_raw+0x11c>
        pbuf_free(q);
  10c564:	e51b0008 	ldr	r0, [fp, #-8]
  10c568:	eb003a53 	bl	11aebc <pbuf_free>
        return 0;
  10c56c:	e3a03000 	mov	r3, #0
  10c570:	ea000031 	b	10c63c <recv_raw+0x1e4>
      }

      buf->p = q;
  10c574:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c578:	e51b2008 	ldr	r2, [fp, #-8]
  10c57c:	e5832000 	str	r2, [r3]
      buf->ptr = q;
  10c580:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c584:	e51b2008 	ldr	r2, [fp, #-8]
  10c588:	e5832004 	str	r2, [r3, #4]
      ip_addr_copy(buf->addr, *ip_current_src_addr());
  10c58c:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  10c590:	e3403014 	movt	r3, #20
  10c594:	e5932010 	ldr	r2, [r3, #16]
  10c598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c59c:	e5832008 	str	r2, [r3, #8]
      buf->port = pcb->protocol;
  10c5a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c5a4:	e5d33010 	ldrb	r3, [r3, #16]
  10c5a8:	e6ff2073 	uxth	r2, r3
  10c5ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c5b0:	e1c320bc 	strh	r2, [r3, #12]

      len = q->tot_len;
  10c5b4:	e51b3008 	ldr	r3, [fp, #-8]
  10c5b8:	e1d330b8 	ldrh	r3, [r3, #8]
  10c5bc:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c5c0:	e51b300c 	ldr	r3, [fp, #-12]
  10c5c4:	e2833014 	add	r3, r3, #20
  10c5c8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10c5cc:	e1a00003 	mov	r0, r3
  10c5d0:	ebfffa1f 	bl	10ae54 <sys_mbox_trypost>
  10c5d4:	e1a03000 	mov	r3, r0
  10c5d8:	e3530000 	cmp	r3, #0
  10c5dc:	0a000003 	beq	10c5f0 <recv_raw+0x198>
        netbuf_delete(buf);
  10c5e0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10c5e4:	eb000e53 	bl	10ff38 <netbuf_delete>
        return 0;
  10c5e8:	e3a03000 	mov	r3, #0
  10c5ec:	ea000012 	b	10c63c <recv_raw+0x1e4>
      } else {
#if LWIP_SO_RCVBUF
        SYS_ARCH_INC(conn->recv_avail, len);
  10c5f0:	ebffd711 	bl	10223c <rt_enter_critical>
  10c5f4:	e51b300c 	ldr	r3, [fp, #-12]
  10c5f8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c5fc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10c600:	e0822003 	add	r2, r2, r3
  10c604:	e51b300c 	ldr	r3, [fp, #-12]
  10c608:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c60c:	ebffd710 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
        /* Register event with callback */
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c610:	e51b300c 	ldr	r3, [fp, #-12]
  10c614:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c618:	e3530000 	cmp	r3, #0
  10c61c:	0a000005 	beq	10c638 <recv_raw+0x1e0>
  10c620:	e51b300c 	ldr	r3, [fp, #-12]
  10c624:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c628:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10c62c:	e3a01000 	mov	r1, #0
  10c630:	e51b000c 	ldr	r0, [fp, #-12]
  10c634:	e12fff33 	blx	r3
      }
    }
  }

  return 0; /* do not eat the packet */
  10c638:	e3a03000 	mov	r3, #0
}
  10c63c:	e1a00003 	mov	r0, r3
  10c640:	e24bd004 	sub	sp, fp, #4
  10c644:	e8bd8800 	pop	{fp, pc}

0010c648 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
  10c648:	e92d4800 	push	{fp, lr}
  10c64c:	e28db004 	add	fp, sp, #4
  10c650:	e24dd020 	sub	sp, sp, #32
  10c654:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10c658:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10c65c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  10c660:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
  10c664:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10c668:	e3530000 	cmp	r3, #0
  10c66c:	1a000006 	bne	10c68c <recv_udp+0x44>
  10c670:	e30606d8 	movw	r0, #26328	; 0x66d8
  10c674:	e3400014 	movt	r0, #20
  10c678:	ebffdaa5 	bl	103114 <rt_kprintf>
  10c67c:	e3a010b1 	mov	r1, #177	; 0xb1
  10c680:	e30606a8 	movw	r0, #26280	; 0x66a8
  10c684:	e3400014 	movt	r0, #20
  10c688:	ebfffa98 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
  10c68c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c690:	e3530000 	cmp	r3, #0
  10c694:	1a000006 	bne	10c6b4 <recv_udp+0x6c>
  10c698:	e30606fc 	movw	r0, #26364	; 0x66fc
  10c69c:	e3400014 	movt	r0, #20
  10c6a0:	ebffda9b 	bl	103114 <rt_kprintf>
  10c6a4:	e3a010b2 	mov	r1, #178	; 0xb2
  10c6a8:	e30606a8 	movw	r0, #26280	; 0x66a8
  10c6ac:	e3400014 	movt	r0, #20
  10c6b0:	ebfffa8e 	bl	10b0f0 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10c6b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c6b8:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
  10c6bc:	e51b3008 	ldr	r3, [fp, #-8]
  10c6c0:	e5933008 	ldr	r3, [r3, #8]
  10c6c4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10c6c8:	e1520003 	cmp	r2, r3
  10c6cc:	0a000006 	beq	10c6ec <recv_udp+0xa4>
  10c6d0:	e306071c 	movw	r0, #26396	; 0x671c
  10c6d4:	e3400014 	movt	r0, #20
  10c6d8:	ebffda8d 	bl	103114 <rt_kprintf>
  10c6dc:	e3a010b4 	mov	r1, #180	; 0xb4
  10c6e0:	e30606a8 	movw	r0, #26280	; 0x66a8
  10c6e4:	e3400014 	movt	r0, #20
  10c6e8:	ebfffa80 	bl	10b0f0 <sys_arch_assert>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c6ec:	ebffd6d2 	bl	10223c <rt_enter_critical>
  10c6f0:	e51b3008 	ldr	r3, [fp, #-8]
  10c6f4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c6f8:	e50b300c 	str	r3, [fp, #-12]
  10c6fc:	ebffd6d4 	bl	102254 <rt_exit_critical>
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c700:	e51b3008 	ldr	r3, [fp, #-8]
  10c704:	e3530000 	cmp	r3, #0
  10c708:	0a00000f 	beq	10c74c <recv_udp+0x104>
  10c70c:	e51b3008 	ldr	r3, [fp, #-8]
  10c710:	e2833014 	add	r3, r3, #20
  10c714:	e1a00003 	mov	r0, r3
  10c718:	ebfffa2b 	bl	10afcc <sys_mbox_valid>
  10c71c:	e1a03000 	mov	r3, r0
  10c720:	e3530000 	cmp	r3, #0
  10c724:	0a000008 	beq	10c74c <recv_udp+0x104>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
  10c728:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c72c:	e1d330b8 	ldrh	r3, [r3, #8]
  10c730:	e1a02003 	mov	r2, r3
  10c734:	e51b300c 	ldr	r3, [fp, #-12]
  10c738:	e0822003 	add	r2, r2, r3
  10c73c:	e51b3008 	ldr	r3, [fp, #-8]
  10c740:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c744:	e1520003 	cmp	r2, r3
  10c748:	da000002 	ble	10c758 <recv_udp+0x110>
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
  10c74c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c750:	eb0039d9 	bl	11aebc <pbuf_free>
    return;
  10c754:	ea00003d 	b	10c850 <recv_udp+0x208>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c758:	e3a020c1 	mov	r2, #193	; 0xc1
  10c75c:	e30616a8 	movw	r1, #26280	; 0x66a8
  10c760:	e3401014 	movt	r1, #20
  10c764:	e3a00007 	mov	r0, #7
  10c768:	eb00325d 	bl	1190e4 <memp_malloc_fn>
  10c76c:	e50b0010 	str	r0, [fp, #-16]
  if (buf == NULL) {
  10c770:	e51b3010 	ldr	r3, [fp, #-16]
  10c774:	e3530000 	cmp	r3, #0
  10c778:	1a000002 	bne	10c788 <recv_udp+0x140>
    pbuf_free(p);
  10c77c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c780:	eb0039cd 	bl	11aebc <pbuf_free>
    return;
  10c784:	ea000031 	b	10c850 <recv_udp+0x208>
  } else {
    buf->p = p;
  10c788:	e51b3010 	ldr	r3, [fp, #-16]
  10c78c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c790:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10c794:	e51b3010 	ldr	r3, [fp, #-16]
  10c798:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c79c:	e5832004 	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
  10c7a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c7a4:	e3530000 	cmp	r3, #0
  10c7a8:	0a000002 	beq	10c7b8 <recv_udp+0x170>
  10c7ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c7b0:	e5933000 	ldr	r3, [r3]
  10c7b4:	ea000000 	b	10c7bc <recv_udp+0x174>
  10c7b8:	e3a03000 	mov	r3, #0
  10c7bc:	e51b2010 	ldr	r2, [fp, #-16]
  10c7c0:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10c7c4:	e51b3010 	ldr	r3, [fp, #-16]
  10c7c8:	e1db20b4 	ldrh	r2, [fp, #4]
  10c7cc:	e1c320bc 	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  10c7d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c7d4:	e1d330b8 	ldrh	r3, [r3, #8]
  10c7d8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c7dc:	e51b3008 	ldr	r3, [fp, #-8]
  10c7e0:	e2833014 	add	r3, r3, #20
  10c7e4:	e51b1010 	ldr	r1, [fp, #-16]
  10c7e8:	e1a00003 	mov	r0, r3
  10c7ec:	ebfff998 	bl	10ae54 <sys_mbox_trypost>
  10c7f0:	e1a03000 	mov	r3, r0
  10c7f4:	e3530000 	cmp	r3, #0
  10c7f8:	0a000002 	beq	10c808 <recv_udp+0x1c0>
    netbuf_delete(buf);
  10c7fc:	e51b0010 	ldr	r0, [fp, #-16]
  10c800:	eb000dcc 	bl	10ff38 <netbuf_delete>
    return;
  10c804:	ea000011 	b	10c850 <recv_udp+0x208>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10c808:	ebffd68b 	bl	10223c <rt_enter_critical>
  10c80c:	e51b3008 	ldr	r3, [fp, #-8]
  10c810:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c814:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  10c818:	e0822003 	add	r2, r2, r3
  10c81c:	e51b3008 	ldr	r3, [fp, #-8]
  10c820:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c824:	ebffd68a 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c828:	e51b3008 	ldr	r3, [fp, #-8]
  10c82c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c830:	e3530000 	cmp	r3, #0
  10c834:	0a000005 	beq	10c850 <recv_udp+0x208>
  10c838:	e51b3008 	ldr	r3, [fp, #-8]
  10c83c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c840:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10c844:	e3a01000 	mov	r1, #0
  10c848:	e51b0008 	ldr	r0, [fp, #-8]
  10c84c:	e12fff33 	blx	r3
  }
}
  10c850:	e24bd004 	sub	sp, fp, #4
  10c854:	e8bd8800 	pop	{fp, pc}

0010c858 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  10c858:	e92d4800 	push	{fp, lr}
  10c85c:	e28db004 	add	fp, sp, #4
  10c860:	e24dd018 	sub	sp, sp, #24
  10c864:	e50b0010 	str	r0, [fp, #-16]
  10c868:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10c86c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10c870:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
  10c874:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c878:	e3530000 	cmp	r3, #0
  10c87c:	1a000006 	bne	10c89c <recv_tcp+0x44>
  10c880:	e306073c 	movw	r0, #26428	; 0x673c
  10c884:	e3400014 	movt	r0, #20
  10c888:	ebffda21 	bl	103114 <rt_kprintf>
  10c88c:	e3a010f3 	mov	r1, #243	; 0xf3
  10c890:	e30606a8 	movw	r0, #26280	; 0x66a8
  10c894:	e3400014 	movt	r0, #20
  10c898:	ebfffa14 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  10c89c:	e51b3010 	ldr	r3, [fp, #-16]
  10c8a0:	e3530000 	cmp	r3, #0
  10c8a4:	1a000006 	bne	10c8c4 <recv_tcp+0x6c>
  10c8a8:	e3060760 	movw	r0, #26464	; 0x6760
  10c8ac:	e3400014 	movt	r0, #20
  10c8b0:	ebffda17 	bl	103114 <rt_kprintf>
  10c8b4:	e3a010f4 	mov	r1, #244	; 0xf4
  10c8b8:	e30606a8 	movw	r0, #26280	; 0x66a8
  10c8bc:	e3400014 	movt	r0, #20
  10c8c0:	ebfffa0a 	bl	10b0f0 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10c8c4:	e51b3010 	ldr	r3, [fp, #-16]
  10c8c8:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10c8cc:	e51b300c 	ldr	r3, [fp, #-12]
  10c8d0:	e3530000 	cmp	r3, #0
  10c8d4:	1a000001 	bne	10c8e0 <recv_tcp+0x88>
    return ERR_VAL;
  10c8d8:	e3e03005 	mvn	r3, #5
  10c8dc:	ea000053 	b	10ca30 <recv_tcp+0x1d8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
  10c8e0:	e51b300c 	ldr	r3, [fp, #-12]
  10c8e4:	e5933008 	ldr	r3, [r3, #8]
  10c8e8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10c8ec:	e1520003 	cmp	r2, r3
  10c8f0:	0a000006 	beq	10c910 <recv_tcp+0xb8>
  10c8f4:	e3060780 	movw	r0, #26496	; 0x6780
  10c8f8:	e3400014 	movt	r0, #20
  10c8fc:	ebffda04 	bl	103114 <rt_kprintf>
  10c900:	e3a010fa 	mov	r1, #250	; 0xfa
  10c904:	e30606a8 	movw	r0, #26280	; 0x66a8
  10c908:	e3400014 	movt	r0, #20
  10c90c:	ebfff9f7 	bl	10b0f0 <sys_arch_assert>

  if (!sys_mbox_valid(&conn->recvmbox)) {
  10c910:	e51b300c 	ldr	r3, [fp, #-12]
  10c914:	e2833014 	add	r3, r3, #20
  10c918:	e1a00003 	mov	r0, r3
  10c91c:	ebfff9aa 	bl	10afcc <sys_mbox_valid>
  10c920:	e1a03000 	mov	r3, r0
  10c924:	e3530000 	cmp	r3, #0
  10c928:	1a00000b 	bne	10c95c <recv_tcp+0x104>
    /* recvmbox already deleted */
    if (p != NULL) {
  10c92c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c930:	e3530000 	cmp	r3, #0
  10c934:	0a000006 	beq	10c954 <recv_tcp+0xfc>
      tcp_recved(pcb, p->tot_len);
  10c938:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c93c:	e1d330b8 	ldrh	r3, [r3, #8]
  10c940:	e1a01003 	mov	r1, r3
  10c944:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10c948:	eb0045e7 	bl	11e0ec <tcp_recved>
      pbuf_free(p);
  10c94c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10c950:	eb003959 	bl	11aebc <pbuf_free>
    }
    return ERR_OK;
  10c954:	e3a03000 	mov	r3, #0
  10c958:	ea000034 	b	10ca30 <recv_tcp+0x1d8>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
  10c95c:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  10c960:	e3530000 	cmp	r3, #0
  10c964:	0a00000b 	beq	10c998 <recv_tcp+0x140>
    NETCONN_SET_SAFE_ERR(conn, err);
  10c968:	e51b300c 	ldr	r3, [fp, #-12]
  10c96c:	e3530000 	cmp	r3, #0
  10c970:	0a000008 	beq	10c998 <recv_tcp+0x140>
  10c974:	ebffd630 	bl	10223c <rt_enter_critical>
  10c978:	e51b300c 	ldr	r3, [fp, #-12]
  10c97c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10c980:	e373000c 	cmn	r3, #12
  10c984:	ba000002 	blt	10c994 <recv_tcp+0x13c>
  10c988:	e51b300c 	ldr	r3, [fp, #-12]
  10c98c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10c990:	e5c3200c 	strb	r2, [r3, #12]
  10c994:	ebffd62e 	bl	102254 <rt_exit_critical>
  }

  if (p != NULL) {
  10c998:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c99c:	e3530000 	cmp	r3, #0
  10c9a0:	0a000003 	beq	10c9b4 <recv_tcp+0x15c>
    len = p->tot_len;
  10c9a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c9a8:	e1d330b8 	ldrh	r3, [r3, #8]
  10c9ac:	e14b30b6 	strh	r3, [fp, #-6]
  10c9b0:	ea000001 	b	10c9bc <recv_tcp+0x164>
  } else {
    len = 0;
  10c9b4:	e3a03000 	mov	r3, #0
  10c9b8:	e14b30b6 	strh	r3, [fp, #-6]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
  10c9bc:	e51b300c 	ldr	r3, [fp, #-12]
  10c9c0:	e2833014 	add	r3, r3, #20
  10c9c4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10c9c8:	e1a00003 	mov	r0, r3
  10c9cc:	ebfff920 	bl	10ae54 <sys_mbox_trypost>
  10c9d0:	e1a03000 	mov	r3, r0
  10c9d4:	e3530000 	cmp	r3, #0
  10c9d8:	0a000001 	beq	10c9e4 <recv_tcp+0x18c>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
  10c9dc:	e3e03000 	mvn	r3, #0
  10c9e0:	ea000012 	b	10ca30 <recv_tcp+0x1d8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10c9e4:	ebffd614 	bl	10223c <rt_enter_critical>
  10c9e8:	e51b300c 	ldr	r3, [fp, #-12]
  10c9ec:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c9f0:	e15b30b6 	ldrh	r3, [fp, #-6]
  10c9f4:	e0822003 	add	r2, r2, r3
  10c9f8:	e51b300c 	ldr	r3, [fp, #-12]
  10c9fc:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10ca00:	ebffd613 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10ca04:	e51b300c 	ldr	r3, [fp, #-12]
  10ca08:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca0c:	e3530000 	cmp	r3, #0
  10ca10:	0a000005 	beq	10ca2c <recv_tcp+0x1d4>
  10ca14:	e51b300c 	ldr	r3, [fp, #-12]
  10ca18:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca1c:	e15b20b6 	ldrh	r2, [fp, #-6]
  10ca20:	e3a01000 	mov	r1, #0
  10ca24:	e51b000c 	ldr	r0, [fp, #-12]
  10ca28:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10ca2c:	e3a03000 	mov	r3, #0
}
  10ca30:	e1a00003 	mov	r0, r3
  10ca34:	e24bd004 	sub	sp, fp, #4
  10ca38:	e8bd8800 	pop	{fp, pc}

0010ca3c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
  10ca3c:	e92d4800 	push	{fp, lr}
  10ca40:	e28db004 	add	fp, sp, #4
  10ca44:	e24dd010 	sub	sp, sp, #16
  10ca48:	e50b0010 	str	r0, [fp, #-16]
  10ca4c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn = (struct netconn *)arg;
  10ca50:	e51b3010 	ldr	r3, [fp, #-16]
  10ca54:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10ca58:	e51b3008 	ldr	r3, [fp, #-8]
  10ca5c:	e3530000 	cmp	r3, #0
  10ca60:	1a000006 	bne	10ca80 <poll_tcp+0x44>
  10ca64:	e30607a0 	movw	r0, #26528	; 0x67a0
  10ca68:	e3400014 	movt	r0, #20
  10ca6c:	ebffd9a8 	bl	103114 <rt_kprintf>
  10ca70:	e3001132 	movw	r1, #306	; 0x132
  10ca74:	e30606a8 	movw	r0, #26280	; 0x66a8
  10ca78:	e3400014 	movt	r0, #20
  10ca7c:	ebfff99b 	bl	10b0f0 <sys_arch_assert>

  if (conn->state == NETCONN_WRITE) {
  10ca80:	e51b3008 	ldr	r3, [fp, #-8]
  10ca84:	e5933004 	ldr	r3, [r3, #4]
  10ca88:	e3530001 	cmp	r3, #1
  10ca8c:	1a000003 	bne	10caa0 <poll_tcp+0x64>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10ca90:	e3a01001 	mov	r1, #1
  10ca94:	e51b0008 	ldr	r0, [fp, #-8]
  10ca98:	eb000926 	bl	10ef38 <lwip_netconn_do_writemore>
  10ca9c:	ea000006 	b	10cabc <poll_tcp+0x80>
  } else if (conn->state == NETCONN_CLOSE) {
  10caa0:	e51b3008 	ldr	r3, [fp, #-8]
  10caa4:	e5933004 	ldr	r3, [r3, #4]
  10caa8:	e3530004 	cmp	r3, #4
  10caac:	1a000002 	bne	10cabc <poll_tcp+0x80>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
      conn->current_msg->msg.sd.polls_left--;
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10cab0:	e3a01001 	mov	r1, #1
  10cab4:	e51b0008 	ldr	r0, [fp, #-8]
  10cab8:	eb000396 	bl	10d918 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
  10cabc:	e51b3008 	ldr	r3, [fp, #-8]
  10cac0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cac4:	e2033010 	and	r3, r3, #16
  10cac8:	e3530000 	cmp	r3, #0
  10cacc:	0a00001e 	beq	10cb4c <poll_tcp+0x110>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10cad0:	e51b3008 	ldr	r3, [fp, #-8]
  10cad4:	e5933008 	ldr	r3, [r3, #8]
  10cad8:	e3530000 	cmp	r3, #0
  10cadc:	0a00001a 	beq	10cb4c <poll_tcp+0x110>
  10cae0:	e51b3008 	ldr	r3, [fp, #-8]
  10cae4:	e5933008 	ldr	r3, [r3, #8]
  10cae8:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10caec:	e6bf3073 	sxth	r3, r3
  10caf0:	e3530000 	cmp	r3, #0
  10caf4:	aa000014 	bge	10cb4c <poll_tcp+0x110>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10caf8:	e51b3008 	ldr	r3, [fp, #-8]
  10cafc:	e5933008 	ldr	r3, [r3, #8]
  10cb00:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10cb04:	e3530058 	cmp	r3, #88	; 0x58
  10cb08:	8a00000f 	bhi	10cb4c <poll_tcp+0x110>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10cb0c:	e51b3008 	ldr	r3, [fp, #-8]
  10cb10:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cb14:	e3c33010 	bic	r3, r3, #16
  10cb18:	e6ef2073 	uxtb	r2, r3
  10cb1c:	e51b3008 	ldr	r3, [fp, #-8]
  10cb20:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10cb24:	e51b3008 	ldr	r3, [fp, #-8]
  10cb28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cb2c:	e3530000 	cmp	r3, #0
  10cb30:	0a000005 	beq	10cb4c <poll_tcp+0x110>
  10cb34:	e51b3008 	ldr	r3, [fp, #-8]
  10cb38:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cb3c:	e3a02000 	mov	r2, #0
  10cb40:	e3a01002 	mov	r1, #2
  10cb44:	e51b0008 	ldr	r0, [fp, #-8]
  10cb48:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10cb4c:	e3a03000 	mov	r3, #0
}
  10cb50:	e1a00003 	mov	r0, r3
  10cb54:	e24bd004 	sub	sp, fp, #4
  10cb58:	e8bd8800 	pop	{fp, pc}

0010cb5c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
  10cb5c:	e92d4800 	push	{fp, lr}
  10cb60:	e28db004 	add	fp, sp, #4
  10cb64:	e24dd018 	sub	sp, sp, #24
  10cb68:	e50b0010 	str	r0, [fp, #-16]
  10cb6c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10cb70:	e1a03002 	mov	r3, r2
  10cb74:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct netconn *conn = (struct netconn *)arg;
  10cb78:	e51b3010 	ldr	r3, [fp, #-16]
  10cb7c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10cb80:	e51b3008 	ldr	r3, [fp, #-8]
  10cb84:	e3530000 	cmp	r3, #0
  10cb88:	1a000006 	bne	10cba8 <sent_tcp+0x4c>
  10cb8c:	e30607a0 	movw	r0, #26528	; 0x67a0
  10cb90:	e3400014 	movt	r0, #20
  10cb94:	ebffd95e 	bl	103114 <rt_kprintf>
  10cb98:	e300115b 	movw	r1, #347	; 0x15b
  10cb9c:	e30606a8 	movw	r0, #26280	; 0x66a8
  10cba0:	e3400014 	movt	r0, #20
  10cba4:	ebfff951 	bl	10b0f0 <sys_arch_assert>

  if (conn) {
  10cba8:	e51b3008 	ldr	r3, [fp, #-8]
  10cbac:	e3530000 	cmp	r3, #0
  10cbb0:	0a00002d 	beq	10cc6c <sent_tcp+0x110>
    if (conn->state == NETCONN_WRITE) {
  10cbb4:	e51b3008 	ldr	r3, [fp, #-8]
  10cbb8:	e5933004 	ldr	r3, [r3, #4]
  10cbbc:	e3530001 	cmp	r3, #1
  10cbc0:	1a000003 	bne	10cbd4 <sent_tcp+0x78>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10cbc4:	e3a01001 	mov	r1, #1
  10cbc8:	e51b0008 	ldr	r0, [fp, #-8]
  10cbcc:	eb0008d9 	bl	10ef38 <lwip_netconn_do_writemore>
  10cbd0:	ea000006 	b	10cbf0 <sent_tcp+0x94>
    } else if (conn->state == NETCONN_CLOSE) {
  10cbd4:	e51b3008 	ldr	r3, [fp, #-8]
  10cbd8:	e5933004 	ldr	r3, [r3, #4]
  10cbdc:	e3530004 	cmp	r3, #4
  10cbe0:	1a000002 	bne	10cbf0 <sent_tcp+0x94>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10cbe4:	e3a01001 	mov	r1, #1
  10cbe8:	e51b0008 	ldr	r0, [fp, #-8]
  10cbec:	eb000349 	bl	10d918 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10cbf0:	e51b3008 	ldr	r3, [fp, #-8]
  10cbf4:	e5933008 	ldr	r3, [r3, #8]
  10cbf8:	e3530000 	cmp	r3, #0
  10cbfc:	0a00001a 	beq	10cc6c <sent_tcp+0x110>
  10cc00:	e51b3008 	ldr	r3, [fp, #-8]
  10cc04:	e5933008 	ldr	r3, [r3, #8]
  10cc08:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10cc0c:	e6bf3073 	sxth	r3, r3
  10cc10:	e3530000 	cmp	r3, #0
  10cc14:	aa000014 	bge	10cc6c <sent_tcp+0x110>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10cc18:	e51b3008 	ldr	r3, [fp, #-8]
  10cc1c:	e5933008 	ldr	r3, [r3, #8]
  10cc20:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10cc24:	e3530058 	cmp	r3, #88	; 0x58
  10cc28:	8a00000f 	bhi	10cc6c <sent_tcp+0x110>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10cc2c:	e51b3008 	ldr	r3, [fp, #-8]
  10cc30:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cc34:	e3c33010 	bic	r3, r3, #16
  10cc38:	e6ef2073 	uxtb	r2, r3
  10cc3c:	e51b3008 	ldr	r3, [fp, #-8]
  10cc40:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
  10cc44:	e51b3008 	ldr	r3, [fp, #-8]
  10cc48:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cc4c:	e3530000 	cmp	r3, #0
  10cc50:	0a000005 	beq	10cc6c <sent_tcp+0x110>
  10cc54:	e51b3008 	ldr	r3, [fp, #-8]
  10cc58:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cc5c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10cc60:	e3a01002 	mov	r1, #2
  10cc64:	e51b0008 	ldr	r0, [fp, #-8]
  10cc68:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10cc6c:	e3a03000 	mov	r3, #0
}
  10cc70:	e1a00003 	mov	r0, r3
  10cc74:	e24bd004 	sub	sp, fp, #4
  10cc78:	e8bd8800 	pop	{fp, pc}

0010cc7c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
  10cc7c:	e92d4800 	push	{fp, lr}
  10cc80:	e28db004 	add	fp, sp, #4
  10cc84:	e24dd018 	sub	sp, sp, #24
  10cc88:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10cc8c:	e1a03001 	mov	r3, r1
  10cc90:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
  10cc94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cc98:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10cc9c:	e51b3008 	ldr	r3, [fp, #-8]
  10cca0:	e3530000 	cmp	r3, #0
  10cca4:	1a000006 	bne	10ccc4 <err_tcp+0x48>
  10cca8:	e30607a0 	movw	r0, #26528	; 0x67a0
  10ccac:	e3400014 	movt	r0, #20
  10ccb0:	ebffd917 	bl	103114 <rt_kprintf>
  10ccb4:	e300117e 	movw	r1, #382	; 0x17e
  10ccb8:	e30606a8 	movw	r0, #26280	; 0x66a8
  10ccbc:	e3400014 	movt	r0, #20
  10ccc0:	ebfff90a 	bl	10b0f0 <sys_arch_assert>

  conn->pcb.tcp = NULL;
  10ccc4:	e51b3008 	ldr	r3, [fp, #-8]
  10ccc8:	e3a02000 	mov	r2, #0
  10cccc:	e5832008 	str	r2, [r3, #8]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
  10ccd0:	e51b3008 	ldr	r3, [fp, #-8]
  10ccd4:	e5933004 	ldr	r3, [r3, #4]
  10ccd8:	e50b300c 	str	r3, [fp, #-12]
  conn->state = NETCONN_NONE;
  10ccdc:	e51b3008 	ldr	r3, [fp, #-8]
  10cce0:	e3a02000 	mov	r2, #0
  10cce4:	e5832004 	str	r2, [r3, #4]

  if (old_state == NETCONN_CLOSE) {
  10cce8:	e51b300c 	ldr	r3, [fp, #-12]
  10ccec:	e3530004 	cmp	r3, #4
  10ccf0:	1a00000e 	bne	10cd30 <err_tcp+0xb4>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
  10ccf4:	e3a03000 	mov	r3, #0
  10ccf8:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10ccfc:	e51b3008 	ldr	r3, [fp, #-8]
  10cd00:	e3530000 	cmp	r3, #0
  10cd04:	0a00000e 	beq	10cd44 <err_tcp+0xc8>
  10cd08:	ebffd54b 	bl	10223c <rt_enter_critical>
  10cd0c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd10:	e1d330dc 	ldrsb	r3, [r3, #12]
  10cd14:	e373000c 	cmn	r3, #12
  10cd18:	ba000002 	blt	10cd28 <err_tcp+0xac>
  10cd1c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd20:	e3a02000 	mov	r2, #0
  10cd24:	e5c3200c 	strb	r2, [r3, #12]
  10cd28:	ebffd549 	bl	102254 <rt_exit_critical>
  10cd2c:	ea000004 	b	10cd44 <err_tcp+0xc8>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
  10cd30:	ebffd541 	bl	10223c <rt_enter_critical>
  10cd34:	e51b3008 	ldr	r3, [fp, #-8]
  10cd38:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cd3c:	e5c3200c 	strb	r2, [r3, #12]
  10cd40:	ebffd543 	bl	102254 <rt_exit_critical>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10cd44:	e51b3008 	ldr	r3, [fp, #-8]
  10cd48:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd4c:	e3530000 	cmp	r3, #0
  10cd50:	0a000005 	beq	10cd6c <err_tcp+0xf0>
  10cd54:	e51b3008 	ldr	r3, [fp, #-8]
  10cd58:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd5c:	e3a02000 	mov	r2, #0
  10cd60:	e3a01004 	mov	r1, #4
  10cd64:	e51b0008 	ldr	r0, [fp, #-8]
  10cd68:	e12fff33 	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10cd6c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd70:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd74:	e3530000 	cmp	r3, #0
  10cd78:	0a000005 	beq	10cd94 <err_tcp+0x118>
  10cd7c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd80:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd84:	e3a02000 	mov	r2, #0
  10cd88:	e3a01000 	mov	r1, #0
  10cd8c:	e51b0008 	ldr	r0, [fp, #-8]
  10cd90:	e12fff33 	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10cd94:	e51b3008 	ldr	r3, [fp, #-8]
  10cd98:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd9c:	e3530000 	cmp	r3, #0
  10cda0:	0a000005 	beq	10cdbc <err_tcp+0x140>
  10cda4:	e51b3008 	ldr	r3, [fp, #-8]
  10cda8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cdac:	e3a02000 	mov	r2, #0
  10cdb0:	e3a01002 	mov	r1, #2
  10cdb4:	e51b0008 	ldr	r0, [fp, #-8]
  10cdb8:	e12fff33 	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10cdbc:	e51b3008 	ldr	r3, [fp, #-8]
  10cdc0:	e2833014 	add	r3, r3, #20
  10cdc4:	e1a00003 	mov	r0, r3
  10cdc8:	ebfff87f 	bl	10afcc <sys_mbox_valid>
  10cdcc:	e1a03000 	mov	r3, r0
  10cdd0:	e3530000 	cmp	r3, #0
  10cdd4:	0a000004 	beq	10cdec <err_tcp+0x170>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
  10cdd8:	e51b3008 	ldr	r3, [fp, #-8]
  10cddc:	e2833014 	add	r3, r3, #20
  10cde0:	e3a01000 	mov	r1, #0
  10cde4:	e1a00003 	mov	r0, r3
  10cde8:	ebfff819 	bl	10ae54 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10cdec:	e51b3008 	ldr	r3, [fp, #-8]
  10cdf0:	e2833018 	add	r3, r3, #24
  10cdf4:	e1a00003 	mov	r0, r3
  10cdf8:	ebfff873 	bl	10afcc <sys_mbox_valid>
  10cdfc:	e1a03000 	mov	r3, r0
  10ce00:	e3530000 	cmp	r3, #0
  10ce04:	0a000004 	beq	10ce1c <err_tcp+0x1a0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
  10ce08:	e51b3008 	ldr	r3, [fp, #-8]
  10ce0c:	e2833018 	add	r3, r3, #24
  10ce10:	e3a01000 	mov	r1, #0
  10ce14:	e1a00003 	mov	r0, r3
  10ce18:	ebfff80d 	bl	10ae54 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
  10ce1c:	e51b300c 	ldr	r3, [fp, #-12]
  10ce20:	e3530001 	cmp	r3, #1
  10ce24:	0a000005 	beq	10ce40 <err_tcp+0x1c4>
  10ce28:	e51b300c 	ldr	r3, [fp, #-12]
  10ce2c:	e3530004 	cmp	r3, #4
  10ce30:	0a000002 	beq	10ce40 <err_tcp+0x1c4>
  10ce34:	e51b300c 	ldr	r3, [fp, #-12]
  10ce38:	e3530003 	cmp	r3, #3
  10ce3c:	1a000042 	bne	10cf4c <err_tcp+0x2d0>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
  10ce40:	e51b3008 	ldr	r3, [fp, #-8]
  10ce44:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ce48:	e2033004 	and	r3, r3, #4
  10ce4c:	e3530000 	cmp	r3, #0
  10ce50:	13a03001 	movne	r3, #1
  10ce54:	03a03000 	moveq	r3, #0
  10ce58:	e6ef3073 	uxtb	r3, r3
  10ce5c:	e50b3010 	str	r3, [fp, #-16]
    SET_NONBLOCKING_CONNECT(conn, 0);
  10ce60:	e51b3008 	ldr	r3, [fp, #-8]
  10ce64:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ce68:	e3c33004 	bic	r3, r3, #4
  10ce6c:	e6ef2073 	uxtb	r2, r3
  10ce70:	e51b3008 	ldr	r3, [fp, #-8]
  10ce74:	e5c32030 	strb	r2, [r3, #48]	; 0x30

    if (!was_nonblocking_connect) {
  10ce78:	e51b3010 	ldr	r3, [fp, #-16]
  10ce7c:	e3530000 	cmp	r3, #0
  10ce80:	1a00003d 	bne	10cf7c <err_tcp+0x300>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10ce84:	e51b3008 	ldr	r3, [fp, #-8]
  10ce88:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ce8c:	e3530000 	cmp	r3, #0
  10ce90:	1a000006 	bne	10ceb0 <err_tcp+0x234>
  10ce94:	e30607b0 	movw	r0, #26544	; 0x67b0
  10ce98:	e3400014 	movt	r0, #20
  10ce9c:	ebffd89c 	bl	103114 <rt_kprintf>
  10cea0:	e30011ad 	movw	r1, #429	; 0x1ad
  10cea4:	e30606a8 	movw	r0, #26280	; 0x66a8
  10cea8:	e3400014 	movt	r0, #20
  10ceac:	ebfff88f 	bl	10b0f0 <sys_arch_assert>
      conn->current_msg->err = err;
  10ceb0:	e51b3008 	ldr	r3, [fp, #-8]
  10ceb4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ceb8:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cebc:	e5c32004 	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10cec0:	e51b3008 	ldr	r3, [fp, #-8]
  10cec4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cec8:	e5933000 	ldr	r3, [r3]
  10cecc:	e2833010 	add	r3, r3, #16
  10ced0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
  10ced4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10ced8:	ebfff6cb 	bl	10aa0c <sys_sem_valid>
  10cedc:	e1a03000 	mov	r3, r0
  10cee0:	e3530000 	cmp	r3, #0
  10cee4:	1a000006 	bne	10cf04 <err_tcp+0x288>
  10cee8:	e30607cc 	movw	r0, #26572	; 0x67cc
  10ceec:	e3400014 	movt	r0, #20
  10cef0:	ebffd887 	bl	103114 <rt_kprintf>
  10cef4:	e3a01e1b 	mov	r1, #432	; 0x1b0
  10cef8:	e30606a8 	movw	r0, #26280	; 0x66a8
  10cefc:	e3400014 	movt	r0, #20
  10cf00:	ebfff87a 	bl	10b0f0 <sys_arch_assert>
      conn->current_msg = NULL;
  10cf04:	e51b3008 	ldr	r3, [fp, #-8]
  10cf08:	e3a02000 	mov	r2, #0
  10cf0c:	e5832038 	str	r2, [r3, #56]	; 0x38
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
  10cf10:	e51b3008 	ldr	r3, [fp, #-8]
  10cf14:	e3530000 	cmp	r3, #0
  10cf18:	0a000008 	beq	10cf40 <err_tcp+0x2c4>
  10cf1c:	ebffd4c6 	bl	10223c <rt_enter_critical>
  10cf20:	e51b3008 	ldr	r3, [fp, #-8]
  10cf24:	e1d330dc 	ldrsb	r3, [r3, #12]
  10cf28:	e373000c 	cmn	r3, #12
  10cf2c:	ba000002 	blt	10cf3c <err_tcp+0x2c0>
  10cf30:	e51b3008 	ldr	r3, [fp, #-8]
  10cf34:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cf38:	e5c3200c 	strb	r2, [r3, #12]
  10cf3c:	ebffd4c4 	bl	102254 <rt_exit_critical>
      sys_sem_signal(op_completed_sem);
  10cf40:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10cf44:	ebfff672 	bl	10a914 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
  10cf48:	ea00000b 	b	10cf7c <err_tcp+0x300>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
  10cf4c:	e51b3008 	ldr	r3, [fp, #-8]
  10cf50:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cf54:	e3530000 	cmp	r3, #0
  10cf58:	0a000008 	beq	10cf80 <err_tcp+0x304>
  10cf5c:	e30607e8 	movw	r0, #26600	; 0x67e8
  10cf60:	e3400014 	movt	r0, #20
  10cf64:	ebffd86a 	bl	103114 <rt_kprintf>
  10cf68:	e30011b7 	movw	r1, #439	; 0x1b7
  10cf6c:	e30606a8 	movw	r0, #26280	; 0x66a8
  10cf70:	e3400014 	movt	r0, #20
  10cf74:	ebfff85d 	bl	10b0f0 <sys_arch_assert>
  }
}
  10cf78:	ea000000 	b	10cf80 <err_tcp+0x304>
      (old_state == NETCONN_CONNECT)) {
  10cf7c:	e320f000 	nop	{0}
}
  10cf80:	e320f000 	nop	{0}
  10cf84:	e24bd004 	sub	sp, fp, #4
  10cf88:	e8bd8800 	pop	{fp, pc}

0010cf8c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
  10cf8c:	e92d4800 	push	{fp, lr}
  10cf90:	e28db004 	add	fp, sp, #4
  10cf94:	e24dd010 	sub	sp, sp, #16
  10cf98:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
  10cf9c:	e51b3010 	ldr	r3, [fp, #-16]
  10cfa0:	e5933008 	ldr	r3, [r3, #8]
  10cfa4:	e50b3008 	str	r3, [fp, #-8]
  tcp_arg(pcb, conn);
  10cfa8:	e51b1010 	ldr	r1, [fp, #-16]
  10cfac:	e51b0008 	ldr	r0, [fp, #-8]
  10cfb0:	eb004aee 	bl	11fb70 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
  10cfb4:	e30c1858 	movw	r1, #51288	; 0xc858
  10cfb8:	e3401010 	movt	r1, #16
  10cfbc:	e51b0008 	ldr	r0, [fp, #-8]
  10cfc0:	eb004af9 	bl	11fbac <tcp_recv>
  tcp_sent(pcb, sent_tcp);
  10cfc4:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
  10cfc8:	e3401010 	movt	r1, #16
  10cfcc:	e51b0008 	ldr	r0, [fp, #-8]
  10cfd0:	eb004b0e 	bl	11fc10 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
  10cfd4:	e3a02002 	mov	r2, #2
  10cfd8:	e30c1a3c 	movw	r1, #51772	; 0xca3c
  10cfdc:	e3401010 	movt	r1, #16
  10cfe0:	e51b0008 	ldr	r0, [fp, #-8]
  10cfe4:	eb004b50 	bl	11fd2c <tcp_poll>
  tcp_err(pcb, err_tcp);
  10cfe8:	e30c1c7c 	movw	r1, #52348	; 0xcc7c
  10cfec:	e3401010 	movt	r1, #16
  10cff0:	e51b0008 	ldr	r0, [fp, #-8]
  10cff4:	eb004b1e 	bl	11fc74 <tcp_err>
}
  10cff8:	e320f000 	nop	{0}
  10cffc:	e24bd004 	sub	sp, fp, #4
  10d000:	e8bd8800 	pop	{fp, pc}

0010d004 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  10d004:	e92d4800 	push	{fp, lr}
  10d008:	e28db004 	add	fp, sp, #4
  10d00c:	e24dd020 	sub	sp, sp, #32
  10d010:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10d014:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10d018:	e1a03002 	mov	r3, r2
  10d01c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
  10d020:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d024:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (conn == NULL) {
  10d028:	e51b3008 	ldr	r3, [fp, #-8]
  10d02c:	e3530000 	cmp	r3, #0
  10d030:	1a000001 	bne	10d03c <accept_function+0x38>
    return ERR_VAL;
  10d034:	e3e03005 	mvn	r3, #5
  10d038:	ea00007d 	b	10d234 <accept_function+0x230>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10d03c:	e51b3008 	ldr	r3, [fp, #-8]
  10d040:	e2833018 	add	r3, r3, #24
  10d044:	e1a00003 	mov	r0, r3
  10d048:	ebfff7df 	bl	10afcc <sys_mbox_valid>
  10d04c:	e1a03000 	mov	r3, r0
  10d050:	e3530000 	cmp	r3, #0
  10d054:	1a000001 	bne	10d060 <accept_function+0x5c>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
  10d058:	e3e03005 	mvn	r3, #5
  10d05c:	ea000074 	b	10d234 <accept_function+0x230>
  }

  if (newpcb == NULL) {
  10d060:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10d064:	e3530000 	cmp	r3, #0
  10d068:	1a000014 	bne	10d0c0 <accept_function+0xbc>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10d06c:	e51b3008 	ldr	r3, [fp, #-8]
  10d070:	e2833018 	add	r3, r3, #24
  10d074:	e30f158c 	movw	r1, #62860	; 0xf58c
  10d078:	e3401014 	movt	r1, #20
  10d07c:	e1a00003 	mov	r0, r3
  10d080:	ebfff773 	bl	10ae54 <sys_mbox_trypost>
  10d084:	e1a03000 	mov	r3, r0
  10d088:	e3530000 	cmp	r3, #0
  10d08c:	1a000009 	bne	10d0b8 <accept_function+0xb4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d090:	e51b3008 	ldr	r3, [fp, #-8]
  10d094:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d098:	e3530000 	cmp	r3, #0
  10d09c:	0a000005 	beq	10d0b8 <accept_function+0xb4>
  10d0a0:	e51b3008 	ldr	r3, [fp, #-8]
  10d0a4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d0a8:	e3a02000 	mov	r2, #0
  10d0ac:	e3a01000 	mov	r1, #0
  10d0b0:	e51b0008 	ldr	r0, [fp, #-8]
  10d0b4:	e12fff33 	blx	r3
    }
    return ERR_VAL;
  10d0b8:	e3e03005 	mvn	r3, #5
  10d0bc:	ea00005c 	b	10d234 <accept_function+0x230>
  }

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
  10d0c0:	e51b3008 	ldr	r3, [fp, #-8]
  10d0c4:	e5932000 	ldr	r2, [r3]
  10d0c8:	e51b3008 	ldr	r3, [fp, #-8]
  10d0cc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d0d0:	e1a01003 	mov	r1, r3
  10d0d4:	e1a00002 	mov	r0, r2
  10d0d8:	eb0000f7 	bl	10d4bc <netconn_alloc>
  10d0dc:	e50b000c 	str	r0, [fp, #-12]
  if (newconn == NULL) {
  10d0e0:	e51b300c 	ldr	r3, [fp, #-12]
  10d0e4:	e3530000 	cmp	r3, #0
  10d0e8:	1a000014 	bne	10d140 <accept_function+0x13c>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10d0ec:	e51b3008 	ldr	r3, [fp, #-8]
  10d0f0:	e2833018 	add	r3, r3, #24
  10d0f4:	e30f158c 	movw	r1, #62860	; 0xf58c
  10d0f8:	e3401014 	movt	r1, #20
  10d0fc:	e1a00003 	mov	r0, r3
  10d100:	ebfff753 	bl	10ae54 <sys_mbox_trypost>
  10d104:	e1a03000 	mov	r3, r0
  10d108:	e3530000 	cmp	r3, #0
  10d10c:	1a000009 	bne	10d138 <accept_function+0x134>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d110:	e51b3008 	ldr	r3, [fp, #-8]
  10d114:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d118:	e3530000 	cmp	r3, #0
  10d11c:	0a000005 	beq	10d138 <accept_function+0x134>
  10d120:	e51b3008 	ldr	r3, [fp, #-8]
  10d124:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d128:	e3a02000 	mov	r2, #0
  10d12c:	e3a01000 	mov	r1, #0
  10d130:	e51b0008 	ldr	r0, [fp, #-8]
  10d134:	e12fff33 	blx	r3
    }
    return ERR_MEM;
  10d138:	e3e03000 	mvn	r3, #0
  10d13c:	ea00003c 	b	10d234 <accept_function+0x230>
  }
  newconn->pcb.tcp = newpcb;
  10d140:	e51b300c 	ldr	r3, [fp, #-12]
  10d144:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10d148:	e5832008 	str	r2, [r3, #8]
  setup_tcp(newconn);
  10d14c:	e51b000c 	ldr	r0, [fp, #-12]
  10d150:	ebffff8d 	bl	10cf8c <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
  10d154:	e51b300c 	ldr	r3, [fp, #-12]
  10d158:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10d15c:	e5c3200c 	strb	r2, [r3, #12]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
  10d160:	e51b3008 	ldr	r3, [fp, #-8]
  10d164:	e2833018 	add	r3, r3, #24
  10d168:	e51b100c 	ldr	r1, [fp, #-12]
  10d16c:	e1a00003 	mov	r0, r3
  10d170:	ebfff737 	bl	10ae54 <sys_mbox_trypost>
  10d174:	e1a03000 	mov	r3, r0
  10d178:	e3530000 	cmp	r3, #0
  10d17c:	0a000021 	beq	10d208 <accept_function+0x204>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
  10d180:	e51b300c 	ldr	r3, [fp, #-12]
  10d184:	e5933008 	ldr	r3, [r3, #8]
  10d188:	e50b3010 	str	r3, [fp, #-16]
    tcp_arg(pcb, NULL);
  10d18c:	e3a01000 	mov	r1, #0
  10d190:	e51b0010 	ldr	r0, [fp, #-16]
  10d194:	eb004a75 	bl	11fb70 <tcp_arg>
    tcp_recv(pcb, NULL);
  10d198:	e3a01000 	mov	r1, #0
  10d19c:	e51b0010 	ldr	r0, [fp, #-16]
  10d1a0:	eb004a81 	bl	11fbac <tcp_recv>
    tcp_sent(pcb, NULL);
  10d1a4:	e3a01000 	mov	r1, #0
  10d1a8:	e51b0010 	ldr	r0, [fp, #-16]
  10d1ac:	eb004a97 	bl	11fc10 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
  10d1b0:	e3a02000 	mov	r2, #0
  10d1b4:	e3a01000 	mov	r1, #0
  10d1b8:	e51b0010 	ldr	r0, [fp, #-16]
  10d1bc:	eb004ada 	bl	11fd2c <tcp_poll>
    tcp_err(pcb, NULL);
  10d1c0:	e3a01000 	mov	r1, #0
  10d1c4:	e51b0010 	ldr	r0, [fp, #-16]
  10d1c8:	eb004aa9 	bl	11fc74 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
  10d1cc:	e51b300c 	ldr	r3, [fp, #-12]
  10d1d0:	e3a02000 	mov	r2, #0
  10d1d4:	e5832008 	str	r2, [r3, #8]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
  10d1d8:	e51b300c 	ldr	r3, [fp, #-12]
  10d1dc:	e2833014 	add	r3, r3, #20
  10d1e0:	e1a00003 	mov	r0, r3
  10d1e4:	ebfff6b1 	bl	10acb0 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
  10d1e8:	e51b300c 	ldr	r3, [fp, #-12]
  10d1ec:	e2833014 	add	r3, r3, #20
  10d1f0:	e1a00003 	mov	r0, r3
  10d1f4:	ebfff77e 	bl	10aff4 <sys_mbox_set_invalid>
    netconn_free(newconn);
  10d1f8:	e51b000c 	ldr	r0, [fp, #-12]
  10d1fc:	eb000122 	bl	10d68c <netconn_free>
    return ERR_MEM;
  10d200:	e3e03000 	mvn	r3, #0
  10d204:	ea00000a 	b	10d234 <accept_function+0x230>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d208:	e51b3008 	ldr	r3, [fp, #-8]
  10d20c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d210:	e3530000 	cmp	r3, #0
  10d214:	0a000005 	beq	10d230 <accept_function+0x22c>
  10d218:	e51b3008 	ldr	r3, [fp, #-8]
  10d21c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d220:	e3a02000 	mov	r2, #0
  10d224:	e3a01000 	mov	r1, #0
  10d228:	e51b0008 	ldr	r0, [fp, #-8]
  10d22c:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10d230:	e3a03000 	mov	r3, #0
}
  10d234:	e1a00003 	mov	r0, r3
  10d238:	e24bd004 	sub	sp, fp, #4
  10d23c:	e8bd8800 	pop	{fp, pc}

0010d240 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
  10d240:	e92d4810 	push	{r4, fp, lr}
  10d244:	e28db008 	add	fp, sp, #8
  10d248:	e24dd014 	sub	sp, sp, #20
  10d24c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
  10d250:	e3a03000 	mov	r3, #0
  10d254:	e50b3010 	str	r3, [fp, #-16]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
  10d258:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d25c:	e5933000 	ldr	r3, [r3]
  10d260:	e5933008 	ldr	r3, [r3, #8]
  10d264:	e3530000 	cmp	r3, #0
  10d268:	0a000006 	beq	10d288 <pcb_new+0x48>
  10d26c:	e3060804 	movw	r0, #26628	; 0x6804
  10d270:	e3400014 	movt	r0, #20
  10d274:	ebffd7a6 	bl	103114 <rt_kprintf>
  10d278:	e3001226 	movw	r1, #550	; 0x226
  10d27c:	e30606a8 	movw	r0, #26280	; 0x66a8
  10d280:	e3400014 	movt	r0, #20
  10d284:	ebfff799 	bl	10b0f0 <sys_arch_assert>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
  10d288:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d28c:	e5933000 	ldr	r3, [r3]
  10d290:	e5933000 	ldr	r3, [r3]
  10d294:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d298:	e3530020 	cmp	r3, #32
  10d29c:	0a00001d 	beq	10d318 <pcb_new+0xd8>
  10d2a0:	e3530040 	cmp	r3, #64	; 0x40
  10d2a4:	0a000002 	beq	10d2b4 <pcb_new+0x74>
  10d2a8:	e3530010 	cmp	r3, #16
  10d2ac:	0a00003a 	beq	10d39c <pcb_new+0x15c>
  10d2b0:	ea00004b 	b	10d3e4 <pcb_new+0x1a4>
#if LWIP_RAW
  case NETCONN_RAW:
    msg->conn->pcb.raw = raw_new_ip_type(iptype, msg->msg.n.proto);
  10d2b4:	e51b3010 	ldr	r3, [fp, #-16]
  10d2b8:	e6ef2073 	uxtb	r2, r3
  10d2bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2c0:	e5d31008 	ldrb	r1, [r3, #8]
  10d2c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2c8:	e5934000 	ldr	r4, [r3]
  10d2cc:	e1a00002 	mov	r0, r2
  10d2d0:	eb003d6b 	bl	11c884 <raw_new_ip_type>
  10d2d4:	e1a03000 	mov	r3, r0
  10d2d8:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.raw != NULL) {
  10d2dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2e0:	e5933000 	ldr	r3, [r3]
  10d2e4:	e5933008 	ldr	r3, [r3, #8]
  10d2e8:	e3530000 	cmp	r3, #0
  10d2ec:	0a000040 	beq	10d3f4 <pcb_new+0x1b4>
      if (NETCONNTYPE_ISIPV6(msg->conn->type) && msg->conn->pcb.raw->protocol == IP6_NEXTH_ICMP6) {
        msg->conn->pcb.raw->chksum_reqd = 1;
        msg->conn->pcb.raw->chksum_offset = 2;
      }
#endif /* LWIP_IPV6 */
      raw_recv(msg->conn->pcb.raw, recv_raw, msg->conn);
  10d2f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2f4:	e5933000 	ldr	r3, [r3]
  10d2f8:	e5930008 	ldr	r0, [r3, #8]
  10d2fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d300:	e5933000 	ldr	r3, [r3]
  10d304:	e1a02003 	mov	r2, r3
  10d308:	e30c1458 	movw	r1, #50264	; 0xc458
  10d30c:	e3401010 	movt	r1, #16
  10d310:	eb003c58 	bl	11c478 <raw_recv>
    }
    break;
  10d314:	ea000036 	b	10d3f4 <pcb_new+0x1b4>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
  10d318:	e51b3010 	ldr	r3, [fp, #-16]
  10d31c:	e6ef2073 	uxtb	r2, r3
  10d320:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d324:	e5934000 	ldr	r4, [r3]
  10d328:	e1a00002 	mov	r0, r2
  10d32c:	eb006dfe 	bl	128b2c <udp_new_ip_type>
  10d330:	e1a03000 	mov	r3, r0
  10d334:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.udp != NULL) {
  10d338:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d33c:	e5933000 	ldr	r3, [r3]
  10d340:	e5933008 	ldr	r3, [r3, #8]
  10d344:	e3530000 	cmp	r3, #0
  10d348:	0a00002b 	beq	10d3fc <pcb_new+0x1bc>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
  10d34c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d350:	e5933000 	ldr	r3, [r3]
  10d354:	e5933000 	ldr	r3, [r3]
  10d358:	e3530022 	cmp	r3, #34	; 0x22
  10d35c:	1a000004 	bne	10d374 <pcb_new+0x134>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
  10d360:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d364:	e5933000 	ldr	r3, [r3]
  10d368:	e5933008 	ldr	r3, [r3, #8]
  10d36c:	e3a02001 	mov	r2, #1
  10d370:	e5c32010 	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
  10d374:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d378:	e5933000 	ldr	r3, [r3]
  10d37c:	e5930008 	ldr	r0, [r3, #8]
  10d380:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d384:	e5933000 	ldr	r3, [r3]
  10d388:	e1a02003 	mov	r2, r3
  10d38c:	e30c1648 	movw	r1, #50760	; 0xc648
  10d390:	e3401010 	movt	r1, #16
  10d394:	eb006d89 	bl	1289c0 <udp_recv>
    }
    break;
  10d398:	ea000017 	b	10d3fc <pcb_new+0x1bc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
  10d39c:	e51b3010 	ldr	r3, [fp, #-16]
  10d3a0:	e6ef2073 	uxtb	r2, r3
  10d3a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d3a8:	e5934000 	ldr	r4, [r3]
  10d3ac:	e1a00002 	mov	r0, r2
  10d3b0:	eb0049e2 	bl	11fb40 <tcp_new_ip_type>
  10d3b4:	e1a03000 	mov	r3, r0
  10d3b8:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.tcp != NULL) {
  10d3bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d3c0:	e5933000 	ldr	r3, [r3]
  10d3c4:	e5933008 	ldr	r3, [r3, #8]
  10d3c8:	e3530000 	cmp	r3, #0
  10d3cc:	0a00000c 	beq	10d404 <pcb_new+0x1c4>
      setup_tcp(msg->conn);
  10d3d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d3d4:	e5933000 	ldr	r3, [r3]
  10d3d8:	e1a00003 	mov	r0, r3
  10d3dc:	ebfffeea 	bl	10cf8c <setup_tcp>
    }
    break;
  10d3e0:	ea000007 	b	10d404 <pcb_new+0x1c4>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
  10d3e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d3e8:	e3e02005 	mvn	r2, #5
  10d3ec:	e5c32004 	strb	r2, [r3, #4]
    return;
  10d3f0:	ea00000c 	b	10d428 <pcb_new+0x1e8>
    break;
  10d3f4:	e320f000 	nop	{0}
  10d3f8:	ea000002 	b	10d408 <pcb_new+0x1c8>
    break;
  10d3fc:	e320f000 	nop	{0}
  10d400:	ea000000 	b	10d408 <pcb_new+0x1c8>
    break;
  10d404:	e320f000 	nop	{0}
  }
  if (msg->conn->pcb.ip == NULL) {
  10d408:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d40c:	e5933000 	ldr	r3, [r3]
  10d410:	e5933008 	ldr	r3, [r3, #8]
  10d414:	e3530000 	cmp	r3, #0
  10d418:	1a000002 	bne	10d428 <pcb_new+0x1e8>
    msg->err = ERR_MEM;
  10d41c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d420:	e3e02000 	mvn	r2, #0
  10d424:	e5c32004 	strb	r2, [r3, #4]
  }
}
  10d428:	e24bd008 	sub	sp, fp, #8
  10d42c:	e8bd8810 	pop	{r4, fp, pc}

0010d430 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
  10d430:	e92d4800 	push	{fp, lr}
  10d434:	e28db004 	add	fp, sp, #4
  10d438:	e24dd010 	sub	sp, sp, #16
  10d43c:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10d440:	e51b3010 	ldr	r3, [fp, #-16]
  10d444:	e50b3008 	str	r3, [fp, #-8]

  msg->err = ERR_OK;
  10d448:	e51b3008 	ldr	r3, [fp, #-8]
  10d44c:	e3a02000 	mov	r2, #0
  10d450:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
  10d454:	e51b3008 	ldr	r3, [fp, #-8]
  10d458:	e5933000 	ldr	r3, [r3]
  10d45c:	e5933008 	ldr	r3, [r3, #8]
  10d460:	e3530000 	cmp	r3, #0
  10d464:	1a000001 	bne	10d470 <lwip_netconn_do_newconn+0x40>
    pcb_new(msg);
  10d468:	e51b0008 	ldr	r0, [fp, #-8]
  10d46c:	ebffff73 	bl	10d240 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
  10d470:	e51b3008 	ldr	r3, [fp, #-8]
  10d474:	e5933000 	ldr	r3, [r3]
  10d478:	e3530000 	cmp	r3, #0
  10d47c:	0a00000b 	beq	10d4b0 <lwip_netconn_do_newconn+0x80>
  10d480:	ebffd36d 	bl	10223c <rt_enter_critical>
  10d484:	e51b3008 	ldr	r3, [fp, #-8]
  10d488:	e5933000 	ldr	r3, [r3]
  10d48c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10d490:	e373000c 	cmn	r3, #12
  10d494:	ba000004 	blt	10d4ac <lwip_netconn_do_newconn+0x7c>
  10d498:	e51b3008 	ldr	r3, [fp, #-8]
  10d49c:	e5933000 	ldr	r3, [r3]
  10d4a0:	e51b2008 	ldr	r2, [fp, #-8]
  10d4a4:	e1d220d4 	ldrsb	r2, [r2, #4]
  10d4a8:	e5c3200c 	strb	r2, [r3, #12]
  10d4ac:	ebffd368 	bl	102254 <rt_exit_critical>
}
  10d4b0:	e320f000 	nop	{0}
  10d4b4:	e24bd004 	sub	sp, fp, #4
  10d4b8:	e8bd8800 	pop	{fp, pc}

0010d4bc <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
  10d4bc:	e92d4800 	push	{fp, lr}
  10d4c0:	e28db004 	add	fp, sp, #4
  10d4c4:	e24dd010 	sub	sp, sp, #16
  10d4c8:	e50b0010 	str	r0, [fp, #-16]
  10d4cc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
  10d4d0:	e3002287 	movw	r2, #647	; 0x287
  10d4d4:	e30616a8 	movw	r1, #26280	; 0x66a8
  10d4d8:	e3401014 	movt	r1, #20
  10d4dc:	e3a00008 	mov	r0, #8
  10d4e0:	eb002eff 	bl	1190e4 <memp_malloc_fn>
  10d4e4:	e50b000c 	str	r0, [fp, #-12]
  if (conn == NULL) {
  10d4e8:	e51b300c 	ldr	r3, [fp, #-12]
  10d4ec:	e3530000 	cmp	r3, #0
  10d4f0:	1a000001 	bne	10d4fc <netconn_alloc+0x40>
    return NULL;
  10d4f4:	e3a03000 	mov	r3, #0
  10d4f8:	ea000060 	b	10d680 <netconn_alloc+0x1c4>
  }

  conn->last_err = ERR_OK;
  10d4fc:	e51b300c 	ldr	r3, [fp, #-12]
  10d500:	e3a02000 	mov	r2, #0
  10d504:	e5c3200c 	strb	r2, [r3, #12]
  conn->type = t;
  10d508:	e51b300c 	ldr	r3, [fp, #-12]
  10d50c:	e51b2010 	ldr	r2, [fp, #-16]
  10d510:	e5832000 	str	r2, [r3]
  conn->pcb.tcp = NULL;
  10d514:	e51b300c 	ldr	r3, [fp, #-12]
  10d518:	e3a02000 	mov	r2, #0
  10d51c:	e5832008 	str	r2, [r3, #8]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
  10d520:	e51b3010 	ldr	r3, [fp, #-16]
  10d524:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d528:	e3530020 	cmp	r3, #32
  10d52c:	0a000007 	beq	10d550 <netconn_alloc+0x94>
  10d530:	e3530040 	cmp	r3, #64	; 0x40
  10d534:	0a000002 	beq	10d544 <netconn_alloc+0x88>
  10d538:	e3530010 	cmp	r3, #16
  10d53c:	0a000006 	beq	10d55c <netconn_alloc+0xa0>
  10d540:	ea000008 	b	10d568 <netconn_alloc+0xac>
#if LWIP_RAW
  case NETCONN_RAW:
    size = DEFAULT_RAW_RECVMBOX_SIZE;
  10d544:	e3a03001 	mov	r3, #1
  10d548:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d54c:	ea00000d 	b	10d588 <netconn_alloc+0xcc>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
  10d550:	e3a03040 	mov	r3, #64	; 0x40
  10d554:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d558:	ea00000a 	b	10d588 <netconn_alloc+0xcc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
  10d55c:	e3a03040 	mov	r3, #64	; 0x40
  10d560:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d564:	ea000007 	b	10d588 <netconn_alloc+0xcc>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
  10d568:	e3060824 	movw	r0, #26660	; 0x6824
  10d56c:	e3400014 	movt	r0, #20
  10d570:	ebffd6e7 	bl	103114 <rt_kprintf>
  10d574:	e30012a2 	movw	r1, #674	; 0x2a2
  10d578:	e30606a8 	movw	r0, #26280	; 0x66a8
  10d57c:	e3400014 	movt	r0, #20
  10d580:	ebfff6da 	bl	10b0f0 <sys_arch_assert>
    goto free_and_return;
  10d584:	ea000039 	b	10d670 <netconn_alloc+0x1b4>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
  10d588:	e51b300c 	ldr	r3, [fp, #-12]
  10d58c:	e2833014 	add	r3, r3, #20
  10d590:	e51b1008 	ldr	r1, [fp, #-8]
  10d594:	e1a00003 	mov	r0, r3
  10d598:	ebfff58f 	bl	10abdc <sys_mbox_new>
  10d59c:	e1a03000 	mov	r3, r0
  10d5a0:	e3530000 	cmp	r3, #0
  10d5a4:	1a000030 	bne	10d66c <netconn_alloc+0x1b0>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
  10d5a8:	e51b300c 	ldr	r3, [fp, #-12]
  10d5ac:	e2833010 	add	r3, r3, #16
  10d5b0:	e3a01000 	mov	r1, #0
  10d5b4:	e1a00003 	mov	r0, r3
  10d5b8:	ebfff49f 	bl	10a83c <sys_sem_new>
  10d5bc:	e1a03000 	mov	r3, r0
  10d5c0:	e3530000 	cmp	r3, #0
  10d5c4:	0a000004 	beq	10d5dc <netconn_alloc+0x120>
    sys_mbox_free(&conn->recvmbox);
  10d5c8:	e51b300c 	ldr	r3, [fp, #-12]
  10d5cc:	e2833014 	add	r3, r3, #20
  10d5d0:	e1a00003 	mov	r0, r3
  10d5d4:	ebfff5b5 	bl	10acb0 <sys_mbox_free>
    goto free_and_return;
  10d5d8:	ea000024 	b	10d670 <netconn_alloc+0x1b4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
  10d5dc:	e51b300c 	ldr	r3, [fp, #-12]
  10d5e0:	e2833018 	add	r3, r3, #24
  10d5e4:	e1a00003 	mov	r0, r3
  10d5e8:	ebfff681 	bl	10aff4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
  10d5ec:	e51b300c 	ldr	r3, [fp, #-12]
  10d5f0:	e3a02000 	mov	r2, #0
  10d5f4:	e5832004 	str	r2, [r3, #4]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
  10d5f8:	e51b300c 	ldr	r3, [fp, #-12]
  10d5fc:	e3e02000 	mvn	r2, #0
  10d600:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
  10d604:	e51b300c 	ldr	r3, [fp, #-12]
  10d608:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10d60c:	e583203c 	str	r2, [r3, #60]	; 0x3c
#if LWIP_TCP
  conn->current_msg  = NULL;
  10d610:	e51b300c 	ldr	r3, [fp, #-12]
  10d614:	e3a02000 	mov	r2, #0
  10d618:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->write_offset = 0;
  10d61c:	e51b300c 	ldr	r3, [fp, #-12]
  10d620:	e3a02000 	mov	r2, #0
  10d624:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
  10d628:	e51b300c 	ldr	r3, [fp, #-12]
  10d62c:	e3a02000 	mov	r2, #0
  10d630:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
  10d634:	e51b300c 	ldr	r3, [fp, #-12]
  10d638:	e3a02000 	mov	r2, #0
  10d63c:	e5832024 	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
  10d640:	e51b300c 	ldr	r3, [fp, #-12]
  10d644:	e3a02601 	mov	r2, #1048576	; 0x100000
  10d648:	e5832028 	str	r2, [r3, #40]	; 0x28
  conn->recv_avail   = 0;
  10d64c:	e51b300c 	ldr	r3, [fp, #-12]
  10d650:	e3a02000 	mov	r2, #0
  10d654:	e583202c 	str	r2, [r3, #44]	; 0x2c
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
  10d658:	e51b300c 	ldr	r3, [fp, #-12]
  10d65c:	e3a02000 	mov	r2, #0
  10d660:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  return conn;
  10d664:	e51b300c 	ldr	r3, [fp, #-12]
  10d668:	ea000004 	b	10d680 <netconn_alloc+0x1c4>
    goto free_and_return;
  10d66c:	e320f000 	nop	{0}
free_and_return:
  memp_free(MEMP_NETCONN, conn);
  10d670:	e51b100c 	ldr	r1, [fp, #-12]
  10d674:	e3a00008 	mov	r0, #8
  10d678:	eb002f01 	bl	119284 <memp_free>
  return NULL;
  10d67c:	e3a03000 	mov	r3, #0
}
  10d680:	e1a00003 	mov	r0, r3
  10d684:	e24bd004 	sub	sp, fp, #4
  10d688:	e8bd8800 	pop	{fp, pc}

0010d68c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
  10d68c:	e92d4800 	push	{fp, lr}
  10d690:	e28db004 	add	fp, sp, #4
  10d694:	e24dd008 	sub	sp, sp, #8
  10d698:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
  10d69c:	e51b3008 	ldr	r3, [fp, #-8]
  10d6a0:	e5933008 	ldr	r3, [r3, #8]
  10d6a4:	e3530000 	cmp	r3, #0
  10d6a8:	0a000006 	beq	10d6c8 <netconn_free+0x3c>
  10d6ac:	e306084c 	movw	r0, #26700	; 0x684c
  10d6b0:	e3400014 	movt	r0, #20
  10d6b4:	ebffd696 	bl	103114 <rt_kprintf>
  10d6b8:	e30012da 	movw	r1, #730	; 0x2da
  10d6bc:	e30606a8 	movw	r0, #26280	; 0x66a8
  10d6c0:	e3400014 	movt	r0, #20
  10d6c4:	ebfff689 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
  10d6c8:	e51b3008 	ldr	r3, [fp, #-8]
  10d6cc:	e2833014 	add	r3, r3, #20
  10d6d0:	e1a00003 	mov	r0, r3
  10d6d4:	ebfff63c 	bl	10afcc <sys_mbox_valid>
  10d6d8:	e1a03000 	mov	r3, r0
  10d6dc:	e3530000 	cmp	r3, #0
  10d6e0:	0a000006 	beq	10d700 <netconn_free+0x74>
  10d6e4:	e306087c 	movw	r0, #26748	; 0x687c
  10d6e8:	e3400014 	movt	r0, #20
  10d6ec:	ebffd688 	bl	103114 <rt_kprintf>
  10d6f0:	e3a01fb7 	mov	r1, #732	; 0x2dc
  10d6f4:	e30606a8 	movw	r0, #26280	; 0x66a8
  10d6f8:	e3400014 	movt	r0, #20
  10d6fc:	ebfff67b 	bl	10b0f0 <sys_arch_assert>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
  10d700:	e51b3008 	ldr	r3, [fp, #-8]
  10d704:	e2833018 	add	r3, r3, #24
  10d708:	e1a00003 	mov	r0, r3
  10d70c:	ebfff62e 	bl	10afcc <sys_mbox_valid>
  10d710:	e1a03000 	mov	r3, r0
  10d714:	e3530000 	cmp	r3, #0
  10d718:	0a000006 	beq	10d738 <netconn_free+0xac>
  10d71c:	e30608b8 	movw	r0, #26808	; 0x68b8
  10d720:	e3400014 	movt	r0, #20
  10d724:	ebffd67a 	bl	103114 <rt_kprintf>
  10d728:	e30012df 	movw	r1, #735	; 0x2df
  10d72c:	e30606a8 	movw	r0, #26280	; 0x66a8
  10d730:	e3400014 	movt	r0, #20
  10d734:	ebfff66d 	bl	10b0f0 <sys_arch_assert>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
  10d738:	e51b3008 	ldr	r3, [fp, #-8]
  10d73c:	e2833010 	add	r3, r3, #16
  10d740:	e1a00003 	mov	r0, r3
  10d744:	ebfff467 	bl	10a8e8 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
  10d748:	e51b3008 	ldr	r3, [fp, #-8]
  10d74c:	e2833010 	add	r3, r3, #16
  10d750:	e1a00003 	mov	r0, r3
  10d754:	ebfff4b6 	bl	10aa34 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
  10d758:	e51b1008 	ldr	r1, [fp, #-8]
  10d75c:	e3a00008 	mov	r0, #8
  10d760:	eb002ec7 	bl	119284 <memp_free>
}
  10d764:	e320f000 	nop	{0}
  10d768:	e24bd004 	sub	sp, fp, #4
  10d76c:	e8bd8800 	pop	{fp, pc}

0010d770 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
  10d770:	e92d4800 	push	{fp, lr}
  10d774:	e28db004 	add	fp, sp, #4
  10d778:	e24dd018 	sub	sp, sp, #24
  10d77c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10d780:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d784:	e2833014 	add	r3, r3, #20
  10d788:	e1a00003 	mov	r0, r3
  10d78c:	ebfff60e 	bl	10afcc <sys_mbox_valid>
  10d790:	e1a03000 	mov	r3, r0
  10d794:	e3530000 	cmp	r3, #0
  10d798:	0a00002c 	beq	10d850 <netconn_drain+0xe0>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d79c:	ea00001a 	b	10d80c <netconn_drain+0x9c>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
  10d7a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d7a4:	e5933000 	ldr	r3, [r3]
  10d7a8:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d7ac:	e3530010 	cmp	r3, #16
  10d7b0:	1a000012 	bne	10d800 <netconn_drain+0x90>
        if (mem != NULL) {
  10d7b4:	e51b3010 	ldr	r3, [fp, #-16]
  10d7b8:	e3530000 	cmp	r3, #0
  10d7bc:	0a000012 	beq	10d80c <netconn_drain+0x9c>
          p = (struct pbuf*)mem;
  10d7c0:	e51b3010 	ldr	r3, [fp, #-16]
  10d7c4:	e50b3008 	str	r3, [fp, #-8]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
  10d7c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d7cc:	e5933008 	ldr	r3, [r3, #8]
  10d7d0:	e3530000 	cmp	r3, #0
  10d7d4:	0a000006 	beq	10d7f4 <netconn_drain+0x84>
            tcp_recved(conn->pcb.tcp, p->tot_len);
  10d7d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d7dc:	e5932008 	ldr	r2, [r3, #8]
  10d7e0:	e51b3008 	ldr	r3, [fp, #-8]
  10d7e4:	e1d330b8 	ldrh	r3, [r3, #8]
  10d7e8:	e1a01003 	mov	r1, r3
  10d7ec:	e1a00002 	mov	r0, r2
  10d7f0:	eb00423d 	bl	11e0ec <tcp_recved>
          }
          pbuf_free(p);
  10d7f4:	e51b0008 	ldr	r0, [fp, #-8]
  10d7f8:	eb0035af 	bl	11aebc <pbuf_free>
  10d7fc:	ea000002 	b	10d80c <netconn_drain+0x9c>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
  10d800:	e51b3010 	ldr	r3, [fp, #-16]
  10d804:	e1a00003 	mov	r0, r3
  10d808:	eb0009ca 	bl	10ff38 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d80c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d810:	e2833014 	add	r3, r3, #20
  10d814:	e24b2010 	sub	r2, fp, #16
  10d818:	e1a01002 	mov	r1, r2
  10d81c:	e1a00003 	mov	r0, r3
  10d820:	ebfff5d1 	bl	10af6c <sys_arch_mbox_tryfetch>
  10d824:	e1a03000 	mov	r3, r0
  10d828:	e3730001 	cmn	r3, #1
  10d82c:	1affffdb 	bne	10d7a0 <netconn_drain+0x30>
      }
    }
    sys_mbox_free(&conn->recvmbox);
  10d830:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d834:	e2833014 	add	r3, r3, #20
  10d838:	e1a00003 	mov	r0, r3
  10d83c:	ebfff51b 	bl	10acb0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
  10d840:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d844:	e2833014 	add	r3, r3, #20
  10d848:	e1a00003 	mov	r0, r3
  10d84c:	ebfff5e8 	bl	10aff4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10d850:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d854:	e2833018 	add	r3, r3, #24
  10d858:	e1a00003 	mov	r0, r3
  10d85c:	ebfff5da 	bl	10afcc <sys_mbox_valid>
  10d860:	e1a03000 	mov	r3, r0
  10d864:	e3530000 	cmp	r3, #0
  10d868:	0a000027 	beq	10d90c <netconn_drain+0x19c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10d86c:	ea000015 	b	10d8c8 <netconn_drain+0x158>
      if (mem != &netconn_aborted) {
  10d870:	e51b2010 	ldr	r2, [fp, #-16]
  10d874:	e30f358c 	movw	r3, #62860	; 0xf58c
  10d878:	e3403014 	movt	r3, #20
  10d87c:	e1520003 	cmp	r2, r3
  10d880:	0a000010 	beq	10d8c8 <netconn_drain+0x158>
        struct netconn *newconn = (struct netconn *)mem;
  10d884:	e51b3010 	ldr	r3, [fp, #-16]
  10d888:	e50b300c 	str	r3, [fp, #-12]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
  10d88c:	e51b000c 	ldr	r0, [fp, #-12]
  10d890:	ebffffb6 	bl	10d770 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
  10d894:	e51b300c 	ldr	r3, [fp, #-12]
  10d898:	e5933008 	ldr	r3, [r3, #8]
  10d89c:	e3530000 	cmp	r3, #0
  10d8a0:	0a000006 	beq	10d8c0 <netconn_drain+0x150>
          tcp_abort(newconn->pcb.tcp);
  10d8a4:	e51b300c 	ldr	r3, [fp, #-12]
  10d8a8:	e5933008 	ldr	r3, [r3, #8]
  10d8ac:	e1a00003 	mov	r0, r3
  10d8b0:	eb00405b 	bl	11da24 <tcp_abort>
          newconn->pcb.tcp = NULL;
  10d8b4:	e51b300c 	ldr	r3, [fp, #-12]
  10d8b8:	e3a02000 	mov	r2, #0
  10d8bc:	e5832008 	str	r2, [r3, #8]
        }
        netconn_free(newconn);
  10d8c0:	e51b000c 	ldr	r0, [fp, #-12]
  10d8c4:	ebffff70 	bl	10d68c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10d8c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d8cc:	e2833018 	add	r3, r3, #24
  10d8d0:	e24b2010 	sub	r2, fp, #16
  10d8d4:	e1a01002 	mov	r1, r2
  10d8d8:	e1a00003 	mov	r0, r3
  10d8dc:	ebfff5a2 	bl	10af6c <sys_arch_mbox_tryfetch>
  10d8e0:	e1a03000 	mov	r3, r0
  10d8e4:	e3730001 	cmn	r3, #1
  10d8e8:	1affffe0 	bne	10d870 <netconn_drain+0x100>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
  10d8ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d8f0:	e2833018 	add	r3, r3, #24
  10d8f4:	e1a00003 	mov	r0, r3
  10d8f8:	ebfff4ec 	bl	10acb0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
  10d8fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d900:	e2833018 	add	r3, r3, #24
  10d904:	e1a00003 	mov	r0, r3
  10d908:	ebfff5b9 	bl	10aff4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
  10d90c:	e320f000 	nop	{0}
  10d910:	e24bd004 	sub	sp, fp, #4
  10d914:	e8bd8800 	pop	{fp, pc}

0010d918 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10d918:	e92d4800 	push	{fp, lr}
  10d91c:	e28db004 	add	fp, sp, #4
  10d920:	e24dd020 	sub	sp, sp, #32
  10d924:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10d928:	e1a03001 	mov	r3, r1
  10d92c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
  10d930:	e3a03000 	mov	r3, #0
  10d934:	e54b3007 	strb	r3, [fp, #-7]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
  10d938:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d93c:	e3530000 	cmp	r3, #0
  10d940:	1a000006 	bne	10d960 <lwip_netconn_do_close_internal+0x48>
  10d944:	e30608f4 	movw	r0, #26868	; 0x68f4
  10d948:	e3400014 	movt	r0, #20
  10d94c:	ebffd5f0 	bl	103114 <rt_kprintf>
  10d950:	e300133d 	movw	r1, #829	; 0x33d
  10d954:	e30606a8 	movw	r0, #26280	; 0x66a8
  10d958:	e3400014 	movt	r0, #20
  10d95c:	ebfff5e3 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
  10d960:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d964:	e5933000 	ldr	r3, [r3]
  10d968:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d96c:	e3530010 	cmp	r3, #16
  10d970:	0a000006 	beq	10d990 <lwip_netconn_do_close_internal+0x78>
  10d974:	e3060904 	movw	r0, #26884	; 0x6904
  10d978:	e3400014 	movt	r0, #20
  10d97c:	ebffd5e4 	bl	103114 <rt_kprintf>
  10d980:	e300133e 	movw	r1, #830	; 0x33e
  10d984:	e30606a8 	movw	r0, #26280	; 0x66a8
  10d988:	e3400014 	movt	r0, #20
  10d98c:	ebfff5d7 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  10d990:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d994:	e5933004 	ldr	r3, [r3, #4]
  10d998:	e3530004 	cmp	r3, #4
  10d99c:	0a000006 	beq	10d9bc <lwip_netconn_do_close_internal+0xa4>
  10d9a0:	e3060924 	movw	r0, #26916	; 0x6924
  10d9a4:	e3400014 	movt	r0, #20
  10d9a8:	ebffd5d9 	bl	103114 <rt_kprintf>
  10d9ac:	e300133f 	movw	r1, #831	; 0x33f
  10d9b0:	e30606a8 	movw	r0, #26280	; 0x66a8
  10d9b4:	e3400014 	movt	r0, #20
  10d9b8:	ebfff5cc 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  10d9bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9c0:	e5933008 	ldr	r3, [r3, #8]
  10d9c4:	e3530000 	cmp	r3, #0
  10d9c8:	1a000006 	bne	10d9e8 <lwip_netconn_do_close_internal+0xd0>
  10d9cc:	e3060948 	movw	r0, #26952	; 0x6948
  10d9d0:	e3400014 	movt	r0, #20
  10d9d4:	ebffd5ce 	bl	103114 <rt_kprintf>
  10d9d8:	e3a01d0d 	mov	r1, #832	; 0x340
  10d9dc:	e30606a8 	movw	r0, #26280	; 0x66a8
  10d9e0:	e3400014 	movt	r0, #20
  10d9e4:	ebfff5c1 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10d9e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9ec:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d9f0:	e3530000 	cmp	r3, #0
  10d9f4:	1a000006 	bne	10da14 <lwip_netconn_do_close_internal+0xfc>
  10d9f8:	e30607b0 	movw	r0, #26544	; 0x67b0
  10d9fc:	e3400014 	movt	r0, #20
  10da00:	ebffd5c3 	bl	103114 <rt_kprintf>
  10da04:	e3001341 	movw	r1, #833	; 0x341
  10da08:	e30606a8 	movw	r0, #26280	; 0x66a8
  10da0c:	e3400014 	movt	r0, #20
  10da10:	ebfff5b6 	bl	10b0f0 <sys_arch_assert>

  tpcb = conn->pcb.tcp;
  10da14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10da18:	e5933008 	ldr	r3, [r3, #8]
  10da1c:	e50b3010 	str	r3, [fp, #-16]
  shut = conn->current_msg->msg.sd.shut;
  10da20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10da24:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10da28:	e5d33008 	ldrb	r3, [r3, #8]
  10da2c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  shut_rx = shut & NETCONN_SHUT_RD;
  10da30:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10da34:	e2033001 	and	r3, r3, #1
  10da38:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
  shut_tx = shut & NETCONN_SHUT_WR;
  10da3c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10da40:	e2033002 	and	r3, r3, #2
  10da44:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
  10da48:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10da4c:	e3530003 	cmp	r3, #3
  10da50:	1a000002 	bne	10da60 <lwip_netconn_do_close_internal+0x148>
    close = 1;
  10da54:	e3a03001 	mov	r3, #1
  10da58:	e54b3006 	strb	r3, [fp, #-6]
  10da5c:	ea00001e 	b	10dadc <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_rx &&
  10da60:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10da64:	e3530000 	cmp	r3, #0
  10da68:	0a00000e 	beq	10daa8 <lwip_netconn_do_close_internal+0x190>
             ((tpcb->state == FIN_WAIT_1) ||
  10da6c:	e51b3010 	ldr	r3, [fp, #-16]
  10da70:	e5933014 	ldr	r3, [r3, #20]
  } else if (shut_rx &&
  10da74:	e3530005 	cmp	r3, #5
  10da78:	0a000007 	beq	10da9c <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == FIN_WAIT_2) ||
  10da7c:	e51b3010 	ldr	r3, [fp, #-16]
  10da80:	e5933014 	ldr	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
  10da84:	e3530006 	cmp	r3, #6
  10da88:	0a000003 	beq	10da9c <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == CLOSING))) {
  10da8c:	e51b3010 	ldr	r3, [fp, #-16]
  10da90:	e5933014 	ldr	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
  10da94:	e3530008 	cmp	r3, #8
  10da98:	1a000002 	bne	10daa8 <lwip_netconn_do_close_internal+0x190>
    close = 1;
  10da9c:	e3a03001 	mov	r3, #1
  10daa0:	e54b3006 	strb	r3, [fp, #-6]
  10daa4:	ea00000c 	b	10dadc <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
  10daa8:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10daac:	e3530000 	cmp	r3, #0
  10dab0:	0a000007 	beq	10dad4 <lwip_netconn_do_close_internal+0x1bc>
  10dab4:	e51b3010 	ldr	r3, [fp, #-16]
  10dab8:	e5d3301e 	ldrb	r3, [r3, #30]
  10dabc:	e2033010 	and	r3, r3, #16
  10dac0:	e3530000 	cmp	r3, #0
  10dac4:	0a000002 	beq	10dad4 <lwip_netconn_do_close_internal+0x1bc>
    close = 1;
  10dac8:	e3a03001 	mov	r3, #1
  10dacc:	e54b3006 	strb	r3, [fp, #-6]
  10dad0:	ea000001 	b	10dadc <lwip_netconn_do_close_internal+0x1c4>
  } else {
    close = 0;
  10dad4:	e3a03000 	mov	r3, #0
  10dad8:	e54b3006 	strb	r3, [fp, #-6]
  }

  /* Set back some callback pointers */
  if (close) {
  10dadc:	e55b3006 	ldrb	r3, [fp, #-6]
  10dae0:	e3530000 	cmp	r3, #0
  10dae4:	0a000002 	beq	10daf4 <lwip_netconn_do_close_internal+0x1dc>
    tcp_arg(tpcb, NULL);
  10dae8:	e3a01000 	mov	r1, #0
  10daec:	e51b0010 	ldr	r0, [fp, #-16]
  10daf0:	eb00481e 	bl	11fb70 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
  10daf4:	e51b3010 	ldr	r3, [fp, #-16]
  10daf8:	e5933014 	ldr	r3, [r3, #20]
  10dafc:	e3530001 	cmp	r3, #1
  10db00:	1a000003 	bne	10db14 <lwip_netconn_do_close_internal+0x1fc>
    tcp_accept(tpcb, NULL);
  10db04:	e3a01000 	mov	r1, #0
  10db08:	e51b0010 	ldr	r0, [fp, #-16]
  10db0c:	eb004871 	bl	11fcd8 <tcp_accept>
  10db10:	ea000018 	b	10db78 <lwip_netconn_do_close_internal+0x260>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
  10db14:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10db18:	e3530000 	cmp	r3, #0
  10db1c:	0a000005 	beq	10db38 <lwip_netconn_do_close_internal+0x220>
      tcp_recv(tpcb, NULL);
  10db20:	e3a01000 	mov	r1, #0
  10db24:	e51b0010 	ldr	r0, [fp, #-16]
  10db28:	eb00481f 	bl	11fbac <tcp_recv>
      tcp_accept(tpcb, NULL);
  10db2c:	e3a01000 	mov	r1, #0
  10db30:	e51b0010 	ldr	r0, [fp, #-16]
  10db34:	eb004867 	bl	11fcd8 <tcp_accept>
    }
    if (shut_tx) {
  10db38:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10db3c:	e3530000 	cmp	r3, #0
  10db40:	0a000002 	beq	10db50 <lwip_netconn_do_close_internal+0x238>
      tcp_sent(tpcb, NULL);
  10db44:	e3a01000 	mov	r1, #0
  10db48:	e51b0010 	ldr	r0, [fp, #-16]
  10db4c:	eb00482f 	bl	11fc10 <tcp_sent>
    }
    if (close) {
  10db50:	e55b3006 	ldrb	r3, [fp, #-6]
  10db54:	e3530000 	cmp	r3, #0
  10db58:	0a000006 	beq	10db78 <lwip_netconn_do_close_internal+0x260>
      tcp_poll(tpcb, NULL, 0);
  10db5c:	e3a02000 	mov	r2, #0
  10db60:	e3a01000 	mov	r1, #0
  10db64:	e51b0010 	ldr	r0, [fp, #-16]
  10db68:	eb00486f 	bl	11fd2c <tcp_poll>
      tcp_err(tpcb, NULL);
  10db6c:	e3a01000 	mov	r1, #0
  10db70:	e51b0010 	ldr	r0, [fp, #-16]
  10db74:	eb00483e 	bl	11fc74 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
  10db78:	e55b3006 	ldrb	r3, [fp, #-6]
  10db7c:	e3530000 	cmp	r3, #0
  10db80:	0a000004 	beq	10db98 <lwip_netconn_do_close_internal+0x280>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
  10db84:	e51b0010 	ldr	r0, [fp, #-16]
  10db88:	eb003eb1 	bl	11d654 <tcp_close>
  10db8c:	e1a03000 	mov	r3, r0
  10db90:	e54b3005 	strb	r3, [fp, #-5]
  10db94:	ea000006 	b	10dbb4 <lwip_netconn_do_close_internal+0x29c>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
  10db98:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10db9c:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  10dba0:	e1a01003 	mov	r1, r3
  10dba4:	e51b0010 	ldr	r0, [fp, #-16]
  10dba8:	eb003ebe 	bl	11d6a8 <tcp_shutdown>
  10dbac:	e1a03000 	mov	r3, r0
  10dbb0:	e54b3005 	strb	r3, [fp, #-5]
  }
  if (err == ERR_OK) {
  10dbb4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10dbb8:	e3530000 	cmp	r3, #0
  10dbbc:	1a000002 	bne	10dbcc <lwip_netconn_do_close_internal+0x2b4>
    close_finished = 1;
  10dbc0:	e3a03001 	mov	r3, #1
  10dbc4:	e54b3007 	strb	r3, [fp, #-7]
  10dbc8:	ea000021 	b	10dc54 <lwip_netconn_do_close_internal+0x33c>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
  10dbcc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10dbd0:	e3730001 	cmn	r3, #1
  10dbd4:	1a00001c 	bne	10dc4c <lwip_netconn_do_close_internal+0x334>
         nonblocking netconns, we have to wait since no standard socket application
         is prepared for close failing because of resource shortage.
         Check the timeout: this is kind of an lwip addition to the standard sockets:
         we wait for some time when failing to allocate a segment for the FIN */
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
      s32_t close_timeout = LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT;
  10dbd8:	e3043e20 	movw	r3, #20000	; 0x4e20
  10dbdc:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_SO_SNDTIMEO
      if (conn->send_timeout > 0) {
  10dbe0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dbe4:	e5933020 	ldr	r3, [r3, #32]
  10dbe8:	e3530000 	cmp	r3, #0
  10dbec:	da000002 	ble	10dbfc <lwip_netconn_do_close_internal+0x2e4>
        close_timeout = conn->send_timeout;
  10dbf0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dbf4:	e5933020 	ldr	r3, [r3, #32]
  10dbf8:	e50b300c 	str	r3, [fp, #-12]
      if (conn->linger >= 0) {
        /* use linger timeout (seconds) */
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
  10dbfc:	ebfff554 	bl	10b154 <sys_now>
  10dc00:	e1a02000 	mov	r2, r0
  10dc04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc08:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dc0c:	e593300c 	ldr	r3, [r3, #12]
  10dc10:	e0423003 	sub	r3, r2, r3
  10dc14:	e1a02003 	mov	r2, r3
  10dc18:	e51b300c 	ldr	r3, [fp, #-12]
  10dc1c:	e1530002 	cmp	r3, r2
  10dc20:	ca00000b 	bgt	10dc54 <lwip_netconn_do_close_internal+0x33c>
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
  10dc24:	e3a03001 	mov	r3, #1
  10dc28:	e54b3007 	strb	r3, [fp, #-7]
        if (close) {
  10dc2c:	e55b3006 	ldrb	r3, [fp, #-6]
  10dc30:	e3530000 	cmp	r3, #0
  10dc34:	0a000006 	beq	10dc54 <lwip_netconn_do_close_internal+0x33c>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
  10dc38:	e51b0010 	ldr	r0, [fp, #-16]
  10dc3c:	eb003f78 	bl	11da24 <tcp_abort>
          err = ERR_OK;
  10dc40:	e3a03000 	mov	r3, #0
  10dc44:	e54b3005 	strb	r3, [fp, #-5]
  10dc48:	ea000001 	b	10dc54 <lwip_netconn_do_close_internal+0x33c>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
  10dc4c:	e3a03001 	mov	r3, #1
  10dc50:	e54b3007 	strb	r3, [fp, #-7]
    }
  }
  if (close_finished) {
  10dc54:	e55b3007 	ldrb	r3, [fp, #-7]
  10dc58:	e3530000 	cmp	r3, #0
  10dc5c:	0a00004e 	beq	10dd9c <lwip_netconn_do_close_internal+0x484>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10dc60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc64:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dc68:	e5933000 	ldr	r3, [r3]
  10dc6c:	e2833010 	add	r3, r3, #16
  10dc70:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    conn->current_msg->err = err;
  10dc74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc78:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dc7c:	e55b2005 	ldrb	r2, [fp, #-5]
  10dc80:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10dc84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc88:	e3a02000 	mov	r2, #0
  10dc8c:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->state = NETCONN_NONE;
  10dc90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc94:	e3a02000 	mov	r2, #0
  10dc98:	e5832004 	str	r2, [r3, #4]
    if (err == ERR_OK) {
  10dc9c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10dca0:	e3530000 	cmp	r3, #0
  10dca4:	1a000029 	bne	10dd50 <lwip_netconn_do_close_internal+0x438>
      if (close) {
  10dca8:	e55b3006 	ldrb	r3, [fp, #-6]
  10dcac:	e3530000 	cmp	r3, #0
  10dcb0:	0a00000c 	beq	10dce8 <lwip_netconn_do_close_internal+0x3d0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
  10dcb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dcb8:	e3a02000 	mov	r2, #0
  10dcbc:	e5832008 	str	r2, [r3, #8]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10dcc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dcc4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dcc8:	e3530000 	cmp	r3, #0
  10dccc:	0a000005 	beq	10dce8 <lwip_netconn_do_close_internal+0x3d0>
  10dcd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dcd4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dcd8:	e3a02000 	mov	r2, #0
  10dcdc:	e3a01004 	mov	r1, #4
  10dce0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10dce4:	e12fff33 	blx	r3
      }
      if (shut_rx) {
  10dce8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10dcec:	e3530000 	cmp	r3, #0
  10dcf0:	0a000009 	beq	10dd1c <lwip_netconn_do_close_internal+0x404>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10dcf4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dcf8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dcfc:	e3530000 	cmp	r3, #0
  10dd00:	0a000005 	beq	10dd1c <lwip_netconn_do_close_internal+0x404>
  10dd04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd08:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dd0c:	e3a02000 	mov	r2, #0
  10dd10:	e3a01000 	mov	r1, #0
  10dd14:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10dd18:	e12fff33 	blx	r3
      }
      if (shut_tx) {
  10dd1c:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10dd20:	e3530000 	cmp	r3, #0
  10dd24:	0a000009 	beq	10dd50 <lwip_netconn_do_close_internal+0x438>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10dd28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd2c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dd30:	e3530000 	cmp	r3, #0
  10dd34:	0a000005 	beq	10dd50 <lwip_netconn_do_close_internal+0x438>
  10dd38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd3c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dd40:	e3a02000 	mov	r2, #0
  10dd44:	e3a01002 	mov	r1, #2
  10dd48:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10dd4c:	e12fff33 	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
  10dd50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd54:	e3530000 	cmp	r3, #0
  10dd58:	0a000008 	beq	10dd80 <lwip_netconn_do_close_internal+0x468>
  10dd5c:	ebffd136 	bl	10223c <rt_enter_critical>
  10dd60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd64:	e1d330dc 	ldrsb	r3, [r3, #12]
  10dd68:	e373000c 	cmn	r3, #12
  10dd6c:	ba000002 	blt	10dd7c <lwip_netconn_do_close_internal+0x464>
  10dd70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd74:	e55b2005 	ldrb	r2, [fp, #-5]
  10dd78:	e5c3200c 	strb	r2, [r3, #12]
  10dd7c:	ebffd134 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10dd80:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10dd84:	e3530000 	cmp	r3, #0
  10dd88:	0a000001 	beq	10dd94 <lwip_netconn_do_close_internal+0x47c>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
  10dd8c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10dd90:	ebfff2df 	bl	10a914 <sys_sem_signal>
    }
    return ERR_OK;
  10dd94:	e3a03000 	mov	r3, #0
  10dd98:	ea00002b 	b	10de4c <lwip_netconn_do_close_internal+0x534>
  }
  if (!close_finished) {
  10dd9c:	e55b3007 	ldrb	r3, [fp, #-7]
  10dda0:	e3530000 	cmp	r3, #0
  10dda4:	1a00001d 	bne	10de20 <lwip_netconn_do_close_internal+0x508>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
  10dda8:	e51b3010 	ldr	r3, [fp, #-16]
  10ddac:	e5933014 	ldr	r3, [r3, #20]
  10ddb0:	e3530001 	cmp	r3, #1
  10ddb4:	1a000006 	bne	10ddd4 <lwip_netconn_do_close_internal+0x4bc>
  10ddb8:	e306095c 	movw	r0, #26972	; 0x695c
  10ddbc:	e3400014 	movt	r0, #20
  10ddc0:	ebffd4d3 	bl	103114 <rt_kprintf>
  10ddc4:	e30013dd 	movw	r1, #989	; 0x3dd
  10ddc8:	e30606a8 	movw	r0, #26280	; 0x66a8
  10ddcc:	e3400014 	movt	r0, #20
  10ddd0:	ebfff4c6 	bl	10b0f0 <sys_arch_assert>
    if (shut_tx) {
  10ddd4:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10ddd8:	e3530000 	cmp	r3, #0
  10dddc:	0a000003 	beq	10ddf0 <lwip_netconn_do_close_internal+0x4d8>
      tcp_sent(tpcb, sent_tcp);
  10dde0:	e30c1b5c 	movw	r1, #52060	; 0xcb5c
  10dde4:	e3401010 	movt	r1, #16
  10dde8:	e51b0010 	ldr	r0, [fp, #-16]
  10ddec:	eb004787 	bl	11fc10 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
  10ddf0:	e3a02001 	mov	r2, #1
  10ddf4:	e30c1a3c 	movw	r1, #51772	; 0xca3c
  10ddf8:	e3401010 	movt	r1, #16
  10ddfc:	e51b0010 	ldr	r0, [fp, #-16]
  10de00:	eb0047c9 	bl	11fd2c <tcp_poll>
    tcp_err(tpcb, err_tcp);
  10de04:	e30c1c7c 	movw	r1, #52348	; 0xcc7c
  10de08:	e3401010 	movt	r1, #16
  10de0c:	e51b0010 	ldr	r0, [fp, #-16]
  10de10:	eb004797 	bl	11fc74 <tcp_err>
    tcp_arg(tpcb, conn);
  10de14:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  10de18:	e51b0010 	ldr	r0, [fp, #-16]
  10de1c:	eb004753 	bl	11fb70 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
  10de20:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10de24:	e3530000 	cmp	r3, #0
  10de28:	1a000006 	bne	10de48 <lwip_netconn_do_close_internal+0x530>
  10de2c:	e3060980 	movw	r0, #27008	; 0x6980
  10de30:	e3400014 	movt	r0, #20
  10de34:	ebffd4b6 	bl	103114 <rt_kprintf>
  10de38:	e30013e9 	movw	r1, #1001	; 0x3e9
  10de3c:	e30606a8 	movw	r0, #26280	; 0x66a8
  10de40:	e3400014 	movt	r0, #20
  10de44:	ebfff4a9 	bl	10b0f0 <sys_arch_assert>
  return err;
  10de48:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10de4c:	e1a00003 	mov	r0, r3
  10de50:	e24bd004 	sub	sp, fp, #4
  10de54:	e8bd8800 	pop	{fp, pc}

0010de58 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
  10de58:	e92d4800 	push	{fp, lr}
  10de5c:	e28db004 	add	fp, sp, #4
  10de60:	e24dd010 	sub	sp, sp, #16
  10de64:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10de68:	e51b3010 	ldr	r3, [fp, #-16]
  10de6c:	e50b3008 	str	r3, [fp, #-8]

  enum netconn_state state = msg->conn->state;
  10de70:	e51b3008 	ldr	r3, [fp, #-8]
  10de74:	e5933000 	ldr	r3, [r3]
  10de78:	e5933004 	ldr	r3, [r3, #4]
  10de7c:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
  10de80:	e51b300c 	ldr	r3, [fp, #-12]
  10de84:	e3530000 	cmp	r3, #0
  10de88:	0a00000c 	beq	10dec0 <lwip_netconn_do_delconn+0x68>
  10de8c:	e51b3008 	ldr	r3, [fp, #-8]
  10de90:	e5933000 	ldr	r3, [r3]
  10de94:	e5933000 	ldr	r3, [r3]
  10de98:	e20330f0 	and	r3, r3, #240	; 0xf0
  10de9c:	e3530010 	cmp	r3, #16
  10dea0:	0a000006 	beq	10dec0 <lwip_netconn_do_delconn+0x68>
  10dea4:	e3060990 	movw	r0, #27024	; 0x6990
  10dea8:	e3400014 	movt	r0, #20
  10deac:	ebffd498 	bl	103114 <rt_kprintf>
  10deb0:	e30013fb 	movw	r1, #1019	; 0x3fb
  10deb4:	e30606a8 	movw	r0, #26280	; 0x66a8
  10deb8:	e3400014 	movt	r0, #20
  10debc:	ebfff48b 	bl	10b0f0 <sys_arch_assert>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
  10dec0:	e51b300c 	ldr	r3, [fp, #-12]
  10dec4:	e3530000 	cmp	r3, #0
  10dec8:	0a000005 	beq	10dee4 <lwip_netconn_do_delconn+0x8c>
  10decc:	e51b300c 	ldr	r3, [fp, #-12]
  10ded0:	e3530002 	cmp	r3, #2
  10ded4:	0a000002 	beq	10dee4 <lwip_netconn_do_delconn+0x8c>
       (state != NETCONN_LISTEN) &&
  10ded8:	e51b300c 	ldr	r3, [fp, #-12]
  10dedc:	e3530003 	cmp	r3, #3
  10dee0:	1a000008 	bne	10df08 <lwip_netconn_do_delconn+0xb0>
       (state != NETCONN_CONNECT)) ||
  10dee4:	e51b300c 	ldr	r3, [fp, #-12]
  10dee8:	e3530003 	cmp	r3, #3
  10deec:	1a000009 	bne	10df18 <lwip_netconn_do_delconn+0xc0>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
  10def0:	e51b3008 	ldr	r3, [fp, #-8]
  10def4:	e5933000 	ldr	r3, [r3]
  10def8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10defc:	e2033004 	and	r3, r3, #4
  10df00:	e3530000 	cmp	r3, #0
  10df04:	1a000003 	bne	10df18 <lwip_netconn_do_delconn+0xc0>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
  10df08:	e51b3008 	ldr	r3, [fp, #-8]
  10df0c:	e3e02004 	mvn	r2, #4
  10df10:	e5c32004 	strb	r2, [r3, #4]
  10df14:	ea00009e 	b	10e194 <lwip_netconn_do_delconn+0x33c>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
  10df18:	e51b300c 	ldr	r3, [fp, #-12]
  10df1c:	e3530003 	cmp	r3, #3
  10df20:	1a00000c 	bne	10df58 <lwip_netconn_do_delconn+0x100>
  10df24:	e51b3008 	ldr	r3, [fp, #-8]
  10df28:	e5933000 	ldr	r3, [r3]
  10df2c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10df30:	e2033004 	and	r3, r3, #4
  10df34:	e3530000 	cmp	r3, #0
  10df38:	1a000006 	bne	10df58 <lwip_netconn_do_delconn+0x100>
  10df3c:	e30609a4 	movw	r0, #27044	; 0x69a4
  10df40:	e3400014 	movt	r0, #20
  10df44:	ebffd472 	bl	103114 <rt_kprintf>
  10df48:	e3001419 	movw	r1, #1049	; 0x419
  10df4c:	e30606a8 	movw	r0, #26280	; 0x66a8
  10df50:	e3400014 	movt	r0, #20
  10df54:	ebfff465 	bl	10b0f0 <sys_arch_assert>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
  10df58:	e51b3008 	ldr	r3, [fp, #-8]
  10df5c:	e3a02000 	mov	r2, #0
  10df60:	e5c32004 	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
  10df64:	e51b3008 	ldr	r3, [fp, #-8]
  10df68:	e5933000 	ldr	r3, [r3]
  10df6c:	e1a00003 	mov	r0, r3
  10df70:	ebfffdfe 	bl	10d770 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
  10df74:	e51b3008 	ldr	r3, [fp, #-8]
  10df78:	e5933000 	ldr	r3, [r3]
  10df7c:	e5933008 	ldr	r3, [r3, #8]
  10df80:	e3530000 	cmp	r3, #0
  10df84:	0a000068 	beq	10e12c <lwip_netconn_do_delconn+0x2d4>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10df88:	e51b3008 	ldr	r3, [fp, #-8]
  10df8c:	e5933000 	ldr	r3, [r3]
  10df90:	e5933000 	ldr	r3, [r3]
  10df94:	e20330f0 	and	r3, r3, #240	; 0xf0
  10df98:	e3530020 	cmp	r3, #32
  10df9c:	0a00000a 	beq	10dfcc <lwip_netconn_do_delconn+0x174>
  10dfa0:	e3530040 	cmp	r3, #64	; 0x40
  10dfa4:	0a000002 	beq	10dfb4 <lwip_netconn_do_delconn+0x15c>
  10dfa8:	e3530010 	cmp	r3, #16
  10dfac:	0a000011 	beq	10dff8 <lwip_netconn_do_delconn+0x1a0>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
  10dfb0:	ea000059 	b	10e11c <lwip_netconn_do_delconn+0x2c4>
        raw_remove(msg->conn->pcb.raw);
  10dfb4:	e51b3008 	ldr	r3, [fp, #-8]
  10dfb8:	e5933000 	ldr	r3, [r3]
  10dfbc:	e5933008 	ldr	r3, [r3, #8]
  10dfc0:	e1a00003 	mov	r0, r3
  10dfc4:	eb0039d8 	bl	11c72c <raw_remove>
        break;
  10dfc8:	ea000053 	b	10e11c <lwip_netconn_do_delconn+0x2c4>
        msg->conn->pcb.udp->recv_arg = NULL;
  10dfcc:	e51b3008 	ldr	r3, [fp, #-8]
  10dfd0:	e5933000 	ldr	r3, [r3]
  10dfd4:	e5933008 	ldr	r3, [r3, #8]
  10dfd8:	e3a02000 	mov	r2, #0
  10dfdc:	e5832024 	str	r2, [r3, #36]	; 0x24
        udp_remove(msg->conn->pcb.udp);
  10dfe0:	e51b3008 	ldr	r3, [fp, #-8]
  10dfe4:	e5933000 	ldr	r3, [r3]
  10dfe8:	e5933008 	ldr	r3, [r3, #8]
  10dfec:	e1a00003 	mov	r0, r3
  10dff0:	eb006a82 	bl	128a00 <udp_remove>
        break;
  10dff4:	ea000048 	b	10e11c <lwip_netconn_do_delconn+0x2c4>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10dff8:	e51b3008 	ldr	r3, [fp, #-8]
  10dffc:	e5933000 	ldr	r3, [r3]
  10e000:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e004:	e3530000 	cmp	r3, #0
  10e008:	1a000004 	bne	10e020 <lwip_netconn_do_delconn+0x1c8>
  10e00c:	e51b3008 	ldr	r3, [fp, #-8]
  10e010:	e5933000 	ldr	r3, [r3]
  10e014:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10e018:	e3530000 	cmp	r3, #0
  10e01c:	0a000006 	beq	10e03c <lwip_netconn_do_delconn+0x1e4>
  10e020:	e30609c4 	movw	r0, #27076	; 0x69c4
  10e024:	e3400014 	movt	r0, #20
  10e028:	ebffd439 	bl	103114 <rt_kprintf>
  10e02c:	e300142f 	movw	r1, #1071	; 0x42f
  10e030:	e30606a8 	movw	r0, #26280	; 0x66a8
  10e034:	e3400014 	movt	r0, #20
  10e038:	ebfff42c 	bl	10b0f0 <sys_arch_assert>
        msg->conn->state = NETCONN_CLOSE;
  10e03c:	e51b3008 	ldr	r3, [fp, #-8]
  10e040:	e5933000 	ldr	r3, [r3]
  10e044:	e3a02004 	mov	r2, #4
  10e048:	e5832004 	str	r2, [r3, #4]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
  10e04c:	e51b3008 	ldr	r3, [fp, #-8]
  10e050:	e3a02003 	mov	r2, #3
  10e054:	e5c32008 	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
  10e058:	e51b3008 	ldr	r3, [fp, #-8]
  10e05c:	e5933000 	ldr	r3, [r3]
  10e060:	e51b2008 	ldr	r2, [fp, #-8]
  10e064:	e5832038 	str	r2, [r3, #56]	; 0x38
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10e068:	e51b3008 	ldr	r3, [fp, #-8]
  10e06c:	e5933000 	ldr	r3, [r3]
  10e070:	e3a01000 	mov	r1, #0
  10e074:	e1a00003 	mov	r0, r3
  10e078:	ebfffe26 	bl	10d918 <lwip_netconn_do_close_internal>
  10e07c:	e1a03000 	mov	r3, r0
  10e080:	e3530000 	cmp	r3, #0
  10e084:	0a00005b 	beq	10e1f8 <lwip_netconn_do_delconn+0x3a0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10e088:	e51b3008 	ldr	r3, [fp, #-8]
  10e08c:	e5933000 	ldr	r3, [r3]
  10e090:	e5933004 	ldr	r3, [r3, #4]
  10e094:	e3530004 	cmp	r3, #4
  10e098:	0a000006 	beq	10e0b8 <lwip_netconn_do_delconn+0x260>
  10e09c:	e30609e0 	movw	r0, #27104	; 0x69e0
  10e0a0:	e3400014 	movt	r0, #20
  10e0a4:	ebffd41a 	bl	103114 <rt_kprintf>
  10e0a8:	e3001435 	movw	r1, #1077	; 0x435
  10e0ac:	e30606a8 	movw	r0, #26280	; 0x66a8
  10e0b0:	e3400014 	movt	r0, #20
  10e0b4:	ebfff40d 	bl	10b0f0 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10e0b8:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  10e0bc:	e3400014 	movt	r0, #20
  10e0c0:	ebfff29a 	bl	10ab30 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10e0c4:	e51b3008 	ldr	r3, [fp, #-8]
  10e0c8:	e5933000 	ldr	r3, [r3]
  10e0cc:	e2833010 	add	r3, r3, #16
  10e0d0:	e3a01000 	mov	r1, #0
  10e0d4:	e1a00003 	mov	r0, r3
  10e0d8:	ebfff218 	bl	10a940 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10e0dc:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  10e0e0:	e3400014 	movt	r0, #20
  10e0e4:	ebfff285 	bl	10ab00 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10e0e8:	e51b3008 	ldr	r3, [fp, #-8]
  10e0ec:	e5933000 	ldr	r3, [r3]
  10e0f0:	e5933004 	ldr	r3, [r3, #4]
  10e0f4:	e3530000 	cmp	r3, #0
  10e0f8:	0a00003e 	beq	10e1f8 <lwip_netconn_do_delconn+0x3a0>
  10e0fc:	e30609e0 	movw	r0, #27104	; 0x69e0
  10e100:	e3400014 	movt	r0, #20
  10e104:	ebffd402 	bl	103114 <rt_kprintf>
  10e108:	e3001439 	movw	r1, #1081	; 0x439
  10e10c:	e30606a8 	movw	r0, #26280	; 0x66a8
  10e110:	e3400014 	movt	r0, #20
  10e114:	ebfff3f5 	bl	10b0f0 <sys_arch_assert>
        return;
  10e118:	ea000036 	b	10e1f8 <lwip_netconn_do_delconn+0x3a0>
      }
      msg->conn->pcb.tcp = NULL;
  10e11c:	e51b3008 	ldr	r3, [fp, #-8]
  10e120:	e5933000 	ldr	r3, [r3]
  10e124:	e3a02000 	mov	r2, #0
  10e128:	e5832008 	str	r2, [r3, #8]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
  10e12c:	e51b3008 	ldr	r3, [fp, #-8]
  10e130:	e5933000 	ldr	r3, [r3]
  10e134:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e138:	e3530000 	cmp	r3, #0
  10e13c:	0a000007 	beq	10e160 <lwip_netconn_do_delconn+0x308>
  10e140:	e51b3008 	ldr	r3, [fp, #-8]
  10e144:	e5933000 	ldr	r3, [r3]
  10e148:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e14c:	e51b2008 	ldr	r2, [fp, #-8]
  10e150:	e5920000 	ldr	r0, [r2]
  10e154:	e3a02000 	mov	r2, #0
  10e158:	e3a01000 	mov	r1, #0
  10e15c:	e12fff33 	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
  10e160:	e51b3008 	ldr	r3, [fp, #-8]
  10e164:	e5933000 	ldr	r3, [r3]
  10e168:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e16c:	e3530000 	cmp	r3, #0
  10e170:	0a000007 	beq	10e194 <lwip_netconn_do_delconn+0x33c>
  10e174:	e51b3008 	ldr	r3, [fp, #-8]
  10e178:	e5933000 	ldr	r3, [r3]
  10e17c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e180:	e51b2008 	ldr	r2, [fp, #-8]
  10e184:	e5920000 	ldr	r0, [r2]
  10e188:	e3a02000 	mov	r2, #0
  10e18c:	e3a01002 	mov	r1, #2
  10e190:	e12fff33 	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
  10e194:	e51b3008 	ldr	r3, [fp, #-8]
  10e198:	e5933000 	ldr	r3, [r3]
  10e19c:	e2833010 	add	r3, r3, #16
  10e1a0:	e1a00003 	mov	r0, r3
  10e1a4:	ebfff218 	bl	10aa0c <sys_sem_valid>
  10e1a8:	e1a03000 	mov	r3, r0
  10e1ac:	e3530000 	cmp	r3, #0
  10e1b0:	0a000011 	beq	10e1fc <lwip_netconn_do_delconn+0x3a4>
    TCPIP_APIMSG_ACK(msg);
  10e1b4:	e51b3008 	ldr	r3, [fp, #-8]
  10e1b8:	e5933000 	ldr	r3, [r3]
  10e1bc:	e3530000 	cmp	r3, #0
  10e1c0:	0a00000d 	beq	10e1fc <lwip_netconn_do_delconn+0x3a4>
  10e1c4:	ebffd01c 	bl	10223c <rt_enter_critical>
  10e1c8:	e51b3008 	ldr	r3, [fp, #-8]
  10e1cc:	e5933000 	ldr	r3, [r3]
  10e1d0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e1d4:	e373000c 	cmn	r3, #12
  10e1d8:	ba000004 	blt	10e1f0 <lwip_netconn_do_delconn+0x398>
  10e1dc:	e51b3008 	ldr	r3, [fp, #-8]
  10e1e0:	e5933000 	ldr	r3, [r3]
  10e1e4:	e51b2008 	ldr	r2, [fp, #-8]
  10e1e8:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e1ec:	e5c3200c 	strb	r2, [r3, #12]
  10e1f0:	ebffd017 	bl	102254 <rt_exit_critical>
  10e1f4:	ea000000 	b	10e1fc <lwip_netconn_do_delconn+0x3a4>
        return;
  10e1f8:	e320f000 	nop	{0}
  }
}
  10e1fc:	e24bd004 	sub	sp, fp, #4
  10e200:	e8bd8800 	pop	{fp, pc}

0010e204 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
  10e204:	e92d4800 	push	{fp, lr}
  10e208:	e28db004 	add	fp, sp, #4
  10e20c:	e24dd010 	sub	sp, sp, #16
  10e210:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e214:	e51b3010 	ldr	r3, [fp, #-16]
  10e218:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10e21c:	e51b3008 	ldr	r3, [fp, #-8]
  10e220:	e5933000 	ldr	r3, [r3]
  10e224:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e228:	e373000c 	cmn	r3, #12
  10e22c:	aa000005 	bge	10e248 <lwip_netconn_do_bind+0x44>
    msg->err = msg->conn->last_err;
  10e230:	e51b3008 	ldr	r3, [fp, #-8]
  10e234:	e5933000 	ldr	r3, [r3]
  10e238:	e1d320dc 	ldrsb	r2, [r3, #12]
  10e23c:	e51b3008 	ldr	r3, [fp, #-8]
  10e240:	e5c32004 	strb	r2, [r3, #4]
  10e244:	ea00003c 	b	10e33c <lwip_netconn_do_bind+0x138>
  } else {
    msg->err = ERR_VAL;
  10e248:	e51b3008 	ldr	r3, [fp, #-8]
  10e24c:	e3e02005 	mvn	r2, #5
  10e250:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10e254:	e51b3008 	ldr	r3, [fp, #-8]
  10e258:	e5933000 	ldr	r3, [r3]
  10e25c:	e5933008 	ldr	r3, [r3, #8]
  10e260:	e3530000 	cmp	r3, #0
  10e264:	0a000033 	beq	10e338 <lwip_netconn_do_bind+0x134>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e268:	e51b3008 	ldr	r3, [fp, #-8]
  10e26c:	e5933000 	ldr	r3, [r3]
  10e270:	e5933000 	ldr	r3, [r3]
  10e274:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e278:	e3530020 	cmp	r3, #32
  10e27c:	0a000011 	beq	10e2c8 <lwip_netconn_do_bind+0xc4>
  10e280:	e3530040 	cmp	r3, #64	; 0x40
  10e284:	0a000002 	beq	10e294 <lwip_netconn_do_bind+0x90>
  10e288:	e3530010 	cmp	r3, #16
  10e28c:	0a00001b 	beq	10e300 <lwip_netconn_do_bind+0xfc>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
  10e290:	ea000029 	b	10e33c <lwip_netconn_do_bind+0x138>
        msg->err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10e294:	e51b3008 	ldr	r3, [fp, #-8]
  10e298:	e5933000 	ldr	r3, [r3]
  10e29c:	e5932008 	ldr	r2, [r3, #8]
  10e2a0:	e51b3008 	ldr	r3, [fp, #-8]
  10e2a4:	e5933008 	ldr	r3, [r3, #8]
  10e2a8:	e1a01003 	mov	r1, r3
  10e2ac:	e1a00002 	mov	r0, r2
  10e2b0:	eb00383a 	bl	11c3a0 <raw_bind>
  10e2b4:	e1a03000 	mov	r3, r0
  10e2b8:	e1a02003 	mov	r2, r3
  10e2bc:	e51b3008 	ldr	r3, [fp, #-8]
  10e2c0:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e2c4:	ea00001c 	b	10e33c <lwip_netconn_do_bind+0x138>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e2c8:	e51b3008 	ldr	r3, [fp, #-8]
  10e2cc:	e5933000 	ldr	r3, [r3]
  10e2d0:	e5930008 	ldr	r0, [r3, #8]
  10e2d4:	e51b3008 	ldr	r3, [fp, #-8]
  10e2d8:	e5931008 	ldr	r1, [r3, #8]
  10e2dc:	e51b3008 	ldr	r3, [fp, #-8]
  10e2e0:	e1d330bc 	ldrh	r3, [r3, #12]
  10e2e4:	e1a02003 	mov	r2, r3
  10e2e8:	eb0068da 	bl	128658 <udp_bind>
  10e2ec:	e1a03000 	mov	r3, r0
  10e2f0:	e1a02003 	mov	r2, r3
  10e2f4:	e51b3008 	ldr	r3, [fp, #-8]
  10e2f8:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e2fc:	ea00000e 	b	10e33c <lwip_netconn_do_bind+0x138>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e300:	e51b3008 	ldr	r3, [fp, #-8]
  10e304:	e5933000 	ldr	r3, [r3]
  10e308:	e5930008 	ldr	r0, [r3, #8]
  10e30c:	e51b3008 	ldr	r3, [fp, #-8]
  10e310:	e5931008 	ldr	r1, [r3, #8]
  10e314:	e51b3008 	ldr	r3, [fp, #-8]
  10e318:	e1d330bc 	ldrh	r3, [r3, #12]
  10e31c:	e1a02003 	mov	r2, r3
  10e320:	eb003dc9 	bl	11da4c <tcp_bind>
  10e324:	e1a03000 	mov	r3, r0
  10e328:	e1a02003 	mov	r2, r3
  10e32c:	e51b3008 	ldr	r3, [fp, #-8]
  10e330:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e334:	ea000000 	b	10e33c <lwip_netconn_do_bind+0x138>
      }
    }
  10e338:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10e33c:	e51b3008 	ldr	r3, [fp, #-8]
  10e340:	e5933000 	ldr	r3, [r3]
  10e344:	e3530000 	cmp	r3, #0
  10e348:	0a00000b 	beq	10e37c <lwip_netconn_do_bind+0x178>
  10e34c:	ebffcfba 	bl	10223c <rt_enter_critical>
  10e350:	e51b3008 	ldr	r3, [fp, #-8]
  10e354:	e5933000 	ldr	r3, [r3]
  10e358:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e35c:	e373000c 	cmn	r3, #12
  10e360:	ba000004 	blt	10e378 <lwip_netconn_do_bind+0x174>
  10e364:	e51b3008 	ldr	r3, [fp, #-8]
  10e368:	e5933000 	ldr	r3, [r3]
  10e36c:	e51b2008 	ldr	r2, [fp, #-8]
  10e370:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e374:	e5c3200c 	strb	r2, [r3, #12]
  10e378:	ebffcfb5 	bl	102254 <rt_exit_critical>
}
  10e37c:	e320f000 	nop	{0}
  10e380:	e24bd004 	sub	sp, fp, #4
  10e384:	e8bd8800 	pop	{fp, pc}

0010e388 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
  10e388:	e92d4800 	push	{fp, lr}
  10e38c:	e28db004 	add	fp, sp, #4
  10e390:	e24dd020 	sub	sp, sp, #32
  10e394:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10e398:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10e39c:	e1a03002 	mov	r3, r2
  10e3a0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *conn;
  int was_blocking;
  sys_sem_t* op_completed_sem = NULL;
  10e3a4:	e3a03000 	mov	r3, #0
  10e3a8:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
  10e3ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10e3b0:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10e3b4:	e51b300c 	ldr	r3, [fp, #-12]
  10e3b8:	e3530000 	cmp	r3, #0
  10e3bc:	1a000001 	bne	10e3c8 <lwip_netconn_do_connected+0x40>
    return ERR_VAL;
  10e3c0:	e3e03005 	mvn	r3, #5
  10e3c4:	ea000074 	b	10e59c <lwip_netconn_do_connected+0x214>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
  10e3c8:	e51b300c 	ldr	r3, [fp, #-12]
  10e3cc:	e5933004 	ldr	r3, [r3, #4]
  10e3d0:	e3530003 	cmp	r3, #3
  10e3d4:	0a000006 	beq	10e3f4 <lwip_netconn_do_connected+0x6c>
  10e3d8:	e30609e8 	movw	r0, #27112	; 0x69e8
  10e3dc:	e3400014 	movt	r0, #20
  10e3e0:	ebffd34b 	bl	103114 <rt_kprintf>
  10e3e4:	e3001492 	movw	r1, #1170	; 0x492
  10e3e8:	e30606a8 	movw	r0, #26280	; 0x66a8
  10e3ec:	e3400014 	movt	r0, #20
  10e3f0:	ebfff33e 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
  10e3f4:	e51b300c 	ldr	r3, [fp, #-12]
  10e3f8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e3fc:	e3530000 	cmp	r3, #0
  10e400:	1a00000b 	bne	10e434 <lwip_netconn_do_connected+0xac>
  10e404:	e51b300c 	ldr	r3, [fp, #-12]
  10e408:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e40c:	e2033004 	and	r3, r3, #4
  10e410:	e3530000 	cmp	r3, #0
  10e414:	1a000006 	bne	10e434 <lwip_netconn_do_connected+0xac>
  10e418:	e3060a08 	movw	r0, #27144	; 0x6a08
  10e41c:	e3400014 	movt	r0, #20
  10e420:	ebffd33b 	bl	103114 <rt_kprintf>
  10e424:	e3001494 	movw	r1, #1172	; 0x494
  10e428:	e30606a8 	movw	r0, #26280	; 0x66a8
  10e42c:	e3400014 	movt	r0, #20
  10e430:	ebfff32e 	bl	10b0f0 <sys_arch_assert>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
  10e434:	e51b300c 	ldr	r3, [fp, #-12]
  10e438:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e43c:	e3530000 	cmp	r3, #0
  10e440:	0a000008 	beq	10e468 <lwip_netconn_do_connected+0xe0>
    conn->current_msg->err = err;
  10e444:	e51b300c 	ldr	r3, [fp, #-12]
  10e448:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e44c:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10e450:	e5c32004 	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10e454:	e51b300c 	ldr	r3, [fp, #-12]
  10e458:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e45c:	e5933000 	ldr	r3, [r3]
  10e460:	e2833010 	add	r3, r3, #16
  10e464:	e50b3008 	str	r3, [fp, #-8]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
  10e468:	e51b300c 	ldr	r3, [fp, #-12]
  10e46c:	e5933000 	ldr	r3, [r3]
  10e470:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e474:	e3530010 	cmp	r3, #16
  10e478:	1a000004 	bne	10e490 <lwip_netconn_do_connected+0x108>
  10e47c:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10e480:	e3530000 	cmp	r3, #0
  10e484:	1a000001 	bne	10e490 <lwip_netconn_do_connected+0x108>
    setup_tcp(conn);
  10e488:	e51b000c 	ldr	r0, [fp, #-12]
  10e48c:	ebfffabe 	bl	10cf8c <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
  10e490:	e51b300c 	ldr	r3, [fp, #-12]
  10e494:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e498:	e2033004 	and	r3, r3, #4
  10e49c:	e3530000 	cmp	r3, #0
  10e4a0:	03a03001 	moveq	r3, #1
  10e4a4:	13a03000 	movne	r3, #0
  10e4a8:	e6ef3073 	uxtb	r3, r3
  10e4ac:	e50b3010 	str	r3, [fp, #-16]
  SET_NONBLOCKING_CONNECT(conn, 0);
  10e4b0:	e51b300c 	ldr	r3, [fp, #-12]
  10e4b4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e4b8:	e3c33004 	bic	r3, r3, #4
  10e4bc:	e6ef2073 	uxtb	r2, r3
  10e4c0:	e51b300c 	ldr	r3, [fp, #-12]
  10e4c4:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  LWIP_ASSERT("blocking connect state error",
  10e4c8:	e51b3010 	ldr	r3, [fp, #-16]
  10e4cc:	e3530000 	cmp	r3, #0
  10e4d0:	0a000002 	beq	10e4e0 <lwip_netconn_do_connected+0x158>
  10e4d4:	e51b3008 	ldr	r3, [fp, #-8]
  10e4d8:	e3530000 	cmp	r3, #0
  10e4dc:	1a00000c 	bne	10e514 <lwip_netconn_do_connected+0x18c>
  10e4e0:	e51b3010 	ldr	r3, [fp, #-16]
  10e4e4:	e3530000 	cmp	r3, #0
  10e4e8:	1a000002 	bne	10e4f8 <lwip_netconn_do_connected+0x170>
  10e4ec:	e51b3008 	ldr	r3, [fp, #-8]
  10e4f0:	e3530000 	cmp	r3, #0
  10e4f4:	0a000006 	beq	10e514 <lwip_netconn_do_connected+0x18c>
  10e4f8:	e3060a48 	movw	r0, #27208	; 0x6a48
  10e4fc:	e3400014 	movt	r0, #20
  10e500:	ebffd303 	bl	103114 <rt_kprintf>
  10e504:	e30014a1 	movw	r1, #1185	; 0x4a1
  10e508:	e30606a8 	movw	r0, #26280	; 0x66a8
  10e50c:	e3400014 	movt	r0, #20
  10e510:	ebfff2f6 	bl	10b0f0 <sys_arch_assert>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
  10e514:	e51b300c 	ldr	r3, [fp, #-12]
  10e518:	e3a02000 	mov	r2, #0
  10e51c:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->state = NETCONN_NONE;
  10e520:	e51b300c 	ldr	r3, [fp, #-12]
  10e524:	e3a02000 	mov	r2, #0
  10e528:	e5832004 	str	r2, [r3, #4]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10e52c:	e51b300c 	ldr	r3, [fp, #-12]
  10e530:	e3530000 	cmp	r3, #0
  10e534:	0a000008 	beq	10e55c <lwip_netconn_do_connected+0x1d4>
  10e538:	ebffcf3f 	bl	10223c <rt_enter_critical>
  10e53c:	e51b300c 	ldr	r3, [fp, #-12]
  10e540:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e544:	e373000c 	cmn	r3, #12
  10e548:	ba000002 	blt	10e558 <lwip_netconn_do_connected+0x1d0>
  10e54c:	e51b300c 	ldr	r3, [fp, #-12]
  10e550:	e3a02000 	mov	r2, #0
  10e554:	e5c3200c 	strb	r2, [r3, #12]
  10e558:	ebffcf3d 	bl	102254 <rt_exit_critical>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10e55c:	e51b300c 	ldr	r3, [fp, #-12]
  10e560:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e564:	e3530000 	cmp	r3, #0
  10e568:	0a000005 	beq	10e584 <lwip_netconn_do_connected+0x1fc>
  10e56c:	e51b300c 	ldr	r3, [fp, #-12]
  10e570:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e574:	e3a02000 	mov	r2, #0
  10e578:	e3a01002 	mov	r1, #2
  10e57c:	e51b000c 	ldr	r0, [fp, #-12]
  10e580:	e12fff33 	blx	r3

  if (was_blocking) {
  10e584:	e51b3010 	ldr	r3, [fp, #-16]
  10e588:	e3530000 	cmp	r3, #0
  10e58c:	0a000001 	beq	10e598 <lwip_netconn_do_connected+0x210>
    sys_sem_signal(op_completed_sem);
  10e590:	e51b0008 	ldr	r0, [fp, #-8]
  10e594:	ebfff0de 	bl	10a914 <sys_sem_signal>
  }
  return ERR_OK;
  10e598:	e3a03000 	mov	r3, #0
}
  10e59c:	e1a00003 	mov	r0, r3
  10e5a0:	e24bd004 	sub	sp, fp, #4
  10e5a4:	e8bd8800 	pop	{fp, pc}

0010e5a8 <lwip_netconn_do_connect>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
  10e5a8:	e92d4800 	push	{fp, lr}
  10e5ac:	e28db004 	add	fp, sp, #4
  10e5b0:	e24dd010 	sub	sp, sp, #16
  10e5b4:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e5b8:	e51b3010 	ldr	r3, [fp, #-16]
  10e5bc:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.tcp == NULL) {
  10e5c0:	e51b3008 	ldr	r3, [fp, #-8]
  10e5c4:	e5933000 	ldr	r3, [r3]
  10e5c8:	e5933008 	ldr	r3, [r3, #8]
  10e5cc:	e3530000 	cmp	r3, #0
  10e5d0:	1a000003 	bne	10e5e4 <lwip_netconn_do_connect+0x3c>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
  10e5d4:	e51b3008 	ldr	r3, [fp, #-8]
  10e5d8:	e3e0200e 	mvn	r2, #14
  10e5dc:	e5c32004 	strb	r2, [r3, #4]
  10e5e0:	ea0000aa 	b	10e890 <lwip_netconn_do_connect+0x2e8>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e5e4:	e51b3008 	ldr	r3, [fp, #-8]
  10e5e8:	e5933000 	ldr	r3, [r3]
  10e5ec:	e5933000 	ldr	r3, [r3]
  10e5f0:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e5f4:	e3530020 	cmp	r3, #32
  10e5f8:	0a000011 	beq	10e644 <lwip_netconn_do_connect+0x9c>
  10e5fc:	e3530040 	cmp	r3, #64	; 0x40
  10e600:	0a000002 	beq	10e610 <lwip_netconn_do_connect+0x68>
  10e604:	e3530010 	cmp	r3, #16
  10e608:	0a00001b 	beq	10e67c <lwip_netconn_do_connect+0xd4>
  10e60c:	ea000093 	b	10e860 <lwip_netconn_do_connect+0x2b8>
#if LWIP_RAW
    case NETCONN_RAW:
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10e610:	e51b3008 	ldr	r3, [fp, #-8]
  10e614:	e5933000 	ldr	r3, [r3]
  10e618:	e5932008 	ldr	r2, [r3, #8]
  10e61c:	e51b3008 	ldr	r3, [fp, #-8]
  10e620:	e5933008 	ldr	r3, [r3, #8]
  10e624:	e1a01003 	mov	r1, r3
  10e628:	e1a00002 	mov	r0, r2
  10e62c:	eb003776 	bl	11c40c <raw_connect>
  10e630:	e1a03000 	mov	r3, r0
  10e634:	e1a02003 	mov	r2, r3
  10e638:	e51b3008 	ldr	r3, [fp, #-8]
  10e63c:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e640:	ea000092 	b	10e890 <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e644:	e51b3008 	ldr	r3, [fp, #-8]
  10e648:	e5933000 	ldr	r3, [r3]
  10e64c:	e5930008 	ldr	r0, [r3, #8]
  10e650:	e51b3008 	ldr	r3, [fp, #-8]
  10e654:	e5931008 	ldr	r1, [r3, #8]
  10e658:	e51b3008 	ldr	r3, [fp, #-8]
  10e65c:	e1d330bc 	ldrh	r3, [r3, #12]
  10e660:	e1a02003 	mov	r2, r3
  10e664:	eb006871 	bl	128830 <udp_connect>
  10e668:	e1a03000 	mov	r3, r0
  10e66c:	e1a02003 	mov	r2, r3
  10e670:	e51b3008 	ldr	r3, [fp, #-8]
  10e674:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e678:	ea000084 	b	10e890 <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
  10e67c:	e51b3008 	ldr	r3, [fp, #-8]
  10e680:	e5933000 	ldr	r3, [r3]
  10e684:	e5933004 	ldr	r3, [r3, #4]
  10e688:	e3530003 	cmp	r3, #3
  10e68c:	1a000003 	bne	10e6a0 <lwip_netconn_do_connect+0xf8>
        msg->err = ERR_ALREADY;
  10e690:	e51b3008 	ldr	r3, [fp, #-8]
  10e694:	e3e02008 	mvn	r2, #8
  10e698:	e5c32004 	strb	r2, [r3, #4]
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
          }
        }
      }
      break;
  10e69c:	ea00007a 	b	10e88c <lwip_netconn_do_connect+0x2e4>
      } else if (msg->conn->state != NETCONN_NONE) {
  10e6a0:	e51b3008 	ldr	r3, [fp, #-8]
  10e6a4:	e5933000 	ldr	r3, [r3]
  10e6a8:	e5933004 	ldr	r3, [r3, #4]
  10e6ac:	e3530000 	cmp	r3, #0
  10e6b0:	0a000003 	beq	10e6c4 <lwip_netconn_do_connect+0x11c>
        msg->err = ERR_ISCONN;
  10e6b4:	e51b3008 	ldr	r3, [fp, #-8]
  10e6b8:	e3e02009 	mvn	r2, #9
  10e6bc:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e6c0:	ea000071 	b	10e88c <lwip_netconn_do_connect+0x2e4>
        setup_tcp(msg->conn);
  10e6c4:	e51b3008 	ldr	r3, [fp, #-8]
  10e6c8:	e5933000 	ldr	r3, [r3]
  10e6cc:	e1a00003 	mov	r0, r3
  10e6d0:	ebfffa2d 	bl	10cf8c <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
  10e6d4:	e51b3008 	ldr	r3, [fp, #-8]
  10e6d8:	e5933000 	ldr	r3, [r3]
  10e6dc:	e5930008 	ldr	r0, [r3, #8]
  10e6e0:	e51b3008 	ldr	r3, [fp, #-8]
  10e6e4:	e5931008 	ldr	r1, [r3, #8]
  10e6e8:	e51b3008 	ldr	r3, [fp, #-8]
  10e6ec:	e1d320bc 	ldrh	r2, [r3, #12]
  10e6f0:	e30e3388 	movw	r3, #58248	; 0xe388
  10e6f4:	e3403010 	movt	r3, #16
  10e6f8:	eb003efd 	bl	11e2f4 <tcp_connect>
  10e6fc:	e1a03000 	mov	r3, r0
  10e700:	e1a02003 	mov	r2, r3
  10e704:	e51b3008 	ldr	r3, [fp, #-8]
  10e708:	e5c32004 	strb	r2, [r3, #4]
        if (msg->err == ERR_OK) {
  10e70c:	e51b3008 	ldr	r3, [fp, #-8]
  10e710:	e1d330d4 	ldrsb	r3, [r3, #4]
  10e714:	e3530000 	cmp	r3, #0
  10e718:	1a00005b 	bne	10e88c <lwip_netconn_do_connect+0x2e4>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
  10e71c:	e51b3008 	ldr	r3, [fp, #-8]
  10e720:	e5933000 	ldr	r3, [r3]
  10e724:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e728:	e2033002 	and	r3, r3, #2
  10e72c:	e3530000 	cmp	r3, #0
  10e730:	13a03001 	movne	r3, #1
  10e734:	03a03000 	moveq	r3, #0
  10e738:	e6ef3073 	uxtb	r3, r3
  10e73c:	e54b3009 	strb	r3, [fp, #-9]
          msg->conn->state = NETCONN_CONNECT;
  10e740:	e51b3008 	ldr	r3, [fp, #-8]
  10e744:	e5933000 	ldr	r3, [r3]
  10e748:	e3a02003 	mov	r2, #3
  10e74c:	e5832004 	str	r2, [r3, #4]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
  10e750:	e55b3009 	ldrb	r3, [fp, #-9]
  10e754:	e3530000 	cmp	r3, #0
  10e758:	0a000008 	beq	10e780 <lwip_netconn_do_connect+0x1d8>
  10e75c:	e51b3008 	ldr	r3, [fp, #-8]
  10e760:	e5933000 	ldr	r3, [r3]
  10e764:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e768:	e51b3008 	ldr	r3, [fp, #-8]
  10e76c:	e5933000 	ldr	r3, [r3]
  10e770:	e3822004 	orr	r2, r2, #4
  10e774:	e6ef2072 	uxtb	r2, r2
  10e778:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10e77c:	ea000007 	b	10e7a0 <lwip_netconn_do_connect+0x1f8>
  10e780:	e51b3008 	ldr	r3, [fp, #-8]
  10e784:	e5933000 	ldr	r3, [r3]
  10e788:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e78c:	e51b3008 	ldr	r3, [fp, #-8]
  10e790:	e5933000 	ldr	r3, [r3]
  10e794:	e3c22004 	bic	r2, r2, #4
  10e798:	e6ef2072 	uxtb	r2, r2
  10e79c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
          if (non_blocking) {
  10e7a0:	e55b3009 	ldrb	r3, [fp, #-9]
  10e7a4:	e3530000 	cmp	r3, #0
  10e7a8:	0a000003 	beq	10e7bc <lwip_netconn_do_connect+0x214>
            msg->err = ERR_INPROGRESS;
  10e7ac:	e51b3008 	ldr	r3, [fp, #-8]
  10e7b0:	e3e02004 	mvn	r2, #4
  10e7b4:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e7b8:	ea000033 	b	10e88c <lwip_netconn_do_connect+0x2e4>
            msg->conn->current_msg = msg;
  10e7bc:	e51b3008 	ldr	r3, [fp, #-8]
  10e7c0:	e5933000 	ldr	r3, [r3]
  10e7c4:	e51b2008 	ldr	r2, [fp, #-8]
  10e7c8:	e5832038 	str	r2, [r3, #56]	; 0x38
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
  10e7cc:	e51b3008 	ldr	r3, [fp, #-8]
  10e7d0:	e5933000 	ldr	r3, [r3]
  10e7d4:	e5933004 	ldr	r3, [r3, #4]
  10e7d8:	e3530003 	cmp	r3, #3
  10e7dc:	0a000006 	beq	10e7fc <lwip_netconn_do_connect+0x254>
  10e7e0:	e30609e0 	movw	r0, #27104	; 0x69e0
  10e7e4:	e3400014 	movt	r0, #20
  10e7e8:	ebffd249 	bl	103114 <rt_kprintf>
  10e7ec:	e30014df 	movw	r1, #1247	; 0x4df
  10e7f0:	e30606a8 	movw	r0, #26280	; 0x66a8
  10e7f4:	e3400014 	movt	r0, #20
  10e7f8:	ebfff23c 	bl	10b0f0 <sys_arch_assert>
            UNLOCK_TCPIP_CORE();
  10e7fc:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  10e800:	e3400014 	movt	r0, #20
  10e804:	ebfff0c9 	bl	10ab30 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10e808:	e51b3008 	ldr	r3, [fp, #-8]
  10e80c:	e5933000 	ldr	r3, [r3]
  10e810:	e2833010 	add	r3, r3, #16
  10e814:	e3a01000 	mov	r1, #0
  10e818:	e1a00003 	mov	r0, r3
  10e81c:	ebfff047 	bl	10a940 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
  10e820:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  10e824:	e3400014 	movt	r0, #20
  10e828:	ebfff0b4 	bl	10ab00 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
  10e82c:	e51b3008 	ldr	r3, [fp, #-8]
  10e830:	e5933000 	ldr	r3, [r3]
  10e834:	e5933004 	ldr	r3, [r3, #4]
  10e838:	e3530003 	cmp	r3, #3
  10e83c:	1a000024 	bne	10e8d4 <lwip_netconn_do_connect+0x32c>
  10e840:	e30609e0 	movw	r0, #27104	; 0x69e0
  10e844:	e3400014 	movt	r0, #20
  10e848:	ebffd231 	bl	103114 <rt_kprintf>
  10e84c:	e30014e3 	movw	r1, #1251	; 0x4e3
  10e850:	e30606a8 	movw	r0, #26280	; 0x66a8
  10e854:	e3400014 	movt	r0, #20
  10e858:	ebfff224 	bl	10b0f0 <sys_arch_assert>
            return;
  10e85c:	ea00001c 	b	10e8d4 <lwip_netconn_do_connect+0x32c>
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
  10e860:	e3060a68 	movw	r0, #27240	; 0x6a68
  10e864:	e3400014 	movt	r0, #20
  10e868:	ebffd229 	bl	103114 <rt_kprintf>
  10e86c:	e30014ec 	movw	r1, #1260	; 0x4ec
  10e870:	e30606a8 	movw	r0, #26280	; 0x66a8
  10e874:	e3400014 	movt	r0, #20
  10e878:	ebfff21c 	bl	10b0f0 <sys_arch_assert>
  10e87c:	e51b3008 	ldr	r3, [fp, #-8]
  10e880:	e3e02005 	mvn	r2, #5
  10e884:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e888:	ea000000 	b	10e890 <lwip_netconn_do_connect+0x2e8>
      break;
  10e88c:	e320f000 	nop	{0}
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
  10e890:	e51b3008 	ldr	r3, [fp, #-8]
  10e894:	e5933000 	ldr	r3, [r3]
  10e898:	e3530000 	cmp	r3, #0
  10e89c:	0a00000d 	beq	10e8d8 <lwip_netconn_do_connect+0x330>
  10e8a0:	ebffce65 	bl	10223c <rt_enter_critical>
  10e8a4:	e51b3008 	ldr	r3, [fp, #-8]
  10e8a8:	e5933000 	ldr	r3, [r3]
  10e8ac:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e8b0:	e373000c 	cmn	r3, #12
  10e8b4:	ba000004 	blt	10e8cc <lwip_netconn_do_connect+0x324>
  10e8b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e8bc:	e5933000 	ldr	r3, [r3]
  10e8c0:	e51b2008 	ldr	r2, [fp, #-8]
  10e8c4:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e8c8:	e5c3200c 	strb	r2, [r3, #12]
  10e8cc:	ebffce60 	bl	102254 <rt_exit_critical>
  10e8d0:	ea000000 	b	10e8d8 <lwip_netconn_do_connect+0x330>
            return;
  10e8d4:	e320f000 	nop	{0}
}
  10e8d8:	e24bd004 	sub	sp, fp, #4
  10e8dc:	e8bd8800 	pop	{fp, pc}

0010e8e0 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
  10e8e0:	e92d4800 	push	{fp, lr}
  10e8e4:	e28db004 	add	fp, sp, #4
  10e8e8:	e24dd010 	sub	sp, sp, #16
  10e8ec:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e8f0:	e51b3010 	ldr	r3, [fp, #-16]
  10e8f4:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10e8f8:	e51b3008 	ldr	r3, [fp, #-8]
  10e8fc:	e5933000 	ldr	r3, [r3]
  10e900:	e5933000 	ldr	r3, [r3]
  10e904:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e908:	e3530020 	cmp	r3, #32
  10e90c:	1a000008 	bne	10e934 <lwip_netconn_do_disconnect+0x54>
    udp_disconnect(msg->conn->pcb.udp);
  10e910:	e51b3008 	ldr	r3, [fp, #-8]
  10e914:	e5933000 	ldr	r3, [r3]
  10e918:	e5933008 	ldr	r3, [r3, #8]
  10e91c:	e1a00003 	mov	r0, r3
  10e920:	eb006812 	bl	128970 <udp_disconnect>
    msg->err = ERR_OK;
  10e924:	e51b3008 	ldr	r3, [fp, #-8]
  10e928:	e3a02000 	mov	r2, #0
  10e92c:	e5c32004 	strb	r2, [r3, #4]
  10e930:	ea000002 	b	10e940 <lwip_netconn_do_disconnect+0x60>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  10e934:	e51b3008 	ldr	r3, [fp, #-8]
  10e938:	e3e02005 	mvn	r2, #5
  10e93c:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10e940:	e51b3008 	ldr	r3, [fp, #-8]
  10e944:	e5933000 	ldr	r3, [r3]
  10e948:	e3530000 	cmp	r3, #0
  10e94c:	0a00000b 	beq	10e980 <lwip_netconn_do_disconnect+0xa0>
  10e950:	ebffce39 	bl	10223c <rt_enter_critical>
  10e954:	e51b3008 	ldr	r3, [fp, #-8]
  10e958:	e5933000 	ldr	r3, [r3]
  10e95c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e960:	e373000c 	cmn	r3, #12
  10e964:	ba000004 	blt	10e97c <lwip_netconn_do_disconnect+0x9c>
  10e968:	e51b3008 	ldr	r3, [fp, #-8]
  10e96c:	e5933000 	ldr	r3, [r3]
  10e970:	e51b2008 	ldr	r2, [fp, #-8]
  10e974:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e978:	e5c3200c 	strb	r2, [r3, #12]
  10e97c:	ebffce34 	bl	102254 <rt_exit_critical>
}
  10e980:	e320f000 	nop	{0}
  10e984:	e24bd004 	sub	sp, fp, #4
  10e988:	e8bd8800 	pop	{fp, pc}

0010e98c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
  10e98c:	e92d4800 	push	{fp, lr}
  10e990:	e28db004 	add	fp, sp, #4
  10e994:	e24dd018 	sub	sp, sp, #24
  10e998:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10e99c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10e9a0:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10e9a4:	e51b3008 	ldr	r3, [fp, #-8]
  10e9a8:	e5933000 	ldr	r3, [r3]
  10e9ac:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e9b0:	e373000c 	cmn	r3, #12
  10e9b4:	aa000005 	bge	10e9d0 <lwip_netconn_do_listen+0x44>
    msg->err = msg->conn->last_err;
  10e9b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e9bc:	e5933000 	ldr	r3, [r3]
  10e9c0:	e1d320dc 	ldrsb	r2, [r3, #12]
  10e9c4:	e51b3008 	ldr	r3, [fp, #-8]
  10e9c8:	e5c32004 	strb	r2, [r3, #4]
  10e9cc:	ea000083 	b	10ebe0 <lwip_netconn_do_listen+0x254>
  } else {
    msg->err = ERR_CONN;
  10e9d0:	e51b3008 	ldr	r3, [fp, #-8]
  10e9d4:	e3e0200a 	mvn	r2, #10
  10e9d8:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10e9dc:	e51b3008 	ldr	r3, [fp, #-8]
  10e9e0:	e5933000 	ldr	r3, [r3]
  10e9e4:	e5933008 	ldr	r3, [r3, #8]
  10e9e8:	e3530000 	cmp	r3, #0
  10e9ec:	0a00007b 	beq	10ebe0 <lwip_netconn_do_listen+0x254>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10e9f0:	e51b3008 	ldr	r3, [fp, #-8]
  10e9f4:	e5933000 	ldr	r3, [r3]
  10e9f8:	e5933000 	ldr	r3, [r3]
  10e9fc:	e20330f0 	and	r3, r3, #240	; 0xf0
  10ea00:	e3530010 	cmp	r3, #16
  10ea04:	1a000072 	bne	10ebd4 <lwip_netconn_do_listen+0x248>
        if (msg->conn->state == NETCONN_NONE) {
  10ea08:	e51b3008 	ldr	r3, [fp, #-8]
  10ea0c:	e5933000 	ldr	r3, [r3]
  10ea10:	e5933004 	ldr	r3, [r3, #4]
  10ea14:	e3530000 	cmp	r3, #0
  10ea18:	1a000064 	bne	10ebb0 <lwip_netconn_do_listen+0x224>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
  10ea1c:	e51b3008 	ldr	r3, [fp, #-8]
  10ea20:	e5933000 	ldr	r3, [r3]
  10ea24:	e5933008 	ldr	r3, [r3, #8]
  10ea28:	e5933014 	ldr	r3, [r3, #20]
  10ea2c:	e3530000 	cmp	r3, #0
  10ea30:	0a000003 	beq	10ea44 <lwip_netconn_do_listen+0xb8>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
  10ea34:	e51b3008 	ldr	r3, [fp, #-8]
  10ea38:	e3e02005 	mvn	r2, #5
  10ea3c:	e5c32004 	strb	r2, [r3, #4]
  10ea40:	ea000066 	b	10ebe0 <lwip_netconn_do_listen+0x254>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
  10ea44:	e3e03000 	mvn	r3, #0
  10ea48:	e54b3009 	strb	r3, [fp, #-9]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
  10ea4c:	e51b3008 	ldr	r3, [fp, #-8]
  10ea50:	e5933000 	ldr	r3, [r3]
  10ea54:	e5933008 	ldr	r3, [r3, #8]
  10ea58:	e24b2011 	sub	r2, fp, #17
  10ea5c:	e55b1009 	ldrb	r1, [fp, #-9]
  10ea60:	e1a00003 	mov	r0, r3
  10ea64:	eb003ca7 	bl	11dd08 <tcp_listen_with_backlog_and_err>
  10ea68:	e50b0010 	str	r0, [fp, #-16]

            if (lpcb == NULL) {
  10ea6c:	e51b3010 	ldr	r3, [fp, #-16]
  10ea70:	e3530000 	cmp	r3, #0
  10ea74:	1a000003 	bne	10ea88 <lwip_netconn_do_listen+0xfc>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
  10ea78:	e15b21d1 	ldrsb	r2, [fp, #-17]	; 0xffffffef
  10ea7c:	e51b3008 	ldr	r3, [fp, #-8]
  10ea80:	e5c32004 	strb	r2, [r3, #4]
  10ea84:	ea000055 	b	10ebe0 <lwip_netconn_do_listen+0x254>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
  10ea88:	e51b3008 	ldr	r3, [fp, #-8]
  10ea8c:	e5933000 	ldr	r3, [r3]
  10ea90:	e2833014 	add	r3, r3, #20
  10ea94:	e1a00003 	mov	r0, r3
  10ea98:	ebfff14b 	bl	10afcc <sys_mbox_valid>
  10ea9c:	e1a03000 	mov	r3, r0
  10eaa0:	e3530000 	cmp	r3, #0
  10eaa4:	0a000009 	beq	10ead0 <lwip_netconn_do_listen+0x144>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
  10eaa8:	e51b3008 	ldr	r3, [fp, #-8]
  10eaac:	e5933000 	ldr	r3, [r3]
  10eab0:	e2833014 	add	r3, r3, #20
  10eab4:	e1a00003 	mov	r0, r3
  10eab8:	ebfff07c 	bl	10acb0 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
  10eabc:	e51b3008 	ldr	r3, [fp, #-8]
  10eac0:	e5933000 	ldr	r3, [r3]
  10eac4:	e2833014 	add	r3, r3, #20
  10eac8:	e1a00003 	mov	r0, r3
  10eacc:	ebfff148 	bl	10aff4 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
  10ead0:	e51b3008 	ldr	r3, [fp, #-8]
  10ead4:	e3a02000 	mov	r2, #0
  10ead8:	e5c32004 	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
  10eadc:	e51b3008 	ldr	r3, [fp, #-8]
  10eae0:	e5933000 	ldr	r3, [r3]
  10eae4:	e2833018 	add	r3, r3, #24
  10eae8:	e1a00003 	mov	r0, r3
  10eaec:	ebfff136 	bl	10afcc <sys_mbox_valid>
  10eaf0:	e1a03000 	mov	r3, r0
  10eaf4:	e3530000 	cmp	r3, #0
  10eaf8:	1a000009 	bne	10eb24 <lwip_netconn_do_listen+0x198>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
  10eafc:	e51b3008 	ldr	r3, [fp, #-8]
  10eb00:	e5933000 	ldr	r3, [r3]
  10eb04:	e2833018 	add	r3, r3, #24
  10eb08:	e3a0100a 	mov	r1, #10
  10eb0c:	e1a00003 	mov	r0, r3
  10eb10:	ebfff031 	bl	10abdc <sys_mbox_new>
  10eb14:	e1a03000 	mov	r3, r0
  10eb18:	e1a02003 	mov	r2, r3
  10eb1c:	e51b3008 	ldr	r3, [fp, #-8]
  10eb20:	e5c32004 	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
  10eb24:	e51b3008 	ldr	r3, [fp, #-8]
  10eb28:	e1d330d4 	ldrsb	r3, [r3, #4]
  10eb2c:	e3530000 	cmp	r3, #0
  10eb30:	1a000017 	bne	10eb94 <lwip_netconn_do_listen+0x208>
                msg->conn->state = NETCONN_LISTEN;
  10eb34:	e51b3008 	ldr	r3, [fp, #-8]
  10eb38:	e5933000 	ldr	r3, [r3]
  10eb3c:	e3a02002 	mov	r2, #2
  10eb40:	e5832004 	str	r2, [r3, #4]
                msg->conn->pcb.tcp = lpcb;
  10eb44:	e51b3008 	ldr	r3, [fp, #-8]
  10eb48:	e5933000 	ldr	r3, [r3]
  10eb4c:	e51b2010 	ldr	r2, [fp, #-16]
  10eb50:	e5832008 	str	r2, [r3, #8]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
  10eb54:	e51b3008 	ldr	r3, [fp, #-8]
  10eb58:	e5933000 	ldr	r3, [r3]
  10eb5c:	e5932008 	ldr	r2, [r3, #8]
  10eb60:	e51b3008 	ldr	r3, [fp, #-8]
  10eb64:	e5933000 	ldr	r3, [r3]
  10eb68:	e1a01003 	mov	r1, r3
  10eb6c:	e1a00002 	mov	r0, r2
  10eb70:	eb0043fe 	bl	11fb70 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
  10eb74:	e51b3008 	ldr	r3, [fp, #-8]
  10eb78:	e5933000 	ldr	r3, [r3]
  10eb7c:	e5933008 	ldr	r3, [r3, #8]
  10eb80:	e30d1004 	movw	r1, #53252	; 0xd004
  10eb84:	e3401010 	movt	r1, #16
  10eb88:	e1a00003 	mov	r0, r3
  10eb8c:	eb004451 	bl	11fcd8 <tcp_accept>
  10eb90:	ea000012 	b	10ebe0 <lwip_netconn_do_listen+0x254>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
  10eb94:	e51b0010 	ldr	r0, [fp, #-16]
  10eb98:	eb003aad 	bl	11d654 <tcp_close>
                msg->conn->pcb.tcp = NULL;
  10eb9c:	e51b3008 	ldr	r3, [fp, #-8]
  10eba0:	e5933000 	ldr	r3, [r3]
  10eba4:	e3a02000 	mov	r2, #0
  10eba8:	e5832008 	str	r2, [r3, #8]
  10ebac:	ea00000b 	b	10ebe0 <lwip_netconn_do_listen+0x254>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
  10ebb0:	e51b3008 	ldr	r3, [fp, #-8]
  10ebb4:	e5933000 	ldr	r3, [r3]
  10ebb8:	e5933004 	ldr	r3, [r3, #4]
  10ebbc:	e3530002 	cmp	r3, #2
  10ebc0:	1a000006 	bne	10ebe0 <lwip_netconn_do_listen+0x254>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
  10ebc4:	e51b3008 	ldr	r3, [fp, #-8]
  10ebc8:	e3a02000 	mov	r2, #0
  10ebcc:	e5c32004 	strb	r2, [r3, #4]
  10ebd0:	ea000002 	b	10ebe0 <lwip_netconn_do_listen+0x254>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
  10ebd4:	e51b3008 	ldr	r3, [fp, #-8]
  10ebd8:	e3e0200f 	mvn	r2, #15
  10ebdc:	e5c32004 	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10ebe0:	e51b3008 	ldr	r3, [fp, #-8]
  10ebe4:	e5933000 	ldr	r3, [r3]
  10ebe8:	e3530000 	cmp	r3, #0
  10ebec:	0a00000b 	beq	10ec20 <lwip_netconn_do_listen+0x294>
  10ebf0:	ebffcd91 	bl	10223c <rt_enter_critical>
  10ebf4:	e51b3008 	ldr	r3, [fp, #-8]
  10ebf8:	e5933000 	ldr	r3, [r3]
  10ebfc:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ec00:	e373000c 	cmn	r3, #12
  10ec04:	ba000004 	blt	10ec1c <lwip_netconn_do_listen+0x290>
  10ec08:	e51b3008 	ldr	r3, [fp, #-8]
  10ec0c:	e5933000 	ldr	r3, [r3]
  10ec10:	e51b2008 	ldr	r2, [fp, #-8]
  10ec14:	e1d220d4 	ldrsb	r2, [r2, #4]
  10ec18:	e5c3200c 	strb	r2, [r3, #12]
  10ec1c:	ebffcd8c 	bl	102254 <rt_exit_critical>
}
  10ec20:	e320f000 	nop	{0}
  10ec24:	e24bd004 	sub	sp, fp, #4
  10ec28:	e8bd8800 	pop	{fp, pc}

0010ec2c <lwip_netconn_do_send>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
  10ec2c:	e92d4800 	push	{fp, lr}
  10ec30:	e28db004 	add	fp, sp, #4
  10ec34:	e24dd010 	sub	sp, sp, #16
  10ec38:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10ec3c:	e51b3010 	ldr	r3, [fp, #-16]
  10ec40:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10ec44:	e51b3008 	ldr	r3, [fp, #-8]
  10ec48:	e5933000 	ldr	r3, [r3]
  10ec4c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ec50:	e373000c 	cmn	r3, #12
  10ec54:	aa000005 	bge	10ec70 <lwip_netconn_do_send+0x44>
    msg->err = msg->conn->last_err;
  10ec58:	e51b3008 	ldr	r3, [fp, #-8]
  10ec5c:	e5933000 	ldr	r3, [r3]
  10ec60:	e1d320dc 	ldrsb	r2, [r3, #12]
  10ec64:	e51b3008 	ldr	r3, [fp, #-8]
  10ec68:	e5c32004 	strb	r2, [r3, #4]
  10ec6c:	ea00005e 	b	10edec <lwip_netconn_do_send+0x1c0>
  } else {
    msg->err = ERR_CONN;
  10ec70:	e51b3008 	ldr	r3, [fp, #-8]
  10ec74:	e3e0200a 	mvn	r2, #10
  10ec78:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10ec7c:	e51b3008 	ldr	r3, [fp, #-8]
  10ec80:	e5933000 	ldr	r3, [r3]
  10ec84:	e5933008 	ldr	r3, [r3, #8]
  10ec88:	e3530000 	cmp	r3, #0
  10ec8c:	0a000055 	beq	10ede8 <lwip_netconn_do_send+0x1bc>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10ec90:	e51b3008 	ldr	r3, [fp, #-8]
  10ec94:	e5933000 	ldr	r3, [r3]
  10ec98:	e5933000 	ldr	r3, [r3]
  10ec9c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10eca0:	e3530020 	cmp	r3, #32
  10eca4:	0a00002a 	beq	10ed54 <lwip_netconn_do_send+0x128>
  10eca8:	e3530040 	cmp	r3, #64	; 0x40
  10ecac:	0a000000 	beq	10ecb4 <lwip_netconn_do_send+0x88>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
  10ecb0:	ea00004d 	b	10edec <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany(&msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10ecb4:	e51b3008 	ldr	r3, [fp, #-8]
  10ecb8:	e5933008 	ldr	r3, [r3, #8]
  10ecbc:	e2833008 	add	r3, r3, #8
  10ecc0:	e3530000 	cmp	r3, #0
  10ecc4:	0a000004 	beq	10ecdc <lwip_netconn_do_send+0xb0>
  10ecc8:	e51b3008 	ldr	r3, [fp, #-8]
  10eccc:	e5933008 	ldr	r3, [r3, #8]
  10ecd0:	e5933008 	ldr	r3, [r3, #8]
  10ecd4:	e3530000 	cmp	r3, #0
  10ecd8:	1a00000d 	bne	10ed14 <lwip_netconn_do_send+0xe8>
          msg->err = raw_send(msg->conn->pcb.raw, msg->msg.b->p);
  10ecdc:	e51b3008 	ldr	r3, [fp, #-8]
  10ece0:	e5933000 	ldr	r3, [r3]
  10ece4:	e5932008 	ldr	r2, [r3, #8]
  10ece8:	e51b3008 	ldr	r3, [fp, #-8]
  10ecec:	e5933008 	ldr	r3, [r3, #8]
  10ecf0:	e5933000 	ldr	r3, [r3]
  10ecf4:	e1a01003 	mov	r1, r3
  10ecf8:	e1a00002 	mov	r0, r2
  10ecfc:	eb00367b 	bl	11c6f0 <raw_send>
  10ed00:	e1a03000 	mov	r3, r0
  10ed04:	e1a02003 	mov	r2, r3
  10ed08:	e51b3008 	ldr	r3, [fp, #-8]
  10ed0c:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ed10:	ea000035 	b	10edec <lwip_netconn_do_send+0x1c0>
          msg->err = raw_sendto(msg->conn->pcb.raw, msg->msg.b->p, &msg->msg.b->addr);
  10ed14:	e51b3008 	ldr	r3, [fp, #-8]
  10ed18:	e5933000 	ldr	r3, [r3]
  10ed1c:	e5930008 	ldr	r0, [r3, #8]
  10ed20:	e51b3008 	ldr	r3, [fp, #-8]
  10ed24:	e5933008 	ldr	r3, [r3, #8]
  10ed28:	e5931000 	ldr	r1, [r3]
  10ed2c:	e51b3008 	ldr	r3, [fp, #-8]
  10ed30:	e5933008 	ldr	r3, [r3, #8]
  10ed34:	e2833008 	add	r3, r3, #8
  10ed38:	e1a02003 	mov	r2, r3
  10ed3c:	eb0035dd 	bl	11c4b8 <raw_sendto>
  10ed40:	e1a03000 	mov	r3, r0
  10ed44:	e1a02003 	mov	r2, r3
  10ed48:	e51b3008 	ldr	r3, [fp, #-8]
  10ed4c:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ed50:	ea000025 	b	10edec <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10ed54:	e51b3008 	ldr	r3, [fp, #-8]
  10ed58:	e5933008 	ldr	r3, [r3, #8]
  10ed5c:	e5933008 	ldr	r3, [r3, #8]
  10ed60:	e3530000 	cmp	r3, #0
  10ed64:	1a00000d 	bne	10eda0 <lwip_netconn_do_send+0x174>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
  10ed68:	e51b3008 	ldr	r3, [fp, #-8]
  10ed6c:	e5933000 	ldr	r3, [r3]
  10ed70:	e5932008 	ldr	r2, [r3, #8]
  10ed74:	e51b3008 	ldr	r3, [fp, #-8]
  10ed78:	e5933008 	ldr	r3, [r3, #8]
  10ed7c:	e5933000 	ldr	r3, [r3]
  10ed80:	e1a01003 	mov	r1, r3
  10ed84:	e1a00002 	mov	r0, r2
  10ed88:	eb0064d4 	bl	1280e0 <udp_send>
  10ed8c:	e1a03000 	mov	r3, r0
  10ed90:	e1a02003 	mov	r2, r3
  10ed94:	e51b3008 	ldr	r3, [fp, #-8]
  10ed98:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ed9c:	ea000012 	b	10edec <lwip_netconn_do_send+0x1c0>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
  10eda0:	e51b3008 	ldr	r3, [fp, #-8]
  10eda4:	e5933000 	ldr	r3, [r3]
  10eda8:	e5930008 	ldr	r0, [r3, #8]
  10edac:	e51b3008 	ldr	r3, [fp, #-8]
  10edb0:	e5933008 	ldr	r3, [r3, #8]
  10edb4:	e5931000 	ldr	r1, [r3]
  10edb8:	e51b3008 	ldr	r3, [fp, #-8]
  10edbc:	e5933008 	ldr	r3, [r3, #8]
  10edc0:	e2832008 	add	r2, r3, #8
  10edc4:	e51b3008 	ldr	r3, [fp, #-8]
  10edc8:	e5933008 	ldr	r3, [r3, #8]
  10edcc:	e1d330bc 	ldrh	r3, [r3, #12]
  10edd0:	eb0064d7 	bl	128134 <udp_sendto>
  10edd4:	e1a03000 	mov	r3, r0
  10edd8:	e1a02003 	mov	r2, r3
  10eddc:	e51b3008 	ldr	r3, [fp, #-8]
  10ede0:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ede4:	ea000000 	b	10edec <lwip_netconn_do_send+0x1c0>
      }
    }
  10ede8:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10edec:	e51b3008 	ldr	r3, [fp, #-8]
  10edf0:	e5933000 	ldr	r3, [r3]
  10edf4:	e3530000 	cmp	r3, #0
  10edf8:	0a00000b 	beq	10ee2c <lwip_netconn_do_send+0x200>
  10edfc:	ebffcd0e 	bl	10223c <rt_enter_critical>
  10ee00:	e51b3008 	ldr	r3, [fp, #-8]
  10ee04:	e5933000 	ldr	r3, [r3]
  10ee08:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ee0c:	e373000c 	cmn	r3, #12
  10ee10:	ba000004 	blt	10ee28 <lwip_netconn_do_send+0x1fc>
  10ee14:	e51b3008 	ldr	r3, [fp, #-8]
  10ee18:	e5933000 	ldr	r3, [r3]
  10ee1c:	e51b2008 	ldr	r2, [fp, #-8]
  10ee20:	e1d220d4 	ldrsb	r2, [r2, #4]
  10ee24:	e5c3200c 	strb	r2, [r3, #12]
  10ee28:	ebffcd09 	bl	102254 <rt_exit_critical>
}
  10ee2c:	e320f000 	nop	{0}
  10ee30:	e24bd004 	sub	sp, fp, #4
  10ee34:	e8bd8800 	pop	{fp, pc}

0010ee38 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
  10ee38:	e92d4800 	push	{fp, lr}
  10ee3c:	e28db004 	add	fp, sp, #4
  10ee40:	e24dd018 	sub	sp, sp, #24
  10ee44:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10ee48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ee4c:	e50b300c 	str	r3, [fp, #-12]

  msg->err = ERR_OK;
  10ee50:	e51b300c 	ldr	r3, [fp, #-12]
  10ee54:	e3a02000 	mov	r2, #0
  10ee58:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
  10ee5c:	e51b300c 	ldr	r3, [fp, #-12]
  10ee60:	e5933000 	ldr	r3, [r3]
  10ee64:	e5933008 	ldr	r3, [r3, #8]
  10ee68:	e3530000 	cmp	r3, #0
  10ee6c:	0a00001e 	beq	10eeec <lwip_netconn_do_recv+0xb4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10ee70:	e51b300c 	ldr	r3, [fp, #-12]
  10ee74:	e5933000 	ldr	r3, [r3]
  10ee78:	e5933000 	ldr	r3, [r3]
  10ee7c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10ee80:	e3530010 	cmp	r3, #16
  10ee84:	1a000018 	bne	10eeec <lwip_netconn_do_recv+0xb4>
      u32_t remaining = msg->msg.r.len;
  10ee88:	e51b300c 	ldr	r3, [fp, #-12]
  10ee8c:	e5933008 	ldr	r3, [r3, #8]
  10ee90:	e50b3008 	str	r3, [fp, #-8]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
  10ee94:	e51b3008 	ldr	r3, [fp, #-8]
  10ee98:	e3530801 	cmp	r3, #65536	; 0x10000
  10ee9c:	2a000002 	bcs	10eeac <lwip_netconn_do_recv+0x74>
  10eea0:	e51b3008 	ldr	r3, [fp, #-8]
  10eea4:	e6ff3073 	uxth	r3, r3
  10eea8:	ea000000 	b	10eeb0 <lwip_netconn_do_recv+0x78>
  10eeac:	e30f3fff 	movw	r3, #65535	; 0xffff
  10eeb0:	e14b30be 	strh	r3, [fp, #-14]
        tcp_recved(msg->conn->pcb.tcp, recved);
  10eeb4:	e51b300c 	ldr	r3, [fp, #-12]
  10eeb8:	e5933000 	ldr	r3, [r3]
  10eebc:	e5933008 	ldr	r3, [r3, #8]
  10eec0:	e15b20be 	ldrh	r2, [fp, #-14]
  10eec4:	e1a01002 	mov	r1, r2
  10eec8:	e1a00003 	mov	r0, r3
  10eecc:	eb003c86 	bl	11e0ec <tcp_recved>
        remaining -= recved;
  10eed0:	e15b30be 	ldrh	r3, [fp, #-14]
  10eed4:	e51b2008 	ldr	r2, [fp, #-8]
  10eed8:	e0423003 	sub	r3, r2, r3
  10eedc:	e50b3008 	str	r3, [fp, #-8]
      } while (remaining != 0);
  10eee0:	e51b3008 	ldr	r3, [fp, #-8]
  10eee4:	e3530000 	cmp	r3, #0
  10eee8:	1affffe9 	bne	10ee94 <lwip_netconn_do_recv+0x5c>
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10eeec:	e51b300c 	ldr	r3, [fp, #-12]
  10eef0:	e5933000 	ldr	r3, [r3]
  10eef4:	e3530000 	cmp	r3, #0
  10eef8:	0a00000b 	beq	10ef2c <lwip_netconn_do_recv+0xf4>
  10eefc:	ebffccce 	bl	10223c <rt_enter_critical>
  10ef00:	e51b300c 	ldr	r3, [fp, #-12]
  10ef04:	e5933000 	ldr	r3, [r3]
  10ef08:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ef0c:	e373000c 	cmn	r3, #12
  10ef10:	ba000004 	blt	10ef28 <lwip_netconn_do_recv+0xf0>
  10ef14:	e51b300c 	ldr	r3, [fp, #-12]
  10ef18:	e5933000 	ldr	r3, [r3]
  10ef1c:	e51b200c 	ldr	r2, [fp, #-12]
  10ef20:	e1d220d4 	ldrsb	r2, [r2, #4]
  10ef24:	e5c3200c 	strb	r2, [r3, #12]
  10ef28:	ebffccc9 	bl	102254 <rt_exit_critical>
}
  10ef2c:	e320f000 	nop	{0}
  10ef30:	e24bd004 	sub	sp, fp, #4
  10ef34:	e8bd8800 	pop	{fp, pc}

0010ef38 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10ef38:	e92d4800 	push	{fp, lr}
  10ef3c:	e28db004 	add	fp, sp, #4
  10ef40:	e24dd020 	sub	sp, sp, #32
  10ef44:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10ef48:	e1a03001 	mov	r3, r1
  10ef4c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
  10ef50:	e3a03000 	mov	r3, #0
  10ef54:	e54b3009 	strb	r3, [fp, #-9]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
  10ef58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef5c:	e3530000 	cmp	r3, #0
  10ef60:	1a000006 	bne	10ef80 <lwip_netconn_do_writemore+0x48>
  10ef64:	e30607a0 	movw	r0, #26528	; 0x67a0
  10ef68:	e3400014 	movt	r0, #20
  10ef6c:	ebffd068 	bl	103114 <rt_kprintf>
  10ef70:	e30015dd 	movw	r1, #1501	; 0x5dd
  10ef74:	e30606a8 	movw	r0, #26280	; 0x66a8
  10ef78:	e3400014 	movt	r0, #20
  10ef7c:	ebfff05b 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
  10ef80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef84:	e5933004 	ldr	r3, [r3, #4]
  10ef88:	e3530001 	cmp	r3, #1
  10ef8c:	0a000006 	beq	10efac <lwip_netconn_do_writemore+0x74>
  10ef90:	e3060a80 	movw	r0, #27264	; 0x6a80
  10ef94:	e3400014 	movt	r0, #20
  10ef98:	ebffd05d 	bl	103114 <rt_kprintf>
  10ef9c:	e30015de 	movw	r1, #1502	; 0x5de
  10efa0:	e30606a8 	movw	r0, #26280	; 0x66a8
  10efa4:	e3400014 	movt	r0, #20
  10efa8:	ebfff050 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10efac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efb0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10efb4:	e3530000 	cmp	r3, #0
  10efb8:	1a000006 	bne	10efd8 <lwip_netconn_do_writemore+0xa0>
  10efbc:	e30607b0 	movw	r0, #26544	; 0x67b0
  10efc0:	e3400014 	movt	r0, #20
  10efc4:	ebffd052 	bl	103114 <rt_kprintf>
  10efc8:	e30015df 	movw	r1, #1503	; 0x5df
  10efcc:	e30606a8 	movw	r0, #26280	; 0x66a8
  10efd0:	e3400014 	movt	r0, #20
  10efd4:	ebfff045 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
  10efd8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efdc:	e5933008 	ldr	r3, [r3, #8]
  10efe0:	e3530000 	cmp	r3, #0
  10efe4:	1a000006 	bne	10f004 <lwip_netconn_do_writemore+0xcc>
  10efe8:	e3060aa0 	movw	r0, #27296	; 0x6aa0
  10efec:	e3400014 	movt	r0, #20
  10eff0:	ebffd047 	bl	103114 <rt_kprintf>
  10eff4:	e3a01e5e 	mov	r1, #1504	; 0x5e0
  10eff8:	e30606a8 	movw	r0, #26280	; 0x66a8
  10effc:	e3400014 	movt	r0, #20
  10f000:	ebfff03a 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
  10f004:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f008:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f00c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f010:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f014:	e593300c 	ldr	r3, [r3, #12]
  10f018:	e1520003 	cmp	r2, r3
  10f01c:	3a000006 	bcc	10f03c <lwip_netconn_do_writemore+0x104>
  10f020:	e3060ab8 	movw	r0, #27320	; 0x6ab8
  10f024:	e3400014 	movt	r0, #20
  10f028:	ebffd039 	bl	103114 <rt_kprintf>
  10f02c:	e30015e2 	movw	r1, #1506	; 0x5e2
  10f030:	e30606a8 	movw	r0, #26280	; 0x66a8
  10f034:	e3400014 	movt	r0, #20
  10f038:	ebfff02c 	bl	10b0f0 <sys_arch_assert>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
  10f03c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f040:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f044:	e5d33010 	ldrb	r3, [r3, #16]
  10f048:	e54b300a 	strb	r3, [fp, #-10]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10f04c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f050:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10f054:	e2033002 	and	r3, r3, #2
  10f058:	e3530000 	cmp	r3, #0
  10f05c:	1a000003 	bne	10f070 <lwip_netconn_do_writemore+0x138>
  10f060:	e55b300a 	ldrb	r3, [fp, #-10]
  10f064:	e2033004 	and	r3, r3, #4
  10f068:	e3530000 	cmp	r3, #0
  10f06c:	0a000001 	beq	10f078 <lwip_netconn_do_writemore+0x140>
  10f070:	e3a03001 	mov	r3, #1
  10f074:	ea000000 	b	10f07c <lwip_netconn_do_writemore+0x144>
  10f078:	e3a03000 	mov	r3, #0
  10f07c:	e54b300b 	strb	r3, [fp, #-11]

#if LWIP_SO_SNDTIMEO
  if ((conn->send_timeout != 0) &&
  10f080:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f084:	e5933020 	ldr	r3, [r3, #32]
  10f088:	e3530000 	cmp	r3, #0
  10f08c:	0a000022 	beq	10f11c <lwip_netconn_do_writemore+0x1e4>
      ((s32_t)(sys_now() - conn->current_msg->msg.w.time_started) >= conn->send_timeout)) {
  10f090:	ebfff02f 	bl	10b154 <sys_now>
  10f094:	e1a02000 	mov	r2, r0
  10f098:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f09c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0a0:	e5933014 	ldr	r3, [r3, #20]
  10f0a4:	e0423003 	sub	r3, r2, r3
  10f0a8:	e1a02003 	mov	r2, r3
  10f0ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0b0:	e5933020 	ldr	r3, [r3, #32]
  if ((conn->send_timeout != 0) &&
  10f0b4:	e1520003 	cmp	r2, r3
  10f0b8:	ba000017 	blt	10f11c <lwip_netconn_do_writemore+0x1e4>
    write_finished = 1;
  10f0bc:	e3a03001 	mov	r3, #1
  10f0c0:	e54b3009 	strb	r3, [fp, #-9]
    if (conn->write_offset == 0) {
  10f0c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0c8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f0cc:	e3530000 	cmp	r3, #0
  10f0d0:	1a000006 	bne	10f0f0 <lwip_netconn_do_writemore+0x1b8>
      /* nothing has been written */
      err = ERR_WOULDBLOCK;
  10f0d4:	e3e03006 	mvn	r3, #6
  10f0d8:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = 0;
  10f0dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0e0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0e4:	e3a02000 	mov	r2, #0
  10f0e8:	e583200c 	str	r2, [r3, #12]
    if (conn->write_offset == 0) {
  10f0ec:	ea0000e0 	b	10f474 <lwip_netconn_do_writemore+0x53c>
    } else {
      /* partial write */
      err = ERR_OK;
  10f0f0:	e3a03000 	mov	r3, #0
  10f0f4:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = conn->write_offset;
  10f0f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0fc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f100:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10f104:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10f108:	e583200c 	str	r2, [r3, #12]
      conn->write_offset = 0;
  10f10c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f110:	e3a02000 	mov	r2, #0
  10f114:	e5832034 	str	r2, [r3, #52]	; 0x34
    if (conn->write_offset == 0) {
  10f118:	ea0000d5 	b	10f474 <lwip_netconn_do_writemore+0x53c>
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
  10f11c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f120:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f124:	e5932008 	ldr	r2, [r3, #8]
  10f128:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f12c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f130:	e0823003 	add	r3, r2, r3
  10f134:	e50b3010 	str	r3, [fp, #-16]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
  10f138:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f13c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f140:	e593200c 	ldr	r2, [r3, #12]
  10f144:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f148:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f14c:	e0423003 	sub	r3, r2, r3
  10f150:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (diff > 0xffffUL) { /* max_u16_t */
  10f154:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10f158:	e3530801 	cmp	r3, #65536	; 0x10000
  10f15c:	3a000005 	bcc	10f178 <lwip_netconn_do_writemore+0x240>
      len = 0xffff;
  10f160:	e3e03000 	mvn	r3, #0
  10f164:	e14b30b8 	strh	r3, [fp, #-8]
      apiflags |= TCP_WRITE_FLAG_MORE;
  10f168:	e55b300a 	ldrb	r3, [fp, #-10]
  10f16c:	e3833002 	orr	r3, r3, #2
  10f170:	e54b300a 	strb	r3, [fp, #-10]
  10f174:	ea000001 	b	10f180 <lwip_netconn_do_writemore+0x248>
    } else {
      len = (u16_t)diff;
  10f178:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10f17c:	e14b30b8 	strh	r3, [fp, #-8]
    }
    available = tcp_sndbuf(conn->pcb.tcp);
  10f180:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f184:	e5933008 	ldr	r3, [r3, #8]
  10f188:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10f18c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (available < len) {
  10f190:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10f194:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f198:	e1520003 	cmp	r2, r3
  10f19c:	2a00000d 	bcs	10f1d8 <lwip_netconn_do_writemore+0x2a0>
      /* don't try to write more than sendbuf */
      len = available;
  10f1a0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10f1a4:	e14b30b8 	strh	r3, [fp, #-8]
      if (dontblock) {
  10f1a8:	e55b300b 	ldrb	r3, [fp, #-11]
  10f1ac:	e3530000 	cmp	r3, #0
  10f1b0:	0a000005 	beq	10f1cc <lwip_netconn_do_writemore+0x294>
        if (!len) {
  10f1b4:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f1b8:	e3530000 	cmp	r3, #0
  10f1bc:	1a000005 	bne	10f1d8 <lwip_netconn_do_writemore+0x2a0>
          err = ERR_WOULDBLOCK;
  10f1c0:	e3e03006 	mvn	r3, #6
  10f1c4:	e54b3005 	strb	r3, [fp, #-5]
          goto err_mem;
  10f1c8:	ea000021 	b	10f254 <lwip_netconn_do_writemore+0x31c>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
  10f1cc:	e55b300a 	ldrb	r3, [fp, #-10]
  10f1d0:	e3833002 	orr	r3, r3, #2
  10f1d4:	e54b300a 	strb	r3, [fp, #-10]
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
  10f1d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1dc:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f1e0:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f1e4:	e0822003 	add	r2, r2, r3
  10f1e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1ec:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f1f0:	e593300c 	ldr	r3, [r3, #12]
  10f1f4:	e1520003 	cmp	r2, r3
  10f1f8:	9a000006 	bls	10f218 <lwip_netconn_do_writemore+0x2e0>
  10f1fc:	e3060aec 	movw	r0, #27372	; 0x6aec
  10f200:	e3400014 	movt	r0, #20
  10f204:	ebffcfc2 	bl	103114 <rt_kprintf>
  10f208:	e300160d 	movw	r1, #1549	; 0x60d
  10f20c:	e30606a8 	movw	r0, #26280	; 0x66a8
  10f210:	e3400014 	movt	r0, #20
  10f214:	ebffefb5 	bl	10b0f0 <sys_arch_assert>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
  10f218:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f21c:	e5930008 	ldr	r0, [r3, #8]
  10f220:	e55b300a 	ldrb	r3, [fp, #-10]
  10f224:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f228:	e51b1010 	ldr	r1, [fp, #-16]
  10f22c:	eb00571b 	bl	124ea0 <tcp_write>
  10f230:	e1a03000 	mov	r3, r0
  10f234:	e54b3005 	strb	r3, [fp, #-5]
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
  10f238:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f23c:	e3530000 	cmp	r3, #0
  10f240:	0a000002 	beq	10f250 <lwip_netconn_do_writemore+0x318>
  10f244:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f248:	e3730001 	cmn	r3, #1
  10f24c:	1a00002f 	bne	10f310 <lwip_netconn_do_writemore+0x3d8>
err_mem:
  10f250:	e320f000 	nop	{0}
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
  10f254:	e55b300b 	ldrb	r3, [fp, #-11]
  10f258:	e3530000 	cmp	r3, #0
  10f25c:	0a000016 	beq	10f2bc <lwip_netconn_do_writemore+0x384>
  10f260:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f264:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f268:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f26c:	e593300c 	ldr	r3, [r3, #12]
  10f270:	e1520003 	cmp	r2, r3
  10f274:	2a000010 	bcs	10f2bc <lwip_netconn_do_writemore+0x384>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10f278:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f27c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f280:	e3530000 	cmp	r3, #0
  10f284:	0a000005 	beq	10f2a0 <lwip_netconn_do_writemore+0x368>
  10f288:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f28c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f290:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f294:	e3a01003 	mov	r1, #3
  10f298:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10f29c:	e12fff33 	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
  10f2a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2a4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10f2a8:	e3833010 	orr	r3, r3, #16
  10f2ac:	e6ef2073 	uxtb	r2, r3
  10f2b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2b4:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10f2b8:	ea000014 	b	10f310 <lwip_netconn_do_writemore+0x3d8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10f2bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2c0:	e5933008 	ldr	r3, [r3, #8]
  10f2c4:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10f2c8:	e6bf3073 	sxth	r3, r3
  10f2cc:	e3530000 	cmp	r3, #0
  10f2d0:	aa000004 	bge	10f2e8 <lwip_netconn_do_writemore+0x3b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
  10f2d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2d8:	e5933008 	ldr	r3, [r3, #8]
  10f2dc:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10f2e0:	e3530058 	cmp	r3, #88	; 0x58
  10f2e4:	9a000009 	bls	10f310 <lwip_netconn_do_writemore+0x3d8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10f2e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2ec:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f2f0:	e3530000 	cmp	r3, #0
  10f2f4:	0a000005 	beq	10f310 <lwip_netconn_do_writemore+0x3d8>
  10f2f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2fc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f300:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f304:	e3a01003 	mov	r1, #3
  10f308:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10f30c:	e12fff33 	blx	r3
      }
    }

    if (err == ERR_OK) {
  10f310:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f314:	e3530000 	cmp	r3, #0
  10f318:	1a00002b 	bne	10f3cc <lwip_netconn_do_writemore+0x494>
      err_t out_err;
      conn->write_offset += len;
  10f31c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f320:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f324:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f328:	e0822003 	add	r2, r2, r3
  10f32c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f330:	e5832034 	str	r2, [r3, #52]	; 0x34
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
  10f334:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f338:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f33c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f340:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f344:	e593300c 	ldr	r3, [r3, #12]
  10f348:	e1520003 	cmp	r2, r3
  10f34c:	0a000002 	beq	10f35c <lwip_netconn_do_writemore+0x424>
  10f350:	e55b300b 	ldrb	r3, [fp, #-11]
  10f354:	e3530000 	cmp	r3, #0
  10f358:	0a000006 	beq	10f378 <lwip_netconn_do_writemore+0x440>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
  10f35c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f360:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f364:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10f368:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10f36c:	e583200c 	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
  10f370:	e3a03001 	mov	r3, #1
  10f374:	e54b3009 	strb	r3, [fp, #-9]
      }
      out_err = tcp_output(conn->pcb.tcp);
  10f378:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f37c:	e5933008 	ldr	r3, [r3, #8]
  10f380:	e1a00003 	mov	r0, r3
  10f384:	eb005af6 	bl	125f64 <tcp_output>
  10f388:	e1a03000 	mov	r3, r0
  10f38c:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10f390:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10f394:	e373000c 	cmn	r3, #12
  10f398:	ba000002 	blt	10f3a8 <lwip_netconn_do_writemore+0x470>
  10f39c:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10f3a0:	e3730004 	cmn	r3, #4
  10f3a4:	1a000032 	bne	10f474 <lwip_netconn_do_writemore+0x53c>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10f3a8:	e55b3018 	ldrb	r3, [fp, #-24]	; 0xffffffe8
  10f3ac:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f3b0:	e3a03001 	mov	r3, #1
  10f3b4:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f3b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f3bc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f3c0:	e3a02000 	mov	r2, #0
  10f3c4:	e583200c 	str	r2, [r3, #12]
  10f3c8:	ea000029 	b	10f474 <lwip_netconn_do_writemore+0x53c>
      }
    } else if (err == ERR_MEM) {
  10f3cc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f3d0:	e3730001 	cmn	r3, #1
  10f3d4:	1a000020 	bne	10f45c <lwip_netconn_do_writemore+0x524>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
  10f3d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f3dc:	e5933008 	ldr	r3, [r3, #8]
  10f3e0:	e1a00003 	mov	r0, r3
  10f3e4:	eb005ade 	bl	125f64 <tcp_output>
  10f3e8:	e1a03000 	mov	r3, r0
  10f3ec:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10f3f0:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f3f4:	e373000c 	cmn	r3, #12
  10f3f8:	ba000002 	blt	10f408 <lwip_netconn_do_writemore+0x4d0>
  10f3fc:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f400:	e3730004 	cmn	r3, #4
  10f404:	1a000008 	bne	10f42c <lwip_netconn_do_writemore+0x4f4>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10f408:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
  10f40c:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f410:	e3a03001 	mov	r3, #1
  10f414:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f418:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f41c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f420:	e3a02000 	mov	r2, #0
  10f424:	e583200c 	str	r2, [r3, #12]
  10f428:	ea000011 	b	10f474 <lwip_netconn_do_writemore+0x53c>
      } else if (dontblock) {
  10f42c:	e55b300b 	ldrb	r3, [fp, #-11]
  10f430:	e3530000 	cmp	r3, #0
  10f434:	0a00000e 	beq	10f474 <lwip_netconn_do_writemore+0x53c>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
  10f438:	e3e03006 	mvn	r3, #6
  10f43c:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f440:	e3a03001 	mov	r3, #1
  10f444:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f448:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f44c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f450:	e3a02000 	mov	r2, #0
  10f454:	e583200c 	str	r2, [r3, #12]
  10f458:	ea000005 	b	10f474 <lwip_netconn_do_writemore+0x53c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
  10f45c:	e3a03001 	mov	r3, #1
  10f460:	e54b3009 	strb	r3, [fp, #-9]
      conn->current_msg->msg.w.len = 0;
  10f464:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f468:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f46c:	e3a02000 	mov	r2, #0
  10f470:	e583200c 	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
  10f474:	e55b3009 	ldrb	r3, [fp, #-9]
  10f478:	e3530000 	cmp	r3, #0
  10f47c:	0a000023 	beq	10f510 <lwip_netconn_do_writemore+0x5d8>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10f480:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f484:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f488:	e5933000 	ldr	r3, [r3]
  10f48c:	e2833010 	add	r3, r3, #16
  10f490:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    conn->current_msg->err = err;
  10f494:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f498:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f49c:	e55b2005 	ldrb	r2, [fp, #-5]
  10f4a0:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10f4a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4a8:	e3a02000 	mov	r2, #0
  10f4ac:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->write_offset = 0;
  10f4b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4b4:	e3a02000 	mov	r2, #0
  10f4b8:	e5832034 	str	r2, [r3, #52]	; 0x34
    conn->state = NETCONN_NONE;
  10f4bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4c0:	e3a02000 	mov	r2, #0
  10f4c4:	e5832004 	str	r2, [r3, #4]
    NETCONN_SET_SAFE_ERR(conn, err);
  10f4c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4cc:	e3530000 	cmp	r3, #0
  10f4d0:	0a000008 	beq	10f4f8 <lwip_netconn_do_writemore+0x5c0>
  10f4d4:	ebffcb58 	bl	10223c <rt_enter_critical>
  10f4d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4dc:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f4e0:	e373000c 	cmn	r3, #12
  10f4e4:	ba000002 	blt	10f4f4 <lwip_netconn_do_writemore+0x5bc>
  10f4e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4ec:	e55b2005 	ldrb	r2, [fp, #-5]
  10f4f0:	e5c3200c 	strb	r2, [r3, #12]
  10f4f4:	ebffcb56 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10f4f8:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10f4fc:	e3530000 	cmp	r3, #0
  10f500:	0a000004 	beq	10f518 <lwip_netconn_do_writemore+0x5e0>
#endif
    {
      sys_sem_signal(op_completed_sem);
  10f504:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  10f508:	ebffed01 	bl	10a914 <sys_sem_signal>
  10f50c:	ea000001 	b	10f518 <lwip_netconn_do_writemore+0x5e0>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  10f510:	e3e03000 	mvn	r3, #0
  10f514:	ea000000 	b	10f51c <lwip_netconn_do_writemore+0x5e4>
  }
#endif
  return ERR_OK;
  10f518:	e3a03000 	mov	r3, #0
}
  10f51c:	e1a00003 	mov	r0, r3
  10f520:	e24bd004 	sub	sp, fp, #4
  10f524:	e8bd8800 	pop	{fp, pc}

0010f528 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
  10f528:	e92d4800 	push	{fp, lr}
  10f52c:	e28db004 	add	fp, sp, #4
  10f530:	e24dd010 	sub	sp, sp, #16
  10f534:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f538:	e51b3010 	ldr	r3, [fp, #-16]
  10f53c:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10f540:	e51b3008 	ldr	r3, [fp, #-8]
  10f544:	e5933000 	ldr	r3, [r3]
  10f548:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f54c:	e373000c 	cmn	r3, #12
  10f550:	aa000005 	bge	10f56c <lwip_netconn_do_write+0x44>
    msg->err = msg->conn->last_err;
  10f554:	e51b3008 	ldr	r3, [fp, #-8]
  10f558:	e5933000 	ldr	r3, [r3]
  10f55c:	e1d320dc 	ldrsb	r2, [r3, #12]
  10f560:	e51b3008 	ldr	r3, [fp, #-8]
  10f564:	e5c32004 	strb	r2, [r3, #4]
  10f568:	ea00006f 	b	10f72c <lwip_netconn_do_write+0x204>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10f56c:	e51b3008 	ldr	r3, [fp, #-8]
  10f570:	e5933000 	ldr	r3, [r3]
  10f574:	e5933000 	ldr	r3, [r3]
  10f578:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f57c:	e3530010 	cmp	r3, #16
  10f580:	1a000066 	bne	10f720 <lwip_netconn_do_write+0x1f8>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
  10f584:	e51b3008 	ldr	r3, [fp, #-8]
  10f588:	e5933000 	ldr	r3, [r3]
  10f58c:	e5933004 	ldr	r3, [r3, #4]
  10f590:	e3530000 	cmp	r3, #0
  10f594:	0a000003 	beq	10f5a8 <lwip_netconn_do_write+0x80>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
  10f598:	e51b3008 	ldr	r3, [fp, #-8]
  10f59c:	e3e02004 	mvn	r2, #4
  10f5a0:	e5c32004 	strb	r2, [r3, #4]
  10f5a4:	ea000060 	b	10f72c <lwip_netconn_do_write+0x204>
      } else if (msg->conn->pcb.tcp != NULL) {
  10f5a8:	e51b3008 	ldr	r3, [fp, #-8]
  10f5ac:	e5933000 	ldr	r3, [r3]
  10f5b0:	e5933008 	ldr	r3, [r3, #8]
  10f5b4:	e3530000 	cmp	r3, #0
  10f5b8:	0a000054 	beq	10f710 <lwip_netconn_do_write+0x1e8>
        msg->conn->state = NETCONN_WRITE;
  10f5bc:	e51b3008 	ldr	r3, [fp, #-8]
  10f5c0:	e5933000 	ldr	r3, [r3]
  10f5c4:	e3a02001 	mov	r2, #1
  10f5c8:	e5832004 	str	r2, [r3, #4]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10f5cc:	e51b3008 	ldr	r3, [fp, #-8]
  10f5d0:	e5933000 	ldr	r3, [r3]
  10f5d4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f5d8:	e3530000 	cmp	r3, #0
  10f5dc:	1a000004 	bne	10f5f4 <lwip_netconn_do_write+0xcc>
  10f5e0:	e51b3008 	ldr	r3, [fp, #-8]
  10f5e4:	e5933000 	ldr	r3, [r3]
  10f5e8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f5ec:	e3530000 	cmp	r3, #0
  10f5f0:	0a000006 	beq	10f610 <lwip_netconn_do_write+0xe8>
  10f5f4:	e30609c4 	movw	r0, #27076	; 0x69c4
  10f5f8:	e3400014 	movt	r0, #20
  10f5fc:	ebffcec4 	bl	103114 <rt_kprintf>
  10f600:	e300167d 	movw	r1, #1661	; 0x67d
  10f604:	e30606a8 	movw	r0, #26280	; 0x66a8
  10f608:	e3400014 	movt	r0, #20
  10f60c:	ebffeeb7 	bl	10b0f0 <sys_arch_assert>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
  10f610:	e51b3008 	ldr	r3, [fp, #-8]
  10f614:	e593300c 	ldr	r3, [r3, #12]
  10f618:	e3530000 	cmp	r3, #0
  10f61c:	1a000006 	bne	10f63c <lwip_netconn_do_write+0x114>
  10f620:	e3060b18 	movw	r0, #27416	; 0x6b18
  10f624:	e3400014 	movt	r0, #20
  10f628:	ebffceb9 	bl	103114 <rt_kprintf>
  10f62c:	e300167e 	movw	r1, #1662	; 0x67e
  10f630:	e30606a8 	movw	r0, #26280	; 0x66a8
  10f634:	e3400014 	movt	r0, #20
  10f638:	ebffeeac 	bl	10b0f0 <sys_arch_assert>
        msg->conn->current_msg = msg;
  10f63c:	e51b3008 	ldr	r3, [fp, #-8]
  10f640:	e5933000 	ldr	r3, [r3]
  10f644:	e51b2008 	ldr	r2, [fp, #-8]
  10f648:	e5832038 	str	r2, [r3, #56]	; 0x38
        msg->conn->write_offset = 0;
  10f64c:	e51b3008 	ldr	r3, [fp, #-8]
  10f650:	e5933000 	ldr	r3, [r3]
  10f654:	e3a02000 	mov	r2, #0
  10f658:	e5832034 	str	r2, [r3, #52]	; 0x34
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
  10f65c:	e51b3008 	ldr	r3, [fp, #-8]
  10f660:	e5933000 	ldr	r3, [r3]
  10f664:	e3a01000 	mov	r1, #0
  10f668:	e1a00003 	mov	r0, r3
  10f66c:	ebfffe31 	bl	10ef38 <lwip_netconn_do_writemore>
  10f670:	e1a03000 	mov	r3, r0
  10f674:	e3530000 	cmp	r3, #0
  10f678:	0a00003c 	beq	10f770 <lwip_netconn_do_write+0x248>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
  10f67c:	e51b3008 	ldr	r3, [fp, #-8]
  10f680:	e5933000 	ldr	r3, [r3]
  10f684:	e5933004 	ldr	r3, [r3, #4]
  10f688:	e3530001 	cmp	r3, #1
  10f68c:	0a000006 	beq	10f6ac <lwip_netconn_do_write+0x184>
  10f690:	e30609e0 	movw	r0, #27104	; 0x69e0
  10f694:	e3400014 	movt	r0, #20
  10f698:	ebffce9d 	bl	103114 <rt_kprintf>
  10f69c:	e3001683 	movw	r1, #1667	; 0x683
  10f6a0:	e30606a8 	movw	r0, #26280	; 0x66a8
  10f6a4:	e3400014 	movt	r0, #20
  10f6a8:	ebffee90 	bl	10b0f0 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10f6ac:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  10f6b0:	e3400014 	movt	r0, #20
  10f6b4:	ebffed1d 	bl	10ab30 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10f6b8:	e51b3008 	ldr	r3, [fp, #-8]
  10f6bc:	e5933000 	ldr	r3, [r3]
  10f6c0:	e2833010 	add	r3, r3, #16
  10f6c4:	e3a01000 	mov	r1, #0
  10f6c8:	e1a00003 	mov	r0, r3
  10f6cc:	ebffec9b 	bl	10a940 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10f6d0:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  10f6d4:	e3400014 	movt	r0, #20
  10f6d8:	ebffed08 	bl	10ab00 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
  10f6dc:	e51b3008 	ldr	r3, [fp, #-8]
  10f6e0:	e5933000 	ldr	r3, [r3]
  10f6e4:	e5933004 	ldr	r3, [r3, #4]
  10f6e8:	e3530001 	cmp	r3, #1
  10f6ec:	1a00001f 	bne	10f770 <lwip_netconn_do_write+0x248>
  10f6f0:	e30609e0 	movw	r0, #27104	; 0x69e0
  10f6f4:	e3400014 	movt	r0, #20
  10f6f8:	ebffce85 	bl	103114 <rt_kprintf>
  10f6fc:	e3001687 	movw	r1, #1671	; 0x687
  10f700:	e30606a8 	movw	r0, #26280	; 0x66a8
  10f704:	e3400014 	movt	r0, #20
  10f708:	ebffee78 	bl	10b0f0 <sys_arch_assert>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
  10f70c:	ea000017 	b	10f770 <lwip_netconn_do_write+0x248>
      } else {
        msg->err = ERR_CONN;
  10f710:	e51b3008 	ldr	r3, [fp, #-8]
  10f714:	e3e0200a 	mvn	r2, #10
  10f718:	e5c32004 	strb	r2, [r3, #4]
  10f71c:	ea000002 	b	10f72c <lwip_netconn_do_write+0x204>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
  10f720:	e51b3008 	ldr	r3, [fp, #-8]
  10f724:	e3e02005 	mvn	r2, #5
  10f728:	e5c32004 	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10f72c:	e51b3008 	ldr	r3, [fp, #-8]
  10f730:	e5933000 	ldr	r3, [r3]
  10f734:	e3530000 	cmp	r3, #0
  10f738:	0a00000d 	beq	10f774 <lwip_netconn_do_write+0x24c>
  10f73c:	ebffcabe 	bl	10223c <rt_enter_critical>
  10f740:	e51b3008 	ldr	r3, [fp, #-8]
  10f744:	e5933000 	ldr	r3, [r3]
  10f748:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f74c:	e373000c 	cmn	r3, #12
  10f750:	ba000004 	blt	10f768 <lwip_netconn_do_write+0x240>
  10f754:	e51b3008 	ldr	r3, [fp, #-8]
  10f758:	e5933000 	ldr	r3, [r3]
  10f75c:	e51b2008 	ldr	r2, [fp, #-8]
  10f760:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f764:	e5c3200c 	strb	r2, [r3, #12]
  10f768:	ebffcab9 	bl	102254 <rt_exit_critical>
  10f76c:	ea000000 	b	10f774 <lwip_netconn_do_write+0x24c>
        return;
  10f770:	e320f000 	nop	{0}
}
  10f774:	e24bd004 	sub	sp, fp, #4
  10f778:	e8bd8800 	pop	{fp, pc}

0010f77c <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
  10f77c:	e92d4800 	push	{fp, lr}
  10f780:	e28db004 	add	fp, sp, #4
  10f784:	e24dd010 	sub	sp, sp, #16
  10f788:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f78c:	e51b3010 	ldr	r3, [fp, #-16]
  10f790:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.ip != NULL) {
  10f794:	e51b3008 	ldr	r3, [fp, #-8]
  10f798:	e5933000 	ldr	r3, [r3]
  10f79c:	e5933008 	ldr	r3, [r3, #8]
  10f7a0:	e3530000 	cmp	r3, #0
  10f7a4:	0a00007e 	beq	10f9a4 <lwip_netconn_do_getaddr+0x228>
    if (msg->msg.ad.local) {
  10f7a8:	e51b3008 	ldr	r3, [fp, #-8]
  10f7ac:	e5d33010 	ldrb	r3, [r3, #16]
  10f7b0:	e3530000 	cmp	r3, #0
  10f7b4:	0a000007 	beq	10f7d8 <lwip_netconn_do_getaddr+0x5c>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f7b8:	e51b3008 	ldr	r3, [fp, #-8]
  10f7bc:	e5933000 	ldr	r3, [r3]
  10f7c0:	e5932008 	ldr	r2, [r3, #8]
  10f7c4:	e51b3008 	ldr	r3, [fp, #-8]
  10f7c8:	e5933008 	ldr	r3, [r3, #8]
  10f7cc:	e5922000 	ldr	r2, [r2]
  10f7d0:	e5832000 	str	r2, [r3]
  10f7d4:	ea000006 	b	10f7f4 <lwip_netconn_do_getaddr+0x78>
        msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f7d8:	e51b3008 	ldr	r3, [fp, #-8]
  10f7dc:	e5933000 	ldr	r3, [r3]
  10f7e0:	e5932008 	ldr	r2, [r3, #8]
  10f7e4:	e51b3008 	ldr	r3, [fp, #-8]
  10f7e8:	e5933008 	ldr	r3, [r3, #8]
  10f7ec:	e5922004 	ldr	r2, [r2, #4]
  10f7f0:	e5832000 	str	r2, [r3]
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
  10f7f4:	e51b3008 	ldr	r3, [fp, #-8]
  10f7f8:	e3a02000 	mov	r2, #0
  10f7fc:	e5c32004 	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10f800:	e51b3008 	ldr	r3, [fp, #-8]
  10f804:	e5933000 	ldr	r3, [r3]
  10f808:	e5933000 	ldr	r3, [r3]
  10f80c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f810:	e3530020 	cmp	r3, #32
  10f814:	0a000015 	beq	10f870 <lwip_netconn_do_getaddr+0xf4>
  10f818:	e3530040 	cmp	r3, #64	; 0x40
  10f81c:	0a000002 	beq	10f82c <lwip_netconn_do_getaddr+0xb0>
  10f820:	e3530010 	cmp	r3, #16
  10f824:	0a000030 	beq	10f8ec <lwip_netconn_do_getaddr+0x170>
  10f828:	ea000054 	b	10f980 <lwip_netconn_do_getaddr+0x204>
#if LWIP_RAW
    case NETCONN_RAW:
      if (msg->msg.ad.local) {
  10f82c:	e51b3008 	ldr	r3, [fp, #-8]
  10f830:	e5d33010 	ldrb	r3, [r3, #16]
  10f834:	e3530000 	cmp	r3, #0
  10f838:	0a000008 	beq	10f860 <lwip_netconn_do_getaddr+0xe4>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.raw->protocol;
  10f83c:	e51b3008 	ldr	r3, [fp, #-8]
  10f840:	e5933000 	ldr	r3, [r3]
  10f844:	e5933008 	ldr	r3, [r3, #8]
  10f848:	e5d32010 	ldrb	r2, [r3, #16]
  10f84c:	e51b3008 	ldr	r3, [fp, #-8]
  10f850:	e593300c 	ldr	r3, [r3, #12]
  10f854:	e6ff2072 	uxth	r2, r2
  10f858:	e1c320b0 	strh	r2, [r3]
      } else {
        /* return an error as connecting is only a helper for upper layers */
        msg->err = ERR_CONN;
      }
      break;
  10f85c:	ea000053 	b	10f9b0 <lwip_netconn_do_getaddr+0x234>
        msg->err = ERR_CONN;
  10f860:	e51b3008 	ldr	r3, [fp, #-8]
  10f864:	e3e0200a 	mvn	r2, #10
  10f868:	e5c32004 	strb	r2, [r3, #4]
      break;
  10f86c:	ea00004f 	b	10f9b0 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
  10f870:	e51b3008 	ldr	r3, [fp, #-8]
  10f874:	e5d33010 	ldrb	r3, [r3, #16]
  10f878:	e3530000 	cmp	r3, #0
  10f87c:	0a000007 	beq	10f8a0 <lwip_netconn_do_getaddr+0x124>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
  10f880:	e51b3008 	ldr	r3, [fp, #-8]
  10f884:	e5933000 	ldr	r3, [r3]
  10f888:	e5932008 	ldr	r2, [r3, #8]
  10f88c:	e51b3008 	ldr	r3, [fp, #-8]
  10f890:	e593300c 	ldr	r3, [r3, #12]
  10f894:	e1d221b2 	ldrh	r2, [r2, #18]
  10f898:	e1c320b0 	strh	r2, [r3]
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
  10f89c:	ea000043 	b	10f9b0 <lwip_netconn_do_getaddr+0x234>
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
  10f8a0:	e51b3008 	ldr	r3, [fp, #-8]
  10f8a4:	e5933000 	ldr	r3, [r3]
  10f8a8:	e5933008 	ldr	r3, [r3, #8]
  10f8ac:	e5d33010 	ldrb	r3, [r3, #16]
  10f8b0:	e2033004 	and	r3, r3, #4
  10f8b4:	e3530000 	cmp	r3, #0
  10f8b8:	1a000003 	bne	10f8cc <lwip_netconn_do_getaddr+0x150>
          msg->err = ERR_CONN;
  10f8bc:	e51b3008 	ldr	r3, [fp, #-8]
  10f8c0:	e3e0200a 	mvn	r2, #10
  10f8c4:	e5c32004 	strb	r2, [r3, #4]
      break;
  10f8c8:	ea000038 	b	10f9b0 <lwip_netconn_do_getaddr+0x234>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
  10f8cc:	e51b3008 	ldr	r3, [fp, #-8]
  10f8d0:	e5933000 	ldr	r3, [r3]
  10f8d4:	e5932008 	ldr	r2, [r3, #8]
  10f8d8:	e51b3008 	ldr	r3, [fp, #-8]
  10f8dc:	e593300c 	ldr	r3, [r3, #12]
  10f8e0:	e1d221b4 	ldrh	r2, [r2, #20]
  10f8e4:	e1c320b0 	strh	r2, [r3]
      break;
  10f8e8:	ea000030 	b	10f9b0 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
  10f8ec:	e51b3008 	ldr	r3, [fp, #-8]
  10f8f0:	e5d33010 	ldrb	r3, [r3, #16]
  10f8f4:	e3530000 	cmp	r3, #0
  10f8f8:	1a00000f 	bne	10f93c <lwip_netconn_do_getaddr+0x1c0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10f8fc:	e51b3008 	ldr	r3, [fp, #-8]
  10f900:	e5933000 	ldr	r3, [r3]
  10f904:	e5933008 	ldr	r3, [r3, #8]
  10f908:	e5933014 	ldr	r3, [r3, #20]
      if ((msg->msg.ad.local == 0) &&
  10f90c:	e3530000 	cmp	r3, #0
  10f910:	0a000005 	beq	10f92c <lwip_netconn_do_getaddr+0x1b0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10f914:	e51b3008 	ldr	r3, [fp, #-8]
  10f918:	e5933000 	ldr	r3, [r3]
  10f91c:	e5933008 	ldr	r3, [r3, #8]
  10f920:	e5933014 	ldr	r3, [r3, #20]
  10f924:	e3530001 	cmp	r3, #1
  10f928:	1a000003 	bne	10f93c <lwip_netconn_do_getaddr+0x1c0>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
  10f92c:	e51b3008 	ldr	r3, [fp, #-8]
  10f930:	e3e0200a 	mvn	r2, #10
  10f934:	e5c32004 	strb	r2, [r3, #4]
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
      }
      break;
  10f938:	ea00001c 	b	10f9b0 <lwip_netconn_do_getaddr+0x234>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
  10f93c:	e51b3008 	ldr	r3, [fp, #-8]
  10f940:	e5d33010 	ldrb	r3, [r3, #16]
  10f944:	e3530000 	cmp	r3, #0
  10f948:	0a000004 	beq	10f960 <lwip_netconn_do_getaddr+0x1e4>
  10f94c:	e51b3008 	ldr	r3, [fp, #-8]
  10f950:	e5933000 	ldr	r3, [r3]
  10f954:	e5933008 	ldr	r3, [r3, #8]
  10f958:	e1d331ba 	ldrh	r3, [r3, #26]
  10f95c:	ea000003 	b	10f970 <lwip_netconn_do_getaddr+0x1f4>
  10f960:	e51b3008 	ldr	r3, [fp, #-8]
  10f964:	e5933000 	ldr	r3, [r3]
  10f968:	e5933008 	ldr	r3, [r3, #8]
  10f96c:	e1d331bc 	ldrh	r3, [r3, #28]
  10f970:	e51b2008 	ldr	r2, [fp, #-8]
  10f974:	e592200c 	ldr	r2, [r2, #12]
  10f978:	e1c230b0 	strh	r3, [r2]
      break;
  10f97c:	ea00000b 	b	10f9b0 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
  10f980:	e3060b2c 	movw	r0, #27436	; 0x6b2c
  10f984:	e3400014 	movt	r0, #20
  10f988:	ebffcde1 	bl	103114 <rt_kprintf>
  10f98c:	e30016d7 	movw	r1, #1751	; 0x6d7
  10f990:	e30606a8 	movw	r0, #26280	; 0x66a8
  10f994:	e3400014 	movt	r0, #20
  10f998:	ebffedd4 	bl	10b0f0 <sys_arch_assert>
      break;
  10f99c:	e320f000 	nop	{0}
  10f9a0:	ea000002 	b	10f9b0 <lwip_netconn_do_getaddr+0x234>
    }
  } else {
    msg->err = ERR_CONN;
  10f9a4:	e51b3008 	ldr	r3, [fp, #-8]
  10f9a8:	e3e0200a 	mvn	r2, #10
  10f9ac:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10f9b0:	e51b3008 	ldr	r3, [fp, #-8]
  10f9b4:	e5933000 	ldr	r3, [r3]
  10f9b8:	e3530000 	cmp	r3, #0
  10f9bc:	0a00000b 	beq	10f9f0 <lwip_netconn_do_getaddr+0x274>
  10f9c0:	ebffca1d 	bl	10223c <rt_enter_critical>
  10f9c4:	e51b3008 	ldr	r3, [fp, #-8]
  10f9c8:	e5933000 	ldr	r3, [r3]
  10f9cc:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f9d0:	e373000c 	cmn	r3, #12
  10f9d4:	ba000004 	blt	10f9ec <lwip_netconn_do_getaddr+0x270>
  10f9d8:	e51b3008 	ldr	r3, [fp, #-8]
  10f9dc:	e5933000 	ldr	r3, [r3]
  10f9e0:	e51b2008 	ldr	r2, [fp, #-8]
  10f9e4:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f9e8:	e5c3200c 	strb	r2, [r3, #12]
  10f9ec:	ebffca18 	bl	102254 <rt_exit_critical>
}
  10f9f0:	e320f000 	nop	{0}
  10f9f4:	e24bd004 	sub	sp, fp, #4
  10f9f8:	e8bd8800 	pop	{fp, pc}

0010f9fc <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
  10f9fc:	e92d4800 	push	{fp, lr}
  10fa00:	e28db004 	add	fp, sp, #4
  10fa04:	e24dd010 	sub	sp, sp, #16
  10fa08:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10fa0c:	e51b3010 	ldr	r3, [fp, #-16]
  10fa10:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
  10fa14:	e51b3008 	ldr	r3, [fp, #-8]
  10fa18:	e5933000 	ldr	r3, [r3]
  10fa1c:	e5933004 	ldr	r3, [r3, #4]
  10fa20:	e50b300c 	str	r3, [fp, #-12]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
  10fa24:	e51b3008 	ldr	r3, [fp, #-8]
  10fa28:	e5933000 	ldr	r3, [r3]
  10fa2c:	e5933008 	ldr	r3, [r3, #8]
  10fa30:	e3530000 	cmp	r3, #0
  10fa34:	0a000069 	beq	10fbe0 <lwip_netconn_do_close+0x1e4>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10fa38:	e51b3008 	ldr	r3, [fp, #-8]
  10fa3c:	e5933000 	ldr	r3, [r3]
  10fa40:	e5933000 	ldr	r3, [r3]
  10fa44:	e20330f0 	and	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
  10fa48:	e3530010 	cmp	r3, #16
  10fa4c:	1a000063 	bne	10fbe0 <lwip_netconn_do_close+0x1e4>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10fa50:	e51b3008 	ldr	r3, [fp, #-8]
  10fa54:	e5d33008 	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10fa58:	e3530003 	cmp	r3, #3
  10fa5c:	0a000002 	beq	10fa6c <lwip_netconn_do_close+0x70>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10fa60:	e51b300c 	ldr	r3, [fp, #-12]
  10fa64:	e3530002 	cmp	r3, #2
  10fa68:	0a00005c 	beq	10fbe0 <lwip_netconn_do_close+0x1e4>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
  10fa6c:	e51b300c 	ldr	r3, [fp, #-12]
  10fa70:	e3530003 	cmp	r3, #3
  10fa74:	1a000003 	bne	10fa88 <lwip_netconn_do_close+0x8c>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
  10fa78:	e51b3008 	ldr	r3, [fp, #-8]
  10fa7c:	e3e0200a 	mvn	r2, #10
  10fa80:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10fa84:	ea000058 	b	10fbec <lwip_netconn_do_close+0x1f0>
    } else if (state == NETCONN_WRITE) {
  10fa88:	e51b300c 	ldr	r3, [fp, #-12]
  10fa8c:	e3530001 	cmp	r3, #1
  10fa90:	1a000003 	bne	10faa4 <lwip_netconn_do_close+0xa8>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
  10fa94:	e51b3008 	ldr	r3, [fp, #-8]
  10fa98:	e3e02004 	mvn	r2, #4
  10fa9c:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10faa0:	ea000051 	b	10fbec <lwip_netconn_do_close+0x1f0>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
  10faa4:	e51b3008 	ldr	r3, [fp, #-8]
  10faa8:	e5d33008 	ldrb	r3, [r3, #8]
  10faac:	e2033001 	and	r3, r3, #1
  10fab0:	e3530000 	cmp	r3, #0
  10fab4:	0a000003 	beq	10fac8 <lwip_netconn_do_close+0xcc>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
  10fab8:	e51b3008 	ldr	r3, [fp, #-8]
  10fabc:	e5933000 	ldr	r3, [r3]
  10fac0:	e1a00003 	mov	r0, r3
  10fac4:	ebfff729 	bl	10d770 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10fac8:	e51b3008 	ldr	r3, [fp, #-8]
  10facc:	e5933000 	ldr	r3, [r3]
  10fad0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10fad4:	e3530000 	cmp	r3, #0
  10fad8:	1a000004 	bne	10faf0 <lwip_netconn_do_close+0xf4>
  10fadc:	e51b3008 	ldr	r3, [fp, #-8]
  10fae0:	e5933000 	ldr	r3, [r3]
  10fae4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10fae8:	e3530000 	cmp	r3, #0
  10faec:	0a000006 	beq	10fb0c <lwip_netconn_do_close+0x110>
  10faf0:	e30609c4 	movw	r0, #27076	; 0x69c4
  10faf4:	e3400014 	movt	r0, #20
  10faf8:	ebffcd85 	bl	103114 <rt_kprintf>
  10fafc:	e3001716 	movw	r1, #1814	; 0x716
  10fb00:	e30606a8 	movw	r0, #26280	; 0x66a8
  10fb04:	e3400014 	movt	r0, #20
  10fb08:	ebffed78 	bl	10b0f0 <sys_arch_assert>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
  10fb0c:	e51b3008 	ldr	r3, [fp, #-8]
  10fb10:	e5933000 	ldr	r3, [r3]
  10fb14:	e3a02004 	mov	r2, #4
  10fb18:	e5832004 	str	r2, [r3, #4]
      msg->conn->current_msg = msg;
  10fb1c:	e51b3008 	ldr	r3, [fp, #-8]
  10fb20:	e5933000 	ldr	r3, [r3]
  10fb24:	e51b2008 	ldr	r2, [fp, #-8]
  10fb28:	e5832038 	str	r2, [r3, #56]	; 0x38
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10fb2c:	e51b3008 	ldr	r3, [fp, #-8]
  10fb30:	e5933000 	ldr	r3, [r3]
  10fb34:	e3a01000 	mov	r1, #0
  10fb38:	e1a00003 	mov	r0, r3
  10fb3c:	ebfff775 	bl	10d918 <lwip_netconn_do_close_internal>
  10fb40:	e1a03000 	mov	r3, r0
  10fb44:	e3530000 	cmp	r3, #0
  10fb48:	0a000038 	beq	10fc30 <lwip_netconn_do_close+0x234>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10fb4c:	e51b3008 	ldr	r3, [fp, #-8]
  10fb50:	e5933000 	ldr	r3, [r3]
  10fb54:	e5933004 	ldr	r3, [r3, #4]
  10fb58:	e3530004 	cmp	r3, #4
  10fb5c:	0a000006 	beq	10fb7c <lwip_netconn_do_close+0x180>
  10fb60:	e30609e0 	movw	r0, #27104	; 0x69e0
  10fb64:	e3400014 	movt	r0, #20
  10fb68:	ebffcd69 	bl	103114 <rt_kprintf>
  10fb6c:	e300171b 	movw	r1, #1819	; 0x71b
  10fb70:	e30606a8 	movw	r0, #26280	; 0x66a8
  10fb74:	e3400014 	movt	r0, #20
  10fb78:	ebffed5c 	bl	10b0f0 <sys_arch_assert>
        UNLOCK_TCPIP_CORE();
  10fb7c:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  10fb80:	e3400014 	movt	r0, #20
  10fb84:	ebffebe9 	bl	10ab30 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10fb88:	e51b3008 	ldr	r3, [fp, #-8]
  10fb8c:	e5933000 	ldr	r3, [r3]
  10fb90:	e2833010 	add	r3, r3, #16
  10fb94:	e3a01000 	mov	r1, #0
  10fb98:	e1a00003 	mov	r0, r3
  10fb9c:	ebffeb67 	bl	10a940 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
  10fba0:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  10fba4:	e3400014 	movt	r0, #20
  10fba8:	ebffebd4 	bl	10ab00 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10fbac:	e51b3008 	ldr	r3, [fp, #-8]
  10fbb0:	e5933000 	ldr	r3, [r3]
  10fbb4:	e5933004 	ldr	r3, [r3, #4]
  10fbb8:	e3530000 	cmp	r3, #0
  10fbbc:	0a00001b 	beq	10fc30 <lwip_netconn_do_close+0x234>
  10fbc0:	e30609e0 	movw	r0, #27104	; 0x69e0
  10fbc4:	e3400014 	movt	r0, #20
  10fbc8:	ebffcd51 	bl	103114 <rt_kprintf>
  10fbcc:	e300171f 	movw	r1, #1823	; 0x71f
  10fbd0:	e30606a8 	movw	r0, #26280	; 0x66a8
  10fbd4:	e3400014 	movt	r0, #20
  10fbd8:	ebffed44 	bl	10b0f0 <sys_arch_assert>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
  10fbdc:	ea000013 	b	10fc30 <lwip_netconn_do_close+0x234>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  10fbe0:	e51b3008 	ldr	r3, [fp, #-8]
  10fbe4:	e3e0200a 	mvn	r2, #10
  10fbe8:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10fbec:	e51b3008 	ldr	r3, [fp, #-8]
  10fbf0:	e5933000 	ldr	r3, [r3]
  10fbf4:	e3530000 	cmp	r3, #0
  10fbf8:	0a00000d 	beq	10fc34 <lwip_netconn_do_close+0x238>
  10fbfc:	ebffc98e 	bl	10223c <rt_enter_critical>
  10fc00:	e51b3008 	ldr	r3, [fp, #-8]
  10fc04:	e5933000 	ldr	r3, [r3]
  10fc08:	e1d330dc 	ldrsb	r3, [r3, #12]
  10fc0c:	e373000c 	cmn	r3, #12
  10fc10:	ba000004 	blt	10fc28 <lwip_netconn_do_close+0x22c>
  10fc14:	e51b3008 	ldr	r3, [fp, #-8]
  10fc18:	e5933000 	ldr	r3, [r3]
  10fc1c:	e51b2008 	ldr	r2, [fp, #-8]
  10fc20:	e1d220d4 	ldrsb	r2, [r2, #4]
  10fc24:	e5c3200c 	strb	r2, [r3, #12]
  10fc28:	ebffc989 	bl	102254 <rt_exit_critical>
  10fc2c:	ea000000 	b	10fc34 <lwip_netconn_do_close+0x238>
      return;
  10fc30:	e320f000 	nop	{0}
}
  10fc34:	e24bd004 	sub	sp, fp, #4
  10fc38:	e8bd8800 	pop	{fp, pc}

0010fc3c <lwip_netconn_do_join_leave_group>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_join_leave_group(void *m)
{
  10fc3c:	e92d4800 	push	{fp, lr}
  10fc40:	e28db004 	add	fp, sp, #4
  10fc44:	e24dd010 	sub	sp, sp, #16
  10fc48:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10fc4c:	e51b3010 	ldr	r3, [fp, #-16]
  10fc50:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10fc54:	e51b3008 	ldr	r3, [fp, #-8]
  10fc58:	e5933000 	ldr	r3, [r3]
  10fc5c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10fc60:	e373000c 	cmn	r3, #12
  10fc64:	aa000005 	bge	10fc80 <lwip_netconn_do_join_leave_group+0x44>
    msg->err = msg->conn->last_err;
  10fc68:	e51b3008 	ldr	r3, [fp, #-8]
  10fc6c:	e5933000 	ldr	r3, [r3]
  10fc70:	e1d320dc 	ldrsb	r2, [r3, #12]
  10fc74:	e51b3008 	ldr	r3, [fp, #-8]
  10fc78:	e5c32004 	strb	r2, [r3, #4]
  10fc7c:	ea00002d 	b	10fd38 <lwip_netconn_do_join_leave_group+0xfc>
  } else {
    if (msg->conn->pcb.tcp != NULL) {
  10fc80:	e51b3008 	ldr	r3, [fp, #-8]
  10fc84:	e5933000 	ldr	r3, [r3]
  10fc88:	e5933008 	ldr	r3, [r3, #8]
  10fc8c:	e3530000 	cmp	r3, #0
  10fc90:	0a000025 	beq	10fd2c <lwip_netconn_do_join_leave_group+0xf0>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10fc94:	e51b3008 	ldr	r3, [fp, #-8]
  10fc98:	e5933000 	ldr	r3, [r3]
  10fc9c:	e5933000 	ldr	r3, [r3]
  10fca0:	e20330f0 	and	r3, r3, #240	; 0xf0
  10fca4:	e3530020 	cmp	r3, #32
  10fca8:	1a00001b 	bne	10fd1c <lwip_netconn_do_join_leave_group+0xe0>
        }
        else
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
        {
#if LWIP_IGMP
          if (msg->msg.jl.join_or_leave == NETCONN_JOIN) {
  10fcac:	e51b3008 	ldr	r3, [fp, #-8]
  10fcb0:	e5933010 	ldr	r3, [r3, #16]
  10fcb4:	e3530000 	cmp	r3, #0
  10fcb8:	1a00000b 	bne	10fcec <lwip_netconn_do_join_leave_group+0xb0>
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fcbc:	e51b3008 	ldr	r3, [fp, #-8]
  10fcc0:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10fcc4:	e51b3008 	ldr	r3, [fp, #-8]
  10fcc8:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fccc:	e1a01003 	mov	r1, r3
  10fcd0:	e1a00002 	mov	r0, r2
  10fcd4:	eb00828d 	bl	130710 <igmp_joingroup>
  10fcd8:	e1a03000 	mov	r3, r0
  10fcdc:	e1a02003 	mov	r2, r3
  10fce0:	e51b3008 	ldr	r3, [fp, #-8]
  10fce4:	e5c32004 	strb	r2, [r3, #4]
  10fce8:	ea000012 	b	10fd38 <lwip_netconn_do_join_leave_group+0xfc>
          } else {
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fcec:	e51b3008 	ldr	r3, [fp, #-8]
  10fcf0:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10fcf4:	e51b3008 	ldr	r3, [fp, #-8]
  10fcf8:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fcfc:	e1a01003 	mov	r1, r3
  10fd00:	e1a00002 	mov	r0, r2
  10fd04:	eb00833a 	bl	1309f4 <igmp_leavegroup>
  10fd08:	e1a03000 	mov	r3, r0
  10fd0c:	e1a02003 	mov	r2, r3
  10fd10:	e51b3008 	ldr	r3, [fp, #-8]
  10fd14:	e5c32004 	strb	r2, [r3, #4]
  10fd18:	ea000006 	b	10fd38 <lwip_netconn_do_join_leave_group+0xfc>
#endif /* LWIP_IGMP */
        }
#endif /* LWIP_UDP */
#if (LWIP_TCP || LWIP_RAW)
      } else {
        msg->err = ERR_VAL;
  10fd1c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd20:	e3e02005 	mvn	r2, #5
  10fd24:	e5c32004 	strb	r2, [r3, #4]
  10fd28:	ea000002 	b	10fd38 <lwip_netconn_do_join_leave_group+0xfc>
#endif /* (LWIP_TCP || LWIP_RAW) */
      }
    } else {
      msg->err = ERR_CONN;
  10fd2c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd30:	e3e0200a 	mvn	r2, #10
  10fd34:	e5c32004 	strb	r2, [r3, #4]
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10fd38:	e51b3008 	ldr	r3, [fp, #-8]
  10fd3c:	e5933000 	ldr	r3, [r3]
  10fd40:	e3530000 	cmp	r3, #0
  10fd44:	0a00000b 	beq	10fd78 <lwip_netconn_do_join_leave_group+0x13c>
  10fd48:	ebffc93b 	bl	10223c <rt_enter_critical>
  10fd4c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd50:	e5933000 	ldr	r3, [r3]
  10fd54:	e1d330dc 	ldrsb	r3, [r3, #12]
  10fd58:	e373000c 	cmn	r3, #12
  10fd5c:	ba000004 	blt	10fd74 <lwip_netconn_do_join_leave_group+0x138>
  10fd60:	e51b3008 	ldr	r3, [fp, #-8]
  10fd64:	e5933000 	ldr	r3, [r3]
  10fd68:	e51b2008 	ldr	r2, [fp, #-8]
  10fd6c:	e1d220d4 	ldrsb	r2, [r2, #4]
  10fd70:	e5c3200c 	strb	r2, [r3, #12]
  10fd74:	ebffc936 	bl	102254 <rt_exit_critical>
}
  10fd78:	e320f000 	nop	{0}
  10fd7c:	e24bd004 	sub	sp, fp, #4
  10fd80:	e8bd8800 	pop	{fp, pc}

0010fd84 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
  10fd84:	e92d4800 	push	{fp, lr}
  10fd88:	e28db004 	add	fp, sp, #4
  10fd8c:	e24dd018 	sub	sp, sp, #24
  10fd90:	e50b0010 	str	r0, [fp, #-16]
  10fd94:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10fd98:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10fd9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10fda0:	e50b3008 	str	r3, [fp, #-8]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
  10fda4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10fda8:	e3530000 	cmp	r3, #0
  10fdac:	1a000004 	bne	10fdc4 <lwip_netconn_do_dns_found+0x40>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
  10fdb0:	e51b3008 	ldr	r3, [fp, #-8]
  10fdb4:	e593300c 	ldr	r3, [r3, #12]
  10fdb8:	e3e02005 	mvn	r2, #5
  10fdbc:	e5c32000 	strb	r2, [r3]
  10fdc0:	ea000008 	b	10fde8 <lwip_netconn_do_dns_found+0x64>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
  10fdc4:	e51b3008 	ldr	r3, [fp, #-8]
  10fdc8:	e593300c 	ldr	r3, [r3, #12]
  10fdcc:	e3a02000 	mov	r2, #0
  10fdd0:	e5c32000 	strb	r2, [r3]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
  10fdd4:	e51b3008 	ldr	r3, [fp, #-8]
  10fdd8:	e5933004 	ldr	r3, [r3, #4]
  10fddc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10fde0:	e5922000 	ldr	r2, [r2]
  10fde4:	e5832000 	str	r2, [r3]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  10fde8:	e51b3008 	ldr	r3, [fp, #-8]
  10fdec:	e5933008 	ldr	r3, [r3, #8]
  10fdf0:	e1a00003 	mov	r0, r3
  10fdf4:	ebffeac6 	bl	10a914 <sys_sem_signal>
}
  10fdf8:	e320f000 	nop	{0}
  10fdfc:	e24bd004 	sub	sp, fp, #4
  10fe00:	e8bd8800 	pop	{fp, pc}

0010fe04 <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
  10fe04:	e92d4810 	push	{r4, fp, lr}
  10fe08:	e28db008 	add	fp, sp, #8
  10fe0c:	e24dd01c 	sub	sp, sp, #28
  10fe10:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10fe14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10fe18:	e50b3010 	str	r3, [fp, #-16]
  u8_t addrtype =
  10fe1c:	e3a03000 	mov	r3, #0
  10fe20:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
  10fe24:	e51b3010 	ldr	r3, [fp, #-16]
  10fe28:	e5930000 	ldr	r0, [r3]
  10fe2c:	e51b3010 	ldr	r3, [fp, #-16]
  10fe30:	e5931004 	ldr	r1, [r3, #4]
  10fe34:	e51b3010 	ldr	r3, [fp, #-16]
  10fe38:	e593400c 	ldr	r4, [r3, #12]
  10fe3c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10fe40:	e58d3000 	str	r3, [sp]
  10fe44:	e51b3010 	ldr	r3, [fp, #-16]
  10fe48:	e30f2d84 	movw	r2, #64900	; 0xfd84
  10fe4c:	e3402010 	movt	r2, #16
  10fe50:	eb0020d2 	bl	1181a0 <dns_gethostbyname_addrtype>
  10fe54:	e1a03000 	mov	r3, r0
  10fe58:	e5c43000 	strb	r3, [r4]
    API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
  if (API_EXPR_DEREF(msg->err) != ERR_INPROGRESS) {
  10fe5c:	e51b3010 	ldr	r3, [fp, #-16]
  10fe60:	e593300c 	ldr	r3, [r3, #12]
  10fe64:	e1d330d0 	ldrsb	r3, [r3]
  10fe68:	e3730005 	cmn	r3, #5
  10fe6c:	0a000003 	beq	10fe80 <lwip_netconn_do_gethostbyname+0x7c>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  10fe70:	e51b3010 	ldr	r3, [fp, #-16]
  10fe74:	e5933008 	ldr	r3, [r3, #8]
  10fe78:	e1a00003 	mov	r0, r3
  10fe7c:	ebffeaa4 	bl	10a914 <sys_sem_signal>
  }
}
  10fe80:	e320f000 	nop	{0}
  10fe84:	e24bd008 	sub	sp, fp, #8
  10fe88:	e8bd8810 	pop	{r4, fp, pc}

0010fe8c <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
  10fe8c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10fe90:	e28db000 	add	fp, sp, #0
  10fe94:	e24dd00c 	sub	sp, sp, #12
  10fe98:	e1a03000 	mov	r3, r0
  10fe9c:	e54b3005 	strb	r3, [fp, #-5]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
  10fea0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fea4:	e3530000 	cmp	r3, #0
  10fea8:	ca000003 	bgt	10febc <err_to_errno+0x30>
  10feac:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10feb0:	e2633000 	rsb	r3, r3, #0
  10feb4:	e3530010 	cmp	r3, #16
  10feb8:	da000001 	ble	10fec4 <err_to_errno+0x38>
    return EIO;
  10febc:	e3a03005 	mov	r3, #5
  10fec0:	ea000004 	b	10fed8 <err_to_errno+0x4c>
  }
  return err_to_errno_table[-err];
  10fec4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fec8:	e2632000 	rsb	r2, r3, #0
  10fecc:	e3063b44 	movw	r3, #27460	; 0x6b44
  10fed0:	e3403014 	movt	r3, #20
  10fed4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  10fed8:	e1a00003 	mov	r0, r3
  10fedc:	e28bd000 	add	sp, fp, #0
  10fee0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10fee4:	e12fff1e 	bx	lr

0010fee8 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
  10fee8:	e92d4800 	push	{fp, lr}
  10feec:	e28db004 	add	fp, sp, #4
  10fef0:	e24dd008 	sub	sp, sp, #8
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10fef4:	e3a02043 	mov	r2, #67	; 0x43
  10fef8:	e3061b88 	movw	r1, #27528	; 0x6b88
  10fefc:	e3401014 	movt	r1, #20
  10ff00:	e3a00007 	mov	r0, #7
  10ff04:	eb002476 	bl	1190e4 <memp_malloc_fn>
  10ff08:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  10ff0c:	e51b3008 	ldr	r3, [fp, #-8]
  10ff10:	e3530000 	cmp	r3, #0
  10ff14:	0a000003 	beq	10ff28 <netbuf_new+0x40>
    memset(buf, 0, sizeof(struct netbuf));
  10ff18:	e3a02010 	mov	r2, #16
  10ff1c:	e3a01000 	mov	r1, #0
  10ff20:	e51b0008 	ldr	r0, [fp, #-8]
  10ff24:	eb00c4d4 	bl	14127c <memset>
  }
  return buf;
  10ff28:	e51b3008 	ldr	r3, [fp, #-8]
}
  10ff2c:	e1a00003 	mov	r0, r3
  10ff30:	e24bd004 	sub	sp, fp, #4
  10ff34:	e8bd8800 	pop	{fp, pc}

0010ff38 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  10ff38:	e92d4800 	push	{fp, lr}
  10ff3c:	e28db004 	add	fp, sp, #4
  10ff40:	e24dd008 	sub	sp, sp, #8
  10ff44:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  10ff48:	e51b3008 	ldr	r3, [fp, #-8]
  10ff4c:	e3530000 	cmp	r3, #0
  10ff50:	0a000011 	beq	10ff9c <netbuf_delete+0x64>
    if (buf->p != NULL) {
  10ff54:	e51b3008 	ldr	r3, [fp, #-8]
  10ff58:	e5933000 	ldr	r3, [r3]
  10ff5c:	e3530000 	cmp	r3, #0
  10ff60:	0a00000a 	beq	10ff90 <netbuf_delete+0x58>
      pbuf_free(buf->p);
  10ff64:	e51b3008 	ldr	r3, [fp, #-8]
  10ff68:	e5933000 	ldr	r3, [r3]
  10ff6c:	e1a00003 	mov	r0, r3
  10ff70:	eb002bd1 	bl	11aebc <pbuf_free>
      buf->p = buf->ptr = NULL;
  10ff74:	e51b3008 	ldr	r3, [fp, #-8]
  10ff78:	e3a02000 	mov	r2, #0
  10ff7c:	e5832004 	str	r2, [r3, #4]
  10ff80:	e51b3008 	ldr	r3, [fp, #-8]
  10ff84:	e5932004 	ldr	r2, [r3, #4]
  10ff88:	e51b3008 	ldr	r3, [fp, #-8]
  10ff8c:	e5832000 	str	r2, [r3]
    }
    memp_free(MEMP_NETBUF, buf);
  10ff90:	e51b1008 	ldr	r1, [fp, #-8]
  10ff94:	e3a00007 	mov	r0, #7
  10ff98:	eb0024b9 	bl	119284 <memp_free>
  }
}
  10ff9c:	e320f000 	nop	{0}
  10ffa0:	e24bd004 	sub	sp, fp, #4
  10ffa4:	e8bd8800 	pop	{fp, pc}

0010ffa8 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
  10ffa8:	e92d4800 	push	{fp, lr}
  10ffac:	e28db004 	add	fp, sp, #4
  10ffb0:	e24dd008 	sub	sp, sp, #8
  10ffb4:	e50b0008 	str	r0, [fp, #-8]
  10ffb8:	e1a03001 	mov	r3, r1
  10ffbc:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
  10ffc0:	e51b3008 	ldr	r3, [fp, #-8]
  10ffc4:	e3530000 	cmp	r3, #0
  10ffc8:	1a000008 	bne	10fff0 <netbuf_alloc+0x48>
  10ffcc:	e3060bb8 	movw	r0, #27576	; 0x6bb8
  10ffd0:	e3400014 	movt	r0, #20
  10ffd4:	ebffcc4e 	bl	103114 <rt_kprintf>
  10ffd8:	e3a01068 	mov	r1, #104	; 0x68
  10ffdc:	e3060b88 	movw	r0, #27528	; 0x6b88
  10ffe0:	e3400014 	movt	r0, #20
  10ffe4:	ebffec41 	bl	10b0f0 <sys_arch_assert>
  10ffe8:	e3a03000 	mov	r3, #0
  10ffec:	ea000029 	b	110098 <netbuf_alloc+0xf0>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
  10fff0:	e51b3008 	ldr	r3, [fp, #-8]
  10fff4:	e5933000 	ldr	r3, [r3]
  10fff8:	e3530000 	cmp	r3, #0
  10fffc:	0a000003 	beq	110010 <netbuf_alloc+0x68>
    pbuf_free(buf->p);
  110000:	e51b3008 	ldr	r3, [fp, #-8]
  110004:	e5933000 	ldr	r3, [r3]
  110008:	e1a00003 	mov	r0, r3
  11000c:	eb002baa 	bl	11aebc <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
  110010:	e15b30ba 	ldrh	r3, [fp, #-10]
  110014:	e3a02000 	mov	r2, #0
  110018:	e1a01003 	mov	r1, r3
  11001c:	e3a00000 	mov	r0, #0
  110020:	eb00289e 	bl	11a2a0 <pbuf_alloc>
  110024:	e1a02000 	mov	r2, r0
  110028:	e51b3008 	ldr	r3, [fp, #-8]
  11002c:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  110030:	e51b3008 	ldr	r3, [fp, #-8]
  110034:	e5933000 	ldr	r3, [r3]
  110038:	e3530000 	cmp	r3, #0
  11003c:	1a000001 	bne	110048 <netbuf_alloc+0xa0>
     return NULL;
  110040:	e3a03000 	mov	r3, #0
  110044:	ea000013 	b	110098 <netbuf_alloc+0xf0>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
  110048:	e51b3008 	ldr	r3, [fp, #-8]
  11004c:	e5933000 	ldr	r3, [r3]
  110050:	e1d330ba 	ldrh	r3, [r3, #10]
  110054:	e15b20ba 	ldrh	r2, [fp, #-10]
  110058:	e1520003 	cmp	r2, r3
  11005c:	9a000006 	bls	11007c <netbuf_alloc+0xd4>
  110060:	e3060bd4 	movw	r0, #27604	; 0x6bd4
  110064:	e3400014 	movt	r0, #20
  110068:	ebffcc29 	bl	103114 <rt_kprintf>
  11006c:	e3a01073 	mov	r1, #115	; 0x73
  110070:	e3060b88 	movw	r0, #27528	; 0x6b88
  110074:	e3400014 	movt	r0, #20
  110078:	ebffec1c 	bl	10b0f0 <sys_arch_assert>
             (buf->p->len >= size));
  buf->ptr = buf->p;
  11007c:	e51b3008 	ldr	r3, [fp, #-8]
  110080:	e5932000 	ldr	r2, [r3]
  110084:	e51b3008 	ldr	r3, [fp, #-8]
  110088:	e5832004 	str	r2, [r3, #4]
  return buf->p->payload;
  11008c:	e51b3008 	ldr	r3, [fp, #-8]
  110090:	e5933000 	ldr	r3, [r3]
  110094:	e5933004 	ldr	r3, [r3, #4]
}
  110098:	e1a00003 	mov	r0, r3
  11009c:	e24bd004 	sub	sp, fp, #4
  1100a0:	e8bd8800 	pop	{fp, pc}

001100a4 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
  1100a4:	e92d4800 	push	{fp, lr}
  1100a8:	e28db004 	add	fp, sp, #4
  1100ac:	e24dd008 	sub	sp, sp, #8
  1100b0:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
  1100b4:	e51b3008 	ldr	r3, [fp, #-8]
  1100b8:	e3530000 	cmp	r3, #0
  1100bc:	1a000007 	bne	1100e0 <netbuf_free+0x3c>
  1100c0:	e3060bf8 	movw	r0, #27640	; 0x6bf8
  1100c4:	e3400014 	movt	r0, #20
  1100c8:	ebffcc11 	bl	103114 <rt_kprintf>
  1100cc:	e3a01081 	mov	r1, #129	; 0x81
  1100d0:	e3060b88 	movw	r0, #27528	; 0x6b88
  1100d4:	e3400014 	movt	r0, #20
  1100d8:	ebffec04 	bl	10b0f0 <sys_arch_assert>
  1100dc:	ea00000e 	b	11011c <netbuf_free+0x78>
  if (buf->p != NULL) {
  1100e0:	e51b3008 	ldr	r3, [fp, #-8]
  1100e4:	e5933000 	ldr	r3, [r3]
  1100e8:	e3530000 	cmp	r3, #0
  1100ec:	0a000003 	beq	110100 <netbuf_free+0x5c>
    pbuf_free(buf->p);
  1100f0:	e51b3008 	ldr	r3, [fp, #-8]
  1100f4:	e5933000 	ldr	r3, [r3]
  1100f8:	e1a00003 	mov	r0, r3
  1100fc:	eb002b6e 	bl	11aebc <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
  110100:	e51b3008 	ldr	r3, [fp, #-8]
  110104:	e3a02000 	mov	r2, #0
  110108:	e5832004 	str	r2, [r3, #4]
  11010c:	e51b3008 	ldr	r3, [fp, #-8]
  110110:	e5932004 	ldr	r2, [r3, #4]
  110114:	e51b3008 	ldr	r3, [fp, #-8]
  110118:	e5832000 	str	r2, [r3]
}
  11011c:	e24bd004 	sub	sp, fp, #4
  110120:	e8bd8800 	pop	{fp, pc}

00110124 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
  110124:	e92d4800 	push	{fp, lr}
  110128:	e28db004 	add	fp, sp, #4
  11012c:	e24dd010 	sub	sp, sp, #16
  110130:	e50b0008 	str	r0, [fp, #-8]
  110134:	e50b100c 	str	r1, [fp, #-12]
  110138:	e1a03002 	mov	r3, r2
  11013c:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
  110140:	e51b3008 	ldr	r3, [fp, #-8]
  110144:	e3530000 	cmp	r3, #0
  110148:	1a000008 	bne	110170 <netbuf_ref+0x4c>
  11014c:	e3060c14 	movw	r0, #27668	; 0x6c14
  110150:	e3400014 	movt	r0, #20
  110154:	ebffcbee 	bl	103114 <rt_kprintf>
  110158:	e3a01095 	mov	r1, #149	; 0x95
  11015c:	e3060b88 	movw	r0, #27528	; 0x6b88
  110160:	e3400014 	movt	r0, #20
  110164:	ebffebe1 	bl	10b0f0 <sys_arch_assert>
  110168:	e3e0300f 	mvn	r3, #15
  11016c:	ea000028 	b	110214 <netbuf_ref+0xf0>
  if (buf->p != NULL) {
  110170:	e51b3008 	ldr	r3, [fp, #-8]
  110174:	e5933000 	ldr	r3, [r3]
  110178:	e3530000 	cmp	r3, #0
  11017c:	0a000003 	beq	110190 <netbuf_ref+0x6c>
    pbuf_free(buf->p);
  110180:	e51b3008 	ldr	r3, [fp, #-8]
  110184:	e5933000 	ldr	r3, [r3]
  110188:	e1a00003 	mov	r0, r3
  11018c:	eb002b4a 	bl	11aebc <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  110190:	e3a02002 	mov	r2, #2
  110194:	e3a01000 	mov	r1, #0
  110198:	e3a00000 	mov	r0, #0
  11019c:	eb00283f 	bl	11a2a0 <pbuf_alloc>
  1101a0:	e1a02000 	mov	r2, r0
  1101a4:	e51b3008 	ldr	r3, [fp, #-8]
  1101a8:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  1101ac:	e51b3008 	ldr	r3, [fp, #-8]
  1101b0:	e5933000 	ldr	r3, [r3]
  1101b4:	e3530000 	cmp	r3, #0
  1101b8:	1a000004 	bne	1101d0 <netbuf_ref+0xac>
    buf->ptr = NULL;
  1101bc:	e51b3008 	ldr	r3, [fp, #-8]
  1101c0:	e3a02000 	mov	r2, #0
  1101c4:	e5832004 	str	r2, [r3, #4]
    return ERR_MEM;
  1101c8:	e3e03000 	mvn	r3, #0
  1101cc:	ea000010 	b	110214 <netbuf_ref+0xf0>
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
  1101d0:	e51b3008 	ldr	r3, [fp, #-8]
  1101d4:	e5933000 	ldr	r3, [r3]
  1101d8:	e51b200c 	ldr	r2, [fp, #-12]
  1101dc:	e5832004 	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
  1101e0:	e51b3008 	ldr	r3, [fp, #-8]
  1101e4:	e5933000 	ldr	r3, [r3]
  1101e8:	e15b20be 	ldrh	r2, [fp, #-14]
  1101ec:	e1c320b8 	strh	r2, [r3, #8]
  1101f0:	e51b2008 	ldr	r2, [fp, #-8]
  1101f4:	e5922000 	ldr	r2, [r2]
  1101f8:	e1d330b8 	ldrh	r3, [r3, #8]
  1101fc:	e1c230ba 	strh	r3, [r2, #10]
  buf->ptr = buf->p;
  110200:	e51b3008 	ldr	r3, [fp, #-8]
  110204:	e5932000 	ldr	r2, [r3]
  110208:	e51b3008 	ldr	r3, [fp, #-8]
  11020c:	e5832004 	str	r2, [r3, #4]
  return ERR_OK;
  110210:	e3a03000 	mov	r3, #0
}
  110214:	e1a00003 	mov	r0, r3
  110218:	e24bd004 	sub	sp, fp, #4
  11021c:	e8bd8800 	pop	{fp, pc}

00110220 <netbuf_chain>:
 * @param head the first netbuf
 * @param tail netbuf to chain after head, freed by this function, may not be reference after returning
 */
void
netbuf_chain(struct netbuf *head, struct netbuf *tail)
{
  110220:	e92d4800 	push	{fp, lr}
  110224:	e28db004 	add	fp, sp, #4
  110228:	e24dd008 	sub	sp, sp, #8
  11022c:	e50b0008 	str	r0, [fp, #-8]
  110230:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netbuf_chain: invalid head", (head != NULL), return;);
  110234:	e51b3008 	ldr	r3, [fp, #-8]
  110238:	e3530000 	cmp	r3, #0
  11023c:	1a000007 	bne	110260 <netbuf_chain+0x40>
  110240:	e3060c2c 	movw	r0, #27692	; 0x6c2c
  110244:	e3400014 	movt	r0, #20
  110248:	ebffcbb1 	bl	103114 <rt_kprintf>
  11024c:	e3a010ae 	mov	r1, #174	; 0xae
  110250:	e3060b88 	movw	r0, #27528	; 0x6b88
  110254:	e3400014 	movt	r0, #20
  110258:	ebffeba4 	bl	10b0f0 <sys_arch_assert>
  11025c:	ea000018 	b	1102c4 <netbuf_chain+0xa4>
  LWIP_ERROR("netbuf_chain: invalid tail", (tail != NULL), return;);
  110260:	e51b300c 	ldr	r3, [fp, #-12]
  110264:	e3530000 	cmp	r3, #0
  110268:	1a000007 	bne	11028c <netbuf_chain+0x6c>
  11026c:	e3060c48 	movw	r0, #27720	; 0x6c48
  110270:	e3400014 	movt	r0, #20
  110274:	ebffcba6 	bl	103114 <rt_kprintf>
  110278:	e3a010af 	mov	r1, #175	; 0xaf
  11027c:	e3060b88 	movw	r0, #27528	; 0x6b88
  110280:	e3400014 	movt	r0, #20
  110284:	ebffeb99 	bl	10b0f0 <sys_arch_assert>
  110288:	ea00000d 	b	1102c4 <netbuf_chain+0xa4>
  pbuf_cat(head->p, tail->p);
  11028c:	e51b3008 	ldr	r3, [fp, #-8]
  110290:	e5932000 	ldr	r2, [r3]
  110294:	e51b300c 	ldr	r3, [fp, #-12]
  110298:	e5933000 	ldr	r3, [r3]
  11029c:	e1a01003 	mov	r1, r3
  1102a0:	e1a00002 	mov	r0, r2
  1102a4:	eb002bbb 	bl	11b198 <pbuf_cat>
  head->ptr = head->p;
  1102a8:	e51b3008 	ldr	r3, [fp, #-8]
  1102ac:	e5932000 	ldr	r2, [r3]
  1102b0:	e51b3008 	ldr	r3, [fp, #-8]
  1102b4:	e5832004 	str	r2, [r3, #4]
  memp_free(MEMP_NETBUF, tail);
  1102b8:	e51b100c 	ldr	r1, [fp, #-12]
  1102bc:	e3a00007 	mov	r0, #7
  1102c0:	eb0023ef 	bl	119284 <memp_free>
}
  1102c4:	e24bd004 	sub	sp, fp, #4
  1102c8:	e8bd8800 	pop	{fp, pc}

001102cc <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
  1102cc:	e92d4800 	push	{fp, lr}
  1102d0:	e28db004 	add	fp, sp, #4
  1102d4:	e24dd010 	sub	sp, sp, #16
  1102d8:	e50b0008 	str	r0, [fp, #-8]
  1102dc:	e50b100c 	str	r1, [fp, #-12]
  1102e0:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
  1102e4:	e51b3008 	ldr	r3, [fp, #-8]
  1102e8:	e3530000 	cmp	r3, #0
  1102ec:	1a000008 	bne	110314 <netbuf_data+0x48>
  1102f0:	e3060c64 	movw	r0, #27748	; 0x6c64
  1102f4:	e3400014 	movt	r0, #20
  1102f8:	ebffcb85 	bl	103114 <rt_kprintf>
  1102fc:	e3a010c2 	mov	r1, #194	; 0xc2
  110300:	e3060b88 	movw	r0, #27528	; 0x6b88
  110304:	e3400014 	movt	r0, #20
  110308:	ebffeb78 	bl	10b0f0 <sys_arch_assert>
  11030c:	e3e0300f 	mvn	r3, #15
  110310:	ea000028 	b	1103b8 <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  110314:	e51b300c 	ldr	r3, [fp, #-12]
  110318:	e3530000 	cmp	r3, #0
  11031c:	1a000008 	bne	110344 <netbuf_data+0x78>
  110320:	e3060c80 	movw	r0, #27776	; 0x6c80
  110324:	e3400014 	movt	r0, #20
  110328:	ebffcb79 	bl	103114 <rt_kprintf>
  11032c:	e3a010c3 	mov	r1, #195	; 0xc3
  110330:	e3060b88 	movw	r0, #27528	; 0x6b88
  110334:	e3400014 	movt	r0, #20
  110338:	ebffeb6c 	bl	10b0f0 <sys_arch_assert>
  11033c:	e3e0300f 	mvn	r3, #15
  110340:	ea00001c 	b	1103b8 <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
  110344:	e51b3010 	ldr	r3, [fp, #-16]
  110348:	e3530000 	cmp	r3, #0
  11034c:	1a000008 	bne	110374 <netbuf_data+0xa8>
  110350:	e3060ca0 	movw	r0, #27808	; 0x6ca0
  110354:	e3400014 	movt	r0, #20
  110358:	ebffcb6d 	bl	103114 <rt_kprintf>
  11035c:	e3a010c4 	mov	r1, #196	; 0xc4
  110360:	e3060b88 	movw	r0, #27528	; 0x6b88
  110364:	e3400014 	movt	r0, #20
  110368:	ebffeb60 	bl	10b0f0 <sys_arch_assert>
  11036c:	e3e0300f 	mvn	r3, #15
  110370:	ea000010 	b	1103b8 <netbuf_data+0xec>

  if (buf->ptr == NULL) {
  110374:	e51b3008 	ldr	r3, [fp, #-8]
  110378:	e5933004 	ldr	r3, [r3, #4]
  11037c:	e3530000 	cmp	r3, #0
  110380:	1a000001 	bne	11038c <netbuf_data+0xc0>
    return ERR_BUF;
  110384:	e3e03001 	mvn	r3, #1
  110388:	ea00000a 	b	1103b8 <netbuf_data+0xec>
  }
  *dataptr = buf->ptr->payload;
  11038c:	e51b3008 	ldr	r3, [fp, #-8]
  110390:	e5933004 	ldr	r3, [r3, #4]
  110394:	e5932004 	ldr	r2, [r3, #4]
  110398:	e51b300c 	ldr	r3, [fp, #-12]
  11039c:	e5832000 	str	r2, [r3]
  *len = buf->ptr->len;
  1103a0:	e51b3008 	ldr	r3, [fp, #-8]
  1103a4:	e5933004 	ldr	r3, [r3, #4]
  1103a8:	e1d320ba 	ldrh	r2, [r3, #10]
  1103ac:	e51b3010 	ldr	r3, [fp, #-16]
  1103b0:	e1c320b0 	strh	r2, [r3]
  return ERR_OK;
  1103b4:	e3a03000 	mov	r3, #0
}
  1103b8:	e1a00003 	mov	r0, r3
  1103bc:	e24bd004 	sub	sp, fp, #4
  1103c0:	e8bd8800 	pop	{fp, pc}

001103c4 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
  1103c4:	e92d4800 	push	{fp, lr}
  1103c8:	e28db004 	add	fp, sp, #4
  1103cc:	e24dd008 	sub	sp, sp, #8
  1103d0:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
  1103d4:	e51b3008 	ldr	r3, [fp, #-8]
  1103d8:	e3530000 	cmp	r3, #0
  1103dc:	1a000008 	bne	110404 <netbuf_next+0x40>
  1103e0:	e3060cbc 	movw	r0, #27836	; 0x6cbc
  1103e4:	e3400014 	movt	r0, #20
  1103e8:	ebffcb49 	bl	103114 <rt_kprintf>
  1103ec:	e3a010dc 	mov	r1, #220	; 0xdc
  1103f0:	e3060b88 	movw	r0, #27528	; 0x6b88
  1103f4:	e3400014 	movt	r0, #20
  1103f8:	ebffeb3c 	bl	10b0f0 <sys_arch_assert>
  1103fc:	e3e03000 	mvn	r3, #0
  110400:	ea000013 	b	110454 <netbuf_next+0x90>
  if (buf->ptr->next == NULL) {
  110404:	e51b3008 	ldr	r3, [fp, #-8]
  110408:	e5933004 	ldr	r3, [r3, #4]
  11040c:	e5933000 	ldr	r3, [r3]
  110410:	e3530000 	cmp	r3, #0
  110414:	1a000001 	bne	110420 <netbuf_next+0x5c>
    return -1;
  110418:	e3e03000 	mvn	r3, #0
  11041c:	ea00000c 	b	110454 <netbuf_next+0x90>
  }
  buf->ptr = buf->ptr->next;
  110420:	e51b3008 	ldr	r3, [fp, #-8]
  110424:	e5933004 	ldr	r3, [r3, #4]
  110428:	e5932000 	ldr	r2, [r3]
  11042c:	e51b3008 	ldr	r3, [fp, #-8]
  110430:	e5832004 	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
  110434:	e51b3008 	ldr	r3, [fp, #-8]
  110438:	e5933004 	ldr	r3, [r3, #4]
  11043c:	e5933000 	ldr	r3, [r3]
  110440:	e3530000 	cmp	r3, #0
  110444:	1a000001 	bne	110450 <netbuf_next+0x8c>
    return 1;
  110448:	e3a03001 	mov	r3, #1
  11044c:	ea000000 	b	110454 <netbuf_next+0x90>
  }
  return 0;
  110450:	e3a03000 	mov	r3, #0
}
  110454:	e1a00003 	mov	r0, r3
  110458:	e24bd004 	sub	sp, fp, #4
  11045c:	e8bd8800 	pop	{fp, pc}

00110460 <netbuf_first>:
 *
 * @param buf the netbuf to modify
 */
void
netbuf_first(struct netbuf *buf)
{
  110460:	e92d4800 	push	{fp, lr}
  110464:	e28db004 	add	fp, sp, #4
  110468:	e24dd008 	sub	sp, sp, #8
  11046c:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_first: invalid buf", (buf != NULL), return;);
  110470:	e51b3008 	ldr	r3, [fp, #-8]
  110474:	e3530000 	cmp	r3, #0
  110478:	1a000007 	bne	11049c <netbuf_first+0x3c>
  11047c:	e3060cd8 	movw	r0, #27864	; 0x6cd8
  110480:	e3400014 	movt	r0, #20
  110484:	ebffcb22 	bl	103114 <rt_kprintf>
  110488:	e3a010f2 	mov	r1, #242	; 0xf2
  11048c:	e3060b88 	movw	r0, #27528	; 0x6b88
  110490:	e3400014 	movt	r0, #20
  110494:	ebffeb15 	bl	10b0f0 <sys_arch_assert>
  110498:	ea000003 	b	1104ac <netbuf_first+0x4c>
  buf->ptr = buf->p;
  11049c:	e51b3008 	ldr	r3, [fp, #-8]
  1104a0:	e5932000 	ldr	r2, [r3]
  1104a4:	e51b3008 	ldr	r3, [fp, #-8]
  1104a8:	e5832004 	str	r2, [r3, #4]
}
  1104ac:	e24bd004 	sub	sp, fp, #4
  1104b0:	e8bd8800 	pop	{fp, pc}

001104b4 <lwip_gethostbyname>:
 * @return an entry containing addresses of address family AF_INET
 *         for the host with name name
 */
struct hostent*
lwip_gethostbyname(const char *name)
{
  1104b4:	e92d4800 	push	{fp, lr}
  1104b8:	e28db004 	add	fp, sp, #4
  1104bc:	e24dd010 	sub	sp, sp, #16
  1104c0:	e50b0010 	str	r0, [fp, #-16]
  HOSTENT_STORAGE ip_addr_t s_hostent_addr;
  HOSTENT_STORAGE ip_addr_t *s_phostent_addr[2];
  HOSTENT_STORAGE char s_hostname[DNS_MAX_NAME_LENGTH + 1];

  /* query host IP address */
  err = netconn_gethostbyname(name, &addr);
  1104c4:	e24b300c 	sub	r3, fp, #12
  1104c8:	e1a01003 	mov	r1, r3
  1104cc:	e51b0010 	ldr	r0, [fp, #-16]
  1104d0:	ebffef95 	bl	10c32c <netconn_gethostbyname>
  1104d4:	e1a03000 	mov	r3, r0
  1104d8:	e54b3005 	strb	r3, [fp, #-5]
  if (err != ERR_OK) {
  1104dc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1104e0:	e3530000 	cmp	r3, #0
  1104e4:	0a000005 	beq	110500 <lwip_gethostbyname+0x4c>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    h_errno = HOST_NOT_FOUND;
  1104e8:	e30f3590 	movw	r3, #62864	; 0xf590
  1104ec:	e3403014 	movt	r3, #20
  1104f0:	e3a020d2 	mov	r2, #210	; 0xd2
  1104f4:	e5832000 	str	r2, [r3]
    return NULL;
  1104f8:	e3a03000 	mov	r3, #0
  1104fc:	ea000032 	b	1105cc <lwip_gethostbyname+0x118>
  }

  /* fill hostent */
  s_hostent_addr = addr;
  110500:	e30d3a68 	movw	r3, #55912	; 0xda68
  110504:	e3403014 	movt	r3, #20
  110508:	e51b200c 	ldr	r2, [fp, #-12]
  11050c:	e5832000 	str	r2, [r3]
  s_phostent_addr[0] = &s_hostent_addr;
  110510:	e30d3a6c 	movw	r3, #55916	; 0xda6c
  110514:	e3403014 	movt	r3, #20
  110518:	e30d2a68 	movw	r2, #55912	; 0xda68
  11051c:	e3402014 	movt	r2, #20
  110520:	e5832000 	str	r2, [r3]
  s_phostent_addr[1] = NULL;
  110524:	e30d3a6c 	movw	r3, #55916	; 0xda6c
  110528:	e3403014 	movt	r3, #20
  11052c:	e3a02000 	mov	r2, #0
  110530:	e5832004 	str	r2, [r3, #4]
  strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  110534:	e3a02c01 	mov	r2, #256	; 0x100
  110538:	e51b1010 	ldr	r1, [fp, #-16]
  11053c:	e30d0a74 	movw	r0, #55924	; 0xda74
  110540:	e3400014 	movt	r0, #20
  110544:	eb00c42e 	bl	141604 <strncpy>
  s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  110548:	e30d3a74 	movw	r3, #55924	; 0xda74
  11054c:	e3403014 	movt	r3, #20
  110550:	e3a02000 	mov	r2, #0
  110554:	e5c32100 	strb	r2, [r3, #256]	; 0x100
  s_hostent.h_name = s_hostname;
  110558:	e30d3b78 	movw	r3, #56184	; 0xdb78
  11055c:	e3403014 	movt	r3, #20
  110560:	e30d2a74 	movw	r2, #55924	; 0xda74
  110564:	e3402014 	movt	r2, #20
  110568:	e5832000 	str	r2, [r3]
  s_aliases = NULL;
  11056c:	e30d3b8c 	movw	r3, #56204	; 0xdb8c
  110570:	e3403014 	movt	r3, #20
  110574:	e3a02000 	mov	r2, #0
  110578:	e5832000 	str	r2, [r3]
  s_hostent.h_aliases = &s_aliases;
  11057c:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110580:	e3403014 	movt	r3, #20
  110584:	e30d2b8c 	movw	r2, #56204	; 0xdb8c
  110588:	e3402014 	movt	r2, #20
  11058c:	e5832004 	str	r2, [r3, #4]
  s_hostent.h_addrtype = AF_INET;
  110590:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110594:	e3403014 	movt	r3, #20
  110598:	e3a02002 	mov	r2, #2
  11059c:	e5832008 	str	r2, [r3, #8]
  s_hostent.h_length = sizeof(ip_addr_t);
  1105a0:	e30d3b78 	movw	r3, #56184	; 0xdb78
  1105a4:	e3403014 	movt	r3, #20
  1105a8:	e3a02004 	mov	r2, #4
  1105ac:	e583200c 	str	r2, [r3, #12]
  s_hostent.h_addr_list = (char**)&s_phostent_addr;
  1105b0:	e30d3b78 	movw	r3, #56184	; 0xdb78
  1105b4:	e3403014 	movt	r3, #20
  1105b8:	e30d2a6c 	movw	r2, #55916	; 0xda6c
  1105bc:	e3402014 	movt	r2, #20
  1105c0:	e5832010 	str	r2, [r3, #16]

#if LWIP_DNS_API_HOSTENT_STORAGE
  /* this function should return the "per-thread" hostent after copy from s_hostent */
  return sys_thread_hostent(&s_hostent);
#else
  return &s_hostent;
  1105c4:	e30d3b78 	movw	r3, #56184	; 0xdb78
  1105c8:	e3403014 	movt	r3, #20
#endif /* LWIP_DNS_API_HOSTENT_STORAGE */
}
  1105cc:	e1a00003 	mov	r0, r3
  1105d0:	e24bd004 	sub	sp, fp, #4
  1105d4:	e8bd8800 	pop	{fp, pc}

001105d8 <lwip_gethostbyname_r>:
 *         is stored in *h_errnop instead of h_errno to be thread-safe
 */
int
lwip_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                size_t buflen, struct hostent **result, int *h_errnop)
{
  1105d8:	e92d4800 	push	{fp, lr}
  1105dc:	e28db004 	add	fp, sp, #4
  1105e0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1105e4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1105e8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1105ec:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  1105f0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct gethostbyname_r_helper *h;
  char *hostname;
  size_t namelen;
  int lh_errno;

  if (h_errnop == NULL) {
  1105f4:	e59b3008 	ldr	r3, [fp, #8]
  1105f8:	e3530000 	cmp	r3, #0
  1105fc:	1a000001 	bne	110608 <lwip_gethostbyname_r+0x30>
    /* ensure h_errnop is never NULL */
    h_errnop = &lh_errno;
  110600:	e24b3018 	sub	r3, fp, #24
  110604:	e58b3008 	str	r3, [fp, #8]
  }

  if (result == NULL) {
  110608:	e59b3004 	ldr	r3, [fp, #4]
  11060c:	e3530000 	cmp	r3, #0
  110610:	1a000004 	bne	110628 <lwip_gethostbyname_r+0x50>
    /* not all arguments given */
    *h_errnop = EINVAL;
  110614:	e59b3008 	ldr	r3, [fp, #8]
  110618:	e3a02016 	mov	r2, #22
  11061c:	e5832000 	str	r2, [r3]
    return -1;
  110620:	e3e03000 	mvn	r3, #0
  110624:	ea00005a 	b	110794 <lwip_gethostbyname_r+0x1bc>
  }
  /* first thing to do: set *result to nothing */
  *result = NULL;
  110628:	e59b3004 	ldr	r3, [fp, #4]
  11062c:	e3a02000 	mov	r2, #0
  110630:	e5832000 	str	r2, [r3]
  if ((name == NULL) || (ret == NULL) || (buf == NULL)) {
  110634:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110638:	e3530000 	cmp	r3, #0
  11063c:	0a000005 	beq	110658 <lwip_gethostbyname_r+0x80>
  110640:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110644:	e3530000 	cmp	r3, #0
  110648:	0a000002 	beq	110658 <lwip_gethostbyname_r+0x80>
  11064c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  110650:	e3530000 	cmp	r3, #0
  110654:	1a000004 	bne	11066c <lwip_gethostbyname_r+0x94>
    /* not all arguments given */
    *h_errnop = EINVAL;
  110658:	e59b3008 	ldr	r3, [fp, #8]
  11065c:	e3a02016 	mov	r2, #22
  110660:	e5832000 	str	r2, [r3]
    return -1;
  110664:	e3e03000 	mvn	r3, #0
  110668:	ea000049 	b	110794 <lwip_gethostbyname_r+0x1bc>
  }

  namelen = strlen(name);
  11066c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110670:	eb00c392 	bl	1414c0 <strlen>
  110674:	e50b0008 	str	r0, [fp, #-8]
  if (buflen < (sizeof(struct gethostbyname_r_helper) + namelen + 1 + (MEM_ALIGNMENT - 1))) {
  110678:	e51b3008 	ldr	r3, [fp, #-8]
  11067c:	e2833014 	add	r3, r3, #20
  110680:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  110684:	e1520003 	cmp	r2, r3
  110688:	2a000004 	bcs	1106a0 <lwip_gethostbyname_r+0xc8>
    /* buf can't hold the data needed + a copy of name */
    *h_errnop = ERANGE;
  11068c:	e59b3008 	ldr	r3, [fp, #8]
  110690:	e3a02022 	mov	r2, #34	; 0x22
  110694:	e5832000 	str	r2, [r3]
    return -1;
  110698:	e3e03000 	mvn	r3, #0
  11069c:	ea00003c 	b	110794 <lwip_gethostbyname_r+0x1bc>
  }

  h = (struct gethostbyname_r_helper*)LWIP_MEM_ALIGN(buf);
  1106a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1106a4:	e2833003 	add	r3, r3, #3
  1106a8:	e3c33003 	bic	r3, r3, #3
  1106ac:	e50b300c 	str	r3, [fp, #-12]
  hostname = ((char*)h) + sizeof(struct gethostbyname_r_helper);
  1106b0:	e51b300c 	ldr	r3, [fp, #-12]
  1106b4:	e2833010 	add	r3, r3, #16
  1106b8:	e50b3010 	str	r3, [fp, #-16]

  /* query host IP address */
  err = netconn_gethostbyname(name, &h->addr);
  1106bc:	e51b300c 	ldr	r3, [fp, #-12]
  1106c0:	e2833008 	add	r3, r3, #8
  1106c4:	e1a01003 	mov	r1, r3
  1106c8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1106cc:	ebffef16 	bl	10c32c <netconn_gethostbyname>
  1106d0:	e1a03000 	mov	r3, r0
  1106d4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  1106d8:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1106dc:	e3530000 	cmp	r3, #0
  1106e0:	0a000004 	beq	1106f8 <lwip_gethostbyname_r+0x120>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    *h_errnop = HOST_NOT_FOUND;
  1106e4:	e59b3008 	ldr	r3, [fp, #8]
  1106e8:	e3a020d2 	mov	r2, #210	; 0xd2
  1106ec:	e5832000 	str	r2, [r3]
    return -1;
  1106f0:	e3e03000 	mvn	r3, #0
  1106f4:	ea000026 	b	110794 <lwip_gethostbyname_r+0x1bc>
  }

  /* copy the hostname into buf */
  MEMCPY(hostname, name, namelen);
  1106f8:	e51b2008 	ldr	r2, [fp, #-8]
  1106fc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  110700:	e51b0010 	ldr	r0, [fp, #-16]
  110704:	eb00c1a4 	bl	140d9c <memcpy>
  hostname[namelen] = 0;
  110708:	e51b2010 	ldr	r2, [fp, #-16]
  11070c:	e51b3008 	ldr	r3, [fp, #-8]
  110710:	e0823003 	add	r3, r2, r3
  110714:	e3a02000 	mov	r2, #0
  110718:	e5c32000 	strb	r2, [r3]

  /* fill hostent */
  h->addr_list[0] = &h->addr;
  11071c:	e51b300c 	ldr	r3, [fp, #-12]
  110720:	e2832008 	add	r2, r3, #8
  110724:	e51b300c 	ldr	r3, [fp, #-12]
  110728:	e5832000 	str	r2, [r3]
  h->addr_list[1] = NULL;
  11072c:	e51b300c 	ldr	r3, [fp, #-12]
  110730:	e3a02000 	mov	r2, #0
  110734:	e5832004 	str	r2, [r3, #4]
  h->aliases = NULL;
  110738:	e51b300c 	ldr	r3, [fp, #-12]
  11073c:	e3a02000 	mov	r2, #0
  110740:	e583200c 	str	r2, [r3, #12]
  ret->h_name = hostname;
  110744:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110748:	e51b2010 	ldr	r2, [fp, #-16]
  11074c:	e5832000 	str	r2, [r3]
  ret->h_aliases = &h->aliases;
  110750:	e51b300c 	ldr	r3, [fp, #-12]
  110754:	e283200c 	add	r2, r3, #12
  110758:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11075c:	e5832004 	str	r2, [r3, #4]
  ret->h_addrtype = AF_INET;
  110760:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110764:	e3a02002 	mov	r2, #2
  110768:	e5832008 	str	r2, [r3, #8]
  ret->h_length = sizeof(ip_addr_t);
  11076c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110770:	e3a02004 	mov	r2, #4
  110774:	e583200c 	str	r2, [r3, #12]
  ret->h_addr_list = (char**)&h->addr_list;
  110778:	e51b200c 	ldr	r2, [fp, #-12]
  11077c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110780:	e5832010 	str	r2, [r3, #16]

  /* set result != NULL */
  *result = ret;
  110784:	e59b3004 	ldr	r3, [fp, #4]
  110788:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  11078c:	e5832000 	str	r2, [r3]

  /* return success */
  return 0;
  110790:	e3a03000 	mov	r3, #0
}
  110794:	e1a00003 	mov	r0, r3
  110798:	e24bd004 	sub	sp, fp, #4
  11079c:	e8bd8800 	pop	{fp, pc}

001107a0 <lwip_freeaddrinfo>:
 *
 * @param ai struct addrinfo to free
 */
void
lwip_freeaddrinfo(struct addrinfo *ai)
{
  1107a0:	e92d4800 	push	{fp, lr}
  1107a4:	e28db004 	add	fp, sp, #4
  1107a8:	e24dd010 	sub	sp, sp, #16
  1107ac:	e50b0010 	str	r0, [fp, #-16]
  struct addrinfo *next;

  while (ai != NULL) {
  1107b0:	ea000007 	b	1107d4 <lwip_freeaddrinfo+0x34>
    next = ai->ai_next;
  1107b4:	e51b3010 	ldr	r3, [fp, #-16]
  1107b8:	e593301c 	ldr	r3, [r3, #28]
  1107bc:	e50b3008 	str	r3, [fp, #-8]
    memp_free(MEMP_NETDB, ai);
  1107c0:	e51b1010 	ldr	r1, [fp, #-16]
  1107c4:	e3a0000e 	mov	r0, #14
  1107c8:	eb0022ad 	bl	119284 <memp_free>
    ai = next;
  1107cc:	e51b3008 	ldr	r3, [fp, #-8]
  1107d0:	e50b3010 	str	r3, [fp, #-16]
  while (ai != NULL) {
  1107d4:	e51b3010 	ldr	r3, [fp, #-16]
  1107d8:	e3530000 	cmp	r3, #0
  1107dc:	1afffff4 	bne	1107b4 <lwip_freeaddrinfo+0x14>
  }
}
  1107e0:	e320f000 	nop	{0}
  1107e4:	e24bd004 	sub	sp, fp, #4
  1107e8:	e8bd8800 	pop	{fp, pc}

001107ec <lwip_getaddrinfo>:
 * @todo: implement AI_V4MAPPED, AI_ADDRCONFIG
 */
int
lwip_getaddrinfo(const char *nodename, const char *servname,
       const struct addrinfo *hints, struct addrinfo **res)
{
  1107ec:	e92d4800 	push	{fp, lr}
  1107f0:	e28db004 	add	fp, sp, #4
  1107f4:	e24dd038 	sub	sp, sp, #56	; 0x38
  1107f8:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  1107fc:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110800:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110804:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  ip_addr_t addr;
  struct addrinfo *ai;
  struct sockaddr_storage *sa = NULL;
  110808:	e3a03000 	mov	r3, #0
  11080c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  int port_nr = 0;
  110810:	e3a03000 	mov	r3, #0
  110814:	e50b3008 	str	r3, [fp, #-8]
  size_t total_size;
  size_t namelen = 0;
  110818:	e3a03000 	mov	r3, #0
  11081c:	e50b3010 	str	r3, [fp, #-16]
  int ai_family;

  if (res == NULL) {
  110820:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110824:	e3530000 	cmp	r3, #0
  110828:	1a000001 	bne	110834 <lwip_getaddrinfo+0x48>
    return EAI_FAIL;
  11082c:	e3a030ca 	mov	r3, #202	; 0xca
  110830:	ea0000d0 	b	110b78 <lwip_getaddrinfo+0x38c>
  }
  *res = NULL;
  110834:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110838:	e3a02000 	mov	r2, #0
  11083c:	e5832000 	str	r2, [r3]
  if ((nodename == NULL) && (servname == NULL)) {
  110840:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110844:	e3530000 	cmp	r3, #0
  110848:	1a000004 	bne	110860 <lwip_getaddrinfo+0x74>
  11084c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110850:	e3530000 	cmp	r3, #0
  110854:	1a000001 	bne	110860 <lwip_getaddrinfo+0x74>
    return EAI_NONAME;
  110858:	e3a030c8 	mov	r3, #200	; 0xc8
  11085c:	ea0000c5 	b	110b78 <lwip_getaddrinfo+0x38c>
  }

  if (hints != NULL) {
  110860:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110864:	e3530000 	cmp	r3, #0
  110868:	0a00000a 	beq	110898 <lwip_getaddrinfo+0xac>
    ai_family = hints->ai_family;
  11086c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110870:	e5933004 	ldr	r3, [r3, #4]
  110874:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((ai_family != AF_UNSPEC)
  110878:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11087c:	e3530000 	cmp	r3, #0
  110880:	0a000006 	beq	1108a0 <lwip_getaddrinfo+0xb4>
#if LWIP_IPV4
      && (ai_family != AF_INET)
  110884:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110888:	e3530002 	cmp	r3, #2
  11088c:	0a000003 	beq	1108a0 <lwip_getaddrinfo+0xb4>
#endif /* LWIP_IPV4 */
#if LWIP_IPV6
      && (ai_family != AF_INET6)
#endif /* LWIP_IPV6 */
      ) {
      return EAI_FAMILY;
  110890:	e3a030cc 	mov	r3, #204	; 0xcc
  110894:	ea0000b7 	b	110b78 <lwip_getaddrinfo+0x38c>
    }
  } else {
    ai_family = AF_UNSPEC;
  110898:	e3a03000 	mov	r3, #0
  11089c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  if (servname != NULL) {
  1108a0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1108a4:	e3530000 	cmp	r3, #0
  1108a8:	0a00000a 	beq	1108d8 <lwip_getaddrinfo+0xec>
    /* service name specified: convert to port number
     * @todo?: currently, only ASCII integers (port numbers) are supported (AI_NUMERICSERV)! */
    port_nr = atoi(servname);
  1108ac:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  1108b0:	eb00c10d 	bl	140cec <atoi>
  1108b4:	e50b0008 	str	r0, [fp, #-8]
    if ((port_nr <= 0) || (port_nr > 0xffff)) {
  1108b8:	e51b3008 	ldr	r3, [fp, #-8]
  1108bc:	e3530000 	cmp	r3, #0
  1108c0:	da000002 	ble	1108d0 <lwip_getaddrinfo+0xe4>
  1108c4:	e51b3008 	ldr	r3, [fp, #-8]
  1108c8:	e3530801 	cmp	r3, #65536	; 0x10000
  1108cc:	ba000001 	blt	1108d8 <lwip_getaddrinfo+0xec>
      return EAI_SERVICE;
  1108d0:	e3a030c9 	mov	r3, #201	; 0xc9
  1108d4:	ea0000a7 	b	110b78 <lwip_getaddrinfo+0x38c>
    }
  }

  if (nodename != NULL) {
  1108d8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1108dc:	e3530000 	cmp	r3, #0
  1108e0:	0a00001b 	beq	110954 <lwip_getaddrinfo+0x168>
    /* service location specified, try to resolve */
    if ((hints != NULL) && (hints->ai_flags & AI_NUMERICHOST)) {
  1108e4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1108e8:	e3530000 	cmp	r3, #0
  1108ec:	0a00000d 	beq	110928 <lwip_getaddrinfo+0x13c>
  1108f0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1108f4:	e5933000 	ldr	r3, [r3]
  1108f8:	e2033004 	and	r3, r3, #4
  1108fc:	e3530000 	cmp	r3, #0
  110900:	0a000008 	beq	110928 <lwip_getaddrinfo+0x13c>
      /* no DNS lookup, just parse for an address string */
      if (!ipaddr_aton(nodename, &addr)) {
  110904:	e24b3028 	sub	r3, fp, #40	; 0x28
  110908:	e1a01003 	mov	r1, r3
  11090c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  110910:	eb008775 	bl	1326ec <ip4addr_aton>
  110914:	e1a03000 	mov	r3, r0
  110918:	e3530000 	cmp	r3, #0
  11091c:	1a00001a 	bne	11098c <lwip_getaddrinfo+0x1a0>
        return EAI_NONAME;
  110920:	e3a030c8 	mov	r3, #200	; 0xc8
  110924:	ea000093 	b	110b78 <lwip_getaddrinfo+0x38c>
        type = NETCONN_DNS_IPV4;
      } else if (ai_family == AF_INET6) {
        type = NETCONN_DNS_IPV6;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      err = netconn_gethostbyname_addrtype(nodename, &addr, type);
  110928:	e24b3028 	sub	r3, fp, #40	; 0x28
  11092c:	e1a01003 	mov	r1, r3
  110930:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  110934:	ebffee7c 	bl	10c32c <netconn_gethostbyname>
  110938:	e1a03000 	mov	r3, r0
  11093c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
      if (err != ERR_OK) {
  110940:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  110944:	e3530000 	cmp	r3, #0
  110948:	0a00000f 	beq	11098c <lwip_getaddrinfo+0x1a0>
        return EAI_FAIL;
  11094c:	e3a030ca 	mov	r3, #202	; 0xca
  110950:	ea000088 	b	110b78 <lwip_getaddrinfo+0x38c>
      }
    }
  } else {
    /* service location specified, use loopback address */
    if ((hints != NULL) && (hints->ai_flags & AI_PASSIVE)) {
  110954:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110958:	e3530000 	cmp	r3, #0
  11095c:	0a000007 	beq	110980 <lwip_getaddrinfo+0x194>
  110960:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110964:	e5933000 	ldr	r3, [r3]
  110968:	e2033001 	and	r3, r3, #1
  11096c:	e3530000 	cmp	r3, #0
  110970:	0a000002 	beq	110980 <lwip_getaddrinfo+0x194>
      ip_addr_set_any(ai_family == AF_INET6, &addr);
  110974:	e3a03000 	mov	r3, #0
  110978:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  11097c:	ea000002 	b	11098c <lwip_getaddrinfo+0x1a0>
    } else {
      ip_addr_set_loopback(ai_family == AF_INET6, &addr);
  110980:	e3a0307f 	mov	r3, #127	; 0x7f
  110984:	e3403100 	movt	r3, #256	; 0x100
  110988:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
  }

  total_size = sizeof(struct addrinfo) + sizeof(struct sockaddr_storage);
  11098c:	e3a03030 	mov	r3, #48	; 0x30
  110990:	e50b300c 	str	r3, [fp, #-12]
  if (nodename != NULL) {
  110994:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110998:	e3530000 	cmp	r3, #0
  11099c:	0a00001a 	beq	110a0c <lwip_getaddrinfo+0x220>
    namelen = strlen(nodename);
  1109a0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1109a4:	eb00c2c5 	bl	1414c0 <strlen>
  1109a8:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > DNS_MAX_NAME_LENGTH) {
  1109ac:	e51b3010 	ldr	r3, [fp, #-16]
  1109b0:	e3530c01 	cmp	r3, #256	; 0x100
  1109b4:	9a000001 	bls	1109c0 <lwip_getaddrinfo+0x1d4>
      /* invalid name length */
      return EAI_FAIL;
  1109b8:	e3a030ca 	mov	r3, #202	; 0xca
  1109bc:	ea00006d 	b	110b78 <lwip_getaddrinfo+0x38c>
    }
    LWIP_ASSERT("namelen is too long", total_size + namelen + 1 > total_size);
  1109c0:	e51b200c 	ldr	r2, [fp, #-12]
  1109c4:	e51b3010 	ldr	r3, [fp, #-16]
  1109c8:	e0823003 	add	r3, r2, r3
  1109cc:	e2833001 	add	r3, r3, #1
  1109d0:	e51b200c 	ldr	r2, [fp, #-12]
  1109d4:	e1520003 	cmp	r2, r3
  1109d8:	3a000006 	bcc	1109f8 <lwip_getaddrinfo+0x20c>
  1109dc:	e3060cf4 	movw	r0, #27892	; 0x6cf4
  1109e0:	e3400014 	movt	r0, #20
  1109e4:	ebffc9ca 	bl	103114 <rt_kprintf>
  1109e8:	e3001166 	movw	r1, #358	; 0x166
  1109ec:	e3060d08 	movw	r0, #27912	; 0x6d08
  1109f0:	e3400014 	movt	r0, #20
  1109f4:	ebffe9bd 	bl	10b0f0 <sys_arch_assert>
    total_size += namelen + 1;
  1109f8:	e51b2010 	ldr	r2, [fp, #-16]
  1109fc:	e51b300c 	ldr	r3, [fp, #-12]
  110a00:	e0823003 	add	r3, r2, r3
  110a04:	e2833001 	add	r3, r3, #1
  110a08:	e50b300c 	str	r3, [fp, #-12]
  }
  /* If this fails, please report to lwip-devel! :-) */
  LWIP_ASSERT("total_size <= NETDB_ELEM_SIZE: please report this!",
  110a0c:	e51b300c 	ldr	r3, [fp, #-12]
  110a10:	e3002131 	movw	r2, #305	; 0x131
  110a14:	e1530002 	cmp	r3, r2
  110a18:	9a000006 	bls	110a38 <lwip_getaddrinfo+0x24c>
  110a1c:	e3060d34 	movw	r0, #27956	; 0x6d34
  110a20:	e3400014 	movt	r0, #20
  110a24:	ebffc9ba 	bl	103114 <rt_kprintf>
  110a28:	e300116b 	movw	r1, #363	; 0x16b
  110a2c:	e3060d08 	movw	r0, #27912	; 0x6d08
  110a30:	e3400014 	movt	r0, #20
  110a34:	ebffe9ad 	bl	10b0f0 <sys_arch_assert>
    total_size <= NETDB_ELEM_SIZE);
  ai = (struct addrinfo *)memp_malloc(MEMP_NETDB);
  110a38:	e3a02f5b 	mov	r2, #364	; 0x16c
  110a3c:	e3061d08 	movw	r1, #27912	; 0x6d08
  110a40:	e3401014 	movt	r1, #20
  110a44:	e3a0000e 	mov	r0, #14
  110a48:	eb0021a5 	bl	1190e4 <memp_malloc_fn>
  110a4c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (ai == NULL) {
  110a50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110a54:	e3530000 	cmp	r3, #0
  110a58:	1a000001 	bne	110a64 <lwip_getaddrinfo+0x278>
    return EAI_MEMORY;
  110a5c:	e3a030cb 	mov	r3, #203	; 0xcb
  110a60:	ea000044 	b	110b78 <lwip_getaddrinfo+0x38c>
  }
  memset(ai, 0, total_size);
  110a64:	e51b200c 	ldr	r2, [fp, #-12]
  110a68:	e3a01000 	mov	r1, #0
  110a6c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110a70:	eb00c201 	bl	14127c <memset>
  /* cast through void* to get rid of alignment warnings */
  sa = (struct sockaddr_storage *)(void*)((u8_t*)ai + sizeof(struct addrinfo));
  110a74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110a78:	e2833020 	add	r3, r3, #32
  110a7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sa6->sin6_port = lwip_htons((u16_t)port_nr);
    ai->ai_family = AF_INET6;
#endif /* LWIP_IPV6 */
  } else {
#if LWIP_IPV4
    struct sockaddr_in *sa4 = (struct sockaddr_in*)sa;
  110a80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  110a84:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* set up sockaddr */
    inet_addr_from_ip4addr(&sa4->sin_addr, ip_2_ip4(&addr));
  110a88:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  110a8c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110a90:	e5832004 	str	r2, [r3, #4]
    sa4->sin_family = AF_INET;
  110a94:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110a98:	e3a02002 	mov	r2, #2
  110a9c:	e5c32001 	strb	r2, [r3, #1]
    sa4->sin_len = sizeof(struct sockaddr_in);
  110aa0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110aa4:	e3a02010 	mov	r2, #16
  110aa8:	e5c32000 	strb	r2, [r3]
    sa4->sin_port = lwip_htons((u16_t)port_nr);
  110aac:	e51b3008 	ldr	r3, [fp, #-8]
  110ab0:	e6ff3073 	uxth	r3, r3
  110ab4:	e1a00003 	mov	r0, r3
  110ab8:	eb0016c8 	bl	1165e0 <lwip_htons>
  110abc:	e1a03000 	mov	r3, r0
  110ac0:	e1a02003 	mov	r2, r3
  110ac4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110ac8:	e1c320b2 	strh	r2, [r3, #2]
    ai->ai_family = AF_INET;
  110acc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110ad0:	e3a02002 	mov	r2, #2
  110ad4:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_IPV4 */
  }

  /* set up addrinfo */
  if (hints != NULL) {
  110ad8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110adc:	e3530000 	cmp	r3, #0
  110ae0:	0a000007 	beq	110b04 <lwip_getaddrinfo+0x318>
    /* copy socktype & protocol from hints if specified */
    ai->ai_socktype = hints->ai_socktype;
  110ae4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110ae8:	e5932008 	ldr	r2, [r3, #8]
  110aec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110af0:	e5832008 	str	r2, [r3, #8]
    ai->ai_protocol = hints->ai_protocol;
  110af4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110af8:	e593200c 	ldr	r2, [r3, #12]
  110afc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b00:	e583200c 	str	r2, [r3, #12]
  }
  if (nodename != NULL) {
  110b04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110b08:	e3530000 	cmp	r3, #0
  110b0c:	0a00000f 	beq	110b50 <lwip_getaddrinfo+0x364>
    /* copy nodename to canonname if specified */
    ai->ai_canonname = ((char*)ai + sizeof(struct addrinfo) + sizeof(struct sockaddr_storage));
  110b10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b14:	e2832030 	add	r2, r3, #48	; 0x30
  110b18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b1c:	e5832018 	str	r2, [r3, #24]
    MEMCPY(ai->ai_canonname, nodename, namelen);
  110b20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b24:	e5933018 	ldr	r3, [r3, #24]
  110b28:	e51b2010 	ldr	r2, [fp, #-16]
  110b2c:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  110b30:	e1a00003 	mov	r0, r3
  110b34:	eb00c098 	bl	140d9c <memcpy>
    ai->ai_canonname[namelen] = 0;
  110b38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b3c:	e5932018 	ldr	r2, [r3, #24]
  110b40:	e51b3010 	ldr	r3, [fp, #-16]
  110b44:	e0823003 	add	r3, r2, r3
  110b48:	e3a02000 	mov	r2, #0
  110b4c:	e5c32000 	strb	r2, [r3]
  }
  ai->ai_addrlen = sizeof(struct sockaddr_storage);
  110b50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b54:	e3a02010 	mov	r2, #16
  110b58:	e5832010 	str	r2, [r3, #16]
  ai->ai_addr = (struct sockaddr*)sa;
  110b5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b60:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  110b64:	e5832014 	str	r2, [r3, #20]

  *res = ai;
  110b68:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110b6c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  110b70:	e5832000 	str	r2, [r3]

  return 0;
  110b74:	e3a03000 	mov	r3, #0
}
  110b78:	e1a00003 	mov	r0, r3
  110b7c:	e24bd004 	sub	sp, fp, #4
  110b80:	e8bd8800 	pop	{fp, pc}

00110b84 <netifapi_do_netif_add>:
/**
 * Call netif_add() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_add(struct tcpip_api_call_data *m)
{
  110b84:	e92d4810 	push	{r4, fp, lr}
  110b88:	e28db008 	add	fp, sp, #8
  110b8c:	e24dd024 	sub	sp, sp, #36	; 0x24
  110b90:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110b94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110b98:	e50b3010 	str	r3, [fp, #-16]
  if (!netif_add( msg->netif,
  110b9c:	e51b3010 	ldr	r3, [fp, #-16]
  110ba0:	e5930004 	ldr	r0, [r3, #4]
  110ba4:	e51b3010 	ldr	r3, [fp, #-16]
  110ba8:	e593c008 	ldr	ip, [r3, #8]
  110bac:	e51b3010 	ldr	r3, [fp, #-16]
  110bb0:	e593e00c 	ldr	lr, [r3, #12]
  110bb4:	e51b3010 	ldr	r3, [fp, #-16]
  110bb8:	e5934010 	ldr	r4, [r3, #16]
  110bbc:	e51b3010 	ldr	r3, [fp, #-16]
  110bc0:	e5933014 	ldr	r3, [r3, #20]
  110bc4:	e51b2010 	ldr	r2, [fp, #-16]
  110bc8:	e5922018 	ldr	r2, [r2, #24]
  110bcc:	e51b1010 	ldr	r1, [fp, #-16]
  110bd0:	e591101c 	ldr	r1, [r1, #28]
  110bd4:	e58d1008 	str	r1, [sp, #8]
  110bd8:	e58d2004 	str	r2, [sp, #4]
  110bdc:	e58d3000 	str	r3, [sp]
  110be0:	e1a03004 	mov	r3, r4
  110be4:	e1a0200e 	mov	r2, lr
  110be8:	e1a0100c 	mov	r1, ip
  110bec:	eb0021de 	bl	11936c <netif_add>
  110bf0:	e1a03000 	mov	r3, r0
  110bf4:	e3530000 	cmp	r3, #0
  110bf8:	1a000001 	bne	110c04 <netifapi_do_netif_add+0x80>
                  API_EXPR_REF(msg->msg.add.gw),
#endif /* LWIP_IPV4 */
                  msg->msg.add.state,
                  msg->msg.add.init,
                  msg->msg.add.input)) {
    return ERR_IF;
  110bfc:	e3e0300b 	mvn	r3, #11
  110c00:	ea000000 	b	110c08 <netifapi_do_netif_add+0x84>
  } else {
    return ERR_OK;
  110c04:	e3a03000 	mov	r3, #0
  }
}
  110c08:	e1a00003 	mov	r0, r3
  110c0c:	e24bd008 	sub	sp, fp, #8
  110c10:	e8bd8810 	pop	{r4, fp, pc}

00110c14 <netifapi_do_netif_set_addr>:
/**
 * Call netif_set_addr() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_set_addr(struct tcpip_api_call_data *m)
{
  110c14:	e92d4800 	push	{fp, lr}
  110c18:	e28db004 	add	fp, sp, #4
  110c1c:	e24dd010 	sub	sp, sp, #16
  110c20:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110c24:	e51b3010 	ldr	r3, [fp, #-16]
  110c28:	e50b3008 	str	r3, [fp, #-8]

  netif_set_addr( msg->netif,
  110c2c:	e51b3008 	ldr	r3, [fp, #-8]
  110c30:	e5930004 	ldr	r0, [r3, #4]
  110c34:	e51b3008 	ldr	r3, [fp, #-8]
  110c38:	e5931008 	ldr	r1, [r3, #8]
  110c3c:	e51b3008 	ldr	r3, [fp, #-8]
  110c40:	e593200c 	ldr	r2, [r3, #12]
  110c44:	e51b3008 	ldr	r3, [fp, #-8]
  110c48:	e5933010 	ldr	r3, [r3, #16]
  110c4c:	eb00222c 	bl	119504 <netif_set_addr>
                  API_EXPR_REF(msg->msg.add.ipaddr),
                  API_EXPR_REF(msg->msg.add.netmask),
                  API_EXPR_REF(msg->msg.add.gw));
  return ERR_OK;
  110c50:	e3a03000 	mov	r3, #0
}
  110c54:	e1a00003 	mov	r0, r3
  110c58:	e24bd004 	sub	sp, fp, #4
  110c5c:	e8bd8800 	pop	{fp, pc}

00110c60 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
  110c60:	e92d4800 	push	{fp, lr}
  110c64:	e28db004 	add	fp, sp, #4
  110c68:	e24dd010 	sub	sp, sp, #16
  110c6c:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110c70:	e51b3010 	ldr	r3, [fp, #-16]
  110c74:	e50b3008 	str	r3, [fp, #-8]

  if (msg->msg.common.errtfunc != NULL) {
  110c78:	e51b3008 	ldr	r3, [fp, #-8]
  110c7c:	e593300c 	ldr	r3, [r3, #12]
  110c80:	e3530000 	cmp	r3, #0
  110c84:	0a000007 	beq	110ca8 <netifapi_do_netif_common+0x48>
    return msg->msg.common.errtfunc(msg->netif);
  110c88:	e51b3008 	ldr	r3, [fp, #-8]
  110c8c:	e593300c 	ldr	r3, [r3, #12]
  110c90:	e51b2008 	ldr	r2, [fp, #-8]
  110c94:	e5922004 	ldr	r2, [r2, #4]
  110c98:	e1a00002 	mov	r0, r2
  110c9c:	e12fff33 	blx	r3
  110ca0:	e1a03000 	mov	r3, r0
  110ca4:	ea000006 	b	110cc4 <netifapi_do_netif_common+0x64>
  } else {
    msg->msg.common.voidfunc(msg->netif);
  110ca8:	e51b3008 	ldr	r3, [fp, #-8]
  110cac:	e5933008 	ldr	r3, [r3, #8]
  110cb0:	e51b2008 	ldr	r2, [fp, #-8]
  110cb4:	e5922004 	ldr	r2, [r2, #4]
  110cb8:	e1a00002 	mov	r0, r2
  110cbc:	e12fff33 	blx	r3
    return ERR_OK;
  110cc0:	e3a03000 	mov	r3, #0
  }
}
  110cc4:	e1a00003 	mov	r0, r3
  110cc8:	e24bd004 	sub	sp, fp, #4
  110ccc:	e8bd8800 	pop	{fp, pc}

00110cd0 <netifapi_netif_add>:
netifapi_netif_add(struct netif *netif,
#if LWIP_IPV4
                   const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
                   void *state, netif_init_fn init, netif_input_fn input)
{
  110cd0:	e92d4800 	push	{fp, lr}
  110cd4:	e28db004 	add	fp, sp, #4
  110cd8:	e24dd038 	sub	sp, sp, #56	; 0x38
  110cdc:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110ce0:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110ce4:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110ce8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

#if LWIP_IPV4
  if (ipaddr == NULL) {
  110cec:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110cf0:	e3530000 	cmp	r3, #0
  110cf4:	1a000002 	bne	110d04 <netifapi_netif_add+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110cf8:	e3093910 	movw	r3, #39184	; 0x9910
  110cfc:	e3403014 	movt	r3, #20
  110d00:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  110d04:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110d08:	e3530000 	cmp	r3, #0
  110d0c:	1a000002 	bne	110d1c <netifapi_netif_add+0x4c>
    netmask = IP4_ADDR_ANY4;
  110d10:	e3093910 	movw	r3, #39184	; 0x9910
  110d14:	e3403014 	movt	r3, #20
  110d18:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  110d1c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110d20:	e3530000 	cmp	r3, #0
  110d24:	1a000002 	bne	110d34 <netifapi_netif_add+0x64>
    gw = IP4_ADDR_ANY4;
  110d28:	e3093910 	movw	r3, #39184	; 0x9910
  110d2c:	e3403014 	movt	r3, #20
  110d30:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }
#endif /* LWIP_IPV4 */

  NETIFAPI_VAR_REF(msg).netif = netif;
  110d34:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110d38:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_IPV4
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  110d3c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110d40:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  110d44:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110d48:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  110d4c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110d50:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_IPV4 */
  NETIFAPI_VAR_REF(msg).msg.add.state   = state;
  110d54:	e59b3004 	ldr	r3, [fp, #4]
  110d58:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  NETIFAPI_VAR_REF(msg).msg.add.init    = init;
  110d5c:	e59b3008 	ldr	r3, [fp, #8]
  110d60:	e50b3010 	str	r3, [fp, #-16]
  NETIFAPI_VAR_REF(msg).msg.add.input   = input;
  110d64:	e59b300c 	ldr	r3, [fp, #12]
  110d68:	e50b300c 	str	r3, [fp, #-12]
  err = tcpip_api_call(netifapi_do_netif_add, &API_VAR_REF(msg).call);
  110d6c:	e24b3028 	sub	r3, fp, #40	; 0x28
  110d70:	e1a01003 	mov	r1, r3
  110d74:	e3000b84 	movw	r0, #2948	; 0xb84
  110d78:	e3400011 	movt	r0, #17
  110d7c:	eb001569 	bl	116328 <tcpip_api_call>
  110d80:	e1a03000 	mov	r3, r0
  110d84:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110d88:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110d8c:	e1a00003 	mov	r0, r3
  110d90:	e24bd004 	sub	sp, fp, #4
  110d94:	e8bd8800 	pop	{fp, pc}

00110d98 <netifapi_netif_set_addr>:
err_t
netifapi_netif_set_addr(struct netif *netif,
                        const ip4_addr_t *ipaddr,
                        const ip4_addr_t *netmask,
                        const ip4_addr_t *gw)
{
  110d98:	e92d4800 	push	{fp, lr}
  110d9c:	e28db004 	add	fp, sp, #4
  110da0:	e24dd038 	sub	sp, sp, #56	; 0x38
  110da4:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110da8:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110dac:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110db0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  if (ipaddr == NULL) {
  110db4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110db8:	e3530000 	cmp	r3, #0
  110dbc:	1a000002 	bne	110dcc <netifapi_netif_set_addr+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110dc0:	e3093910 	movw	r3, #39184	; 0x9910
  110dc4:	e3403014 	movt	r3, #20
  110dc8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  110dcc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110dd0:	e3530000 	cmp	r3, #0
  110dd4:	1a000002 	bne	110de4 <netifapi_netif_set_addr+0x4c>
    netmask = IP4_ADDR_ANY4;
  110dd8:	e3093910 	movw	r3, #39184	; 0x9910
  110ddc:	e3403014 	movt	r3, #20
  110de0:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  110de4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110de8:	e3530000 	cmp	r3, #0
  110dec:	1a000002 	bne	110dfc <netifapi_netif_set_addr+0x64>
    gw = IP4_ADDR_ANY4;
  110df0:	e3093910 	movw	r3, #39184	; 0x9910
  110df4:	e3403014 	movt	r3, #20
  110df8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }

  NETIFAPI_VAR_REF(msg).netif = netif;
  110dfc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110e00:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  110e04:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110e08:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  110e0c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110e10:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  110e14:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110e18:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = tcpip_api_call(netifapi_do_netif_set_addr, &API_VAR_REF(msg).call);
  110e1c:	e24b3028 	sub	r3, fp, #40	; 0x28
  110e20:	e1a01003 	mov	r1, r3
  110e24:	e3000c14 	movw	r0, #3092	; 0xc14
  110e28:	e3400011 	movt	r0, #17
  110e2c:	eb00153d 	bl	116328 <tcpip_api_call>
  110e30:	e1a03000 	mov	r3, r0
  110e34:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110e38:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110e3c:	e1a00003 	mov	r0, r3
  110e40:	e24bd004 	sub	sp, fp, #4
  110e44:	e8bd8800 	pop	{fp, pc}

00110e48 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                       netifapi_errt_fn errtfunc)
{
  110e48:	e92d4800 	push	{fp, lr}
  110e4c:	e28db004 	add	fp, sp, #4
  110e50:	e24dd038 	sub	sp, sp, #56	; 0x38
  110e54:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110e58:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110e5c:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
  110e60:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110e64:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
  110e68:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110e6c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
  110e70:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110e74:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
  110e78:	e24b3028 	sub	r3, fp, #40	; 0x28
  110e7c:	e1a01003 	mov	r1, r3
  110e80:	e3000c60 	movw	r0, #3168	; 0xc60
  110e84:	e3400011 	movt	r0, #17
  110e88:	eb001526 	bl	116328 <tcpip_api_call>
  110e8c:	e1a03000 	mov	r3, r0
  110e90:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110e94:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110e98:	e1a00003 	mov	r0, r3
  110e9c:	e24bd004 	sub	sp, fp, #4
  110ea0:	e8bd8800 	pop	{fp, pc}

00110ea4 <access_is_blocking>:
static u8_t lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen);
static u8_t lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen);

/* *RT-Thread* */
int access_is_blocking(u32_t flags, struct lwip_sock *sock)
{
  110ea4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110ea8:	e28db000 	add	fp, sp, #0
  110eac:	e24dd00c 	sub	sp, sp, #12
  110eb0:	e50b0008 	str	r0, [fp, #-8]
  110eb4:	e50b100c 	str	r1, [fp, #-12]
  return !((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn));
  110eb8:	e51b3008 	ldr	r3, [fp, #-8]
  110ebc:	e2033008 	and	r3, r3, #8
  110ec0:	e3530000 	cmp	r3, #0
  110ec4:	1a000007 	bne	110ee8 <access_is_blocking+0x44>
  110ec8:	e51b300c 	ldr	r3, [fp, #-12]
  110ecc:	e5933000 	ldr	r3, [r3]
  110ed0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  110ed4:	e2033002 	and	r3, r3, #2
  110ed8:	e3530000 	cmp	r3, #0
  110edc:	1a000001 	bne	110ee8 <access_is_blocking+0x44>
  110ee0:	e3a03001 	mov	r3, #1
  110ee4:	ea000000 	b	110eec <access_is_blocking+0x48>
  110ee8:	e3a03000 	mov	r3, #0
}
  110eec:	e1a00003 	mov	r0, r3
  110ef0:	e28bd000 	add	sp, fp, #0
  110ef4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110ef8:	e12fff1e 	bx	lr

00110efc <lwip_socket_thread_init>:
#endif /* LWIP_IPV4 && LWIP_IPV6 */

/** LWIP_NETCONN_SEM_PER_THREAD==1: initialize thread-local semaphore */
void
lwip_socket_thread_init(void)
{
  110efc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110f00:	e28db000 	add	fp, sp, #0
   netconn_thread_init();
}
  110f04:	e320f000 	nop	{0}
  110f08:	e28bd000 	add	sp, fp, #0
  110f0c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110f10:	e12fff1e 	bx	lr

00110f14 <lwip_socket_thread_cleanup>:

/** LWIP_NETCONN_SEM_PER_THREAD==1: destroy thread-local semaphore */
void
lwip_socket_thread_cleanup(void)
{
  110f14:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110f18:	e28db000 	add	fp, sp, #0
   netconn_thread_cleanup();
}
  110f1c:	e320f000 	nop	{0}
  110f20:	e28bd000 	add	sp, fp, #0
  110f24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110f28:	e12fff1e 	bx	lr

00110f2c <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
get_socket(int s)
{
  110f2c:	e92d4800 	push	{fp, lr}
  110f30:	e28db004 	add	fp, sp, #4
  110f34:	e24dd010 	sub	sp, sp, #16
  110f38:	e50b0010 	str	r0, [fp, #-16]
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
  110f3c:	e51b3010 	ldr	r3, [fp, #-16]
  110f40:	e3530000 	cmp	r3, #0
  110f44:	ba000002 	blt	110f54 <get_socket+0x28>
  110f48:	e51b3010 	ldr	r3, [fp, #-16]
  110f4c:	e3530007 	cmp	r3, #7
  110f50:	da000005 	ble	110f6c <get_socket+0x40>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  110f54:	eb009fe1 	bl	138ee0 <__errno_location>
  110f58:	e1a02000 	mov	r2, r0
  110f5c:	e3a03009 	mov	r3, #9
  110f60:	e5823000 	str	r3, [r2]
    return NULL;
  110f64:	e3a03000 	mov	r3, #0
  110f68:	ea000011 	b	110fb4 <get_socket+0x88>
  }

  sock = &sockets[s];
  110f6c:	e51b3010 	ldr	r3, [fp, #-16]
  110f70:	e3a02014 	mov	r2, #20
  110f74:	e0020392 	mul	r2, r2, r3
  110f78:	e30d3b90 	movw	r3, #56208	; 0xdb90
  110f7c:	e3403014 	movt	r3, #20
  110f80:	e0823003 	add	r3, r2, r3
  110f84:	e50b3008 	str	r3, [fp, #-8]

  if (!sock->conn) {
  110f88:	e51b3008 	ldr	r3, [fp, #-8]
  110f8c:	e5933000 	ldr	r3, [r3]
  110f90:	e3530000 	cmp	r3, #0
  110f94:	1a000005 	bne	110fb0 <get_socket+0x84>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  110f98:	eb009fd0 	bl	138ee0 <__errno_location>
  110f9c:	e1a02000 	mov	r2, r0
  110fa0:	e3a03009 	mov	r3, #9
  110fa4:	e5823000 	str	r3, [r2]
    return NULL;
  110fa8:	e3a03000 	mov	r3, #0
  110fac:	ea000000 	b	110fb4 <get_socket+0x88>
  }

  return sock;
  110fb0:	e51b3008 	ldr	r3, [fp, #-8]
}
  110fb4:	e1a00003 	mov	r0, r3
  110fb8:	e24bd004 	sub	sp, fp, #4
  110fbc:	e8bd8800 	pop	{fp, pc}

00110fc0 <tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int s)
{
  110fc0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110fc4:	e28db000 	add	fp, sp, #0
  110fc8:	e24dd00c 	sub	sp, sp, #12
  110fcc:	e50b0008 	str	r0, [fp, #-8]
  s -= LWIP_SOCKET_OFFSET;
  if ((s < 0) || (s >= NUM_SOCKETS)) {
  110fd0:	e51b3008 	ldr	r3, [fp, #-8]
  110fd4:	e3530000 	cmp	r3, #0
  110fd8:	ba000002 	blt	110fe8 <tryget_socket+0x28>
  110fdc:	e51b3008 	ldr	r3, [fp, #-8]
  110fe0:	e3530007 	cmp	r3, #7
  110fe4:	da000001 	ble	110ff0 <tryget_socket+0x30>
    return NULL;
  110fe8:	e3a03000 	mov	r3, #0
  110fec:	ea000010 	b	111034 <tryget_socket+0x74>
  }
  if (!sockets[s].conn) {
  110ff0:	e30d3b90 	movw	r3, #56208	; 0xdb90
  110ff4:	e3403014 	movt	r3, #20
  110ff8:	e51b2008 	ldr	r2, [fp, #-8]
  110ffc:	e3a01014 	mov	r1, #20
  111000:	e0020291 	mul	r2, r1, r2
  111004:	e0833002 	add	r3, r3, r2
  111008:	e5933000 	ldr	r3, [r3]
  11100c:	e3530000 	cmp	r3, #0
  111010:	1a000001 	bne	11101c <tryget_socket+0x5c>
    return NULL;
  111014:	e3a03000 	mov	r3, #0
  111018:	ea000005 	b	111034 <tryget_socket+0x74>
  }
  return &sockets[s];
  11101c:	e51b3008 	ldr	r3, [fp, #-8]
  111020:	e3a02014 	mov	r2, #20
  111024:	e0020392 	mul	r2, r2, r3
  111028:	e30d3b90 	movw	r3, #56208	; 0xdb90
  11102c:	e3403014 	movt	r3, #20
  111030:	e0823003 	add	r3, r2, r3
}
  111034:	e1a00003 	mov	r0, r3
  111038:	e28bd000 	add	sp, fp, #0
  11103c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  111040:	e12fff1e 	bx	lr

00111044 <lwip_tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
lwip_tryget_socket(int s)
{
  111044:	e92d4800 	push	{fp, lr}
  111048:	e28db004 	add	fp, sp, #4
  11104c:	e24dd008 	sub	sp, sp, #8
  111050:	e50b0008 	str	r0, [fp, #-8]
	return tryget_socket(s);
  111054:	e51b0008 	ldr	r0, [fp, #-8]
  111058:	ebffffd8 	bl	110fc0 <tryget_socket>
  11105c:	e1a03000 	mov	r3, r0
}
  111060:	e1a00003 	mov	r0, r3
  111064:	e24bd004 	sub	sp, fp, #4
  111068:	e8bd8800 	pop	{fp, pc}

0011106c <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
  11106c:	e92d4800 	push	{fp, lr}
  111070:	e28db004 	add	fp, sp, #4
  111074:	e24dd010 	sub	sp, sp, #16
  111078:	e50b0010 	str	r0, [fp, #-16]
  11107c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
  111080:	e3a03000 	mov	r3, #0
  111084:	e50b3008 	str	r3, [fp, #-8]
  111088:	ea000063 	b	11121c <alloc_socket+0x1b0>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
  11108c:	ebffc46a 	bl	10223c <rt_enter_critical>
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
  111090:	e30d3b90 	movw	r3, #56208	; 0xdb90
  111094:	e3403014 	movt	r3, #20
  111098:	e51b2008 	ldr	r2, [fp, #-8]
  11109c:	e3a01014 	mov	r1, #20
  1110a0:	e0020291 	mul	r2, r1, r2
  1110a4:	e0833002 	add	r3, r3, r2
  1110a8:	e5933000 	ldr	r3, [r3]
  1110ac:	e3530000 	cmp	r3, #0
  1110b0:	1a000055 	bne	11120c <alloc_socket+0x1a0>
  1110b4:	e30d3b90 	movw	r3, #56208	; 0xdb90
  1110b8:	e3403014 	movt	r3, #20
  1110bc:	e51b2008 	ldr	r2, [fp, #-8]
  1110c0:	e3a01014 	mov	r1, #20
  1110c4:	e0020291 	mul	r2, r1, r2
  1110c8:	e0833002 	add	r3, r3, r2
  1110cc:	e2833011 	add	r3, r3, #17
  1110d0:	e5d33000 	ldrb	r3, [r3]
  1110d4:	e3530000 	cmp	r3, #0
  1110d8:	1a00004b 	bne	11120c <alloc_socket+0x1a0>
      sockets[i].conn       = newconn;
  1110dc:	e30d3b90 	movw	r3, #56208	; 0xdb90
  1110e0:	e3403014 	movt	r3, #20
  1110e4:	e51b2008 	ldr	r2, [fp, #-8]
  1110e8:	e3a01014 	mov	r1, #20
  1110ec:	e0020291 	mul	r2, r1, r2
  1110f0:	e0833002 	add	r3, r3, r2
  1110f4:	e51b2010 	ldr	r2, [fp, #-16]
  1110f8:	e5832000 	str	r2, [r3]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
  1110fc:	ebffc454 	bl	102254 <rt_exit_critical>
      sockets[i].lastdata   = NULL;
  111100:	e30d3b90 	movw	r3, #56208	; 0xdb90
  111104:	e3403014 	movt	r3, #20
  111108:	e51b2008 	ldr	r2, [fp, #-8]
  11110c:	e3a01014 	mov	r1, #20
  111110:	e0020291 	mul	r2, r1, r2
  111114:	e0833002 	add	r3, r3, r2
  111118:	e2833004 	add	r3, r3, #4
  11111c:	e3a02000 	mov	r2, #0
  111120:	e5832000 	str	r2, [r3]
      sockets[i].lastoffset = 0;
  111124:	e30d3b90 	movw	r3, #56208	; 0xdb90
  111128:	e3403014 	movt	r3, #20
  11112c:	e51b2008 	ldr	r2, [fp, #-8]
  111130:	e3a01014 	mov	r1, #20
  111134:	e0020291 	mul	r2, r1, r2
  111138:	e0833002 	add	r3, r3, r2
  11113c:	e2833008 	add	r3, r3, #8
  111140:	e3a02000 	mov	r2, #0
  111144:	e1c320b0 	strh	r2, [r3]
      sockets[i].rcvevent   = 0;
  111148:	e30d3b90 	movw	r3, #56208	; 0xdb90
  11114c:	e3403014 	movt	r3, #20
  111150:	e51b2008 	ldr	r2, [fp, #-8]
  111154:	e3a01014 	mov	r1, #20
  111158:	e0020291 	mul	r2, r1, r2
  11115c:	e0833002 	add	r3, r3, r2
  111160:	e283300a 	add	r3, r3, #10
  111164:	e3a02000 	mov	r2, #0
  111168:	e1c320b0 	strh	r2, [r3]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
  11116c:	e51b3010 	ldr	r3, [fp, #-16]
  111170:	e5933000 	ldr	r3, [r3]
  111174:	e20330f0 	and	r3, r3, #240	; 0xf0
  111178:	e3530010 	cmp	r3, #16
  11117c:	1a000002 	bne	11118c <alloc_socket+0x120>
  111180:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111184:	e3530000 	cmp	r3, #0
  111188:	0a000001 	beq	111194 <alloc_socket+0x128>
  11118c:	e3a03001 	mov	r3, #1
  111190:	ea000000 	b	111198 <alloc_socket+0x12c>
  111194:	e3a03000 	mov	r3, #0
  111198:	e6ff2073 	uxth	r2, r3
  11119c:	e30d3b90 	movw	r3, #56208	; 0xdb90
  1111a0:	e3403014 	movt	r3, #20
  1111a4:	e51b1008 	ldr	r1, [fp, #-8]
  1111a8:	e3a00014 	mov	r0, #20
  1111ac:	e0010190 	mul	r1, r0, r1
  1111b0:	e0833001 	add	r3, r3, r1
  1111b4:	e283300c 	add	r3, r3, #12
  1111b8:	e1c320b0 	strh	r2, [r3]
      sockets[i].errevent   = 0;
  1111bc:	e30d3b90 	movw	r3, #56208	; 0xdb90
  1111c0:	e3403014 	movt	r3, #20
  1111c4:	e51b2008 	ldr	r2, [fp, #-8]
  1111c8:	e3a01014 	mov	r1, #20
  1111cc:	e0020291 	mul	r2, r1, r2
  1111d0:	e0833002 	add	r3, r3, r2
  1111d4:	e283300e 	add	r3, r3, #14
  1111d8:	e3a02000 	mov	r2, #0
  1111dc:	e1c320b0 	strh	r2, [r3]
      sockets[i].err        = 0;
  1111e0:	e30d3b90 	movw	r3, #56208	; 0xdb90
  1111e4:	e3403014 	movt	r3, #20
  1111e8:	e51b2008 	ldr	r2, [fp, #-8]
  1111ec:	e3a01014 	mov	r1, #20
  1111f0:	e0020291 	mul	r2, r1, r2
  1111f4:	e0833002 	add	r3, r3, r2
  1111f8:	e2833010 	add	r3, r3, #16
  1111fc:	e3a02000 	mov	r2, #0
  111200:	e5c32000 	strb	r2, [r3]
      return i + LWIP_SOCKET_OFFSET;
  111204:	e51b3008 	ldr	r3, [fp, #-8]
  111208:	ea000007 	b	11122c <alloc_socket+0x1c0>
    }
    SYS_ARCH_UNPROTECT(lev);
  11120c:	ebffc410 	bl	102254 <rt_exit_critical>
  for (i = 0; i < NUM_SOCKETS; ++i) {
  111210:	e51b3008 	ldr	r3, [fp, #-8]
  111214:	e2833001 	add	r3, r3, #1
  111218:	e50b3008 	str	r3, [fp, #-8]
  11121c:	e51b3008 	ldr	r3, [fp, #-8]
  111220:	e3530007 	cmp	r3, #7
  111224:	daffff98 	ble	11108c <alloc_socket+0x20>
  }
  return -1;
  111228:	e3e03000 	mvn	r3, #0
}
  11122c:	e1a00003 	mov	r0, r3
  111230:	e24bd004 	sub	sp, fp, #4
  111234:	e8bd8800 	pop	{fp, pc}

00111238 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
  111238:	e92d4800 	push	{fp, lr}
  11123c:	e28db004 	add	fp, sp, #4
  111240:	e24dd010 	sub	sp, sp, #16
  111244:	e50b0010 	str	r0, [fp, #-16]
  111248:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  void *lastdata;

  lastdata         = sock->lastdata;
  11124c:	e51b3010 	ldr	r3, [fp, #-16]
  111250:	e5933004 	ldr	r3, [r3, #4]
  111254:	e50b3008 	str	r3, [fp, #-8]
  sock->lastdata   = NULL;
  111258:	e51b3010 	ldr	r3, [fp, #-16]
  11125c:	e3a02000 	mov	r2, #0
  111260:	e5832004 	str	r2, [r3, #4]
  sock->lastoffset = 0;
  111264:	e51b3010 	ldr	r3, [fp, #-16]
  111268:	e3a02000 	mov	r2, #0
  11126c:	e1c320b8 	strh	r2, [r3, #8]
  sock->err        = 0;
  111270:	e51b3010 	ldr	r3, [fp, #-16]
  111274:	e3a02000 	mov	r2, #0
  111278:	e5c32010 	strb	r2, [r3, #16]

  /* Protect socket array */
  SYS_ARCH_SET(sock->conn, NULL);
  11127c:	ebffc3ee 	bl	10223c <rt_enter_critical>
  111280:	e51b3010 	ldr	r3, [fp, #-16]
  111284:	e3a02000 	mov	r2, #0
  111288:	e5832000 	str	r2, [r3]
  11128c:	ebffc3f0 	bl	102254 <rt_exit_critical>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (lastdata != NULL) {
  111290:	e51b3008 	ldr	r3, [fp, #-8]
  111294:	e3530000 	cmp	r3, #0
  111298:	0a000007 	beq	1112bc <free_socket+0x84>
    if (is_tcp) {
  11129c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1112a0:	e3530000 	cmp	r3, #0
  1112a4:	0a000002 	beq	1112b4 <free_socket+0x7c>
      pbuf_free((struct pbuf *)lastdata);
  1112a8:	e51b0008 	ldr	r0, [fp, #-8]
  1112ac:	eb002702 	bl	11aebc <pbuf_free>
    } else {
      netbuf_delete((struct netbuf *)lastdata);
    }
  }
}
  1112b0:	ea000001 	b	1112bc <free_socket+0x84>
      netbuf_delete((struct netbuf *)lastdata);
  1112b4:	e51b0008 	ldr	r0, [fp, #-8]
  1112b8:	ebfffb1e 	bl	10ff38 <netbuf_delete>
}
  1112bc:	e320f000 	nop	{0}
  1112c0:	e24bd004 	sub	sp, fp, #4
  1112c4:	e8bd8800 	pop	{fp, pc}

001112c8 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  1112c8:	e92d4810 	push	{r4, fp, lr}
  1112cc:	e28db008 	add	fp, sp, #8
  1112d0:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  1112d4:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  1112d8:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  1112dc:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
  1112e0:	e3a03000 	mov	r3, #0
  1112e4:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
  int newsock;
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
  1112e8:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  1112ec:	ebffff0e 	bl	110f2c <get_socket>
  1112f0:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  1112f4:	e51b3010 	ldr	r3, [fp, #-16]
  1112f8:	e3530000 	cmp	r3, #0
  1112fc:	1a000001 	bne	111308 <lwip_accept+0x40>
    return -1;
  111300:	e3e03000 	mvn	r3, #0
  111304:	ea0000fa 	b	1116f4 <lwip_accept+0x42c>
  }

  if (netconn_is_nonblocking(sock->conn) && (sock->rcvevent <= 0)) {
  111308:	e51b3010 	ldr	r3, [fp, #-16]
  11130c:	e5933000 	ldr	r3, [r3]
  111310:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  111314:	e2033002 	and	r3, r3, #2
  111318:	e3530000 	cmp	r3, #0
  11131c:	0a000009 	beq	111348 <lwip_accept+0x80>
  111320:	e51b3010 	ldr	r3, [fp, #-16]
  111324:	e1d330fa 	ldrsh	r3, [r3, #10]
  111328:	e3530000 	cmp	r3, #0
  11132c:	ca000005 	bgt	111348 <lwip_accept+0x80>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): returning EWOULDBLOCK\n", s));
    set_errno(EWOULDBLOCK);
  111330:	eb009eea 	bl	138ee0 <__errno_location>
  111334:	e1a02000 	mov	r2, r0
  111338:	e3a0300b 	mov	r3, #11
  11133c:	e5823000 	str	r3, [r2]
    return -1;
  111340:	e3e03000 	mvn	r3, #0
  111344:	ea0000ea 	b	1116f4 <lwip_accept+0x42c>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
  111348:	e51b3010 	ldr	r3, [fp, #-16]
  11134c:	e5933000 	ldr	r3, [r3]
  111350:	e24b2038 	sub	r2, fp, #56	; 0x38
  111354:	e1a01002 	mov	r1, r2
  111358:	e1a00003 	mov	r0, r3
  11135c:	ebffe921 	bl	10b7e8 <netconn_accept>
  111360:	e1a03000 	mov	r3, r0
  111364:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  111368:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11136c:	e3530000 	cmp	r3, #0
  111370:	0a000035 	beq	11144c <lwip_accept+0x184>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  111374:	e51b3010 	ldr	r3, [fp, #-16]
  111378:	e5933000 	ldr	r3, [r3]
  11137c:	e5933000 	ldr	r3, [r3]
  111380:	e20330f0 	and	r3, r3, #240	; 0xf0
  111384:	e3530010 	cmp	r3, #16
  111388:	0a00000d 	beq	1113c4 <lwip_accept+0xfc>
      sock_set_errno(sock, EOPNOTSUPP);
  11138c:	e3a0305f 	mov	r3, #95	; 0x5f
  111390:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  111394:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  111398:	e6ef2073 	uxtb	r2, r3
  11139c:	e51b3010 	ldr	r3, [fp, #-16]
  1113a0:	e5c32010 	strb	r2, [r3, #16]
  1113a4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1113a8:	e3530000 	cmp	r3, #0
  1113ac:	0a000024 	beq	111444 <lwip_accept+0x17c>
  1113b0:	eb009eca 	bl	138ee0 <__errno_location>
  1113b4:	e1a02000 	mov	r2, r0
  1113b8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1113bc:	e5823000 	str	r3, [r2]
  1113c0:	ea00001f 	b	111444 <lwip_accept+0x17c>
    } else if (err == ERR_CLSD) {
  1113c4:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1113c8:	e373000f 	cmn	r3, #15
  1113cc:	1a00000d 	bne	111408 <lwip_accept+0x140>
      sock_set_errno(sock, EINVAL);
  1113d0:	e3a03016 	mov	r3, #22
  1113d4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  1113d8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1113dc:	e6ef2073 	uxtb	r2, r3
  1113e0:	e51b3010 	ldr	r3, [fp, #-16]
  1113e4:	e5c32010 	strb	r2, [r3, #16]
  1113e8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1113ec:	e3530000 	cmp	r3, #0
  1113f0:	0a000013 	beq	111444 <lwip_accept+0x17c>
  1113f4:	eb009eb9 	bl	138ee0 <__errno_location>
  1113f8:	e1a02000 	mov	r2, r0
  1113fc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111400:	e5823000 	str	r3, [r2]
  111404:	ea00000e 	b	111444 <lwip_accept+0x17c>
    } else {
      sock_set_errno(sock, err_to_errno(err));
  111408:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11140c:	e1a00003 	mov	r0, r3
  111410:	ebfffa9d 	bl	10fe8c <err_to_errno>
  111414:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  111418:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11141c:	e6ef2073 	uxtb	r2, r3
  111420:	e51b3010 	ldr	r3, [fp, #-16]
  111424:	e5c32010 	strb	r2, [r3, #16]
  111428:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11142c:	e3530000 	cmp	r3, #0
  111430:	0a000003 	beq	111444 <lwip_accept+0x17c>
  111434:	eb009ea9 	bl	138ee0 <__errno_location>
  111438:	e1a02000 	mov	r2, r0
  11143c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111440:	e5823000 	str	r3, [r2]
    }
    return -1;
  111444:	e3e03000 	mvn	r3, #0
  111448:	ea0000a9 	b	1116f4 <lwip_accept+0x42c>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
  11144c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111450:	e3530000 	cmp	r3, #0
  111454:	1a000006 	bne	111474 <lwip_accept+0x1ac>
  111458:	e3060d68 	movw	r0, #28008	; 0x6d68
  11145c:	e3400014 	movt	r0, #20
  111460:	ebffc72b 	bl	103114 <rt_kprintf>
  111464:	e300120a 	movw	r1, #522	; 0x20a
  111468:	e3060d78 	movw	r0, #28024	; 0x6d78
  11146c:	e3400014 	movt	r0, #20
  111470:	ebffe71e 	bl	10b0f0 <sys_arch_assert>

  newsock = alloc_socket(newconn, 1);
  111474:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111478:	e3a01001 	mov	r1, #1
  11147c:	e1a00003 	mov	r0, r3
  111480:	ebfffef9 	bl	11106c <alloc_socket>
  111484:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  if (newsock == -1) {
  111488:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11148c:	e3730001 	cmn	r3, #1
  111490:	1a000011 	bne	1114dc <lwip_accept+0x214>
    netconn_delete(newconn);
  111494:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111498:	e1a00003 	mov	r0, r3
  11149c:	ebffe7e3 	bl	10b430 <netconn_delete>
    sock_set_errno(sock, ENFILE);
  1114a0:	e3a03017 	mov	r3, #23
  1114a4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1114a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1114ac:	e6ef2073 	uxtb	r2, r3
  1114b0:	e51b3010 	ldr	r3, [fp, #-16]
  1114b4:	e5c32010 	strb	r2, [r3, #16]
  1114b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1114bc:	e3530000 	cmp	r3, #0
  1114c0:	0a000003 	beq	1114d4 <lwip_accept+0x20c>
  1114c4:	eb009e85 	bl	138ee0 <__errno_location>
  1114c8:	e1a02000 	mov	r2, r0
  1114cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1114d0:	e5823000 	str	r3, [r2]
    return -1;
  1114d4:	e3e03000 	mvn	r3, #0
  1114d8:	ea000085 	b	1116f4 <lwip_accept+0x42c>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
  1114dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1114e0:	e3530000 	cmp	r3, #0
  1114e4:	ba000002 	blt	1114f4 <lwip_accept+0x22c>
  1114e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1114ec:	e3530007 	cmp	r3, #7
  1114f0:	da000006 	ble	111510 <lwip_accept+0x248>
  1114f4:	e3060da8 	movw	r0, #28072	; 0x6da8
  1114f8:	e3400014 	movt	r0, #20
  1114fc:	ebffc704 	bl	103114 <rt_kprintf>
  111500:	e3001212 	movw	r1, #530	; 0x212
  111504:	e3060d78 	movw	r0, #28024	; 0x6d78
  111508:	e3400014 	movt	r0, #20
  11150c:	ebffe6f7 	bl	10b0f0 <sys_arch_assert>
  // LWIP_ASSERT("newconn->callback == event_callback", newconn->callback == event_callback);
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
  111510:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111514:	e3a02014 	mov	r2, #20
  111518:	e0020392 	mul	r2, r2, r3
  11151c:	e30d3b90 	movw	r3, #56208	; 0xdb90
  111520:	e3403014 	movt	r3, #20
  111524:	e0823003 	add	r3, r2, r3
  111528:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
  11152c:	ebffc342 	bl	10223c <rt_enter_critical>
  nsock->rcvevent += (s16_t)(-1 - newconn->socket);
  111530:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111534:	e1d330fa 	ldrsh	r3, [r3, #10]
  111538:	e6ff2073 	uxth	r2, r3
  11153c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111540:	e593301c 	ldr	r3, [r3, #28]
  111544:	e6ff3073 	uxth	r3, r3
  111548:	e0423003 	sub	r3, r2, r3
  11154c:	e6ff3073 	uxth	r3, r3
  111550:	e2433001 	sub	r3, r3, #1
  111554:	e6ff3073 	uxth	r3, r3
  111558:	e6bf2073 	sxth	r2, r3
  11155c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111560:	e1c320ba 	strh	r2, [r3, #10]
  newconn->socket = newsock;
  111564:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111568:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11156c:	e583201c 	str	r2, [r3, #28]
  SYS_ARCH_UNPROTECT(lev);
  111570:	ebffc337 	bl	102254 <rt_exit_critical>

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if (addr != NULL) {
  111574:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  111578:	e3530000 	cmp	r3, #0
  11157c:	0a00004e 	beq	1116bc <lwip_accept+0x3f4>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
  111580:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  111584:	e24b203e 	sub	r2, fp, #62	; 0x3e
  111588:	e24b103c 	sub	r1, fp, #60	; 0x3c
  11158c:	e3a03000 	mov	r3, #0
  111590:	ebffe7c6 	bl	10b4b0 <netconn_getaddr>
  111594:	e1a03000 	mov	r3, r0
  111598:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    if (err != ERR_OK) {
  11159c:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1115a0:	e3530000 	cmp	r3, #0
  1115a4:	0a000016 	beq	111604 <lwip_accept+0x33c>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
  1115a8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1115ac:	e1a00003 	mov	r0, r3
  1115b0:	ebffe79e 	bl	10b430 <netconn_delete>
      free_socket(nsock, 1);
  1115b4:	e3a01001 	mov	r1, #1
  1115b8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1115bc:	ebffff1d 	bl	111238 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
  1115c0:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1115c4:	e1a00003 	mov	r0, r3
  1115c8:	ebfffa2f 	bl	10fe8c <err_to_errno>
  1115cc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1115d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1115d4:	e6ef2073 	uxtb	r2, r3
  1115d8:	e51b3010 	ldr	r3, [fp, #-16]
  1115dc:	e5c32010 	strb	r2, [r3, #16]
  1115e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1115e4:	e3530000 	cmp	r3, #0
  1115e8:	0a000003 	beq	1115fc <lwip_accept+0x334>
  1115ec:	eb009e3b 	bl	138ee0 <__errno_location>
  1115f0:	e1a02000 	mov	r2, r0
  1115f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1115f8:	e5823000 	str	r3, [r2]
      return -1;
  1115fc:	e3e03000 	mvn	r3, #0
  111600:	ea00003b 	b	1116f4 <lwip_accept+0x42c>
    }
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
  111604:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111608:	e3530000 	cmp	r3, #0
  11160c:	1a000006 	bne	11162c <lwip_accept+0x364>
  111610:	e3060dc0 	movw	r0, #28096	; 0x6dc0
  111614:	e3400014 	movt	r0, #20
  111618:	ebffc6bd 	bl	103114 <rt_kprintf>
  11161c:	e300122e 	movw	r1, #558	; 0x22e
  111620:	e3060d78 	movw	r0, #28024	; 0x6d78
  111624:	e3400014 	movt	r0, #20
  111628:	ebffe6b0 	bl	10b0f0 <sys_arch_assert>

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
  11162c:	e24b3050 	sub	r3, fp, #80	; 0x50
  111630:	e3a02010 	mov	r2, #16
  111634:	e5c32000 	strb	r2, [r3]
  111638:	e24b3050 	sub	r3, fp, #80	; 0x50
  11163c:	e3a02002 	mov	r2, #2
  111640:	e5c32001 	strb	r2, [r3, #1]
  111644:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  111648:	e24b4050 	sub	r4, fp, #80	; 0x50
  11164c:	e1a00003 	mov	r0, r3
  111650:	eb0013e2 	bl	1165e0 <lwip_htons>
  111654:	e1a03000 	mov	r3, r0
  111658:	e1c430b2 	strh	r3, [r4, #2]
  11165c:	e24b3050 	sub	r3, fp, #80	; 0x50
  111660:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  111664:	e5832004 	str	r2, [r3, #4]
  111668:	e24b3050 	sub	r3, fp, #80	; 0x50
  11166c:	e2833008 	add	r3, r3, #8
  111670:	e3a02008 	mov	r2, #8
  111674:	e3a01000 	mov	r1, #0
  111678:	e1a00003 	mov	r0, r3
  11167c:	eb00befe 	bl	14127c <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
  111680:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111684:	e5933000 	ldr	r3, [r3]
  111688:	e55b2050 	ldrb	r2, [fp, #-80]	; 0xffffffb0
  11168c:	e1530002 	cmp	r3, r2
  111690:	9a000003 	bls	1116a4 <lwip_accept+0x3dc>
      *addrlen = tempaddr.sa.sa_len;
  111694:	e55b3050 	ldrb	r3, [fp, #-80]	; 0xffffffb0
  111698:	e1a02003 	mov	r2, r3
  11169c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  1116a0:	e5832000 	str	r2, [r3]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
  1116a4:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  1116a8:	e5932000 	ldr	r2, [r3]
  1116ac:	e24b3050 	sub	r3, fp, #80	; 0x50
  1116b0:	e1a01003 	mov	r1, r3
  1116b4:	e51b005c 	ldr	r0, [fp, #-92]	; 0xffffffa4
  1116b8:	eb00bdb7 	bl	140d9c <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
  1116bc:	e3a03000 	mov	r3, #0
  1116c0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  1116c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1116c8:	e6ef2073 	uxtb	r2, r3
  1116cc:	e51b3010 	ldr	r3, [fp, #-16]
  1116d0:	e5c32010 	strb	r2, [r3, #16]
  1116d4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1116d8:	e3530000 	cmp	r3, #0
  1116dc:	0a000003 	beq	1116f0 <lwip_accept+0x428>
  1116e0:	eb009dfe 	bl	138ee0 <__errno_location>
  1116e4:	e1a02000 	mov	r2, r0
  1116e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1116ec:	e5823000 	str	r3, [r2]
  return newsock;
  1116f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  1116f4:	e1a00003 	mov	r0, r3
  1116f8:	e24bd008 	sub	sp, fp, #8
  1116fc:	e8bd8810 	pop	{r4, fp, pc}

00111700 <lwip_bind>:
#include <stdio.h>
int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
  111700:	e92d4800 	push	{fp, lr}
  111704:	e28db004 	add	fp, sp, #4
  111708:	e24dd028 	sub	sp, sp, #40	; 0x28
  11170c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  111710:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  111714:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
  111718:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  11171c:	ebfffe02 	bl	110f2c <get_socket>
  111720:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  111724:	e51b3008 	ldr	r3, [fp, #-8]
  111728:	e3530000 	cmp	r3, #0
  11172c:	1a000001 	bne	111738 <lwip_bind+0x38>
    return -1;
  111730:	e3e03000 	mvn	r3, #0
  111734:	ea000054 	b	11188c <lwip_bind+0x18c>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
  111738:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11173c:	e3530010 	cmp	r3, #16
  111740:	1a000007 	bne	111764 <lwip_bind+0x64>
  111744:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111748:	e5d33001 	ldrb	r3, [r3, #1]
  11174c:	e3530002 	cmp	r3, #2
  111750:	1a000003 	bne	111764 <lwip_bind+0x64>
  111754:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111758:	e2033003 	and	r3, r3, #3
  11175c:	e3530000 	cmp	r3, #0
  111760:	0a000016 	beq	1117c0 <lwip_bind+0xc0>
  111764:	e3060ddc 	movw	r0, #28124	; 0x6ddc
  111768:	e3400014 	movt	r0, #20
  11176c:	ebffc668 	bl	103114 <rt_kprintf>
  111770:	e3001257 	movw	r1, #599	; 0x257
  111774:	e3060d78 	movw	r0, #28024	; 0x6d78
  111778:	e3400014 	movt	r0, #20
  11177c:	ebffe65b 	bl	10b0f0 <sys_arch_assert>
  111780:	e3e0000f 	mvn	r0, #15
  111784:	ebfff9c0 	bl	10fe8c <err_to_errno>
  111788:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11178c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111790:	e6ef2073 	uxtb	r2, r3
  111794:	e51b3008 	ldr	r3, [fp, #-8]
  111798:	e5c32010 	strb	r2, [r3, #16]
  11179c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1117a0:	e3530000 	cmp	r3, #0
  1117a4:	0a000003 	beq	1117b8 <lwip_bind+0xb8>
  1117a8:	eb009dcc 	bl	138ee0 <__errno_location>
  1117ac:	e1a02000 	mov	r2, r0
  1117b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1117b4:	e5823000 	str	r3, [r2]
  1117b8:	e3e03000 	mvn	r3, #0
  1117bc:	ea000032 	b	11188c <lwip_bind+0x18c>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
  1117c0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1117c4:	e5933004 	ldr	r3, [r3, #4]
  1117c8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1117cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1117d0:	e1d330b2 	ldrh	r3, [r3, #2]
  1117d4:	e1a00003 	mov	r0, r3
  1117d8:	eb001380 	bl	1165e0 <lwip_htons>
  1117dc:	e1a03000 	mov	r3, r0
  1117e0:	e14b30ba 	strh	r3, [fp, #-10]
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
  1117e4:	e51b3008 	ldr	r3, [fp, #-8]
  1117e8:	e5933000 	ldr	r3, [r3]
  1117ec:	e15b20ba 	ldrh	r2, [fp, #-10]
  1117f0:	e24b101c 	sub	r1, fp, #28
  1117f4:	e1a00003 	mov	r0, r3
  1117f8:	ebffe76a 	bl	10b5a8 <netconn_bind>
  1117fc:	e1a03000 	mov	r3, r0
  111800:	e54b300b 	strb	r3, [fp, #-11]

  if (err != ERR_OK) {
  111804:	e15b30db 	ldrsb	r3, [fp, #-11]
  111808:	e3530000 	cmp	r3, #0
  11180c:	0a000010 	beq	111854 <lwip_bind+0x154>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  111810:	e15b30db 	ldrsb	r3, [fp, #-11]
  111814:	e1a00003 	mov	r0, r3
  111818:	ebfff99b 	bl	10fe8c <err_to_errno>
  11181c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111820:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111824:	e6ef2073 	uxtb	r2, r3
  111828:	e51b3008 	ldr	r3, [fp, #-8]
  11182c:	e5c32010 	strb	r2, [r3, #16]
  111830:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111834:	e3530000 	cmp	r3, #0
  111838:	0a000003 	beq	11184c <lwip_bind+0x14c>
  11183c:	eb009da7 	bl	138ee0 <__errno_location>
  111840:	e1a02000 	mov	r2, r0
  111844:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111848:	e5823000 	str	r3, [r2]
    return -1;
  11184c:	e3e03000 	mvn	r3, #0
  111850:	ea00000d 	b	11188c <lwip_bind+0x18c>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  111854:	e3a03000 	mov	r3, #0
  111858:	e50b3010 	str	r3, [fp, #-16]
  11185c:	e51b3010 	ldr	r3, [fp, #-16]
  111860:	e6ef2073 	uxtb	r2, r3
  111864:	e51b3008 	ldr	r3, [fp, #-8]
  111868:	e5c32010 	strb	r2, [r3, #16]
  11186c:	e51b3010 	ldr	r3, [fp, #-16]
  111870:	e3530000 	cmp	r3, #0
  111874:	0a000003 	beq	111888 <lwip_bind+0x188>
  111878:	eb009d98 	bl	138ee0 <__errno_location>
  11187c:	e1a02000 	mov	r2, r0
  111880:	e51b3010 	ldr	r3, [fp, #-16]
  111884:	e5823000 	str	r3, [r2]
  return 0;
  111888:	e3a03000 	mov	r3, #0
}
  11188c:	e1a00003 	mov	r0, r3
  111890:	e24bd004 	sub	sp, fp, #4
  111894:	e8bd8800 	pop	{fp, pc}

00111898 <lwip_close>:

int
lwip_close(int s)
{
  111898:	e92d4800 	push	{fp, lr}
  11189c:	e28db004 	add	fp, sp, #4
  1118a0:	e24dd018 	sub	sp, sp, #24
  1118a4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock;
  int is_tcp = 0;
  1118a8:	e3a03000 	mov	r3, #0
  1118ac:	e50b3008 	str	r3, [fp, #-8]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
  1118b0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1118b4:	ebfffd9c 	bl	110f2c <get_socket>
  1118b8:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  1118bc:	e51b300c 	ldr	r3, [fp, #-12]
  1118c0:	e3530000 	cmp	r3, #0
  1118c4:	1a000001 	bne	1118d0 <lwip_close+0x38>
    return -1;
  1118c8:	e3e03000 	mvn	r3, #0
  1118cc:	ea000038 	b	1119b4 <lwip_close+0x11c>
  }

  if (sock->conn != NULL) {
  1118d0:	e51b300c 	ldr	r3, [fp, #-12]
  1118d4:	e5933000 	ldr	r3, [r3]
  1118d8:	e3530000 	cmp	r3, #0
  1118dc:	0a000009 	beq	111908 <lwip_close+0x70>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
  1118e0:	e51b300c 	ldr	r3, [fp, #-12]
  1118e4:	e5933000 	ldr	r3, [r3]
  1118e8:	e5933000 	ldr	r3, [r3]
  1118ec:	e20330f0 	and	r3, r3, #240	; 0xf0
  1118f0:	e3530010 	cmp	r3, #16
  1118f4:	03a03001 	moveq	r3, #1
  1118f8:	13a03000 	movne	r3, #0
  1118fc:	e6ef3073 	uxtb	r3, r3
  111900:	e50b3008 	str	r3, [fp, #-8]
  111904:	ea00000a 	b	111934 <lwip_close+0x9c>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
  111908:	e51b300c 	ldr	r3, [fp, #-12]
  11190c:	e5933004 	ldr	r3, [r3, #4]
  111910:	e3530000 	cmp	r3, #0
  111914:	0a000006 	beq	111934 <lwip_close+0x9c>
  111918:	e3060df8 	movw	r0, #28152	; 0x6df8
  11191c:	e3400014 	movt	r0, #20
  111920:	ebffc5fb 	bl	103114 <rt_kprintf>
  111924:	e3001285 	movw	r1, #645	; 0x285
  111928:	e3060d78 	movw	r0, #28024	; 0x6d78
  11192c:	e3400014 	movt	r0, #20
  111930:	ebffe5ee 	bl	10b0f0 <sys_arch_assert>
  }

#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
  111934:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  111938:	eb001126 	bl	115dd8 <lwip_socket_drop_registered_memberships>
#endif /* LWIP_IGMP */

  err = netconn_delete(sock->conn);
  11193c:	e51b300c 	ldr	r3, [fp, #-12]
  111940:	e5933000 	ldr	r3, [r3]
  111944:	e1a00003 	mov	r0, r3
  111948:	ebffe6b8 	bl	10b430 <netconn_delete>
  11194c:	e1a03000 	mov	r3, r0
  111950:	e54b300d 	strb	r3, [fp, #-13]
  if (err != ERR_OK) {
  111954:	e15b30dd 	ldrsb	r3, [fp, #-13]
  111958:	e3530000 	cmp	r3, #0
  11195c:	0a000010 	beq	1119a4 <lwip_close+0x10c>
    sock_set_errno(sock, err_to_errno(err));
  111960:	e15b30dd 	ldrsb	r3, [fp, #-13]
  111964:	e1a00003 	mov	r0, r3
  111968:	ebfff947 	bl	10fe8c <err_to_errno>
  11196c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111970:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111974:	e6ef2073 	uxtb	r2, r3
  111978:	e51b300c 	ldr	r3, [fp, #-12]
  11197c:	e5c32010 	strb	r2, [r3, #16]
  111980:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111984:	e3530000 	cmp	r3, #0
  111988:	0a000003 	beq	11199c <lwip_close+0x104>
  11198c:	eb009d53 	bl	138ee0 <__errno_location>
  111990:	e1a02000 	mov	r2, r0
  111994:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111998:	e5823000 	str	r3, [r2]
    return -1;
  11199c:	e3e03000 	mvn	r3, #0
  1119a0:	ea000003 	b	1119b4 <lwip_close+0x11c>
  }

  free_socket(sock, is_tcp);
  1119a4:	e51b1008 	ldr	r1, [fp, #-8]
  1119a8:	e51b000c 	ldr	r0, [fp, #-12]
  1119ac:	ebfffe21 	bl	111238 <free_socket>
  set_errno(0);
  return 0;
  1119b0:	e3a03000 	mov	r3, #0
}
  1119b4:	e1a00003 	mov	r0, r3
  1119b8:	e24bd004 	sub	sp, fp, #4
  1119bc:	e8bd8800 	pop	{fp, pc}

001119c0 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
  1119c0:	e92d4800 	push	{fp, lr}
  1119c4:	e28db004 	add	fp, sp, #4
  1119c8:	e24dd030 	sub	sp, sp, #48	; 0x30
  1119cc:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1119d0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1119d4:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
  1119d8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1119dc:	ebfffd52 	bl	110f2c <get_socket>
  1119e0:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  1119e4:	e51b300c 	ldr	r3, [fp, #-12]
  1119e8:	e3530000 	cmp	r3, #0
  1119ec:	1a000001 	bne	1119f8 <lwip_connect+0x38>
    return -1;
  1119f0:	e3e03000 	mvn	r3, #0
  1119f4:	ea000063 	b	111b88 <lwip_connect+0x1c8>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
  1119f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1119fc:	e5d33001 	ldrb	r3, [r3, #1]
  111a00:	e3530000 	cmp	r3, #0
  111a04:	1a000006 	bne	111a24 <lwip_connect+0x64>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
  111a08:	e51b300c 	ldr	r3, [fp, #-12]
  111a0c:	e5933000 	ldr	r3, [r3]
  111a10:	e1a00003 	mov	r0, r3
  111a14:	ebffe737 	bl	10b6f8 <netconn_disconnect>
  111a18:	e1a03000 	mov	r3, r0
  111a1c:	e54b3005 	strb	r3, [fp, #-5]
  111a20:	ea000036 	b	111b00 <lwip_connect+0x140>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
  111a24:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111a28:	e3530010 	cmp	r3, #16
  111a2c:	1a00000b 	bne	111a60 <lwip_connect+0xa0>
  111a30:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111a34:	e5d33001 	ldrb	r3, [r3, #1]
  111a38:	e3530000 	cmp	r3, #0
  111a3c:	0a000003 	beq	111a50 <lwip_connect+0x90>
  111a40:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111a44:	e5d33001 	ldrb	r3, [r3, #1]
  111a48:	e3530002 	cmp	r3, #2
  111a4c:	1a000003 	bne	111a60 <lwip_connect+0xa0>
  111a50:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111a54:	e2033003 	and	r3, r3, #3
  111a58:	e3530000 	cmp	r3, #0
  111a5c:	0a000016 	beq	111abc <lwip_connect+0xfc>
  111a60:	e3060e10 	movw	r0, #28176	; 0x6e10
  111a64:	e3400014 	movt	r0, #20
  111a68:	ebffc5a9 	bl	103114 <rt_kprintf>
  111a6c:	e3a01fad 	mov	r1, #692	; 0x2b4
  111a70:	e3060d78 	movw	r0, #28024	; 0x6d78
  111a74:	e3400014 	movt	r0, #20
  111a78:	ebffe59c 	bl	10b0f0 <sys_arch_assert>
  111a7c:	e3e0000f 	mvn	r0, #15
  111a80:	ebfff901 	bl	10fe8c <err_to_errno>
  111a84:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111a88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111a8c:	e6ef2073 	uxtb	r2, r3
  111a90:	e51b300c 	ldr	r3, [fp, #-12]
  111a94:	e5c32010 	strb	r2, [r3, #16]
  111a98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111a9c:	e3530000 	cmp	r3, #0
  111aa0:	0a000003 	beq	111ab4 <lwip_connect+0xf4>
  111aa4:	eb009d0d 	bl	138ee0 <__errno_location>
  111aa8:	e1a02000 	mov	r2, r0
  111aac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111ab0:	e5823000 	str	r3, [r2]
  111ab4:	e3e03000 	mvn	r3, #0
  111ab8:	ea000032 	b	111b88 <lwip_connect+0x1c8>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
  111abc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111ac0:	e5933004 	ldr	r3, [r3, #4]
  111ac4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  111ac8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111acc:	e1d330b2 	ldrh	r3, [r3, #2]
  111ad0:	e1a00003 	mov	r0, r3
  111ad4:	eb0012c1 	bl	1165e0 <lwip_htons>
  111ad8:	e1a03000 	mov	r3, r0
  111adc:	e14b30be 	strh	r3, [fp, #-14]
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
  111ae0:	e51b300c 	ldr	r3, [fp, #-12]
  111ae4:	e5933000 	ldr	r3, [r3]
  111ae8:	e15b20be 	ldrh	r2, [fp, #-14]
  111aec:	e24b1020 	sub	r1, fp, #32
  111af0:	e1a00003 	mov	r0, r3
  111af4:	ebffe6d5 	bl	10b650 <netconn_connect>
  111af8:	e1a03000 	mov	r3, r0
  111afc:	e54b3005 	strb	r3, [fp, #-5]
  }

  if (err != ERR_OK) {
  111b00:	e15b30d5 	ldrsb	r3, [fp, #-5]
  111b04:	e3530000 	cmp	r3, #0
  111b08:	0a000010 	beq	111b50 <lwip_connect+0x190>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  111b0c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  111b10:	e1a00003 	mov	r0, r3
  111b14:	ebfff8dc 	bl	10fe8c <err_to_errno>
  111b18:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  111b1c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111b20:	e6ef2073 	uxtb	r2, r3
  111b24:	e51b300c 	ldr	r3, [fp, #-12]
  111b28:	e5c32010 	strb	r2, [r3, #16]
  111b2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111b30:	e3530000 	cmp	r3, #0
  111b34:	0a000003 	beq	111b48 <lwip_connect+0x188>
  111b38:	eb009ce8 	bl	138ee0 <__errno_location>
  111b3c:	e1a02000 	mov	r2, r0
  111b40:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111b44:	e5823000 	str	r3, [r2]
    return -1;
  111b48:	e3e03000 	mvn	r3, #0
  111b4c:	ea00000d 	b	111b88 <lwip_connect+0x1c8>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  111b50:	e3a03000 	mov	r3, #0
  111b54:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  111b58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111b5c:	e6ef2073 	uxtb	r2, r3
  111b60:	e51b300c 	ldr	r3, [fp, #-12]
  111b64:	e5c32010 	strb	r2, [r3, #16]
  111b68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111b6c:	e3530000 	cmp	r3, #0
  111b70:	0a000003 	beq	111b84 <lwip_connect+0x1c4>
  111b74:	eb009cd9 	bl	138ee0 <__errno_location>
  111b78:	e1a02000 	mov	r2, r0
  111b7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111b80:	e5823000 	str	r3, [r2]
  return 0;
  111b84:	e3a03000 	mov	r3, #0
}
  111b88:	e1a00003 	mov	r0, r3
  111b8c:	e24bd004 	sub	sp, fp, #4
  111b90:	e8bd8800 	pop	{fp, pc}

00111b94 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
  111b94:	e92d4800 	push	{fp, lr}
  111b98:	e28db004 	add	fp, sp, #4
  111b9c:	e24dd020 	sub	sp, sp, #32
  111ba0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  111ba4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
  111ba8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  111bac:	ebfffcde 	bl	110f2c <get_socket>
  111bb0:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  111bb4:	e51b3008 	ldr	r3, [fp, #-8]
  111bb8:	e3530000 	cmp	r3, #0
  111bbc:	1a000001 	bne	111bc8 <lwip_listen+0x34>
    return -1;
  111bc0:	e3e03000 	mvn	r3, #0
  111bc4:	ea000047 	b	111ce8 <lwip_listen+0x154>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
  111bc8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111bcc:	e35300fe 	cmp	r3, #254	; 0xfe
  111bd0:	ca000002 	bgt	111be0 <lwip_listen+0x4c>
  111bd4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111bd8:	e1c33fc3 	bic	r3, r3, r3, asr #31
  111bdc:	ea000000 	b	111be4 <lwip_listen+0x50>
  111be0:	e3a030ff 	mov	r3, #255	; 0xff
  111be4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
  111be8:	e51b3008 	ldr	r3, [fp, #-8]
  111bec:	e5933000 	ldr	r3, [r3]
  111bf0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  111bf4:	e6ef2072 	uxtb	r2, r2
  111bf8:	e1a01002 	mov	r1, r2
  111bfc:	e1a00003 	mov	r0, r3
  111c00:	ebffe6d9 	bl	10b76c <netconn_listen_with_backlog>
  111c04:	e1a03000 	mov	r3, r0
  111c08:	e54b3009 	strb	r3, [fp, #-9]

  if (err != ERR_OK) {
  111c0c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  111c10:	e3530000 	cmp	r3, #0
  111c14:	0a000025 	beq	111cb0 <lwip_listen+0x11c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  111c18:	e51b3008 	ldr	r3, [fp, #-8]
  111c1c:	e5933000 	ldr	r3, [r3]
  111c20:	e5933000 	ldr	r3, [r3]
  111c24:	e20330f0 	and	r3, r3, #240	; 0xf0
  111c28:	e3530010 	cmp	r3, #16
  111c2c:	0a00000e 	beq	111c6c <lwip_listen+0xd8>
      sock_set_errno(sock, EOPNOTSUPP);
  111c30:	e3a0305f 	mov	r3, #95	; 0x5f
  111c34:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  111c38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111c3c:	e6ef2073 	uxtb	r2, r3
  111c40:	e51b3008 	ldr	r3, [fp, #-8]
  111c44:	e5c32010 	strb	r2, [r3, #16]
  111c48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111c4c:	e3530000 	cmp	r3, #0
  111c50:	0a000003 	beq	111c64 <lwip_listen+0xd0>
  111c54:	eb009ca1 	bl	138ee0 <__errno_location>
  111c58:	e1a02000 	mov	r2, r0
  111c5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111c60:	e5823000 	str	r3, [r2]
      return -1;
  111c64:	e3e03000 	mvn	r3, #0
  111c68:	ea00001e 	b	111ce8 <lwip_listen+0x154>
    }
    sock_set_errno(sock, err_to_errno(err));
  111c6c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  111c70:	e1a00003 	mov	r0, r3
  111c74:	ebfff884 	bl	10fe8c <err_to_errno>
  111c78:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111c7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111c80:	e6ef2073 	uxtb	r2, r3
  111c84:	e51b3008 	ldr	r3, [fp, #-8]
  111c88:	e5c32010 	strb	r2, [r3, #16]
  111c8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111c90:	e3530000 	cmp	r3, #0
  111c94:	0a000003 	beq	111ca8 <lwip_listen+0x114>
  111c98:	eb009c90 	bl	138ee0 <__errno_location>
  111c9c:	e1a02000 	mov	r2, r0
  111ca0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111ca4:	e5823000 	str	r3, [r2]
    return -1;
  111ca8:	e3e03000 	mvn	r3, #0
  111cac:	ea00000d 	b	111ce8 <lwip_listen+0x154>
  }

  sock_set_errno(sock, 0);
  111cb0:	e3a03000 	mov	r3, #0
  111cb4:	e50b3010 	str	r3, [fp, #-16]
  111cb8:	e51b3010 	ldr	r3, [fp, #-16]
  111cbc:	e6ef2073 	uxtb	r2, r3
  111cc0:	e51b3008 	ldr	r3, [fp, #-8]
  111cc4:	e5c32010 	strb	r2, [r3, #16]
  111cc8:	e51b3010 	ldr	r3, [fp, #-16]
  111ccc:	e3530000 	cmp	r3, #0
  111cd0:	0a000003 	beq	111ce4 <lwip_listen+0x150>
  111cd4:	eb009c81 	bl	138ee0 <__errno_location>
  111cd8:	e1a02000 	mov	r2, r0
  111cdc:	e51b3010 	ldr	r3, [fp, #-16]
  111ce0:	e5823000 	str	r3, [r2]
  return 0;
  111ce4:	e3a03000 	mov	r3, #0
}
  111ce8:	e1a00003 	mov	r0, r3
  111cec:	e24bd004 	sub	sp, fp, #4
  111cf0:	e8bd8800 	pop	{fp, pc}

00111cf4 <lwip_recvfrom>:

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
  111cf4:	e92d4810 	push	{r4, fp, lr}
  111cf8:	e28db008 	add	fp, sp, #8
  111cfc:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  111d00:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  111d04:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  111d08:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  111d0c:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
  struct lwip_sock *sock;
  void             *buf = NULL;
  111d10:	e3a03000 	mov	r3, #0
  111d14:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
  111d18:	e3a03000 	mov	r3, #0
  111d1c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  u8_t             done = 0;
  111d20:	e3a03000 	mov	r3, #0
  111d24:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  err_t            err;
  
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
  111d28:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  111d2c:	ebfffc7e 	bl	110f2c <get_socket>
  111d30:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
  if (!sock) {
  111d34:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d38:	e3530000 	cmp	r3, #0
  111d3c:	1a000001 	bne	111d48 <lwip_recvfrom+0x54>
    return -1;
  111d40:	e3e03000 	mvn	r3, #0
  111d44:	ea00015b 	b	1122b8 <lwip_recvfrom+0x5c4>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
  111d48:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d4c:	e5933004 	ldr	r3, [r3, #4]
  111d50:	e3530000 	cmp	r3, #0
  111d54:	0a000003 	beq	111d68 <lwip_recvfrom+0x74>
      buf = sock->lastdata;
  111d58:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d5c:	e5933004 	ldr	r3, [r3, #4]
  111d60:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  111d64:	ea00007d 	b	111f60 <lwip_recvfrom+0x26c>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  111d68:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  111d6c:	e2033008 	and	r3, r3, #8
  111d70:	e3530000 	cmp	r3, #0
  111d74:	1a000005 	bne	111d90 <lwip_recvfrom+0x9c>
  111d78:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d7c:	e5933000 	ldr	r3, [r3]
  111d80:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  111d84:	e2033002 	and	r3, r3, #2
  111d88:	e3530000 	cmp	r3, #0
  111d8c:	0a00001b 	beq	111e00 <lwip_recvfrom+0x10c>
          (sock->rcvevent <= 0)) {
  111d90:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d94:	e1d330fa 	ldrsh	r3, [r3, #10]
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  111d98:	e3530000 	cmp	r3, #0
  111d9c:	ca000017 	bgt	111e00 <lwip_recvfrom+0x10c>
        if (off > 0) {
  111da0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111da4:	e3530000 	cmp	r3, #0
  111da8:	da00000e 	ble	111de8 <lwip_recvfrom+0xf4>
          /* already received data, return that */
          sock_set_errno(sock, 0);
  111dac:	e3a03000 	mov	r3, #0
  111db0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  111db4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111db8:	e6ef2073 	uxtb	r2, r3
  111dbc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111dc0:	e5c32010 	strb	r2, [r3, #16]
  111dc4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111dc8:	e3530000 	cmp	r3, #0
  111dcc:	0a000003 	beq	111de0 <lwip_recvfrom+0xec>
  111dd0:	eb009c42 	bl	138ee0 <__errno_location>
  111dd4:	e1a02000 	mov	r2, r0
  111dd8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111ddc:	e5823000 	str	r3, [r2]
          return off;
  111de0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111de4:	ea000133 	b	1122b8 <lwip_recvfrom+0x5c4>
        }

        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        set_errno(EWOULDBLOCK);
  111de8:	eb009c3c 	bl	138ee0 <__errno_location>
  111dec:	e1a02000 	mov	r2, r0
  111df0:	e3a0300b 	mov	r3, #11
  111df4:	e5823000 	str	r3, [r2]
        return -1;
  111df8:	e3e03000 	mvn	r3, #0
  111dfc:	ea00012d 	b	1122b8 <lwip_recvfrom+0x5c4>
      }
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111e00:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e04:	e5933000 	ldr	r3, [r3]
  111e08:	e5933000 	ldr	r3, [r3]
  111e0c:	e20330f0 	and	r3, r3, #240	; 0xf0
  111e10:	e3530010 	cmp	r3, #16
  111e14:	1a000008 	bne	111e3c <lwip_recvfrom+0x148>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
  111e18:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e1c:	e5933000 	ldr	r3, [r3]
  111e20:	e24b203c 	sub	r2, fp, #60	; 0x3c
  111e24:	e1a01002 	mov	r1, r2
  111e28:	e1a00003 	mov	r0, r3
  111e2c:	ebffe791 	bl	10bc78 <netconn_recv_tcp_pbuf>
  111e30:	e1a03000 	mov	r3, r0
  111e34:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
  111e38:	ea000007 	b	111e5c <lwip_recvfrom+0x168>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
  111e3c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e40:	e5933000 	ldr	r3, [r3]
  111e44:	e24b203c 	sub	r2, fp, #60	; 0x3c
  111e48:	e1a01002 	mov	r1, r2
  111e4c:	e1a00003 	mov	r0, r3
  111e50:	ebffe7a5 	bl	10bcec <netconn_recv>
  111e54:	e1a03000 	mov	r3, r0
  111e58:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
  111e5c:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111e60:	e3530000 	cmp	r3, #0
  111e64:	0a000030 	beq	111f2c <lwip_recvfrom+0x238>
        if (off > 0) {
  111e68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111e6c:	e3530000 	cmp	r3, #0
  111e70:	da000017 	ble	111ed4 <lwip_recvfrom+0x1e0>
          if (err == ERR_CLSD) {
  111e74:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111e78:	e373000f 	cmn	r3, #15
  111e7c:	1a000005 	bne	111e98 <lwip_recvfrom+0x1a4>
            /* closed but already received data, ensure select gets the FIN, too */
            event_callback(sock->conn, NETCONN_EVT_RCVPLUS, 0);
  111e80:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e84:	e5933000 	ldr	r3, [r3]
  111e88:	e3a02000 	mov	r2, #0
  111e8c:	e3a01000 	mov	r1, #0
  111e90:	e1a00003 	mov	r0, r3
  111e94:	eb0006bc 	bl	11398c <event_callback>
          }
          /* already received data, return that */
          sock_set_errno(sock, 0);
  111e98:	e3a03000 	mov	r3, #0
  111e9c:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  111ea0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111ea4:	e6ef2073 	uxtb	r2, r3
  111ea8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111eac:	e5c32010 	strb	r2, [r3, #16]
  111eb0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111eb4:	e3530000 	cmp	r3, #0
  111eb8:	0a000003 	beq	111ecc <lwip_recvfrom+0x1d8>
  111ebc:	eb009c07 	bl	138ee0 <__errno_location>
  111ec0:	e1a02000 	mov	r2, r0
  111ec4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111ec8:	e5823000 	str	r3, [r2]
          return off;
  111ecc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111ed0:	ea0000f8 	b	1122b8 <lwip_recvfrom+0x5c4>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
  111ed4:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111ed8:	e1a00003 	mov	r0, r3
  111edc:	ebfff7ea 	bl	10fe8c <err_to_errno>
  111ee0:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  111ee4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111ee8:	e6ef2073 	uxtb	r2, r3
  111eec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ef0:	e5c32010 	strb	r2, [r3, #16]
  111ef4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111ef8:	e3530000 	cmp	r3, #0
  111efc:	0a000003 	beq	111f10 <lwip_recvfrom+0x21c>
  111f00:	eb009bf6 	bl	138ee0 <__errno_location>
  111f04:	e1a02000 	mov	r2, r0
  111f08:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111f0c:	e5823000 	str	r3, [r2]
        if (err == ERR_CLSD) {
  111f10:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111f14:	e373000f 	cmn	r3, #15
  111f18:	1a000001 	bne	111f24 <lwip_recvfrom+0x230>
          return 0;
  111f1c:	e3a03000 	mov	r3, #0
  111f20:	ea0000e4 	b	1122b8 <lwip_recvfrom+0x5c4>
        } else {
          return -1;
  111f24:	e3e03000 	mvn	r3, #0
  111f28:	ea0000e2 	b	1122b8 <lwip_recvfrom+0x5c4>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
  111f2c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111f30:	e3530000 	cmp	r3, #0
  111f34:	1a000006 	bne	111f54 <lwip_recvfrom+0x260>
  111f38:	e3060e30 	movw	r0, #28208	; 0x6e30
  111f3c:	e3400014 	movt	r0, #20
  111f40:	ebffc473 	bl	103114 <rt_kprintf>
  111f44:	e3a01fcf 	mov	r1, #828	; 0x33c
  111f48:	e3060d78 	movw	r0, #28024	; 0x6d78
  111f4c:	e3400014 	movt	r0, #20
  111f50:	ebffe466 	bl	10b0f0 <sys_arch_assert>
      sock->lastdata = buf;
  111f54:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  111f58:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f5c:	e5832004 	str	r2, [r3, #4]
    }

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111f60:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f64:	e5933000 	ldr	r3, [r3]
  111f68:	e5933000 	ldr	r3, [r3]
  111f6c:	e20330f0 	and	r3, r3, #240	; 0xf0
  111f70:	e3530010 	cmp	r3, #16
  111f74:	1a000002 	bne	111f84 <lwip_recvfrom+0x290>
      p = (struct pbuf *)buf;
  111f78:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111f7c:	e50b3010 	str	r3, [fp, #-16]
  111f80:	ea000002 	b	111f90 <lwip_recvfrom+0x29c>
    } else {
      p = ((struct netbuf *)buf)->p;
  111f84:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111f88:	e5933000 	ldr	r3, [r3]
  111f8c:	e50b3010 	str	r3, [fp, #-16]
    }
    buflen = p->tot_len;
  111f90:	e51b3010 	ldr	r3, [fp, #-16]
  111f94:	e1d330b8 	ldrh	r3, [r3, #8]
  111f98:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
  111f9c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111fa0:	e1d330b8 	ldrh	r3, [r3, #8]
  111fa4:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  111fa8:	e0423003 	sub	r3, r2, r3
  111fac:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce

    if (len > buflen) {
  111fb0:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  111fb4:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  111fb8:	e1520003 	cmp	r2, r3
  111fbc:	9a000002 	bls	111fcc <lwip_recvfrom+0x2d8>
      copylen = buflen;
  111fc0:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  111fc4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  111fc8:	ea000001 	b	111fd4 <lwip_recvfrom+0x2e0>
    } else {
      copylen = (u16_t)len;
  111fcc:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111fd0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
  111fd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111fd8:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  111fdc:	e0821003 	add	r1, r2, r3
  111fe0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111fe4:	e1d330b8 	ldrh	r3, [r3, #8]
  111fe8:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  111fec:	e51b0010 	ldr	r0, [fp, #-16]
  111ff0:	eb0025bc 	bl	11b6e8 <pbuf_copy_partial>

    off += copylen;
  111ff4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111ff8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  111ffc:	e0823003 	add	r3, r2, r3
  112000:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  112004:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112008:	e5933000 	ldr	r3, [r3]
  11200c:	e5933000 	ldr	r3, [r3]
  112010:	e20330f0 	and	r3, r3, #240	; 0xf0
  112014:	e3530010 	cmp	r3, #16
  112018:	1a000021 	bne	1120a4 <lwip_recvfrom+0x3b0>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
  11201c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  112020:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  112024:	e1520003 	cmp	r2, r3
  112028:	2a000006 	bcs	112048 <lwip_recvfrom+0x354>
  11202c:	e3060e3c 	movw	r0, #28220	; 0x6e3c
  112030:	e3400014 	movt	r0, #20
  112034:	ebffc436 	bl	103114 <rt_kprintf>
  112038:	e3a01fd6 	mov	r1, #856	; 0x358
  11203c:	e3060d78 	movw	r0, #28024	; 0x6d78
  112040:	e3400014 	movt	r0, #20
  112044:	ebffe429 	bl	10b0f0 <sys_arch_assert>
      len -= copylen;
  112048:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11204c:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  112050:	e0423003 	sub	r3, r2, r3
  112054:	e50b3060 	str	r3, [fp, #-96]	; 0xffffffa0
      if ((len <= 0) ||
  112058:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  11205c:	e3530000 	cmp	r3, #0
  112060:	0a00000c 	beq	112098 <lwip_recvfrom+0x3a4>
          (p->flags & PBUF_FLAG_PUSH) ||
  112064:	e51b3010 	ldr	r3, [fp, #-16]
  112068:	e5d3300d 	ldrb	r3, [r3, #13]
  11206c:	e2033001 	and	r3, r3, #1
      if ((len <= 0) ||
  112070:	e3530000 	cmp	r3, #0
  112074:	1a000007 	bne	112098 <lwip_recvfrom+0x3a4>
          (sock->rcvevent <= 0) ||
  112078:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11207c:	e1d330fa 	ldrsh	r3, [r3, #10]
          (p->flags & PBUF_FLAG_PUSH) ||
  112080:	e3530000 	cmp	r3, #0
  112084:	da000003 	ble	112098 <lwip_recvfrom+0x3a4>
          ((flags & MSG_PEEK) != 0)) {
  112088:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  11208c:	e2033001 	and	r3, r3, #1
          (sock->rcvevent <= 0) ||
  112090:	e3530000 	cmp	r3, #0
  112094:	0a000004 	beq	1120ac <lwip_recvfrom+0x3b8>
        done = 1;
  112098:	e3a03001 	mov	r3, #1
  11209c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  1120a0:	ea000001 	b	1120ac <lwip_recvfrom+0x3b8>
      }
    } else {
      done = 1;
  1120a4:	e3a03001 	mov	r3, #1
  1120a8:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }

    /* Check to see from where the data was.*/
    if (done) {
  1120ac:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  1120b0:	e3530000 	cmp	r3, #0
  1120b4:	0a00003f 	beq	1121b8 <lwip_recvfrom+0x4c4>
#if !SOCKETS_DEBUG
      if (from && fromlen)
  1120b8:	e59b3004 	ldr	r3, [fp, #4]
  1120bc:	e3530000 	cmp	r3, #0
  1120c0:	0a00003c 	beq	1121b8 <lwip_recvfrom+0x4c4>
  1120c4:	e59b3008 	ldr	r3, [fp, #8]
  1120c8:	e3530000 	cmp	r3, #0
  1120cc:	0a000039 	beq	1121b8 <lwip_recvfrom+0x4c4>
        u16_t port;
        ip_addr_t tmpaddr;
        ip_addr_t *fromaddr;
        union sockaddr_aligned saddr;
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  1120d0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1120d4:	e5933000 	ldr	r3, [r3]
  1120d8:	e5933000 	ldr	r3, [r3]
  1120dc:	e20330f0 	and	r3, r3, #240	; 0xf0
  1120e0:	e3530010 	cmp	r3, #16
  1120e4:	1a000008 	bne	11210c <lwip_recvfrom+0x418>
          fromaddr = &tmpaddr;
  1120e8:	e24b3044 	sub	r3, fp, #68	; 0x44
  1120ec:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          netconn_getaddr(sock->conn, fromaddr, &port, 0);
  1120f0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1120f4:	e5930000 	ldr	r0, [r3]
  1120f8:	e24b203e 	sub	r2, fp, #62	; 0x3e
  1120fc:	e3a03000 	mov	r3, #0
  112100:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  112104:	ebffe4e9 	bl	10b4b0 <netconn_getaddr>
  112108:	ea000005 	b	112124 <lwip_recvfrom+0x430>
        } else {
          port = netbuf_fromport((struct netbuf *)buf);
  11210c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112110:	e1d330bc 	ldrh	r3, [r3, #12]
  112114:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
          fromaddr = netbuf_fromaddr((struct netbuf *)buf);
  112118:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  11211c:	e2833008 	add	r3, r3, #8
  112120:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
          IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
        }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

        IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
  112124:	e24b3054 	sub	r3, fp, #84	; 0x54
  112128:	e3a02010 	mov	r2, #16
  11212c:	e5c32000 	strb	r2, [r3]
  112130:	e24b3054 	sub	r3, fp, #84	; 0x54
  112134:	e3a02002 	mov	r2, #2
  112138:	e5c32001 	strb	r2, [r3, #1]
  11213c:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  112140:	e24b4054 	sub	r4, fp, #84	; 0x54
  112144:	e1a00003 	mov	r0, r3
  112148:	eb001124 	bl	1165e0 <lwip_htons>
  11214c:	e1a03000 	mov	r3, r0
  112150:	e1c430b2 	strh	r3, [r4, #2]
  112154:	e24b3054 	sub	r3, fp, #84	; 0x54
  112158:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11215c:	e5922000 	ldr	r2, [r2]
  112160:	e5832004 	str	r2, [r3, #4]
  112164:	e24b3054 	sub	r3, fp, #84	; 0x54
  112168:	e2833008 	add	r3, r3, #8
  11216c:	e3a02008 	mov	r2, #8
  112170:	e3a01000 	mov	r1, #0
  112174:	e1a00003 	mov	r0, r3
  112178:	eb00bc3f 	bl	14127c <memset>
        LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, off));
#if SOCKETS_DEBUG
        if (from && fromlen)
#endif /* SOCKETS_DEBUG */
        {
          if (*fromlen > saddr.sa.sa_len) {
  11217c:	e59b3008 	ldr	r3, [fp, #8]
  112180:	e5933000 	ldr	r3, [r3]
  112184:	e55b2054 	ldrb	r2, [fp, #-84]	; 0xffffffac
  112188:	e1530002 	cmp	r3, r2
  11218c:	9a000003 	bls	1121a0 <lwip_recvfrom+0x4ac>
            *fromlen = saddr.sa.sa_len;
  112190:	e55b3054 	ldrb	r3, [fp, #-84]	; 0xffffffac
  112194:	e1a02003 	mov	r2, r3
  112198:	e59b3008 	ldr	r3, [fp, #8]
  11219c:	e5832000 	str	r2, [r3]
          }
          MEMCPY(from, &saddr, *fromlen);
  1121a0:	e59b3008 	ldr	r3, [fp, #8]
  1121a4:	e5932000 	ldr	r2, [r3]
  1121a8:	e24b3054 	sub	r3, fp, #84	; 0x54
  1121ac:	e1a01003 	mov	r1, r3
  1121b0:	e59b0004 	ldr	r0, [fp, #4]
  1121b4:	eb00baf8 	bl	140d9c <memcpy>
        }
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
  1121b8:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  1121bc:	e2033001 	and	r3, r3, #1
  1121c0:	e3530000 	cmp	r3, #0
  1121c4:	1a00002a 	bne	112274 <lwip_recvfrom+0x580>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
  1121c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1121cc:	e5933000 	ldr	r3, [r3]
  1121d0:	e5933000 	ldr	r3, [r3]
  1121d4:	e20330f0 	and	r3, r3, #240	; 0xf0
  1121d8:	e3530010 	cmp	r3, #16
  1121dc:	1a00000f 	bne	112220 <lwip_recvfrom+0x52c>
  1121e0:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  1121e4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1121e8:	e0423003 	sub	r3, r2, r3
  1121ec:	e3530000 	cmp	r3, #0
  1121f0:	da00000a 	ble	112220 <lwip_recvfrom+0x52c>
        sock->lastdata = buf;
  1121f4:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  1121f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1121fc:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset += copylen;
  112200:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112204:	e1d320b8 	ldrh	r2, [r3, #8]
  112208:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11220c:	e0823003 	add	r3, r2, r3
  112210:	e6ff2073 	uxth	r2, r3
  112214:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112218:	e1c320b8 	strh	r2, [r3, #8]
  11221c:	ea000014 	b	112274 <lwip_recvfrom+0x580>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
  112220:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112224:	e3a02000 	mov	r2, #0
  112228:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset = 0;
  11222c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112230:	e3a02000 	mov	r2, #0
  112234:	e1c320b8 	strh	r2, [r3, #8]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  112238:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11223c:	e5933000 	ldr	r3, [r3]
  112240:	e5933000 	ldr	r3, [r3]
  112244:	e20330f0 	and	r3, r3, #240	; 0xf0
  112248:	e3530010 	cmp	r3, #16
  11224c:	1a000003 	bne	112260 <lwip_recvfrom+0x56c>
          pbuf_free((struct pbuf *)buf);
  112250:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112254:	e1a00003 	mov	r0, r3
  112258:	eb002317 	bl	11aebc <pbuf_free>
  11225c:	ea000002 	b	11226c <lwip_recvfrom+0x578>
        } else {
          netbuf_delete((struct netbuf *)buf);
  112260:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112264:	e1a00003 	mov	r0, r3
  112268:	ebfff732 	bl	10ff38 <netbuf_delete>
        }
        buf = NULL;
  11226c:	e3a03000 	mov	r3, #0
  112270:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
      }
    }
  } while (!done);
  112274:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  112278:	e3530000 	cmp	r3, #0
  11227c:	0afffeb1 	beq	111d48 <lwip_recvfrom+0x54>

  sock_set_errno(sock, 0);
  112280:	e3a03000 	mov	r3, #0
  112284:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  112288:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11228c:	e6ef2073 	uxtb	r2, r3
  112290:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112294:	e5c32010 	strb	r2, [r3, #16]
  112298:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11229c:	e3530000 	cmp	r3, #0
  1122a0:	0a000003 	beq	1122b4 <lwip_recvfrom+0x5c0>
  1122a4:	eb009b0d 	bl	138ee0 <__errno_location>
  1122a8:	e1a02000 	mov	r2, r0
  1122ac:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1122b0:	e5823000 	str	r3, [r2]
  return off;
  1122b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  1122b8:	e1a00003 	mov	r0, r3
  1122bc:	e24bd008 	sub	sp, fp, #8
  1122c0:	e8bd8810 	pop	{r4, fp, pc}

001122c4 <lwip_read>:

int
lwip_read(int s, void *mem, size_t len)
{
  1122c4:	e92d4800 	push	{fp, lr}
  1122c8:	e28db004 	add	fp, sp, #4
  1122cc:	e24dd018 	sub	sp, sp, #24
  1122d0:	e50b0008 	str	r0, [fp, #-8]
  1122d4:	e50b100c 	str	r1, [fp, #-12]
  1122d8:	e50b2010 	str	r2, [fp, #-16]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
  1122dc:	e3a03000 	mov	r3, #0
  1122e0:	e58d3004 	str	r3, [sp, #4]
  1122e4:	e3a03000 	mov	r3, #0
  1122e8:	e58d3000 	str	r3, [sp]
  1122ec:	e3a03000 	mov	r3, #0
  1122f0:	e51b2010 	ldr	r2, [fp, #-16]
  1122f4:	e51b100c 	ldr	r1, [fp, #-12]
  1122f8:	e51b0008 	ldr	r0, [fp, #-8]
  1122fc:	ebfffe7c 	bl	111cf4 <lwip_recvfrom>
  112300:	e1a03000 	mov	r3, r0
}
  112304:	e1a00003 	mov	r0, r3
  112308:	e24bd004 	sub	sp, fp, #4
  11230c:	e8bd8800 	pop	{fp, pc}

00112310 <lwip_recv>:

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
  112310:	e92d4800 	push	{fp, lr}
  112314:	e28db004 	add	fp, sp, #4
  112318:	e24dd018 	sub	sp, sp, #24
  11231c:	e50b0008 	str	r0, [fp, #-8]
  112320:	e50b100c 	str	r1, [fp, #-12]
  112324:	e50b2010 	str	r2, [fp, #-16]
  112328:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
  11232c:	e3a03000 	mov	r3, #0
  112330:	e58d3004 	str	r3, [sp, #4]
  112334:	e3a03000 	mov	r3, #0
  112338:	e58d3000 	str	r3, [sp]
  11233c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112340:	e51b2010 	ldr	r2, [fp, #-16]
  112344:	e51b100c 	ldr	r1, [fp, #-12]
  112348:	e51b0008 	ldr	r0, [fp, #-8]
  11234c:	ebfffe68 	bl	111cf4 <lwip_recvfrom>
  112350:	e1a03000 	mov	r3, r0
}
  112354:	e1a00003 	mov	r0, r3
  112358:	e24bd004 	sub	sp, fp, #4
  11235c:	e8bd8800 	pop	{fp, pc}

00112360 <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
  112360:	e92d4800 	push	{fp, lr}
  112364:	e28db004 	add	fp, sp, #4
  112368:	e24dd028 	sub	sp, sp, #40	; 0x28
  11236c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  112370:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  112374:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  112378:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
  11237c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  112380:	ebfffae9 	bl	110f2c <get_socket>
  112384:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  112388:	e51b3008 	ldr	r3, [fp, #-8]
  11238c:	e3530000 	cmp	r3, #0
  112390:	1a000001 	bne	11239c <lwip_send+0x3c>
    return -1;
  112394:	e3e03000 	mvn	r3, #0
  112398:	ea000041 	b	1124a4 <lwip_send+0x144>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  11239c:	e51b3008 	ldr	r3, [fp, #-8]
  1123a0:	e5933000 	ldr	r3, [r3]
  1123a4:	e5933000 	ldr	r3, [r3]
  1123a8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1123ac:	e3530010 	cmp	r3, #16
  1123b0:	0a00000a 	beq	1123e0 <lwip_send+0x80>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
  1123b4:	e3a03000 	mov	r3, #0
  1123b8:	e58d3004 	str	r3, [sp, #4]
  1123bc:	e3a03000 	mov	r3, #0
  1123c0:	e58d3000 	str	r3, [sp]
  1123c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1123c8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1123cc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1123d0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1123d4:	eb0001b1 	bl	112aa0 <lwip_sendto>
  1123d8:	e1a03000 	mov	r3, r0
  1123dc:	ea000030 	b	1124a4 <lwip_send+0x144>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1123e0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1123e4:	e1a031c3 	asr	r3, r3, #3
  1123e8:	e6af3073 	sxtb	r3, r3
  1123ec:	e2033002 	and	r3, r3, #2
  1123f0:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  1123f4:	e3833001 	orr	r3, r3, #1
  1123f8:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  1123fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112400:	e1a030c3 	asr	r3, r3, #1
  112404:	e6af3073 	sxtb	r3, r3
  112408:	e2033004 	and	r3, r3, #4
  11240c:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  112410:	e1823003 	orr	r3, r2, r3
  112414:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  112418:	e54b3009 	strb	r3, [fp, #-9]
  written = 0;
  11241c:	e3a03000 	mov	r3, #0
  112420:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
  112424:	e51b3008 	ldr	r3, [fp, #-8]
  112428:	e5930000 	ldr	r0, [r3]
  11242c:	e55b2009 	ldrb	r2, [fp, #-9]
  112430:	e24b3014 	sub	r3, fp, #20
  112434:	e58d3000 	str	r3, [sp]
  112438:	e1a03002 	mov	r3, r2
  11243c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  112440:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  112444:	ebffe6cb 	bl	10bf78 <netconn_write_partly>
  112448:	e1a03000 	mov	r3, r0
  11244c:	e54b300a 	strb	r3, [fp, #-10]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
  112450:	e15b30da 	ldrsb	r3, [fp, #-10]
  112454:	e1a00003 	mov	r0, r3
  112458:	ebfff68b 	bl	10fe8c <err_to_errno>
  11245c:	e50b0010 	str	r0, [fp, #-16]
  112460:	e51b3010 	ldr	r3, [fp, #-16]
  112464:	e6ef2073 	uxtb	r2, r3
  112468:	e51b3008 	ldr	r3, [fp, #-8]
  11246c:	e5c32010 	strb	r2, [r3, #16]
  112470:	e51b3010 	ldr	r3, [fp, #-16]
  112474:	e3530000 	cmp	r3, #0
  112478:	0a000003 	beq	11248c <lwip_send+0x12c>
  11247c:	eb009a97 	bl	138ee0 <__errno_location>
  112480:	e1a02000 	mov	r2, r0
  112484:	e51b3010 	ldr	r3, [fp, #-16]
  112488:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? (int)written : -1);
  11248c:	e15b30da 	ldrsb	r3, [fp, #-10]
  112490:	e3530000 	cmp	r3, #0
  112494:	1a000001 	bne	1124a0 <lwip_send+0x140>
  112498:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11249c:	ea000000 	b	1124a4 <lwip_send+0x144>
  1124a0:	e3e03000 	mvn	r3, #0
}
  1124a4:	e1a00003 	mov	r0, r3
  1124a8:	e24bd004 	sub	sp, fp, #4
  1124ac:	e8bd8800 	pop	{fp, pc}

001124b0 <lwip_sendmsg>:

int
lwip_sendmsg(int s, const struct msghdr *msg, int flags)
{
  1124b0:	e92d4800 	push	{fp, lr}
  1124b4:	e28db004 	add	fp, sp, #4
  1124b8:	e24dd058 	sub	sp, sp, #88	; 0x58
  1124bc:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
  1124c0:	e50b104c 	str	r1, [fp, #-76]	; 0xffffffb4
  1124c4:	e50b2050 	str	r2, [fp, #-80]	; 0xffffffb0
  int i;
#if LWIP_TCP
  u8_t write_flags;
  size_t written;
#endif
  int size = 0;
  1124c8:	e3a03000 	mov	r3, #0
  1124cc:	e50b300c 	str	r3, [fp, #-12]
  err_t err = ERR_OK;
  1124d0:	e3a03000 	mov	r3, #0
  1124d4:	e54b300d 	strb	r3, [fp, #-13]

  sock = get_socket(s);
  1124d8:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1124dc:	ebfffa92 	bl	110f2c <get_socket>
  1124e0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (!sock) {
  1124e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1124e8:	e3530000 	cmp	r3, #0
  1124ec:	1a000001 	bne	1124f8 <lwip_sendmsg+0x48>
    return -1;
  1124f0:	e3e03000 	mvn	r3, #0
  1124f4:	ea000166 	b	112a94 <lwip_sendmsg+0x5e4>
  }

  LWIP_ERROR("lwip_sendmsg: invalid msghdr", msg != NULL,
  1124f8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1124fc:	e3530000 	cmp	r3, #0
  112500:	1a000016 	bne	112560 <lwip_sendmsg+0xb0>
  112504:	e3060e64 	movw	r0, #28260	; 0x6e64
  112508:	e3400014 	movt	r0, #20
  11250c:	ebffc300 	bl	103114 <rt_kprintf>
  112510:	e30013eb 	movw	r1, #1003	; 0x3eb
  112514:	e3060d78 	movw	r0, #28024	; 0x6d78
  112518:	e3400014 	movt	r0, #20
  11251c:	ebffe2f3 	bl	10b0f0 <sys_arch_assert>
  112520:	e3e0000f 	mvn	r0, #15
  112524:	ebfff658 	bl	10fe8c <err_to_errno>
  112528:	e50b003c 	str	r0, [fp, #-60]	; 0xffffffc4
  11252c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112530:	e6ef2073 	uxtb	r2, r3
  112534:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112538:	e5c32010 	strb	r2, [r3, #16]
  11253c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112540:	e3530000 	cmp	r3, #0
  112544:	0a000003 	beq	112558 <lwip_sendmsg+0xa8>
  112548:	eb009a64 	bl	138ee0 <__errno_location>
  11254c:	e1a02000 	mov	r2, r0
  112550:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112554:	e5823000 	str	r3, [r2]
  112558:	e3e03000 	mvn	r3, #0
  11255c:	ea00014c 	b	112a94 <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  LWIP_UNUSED_ARG(msg->msg_control);
  LWIP_UNUSED_ARG(msg->msg_controllen);
  LWIP_UNUSED_ARG(msg->msg_flags);
  LWIP_ERROR("lwip_sendmsg: invalid msghdr iov", (msg->msg_iov != NULL && msg->msg_iovlen != 0),
  112560:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112564:	e5933008 	ldr	r3, [r3, #8]
  112568:	e3530000 	cmp	r3, #0
  11256c:	0a000003 	beq	112580 <lwip_sendmsg+0xd0>
  112570:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112574:	e593300c 	ldr	r3, [r3, #12]
  112578:	e3530000 	cmp	r3, #0
  11257c:	1a000016 	bne	1125dc <lwip_sendmsg+0x12c>
  112580:	e3060e84 	movw	r0, #28292	; 0x6e84
  112584:	e3400014 	movt	r0, #20
  112588:	ebffc2e1 	bl	103114 <rt_kprintf>
  11258c:	e30013f1 	movw	r1, #1009	; 0x3f1
  112590:	e3060d78 	movw	r0, #28024	; 0x6d78
  112594:	e3400014 	movt	r0, #20
  112598:	ebffe2d4 	bl	10b0f0 <sys_arch_assert>
  11259c:	e3e0000f 	mvn	r0, #15
  1125a0:	ebfff639 	bl	10fe8c <err_to_errno>
  1125a4:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  1125a8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1125ac:	e6ef2073 	uxtb	r2, r3
  1125b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1125b4:	e5c32010 	strb	r2, [r3, #16]
  1125b8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1125bc:	e3530000 	cmp	r3, #0
  1125c0:	0a000003 	beq	1125d4 <lwip_sendmsg+0x124>
  1125c4:	eb009a45 	bl	138ee0 <__errno_location>
  1125c8:	e1a02000 	mov	r2, r0
  1125cc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1125d0:	e5823000 	str	r3, [r2]
  1125d4:	e3e03000 	mvn	r3, #0
  1125d8:	ea00012d 	b	112a94 <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  1125dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1125e0:	e5933000 	ldr	r3, [r3]
  1125e4:	e5933000 	ldr	r3, [r3]
  1125e8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1125ec:	e3530010 	cmp	r3, #16
  1125f0:	1a000069 	bne	11279c <lwip_sendmsg+0x2ec>
#if LWIP_TCP
    write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1125f4:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1125f8:	e1a031c3 	asr	r3, r3, #3
  1125fc:	e6af3073 	sxtb	r3, r3
  112600:	e2033002 	and	r3, r3, #2
  112604:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  112608:	e3833001 	orr	r3, r3, #1
  11260c:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  112610:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  112614:	e1a030c3 	asr	r3, r3, #1
  112618:	e6af3073 	sxtb	r3, r3
  11261c:	e2033004 	and	r3, r3, #4
  112620:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  112624:	e1823003 	orr	r3, r2, r3
  112628:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  11262c:	e54b302d 	strb	r3, [fp, #-45]	; 0xffffffd3

    for (i = 0; i < msg->msg_iovlen; i++) {
  112630:	e3a03000 	mov	r3, #0
  112634:	e50b3008 	str	r3, [fp, #-8]
  112638:	ea000041 	b	112744 <lwip_sendmsg+0x294>
      u8_t apiflags = write_flags;
  11263c:	e55b302d 	ldrb	r3, [fp, #-45]	; 0xffffffd3
  112640:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      if (i + 1 < msg->msg_iovlen) {
  112644:	e51b3008 	ldr	r3, [fp, #-8]
  112648:	e2832001 	add	r2, r3, #1
  11264c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112650:	e593300c 	ldr	r3, [r3, #12]
  112654:	e1520003 	cmp	r2, r3
  112658:	aa000002 	bge	112668 <lwip_sendmsg+0x1b8>
        apiflags |= NETCONN_MORE;
  11265c:	e55b302e 	ldrb	r3, [fp, #-46]	; 0xffffffd2
  112660:	e3833002 	orr	r3, r3, #2
  112664:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      }
      written = 0;
  112668:	e3a03000 	mov	r3, #0
  11266c:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0
      err = netconn_write_partly(sock->conn, msg->msg_iov[i].iov_base, msg->msg_iov[i].iov_len, write_flags, &written);
  112670:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112674:	e5930000 	ldr	r0, [r3]
  112678:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11267c:	e5932008 	ldr	r2, [r3, #8]
  112680:	e51b3008 	ldr	r3, [fp, #-8]
  112684:	e1a03183 	lsl	r3, r3, #3
  112688:	e0823003 	add	r3, r2, r3
  11268c:	e5931000 	ldr	r1, [r3]
  112690:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112694:	e5932008 	ldr	r2, [r3, #8]
  112698:	e51b3008 	ldr	r3, [fp, #-8]
  11269c:	e1a03183 	lsl	r3, r3, #3
  1126a0:	e0823003 	add	r3, r2, r3
  1126a4:	e5932004 	ldr	r2, [r3, #4]
  1126a8:	e55bc02d 	ldrb	ip, [fp, #-45]	; 0xffffffd3
  1126ac:	e24b3040 	sub	r3, fp, #64	; 0x40
  1126b0:	e58d3000 	str	r3, [sp]
  1126b4:	e1a0300c 	mov	r3, ip
  1126b8:	ebffe62e 	bl	10bf78 <netconn_write_partly>
  1126bc:	e1a03000 	mov	r3, r0
  1126c0:	e54b300d 	strb	r3, [fp, #-13]
      if (err == ERR_OK) {
  1126c4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1126c8:	e3530000 	cmp	r3, #0
  1126cc:	1a00000d 	bne	112708 <lwip_sendmsg+0x258>
        size += written;
  1126d0:	e51b200c 	ldr	r2, [fp, #-12]
  1126d4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1126d8:	e0823003 	add	r3, r2, r3
  1126dc:	e50b300c 	str	r3, [fp, #-12]
        /* check that the entire IO vector was accepected, if not return a partial write */
        if (written != msg->msg_iov[i].iov_len)
  1126e0:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1126e4:	e5932008 	ldr	r2, [r3, #8]
  1126e8:	e51b3008 	ldr	r3, [fp, #-8]
  1126ec:	e1a03183 	lsl	r3, r3, #3
  1126f0:	e0823003 	add	r3, r2, r3
  1126f4:	e5932004 	ldr	r2, [r3, #4]
  1126f8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1126fc:	e1520003 	cmp	r2, r3
  112700:	0a00000c 	beq	112738 <lwip_sendmsg+0x288>
          break;
  112704:	ea000013 	b	112758 <lwip_sendmsg+0x2a8>
      }
      /* none of this IO vector was accepted, but previous was, return partial write and conceal ERR_WOULDBLOCK */
      else if (err == ERR_WOULDBLOCK && size > 0) {
  112708:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11270c:	e3730007 	cmn	r3, #7
  112710:	1a000005 	bne	11272c <lwip_sendmsg+0x27c>
  112714:	e51b300c 	ldr	r3, [fp, #-12]
  112718:	e3530000 	cmp	r3, #0
  11271c:	da000002 	ble	11272c <lwip_sendmsg+0x27c>
        err = ERR_OK;
  112720:	e3a03000 	mov	r3, #0
  112724:	e54b300d 	strb	r3, [fp, #-13]
        /* let ERR_WOULDBLOCK persist on the netconn since we are returning ERR_OK */
        break;
  112728:	ea00000a 	b	112758 <lwip_sendmsg+0x2a8>
      } else {
        size = -1;
  11272c:	e3e03000 	mvn	r3, #0
  112730:	e50b300c 	str	r3, [fp, #-12]
        break;
  112734:	ea000007 	b	112758 <lwip_sendmsg+0x2a8>
    for (i = 0; i < msg->msg_iovlen; i++) {
  112738:	e51b3008 	ldr	r3, [fp, #-8]
  11273c:	e2833001 	add	r3, r3, #1
  112740:	e50b3008 	str	r3, [fp, #-8]
  112744:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112748:	e593300c 	ldr	r3, [r3, #12]
  11274c:	e51b2008 	ldr	r2, [fp, #-8]
  112750:	e1520003 	cmp	r2, r3
  112754:	baffffb8 	blt	11263c <lwip_sendmsg+0x18c>
      }
    }
    sock_set_errno(sock, err_to_errno(err));
  112758:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11275c:	e1a00003 	mov	r0, r3
  112760:	ebfff5c9 	bl	10fe8c <err_to_errno>
  112764:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  112768:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  11276c:	e6ef2073 	uxtb	r2, r3
  112770:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112774:	e5c32010 	strb	r2, [r3, #16]
  112778:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  11277c:	e3530000 	cmp	r3, #0
  112780:	0a000003 	beq	112794 <lwip_sendmsg+0x2e4>
  112784:	eb0099d5 	bl	138ee0 <__errno_location>
  112788:	e1a02000 	mov	r2, r0
  11278c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  112790:	e5823000 	str	r3, [r2]
    return size;
  112794:	e51b300c 	ldr	r3, [fp, #-12]
  112798:	ea0000bd 	b	112a94 <lwip_sendmsg+0x5e4>
#if LWIP_UDP || LWIP_RAW
  {
    struct netbuf *chain_buf;

    LWIP_UNUSED_ARG(flags);
    LWIP_ERROR("lwip_sendmsg: invalid msghdr name", (((msg->msg_name == NULL) && (msg->msg_namelen == 0)) ||
  11279c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1127a0:	e5933000 	ldr	r3, [r3]
  1127a4:	e3530000 	cmp	r3, #0
  1127a8:	1a000003 	bne	1127bc <lwip_sendmsg+0x30c>
  1127ac:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1127b0:	e5933004 	ldr	r3, [r3, #4]
  1127b4:	e3530000 	cmp	r3, #0
  1127b8:	0a00001a 	beq	112828 <lwip_sendmsg+0x378>
  1127bc:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1127c0:	e5933004 	ldr	r3, [r3, #4]
  1127c4:	e3530010 	cmp	r3, #16
  1127c8:	0a000016 	beq	112828 <lwip_sendmsg+0x378>
  1127cc:	e3060ea8 	movw	r0, #28328	; 0x6ea8
  1127d0:	e3400014 	movt	r0, #20
  1127d4:	ebffc24e 	bl	103114 <rt_kprintf>
  1127d8:	e300141f 	movw	r1, #1055	; 0x41f
  1127dc:	e3060d78 	movw	r0, #28024	; 0x6d78
  1127e0:	e3400014 	movt	r0, #20
  1127e4:	ebffe241 	bl	10b0f0 <sys_arch_assert>
  1127e8:	e3e0000f 	mvn	r0, #15
  1127ec:	ebfff5a6 	bl	10fe8c <err_to_errno>
  1127f0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1127f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1127f8:	e6ef2073 	uxtb	r2, r3
  1127fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112800:	e5c32010 	strb	r2, [r3, #16]
  112804:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112808:	e3530000 	cmp	r3, #0
  11280c:	0a000003 	beq	112820 <lwip_sendmsg+0x370>
  112810:	eb0099b2 	bl	138ee0 <__errno_location>
  112814:	e1a02000 	mov	r2, r0
  112818:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11281c:	e5823000 	str	r3, [r2]
  112820:	e3e03000 	mvn	r3, #0
  112824:	ea00009a 	b	112a94 <lwip_sendmsg+0x5e4>
               IS_SOCK_ADDR_LEN_VALID(msg->msg_namelen)) ,
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    /* initialize chain buffer with destination */
    chain_buf = netbuf_new();
  112828:	ebfff5ae 	bl	10fee8 <netbuf_new>
  11282c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
    if (!chain_buf) {
  112830:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112834:	e3530000 	cmp	r3, #0
  112838:	1a00000f 	bne	11287c <lwip_sendmsg+0x3cc>
      sock_set_errno(sock, err_to_errno(ERR_MEM));
  11283c:	e3e00000 	mvn	r0, #0
  112840:	ebfff591 	bl	10fe8c <err_to_errno>
  112844:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  112848:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11284c:	e6ef2073 	uxtb	r2, r3
  112850:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112854:	e5c32010 	strb	r2, [r3, #16]
  112858:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11285c:	e3530000 	cmp	r3, #0
  112860:	0a000003 	beq	112874 <lwip_sendmsg+0x3c4>
  112864:	eb00999d 	bl	138ee0 <__errno_location>
  112868:	e1a02000 	mov	r2, r0
  11286c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112870:	e5823000 	str	r3, [r2]
      return -1;
  112874:	e3e03000 	mvn	r3, #0
  112878:	ea000085 	b	112a94 <lwip_sendmsg+0x5e4>
    }
    if (msg->msg_name) {
  11287c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112880:	e5933000 	ldr	r3, [r3]
  112884:	e3530000 	cmp	r3, #0
  112888:	0a00000e 	beq	1128c8 <lwip_sendmsg+0x418>
      u16_t remote_port;
      SOCKADDR_TO_IPADDR_PORT((const struct sockaddr *)msg->msg_name, &chain_buf->addr, remote_port);
  11288c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112890:	e5933000 	ldr	r3, [r3]
  112894:	e5932004 	ldr	r2, [r3, #4]
  112898:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11289c:	e5832008 	str	r2, [r3, #8]
  1128a0:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1128a4:	e5933000 	ldr	r3, [r3]
  1128a8:	e1d330b2 	ldrh	r3, [r3, #2]
  1128ac:	e1a00003 	mov	r0, r3
  1128b0:	eb000f4a 	bl	1165e0 <lwip_htons>
  1128b4:	e1a03000 	mov	r3, r0
  1128b8:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      netbuf_fromport(chain_buf) = remote_port;
  1128bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1128c0:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  1128c4:	e1c320bc 	strh	r2, [r3, #12]
      err = ERR_OK;
    }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
    /* create a chained netbuf from the IO vectors. NOTE: we assemble a pbuf chain
       manually to avoid having to allocate, chain, and delete a netbuf for each iov */
    for (i = 0; i < msg->msg_iovlen; i++) {
  1128c8:	e3a03000 	mov	r3, #0
  1128cc:	e50b3008 	str	r3, [fp, #-8]
  1128d0:	ea000042 	b	1129e0 <lwip_sendmsg+0x530>
      struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  1128d4:	e3a02002 	mov	r2, #2
  1128d8:	e3a01000 	mov	r1, #0
  1128dc:	e3a00000 	mov	r0, #0
  1128e0:	eb001e6e 	bl	11a2a0 <pbuf_alloc>
  1128e4:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
      if (p == NULL) {
  1128e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1128ec:	e3530000 	cmp	r3, #0
  1128f0:	1a000002 	bne	112900 <lwip_sendmsg+0x450>
        err = ERR_MEM; /* let netbuf_delete() cleanup chain_buf */
  1128f4:	e3e03000 	mvn	r3, #0
  1128f8:	e54b300d 	strb	r3, [fp, #-13]
        break;
  1128fc:	ea00003c 	b	1129f4 <lwip_sendmsg+0x544>
      }
      p->payload = msg->msg_iov[i].iov_base;
  112900:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112904:	e5932008 	ldr	r2, [r3, #8]
  112908:	e51b3008 	ldr	r3, [fp, #-8]
  11290c:	e1a03183 	lsl	r3, r3, #3
  112910:	e0823003 	add	r3, r2, r3
  112914:	e5932000 	ldr	r2, [r3]
  112918:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11291c:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("iov_len < u16_t", msg->msg_iov[i].iov_len <= 0xFFFF);
  112920:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112924:	e5932008 	ldr	r2, [r3, #8]
  112928:	e51b3008 	ldr	r3, [fp, #-8]
  11292c:	e1a03183 	lsl	r3, r3, #3
  112930:	e0823003 	add	r3, r2, r3
  112934:	e5933004 	ldr	r3, [r3, #4]
  112938:	e3530801 	cmp	r3, #65536	; 0x10000
  11293c:	3a000006 	bcc	11295c <lwip_sendmsg+0x4ac>
  112940:	e3060ecc 	movw	r0, #28364	; 0x6ecc
  112944:	e3400014 	movt	r0, #20
  112948:	ebffc1f1 	bl	103114 <rt_kprintf>
  11294c:	e300144d 	movw	r1, #1101	; 0x44d
  112950:	e3060d78 	movw	r0, #28024	; 0x6d78
  112954:	e3400014 	movt	r0, #20
  112958:	ebffe1e4 	bl	10b0f0 <sys_arch_assert>
      p->len = p->tot_len = (u16_t)msg->msg_iov[i].iov_len;
  11295c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112960:	e5932008 	ldr	r2, [r3, #8]
  112964:	e51b3008 	ldr	r3, [fp, #-8]
  112968:	e1a03183 	lsl	r3, r3, #3
  11296c:	e0823003 	add	r3, r2, r3
  112970:	e5933004 	ldr	r3, [r3, #4]
  112974:	e6ff2073 	uxth	r2, r3
  112978:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11297c:	e1c320b8 	strh	r2, [r3, #8]
  112980:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112984:	e1d320b8 	ldrh	r2, [r3, #8]
  112988:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11298c:	e1c320ba 	strh	r2, [r3, #10]
      /* netbuf empty, add new pbuf */
      if (chain_buf->p == NULL) {
  112990:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112994:	e5933000 	ldr	r3, [r3]
  112998:	e3530000 	cmp	r3, #0
  11299c:	1a000007 	bne	1129c0 <lwip_sendmsg+0x510>
        chain_buf->p = chain_buf->ptr = p;
  1129a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1129a4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1129a8:	e5832004 	str	r2, [r3, #4]
  1129ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1129b0:	e5932004 	ldr	r2, [r3, #4]
  1129b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1129b8:	e5832000 	str	r2, [r3]
  1129bc:	ea000004 	b	1129d4 <lwip_sendmsg+0x524>
        /* add pbuf to existing pbuf chain */
      } else {
        pbuf_cat(chain_buf->p, p);
  1129c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1129c4:	e5933000 	ldr	r3, [r3]
  1129c8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1129cc:	e1a00003 	mov	r0, r3
  1129d0:	eb0021f0 	bl	11b198 <pbuf_cat>
    for (i = 0; i < msg->msg_iovlen; i++) {
  1129d4:	e51b3008 	ldr	r3, [fp, #-8]
  1129d8:	e2833001 	add	r3, r3, #1
  1129dc:	e50b3008 	str	r3, [fp, #-8]
  1129e0:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1129e4:	e593300c 	ldr	r3, [r3, #12]
  1129e8:	e51b2008 	ldr	r2, [fp, #-8]
  1129ec:	e1520003 	cmp	r2, r3
  1129f0:	baffffb7 	blt	1128d4 <lwip_sendmsg+0x424>
      }
    }
    /* save size of total chain */
    if (err == ERR_OK) {
  1129f4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1129f8:	e3530000 	cmp	r3, #0
  1129fc:	1a000003 	bne	112a10 <lwip_sendmsg+0x560>
      size = netbuf_len(chain_buf);
  112a00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112a04:	e5933000 	ldr	r3, [r3]
  112a08:	e1d330b8 	ldrh	r3, [r3, #8]
  112a0c:	e50b300c 	str	r3, [fp, #-12]
    }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    if (err == ERR_OK) {
  112a10:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112a14:	e3530000 	cmp	r3, #0
  112a18:	1a000006 	bne	112a38 <lwip_sendmsg+0x588>
        IP_SET_TYPE_VAL(chain_buf->addr, IPADDR_TYPE_V4);
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

      /* send the data */
      err = netconn_send(sock->conn, chain_buf);
  112a1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112a20:	e5933000 	ldr	r3, [r3]
  112a24:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  112a28:	e1a00003 	mov	r0, r3
  112a2c:	ebffe531 	bl	10bef8 <netconn_send>
  112a30:	e1a03000 	mov	r3, r0
  112a34:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* deallocated the buffer */
    netbuf_delete(chain_buf);
  112a38:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  112a3c:	ebfff53d 	bl	10ff38 <netbuf_delete>

    sock_set_errno(sock, err_to_errno(err));
  112a40:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112a44:	e1a00003 	mov	r0, r3
  112a48:	ebfff50f 	bl	10fe8c <err_to_errno>
  112a4c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  112a50:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112a54:	e6ef2073 	uxtb	r2, r3
  112a58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112a5c:	e5c32010 	strb	r2, [r3, #16]
  112a60:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112a64:	e3530000 	cmp	r3, #0
  112a68:	0a000003 	beq	112a7c <lwip_sendmsg+0x5cc>
  112a6c:	eb00991b 	bl	138ee0 <__errno_location>
  112a70:	e1a02000 	mov	r2, r0
  112a74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112a78:	e5823000 	str	r3, [r2]
    return (err == ERR_OK ? size : -1);
  112a7c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112a80:	e3530000 	cmp	r3, #0
  112a84:	1a000001 	bne	112a90 <lwip_sendmsg+0x5e0>
  112a88:	e51b300c 	ldr	r3, [fp, #-12]
  112a8c:	ea000000 	b	112a94 <lwip_sendmsg+0x5e4>
  112a90:	e3e03000 	mvn	r3, #0
  }
#else /* LWIP_UDP || LWIP_RAW */
  sock_set_errno(sock, err_to_errno(ERR_ARG));
  return -1;
#endif /* LWIP_UDP || LWIP_RAW */
}
  112a94:	e1a00003 	mov	r0, r3
  112a98:	e24bd004 	sub	sp, fp, #4
  112a9c:	e8bd8800 	pop	{fp, pc}

00112aa0 <lwip_sendto>:

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
  112aa0:	e92d4800 	push	{fp, lr}
  112aa4:	e28db004 	add	fp, sp, #4
  112aa8:	e24dd038 	sub	sp, sp, #56	; 0x38
  112aac:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  112ab0:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  112ab4:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  112ab8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct lwip_sock *sock;
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;
  sock = get_socket(s);
  112abc:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  112ac0:	ebfff919 	bl	110f2c <get_socket>
  112ac4:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  112ac8:	e51b300c 	ldr	r3, [fp, #-12]
  112acc:	e3530000 	cmp	r3, #0
  112ad0:	1a000001 	bne	112adc <lwip_sendto+0x3c>
    return -1;
  112ad4:	e3e03000 	mvn	r3, #0
  112ad8:	ea000081 	b	112ce4 <lwip_sendto+0x244>
  }
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  112adc:	e51b300c 	ldr	r3, [fp, #-12]
  112ae0:	e5933000 	ldr	r3, [r3]
  112ae4:	e5933000 	ldr	r3, [r3]
  112ae8:	e20330f0 	and	r3, r3, #240	; 0xf0
  112aec:	e3530010 	cmp	r3, #16
  112af0:	1a000006 	bne	112b10 <lwip_sendto+0x70>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
  112af4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112af8:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  112afc:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  112b00:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  112b04:	ebfffe15 	bl	112360 <lwip_send>
  112b08:	e1a03000 	mov	r3, r0
  112b0c:	ea000074 	b	112ce4 <lwip_sendto+0x244>
    return -1;
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
  112b10:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112b14:	e3530801 	cmp	r3, #65536	; 0x10000
  112b18:	3a000006 	bcc	112b38 <lwip_sendto+0x98>
  112b1c:	e3060edc 	movw	r0, #28380	; 0x6edc
  112b20:	e3400014 	movt	r0, #20
  112b24:	ebffc17a 	bl	103114 <rt_kprintf>
  112b28:	e300148e 	movw	r1, #1166	; 0x48e
  112b2c:	e3060d78 	movw	r0, #28024	; 0x6d78
  112b30:	e3400014 	movt	r0, #20
  112b34:	ebffe16d 	bl	10b0f0 <sys_arch_assert>
  short_size = (u16_t)size;
  112b38:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112b3c:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
  112b40:	e59b3004 	ldr	r3, [fp, #4]
  112b44:	e3530000 	cmp	r3, #0
  112b48:	1a000002 	bne	112b58 <lwip_sendto+0xb8>
  112b4c:	e59b3008 	ldr	r3, [fp, #8]
  112b50:	e3530000 	cmp	r3, #0
  112b54:	0a000021 	beq	112be0 <lwip_sendto+0x140>
  112b58:	e59b3008 	ldr	r3, [fp, #8]
  112b5c:	e3530010 	cmp	r3, #16
  112b60:	1a000007 	bne	112b84 <lwip_sendto+0xe4>
  112b64:	e59b3004 	ldr	r3, [fp, #4]
  112b68:	e5d33001 	ldrb	r3, [r3, #1]
  112b6c:	e3530002 	cmp	r3, #2
  112b70:	1a000003 	bne	112b84 <lwip_sendto+0xe4>
  112b74:	e59b3004 	ldr	r3, [fp, #4]
  112b78:	e2033003 	and	r3, r3, #3
  112b7c:	e3530000 	cmp	r3, #0
  112b80:	0a000016 	beq	112be0 <lwip_sendto+0x140>
  112b84:	e3060f00 	movw	r0, #28416	; 0x6f00
  112b88:	e3400014 	movt	r0, #20
  112b8c:	ebffc160 	bl	103114 <rt_kprintf>
  112b90:	e3001493 	movw	r1, #1171	; 0x493
  112b94:	e3060d78 	movw	r0, #28024	; 0x6d78
  112b98:	e3400014 	movt	r0, #20
  112b9c:	ebffe153 	bl	10b0f0 <sys_arch_assert>
  112ba0:	e3e0000f 	mvn	r0, #15
  112ba4:	ebfff4b8 	bl	10fe8c <err_to_errno>
  112ba8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  112bac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112bb0:	e6ef2073 	uxtb	r2, r3
  112bb4:	e51b300c 	ldr	r3, [fp, #-12]
  112bb8:	e5c32010 	strb	r2, [r3, #16]
  112bbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112bc0:	e3530000 	cmp	r3, #0
  112bc4:	0a000003 	beq	112bd8 <lwip_sendto+0x138>
  112bc8:	eb0098c4 	bl	138ee0 <__errno_location>
  112bcc:	e1a02000 	mov	r2, r0
  112bd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112bd4:	e5823000 	str	r3, [r2]
  112bd8:	e3e03000 	mvn	r3, #0
  112bdc:	ea000040 	b	112ce4 <lwip_sendto+0x244>
             IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
  112be0:	e3a03000 	mov	r3, #0
  112be4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  112be8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112bec:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
  112bf0:	e59b3004 	ldr	r3, [fp, #4]
  112bf4:	e3530000 	cmp	r3, #0
  112bf8:	0a000009 	beq	112c24 <lwip_sendto+0x184>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
  112bfc:	e59b3004 	ldr	r3, [fp, #4]
  112c00:	e5933004 	ldr	r3, [r3, #4]
  112c04:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112c08:	e59b3004 	ldr	r3, [fp, #4]
  112c0c:	e1d330b2 	ldrh	r3, [r3, #2]
  112c10:	e1a00003 	mov	r0, r3
  112c14:	eb000e71 	bl	1165e0 <lwip_htons>
  112c18:	e1a03000 	mov	r3, r0
  112c1c:	e14b30b8 	strh	r3, [fp, #-8]
  112c20:	ea000003 	b	112c34 <lwip_sendto+0x194>
  } else {
    remote_port = 0;
  112c24:	e3a03000 	mov	r3, #0
  112c28:	e14b30b8 	strh	r3, [fp, #-8]
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
  112c2c:	e3a03000 	mov	r3, #0
  112c30:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  }
  netbuf_fromport(&buf) = remote_port;
  112c34:	e15b30b8 	ldrh	r3, [fp, #-8]
  112c38:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
  112c3c:	e15b20be 	ldrh	r2, [fp, #-14]
  112c40:	e24b3028 	sub	r3, fp, #40	; 0x28
  112c44:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  112c48:	e1a00003 	mov	r0, r3
  112c4c:	ebfff534 	bl	110124 <netbuf_ref>
  112c50:	e1a03000 	mov	r3, r0
  112c54:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
  112c58:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112c5c:	e3530000 	cmp	r3, #0
  112c60:	1a000007 	bne	112c84 <lwip_sendto+0x1e4>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
  112c64:	e51b300c 	ldr	r3, [fp, #-12]
  112c68:	e5933000 	ldr	r3, [r3]
  112c6c:	e24b2028 	sub	r2, fp, #40	; 0x28
  112c70:	e1a01002 	mov	r1, r2
  112c74:	e1a00003 	mov	r0, r3
  112c78:	ebffe49e 	bl	10bef8 <netconn_send>
  112c7c:	e1a03000 	mov	r3, r0
  112c80:	e54b3005 	strb	r3, [fp, #-5]
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
  112c84:	e24b3028 	sub	r3, fp, #40	; 0x28
  112c88:	e1a00003 	mov	r0, r3
  112c8c:	ebfff504 	bl	1100a4 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
  112c90:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112c94:	e1a00003 	mov	r0, r3
  112c98:	ebfff47b 	bl	10fe8c <err_to_errno>
  112c9c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  112ca0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112ca4:	e6ef2073 	uxtb	r2, r3
  112ca8:	e51b300c 	ldr	r3, [fp, #-12]
  112cac:	e5c32010 	strb	r2, [r3, #16]
  112cb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112cb4:	e3530000 	cmp	r3, #0
  112cb8:	0a000003 	beq	112ccc <lwip_sendto+0x22c>
  112cbc:	eb009887 	bl	138ee0 <__errno_location>
  112cc0:	e1a02000 	mov	r2, r0
  112cc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112cc8:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? short_size : -1);
  112ccc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112cd0:	e3530000 	cmp	r3, #0
  112cd4:	1a000001 	bne	112ce0 <lwip_sendto+0x240>
  112cd8:	e15b30be 	ldrh	r3, [fp, #-14]
  112cdc:	ea000000 	b	112ce4 <lwip_sendto+0x244>
  112ce0:	e3e03000 	mvn	r3, #0
}
  112ce4:	e1a00003 	mov	r0, r3
  112ce8:	e24bd004 	sub	sp, fp, #4
  112cec:	e8bd8800 	pop	{fp, pc}

00112cf0 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
  112cf0:	e92d4800 	push	{fp, lr}
  112cf4:	e28db004 	add	fp, sp, #4
  112cf8:	e24dd018 	sub	sp, sp, #24
  112cfc:	e50b0010 	str	r0, [fp, #-16]
  112d00:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  112d04:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
  112d08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112d0c:	e3530002 	cmp	r3, #2
  112d10:	0a00000d 	beq	112d4c <lwip_socket+0x5c>
  112d14:	e3530003 	cmp	r3, #3
  112d18:	0a000002 	beq	112d28 <lwip_socket+0x38>
  112d1c:	e3530001 	cmp	r3, #1
  112d20:	0a000016 	beq	112d80 <lwip_socket+0x90>
  112d24:	ea00001c 	b	112d9c <lwip_socket+0xac>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
  112d28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112d2c:	e6ef3073 	uxtb	r3, r3
  112d30:	e303298c 	movw	r2, #14732	; 0x398c
  112d34:	e3402011 	movt	r2, #17
  112d38:	e1a01003 	mov	r1, r3
  112d3c:	e3a00040 	mov	r0, #64	; 0x40
  112d40:	ebffe158 	bl	10b2a8 <netconn_new_with_proto_and_callback>
  112d44:	e50b0008 	str	r0, [fp, #-8]
                                               (u8_t)protocol, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112d48:	ea000019 	b	112db4 <lwip_socket+0xc4>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
  112d4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112d50:	e3530088 	cmp	r3, #136	; 0x88
  112d54:	1a000001 	bne	112d60 <lwip_socket+0x70>
  112d58:	e3a03021 	mov	r3, #33	; 0x21
  112d5c:	ea000000 	b	112d64 <lwip_socket+0x74>
  112d60:	e3a03020 	mov	r3, #32
  112d64:	e303298c 	movw	r2, #14732	; 0x398c
  112d68:	e3402011 	movt	r2, #17
  112d6c:	e3a01000 	mov	r1, #0
  112d70:	e1a00003 	mov	r0, r3
  112d74:	ebffe14b 	bl	10b2a8 <netconn_new_with_proto_and_callback>
  112d78:	e50b0008 	str	r0, [fp, #-8]
                 ((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP)) ,
                 event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112d7c:	ea00000c 	b	112db4 <lwip_socket+0xc4>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
  112d80:	e303298c 	movw	r2, #14732	; 0x398c
  112d84:	e3402011 	movt	r2, #17
  112d88:	e3a01000 	mov	r1, #0
  112d8c:	e3a00010 	mov	r0, #16
  112d90:	ebffe144 	bl	10b2a8 <netconn_new_with_proto_and_callback>
  112d94:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112d98:	ea000005 	b	112db4 <lwip_socket+0xc4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
  112d9c:	eb00984f 	bl	138ee0 <__errno_location>
  112da0:	e1a02000 	mov	r2, r0
  112da4:	e3a03016 	mov	r3, #22
  112da8:	e5823000 	str	r3, [r2]
    return -1;
  112dac:	e3e03000 	mvn	r3, #0
  112db0:	ea00001b 	b	112e24 <lwip_socket+0x134>
  }

  if (!conn) {
  112db4:	e51b3008 	ldr	r3, [fp, #-8]
  112db8:	e3530000 	cmp	r3, #0
  112dbc:	1a000005 	bne	112dd8 <lwip_socket+0xe8>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
  112dc0:	eb009846 	bl	138ee0 <__errno_location>
  112dc4:	e1a02000 	mov	r2, r0
  112dc8:	e3a03069 	mov	r3, #105	; 0x69
  112dcc:	e5823000 	str	r3, [r2]
    return -1;
  112dd0:	e3e03000 	mvn	r3, #0
  112dd4:	ea000012 	b	112e24 <lwip_socket+0x134>
  }

  i = alloc_socket(conn, 0);
  112dd8:	e3a01000 	mov	r1, #0
  112ddc:	e51b0008 	ldr	r0, [fp, #-8]
  112de0:	ebfff8a1 	bl	11106c <alloc_socket>
  112de4:	e50b000c 	str	r0, [fp, #-12]

  if (i == -1) {
  112de8:	e51b300c 	ldr	r3, [fp, #-12]
  112dec:	e3730001 	cmn	r3, #1
  112df0:	1a000007 	bne	112e14 <lwip_socket+0x124>
    netconn_delete(conn);
  112df4:	e51b0008 	ldr	r0, [fp, #-8]
  112df8:	ebffe18c 	bl	10b430 <netconn_delete>
    set_errno(ENFILE);
  112dfc:	eb009837 	bl	138ee0 <__errno_location>
  112e00:	e1a02000 	mov	r2, r0
  112e04:	e3a03017 	mov	r3, #23
  112e08:	e5823000 	str	r3, [r2]
    return -1;
  112e0c:	e3e03000 	mvn	r3, #0
  112e10:	ea000003 	b	112e24 <lwip_socket+0x134>
  }
  conn->socket = i;
  112e14:	e51b3008 	ldr	r3, [fp, #-8]
  112e18:	e51b200c 	ldr	r2, [fp, #-12]
  112e1c:	e583201c 	str	r2, [r3, #28]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
  112e20:	e51b300c 	ldr	r3, [fp, #-12]
}
  112e24:	e1a00003 	mov	r0, r3
  112e28:	e24bd004 	sub	sp, fp, #4
  112e2c:	e8bd8800 	pop	{fp, pc}

00112e30 <lwip_write>:

int
lwip_write(int s, const void *data, size_t size)
{
  112e30:	e92d4800 	push	{fp, lr}
  112e34:	e28db004 	add	fp, sp, #4
  112e38:	e24dd010 	sub	sp, sp, #16
  112e3c:	e50b0008 	str	r0, [fp, #-8]
  112e40:	e50b100c 	str	r1, [fp, #-12]
  112e44:	e50b2010 	str	r2, [fp, #-16]
  return lwip_send(s, data, size, 0);
  112e48:	e3a03000 	mov	r3, #0
  112e4c:	e51b2010 	ldr	r2, [fp, #-16]
  112e50:	e51b100c 	ldr	r1, [fp, #-12]
  112e54:	e51b0008 	ldr	r0, [fp, #-8]
  112e58:	ebfffd40 	bl	112360 <lwip_send>
  112e5c:	e1a03000 	mov	r3, r0
}
  112e60:	e1a00003 	mov	r0, r3
  112e64:	e24bd004 	sub	sp, fp, #4
  112e68:	e8bd8800 	pop	{fp, pc}

00112e6c <lwip_writev>:

int
lwip_writev(int s, const struct iovec *iov, int iovcnt)
{
  112e6c:	e92d4800 	push	{fp, lr}
  112e70:	e28db004 	add	fp, sp, #4
  112e74:	e24dd030 	sub	sp, sp, #48	; 0x30
  112e78:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  112e7c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  112e80:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct msghdr msg;

  msg.msg_name = NULL;
  112e84:	e3a03000 	mov	r3, #0
  112e88:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  msg.msg_namelen = 0;
  112e8c:	e3a03000 	mov	r3, #0
  112e90:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* Hack: we have to cast via number to cast from 'const' pointer to non-const.
     Blame the opengroup standard for this inconsistency. */
  msg.msg_iov = LWIP_CONST_CAST(struct iovec *, iov);
  112e94:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112e98:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg_iovlen = iovcnt;
  112e9c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  112ea0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  msg.msg_control = NULL;
  112ea4:	e3a03000 	mov	r3, #0
  112ea8:	e50b3010 	str	r3, [fp, #-16]
  msg.msg_controllen = 0;
  112eac:	e3a03000 	mov	r3, #0
  112eb0:	e50b300c 	str	r3, [fp, #-12]
  msg.msg_flags = 0;
  112eb4:	e3a03000 	mov	r3, #0
  112eb8:	e50b3008 	str	r3, [fp, #-8]
  return lwip_sendmsg(s, &msg, 0);
  112ebc:	e24b3020 	sub	r3, fp, #32
  112ec0:	e3a02000 	mov	r2, #0
  112ec4:	e1a01003 	mov	r1, r3
  112ec8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  112ecc:	ebfffd77 	bl	1124b0 <lwip_sendmsg>
  112ed0:	e1a03000 	mov	r3, r0
}
  112ed4:	e1a00003 	mov	r0, r3
  112ed8:	e24bd004 	sub	sp, fp, #4
  112edc:	e8bd8800 	pop	{fp, pc}

00112ee0 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
  112ee0:	e92d4800 	push	{fp, lr}
  112ee4:	e28db004 	add	fp, sp, #4
  112ee8:	e24ddd07 	sub	sp, sp, #448	; 0x1c0
  112eec:	e50b01b8 	str	r0, [fp, #-440]	; 0xfffffe48
  112ef0:	e50b11bc 	str	r1, [fp, #-444]	; 0xfffffe44
  112ef4:	e50b21c0 	str	r2, [fp, #-448]	; 0xfffffe40
  112ef8:	e50b31c4 	str	r3, [fp, #-452]	; 0xfffffe3c
  int i, nready = 0;
  112efc:	e3a03000 	mov	r3, #0
  112f00:	e50b300c 	str	r3, [fp, #-12]
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
  112f04:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  112f08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  112f0c:	e3a03020 	mov	r3, #32
  112f10:	e50b3010 	str	r3, [fp, #-16]
  112f14:	ea000007 	b	112f38 <lwip_selscan+0x58>
  112f18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112f1c:	e2832004 	add	r2, r3, #4
  112f20:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  112f24:	e3a02000 	mov	r2, #0
  112f28:	e5832000 	str	r2, [r3]
  112f2c:	e51b3010 	ldr	r3, [fp, #-16]
  112f30:	e2433001 	sub	r3, r3, #1
  112f34:	e50b3010 	str	r3, [fp, #-16]
  112f38:	e51b3010 	ldr	r3, [fp, #-16]
  112f3c:	e3530000 	cmp	r3, #0
  112f40:	1afffff4 	bne	112f18 <lwip_selscan+0x38>
  FD_ZERO(&lwriteset);
  112f44:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  112f48:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  112f4c:	e3a03020 	mov	r3, #32
  112f50:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  112f54:	ea000007 	b	112f78 <lwip_selscan+0x98>
  112f58:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112f5c:	e2832004 	add	r2, r3, #4
  112f60:	e50b201c 	str	r2, [fp, #-28]	; 0xffffffe4
  112f64:	e3a02000 	mov	r2, #0
  112f68:	e5832000 	str	r2, [r3]
  112f6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112f70:	e2433001 	sub	r3, r3, #1
  112f74:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  112f78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112f7c:	e3530000 	cmp	r3, #0
  112f80:	1afffff4 	bne	112f58 <lwip_selscan+0x78>
  FD_ZERO(&lexceptset);
  112f84:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  112f88:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  112f8c:	e3a03020 	mov	r3, #32
  112f90:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112f94:	ea000007 	b	112fb8 <lwip_selscan+0xd8>
  112f98:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112f9c:	e2832004 	add	r2, r3, #4
  112fa0:	e50b2024 	str	r2, [fp, #-36]	; 0xffffffdc
  112fa4:	e3a02000 	mov	r2, #0
  112fa8:	e5832000 	str	r2, [r3]
  112fac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  112fb0:	e2433001 	sub	r3, r3, #1
  112fb4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112fb8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  112fbc:	e3530000 	cmp	r3, #0
  112fc0:	1afffff4 	bne	112f98 <lwip_selscan+0xb8>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  112fc4:	e3a03000 	mov	r3, #0
  112fc8:	e50b3008 	str	r3, [fp, #-8]
  112fcc:	ea0000aa 	b	11327c <lwip_selscan+0x39c>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
  112fd0:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112fd4:	e3530000 	cmp	r3, #0
  112fd8:	0a000009 	beq	113004 <lwip_selscan+0x124>
  112fdc:	e51b3008 	ldr	r3, [fp, #-8]
  112fe0:	e1a022a3 	lsr	r2, r3, #5
  112fe4:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112fe8:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112fec:	e51b3008 	ldr	r3, [fp, #-8]
  112ff0:	e203301f 	and	r3, r3, #31
  112ff4:	e1a03332 	lsr	r3, r2, r3
  112ff8:	e2033001 	and	r3, r3, #1
  112ffc:	e3530000 	cmp	r3, #0
  113000:	1a000019 	bne	11306c <lwip_selscan+0x18c>
  113004:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113008:	e3530000 	cmp	r3, #0
  11300c:	0a000009 	beq	113038 <lwip_selscan+0x158>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
  113010:	e51b3008 	ldr	r3, [fp, #-8]
  113014:	e1a022a3 	lsr	r2, r3, #5
  113018:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  11301c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113020:	e51b3008 	ldr	r3, [fp, #-8]
  113024:	e203301f 	and	r3, r3, #31
  113028:	e1a03332 	lsr	r3, r2, r3
  11302c:	e2033001 	and	r3, r3, #1
  113030:	e3530000 	cmp	r3, #0
  113034:	1a00000c 	bne	11306c <lwip_selscan+0x18c>
  113038:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  11303c:	e3530000 	cmp	r3, #0
  113040:	0a000089 	beq	11326c <lwip_selscan+0x38c>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
  113044:	e51b3008 	ldr	r3, [fp, #-8]
  113048:	e1a022a3 	lsr	r2, r3, #5
  11304c:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113050:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113054:	e51b3008 	ldr	r3, [fp, #-8]
  113058:	e203301f 	and	r3, r3, #31
  11305c:	e1a03332 	lsr	r3, r2, r3
  113060:	e2033001 	and	r3, r3, #1
  113064:	e3530000 	cmp	r3, #0
  113068:	0a00007f 	beq	11326c <lwip_selscan+0x38c>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
  11306c:	ebffbc72 	bl	10223c <rt_enter_critical>
    sock = tryget_socket(i);
  113070:	e51b0008 	ldr	r0, [fp, #-8]
  113074:	ebfff7d1 	bl	110fc0 <tryget_socket>
  113078:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if (sock != NULL) {
  11307c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113080:	e3530000 	cmp	r3, #0
  113084:	0a000076 	beq	113264 <lwip_selscan+0x384>
      void* lastdata = sock->lastdata;
  113088:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11308c:	e5933004 	ldr	r3, [r3, #4]
  113090:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      s16_t rcvevent = sock->rcvevent;
  113094:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113098:	e1d330ba 	ldrh	r3, [r3, #10]
  11309c:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
      u16_t sendevent = sock->sendevent;
  1130a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1130a4:	e1d330bc 	ldrh	r3, [r3, #12]
  1130a8:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
      u16_t errevent = sock->errevent;
  1130ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1130b0:	e1d330be 	ldrh	r3, [r3, #14]
  1130b4:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
      SYS_ARCH_UNPROTECT(lev);
  1130b8:	ebffbc65 	bl	102254 <rt_exit_critical>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
  1130bc:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1130c0:	e3530000 	cmp	r3, #0
  1130c4:	0a000021 	beq	113150 <lwip_selscan+0x270>
  1130c8:	e51b3008 	ldr	r3, [fp, #-8]
  1130cc:	e1a022a3 	lsr	r2, r3, #5
  1130d0:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1130d4:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1130d8:	e51b3008 	ldr	r3, [fp, #-8]
  1130dc:	e203301f 	and	r3, r3, #31
  1130e0:	e1a03332 	lsr	r3, r2, r3
  1130e4:	e2033001 	and	r3, r3, #1
  1130e8:	e3530000 	cmp	r3, #0
  1130ec:	0a000017 	beq	113150 <lwip_selscan+0x270>
  1130f0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1130f4:	e3530000 	cmp	r3, #0
  1130f8:	1a000002 	bne	113108 <lwip_selscan+0x228>
  1130fc:	e15b32fe 	ldrsh	r3, [fp, #-46]	; 0xffffffd2
  113100:	e3530000 	cmp	r3, #0
  113104:	da000011 	ble	113150 <lwip_selscan+0x270>
        FD_SET(i, &lreadset);
  113108:	e51b3008 	ldr	r3, [fp, #-8]
  11310c:	e1a022a3 	lsr	r2, r3, #5
  113110:	e1a03102 	lsl	r3, r2, #2
  113114:	e24b1004 	sub	r1, fp, #4
  113118:	e0813003 	add	r3, r1, r3
  11311c:	e51310b0 	ldr	r1, [r3, #-176]	; 0xffffff50
  113120:	e51b3008 	ldr	r3, [fp, #-8]
  113124:	e203301f 	and	r3, r3, #31
  113128:	e3a00001 	mov	r0, #1
  11312c:	e1a03310 	lsl	r3, r0, r3
  113130:	e1811003 	orr	r1, r1, r3
  113134:	e1a03102 	lsl	r3, r2, #2
  113138:	e24b2004 	sub	r2, fp, #4
  11313c:	e0823003 	add	r3, r2, r3
  113140:	e50310b0 	str	r1, [r3, #-176]	; 0xffffff50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
  113144:	e51b300c 	ldr	r3, [fp, #-12]
  113148:	e2833001 	add	r3, r3, #1
  11314c:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
  113150:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113154:	e3530000 	cmp	r3, #0
  113158:	0a00001e 	beq	1131d8 <lwip_selscan+0x2f8>
  11315c:	e51b3008 	ldr	r3, [fp, #-8]
  113160:	e1a022a3 	lsr	r2, r3, #5
  113164:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113168:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  11316c:	e51b3008 	ldr	r3, [fp, #-8]
  113170:	e203301f 	and	r3, r3, #31
  113174:	e1a03332 	lsr	r3, r2, r3
  113178:	e2033001 	and	r3, r3, #1
  11317c:	e3530000 	cmp	r3, #0
  113180:	0a000014 	beq	1131d8 <lwip_selscan+0x2f8>
  113184:	e15b33b0 	ldrh	r3, [fp, #-48]	; 0xffffffd0
  113188:	e3530000 	cmp	r3, #0
  11318c:	0a000011 	beq	1131d8 <lwip_selscan+0x2f8>
        FD_SET(i, &lwriteset);
  113190:	e51b3008 	ldr	r3, [fp, #-8]
  113194:	e1a022a3 	lsr	r2, r3, #5
  113198:	e1a03102 	lsl	r3, r2, #2
  11319c:	e24b1004 	sub	r1, fp, #4
  1131a0:	e0813003 	add	r3, r1, r3
  1131a4:	e5131130 	ldr	r1, [r3, #-304]	; 0xfffffed0
  1131a8:	e51b3008 	ldr	r3, [fp, #-8]
  1131ac:	e203301f 	and	r3, r3, #31
  1131b0:	e3a00001 	mov	r0, #1
  1131b4:	e1a03310 	lsl	r3, r0, r3
  1131b8:	e1811003 	orr	r1, r1, r3
  1131bc:	e1a03102 	lsl	r3, r2, #2
  1131c0:	e24b2004 	sub	r2, fp, #4
  1131c4:	e0823003 	add	r3, r2, r3
  1131c8:	e5031130 	str	r1, [r3, #-304]	; 0xfffffed0
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
  1131cc:	e51b300c 	ldr	r3, [fp, #-12]
  1131d0:	e2833001 	add	r3, r3, #1
  1131d4:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
  1131d8:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1131dc:	e3530000 	cmp	r3, #0
  1131e0:	0a000022 	beq	113270 <lwip_selscan+0x390>
  1131e4:	e51b3008 	ldr	r3, [fp, #-8]
  1131e8:	e1a022a3 	lsr	r2, r3, #5
  1131ec:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1131f0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1131f4:	e51b3008 	ldr	r3, [fp, #-8]
  1131f8:	e203301f 	and	r3, r3, #31
  1131fc:	e1a03332 	lsr	r3, r2, r3
  113200:	e2033001 	and	r3, r3, #1
  113204:	e3530000 	cmp	r3, #0
  113208:	0a000018 	beq	113270 <lwip_selscan+0x390>
  11320c:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  113210:	e3530000 	cmp	r3, #0
  113214:	0a000015 	beq	113270 <lwip_selscan+0x390>
        FD_SET(i, &lexceptset);
  113218:	e51b3008 	ldr	r3, [fp, #-8]
  11321c:	e1a022a3 	lsr	r2, r3, #5
  113220:	e1a03102 	lsl	r3, r2, #2
  113224:	e24b1004 	sub	r1, fp, #4
  113228:	e0813003 	add	r3, r1, r3
  11322c:	e51311b0 	ldr	r1, [r3, #-432]	; 0xfffffe50
  113230:	e51b3008 	ldr	r3, [fp, #-8]
  113234:	e203301f 	and	r3, r3, #31
  113238:	e3a00001 	mov	r0, #1
  11323c:	e1a03310 	lsl	r3, r0, r3
  113240:	e1811003 	orr	r1, r1, r3
  113244:	e1a03102 	lsl	r3, r2, #2
  113248:	e24b2004 	sub	r2, fp, #4
  11324c:	e0823003 	add	r3, r2, r3
  113250:	e50311b0 	str	r1, [r3, #-432]	; 0xfffffe50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
  113254:	e51b300c 	ldr	r3, [fp, #-12]
  113258:	e2833001 	add	r3, r3, #1
  11325c:	e50b300c 	str	r3, [fp, #-12]
  113260:	ea000002 	b	113270 <lwip_selscan+0x390>
      }
    } else {
      SYS_ARCH_UNPROTECT(lev);
  113264:	ebffbbfa 	bl	102254 <rt_exit_critical>
  113268:	ea000000 	b	113270 <lwip_selscan+0x390>
      continue;
  11326c:	e320f000 	nop	{0}
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  113270:	e51b3008 	ldr	r3, [fp, #-8]
  113274:	e2833001 	add	r3, r3, #1
  113278:	e50b3008 	str	r3, [fp, #-8]
  11327c:	e51b2008 	ldr	r2, [fp, #-8]
  113280:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113284:	e1520003 	cmp	r2, r3
  113288:	baffff50 	blt	112fd0 <lwip_selscan+0xf0>
      /* continue on to next FD in list */
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
  11328c:	e59b3004 	ldr	r3, [fp, #4]
  113290:	e1a00003 	mov	r0, r3
  113294:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  113298:	e3a02080 	mov	r2, #128	; 0x80
  11329c:	e1a01003 	mov	r1, r3
  1132a0:	eb00b6bd 	bl	140d9c <memcpy>
  *writeset_out = lwriteset;
  1132a4:	e59b3008 	ldr	r3, [fp, #8]
  1132a8:	e1a00003 	mov	r0, r3
  1132ac:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  1132b0:	e3a02080 	mov	r2, #128	; 0x80
  1132b4:	e1a01003 	mov	r1, r3
  1132b8:	eb00b6b7 	bl	140d9c <memcpy>
  *exceptset_out = lexceptset;
  1132bc:	e59b300c 	ldr	r3, [fp, #12]
  1132c0:	e1a00003 	mov	r0, r3
  1132c4:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  1132c8:	e3a02080 	mov	r2, #128	; 0x80
  1132cc:	e1a01003 	mov	r1, r3
  1132d0:	eb00b6b1 	bl	140d9c <memcpy>

  LWIP_ASSERT("nready >= 0", nready >= 0);
  1132d4:	e51b300c 	ldr	r3, [fp, #-12]
  1132d8:	e3530000 	cmp	r3, #0
  1132dc:	aa000006 	bge	1132fc <lwip_selscan+0x41c>
  1132e0:	e3060f20 	movw	r0, #28448	; 0x6f20
  1132e4:	e3400014 	movt	r0, #20
  1132e8:	ebffbf89 	bl	103114 <rt_kprintf>
  1132ec:	e3001569 	movw	r1, #1385	; 0x569
  1132f0:	e3060d78 	movw	r0, #28024	; 0x6d78
  1132f4:	e3400014 	movt	r0, #20
  1132f8:	ebffdf7c 	bl	10b0f0 <sys_arch_assert>
  return nready;
  1132fc:	e51b300c 	ldr	r3, [fp, #-12]
}
  113300:	e1a00003 	mov	r0, r3
  113304:	e24bd004 	sub	sp, fp, #4
  113308:	e8bd8800 	pop	{fp, pc}

0011330c <lwip_select>:

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
  11330c:	e92d4800 	push	{fp, lr}
  113310:	e28db004 	add	fp, sp, #4
  113314:	e24ddf76 	sub	sp, sp, #472	; 0x1d8
  113318:	e50b01c0 	str	r0, [fp, #-448]	; 0xfffffe40
  11331c:	e50b11c4 	str	r1, [fp, #-452]	; 0xfffffe3c
  113320:	e50b21c8 	str	r2, [fp, #-456]	; 0xfffffe38
  113324:	e50b31cc 	str	r3, [fp, #-460]	; 0xfffffe34
  u32_t waitres = 0;
  113328:	e3a03000 	mov	r3, #0
  11332c:	e50b3008 	str	r3, [fp, #-8]
                  timeout ? (s32_t)timeout->tv_sec : (s32_t)-1,
                  timeout ? (s32_t)timeout->tv_usec : (s32_t)-1));

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  113330:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113334:	e58d3008 	str	r3, [sp, #8]
  113338:	e24b3e12 	sub	r3, fp, #288	; 0x120
  11333c:	e58d3004 	str	r3, [sp, #4]
  113340:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  113344:	e58d3000 	str	r3, [sp]
  113348:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  11334c:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  113350:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  113354:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  113358:	ebfffee0 	bl	112ee0 <lwip_selscan>
  11335c:	e50b000c 	str	r0, [fp, #-12]

  /* If we don't have any current events, then suspend if we are supposed to */
  if (!nready) {
  113360:	e51b300c 	ldr	r3, [fp, #-12]
  113364:	e3530000 	cmp	r3, #0
  113368:	1a000163 	bne	1138fc <lwip_select+0x5f0>
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
  11336c:	e59b3004 	ldr	r3, [fp, #4]
  113370:	e3530000 	cmp	r3, #0
  113374:	0a000007 	beq	113398 <lwip_select+0x8c>
  113378:	e59b3004 	ldr	r3, [fp, #4]
  11337c:	e1c320d0 	ldrd	r2, [r3]
  113380:	e1923003 	orrs	r3, r2, r3
  113384:	1a000003 	bne	113398 <lwip_select+0x8c>
  113388:	e59b3004 	ldr	r3, [fp, #4]
  11338c:	e5933008 	ldr	r3, [r3, #8]
  113390:	e3530000 	cmp	r3, #0
  113394:	0a00015a 	beq	113904 <lwip_select+0x5f8>
    /* None ready: add our semaphore to list:
       We don't actually need any dynamic memory. Our entry on the
       list is only valid while we are in this function, so it's ok
       to use local variables. */

    select_cb.next = NULL;
  113398:	e3a03000 	mov	r3, #0
  11339c:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    select_cb.prev = NULL;
  1133a0:	e3a03000 	mov	r3, #0
  1133a4:	e50b31b8 	str	r3, [fp, #-440]	; 0xfffffe48
    select_cb.readset = readset;
  1133a8:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1133ac:	e50b31b4 	str	r3, [fp, #-436]	; 0xfffffe4c
    select_cb.writeset = writeset;
  1133b0:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1133b4:	e50b31b0 	str	r3, [fp, #-432]	; 0xfffffe50
    select_cb.exceptset = exceptset;
  1133b8:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1133bc:	e50b31ac 	str	r3, [fp, #-428]	; 0xfffffe54
    select_cb.sem_signalled = 0;
  1133c0:	e3a03000 	mov	r3, #0
  1133c4:	e50b31a8 	str	r3, [fp, #-424]	; 0xfffffe58
#if LWIP_NETCONN_SEM_PER_THREAD
    select_cb.sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    if (sys_sem_new(&select_cb.sem, 0) != ERR_OK) {
  1133c8:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  1133cc:	e2833018 	add	r3, r3, #24
  1133d0:	e3a01000 	mov	r1, #0
  1133d4:	e1a00003 	mov	r0, r3
  1133d8:	ebffdd17 	bl	10a83c <sys_sem_new>
  1133dc:	e1a03000 	mov	r3, r0
  1133e0:	e3530000 	cmp	r3, #0
  1133e4:	0a000005 	beq	113400 <lwip_select+0xf4>
      /* failed to create semaphore */
      set_errno(ENOMEM);
  1133e8:	eb0096bc 	bl	138ee0 <__errno_location>
  1133ec:	e1a02000 	mov	r2, r0
  1133f0:	e3a0300c 	mov	r3, #12
  1133f4:	e5823000 	str	r3, [r2]
      return -1;
  1133f8:	e3e03000 	mvn	r3, #0
  1133fc:	ea00015f 	b	113980 <lwip_select+0x674>
    }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    /* Protect the select_cb_list */
    SYS_ARCH_PROTECT(lev);
  113400:	ebffbb8d 	bl	10223c <rt_enter_critical>

    /* Put this select_cb on top of list */
    select_cb.next = select_cb_list;
  113404:	e30d3c30 	movw	r3, #56368	; 0xdc30
  113408:	e3403014 	movt	r3, #20
  11340c:	e5933000 	ldr	r3, [r3]
  113410:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    if (select_cb_list != NULL) {
  113414:	e30d3c30 	movw	r3, #56368	; 0xdc30
  113418:	e3403014 	movt	r3, #20
  11341c:	e5933000 	ldr	r3, [r3]
  113420:	e3530000 	cmp	r3, #0
  113424:	0a000004 	beq	11343c <lwip_select+0x130>
      select_cb_list->prev = &select_cb;
  113428:	e30d3c30 	movw	r3, #56368	; 0xdc30
  11342c:	e3403014 	movt	r3, #20
  113430:	e5933000 	ldr	r3, [r3]
  113434:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  113438:	e5832004 	str	r2, [r3, #4]
    }
    select_cb_list = &select_cb;
  11343c:	e30d3c30 	movw	r3, #56368	; 0xdc30
  113440:	e3403014 	movt	r3, #20
  113444:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  113448:	e5832000 	str	r2, [r3]
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  11344c:	e30d3c34 	movw	r3, #56372	; 0xdc34
  113450:	e3403014 	movt	r3, #20
  113454:	e5933000 	ldr	r3, [r3]
  113458:	e2832001 	add	r2, r3, #1
  11345c:	e30d3c34 	movw	r3, #56372	; 0xdc34
  113460:	e3403014 	movt	r3, #20
  113464:	e5832000 	str	r2, [r3]

    /* Now we can safely unprotect */
    SYS_ARCH_UNPROTECT(lev);
  113468:	ebffbb79 	bl	102254 <rt_exit_critical>

    /* Increase select_waiting for each socket we are interested in */
    maxfdp2 = maxfdp1;
  11346c:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113470:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  113474:	e3a03000 	mov	r3, #0
  113478:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  11347c:	ea000049 	b	1135a8 <lwip_select+0x29c>
      if ((readset && FD_ISSET(i, readset)) ||
  113480:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113484:	e3530000 	cmp	r3, #0
  113488:	0a000009 	beq	1134b4 <lwip_select+0x1a8>
  11348c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113490:	e1a022a3 	lsr	r2, r3, #5
  113494:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113498:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  11349c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1134a0:	e203301f 	and	r3, r3, #31
  1134a4:	e1a03332 	lsr	r3, r2, r3
  1134a8:	e2033001 	and	r3, r3, #1
  1134ac:	e3530000 	cmp	r3, #0
  1134b0:	1a000019 	bne	11351c <lwip_select+0x210>
  1134b4:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1134b8:	e3530000 	cmp	r3, #0
  1134bc:	0a000009 	beq	1134e8 <lwip_select+0x1dc>
          (writeset && FD_ISSET(i, writeset)) ||
  1134c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1134c4:	e1a022a3 	lsr	r2, r3, #5
  1134c8:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1134cc:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1134d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1134d4:	e203301f 	and	r3, r3, #31
  1134d8:	e1a03332 	lsr	r3, r2, r3
  1134dc:	e2033001 	and	r3, r3, #1
  1134e0:	e3530000 	cmp	r3, #0
  1134e4:	1a00000c 	bne	11351c <lwip_select+0x210>
  1134e8:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1134ec:	e3530000 	cmp	r3, #0
  1134f0:	0a000029 	beq	11359c <lwip_select+0x290>
          (exceptset && FD_ISSET(i, exceptset))) {
  1134f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1134f8:	e1a022a3 	lsr	r2, r3, #5
  1134fc:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113500:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113504:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113508:	e203301f 	and	r3, r3, #31
  11350c:	e1a03332 	lsr	r3, r2, r3
  113510:	e2033001 	and	r3, r3, #1
  113514:	e3530000 	cmp	r3, #0
  113518:	0a00001f 	beq	11359c <lwip_select+0x290>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  11351c:	ebffbb46 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  113520:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  113524:	ebfff6a5 	bl	110fc0 <tryget_socket>
  113528:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sock != NULL) {
  11352c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113530:	e3530000 	cmp	r3, #0
  113534:	0a000011 	beq	113580 <lwip_select+0x274>
          sock->select_waiting++;
  113538:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11353c:	e5d33011 	ldrb	r3, [r3, #17]
  113540:	e2833001 	add	r3, r3, #1
  113544:	e6ef2073 	uxtb	r2, r3
  113548:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11354c:	e5c32011 	strb	r2, [r3, #17]
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  113550:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113554:	e5d33011 	ldrb	r3, [r3, #17]
  113558:	e3530000 	cmp	r3, #0
  11355c:	1a00000d 	bne	113598 <lwip_select+0x28c>
  113560:	e3060f2c 	movw	r0, #28460	; 0x6f2c
  113564:	e3400014 	movt	r0, #20
  113568:	ebffbee9 	bl	103114 <rt_kprintf>
  11356c:	e30015be 	movw	r1, #1470	; 0x5be
  113570:	e3060d78 	movw	r0, #28024	; 0x6d78
  113574:	e3400014 	movt	r0, #20
  113578:	ebffdedc 	bl	10b0f0 <sys_arch_assert>
  11357c:	ea000005 	b	113598 <lwip_select+0x28c>
        } else {
          /* Not a valid socket */
          nready = -1;
  113580:	e3e03000 	mvn	r3, #0
  113584:	e50b300c 	str	r3, [fp, #-12]
          maxfdp2 = i;
  113588:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11358c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          SYS_ARCH_UNPROTECT(lev);
  113590:	ebffbb2f 	bl	102254 <rt_exit_critical>
          break;
  113594:	ea000007 	b	1135b8 <lwip_select+0x2ac>
        }
        SYS_ARCH_UNPROTECT(lev);
  113598:	ebffbb2d 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  11359c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1135a0:	e2833001 	add	r3, r3, #1
  1135a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1135a8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1135ac:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  1135b0:	e1520003 	cmp	r2, r3
  1135b4:	baffffb1 	blt	113480 <lwip_select+0x174>
      }
    }

    if (nready >= 0) {
  1135b8:	e51b300c 	ldr	r3, [fp, #-12]
  1135bc:	e3530000 	cmp	r3, #0
  1135c0:	ba00002e 	blt	113680 <lwip_select+0x374>
      /* Call lwip_selscan again: there could have been events between
         the last scan (without us on the list) and putting us on the list! */
      nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  1135c4:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  1135c8:	e58d3008 	str	r3, [sp, #8]
  1135cc:	e24b3e12 	sub	r3, fp, #288	; 0x120
  1135d0:	e58d3004 	str	r3, [sp, #4]
  1135d4:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1135d8:	e58d3000 	str	r3, [sp]
  1135dc:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1135e0:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  1135e4:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  1135e8:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  1135ec:	ebfffe3b 	bl	112ee0 <lwip_selscan>
  1135f0:	e50b000c 	str	r0, [fp, #-12]
      if (!nready) {
  1135f4:	e51b300c 	ldr	r3, [fp, #-12]
  1135f8:	e3530000 	cmp	r3, #0
  1135fc:	1a00001f 	bne	113680 <lwip_select+0x374>
        /* Still none ready, just wait to be woken */
        if (timeout == 0) {
  113600:	e59b3004 	ldr	r3, [fp, #4]
  113604:	e3530000 	cmp	r3, #0
  113608:	1a000002 	bne	113618 <lwip_select+0x30c>
          /* Wait forever */
          msectimeout = 0;
  11360c:	e3a03000 	mov	r3, #0
  113610:	e50b3010 	str	r3, [fp, #-16]
  113614:	ea000013 	b	113668 <lwip_select+0x35c>
        } else {
          msectimeout =  ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
  113618:	e59b3004 	ldr	r3, [fp, #4]
  11361c:	e1c320d0 	ldrd	r2, [r3]
  113620:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  113624:	e0000293 	mul	r0, r3, r2
  113628:	e59b3004 	ldr	r3, [fp, #4]
  11362c:	e5933008 	ldr	r3, [r3, #8]
  113630:	e2831f7d 	add	r1, r3, #500	; 0x1f4
  113634:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  113638:	e3413062 	movt	r3, #4194	; 0x1062
  11363c:	e0c32391 	smull	r2, r3, r1, r3
  113640:	e1a02343 	asr	r2, r3, #6
  113644:	e1a03fc1 	asr	r3, r1, #31
  113648:	e0423003 	sub	r3, r2, r3
  11364c:	e0803003 	add	r3, r0, r3
  113650:	e50b3010 	str	r3, [fp, #-16]
          if (msectimeout == 0) {
  113654:	e51b3010 	ldr	r3, [fp, #-16]
  113658:	e3530000 	cmp	r3, #0
  11365c:	1a000001 	bne	113668 <lwip_select+0x35c>
            /* Wait 1ms at least (0 means wait forever) */
            msectimeout = 1;
  113660:	e3a03001 	mov	r3, #1
  113664:	e50b3010 	str	r3, [fp, #-16]
          }
        }

        waitres = sys_arch_sem_wait(SELECT_SEM_PTR(select_cb.sem), msectimeout);
  113668:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  11366c:	e2833018 	add	r3, r3, #24
  113670:	e51b1010 	ldr	r1, [fp, #-16]
  113674:	e1a00003 	mov	r0, r3
  113678:	ebffdcb0 	bl	10a940 <sys_arch_sem_wait>
  11367c:	e50b0008 	str	r0, [fp, #-8]
#endif
      }
    }

    /* Decrease select_waiting for each socket we are interested in */
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  113680:	e3a03000 	mov	r3, #0
  113684:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113688:	ea000049 	b	1137b4 <lwip_select+0x4a8>
      if ((readset && FD_ISSET(i, readset)) ||
  11368c:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113690:	e3530000 	cmp	r3, #0
  113694:	0a000009 	beq	1136c0 <lwip_select+0x3b4>
  113698:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11369c:	e1a022a3 	lsr	r2, r3, #5
  1136a0:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1136a4:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1136a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1136ac:	e203301f 	and	r3, r3, #31
  1136b0:	e1a03332 	lsr	r3, r2, r3
  1136b4:	e2033001 	and	r3, r3, #1
  1136b8:	e3530000 	cmp	r3, #0
  1136bc:	1a000019 	bne	113728 <lwip_select+0x41c>
  1136c0:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1136c4:	e3530000 	cmp	r3, #0
  1136c8:	0a000009 	beq	1136f4 <lwip_select+0x3e8>
          (writeset && FD_ISSET(i, writeset)) ||
  1136cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1136d0:	e1a022a3 	lsr	r2, r3, #5
  1136d4:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1136d8:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1136dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1136e0:	e203301f 	and	r3, r3, #31
  1136e4:	e1a03332 	lsr	r3, r2, r3
  1136e8:	e2033001 	and	r3, r3, #1
  1136ec:	e3530000 	cmp	r3, #0
  1136f0:	1a00000c 	bne	113728 <lwip_select+0x41c>
  1136f4:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1136f8:	e3530000 	cmp	r3, #0
  1136fc:	0a000029 	beq	1137a8 <lwip_select+0x49c>
          (exceptset && FD_ISSET(i, exceptset))) {
  113700:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113704:	e1a022a3 	lsr	r2, r3, #5
  113708:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  11370c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113710:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113714:	e203301f 	and	r3, r3, #31
  113718:	e1a03332 	lsr	r3, r2, r3
  11371c:	e2033001 	and	r3, r3, #1
  113720:	e3530000 	cmp	r3, #0
  113724:	0a00001f 	beq	1137a8 <lwip_select+0x49c>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  113728:	ebffbac3 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  11372c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  113730:	ebfff622 	bl	110fc0 <tryget_socket>
  113734:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
        if (sock != NULL) {
  113738:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11373c:	e3530000 	cmp	r3, #0
  113740:	0a000015 	beq	11379c <lwip_select+0x490>
          /* for now, handle select_waiting==0... */
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  113744:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113748:	e5d33011 	ldrb	r3, [r3, #17]
  11374c:	e3530000 	cmp	r3, #0
  113750:	1a000006 	bne	113770 <lwip_select+0x464>
  113754:	e3060f2c 	movw	r0, #28460	; 0x6f2c
  113758:	e3400014 	movt	r0, #20
  11375c:	ebffbe6c 	bl	103114 <rt_kprintf>
  113760:	e30015ec 	movw	r1, #1516	; 0x5ec
  113764:	e3060d78 	movw	r0, #28024	; 0x6d78
  113768:	e3400014 	movt	r0, #20
  11376c:	ebffde5f 	bl	10b0f0 <sys_arch_assert>
          if (sock->select_waiting > 0) {
  113770:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113774:	e5d33011 	ldrb	r3, [r3, #17]
  113778:	e3530000 	cmp	r3, #0
  11377c:	0a000008 	beq	1137a4 <lwip_select+0x498>
            sock->select_waiting--;
  113780:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113784:	e5d33011 	ldrb	r3, [r3, #17]
  113788:	e2433001 	sub	r3, r3, #1
  11378c:	e6ef2073 	uxtb	r2, r3
  113790:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113794:	e5c32011 	strb	r2, [r3, #17]
  113798:	ea000001 	b	1137a4 <lwip_select+0x498>
          }
        } else {
          /* Not a valid socket */
          nready = -1;
  11379c:	e3e03000 	mvn	r3, #0
  1137a0:	e50b300c 	str	r3, [fp, #-12]
        }
        SYS_ARCH_UNPROTECT(lev);
  1137a4:	ebffbaaa 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  1137a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1137ac:	e2833001 	add	r3, r3, #1
  1137b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1137b4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1137b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137bc:	e1520003 	cmp	r2, r3
  1137c0:	baffffb1 	blt	11368c <lwip_select+0x380>
      }
    }
    /* Take us off the list */
    SYS_ARCH_PROTECT(lev);
  1137c4:	ebffba9c 	bl	10223c <rt_enter_critical>
    if (select_cb.next != NULL) {
  1137c8:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1137cc:	e3530000 	cmp	r3, #0
  1137d0:	0a000002 	beq	1137e0 <lwip_select+0x4d4>
      select_cb.next->prev = select_cb.prev;
  1137d4:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1137d8:	e51b21b8 	ldr	r2, [fp, #-440]	; 0xfffffe48
  1137dc:	e5832004 	str	r2, [r3, #4]
    }
    if (select_cb_list == &select_cb) {
  1137e0:	e30d3c30 	movw	r3, #56368	; 0xdc30
  1137e4:	e3403014 	movt	r3, #20
  1137e8:	e5932000 	ldr	r2, [r3]
  1137ec:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  1137f0:	e1520003 	cmp	r2, r3
  1137f4:	1a00000e 	bne	113834 <lwip_select+0x528>
      LWIP_ASSERT("select_cb.prev == NULL", select_cb.prev == NULL);
  1137f8:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  1137fc:	e3530000 	cmp	r3, #0
  113800:	0a000006 	beq	113820 <lwip_select+0x514>
  113804:	e3060f48 	movw	r0, #28488	; 0x6f48
  113808:	e3400014 	movt	r0, #20
  11380c:	ebffbe40 	bl	103114 <rt_kprintf>
  113810:	e30015fd 	movw	r1, #1533	; 0x5fd
  113814:	e3060d78 	movw	r0, #28024	; 0x6d78
  113818:	e3400014 	movt	r0, #20
  11381c:	ebffde33 	bl	10b0f0 <sys_arch_assert>
      select_cb_list = select_cb.next;
  113820:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  113824:	e30d3c30 	movw	r3, #56368	; 0xdc30
  113828:	e3403014 	movt	r3, #20
  11382c:	e5832000 	str	r2, [r3]
  113830:	ea00000c 	b	113868 <lwip_select+0x55c>
    } else {
      LWIP_ASSERT("select_cb.prev != NULL", select_cb.prev != NULL);
  113834:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113838:	e3530000 	cmp	r3, #0
  11383c:	1a000006 	bne	11385c <lwip_select+0x550>
  113840:	e3060f60 	movw	r0, #28512	; 0x6f60
  113844:	e3400014 	movt	r0, #20
  113848:	ebffbe31 	bl	103114 <rt_kprintf>
  11384c:	e3a01c06 	mov	r1, #1536	; 0x600
  113850:	e3060d78 	movw	r0, #28024	; 0x6d78
  113854:	e3400014 	movt	r0, #20
  113858:	ebffde24 	bl	10b0f0 <sys_arch_assert>
      select_cb.prev->next = select_cb.next;
  11385c:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113860:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  113864:	e5832000 	str	r2, [r3]
    }
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  113868:	e30d3c34 	movw	r3, #56372	; 0xdc34
  11386c:	e3403014 	movt	r3, #20
  113870:	e5933000 	ldr	r3, [r3]
  113874:	e2832001 	add	r2, r3, #1
  113878:	e30d3c34 	movw	r3, #56372	; 0xdc34
  11387c:	e3403014 	movt	r3, #20
  113880:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  113884:	ebffba72 	bl	102254 <rt_exit_critical>
    if (select_cb.sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
      /* don't leave the thread-local semaphore signalled */
      sys_arch_sem_wait(select_cb.sem, 1);
    }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    sys_sem_free(&select_cb.sem);
  113888:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  11388c:	e2833018 	add	r3, r3, #24
  113890:	e1a00003 	mov	r0, r3
  113894:	ebffdc13 	bl	10a8e8 <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    if (nready < 0) {
  113898:	e51b300c 	ldr	r3, [fp, #-12]
  11389c:	e3530000 	cmp	r3, #0
  1138a0:	aa000005 	bge	1138bc <lwip_select+0x5b0>
      /* This happens when a socket got closed while waiting */
      set_errno(EBADF);
  1138a4:	eb00958d 	bl	138ee0 <__errno_location>
  1138a8:	e1a02000 	mov	r2, r0
  1138ac:	e3a03009 	mov	r3, #9
  1138b0:	e5823000 	str	r3, [r2]
      return -1;
  1138b4:	e3e03000 	mvn	r3, #0
  1138b8:	ea000030 	b	113980 <lwip_select+0x674>
    }

    if (waitres == SYS_ARCH_TIMEOUT) {
  1138bc:	e51b3008 	ldr	r3, [fp, #-8]
  1138c0:	e3730001 	cmn	r3, #1
  1138c4:	0a000010 	beq	11390c <lwip_select+0x600>
         or we would have returned earlier. */
      goto return_copy_fdsets;
    }

    /* See what's set */
    nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  1138c8:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  1138cc:	e58d3008 	str	r3, [sp, #8]
  1138d0:	e24b3e12 	sub	r3, fp, #288	; 0x120
  1138d4:	e58d3004 	str	r3, [sp, #4]
  1138d8:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1138dc:	e58d3000 	str	r3, [sp]
  1138e0:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1138e4:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  1138e8:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  1138ec:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  1138f0:	ebfffd7a 	bl	112ee0 <lwip_selscan>
  1138f4:	e50b000c 	str	r0, [fp, #-12]
  1138f8:	ea000004 	b	113910 <lwip_select+0x604>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
return_copy_fdsets:
  1138fc:	e320f000 	nop	{0}
  113900:	ea000002 	b	113910 <lwip_select+0x604>
      goto return_copy_fdsets;
  113904:	e320f000 	nop	{0}
  113908:	ea000000 	b	113910 <lwip_select+0x604>
      goto return_copy_fdsets;
  11390c:	e320f000 	nop	{0}
  set_errno(0);
  if (readset) {
  113910:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113914:	e3530000 	cmp	r3, #0
  113918:	0a000005 	beq	113934 <lwip_select+0x628>
    *readset = lreadset;
  11391c:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113920:	e1a00003 	mov	r0, r3
  113924:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  113928:	e3a02080 	mov	r2, #128	; 0x80
  11392c:	e1a01003 	mov	r1, r3
  113930:	eb00b519 	bl	140d9c <memcpy>
  }
  if (writeset) {
  113934:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113938:	e3530000 	cmp	r3, #0
  11393c:	0a000005 	beq	113958 <lwip_select+0x64c>
    *writeset = lwriteset;
  113940:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113944:	e1a00003 	mov	r0, r3
  113948:	e24b3e12 	sub	r3, fp, #288	; 0x120
  11394c:	e3a02080 	mov	r2, #128	; 0x80
  113950:	e1a01003 	mov	r1, r3
  113954:	eb00b510 	bl	140d9c <memcpy>
  }
  if (exceptset) {
  113958:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  11395c:	e3530000 	cmp	r3, #0
  113960:	0a000005 	beq	11397c <lwip_select+0x670>
    *exceptset = lexceptset;
  113964:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113968:	e1a00003 	mov	r0, r3
  11396c:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113970:	e3a02080 	mov	r2, #128	; 0x80
  113974:	e1a01003 	mov	r1, r3
  113978:	eb00b507 	bl	140d9c <memcpy>
  }
  return nready;
  11397c:	e51b300c 	ldr	r3, [fp, #-12]
}
  113980:	e1a00003 	mov	r0, r3
  113984:	e24bd004 	sub	sp, fp, #4
  113988:	e8bd8800 	pop	{fp, pc}

0011398c <event_callback>:
#define POLLOUT    0x2
#define POLLERR    0x4
#define UNET_WAKEUP_REQUEST         45
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
  11398c:	e92d4800 	push	{fp, lr}
  113990:	e28db004 	add	fp, sp, #4
  113994:	e24dd028 	sub	sp, sp, #40	; 0x28
  113998:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11399c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1139a0:	e1a03002 	mov	r3, r2
  1139a4:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
  1139a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1139ac:	e3530000 	cmp	r3, #0
  1139b0:	0a0000e5 	beq	113d4c <event_callback+0x3c0>
    s = conn->socket;
  1139b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1139b8:	e593301c 	ldr	r3, [r3, #28]
  1139bc:	e50b3008 	str	r3, [fp, #-8]
    if (s < 0) {
  1139c0:	e51b3008 	ldr	r3, [fp, #-8]
  1139c4:	e3530000 	cmp	r3, #0
  1139c8:	aa000012 	bge	113a18 <event_callback+0x8c>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
  1139cc:	ebffba1a 	bl	10223c <rt_enter_critical>
      if (conn->socket < 0) {
  1139d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1139d4:	e593301c 	ldr	r3, [r3, #28]
  1139d8:	e3530000 	cmp	r3, #0
  1139dc:	aa000009 	bge	113a08 <event_callback+0x7c>
        if (evt == NETCONN_EVT_RCVPLUS) {
  1139e0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1139e4:	e3530000 	cmp	r3, #0
  1139e8:	1a000004 	bne	113a00 <event_callback+0x74>
          conn->socket--;
  1139ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1139f0:	e593301c 	ldr	r3, [r3, #28]
  1139f4:	e2432001 	sub	r2, r3, #1
  1139f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1139fc:	e583201c 	str	r2, [r3, #28]
        }
        SYS_ARCH_UNPROTECT(lev);
  113a00:	ebffba13 	bl	102254 <rt_exit_critical>
        return;
  113a04:	ea0000d3 	b	113d58 <event_callback+0x3cc>
      }
      s = conn->socket;
  113a08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113a0c:	e593301c 	ldr	r3, [r3, #28]
  113a10:	e50b3008 	str	r3, [fp, #-8]
      SYS_ARCH_UNPROTECT(lev);
  113a14:	ebffba0e 	bl	102254 <rt_exit_critical>
    }

    sock = get_socket(s);
  113a18:	e51b0008 	ldr	r0, [fp, #-8]
  113a1c:	ebfff542 	bl	110f2c <get_socket>
  113a20:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (!sock) {
  113a24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a28:	e3530000 	cmp	r3, #0
  113a2c:	0a0000c8 	beq	113d54 <event_callback+0x3c8>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
  113a30:	ebffba01 	bl	10223c <rt_enter_critical>
  /* Set event as required */
  switch (evt) {
  113a34:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113a38:	e3530004 	cmp	r3, #4
  113a3c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  113a40:	ea000022 	b	113ad0 <event_callback+0x144>
  113a44:	00113a58 	.word	0x00113a58
  113a48:	00113a7c 	.word	0x00113a7c
  113a4c:	00113aa0 	.word	0x00113aa0
  113a50:	00113ab0 	.word	0x00113ab0
  113a54:	00113ac0 	.word	0x00113ac0
    case NETCONN_EVT_RCVPLUS:
      /* *RT-Thread* need to be notified in kernel */
      sock->rcvevent++;
  113a58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a5c:	e1d330fa 	ldrsh	r3, [r3, #10]
  113a60:	e6ff3073 	uxth	r3, r3
  113a64:	e2833001 	add	r3, r3, #1
  113a68:	e6ff3073 	uxth	r3, r3
  113a6c:	e6bf2073 	sxth	r2, r3
  113a70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a74:	e1c320ba 	strh	r2, [r3, #10]
      break;
  113a78:	ea00001c 	b	113af0 <event_callback+0x164>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
  113a7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a80:	e1d330fa 	ldrsh	r3, [r3, #10]
  113a84:	e6ff3073 	uxth	r3, r3
  113a88:	e2433001 	sub	r3, r3, #1
  113a8c:	e6ff3073 	uxth	r3, r3
  113a90:	e6bf2073 	sxth	r2, r3
  113a94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a98:	e1c320ba 	strh	r2, [r3, #10]
      break;
  113a9c:	ea000013 	b	113af0 <event_callback+0x164>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
  113aa0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113aa4:	e3a02001 	mov	r2, #1
  113aa8:	e1c320bc 	strh	r2, [r3, #12]
      break;
  113aac:	ea00000f 	b	113af0 <event_callback+0x164>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
  113ab0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113ab4:	e3a02000 	mov	r2, #0
  113ab8:	e1c320bc 	strh	r2, [r3, #12]
      break;
  113abc:	ea00000b 	b	113af0 <event_callback+0x164>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
  113ac0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113ac4:	e3a02001 	mov	r2, #1
  113ac8:	e1c320be 	strh	r2, [r3, #14]
      break;
  113acc:	ea000007 	b	113af0 <event_callback+0x164>
    default:
      LWIP_ASSERT("unknown event", 0);
  113ad0:	e3060f78 	movw	r0, #28536	; 0x6f78
  113ad4:	e3400014 	movt	r0, #20
  113ad8:	ebffbd8d 	bl	103114 <rt_kprintf>
  113adc:	e3001679 	movw	r1, #1657	; 0x679
  113ae0:	e3060d78 	movw	r0, #28024	; 0x6d78
  113ae4:	e3400014 	movt	r0, #20
  113ae8:	ebffdd80 	bl	10b0f0 <sys_arch_assert>
      break;
  113aec:	e320f000 	nop	{0}
  }

  int mask = 0;
  113af0:	e3a03000 	mov	r3, #0
  113af4:	e50b3010 	str	r3, [fp, #-16]
  if (sock != NULL)
  113af8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113afc:	e3530000 	cmp	r3, #0
  113b00:	0a00001b 	beq	113b74 <event_callback+0x1e8>
  {
#if LWIP_VERSION >= 0x20100ff
      if ((void*)(sock->lastdata.pbuf) || sock->rcvevent)
#else
      if ((void *)(sock->lastdata) || sock->rcvevent)
  113b04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b08:	e5933004 	ldr	r3, [r3, #4]
  113b0c:	e3530000 	cmp	r3, #0
  113b10:	1a000003 	bne	113b24 <event_callback+0x198>
  113b14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b18:	e1d330fa 	ldrsh	r3, [r3, #10]
  113b1c:	e3530000 	cmp	r3, #0
  113b20:	0a000002 	beq	113b30 <event_callback+0x1a4>
#endif
      {
          mask |= POLLIN;
  113b24:	e51b3010 	ldr	r3, [fp, #-16]
  113b28:	e3833001 	orr	r3, r3, #1
  113b2c:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->sendevent)
  113b30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b34:	e1d330bc 	ldrh	r3, [r3, #12]
  113b38:	e3530000 	cmp	r3, #0
  113b3c:	0a000002 	beq	113b4c <event_callback+0x1c0>
      {
          mask |= POLLOUT;
  113b40:	e51b3010 	ldr	r3, [fp, #-16]
  113b44:	e3833002 	orr	r3, r3, #2
  113b48:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->errevent)
  113b4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b50:	e1d330be 	ldrh	r3, [r3, #14]
  113b54:	e3530000 	cmp	r3, #0
  113b58:	0a000005 	beq	113b74 <event_callback+0x1e8>
      {
          mask |= POLLERR;
  113b5c:	e51b3010 	ldr	r3, [fp, #-16]
  113b60:	e3833004 	orr	r3, r3, #4
  113b64:	e50b3010 	str	r3, [fp, #-16]
          /* clean error event */
          sock->errevent = 0;
  113b68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b6c:	e3a02000 	mov	r2, #0
  113b70:	e1c320be 	strh	r2, [r3, #14]
  //     {
  //       rt_kprintf("create msg error\n");
  //     }
  // }

  if (sock->select_waiting == 0) {
  113b74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b78:	e5d33011 	ldrb	r3, [r3, #17]
  113b7c:	e3530000 	cmp	r3, #0
  113b80:	1a000001 	bne	113b8c <event_callback+0x200>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
  113b84:	ebffb9b2 	bl	102254 <rt_exit_critical>
    return;
  113b88:	ea000072 	b	113d58 <event_callback+0x3cc>
  /* NOTE: This code goes through the select_cb_list list multiple times
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  113b8c:	e320f000 	nop	{0}
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  113b90:	e30d3c30 	movw	r3, #56368	; 0xdc30
  113b94:	e3403014 	movt	r3, #20
  113b98:	e5933000 	ldr	r3, [r3]
  113b9c:	e50b300c 	str	r3, [fp, #-12]
  113ba0:	ea000064 	b	113d38 <event_callback+0x3ac>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  113ba4:	e30d3c34 	movw	r3, #56372	; 0xdc34
  113ba8:	e3403014 	movt	r3, #20
  113bac:	e5933000 	ldr	r3, [r3]
  113bb0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    if (scb->sem_signalled == 0) {
  113bb4:	e51b300c 	ldr	r3, [fp, #-12]
  113bb8:	e5933014 	ldr	r3, [r3, #20]
  113bbc:	e3530000 	cmp	r3, #0
  113bc0:	1a000050 	bne	113d08 <event_callback+0x37c>
      /* semaphore not signalled yet */
      int do_signal = 0;
  113bc4:	e3a03000 	mov	r3, #0
  113bc8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
  113bcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113bd0:	e1d330fa 	ldrsh	r3, [r3, #10]
  113bd4:	e3530000 	cmp	r3, #0
  113bd8:	da000010 	ble	113c20 <event_callback+0x294>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
  113bdc:	e51b300c 	ldr	r3, [fp, #-12]
  113be0:	e5933008 	ldr	r3, [r3, #8]
  113be4:	e3530000 	cmp	r3, #0
  113be8:	0a00000c 	beq	113c20 <event_callback+0x294>
  113bec:	e51b300c 	ldr	r3, [fp, #-12]
  113bf0:	e5933008 	ldr	r3, [r3, #8]
  113bf4:	e51b2008 	ldr	r2, [fp, #-8]
  113bf8:	e1a022a2 	lsr	r2, r2, #5
  113bfc:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113c00:	e51b3008 	ldr	r3, [fp, #-8]
  113c04:	e203301f 	and	r3, r3, #31
  113c08:	e1a03332 	lsr	r3, r2, r3
  113c0c:	e2033001 	and	r3, r3, #1
  113c10:	e3530000 	cmp	r3, #0
  113c14:	0a000001 	beq	113c20 <event_callback+0x294>
          do_signal = 1;
  113c18:	e3a03001 	mov	r3, #1
  113c1c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->sendevent != 0) {
  113c20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113c24:	e1d330bc 	ldrh	r3, [r3, #12]
  113c28:	e3530000 	cmp	r3, #0
  113c2c:	0a000013 	beq	113c80 <event_callback+0x2f4>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
  113c30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113c34:	e3530000 	cmp	r3, #0
  113c38:	1a000010 	bne	113c80 <event_callback+0x2f4>
  113c3c:	e51b300c 	ldr	r3, [fp, #-12]
  113c40:	e593300c 	ldr	r3, [r3, #12]
  113c44:	e3530000 	cmp	r3, #0
  113c48:	0a00000c 	beq	113c80 <event_callback+0x2f4>
  113c4c:	e51b300c 	ldr	r3, [fp, #-12]
  113c50:	e593300c 	ldr	r3, [r3, #12]
  113c54:	e51b2008 	ldr	r2, [fp, #-8]
  113c58:	e1a022a2 	lsr	r2, r2, #5
  113c5c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113c60:	e51b3008 	ldr	r3, [fp, #-8]
  113c64:	e203301f 	and	r3, r3, #31
  113c68:	e1a03332 	lsr	r3, r2, r3
  113c6c:	e2033001 	and	r3, r3, #1
  113c70:	e3530000 	cmp	r3, #0
  113c74:	0a000001 	beq	113c80 <event_callback+0x2f4>
          do_signal = 1;
  113c78:	e3a03001 	mov	r3, #1
  113c7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->errevent != 0) {
  113c80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113c84:	e1d330be 	ldrh	r3, [r3, #14]
  113c88:	e3530000 	cmp	r3, #0
  113c8c:	0a000013 	beq	113ce0 <event_callback+0x354>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
  113c90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113c94:	e3530000 	cmp	r3, #0
  113c98:	1a000010 	bne	113ce0 <event_callback+0x354>
  113c9c:	e51b300c 	ldr	r3, [fp, #-12]
  113ca0:	e5933010 	ldr	r3, [r3, #16]
  113ca4:	e3530000 	cmp	r3, #0
  113ca8:	0a00000c 	beq	113ce0 <event_callback+0x354>
  113cac:	e51b300c 	ldr	r3, [fp, #-12]
  113cb0:	e5933010 	ldr	r3, [r3, #16]
  113cb4:	e51b2008 	ldr	r2, [fp, #-8]
  113cb8:	e1a022a2 	lsr	r2, r2, #5
  113cbc:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113cc0:	e51b3008 	ldr	r3, [fp, #-8]
  113cc4:	e203301f 	and	r3, r3, #31
  113cc8:	e1a03332 	lsr	r3, r2, r3
  113ccc:	e2033001 	and	r3, r3, #1
  113cd0:	e3530000 	cmp	r3, #0
  113cd4:	0a000001 	beq	113ce0 <event_callback+0x354>
          do_signal = 1;
  113cd8:	e3a03001 	mov	r3, #1
  113cdc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (do_signal) {
  113ce0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113ce4:	e3530000 	cmp	r3, #0
  113ce8:	0a000006 	beq	113d08 <event_callback+0x37c>
        scb->sem_signalled = 1;
  113cec:	e51b300c 	ldr	r3, [fp, #-12]
  113cf0:	e3a02001 	mov	r2, #1
  113cf4:	e5832014 	str	r2, [r3, #20]
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
  113cf8:	e51b300c 	ldr	r3, [fp, #-12]
  113cfc:	e2833018 	add	r3, r3, #24
  113d00:	e1a00003 	mov	r0, r3
  113d04:	ebffdb02 	bl	10a914 <sys_sem_signal>
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
  113d08:	ebffb951 	bl	102254 <rt_exit_critical>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
  113d0c:	ebffb94a 	bl	10223c <rt_enter_critical>
    if (last_select_cb_ctr != select_cb_ctr) {
  113d10:	e30d3c34 	movw	r3, #56372	; 0xdc34
  113d14:	e3403014 	movt	r3, #20
  113d18:	e5933000 	ldr	r3, [r3]
  113d1c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  113d20:	e1520003 	cmp	r2, r3
  113d24:	0a000000 	beq	113d2c <event_callback+0x3a0>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
  113d28:	eaffff98 	b	113b90 <event_callback+0x204>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  113d2c:	e51b300c 	ldr	r3, [fp, #-12]
  113d30:	e5933000 	ldr	r3, [r3]
  113d34:	e50b300c 	str	r3, [fp, #-12]
  113d38:	e51b300c 	ldr	r3, [fp, #-12]
  113d3c:	e3530000 	cmp	r3, #0
  113d40:	1affff97 	bne	113ba4 <event_callback+0x218>
    }
  }
  SYS_ARCH_UNPROTECT(lev);
  113d44:	ebffb942 	bl	102254 <rt_exit_critical>
  113d48:	ea000002 	b	113d58 <event_callback+0x3cc>
    return;
  113d4c:	e320f000 	nop	{0}
  113d50:	ea000000 	b	113d58 <event_callback+0x3cc>
      return;
  113d54:	e320f000 	nop	{0}
}
  113d58:	e24bd004 	sub	sp, fp, #4
  113d5c:	e8bd8800 	pop	{fp, pc}

00113d60 <lwip_shutdown>:
/**
 * Close one end of a full-duplex connection.
 */
int
lwip_shutdown(int s, int how)
{
  113d60:	e92d4800 	push	{fp, lr}
  113d64:	e28db004 	add	fp, sp, #4
  113d68:	e24dd028 	sub	sp, sp, #40	; 0x28
  113d6c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  113d70:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct lwip_sock *sock;
  err_t err;
  u8_t shut_rx = 0, shut_tx = 0;
  113d74:	e3a03000 	mov	r3, #0
  113d78:	e54b3005 	strb	r3, [fp, #-5]
  113d7c:	e3a03000 	mov	r3, #0
  113d80:	e54b3006 	strb	r3, [fp, #-6]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));

  sock = get_socket(s);
  113d84:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  113d88:	ebfff467 	bl	110f2c <get_socket>
  113d8c:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  113d90:	e51b300c 	ldr	r3, [fp, #-12]
  113d94:	e3530000 	cmp	r3, #0
  113d98:	1a000001 	bne	113da4 <lwip_shutdown+0x44>
    return -1;
  113d9c:	e3e03000 	mvn	r3, #0
  113da0:	ea000067 	b	113f44 <lwip_shutdown+0x1e4>
  }

  if (sock->conn != NULL) {
  113da4:	e51b300c 	ldr	r3, [fp, #-12]
  113da8:	e5933000 	ldr	r3, [r3]
  113dac:	e3530000 	cmp	r3, #0
  113db0:	0a000014 	beq	113e08 <lwip_shutdown+0xa8>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  113db4:	e51b300c 	ldr	r3, [fp, #-12]
  113db8:	e5933000 	ldr	r3, [r3]
  113dbc:	e5933000 	ldr	r3, [r3]
  113dc0:	e20330f0 	and	r3, r3, #240	; 0xf0
  113dc4:	e3530010 	cmp	r3, #16
  113dc8:	0a00001d 	beq	113e44 <lwip_shutdown+0xe4>
      sock_set_errno(sock, EOPNOTSUPP);
  113dcc:	e3a0305f 	mov	r3, #95	; 0x5f
  113dd0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  113dd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113dd8:	e6ef2073 	uxtb	r2, r3
  113ddc:	e51b300c 	ldr	r3, [fp, #-12]
  113de0:	e5c32010 	strb	r2, [r3, #16]
  113de4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113de8:	e3530000 	cmp	r3, #0
  113dec:	0a000003 	beq	113e00 <lwip_shutdown+0xa0>
  113df0:	eb00943a 	bl	138ee0 <__errno_location>
  113df4:	e1a02000 	mov	r2, r0
  113df8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113dfc:	e5823000 	str	r3, [r2]
      return -1;
  113e00:	e3e03000 	mvn	r3, #0
  113e04:	ea00004e 	b	113f44 <lwip_shutdown+0x1e4>
    }
  } else {
    sock_set_errno(sock, ENOTCONN);
  113e08:	e3a0306b 	mov	r3, #107	; 0x6b
  113e0c:	e50b3010 	str	r3, [fp, #-16]
  113e10:	e51b3010 	ldr	r3, [fp, #-16]
  113e14:	e6ef2073 	uxtb	r2, r3
  113e18:	e51b300c 	ldr	r3, [fp, #-12]
  113e1c:	e5c32010 	strb	r2, [r3, #16]
  113e20:	e51b3010 	ldr	r3, [fp, #-16]
  113e24:	e3530000 	cmp	r3, #0
  113e28:	0a000003 	beq	113e3c <lwip_shutdown+0xdc>
  113e2c:	eb00942b 	bl	138ee0 <__errno_location>
  113e30:	e1a02000 	mov	r2, r0
  113e34:	e51b3010 	ldr	r3, [fp, #-16]
  113e38:	e5823000 	str	r3, [r2]
    return -1;
  113e3c:	e3e03000 	mvn	r3, #0
  113e40:	ea00003f 	b	113f44 <lwip_shutdown+0x1e4>
  }

  if (how == SHUT_RD) {
  113e44:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113e48:	e3530000 	cmp	r3, #0
  113e4c:	1a000002 	bne	113e5c <lwip_shutdown+0xfc>
    shut_rx = 1;
  113e50:	e3a03001 	mov	r3, #1
  113e54:	e54b3005 	strb	r3, [fp, #-5]
  113e58:	ea00001c 	b	113ed0 <lwip_shutdown+0x170>
  } else if (how == SHUT_WR) {
  113e5c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113e60:	e3530001 	cmp	r3, #1
  113e64:	1a000002 	bne	113e74 <lwip_shutdown+0x114>
    shut_tx = 1;
  113e68:	e3a03001 	mov	r3, #1
  113e6c:	e54b3006 	strb	r3, [fp, #-6]
  113e70:	ea000016 	b	113ed0 <lwip_shutdown+0x170>
  } else if (how == SHUT_RDWR) {
  113e74:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113e78:	e3530002 	cmp	r3, #2
  113e7c:	1a000004 	bne	113e94 <lwip_shutdown+0x134>
    shut_rx = 1;
  113e80:	e3a03001 	mov	r3, #1
  113e84:	e54b3005 	strb	r3, [fp, #-5]
    shut_tx = 1;
  113e88:	e3a03001 	mov	r3, #1
  113e8c:	e54b3006 	strb	r3, [fp, #-6]
  113e90:	ea00000e 	b	113ed0 <lwip_shutdown+0x170>
  } else {
    sock_set_errno(sock, EINVAL);
  113e94:	e3a03016 	mov	r3, #22
  113e98:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113e9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113ea0:	e6ef2073 	uxtb	r2, r3
  113ea4:	e51b300c 	ldr	r3, [fp, #-12]
  113ea8:	e5c32010 	strb	r2, [r3, #16]
  113eac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113eb0:	e3530000 	cmp	r3, #0
  113eb4:	0a000003 	beq	113ec8 <lwip_shutdown+0x168>
  113eb8:	eb009408 	bl	138ee0 <__errno_location>
  113ebc:	e1a02000 	mov	r2, r0
  113ec0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113ec4:	e5823000 	str	r3, [r2]
    return -1;
  113ec8:	e3e03000 	mvn	r3, #0
  113ecc:	ea00001c 	b	113f44 <lwip_shutdown+0x1e4>
  }
  err = netconn_shutdown(sock->conn, shut_rx, shut_tx);
  113ed0:	e51b300c 	ldr	r3, [fp, #-12]
  113ed4:	e5933000 	ldr	r3, [r3]
  113ed8:	e55b2006 	ldrb	r2, [fp, #-6]
  113edc:	e55b1005 	ldrb	r1, [fp, #-5]
  113ee0:	e1a00003 	mov	r0, r3
  113ee4:	ebffe0c0 	bl	10c1ec <netconn_shutdown>
  113ee8:	e1a03000 	mov	r3, r0
  113eec:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb

  sock_set_errno(sock, err_to_errno(err));
  113ef0:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  113ef4:	e1a00003 	mov	r0, r3
  113ef8:	ebffefe3 	bl	10fe8c <err_to_errno>
  113efc:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  113f00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113f04:	e6ef2073 	uxtb	r2, r3
  113f08:	e51b300c 	ldr	r3, [fp, #-12]
  113f0c:	e5c32010 	strb	r2, [r3, #16]
  113f10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113f14:	e3530000 	cmp	r3, #0
  113f18:	0a000003 	beq	113f2c <lwip_shutdown+0x1cc>
  113f1c:	eb0093ef 	bl	138ee0 <__errno_location>
  113f20:	e1a02000 	mov	r2, r0
  113f24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113f28:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? 0 : -1);
  113f2c:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  113f30:	e3530000 	cmp	r3, #0
  113f34:	1a000001 	bne	113f40 <lwip_shutdown+0x1e0>
  113f38:	e3a03000 	mov	r3, #0
  113f3c:	ea000000 	b	113f44 <lwip_shutdown+0x1e4>
  113f40:	e3e03000 	mvn	r3, #0
}
  113f44:	e1a00003 	mov	r0, r3
  113f48:	e24bd004 	sub	sp, fp, #4
  113f4c:	e8bd8800 	pop	{fp, pc}

00113f50 <lwip_getaddrname>:

static int
lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)
{
  113f50:	e92d4810 	push	{r4, fp, lr}
  113f54:	e28db008 	add	fp, sp, #8
  113f58:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  113f5c:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  113f60:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  113f64:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  113f68:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  union sockaddr_aligned saddr;
  ip_addr_t naddr;
  u16_t port;
  err_t err;

  sock = get_socket(s);
  113f6c:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  113f70:	ebfff3ed 	bl	110f2c <get_socket>
  113f74:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  113f78:	e51b3010 	ldr	r3, [fp, #-16]
  113f7c:	e3530000 	cmp	r3, #0
  113f80:	1a000001 	bne	113f8c <lwip_getaddrname+0x3c>
    return -1;
  113f84:	e3e03000 	mvn	r3, #0
  113f88:	ea00004d 	b	1140c4 <lwip_getaddrname+0x174>
  }

  /* get the IP address and port */
  err = netconn_getaddr(sock->conn, &naddr, &port, local);
  113f8c:	e51b3010 	ldr	r3, [fp, #-16]
  113f90:	e5930000 	ldr	r0, [r3]
  113f94:	e55b3041 	ldrb	r3, [fp, #-65]	; 0xffffffbf
  113f98:	e24b2032 	sub	r2, fp, #50	; 0x32
  113f9c:	e24b1030 	sub	r1, fp, #48	; 0x30
  113fa0:	ebffdd42 	bl	10b4b0 <netconn_getaddr>
  113fa4:	e1a03000 	mov	r3, r0
  113fa8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  113fac:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  113fb0:	e3530000 	cmp	r3, #0
  113fb4:	0a000010 	beq	113ffc <lwip_getaddrname+0xac>
    sock_set_errno(sock, err_to_errno(err));
  113fb8:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  113fbc:	e1a00003 	mov	r0, r3
  113fc0:	ebffefb1 	bl	10fe8c <err_to_errno>
  113fc4:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  113fc8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113fcc:	e6ef2073 	uxtb	r2, r3
  113fd0:	e51b3010 	ldr	r3, [fp, #-16]
  113fd4:	e5c32010 	strb	r2, [r3, #16]
  113fd8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113fdc:	e3530000 	cmp	r3, #0
  113fe0:	0a000003 	beq	113ff4 <lwip_getaddrname+0xa4>
  113fe4:	eb0093bd 	bl	138ee0 <__errno_location>
  113fe8:	e1a02000 	mov	r2, r0
  113fec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113ff0:	e5823000 	str	r3, [r2]
    return -1;
  113ff4:	e3e03000 	mvn	r3, #0
  113ff8:	ea000031 	b	1140c4 <lwip_getaddrname+0x174>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(&naddr), ip_2_ip4(&naddr));
    IP_SET_TYPE_VAL(naddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, &naddr, port);
  113ffc:	e24b302c 	sub	r3, fp, #44	; 0x2c
  114000:	e3a02010 	mov	r2, #16
  114004:	e5c32000 	strb	r2, [r3]
  114008:	e24b302c 	sub	r3, fp, #44	; 0x2c
  11400c:	e3a02002 	mov	r2, #2
  114010:	e5c32001 	strb	r2, [r3, #1]
  114014:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  114018:	e24b402c 	sub	r4, fp, #44	; 0x2c
  11401c:	e1a00003 	mov	r0, r3
  114020:	eb00096e 	bl	1165e0 <lwip_htons>
  114024:	e1a03000 	mov	r3, r0
  114028:	e1c430b2 	strh	r3, [r4, #2]
  11402c:	e24b302c 	sub	r3, fp, #44	; 0x2c
  114030:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  114034:	e5832004 	str	r2, [r3, #4]
  114038:	e24b302c 	sub	r3, fp, #44	; 0x2c
  11403c:	e2833008 	add	r3, r3, #8
  114040:	e3a02008 	mov	r2, #8
  114044:	e3a01000 	mov	r1, #0
  114048:	e1a00003 	mov	r0, r3
  11404c:	eb00b48a 	bl	14127c <memset>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getaddrname(%d, addr=", s));
  ip_addr_debug_print_val(SOCKETS_DEBUG, naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", port));

  if (*namelen > saddr.sa.sa_len) {
  114050:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  114054:	e5933000 	ldr	r3, [r3]
  114058:	e55b202c 	ldrb	r2, [fp, #-44]	; 0xffffffd4
  11405c:	e1530002 	cmp	r3, r2
  114060:	9a000003 	bls	114074 <lwip_getaddrname+0x124>
    *namelen = saddr.sa.sa_len;
  114064:	e55b302c 	ldrb	r3, [fp, #-44]	; 0xffffffd4
  114068:	e1a02003 	mov	r2, r3
  11406c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  114070:	e5832000 	str	r2, [r3]
  }
  MEMCPY(name, &saddr, *namelen);
  114074:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  114078:	e5932000 	ldr	r2, [r3]
  11407c:	e24b302c 	sub	r3, fp, #44	; 0x2c
  114080:	e1a01003 	mov	r1, r3
  114084:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  114088:	eb00b343 	bl	140d9c <memcpy>

  sock_set_errno(sock, 0);
  11408c:	e3a03000 	mov	r3, #0
  114090:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  114094:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  114098:	e6ef2073 	uxtb	r2, r3
  11409c:	e51b3010 	ldr	r3, [fp, #-16]
  1140a0:	e5c32010 	strb	r2, [r3, #16]
  1140a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1140a8:	e3530000 	cmp	r3, #0
  1140ac:	0a000003 	beq	1140c0 <lwip_getaddrname+0x170>
  1140b0:	eb00938a 	bl	138ee0 <__errno_location>
  1140b4:	e1a02000 	mov	r2, r0
  1140b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1140bc:	e5823000 	str	r3, [r2]
  return 0;
  1140c0:	e3a03000 	mov	r3, #0
}
  1140c4:	e1a00003 	mov	r0, r3
  1140c8:	e24bd008 	sub	sp, fp, #8
  1140cc:	e8bd8810 	pop	{r4, fp, pc}

001140d0 <lwip_getpeername>:

int
lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)
{
  1140d0:	e92d4800 	push	{fp, lr}
  1140d4:	e28db004 	add	fp, sp, #4
  1140d8:	e24dd010 	sub	sp, sp, #16
  1140dc:	e50b0008 	str	r0, [fp, #-8]
  1140e0:	e50b100c 	str	r1, [fp, #-12]
  1140e4:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 0);
  1140e8:	e3a03000 	mov	r3, #0
  1140ec:	e51b2010 	ldr	r2, [fp, #-16]
  1140f0:	e51b100c 	ldr	r1, [fp, #-12]
  1140f4:	e51b0008 	ldr	r0, [fp, #-8]
  1140f8:	ebffff94 	bl	113f50 <lwip_getaddrname>
  1140fc:	e1a03000 	mov	r3, r0
}
  114100:	e1a00003 	mov	r0, r3
  114104:	e24bd004 	sub	sp, fp, #4
  114108:	e8bd8800 	pop	{fp, pc}

0011410c <lwip_getsockname>:

int
lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)
{
  11410c:	e92d4800 	push	{fp, lr}
  114110:	e28db004 	add	fp, sp, #4
  114114:	e24dd010 	sub	sp, sp, #16
  114118:	e50b0008 	str	r0, [fp, #-8]
  11411c:	e50b100c 	str	r1, [fp, #-12]
  114120:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 1);
  114124:	e3a03001 	mov	r3, #1
  114128:	e51b2010 	ldr	r2, [fp, #-16]
  11412c:	e51b100c 	ldr	r1, [fp, #-12]
  114130:	e51b0008 	ldr	r0, [fp, #-8]
  114134:	ebffff85 	bl	113f50 <lwip_getaddrname>
  114138:	e1a03000 	mov	r3, r0
}
  11413c:	e1a00003 	mov	r0, r3
  114140:	e24bd004 	sub	sp, fp, #4
  114144:	e8bd8800 	pop	{fp, pc}

00114148 <lwip_getsockopt>:

int
lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  114148:	e92d4800 	push	{fp, lr}
  11414c:	e28db004 	add	fp, sp, #4
  114150:	e24dd028 	sub	sp, sp, #40	; 0x28
  114154:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  114158:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11415c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  114160:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err;
  struct lwip_sock *sock = get_socket(s);
  114164:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  114168:	ebfff36f 	bl	110f2c <get_socket>
  11416c:	e50b0008 	str	r0, [fp, #-8]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  114170:	e51b3008 	ldr	r3, [fp, #-8]
  114174:	e3530000 	cmp	r3, #0
  114178:	1a000001 	bne	114184 <lwip_getsockopt+0x3c>
    return -1;
  11417c:	e3e03000 	mvn	r3, #0
  114180:	ea000036 	b	114260 <lwip_getsockopt+0x118>
  }

  if ((NULL == optval) || (NULL == optlen)) {
  114184:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114188:	e3530000 	cmp	r3, #0
  11418c:	0a000002 	beq	11419c <lwip_getsockopt+0x54>
  114190:	e59b3004 	ldr	r3, [fp, #4]
  114194:	e3530000 	cmp	r3, #0
  114198:	1a00000e 	bne	1141d8 <lwip_getsockopt+0x90>
    sock_set_errno(sock, EFAULT);
  11419c:	e3a0300e 	mov	r3, #14
  1141a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1141a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1141a8:	e6ef2073 	uxtb	r2, r3
  1141ac:	e51b3008 	ldr	r3, [fp, #-8]
  1141b0:	e5c32010 	strb	r2, [r3, #16]
  1141b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1141b8:	e3530000 	cmp	r3, #0
  1141bc:	0a000003 	beq	1141d0 <lwip_getsockopt+0x88>
  1141c0:	eb009346 	bl	138ee0 <__errno_location>
  1141c4:	e1a02000 	mov	r2, r0
  1141c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1141cc:	e5823000 	str	r3, [r2]
    return -1;
  1141d0:	e3e03000 	mvn	r3, #0
  1141d4:	ea000021 	b	114260 <lwip_getsockopt+0x118>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  1141d8:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  1141dc:	e3400014 	movt	r0, #20
  1141e0:	ebffda46 	bl	10ab00 <sys_mutex_lock>
  err = lwip_getsockopt_impl(s, level, optname, optval, optlen);
  1141e4:	e59b3004 	ldr	r3, [fp, #4]
  1141e8:	e58d3000 	str	r3, [sp]
  1141ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1141f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1141f4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1141f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1141fc:	eb00001a 	bl	11426c <lwip_getsockopt_impl>
  114200:	e1a03000 	mov	r3, r0
  114204:	e54b3009 	strb	r3, [fp, #-9]
  UNLOCK_TCPIP_CORE();
  114208:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  11420c:	e3400014 	movt	r0, #20
  114210:	ebffda46 	bl	10ab30 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  114214:	e55b3009 	ldrb	r3, [fp, #-9]
  114218:	e50b3010 	str	r3, [fp, #-16]
  11421c:	e51b3010 	ldr	r3, [fp, #-16]
  114220:	e6ef2073 	uxtb	r2, r3
  114224:	e51b3008 	ldr	r3, [fp, #-8]
  114228:	e5c32010 	strb	r2, [r3, #16]
  11422c:	e51b3010 	ldr	r3, [fp, #-16]
  114230:	e3530000 	cmp	r3, #0
  114234:	0a000003 	beq	114248 <lwip_getsockopt+0x100>
  114238:	eb009328 	bl	138ee0 <__errno_location>
  11423c:	e1a02000 	mov	r2, r0
  114240:	e51b3010 	ldr	r3, [fp, #-16]
  114244:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  114248:	e55b3009 	ldrb	r3, [fp, #-9]
  11424c:	e3530000 	cmp	r3, #0
  114250:	0a000001 	beq	11425c <lwip_getsockopt+0x114>
  114254:	e3e03000 	mvn	r3, #0
  114258:	ea000000 	b	114260 <lwip_getsockopt+0x118>
  11425c:	e3a03000 	mov	r3, #0
}
  114260:	e1a00003 	mov	r0, r3
  114264:	e24bd004 	sub	sp, fp, #4
  114268:	e8bd8800 	pop	{fp, pc}

0011426c <lwip_getsockopt_impl>:
/** lwip_getsockopt_impl: the actual implementation of getsockopt:
 * same argument as lwip_getsockopt, either called directly or through callback
 */
static u8_t
lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  11426c:	e92d4800 	push	{fp, lr}
  114270:	e28db004 	add	fp, sp, #4
  114274:	e24dd028 	sub	sp, sp, #40	; 0x28
  114278:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11427c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  114280:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  114284:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  114288:	e3a03000 	mov	r3, #0
  11428c:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  114290:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  114294:	ebfff349 	bl	110fc0 <tryget_socket>
  114298:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  11429c:	e51b300c 	ldr	r3, [fp, #-12]
  1142a0:	e3530000 	cmp	r3, #0
  1142a4:	1a000001 	bne	1142b0 <lwip_getsockopt_impl+0x44>
    return EBADF;
  1142a8:	e3a03009 	mov	r3, #9
  1142ac:	ea00026a 	b	114c5c <lwip_getsockopt_impl+0x9f0>
  }

  switch (level) {
  1142b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1142b4:	e3530006 	cmp	r3, #6
  1142b8:	0a0001fb 	beq	114aac <lwip_getsockopt_impl+0x840>
  1142bc:	e3530006 	cmp	r3, #6
  1142c0:	ca000002 	bgt	1142d0 <lwip_getsockopt_impl+0x64>
  1142c4:	e3530000 	cmp	r3, #0
  1142c8:	0a000155 	beq	114824 <lwip_getsockopt_impl+0x5b8>
  1142cc:	ea00025e 	b	114c4c <lwip_getsockopt_impl+0x9e0>
  1142d0:	e35300ff 	cmp	r3, #255	; 0xff
  1142d4:	0a000258 	beq	114c3c <lwip_getsockopt_impl+0x9d0>
  1142d8:	e3002fff 	movw	r2, #4095	; 0xfff
  1142dc:	e1530002 	cmp	r3, r2
  1142e0:	1a000259 	bne	114c4c <lwip_getsockopt_impl+0x9e0>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  1142e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1142e8:	e3012002 	movw	r2, #4098	; 0x1002
  1142ec:	e1530002 	cmp	r3, r2
  1142f0:	0a000114 	beq	114748 <lwip_getsockopt_impl+0x4dc>
  1142f4:	e3012002 	movw	r2, #4098	; 0x1002
  1142f8:	e1530002 	cmp	r3, r2
  1142fc:	ca00000b 	bgt	114330 <lwip_getsockopt_impl+0xc4>
  114300:	e3530004 	cmp	r3, #4
  114304:	0a000049 	beq	114430 <lwip_getsockopt_impl+0x1c4>
  114308:	e3530004 	cmp	r3, #4
  11430c:	ca000002 	bgt	11431c <lwip_getsockopt_impl+0xb0>
  114310:	e3530002 	cmp	r3, #2
  114314:	0a000019 	beq	114380 <lwip_getsockopt_impl+0x114>
  114318:	ea00013d 	b	114814 <lwip_getsockopt_impl+0x5a8>
  11431c:	e3530008 	cmp	r3, #8
  114320:	0a000042 	beq	114430 <lwip_getsockopt_impl+0x1c4>
  114324:	e3530020 	cmp	r3, #32
  114328:	0a000040 	beq	114430 <lwip_getsockopt_impl+0x1c4>
  11432c:	ea000138 	b	114814 <lwip_getsockopt_impl+0x5a8>
  114330:	e3012007 	movw	r2, #4103	; 0x1007
  114334:	e1530002 	cmp	r3, r2
  114338:	0a000082 	beq	114548 <lwip_getsockopt_impl+0x2dc>
  11433c:	e3012007 	movw	r2, #4103	; 0x1007
  114340:	e1530002 	cmp	r3, r2
  114344:	ca000006 	bgt	114364 <lwip_getsockopt_impl+0xf8>
  114348:	e3012005 	movw	r2, #4101	; 0x1005
  11434c:	e1530002 	cmp	r3, r2
  114350:	0a0000ae 	beq	114610 <lwip_getsockopt_impl+0x3a4>
  114354:	e3012006 	movw	r2, #4102	; 0x1006
  114358:	e1530002 	cmp	r3, r2
  11435c:	0a0000d2 	beq	1146ac <lwip_getsockopt_impl+0x440>
  114360:	ea00012b 	b	114814 <lwip_getsockopt_impl+0x5a8>
  114364:	e3012008 	movw	r2, #4104	; 0x1008
  114368:	e1530002 	cmp	r3, r2
  11436c:	0a00004a 	beq	11449c <lwip_getsockopt_impl+0x230>
  114370:	e301200a 	movw	r2, #4106	; 0x100a
  114374:	e1530002 	cmp	r3, r2
  114378:	0a000104 	beq	114790 <lwip_getsockopt_impl+0x524>
  11437c:	ea000124 	b	114814 <lwip_getsockopt_impl+0x5a8>

#if LWIP_TCP
    case SO_ACCEPTCONN:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114380:	e59b3004 	ldr	r3, [fp, #4]
  114384:	e5933000 	ldr	r3, [r3]
  114388:	e3530003 	cmp	r3, #3
  11438c:	8a000001 	bhi	114398 <lwip_getsockopt_impl+0x12c>
  114390:	e3a03016 	mov	r3, #22
  114394:	ea000230 	b	114c5c <lwip_getsockopt_impl+0x9f0>
  114398:	e51b300c 	ldr	r3, [fp, #-12]
  11439c:	e5933000 	ldr	r3, [r3]
  1143a0:	e3530000 	cmp	r3, #0
  1143a4:	0a000004 	beq	1143bc <lwip_getsockopt_impl+0x150>
  1143a8:	e51b300c 	ldr	r3, [fp, #-12]
  1143ac:	e5933000 	ldr	r3, [r3]
  1143b0:	e5933008 	ldr	r3, [r3, #8]
  1143b4:	e3530000 	cmp	r3, #0
  1143b8:	1a000001 	bne	1143c4 <lwip_getsockopt_impl+0x158>
  1143bc:	e3a03016 	mov	r3, #22
  1143c0:	ea000225 	b	114c5c <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_TCP) {
  1143c4:	e51b300c 	ldr	r3, [fp, #-12]
  1143c8:	e5933000 	ldr	r3, [r3]
  1143cc:	e5933000 	ldr	r3, [r3]
  1143d0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1143d4:	e3530010 	cmp	r3, #16
  1143d8:	0a000001 	beq	1143e4 <lwip_getsockopt_impl+0x178>
        return ENOPROTOOPT;
  1143dc:	e3a0305c 	mov	r3, #92	; 0x5c
  1143e0:	ea00021d 	b	114c5c <lwip_getsockopt_impl+0x9f0>
      }
      if ((sock->conn->pcb.tcp != NULL) && (sock->conn->pcb.tcp->state == LISTEN)) {
  1143e4:	e51b300c 	ldr	r3, [fp, #-12]
  1143e8:	e5933000 	ldr	r3, [r3]
  1143ec:	e5933008 	ldr	r3, [r3, #8]
  1143f0:	e3530000 	cmp	r3, #0
  1143f4:	0a000009 	beq	114420 <lwip_getsockopt_impl+0x1b4>
  1143f8:	e51b300c 	ldr	r3, [fp, #-12]
  1143fc:	e5933000 	ldr	r3, [r3]
  114400:	e5933008 	ldr	r3, [r3, #8]
  114404:	e5933014 	ldr	r3, [r3, #20]
  114408:	e3530001 	cmp	r3, #1
  11440c:	1a000003 	bne	114420 <lwip_getsockopt_impl+0x1b4>
        *(int*)optval = 1;
  114410:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114414:	e3a02001 	mov	r2, #1
  114418:	e5832000 	str	r2, [r3]
      } else {
        *(int*)optval = 0;
      }
      break;
  11441c:	ea0000ff 	b	114820 <lwip_getsockopt_impl+0x5b4>
        *(int*)optval = 0;
  114420:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114424:	e3a02000 	mov	r2, #0
  114428:	e5832000 	str	r2, [r3]
      break;
  11442c:	ea0000fb 	b	114820 <lwip_getsockopt_impl+0x5b4>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114430:	e59b3004 	ldr	r3, [fp, #4]
  114434:	e5933000 	ldr	r3, [r3]
  114438:	e3530003 	cmp	r3, #3
  11443c:	8a000001 	bhi	114448 <lwip_getsockopt_impl+0x1dc>
  114440:	e3a03016 	mov	r3, #22
  114444:	ea000204 	b	114c5c <lwip_getsockopt_impl+0x9f0>
  114448:	e51b300c 	ldr	r3, [fp, #-12]
  11444c:	e5933000 	ldr	r3, [r3]
  114450:	e3530000 	cmp	r3, #0
  114454:	0a000004 	beq	11446c <lwip_getsockopt_impl+0x200>
  114458:	e51b300c 	ldr	r3, [fp, #-12]
  11445c:	e5933000 	ldr	r3, [r3]
  114460:	e5933008 	ldr	r3, [r3, #8]
  114464:	e3530000 	cmp	r3, #0
  114468:	1a000001 	bne	114474 <lwip_getsockopt_impl+0x208>
  11446c:	e3a03016 	mov	r3, #22
  114470:	ea0001f9 	b	114c5c <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = ip_get_option(sock->conn->pcb.ip, optname);
  114474:	e51b300c 	ldr	r3, [fp, #-12]
  114478:	e5933000 	ldr	r3, [r3]
  11447c:	e5933008 	ldr	r3, [r3, #8]
  114480:	e5d33008 	ldrb	r3, [r3, #8]
  114484:	e1a02003 	mov	r2, r3
  114488:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11448c:	e0022003 	and	r2, r2, r3
  114490:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114494:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",
                                  s, optname, (*(int*)optval?"on":"off")));
      break;
  114498:	ea0000e0 	b	114820 <lwip_getsockopt_impl+0x5b4>

    case SO_TYPE:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  11449c:	e59b3004 	ldr	r3, [fp, #4]
  1144a0:	e5933000 	ldr	r3, [r3]
  1144a4:	e3530003 	cmp	r3, #3
  1144a8:	8a000001 	bhi	1144b4 <lwip_getsockopt_impl+0x248>
  1144ac:	e3a03016 	mov	r3, #22
  1144b0:	ea0001e9 	b	114c5c <lwip_getsockopt_impl+0x9f0>
  1144b4:	e51b300c 	ldr	r3, [fp, #-12]
  1144b8:	e5933000 	ldr	r3, [r3]
  1144bc:	e3530000 	cmp	r3, #0
  1144c0:	1a000001 	bne	1144cc <lwip_getsockopt_impl+0x260>
  1144c4:	e3a03016 	mov	r3, #22
  1144c8:	ea0001e3 	b	114c5c <lwip_getsockopt_impl+0x9f0>
      switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
  1144cc:	e51b300c 	ldr	r3, [fp, #-12]
  1144d0:	e5933000 	ldr	r3, [r3]
  1144d4:	e5933000 	ldr	r3, [r3]
  1144d8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1144dc:	e3530020 	cmp	r3, #32
  1144e0:	0a00000c 	beq	114518 <lwip_getsockopt_impl+0x2ac>
  1144e4:	e3530040 	cmp	r3, #64	; 0x40
  1144e8:	0a000002 	beq	1144f8 <lwip_getsockopt_impl+0x28c>
  1144ec:	e3530010 	cmp	r3, #16
  1144f0:	0a000004 	beq	114508 <lwip_getsockopt_impl+0x29c>
  1144f4:	ea00000b 	b	114528 <lwip_getsockopt_impl+0x2bc>
      case NETCONN_RAW:
        *(int*)optval = SOCK_RAW;
  1144f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1144fc:	e3a02003 	mov	r2, #3
  114500:	e5832000 	str	r2, [r3]
        break;
  114504:	ea00000e 	b	114544 <lwip_getsockopt_impl+0x2d8>
      case NETCONN_TCP:
        *(int*)optval = SOCK_STREAM;
  114508:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11450c:	e3a02001 	mov	r2, #1
  114510:	e5832000 	str	r2, [r3]
        break;
  114514:	ea00000a 	b	114544 <lwip_getsockopt_impl+0x2d8>
      case NETCONN_UDP:
        *(int*)optval = SOCK_DGRAM;
  114518:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11451c:	e3a02002 	mov	r2, #2
  114520:	e5832000 	str	r2, [r3]
        break;
  114524:	ea000006 	b	114544 <lwip_getsockopt_impl+0x2d8>
      default: /* unrecognized socket type */
        *(int*)optval = netconn_type(sock->conn);
  114528:	e51b300c 	ldr	r3, [fp, #-12]
  11452c:	e5933000 	ldr	r3, [r3]
  114530:	e5933000 	ldr	r3, [r3]
  114534:	e1a02003 	mov	r2, r3
  114538:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11453c:	e5832000 	str	r2, [r3]
                    ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE): unrecognized socket type %d\n",
                    s, *(int *)optval));
      }  /* switch (netconn_type(sock->conn)) */
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",
                  s, *(int *)optval));
      break;
  114540:	ea0000b6 	b	114820 <lwip_getsockopt_impl+0x5b4>
  114544:	ea0000b5 	b	114820 <lwip_getsockopt_impl+0x5b4>

    case SO_ERROR:
      LWIP_SOCKOPT_CHECK_OPTLEN(*optlen, int);
  114548:	e59b3004 	ldr	r3, [fp, #4]
  11454c:	e5933000 	ldr	r3, [r3]
  114550:	e3530003 	cmp	r3, #3
  114554:	8a000001 	bhi	114560 <lwip_getsockopt_impl+0x2f4>
  114558:	e3a03016 	mov	r3, #22
  11455c:	ea0001be 	b	114c5c <lwip_getsockopt_impl+0x9f0>
      /* only overwrite ERR_OK or temporary errors */
      if (((sock->err == 0) || (sock->err == EINPROGRESS)) && (sock->conn != NULL)) {
  114560:	e51b300c 	ldr	r3, [fp, #-12]
  114564:	e5d33010 	ldrb	r3, [r3, #16]
  114568:	e3530000 	cmp	r3, #0
  11456c:	0a000003 	beq	114580 <lwip_getsockopt_impl+0x314>
  114570:	e51b300c 	ldr	r3, [fp, #-12]
  114574:	e5d33010 	ldrb	r3, [r3, #16]
  114578:	e3530073 	cmp	r3, #115	; 0x73
  11457c:	1a000014 	bne	1145d4 <lwip_getsockopt_impl+0x368>
  114580:	e51b300c 	ldr	r3, [fp, #-12]
  114584:	e5933000 	ldr	r3, [r3]
  114588:	e3530000 	cmp	r3, #0
  11458c:	0a000010 	beq	1145d4 <lwip_getsockopt_impl+0x368>
        sock_set_errno(sock, err_to_errno(sock->conn->last_err));
  114590:	e51b300c 	ldr	r3, [fp, #-12]
  114594:	e5933000 	ldr	r3, [r3]
  114598:	e1d330dc 	ldrsb	r3, [r3, #12]
  11459c:	e1a00003 	mov	r0, r3
  1145a0:	ebffee39 	bl	10fe8c <err_to_errno>
  1145a4:	e50b0010 	str	r0, [fp, #-16]
  1145a8:	e51b3010 	ldr	r3, [fp, #-16]
  1145ac:	e6ef2073 	uxtb	r2, r3
  1145b0:	e51b300c 	ldr	r3, [fp, #-12]
  1145b4:	e5c32010 	strb	r2, [r3, #16]
  1145b8:	e51b3010 	ldr	r3, [fp, #-16]
  1145bc:	e3530000 	cmp	r3, #0
  1145c0:	0a000003 	beq	1145d4 <lwip_getsockopt_impl+0x368>
  1145c4:	eb009245 	bl	138ee0 <__errno_location>
  1145c8:	e1a02000 	mov	r2, r0
  1145cc:	e51b3010 	ldr	r3, [fp, #-16]
  1145d0:	e5823000 	str	r3, [r2]
      }
      *(int *)optval = (sock->err == 0xFF ? (int)-1 : (int)sock->err);
  1145d4:	e51b300c 	ldr	r3, [fp, #-12]
  1145d8:	e5d33010 	ldrb	r3, [r3, #16]
  1145dc:	e35300ff 	cmp	r3, #255	; 0xff
  1145e0:	0a000003 	beq	1145f4 <lwip_getsockopt_impl+0x388>
  1145e4:	e51b300c 	ldr	r3, [fp, #-12]
  1145e8:	e5d33010 	ldrb	r3, [r3, #16]
  1145ec:	e1a02003 	mov	r2, r3
  1145f0:	ea000000 	b	1145f8 <lwip_getsockopt_impl+0x38c>
  1145f4:	e3e02000 	mvn	r2, #0
  1145f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1145fc:	e5832000 	str	r2, [r3]
      sock->err = 0;
  114600:	e51b300c 	ldr	r3, [fp, #-12]
  114604:	e3a02000 	mov	r2, #0
  114608:	e5c32010 	strb	r2, [r3, #16]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",
                  s, *(int *)optval));
      break;
  11460c:	ea000083 	b	114820 <lwip_getsockopt_impl+0x5b4>

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114610:	e59b3004 	ldr	r3, [fp, #4]
  114614:	e5933000 	ldr	r3, [r3]
  114618:	e353000f 	cmp	r3, #15
  11461c:	8a000001 	bhi	114628 <lwip_getsockopt_impl+0x3bc>
  114620:	e3a03016 	mov	r3, #22
  114624:	ea00018c 	b	114c5c <lwip_getsockopt_impl+0x9f0>
  114628:	e51b300c 	ldr	r3, [fp, #-12]
  11462c:	e5933000 	ldr	r3, [r3]
  114630:	e3530000 	cmp	r3, #0
  114634:	1a000001 	bne	114640 <lwip_getsockopt_impl+0x3d4>
  114638:	e3a03016 	mov	r3, #22
  11463c:	ea000186 	b	114c5c <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_sendtimeout(sock->conn));
  114640:	e51b300c 	ldr	r3, [fp, #-12]
  114644:	e5933000 	ldr	r3, [r3]
  114648:	e5933020 	ldr	r3, [r3, #32]
  11464c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  114650:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  114654:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114658:	e3413062 	movt	r3, #4194	; 0x1062
  11465c:	e0832392 	umull	r2, r3, r2, r3
  114660:	e1a03323 	lsr	r3, r3, #6
  114664:	e1a02003 	mov	r2, r3
  114668:	e3a03000 	mov	r3, #0
  11466c:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  114670:	e1c120f0 	strd	r2, [r1]
  114674:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  114678:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11467c:	e3413062 	movt	r3, #4194	; 0x1062
  114680:	e0832391 	umull	r2, r3, r1, r3
  114684:	e1a03323 	lsr	r3, r3, #6
  114688:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  11468c:	e0030392 	mul	r3, r2, r3
  114690:	e0413003 	sub	r3, r1, r3
  114694:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114698:	e0030392 	mul	r3, r2, r3
  11469c:	e1a02003 	mov	r2, r3
  1146a0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1146a4:	e5832008 	str	r2, [r3, #8]
      break;
  1146a8:	ea00005c 	b	114820 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  1146ac:	e59b3004 	ldr	r3, [fp, #4]
  1146b0:	e5933000 	ldr	r3, [r3]
  1146b4:	e353000f 	cmp	r3, #15
  1146b8:	8a000001 	bhi	1146c4 <lwip_getsockopt_impl+0x458>
  1146bc:	e3a03016 	mov	r3, #22
  1146c0:	ea000165 	b	114c5c <lwip_getsockopt_impl+0x9f0>
  1146c4:	e51b300c 	ldr	r3, [fp, #-12]
  1146c8:	e5933000 	ldr	r3, [r3]
  1146cc:	e3530000 	cmp	r3, #0
  1146d0:	1a000001 	bne	1146dc <lwip_getsockopt_impl+0x470>
  1146d4:	e3a03016 	mov	r3, #22
  1146d8:	ea00015f 	b	114c5c <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_recvtimeout(sock->conn));
  1146dc:	e51b300c 	ldr	r3, [fp, #-12]
  1146e0:	e5933000 	ldr	r3, [r3]
  1146e4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1146e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1146ec:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1146f0:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1146f4:	e3413062 	movt	r3, #4194	; 0x1062
  1146f8:	e0832392 	umull	r2, r3, r2, r3
  1146fc:	e1a03323 	lsr	r3, r3, #6
  114700:	e1a02003 	mov	r2, r3
  114704:	e3a03000 	mov	r3, #0
  114708:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  11470c:	e1c120f0 	strd	r2, [r1]
  114710:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  114714:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114718:	e3413062 	movt	r3, #4194	; 0x1062
  11471c:	e0832391 	umull	r2, r3, r1, r3
  114720:	e1a03323 	lsr	r3, r3, #6
  114724:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114728:	e0030392 	mul	r3, r2, r3
  11472c:	e0413003 	sub	r3, r1, r3
  114730:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114734:	e0030392 	mul	r3, r2, r3
  114738:	e1a02003 	mov	r2, r3
  11473c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114740:	e5832008 	str	r2, [r3, #8]
      break;
  114744:	ea000035 	b	114820 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  114748:	e59b3004 	ldr	r3, [fp, #4]
  11474c:	e5933000 	ldr	r3, [r3]
  114750:	e3530003 	cmp	r3, #3
  114754:	8a000001 	bhi	114760 <lwip_getsockopt_impl+0x4f4>
  114758:	e3a03016 	mov	r3, #22
  11475c:	ea00013e 	b	114c5c <lwip_getsockopt_impl+0x9f0>
  114760:	e51b300c 	ldr	r3, [fp, #-12]
  114764:	e5933000 	ldr	r3, [r3]
  114768:	e3530000 	cmp	r3, #0
  11476c:	1a000001 	bne	114778 <lwip_getsockopt_impl+0x50c>
  114770:	e3a03016 	mov	r3, #22
  114774:	ea000138 	b	114c5c <lwip_getsockopt_impl+0x9f0>
      *(int *)optval = netconn_get_recvbufsize(sock->conn);
  114778:	e51b300c 	ldr	r3, [fp, #-12]
  11477c:	e5933000 	ldr	r3, [r3]
  114780:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  114784:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114788:	e5832000 	str	r2, [r3]
      break;
  11478c:	ea000023 	b	114820 <lwip_getsockopt_impl+0x5b4>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_UDP);
  114790:	e59b3004 	ldr	r3, [fp, #4]
  114794:	e5933000 	ldr	r3, [r3]
  114798:	e3530003 	cmp	r3, #3
  11479c:	8a000001 	bhi	1147a8 <lwip_getsockopt_impl+0x53c>
  1147a0:	e3a03016 	mov	r3, #22
  1147a4:	ea00012c 	b	114c5c <lwip_getsockopt_impl+0x9f0>
  1147a8:	e51b300c 	ldr	r3, [fp, #-12]
  1147ac:	e5933000 	ldr	r3, [r3]
  1147b0:	e3530000 	cmp	r3, #0
  1147b4:	0a000004 	beq	1147cc <lwip_getsockopt_impl+0x560>
  1147b8:	e51b300c 	ldr	r3, [fp, #-12]
  1147bc:	e5933000 	ldr	r3, [r3]
  1147c0:	e5933008 	ldr	r3, [r3, #8]
  1147c4:	e3530000 	cmp	r3, #0
  1147c8:	1a000001 	bne	1147d4 <lwip_getsockopt_impl+0x568>
  1147cc:	e3a03016 	mov	r3, #22
  1147d0:	ea000121 	b	114c5c <lwip_getsockopt_impl+0x9f0>
  1147d4:	e51b300c 	ldr	r3, [fp, #-12]
  1147d8:	e5933000 	ldr	r3, [r3]
  1147dc:	e5933000 	ldr	r3, [r3]
  1147e0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1147e4:	e3530020 	cmp	r3, #32
  1147e8:	0a000001 	beq	1147f4 <lwip_getsockopt_impl+0x588>
  1147ec:	e3a0305c 	mov	r3, #92	; 0x5c
  1147f0:	ea000119 	b	114c5c <lwip_getsockopt_impl+0x9f0>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
  1147f4:	e51b300c 	ldr	r3, [fp, #-12]
  1147f8:	e5933000 	ldr	r3, [r3]
  1147fc:	e5933008 	ldr	r3, [r3, #8]
  114800:	e5d33010 	ldrb	r3, [r3, #16]
  114804:	e2032001 	and	r2, r3, #1
  114808:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11480c:	e5832000 	str	r2, [r3]
      break;
  114810:	ea000002 	b	114820 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_UDP*/
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114814:	e3a0305c 	mov	r3, #92	; 0x5c
  114818:	e54b3005 	strb	r3, [fp, #-5]
      break;
  11481c:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114820:	ea00010c 	b	114c58 <lwip_getsockopt_impl+0x9ec>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  114824:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114828:	e2433001 	sub	r3, r3, #1
  11482c:	e3530006 	cmp	r3, #6
  114830:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  114834:	ea000098 	b	114a9c <lwip_getsockopt_impl+0x830>
  114838:	001148b8 	.word	0x001148b8
  11483c:	00114854 	.word	0x00114854
  114840:	00114a9c 	.word	0x00114a9c
  114844:	00114a9c 	.word	0x00114a9c
  114848:	0011491c 	.word	0x0011491c
  11484c:	0011499c 	.word	0x0011499c
  114850:	00114a1c 	.word	0x00114a1c
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114854:	e59b3004 	ldr	r3, [fp, #4]
  114858:	e5933000 	ldr	r3, [r3]
  11485c:	e3530003 	cmp	r3, #3
  114860:	8a000001 	bhi	11486c <lwip_getsockopt_impl+0x600>
  114864:	e3a03016 	mov	r3, #22
  114868:	ea0000fb 	b	114c5c <lwip_getsockopt_impl+0x9f0>
  11486c:	e51b300c 	ldr	r3, [fp, #-12]
  114870:	e5933000 	ldr	r3, [r3]
  114874:	e3530000 	cmp	r3, #0
  114878:	0a000004 	beq	114890 <lwip_getsockopt_impl+0x624>
  11487c:	e51b300c 	ldr	r3, [fp, #-12]
  114880:	e5933000 	ldr	r3, [r3]
  114884:	e5933008 	ldr	r3, [r3, #8]
  114888:	e3530000 	cmp	r3, #0
  11488c:	1a000001 	bne	114898 <lwip_getsockopt_impl+0x62c>
  114890:	e3a03016 	mov	r3, #22
  114894:	ea0000f0 	b	114c5c <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->ttl;
  114898:	e51b300c 	ldr	r3, [fp, #-12]
  11489c:	e5933000 	ldr	r3, [r3]
  1148a0:	e5933008 	ldr	r3, [r3, #8]
  1148a4:	e5d3300a 	ldrb	r3, [r3, #10]
  1148a8:	e1a02003 	mov	r2, r3
  1148ac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1148b0:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  1148b4:	ea00007b 	b	114aa8 <lwip_getsockopt_impl+0x83c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  1148b8:	e59b3004 	ldr	r3, [fp, #4]
  1148bc:	e5933000 	ldr	r3, [r3]
  1148c0:	e3530003 	cmp	r3, #3
  1148c4:	8a000001 	bhi	1148d0 <lwip_getsockopt_impl+0x664>
  1148c8:	e3a03016 	mov	r3, #22
  1148cc:	ea0000e2 	b	114c5c <lwip_getsockopt_impl+0x9f0>
  1148d0:	e51b300c 	ldr	r3, [fp, #-12]
  1148d4:	e5933000 	ldr	r3, [r3]
  1148d8:	e3530000 	cmp	r3, #0
  1148dc:	0a000004 	beq	1148f4 <lwip_getsockopt_impl+0x688>
  1148e0:	e51b300c 	ldr	r3, [fp, #-12]
  1148e4:	e5933000 	ldr	r3, [r3]
  1148e8:	e5933008 	ldr	r3, [r3, #8]
  1148ec:	e3530000 	cmp	r3, #0
  1148f0:	1a000001 	bne	1148fc <lwip_getsockopt_impl+0x690>
  1148f4:	e3a03016 	mov	r3, #22
  1148f8:	ea0000d7 	b	114c5c <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->tos;
  1148fc:	e51b300c 	ldr	r3, [fp, #-12]
  114900:	e5933000 	ldr	r3, [r3]
  114904:	e5933008 	ldr	r3, [r3, #8]
  114908:	e5d33009 	ldrb	r3, [r3, #9]
  11490c:	e1a02003 	mov	r2, r3
  114910:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114914:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",
                  s, *(int *)optval));
      break;
  114918:	ea000062 	b	114aa8 <lwip_getsockopt_impl+0x83c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  11491c:	e59b3004 	ldr	r3, [fp, #4]
  114920:	e5933000 	ldr	r3, [r3]
  114924:	e3530000 	cmp	r3, #0
  114928:	1a000001 	bne	114934 <lwip_getsockopt_impl+0x6c8>
  11492c:	e3a03016 	mov	r3, #22
  114930:	ea0000c9 	b	114c5c <lwip_getsockopt_impl+0x9f0>
  114934:	e51b300c 	ldr	r3, [fp, #-12]
  114938:	e5933000 	ldr	r3, [r3]
  11493c:	e3530000 	cmp	r3, #0
  114940:	0a000004 	beq	114958 <lwip_getsockopt_impl+0x6ec>
  114944:	e51b300c 	ldr	r3, [fp, #-12]
  114948:	e5933000 	ldr	r3, [r3]
  11494c:	e5933008 	ldr	r3, [r3, #8]
  114950:	e3530000 	cmp	r3, #0
  114954:	1a000001 	bne	114960 <lwip_getsockopt_impl+0x6f4>
  114958:	e3a03016 	mov	r3, #22
  11495c:	ea0000be 	b	114c5c <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  114960:	e51b300c 	ldr	r3, [fp, #-12]
  114964:	e5933000 	ldr	r3, [r3]
  114968:	e5933000 	ldr	r3, [r3]
  11496c:	e20330f0 	and	r3, r3, #240	; 0xf0
  114970:	e3530020 	cmp	r3, #32
  114974:	0a000001 	beq	114980 <lwip_getsockopt_impl+0x714>
        return ENOPROTOOPT;
  114978:	e3a0305c 	mov	r3, #92	; 0x5c
  11497c:	ea0000b6 	b	114c5c <lwip_getsockopt_impl+0x9f0>
      }
      *(u8_t*)optval = udp_get_multicast_ttl(sock->conn->pcb.udp);
  114980:	e51b300c 	ldr	r3, [fp, #-12]
  114984:	e5933000 	ldr	r3, [r3]
  114988:	e5933008 	ldr	r3, [r3, #8]
  11498c:	e5d3201c 	ldrb	r2, [r3, #28]
  114990:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114994:	e5c32000 	strb	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  114998:	ea000042 	b	114aa8 <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_IF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, struct in_addr);
  11499c:	e59b3004 	ldr	r3, [fp, #4]
  1149a0:	e5933000 	ldr	r3, [r3]
  1149a4:	e3530003 	cmp	r3, #3
  1149a8:	8a000001 	bhi	1149b4 <lwip_getsockopt_impl+0x748>
  1149ac:	e3a03016 	mov	r3, #22
  1149b0:	ea0000a9 	b	114c5c <lwip_getsockopt_impl+0x9f0>
  1149b4:	e51b300c 	ldr	r3, [fp, #-12]
  1149b8:	e5933000 	ldr	r3, [r3]
  1149bc:	e3530000 	cmp	r3, #0
  1149c0:	0a000004 	beq	1149d8 <lwip_getsockopt_impl+0x76c>
  1149c4:	e51b300c 	ldr	r3, [fp, #-12]
  1149c8:	e5933000 	ldr	r3, [r3]
  1149cc:	e5933008 	ldr	r3, [r3, #8]
  1149d0:	e3530000 	cmp	r3, #0
  1149d4:	1a000001 	bne	1149e0 <lwip_getsockopt_impl+0x774>
  1149d8:	e3a03016 	mov	r3, #22
  1149dc:	ea00009e 	b	114c5c <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  1149e0:	e51b300c 	ldr	r3, [fp, #-12]
  1149e4:	e5933000 	ldr	r3, [r3]
  1149e8:	e5933000 	ldr	r3, [r3]
  1149ec:	e20330f0 	and	r3, r3, #240	; 0xf0
  1149f0:	e3530020 	cmp	r3, #32
  1149f4:	0a000001 	beq	114a00 <lwip_getsockopt_impl+0x794>
        return ENOPROTOOPT;
  1149f8:	e3a0305c 	mov	r3, #92	; 0x5c
  1149fc:	ea000096 	b	114c5c <lwip_getsockopt_impl+0x9f0>
      }
      inet_addr_from_ip4addr((struct in_addr*)optval, udp_get_multicast_netif_addr(sock->conn->pcb.udp));
  114a00:	e51b300c 	ldr	r3, [fp, #-12]
  114a04:	e5933000 	ldr	r3, [r3]
  114a08:	e5933008 	ldr	r3, [r3, #8]
  114a0c:	e5932018 	ldr	r2, [r3, #24]
  114a10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114a14:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_IF) = 0x%"X32_F"\n",
                  s, *(u32_t *)optval));
      break;
  114a18:	ea000022 	b	114aa8 <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  114a1c:	e59b3004 	ldr	r3, [fp, #4]
  114a20:	e5933000 	ldr	r3, [r3]
  114a24:	e3530000 	cmp	r3, #0
  114a28:	1a000001 	bne	114a34 <lwip_getsockopt_impl+0x7c8>
  114a2c:	e3a03016 	mov	r3, #22
  114a30:	ea000089 	b	114c5c <lwip_getsockopt_impl+0x9f0>
  114a34:	e51b300c 	ldr	r3, [fp, #-12]
  114a38:	e5933000 	ldr	r3, [r3]
  114a3c:	e3530000 	cmp	r3, #0
  114a40:	0a000004 	beq	114a58 <lwip_getsockopt_impl+0x7ec>
  114a44:	e51b300c 	ldr	r3, [fp, #-12]
  114a48:	e5933000 	ldr	r3, [r3]
  114a4c:	e5933008 	ldr	r3, [r3, #8]
  114a50:	e3530000 	cmp	r3, #0
  114a54:	1a000001 	bne	114a60 <lwip_getsockopt_impl+0x7f4>
  114a58:	e3a03016 	mov	r3, #22
  114a5c:	ea00007e 	b	114c5c <lwip_getsockopt_impl+0x9f0>
      if ((sock->conn->pcb.udp->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) {
  114a60:	e51b300c 	ldr	r3, [fp, #-12]
  114a64:	e5933000 	ldr	r3, [r3]
  114a68:	e5933008 	ldr	r3, [r3, #8]
  114a6c:	e5d33010 	ldrb	r3, [r3, #16]
  114a70:	e2033008 	and	r3, r3, #8
  114a74:	e3530000 	cmp	r3, #0
  114a78:	0a000003 	beq	114a8c <lwip_getsockopt_impl+0x820>
        *(u8_t*)optval = 1;
  114a7c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114a80:	e3a02001 	mov	r2, #1
  114a84:	e5c32000 	strb	r2, [r3]
      } else {
        *(u8_t*)optval = 0;
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_LOOP) = %d\n",
                  s, *(int *)optval));
      break;
  114a88:	ea000006 	b	114aa8 <lwip_getsockopt_impl+0x83c>
        *(u8_t*)optval = 0;
  114a8c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114a90:	e3a02000 	mov	r2, #0
  114a94:	e5c32000 	strb	r2, [r3]
      break;
  114a98:	ea000002 	b	114aa8 <lwip_getsockopt_impl+0x83c>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114a9c:	e3a0305c 	mov	r3, #92	; 0x5c
  114aa0:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114aa4:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114aa8:	ea00006a 	b	114c58 <lwip_getsockopt_impl+0x9ec>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_TCP);
  114aac:	e59b3004 	ldr	r3, [fp, #4]
  114ab0:	e5933000 	ldr	r3, [r3]
  114ab4:	e3530003 	cmp	r3, #3
  114ab8:	8a000001 	bhi	114ac4 <lwip_getsockopt_impl+0x858>
  114abc:	e3a03016 	mov	r3, #22
  114ac0:	ea000065 	b	114c5c <lwip_getsockopt_impl+0x9f0>
  114ac4:	e51b300c 	ldr	r3, [fp, #-12]
  114ac8:	e5933000 	ldr	r3, [r3]
  114acc:	e3530000 	cmp	r3, #0
  114ad0:	0a000004 	beq	114ae8 <lwip_getsockopt_impl+0x87c>
  114ad4:	e51b300c 	ldr	r3, [fp, #-12]
  114ad8:	e5933000 	ldr	r3, [r3]
  114adc:	e5933008 	ldr	r3, [r3, #8]
  114ae0:	e3530000 	cmp	r3, #0
  114ae4:	1a000001 	bne	114af0 <lwip_getsockopt_impl+0x884>
  114ae8:	e3a03016 	mov	r3, #22
  114aec:	ea00005a 	b	114c5c <lwip_getsockopt_impl+0x9f0>
  114af0:	e51b300c 	ldr	r3, [fp, #-12]
  114af4:	e5933000 	ldr	r3, [r3]
  114af8:	e5933000 	ldr	r3, [r3]
  114afc:	e20330f0 	and	r3, r3, #240	; 0xf0
  114b00:	e3530010 	cmp	r3, #16
  114b04:	0a000001 	beq	114b10 <lwip_getsockopt_impl+0x8a4>
  114b08:	e3a0305c 	mov	r3, #92	; 0x5c
  114b0c:	ea000052 	b	114c5c <lwip_getsockopt_impl+0x9f0>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  114b10:	e51b300c 	ldr	r3, [fp, #-12]
  114b14:	e5933000 	ldr	r3, [r3]
  114b18:	e5933008 	ldr	r3, [r3, #8]
  114b1c:	e5933014 	ldr	r3, [r3, #20]
  114b20:	e3530001 	cmp	r3, #1
  114b24:	1a000001 	bne	114b30 <lwip_getsockopt_impl+0x8c4>
      return EINVAL;
  114b28:	e3a03016 	mov	r3, #22
  114b2c:	ea00004a 	b	114c5c <lwip_getsockopt_impl+0x9f0>
    }
    switch (optname) {
  114b30:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114b34:	e2433001 	sub	r3, r3, #1
  114b38:	e3530004 	cmp	r3, #4
  114b3c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  114b40:	ea000039 	b	114c2c <lwip_getsockopt_impl+0x9c0>
  114b44:	00114b58 	.word	0x00114b58
  114b48:	00114b8c 	.word	0x00114b8c
  114b4c:	00114bac 	.word	0x00114bac
  114b50:	00114bdc 	.word	0x00114bdc
  114b54:	00114c0c 	.word	0x00114c0c
    case TCP_NODELAY:
      *(int*)optval = tcp_nagle_disabled(sock->conn->pcb.tcp);
  114b58:	e51b300c 	ldr	r3, [fp, #-12]
  114b5c:	e5933000 	ldr	r3, [r3]
  114b60:	e5933008 	ldr	r3, [r3, #8]
  114b64:	e5d3301e 	ldrb	r3, [r3, #30]
  114b68:	e2033040 	and	r3, r3, #64	; 0x40
  114b6c:	e3530000 	cmp	r3, #0
  114b70:	13a03001 	movne	r3, #1
  114b74:	03a03000 	moveq	r3, #0
  114b78:	e6ef3073 	uxtb	r3, r3
  114b7c:	e1a02003 	mov	r2, r3
  114b80:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114b84:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",
                  s, (*(int*)optval)?"on":"off") );
      break;
  114b88:	ea00002a 	b	114c38 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPALIVE:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_idle;
  114b8c:	e51b300c 	ldr	r3, [fp, #-12]
  114b90:	e5933000 	ldr	r3, [r3]
  114b94:	e5933008 	ldr	r3, [r3, #8]
  114b98:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  114b9c:	e1a02003 	mov	r2, r3
  114ba0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114ba4:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) = %d\n",
                  s, *(int *)optval));
      break;
  114ba8:	ea000022 	b	114c38 <lwip_getsockopt_impl+0x9cc>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_idle/1000);
  114bac:	e51b300c 	ldr	r3, [fp, #-12]
  114bb0:	e5933000 	ldr	r3, [r3]
  114bb4:	e5933008 	ldr	r3, [r3, #8]
  114bb8:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  114bbc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114bc0:	e3413062 	movt	r3, #4194	; 0x1062
  114bc4:	e0832392 	umull	r2, r3, r2, r3
  114bc8:	e1a03323 	lsr	r3, r3, #6
  114bcc:	e1a02003 	mov	r2, r3
  114bd0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114bd4:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) = %d\n",
                  s, *(int *)optval));
      break;
  114bd8:	ea000016 	b	114c38 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPINTVL:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_intvl/1000);
  114bdc:	e51b300c 	ldr	r3, [fp, #-12]
  114be0:	e5933000 	ldr	r3, [r3]
  114be4:	e5933008 	ldr	r3, [r3, #8]
  114be8:	e5932098 	ldr	r2, [r3, #152]	; 0x98
  114bec:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114bf0:	e3413062 	movt	r3, #4194	; 0x1062
  114bf4:	e0832392 	umull	r2, r3, r2, r3
  114bf8:	e1a03323 	lsr	r3, r3, #6
  114bfc:	e1a02003 	mov	r2, r3
  114c00:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114c04:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) = %d\n",
                  s, *(int *)optval));
      break;
  114c08:	ea00000a 	b	114c38 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPCNT:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_cnt;
  114c0c:	e51b300c 	ldr	r3, [fp, #-12]
  114c10:	e5933000 	ldr	r3, [r3]
  114c14:	e5933008 	ldr	r3, [r3, #8]
  114c18:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  114c1c:	e1a02003 	mov	r2, r3
  114c20:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114c24:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) = %d\n",
                  s, *(int *)optval));
      break;
  114c28:	ea000002 	b	114c38 <lwip_getsockopt_impl+0x9cc>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114c2c:	e3a0305c 	mov	r3, #92	; 0x5c
  114c30:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114c34:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114c38:	ea000006 	b	114c58 <lwip_getsockopt_impl+0x9ec>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114c3c:	e3a0305c 	mov	r3, #92	; 0x5c
  114c40:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114c44:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114c48:	ea000002 	b	114c58 <lwip_getsockopt_impl+0x9ec>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                s, level, optname));
    err = ENOPROTOOPT;
  114c4c:	e3a0305c 	mov	r3, #92	; 0x5c
  114c50:	e54b3005 	strb	r3, [fp, #-5]
    break;
  114c54:	e320f000 	nop	{0}
  } /* switch (level) */

  return err;
  114c58:	e55b3005 	ldrb	r3, [fp, #-5]
}
  114c5c:	e1a00003 	mov	r0, r3
  114c60:	e24bd004 	sub	sp, fp, #4
  114c64:	e8bd8800 	pop	{fp, pc}

00114c68 <lwip_setsockopt>:

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  114c68:	e92d4800 	push	{fp, lr}
  114c6c:	e28db004 	add	fp, sp, #4
  114c70:	e24dd028 	sub	sp, sp, #40	; 0x28
  114c74:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  114c78:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  114c7c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  114c80:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err = 0;
  114c84:	e3a03000 	mov	r3, #0
  114c88:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = get_socket(s);
  114c8c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  114c90:	ebfff0a5 	bl	110f2c <get_socket>
  114c94:	e50b000c 	str	r0, [fp, #-12]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  114c98:	e51b300c 	ldr	r3, [fp, #-12]
  114c9c:	e3530000 	cmp	r3, #0
  114ca0:	1a000001 	bne	114cac <lwip_setsockopt+0x44>
    return -1;
  114ca4:	e3e03000 	mvn	r3, #0
  114ca8:	ea000033 	b	114d7c <lwip_setsockopt+0x114>
  }

  if (NULL == optval) {
  114cac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114cb0:	e3530000 	cmp	r3, #0
  114cb4:	1a00000e 	bne	114cf4 <lwip_setsockopt+0x8c>
    sock_set_errno(sock, EFAULT);
  114cb8:	e3a0300e 	mov	r3, #14
  114cbc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  114cc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114cc4:	e6ef2073 	uxtb	r2, r3
  114cc8:	e51b300c 	ldr	r3, [fp, #-12]
  114ccc:	e5c32010 	strb	r2, [r3, #16]
  114cd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114cd4:	e3530000 	cmp	r3, #0
  114cd8:	0a000003 	beq	114cec <lwip_setsockopt+0x84>
  114cdc:	eb00907f 	bl	138ee0 <__errno_location>
  114ce0:	e1a02000 	mov	r2, r0
  114ce4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114ce8:	e5823000 	str	r3, [r2]
    return -1;
  114cec:	e3e03000 	mvn	r3, #0
  114cf0:	ea000021 	b	114d7c <lwip_setsockopt+0x114>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  114cf4:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  114cf8:	e3400014 	movt	r0, #20
  114cfc:	ebffd77f 	bl	10ab00 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
  114d00:	e59b3004 	ldr	r3, [fp, #4]
  114d04:	e58d3000 	str	r3, [sp]
  114d08:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114d0c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  114d10:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  114d14:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  114d18:	eb00001a 	bl	114d88 <lwip_setsockopt_impl>
  114d1c:	e1a03000 	mov	r3, r0
  114d20:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  114d24:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  114d28:	e3400014 	movt	r0, #20
  114d2c:	ebffd77f 	bl	10ab30 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  114d30:	e55b3005 	ldrb	r3, [fp, #-5]
  114d34:	e50b3010 	str	r3, [fp, #-16]
  114d38:	e51b3010 	ldr	r3, [fp, #-16]
  114d3c:	e6ef2073 	uxtb	r2, r3
  114d40:	e51b300c 	ldr	r3, [fp, #-12]
  114d44:	e5c32010 	strb	r2, [r3, #16]
  114d48:	e51b3010 	ldr	r3, [fp, #-16]
  114d4c:	e3530000 	cmp	r3, #0
  114d50:	0a000003 	beq	114d64 <lwip_setsockopt+0xfc>
  114d54:	eb009061 	bl	138ee0 <__errno_location>
  114d58:	e1a02000 	mov	r2, r0
  114d5c:	e51b3010 	ldr	r3, [fp, #-16]
  114d60:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  114d64:	e55b3005 	ldrb	r3, [fp, #-5]
  114d68:	e3530000 	cmp	r3, #0
  114d6c:	0a000001 	beq	114d78 <lwip_setsockopt+0x110>
  114d70:	e3e03000 	mvn	r3, #0
  114d74:	ea000000 	b	114d7c <lwip_setsockopt+0x114>
  114d78:	e3a03000 	mov	r3, #0
}
  114d7c:	e1a00003 	mov	r0, r3
  114d80:	e24bd004 	sub	sp, fp, #4
  114d84:	e8bd8800 	pop	{fp, pc}

00114d88 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static u8_t
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  114d88:	e92d4800 	push	{fp, lr}
  114d8c:	e28db004 	add	fp, sp, #4
  114d90:	e24dd028 	sub	sp, sp, #40	; 0x28
  114d94:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  114d98:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  114d9c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  114da0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  114da4:	e3a03000 	mov	r3, #0
  114da8:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  114dac:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  114db0:	ebfff082 	bl	110fc0 <tryget_socket>
  114db4:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  114db8:	e51b300c 	ldr	r3, [fp, #-12]
  114dbc:	e3530000 	cmp	r3, #0
  114dc0:	1a000001 	bne	114dcc <lwip_setsockopt_impl+0x44>
    return EBADF;
  114dc4:	e3a03009 	mov	r3, #9
  114dc8:	ea000248 	b	1156f0 <lwip_setsockopt_impl+0x968>
  }

  switch (level) {
  114dcc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114dd0:	e3530006 	cmp	r3, #6
  114dd4:	0a0001d3 	beq	115528 <lwip_setsockopt_impl+0x7a0>
  114dd8:	e3530006 	cmp	r3, #6
  114ddc:	ca000002 	bgt	114dec <lwip_setsockopt_impl+0x64>
  114de0:	e3530000 	cmp	r3, #0
  114de4:	0a0000d2 	beq	115134 <lwip_setsockopt_impl+0x3ac>
  114de8:	ea00023c 	b	1156e0 <lwip_setsockopt_impl+0x958>
  114dec:	e35300ff 	cmp	r3, #255	; 0xff
  114df0:	0a000236 	beq	1156d0 <lwip_setsockopt_impl+0x948>
  114df4:	e3002fff 	movw	r2, #4095	; 0xfff
  114df8:	e1530002 	cmp	r3, r2
  114dfc:	1a000237 	bne	1156e0 <lwip_setsockopt_impl+0x958>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  114e00:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114e04:	e3012002 	movw	r2, #4098	; 0x1002
  114e08:	e1530002 	cmp	r3, r2
  114e0c:	0a000081 	beq	115018 <lwip_setsockopt_impl+0x290>
  114e10:	e3012002 	movw	r2, #4098	; 0x1002
  114e14:	e1530002 	cmp	r3, r2
  114e18:	ca000006 	bgt	114e38 <lwip_setsockopt_impl+0xb0>
  114e1c:	e3530008 	cmp	r3, #8
  114e20:	0a00000e 	beq	114e60 <lwip_setsockopt_impl+0xd8>
  114e24:	e3530020 	cmp	r3, #32
  114e28:	0a00000c 	beq	114e60 <lwip_setsockopt_impl+0xd8>
  114e2c:	e3530004 	cmp	r3, #4
  114e30:	0a00000a 	beq	114e60 <lwip_setsockopt_impl+0xd8>
  114e34:	ea0000ba 	b	115124 <lwip_setsockopt_impl+0x39c>
  114e38:	e3012006 	movw	r2, #4102	; 0x1006
  114e3c:	e1530002 	cmp	r3, r2
  114e40:	0a000057 	beq	114fa4 <lwip_setsockopt_impl+0x21c>
  114e44:	e301200a 	movw	r2, #4106	; 0x100a
  114e48:	e1530002 	cmp	r3, r2
  114e4c:	0a000082 	beq	11505c <lwip_setsockopt_impl+0x2d4>
  114e50:	e3012005 	movw	r2, #4101	; 0x1005
  114e54:	e1530002 	cmp	r3, r2
  114e58:	0a000034 	beq	114f30 <lwip_setsockopt_impl+0x1a8>
  114e5c:	ea0000b0 	b	115124 <lwip_setsockopt_impl+0x39c>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  114e60:	e59b3004 	ldr	r3, [fp, #4]
  114e64:	e3530003 	cmp	r3, #3
  114e68:	8a000001 	bhi	114e74 <lwip_setsockopt_impl+0xec>
  114e6c:	e3a03016 	mov	r3, #22
  114e70:	ea00021e 	b	1156f0 <lwip_setsockopt_impl+0x968>
  114e74:	e51b300c 	ldr	r3, [fp, #-12]
  114e78:	e5933000 	ldr	r3, [r3]
  114e7c:	e3530000 	cmp	r3, #0
  114e80:	0a000004 	beq	114e98 <lwip_setsockopt_impl+0x110>
  114e84:	e51b300c 	ldr	r3, [fp, #-12]
  114e88:	e5933000 	ldr	r3, [r3]
  114e8c:	e5933008 	ldr	r3, [r3, #8]
  114e90:	e3530000 	cmp	r3, #0
  114e94:	1a000001 	bne	114ea0 <lwip_setsockopt_impl+0x118>
  114e98:	e3a03016 	mov	r3, #22
  114e9c:	ea000213 	b	1156f0 <lwip_setsockopt_impl+0x968>
      if (*(const int*)optval) {
  114ea0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114ea4:	e5933000 	ldr	r3, [r3]
  114ea8:	e3530000 	cmp	r3, #0
  114eac:	0a00000e 	beq	114eec <lwip_setsockopt_impl+0x164>
        ip_set_option(sock->conn->pcb.ip, optname);
  114eb0:	e51b300c 	ldr	r3, [fp, #-12]
  114eb4:	e5933000 	ldr	r3, [r3]
  114eb8:	e5933008 	ldr	r3, [r3, #8]
  114ebc:	e5d33008 	ldrb	r3, [r3, #8]
  114ec0:	e6af2073 	sxtb	r2, r3
  114ec4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114ec8:	e6af3073 	sxtb	r3, r3
  114ecc:	e1823003 	orr	r3, r2, r3
  114ed0:	e6af2073 	sxtb	r2, r3
  114ed4:	e51b300c 	ldr	r3, [fp, #-12]
  114ed8:	e5933000 	ldr	r3, [r3]
  114edc:	e5933008 	ldr	r3, [r3, #8]
  114ee0:	e6ef2072 	uxtb	r2, r2
  114ee4:	e5c32008 	strb	r2, [r3, #8]
      } else {
        ip_reset_option(sock->conn->pcb.ip, optname);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                  s, optname, (*(const int*)optval?"on":"off")));
      break;
  114ee8:	ea000090 	b	115130 <lwip_setsockopt_impl+0x3a8>
        ip_reset_option(sock->conn->pcb.ip, optname);
  114eec:	e51b300c 	ldr	r3, [fp, #-12]
  114ef0:	e5933000 	ldr	r3, [r3]
  114ef4:	e5933008 	ldr	r3, [r3, #8]
  114ef8:	e5d33008 	ldrb	r3, [r3, #8]
  114efc:	e6af2073 	sxtb	r2, r3
  114f00:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114f04:	e6af3073 	sxtb	r3, r3
  114f08:	e1e03003 	mvn	r3, r3
  114f0c:	e6af3073 	sxtb	r3, r3
  114f10:	e0033002 	and	r3, r3, r2
  114f14:	e6af2073 	sxtb	r2, r3
  114f18:	e51b300c 	ldr	r3, [fp, #-12]
  114f1c:	e5933000 	ldr	r3, [r3]
  114f20:	e5933008 	ldr	r3, [r3, #8]
  114f24:	e6ef2072 	uxtb	r2, r2
  114f28:	e5c32008 	strb	r2, [r3, #8]
      break;
  114f2c:	ea00007f 	b	115130 <lwip_setsockopt_impl+0x3a8>
    /* SO_TYPE is get-only */
    /* SO_ERROR is get-only */

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114f30:	e59b3004 	ldr	r3, [fp, #4]
  114f34:	e353000f 	cmp	r3, #15
  114f38:	8a000001 	bhi	114f44 <lwip_setsockopt_impl+0x1bc>
  114f3c:	e3a03016 	mov	r3, #22
  114f40:	ea0001ea 	b	1156f0 <lwip_setsockopt_impl+0x968>
  114f44:	e51b300c 	ldr	r3, [fp, #-12]
  114f48:	e5933000 	ldr	r3, [r3]
  114f4c:	e3530000 	cmp	r3, #0
  114f50:	1a000001 	bne	114f5c <lwip_setsockopt_impl+0x1d4>
  114f54:	e3a03016 	mov	r3, #22
  114f58:	ea0001e4 	b	1156f0 <lwip_setsockopt_impl+0x968>
      netconn_set_sendtimeout(sock->conn, LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  114f5c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114f60:	e1c320d0 	ldrd	r2, [r3]
  114f64:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  114f68:	e0010293 	mul	r1, r3, r2
  114f6c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114f70:	e5933008 	ldr	r3, [r3, #8]
  114f74:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  114f78:	e2833003 	add	r3, r3, #3
  114f7c:	e1a02003 	mov	r2, r3
  114f80:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114f84:	e3413062 	movt	r3, #4194	; 0x1062
  114f88:	e0832392 	umull	r2, r3, r2, r3
  114f8c:	e1a03323 	lsr	r3, r3, #6
  114f90:	e0812003 	add	r2, r1, r3
  114f94:	e51b300c 	ldr	r3, [fp, #-12]
  114f98:	e5933000 	ldr	r3, [r3]
  114f9c:	e5832020 	str	r2, [r3, #32]
      break;
  114fa0:	ea000062 	b	115130 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114fa4:	e59b3004 	ldr	r3, [fp, #4]
  114fa8:	e353000f 	cmp	r3, #15
  114fac:	8a000001 	bhi	114fb8 <lwip_setsockopt_impl+0x230>
  114fb0:	e3a03016 	mov	r3, #22
  114fb4:	ea0001cd 	b	1156f0 <lwip_setsockopt_impl+0x968>
  114fb8:	e51b300c 	ldr	r3, [fp, #-12]
  114fbc:	e5933000 	ldr	r3, [r3]
  114fc0:	e3530000 	cmp	r3, #0
  114fc4:	1a000001 	bne	114fd0 <lwip_setsockopt_impl+0x248>
  114fc8:	e3a03016 	mov	r3, #22
  114fcc:	ea0001c7 	b	1156f0 <lwip_setsockopt_impl+0x968>
      netconn_set_recvtimeout(sock->conn, (int)LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  114fd0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114fd4:	e1c320d0 	ldrd	r2, [r3]
  114fd8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  114fdc:	e0010293 	mul	r1, r3, r2
  114fe0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114fe4:	e5933008 	ldr	r3, [r3, #8]
  114fe8:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  114fec:	e2833003 	add	r3, r3, #3
  114ff0:	e1a02003 	mov	r2, r3
  114ff4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114ff8:	e3413062 	movt	r3, #4194	; 0x1062
  114ffc:	e0832392 	umull	r2, r3, r2, r3
  115000:	e1a03323 	lsr	r3, r3, #6
  115004:	e0812003 	add	r2, r1, r3
  115008:	e51b300c 	ldr	r3, [fp, #-12]
  11500c:	e5933000 	ldr	r3, [r3]
  115010:	e5832024 	str	r2, [r3, #36]	; 0x24
      break;
  115014:	ea000045 	b	115130 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, int);
  115018:	e59b3004 	ldr	r3, [fp, #4]
  11501c:	e3530003 	cmp	r3, #3
  115020:	8a000001 	bhi	11502c <lwip_setsockopt_impl+0x2a4>
  115024:	e3a03016 	mov	r3, #22
  115028:	ea0001b0 	b	1156f0 <lwip_setsockopt_impl+0x968>
  11502c:	e51b300c 	ldr	r3, [fp, #-12]
  115030:	e5933000 	ldr	r3, [r3]
  115034:	e3530000 	cmp	r3, #0
  115038:	1a000001 	bne	115044 <lwip_setsockopt_impl+0x2bc>
  11503c:	e3a03016 	mov	r3, #22
  115040:	ea0001aa 	b	1156f0 <lwip_setsockopt_impl+0x968>
      netconn_set_recvbufsize(sock->conn, *(const int*)optval);
  115044:	e51b300c 	ldr	r3, [fp, #-12]
  115048:	e5933000 	ldr	r3, [r3]
  11504c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  115050:	e5922000 	ldr	r2, [r2]
  115054:	e5832028 	str	r2, [r3, #40]	; 0x28
      break;
  115058:	ea000034 	b	115130 <lwip_setsockopt_impl+0x3a8>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
  11505c:	e59b3004 	ldr	r3, [fp, #4]
  115060:	e3530003 	cmp	r3, #3
  115064:	8a000001 	bhi	115070 <lwip_setsockopt_impl+0x2e8>
  115068:	e3a03016 	mov	r3, #22
  11506c:	ea00019f 	b	1156f0 <lwip_setsockopt_impl+0x968>
  115070:	e51b300c 	ldr	r3, [fp, #-12]
  115074:	e5933000 	ldr	r3, [r3]
  115078:	e3530000 	cmp	r3, #0
  11507c:	0a000004 	beq	115094 <lwip_setsockopt_impl+0x30c>
  115080:	e51b300c 	ldr	r3, [fp, #-12]
  115084:	e5933000 	ldr	r3, [r3]
  115088:	e5933008 	ldr	r3, [r3, #8]
  11508c:	e3530000 	cmp	r3, #0
  115090:	1a000001 	bne	11509c <lwip_setsockopt_impl+0x314>
  115094:	e3a03016 	mov	r3, #22
  115098:	ea000194 	b	1156f0 <lwip_setsockopt_impl+0x968>
  11509c:	e51b300c 	ldr	r3, [fp, #-12]
  1150a0:	e5933000 	ldr	r3, [r3]
  1150a4:	e5933000 	ldr	r3, [r3]
  1150a8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1150ac:	e3530020 	cmp	r3, #32
  1150b0:	0a000001 	beq	1150bc <lwip_setsockopt_impl+0x334>
  1150b4:	e3a0305c 	mov	r3, #92	; 0x5c
  1150b8:	ea00018c 	b	1156f0 <lwip_setsockopt_impl+0x968>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      if (*(const int*)optval) {
  1150bc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1150c0:	e5933000 	ldr	r3, [r3]
  1150c4:	e3530000 	cmp	r3, #0
  1150c8:	0a00000a 	beq	1150f8 <lwip_setsockopt_impl+0x370>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
  1150cc:	e51b300c 	ldr	r3, [fp, #-12]
  1150d0:	e5933000 	ldr	r3, [r3]
  1150d4:	e5933008 	ldr	r3, [r3, #8]
  1150d8:	e5d32010 	ldrb	r2, [r3, #16]
  1150dc:	e51b300c 	ldr	r3, [fp, #-12]
  1150e0:	e5933000 	ldr	r3, [r3]
  1150e4:	e5933008 	ldr	r3, [r3, #8]
  1150e8:	e3822001 	orr	r2, r2, #1
  1150ec:	e6ef2072 	uxtb	r2, r2
  1150f0:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
      }
      break;
  1150f4:	ea00000d 	b	115130 <lwip_setsockopt_impl+0x3a8>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
  1150f8:	e51b300c 	ldr	r3, [fp, #-12]
  1150fc:	e5933000 	ldr	r3, [r3]
  115100:	e5933008 	ldr	r3, [r3, #8]
  115104:	e5d32010 	ldrb	r2, [r3, #16]
  115108:	e51b300c 	ldr	r3, [fp, #-12]
  11510c:	e5933000 	ldr	r3, [r3]
  115110:	e5933008 	ldr	r3, [r3, #8]
  115114:	e3c22001 	bic	r2, r2, #1
  115118:	e6ef2072 	uxtb	r2, r2
  11511c:	e5c32010 	strb	r2, [r3, #16]
      break;
  115120:	ea000002 	b	115130 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_UDP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  115124:	e3a0305c 	mov	r3, #92	; 0x5c
  115128:	e54b3005 	strb	r3, [fp, #-5]
      break;
  11512c:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  115130:	ea00016d 	b	1156ec <lwip_setsockopt_impl+0x964>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  115134:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115138:	e2433001 	sub	r3, r3, #1
  11513c:	e3530006 	cmp	r3, #6
  115140:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  115144:	ea0000f2 	b	115514 <lwip_setsockopt_impl+0x78c>
  115148:	001151c4 	.word	0x001151c4
  11514c:	00115164 	.word	0x00115164
  115150:	001153ec 	.word	0x001153ec
  115154:	001153ec 	.word	0x001153ec
  115158:	00115224 	.word	0x00115224
  11515c:	001152a0 	.word	0x001152a0
  115160:	00115324 	.word	0x00115324
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  115164:	e59b3004 	ldr	r3, [fp, #4]
  115168:	e3530003 	cmp	r3, #3
  11516c:	8a000001 	bhi	115178 <lwip_setsockopt_impl+0x3f0>
  115170:	e3a03016 	mov	r3, #22
  115174:	ea00015d 	b	1156f0 <lwip_setsockopt_impl+0x968>
  115178:	e51b300c 	ldr	r3, [fp, #-12]
  11517c:	e5933000 	ldr	r3, [r3]
  115180:	e3530000 	cmp	r3, #0
  115184:	0a000004 	beq	11519c <lwip_setsockopt_impl+0x414>
  115188:	e51b300c 	ldr	r3, [fp, #-12]
  11518c:	e5933000 	ldr	r3, [r3]
  115190:	e5933008 	ldr	r3, [r3, #8]
  115194:	e3530000 	cmp	r3, #0
  115198:	1a000001 	bne	1151a4 <lwip_setsockopt_impl+0x41c>
  11519c:	e3a03016 	mov	r3, #22
  1151a0:	ea000152 	b	1156f0 <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->ttl = (u8_t)(*(const int*)optval);
  1151a4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1151a8:	e5932000 	ldr	r2, [r3]
  1151ac:	e51b300c 	ldr	r3, [fp, #-12]
  1151b0:	e5933000 	ldr	r3, [r3]
  1151b4:	e5933008 	ldr	r3, [r3, #8]
  1151b8:	e6ef2072 	uxtb	r2, r2
  1151bc:	e5c3200a 	strb	r2, [r3, #10]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                  s, sock->conn->pcb.ip->ttl));
      break;
  1151c0:	ea0000d7 	b	115524 <lwip_setsockopt_impl+0x79c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  1151c4:	e59b3004 	ldr	r3, [fp, #4]
  1151c8:	e3530003 	cmp	r3, #3
  1151cc:	8a000001 	bhi	1151d8 <lwip_setsockopt_impl+0x450>
  1151d0:	e3a03016 	mov	r3, #22
  1151d4:	ea000145 	b	1156f0 <lwip_setsockopt_impl+0x968>
  1151d8:	e51b300c 	ldr	r3, [fp, #-12]
  1151dc:	e5933000 	ldr	r3, [r3]
  1151e0:	e3530000 	cmp	r3, #0
  1151e4:	0a000004 	beq	1151fc <lwip_setsockopt_impl+0x474>
  1151e8:	e51b300c 	ldr	r3, [fp, #-12]
  1151ec:	e5933000 	ldr	r3, [r3]
  1151f0:	e5933008 	ldr	r3, [r3, #8]
  1151f4:	e3530000 	cmp	r3, #0
  1151f8:	1a000001 	bne	115204 <lwip_setsockopt_impl+0x47c>
  1151fc:	e3a03016 	mov	r3, #22
  115200:	ea00013a 	b	1156f0 <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->tos = (u8_t)(*(const int*)optval);
  115204:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115208:	e5932000 	ldr	r2, [r3]
  11520c:	e51b300c 	ldr	r3, [fp, #-12]
  115210:	e5933000 	ldr	r3, [r3]
  115214:	e5933008 	ldr	r3, [r3, #8]
  115218:	e6ef2072 	uxtb	r2, r2
  11521c:	e5c32009 	strb	r2, [r3, #9]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                  s, sock->conn->pcb.ip->tos));
      break;
  115220:	ea0000bf 	b	115524 <lwip_setsockopt_impl+0x79c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  115224:	e59b3004 	ldr	r3, [fp, #4]
  115228:	e3530000 	cmp	r3, #0
  11522c:	1a000001 	bne	115238 <lwip_setsockopt_impl+0x4b0>
  115230:	e3a03016 	mov	r3, #22
  115234:	ea00012d 	b	1156f0 <lwip_setsockopt_impl+0x968>
  115238:	e51b300c 	ldr	r3, [fp, #-12]
  11523c:	e5933000 	ldr	r3, [r3]
  115240:	e3530000 	cmp	r3, #0
  115244:	0a000004 	beq	11525c <lwip_setsockopt_impl+0x4d4>
  115248:	e51b300c 	ldr	r3, [fp, #-12]
  11524c:	e5933000 	ldr	r3, [r3]
  115250:	e5933008 	ldr	r3, [r3, #8]
  115254:	e3530000 	cmp	r3, #0
  115258:	1a000001 	bne	115264 <lwip_setsockopt_impl+0x4dc>
  11525c:	e3a03016 	mov	r3, #22
  115260:	ea000122 	b	1156f0 <lwip_setsockopt_impl+0x968>
  115264:	e51b300c 	ldr	r3, [fp, #-12]
  115268:	e5933000 	ldr	r3, [r3]
  11526c:	e5933000 	ldr	r3, [r3]
  115270:	e20330f0 	and	r3, r3, #240	; 0xf0
  115274:	e3530020 	cmp	r3, #32
  115278:	0a000001 	beq	115284 <lwip_setsockopt_impl+0x4fc>
  11527c:	e3a0305c 	mov	r3, #92	; 0x5c
  115280:	ea00011a 	b	1156f0 <lwip_setsockopt_impl+0x968>
      udp_set_multicast_ttl(sock->conn->pcb.udp, (u8_t)(*(const u8_t*)optval));
  115284:	e51b300c 	ldr	r3, [fp, #-12]
  115288:	e5933000 	ldr	r3, [r3]
  11528c:	e5933008 	ldr	r3, [r3, #8]
  115290:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  115294:	e5d22000 	ldrb	r2, [r2]
  115298:	e5c3201c 	strb	r2, [r3, #28]
      break;
  11529c:	ea0000a0 	b	115524 <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_IF:
      {
        ip4_addr_t if_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct in_addr, NETCONN_UDP);
  1152a0:	e59b3004 	ldr	r3, [fp, #4]
  1152a4:	e3530003 	cmp	r3, #3
  1152a8:	8a000001 	bhi	1152b4 <lwip_setsockopt_impl+0x52c>
  1152ac:	e3a03016 	mov	r3, #22
  1152b0:	ea00010e 	b	1156f0 <lwip_setsockopt_impl+0x968>
  1152b4:	e51b300c 	ldr	r3, [fp, #-12]
  1152b8:	e5933000 	ldr	r3, [r3]
  1152bc:	e3530000 	cmp	r3, #0
  1152c0:	0a000004 	beq	1152d8 <lwip_setsockopt_impl+0x550>
  1152c4:	e51b300c 	ldr	r3, [fp, #-12]
  1152c8:	e5933000 	ldr	r3, [r3]
  1152cc:	e5933008 	ldr	r3, [r3, #8]
  1152d0:	e3530000 	cmp	r3, #0
  1152d4:	1a000001 	bne	1152e0 <lwip_setsockopt_impl+0x558>
  1152d8:	e3a03016 	mov	r3, #22
  1152dc:	ea000103 	b	1156f0 <lwip_setsockopt_impl+0x968>
  1152e0:	e51b300c 	ldr	r3, [fp, #-12]
  1152e4:	e5933000 	ldr	r3, [r3]
  1152e8:	e5933000 	ldr	r3, [r3]
  1152ec:	e20330f0 	and	r3, r3, #240	; 0xf0
  1152f0:	e3530020 	cmp	r3, #32
  1152f4:	0a000001 	beq	115300 <lwip_setsockopt_impl+0x578>
  1152f8:	e3a0305c 	mov	r3, #92	; 0x5c
  1152fc:	ea0000fb 	b	1156f0 <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, (const struct in_addr*)optval);
  115300:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115304:	e5933000 	ldr	r3, [r3]
  115308:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        udp_set_multicast_netif_addr(sock->conn->pcb.udp, &if_addr);
  11530c:	e51b300c 	ldr	r3, [fp, #-12]
  115310:	e5933000 	ldr	r3, [r3]
  115314:	e5933008 	ldr	r3, [r3, #8]
  115318:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11531c:	e5832018 	str	r2, [r3, #24]
      }
      break;
  115320:	ea00007f 	b	115524 <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  115324:	e59b3004 	ldr	r3, [fp, #4]
  115328:	e3530000 	cmp	r3, #0
  11532c:	1a000001 	bne	115338 <lwip_setsockopt_impl+0x5b0>
  115330:	e3a03016 	mov	r3, #22
  115334:	ea0000ed 	b	1156f0 <lwip_setsockopt_impl+0x968>
  115338:	e51b300c 	ldr	r3, [fp, #-12]
  11533c:	e5933000 	ldr	r3, [r3]
  115340:	e3530000 	cmp	r3, #0
  115344:	0a000004 	beq	11535c <lwip_setsockopt_impl+0x5d4>
  115348:	e51b300c 	ldr	r3, [fp, #-12]
  11534c:	e5933000 	ldr	r3, [r3]
  115350:	e5933008 	ldr	r3, [r3, #8]
  115354:	e3530000 	cmp	r3, #0
  115358:	1a000001 	bne	115364 <lwip_setsockopt_impl+0x5dc>
  11535c:	e3a03016 	mov	r3, #22
  115360:	ea0000e2 	b	1156f0 <lwip_setsockopt_impl+0x968>
  115364:	e51b300c 	ldr	r3, [fp, #-12]
  115368:	e5933000 	ldr	r3, [r3]
  11536c:	e5933000 	ldr	r3, [r3]
  115370:	e20330f0 	and	r3, r3, #240	; 0xf0
  115374:	e3530020 	cmp	r3, #32
  115378:	0a000001 	beq	115384 <lwip_setsockopt_impl+0x5fc>
  11537c:	e3a0305c 	mov	r3, #92	; 0x5c
  115380:	ea0000da 	b	1156f0 <lwip_setsockopt_impl+0x968>
      if (*(const u8_t*)optval) {
  115384:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115388:	e5d33000 	ldrb	r3, [r3]
  11538c:	e3530000 	cmp	r3, #0
  115390:	0a00000a 	beq	1153c0 <lwip_setsockopt_impl+0x638>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_MULTICAST_LOOP);
  115394:	e51b300c 	ldr	r3, [fp, #-12]
  115398:	e5933000 	ldr	r3, [r3]
  11539c:	e5933008 	ldr	r3, [r3, #8]
  1153a0:	e5d32010 	ldrb	r2, [r3, #16]
  1153a4:	e51b300c 	ldr	r3, [fp, #-12]
  1153a8:	e5933000 	ldr	r3, [r3]
  1153ac:	e5933008 	ldr	r3, [r3, #8]
  1153b0:	e3822008 	orr	r2, r2, #8
  1153b4:	e6ef2072 	uxtb	r2, r2
  1153b8:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
      }
      break;
  1153bc:	ea000058 	b	115524 <lwip_setsockopt_impl+0x79c>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
  1153c0:	e51b300c 	ldr	r3, [fp, #-12]
  1153c4:	e5933000 	ldr	r3, [r3]
  1153c8:	e5933008 	ldr	r3, [r3, #8]
  1153cc:	e5d32010 	ldrb	r2, [r3, #16]
  1153d0:	e51b300c 	ldr	r3, [fp, #-12]
  1153d4:	e5933000 	ldr	r3, [r3]
  1153d8:	e5933008 	ldr	r3, [r3, #8]
  1153dc:	e3c22008 	bic	r2, r2, #8
  1153e0:	e6ef2072 	uxtb	r2, r2
  1153e4:	e5c32010 	strb	r2, [r3, #16]
      break;
  1153e8:	ea00004d 	b	115524 <lwip_setsockopt_impl+0x79c>
    case IP_DROP_MEMBERSHIP:
      {
        /* If this is a TCP or a RAW socket, ignore these options. */
        /* @todo: assign membership to this socket so that it is dropped when closing the socket */
        err_t igmp_err;
        const struct ip_mreq *imr = (const struct ip_mreq *)optval;
  1153ec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1153f0:	e50b3010 	str	r3, [fp, #-16]
        ip4_addr_t if_addr;
        ip4_addr_t multi_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct ip_mreq, NETCONN_UDP);
  1153f4:	e59b3004 	ldr	r3, [fp, #4]
  1153f8:	e3530007 	cmp	r3, #7
  1153fc:	8a000001 	bhi	115408 <lwip_setsockopt_impl+0x680>
  115400:	e3a03016 	mov	r3, #22
  115404:	ea0000b9 	b	1156f0 <lwip_setsockopt_impl+0x968>
  115408:	e51b300c 	ldr	r3, [fp, #-12]
  11540c:	e5933000 	ldr	r3, [r3]
  115410:	e3530000 	cmp	r3, #0
  115414:	0a000004 	beq	11542c <lwip_setsockopt_impl+0x6a4>
  115418:	e51b300c 	ldr	r3, [fp, #-12]
  11541c:	e5933000 	ldr	r3, [r3]
  115420:	e5933008 	ldr	r3, [r3, #8]
  115424:	e3530000 	cmp	r3, #0
  115428:	1a000001 	bne	115434 <lwip_setsockopt_impl+0x6ac>
  11542c:	e3a03016 	mov	r3, #22
  115430:	ea0000ae 	b	1156f0 <lwip_setsockopt_impl+0x968>
  115434:	e51b300c 	ldr	r3, [fp, #-12]
  115438:	e5933000 	ldr	r3, [r3]
  11543c:	e5933000 	ldr	r3, [r3]
  115440:	e20330f0 	and	r3, r3, #240	; 0xf0
  115444:	e3530020 	cmp	r3, #32
  115448:	0a000001 	beq	115454 <lwip_setsockopt_impl+0x6cc>
  11544c:	e3a0305c 	mov	r3, #92	; 0x5c
  115450:	ea0000a6 	b	1156f0 <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, &imr->imr_interface);
  115454:	e51b3010 	ldr	r3, [fp, #-16]
  115458:	e5933004 	ldr	r3, [r3, #4]
  11545c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        inet_addr_to_ip4addr(&multi_addr, &imr->imr_multiaddr);
  115460:	e51b3010 	ldr	r3, [fp, #-16]
  115464:	e5933000 	ldr	r3, [r3]
  115468:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (optname == IP_ADD_MEMBERSHIP) {
  11546c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115470:	e3530003 	cmp	r3, #3
  115474:	1a000014 	bne	1154cc <lwip_setsockopt_impl+0x744>
          if (!lwip_socket_register_membership(s, &if_addr, &multi_addr)) {
  115478:	e24b201c 	sub	r2, fp, #28
  11547c:	e24b3018 	sub	r3, fp, #24
  115480:	e1a01003 	mov	r1, r3
  115484:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  115488:	eb0001ba 	bl	115b78 <lwip_socket_register_membership>
  11548c:	e1a03000 	mov	r3, r0
  115490:	e3530000 	cmp	r3, #0
  115494:	1a000004 	bne	1154ac <lwip_setsockopt_impl+0x724>
            /* cannot track membership (out of memory) */
            err = ENOMEM;
  115498:	e3a0300c 	mov	r3, #12
  11549c:	e54b3005 	strb	r3, [fp, #-5]
            igmp_err = ERR_OK;
  1154a0:	e3a03000 	mov	r3, #0
  1154a4:	e54b3006 	strb	r3, [fp, #-6]
  1154a8:	ea000013 	b	1154fc <lwip_setsockopt_impl+0x774>
          } else {
            igmp_err = igmp_joingroup(&if_addr, &multi_addr);
  1154ac:	e24b201c 	sub	r2, fp, #28
  1154b0:	e24b3018 	sub	r3, fp, #24
  1154b4:	e1a01002 	mov	r1, r2
  1154b8:	e1a00003 	mov	r0, r3
  1154bc:	eb006c93 	bl	130710 <igmp_joingroup>
  1154c0:	e1a03000 	mov	r3, r0
  1154c4:	e54b3006 	strb	r3, [fp, #-6]
  1154c8:	ea00000b 	b	1154fc <lwip_setsockopt_impl+0x774>
          }
        } else {
          igmp_err = igmp_leavegroup(&if_addr, &multi_addr);
  1154cc:	e24b201c 	sub	r2, fp, #28
  1154d0:	e24b3018 	sub	r3, fp, #24
  1154d4:	e1a01002 	mov	r1, r2
  1154d8:	e1a00003 	mov	r0, r3
  1154dc:	eb006d44 	bl	1309f4 <igmp_leavegroup>
  1154e0:	e1a03000 	mov	r3, r0
  1154e4:	e54b3006 	strb	r3, [fp, #-6]
          lwip_socket_unregister_membership(s, &if_addr, &multi_addr);
  1154e8:	e24b201c 	sub	r2, fp, #28
  1154ec:	e24b3018 	sub	r3, fp, #24
  1154f0:	e1a01003 	mov	r1, r3
  1154f4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1154f8:	eb0001e0 	bl	115c80 <lwip_socket_unregister_membership>
        }
        if (igmp_err != ERR_OK) {
  1154fc:	e15b30d6 	ldrsb	r3, [fp, #-6]
  115500:	e3530000 	cmp	r3, #0
  115504:	0a000005 	beq	115520 <lwip_setsockopt_impl+0x798>
          err = EADDRNOTAVAIL;
  115508:	e3a03063 	mov	r3, #99	; 0x63
  11550c:	e54b3005 	strb	r3, [fp, #-5]
        }
      }
      break;
  115510:	ea000002 	b	115520 <lwip_setsockopt_impl+0x798>
#endif /* LWIP_IGMP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  115514:	e3a0305c 	mov	r3, #92	; 0x5c
  115518:	e54b3005 	strb	r3, [fp, #-5]
      break;
  11551c:	ea000000 	b	115524 <lwip_setsockopt_impl+0x79c>
      break;
  115520:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  115524:	ea000070 	b	1156ec <lwip_setsockopt_impl+0x964>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
  115528:	e59b3004 	ldr	r3, [fp, #4]
  11552c:	e3530003 	cmp	r3, #3
  115530:	8a000001 	bhi	11553c <lwip_setsockopt_impl+0x7b4>
  115534:	e3a03016 	mov	r3, #22
  115538:	ea00006c 	b	1156f0 <lwip_setsockopt_impl+0x968>
  11553c:	e51b300c 	ldr	r3, [fp, #-12]
  115540:	e5933000 	ldr	r3, [r3]
  115544:	e3530000 	cmp	r3, #0
  115548:	0a000004 	beq	115560 <lwip_setsockopt_impl+0x7d8>
  11554c:	e51b300c 	ldr	r3, [fp, #-12]
  115550:	e5933000 	ldr	r3, [r3]
  115554:	e5933008 	ldr	r3, [r3, #8]
  115558:	e3530000 	cmp	r3, #0
  11555c:	1a000001 	bne	115568 <lwip_setsockopt_impl+0x7e0>
  115560:	e3a03016 	mov	r3, #22
  115564:	ea000061 	b	1156f0 <lwip_setsockopt_impl+0x968>
  115568:	e51b300c 	ldr	r3, [fp, #-12]
  11556c:	e5933000 	ldr	r3, [r3]
  115570:	e5933000 	ldr	r3, [r3]
  115574:	e20330f0 	and	r3, r3, #240	; 0xf0
  115578:	e3530010 	cmp	r3, #16
  11557c:	0a000001 	beq	115588 <lwip_setsockopt_impl+0x800>
  115580:	e3a0305c 	mov	r3, #92	; 0x5c
  115584:	ea000059 	b	1156f0 <lwip_setsockopt_impl+0x968>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  115588:	e51b300c 	ldr	r3, [fp, #-12]
  11558c:	e5933000 	ldr	r3, [r3]
  115590:	e5933008 	ldr	r3, [r3, #8]
  115594:	e5933014 	ldr	r3, [r3, #20]
  115598:	e3530001 	cmp	r3, #1
  11559c:	1a000001 	bne	1155a8 <lwip_setsockopt_impl+0x820>
      return EINVAL;
  1155a0:	e3a03016 	mov	r3, #22
  1155a4:	ea000051 	b	1156f0 <lwip_setsockopt_impl+0x968>
    }
    switch (optname) {
  1155a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1155ac:	e2433001 	sub	r3, r3, #1
  1155b0:	e3530004 	cmp	r3, #4
  1155b4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1155b8:	ea000040 	b	1156c0 <lwip_setsockopt_impl+0x938>
  1155bc:	001155d0 	.word	0x001155d0
  1155c0:	00115638 	.word	0x00115638
  1155c4:	00115654 	.word	0x00115654
  1155c8:	0011567c 	.word	0x0011567c
  1155cc:	001156a4 	.word	0x001156a4
    case TCP_NODELAY:
      if (*(const int*)optval) {
  1155d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1155d4:	e5933000 	ldr	r3, [r3]
  1155d8:	e3530000 	cmp	r3, #0
  1155dc:	0a00000a 	beq	11560c <lwip_setsockopt_impl+0x884>
        tcp_nagle_disable(sock->conn->pcb.tcp);
  1155e0:	e51b300c 	ldr	r3, [fp, #-12]
  1155e4:	e5933000 	ldr	r3, [r3]
  1155e8:	e5933008 	ldr	r3, [r3, #8]
  1155ec:	e5d3201e 	ldrb	r2, [r3, #30]
  1155f0:	e51b300c 	ldr	r3, [fp, #-12]
  1155f4:	e5933000 	ldr	r3, [r3]
  1155f8:	e5933008 	ldr	r3, [r3, #8]
  1155fc:	e3822040 	orr	r2, r2, #64	; 0x40
  115600:	e6ef2072 	uxtb	r2, r2
  115604:	e5c3201e 	strb	r2, [r3, #30]
      } else {
        tcp_nagle_enable(sock->conn->pcb.tcp);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(const int *)optval)?"on":"off") );
      break;
  115608:	ea00002f 	b	1156cc <lwip_setsockopt_impl+0x944>
        tcp_nagle_enable(sock->conn->pcb.tcp);
  11560c:	e51b300c 	ldr	r3, [fp, #-12]
  115610:	e5933000 	ldr	r3, [r3]
  115614:	e5933008 	ldr	r3, [r3, #8]
  115618:	e5d3201e 	ldrb	r2, [r3, #30]
  11561c:	e51b300c 	ldr	r3, [fp, #-12]
  115620:	e5933000 	ldr	r3, [r3]
  115624:	e5933008 	ldr	r3, [r3, #8]
  115628:	e3c22040 	bic	r2, r2, #64	; 0x40
  11562c:	e6ef2072 	uxtb	r2, r2
  115630:	e5c3201e 	strb	r2, [r3, #30]
      break;
  115634:	ea000024 	b	1156cc <lwip_setsockopt_impl+0x944>
    case TCP_KEEPALIVE:
      sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int*)optval);
  115638:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11563c:	e5932000 	ldr	r2, [r3]
  115640:	e51b300c 	ldr	r3, [fp, #-12]
  115644:	e5933000 	ldr	r3, [r3]
  115648:	e5933008 	ldr	r3, [r3, #8]
  11564c:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  115650:	ea00001d 	b	1156cc <lwip_setsockopt_impl+0x944>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      sock->conn->pcb.tcp->keep_idle = 1000*(u32_t)(*(const int*)optval);
  115654:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115658:	e5933000 	ldr	r3, [r3]
  11565c:	e1a01003 	mov	r1, r3
  115660:	e51b300c 	ldr	r3, [fp, #-12]
  115664:	e5933000 	ldr	r3, [r3]
  115668:	e5933008 	ldr	r3, [r3, #8]
  11566c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  115670:	e0020192 	mul	r2, r2, r1
  115674:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  115678:	ea000013 	b	1156cc <lwip_setsockopt_impl+0x944>
    case TCP_KEEPINTVL:
      sock->conn->pcb.tcp->keep_intvl = 1000*(u32_t)(*(const int*)optval);
  11567c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115680:	e5933000 	ldr	r3, [r3]
  115684:	e1a01003 	mov	r1, r3
  115688:	e51b300c 	ldr	r3, [fp, #-12]
  11568c:	e5933000 	ldr	r3, [r3]
  115690:	e5933008 	ldr	r3, [r3, #8]
  115694:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  115698:	e0020192 	mul	r2, r2, r1
  11569c:	e5832098 	str	r2, [r3, #152]	; 0x98
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_intvl));
      break;
  1156a0:	ea000009 	b	1156cc <lwip_setsockopt_impl+0x944>
    case TCP_KEEPCNT:
      sock->conn->pcb.tcp->keep_cnt = (u32_t)(*(const int*)optval);
  1156a4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1156a8:	e5932000 	ldr	r2, [r3]
  1156ac:	e51b300c 	ldr	r3, [fp, #-12]
  1156b0:	e5933000 	ldr	r3, [r3]
  1156b4:	e5933008 	ldr	r3, [r3, #8]
  1156b8:	e583209c 	str	r2, [r3, #156]	; 0x9c
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_cnt));
      break;
  1156bc:	ea000002 	b	1156cc <lwip_setsockopt_impl+0x944>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1156c0:	e3a0305c 	mov	r3, #92	; 0x5c
  1156c4:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1156c8:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1156cc:	ea000006 	b	1156ec <lwip_setsockopt_impl+0x964>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
  1156d0:	e3a0305c 	mov	r3, #92	; 0x5c
  1156d4:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1156d8:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1156dc:	ea000002 	b	1156ec <lwip_setsockopt_impl+0x964>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                s, level, optname));
    err = ENOPROTOOPT;
  1156e0:	e3a0305c 	mov	r3, #92	; 0x5c
  1156e4:	e54b3005 	strb	r3, [fp, #-5]
    break;
  1156e8:	e320f000 	nop	{0}
  }  /* switch (level) */

  return err;
  1156ec:	e55b3005 	ldrb	r3, [fp, #-5]
}
  1156f0:	e1a00003 	mov	r0, r3
  1156f4:	e24bd004 	sub	sp, fp, #4
  1156f8:	e8bd8800 	pop	{fp, pc}

001156fc <lwip_ioctl>:

int
lwip_ioctl(int s, long cmd, void *argp)
{
  1156fc:	e92d4800 	push	{fp, lr}
  115700:	e28db004 	add	fp, sp, #4
  115704:	e24dd038 	sub	sp, sp, #56	; 0x38
  115708:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  11570c:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  115710:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct lwip_sock *sock = get_socket(s);
  115714:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  115718:	ebffee03 	bl	110f2c <get_socket>
  11571c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  u8_t val;
#if LWIP_SO_RCVBUF
  u16_t buflen = 0;
  115720:	e3a03000 	mov	r3, #0
  115724:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  if (!sock) {
  115728:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11572c:	e3530000 	cmp	r3, #0
  115730:	1a000001 	bne	11573c <lwip_ioctl+0x40>
    return -1;
  115734:	e3e03000 	mvn	r3, #0
  115738:	ea000093 	b	11598c <lwip_ioctl+0x290>
  }

  switch (cmd) {
  11573c:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  115740:	e306367f 	movw	r3, #26239	; 0x667f
  115744:	e3483004 	movt	r3, #32772	; 0x8004
  115748:	e1520003 	cmp	r2, r3
  11574c:	0a00000e 	beq	11578c <lwip_ioctl+0x90>
  115750:	e306367e 	movw	r3, #26238	; 0x667e
  115754:	e3443004 	movt	r3, #16388	; 0x4004
  115758:	e1520003 	cmp	r2, r3
  11575c:	0a000057 	beq	1158c0 <lwip_ioctl+0x1c4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, val));
    sock_set_errno(sock, 0);
    return 0;

  default:
    break;
  115760:	e320f000 	nop	{0}
  } /* switch (cmd) */
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115764:	e3a03026 	mov	r3, #38	; 0x26
  115768:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  11576c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115770:	e6ef2073 	uxtb	r2, r3
  115774:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115778:	e5c32010 	strb	r2, [r3, #16]
  11577c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115780:	e3530000 	cmp	r3, #0
  115784:	0a00007f 	beq	115988 <lwip_ioctl+0x28c>
  115788:	ea00007a 	b	115978 <lwip_ioctl+0x27c>
    if (!argp) {
  11578c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115790:	e3530000 	cmp	r3, #0
  115794:	1a00000e 	bne	1157d4 <lwip_ioctl+0xd8>
      sock_set_errno(sock, EINVAL);
  115798:	e3a03016 	mov	r3, #22
  11579c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  1157a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1157a4:	e6ef2073 	uxtb	r2, r3
  1157a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1157ac:	e5c32010 	strb	r2, [r3, #16]
  1157b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1157b4:	e3530000 	cmp	r3, #0
  1157b8:	0a000003 	beq	1157cc <lwip_ioctl+0xd0>
  1157bc:	eb008dc7 	bl	138ee0 <__errno_location>
  1157c0:	e1a02000 	mov	r2, r0
  1157c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1157c8:	e5823000 	str	r3, [r2]
      return -1;
  1157cc:	e3e03000 	mvn	r3, #0
  1157d0:	ea00006d 	b	11598c <lwip_ioctl+0x290>
    SYS_ARCH_GET(sock->conn->recv_avail, recv_avail);
  1157d4:	ebffb298 	bl	10223c <rt_enter_critical>
  1157d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1157dc:	e5933000 	ldr	r3, [r3]
  1157e0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1157e4:	e50b300c 	str	r3, [fp, #-12]
  1157e8:	ebffb299 	bl	102254 <rt_exit_critical>
    if (recv_avail < 0) {
  1157ec:	e51b300c 	ldr	r3, [fp, #-12]
  1157f0:	e3530000 	cmp	r3, #0
  1157f4:	aa000001 	bge	115800 <lwip_ioctl+0x104>
      recv_avail = 0;
  1157f8:	e3a03000 	mov	r3, #0
  1157fc:	e50b300c 	str	r3, [fp, #-12]
    *((int*)argp) = recv_avail;
  115800:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115804:	e51b200c 	ldr	r2, [fp, #-12]
  115808:	e5832000 	str	r2, [r3]
    if (sock->lastdata) {
  11580c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115810:	e5933004 	ldr	r3, [r3, #4]
  115814:	e3530000 	cmp	r3, #0
  115818:	0a000019 	beq	115884 <lwip_ioctl+0x188>
      struct pbuf *p = (struct pbuf *)sock->lastdata;
  11581c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115820:	e5933004 	ldr	r3, [r3, #4]
  115824:	e50b3010 	str	r3, [fp, #-16]
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  115828:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11582c:	e5933000 	ldr	r3, [r3]
  115830:	e5933000 	ldr	r3, [r3]
  115834:	e20330f0 	and	r3, r3, #240	; 0xf0
  115838:	e3530010 	cmp	r3, #16
  11583c:	0a000002 	beq	11584c <lwip_ioctl+0x150>
        p = ((struct netbuf *)p)->p;
  115840:	e51b3010 	ldr	r3, [fp, #-16]
  115844:	e5933000 	ldr	r3, [r3]
  115848:	e50b3010 	str	r3, [fp, #-16]
      buflen = p->tot_len;
  11584c:	e51b3010 	ldr	r3, [fp, #-16]
  115850:	e1d330b8 	ldrh	r3, [r3, #8]
  115854:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      buflen -= sock->lastoffset;
  115858:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11585c:	e1d330b8 	ldrh	r3, [r3, #8]
  115860:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  115864:	e0423003 	sub	r3, r2, r3
  115868:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      *((int*)argp) += buflen;
  11586c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115870:	e5932000 	ldr	r2, [r3]
  115874:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  115878:	e0822003 	add	r2, r2, r3
  11587c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115880:	e5832000 	str	r2, [r3]
    sock_set_errno(sock, 0);
  115884:	e3a03000 	mov	r3, #0
  115888:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  11588c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  115890:	e6ef2073 	uxtb	r2, r3
  115894:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115898:	e5c32010 	strb	r2, [r3, #16]
  11589c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1158a0:	e3530000 	cmp	r3, #0
  1158a4:	0a000003 	beq	1158b8 <lwip_ioctl+0x1bc>
  1158a8:	eb008d8c 	bl	138ee0 <__errno_location>
  1158ac:	e1a02000 	mov	r2, r0
  1158b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1158b4:	e5823000 	str	r3, [r2]
    return 0;
  1158b8:	e3a03000 	mov	r3, #0
  1158bc:	ea000032 	b	11598c <lwip_ioctl+0x290>
    val = 0;
  1158c0:	e3a03000 	mov	r3, #0
  1158c4:	e54b3005 	strb	r3, [fp, #-5]
    if (argp && *(u32_t*)argp) {
  1158c8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1158cc:	e3530000 	cmp	r3, #0
  1158d0:	0a000005 	beq	1158ec <lwip_ioctl+0x1f0>
  1158d4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1158d8:	e5933000 	ldr	r3, [r3]
  1158dc:	e3530000 	cmp	r3, #0
  1158e0:	0a000001 	beq	1158ec <lwip_ioctl+0x1f0>
      val = 1;
  1158e4:	e3a03001 	mov	r3, #1
  1158e8:	e54b3005 	strb	r3, [fp, #-5]
    netconn_set_nonblocking(sock->conn, val);
  1158ec:	e55b3005 	ldrb	r3, [fp, #-5]
  1158f0:	e3530000 	cmp	r3, #0
  1158f4:	0a000008 	beq	11591c <lwip_ioctl+0x220>
  1158f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1158fc:	e5933000 	ldr	r3, [r3]
  115900:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115904:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115908:	e5933000 	ldr	r3, [r3]
  11590c:	e3822002 	orr	r2, r2, #2
  115910:	e6ef2072 	uxtb	r2, r2
  115914:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  115918:	ea000007 	b	11593c <lwip_ioctl+0x240>
  11591c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115920:	e5933000 	ldr	r3, [r3]
  115924:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115928:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11592c:	e5933000 	ldr	r3, [r3]
  115930:	e3c22002 	bic	r2, r2, #2
  115934:	e6ef2072 	uxtb	r2, r2
  115938:	e5c32030 	strb	r2, [r3, #48]	; 0x30
    sock_set_errno(sock, 0);
  11593c:	e3a03000 	mov	r3, #0
  115940:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  115944:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115948:	e6ef2073 	uxtb	r2, r3
  11594c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115950:	e5c32010 	strb	r2, [r3, #16]
  115954:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115958:	e3530000 	cmp	r3, #0
  11595c:	0a000003 	beq	115970 <lwip_ioctl+0x274>
  115960:	eb008d5e 	bl	138ee0 <__errno_location>
  115964:	e1a02000 	mov	r2, r0
  115968:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11596c:	e5823000 	str	r3, [r2]
    return 0;
  115970:	e3a03000 	mov	r3, #0
  115974:	ea000004 	b	11598c <lwip_ioctl+0x290>
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115978:	eb008d58 	bl	138ee0 <__errno_location>
  11597c:	e1a02000 	mov	r2, r0
  115980:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115984:	e5823000 	str	r3, [r2]
  return -1;
  115988:	e3e03000 	mvn	r3, #0
}
  11598c:	e1a00003 	mov	r0, r3
  115990:	e24bd004 	sub	sp, fp, #4
  115994:	e8bd8800 	pop	{fp, pc}

00115998 <lwip_fcntl>:
 * Currently only the commands F_GETFL and F_SETFL are implemented.
 * Only the flag O_NONBLOCK is implemented.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
  115998:	e92d4800 	push	{fp, lr}
  11599c:	e28db004 	add	fp, sp, #4
  1159a0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1159a4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1159a8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1159ac:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock = get_socket(s);
  1159b0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1159b4:	ebffed5c 	bl	110f2c <get_socket>
  1159b8:	e50b000c 	str	r0, [fp, #-12]
  int ret = -1;
  1159bc:	e3e03000 	mvn	r3, #0
  1159c0:	e50b3008 	str	r3, [fp, #-8]

  if (!sock) {
  1159c4:	e51b300c 	ldr	r3, [fp, #-12]
  1159c8:	e3530000 	cmp	r3, #0
  1159cc:	1a000001 	bne	1159d8 <lwip_fcntl+0x40>
    return -1;
  1159d0:	e3e03000 	mvn	r3, #0
  1159d4:	ea000064 	b	115b6c <lwip_fcntl+0x1d4>
  }

  switch (cmd) {
  1159d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1159dc:	e3530003 	cmp	r3, #3
  1159e0:	0a000002 	beq	1159f0 <lwip_fcntl+0x58>
  1159e4:	e3530004 	cmp	r3, #4
  1159e8:	0a000014 	beq	115a40 <lwip_fcntl+0xa8>
  1159ec:	ea00004a 	b	115b1c <lwip_fcntl+0x184>
  case F_GETFL:
    ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
  1159f0:	e51b300c 	ldr	r3, [fp, #-12]
  1159f4:	e5933000 	ldr	r3, [r3]
  1159f8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  1159fc:	e1a03503 	lsl	r3, r3, #10
  115a00:	e2033b02 	and	r3, r3, #2048	; 0x800
  115a04:	e50b3008 	str	r3, [fp, #-8]
    sock_set_errno(sock, 0);
  115a08:	e3a03000 	mov	r3, #0
  115a0c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  115a10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115a14:	e6ef2073 	uxtb	r2, r3
  115a18:	e51b300c 	ldr	r3, [fp, #-12]
  115a1c:	e5c32010 	strb	r2, [r3, #16]
  115a20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115a24:	e3530000 	cmp	r3, #0
  115a28:	0a000049 	beq	115b54 <lwip_fcntl+0x1bc>
  115a2c:	eb008d2b 	bl	138ee0 <__errno_location>
  115a30:	e1a02000 	mov	r2, r0
  115a34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115a38:	e5823000 	str	r3, [r2]
    break;
  115a3c:	ea000044 	b	115b54 <lwip_fcntl+0x1bc>
  case F_SETFL:
    if ((val & ~O_NONBLOCK) == 0) {
  115a40:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115a44:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  115a48:	e3530000 	cmp	r3, #0
  115a4c:	1a000024 	bne	115ae4 <lwip_fcntl+0x14c>
      /* only O_NONBLOCK, all other bits are zero */
      netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
  115a50:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115a54:	e2033b02 	and	r3, r3, #2048	; 0x800
  115a58:	e3530000 	cmp	r3, #0
  115a5c:	0a000008 	beq	115a84 <lwip_fcntl+0xec>
  115a60:	e51b300c 	ldr	r3, [fp, #-12]
  115a64:	e5933000 	ldr	r3, [r3]
  115a68:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115a6c:	e51b300c 	ldr	r3, [fp, #-12]
  115a70:	e5933000 	ldr	r3, [r3]
  115a74:	e3822002 	orr	r2, r2, #2
  115a78:	e6ef2072 	uxtb	r2, r2
  115a7c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  115a80:	ea000007 	b	115aa4 <lwip_fcntl+0x10c>
  115a84:	e51b300c 	ldr	r3, [fp, #-12]
  115a88:	e5933000 	ldr	r3, [r3]
  115a8c:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115a90:	e51b300c 	ldr	r3, [fp, #-12]
  115a94:	e5933000 	ldr	r3, [r3]
  115a98:	e3c22002 	bic	r2, r2, #2
  115a9c:	e6ef2072 	uxtb	r2, r2
  115aa0:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      ret = 0;
  115aa4:	e3a03000 	mov	r3, #0
  115aa8:	e50b3008 	str	r3, [fp, #-8]
      sock_set_errno(sock, 0);
  115aac:	e3a03000 	mov	r3, #0
  115ab0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  115ab4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115ab8:	e6ef2073 	uxtb	r2, r3
  115abc:	e51b300c 	ldr	r3, [fp, #-12]
  115ac0:	e5c32010 	strb	r2, [r3, #16]
  115ac4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115ac8:	e3530000 	cmp	r3, #0
  115acc:	0a000022 	beq	115b5c <lwip_fcntl+0x1c4>
  115ad0:	eb008d02 	bl	138ee0 <__errno_location>
  115ad4:	e1a02000 	mov	r2, r0
  115ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115adc:	e5823000 	str	r3, [r2]
    } else {
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
    }
    break;
  115ae0:	ea00001d 	b	115b5c <lwip_fcntl+0x1c4>
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115ae4:	e3a03026 	mov	r3, #38	; 0x26
  115ae8:	e50b3010 	str	r3, [fp, #-16]
  115aec:	e51b3010 	ldr	r3, [fp, #-16]
  115af0:	e6ef2073 	uxtb	r2, r3
  115af4:	e51b300c 	ldr	r3, [fp, #-12]
  115af8:	e5c32010 	strb	r2, [r3, #16]
  115afc:	e51b3010 	ldr	r3, [fp, #-16]
  115b00:	e3530000 	cmp	r3, #0
  115b04:	0a000014 	beq	115b5c <lwip_fcntl+0x1c4>
  115b08:	eb008cf4 	bl	138ee0 <__errno_location>
  115b0c:	e1a02000 	mov	r2, r0
  115b10:	e51b3010 	ldr	r3, [fp, #-16]
  115b14:	e5823000 	str	r3, [r2]
    break;
  115b18:	ea00000f 	b	115b5c <lwip_fcntl+0x1c4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
    sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115b1c:	e3a03026 	mov	r3, #38	; 0x26
  115b20:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  115b24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115b28:	e6ef2073 	uxtb	r2, r3
  115b2c:	e51b300c 	ldr	r3, [fp, #-12]
  115b30:	e5c32010 	strb	r2, [r3, #16]
  115b34:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115b38:	e3530000 	cmp	r3, #0
  115b3c:	0a000008 	beq	115b64 <lwip_fcntl+0x1cc>
  115b40:	eb008ce6 	bl	138ee0 <__errno_location>
  115b44:	e1a02000 	mov	r2, r0
  115b48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115b4c:	e5823000 	str	r3, [r2]
    break;
  115b50:	ea000003 	b	115b64 <lwip_fcntl+0x1cc>
    break;
  115b54:	e320f000 	nop	{0}
  115b58:	ea000002 	b	115b68 <lwip_fcntl+0x1d0>
    break;
  115b5c:	e320f000 	nop	{0}
  115b60:	ea000000 	b	115b68 <lwip_fcntl+0x1d0>
    break;
  115b64:	e320f000 	nop	{0}
  }
  return ret;
  115b68:	e51b3008 	ldr	r3, [fp, #-8]
}
  115b6c:	e1a00003 	mov	r0, r3
  115b70:	e24bd004 	sub	sp, fp, #4
  115b74:	e8bd8800 	pop	{fp, pc}

00115b78 <lwip_socket_register_membership>:
 *
 * @return 1 on success, 0 on failure
 */
static int
lwip_socket_register_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  115b78:	e92d4800 	push	{fp, lr}
  115b7c:	e28db004 	add	fp, sp, #4
  115b80:	e24dd018 	sub	sp, sp, #24
  115b84:	e50b0010 	str	r0, [fp, #-16]
  115b88:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115b8c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115b90:	e51b0010 	ldr	r0, [fp, #-16]
  115b94:	ebffece4 	bl	110f2c <get_socket>
  115b98:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115b9c:	e51b300c 	ldr	r3, [fp, #-12]
  115ba0:	e3530000 	cmp	r3, #0
  115ba4:	1a000001 	bne	115bb0 <lwip_socket_register_membership+0x38>
    return 0;
  115ba8:	e3a03000 	mov	r3, #0
  115bac:	ea000030 	b	115c74 <lwip_socket_register_membership+0xfc>
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115bb0:	e3a03000 	mov	r3, #0
  115bb4:	e50b3008 	str	r3, [fp, #-8]
  115bb8:	ea000029 	b	115c64 <lwip_socket_register_membership+0xec>
    if (socket_ipv4_multicast_memberships[i].sock == NULL) {
  115bbc:	e30f3594 	movw	r3, #62868	; 0xf594
  115bc0:	e3403014 	movt	r3, #20
  115bc4:	e51b2008 	ldr	r2, [fp, #-8]
  115bc8:	e3a0100c 	mov	r1, #12
  115bcc:	e0020291 	mul	r2, r1, r2
  115bd0:	e0833002 	add	r3, r3, r2
  115bd4:	e5933000 	ldr	r3, [r3]
  115bd8:	e3530000 	cmp	r3, #0
  115bdc:	1a00001d 	bne	115c58 <lwip_socket_register_membership+0xe0>
      socket_ipv4_multicast_memberships[i].sock = sock;
  115be0:	e30f3594 	movw	r3, #62868	; 0xf594
  115be4:	e3403014 	movt	r3, #20
  115be8:	e51b2008 	ldr	r2, [fp, #-8]
  115bec:	e3a0100c 	mov	r1, #12
  115bf0:	e0020291 	mul	r2, r1, r2
  115bf4:	e0833002 	add	r3, r3, r2
  115bf8:	e51b200c 	ldr	r2, [fp, #-12]
  115bfc:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].if_addr, *if_addr);
  115c00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115c04:	e5932000 	ldr	r2, [r3]
  115c08:	e30f3594 	movw	r3, #62868	; 0xf594
  115c0c:	e3403014 	movt	r3, #20
  115c10:	e51b1008 	ldr	r1, [fp, #-8]
  115c14:	e3a0000c 	mov	r0, #12
  115c18:	e0010190 	mul	r1, r0, r1
  115c1c:	e0833001 	add	r3, r3, r1
  115c20:	e2833004 	add	r3, r3, #4
  115c24:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].multi_addr, *multi_addr);
  115c28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115c2c:	e5932000 	ldr	r2, [r3]
  115c30:	e30f3594 	movw	r3, #62868	; 0xf594
  115c34:	e3403014 	movt	r3, #20
  115c38:	e51b1008 	ldr	r1, [fp, #-8]
  115c3c:	e3a0000c 	mov	r0, #12
  115c40:	e0010190 	mul	r1, r0, r1
  115c44:	e0833001 	add	r3, r3, r1
  115c48:	e2833008 	add	r3, r3, #8
  115c4c:	e5832000 	str	r2, [r3]
      return 1;
  115c50:	e3a03001 	mov	r3, #1
  115c54:	ea000006 	b	115c74 <lwip_socket_register_membership+0xfc>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115c58:	e51b3008 	ldr	r3, [fp, #-8]
  115c5c:	e2833001 	add	r3, r3, #1
  115c60:	e50b3008 	str	r3, [fp, #-8]
  115c64:	e51b3008 	ldr	r3, [fp, #-8]
  115c68:	e3530007 	cmp	r3, #7
  115c6c:	daffffd2 	ble	115bbc <lwip_socket_register_membership+0x44>
    }
  }
  return 0;
  115c70:	e3a03000 	mov	r3, #0
}
  115c74:	e1a00003 	mov	r0, r3
  115c78:	e24bd004 	sub	sp, fp, #4
  115c7c:	e8bd8800 	pop	{fp, pc}

00115c80 <lwip_socket_unregister_membership>:
 *
 * ATTENTION: this function is called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_unregister_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  115c80:	e92d4800 	push	{fp, lr}
  115c84:	e28db004 	add	fp, sp, #4
  115c88:	e24dd018 	sub	sp, sp, #24
  115c8c:	e50b0010 	str	r0, [fp, #-16]
  115c90:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115c94:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115c98:	e51b0010 	ldr	r0, [fp, #-16]
  115c9c:	ebffeca2 	bl	110f2c <get_socket>
  115ca0:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115ca4:	e51b300c 	ldr	r3, [fp, #-12]
  115ca8:	e3530000 	cmp	r3, #0
  115cac:	0a000046 	beq	115dcc <lwip_socket_unregister_membership+0x14c>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115cb0:	e3a03000 	mov	r3, #0
  115cb4:	e50b3008 	str	r3, [fp, #-8]
  115cb8:	ea00003f 	b	115dbc <lwip_socket_unregister_membership+0x13c>
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  115cbc:	e30f3594 	movw	r3, #62868	; 0xf594
  115cc0:	e3403014 	movt	r3, #20
  115cc4:	e51b2008 	ldr	r2, [fp, #-8]
  115cc8:	e3a0100c 	mov	r1, #12
  115ccc:	e0020291 	mul	r2, r1, r2
  115cd0:	e0833002 	add	r3, r3, r2
  115cd4:	e5933000 	ldr	r3, [r3]
  115cd8:	e51b200c 	ldr	r2, [fp, #-12]
  115cdc:	e1520003 	cmp	r2, r3
  115ce0:	1a000032 	bne	115db0 <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  115ce4:	e30f3594 	movw	r3, #62868	; 0xf594
  115ce8:	e3403014 	movt	r3, #20
  115cec:	e51b2008 	ldr	r2, [fp, #-8]
  115cf0:	e3a0100c 	mov	r1, #12
  115cf4:	e0020291 	mul	r2, r1, r2
  115cf8:	e0833002 	add	r3, r3, r2
  115cfc:	e2833004 	add	r3, r3, #4
  115d00:	e5932000 	ldr	r2, [r3]
  115d04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115d08:	e5933000 	ldr	r3, [r3]
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  115d0c:	e1520003 	cmp	r2, r3
  115d10:	1a000026 	bne	115db0 <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].multi_addr, multi_addr)) {
  115d14:	e30f3594 	movw	r3, #62868	; 0xf594
  115d18:	e3403014 	movt	r3, #20
  115d1c:	e51b2008 	ldr	r2, [fp, #-8]
  115d20:	e3a0100c 	mov	r1, #12
  115d24:	e0020291 	mul	r2, r1, r2
  115d28:	e0833002 	add	r3, r3, r2
  115d2c:	e2833008 	add	r3, r3, #8
  115d30:	e5932000 	ldr	r2, [r3]
  115d34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115d38:	e5933000 	ldr	r3, [r3]
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  115d3c:	e1520003 	cmp	r2, r3
  115d40:	1a00001a 	bne	115db0 <lwip_socket_unregister_membership+0x130>
      socket_ipv4_multicast_memberships[i].sock = NULL;
  115d44:	e30f3594 	movw	r3, #62868	; 0xf594
  115d48:	e3403014 	movt	r3, #20
  115d4c:	e51b2008 	ldr	r2, [fp, #-8]
  115d50:	e3a0100c 	mov	r1, #12
  115d54:	e0020291 	mul	r2, r1, r2
  115d58:	e0833002 	add	r3, r3, r2
  115d5c:	e3a02000 	mov	r2, #0
  115d60:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  115d64:	e30f3594 	movw	r3, #62868	; 0xf594
  115d68:	e3403014 	movt	r3, #20
  115d6c:	e51b2008 	ldr	r2, [fp, #-8]
  115d70:	e3a0100c 	mov	r1, #12
  115d74:	e0020291 	mul	r2, r1, r2
  115d78:	e0833002 	add	r3, r3, r2
  115d7c:	e2833004 	add	r3, r3, #4
  115d80:	e3a02000 	mov	r2, #0
  115d84:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  115d88:	e30f3594 	movw	r3, #62868	; 0xf594
  115d8c:	e3403014 	movt	r3, #20
  115d90:	e51b2008 	ldr	r2, [fp, #-8]
  115d94:	e3a0100c 	mov	r1, #12
  115d98:	e0020291 	mul	r2, r1, r2
  115d9c:	e0833002 	add	r3, r3, r2
  115da0:	e2833008 	add	r3, r3, #8
  115da4:	e3a02000 	mov	r2, #0
  115da8:	e5832000 	str	r2, [r3]
      return;
  115dac:	ea000007 	b	115dd0 <lwip_socket_unregister_membership+0x150>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115db0:	e51b3008 	ldr	r3, [fp, #-8]
  115db4:	e2833001 	add	r3, r3, #1
  115db8:	e50b3008 	str	r3, [fp, #-8]
  115dbc:	e51b3008 	ldr	r3, [fp, #-8]
  115dc0:	e3530007 	cmp	r3, #7
  115dc4:	daffffbc 	ble	115cbc <lwip_socket_unregister_membership+0x3c>
  115dc8:	ea000000 	b	115dd0 <lwip_socket_unregister_membership+0x150>
    return;
  115dcc:	e320f000 	nop	{0}
    }
  }
}
  115dd0:	e24bd004 	sub	sp, fp, #4
  115dd4:	e8bd8800 	pop	{fp, pc}

00115dd8 <lwip_socket_drop_registered_memberships>:
 *
 * ATTENTION: this function is NOT called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_drop_registered_memberships(int s)
{
  115dd8:	e92d4800 	push	{fp, lr}
  115ddc:	e28db004 	add	fp, sp, #4
  115de0:	e24dd018 	sub	sp, sp, #24
  115de4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115de8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  115dec:	ebffec4e 	bl	110f2c <get_socket>
  115df0:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115df4:	e51b300c 	ldr	r3, [fp, #-12]
  115df8:	e3530000 	cmp	r3, #0
  115dfc:	0a000045 	beq	115f18 <lwip_socket_drop_registered_memberships+0x140>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115e00:	e3a03000 	mov	r3, #0
  115e04:	e50b3008 	str	r3, [fp, #-8]
  115e08:	ea00003e 	b	115f08 <lwip_socket_drop_registered_memberships+0x130>
    if (socket_ipv4_multicast_memberships[i].sock == sock) {
  115e0c:	e30f3594 	movw	r3, #62868	; 0xf594
  115e10:	e3403014 	movt	r3, #20
  115e14:	e51b2008 	ldr	r2, [fp, #-8]
  115e18:	e3a0100c 	mov	r1, #12
  115e1c:	e0020291 	mul	r2, r1, r2
  115e20:	e0833002 	add	r3, r3, r2
  115e24:	e5933000 	ldr	r3, [r3]
  115e28:	e51b200c 	ldr	r2, [fp, #-12]
  115e2c:	e1520003 	cmp	r2, r3
  115e30:	1a000031 	bne	115efc <lwip_socket_drop_registered_memberships+0x124>
      ip_addr_t multi_addr, if_addr;
      ip_addr_copy_from_ip4(multi_addr, socket_ipv4_multicast_memberships[i].multi_addr);
  115e34:	e30f3594 	movw	r3, #62868	; 0xf594
  115e38:	e3403014 	movt	r3, #20
  115e3c:	e51b2008 	ldr	r2, [fp, #-8]
  115e40:	e3a0100c 	mov	r1, #12
  115e44:	e0020291 	mul	r2, r1, r2
  115e48:	e0833002 	add	r3, r3, r2
  115e4c:	e2833008 	add	r3, r3, #8
  115e50:	e5933000 	ldr	r3, [r3]
  115e54:	e50b3010 	str	r3, [fp, #-16]
      ip_addr_copy_from_ip4(if_addr, socket_ipv4_multicast_memberships[i].if_addr);
  115e58:	e30f3594 	movw	r3, #62868	; 0xf594
  115e5c:	e3403014 	movt	r3, #20
  115e60:	e51b2008 	ldr	r2, [fp, #-8]
  115e64:	e3a0100c 	mov	r1, #12
  115e68:	e0020291 	mul	r2, r1, r2
  115e6c:	e0833002 	add	r3, r3, r2
  115e70:	e2833004 	add	r3, r3, #4
  115e74:	e5933000 	ldr	r3, [r3]
  115e78:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      socket_ipv4_multicast_memberships[i].sock = NULL;
  115e7c:	e30f3594 	movw	r3, #62868	; 0xf594
  115e80:	e3403014 	movt	r3, #20
  115e84:	e51b2008 	ldr	r2, [fp, #-8]
  115e88:	e3a0100c 	mov	r1, #12
  115e8c:	e0020291 	mul	r2, r1, r2
  115e90:	e0833002 	add	r3, r3, r2
  115e94:	e3a02000 	mov	r2, #0
  115e98:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  115e9c:	e30f3594 	movw	r3, #62868	; 0xf594
  115ea0:	e3403014 	movt	r3, #20
  115ea4:	e51b2008 	ldr	r2, [fp, #-8]
  115ea8:	e3a0100c 	mov	r1, #12
  115eac:	e0020291 	mul	r2, r1, r2
  115eb0:	e0833002 	add	r3, r3, r2
  115eb4:	e2833004 	add	r3, r3, #4
  115eb8:	e3a02000 	mov	r2, #0
  115ebc:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  115ec0:	e30f3594 	movw	r3, #62868	; 0xf594
  115ec4:	e3403014 	movt	r3, #20
  115ec8:	e51b2008 	ldr	r2, [fp, #-8]
  115ecc:	e3a0100c 	mov	r1, #12
  115ed0:	e0020291 	mul	r2, r1, r2
  115ed4:	e0833002 	add	r3, r3, r2
  115ed8:	e2833008 	add	r3, r3, #8
  115edc:	e3a02000 	mov	r2, #0
  115ee0:	e5832000 	str	r2, [r3]

      netconn_join_leave_group(sock->conn, &multi_addr, &if_addr, NETCONN_LEAVE);
  115ee4:	e51b300c 	ldr	r3, [fp, #-12]
  115ee8:	e5930000 	ldr	r0, [r3]
  115eec:	e24b2014 	sub	r2, fp, #20
  115ef0:	e24b1010 	sub	r1, fp, #16
  115ef4:	e3a03001 	mov	r3, #1
  115ef8:	ebffd8d9 	bl	10c264 <netconn_join_leave_group>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115efc:	e51b3008 	ldr	r3, [fp, #-8]
  115f00:	e2833001 	add	r3, r3, #1
  115f04:	e50b3008 	str	r3, [fp, #-8]
  115f08:	e51b3008 	ldr	r3, [fp, #-8]
  115f0c:	e3530007 	cmp	r3, #7
  115f10:	daffffbd 	ble	115e0c <lwip_socket_drop_registered_memberships+0x34>
  115f14:	ea000000 	b	115f1c <lwip_socket_drop_registered_memberships+0x144>
    return;
  115f18:	e320f000 	nop	{0}
    }
  }
}
  115f1c:	e24bd004 	sub	sp, fp, #4
  115f20:	e8bd8800 	pop	{fp, pc}

00115f24 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
  115f24:	e92d4800 	push	{fp, lr}
  115f28:	e28db004 	add	fp, sp, #4
  115f2c:	e24dd010 	sub	sp, sp, #16
  115f30:	e50b0010 	str	r0, [fp, #-16]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
  115f34:	e30d3c38 	movw	r3, #56376	; 0xdc38
  115f38:	e3403014 	movt	r3, #20
  115f3c:	e5933000 	ldr	r3, [r3]
  115f40:	e3530000 	cmp	r3, #0
  115f44:	0a000007 	beq	115f68 <tcpip_thread+0x44>
    tcpip_init_done(tcpip_init_done_arg);
  115f48:	e30d3c38 	movw	r3, #56376	; 0xdc38
  115f4c:	e3403014 	movt	r3, #20
  115f50:	e5932000 	ldr	r2, [r3]
  115f54:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  115f58:	e3403014 	movt	r3, #20
  115f5c:	e5933000 	ldr	r3, [r3]
  115f60:	e1a00003 	mov	r0, r3
  115f64:	e12fff32 	blx	r2
  }

  LOCK_TCPIP_CORE();
  115f68:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  115f6c:	e3400014 	movt	r0, #20
  115f70:	ebffd2e2 	bl	10ab00 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
  115f74:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  115f78:	e3400014 	movt	r0, #20
  115f7c:	ebffd2eb 	bl	10ab30 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
  115f80:	e24b3008 	sub	r3, fp, #8
  115f84:	e1a01003 	mov	r1, r3
  115f88:	e30d0c40 	movw	r0, #56384	; 0xdc40
  115f8c:	e3400014 	movt	r0, #20
  115f90:	eb004661 	bl	12791c <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
  115f94:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  115f98:	e3400014 	movt	r0, #20
  115f9c:	ebffd2d7 	bl	10ab00 <sys_mutex_lock>
    if (msg == NULL) {
  115fa0:	e51b3008 	ldr	r3, [fp, #-8]
  115fa4:	e3530000 	cmp	r3, #0
  115fa8:	1a000007 	bne	115fcc <tcpip_thread+0xa8>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  115fac:	e3060f88 	movw	r0, #28552	; 0x6f88
  115fb0:	e3400014 	movt	r0, #20
  115fb4:	ebffb456 	bl	103114 <rt_kprintf>
  115fb8:	e3a01069 	mov	r1, #105	; 0x69
  115fbc:	e3060fa8 	movw	r0, #28584	; 0x6fa8
  115fc0:	e3400014 	movt	r0, #20
  115fc4:	ebffd449 	bl	10b0f0 <sys_arch_assert>
      continue;
  115fc8:	ea00002e 	b	116088 <tcpip_thread+0x164>
    }
    switch (msg->type) {
  115fcc:	e51b3008 	ldr	r3, [fp, #-8]
  115fd0:	e5933000 	ldr	r3, [r3]
  115fd4:	e3530003 	cmp	r3, #3
  115fd8:	0a000010 	beq	116020 <tcpip_thread+0xfc>
  115fdc:	e3530004 	cmp	r3, #4
  115fe0:	0a000019 	beq	11604c <tcpip_thread+0x128>
  115fe4:	e3530002 	cmp	r3, #2
  115fe8:	1a00001e 	bne	116068 <tcpip_thread+0x144>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
  115fec:	e51b3008 	ldr	r3, [fp, #-8]
  115ff0:	e593300c 	ldr	r3, [r3, #12]
  115ff4:	e51b2008 	ldr	r2, [fp, #-8]
  115ff8:	e5920004 	ldr	r0, [r2, #4]
  115ffc:	e51b2008 	ldr	r2, [fp, #-8]
  116000:	e5922008 	ldr	r2, [r2, #8]
  116004:	e1a01002 	mov	r1, r2
  116008:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  11600c:	e51b3008 	ldr	r3, [fp, #-8]
  116010:	e1a01003 	mov	r1, r3
  116014:	e3a0000a 	mov	r0, #10
  116018:	eb000c99 	bl	119284 <memp_free>
      break;
  11601c:	ea000019 	b	116088 <tcpip_thread+0x164>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  116020:	e51b3008 	ldr	r3, [fp, #-8]
  116024:	e5933004 	ldr	r3, [r3, #4]
  116028:	e51b2008 	ldr	r2, [fp, #-8]
  11602c:	e5922008 	ldr	r2, [r2, #8]
  116030:	e1a00002 	mov	r0, r2
  116034:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
  116038:	e51b3008 	ldr	r3, [fp, #-8]
  11603c:	e1a01003 	mov	r1, r3
  116040:	e3a00009 	mov	r0, #9
  116044:	eb000c8e 	bl	119284 <memp_free>
      break;
  116048:	ea00000e 	b	116088 <tcpip_thread+0x164>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  11604c:	e51b3008 	ldr	r3, [fp, #-8]
  116050:	e5933004 	ldr	r3, [r3, #4]
  116054:	e51b2008 	ldr	r2, [fp, #-8]
  116058:	e5922008 	ldr	r2, [r2, #8]
  11605c:	e1a00002 	mov	r0, r2
  116060:	e12fff33 	blx	r3
      break;
  116064:	ea000007 	b	116088 <tcpip_thread+0x164>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  116068:	e3060f88 	movw	r0, #28552	; 0x6f88
  11606c:	e3400014 	movt	r0, #20
  116070:	ebffb427 	bl	103114 <rt_kprintf>
  116074:	e3a0109b 	mov	r1, #155	; 0x9b
  116078:	e3060fa8 	movw	r0, #28584	; 0x6fa8
  11607c:	e3400014 	movt	r0, #20
  116080:	ebffd41a 	bl	10b0f0 <sys_arch_assert>
      break;
  116084:	e320f000 	nop	{0}
    UNLOCK_TCPIP_CORE();
  116088:	eaffffb9 	b	115f74 <tcpip_thread+0x50>

0011608c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
  11608c:	e92d4800 	push	{fp, lr}
  116090:	e28db004 	add	fp, sp, #4
  116094:	e24dd018 	sub	sp, sp, #24
  116098:	e50b0010 	str	r0, [fp, #-16]
  11609c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1160a0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  1160a4:	e30d0c40 	movw	r0, #56384	; 0xdc40
  1160a8:	e3400014 	movt	r0, #20
  1160ac:	ebffd3c6 	bl	10afcc <sys_mbox_valid>
  1160b0:	e1a03000 	mov	r3, r0
  1160b4:	e3530000 	cmp	r3, #0
  1160b8:	1a000006 	bne	1160d8 <tcpip_inpkt+0x4c>
  1160bc:	e3060fd4 	movw	r0, #28628	; 0x6fd4
  1160c0:	e3400014 	movt	r0, #20
  1160c4:	ebffb412 	bl	103114 <rt_kprintf>
  1160c8:	e3a010b5 	mov	r1, #181	; 0xb5
  1160cc:	e3060fa8 	movw	r0, #28584	; 0x6fa8
  1160d0:	e3400014 	movt	r0, #20
  1160d4:	ebffd405 	bl	10b0f0 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
  1160d8:	e3a020b7 	mov	r2, #183	; 0xb7
  1160dc:	e3061fa8 	movw	r1, #28584	; 0x6fa8
  1160e0:	e3401014 	movt	r1, #20
  1160e4:	e3a0000a 	mov	r0, #10
  1160e8:	eb000bfd 	bl	1190e4 <memp_malloc_fn>
  1160ec:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  1160f0:	e51b3008 	ldr	r3, [fp, #-8]
  1160f4:	e3530000 	cmp	r3, #0
  1160f8:	1a000001 	bne	116104 <tcpip_inpkt+0x78>
    return ERR_MEM;
  1160fc:	e3e03000 	mvn	r3, #0
  116100:	ea000018 	b	116168 <tcpip_inpkt+0xdc>
  }

  msg->type = TCPIP_MSG_INPKT;
  116104:	e51b3008 	ldr	r3, [fp, #-8]
  116108:	e3a02002 	mov	r2, #2
  11610c:	e5832000 	str	r2, [r3]
  msg->msg.inp.p = p;
  116110:	e51b3008 	ldr	r3, [fp, #-8]
  116114:	e51b2010 	ldr	r2, [fp, #-16]
  116118:	e5832004 	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
  11611c:	e51b3008 	ldr	r3, [fp, #-8]
  116120:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  116124:	e5832008 	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
  116128:	e51b3008 	ldr	r3, [fp, #-8]
  11612c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  116130:	e583200c 	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  116134:	e51b1008 	ldr	r1, [fp, #-8]
  116138:	e30d0c40 	movw	r0, #56384	; 0xdc40
  11613c:	e3400014 	movt	r0, #20
  116140:	ebffd343 	bl	10ae54 <sys_mbox_trypost>
  116144:	e1a03000 	mov	r3, r0
  116148:	e3530000 	cmp	r3, #0
  11614c:	0a000004 	beq	116164 <tcpip_inpkt+0xd8>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  116150:	e51b1008 	ldr	r1, [fp, #-8]
  116154:	e3a0000a 	mov	r0, #10
  116158:	eb000c49 	bl	119284 <memp_free>
    return ERR_MEM;
  11615c:	e3e03000 	mvn	r3, #0
  116160:	ea000000 	b	116168 <tcpip_inpkt+0xdc>
  }
  return ERR_OK;
  116164:	e3a03000 	mov	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
  116168:	e1a00003 	mov	r0, r3
  11616c:	e24bd004 	sub	sp, fp, #4
  116170:	e8bd8800 	pop	{fp, pc}

00116174 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
  116174:	e92d4800 	push	{fp, lr}
  116178:	e28db004 	add	fp, sp, #4
  11617c:	e24dd008 	sub	sp, sp, #8
  116180:	e50b0008 	str	r0, [fp, #-8]
  116184:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  116188:	e51b300c 	ldr	r3, [fp, #-12]
  11618c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  116190:	e2033018 	and	r3, r3, #24
  116194:	e3530000 	cmp	r3, #0
  116198:	0a000006 	beq	1161b8 <tcpip_input+0x44>
    return tcpip_inpkt(p, inp, ethernet_input);
  11619c:	e3082c08 	movw	r2, #35848	; 0x8c08
  1161a0:	e3402012 	movt	r2, #18
  1161a4:	e51b100c 	ldr	r1, [fp, #-12]
  1161a8:	e51b0008 	ldr	r0, [fp, #-8]
  1161ac:	ebffffb6 	bl	11608c <tcpip_inpkt>
  1161b0:	e1a03000 	mov	r3, r0
  1161b4:	ea000005 	b	1161d0 <tcpip_input+0x5c>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
  1161b8:	e3012438 	movw	r2, #5176	; 0x1438
  1161bc:	e3402013 	movt	r2, #19
  1161c0:	e51b100c 	ldr	r1, [fp, #-12]
  1161c4:	e51b0008 	ldr	r0, [fp, #-8]
  1161c8:	ebffffaf 	bl	11608c <tcpip_inpkt>
  1161cc:	e1a03000 	mov	r3, r0
}
  1161d0:	e1a00003 	mov	r0, r3
  1161d4:	e24bd004 	sub	sp, fp, #4
  1161d8:	e8bd8800 	pop	{fp, pc}

001161dc <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
  1161dc:	e92d4800 	push	{fp, lr}
  1161e0:	e28db004 	add	fp, sp, #4
  1161e4:	e24dd018 	sub	sp, sp, #24
  1161e8:	e50b0010 	str	r0, [fp, #-16]
  1161ec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1161f0:	e1a03002 	mov	r3, r2
  1161f4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  1161f8:	e30d0c40 	movw	r0, #56384	; 0xdc40
  1161fc:	e3400014 	movt	r0, #20
  116200:	ebffd371 	bl	10afcc <sys_mbox_valid>
  116204:	e1a03000 	mov	r3, r0
  116208:	e3530000 	cmp	r3, #0
  11620c:	1a000006 	bne	11622c <tcpip_callback_with_block+0x50>
  116210:	e3060fd4 	movw	r0, #28628	; 0x6fd4
  116214:	e3400014 	movt	r0, #20
  116218:	ebffb3bd 	bl	103114 <rt_kprintf>
  11621c:	e3a010ee 	mov	r1, #238	; 0xee
  116220:	e3060fa8 	movw	r0, #28584	; 0x6fa8
  116224:	e3400014 	movt	r0, #20
  116228:	ebffd3b0 	bl	10b0f0 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  11622c:	e3a020f0 	mov	r2, #240	; 0xf0
  116230:	e3061fa8 	movw	r1, #28584	; 0x6fa8
  116234:	e3401014 	movt	r1, #20
  116238:	e3a00009 	mov	r0, #9
  11623c:	eb000ba8 	bl	1190e4 <memp_malloc_fn>
  116240:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  116244:	e51b3008 	ldr	r3, [fp, #-8]
  116248:	e3530000 	cmp	r3, #0
  11624c:	1a000001 	bne	116258 <tcpip_callback_with_block+0x7c>
    return ERR_MEM;
  116250:	e3e03000 	mvn	r3, #0
  116254:	ea00001d 	b	1162d0 <tcpip_callback_with_block+0xf4>
  }

  msg->type = TCPIP_MSG_CALLBACK;
  116258:	e51b3008 	ldr	r3, [fp, #-8]
  11625c:	e3a02003 	mov	r2, #3
  116260:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  116264:	e51b3008 	ldr	r3, [fp, #-8]
  116268:	e51b2010 	ldr	r2, [fp, #-16]
  11626c:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  116270:	e51b3008 	ldr	r3, [fp, #-8]
  116274:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  116278:	e5832008 	str	r2, [r3, #8]
  if (block) {
  11627c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  116280:	e3530000 	cmp	r3, #0
  116284:	0a000004 	beq	11629c <tcpip_callback_with_block+0xc0>
    sys_mbox_post(&mbox, msg);
  116288:	e51b1008 	ldr	r1, [fp, #-8]
  11628c:	e30d0c40 	movw	r0, #56384	; 0xdc40
  116290:	e3400014 	movt	r0, #20
  116294:	ebffd2e3 	bl	10ae28 <sys_mbox_post>
  116298:	ea00000b 	b	1162cc <tcpip_callback_with_block+0xf0>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  11629c:	e51b1008 	ldr	r1, [fp, #-8]
  1162a0:	e30d0c40 	movw	r0, #56384	; 0xdc40
  1162a4:	e3400014 	movt	r0, #20
  1162a8:	ebffd2e9 	bl	10ae54 <sys_mbox_trypost>
  1162ac:	e1a03000 	mov	r3, r0
  1162b0:	e3530000 	cmp	r3, #0
  1162b4:	0a000004 	beq	1162cc <tcpip_callback_with_block+0xf0>
      memp_free(MEMP_TCPIP_MSG_API, msg);
  1162b8:	e51b1008 	ldr	r1, [fp, #-8]
  1162bc:	e3a00009 	mov	r0, #9
  1162c0:	eb000bef 	bl	119284 <memp_free>
      return ERR_MEM;
  1162c4:	e3e03000 	mvn	r3, #0
  1162c8:	ea000000 	b	1162d0 <tcpip_callback_with_block+0xf4>
    }
  }
  return ERR_OK;
  1162cc:	e3a03000 	mov	r3, #0
}
  1162d0:	e1a00003 	mov	r0, r3
  1162d4:	e24bd004 	sub	sp, fp, #4
  1162d8:	e8bd8800 	pop	{fp, pc}

001162dc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
  1162dc:	e92d4800 	push	{fp, lr}
  1162e0:	e28db004 	add	fp, sp, #4
  1162e4:	e24dd010 	sub	sp, sp, #16
  1162e8:	e50b0008 	str	r0, [fp, #-8]
  1162ec:	e50b100c 	str	r1, [fp, #-12]
  1162f0:	e50b2010 	str	r2, [fp, #-16]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
  1162f4:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  1162f8:	e3400014 	movt	r0, #20
  1162fc:	ebffd1ff 	bl	10ab00 <sys_mutex_lock>
  fn(apimsg);
  116300:	e51b3008 	ldr	r3, [fp, #-8]
  116304:	e51b000c 	ldr	r0, [fp, #-12]
  116308:	e12fff33 	blx	r3
  UNLOCK_TCPIP_CORE();
  11630c:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  116310:	e3400014 	movt	r0, #20
  116314:	ebffd205 	bl	10ab30 <sys_mutex_unlock>
  return ERR_OK;
  116318:	e3a03000 	mov	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  11631c:	e1a00003 	mov	r0, r3
  116320:	e24bd004 	sub	sp, fp, #4
  116324:	e8bd8800 	pop	{fp, pc}

00116328 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
  116328:	e92d4800 	push	{fp, lr}
  11632c:	e28db004 	add	fp, sp, #4
  116330:	e24dd010 	sub	sp, sp, #16
  116334:	e50b0010 	str	r0, [fp, #-16]
  116338:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
  11633c:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  116340:	e3400014 	movt	r0, #20
  116344:	ebffd1ed 	bl	10ab00 <sys_mutex_lock>
  err = fn(call);
  116348:	e51b3010 	ldr	r3, [fp, #-16]
  11634c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  116350:	e12fff33 	blx	r3
  116354:	e1a03000 	mov	r3, r0
  116358:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  11635c:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  116360:	e3400014 	movt	r0, #20
  116364:	ebffd1f1 	bl	10ab30 <sys_mutex_unlock>
  return err;
  116368:	e15b30d5 	ldrsb	r3, [fp, #-5]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  11636c:	e1a00003 	mov	r0, r3
  116370:	e24bd004 	sub	sp, fp, #4
  116374:	e8bd8800 	pop	{fp, pc}

00116378 <tcpip_callbackmsg_new>:
 * @param ctx parameter passed to function
 * @return a struct pointer to pass to tcpip_trycallback().
 */
struct tcpip_callback_msg*
tcpip_callbackmsg_new(tcpip_callback_fn function, void *ctx)
{
  116378:	e92d4800 	push	{fp, lr}
  11637c:	e28db004 	add	fp, sp, #4
  116380:	e24dd010 	sub	sp, sp, #16
  116384:	e50b0010 	str	r0, [fp, #-16]
  116388:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcpip_msg *msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  11638c:	e30021a1 	movw	r2, #417	; 0x1a1
  116390:	e3061fa8 	movw	r1, #28584	; 0x6fa8
  116394:	e3401014 	movt	r1, #20
  116398:	e3a00009 	mov	r0, #9
  11639c:	eb000b50 	bl	1190e4 <memp_malloc_fn>
  1163a0:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  1163a4:	e51b3008 	ldr	r3, [fp, #-8]
  1163a8:	e3530000 	cmp	r3, #0
  1163ac:	1a000001 	bne	1163b8 <tcpip_callbackmsg_new+0x40>
    return NULL;
  1163b0:	e3a03000 	mov	r3, #0
  1163b4:	ea000009 	b	1163e0 <tcpip_callbackmsg_new+0x68>
  }
  msg->type = TCPIP_MSG_CALLBACK_STATIC;
  1163b8:	e51b3008 	ldr	r3, [fp, #-8]
  1163bc:	e3a02004 	mov	r2, #4
  1163c0:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  1163c4:	e51b3008 	ldr	r3, [fp, #-8]
  1163c8:	e51b2010 	ldr	r2, [fp, #-16]
  1163cc:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  1163d0:	e51b3008 	ldr	r3, [fp, #-8]
  1163d4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1163d8:	e5832008 	str	r2, [r3, #8]
  return (struct tcpip_callback_msg*)msg;
  1163dc:	e51b3008 	ldr	r3, [fp, #-8]
}
  1163e0:	e1a00003 	mov	r0, r3
  1163e4:	e24bd004 	sub	sp, fp, #4
  1163e8:	e8bd8800 	pop	{fp, pc}

001163ec <tcpip_callbackmsg_delete>:
 *
 * @param msg the message to free
 */
void
tcpip_callbackmsg_delete(struct tcpip_callback_msg* msg)
{
  1163ec:	e92d4800 	push	{fp, lr}
  1163f0:	e28db004 	add	fp, sp, #4
  1163f4:	e24dd008 	sub	sp, sp, #8
  1163f8:	e50b0008 	str	r0, [fp, #-8]
  memp_free(MEMP_TCPIP_MSG_API, msg);
  1163fc:	e51b1008 	ldr	r1, [fp, #-8]
  116400:	e3a00009 	mov	r0, #9
  116404:	eb000b9e 	bl	119284 <memp_free>
}
  116408:	e320f000 	nop	{0}
  11640c:	e24bd004 	sub	sp, fp, #4
  116410:	e8bd8800 	pop	{fp, pc}

00116414 <tcpip_trycallback>:
 * @param msg pointer to the message to post
 * @return sys_mbox_trypost() return code
 */
err_t
tcpip_trycallback(struct tcpip_callback_msg* msg)
{
  116414:	e92d4800 	push	{fp, lr}
  116418:	e28db004 	add	fp, sp, #4
  11641c:	e24dd008 	sub	sp, sp, #8
  116420:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  116424:	e30d0c40 	movw	r0, #56384	; 0xdc40
  116428:	e3400014 	movt	r0, #20
  11642c:	ebffd2e6 	bl	10afcc <sys_mbox_valid>
  116430:	e1a03000 	mov	r3, r0
  116434:	e3530000 	cmp	r3, #0
  116438:	1a000006 	bne	116458 <tcpip_trycallback+0x44>
  11643c:	e3060fd4 	movw	r0, #28628	; 0x6fd4
  116440:	e3400014 	movt	r0, #20
  116444:	ebffb332 	bl	103114 <rt_kprintf>
  116448:	e3a01d07 	mov	r1, #448	; 0x1c0
  11644c:	e3060fa8 	movw	r0, #28584	; 0x6fa8
  116450:	e3400014 	movt	r0, #20
  116454:	ebffd325 	bl	10b0f0 <sys_arch_assert>
  return sys_mbox_trypost(&mbox, msg);
  116458:	e51b1008 	ldr	r1, [fp, #-8]
  11645c:	e30d0c40 	movw	r0, #56384	; 0xdc40
  116460:	e3400014 	movt	r0, #20
  116464:	ebffd27a 	bl	10ae54 <sys_mbox_trypost>
  116468:	e1a03000 	mov	r3, r0
}
  11646c:	e1a00003 	mov	r0, r3
  116470:	e24bd004 	sub	sp, fp, #4
  116474:	e8bd8800 	pop	{fp, pc}

00116478 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
  116478:	e92d4800 	push	{fp, lr}
  11647c:	e28db004 	add	fp, sp, #4
  116480:	e24dd010 	sub	sp, sp, #16
  116484:	e50b0008 	str	r0, [fp, #-8]
  116488:	e50b100c 	str	r1, [fp, #-12]
  lwip_init();
  11648c:	eb0009b8 	bl	118b74 <lwip_init>

  tcpip_init_done = initfunc;
  116490:	e30d3c38 	movw	r3, #56376	; 0xdc38
  116494:	e3403014 	movt	r3, #20
  116498:	e51b2008 	ldr	r2, [fp, #-8]
  11649c:	e5832000 	str	r2, [r3]
  tcpip_init_done_arg = arg;
  1164a0:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  1164a4:	e3403014 	movt	r3, #20
  1164a8:	e51b200c 	ldr	r2, [fp, #-12]
  1164ac:	e5832000 	str	r2, [r3]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
  1164b0:	e3001101 	movw	r1, #257	; 0x101
  1164b4:	e30d0c40 	movw	r0, #56384	; 0xdc40
  1164b8:	e3400014 	movt	r0, #20
  1164bc:	ebffd1c6 	bl	10abdc <sys_mbox_new>
  1164c0:	e1a03000 	mov	r3, r0
  1164c4:	e3530000 	cmp	r3, #0
  1164c8:	0a000006 	beq	1164e8 <tcpip_init+0x70>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  1164cc:	e3060fe4 	movw	r0, #28644	; 0x6fe4
  1164d0:	e3400014 	movt	r0, #20
  1164d4:	ebffb30e 	bl	103114 <rt_kprintf>
  1164d8:	e30011d5 	movw	r1, #469	; 0x1d5
  1164dc:	e3060fa8 	movw	r0, #28584	; 0x6fa8
  1164e0:	e3400014 	movt	r0, #20
  1164e4:	ebffd301 	bl	10b0f0 <sys_arch_assert>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
  1164e8:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  1164ec:	e3400014 	movt	r0, #20
  1164f0:	ebffd15a 	bl	10aa60 <sys_mutex_new>
  1164f4:	e1a03000 	mov	r3, r0
  1164f8:	e3530000 	cmp	r3, #0
  1164fc:	0a000006 	beq	11651c <tcpip_init+0xa4>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  116500:	e3070008 	movw	r0, #28680	; 0x7008
  116504:	e3400014 	movt	r0, #20
  116508:	ebffb301 	bl	103114 <rt_kprintf>
  11650c:	e30011d9 	movw	r1, #473	; 0x1d9
  116510:	e3060fa8 	movw	r0, #28584	; 0x6fa8
  116514:	e3400014 	movt	r0, #20
  116518:	ebffd2f4 	bl	10b0f0 <sys_arch_assert>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
  11651c:	e3a03017 	mov	r3, #23
  116520:	e58d3000 	str	r3, [sp]
  116524:	e3a03a02 	mov	r3, #8192	; 0x2000
  116528:	e3a02000 	mov	r2, #0
  11652c:	e3051f24 	movw	r1, #24356	; 0x5f24
  116530:	e3401011 	movt	r1, #17
  116534:	e307002c 	movw	r0, #28716	; 0x702c
  116538:	e3400014 	movt	r0, #20
  11653c:	ebffd2b7 	bl	10b020 <sys_thread_new>
}
  116540:	e320f000 	nop	{0}
  116544:	e24bd004 	sub	sp, fp, #4
  116548:	e8bd8800 	pop	{fp, pc}

0011654c <pbuf_free_int>:
 *
 * @param p The pbuf (chain) to be dereferenced.
 */
static void
pbuf_free_int(void *p)
{
  11654c:	e92d4800 	push	{fp, lr}
  116550:	e28db004 	add	fp, sp, #4
  116554:	e24dd010 	sub	sp, sp, #16
  116558:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q = (struct pbuf *)p;
  11655c:	e51b3010 	ldr	r3, [fp, #-16]
  116560:	e50b3008 	str	r3, [fp, #-8]
  pbuf_free(q);
  116564:	e51b0008 	ldr	r0, [fp, #-8]
  116568:	eb001253 	bl	11aebc <pbuf_free>
}
  11656c:	e320f000 	nop	{0}
  116570:	e24bd004 	sub	sp, fp, #4
  116574:	e8bd8800 	pop	{fp, pc}

00116578 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
  116578:	e92d4800 	push	{fp, lr}
  11657c:	e28db004 	add	fp, sp, #4
  116580:	e24dd008 	sub	sp, sp, #8
  116584:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(pbuf_free_int, p, 0);
  116588:	e3a02000 	mov	r2, #0
  11658c:	e51b1008 	ldr	r1, [fp, #-8]
  116590:	e306054c 	movw	r0, #25932	; 0x654c
  116594:	e3400011 	movt	r0, #17
  116598:	ebffff0f 	bl	1161dc <tcpip_callback_with_block>
  11659c:	e1a03000 	mov	r3, r0
}
  1165a0:	e1a00003 	mov	r0, r3
  1165a4:	e24bd004 	sub	sp, fp, #4
  1165a8:	e8bd8800 	pop	{fp, pc}

001165ac <mem_free_callback>:
 * @param m the heap memory to free
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
mem_free_callback(void *m)
{
  1165ac:	e92d4800 	push	{fp, lr}
  1165b0:	e28db004 	add	fp, sp, #4
  1165b4:	e24dd008 	sub	sp, sp, #8
  1165b8:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(mem_free, m, 0);
  1165bc:	e3a02000 	mov	r2, #0
  1165c0:	e51b1008 	ldr	r1, [fp, #-8]
  1165c4:	e30b0224 	movw	r0, #45604	; 0xb224
  1165c8:	e3400010 	movt	r0, #16
  1165cc:	ebffff02 	bl	1161dc <tcpip_callback_with_block>
  1165d0:	e1a03000 	mov	r3, r0
}
  1165d4:	e1a00003 	mov	r0, r3
  1165d8:	e24bd004 	sub	sp, fp, #4
  1165dc:	e8bd8800 	pop	{fp, pc}

001165e0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  1165e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1165e4:	e28db000 	add	fp, sp, #0
  1165e8:	e24dd00c 	sub	sp, sp, #12
  1165ec:	e1a03000 	mov	r3, r0
  1165f0:	e14b30b6 	strh	r3, [fp, #-6]
  return (u16_t)PP_HTONS(n);
  1165f4:	e15b30b6 	ldrh	r3, [fp, #-6]
  1165f8:	e6bf3fb3 	rev16	r3, r3
  1165fc:	e6ff3073 	uxth	r3, r3
}
  116600:	e1a00003 	mov	r0, r3
  116604:	e28bd000 	add	sp, fp, #0
  116608:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11660c:	e12fff1e 	bx	lr

00116610 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  116610:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116614:	e28db000 	add	fp, sp, #0
  116618:	e24dd00c 	sub	sp, sp, #12
  11661c:	e50b0008 	str	r0, [fp, #-8]
  return (u32_t)PP_HTONL(n);
  116620:	e51b3008 	ldr	r3, [fp, #-8]
  116624:	e1a02c03 	lsl	r2, r3, #24
  116628:	e51b3008 	ldr	r3, [fp, #-8]
  11662c:	e1a03403 	lsl	r3, r3, #8
  116630:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  116634:	e1822003 	orr	r2, r2, r3
  116638:	e51b3008 	ldr	r3, [fp, #-8]
  11663c:	e1a03423 	lsr	r3, r3, #8
  116640:	e2033cff 	and	r3, r3, #65280	; 0xff00
  116644:	e1822003 	orr	r2, r2, r3
  116648:	e51b3008 	ldr	r3, [fp, #-8]
  11664c:	e1a03c23 	lsr	r3, r3, #24
  116650:	e1823003 	orr	r3, r2, r3
}
  116654:	e1a00003 	mov	r0, r3
  116658:	e28bd000 	add	sp, fp, #0
  11665c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116660:	e12fff1e 	bx	lr

00116664 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
  116664:	e92d4800 	push	{fp, lr}
  116668:	e28db004 	add	fp, sp, #4
  11666c:	e24dd018 	sub	sp, sp, #24
  116670:	e50b0010 	str	r0, [fp, #-16]
  116674:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  116678:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  const char* p;
  size_t tokenlen = strlen(token);
  11667c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  116680:	eb00ab8e 	bl	1414c0 <strlen>
  116684:	e50b000c 	str	r0, [fp, #-12]
  if (tokenlen == 0) {
  116688:	e51b300c 	ldr	r3, [fp, #-12]
  11668c:	e3530000 	cmp	r3, #0
  116690:	1a000001 	bne	11669c <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  116694:	e51b3010 	ldr	r3, [fp, #-16]
  116698:	ea000021 	b	116724 <lwip_strnstr+0xc0>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  11669c:	e51b3010 	ldr	r3, [fp, #-16]
  1166a0:	e50b3008 	str	r3, [fp, #-8]
  1166a4:	ea000011 	b	1166f0 <lwip_strnstr+0x8c>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
  1166a8:	e51b3008 	ldr	r3, [fp, #-8]
  1166ac:	e5d32000 	ldrb	r2, [r3]
  1166b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1166b4:	e5d33000 	ldrb	r3, [r3]
  1166b8:	e1520003 	cmp	r2, r3
  1166bc:	1a000008 	bne	1166e4 <lwip_strnstr+0x80>
  1166c0:	e51b200c 	ldr	r2, [fp, #-12]
  1166c4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1166c8:	e51b0008 	ldr	r0, [fp, #-8]
  1166cc:	eb00aba7 	bl	141570 <strncmp>
  1166d0:	e1a03000 	mov	r3, r0
  1166d4:	e3530000 	cmp	r3, #0
  1166d8:	1a000001 	bne	1166e4 <lwip_strnstr+0x80>
      return LWIP_CONST_CAST(char *, p);
  1166dc:	e51b3008 	ldr	r3, [fp, #-8]
  1166e0:	ea00000f 	b	116724 <lwip_strnstr+0xc0>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  1166e4:	e51b3008 	ldr	r3, [fp, #-8]
  1166e8:	e2833001 	add	r3, r3, #1
  1166ec:	e50b3008 	str	r3, [fp, #-8]
  1166f0:	e51b3008 	ldr	r3, [fp, #-8]
  1166f4:	e5d33000 	ldrb	r3, [r3]
  1166f8:	e3530000 	cmp	r3, #0
  1166fc:	0a000007 	beq	116720 <lwip_strnstr+0xbc>
  116700:	e51b2008 	ldr	r2, [fp, #-8]
  116704:	e51b300c 	ldr	r3, [fp, #-12]
  116708:	e0822003 	add	r2, r2, r3
  11670c:	e51b1010 	ldr	r1, [fp, #-16]
  116710:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116714:	e0813003 	add	r3, r1, r3
  116718:	e1520003 	cmp	r2, r3
  11671c:	9affffe1 	bls	1166a8 <lwip_strnstr+0x44>
    }
  }
  return NULL;
  116720:	e3a03000 	mov	r3, #0
}
  116724:	e1a00003 	mov	r0, r3
  116728:	e24bd004 	sub	sp, fp, #4
  11672c:	e8bd8800 	pop	{fp, pc}

00116730 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
  116730:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116734:	e28db000 	add	fp, sp, #0
  116738:	e24dd014 	sub	sp, sp, #20
  11673c:	e50b0010 	str	r0, [fp, #-16]
  116740:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  char c1, c2;

  do {
    c1 = *str1++;
  116744:	e51b3010 	ldr	r3, [fp, #-16]
  116748:	e2832001 	add	r2, r3, #1
  11674c:	e50b2010 	str	r2, [fp, #-16]
  116750:	e5d33000 	ldrb	r3, [r3]
  116754:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  116758:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11675c:	e2832001 	add	r2, r3, #1
  116760:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  116764:	e5d33000 	ldrb	r3, [r3]
  116768:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  11676c:	e55b2005 	ldrb	r2, [fp, #-5]
  116770:	e55b3006 	ldrb	r3, [fp, #-6]
  116774:	e1520003 	cmp	r2, r3
  116778:	0a000014 	beq	1167d0 <lwip_stricmp+0xa0>
      char c1_upc = c1 | 0x20;
  11677c:	e55b3005 	ldrb	r3, [fp, #-5]
  116780:	e3833020 	orr	r3, r3, #32
  116784:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116788:	e55b3007 	ldrb	r3, [fp, #-7]
  11678c:	e3530060 	cmp	r3, #96	; 0x60
  116790:	9a00000b 	bls	1167c4 <lwip_stricmp+0x94>
  116794:	e55b3007 	ldrb	r3, [fp, #-7]
  116798:	e353007a 	cmp	r3, #122	; 0x7a
  11679c:	8a000008 	bhi	1167c4 <lwip_stricmp+0x94>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  1167a0:	e55b3006 	ldrb	r3, [fp, #-6]
  1167a4:	e3833020 	orr	r3, r3, #32
  1167a8:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  1167ac:	e55b2007 	ldrb	r2, [fp, #-7]
  1167b0:	e55b3008 	ldrb	r3, [fp, #-8]
  1167b4:	e1520003 	cmp	r2, r3
  1167b8:	0a000003 	beq	1167cc <lwip_stricmp+0x9c>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  1167bc:	e3a03001 	mov	r3, #1
  1167c0:	ea000006 	b	1167e0 <lwip_stricmp+0xb0>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  1167c4:	e3a03001 	mov	r3, #1
  1167c8:	ea000004 	b	1167e0 <lwip_stricmp+0xb0>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  1167cc:	e320f000 	nop	{0}
      }
    }
  } while (c1 != 0);
  1167d0:	e55b3005 	ldrb	r3, [fp, #-5]
  1167d4:	e3530000 	cmp	r3, #0
  1167d8:	1affffd9 	bne	116744 <lwip_stricmp+0x14>
  return 0;
  1167dc:	e3a03000 	mov	r3, #0
}
  1167e0:	e1a00003 	mov	r0, r3
  1167e4:	e28bd000 	add	sp, fp, #0
  1167e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1167ec:	e12fff1e 	bx	lr

001167f0 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char* str1, const char* str2, size_t len)
{
  1167f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1167f4:	e28db000 	add	fp, sp, #0
  1167f8:	e24dd01c 	sub	sp, sp, #28
  1167fc:	e50b0010 	str	r0, [fp, #-16]
  116800:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  116804:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  char c1, c2;

  do {
    c1 = *str1++;
  116808:	e51b3010 	ldr	r3, [fp, #-16]
  11680c:	e2832001 	add	r2, r3, #1
  116810:	e50b2010 	str	r2, [fp, #-16]
  116814:	e5d33000 	ldrb	r3, [r3]
  116818:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  11681c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116820:	e2832001 	add	r2, r3, #1
  116824:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  116828:	e5d33000 	ldrb	r3, [r3]
  11682c:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  116830:	e55b2005 	ldrb	r2, [fp, #-5]
  116834:	e55b3006 	ldrb	r3, [fp, #-6]
  116838:	e1520003 	cmp	r2, r3
  11683c:	0a000014 	beq	116894 <lwip_strnicmp+0xa4>
      char c1_upc = c1 | 0x20;
  116840:	e55b3005 	ldrb	r3, [fp, #-5]
  116844:	e3833020 	orr	r3, r3, #32
  116848:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  11684c:	e55b3007 	ldrb	r3, [fp, #-7]
  116850:	e3530060 	cmp	r3, #96	; 0x60
  116854:	9a00000b 	bls	116888 <lwip_strnicmp+0x98>
  116858:	e55b3007 	ldrb	r3, [fp, #-7]
  11685c:	e353007a 	cmp	r3, #122	; 0x7a
  116860:	8a000008 	bhi	116888 <lwip_strnicmp+0x98>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  116864:	e55b3006 	ldrb	r3, [fp, #-6]
  116868:	e3833020 	orr	r3, r3, #32
  11686c:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  116870:	e55b2007 	ldrb	r2, [fp, #-7]
  116874:	e55b3008 	ldrb	r3, [fp, #-8]
  116878:	e1520003 	cmp	r2, r3
  11687c:	0a000003 	beq	116890 <lwip_strnicmp+0xa0>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  116880:	e3a03001 	mov	r3, #1
  116884:	ea00000b 	b	1168b8 <lwip_strnicmp+0xc8>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  116888:	e3a03001 	mov	r3, #1
  11688c:	ea000009 	b	1168b8 <lwip_strnicmp+0xc8>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116890:	e320f000 	nop	{0}
      }
    }
  } while (len-- && c1 != 0);
  116894:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116898:	e2432001 	sub	r2, r3, #1
  11689c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1168a0:	e3530000 	cmp	r3, #0
  1168a4:	0a000002 	beq	1168b4 <lwip_strnicmp+0xc4>
  1168a8:	e55b3005 	ldrb	r3, [fp, #-5]
  1168ac:	e3530000 	cmp	r3, #0
  1168b0:	1affffd4 	bne	116808 <lwip_strnicmp+0x18>
  return 0;
  1168b4:	e3a03000 	mov	r3, #0
}
  1168b8:	e1a00003 	mov	r0, r3
  1168bc:	e28bd000 	add	sp, fp, #0
  1168c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1168c4:	e12fff1e 	bx	lr

001168c8 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char* result, size_t bufsize, int number)
{
  1168c8:	e92d4800 	push	{fp, lr}
  1168cc:	e28db004 	add	fp, sp, #4
  1168d0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1168d4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1168d8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1168dc:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  const int base = 10;
  1168e0:	e3a0300a 	mov	r3, #10
  1168e4:	e50b3010 	str	r3, [fp, #-16]
  char* ptr = result, *ptr1 = result, tmp_char;
  1168e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1168ec:	e50b3008 	str	r3, [fp, #-8]
  1168f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1168f4:	e50b300c 	str	r3, [fp, #-12]
  int tmp_value;
  LWIP_UNUSED_ARG(bufsize);

  do {
    tmp_value = number;
  1168f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1168fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    number /= base;
  116900:	e51b1010 	ldr	r1, [fp, #-16]
  116904:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  116908:	eb00885e 	bl	138a88 <__divsi3>
  11690c:	e1a03000 	mov	r3, r0
  116910:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
  116914:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  116918:	e51b2010 	ldr	r2, [fp, #-16]
  11691c:	e0030392 	mul	r3, r2, r3
  116920:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  116924:	e0423003 	sub	r3, r2, r3
  116928:	e2831023 	add	r1, r3, #35	; 0x23
  11692c:	e51b2008 	ldr	r2, [fp, #-8]
  116930:	e2823001 	add	r3, r2, #1
  116934:	e50b3008 	str	r3, [fp, #-8]
  116938:	e3073034 	movw	r3, #28724	; 0x7034
  11693c:	e3403014 	movt	r3, #20
  116940:	e7d33001 	ldrb	r3, [r3, r1]
  116944:	e5c23000 	strb	r3, [r2]
  } while(number);
  116948:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11694c:	e3530000 	cmp	r3, #0
  116950:	1affffe8 	bne	1168f8 <lwip_itoa+0x30>

   /* Apply negative sign */
  if (tmp_value < 0) {
  116954:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116958:	e3530000 	cmp	r3, #0
  11695c:	aa000004 	bge	116974 <lwip_itoa+0xac>
     *ptr++ = '-';
  116960:	e51b3008 	ldr	r3, [fp, #-8]
  116964:	e2832001 	add	r2, r3, #1
  116968:	e50b2008 	str	r2, [fp, #-8]
  11696c:	e3a0202d 	mov	r2, #45	; 0x2d
  116970:	e5c32000 	strb	r2, [r3]
  }
  *ptr-- = '\0';
  116974:	e51b3008 	ldr	r3, [fp, #-8]
  116978:	e2432001 	sub	r2, r3, #1
  11697c:	e50b2008 	str	r2, [fp, #-8]
  116980:	e3a02000 	mov	r2, #0
  116984:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  116988:	ea00000d 	b	1169c4 <lwip_itoa+0xfc>
    tmp_char = *ptr;
  11698c:	e51b3008 	ldr	r3, [fp, #-8]
  116990:	e5d33000 	ldrb	r3, [r3]
  116994:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    *ptr--= *ptr1;
  116998:	e51b3008 	ldr	r3, [fp, #-8]
  11699c:	e2432001 	sub	r2, r3, #1
  1169a0:	e50b2008 	str	r2, [fp, #-8]
  1169a4:	e51b200c 	ldr	r2, [fp, #-12]
  1169a8:	e5d22000 	ldrb	r2, [r2]
  1169ac:	e5c32000 	strb	r2, [r3]
    *ptr1++ = tmp_char;
  1169b0:	e51b300c 	ldr	r3, [fp, #-12]
  1169b4:	e2832001 	add	r2, r3, #1
  1169b8:	e50b200c 	str	r2, [fp, #-12]
  1169bc:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1169c0:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  1169c4:	e51b200c 	ldr	r2, [fp, #-12]
  1169c8:	e51b3008 	ldr	r3, [fp, #-8]
  1169cc:	e1520003 	cmp	r2, r3
  1169d0:	3affffed 	bcc	11698c <lwip_itoa+0xc4>
  }
}
  1169d4:	e320f000 	nop	{0}
  1169d8:	e24bd004 	sub	sp, fp, #4
  1169dc:	e8bd8800 	pop	{fp, pc}

001169e0 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
  1169e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1169e4:	e28db000 	add	fp, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
  1169e8:	e320f000 	nop	{0}
  1169ec:	e28bd000 	add	sp, fp, #0
  1169f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1169f4:	e12fff1e 	bx	lr

001169f8 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
  1169f8:	e92d4800 	push	{fp, lr}
  1169fc:	e28db004 	add	fp, sp, #4
  116a00:	e24dd008 	sub	sp, sp, #8
  116a04:	e1a03000 	mov	r3, r0
  116a08:	e50b100c 	str	r1, [fp, #-12]
  116a0c:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  116a10:	e55b3005 	ldrb	r3, [fp, #-5]
  116a14:	e3530001 	cmp	r3, #1
  116a18:	8a00001f 	bhi	116a9c <dns_setserver+0xa4>
    if (dnsserver != NULL) {
  116a1c:	e51b300c 	ldr	r3, [fp, #-12]
  116a20:	e3530000 	cmp	r3, #0
  116a24:	0a000015 	beq	116a80 <dns_setserver+0x88>
      dns_servers[numdns] = (*dnsserver);
  116a28:	e55b2005 	ldrb	r2, [fp, #-5]
  116a2c:	e30e30c8 	movw	r3, #57544	; 0xe0c8
  116a30:	e3403014 	movt	r3, #20
  116a34:	e51b100c 	ldr	r1, [fp, #-12]
  116a38:	e5911000 	ldr	r1, [r1]
  116a3c:	e7831102 	str	r1, [r3, r2, lsl #2]
      extern struct netif *netif_default;
      extern struct netdev *netdev_get_by_name(const char *name);
      extern void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server);

      /* set network interface device DNS server address */
      if (netif_default) {
  116a40:	e30e3a0c 	movw	r3, #59916	; 0xea0c
  116a44:	e3403056 	movt	r3, #86	; 0x56
  116a48:	e5933000 	ldr	r3, [r3]
  116a4c:	e3530000 	cmp	r3, #0
  116a50:	0a000011 	beq	116a9c <dns_setserver+0xa4>
        netdev_low_level_set_dns_server(netdev_get_by_name(netif_default->name), numdns, dnsserver);
  116a54:	e30e3a0c 	movw	r3, #59916	; 0xea0c
  116a58:	e3403056 	movt	r3, #86	; 0x56
  116a5c:	e5933000 	ldr	r3, [r3]
  116a60:	e2833042 	add	r3, r3, #66	; 0x42
  116a64:	e1a00003 	mov	r0, r3
  116a68:	ebffbaa1 	bl	1054f4 <netdev_get_by_name>
  116a6c:	e55b3005 	ldrb	r3, [fp, #-5]
  116a70:	e51b200c 	ldr	r2, [fp, #-12]
  116a74:	e1a01003 	mov	r1, r3
  116a78:	ebffbe2b 	bl	10632c <netdev_low_level_set_dns_server>
#endif /* RT_USING_NETDEV */
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
  116a7c:	ea000006 	b	116a9c <dns_setserver+0xa4>
      dns_servers[numdns] = *IP_ADDR_ANY;
  116a80:	e55b1005 	ldrb	r1, [fp, #-5]
  116a84:	e30e30c8 	movw	r3, #57544	; 0xe0c8
  116a88:	e3403014 	movt	r3, #20
  116a8c:	e3092910 	movw	r2, #39184	; 0x9910
  116a90:	e3402014 	movt	r2, #20
  116a94:	e5922000 	ldr	r2, [r2]
  116a98:	e7832101 	str	r2, [r3, r1, lsl #2]
}
  116a9c:	e320f000 	nop	{0}
  116aa0:	e24bd004 	sub	sp, fp, #4
  116aa4:	e8bd8800 	pop	{fp, pc}

00116aa8 <dns_getserver>:
 * @return IP address of the indexed DNS server or "ip_addr_any" if the DNS
 *         server has not been configured.
 */
const ip_addr_t*
dns_getserver(u8_t numdns)
{
  116aa8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116aac:	e28db000 	add	fp, sp, #0
  116ab0:	e24dd00c 	sub	sp, sp, #12
  116ab4:	e1a03000 	mov	r3, r0
  116ab8:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  116abc:	e55b3005 	ldrb	r3, [fp, #-5]
  116ac0:	e3530001 	cmp	r3, #1
  116ac4:	8a000005 	bhi	116ae0 <dns_getserver+0x38>
    return &dns_servers[numdns];
  116ac8:	e55b3005 	ldrb	r3, [fp, #-5]
  116acc:	e1a02103 	lsl	r2, r3, #2
  116ad0:	e30e30c8 	movw	r3, #57544	; 0xe0c8
  116ad4:	e3403014 	movt	r3, #20
  116ad8:	e0823003 	add	r3, r2, r3
  116adc:	ea000001 	b	116ae8 <dns_getserver+0x40>
  } else {
    return IP_ADDR_ANY;
  116ae0:	e3093910 	movw	r3, #39184	; 0x9910
  116ae4:	e3403014 	movt	r3, #20
  }
}
  116ae8:	e1a00003 	mov	r0, r3
  116aec:	e28bd000 	add	sp, fp, #0
  116af0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116af4:	e12fff1e 	bx	lr

00116af8 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
  116af8:	e92d4800 	push	{fp, lr}
  116afc:	e28db004 	add	fp, sp, #4
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
  116b00:	eb000360 	bl	117888 <dns_check_entries>
}
  116b04:	e320f000 	nop	{0}
  116b08:	e8bd8800 	pop	{fp, pc}

00116b0c <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
  116b0c:	e92d4800 	push	{fp, lr}
  116b10:	e28db004 	add	fp, sp, #4
  116b14:	e24dd010 	sub	sp, sp, #16
  116b18:	e50b0010 	str	r0, [fp, #-16]
  116b1c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  116b20:	e3a03000 	mov	r3, #0
  116b24:	e54b3005 	strb	r3, [fp, #-5]
  116b28:	ea000029 	b	116bd4 <dns_lookup+0xc8>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  116b2c:	e55b2005 	ldrb	r2, [fp, #-5]
  116b30:	e30d3c58 	movw	r3, #56408	; 0xdc58
  116b34:	e3403014 	movt	r3, #20
  116b38:	e3a01e11 	mov	r1, #272	; 0x110
  116b3c:	e0020291 	mul	r2, r1, r2
  116b40:	e0833002 	add	r3, r3, r2
  116b44:	e283300a 	add	r3, r3, #10
  116b48:	e5d33000 	ldrb	r3, [r3]
  116b4c:	e3530003 	cmp	r3, #3
  116b50:	1a00001c 	bne	116bc8 <dns_lookup+0xbc>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
  116b54:	e55b3005 	ldrb	r3, [fp, #-5]
  116b58:	e3a02e11 	mov	r2, #272	; 0x110
  116b5c:	e0030392 	mul	r3, r2, r3
  116b60:	e2832010 	add	r2, r3, #16
  116b64:	e30d3c58 	movw	r3, #56408	; 0xdc58
  116b68:	e3403014 	movt	r3, #20
  116b6c:	e0823003 	add	r3, r2, r3
  116b70:	e3a02c01 	mov	r2, #256	; 0x100
  116b74:	e1a01003 	mov	r1, r3
  116b78:	e51b0010 	ldr	r0, [fp, #-16]
  116b7c:	ebffff1b 	bl	1167f0 <lwip_strnicmp>
  116b80:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  116b84:	e3530000 	cmp	r3, #0
  116b88:	1a00000e 	bne	116bc8 <dns_lookup+0xbc>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print(DNS_DEBUG, &(dns_table[i].ipaddr));
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
  116b8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116b90:	e3530000 	cmp	r3, #0
  116b94:	0a000009 	beq	116bc0 <dns_lookup+0xb4>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
  116b98:	e55b2005 	ldrb	r2, [fp, #-5]
  116b9c:	e30d3c58 	movw	r3, #56408	; 0xdc58
  116ba0:	e3403014 	movt	r3, #20
  116ba4:	e3a01e11 	mov	r1, #272	; 0x110
  116ba8:	e0020291 	mul	r2, r1, r2
  116bac:	e0833002 	add	r3, r3, r2
  116bb0:	e2833004 	add	r3, r3, #4
  116bb4:	e5932000 	ldr	r2, [r3]
  116bb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116bbc:	e5832000 	str	r2, [r3]
      }
      return ERR_OK;
  116bc0:	e3a03000 	mov	r3, #0
  116bc4:	ea000006 	b	116be4 <dns_lookup+0xd8>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  116bc8:	e55b3005 	ldrb	r3, [fp, #-5]
  116bcc:	e2833001 	add	r3, r3, #1
  116bd0:	e54b3005 	strb	r3, [fp, #-5]
  116bd4:	e55b3005 	ldrb	r3, [fp, #-5]
  116bd8:	e3530003 	cmp	r3, #3
  116bdc:	9affffd2 	bls	116b2c <dns_lookup+0x20>
    }
  }

  return ERR_ARG;
  116be0:	e3e0300f 	mvn	r3, #15
}
  116be4:	e1a00003 	mov	r0, r3
  116be8:	e24bd004 	sub	sp, fp, #4
  116bec:	e8bd8800 	pop	{fp, pc}

00116bf0 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf* p, u16_t start_offset)
{
  116bf0:	e92d4800 	push	{fp, lr}
  116bf4:	e28db004 	add	fp, sp, #4
  116bf8:	e24dd020 	sub	sp, sp, #32
  116bfc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  116c00:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  116c04:	e1a03002 	mov	r3, r2
  116c08:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int n;
  u16_t response_offset = start_offset;
  116c0c:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  116c10:	e14b30ba 	strh	r3, [fp, #-10]

  do {
    n = pbuf_try_get_at(p, response_offset++);
  116c14:	e15b30ba 	ldrh	r3, [fp, #-10]
  116c18:	e2832001 	add	r2, r3, #1
  116c1c:	e14b20ba 	strh	r2, [fp, #-10]
  116c20:	e1a01003 	mov	r1, r3
  116c24:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116c28:	eb001460 	bl	11bdb0 <pbuf_try_get_at>
  116c2c:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  116c30:	e51b3008 	ldr	r3, [fp, #-8]
  116c34:	e3530000 	cmp	r3, #0
  116c38:	aa000001 	bge	116c44 <dns_compare_name+0x54>
      return 0xFFFF;
  116c3c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116c40:	ea000036 	b	116d20 <dns_compare_name+0x130>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  116c44:	e51b3008 	ldr	r3, [fp, #-8]
  116c48:	e20330c0 	and	r3, r3, #192	; 0xc0
  116c4c:	e35300c0 	cmp	r3, #192	; 0xc0
  116c50:	1a00001c 	bne	116cc8 <dns_compare_name+0xd8>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
  116c54:	e30f3fff 	movw	r3, #65535	; 0xffff
  116c58:	ea000030 	b	116d20 <dns_compare_name+0x130>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
  116c5c:	e15b30ba 	ldrh	r3, [fp, #-10]
  116c60:	e1a01003 	mov	r1, r3
  116c64:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116c68:	eb001450 	bl	11bdb0 <pbuf_try_get_at>
  116c6c:	e50b0010 	str	r0, [fp, #-16]
        if (c < 0) {
  116c70:	e51b3010 	ldr	r3, [fp, #-16]
  116c74:	e3530000 	cmp	r3, #0
  116c78:	aa000001 	bge	116c84 <dns_compare_name+0x94>
          return 0xFFFF;
  116c7c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116c80:	ea000026 	b	116d20 <dns_compare_name+0x130>
        }
        if ((*query) != (u8_t)c) {
  116c84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116c88:	e5d32000 	ldrb	r2, [r3]
  116c8c:	e51b3010 	ldr	r3, [fp, #-16]
  116c90:	e6ef3073 	uxtb	r3, r3
  116c94:	e1520003 	cmp	r2, r3
  116c98:	0a000001 	beq	116ca4 <dns_compare_name+0xb4>
          return 0xFFFF;
  116c9c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116ca0:	ea00001e 	b	116d20 <dns_compare_name+0x130>
        }
        ++response_offset;
  116ca4:	e15b30ba 	ldrh	r3, [fp, #-10]
  116ca8:	e2833001 	add	r3, r3, #1
  116cac:	e14b30ba 	strh	r3, [fp, #-10]
        ++query;
  116cb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116cb4:	e2833001 	add	r3, r3, #1
  116cb8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        --n;
  116cbc:	e51b3008 	ldr	r3, [fp, #-8]
  116cc0:	e2433001 	sub	r3, r3, #1
  116cc4:	e50b3008 	str	r3, [fp, #-8]
      while (n > 0) {
  116cc8:	e51b3008 	ldr	r3, [fp, #-8]
  116ccc:	e3530000 	cmp	r3, #0
  116cd0:	caffffe1 	bgt	116c5c <dns_compare_name+0x6c>
      }
      ++query;
  116cd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116cd8:	e2833001 	add	r3, r3, #1
  116cdc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
    n = pbuf_try_get_at(p, response_offset);
  116ce0:	e15b30ba 	ldrh	r3, [fp, #-10]
  116ce4:	e1a01003 	mov	r1, r3
  116ce8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116cec:	eb00142f 	bl	11bdb0 <pbuf_try_get_at>
  116cf0:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  116cf4:	e51b3008 	ldr	r3, [fp, #-8]
  116cf8:	e3530000 	cmp	r3, #0
  116cfc:	aa000001 	bge	116d08 <dns_compare_name+0x118>
      return 0xFFFF;
  116d00:	e30f3fff 	movw	r3, #65535	; 0xffff
  116d04:	ea000005 	b	116d20 <dns_compare_name+0x130>
    }
  } while (n != 0);
  116d08:	e51b3008 	ldr	r3, [fp, #-8]
  116d0c:	e3530000 	cmp	r3, #0
  116d10:	1affffbf 	bne	116c14 <dns_compare_name+0x24>

  return response_offset + 1;
  116d14:	e15b30ba 	ldrh	r3, [fp, #-10]
  116d18:	e2833001 	add	r3, r3, #1
  116d1c:	e6ff3073 	uxth	r3, r3
}
  116d20:	e1a00003 	mov	r0, r3
  116d24:	e24bd004 	sub	sp, fp, #4
  116d28:	e8bd8800 	pop	{fp, pc}

00116d2c <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf* p, u16_t query_idx)
{
  116d2c:	e92d4800 	push	{fp, lr}
  116d30:	e28db004 	add	fp, sp, #4
  116d34:	e24dd010 	sub	sp, sp, #16
  116d38:	e50b0010 	str	r0, [fp, #-16]
  116d3c:	e1a03001 	mov	r3, r1
  116d40:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int n;
  u16_t offset = query_idx;
  116d44:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  116d48:	e14b30b6 	strh	r3, [fp, #-6]

  do {
    n = pbuf_try_get_at(p, offset++);
  116d4c:	e15b30b6 	ldrh	r3, [fp, #-6]
  116d50:	e2832001 	add	r2, r3, #1
  116d54:	e14b20b6 	strh	r2, [fp, #-6]
  116d58:	e1a01003 	mov	r1, r3
  116d5c:	e51b0010 	ldr	r0, [fp, #-16]
  116d60:	eb001412 	bl	11bdb0 <pbuf_try_get_at>
  116d64:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  116d68:	e51b300c 	ldr	r3, [fp, #-12]
  116d6c:	e3530000 	cmp	r3, #0
  116d70:	aa000001 	bge	116d7c <dns_skip_name+0x50>
      return 0xFFFF;
  116d74:	e30f3fff 	movw	r3, #65535	; 0xffff
  116d78:	ea000023 	b	116e0c <dns_skip_name+0xe0>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  116d7c:	e51b300c 	ldr	r3, [fp, #-12]
  116d80:	e20330c0 	and	r3, r3, #192	; 0xc0
  116d84:	e35300c0 	cmp	r3, #192	; 0xc0
  116d88:	0a00001b 	beq	116dfc <dns_skip_name+0xd0>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
  116d8c:	e15b20b6 	ldrh	r2, [fp, #-6]
  116d90:	e51b300c 	ldr	r3, [fp, #-12]
  116d94:	e0823003 	add	r3, r2, r3
  116d98:	e51b2010 	ldr	r2, [fp, #-16]
  116d9c:	e1d220b8 	ldrh	r2, [r2, #8]
  116da0:	e1530002 	cmp	r3, r2
  116da4:	ba000001 	blt	116db0 <dns_skip_name+0x84>
        return 0xFFFF;
  116da8:	e30f3fff 	movw	r3, #65535	; 0xffff
  116dac:	ea000016 	b	116e0c <dns_skip_name+0xe0>
      }
      offset = (u16_t)(offset + n);
  116db0:	e51b300c 	ldr	r3, [fp, #-12]
  116db4:	e6ff2073 	uxth	r2, r3
  116db8:	e15b30b6 	ldrh	r3, [fp, #-6]
  116dbc:	e0823003 	add	r3, r2, r3
  116dc0:	e14b30b6 	strh	r3, [fp, #-6]
    }
    n = pbuf_try_get_at(p, offset);
  116dc4:	e15b30b6 	ldrh	r3, [fp, #-6]
  116dc8:	e1a01003 	mov	r1, r3
  116dcc:	e51b0010 	ldr	r0, [fp, #-16]
  116dd0:	eb0013f6 	bl	11bdb0 <pbuf_try_get_at>
  116dd4:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  116dd8:	e51b300c 	ldr	r3, [fp, #-12]
  116ddc:	e3530000 	cmp	r3, #0
  116de0:	aa000001 	bge	116dec <dns_skip_name+0xc0>
      return 0xFFFF;
  116de4:	e30f3fff 	movw	r3, #65535	; 0xffff
  116de8:	ea000007 	b	116e0c <dns_skip_name+0xe0>
    }
  } while (n != 0);
  116dec:	e51b300c 	ldr	r3, [fp, #-12]
  116df0:	e3530000 	cmp	r3, #0
  116df4:	1affffd4 	bne	116d4c <dns_skip_name+0x20>
  116df8:	ea000000 	b	116e00 <dns_skip_name+0xd4>
      break;
  116dfc:	e320f000 	nop	{0}

  return offset + 1;
  116e00:	e15b30b6 	ldrh	r3, [fp, #-6]
  116e04:	e2833001 	add	r3, r3, #1
  116e08:	e6ff3073 	uxth	r3, r3
}
  116e0c:	e1a00003 	mov	r0, r3
  116e10:	e24bd004 	sub	sp, fp, #4
  116e14:	e8bd8800 	pop	{fp, pc}

00116e18 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
  116e18:	e92d4800 	push	{fp, lr}
  116e1c:	e28db004 	add	fp, sp, #4
  116e20:	e24dd040 	sub	sp, sp, #64	; 0x40
  116e24:	e1a03000 	mov	r3, r0
  116e28:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry* entry = &dns_table[idx];
  116e2c:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  116e30:	e3a02e11 	mov	r2, #272	; 0x110
  116e34:	e0020392 	mul	r2, r2, r3
  116e38:	e30d3c58 	movw	r3, #56408	; 0xdc58
  116e3c:	e3403014 	movt	r3, #20
  116e40:	e0823003 	add	r3, r2, r3
  116e44:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
              (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
  116e48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116e4c:	e5d3300b 	ldrb	r3, [r3, #11]
  116e50:	e3530001 	cmp	r3, #1
  116e54:	9a000006 	bls	116e74 <dns_send+0x5c>
  116e58:	e3070080 	movw	r0, #28800	; 0x7080
  116e5c:	e3400014 	movt	r0, #20
  116e60:	ebffb0ab 	bl	103114 <rt_kprintf>
  116e64:	e30012fa 	movw	r1, #762	; 0x2fa
  116e68:	e3070098 	movw	r0, #28824	; 0x7098
  116e6c:	e3400014 	movt	r0, #20
  116e70:	ebffd09e 	bl	10b0f0 <sys_arch_assert>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
  116e74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116e78:	e5d3300b 	ldrb	r3, [r3, #11]
  116e7c:	e1a02003 	mov	r2, r3
  116e80:	e30e30c8 	movw	r3, #57544	; 0xe0c8
  116e84:	e3403014 	movt	r3, #20
  116e88:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116e8c:	e3530000 	cmp	r3, #0
  116e90:	1a000008 	bne	116eb8 <dns_send+0xa0>
      && !entry->is_mdns
#endif
    ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
  116e94:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  116e98:	e3a01000 	mov	r1, #0
  116e9c:	e1a00003 	mov	r0, r3
  116ea0:	eb00010f 	bl	1172e4 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
  116ea4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116ea8:	e3a02000 	mov	r2, #0
  116eac:	e5c3200a 	strb	r2, [r3, #10]
    return ERR_OK;
  116eb0:	e3a03000 	mov	r3, #0
  116eb4:	ea000089 	b	1170e0 <dns_send+0x2c8>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
  116eb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116ebc:	e2833010 	add	r3, r3, #16
  116ec0:	e1a00003 	mov	r0, r3
  116ec4:	eb00a97d 	bl	1414c0 <strlen>
  116ec8:	e1a03000 	mov	r3, r0
  116ecc:	e6ff3073 	uxth	r3, r3
  116ed0:	e2833012 	add	r3, r3, #18
  116ed4:	e6ff3073 	uxth	r3, r3
  116ed8:	e3a02000 	mov	r2, #0
  116edc:	e1a01003 	mov	r1, r3
  116ee0:	e3a00000 	mov	r0, #0
  116ee4:	eb000ced 	bl	11a2a0 <pbuf_alloc>
  116ee8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
                 SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
  116eec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116ef0:	e3530000 	cmp	r3, #0
  116ef4:	0a000076 	beq	1170d4 <dns_send+0x2bc>
    const ip_addr_t* dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
  116ef8:	e24b3034 	sub	r3, fp, #52	; 0x34
  116efc:	e3a0200c 	mov	r2, #12
  116f00:	e3a01000 	mov	r1, #0
  116f04:	e1a00003 	mov	r0, r3
  116f08:	eb00a8db 	bl	14127c <memset>
    hdr.id = lwip_htons(entry->txid);
  116f0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116f10:	e1d330b8 	ldrh	r3, [r3, #8]
  116f14:	e1a00003 	mov	r0, r3
  116f18:	ebfffdb0 	bl	1165e0 <lwip_htons>
  116f1c:	e1a03000 	mov	r3, r0
  116f20:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
    hdr.flags1 = DNS_FLAG1_RD;
  116f24:	e3a03001 	mov	r3, #1
  116f28:	e54b3032 	strb	r3, [fp, #-50]	; 0xffffffce
    hdr.numquestions = PP_HTONS(1);
  116f2c:	e3a03c01 	mov	r3, #256	; 0x100
  116f30:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
  116f34:	e24b3034 	sub	r3, fp, #52	; 0x34
  116f38:	e3a0200c 	mov	r2, #12
  116f3c:	e1a01003 	mov	r1, r3
  116f40:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116f44:	eb00128f 	bl	11b988 <pbuf_take>
    hostname = entry->name;
  116f48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116f4c:	e2833010 	add	r3, r3, #16
  116f50:	e50b300c 	str	r3, [fp, #-12]
    --hostname;
  116f54:	e51b300c 	ldr	r3, [fp, #-12]
  116f58:	e2433001 	sub	r3, r3, #1
  116f5c:	e50b300c 	str	r3, [fp, #-12]

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
  116f60:	e3a0300c 	mov	r3, #12
  116f64:	e14b30b8 	strh	r3, [fp, #-8]
    do {
      ++hostname;
  116f68:	e51b300c 	ldr	r3, [fp, #-12]
  116f6c:	e2833001 	add	r3, r3, #1
  116f70:	e50b300c 	str	r3, [fp, #-12]
      hostname_part = hostname;
  116f74:	e51b300c 	ldr	r3, [fp, #-12]
  116f78:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  116f7c:	e3a03000 	mov	r3, #0
  116f80:	e54b300d 	strb	r3, [fp, #-13]
  116f84:	ea000005 	b	116fa0 <dns_send+0x188>
        ++n;
  116f88:	e55b300d 	ldrb	r3, [fp, #-13]
  116f8c:	e2833001 	add	r3, r3, #1
  116f90:	e54b300d 	strb	r3, [fp, #-13]
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  116f94:	e51b300c 	ldr	r3, [fp, #-12]
  116f98:	e2833001 	add	r3, r3, #1
  116f9c:	e50b300c 	str	r3, [fp, #-12]
  116fa0:	e51b300c 	ldr	r3, [fp, #-12]
  116fa4:	e5d33000 	ldrb	r3, [r3]
  116fa8:	e353002e 	cmp	r3, #46	; 0x2e
  116fac:	0a000003 	beq	116fc0 <dns_send+0x1a8>
  116fb0:	e51b300c 	ldr	r3, [fp, #-12]
  116fb4:	e5d33000 	ldrb	r3, [r3]
  116fb8:	e3530000 	cmp	r3, #0
  116fbc:	1afffff1 	bne	116f88 <dns_send+0x170>
      }
      copy_len = (u16_t)(hostname - hostname_part);
  116fc0:	e51b200c 	ldr	r2, [fp, #-12]
  116fc4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  116fc8:	e0423003 	sub	r3, r2, r3
  116fcc:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      pbuf_put_at(p, query_idx, n);
  116fd0:	e55b200d 	ldrb	r2, [fp, #-13]
  116fd4:	e15b30b8 	ldrh	r3, [fp, #-8]
  116fd8:	e1a01003 	mov	r1, r3
  116fdc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116fe0:	eb001390 	bl	11be28 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
  116fe4:	e15b30b8 	ldrh	r3, [fp, #-8]
  116fe8:	e2833001 	add	r3, r3, #1
  116fec:	e6ff3073 	uxth	r3, r3
  116ff0:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  116ff4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  116ff8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116ffc:	eb0012de 	bl	11bb7c <pbuf_take_at>
      query_idx += n + 1;
  117000:	e55b300d 	ldrb	r3, [fp, #-13]
  117004:	e6ff2073 	uxth	r2, r3
  117008:	e15b30b8 	ldrh	r3, [fp, #-8]
  11700c:	e0823003 	add	r3, r2, r3
  117010:	e6ff3073 	uxth	r3, r3
  117014:	e2833001 	add	r3, r3, #1
  117018:	e14b30b8 	strh	r3, [fp, #-8]
    } while (*hostname != 0);
  11701c:	e51b300c 	ldr	r3, [fp, #-12]
  117020:	e5d33000 	ldrb	r3, [r3]
  117024:	e3530000 	cmp	r3, #0
  117028:	1affffce 	bne	116f68 <dns_send+0x150>
    pbuf_put_at(p, query_idx, 0);
  11702c:	e15b30b8 	ldrh	r3, [fp, #-8]
  117030:	e3a02000 	mov	r2, #0
  117034:	e1a01003 	mov	r1, r3
  117038:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11703c:	eb001379 	bl	11be28 <pbuf_put_at>
    query_idx++;
  117040:	e15b30b8 	ldrh	r3, [fp, #-8]
  117044:	e2833001 	add	r3, r3, #1
  117048:	e14b30b8 	strh	r3, [fp, #-8]

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
  11704c:	e3a03c01 	mov	r3, #256	; 0x100
  117050:	e14b33b8 	strh	r3, [fp, #-56]	; 0xffffffc8
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
  117054:	e3a03c01 	mov	r3, #256	; 0x100
  117058:	e14b33b6 	strh	r3, [fp, #-54]	; 0xffffffca
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
  11705c:	e15b30b8 	ldrh	r3, [fp, #-8]
  117060:	e24b1038 	sub	r1, fp, #56	; 0x38
  117064:	e3a02004 	mov	r2, #4
  117068:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11706c:	eb0012c2 	bl	11bb7c <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
  117070:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117074:	e5d3300f 	ldrb	r3, [r3, #15]
  117078:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
  11707c:	e3a03035 	mov	r3, #53	; 0x35
  117080:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      dst = &dns_servers[entry->server_idx];
  117084:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117088:	e5d3300b 	ldrb	r3, [r3, #11]
  11708c:	e1a02103 	lsl	r2, r3, #2
  117090:	e30e30c8 	movw	r3, #57544	; 0xe0c8
  117094:	e3403014 	movt	r3, #20
  117098:	e0823003 	add	r3, r2, r3
  11709c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
  1170a0:	e55b201f 	ldrb	r2, [fp, #-31]	; 0xffffffe1
  1170a4:	e30d3c44 	movw	r3, #56388	; 0xdc44
  1170a8:	e3403014 	movt	r3, #20
  1170ac:	e7930102 	ldr	r0, [r3, r2, lsl #2]
  1170b0:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1170b4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1170b8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1170bc:	eb00441c 	bl	128134 <udp_sendto>
  1170c0:	e1a03000 	mov	r3, r0
  1170c4:	e54b3005 	strb	r3, [fp, #-5]

    /* free pbuf */
    pbuf_free(p);
  1170c8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1170cc:	eb000f7a 	bl	11aebc <pbuf_free>
  1170d0:	ea000001 	b	1170dc <dns_send+0x2c4>
  } else {
    err = ERR_MEM;
  1170d4:	e3e03000 	mvn	r3, #0
  1170d8:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  1170dc:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  1170e0:	e1a00003 	mov	r0, r3
  1170e4:	e24bd004 	sub	sp, fp, #4
  1170e8:	e8bd8800 	pop	{fp, pc}

001170ec <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb*
dns_alloc_random_port(void)
{
  1170ec:	e92d4800 	push	{fp, lr}
  1170f0:	e28db004 	add	fp, sp, #4
  1170f4:	e24dd010 	sub	sp, sp, #16
  err_t err;
  struct udp_pcb* ret;

  ret = udp_new_ip_type(IPADDR_TYPE_ANY);
  1170f8:	e3a0002e 	mov	r0, #46	; 0x2e
  1170fc:	eb00468a 	bl	128b2c <udp_new_ip_type>
  117100:	e50b000c 	str	r0, [fp, #-12]
  if (ret == NULL) {
  117104:	e51b300c 	ldr	r3, [fp, #-12]
  117108:	e3530000 	cmp	r3, #0
  11710c:	1a000001 	bne	117118 <dns_alloc_random_port+0x2c>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
  117110:	e3a03000 	mov	r3, #0
  117114:	ea000020 	b	11719c <dns_alloc_random_port+0xb0>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
  117118:	eb009c1d 	bl	13e194 <rand>
  11711c:	e1a03000 	mov	r3, r0
  117120:	e14b30be 	strh	r3, [fp, #-14]
    if (!DNS_PORT_ALLOWED(port)) {
  117124:	e15b30be 	ldrh	r3, [fp, #-14]
  117128:	e3530b01 	cmp	r3, #1024	; 0x400
  11712c:	2a000002 	bcs	11713c <dns_alloc_random_port+0x50>
      /* this port is not allowed, try again */
      err = ERR_USE;
  117130:	e3e03007 	mvn	r3, #7
  117134:	e54b3005 	strb	r3, [fp, #-5]
      continue;
  117138:	ea000007 	b	11715c <dns_alloc_random_port+0x70>
    }
    err = udp_bind(ret, IP_ANY_TYPE, port);
  11713c:	e15b30be 	ldrh	r3, [fp, #-14]
  117140:	e1a02003 	mov	r2, r3
  117144:	e3091910 	movw	r1, #39184	; 0x9910
  117148:	e3401014 	movt	r1, #20
  11714c:	e51b000c 	ldr	r0, [fp, #-12]
  117150:	eb004540 	bl	128658 <udp_bind>
  117154:	e1a03000 	mov	r3, r0
  117158:	e54b3005 	strb	r3, [fp, #-5]
  } while (err == ERR_USE);
  11715c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  117160:	e3730008 	cmn	r3, #8
  117164:	0affffeb 	beq	117118 <dns_alloc_random_port+0x2c>
  if (err != ERR_OK) {
  117168:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11716c:	e3530000 	cmp	r3, #0
  117170:	0a000003 	beq	117184 <dns_alloc_random_port+0x98>
    udp_remove(ret);
  117174:	e51b000c 	ldr	r0, [fp, #-12]
  117178:	eb004620 	bl	128a00 <udp_remove>
    return NULL;
  11717c:	e3a03000 	mov	r3, #0
  117180:	ea000005 	b	11719c <dns_alloc_random_port+0xb0>
  }
  udp_recv(ret, dns_recv, NULL);
  117184:	e3a02000 	mov	r2, #0
  117188:	e3071994 	movw	r1, #31124	; 0x7994
  11718c:	e3401011 	movt	r1, #17
  117190:	e51b000c 	ldr	r0, [fp, #-12]
  117194:	eb004609 	bl	1289c0 <udp_recv>
  return ret;
  117198:	e51b300c 	ldr	r3, [fp, #-12]
}
  11719c:	e1a00003 	mov	r0, r3
  1171a0:	e24bd004 	sub	sp, fp, #4
  1171a4:	e8bd8800 	pop	{fp, pc}

001171a8 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
  1171a8:	e92d4810 	push	{r4, fp, lr}
  1171ac:	e28db008 	add	fp, sp, #8
  1171b0:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  1171b4:	e3a03000 	mov	r3, #0
  1171b8:	e54b300d 	strb	r3, [fp, #-13]
  1171bc:	ea000008 	b	1171e4 <dns_alloc_pcb+0x3c>
    if (dns_pcbs[i] == NULL) {
  1171c0:	e55b200d 	ldrb	r2, [fp, #-13]
  1171c4:	e30d3c44 	movw	r3, #56388	; 0xdc44
  1171c8:	e3403014 	movt	r3, #20
  1171cc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1171d0:	e3530000 	cmp	r3, #0
  1171d4:	0a000006 	beq	1171f4 <dns_alloc_pcb+0x4c>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  1171d8:	e55b300d 	ldrb	r3, [fp, #-13]
  1171dc:	e2833001 	add	r3, r3, #1
  1171e0:	e54b300d 	strb	r3, [fp, #-13]
  1171e4:	e55b300d 	ldrb	r3, [fp, #-13]
  1171e8:	e3530003 	cmp	r3, #3
  1171ec:	9afffff3 	bls	1171c0 <dns_alloc_pcb+0x18>
  1171f0:	ea000000 	b	1171f8 <dns_alloc_pcb+0x50>
      break;
  1171f4:	e320f000 	nop	{0}
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
  1171f8:	e55b300d 	ldrb	r3, [fp, #-13]
  1171fc:	e3530003 	cmp	r3, #3
  117200:	8a000011 	bhi	11724c <dns_alloc_pcb+0xa4>
    dns_pcbs[i] = dns_alloc_random_port();
  117204:	e55b400d 	ldrb	r4, [fp, #-13]
  117208:	ebffffb7 	bl	1170ec <dns_alloc_random_port>
  11720c:	e1a02000 	mov	r2, r0
  117210:	e30d3c44 	movw	r3, #56388	; 0xdc44
  117214:	e3403014 	movt	r3, #20
  117218:	e7832104 	str	r2, [r3, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
  11721c:	e55b200d 	ldrb	r2, [fp, #-13]
  117220:	e30d3c44 	movw	r3, #56388	; 0xdc44
  117224:	e3403014 	movt	r3, #20
  117228:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11722c:	e3530000 	cmp	r3, #0
  117230:	0a000005 	beq	11724c <dns_alloc_pcb+0xa4>
      /* succeeded */
      dns_last_pcb_idx = i;
  117234:	e30d3c54 	movw	r3, #56404	; 0xdc54
  117238:	e3403014 	movt	r3, #20
  11723c:	e55b200d 	ldrb	r2, [fp, #-13]
  117240:	e5c32000 	strb	r2, [r3]
      return i;
  117244:	e55b300d 	ldrb	r3, [fp, #-13]
  117248:	ea000022 	b	1172d8 <dns_alloc_pcb+0x130>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one */
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  11724c:	e3a03000 	mov	r3, #0
  117250:	e54b300d 	strb	r3, [fp, #-13]
  117254:	e30d3c54 	movw	r3, #56404	; 0xdc54
  117258:	e3403014 	movt	r3, #20
  11725c:	e5d33000 	ldrb	r3, [r3]
  117260:	e2833001 	add	r3, r3, #1
  117264:	e54b300e 	strb	r3, [fp, #-14]
  117268:	ea000016 	b	1172c8 <dns_alloc_pcb+0x120>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
  11726c:	e55b300e 	ldrb	r3, [fp, #-14]
  117270:	e3530003 	cmp	r3, #3
  117274:	9a000001 	bls	117280 <dns_alloc_pcb+0xd8>
      idx = 0;
  117278:	e3a03000 	mov	r3, #0
  11727c:	e54b300e 	strb	r3, [fp, #-14]
    }
    if (dns_pcbs[idx] != NULL) {
  117280:	e55b200e 	ldrb	r2, [fp, #-14]
  117284:	e30d3c44 	movw	r3, #56388	; 0xdc44
  117288:	e3403014 	movt	r3, #20
  11728c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117290:	e3530000 	cmp	r3, #0
  117294:	0a000005 	beq	1172b0 <dns_alloc_pcb+0x108>
      dns_last_pcb_idx = idx;
  117298:	e30d3c54 	movw	r3, #56404	; 0xdc54
  11729c:	e3403014 	movt	r3, #20
  1172a0:	e55b200e 	ldrb	r2, [fp, #-14]
  1172a4:	e5c32000 	strb	r2, [r3]
      return idx;
  1172a8:	e55b300e 	ldrb	r3, [fp, #-14]
  1172ac:	ea000009 	b	1172d8 <dns_alloc_pcb+0x130>
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  1172b0:	e55b300d 	ldrb	r3, [fp, #-13]
  1172b4:	e2833001 	add	r3, r3, #1
  1172b8:	e54b300d 	strb	r3, [fp, #-13]
  1172bc:	e55b300e 	ldrb	r3, [fp, #-14]
  1172c0:	e2833001 	add	r3, r3, #1
  1172c4:	e54b300e 	strb	r3, [fp, #-14]
  1172c8:	e55b300d 	ldrb	r3, [fp, #-13]
  1172cc:	e3530003 	cmp	r3, #3
  1172d0:	9affffe5 	bls	11726c <dns_alloc_pcb+0xc4>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
  1172d4:	e3a03004 	mov	r3, #4
}
  1172d8:	e1a00003 	mov	r0, r3
  1172dc:	e24bd008 	sub	sp, fp, #8
  1172e0:	e8bd8810 	pop	{r4, fp, pc}

001172e4 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t* addr)
{
  1172e4:	e92d4810 	push	{r4, fp, lr}
  1172e8:	e28db008 	add	fp, sp, #8
  1172ec:	e24dd014 	sub	sp, sp, #20
  1172f0:	e1a03000 	mov	r3, r0
  1172f4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1172f8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1172fc:	e3a03000 	mov	r3, #0
  117300:	e54b300d 	strb	r3, [fp, #-13]
  117304:	ea000037 	b	1173e8 <dns_call_found+0x104>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
  117308:	e55b200d 	ldrb	r2, [fp, #-13]
  11730c:	e30e3098 	movw	r3, #57496	; 0xe098
  117310:	e3403014 	movt	r3, #20
  117314:	e3a0100c 	mov	r1, #12
  117318:	e0020291 	mul	r2, r1, r2
  11731c:	e0833002 	add	r3, r3, r2
  117320:	e5933000 	ldr	r3, [r3]
  117324:	e3530000 	cmp	r3, #0
  117328:	0a00002b 	beq	1173dc <dns_call_found+0xf8>
  11732c:	e55b200d 	ldrb	r2, [fp, #-13]
  117330:	e30e3098 	movw	r3, #57496	; 0xe098
  117334:	e3403014 	movt	r3, #20
  117338:	e3a0100c 	mov	r1, #12
  11733c:	e0020291 	mul	r2, r1, r2
  117340:	e0833002 	add	r3, r3, r2
  117344:	e2833008 	add	r3, r3, #8
  117348:	e5d33000 	ldrb	r3, [r3]
  11734c:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117350:	e1520003 	cmp	r2, r3
  117354:	1a000020 	bne	1173dc <dns_call_found+0xf8>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
  117358:	e55b200d 	ldrb	r2, [fp, #-13]
  11735c:	e30e3098 	movw	r3, #57496	; 0xe098
  117360:	e3403014 	movt	r3, #20
  117364:	e3a0100c 	mov	r1, #12
  117368:	e0020291 	mul	r2, r1, r2
  11736c:	e0833002 	add	r3, r3, r2
  117370:	e5934000 	ldr	r4, [r3]
  117374:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  117378:	e3a02e11 	mov	r2, #272	; 0x110
  11737c:	e0030392 	mul	r3, r2, r3
  117380:	e2832010 	add	r2, r3, #16
  117384:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117388:	e3403014 	movt	r3, #20
  11738c:	e0820003 	add	r0, r2, r3
  117390:	e55b200d 	ldrb	r2, [fp, #-13]
  117394:	e30e3098 	movw	r3, #57496	; 0xe098
  117398:	e3403014 	movt	r3, #20
  11739c:	e3a0100c 	mov	r1, #12
  1173a0:	e0020291 	mul	r2, r1, r2
  1173a4:	e0833002 	add	r3, r3, r2
  1173a8:	e2833004 	add	r3, r3, #4
  1173ac:	e5933000 	ldr	r3, [r3]
  1173b0:	e1a02003 	mov	r2, r3
  1173b4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1173b8:	e12fff34 	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
  1173bc:	e55b200d 	ldrb	r2, [fp, #-13]
  1173c0:	e30e3098 	movw	r3, #57496	; 0xe098
  1173c4:	e3403014 	movt	r3, #20
  1173c8:	e3a0100c 	mov	r1, #12
  1173cc:	e0020291 	mul	r2, r1, r2
  1173d0:	e0833002 	add	r3, r3, r2
  1173d4:	e3a02000 	mov	r2, #0
  1173d8:	e5832000 	str	r2, [r3]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1173dc:	e55b300d 	ldrb	r3, [fp, #-13]
  1173e0:	e2833001 	add	r3, r3, #1
  1173e4:	e54b300d 	strb	r3, [fp, #-13]
  1173e8:	e55b300d 	ldrb	r3, [fp, #-13]
  1173ec:	e3530003 	cmp	r3, #3
  1173f0:	9affffc4 	bls	117308 <dns_call_found+0x24>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1173f4:	e3a03000 	mov	r3, #0
  1173f8:	e54b300d 	strb	r3, [fp, #-13]
  1173fc:	ea00002d 	b	1174b8 <dns_call_found+0x1d4>
    if (i == idx) {
  117400:	e55b200d 	ldrb	r2, [fp, #-13]
  117404:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  117408:	e1520003 	cmp	r2, r3
  11740c:	0a000025 	beq	1174a8 <dns_call_found+0x1c4>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
  117410:	e55b200d 	ldrb	r2, [fp, #-13]
  117414:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117418:	e3403014 	movt	r3, #20
  11741c:	e3a01e11 	mov	r1, #272	; 0x110
  117420:	e0020291 	mul	r2, r1, r2
  117424:	e0833002 	add	r3, r3, r2
  117428:	e283300a 	add	r3, r3, #10
  11742c:	e5d33000 	ldrb	r3, [r3]
  117430:	e3530002 	cmp	r3, #2
  117434:	1a00001c 	bne	1174ac <dns_call_found+0x1c8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
  117438:	e55b200d 	ldrb	r2, [fp, #-13]
  11743c:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117440:	e3403014 	movt	r3, #20
  117444:	e3a01e11 	mov	r1, #272	; 0x110
  117448:	e0020291 	mul	r2, r1, r2
  11744c:	e0833002 	add	r3, r3, r2
  117450:	e283300f 	add	r3, r3, #15
  117454:	e5d32000 	ldrb	r2, [r3]
  117458:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  11745c:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117460:	e3403014 	movt	r3, #20
  117464:	e3a00e11 	mov	r0, #272	; 0x110
  117468:	e0010190 	mul	r1, r0, r1
  11746c:	e0833001 	add	r3, r3, r1
  117470:	e283300f 	add	r3, r3, #15
  117474:	e5d33000 	ldrb	r3, [r3]
  117478:	e1520003 	cmp	r2, r3
  11747c:	1a00000a 	bne	1174ac <dns_call_found+0x1c8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  117480:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117484:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117488:	e3403014 	movt	r3, #20
  11748c:	e3a01e11 	mov	r1, #272	; 0x110
  117490:	e0020291 	mul	r2, r1, r2
  117494:	e0833002 	add	r3, r3, r2
  117498:	e283300f 	add	r3, r3, #15
  11749c:	e3a02004 	mov	r2, #4
  1174a0:	e5c32000 	strb	r2, [r3]
        break;
  1174a4:	ea000006 	b	1174c4 <dns_call_found+0x1e0>
      continue; /* only check other requests */
  1174a8:	e320f000 	nop	{0}
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1174ac:	e55b300d 	ldrb	r3, [fp, #-13]
  1174b0:	e2833001 	add	r3, r3, #1
  1174b4:	e54b300d 	strb	r3, [fp, #-13]
  1174b8:	e55b300d 	ldrb	r3, [fp, #-13]
  1174bc:	e3530003 	cmp	r3, #3
  1174c0:	9affffce 	bls	117400 <dns_call_found+0x11c>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
  1174c4:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1174c8:	e30d3c58 	movw	r3, #56408	; 0xdc58
  1174cc:	e3403014 	movt	r3, #20
  1174d0:	e3a01e11 	mov	r1, #272	; 0x110
  1174d4:	e0020291 	mul	r2, r1, r2
  1174d8:	e0833002 	add	r3, r3, r2
  1174dc:	e283300f 	add	r3, r3, #15
  1174e0:	e5d33000 	ldrb	r3, [r3]
  1174e4:	e3530003 	cmp	r3, #3
  1174e8:	8a000023 	bhi	11757c <dns_call_found+0x298>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
  1174ec:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1174f0:	e30d3c58 	movw	r3, #56408	; 0xdc58
  1174f4:	e3403014 	movt	r3, #20
  1174f8:	e3a01e11 	mov	r1, #272	; 0x110
  1174fc:	e0020291 	mul	r2, r1, r2
  117500:	e0833002 	add	r3, r3, r2
  117504:	e283300f 	add	r3, r3, #15
  117508:	e5d33000 	ldrb	r3, [r3]
  11750c:	e1a02003 	mov	r2, r3
  117510:	e30d3c44 	movw	r3, #56388	; 0xdc44
  117514:	e3403014 	movt	r3, #20
  117518:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11751c:	e1a00003 	mov	r0, r3
  117520:	eb004536 	bl	128a00 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
  117524:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117528:	e30d3c58 	movw	r3, #56408	; 0xdc58
  11752c:	e3403014 	movt	r3, #20
  117530:	e3a01e11 	mov	r1, #272	; 0x110
  117534:	e0020291 	mul	r2, r1, r2
  117538:	e0833002 	add	r3, r3, r2
  11753c:	e283300f 	add	r3, r3, #15
  117540:	e5d33000 	ldrb	r3, [r3]
  117544:	e1a01003 	mov	r1, r3
  117548:	e30d3c44 	movw	r3, #56388	; 0xdc44
  11754c:	e3403014 	movt	r3, #20
  117550:	e3a02000 	mov	r2, #0
  117554:	e7832101 	str	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  117558:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  11755c:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117560:	e3403014 	movt	r3, #20
  117564:	e3a01e11 	mov	r1, #272	; 0x110
  117568:	e0020291 	mul	r2, r1, r2
  11756c:	e0833002 	add	r3, r3, r2
  117570:	e283300f 	add	r3, r3, #15
  117574:	e3a02004 	mov	r2, #4
  117578:	e5c32000 	strb	r2, [r3]
  }
#endif
}
  11757c:	e320f000 	nop	{0}
  117580:	e24bd008 	sub	sp, fp, #8
  117584:	e8bd8810 	pop	{r4, fp, pc}

00117588 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
  117588:	e92d4800 	push	{fp, lr}
  11758c:	e28db004 	add	fp, sp, #4
  117590:	e24dd008 	sub	sp, sp, #8
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
  117594:	eb009afe 	bl	13e194 <rand>
  117598:	e1a03000 	mov	r3, r0
  11759c:	e14b30b8 	strh	r3, [fp, #-8]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  1175a0:	e3a03000 	mov	r3, #0
  1175a4:	e54b3005 	strb	r3, [fp, #-5]
  1175a8:	ea000018 	b	117610 <dns_create_txid+0x88>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  1175ac:	e55b2005 	ldrb	r2, [fp, #-5]
  1175b0:	e30d3c58 	movw	r3, #56408	; 0xdc58
  1175b4:	e3403014 	movt	r3, #20
  1175b8:	e3a01e11 	mov	r1, #272	; 0x110
  1175bc:	e0020291 	mul	r2, r1, r2
  1175c0:	e0833002 	add	r3, r3, r2
  1175c4:	e283300a 	add	r3, r3, #10
  1175c8:	e5d33000 	ldrb	r3, [r3]
  1175cc:	e3530002 	cmp	r3, #2
  1175d0:	1a00000b 	bne	117604 <dns_create_txid+0x7c>
        (dns_table[i].txid == txid)) {
  1175d4:	e55b2005 	ldrb	r2, [fp, #-5]
  1175d8:	e30d3c58 	movw	r3, #56408	; 0xdc58
  1175dc:	e3403014 	movt	r3, #20
  1175e0:	e3a01e11 	mov	r1, #272	; 0x110
  1175e4:	e0020291 	mul	r2, r1, r2
  1175e8:	e0833002 	add	r3, r3, r2
  1175ec:	e2833008 	add	r3, r3, #8
  1175f0:	e1d330b0 	ldrh	r3, [r3]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  1175f4:	e15b20b8 	ldrh	r2, [fp, #-8]
  1175f8:	e1520003 	cmp	r2, r3
  1175fc:	1a000000 	bne	117604 <dns_create_txid+0x7c>
      /* ID already used by another pending query */
      goto again;
  117600:	eaffffe3 	b	117594 <dns_create_txid+0xc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117604:	e55b3005 	ldrb	r3, [fp, #-5]
  117608:	e2833001 	add	r3, r3, #1
  11760c:	e54b3005 	strb	r3, [fp, #-5]
  117610:	e55b3005 	ldrb	r3, [fp, #-5]
  117614:	e3530003 	cmp	r3, #3
  117618:	9affffe3 	bls	1175ac <dns_create_txid+0x24>
    }
  }

  return txid;
  11761c:	e15b30b8 	ldrh	r3, [fp, #-8]
}
  117620:	e1a00003 	mov	r0, r3
  117624:	e24bd004 	sub	sp, fp, #4
  117628:	e8bd8800 	pop	{fp, pc}

0011762c <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
  11762c:	e92d4800 	push	{fp, lr}
  117630:	e28db004 	add	fp, sp, #4
  117634:	e24dd010 	sub	sp, sp, #16
  117638:	e1a03000 	mov	r3, r0
  11763c:	e54b300d 	strb	r3, [fp, #-13]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
  117640:	e55b300d 	ldrb	r3, [fp, #-13]
  117644:	e3a02e11 	mov	r2, #272	; 0x110
  117648:	e0020392 	mul	r2, r2, r3
  11764c:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117650:	e3403014 	movt	r3, #20
  117654:	e0823003 	add	r3, r2, r3
  117658:	e50b3008 	str	r3, [fp, #-8]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
  11765c:	e55b300d 	ldrb	r3, [fp, #-13]
  117660:	e3530003 	cmp	r3, #3
  117664:	9a000006 	bls	117684 <dns_check_entry+0x58>
  117668:	e30700c4 	movw	r0, #28868	; 0x70c4
  11766c:	e3400014 	movt	r0, #20
  117670:	ebffaea7 	bl	103114 <rt_kprintf>
  117674:	e3001405 	movw	r1, #1029	; 0x405
  117678:	e3070098 	movw	r0, #28824	; 0x7098
  11767c:	e3400014 	movt	r0, #20
  117680:	ebffce9a 	bl	10b0f0 <sys_arch_assert>

  switch (entry->state) {
  117684:	e51b3008 	ldr	r3, [fp, #-8]
  117688:	e5d3300a 	ldrb	r3, [r3, #10]
  11768c:	e3530003 	cmp	r3, #3
  117690:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  117694:	ea00006b 	b	117848 <dns_check_entry+0x21c>
  117698:	00117868 	.word	0x00117868
  11769c:	001176a8 	.word	0x001176a8
  1176a0:	00117704 	.word	0x00117704
  1176a4:	00117804 	.word	0x00117804
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
  1176a8:	ebffffb6 	bl	117588 <dns_create_txid>
  1176ac:	e1a03000 	mov	r3, r0
  1176b0:	e1a02003 	mov	r2, r3
  1176b4:	e51b3008 	ldr	r3, [fp, #-8]
  1176b8:	e1c320b8 	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
  1176bc:	e51b3008 	ldr	r3, [fp, #-8]
  1176c0:	e3a02002 	mov	r2, #2
  1176c4:	e5c3200a 	strb	r2, [r3, #10]
      entry->server_idx = 0;
  1176c8:	e51b3008 	ldr	r3, [fp, #-8]
  1176cc:	e3a02000 	mov	r2, #0
  1176d0:	e5c3200b 	strb	r2, [r3, #11]
      entry->tmr = 1;
  1176d4:	e51b3008 	ldr	r3, [fp, #-8]
  1176d8:	e3a02001 	mov	r2, #1
  1176dc:	e5c3200c 	strb	r2, [r3, #12]
      entry->retries = 0;
  1176e0:	e51b3008 	ldr	r3, [fp, #-8]
  1176e4:	e3a02000 	mov	r2, #0
  1176e8:	e5c3200d 	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
  1176ec:	e55b300d 	ldrb	r3, [fp, #-13]
  1176f0:	e1a00003 	mov	r0, r3
  1176f4:	ebfffdc7 	bl	116e18 <dns_send>
  1176f8:	e1a03000 	mov	r3, r0
  1176fc:	e54b3009 	strb	r3, [fp, #-9]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
  117700:	ea00005d 	b	11787c <dns_check_entry+0x250>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
  117704:	e51b3008 	ldr	r3, [fp, #-8]
  117708:	e5d3300c 	ldrb	r3, [r3, #12]
  11770c:	e2433001 	sub	r3, r3, #1
  117710:	e6ef2073 	uxtb	r2, r3
  117714:	e51b3008 	ldr	r3, [fp, #-8]
  117718:	e5c3200c 	strb	r2, [r3, #12]
  11771c:	e51b3008 	ldr	r3, [fp, #-8]
  117720:	e5d3300c 	ldrb	r3, [r3, #12]
  117724:	e3530000 	cmp	r3, #0
  117728:	1a000050 	bne	117870 <dns_check_entry+0x244>
        if (++entry->retries == DNS_MAX_RETRIES) {
  11772c:	e51b3008 	ldr	r3, [fp, #-8]
  117730:	e5d3300d 	ldrb	r3, [r3, #13]
  117734:	e2833001 	add	r3, r3, #1
  117738:	e6ef2073 	uxtb	r2, r3
  11773c:	e51b3008 	ldr	r3, [fp, #-8]
  117740:	e5c3200d 	strb	r2, [r3, #13]
  117744:	e51b3008 	ldr	r3, [fp, #-8]
  117748:	e5d3300d 	ldrb	r3, [r3, #13]
  11774c:	e3530004 	cmp	r3, #4
  117750:	1a000021 	bne	1177dc <dns_check_entry+0x1b0>
          if ((entry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[entry->server_idx + 1])
  117754:	e51b3008 	ldr	r3, [fp, #-8]
  117758:	e5d3300b 	ldrb	r3, [r3, #11]
  11775c:	e2833001 	add	r3, r3, #1
  117760:	e3530001 	cmp	r3, #1
  117764:	ca000014 	bgt	1177bc <dns_check_entry+0x190>
  117768:	e51b3008 	ldr	r3, [fp, #-8]
  11776c:	e5d3300b 	ldrb	r3, [r3, #11]
  117770:	e2832001 	add	r2, r3, #1
  117774:	e30e30c8 	movw	r3, #57544	; 0xe0c8
  117778:	e3403014 	movt	r3, #20
  11777c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117780:	e3530000 	cmp	r3, #0
  117784:	0a00000c 	beq	1177bc <dns_check_entry+0x190>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
            && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
            ) {
            /* change of server */
            entry->server_idx++;
  117788:	e51b3008 	ldr	r3, [fp, #-8]
  11778c:	e5d3300b 	ldrb	r3, [r3, #11]
  117790:	e2833001 	add	r3, r3, #1
  117794:	e6ef2073 	uxtb	r2, r3
  117798:	e51b3008 	ldr	r3, [fp, #-8]
  11779c:	e5c3200b 	strb	r2, [r3, #11]
            entry->tmr = 1;
  1177a0:	e51b3008 	ldr	r3, [fp, #-8]
  1177a4:	e3a02001 	mov	r2, #1
  1177a8:	e5c3200c 	strb	r2, [r3, #12]
            entry->retries = 0;
  1177ac:	e51b3008 	ldr	r3, [fp, #-8]
  1177b0:	e3a02000 	mov	r2, #0
  1177b4:	e5c3200d 	strb	r2, [r3, #13]
  1177b8:	ea00000b 	b	1177ec <dns_check_entry+0x1c0>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
  1177bc:	e55b300d 	ldrb	r3, [fp, #-13]
  1177c0:	e3a01000 	mov	r1, #0
  1177c4:	e1a00003 	mov	r0, r3
  1177c8:	ebfffec5 	bl	1172e4 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
  1177cc:	e51b3008 	ldr	r3, [fp, #-8]
  1177d0:	e3a02000 	mov	r2, #0
  1177d4:	e5c3200a 	strb	r2, [r3, #10]
            break;
  1177d8:	ea000027 	b	11787c <dns_check_entry+0x250>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
  1177dc:	e51b3008 	ldr	r3, [fp, #-8]
  1177e0:	e5d3200d 	ldrb	r2, [r3, #13]
  1177e4:	e51b3008 	ldr	r3, [fp, #-8]
  1177e8:	e5c3200c 	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
  1177ec:	e55b300d 	ldrb	r3, [fp, #-13]
  1177f0:	e1a00003 	mov	r0, r3
  1177f4:	ebfffd87 	bl	116e18 <dns_send>
  1177f8:	e1a03000 	mov	r3, r0
  1177fc:	e54b3009 	strb	r3, [fp, #-9]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
  117800:	ea00001a 	b	117870 <dns_check_entry+0x244>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
  117804:	e51b3008 	ldr	r3, [fp, #-8]
  117808:	e5933000 	ldr	r3, [r3]
  11780c:	e3530000 	cmp	r3, #0
  117810:	0a000008 	beq	117838 <dns_check_entry+0x20c>
  117814:	e51b3008 	ldr	r3, [fp, #-8]
  117818:	e5933000 	ldr	r3, [r3]
  11781c:	e2432001 	sub	r2, r3, #1
  117820:	e51b3008 	ldr	r3, [fp, #-8]
  117824:	e5832000 	str	r2, [r3]
  117828:	e51b3008 	ldr	r3, [fp, #-8]
  11782c:	e5933000 	ldr	r3, [r3]
  117830:	e3530000 	cmp	r3, #0
  117834:	1a00000f 	bne	117878 <dns_check_entry+0x24c>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
  117838:	e51b3008 	ldr	r3, [fp, #-8]
  11783c:	e3a02000 	mov	r2, #0
  117840:	e5c3200a 	strb	r2, [r3, #10]
      }
      break;
  117844:	ea00000b 	b	117878 <dns_check_entry+0x24c>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
  117848:	e30700e0 	movw	r0, #28896	; 0x70e0
  11784c:	e3400014 	movt	r0, #20
  117850:	ebffae2f 	bl	103114 <rt_kprintf>
  117854:	e3001444 	movw	r1, #1092	; 0x444
  117858:	e3070098 	movw	r0, #28824	; 0x7098
  11785c:	e3400014 	movt	r0, #20
  117860:	ebffce22 	bl	10b0f0 <sys_arch_assert>
      break;
  117864:	ea000004 	b	11787c <dns_check_entry+0x250>
      break;
  117868:	e320f000 	nop	{0}
  11786c:	ea000002 	b	11787c <dns_check_entry+0x250>
      break;
  117870:	e320f000 	nop	{0}
  117874:	ea000000 	b	11787c <dns_check_entry+0x250>
      break;
  117878:	e320f000 	nop	{0}
  }
}
  11787c:	e320f000 	nop	{0}
  117880:	e24bd004 	sub	sp, fp, #4
  117884:	e8bd8800 	pop	{fp, pc}

00117888 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
  117888:	e92d4800 	push	{fp, lr}
  11788c:	e28db004 	add	fp, sp, #4
  117890:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117894:	e3a03000 	mov	r3, #0
  117898:	e54b3005 	strb	r3, [fp, #-5]
  11789c:	ea000005 	b	1178b8 <dns_check_entries+0x30>
    dns_check_entry(i);
  1178a0:	e55b3005 	ldrb	r3, [fp, #-5]
  1178a4:	e1a00003 	mov	r0, r3
  1178a8:	ebffff5f 	bl	11762c <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  1178ac:	e55b3005 	ldrb	r3, [fp, #-5]
  1178b0:	e2833001 	add	r3, r3, #1
  1178b4:	e54b3005 	strb	r3, [fp, #-5]
  1178b8:	e55b3005 	ldrb	r3, [fp, #-5]
  1178bc:	e3530003 	cmp	r3, #3
  1178c0:	9afffff6 	bls	1178a0 <dns_check_entries+0x18>
  }
}
  1178c4:	e320f000 	nop	{0}
  1178c8:	e24bd004 	sub	sp, fp, #4
  1178cc:	e8bd8800 	pop	{fp, pc}

001178d0 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
  1178d0:	e92d4800 	push	{fp, lr}
  1178d4:	e28db004 	add	fp, sp, #4
  1178d8:	e24dd010 	sub	sp, sp, #16
  1178dc:	e1a03000 	mov	r3, r0
  1178e0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1178e4:	e54b300d 	strb	r3, [fp, #-13]
  struct dns_table_entry *entry = &dns_table[idx];
  1178e8:	e55b300d 	ldrb	r3, [fp, #-13]
  1178ec:	e3a02e11 	mov	r2, #272	; 0x110
  1178f0:	e0020392 	mul	r2, r2, r3
  1178f4:	e30d3c58 	movw	r3, #56408	; 0xdc58
  1178f8:	e3403014 	movt	r3, #20
  1178fc:	e0823003 	add	r3, r2, r3
  117900:	e50b3008 	str	r3, [fp, #-8]

  entry->state = DNS_STATE_DONE;
  117904:	e51b3008 	ldr	r3, [fp, #-8]
  117908:	e3a02003 	mov	r2, #3
  11790c:	e5c3200a 	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print(DNS_DEBUG, (&(entry->ipaddr)));
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
  117910:	e51b3008 	ldr	r3, [fp, #-8]
  117914:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  117918:	e5832000 	str	r2, [r3]
  if (entry->ttl > DNS_MAX_TTL) {
  11791c:	e51b3008 	ldr	r3, [fp, #-8]
  117920:	e5932000 	ldr	r2, [r3]
  117924:	e3a03dea 	mov	r3, #14976	; 0x3a80
  117928:	e3403009 	movt	r3, #9
  11792c:	e1520003 	cmp	r2, r3
  117930:	9a000003 	bls	117944 <dns_correct_response+0x74>
    entry->ttl = DNS_MAX_TTL;
  117934:	e51b2008 	ldr	r2, [fp, #-8]
  117938:	e3a03dea 	mov	r3, #14976	; 0x3a80
  11793c:	e3403009 	movt	r3, #9
  117940:	e5823000 	str	r3, [r2]
  }
  dns_call_found(idx, &entry->ipaddr);
  117944:	e51b3008 	ldr	r3, [fp, #-8]
  117948:	e2832004 	add	r2, r3, #4
  11794c:	e55b300d 	ldrb	r3, [fp, #-13]
  117950:	e1a01002 	mov	r1, r2
  117954:	e1a00003 	mov	r0, r3
  117958:	ebfffe61 	bl	1172e4 <dns_call_found>

  if (entry->ttl == 0) {
  11795c:	e51b3008 	ldr	r3, [fp, #-8]
  117960:	e5933000 	ldr	r3, [r3]
  117964:	e3530000 	cmp	r3, #0
  117968:	1a000006 	bne	117988 <dns_correct_response+0xb8>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
  11796c:	e51b3008 	ldr	r3, [fp, #-8]
  117970:	e5d3300a 	ldrb	r3, [r3, #10]
  117974:	e3530003 	cmp	r3, #3
  117978:	1a000002 	bne	117988 <dns_correct_response+0xb8>
      entry->state = DNS_STATE_UNUSED;
  11797c:	e51b3008 	ldr	r3, [fp, #-8]
  117980:	e3a02000 	mov	r2, #0
  117984:	e5c3200a 	strb	r2, [r3, #10]
    }
  }
}
  117988:	e320f000 	nop	{0}
  11798c:	e24bd004 	sub	sp, fp, #4
  117990:	e8bd8800 	pop	{fp, pc}

00117994 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  117994:	e92d4810 	push	{r4, fp, lr}
  117998:	e28db008 	add	fp, sp, #8
  11799c:	e24dd044 	sub	sp, sp, #68	; 0x44
  1179a0:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
  1179a4:	e50b1044 	str	r1, [fp, #-68]	; 0xffffffbc
  1179a8:	e50b2048 	str	r2, [fp, #-72]	; 0xffffffb8
  1179ac:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
  1179b0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  1179b4:	e1d330b8 	ldrh	r3, [r3, #8]
  1179b8:	e353000f 	cmp	r3, #15
  1179bc:	9a0000c8 	bls	117ce4 <dns_recv+0x350>
    /* free pbuf and return */
    goto memerr;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
  1179c0:	e24b1028 	sub	r1, fp, #40	; 0x28
  1179c4:	e3a03000 	mov	r3, #0
  1179c8:	e3a0200c 	mov	r2, #12
  1179cc:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1179d0:	eb000f44 	bl	11b6e8 <pbuf_copy_partial>
  1179d4:	e1a03000 	mov	r3, r0
  1179d8:	e353000c 	cmp	r3, #12
  1179dc:	1a0000c2 	bne	117cec <dns_recv+0x358>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
  1179e0:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1179e4:	e1a00003 	mov	r0, r3
  1179e8:	ebfffafc 	bl	1165e0 <lwip_htons>
  1179ec:	e1a03000 	mov	r3, r0
  1179f0:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  1179f4:	e3a03000 	mov	r3, #0
  1179f8:	e54b300d 	strb	r3, [fp, #-13]
  1179fc:	ea0000b4 	b	117cd4 <dns_recv+0x340>
      const struct dns_table_entry *entry = &dns_table[i];
  117a00:	e55b300d 	ldrb	r3, [fp, #-13]
  117a04:	e3a02e11 	mov	r2, #272	; 0x110
  117a08:	e0020392 	mul	r2, r2, r3
  117a0c:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117a10:	e3403014 	movt	r3, #20
  117a14:	e0823003 	add	r3, r2, r3
  117a18:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      if ((entry->state == DNS_STATE_ASKING) &&
  117a1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117a20:	e5d3300a 	ldrb	r3, [r3, #10]
  117a24:	e3530002 	cmp	r3, #2
  117a28:	1a0000a6 	bne	117cc8 <dns_recv+0x334>
          (entry->txid == txid)) {
  117a2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117a30:	e1d330b8 	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
  117a34:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  117a38:	e1520003 	cmp	r2, r3
  117a3c:	1a0000a1 	bne	117cc8 <dns_recv+0x334>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
  117a40:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  117a44:	e1a00003 	mov	r0, r3
  117a48:	ebfffae4 	bl	1165e0 <lwip_htons>
  117a4c:	e1a03000 	mov	r3, r0
  117a50:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
        nanswers   = lwip_htons(hdr.numanswers);
  117a54:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  117a58:	e1a00003 	mov	r0, r3
  117a5c:	ebfffadf 	bl	1165e0 <lwip_htons>
  117a60:	e1a03000 	mov	r3, r0
  117a64:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
  117a68:	e55b3026 	ldrb	r3, [fp, #-38]	; 0xffffffda
  117a6c:	e6af3073 	sxtb	r3, r3
  117a70:	e3530000 	cmp	r3, #0
  117a74:	aa00009e 	bge	117cf4 <dns_recv+0x360>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        if (nquestions != 1) {
  117a78:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  117a7c:	e3530001 	cmp	r3, #1
  117a80:	1a00009d 	bne	117cfc <dns_recv+0x368>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
  117a84:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  117a88:	e5932000 	ldr	r2, [r3]
  117a8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117a90:	e5d3300b 	ldrb	r3, [r3, #11]
  117a94:	e1a01003 	mov	r1, r3
  117a98:	e30e30c8 	movw	r3, #57544	; 0xe0c8
  117a9c:	e3403014 	movt	r3, #20
  117aa0:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  117aa4:	e1520003 	cmp	r2, r3
  117aa8:	1a000095 	bne	117d04 <dns_recv+0x370>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
  117aac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117ab0:	e2833010 	add	r3, r3, #16
  117ab4:	e3a0200c 	mov	r2, #12
  117ab8:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  117abc:	e1a00003 	mov	r0, r3
  117ac0:	ebfffc4a 	bl	116bf0 <dns_compare_name>
  117ac4:	e1a03000 	mov	r3, r0
  117ac8:	e14b31b0 	strh	r3, [fp, #-16]
        if (res_idx == 0xFFFF) {
  117acc:	e15b31b0 	ldrh	r3, [fp, #-16]
  117ad0:	e30f2fff 	movw	r2, #65535	; 0xffff
  117ad4:	e1530002 	cmp	r3, r2
  117ad8:	0a00008b 	beq	117d0c <dns_recv+0x378>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
  117adc:	e15b31b0 	ldrh	r3, [fp, #-16]
  117ae0:	e24b1038 	sub	r1, fp, #56	; 0x38
  117ae4:	e3a02004 	mov	r2, #4
  117ae8:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117aec:	eb000efd 	bl	11b6e8 <pbuf_copy_partial>
  117af0:	e1a03000 	mov	r3, r0
  117af4:	e3530004 	cmp	r3, #4
  117af8:	1a000085 	bne	117d14 <dns_recv+0x380>
          goto memerr; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
  117afc:	e15b33b6 	ldrh	r3, [fp, #-54]	; 0xffffffca
  117b00:	e3530c01 	cmp	r3, #256	; 0x100
  117b04:	1a000078 	bne	117cec <dns_recv+0x358>
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
          (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
  117b08:	e15b33b8 	ldrh	r3, [fp, #-56]	; 0xffffffc8
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
  117b0c:	e3530c01 	cmp	r3, #256	; 0x100
  117b10:	1a000075 	bne	117cec <dns_recv+0x358>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        res_idx += SIZEOF_DNS_QUERY;
  117b14:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b18:	e2833004 	add	r3, r3, #4
  117b1c:	e14b31b0 	strh	r3, [fp, #-16]

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
  117b20:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  117b24:	e203300f 	and	r3, r3, #15
  117b28:	e3530000 	cmp	r3, #0
  117b2c:	1a000055 	bne	117c88 <dns_recv+0x2f4>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  117b30:	ea00004c 	b	117c68 <dns_recv+0x2d4>
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
  117b34:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b38:	e1a01003 	mov	r1, r3
  117b3c:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117b40:	ebfffc79 	bl	116d2c <dns_skip_name>
  117b44:	e1a03000 	mov	r3, r0
  117b48:	e14b31b0 	strh	r3, [fp, #-16]
            if (res_idx == 0xFFFF) {
  117b4c:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b50:	e30f2fff 	movw	r2, #65535	; 0xffff
  117b54:	e1530002 	cmp	r3, r2
  117b58:	0a00006f 	beq	117d1c <dns_recv+0x388>
              goto memerr; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
  117b5c:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b60:	e24b1034 	sub	r1, fp, #52	; 0x34
  117b64:	e3a0200a 	mov	r2, #10
  117b68:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117b6c:	eb000edd 	bl	11b6e8 <pbuf_copy_partial>
  117b70:	e1a03000 	mov	r3, r0
  117b74:	e353000a 	cmp	r3, #10
  117b78:	1a000069 	bne	117d24 <dns_recv+0x390>
              goto memerr; /* ignore this packet */
            }
            res_idx += SIZEOF_DNS_ANSWER;
  117b7c:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b80:	e283300a 	add	r3, r3, #10
  117b84:	e14b31b0 	strh	r3, [fp, #-16]

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
  117b88:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  117b8c:	e3530c01 	cmp	r3, #256	; 0x100
  117b90:	1a000021 	bne	117c1c <dns_recv+0x288>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
  117b94:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  117b98:	e3530c01 	cmp	r3, #256	; 0x100
  117b9c:	1a00001e 	bne	117c1c <dns_recv+0x288>
  117ba0:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117ba4:	e3530b01 	cmp	r3, #1024	; 0x400
  117ba8:	1a00001b 	bne	117c1c <dns_recv+0x288>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
  117bac:	e15b31b0 	ldrh	r3, [fp, #-16]
  117bb0:	e24b103c 	sub	r1, fp, #60	; 0x3c
  117bb4:	e3a02004 	mov	r2, #4
  117bb8:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117bbc:	eb000ec9 	bl	11b6e8 <pbuf_copy_partial>
  117bc0:	e1a03000 	mov	r3, r0
  117bc4:	e3530004 	cmp	r3, #4
  117bc8:	1a000057 	bne	117d2c <dns_recv+0x398>
                    goto memerr; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
  117bcc:	e55b100d 	ldrb	r1, [fp, #-13]
  117bd0:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  117bd4:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117bd8:	e3403014 	movt	r3, #20
  117bdc:	e3a00e11 	mov	r0, #272	; 0x110
  117be0:	e0010190 	mul	r1, r0, r1
  117be4:	e0833001 	add	r3, r3, r1
  117be8:	e2833004 	add	r3, r3, #4
  117bec:	e5832000 	str	r2, [r3]
                  pbuf_free(p);
  117bf0:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117bf4:	eb000cb0 	bl	11aebc <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
  117bf8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  117bfc:	e1a00003 	mov	r0, r3
  117c00:	ebfffa82 	bl	116610 <lwip_htonl>
  117c04:	e1a02000 	mov	r2, r0
  117c08:	e55b300d 	ldrb	r3, [fp, #-13]
  117c0c:	e1a01002 	mov	r1, r2
  117c10:	e1a00003 	mov	r0, r3
  117c14:	ebffff2d 	bl	1178d0 <dns_correct_response>
  117c18:	ea000049 	b	117d44 <dns_recv+0x3b0>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
  117c1c:	e15b41b0 	ldrh	r4, [fp, #-16]
  117c20:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117c24:	e1a00003 	mov	r0, r3
  117c28:	ebfffa6c 	bl	1165e0 <lwip_htons>
  117c2c:	e1a03000 	mov	r3, r0
  117c30:	e0843003 	add	r3, r4, r3
  117c34:	e3530801 	cmp	r3, #65536	; 0x10000
  117c38:	aa00003d 	bge	117d34 <dns_recv+0x3a0>
              goto memerr; /* ignore this packet */
            }
            res_idx += lwip_htons(ans.len);
  117c3c:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117c40:	e1a00003 	mov	r0, r3
  117c44:	ebfffa65 	bl	1165e0 <lwip_htons>
  117c48:	e1a03000 	mov	r3, r0
  117c4c:	e1a02003 	mov	r2, r3
  117c50:	e15b31b0 	ldrh	r3, [fp, #-16]
  117c54:	e0823003 	add	r3, r2, r3
  117c58:	e14b31b0 	strh	r3, [fp, #-16]
            --nanswers;
  117c5c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  117c60:	e2433001 	sub	r3, r3, #1
  117c64:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  117c68:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  117c6c:	e3530000 	cmp	r3, #0
  117c70:	0a000004 	beq	117c88 <dns_recv+0x2f4>
  117c74:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  117c78:	e1d330b8 	ldrh	r3, [r3, #8]
  117c7c:	e15b21b0 	ldrh	r2, [fp, #-16]
  117c80:	e1520003 	cmp	r2, r3
  117c84:	3affffaa 	bcc	117b34 <dns_recv+0x1a0>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
  117c88:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117c8c:	eb000c8a 	bl	11aebc <pbuf_free>
        dns_call_found(i, NULL);
  117c90:	e55b300d 	ldrb	r3, [fp, #-13]
  117c94:	e3a01000 	mov	r1, #0
  117c98:	e1a00003 	mov	r0, r3
  117c9c:	ebfffd90 	bl	1172e4 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
  117ca0:	e55b200d 	ldrb	r2, [fp, #-13]
  117ca4:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117ca8:	e3403014 	movt	r3, #20
  117cac:	e3a01e11 	mov	r1, #272	; 0x110
  117cb0:	e0020291 	mul	r2, r1, r2
  117cb4:	e0833002 	add	r3, r3, r2
  117cb8:	e283300a 	add	r3, r3, #10
  117cbc:	e3a02000 	mov	r2, #0
  117cc0:	e5c32000 	strb	r2, [r3]
        return;
  117cc4:	ea00001e 	b	117d44 <dns_recv+0x3b0>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117cc8:	e55b300d 	ldrb	r3, [fp, #-13]
  117ccc:	e2833001 	add	r3, r3, #1
  117cd0:	e54b300d 	strb	r3, [fp, #-13]
  117cd4:	e55b300d 	ldrb	r3, [fp, #-13]
  117cd8:	e3530003 	cmp	r3, #3
  117cdc:	9affff47 	bls	117a00 <dns_recv+0x6c>
      }
    }
  }

memerr:
  117ce0:	ea000001 	b	117cec <dns_recv+0x358>
    goto memerr;
  117ce4:	e320f000 	nop	{0}
  117ce8:	ea000012 	b	117d38 <dns_recv+0x3a4>
memerr:
  117cec:	e320f000 	nop	{0}
  117cf0:	ea000010 	b	117d38 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117cf4:	e320f000 	nop	{0}
  117cf8:	ea00000e 	b	117d38 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117cfc:	e320f000 	nop	{0}
  117d00:	ea00000c 	b	117d38 <dns_recv+0x3a4>
            goto memerr; /* ignore this packet */
  117d04:	e320f000 	nop	{0}
  117d08:	ea00000a 	b	117d38 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117d0c:	e320f000 	nop	{0}
  117d10:	ea000008 	b	117d38 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117d14:	e320f000 	nop	{0}
  117d18:	ea000006 	b	117d38 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117d1c:	e320f000 	nop	{0}
  117d20:	ea000004 	b	117d38 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117d24:	e320f000 	nop	{0}
  117d28:	ea000002 	b	117d38 <dns_recv+0x3a4>
                    goto memerr; /* ignore this packet */
  117d2c:	e320f000 	nop	{0}
  117d30:	ea000000 	b	117d38 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117d34:	e320f000 	nop	{0}
  /* deallocate memory and return */
  pbuf_free(p);
  117d38:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117d3c:	eb000c5e 	bl	11aebc <pbuf_free>
  return;
  117d40:	e320f000 	nop	{0}
}
  117d44:	e24bd008 	sub	sp, fp, #8
  117d48:	e8bd8810 	pop	{r4, fp, pc}

00117d4c <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
  117d4c:	e92d4800 	push	{fp, lr}
  117d50:	e28db004 	add	fp, sp, #4
  117d54:	e24dd028 	sub	sp, sp, #40	; 0x28
  117d58:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  117d5c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  117d60:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  117d64:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
  117d68:	e3a03000 	mov	r3, #0
  117d6c:	e50b300c 	str	r3, [fp, #-12]
  struct dns_req_entry* req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117d70:	e3a03000 	mov	r3, #0
  117d74:	e54b3005 	strb	r3, [fp, #-5]
  117d78:	ea000048 	b	117ea0 <dns_enqueue+0x154>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117d7c:	e55b2005 	ldrb	r2, [fp, #-5]
  117d80:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117d84:	e3403014 	movt	r3, #20
  117d88:	e3a01e11 	mov	r1, #272	; 0x110
  117d8c:	e0020291 	mul	r2, r1, r2
  117d90:	e0833002 	add	r3, r3, r2
  117d94:	e283300a 	add	r3, r3, #10
  117d98:	e5d33000 	ldrb	r3, [r3]
  117d9c:	e3530002 	cmp	r3, #2
  117da0:	1a00003b 	bne	117e94 <dns_enqueue+0x148>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
  117da4:	e55b3005 	ldrb	r3, [fp, #-5]
  117da8:	e3a02e11 	mov	r2, #272	; 0x110
  117dac:	e0030392 	mul	r3, r2, r3
  117db0:	e2832010 	add	r2, r3, #16
  117db4:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117db8:	e3403014 	movt	r3, #20
  117dbc:	e0823003 	add	r3, r2, r3
  117dc0:	e3a02c01 	mov	r2, #256	; 0x100
  117dc4:	e1a01003 	mov	r1, r3
  117dc8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  117dcc:	ebfffa87 	bl	1167f0 <lwip_strnicmp>
  117dd0:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117dd4:	e3530000 	cmp	r3, #0
  117dd8:	1a00002d 	bne	117e94 <dns_enqueue+0x148>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117ddc:	e3a03000 	mov	r3, #0
  117de0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117de4:	ea000027 	b	117e88 <dns_enqueue+0x13c>
        if (dns_requests[r].found == 0) {
  117de8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117dec:	e30e3098 	movw	r3, #57496	; 0xe098
  117df0:	e3403014 	movt	r3, #20
  117df4:	e3a0100c 	mov	r1, #12
  117df8:	e0020291 	mul	r2, r1, r2
  117dfc:	e0833002 	add	r3, r3, r2
  117e00:	e5933000 	ldr	r3, [r3]
  117e04:	e3530000 	cmp	r3, #0
  117e08:	1a00001b 	bne	117e7c <dns_enqueue+0x130>
          dns_requests[r].found = found;
  117e0c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117e10:	e30e3098 	movw	r3, #57496	; 0xe098
  117e14:	e3403014 	movt	r3, #20
  117e18:	e3a0100c 	mov	r1, #12
  117e1c:	e0020291 	mul	r2, r1, r2
  117e20:	e0833002 	add	r3, r3, r2
  117e24:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  117e28:	e5832000 	str	r2, [r3]
          dns_requests[r].arg = callback_arg;
  117e2c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117e30:	e30e3098 	movw	r3, #57496	; 0xe098
  117e34:	e3403014 	movt	r3, #20
  117e38:	e3a0100c 	mov	r1, #12
  117e3c:	e0020291 	mul	r2, r1, r2
  117e40:	e0833002 	add	r3, r3, r2
  117e44:	e2833004 	add	r3, r3, #4
  117e48:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  117e4c:	e5832000 	str	r2, [r3]
          dns_requests[r].dns_table_idx = i;
  117e50:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117e54:	e30e3098 	movw	r3, #57496	; 0xe098
  117e58:	e3403014 	movt	r3, #20
  117e5c:	e3a0100c 	mov	r1, #12
  117e60:	e0020291 	mul	r2, r1, r2
  117e64:	e0833002 	add	r3, r3, r2
  117e68:	e2833008 	add	r3, r3, #8
  117e6c:	e55b2005 	ldrb	r2, [fp, #-5]
  117e70:	e5c32000 	strb	r2, [r3]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
  117e74:	e3e03004 	mvn	r3, #4
  117e78:	ea0000b3 	b	11814c <dns_enqueue+0x400>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117e7c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117e80:	e2833001 	add	r3, r3, #1
  117e84:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117e88:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117e8c:	e3530003 	cmp	r3, #3
  117e90:	9affffd4 	bls	117de8 <dns_enqueue+0x9c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117e94:	e55b3005 	ldrb	r3, [fp, #-5]
  117e98:	e2833001 	add	r3, r3, #1
  117e9c:	e54b3005 	strb	r3, [fp, #-5]
  117ea0:	e55b3005 	ldrb	r3, [fp, #-5]
  117ea4:	e3530003 	cmp	r3, #3
  117ea8:	9affffb3 	bls	117d7c <dns_enqueue+0x30>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
  117eac:	e3a03000 	mov	r3, #0
  117eb0:	e54b3006 	strb	r3, [fp, #-6]
  lseqi = DNS_TABLE_SIZE;
  117eb4:	e3a03004 	mov	r3, #4
  117eb8:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117ebc:	e3a03000 	mov	r3, #0
  117ec0:	e54b3005 	strb	r3, [fp, #-5]
  117ec4:	ea000020 	b	117f4c <dns_enqueue+0x200>
    entry = &dns_table[i];
  117ec8:	e55b3005 	ldrb	r3, [fp, #-5]
  117ecc:	e3a02e11 	mov	r2, #272	; 0x110
  117ed0:	e0020392 	mul	r2, r2, r3
  117ed4:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117ed8:	e3403014 	movt	r3, #20
  117edc:	e0823003 	add	r3, r2, r3
  117ee0:	e50b300c 	str	r3, [fp, #-12]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
  117ee4:	e51b300c 	ldr	r3, [fp, #-12]
  117ee8:	e5d3300a 	ldrb	r3, [r3, #10]
  117eec:	e3530000 	cmp	r3, #0
  117ef0:	0a000019 	beq	117f5c <dns_enqueue+0x210>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
  117ef4:	e51b300c 	ldr	r3, [fp, #-12]
  117ef8:	e5d3300a 	ldrb	r3, [r3, #10]
  117efc:	e3530003 	cmp	r3, #3
  117f00:	1a00000e 	bne	117f40 <dns_enqueue+0x1f4>
      u8_t age = dns_seqno - entry->seqno;
  117f04:	e30d3c55 	movw	r3, #56405	; 0xdc55
  117f08:	e3403014 	movt	r3, #20
  117f0c:	e5d32000 	ldrb	r2, [r3]
  117f10:	e51b300c 	ldr	r3, [fp, #-12]
  117f14:	e5d3300e 	ldrb	r3, [r3, #14]
  117f18:	e0423003 	sub	r3, r2, r3
  117f1c:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
      if (age > lseq) {
  117f20:	e55b2012 	ldrb	r2, [fp, #-18]	; 0xffffffee
  117f24:	e55b3006 	ldrb	r3, [fp, #-6]
  117f28:	e1520003 	cmp	r2, r3
  117f2c:	9a000003 	bls	117f40 <dns_enqueue+0x1f4>
        lseq = age;
  117f30:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  117f34:	e54b3006 	strb	r3, [fp, #-6]
        lseqi = i;
  117f38:	e55b3005 	ldrb	r3, [fp, #-5]
  117f3c:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117f40:	e55b3005 	ldrb	r3, [fp, #-5]
  117f44:	e2833001 	add	r3, r3, #1
  117f48:	e54b3005 	strb	r3, [fp, #-5]
  117f4c:	e55b3005 	ldrb	r3, [fp, #-5]
  117f50:	e3530003 	cmp	r3, #3
  117f54:	9affffdb 	bls	117ec8 <dns_enqueue+0x17c>
  117f58:	ea000000 	b	117f60 <dns_enqueue+0x214>
      break;
  117f5c:	e320f000 	nop	{0}
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
  117f60:	e55b3005 	ldrb	r3, [fp, #-5]
  117f64:	e3530004 	cmp	r3, #4
  117f68:	1a000017 	bne	117fcc <dns_enqueue+0x280>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
  117f6c:	e55b3007 	ldrb	r3, [fp, #-7]
  117f70:	e3530003 	cmp	r3, #3
  117f74:	8a000009 	bhi	117fa0 <dns_enqueue+0x254>
  117f78:	e55b2007 	ldrb	r2, [fp, #-7]
  117f7c:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117f80:	e3403014 	movt	r3, #20
  117f84:	e3a01e11 	mov	r1, #272	; 0x110
  117f88:	e0020291 	mul	r2, r1, r2
  117f8c:	e0833002 	add	r3, r3, r2
  117f90:	e283300a 	add	r3, r3, #10
  117f94:	e5d33000 	ldrb	r3, [r3]
  117f98:	e3530003 	cmp	r3, #3
  117f9c:	0a000001 	beq	117fa8 <dns_enqueue+0x25c>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
  117fa0:	e3e03000 	mvn	r3, #0
  117fa4:	ea000068 	b	11814c <dns_enqueue+0x400>
    } else {
      /* use the oldest completed one */
      i = lseqi;
  117fa8:	e55b3007 	ldrb	r3, [fp, #-7]
  117fac:	e54b3005 	strb	r3, [fp, #-5]
      entry = &dns_table[i];
  117fb0:	e55b3005 	ldrb	r3, [fp, #-5]
  117fb4:	e3a02e11 	mov	r2, #272	; 0x110
  117fb8:	e0020392 	mul	r2, r2, r3
  117fbc:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117fc0:	e3403014 	movt	r3, #20
  117fc4:	e0823003 	add	r3, r2, r3
  117fc8:	e50b300c 	str	r3, [fp, #-12]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
  117fcc:	e3a03000 	mov	r3, #0
  117fd0:	e50b3010 	str	r3, [fp, #-16]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117fd4:	e3a03000 	mov	r3, #0
  117fd8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117fdc:	ea000013 	b	118030 <dns_enqueue+0x2e4>
    if (dns_requests[r].found == NULL) {
  117fe0:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117fe4:	e30e3098 	movw	r3, #57496	; 0xe098
  117fe8:	e3403014 	movt	r3, #20
  117fec:	e3a0100c 	mov	r1, #12
  117ff0:	e0020291 	mul	r2, r1, r2
  117ff4:	e0833002 	add	r3, r3, r2
  117ff8:	e5933000 	ldr	r3, [r3]
  117ffc:	e3530000 	cmp	r3, #0
  118000:	1a000007 	bne	118024 <dns_enqueue+0x2d8>
      req = &dns_requests[r];
  118004:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  118008:	e3a0200c 	mov	r2, #12
  11800c:	e0020392 	mul	r2, r2, r3
  118010:	e30e3098 	movw	r3, #57496	; 0xe098
  118014:	e3403014 	movt	r3, #20
  118018:	e0823003 	add	r3, r2, r3
  11801c:	e50b3010 	str	r3, [fp, #-16]
      break;
  118020:	ea000005 	b	11803c <dns_enqueue+0x2f0>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  118024:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  118028:	e2833001 	add	r3, r3, #1
  11802c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118030:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  118034:	e3530003 	cmp	r3, #3
  118038:	9affffe8 	bls	117fe0 <dns_enqueue+0x294>
    }
  }
  if (req == NULL) {
  11803c:	e51b3010 	ldr	r3, [fp, #-16]
  118040:	e3530000 	cmp	r3, #0
  118044:	1a000001 	bne	118050 <dns_enqueue+0x304>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
  118048:	e3e03000 	mvn	r3, #0
  11804c:	ea00003e 	b	11814c <dns_enqueue+0x400>
  }
  req->dns_table_idx = i;
  118050:	e51b3010 	ldr	r3, [fp, #-16]
  118054:	e55b2005 	ldrb	r2, [fp, #-5]
  118058:	e5c32008 	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
  11805c:	e51b300c 	ldr	r3, [fp, #-12]
  118060:	e3a02001 	mov	r2, #1
  118064:	e5c3200a 	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
  118068:	e30d3c55 	movw	r3, #56405	; 0xdc55
  11806c:	e3403014 	movt	r3, #20
  118070:	e5d32000 	ldrb	r2, [r3]
  118074:	e51b300c 	ldr	r3, [fp, #-12]
  118078:	e5c3200e 	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
  11807c:	e51b3010 	ldr	r3, [fp, #-16]
  118080:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  118084:	e5832000 	str	r2, [r3]
  req->arg   = callback_arg;
  118088:	e51b3010 	ldr	r3, [fp, #-16]
  11808c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  118090:	e5832004 	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH-1);
  118094:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118098:	e35300ff 	cmp	r3, #255	; 0xff
  11809c:	31a03003 	movcc	r3, r3
  1180a0:	23a030ff 	movcs	r3, #255	; 0xff
  1180a4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  MEMCPY(entry->name, name, namelen);
  1180a8:	e51b300c 	ldr	r3, [fp, #-12]
  1180ac:	e2833010 	add	r3, r3, #16
  1180b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1180b4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1180b8:	e1a00003 	mov	r0, r3
  1180bc:	eb00a336 	bl	140d9c <memcpy>
  entry->name[namelen] = 0;
  1180c0:	e51b200c 	ldr	r2, [fp, #-12]
  1180c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1180c8:	e0823003 	add	r3, r2, r3
  1180cc:	e2833010 	add	r3, r3, #16
  1180d0:	e3a02000 	mov	r2, #0
  1180d4:	e5c32000 	strb	r2, [r3]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
  1180d8:	ebfffc32 	bl	1171a8 <dns_alloc_pcb>
  1180dc:	e1a03000 	mov	r3, r0
  1180e0:	e1a02003 	mov	r2, r3
  1180e4:	e51b300c 	ldr	r3, [fp, #-12]
  1180e8:	e5c3200f 	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
  1180ec:	e51b300c 	ldr	r3, [fp, #-12]
  1180f0:	e5d3300f 	ldrb	r3, [r3, #15]
  1180f4:	e3530003 	cmp	r3, #3
  1180f8:	9a000007 	bls	11811c <dns_enqueue+0x3d0>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
  1180fc:	e51b300c 	ldr	r3, [fp, #-12]
  118100:	e3a02000 	mov	r2, #0
  118104:	e5c3200a 	strb	r2, [r3, #10]
    req->found = NULL;
  118108:	e51b3010 	ldr	r3, [fp, #-16]
  11810c:	e3a02000 	mov	r2, #0
  118110:	e5832000 	str	r2, [r3]
    return ERR_MEM;
  118114:	e3e03000 	mvn	r3, #0
  118118:	ea00000b 	b	11814c <dns_enqueue+0x400>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
  11811c:	e30d3c55 	movw	r3, #56405	; 0xdc55
  118120:	e3403014 	movt	r3, #20
  118124:	e5d33000 	ldrb	r3, [r3]
  118128:	e2833001 	add	r3, r3, #1
  11812c:	e6ef2073 	uxtb	r2, r3
  118130:	e30d3c55 	movw	r3, #56405	; 0xdc55
  118134:	e3403014 	movt	r3, #20
  118138:	e5c32000 	strb	r2, [r3]

  /* force to send query without waiting timer */
  dns_check_entry(i);
  11813c:	e55b3005 	ldrb	r3, [fp, #-5]
  118140:	e1a00003 	mov	r0, r3
  118144:	ebfffd38 	bl	11762c <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
  118148:	e3e03004 	mvn	r3, #4
}
  11814c:	e1a00003 	mov	r0, r3
  118150:	e24bd004 	sub	sp, fp, #4
  118154:	e8bd8800 	pop	{fp, pc}

00118158 <dns_gethostbyname>:
 * @return a err_t return code.
 */
err_t
dns_gethostbyname(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                  void *callback_arg)
{
  118158:	e92d4800 	push	{fp, lr}
  11815c:	e28db004 	add	fp, sp, #4
  118160:	e24dd018 	sub	sp, sp, #24
  118164:	e50b0008 	str	r0, [fp, #-8]
  118168:	e50b100c 	str	r1, [fp, #-12]
  11816c:	e50b2010 	str	r2, [fp, #-16]
  118170:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
  118174:	e3a03000 	mov	r3, #0
  118178:	e58d3000 	str	r3, [sp]
  11817c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118180:	e51b2010 	ldr	r2, [fp, #-16]
  118184:	e51b100c 	ldr	r1, [fp, #-12]
  118188:	e51b0008 	ldr	r0, [fp, #-8]
  11818c:	eb000003 	bl	1181a0 <dns_gethostbyname_addrtype>
  118190:	e1a03000 	mov	r3, r0
}
  118194:	e1a00003 	mov	r0, r3
  118198:	e24bd004 	sub	sp, fp, #4
  11819c:	e8bd8800 	pop	{fp, pc}

001181a0 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
  1181a0:	e92d4800 	push	{fp, lr}
  1181a4:	e28db004 	add	fp, sp, #4
  1181a8:	e24dd018 	sub	sp, sp, #24
  1181ac:	e50b0010 	str	r0, [fp, #-16]
  1181b0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1181b4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1181b8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
  1181bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1181c0:	e3530000 	cmp	r3, #0
  1181c4:	0a000006 	beq	1181e4 <dns_gethostbyname_addrtype+0x44>
  1181c8:	e51b3010 	ldr	r3, [fp, #-16]
  1181cc:	e3530000 	cmp	r3, #0
  1181d0:	0a000003 	beq	1181e4 <dns_gethostbyname_addrtype+0x44>
      (!hostname) || (!hostname[0])) {
  1181d4:	e51b3010 	ldr	r3, [fp, #-16]
  1181d8:	e5d33000 	ldrb	r3, [r3]
  1181dc:	e3530000 	cmp	r3, #0
  1181e0:	1a000001 	bne	1181ec <dns_gethostbyname_addrtype+0x4c>
    return ERR_ARG;
  1181e4:	e3e0300f 	mvn	r3, #15
  1181e8:	ea000024 	b	118280 <dns_gethostbyname_addrtype+0xe0>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
  1181ec:	e51b0010 	ldr	r0, [fp, #-16]
  1181f0:	eb00a4b2 	bl	1414c0 <strlen>
  1181f4:	e50b0008 	str	r0, [fp, #-8]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
  1181f8:	e51b3008 	ldr	r3, [fp, #-8]
  1181fc:	e35300ff 	cmp	r3, #255	; 0xff
  118200:	9a000001 	bls	11820c <dns_gethostbyname_addrtype+0x6c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
  118204:	e3e0300f 	mvn	r3, #15
  118208:	ea00001c 	b	118280 <dns_gethostbyname_addrtype+0xe0>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
  11820c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  118210:	e51b0010 	ldr	r0, [fp, #-16]
  118214:	eb006934 	bl	1326ec <ip4addr_aton>
  118218:	e1a03000 	mov	r3, r0
  11821c:	e3530000 	cmp	r3, #0
  118220:	0a000001 	beq	11822c <dns_gethostbyname_addrtype+0x8c>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
  118224:	e3a03000 	mov	r3, #0
  118228:	ea000014 	b	118280 <dns_gethostbyname_addrtype+0xe0>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
  11822c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  118230:	e51b0010 	ldr	r0, [fp, #-16]
  118234:	ebfffa34 	bl	116b0c <dns_lookup>
  118238:	e1a03000 	mov	r3, r0
  11823c:	e3530000 	cmp	r3, #0
  118240:	1a000001 	bne	11824c <dns_gethostbyname_addrtype+0xac>
    return ERR_OK;
  118244:	e3a03000 	mov	r3, #0
  118248:	ea00000c 	b	118280 <dns_gethostbyname_addrtype+0xe0>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
  11824c:	e30e30c8 	movw	r3, #57544	; 0xe0c8
  118250:	e3403014 	movt	r3, #20
  118254:	e5933000 	ldr	r3, [r3]
  118258:	e3530000 	cmp	r3, #0
  11825c:	1a000001 	bne	118268 <dns_gethostbyname_addrtype+0xc8>
      return ERR_VAL;
  118260:	e3e03005 	mvn	r3, #5
  118264:	ea000005 	b	118280 <dns_gethostbyname_addrtype+0xe0>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
  118268:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11826c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118270:	e51b1008 	ldr	r1, [fp, #-8]
  118274:	e51b0010 	ldr	r0, [fp, #-16]
  118278:	ebfffeb3 	bl	117d4c <dns_enqueue>
  11827c:	e1a03000 	mov	r3, r0
     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
  118280:	e1a00003 	mov	r0, r3
  118284:	e24bd004 	sub	sp, fp, #4
  118288:	e8bd8800 	pop	{fp, pc}

0011828c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  11828c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  118290:	e28db000 	add	fp, sp, #0
  118294:	e24dd024 	sub	sp, sp, #36	; 0x24
  118298:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11829c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  const u8_t *pb = (const u8_t *)dataptr;
  1182a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1182a4:	e50b3008 	str	r3, [fp, #-8]
  const u16_t *ps;
  u16_t t = 0;
  1182a8:	e3a03000 	mov	r3, #0
  1182ac:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t sum = 0;
  1182b0:	e3a03000 	mov	r3, #0
  1182b4:	e50b3010 	str	r3, [fp, #-16]
  int odd = ((mem_ptr_t)pb & 1);
  1182b8:	e51b3008 	ldr	r3, [fp, #-8]
  1182bc:	e2033001 	and	r3, r3, #1
  1182c0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  1182c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1182c8:	e3530000 	cmp	r3, #0
  1182cc:	0a00000c 	beq	118304 <lwip_standard_chksum+0x78>
  1182d0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1182d4:	e3530000 	cmp	r3, #0
  1182d8:	da000009 	ble	118304 <lwip_standard_chksum+0x78>
    ((u8_t *)&t)[1] = *pb++;
  1182dc:	e51b2008 	ldr	r2, [fp, #-8]
  1182e0:	e2823001 	add	r3, r2, #1
  1182e4:	e50b3008 	str	r3, [fp, #-8]
  1182e8:	e24b3016 	sub	r3, fp, #22
  1182ec:	e2833001 	add	r3, r3, #1
  1182f0:	e5d22000 	ldrb	r2, [r2]
  1182f4:	e5c32000 	strb	r2, [r3]
    len--;
  1182f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1182fc:	e2433001 	sub	r3, r3, #1
  118300:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  118304:	e51b3008 	ldr	r3, [fp, #-8]
  118308:	e50b300c 	str	r3, [fp, #-12]
  while (len > 1) {
  11830c:	ea00000a 	b	11833c <lwip_standard_chksum+0xb0>
    sum += *ps++;
  118310:	e51b300c 	ldr	r3, [fp, #-12]
  118314:	e2832002 	add	r2, r3, #2
  118318:	e50b200c 	str	r2, [fp, #-12]
  11831c:	e1d330b0 	ldrh	r3, [r3]
  118320:	e1a02003 	mov	r2, r3
  118324:	e51b3010 	ldr	r3, [fp, #-16]
  118328:	e0833002 	add	r3, r3, r2
  11832c:	e50b3010 	str	r3, [fp, #-16]
    len -= 2;
  118330:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118334:	e2433002 	sub	r3, r3, #2
  118338:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  while (len > 1) {
  11833c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118340:	e3530001 	cmp	r3, #1
  118344:	cafffff1 	bgt	118310 <lwip_standard_chksum+0x84>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  118348:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11834c:	e3530000 	cmp	r3, #0
  118350:	da000003 	ble	118364 <lwip_standard_chksum+0xd8>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
  118354:	e24b3016 	sub	r3, fp, #22
  118358:	e51b200c 	ldr	r2, [fp, #-12]
  11835c:	e5d22000 	ldrb	r2, [r2]
  118360:	e5c32000 	strb	r2, [r3]
  }

  /* Add end bytes */
  sum += t;
  118364:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118368:	e1a02003 	mov	r2, r3
  11836c:	e51b3010 	ldr	r3, [fp, #-16]
  118370:	e0833002 	add	r3, r3, r2
  118374:	e50b3010 	str	r3, [fp, #-16]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
  118378:	e51b3010 	ldr	r3, [fp, #-16]
  11837c:	e1a02823 	lsr	r2, r3, #16
  118380:	e51b3010 	ldr	r3, [fp, #-16]
  118384:	e6ff3073 	uxth	r3, r3
  118388:	e0823003 	add	r3, r2, r3
  11838c:	e50b3010 	str	r3, [fp, #-16]
  sum = FOLD_U32T(sum);
  118390:	e51b3010 	ldr	r3, [fp, #-16]
  118394:	e1a02823 	lsr	r2, r3, #16
  118398:	e51b3010 	ldr	r3, [fp, #-16]
  11839c:	e6ff3073 	uxth	r3, r3
  1183a0:	e0823003 	add	r3, r2, r3
  1183a4:	e50b3010 	str	r3, [fp, #-16]

  /* Swap if alignment was odd */
  if (odd) {
  1183a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1183ac:	e3530000 	cmp	r3, #0
  1183b0:	0a000007 	beq	1183d4 <lwip_standard_chksum+0x148>
    sum = SWAP_BYTES_IN_WORD(sum);
  1183b4:	e51b3010 	ldr	r3, [fp, #-16]
  1183b8:	e1a03403 	lsl	r3, r3, #8
  1183bc:	e6ff2073 	uxth	r2, r3
  1183c0:	e51b3010 	ldr	r3, [fp, #-16]
  1183c4:	e1a03423 	lsr	r3, r3, #8
  1183c8:	e6ef3073 	uxtb	r3, r3
  1183cc:	e1823003 	orr	r3, r2, r3
  1183d0:	e50b3010 	str	r3, [fp, #-16]
  }

  return (u16_t)sum;
  1183d4:	e51b3010 	ldr	r3, [fp, #-16]
  1183d8:	e6ff3073 	uxth	r3, r3
}
  1183dc:	e1a00003 	mov	r0, r3
  1183e0:	e28bd000 	add	sp, fp, #0
  1183e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1183e8:	e12fff1e 	bx	lr

001183ec <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
  1183ec:	e92d4800 	push	{fp, lr}
  1183f0:	e28db004 	add	fp, sp, #4
  1183f4:	e24dd018 	sub	sp, sp, #24
  1183f8:	e50b0010 	str	r0, [fp, #-16]
  1183fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  118400:	e1a03001 	mov	r3, r1
  118404:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118408:	e1a03002 	mov	r3, r2
  11840c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  u8_t swapped = 0;
  118410:	e3a03000 	mov	r3, #0
  118414:	e54b3009 	strb	r3, [fp, #-9]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
  118418:	e51b3010 	ldr	r3, [fp, #-16]
  11841c:	e50b3008 	str	r3, [fp, #-8]
  118420:	ea000025 	b	1184bc <inet_cksum_pseudo_base+0xd0>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  118424:	e51b3008 	ldr	r3, [fp, #-8]
  118428:	e5932004 	ldr	r2, [r3, #4]
  11842c:	e51b3008 	ldr	r3, [fp, #-8]
  118430:	e1d330ba 	ldrh	r3, [r3, #10]
  118434:	e1a01003 	mov	r1, r3
  118438:	e1a00002 	mov	r0, r2
  11843c:	ebffff92 	bl	11828c <lwip_standard_chksum>
  118440:	e1a03000 	mov	r3, r0
  118444:	e1a02003 	mov	r2, r3
  118448:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11844c:	e0833002 	add	r3, r3, r2
  118450:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  118454:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118458:	e1a02823 	lsr	r2, r3, #16
  11845c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118460:	e6ff3073 	uxth	r3, r3
  118464:	e0823003 	add	r3, r2, r3
  118468:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (q->len % 2 != 0) {
  11846c:	e51b3008 	ldr	r3, [fp, #-8]
  118470:	e1d330ba 	ldrh	r3, [r3, #10]
  118474:	e2033001 	and	r3, r3, #1
  118478:	e6ff3073 	uxth	r3, r3
  11847c:	e3530000 	cmp	r3, #0
  118480:	0a00000a 	beq	1184b0 <inet_cksum_pseudo_base+0xc4>
      swapped = 1 - swapped;
  118484:	e55b3009 	ldrb	r3, [fp, #-9]
  118488:	e2633001 	rsb	r3, r3, #1
  11848c:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  118490:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118494:	e1a03403 	lsl	r3, r3, #8
  118498:	e6ff2073 	uxth	r2, r3
  11849c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1184a0:	e1a03423 	lsr	r3, r3, #8
  1184a4:	e6ef3073 	uxtb	r3, r3
  1184a8:	e1823003 	orr	r3, r2, r3
  1184ac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  for (q = p; q != NULL; q = q->next) {
  1184b0:	e51b3008 	ldr	r3, [fp, #-8]
  1184b4:	e5933000 	ldr	r3, [r3]
  1184b8:	e50b3008 	str	r3, [fp, #-8]
  1184bc:	e51b3008 	ldr	r3, [fp, #-8]
  1184c0:	e3530000 	cmp	r3, #0
  1184c4:	1affffd6 	bne	118424 <inet_cksum_pseudo_base+0x38>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  1184c8:	e55b3009 	ldrb	r3, [fp, #-9]
  1184cc:	e3530000 	cmp	r3, #0
  1184d0:	0a000007 	beq	1184f4 <inet_cksum_pseudo_base+0x108>
    acc = SWAP_BYTES_IN_WORD(acc);
  1184d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1184d8:	e1a03403 	lsl	r3, r3, #8
  1184dc:	e6ff2073 	uxth	r2, r3
  1184e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1184e4:	e1a03423 	lsr	r3, r3, #8
  1184e8:	e6ef3073 	uxtb	r3, r3
  1184ec:	e1823003 	orr	r3, r2, r3
  1184f0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  1184f4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1184f8:	e6ff3073 	uxth	r3, r3
  1184fc:	e1a00003 	mov	r0, r3
  118500:	ebfff836 	bl	1165e0 <lwip_htons>
  118504:	e1a03000 	mov	r3, r0
  118508:	e1a02003 	mov	r2, r3
  11850c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118510:	e0833002 	add	r3, r3, r2
  118514:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc += (u32_t)lwip_htons(proto_len);
  118518:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11851c:	e1a00003 	mov	r0, r3
  118520:	ebfff82e 	bl	1165e0 <lwip_htons>
  118524:	e1a03000 	mov	r3, r0
  118528:	e1a02003 	mov	r2, r3
  11852c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118530:	e0833002 	add	r3, r3, r2
  118534:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  118538:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11853c:	e1a02823 	lsr	r2, r3, #16
  118540:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118544:	e6ff3073 	uxth	r3, r3
  118548:	e0823003 	add	r3, r2, r3
  11854c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc = FOLD_U32T(acc);
  118550:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118554:	e1a02823 	lsr	r2, r3, #16
  118558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11855c:	e6ff3073 	uxth	r3, r3
  118560:	e0823003 	add	r3, r2, r3
  118564:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  118568:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11856c:	e6ff3073 	uxth	r3, r3
  118570:	e1e03003 	mvn	r3, r3
  118574:	e6ff3073 	uxth	r3, r3
}
  118578:	e1a00003 	mov	r0, r3
  11857c:	e24bd004 	sub	sp, fp, #4
  118580:	e8bd8800 	pop	{fp, pc}

00118584 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip4_addr_t *src, const ip4_addr_t *dest)
{
  118584:	e92d4800 	push	{fp, lr}
  118588:	e28db004 	add	fp, sp, #4
  11858c:	e24dd018 	sub	sp, sp, #24
  118590:	e50b0010 	str	r0, [fp, #-16]
  118594:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  118598:	e1a03001 	mov	r3, r1
  11859c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  1185a0:	e1a03002 	mov	r3, r2
  1185a4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  1185a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1185ac:	e5933000 	ldr	r3, [r3]
  1185b0:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  1185b4:	e51b3008 	ldr	r3, [fp, #-8]
  1185b8:	e6ff3073 	uxth	r3, r3
  1185bc:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  1185c0:	e51b3008 	ldr	r3, [fp, #-8]
  1185c4:	e1a03823 	lsr	r3, r3, #16
  1185c8:	e51b200c 	ldr	r2, [fp, #-12]
  1185cc:	e0823003 	add	r3, r2, r3
  1185d0:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  1185d4:	e59b3004 	ldr	r3, [fp, #4]
  1185d8:	e5933000 	ldr	r3, [r3]
  1185dc:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  1185e0:	e51b3008 	ldr	r3, [fp, #-8]
  1185e4:	e6ff3073 	uxth	r3, r3
  1185e8:	e51b200c 	ldr	r2, [fp, #-12]
  1185ec:	e0823003 	add	r3, r2, r3
  1185f0:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  1185f4:	e51b3008 	ldr	r3, [fp, #-8]
  1185f8:	e1a03823 	lsr	r3, r3, #16
  1185fc:	e51b200c 	ldr	r2, [fp, #-12]
  118600:	e0823003 	add	r3, r2, r3
  118604:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  118608:	e51b300c 	ldr	r3, [fp, #-12]
  11860c:	e1a02823 	lsr	r2, r3, #16
  118610:	e51b300c 	ldr	r3, [fp, #-12]
  118614:	e6ff3073 	uxth	r3, r3
  118618:	e0823003 	add	r3, r2, r3
  11861c:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  118620:	e51b300c 	ldr	r3, [fp, #-12]
  118624:	e1a02823 	lsr	r2, r3, #16
  118628:	e51b300c 	ldr	r3, [fp, #-12]
  11862c:	e6ff3073 	uxth	r3, r3
  118630:	e0823003 	add	r3, r2, r3
  118634:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
  118638:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  11863c:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  118640:	e51b300c 	ldr	r3, [fp, #-12]
  118644:	e51b0010 	ldr	r0, [fp, #-16]
  118648:	ebffff67 	bl	1183ec <inet_cksum_pseudo_base>
  11864c:	e1a03000 	mov	r3, r0
}
  118650:	e1a00003 	mov	r0, r3
  118654:	e24bd004 	sub	sp, fp, #4
  118658:	e8bd8800 	pop	{fp, pc}

0011865c <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip_addr_t *src, const ip_addr_t *dest)
{
  11865c:	e92d4800 	push	{fp, lr}
  118660:	e28db004 	add	fp, sp, #4
  118664:	e24dd018 	sub	sp, sp, #24
  118668:	e50b0008 	str	r0, [fp, #-8]
  11866c:	e50b3010 	str	r3, [fp, #-16]
  118670:	e1a03001 	mov	r3, r1
  118674:	e54b3009 	strb	r3, [fp, #-9]
  118678:	e1a03002 	mov	r3, r2
  11867c:	e14b30bc 	strh	r3, [fp, #-12]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  118680:	e15b20bc 	ldrh	r2, [fp, #-12]
  118684:	e55b1009 	ldrb	r1, [fp, #-9]
  118688:	e59b3004 	ldr	r3, [fp, #4]
  11868c:	e58d3000 	str	r3, [sp]
  118690:	e51b3010 	ldr	r3, [fp, #-16]
  118694:	e51b0008 	ldr	r0, [fp, #-8]
  118698:	ebffffb9 	bl	118584 <inet_chksum_pseudo>
  11869c:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  1186a0:	e1a00003 	mov	r0, r3
  1186a4:	e24bd004 	sub	sp, fp, #4
  1186a8:	e8bd8800 	pop	{fp, pc}

001186ac <inet_cksum_pseudo_partial_base>:

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_partial_base(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, u32_t acc)
{
  1186ac:	e92d4800 	push	{fp, lr}
  1186b0:	e28db004 	add	fp, sp, #4
  1186b4:	e24dd018 	sub	sp, sp, #24
  1186b8:	e50b0010 	str	r0, [fp, #-16]
  1186bc:	e1a00001 	mov	r0, r1
  1186c0:	e1a01002 	mov	r1, r2
  1186c4:	e1a02003 	mov	r2, r3
  1186c8:	e1a03000 	mov	r3, r0
  1186cc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  1186d0:	e1a03001 	mov	r3, r1
  1186d4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  1186d8:	e1a03002 	mov	r3, r2
  1186dc:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct pbuf *q;
  u8_t swapped = 0;
  1186e0:	e3a03000 	mov	r3, #0
  1186e4:	e54b3009 	strb	r3, [fp, #-9]
  u16_t chklen;

  /* iterate through all pbuf in chain */
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  1186e8:	e51b3010 	ldr	r3, [fp, #-16]
  1186ec:	e50b3008 	str	r3, [fp, #-8]
  1186f0:	ea00003c 	b	1187e8 <inet_cksum_pseudo_partial_base+0x13c>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    chklen = q->len;
  1186f4:	e51b3008 	ldr	r3, [fp, #-8]
  1186f8:	e1d330ba 	ldrh	r3, [r3, #10]
  1186fc:	e14b30bc 	strh	r3, [fp, #-12]
    if (chklen > chksum_len) {
  118700:	e15b20bc 	ldrh	r2, [fp, #-12]
  118704:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118708:	e1520003 	cmp	r2, r3
  11870c:	9a000001 	bls	118718 <inet_cksum_pseudo_partial_base+0x6c>
      chklen = chksum_len;
  118710:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118714:	e14b30bc 	strh	r3, [fp, #-12]
    }
    acc += LWIP_CHKSUM(q->payload, chklen);
  118718:	e51b3008 	ldr	r3, [fp, #-8]
  11871c:	e5933004 	ldr	r3, [r3, #4]
  118720:	e15b20bc 	ldrh	r2, [fp, #-12]
  118724:	e1a01002 	mov	r1, r2
  118728:	e1a00003 	mov	r0, r3
  11872c:	ebfffed6 	bl	11828c <lwip_standard_chksum>
  118730:	e1a03000 	mov	r3, r0
  118734:	e1a02003 	mov	r2, r3
  118738:	e59b3004 	ldr	r3, [fp, #4]
  11873c:	e0833002 	add	r3, r3, r2
  118740:	e58b3004 	str	r3, [fp, #4]
    chksum_len -= chklen;
  118744:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  118748:	e15b30bc 	ldrh	r3, [fp, #-12]
  11874c:	e0423003 	sub	r3, r2, r3
  118750:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
  118754:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118758:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  11875c:	e1530002 	cmp	r3, r2
  118760:	9a000006 	bls	118780 <inet_cksum_pseudo_partial_base+0xd4>
  118764:	e3070100 	movw	r0, #28928	; 0x7100
  118768:	e3400014 	movt	r0, #20
  11876c:	ebffaa68 	bl	103114 <rt_kprintf>
  118770:	e3a01e1a 	mov	r1, #416	; 0x1a0
  118774:	e307010c 	movw	r0, #28940	; 0x710c
  118778:	e3400014 	movt	r0, #20
  11877c:	ebffca5b 	bl	10b0f0 <sys_arch_assert>
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* fold the upper bit down */
    acc = FOLD_U32T(acc);
  118780:	e59b3004 	ldr	r3, [fp, #4]
  118784:	e1a02823 	lsr	r2, r3, #16
  118788:	e59b3004 	ldr	r3, [fp, #4]
  11878c:	e6ff3073 	uxth	r3, r3
  118790:	e0823003 	add	r3, r2, r3
  118794:	e58b3004 	str	r3, [fp, #4]
    if (q->len % 2 != 0) {
  118798:	e51b3008 	ldr	r3, [fp, #-8]
  11879c:	e1d330ba 	ldrh	r3, [r3, #10]
  1187a0:	e2033001 	and	r3, r3, #1
  1187a4:	e6ff3073 	uxth	r3, r3
  1187a8:	e3530000 	cmp	r3, #0
  1187ac:	0a00000a 	beq	1187dc <inet_cksum_pseudo_partial_base+0x130>
      swapped = 1 - swapped;
  1187b0:	e55b3009 	ldrb	r3, [fp, #-9]
  1187b4:	e2633001 	rsb	r3, r3, #1
  1187b8:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  1187bc:	e59b3004 	ldr	r3, [fp, #4]
  1187c0:	e1a03403 	lsl	r3, r3, #8
  1187c4:	e6ff2073 	uxth	r2, r3
  1187c8:	e59b3004 	ldr	r3, [fp, #4]
  1187cc:	e1a03423 	lsr	r3, r3, #8
  1187d0:	e6ef3073 	uxtb	r3, r3
  1187d4:	e1823003 	orr	r3, r2, r3
  1187d8:	e58b3004 	str	r3, [fp, #4]
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  1187dc:	e51b3008 	ldr	r3, [fp, #-8]
  1187e0:	e5933000 	ldr	r3, [r3]
  1187e4:	e50b3008 	str	r3, [fp, #-8]
  1187e8:	e51b3008 	ldr	r3, [fp, #-8]
  1187ec:	e3530000 	cmp	r3, #0
  1187f0:	0a000002 	beq	118800 <inet_cksum_pseudo_partial_base+0x154>
  1187f4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1187f8:	e3530000 	cmp	r3, #0
  1187fc:	1affffbc 	bne	1186f4 <inet_cksum_pseudo_partial_base+0x48>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  118800:	e55b3009 	ldrb	r3, [fp, #-9]
  118804:	e3530000 	cmp	r3, #0
  118808:	0a000007 	beq	11882c <inet_cksum_pseudo_partial_base+0x180>
    acc = SWAP_BYTES_IN_WORD(acc);
  11880c:	e59b3004 	ldr	r3, [fp, #4]
  118810:	e1a03403 	lsl	r3, r3, #8
  118814:	e6ff2073 	uxth	r2, r3
  118818:	e59b3004 	ldr	r3, [fp, #4]
  11881c:	e1a03423 	lsr	r3, r3, #8
  118820:	e6ef3073 	uxtb	r3, r3
  118824:	e1823003 	orr	r3, r2, r3
  118828:	e58b3004 	str	r3, [fp, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  11882c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  118830:	e6ff3073 	uxth	r3, r3
  118834:	e1a00003 	mov	r0, r3
  118838:	ebfff768 	bl	1165e0 <lwip_htons>
  11883c:	e1a03000 	mov	r3, r0
  118840:	e1a02003 	mov	r2, r3
  118844:	e59b3004 	ldr	r3, [fp, #4]
  118848:	e0833002 	add	r3, r3, r2
  11884c:	e58b3004 	str	r3, [fp, #4]
  acc += (u32_t)lwip_htons(proto_len);
  118850:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  118854:	e1a00003 	mov	r0, r3
  118858:	ebfff760 	bl	1165e0 <lwip_htons>
  11885c:	e1a03000 	mov	r3, r0
  118860:	e1a02003 	mov	r2, r3
  118864:	e59b3004 	ldr	r3, [fp, #4]
  118868:	e0833002 	add	r3, r3, r2
  11886c:	e58b3004 	str	r3, [fp, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  118870:	e59b3004 	ldr	r3, [fp, #4]
  118874:	e1a02823 	lsr	r2, r3, #16
  118878:	e59b3004 	ldr	r3, [fp, #4]
  11887c:	e6ff3073 	uxth	r3, r3
  118880:	e0823003 	add	r3, r2, r3
  118884:	e58b3004 	str	r3, [fp, #4]
  acc = FOLD_U32T(acc);
  118888:	e59b3004 	ldr	r3, [fp, #4]
  11888c:	e1a02823 	lsr	r2, r3, #16
  118890:	e59b3004 	ldr	r3, [fp, #4]
  118894:	e6ff3073 	uxth	r3, r3
  118898:	e0823003 	add	r3, r2, r3
  11889c:	e58b3004 	str	r3, [fp, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  1188a0:	e59b3004 	ldr	r3, [fp, #4]
  1188a4:	e6ff3073 	uxth	r3, r3
  1188a8:	e1e03003 	mvn	r3, r3
  1188ac:	e6ff3073 	uxth	r3, r3
}
  1188b0:	e1a00003 	mov	r0, r3
  1188b4:	e24bd004 	sub	sp, fp, #4
  1188b8:	e8bd8800 	pop	{fp, pc}

001188bc <inet_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip4_addr_t *src, const ip4_addr_t *dest)
{
  1188bc:	e92d4800 	push	{fp, lr}
  1188c0:	e28db004 	add	fp, sp, #4
  1188c4:	e24dd020 	sub	sp, sp, #32
  1188c8:	e50b0010 	str	r0, [fp, #-16]
  1188cc:	e1a00001 	mov	r0, r1
  1188d0:	e1a01002 	mov	r1, r2
  1188d4:	e1a02003 	mov	r2, r3
  1188d8:	e1a03000 	mov	r3, r0
  1188dc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  1188e0:	e1a03001 	mov	r3, r1
  1188e4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  1188e8:	e1a03002 	mov	r3, r2
  1188ec:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  1188f0:	e59b3004 	ldr	r3, [fp, #4]
  1188f4:	e5933000 	ldr	r3, [r3]
  1188f8:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  1188fc:	e51b3008 	ldr	r3, [fp, #-8]
  118900:	e6ff3073 	uxth	r3, r3
  118904:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  118908:	e51b3008 	ldr	r3, [fp, #-8]
  11890c:	e1a03823 	lsr	r3, r3, #16
  118910:	e51b200c 	ldr	r2, [fp, #-12]
  118914:	e0823003 	add	r3, r2, r3
  118918:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  11891c:	e59b3008 	ldr	r3, [fp, #8]
  118920:	e5933000 	ldr	r3, [r3]
  118924:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  118928:	e51b3008 	ldr	r3, [fp, #-8]
  11892c:	e6ff3073 	uxth	r3, r3
  118930:	e51b200c 	ldr	r2, [fp, #-12]
  118934:	e0823003 	add	r3, r2, r3
  118938:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  11893c:	e51b3008 	ldr	r3, [fp, #-8]
  118940:	e1a03823 	lsr	r3, r3, #16
  118944:	e51b200c 	ldr	r2, [fp, #-12]
  118948:	e0823003 	add	r3, r2, r3
  11894c:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  118950:	e51b300c 	ldr	r3, [fp, #-12]
  118954:	e1a02823 	lsr	r2, r3, #16
  118958:	e51b300c 	ldr	r3, [fp, #-12]
  11895c:	e6ff3073 	uxth	r3, r3
  118960:	e0823003 	add	r3, r2, r3
  118964:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  118968:	e51b300c 	ldr	r3, [fp, #-12]
  11896c:	e1a02823 	lsr	r2, r3, #16
  118970:	e51b300c 	ldr	r3, [fp, #-12]
  118974:	e6ff3073 	uxth	r3, r3
  118978:	e0823003 	add	r3, r2, r3
  11897c:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_partial_base(p, proto, proto_len, chksum_len, acc);
  118980:	e15b01b6 	ldrh	r0, [fp, #-22]	; 0xffffffea
  118984:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  118988:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  11898c:	e51b300c 	ldr	r3, [fp, #-12]
  118990:	e58d3000 	str	r3, [sp]
  118994:	e1a03000 	mov	r3, r0
  118998:	e51b0010 	ldr	r0, [fp, #-16]
  11899c:	ebffff42 	bl	1186ac <inet_cksum_pseudo_partial_base>
  1189a0:	e1a03000 	mov	r3, r0
}
  1189a4:	e1a00003 	mov	r0, r3
  1189a8:	e24bd004 	sub	sp, fp, #4
  1189ac:	e8bd8800 	pop	{fp, pc}

001189b0 <ip_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip_addr_t *src, const ip_addr_t *dest)
{
  1189b0:	e92d4800 	push	{fp, lr}
  1189b4:	e28db004 	add	fp, sp, #4
  1189b8:	e24dd018 	sub	sp, sp, #24
  1189bc:	e50b0008 	str	r0, [fp, #-8]
  1189c0:	e1a00001 	mov	r0, r1
  1189c4:	e1a01002 	mov	r1, r2
  1189c8:	e1a02003 	mov	r2, r3
  1189cc:	e1a03000 	mov	r3, r0
  1189d0:	e54b3009 	strb	r3, [fp, #-9]
  1189d4:	e1a03001 	mov	r3, r1
  1189d8:	e14b30bc 	strh	r3, [fp, #-12]
  1189dc:	e1a03002 	mov	r3, r2
  1189e0:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo_partial(p, proto, proto_len, chksum_len, ip_2_ip4(src), ip_2_ip4(dest));
  1189e4:	e15b00be 	ldrh	r0, [fp, #-14]
  1189e8:	e15b20bc 	ldrh	r2, [fp, #-12]
  1189ec:	e55b1009 	ldrb	r1, [fp, #-9]
  1189f0:	e59b3008 	ldr	r3, [fp, #8]
  1189f4:	e58d3004 	str	r3, [sp, #4]
  1189f8:	e59b3004 	ldr	r3, [fp, #4]
  1189fc:	e58d3000 	str	r3, [sp]
  118a00:	e1a03000 	mov	r3, r0
  118a04:	e51b0008 	ldr	r0, [fp, #-8]
  118a08:	ebffffab 	bl	1188bc <inet_chksum_pseudo_partial>
  118a0c:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  118a10:	e1a00003 	mov	r0, r3
  118a14:	e24bd004 	sub	sp, fp, #4
  118a18:	e8bd8800 	pop	{fp, pc}

00118a1c <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
  118a1c:	e92d4800 	push	{fp, lr}
  118a20:	e28db004 	add	fp, sp, #4
  118a24:	e24dd008 	sub	sp, sp, #8
  118a28:	e50b0008 	str	r0, [fp, #-8]
  118a2c:	e1a03001 	mov	r3, r1
  118a30:	e14b30ba 	strh	r3, [fp, #-10]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
  118a34:	e15b30ba 	ldrh	r3, [fp, #-10]
  118a38:	e1a01003 	mov	r1, r3
  118a3c:	e51b0008 	ldr	r0, [fp, #-8]
  118a40:	ebfffe11 	bl	11828c <lwip_standard_chksum>
  118a44:	e1a03000 	mov	r3, r0
  118a48:	e1e03003 	mvn	r3, r3
  118a4c:	e6ff3073 	uxth	r3, r3
}
  118a50:	e1a00003 	mov	r0, r3
  118a54:	e24bd004 	sub	sp, fp, #4
  118a58:	e8bd8800 	pop	{fp, pc}

00118a5c <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  118a5c:	e92d4800 	push	{fp, lr}
  118a60:	e28db004 	add	fp, sp, #4
  118a64:	e24dd018 	sub	sp, sp, #24
  118a68:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  118a6c:	e3a03000 	mov	r3, #0
  118a70:	e50b3008 	str	r3, [fp, #-8]
  swapped = 0;
  118a74:	e3a03000 	mov	r3, #0
  118a78:	e54b300d 	strb	r3, [fp, #-13]
  for (q = p; q != NULL; q = q->next) {
  118a7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118a80:	e50b300c 	str	r3, [fp, #-12]
  118a84:	ea000025 	b	118b20 <inet_chksum_pbuf+0xc4>
    acc += LWIP_CHKSUM(q->payload, q->len);
  118a88:	e51b300c 	ldr	r3, [fp, #-12]
  118a8c:	e5932004 	ldr	r2, [r3, #4]
  118a90:	e51b300c 	ldr	r3, [fp, #-12]
  118a94:	e1d330ba 	ldrh	r3, [r3, #10]
  118a98:	e1a01003 	mov	r1, r3
  118a9c:	e1a00002 	mov	r0, r2
  118aa0:	ebfffdf9 	bl	11828c <lwip_standard_chksum>
  118aa4:	e1a03000 	mov	r3, r0
  118aa8:	e1a02003 	mov	r2, r3
  118aac:	e51b3008 	ldr	r3, [fp, #-8]
  118ab0:	e0833002 	add	r3, r3, r2
  118ab4:	e50b3008 	str	r3, [fp, #-8]
    acc = FOLD_U32T(acc);
  118ab8:	e51b3008 	ldr	r3, [fp, #-8]
  118abc:	e1a02823 	lsr	r2, r3, #16
  118ac0:	e51b3008 	ldr	r3, [fp, #-8]
  118ac4:	e6ff3073 	uxth	r3, r3
  118ac8:	e0823003 	add	r3, r2, r3
  118acc:	e50b3008 	str	r3, [fp, #-8]
    if (q->len % 2 != 0) {
  118ad0:	e51b300c 	ldr	r3, [fp, #-12]
  118ad4:	e1d330ba 	ldrh	r3, [r3, #10]
  118ad8:	e2033001 	and	r3, r3, #1
  118adc:	e6ff3073 	uxth	r3, r3
  118ae0:	e3530000 	cmp	r3, #0
  118ae4:	0a00000a 	beq	118b14 <inet_chksum_pbuf+0xb8>
      swapped = 1 - swapped;
  118ae8:	e55b300d 	ldrb	r3, [fp, #-13]
  118aec:	e2633001 	rsb	r3, r3, #1
  118af0:	e54b300d 	strb	r3, [fp, #-13]
      acc = SWAP_BYTES_IN_WORD(acc);
  118af4:	e51b3008 	ldr	r3, [fp, #-8]
  118af8:	e1a03403 	lsl	r3, r3, #8
  118afc:	e6ff2073 	uxth	r2, r3
  118b00:	e51b3008 	ldr	r3, [fp, #-8]
  118b04:	e1a03423 	lsr	r3, r3, #8
  118b08:	e6ef3073 	uxtb	r3, r3
  118b0c:	e1823003 	orr	r3, r2, r3
  118b10:	e50b3008 	str	r3, [fp, #-8]
  for (q = p; q != NULL; q = q->next) {
  118b14:	e51b300c 	ldr	r3, [fp, #-12]
  118b18:	e5933000 	ldr	r3, [r3]
  118b1c:	e50b300c 	str	r3, [fp, #-12]
  118b20:	e51b300c 	ldr	r3, [fp, #-12]
  118b24:	e3530000 	cmp	r3, #0
  118b28:	1affffd6 	bne	118a88 <inet_chksum_pbuf+0x2c>
    }
  }

  if (swapped) {
  118b2c:	e55b300d 	ldrb	r3, [fp, #-13]
  118b30:	e3530000 	cmp	r3, #0
  118b34:	0a000007 	beq	118b58 <inet_chksum_pbuf+0xfc>
    acc = SWAP_BYTES_IN_WORD(acc);
  118b38:	e51b3008 	ldr	r3, [fp, #-8]
  118b3c:	e1a03403 	lsl	r3, r3, #8
  118b40:	e6ff2073 	uxth	r2, r3
  118b44:	e51b3008 	ldr	r3, [fp, #-8]
  118b48:	e1a03423 	lsr	r3, r3, #8
  118b4c:	e6ef3073 	uxtb	r3, r3
  118b50:	e1823003 	orr	r3, r2, r3
  118b54:	e50b3008 	str	r3, [fp, #-8]
  }
  return (u16_t)~(acc & 0xffffUL);
  118b58:	e51b3008 	ldr	r3, [fp, #-8]
  118b5c:	e6ff3073 	uxth	r3, r3
  118b60:	e1e03003 	mvn	r3, r3
  118b64:	e6ff3073 	uxth	r3, r3
}
  118b68:	e1a00003 	mov	r0, r3
  118b6c:	e24bd004 	sub	sp, fp, #4
  118b70:	e8bd8800 	pop	{fp, pc}

00118b74 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
  118b74:	e92d4800 	push	{fp, lr}
  118b78:	e28db004 	add	fp, sp, #4
  118b7c:	e24dd008 	sub	sp, sp, #8
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
  118b80:	eb000f7b 	bl	11c974 <stats_init>
#if !NO_SYS
  sys_init();
  118b84:	ebffc721 	bl	10a810 <sys_init>
#endif /* !NO_SYS */
  mem_init();
  118b88:	ebffc977 	bl	10b16c <mem_init>
  memp_init();
  118b8c:	eb0000c6 	bl	118eac <memp_init>
  pbuf_init();
  netif_init();
  118b90:	eb0001d9 	bl	1192fc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  118b94:	eb003b7f 	bl	127998 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  118b98:	eb001109 	bl	11cfc4 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
  118b9c:	eb005cdc 	bl	12ff14 <igmp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
  118ba0:	ebfff78e 	bl	1169e0 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
  118ba4:	eb0039d6 	bl	127304 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
  118ba8:	e320f000 	nop	{0}
  118bac:	e24bd004 	sub	sp, fp, #4
  118bb0:	e8bd8800 	pop	{fp, pc}

00118bb4 <memp_overflow_check_element_overflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_overflow(struct memp *p, const struct memp_desc *desc)
{
  118bb4:	e92d4800 	push	{fp, lr}
  118bb8:	e28db004 	add	fp, sp, #4
  118bbc:	e24dd090 	sub	sp, sp, #144	; 0x90
  118bc0:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  118bc4:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  118bc8:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118bcc:	e1d330b8 	ldrh	r3, [r3, #8]
  118bd0:	e283301c 	add	r3, r3, #28
  118bd4:	e51b2090 	ldr	r2, [fp, #-144]	; 0xffffff70
  118bd8:	e0823003 	add	r3, r2, r3
  118bdc:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  118be0:	e3a03000 	mov	r3, #0
  118be4:	e14b30b6 	strh	r3, [fp, #-6]
  118be8:	ea000022 	b	118c78 <memp_overflow_check_element_overflow+0xc4>
    if (m[k] != 0xcd) {
  118bec:	e15b30b6 	ldrh	r3, [fp, #-6]
  118bf0:	e51b200c 	ldr	r2, [fp, #-12]
  118bf4:	e0823003 	add	r3, r2, r3
  118bf8:	e5d33000 	ldrb	r3, [r3]
  118bfc:	e35300cd 	cmp	r3, #205	; 0xcd
  118c00:	0a000019 	beq	118c6c <memp_overflow_check_element_overflow+0xb8>
      char errstr[128] = "detected memp overflow in pool ";
  118c04:	e30733c4 	movw	r3, #29636	; 0x73c4
  118c08:	e3403014 	movt	r3, #20
  118c0c:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  118c10:	e1a0e003 	mov	lr, r3
  118c14:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118c18:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118c1c:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  118c20:	e88c000f 	stm	ip, {r0, r1, r2, r3}
  118c24:	e24b306c 	sub	r3, fp, #108	; 0x6c
  118c28:	e3a02060 	mov	r2, #96	; 0x60
  118c2c:	e3a01000 	mov	r1, #0
  118c30:	e1a00003 	mov	r0, r3
  118c34:	eb00a190 	bl	14127c <memset>
      strcat(errstr, desc->desc);
  118c38:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118c3c:	e5932000 	ldr	r2, [r3]
  118c40:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118c44:	e1a01002 	mov	r1, r2
  118c48:	e1a00003 	mov	r0, r3
  118c4c:	eb00a1f0 	bl	141414 <strcat>
      LWIP_ASSERT(errstr, 0);
  118c50:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118c54:	e1a00003 	mov	r0, r3
  118c58:	ebffa92d 	bl	103114 <rt_kprintf>
  118c5c:	e3a0108a 	mov	r1, #138	; 0x8a
  118c60:	e3070398 	movw	r0, #29592	; 0x7398
  118c64:	e3400014 	movt	r0, #20
  118c68:	ebffc920 	bl	10b0f0 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  118c6c:	e15b30b6 	ldrh	r3, [fp, #-6]
  118c70:	e2833001 	add	r3, r3, #1
  118c74:	e14b30b6 	strh	r3, [fp, #-6]
  118c78:	e15b30b6 	ldrh	r3, [fp, #-6]
  118c7c:	e353000f 	cmp	r3, #15
  118c80:	9affffd9 	bls	118bec <memp_overflow_check_element_overflow+0x38>
  }
#else /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  118c84:	e320f000 	nop	{0}
  118c88:	e24bd004 	sub	sp, fp, #4
  118c8c:	e8bd8800 	pop	{fp, pc}

00118c90 <memp_overflow_check_element_underflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_underflow(struct memp *p, const struct memp_desc *desc)
{
  118c90:	e92d4800 	push	{fp, lr}
  118c94:	e28db004 	add	fp, sp, #4
  118c98:	e24dd090 	sub	sp, sp, #144	; 0x90
  118c9c:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  118ca0:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  118ca4:	e51b3090 	ldr	r3, [fp, #-144]	; 0xffffff70
  118ca8:	e283300c 	add	r3, r3, #12
  118cac:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  118cb0:	e3a03000 	mov	r3, #0
  118cb4:	e14b30b6 	strh	r3, [fp, #-6]
  118cb8:	ea000024 	b	118d50 <memp_overflow_check_element_underflow+0xc0>
    if (m[k] != 0xcd) {
  118cbc:	e15b30b6 	ldrh	r3, [fp, #-6]
  118cc0:	e51b200c 	ldr	r2, [fp, #-12]
  118cc4:	e0823003 	add	r3, r2, r3
  118cc8:	e5d33000 	ldrb	r3, [r3]
  118ccc:	e35300cd 	cmp	r3, #205	; 0xcd
  118cd0:	0a00001b 	beq	118d44 <memp_overflow_check_element_underflow+0xb4>
      char errstr[128] = "detected memp underflow in pool ";
  118cd4:	e3073444 	movw	r3, #29764	; 0x7444
  118cd8:	e3403014 	movt	r3, #20
  118cdc:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  118ce0:	e1a0e003 	mov	lr, r3
  118ce4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118ce8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118cec:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118cf0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118cf4:	e59e3000 	ldr	r3, [lr]
  118cf8:	e5cc3000 	strb	r3, [ip]
  118cfc:	e24b306b 	sub	r3, fp, #107	; 0x6b
  118d00:	e3a0205f 	mov	r2, #95	; 0x5f
  118d04:	e3a01000 	mov	r1, #0
  118d08:	e1a00003 	mov	r0, r3
  118d0c:	eb00a15a 	bl	14127c <memset>
      strcat(errstr, desc->desc);
  118d10:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118d14:	e5932000 	ldr	r2, [r3]
  118d18:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118d1c:	e1a01002 	mov	r1, r2
  118d20:	e1a00003 	mov	r0, r3
  118d24:	eb00a1ba 	bl	141414 <strcat>
      LWIP_ASSERT(errstr, 0);
  118d28:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118d2c:	e1a00003 	mov	r0, r3
  118d30:	ebffa8f7 	bl	103114 <rt_kprintf>
  118d34:	e3a010a5 	mov	r1, #165	; 0xa5
  118d38:	e3070398 	movw	r0, #29592	; 0x7398
  118d3c:	e3400014 	movt	r0, #20
  118d40:	ebffc8ea 	bl	10b0f0 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  118d44:	e15b30b6 	ldrh	r3, [fp, #-6]
  118d48:	e2833001 	add	r3, r3, #1
  118d4c:	e14b30b6 	strh	r3, [fp, #-6]
  118d50:	e15b30b6 	ldrh	r3, [fp, #-6]
  118d54:	e353000f 	cmp	r3, #15
  118d58:	9affffd7 	bls	118cbc <memp_overflow_check_element_underflow+0x2c>
  }
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
}
  118d5c:	e320f000 	nop	{0}
  118d60:	e24bd004 	sub	sp, fp, #4
  118d64:	e8bd8800 	pop	{fp, pc}

00118d68 <memp_overflow_init_element>:
/**
 * Initialize the restricted area of on memp element.
 */
static void
memp_overflow_init_element(struct memp *p, const struct memp_desc *desc)
{
  118d68:	e92d4800 	push	{fp, lr}
  118d6c:	e28db004 	add	fp, sp, #4
  118d70:	e24dd010 	sub	sp, sp, #16
  118d74:	e50b0010 	str	r0, [fp, #-16]
  118d78:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u8_t *m;
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  118d7c:	e51b3010 	ldr	r3, [fp, #-16]
  118d80:	e283300c 	add	r3, r3, #12
  118d84:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_BEFORE_ALIGNED);
  118d88:	e3a02010 	mov	r2, #16
  118d8c:	e3a010cd 	mov	r1, #205	; 0xcd
  118d90:	e51b0008 	ldr	r0, [fp, #-8]
  118d94:	eb00a138 	bl	14127c <memset>
#endif
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  118d98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118d9c:	e1d330b8 	ldrh	r3, [r3, #8]
  118da0:	e283301c 	add	r3, r3, #28
  118da4:	e51b2010 	ldr	r2, [fp, #-16]
  118da8:	e0823003 	add	r3, r2, r3
  118dac:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_AFTER_ALIGNED);
  118db0:	e3a02010 	mov	r2, #16
  118db4:	e3a010cd 	mov	r1, #205	; 0xcd
  118db8:	e51b0008 	ldr	r0, [fp, #-8]
  118dbc:	eb00a12e 	bl	14127c <memset>
#endif
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  118dc0:	e320f000 	nop	{0}
  118dc4:	e24bd004 	sub	sp, fp, #4
  118dc8:	e8bd8800 	pop	{fp, pc}

00118dcc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
  118dcc:	e92d4800 	push	{fp, lr}
  118dd0:	e28db004 	add	fp, sp, #4
  118dd4:	e24dd010 	sub	sp, sp, #16
  118dd8:	e50b0010 	str	r0, [fp, #-16]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
  118ddc:	e51b3010 	ldr	r3, [fp, #-16]
  118de0:	e5933010 	ldr	r3, [r3, #16]
  118de4:	e3a02000 	mov	r2, #0
  118de8:	e5832000 	str	r2, [r3]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
  118dec:	e51b3010 	ldr	r3, [fp, #-16]
  118df0:	e593300c 	ldr	r3, [r3, #12]
  118df4:	e2833003 	add	r3, r3, #3
  118df8:	e3c33003 	bic	r3, r3, #3
  118dfc:	e50b300c 	str	r3, [fp, #-12]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
  118e00:	e3a03000 	mov	r3, #0
  118e04:	e50b3008 	str	r3, [fp, #-8]
  118e08:	ea000014 	b	118e60 <memp_init_pool+0x94>
    memp->next = *desc->tab;
  118e0c:	e51b3010 	ldr	r3, [fp, #-16]
  118e10:	e5933010 	ldr	r3, [r3, #16]
  118e14:	e5932000 	ldr	r2, [r3]
  118e18:	e51b300c 	ldr	r3, [fp, #-12]
  118e1c:	e5832000 	str	r2, [r3]
    *desc->tab = memp;
  118e20:	e51b3010 	ldr	r3, [fp, #-16]
  118e24:	e5933010 	ldr	r3, [r3, #16]
  118e28:	e51b200c 	ldr	r2, [fp, #-12]
  118e2c:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
  118e30:	e51b1010 	ldr	r1, [fp, #-16]
  118e34:	e51b000c 	ldr	r0, [fp, #-12]
  118e38:	ebffffca 	bl	118d68 <memp_overflow_init_element>
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  118e3c:	e51b3010 	ldr	r3, [fp, #-16]
  118e40:	e1d330b8 	ldrh	r3, [r3, #8]
#if MEMP_OVERFLOW_CHECK
      + MEMP_SANITY_REGION_AFTER_ALIGNED
  118e44:	e283302c 	add	r3, r3, #44	; 0x2c
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  118e48:	e51b200c 	ldr	r2, [fp, #-12]
  118e4c:	e0823003 	add	r3, r2, r3
  118e50:	e50b300c 	str	r3, [fp, #-12]
  for (i = 0; i < desc->num; ++i) {
  118e54:	e51b3008 	ldr	r3, [fp, #-8]
  118e58:	e2833001 	add	r3, r3, #1
  118e5c:	e50b3008 	str	r3, [fp, #-8]
  118e60:	e51b3010 	ldr	r3, [fp, #-16]
  118e64:	e1d330ba 	ldrh	r3, [r3, #10]
  118e68:	e1a02003 	mov	r2, r3
  118e6c:	e51b3008 	ldr	r3, [fp, #-8]
  118e70:	e1530002 	cmp	r3, r2
  118e74:	baffffe4 	blt	118e0c <memp_init_pool+0x40>
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
  118e78:	e51b3010 	ldr	r3, [fp, #-16]
  118e7c:	e5933004 	ldr	r3, [r3, #4]
  118e80:	e51b2010 	ldr	r2, [fp, #-16]
  118e84:	e1d220ba 	ldrh	r2, [r2, #10]
  118e88:	e1c320b6 	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
  118e8c:	e51b3010 	ldr	r3, [fp, #-16]
  118e90:	e5933004 	ldr	r3, [r3, #4]
  118e94:	e51b2010 	ldr	r2, [fp, #-16]
  118e98:	e5922000 	ldr	r2, [r2]
  118e9c:	e5832000 	str	r2, [r3]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
  118ea0:	e320f000 	nop	{0}
  118ea4:	e24bd004 	sub	sp, fp, #4
  118ea8:	e8bd8800 	pop	{fp, pc}

00118eac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  118eac:	e92d4800 	push	{fp, lr}
  118eb0:	e28db004 	add	fp, sp, #4
  118eb4:	e24dd008 	sub	sp, sp, #8
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  118eb8:	e3a03000 	mov	r3, #0
  118ebc:	e14b30b6 	strh	r3, [fp, #-6]
  118ec0:	ea000014 	b	118f18 <memp_init+0x6c>
    memp_init_pool(memp_pools[i]);
  118ec4:	e15b20b6 	ldrh	r2, [fp, #-6]
  118ec8:	e3073354 	movw	r3, #29524	; 0x7354
  118ecc:	e3403014 	movt	r3, #20
  118ed0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  118ed4:	e1a00003 	mov	r0, r3
  118ed8:	ebffffbb 	bl	118dcc <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
  118edc:	e15b20b6 	ldrh	r2, [fp, #-6]
  118ee0:	e3073354 	movw	r3, #29524	; 0x7354
  118ee4:	e3403014 	movt	r3, #20
  118ee8:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  118eec:	e15b30b6 	ldrh	r3, [fp, #-6]
  118ef0:	e5921004 	ldr	r1, [r2, #4]
  118ef4:	e30e2a14 	movw	r2, #59924	; 0xea14
  118ef8:	e3402056 	movt	r2, #86	; 0x56
  118efc:	e2833034 	add	r3, r3, #52	; 0x34
  118f00:	e1a03103 	lsl	r3, r3, #2
  118f04:	e0823003 	add	r3, r2, r3
  118f08:	e5831004 	str	r1, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  118f0c:	e15b30b6 	ldrh	r3, [fp, #-6]
  118f10:	e2833001 	add	r3, r3, #1
  118f14:	e14b30b6 	strh	r3, [fp, #-6]
  118f18:	e15b30b6 	ldrh	r3, [fp, #-6]
  118f1c:	e3530010 	cmp	r3, #16
  118f20:	9affffe7 	bls	118ec4 <memp_init+0x18>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
  118f24:	e320f000 	nop	{0}
  118f28:	e24bd004 	sub	sp, fp, #4
  118f2c:	e8bd8800 	pop	{fp, pc}

00118f30 <do_memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  118f30:	e92d4800 	push	{fp, lr}
  118f34:	e28db004 	add	fp, sp, #4
  118f38:	e24dd018 	sub	sp, sp, #24
  118f3c:	e50b0010 	str	r0, [fp, #-16]
  118f40:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  118f44:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
  118f48:	ebffa4bb 	bl	10223c <rt_enter_critical>

  memp = *desc->tab;
  118f4c:	e51b3010 	ldr	r3, [fp, #-16]
  118f50:	e5933010 	ldr	r3, [r3, #16]
  118f54:	e5933000 	ldr	r3, [r3]
  118f58:	e50b3008 	str	r3, [fp, #-8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
  118f5c:	e51b3008 	ldr	r3, [fp, #-8]
  118f60:	e3530000 	cmp	r3, #0
  118f64:	0a000036 	beq	119044 <do_memp_malloc_pool_fn+0x114>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
  118f68:	e51b1010 	ldr	r1, [fp, #-16]
  118f6c:	e51b0008 	ldr	r0, [fp, #-8]
  118f70:	ebffff0f 	bl	118bb4 <memp_overflow_check_element_overflow>
    memp_overflow_check_element_underflow(memp, desc);
  118f74:	e51b1010 	ldr	r1, [fp, #-16]
  118f78:	e51b0008 	ldr	r0, [fp, #-8]
  118f7c:	ebffff43 	bl	118c90 <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
  118f80:	e51b3010 	ldr	r3, [fp, #-16]
  118f84:	e5933010 	ldr	r3, [r3, #16]
  118f88:	e51b2008 	ldr	r2, [fp, #-8]
  118f8c:	e5922000 	ldr	r2, [r2]
  118f90:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
  118f94:	e51b3008 	ldr	r3, [fp, #-8]
  118f98:	e3a02000 	mov	r2, #0
  118f9c:	e5832000 	str	r2, [r3]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
  118fa0:	e51b3008 	ldr	r3, [fp, #-8]
  118fa4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  118fa8:	e5832004 	str	r2, [r3, #4]
    memp->line = line;
  118fac:	e51b3008 	ldr	r3, [fp, #-8]
  118fb0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118fb4:	e5832008 	str	r2, [r3, #8]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
  118fb8:	e51b3008 	ldr	r3, [fp, #-8]
  118fbc:	e2033003 	and	r3, r3, #3
  118fc0:	e3530000 	cmp	r3, #0
  118fc4:	0a000006 	beq	118fe4 <do_memp_malloc_pool_fn+0xb4>
  118fc8:	e30704c4 	movw	r0, #29892	; 0x74c4
  118fcc:	e3400014 	movt	r0, #20
  118fd0:	ebffa84f 	bl	103114 <rt_kprintf>
  118fd4:	e3001149 	movw	r1, #329	; 0x149
  118fd8:	e3070398 	movw	r0, #29592	; 0x7398
  118fdc:	e3400014 	movt	r0, #20
  118fe0:	ebffc842 	bl	10b0f0 <sys_arch_assert>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
  118fe4:	e51b3010 	ldr	r3, [fp, #-16]
  118fe8:	e5933004 	ldr	r3, [r3, #4]
  118fec:	e1d320b8 	ldrh	r2, [r3, #8]
  118ff0:	e2822001 	add	r2, r2, #1
  118ff4:	e6ff2072 	uxth	r2, r2
  118ff8:	e1c320b8 	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
  118ffc:	e51b3010 	ldr	r3, [fp, #-16]
  119000:	e5933004 	ldr	r3, [r3, #4]
  119004:	e1d320b8 	ldrh	r2, [r3, #8]
  119008:	e51b3010 	ldr	r3, [fp, #-16]
  11900c:	e5933004 	ldr	r3, [r3, #4]
  119010:	e1d330ba 	ldrh	r3, [r3, #10]
  119014:	e1520003 	cmp	r2, r3
  119018:	9a000005 	bls	119034 <do_memp_malloc_pool_fn+0x104>
      desc->stats->max = desc->stats->used;
  11901c:	e51b3010 	ldr	r3, [fp, #-16]
  119020:	e5932004 	ldr	r2, [r3, #4]
  119024:	e51b3010 	ldr	r3, [fp, #-16]
  119028:	e5933004 	ldr	r3, [r3, #4]
  11902c:	e1d220b8 	ldrh	r2, [r2, #8]
  119030:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
  119034:	ebffa486 	bl	102254 <rt_exit_critical>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
  119038:	e51b3008 	ldr	r3, [fp, #-8]
  11903c:	e283301c 	add	r3, r3, #28
  119040:	ea000007 	b	119064 <do_memp_malloc_pool_fn+0x134>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
  119044:	e51b3010 	ldr	r3, [fp, #-16]
  119048:	e5933004 	ldr	r3, [r3, #4]
  11904c:	e1d320b4 	ldrh	r2, [r3, #4]
  119050:	e2822001 	add	r2, r2, #1
  119054:	e6ff2072 	uxth	r2, r2
  119058:	e1c320b4 	strh	r2, [r3, #4]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  11905c:	ebffa47c 	bl	102254 <rt_exit_critical>
  return NULL;
  119060:	e3a03000 	mov	r3, #0
}
  119064:	e1a00003 	mov	r0, r3
  119068:	e24bd004 	sub	sp, fp, #4
  11906c:	e8bd8800 	pop	{fp, pc}

00119070 <memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  119070:	e92d4800 	push	{fp, lr}
  119074:	e28db004 	add	fp, sp, #4
  119078:	e24dd010 	sub	sp, sp, #16
  11907c:	e50b0008 	str	r0, [fp, #-8]
  119080:	e50b100c 	str	r1, [fp, #-12]
  119084:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  119088:	e51b3008 	ldr	r3, [fp, #-8]
  11908c:	e3530000 	cmp	r3, #0
  119090:	1a000006 	bne	1190b0 <memp_malloc_pool_fn+0x40>
  119094:	e30704e8 	movw	r0, #29928	; 0x74e8
  119098:	e3400014 	movt	r0, #20
  11909c:	ebffa81c 	bl	103114 <rt_kprintf>
  1190a0:	e3a01f5b 	mov	r1, #364	; 0x16c
  1190a4:	e3070398 	movw	r0, #29592	; 0x7398
  1190a8:	e3400014 	movt	r0, #20
  1190ac:	ebffc80f 	bl	10b0f0 <sys_arch_assert>
  if (desc == NULL) {
  1190b0:	e51b3008 	ldr	r3, [fp, #-8]
  1190b4:	e3530000 	cmp	r3, #0
  1190b8:	1a000001 	bne	1190c4 <memp_malloc_pool_fn+0x54>
    return NULL;
  1190bc:	e3a03000 	mov	r3, #0
  1190c0:	ea000004 	b	1190d8 <memp_malloc_pool_fn+0x68>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
#else
  return do_memp_malloc_pool_fn(desc, file, line);
  1190c4:	e51b2010 	ldr	r2, [fp, #-16]
  1190c8:	e51b100c 	ldr	r1, [fp, #-12]
  1190cc:	e51b0008 	ldr	r0, [fp, #-8]
  1190d0:	ebffff96 	bl	118f30 <do_memp_malloc_pool_fn>
  1190d4:	e1a03000 	mov	r3, r0
#endif
}
  1190d8:	e1a00003 	mov	r0, r3
  1190dc:	e24bd004 	sub	sp, fp, #4
  1190e0:	e8bd8800 	pop	{fp, pc}

001190e4 <memp_malloc_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  1190e4:	e92d4800 	push	{fp, lr}
  1190e8:	e28db004 	add	fp, sp, #4
  1190ec:	e24dd018 	sub	sp, sp, #24
  1190f0:	e50b0010 	str	r0, [fp, #-16]
  1190f4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1190f8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  1190fc:	e51b3010 	ldr	r3, [fp, #-16]
  119100:	e3530010 	cmp	r3, #16
  119104:	9a000008 	bls	11912c <memp_malloc_fn+0x48>
  119108:	e30704fc 	movw	r0, #29948	; 0x74fc
  11910c:	e3400014 	movt	r0, #20
  119110:	ebffa7ff 	bl	103114 <rt_kprintf>
  119114:	e3001187 	movw	r1, #391	; 0x187
  119118:	e3070398 	movw	r0, #29592	; 0x7398
  11911c:	e3400014 	movt	r0, #20
  119120:	ebffc7f2 	bl	10b0f0 <sys_arch_assert>
  119124:	e3a03000 	mov	r3, #0
  119128:	ea000009 	b	119154 <memp_malloc_fn+0x70>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
  11912c:	e3073354 	movw	r3, #29524	; 0x7354
  119130:	e3403014 	movt	r3, #20
  119134:	e51b2010 	ldr	r2, [fp, #-16]
  119138:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11913c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  119140:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119144:	e1a00003 	mov	r0, r3
  119148:	ebffff78 	bl	118f30 <do_memp_malloc_pool_fn>
  11914c:	e50b0008 	str	r0, [fp, #-8]
#endif

  return memp;
  119150:	e51b3008 	ldr	r3, [fp, #-8]
}
  119154:	e1a00003 	mov	r0, r3
  119158:	e24bd004 	sub	sp, fp, #4
  11915c:	e8bd8800 	pop	{fp, pc}

00119160 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
  119160:	e92d4800 	push	{fp, lr}
  119164:	e28db004 	add	fp, sp, #4
  119168:	e24dd010 	sub	sp, sp, #16
  11916c:	e50b0010 	str	r0, [fp, #-16]
  119170:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
  119174:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119178:	e2033003 	and	r3, r3, #3
  11917c:	e3530000 	cmp	r3, #0
  119180:	0a000006 	beq	1191a0 <do_memp_free_pool+0x40>
  119184:	e307051c 	movw	r0, #29980	; 0x751c
  119188:	e3400014 	movt	r0, #20
  11918c:	ebffa7e0 	bl	103114 <rt_kprintf>
  119190:	e300119d 	movw	r1, #413	; 0x19d
  119194:	e3070398 	movw	r0, #29592	; 0x7398
  119198:	e3400014 	movt	r0, #20
  11919c:	ebffc7d3 	bl	10b0f0 <sys_arch_assert>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
  1191a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1191a4:	e243301c 	sub	r3, r3, #28
  1191a8:	e50b3008 	str	r3, [fp, #-8]

  SYS_ARCH_PROTECT(old_level);
  1191ac:	ebffa422 	bl	10223c <rt_enter_critical>

#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element_overflow(memp, desc);
  1191b0:	e51b1010 	ldr	r1, [fp, #-16]
  1191b4:	e51b0008 	ldr	r0, [fp, #-8]
  1191b8:	ebfffe7d 	bl	118bb4 <memp_overflow_check_element_overflow>
  memp_overflow_check_element_underflow(memp, desc);
  1191bc:	e51b1010 	ldr	r1, [fp, #-16]
  1191c0:	e51b0008 	ldr	r0, [fp, #-8]
  1191c4:	ebfffeb1 	bl	118c90 <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
  1191c8:	e51b3010 	ldr	r3, [fp, #-16]
  1191cc:	e5933004 	ldr	r3, [r3, #4]
  1191d0:	e1d320b8 	ldrh	r2, [r3, #8]
  1191d4:	e2422001 	sub	r2, r2, #1
  1191d8:	e6ff2072 	uxth	r2, r2
  1191dc:	e1c320b8 	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
  1191e0:	e51b3010 	ldr	r3, [fp, #-16]
  1191e4:	e5933010 	ldr	r3, [r3, #16]
  1191e8:	e5932000 	ldr	r2, [r3]
  1191ec:	e51b3008 	ldr	r3, [fp, #-8]
  1191f0:	e5832000 	str	r2, [r3]
  *desc->tab = memp;
  1191f4:	e51b3010 	ldr	r3, [fp, #-16]
  1191f8:	e5933010 	ldr	r3, [r3, #16]
  1191fc:	e51b2008 	ldr	r2, [fp, #-8]
  119200:	e5832000 	str	r2, [r3]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
  119204:	ebffa412 	bl	102254 <rt_exit_critical>
#endif /* !MEMP_MEM_MALLOC */
}
  119208:	e320f000 	nop	{0}
  11920c:	e24bd004 	sub	sp, fp, #4
  119210:	e8bd8800 	pop	{fp, pc}

00119214 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
  119214:	e92d4800 	push	{fp, lr}
  119218:	e28db004 	add	fp, sp, #4
  11921c:	e24dd008 	sub	sp, sp, #8
  119220:	e50b0008 	str	r0, [fp, #-8]
  119224:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  119228:	e51b3008 	ldr	r3, [fp, #-8]
  11922c:	e3530000 	cmp	r3, #0
  119230:	1a000006 	bne	119250 <memp_free_pool+0x3c>
  119234:	e30704e8 	movw	r0, #29928	; 0x74e8
  119238:	e3400014 	movt	r0, #20
  11923c:	ebffa7b4 	bl	103114 <rt_kprintf>
  119240:	e30011c6 	movw	r1, #454	; 0x1c6
  119244:	e3070398 	movw	r0, #29592	; 0x7398
  119248:	e3400014 	movt	r0, #20
  11924c:	ebffc7a7 	bl	10b0f0 <sys_arch_assert>
  if ((desc == NULL) || (mem == NULL)) {
  119250:	e51b3008 	ldr	r3, [fp, #-8]
  119254:	e3530000 	cmp	r3, #0
  119258:	0a000006 	beq	119278 <memp_free_pool+0x64>
  11925c:	e51b300c 	ldr	r3, [fp, #-12]
  119260:	e3530000 	cmp	r3, #0
  119264:	0a000003 	beq	119278 <memp_free_pool+0x64>
    return;
  }

  do_memp_free_pool(desc, mem);
  119268:	e51b100c 	ldr	r1, [fp, #-12]
  11926c:	e51b0008 	ldr	r0, [fp, #-8]
  119270:	ebffffba 	bl	119160 <do_memp_free_pool>
  119274:	ea000000 	b	11927c <memp_free_pool+0x68>
    return;
  119278:	e320f000 	nop	{0}
}
  11927c:	e24bd004 	sub	sp, fp, #4
  119280:	e8bd8800 	pop	{fp, pc}

00119284 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
  119284:	e92d4800 	push	{fp, lr}
  119288:	e28db004 	add	fp, sp, #4
  11928c:	e24dd008 	sub	sp, sp, #8
  119290:	e50b0008 	str	r0, [fp, #-8]
  119294:	e50b100c 	str	r1, [fp, #-12]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
  119298:	e51b3008 	ldr	r3, [fp, #-8]
  11929c:	e3530010 	cmp	r3, #16
  1192a0:	9a000007 	bls	1192c4 <memp_free+0x40>
  1192a4:	e307053c 	movw	r0, #30012	; 0x753c
  1192a8:	e3400014 	movt	r0, #20
  1192ac:	ebffa798 	bl	103114 <rt_kprintf>
  1192b0:	e30011db 	movw	r1, #475	; 0x1db
  1192b4:	e3070398 	movw	r0, #29592	; 0x7398
  1192b8:	e3400014 	movt	r0, #20
  1192bc:	ebffc78b 	bl	10b0f0 <sys_arch_assert>
  1192c0:	ea00000b 	b	1192f4 <memp_free+0x70>

  if (mem == NULL) {
  1192c4:	e51b300c 	ldr	r3, [fp, #-12]
  1192c8:	e3530000 	cmp	r3, #0
  1192cc:	0a000007 	beq	1192f0 <memp_free+0x6c>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
  1192d0:	e3073354 	movw	r3, #29524	; 0x7354
  1192d4:	e3403014 	movt	r3, #20
  1192d8:	e51b2008 	ldr	r2, [fp, #-8]
  1192dc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1192e0:	e51b100c 	ldr	r1, [fp, #-12]
  1192e4:	e1a00003 	mov	r0, r3
  1192e8:	ebffff9c 	bl	119160 <do_memp_free_pool>
  1192ec:	ea000000 	b	1192f4 <memp_free+0x70>
    return;
  1192f0:	e320f000 	nop	{0}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
  1192f4:	e24bd004 	sub	sp, fp, #4
  1192f8:	e8bd8800 	pop	{fp, pc}

001192fc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
  1192fc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119300:	e28db000 	add	fp, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
  119304:	e320f000 	nop	{0}
  119308:	e28bd000 	add	sp, fp, #0
  11930c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119310:	e12fff1e 	bx	lr

00119314 <netif_input>:
 * Only works if the netif driver correctly sets
 * NETIF_FLAG_ETHARP and/or NETIF_FLAG_ETHERNET flag!
 */
err_t
netif_input(struct pbuf *p, struct netif *inp)
{
  119314:	e92d4800 	push	{fp, lr}
  119318:	e28db004 	add	fp, sp, #4
  11931c:	e24dd008 	sub	sp, sp, #8
  119320:	e50b0008 	str	r0, [fp, #-8]
  119324:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  119328:	e51b300c 	ldr	r3, [fp, #-12]
  11932c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119330:	e2033018 	and	r3, r3, #24
  119334:	e3530000 	cmp	r3, #0
  119338:	0a000004 	beq	119350 <netif_input+0x3c>
    return ethernet_input(p, inp);
  11933c:	e51b100c 	ldr	r1, [fp, #-12]
  119340:	e51b0008 	ldr	r0, [fp, #-8]
  119344:	eb003e2f 	bl	128c08 <ethernet_input>
  119348:	e1a03000 	mov	r3, r0
  11934c:	ea000003 	b	119360 <netif_input+0x4c>
  } else
#endif /* LWIP_ETHERNET */
  return ip_input(p, inp);
  119350:	e51b100c 	ldr	r1, [fp, #-12]
  119354:	e51b0008 	ldr	r0, [fp, #-8]
  119358:	eb006036 	bl	131438 <ip4_input>
  11935c:	e1a03000 	mov	r3, r0
}
  119360:	e1a00003 	mov	r0, r3
  119364:	e24bd004 	sub	sp, fp, #4
  119368:	e8bd8800 	pop	{fp, pc}

0011936c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
  11936c:	e92d4800 	push	{fp, lr}
  119370:	e28db004 	add	fp, sp, #4
  119374:	e24dd010 	sub	sp, sp, #16
  119378:	e50b0008 	str	r0, [fp, #-8]
  11937c:	e50b100c 	str	r1, [fp, #-12]
  119380:	e50b2010 	str	r2, [fp, #-16]
  119384:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_IPV6
  s8_t i;
#endif
  LWIP_ASSERT("No init function given", init != NULL);
  119388:	e59b3008 	ldr	r3, [fp, #8]
  11938c:	e3530000 	cmp	r3, #0
  119390:	1a000006 	bne	1193b0 <netif_add+0x44>
  119394:	e3070558 	movw	r0, #30040	; 0x7558
  119398:	e3400014 	movt	r0, #20
  11939c:	ebffa75c 	bl	103114 <rt_kprintf>
  1193a0:	e3001105 	movw	r1, #261	; 0x105
  1193a4:	e3070570 	movw	r0, #30064	; 0x7570
  1193a8:	e3400014 	movt	r0, #20
  1193ac:	ebffc74f 	bl	10b0f0 <sys_arch_assert>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
  1193b0:	e51b3008 	ldr	r3, [fp, #-8]
  1193b4:	e3a02000 	mov	r2, #0
  1193b8:	e5832004 	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
  1193bc:	e51b3008 	ldr	r3, [fp, #-8]
  1193c0:	e3a02000 	mov	r2, #0
  1193c4:	e5832008 	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
  1193c8:	e51b3008 	ldr	r3, [fp, #-8]
  1193cc:	e3a02000 	mov	r2, #0
  1193d0:	e583200c 	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
  1193d4:	e51b3008 	ldr	r3, [fp, #-8]
  1193d8:	e3a02000 	mov	r2, #0
  1193dc:	e5c32041 	strb	r2, [r3, #65]	; 0x41
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
  1193e0:	e51b3008 	ldr	r3, [fp, #-8]
  1193e4:	e2833028 	add	r3, r3, #40	; 0x28
  1193e8:	e3a02008 	mov	r2, #8
  1193ec:	e3a01000 	mov	r1, #0
  1193f0:	e1a00003 	mov	r0, r3
  1193f4:	eb009fa0 	bl	14127c <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
  1193f8:	e51b3008 	ldr	r3, [fp, #-8]
  1193fc:	e3a02003 	mov	r2, #3
  119400:	e5c32030 	strb	r2, [r3, #48]	; 0x30
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
  119404:	e51b3008 	ldr	r3, [fp, #-8]
  119408:	e3a02000 	mov	r2, #0
  11940c:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
  119410:	e51b3008 	ldr	r3, [fp, #-8]
  119414:	e3a02000 	mov	r2, #0
  119418:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
  11941c:	e51b3008 	ldr	r3, [fp, #-8]
  119420:	e3a02000 	mov	r2, #0
  119424:	e583207c 	str	r2, [r3, #124]	; 0x7c
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
  119428:	e51b3008 	ldr	r3, [fp, #-8]
  11942c:	e3a02000 	mov	r2, #0
  119430:	e5832080 	str	r2, [r3, #128]	; 0x80
  netif->loop_last = NULL;
  119434:	e51b3008 	ldr	r3, [fp, #-8]
  119438:	e3a02000 	mov	r2, #0
  11943c:	e5832084 	str	r2, [r3, #132]	; 0x84
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  119440:	e51b3008 	ldr	r3, [fp, #-8]
  119444:	e59b2004 	ldr	r2, [fp, #4]
  119448:	e5832024 	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num++;
  11944c:	e30e3224 	movw	r3, #57892	; 0xe224
  119450:	e3403014 	movt	r3, #20
  119454:	e5d32000 	ldrb	r2, [r3]
  119458:	e2823001 	add	r3, r2, #1
  11945c:	e6ef1073 	uxtb	r1, r3
  119460:	e30e3224 	movw	r3, #57892	; 0xe224
  119464:	e3403014 	movt	r3, #20
  119468:	e5c31000 	strb	r1, [r3]
  11946c:	e51b3008 	ldr	r3, [fp, #-8]
  119470:	e5c32044 	strb	r2, [r3, #68]	; 0x44
  netif->input = input;
  119474:	e51b3008 	ldr	r3, [fp, #-8]
  119478:	e59b200c 	ldr	r2, [fp, #12]
  11947c:	e5832010 	str	r2, [r3, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */
#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
  119480:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119484:	e51b2010 	ldr	r2, [fp, #-16]
  119488:	e51b100c 	ldr	r1, [fp, #-12]
  11948c:	e51b0008 	ldr	r0, [fp, #-8]
  119490:	eb00001b 	bl	119504 <netif_set_addr>
#endif /* LWIP_IPV4 */
  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
  119494:	e59b3008 	ldr	r3, [fp, #8]
  119498:	e51b0008 	ldr	r0, [fp, #-8]
  11949c:	e12fff33 	blx	r3
  1194a0:	e1a03000 	mov	r3, r0
  1194a4:	e3530000 	cmp	r3, #0
  1194a8:	0a000001 	beq	1194b4 <netif_add+0x148>
    return NULL;
  1194ac:	e3a03000 	mov	r3, #0
  1194b0:	ea000010 	b	1194f8 <netif_add+0x18c>
  }
  /* add this netif to the list */
  netif->next = netif_list;
  1194b4:	e30e3a08 	movw	r3, #59912	; 0xea08
  1194b8:	e3403056 	movt	r3, #86	; 0x56
  1194bc:	e5932000 	ldr	r2, [r3]
  1194c0:	e51b3008 	ldr	r3, [fp, #-8]
  1194c4:	e5832000 	str	r2, [r3]
  netif_list = netif;
  1194c8:	e30e3a08 	movw	r3, #59912	; 0xea08
  1194cc:	e3403056 	movt	r3, #86	; 0x56
  1194d0:	e51b2008 	ldr	r2, [fp, #-8]
  1194d4:	e5832000 	str	r2, [r3]
  mib2_netif_added(netif);
#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  1194d8:	e51b3008 	ldr	r3, [fp, #-8]
  1194dc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1194e0:	e2033020 	and	r3, r3, #32
  1194e4:	e3530000 	cmp	r3, #0
  1194e8:	0a000001 	beq	1194f4 <netif_add+0x188>
    igmp_start(netif);
  1194ec:	e51b0008 	ldr	r0, [fp, #-8]
  1194f0:	eb005a97 	bl	12ff54 <igmp_start>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
  1194f4:	e51b3008 	ldr	r3, [fp, #-8]
}
  1194f8:	e1a00003 	mov	r0, r3
  1194fc:	e24bd004 	sub	sp, fp, #4
  119500:	e8bd8800 	pop	{fp, pc}

00119504 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
  119504:	e92d4800 	push	{fp, lr}
  119508:	e28db004 	add	fp, sp, #4
  11950c:	e24dd010 	sub	sp, sp, #16
  119510:	e50b0008 	str	r0, [fp, #-8]
  119514:	e50b100c 	str	r1, [fp, #-12]
  119518:	e50b2010 	str	r2, [fp, #-16]
  11951c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (ip4_addr_isany(ipaddr)) {
  119520:	e51b300c 	ldr	r3, [fp, #-12]
  119524:	e3530000 	cmp	r3, #0
  119528:	0a000003 	beq	11953c <netif_set_addr+0x38>
  11952c:	e51b300c 	ldr	r3, [fp, #-12]
  119530:	e5933000 	ldr	r3, [r3]
  119534:	e3530000 	cmp	r3, #0
  119538:	1a000009 	bne	119564 <netif_set_addr+0x60>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
  11953c:	e51b100c 	ldr	r1, [fp, #-12]
  119540:	e51b0008 	ldr	r0, [fp, #-8]
  119544:	eb00009d 	bl	1197c0 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
  119548:	e51b1010 	ldr	r1, [fp, #-16]
  11954c:	e51b0008 	ldr	r0, [fp, #-8]
  119550:	eb0000fa 	bl	119940 <netif_set_netmask>
    netif_set_gw(netif, gw);
  119554:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119558:	e51b0008 	ldr	r0, [fp, #-8]
  11955c:	eb0000de 	bl	1198dc <netif_set_gw>
  119560:	ea000008 	b	119588 <netif_set_addr+0x84>
  } else {
    netif_set_netmask(netif, netmask);
  119564:	e51b1010 	ldr	r1, [fp, #-16]
  119568:	e51b0008 	ldr	r0, [fp, #-8]
  11956c:	eb0000f3 	bl	119940 <netif_set_netmask>
    netif_set_gw(netif, gw);
  119570:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119574:	e51b0008 	ldr	r0, [fp, #-8]
  119578:	eb0000d7 	bl	1198dc <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
  11957c:	e51b100c 	ldr	r1, [fp, #-12]
  119580:	e51b0008 	ldr	r0, [fp, #-8]
  119584:	eb00008d 	bl	1197c0 <netif_set_ipaddr>
  }
}
  119588:	e320f000 	nop	{0}
  11958c:	e24bd004 	sub	sp, fp, #4
  119590:	e8bd8800 	pop	{fp, pc}

00119594 <netif_remove>:
 *
 * @param netif the network interface to remove
 */
void
netif_remove(struct netif *netif)
{
  119594:	e92d4800 	push	{fp, lr}
  119598:	e28db004 	add	fp, sp, #4
  11959c:	e24dd010 	sub	sp, sp, #16
  1195a0:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_IPV6
  int i;
#endif

  if (netif == NULL) {
  1195a4:	e51b3010 	ldr	r3, [fp, #-16]
  1195a8:	e3530000 	cmp	r3, #0
  1195ac:	0a00004e 	beq	1196ec <netif_remove+0x158>
    return;
  }

#if LWIP_IPV4
  if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  1195b0:	e51b3010 	ldr	r3, [fp, #-16]
  1195b4:	e2833004 	add	r3, r3, #4
  1195b8:	e5933000 	ldr	r3, [r3]
  1195bc:	e3530000 	cmp	r3, #0
  1195c0:	0a00000e 	beq	119600 <netif_remove+0x6c>
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  1195c4:	e51b3010 	ldr	r3, [fp, #-16]
  1195c8:	e2833004 	add	r3, r3, #4
  1195cc:	e3a01000 	mov	r1, #0
  1195d0:	e1a00003 	mov	r0, r3
  1195d4:	eb001aea 	bl	120184 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  1195d8:	e51b3010 	ldr	r3, [fp, #-16]
  1195dc:	e2833004 	add	r3, r3, #4
  1195e0:	e3a01000 	mov	r1, #0
  1195e4:	e1a00003 	mov	r0, r3
  1195e8:	eb003d5a 	bl	128b58 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  1195ec:	e51b3010 	ldr	r3, [fp, #-16]
  1195f0:	e2833004 	add	r3, r3, #4
  1195f4:	e3a01000 	mov	r1, #0
  1195f8:	e1a00003 	mov	r0, r3
  1195fc:	eb000cb0 	bl	11c8c4 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
  }

#if LWIP_IGMP
  /* stop IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  119600:	e51b3010 	ldr	r3, [fp, #-16]
  119604:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119608:	e2033020 	and	r3, r3, #32
  11960c:	e3530000 	cmp	r3, #0
  119610:	0a000001 	beq	11961c <netif_remove+0x88>
    igmp_stop(netif);
  119614:	e51b0010 	ldr	r0, [fp, #-16]
  119618:	eb005a73 	bl	12ffec <igmp_stop>
#if LWIP_IPV6_MLD
  /* stop MLD processing */
  mld6_stop(netif);
#endif /* LWIP_IPV6_MLD */
#endif /* LWIP_IPV6 */
  if (netif_is_up(netif)) {
  11961c:	e51b3010 	ldr	r3, [fp, #-16]
  119620:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119624:	e2033001 	and	r3, r3, #1
  119628:	e6ef3073 	uxtb	r3, r3
  11962c:	e3530000 	cmp	r3, #0
  119630:	0a000001 	beq	11963c <netif_remove+0xa8>
    /* set netif down before removing (call callback function) */
    netif_set_down(netif);
  119634:	e51b0010 	ldr	r0, [fp, #-16]
  119638:	eb00013a 	bl	119b28 <netif_set_down>
  }

  mib2_remove_ip4(netif);

  /* this netif is default? */
  if (netif_default == netif) {
  11963c:	e30e3a0c 	movw	r3, #59916	; 0xea0c
  119640:	e3403056 	movt	r3, #86	; 0x56
  119644:	e5933000 	ldr	r3, [r3]
  119648:	e51b2010 	ldr	r2, [fp, #-16]
  11964c:	e1520003 	cmp	r2, r3
  119650:	1a000001 	bne	11965c <netif_remove+0xc8>
    /* reset default netif */
    netif_set_default(NULL);
  119654:	e3a00000 	mov	r0, #0
  119658:	eb0000d1 	bl	1199a4 <netif_set_default>
  }
  /*  is it the first netif? */
  if (netif_list == netif) {
  11965c:	e30e3a08 	movw	r3, #59912	; 0xea08
  119660:	e3403056 	movt	r3, #86	; 0x56
  119664:	e5933000 	ldr	r3, [r3]
  119668:	e51b2010 	ldr	r2, [fp, #-16]
  11966c:	e1520003 	cmp	r2, r3
  119670:	1a000005 	bne	11968c <netif_remove+0xf8>
    netif_list = netif->next;
  119674:	e51b3010 	ldr	r3, [fp, #-16]
  119678:	e5932000 	ldr	r2, [r3]
  11967c:	e30e3a08 	movw	r3, #59912	; 0xea08
  119680:	e3403056 	movt	r3, #86	; 0x56
  119684:	e5832000 	str	r2, [r3]
  119688:	ea000018 	b	1196f0 <netif_remove+0x15c>
  } else {
    /*  look for netif further down the list */
    struct netif * tmp_netif;
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  11968c:	e30e3a08 	movw	r3, #59912	; 0xea08
  119690:	e3403056 	movt	r3, #86	; 0x56
  119694:	e5933000 	ldr	r3, [r3]
  119698:	e50b3008 	str	r3, [fp, #-8]
  11969c:	ea00000c 	b	1196d4 <netif_remove+0x140>
      if (tmp_netif->next == netif) {
  1196a0:	e51b3008 	ldr	r3, [fp, #-8]
  1196a4:	e5933000 	ldr	r3, [r3]
  1196a8:	e51b2010 	ldr	r2, [fp, #-16]
  1196ac:	e1520003 	cmp	r2, r3
  1196b0:	1a000004 	bne	1196c8 <netif_remove+0x134>
        tmp_netif->next = netif->next;
  1196b4:	e51b3010 	ldr	r3, [fp, #-16]
  1196b8:	e5932000 	ldr	r2, [r3]
  1196bc:	e51b3008 	ldr	r3, [fp, #-8]
  1196c0:	e5832000 	str	r2, [r3]
        break;
  1196c4:	ea000005 	b	1196e0 <netif_remove+0x14c>
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  1196c8:	e51b3008 	ldr	r3, [fp, #-8]
  1196cc:	e5933000 	ldr	r3, [r3]
  1196d0:	e50b3008 	str	r3, [fp, #-8]
  1196d4:	e51b3008 	ldr	r3, [fp, #-8]
  1196d8:	e3530000 	cmp	r3, #0
  1196dc:	1affffef 	bne	1196a0 <netif_remove+0x10c>
      }
    }
    if (tmp_netif == NULL) {
  1196e0:	e51b3008 	ldr	r3, [fp, #-8]
  1196e4:	e3530000 	cmp	r3, #0
  1196e8:	ea000000 	b	1196f0 <netif_remove+0x15c>
    return;
  1196ec:	e320f000 	nop	{0}
  if (netif->remove_callback) {
    netif->remove_callback(netif);
  }
#endif /* LWIP_NETIF_REMOVE_CALLBACK */
  LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
}
  1196f0:	e24bd004 	sub	sp, fp, #4
  1196f4:	e8bd8800 	pop	{fp, pc}

001196f8 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
  1196f8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1196fc:	e28db000 	add	fp, sp, #0
  119700:	e24dd014 	sub	sp, sp, #20
  119704:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;
  u8_t num;

  if (name == NULL) {
  119708:	e51b3010 	ldr	r3, [fp, #-16]
  11970c:	e3530000 	cmp	r3, #0
  119710:	1a000001 	bne	11971c <netif_find+0x24>
    return NULL;
  119714:	e3a03000 	mov	r3, #0
  119718:	ea000024 	b	1197b0 <netif_find+0xb8>
  }

  num = (u8_t)(name[2] - '0');
  11971c:	e51b3010 	ldr	r3, [fp, #-16]
  119720:	e2833002 	add	r3, r3, #2
  119724:	e5d33000 	ldrb	r3, [r3]
  119728:	e2433030 	sub	r3, r3, #48	; 0x30
  11972c:	e54b3009 	strb	r3, [fp, #-9]

  for (netif = netif_list; netif != NULL; netif = netif->next) {
  119730:	e30e3a08 	movw	r3, #59912	; 0xea08
  119734:	e3403056 	movt	r3, #86	; 0x56
  119738:	e5933000 	ldr	r3, [r3]
  11973c:	e50b3008 	str	r3, [fp, #-8]
  119740:	ea000016 	b	1197a0 <netif_find+0xa8>
    if (num == netif->num &&
  119744:	e51b3008 	ldr	r3, [fp, #-8]
  119748:	e5d33044 	ldrb	r3, [r3, #68]	; 0x44
  11974c:	e55b2009 	ldrb	r2, [fp, #-9]
  119750:	e1520003 	cmp	r2, r3
  119754:	1a00000e 	bne	119794 <netif_find+0x9c>
       name[0] == netif->name[0] &&
  119758:	e51b3010 	ldr	r3, [fp, #-16]
  11975c:	e5d32000 	ldrb	r2, [r3]
  119760:	e51b3008 	ldr	r3, [fp, #-8]
  119764:	e5d33042 	ldrb	r3, [r3, #66]	; 0x42
    if (num == netif->num &&
  119768:	e1520003 	cmp	r2, r3
  11976c:	1a000008 	bne	119794 <netif_find+0x9c>
       name[1] == netif->name[1]) {
  119770:	e51b3010 	ldr	r3, [fp, #-16]
  119774:	e2833001 	add	r3, r3, #1
  119778:	e5d32000 	ldrb	r2, [r3]
  11977c:	e51b3008 	ldr	r3, [fp, #-8]
  119780:	e5d33043 	ldrb	r3, [r3, #67]	; 0x43
       name[0] == netif->name[0] &&
  119784:	e1520003 	cmp	r2, r3
  119788:	1a000001 	bne	119794 <netif_find+0x9c>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
  11978c:	e51b3008 	ldr	r3, [fp, #-8]
  119790:	ea000006 	b	1197b0 <netif_find+0xb8>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  119794:	e51b3008 	ldr	r3, [fp, #-8]
  119798:	e5933000 	ldr	r3, [r3]
  11979c:	e50b3008 	str	r3, [fp, #-8]
  1197a0:	e51b3008 	ldr	r3, [fp, #-8]
  1197a4:	e3530000 	cmp	r3, #0
  1197a8:	1affffe5 	bne	119744 <netif_find+0x4c>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
  1197ac:	e3a03000 	mov	r3, #0
}
  1197b0:	e1a00003 	mov	r0, r3
  1197b4:	e28bd000 	add	sp, fp, #0
  1197b8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1197bc:	e12fff1e 	bx	lr

001197c0 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
  1197c0:	e92d4800 	push	{fp, lr}
  1197c4:	e28db004 	add	fp, sp, #4
  1197c8:	e24dd010 	sub	sp, sp, #16
  1197cc:	e50b0010 	str	r0, [fp, #-16]
  1197d0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
  1197d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1197d8:	e3530000 	cmp	r3, #0
  1197dc:	0a000003 	beq	1197f0 <netif_set_ipaddr+0x30>
  1197e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1197e4:	e5933000 	ldr	r3, [r3]
  1197e8:	e50b3008 	str	r3, [fp, #-8]
  1197ec:	ea000003 	b	119800 <netif_set_ipaddr+0x40>
  1197f0:	e3093910 	movw	r3, #39184	; 0x9910
  1197f4:	e3403014 	movt	r3, #20
  1197f8:	e5933000 	ldr	r3, [r3]
  1197fc:	e50b3008 	str	r3, [fp, #-8]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
  119800:	e51b2008 	ldr	r2, [fp, #-8]
  119804:	e51b3010 	ldr	r3, [fp, #-16]
  119808:	e2833004 	add	r3, r3, #4
  11980c:	e5933000 	ldr	r3, [r3]
  119810:	e1520003 	cmp	r2, r3
  119814:	0a00002d 	beq	1198d0 <netif_set_ipaddr+0x110>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  119818:	e51b3010 	ldr	r3, [fp, #-16]
  11981c:	e2833004 	add	r3, r3, #4
  119820:	e24b2008 	sub	r2, fp, #8
  119824:	e1a01002 	mov	r1, r2
  119828:	e1a00003 	mov	r0, r3
  11982c:	eb001a54 	bl	120184 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  119830:	e51b3010 	ldr	r3, [fp, #-16]
  119834:	e2833004 	add	r3, r3, #4
  119838:	e24b2008 	sub	r2, fp, #8
  11983c:	e1a01002 	mov	r1, r2
  119840:	e1a00003 	mov	r0, r3
  119844:	eb003cc3 	bl	128b58 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  119848:	e51b3010 	ldr	r3, [fp, #-16]
  11984c:	e2833004 	add	r3, r3, #4
  119850:	e24b2008 	sub	r2, fp, #8
  119854:	e1a01002 	mov	r1, r2
  119858:	e1a00003 	mov	r0, r3
  11985c:	eb000c18 	bl	11c8c4 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
  119860:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119864:	e3530000 	cmp	r3, #0
  119868:	0a000002 	beq	119878 <netif_set_ipaddr+0xb8>
  11986c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119870:	e5933000 	ldr	r3, [r3]
  119874:	ea000000 	b	11987c <netif_set_ipaddr+0xbc>
  119878:	e3a03000 	mov	r3, #0
  11987c:	e51b2010 	ldr	r2, [fp, #-16]
  119880:	e5823004 	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
  119884:	e3a01001 	mov	r1, #1
  119888:	e51b0010 	ldr	r0, [fp, #-16]
  11988c:	eb000082 	bl	119a9c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
  119890:	e51b3010 	ldr	r3, [fp, #-16]
  119894:	e593301c 	ldr	r3, [r3, #28]
  119898:	e3530000 	cmp	r3, #0
  11989c:	0a000003 	beq	1198b0 <netif_set_ipaddr+0xf0>
  1198a0:	e51b3010 	ldr	r3, [fp, #-16]
  1198a4:	e593301c 	ldr	r3, [r3, #28]
  1198a8:	e51b0010 	ldr	r0, [fp, #-16]
  1198ac:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread sal network interface device set IP address operations */
    netdev_low_level_set_ipaddr(netdev_get_by_name(netif->name), (ip_addr_t *)ipaddr);
  1198b0:	e51b3010 	ldr	r3, [fp, #-16]
  1198b4:	e2833042 	add	r3, r3, #66	; 0x42
  1198b8:	e1a00003 	mov	r0, r3
  1198bc:	ebffaf0c 	bl	1054f4 <netdev_get_by_name>
  1198c0:	e1a03000 	mov	r3, r0
  1198c4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1198c8:	e1a00003 	mov	r0, r3
  1198cc:	ebffb1d8 	bl	106034 <netdev_low_level_set_ipaddr>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
  1198d0:	e320f000 	nop	{0}
  1198d4:	e24bd004 	sub	sp, fp, #4
  1198d8:	e8bd8800 	pop	{fp, pc}

001198dc <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
  1198dc:	e92d4800 	push	{fp, lr}
  1198e0:	e28db004 	add	fp, sp, #4
  1198e4:	e24dd008 	sub	sp, sp, #8
  1198e8:	e50b0008 	str	r0, [fp, #-8]
  1198ec:	e50b100c 	str	r1, [fp, #-12]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
  1198f0:	e51b300c 	ldr	r3, [fp, #-12]
  1198f4:	e3530000 	cmp	r3, #0
  1198f8:	0a000002 	beq	119908 <netif_set_gw+0x2c>
  1198fc:	e51b300c 	ldr	r3, [fp, #-12]
  119900:	e5933000 	ldr	r3, [r3]
  119904:	ea000000 	b	11990c <netif_set_gw+0x30>
  119908:	e3a03000 	mov	r3, #0
  11990c:	e51b2008 	ldr	r2, [fp, #-8]
  119910:	e582300c 	str	r3, [r2, #12]
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));

#ifdef RT_USING_NETDEV
  /* rt_thread network interface device set gateway address */
  netdev_low_level_set_gw(netdev_get_by_name(netif->name), (ip_addr_t *)gw);
  119914:	e51b3008 	ldr	r3, [fp, #-8]
  119918:	e2833042 	add	r3, r3, #66	; 0x42
  11991c:	e1a00003 	mov	r0, r3
  119920:	ebffaef3 	bl	1054f4 <netdev_get_by_name>
  119924:	e1a03000 	mov	r3, r0
  119928:	e51b100c 	ldr	r1, [fp, #-12]
  11992c:	e1a00003 	mov	r0, r3
  119930:	ebffb23b 	bl	106224 <netdev_low_level_set_gw>
#endif /* RT_USING_NETDEV */
}
  119934:	e320f000 	nop	{0}
  119938:	e24bd004 	sub	sp, fp, #4
  11993c:	e8bd8800 	pop	{fp, pc}

00119940 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
  119940:	e92d4800 	push	{fp, lr}
  119944:	e28db004 	add	fp, sp, #4
  119948:	e24dd008 	sub	sp, sp, #8
  11994c:	e50b0008 	str	r0, [fp, #-8]
  119950:	e50b100c 	str	r1, [fp, #-12]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
  119954:	e51b300c 	ldr	r3, [fp, #-12]
  119958:	e3530000 	cmp	r3, #0
  11995c:	0a000002 	beq	11996c <netif_set_netmask+0x2c>
  119960:	e51b300c 	ldr	r3, [fp, #-12]
  119964:	e5933000 	ldr	r3, [r3]
  119968:	ea000000 	b	119970 <netif_set_netmask+0x30>
  11996c:	e3a03000 	mov	r3, #0
  119970:	e51b2008 	ldr	r2, [fp, #-8]
  119974:	e5823008 	str	r3, [r2, #8]
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));

#ifdef RT_USING_NETDEV
  /* rt-thread network interface device set netmask address */
  netdev_low_level_set_netmask(netdev_get_by_name(netif->name), (ip_addr_t *)netmask);
  119978:	e51b3008 	ldr	r3, [fp, #-8]
  11997c:	e2833042 	add	r3, r3, #66	; 0x42
  119980:	e1a00003 	mov	r0, r3
  119984:	ebffaeda 	bl	1054f4 <netdev_get_by_name>
  119988:	e1a03000 	mov	r3, r0
  11998c:	e51b100c 	ldr	r1, [fp, #-12]
  119990:	e1a00003 	mov	r0, r3
  119994:	ebffb1e0 	bl	10611c <netdev_low_level_set_netmask>
#endif /* RT_USING_NETDEV */
}
  119998:	e320f000 	nop	{0}
  11999c:	e24bd004 	sub	sp, fp, #4
  1199a0:	e8bd8800 	pop	{fp, pc}

001199a4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
  1199a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1199a8:	e28db000 	add	fp, sp, #0
  1199ac:	e24dd00c 	sub	sp, sp, #12
  1199b0:	e50b0008 	str	r0, [fp, #-8]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
  1199b4:	e30e3a0c 	movw	r3, #59916	; 0xea0c
  1199b8:	e3403056 	movt	r3, #86	; 0x56
  1199bc:	e51b2008 	ldr	r2, [fp, #-8]
  1199c0:	e5832000 	str	r2, [r3]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
  1199c4:	e320f000 	nop	{0}
  1199c8:	e28bd000 	add	sp, fp, #0
  1199cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1199d0:	e12fff1e 	bx	lr

001199d4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
  1199d4:	e92d4800 	push	{fp, lr}
  1199d8:	e28db004 	add	fp, sp, #4
  1199dc:	e24dd008 	sub	sp, sp, #8
  1199e0:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_UP)) {
  1199e4:	e51b3008 	ldr	r3, [fp, #-8]
  1199e8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1199ec:	e2033001 	and	r3, r3, #1
  1199f0:	e3530000 	cmp	r3, #0
  1199f4:	1a000025 	bne	119a90 <netif_set_up+0xbc>
    netif->flags |= NETIF_FLAG_UP;
  1199f8:	e51b3008 	ldr	r3, [fp, #-8]
  1199fc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119a00:	e3833001 	orr	r3, r3, #1
  119a04:	e6ef2073 	uxtb	r2, r3
  119a08:	e51b3008 	ldr	r3, [fp, #-8]
  119a0c:	e5c32041 	strb	r2, [r3, #65]	; 0x41

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  119a10:	ebffc5cf 	bl	10b154 <sys_now>
  119a14:	e1a02000 	mov	r2, r0
  119a18:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  119a1c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  119a20:	e0832392 	umull	r2, r3, r2, r3
  119a24:	e1a021a3 	lsr	r2, r3, #3
  119a28:	e51b3008 	ldr	r3, [fp, #-8]
  119a2c:	e583204c 	str	r2, [r3, #76]	; 0x4c

    NETIF_STATUS_CALLBACK(netif);
  119a30:	e51b3008 	ldr	r3, [fp, #-8]
  119a34:	e593301c 	ldr	r3, [r3, #28]
  119a38:	e3530000 	cmp	r3, #0
  119a3c:	0a000003 	beq	119a50 <netif_set_up+0x7c>
  119a40:	e51b3008 	ldr	r3, [fp, #-8]
  119a44:	e593301c 	ldr	r3, [r3, #28]
  119a48:	e51b0008 	ldr	r0, [fp, #-8]
  119a4c:	e12fff33 	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
  119a50:	e51b3008 	ldr	r3, [fp, #-8]
  119a54:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119a58:	e2033004 	and	r3, r3, #4
  119a5c:	e3530000 	cmp	r3, #0
  119a60:	0a000002 	beq	119a70 <netif_set_up+0x9c>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  119a64:	e3a01003 	mov	r1, #3
  119a68:	e51b0008 	ldr	r0, [fp, #-8]
  119a6c:	eb00000a 	bl	119a9c <netif_issue_reports>
    }

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set up status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_TRUE);
  119a70:	e51b3008 	ldr	r3, [fp, #-8]
  119a74:	e2833042 	add	r3, r3, #66	; 0x42
  119a78:	e1a00003 	mov	r0, r3
  119a7c:	ebffae9c 	bl	1054f4 <netdev_get_by_name>
  119a80:	e1a03000 	mov	r3, r0
  119a84:	e3a01001 	mov	r1, #1
  119a88:	e1a00003 	mov	r0, r3
  119a8c:	ebffb262 	bl	10641c <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  119a90:	e320f000 	nop	{0}
  119a94:	e24bd004 	sub	sp, fp, #4
  119a98:	e8bd8800 	pop	{fp, pc}

00119a9c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
  119a9c:	e92d4800 	push	{fp, lr}
  119aa0:	e28db004 	add	fp, sp, #4
  119aa4:	e24dd008 	sub	sp, sp, #8
  119aa8:	e50b0008 	str	r0, [fp, #-8]
  119aac:	e1a03001 	mov	r3, r1
  119ab0:	e54b3009 	strb	r3, [fp, #-9]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  119ab4:	e55b3009 	ldrb	r3, [fp, #-9]
  119ab8:	e2033001 	and	r3, r3, #1
  119abc:	e3530000 	cmp	r3, #0
  119ac0:	0a000015 	beq	119b1c <netif_issue_reports+0x80>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  119ac4:	e51b3008 	ldr	r3, [fp, #-8]
  119ac8:	e2833004 	add	r3, r3, #4
  119acc:	e5933000 	ldr	r3, [r3]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  119ad0:	e3530000 	cmp	r3, #0
  119ad4:	0a000010 	beq	119b1c <netif_issue_reports+0x80>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
  119ad8:	e51b3008 	ldr	r3, [fp, #-8]
  119adc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119ae0:	e2033008 	and	r3, r3, #8
  119ae4:	e3530000 	cmp	r3, #0
  119ae8:	0a000004 	beq	119b00 <netif_issue_reports+0x64>
      etharp_gratuitous(netif);
  119aec:	e51b3008 	ldr	r3, [fp, #-8]
  119af0:	e2833004 	add	r3, r3, #4
  119af4:	e1a01003 	mov	r1, r3
  119af8:	e51b0008 	ldr	r0, [fp, #-8]
  119afc:	eb00567f 	bl	12f500 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
  119b00:	e51b3008 	ldr	r3, [fp, #-8]
  119b04:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119b08:	e2033020 	and	r3, r3, #32
  119b0c:	e3530000 	cmp	r3, #0
  119b10:	0a000001 	beq	119b1c <netif_issue_reports+0x80>
      igmp_report_groups(netif);
  119b14:	e51b0008 	ldr	r0, [fp, #-8]
  119b18:	eb005958 	bl	130080 <igmp_report_groups>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
  119b1c:	e320f000 	nop	{0}
  119b20:	e24bd004 	sub	sp, fp, #4
  119b24:	e8bd8800 	pop	{fp, pc}

00119b28 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  119b28:	e92d4800 	push	{fp, lr}
  119b2c:	e28db004 	add	fp, sp, #4
  119b30:	e24dd008 	sub	sp, sp, #8
  119b34:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_UP) {
  119b38:	e51b3008 	ldr	r3, [fp, #-8]
  119b3c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119b40:	e2033001 	and	r3, r3, #1
  119b44:	e3530000 	cmp	r3, #0
  119b48:	0a000024 	beq	119be0 <netif_set_down+0xb8>
    netif->flags &= ~NETIF_FLAG_UP;
  119b4c:	e51b3008 	ldr	r3, [fp, #-8]
  119b50:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119b54:	e3c33001 	bic	r3, r3, #1
  119b58:	e6ef2073 	uxtb	r2, r3
  119b5c:	e51b3008 	ldr	r3, [fp, #-8]
  119b60:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  119b64:	ebffc57a 	bl	10b154 <sys_now>
  119b68:	e1a02000 	mov	r2, r0
  119b6c:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  119b70:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  119b74:	e0832392 	umull	r2, r3, r2, r3
  119b78:	e1a021a3 	lsr	r2, r3, #3
  119b7c:	e51b3008 	ldr	r3, [fp, #-8]
  119b80:	e583204c 	str	r2, [r3, #76]	; 0x4c

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
  119b84:	e51b3008 	ldr	r3, [fp, #-8]
  119b88:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119b8c:	e2033008 	and	r3, r3, #8
  119b90:	e3530000 	cmp	r3, #0
  119b94:	0a000001 	beq	119ba0 <netif_set_down+0x78>
      etharp_cleanup_netif(netif);
  119b98:	e51b0008 	ldr	r0, [fp, #-8]
  119b9c:	eb00519d 	bl	12e218 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  119ba0:	e51b3008 	ldr	r3, [fp, #-8]
  119ba4:	e593301c 	ldr	r3, [r3, #28]
  119ba8:	e3530000 	cmp	r3, #0
  119bac:	0a000003 	beq	119bc0 <netif_set_down+0x98>
  119bb0:	e51b3008 	ldr	r3, [fp, #-8]
  119bb4:	e593301c 	ldr	r3, [r3, #28]
  119bb8:	e51b0008 	ldr	r0, [fp, #-8]
  119bbc:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set down status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_FALSE);
  119bc0:	e51b3008 	ldr	r3, [fp, #-8]
  119bc4:	e2833042 	add	r3, r3, #66	; 0x42
  119bc8:	e1a00003 	mov	r0, r3
  119bcc:	ebffae48 	bl	1054f4 <netdev_get_by_name>
  119bd0:	e1a03000 	mov	r3, r0
  119bd4:	e3a01000 	mov	r1, #0
  119bd8:	e1a00003 	mov	r0, r3
  119bdc:	ebffb20e 	bl	10641c <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  119be0:	e320f000 	nop	{0}
  119be4:	e24bd004 	sub	sp, fp, #4
  119be8:	e8bd8800 	pop	{fp, pc}

00119bec <netif_set_status_callback>:
 * @ingroup netif
 * Set callback to be called when interface is brought up/down or address is changed while up
 */
void
netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  119bec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119bf0:	e28db000 	add	fp, sp, #0
  119bf4:	e24dd00c 	sub	sp, sp, #12
  119bf8:	e50b0008 	str	r0, [fp, #-8]
  119bfc:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  119c00:	e51b3008 	ldr	r3, [fp, #-8]
  119c04:	e3530000 	cmp	r3, #0
  119c08:	0a000002 	beq	119c18 <netif_set_status_callback+0x2c>
    netif->status_callback = status_callback;
  119c0c:	e51b3008 	ldr	r3, [fp, #-8]
  119c10:	e51b200c 	ldr	r2, [fp, #-12]
  119c14:	e583201c 	str	r2, [r3, #28]
  }
}
  119c18:	e320f000 	nop	{0}
  119c1c:	e28bd000 	add	sp, fp, #0
  119c20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119c24:	e12fff1e 	bx	lr

00119c28 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
  119c28:	e92d4800 	push	{fp, lr}
  119c2c:	e28db004 	add	fp, sp, #4
  119c30:	e24dd008 	sub	sp, sp, #8
  119c34:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
  119c38:	e51b3008 	ldr	r3, [fp, #-8]
  119c3c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119c40:	e2033004 	and	r3, r3, #4
  119c44:	e3530000 	cmp	r3, #0
  119c48:	1a00001f 	bne	119ccc <netif_set_link_up+0xa4>
    netif->flags |= NETIF_FLAG_LINK_UP;
  119c4c:	e51b3008 	ldr	r3, [fp, #-8]
  119c50:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119c54:	e3833004 	orr	r3, r3, #4
  119c58:	e6ef2073 	uxtb	r2, r3
  119c5c:	e51b3008 	ldr	r3, [fp, #-8]
  119c60:	e5c32041 	strb	r2, [r3, #65]	; 0x41

#if LWIP_DHCP
    dhcp_network_changed(netif);
  119c64:	e51b0008 	ldr	r0, [fp, #-8]
  119c68:	eb0044de 	bl	12afe8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
  119c6c:	e51b3008 	ldr	r3, [fp, #-8]
  119c70:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119c74:	e2033001 	and	r3, r3, #1
  119c78:	e3530000 	cmp	r3, #0
  119c7c:	0a000002 	beq	119c8c <netif_set_link_up+0x64>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  119c80:	e3a01003 	mov	r1, #3
  119c84:	e51b0008 	ldr	r0, [fp, #-8]
  119c88:	ebffff83 	bl	119a9c <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  119c8c:	e51b3008 	ldr	r3, [fp, #-8]
  119c90:	e5933020 	ldr	r3, [r3, #32]
  119c94:	e3530000 	cmp	r3, #0
  119c98:	0a000003 	beq	119cac <netif_set_link_up+0x84>
  119c9c:	e51b3008 	ldr	r3, [fp, #-8]
  119ca0:	e5933020 	ldr	r3, [r3, #32]
  119ca4:	e51b0008 	ldr	r0, [fp, #-8]
  119ca8:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link up status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_TRUE);
  119cac:	e51b3008 	ldr	r3, [fp, #-8]
  119cb0:	e2833042 	add	r3, r3, #66	; 0x42
  119cb4:	e1a00003 	mov	r0, r3
  119cb8:	ebffae0d 	bl	1054f4 <netdev_get_by_name>
  119cbc:	e1a03000 	mov	r3, r0
  119cc0:	e3a01001 	mov	r1, #1
  119cc4:	e1a00003 	mov	r0, r3
  119cc8:	ebffb203 	bl	1064dc <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  119ccc:	e320f000 	nop	{0}
  119cd0:	e24bd004 	sub	sp, fp, #4
  119cd4:	e8bd8800 	pop	{fp, pc}

00119cd8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
  119cd8:	e92d4800 	push	{fp, lr}
  119cdc:	e28db004 	add	fp, sp, #4
  119ce0:	e24dd008 	sub	sp, sp, #8
  119ce4:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
  119ce8:	e51b3008 	ldr	r3, [fp, #-8]
  119cec:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119cf0:	e2033004 	and	r3, r3, #4
  119cf4:	e3530000 	cmp	r3, #0
  119cf8:	0a000015 	beq	119d54 <netif_set_link_down+0x7c>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
  119cfc:	e51b3008 	ldr	r3, [fp, #-8]
  119d00:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119d04:	e3c33004 	bic	r3, r3, #4
  119d08:	e6ef2073 	uxtb	r2, r3
  119d0c:	e51b3008 	ldr	r3, [fp, #-8]
  119d10:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    NETIF_LINK_CALLBACK(netif);
  119d14:	e51b3008 	ldr	r3, [fp, #-8]
  119d18:	e5933020 	ldr	r3, [r3, #32]
  119d1c:	e3530000 	cmp	r3, #0
  119d20:	0a000003 	beq	119d34 <netif_set_link_down+0x5c>
  119d24:	e51b3008 	ldr	r3, [fp, #-8]
  119d28:	e5933020 	ldr	r3, [r3, #32]
  119d2c:	e51b0008 	ldr	r0, [fp, #-8]
  119d30:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link down status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_FALSE);
  119d34:	e51b3008 	ldr	r3, [fp, #-8]
  119d38:	e2833042 	add	r3, r3, #66	; 0x42
  119d3c:	e1a00003 	mov	r0, r3
  119d40:	ebffadeb 	bl	1054f4 <netdev_get_by_name>
  119d44:	e1a03000 	mov	r3, r0
  119d48:	e3a01000 	mov	r1, #0
  119d4c:	e1a00003 	mov	r0, r3
  119d50:	ebffb1e1 	bl	1064dc <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  119d54:	e320f000 	nop	{0}
  119d58:	e24bd004 	sub	sp, fp, #4
  119d5c:	e8bd8800 	pop	{fp, pc}

00119d60 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
  119d60:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119d64:	e28db000 	add	fp, sp, #0
  119d68:	e24dd00c 	sub	sp, sp, #12
  119d6c:	e50b0008 	str	r0, [fp, #-8]
  119d70:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  119d74:	e51b3008 	ldr	r3, [fp, #-8]
  119d78:	e3530000 	cmp	r3, #0
  119d7c:	0a000002 	beq	119d8c <netif_set_link_callback+0x2c>
    netif->link_callback = link_callback;
  119d80:	e51b3008 	ldr	r3, [fp, #-8]
  119d84:	e51b200c 	ldr	r2, [fp, #-12]
  119d88:	e5832020 	str	r2, [r3, #32]
  }
}
  119d8c:	e320f000 	nop	{0}
  119d90:	e28bd000 	add	sp, fp, #0
  119d94:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119d98:	e12fff1e 	bx	lr

00119d9c <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
  119d9c:	e92d4800 	push	{fp, lr}
  119da0:	e28db004 	add	fp, sp, #4
  119da4:	e24dd018 	sub	sp, sp, #24
  119da8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  119dac:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  119db0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119db4:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  119db8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  119dbc:	e1d330b8 	ldrh	r3, [r3, #8]
  119dc0:	e3a02000 	mov	r2, #0
  119dc4:	e1a01003 	mov	r1, r3
  119dc8:	e3a00002 	mov	r0, #2
  119dcc:	eb000133 	bl	11a2a0 <pbuf_alloc>
  119dd0:	e50b0010 	str	r0, [fp, #-16]
  if (r == NULL) {
  119dd4:	e51b3010 	ldr	r3, [fp, #-16]
  119dd8:	e3530000 	cmp	r3, #0
  119ddc:	1a000016 	bne	119e3c <netif_loop_output+0xa0>
    LINK_STATS_INC(link.memerr);
  119de0:	e30e3a14 	movw	r3, #59924	; 0xea14
  119de4:	e3403056 	movt	r3, #86	; 0x56
  119de8:	e1d330bc 	ldrh	r3, [r3, #12]
  119dec:	e2833001 	add	r3, r3, #1
  119df0:	e6ff2073 	uxth	r2, r3
  119df4:	e30e3a14 	movw	r3, #59924	; 0xea14
  119df8:	e3403056 	movt	r3, #86	; 0x56
  119dfc:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  119e00:	e30e3a14 	movw	r3, #59924	; 0xea14
  119e04:	e3403056 	movt	r3, #86	; 0x56
  119e08:	e1d330b6 	ldrh	r3, [r3, #6]
  119e0c:	e2833001 	add	r3, r3, #1
  119e10:	e6ff2073 	uxth	r2, r3
  119e14:	e30e3a14 	movw	r3, #59924	; 0xea14
  119e18:	e3403056 	movt	r3, #86	; 0x56
  119e1c:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  119e20:	e51b300c 	ldr	r3, [fp, #-12]
  119e24:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119e28:	e2832001 	add	r2, r3, #1
  119e2c:	e51b300c 	ldr	r3, [fp, #-12]
  119e30:	e5832074 	str	r2, [r3, #116]	; 0x74
    return ERR_MEM;
  119e34:	e3e03000 	mvn	r3, #0
  119e38:	ea000063 	b	119fcc <netif_loop_output+0x230>
  }
  netif->loop_cnt_current += clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
  119e3c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  119e40:	e51b0010 	ldr	r0, [fp, #-16]
  119e44:	eb000571 	bl	11b410 <pbuf_copy>
  119e48:	e1a03000 	mov	r3, r0
  119e4c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  119e50:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  119e54:	e3530000 	cmp	r3, #0
  119e58:	0a000018 	beq	119ec0 <netif_loop_output+0x124>
    pbuf_free(r);
  119e5c:	e51b0010 	ldr	r0, [fp, #-16]
  119e60:	eb000415 	bl	11aebc <pbuf_free>
    LINK_STATS_INC(link.memerr);
  119e64:	e30e3a14 	movw	r3, #59924	; 0xea14
  119e68:	e3403056 	movt	r3, #86	; 0x56
  119e6c:	e1d330bc 	ldrh	r3, [r3, #12]
  119e70:	e2833001 	add	r3, r3, #1
  119e74:	e6ff2073 	uxth	r2, r3
  119e78:	e30e3a14 	movw	r3, #59924	; 0xea14
  119e7c:	e3403056 	movt	r3, #86	; 0x56
  119e80:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  119e84:	e30e3a14 	movw	r3, #59924	; 0xea14
  119e88:	e3403056 	movt	r3, #86	; 0x56
  119e8c:	e1d330b6 	ldrh	r3, [r3, #6]
  119e90:	e2833001 	add	r3, r3, #1
  119e94:	e6ff2073 	uxth	r2, r3
  119e98:	e30e3a14 	movw	r3, #59924	; 0xea14
  119e9c:	e3403056 	movt	r3, #86	; 0x56
  119ea0:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  119ea4:	e51b300c 	ldr	r3, [fp, #-12]
  119ea8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119eac:	e2832001 	add	r2, r3, #1
  119eb0:	e51b300c 	ldr	r3, [fp, #-12]
  119eb4:	e5832074 	str	r2, [r3, #116]	; 0x74
    return err;
  119eb8:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  119ebc:	ea000042 	b	119fcc <netif_loop_output+0x230>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next);
  119ec0:	e51b3010 	ldr	r3, [fp, #-16]
  119ec4:	e50b3008 	str	r3, [fp, #-8]
  119ec8:	ea000002 	b	119ed8 <netif_loop_output+0x13c>
  119ecc:	e51b3008 	ldr	r3, [fp, #-8]
  119ed0:	e5933000 	ldr	r3, [r3]
  119ed4:	e50b3008 	str	r3, [fp, #-8]
  119ed8:	e51b3008 	ldr	r3, [fp, #-8]
  119edc:	e5933000 	ldr	r3, [r3]
  119ee0:	e3530000 	cmp	r3, #0
  119ee4:	1afffff8 	bne	119ecc <netif_loop_output+0x130>

  SYS_ARCH_PROTECT(lev);
  119ee8:	ebffa0d3 	bl	10223c <rt_enter_critical>
  if (netif->loop_first != NULL) {
  119eec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119ef0:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119ef4:	e3530000 	cmp	r3, #0
  119ef8:	0a000012 	beq	119f48 <netif_loop_output+0x1ac>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
  119efc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119f00:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119f04:	e3530000 	cmp	r3, #0
  119f08:	1a000006 	bne	119f28 <netif_loop_output+0x18c>
  119f0c:	e30705a0 	movw	r0, #30112	; 0x75a0
  119f10:	e3400014 	movt	r0, #20
  119f14:	ebffa47e 	bl	103114 <rt_kprintf>
  119f18:	e3001382 	movw	r1, #898	; 0x382
  119f1c:	e3070570 	movw	r0, #30064	; 0x7570
  119f20:	e3400014 	movt	r0, #20
  119f24:	ebffc471 	bl	10b0f0 <sys_arch_assert>
    netif->loop_last->next = r;
  119f28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119f2c:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119f30:	e51b2010 	ldr	r2, [fp, #-16]
  119f34:	e5832000 	str	r2, [r3]
    netif->loop_last = last;
  119f38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119f3c:	e51b2008 	ldr	r2, [fp, #-8]
  119f40:	e5832084 	str	r2, [r3, #132]	; 0x84
  119f44:	ea000005 	b	119f60 <netif_loop_output+0x1c4>
  } else {
    netif->loop_first = r;
  119f48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119f4c:	e51b2010 	ldr	r2, [fp, #-16]
  119f50:	e5832080 	str	r2, [r3, #128]	; 0x80
    netif->loop_last = last;
  119f54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119f58:	e51b2008 	ldr	r2, [fp, #-8]
  119f5c:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
  SYS_ARCH_UNPROTECT(lev);
  119f60:	ebffa0bb 	bl	102254 <rt_exit_critical>

  LINK_STATS_INC(link.xmit);
  119f64:	e30e3a14 	movw	r3, #59924	; 0xea14
  119f68:	e3403056 	movt	r3, #86	; 0x56
  119f6c:	e1d330b0 	ldrh	r3, [r3]
  119f70:	e2833001 	add	r3, r3, #1
  119f74:	e6ff2073 	uxth	r2, r3
  119f78:	e30e3a14 	movw	r3, #59924	; 0xea14
  119f7c:	e3403056 	movt	r3, #86	; 0x56
  119f80:	e1c320b0 	strh	r2, [r3]
  MIB2_STATS_NETIF_ADD(stats_if, ifoutoctets, p->tot_len);
  119f84:	e51b300c 	ldr	r3, [fp, #-12]
  119f88:	e5933068 	ldr	r3, [r3, #104]	; 0x68
  119f8c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  119f90:	e1d220b8 	ldrh	r2, [r2, #8]
  119f94:	e0832002 	add	r2, r3, r2
  119f98:	e51b300c 	ldr	r3, [fp, #-12]
  119f9c:	e5832068 	str	r2, [r3, #104]	; 0x68
  MIB2_STATS_NETIF_INC(stats_if, ifoutucastpkts);
  119fa0:	e51b300c 	ldr	r3, [fp, #-12]
  119fa4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  119fa8:	e2832001 	add	r2, r3, #1
  119fac:	e51b300c 	ldr	r3, [fp, #-12]
  119fb0:	e583206c 	str	r2, [r3, #108]	; 0x6c

#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  /* For multithreading environment, schedule a call to netif_poll */
  tcpip_callback_with_block((tcpip_callback_fn)netif_poll, netif, 0);
  119fb4:	e3a02000 	mov	r2, #0
  119fb8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  119fbc:	e3090fd8 	movw	r0, #40920	; 0x9fd8
  119fc0:	e3400011 	movt	r0, #17
  119fc4:	ebfff084 	bl	1161dc <tcpip_callback_with_block>
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
  119fc8:	e3a03000 	mov	r3, #0
}
  119fcc:	e1a00003 	mov	r0, r3
  119fd0:	e24bd004 	sub	sp, fp, #4
  119fd4:	e8bd8800 	pop	{fp, pc}

00119fd8 <netif_poll>:
 * netif_loop_output() are put on a list that is passed to netif->input() by
 * netif_poll().
 */
void
netif_poll(struct netif *netif)
{
  119fd8:	e92d4800 	push	{fp, lr}
  119fdc:	e28db004 	add	fp, sp, #4
  119fe0:	e24dd018 	sub	sp, sp, #24
  119fe4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  119fe8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119fec:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Get a packet from the list. With SYS_LIGHTWEIGHT_PROT=1, this is protected */
  SYS_ARCH_PROTECT(lev);
  119ff0:	ebffa091 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  119ff4:	ea000056 	b	11a154 <netif_poll+0x17c>
    struct pbuf *in, *in_end;
#if LWIP_LOOPBACK_MAX_PBUFS
    u8_t clen = 1;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    in = in_end = netif->loop_first;
  119ff8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119ffc:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  11a000:	e50b3008 	str	r3, [fp, #-8]
  11a004:	e51b3008 	ldr	r3, [fp, #-8]
  11a008:	e50b3010 	str	r3, [fp, #-16]
    while (in_end->len != in_end->tot_len) {
  11a00c:	ea00000d 	b	11a048 <netif_poll+0x70>
      LWIP_ASSERT("bogus pbuf: len != tot_len but next == NULL!", in_end->next != NULL);
  11a010:	e51b3008 	ldr	r3, [fp, #-8]
  11a014:	e5933000 	ldr	r3, [r3]
  11a018:	e3530000 	cmp	r3, #0
  11a01c:	1a000006 	bne	11a03c <netif_poll+0x64>
  11a020:	e30705cc 	movw	r0, #30156	; 0x75cc
  11a024:	e3400014 	movt	r0, #20
  11a028:	ebffa439 	bl	103114 <rt_kprintf>
  11a02c:	e30013ca 	movw	r1, #970	; 0x3ca
  11a030:	e3070570 	movw	r0, #30064	; 0x7570
  11a034:	e3400014 	movt	r0, #20
  11a038:	ebffc42c 	bl	10b0f0 <sys_arch_assert>
      in_end = in_end->next;
  11a03c:	e51b3008 	ldr	r3, [fp, #-8]
  11a040:	e5933000 	ldr	r3, [r3]
  11a044:	e50b3008 	str	r3, [fp, #-8]
    while (in_end->len != in_end->tot_len) {
  11a048:	e51b3008 	ldr	r3, [fp, #-8]
  11a04c:	e1d320ba 	ldrh	r2, [r3, #10]
  11a050:	e51b3008 	ldr	r3, [fp, #-8]
  11a054:	e1d330b8 	ldrh	r3, [r3, #8]
  11a058:	e1520003 	cmp	r2, r3
  11a05c:	1affffeb 	bne	11a010 <netif_poll+0x38>
      ((netif->loop_cnt_current - clen) < netif->loop_cnt_current));
    netif->loop_cnt_current -= clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    /* 'in_end' now points to the last pbuf from 'in' */
    if (in_end == netif->loop_last) {
  11a060:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a064:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11a068:	e51b2008 	ldr	r2, [fp, #-8]
  11a06c:	e1520003 	cmp	r2, r3
  11a070:	1a000007 	bne	11a094 <netif_poll+0xbc>
      /* this was the last pbuf in the list */
      netif->loop_first = netif->loop_last = NULL;
  11a074:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a078:	e3a02000 	mov	r2, #0
  11a07c:	e5832084 	str	r2, [r3, #132]	; 0x84
  11a080:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a084:	e5932084 	ldr	r2, [r3, #132]	; 0x84
  11a088:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a08c:	e5832080 	str	r2, [r3, #128]	; 0x80
  11a090:	ea00000e 	b	11a0d0 <netif_poll+0xf8>
    } else {
      /* pop the pbuf off the list */
      netif->loop_first = in_end->next;
  11a094:	e51b3008 	ldr	r3, [fp, #-8]
  11a098:	e5932000 	ldr	r2, [r3]
  11a09c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a0a0:	e5832080 	str	r2, [r3, #128]	; 0x80
      LWIP_ASSERT("should not be null since first != last!", netif->loop_first != NULL);
  11a0a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a0a8:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  11a0ac:	e3530000 	cmp	r3, #0
  11a0b0:	1a000006 	bne	11a0d0 <netif_poll+0xf8>
  11a0b4:	e30705fc 	movw	r0, #30204	; 0x75fc
  11a0b8:	e3400014 	movt	r0, #20
  11a0bc:	ebffa414 	bl	103114 <rt_kprintf>
  11a0c0:	e30013de 	movw	r1, #990	; 0x3de
  11a0c4:	e3070570 	movw	r0, #30064	; 0x7570
  11a0c8:	e3400014 	movt	r0, #20
  11a0cc:	ebffc407 	bl	10b0f0 <sys_arch_assert>
    }
    /* De-queue the pbuf from its successors on the 'loop_' list. */
    in_end->next = NULL;
  11a0d0:	e51b3008 	ldr	r3, [fp, #-8]
  11a0d4:	e3a02000 	mov	r2, #0
  11a0d8:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  11a0dc:	ebffa05c 	bl	102254 <rt_exit_critical>

    LINK_STATS_INC(link.recv);
  11a0e0:	e30e3a14 	movw	r3, #59924	; 0xea14
  11a0e4:	e3403056 	movt	r3, #86	; 0x56
  11a0e8:	e1d330b2 	ldrh	r3, [r3, #2]
  11a0ec:	e2833001 	add	r3, r3, #1
  11a0f0:	e6ff2073 	uxth	r2, r3
  11a0f4:	e30e3a14 	movw	r3, #59924	; 0xea14
  11a0f8:	e3403056 	movt	r3, #86	; 0x56
  11a0fc:	e1c320b2 	strh	r2, [r3, #2]
    MIB2_STATS_NETIF_ADD(stats_if, ifinoctets, in->tot_len);
  11a100:	e51b300c 	ldr	r3, [fp, #-12]
  11a104:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  11a108:	e51b2010 	ldr	r2, [fp, #-16]
  11a10c:	e1d220b8 	ldrh	r2, [r2, #8]
  11a110:	e0832002 	add	r2, r3, r2
  11a114:	e51b300c 	ldr	r3, [fp, #-12]
  11a118:	e5832050 	str	r2, [r3, #80]	; 0x50
    MIB2_STATS_NETIF_INC(stats_if, ifinucastpkts);
  11a11c:	e51b300c 	ldr	r3, [fp, #-12]
  11a120:	e5933054 	ldr	r3, [r3, #84]	; 0x54
  11a124:	e2832001 	add	r2, r3, #1
  11a128:	e51b300c 	ldr	r3, [fp, #-12]
  11a12c:	e5832054 	str	r2, [r3, #84]	; 0x54
    /* loopback packets are always IP packets! */
    if (ip_input(in, netif) != ERR_OK) {
  11a130:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11a134:	e51b0010 	ldr	r0, [fp, #-16]
  11a138:	eb005cbe 	bl	131438 <ip4_input>
  11a13c:	e1a03000 	mov	r3, r0
  11a140:	e3530000 	cmp	r3, #0
  11a144:	0a000001 	beq	11a150 <netif_poll+0x178>
      pbuf_free(in);
  11a148:	e51b0010 	ldr	r0, [fp, #-16]
  11a14c:	eb00035a 	bl	11aebc <pbuf_free>
    }
    SYS_ARCH_PROTECT(lev);
  11a150:	ebffa039 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  11a154:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a158:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  11a15c:	e3530000 	cmp	r3, #0
  11a160:	1affffa4 	bne	119ff8 <netif_poll+0x20>
  }
  SYS_ARCH_UNPROTECT(lev);
  11a164:	ebffa03a 	bl	102254 <rt_exit_critical>
}
  11a168:	e320f000 	nop	{0}
  11a16c:	e24bd004 	sub	sp, fp, #4
  11a170:	e8bd8800 	pop	{fp, pc}

0011a174 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
  11a174:	e92d4800 	push	{fp, lr}
  11a178:	e28db004 	add	fp, sp, #4
  11a17c:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
  11a180:	ebffa02d 	bl	10223c <rt_enter_critical>
  11a184:	e30e3a10 	movw	r3, #59920	; 0xea10
  11a188:	e3403056 	movt	r3, #86	; 0x56
  11a18c:	e3a02000 	mov	r2, #0
  11a190:	e5c32000 	strb	r2, [r3]
  11a194:	ebffa02e 	bl	102254 <rt_exit_critical>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  11a198:	e30e3c04 	movw	r3, #60420	; 0xec04
  11a19c:	e3403056 	movt	r3, #86	; 0x56
  11a1a0:	e5933000 	ldr	r3, [r3]
  11a1a4:	e50b3008 	str	r3, [fp, #-8]
  11a1a8:	ea00000e 	b	11a1e8 <pbuf_free_ooseq+0x74>
    if (NULL != pcb->ooseq) {
  11a1ac:	e51b3008 	ldr	r3, [fp, #-8]
  11a1b0:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11a1b4:	e3530000 	cmp	r3, #0
  11a1b8:	0a000007 	beq	11a1dc <pbuf_free_ooseq+0x68>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
  11a1bc:	e51b3008 	ldr	r3, [fp, #-8]
  11a1c0:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11a1c4:	e1a00003 	mov	r0, r3
  11a1c8:	eb00149b 	bl	11f43c <tcp_segs_free>
      pcb->ooseq = NULL;
  11a1cc:	e51b3008 	ldr	r3, [fp, #-8]
  11a1d0:	e3a02000 	mov	r2, #0
  11a1d4:	e5832074 	str	r2, [r3, #116]	; 0x74
      return;
  11a1d8:	ea000005 	b	11a1f4 <pbuf_free_ooseq+0x80>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  11a1dc:	e51b3008 	ldr	r3, [fp, #-8]
  11a1e0:	e593300c 	ldr	r3, [r3, #12]
  11a1e4:	e50b3008 	str	r3, [fp, #-8]
  11a1e8:	e51b3008 	ldr	r3, [fp, #-8]
  11a1ec:	e3530000 	cmp	r3, #0
  11a1f0:	1affffed 	bne	11a1ac <pbuf_free_ooseq+0x38>
    }
  }
}
  11a1f4:	e24bd004 	sub	sp, fp, #4
  11a1f8:	e8bd8800 	pop	{fp, pc}

0011a1fc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
  11a1fc:	e92d4800 	push	{fp, lr}
  11a200:	e28db004 	add	fp, sp, #4
  11a204:	e24dd008 	sub	sp, sp, #8
  11a208:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
  11a20c:	ebffffd8 	bl	11a174 <pbuf_free_ooseq>
}
  11a210:	e320f000 	nop	{0}
  11a214:	e24bd004 	sub	sp, fp, #4
  11a218:	e8bd8800 	pop	{fp, pc}

0011a21c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
  11a21c:	e92d4800 	push	{fp, lr}
  11a220:	e28db004 	add	fp, sp, #4
  11a224:	e24dd008 	sub	sp, sp, #8
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  11a228:	ebffa003 	bl	10223c <rt_enter_critical>
  queued = pbuf_free_ooseq_pending;
  11a22c:	e30e3a10 	movw	r3, #59920	; 0xea10
  11a230:	e3403056 	movt	r3, #86	; 0x56
  11a234:	e5d33000 	ldrb	r3, [r3]
  11a238:	e54b3005 	strb	r3, [fp, #-5]
  pbuf_free_ooseq_pending = 1;
  11a23c:	e30e3a10 	movw	r3, #59920	; 0xea10
  11a240:	e3403056 	movt	r3, #86	; 0x56
  11a244:	e3a02001 	mov	r2, #1
  11a248:	e5c32000 	strb	r2, [r3]
  SYS_ARCH_UNPROTECT(old_level);
  11a24c:	ebffa000 	bl	102254 <rt_exit_critical>

  if (!queued) {
  11a250:	e55b3005 	ldrb	r3, [fp, #-5]
  11a254:	e3530000 	cmp	r3, #0
  11a258:	1a00000d 	bne	11a294 <pbuf_pool_is_empty+0x78>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  11a25c:	e3a02000 	mov	r2, #0
  11a260:	e3a01000 	mov	r1, #0
  11a264:	e30a01fc 	movw	r0, #41468	; 0xa1fc
  11a268:	e3400011 	movt	r0, #17
  11a26c:	ebffefda 	bl	1161dc <tcpip_callback_with_block>
  11a270:	e1a03000 	mov	r3, r0
  11a274:	e3530000 	cmp	r3, #0
  11a278:	0a000005 	beq	11a294 <pbuf_pool_is_empty+0x78>
  11a27c:	ebff9fee 	bl	10223c <rt_enter_critical>
  11a280:	e30e3a10 	movw	r3, #59920	; 0xea10
  11a284:	e3403056 	movt	r3, #86	; 0x56
  11a288:	e3a02000 	mov	r2, #0
  11a28c:	e5c32000 	strb	r2, [r3]
  11a290:	ebff9fef 	bl	102254 <rt_exit_critical>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
  11a294:	e320f000 	nop	{0}
  11a298:	e24bd004 	sub	sp, fp, #4
  11a29c:	e8bd8800 	pop	{fp, pc}

0011a2a0 <pbuf_alloc>:
 * is the first pbuf of a pbuf chain.
 */
#include <stdio.h>
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
  11a2a0:	e92d4800 	push	{fp, lr}
  11a2a4:	e28db004 	add	fp, sp, #4
  11a2a8:	e24dd028 	sub	sp, sp, #40	; 0x28
  11a2ac:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11a2b0:	e1a03001 	mov	r3, r1
  11a2b4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  11a2b8:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
  11a2bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11a2c0:	e3530004 	cmp	r3, #4
  11a2c4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a2c8:	ea000013 	b	11a31c <pbuf_alloc+0x7c>
  11a2cc:	0011a2e0 	.word	0x0011a2e0
  11a2d0:	0011a2ec 	.word	0x0011a2ec
  11a2d4:	0011a2f8 	.word	0x0011a2f8
  11a2d8:	0011a304 	.word	0x0011a304
  11a2dc:	0011a310 	.word	0x0011a310
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  11a2e0:	e3a03038 	mov	r3, #56	; 0x38
  11a2e4:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a2e8:	ea000014 	b	11a340 <pbuf_alloc+0xa0>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  11a2ec:	e3a03024 	mov	r3, #36	; 0x24
  11a2f0:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a2f4:	ea000011 	b	11a340 <pbuf_alloc+0xa0>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  11a2f8:	e3a03010 	mov	r3, #16
  11a2fc:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a300:	ea00000e 	b	11a340 <pbuf_alloc+0xa0>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  11a304:	e3a03000 	mov	r3, #0
  11a308:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a30c:	ea00000b 	b	11a340 <pbuf_alloc+0xa0>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
  11a310:	e3a03000 	mov	r3, #0
  11a314:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a318:	ea000008 	b	11a340 <pbuf_alloc+0xa0>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
  11a31c:	e3070624 	movw	r0, #30244	; 0x7624
  11a320:	e3400014 	movt	r0, #20
  11a324:	ebffa37a 	bl	103114 <rt_kprintf>
  11a328:	e3001117 	movw	r1, #279	; 0x117
  11a32c:	e3070640 	movw	r0, #30272	; 0x7640
  11a330:	e3400014 	movt	r0, #20
  11a334:	ebffc36d 	bl	10b0f0 <sys_arch_assert>
    return NULL;
  11a338:	e3a03000 	mov	r3, #0
  11a33c:	ea000139 	b	11a828 <pbuf_alloc+0x588>
  }

  switch (type) {
  11a340:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a344:	e3530003 	cmp	r3, #3
  11a348:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a34c:	ea000124 	b	11a7e4 <pbuf_alloc+0x544>
  11a350:	0011a66c 	.word	0x0011a66c
  11a354:	0011a770 	.word	0x0011a770
  11a358:	0011a770 	.word	0x0011a770
  11a35c:	0011a360 	.word	0x0011a360
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  11a360:	e300211e 	movw	r2, #286	; 0x11e
  11a364:	e3071640 	movw	r1, #30272	; 0x7640
  11a368:	e3401014 	movt	r1, #20
  11a36c:	e3a00010 	mov	r0, #16
  11a370:	ebfffb5b 	bl	1190e4 <memp_malloc_fn>
  11a374:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
  11a378:	e51b3008 	ldr	r3, [fp, #-8]
  11a37c:	e3530000 	cmp	r3, #0
  11a380:	1a000002 	bne	11a390 <pbuf_alloc+0xf0>
      PBUF_POOL_IS_EMPTY();
  11a384:	ebffffa4 	bl	11a21c <pbuf_pool_is_empty>
      return NULL;
  11a388:	e3a03000 	mov	r3, #0
  11a38c:	ea000125 	b	11a828 <pbuf_alloc+0x588>
    }
    p->type = type;
  11a390:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a394:	e6ef2073 	uxtb	r2, r3
  11a398:	e51b3008 	ldr	r3, [fp, #-8]
  11a39c:	e5c3200c 	strb	r2, [r3, #12]
    p->next = NULL;
  11a3a0:	e51b3008 	ldr	r3, [fp, #-8]
  11a3a4:	e3a02000 	mov	r2, #0
  11a3a8:	e5832000 	str	r2, [r3]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  11a3ac:	e15b30be 	ldrh	r3, [fp, #-14]
  11a3b0:	e2833010 	add	r3, r3, #16
  11a3b4:	e51b2008 	ldr	r2, [fp, #-8]
  11a3b8:	e0823003 	add	r3, r2, r3
  11a3bc:	e2833003 	add	r3, r3, #3
  11a3c0:	e3c33003 	bic	r3, r3, #3
  11a3c4:	e1a02003 	mov	r2, r3
  11a3c8:	e51b3008 	ldr	r3, [fp, #-8]
  11a3cc:	e5832004 	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
  11a3d0:	e51b3008 	ldr	r3, [fp, #-8]
  11a3d4:	e5933004 	ldr	r3, [r3, #4]
  11a3d8:	e2033003 	and	r3, r3, #3
  11a3dc:	e3530000 	cmp	r3, #0
  11a3e0:	0a000006 	beq	11a400 <pbuf_alloc+0x160>
  11a3e4:	e307066c 	movw	r0, #30316	; 0x766c
  11a3e8:	e3400014 	movt	r0, #20
  11a3ec:	ebffa348 	bl	103114 <rt_kprintf>
  11a3f0:	e300112a 	movw	r1, #298	; 0x12a
  11a3f4:	e3070640 	movw	r0, #30272	; 0x7640
  11a3f8:	e3400014 	movt	r0, #20
  11a3fc:	ebffc33b 	bl	10b0f0 <sys_arch_assert>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
  11a400:	e51b3008 	ldr	r3, [fp, #-8]
  11a404:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a408:	e1c320b8 	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  11a40c:	e15b30be 	ldrh	r3, [fp, #-14]
  11a410:	e2833003 	add	r3, r3, #3
  11a414:	e3c33003 	bic	r3, r3, #3
  11a418:	e2633e5e 	rsb	r3, r3, #1504	; 0x5e0
  11a41c:	e283300c 	add	r3, r3, #12
  11a420:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a424:	e1530002 	cmp	r3, r2
  11a428:	31a03003 	movcc	r3, r3
  11a42c:	21a03002 	movcs	r3, r2
  11a430:	e6ff2073 	uxth	r2, r3
  11a434:	e51b3008 	ldr	r3, [fp, #-8]
  11a438:	e1c320ba 	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a43c:	e51b3008 	ldr	r3, [fp, #-8]
  11a440:	e5933004 	ldr	r3, [r3, #4]
  11a444:	e51b2008 	ldr	r2, [fp, #-8]
  11a448:	e1d220ba 	ldrh	r2, [r2, #10]
  11a44c:	e0832002 	add	r2, r3, r2
  11a450:	e51b3008 	ldr	r3, [fp, #-8]
  11a454:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a458:	e283300c 	add	r3, r3, #12
  11a45c:	e1520003 	cmp	r2, r3
  11a460:	9a000006 	bls	11a480 <pbuf_alloc+0x1e0>
  11a464:	e307069c 	movw	r0, #30364	; 0x769c
  11a468:	e3400014 	movt	r0, #20
  11a46c:	ebffa328 	bl	103114 <rt_kprintf>
  11a470:	e3001131 	movw	r1, #305	; 0x131
  11a474:	e3070640 	movw	r0, #30272	; 0x7640
  11a478:	e3400014 	movt	r0, #20
  11a47c:	ebffc31b 	bl	10b0f0 <sys_arch_assert>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
  11a480:	e15b30be 	ldrh	r3, [fp, #-14]
  11a484:	e2833003 	add	r3, r3, #3
  11a488:	e3c33003 	bic	r3, r3, #3
  11a48c:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a490:	e1530002 	cmp	r3, r2
  11a494:	1a000006 	bne	11a4b4 <pbuf_alloc+0x214>
  11a498:	e30706d0 	movw	r0, #30416	; 0x76d0
  11a49c:	e3400014 	movt	r0, #20
  11a4a0:	ebffa31b 	bl	103114 <rt_kprintf>
  11a4a4:	e3001133 	movw	r1, #307	; 0x133
  11a4a8:	e3070640 	movw	r0, #30272	; 0x7640
  11a4ac:	e3400014 	movt	r0, #20
  11a4b0:	ebffc30e 	bl	10b0f0 <sys_arch_assert>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
  11a4b4:	e51b3008 	ldr	r3, [fp, #-8]
  11a4b8:	e3a02001 	mov	r2, #1
  11a4bc:	e1c320be 	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
  11a4c0:	e51b3008 	ldr	r3, [fp, #-8]
  11a4c4:	e50b300c 	str	r3, [fp, #-12]
    /* remaining length to be allocated */
    rem_len = length - p->len;
  11a4c8:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a4cc:	e51b2008 	ldr	r2, [fp, #-8]
  11a4d0:	e1d220ba 	ldrh	r2, [r2, #10]
  11a4d4:	e0433002 	sub	r3, r3, r2
  11a4d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  11a4dc:	ea00005e 	b	11a65c <pbuf_alloc+0x3bc>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  11a4e0:	e300213f 	movw	r2, #319	; 0x13f
  11a4e4:	e3071640 	movw	r1, #30272	; 0x7640
  11a4e8:	e3401014 	movt	r1, #20
  11a4ec:	e3a00010 	mov	r0, #16
  11a4f0:	ebfffafb 	bl	1190e4 <memp_malloc_fn>
  11a4f4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
      if (q == NULL) {
  11a4f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a4fc:	e3530000 	cmp	r3, #0
  11a500:	1a000004 	bne	11a518 <pbuf_alloc+0x278>
        PBUF_POOL_IS_EMPTY();
  11a504:	ebffff44 	bl	11a21c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
  11a508:	e51b0008 	ldr	r0, [fp, #-8]
  11a50c:	eb00026a 	bl	11aebc <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
  11a510:	e3a03000 	mov	r3, #0
  11a514:	ea0000c3 	b	11a828 <pbuf_alloc+0x588>
      }
      q->type = type;
  11a518:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a51c:	e6ef2073 	uxtb	r2, r3
  11a520:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a524:	e5c3200c 	strb	r2, [r3, #12]
      q->flags = 0;
  11a528:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a52c:	e3a02000 	mov	r2, #0
  11a530:	e5c3200d 	strb	r2, [r3, #13]
      q->next = NULL;
  11a534:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a538:	e3a02000 	mov	r2, #0
  11a53c:	e5832000 	str	r2, [r3]
      /* make previous pbuf point to this pbuf */
      r->next = q;
  11a540:	e51b300c 	ldr	r3, [fp, #-12]
  11a544:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11a548:	e5832000 	str	r2, [r3]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
  11a54c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a550:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11a554:	e1530002 	cmp	r3, r2
  11a558:	da000006 	ble	11a578 <pbuf_alloc+0x2d8>
  11a55c:	e3070704 	movw	r0, #30468	; 0x7704
  11a560:	e3400014 	movt	r0, #20
  11a564:	ebffa2ea 	bl	103114 <rt_kprintf>
  11a568:	e300114d 	movw	r1, #333	; 0x14d
  11a56c:	e3070640 	movw	r0, #30272	; 0x7640
  11a570:	e3400014 	movt	r0, #20
  11a574:	ebffc2dd 	bl	10b0f0 <sys_arch_assert>
      q->tot_len = (u16_t)rem_len;
  11a578:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a57c:	e6ff2073 	uxth	r2, r3
  11a580:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a584:	e1c320b8 	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  11a588:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a58c:	e6ff3073 	uxth	r3, r3
  11a590:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a594:	e1530002 	cmp	r3, r2
  11a598:	31a03003 	movcc	r3, r3
  11a59c:	21a03002 	movcs	r3, r2
  11a5a0:	e6ff2073 	uxth	r2, r3
  11a5a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a5a8:	e1c320ba 	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  11a5ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a5b0:	e2832010 	add	r2, r3, #16
  11a5b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a5b8:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
  11a5bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a5c0:	e5933004 	ldr	r3, [r3, #4]
  11a5c4:	e2033003 	and	r3, r3, #3
  11a5c8:	e3530000 	cmp	r3, #0
  11a5cc:	0a000006 	beq	11a5ec <pbuf_alloc+0x34c>
  11a5d0:	e3070718 	movw	r0, #30488	; 0x7718
  11a5d4:	e3400014 	movt	r0, #20
  11a5d8:	ebffa2cd 	bl	103114 <rt_kprintf>
  11a5dc:	e3001153 	movw	r1, #339	; 0x153
  11a5e0:	e3070640 	movw	r0, #30272	; 0x7640
  11a5e4:	e3400014 	movt	r0, #20
  11a5e8:	ebffc2c0 	bl	10b0f0 <sys_arch_assert>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a5ec:	e51b3008 	ldr	r3, [fp, #-8]
  11a5f0:	e5933004 	ldr	r3, [r3, #4]
  11a5f4:	e51b2008 	ldr	r2, [fp, #-8]
  11a5f8:	e1d220ba 	ldrh	r2, [r2, #10]
  11a5fc:	e0832002 	add	r2, r3, r2
  11a600:	e51b3008 	ldr	r3, [fp, #-8]
  11a604:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a608:	e283300c 	add	r3, r3, #12
  11a60c:	e1520003 	cmp	r2, r3
  11a610:	9a000006 	bls	11a630 <pbuf_alloc+0x390>
  11a614:	e307069c 	movw	r0, #30364	; 0x769c
  11a618:	e3400014 	movt	r0, #20
  11a61c:	ebffa2bc 	bl	103114 <rt_kprintf>
  11a620:	e3001156 	movw	r1, #342	; 0x156
  11a624:	e3070640 	movw	r0, #30272	; 0x7640
  11a628:	e3400014 	movt	r0, #20
  11a62c:	ebffc2af 	bl	10b0f0 <sys_arch_assert>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
  11a630:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a634:	e3a02001 	mov	r2, #1
  11a638:	e1c320be 	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
  11a63c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a640:	e1d330ba 	ldrh	r3, [r3, #10]
  11a644:	e1a02003 	mov	r2, r3
  11a648:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a64c:	e0433002 	sub	r3, r3, r2
  11a650:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* remember this pbuf for linkage in next iteration */
      r = q;
  11a654:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a658:	e50b300c 	str	r3, [fp, #-12]
    while (rem_len > 0) {
  11a65c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a660:	e3530000 	cmp	r3, #0
  11a664:	caffff9d 	bgt	11a4e0 <pbuf_alloc+0x240>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
  11a668:	ea000067 	b	11a80c <pbuf_alloc+0x56c>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
  11a66c:	e15b30be 	ldrh	r3, [fp, #-14]
  11a670:	e2833013 	add	r3, r3, #19
  11a674:	e6ff3073 	uxth	r3, r3
  11a678:	e3c33003 	bic	r3, r3, #3
  11a67c:	e6ff2073 	uxth	r2, r3
  11a680:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a684:	e2833003 	add	r3, r3, #3
  11a688:	e6ff3073 	uxth	r3, r3
  11a68c:	e3c33003 	bic	r3, r3, #3
  11a690:	e6ff3073 	uxth	r3, r3
  11a694:	e0823003 	add	r3, r2, r3
  11a698:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
  11a69c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11a6a0:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a6a4:	e2833003 	add	r3, r3, #3
  11a6a8:	e3c33003 	bic	r3, r3, #3
  11a6ac:	e1520003 	cmp	r2, r3
  11a6b0:	2a000001 	bcs	11a6bc <pbuf_alloc+0x41c>
        return NULL;
  11a6b4:	e3a03000 	mov	r3, #0
  11a6b8:	ea00005a 	b	11a828 <pbuf_alloc+0x588>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
  11a6bc:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11a6c0:	e1a00003 	mov	r0, r3
  11a6c4:	ebffc2ca 	bl	10b1f4 <mem_malloc>
  11a6c8:	e50b0008 	str	r0, [fp, #-8]
    }

    if (p == NULL) {
  11a6cc:	e51b3008 	ldr	r3, [fp, #-8]
  11a6d0:	e3530000 	cmp	r3, #0
  11a6d4:	1a000001 	bne	11a6e0 <pbuf_alloc+0x440>
      return NULL;
  11a6d8:	e3a03000 	mov	r3, #0
  11a6dc:	ea000051 	b	11a828 <pbuf_alloc+0x588>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  11a6e0:	e15b30be 	ldrh	r3, [fp, #-14]
  11a6e4:	e2833010 	add	r3, r3, #16
  11a6e8:	e51b2008 	ldr	r2, [fp, #-8]
  11a6ec:	e0823003 	add	r3, r2, r3
  11a6f0:	e2833003 	add	r3, r3, #3
  11a6f4:	e3c33003 	bic	r3, r3, #3
  11a6f8:	e1a02003 	mov	r2, r3
  11a6fc:	e51b3008 	ldr	r3, [fp, #-8]
  11a700:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a704:	e51b3008 	ldr	r3, [fp, #-8]
  11a708:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a70c:	e1c320b8 	strh	r2, [r3, #8]
  11a710:	e51b3008 	ldr	r3, [fp, #-8]
  11a714:	e1d320b8 	ldrh	r2, [r3, #8]
  11a718:	e51b3008 	ldr	r3, [fp, #-8]
  11a71c:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a720:	e51b3008 	ldr	r3, [fp, #-8]
  11a724:	e3a02000 	mov	r2, #0
  11a728:	e5832000 	str	r2, [r3]
    p->type = type;
  11a72c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a730:	e6ef2073 	uxtb	r2, r3
  11a734:	e51b3008 	ldr	r3, [fp, #-8]
  11a738:	e5c3200c 	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
  11a73c:	e51b3008 	ldr	r3, [fp, #-8]
  11a740:	e5933004 	ldr	r3, [r3, #4]
  11a744:	e2033003 	and	r3, r3, #3
  11a748:	e3530000 	cmp	r3, #0
  11a74c:	0a00002d 	beq	11a808 <pbuf_alloc+0x568>
  11a750:	e3070748 	movw	r0, #30536	; 0x7748
  11a754:	e3400014 	movt	r0, #20
  11a758:	ebffa26d 	bl	103114 <rt_kprintf>
  11a75c:	e3a01f5e 	mov	r1, #376	; 0x178
  11a760:	e3070640 	movw	r0, #30272	; 0x7640
  11a764:	e3400014 	movt	r0, #20
  11a768:	ebffc260 	bl	10b0f0 <sys_arch_assert>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
  11a76c:	ea000025 	b	11a808 <pbuf_alloc+0x568>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  11a770:	e300217f 	movw	r2, #383	; 0x17f
  11a774:	e3071640 	movw	r1, #30272	; 0x7640
  11a778:	e3401014 	movt	r1, #20
  11a77c:	e3a0000f 	mov	r0, #15
  11a780:	ebfffa57 	bl	1190e4 <memp_malloc_fn>
  11a784:	e50b0008 	str	r0, [fp, #-8]
    if (p == NULL) {
  11a788:	e51b3008 	ldr	r3, [fp, #-8]
  11a78c:	e3530000 	cmp	r3, #0
  11a790:	1a000001 	bne	11a79c <pbuf_alloc+0x4fc>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
  11a794:	e3a03000 	mov	r3, #0
  11a798:	ea000022 	b	11a828 <pbuf_alloc+0x588>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
  11a79c:	e51b3008 	ldr	r3, [fp, #-8]
  11a7a0:	e3a02000 	mov	r2, #0
  11a7a4:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a7a8:	e51b3008 	ldr	r3, [fp, #-8]
  11a7ac:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a7b0:	e1c320b8 	strh	r2, [r3, #8]
  11a7b4:	e51b3008 	ldr	r3, [fp, #-8]
  11a7b8:	e1d320b8 	ldrh	r2, [r3, #8]
  11a7bc:	e51b3008 	ldr	r3, [fp, #-8]
  11a7c0:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a7c4:	e51b3008 	ldr	r3, [fp, #-8]
  11a7c8:	e3a02000 	mov	r2, #0
  11a7cc:	e5832000 	str	r2, [r3]
    p->type = type;
  11a7d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a7d4:	e6ef2073 	uxtb	r2, r3
  11a7d8:	e51b3008 	ldr	r3, [fp, #-8]
  11a7dc:	e5c3200c 	strb	r2, [r3, #12]
    break;
  11a7e0:	ea000009 	b	11a80c <pbuf_alloc+0x56c>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
  11a7e4:	e3070774 	movw	r0, #30580	; 0x7774
  11a7e8:	e3400014 	movt	r0, #20
  11a7ec:	ebffa248 	bl	103114 <rt_kprintf>
  11a7f0:	e300118d 	movw	r1, #397	; 0x18d
  11a7f4:	e3070640 	movw	r0, #30272	; 0x7640
  11a7f8:	e3400014 	movt	r0, #20
  11a7fc:	ebffc23b 	bl	10b0f0 <sys_arch_assert>
    return NULL;
  11a800:	e3a03000 	mov	r3, #0
  11a804:	ea000007 	b	11a828 <pbuf_alloc+0x588>
    break;
  11a808:	e320f000 	nop	{0}
  }
  /* set reference count */
  p->ref = 1;
  11a80c:	e51b3008 	ldr	r3, [fp, #-8]
  11a810:	e3a02001 	mov	r2, #1
  11a814:	e1c320be 	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
  11a818:	e51b3008 	ldr	r3, [fp, #-8]
  11a81c:	e3a02000 	mov	r2, #0
  11a820:	e5c3200d 	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
  11a824:	e51b3008 	ldr	r3, [fp, #-8]
}
  11a828:	e1a00003 	mov	r0, r3
  11a82c:	e24bd004 	sub	sp, fp, #4
  11a830:	e8bd8800 	pop	{fp, pc}

0011a834 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
  11a834:	e92d4800 	push	{fp, lr}
  11a838:	e28db004 	add	fp, sp, #4
  11a83c:	e24dd018 	sub	sp, sp, #24
  11a840:	e50b0010 	str	r0, [fp, #-16]
  11a844:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11a848:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  11a84c:	e1a03001 	mov	r3, r1
  11a850:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
  11a854:	e51b3010 	ldr	r3, [fp, #-16]
  11a858:	e3530004 	cmp	r3, #4
  11a85c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a860:	ea000013 	b	11a8b4 <pbuf_alloced_custom+0x80>
  11a864:	0011a878 	.word	0x0011a878
  11a868:	0011a884 	.word	0x0011a884
  11a86c:	0011a890 	.word	0x0011a890
  11a870:	0011a89c 	.word	0x0011a89c
  11a874:	0011a8a8 	.word	0x0011a8a8
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  11a878:	e3a03038 	mov	r3, #56	; 0x38
  11a87c:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a880:	ea000014 	b	11a8d8 <pbuf_alloced_custom+0xa4>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  11a884:	e3a03024 	mov	r3, #36	; 0x24
  11a888:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a88c:	ea000011 	b	11a8d8 <pbuf_alloced_custom+0xa4>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  11a890:	e3a03010 	mov	r3, #16
  11a894:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a898:	ea00000e 	b	11a8d8 <pbuf_alloced_custom+0xa4>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  11a89c:	e3a03000 	mov	r3, #0
  11a8a0:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a8a4:	ea00000b 	b	11a8d8 <pbuf_alloced_custom+0xa4>
  case PBUF_RAW:
    offset = 0;
  11a8a8:	e3a03000 	mov	r3, #0
  11a8ac:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a8b0:	ea000008 	b	11a8d8 <pbuf_alloced_custom+0xa4>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
  11a8b4:	e3070790 	movw	r0, #30608	; 0x7790
  11a8b8:	e3400014 	movt	r0, #20
  11a8bc:	ebffa214 	bl	103114 <rt_kprintf>
  11a8c0:	e30011c6 	movw	r1, #454	; 0x1c6
  11a8c4:	e3070640 	movw	r0, #30272	; 0x7640
  11a8c8:	e3400014 	movt	r0, #20
  11a8cc:	ebffc207 	bl	10b0f0 <sys_arch_assert>
    return NULL;
  11a8d0:	e3a03000 	mov	r3, #0
  11a8d4:	ea00002c 	b	11a98c <pbuf_alloced_custom+0x158>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
  11a8d8:	e15b30b6 	ldrh	r3, [fp, #-6]
  11a8dc:	e2833003 	add	r3, r3, #3
  11a8e0:	e3c32003 	bic	r2, r3, #3
  11a8e4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11a8e8:	e0822003 	add	r2, r2, r3
  11a8ec:	e1db30b8 	ldrh	r3, [fp, #8]
  11a8f0:	e1520003 	cmp	r2, r3
  11a8f4:	9a000001 	bls	11a900 <pbuf_alloced_custom+0xcc>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  11a8f8:	e3a03000 	mov	r3, #0
  11a8fc:	ea000022 	b	11a98c <pbuf_alloced_custom+0x158>
  }

  p->pbuf.next = NULL;
  11a900:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a904:	e3a02000 	mov	r2, #0
  11a908:	e5832000 	str	r2, [r3]
  if (payload_mem != NULL) {
  11a90c:	e59b3004 	ldr	r3, [fp, #4]
  11a910:	e3530000 	cmp	r3, #0
  11a914:	0a000007 	beq	11a938 <pbuf_alloced_custom+0x104>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
  11a918:	e15b30b6 	ldrh	r3, [fp, #-6]
  11a91c:	e2833003 	add	r3, r3, #3
  11a920:	e3c33003 	bic	r3, r3, #3
  11a924:	e59b2004 	ldr	r2, [fp, #4]
  11a928:	e0822003 	add	r2, r2, r3
  11a92c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a930:	e5832004 	str	r2, [r3, #4]
  11a934:	ea000002 	b	11a944 <pbuf_alloced_custom+0x110>
  } else {
    p->pbuf.payload = NULL;
  11a938:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a93c:	e3a02000 	mov	r2, #0
  11a940:	e5832004 	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
  11a944:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a948:	e3a02002 	mov	r2, #2
  11a94c:	e5c3200d 	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
  11a950:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a954:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11a958:	e1c320b8 	strh	r2, [r3, #8]
  11a95c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a960:	e1d320b8 	ldrh	r2, [r3, #8]
  11a964:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a968:	e1c320ba 	strh	r2, [r3, #10]
  p->pbuf.type = type;
  11a96c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a970:	e6ef2073 	uxtb	r2, r3
  11a974:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a978:	e5c3200c 	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
  11a97c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a980:	e3a02001 	mov	r2, #1
  11a984:	e1c320be 	strh	r2, [r3, #14]
  return &p->pbuf;
  11a988:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  11a98c:	e1a00003 	mov	r0, r3
  11a990:	e24bd004 	sub	sp, fp, #4
  11a994:	e8bd8800 	pop	{fp, pc}

0011a998 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
  11a998:	e92d4800 	push	{fp, lr}
  11a99c:	e28db004 	add	fp, sp, #4
  11a9a0:	e24dd018 	sub	sp, sp, #24
  11a9a4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11a9a8:	e1a03001 	mov	r3, r1
  11a9ac:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
  11a9b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a9b4:	e3530000 	cmp	r3, #0
  11a9b8:	1a000006 	bne	11a9d8 <pbuf_realloc+0x40>
  11a9bc:	e30707b4 	movw	r0, #30644	; 0x77b4
  11a9c0:	e3400014 	movt	r0, #20
  11a9c4:	ebffa1d2 	bl	103114 <rt_kprintf>
  11a9c8:	e3a01f7d 	mov	r1, #500	; 0x1f4
  11a9cc:	e3070640 	movw	r0, #30272	; 0x7640
  11a9d0:	e3400014 	movt	r0, #20
  11a9d4:	ebffc1c5 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
  11a9d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a9dc:	e5d3300c 	ldrb	r3, [r3, #12]
  11a9e0:	e3530003 	cmp	r3, #3
  11a9e4:	0a000012 	beq	11aa34 <pbuf_realloc+0x9c>
  11a9e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a9ec:	e5d3300c 	ldrb	r3, [r3, #12]
  11a9f0:	e3530001 	cmp	r3, #1
  11a9f4:	0a00000e 	beq	11aa34 <pbuf_realloc+0x9c>
  11a9f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a9fc:	e5d3300c 	ldrb	r3, [r3, #12]
  11aa00:	e3530000 	cmp	r3, #0
  11aa04:	0a00000a 	beq	11aa34 <pbuf_realloc+0x9c>
  11aa08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aa0c:	e5d3300c 	ldrb	r3, [r3, #12]
  11aa10:	e3530002 	cmp	r3, #2
  11aa14:	0a000006 	beq	11aa34 <pbuf_realloc+0x9c>
  11aa18:	e30707cc 	movw	r0, #30668	; 0x77cc
  11aa1c:	e3400014 	movt	r0, #20
  11aa20:	ebffa1bb 	bl	103114 <rt_kprintf>
  11aa24:	e3a01f7e 	mov	r1, #504	; 0x1f8
  11aa28:	e3070640 	movw	r0, #30272	; 0x7640
  11aa2c:	e3400014 	movt	r0, #20
  11aa30:	ebffc1ae 	bl	10b0f0 <sys_arch_assert>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
  11aa34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aa38:	e1d330b8 	ldrh	r3, [r3, #8]
  11aa3c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11aa40:	e1520003 	cmp	r2, r3
  11aa44:	2a00006b 	bcs	11abf8 <pbuf_realloc+0x260>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
  11aa48:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11aa4c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11aa50:	e1d220b8 	ldrh	r2, [r2, #8]
  11aa54:	e0433002 	sub	r3, r3, r2
  11aa58:	e50b3010 	str	r3, [fp, #-16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  11aa5c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11aa60:	e14b30ba 	strh	r3, [fp, #-10]
  q = p;
  11aa64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aa68:	e50b3008 	str	r3, [fp, #-8]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  11aa6c:	ea000024 	b	11ab04 <pbuf_realloc+0x16c>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
  11aa70:	e51b3008 	ldr	r3, [fp, #-8]
  11aa74:	e1d330ba 	ldrh	r3, [r3, #10]
  11aa78:	e15b20ba 	ldrh	r2, [fp, #-10]
  11aa7c:	e0423003 	sub	r3, r2, r3
  11aa80:	e14b30ba 	strh	r3, [fp, #-10]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
  11aa84:	e51b3010 	ldr	r3, [fp, #-16]
  11aa88:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11aa8c:	e1530002 	cmp	r3, r2
  11aa90:	da000006 	ble	11aab0 <pbuf_realloc+0x118>
  11aa94:	e30707e8 	movw	r0, #30696	; 0x77e8
  11aa98:	e3400014 	movt	r0, #20
  11aa9c:	ebffa19c 	bl	103114 <rt_kprintf>
  11aaa0:	e3a01f83 	mov	r1, #524	; 0x20c
  11aaa4:	e3070640 	movw	r0, #30272	; 0x7640
  11aaa8:	e3400014 	movt	r0, #20
  11aaac:	ebffc18f 	bl	10b0f0 <sys_arch_assert>
    q->tot_len += (u16_t)grow;
  11aab0:	e51b3008 	ldr	r3, [fp, #-8]
  11aab4:	e1d320b8 	ldrh	r2, [r3, #8]
  11aab8:	e51b3010 	ldr	r3, [fp, #-16]
  11aabc:	e6ff3073 	uxth	r3, r3
  11aac0:	e0823003 	add	r3, r2, r3
  11aac4:	e6ff2073 	uxth	r2, r3
  11aac8:	e51b3008 	ldr	r3, [fp, #-8]
  11aacc:	e1c320b8 	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
  11aad0:	e51b3008 	ldr	r3, [fp, #-8]
  11aad4:	e5933000 	ldr	r3, [r3]
  11aad8:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
  11aadc:	e51b3008 	ldr	r3, [fp, #-8]
  11aae0:	e3530000 	cmp	r3, #0
  11aae4:	1a000006 	bne	11ab04 <pbuf_realloc+0x16c>
  11aae8:	e30707fc 	movw	r0, #30716	; 0x77fc
  11aaec:	e3400014 	movt	r0, #20
  11aaf0:	ebffa187 	bl	103114 <rt_kprintf>
  11aaf4:	e3a01e21 	mov	r1, #528	; 0x210
  11aaf8:	e3070640 	movw	r0, #30272	; 0x7640
  11aafc:	e3400014 	movt	r0, #20
  11ab00:	ebffc17a 	bl	10b0f0 <sys_arch_assert>
  while (rem_len > q->len) {
  11ab04:	e51b3008 	ldr	r3, [fp, #-8]
  11ab08:	e1d330ba 	ldrh	r3, [r3, #10]
  11ab0c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11ab10:	e1520003 	cmp	r2, r3
  11ab14:	8affffd5 	bhi	11aa70 <pbuf_realloc+0xd8>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
  11ab18:	e51b3008 	ldr	r3, [fp, #-8]
  11ab1c:	e5d3300c 	ldrb	r3, [r3, #12]
  11ab20:	e3530000 	cmp	r3, #0
  11ab24:	1a000020 	bne	11abac <pbuf_realloc+0x214>
  11ab28:	e51b3008 	ldr	r3, [fp, #-8]
  11ab2c:	e1d330ba 	ldrh	r3, [r3, #10]
  11ab30:	e15b20ba 	ldrh	r2, [fp, #-10]
  11ab34:	e1520003 	cmp	r2, r3
  11ab38:	0a00001b 	beq	11abac <pbuf_realloc+0x214>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
  11ab3c:	e51b3008 	ldr	r3, [fp, #-8]
  11ab40:	e5d3300d 	ldrb	r3, [r3, #13]
  11ab44:	e2033002 	and	r3, r3, #2
  11ab48:	e3530000 	cmp	r3, #0
  11ab4c:	1a000016 	bne	11abac <pbuf_realloc+0x214>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  11ab50:	e51b3008 	ldr	r3, [fp, #-8]
  11ab54:	e5933004 	ldr	r3, [r3, #4]
  11ab58:	e1a02003 	mov	r2, r3
  11ab5c:	e51b3008 	ldr	r3, [fp, #-8]
  11ab60:	e0423003 	sub	r3, r2, r3
  11ab64:	e6ff2073 	uxth	r2, r3
  11ab68:	e15b30ba 	ldrh	r3, [fp, #-10]
  11ab6c:	e0823003 	add	r3, r2, r3
  11ab70:	e6ff3073 	uxth	r3, r3
  11ab74:	e1a01003 	mov	r1, r3
  11ab78:	e51b0008 	ldr	r0, [fp, #-8]
  11ab7c:	ebffc191 	bl	10b1c8 <mem_trim>
  11ab80:	e50b0008 	str	r0, [fp, #-8]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  11ab84:	e51b3008 	ldr	r3, [fp, #-8]
  11ab88:	e3530000 	cmp	r3, #0
  11ab8c:	1a000006 	bne	11abac <pbuf_realloc+0x214>
  11ab90:	e3070814 	movw	r0, #30740	; 0x7814
  11ab94:	e3400014 	movt	r0, #20
  11ab98:	ebffa15d 	bl	103114 <rt_kprintf>
  11ab9c:	e300121e 	movw	r1, #542	; 0x21e
  11aba0:	e3070640 	movw	r0, #30272	; 0x7640
  11aba4:	e3400014 	movt	r0, #20
  11aba8:	ebffc150 	bl	10b0f0 <sys_arch_assert>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  11abac:	e51b3008 	ldr	r3, [fp, #-8]
  11abb0:	e15b20ba 	ldrh	r2, [fp, #-10]
  11abb4:	e1c320ba 	strh	r2, [r3, #10]
  q->tot_len = q->len;
  11abb8:	e51b3008 	ldr	r3, [fp, #-8]
  11abbc:	e1d320ba 	ldrh	r2, [r3, #10]
  11abc0:	e51b3008 	ldr	r3, [fp, #-8]
  11abc4:	e1c320b8 	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
  11abc8:	e51b3008 	ldr	r3, [fp, #-8]
  11abcc:	e5933000 	ldr	r3, [r3]
  11abd0:	e3530000 	cmp	r3, #0
  11abd4:	0a000003 	beq	11abe8 <pbuf_realloc+0x250>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
  11abd8:	e51b3008 	ldr	r3, [fp, #-8]
  11abdc:	e5933000 	ldr	r3, [r3]
  11abe0:	e1a00003 	mov	r0, r3
  11abe4:	eb0000b4 	bl	11aebc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
  11abe8:	e51b3008 	ldr	r3, [fp, #-8]
  11abec:	e3a02000 	mov	r2, #0
  11abf0:	e5832000 	str	r2, [r3]
  11abf4:	ea000000 	b	11abfc <pbuf_realloc+0x264>
    return;
  11abf8:	e320f000 	nop	{0}

}
  11abfc:	e24bd004 	sub	sp, fp, #4
  11ac00:	e8bd8800 	pop	{fp, pc}

0011ac04 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  11ac04:	e92d4800 	push	{fp, lr}
  11ac08:	e28db004 	add	fp, sp, #4
  11ac0c:	e24dd010 	sub	sp, sp, #16
  11ac10:	e50b0010 	str	r0, [fp, #-16]
  11ac14:	e1a03001 	mov	r3, r1
  11ac18:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11ac1c:	e1a03002 	mov	r3, r2
  11ac20:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  11ac24:	e51b3010 	ldr	r3, [fp, #-16]
  11ac28:	e3530000 	cmp	r3, #0
  11ac2c:	1a000006 	bne	11ac4c <pbuf_header_impl+0x48>
  11ac30:	e3070830 	movw	r0, #30768	; 0x7830
  11ac34:	e3400014 	movt	r0, #20
  11ac38:	ebffa135 	bl	103114 <rt_kprintf>
  11ac3c:	e3a01d09 	mov	r1, #576	; 0x240
  11ac40:	e3070640 	movw	r0, #30272	; 0x7640
  11ac44:	e3400014 	movt	r0, #20
  11ac48:	ebffc128 	bl	10b0f0 <sys_arch_assert>
  if ((header_size_increment == 0) || (p == NULL)) {
  11ac4c:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ac50:	e3530000 	cmp	r3, #0
  11ac54:	0a000002 	beq	11ac64 <pbuf_header_impl+0x60>
  11ac58:	e51b3010 	ldr	r3, [fp, #-16]
  11ac5c:	e3530000 	cmp	r3, #0
  11ac60:	1a000001 	bne	11ac6c <pbuf_header_impl+0x68>
    return 0;
  11ac64:	e3a03000 	mov	r3, #0
  11ac68:	ea000072 	b	11ae38 <pbuf_header_impl+0x234>
  }

  if (header_size_increment < 0) {
  11ac6c:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ac70:	e3530000 	cmp	r3, #0
  11ac74:	aa000010 	bge	11acbc <pbuf_header_impl+0xb8>
    increment_magnitude = (u16_t)-header_size_increment;
  11ac78:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ac7c:	e2633000 	rsb	r3, r3, #0
  11ac80:	e14b30b6 	strh	r3, [fp, #-6]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  11ac84:	e51b3010 	ldr	r3, [fp, #-16]
  11ac88:	e1d330ba 	ldrh	r3, [r3, #10]
  11ac8c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11ac90:	e1520003 	cmp	r2, r3
  11ac94:	9a00000a 	bls	11acc4 <pbuf_header_impl+0xc0>
  11ac98:	e307083c 	movw	r0, #30780	; 0x783c
  11ac9c:	e3400014 	movt	r0, #20
  11aca0:	ebffa11b 	bl	103114 <rt_kprintf>
  11aca4:	e3a01f92 	mov	r1, #584	; 0x248
  11aca8:	e3070640 	movw	r0, #30272	; 0x7640
  11acac:	e3400014 	movt	r0, #20
  11acb0:	ebffc10e 	bl	10b0f0 <sys_arch_assert>
  11acb4:	e3a03001 	mov	r3, #1
  11acb8:	ea00005e 	b	11ae38 <pbuf_header_impl+0x234>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
  11acbc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11acc0:	e14b30b6 	strh	r3, [fp, #-6]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  11acc4:	e51b3010 	ldr	r3, [fp, #-16]
  11acc8:	e5d3300c 	ldrb	r3, [r3, #12]
  11accc:	e14b30b8 	strh	r3, [fp, #-8]
  /* remember current payload pointer */
  payload = p->payload;
  11acd0:	e51b3010 	ldr	r3, [fp, #-16]
  11acd4:	e5933004 	ldr	r3, [r3, #4]
  11acd8:	e50b300c 	str	r3, [fp, #-12]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  11acdc:	e15b30b8 	ldrh	r3, [fp, #-8]
  11ace0:	e3530000 	cmp	r3, #0
  11ace4:	0a000002 	beq	11acf4 <pbuf_header_impl+0xf0>
  11ace8:	e15b30b8 	ldrh	r3, [fp, #-8]
  11acec:	e3530003 	cmp	r3, #3
  11acf0:	1a000011 	bne	11ad3c <pbuf_header_impl+0x138>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  11acf4:	e51b3010 	ldr	r3, [fp, #-16]
  11acf8:	e5932004 	ldr	r2, [r3, #4]
  11acfc:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ad00:	e2633000 	rsb	r3, r3, #0
  11ad04:	e0822003 	add	r2, r2, r3
  11ad08:	e51b3010 	ldr	r3, [fp, #-16]
  11ad0c:	e5832004 	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  11ad10:	e51b3010 	ldr	r3, [fp, #-16]
  11ad14:	e5932004 	ldr	r2, [r3, #4]
  11ad18:	e51b3010 	ldr	r3, [fp, #-16]
  11ad1c:	e2833010 	add	r3, r3, #16
  11ad20:	e1520003 	cmp	r2, r3
  11ad24:	2a000034 	bcs	11adfc <pbuf_header_impl+0x1f8>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
  11ad28:	e51b3010 	ldr	r3, [fp, #-16]
  11ad2c:	e51b200c 	ldr	r2, [fp, #-12]
  11ad30:	e5832004 	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
  11ad34:	e3a03001 	mov	r3, #1
  11ad38:	ea00003e 	b	11ae38 <pbuf_header_impl+0x234>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  11ad3c:	e15b30b8 	ldrh	r3, [fp, #-8]
  11ad40:	e3530002 	cmp	r3, #2
  11ad44:	0a000002 	beq	11ad54 <pbuf_header_impl+0x150>
  11ad48:	e15b30b8 	ldrh	r3, [fp, #-8]
  11ad4c:	e3530001 	cmp	r3, #1
  11ad50:	1a000020 	bne	11add8 <pbuf_header_impl+0x1d4>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11ad54:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ad58:	e3530000 	cmp	r3, #0
  11ad5c:	aa00000c 	bge	11ad94 <pbuf_header_impl+0x190>
  11ad60:	e51b3010 	ldr	r3, [fp, #-16]
  11ad64:	e1d330ba 	ldrh	r3, [r3, #10]
  11ad68:	e15b20b6 	ldrh	r2, [fp, #-6]
  11ad6c:	e1520003 	cmp	r2, r3
  11ad70:	8a000007 	bhi	11ad94 <pbuf_header_impl+0x190>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  11ad74:	e51b3010 	ldr	r3, [fp, #-16]
  11ad78:	e5932004 	ldr	r2, [r3, #4]
  11ad7c:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ad80:	e2633000 	rsb	r3, r3, #0
  11ad84:	e0822003 	add	r2, r2, r3
  11ad88:	e51b3010 	ldr	r3, [fp, #-16]
  11ad8c:	e5832004 	str	r2, [r3, #4]
  11ad90:	ea00000f 	b	11add4 <pbuf_header_impl+0x1d0>
    } else if ((header_size_increment > 0) && force) {
  11ad94:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ad98:	e3530000 	cmp	r3, #0
  11ad9c:	da00000a 	ble	11adcc <pbuf_header_impl+0x1c8>
  11ada0:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  11ada4:	e3530000 	cmp	r3, #0
  11ada8:	0a000007 	beq	11adcc <pbuf_header_impl+0x1c8>
      p->payload = (u8_t *)p->payload - header_size_increment;
  11adac:	e51b3010 	ldr	r3, [fp, #-16]
  11adb0:	e5932004 	ldr	r2, [r3, #4]
  11adb4:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11adb8:	e2633000 	rsb	r3, r3, #0
  11adbc:	e0822003 	add	r2, r2, r3
  11adc0:	e51b3010 	ldr	r3, [fp, #-16]
  11adc4:	e5832004 	str	r2, [r3, #4]
  11adc8:	ea000001 	b	11add4 <pbuf_header_impl+0x1d0>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
  11adcc:	e3a03001 	mov	r3, #1
  11add0:	ea000018 	b	11ae38 <pbuf_header_impl+0x234>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11add4:	ea000008 	b	11adfc <pbuf_header_impl+0x1f8>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
  11add8:	e307085c 	movw	r0, #30812	; 0x785c
  11addc:	e3400014 	movt	r0, #20
  11ade0:	ebffa0cb 	bl	103114 <rt_kprintf>
  11ade4:	e3a01f9e 	mov	r1, #632	; 0x278
  11ade8:	e3070640 	movw	r0, #30272	; 0x7640
  11adec:	e3400014 	movt	r0, #20
  11adf0:	ebffc0be 	bl	10b0f0 <sys_arch_assert>
    return 1;
  11adf4:	e3a03001 	mov	r3, #1
  11adf8:	ea00000e 	b	11ae38 <pbuf_header_impl+0x234>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  11adfc:	e51b3010 	ldr	r3, [fp, #-16]
  11ae00:	e1d320ba 	ldrh	r2, [r3, #10]
  11ae04:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ae08:	e0823003 	add	r3, r2, r3
  11ae0c:	e6ff2073 	uxth	r2, r3
  11ae10:	e51b3010 	ldr	r3, [fp, #-16]
  11ae14:	e1c320ba 	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
  11ae18:	e51b3010 	ldr	r3, [fp, #-16]
  11ae1c:	e1d320b8 	ldrh	r2, [r3, #8]
  11ae20:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ae24:	e0823003 	add	r3, r2, r3
  11ae28:	e6ff2073 	uxth	r2, r3
  11ae2c:	e51b3010 	ldr	r3, [fp, #-16]
  11ae30:	e1c320b8 	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  11ae34:	e3a03000 	mov	r3, #0
}
  11ae38:	e1a00003 	mov	r0, r3
  11ae3c:	e24bd004 	sub	sp, fp, #4
  11ae40:	e8bd8800 	pop	{fp, pc}

0011ae44 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
  11ae44:	e92d4800 	push	{fp, lr}
  11ae48:	e28db004 	add	fp, sp, #4
  11ae4c:	e24dd008 	sub	sp, sp, #8
  11ae50:	e50b0008 	str	r0, [fp, #-8]
  11ae54:	e1a03001 	mov	r3, r1
  11ae58:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 0);
  11ae5c:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11ae60:	e3a02000 	mov	r2, #0
  11ae64:	e1a01003 	mov	r1, r3
  11ae68:	e51b0008 	ldr	r0, [fp, #-8]
  11ae6c:	ebffff64 	bl	11ac04 <pbuf_header_impl>
  11ae70:	e1a03000 	mov	r3, r0
}
  11ae74:	e1a00003 	mov	r0, r3
  11ae78:	e24bd004 	sub	sp, fp, #4
  11ae7c:	e8bd8800 	pop	{fp, pc}

0011ae80 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
  11ae80:	e92d4800 	push	{fp, lr}
  11ae84:	e28db004 	add	fp, sp, #4
  11ae88:	e24dd008 	sub	sp, sp, #8
  11ae8c:	e50b0008 	str	r0, [fp, #-8]
  11ae90:	e1a03001 	mov	r3, r1
  11ae94:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 1);
  11ae98:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11ae9c:	e3a02001 	mov	r2, #1
  11aea0:	e1a01003 	mov	r1, r3
  11aea4:	e51b0008 	ldr	r0, [fp, #-8]
  11aea8:	ebffff55 	bl	11ac04 <pbuf_header_impl>
  11aeac:	e1a03000 	mov	r3, r0
}
  11aeb0:	e1a00003 	mov	r0, r3
  11aeb4:	e24bd004 	sub	sp, fp, #4
  11aeb8:	e8bd8800 	pop	{fp, pc}

0011aebc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  11aebc:	e92d4800 	push	{fp, lr}
  11aec0:	e28db004 	add	fp, sp, #4
  11aec4:	e24dd018 	sub	sp, sp, #24
  11aec8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  11aecc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aed0:	e3530000 	cmp	r3, #0
  11aed4:	1a00000b 	bne	11af08 <pbuf_free+0x4c>
    LWIP_ASSERT("p != NULL", p != NULL);
  11aed8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aedc:	e3530000 	cmp	r3, #0
  11aee0:	1a000006 	bne	11af00 <pbuf_free+0x44>
  11aee4:	e3070830 	movw	r0, #30768	; 0x7830
  11aee8:	e3400014 	movt	r0, #20
  11aeec:	ebffa088 	bl	103114 <rt_kprintf>
  11aef0:	e30012d3 	movw	r1, #723	; 0x2d3
  11aef4:	e3070640 	movw	r0, #30272	; 0x7640
  11aef8:	e3400014 	movt	r0, #20
  11aefc:	ebffc07b 	bl	10b0f0 <sys_arch_assert>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
  11af00:	e3a03000 	mov	r3, #0
  11af04:	ea00006e 	b	11b0c4 <pbuf_free+0x208>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
  11af08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af0c:	e5d3300c 	ldrb	r3, [r3, #12]
  11af10:	e3530000 	cmp	r3, #0
  11af14:	0a000012 	beq	11af64 <pbuf_free+0xa8>
  11af18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af1c:	e5d3300c 	ldrb	r3, [r3, #12]
  11af20:	e3530001 	cmp	r3, #1
  11af24:	0a00000e 	beq	11af64 <pbuf_free+0xa8>
  11af28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af2c:	e5d3300c 	ldrb	r3, [r3, #12]
  11af30:	e3530002 	cmp	r3, #2
  11af34:	0a00000a 	beq	11af64 <pbuf_free+0xa8>
  11af38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af3c:	e5d3300c 	ldrb	r3, [r3, #12]
  11af40:	e3530003 	cmp	r3, #3
  11af44:	0a000006 	beq	11af64 <pbuf_free+0xa8>
  11af48:	e307086c 	movw	r0, #30828	; 0x786c
  11af4c:	e3400014 	movt	r0, #20
  11af50:	ebffa06f 	bl	103114 <rt_kprintf>
  11af54:	e30012df 	movw	r1, #735	; 0x2df
  11af58:	e3070640 	movw	r0, #30272	; 0x7640
  11af5c:	e3400014 	movt	r0, #20
  11af60:	ebffc062 	bl	10b0f0 <sys_arch_assert>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  11af64:	e3a03000 	mov	r3, #0
  11af68:	e54b3005 	strb	r3, [fp, #-5]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
  11af6c:	ea000050 	b	11b0b4 <pbuf_free+0x1f8>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
  11af70:	ebff9cb1 	bl	10223c <rt_enter_critical>
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
  11af74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af78:	e1d330be 	ldrh	r3, [r3, #14]
  11af7c:	e3530000 	cmp	r3, #0
  11af80:	1a000006 	bne	11afa0 <pbuf_free+0xe4>
  11af84:	e3070884 	movw	r0, #30852	; 0x7884
  11af88:	e3400014 	movt	r0, #20
  11af8c:	ebffa060 	bl	103114 <rt_kprintf>
  11af90:	e3a01fbb 	mov	r1, #748	; 0x2ec
  11af94:	e3070640 	movw	r0, #30272	; 0x7640
  11af98:	e3400014 	movt	r0, #20
  11af9c:	ebffc053 	bl	10b0f0 <sys_arch_assert>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
  11afa0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11afa4:	e1d330be 	ldrh	r3, [r3, #14]
  11afa8:	e2433001 	sub	r3, r3, #1
  11afac:	e6ff2073 	uxth	r2, r3
  11afb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11afb4:	e1c320be 	strh	r2, [r3, #14]
  11afb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11afbc:	e1d330be 	ldrh	r3, [r3, #14]
  11afc0:	e14b30b8 	strh	r3, [fp, #-8]
    SYS_ARCH_UNPROTECT(old_level);
  11afc4:	ebff9ca2 	bl	102254 <rt_exit_critical>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
  11afc8:	e15b30b8 	ldrh	r3, [fp, #-8]
  11afcc:	e3530000 	cmp	r3, #0
  11afd0:	1a000035 	bne	11b0ac <pbuf_free+0x1f0>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
  11afd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11afd8:	e5933000 	ldr	r3, [r3]
  11afdc:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
  11afe0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11afe4:	e5d3300c 	ldrb	r3, [r3, #12]
  11afe8:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
  11afec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aff0:	e5d3300d 	ldrb	r3, [r3, #13]
  11aff4:	e2033002 	and	r3, r3, #2
  11aff8:	e3530000 	cmp	r3, #0
  11affc:	0a000011 	beq	11b048 <pbuf_free+0x18c>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
  11b000:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b004:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
  11b008:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b00c:	e5933010 	ldr	r3, [r3, #16]
  11b010:	e3530000 	cmp	r3, #0
  11b014:	1a000006 	bne	11b034 <pbuf_free+0x178>
  11b018:	e307089c 	movw	r0, #30876	; 0x789c
  11b01c:	e3400014 	movt	r0, #20
  11b020:	ebffa03b 	bl	103114 <rt_kprintf>
  11b024:	e30012fa 	movw	r1, #762	; 0x2fa
  11b028:	e3070640 	movw	r0, #30272	; 0x7640
  11b02c:	e3400014 	movt	r0, #20
  11b030:	ebffc02e 	bl	10b0f0 <sys_arch_assert>
        pc->custom_free_function(p);
  11b034:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b038:	e5933010 	ldr	r3, [r3, #16]
  11b03c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11b040:	e12fff33 	blx	r3
  11b044:	ea000012 	b	11b094 <pbuf_free+0x1d8>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
  11b048:	e15b30be 	ldrh	r3, [fp, #-14]
  11b04c:	e3530003 	cmp	r3, #3
  11b050:	1a000003 	bne	11b064 <pbuf_free+0x1a8>
          memp_free(MEMP_PBUF_POOL, p);
  11b054:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11b058:	e3a00010 	mov	r0, #16
  11b05c:	ebfff888 	bl	119284 <memp_free>
  11b060:	ea00000b 	b	11b094 <pbuf_free+0x1d8>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  11b064:	e15b30be 	ldrh	r3, [fp, #-14]
  11b068:	e3530001 	cmp	r3, #1
  11b06c:	0a000002 	beq	11b07c <pbuf_free+0x1c0>
  11b070:	e15b30be 	ldrh	r3, [fp, #-14]
  11b074:	e3530002 	cmp	r3, #2
  11b078:	1a000003 	bne	11b08c <pbuf_free+0x1d0>
          memp_free(MEMP_PBUF, p);
  11b07c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11b080:	e3a0000f 	mov	r0, #15
  11b084:	ebfff87e 	bl	119284 <memp_free>
  11b088:	ea000001 	b	11b094 <pbuf_free+0x1d8>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  11b08c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11b090:	ebffc063 	bl	10b224 <mem_free>
        }
      }
      count++;
  11b094:	e55b3005 	ldrb	r3, [fp, #-5]
  11b098:	e2833001 	add	r3, r3, #1
  11b09c:	e54b3005 	strb	r3, [fp, #-5]
      /* proceed to next pbuf */
      p = q;
  11b0a0:	e51b300c 	ldr	r3, [fp, #-12]
  11b0a4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  11b0a8:	ea000001 	b	11b0b4 <pbuf_free+0x1f8>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
  11b0ac:	e3a03000 	mov	r3, #0
  11b0b0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  while (p != NULL) {
  11b0b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b0b8:	e3530000 	cmp	r3, #0
  11b0bc:	1affffab 	bne	11af70 <pbuf_free+0xb4>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
  11b0c0:	e55b3005 	ldrb	r3, [fp, #-5]
}
  11b0c4:	e1a00003 	mov	r0, r3
  11b0c8:	e24bd004 	sub	sp, fp, #4
  11b0cc:	e8bd8800 	pop	{fp, pc}

0011b0d0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
  11b0d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11b0d4:	e28db000 	add	fp, sp, #0
  11b0d8:	e24dd014 	sub	sp, sp, #20
  11b0dc:	e50b0010 	str	r0, [fp, #-16]
  u16_t len;

  len = 0;
  11b0e0:	e3a03000 	mov	r3, #0
  11b0e4:	e14b30b6 	strh	r3, [fp, #-6]
  while (p != NULL) {
  11b0e8:	ea000005 	b	11b104 <pbuf_clen+0x34>
    ++len;
  11b0ec:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b0f0:	e2833001 	add	r3, r3, #1
  11b0f4:	e14b30b6 	strh	r3, [fp, #-6]
    p = p->next;
  11b0f8:	e51b3010 	ldr	r3, [fp, #-16]
  11b0fc:	e5933000 	ldr	r3, [r3]
  11b100:	e50b3010 	str	r3, [fp, #-16]
  while (p != NULL) {
  11b104:	e51b3010 	ldr	r3, [fp, #-16]
  11b108:	e3530000 	cmp	r3, #0
  11b10c:	1afffff6 	bne	11b0ec <pbuf_clen+0x1c>
  }
  return len;
  11b110:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  11b114:	e1a00003 	mov	r0, r3
  11b118:	e28bd000 	add	sp, fp, #0
  11b11c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11b120:	e12fff1e 	bx	lr

0011b124 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
  11b124:	e92d4800 	push	{fp, lr}
  11b128:	e28db004 	add	fp, sp, #4
  11b12c:	e24dd008 	sub	sp, sp, #8
  11b130:	e50b0008 	str	r0, [fp, #-8]
  /* pbuf given? */
  if (p != NULL) {
  11b134:	e51b3008 	ldr	r3, [fp, #-8]
  11b138:	e3530000 	cmp	r3, #0
  11b13c:	0a000012 	beq	11b18c <pbuf_ref+0x68>
    SYS_ARCH_INC(p->ref, 1);
  11b140:	ebff9c3d 	bl	10223c <rt_enter_critical>
  11b144:	e51b3008 	ldr	r3, [fp, #-8]
  11b148:	e1d330be 	ldrh	r3, [r3, #14]
  11b14c:	e2833001 	add	r3, r3, #1
  11b150:	e6ff2073 	uxth	r2, r3
  11b154:	e51b3008 	ldr	r3, [fp, #-8]
  11b158:	e1c320be 	strh	r2, [r3, #14]
  11b15c:	ebff9c3c 	bl	102254 <rt_exit_critical>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
  11b160:	e51b3008 	ldr	r3, [fp, #-8]
  11b164:	e1d330be 	ldrh	r3, [r3, #14]
  11b168:	e3530000 	cmp	r3, #0
  11b16c:	1a000006 	bne	11b18c <pbuf_ref+0x68>
  11b170:	e30708c0 	movw	r0, #30912	; 0x78c0
  11b174:	e3400014 	movt	r0, #20
  11b178:	ebff9fe5 	bl	103114 <rt_kprintf>
  11b17c:	e300133a 	movw	r1, #826	; 0x33a
  11b180:	e3070640 	movw	r0, #30272	; 0x7640
  11b184:	e3400014 	movt	r0, #20
  11b188:	ebffbfd8 	bl	10b0f0 <sys_arch_assert>
  }
}
  11b18c:	e320f000 	nop	{0}
  11b190:	e24bd004 	sub	sp, fp, #4
  11b194:	e8bd8800 	pop	{fp, pc}

0011b198 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  11b198:	e92d4800 	push	{fp, lr}
  11b19c:	e28db004 	add	fp, sp, #4
  11b1a0:	e24dd010 	sub	sp, sp, #16
  11b1a4:	e50b0010 	str	r0, [fp, #-16]
  11b1a8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  11b1ac:	e51b3010 	ldr	r3, [fp, #-16]
  11b1b0:	e3530000 	cmp	r3, #0
  11b1b4:	0a000002 	beq	11b1c4 <pbuf_cat+0x2c>
  11b1b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b1bc:	e3530000 	cmp	r3, #0
  11b1c0:	1a000007 	bne	11b1e4 <pbuf_cat+0x4c>
  11b1c4:	e30708d4 	movw	r0, #30932	; 0x78d4
  11b1c8:	e3400014 	movt	r0, #20
  11b1cc:	ebff9fd0 	bl	103114 <rt_kprintf>
  11b1d0:	e300134e 	movw	r1, #846	; 0x34e
  11b1d4:	e3070640 	movw	r0, #30272	; 0x7640
  11b1d8:	e3400014 	movt	r0, #20
  11b1dc:	ebffbfc3 	bl	10b0f0 <sys_arch_assert>
  11b1e0:	ea000034 	b	11b2b8 <pbuf_cat+0x120>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  11b1e4:	e51b3010 	ldr	r3, [fp, #-16]
  11b1e8:	e50b3008 	str	r3, [fp, #-8]
  11b1ec:	ea00000a 	b	11b21c <pbuf_cat+0x84>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  11b1f0:	e51b3008 	ldr	r3, [fp, #-8]
  11b1f4:	e1d320b8 	ldrh	r2, [r3, #8]
  11b1f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b1fc:	e1d330b8 	ldrh	r3, [r3, #8]
  11b200:	e0823003 	add	r3, r2, r3
  11b204:	e6ff2073 	uxth	r2, r3
  11b208:	e51b3008 	ldr	r3, [fp, #-8]
  11b20c:	e1c320b8 	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
  11b210:	e51b3008 	ldr	r3, [fp, #-8]
  11b214:	e5933000 	ldr	r3, [r3]
  11b218:	e50b3008 	str	r3, [fp, #-8]
  11b21c:	e51b3008 	ldr	r3, [fp, #-8]
  11b220:	e5933000 	ldr	r3, [r3]
  11b224:	e3530000 	cmp	r3, #0
  11b228:	1afffff0 	bne	11b1f0 <pbuf_cat+0x58>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  11b22c:	e51b3008 	ldr	r3, [fp, #-8]
  11b230:	e1d320b8 	ldrh	r2, [r3, #8]
  11b234:	e51b3008 	ldr	r3, [fp, #-8]
  11b238:	e1d330ba 	ldrh	r3, [r3, #10]
  11b23c:	e1520003 	cmp	r2, r3
  11b240:	0a000006 	beq	11b260 <pbuf_cat+0xc8>
  11b244:	e307090c 	movw	r0, #30988	; 0x790c
  11b248:	e3400014 	movt	r0, #20
  11b24c:	ebff9fb0 	bl	103114 <rt_kprintf>
  11b250:	e3001356 	movw	r1, #854	; 0x356
  11b254:	e3070640 	movw	r0, #30272	; 0x7640
  11b258:	e3400014 	movt	r0, #20
  11b25c:	ebffbfa3 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  11b260:	e51b3008 	ldr	r3, [fp, #-8]
  11b264:	e5933000 	ldr	r3, [r3]
  11b268:	e3530000 	cmp	r3, #0
  11b26c:	0a000006 	beq	11b28c <pbuf_cat+0xf4>
  11b270:	e307093c 	movw	r0, #31036	; 0x793c
  11b274:	e3400014 	movt	r0, #20
  11b278:	ebff9fa5 	bl	103114 <rt_kprintf>
  11b27c:	e3001357 	movw	r1, #855	; 0x357
  11b280:	e3070640 	movw	r0, #30272	; 0x7640
  11b284:	e3400014 	movt	r0, #20
  11b288:	ebffbf98 	bl	10b0f0 <sys_arch_assert>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  11b28c:	e51b3008 	ldr	r3, [fp, #-8]
  11b290:	e1d320b8 	ldrh	r2, [r3, #8]
  11b294:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b298:	e1d330b8 	ldrh	r3, [r3, #8]
  11b29c:	e0823003 	add	r3, r2, r3
  11b2a0:	e6ff2073 	uxth	r2, r3
  11b2a4:	e51b3008 	ldr	r3, [fp, #-8]
  11b2a8:	e1c320b8 	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  11b2ac:	e51b3008 	ldr	r3, [fp, #-8]
  11b2b0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11b2b4:	e5832000 	str	r2, [r3]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  11b2b8:	e24bd004 	sub	sp, fp, #4
  11b2bc:	e8bd8800 	pop	{fp, pc}

0011b2c0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  11b2c0:	e92d4800 	push	{fp, lr}
  11b2c4:	e28db004 	add	fp, sp, #4
  11b2c8:	e24dd008 	sub	sp, sp, #8
  11b2cc:	e50b0008 	str	r0, [fp, #-8]
  11b2d0:	e50b100c 	str	r1, [fp, #-12]
  pbuf_cat(h, t);
  11b2d4:	e51b100c 	ldr	r1, [fp, #-12]
  11b2d8:	e51b0008 	ldr	r0, [fp, #-8]
  11b2dc:	ebffffad 	bl	11b198 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
  11b2e0:	e51b000c 	ldr	r0, [fp, #-12]
  11b2e4:	ebffff8e 	bl	11b124 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
  11b2e8:	e320f000 	nop	{0}
  11b2ec:	e24bd004 	sub	sp, fp, #4
  11b2f0:	e8bd8800 	pop	{fp, pc}

0011b2f4 <pbuf_dechain>:
 * @return remainder of the pbuf chain, or NULL if it was de-allocated.
 * @note May not be called on a packet queue.
 */
struct pbuf *
pbuf_dechain(struct pbuf *p)
{
  11b2f4:	e92d4800 	push	{fp, lr}
  11b2f8:	e28db004 	add	fp, sp, #4
  11b2fc:	e24dd010 	sub	sp, sp, #16
  11b300:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q;
  u8_t tail_gone = 1;
  11b304:	e3a03001 	mov	r3, #1
  11b308:	e54b3005 	strb	r3, [fp, #-5]
  /* tail */
  q = p->next;
  11b30c:	e51b3010 	ldr	r3, [fp, #-16]
  11b310:	e5933000 	ldr	r3, [r3]
  11b314:	e50b300c 	str	r3, [fp, #-12]
  /* pbuf has successor in chain? */
  if (q != NULL) {
  11b318:	e51b300c 	ldr	r3, [fp, #-12]
  11b31c:	e3530000 	cmp	r3, #0
  11b320:	0a000024 	beq	11b3b8 <pbuf_dechain+0xc4>
    /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
  11b324:	e51b300c 	ldr	r3, [fp, #-12]
  11b328:	e1d330b8 	ldrh	r3, [r3, #8]
  11b32c:	e1a02003 	mov	r2, r3
  11b330:	e51b3010 	ldr	r3, [fp, #-16]
  11b334:	e1d330b8 	ldrh	r3, [r3, #8]
  11b338:	e1a01003 	mov	r1, r3
  11b33c:	e51b3010 	ldr	r3, [fp, #-16]
  11b340:	e1d330ba 	ldrh	r3, [r3, #10]
  11b344:	e0413003 	sub	r3, r1, r3
  11b348:	e1520003 	cmp	r2, r3
  11b34c:	0a000006 	beq	11b36c <pbuf_dechain+0x78>
  11b350:	e307094c 	movw	r0, #31052	; 0x794c
  11b354:	e3400014 	movt	r0, #20
  11b358:	ebff9f6d 	bl	103114 <rt_kprintf>
  11b35c:	e300138d 	movw	r1, #909	; 0x38d
  11b360:	e3070640 	movw	r0, #30272	; 0x7640
  11b364:	e3400014 	movt	r0, #20
  11b368:	ebffbf60 	bl	10b0f0 <sys_arch_assert>
    /* enforce invariant if assertion is disabled */
    q->tot_len = p->tot_len - p->len;
  11b36c:	e51b3010 	ldr	r3, [fp, #-16]
  11b370:	e1d320b8 	ldrh	r2, [r3, #8]
  11b374:	e51b3010 	ldr	r3, [fp, #-16]
  11b378:	e1d330ba 	ldrh	r3, [r3, #10]
  11b37c:	e0423003 	sub	r3, r2, r3
  11b380:	e6ff2073 	uxth	r2, r3
  11b384:	e51b300c 	ldr	r3, [fp, #-12]
  11b388:	e1c320b8 	strh	r2, [r3, #8]
    /* decouple pbuf from remainder */
    p->next = NULL;
  11b38c:	e51b3010 	ldr	r3, [fp, #-16]
  11b390:	e3a02000 	mov	r2, #0
  11b394:	e5832000 	str	r2, [r3]
    /* total length of pbuf p is its own length only */
    p->tot_len = p->len;
  11b398:	e51b3010 	ldr	r3, [fp, #-16]
  11b39c:	e1d320ba 	ldrh	r2, [r3, #10]
  11b3a0:	e51b3010 	ldr	r3, [fp, #-16]
  11b3a4:	e1c320b8 	strh	r2, [r3, #8]
    /* q is no longer referenced by p, free it */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_dechain: unreferencing %p\n", (void *)q));
    tail_gone = pbuf_free(q);
  11b3a8:	e51b000c 	ldr	r0, [fp, #-12]
  11b3ac:	ebfffec2 	bl	11aebc <pbuf_free>
  11b3b0:	e1a03000 	mov	r3, r0
  11b3b4:	e54b3005 	strb	r3, [fp, #-5]
                  ("pbuf_dechain: deallocated %p (as it is no longer referenced)\n", (void *)q));
    }
    /* return remaining tail or NULL if deallocated */
  }
  /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
  11b3b8:	e51b3010 	ldr	r3, [fp, #-16]
  11b3bc:	e1d320b8 	ldrh	r2, [r3, #8]
  11b3c0:	e51b3010 	ldr	r3, [fp, #-16]
  11b3c4:	e1d330ba 	ldrh	r3, [r3, #10]
  11b3c8:	e1520003 	cmp	r2, r3
  11b3cc:	0a000006 	beq	11b3ec <pbuf_dechain+0xf8>
  11b3d0:	e3070970 	movw	r0, #31088	; 0x7970
  11b3d4:	e3400014 	movt	r0, #20
  11b3d8:	ebff9f4d 	bl	103114 <rt_kprintf>
  11b3dc:	e300139e 	movw	r1, #926	; 0x39e
  11b3e0:	e3070640 	movw	r0, #30272	; 0x7640
  11b3e4:	e3400014 	movt	r0, #20
  11b3e8:	ebffbf40 	bl	10b0f0 <sys_arch_assert>
  return ((tail_gone > 0) ? NULL : q);
  11b3ec:	e55b3005 	ldrb	r3, [fp, #-5]
  11b3f0:	e3530000 	cmp	r3, #0
  11b3f4:	1a000001 	bne	11b400 <pbuf_dechain+0x10c>
  11b3f8:	e51b300c 	ldr	r3, [fp, #-12]
  11b3fc:	ea000000 	b	11b404 <pbuf_dechain+0x110>
  11b400:	e3a03000 	mov	r3, #0
}
  11b404:	e1a00003 	mov	r0, r3
  11b408:	e24bd004 	sub	sp, fp, #4
  11b40c:	e8bd8800 	pop	{fp, pc}

0011b410 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
  11b410:	e92d4800 	push	{fp, lr}
  11b414:	e28db004 	add	fp, sp, #4
  11b418:	e24dd010 	sub	sp, sp, #16
  11b41c:	e50b0010 	str	r0, [fp, #-16]
  11b420:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u16_t offset_to=0, offset_from=0, len;
  11b424:	e3a03000 	mov	r3, #0
  11b428:	e14b30b6 	strh	r3, [fp, #-6]
  11b42c:	e3a03000 	mov	r3, #0
  11b430:	e14b30b8 	strh	r3, [fp, #-8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  11b434:	e51b3010 	ldr	r3, [fp, #-16]
  11b438:	e3530000 	cmp	r3, #0
  11b43c:	0a000008 	beq	11b464 <pbuf_copy+0x54>
  11b440:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b444:	e3530000 	cmp	r3, #0
  11b448:	0a000005 	beq	11b464 <pbuf_copy+0x54>
  11b44c:	e51b3010 	ldr	r3, [fp, #-16]
  11b450:	e1d320b8 	ldrh	r2, [r3, #8]
  11b454:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b458:	e1d330b8 	ldrh	r3, [r3, #8]
  11b45c:	e1520003 	cmp	r2, r3
  11b460:	2a000008 	bcs	11b488 <pbuf_copy+0x78>
  11b464:	e3070988 	movw	r0, #31112	; 0x7988
  11b468:	e3400014 	movt	r0, #20
  11b46c:	ebff9f28 	bl	103114 <rt_kprintf>
  11b470:	e30013be 	movw	r1, #958	; 0x3be
  11b474:	e3070640 	movw	r0, #30272	; 0x7640
  11b478:	e3400014 	movt	r0, #20
  11b47c:	ebffbf1b 	bl	10b0f0 <sys_arch_assert>
  11b480:	e3e0300f 	mvn	r3, #15
  11b484:	ea000094 	b	11b6dc <pbuf_copy+0x2cc>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  11b488:	e51b3010 	ldr	r3, [fp, #-16]
  11b48c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b490:	e1a02003 	mov	r2, r3
  11b494:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b498:	e0422003 	sub	r2, r2, r3
  11b49c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b4a0:	e1d330ba 	ldrh	r3, [r3, #10]
  11b4a4:	e1a01003 	mov	r1, r3
  11b4a8:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b4ac:	e0413003 	sub	r3, r1, r3
  11b4b0:	e1520003 	cmp	r2, r3
  11b4b4:	ba000005 	blt	11b4d0 <pbuf_copy+0xc0>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
  11b4b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b4bc:	e1d320ba 	ldrh	r2, [r3, #10]
  11b4c0:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b4c4:	e0423003 	sub	r3, r2, r3
  11b4c8:	e14b30ba 	strh	r3, [fp, #-10]
  11b4cc:	ea000004 	b	11b4e4 <pbuf_copy+0xd4>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
  11b4d0:	e51b3010 	ldr	r3, [fp, #-16]
  11b4d4:	e1d320ba 	ldrh	r2, [r3, #10]
  11b4d8:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b4dc:	e0423003 	sub	r3, r2, r3
  11b4e0:	e14b30ba 	strh	r3, [fp, #-10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  11b4e4:	e51b3010 	ldr	r3, [fp, #-16]
  11b4e8:	e5932004 	ldr	r2, [r3, #4]
  11b4ec:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b4f0:	e0820003 	add	r0, r2, r3
  11b4f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b4f8:	e5932004 	ldr	r2, [r3, #4]
  11b4fc:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b500:	e0823003 	add	r3, r2, r3
  11b504:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b508:	e1a01003 	mov	r1, r3
  11b50c:	eb009622 	bl	140d9c <memcpy>
    offset_to += len;
  11b510:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b514:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b518:	e0823003 	add	r3, r2, r3
  11b51c:	e14b30b6 	strh	r3, [fp, #-6]
    offset_from += len;
  11b520:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b524:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b528:	e0823003 	add	r3, r2, r3
  11b52c:	e14b30b8 	strh	r3, [fp, #-8]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
  11b530:	e51b3010 	ldr	r3, [fp, #-16]
  11b534:	e1d330ba 	ldrh	r3, [r3, #10]
  11b538:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b53c:	e1520003 	cmp	r2, r3
  11b540:	9a000006 	bls	11b560 <pbuf_copy+0x150>
  11b544:	e30709b8 	movw	r0, #31160	; 0x79b8
  11b548:	e3400014 	movt	r0, #20
  11b54c:	ebff9ef0 	bl	103114 <rt_kprintf>
  11b550:	e30013ce 	movw	r1, #974	; 0x3ce
  11b554:	e3070640 	movw	r0, #30272	; 0x7640
  11b558:	e3400014 	movt	r0, #20
  11b55c:	ebffbee3 	bl	10b0f0 <sys_arch_assert>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
  11b560:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b564:	e1d330ba 	ldrh	r3, [r3, #10]
  11b568:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b56c:	e1520003 	cmp	r2, r3
  11b570:	9a000006 	bls	11b590 <pbuf_copy+0x180>
  11b574:	e30709d0 	movw	r0, #31184	; 0x79d0
  11b578:	e3400014 	movt	r0, #20
  11b57c:	ebff9ee4 	bl	103114 <rt_kprintf>
  11b580:	e30013cf 	movw	r1, #975	; 0x3cf
  11b584:	e3070640 	movw	r0, #30272	; 0x7640
  11b588:	e3400014 	movt	r0, #20
  11b58c:	ebffbed7 	bl	10b0f0 <sys_arch_assert>
    if (offset_from >= p_from->len) {
  11b590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b594:	e1d330ba 	ldrh	r3, [r3, #10]
  11b598:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b59c:	e1520003 	cmp	r2, r3
  11b5a0:	3a000004 	bcc	11b5b8 <pbuf_copy+0x1a8>
      /* on to next p_from (if any) */
      offset_from = 0;
  11b5a4:	e3a03000 	mov	r3, #0
  11b5a8:	e14b30b8 	strh	r3, [fp, #-8]
      p_from = p_from->next;
  11b5ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b5b0:	e5933000 	ldr	r3, [r3]
  11b5b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
    if (offset_to == p_to->len) {
  11b5b8:	e51b3010 	ldr	r3, [fp, #-16]
  11b5bc:	e1d330ba 	ldrh	r3, [r3, #10]
  11b5c0:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b5c4:	e1520003 	cmp	r2, r3
  11b5c8:	1a000013 	bne	11b61c <pbuf_copy+0x20c>
      /* on to next p_to (if any) */
      offset_to = 0;
  11b5cc:	e3a03000 	mov	r3, #0
  11b5d0:	e14b30b6 	strh	r3, [fp, #-6]
      p_to = p_to->next;
  11b5d4:	e51b3010 	ldr	r3, [fp, #-16]
  11b5d8:	e5933000 	ldr	r3, [r3]
  11b5dc:	e50b3010 	str	r3, [fp, #-16]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  11b5e0:	e51b3010 	ldr	r3, [fp, #-16]
  11b5e4:	e3530000 	cmp	r3, #0
  11b5e8:	1a00000b 	bne	11b61c <pbuf_copy+0x20c>
  11b5ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b5f0:	e3530000 	cmp	r3, #0
  11b5f4:	0a000008 	beq	11b61c <pbuf_copy+0x20c>
  11b5f8:	e30709ec 	movw	r0, #31212	; 0x79ec
  11b5fc:	e3400014 	movt	r0, #20
  11b600:	ebff9ec3 	bl	103114 <rt_kprintf>
  11b604:	e30013d9 	movw	r1, #985	; 0x3d9
  11b608:	e3070640 	movw	r0, #30272	; 0x7640
  11b60c:	e3400014 	movt	r0, #20
  11b610:	ebffbeb6 	bl	10b0f0 <sys_arch_assert>
  11b614:	e3e0300f 	mvn	r3, #15
  11b618:	ea00002f 	b	11b6dc <pbuf_copy+0x2cc>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  11b61c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b620:	e3530000 	cmp	r3, #0
  11b624:	0a000012 	beq	11b674 <pbuf_copy+0x264>
  11b628:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b62c:	e1d320ba 	ldrh	r2, [r3, #10]
  11b630:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b634:	e1d330b8 	ldrh	r3, [r3, #8]
  11b638:	e1520003 	cmp	r2, r3
  11b63c:	1a00000c 	bne	11b674 <pbuf_copy+0x264>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b640:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b644:	e5933000 	ldr	r3, [r3]
  11b648:	e3530000 	cmp	r3, #0
  11b64c:	0a000008 	beq	11b674 <pbuf_copy+0x264>
  11b650:	e30709fc 	movw	r0, #31228	; 0x79fc
  11b654:	e3400014 	movt	r0, #20
  11b658:	ebff9ead 	bl	103114 <rt_kprintf>
  11b65c:	e30013df 	movw	r1, #991	; 0x3df
  11b660:	e3070640 	movw	r0, #30272	; 0x7640
  11b664:	e3400014 	movt	r0, #20
  11b668:	ebffbea0 	bl	10b0f0 <sys_arch_assert>
  11b66c:	e3e03005 	mvn	r3, #5
  11b670:	ea000019 	b	11b6dc <pbuf_copy+0x2cc>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  11b674:	e51b3010 	ldr	r3, [fp, #-16]
  11b678:	e3530000 	cmp	r3, #0
  11b67c:	0a000012 	beq	11b6cc <pbuf_copy+0x2bc>
  11b680:	e51b3010 	ldr	r3, [fp, #-16]
  11b684:	e1d320ba 	ldrh	r2, [r3, #10]
  11b688:	e51b3010 	ldr	r3, [fp, #-16]
  11b68c:	e1d330b8 	ldrh	r3, [r3, #8]
  11b690:	e1520003 	cmp	r2, r3
  11b694:	1a00000c 	bne	11b6cc <pbuf_copy+0x2bc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b698:	e51b3010 	ldr	r3, [fp, #-16]
  11b69c:	e5933000 	ldr	r3, [r3]
  11b6a0:	e3530000 	cmp	r3, #0
  11b6a4:	0a000008 	beq	11b6cc <pbuf_copy+0x2bc>
  11b6a8:	e30709fc 	movw	r0, #31228	; 0x79fc
  11b6ac:	e3400014 	movt	r0, #20
  11b6b0:	ebff9e97 	bl	103114 <rt_kprintf>
  11b6b4:	e3a01ff9 	mov	r1, #996	; 0x3e4
  11b6b8:	e3070640 	movw	r0, #30272	; 0x7640
  11b6bc:	e3400014 	movt	r0, #20
  11b6c0:	ebffbe8a 	bl	10b0f0 <sys_arch_assert>
  11b6c4:	e3e03005 	mvn	r3, #5
  11b6c8:	ea000003 	b	11b6dc <pbuf_copy+0x2cc>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  11b6cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b6d0:	e3530000 	cmp	r3, #0
  11b6d4:	1affff6b 	bne	11b488 <pbuf_copy+0x78>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
  11b6d8:	e3a03000 	mov	r3, #0
}
  11b6dc:	e1a00003 	mov	r0, r3
  11b6e0:	e24bd004 	sub	sp, fp, #4
  11b6e4:	e8bd8800 	pop	{fp, pc}

0011b6e8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  11b6e8:	e92d4800 	push	{fp, lr}
  11b6ec:	e28db004 	add	fp, sp, #4
  11b6f0:	e24dd020 	sub	sp, sp, #32
  11b6f4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b6f8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b6fc:	e1a01002 	mov	r1, r2
  11b700:	e1a02003 	mov	r2, r3
  11b704:	e1a03001 	mov	r3, r1
  11b708:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11b70c:	e1a03002 	mov	r3, r2
  11b710:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
  11b714:	e3a03000 	mov	r3, #0
  11b718:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  11b71c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b720:	e3530000 	cmp	r3, #0
  11b724:	1a000008 	bne	11b74c <pbuf_copy_partial+0x64>
  11b728:	e3070a28 	movw	r0, #31272	; 0x7a28
  11b72c:	e3400014 	movt	r0, #20
  11b730:	ebff9e77 	bl	103114 <rt_kprintf>
  11b734:	e30013ff 	movw	r1, #1023	; 0x3ff
  11b738:	e3070640 	movw	r0, #30272	; 0x7640
  11b73c:	e3400014 	movt	r0, #20
  11b740:	ebffbe6a 	bl	10b0f0 <sys_arch_assert>
  11b744:	e3a03000 	mov	r3, #0
  11b748:	ea000053 	b	11b89c <pbuf_copy_partial+0x1b4>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  11b74c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b750:	e3530000 	cmp	r3, #0
  11b754:	1a000008 	bne	11b77c <pbuf_copy_partial+0x94>
  11b758:	e3070a48 	movw	r0, #31304	; 0x7a48
  11b75c:	e3400014 	movt	r0, #20
  11b760:	ebff9e6b 	bl	103114 <rt_kprintf>
  11b764:	e3a01b01 	mov	r1, #1024	; 0x400
  11b768:	e3070640 	movw	r0, #30272	; 0x7640
  11b76c:	e3400014 	movt	r0, #20
  11b770:	ebffbe5e 	bl	10b0f0 <sys_arch_assert>
  11b774:	e3a03000 	mov	r3, #0
  11b778:	ea000047 	b	11b89c <pbuf_copy_partial+0x1b4>

  left = 0;
  11b77c:	e3a03000 	mov	r3, #0
  11b780:	e14b30ba 	strh	r3, [fp, #-10]

  if ((buf == NULL) || (dataptr == NULL)) {
  11b784:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b788:	e3530000 	cmp	r3, #0
  11b78c:	0a000002 	beq	11b79c <pbuf_copy_partial+0xb4>
  11b790:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b794:	e3530000 	cmp	r3, #0
  11b798:	1a000001 	bne	11b7a4 <pbuf_copy_partial+0xbc>
    return 0;
  11b79c:	e3a03000 	mov	r3, #0
  11b7a0:	ea00003d 	b	11b89c <pbuf_copy_partial+0x1b4>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11b7a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b7a8:	e50b3008 	str	r3, [fp, #-8]
  11b7ac:	ea000033 	b	11b880 <pbuf_copy_partial+0x198>
    if ((offset != 0) && (offset >= p->len)) {
  11b7b0:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b7b4:	e3530000 	cmp	r3, #0
  11b7b8:	0a00000a 	beq	11b7e8 <pbuf_copy_partial+0x100>
  11b7bc:	e51b3008 	ldr	r3, [fp, #-8]
  11b7c0:	e1d330ba 	ldrh	r3, [r3, #10]
  11b7c4:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b7c8:	e1520003 	cmp	r2, r3
  11b7cc:	3a000005 	bcc	11b7e8 <pbuf_copy_partial+0x100>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
  11b7d0:	e51b3008 	ldr	r3, [fp, #-8]
  11b7d4:	e1d330ba 	ldrh	r3, [r3, #10]
  11b7d8:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b7dc:	e0423003 	sub	r3, r2, r3
  11b7e0:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  11b7e4:	ea000022 	b	11b874 <pbuf_copy_partial+0x18c>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
  11b7e8:	e51b3008 	ldr	r3, [fp, #-8]
  11b7ec:	e1d320ba 	ldrh	r2, [r3, #10]
  11b7f0:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b7f4:	e0423003 	sub	r3, r2, r3
  11b7f8:	e14b30bc 	strh	r3, [fp, #-12]
      if (buf_copy_len > len) {
  11b7fc:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b800:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b804:	e1520003 	cmp	r2, r3
  11b808:	9a000001 	bls	11b814 <pbuf_copy_partial+0x12c>
        buf_copy_len = len;
  11b80c:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b810:	e14b30bc 	strh	r3, [fp, #-12]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  11b814:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b818:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11b81c:	e0820003 	add	r0, r2, r3
  11b820:	e51b3008 	ldr	r3, [fp, #-8]
  11b824:	e5932004 	ldr	r2, [r3, #4]
  11b828:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b82c:	e0823003 	add	r3, r2, r3
  11b830:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b834:	e1a01003 	mov	r1, r3
  11b838:	eb009557 	bl	140d9c <memcpy>
      copied_total += buf_copy_len;
  11b83c:	e15b20be 	ldrh	r2, [fp, #-14]
  11b840:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b844:	e0823003 	add	r3, r2, r3
  11b848:	e14b30be 	strh	r3, [fp, #-14]
      left += buf_copy_len;
  11b84c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b850:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b854:	e0823003 	add	r3, r2, r3
  11b858:	e14b30ba 	strh	r3, [fp, #-10]
      len -= buf_copy_len;
  11b85c:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b860:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b864:	e0423003 	sub	r3, r2, r3
  11b868:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      offset = 0;
  11b86c:	e3a03000 	mov	r3, #0
  11b870:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11b874:	e51b3008 	ldr	r3, [fp, #-8]
  11b878:	e5933000 	ldr	r3, [r3]
  11b87c:	e50b3008 	str	r3, [fp, #-8]
  11b880:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b884:	e3530000 	cmp	r3, #0
  11b888:	0a000002 	beq	11b898 <pbuf_copy_partial+0x1b0>
  11b88c:	e51b3008 	ldr	r3, [fp, #-8]
  11b890:	e3530000 	cmp	r3, #0
  11b894:	1affffc5 	bne	11b7b0 <pbuf_copy_partial+0xc8>
    }
  }
  return copied_total;
  11b898:	e15b30be 	ldrh	r3, [fp, #-14]
}
  11b89c:	e1a00003 	mov	r0, r3
  11b8a0:	e24bd004 	sub	sp, fp, #4
  11b8a4:	e8bd8800 	pop	{fp, pc}

0011b8a8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11b8a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11b8ac:	e28db000 	add	fp, sp, #0
  11b8b0:	e24dd01c 	sub	sp, sp, #28
  11b8b4:	e50b0010 	str	r0, [fp, #-16]
  11b8b8:	e1a03001 	mov	r3, r1
  11b8bc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11b8c0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset_left = in_offset;
  11b8c4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b8c8:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = in;
  11b8cc:	e51b3010 	ldr	r3, [fp, #-16]
  11b8d0:	e50b300c 	str	r3, [fp, #-12]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
  11b8d4:	ea000007 	b	11b8f8 <pbuf_skip_const+0x50>
    offset_left -= q->len;
  11b8d8:	e51b300c 	ldr	r3, [fp, #-12]
  11b8dc:	e1d330ba 	ldrh	r3, [r3, #10]
  11b8e0:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b8e4:	e0423003 	sub	r3, r2, r3
  11b8e8:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11b8ec:	e51b300c 	ldr	r3, [fp, #-12]
  11b8f0:	e5933000 	ldr	r3, [r3]
  11b8f4:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= offset_left)) {
  11b8f8:	e51b300c 	ldr	r3, [fp, #-12]
  11b8fc:	e3530000 	cmp	r3, #0
  11b900:	0a000004 	beq	11b918 <pbuf_skip_const+0x70>
  11b904:	e51b300c 	ldr	r3, [fp, #-12]
  11b908:	e1d330ba 	ldrh	r3, [r3, #10]
  11b90c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b910:	e1520003 	cmp	r2, r3
  11b914:	2affffef 	bcs	11b8d8 <pbuf_skip_const+0x30>
  }
  if (out_offset != NULL) {
  11b918:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b91c:	e3530000 	cmp	r3, #0
  11b920:	0a000002 	beq	11b930 <pbuf_skip_const+0x88>
    *out_offset = offset_left;
  11b924:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b928:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b92c:	e1c320b0 	strh	r2, [r3]
  }
  return q;
  11b930:	e51b300c 	ldr	r3, [fp, #-12]
}
  11b934:	e1a00003 	mov	r0, r3
  11b938:	e28bd000 	add	sp, fp, #0
  11b93c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11b940:	e12fff1e 	bx	lr

0011b944 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11b944:	e92d4800 	push	{fp, lr}
  11b948:	e28db004 	add	fp, sp, #4
  11b94c:	e24dd018 	sub	sp, sp, #24
  11b950:	e50b0010 	str	r0, [fp, #-16]
  11b954:	e1a03001 	mov	r3, r1
  11b958:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11b95c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
  11b960:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b964:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11b968:	e1a01003 	mov	r1, r3
  11b96c:	e51b0010 	ldr	r0, [fp, #-16]
  11b970:	ebffffcc 	bl	11b8a8 <pbuf_skip_const>
  11b974:	e50b0008 	str	r0, [fp, #-8]
  return LWIP_CONST_CAST(struct pbuf*, out);
  11b978:	e51b3008 	ldr	r3, [fp, #-8]
}
  11b97c:	e1a00003 	mov	r0, r3
  11b980:	e24bd004 	sub	sp, fp, #4
  11b984:	e8bd8800 	pop	{fp, pc}

0011b988 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
  11b988:	e92d4800 	push	{fp, lr}
  11b98c:	e28db004 	add	fp, sp, #4
  11b990:	e24dd020 	sub	sp, sp, #32
  11b994:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b998:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b99c:	e1a03002 	mov	r3, r2
  11b9a0:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
  11b9a4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b9a8:	e14b30bc 	strh	r3, [fp, #-12]
  u16_t copied_total = 0;
  11b9ac:	e3a03000 	mov	r3, #0
  11b9b0:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
  11b9b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b9b8:	e3530000 	cmp	r3, #0
  11b9bc:	1a000008 	bne	11b9e4 <pbuf_take+0x5c>
  11b9c0:	e3070a6c 	movw	r0, #31340	; 0x7a6c
  11b9c4:	e3400014 	movt	r0, #20
  11b9c8:	ebff9dd1 	bl	103114 <rt_kprintf>
  11b9cc:	e3001485 	movw	r1, #1157	; 0x485
  11b9d0:	e3070640 	movw	r0, #30272	; 0x7640
  11b9d4:	e3400014 	movt	r0, #20
  11b9d8:	ebffbdc4 	bl	10b0f0 <sys_arch_assert>
  11b9dc:	e3e0300f 	mvn	r3, #15
  11b9e0:	ea000062 	b	11bb70 <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  11b9e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b9e8:	e3530000 	cmp	r3, #0
  11b9ec:	1a000008 	bne	11ba14 <pbuf_take+0x8c>
  11b9f0:	e3070a84 	movw	r0, #31364	; 0x7a84
  11b9f4:	e3400014 	movt	r0, #20
  11b9f8:	ebff9dc5 	bl	103114 <rt_kprintf>
  11b9fc:	e3001486 	movw	r1, #1158	; 0x486
  11ba00:	e3070640 	movw	r0, #30272	; 0x7640
  11ba04:	e3400014 	movt	r0, #20
  11ba08:	ebffbdb8 	bl	10b0f0 <sys_arch_assert>
  11ba0c:	e3e0300f 	mvn	r3, #15
  11ba10:	ea000056 	b	11bb70 <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
  11ba14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ba18:	e1d330b8 	ldrh	r3, [r3, #8]
  11ba1c:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11ba20:	e1520003 	cmp	r2, r3
  11ba24:	9a000008 	bls	11ba4c <pbuf_take+0xc4>
  11ba28:	e3070aa0 	movw	r0, #31392	; 0x7aa0
  11ba2c:	e3400014 	movt	r0, #20
  11ba30:	ebff9db7 	bl	103114 <rt_kprintf>
  11ba34:	e3001487 	movw	r1, #1159	; 0x487
  11ba38:	e3070640 	movw	r0, #30272	; 0x7640
  11ba3c:	e3400014 	movt	r0, #20
  11ba40:	ebffbdaa 	bl	10b0f0 <sys_arch_assert>
  11ba44:	e3e03000 	mvn	r3, #0
  11ba48:	ea000048 	b	11bb70 <pbuf_take+0x1e8>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
  11ba4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ba50:	e3530000 	cmp	r3, #0
  11ba54:	0a000007 	beq	11ba78 <pbuf_take+0xf0>
  11ba58:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11ba5c:	e3530000 	cmp	r3, #0
  11ba60:	0a000004 	beq	11ba78 <pbuf_take+0xf0>
  11ba64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ba68:	e1d330b8 	ldrh	r3, [r3, #8]
  11ba6c:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11ba70:	e1520003 	cmp	r2, r3
  11ba74:	9a000001 	bls	11ba80 <pbuf_take+0xf8>
    return ERR_ARG;
  11ba78:	e3e0300f 	mvn	r3, #15
  11ba7c:	ea00003b 	b	11bb70 <pbuf_take+0x1e8>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
  11ba80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ba84:	e50b3008 	str	r3, [fp, #-8]
  11ba88:	ea000026 	b	11bb28 <pbuf_take+0x1a0>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
  11ba8c:	e51b3008 	ldr	r3, [fp, #-8]
  11ba90:	e3530000 	cmp	r3, #0
  11ba94:	1a000006 	bne	11bab4 <pbuf_take+0x12c>
  11ba98:	e3070ac0 	movw	r0, #31424	; 0x7ac0
  11ba9c:	e3400014 	movt	r0, #20
  11baa0:	ebff9d9b 	bl	103114 <rt_kprintf>
  11baa4:	e300148f 	movw	r1, #1167	; 0x48f
  11baa8:	e3070640 	movw	r0, #30272	; 0x7640
  11baac:	e3400014 	movt	r0, #20
  11bab0:	ebffbd8e 	bl	10b0f0 <sys_arch_assert>
    buf_copy_len = total_copy_len;
  11bab4:	e15b30bc 	ldrh	r3, [fp, #-12]
  11bab8:	e14b30ba 	strh	r3, [fp, #-10]
    if (buf_copy_len > p->len) {
  11babc:	e51b3008 	ldr	r3, [fp, #-8]
  11bac0:	e1d330ba 	ldrh	r3, [r3, #10]
  11bac4:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bac8:	e1520003 	cmp	r2, r3
  11bacc:	9a000002 	bls	11badc <pbuf_take+0x154>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
  11bad0:	e51b3008 	ldr	r3, [fp, #-8]
  11bad4:	e1d330ba 	ldrh	r3, [r3, #10]
  11bad8:	e14b30ba 	strh	r3, [fp, #-10]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
  11badc:	e51b3008 	ldr	r3, [fp, #-8]
  11bae0:	e5930004 	ldr	r0, [r3, #4]
  11bae4:	e15b30be 	ldrh	r3, [fp, #-14]
  11bae8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11baec:	e0823003 	add	r3, r2, r3
  11baf0:	e15b20ba 	ldrh	r2, [fp, #-10]
  11baf4:	e1a01003 	mov	r1, r3
  11baf8:	eb0094a7 	bl	140d9c <memcpy>
    total_copy_len -= buf_copy_len;
  11bafc:	e15b20bc 	ldrh	r2, [fp, #-12]
  11bb00:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bb04:	e0423003 	sub	r3, r2, r3
  11bb08:	e14b30bc 	strh	r3, [fp, #-12]
    copied_total += buf_copy_len;
  11bb0c:	e15b20be 	ldrh	r2, [fp, #-14]
  11bb10:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bb14:	e0823003 	add	r3, r2, r3
  11bb18:	e14b30be 	strh	r3, [fp, #-14]
  for (p = buf; total_copy_len != 0; p = p->next) {
  11bb1c:	e51b3008 	ldr	r3, [fp, #-8]
  11bb20:	e5933000 	ldr	r3, [r3]
  11bb24:	e50b3008 	str	r3, [fp, #-8]
  11bb28:	e15b30bc 	ldrh	r3, [fp, #-12]
  11bb2c:	e3530000 	cmp	r3, #0
  11bb30:	1affffd5 	bne	11ba8c <pbuf_take+0x104>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  11bb34:	e15b30bc 	ldrh	r3, [fp, #-12]
  11bb38:	e3530000 	cmp	r3, #0
  11bb3c:	1a000003 	bne	11bb50 <pbuf_take+0x1c8>
  11bb40:	e15b20be 	ldrh	r2, [fp, #-14]
  11bb44:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11bb48:	e1520003 	cmp	r2, r3
  11bb4c:	0a000006 	beq	11bb6c <pbuf_take+0x1e4>
  11bb50:	e3070ad8 	movw	r0, #31448	; 0x7ad8
  11bb54:	e3400014 	movt	r0, #20
  11bb58:	ebff9d6d 	bl	103114 <rt_kprintf>
  11bb5c:	e300149a 	movw	r1, #1178	; 0x49a
  11bb60:	e3070640 	movw	r0, #30272	; 0x7640
  11bb64:	e3400014 	movt	r0, #20
  11bb68:	ebffbd60 	bl	10b0f0 <sys_arch_assert>
  return ERR_OK;
  11bb6c:	e3a03000 	mov	r3, #0
}
  11bb70:	e1a00003 	mov	r0, r3
  11bb74:	e24bd004 	sub	sp, fp, #4
  11bb78:	e8bd8800 	pop	{fp, pc}

0011bb7c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
  11bb7c:	e92d4800 	push	{fp, lr}
  11bb80:	e28db004 	add	fp, sp, #4
  11bb84:	e24dd020 	sub	sp, sp, #32
  11bb88:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11bb8c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11bb90:	e1a01002 	mov	r1, r2
  11bb94:	e1a02003 	mov	r2, r3
  11bb98:	e1a03001 	mov	r3, r1
  11bb9c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11bba0:	e1a03002 	mov	r3, r2
  11bba4:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
  11bba8:	e24b2014 	sub	r2, fp, #20
  11bbac:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11bbb0:	e1a01003 	mov	r1, r3
  11bbb4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11bbb8:	ebffff61 	bl	11b944 <pbuf_skip>
  11bbbc:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
  11bbc0:	e51b3008 	ldr	r3, [fp, #-8]
  11bbc4:	e3530000 	cmp	r3, #0
  11bbc8:	0a000033 	beq	11bc9c <pbuf_take_at+0x120>
  11bbcc:	e51b3008 	ldr	r3, [fp, #-8]
  11bbd0:	e1d330b8 	ldrh	r3, [r3, #8]
  11bbd4:	e1a02003 	mov	r2, r3
  11bbd8:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11bbdc:	e1a01003 	mov	r1, r3
  11bbe0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11bbe4:	e0813003 	add	r3, r1, r3
  11bbe8:	e1520003 	cmp	r2, r3
  11bbec:	ba00002a 	blt	11bc9c <pbuf_take_at+0x120>
    u16_t remaining_len = len;
  11bbf0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11bbf4:	e14b30ba 	strh	r3, [fp, #-10]
    const u8_t* src_ptr = (const u8_t*)dataptr;
  11bbf8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11bbfc:	e50b3010 	str	r3, [fp, #-16]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
  11bc00:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11bc04:	e51b3008 	ldr	r3, [fp, #-8]
  11bc08:	e1d330ba 	ldrh	r3, [r3, #10]
  11bc0c:	e1a01003 	mov	r1, r3
  11bc10:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11bc14:	e0413003 	sub	r3, r1, r3
  11bc18:	e1520003 	cmp	r2, r3
  11bc1c:	b1a03002 	movlt	r3, r2
  11bc20:	a1a03003 	movge	r3, r3
  11bc24:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
  11bc28:	e51b3008 	ldr	r3, [fp, #-8]
  11bc2c:	e5933004 	ldr	r3, [r3, #4]
  11bc30:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  11bc34:	e0833002 	add	r3, r3, r2
  11bc38:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11bc3c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  11bc40:	e1a00003 	mov	r0, r3
  11bc44:	eb009454 	bl	140d9c <memcpy>
    remaining_len -= first_copy_len;
  11bc48:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bc4c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bc50:	e0423003 	sub	r3, r2, r3
  11bc54:	e14b30ba 	strh	r3, [fp, #-10]
    src_ptr += first_copy_len;
  11bc58:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bc5c:	e51b2010 	ldr	r2, [fp, #-16]
  11bc60:	e0823003 	add	r3, r2, r3
  11bc64:	e50b3010 	str	r3, [fp, #-16]
    if (remaining_len > 0) {
  11bc68:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bc6c:	e3530000 	cmp	r3, #0
  11bc70:	0a000007 	beq	11bc94 <pbuf_take_at+0x118>
      return pbuf_take(q->next, src_ptr, remaining_len);
  11bc74:	e51b3008 	ldr	r3, [fp, #-8]
  11bc78:	e5933000 	ldr	r3, [r3]
  11bc7c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bc80:	e51b1010 	ldr	r1, [fp, #-16]
  11bc84:	e1a00003 	mov	r0, r3
  11bc88:	ebffff3e 	bl	11b988 <pbuf_take>
  11bc8c:	e1a03000 	mov	r3, r0
  11bc90:	ea000002 	b	11bca0 <pbuf_take_at+0x124>
    }
    return ERR_OK;
  11bc94:	e3a03000 	mov	r3, #0
  11bc98:	ea000000 	b	11bca0 <pbuf_take_at+0x124>
  }
  return ERR_MEM;
  11bc9c:	e3e03000 	mvn	r3, #0
}
  11bca0:	e1a00003 	mov	r0, r3
  11bca4:	e24bd004 	sub	sp, fp, #4
  11bca8:	e8bd8800 	pop	{fp, pc}

0011bcac <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf*
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
  11bcac:	e92d4800 	push	{fp, lr}
  11bcb0:	e28db004 	add	fp, sp, #4
  11bcb4:	e24dd010 	sub	sp, sp, #16
  11bcb8:	e50b0010 	str	r0, [fp, #-16]
  11bcbc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  err_t err;
  if (p->next == NULL) {
  11bcc0:	e51b3010 	ldr	r3, [fp, #-16]
  11bcc4:	e5933000 	ldr	r3, [r3]
  11bcc8:	e3530000 	cmp	r3, #0
  11bccc:	1a000001 	bne	11bcd8 <pbuf_coalesce+0x2c>
    return p;
  11bcd0:	e51b3010 	ldr	r3, [fp, #-16]
  11bcd4:	ea00001d 	b	11bd50 <pbuf_coalesce+0xa4>
  }
  q = pbuf_alloc(layer, p->tot_len, PBUF_RAM);
  11bcd8:	e51b3010 	ldr	r3, [fp, #-16]
  11bcdc:	e1d330b8 	ldrh	r3, [r3, #8]
  11bce0:	e3a02000 	mov	r2, #0
  11bce4:	e1a01003 	mov	r1, r3
  11bce8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11bcec:	ebfff96b 	bl	11a2a0 <pbuf_alloc>
  11bcf0:	e50b0008 	str	r0, [fp, #-8]
  if (q == NULL) {
  11bcf4:	e51b3008 	ldr	r3, [fp, #-8]
  11bcf8:	e3530000 	cmp	r3, #0
  11bcfc:	1a000001 	bne	11bd08 <pbuf_coalesce+0x5c>
    /* @todo: what do we do now? */
    return p;
  11bd00:	e51b3010 	ldr	r3, [fp, #-16]
  11bd04:	ea000011 	b	11bd50 <pbuf_coalesce+0xa4>
  }
  err = pbuf_copy(q, p);
  11bd08:	e51b1010 	ldr	r1, [fp, #-16]
  11bd0c:	e51b0008 	ldr	r0, [fp, #-8]
  11bd10:	ebfffdbe 	bl	11b410 <pbuf_copy>
  11bd14:	e1a03000 	mov	r3, r0
  11bd18:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  11bd1c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  11bd20:	e3530000 	cmp	r3, #0
  11bd24:	0a000006 	beq	11bd44 <pbuf_coalesce+0x98>
  11bd28:	e3070af0 	movw	r0, #31472	; 0x7af0
  11bd2c:	e3400014 	movt	r0, #20
  11bd30:	ebff9cf7 	bl	103114 <rt_kprintf>
  11bd34:	e30014dc 	movw	r1, #1244	; 0x4dc
  11bd38:	e3070640 	movw	r0, #30272	; 0x7640
  11bd3c:	e3400014 	movt	r0, #20
  11bd40:	ebffbcea 	bl	10b0f0 <sys_arch_assert>
  pbuf_free(p);
  11bd44:	e51b0010 	ldr	r0, [fp, #-16]
  11bd48:	ebfffc5b 	bl	11aebc <pbuf_free>
  return q;
  11bd4c:	e51b3008 	ldr	r3, [fp, #-8]
}
  11bd50:	e1a00003 	mov	r0, r3
  11bd54:	e24bd004 	sub	sp, fp, #4
  11bd58:	e8bd8800 	pop	{fp, pc}

0011bd5c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf* p, u16_t offset)
{
  11bd5c:	e92d4800 	push	{fp, lr}
  11bd60:	e28db004 	add	fp, sp, #4
  11bd64:	e24dd010 	sub	sp, sp, #16
  11bd68:	e50b0010 	str	r0, [fp, #-16]
  11bd6c:	e1a03001 	mov	r3, r1
  11bd70:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int ret = pbuf_try_get_at(p, offset);
  11bd74:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bd78:	e1a01003 	mov	r1, r3
  11bd7c:	e51b0010 	ldr	r0, [fp, #-16]
  11bd80:	eb00000a 	bl	11bdb0 <pbuf_try_get_at>
  11bd84:	e50b0008 	str	r0, [fp, #-8]
  if (ret >= 0) {
  11bd88:	e51b3008 	ldr	r3, [fp, #-8]
  11bd8c:	e3530000 	cmp	r3, #0
  11bd90:	ba000002 	blt	11bda0 <pbuf_get_at+0x44>
    return (u8_t)ret;
  11bd94:	e51b3008 	ldr	r3, [fp, #-8]
  11bd98:	e6ef3073 	uxtb	r3, r3
  11bd9c:	ea000000 	b	11bda4 <pbuf_get_at+0x48>
  }
  return 0;
  11bda0:	e3a03000 	mov	r3, #0
}
  11bda4:	e1a00003 	mov	r0, r3
  11bda8:	e24bd004 	sub	sp, fp, #4
  11bdac:	e8bd8800 	pop	{fp, pc}

0011bdb0 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf* p, u16_t offset)
{
  11bdb0:	e92d4800 	push	{fp, lr}
  11bdb4:	e28db004 	add	fp, sp, #4
  11bdb8:	e24dd010 	sub	sp, sp, #16
  11bdbc:	e50b0010 	str	r0, [fp, #-16]
  11bdc0:	e1a03001 	mov	r3, r1
  11bdc4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t q_idx;
  const struct pbuf* q = pbuf_skip_const(p, offset, &q_idx);
  11bdc8:	e24b200a 	sub	r2, fp, #10
  11bdcc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bdd0:	e1a01003 	mov	r1, r3
  11bdd4:	e51b0010 	ldr	r0, [fp, #-16]
  11bdd8:	ebfffeb2 	bl	11b8a8 <pbuf_skip_const>
  11bddc:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11bde0:	e51b3008 	ldr	r3, [fp, #-8]
  11bde4:	e3530000 	cmp	r3, #0
  11bde8:	0a00000a 	beq	11be18 <pbuf_try_get_at+0x68>
  11bdec:	e51b3008 	ldr	r3, [fp, #-8]
  11bdf0:	e1d320ba 	ldrh	r2, [r3, #10]
  11bdf4:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bdf8:	e1520003 	cmp	r2, r3
  11bdfc:	9a000005 	bls	11be18 <pbuf_try_get_at+0x68>
    return ((u8_t*)q->payload)[q_idx];
  11be00:	e51b3008 	ldr	r3, [fp, #-8]
  11be04:	e5933004 	ldr	r3, [r3, #4]
  11be08:	e15b20ba 	ldrh	r2, [fp, #-10]
  11be0c:	e0833002 	add	r3, r3, r2
  11be10:	e5d33000 	ldrb	r3, [r3]
  11be14:	ea000000 	b	11be1c <pbuf_try_get_at+0x6c>
  }
  return -1;
  11be18:	e3e03000 	mvn	r3, #0
}
  11be1c:	e1a00003 	mov	r0, r3
  11be20:	e24bd004 	sub	sp, fp, #4
  11be24:	e8bd8800 	pop	{fp, pc}

0011be28 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf* p, u16_t offset, u8_t data)
{
  11be28:	e92d4800 	push	{fp, lr}
  11be2c:	e28db004 	add	fp, sp, #4
  11be30:	e24dd010 	sub	sp, sp, #16
  11be34:	e50b0010 	str	r0, [fp, #-16]
  11be38:	e1a03001 	mov	r3, r1
  11be3c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11be40:	e1a03002 	mov	r3, r2
  11be44:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t q_idx;
  struct pbuf* q = pbuf_skip(p, offset, &q_idx);
  11be48:	e24b200a 	sub	r2, fp, #10
  11be4c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11be50:	e1a01003 	mov	r1, r3
  11be54:	e51b0010 	ldr	r0, [fp, #-16]
  11be58:	ebfffeb9 	bl	11b944 <pbuf_skip>
  11be5c:	e50b0008 	str	r0, [fp, #-8]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11be60:	e51b3008 	ldr	r3, [fp, #-8]
  11be64:	e3530000 	cmp	r3, #0
  11be68:	0a00000a 	beq	11be98 <pbuf_put_at+0x70>
  11be6c:	e51b3008 	ldr	r3, [fp, #-8]
  11be70:	e1d320ba 	ldrh	r2, [r3, #10]
  11be74:	e15b30ba 	ldrh	r3, [fp, #-10]
  11be78:	e1520003 	cmp	r2, r3
  11be7c:	9a000005 	bls	11be98 <pbuf_put_at+0x70>
    ((u8_t*)q->payload)[q_idx] = data;
  11be80:	e51b3008 	ldr	r3, [fp, #-8]
  11be84:	e5933004 	ldr	r3, [r3, #4]
  11be88:	e15b20ba 	ldrh	r2, [fp, #-10]
  11be8c:	e0833002 	add	r3, r3, r2
  11be90:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  11be94:	e5c32000 	strb	r2, [r3]
  }
}
  11be98:	e320f000 	nop	{0}
  11be9c:	e24bd004 	sub	sp, fp, #4
  11bea0:	e8bd8800 	pop	{fp, pc}

0011bea4 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf* p, u16_t offset, const void* s2, u16_t n)
{
  11bea4:	e92d4800 	push	{fp, lr}
  11bea8:	e28db004 	add	fp, sp, #4
  11beac:	e24dd020 	sub	sp, sp, #32
  11beb0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11beb4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11beb8:	e1a02003 	mov	r2, r3
  11bebc:	e1a03001 	mov	r3, r1
  11bec0:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  11bec4:	e1a03002 	mov	r3, r2
  11bec8:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  u16_t start = offset;
  11becc:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11bed0:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = p;
  11bed4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bed8:	e50b300c 	str	r3, [fp, #-12]
  u16_t i;
 
  /* pbuf long enough to perform check? */
  if(p->tot_len < (offset + n)) {
  11bedc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bee0:	e1d330b8 	ldrh	r3, [r3, #8]
  11bee4:	e1a01003 	mov	r1, r3
  11bee8:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11beec:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11bef0:	e0823003 	add	r3, r2, r3
  11bef4:	e1510003 	cmp	r1, r3
  11bef8:	aa000009 	bge	11bf24 <pbuf_memcmp+0x80>
    return 0xffff;
  11befc:	e30f3fff 	movw	r3, #65535	; 0xffff
  11bf00:	ea000030 	b	11bfc8 <pbuf_memcmp+0x124>
  }
 
  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start -= q->len;
  11bf04:	e51b300c 	ldr	r3, [fp, #-12]
  11bf08:	e1d330ba 	ldrh	r3, [r3, #10]
  11bf0c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bf10:	e0423003 	sub	r3, r2, r3
  11bf14:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11bf18:	e51b300c 	ldr	r3, [fp, #-12]
  11bf1c:	e5933000 	ldr	r3, [r3]
  11bf20:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= start)) {
  11bf24:	e51b300c 	ldr	r3, [fp, #-12]
  11bf28:	e3530000 	cmp	r3, #0
  11bf2c:	0a000004 	beq	11bf44 <pbuf_memcmp+0xa0>
  11bf30:	e51b300c 	ldr	r3, [fp, #-12]
  11bf34:	e1d330ba 	ldrh	r3, [r3, #10]
  11bf38:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bf3c:	e1520003 	cmp	r2, r3
  11bf40:	2affffef 	bcs	11bf04 <pbuf_memcmp+0x60>
  }
 
  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
  11bf44:	e3a03000 	mov	r3, #0
  11bf48:	e14b30be 	strh	r3, [fp, #-14]
  11bf4c:	ea000018 	b	11bfb4 <pbuf_memcmp+0x110>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, start + i);
  11bf50:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bf54:	e15b30be 	ldrh	r3, [fp, #-14]
  11bf58:	e0823003 	add	r3, r2, r3
  11bf5c:	e6ff3073 	uxth	r3, r3
  11bf60:	e1a01003 	mov	r1, r3
  11bf64:	e51b000c 	ldr	r0, [fp, #-12]
  11bf68:	ebffff7b 	bl	11bd5c <pbuf_get_at>
  11bf6c:	e1a03000 	mov	r3, r0
  11bf70:	e54b300f 	strb	r3, [fp, #-15]
    u8_t b = ((const u8_t*)s2)[i];
  11bf74:	e15b30be 	ldrh	r3, [fp, #-14]
  11bf78:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11bf7c:	e0823003 	add	r3, r2, r3
  11bf80:	e5d33000 	ldrb	r3, [r3]
  11bf84:	e54b3010 	strb	r3, [fp, #-16]
    if (a != b) {
  11bf88:	e55b200f 	ldrb	r2, [fp, #-15]
  11bf8c:	e55b3010 	ldrb	r3, [fp, #-16]
  11bf90:	e1520003 	cmp	r2, r3
  11bf94:	0a000003 	beq	11bfa8 <pbuf_memcmp+0x104>
      return i+1;
  11bf98:	e15b30be 	ldrh	r3, [fp, #-14]
  11bf9c:	e2833001 	add	r3, r3, #1
  11bfa0:	e6ff3073 	uxth	r3, r3
  11bfa4:	ea000007 	b	11bfc8 <pbuf_memcmp+0x124>
  for (i = 0; i < n; i++) {
  11bfa8:	e15b30be 	ldrh	r3, [fp, #-14]
  11bfac:	e2833001 	add	r3, r3, #1
  11bfb0:	e14b30be 	strh	r3, [fp, #-14]
  11bfb4:	e15b20be 	ldrh	r2, [fp, #-14]
  11bfb8:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11bfbc:	e1520003 	cmp	r2, r3
  11bfc0:	3affffe2 	bcc	11bf50 <pbuf_memcmp+0xac>
    }
  }
  return 0;
  11bfc4:	e3a03000 	mov	r3, #0
}
  11bfc8:	e1a00003 	mov	r0, r3
  11bfcc:	e24bd004 	sub	sp, fp, #4
  11bfd0:	e8bd8800 	pop	{fp, pc}

0011bfd4 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
  11bfd4:	e92d4800 	push	{fp, lr}
  11bfd8:	e28db004 	add	fp, sp, #4
  11bfdc:	e24dd018 	sub	sp, sp, #24
  11bfe0:	e50b0010 	str	r0, [fp, #-16]
  11bfe4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11bfe8:	e1a01002 	mov	r1, r2
  11bfec:	e1a02003 	mov	r2, r3
  11bff0:	e1a03001 	mov	r3, r1
  11bff4:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  11bff8:	e1a03002 	mov	r3, r2
  11bffc:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  u16_t i;
  u16_t max = p->tot_len - mem_len;
  11c000:	e51b3010 	ldr	r3, [fp, #-16]
  11c004:	e1d320b8 	ldrh	r2, [r3, #8]
  11c008:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11c00c:	e0423003 	sub	r3, r2, r3
  11c010:	e14b30b8 	strh	r3, [fp, #-8]
  if (p->tot_len >= mem_len + start_offset) {
  11c014:	e51b3010 	ldr	r3, [fp, #-16]
  11c018:	e1d330b8 	ldrh	r3, [r3, #8]
  11c01c:	e1a01003 	mov	r1, r3
  11c020:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  11c024:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11c028:	e0823003 	add	r3, r2, r3
  11c02c:	e1510003 	cmp	r1, r3
  11c030:	ba000015 	blt	11c08c <pbuf_memfind+0xb8>
    for (i = start_offset; i <= max; i++) {
  11c034:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11c038:	e14b30b6 	strh	r3, [fp, #-6]
  11c03c:	ea00000e 	b	11c07c <pbuf_memfind+0xa8>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
  11c040:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11c044:	e15b10b6 	ldrh	r1, [fp, #-6]
  11c048:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11c04c:	e51b0010 	ldr	r0, [fp, #-16]
  11c050:	ebffff93 	bl	11bea4 <pbuf_memcmp>
  11c054:	e1a03000 	mov	r3, r0
  11c058:	e14b30ba 	strh	r3, [fp, #-10]
      if (plus == 0) {
  11c05c:	e15b30ba 	ldrh	r3, [fp, #-10]
  11c060:	e3530000 	cmp	r3, #0
  11c064:	1a000001 	bne	11c070 <pbuf_memfind+0x9c>
        return i;
  11c068:	e15b30b6 	ldrh	r3, [fp, #-6]
  11c06c:	ea000007 	b	11c090 <pbuf_memfind+0xbc>
    for (i = start_offset; i <= max; i++) {
  11c070:	e15b30b6 	ldrh	r3, [fp, #-6]
  11c074:	e2833001 	add	r3, r3, #1
  11c078:	e14b30b6 	strh	r3, [fp, #-6]
  11c07c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11c080:	e15b30b8 	ldrh	r3, [fp, #-8]
  11c084:	e1520003 	cmp	r2, r3
  11c088:	9affffec 	bls	11c040 <pbuf_memfind+0x6c>
      }
    }
  }
  return 0xFFFF;
  11c08c:	e30f3fff 	movw	r3, #65535	; 0xffff
}
  11c090:	e1a00003 	mov	r0, r3
  11c094:	e24bd004 	sub	sp, fp, #4
  11c098:	e8bd8800 	pop	{fp, pc}

0011c09c <pbuf_strstr>:
 * @param substr string to search for in p, maximum length is 0xFFFE
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_strstr(const struct pbuf* p, const char* substr)
{
  11c09c:	e92d4800 	push	{fp, lr}
  11c0a0:	e28db004 	add	fp, sp, #4
  11c0a4:	e24dd010 	sub	sp, sp, #16
  11c0a8:	e50b0010 	str	r0, [fp, #-16]
  11c0ac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  size_t substr_len;
  if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
  11c0b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c0b4:	e3530000 	cmp	r3, #0
  11c0b8:	0a000008 	beq	11c0e0 <pbuf_strstr+0x44>
  11c0bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c0c0:	e5d33000 	ldrb	r3, [r3]
  11c0c4:	e3530000 	cmp	r3, #0
  11c0c8:	0a000004 	beq	11c0e0 <pbuf_strstr+0x44>
  11c0cc:	e51b3010 	ldr	r3, [fp, #-16]
  11c0d0:	e1d330b8 	ldrh	r3, [r3, #8]
  11c0d4:	e30f2fff 	movw	r2, #65535	; 0xffff
  11c0d8:	e1530002 	cmp	r3, r2
  11c0dc:	1a000001 	bne	11c0e8 <pbuf_strstr+0x4c>
    return 0xFFFF;
  11c0e0:	e30f3fff 	movw	r3, #65535	; 0xffff
  11c0e4:	ea00000f 	b	11c128 <pbuf_strstr+0x8c>
  }
  substr_len = strlen(substr);
  11c0e8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11c0ec:	eb0094f3 	bl	1414c0 <strlen>
  11c0f0:	e50b0008 	str	r0, [fp, #-8]
  if (substr_len >= 0xFFFF) {
  11c0f4:	e51b3008 	ldr	r3, [fp, #-8]
  11c0f8:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11c0fc:	e1530002 	cmp	r3, r2
  11c100:	9a000001 	bls	11c10c <pbuf_strstr+0x70>
    return 0xFFFF;
  11c104:	e30f3fff 	movw	r3, #65535	; 0xffff
  11c108:	ea000006 	b	11c128 <pbuf_strstr+0x8c>
  }
  return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
  11c10c:	e51b3008 	ldr	r3, [fp, #-8]
  11c110:	e6ff2073 	uxth	r2, r3
  11c114:	e3a03000 	mov	r3, #0
  11c118:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c11c:	e51b0010 	ldr	r0, [fp, #-16]
  11c120:	ebffffab 	bl	11bfd4 <pbuf_memfind>
  11c124:	e1a03000 	mov	r3, r0
}
  11c128:	e1a00003 	mov	r0, r3
  11c12c:	e24bd004 	sub	sp, fp, #4
  11c130:	e8bd8800 	pop	{fp, pc}

0011c134 <raw_input_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_match(struct raw_pcb *pcb, u8_t broadcast)
{
  11c134:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c138:	e28db000 	add	fp, sp, #0
  11c13c:	e24dd00c 	sub	sp, sp, #12
  11c140:	e50b0008 	str	r0, [fp, #-8]
  11c144:	e1a03001 	mov	r3, r1
  11c148:	e54b3009 	strb	r3, [fp, #-9]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  11c14c:	e55b3009 	ldrb	r3, [fp, #-9]
  11c150:	e3530000 	cmp	r3, #0
  11c154:	0a00000d 	beq	11c190 <raw_input_match+0x5c>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  11c158:	e51b3008 	ldr	r3, [fp, #-8]
  11c15c:	e5d33008 	ldrb	r3, [r3, #8]
  11c160:	e2033020 	and	r3, r3, #32
  11c164:	e3530000 	cmp	r3, #0
  11c168:	0a000018 	beq	11c1d0 <raw_input_match+0x9c>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
  11c16c:	e51b3008 	ldr	r3, [fp, #-8]
  11c170:	e3530000 	cmp	r3, #0
  11c174:	0a000003 	beq	11c188 <raw_input_match+0x54>
  11c178:	e51b3008 	ldr	r3, [fp, #-8]
  11c17c:	e5933000 	ldr	r3, [r3]
  11c180:	e3530000 	cmp	r3, #0
  11c184:	1a000011 	bne	11c1d0 <raw_input_match+0x9c>
          return 1;
  11c188:	e3a03001 	mov	r3, #1
  11c18c:	ea000010 	b	11c1d4 <raw_input_match+0xa0>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: catch all or exact match */
    if (ip_addr_isany(&pcb->local_ip) ||
  11c190:	e51b3008 	ldr	r3, [fp, #-8]
  11c194:	e3530000 	cmp	r3, #0
  11c198:	0a00000a 	beq	11c1c8 <raw_input_match+0x94>
  11c19c:	e51b3008 	ldr	r3, [fp, #-8]
  11c1a0:	e5933000 	ldr	r3, [r3]
  11c1a4:	e3530000 	cmp	r3, #0
  11c1a8:	0a000006 	beq	11c1c8 <raw_input_match+0x94>
       ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  11c1ac:	e51b3008 	ldr	r3, [fp, #-8]
  11c1b0:	e5932000 	ldr	r2, [r3]
  11c1b4:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  11c1b8:	e3403014 	movt	r3, #20
  11c1bc:	e5933014 	ldr	r3, [r3, #20]
    if (ip_addr_isany(&pcb->local_ip) ||
  11c1c0:	e1520003 	cmp	r2, r3
  11c1c4:	1a000001 	bne	11c1d0 <raw_input_match+0x9c>
      return 1;
  11c1c8:	e3a03001 	mov	r3, #1
  11c1cc:	ea000000 	b	11c1d4 <raw_input_match+0xa0>
    }
  }

  return 0;
  11c1d0:	e3a03000 	mov	r3, #0
}
  11c1d4:	e1a00003 	mov	r0, r3
  11c1d8:	e28bd000 	add	sp, fp, #0
  11c1dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c1e0:	e12fff1e 	bx	lr

0011c1e4 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
  11c1e4:	e92d4810 	push	{r4, fp, lr}
  11c1e8:	e28db008 	add	fp, sp, #8
  11c1ec:	e24dd01c 	sub	sp, sp, #28
  11c1f0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11c1f4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  u8_t eaten = 0;
  11c1f8:	e3a03000 	mov	r3, #0
  11c1fc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  11c200:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  11c204:	e3403014 	movt	r3, #20
  11c208:	e5932014 	ldr	r2, [r3, #20]
  11c20c:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  11c210:	e3403014 	movt	r3, #20
  11c214:	e5933000 	ldr	r3, [r3]
  11c218:	e1a01003 	mov	r1, r3
  11c21c:	e1a00002 	mov	r0, r2
  11c220:	eb0058bb 	bl	132514 <ip4_addr_isbroadcast_u32>
  11c224:	e1a03000 	mov	r3, r0
  11c228:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  11c22c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c230:	e5933004 	ldr	r3, [r3, #4]
  11c234:	e5d33009 	ldrb	r3, [r3, #9]
  11c238:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  11c23c:	e3a03000 	mov	r3, #0
  11c240:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb = raw_pcbs;
  11c244:	e30e3228 	movw	r3, #57896	; 0xe228
  11c248:	e3403014 	movt	r3, #20
  11c24c:	e5933000 	ldr	r3, [r3]
  11c250:	e50b3010 	str	r3, [fp, #-16]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
  11c254:	ea000046 	b	11c374 <raw_input+0x190>
    if ((pcb->protocol == proto) && raw_input_match(pcb, broadcast)) {
  11c258:	e51b3010 	ldr	r3, [fp, #-16]
  11c25c:	e5d33010 	ldrb	r3, [r3, #16]
  11c260:	e1a02003 	mov	r2, r3
  11c264:	e15b31f8 	ldrsh	r3, [fp, #-24]	; 0xffffffe8
  11c268:	e1520003 	cmp	r2, r3
  11c26c:	1a00003b 	bne	11c360 <raw_input+0x17c>
  11c270:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
  11c274:	e1a01003 	mov	r1, r3
  11c278:	e51b0010 	ldr	r0, [fp, #-16]
  11c27c:	ebffffac 	bl	11c134 <raw_input_match>
  11c280:	e1a03000 	mov	r3, r0
  11c284:	e3530000 	cmp	r3, #0
  11c288:	0a000034 	beq	11c360 <raw_input+0x17c>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
  11c28c:	e51b3010 	ldr	r3, [fp, #-16]
  11c290:	e5933014 	ldr	r3, [r3, #20]
  11c294:	e3530000 	cmp	r3, #0
  11c298:	0a000030 	beq	11c360 <raw_input+0x17c>
#ifndef LWIP_NOASSERT
        void* old_payload = p->payload;
  11c29c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c2a0:	e5933004 	ldr	r3, [r3, #4]
  11c2a4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#endif
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
  11c2a8:	e51b3010 	ldr	r3, [fp, #-16]
  11c2ac:	e5934014 	ldr	r4, [r3, #20]
  11c2b0:	e51b3010 	ldr	r3, [fp, #-16]
  11c2b4:	e5930018 	ldr	r0, [r3, #24]
  11c2b8:	e59f30dc 	ldr	r3, [pc, #220]	; 11c39c <raw_input+0x1b8>
  11c2bc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11c2c0:	e51b1010 	ldr	r1, [fp, #-16]
  11c2c4:	e12fff34 	blx	r4
  11c2c8:	e1a03000 	mov	r3, r0
  11c2cc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
        if (eaten != 0) {
  11c2d0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11c2d4:	e3530000 	cmp	r3, #0
  11c2d8:	0a000014 	beq	11c330 <raw_input+0x14c>
          /* receive function ate the packet */
          p = NULL;
  11c2dc:	e3a03000 	mov	r3, #0
  11c2e0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          eaten = 1;
  11c2e4:	e3a03001 	mov	r3, #1
  11c2e8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
          if (prev != NULL) {
  11c2ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c2f0:	e3530000 	cmp	r3, #0
  11c2f4:	0a000019 	beq	11c360 <raw_input+0x17c>
          /* move the pcb to the front of raw_pcbs so that is
             found faster next time */
            prev->next = pcb->next;
  11c2f8:	e51b3010 	ldr	r3, [fp, #-16]
  11c2fc:	e593200c 	ldr	r2, [r3, #12]
  11c300:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c304:	e583200c 	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
  11c308:	e30e3228 	movw	r3, #57896	; 0xe228
  11c30c:	e3403014 	movt	r3, #20
  11c310:	e5932000 	ldr	r2, [r3]
  11c314:	e51b3010 	ldr	r3, [fp, #-16]
  11c318:	e583200c 	str	r2, [r3, #12]
            raw_pcbs = pcb;
  11c31c:	e30e3228 	movw	r3, #57896	; 0xe228
  11c320:	e3403014 	movt	r3, #20
  11c324:	e51b2010 	ldr	r2, [fp, #-16]
  11c328:	e5832000 	str	r2, [r3]
  11c32c:	ea00000b 	b	11c360 <raw_input+0x17c>
          }
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
  11c330:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c334:	e5933004 	ldr	r3, [r3, #4]
  11c338:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11c33c:	e1520003 	cmp	r2, r3
  11c340:	0a000006 	beq	11c360 <raw_input+0x17c>
  11c344:	e3070b04 	movw	r0, #31492	; 0x7b04
  11c348:	e3400014 	movt	r0, #20
  11c34c:	ebff9b70 	bl	103114 <rt_kprintf>
  11c350:	e3a010b6 	mov	r1, #182	; 0xb6
  11c354:	e3070b50 	movw	r0, #31568	; 0x7b50
  11c358:	e3400014 	movt	r0, #20
  11c35c:	ebffbb63 	bl	10b0f0 <sys_arch_assert>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
  11c360:	e51b3010 	ldr	r3, [fp, #-16]
  11c364:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    pcb = pcb->next;
  11c368:	e51b3010 	ldr	r3, [fp, #-16]
  11c36c:	e593300c 	ldr	r3, [r3, #12]
  11c370:	e50b3010 	str	r3, [fp, #-16]
  while ((eaten == 0) && (pcb != NULL)) {
  11c374:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11c378:	e3530000 	cmp	r3, #0
  11c37c:	1a000002 	bne	11c38c <raw_input+0x1a8>
  11c380:	e51b3010 	ldr	r3, [fp, #-16]
  11c384:	e3530000 	cmp	r3, #0
  11c388:	1affffb2 	bne	11c258 <raw_input+0x74>
  }
  return eaten;
  11c38c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
}
  11c390:	e1a00003 	mov	r0, r3
  11c394:	e24bd008 	sub	sp, fp, #8
  11c398:	e8bd8810 	pop	{r4, fp, pc}
  11c39c:	0014f608 	.word	0x0014f608

0011c3a0 <raw_bind>:
 *
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11c3a0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c3a4:	e28db000 	add	fp, sp, #0
  11c3a8:	e24dd00c 	sub	sp, sp, #12
  11c3ac:	e50b0008 	str	r0, [fp, #-8]
  11c3b0:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c3b4:	e51b3008 	ldr	r3, [fp, #-8]
  11c3b8:	e3530000 	cmp	r3, #0
  11c3bc:	0a000002 	beq	11c3cc <raw_bind+0x2c>
  11c3c0:	e51b300c 	ldr	r3, [fp, #-12]
  11c3c4:	e3530000 	cmp	r3, #0
  11c3c8:	1a000001 	bne	11c3d4 <raw_bind+0x34>
    return ERR_VAL;
  11c3cc:	e3e03005 	mvn	r3, #5
  11c3d0:	ea000009 	b	11c3fc <raw_bind+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  11c3d4:	e51b300c 	ldr	r3, [fp, #-12]
  11c3d8:	e3530000 	cmp	r3, #0
  11c3dc:	0a000002 	beq	11c3ec <raw_bind+0x4c>
  11c3e0:	e51b300c 	ldr	r3, [fp, #-12]
  11c3e4:	e5933000 	ldr	r3, [r3]
  11c3e8:	ea000000 	b	11c3f0 <raw_bind+0x50>
  11c3ec:	e3a03000 	mov	r3, #0
  11c3f0:	e51b2008 	ldr	r2, [fp, #-8]
  11c3f4:	e5823000 	str	r3, [r2]
  return ERR_OK;
  11c3f8:	e3a03000 	mov	r3, #0
}
  11c3fc:	e1a00003 	mov	r0, r3
  11c400:	e28bd000 	add	sp, fp, #0
  11c404:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c408:	e12fff1e 	bx	lr

0011c40c <raw_connect>:
 *
 * @see raw_disconnect() and raw_sendto()
 */
err_t
raw_connect(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11c40c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c410:	e28db000 	add	fp, sp, #0
  11c414:	e24dd00c 	sub	sp, sp, #12
  11c418:	e50b0008 	str	r0, [fp, #-8]
  11c41c:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c420:	e51b3008 	ldr	r3, [fp, #-8]
  11c424:	e3530000 	cmp	r3, #0
  11c428:	0a000002 	beq	11c438 <raw_connect+0x2c>
  11c42c:	e51b300c 	ldr	r3, [fp, #-12]
  11c430:	e3530000 	cmp	r3, #0
  11c434:	1a000001 	bne	11c440 <raw_connect+0x34>
    return ERR_VAL;
  11c438:	e3e03005 	mvn	r3, #5
  11c43c:	ea000009 	b	11c468 <raw_connect+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  11c440:	e51b300c 	ldr	r3, [fp, #-12]
  11c444:	e3530000 	cmp	r3, #0
  11c448:	0a000002 	beq	11c458 <raw_connect+0x4c>
  11c44c:	e51b300c 	ldr	r3, [fp, #-12]
  11c450:	e5933000 	ldr	r3, [r3]
  11c454:	ea000000 	b	11c45c <raw_connect+0x50>
  11c458:	e3a03000 	mov	r3, #0
  11c45c:	e51b2008 	ldr	r2, [fp, #-8]
  11c460:	e5823004 	str	r3, [r2, #4]
  return ERR_OK;
  11c464:	e3a03000 	mov	r3, #0
}
  11c468:	e1a00003 	mov	r0, r3
  11c46c:	e28bd000 	add	sp, fp, #0
  11c470:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c474:	e12fff1e 	bx	lr

0011c478 <raw_recv>:
 * - not free the packet, and return zero. The packet will be matched
 *   against further PCBs and/or forwarded to another protocol layers.
 */
void
raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)
{
  11c478:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c47c:	e28db000 	add	fp, sp, #0
  11c480:	e24dd014 	sub	sp, sp, #20
  11c484:	e50b0008 	str	r0, [fp, #-8]
  11c488:	e50b100c 	str	r1, [fp, #-12]
  11c48c:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  11c490:	e51b3008 	ldr	r3, [fp, #-8]
  11c494:	e51b200c 	ldr	r2, [fp, #-12]
  11c498:	e5832014 	str	r2, [r3, #20]
  pcb->recv_arg = recv_arg;
  11c49c:	e51b3008 	ldr	r3, [fp, #-8]
  11c4a0:	e51b2010 	ldr	r2, [fp, #-16]
  11c4a4:	e5832018 	str	r2, [r3, #24]
}
  11c4a8:	e320f000 	nop	{0}
  11c4ac:	e28bd000 	add	sp, fp, #0
  11c4b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c4b4:	e12fff1e 	bx	lr

0011c4b8 <raw_sendto>:
 * @param ipaddr the destination address of the IP packet
 *
 */
err_t
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, const ip_addr_t *ipaddr)
{
  11c4b8:	e92d4800 	push	{fp, lr}
  11c4bc:	e28db004 	add	fp, sp, #4
  11c4c0:	e24dd038 	sub	sp, sp, #56	; 0x38
  11c4c4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11c4c8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  11c4cc:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct netif *netif;
  const ip_addr_t *src_ip;
  struct pbuf *q; /* q will be sent down the stack */
  s16_t header_size;

  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
  11c4d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c4d4:	e3530000 	cmp	r3, #0
  11c4d8:	0a000002 	beq	11c4e8 <raw_sendto+0x30>
  11c4dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c4e0:	e3530000 	cmp	r3, #0
  11c4e4:	1a000001 	bne	11c4f0 <raw_sendto+0x38>
    return ERR_VAL;
  11c4e8:	e3e03005 	mvn	r3, #5
  11c4ec:	ea00007c 	b	11c6e4 <raw_sendto+0x22c>
  }

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_sendto\n"));

  header_size = (
  11c4f0:	e3a03014 	mov	r3, #20
  11c4f4:	e14b30be 	strh	r3, [fp, #-14]
#else
    IP6_HLEN);
#endif

  /* not enough space to add an IP header to first pbuf in given p chain? */
  if (pbuf_header(p, header_size)) {
  11c4f8:	e15b30fe 	ldrsh	r3, [fp, #-14]
  11c4fc:	e1a01003 	mov	r1, r3
  11c500:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11c504:	ebfffa4e 	bl	11ae44 <pbuf_header>
  11c508:	e1a03000 	mov	r3, r0
  11c50c:	e3530000 	cmp	r3, #0
  11c510:	0a000011 	beq	11c55c <raw_sendto+0xa4>
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
  11c514:	e3a02000 	mov	r2, #0
  11c518:	e3a01000 	mov	r1, #0
  11c51c:	e3a00001 	mov	r0, #1
  11c520:	ebfff75e 	bl	11a2a0 <pbuf_alloc>
  11c524:	e50b000c 	str	r0, [fp, #-12]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  11c528:	e51b300c 	ldr	r3, [fp, #-12]
  11c52c:	e3530000 	cmp	r3, #0
  11c530:	1a000001 	bne	11c53c <raw_sendto+0x84>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
  11c534:	e3e03000 	mvn	r3, #0
  11c538:	ea000069 	b	11c6e4 <raw_sendto+0x22c>
    }
    if (p->tot_len != 0) {
  11c53c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c540:	e1d330b8 	ldrh	r3, [r3, #8]
  11c544:	e3530000 	cmp	r3, #0
  11c548:	0a000018 	beq	11c5b0 <raw_sendto+0xf8>
      /* chain header q in front of given pbuf p */
      pbuf_chain(q, p);
  11c54c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  11c550:	e51b000c 	ldr	r0, [fp, #-12]
  11c554:	ebfffb59 	bl	11b2c0 <pbuf_chain>
  11c558:	ea000014 	b	11c5b0 <raw_sendto+0xf8>
    }
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* first pbuf q equals given pbuf */
    q = p;
  11c55c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c560:	e50b300c 	str	r3, [fp, #-12]
    if (pbuf_header(q, -header_size)) {
  11c564:	e15b30be 	ldrh	r3, [fp, #-14]
  11c568:	e2633000 	rsb	r3, r3, #0
  11c56c:	e6ff3073 	uxth	r3, r3
  11c570:	e6bf3073 	sxth	r3, r3
  11c574:	e1a01003 	mov	r1, r3
  11c578:	e51b000c 	ldr	r0, [fp, #-12]
  11c57c:	ebfffa30 	bl	11ae44 <pbuf_header>
  11c580:	e1a03000 	mov	r3, r0
  11c584:	e3530000 	cmp	r3, #0
  11c588:	0a000008 	beq	11c5b0 <raw_sendto+0xf8>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
  11c58c:	e3070b7c 	movw	r0, #31612	; 0x7b7c
  11c590:	e3400014 	movt	r0, #20
  11c594:	ebff9ade 	bl	103114 <rt_kprintf>
  11c598:	e300113e 	movw	r1, #318	; 0x13e
  11c59c:	e3070b50 	movw	r0, #31568	; 0x7b50
  11c5a0:	e3400014 	movt	r0, #20
  11c5a4:	ebffbad1 	bl	10b0f0 <sys_arch_assert>
      return ERR_MEM;
  11c5a8:	e3e03000 	mvn	r3, #0
  11c5ac:	ea00004c 	b	11c6e4 <raw_sendto+0x22c>

  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(ipaddr)), ipaddr);
  } else {
    netif = ip_route(&pcb->local_ip, ipaddr);
  11c5b0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11c5b4:	eb0052f7 	bl	131198 <ip4_route>
  11c5b8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  }

  if (netif == NULL) {
  11c5bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c5c0:	e3530000 	cmp	r3, #0
  11c5c4:	1a000007 	bne	11c5e8 <raw_sendto+0x130>
    LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: No route to "));
    ip_addr_debug_print(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ipaddr);
    /* free any temporary header pbuf allocated by pbuf_header() */
    if (q != p) {
  11c5c8:	e51b200c 	ldr	r2, [fp, #-12]
  11c5cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c5d0:	e1520003 	cmp	r2, r3
  11c5d4:	0a000001 	beq	11c5e0 <raw_sendto+0x128>
      pbuf_free(q);
  11c5d8:	e51b000c 	ldr	r0, [fp, #-12]
  11c5dc:	ebfffa36 	bl	11aebc <pbuf_free>
    }
    return ERR_RTE;
  11c5e0:	e3e03003 	mvn	r3, #3
  11c5e4:	ea00003e 	b	11c6e4 <raw_sendto+0x22c>

#if IP_SOF_BROADCAST
  if (IP_IS_V4(ipaddr))
  {
    /* broadcast filter? */
    if (!ip_get_option(pcb, SOF_BROADCAST) && ip_addr_isbroadcast(ipaddr, netif)) {
  11c5e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c5ec:	e5d33008 	ldrb	r3, [r3, #8]
  11c5f0:	e2033020 	and	r3, r3, #32
  11c5f4:	e3530000 	cmp	r3, #0
  11c5f8:	1a00000f 	bne	11c63c <raw_sendto+0x184>
  11c5fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c600:	e5933000 	ldr	r3, [r3]
  11c604:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c608:	e1a00003 	mov	r0, r3
  11c60c:	eb0057c0 	bl	132514 <ip4_addr_isbroadcast_u32>
  11c610:	e1a03000 	mov	r3, r0
  11c614:	e3530000 	cmp	r3, #0
  11c618:	0a000007 	beq	11c63c <raw_sendto+0x184>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
      /* free any temporary header pbuf allocated by pbuf_header() */
      if (q != p) {
  11c61c:	e51b200c 	ldr	r2, [fp, #-12]
  11c620:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c624:	e1520003 	cmp	r2, r3
  11c628:	0a000001 	beq	11c634 <raw_sendto+0x17c>
        pbuf_free(q);
  11c62c:	e51b000c 	ldr	r0, [fp, #-12]
  11c630:	ebfffa21 	bl	11aebc <pbuf_free>
      }
      return ERR_VAL;
  11c634:	e3e03005 	mvn	r3, #5
  11c638:	ea000029 	b	11c6e4 <raw_sendto+0x22c>
    }
  }
#endif /* IP_SOF_BROADCAST */

  if (ip_addr_isany(&pcb->local_ip)) {
  11c63c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c640:	e3530000 	cmp	r3, #0
  11c644:	0a000003 	beq	11c658 <raw_sendto+0x1a0>
  11c648:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c64c:	e5933000 	ldr	r3, [r3]
  11c650:	e3530000 	cmp	r3, #0
  11c654:	1a000008 	bne	11c67c <raw_sendto+0x1c4>
    /* use outgoing network interface IP address as source address */
    src_ip = ip_netif_get_local_ip(netif, ipaddr);
  11c658:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c65c:	e3530000 	cmp	r3, #0
  11c660:	0a000002 	beq	11c670 <raw_sendto+0x1b8>
  11c664:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c668:	e2833004 	add	r3, r3, #4
  11c66c:	ea000000 	b	11c674 <raw_sendto+0x1bc>
  11c670:	e3a03000 	mov	r3, #0
  11c674:	e50b3008 	str	r3, [fp, #-8]
  11c678:	ea000001 	b	11c684 <raw_sendto+0x1cc>
      return ERR_RTE;
    }
#endif /* LWIP_IPV6 */
  } else {
    /* use RAW PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  11c67c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c680:	e50b3008 	str	r3, [fp, #-8]
    SMEMCPY(((u8_t *)p->payload) + pcb->chksum_offset, &chksum, sizeof(u16_t));
  }
#endif

  NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
  err = ip_output_if(q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
  11c684:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c688:	e5d3000a 	ldrb	r0, [r3, #10]
  11c68c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c690:	e5d33009 	ldrb	r3, [r3, #9]
  11c694:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11c698:	e5d22010 	ldrb	r2, [r2, #16]
  11c69c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c6a0:	e58d1008 	str	r1, [sp, #8]
  11c6a4:	e58d2004 	str	r2, [sp, #4]
  11c6a8:	e58d3000 	str	r3, [sp]
  11c6ac:	e1a03000 	mov	r3, r0
  11c6b0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11c6b4:	e51b1008 	ldr	r1, [fp, #-8]
  11c6b8:	e51b000c 	ldr	r0, [fp, #-12]
  11c6bc:	eb00558e 	bl	131cfc <ip4_output_if>
  11c6c0:	e1a03000 	mov	r3, r0
  11c6c4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* did we chain a header earlier? */
  if (q != p) {
  11c6c8:	e51b200c 	ldr	r2, [fp, #-12]
  11c6cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c6d0:	e1520003 	cmp	r2, r3
  11c6d4:	0a000001 	beq	11c6e0 <raw_sendto+0x228>
    /* free the header */
    pbuf_free(q);
  11c6d8:	e51b000c 	ldr	r0, [fp, #-12]
  11c6dc:	ebfff9f6 	bl	11aebc <pbuf_free>
  }
  return err;
  11c6e0:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  11c6e4:	e1a00003 	mov	r0, r3
  11c6e8:	e24bd004 	sub	sp, fp, #4
  11c6ec:	e8bd8800 	pop	{fp, pc}

0011c6f0 <raw_send>:
 * @param p the IP payload to send
 *
 */
err_t
raw_send(struct raw_pcb *pcb, struct pbuf *p)
{
  11c6f0:	e92d4800 	push	{fp, lr}
  11c6f4:	e28db004 	add	fp, sp, #4
  11c6f8:	e24dd008 	sub	sp, sp, #8
  11c6fc:	e50b0008 	str	r0, [fp, #-8]
  11c700:	e50b100c 	str	r1, [fp, #-12]
  return raw_sendto(pcb, p, &pcb->remote_ip);
  11c704:	e51b3008 	ldr	r3, [fp, #-8]
  11c708:	e2833004 	add	r3, r3, #4
  11c70c:	e1a02003 	mov	r2, r3
  11c710:	e51b100c 	ldr	r1, [fp, #-12]
  11c714:	e51b0008 	ldr	r0, [fp, #-8]
  11c718:	ebffff66 	bl	11c4b8 <raw_sendto>
  11c71c:	e1a03000 	mov	r3, r0
}
  11c720:	e1a00003 	mov	r0, r3
  11c724:	e24bd004 	sub	sp, fp, #4
  11c728:	e8bd8800 	pop	{fp, pc}

0011c72c <raw_remove>:
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
  11c72c:	e92d4800 	push	{fp, lr}
  11c730:	e28db004 	add	fp, sp, #4
  11c734:	e24dd010 	sub	sp, sp, #16
  11c738:	e50b0010 	str	r0, [fp, #-16]
  struct raw_pcb *pcb2;
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
  11c73c:	e30e3228 	movw	r3, #57896	; 0xe228
  11c740:	e3403014 	movt	r3, #20
  11c744:	e5933000 	ldr	r3, [r3]
  11c748:	e51b2010 	ldr	r2, [fp, #-16]
  11c74c:	e1520003 	cmp	r2, r3
  11c750:	1a000007 	bne	11c774 <raw_remove+0x48>
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
  11c754:	e30e3228 	movw	r3, #57896	; 0xe228
  11c758:	e3403014 	movt	r3, #20
  11c75c:	e5933000 	ldr	r3, [r3]
  11c760:	e593200c 	ldr	r2, [r3, #12]
  11c764:	e30e3228 	movw	r3, #57896	; 0xe228
  11c768:	e3403014 	movt	r3, #20
  11c76c:	e5832000 	str	r2, [r3]
  11c770:	ea000018 	b	11c7d8 <raw_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c774:	e30e3228 	movw	r3, #57896	; 0xe228
  11c778:	e3403014 	movt	r3, #20
  11c77c:	e5933000 	ldr	r3, [r3]
  11c780:	e50b3008 	str	r3, [fp, #-8]
  11c784:	ea000010 	b	11c7cc <raw_remove+0xa0>
      /* find pcb in raw_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  11c788:	e51b3008 	ldr	r3, [fp, #-8]
  11c78c:	e593300c 	ldr	r3, [r3, #12]
  11c790:	e3530000 	cmp	r3, #0
  11c794:	0a000009 	beq	11c7c0 <raw_remove+0x94>
  11c798:	e51b3008 	ldr	r3, [fp, #-8]
  11c79c:	e593300c 	ldr	r3, [r3, #12]
  11c7a0:	e51b2010 	ldr	r2, [fp, #-16]
  11c7a4:	e1520003 	cmp	r2, r3
  11c7a8:	1a000004 	bne	11c7c0 <raw_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  11c7ac:	e51b3010 	ldr	r3, [fp, #-16]
  11c7b0:	e593200c 	ldr	r2, [r3, #12]
  11c7b4:	e51b3008 	ldr	r3, [fp, #-8]
  11c7b8:	e583200c 	str	r2, [r3, #12]
        break;
  11c7bc:	ea000005 	b	11c7d8 <raw_remove+0xac>
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c7c0:	e51b3008 	ldr	r3, [fp, #-8]
  11c7c4:	e593300c 	ldr	r3, [r3, #12]
  11c7c8:	e50b3008 	str	r3, [fp, #-8]
  11c7cc:	e51b3008 	ldr	r3, [fp, #-8]
  11c7d0:	e3530000 	cmp	r3, #0
  11c7d4:	1affffeb 	bne	11c788 <raw_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_RAW_PCB, pcb);
  11c7d8:	e51b1010 	ldr	r1, [fp, #-16]
  11c7dc:	e3a00000 	mov	r0, #0
  11c7e0:	ebfff2a7 	bl	119284 <memp_free>
}
  11c7e4:	e320f000 	nop	{0}
  11c7e8:	e24bd004 	sub	sp, fp, #4
  11c7ec:	e8bd8800 	pop	{fp, pc}

0011c7f0 <raw_new>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto)
{
  11c7f0:	e92d4800 	push	{fp, lr}
  11c7f4:	e28db004 	add	fp, sp, #4
  11c7f8:	e24dd010 	sub	sp, sp, #16
  11c7fc:	e1a03000 	mov	r3, r0
  11c800:	e54b300d 	strb	r3, [fp, #-13]
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_new\n"));

  pcb = (struct raw_pcb *)memp_malloc(MEMP_RAW_PCB);
  11c804:	e3a02f72 	mov	r2, #456	; 0x1c8
  11c808:	e3071b50 	movw	r1, #31568	; 0x7b50
  11c80c:	e3401014 	movt	r1, #20
  11c810:	e3a00000 	mov	r0, #0
  11c814:	ebfff232 	bl	1190e4 <memp_malloc_fn>
  11c818:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
  11c81c:	e51b3008 	ldr	r3, [fp, #-8]
  11c820:	e3530000 	cmp	r3, #0
  11c824:	0a000012 	beq	11c874 <raw_new+0x84>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
  11c828:	e3a0201c 	mov	r2, #28
  11c82c:	e3a01000 	mov	r1, #0
  11c830:	e51b0008 	ldr	r0, [fp, #-8]
  11c834:	eb009290 	bl	14127c <memset>
    pcb->protocol = proto;
  11c838:	e51b3008 	ldr	r3, [fp, #-8]
  11c83c:	e55b200d 	ldrb	r2, [fp, #-13]
  11c840:	e5c32010 	strb	r2, [r3, #16]
    pcb->ttl = RAW_TTL;
  11c844:	e51b3008 	ldr	r3, [fp, #-8]
  11c848:	e3e02000 	mvn	r2, #0
  11c84c:	e5c3200a 	strb	r2, [r3, #10]
    pcb->next = raw_pcbs;
  11c850:	e30e3228 	movw	r3, #57896	; 0xe228
  11c854:	e3403014 	movt	r3, #20
  11c858:	e5932000 	ldr	r2, [r3]
  11c85c:	e51b3008 	ldr	r3, [fp, #-8]
  11c860:	e583200c 	str	r2, [r3, #12]
    raw_pcbs = pcb;
  11c864:	e30e3228 	movw	r3, #57896	; 0xe228
  11c868:	e3403014 	movt	r3, #20
  11c86c:	e51b2008 	ldr	r2, [fp, #-8]
  11c870:	e5832000 	str	r2, [r3]
  }
  return pcb;
  11c874:	e51b3008 	ldr	r3, [fp, #-8]
}
  11c878:	e1a00003 	mov	r0, r3
  11c87c:	e24bd004 	sub	sp, fp, #4
  11c880:	e8bd8800 	pop	{fp, pc}

0011c884 <raw_new_ip_type>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new_ip_type(u8_t type, u8_t proto)
{
  11c884:	e92d4800 	push	{fp, lr}
  11c888:	e28db004 	add	fp, sp, #4
  11c88c:	e24dd010 	sub	sp, sp, #16
  11c890:	e1a03000 	mov	r3, r0
  11c894:	e1a02001 	mov	r2, r1
  11c898:	e54b300d 	strb	r3, [fp, #-13]
  11c89c:	e1a03002 	mov	r3, r2
  11c8a0:	e54b300e 	strb	r3, [fp, #-14]
  struct raw_pcb *pcb;
  pcb = raw_new(proto);
  11c8a4:	e55b300e 	ldrb	r3, [fp, #-14]
  11c8a8:	e1a00003 	mov	r0, r3
  11c8ac:	ebffffcf 	bl	11c7f0 <raw_new>
  11c8b0:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else /* LWIP_IPV4 && LWIP_IPV6 */
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11c8b4:	e51b3008 	ldr	r3, [fp, #-8]
}
  11c8b8:	e1a00003 	mov	r0, r3
  11c8bc:	e24bd004 	sub	sp, fp, #4
  11c8c0:	e8bd8800 	pop	{fp, pc}

0011c8c4 <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  11c8c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c8c8:	e28db000 	add	fp, sp, #0
  11c8cc:	e24dd014 	sub	sp, sp, #20
  11c8d0:	e50b0010 	str	r0, [fp, #-16]
  11c8d4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct raw_pcb* rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  11c8d8:	e51b3010 	ldr	r3, [fp, #-16]
  11c8dc:	e3530000 	cmp	r3, #0
  11c8e0:	0a00001f 	beq	11c964 <raw_netif_ip_addr_changed+0xa0>
  11c8e4:	e51b3010 	ldr	r3, [fp, #-16]
  11c8e8:	e5933000 	ldr	r3, [r3]
  11c8ec:	e3530000 	cmp	r3, #0
  11c8f0:	0a00001b 	beq	11c964 <raw_netif_ip_addr_changed+0xa0>
  11c8f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c8f8:	e3530000 	cmp	r3, #0
  11c8fc:	0a000018 	beq	11c964 <raw_netif_ip_addr_changed+0xa0>
  11c900:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c904:	e5933000 	ldr	r3, [r3]
  11c908:	e3530000 	cmp	r3, #0
  11c90c:	0a000014 	beq	11c964 <raw_netif_ip_addr_changed+0xa0>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11c910:	e30e3228 	movw	r3, #57896	; 0xe228
  11c914:	e3403014 	movt	r3, #20
  11c918:	e5933000 	ldr	r3, [r3]
  11c91c:	e50b3008 	str	r3, [fp, #-8]
  11c920:	ea00000c 	b	11c958 <raw_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
  11c924:	e51b3008 	ldr	r3, [fp, #-8]
  11c928:	e5932000 	ldr	r2, [r3]
  11c92c:	e51b3010 	ldr	r3, [fp, #-16]
  11c930:	e5933000 	ldr	r3, [r3]
  11c934:	e1520003 	cmp	r2, r3
  11c938:	1a000003 	bne	11c94c <raw_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
  11c93c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c940:	e5932000 	ldr	r2, [r3]
  11c944:	e51b3008 	ldr	r3, [fp, #-8]
  11c948:	e5832000 	str	r2, [r3]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11c94c:	e51b3008 	ldr	r3, [fp, #-8]
  11c950:	e593300c 	ldr	r3, [r3, #12]
  11c954:	e50b3008 	str	r3, [fp, #-8]
  11c958:	e51b3008 	ldr	r3, [fp, #-8]
  11c95c:	e3530000 	cmp	r3, #0
  11c960:	1affffef 	bne	11c924 <raw_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  11c964:	e320f000 	nop	{0}
  11c968:	e28bd000 	add	sp, fp, #0
  11c96c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c970:	e12fff1e 	bx	lr

0011c974 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
  11c974:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c978:	e28db000 	add	fp, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
  11c97c:	e320f000 	nop	{0}
  11c980:	e28bd000 	add	sp, fp, #0
  11c984:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c988:	e12fff1e 	bx	lr

0011c98c <stats_display_proto>:

#if LWIP_STATS_DISPLAY
void
stats_display_proto(struct stats_proto *proto, const char *name)
{
  11c98c:	e92d4800 	push	{fp, lr}
  11c990:	e28db004 	add	fp, sp, #4
  11c994:	e24dd008 	sub	sp, sp, #8
  11c998:	e50b0008 	str	r0, [fp, #-8]
  11c99c:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11c9a0:	e51b100c 	ldr	r1, [fp, #-12]
  11c9a4:	e3070ba4 	movw	r0, #31652	; 0x7ba4
  11c9a8:	e3400014 	movt	r0, #20
  11c9ac:	ebff99d8 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", proto->xmit));
  11c9b0:	e51b3008 	ldr	r3, [fp, #-8]
  11c9b4:	e1d330b0 	ldrh	r3, [r3]
  11c9b8:	e1a01003 	mov	r1, r3
  11c9bc:	e3070bac 	movw	r0, #31660	; 0x7bac
  11c9c0:	e3400014 	movt	r0, #20
  11c9c4:	ebff99d2 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", proto->recv));
  11c9c8:	e51b3008 	ldr	r3, [fp, #-8]
  11c9cc:	e1d330b2 	ldrh	r3, [r3, #2]
  11c9d0:	e1a01003 	mov	r1, r3
  11c9d4:	e3070bb8 	movw	r0, #31672	; 0x7bb8
  11c9d8:	e3400014 	movt	r0, #20
  11c9dc:	ebff99cc 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("fw: %"STAT_COUNTER_F"\n\t", proto->fw));
  11c9e0:	e51b3008 	ldr	r3, [fp, #-8]
  11c9e4:	e1d330b4 	ldrh	r3, [r3, #4]
  11c9e8:	e1a01003 	mov	r1, r3
  11c9ec:	e3070bc4 	movw	r0, #31684	; 0x7bc4
  11c9f0:	e3400014 	movt	r0, #20
  11c9f4:	ebff99c6 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", proto->drop));
  11c9f8:	e51b3008 	ldr	r3, [fp, #-8]
  11c9fc:	e1d330b6 	ldrh	r3, [r3, #6]
  11ca00:	e1a01003 	mov	r1, r3
  11ca04:	e3070bd0 	movw	r0, #31696	; 0x7bd0
  11ca08:	e3400014 	movt	r0, #20
  11ca0c:	ebff99c0 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", proto->chkerr));
  11ca10:	e51b3008 	ldr	r3, [fp, #-8]
  11ca14:	e1d330b8 	ldrh	r3, [r3, #8]
  11ca18:	e1a01003 	mov	r1, r3
  11ca1c:	e3070bdc 	movw	r0, #31708	; 0x7bdc
  11ca20:	e3400014 	movt	r0, #20
  11ca24:	ebff99ba 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", proto->lenerr));
  11ca28:	e51b3008 	ldr	r3, [fp, #-8]
  11ca2c:	e1d330ba 	ldrh	r3, [r3, #10]
  11ca30:	e1a01003 	mov	r1, r3
  11ca34:	e3070bec 	movw	r0, #31724	; 0x7bec
  11ca38:	e3400014 	movt	r0, #20
  11ca3c:	ebff99b4 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", proto->memerr));
  11ca40:	e51b3008 	ldr	r3, [fp, #-8]
  11ca44:	e1d330bc 	ldrh	r3, [r3, #12]
  11ca48:	e1a01003 	mov	r1, r3
  11ca4c:	e3070bfc 	movw	r0, #31740	; 0x7bfc
  11ca50:	e3400014 	movt	r0, #20
  11ca54:	ebff99ae 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rterr: %"STAT_COUNTER_F"\n\t", proto->rterr));
  11ca58:	e51b3008 	ldr	r3, [fp, #-8]
  11ca5c:	e1d330be 	ldrh	r3, [r3, #14]
  11ca60:	e1a01003 	mov	r1, r3
  11ca64:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  11ca68:	e3400014 	movt	r0, #20
  11ca6c:	ebff99a8 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", proto->proterr));
  11ca70:	e51b3008 	ldr	r3, [fp, #-8]
  11ca74:	e1d331b0 	ldrh	r3, [r3, #16]
  11ca78:	e1a01003 	mov	r1, r3
  11ca7c:	e3070c1c 	movw	r0, #31772	; 0x7c1c
  11ca80:	e3400014 	movt	r0, #20
  11ca84:	ebff99a2 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("opterr: %"STAT_COUNTER_F"\n\t", proto->opterr));
  11ca88:	e51b3008 	ldr	r3, [fp, #-8]
  11ca8c:	e1d331b2 	ldrh	r3, [r3, #18]
  11ca90:	e1a01003 	mov	r1, r3
  11ca94:	e3070c2c 	movw	r0, #31788	; 0x7c2c
  11ca98:	e3400014 	movt	r0, #20
  11ca9c:	ebff999c 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n\t", proto->err));
  11caa0:	e51b3008 	ldr	r3, [fp, #-8]
  11caa4:	e1d331b4 	ldrh	r3, [r3, #20]
  11caa8:	e1a01003 	mov	r1, r3
  11caac:	e3070c3c 	movw	r0, #31804	; 0x7c3c
  11cab0:	e3400014 	movt	r0, #20
  11cab4:	ebff9996 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("cachehit: %"STAT_COUNTER_F"\n", proto->cachehit));
  11cab8:	e51b3008 	ldr	r3, [fp, #-8]
  11cabc:	e1d331b6 	ldrh	r3, [r3, #22]
  11cac0:	e1a01003 	mov	r1, r3
  11cac4:	e3070c48 	movw	r0, #31816	; 0x7c48
  11cac8:	e3400014 	movt	r0, #20
  11cacc:	ebff9990 	bl	103114 <rt_kprintf>
}
  11cad0:	e320f000 	nop	{0}
  11cad4:	e24bd004 	sub	sp, fp, #4
  11cad8:	e8bd8800 	pop	{fp, pc}

0011cadc <stats_display_igmp>:

#if IGMP_STATS || MLD6_STATS
void
stats_display_igmp(struct stats_igmp *igmp, const char *name)
{
  11cadc:	e92d4800 	push	{fp, lr}
  11cae0:	e28db004 	add	fp, sp, #4
  11cae4:	e24dd008 	sub	sp, sp, #8
  11cae8:	e50b0008 	str	r0, [fp, #-8]
  11caec:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11caf0:	e51b100c 	ldr	r1, [fp, #-12]
  11caf4:	e3070ba4 	movw	r0, #31652	; 0x7ba4
  11caf8:	e3400014 	movt	r0, #20
  11cafc:	ebff9984 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", igmp->xmit));
  11cb00:	e51b3008 	ldr	r3, [fp, #-8]
  11cb04:	e1d330b0 	ldrh	r3, [r3]
  11cb08:	e1a01003 	mov	r1, r3
  11cb0c:	e3070bac 	movw	r0, #31660	; 0x7bac
  11cb10:	e3400014 	movt	r0, #20
  11cb14:	ebff997e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", igmp->recv));
  11cb18:	e51b3008 	ldr	r3, [fp, #-8]
  11cb1c:	e1d330b2 	ldrh	r3, [r3, #2]
  11cb20:	e1a01003 	mov	r1, r3
  11cb24:	e3070bb8 	movw	r0, #31672	; 0x7bb8
  11cb28:	e3400014 	movt	r0, #20
  11cb2c:	ebff9978 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", igmp->drop));
  11cb30:	e51b3008 	ldr	r3, [fp, #-8]
  11cb34:	e1d330b4 	ldrh	r3, [r3, #4]
  11cb38:	e1a01003 	mov	r1, r3
  11cb3c:	e3070bd0 	movw	r0, #31696	; 0x7bd0
  11cb40:	e3400014 	movt	r0, #20
  11cb44:	ebff9972 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", igmp->chkerr));
  11cb48:	e51b3008 	ldr	r3, [fp, #-8]
  11cb4c:	e1d330b6 	ldrh	r3, [r3, #6]
  11cb50:	e1a01003 	mov	r1, r3
  11cb54:	e3070bdc 	movw	r0, #31708	; 0x7bdc
  11cb58:	e3400014 	movt	r0, #20
  11cb5c:	ebff996c 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", igmp->lenerr));
  11cb60:	e51b3008 	ldr	r3, [fp, #-8]
  11cb64:	e1d330b8 	ldrh	r3, [r3, #8]
  11cb68:	e1a01003 	mov	r1, r3
  11cb6c:	e3070bec 	movw	r0, #31724	; 0x7bec
  11cb70:	e3400014 	movt	r0, #20
  11cb74:	ebff9966 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", igmp->memerr));
  11cb78:	e51b3008 	ldr	r3, [fp, #-8]
  11cb7c:	e1d330ba 	ldrh	r3, [r3, #10]
  11cb80:	e1a01003 	mov	r1, r3
  11cb84:	e3070bfc 	movw	r0, #31740	; 0x7bfc
  11cb88:	e3400014 	movt	r0, #20
  11cb8c:	ebff9960 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", igmp->proterr));
  11cb90:	e51b3008 	ldr	r3, [fp, #-8]
  11cb94:	e1d330bc 	ldrh	r3, [r3, #12]
  11cb98:	e1a01003 	mov	r1, r3
  11cb9c:	e3070c1c 	movw	r0, #31772	; 0x7c1c
  11cba0:	e3400014 	movt	r0, #20
  11cba4:	ebff995a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_v1: %"STAT_COUNTER_F"\n\t", igmp->rx_v1));
  11cba8:	e51b3008 	ldr	r3, [fp, #-8]
  11cbac:	e1d330be 	ldrh	r3, [r3, #14]
  11cbb0:	e1a01003 	mov	r1, r3
  11cbb4:	e3070c58 	movw	r0, #31832	; 0x7c58
  11cbb8:	e3400014 	movt	r0, #20
  11cbbc:	ebff9954 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_group: %"STAT_COUNTER_F"\n\t", igmp->rx_group));
  11cbc0:	e51b3008 	ldr	r3, [fp, #-8]
  11cbc4:	e1d331b0 	ldrh	r3, [r3, #16]
  11cbc8:	e1a01003 	mov	r1, r3
  11cbcc:	e3070c68 	movw	r0, #31848	; 0x7c68
  11cbd0:	e3400014 	movt	r0, #20
  11cbd4:	ebff994e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_general: %"STAT_COUNTER_F"\n\t", igmp->rx_general));
  11cbd8:	e51b3008 	ldr	r3, [fp, #-8]
  11cbdc:	e1d331b2 	ldrh	r3, [r3, #18]
  11cbe0:	e1a01003 	mov	r1, r3
  11cbe4:	e3070c78 	movw	r0, #31864	; 0x7c78
  11cbe8:	e3400014 	movt	r0, #20
  11cbec:	ebff9948 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_report: %"STAT_COUNTER_F"\n\t", igmp->rx_report));
  11cbf0:	e51b3008 	ldr	r3, [fp, #-8]
  11cbf4:	e1d331b4 	ldrh	r3, [r3, #20]
  11cbf8:	e1a01003 	mov	r1, r3
  11cbfc:	e3070c8c 	movw	r0, #31884	; 0x7c8c
  11cc00:	e3400014 	movt	r0, #20
  11cc04:	ebff9942 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_join: %"STAT_COUNTER_F"\n\t", igmp->tx_join));
  11cc08:	e51b3008 	ldr	r3, [fp, #-8]
  11cc0c:	e1d331b6 	ldrh	r3, [r3, #22]
  11cc10:	e1a01003 	mov	r1, r3
  11cc14:	e3070ca0 	movw	r0, #31904	; 0x7ca0
  11cc18:	e3400014 	movt	r0, #20
  11cc1c:	ebff993c 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_leave: %"STAT_COUNTER_F"\n\t", igmp->tx_leave));
  11cc20:	e51b3008 	ldr	r3, [fp, #-8]
  11cc24:	e1d331b8 	ldrh	r3, [r3, #24]
  11cc28:	e1a01003 	mov	r1, r3
  11cc2c:	e3070cb0 	movw	r0, #31920	; 0x7cb0
  11cc30:	e3400014 	movt	r0, #20
  11cc34:	ebff9936 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_report: %"STAT_COUNTER_F"\n", igmp->tx_report));
  11cc38:	e51b3008 	ldr	r3, [fp, #-8]
  11cc3c:	e1d331ba 	ldrh	r3, [r3, #26]
  11cc40:	e1a01003 	mov	r1, r3
  11cc44:	e3070cc0 	movw	r0, #31936	; 0x7cc0
  11cc48:	e3400014 	movt	r0, #20
  11cc4c:	ebff9930 	bl	103114 <rt_kprintf>
}
  11cc50:	e320f000 	nop	{0}
  11cc54:	e24bd004 	sub	sp, fp, #4
  11cc58:	e8bd8800 	pop	{fp, pc}

0011cc5c <stats_display_mem>:
#endif /* IGMP_STATS || MLD6_STATS */

#if MEM_STATS || MEMP_STATS
void
stats_display_mem(struct stats_mem *mem, const char *name)
{
  11cc5c:	e92d4800 	push	{fp, lr}
  11cc60:	e28db004 	add	fp, sp, #4
  11cc64:	e24dd008 	sub	sp, sp, #8
  11cc68:	e50b0008 	str	r0, [fp, #-8]
  11cc6c:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\nMEM %s\n\t", name));
  11cc70:	e51b100c 	ldr	r1, [fp, #-12]
  11cc74:	e3070cd0 	movw	r0, #31952	; 0x7cd0
  11cc78:	e3400014 	movt	r0, #20
  11cc7c:	ebff9924 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("avail: %"U32_F"\n\t", (u32_t)mem->avail));
  11cc80:	e51b3008 	ldr	r3, [fp, #-8]
  11cc84:	e1d330b6 	ldrh	r3, [r3, #6]
  11cc88:	e1a01003 	mov	r1, r3
  11cc8c:	e3070cdc 	movw	r0, #31964	; 0x7cdc
  11cc90:	e3400014 	movt	r0, #20
  11cc94:	ebff991e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("used: %"U32_F"\n\t", (u32_t)mem->used));
  11cc98:	e51b3008 	ldr	r3, [fp, #-8]
  11cc9c:	e1d330b8 	ldrh	r3, [r3, #8]
  11cca0:	e1a01003 	mov	r1, r3
  11cca4:	e3070cec 	movw	r0, #31980	; 0x7cec
  11cca8:	e3400014 	movt	r0, #20
  11ccac:	ebff9918 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("max: %"U32_F"\n\t", (u32_t)mem->max));
  11ccb0:	e51b3008 	ldr	r3, [fp, #-8]
  11ccb4:	e1d330ba 	ldrh	r3, [r3, #10]
  11ccb8:	e1a01003 	mov	r1, r3
  11ccbc:	e3070cf8 	movw	r0, #31992	; 0x7cf8
  11ccc0:	e3400014 	movt	r0, #20
  11ccc4:	ebff9912 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"U32_F"\n", (u32_t)mem->err));
  11ccc8:	e51b3008 	ldr	r3, [fp, #-8]
  11cccc:	e1d330b4 	ldrh	r3, [r3, #4]
  11ccd0:	e1a01003 	mov	r1, r3
  11ccd4:	e3070d04 	movw	r0, #32004	; 0x7d04
  11ccd8:	e3400014 	movt	r0, #20
  11ccdc:	ebff990c 	bl	103114 <rt_kprintf>
}
  11cce0:	e320f000 	nop	{0}
  11cce4:	e24bd004 	sub	sp, fp, #4
  11cce8:	e8bd8800 	pop	{fp, pc}

0011ccec <stats_display_memp>:

#if MEMP_STATS
void
stats_display_memp(struct stats_mem *mem, int index)
{
  11ccec:	e92d4800 	push	{fp, lr}
  11ccf0:	e28db004 	add	fp, sp, #4
  11ccf4:	e24dd008 	sub	sp, sp, #8
  11ccf8:	e50b0008 	str	r0, [fp, #-8]
  11ccfc:	e50b100c 	str	r1, [fp, #-12]
  if (index < MEMP_MAX) {
  11cd00:	e51b300c 	ldr	r3, [fp, #-12]
  11cd04:	e3530010 	cmp	r3, #16
  11cd08:	ca000004 	bgt	11cd20 <stats_display_memp+0x34>
    stats_display_mem(mem, mem->name);
  11cd0c:	e51b3008 	ldr	r3, [fp, #-8]
  11cd10:	e5933000 	ldr	r3, [r3]
  11cd14:	e1a01003 	mov	r1, r3
  11cd18:	e51b0008 	ldr	r0, [fp, #-8]
  11cd1c:	ebffffce 	bl	11cc5c <stats_display_mem>
  }
}
  11cd20:	e320f000 	nop	{0}
  11cd24:	e24bd004 	sub	sp, fp, #4
  11cd28:	e8bd8800 	pop	{fp, pc}

0011cd2c <stats_display_sys>:
#endif /* MEM_STATS || MEMP_STATS */

#if SYS_STATS
void
stats_display_sys(struct stats_sys *sys)
{
  11cd2c:	e92d4800 	push	{fp, lr}
  11cd30:	e28db004 	add	fp, sp, #4
  11cd34:	e24dd008 	sub	sp, sp, #8
  11cd38:	e50b0008 	str	r0, [fp, #-8]
  LWIP_PLATFORM_DIAG(("\nSYS\n\t"));
  11cd3c:	e3070d10 	movw	r0, #32016	; 0x7d10
  11cd40:	e3400014 	movt	r0, #20
  11cd44:	ebff98f2 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.used:  %"U32_F"\n\t", (u32_t)sys->sem.used));
  11cd48:	e51b3008 	ldr	r3, [fp, #-8]
  11cd4c:	e1d330b0 	ldrh	r3, [r3]
  11cd50:	e1a01003 	mov	r1, r3
  11cd54:	e3070d18 	movw	r0, #32024	; 0x7d18
  11cd58:	e3400014 	movt	r0, #20
  11cd5c:	ebff98ec 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.max:   %"U32_F"\n\t", (u32_t)sys->sem.max));
  11cd60:	e51b3008 	ldr	r3, [fp, #-8]
  11cd64:	e1d330b2 	ldrh	r3, [r3, #2]
  11cd68:	e1a01003 	mov	r1, r3
  11cd6c:	e3070d2c 	movw	r0, #32044	; 0x7d2c
  11cd70:	e3400014 	movt	r0, #20
  11cd74:	ebff98e6 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.err:   %"U32_F"\n\t", (u32_t)sys->sem.err));
  11cd78:	e51b3008 	ldr	r3, [fp, #-8]
  11cd7c:	e1d330b4 	ldrh	r3, [r3, #4]
  11cd80:	e1a01003 	mov	r1, r3
  11cd84:	e3070d40 	movw	r0, #32064	; 0x7d40
  11cd88:	e3400014 	movt	r0, #20
  11cd8c:	ebff98e0 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.used: %"U32_F"\n\t", (u32_t)sys->mutex.used));
  11cd90:	e51b3008 	ldr	r3, [fp, #-8]
  11cd94:	e1d330b6 	ldrh	r3, [r3, #6]
  11cd98:	e1a01003 	mov	r1, r3
  11cd9c:	e3070d54 	movw	r0, #32084	; 0x7d54
  11cda0:	e3400014 	movt	r0, #20
  11cda4:	ebff98da 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.max:  %"U32_F"\n\t", (u32_t)sys->mutex.max));
  11cda8:	e51b3008 	ldr	r3, [fp, #-8]
  11cdac:	e1d330b8 	ldrh	r3, [r3, #8]
  11cdb0:	e1a01003 	mov	r1, r3
  11cdb4:	e3070d68 	movw	r0, #32104	; 0x7d68
  11cdb8:	e3400014 	movt	r0, #20
  11cdbc:	ebff98d4 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.err:  %"U32_F"\n\t", (u32_t)sys->mutex.err));
  11cdc0:	e51b3008 	ldr	r3, [fp, #-8]
  11cdc4:	e1d330ba 	ldrh	r3, [r3, #10]
  11cdc8:	e1a01003 	mov	r1, r3
  11cdcc:	e3070d7c 	movw	r0, #32124	; 0x7d7c
  11cdd0:	e3400014 	movt	r0, #20
  11cdd4:	ebff98ce 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.used:  %"U32_F"\n\t", (u32_t)sys->mbox.used));
  11cdd8:	e51b3008 	ldr	r3, [fp, #-8]
  11cddc:	e1d330bc 	ldrh	r3, [r3, #12]
  11cde0:	e1a01003 	mov	r1, r3
  11cde4:	e3070d90 	movw	r0, #32144	; 0x7d90
  11cde8:	e3400014 	movt	r0, #20
  11cdec:	ebff98c8 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.max:   %"U32_F"\n\t", (u32_t)sys->mbox.max));
  11cdf0:	e51b3008 	ldr	r3, [fp, #-8]
  11cdf4:	e1d330be 	ldrh	r3, [r3, #14]
  11cdf8:	e1a01003 	mov	r1, r3
  11cdfc:	e3070da4 	movw	r0, #32164	; 0x7da4
  11ce00:	e3400014 	movt	r0, #20
  11ce04:	ebff98c2 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.err:   %"U32_F"\n", (u32_t)sys->mbox.err));
  11ce08:	e51b3008 	ldr	r3, [fp, #-8]
  11ce0c:	e1d331b0 	ldrh	r3, [r3, #16]
  11ce10:	e1a01003 	mov	r1, r3
  11ce14:	e3070db8 	movw	r0, #32184	; 0x7db8
  11ce18:	e3400014 	movt	r0, #20
  11ce1c:	ebff98bc 	bl	103114 <rt_kprintf>
}
  11ce20:	e320f000 	nop	{0}
  11ce24:	e24bd004 	sub	sp, fp, #4
  11ce28:	e8bd8800 	pop	{fp, pc}

0011ce2c <stats_display>:
#endif /* SYS_STATS */

void
stats_display(void)
{
  11ce2c:	e92d4800 	push	{fp, lr}
  11ce30:	e28db004 	add	fp, sp, #4
  11ce34:	e24dd008 	sub	sp, sp, #8
  s16_t i;

  LINK_STATS_DISPLAY();
  11ce38:	e3071dcc 	movw	r1, #32204	; 0x7dcc
  11ce3c:	e3401014 	movt	r1, #20
  11ce40:	e30e0a14 	movw	r0, #59924	; 0xea14
  11ce44:	e3400056 	movt	r0, #86	; 0x56
  11ce48:	ebfffecf 	bl	11c98c <stats_display_proto>
  ETHARP_STATS_DISPLAY();
  11ce4c:	e3071dd4 	movw	r1, #32212	; 0x7dd4
  11ce50:	e3401014 	movt	r1, #20
  11ce54:	e59f00dc 	ldr	r0, [pc, #220]	; 11cf38 <stats_display+0x10c>
  11ce58:	ebfffecb 	bl	11c98c <stats_display_proto>
  IPFRAG_STATS_DISPLAY();
  11ce5c:	e3071ddc 	movw	r1, #32220	; 0x7ddc
  11ce60:	e3401014 	movt	r1, #20
  11ce64:	e59f00d0 	ldr	r0, [pc, #208]	; 11cf3c <stats_display+0x110>
  11ce68:	ebfffec7 	bl	11c98c <stats_display_proto>
  IP6_FRAG_STATS_DISPLAY();
  IP_STATS_DISPLAY();
  11ce6c:	e3071de4 	movw	r1, #32228	; 0x7de4
  11ce70:	e3401014 	movt	r1, #20
  11ce74:	e59f00c4 	ldr	r0, [pc, #196]	; 11cf40 <stats_display+0x114>
  11ce78:	ebfffec3 	bl	11c98c <stats_display_proto>
  ND6_STATS_DISPLAY();
  IP6_STATS_DISPLAY();
  IGMP_STATS_DISPLAY();
  11ce7c:	e3071de8 	movw	r1, #32232	; 0x7de8
  11ce80:	e3401014 	movt	r1, #20
  11ce84:	e59f00b8 	ldr	r0, [pc, #184]	; 11cf44 <stats_display+0x118>
  11ce88:	ebffff13 	bl	11cadc <stats_display_igmp>
  MLD6_STATS_DISPLAY();
  ICMP_STATS_DISPLAY();
  11ce8c:	e3071df0 	movw	r1, #32240	; 0x7df0
  11ce90:	e3401014 	movt	r1, #20
  11ce94:	e59f00ac 	ldr	r0, [pc, #172]	; 11cf48 <stats_display+0x11c>
  11ce98:	ebfffebb 	bl	11c98c <stats_display_proto>
  ICMP6_STATS_DISPLAY();
  UDP_STATS_DISPLAY();
  11ce9c:	e3071df8 	movw	r1, #32248	; 0x7df8
  11cea0:	e3401014 	movt	r1, #20
  11cea4:	e59f00a0 	ldr	r0, [pc, #160]	; 11cf4c <stats_display+0x120>
  11cea8:	ebfffeb7 	bl	11c98c <stats_display_proto>
  TCP_STATS_DISPLAY();
  11ceac:	e3071dfc 	movw	r1, #32252	; 0x7dfc
  11ceb0:	e3401014 	movt	r1, #20
  11ceb4:	e59f0094 	ldr	r0, [pc, #148]	; 11cf50 <stats_display+0x124>
  11ceb8:	ebfffeb3 	bl	11c98c <stats_display_proto>
  MEM_STATS_DISPLAY();
  11cebc:	e3071e00 	movw	r1, #32256	; 0x7e00
  11cec0:	e3401014 	movt	r1, #20
  11cec4:	e59f0088 	ldr	r0, [pc, #136]	; 11cf54 <stats_display+0x128>
  11cec8:	ebffff63 	bl	11cc5c <stats_display_mem>
  for (i = 0; i < MEMP_MAX; i++) {
  11cecc:	e3a03000 	mov	r3, #0
  11ced0:	e14b30b6 	strh	r3, [fp, #-6]
  11ced4:	ea00000f 	b	11cf18 <stats_display+0xec>
    MEMP_STATS_DISPLAY(i);
  11ced8:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cedc:	e30e2a14 	movw	r2, #59924	; 0xea14
  11cee0:	e3402056 	movt	r2, #86	; 0x56
  11cee4:	e2833034 	add	r3, r3, #52	; 0x34
  11cee8:	e1a03103 	lsl	r3, r3, #2
  11ceec:	e0823003 	add	r3, r2, r3
  11cef0:	e5933004 	ldr	r3, [r3, #4]
  11cef4:	e15b20f6 	ldrsh	r2, [fp, #-6]
  11cef8:	e1a01002 	mov	r1, r2
  11cefc:	e1a00003 	mov	r0, r3
  11cf00:	ebffff79 	bl	11ccec <stats_display_memp>
  for (i = 0; i < MEMP_MAX; i++) {
  11cf04:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cf08:	e6ff3073 	uxth	r3, r3
  11cf0c:	e2833001 	add	r3, r3, #1
  11cf10:	e6ff3073 	uxth	r3, r3
  11cf14:	e14b30b6 	strh	r3, [fp, #-6]
  11cf18:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cf1c:	e3530010 	cmp	r3, #16
  11cf20:	daffffec 	ble	11ced8 <stats_display+0xac>
  }
  SYS_STATS_DISPLAY();
  11cf24:	e59f002c 	ldr	r0, [pc, #44]	; 11cf58 <stats_display+0x12c>
  11cf28:	ebffff7f 	bl	11cd2c <stats_display_sys>
}
  11cf2c:	e320f000 	nop	{0}
  11cf30:	e24bd004 	sub	sp, fp, #4
  11cf34:	e8bd8800 	pop	{fp, pc}
  11cf38:	0056ea2c 	.word	0x0056ea2c
  11cf3c:	0056ea44 	.word	0x0056ea44
  11cf40:	0056ea5c 	.word	0x0056ea5c
  11cf44:	0056ea8c 	.word	0x0056ea8c
  11cf48:	0056ea74 	.word	0x0056ea74
  11cf4c:	0056eaa8 	.word	0x0056eaa8
  11cf50:	0056eac0 	.word	0x0056eac0
  11cf54:	0056ead8 	.word	0x0056ead8
  11cf58:	0056eb2c 	.word	0x0056eb2c

0011cf5c <sys_msleep>:
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
  11cf5c:	e92d4800 	push	{fp, lr}
  11cf60:	e28db004 	add	fp, sp, #4
  11cf64:	e24dd010 	sub	sp, sp, #16
  11cf68:	e50b0010 	str	r0, [fp, #-16]
  if (ms > 0) {
  11cf6c:	e51b3010 	ldr	r3, [fp, #-16]
  11cf70:	e3530000 	cmp	r3, #0
  11cf74:	0a00000f 	beq	11cfb8 <sys_msleep+0x5c>
    sys_sem_t delaysem;
    err_t err = sys_sem_new(&delaysem, 0);
  11cf78:	e24b300c 	sub	r3, fp, #12
  11cf7c:	e3a01000 	mov	r1, #0
  11cf80:	e1a00003 	mov	r0, r3
  11cf84:	ebffb62c 	bl	10a83c <sys_sem_new>
  11cf88:	e1a03000 	mov	r3, r0
  11cf8c:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11cf90:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11cf94:	e3530000 	cmp	r3, #0
  11cf98:	1a000006 	bne	11cfb8 <sys_msleep+0x5c>
      sys_arch_sem_wait(&delaysem, ms);
  11cf9c:	e24b300c 	sub	r3, fp, #12
  11cfa0:	e51b1010 	ldr	r1, [fp, #-16]
  11cfa4:	e1a00003 	mov	r0, r3
  11cfa8:	ebffb664 	bl	10a940 <sys_arch_sem_wait>
      sys_sem_free(&delaysem);
  11cfac:	e24b300c 	sub	r3, fp, #12
  11cfb0:	e1a00003 	mov	r0, r3
  11cfb4:	ebffb64b 	bl	10a8e8 <sys_sem_free>
    }
  }
}
  11cfb8:	e320f000 	nop	{0}
  11cfbc:	e24bd004 	sub	sp, fp, #4
  11cfc0:	e8bd8800 	pop	{fp, pc}

0011cfc4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
  11cfc4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11cfc8:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  11cfcc:	e320f000 	nop	{0}
  11cfd0:	e28bd000 	add	sp, fp, #0
  11cfd4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11cfd8:	e12fff1e 	bx	lr

0011cfdc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
  11cfdc:	e92d4800 	push	{fp, lr}
  11cfe0:	e28db004 	add	fp, sp, #4
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
  11cfe4:	eb000847 	bl	11f108 <tcp_fasttmr>

  if (++tcp_timer & 1) {
  11cfe8:	e30e322c 	movw	r3, #57900	; 0xe22c
  11cfec:	e3403014 	movt	r3, #20
  11cff0:	e5d33000 	ldrb	r3, [r3]
  11cff4:	e2833001 	add	r3, r3, #1
  11cff8:	e6ef2073 	uxtb	r2, r3
  11cffc:	e30e322c 	movw	r3, #57900	; 0xe22c
  11d000:	e3403014 	movt	r3, #20
  11d004:	e5c32000 	strb	r2, [r3]
  11d008:	e30e322c 	movw	r3, #57900	; 0xe22c
  11d00c:	e3403014 	movt	r3, #20
  11d010:	e5d33000 	ldrb	r3, [r3]
  11d014:	e2033001 	and	r3, r3, #1
  11d018:	e3530000 	cmp	r3, #0
  11d01c:	0a000000 	beq	11d024 <tcp_tmr+0x48>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  11d020:	eb0005c8 	bl	11e748 <tcp_slowtmr>
  }
}
  11d024:	e320f000 	nop	{0}
  11d028:	e8bd8800 	pop	{fp, pc}

0011d02c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
  11d02c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11d030:	e28db000 	add	fp, sp, #0
  11d034:	e24dd014 	sub	sp, sp, #20
  11d038:	e50b0010 	str	r0, [fp, #-16]
  11d03c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11d040:	e51b3010 	ldr	r3, [fp, #-16]
  11d044:	e50b3008 	str	r3, [fp, #-8]
  11d048:	ea00000a 	b	11d078 <tcp_remove_listener+0x4c>
      if (pcb->listener == lpcb) {
  11d04c:	e51b3008 	ldr	r3, [fp, #-8]
  11d050:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  11d054:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11d058:	e1520003 	cmp	r2, r3
  11d05c:	1a000002 	bne	11d06c <tcp_remove_listener+0x40>
         pcb->listener = NULL;
  11d060:	e51b3008 	ldr	r3, [fp, #-8]
  11d064:	e3a02000 	mov	r2, #0
  11d068:	e583207c 	str	r2, [r3, #124]	; 0x7c
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11d06c:	e51b3008 	ldr	r3, [fp, #-8]
  11d070:	e593300c 	ldr	r3, [r3, #12]
  11d074:	e50b3008 	str	r3, [fp, #-8]
  11d078:	e51b3008 	ldr	r3, [fp, #-8]
  11d07c:	e3530000 	cmp	r3, #0
  11d080:	1afffff1 	bne	11d04c <tcp_remove_listener+0x20>
      }
   }
}
  11d084:	e320f000 	nop	{0}
  11d088:	e28bd000 	add	sp, fp, #0
  11d08c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11d090:	e12fff1e 	bx	lr

0011d094 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
  11d094:	e92d4800 	push	{fp, lr}
  11d098:	e28db004 	add	fp, sp, #4
  11d09c:	e24dd010 	sub	sp, sp, #16
  11d0a0:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11d0a4:	e51b3010 	ldr	r3, [fp, #-16]
  11d0a8:	e3530000 	cmp	r3, #0
  11d0ac:	1a000006 	bne	11d0cc <tcp_listen_closed+0x38>
  11d0b0:	e3070ed4 	movw	r0, #32468	; 0x7ed4
  11d0b4:	e3400014 	movt	r0, #20
  11d0b8:	ebff9815 	bl	103114 <rt_kprintf>
  11d0bc:	e3a010c0 	mov	r1, #192	; 0xc0
  11d0c0:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11d0c4:	e3400014 	movt	r0, #20
  11d0c8:	ebffb808 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
  11d0cc:	e51b3010 	ldr	r3, [fp, #-16]
  11d0d0:	e5933014 	ldr	r3, [r3, #20]
  11d0d4:	e3530001 	cmp	r3, #1
  11d0d8:	0a000006 	beq	11d0f8 <tcp_listen_closed+0x64>
  11d0dc:	e3070f0c 	movw	r0, #32524	; 0x7f0c
  11d0e0:	e3400014 	movt	r0, #20
  11d0e4:	ebff980a 	bl	103114 <rt_kprintf>
  11d0e8:	e3a010c1 	mov	r1, #193	; 0xc1
  11d0ec:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11d0f0:	e3400014 	movt	r0, #20
  11d0f4:	ebffb7fd 	bl	10b0f0 <sys_arch_assert>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11d0f8:	e3a03001 	mov	r3, #1
  11d0fc:	e50b3008 	str	r3, [fp, #-8]
  11d100:	ea00000a 	b	11d130 <tcp_listen_closed+0x9c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
  11d104:	e3073ec4 	movw	r3, #32452	; 0x7ec4
  11d108:	e3403014 	movt	r3, #20
  11d10c:	e51b2008 	ldr	r2, [fp, #-8]
  11d110:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11d114:	e5933000 	ldr	r3, [r3]
  11d118:	e51b1010 	ldr	r1, [fp, #-16]
  11d11c:	e1a00003 	mov	r0, r3
  11d120:	ebffffc1 	bl	11d02c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11d124:	e51b3008 	ldr	r3, [fp, #-8]
  11d128:	e2833001 	add	r3, r3, #1
  11d12c:	e50b3008 	str	r3, [fp, #-8]
  11d130:	e51b3008 	ldr	r3, [fp, #-8]
  11d134:	e3530003 	cmp	r3, #3
  11d138:	9afffff1 	bls	11d104 <tcp_listen_closed+0x70>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
  11d13c:	e320f000 	nop	{0}
  11d140:	e24bd004 	sub	sp, fp, #4
  11d144:	e8bd8800 	pop	{fp, pc}

0011d148 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
  11d148:	e92d4800 	push	{fp, lr}
  11d14c:	e28db004 	add	fp, sp, #4
  11d150:	e24dd018 	sub	sp, sp, #24
  11d154:	e50b0010 	str	r0, [fp, #-16]
  11d158:	e1a03001 	mov	r3, r1
  11d15c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  11d160:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  11d164:	e3530000 	cmp	r3, #0
  11d168:	0a000077 	beq	11d34c <tcp_close_shutdown+0x204>
  11d16c:	e51b3010 	ldr	r3, [fp, #-16]
  11d170:	e5933014 	ldr	r3, [r3, #20]
  11d174:	e3530004 	cmp	r3, #4
  11d178:	0a000003 	beq	11d18c <tcp_close_shutdown+0x44>
  11d17c:	e51b3010 	ldr	r3, [fp, #-16]
  11d180:	e5933014 	ldr	r3, [r3, #20]
  11d184:	e3530007 	cmp	r3, #7
  11d188:	1a00006f 	bne	11d34c <tcp_close_shutdown+0x204>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
  11d18c:	e51b3010 	ldr	r3, [fp, #-16]
  11d190:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d194:	e3530000 	cmp	r3, #0
  11d198:	1a000004 	bne	11d1b0 <tcp_close_shutdown+0x68>
  11d19c:	e51b3010 	ldr	r3, [fp, #-16]
  11d1a0:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11d1a4:	e30f2fff 	movw	r2, #65535	; 0xffff
  11d1a8:	e1530002 	cmp	r3, r2
  11d1ac:	0a000066 	beq	11d34c <tcp_close_shutdown+0x204>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
  11d1b0:	e51b3010 	ldr	r3, [fp, #-16]
  11d1b4:	e5d3301e 	ldrb	r3, [r3, #30]
  11d1b8:	e2033010 	and	r3, r3, #16
  11d1bc:	e3530000 	cmp	r3, #0
  11d1c0:	1a000006 	bne	11d1e0 <tcp_close_shutdown+0x98>
  11d1c4:	e3070f24 	movw	r0, #32548	; 0x7f24
  11d1c8:	e3400014 	movt	r0, #20
  11d1cc:	ebff97d0 	bl	103114 <rt_kprintf>
  11d1d0:	e300110f 	movw	r1, #271	; 0x10f
  11d1d4:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11d1d8:	e3400014 	movt	r0, #20
  11d1dc:	ebffb7c3 	bl	10b0f0 <sys_arch_assert>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11d1e0:	e51b3010 	ldr	r3, [fp, #-16]
  11d1e4:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11d1e8:	e51b3010 	ldr	r3, [fp, #-16]
  11d1ec:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11d1f0:	e51bc010 	ldr	ip, [fp, #-16]
  11d1f4:	e51b3010 	ldr	r3, [fp, #-16]
  11d1f8:	e283e004 	add	lr, r3, #4
  11d1fc:	e51b3010 	ldr	r3, [fp, #-16]
  11d200:	e1d331ba 	ldrh	r3, [r3, #26]
  11d204:	e51b2010 	ldr	r2, [fp, #-16]
  11d208:	e1d221bc 	ldrh	r2, [r2, #28]
  11d20c:	e58d2004 	str	r2, [sp, #4]
  11d210:	e58d3000 	str	r3, [sp]
  11d214:	e1a0300e 	mov	r3, lr
  11d218:	e1a0200c 	mov	r2, ip
  11d21c:	eb0025b6 	bl	1268fc <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
  11d220:	e51b0010 	ldr	r0, [fp, #-16]
  11d224:	eb000adb 	bl	11fd98 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  11d228:	e30e3c04 	movw	r3, #60420	; 0xec04
  11d22c:	e3403056 	movt	r3, #86	; 0x56
  11d230:	e5933000 	ldr	r3, [r3]
  11d234:	e51b2010 	ldr	r2, [fp, #-16]
  11d238:	e1520003 	cmp	r2, r3
  11d23c:	1a000007 	bne	11d260 <tcp_close_shutdown+0x118>
  11d240:	e30e3c04 	movw	r3, #60420	; 0xec04
  11d244:	e3403056 	movt	r3, #86	; 0x56
  11d248:	e5933000 	ldr	r3, [r3]
  11d24c:	e593200c 	ldr	r2, [r3, #12]
  11d250:	e30e3c04 	movw	r3, #60420	; 0xec04
  11d254:	e3403056 	movt	r3, #86	; 0x56
  11d258:	e5832000 	str	r2, [r3]
  11d25c:	ea000014 	b	11d2b4 <tcp_close_shutdown+0x16c>
  11d260:	e30e3c04 	movw	r3, #60420	; 0xec04
  11d264:	e3403056 	movt	r3, #86	; 0x56
  11d268:	e5933000 	ldr	r3, [r3]
  11d26c:	e50b3008 	str	r3, [fp, #-8]
  11d270:	ea00000c 	b	11d2a8 <tcp_close_shutdown+0x160>
  11d274:	e51b3008 	ldr	r3, [fp, #-8]
  11d278:	e593300c 	ldr	r3, [r3, #12]
  11d27c:	e51b2010 	ldr	r2, [fp, #-16]
  11d280:	e1520003 	cmp	r2, r3
  11d284:	1a000004 	bne	11d29c <tcp_close_shutdown+0x154>
  11d288:	e51b3010 	ldr	r3, [fp, #-16]
  11d28c:	e593200c 	ldr	r2, [r3, #12]
  11d290:	e51b3008 	ldr	r3, [fp, #-8]
  11d294:	e583200c 	str	r2, [r3, #12]
  11d298:	ea000005 	b	11d2b4 <tcp_close_shutdown+0x16c>
  11d29c:	e51b3008 	ldr	r3, [fp, #-8]
  11d2a0:	e593300c 	ldr	r3, [r3, #12]
  11d2a4:	e50b3008 	str	r3, [fp, #-8]
  11d2a8:	e51b3008 	ldr	r3, [fp, #-8]
  11d2ac:	e3530000 	cmp	r3, #0
  11d2b0:	1affffef 	bne	11d274 <tcp_close_shutdown+0x12c>
  11d2b4:	e51b3010 	ldr	r3, [fp, #-16]
  11d2b8:	e3a02000 	mov	r2, #0
  11d2bc:	e583200c 	str	r2, [r3, #12]
  11d2c0:	e30e3c00 	movw	r3, #60416	; 0xec00
  11d2c4:	e3403056 	movt	r3, #86	; 0x56
  11d2c8:	e3a02001 	mov	r2, #1
  11d2cc:	e5c32000 	strb	r2, [r3]
      if (pcb->state == ESTABLISHED) {
  11d2d0:	e51b3010 	ldr	r3, [fp, #-16]
  11d2d4:	e5933014 	ldr	r3, [r3, #20]
  11d2d8:	e3530004 	cmp	r3, #4
  11d2dc:	1a00000d 	bne	11d318 <tcp_close_shutdown+0x1d0>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
  11d2e0:	e51b3010 	ldr	r3, [fp, #-16]
  11d2e4:	e3a0200a 	mov	r2, #10
  11d2e8:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  11d2ec:	e30e3c14 	movw	r3, #60436	; 0xec14
  11d2f0:	e3403056 	movt	r3, #86	; 0x56
  11d2f4:	e5932000 	ldr	r2, [r3]
  11d2f8:	e51b3010 	ldr	r3, [fp, #-16]
  11d2fc:	e583200c 	str	r2, [r3, #12]
  11d300:	e30e3c14 	movw	r3, #60436	; 0xec14
  11d304:	e3403056 	movt	r3, #86	; 0x56
  11d308:	e51b2010 	ldr	r2, [fp, #-16]
  11d30c:	e5832000 	str	r2, [r3]
  11d310:	eb0027cc 	bl	127248 <tcp_timer_needed>
  11d314:	ea00000a 	b	11d344 <tcp_close_shutdown+0x1fc>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
  11d318:	e30e3c18 	movw	r3, #60440	; 0xec18
  11d31c:	e3403056 	movt	r3, #86	; 0x56
  11d320:	e5933000 	ldr	r3, [r3]
  11d324:	e51b2010 	ldr	r2, [fp, #-16]
  11d328:	e1520003 	cmp	r2, r3
  11d32c:	1a000001 	bne	11d338 <tcp_close_shutdown+0x1f0>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
  11d330:	eb001ce4 	bl	1246c8 <tcp_trigger_input_pcb_close>
  11d334:	ea000002 	b	11d344 <tcp_close_shutdown+0x1fc>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
  11d338:	e51b1010 	ldr	r1, [fp, #-16]
  11d33c:	e3a00002 	mov	r0, #2
  11d340:	ebffefcf 	bl	119284 <memp_free>
        }
      }
      return ERR_OK;
  11d344:	e3a03000 	mov	r3, #0
  11d348:	ea000058 	b	11d4b0 <tcp_close_shutdown+0x368>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
  11d34c:	e51b3010 	ldr	r3, [fp, #-16]
  11d350:	e5933014 	ldr	r3, [r3, #20]
  11d354:	e3530001 	cmp	r3, #1
  11d358:	0a000032 	beq	11d428 <tcp_close_shutdown+0x2e0>
  11d35c:	e3530001 	cmp	r3, #1
  11d360:	3a000002 	bcc	11d370 <tcp_close_shutdown+0x228>
  11d364:	e3530002 	cmp	r3, #2
  11d368:	0a000038 	beq	11d450 <tcp_close_shutdown+0x308>
  11d36c:	ea00004a 	b	11d49c <tcp_close_shutdown+0x354>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
  11d370:	e51b3010 	ldr	r3, [fp, #-16]
  11d374:	e1d331ba 	ldrh	r3, [r3, #26]
  11d378:	e3530000 	cmp	r3, #0
  11d37c:	0a000025 	beq	11d418 <tcp_close_shutdown+0x2d0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11d380:	e30e3c10 	movw	r3, #60432	; 0xec10
  11d384:	e3403056 	movt	r3, #86	; 0x56
  11d388:	e5933000 	ldr	r3, [r3]
  11d38c:	e51b2010 	ldr	r2, [fp, #-16]
  11d390:	e1520003 	cmp	r2, r3
  11d394:	1a000007 	bne	11d3b8 <tcp_close_shutdown+0x270>
  11d398:	e30e3c10 	movw	r3, #60432	; 0xec10
  11d39c:	e3403056 	movt	r3, #86	; 0x56
  11d3a0:	e5933000 	ldr	r3, [r3]
  11d3a4:	e593200c 	ldr	r2, [r3, #12]
  11d3a8:	e30e3c10 	movw	r3, #60432	; 0xec10
  11d3ac:	e3403056 	movt	r3, #86	; 0x56
  11d3b0:	e5832000 	str	r2, [r3]
  11d3b4:	ea000014 	b	11d40c <tcp_close_shutdown+0x2c4>
  11d3b8:	e30e3c10 	movw	r3, #60432	; 0xec10
  11d3bc:	e3403056 	movt	r3, #86	; 0x56
  11d3c0:	e5933000 	ldr	r3, [r3]
  11d3c4:	e50b300c 	str	r3, [fp, #-12]
  11d3c8:	ea00000c 	b	11d400 <tcp_close_shutdown+0x2b8>
  11d3cc:	e51b300c 	ldr	r3, [fp, #-12]
  11d3d0:	e593300c 	ldr	r3, [r3, #12]
  11d3d4:	e51b2010 	ldr	r2, [fp, #-16]
  11d3d8:	e1520003 	cmp	r2, r3
  11d3dc:	1a000004 	bne	11d3f4 <tcp_close_shutdown+0x2ac>
  11d3e0:	e51b3010 	ldr	r3, [fp, #-16]
  11d3e4:	e593200c 	ldr	r2, [r3, #12]
  11d3e8:	e51b300c 	ldr	r3, [fp, #-12]
  11d3ec:	e583200c 	str	r2, [r3, #12]
  11d3f0:	ea000005 	b	11d40c <tcp_close_shutdown+0x2c4>
  11d3f4:	e51b300c 	ldr	r3, [fp, #-12]
  11d3f8:	e593300c 	ldr	r3, [r3, #12]
  11d3fc:	e50b300c 	str	r3, [fp, #-12]
  11d400:	e51b300c 	ldr	r3, [fp, #-12]
  11d404:	e3530000 	cmp	r3, #0
  11d408:	1affffef 	bne	11d3cc <tcp_close_shutdown+0x284>
  11d40c:	e51b3010 	ldr	r3, [fp, #-16]
  11d410:	e3a02000 	mov	r2, #0
  11d414:	e583200c 	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
  11d418:	e51b1010 	ldr	r1, [fp, #-16]
  11d41c:	e3a00002 	mov	r0, #2
  11d420:	ebffef97 	bl	119284 <memp_free>
    break;
  11d424:	ea000020 	b	11d4ac <tcp_close_shutdown+0x364>
  case LISTEN:
    tcp_listen_closed(pcb);
  11d428:	e51b0010 	ldr	r0, [fp, #-16]
  11d42c:	ebffff18 	bl	11d094 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  11d430:	e51b1010 	ldr	r1, [fp, #-16]
  11d434:	e30e0c0c 	movw	r0, #60428	; 0xec0c
  11d438:	e3400056 	movt	r0, #86	; 0x56
  11d43c:	eb000a8f 	bl	11fe80 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  11d440:	e51b1010 	ldr	r1, [fp, #-16]
  11d444:	e3a00003 	mov	r0, #3
  11d448:	ebffef8d 	bl	119284 <memp_free>
    break;
  11d44c:	ea000016 	b	11d4ac <tcp_close_shutdown+0x364>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
  11d450:	e51b1010 	ldr	r1, [fp, #-16]
  11d454:	e30e0c04 	movw	r0, #60420	; 0xec04
  11d458:	e3400056 	movt	r0, #86	; 0x56
  11d45c:	eb000a87 	bl	11fe80 <tcp_pcb_remove>
  11d460:	e30e3c00 	movw	r3, #60416	; 0xec00
  11d464:	e3403056 	movt	r3, #86	; 0x56
  11d468:	e3a02001 	mov	r2, #1
  11d46c:	e5c32000 	strb	r2, [r3]
    memp_free(MEMP_TCP_PCB, pcb);
  11d470:	e51b1010 	ldr	r1, [fp, #-16]
  11d474:	e3a00002 	mov	r0, #2
  11d478:	ebffef81 	bl	119284 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
  11d47c:	e30e3a14 	movw	r3, #59924	; 0xea14
  11d480:	e3403056 	movt	r3, #86	; 0x56
  11d484:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d488:	e2832001 	add	r2, r3, #1
  11d48c:	e30e3a14 	movw	r3, #59924	; 0xea14
  11d490:	e3403056 	movt	r3, #86	; 0x56
  11d494:	e5832174 	str	r2, [r3, #372]	; 0x174
    break;
  11d498:	ea000003 	b	11d4ac <tcp_close_shutdown+0x364>
  default:
    return tcp_close_shutdown_fin(pcb);
  11d49c:	e51b0010 	ldr	r0, [fp, #-16]
  11d4a0:	eb000005 	bl	11d4bc <tcp_close_shutdown_fin>
  11d4a4:	e1a03000 	mov	r3, r0
  11d4a8:	ea000000 	b	11d4b0 <tcp_close_shutdown+0x368>
  }
  return ERR_OK;
  11d4ac:	e3a03000 	mov	r3, #0
}
  11d4b0:	e1a00003 	mov	r0, r3
  11d4b4:	e24bd004 	sub	sp, fp, #4
  11d4b8:	e8bd8800 	pop	{fp, pc}

0011d4bc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
  11d4bc:	e92d4800 	push	{fp, lr}
  11d4c0:	e28db004 	add	fp, sp, #4
  11d4c4:	e24dd010 	sub	sp, sp, #16
  11d4c8:	e50b0010 	str	r0, [fp, #-16]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11d4cc:	e51b3010 	ldr	r3, [fp, #-16]
  11d4d0:	e3530000 	cmp	r3, #0
  11d4d4:	1a000006 	bne	11d4f4 <tcp_close_shutdown_fin+0x38>
  11d4d8:	e3070ed4 	movw	r0, #32468	; 0x7ed4
  11d4dc:	e3400014 	movt	r0, #20
  11d4e0:	ebff970b 	bl	103114 <rt_kprintf>
  11d4e4:	e300114d 	movw	r1, #333	; 0x14d
  11d4e8:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11d4ec:	e3400014 	movt	r0, #20
  11d4f0:	ebffb6fe 	bl	10b0f0 <sys_arch_assert>

  switch (pcb->state) {
  11d4f4:	e51b3010 	ldr	r3, [fp, #-16]
  11d4f8:	e5933014 	ldr	r3, [r3, #20]
  11d4fc:	e3530004 	cmp	r3, #4
  11d500:	0a000015 	beq	11d55c <tcp_close_shutdown_fin+0xa0>
  11d504:	e3530007 	cmp	r3, #7
  11d508:	0a000025 	beq	11d5a4 <tcp_close_shutdown_fin+0xe8>
  11d50c:	e3530003 	cmp	r3, #3
  11d510:	1a000035 	bne	11d5ec <tcp_close_shutdown_fin+0x130>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
  11d514:	e51b0010 	ldr	r0, [fp, #-16]
  11d518:	eb001ce6 	bl	1248b8 <tcp_send_fin>
  11d51c:	e1a03000 	mov	r3, r0
  11d520:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d524:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d528:	e3530000 	cmp	r3, #0
  11d52c:	1a000030 	bne	11d5f4 <tcp_close_shutdown_fin+0x138>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
  11d530:	e30e3a14 	movw	r3, #59924	; 0xea14
  11d534:	e3403056 	movt	r3, #86	; 0x56
  11d538:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d53c:	e2832001 	add	r2, r3, #1
  11d540:	e30e3a14 	movw	r3, #59924	; 0xea14
  11d544:	e3403056 	movt	r3, #86	; 0x56
  11d548:	e5832174 	str	r2, [r3, #372]	; 0x174
      pcb->state = FIN_WAIT_1;
  11d54c:	e51b3010 	ldr	r3, [fp, #-16]
  11d550:	e3a02005 	mov	r2, #5
  11d554:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d558:	ea000025 	b	11d5f4 <tcp_close_shutdown_fin+0x138>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
  11d55c:	e51b0010 	ldr	r0, [fp, #-16]
  11d560:	eb001cd4 	bl	1248b8 <tcp_send_fin>
  11d564:	e1a03000 	mov	r3, r0
  11d568:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d56c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d570:	e3530000 	cmp	r3, #0
  11d574:	1a000020 	bne	11d5fc <tcp_close_shutdown_fin+0x140>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d578:	e30e3a14 	movw	r3, #59924	; 0xea14
  11d57c:	e3403056 	movt	r3, #86	; 0x56
  11d580:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d584:	e2832001 	add	r2, r3, #1
  11d588:	e30e3a14 	movw	r3, #59924	; 0xea14
  11d58c:	e3403056 	movt	r3, #86	; 0x56
  11d590:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = FIN_WAIT_1;
  11d594:	e51b3010 	ldr	r3, [fp, #-16]
  11d598:	e3a02005 	mov	r2, #5
  11d59c:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d5a0:	ea000015 	b	11d5fc <tcp_close_shutdown_fin+0x140>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
  11d5a4:	e51b0010 	ldr	r0, [fp, #-16]
  11d5a8:	eb001cc2 	bl	1248b8 <tcp_send_fin>
  11d5ac:	e1a03000 	mov	r3, r0
  11d5b0:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d5b4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d5b8:	e3530000 	cmp	r3, #0
  11d5bc:	1a000010 	bne	11d604 <tcp_close_shutdown_fin+0x148>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d5c0:	e30e3a14 	movw	r3, #59924	; 0xea14
  11d5c4:	e3403056 	movt	r3, #86	; 0x56
  11d5c8:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d5cc:	e2832001 	add	r2, r3, #1
  11d5d0:	e30e3a14 	movw	r3, #59924	; 0xea14
  11d5d4:	e3403056 	movt	r3, #86	; 0x56
  11d5d8:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = LAST_ACK;
  11d5dc:	e51b3010 	ldr	r3, [fp, #-16]
  11d5e0:	e3a02009 	mov	r2, #9
  11d5e4:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d5e8:	ea000005 	b	11d604 <tcp_close_shutdown_fin+0x148>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
  11d5ec:	e3a03000 	mov	r3, #0
  11d5f0:	ea000014 	b	11d648 <tcp_close_shutdown_fin+0x18c>
    break;
  11d5f4:	e320f000 	nop	{0}
  11d5f8:	ea000002 	b	11d608 <tcp_close_shutdown_fin+0x14c>
    break;
  11d5fc:	e320f000 	nop	{0}
  11d600:	ea000000 	b	11d608 <tcp_close_shutdown_fin+0x14c>
    break;
  11d604:	e320f000 	nop	{0}
    break;
  }

  if (err == ERR_OK) {
  11d608:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d60c:	e3530000 	cmp	r3, #0
  11d610:	1a000002 	bne	11d620 <tcp_close_shutdown_fin+0x164>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
  11d614:	e51b0010 	ldr	r0, [fp, #-16]
  11d618:	eb002251 	bl	125f64 <tcp_output>
  11d61c:	ea000008 	b	11d644 <tcp_close_shutdown_fin+0x188>
  } else if (err == ERR_MEM) {
  11d620:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d624:	e3730001 	cmn	r3, #1
  11d628:	1a000005 	bne	11d644 <tcp_close_shutdown_fin+0x188>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
  11d62c:	e51b3010 	ldr	r3, [fp, #-16]
  11d630:	e5d3301e 	ldrb	r3, [r3, #30]
  11d634:	e3833008 	orr	r3, r3, #8
  11d638:	e6ef2073 	uxtb	r2, r3
  11d63c:	e51b3010 	ldr	r3, [fp, #-16]
  11d640:	e5c3201e 	strb	r2, [r3, #30]
  }
  return err;
  11d644:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  11d648:	e1a00003 	mov	r0, r3
  11d64c:	e24bd004 	sub	sp, fp, #4
  11d650:	e8bd8800 	pop	{fp, pc}

0011d654 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
  11d654:	e92d4800 	push	{fp, lr}
  11d658:	e28db004 	add	fp, sp, #4
  11d65c:	e24dd008 	sub	sp, sp, #8
  11d660:	e50b0008 	str	r0, [fp, #-8]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
  11d664:	e51b3008 	ldr	r3, [fp, #-8]
  11d668:	e5933014 	ldr	r3, [r3, #20]
  11d66c:	e3530001 	cmp	r3, #1
  11d670:	0a000005 	beq	11d68c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d674:	e51b3008 	ldr	r3, [fp, #-8]
  11d678:	e5d3301e 	ldrb	r3, [r3, #30]
  11d67c:	e3833010 	orr	r3, r3, #16
  11d680:	e6ef2073 	uxtb	r2, r3
  11d684:	e51b3008 	ldr	r3, [fp, #-8]
  11d688:	e5c3201e 	strb	r2, [r3, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
  11d68c:	e3a01001 	mov	r1, #1
  11d690:	e51b0008 	ldr	r0, [fp, #-8]
  11d694:	ebfffeab 	bl	11d148 <tcp_close_shutdown>
  11d698:	e1a03000 	mov	r3, r0
}
  11d69c:	e1a00003 	mov	r0, r3
  11d6a0:	e24bd004 	sub	sp, fp, #4
  11d6a4:	e8bd8800 	pop	{fp, pc}

0011d6a8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
  11d6a8:	e92d4800 	push	{fp, lr}
  11d6ac:	e28db004 	add	fp, sp, #4
  11d6b0:	e24dd010 	sub	sp, sp, #16
  11d6b4:	e50b0008 	str	r0, [fp, #-8]
  11d6b8:	e50b100c 	str	r1, [fp, #-12]
  11d6bc:	e50b2010 	str	r2, [fp, #-16]
  if (pcb->state == LISTEN) {
  11d6c0:	e51b3008 	ldr	r3, [fp, #-8]
  11d6c4:	e5933014 	ldr	r3, [r3, #20]
  11d6c8:	e3530001 	cmp	r3, #1
  11d6cc:	1a000001 	bne	11d6d8 <tcp_shutdown+0x30>
    return ERR_CONN;
  11d6d0:	e3e0300a 	mvn	r3, #10
  11d6d4:	ea000030 	b	11d79c <tcp_shutdown+0xf4>
  }
  if (shut_rx) {
  11d6d8:	e51b300c 	ldr	r3, [fp, #-12]
  11d6dc:	e3530000 	cmp	r3, #0
  11d6e0:	0a000018 	beq	11d748 <tcp_shutdown+0xa0>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d6e4:	e51b3008 	ldr	r3, [fp, #-8]
  11d6e8:	e5d3301e 	ldrb	r3, [r3, #30]
  11d6ec:	e3833010 	orr	r3, r3, #16
  11d6f0:	e6ef2073 	uxtb	r2, r3
  11d6f4:	e51b3008 	ldr	r3, [fp, #-8]
  11d6f8:	e5c3201e 	strb	r2, [r3, #30]
    if (shut_tx) {
  11d6fc:	e51b3010 	ldr	r3, [fp, #-16]
  11d700:	e3530000 	cmp	r3, #0
  11d704:	0a000004 	beq	11d71c <tcp_shutdown+0x74>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
  11d708:	e3a01001 	mov	r1, #1
  11d70c:	e51b0008 	ldr	r0, [fp, #-8]
  11d710:	ebfffe8c 	bl	11d148 <tcp_close_shutdown>
  11d714:	e1a03000 	mov	r3, r0
  11d718:	ea00001f 	b	11d79c <tcp_shutdown+0xf4>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
  11d71c:	e51b3008 	ldr	r3, [fp, #-8]
  11d720:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d724:	e3530000 	cmp	r3, #0
  11d728:	0a000006 	beq	11d748 <tcp_shutdown+0xa0>
      pbuf_free(pcb->refused_data);
  11d72c:	e51b3008 	ldr	r3, [fp, #-8]
  11d730:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d734:	e1a00003 	mov	r0, r3
  11d738:	ebfff5df 	bl	11aebc <pbuf_free>
      pcb->refused_data = NULL;
  11d73c:	e51b3008 	ldr	r3, [fp, #-8]
  11d740:	e3a02000 	mov	r2, #0
  11d744:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
  11d748:	e51b3010 	ldr	r3, [fp, #-16]
  11d74c:	e3530000 	cmp	r3, #0
  11d750:	0a000010 	beq	11d798 <tcp_shutdown+0xf0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
  11d754:	e51b3008 	ldr	r3, [fp, #-8]
  11d758:	e5933014 	ldr	r3, [r3, #20]
  11d75c:	e3530003 	cmp	r3, #3
  11d760:	3a00000a 	bcc	11d790 <tcp_shutdown+0xe8>
  11d764:	e3530004 	cmp	r3, #4
  11d768:	9a000001 	bls	11d774 <tcp_shutdown+0xcc>
  11d76c:	e3530007 	cmp	r3, #7
  11d770:	1a000006 	bne	11d790 <tcp_shutdown+0xe8>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
  11d774:	e51b300c 	ldr	r3, [fp, #-12]
  11d778:	e6ef3073 	uxtb	r3, r3
  11d77c:	e1a01003 	mov	r1, r3
  11d780:	e51b0008 	ldr	r0, [fp, #-8]
  11d784:	ebfffe6f 	bl	11d148 <tcp_close_shutdown>
  11d788:	e1a03000 	mov	r3, r0
  11d78c:	ea000002 	b	11d79c <tcp_shutdown+0xf4>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
  11d790:	e3e0300a 	mvn	r3, #10
  11d794:	ea000000 	b	11d79c <tcp_shutdown+0xf4>
    }
  }
  return ERR_OK;
  11d798:	e3a03000 	mov	r3, #0
}
  11d79c:	e1a00003 	mov	r0, r3
  11d7a0:	e24bd004 	sub	sp, fp, #4
  11d7a4:	e8bd8800 	pop	{fp, pc}

0011d7a8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
  11d7a8:	e92d4800 	push	{fp, lr}
  11d7ac:	e28db004 	add	fp, sp, #4
  11d7b0:	e24dd030 	sub	sp, sp, #48	; 0x30
  11d7b4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11d7b8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
  11d7bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d7c0:	e5933014 	ldr	r3, [r3, #20]
  11d7c4:	e3530001 	cmp	r3, #1
  11d7c8:	1a000006 	bne	11d7e8 <tcp_abandon+0x40>
  11d7cc:	e3070f40 	movw	r0, #32576	; 0x7f40
  11d7d0:	e3400014 	movt	r0, #20
  11d7d4:	ebff964e 	bl	103114 <rt_kprintf>
  11d7d8:	e30011db 	movw	r1, #475	; 0x1db
  11d7dc:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11d7e0:	e3400014 	movt	r0, #20
  11d7e4:	ebffb641 	bl	10b0f0 <sys_arch_assert>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
  11d7e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d7ec:	e5933014 	ldr	r3, [r3, #20]
  11d7f0:	e353000a 	cmp	r3, #10
  11d7f4:	1a000007 	bne	11d818 <tcp_abandon+0x70>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  11d7f8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d7fc:	e30e0c14 	movw	r0, #60436	; 0xec14
  11d800:	e3400056 	movt	r0, #86	; 0x56
  11d804:	eb00099d 	bl	11fe80 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
  11d808:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d80c:	e3a00002 	mov	r0, #2
  11d810:	ebffee9b 	bl	119284 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
  11d814:	ea00007f 	b	11da18 <tcp_abandon+0x270>
    int send_rst = 0;
  11d818:	e3a03000 	mov	r3, #0
  11d81c:	e50b3008 	str	r3, [fp, #-8]
    u16_t local_port = 0;
  11d820:	e3a03000 	mov	r3, #0
  11d824:	e14b30ba 	strh	r3, [fp, #-10]
    seqno = pcb->snd_nxt;
  11d828:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d82c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  11d830:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ackno = pcb->rcv_nxt;
  11d834:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d838:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11d83c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    errf = pcb->errf;
  11d840:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d844:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11d848:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    errf_arg = pcb->callback_arg;
  11d84c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d850:	e5933010 	ldr	r3, [r3, #16]
  11d854:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (pcb->state == CLOSED) {
  11d858:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d85c:	e5933014 	ldr	r3, [r3, #20]
  11d860:	e3530000 	cmp	r3, #0
  11d864:	1a00002a 	bne	11d914 <tcp_abandon+0x16c>
      if (pcb->local_port != 0) {
  11d868:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d86c:	e1d331ba 	ldrh	r3, [r3, #26]
  11d870:	e3530000 	cmp	r3, #0
  11d874:	0a000033 	beq	11d948 <tcp_abandon+0x1a0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
  11d878:	e30e3c10 	movw	r3, #60432	; 0xec10
  11d87c:	e3403056 	movt	r3, #86	; 0x56
  11d880:	e5933000 	ldr	r3, [r3]
  11d884:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d888:	e1520003 	cmp	r2, r3
  11d88c:	1a000007 	bne	11d8b0 <tcp_abandon+0x108>
  11d890:	e30e3c10 	movw	r3, #60432	; 0xec10
  11d894:	e3403056 	movt	r3, #86	; 0x56
  11d898:	e5933000 	ldr	r3, [r3]
  11d89c:	e593200c 	ldr	r2, [r3, #12]
  11d8a0:	e30e3c10 	movw	r3, #60432	; 0xec10
  11d8a4:	e3403056 	movt	r3, #86	; 0x56
  11d8a8:	e5832000 	str	r2, [r3]
  11d8ac:	ea000014 	b	11d904 <tcp_abandon+0x15c>
  11d8b0:	e30e3c10 	movw	r3, #60432	; 0xec10
  11d8b4:	e3403056 	movt	r3, #86	; 0x56
  11d8b8:	e5933000 	ldr	r3, [r3]
  11d8bc:	e50b3010 	str	r3, [fp, #-16]
  11d8c0:	ea00000c 	b	11d8f8 <tcp_abandon+0x150>
  11d8c4:	e51b3010 	ldr	r3, [fp, #-16]
  11d8c8:	e593300c 	ldr	r3, [r3, #12]
  11d8cc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d8d0:	e1520003 	cmp	r2, r3
  11d8d4:	1a000004 	bne	11d8ec <tcp_abandon+0x144>
  11d8d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d8dc:	e593200c 	ldr	r2, [r3, #12]
  11d8e0:	e51b3010 	ldr	r3, [fp, #-16]
  11d8e4:	e583200c 	str	r2, [r3, #12]
  11d8e8:	ea000005 	b	11d904 <tcp_abandon+0x15c>
  11d8ec:	e51b3010 	ldr	r3, [fp, #-16]
  11d8f0:	e593300c 	ldr	r3, [r3, #12]
  11d8f4:	e50b3010 	str	r3, [fp, #-16]
  11d8f8:	e51b3010 	ldr	r3, [fp, #-16]
  11d8fc:	e3530000 	cmp	r3, #0
  11d900:	1affffef 	bne	11d8c4 <tcp_abandon+0x11c>
  11d904:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d908:	e3a02000 	mov	r2, #0
  11d90c:	e583200c 	str	r2, [r3, #12]
  11d910:	ea00000c 	b	11d948 <tcp_abandon+0x1a0>
      send_rst = reset;
  11d914:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11d918:	e50b3008 	str	r3, [fp, #-8]
      local_port = pcb->local_port;
  11d91c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d920:	e1d331ba 	ldrh	r3, [r3, #26]
  11d924:	e14b30ba 	strh	r3, [fp, #-10]
      TCP_PCB_REMOVE_ACTIVE(pcb);
  11d928:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d92c:	e30e0c04 	movw	r0, #60420	; 0xec04
  11d930:	e3400056 	movt	r0, #86	; 0x56
  11d934:	eb000951 	bl	11fe80 <tcp_pcb_remove>
  11d938:	e30e3c00 	movw	r3, #60416	; 0xec00
  11d93c:	e3403056 	movt	r3, #86	; 0x56
  11d940:	e3a02001 	mov	r2, #1
  11d944:	e5c32000 	strb	r2, [r3]
    if (pcb->unacked != NULL) {
  11d948:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d94c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11d950:	e3530000 	cmp	r3, #0
  11d954:	0a000003 	beq	11d968 <tcp_abandon+0x1c0>
      tcp_segs_free(pcb->unacked);
  11d958:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d95c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11d960:	e1a00003 	mov	r0, r3
  11d964:	eb0006b4 	bl	11f43c <tcp_segs_free>
    if (pcb->unsent != NULL) {
  11d968:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d96c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11d970:	e3530000 	cmp	r3, #0
  11d974:	0a000003 	beq	11d988 <tcp_abandon+0x1e0>
      tcp_segs_free(pcb->unsent);
  11d978:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d97c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11d980:	e1a00003 	mov	r0, r3
  11d984:	eb0006ac 	bl	11f43c <tcp_segs_free>
    if (pcb->ooseq != NULL) {
  11d988:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d98c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11d990:	e3530000 	cmp	r3, #0
  11d994:	0a000003 	beq	11d9a8 <tcp_abandon+0x200>
      tcp_segs_free(pcb->ooseq);
  11d998:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d99c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11d9a0:	e1a00003 	mov	r0, r3
  11d9a4:	eb0006a4 	bl	11f43c <tcp_segs_free>
    if (send_rst) {
  11d9a8:	e51b3008 	ldr	r3, [fp, #-8]
  11d9ac:	e3530000 	cmp	r3, #0
  11d9b0:	0a00000b 	beq	11d9e4 <tcp_abandon+0x23c>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
  11d9b4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d9b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d9bc:	e2831004 	add	r1, r3, #4
  11d9c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d9c4:	e1d331bc 	ldrh	r3, [r3, #28]
  11d9c8:	e58d3004 	str	r3, [sp, #4]
  11d9cc:	e15b30ba 	ldrh	r3, [fp, #-10]
  11d9d0:	e58d3000 	str	r3, [sp]
  11d9d4:	e1a03001 	mov	r3, r1
  11d9d8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11d9dc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11d9e0:	eb0023c5 	bl	1268fc <tcp_rst>
    last_state = pcb->state;
  11d9e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d9e8:	e5933014 	ldr	r3, [r3, #20]
  11d9ec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    memp_free(MEMP_TCP_PCB, pcb);
  11d9f0:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d9f4:	e3a00002 	mov	r0, #2
  11d9f8:	ebffee21 	bl	119284 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  11d9fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11da00:	e3530000 	cmp	r3, #0
  11da04:	0a000003 	beq	11da18 <tcp_abandon+0x270>
  11da08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11da0c:	e3e0100c 	mvn	r1, #12
  11da10:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  11da14:	e12fff33 	blx	r3
}
  11da18:	e320f000 	nop	{0}
  11da1c:	e24bd004 	sub	sp, fp, #4
  11da20:	e8bd8800 	pop	{fp, pc}

0011da24 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  11da24:	e92d4800 	push	{fp, lr}
  11da28:	e28db004 	add	fp, sp, #4
  11da2c:	e24dd008 	sub	sp, sp, #8
  11da30:	e50b0008 	str	r0, [fp, #-8]
  tcp_abandon(pcb, 1);
  11da34:	e3a01001 	mov	r1, #1
  11da38:	e51b0008 	ldr	r0, [fp, #-8]
  11da3c:	ebffff59 	bl	11d7a8 <tcp_abandon>
}
  11da40:	e320f000 	nop	{0}
  11da44:	e24bd004 	sub	sp, fp, #4
  11da48:	e8bd8800 	pop	{fp, pc}

0011da4c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  11da4c:	e92d4800 	push	{fp, lr}
  11da50:	e28db004 	add	fp, sp, #4
  11da54:	e24dd020 	sub	sp, sp, #32
  11da58:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11da5c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11da60:	e1a03002 	mov	r3, r2
  11da64:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  11da68:	e3a03004 	mov	r3, #4
  11da6c:	e50b300c 	str	r3, [fp, #-12]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  11da70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11da74:	e3530000 	cmp	r3, #0
  11da78:	1a000002 	bne	11da88 <tcp_bind+0x3c>
    ipaddr = IP4_ADDR_ANY;
  11da7c:	e3093910 	movw	r3, #39184	; 0x9910
  11da80:	e3403014 	movt	r3, #20
  11da84:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11da88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da8c:	e3530000 	cmp	r3, #0
  11da90:	0a000002 	beq	11daa0 <tcp_bind+0x54>
  11da94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11da98:	e3530000 	cmp	r3, #0
  11da9c:	1a000001 	bne	11daa8 <tcp_bind+0x5c>
    return ERR_VAL;
  11daa0:	e3e03005 	mvn	r3, #5
  11daa4:	ea000078 	b	11dc8c <tcp_bind+0x240>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
  11daa8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11daac:	e5933014 	ldr	r3, [r3, #20]
  11dab0:	e3530000 	cmp	r3, #0
  11dab4:	0a000008 	beq	11dadc <tcp_bind+0x90>
  11dab8:	e3070f74 	movw	r0, #32628	; 0x7f74
  11dabc:	e3400014 	movt	r0, #20
  11dac0:	ebff9593 	bl	103114 <rt_kprintf>
  11dac4:	e300123f 	movw	r1, #575	; 0x23f
  11dac8:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11dacc:	e3400014 	movt	r0, #20
  11dad0:	ebffb586 	bl	10b0f0 <sys_arch_assert>
  11dad4:	e3e03005 	mvn	r3, #5
  11dad8:	ea00006b 	b	11dc8c <tcp_bind+0x240>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11dadc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dae0:	e5d33008 	ldrb	r3, [r3, #8]
  11dae4:	e2033004 	and	r3, r3, #4
  11dae8:	e3530000 	cmp	r3, #0
  11daec:	0a000001 	beq	11daf8 <tcp_bind+0xac>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  11daf0:	e3a03003 	mov	r3, #3
  11daf4:	e50b300c 	str	r3, [fp, #-12]
  }
#endif /* SO_REUSE */

  if (port == 0) {
  11daf8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11dafc:	e3530000 	cmp	r3, #0
  11db00:	1a000007 	bne	11db24 <tcp_bind+0xd8>
    port = tcp_new_port();
  11db04:	eb0001ba 	bl	11e1f4 <tcp_new_port>
  11db08:	e1a03000 	mov	r3, r0
  11db0c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    if (port == 0) {
  11db10:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11db14:	e3530000 	cmp	r3, #0
  11db18:	1a00003d 	bne	11dc14 <tcp_bind+0x1c8>
      return ERR_BUF;
  11db1c:	e3e03001 	mvn	r3, #1
  11db20:	ea000059 	b	11dc8c <tcp_bind+0x240>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
  11db24:	e3a03000 	mov	r3, #0
  11db28:	e50b3008 	str	r3, [fp, #-8]
  11db2c:	ea000034 	b	11dc04 <tcp_bind+0x1b8>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11db30:	e3073ec4 	movw	r3, #32452	; 0x7ec4
  11db34:	e3403014 	movt	r3, #20
  11db38:	e51b2008 	ldr	r2, [fp, #-8]
  11db3c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11db40:	e5933000 	ldr	r3, [r3]
  11db44:	e50b3010 	str	r3, [fp, #-16]
  11db48:	ea000027 	b	11dbec <tcp_bind+0x1a0>
        if (cpcb->local_port == port) {
  11db4c:	e51b3010 	ldr	r3, [fp, #-16]
  11db50:	e1d331ba 	ldrh	r3, [r3, #26]
  11db54:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11db58:	e1520003 	cmp	r2, r3
  11db5c:	1a00001f 	bne	11dbe0 <tcp_bind+0x194>
#if SO_REUSE
          /* Omit checking for the same port if both pcbs have REUSEADDR set.
             For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
             tcp_connect. */
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11db60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db64:	e5d33008 	ldrb	r3, [r3, #8]
  11db68:	e2033004 	and	r3, r3, #4
  11db6c:	e3530000 	cmp	r3, #0
  11db70:	0a000004 	beq	11db88 <tcp_bind+0x13c>
              !ip_get_option(cpcb, SOF_REUSEADDR))
  11db74:	e51b3010 	ldr	r3, [fp, #-16]
  11db78:	e5d33008 	ldrb	r3, [r3, #8]
  11db7c:	e2033004 	and	r3, r3, #4
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11db80:	e3530000 	cmp	r3, #0
  11db84:	1a000015 	bne	11dbe0 <tcp_bind+0x194>
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
  11db88:	e51b3010 	ldr	r3, [fp, #-16]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11db8c:	e3530000 	cmp	r3, #0
  11db90:	0a000010 	beq	11dbd8 <tcp_bind+0x18c>
                (ip_addr_isany(&cpcb->local_ip) ||
  11db94:	e51b3010 	ldr	r3, [fp, #-16]
  11db98:	e5933000 	ldr	r3, [r3]
  11db9c:	e3530000 	cmp	r3, #0
  11dba0:	0a00000c 	beq	11dbd8 <tcp_bind+0x18c>
  11dba4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dba8:	e3530000 	cmp	r3, #0
  11dbac:	0a000009 	beq	11dbd8 <tcp_bind+0x18c>
                ip_addr_isany(ipaddr) ||
  11dbb0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dbb4:	e5933000 	ldr	r3, [r3]
  11dbb8:	e3530000 	cmp	r3, #0
  11dbbc:	0a000005 	beq	11dbd8 <tcp_bind+0x18c>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
  11dbc0:	e51b3010 	ldr	r3, [fp, #-16]
  11dbc4:	e5932000 	ldr	r2, [r3]
  11dbc8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dbcc:	e5933000 	ldr	r3, [r3]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11dbd0:	e1520003 	cmp	r2, r3
  11dbd4:	1a000001 	bne	11dbe0 <tcp_bind+0x194>
              return ERR_USE;
  11dbd8:	e3e03007 	mvn	r3, #7
  11dbdc:	ea00002a 	b	11dc8c <tcp_bind+0x240>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11dbe0:	e51b3010 	ldr	r3, [fp, #-16]
  11dbe4:	e593300c 	ldr	r3, [r3, #12]
  11dbe8:	e50b3010 	str	r3, [fp, #-16]
  11dbec:	e51b3010 	ldr	r3, [fp, #-16]
  11dbf0:	e3530000 	cmp	r3, #0
  11dbf4:	1affffd4 	bne	11db4c <tcp_bind+0x100>
    for (i = 0; i < max_pcb_list; i++) {
  11dbf8:	e51b3008 	ldr	r3, [fp, #-8]
  11dbfc:	e2833001 	add	r3, r3, #1
  11dc00:	e50b3008 	str	r3, [fp, #-8]
  11dc04:	e51b2008 	ldr	r2, [fp, #-8]
  11dc08:	e51b300c 	ldr	r3, [fp, #-12]
  11dc0c:	e1520003 	cmp	r2, r3
  11dc10:	baffffc6 	blt	11db30 <tcp_bind+0xe4>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
  11dc14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dc18:	e3530000 	cmp	r3, #0
  11dc1c:	0a00000c 	beq	11dc54 <tcp_bind+0x208>
  11dc20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dc24:	e5933000 	ldr	r3, [r3]
  11dc28:	e3530000 	cmp	r3, #0
  11dc2c:	0a000008 	beq	11dc54 <tcp_bind+0x208>
    ip_addr_set(&pcb->local_ip, ipaddr);
  11dc30:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dc34:	e3530000 	cmp	r3, #0
  11dc38:	0a000002 	beq	11dc48 <tcp_bind+0x1fc>
  11dc3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dc40:	e5933000 	ldr	r3, [r3]
  11dc44:	ea000000 	b	11dc4c <tcp_bind+0x200>
  11dc48:	e3a03000 	mov	r3, #0
  11dc4c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11dc50:	e5823000 	str	r3, [r2]
  }
  pcb->local_port = port;
  11dc54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dc58:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11dc5c:	e1c321ba 	strh	r2, [r3, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
  11dc60:	e30e3c10 	movw	r3, #60432	; 0xec10
  11dc64:	e3403056 	movt	r3, #86	; 0x56
  11dc68:	e5932000 	ldr	r2, [r3]
  11dc6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dc70:	e583200c 	str	r2, [r3, #12]
  11dc74:	e30e3c10 	movw	r3, #60432	; 0xec10
  11dc78:	e3403056 	movt	r3, #86	; 0x56
  11dc7c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11dc80:	e5832000 	str	r2, [r3]
  11dc84:	eb00256f 	bl	127248 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
  11dc88:	e3a03000 	mov	r3, #0
}
  11dc8c:	e1a00003 	mov	r0, r3
  11dc90:	e24bd004 	sub	sp, fp, #4
  11dc94:	e8bd8800 	pop	{fp, pc}

0011dc98 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
  11dc98:	e92d4800 	push	{fp, lr}
  11dc9c:	e28db004 	add	fp, sp, #4
  11dca0:	e24dd010 	sub	sp, sp, #16
  11dca4:	e50b0008 	str	r0, [fp, #-8]
  11dca8:	e50b100c 	str	r1, [fp, #-12]
  11dcac:	e1a03002 	mov	r3, r2
  11dcb0:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
  11dcb4:	e51b000c 	ldr	r0, [fp, #-12]
  11dcb8:	ebffff59 	bl	11da24 <tcp_abort>

  return ERR_ABRT;
  11dcbc:	e3e0300c 	mvn	r3, #12
}
  11dcc0:	e1a00003 	mov	r0, r3
  11dcc4:	e24bd004 	sub	sp, fp, #4
  11dcc8:	e8bd8800 	pop	{fp, pc}

0011dccc <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
  11dccc:	e92d4800 	push	{fp, lr}
  11dcd0:	e28db004 	add	fp, sp, #4
  11dcd4:	e24dd008 	sub	sp, sp, #8
  11dcd8:	e50b0008 	str	r0, [fp, #-8]
  11dcdc:	e1a03001 	mov	r3, r1
  11dce0:	e54b3009 	strb	r3, [fp, #-9]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
  11dce4:	e55b3009 	ldrb	r3, [fp, #-9]
  11dce8:	e3a02000 	mov	r2, #0
  11dcec:	e1a01003 	mov	r1, r3
  11dcf0:	e51b0008 	ldr	r0, [fp, #-8]
  11dcf4:	eb000003 	bl	11dd08 <tcp_listen_with_backlog_and_err>
  11dcf8:	e1a03000 	mov	r3, r0
}
  11dcfc:	e1a00003 	mov	r0, r3
  11dd00:	e24bd004 	sub	sp, fp, #4
  11dd04:	e8bd8800 	pop	{fp, pc}

0011dd08 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
  11dd08:	e92d4800 	push	{fp, lr}
  11dd0c:	e28db004 	add	fp, sp, #4
  11dd10:	e24dd020 	sub	sp, sp, #32
  11dd14:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11dd18:	e1a03001 	mov	r3, r1
  11dd1c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11dd20:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct tcp_pcb_listen *lpcb = NULL;
  11dd24:	e3a03000 	mov	r3, #0
  11dd28:	e50b3008 	str	r3, [fp, #-8]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
  11dd2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd30:	e5933014 	ldr	r3, [r3, #20]
  11dd34:	e3530000 	cmp	r3, #0
  11dd38:	0a000009 	beq	11dd64 <tcp_listen_with_backlog_and_err+0x5c>
  11dd3c:	e3070f9c 	movw	r0, #32668	; 0x7f9c
  11dd40:	e3400014 	movt	r0, #20
  11dd44:	ebff94f2 	bl	103114 <rt_kprintf>
  11dd48:	e30012af 	movw	r1, #687	; 0x2af
  11dd4c:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11dd50:	e3400014 	movt	r0, #20
  11dd54:	ebffb4e5 	bl	10b0f0 <sys_arch_assert>
  11dd58:	e3e0300e 	mvn	r3, #14
  11dd5c:	e54b3009 	strb	r3, [fp, #-9]
  11dd60:	ea000091 	b	11dfac <tcp_listen_with_backlog_and_err+0x2a4>

  /* already listening? */
  if (pcb->state == LISTEN) {
  11dd64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd68:	e5933014 	ldr	r3, [r3, #20]
  11dd6c:	e3530001 	cmp	r3, #1
  11dd70:	1a000004 	bne	11dd88 <tcp_listen_with_backlog_and_err+0x80>
    lpcb = (struct tcp_pcb_listen*)pcb;
  11dd74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd78:	e50b3008 	str	r3, [fp, #-8]
    res = ERR_ALREADY;
  11dd7c:	e3e03008 	mvn	r3, #8
  11dd80:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11dd84:	ea000088 	b	11dfac <tcp_listen_with_backlog_and_err+0x2a4>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11dd88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd8c:	e5d33008 	ldrb	r3, [r3, #8]
  11dd90:	e2033004 	and	r3, r3, #4
  11dd94:	e3530000 	cmp	r3, #0
  11dd98:	0a00001b 	beq	11de0c <tcp_listen_with_backlog_and_err+0x104>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11dd9c:	e30e3c0c 	movw	r3, #60428	; 0xec0c
  11dda0:	e3403056 	movt	r3, #86	; 0x56
  11dda4:	e5933000 	ldr	r3, [r3]
  11dda8:	e50b3008 	str	r3, [fp, #-8]
  11ddac:	ea000013 	b	11de00 <tcp_listen_with_backlog_and_err+0xf8>
      if ((lpcb->local_port == pcb->local_port) &&
  11ddb0:	e51b3008 	ldr	r3, [fp, #-8]
  11ddb4:	e1d321ba 	ldrh	r2, [r3, #26]
  11ddb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ddbc:	e1d331ba 	ldrh	r3, [r3, #26]
  11ddc0:	e1520003 	cmp	r2, r3
  11ddc4:	1a00000a 	bne	11ddf4 <tcp_listen_with_backlog_and_err+0xec>
          ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
  11ddc8:	e51b3008 	ldr	r3, [fp, #-8]
  11ddcc:	e5932000 	ldr	r2, [r3]
  11ddd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ddd4:	e5933000 	ldr	r3, [r3]
      if ((lpcb->local_port == pcb->local_port) &&
  11ddd8:	e1520003 	cmp	r2, r3
  11dddc:	1a000004 	bne	11ddf4 <tcp_listen_with_backlog_and_err+0xec>
        /* this address/port is already used */
        lpcb = NULL;
  11dde0:	e3a03000 	mov	r3, #0
  11dde4:	e50b3008 	str	r3, [fp, #-8]
        res = ERR_USE;
  11dde8:	e3e03007 	mvn	r3, #7
  11ddec:	e54b3009 	strb	r3, [fp, #-9]
        goto done;
  11ddf0:	ea00006d 	b	11dfac <tcp_listen_with_backlog_and_err+0x2a4>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11ddf4:	e51b3008 	ldr	r3, [fp, #-8]
  11ddf8:	e593300c 	ldr	r3, [r3, #12]
  11ddfc:	e50b3008 	str	r3, [fp, #-8]
  11de00:	e51b3008 	ldr	r3, [fp, #-8]
  11de04:	e3530000 	cmp	r3, #0
  11de08:	1affffe8 	bne	11ddb0 <tcp_listen_with_backlog_and_err+0xa8>
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
  11de0c:	e30022c7 	movw	r2, #711	; 0x2c7
  11de10:	e3071ee0 	movw	r1, #32480	; 0x7ee0
  11de14:	e3401014 	movt	r1, #20
  11de18:	e3a00003 	mov	r0, #3
  11de1c:	ebffecb0 	bl	1190e4 <memp_malloc_fn>
  11de20:	e50b0008 	str	r0, [fp, #-8]
  if (lpcb == NULL) {
  11de24:	e51b3008 	ldr	r3, [fp, #-8]
  11de28:	e3530000 	cmp	r3, #0
  11de2c:	1a000002 	bne	11de3c <tcp_listen_with_backlog_and_err+0x134>
    res = ERR_MEM;
  11de30:	e3e03000 	mvn	r3, #0
  11de34:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11de38:	ea00005b 	b	11dfac <tcp_listen_with_backlog_and_err+0x2a4>
  }
  lpcb->callback_arg = pcb->callback_arg;
  11de3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de40:	e5932010 	ldr	r2, [r3, #16]
  11de44:	e51b3008 	ldr	r3, [fp, #-8]
  11de48:	e5832010 	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
  11de4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de50:	e1d321ba 	ldrh	r2, [r3, #26]
  11de54:	e51b3008 	ldr	r3, [fp, #-8]
  11de58:	e1c321ba 	strh	r2, [r3, #26]
  lpcb->state = LISTEN;
  11de5c:	e51b3008 	ldr	r3, [fp, #-8]
  11de60:	e3a02001 	mov	r2, #1
  11de64:	e5832014 	str	r2, [r3, #20]
  lpcb->prio = pcb->prio;
  11de68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de6c:	e5d32018 	ldrb	r2, [r3, #24]
  11de70:	e51b3008 	ldr	r3, [fp, #-8]
  11de74:	e5c32018 	strb	r2, [r3, #24]
  lpcb->so_options = pcb->so_options;
  11de78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de7c:	e5d32008 	ldrb	r2, [r3, #8]
  11de80:	e51b3008 	ldr	r3, [fp, #-8]
  11de84:	e5c32008 	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
  11de88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de8c:	e5d3200a 	ldrb	r2, [r3, #10]
  11de90:	e51b3008 	ldr	r3, [fp, #-8]
  11de94:	e5c3200a 	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
  11de98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de9c:	e5d32009 	ldrb	r2, [r3, #9]
  11dea0:	e51b3008 	ldr	r3, [fp, #-8]
  11dea4:	e5c32009 	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
  11dea8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11deac:	e5932000 	ldr	r2, [r3]
  11deb0:	e51b3008 	ldr	r3, [fp, #-8]
  11deb4:	e5832000 	str	r2, [r3]
  if (pcb->local_port != 0) {
  11deb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11debc:	e1d331ba 	ldrh	r3, [r3, #26]
  11dec0:	e3530000 	cmp	r3, #0
  11dec4:	0a000025 	beq	11df60 <tcp_listen_with_backlog_and_err+0x258>
    TCP_RMV(&tcp_bound_pcbs, pcb);
  11dec8:	e30e3c10 	movw	r3, #60432	; 0xec10
  11decc:	e3403056 	movt	r3, #86	; 0x56
  11ded0:	e5933000 	ldr	r3, [r3]
  11ded4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11ded8:	e1520003 	cmp	r2, r3
  11dedc:	1a000007 	bne	11df00 <tcp_listen_with_backlog_and_err+0x1f8>
  11dee0:	e30e3c10 	movw	r3, #60432	; 0xec10
  11dee4:	e3403056 	movt	r3, #86	; 0x56
  11dee8:	e5933000 	ldr	r3, [r3]
  11deec:	e593200c 	ldr	r2, [r3, #12]
  11def0:	e30e3c10 	movw	r3, #60432	; 0xec10
  11def4:	e3403056 	movt	r3, #86	; 0x56
  11def8:	e5832000 	str	r2, [r3]
  11defc:	ea000014 	b	11df54 <tcp_listen_with_backlog_and_err+0x24c>
  11df00:	e30e3c10 	movw	r3, #60432	; 0xec10
  11df04:	e3403056 	movt	r3, #86	; 0x56
  11df08:	e5933000 	ldr	r3, [r3]
  11df0c:	e50b3010 	str	r3, [fp, #-16]
  11df10:	ea00000c 	b	11df48 <tcp_listen_with_backlog_and_err+0x240>
  11df14:	e51b3010 	ldr	r3, [fp, #-16]
  11df18:	e593300c 	ldr	r3, [r3, #12]
  11df1c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11df20:	e1520003 	cmp	r2, r3
  11df24:	1a000004 	bne	11df3c <tcp_listen_with_backlog_and_err+0x234>
  11df28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11df2c:	e593200c 	ldr	r2, [r3, #12]
  11df30:	e51b3010 	ldr	r3, [fp, #-16]
  11df34:	e583200c 	str	r2, [r3, #12]
  11df38:	ea000005 	b	11df54 <tcp_listen_with_backlog_and_err+0x24c>
  11df3c:	e51b3010 	ldr	r3, [fp, #-16]
  11df40:	e593300c 	ldr	r3, [r3, #12]
  11df44:	e50b3010 	str	r3, [fp, #-16]
  11df48:	e51b3010 	ldr	r3, [fp, #-16]
  11df4c:	e3530000 	cmp	r3, #0
  11df50:	1affffef 	bne	11df14 <tcp_listen_with_backlog_and_err+0x20c>
  11df54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11df58:	e3a02000 	mov	r2, #0
  11df5c:	e583200c 	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
  11df60:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11df64:	e3a00002 	mov	r0, #2
  11df68:	ebffecc5 	bl	119284 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
  11df6c:	e51b2008 	ldr	r2, [fp, #-8]
  11df70:	e30d3c98 	movw	r3, #56472	; 0xdc98
  11df74:	e3403011 	movt	r3, #17
  11df78:	e582301c 	str	r3, [r2, #28]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
  11df7c:	e30e3c0c 	movw	r3, #60428	; 0xec0c
  11df80:	e3403056 	movt	r3, #86	; 0x56
  11df84:	e5932000 	ldr	r2, [r3]
  11df88:	e51b3008 	ldr	r3, [fp, #-8]
  11df8c:	e583200c 	str	r2, [r3, #12]
  11df90:	e30e3c0c 	movw	r3, #60428	; 0xec0c
  11df94:	e3403056 	movt	r3, #86	; 0x56
  11df98:	e51b2008 	ldr	r2, [fp, #-8]
  11df9c:	e5832000 	str	r2, [r3]
  11dfa0:	eb0024a8 	bl	127248 <tcp_timer_needed>
  res = ERR_OK;
  11dfa4:	e3a03000 	mov	r3, #0
  11dfa8:	e54b3009 	strb	r3, [fp, #-9]
done:
  if (err != NULL) {
  11dfac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11dfb0:	e3530000 	cmp	r3, #0
  11dfb4:	0a000002 	beq	11dfc4 <tcp_listen_with_backlog_and_err+0x2bc>
    *err = res;
  11dfb8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11dfbc:	e55b2009 	ldrb	r2, [fp, #-9]
  11dfc0:	e5c32000 	strb	r2, [r3]
  }
  return (struct tcp_pcb *)lpcb;
  11dfc4:	e51b3008 	ldr	r3, [fp, #-8]
}
  11dfc8:	e1a00003 	mov	r0, r3
  11dfcc:	e24bd004 	sub	sp, fp, #4
  11dfd0:	e8bd8800 	pop	{fp, pc}

0011dfd4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
  11dfd4:	e92d4800 	push	{fp, lr}
  11dfd8:	e28db004 	add	fp, sp, #4
  11dfdc:	e24dd010 	sub	sp, sp, #16
  11dfe0:	e50b0010 	str	r0, [fp, #-16]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  11dfe4:	e51b3010 	ldr	r3, [fp, #-16]
  11dfe8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11dfec:	e51b2010 	ldr	r2, [fp, #-16]
  11dff0:	e1d222bc 	ldrh	r2, [r2, #44]	; 0x2c
  11dff4:	e0833002 	add	r3, r3, r2
  11dff8:	e50b3008 	str	r3, [fp, #-8]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  11dffc:	e51b3010 	ldr	r3, [fp, #-16]
  11e000:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11e004:	e51b2010 	ldr	r2, [fp, #-16]
  11e008:	e1d223b6 	ldrh	r2, [r2, #54]	; 0x36
  11e00c:	e6bf2072 	sxth	r2, r2
  11e010:	e3520000 	cmp	r2, #0
  11e014:	ba000002 	blt	11e024 <tcp_update_rcv_ann_wnd+0x50>
  11e018:	e51b2010 	ldr	r2, [fp, #-16]
  11e01c:	e1d223b6 	ldrh	r2, [r2, #54]	; 0x36
  11e020:	ea000000 	b	11e028 <tcp_update_rcv_ann_wnd+0x54>
  11e024:	e3072fff 	movw	r2, #32767	; 0x7fff
  11e028:	e0823003 	add	r3, r2, r3
  11e02c:	e51b2008 	ldr	r2, [fp, #-8]
  11e030:	e0423003 	sub	r3, r2, r3
  11e034:	e3530000 	cmp	r3, #0
  11e038:	ba000008 	blt	11e060 <tcp_update_rcv_ann_wnd+0x8c>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  11e03c:	e51b3010 	ldr	r3, [fp, #-16]
  11e040:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11e044:	e51b3010 	ldr	r3, [fp, #-16]
  11e048:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
  11e04c:	e51b3010 	ldr	r3, [fp, #-16]
  11e050:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11e054:	e51b2008 	ldr	r2, [fp, #-8]
  11e058:	e0423003 	sub	r3, r2, r3
  11e05c:	ea00001f 	b	11e0e0 <tcp_update_rcv_ann_wnd+0x10c>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  11e060:	e51b3010 	ldr	r3, [fp, #-16]
  11e064:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11e068:	e51b3010 	ldr	r3, [fp, #-16]
  11e06c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11e070:	e0423003 	sub	r3, r2, r3
  11e074:	e3530000 	cmp	r3, #0
  11e078:	da000003 	ble	11e08c <tcp_update_rcv_ann_wnd+0xb8>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
  11e07c:	e51b3010 	ldr	r3, [fp, #-16]
  11e080:	e3a02000 	mov	r2, #0
  11e084:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11e088:	ea000013 	b	11e0dc <tcp_update_rcv_ann_wnd+0x108>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
  11e08c:	e51b3010 	ldr	r3, [fp, #-16]
  11e090:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  11e094:	e51b3010 	ldr	r3, [fp, #-16]
  11e098:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11e09c:	e0423003 	sub	r3, r2, r3
  11e0a0:	e50b300c 	str	r3, [fp, #-12]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
  11e0a4:	e51b300c 	ldr	r3, [fp, #-12]
  11e0a8:	e3530801 	cmp	r3, #65536	; 0x10000
  11e0ac:	3a000006 	bcc	11e0cc <tcp_update_rcv_ann_wnd+0xf8>
  11e0b0:	e3070fc0 	movw	r0, #32704	; 0x7fc0
  11e0b4:	e3400014 	movt	r0, #20
  11e0b8:	ebff9415 	bl	103114 <rt_kprintf>
  11e0bc:	e3001303 	movw	r1, #771	; 0x303
  11e0c0:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11e0c4:	e3400014 	movt	r0, #20
  11e0c8:	ebffb408 	bl	10b0f0 <sys_arch_assert>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
  11e0cc:	e51b300c 	ldr	r3, [fp, #-12]
  11e0d0:	e6ff2073 	uxth	r2, r3
  11e0d4:	e51b3010 	ldr	r3, [fp, #-16]
  11e0d8:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    }
    return 0;
  11e0dc:	e3a03000 	mov	r3, #0
  }
}
  11e0e0:	e1a00003 	mov	r0, r3
  11e0e4:	e24bd004 	sub	sp, fp, #4
  11e0e8:	e8bd8800 	pop	{fp, pc}

0011e0ec <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
  11e0ec:	e92d4800 	push	{fp, lr}
  11e0f0:	e28db004 	add	fp, sp, #4
  11e0f4:	e24dd010 	sub	sp, sp, #16
  11e0f8:	e50b0010 	str	r0, [fp, #-16]
  11e0fc:	e1a03001 	mov	r3, r1
  11e100:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
  11e104:	e51b3010 	ldr	r3, [fp, #-16]
  11e108:	e5933014 	ldr	r3, [r3, #20]
  11e10c:	e3530001 	cmp	r3, #1
  11e110:	1a000006 	bne	11e130 <tcp_recved+0x44>
  11e114:	e3070fdc 	movw	r0, #32732	; 0x7fdc
  11e118:	e3400014 	movt	r0, #20
  11e11c:	ebff93fc 	bl	103114 <rt_kprintf>
  11e120:	e300131b 	movw	r1, #795	; 0x31b
  11e124:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11e128:	e3400014 	movt	r0, #20
  11e12c:	ebffb3ef 	bl	10b0f0 <sys_arch_assert>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
  11e130:	e51b3010 	ldr	r3, [fp, #-16]
  11e134:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11e138:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11e13c:	e0823003 	add	r3, r2, r3
  11e140:	e6ff2073 	uxth	r2, r3
  11e144:	e51b3010 	ldr	r3, [fp, #-16]
  11e148:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
  } else if (pcb->rcv_wnd == 0) {
  11e14c:	e51b3010 	ldr	r3, [fp, #-16]
  11e150:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11e154:	e3530000 	cmp	r3, #0
  11e158:	1a000012 	bne	11e1a8 <tcp_recved+0xbc>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
  11e15c:	e51b3010 	ldr	r3, [fp, #-16]
  11e160:	e5933014 	ldr	r3, [r3, #20]
  11e164:	e3530007 	cmp	r3, #7
  11e168:	0a000003 	beq	11e17c <tcp_recved+0x90>
  11e16c:	e51b3010 	ldr	r3, [fp, #-16]
  11e170:	e5933014 	ldr	r3, [r3, #20]
  11e174:	e3530009 	cmp	r3, #9
  11e178:	1a000003 	bne	11e18c <tcp_recved+0xa0>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
  11e17c:	e51b3010 	ldr	r3, [fp, #-16]
  11e180:	e3e02000 	mvn	r2, #0
  11e184:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  11e188:	ea000006 	b	11e1a8 <tcp_recved+0xbc>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
  11e18c:	e3080004 	movw	r0, #32772	; 0x8004
  11e190:	e3400014 	movt	r0, #20
  11e194:	ebff93de 	bl	103114 <rt_kprintf>
  11e198:	e3a01fca 	mov	r1, #808	; 0x328
  11e19c:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11e1a0:	e3400014 	movt	r0, #20
  11e1a4:	ebffb3d1 	bl	10b0f0 <sys_arch_assert>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  11e1a8:	e51b0010 	ldr	r0, [fp, #-16]
  11e1ac:	ebffff88 	bl	11dfd4 <tcp_update_rcv_ann_wnd>
  11e1b0:	e1a03000 	mov	r3, r0
  11e1b4:	e50b3008 	str	r3, [fp, #-8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  11e1b8:	e51b3008 	ldr	r3, [fp, #-8]
  11e1bc:	e30126cf 	movw	r2, #5839	; 0x16cf
  11e1c0:	e1530002 	cmp	r3, r2
  11e1c4:	da000007 	ble	11e1e8 <tcp_recved+0xfc>
    tcp_ack_now(pcb);
  11e1c8:	e51b3010 	ldr	r3, [fp, #-16]
  11e1cc:	e5d3301e 	ldrb	r3, [r3, #30]
  11e1d0:	e3833002 	orr	r3, r3, #2
  11e1d4:	e6ef2073 	uxtb	r2, r3
  11e1d8:	e51b3010 	ldr	r3, [fp, #-16]
  11e1dc:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  11e1e0:	e51b0010 	ldr	r0, [fp, #-16]
  11e1e4:	eb001f5e 	bl	125f64 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
  11e1e8:	e320f000 	nop	{0}
  11e1ec:	e24bd004 	sub	sp, fp, #4
  11e1f0:	e8bd8800 	pop	{fp, pc}

0011e1f4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  11e1f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11e1f8:	e28db000 	add	fp, sp, #0
  11e1fc:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u16_t n = 0;
  11e200:	e3a03000 	mov	r3, #0
  11e204:	e14b30b8 	strh	r3, [fp, #-8]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  11e208:	e30d3030 	movw	r3, #53296	; 0xd030
  11e20c:	e3403014 	movt	r3, #20
  11e210:	e1d320b0 	ldrh	r2, [r3]
  11e214:	e2823001 	add	r3, r2, #1
  11e218:	e6ff1073 	uxth	r1, r3
  11e21c:	e30d3030 	movw	r3, #53296	; 0xd030
  11e220:	e3403014 	movt	r3, #20
  11e224:	e1c310b0 	strh	r1, [r3]
  11e228:	e30f3fff 	movw	r3, #65535	; 0xffff
  11e22c:	e1520003 	cmp	r2, r3
  11e230:	1a000003 	bne	11e244 <tcp_new_port+0x50>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  11e234:	e30d3030 	movw	r3, #53296	; 0xd030
  11e238:	e3403014 	movt	r3, #20
  11e23c:	e3a02903 	mov	r2, #49152	; 0xc000
  11e240:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11e244:	e3a03000 	mov	r3, #0
  11e248:	e54b3005 	strb	r3, [fp, #-5]
  11e24c:	ea00001e 	b	11e2cc <tcp_new_port+0xd8>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11e250:	e55b2005 	ldrb	r2, [fp, #-5]
  11e254:	e3073ec4 	movw	r3, #32452	; 0x7ec4
  11e258:	e3403014 	movt	r3, #20
  11e25c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11e260:	e5933000 	ldr	r3, [r3]
  11e264:	e50b300c 	str	r3, [fp, #-12]
  11e268:	ea000011 	b	11e2b4 <tcp_new_port+0xc0>
      if (pcb->local_port == tcp_port) {
  11e26c:	e51b300c 	ldr	r3, [fp, #-12]
  11e270:	e1d321ba 	ldrh	r2, [r3, #26]
  11e274:	e30d3030 	movw	r3, #53296	; 0xd030
  11e278:	e3403014 	movt	r3, #20
  11e27c:	e1d330b0 	ldrh	r3, [r3]
  11e280:	e1520003 	cmp	r2, r3
  11e284:	1a000007 	bne	11e2a8 <tcp_new_port+0xb4>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
  11e288:	e15b30b8 	ldrh	r3, [fp, #-8]
  11e28c:	e2833001 	add	r3, r3, #1
  11e290:	e14b30b8 	strh	r3, [fp, #-8]
  11e294:	e15b30b8 	ldrh	r3, [fp, #-8]
  11e298:	e3530901 	cmp	r3, #16384	; 0x4000
  11e29c:	3affffd9 	bcc	11e208 <tcp_new_port+0x14>
          return 0;
  11e2a0:	e3a03000 	mov	r3, #0
  11e2a4:	ea00000e 	b	11e2e4 <tcp_new_port+0xf0>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11e2a8:	e51b300c 	ldr	r3, [fp, #-12]
  11e2ac:	e593300c 	ldr	r3, [r3, #12]
  11e2b0:	e50b300c 	str	r3, [fp, #-12]
  11e2b4:	e51b300c 	ldr	r3, [fp, #-12]
  11e2b8:	e3530000 	cmp	r3, #0
  11e2bc:	1affffea 	bne	11e26c <tcp_new_port+0x78>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11e2c0:	e55b3005 	ldrb	r3, [fp, #-5]
  11e2c4:	e2833001 	add	r3, r3, #1
  11e2c8:	e54b3005 	strb	r3, [fp, #-5]
  11e2cc:	e55b3005 	ldrb	r3, [fp, #-5]
  11e2d0:	e3530003 	cmp	r3, #3
  11e2d4:	9affffdd 	bls	11e250 <tcp_new_port+0x5c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
  11e2d8:	e30d3030 	movw	r3, #53296	; 0xd030
  11e2dc:	e3403014 	movt	r3, #20
  11e2e0:	e1d330b0 	ldrh	r3, [r3]
}
  11e2e4:	e1a00003 	mov	r0, r3
  11e2e8:	e28bd000 	add	sp, fp, #0
  11e2ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11e2f0:	e12fff1e 	bx	lr

0011e2f4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
  11e2f4:	e92d4800 	push	{fp, lr}
  11e2f8:	e28db004 	add	fp, sp, #4
  11e2fc:	e24dd030 	sub	sp, sp, #48	; 0x30
  11e300:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11e304:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  11e308:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  11e30c:	e1a03002 	mov	r3, r2
  11e310:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  11e314:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e318:	e3530000 	cmp	r3, #0
  11e31c:	0a000002 	beq	11e32c <tcp_connect+0x38>
  11e320:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e324:	e3530000 	cmp	r3, #0
  11e328:	1a000001 	bne	11e334 <tcp_connect+0x40>
    return ERR_VAL;
  11e32c:	e3e03005 	mvn	r3, #5
  11e330:	ea000101 	b	11e73c <tcp_connect+0x448>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
  11e334:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e338:	e5933014 	ldr	r3, [r3, #20]
  11e33c:	e3530000 	cmp	r3, #0
  11e340:	0a000008 	beq	11e368 <tcp_connect+0x74>
  11e344:	e3080028 	movw	r0, #32808	; 0x8028
  11e348:	e3400014 	movt	r0, #20
  11e34c:	ebff9370 	bl	103114 <rt_kprintf>
  11e350:	e3001373 	movw	r1, #883	; 0x373
  11e354:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11e358:	e3400014 	movt	r0, #20
  11e35c:	ebffb363 	bl	10b0f0 <sys_arch_assert>
  11e360:	e3e03009 	mvn	r3, #9
  11e364:	ea0000f4 	b	11e73c <tcp_connect+0x448>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
  11e368:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e36c:	e3530000 	cmp	r3, #0
  11e370:	0a000002 	beq	11e380 <tcp_connect+0x8c>
  11e374:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e378:	e5933000 	ldr	r3, [r3]
  11e37c:	ea000000 	b	11e384 <tcp_connect+0x90>
  11e380:	e3a03000 	mov	r3, #0
  11e384:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e388:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  11e38c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e390:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11e394:	e1c321bc 	strh	r2, [r3, #28]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
  11e398:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e39c:	e3530000 	cmp	r3, #0
  11e3a0:	0a000003 	beq	11e3b4 <tcp_connect+0xc0>
  11e3a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e3a8:	e5933000 	ldr	r3, [r3]
  11e3ac:	e3530000 	cmp	r3, #0
  11e3b0:	1a000018 	bne	11e418 <tcp_connect+0x124>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
  11e3b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e3b8:	e2833004 	add	r3, r3, #4
  11e3bc:	e1a00003 	mov	r0, r3
  11e3c0:	eb004b74 	bl	131198 <ip4_route>
  11e3c4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  11e3c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e3cc:	e3530000 	cmp	r3, #0
  11e3d0:	0a000002 	beq	11e3e0 <tcp_connect+0xec>
  11e3d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e3d8:	e2833004 	add	r3, r3, #4
  11e3dc:	ea000000 	b	11e3e4 <tcp_connect+0xf0>
  11e3e0:	e3a03000 	mov	r3, #0
  11e3e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((netif == NULL) || (local_ip == NULL)) {
  11e3e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e3ec:	e3530000 	cmp	r3, #0
  11e3f0:	0a000002 	beq	11e400 <tcp_connect+0x10c>
  11e3f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e3f8:	e3530000 	cmp	r3, #0
  11e3fc:	1a000001 	bne	11e408 <tcp_connect+0x114>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
  11e400:	e3e03003 	mvn	r3, #3
  11e404:	ea0000cc 	b	11e73c <tcp_connect+0x448>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
  11e408:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e40c:	e5932000 	ldr	r2, [r3]
  11e410:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e414:	e5832000 	str	r2, [r3]
  }

  old_local_port = pcb->local_port;
  11e418:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e41c:	e1d331ba 	ldrh	r3, [r3, #26]
  11e420:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if (pcb->local_port == 0) {
  11e424:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e428:	e1d331ba 	ldrh	r3, [r3, #26]
  11e42c:	e3530000 	cmp	r3, #0
  11e430:	1a00000a 	bne	11e460 <tcp_connect+0x16c>
    pcb->local_port = tcp_new_port();
  11e434:	ebffff6e 	bl	11e1f4 <tcp_new_port>
  11e438:	e1a03000 	mov	r3, r0
  11e43c:	e1a02003 	mov	r2, r3
  11e440:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e444:	e1c321ba 	strh	r2, [r3, #26]
    if (pcb->local_port == 0) {
  11e448:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e44c:	e1d331ba 	ldrh	r3, [r3, #26]
  11e450:	e3530000 	cmp	r3, #0
  11e454:	1a000035 	bne	11e530 <tcp_connect+0x23c>
      return ERR_BUF;
  11e458:	e3e03001 	mvn	r3, #1
  11e45c:	ea0000b6 	b	11e73c <tcp_connect+0x448>
    }
  } else {
#if SO_REUSE
    if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11e460:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e464:	e5d33008 	ldrb	r3, [r3, #8]
  11e468:	e2033004 	and	r3, r3, #4
  11e46c:	e3530000 	cmp	r3, #0
  11e470:	0a00002e 	beq	11e530 <tcp_connect+0x23c>
      /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
         now that the 5-tuple is unique. */
      struct tcp_pcb *cpcb;
      int i;
      /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e474:	e3a03002 	mov	r3, #2
  11e478:	e50b300c 	str	r3, [fp, #-12]
  11e47c:	ea000028 	b	11e524 <tcp_connect+0x230>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e480:	e3073ec4 	movw	r3, #32452	; 0x7ec4
  11e484:	e3403014 	movt	r3, #20
  11e488:	e51b200c 	ldr	r2, [fp, #-12]
  11e48c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11e490:	e5933000 	ldr	r3, [r3]
  11e494:	e50b3008 	str	r3, [fp, #-8]
  11e498:	ea00001b 	b	11e50c <tcp_connect+0x218>
          if ((cpcb->local_port == pcb->local_port) &&
  11e49c:	e51b3008 	ldr	r3, [fp, #-8]
  11e4a0:	e1d321ba 	ldrh	r2, [r3, #26]
  11e4a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e4a8:	e1d331ba 	ldrh	r3, [r3, #26]
  11e4ac:	e1520003 	cmp	r2, r3
  11e4b0:	1a000012 	bne	11e500 <tcp_connect+0x20c>
              (cpcb->remote_port == port) &&
  11e4b4:	e51b3008 	ldr	r3, [fp, #-8]
  11e4b8:	e1d331bc 	ldrh	r3, [r3, #28]
          if ((cpcb->local_port == pcb->local_port) &&
  11e4bc:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11e4c0:	e1520003 	cmp	r2, r3
  11e4c4:	1a00000d 	bne	11e500 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e4c8:	e51b3008 	ldr	r3, [fp, #-8]
  11e4cc:	e5932000 	ldr	r2, [r3]
  11e4d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e4d4:	e5933000 	ldr	r3, [r3]
              (cpcb->remote_port == port) &&
  11e4d8:	e1520003 	cmp	r2, r3
  11e4dc:	1a000007 	bne	11e500 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
  11e4e0:	e51b3008 	ldr	r3, [fp, #-8]
  11e4e4:	e5932004 	ldr	r2, [r3, #4]
  11e4e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e4ec:	e5933000 	ldr	r3, [r3]
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e4f0:	e1520003 	cmp	r2, r3
  11e4f4:	1a000001 	bne	11e500 <tcp_connect+0x20c>
            /* linux returns EISCONN here, but ERR_USE should be OK for us */
            return ERR_USE;
  11e4f8:	e3e03007 	mvn	r3, #7
  11e4fc:	ea00008e 	b	11e73c <tcp_connect+0x448>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e500:	e51b3008 	ldr	r3, [fp, #-8]
  11e504:	e593300c 	ldr	r3, [r3, #12]
  11e508:	e50b3008 	str	r3, [fp, #-8]
  11e50c:	e51b3008 	ldr	r3, [fp, #-8]
  11e510:	e3530000 	cmp	r3, #0
  11e514:	1affffe0 	bne	11e49c <tcp_connect+0x1a8>
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e518:	e51b300c 	ldr	r3, [fp, #-12]
  11e51c:	e2833001 	add	r3, r3, #1
  11e520:	e50b300c 	str	r3, [fp, #-12]
  11e524:	e51b300c 	ldr	r3, [fp, #-12]
  11e528:	e3530003 	cmp	r3, #3
  11e52c:	daffffd3 	ble	11e480 <tcp_connect+0x18c>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
  11e530:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e534:	eb0006bd 	bl	120030 <tcp_next_iss>
  11e538:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  pcb->rcv_nxt = 0;
  11e53c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e540:	e3a02000 	mov	r2, #0
  11e544:	e5832028 	str	r2, [r3, #40]	; 0x28
  pcb->snd_nxt = iss;
  11e548:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e54c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11e550:	e5832050 	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
  11e554:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e558:	e2432001 	sub	r2, r3, #1
  11e55c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e560:	e5832048 	str	r2, [r3, #72]	; 0x48
  pcb->snd_wl2 = iss - 1;
  11e564:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e568:	e2432001 	sub	r2, r3, #1
  11e56c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e570:	e5832058 	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
  11e574:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e578:	e2432001 	sub	r2, r3, #1
  11e57c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e580:	e583205c 	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11e584:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e588:	e3e02000 	mvn	r2, #0
  11e58c:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11e590:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e594:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11e598:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e59c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  11e5a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5a4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11e5a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5ac:	e5832030 	str	r2, [r3, #48]	; 0x30
  pcb->snd_wnd = TCP_WND;
  11e5b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5b4:	e3e02000 	mvn	r2, #0
  11e5b8:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
  11e5bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5c0:	e3a02f86 	mov	r2, #536	; 0x218
  11e5c4:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  11e5c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5cc:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11e5d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5d4:	e2833004 	add	r3, r3, #4
  11e5d8:	e1a01003 	mov	r1, r3
  11e5dc:	e1a00002 	mov	r0, r2
  11e5e0:	eb0006a7 	bl	120084 <tcp_eff_send_mss_impl>
  11e5e4:	e1a03000 	mov	r3, r0
  11e5e8:	e1a02003 	mov	r2, r3
  11e5ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5f0:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
  11e5f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5f8:	e3a02001 	mov	r2, #1
  11e5fc:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
#if LWIP_CALLBACK_API
  pcb->connected = connected;
  11e600:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e604:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  11e608:	e5832088 	str	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
  11e60c:	e3a01002 	mov	r1, #2
  11e610:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e614:	eb001d03 	bl	125a28 <tcp_enqueue_flags>
  11e618:	e1a03000 	mov	r3, r0
  11e61c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  if (ret == ERR_OK) {
  11e620:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  11e624:	e3530000 	cmp	r3, #0
  11e628:	1a000042 	bne	11e738 <tcp_connect+0x444>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
  11e62c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e630:	e3a02002 	mov	r2, #2
  11e634:	e5832014 	str	r2, [r3, #20]
    if (old_local_port != 0) {
  11e638:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11e63c:	e3530000 	cmp	r3, #0
  11e640:	0a000025 	beq	11e6dc <tcp_connect+0x3e8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11e644:	e30e3c10 	movw	r3, #60432	; 0xec10
  11e648:	e3403056 	movt	r3, #86	; 0x56
  11e64c:	e5933000 	ldr	r3, [r3]
  11e650:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e654:	e1520003 	cmp	r2, r3
  11e658:	1a000007 	bne	11e67c <tcp_connect+0x388>
  11e65c:	e30e3c10 	movw	r3, #60432	; 0xec10
  11e660:	e3403056 	movt	r3, #86	; 0x56
  11e664:	e5933000 	ldr	r3, [r3]
  11e668:	e593200c 	ldr	r2, [r3, #12]
  11e66c:	e30e3c10 	movw	r3, #60432	; 0xec10
  11e670:	e3403056 	movt	r3, #86	; 0x56
  11e674:	e5832000 	str	r2, [r3]
  11e678:	ea000014 	b	11e6d0 <tcp_connect+0x3dc>
  11e67c:	e30e3c10 	movw	r3, #60432	; 0xec10
  11e680:	e3403056 	movt	r3, #86	; 0x56
  11e684:	e5933000 	ldr	r3, [r3]
  11e688:	e50b3010 	str	r3, [fp, #-16]
  11e68c:	ea00000c 	b	11e6c4 <tcp_connect+0x3d0>
  11e690:	e51b3010 	ldr	r3, [fp, #-16]
  11e694:	e593300c 	ldr	r3, [r3, #12]
  11e698:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e69c:	e1520003 	cmp	r2, r3
  11e6a0:	1a000004 	bne	11e6b8 <tcp_connect+0x3c4>
  11e6a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e6a8:	e593200c 	ldr	r2, [r3, #12]
  11e6ac:	e51b3010 	ldr	r3, [fp, #-16]
  11e6b0:	e583200c 	str	r2, [r3, #12]
  11e6b4:	ea000005 	b	11e6d0 <tcp_connect+0x3dc>
  11e6b8:	e51b3010 	ldr	r3, [fp, #-16]
  11e6bc:	e593300c 	ldr	r3, [r3, #12]
  11e6c0:	e50b3010 	str	r3, [fp, #-16]
  11e6c4:	e51b3010 	ldr	r3, [fp, #-16]
  11e6c8:	e3530000 	cmp	r3, #0
  11e6cc:	1affffef 	bne	11e690 <tcp_connect+0x39c>
  11e6d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e6d4:	e3a02000 	mov	r2, #0
  11e6d8:	e583200c 	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
  11e6dc:	e30e3c04 	movw	r3, #60420	; 0xec04
  11e6e0:	e3403056 	movt	r3, #86	; 0x56
  11e6e4:	e5932000 	ldr	r2, [r3]
  11e6e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e6ec:	e583200c 	str	r2, [r3, #12]
  11e6f0:	e30e3c04 	movw	r3, #60420	; 0xec04
  11e6f4:	e3403056 	movt	r3, #86	; 0x56
  11e6f8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e6fc:	e5832000 	str	r2, [r3]
  11e700:	eb0022d0 	bl	127248 <tcp_timer_needed>
  11e704:	e30e3c00 	movw	r3, #60416	; 0xec00
  11e708:	e3403056 	movt	r3, #86	; 0x56
  11e70c:	e3a02001 	mov	r2, #1
  11e710:	e5c32000 	strb	r2, [r3]
    MIB2_STATS_INC(mib2.tcpactiveopens);
  11e714:	e30e3a14 	movw	r3, #59924	; 0xea14
  11e718:	e3403056 	movt	r3, #86	; 0x56
  11e71c:	e593316c 	ldr	r3, [r3, #364]	; 0x16c
  11e720:	e2832001 	add	r2, r3, #1
  11e724:	e30e3a14 	movw	r3, #59924	; 0xea14
  11e728:	e3403056 	movt	r3, #86	; 0x56
  11e72c:	e583216c 	str	r2, [r3, #364]	; 0x16c

    tcp_output(pcb);
  11e730:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e734:	eb001e0a 	bl	125f64 <tcp_output>
  }
  return ret;
  11e738:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
}
  11e73c:	e1a00003 	mov	r0, r3
  11e740:	e24bd004 	sub	sp, fp, #4
  11e744:	e8bd8800 	pop	{fp, pc}

0011e748 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
  11e748:	e92d4800 	push	{fp, lr}
  11e74c:	e28db004 	add	fp, sp, #4
  11e750:	e24dd030 	sub	sp, sp, #48	; 0x30
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
  11e754:	e3a03000 	mov	r3, #0
  11e758:	e54b300f 	strb	r3, [fp, #-15]

  ++tcp_ticks;
  11e75c:	e30e3c08 	movw	r3, #60424	; 0xec08
  11e760:	e3403056 	movt	r3, #86	; 0x56
  11e764:	e5933000 	ldr	r3, [r3]
  11e768:	e2832001 	add	r2, r3, #1
  11e76c:	e30e3c08 	movw	r3, #60424	; 0xec08
  11e770:	e3403056 	movt	r3, #86	; 0x56
  11e774:	e5832000 	str	r2, [r3]
  ++tcp_timer_ctr;
  11e778:	e30e322d 	movw	r3, #57901	; 0xe22d
  11e77c:	e3403014 	movt	r3, #20
  11e780:	e5d33000 	ldrb	r3, [r3]
  11e784:	e2833001 	add	r3, r3, #1
  11e788:	e6ef2073 	uxtb	r2, r3
  11e78c:	e30e322d 	movw	r3, #57901	; 0xe22d
  11e790:	e3403014 	movt	r3, #20
  11e794:	e5c32000 	strb	r2, [r3]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
  11e798:	e3a03000 	mov	r3, #0
  11e79c:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_active_pcbs;
  11e7a0:	e30e3c04 	movw	r3, #60420	; 0xec04
  11e7a4:	e3403056 	movt	r3, #86	; 0x56
  11e7a8:	e5933000 	ldr	r3, [r3]
  11e7ac:	e50b3008 	str	r3, [fp, #-8]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  11e7b0:	ea0001f2 	b	11ef80 <tcp_slowtmr+0x838>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
  11e7b4:	e51b3008 	ldr	r3, [fp, #-8]
  11e7b8:	e5933014 	ldr	r3, [r3, #20]
  11e7bc:	e3530000 	cmp	r3, #0
  11e7c0:	1a000006 	bne	11e7e0 <tcp_slowtmr+0x98>
  11e7c4:	e3080058 	movw	r0, #32856	; 0x8058
  11e7c8:	e3400014 	movt	r0, #20
  11e7cc:	ebff9250 	bl	103114 <rt_kprintf>
  11e7d0:	e30013eb 	movw	r1, #1003	; 0x3eb
  11e7d4:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11e7d8:	e3400014 	movt	r0, #20
  11e7dc:	ebffb243 	bl	10b0f0 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
  11e7e0:	e51b3008 	ldr	r3, [fp, #-8]
  11e7e4:	e5933014 	ldr	r3, [r3, #20]
  11e7e8:	e3530001 	cmp	r3, #1
  11e7ec:	1a000006 	bne	11e80c <tcp_slowtmr+0xc4>
  11e7f0:	e3080084 	movw	r0, #32900	; 0x8084
  11e7f4:	e3400014 	movt	r0, #20
  11e7f8:	ebff9245 	bl	103114 <rt_kprintf>
  11e7fc:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  11e800:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11e804:	e3400014 	movt	r0, #20
  11e808:	ebffb238 	bl	10b0f0 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
  11e80c:	e51b3008 	ldr	r3, [fp, #-8]
  11e810:	e5933014 	ldr	r3, [r3, #20]
  11e814:	e353000a 	cmp	r3, #10
  11e818:	1a000006 	bne	11e838 <tcp_slowtmr+0xf0>
  11e81c:	e30800b0 	movw	r0, #32944	; 0x80b0
  11e820:	e3400014 	movt	r0, #20
  11e824:	ebff923a 	bl	103114 <rt_kprintf>
  11e828:	e30013ed 	movw	r1, #1005	; 0x3ed
  11e82c:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11e830:	e3400014 	movt	r0, #20
  11e834:	ebffb22d 	bl	10b0f0 <sys_arch_assert>
    if (pcb->last_timer == tcp_timer_ctr) {
  11e838:	e51b3008 	ldr	r3, [fp, #-8]
  11e83c:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11e840:	e30e322d 	movw	r3, #57901	; 0xe22d
  11e844:	e3403014 	movt	r3, #20
  11e848:	e5d33000 	ldrb	r3, [r3]
  11e84c:	e1520003 	cmp	r2, r3
  11e850:	1a000003 	bne	11e864 <tcp_slowtmr+0x11c>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
  11e854:	e51b3008 	ldr	r3, [fp, #-8]
  11e858:	e593300c 	ldr	r3, [r3, #12]
  11e85c:	e50b3008 	str	r3, [fp, #-8]
      continue;
  11e860:	ea0001c6 	b	11ef80 <tcp_slowtmr+0x838>
    }
    pcb->last_timer = tcp_timer_ctr;
  11e864:	e30e322d 	movw	r3, #57901	; 0xe22d
  11e868:	e3403014 	movt	r3, #20
  11e86c:	e5d32000 	ldrb	r2, [r3]
  11e870:	e51b3008 	ldr	r3, [fp, #-8]
  11e874:	e5c32021 	strb	r2, [r3, #33]	; 0x21

    pcb_remove = 0;
  11e878:	e3a03000 	mov	r3, #0
  11e87c:	e54b300d 	strb	r3, [fp, #-13]
    pcb_reset = 0;
  11e880:	e3a03000 	mov	r3, #0
  11e884:	e54b300e 	strb	r3, [fp, #-14]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
  11e888:	e51b3008 	ldr	r3, [fp, #-8]
  11e88c:	e5933014 	ldr	r3, [r3, #20]
  11e890:	e3530002 	cmp	r3, #2
  11e894:	1a000007 	bne	11e8b8 <tcp_slowtmr+0x170>
  11e898:	e51b3008 	ldr	r3, [fp, #-8]
  11e89c:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e8a0:	e3530003 	cmp	r3, #3
  11e8a4:	9a000003 	bls	11e8b8 <tcp_slowtmr+0x170>
      ++pcb_remove;
  11e8a8:	e55b300d 	ldrb	r3, [fp, #-13]
  11e8ac:	e2833001 	add	r3, r3, #1
  11e8b0:	e54b300d 	strb	r3, [fp, #-13]
  11e8b4:	ea000089 	b	11eae0 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
  11e8b8:	e51b3008 	ldr	r3, [fp, #-8]
  11e8bc:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e8c0:	e353000b 	cmp	r3, #11
  11e8c4:	9a000003 	bls	11e8d8 <tcp_slowtmr+0x190>
      ++pcb_remove;
  11e8c8:	e55b300d 	ldrb	r3, [fp, #-13]
  11e8cc:	e2833001 	add	r3, r3, #1
  11e8d0:	e54b300d 	strb	r3, [fp, #-13]
  11e8d4:	ea000081 	b	11eae0 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
  11e8d8:	e51b3008 	ldr	r3, [fp, #-8]
  11e8dc:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e8e0:	e3530000 	cmp	r3, #0
  11e8e4:	0a000029 	beq	11e990 <tcp_slowtmr+0x248>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
  11e8e8:	e51b3008 	ldr	r3, [fp, #-8]
  11e8ec:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e8f0:	e2432001 	sub	r2, r3, #1
  11e8f4:	e3073ebc 	movw	r3, #32444	; 0x7ebc
  11e8f8:	e3403014 	movt	r3, #20
  11e8fc:	e7d33002 	ldrb	r3, [r3, r2]
  11e900:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
        if (pcb->persist_cnt < backoff_cnt) {
  11e904:	e51b3008 	ldr	r3, [fp, #-8]
  11e908:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e90c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11e910:	e1520003 	cmp	r2, r3
  11e914:	9a000005 	bls	11e930 <tcp_slowtmr+0x1e8>
          pcb->persist_cnt++;
  11e918:	e51b3008 	ldr	r3, [fp, #-8]
  11e91c:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e920:	e2833001 	add	r3, r3, #1
  11e924:	e6ef2073 	uxtb	r2, r3
  11e928:	e51b3008 	ldr	r3, [fp, #-8]
  11e92c:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
        }
        if (pcb->persist_cnt >= backoff_cnt) {
  11e930:	e51b3008 	ldr	r3, [fp, #-8]
  11e934:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e938:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11e93c:	e1520003 	cmp	r2, r3
  11e940:	8a000066 	bhi	11eae0 <tcp_slowtmr+0x398>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
  11e944:	e51b0008 	ldr	r0, [fp, #-8]
  11e948:	eb002180 	bl	126f50 <tcp_zero_window_probe>
  11e94c:	e1a03000 	mov	r3, r0
  11e950:	e3530000 	cmp	r3, #0
  11e954:	1a000061 	bne	11eae0 <tcp_slowtmr+0x398>
            pcb->persist_cnt = 0;
  11e958:	e51b3008 	ldr	r3, [fp, #-8]
  11e95c:	e3a02000 	mov	r2, #0
  11e960:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  11e964:	e51b3008 	ldr	r3, [fp, #-8]
  11e968:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e96c:	e3530006 	cmp	r3, #6
  11e970:	8a00005a 	bhi	11eae0 <tcp_slowtmr+0x398>
              pcb->persist_backoff++;
  11e974:	e51b3008 	ldr	r3, [fp, #-8]
  11e978:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e97c:	e2833001 	add	r3, r3, #1
  11e980:	e6ef2073 	uxtb	r2, r3
  11e984:	e51b3008 	ldr	r3, [fp, #-8]
  11e988:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  11e98c:	ea000053 	b	11eae0 <tcp_slowtmr+0x398>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
  11e990:	e51b3008 	ldr	r3, [fp, #-8]
  11e994:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11e998:	e3530000 	cmp	r3, #0
  11e99c:	ba000007 	blt	11e9c0 <tcp_slowtmr+0x278>
          ++pcb->rtime;
  11e9a0:	e51b3008 	ldr	r3, [fp, #-8]
  11e9a4:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11e9a8:	e6ff3073 	uxth	r3, r3
  11e9ac:	e2833001 	add	r3, r3, #1
  11e9b0:	e6ff3073 	uxth	r3, r3
  11e9b4:	e6bf2073 	sxth	r2, r3
  11e9b8:	e51b3008 	ldr	r3, [fp, #-8]
  11e9bc:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  11e9c0:	e51b3008 	ldr	r3, [fp, #-8]
  11e9c4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11e9c8:	e3530000 	cmp	r3, #0
  11e9cc:	0a000043 	beq	11eae0 <tcp_slowtmr+0x398>
  11e9d0:	e51b3008 	ldr	r3, [fp, #-8]
  11e9d4:	e1d323f4 	ldrsh	r2, [r3, #52]	; 0x34
  11e9d8:	e51b3008 	ldr	r3, [fp, #-8]
  11e9dc:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11e9e0:	e1520003 	cmp	r2, r3
  11e9e4:	ba00003d 	blt	11eae0 <tcp_slowtmr+0x398>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
  11e9e8:	e51b3008 	ldr	r3, [fp, #-8]
  11e9ec:	e5933014 	ldr	r3, [r3, #20]
  11e9f0:	e3530002 	cmp	r3, #2
  11e9f4:	0a000015 	beq	11ea50 <tcp_slowtmr+0x308>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
  11e9f8:	e51b3008 	ldr	r3, [fp, #-8]
  11e9fc:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11ea00:	e353000c 	cmp	r3, #12
  11ea04:	31a03003 	movcc	r3, r3
  11ea08:	23a0300c 	movcs	r3, #12
  11ea0c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
  11ea10:	e51b3008 	ldr	r3, [fp, #-8]
  11ea14:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  11ea18:	e1a031c3 	asr	r3, r3, #3
  11ea1c:	e6bf3073 	sxth	r3, r3
  11ea20:	e1a02003 	mov	r2, r3
  11ea24:	e51b3008 	ldr	r3, [fp, #-8]
  11ea28:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  11ea2c:	e0822003 	add	r2, r2, r3
  11ea30:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  11ea34:	e3073eac 	movw	r3, #32428	; 0x7eac
  11ea38:	e3403014 	movt	r3, #20
  11ea3c:	e7d33001 	ldrb	r3, [r3, r1]
  11ea40:	e1a03312 	lsl	r3, r2, r3
  11ea44:	e6bf2073 	sxth	r2, r3
  11ea48:	e51b3008 	ldr	r3, [fp, #-8]
  11ea4c:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
  11ea50:	e51b3008 	ldr	r3, [fp, #-8]
  11ea54:	e3a02000 	mov	r2, #0
  11ea58:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
  11ea5c:	e51b3008 	ldr	r3, [fp, #-8]
  11ea60:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  11ea64:	e51b3008 	ldr	r3, [fp, #-8]
  11ea68:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  11ea6c:	e1520003 	cmp	r2, r3
  11ea70:	31a03002 	movcc	r3, r2
  11ea74:	21a03003 	movcs	r3, r3
  11ea78:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
          pcb->ssthresh = eff_wnd >> 1;
  11ea7c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11ea80:	e1a030a3 	lsr	r3, r3, #1
  11ea84:	e6ff2073 	uxth	r2, r3
  11ea88:	e51b3008 	ldr	r3, [fp, #-8]
  11ea8c:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
  11ea90:	e51b3008 	ldr	r3, [fp, #-8]
  11ea94:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  11ea98:	e51b3008 	ldr	r3, [fp, #-8]
  11ea9c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11eaa0:	e1a03083 	lsl	r3, r3, #1
  11eaa4:	e6ff3073 	uxth	r3, r3
  11eaa8:	e1520003 	cmp	r2, r3
  11eaac:	2a000005 	bcs	11eac8 <tcp_slowtmr+0x380>
            pcb->ssthresh = (pcb->mss << 1);
  11eab0:	e51b3008 	ldr	r3, [fp, #-8]
  11eab4:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11eab8:	e1a03083 	lsl	r3, r3, #1
  11eabc:	e6ff2073 	uxth	r2, r3
  11eac0:	e51b3008 	ldr	r3, [fp, #-8]
  11eac4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          }
          pcb->cwnd = pcb->mss;
  11eac8:	e51b3008 	ldr	r3, [fp, #-8]
  11eacc:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11ead0:	e51b3008 	ldr	r3, [fp, #-8]
  11ead4:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
  11ead8:	e51b0008 	ldr	r0, [fp, #-8]
  11eadc:	eb002002 	bl	126aec <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
  11eae0:	e51b3008 	ldr	r3, [fp, #-8]
  11eae4:	e5933014 	ldr	r3, [r3, #20]
  11eae8:	e3530006 	cmp	r3, #6
  11eaec:	1a00000f 	bne	11eb30 <tcp_slowtmr+0x3e8>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
  11eaf0:	e51b3008 	ldr	r3, [fp, #-8]
  11eaf4:	e5d3301e 	ldrb	r3, [r3, #30]
  11eaf8:	e2033010 	and	r3, r3, #16
  11eafc:	e3530000 	cmp	r3, #0
  11eb00:	0a00000a 	beq	11eb30 <tcp_slowtmr+0x3e8>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  11eb04:	e30e3c08 	movw	r3, #60424	; 0xec08
  11eb08:	e3403056 	movt	r3, #86	; 0x56
  11eb0c:	e5932000 	ldr	r2, [r3]
  11eb10:	e51b3008 	ldr	r3, [fp, #-8]
  11eb14:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11eb18:	e0423003 	sub	r3, r2, r3
  11eb1c:	e3530028 	cmp	r3, #40	; 0x28
  11eb20:	9a000002 	bls	11eb30 <tcp_slowtmr+0x3e8>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
  11eb24:	e55b300d 	ldrb	r3, [fp, #-13]
  11eb28:	e2833001 	add	r3, r3, #1
  11eb2c:	e54b300d 	strb	r3, [fp, #-13]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11eb30:	e51b3008 	ldr	r3, [fp, #-8]
  11eb34:	e5d33008 	ldrb	r3, [r3, #8]
  11eb38:	e2033008 	and	r3, r3, #8
  11eb3c:	e3530000 	cmp	r3, #0
  11eb40:	0a000044 	beq	11ec58 <tcp_slowtmr+0x510>
       ((pcb->state == ESTABLISHED) ||
  11eb44:	e51b3008 	ldr	r3, [fp, #-8]
  11eb48:	e5933014 	ldr	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11eb4c:	e3530004 	cmp	r3, #4
  11eb50:	0a000003 	beq	11eb64 <tcp_slowtmr+0x41c>
        (pcb->state == CLOSE_WAIT))) {
  11eb54:	e51b3008 	ldr	r3, [fp, #-8]
  11eb58:	e5933014 	ldr	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
  11eb5c:	e3530007 	cmp	r3, #7
  11eb60:	1a00003c 	bne	11ec58 <tcp_slowtmr+0x510>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11eb64:	e30e3c08 	movw	r3, #60424	; 0xec08
  11eb68:	e3403056 	movt	r3, #86	; 0x56
  11eb6c:	e5932000 	ldr	r2, [r3]
  11eb70:	e51b3008 	ldr	r3, [fp, #-8]
  11eb74:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11eb78:	e0421003 	sub	r1, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  11eb7c:	e51b3008 	ldr	r3, [fp, #-8]
  11eb80:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11eb84:	e51b3008 	ldr	r3, [fp, #-8]
  11eb88:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  11eb8c:	e51b0008 	ldr	r0, [fp, #-8]
  11eb90:	e5900098 	ldr	r0, [r0, #152]	; 0x98
  11eb94:	e0030390 	mul	r3, r0, r3
  11eb98:	e0822003 	add	r2, r2, r3
  11eb9c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11eba0:	e3413062 	movt	r3, #4194	; 0x1062
  11eba4:	e0832392 	umull	r2, r3, r2, r3
  11eba8:	e1a032a3 	lsr	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11ebac:	e1510003 	cmp	r1, r3
  11ebb0:	9a000006 	bls	11ebd0 <tcp_slowtmr+0x488>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
  11ebb4:	e55b300d 	ldrb	r3, [fp, #-13]
  11ebb8:	e2833001 	add	r3, r3, #1
  11ebbc:	e54b300d 	strb	r3, [fp, #-13]
        ++pcb_reset;
  11ebc0:	e55b300e 	ldrb	r3, [fp, #-14]
  11ebc4:	e2833001 	add	r3, r3, #1
  11ebc8:	e54b300e 	strb	r3, [fp, #-14]
  11ebcc:	ea000021 	b	11ec58 <tcp_slowtmr+0x510>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11ebd0:	e30e3c08 	movw	r3, #60424	; 0xec08
  11ebd4:	e3403056 	movt	r3, #86	; 0x56
  11ebd8:	e5932000 	ldr	r2, [r3]
  11ebdc:	e51b3008 	ldr	r3, [fp, #-8]
  11ebe0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ebe4:	e0421003 	sub	r1, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
  11ebe8:	e51b3008 	ldr	r3, [fp, #-8]
  11ebec:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11ebf0:	e51b3008 	ldr	r3, [fp, #-8]
  11ebf4:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11ebf8:	e1a00003 	mov	r0, r3
  11ebfc:	e51b3008 	ldr	r3, [fp, #-8]
  11ec00:	e5933098 	ldr	r3, [r3, #152]	; 0x98
  11ec04:	e0030093 	mul	r3, r3, r0
  11ec08:	e0822003 	add	r2, r2, r3
                / TCP_SLOW_INTERVAL)
  11ec0c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11ec10:	e3413062 	movt	r3, #4194	; 0x1062
  11ec14:	e0832392 	umull	r2, r3, r2, r3
  11ec18:	e1a032a3 	lsr	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11ec1c:	e1510003 	cmp	r1, r3
  11ec20:	9a00000c 	bls	11ec58 <tcp_slowtmr+0x510>
      {
        err = tcp_keepalive(pcb);
  11ec24:	e51b0008 	ldr	r0, [fp, #-8]
  11ec28:	eb00207a 	bl	126e18 <tcp_keepalive>
  11ec2c:	e1a03000 	mov	r3, r0
  11ec30:	e54b300f 	strb	r3, [fp, #-15]
        if (err == ERR_OK) {
  11ec34:	e15b30df 	ldrsb	r3, [fp, #-15]
  11ec38:	e3530000 	cmp	r3, #0
  11ec3c:	1a000005 	bne	11ec58 <tcp_slowtmr+0x510>
          pcb->keep_cnt_sent++;
  11ec40:	e51b3008 	ldr	r3, [fp, #-8]
  11ec44:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11ec48:	e2833001 	add	r3, r3, #1
  11ec4c:	e6ef2073 	uxtb	r2, r3
  11ec50:	e51b3008 	ldr	r3, [fp, #-8]
  11ec54:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  11ec58:	e51b3008 	ldr	r3, [fp, #-8]
  11ec5c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11ec60:	e3530000 	cmp	r3, #0
  11ec64:	0a000013 	beq	11ecb8 <tcp_slowtmr+0x570>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  11ec68:	e30e3c08 	movw	r3, #60424	; 0xec08
  11ec6c:	e3403056 	movt	r3, #86	; 0x56
  11ec70:	e5932000 	ldr	r2, [r3]
  11ec74:	e51b3008 	ldr	r3, [fp, #-8]
  11ec78:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ec7c:	e0422003 	sub	r2, r2, r3
  11ec80:	e51b3008 	ldr	r3, [fp, #-8]
  11ec84:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11ec88:	e1a01003 	mov	r1, r3
  11ec8c:	e3a03006 	mov	r3, #6
  11ec90:	e0030193 	mul	r3, r3, r1
    if (pcb->ooseq != NULL &&
  11ec94:	e1520003 	cmp	r2, r3
  11ec98:	3a000006 	bcc	11ecb8 <tcp_slowtmr+0x570>
      tcp_segs_free(pcb->ooseq);
  11ec9c:	e51b3008 	ldr	r3, [fp, #-8]
  11eca0:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11eca4:	e1a00003 	mov	r0, r3
  11eca8:	eb0001e3 	bl	11f43c <tcp_segs_free>
      pcb->ooseq = NULL;
  11ecac:	e51b3008 	ldr	r3, [fp, #-8]
  11ecb0:	e3a02000 	mov	r2, #0
  11ecb4:	e5832074 	str	r2, [r3, #116]	; 0x74
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
  11ecb8:	e51b3008 	ldr	r3, [fp, #-8]
  11ecbc:	e5933014 	ldr	r3, [r3, #20]
  11ecc0:	e3530003 	cmp	r3, #3
  11ecc4:	1a00000a 	bne	11ecf4 <tcp_slowtmr+0x5ac>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11ecc8:	e30e3c08 	movw	r3, #60424	; 0xec08
  11eccc:	e3403056 	movt	r3, #86	; 0x56
  11ecd0:	e5932000 	ldr	r2, [r3]
  11ecd4:	e51b3008 	ldr	r3, [fp, #-8]
  11ecd8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ecdc:	e0423003 	sub	r3, r2, r3
  11ece0:	e3530028 	cmp	r3, #40	; 0x28
  11ece4:	9a000002 	bls	11ecf4 <tcp_slowtmr+0x5ac>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
  11ece8:	e55b300d 	ldrb	r3, [fp, #-13]
  11ecec:	e2833001 	add	r3, r3, #1
  11ecf0:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
  11ecf4:	e51b3008 	ldr	r3, [fp, #-8]
  11ecf8:	e5933014 	ldr	r3, [r3, #20]
  11ecfc:	e3530009 	cmp	r3, #9
  11ed00:	1a00000a 	bne	11ed30 <tcp_slowtmr+0x5e8>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11ed04:	e30e3c08 	movw	r3, #60424	; 0xec08
  11ed08:	e3403056 	movt	r3, #86	; 0x56
  11ed0c:	e5932000 	ldr	r2, [r3]
  11ed10:	e51b3008 	ldr	r3, [fp, #-8]
  11ed14:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ed18:	e0423003 	sub	r3, r2, r3
  11ed1c:	e35300f0 	cmp	r3, #240	; 0xf0
  11ed20:	9a000002 	bls	11ed30 <tcp_slowtmr+0x5e8>
        ++pcb_remove;
  11ed24:	e55b300d 	ldrb	r3, [fp, #-13]
  11ed28:	e2833001 	add	r3, r3, #1
  11ed2c:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11ed30:	e55b300d 	ldrb	r3, [fp, #-13]
  11ed34:	e3530000 	cmp	r3, #0
  11ed38:	0a00005d 	beq	11eeb4 <tcp_slowtmr+0x76c>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
  11ed3c:	e51b3008 	ldr	r3, [fp, #-8]
  11ed40:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11ed44:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
  11ed48:	e51b0008 	ldr	r0, [fp, #-8]
  11ed4c:	eb000411 	bl	11fd98 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
  11ed50:	e51b300c 	ldr	r3, [fp, #-12]
  11ed54:	e3530000 	cmp	r3, #0
  11ed58:	0a000011 	beq	11eda4 <tcp_slowtmr+0x65c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
  11ed5c:	e30e3c04 	movw	r3, #60420	; 0xec04
  11ed60:	e3403056 	movt	r3, #86	; 0x56
  11ed64:	e5933000 	ldr	r3, [r3]
  11ed68:	e51b2008 	ldr	r2, [fp, #-8]
  11ed6c:	e1520003 	cmp	r2, r3
  11ed70:	1a000006 	bne	11ed90 <tcp_slowtmr+0x648>
  11ed74:	e30800e0 	movw	r0, #32992	; 0x80e0
  11ed78:	e3400014 	movt	r0, #20
  11ed7c:	ebff90e4 	bl	103114 <rt_kprintf>
  11ed80:	e3001484 	movw	r1, #1156	; 0x484
  11ed84:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11ed88:	e3400014 	movt	r0, #20
  11ed8c:	ebffb0d7 	bl	10b0f0 <sys_arch_assert>
        prev->next = pcb->next;
  11ed90:	e51b3008 	ldr	r3, [fp, #-8]
  11ed94:	e593200c 	ldr	r2, [r3, #12]
  11ed98:	e51b300c 	ldr	r3, [fp, #-12]
  11ed9c:	e583200c 	str	r2, [r3, #12]
  11eda0:	ea000011 	b	11edec <tcp_slowtmr+0x6a4>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
  11eda4:	e30e3c04 	movw	r3, #60420	; 0xec04
  11eda8:	e3403056 	movt	r3, #86	; 0x56
  11edac:	e5933000 	ldr	r3, [r3]
  11edb0:	e51b2008 	ldr	r2, [fp, #-8]
  11edb4:	e1520003 	cmp	r2, r3
  11edb8:	0a000006 	beq	11edd8 <tcp_slowtmr+0x690>
  11edbc:	e308010c 	movw	r0, #33036	; 0x810c
  11edc0:	e3400014 	movt	r0, #20
  11edc4:	ebff90d2 	bl	103114 <rt_kprintf>
  11edc8:	e3001488 	movw	r1, #1160	; 0x488
  11edcc:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11edd0:	e3400014 	movt	r0, #20
  11edd4:	ebffb0c5 	bl	10b0f0 <sys_arch_assert>
        tcp_active_pcbs = pcb->next;
  11edd8:	e51b3008 	ldr	r3, [fp, #-8]
  11eddc:	e593200c 	ldr	r2, [r3, #12]
  11ede0:	e30e3c04 	movw	r3, #60420	; 0xec04
  11ede4:	e3403056 	movt	r3, #86	; 0x56
  11ede8:	e5832000 	str	r2, [r3]
      }

      if (pcb_reset) {
  11edec:	e55b300e 	ldrb	r3, [fp, #-14]
  11edf0:	e3530000 	cmp	r3, #0
  11edf4:	0a00000f 	beq	11ee38 <tcp_slowtmr+0x6f0>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11edf8:	e51b3008 	ldr	r3, [fp, #-8]
  11edfc:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11ee00:	e51b3008 	ldr	r3, [fp, #-8]
  11ee04:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11ee08:	e51bc008 	ldr	ip, [fp, #-8]
  11ee0c:	e51b3008 	ldr	r3, [fp, #-8]
  11ee10:	e283e004 	add	lr, r3, #4
  11ee14:	e51b3008 	ldr	r3, [fp, #-8]
  11ee18:	e1d331ba 	ldrh	r3, [r3, #26]
  11ee1c:	e51b2008 	ldr	r2, [fp, #-8]
  11ee20:	e1d221bc 	ldrh	r2, [r2, #28]
  11ee24:	e58d2004 	str	r2, [sp, #4]
  11ee28:	e58d3000 	str	r3, [sp]
  11ee2c:	e1a0300e 	mov	r3, lr
  11ee30:	e1a0200c 	mov	r2, ip
  11ee34:	eb001eb0 	bl	1268fc <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
  11ee38:	e51b3008 	ldr	r3, [fp, #-8]
  11ee3c:	e5933010 	ldr	r3, [r3, #16]
  11ee40:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
      last_state = pcb->state;
  11ee44:	e51b3008 	ldr	r3, [fp, #-8]
  11ee48:	e5933014 	ldr	r3, [r3, #20]
  11ee4c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
      pcb2 = pcb;
  11ee50:	e51b3008 	ldr	r3, [fp, #-8]
  11ee54:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      pcb = pcb->next;
  11ee58:	e51b3008 	ldr	r3, [fp, #-8]
  11ee5c:	e593300c 	ldr	r3, [r3, #12]
  11ee60:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11ee64:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  11ee68:	e3a00002 	mov	r0, #2
  11ee6c:	ebffe904 	bl	119284 <memp_free>

      tcp_active_pcbs_changed = 0;
  11ee70:	e30e3c00 	movw	r3, #60416	; 0xec00
  11ee74:	e3403056 	movt	r3, #86	; 0x56
  11ee78:	e3a02000 	mov	r2, #0
  11ee7c:	e5c32000 	strb	r2, [r3]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
  11ee80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11ee84:	e3530000 	cmp	r3, #0
  11ee88:	0a000003 	beq	11ee9c <tcp_slowtmr+0x754>
  11ee8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11ee90:	e3e0100c 	mvn	r1, #12
  11ee94:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11ee98:	e12fff33 	blx	r3
      if (tcp_active_pcbs_changed) {
  11ee9c:	e30e3c00 	movw	r3, #60416	; 0xec00
  11eea0:	e3403056 	movt	r3, #86	; 0x56
  11eea4:	e5d33000 	ldrb	r3, [r3]
  11eea8:	e3530000 	cmp	r3, #0
  11eeac:	0a000033 	beq	11ef80 <tcp_slowtmr+0x838>
        goto tcp_slowtmr_start;
  11eeb0:	eafffe38 	b	11e798 <tcp_slowtmr+0x50>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
  11eeb4:	e51b3008 	ldr	r3, [fp, #-8]
  11eeb8:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11eebc:	e51b3008 	ldr	r3, [fp, #-8]
  11eec0:	e593300c 	ldr	r3, [r3, #12]
  11eec4:	e50b3008 	str	r3, [fp, #-8]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
  11eec8:	e51b300c 	ldr	r3, [fp, #-12]
  11eecc:	e5d3301f 	ldrb	r3, [r3, #31]
  11eed0:	e2833001 	add	r3, r3, #1
  11eed4:	e6ef2073 	uxtb	r2, r3
  11eed8:	e51b300c 	ldr	r3, [fp, #-12]
  11eedc:	e5c3201f 	strb	r2, [r3, #31]
      if (prev->polltmr >= prev->pollinterval) {
  11eee0:	e51b300c 	ldr	r3, [fp, #-12]
  11eee4:	e5d3201f 	ldrb	r2, [r3, #31]
  11eee8:	e51b300c 	ldr	r3, [fp, #-12]
  11eeec:	e5d33020 	ldrb	r3, [r3, #32]
  11eef0:	e1520003 	cmp	r2, r3
  11eef4:	3a000021 	bcc	11ef80 <tcp_slowtmr+0x838>
        prev->polltmr = 0;
  11eef8:	e51b300c 	ldr	r3, [fp, #-12]
  11eefc:	e3a02000 	mov	r2, #0
  11ef00:	e5c3201f 	strb	r2, [r3, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
  11ef04:	e30e3c00 	movw	r3, #60416	; 0xec00
  11ef08:	e3403056 	movt	r3, #86	; 0x56
  11ef0c:	e3a02000 	mov	r2, #0
  11ef10:	e5c32000 	strb	r2, [r3]
        TCP_EVENT_POLL(prev, err);
  11ef14:	e51b300c 	ldr	r3, [fp, #-12]
  11ef18:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11ef1c:	e3530000 	cmp	r3, #0
  11ef20:	0a000009 	beq	11ef4c <tcp_slowtmr+0x804>
  11ef24:	e51b300c 	ldr	r3, [fp, #-12]
  11ef28:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11ef2c:	e51b200c 	ldr	r2, [fp, #-12]
  11ef30:	e5922010 	ldr	r2, [r2, #16]
  11ef34:	e51b100c 	ldr	r1, [fp, #-12]
  11ef38:	e1a00002 	mov	r0, r2
  11ef3c:	e12fff33 	blx	r3
  11ef40:	e1a03000 	mov	r3, r0
  11ef44:	e54b300f 	strb	r3, [fp, #-15]
  11ef48:	ea000001 	b	11ef54 <tcp_slowtmr+0x80c>
  11ef4c:	e3a03000 	mov	r3, #0
  11ef50:	e54b300f 	strb	r3, [fp, #-15]
        if (tcp_active_pcbs_changed) {
  11ef54:	e30e3c00 	movw	r3, #60416	; 0xec00
  11ef58:	e3403056 	movt	r3, #86	; 0x56
  11ef5c:	e5d33000 	ldrb	r3, [r3]
  11ef60:	e3530000 	cmp	r3, #0
  11ef64:	0a000000 	beq	11ef6c <tcp_slowtmr+0x824>
          goto tcp_slowtmr_start;
  11ef68:	eafffe0a 	b	11e798 <tcp_slowtmr+0x50>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
  11ef6c:	e15b30df 	ldrsb	r3, [fp, #-15]
  11ef70:	e3530000 	cmp	r3, #0
  11ef74:	1a000001 	bne	11ef80 <tcp_slowtmr+0x838>
          tcp_output(prev);
  11ef78:	e51b000c 	ldr	r0, [fp, #-12]
  11ef7c:	eb001bf8 	bl	125f64 <tcp_output>
  while (pcb != NULL) {
  11ef80:	e51b3008 	ldr	r3, [fp, #-8]
  11ef84:	e3530000 	cmp	r3, #0
  11ef88:	1afffe09 	bne	11e7b4 <tcp_slowtmr+0x6c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  11ef8c:	e3a03000 	mov	r3, #0
  11ef90:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_tw_pcbs;
  11ef94:	e30e3c14 	movw	r3, #60436	; 0xec14
  11ef98:	e3403056 	movt	r3, #86	; 0x56
  11ef9c:	e5933000 	ldr	r3, [r3]
  11efa0:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11efa4:	ea000051 	b	11f0f0 <tcp_slowtmr+0x9a8>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  11efa8:	e51b3008 	ldr	r3, [fp, #-8]
  11efac:	e5933014 	ldr	r3, [r3, #20]
  11efb0:	e353000a 	cmp	r3, #10
  11efb4:	0a000006 	beq	11efd4 <tcp_slowtmr+0x88c>
  11efb8:	e3080138 	movw	r0, #33080	; 0x8138
  11efbc:	e3400014 	movt	r0, #20
  11efc0:	ebff9053 	bl	103114 <rt_kprintf>
  11efc4:	e30014b8 	movw	r1, #1208	; 0x4b8
  11efc8:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11efcc:	e3400014 	movt	r0, #20
  11efd0:	ebffb046 	bl	10b0f0 <sys_arch_assert>
    pcb_remove = 0;
  11efd4:	e3a03000 	mov	r3, #0
  11efd8:	e54b300d 	strb	r3, [fp, #-13]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11efdc:	e30e3c08 	movw	r3, #60424	; 0xec08
  11efe0:	e3403056 	movt	r3, #86	; 0x56
  11efe4:	e5932000 	ldr	r2, [r3]
  11efe8:	e51b3008 	ldr	r3, [fp, #-8]
  11efec:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11eff0:	e0423003 	sub	r3, r2, r3
  11eff4:	e35300f0 	cmp	r3, #240	; 0xf0
  11eff8:	9a000002 	bls	11f008 <tcp_slowtmr+0x8c0>
      ++pcb_remove;
  11effc:	e55b300d 	ldrb	r3, [fp, #-13]
  11f000:	e2833001 	add	r3, r3, #1
  11f004:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11f008:	e55b300d 	ldrb	r3, [fp, #-13]
  11f00c:	e3530000 	cmp	r3, #0
  11f010:	0a000031 	beq	11f0dc <tcp_slowtmr+0x994>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
  11f014:	e51b0008 	ldr	r0, [fp, #-8]
  11f018:	eb00035e 	bl	11fd98 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
  11f01c:	e51b300c 	ldr	r3, [fp, #-12]
  11f020:	e3530000 	cmp	r3, #0
  11f024:	0a000011 	beq	11f070 <tcp_slowtmr+0x928>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
  11f028:	e30e3c14 	movw	r3, #60436	; 0xec14
  11f02c:	e3403056 	movt	r3, #86	; 0x56
  11f030:	e5933000 	ldr	r3, [r3]
  11f034:	e51b2008 	ldr	r2, [fp, #-8]
  11f038:	e1520003 	cmp	r2, r3
  11f03c:	1a000006 	bne	11f05c <tcp_slowtmr+0x914>
  11f040:	e3080168 	movw	r0, #33128	; 0x8168
  11f044:	e3400014 	movt	r0, #20
  11f048:	ebff9031 	bl	103114 <rt_kprintf>
  11f04c:	e30014c6 	movw	r1, #1222	; 0x4c6
  11f050:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11f054:	e3400014 	movt	r0, #20
  11f058:	ebffb024 	bl	10b0f0 <sys_arch_assert>
        prev->next = pcb->next;
  11f05c:	e51b3008 	ldr	r3, [fp, #-8]
  11f060:	e593200c 	ldr	r2, [r3, #12]
  11f064:	e51b300c 	ldr	r3, [fp, #-12]
  11f068:	e583200c 	str	r2, [r3, #12]
  11f06c:	ea000011 	b	11f0b8 <tcp_slowtmr+0x970>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
  11f070:	e30e3c14 	movw	r3, #60436	; 0xec14
  11f074:	e3403056 	movt	r3, #86	; 0x56
  11f078:	e5933000 	ldr	r3, [r3]
  11f07c:	e51b2008 	ldr	r2, [fp, #-8]
  11f080:	e1520003 	cmp	r2, r3
  11f084:	0a000006 	beq	11f0a4 <tcp_slowtmr+0x95c>
  11f088:	e3080190 	movw	r0, #33168	; 0x8190
  11f08c:	e3400014 	movt	r0, #20
  11f090:	ebff901f 	bl	103114 <rt_kprintf>
  11f094:	e30014ca 	movw	r1, #1226	; 0x4ca
  11f098:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11f09c:	e3400014 	movt	r0, #20
  11f0a0:	ebffb012 	bl	10b0f0 <sys_arch_assert>
        tcp_tw_pcbs = pcb->next;
  11f0a4:	e51b3008 	ldr	r3, [fp, #-8]
  11f0a8:	e593200c 	ldr	r2, [r3, #12]
  11f0ac:	e30e3c14 	movw	r3, #60436	; 0xec14
  11f0b0:	e3403056 	movt	r3, #86	; 0x56
  11f0b4:	e5832000 	str	r2, [r3]
      }
      pcb2 = pcb;
  11f0b8:	e51b3008 	ldr	r3, [fp, #-8]
  11f0bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      pcb = pcb->next;
  11f0c0:	e51b3008 	ldr	r3, [fp, #-8]
  11f0c4:	e593300c 	ldr	r3, [r3, #12]
  11f0c8:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11f0cc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11f0d0:	e3a00002 	mov	r0, #2
  11f0d4:	ebffe86a 	bl	119284 <memp_free>
  11f0d8:	ea000004 	b	11f0f0 <tcp_slowtmr+0x9a8>
    } else {
      prev = pcb;
  11f0dc:	e51b3008 	ldr	r3, [fp, #-8]
  11f0e0:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11f0e4:	e51b3008 	ldr	r3, [fp, #-8]
  11f0e8:	e593300c 	ldr	r3, [r3, #12]
  11f0ec:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11f0f0:	e51b3008 	ldr	r3, [fp, #-8]
  11f0f4:	e3530000 	cmp	r3, #0
  11f0f8:	1affffaa 	bne	11efa8 <tcp_slowtmr+0x860>
    }
  }
}
  11f0fc:	e320f000 	nop	{0}
  11f100:	e24bd004 	sub	sp, fp, #4
  11f104:	e8bd8800 	pop	{fp, pc}

0011f108 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  11f108:	e92d4800 	push	{fp, lr}
  11f10c:	e28db004 	add	fp, sp, #4
  11f110:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
  11f114:	e30e322d 	movw	r3, #57901	; 0xe22d
  11f118:	e3403014 	movt	r3, #20
  11f11c:	e5d33000 	ldrb	r3, [r3]
  11f120:	e2833001 	add	r3, r3, #1
  11f124:	e6ef2073 	uxtb	r2, r3
  11f128:	e30e322d 	movw	r3, #57901	; 0xe22d
  11f12c:	e3403014 	movt	r3, #20
  11f130:	e5c32000 	strb	r2, [r3]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
  11f134:	e30e3c04 	movw	r3, #60420	; 0xec04
  11f138:	e3403056 	movt	r3, #86	; 0x56
  11f13c:	e5933000 	ldr	r3, [r3]
  11f140:	e50b3008 	str	r3, [fp, #-8]

  while (pcb != NULL) {
  11f144:	ea000044 	b	11f25c <tcp_fasttmr+0x154>
    if (pcb->last_timer != tcp_timer_ctr) {
  11f148:	e51b3008 	ldr	r3, [fp, #-8]
  11f14c:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11f150:	e30e322d 	movw	r3, #57901	; 0xe22d
  11f154:	e3403014 	movt	r3, #20
  11f158:	e5d33000 	ldrb	r3, [r3]
  11f15c:	e1520003 	cmp	r2, r3
  11f160:	0a00003a 	beq	11f250 <tcp_fasttmr+0x148>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
  11f164:	e30e322d 	movw	r3, #57901	; 0xe22d
  11f168:	e3403014 	movt	r3, #20
  11f16c:	e5d32000 	ldrb	r2, [r3]
  11f170:	e51b3008 	ldr	r3, [fp, #-8]
  11f174:	e5c32021 	strb	r2, [r3, #33]	; 0x21
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
  11f178:	e51b3008 	ldr	r3, [fp, #-8]
  11f17c:	e5d3301e 	ldrb	r3, [r3, #30]
  11f180:	e2033001 	and	r3, r3, #1
  11f184:	e3530000 	cmp	r3, #0
  11f188:	0a00000d 	beq	11f1c4 <tcp_fasttmr+0xbc>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
  11f18c:	e51b3008 	ldr	r3, [fp, #-8]
  11f190:	e5d3301e 	ldrb	r3, [r3, #30]
  11f194:	e3833002 	orr	r3, r3, #2
  11f198:	e6ef2073 	uxtb	r2, r3
  11f19c:	e51b3008 	ldr	r3, [fp, #-8]
  11f1a0:	e5c3201e 	strb	r2, [r3, #30]
        tcp_output(pcb);
  11f1a4:	e51b0008 	ldr	r0, [fp, #-8]
  11f1a8:	eb001b6d 	bl	125f64 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  11f1ac:	e51b3008 	ldr	r3, [fp, #-8]
  11f1b0:	e5d3301e 	ldrb	r3, [r3, #30]
  11f1b4:	e3c33003 	bic	r3, r3, #3
  11f1b8:	e6ef2073 	uxtb	r2, r3
  11f1bc:	e51b3008 	ldr	r3, [fp, #-8]
  11f1c0:	e5c3201e 	strb	r2, [r3, #30]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
  11f1c4:	e51b3008 	ldr	r3, [fp, #-8]
  11f1c8:	e5d3301e 	ldrb	r3, [r3, #30]
  11f1cc:	e2033008 	and	r3, r3, #8
  11f1d0:	e3530000 	cmp	r3, #0
  11f1d4:	0a000007 	beq	11f1f8 <tcp_fasttmr+0xf0>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
  11f1d8:	e51b3008 	ldr	r3, [fp, #-8]
  11f1dc:	e5d3301e 	ldrb	r3, [r3, #30]
  11f1e0:	e3c33008 	bic	r3, r3, #8
  11f1e4:	e6ef2073 	uxtb	r2, r3
  11f1e8:	e51b3008 	ldr	r3, [fp, #-8]
  11f1ec:	e5c3201e 	strb	r2, [r3, #30]
        tcp_close_shutdown_fin(pcb);
  11f1f0:	e51b0008 	ldr	r0, [fp, #-8]
  11f1f4:	ebfff8b0 	bl	11d4bc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
  11f1f8:	e51b3008 	ldr	r3, [fp, #-8]
  11f1fc:	e593300c 	ldr	r3, [r3, #12]
  11f200:	e50b300c 	str	r3, [fp, #-12]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
  11f204:	e51b3008 	ldr	r3, [fp, #-8]
  11f208:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11f20c:	e3530000 	cmp	r3, #0
  11f210:	0a00000b 	beq	11f244 <tcp_fasttmr+0x13c>
        tcp_active_pcbs_changed = 0;
  11f214:	e30e3c00 	movw	r3, #60416	; 0xec00
  11f218:	e3403056 	movt	r3, #86	; 0x56
  11f21c:	e3a02000 	mov	r2, #0
  11f220:	e5c32000 	strb	r2, [r3]
        tcp_process_refused_data(pcb);
  11f224:	e51b0008 	ldr	r0, [fp, #-8]
  11f228:	eb000029 	bl	11f2d4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
  11f22c:	e30e3c00 	movw	r3, #60416	; 0xec00
  11f230:	e3403056 	movt	r3, #86	; 0x56
  11f234:	e5d33000 	ldrb	r3, [r3]
  11f238:	e3530000 	cmp	r3, #0
  11f23c:	0a000000 	beq	11f244 <tcp_fasttmr+0x13c>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
  11f240:	eaffffbb 	b	11f134 <tcp_fasttmr+0x2c>
        }
      }
      pcb = next;
  11f244:	e51b300c 	ldr	r3, [fp, #-12]
  11f248:	e50b3008 	str	r3, [fp, #-8]
  11f24c:	ea000002 	b	11f25c <tcp_fasttmr+0x154>
    } else {
      pcb = pcb->next;
  11f250:	e51b3008 	ldr	r3, [fp, #-8]
  11f254:	e593300c 	ldr	r3, [r3, #12]
  11f258:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11f25c:	e51b3008 	ldr	r3, [fp, #-8]
  11f260:	e3530000 	cmp	r3, #0
  11f264:	1affffb7 	bne	11f148 <tcp_fasttmr+0x40>
    }
  }
}
  11f268:	e320f000 	nop	{0}
  11f26c:	e24bd004 	sub	sp, fp, #4
  11f270:	e8bd8800 	pop	{fp, pc}

0011f274 <tcp_txnow>:

/** Call tcp_output for all active pcbs that have TF_NAGLEMEMERR set */
void
tcp_txnow(void)
{
  11f274:	e92d4800 	push	{fp, lr}
  11f278:	e28db004 	add	fp, sp, #4
  11f27c:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f280:	e30e3c04 	movw	r3, #60420	; 0xec04
  11f284:	e3403056 	movt	r3, #86	; 0x56
  11f288:	e5933000 	ldr	r3, [r3]
  11f28c:	e50b3008 	str	r3, [fp, #-8]
  11f290:	ea000009 	b	11f2bc <tcp_txnow+0x48>
    if (pcb->flags & TF_NAGLEMEMERR) {
  11f294:	e51b3008 	ldr	r3, [fp, #-8]
  11f298:	e5d3301e 	ldrb	r3, [r3, #30]
  11f29c:	e6af3073 	sxtb	r3, r3
  11f2a0:	e3530000 	cmp	r3, #0
  11f2a4:	aa000001 	bge	11f2b0 <tcp_txnow+0x3c>
      tcp_output(pcb);
  11f2a8:	e51b0008 	ldr	r0, [fp, #-8]
  11f2ac:	eb001b2c 	bl	125f64 <tcp_output>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f2b0:	e51b3008 	ldr	r3, [fp, #-8]
  11f2b4:	e593300c 	ldr	r3, [r3, #12]
  11f2b8:	e50b3008 	str	r3, [fp, #-8]
  11f2bc:	e51b3008 	ldr	r3, [fp, #-8]
  11f2c0:	e3530000 	cmp	r3, #0
  11f2c4:	1afffff2 	bne	11f294 <tcp_txnow+0x20>
    }
  }
}
  11f2c8:	e320f000 	nop	{0}
  11f2cc:	e24bd004 	sub	sp, fp, #4
  11f2d0:	e8bd8800 	pop	{fp, pc}

0011f2d4 <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
  11f2d4:	e92d4810 	push	{r4, fp, lr}
  11f2d8:	e28db008 	add	fp, sp, #8
  11f2dc:	e24dd014 	sub	sp, sp, #20
  11f2e0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
  11f2e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f2e8:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11f2ec:	e5d3300d 	ldrb	r3, [r3, #13]
  11f2f0:	e54b300e 	strb	r3, [fp, #-14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
  11f2f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f2f8:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11f2fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
  11f300:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f304:	e3a02000 	mov	r2, #0
  11f308:	e5832078 	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  11f30c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f310:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11f314:	e3530000 	cmp	r3, #0
  11f318:	0a00000a 	beq	11f348 <tcp_process_refused_data+0x74>
  11f31c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f320:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11f324:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f328:	e5930010 	ldr	r0, [r3, #16]
  11f32c:	e3a03000 	mov	r3, #0
  11f330:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f334:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f338:	e12fff34 	blx	r4
  11f33c:	e1a03000 	mov	r3, r0
  11f340:	e54b300d 	strb	r3, [fp, #-13]
  11f344:	ea000006 	b	11f364 <tcp_process_refused_data+0x90>
  11f348:	e3a03000 	mov	r3, #0
  11f34c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f350:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f354:	e3a00000 	mov	r0, #0
  11f358:	eb000086 	bl	11f578 <tcp_recv_null>
  11f35c:	e1a03000 	mov	r3, r0
  11f360:	e54b300d 	strb	r3, [fp, #-13]
    if (err == ERR_OK) {
  11f364:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f368:	e3530000 	cmp	r3, #0
  11f36c:	1a000024 	bne	11f404 <tcp_process_refused_data+0x130>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
  11f370:	e55b300e 	ldrb	r3, [fp, #-14]
  11f374:	e2033020 	and	r3, r3, #32
  11f378:	e3530000 	cmp	r3, #0
  11f37c:	0a00002a 	beq	11f42c <tcp_process_refused_data+0x158>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  11f380:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f384:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11f388:	e30f2fff 	movw	r2, #65535	; 0xffff
  11f38c:	e1530002 	cmp	r3, r2
  11f390:	0a000005 	beq	11f3ac <tcp_process_refused_data+0xd8>
          pcb->rcv_wnd++;
  11f394:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f398:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11f39c:	e2833001 	add	r3, r3, #1
  11f3a0:	e6ff2073 	uxth	r2, r3
  11f3a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f3a8:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
        }
        TCP_EVENT_CLOSED(pcb, err);
  11f3ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f3b0:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11f3b4:	e3530000 	cmp	r3, #0
  11f3b8:	0a00000a 	beq	11f3e8 <tcp_process_refused_data+0x114>
  11f3bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f3c0:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11f3c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f3c8:	e5930010 	ldr	r0, [r3, #16]
  11f3cc:	e3a03000 	mov	r3, #0
  11f3d0:	e3a02000 	mov	r2, #0
  11f3d4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f3d8:	e12fff34 	blx	r4
  11f3dc:	e1a03000 	mov	r3, r0
  11f3e0:	e54b300d 	strb	r3, [fp, #-13]
  11f3e4:	ea000001 	b	11f3f0 <tcp_process_refused_data+0x11c>
  11f3e8:	e3a03000 	mov	r3, #0
  11f3ec:	e54b300d 	strb	r3, [fp, #-13]
        if (err == ERR_ABRT) {
  11f3f0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f3f4:	e373000d 	cmn	r3, #13
  11f3f8:	1a00000b 	bne	11f42c <tcp_process_refused_data+0x158>
          return ERR_ABRT;
  11f3fc:	e3e0300c 	mvn	r3, #12
  11f400:	ea00000a 	b	11f430 <tcp_process_refused_data+0x15c>
        }
      }
    } else if (err == ERR_ABRT) {
  11f404:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f408:	e373000d 	cmn	r3, #13
  11f40c:	1a000001 	bne	11f418 <tcp_process_refused_data+0x144>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
  11f410:	e3e0300c 	mvn	r3, #12
  11f414:	ea000005 	b	11f430 <tcp_process_refused_data+0x15c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
  11f418:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f41c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f420:	e5832078 	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
  11f424:	e3e03004 	mvn	r3, #4
  11f428:	ea000000 	b	11f430 <tcp_process_refused_data+0x15c>
    }
  }
  return ERR_OK;
  11f42c:	e3a03000 	mov	r3, #0
}
  11f430:	e1a00003 	mov	r0, r3
  11f434:	e24bd008 	sub	sp, fp, #8
  11f438:	e8bd8810 	pop	{r4, fp, pc}

0011f43c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  11f43c:	e92d4800 	push	{fp, lr}
  11f440:	e28db004 	add	fp, sp, #4
  11f444:	e24dd010 	sub	sp, sp, #16
  11f448:	e50b0010 	str	r0, [fp, #-16]
  while (seg != NULL) {
  11f44c:	ea000006 	b	11f46c <tcp_segs_free+0x30>
    struct tcp_seg *next = seg->next;
  11f450:	e51b3010 	ldr	r3, [fp, #-16]
  11f454:	e5933000 	ldr	r3, [r3]
  11f458:	e50b3008 	str	r3, [fp, #-8]
    tcp_seg_free(seg);
  11f45c:	e51b0010 	ldr	r0, [fp, #-16]
  11f460:	eb000007 	bl	11f484 <tcp_seg_free>
    seg = next;
  11f464:	e51b3008 	ldr	r3, [fp, #-8]
  11f468:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL) {
  11f46c:	e51b3010 	ldr	r3, [fp, #-16]
  11f470:	e3530000 	cmp	r3, #0
  11f474:	1afffff5 	bne	11f450 <tcp_segs_free+0x14>
  }
}
  11f478:	e320f000 	nop	{0}
  11f47c:	e24bd004 	sub	sp, fp, #4
  11f480:	e8bd8800 	pop	{fp, pc}

0011f484 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  11f484:	e92d4800 	push	{fp, lr}
  11f488:	e28db004 	add	fp, sp, #4
  11f48c:	e24dd008 	sub	sp, sp, #8
  11f490:	e50b0008 	str	r0, [fp, #-8]
  if (seg != NULL) {
  11f494:	e51b3008 	ldr	r3, [fp, #-8]
  11f498:	e3530000 	cmp	r3, #0
  11f49c:	0a00000a 	beq	11f4cc <tcp_seg_free+0x48>
    if (seg->p != NULL) {
  11f4a0:	e51b3008 	ldr	r3, [fp, #-8]
  11f4a4:	e5933004 	ldr	r3, [r3, #4]
  11f4a8:	e3530000 	cmp	r3, #0
  11f4ac:	0a000003 	beq	11f4c0 <tcp_seg_free+0x3c>
      pbuf_free(seg->p);
  11f4b0:	e51b3008 	ldr	r3, [fp, #-8]
  11f4b4:	e5933004 	ldr	r3, [r3, #4]
  11f4b8:	e1a00003 	mov	r0, r3
  11f4bc:	ebffee7e 	bl	11aebc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  11f4c0:	e51b1008 	ldr	r1, [fp, #-8]
  11f4c4:	e3a00004 	mov	r0, #4
  11f4c8:	ebffe76d 	bl	119284 <memp_free>
  }
}
  11f4cc:	e320f000 	nop	{0}
  11f4d0:	e24bd004 	sub	sp, fp, #4
  11f4d4:	e8bd8800 	pop	{fp, pc}

0011f4d8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  11f4d8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11f4dc:	e28db000 	add	fp, sp, #0
  11f4e0:	e24dd00c 	sub	sp, sp, #12
  11f4e4:	e50b0008 	str	r0, [fp, #-8]
  11f4e8:	e1a03001 	mov	r3, r1
  11f4ec:	e54b3009 	strb	r3, [fp, #-9]
  pcb->prio = prio;
  11f4f0:	e51b3008 	ldr	r3, [fp, #-8]
  11f4f4:	e55b2009 	ldrb	r2, [fp, #-9]
  11f4f8:	e5c32018 	strb	r2, [r3, #24]
}
  11f4fc:	e320f000 	nop	{0}
  11f500:	e28bd000 	add	sp, fp, #0
  11f504:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11f508:	e12fff1e 	bx	lr

0011f50c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  11f50c:	e92d4800 	push	{fp, lr}
  11f510:	e28db004 	add	fp, sp, #4
  11f514:	e24dd010 	sub	sp, sp, #16
  11f518:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  11f51c:	e300258f 	movw	r2, #1423	; 0x58f
  11f520:	e3071ee0 	movw	r1, #32480	; 0x7ee0
  11f524:	e3401014 	movt	r1, #20
  11f528:	e3a00004 	mov	r0, #4
  11f52c:	ebffe6ec 	bl	1190e4 <memp_malloc_fn>
  11f530:	e50b0008 	str	r0, [fp, #-8]
  if (cseg == NULL) {
  11f534:	e51b3008 	ldr	r3, [fp, #-8]
  11f538:	e3530000 	cmp	r3, #0
  11f53c:	1a000001 	bne	11f548 <tcp_seg_copy+0x3c>
    return NULL;
  11f540:	e3a03000 	mov	r3, #0
  11f544:	ea000008 	b	11f56c <tcp_seg_copy+0x60>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
  11f548:	e3a02010 	mov	r2, #16
  11f54c:	e51b1010 	ldr	r1, [fp, #-16]
  11f550:	e51b0008 	ldr	r0, [fp, #-8]
  11f554:	eb008610 	bl	140d9c <memcpy>
  pbuf_ref(cseg->p);
  11f558:	e51b3008 	ldr	r3, [fp, #-8]
  11f55c:	e5933004 	ldr	r3, [r3, #4]
  11f560:	e1a00003 	mov	r0, r3
  11f564:	ebffeeee 	bl	11b124 <pbuf_ref>
  return cseg;
  11f568:	e51b3008 	ldr	r3, [fp, #-8]
}
  11f56c:	e1a00003 	mov	r0, r3
  11f570:	e24bd004 	sub	sp, fp, #4
  11f574:	e8bd8800 	pop	{fp, pc}

0011f578 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  11f578:	e92d4800 	push	{fp, lr}
  11f57c:	e28db004 	add	fp, sp, #4
  11f580:	e24dd010 	sub	sp, sp, #16
  11f584:	e50b0008 	str	r0, [fp, #-8]
  11f588:	e50b100c 	str	r1, [fp, #-12]
  11f58c:	e50b2010 	str	r2, [fp, #-16]
  11f590:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
  11f594:	e51b3010 	ldr	r3, [fp, #-16]
  11f598:	e3530000 	cmp	r3, #0
  11f59c:	0a000007 	beq	11f5c0 <tcp_recv_null+0x48>
    tcp_recved(pcb, p->tot_len);
  11f5a0:	e51b3010 	ldr	r3, [fp, #-16]
  11f5a4:	e1d330b8 	ldrh	r3, [r3, #8]
  11f5a8:	e1a01003 	mov	r1, r3
  11f5ac:	e51b000c 	ldr	r0, [fp, #-12]
  11f5b0:	ebfffacd 	bl	11e0ec <tcp_recved>
    pbuf_free(p);
  11f5b4:	e51b0010 	ldr	r0, [fp, #-16]
  11f5b8:	ebffee3f 	bl	11aebc <pbuf_free>
  11f5bc:	ea000006 	b	11f5dc <tcp_recv_null+0x64>
  } else if (err == ERR_OK) {
  11f5c0:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11f5c4:	e3530000 	cmp	r3, #0
  11f5c8:	1a000003 	bne	11f5dc <tcp_recv_null+0x64>
    return tcp_close(pcb);
  11f5cc:	e51b000c 	ldr	r0, [fp, #-12]
  11f5d0:	ebfff81f 	bl	11d654 <tcp_close>
  11f5d4:	e1a03000 	mov	r3, r0
  11f5d8:	ea000000 	b	11f5e0 <tcp_recv_null+0x68>
  }
  return ERR_OK;
  11f5dc:	e3a03000 	mov	r3, #0
}
  11f5e0:	e1a00003 	mov	r0, r3
  11f5e4:	e24bd004 	sub	sp, fp, #4
  11f5e8:	e8bd8800 	pop	{fp, pc}

0011f5ec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
  11f5ec:	e92d4800 	push	{fp, lr}
  11f5f0:	e28db004 	add	fp, sp, #4
  11f5f4:	e24dd018 	sub	sp, sp, #24
  11f5f8:	e1a03000 	mov	r3, r0
  11f5fc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
  11f600:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  11f604:	e3530000 	cmp	r3, #0
  11f608:	ba000001 	blt	11f614 <tcp_kill_prio+0x28>
  11f60c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11f610:	ea000000 	b	11f618 <tcp_kill_prio+0x2c>
  11f614:	e3a0307f 	mov	r3, #127	; 0x7f
  11f618:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  11f61c:	e3a03000 	mov	r3, #0
  11f620:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f624:	e3a03000 	mov	r3, #0
  11f628:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f62c:	e30e3c04 	movw	r3, #60420	; 0xec04
  11f630:	e3403056 	movt	r3, #86	; 0x56
  11f634:	e5933000 	ldr	r3, [r3]
  11f638:	e50b3008 	str	r3, [fp, #-8]
  11f63c:	ea00001c 	b	11f6b4 <tcp_kill_prio+0xc8>
    if (pcb->prio <= mprio &&
  11f640:	e51b3008 	ldr	r3, [fp, #-8]
  11f644:	e5d33018 	ldrb	r3, [r3, #24]
  11f648:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  11f64c:	e1520003 	cmp	r2, r3
  11f650:	3a000014 	bcc	11f6a8 <tcp_kill_prio+0xbc>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f654:	e30e3c08 	movw	r3, #60424	; 0xec08
  11f658:	e3403056 	movt	r3, #86	; 0x56
  11f65c:	e5932000 	ldr	r2, [r3]
  11f660:	e51b3008 	ldr	r3, [fp, #-8]
  11f664:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f668:	e0423003 	sub	r3, r2, r3
    if (pcb->prio <= mprio &&
  11f66c:	e51b2010 	ldr	r2, [fp, #-16]
  11f670:	e1520003 	cmp	r2, r3
  11f674:	8a00000b 	bhi	11f6a8 <tcp_kill_prio+0xbc>
      inactivity = tcp_ticks - pcb->tmr;
  11f678:	e30e3c08 	movw	r3, #60424	; 0xec08
  11f67c:	e3403056 	movt	r3, #86	; 0x56
  11f680:	e5932000 	ldr	r2, [r3]
  11f684:	e51b3008 	ldr	r3, [fp, #-8]
  11f688:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f68c:	e0423003 	sub	r3, r2, r3
  11f690:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11f694:	e51b3008 	ldr	r3, [fp, #-8]
  11f698:	e50b300c 	str	r3, [fp, #-12]
      mprio = pcb->prio;
  11f69c:	e51b3008 	ldr	r3, [fp, #-8]
  11f6a0:	e5d33018 	ldrb	r3, [r3, #24]
  11f6a4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f6a8:	e51b3008 	ldr	r3, [fp, #-8]
  11f6ac:	e593300c 	ldr	r3, [r3, #12]
  11f6b0:	e50b3008 	str	r3, [fp, #-8]
  11f6b4:	e51b3008 	ldr	r3, [fp, #-8]
  11f6b8:	e3530000 	cmp	r3, #0
  11f6bc:	1affffdf 	bne	11f640 <tcp_kill_prio+0x54>
    }
  }
  if (inactive != NULL) {
  11f6c0:	e51b300c 	ldr	r3, [fp, #-12]
  11f6c4:	e3530000 	cmp	r3, #0
  11f6c8:	0a000001 	beq	11f6d4 <tcp_kill_prio+0xe8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11f6cc:	e51b000c 	ldr	r0, [fp, #-12]
  11f6d0:	ebfff8d3 	bl	11da24 <tcp_abort>
  }
}
  11f6d4:	e320f000 	nop	{0}
  11f6d8:	e24bd004 	sub	sp, fp, #4
  11f6dc:	e8bd8800 	pop	{fp, pc}

0011f6e0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
  11f6e0:	e92d4800 	push	{fp, lr}
  11f6e4:	e28db004 	add	fp, sp, #4
  11f6e8:	e24dd018 	sub	sp, sp, #24
  11f6ec:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
  11f6f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f6f4:	e3530008 	cmp	r3, #8
  11f6f8:	0a000009 	beq	11f724 <tcp_kill_state+0x44>
  11f6fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f700:	e3530009 	cmp	r3, #9
  11f704:	0a000006 	beq	11f724 <tcp_kill_state+0x44>
  11f708:	e30801b8 	movw	r0, #33208	; 0x81b8
  11f70c:	e3400014 	movt	r0, #20
  11f710:	ebff8e7f 	bl	103114 <rt_kprintf>
  11f714:	e30015d7 	movw	r1, #1495	; 0x5d7
  11f718:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11f71c:	e3400014 	movt	r0, #20
  11f720:	ebffae72 	bl	10b0f0 <sys_arch_assert>

  inactivity = 0;
  11f724:	e3a03000 	mov	r3, #0
  11f728:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f72c:	e3a03000 	mov	r3, #0
  11f730:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f734:	e30e3c04 	movw	r3, #60420	; 0xec04
  11f738:	e3403056 	movt	r3, #86	; 0x56
  11f73c:	e5933000 	ldr	r3, [r3]
  11f740:	e50b3008 	str	r3, [fp, #-8]
  11f744:	ea000019 	b	11f7b0 <tcp_kill_state+0xd0>
    if (pcb->state == state) {
  11f748:	e51b3008 	ldr	r3, [fp, #-8]
  11f74c:	e5933014 	ldr	r3, [r3, #20]
  11f750:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11f754:	e1520003 	cmp	r2, r3
  11f758:	1a000011 	bne	11f7a4 <tcp_kill_state+0xc4>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f75c:	e30e3c08 	movw	r3, #60424	; 0xec08
  11f760:	e3403056 	movt	r3, #86	; 0x56
  11f764:	e5932000 	ldr	r2, [r3]
  11f768:	e51b3008 	ldr	r3, [fp, #-8]
  11f76c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f770:	e0423003 	sub	r3, r2, r3
  11f774:	e51b2010 	ldr	r2, [fp, #-16]
  11f778:	e1520003 	cmp	r2, r3
  11f77c:	8a000008 	bhi	11f7a4 <tcp_kill_state+0xc4>
        inactivity = tcp_ticks - pcb->tmr;
  11f780:	e30e3c08 	movw	r3, #60424	; 0xec08
  11f784:	e3403056 	movt	r3, #86	; 0x56
  11f788:	e5932000 	ldr	r2, [r3]
  11f78c:	e51b3008 	ldr	r3, [fp, #-8]
  11f790:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f794:	e0423003 	sub	r3, r2, r3
  11f798:	e50b3010 	str	r3, [fp, #-16]
        inactive = pcb;
  11f79c:	e51b3008 	ldr	r3, [fp, #-8]
  11f7a0:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f7a4:	e51b3008 	ldr	r3, [fp, #-8]
  11f7a8:	e593300c 	ldr	r3, [r3, #12]
  11f7ac:	e50b3008 	str	r3, [fp, #-8]
  11f7b0:	e51b3008 	ldr	r3, [fp, #-8]
  11f7b4:	e3530000 	cmp	r3, #0
  11f7b8:	1affffe2 	bne	11f748 <tcp_kill_state+0x68>
      }
    }
  }
  if (inactive != NULL) {
  11f7bc:	e51b300c 	ldr	r3, [fp, #-12]
  11f7c0:	e3530000 	cmp	r3, #0
  11f7c4:	0a000002 	beq	11f7d4 <tcp_kill_state+0xf4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
  11f7c8:	e3a01000 	mov	r1, #0
  11f7cc:	e51b000c 	ldr	r0, [fp, #-12]
  11f7d0:	ebfff7f4 	bl	11d7a8 <tcp_abandon>
  }
}
  11f7d4:	e320f000 	nop	{0}
  11f7d8:	e24bd004 	sub	sp, fp, #4
  11f7dc:	e8bd8800 	pop	{fp, pc}

0011f7e0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
  11f7e0:	e92d4800 	push	{fp, lr}
  11f7e4:	e28db004 	add	fp, sp, #4
  11f7e8:	e24dd010 	sub	sp, sp, #16
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
  11f7ec:	e3a03000 	mov	r3, #0
  11f7f0:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f7f4:	e3a03000 	mov	r3, #0
  11f7f8:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11f7fc:	e30e3c14 	movw	r3, #60436	; 0xec14
  11f800:	e3403056 	movt	r3, #86	; 0x56
  11f804:	e5933000 	ldr	r3, [r3]
  11f808:	e50b3008 	str	r3, [fp, #-8]
  11f80c:	ea000014 	b	11f864 <tcp_kill_timewait+0x84>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f810:	e30e3c08 	movw	r3, #60424	; 0xec08
  11f814:	e3403056 	movt	r3, #86	; 0x56
  11f818:	e5932000 	ldr	r2, [r3]
  11f81c:	e51b3008 	ldr	r3, [fp, #-8]
  11f820:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f824:	e0423003 	sub	r3, r2, r3
  11f828:	e51b2010 	ldr	r2, [fp, #-16]
  11f82c:	e1520003 	cmp	r2, r3
  11f830:	8a000008 	bhi	11f858 <tcp_kill_timewait+0x78>
      inactivity = tcp_ticks - pcb->tmr;
  11f834:	e30e3c08 	movw	r3, #60424	; 0xec08
  11f838:	e3403056 	movt	r3, #86	; 0x56
  11f83c:	e5932000 	ldr	r2, [r3]
  11f840:	e51b3008 	ldr	r3, [fp, #-8]
  11f844:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f848:	e0423003 	sub	r3, r2, r3
  11f84c:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11f850:	e51b3008 	ldr	r3, [fp, #-8]
  11f854:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11f858:	e51b3008 	ldr	r3, [fp, #-8]
  11f85c:	e593300c 	ldr	r3, [r3, #12]
  11f860:	e50b3008 	str	r3, [fp, #-8]
  11f864:	e51b3008 	ldr	r3, [fp, #-8]
  11f868:	e3530000 	cmp	r3, #0
  11f86c:	1affffe7 	bne	11f810 <tcp_kill_timewait+0x30>
    }
  }
  if (inactive != NULL) {
  11f870:	e51b300c 	ldr	r3, [fp, #-12]
  11f874:	e3530000 	cmp	r3, #0
  11f878:	0a000001 	beq	11f884 <tcp_kill_timewait+0xa4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11f87c:	e51b000c 	ldr	r0, [fp, #-12]
  11f880:	ebfff867 	bl	11da24 <tcp_abort>
  }
}
  11f884:	e320f000 	nop	{0}
  11f888:	e24bd004 	sub	sp, fp, #4
  11f88c:	e8bd8800 	pop	{fp, pc}

0011f890 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
  11f890:	e92d4800 	push	{fp, lr}
  11f894:	e28db004 	add	fp, sp, #4
  11f898:	e24dd010 	sub	sp, sp, #16
  11f89c:	e1a03000 	mov	r3, r0
  11f8a0:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f8a4:	e3002612 	movw	r2, #1554	; 0x612
  11f8a8:	e3071ee0 	movw	r1, #32480	; 0x7ee0
  11f8ac:	e3401014 	movt	r1, #20
  11f8b0:	e3a00002 	mov	r0, #2
  11f8b4:	ebffe60a 	bl	1190e4 <memp_malloc_fn>
  11f8b8:	e50b0008 	str	r0, [fp, #-8]
  if (pcb == NULL) {
  11f8bc:	e51b3008 	ldr	r3, [fp, #-8]
  11f8c0:	e3530000 	cmp	r3, #0
  11f8c4:	1a000050 	bne	11fa0c <tcp_alloc+0x17c>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
  11f8c8:	ebffffc4 	bl	11f7e0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f8cc:	e3002618 	movw	r2, #1560	; 0x618
  11f8d0:	e3071ee0 	movw	r1, #32480	; 0x7ee0
  11f8d4:	e3401014 	movt	r1, #20
  11f8d8:	e3a00002 	mov	r0, #2
  11f8dc:	ebffe600 	bl	1190e4 <memp_malloc_fn>
  11f8e0:	e50b0008 	str	r0, [fp, #-8]
    if (pcb == NULL) {
  11f8e4:	e51b3008 	ldr	r3, [fp, #-8]
  11f8e8:	e3530000 	cmp	r3, #0
  11f8ec:	1a00003c 	bne	11f9e4 <tcp_alloc+0x154>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
  11f8f0:	e3a00009 	mov	r0, #9
  11f8f4:	ebffff79 	bl	11f6e0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f8f8:	e300261e 	movw	r2, #1566	; 0x61e
  11f8fc:	e3071ee0 	movw	r1, #32480	; 0x7ee0
  11f900:	e3401014 	movt	r1, #20
  11f904:	e3a00002 	mov	r0, #2
  11f908:	ebffe5f5 	bl	1190e4 <memp_malloc_fn>
  11f90c:	e50b0008 	str	r0, [fp, #-8]
      if (pcb == NULL) {
  11f910:	e51b3008 	ldr	r3, [fp, #-8]
  11f914:	e3530000 	cmp	r3, #0
  11f918:	1a000027 	bne	11f9bc <tcp_alloc+0x12c>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
  11f91c:	e3a00008 	mov	r0, #8
  11f920:	ebffff6e 	bl	11f6e0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f924:	e3002624 	movw	r2, #1572	; 0x624
  11f928:	e3071ee0 	movw	r1, #32480	; 0x7ee0
  11f92c:	e3401014 	movt	r1, #20
  11f930:	e3a00002 	mov	r0, #2
  11f934:	ebffe5ea 	bl	1190e4 <memp_malloc_fn>
  11f938:	e50b0008 	str	r0, [fp, #-8]
        if (pcb == NULL) {
  11f93c:	e51b3008 	ldr	r3, [fp, #-8]
  11f940:	e3530000 	cmp	r3, #0
  11f944:	1a000012 	bne	11f994 <tcp_alloc+0x104>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
  11f948:	e55b300d 	ldrb	r3, [fp, #-13]
  11f94c:	e1a00003 	mov	r0, r3
  11f950:	ebffff25 	bl	11f5ec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f954:	e300262a 	movw	r2, #1578	; 0x62a
  11f958:	e3071ee0 	movw	r1, #32480	; 0x7ee0
  11f95c:	e3401014 	movt	r1, #20
  11f960:	e3a00002 	mov	r0, #2
  11f964:	ebffe5de 	bl	1190e4 <memp_malloc_fn>
  11f968:	e50b0008 	str	r0, [fp, #-8]
          if (pcb != NULL) {
  11f96c:	e51b3008 	ldr	r3, [fp, #-8]
  11f970:	e3530000 	cmp	r3, #0
  11f974:	0a000006 	beq	11f994 <tcp_alloc+0x104>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f978:	e30e3a14 	movw	r3, #59924	; 0xea14
  11f97c:	e3403056 	movt	r3, #86	; 0x56
  11f980:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f984:	e1d320b4 	ldrh	r2, [r3, #4]
  11f988:	e2422001 	sub	r2, r2, #1
  11f98c:	e6ff2072 	uxth	r2, r2
  11f990:	e1c320b4 	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
  11f994:	e51b3008 	ldr	r3, [fp, #-8]
  11f998:	e3530000 	cmp	r3, #0
  11f99c:	0a000006 	beq	11f9bc <tcp_alloc+0x12c>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f9a0:	e30e3a14 	movw	r3, #59924	; 0xea14
  11f9a4:	e3403056 	movt	r3, #86	; 0x56
  11f9a8:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f9ac:	e1d320b4 	ldrh	r2, [r3, #4]
  11f9b0:	e2422001 	sub	r2, r2, #1
  11f9b4:	e6ff2072 	uxth	r2, r2
  11f9b8:	e1c320b4 	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
  11f9bc:	e51b3008 	ldr	r3, [fp, #-8]
  11f9c0:	e3530000 	cmp	r3, #0
  11f9c4:	0a000006 	beq	11f9e4 <tcp_alloc+0x154>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f9c8:	e30e3a14 	movw	r3, #59924	; 0xea14
  11f9cc:	e3403056 	movt	r3, #86	; 0x56
  11f9d0:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f9d4:	e1d320b4 	ldrh	r2, [r3, #4]
  11f9d8:	e2422001 	sub	r2, r2, #1
  11f9dc:	e6ff2072 	uxth	r2, r2
  11f9e0:	e1c320b4 	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
  11f9e4:	e51b3008 	ldr	r3, [fp, #-8]
  11f9e8:	e3530000 	cmp	r3, #0
  11f9ec:	0a000006 	beq	11fa0c <tcp_alloc+0x17c>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f9f0:	e30e3a14 	movw	r3, #59924	; 0xea14
  11f9f4:	e3403056 	movt	r3, #86	; 0x56
  11f9f8:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f9fc:	e1d320b4 	ldrh	r2, [r3, #4]
  11fa00:	e2422001 	sub	r2, r2, #1
  11fa04:	e6ff2072 	uxth	r2, r2
  11fa08:	e1c320b4 	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
  11fa0c:	e51b3008 	ldr	r3, [fp, #-8]
  11fa10:	e3530000 	cmp	r3, #0
  11fa14:	0a00003e 	beq	11fb14 <tcp_alloc+0x284>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
  11fa18:	e3a020a4 	mov	r2, #164	; 0xa4
  11fa1c:	e3a01000 	mov	r1, #0
  11fa20:	e51b0008 	ldr	r0, [fp, #-8]
  11fa24:	eb008614 	bl	14127c <memset>
    pcb->prio = prio;
  11fa28:	e51b3008 	ldr	r3, [fp, #-8]
  11fa2c:	e55b200d 	ldrb	r2, [fp, #-13]
  11fa30:	e5c32018 	strb	r2, [r3, #24]
    pcb->snd_buf = TCP_SND_BUF;
  11fa34:	e51b3008 	ldr	r3, [fp, #-8]
  11fa38:	e3e02000 	mvn	r2, #0
  11fa3c:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11fa40:	e51b3008 	ldr	r3, [fp, #-8]
  11fa44:	e3e02000 	mvn	r2, #0
  11fa48:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11fa4c:	e51b3008 	ldr	r3, [fp, #-8]
  11fa50:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11fa54:	e51b3008 	ldr	r3, [fp, #-8]
  11fa58:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    pcb->ttl = TCP_TTL;
  11fa5c:	e51b3008 	ldr	r3, [fp, #-8]
  11fa60:	e3e02000 	mvn	r2, #0
  11fa64:	e5c3200a 	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
  11fa68:	e51b3008 	ldr	r3, [fp, #-8]
  11fa6c:	e3a02f86 	mov	r2, #536	; 0x218
  11fa70:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  11fa74:	e51b3008 	ldr	r3, [fp, #-8]
  11fa78:	e3a02006 	mov	r2, #6
  11fa7c:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  11fa80:	e51b3008 	ldr	r3, [fp, #-8]
  11fa84:	e3a02006 	mov	r2, #6
  11fa88:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
    pcb->rtime = -1;
  11fa8c:	e51b3008 	ldr	r3, [fp, #-8]
  11fa90:	e3e02000 	mvn	r2, #0
  11fa94:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
    pcb->cwnd = 1;
  11fa98:	e51b3008 	ldr	r3, [fp, #-8]
  11fa9c:	e3a02001 	mov	r2, #1
  11faa0:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->tmr = tcp_ticks;
  11faa4:	e30e3c08 	movw	r3, #60424	; 0xec08
  11faa8:	e3403056 	movt	r3, #86	; 0x56
  11faac:	e5932000 	ldr	r2, [r3]
  11fab0:	e51b3008 	ldr	r3, [fp, #-8]
  11fab4:	e5832024 	str	r2, [r3, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
  11fab8:	e30e322d 	movw	r3, #57901	; 0xe22d
  11fabc:	e3403014 	movt	r3, #20
  11fac0:	e5d32000 	ldrb	r2, [r3]
  11fac4:	e51b3008 	ldr	r3, [fp, #-8]
  11fac8:	e5c32021 	strb	r2, [r3, #33]	; 0x21
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
  11facc:	e51b3008 	ldr	r3, [fp, #-8]
  11fad0:	e3e02000 	mvn	r2, #0
  11fad4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
  11fad8:	e51b2008 	ldr	r2, [fp, #-8]
  11fadc:	e30f3578 	movw	r3, #62840	; 0xf578
  11fae0:	e3403011 	movt	r3, #17
  11fae4:	e5823084 	str	r3, [r2, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  11fae8:	e51b2008 	ldr	r2, [fp, #-8]
  11faec:	e3a03cdd 	mov	r3, #56576	; 0xdd00
  11faf0:	e340306d 	movt	r3, #109	; 0x6d
  11faf4:	e5823094 	str	r3, [r2, #148]	; 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
  11faf8:	e51b2008 	ldr	r2, [fp, #-8]
  11fafc:	e30234f8 	movw	r3, #9464	; 0x24f8
  11fb00:	e3403001 	movt	r3, #1
  11fb04:	e5823098 	str	r3, [r2, #152]	; 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
  11fb08:	e51b3008 	ldr	r3, [fp, #-8]
  11fb0c:	e3a02009 	mov	r2, #9
  11fb10:	e583209c 	str	r2, [r3, #156]	; 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
  11fb14:	e51b3008 	ldr	r3, [fp, #-8]
}
  11fb18:	e1a00003 	mov	r0, r3
  11fb1c:	e24bd004 	sub	sp, fp, #4
  11fb20:	e8bd8800 	pop	{fp, pc}

0011fb24 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  11fb24:	e92d4800 	push	{fp, lr}
  11fb28:	e28db004 	add	fp, sp, #4
  return tcp_alloc(TCP_PRIO_NORMAL);
  11fb2c:	e3a00040 	mov	r0, #64	; 0x40
  11fb30:	ebffff56 	bl	11f890 <tcp_alloc>
  11fb34:	e1a03000 	mov	r3, r0
}
  11fb38:	e1a00003 	mov	r0, r3
  11fb3c:	e8bd8800 	pop	{fp, pc}

0011fb40 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
  11fb40:	e92d4800 	push	{fp, lr}
  11fb44:	e28db004 	add	fp, sp, #4
  11fb48:	e24dd010 	sub	sp, sp, #16
  11fb4c:	e1a03000 	mov	r3, r0
  11fb50:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
  11fb54:	e3a00040 	mov	r0, #64	; 0x40
  11fb58:	ebffff4c 	bl	11f890 <tcp_alloc>
  11fb5c:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11fb60:	e51b3008 	ldr	r3, [fp, #-8]
}
  11fb64:	e1a00003 	mov	r0, r3
  11fb68:	e24bd004 	sub	sp, fp, #4
  11fb6c:	e8bd8800 	pop	{fp, pc}

0011fb70 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  11fb70:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11fb74:	e28db000 	add	fp, sp, #0
  11fb78:	e24dd00c 	sub	sp, sp, #12
  11fb7c:	e50b0008 	str	r0, [fp, #-8]
  11fb80:	e50b100c 	str	r1, [fp, #-12]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
  11fb84:	e51b3008 	ldr	r3, [fp, #-8]
  11fb88:	e3530000 	cmp	r3, #0
  11fb8c:	0a000002 	beq	11fb9c <tcp_arg+0x2c>
    pcb->callback_arg = arg;
  11fb90:	e51b3008 	ldr	r3, [fp, #-8]
  11fb94:	e51b200c 	ldr	r2, [fp, #-12]
  11fb98:	e5832010 	str	r2, [r3, #16]
  }
}
  11fb9c:	e320f000 	nop	{0}
  11fba0:	e28bd000 	add	sp, fp, #0
  11fba4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11fba8:	e12fff1e 	bx	lr

0011fbac <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  11fbac:	e92d4800 	push	{fp, lr}
  11fbb0:	e28db004 	add	fp, sp, #4
  11fbb4:	e24dd008 	sub	sp, sp, #8
  11fbb8:	e50b0008 	str	r0, [fp, #-8]
  11fbbc:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11fbc0:	e51b3008 	ldr	r3, [fp, #-8]
  11fbc4:	e3530000 	cmp	r3, #0
  11fbc8:	0a00000d 	beq	11fc04 <tcp_recv+0x58>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  11fbcc:	e51b3008 	ldr	r3, [fp, #-8]
  11fbd0:	e5933014 	ldr	r3, [r3, #20]
  11fbd4:	e3530001 	cmp	r3, #1
  11fbd8:	1a000006 	bne	11fbf8 <tcp_recv+0x4c>
  11fbdc:	e30801c8 	movw	r0, #33224	; 0x81c8
  11fbe0:	e3400014 	movt	r0, #20
  11fbe4:	ebff8d4a 	bl	103114 <rt_kprintf>
  11fbe8:	e30016b6 	movw	r1, #1718	; 0x6b6
  11fbec:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11fbf0:	e3400014 	movt	r0, #20
  11fbf4:	ebffad3d 	bl	10b0f0 <sys_arch_assert>
    pcb->recv = recv;
  11fbf8:	e51b3008 	ldr	r3, [fp, #-8]
  11fbfc:	e51b200c 	ldr	r2, [fp, #-12]
  11fc00:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
}
  11fc04:	e320f000 	nop	{0}
  11fc08:	e24bd004 	sub	sp, fp, #4
  11fc0c:	e8bd8800 	pop	{fp, pc}

0011fc10 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  11fc10:	e92d4800 	push	{fp, lr}
  11fc14:	e28db004 	add	fp, sp, #4
  11fc18:	e24dd008 	sub	sp, sp, #8
  11fc1c:	e50b0008 	str	r0, [fp, #-8]
  11fc20:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11fc24:	e51b3008 	ldr	r3, [fp, #-8]
  11fc28:	e3530000 	cmp	r3, #0
  11fc2c:	0a00000d 	beq	11fc68 <tcp_sent+0x58>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  11fc30:	e51b3008 	ldr	r3, [fp, #-8]
  11fc34:	e5933014 	ldr	r3, [r3, #20]
  11fc38:	e3530001 	cmp	r3, #1
  11fc3c:	1a000006 	bne	11fc5c <tcp_sent+0x4c>
  11fc40:	e30801f0 	movw	r0, #33264	; 0x81f0
  11fc44:	e3400014 	movt	r0, #20
  11fc48:	ebff8d31 	bl	103114 <rt_kprintf>
  11fc4c:	e30016c7 	movw	r1, #1735	; 0x6c7
  11fc50:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11fc54:	e3400014 	movt	r0, #20
  11fc58:	ebffad24 	bl	10b0f0 <sys_arch_assert>
    pcb->sent = sent;
  11fc5c:	e51b3008 	ldr	r3, [fp, #-8]
  11fc60:	e51b200c 	ldr	r2, [fp, #-12]
  11fc64:	e5832080 	str	r2, [r3, #128]	; 0x80
  }
}
  11fc68:	e320f000 	nop	{0}
  11fc6c:	e24bd004 	sub	sp, fp, #4
  11fc70:	e8bd8800 	pop	{fp, pc}

0011fc74 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  11fc74:	e92d4800 	push	{fp, lr}
  11fc78:	e28db004 	add	fp, sp, #4
  11fc7c:	e24dd008 	sub	sp, sp, #8
  11fc80:	e50b0008 	str	r0, [fp, #-8]
  11fc84:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11fc88:	e51b3008 	ldr	r3, [fp, #-8]
  11fc8c:	e3530000 	cmp	r3, #0
  11fc90:	0a00000d 	beq	11fccc <tcp_err+0x58>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  11fc94:	e51b3008 	ldr	r3, [fp, #-8]
  11fc98:	e5933014 	ldr	r3, [r3, #20]
  11fc9c:	e3530001 	cmp	r3, #1
  11fca0:	1a000006 	bne	11fcc0 <tcp_err+0x4c>
  11fca4:	e3080218 	movw	r0, #33304	; 0x8218
  11fca8:	e3400014 	movt	r0, #20
  11fcac:	ebff8d18 	bl	103114 <rt_kprintf>
  11fcb0:	e30016db 	movw	r1, #1755	; 0x6db
  11fcb4:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11fcb8:	e3400014 	movt	r0, #20
  11fcbc:	ebffad0b 	bl	10b0f0 <sys_arch_assert>
    pcb->errf = err;
  11fcc0:	e51b3008 	ldr	r3, [fp, #-8]
  11fcc4:	e51b200c 	ldr	r2, [fp, #-12]
  11fcc8:	e5832090 	str	r2, [r3, #144]	; 0x90
  }
}
  11fccc:	e320f000 	nop	{0}
  11fcd0:	e24bd004 	sub	sp, fp, #4
  11fcd4:	e8bd8800 	pop	{fp, pc}

0011fcd8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  11fcd8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11fcdc:	e28db000 	add	fp, sp, #0
  11fce0:	e24dd014 	sub	sp, sp, #20
  11fce4:	e50b0010 	str	r0, [fp, #-16]
  11fce8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
  11fcec:	e51b3010 	ldr	r3, [fp, #-16]
  11fcf0:	e3530000 	cmp	r3, #0
  11fcf4:	0a000008 	beq	11fd1c <tcp_accept+0x44>
  11fcf8:	e51b3010 	ldr	r3, [fp, #-16]
  11fcfc:	e5933014 	ldr	r3, [r3, #20]
  11fd00:	e3530001 	cmp	r3, #1
  11fd04:	1a000004 	bne	11fd1c <tcp_accept+0x44>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
  11fd08:	e51b3010 	ldr	r3, [fp, #-16]
  11fd0c:	e50b3008 	str	r3, [fp, #-8]
    lpcb->accept = accept;
  11fd10:	e51b3008 	ldr	r3, [fp, #-8]
  11fd14:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fd18:	e583201c 	str	r2, [r3, #28]
  }
}
  11fd1c:	e320f000 	nop	{0}
  11fd20:	e28bd000 	add	sp, fp, #0
  11fd24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11fd28:	e12fff1e 	bx	lr

0011fd2c <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  11fd2c:	e92d4800 	push	{fp, lr}
  11fd30:	e28db004 	add	fp, sp, #4
  11fd34:	e24dd010 	sub	sp, sp, #16
  11fd38:	e50b0008 	str	r0, [fp, #-8]
  11fd3c:	e50b100c 	str	r1, [fp, #-12]
  11fd40:	e1a03002 	mov	r3, r2
  11fd44:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
  11fd48:	e51b3008 	ldr	r3, [fp, #-8]
  11fd4c:	e5933014 	ldr	r3, [r3, #20]
  11fd50:	e3530001 	cmp	r3, #1
  11fd54:	1a000006 	bne	11fd74 <tcp_poll+0x48>
  11fd58:	e3080240 	movw	r0, #33344	; 0x8240
  11fd5c:	e3400014 	movt	r0, #20
  11fd60:	ebff8ceb 	bl	103114 <rt_kprintf>
  11fd64:	e30016fe 	movw	r1, #1790	; 0x6fe
  11fd68:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11fd6c:	e3400014 	movt	r0, #20
  11fd70:	ebffacde 	bl	10b0f0 <sys_arch_assert>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  11fd74:	e51b3008 	ldr	r3, [fp, #-8]
  11fd78:	e51b200c 	ldr	r2, [fp, #-12]
  11fd7c:	e583208c 	str	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
  11fd80:	e51b3008 	ldr	r3, [fp, #-8]
  11fd84:	e55b200d 	ldrb	r2, [fp, #-13]
  11fd88:	e5c32020 	strb	r2, [r3, #32]
}
  11fd8c:	e320f000 	nop	{0}
  11fd90:	e24bd004 	sub	sp, fp, #4
  11fd94:	e8bd8800 	pop	{fp, pc}

0011fd98 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  11fd98:	e92d4800 	push	{fp, lr}
  11fd9c:	e28db004 	add	fp, sp, #4
  11fda0:	e24dd008 	sub	sp, sp, #8
  11fda4:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->state != CLOSED &&
  11fda8:	e51b3008 	ldr	r3, [fp, #-8]
  11fdac:	e5933014 	ldr	r3, [r3, #20]
  11fdb0:	e3530000 	cmp	r3, #0
  11fdb4:	0a00002e 	beq	11fe74 <tcp_pcb_purge+0xdc>
     pcb->state != TIME_WAIT &&
  11fdb8:	e51b3008 	ldr	r3, [fp, #-8]
  11fdbc:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != CLOSED &&
  11fdc0:	e353000a 	cmp	r3, #10
  11fdc4:	0a00002a 	beq	11fe74 <tcp_pcb_purge+0xdc>
     pcb->state != LISTEN) {
  11fdc8:	e51b3008 	ldr	r3, [fp, #-8]
  11fdcc:	e5933014 	ldr	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
  11fdd0:	e3530001 	cmp	r3, #1
  11fdd4:	0a000026 	beq	11fe74 <tcp_pcb_purge+0xdc>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
  11fdd8:	e51b3008 	ldr	r3, [fp, #-8]
  11fddc:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11fde0:	e3530000 	cmp	r3, #0
  11fde4:	0a000006 	beq	11fe04 <tcp_pcb_purge+0x6c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  11fde8:	e51b3008 	ldr	r3, [fp, #-8]
  11fdec:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11fdf0:	e1a00003 	mov	r0, r3
  11fdf4:	ebffec30 	bl	11aebc <pbuf_free>
      pcb->refused_data = NULL;
  11fdf8:	e51b3008 	ldr	r3, [fp, #-8]
  11fdfc:	e3a02000 	mov	r2, #0
  11fe00:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
  11fe04:	e51b3008 	ldr	r3, [fp, #-8]
  11fe08:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11fe0c:	e1a00003 	mov	r0, r3
  11fe10:	ebfffd89 	bl	11f43c <tcp_segs_free>
    pcb->ooseq = NULL;
  11fe14:	e51b3008 	ldr	r3, [fp, #-8]
  11fe18:	e3a02000 	mov	r2, #0
  11fe1c:	e5832074 	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  11fe20:	e51b3008 	ldr	r3, [fp, #-8]
  11fe24:	e3e02000 	mvn	r2, #0
  11fe28:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
  11fe2c:	e51b3008 	ldr	r3, [fp, #-8]
  11fe30:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11fe34:	e1a00003 	mov	r0, r3
  11fe38:	ebfffd7f 	bl	11f43c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
  11fe3c:	e51b3008 	ldr	r3, [fp, #-8]
  11fe40:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11fe44:	e1a00003 	mov	r0, r3
  11fe48:	ebfffd7b 	bl	11f43c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
  11fe4c:	e51b3008 	ldr	r3, [fp, #-8]
  11fe50:	e3a02000 	mov	r2, #0
  11fe54:	e583206c 	str	r2, [r3, #108]	; 0x6c
  11fe58:	e51b3008 	ldr	r3, [fp, #-8]
  11fe5c:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  11fe60:	e51b3008 	ldr	r3, [fp, #-8]
  11fe64:	e5832070 	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  11fe68:	e51b3008 	ldr	r3, [fp, #-8]
  11fe6c:	e3a02000 	mov	r2, #0
  11fe70:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
  11fe74:	e320f000 	nop	{0}
  11fe78:	e24bd004 	sub	sp, fp, #4
  11fe7c:	e8bd8800 	pop	{fp, pc}

0011fe80 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  11fe80:	e92d4800 	push	{fp, lr}
  11fe84:	e28db004 	add	fp, sp, #4
  11fe88:	e24dd010 	sub	sp, sp, #16
  11fe8c:	e50b0010 	str	r0, [fp, #-16]
  11fe90:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  TCP_RMV(pcblist, pcb);
  11fe94:	e51b3010 	ldr	r3, [fp, #-16]
  11fe98:	e5933000 	ldr	r3, [r3]
  11fe9c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fea0:	e1520003 	cmp	r2, r3
  11fea4:	1a000005 	bne	11fec0 <tcp_pcb_remove+0x40>
  11fea8:	e51b3010 	ldr	r3, [fp, #-16]
  11feac:	e5933000 	ldr	r3, [r3]
  11feb0:	e593200c 	ldr	r2, [r3, #12]
  11feb4:	e51b3010 	ldr	r3, [fp, #-16]
  11feb8:	e5832000 	str	r2, [r3]
  11febc:	ea000013 	b	11ff10 <tcp_pcb_remove+0x90>
  11fec0:	e51b3010 	ldr	r3, [fp, #-16]
  11fec4:	e5933000 	ldr	r3, [r3]
  11fec8:	e50b3008 	str	r3, [fp, #-8]
  11fecc:	ea00000c 	b	11ff04 <tcp_pcb_remove+0x84>
  11fed0:	e51b3008 	ldr	r3, [fp, #-8]
  11fed4:	e593300c 	ldr	r3, [r3, #12]
  11fed8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fedc:	e1520003 	cmp	r2, r3
  11fee0:	1a000004 	bne	11fef8 <tcp_pcb_remove+0x78>
  11fee4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fee8:	e593200c 	ldr	r2, [r3, #12]
  11feec:	e51b3008 	ldr	r3, [fp, #-8]
  11fef0:	e583200c 	str	r2, [r3, #12]
  11fef4:	ea000005 	b	11ff10 <tcp_pcb_remove+0x90>
  11fef8:	e51b3008 	ldr	r3, [fp, #-8]
  11fefc:	e593300c 	ldr	r3, [r3, #12]
  11ff00:	e50b3008 	str	r3, [fp, #-8]
  11ff04:	e51b3008 	ldr	r3, [fp, #-8]
  11ff08:	e3530000 	cmp	r3, #0
  11ff0c:	1affffef 	bne	11fed0 <tcp_pcb_remove+0x50>
  11ff10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff14:	e3a02000 	mov	r2, #0
  11ff18:	e583200c 	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
  11ff1c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11ff20:	ebffff9c 	bl	11fd98 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  11ff24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff28:	e5933014 	ldr	r3, [r3, #20]
  11ff2c:	e353000a 	cmp	r3, #10
  11ff30:	0a000010 	beq	11ff78 <tcp_pcb_remove+0xf8>
     pcb->state != LISTEN &&
  11ff34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff38:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
  11ff3c:	e3530001 	cmp	r3, #1
  11ff40:	0a00000c 	beq	11ff78 <tcp_pcb_remove+0xf8>
     pcb->flags & TF_ACK_DELAY) {
  11ff44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff48:	e5d3301e 	ldrb	r3, [r3, #30]
  11ff4c:	e2033001 	and	r3, r3, #1
     pcb->state != LISTEN &&
  11ff50:	e3530000 	cmp	r3, #0
  11ff54:	0a000007 	beq	11ff78 <tcp_pcb_remove+0xf8>
    pcb->flags |= TF_ACK_NOW;
  11ff58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff5c:	e5d3301e 	ldrb	r3, [r3, #30]
  11ff60:	e3833002 	orr	r3, r3, #2
  11ff64:	e6ef2073 	uxtb	r2, r3
  11ff68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff6c:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  11ff70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11ff74:	eb0017fa 	bl	125f64 <tcp_output>
  }

  if (pcb->state != LISTEN) {
  11ff78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff7c:	e5933014 	ldr	r3, [r3, #20]
  11ff80:	e3530001 	cmp	r3, #1
  11ff84:	0a000020 	beq	12000c <tcp_pcb_remove+0x18c>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
  11ff88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff8c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11ff90:	e3530000 	cmp	r3, #0
  11ff94:	0a000006 	beq	11ffb4 <tcp_pcb_remove+0x134>
  11ff98:	e3080260 	movw	r0, #33376	; 0x8260
  11ff9c:	e3400014 	movt	r0, #20
  11ffa0:	ebff8c5b 	bl	103114 <rt_kprintf>
  11ffa4:	e300174e 	movw	r1, #1870	; 0x74e
  11ffa8:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11ffac:	e3400014 	movt	r0, #20
  11ffb0:	ebffac4e 	bl	10b0f0 <sys_arch_assert>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
  11ffb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ffb8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11ffbc:	e3530000 	cmp	r3, #0
  11ffc0:	0a000006 	beq	11ffe0 <tcp_pcb_remove+0x160>
  11ffc4:	e3080278 	movw	r0, #33400	; 0x8278
  11ffc8:	e3400014 	movt	r0, #20
  11ffcc:	ebff8c50 	bl	103114 <rt_kprintf>
  11ffd0:	e300174f 	movw	r1, #1871	; 0x74f
  11ffd4:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  11ffd8:	e3400014 	movt	r0, #20
  11ffdc:	ebffac43 	bl	10b0f0 <sys_arch_assert>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
  11ffe0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ffe4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11ffe8:	e3530000 	cmp	r3, #0
  11ffec:	0a000006 	beq	12000c <tcp_pcb_remove+0x18c>
  11fff0:	e3080294 	movw	r0, #33428	; 0x8294
  11fff4:	e3400014 	movt	r0, #20
  11fff8:	ebff8c45 	bl	103114 <rt_kprintf>
  11fffc:	e3001751 	movw	r1, #1873	; 0x751
  120000:	e3070ee0 	movw	r0, #32480	; 0x7ee0
  120004:	e3400014 	movt	r0, #20
  120008:	ebffac38 	bl	10b0f0 <sys_arch_assert>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  12000c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120010:	e3a02000 	mov	r2, #0
  120014:	e5832014 	str	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
  120018:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12001c:	e3a02000 	mov	r2, #0
  120020:	e1c321ba 	strh	r2, [r3, #26]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
  120024:	e320f000 	nop	{0}
  120028:	e24bd004 	sub	sp, fp, #4
  12002c:	e8bd8800 	pop	{fp, pc}

00120030 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
  120030:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  120034:	e28db000 	add	fp, sp, #0
  120038:	e24dd00c 	sub	sp, sp, #12
  12003c:	e50b0008 	str	r0, [fp, #-8]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
  120040:	e30d3034 	movw	r3, #53300	; 0xd034
  120044:	e3403014 	movt	r3, #20
  120048:	e5932000 	ldr	r2, [r3]
  12004c:	e30e3c08 	movw	r3, #60424	; 0xec08
  120050:	e3403056 	movt	r3, #86	; 0x56
  120054:	e5933000 	ldr	r3, [r3]
  120058:	e0822003 	add	r2, r2, r3
  12005c:	e30d3034 	movw	r3, #53300	; 0xd034
  120060:	e3403014 	movt	r3, #20
  120064:	e5832000 	str	r2, [r3]
  return iss;
  120068:	e30d3034 	movw	r3, #53300	; 0xd034
  12006c:	e3403014 	movt	r3, #20
  120070:	e5933000 	ldr	r3, [r3]
#endif /* LWIP_HOOK_TCP_ISN */
}
  120074:	e1a00003 	mov	r0, r3
  120078:	e28bd000 	add	sp, fp, #0
  12007c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  120080:	e12fff1e 	bx	lr

00120084 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
  120084:	e92d4800 	push	{fp, lr}
  120088:	e28db004 	add	fp, sp, #4
  12008c:	e24dd010 	sub	sp, sp, #16
  120090:	e1a03000 	mov	r3, r0
  120094:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  120098:	e14b30be 	strh	r3, [fp, #-14]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
  12009c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1200a0:	eb00443c 	bl	131198 <ip4_route>
  1200a4:	e50b0008 	str	r0, [fp, #-8]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
  1200a8:	e51b3008 	ldr	r3, [fp, #-8]
  1200ac:	e3530000 	cmp	r3, #0
  1200b0:	1a000001 	bne	1200bc <tcp_eff_send_mss_impl+0x38>
      return sendmss;
  1200b4:	e15b30be 	ldrh	r3, [fp, #-14]
  1200b8:	ea00000f 	b	1200fc <tcp_eff_send_mss_impl+0x78>
    }
    mtu = outif->mtu;
  1200bc:	e51b3008 	ldr	r3, [fp, #-8]
  1200c0:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  1200c4:	e14b30ba 	strh	r3, [fp, #-10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
  1200c8:	e15b30fa 	ldrsh	r3, [fp, #-10]
  1200cc:	e3530000 	cmp	r3, #0
  1200d0:	0a000008 	beq	1200f8 <tcp_eff_send_mss_impl+0x74>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
  1200d4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1200d8:	e2433028 	sub	r3, r3, #40	; 0x28
  1200dc:	e14b30bc 	strh	r3, [fp, #-12]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
  1200e0:	e15b20bc 	ldrh	r2, [fp, #-12]
  1200e4:	e15b30be 	ldrh	r3, [fp, #-14]
  1200e8:	e1520003 	cmp	r2, r3
  1200ec:	31a03002 	movcc	r3, r2
  1200f0:	21a03003 	movcs	r3, r3
  1200f4:	e14b30be 	strh	r3, [fp, #-14]
  }
  return sendmss;
  1200f8:	e15b30be 	ldrh	r3, [fp, #-14]
}
  1200fc:	e1a00003 	mov	r0, r3
  120100:	e24bd004 	sub	sp, fp, #4
  120104:	e8bd8800 	pop	{fp, pc}

00120108 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
  120108:	e92d4800 	push	{fp, lr}
  12010c:	e28db004 	add	fp, sp, #4
  120110:	e24dd010 	sub	sp, sp, #16
  120114:	e50b0010 	str	r0, [fp, #-16]
  120118:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  12011c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120120:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  120124:	ea000010 	b	12016c <tcp_netif_ip_addr_changed_pcblist+0x64>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
  120128:	e51b3008 	ldr	r3, [fp, #-8]
  12012c:	e5932000 	ldr	r2, [r3]
  120130:	e51b3010 	ldr	r3, [fp, #-16]
  120134:	e5933000 	ldr	r3, [r3]
  120138:	e1520003 	cmp	r2, r3
  12013c:	1a000007 	bne	120160 <tcp_netif_ip_addr_changed_pcblist+0x58>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
  120140:	e51b3008 	ldr	r3, [fp, #-8]
  120144:	e593300c 	ldr	r3, [r3, #12]
  120148:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
  12014c:	e51b0008 	ldr	r0, [fp, #-8]
  120150:	ebfff633 	bl	11da24 <tcp_abort>
      pcb = next;
  120154:	e51b300c 	ldr	r3, [fp, #-12]
  120158:	e50b3008 	str	r3, [fp, #-8]
  12015c:	ea000002 	b	12016c <tcp_netif_ip_addr_changed_pcblist+0x64>
    } else {
      pcb = pcb->next;
  120160:	e51b3008 	ldr	r3, [fp, #-8]
  120164:	e593300c 	ldr	r3, [r3, #12]
  120168:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  12016c:	e51b3008 	ldr	r3, [fp, #-8]
  120170:	e3530000 	cmp	r3, #0
  120174:	1affffeb 	bne	120128 <tcp_netif_ip_addr_changed_pcblist+0x20>
    }
  }
}
  120178:	e320f000 	nop	{0}
  12017c:	e24bd004 	sub	sp, fp, #4
  120180:	e8bd8800 	pop	{fp, pc}

00120184 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  120184:	e92d4800 	push	{fp, lr}
  120188:	e28db004 	add	fp, sp, #4
  12018c:	e24dd010 	sub	sp, sp, #16
  120190:	e50b0010 	str	r0, [fp, #-16]
  120194:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
  120198:	e51b3010 	ldr	r3, [fp, #-16]
  12019c:	e3530000 	cmp	r3, #0
  1201a0:	0a00002d 	beq	12025c <tcp_netif_ip_addr_changed+0xd8>
  1201a4:	e51b3010 	ldr	r3, [fp, #-16]
  1201a8:	e5933000 	ldr	r3, [r3]
  1201ac:	e3530000 	cmp	r3, #0
  1201b0:	0a000029 	beq	12025c <tcp_netif_ip_addr_changed+0xd8>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
  1201b4:	e30e3c04 	movw	r3, #60420	; 0xec04
  1201b8:	e3403056 	movt	r3, #86	; 0x56
  1201bc:	e5933000 	ldr	r3, [r3]
  1201c0:	e1a01003 	mov	r1, r3
  1201c4:	e51b0010 	ldr	r0, [fp, #-16]
  1201c8:	ebffffce 	bl	120108 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
  1201cc:	e30e3c10 	movw	r3, #60432	; 0xec10
  1201d0:	e3403056 	movt	r3, #86	; 0x56
  1201d4:	e5933000 	ldr	r3, [r3]
  1201d8:	e1a01003 	mov	r1, r3
  1201dc:	e51b0010 	ldr	r0, [fp, #-16]
  1201e0:	ebffffc8 	bl	120108 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
  1201e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1201e8:	e3530000 	cmp	r3, #0
  1201ec:	0a00001a 	beq	12025c <tcp_netif_ip_addr_changed+0xd8>
  1201f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1201f4:	e5933000 	ldr	r3, [r3]
  1201f8:	e3530000 	cmp	r3, #0
  1201fc:	0a000016 	beq	12025c <tcp_netif_ip_addr_changed+0xd8>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  120200:	e30e3c0c 	movw	r3, #60428	; 0xec0c
  120204:	e3403056 	movt	r3, #86	; 0x56
  120208:	e5933000 	ldr	r3, [r3]
  12020c:	e50b3008 	str	r3, [fp, #-8]
  120210:	ea00000e 	b	120250 <tcp_netif_ip_addr_changed+0xcc>
        next = lpcb->next;
  120214:	e51b3008 	ldr	r3, [fp, #-8]
  120218:	e593300c 	ldr	r3, [r3, #12]
  12021c:	e50b300c 	str	r3, [fp, #-12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
  120220:	e51b3008 	ldr	r3, [fp, #-8]
  120224:	e5932000 	ldr	r2, [r3]
  120228:	e51b3010 	ldr	r3, [fp, #-16]
  12022c:	e5933000 	ldr	r3, [r3]
  120230:	e1520003 	cmp	r2, r3
  120234:	1a000003 	bne	120248 <tcp_netif_ip_addr_changed+0xc4>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
  120238:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12023c:	e5932000 	ldr	r2, [r3]
  120240:	e51b3008 	ldr	r3, [fp, #-8]
  120244:	e5832000 	str	r2, [r3]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  120248:	e51b300c 	ldr	r3, [fp, #-12]
  12024c:	e50b3008 	str	r3, [fp, #-8]
  120250:	e51b3008 	ldr	r3, [fp, #-8]
  120254:	e3530000 	cmp	r3, #0
  120258:	1affffed 	bne	120214 <tcp_netif_ip_addr_changed+0x90>
        }
      }
    }
  }
}
  12025c:	e320f000 	nop	{0}
  120260:	e24bd004 	sub	sp, fp, #4
  120264:	e8bd8800 	pop	{fp, pc}

00120268 <tcp_debug_state_str>:

const char*
tcp_debug_state_str(enum tcp_state s)
{
  120268:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12026c:	e28db000 	add	fp, sp, #0
  120270:	e24dd00c 	sub	sp, sp, #12
  120274:	e50b0008 	str	r0, [fp, #-8]
  return tcp_state_str[s];
  120278:	e3073e80 	movw	r3, #32384	; 0x7e80
  12027c:	e3403014 	movt	r3, #20
  120280:	e51b2008 	ldr	r2, [fp, #-8]
  120284:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  120288:	e1a00003 	mov	r0, r3
  12028c:	e28bd000 	add	sp, fp, #0
  120290:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  120294:	e12fff1e 	bx	lr

00120298 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
  120298:	e92d4810 	push	{r4, fp, lr}
  12029c:	e28db008 	add	fp, sp, #8
  1202a0:	e24dd034 	sub	sp, sp, #52	; 0x34
  1202a4:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  1202a8:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
  1202ac:	e3a03000 	mov	r3, #0
  1202b0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct tcp_pcb_listen *lpcb_any = NULL;
  1202b4:	e3a03000 	mov	r3, #0
  1202b8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
  1202bc:	e30e3a14 	movw	r3, #59924	; 0xea14
  1202c0:	e3403056 	movt	r3, #86	; 0x56
  1202c4:	e1d33abe 	ldrh	r3, [r3, #174]	; 0xae
  1202c8:	e2833001 	add	r3, r3, #1
  1202cc:	e6ff2073 	uxth	r2, r3
  1202d0:	e30e3a14 	movw	r3, #59924	; 0xea14
  1202d4:	e3403056 	movt	r3, #86	; 0x56
  1202d8:	e1c32abe 	strh	r2, [r3, #174]	; 0xae
  MIB2_STATS_INC(mib2.tcpinsegs);
  1202dc:	e30e3a14 	movw	r3, #59924	; 0xea14
  1202e0:	e3403056 	movt	r3, #86	; 0x56
  1202e4:	e5933184 	ldr	r3, [r3, #388]	; 0x184
  1202e8:	e2832001 	add	r2, r3, #1
  1202ec:	e30e3a14 	movw	r3, #59924	; 0xea14
  1202f0:	e3403056 	movt	r3, #86	; 0x56
  1202f4:	e5832184 	str	r2, [r3, #388]	; 0x184

  tcphdr = (struct tcp_hdr *)p->payload;
  1202f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202fc:	e5932004 	ldr	r2, [r3, #4]
  120300:	e30e3240 	movw	r3, #57920	; 0xe240
  120304:	e3403014 	movt	r3, #20
  120308:	e5832000 	str	r2, [r3]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
  12030c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120310:	e1d330ba 	ldrh	r3, [r3, #10]
  120314:	e3530013 	cmp	r3, #19
  120318:	8a000008 	bhi	120340 <tcp_input+0xa8>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
  12031c:	e30e3a14 	movw	r3, #59924	; 0xea14
  120320:	e3403056 	movt	r3, #86	; 0x56
  120324:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  120328:	e2833001 	add	r3, r3, #1
  12032c:	e6ff2073 	uxth	r2, r3
  120330:	e30e3a14 	movw	r3, #59924	; 0xea14
  120334:	e3403056 	movt	r3, #86	; 0x56
  120338:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  12033c:	ea0003d2 	b	12128c <tcp_input+0xff4>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  120340:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  120344:	e3403014 	movt	r3, #20
  120348:	e5932014 	ldr	r2, [r3, #20]
  12034c:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  120350:	e3403014 	movt	r3, #20
  120354:	e5933000 	ldr	r3, [r3]
  120358:	e1a01003 	mov	r1, r3
  12035c:	e1a00002 	mov	r0, r2
  120360:	eb00486b 	bl	132514 <ip4_addr_isbroadcast_u32>
  120364:	e1a03000 	mov	r3, r0
  120368:	e3530000 	cmp	r3, #0
  12036c:	1a000005 	bne	120388 <tcp_input+0xf0>
      ip_addr_ismulticast(ip_current_dest_addr())) {
  120370:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  120374:	e3403014 	movt	r3, #20
  120378:	e5933014 	ldr	r3, [r3, #20]
  12037c:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  120380:	e35300e0 	cmp	r3, #224	; 0xe0
  120384:	1a000008 	bne	1203ac <tcp_input+0x114>
    TCP_STATS_INC(tcp.proterr);
  120388:	e30e3a14 	movw	r3, #59924	; 0xea14
  12038c:	e3403056 	movt	r3, #86	; 0x56
  120390:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  120394:	e2833001 	add	r3, r3, #1
  120398:	e6ff2073 	uxth	r2, r3
  12039c:	e30e3a14 	movw	r3, #59924	; 0xea14
  1203a0:	e3403056 	movt	r3, #86	; 0x56
  1203a4:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
    goto dropped;
  1203a8:	ea0003b7 	b	12128c <tcp_input+0xff4>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  1203ac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1203b0:	e1d320b8 	ldrh	r2, [r3, #8]
  1203b4:	e59f3f24 	ldr	r3, [pc, #3876]	; 1212e0 <tcp_input+0x1048>
  1203b8:	e58d3000 	str	r3, [sp]
  1203bc:	e59f3f20 	ldr	r3, [pc, #3872]	; 1212e4 <tcp_input+0x104c>
  1203c0:	e3a01006 	mov	r1, #6
  1203c4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1203c8:	ebffe0a3 	bl	11865c <ip_chksum_pseudo>
  1203cc:	e1a03000 	mov	r3, r0
  1203d0:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
                               ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
  1203d4:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  1203d8:	e3530000 	cmp	r3, #0
  1203dc:	0a000008 	beq	120404 <tcp_input+0x16c>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
          chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
  1203e0:	e30e3a14 	movw	r3, #59924	; 0xea14
  1203e4:	e3403056 	movt	r3, #86	; 0x56
  1203e8:	e1d33bb4 	ldrh	r3, [r3, #180]	; 0xb4
  1203ec:	e2833001 	add	r3, r3, #1
  1203f0:	e6ff2073 	uxth	r2, r3
  1203f4:	e30e3a14 	movw	r3, #59924	; 0xea14
  1203f8:	e3403056 	movt	r3, #86	; 0x56
  1203fc:	e1c32bb4 	strh	r2, [r3, #180]	; 0xb4
      goto dropped;
  120400:	ea0003a1 	b	12128c <tcp_input+0xff4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
  120404:	e30e3240 	movw	r3, #57920	; 0xe240
  120408:	e3403014 	movt	r3, #20
  12040c:	e5933000 	ldr	r3, [r3]
  120410:	e1d330bc 	ldrh	r3, [r3, #12]
  120414:	e6ff3073 	uxth	r3, r3
  120418:	e1a00003 	mov	r0, r3
  12041c:	ebffd86f 	bl	1165e0 <lwip_htons>
  120420:	e1a03000 	mov	r3, r0
  120424:	e1a03623 	lsr	r3, r3, #12
  120428:	e6ff3073 	uxth	r3, r3
  12042c:	e6ef3073 	uxtb	r3, r3
  120430:	e1a03103 	lsl	r3, r3, #2
  120434:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
  120438:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  12043c:	e3530013 	cmp	r3, #19
  120440:	9a000005 	bls	12045c <tcp_input+0x1c4>
  120444:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120448:	e6ff2073 	uxth	r2, r3
  12044c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120450:	e1d330b8 	ldrh	r3, [r3, #8]
  120454:	e1520003 	cmp	r2, r3
  120458:	9a000008 	bls	120480 <tcp_input+0x1e8>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
  12045c:	e30e3a14 	movw	r3, #59924	; 0xea14
  120460:	e3403056 	movt	r3, #86	; 0x56
  120464:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  120468:	e2833001 	add	r3, r3, #1
  12046c:	e6ff2073 	uxth	r2, r3
  120470:	e30e3a14 	movw	r3, #59924	; 0xea14
  120474:	e3403056 	movt	r3, #86	; 0x56
  120478:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  12047c:	ea000382 	b	12128c <tcp_input+0xff4>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
  120480:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120484:	e6ff3073 	uxth	r3, r3
  120488:	e2433014 	sub	r3, r3, #20
  12048c:	e6ff2073 	uxth	r2, r3
  120490:	e30e3244 	movw	r3, #57924	; 0xe244
  120494:	e3403014 	movt	r3, #20
  120498:	e1c320b0 	strh	r2, [r3]
  tcphdr_opt2 = NULL;
  12049c:	e30e3248 	movw	r3, #57928	; 0xe248
  1204a0:	e3403014 	movt	r3, #20
  1204a4:	e3a02000 	mov	r2, #0
  1204a8:	e5832000 	str	r2, [r3]
  if (p->len >= hdrlen_bytes) {
  1204ac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1204b0:	e1d320ba 	ldrh	r2, [r3, #10]
  1204b4:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1204b8:	e6ff3073 	uxth	r3, r3
  1204bc:	e1520003 	cmp	r2, r3
  1204c0:	3a00000e 	bcc	120500 <tcp_input+0x268>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
  1204c4:	e30e3244 	movw	r3, #57924	; 0xe244
  1204c8:	e3403014 	movt	r3, #20
  1204cc:	e1d320b0 	ldrh	r2, [r3]
  1204d0:	e30e3246 	movw	r3, #57926	; 0xe246
  1204d4:	e3403014 	movt	r3, #20
  1204d8:	e1c320b0 	strh	r2, [r3]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
  1204dc:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1204e0:	e6ff3073 	uxth	r3, r3
  1204e4:	e2633000 	rsb	r3, r3, #0
  1204e8:	e6ff3073 	uxth	r3, r3
  1204ec:	e6bf3073 	sxth	r3, r3
  1204f0:	e1a01003 	mov	r1, r3
  1204f4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1204f8:	ebffea51 	bl	11ae44 <pbuf_header>
  1204fc:	ea000061 	b	120688 <tcp_input+0x3f0>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
  120500:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120504:	e5933000 	ldr	r3, [r3]
  120508:	e3530000 	cmp	r3, #0
  12050c:	1a000006 	bne	12052c <tcp_input+0x294>
  120510:	e30802ac 	movw	r0, #33452	; 0x82ac
  120514:	e3400014 	movt	r0, #20
  120518:	ebff8afd 	bl	103114 <rt_kprintf>
  12051c:	e3a010b0 	mov	r1, #176	; 0xb0
  120520:	e30802bc 	movw	r0, #33468	; 0x82bc
  120524:	e3400014 	movt	r0, #20
  120528:	ebffaaf0 	bl	10b0f0 <sys_arch_assert>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
  12052c:	e3e01013 	mvn	r1, #19
  120530:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120534:	ebffea42 	bl	11ae44 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
  120538:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12053c:	e1d320ba 	ldrh	r2, [r3, #10]
  120540:	e30e3246 	movw	r3, #57926	; 0xe246
  120544:	e3403014 	movt	r3, #20
  120548:	e1c320b0 	strh	r2, [r3]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
  12054c:	e30e3244 	movw	r3, #57924	; 0xe244
  120550:	e3403014 	movt	r3, #20
  120554:	e1d320b0 	ldrh	r2, [r3]
  120558:	e30e3246 	movw	r3, #57926	; 0xe246
  12055c:	e3403014 	movt	r3, #20
  120560:	e1d330b0 	ldrh	r3, [r3]
  120564:	e0423003 	sub	r3, r2, r3
  120568:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
  12056c:	e30e3246 	movw	r3, #57926	; 0xe246
  120570:	e3403014 	movt	r3, #20
  120574:	e1d330b0 	ldrh	r3, [r3]
  120578:	e2633000 	rsb	r3, r3, #0
  12057c:	e6ff3073 	uxth	r3, r3
  120580:	e6bf3073 	sxth	r3, r3
  120584:	e1a01003 	mov	r1, r3
  120588:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12058c:	ebffea2c 	bl	11ae44 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
  120590:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120594:	e5933000 	ldr	r3, [r3]
  120598:	e1d330ba 	ldrh	r3, [r3, #10]
  12059c:	e15b22b8 	ldrh	r2, [fp, #-40]	; 0xffffffd8
  1205a0:	e1520003 	cmp	r2, r3
  1205a4:	9a000008 	bls	1205cc <tcp_input+0x334>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
  1205a8:	e30e3a14 	movw	r3, #59924	; 0xea14
  1205ac:	e3403056 	movt	r3, #86	; 0x56
  1205b0:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  1205b4:	e2833001 	add	r3, r3, #1
  1205b8:	e6ff2073 	uxth	r2, r3
  1205bc:	e30e3a14 	movw	r3, #59924	; 0xea14
  1205c0:	e3403056 	movt	r3, #86	; 0x56
  1205c4:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
      goto dropped;
  1205c8:	ea00032f 	b	12128c <tcp_input+0xff4>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
  1205cc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1205d0:	e5933000 	ldr	r3, [r3]
  1205d4:	e5932004 	ldr	r2, [r3, #4]
  1205d8:	e30e3248 	movw	r3, #57928	; 0xe248
  1205dc:	e3403014 	movt	r3, #20
  1205e0:	e5832000 	str	r2, [r3]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
  1205e4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1205e8:	e5932000 	ldr	r2, [r3]
  1205ec:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1205f0:	e2633000 	rsb	r3, r3, #0
  1205f4:	e6ff3073 	uxth	r3, r3
  1205f8:	e6bf3073 	sxth	r3, r3
  1205fc:	e1a01003 	mov	r1, r3
  120600:	e1a00002 	mov	r0, r2
  120604:	ebffea0e 	bl	11ae44 <pbuf_header>
    p->tot_len -= opt2len;
  120608:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12060c:	e1d320b8 	ldrh	r2, [r3, #8]
  120610:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  120614:	e0423003 	sub	r3, r2, r3
  120618:	e6ff2073 	uxth	r2, r3
  12061c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120620:	e1c320b8 	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
  120624:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120628:	e1d330ba 	ldrh	r3, [r3, #10]
  12062c:	e3530000 	cmp	r3, #0
  120630:	0a000006 	beq	120650 <tcp_input+0x3b8>
  120634:	e30802ec 	movw	r0, #33516	; 0x82ec
  120638:	e3400014 	movt	r0, #20
  12063c:	ebff8ab4 	bl	103114 <rt_kprintf>
  120640:	e3a010cd 	mov	r1, #205	; 0xcd
  120644:	e30802bc 	movw	r0, #33468	; 0x82bc
  120648:	e3400014 	movt	r0, #20
  12064c:	ebffaaa7 	bl	10b0f0 <sys_arch_assert>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
  120650:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120654:	e1d320b8 	ldrh	r2, [r3, #8]
  120658:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12065c:	e5933000 	ldr	r3, [r3]
  120660:	e1d330b8 	ldrh	r3, [r3, #8]
  120664:	e1520003 	cmp	r2, r3
  120668:	0a000006 	beq	120688 <tcp_input+0x3f0>
  12066c:	e30802f8 	movw	r0, #33528	; 0x82f8
  120670:	e3400014 	movt	r0, #20
  120674:	ebff8aa6 	bl	103114 <rt_kprintf>
  120678:	e3a010ce 	mov	r1, #206	; 0xce
  12067c:	e30802bc 	movw	r0, #33468	; 0x82bc
  120680:	e3400014 	movt	r0, #20
  120684:	ebffaa99 	bl	10b0f0 <sys_arch_assert>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
  120688:	e30e3240 	movw	r3, #57920	; 0xe240
  12068c:	e3403014 	movt	r3, #20
  120690:	e5933000 	ldr	r3, [r3]
  120694:	e1d330b0 	ldrh	r3, [r3]
  120698:	e6ff2073 	uxth	r2, r3
  12069c:	e30e3240 	movw	r3, #57920	; 0xe240
  1206a0:	e3403014 	movt	r3, #20
  1206a4:	e5934000 	ldr	r4, [r3]
  1206a8:	e1a00002 	mov	r0, r2
  1206ac:	ebffd7cb 	bl	1165e0 <lwip_htons>
  1206b0:	e1a03000 	mov	r3, r0
  1206b4:	e1c430b0 	strh	r3, [r4]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
  1206b8:	e30e3240 	movw	r3, #57920	; 0xe240
  1206bc:	e3403014 	movt	r3, #20
  1206c0:	e5933000 	ldr	r3, [r3]
  1206c4:	e1d330b2 	ldrh	r3, [r3, #2]
  1206c8:	e6ff2073 	uxth	r2, r3
  1206cc:	e30e3240 	movw	r3, #57920	; 0xe240
  1206d0:	e3403014 	movt	r3, #20
  1206d4:	e5934000 	ldr	r4, [r3]
  1206d8:	e1a00002 	mov	r0, r2
  1206dc:	ebffd7bf 	bl	1165e0 <lwip_htons>
  1206e0:	e1a03000 	mov	r3, r0
  1206e4:	e1c430b2 	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
  1206e8:	e30e3240 	movw	r3, #57920	; 0xe240
  1206ec:	e3403014 	movt	r3, #20
  1206f0:	e5933000 	ldr	r3, [r3]
  1206f4:	e5932004 	ldr	r2, [r3, #4]
  1206f8:	e30e3240 	movw	r3, #57920	; 0xe240
  1206fc:	e3403014 	movt	r3, #20
  120700:	e5934000 	ldr	r4, [r3]
  120704:	e1a00002 	mov	r0, r2
  120708:	ebffd7c0 	bl	116610 <lwip_htonl>
  12070c:	e1a03000 	mov	r3, r0
  120710:	e5843004 	str	r3, [r4, #4]
  120714:	e5942004 	ldr	r2, [r4, #4]
  120718:	e30e3250 	movw	r3, #57936	; 0xe250
  12071c:	e3403014 	movt	r3, #20
  120720:	e5832000 	str	r2, [r3]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
  120724:	e30e3240 	movw	r3, #57920	; 0xe240
  120728:	e3403014 	movt	r3, #20
  12072c:	e5933000 	ldr	r3, [r3]
  120730:	e5932008 	ldr	r2, [r3, #8]
  120734:	e30e3240 	movw	r3, #57920	; 0xe240
  120738:	e3403014 	movt	r3, #20
  12073c:	e5934000 	ldr	r4, [r3]
  120740:	e1a00002 	mov	r0, r2
  120744:	ebffd7b1 	bl	116610 <lwip_htonl>
  120748:	e1a03000 	mov	r3, r0
  12074c:	e5843008 	str	r3, [r4, #8]
  120750:	e5942008 	ldr	r2, [r4, #8]
  120754:	e30e3254 	movw	r3, #57940	; 0xe254
  120758:	e3403014 	movt	r3, #20
  12075c:	e5832000 	str	r2, [r3]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
  120760:	e30e3240 	movw	r3, #57920	; 0xe240
  120764:	e3403014 	movt	r3, #20
  120768:	e5933000 	ldr	r3, [r3]
  12076c:	e1d330be 	ldrh	r3, [r3, #14]
  120770:	e6ff2073 	uxth	r2, r3
  120774:	e30e3240 	movw	r3, #57920	; 0xe240
  120778:	e3403014 	movt	r3, #20
  12077c:	e5934000 	ldr	r4, [r3]
  120780:	e1a00002 	mov	r0, r2
  120784:	ebffd795 	bl	1165e0 <lwip_htons>
  120788:	e1a03000 	mov	r3, r0
  12078c:	e1c430be 	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
  120790:	e30e3240 	movw	r3, #57920	; 0xe240
  120794:	e3403014 	movt	r3, #20
  120798:	e5933000 	ldr	r3, [r3]
  12079c:	e1d330bc 	ldrh	r3, [r3, #12]
  1207a0:	e6ff3073 	uxth	r3, r3
  1207a4:	e1a00003 	mov	r0, r3
  1207a8:	ebffd78c 	bl	1165e0 <lwip_htons>
  1207ac:	e1a03000 	mov	r3, r0
  1207b0:	e6ef3073 	uxtb	r3, r3
  1207b4:	e203303f 	and	r3, r3, #63	; 0x3f
  1207b8:	e6ef2073 	uxtb	r2, r3
  1207bc:	e30e325c 	movw	r3, #57948	; 0xe25c
  1207c0:	e3403014 	movt	r3, #20
  1207c4:	e5c32000 	strb	r2, [r3]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  1207c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1207cc:	e1d320b8 	ldrh	r2, [r3, #8]
  1207d0:	e30e325c 	movw	r3, #57948	; 0xe25c
  1207d4:	e3403014 	movt	r3, #20
  1207d8:	e5d33000 	ldrb	r3, [r3]
  1207dc:	e2033003 	and	r3, r3, #3
  1207e0:	e3530000 	cmp	r3, #0
  1207e4:	13a03001 	movne	r3, #1
  1207e8:	03a03000 	moveq	r3, #0
  1207ec:	e6ef3073 	uxtb	r3, r3
  1207f0:	e6ff3073 	uxth	r3, r3
  1207f4:	e0823003 	add	r3, r2, r3
  1207f8:	e6ff2073 	uxth	r2, r3
  1207fc:	e30e325a 	movw	r3, #57946	; 0xe25a
  120800:	e3403014 	movt	r3, #20
  120804:	e1c320b0 	strh	r2, [r3]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
  120808:	e3a03000 	mov	r3, #0
  12080c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  120810:	e30e3c04 	movw	r3, #60420	; 0xec04
  120814:	e3403056 	movt	r3, #86	; 0x56
  120818:	e5933000 	ldr	r3, [r3]
  12081c:	e50b3010 	str	r3, [fp, #-16]
  120820:	ea000077 	b	120a04 <tcp_input+0x76c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
  120824:	e51b3010 	ldr	r3, [fp, #-16]
  120828:	e5933014 	ldr	r3, [r3, #20]
  12082c:	e3530000 	cmp	r3, #0
  120830:	1a000006 	bne	120850 <tcp_input+0x5b8>
  120834:	e3080318 	movw	r0, #33560	; 0x8318
  120838:	e3400014 	movt	r0, #20
  12083c:	ebff8a34 	bl	103114 <rt_kprintf>
  120840:	e3a010e0 	mov	r1, #224	; 0xe0
  120844:	e30802bc 	movw	r0, #33468	; 0x82bc
  120848:	e3400014 	movt	r0, #20
  12084c:	ebffaa27 	bl	10b0f0 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
  120850:	e51b3010 	ldr	r3, [fp, #-16]
  120854:	e5933014 	ldr	r3, [r3, #20]
  120858:	e353000a 	cmp	r3, #10
  12085c:	1a000006 	bne	12087c <tcp_input+0x5e4>
  120860:	e3080340 	movw	r0, #33600	; 0x8340
  120864:	e3400014 	movt	r0, #20
  120868:	ebff8a29 	bl	103114 <rt_kprintf>
  12086c:	e3a010e1 	mov	r1, #225	; 0xe1
  120870:	e30802bc 	movw	r0, #33468	; 0x82bc
  120874:	e3400014 	movt	r0, #20
  120878:	ebffaa1c 	bl	10b0f0 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
  12087c:	e51b3010 	ldr	r3, [fp, #-16]
  120880:	e5933014 	ldr	r3, [r3, #20]
  120884:	e3530001 	cmp	r3, #1
  120888:	1a000006 	bne	1208a8 <tcp_input+0x610>
  12088c:	e308036c 	movw	r0, #33644	; 0x836c
  120890:	e3400014 	movt	r0, #20
  120894:	ebff8a1e 	bl	103114 <rt_kprintf>
  120898:	e3a010e2 	mov	r1, #226	; 0xe2
  12089c:	e30802bc 	movw	r0, #33468	; 0x82bc
  1208a0:	e3400014 	movt	r0, #20
  1208a4:	ebffaa11 	bl	10b0f0 <sys_arch_assert>
    if (pcb->remote_port == tcphdr->src &&
  1208a8:	e51b3010 	ldr	r3, [fp, #-16]
  1208ac:	e1d321bc 	ldrh	r2, [r3, #28]
  1208b0:	e30e3240 	movw	r3, #57920	; 0xe240
  1208b4:	e3403014 	movt	r3, #20
  1208b8:	e5933000 	ldr	r3, [r3]
  1208bc:	e1d330b0 	ldrh	r3, [r3]
  1208c0:	e6ff3073 	uxth	r3, r3
  1208c4:	e1520003 	cmp	r2, r3
  1208c8:	1a000048 	bne	1209f0 <tcp_input+0x758>
        pcb->local_port == tcphdr->dest &&
  1208cc:	e51b3010 	ldr	r3, [fp, #-16]
  1208d0:	e1d321ba 	ldrh	r2, [r3, #26]
  1208d4:	e30e3240 	movw	r3, #57920	; 0xe240
  1208d8:	e3403014 	movt	r3, #20
  1208dc:	e5933000 	ldr	r3, [r3]
  1208e0:	e1d330b2 	ldrh	r3, [r3, #2]
  1208e4:	e6ff3073 	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
  1208e8:	e1520003 	cmp	r2, r3
  1208ec:	1a00003f 	bne	1209f0 <tcp_input+0x758>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  1208f0:	e51b3010 	ldr	r3, [fp, #-16]
  1208f4:	e5932004 	ldr	r2, [r3, #4]
  1208f8:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1208fc:	e3403014 	movt	r3, #20
  120900:	e5933010 	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
  120904:	e1520003 	cmp	r2, r3
  120908:	1a000038 	bne	1209f0 <tcp_input+0x758>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  12090c:	e51b3010 	ldr	r3, [fp, #-16]
  120910:	e5932000 	ldr	r2, [r3]
  120914:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  120918:	e3403014 	movt	r3, #20
  12091c:	e5933014 	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120920:	e1520003 	cmp	r2, r3
  120924:	1a000031 	bne	1209f0 <tcp_input+0x758>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
  120928:	e51b3010 	ldr	r3, [fp, #-16]
  12092c:	e593300c 	ldr	r3, [r3, #12]
  120930:	e51b2010 	ldr	r2, [fp, #-16]
  120934:	e1520003 	cmp	r2, r3
  120938:	1a000006 	bne	120958 <tcp_input+0x6c0>
  12093c:	e3080394 	movw	r0, #33684	; 0x8394
  120940:	e3400014 	movt	r0, #20
  120944:	ebff89f2 	bl	103114 <rt_kprintf>
  120948:	e3a010ea 	mov	r1, #234	; 0xea
  12094c:	e30802bc 	movw	r0, #33468	; 0x82bc
  120950:	e3400014 	movt	r0, #20
  120954:	ebffa9e5 	bl	10b0f0 <sys_arch_assert>
      if (prev != NULL) {
  120958:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12095c:	e3530000 	cmp	r3, #0
  120960:	0a00000d 	beq	12099c <tcp_input+0x704>
        prev->next = pcb->next;
  120964:	e51b3010 	ldr	r3, [fp, #-16]
  120968:	e593200c 	ldr	r2, [r3, #12]
  12096c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120970:	e583200c 	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
  120974:	e30e3c04 	movw	r3, #60420	; 0xec04
  120978:	e3403056 	movt	r3, #86	; 0x56
  12097c:	e5932000 	ldr	r2, [r3]
  120980:	e51b3010 	ldr	r3, [fp, #-16]
  120984:	e583200c 	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
  120988:	e30e3c04 	movw	r3, #60420	; 0xec04
  12098c:	e3403056 	movt	r3, #86	; 0x56
  120990:	e51b2010 	ldr	r2, [fp, #-16]
  120994:	e5832000 	str	r2, [r3]
  120998:	ea000007 	b	1209bc <tcp_input+0x724>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  12099c:	e30e3a14 	movw	r3, #59924	; 0xea14
  1209a0:	e3403056 	movt	r3, #86	; 0x56
  1209a4:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  1209a8:	e2833001 	add	r3, r3, #1
  1209ac:	e6ff2073 	uxth	r2, r3
  1209b0:	e30e3a14 	movw	r3, #59924	; 0xea14
  1209b4:	e3403056 	movt	r3, #86	; 0x56
  1209b8:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
  1209bc:	e51b3010 	ldr	r3, [fp, #-16]
  1209c0:	e593300c 	ldr	r3, [r3, #12]
  1209c4:	e51b2010 	ldr	r2, [fp, #-16]
  1209c8:	e1520003 	cmp	r2, r3
  1209cc:	1a000010 	bne	120a14 <tcp_input+0x77c>
  1209d0:	e30803c0 	movw	r0, #33728	; 0x83c0
  1209d4:	e3400014 	movt	r0, #20
  1209d8:	ebff89cd 	bl	103114 <rt_kprintf>
  1209dc:	e3a010f2 	mov	r1, #242	; 0xf2
  1209e0:	e30802bc 	movw	r0, #33468	; 0x82bc
  1209e4:	e3400014 	movt	r0, #20
  1209e8:	ebffa9c0 	bl	10b0f0 <sys_arch_assert>
      break;
  1209ec:	ea000008 	b	120a14 <tcp_input+0x77c>
    }
    prev = pcb;
  1209f0:	e51b3010 	ldr	r3, [fp, #-16]
  1209f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  1209f8:	e51b3010 	ldr	r3, [fp, #-16]
  1209fc:	e593300c 	ldr	r3, [r3, #12]
  120a00:	e50b3010 	str	r3, [fp, #-16]
  120a04:	e51b3010 	ldr	r3, [fp, #-16]
  120a08:	e3530000 	cmp	r3, #0
  120a0c:	1affff84 	bne	120824 <tcp_input+0x58c>
  120a10:	ea000000 	b	120a18 <tcp_input+0x780>
      break;
  120a14:	e320f000 	nop	{0}
  }

  if (pcb == NULL) {
  120a18:	e51b3010 	ldr	r3, [fp, #-16]
  120a1c:	e3530000 	cmp	r3, #0
  120a20:	1a00008e 	bne	120c60 <tcp_input+0x9c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  120a24:	e30e3c14 	movw	r3, #60436	; 0xec14
  120a28:	e3403056 	movt	r3, #86	; 0x56
  120a2c:	e5933000 	ldr	r3, [r3]
  120a30:	e50b3010 	str	r3, [fp, #-16]
  120a34:	ea000032 	b	120b04 <tcp_input+0x86c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  120a38:	e51b3010 	ldr	r3, [fp, #-16]
  120a3c:	e5933014 	ldr	r3, [r3, #20]
  120a40:	e353000a 	cmp	r3, #10
  120a44:	0a000006 	beq	120a64 <tcp_input+0x7cc>
  120a48:	e30803ec 	movw	r0, #33772	; 0x83ec
  120a4c:	e3400014 	movt	r0, #20
  120a50:	ebff89af 	bl	103114 <rt_kprintf>
  120a54:	e3a010fc 	mov	r1, #252	; 0xfc
  120a58:	e30802bc 	movw	r0, #33468	; 0x82bc
  120a5c:	e3400014 	movt	r0, #20
  120a60:	ebffa9a2 	bl	10b0f0 <sys_arch_assert>
      if (pcb->remote_port == tcphdr->src &&
  120a64:	e51b3010 	ldr	r3, [fp, #-16]
  120a68:	e1d321bc 	ldrh	r2, [r3, #28]
  120a6c:	e30e3240 	movw	r3, #57920	; 0xe240
  120a70:	e3403014 	movt	r3, #20
  120a74:	e5933000 	ldr	r3, [r3]
  120a78:	e1d330b0 	ldrh	r3, [r3]
  120a7c:	e6ff3073 	uxth	r3, r3
  120a80:	e1520003 	cmp	r2, r3
  120a84:	1a00001b 	bne	120af8 <tcp_input+0x860>
          pcb->local_port == tcphdr->dest &&
  120a88:	e51b3010 	ldr	r3, [fp, #-16]
  120a8c:	e1d321ba 	ldrh	r2, [r3, #26]
  120a90:	e30e3240 	movw	r3, #57920	; 0xe240
  120a94:	e3403014 	movt	r3, #20
  120a98:	e5933000 	ldr	r3, [r3]
  120a9c:	e1d330b2 	ldrh	r3, [r3, #2]
  120aa0:	e6ff3073 	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
  120aa4:	e1520003 	cmp	r2, r3
  120aa8:	1a000012 	bne	120af8 <tcp_input+0x860>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120aac:	e51b3010 	ldr	r3, [fp, #-16]
  120ab0:	e5932004 	ldr	r2, [r3, #4]
  120ab4:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  120ab8:	e3403014 	movt	r3, #20
  120abc:	e5933010 	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
  120ac0:	e1520003 	cmp	r2, r3
  120ac4:	1a00000b 	bne	120af8 <tcp_input+0x860>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  120ac8:	e51b3010 	ldr	r3, [fp, #-16]
  120acc:	e5932000 	ldr	r2, [r3]
  120ad0:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  120ad4:	e3403014 	movt	r3, #20
  120ad8:	e5933014 	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120adc:	e1520003 	cmp	r2, r3
  120ae0:	1a000004 	bne	120af8 <tcp_input+0x860>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
  120ae4:	e51b0010 	ldr	r0, [fp, #-16]
  120ae8:	eb0002d8 	bl	121650 <tcp_timewait_input>
        pbuf_free(p);
  120aec:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120af0:	ebffe8f1 	bl	11aebc <pbuf_free>
        return;
  120af4:	ea0001f7 	b	1212d8 <tcp_input+0x1040>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  120af8:	e51b3010 	ldr	r3, [fp, #-16]
  120afc:	e593300c 	ldr	r3, [r3, #12]
  120b00:	e50b3010 	str	r3, [fp, #-16]
  120b04:	e51b3010 	ldr	r3, [fp, #-16]
  120b08:	e3530000 	cmp	r3, #0
  120b0c:	1affffc9 	bne	120a38 <tcp_input+0x7a0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
  120b10:	e3a03000 	mov	r3, #0
  120b14:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  120b18:	e30e3c0c 	movw	r3, #60428	; 0xec0c
  120b1c:	e3403056 	movt	r3, #86	; 0x56
  120b20:	e5933000 	ldr	r3, [r3]
  120b24:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  120b28:	ea00001f 	b	120bac <tcp_input+0x914>
      if (lpcb->local_port == tcphdr->dest) {
  120b2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b30:	e1d321ba 	ldrh	r2, [r3, #26]
  120b34:	e30e3240 	movw	r3, #57920	; 0xe240
  120b38:	e3403014 	movt	r3, #20
  120b3c:	e5933000 	ldr	r3, [r3]
  120b40:	e1d330b2 	ldrh	r3, [r3, #2]
  120b44:	e6ff3073 	uxth	r3, r3
  120b48:	e1520003 	cmp	r2, r3
  120b4c:	1a000011 	bne	120b98 <tcp_input+0x900>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
  120b50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b54:	e5932000 	ldr	r2, [r3]
  120b58:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  120b5c:	e3403014 	movt	r3, #20
  120b60:	e5933014 	ldr	r3, [r3, #20]
  120b64:	e1520003 	cmp	r2, r3
  120b68:	0a000013 	beq	120bbc <tcp_input+0x924>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
  120b6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b70:	e3530000 	cmp	r3, #0
  120b74:	0a000003 	beq	120b88 <tcp_input+0x8f0>
  120b78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b7c:	e5933000 	ldr	r3, [r3]
  120b80:	e3530000 	cmp	r3, #0
  120b84:	1a000003 	bne	120b98 <tcp_input+0x900>
            /* found an ANY-match */
#if SO_REUSE
            lpcb_any = lpcb;
  120b88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b8c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            lpcb_prev = prev;
  120b90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120b94:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
  120b98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b9c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  120ba0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120ba4:	e593300c 	ldr	r3, [r3, #12]
  120ba8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  120bac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120bb0:	e3530000 	cmp	r3, #0
  120bb4:	1affffdc 	bne	120b2c <tcp_input+0x894>
  120bb8:	ea000000 	b	120bc0 <tcp_input+0x928>
            break;
  120bbc:	e320f000 	nop	{0}
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
  120bc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120bc4:	e3530000 	cmp	r3, #0
  120bc8:	1a000003 	bne	120bdc <tcp_input+0x944>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
  120bcc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  120bd0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      prev = lpcb_prev;
  120bd4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  120bd8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
  120bdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120be0:	e3530000 	cmp	r3, #0
  120be4:	0a00001d 	beq	120c60 <tcp_input+0x9c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
  120be8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120bec:	e3530000 	cmp	r3, #0
  120bf0:	0a00000d 	beq	120c2c <tcp_input+0x994>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  120bf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120bf8:	e593200c 	ldr	r2, [r3, #12]
  120bfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120c00:	e583200c 	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  120c04:	e30e3c0c 	movw	r3, #60428	; 0xec0c
  120c08:	e3403056 	movt	r3, #86	; 0x56
  120c0c:	e5932000 	ldr	r2, [r3]
  120c10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120c14:	e583200c 	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
  120c18:	e30e3c0c 	movw	r3, #60428	; 0xec0c
  120c1c:	e3403056 	movt	r3, #86	; 0x56
  120c20:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  120c24:	e5832000 	str	r2, [r3]
  120c28:	ea000007 	b	120c4c <tcp_input+0x9b4>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  120c2c:	e30e3a14 	movw	r3, #59924	; 0xea14
  120c30:	e3403056 	movt	r3, #86	; 0x56
  120c34:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  120c38:	e2833001 	add	r3, r3, #1
  120c3c:	e6ff2073 	uxth	r2, r3
  120c40:	e30e3a14 	movw	r3, #59924	; 0xea14
  120c44:	e3403056 	movt	r3, #86	; 0x56
  120c48:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
  120c4c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  120c50:	eb0001a4 	bl	1212e8 <tcp_listen_input>
      pbuf_free(p);
  120c54:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120c58:	ebffe897 	bl	11aebc <pbuf_free>
      return;
  120c5c:	ea00019d 	b	1212d8 <tcp_input+0x1040>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
  120c60:	e51b3010 	ldr	r3, [fp, #-16]
  120c64:	e3530000 	cmp	r3, #0
  120c68:	0a00014f 	beq	1211ac <tcp_input+0xf14>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
  120c6c:	e30e3230 	movw	r3, #57904	; 0xe230
  120c70:	e3403014 	movt	r3, #20
  120c74:	e3a02000 	mov	r2, #0
  120c78:	e5832000 	str	r2, [r3]
    inseg.len = p->tot_len;
  120c7c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120c80:	e1d320b8 	ldrh	r2, [r3, #8]
  120c84:	e30e3230 	movw	r3, #57904	; 0xe230
  120c88:	e3403014 	movt	r3, #20
  120c8c:	e1c320b8 	strh	r2, [r3, #8]
    inseg.p = p;
  120c90:	e30e3230 	movw	r3, #57904	; 0xe230
  120c94:	e3403014 	movt	r3, #20
  120c98:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  120c9c:	e5832004 	str	r2, [r3, #4]
    inseg.tcphdr = tcphdr;
  120ca0:	e30e3240 	movw	r3, #57920	; 0xe240
  120ca4:	e3403014 	movt	r3, #20
  120ca8:	e5932000 	ldr	r2, [r3]
  120cac:	e30e3230 	movw	r3, #57904	; 0xe230
  120cb0:	e3403014 	movt	r3, #20
  120cb4:	e583200c 	str	r2, [r3, #12]

    recv_data = NULL;
  120cb8:	e30e3260 	movw	r3, #57952	; 0xe260
  120cbc:	e3403014 	movt	r3, #20
  120cc0:	e3a02000 	mov	r2, #0
  120cc4:	e5832000 	str	r2, [r3]
    recv_flags = 0;
  120cc8:	e30e325d 	movw	r3, #57949	; 0xe25d
  120ccc:	e3403014 	movt	r3, #20
  120cd0:	e3a02000 	mov	r2, #0
  120cd4:	e5c32000 	strb	r2, [r3]
    recv_acked = 0;
  120cd8:	e30e3258 	movw	r3, #57944	; 0xe258
  120cdc:	e3403014 	movt	r3, #20
  120ce0:	e3a02000 	mov	r2, #0
  120ce4:	e1c320b0 	strh	r2, [r3]

    if (flags & TCP_PSH) {
  120ce8:	e30e325c 	movw	r3, #57948	; 0xe25c
  120cec:	e3403014 	movt	r3, #20
  120cf0:	e5d33000 	ldrb	r3, [r3]
  120cf4:	e2033008 	and	r3, r3, #8
  120cf8:	e3530000 	cmp	r3, #0
  120cfc:	0a000005 	beq	120d18 <tcp_input+0xa80>
      p->flags |= PBUF_FLAG_PUSH;
  120d00:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120d04:	e5d3300d 	ldrb	r3, [r3, #13]
  120d08:	e3833001 	orr	r3, r3, #1
  120d0c:	e6ef2073 	uxtb	r2, r3
  120d10:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120d14:	e5c3200d 	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
  120d18:	e51b3010 	ldr	r3, [fp, #-16]
  120d1c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120d20:	e3530000 	cmp	r3, #0
  120d24:	0a000023 	beq	120db8 <tcp_input+0xb20>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  120d28:	e51b0010 	ldr	r0, [fp, #-16]
  120d2c:	ebfff968 	bl	11f2d4 <tcp_process_refused_data>
  120d30:	e1a03000 	mov	r3, r0
  120d34:	e373000d 	cmn	r3, #13
  120d38:	0a000008 	beq	120d60 <tcp_input+0xac8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  120d3c:	e51b3010 	ldr	r3, [fp, #-16]
  120d40:	e5933078 	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  120d44:	e3530000 	cmp	r3, #0
  120d48:	0a00001a 	beq	120db8 <tcp_input+0xb20>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  120d4c:	e30e325a 	movw	r3, #57946	; 0xe25a
  120d50:	e3403014 	movt	r3, #20
  120d54:	e1d330b0 	ldrh	r3, [r3]
  120d58:	e3530000 	cmp	r3, #0
  120d5c:	0a000015 	beq	120db8 <tcp_input+0xb20>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
  120d60:	e51b3010 	ldr	r3, [fp, #-16]
  120d64:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  120d68:	e3530000 	cmp	r3, #0
  120d6c:	1a000001 	bne	120d78 <tcp_input+0xae0>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
  120d70:	e51b0010 	ldr	r0, [fp, #-16]
  120d74:	eb001419 	bl	125de0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
  120d78:	e30e3a14 	movw	r3, #59924	; 0xea14
  120d7c:	e3403056 	movt	r3, #86	; 0x56
  120d80:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  120d84:	e2833001 	add	r3, r3, #1
  120d88:	e6ff2073 	uxth	r2, r3
  120d8c:	e30e3a14 	movw	r3, #59924	; 0xea14
  120d90:	e3403056 	movt	r3, #86	; 0x56
  120d94:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
        MIB2_STATS_INC(mib2.tcpinerrs);
  120d98:	e30e3a14 	movw	r3, #59924	; 0xea14
  120d9c:	e3403056 	movt	r3, #86	; 0x56
  120da0:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  120da4:	e2832001 	add	r2, r3, #1
  120da8:	e30e3a14 	movw	r3, #59924	; 0xea14
  120dac:	e3403056 	movt	r3, #86	; 0x56
  120db0:	e5832188 	str	r2, [r3, #392]	; 0x188
        goto aborted;
  120db4:	ea0000e5 	b	121150 <tcp_input+0xeb8>
      }
    }
    tcp_input_pcb = pcb;
  120db8:	e30e3c18 	movw	r3, #60440	; 0xec18
  120dbc:	e3403056 	movt	r3, #86	; 0x56
  120dc0:	e51b2010 	ldr	r2, [fp, #-16]
  120dc4:	e5832000 	str	r2, [r3]
    err = tcp_process(pcb);
  120dc8:	e51b0010 	ldr	r0, [fp, #-16]
  120dcc:	eb00027e 	bl	1217cc <tcp_process>
  120dd0:	e1a03000 	mov	r3, r0
  120dd4:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
  120dd8:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120ddc:	e373000d 	cmn	r3, #13
  120de0:	0a0000d3 	beq	121134 <tcp_input+0xe9c>
      if (recv_flags & TF_RESET) {
  120de4:	e30e325d 	movw	r3, #57949	; 0xe25d
  120de8:	e3403014 	movt	r3, #20
  120dec:	e5d33000 	ldrb	r3, [r3]
  120df0:	e2033008 	and	r3, r3, #8
  120df4:	e3530000 	cmp	r3, #0
  120df8:	0a000012 	beq	120e48 <tcp_input+0xbb0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
  120dfc:	e51b3010 	ldr	r3, [fp, #-16]
  120e00:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120e04:	e3530000 	cmp	r3, #0
  120e08:	0a000006 	beq	120e28 <tcp_input+0xb90>
  120e0c:	e51b3010 	ldr	r3, [fp, #-16]
  120e10:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120e14:	e51b2010 	ldr	r2, [fp, #-16]
  120e18:	e5922010 	ldr	r2, [r2, #16]
  120e1c:	e3e0100d 	mvn	r1, #13
  120e20:	e1a00002 	mov	r0, r2
  120e24:	e12fff33 	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  120e28:	e51b1010 	ldr	r1, [fp, #-16]
  120e2c:	e30e0c04 	movw	r0, #60420	; 0xec04
  120e30:	e3400056 	movt	r0, #86	; 0x56
  120e34:	ebfffc11 	bl	11fe80 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
  120e38:	e51b1010 	ldr	r1, [fp, #-16]
  120e3c:	e3a00002 	mov	r0, #2
  120e40:	ebffe10f 	bl	119284 <memp_free>
  120e44:	ea0000c1 	b	121150 <tcp_input+0xeb8>
      } else {
        err = ERR_OK;
  120e48:	e3a03000 	mov	r3, #0
  120e4c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
  120e50:	e30e3258 	movw	r3, #57944	; 0xe258
  120e54:	e3403014 	movt	r3, #20
  120e58:	e1d330b0 	ldrh	r3, [r3]
  120e5c:	e3530000 	cmp	r3, #0
  120e60:	0a00001a 	beq	120ed0 <tcp_input+0xc38>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
  120e64:	e30e3258 	movw	r3, #57944	; 0xe258
  120e68:	e3403014 	movt	r3, #20
  120e6c:	e1d330b0 	ldrh	r3, [r3]
  120e70:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
  120e74:	e51b3010 	ldr	r3, [fp, #-16]
  120e78:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  120e7c:	e3530000 	cmp	r3, #0
  120e80:	0a000009 	beq	120eac <tcp_input+0xc14>
  120e84:	e51b3010 	ldr	r3, [fp, #-16]
  120e88:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  120e8c:	e51b2010 	ldr	r2, [fp, #-16]
  120e90:	e5920010 	ldr	r0, [r2, #16]
  120e94:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  120e98:	e51b1010 	ldr	r1, [fp, #-16]
  120e9c:	e12fff33 	blx	r3
  120ea0:	e1a03000 	mov	r3, r0
  120ea4:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120ea8:	ea000001 	b	120eb4 <tcp_input+0xc1c>
  120eac:	e3a03000 	mov	r3, #0
  120eb0:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  120eb4:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120eb8:	e373000d 	cmn	r3, #13
  120ebc:	0a00009e 	beq	12113c <tcp_input+0xea4>
              goto aborted;
            }
          }
          recv_acked = 0;
  120ec0:	e30e3258 	movw	r3, #57944	; 0xe258
  120ec4:	e3403014 	movt	r3, #20
  120ec8:	e3a02000 	mov	r2, #0
  120ecc:	e1c320b0 	strh	r2, [r3]
        }
        if (recv_flags & TF_CLOSED) {
  120ed0:	e30e325d 	movw	r3, #57949	; 0xe25d
  120ed4:	e3403014 	movt	r3, #20
  120ed8:	e5d33000 	ldrb	r3, [r3]
  120edc:	e2033010 	and	r3, r3, #16
  120ee0:	e3530000 	cmp	r3, #0
  120ee4:	0a000017 	beq	120f48 <tcp_input+0xcb0>
          /* The connection has been closed and we will deallocate the
             PCB. */
          if (!(pcb->flags & TF_RXCLOSED)) {
  120ee8:	e51b3010 	ldr	r3, [fp, #-16]
  120eec:	e5d3301e 	ldrb	r3, [r3, #30]
  120ef0:	e2033010 	and	r3, r3, #16
  120ef4:	e3530000 	cmp	r3, #0
  120ef8:	1a00000a 	bne	120f28 <tcp_input+0xc90>
            /* Connection closed although the application has only shut down the
               tx side: call the PCB's err callback and indicate the closure to
               ensure the application doesn't continue using the PCB. */
            TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
  120efc:	e51b3010 	ldr	r3, [fp, #-16]
  120f00:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120f04:	e3530000 	cmp	r3, #0
  120f08:	0a000006 	beq	120f28 <tcp_input+0xc90>
  120f0c:	e51b3010 	ldr	r3, [fp, #-16]
  120f10:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120f14:	e51b2010 	ldr	r2, [fp, #-16]
  120f18:	e5922010 	ldr	r2, [r2, #16]
  120f1c:	e3e0100e 	mvn	r1, #14
  120f20:	e1a00002 	mov	r0, r2
  120f24:	e12fff33 	blx	r3
          }
          tcp_pcb_remove(&tcp_active_pcbs, pcb);
  120f28:	e51b1010 	ldr	r1, [fp, #-16]
  120f2c:	e30e0c04 	movw	r0, #60420	; 0xec04
  120f30:	e3400056 	movt	r0, #86	; 0x56
  120f34:	ebfffbd1 	bl	11fe80 <tcp_pcb_remove>
          memp_free(MEMP_TCP_PCB, pcb);
  120f38:	e51b1010 	ldr	r1, [fp, #-16]
  120f3c:	e3a00002 	mov	r0, #2
  120f40:	ebffe0cf 	bl	119284 <memp_free>
          goto aborted;
  120f44:	ea000081 	b	121150 <tcp_input+0xeb8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
  120f48:	e30e3260 	movw	r3, #57952	; 0xe260
  120f4c:	e3403014 	movt	r3, #20
  120f50:	e5933000 	ldr	r3, [r3]
  120f54:	e3530000 	cmp	r3, #0
  120f58:	0a00003c 	beq	121050 <tcp_input+0xdb8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
  120f5c:	e51b3010 	ldr	r3, [fp, #-16]
  120f60:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120f64:	e3530000 	cmp	r3, #0
  120f68:	0a000006 	beq	120f88 <tcp_input+0xcf0>
  120f6c:	e308041c 	movw	r0, #33820	; 0x841c
  120f70:	e3400014 	movt	r0, #20
  120f74:	ebff8866 	bl	103114 <rt_kprintf>
  120f78:	e3a01f6b 	mov	r1, #428	; 0x1ac
  120f7c:	e30802bc 	movw	r0, #33468	; 0x82bc
  120f80:	e3400014 	movt	r0, #20
  120f84:	ebffa859 	bl	10b0f0 <sys_arch_assert>
          if (pcb->flags & TF_RXCLOSED) {
  120f88:	e51b3010 	ldr	r3, [fp, #-16]
  120f8c:	e5d3301e 	ldrb	r3, [r3, #30]
  120f90:	e2033010 	and	r3, r3, #16
  120f94:	e3530000 	cmp	r3, #0
  120f98:	0a000007 	beq	120fbc <tcp_input+0xd24>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
  120f9c:	e30e3260 	movw	r3, #57952	; 0xe260
  120fa0:	e3403014 	movt	r3, #20
  120fa4:	e5933000 	ldr	r3, [r3]
  120fa8:	e1a00003 	mov	r0, r3
  120fac:	ebffe7c2 	bl	11aebc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
  120fb0:	e51b0010 	ldr	r0, [fp, #-16]
  120fb4:	ebfff29a 	bl	11da24 <tcp_abort>
            goto aborted;
  120fb8:	ea000064 	b	121150 <tcp_input+0xeb8>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  120fbc:	e51b3010 	ldr	r3, [fp, #-16]
  120fc0:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  120fc4:	e3530000 	cmp	r3, #0
  120fc8:	0a00000c 	beq	121000 <tcp_input+0xd68>
  120fcc:	e51b3010 	ldr	r3, [fp, #-16]
  120fd0:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  120fd4:	e51b3010 	ldr	r3, [fp, #-16]
  120fd8:	e5930010 	ldr	r0, [r3, #16]
  120fdc:	e30e3260 	movw	r3, #57952	; 0xe260
  120fe0:	e3403014 	movt	r3, #20
  120fe4:	e5932000 	ldr	r2, [r3]
  120fe8:	e3a03000 	mov	r3, #0
  120fec:	e51b1010 	ldr	r1, [fp, #-16]
  120ff0:	e12fff34 	blx	r4
  120ff4:	e1a03000 	mov	r3, r0
  120ff8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120ffc:	ea000008 	b	121024 <tcp_input+0xd8c>
  121000:	e30e3260 	movw	r3, #57952	; 0xe260
  121004:	e3403014 	movt	r3, #20
  121008:	e5932000 	ldr	r2, [r3]
  12100c:	e3a03000 	mov	r3, #0
  121010:	e51b1010 	ldr	r1, [fp, #-16]
  121014:	e3a00000 	mov	r0, #0
  121018:	ebfff956 	bl	11f578 <tcp_recv_null>
  12101c:	e1a03000 	mov	r3, r0
  121020:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
          if (err == ERR_ABRT) {
  121024:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  121028:	e373000d 	cmn	r3, #13
  12102c:	0a000044 	beq	121144 <tcp_input+0xeac>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
  121030:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  121034:	e3530000 	cmp	r3, #0
  121038:	0a000004 	beq	121050 <tcp_input+0xdb8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
  12103c:	e30e3260 	movw	r3, #57952	; 0xe260
  121040:	e3403014 	movt	r3, #20
  121044:	e5932000 	ldr	r2, [r3]
  121048:	e51b3010 	ldr	r3, [fp, #-16]
  12104c:	e5832078 	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
  121050:	e30e325d 	movw	r3, #57949	; 0xe25d
  121054:	e3403014 	movt	r3, #20
  121058:	e5d33000 	ldrb	r3, [r3]
  12105c:	e2033020 	and	r3, r3, #32
  121060:	e3530000 	cmp	r3, #0
  121064:	0a00002b 	beq	121118 <tcp_input+0xe80>
          if (pcb->refused_data != NULL) {
  121068:	e51b3010 	ldr	r3, [fp, #-16]
  12106c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  121070:	e3530000 	cmp	r3, #0
  121074:	0a000008 	beq	12109c <tcp_input+0xe04>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  121078:	e51b3010 	ldr	r3, [fp, #-16]
  12107c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  121080:	e5d3200d 	ldrb	r2, [r3, #13]
  121084:	e51b3010 	ldr	r3, [fp, #-16]
  121088:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  12108c:	e3822020 	orr	r2, r2, #32
  121090:	e6ef2072 	uxtb	r2, r2
  121094:	e5c3200d 	strb	r2, [r3, #13]
  121098:	ea00001e 	b	121118 <tcp_input+0xe80>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  12109c:	e51b3010 	ldr	r3, [fp, #-16]
  1210a0:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  1210a4:	e30f2fff 	movw	r2, #65535	; 0xffff
  1210a8:	e1530002 	cmp	r3, r2
  1210ac:	0a000005 	beq	1210c8 <tcp_input+0xe30>
              pcb->rcv_wnd++;
  1210b0:	e51b3010 	ldr	r3, [fp, #-16]
  1210b4:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  1210b8:	e2833001 	add	r3, r3, #1
  1210bc:	e6ff2073 	uxth	r2, r3
  1210c0:	e51b3010 	ldr	r3, [fp, #-16]
  1210c4:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
  1210c8:	e51b3010 	ldr	r3, [fp, #-16]
  1210cc:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  1210d0:	e3530000 	cmp	r3, #0
  1210d4:	0a00000a 	beq	121104 <tcp_input+0xe6c>
  1210d8:	e51b3010 	ldr	r3, [fp, #-16]
  1210dc:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  1210e0:	e51b3010 	ldr	r3, [fp, #-16]
  1210e4:	e5930010 	ldr	r0, [r3, #16]
  1210e8:	e3a03000 	mov	r3, #0
  1210ec:	e3a02000 	mov	r2, #0
  1210f0:	e51b1010 	ldr	r1, [fp, #-16]
  1210f4:	e12fff34 	blx	r4
  1210f8:	e1a03000 	mov	r3, r0
  1210fc:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  121100:	ea000001 	b	12110c <tcp_input+0xe74>
  121104:	e3a03000 	mov	r3, #0
  121108:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  12110c:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  121110:	e373000d 	cmn	r3, #13
  121114:	0a00000c 	beq	12114c <tcp_input+0xeb4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
  121118:	e30e3c18 	movw	r3, #60440	; 0xec18
  12111c:	e3403056 	movt	r3, #86	; 0x56
  121120:	e3a02000 	mov	r2, #0
  121124:	e5832000 	str	r2, [r3]
        /* Try to send something out. */
        tcp_output(pcb);
  121128:	e51b0010 	ldr	r0, [fp, #-16]
  12112c:	eb00138c 	bl	125f64 <tcp_output>
  121130:	ea000006 	b	121150 <tcp_input+0xeb8>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
  121134:	e320f000 	nop	{0}
  121138:	ea000004 	b	121150 <tcp_input+0xeb8>
              goto aborted;
  12113c:	e320f000 	nop	{0}
  121140:	ea000002 	b	121150 <tcp_input+0xeb8>
            goto aborted;
  121144:	e320f000 	nop	{0}
  121148:	ea000000 	b	121150 <tcp_input+0xeb8>
              goto aborted;
  12114c:	e320f000 	nop	{0}
    tcp_input_pcb = NULL;
  121150:	e30e3c18 	movw	r3, #60440	; 0xec18
  121154:	e3403056 	movt	r3, #86	; 0x56
  121158:	e3a02000 	mov	r2, #0
  12115c:	e5832000 	str	r2, [r3]
    recv_data = NULL;
  121160:	e30e3260 	movw	r3, #57952	; 0xe260
  121164:	e3403014 	movt	r3, #20
  121168:	e3a02000 	mov	r2, #0
  12116c:	e5832000 	str	r2, [r3]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
  121170:	e30e3230 	movw	r3, #57904	; 0xe230
  121174:	e3403014 	movt	r3, #20
  121178:	e5933004 	ldr	r3, [r3, #4]
  12117c:	e3530000 	cmp	r3, #0
  121180:	0a000053 	beq	1212d4 <tcp_input+0x103c>
    {
      pbuf_free(inseg.p);
  121184:	e30e3230 	movw	r3, #57904	; 0xe230
  121188:	e3403014 	movt	r3, #20
  12118c:	e5933004 	ldr	r3, [r3, #4]
  121190:	e1a00003 	mov	r0, r3
  121194:	ebffe748 	bl	11aebc <pbuf_free>
      inseg.p = NULL;
  121198:	e30e3230 	movw	r3, #57904	; 0xe230
  12119c:	e3403014 	movt	r3, #20
  1211a0:	e3a02000 	mov	r2, #0
  1211a4:	e5832004 	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
  1211a8:	ea000049 	b	1212d4 <tcp_input+0x103c>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  1211ac:	e30e3240 	movw	r3, #57920	; 0xe240
  1211b0:	e3403014 	movt	r3, #20
  1211b4:	e5933000 	ldr	r3, [r3]
  1211b8:	e1d330bc 	ldrh	r3, [r3, #12]
  1211bc:	e6ff3073 	uxth	r3, r3
  1211c0:	e1a00003 	mov	r0, r3
  1211c4:	ebffd505 	bl	1165e0 <lwip_htons>
  1211c8:	e1a03000 	mov	r3, r0
  1211cc:	e2033004 	and	r3, r3, #4
  1211d0:	e3530000 	cmp	r3, #0
  1211d4:	1a000029 	bne	121280 <tcp_input+0xfe8>
      TCP_STATS_INC(tcp.proterr);
  1211d8:	e30e3a14 	movw	r3, #59924	; 0xea14
  1211dc:	e3403056 	movt	r3, #86	; 0x56
  1211e0:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  1211e4:	e2833001 	add	r3, r3, #1
  1211e8:	e6ff2073 	uxth	r2, r3
  1211ec:	e30e3a14 	movw	r3, #59924	; 0xea14
  1211f0:	e3403056 	movt	r3, #86	; 0x56
  1211f4:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
      TCP_STATS_INC(tcp.drop);
  1211f8:	e30e3a14 	movw	r3, #59924	; 0xea14
  1211fc:	e3403056 	movt	r3, #86	; 0x56
  121200:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  121204:	e2833001 	add	r3, r3, #1
  121208:	e6ff2073 	uxth	r2, r3
  12120c:	e30e3a14 	movw	r3, #59924	; 0xea14
  121210:	e3403056 	movt	r3, #86	; 0x56
  121214:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121218:	e30e3254 	movw	r3, #57940	; 0xe254
  12121c:	e3403014 	movt	r3, #20
  121220:	e5930000 	ldr	r0, [r3]
  121224:	e30e325a 	movw	r3, #57946	; 0xe25a
  121228:	e3403014 	movt	r3, #20
  12122c:	e1d330b0 	ldrh	r3, [r3]
  121230:	e1a02003 	mov	r2, r3
  121234:	e30e3250 	movw	r3, #57936	; 0xe250
  121238:	e3403014 	movt	r3, #20
  12123c:	e5933000 	ldr	r3, [r3]
  121240:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121244:	e30e3240 	movw	r3, #57920	; 0xe240
  121248:	e3403014 	movt	r3, #20
  12124c:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121250:	e1d330b2 	ldrh	r3, [r3, #2]
  121254:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121258:	e30e3240 	movw	r3, #57920	; 0xe240
  12125c:	e3403014 	movt	r3, #20
  121260:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121264:	e1d330b0 	ldrh	r3, [r3]
  121268:	e6ff3073 	uxth	r3, r3
  12126c:	e58d3004 	str	r3, [sp, #4]
  121270:	e58d2000 	str	r2, [sp]
  121274:	e59f3068 	ldr	r3, [pc, #104]	; 1212e4 <tcp_input+0x104c>
  121278:	e59f2060 	ldr	r2, [pc, #96]	; 1212e0 <tcp_input+0x1048>
  12127c:	eb00159e 	bl	1268fc <tcp_rst>
    pbuf_free(p);
  121280:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  121284:	ebffe70c 	bl	11aebc <pbuf_free>
  return;
  121288:	ea000011 	b	1212d4 <tcp_input+0x103c>
dropped:
  TCP_STATS_INC(tcp.drop);
  12128c:	e30e3a14 	movw	r3, #59924	; 0xea14
  121290:	e3403056 	movt	r3, #86	; 0x56
  121294:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  121298:	e2833001 	add	r3, r3, #1
  12129c:	e6ff2073 	uxth	r2, r3
  1212a0:	e30e3a14 	movw	r3, #59924	; 0xea14
  1212a4:	e3403056 	movt	r3, #86	; 0x56
  1212a8:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
  MIB2_STATS_INC(mib2.tcpinerrs);
  1212ac:	e30e3a14 	movw	r3, #59924	; 0xea14
  1212b0:	e3403056 	movt	r3, #86	; 0x56
  1212b4:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  1212b8:	e2832001 	add	r2, r3, #1
  1212bc:	e30e3a14 	movw	r3, #59924	; 0xea14
  1212c0:	e3403056 	movt	r3, #86	; 0x56
  1212c4:	e5832188 	str	r2, [r3, #392]	; 0x188
  pbuf_free(p);
  1212c8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1212cc:	ebffe6fa 	bl	11aebc <pbuf_free>
  1212d0:	ea000000 	b	1212d8 <tcp_input+0x1040>
  return;
  1212d4:	e320f000 	nop	{0}
}
  1212d8:	e24bd008 	sub	sp, fp, #8
  1212dc:	e8bd8810 	pop	{r4, fp, pc}
  1212e0:	0014f60c 	.word	0x0014f60c
  1212e4:	0014f608 	.word	0x0014f608

001212e8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
  1212e8:	e92d4800 	push	{fp, lr}
  1212ec:	e28db004 	add	fp, sp, #4
  1212f0:	e24dd020 	sub	sp, sp, #32
  1212f4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
  1212f8:	e30e325c 	movw	r3, #57948	; 0xe25c
  1212fc:	e3403014 	movt	r3, #20
  121300:	e5d33000 	ldrb	r3, [r3]
  121304:	e2033004 	and	r3, r3, #4
  121308:	e3530000 	cmp	r3, #0
  12130c:	1a0000c8 	bne	121634 <tcp_listen_input+0x34c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
  121310:	e30e325c 	movw	r3, #57948	; 0xe25c
  121314:	e3403014 	movt	r3, #20
  121318:	e5d33000 	ldrb	r3, [r3]
  12131c:	e2033010 	and	r3, r3, #16
  121320:	e3530000 	cmp	r3, #0
  121324:	0a00001a 	beq	121394 <tcp_listen_input+0xac>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121328:	e30e3254 	movw	r3, #57940	; 0xe254
  12132c:	e3403014 	movt	r3, #20
  121330:	e5930000 	ldr	r0, [r3]
  121334:	e30e325a 	movw	r3, #57946	; 0xe25a
  121338:	e3403014 	movt	r3, #20
  12133c:	e1d330b0 	ldrh	r3, [r3]
  121340:	e1a02003 	mov	r2, r3
  121344:	e30e3250 	movw	r3, #57936	; 0xe250
  121348:	e3403014 	movt	r3, #20
  12134c:	e5933000 	ldr	r3, [r3]
  121350:	e0821003 	add	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121354:	e30e3240 	movw	r3, #57920	; 0xe240
  121358:	e3403014 	movt	r3, #20
  12135c:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121360:	e1d330b2 	ldrh	r3, [r3, #2]
  121364:	e6ff2073 	uxth	r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121368:	e30e3240 	movw	r3, #57920	; 0xe240
  12136c:	e3403014 	movt	r3, #20
  121370:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121374:	e1d330b0 	ldrh	r3, [r3]
  121378:	e6ff3073 	uxth	r3, r3
  12137c:	e58d3004 	str	r3, [sp, #4]
  121380:	e58d2000 	str	r2, [sp]
  121384:	e59f32bc 	ldr	r3, [pc, #700]	; 121648 <tcp_listen_input+0x360>
  121388:	e59f22bc 	ldr	r2, [pc, #700]	; 12164c <tcp_listen_input+0x364>
  12138c:	eb00155a 	bl	1268fc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
  121390:	ea0000a9 	b	12163c <tcp_listen_input+0x354>
  } else if (flags & TCP_SYN) {
  121394:	e30e325c 	movw	r3, #57948	; 0xe25c
  121398:	e3403014 	movt	r3, #20
  12139c:	e5d33000 	ldrb	r3, [r3]
  1213a0:	e2033002 	and	r3, r3, #2
  1213a4:	e3530000 	cmp	r3, #0
  1213a8:	0a0000a3 	beq	12163c <tcp_listen_input+0x354>
    npcb = tcp_alloc(pcb->prio);
  1213ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1213b0:	e5d33018 	ldrb	r3, [r3, #24]
  1213b4:	e1a00003 	mov	r0, r3
  1213b8:	ebfff934 	bl	11f890 <tcp_alloc>
  1213bc:	e50b0008 	str	r0, [fp, #-8]
    if (npcb == NULL) {
  1213c0:	e51b3008 	ldr	r3, [fp, #-8]
  1213c4:	e3530000 	cmp	r3, #0
  1213c8:	1a000018 	bne	121430 <tcp_listen_input+0x148>
      TCP_STATS_INC(tcp.memerr);
  1213cc:	e30e3a14 	movw	r3, #59924	; 0xea14
  1213d0:	e3403056 	movt	r3, #86	; 0x56
  1213d4:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  1213d8:	e2833001 	add	r3, r3, #1
  1213dc:	e6ff2073 	uxth	r2, r3
  1213e0:	e30e3a14 	movw	r3, #59924	; 0xea14
  1213e4:	e3403056 	movt	r3, #86	; 0x56
  1213e8:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  1213ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1213f0:	e593301c 	ldr	r3, [r3, #28]
  1213f4:	e3530000 	cmp	r3, #0
  1213f8:	0a000009 	beq	121424 <tcp_listen_input+0x13c>
  1213fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121400:	e593301c 	ldr	r3, [r3, #28]
  121404:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  121408:	e5920010 	ldr	r0, [r2, #16]
  12140c:	e3e02000 	mvn	r2, #0
  121410:	e3a01000 	mov	r1, #0
  121414:	e12fff33 	blx	r3
  121418:	e1a03000 	mov	r3, r0
  12141c:	e54b300e 	strb	r3, [fp, #-14]
      return;
  121420:	ea000086 	b	121640 <tcp_listen_input+0x358>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  121424:	e3e0300f 	mvn	r3, #15
  121428:	e54b300e 	strb	r3, [fp, #-14]
      return;
  12142c:	ea000083 	b	121640 <tcp_listen_input+0x358>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
  121430:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  121434:	e3403014 	movt	r3, #20
  121438:	e5932014 	ldr	r2, [r3, #20]
  12143c:	e51b3008 	ldr	r3, [fp, #-8]
  121440:	e5832000 	str	r2, [r3]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
  121444:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  121448:	e3403014 	movt	r3, #20
  12144c:	e5932010 	ldr	r2, [r3, #16]
  121450:	e51b3008 	ldr	r3, [fp, #-8]
  121454:	e5832004 	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
  121458:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12145c:	e1d321ba 	ldrh	r2, [r3, #26]
  121460:	e51b3008 	ldr	r3, [fp, #-8]
  121464:	e1c321ba 	strh	r2, [r3, #26]
    npcb->remote_port = tcphdr->src;
  121468:	e30e3240 	movw	r3, #57920	; 0xe240
  12146c:	e3403014 	movt	r3, #20
  121470:	e5933000 	ldr	r3, [r3]
  121474:	e1d330b0 	ldrh	r3, [r3]
  121478:	e6ff2073 	uxth	r2, r3
  12147c:	e51b3008 	ldr	r3, [fp, #-8]
  121480:	e1c321bc 	strh	r2, [r3, #28]
    npcb->state = SYN_RCVD;
  121484:	e51b3008 	ldr	r3, [fp, #-8]
  121488:	e3a02003 	mov	r2, #3
  12148c:	e5832014 	str	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
  121490:	e30e3250 	movw	r3, #57936	; 0xe250
  121494:	e3403014 	movt	r3, #20
  121498:	e5933000 	ldr	r3, [r3]
  12149c:	e2832001 	add	r2, r3, #1
  1214a0:	e51b3008 	ldr	r3, [fp, #-8]
  1214a4:	e5832028 	str	r2, [r3, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  1214a8:	e51b3008 	ldr	r3, [fp, #-8]
  1214ac:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1214b0:	e51b3008 	ldr	r3, [fp, #-8]
  1214b4:	e5832030 	str	r2, [r3, #48]	; 0x30
    iss = tcp_next_iss(npcb);
  1214b8:	e51b0008 	ldr	r0, [fp, #-8]
  1214bc:	ebfffadb 	bl	120030 <tcp_next_iss>
  1214c0:	e50b000c 	str	r0, [fp, #-12]
    npcb->snd_wl2 = iss;
  1214c4:	e51b3008 	ldr	r3, [fp, #-8]
  1214c8:	e51b200c 	ldr	r2, [fp, #-12]
  1214cc:	e5832058 	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
  1214d0:	e51b3008 	ldr	r3, [fp, #-8]
  1214d4:	e51b200c 	ldr	r2, [fp, #-12]
  1214d8:	e5832050 	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
  1214dc:	e51b3008 	ldr	r3, [fp, #-8]
  1214e0:	e51b200c 	ldr	r2, [fp, #-12]
  1214e4:	e5832048 	str	r2, [r3, #72]	; 0x48
    npcb->snd_lbb = iss;
  1214e8:	e51b3008 	ldr	r3, [fp, #-8]
  1214ec:	e51b200c 	ldr	r2, [fp, #-12]
  1214f0:	e583205c 	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  1214f4:	e30e3250 	movw	r3, #57936	; 0xe250
  1214f8:	e3403014 	movt	r3, #20
  1214fc:	e5933000 	ldr	r3, [r3]
  121500:	e2432001 	sub	r2, r3, #1
  121504:	e51b3008 	ldr	r3, [fp, #-8]
  121508:	e5832054 	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
  12150c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121510:	e5932010 	ldr	r2, [r3, #16]
  121514:	e51b3008 	ldr	r3, [fp, #-8]
  121518:	e5832010 	str	r2, [r3, #16]
    npcb->listener = pcb;
  12151c:	e51b3008 	ldr	r3, [fp, #-8]
  121520:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  121524:	e583207c 	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  121528:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12152c:	e5d33008 	ldrb	r3, [r3, #8]
  121530:	e203300c 	and	r3, r3, #12
  121534:	e6ef2073 	uxtb	r2, r3
  121538:	e51b3008 	ldr	r3, [fp, #-8]
  12153c:	e5c32008 	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
  121540:	e30e3c04 	movw	r3, #60420	; 0xec04
  121544:	e3403056 	movt	r3, #86	; 0x56
  121548:	e5932000 	ldr	r2, [r3]
  12154c:	e51b3008 	ldr	r3, [fp, #-8]
  121550:	e583200c 	str	r2, [r3, #12]
  121554:	e30e3c04 	movw	r3, #60420	; 0xec04
  121558:	e3403056 	movt	r3, #86	; 0x56
  12155c:	e51b2008 	ldr	r2, [fp, #-8]
  121560:	e5832000 	str	r2, [r3]
  121564:	eb001737 	bl	127248 <tcp_timer_needed>
  121568:	e30e3c00 	movw	r3, #60416	; 0xec00
  12156c:	e3403056 	movt	r3, #86	; 0x56
  121570:	e3a02001 	mov	r2, #1
  121574:	e5c32000 	strb	r2, [r3]
    tcp_parseopt(npcb);
  121578:	e51b0008 	ldr	r0, [fp, #-8]
  12157c:	eb000bf1 	bl	124548 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
  121580:	e30e3240 	movw	r3, #57920	; 0xe240
  121584:	e3403014 	movt	r3, #20
  121588:	e5933000 	ldr	r3, [r3]
  12158c:	e1d330be 	ldrh	r3, [r3, #14]
  121590:	e6ff2073 	uxth	r2, r3
  121594:	e51b3008 	ldr	r3, [fp, #-8]
  121598:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
  12159c:	e51b3008 	ldr	r3, [fp, #-8]
  1215a0:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  1215a4:	e51b3008 	ldr	r3, [fp, #-8]
  1215a8:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
  1215ac:	e51b3008 	ldr	r3, [fp, #-8]
  1215b0:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  1215b4:	e51b3008 	ldr	r3, [fp, #-8]
  1215b8:	e2833004 	add	r3, r3, #4
  1215bc:	e1a01003 	mov	r1, r3
  1215c0:	e1a00002 	mov	r0, r2
  1215c4:	ebfffaae 	bl	120084 <tcp_eff_send_mss_impl>
  1215c8:	e1a03000 	mov	r3, r0
  1215cc:	e1a02003 	mov	r2, r3
  1215d0:	e51b3008 	ldr	r3, [fp, #-8]
  1215d4:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    MIB2_STATS_INC(mib2.tcppassiveopens);
  1215d8:	e30e3a14 	movw	r3, #59924	; 0xea14
  1215dc:	e3403056 	movt	r3, #86	; 0x56
  1215e0:	e5933170 	ldr	r3, [r3, #368]	; 0x170
  1215e4:	e2832001 	add	r2, r3, #1
  1215e8:	e30e3a14 	movw	r3, #59924	; 0xea14
  1215ec:	e3403056 	movt	r3, #86	; 0x56
  1215f0:	e5832170 	str	r2, [r3, #368]	; 0x170
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  1215f4:	e3a01012 	mov	r1, #18
  1215f8:	e51b0008 	ldr	r0, [fp, #-8]
  1215fc:	eb001109 	bl	125a28 <tcp_enqueue_flags>
  121600:	e1a03000 	mov	r3, r0
  121604:	e54b300d 	strb	r3, [fp, #-13]
    if (rc != ERR_OK) {
  121608:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12160c:	e3530000 	cmp	r3, #0
  121610:	0a000003 	beq	121624 <tcp_listen_input+0x33c>
      tcp_abandon(npcb, 0);
  121614:	e3a01000 	mov	r1, #0
  121618:	e51b0008 	ldr	r0, [fp, #-8]
  12161c:	ebfff061 	bl	11d7a8 <tcp_abandon>
      return;
  121620:	ea000006 	b	121640 <tcp_listen_input+0x358>
    tcp_output(npcb);
  121624:	e51b0008 	ldr	r0, [fp, #-8]
  121628:	eb00124d 	bl	125f64 <tcp_output>
  return;
  12162c:	e320f000 	nop	{0}
  121630:	ea000001 	b	12163c <tcp_listen_input+0x354>
    return;
  121634:	e320f000 	nop	{0}
  121638:	ea000000 	b	121640 <tcp_listen_input+0x358>
  return;
  12163c:	e320f000 	nop	{0}
}
  121640:	e24bd004 	sub	sp, fp, #4
  121644:	e8bd8800 	pop	{fp, pc}
  121648:	0014f608 	.word	0x0014f608
  12164c:	0014f60c 	.word	0x0014f60c

00121650 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
  121650:	e92d4800 	push	{fp, lr}
  121654:	e28db004 	add	fp, sp, #4
  121658:	e24dd010 	sub	sp, sp, #16
  12165c:	e50b0008 	str	r0, [fp, #-8]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
  121660:	e30e325c 	movw	r3, #57948	; 0xe25c
  121664:	e3403014 	movt	r3, #20
  121668:	e5d33000 	ldrb	r3, [r3]
  12166c:	e2033004 	and	r3, r3, #4
  121670:	e3530000 	cmp	r3, #0
  121674:	1a00004d 	bne	1217b0 <tcp_timewait_input+0x160>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
  121678:	e30e325c 	movw	r3, #57948	; 0xe25c
  12167c:	e3403014 	movt	r3, #20
  121680:	e5d33000 	ldrb	r3, [r3]
  121684:	e2033002 	and	r3, r3, #2
  121688:	e3530000 	cmp	r3, #0
  12168c:	0a00002d 	beq	121748 <tcp_timewait_input+0xf8>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
  121690:	e30e3250 	movw	r3, #57936	; 0xe250
  121694:	e3403014 	movt	r3, #20
  121698:	e5932000 	ldr	r2, [r3]
  12169c:	e51b3008 	ldr	r3, [fp, #-8]
  1216a0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1216a4:	e0423003 	sub	r3, r2, r3
  1216a8:	e3530000 	cmp	r3, #0
  1216ac:	ba000030 	blt	121774 <tcp_timewait_input+0x124>
  1216b0:	e30e3250 	movw	r3, #57936	; 0xe250
  1216b4:	e3403014 	movt	r3, #20
  1216b8:	e5932000 	ldr	r2, [r3]
  1216bc:	e51b3008 	ldr	r3, [fp, #-8]
  1216c0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1216c4:	e51b1008 	ldr	r1, [fp, #-8]
  1216c8:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1216cc:	e0833001 	add	r3, r3, r1
  1216d0:	e0423003 	sub	r3, r2, r3
  1216d4:	e3530000 	cmp	r3, #0
  1216d8:	ca000025 	bgt	121774 <tcp_timewait_input+0x124>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1216dc:	e30e3254 	movw	r3, #57940	; 0xe254
  1216e0:	e3403014 	movt	r3, #20
  1216e4:	e5930000 	ldr	r0, [r3]
  1216e8:	e30e325a 	movw	r3, #57946	; 0xe25a
  1216ec:	e3403014 	movt	r3, #20
  1216f0:	e1d330b0 	ldrh	r3, [r3]
  1216f4:	e1a02003 	mov	r2, r3
  1216f8:	e30e3250 	movw	r3, #57936	; 0xe250
  1216fc:	e3403014 	movt	r3, #20
  121700:	e5933000 	ldr	r3, [r3]
  121704:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121708:	e30e3240 	movw	r3, #57920	; 0xe240
  12170c:	e3403014 	movt	r3, #20
  121710:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121714:	e1d330b2 	ldrh	r3, [r3, #2]
  121718:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  12171c:	e30e3240 	movw	r3, #57920	; 0xe240
  121720:	e3403014 	movt	r3, #20
  121724:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121728:	e1d330b0 	ldrh	r3, [r3]
  12172c:	e6ff3073 	uxth	r3, r3
  121730:	e58d3004 	str	r3, [sp, #4]
  121734:	e58d2000 	str	r2, [sp]
  121738:	e59f3084 	ldr	r3, [pc, #132]	; 1217c4 <tcp_timewait_input+0x174>
  12173c:	e59f2084 	ldr	r2, [pc, #132]	; 1217c8 <tcp_timewait_input+0x178>
  121740:	eb00146d 	bl	1268fc <tcp_rst>
      return;
  121744:	ea00001c 	b	1217bc <tcp_timewait_input+0x16c>
    }
  } else if (flags & TCP_FIN) {
  121748:	e30e325c 	movw	r3, #57948	; 0xe25c
  12174c:	e3403014 	movt	r3, #20
  121750:	e5d33000 	ldrb	r3, [r3]
  121754:	e2033001 	and	r3, r3, #1
  121758:	e3530000 	cmp	r3, #0
  12175c:	0a000004 	beq	121774 <tcp_timewait_input+0x124>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
  121760:	e30e3c08 	movw	r3, #60424	; 0xec08
  121764:	e3403056 	movt	r3, #86	; 0x56
  121768:	e5932000 	ldr	r2, [r3]
  12176c:	e51b3008 	ldr	r3, [fp, #-8]
  121770:	e5832024 	str	r2, [r3, #36]	; 0x24
  }

  if ((tcplen > 0)) {
  121774:	e30e325a 	movw	r3, #57946	; 0xe25a
  121778:	e3403014 	movt	r3, #20
  12177c:	e1d330b0 	ldrh	r3, [r3]
  121780:	e3530000 	cmp	r3, #0
  121784:	0a00000b 	beq	1217b8 <tcp_timewait_input+0x168>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
  121788:	e51b3008 	ldr	r3, [fp, #-8]
  12178c:	e5d3301e 	ldrb	r3, [r3, #30]
  121790:	e3833002 	orr	r3, r3, #2
  121794:	e6ef2073 	uxtb	r2, r3
  121798:	e51b3008 	ldr	r3, [fp, #-8]
  12179c:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  1217a0:	e51b0008 	ldr	r0, [fp, #-8]
  1217a4:	eb0011ee 	bl	125f64 <tcp_output>
  }
  return;
  1217a8:	e320f000 	nop	{0}
  1217ac:	ea000001 	b	1217b8 <tcp_timewait_input+0x168>
    return;
  1217b0:	e320f000 	nop	{0}
  1217b4:	ea000000 	b	1217bc <tcp_timewait_input+0x16c>
  return;
  1217b8:	e320f000 	nop	{0}
}
  1217bc:	e24bd004 	sub	sp, fp, #4
  1217c0:	e8bd8800 	pop	{fp, pc}
  1217c4:	0014f608 	.word	0x0014f608
  1217c8:	0014f60c 	.word	0x0014f60c

001217cc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
  1217cc:	e92d4800 	push	{fp, lr}
  1217d0:	e28db004 	add	fp, sp, #4
  1217d4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1217d8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
  1217dc:	e3a03000 	mov	r3, #0
  1217e0:	e54b3009 	strb	r3, [fp, #-9]
  err_t err;

  err = ERR_OK;
  1217e4:	e3a03000 	mov	r3, #0
  1217e8:	e54b300a 	strb	r3, [fp, #-10]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
  1217ec:	e30e325c 	movw	r3, #57948	; 0xe25c
  1217f0:	e3403014 	movt	r3, #20
  1217f4:	e5d33000 	ldrb	r3, [r3]
  1217f8:	e2033004 	and	r3, r3, #4
  1217fc:	e3530000 	cmp	r3, #0
  121800:	0a000050 	beq	121948 <tcp_process+0x17c>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
  121804:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121808:	e5933014 	ldr	r3, [r3, #20]
  12180c:	e3530002 	cmp	r3, #2
  121810:	1a000009 	bne	12183c <tcp_process+0x70>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
  121814:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121818:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  12181c:	e30e3254 	movw	r3, #57940	; 0xe254
  121820:	e3403014 	movt	r3, #20
  121824:	e5933000 	ldr	r3, [r3]
  121828:	e1520003 	cmp	r2, r3
  12182c:	1a000025 	bne	1218c8 <tcp_process+0xfc>
        acceptable = 1;
  121830:	e3a03001 	mov	r3, #1
  121834:	e54b3009 	strb	r3, [fp, #-9]
  121838:	ea000022 	b	1218c8 <tcp_process+0xfc>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
  12183c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121840:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  121844:	e30e3250 	movw	r3, #57936	; 0xe250
  121848:	e3403014 	movt	r3, #20
  12184c:	e5933000 	ldr	r3, [r3]
  121850:	e1520003 	cmp	r2, r3
  121854:	1a000002 	bne	121864 <tcp_process+0x98>
        acceptable = 1;
  121858:	e3a03001 	mov	r3, #1
  12185c:	e54b3009 	strb	r3, [fp, #-9]
  121860:	ea000018 	b	1218c8 <tcp_process+0xfc>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  121864:	e30e3250 	movw	r3, #57936	; 0xe250
  121868:	e3403014 	movt	r3, #20
  12186c:	e5932000 	ldr	r2, [r3]
  121870:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121874:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121878:	e0423003 	sub	r3, r2, r3
  12187c:	e3530000 	cmp	r3, #0
  121880:	ba000010 	blt	1218c8 <tcp_process+0xfc>
  121884:	e30e3250 	movw	r3, #57936	; 0xe250
  121888:	e3403014 	movt	r3, #20
  12188c:	e5932000 	ldr	r2, [r3]
  121890:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121894:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121898:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  12189c:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1218a0:	e0833001 	add	r3, r3, r1
  1218a4:	e0423003 	sub	r3, r2, r3
  1218a8:	e3530000 	cmp	r3, #0
  1218ac:	ca000005 	bgt	1218c8 <tcp_process+0xfc>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
  1218b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218b4:	e5d3301e 	ldrb	r3, [r3, #30]
  1218b8:	e3833002 	orr	r3, r3, #2
  1218bc:	e6ef2073 	uxtb	r2, r3
  1218c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218c4:	e5c3201e 	strb	r2, [r3, #30]
      }
    }

    if (acceptable) {
  1218c8:	e55b3009 	ldrb	r3, [fp, #-9]
  1218cc:	e3530000 	cmp	r3, #0
  1218d0:	0a00001a 	beq	121940 <tcp_process+0x174>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
  1218d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218d8:	e5933014 	ldr	r3, [r3, #20]
  1218dc:	e3530000 	cmp	r3, #0
  1218e0:	1a000006 	bne	121900 <tcp_process+0x134>
  1218e4:	e3080438 	movw	r0, #33848	; 0x8438
  1218e8:	e3400014 	movt	r0, #20
  1218ec:	ebff8608 	bl	103114 <rt_kprintf>
  1218f0:	e3a01fb5 	mov	r1, #724	; 0x2d4
  1218f4:	e30802bc 	movw	r0, #33468	; 0x82bc
  1218f8:	e3400014 	movt	r0, #20
  1218fc:	ebffa5fb 	bl	10b0f0 <sys_arch_assert>
      recv_flags |= TF_RESET;
  121900:	e30e325d 	movw	r3, #57949	; 0xe25d
  121904:	e3403014 	movt	r3, #20
  121908:	e5d33000 	ldrb	r3, [r3]
  12190c:	e3833008 	orr	r3, r3, #8
  121910:	e6ef2073 	uxtb	r2, r3
  121914:	e30e325d 	movw	r3, #57949	; 0xe25d
  121918:	e3403014 	movt	r3, #20
  12191c:	e5c32000 	strb	r2, [r3]
      pcb->flags &= ~TF_ACK_DELAY;
  121920:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121924:	e5d3301e 	ldrb	r3, [r3, #30]
  121928:	e3c33001 	bic	r3, r3, #1
  12192c:	e6ef2073 	uxtb	r2, r3
  121930:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121934:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_RST;
  121938:	e3e0300d 	mvn	r3, #13
  12193c:	ea0002fd 	b	122538 <tcp_process+0xd6c>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
  121940:	e3a03000 	mov	r3, #0
  121944:	ea0002fb 	b	122538 <tcp_process+0xd6c>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
  121948:	e30e325c 	movw	r3, #57948	; 0xe25c
  12194c:	e3403014 	movt	r3, #20
  121950:	e5d33000 	ldrb	r3, [r3]
  121954:	e2033002 	and	r3, r3, #2
  121958:	e3530000 	cmp	r3, #0
  12195c:	0a00000f 	beq	1219a0 <tcp_process+0x1d4>
  121960:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121964:	e5933014 	ldr	r3, [r3, #20]
  121968:	e3530002 	cmp	r3, #2
  12196c:	0a00000b 	beq	1219a0 <tcp_process+0x1d4>
  121970:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121974:	e5933014 	ldr	r3, [r3, #20]
  121978:	e3530003 	cmp	r3, #3
  12197c:	0a000007 	beq	1219a0 <tcp_process+0x1d4>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
  121980:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121984:	e5d3301e 	ldrb	r3, [r3, #30]
  121988:	e3833002 	orr	r3, r3, #2
  12198c:	e6ef2073 	uxtb	r2, r3
  121990:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121994:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_OK;
  121998:	e3a03000 	mov	r3, #0
  12199c:	ea0002e5 	b	122538 <tcp_process+0xd6c>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
  1219a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219a4:	e5d3301e 	ldrb	r3, [r3, #30]
  1219a8:	e2033010 	and	r3, r3, #16
  1219ac:	e3530000 	cmp	r3, #0
  1219b0:	1a000004 	bne	1219c8 <tcp_process+0x1fc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  1219b4:	e30e3c08 	movw	r3, #60424	; 0xec08
  1219b8:	e3403056 	movt	r3, #86	; 0x56
  1219bc:	e5932000 	ldr	r2, [r3]
  1219c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219c4:	e5832024 	str	r2, [r3, #36]	; 0x24
  }
  pcb->keep_cnt_sent = 0;
  1219c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219cc:	e3a02000 	mov	r2, #0
  1219d0:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

  tcp_parseopt(pcb);
  1219d4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1219d8:	eb000ada 	bl	124548 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
  1219dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219e0:	e5933014 	ldr	r3, [r3, #20]
  1219e4:	e2433002 	sub	r3, r3, #2
  1219e8:	e3530007 	cmp	r3, #7
  1219ec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1219f0:	ea0002c0 	b	1224f8 <tcp_process+0xd2c>
  1219f4:	00121a14 	.word	0x00121a14
  1219f8:	00121d68 	.word	0x00121d68
  1219fc:	0012200c 	.word	0x0012200c
  121a00:	00122054 	.word	0x00122054
  121a04:	00122234 	.word	0x00122234
  121a08:	0012200c 	.word	0x0012200c
  121a0c:	00122354 	.word	0x00122354
  121a10:	00122488 	.word	0x00122488
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  121a14:	e30e325c 	movw	r3, #57948	; 0xe25c
  121a18:	e3403014 	movt	r3, #20
  121a1c:	e5d33000 	ldrb	r3, [r3]
  121a20:	e2033010 	and	r3, r3, #16
  121a24:	e3530000 	cmp	r3, #0
  121a28:	0a0000a4 	beq	121cc0 <tcp_process+0x4f4>
  121a2c:	e30e325c 	movw	r3, #57948	; 0xe25c
  121a30:	e3403014 	movt	r3, #20
  121a34:	e5d33000 	ldrb	r3, [r3]
  121a38:	e2033002 	and	r3, r3, #2
  121a3c:	e3530000 	cmp	r3, #0
  121a40:	0a00009e 	beq	121cc0 <tcp_process+0x4f4>
        && (ackno == pcb->lastack + 1)) {
  121a44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a48:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  121a4c:	e2832001 	add	r2, r3, #1
  121a50:	e30e3254 	movw	r3, #57940	; 0xe254
  121a54:	e3403014 	movt	r3, #20
  121a58:	e5933000 	ldr	r3, [r3]
  121a5c:	e1520003 	cmp	r2, r3
  121a60:	1a000096 	bne	121cc0 <tcp_process+0x4f4>
      pcb->rcv_nxt = seqno + 1;
  121a64:	e30e3250 	movw	r3, #57936	; 0xe250
  121a68:	e3403014 	movt	r3, #20
  121a6c:	e5933000 	ldr	r3, [r3]
  121a70:	e2832001 	add	r2, r3, #1
  121a74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a78:	e5832028 	str	r2, [r3, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  121a7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a80:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  121a84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a88:	e5832030 	str	r2, [r3, #48]	; 0x30
      pcb->lastack = ackno;
  121a8c:	e30e3254 	movw	r3, #57940	; 0xe254
  121a90:	e3403014 	movt	r3, #20
  121a94:	e5932000 	ldr	r2, [r3]
  121a98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a9c:	e5832048 	str	r2, [r3, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
  121aa0:	e30e3240 	movw	r3, #57920	; 0xe240
  121aa4:	e3403014 	movt	r3, #20
  121aa8:	e5933000 	ldr	r3, [r3]
  121aac:	e1d330be 	ldrh	r3, [r3, #14]
  121ab0:	e6ff2073 	uxth	r2, r3
  121ab4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ab8:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      pcb->snd_wnd_max = pcb->snd_wnd;
  121abc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ac0:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  121ac4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ac8:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  121acc:	e30e3250 	movw	r3, #57936	; 0xe250
  121ad0:	e3403014 	movt	r3, #20
  121ad4:	e5933000 	ldr	r3, [r3]
  121ad8:	e2432001 	sub	r2, r3, #1
  121adc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ae0:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->state = ESTABLISHED;
  121ae4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ae8:	e3a02004 	mov	r2, #4
  121aec:	e5832014 	str	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  121af0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121af4:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  121af8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121afc:	e2833004 	add	r3, r3, #4
  121b00:	e1a01003 	mov	r1, r3
  121b04:	e1a00002 	mov	r0, r2
  121b08:	ebfff95d 	bl	120084 <tcp_eff_send_mss_impl>
  121b0c:	e1a03000 	mov	r3, r0
  121b10:	e1a02003 	mov	r2, r3
  121b14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b18:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  121b1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b20:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121b24:	e1a03083 	lsl	r3, r3, #1
  121b28:	e301211c 	movw	r2, #4380	; 0x111c
  121b2c:	e1530002 	cmp	r3, r2
  121b30:	21a02003 	movcs	r2, r3
  121b34:	31a02002 	movcc	r2, r2
  121b38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b3c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121b40:	e1a03103 	lsl	r3, r3, #2
  121b44:	e1520003 	cmp	r2, r3
  121b48:	31a03002 	movcc	r3, r2
  121b4c:	21a03003 	movcs	r3, r3
  121b50:	e6ff2073 	uxth	r2, r3
  121b54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b58:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
  121b5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b60:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  121b64:	e3530000 	cmp	r3, #0
  121b68:	1a000006 	bne	121b88 <tcp_process+0x3bc>
  121b6c:	e3080458 	movw	r0, #33880	; 0x8458
  121b70:	e3400014 	movt	r0, #20
  121b74:	ebff8566 	bl	103114 <rt_kprintf>
  121b78:	e3001307 	movw	r1, #775	; 0x307
  121b7c:	e30802bc 	movw	r0, #33468	; 0x82bc
  121b80:	e3400014 	movt	r0, #20
  121b84:	ebffa559 	bl	10b0f0 <sys_arch_assert>
      --pcb->snd_queuelen;
  121b88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b8c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  121b90:	e2433001 	sub	r3, r3, #1
  121b94:	e6ff2073 	uxth	r2, r3
  121b98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b9c:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
  121ba0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ba4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  121ba8:	e50b3008 	str	r3, [fp, #-8]
      if (rseg == NULL) {
  121bac:	e51b3008 	ldr	r3, [fp, #-8]
  121bb0:	e3530000 	cmp	r3, #0
  121bb4:	1a000011 	bne	121c00 <tcp_process+0x434>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
  121bb8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121bbc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  121bc0:	e50b3008 	str	r3, [fp, #-8]
        LWIP_ASSERT("no segment to free", rseg != NULL);
  121bc4:	e51b3008 	ldr	r3, [fp, #-8]
  121bc8:	e3530000 	cmp	r3, #0
  121bcc:	1a000006 	bne	121bec <tcp_process+0x420>
  121bd0:	e3080470 	movw	r0, #33904	; 0x8470
  121bd4:	e3400014 	movt	r0, #20
  121bd8:	ebff854d 	bl	103114 <rt_kprintf>
  121bdc:	e300130f 	movw	r1, #783	; 0x30f
  121be0:	e30802bc 	movw	r0, #33468	; 0x82bc
  121be4:	e3400014 	movt	r0, #20
  121be8:	ebffa540 	bl	10b0f0 <sys_arch_assert>
        pcb->unsent = rseg->next;
  121bec:	e51b3008 	ldr	r3, [fp, #-8]
  121bf0:	e5932000 	ldr	r2, [r3]
  121bf4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121bf8:	e583206c 	str	r2, [r3, #108]	; 0x6c
  121bfc:	ea000003 	b	121c10 <tcp_process+0x444>
      } else {
        pcb->unacked = rseg->next;
  121c00:	e51b3008 	ldr	r3, [fp, #-8]
  121c04:	e5932000 	ldr	r2, [r3]
  121c08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c0c:	e5832070 	str	r2, [r3, #112]	; 0x70
      }
      tcp_seg_free(rseg);
  121c10:	e51b0008 	ldr	r0, [fp, #-8]
  121c14:	ebfff61a 	bl	11f484 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  121c18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c1c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  121c20:	e3530000 	cmp	r3, #0
  121c24:	1a000003 	bne	121c38 <tcp_process+0x46c>
        pcb->rtime = -1;
  121c28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c2c:	e3e02000 	mvn	r2, #0
  121c30:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  121c34:	ea000005 	b	121c50 <tcp_process+0x484>
      } else {
        pcb->rtime = 0;
  121c38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c3c:	e3a02000 	mov	r2, #0
  121c40:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        pcb->nrtx = 0;
  121c44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c48:	e3a02000 	mov	r2, #0
  121c4c:	e5c32046 	strb	r2, [r3, #70]	; 0x46
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  121c50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c54:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  121c58:	e3530000 	cmp	r3, #0
  121c5c:	0a000009 	beq	121c88 <tcp_process+0x4bc>
  121c60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c64:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  121c68:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121c6c:	e5920010 	ldr	r0, [r2, #16]
  121c70:	e3a02000 	mov	r2, #0
  121c74:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121c78:	e12fff33 	blx	r3
  121c7c:	e1a03000 	mov	r3, r0
  121c80:	e54b300a 	strb	r3, [fp, #-10]
  121c84:	ea000001 	b	121c90 <tcp_process+0x4c4>
  121c88:	e3a03000 	mov	r3, #0
  121c8c:	e54b300a 	strb	r3, [fp, #-10]
      if (err == ERR_ABRT) {
  121c90:	e15b30da 	ldrsb	r3, [fp, #-10]
  121c94:	e373000d 	cmn	r3, #13
  121c98:	1a000001 	bne	121ca4 <tcp_process+0x4d8>
        return ERR_ABRT;
  121c9c:	e3e0300c 	mvn	r3, #12
  121ca0:	ea000224 	b	122538 <tcp_process+0xd6c>
      }
      tcp_ack_now(pcb);
  121ca4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ca8:	e5d3301e 	ldrb	r3, [r3, #30]
  121cac:	e3833002 	orr	r3, r3, #2
  121cb0:	e6ef2073 	uxtb	r2, r3
  121cb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121cb8:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
  121cbc:	ea00020f 	b	122500 <tcp_process+0xd34>
    else if (flags & TCP_ACK) {
  121cc0:	e30e325c 	movw	r3, #57948	; 0xe25c
  121cc4:	e3403014 	movt	r3, #20
  121cc8:	e5d33000 	ldrb	r3, [r3]
  121ccc:	e2033010 	and	r3, r3, #16
  121cd0:	e3530000 	cmp	r3, #0
  121cd4:	0a000209 	beq	122500 <tcp_process+0xd34>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121cd8:	e30e3254 	movw	r3, #57940	; 0xe254
  121cdc:	e3403014 	movt	r3, #20
  121ce0:	e5930000 	ldr	r0, [r3]
  121ce4:	e30e325a 	movw	r3, #57946	; 0xe25a
  121ce8:	e3403014 	movt	r3, #20
  121cec:	e1d330b0 	ldrh	r3, [r3]
  121cf0:	e1a02003 	mov	r2, r3
  121cf4:	e30e3250 	movw	r3, #57936	; 0xe250
  121cf8:	e3403014 	movt	r3, #20
  121cfc:	e5933000 	ldr	r3, [r3]
  121d00:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121d04:	e30e3240 	movw	r3, #57920	; 0xe240
  121d08:	e3403014 	movt	r3, #20
  121d0c:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121d10:	e1d330b2 	ldrh	r3, [r3, #2]
  121d14:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121d18:	e30e3240 	movw	r3, #57920	; 0xe240
  121d1c:	e3403014 	movt	r3, #20
  121d20:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121d24:	e1d330b0 	ldrh	r3, [r3]
  121d28:	e6ff3073 	uxth	r3, r3
  121d2c:	e58d3004 	str	r3, [sp, #4]
  121d30:	e58d2000 	str	r2, [sp]
  121d34:	e59f3808 	ldr	r3, [pc, #2056]	; 122544 <tcp_process+0xd78>
  121d38:	e59f2808 	ldr	r2, [pc, #2056]	; 122548 <tcp_process+0xd7c>
  121d3c:	eb0012ee 	bl	1268fc <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
  121d40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d44:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  121d48:	e3530003 	cmp	r3, #3
  121d4c:	8a0001eb 	bhi	122500 <tcp_process+0xd34>
        pcb->rtime = 0;
  121d50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d54:	e3a02000 	mov	r2, #0
  121d58:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        tcp_rexmit_rto(pcb);
  121d5c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121d60:	eb001361 	bl	126aec <tcp_rexmit_rto>
    break;
  121d64:	ea0001e5 	b	122500 <tcp_process+0xd34>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
  121d68:	e30e325c 	movw	r3, #57948	; 0xe25c
  121d6c:	e3403014 	movt	r3, #20
  121d70:	e5d33000 	ldrb	r3, [r3]
  121d74:	e2033010 	and	r3, r3, #16
  121d78:	e3530000 	cmp	r3, #0
  121d7c:	0a000090 	beq	121fc4 <tcp_process+0x7f8>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  121d80:	e30e3254 	movw	r3, #57940	; 0xe254
  121d84:	e3403014 	movt	r3, #20
  121d88:	e5932000 	ldr	r2, [r3]
  121d8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d90:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  121d94:	e0423003 	sub	r3, r2, r3
  121d98:	e2433001 	sub	r3, r3, #1
  121d9c:	e3530000 	cmp	r3, #0
  121da0:	ba00006c 	blt	121f58 <tcp_process+0x78c>
  121da4:	e30e3254 	movw	r3, #57940	; 0xe254
  121da8:	e3403014 	movt	r3, #20
  121dac:	e5932000 	ldr	r2, [r3]
  121db0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121db4:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  121db8:	e0423003 	sub	r3, r2, r3
  121dbc:	e3530000 	cmp	r3, #0
  121dc0:	ca000064 	bgt	121f58 <tcp_process+0x78c>
        pcb->state = ESTABLISHED;
  121dc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121dc8:	e3a02004 	mov	r2, #4
  121dcc:	e5832014 	str	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
  121dd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121dd4:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121dd8:	e3530000 	cmp	r3, #0
  121ddc:	0a00000b 	beq	121e10 <tcp_process+0x644>
  121de0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121de4:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121de8:	e593301c 	ldr	r3, [r3, #28]
  121dec:	e3530000 	cmp	r3, #0
  121df0:	1a000006 	bne	121e10 <tcp_process+0x644>
  121df4:	e3080484 	movw	r0, #33924	; 0x8484
  121df8:	e3400014 	movt	r0, #20
  121dfc:	ebff84c4 	bl	103114 <rt_kprintf>
  121e00:	e300133e 	movw	r1, #830	; 0x33e
  121e04:	e30802bc 	movw	r0, #33468	; 0x82bc
  121e08:	e3400014 	movt	r0, #20
  121e0c:	ebffa4b7 	bl	10b0f0 <sys_arch_assert>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
  121e10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e14:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121e18:	e3530000 	cmp	r3, #0
  121e1c:	1a000002 	bne	121e2c <tcp_process+0x660>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
  121e20:	e3e03005 	mvn	r3, #5
  121e24:	e54b300a 	strb	r3, [fp, #-10]
  121e28:	ea000011 	b	121e74 <tcp_process+0x6a8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
  121e2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e30:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121e34:	e593301c 	ldr	r3, [r3, #28]
  121e38:	e3530000 	cmp	r3, #0
  121e3c:	0a00000a 	beq	121e6c <tcp_process+0x6a0>
  121e40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e44:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121e48:	e593301c 	ldr	r3, [r3, #28]
  121e4c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121e50:	e5920010 	ldr	r0, [r2, #16]
  121e54:	e3a02000 	mov	r2, #0
  121e58:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121e5c:	e12fff33 	blx	r3
  121e60:	e1a03000 	mov	r3, r0
  121e64:	e54b300a 	strb	r3, [fp, #-10]
  121e68:	ea000001 	b	121e74 <tcp_process+0x6a8>
  121e6c:	e3e0300f 	mvn	r3, #15
  121e70:	e54b300a 	strb	r3, [fp, #-10]
        }
        if (err != ERR_OK) {
  121e74:	e15b30da 	ldrsb	r3, [fp, #-10]
  121e78:	e3530000 	cmp	r3, #0
  121e7c:	0a000006 	beq	121e9c <tcp_process+0x6d0>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
  121e80:	e15b30da 	ldrsb	r3, [fp, #-10]
  121e84:	e373000d 	cmn	r3, #13
  121e88:	0a000001 	beq	121e94 <tcp_process+0x6c8>
            tcp_abort(pcb);
  121e8c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121e90:	ebffeee3 	bl	11da24 <tcp_abort>
          }
          return ERR_ABRT;
  121e94:	e3e0300c 	mvn	r3, #12
  121e98:	ea0001a6 	b	122538 <tcp_process+0xd6c>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
  121e9c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121ea0:	eb000217 	bl	122704 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
  121ea4:	e30e3258 	movw	r3, #57944	; 0xe258
  121ea8:	e3403014 	movt	r3, #20
  121eac:	e1d330b0 	ldrh	r3, [r3]
  121eb0:	e3530000 	cmp	r3, #0
  121eb4:	0a000007 	beq	121ed8 <tcp_process+0x70c>
          recv_acked--;
  121eb8:	e30e3258 	movw	r3, #57944	; 0xe258
  121ebc:	e3403014 	movt	r3, #20
  121ec0:	e1d330b0 	ldrh	r3, [r3]
  121ec4:	e2433001 	sub	r3, r3, #1
  121ec8:	e6ff2073 	uxth	r2, r3
  121ecc:	e30e3258 	movw	r3, #57944	; 0xe258
  121ed0:	e3403014 	movt	r3, #20
  121ed4:	e1c320b0 	strh	r2, [r3]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  121ed8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121edc:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121ee0:	e1a03083 	lsl	r3, r3, #1
  121ee4:	e301211c 	movw	r2, #4380	; 0x111c
  121ee8:	e1530002 	cmp	r3, r2
  121eec:	21a02003 	movcs	r2, r3
  121ef0:	31a02002 	movcc	r2, r2
  121ef4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ef8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121efc:	e1a03103 	lsl	r3, r3, #2
  121f00:	e1520003 	cmp	r2, r3
  121f04:	31a03002 	movcc	r3, r2
  121f08:	21a03003 	movcs	r3, r3
  121f0c:	e6ff2073 	uxth	r2, r3
  121f10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f14:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
  121f18:	e30e325d 	movw	r3, #57949	; 0xe25d
  121f1c:	e3403014 	movt	r3, #20
  121f20:	e5d33000 	ldrb	r3, [r3]
  121f24:	e2033020 	and	r3, r3, #32
  121f28:	e3530000 	cmp	r3, #0
  121f2c:	0a000035 	beq	122008 <tcp_process+0x83c>
          tcp_ack_now(pcb);
  121f30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f34:	e5d3301e 	ldrb	r3, [r3, #30]
  121f38:	e3833002 	orr	r3, r3, #2
  121f3c:	e6ef2073 	uxtb	r2, r3
  121f40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f44:	e5c3201e 	strb	r2, [r3, #30]
          pcb->state = CLOSE_WAIT;
  121f48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f4c:	e3a02007 	mov	r2, #7
  121f50:	e5832014 	str	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
  121f54:	ea00002b 	b	122008 <tcp_process+0x83c>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121f58:	e30e3254 	movw	r3, #57940	; 0xe254
  121f5c:	e3403014 	movt	r3, #20
  121f60:	e5930000 	ldr	r0, [r3]
  121f64:	e30e325a 	movw	r3, #57946	; 0xe25a
  121f68:	e3403014 	movt	r3, #20
  121f6c:	e1d330b0 	ldrh	r3, [r3]
  121f70:	e1a02003 	mov	r2, r3
  121f74:	e30e3250 	movw	r3, #57936	; 0xe250
  121f78:	e3403014 	movt	r3, #20
  121f7c:	e5933000 	ldr	r3, [r3]
  121f80:	e0821003 	add	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121f84:	e30e3240 	movw	r3, #57920	; 0xe240
  121f88:	e3403014 	movt	r3, #20
  121f8c:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121f90:	e1d330b2 	ldrh	r3, [r3, #2]
  121f94:	e6ff2073 	uxth	r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121f98:	e30e3240 	movw	r3, #57920	; 0xe240
  121f9c:	e3403014 	movt	r3, #20
  121fa0:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121fa4:	e1d330b0 	ldrh	r3, [r3]
  121fa8:	e6ff3073 	uxth	r3, r3
  121fac:	e58d3004 	str	r3, [sp, #4]
  121fb0:	e58d2000 	str	r2, [sp]
  121fb4:	e59f3588 	ldr	r3, [pc, #1416]	; 122544 <tcp_process+0xd78>
  121fb8:	e59f2588 	ldr	r2, [pc, #1416]	; 122548 <tcp_process+0xd7c>
  121fbc:	eb00124e 	bl	1268fc <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
  121fc0:	ea000150 	b	122508 <tcp_process+0xd3c>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  121fc4:	e30e325c 	movw	r3, #57948	; 0xe25c
  121fc8:	e3403014 	movt	r3, #20
  121fcc:	e5d33000 	ldrb	r3, [r3]
  121fd0:	e2033002 	and	r3, r3, #2
  121fd4:	e3530000 	cmp	r3, #0
  121fd8:	0a00014a 	beq	122508 <tcp_process+0xd3c>
  121fdc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121fe0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121fe4:	e2432001 	sub	r2, r3, #1
  121fe8:	e30e3250 	movw	r3, #57936	; 0xe250
  121fec:	e3403014 	movt	r3, #20
  121ff0:	e5933000 	ldr	r3, [r3]
  121ff4:	e1520003 	cmp	r2, r3
  121ff8:	1a000142 	bne	122508 <tcp_process+0xd3c>
      tcp_rexmit(pcb);
  121ffc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122000:	eb0012ea 	bl	126bb0 <tcp_rexmit>
    break;
  122004:	ea00013f 	b	122508 <tcp_process+0xd3c>
  122008:	ea00013e 	b	122508 <tcp_process+0xd3c>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
  12200c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122010:	eb0001bb 	bl	122704 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  122014:	e30e325d 	movw	r3, #57949	; 0xe25d
  122018:	e3403014 	movt	r3, #20
  12201c:	e5d33000 	ldrb	r3, [r3]
  122020:	e2033020 	and	r3, r3, #32
  122024:	e3530000 	cmp	r3, #0
  122028:	0a000138 	beq	122510 <tcp_process+0xd44>
      tcp_ack_now(pcb);
  12202c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122030:	e5d3301e 	ldrb	r3, [r3, #30]
  122034:	e3833002 	orr	r3, r3, #2
  122038:	e6ef2073 	uxtb	r2, r3
  12203c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122040:	e5c3201e 	strb	r2, [r3, #30]
      pcb->state = CLOSE_WAIT;
  122044:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122048:	e3a02007 	mov	r2, #7
  12204c:	e5832014 	str	r2, [r3, #20]
    }
    break;
  122050:	ea00012e 	b	122510 <tcp_process+0xd44>
  case FIN_WAIT_1:
    tcp_receive(pcb);
  122054:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122058:	eb0001a9 	bl	122704 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  12205c:	e30e325d 	movw	r3, #57949	; 0xe25d
  122060:	e3403014 	movt	r3, #20
  122064:	e5d33000 	ldrb	r3, [r3]
  122068:	e2033020 	and	r3, r3, #32
  12206c:	e3530000 	cmp	r3, #0
  122070:	0a00005a 	beq	1221e0 <tcp_process+0xa14>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  122074:	e30e325c 	movw	r3, #57948	; 0xe25c
  122078:	e3403014 	movt	r3, #20
  12207c:	e5d33000 	ldrb	r3, [r3]
  122080:	e2033010 	and	r3, r3, #16
  122084:	e3530000 	cmp	r3, #0
  122088:	0a00004a 	beq	1221b8 <tcp_process+0x9ec>
  12208c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122090:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  122094:	e30e3254 	movw	r3, #57940	; 0xe254
  122098:	e3403014 	movt	r3, #20
  12209c:	e5933000 	ldr	r3, [r3]
  1220a0:	e1520003 	cmp	r2, r3
  1220a4:	1a000043 	bne	1221b8 <tcp_process+0x9ec>
          pcb->unsent == NULL) {
  1220a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220ac:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  1220b0:	e3530000 	cmp	r3, #0
  1220b4:	1a00003f 	bne	1221b8 <tcp_process+0x9ec>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
  1220b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220bc:	e5d3301e 	ldrb	r3, [r3, #30]
  1220c0:	e3833002 	orr	r3, r3, #2
  1220c4:	e6ef2073 	uxtb	r2, r3
  1220c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220cc:	e5c3201e 	strb	r2, [r3, #30]
        tcp_pcb_purge(pcb);
  1220d0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1220d4:	ebfff72f 	bl	11fd98 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
  1220d8:	e30e3c04 	movw	r3, #60420	; 0xec04
  1220dc:	e3403056 	movt	r3, #86	; 0x56
  1220e0:	e5933000 	ldr	r3, [r3]
  1220e4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1220e8:	e1520003 	cmp	r2, r3
  1220ec:	1a000007 	bne	122110 <tcp_process+0x944>
  1220f0:	e30e3c04 	movw	r3, #60420	; 0xec04
  1220f4:	e3403056 	movt	r3, #86	; 0x56
  1220f8:	e5933000 	ldr	r3, [r3]
  1220fc:	e593200c 	ldr	r2, [r3, #12]
  122100:	e30e3c04 	movw	r3, #60420	; 0xec04
  122104:	e3403056 	movt	r3, #86	; 0x56
  122108:	e5832000 	str	r2, [r3]
  12210c:	ea000014 	b	122164 <tcp_process+0x998>
  122110:	e30e3c04 	movw	r3, #60420	; 0xec04
  122114:	e3403056 	movt	r3, #86	; 0x56
  122118:	e5933000 	ldr	r3, [r3]
  12211c:	e50b3010 	str	r3, [fp, #-16]
  122120:	ea00000c 	b	122158 <tcp_process+0x98c>
  122124:	e51b3010 	ldr	r3, [fp, #-16]
  122128:	e593300c 	ldr	r3, [r3, #12]
  12212c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122130:	e1520003 	cmp	r2, r3
  122134:	1a000004 	bne	12214c <tcp_process+0x980>
  122138:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12213c:	e593200c 	ldr	r2, [r3, #12]
  122140:	e51b3010 	ldr	r3, [fp, #-16]
  122144:	e583200c 	str	r2, [r3, #12]
  122148:	ea000005 	b	122164 <tcp_process+0x998>
  12214c:	e51b3010 	ldr	r3, [fp, #-16]
  122150:	e593300c 	ldr	r3, [r3, #12]
  122154:	e50b3010 	str	r3, [fp, #-16]
  122158:	e51b3010 	ldr	r3, [fp, #-16]
  12215c:	e3530000 	cmp	r3, #0
  122160:	1affffef 	bne	122124 <tcp_process+0x958>
  122164:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122168:	e3a02000 	mov	r2, #0
  12216c:	e583200c 	str	r2, [r3, #12]
  122170:	e30e3c00 	movw	r3, #60416	; 0xec00
  122174:	e3403056 	movt	r3, #86	; 0x56
  122178:	e3a02001 	mov	r2, #1
  12217c:	e5c32000 	strb	r2, [r3]
        pcb->state = TIME_WAIT;
  122180:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122184:	e3a0200a 	mov	r2, #10
  122188:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  12218c:	e30e3c14 	movw	r3, #60436	; 0xec14
  122190:	e3403056 	movt	r3, #86	; 0x56
  122194:	e5932000 	ldr	r2, [r3]
  122198:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12219c:	e583200c 	str	r2, [r3, #12]
  1221a0:	e30e3c14 	movw	r3, #60436	; 0xec14
  1221a4:	e3403056 	movt	r3, #86	; 0x56
  1221a8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1221ac:	e5832000 	str	r2, [r3]
  1221b0:	eb001424 	bl	127248 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
  1221b4:	ea0000d7 	b	122518 <tcp_process+0xd4c>
        tcp_ack_now(pcb);
  1221b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221bc:	e5d3301e 	ldrb	r3, [r3, #30]
  1221c0:	e3833002 	orr	r3, r3, #2
  1221c4:	e6ef2073 	uxtb	r2, r3
  1221c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221cc:	e5c3201e 	strb	r2, [r3, #30]
        pcb->state = CLOSING;
  1221d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221d4:	e3a02008 	mov	r2, #8
  1221d8:	e5832014 	str	r2, [r3, #20]
    break;
  1221dc:	ea0000cd 	b	122518 <tcp_process+0xd4c>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  1221e0:	e30e325c 	movw	r3, #57948	; 0xe25c
  1221e4:	e3403014 	movt	r3, #20
  1221e8:	e5d33000 	ldrb	r3, [r3]
  1221ec:	e2033010 	and	r3, r3, #16
  1221f0:	e3530000 	cmp	r3, #0
  1221f4:	0a0000c7 	beq	122518 <tcp_process+0xd4c>
  1221f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221fc:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  122200:	e30e3254 	movw	r3, #57940	; 0xe254
  122204:	e3403014 	movt	r3, #20
  122208:	e5933000 	ldr	r3, [r3]
  12220c:	e1520003 	cmp	r2, r3
  122210:	1a0000c0 	bne	122518 <tcp_process+0xd4c>
               pcb->unsent == NULL) {
  122214:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122218:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  12221c:	e3530000 	cmp	r3, #0
  122220:	1a0000bc 	bne	122518 <tcp_process+0xd4c>
      pcb->state = FIN_WAIT_2;
  122224:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122228:	e3a02006 	mov	r2, #6
  12222c:	e5832014 	str	r2, [r3, #20]
    break;
  122230:	ea0000b8 	b	122518 <tcp_process+0xd4c>
  case FIN_WAIT_2:
    tcp_receive(pcb);
  122234:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122238:	eb000131 	bl	122704 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  12223c:	e30e325d 	movw	r3, #57949	; 0xe25d
  122240:	e3403014 	movt	r3, #20
  122244:	e5d33000 	ldrb	r3, [r3]
  122248:	e2033020 	and	r3, r3, #32
  12224c:	e3530000 	cmp	r3, #0
  122250:	0a0000b2 	beq	122520 <tcp_process+0xd54>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
  122254:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122258:	e5d3301e 	ldrb	r3, [r3, #30]
  12225c:	e3833002 	orr	r3, r3, #2
  122260:	e6ef2073 	uxtb	r2, r3
  122264:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122268:	e5c3201e 	strb	r2, [r3, #30]
      tcp_pcb_purge(pcb);
  12226c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122270:	ebfff6c8 	bl	11fd98 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  122274:	e30e3c04 	movw	r3, #60420	; 0xec04
  122278:	e3403056 	movt	r3, #86	; 0x56
  12227c:	e5933000 	ldr	r3, [r3]
  122280:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122284:	e1520003 	cmp	r2, r3
  122288:	1a000007 	bne	1222ac <tcp_process+0xae0>
  12228c:	e30e3c04 	movw	r3, #60420	; 0xec04
  122290:	e3403056 	movt	r3, #86	; 0x56
  122294:	e5933000 	ldr	r3, [r3]
  122298:	e593200c 	ldr	r2, [r3, #12]
  12229c:	e30e3c04 	movw	r3, #60420	; 0xec04
  1222a0:	e3403056 	movt	r3, #86	; 0x56
  1222a4:	e5832000 	str	r2, [r3]
  1222a8:	ea000014 	b	122300 <tcp_process+0xb34>
  1222ac:	e30e3c04 	movw	r3, #60420	; 0xec04
  1222b0:	e3403056 	movt	r3, #86	; 0x56
  1222b4:	e5933000 	ldr	r3, [r3]
  1222b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1222bc:	ea00000c 	b	1222f4 <tcp_process+0xb28>
  1222c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1222c4:	e593300c 	ldr	r3, [r3, #12]
  1222c8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1222cc:	e1520003 	cmp	r2, r3
  1222d0:	1a000004 	bne	1222e8 <tcp_process+0xb1c>
  1222d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1222d8:	e593200c 	ldr	r2, [r3, #12]
  1222dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1222e0:	e583200c 	str	r2, [r3, #12]
  1222e4:	ea000005 	b	122300 <tcp_process+0xb34>
  1222e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1222ec:	e593300c 	ldr	r3, [r3, #12]
  1222f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1222f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1222f8:	e3530000 	cmp	r3, #0
  1222fc:	1affffef 	bne	1222c0 <tcp_process+0xaf4>
  122300:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122304:	e3a02000 	mov	r2, #0
  122308:	e583200c 	str	r2, [r3, #12]
  12230c:	e30e3c00 	movw	r3, #60416	; 0xec00
  122310:	e3403056 	movt	r3, #86	; 0x56
  122314:	e3a02001 	mov	r2, #1
  122318:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  12231c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122320:	e3a0200a 	mov	r2, #10
  122324:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  122328:	e30e3c14 	movw	r3, #60436	; 0xec14
  12232c:	e3403056 	movt	r3, #86	; 0x56
  122330:	e5932000 	ldr	r2, [r3]
  122334:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122338:	e583200c 	str	r2, [r3, #12]
  12233c:	e30e3c14 	movw	r3, #60436	; 0xec14
  122340:	e3403056 	movt	r3, #86	; 0x56
  122344:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122348:	e5832000 	str	r2, [r3]
  12234c:	eb0013bd 	bl	127248 <tcp_timer_needed>
    }
    break;
  122350:	ea000072 	b	122520 <tcp_process+0xd54>
  case CLOSING:
    tcp_receive(pcb);
  122354:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122358:	eb0000e9 	bl	122704 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  12235c:	e30e325c 	movw	r3, #57948	; 0xe25c
  122360:	e3403014 	movt	r3, #20
  122364:	e5d33000 	ldrb	r3, [r3]
  122368:	e2033010 	and	r3, r3, #16
  12236c:	e3530000 	cmp	r3, #0
  122370:	0a00006c 	beq	122528 <tcp_process+0xd5c>
  122374:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122378:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  12237c:	e30e3254 	movw	r3, #57940	; 0xe254
  122380:	e3403014 	movt	r3, #20
  122384:	e5933000 	ldr	r3, [r3]
  122388:	e1520003 	cmp	r2, r3
  12238c:	1a000065 	bne	122528 <tcp_process+0xd5c>
  122390:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122394:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122398:	e3530000 	cmp	r3, #0
  12239c:	1a000061 	bne	122528 <tcp_process+0xd5c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
  1223a0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1223a4:	ebfff67b 	bl	11fd98 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  1223a8:	e30e3c04 	movw	r3, #60420	; 0xec04
  1223ac:	e3403056 	movt	r3, #86	; 0x56
  1223b0:	e5933000 	ldr	r3, [r3]
  1223b4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1223b8:	e1520003 	cmp	r2, r3
  1223bc:	1a000007 	bne	1223e0 <tcp_process+0xc14>
  1223c0:	e30e3c04 	movw	r3, #60420	; 0xec04
  1223c4:	e3403056 	movt	r3, #86	; 0x56
  1223c8:	e5933000 	ldr	r3, [r3]
  1223cc:	e593200c 	ldr	r2, [r3, #12]
  1223d0:	e30e3c04 	movw	r3, #60420	; 0xec04
  1223d4:	e3403056 	movt	r3, #86	; 0x56
  1223d8:	e5832000 	str	r2, [r3]
  1223dc:	ea000014 	b	122434 <tcp_process+0xc68>
  1223e0:	e30e3c04 	movw	r3, #60420	; 0xec04
  1223e4:	e3403056 	movt	r3, #86	; 0x56
  1223e8:	e5933000 	ldr	r3, [r3]
  1223ec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1223f0:	ea00000c 	b	122428 <tcp_process+0xc5c>
  1223f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1223f8:	e593300c 	ldr	r3, [r3, #12]
  1223fc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122400:	e1520003 	cmp	r2, r3
  122404:	1a000004 	bne	12241c <tcp_process+0xc50>
  122408:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12240c:	e593200c 	ldr	r2, [r3, #12]
  122410:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122414:	e583200c 	str	r2, [r3, #12]
  122418:	ea000005 	b	122434 <tcp_process+0xc68>
  12241c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122420:	e593300c 	ldr	r3, [r3, #12]
  122424:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  122428:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12242c:	e3530000 	cmp	r3, #0
  122430:	1affffef 	bne	1223f4 <tcp_process+0xc28>
  122434:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122438:	e3a02000 	mov	r2, #0
  12243c:	e583200c 	str	r2, [r3, #12]
  122440:	e30e3c00 	movw	r3, #60416	; 0xec00
  122444:	e3403056 	movt	r3, #86	; 0x56
  122448:	e3a02001 	mov	r2, #1
  12244c:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  122450:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122454:	e3a0200a 	mov	r2, #10
  122458:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  12245c:	e30e3c14 	movw	r3, #60436	; 0xec14
  122460:	e3403056 	movt	r3, #86	; 0x56
  122464:	e5932000 	ldr	r2, [r3]
  122468:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12246c:	e583200c 	str	r2, [r3, #12]
  122470:	e30e3c14 	movw	r3, #60436	; 0xec14
  122474:	e3403056 	movt	r3, #86	; 0x56
  122478:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12247c:	e5832000 	str	r2, [r3]
  122480:	eb001370 	bl	127248 <tcp_timer_needed>
    }
    break;
  122484:	ea000027 	b	122528 <tcp_process+0xd5c>
  case LAST_ACK:
    tcp_receive(pcb);
  122488:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  12248c:	eb00009c 	bl	122704 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  122490:	e30e325c 	movw	r3, #57948	; 0xe25c
  122494:	e3403014 	movt	r3, #20
  122498:	e5d33000 	ldrb	r3, [r3]
  12249c:	e2033010 	and	r3, r3, #16
  1224a0:	e3530000 	cmp	r3, #0
  1224a4:	0a000021 	beq	122530 <tcp_process+0xd64>
  1224a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1224ac:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1224b0:	e30e3254 	movw	r3, #57940	; 0xe254
  1224b4:	e3403014 	movt	r3, #20
  1224b8:	e5933000 	ldr	r3, [r3]
  1224bc:	e1520003 	cmp	r2, r3
  1224c0:	1a00001a 	bne	122530 <tcp_process+0xd64>
  1224c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1224c8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1224cc:	e3530000 	cmp	r3, #0
  1224d0:	1a000016 	bne	122530 <tcp_process+0xd64>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
  1224d4:	e30e325d 	movw	r3, #57949	; 0xe25d
  1224d8:	e3403014 	movt	r3, #20
  1224dc:	e5d33000 	ldrb	r3, [r3]
  1224e0:	e3833010 	orr	r3, r3, #16
  1224e4:	e6ef2073 	uxtb	r2, r3
  1224e8:	e30e325d 	movw	r3, #57949	; 0xe25d
  1224ec:	e3403014 	movt	r3, #20
  1224f0:	e5c32000 	strb	r2, [r3]
    }
    break;
  1224f4:	ea00000d 	b	122530 <tcp_process+0xd64>
  default:
    break;
  1224f8:	e320f000 	nop	{0}
  1224fc:	ea00000c 	b	122534 <tcp_process+0xd68>
    break;
  122500:	e320f000 	nop	{0}
  122504:	ea00000a 	b	122534 <tcp_process+0xd68>
    break;
  122508:	e320f000 	nop	{0}
  12250c:	ea000008 	b	122534 <tcp_process+0xd68>
    break;
  122510:	e320f000 	nop	{0}
  122514:	ea000006 	b	122534 <tcp_process+0xd68>
    break;
  122518:	e320f000 	nop	{0}
  12251c:	ea000004 	b	122534 <tcp_process+0xd68>
    break;
  122520:	e320f000 	nop	{0}
  122524:	ea000002 	b	122534 <tcp_process+0xd68>
    break;
  122528:	e320f000 	nop	{0}
  12252c:	ea000000 	b	122534 <tcp_process+0xd68>
    break;
  122530:	e320f000 	nop	{0}
  }
  return ERR_OK;
  122534:	e3a03000 	mov	r3, #0
}
  122538:	e1a00003 	mov	r0, r3
  12253c:	e24bd004 	sub	sp, fp, #4
  122540:	e8bd8800 	pop	{fp, pc}
  122544:	0014f608 	.word	0x0014f608
  122548:	0014f60c 	.word	0x0014f60c

0012254c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  12254c:	e92d4810 	push	{r4, fp, lr}
  122550:	e28db008 	add	fp, sp, #8
  122554:	e24dd014 	sub	sp, sp, #20
  122558:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12255c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  122560:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122564:	e593300c 	ldr	r3, [r3, #12]
  122568:	e1d330bc 	ldrh	r3, [r3, #12]
  12256c:	e6ff3073 	uxth	r3, r3
  122570:	e1a00003 	mov	r0, r3
  122574:	ebffd019 	bl	1165e0 <lwip_htons>
  122578:	e1a03000 	mov	r3, r0
  12257c:	e2033001 	and	r3, r3, #1
  122580:	e3530000 	cmp	r3, #0
  122584:	0a000022 	beq	122614 <tcp_oos_insert_segment+0xc8>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
  122588:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12258c:	ebfff3aa 	bl	11f43c <tcp_segs_free>
    next = NULL;
  122590:	e3a03000 	mov	r3, #0
  122594:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  122598:	ea000053 	b	1226ec <tcp_oos_insert_segment+0x1a0>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  12259c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1225a0:	e593300c 	ldr	r3, [r3, #12]
  1225a4:	e1d330bc 	ldrh	r3, [r3, #12]
  1225a8:	e6ff3073 	uxth	r3, r3
  1225ac:	e1a00003 	mov	r0, r3
  1225b0:	ebffd00a 	bl	1165e0 <lwip_htons>
  1225b4:	e1a03000 	mov	r3, r0
  1225b8:	e2033001 	and	r3, r3, #1
  1225bc:	e3530000 	cmp	r3, #0
  1225c0:	0a00000c 	beq	1225f8 <tcp_oos_insert_segment+0xac>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  1225c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1225c8:	e593300c 	ldr	r3, [r3, #12]
  1225cc:	e1d330bc 	ldrh	r3, [r3, #12]
  1225d0:	e6ff4073 	uxth	r4, r3
  1225d4:	e3a00001 	mov	r0, #1
  1225d8:	ebffd000 	bl	1165e0 <lwip_htons>
  1225dc:	e1a03000 	mov	r3, r0
  1225e0:	e1a02003 	mov	r2, r3
  1225e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1225e8:	e593300c 	ldr	r3, [r3, #12]
  1225ec:	e1842002 	orr	r2, r4, r2
  1225f0:	e6ff2072 	uxth	r2, r2
  1225f4:	e1c320bc 	strh	r2, [r3, #12]
      }
      old_seg = next;
  1225f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1225fc:	e50b3010 	str	r3, [fp, #-16]
      next = next->next;
  122600:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122604:	e5933000 	ldr	r3, [r3]
  122608:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      tcp_seg_free(old_seg);
  12260c:	e51b0010 	ldr	r0, [fp, #-16]
  122610:	ebfff39b 	bl	11f484 <tcp_seg_free>
    while (next &&
  122614:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122618:	e3530000 	cmp	r3, #0
  12261c:	0a00000f 	beq	122660 <tcp_oos_insert_segment+0x114>
           TCP_SEQ_GEQ((seqno + cseg->len),
  122620:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122624:	e1d330b8 	ldrh	r3, [r3, #8]
  122628:	e1a02003 	mov	r2, r3
  12262c:	e30e3250 	movw	r3, #57936	; 0xe250
  122630:	e3403014 	movt	r3, #20
  122634:	e5933000 	ldr	r3, [r3]
  122638:	e0822003 	add	r2, r2, r3
  12263c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122640:	e593300c 	ldr	r3, [r3, #12]
  122644:	e5933004 	ldr	r3, [r3, #4]
  122648:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12264c:	e1d110b8 	ldrh	r1, [r1, #8]
  122650:	e0833001 	add	r3, r3, r1
  122654:	e0423003 	sub	r3, r2, r3
    while (next &&
  122658:	e3530000 	cmp	r3, #0
  12265c:	aaffffce 	bge	12259c <tcp_oos_insert_segment+0x50>
    }
    if (next &&
  122660:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122664:	e3530000 	cmp	r3, #0
  122668:	0a00001f 	beq	1226ec <tcp_oos_insert_segment+0x1a0>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  12266c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122670:	e1d330b8 	ldrh	r3, [r3, #8]
  122674:	e1a02003 	mov	r2, r3
  122678:	e30e3250 	movw	r3, #57936	; 0xe250
  12267c:	e3403014 	movt	r3, #20
  122680:	e5933000 	ldr	r3, [r3]
  122684:	e0822003 	add	r2, r2, r3
  122688:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12268c:	e593300c 	ldr	r3, [r3, #12]
  122690:	e5933004 	ldr	r3, [r3, #4]
  122694:	e0423003 	sub	r3, r2, r3
    if (next &&
  122698:	e3530000 	cmp	r3, #0
  12269c:	da000012 	ble	1226ec <tcp_oos_insert_segment+0x1a0>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  1226a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1226a4:	e593300c 	ldr	r3, [r3, #12]
  1226a8:	e5933004 	ldr	r3, [r3, #4]
  1226ac:	e6ff2073 	uxth	r2, r3
  1226b0:	e30e3250 	movw	r3, #57936	; 0xe250
  1226b4:	e3403014 	movt	r3, #20
  1226b8:	e5933000 	ldr	r3, [r3]
  1226bc:	e6ff3073 	uxth	r3, r3
  1226c0:	e0423003 	sub	r3, r2, r3
  1226c4:	e6ff2073 	uxth	r2, r3
  1226c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1226cc:	e1c320b8 	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
  1226d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1226d4:	e5932004 	ldr	r2, [r3, #4]
  1226d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1226dc:	e1d330b8 	ldrh	r3, [r3, #8]
  1226e0:	e1a01003 	mov	r1, r3
  1226e4:	e1a00002 	mov	r0, r2
  1226e8:	ebffe0aa 	bl	11a998 <pbuf_realloc>
    }
  }
  cseg->next = next;
  1226ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1226f0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1226f4:	e5832000 	str	r2, [r3]
}
  1226f8:	e320f000 	nop	{0}
  1226fc:	e24bd008 	sub	sp, fp, #8
  122700:	e8bd8810 	pop	{r4, fp, pc}

00122704 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
  122704:	e92d4870 	push	{r4, r5, r6, fp, lr}
  122708:	e28db010 	add	fp, sp, #16
  12270c:	e24dd034 	sub	sp, sp, #52	; 0x34
  122710:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
  122714:	e3a03000 	mov	r3, #0
  122718:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
  12271c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122720:	e5933014 	ldr	r3, [r3, #20]
  122724:	e3530003 	cmp	r3, #3
  122728:	8a000006 	bhi	122748 <tcp_receive+0x44>
  12272c:	e30804a4 	movw	r0, #33956	; 0x84a4
  122730:	e3400014 	movt	r0, #20
  122734:	ebff8276 	bl	103114 <rt_kprintf>
  122738:	e30013f5 	movw	r1, #1013	; 0x3f5
  12273c:	e30802bc 	movw	r0, #33468	; 0x82bc
  122740:	e3400014 	movt	r0, #20
  122744:	ebffa269 	bl	10b0f0 <sys_arch_assert>

  if (flags & TCP_ACK) {
  122748:	e30e325c 	movw	r3, #57948	; 0xe25c
  12274c:	e3403014 	movt	r3, #20
  122750:	e5d33000 	ldrb	r3, [r3]
  122754:	e2033010 	and	r3, r3, #16
  122758:	e3530000 	cmp	r3, #0
  12275c:	0a000268 	beq	123104 <tcp_receive+0xa00>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  122760:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122764:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122768:	e1a02003 	mov	r2, r3
  12276c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122770:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  122774:	e0823003 	add	r3, r2, r3
  122778:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  12277c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122780:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  122784:	e30e3250 	movw	r3, #57936	; 0xe250
  122788:	e3403014 	movt	r3, #20
  12278c:	e5933000 	ldr	r3, [r3]
  122790:	e0423003 	sub	r3, r2, r3
  122794:	e3530000 	cmp	r3, #0
  122798:	ba00001e 	blt	122818 <tcp_receive+0x114>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  12279c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227a0:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  1227a4:	e30e3250 	movw	r3, #57936	; 0xe250
  1227a8:	e3403014 	movt	r3, #20
  1227ac:	e5933000 	ldr	r3, [r3]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  1227b0:	e1520003 	cmp	r2, r3
  1227b4:	1a000007 	bne	1227d8 <tcp_receive+0xd4>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  1227b8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227bc:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  1227c0:	e30e3254 	movw	r3, #57940	; 0xe254
  1227c4:	e3403014 	movt	r3, #20
  1227c8:	e5933000 	ldr	r3, [r3]
  1227cc:	e0423003 	sub	r3, r2, r3
  1227d0:	e3530000 	cmp	r3, #0
  1227d4:	ba00000f 	blt	122818 <tcp_receive+0x114>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  1227d8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227dc:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  1227e0:	e30e3254 	movw	r3, #57940	; 0xe254
  1227e4:	e3403014 	movt	r3, #20
  1227e8:	e5933000 	ldr	r3, [r3]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  1227ec:	e1520003 	cmp	r2, r3
  1227f0:	1a000039 	bne	1228dc <tcp_receive+0x1d8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  1227f4:	e30e3240 	movw	r3, #57920	; 0xe240
  1227f8:	e3403014 	movt	r3, #20
  1227fc:	e5933000 	ldr	r3, [r3]
  122800:	e1d330be 	ldrh	r3, [r3, #14]
  122804:	e6ff2073 	uxth	r2, r3
  122808:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12280c:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122810:	e1520003 	cmp	r2, r3
  122814:	9a000030 	bls	1228dc <tcp_receive+0x1d8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
  122818:	e30e3240 	movw	r3, #57920	; 0xe240
  12281c:	e3403014 	movt	r3, #20
  122820:	e5933000 	ldr	r3, [r3]
  122824:	e1d330be 	ldrh	r3, [r3, #14]
  122828:	e6ff2073 	uxth	r2, r3
  12282c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122830:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
  122834:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122838:	e1d326b2 	ldrh	r2, [r3, #98]	; 0x62
  12283c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122840:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122844:	e1520003 	cmp	r2, r3
  122848:	2a000003 	bcs	12285c <tcp_receive+0x158>
        pcb->snd_wnd_max = pcb->snd_wnd;
  12284c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122850:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  122854:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122858:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
  12285c:	e30e3250 	movw	r3, #57936	; 0xe250
  122860:	e3403014 	movt	r3, #20
  122864:	e5932000 	ldr	r2, [r3]
  122868:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12286c:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
  122870:	e30e3254 	movw	r3, #57940	; 0xe254
  122874:	e3403014 	movt	r3, #20
  122878:	e5932000 	ldr	r2, [r3]
  12287c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122880:	e5832058 	str	r2, [r3, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
  122884:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122888:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12288c:	e3530000 	cmp	r3, #0
  122890:	1a00000a 	bne	1228c0 <tcp_receive+0x1bc>
        if (pcb->persist_backoff == 0) {
  122894:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122898:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  12289c:	e3530000 	cmp	r3, #0
  1228a0:	1a00000d 	bne	1228dc <tcp_receive+0x1d8>
          /* start persist timer */
          pcb->persist_cnt = 0;
  1228a4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228a8:	e3a02000 	mov	r2, #0
  1228ac:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
          pcb->persist_backoff = 1;
  1228b0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228b4:	e3a02001 	mov	r2, #1
  1228b8:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  1228bc:	ea000006 	b	1228dc <tcp_receive+0x1d8>
        }
      } else if (pcb->persist_backoff > 0) {
  1228c0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228c4:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  1228c8:	e3530000 	cmp	r3, #0
  1228cc:	0a000002 	beq	1228dc <tcp_receive+0x1d8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
  1228d0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228d4:	e3a02000 	mov	r2, #0
  1228d8:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  1228dc:	e30e3254 	movw	r3, #57940	; 0xe254
  1228e0:	e3403014 	movt	r3, #20
  1228e4:	e5932000 	ldr	r2, [r3]
  1228e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228ec:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  1228f0:	e0423003 	sub	r3, r2, r3
  1228f4:	e3530000 	cmp	r3, #0
  1228f8:	ca000047 	bgt	122a1c <tcp_receive+0x318>
      /* Clause 2 */
      if (tcplen == 0) {
  1228fc:	e30e325a 	movw	r3, #57946	; 0xe25a
  122900:	e3403014 	movt	r3, #20
  122904:	e1d330b0 	ldrh	r3, [r3]
  122908:	e3530000 	cmp	r3, #0
  12290c:	1a00003b 	bne	122a00 <tcp_receive+0x2fc>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
  122910:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122914:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  122918:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  12291c:	e1d226b0 	ldrh	r2, [r2, #96]	; 0x60
  122920:	e0833002 	add	r3, r3, r2
  122924:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  122928:	e1520003 	cmp	r2, r3
  12292c:	1a000033 	bne	122a00 <tcp_receive+0x2fc>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
  122930:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122934:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  122938:	e3530000 	cmp	r3, #0
  12293c:	ba00002f 	blt	122a00 <tcp_receive+0x2fc>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
  122940:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122944:	e5932048 	ldr	r2, [r3, #72]	; 0x48
  122948:	e30e3254 	movw	r3, #57940	; 0xe254
  12294c:	e3403014 	movt	r3, #20
  122950:	e5933000 	ldr	r3, [r3]
  122954:	e1520003 	cmp	r2, r3
  122958:	1a000028 	bne	122a00 <tcp_receive+0x2fc>
              found_dupack = 1;
  12295c:	e3a03001 	mov	r3, #1
  122960:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  122964:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122968:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  12296c:	e35300ff 	cmp	r3, #255	; 0xff
  122970:	0a000005 	beq	12298c <tcp_receive+0x288>
                ++pcb->dupacks;
  122974:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122978:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  12297c:	e2833001 	add	r3, r3, #1
  122980:	e6ef2073 	uxtb	r2, r3
  122984:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122988:	e5c32047 	strb	r2, [r3, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
  12298c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122990:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122994:	e3530003 	cmp	r3, #3
  122998:	9a000012 	bls	1229e8 <tcp_receive+0x2e4>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  12299c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229a0:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  1229a4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229a8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1229ac:	e0823003 	add	r3, r2, r3
  1229b0:	e6ff2073 	uxth	r2, r3
  1229b4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229b8:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  1229bc:	e1520003 	cmp	r2, r3
  1229c0:	9a00000e 	bls	122a00 <tcp_receive+0x2fc>
                  pcb->cwnd += pcb->mss;
  1229c4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229c8:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  1229cc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229d0:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1229d4:	e0823003 	add	r3, r2, r3
  1229d8:	e6ff2073 	uxth	r2, r3
  1229dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229e0:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  1229e4:	ea000005 	b	122a00 <tcp_receive+0x2fc>
                }
              } else if (pcb->dupacks == 3) {
  1229e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229ec:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  1229f0:	e3530003 	cmp	r3, #3
  1229f4:	1a000001 	bne	122a00 <tcp_receive+0x2fc>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
  1229f8:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  1229fc:	eb0010bb 	bl	126cf0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
  122a00:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  122a04:	e3530000 	cmp	r3, #0
  122a08:	1a000136 	bne	122ee8 <tcp_receive+0x7e4>
        pcb->dupacks = 0;
  122a0c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a10:	e3a02000 	mov	r2, #0
  122a14:	e5c32047 	strb	r2, [r3, #71]	; 0x47
  122a18:	ea000132 	b	122ee8 <tcp_receive+0x7e4>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  122a1c:	e30e3254 	movw	r3, #57940	; 0xe254
  122a20:	e3403014 	movt	r3, #20
  122a24:	e5932000 	ldr	r2, [r3]
  122a28:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a2c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  122a30:	e0423003 	sub	r3, r2, r3
  122a34:	e2433001 	sub	r3, r3, #1
  122a38:	e3530000 	cmp	r3, #0
  122a3c:	ba0000dc 	blt	122db4 <tcp_receive+0x6b0>
  122a40:	e30e3254 	movw	r3, #57940	; 0xe254
  122a44:	e3403014 	movt	r3, #20
  122a48:	e5932000 	ldr	r2, [r3]
  122a4c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a50:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  122a54:	e0423003 	sub	r3, r2, r3
  122a58:	e3530000 	cmp	r3, #0
  122a5c:	ca0000d4 	bgt	122db4 <tcp_receive+0x6b0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
  122a60:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a64:	e5d3301e 	ldrb	r3, [r3, #30]
  122a68:	e2033004 	and	r3, r3, #4
  122a6c:	e3530000 	cmp	r3, #0
  122a70:	0a000009 	beq	122a9c <tcp_receive+0x398>
        pcb->flags &= ~TF_INFR;
  122a74:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a78:	e5d3301e 	ldrb	r3, [r3, #30]
  122a7c:	e3c33004 	bic	r3, r3, #4
  122a80:	e6ef2073 	uxtb	r2, r3
  122a84:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a88:	e5c3201e 	strb	r2, [r3, #30]
        pcb->cwnd = pcb->ssthresh;
  122a8c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a90:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  122a94:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a98:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
  122a9c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122aa0:	e3a02000 	mov	r2, #0
  122aa4:	e5c32046 	strb	r2, [r3, #70]	; 0x46

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  122aa8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122aac:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122ab0:	e1a031c3 	asr	r3, r3, #3
  122ab4:	e6bf3073 	sxth	r3, r3
  122ab8:	e6ff2073 	uxth	r2, r3
  122abc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ac0:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122ac4:	e6ff3073 	uxth	r3, r3
  122ac8:	e0823003 	add	r3, r2, r3
  122acc:	e6ff3073 	uxth	r3, r3
  122ad0:	e6bf2073 	sxth	r2, r3
  122ad4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ad8:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
  122adc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ae0:	e3a02000 	mov	r2, #0
  122ae4:	e5c32047 	strb	r2, [r3, #71]	; 0x47
      pcb->lastack = ackno;
  122ae8:	e30e3254 	movw	r3, #57940	; 0xe254
  122aec:	e3403014 	movt	r3, #20
  122af0:	e5932000 	ldr	r2, [r3]
  122af4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122af8:	e5832048 	str	r2, [r3, #72]	; 0x48

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
  122afc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b00:	e5933014 	ldr	r3, [r3, #20]
  122b04:	e3530003 	cmp	r3, #3
  122b08:	9a000075 	bls	122ce4 <tcp_receive+0x5e0>
        if (pcb->cwnd < pcb->ssthresh) {
  122b0c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b10:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122b14:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b18:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  122b1c:	e1520003 	cmp	r2, r3
  122b20:	2a000012 	bcs	122b70 <tcp_receive+0x46c>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  122b24:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b28:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122b2c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b30:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122b34:	e0823003 	add	r3, r2, r3
  122b38:	e6ff2073 	uxth	r2, r3
  122b3c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b40:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122b44:	e1520003 	cmp	r2, r3
  122b48:	9a000065 	bls	122ce4 <tcp_receive+0x5e0>
            pcb->cwnd += pcb->mss;
  122b4c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b50:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122b54:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b58:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122b5c:	e0823003 	add	r3, r2, r3
  122b60:	e6ff2073 	uxth	r2, r3
  122b64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b68:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  122b6c:	ea00005c 	b	122ce4 <tcp_receive+0x5e0>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  122b70:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b74:	e1d344bc 	ldrh	r4, [r3, #76]	; 0x4c
  122b78:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b7c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122b80:	e1a02003 	mov	r2, r3
  122b84:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b88:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122b8c:	e0020293 	mul	r2, r3, r2
  122b90:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b94:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122b98:	e1a01003 	mov	r1, r3
  122b9c:	e1a00002 	mov	r0, r2
  122ba0:	eb0057b8 	bl	138a88 <__divsi3>
  122ba4:	e1a03000 	mov	r3, r0
  122ba8:	e6ff3073 	uxth	r3, r3
  122bac:	e0843003 	add	r3, r4, r3
  122bb0:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
          if (new_cwnd > pcb->cwnd) {
  122bb4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bb8:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122bbc:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  122bc0:	e1520003 	cmp	r2, r3
  122bc4:	9a000046 	bls	122ce4 <tcp_receive+0x5e0>
            pcb->cwnd = new_cwnd;
  122bc8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bcc:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  122bd0:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
  122bd4:	ea000042 	b	122ce4 <tcp_receive+0x5e0>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
  122bd8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bdc:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122be0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        pcb->unacked = pcb->unacked->next;
  122be4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122be8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122bec:	e5932000 	ldr	r2, [r3]
  122bf0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bf4:	e5832070 	str	r2, [r3, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  122bf8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bfc:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  122c00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122c04:	e5933004 	ldr	r3, [r3, #4]
  122c08:	e1a00003 	mov	r0, r3
  122c0c:	ebffe12f 	bl	11b0d0 <pbuf_clen>
  122c10:	e1a03000 	mov	r3, r0
  122c14:	e1540003 	cmp	r4, r3
  122c18:	2a000006 	bcs	122c38 <tcp_receive+0x534>
  122c1c:	e30804c0 	movw	r0, #33984	; 0x84c0
  122c20:	e3400014 	movt	r0, #20
  122c24:	ebff813a 	bl	103114 <rt_kprintf>
  122c28:	e300148b 	movw	r1, #1163	; 0x48b
  122c2c:	e30802bc 	movw	r0, #33468	; 0x82bc
  122c30:	e3400014 	movt	r0, #20
  122c34:	ebffa12d 	bl	10b0f0 <sys_arch_assert>

        pcb->snd_queuelen -= pbuf_clen(next->p);
  122c38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122c3c:	e5933004 	ldr	r3, [r3, #4]
  122c40:	e1a00003 	mov	r0, r3
  122c44:	ebffe121 	bl	11b0d0 <pbuf_clen>
  122c48:	e1a03000 	mov	r3, r0
  122c4c:	e1a02003 	mov	r2, r3
  122c50:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c54:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122c58:	e0433002 	sub	r3, r3, r2
  122c5c:	e6ff2073 	uxth	r2, r3
  122c60:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c64:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
        recv_acked += next->len;
  122c68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122c6c:	e1d320b8 	ldrh	r2, [r3, #8]
  122c70:	e30e3258 	movw	r3, #57944	; 0xe258
  122c74:	e3403014 	movt	r3, #20
  122c78:	e1d330b0 	ldrh	r3, [r3]
  122c7c:	e0823003 	add	r3, r2, r3
  122c80:	e6ff2073 	uxth	r2, r3
  122c84:	e30e3258 	movw	r3, #57944	; 0xe258
  122c88:	e3403014 	movt	r3, #20
  122c8c:	e1c320b0 	strh	r2, [r3]
        tcp_seg_free(next);
  122c90:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  122c94:	ebfff1fa 	bl	11f484 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
  122c98:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c9c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122ca0:	e3530000 	cmp	r3, #0
  122ca4:	0a00000e 	beq	122ce4 <tcp_receive+0x5e0>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
  122ca8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cac:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122cb0:	e3530000 	cmp	r3, #0
  122cb4:	1a00000a 	bne	122ce4 <tcp_receive+0x5e0>
  122cb8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cbc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122cc0:	e3530000 	cmp	r3, #0
  122cc4:	1a000006 	bne	122ce4 <tcp_receive+0x5e0>
  122cc8:	e30804e8 	movw	r0, #34024	; 0x84e8
  122ccc:	e3400014 	movt	r0, #20
  122cd0:	ebff810f 	bl	103114 <rt_kprintf>
  122cd4:	e3001494 	movw	r1, #1172	; 0x494
  122cd8:	e30802bc 	movw	r0, #33468	; 0x82bc
  122cdc:	e3400014 	movt	r0, #20
  122ce0:	ebffa102 	bl	10b0f0 <sys_arch_assert>
      while (pcb->unacked != NULL &&
  122ce4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ce8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122cec:	e3530000 	cmp	r3, #0
  122cf0:	0a000020 	beq	122d78 <tcp_receive+0x674>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
  122cf4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cf8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122cfc:	e593300c 	ldr	r3, [r3, #12]
  122d00:	e5933004 	ldr	r3, [r3, #4]
  122d04:	e1a00003 	mov	r0, r3
  122d08:	ebffce40 	bl	116610 <lwip_htonl>
  122d0c:	e1a04000 	mov	r4, r0
  122d10:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d14:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122d18:	e1d330b8 	ldrh	r3, [r3, #8]
  122d1c:	e1a05003 	mov	r5, r3
  122d20:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d24:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122d28:	e593300c 	ldr	r3, [r3, #12]
  122d2c:	e1d330bc 	ldrh	r3, [r3, #12]
  122d30:	e6ff3073 	uxth	r3, r3
  122d34:	e1a00003 	mov	r0, r3
  122d38:	ebffce28 	bl	1165e0 <lwip_htons>
  122d3c:	e1a03000 	mov	r3, r0
  122d40:	e2033003 	and	r3, r3, #3
  122d44:	e3530000 	cmp	r3, #0
  122d48:	0a000001 	beq	122d54 <tcp_receive+0x650>
  122d4c:	e3a03001 	mov	r3, #1
  122d50:	ea000000 	b	122d58 <tcp_receive+0x654>
  122d54:	e3a03000 	mov	r3, #0
  122d58:	e0833005 	add	r3, r3, r5
  122d5c:	e0842003 	add	r2, r4, r3
  122d60:	e30e3254 	movw	r3, #57940	; 0xe254
  122d64:	e3403014 	movt	r3, #20
  122d68:	e5933000 	ldr	r3, [r3]
  122d6c:	e0423003 	sub	r3, r2, r3
      while (pcb->unacked != NULL &&
  122d70:	e3530000 	cmp	r3, #0
  122d74:	daffff97 	ble	122bd8 <tcp_receive+0x4d4>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  122d78:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d7c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122d80:	e3530000 	cmp	r3, #0
  122d84:	1a000003 	bne	122d98 <tcp_receive+0x694>
        pcb->rtime = -1;
  122d88:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d8c:	e3e02000 	mvn	r2, #0
  122d90:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  122d94:	ea000002 	b	122da4 <tcp_receive+0x6a0>
      } else {
        pcb->rtime = 0;
  122d98:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d9c:	e3a02000 	mov	r2, #0
  122da0:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
      }

      pcb->polltmr = 0;
  122da4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122da8:	e3a02000 	mov	r2, #0
  122dac:	e5c3201f 	strb	r2, [r3, #31]
  122db0:	ea000001 	b	122dbc <tcp_receive+0x6b8>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
  122db4:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  122db8:	eb000c08 	bl	125de0 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  122dbc:	ea000049 	b	122ee8 <tcp_receive+0x7e4>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
  122dc0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dc4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122dc8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      pcb->unsent = pcb->unsent->next;
  122dcc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dd0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122dd4:	e5932000 	ldr	r2, [r3]
  122dd8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ddc:	e583206c 	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
  122de0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122de4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122de8:	e3530000 	cmp	r3, #0
  122dec:	1a000002 	bne	122dfc <tcp_receive+0x6f8>
        pcb->unsent_oversize = 0;
  122df0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122df4:	e3a02000 	mov	r2, #0
  122df8:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  122dfc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e00:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  122e04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122e08:	e5933004 	ldr	r3, [r3, #4]
  122e0c:	e1a00003 	mov	r0, r3
  122e10:	ebffe0ae 	bl	11b0d0 <pbuf_clen>
  122e14:	e1a03000 	mov	r3, r0
  122e18:	e1540003 	cmp	r4, r3
  122e1c:	2a000006 	bcs	122e3c <tcp_receive+0x738>
  122e20:	e30804c0 	movw	r0, #33984	; 0x84c0
  122e24:	e3400014 	movt	r0, #20
  122e28:	ebff80b9 	bl	103114 <rt_kprintf>
  122e2c:	e30014c2 	movw	r1, #1218	; 0x4c2
  122e30:	e30802bc 	movw	r0, #33468	; 0x82bc
  122e34:	e3400014 	movt	r0, #20
  122e38:	ebffa0ac 	bl	10b0f0 <sys_arch_assert>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
  122e3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122e40:	e5933004 	ldr	r3, [r3, #4]
  122e44:	e1a00003 	mov	r0, r3
  122e48:	ebffe0a0 	bl	11b0d0 <pbuf_clen>
  122e4c:	e1a03000 	mov	r3, r0
  122e50:	e1a02003 	mov	r2, r3
  122e54:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e58:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122e5c:	e0433002 	sub	r3, r3, r2
  122e60:	e6ff2073 	uxth	r2, r3
  122e64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e68:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      recv_acked += next->len;
  122e6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122e70:	e1d320b8 	ldrh	r2, [r3, #8]
  122e74:	e30e3258 	movw	r3, #57944	; 0xe258
  122e78:	e3403014 	movt	r3, #20
  122e7c:	e1d330b0 	ldrh	r3, [r3]
  122e80:	e0823003 	add	r3, r2, r3
  122e84:	e6ff2073 	uxth	r2, r3
  122e88:	e30e3258 	movw	r3, #57944	; 0xe258
  122e8c:	e3403014 	movt	r3, #20
  122e90:	e1c320b0 	strh	r2, [r3]
      tcp_seg_free(next);
  122e94:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  122e98:	ebfff179 	bl	11f484 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
  122e9c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ea0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122ea4:	e3530000 	cmp	r3, #0
  122ea8:	0a00000e 	beq	122ee8 <tcp_receive+0x7e4>
        LWIP_ASSERT("tcp_receive: valid queue length",
  122eac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122eb0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122eb4:	e3530000 	cmp	r3, #0
  122eb8:	1a00000a 	bne	122ee8 <tcp_receive+0x7e4>
  122ebc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ec0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122ec4:	e3530000 	cmp	r3, #0
  122ec8:	1a000006 	bne	122ee8 <tcp_receive+0x7e4>
  122ecc:	e30804e8 	movw	r0, #34024	; 0x84e8
  122ed0:	e3400014 	movt	r0, #20
  122ed4:	ebff808e 	bl	103114 <rt_kprintf>
  122ed8:	e30014ca 	movw	r1, #1226	; 0x4ca
  122edc:	e30802bc 	movw	r0, #33468	; 0x82bc
  122ee0:	e3400014 	movt	r0, #20
  122ee4:	ebffa081 	bl	10b0f0 <sys_arch_assert>
    while (pcb->unsent != NULL &&
  122ee8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122eec:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122ef0:	e3530000 	cmp	r3, #0
  122ef4:	0a000028 	beq	122f9c <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  122ef8:	e30e3254 	movw	r3, #57940	; 0xe254
  122efc:	e3403014 	movt	r3, #20
  122f00:	e5934000 	ldr	r4, [r3]
  122f04:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f08:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122f0c:	e593300c 	ldr	r3, [r3, #12]
  122f10:	e5933004 	ldr	r3, [r3, #4]
  122f14:	e1a00003 	mov	r0, r3
  122f18:	ebffcdbc 	bl	116610 <lwip_htonl>
  122f1c:	e1a05000 	mov	r5, r0
  122f20:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f24:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122f28:	e1d330b8 	ldrh	r3, [r3, #8]
  122f2c:	e1a06003 	mov	r6, r3
  122f30:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f34:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122f38:	e593300c 	ldr	r3, [r3, #12]
  122f3c:	e1d330bc 	ldrh	r3, [r3, #12]
  122f40:	e6ff3073 	uxth	r3, r3
  122f44:	e1a00003 	mov	r0, r3
  122f48:	ebffcda4 	bl	1165e0 <lwip_htons>
  122f4c:	e1a03000 	mov	r3, r0
  122f50:	e2033003 	and	r3, r3, #3
  122f54:	e3530000 	cmp	r3, #0
  122f58:	0a000001 	beq	122f64 <tcp_receive+0x860>
  122f5c:	e3a03001 	mov	r3, #1
  122f60:	ea000000 	b	122f68 <tcp_receive+0x864>
  122f64:	e3a03000 	mov	r3, #0
  122f68:	e0833006 	add	r3, r3, r6
  122f6c:	e0853003 	add	r3, r5, r3
  122f70:	e0443003 	sub	r3, r4, r3
    while (pcb->unsent != NULL &&
  122f74:	e3530000 	cmp	r3, #0
  122f78:	ba000007 	blt	122f9c <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  122f7c:	e30e3254 	movw	r3, #57940	; 0xe254
  122f80:	e3403014 	movt	r3, #20
  122f84:	e5932000 	ldr	r2, [r3]
  122f88:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f8c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  122f90:	e0423003 	sub	r3, r2, r3
  122f94:	e3530000 	cmp	r3, #0
  122f98:	daffff88 	ble	122dc0 <tcp_receive+0x6bc>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
  122f9c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fa0:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  122fa4:	e30e3258 	movw	r3, #57944	; 0xe258
  122fa8:	e3403014 	movt	r3, #20
  122fac:	e1d330b0 	ldrh	r3, [r3]
  122fb0:	e0823003 	add	r3, r2, r3
  122fb4:	e6ff2073 	uxth	r2, r3
  122fb8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fbc:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  122fc0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fc4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  122fc8:	e3530000 	cmp	r3, #0
  122fcc:	0a00004c 	beq	123104 <tcp_receive+0xa00>
  122fd0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fd4:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  122fd8:	e30e3254 	movw	r3, #57940	; 0xe254
  122fdc:	e3403014 	movt	r3, #20
  122fe0:	e5933000 	ldr	r3, [r3]
  122fe4:	e0423003 	sub	r3, r2, r3
  122fe8:	e3530000 	cmp	r3, #0
  122fec:	aa000044 	bge	123104 <tcp_receive+0xa00>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
  122ff0:	e30e3c08 	movw	r3, #60424	; 0xec08
  122ff4:	e3403056 	movt	r3, #86	; 0x56
  122ff8:	e5933000 	ldr	r3, [r3]
  122ffc:	e6ff2073 	uxth	r2, r3
  123000:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123004:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  123008:	e6ff3073 	uxth	r3, r3
  12300c:	e0423003 	sub	r3, r2, r3
  123010:	e6ff3073 	uxth	r3, r3
  123014:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  123018:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  12301c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123020:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  123024:	e1a031c3 	asr	r3, r3, #3
  123028:	e6bf3073 	sxth	r3, r3
  12302c:	e6ff3073 	uxth	r3, r3
  123030:	e0423003 	sub	r3, r2, r3
  123034:	e6ff3073 	uxth	r3, r3
  123038:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sa += m;
  12303c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123040:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  123044:	e6ff2073 	uxth	r2, r3
  123048:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  12304c:	e0823003 	add	r3, r2, r3
  123050:	e6ff3073 	uxth	r3, r3
  123054:	e6bf2073 	sxth	r2, r3
  123058:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12305c:	e1c324b0 	strh	r2, [r3, #64]	; 0x40
      if (m < 0) {
  123060:	e15b32f2 	ldrsh	r3, [fp, #-34]	; 0xffffffde
  123064:	e3530000 	cmp	r3, #0
  123068:	aa000003 	bge	12307c <tcp_receive+0x978>
        m = -m;
  12306c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  123070:	e2633000 	rsb	r3, r3, #0
  123074:	e6ff3073 	uxth	r3, r3
  123078:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      }
      m = m - (pcb->sv >> 2);
  12307c:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  123080:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123084:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  123088:	e1a03143 	asr	r3, r3, #2
  12308c:	e6bf3073 	sxth	r3, r3
  123090:	e6ff3073 	uxth	r3, r3
  123094:	e0423003 	sub	r3, r2, r3
  123098:	e6ff3073 	uxth	r3, r3
  12309c:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sv += m;
  1230a0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230a4:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  1230a8:	e6ff2073 	uxth	r2, r3
  1230ac:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1230b0:	e0823003 	add	r3, r2, r3
  1230b4:	e6ff3073 	uxth	r3, r3
  1230b8:	e6bf2073 	sxth	r2, r3
  1230bc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230c0:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  1230c4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230c8:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  1230cc:	e1a031c3 	asr	r3, r3, #3
  1230d0:	e6bf3073 	sxth	r3, r3
  1230d4:	e6ff2073 	uxth	r2, r3
  1230d8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230dc:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  1230e0:	e6ff3073 	uxth	r3, r3
  1230e4:	e0823003 	add	r3, r2, r3
  1230e8:	e6ff3073 	uxth	r3, r3
  1230ec:	e6bf2073 	sxth	r2, r3
  1230f0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230f4:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
  1230f8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230fc:	e3a02000 	mov	r2, #0
  123100:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  123104:	e30e325a 	movw	r3, #57946	; 0xe25a
  123108:	e3403014 	movt	r3, #20
  12310c:	e1d330b0 	ldrh	r3, [r3]
  123110:	e3530000 	cmp	r3, #0
  123114:	0a0004b3 	beq	1243e8 <tcp_receive+0x1ce4>
  123118:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12311c:	e5933014 	ldr	r3, [r3, #20]
  123120:	e3530006 	cmp	r3, #6
  123124:	8a0004af 	bhi	1243e8 <tcp_receive+0x1ce4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  123128:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12312c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123130:	e30e3250 	movw	r3, #57936	; 0xe250
  123134:	e3403014 	movt	r3, #20
  123138:	e5933000 	ldr	r3, [r3]
  12313c:	e0423003 	sub	r3, r2, r3
  123140:	e2433001 	sub	r3, r3, #1
  123144:	e3530000 	cmp	r3, #0
  123148:	ba0000aa 	blt	1233f8 <tcp_receive+0xcf4>
  12314c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123150:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123154:	e30e325a 	movw	r3, #57946	; 0xe25a
  123158:	e3403014 	movt	r3, #20
  12315c:	e1d330b0 	ldrh	r3, [r3]
  123160:	e1a01003 	mov	r1, r3
  123164:	e30e3250 	movw	r3, #57936	; 0xe250
  123168:	e3403014 	movt	r3, #20
  12316c:	e5933000 	ldr	r3, [r3]
  123170:	e0813003 	add	r3, r1, r3
  123174:	e0423003 	sub	r3, r2, r3
  123178:	e2833001 	add	r3, r3, #1
  12317c:	e3530000 	cmp	r3, #0
  123180:	ca00009c 	bgt	1233f8 <tcp_receive+0xcf4>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
  123184:	e30e3230 	movw	r3, #57904	; 0xe230
  123188:	e3403014 	movt	r3, #20
  12318c:	e5933004 	ldr	r3, [r3, #4]
  123190:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      off = pcb->rcv_nxt - seqno;
  123194:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123198:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12319c:	e30e3250 	movw	r3, #57936	; 0xe250
  1231a0:	e3403014 	movt	r3, #20
  1231a4:	e5933000 	ldr	r3, [r3]
  1231a8:	e0423003 	sub	r3, r2, r3
  1231ac:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
  1231b0:	e30e3230 	movw	r3, #57904	; 0xe230
  1231b4:	e3403014 	movt	r3, #20
  1231b8:	e5933004 	ldr	r3, [r3, #4]
  1231bc:	e3530000 	cmp	r3, #0
  1231c0:	1a000006 	bne	1231e0 <tcp_receive+0xadc>
  1231c4:	e3080508 	movw	r0, #34056	; 0x8508
  1231c8:	e3400014 	movt	r0, #20
  1231cc:	ebff7fd0 	bl	103114 <rt_kprintf>
  1231d0:	e3001529 	movw	r1, #1321	; 0x529
  1231d4:	e30802bc 	movw	r0, #33468	; 0x82bc
  1231d8:	e3400014 	movt	r0, #20
  1231dc:	ebff9fc3 	bl	10b0f0 <sys_arch_assert>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
  1231e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1231e4:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  1231e8:	e1530002 	cmp	r3, r2
  1231ec:	da000006 	ble	12320c <tcp_receive+0xb08>
  1231f0:	e3080518 	movw	r0, #34072	; 0x8518
  1231f4:	e3400014 	movt	r0, #20
  1231f8:	ebff7fc5 	bl	103114 <rt_kprintf>
  1231fc:	e300152a 	movw	r1, #1322	; 0x52a
  123200:	e30802bc 	movw	r0, #33468	; 0x82bc
  123204:	e3400014 	movt	r0, #20
  123208:	ebff9fb8 	bl	10b0f0 <sys_arch_assert>
      if (inseg.p->len < off) {
  12320c:	e30e3230 	movw	r3, #57904	; 0xe230
  123210:	e3403014 	movt	r3, #20
  123214:	e5933004 	ldr	r3, [r3, #4]
  123218:	e1d330ba 	ldrh	r3, [r3, #10]
  12321c:	e1a02003 	mov	r2, r3
  123220:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  123224:	e1530002 	cmp	r3, r2
  123228:	da00003f 	ble	12332c <tcp_receive+0xc28>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
  12322c:	e30e3230 	movw	r3, #57904	; 0xe230
  123230:	e3403014 	movt	r3, #20
  123234:	e5933004 	ldr	r3, [r3, #4]
  123238:	e1d330b8 	ldrh	r3, [r3, #8]
  12323c:	e1a02003 	mov	r2, r3
  123240:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  123244:	e1530002 	cmp	r3, r2
  123248:	da000006 	ble	123268 <tcp_receive+0xb64>
  12324c:	e3080528 	movw	r0, #34088	; 0x8528
  123250:	e3400014 	movt	r0, #20
  123254:	ebff7fae 	bl	103114 <rt_kprintf>
  123258:	e300152c 	movw	r1, #1324	; 0x52c
  12325c:	e30802bc 	movw	r0, #33468	; 0x82bc
  123260:	e3400014 	movt	r0, #20
  123264:	ebff9fa1 	bl	10b0f0 <sys_arch_assert>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  123268:	e30e3230 	movw	r3, #57904	; 0xe230
  12326c:	e3403014 	movt	r3, #20
  123270:	e5933004 	ldr	r3, [r3, #4]
  123274:	e1d320b8 	ldrh	r2, [r3, #8]
  123278:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12327c:	e6ff3073 	uxth	r3, r3
  123280:	e0423003 	sub	r3, r2, r3
  123284:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
        while (p->len < off) {
  123288:	ea00000e 	b	1232c8 <tcp_receive+0xbc4>
          off -= p->len;
  12328c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  123290:	e1d330ba 	ldrh	r3, [r3, #10]
  123294:	e1a02003 	mov	r2, r3
  123298:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12329c:	e0433002 	sub	r3, r3, r2
  1232a0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
  1232a4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1232a8:	e15b23b4 	ldrh	r2, [fp, #-52]	; 0xffffffcc
  1232ac:	e1c320b8 	strh	r2, [r3, #8]
          p->len = 0;
  1232b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1232b4:	e3a02000 	mov	r2, #0
  1232b8:	e1c320ba 	strh	r2, [r3, #10]
          p = p->next;
  1232bc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1232c0:	e5933000 	ldr	r3, [r3]
  1232c4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
        while (p->len < off) {
  1232c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1232cc:	e1d330ba 	ldrh	r3, [r3, #10]
  1232d0:	e1a02003 	mov	r2, r3
  1232d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1232d8:	e1530002 	cmp	r3, r2
  1232dc:	caffffea 	bgt	12328c <tcp_receive+0xb88>
        }
        if (pbuf_header(p, (s16_t)-off)) {
  1232e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1232e4:	e6ff3073 	uxth	r3, r3
  1232e8:	e2633000 	rsb	r3, r3, #0
  1232ec:	e6ff3073 	uxth	r3, r3
  1232f0:	e6bf3073 	sxth	r3, r3
  1232f4:	e1a01003 	mov	r1, r3
  1232f8:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1232fc:	ebffded0 	bl	11ae44 <pbuf_header>
  123300:	e1a03000 	mov	r3, r0
  123304:	e3530000 	cmp	r3, #0
  123308:	0a00001c 	beq	123380 <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  12330c:	e3080538 	movw	r0, #34104	; 0x8538
  123310:	e3400014 	movt	r0, #20
  123314:	ebff7f7e 	bl	103114 <rt_kprintf>
  123318:	e3001539 	movw	r1, #1337	; 0x539
  12331c:	e30802bc 	movw	r0, #33468	; 0x82bc
  123320:	e3400014 	movt	r0, #20
  123324:	ebff9f71 	bl	10b0f0 <sys_arch_assert>
  123328:	ea000014 	b	123380 <tcp_receive+0xc7c>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
  12332c:	e30e3230 	movw	r3, #57904	; 0xe230
  123330:	e3403014 	movt	r3, #20
  123334:	e5933004 	ldr	r3, [r3, #4]
  123338:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12333c:	e6ff2072 	uxth	r2, r2
  123340:	e2622000 	rsb	r2, r2, #0
  123344:	e6ff2072 	uxth	r2, r2
  123348:	e6bf2072 	sxth	r2, r2
  12334c:	e1a01002 	mov	r1, r2
  123350:	e1a00003 	mov	r0, r3
  123354:	ebffdeba 	bl	11ae44 <pbuf_header>
  123358:	e1a03000 	mov	r3, r0
  12335c:	e3530000 	cmp	r3, #0
  123360:	0a000006 	beq	123380 <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  123364:	e3080538 	movw	r0, #34104	; 0x8538
  123368:	e3400014 	movt	r0, #20
  12336c:	ebff7f68 	bl	103114 <rt_kprintf>
  123370:	e300153e 	movw	r1, #1342	; 0x53e
  123374:	e30802bc 	movw	r0, #33468	; 0x82bc
  123378:	e3400014 	movt	r0, #20
  12337c:	ebff9f5b 	bl	10b0f0 <sys_arch_assert>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  123380:	e30e3230 	movw	r3, #57904	; 0xe230
  123384:	e3403014 	movt	r3, #20
  123388:	e1d320b8 	ldrh	r2, [r3, #8]
  12338c:	e30e3250 	movw	r3, #57936	; 0xe250
  123390:	e3403014 	movt	r3, #20
  123394:	e5933000 	ldr	r3, [r3]
  123398:	e6ff1073 	uxth	r1, r3
  12339c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233a0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1233a4:	e6ff3073 	uxth	r3, r3
  1233a8:	e0413003 	sub	r3, r1, r3
  1233ac:	e6ff3073 	uxth	r3, r3
  1233b0:	e0823003 	add	r3, r2, r3
  1233b4:	e6ff2073 	uxth	r2, r3
  1233b8:	e30e3230 	movw	r3, #57904	; 0xe230
  1233bc:	e3403014 	movt	r3, #20
  1233c0:	e1c320b8 	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  1233c4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233c8:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1233cc:	e30e3250 	movw	r3, #57936	; 0xe250
  1233d0:	e3403014 	movt	r3, #20
  1233d4:	e5832000 	str	r2, [r3]
  1233d8:	e30e3230 	movw	r3, #57904	; 0xe230
  1233dc:	e3403014 	movt	r3, #20
  1233e0:	e593200c 	ldr	r2, [r3, #12]
  1233e4:	e30e3250 	movw	r3, #57936	; 0xe250
  1233e8:	e3403014 	movt	r3, #20
  1233ec:	e5933000 	ldr	r3, [r3]
  1233f0:	e5823004 	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  1233f4:	ea00000d 	b	123430 <tcp_receive+0xd2c>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
  1233f8:	e30e3250 	movw	r3, #57936	; 0xe250
  1233fc:	e3403014 	movt	r3, #20
  123400:	e5932000 	ldr	r2, [r3]
  123404:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123408:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12340c:	e0423003 	sub	r3, r2, r3
  123410:	e3530000 	cmp	r3, #0
  123414:	aa000005 	bge	123430 <tcp_receive+0xd2c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
  123418:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12341c:	e5d3301e 	ldrb	r3, [r3, #30]
  123420:	e3833002 	orr	r3, r3, #2
  123424:	e6ef2073 	uxtb	r2, r3
  123428:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12342c:	e5c3201e 	strb	r2, [r3, #30]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  123430:	e30e3250 	movw	r3, #57936	; 0xe250
  123434:	e3403014 	movt	r3, #20
  123438:	e5932000 	ldr	r2, [r3]
  12343c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123440:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123444:	e0423003 	sub	r3, r2, r3
  123448:	e3530000 	cmp	r3, #0
  12344c:	ba0003e1 	blt	1243d8 <tcp_receive+0x1cd4>
  123450:	e30e3250 	movw	r3, #57936	; 0xe250
  123454:	e3403014 	movt	r3, #20
  123458:	e5932000 	ldr	r2, [r3]
  12345c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123460:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123464:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  123468:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  12346c:	e0833001 	add	r3, r3, r1
  123470:	e0423003 	sub	r3, r2, r3
  123474:	e2833001 	add	r3, r3, #1
  123478:	e3530000 	cmp	r3, #0
  12347c:	ca0003d5 	bgt	1243d8 <tcp_receive+0x1cd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
  123480:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123484:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123488:	e30e3250 	movw	r3, #57936	; 0xe250
  12348c:	e3403014 	movt	r3, #20
  123490:	e5933000 	ldr	r3, [r3]
  123494:	e1520003 	cmp	r2, r3
  123498:	1a00026b 	bne	123e4c <tcp_receive+0x1748>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
  12349c:	e30e3230 	movw	r3, #57904	; 0xe230
  1234a0:	e3403014 	movt	r3, #20
  1234a4:	e1d340b8 	ldrh	r4, [r3, #8]
  1234a8:	e30e3230 	movw	r3, #57904	; 0xe230
  1234ac:	e3403014 	movt	r3, #20
  1234b0:	e593300c 	ldr	r3, [r3, #12]
  1234b4:	e1d330bc 	ldrh	r3, [r3, #12]
  1234b8:	e6ff3073 	uxth	r3, r3
  1234bc:	e1a00003 	mov	r0, r3
  1234c0:	ebffcc46 	bl	1165e0 <lwip_htons>
  1234c4:	e1a03000 	mov	r3, r0
  1234c8:	e2033003 	and	r3, r3, #3
  1234cc:	e3530000 	cmp	r3, #0
  1234d0:	0a000001 	beq	1234dc <tcp_receive+0xdd8>
  1234d4:	e3a03001 	mov	r3, #1
  1234d8:	ea000000 	b	1234e0 <tcp_receive+0xddc>
  1234dc:	e3a03000 	mov	r3, #0
  1234e0:	e0833004 	add	r3, r3, r4
  1234e4:	e6ff2073 	uxth	r2, r3
  1234e8:	e30e325a 	movw	r3, #57946	; 0xe25a
  1234ec:	e3403014 	movt	r3, #20
  1234f0:	e1c320b0 	strh	r2, [r3]

        if (tcplen > pcb->rcv_wnd) {
  1234f4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1234f8:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  1234fc:	e30e325a 	movw	r3, #57946	; 0xe25a
  123500:	e3403014 	movt	r3, #20
  123504:	e1d330b0 	ldrh	r3, [r3]
  123508:	e1520003 	cmp	r2, r3
  12350c:	2a000072 	bcs	1236dc <tcp_receive+0xfd8>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  123510:	e30e3230 	movw	r3, #57904	; 0xe230
  123514:	e3403014 	movt	r3, #20
  123518:	e593300c 	ldr	r3, [r3, #12]
  12351c:	e1d330bc 	ldrh	r3, [r3, #12]
  123520:	e6ff3073 	uxth	r3, r3
  123524:	e1a00003 	mov	r0, r3
  123528:	ebffcc2c 	bl	1165e0 <lwip_htons>
  12352c:	e1a03000 	mov	r3, r0
  123530:	e2033001 	and	r3, r3, #1
  123534:	e3530000 	cmp	r3, #0
  123538:	0a00001a 	beq	1235a8 <tcp_receive+0xea4>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
  12353c:	e30e3230 	movw	r3, #57904	; 0xe230
  123540:	e3403014 	movt	r3, #20
  123544:	e593300c 	ldr	r3, [r3, #12]
  123548:	e1d330bc 	ldrh	r3, [r3, #12]
  12354c:	e6ff3073 	uxth	r3, r3
  123550:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  123554:	e6ff4073 	uxth	r4, r3
  123558:	e30e3230 	movw	r3, #57904	; 0xe230
  12355c:	e3403014 	movt	r3, #20
  123560:	e593300c 	ldr	r3, [r3, #12]
  123564:	e1d330bc 	ldrh	r3, [r3, #12]
  123568:	e6ff3073 	uxth	r3, r3
  12356c:	e1a00003 	mov	r0, r3
  123570:	ebffcc1a 	bl	1165e0 <lwip_htons>
  123574:	e1a03000 	mov	r3, r0
  123578:	e203303e 	and	r3, r3, #62	; 0x3e
  12357c:	e6ff3073 	uxth	r3, r3
  123580:	e1a00003 	mov	r0, r3
  123584:	ebffcc15 	bl	1165e0 <lwip_htons>
  123588:	e1a03000 	mov	r3, r0
  12358c:	e1a02003 	mov	r2, r3
  123590:	e30e3230 	movw	r3, #57904	; 0xe230
  123594:	e3403014 	movt	r3, #20
  123598:	e593300c 	ldr	r3, [r3, #12]
  12359c:	e1842002 	orr	r2, r4, r2
  1235a0:	e6ff2072 	uxth	r2, r2
  1235a4:	e1c320bc 	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
  1235a8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1235ac:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  1235b0:	e30e3230 	movw	r3, #57904	; 0xe230
  1235b4:	e3403014 	movt	r3, #20
  1235b8:	e1c320b8 	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  1235bc:	e30e3230 	movw	r3, #57904	; 0xe230
  1235c0:	e3403014 	movt	r3, #20
  1235c4:	e593300c 	ldr	r3, [r3, #12]
  1235c8:	e1d330bc 	ldrh	r3, [r3, #12]
  1235cc:	e6ff3073 	uxth	r3, r3
  1235d0:	e1a00003 	mov	r0, r3
  1235d4:	ebffcc01 	bl	1165e0 <lwip_htons>
  1235d8:	e1a03000 	mov	r3, r0
  1235dc:	e2033002 	and	r3, r3, #2
  1235e0:	e3530000 	cmp	r3, #0
  1235e4:	0a000007 	beq	123608 <tcp_receive+0xf04>
            inseg.len -= 1;
  1235e8:	e30e3230 	movw	r3, #57904	; 0xe230
  1235ec:	e3403014 	movt	r3, #20
  1235f0:	e1d330b8 	ldrh	r3, [r3, #8]
  1235f4:	e2433001 	sub	r3, r3, #1
  1235f8:	e6ff2073 	uxth	r2, r3
  1235fc:	e30e3230 	movw	r3, #57904	; 0xe230
  123600:	e3403014 	movt	r3, #20
  123604:	e1c320b8 	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
  123608:	e30e3230 	movw	r3, #57904	; 0xe230
  12360c:	e3403014 	movt	r3, #20
  123610:	e5932004 	ldr	r2, [r3, #4]
  123614:	e30e3230 	movw	r3, #57904	; 0xe230
  123618:	e3403014 	movt	r3, #20
  12361c:	e1d330b8 	ldrh	r3, [r3, #8]
  123620:	e1a01003 	mov	r1, r3
  123624:	e1a00002 	mov	r0, r2
  123628:	ebffdcda 	bl	11a998 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
  12362c:	e30e3230 	movw	r3, #57904	; 0xe230
  123630:	e3403014 	movt	r3, #20
  123634:	e1d340b8 	ldrh	r4, [r3, #8]
  123638:	e30e3230 	movw	r3, #57904	; 0xe230
  12363c:	e3403014 	movt	r3, #20
  123640:	e593300c 	ldr	r3, [r3, #12]
  123644:	e1d330bc 	ldrh	r3, [r3, #12]
  123648:	e6ff3073 	uxth	r3, r3
  12364c:	e1a00003 	mov	r0, r3
  123650:	ebffcbe2 	bl	1165e0 <lwip_htons>
  123654:	e1a03000 	mov	r3, r0
  123658:	e2033003 	and	r3, r3, #3
  12365c:	e3530000 	cmp	r3, #0
  123660:	0a000001 	beq	12366c <tcp_receive+0xf68>
  123664:	e3a03001 	mov	r3, #1
  123668:	ea000000 	b	123670 <tcp_receive+0xf6c>
  12366c:	e3a03000 	mov	r3, #0
  123670:	e0833004 	add	r3, r3, r4
  123674:	e6ff2073 	uxth	r2, r3
  123678:	e30e325a 	movw	r3, #57946	; 0xe25a
  12367c:	e3403014 	movt	r3, #20
  123680:	e1c320b0 	strh	r2, [r3]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  123684:	e30e325a 	movw	r3, #57946	; 0xe25a
  123688:	e3403014 	movt	r3, #20
  12368c:	e1d330b0 	ldrh	r3, [r3]
  123690:	e1a02003 	mov	r2, r3
  123694:	e30e3250 	movw	r3, #57936	; 0xe250
  123698:	e3403014 	movt	r3, #20
  12369c:	e5933000 	ldr	r3, [r3]
  1236a0:	e0822003 	add	r2, r2, r3
  1236a4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1236a8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1236ac:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  1236b0:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1236b4:	e0833001 	add	r3, r3, r1
  1236b8:	e1520003 	cmp	r2, r3
  1236bc:	0a000006 	beq	1236dc <tcp_receive+0xfd8>
  1236c0:	e308054c 	movw	r0, #34124	; 0x854c
  1236c4:	e3400014 	movt	r0, #20
  1236c8:	ebff7e91 	bl	103114 <rt_kprintf>
  1236cc:	e300156c 	movw	r1, #1388	; 0x56c
  1236d0:	e30802bc 	movw	r0, #33468	; 0x82bc
  1236d4:	e3400014 	movt	r0, #20
  1236d8:	ebff9e84 	bl	10b0f0 <sys_arch_assert>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
  1236dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1236e0:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1236e4:	e3530000 	cmp	r3, #0
  1236e8:	0a0000da 	beq	123a58 <tcp_receive+0x1354>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  1236ec:	e30e3230 	movw	r3, #57904	; 0xe230
  1236f0:	e3403014 	movt	r3, #20
  1236f4:	e593300c 	ldr	r3, [r3, #12]
  1236f8:	e1d330bc 	ldrh	r3, [r3, #12]
  1236fc:	e6ff3073 	uxth	r3, r3
  123700:	e1a00003 	mov	r0, r3
  123704:	ebffcbb5 	bl	1165e0 <lwip_htons>
  123708:	e1a03000 	mov	r3, r0
  12370c:	e2033001 	and	r3, r3, #1
  123710:	e3530000 	cmp	r3, #0
  123714:	0a00000f 	beq	123758 <tcp_receive+0x1054>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
  123718:	ea000009 	b	123744 <tcp_receive+0x1040>
              struct tcp_seg *old_ooseq = pcb->ooseq;
  12371c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123720:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123724:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
              pcb->ooseq = pcb->ooseq->next;
  123728:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12372c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123730:	e5932000 	ldr	r2, [r3]
  123734:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123738:	e5832074 	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
  12373c:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  123740:	ebffef4f 	bl	11f484 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
  123744:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123748:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  12374c:	e3530000 	cmp	r3, #0
  123750:	1afffff1 	bne	12371c <tcp_receive+0x1018>
  123754:	ea0000bf 	b	123a58 <tcp_receive+0x1354>
            }
          } else {
            next = pcb->ooseq;
  123758:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12375c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123760:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  123764:	ea000040 	b	12386c <tcp_receive+0x1168>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  123768:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12376c:	e593300c 	ldr	r3, [r3, #12]
  123770:	e1d330bc 	ldrh	r3, [r3, #12]
  123774:	e6ff3073 	uxth	r3, r3
  123778:	e1a00003 	mov	r0, r3
  12377c:	ebffcb97 	bl	1165e0 <lwip_htons>
  123780:	e1a03000 	mov	r3, r0
  123784:	e2033001 	and	r3, r3, #1
  123788:	e3530000 	cmp	r3, #0
  12378c:	0a00002f 	beq	123850 <tcp_receive+0x114c>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  123790:	e30e3230 	movw	r3, #57904	; 0xe230
  123794:	e3403014 	movt	r3, #20
  123798:	e593300c 	ldr	r3, [r3, #12]
  12379c:	e1d330bc 	ldrh	r3, [r3, #12]
  1237a0:	e6ff3073 	uxth	r3, r3
  1237a4:	e1a00003 	mov	r0, r3
  1237a8:	ebffcb8c 	bl	1165e0 <lwip_htons>
  1237ac:	e1a03000 	mov	r3, r0
  1237b0:	e2033002 	and	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  1237b4:	e3530000 	cmp	r3, #0
  1237b8:	1a000024 	bne	123850 <tcp_receive+0x114c>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  1237bc:	e30e3230 	movw	r3, #57904	; 0xe230
  1237c0:	e3403014 	movt	r3, #20
  1237c4:	e593300c 	ldr	r3, [r3, #12]
  1237c8:	e1d330bc 	ldrh	r3, [r3, #12]
  1237cc:	e6ff4073 	uxth	r4, r3
  1237d0:	e3a00001 	mov	r0, #1
  1237d4:	ebffcb81 	bl	1165e0 <lwip_htons>
  1237d8:	e1a03000 	mov	r3, r0
  1237dc:	e1a02003 	mov	r2, r3
  1237e0:	e30e3230 	movw	r3, #57904	; 0xe230
  1237e4:	e3403014 	movt	r3, #20
  1237e8:	e593300c 	ldr	r3, [r3, #12]
  1237ec:	e1842002 	orr	r2, r4, r2
  1237f0:	e6ff2072 	uxth	r2, r2
  1237f4:	e1c320bc 	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
  1237f8:	e30e3230 	movw	r3, #57904	; 0xe230
  1237fc:	e3403014 	movt	r3, #20
  123800:	e1d340b8 	ldrh	r4, [r3, #8]
  123804:	e30e3230 	movw	r3, #57904	; 0xe230
  123808:	e3403014 	movt	r3, #20
  12380c:	e593300c 	ldr	r3, [r3, #12]
  123810:	e1d330bc 	ldrh	r3, [r3, #12]
  123814:	e6ff3073 	uxth	r3, r3
  123818:	e1a00003 	mov	r0, r3
  12381c:	ebffcb6f 	bl	1165e0 <lwip_htons>
  123820:	e1a03000 	mov	r3, r0
  123824:	e2033003 	and	r3, r3, #3
  123828:	e3530000 	cmp	r3, #0
  12382c:	0a000001 	beq	123838 <tcp_receive+0x1134>
  123830:	e3a03001 	mov	r3, #1
  123834:	ea000000 	b	12383c <tcp_receive+0x1138>
  123838:	e3a03000 	mov	r3, #0
  12383c:	e0833004 	add	r3, r3, r4
  123840:	e6ff2073 	uxth	r2, r3
  123844:	e30e325a 	movw	r3, #57946	; 0xe25a
  123848:	e3403014 	movt	r3, #20
  12384c:	e1c320b0 	strh	r2, [r3]
              }
              prev = next;
  123850:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123854:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
              next = next->next;
  123858:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12385c:	e5933000 	ldr	r3, [r3]
  123860:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
              tcp_seg_free(prev);
  123864:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  123868:	ebffef05 	bl	11f484 <tcp_seg_free>
            while (next &&
  12386c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123870:	e3530000 	cmp	r3, #0
  123874:	0a000010 	beq	1238bc <tcp_receive+0x11b8>
                   TCP_SEQ_GEQ(seqno + tcplen,
  123878:	e30e325a 	movw	r3, #57946	; 0xe25a
  12387c:	e3403014 	movt	r3, #20
  123880:	e1d330b0 	ldrh	r3, [r3]
  123884:	e1a02003 	mov	r2, r3
  123888:	e30e3250 	movw	r3, #57936	; 0xe250
  12388c:	e3403014 	movt	r3, #20
  123890:	e5933000 	ldr	r3, [r3]
  123894:	e0822003 	add	r2, r2, r3
  123898:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12389c:	e593300c 	ldr	r3, [r3, #12]
  1238a0:	e5933004 	ldr	r3, [r3, #4]
  1238a4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1238a8:	e1d110b8 	ldrh	r1, [r1, #8]
  1238ac:	e0833001 	add	r3, r3, r1
  1238b0:	e0423003 	sub	r3, r2, r3
            while (next &&
  1238b4:	e3530000 	cmp	r3, #0
  1238b8:	aaffffaa 	bge	123768 <tcp_receive+0x1064>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
  1238bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1238c0:	e3530000 	cmp	r3, #0
  1238c4:	0a000060 	beq	123a4c <tcp_receive+0x1348>
                TCP_SEQ_GT(seqno + tcplen,
  1238c8:	e30e325a 	movw	r3, #57946	; 0xe25a
  1238cc:	e3403014 	movt	r3, #20
  1238d0:	e1d330b0 	ldrh	r3, [r3]
  1238d4:	e1a02003 	mov	r2, r3
  1238d8:	e30e3250 	movw	r3, #57936	; 0xe250
  1238dc:	e3403014 	movt	r3, #20
  1238e0:	e5933000 	ldr	r3, [r3]
  1238e4:	e0822003 	add	r2, r2, r3
  1238e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1238ec:	e593300c 	ldr	r3, [r3, #12]
  1238f0:	e5933004 	ldr	r3, [r3, #4]
  1238f4:	e0423003 	sub	r3, r2, r3
            if (next &&
  1238f8:	e3530000 	cmp	r3, #0
  1238fc:	da000052 	ble	123a4c <tcp_receive+0x1348>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  123900:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123904:	e593300c 	ldr	r3, [r3, #12]
  123908:	e5933004 	ldr	r3, [r3, #4]
  12390c:	e6ff2073 	uxth	r2, r3
  123910:	e30e3250 	movw	r3, #57936	; 0xe250
  123914:	e3403014 	movt	r3, #20
  123918:	e5933000 	ldr	r3, [r3]
  12391c:	e6ff3073 	uxth	r3, r3
  123920:	e0423003 	sub	r3, r2, r3
  123924:	e6ff2073 	uxth	r2, r3
  123928:	e30e3230 	movw	r3, #57904	; 0xe230
  12392c:	e3403014 	movt	r3, #20
  123930:	e1c320b8 	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  123934:	e30e3230 	movw	r3, #57904	; 0xe230
  123938:	e3403014 	movt	r3, #20
  12393c:	e593300c 	ldr	r3, [r3, #12]
  123940:	e1d330bc 	ldrh	r3, [r3, #12]
  123944:	e6ff3073 	uxth	r3, r3
  123948:	e1a00003 	mov	r0, r3
  12394c:	ebffcb23 	bl	1165e0 <lwip_htons>
  123950:	e1a03000 	mov	r3, r0
  123954:	e2033002 	and	r3, r3, #2
  123958:	e3530000 	cmp	r3, #0
  12395c:	0a000007 	beq	123980 <tcp_receive+0x127c>
                inseg.len -= 1;
  123960:	e30e3230 	movw	r3, #57904	; 0xe230
  123964:	e3403014 	movt	r3, #20
  123968:	e1d330b8 	ldrh	r3, [r3, #8]
  12396c:	e2433001 	sub	r3, r3, #1
  123970:	e6ff2073 	uxth	r2, r3
  123974:	e30e3230 	movw	r3, #57904	; 0xe230
  123978:	e3403014 	movt	r3, #20
  12397c:	e1c320b8 	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
  123980:	e30e3230 	movw	r3, #57904	; 0xe230
  123984:	e3403014 	movt	r3, #20
  123988:	e5932004 	ldr	r2, [r3, #4]
  12398c:	e30e3230 	movw	r3, #57904	; 0xe230
  123990:	e3403014 	movt	r3, #20
  123994:	e1d330b8 	ldrh	r3, [r3, #8]
  123998:	e1a01003 	mov	r1, r3
  12399c:	e1a00002 	mov	r0, r2
  1239a0:	ebffdbfc 	bl	11a998 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
  1239a4:	e30e3230 	movw	r3, #57904	; 0xe230
  1239a8:	e3403014 	movt	r3, #20
  1239ac:	e1d340b8 	ldrh	r4, [r3, #8]
  1239b0:	e30e3230 	movw	r3, #57904	; 0xe230
  1239b4:	e3403014 	movt	r3, #20
  1239b8:	e593300c 	ldr	r3, [r3, #12]
  1239bc:	e1d330bc 	ldrh	r3, [r3, #12]
  1239c0:	e6ff3073 	uxth	r3, r3
  1239c4:	e1a00003 	mov	r0, r3
  1239c8:	ebffcb04 	bl	1165e0 <lwip_htons>
  1239cc:	e1a03000 	mov	r3, r0
  1239d0:	e2033003 	and	r3, r3, #3
  1239d4:	e3530000 	cmp	r3, #0
  1239d8:	0a000001 	beq	1239e4 <tcp_receive+0x12e0>
  1239dc:	e3a03001 	mov	r3, #1
  1239e0:	ea000000 	b	1239e8 <tcp_receive+0x12e4>
  1239e4:	e3a03000 	mov	r3, #0
  1239e8:	e0833004 	add	r3, r3, r4
  1239ec:	e6ff2073 	uxth	r2, r3
  1239f0:	e30e325a 	movw	r3, #57946	; 0xe25a
  1239f4:	e3403014 	movt	r3, #20
  1239f8:	e1c320b0 	strh	r2, [r3]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
  1239fc:	e30e325a 	movw	r3, #57946	; 0xe25a
  123a00:	e3403014 	movt	r3, #20
  123a04:	e1d330b0 	ldrh	r3, [r3]
  123a08:	e1a02003 	mov	r2, r3
  123a0c:	e30e3250 	movw	r3, #57936	; 0xe250
  123a10:	e3403014 	movt	r3, #20
  123a14:	e5933000 	ldr	r3, [r3]
  123a18:	e0822003 	add	r2, r2, r3
  123a1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123a20:	e593300c 	ldr	r3, [r3, #12]
  123a24:	e5933004 	ldr	r3, [r3, #4]
  123a28:	e1520003 	cmp	r2, r3
  123a2c:	0a000006 	beq	123a4c <tcp_receive+0x1348>
  123a30:	e3080584 	movw	r0, #34180	; 0x8584
  123a34:	e3400014 	movt	r0, #20
  123a38:	ebff7db5 	bl	103114 <rt_kprintf>
  123a3c:	e300159c 	movw	r1, #1436	; 0x59c
  123a40:	e30802bc 	movw	r0, #33468	; 0x82bc
  123a44:	e3400014 	movt	r0, #20
  123a48:	ebff9da8 	bl	10b0f0 <sys_arch_assert>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
  123a4c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a50:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  123a54:	e5832074 	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
  123a58:	e30e325a 	movw	r3, #57946	; 0xe25a
  123a5c:	e3403014 	movt	r3, #20
  123a60:	e1d330b0 	ldrh	r3, [r3]
  123a64:	e1a02003 	mov	r2, r3
  123a68:	e30e3250 	movw	r3, #57936	; 0xe250
  123a6c:	e3403014 	movt	r3, #20
  123a70:	e5933000 	ldr	r3, [r3]
  123a74:	e0822003 	add	r2, r2, r3
  123a78:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a7c:	e5832028 	str	r2, [r3, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
  123a80:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a84:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123a88:	e30e325a 	movw	r3, #57946	; 0xe25a
  123a8c:	e3403014 	movt	r3, #20
  123a90:	e1d330b0 	ldrh	r3, [r3]
  123a94:	e1520003 	cmp	r2, r3
  123a98:	2a000006 	bcs	123ab8 <tcp_receive+0x13b4>
  123a9c:	e30805c0 	movw	r0, #34240	; 0x85c0
  123aa0:	e3400014 	movt	r0, #20
  123aa4:	ebff7d9a 	bl	103114 <rt_kprintf>
  123aa8:	e30015a6 	movw	r1, #1446	; 0x5a6
  123aac:	e30802bc 	movw	r0, #33468	; 0x82bc
  123ab0:	e3400014 	movt	r0, #20
  123ab4:	ebff9d8d 	bl	10b0f0 <sys_arch_assert>
        pcb->rcv_wnd -= tcplen;
  123ab8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123abc:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123ac0:	e30e325a 	movw	r3, #57946	; 0xe25a
  123ac4:	e3403014 	movt	r3, #20
  123ac8:	e1d330b0 	ldrh	r3, [r3]
  123acc:	e0423003 	sub	r3, r2, r3
  123ad0:	e6ff2073 	uxth	r2, r3
  123ad4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ad8:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
  123adc:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123ae0:	ebffe93b 	bl	11dfd4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
  123ae4:	e30e3230 	movw	r3, #57904	; 0xe230
  123ae8:	e3403014 	movt	r3, #20
  123aec:	e5933004 	ldr	r3, [r3, #4]
  123af0:	e1d330b8 	ldrh	r3, [r3, #8]
  123af4:	e3530000 	cmp	r3, #0
  123af8:	0a000009 	beq	123b24 <tcp_receive+0x1420>
          recv_data = inseg.p;
  123afc:	e30e3230 	movw	r3, #57904	; 0xe230
  123b00:	e3403014 	movt	r3, #20
  123b04:	e5932004 	ldr	r2, [r3, #4]
  123b08:	e30e3260 	movw	r3, #57952	; 0xe260
  123b0c:	e3403014 	movt	r3, #20
  123b10:	e5832000 	str	r2, [r3]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
  123b14:	e30e3230 	movw	r3, #57904	; 0xe230
  123b18:	e3403014 	movt	r3, #20
  123b1c:	e3a02000 	mov	r2, #0
  123b20:	e5832004 	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  123b24:	e30e3230 	movw	r3, #57904	; 0xe230
  123b28:	e3403014 	movt	r3, #20
  123b2c:	e593300c 	ldr	r3, [r3, #12]
  123b30:	e1d330bc 	ldrh	r3, [r3, #12]
  123b34:	e6ff3073 	uxth	r3, r3
  123b38:	e1a00003 	mov	r0, r3
  123b3c:	ebffcaa7 	bl	1165e0 <lwip_htons>
  123b40:	e1a03000 	mov	r3, r0
  123b44:	e2033001 	and	r3, r3, #1
  123b48:	e3530000 	cmp	r3, #0
  123b4c:	0a000099 	beq	123db8 <tcp_receive+0x16b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
  123b50:	e30e325d 	movw	r3, #57949	; 0xe25d
  123b54:	e3403014 	movt	r3, #20
  123b58:	e5d33000 	ldrb	r3, [r3]
  123b5c:	e3833020 	orr	r3, r3, #32
  123b60:	e6ef2073 	uxtb	r2, r3
  123b64:	e30e325d 	movw	r3, #57949	; 0xe25d
  123b68:	e3403014 	movt	r3, #20
  123b6c:	e5c32000 	strb	r2, [r3]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  123b70:	ea000090 	b	123db8 <tcp_receive+0x16b4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
  123b74:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b78:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123b7c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
          seqno = pcb->ooseq->tcphdr->seqno;
  123b80:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b84:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123b88:	e593300c 	ldr	r3, [r3, #12]
  123b8c:	e5932004 	ldr	r2, [r3, #4]
  123b90:	e30e3250 	movw	r3, #57936	; 0xe250
  123b94:	e3403014 	movt	r3, #20
  123b98:	e5832000 	str	r2, [r3]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  123b9c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123ba0:	e1d330b8 	ldrh	r3, [r3, #8]
  123ba4:	e1a04003 	mov	r4, r3
  123ba8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123bac:	e593300c 	ldr	r3, [r3, #12]
  123bb0:	e1d330bc 	ldrh	r3, [r3, #12]
  123bb4:	e6ff3073 	uxth	r3, r3
  123bb8:	e1a00003 	mov	r0, r3
  123bbc:	ebffca87 	bl	1165e0 <lwip_htons>
  123bc0:	e1a03000 	mov	r3, r0
  123bc4:	e2033003 	and	r3, r3, #3
  123bc8:	e3530000 	cmp	r3, #0
  123bcc:	0a000001 	beq	123bd8 <tcp_receive+0x14d4>
  123bd0:	e3a03001 	mov	r3, #1
  123bd4:	ea000000 	b	123bdc <tcp_receive+0x14d8>
  123bd8:	e3a03000 	mov	r3, #0
  123bdc:	e0832004 	add	r2, r3, r4
  123be0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123be4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123be8:	e0822003 	add	r2, r2, r3
  123bec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123bf0:	e5832028 	str	r2, [r3, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
  123bf4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123bf8:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  123bfc:	e1a04003 	mov	r4, r3
  123c00:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123c04:	e1d330b8 	ldrh	r3, [r3, #8]
  123c08:	e1a05003 	mov	r5, r3
  123c0c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123c10:	e593300c 	ldr	r3, [r3, #12]
  123c14:	e1d330bc 	ldrh	r3, [r3, #12]
  123c18:	e6ff3073 	uxth	r3, r3
  123c1c:	e1a00003 	mov	r0, r3
  123c20:	ebffca6e 	bl	1165e0 <lwip_htons>
  123c24:	e1a03000 	mov	r3, r0
  123c28:	e2033003 	and	r3, r3, #3
  123c2c:	e3530000 	cmp	r3, #0
  123c30:	0a000001 	beq	123c3c <tcp_receive+0x1538>
  123c34:	e3a03001 	mov	r3, #1
  123c38:	ea000000 	b	123c40 <tcp_receive+0x153c>
  123c3c:	e3a03000 	mov	r3, #0
  123c40:	e0833005 	add	r3, r3, r5
  123c44:	e1540003 	cmp	r4, r3
  123c48:	2a000006 	bcs	123c68 <tcp_receive+0x1564>
  123c4c:	e30805e0 	movw	r0, #34272	; 0x85e0
  123c50:	e3400014 	movt	r0, #20
  123c54:	ebff7d2e 	bl	103114 <rt_kprintf>
  123c58:	e30015cb 	movw	r1, #1483	; 0x5cb
  123c5c:	e30802bc 	movw	r0, #33468	; 0x82bc
  123c60:	e3400014 	movt	r0, #20
  123c64:	ebff9d21 	bl	10b0f0 <sys_arch_assert>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  123c68:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123c6c:	e1d330b8 	ldrh	r3, [r3, #8]
  123c70:	e1a04003 	mov	r4, r3
  123c74:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123c78:	e593300c 	ldr	r3, [r3, #12]
  123c7c:	e1d330bc 	ldrh	r3, [r3, #12]
  123c80:	e6ff3073 	uxth	r3, r3
  123c84:	e1a00003 	mov	r0, r3
  123c88:	ebffca54 	bl	1165e0 <lwip_htons>
  123c8c:	e1a03000 	mov	r3, r0
  123c90:	e2033003 	and	r3, r3, #3
  123c94:	e3530000 	cmp	r3, #0
  123c98:	0a000001 	beq	123ca4 <tcp_receive+0x15a0>
  123c9c:	e3a03001 	mov	r3, #1
  123ca0:	ea000000 	b	123ca8 <tcp_receive+0x15a4>
  123ca4:	e3a03000 	mov	r3, #0
  123ca8:	e0831004 	add	r1, r3, r4
  123cac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123cb0:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123cb4:	e6ff3071 	uxth	r3, r1
  123cb8:	e0423003 	sub	r3, r2, r3
  123cbc:	e6ff2073 	uxth	r2, r3
  123cc0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123cc4:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

          tcp_update_rcv_ann_wnd(pcb);
  123cc8:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123ccc:	ebffe8c0 	bl	11dfd4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
  123cd0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123cd4:	e5933004 	ldr	r3, [r3, #4]
  123cd8:	e1d330b8 	ldrh	r3, [r3, #8]
  123cdc:	e3530000 	cmp	r3, #0
  123ce0:	0a000015 	beq	123d3c <tcp_receive+0x1638>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
  123ce4:	e30e3260 	movw	r3, #57952	; 0xe260
  123ce8:	e3403014 	movt	r3, #20
  123cec:	e5933000 	ldr	r3, [r3]
  123cf0:	e3530000 	cmp	r3, #0
  123cf4:	0a000008 	beq	123d1c <tcp_receive+0x1618>
              pbuf_cat(recv_data, cseg->p);
  123cf8:	e30e3260 	movw	r3, #57952	; 0xe260
  123cfc:	e3403014 	movt	r3, #20
  123d00:	e5932000 	ldr	r2, [r3]
  123d04:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123d08:	e5933004 	ldr	r3, [r3, #4]
  123d0c:	e1a01003 	mov	r1, r3
  123d10:	e1a00002 	mov	r0, r2
  123d14:	ebffdd1f 	bl	11b198 <pbuf_cat>
  123d18:	ea000004 	b	123d30 <tcp_receive+0x162c>
            } else {
              recv_data = cseg->p;
  123d1c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123d20:	e5932004 	ldr	r2, [r3, #4]
  123d24:	e30e3260 	movw	r3, #57952	; 0xe260
  123d28:	e3403014 	movt	r3, #20
  123d2c:	e5832000 	str	r2, [r3]
            }
            cseg->p = NULL;
  123d30:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123d34:	e3a02000 	mov	r2, #0
  123d38:	e5832004 	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  123d3c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123d40:	e593300c 	ldr	r3, [r3, #12]
  123d44:	e1d330bc 	ldrh	r3, [r3, #12]
  123d48:	e6ff3073 	uxth	r3, r3
  123d4c:	e1a00003 	mov	r0, r3
  123d50:	ebffca22 	bl	1165e0 <lwip_htons>
  123d54:	e1a03000 	mov	r3, r0
  123d58:	e2033001 	and	r3, r3, #1
  123d5c:	e3530000 	cmp	r3, #0
  123d60:	0a00000e 	beq	123da0 <tcp_receive+0x169c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
  123d64:	e30e325d 	movw	r3, #57949	; 0xe25d
  123d68:	e3403014 	movt	r3, #20
  123d6c:	e5d33000 	ldrb	r3, [r3]
  123d70:	e3833020 	orr	r3, r3, #32
  123d74:	e6ef2073 	uxtb	r2, r3
  123d78:	e30e325d 	movw	r3, #57949	; 0xe25d
  123d7c:	e3403014 	movt	r3, #20
  123d80:	e5c32000 	strb	r2, [r3]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  123d84:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123d88:	e5933014 	ldr	r3, [r3, #20]
  123d8c:	e3530004 	cmp	r3, #4
  123d90:	1a000002 	bne	123da0 <tcp_receive+0x169c>
              pcb->state = CLOSE_WAIT;
  123d94:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123d98:	e3a02007 	mov	r2, #7
  123d9c:	e5832014 	str	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
  123da0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123da4:	e5932000 	ldr	r2, [r3]
  123da8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123dac:	e5832074 	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
  123db0:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123db4:	ebffedb2 	bl	11f484 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
  123db8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123dbc:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123dc0:	e3530000 	cmp	r3, #0
  123dc4:	0a000007 	beq	123de8 <tcp_receive+0x16e4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  123dc8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123dcc:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123dd0:	e593300c 	ldr	r3, [r3, #12]
  123dd4:	e5932004 	ldr	r2, [r3, #4]
  123dd8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ddc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
        while (pcb->ooseq != NULL &&
  123de0:	e1520003 	cmp	r2, r3
  123de4:	0affff62 	beq	123b74 <tcp_receive+0x1470>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
  123de8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123dec:	e5d3301e 	ldrb	r3, [r3, #30]
  123df0:	e2033001 	and	r3, r3, #1
  123df4:	e3530000 	cmp	r3, #0
  123df8:	0a00000c 	beq	123e30 <tcp_receive+0x172c>
  123dfc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e00:	e5d3301e 	ldrb	r3, [r3, #30]
  123e04:	e3c33001 	bic	r3, r3, #1
  123e08:	e6ef2073 	uxtb	r2, r3
  123e0c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e10:	e5c3201e 	strb	r2, [r3, #30]
  123e14:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e18:	e5d3301e 	ldrb	r3, [r3, #30]
  123e1c:	e3833002 	orr	r3, r3, #2
  123e20:	e6ef2073 	uxtb	r2, r3
  123e24:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e28:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  123e2c:	ea00016c 	b	1243e4 <tcp_receive+0x1ce0>
        tcp_ack(pcb);
  123e30:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e34:	e5d3301e 	ldrb	r3, [r3, #30]
  123e38:	e3833001 	orr	r3, r3, #1
  123e3c:	e6ef2073 	uxtb	r2, r3
  123e40:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e44:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  123e48:	ea000165 	b	1243e4 <tcp_receive+0x1ce0>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
  123e4c:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123e50:	eb0007e2 	bl	125de0 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
  123e54:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e58:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123e5c:	e3530000 	cmp	r3, #0
  123e60:	1a000006 	bne	123e80 <tcp_receive+0x177c>
          pcb->ooseq = tcp_seg_copy(&inseg);
  123e64:	e30e0230 	movw	r0, #57904	; 0xe230
  123e68:	e3400014 	movt	r0, #20
  123e6c:	ebffeda6 	bl	11f50c <tcp_seg_copy>
  123e70:	e1a02000 	mov	r2, r0
  123e74:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e78:	e5832074 	str	r2, [r3, #116]	; 0x74
      if (pcb->rcv_nxt == seqno) {
  123e7c:	ea000158 	b	1243e4 <tcp_receive+0x1ce0>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
  123e80:	e3a03000 	mov	r3, #0
  123e84:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  123e88:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e8c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123e90:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  123e94:	ea00013f 	b	124398 <tcp_receive+0x1c94>
            if (seqno == next->tcphdr->seqno) {
  123e98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e9c:	e593300c 	ldr	r3, [r3, #12]
  123ea0:	e5932004 	ldr	r2, [r3, #4]
  123ea4:	e30e3250 	movw	r3, #57936	; 0xe250
  123ea8:	e3403014 	movt	r3, #20
  123eac:	e5933000 	ldr	r3, [r3]
  123eb0:	e1520003 	cmp	r2, r3
  123eb4:	1a00001b 	bne	123f28 <tcp_receive+0x1824>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
  123eb8:	e30e3230 	movw	r3, #57904	; 0xe230
  123ebc:	e3403014 	movt	r3, #20
  123ec0:	e1d320b8 	ldrh	r2, [r3, #8]
  123ec4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123ec8:	e1d330b8 	ldrh	r3, [r3, #8]
  123ecc:	e1520003 	cmp	r2, r3
  123ed0:	9a000134 	bls	1243a8 <tcp_receive+0x1ca4>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
  123ed4:	e30e0230 	movw	r0, #57904	; 0xe230
  123ed8:	e3400014 	movt	r0, #20
  123edc:	ebffed8a 	bl	11f50c <tcp_seg_copy>
  123ee0:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                if (cseg != NULL) {
  123ee4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123ee8:	e3530000 	cmp	r3, #0
  123eec:	0a00012f 	beq	1243b0 <tcp_receive+0x1cac>
                  if (prev != NULL) {
  123ef0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123ef4:	e3530000 	cmp	r3, #0
  123ef8:	0a000003 	beq	123f0c <tcp_receive+0x1808>
                    prev->next = cseg;
  123efc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123f00:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123f04:	e5832000 	str	r2, [r3]
  123f08:	ea000002 	b	123f18 <tcp_receive+0x1814>
                  } else {
                    pcb->ooseq = cseg;
  123f0c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123f10:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123f14:	e5832074 	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
  123f18:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123f1c:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123f20:	ebfff989 	bl	12254c <tcp_oos_insert_segment>
                }
                break;
  123f24:	ea000121 	b	1243b0 <tcp_receive+0x1cac>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
  123f28:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123f2c:	e3530000 	cmp	r3, #0
  123f30:	1a000016 	bne	123f90 <tcp_receive+0x188c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  123f34:	e30e3250 	movw	r3, #57936	; 0xe250
  123f38:	e3403014 	movt	r3, #20
  123f3c:	e5932000 	ldr	r2, [r3]
  123f40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f44:	e593300c 	ldr	r3, [r3, #12]
  123f48:	e5933004 	ldr	r3, [r3, #4]
  123f4c:	e0423003 	sub	r3, r2, r3
  123f50:	e3530000 	cmp	r3, #0
  123f54:	aa00004e 	bge	124094 <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
  123f58:	e30e0230 	movw	r0, #57904	; 0xe230
  123f5c:	e3400014 	movt	r0, #20
  123f60:	ebffed69 	bl	11f50c <tcp_seg_copy>
  123f64:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  123f68:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123f6c:	e3530000 	cmp	r3, #0
  123f70:	0a000110 	beq	1243b8 <tcp_receive+0x1cb4>
                    pcb->ooseq = cseg;
  123f74:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123f78:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123f7c:	e5832074 	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
  123f80:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123f84:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123f88:	ebfff96f 	bl	12254c <tcp_oos_insert_segment>
                  }
                  break;
  123f8c:	ea000109 	b	1243b8 <tcp_receive+0x1cb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  123f90:	e30e3250 	movw	r3, #57936	; 0xe250
  123f94:	e3403014 	movt	r3, #20
  123f98:	e5932000 	ldr	r2, [r3]
  123f9c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123fa0:	e593300c 	ldr	r3, [r3, #12]
  123fa4:	e5933004 	ldr	r3, [r3, #4]
  123fa8:	e0423003 	sub	r3, r2, r3
  123fac:	e2433001 	sub	r3, r3, #1
  123fb0:	e3530000 	cmp	r3, #0
  123fb4:	ba000036 	blt	124094 <tcp_receive+0x1990>
  123fb8:	e30e3250 	movw	r3, #57936	; 0xe250
  123fbc:	e3403014 	movt	r3, #20
  123fc0:	e5932000 	ldr	r2, [r3]
  123fc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123fc8:	e593300c 	ldr	r3, [r3, #12]
  123fcc:	e5933004 	ldr	r3, [r3, #4]
  123fd0:	e0423003 	sub	r3, r2, r3
  123fd4:	e2833001 	add	r3, r3, #1
  123fd8:	e3530000 	cmp	r3, #0
  123fdc:	ca00002c 	bgt	124094 <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
  123fe0:	e30e0230 	movw	r0, #57904	; 0xe230
  123fe4:	e3400014 	movt	r0, #20
  123fe8:	ebffed47 	bl	11f50c <tcp_seg_copy>
  123fec:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  123ff0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123ff4:	e3530000 	cmp	r3, #0
  123ff8:	0a0000f0 	beq	1243c0 <tcp_receive+0x1cbc>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  123ffc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124000:	e593300c 	ldr	r3, [r3, #12]
  124004:	e5933004 	ldr	r3, [r3, #4]
  124008:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12400c:	e1d220b8 	ldrh	r2, [r2, #8]
  124010:	e0832002 	add	r2, r3, r2
  124014:	e30e3250 	movw	r3, #57936	; 0xe250
  124018:	e3403014 	movt	r3, #20
  12401c:	e5933000 	ldr	r3, [r3]
  124020:	e0423003 	sub	r3, r2, r3
  124024:	e3530000 	cmp	r3, #0
  124028:	da000012 	ble	124078 <tcp_receive+0x1974>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  12402c:	e30e3250 	movw	r3, #57936	; 0xe250
  124030:	e3403014 	movt	r3, #20
  124034:	e5933000 	ldr	r3, [r3]
  124038:	e6ff2073 	uxth	r2, r3
  12403c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124040:	e593300c 	ldr	r3, [r3, #12]
  124044:	e5933004 	ldr	r3, [r3, #4]
  124048:	e6ff3073 	uxth	r3, r3
  12404c:	e0423003 	sub	r3, r2, r3
  124050:	e6ff2073 	uxth	r2, r3
  124054:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124058:	e1c320b8 	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
  12405c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124060:	e5932004 	ldr	r2, [r3, #4]
  124064:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124068:	e1d330b8 	ldrh	r3, [r3, #8]
  12406c:	e1a01003 	mov	r1, r3
  124070:	e1a00002 	mov	r0, r2
  124074:	ebffda47 	bl	11a998 <pbuf_realloc>
                    }
                    prev->next = cseg;
  124078:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12407c:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  124080:	e5832000 	str	r2, [r3]
                    tcp_oos_insert_segment(cseg, next);
  124084:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  124088:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  12408c:	ebfff92e 	bl	12254c <tcp_oos_insert_segment>
                  }
                  break;
  124090:	ea0000ca 	b	1243c0 <tcp_receive+0x1cbc>
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  124094:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124098:	e5933000 	ldr	r3, [r3]
  12409c:	e3530000 	cmp	r3, #0
  1240a0:	1a0000b7 	bne	124384 <tcp_receive+0x1c80>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
  1240a4:	e30e3250 	movw	r3, #57936	; 0xe250
  1240a8:	e3403014 	movt	r3, #20
  1240ac:	e5932000 	ldr	r2, [r3]
  1240b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1240b4:	e593300c 	ldr	r3, [r3, #12]
  1240b8:	e5933004 	ldr	r3, [r3, #4]
  1240bc:	e0423003 	sub	r3, r2, r3
              if (next->next == NULL &&
  1240c0:	e3530000 	cmp	r3, #0
  1240c4:	da0000ae 	ble	124384 <tcp_receive+0x1c80>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  1240c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1240cc:	e593300c 	ldr	r3, [r3, #12]
  1240d0:	e1d330bc 	ldrh	r3, [r3, #12]
  1240d4:	e6ff3073 	uxth	r3, r3
  1240d8:	e1a00003 	mov	r0, r3
  1240dc:	ebffc93f 	bl	1165e0 <lwip_htons>
  1240e0:	e1a03000 	mov	r3, r0
  1240e4:	e2033001 	and	r3, r3, #1
  1240e8:	e3530000 	cmp	r3, #0
  1240ec:	1a0000b5 	bne	1243c8 <tcp_receive+0x1cc4>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
  1240f0:	e30e0230 	movw	r0, #57904	; 0xe230
  1240f4:	e3400014 	movt	r0, #20
  1240f8:	ebffed03 	bl	11f50c <tcp_seg_copy>
  1240fc:	e1a02000 	mov	r2, r0
  124100:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124104:	e5832000 	str	r2, [r3]
                if (next->next != NULL) {
  124108:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12410c:	e5933000 	ldr	r3, [r3]
  124110:	e3530000 	cmp	r3, #0
  124114:	0a0000ad 	beq	1243d0 <tcp_receive+0x1ccc>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  124118:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12411c:	e593300c 	ldr	r3, [r3, #12]
  124120:	e5933004 	ldr	r3, [r3, #4]
  124124:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  124128:	e1d220b8 	ldrh	r2, [r2, #8]
  12412c:	e0832002 	add	r2, r3, r2
  124130:	e30e3250 	movw	r3, #57936	; 0xe250
  124134:	e3403014 	movt	r3, #20
  124138:	e5933000 	ldr	r3, [r3]
  12413c:	e0423003 	sub	r3, r2, r3
  124140:	e3530000 	cmp	r3, #0
  124144:	da000012 	ble	124194 <tcp_receive+0x1a90>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  124148:	e30e3250 	movw	r3, #57936	; 0xe250
  12414c:	e3403014 	movt	r3, #20
  124150:	e5933000 	ldr	r3, [r3]
  124154:	e6ff2073 	uxth	r2, r3
  124158:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12415c:	e593300c 	ldr	r3, [r3, #12]
  124160:	e5933004 	ldr	r3, [r3, #4]
  124164:	e6ff3073 	uxth	r3, r3
  124168:	e0423003 	sub	r3, r2, r3
  12416c:	e6ff2073 	uxth	r2, r3
  124170:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124174:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
  124178:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12417c:	e5932004 	ldr	r2, [r3, #4]
  124180:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124184:	e1d330b8 	ldrh	r3, [r3, #8]
  124188:	e1a01003 	mov	r1, r3
  12418c:	e1a00002 	mov	r0, r2
  124190:	ebffda00 	bl	11a998 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
  124194:	e30e325a 	movw	r3, #57946	; 0xe25a
  124198:	e3403014 	movt	r3, #20
  12419c:	e1d330b0 	ldrh	r3, [r3]
  1241a0:	e1a02003 	mov	r2, r3
  1241a4:	e30e3250 	movw	r3, #57936	; 0xe250
  1241a8:	e3403014 	movt	r3, #20
  1241ac:	e5933000 	ldr	r3, [r3]
  1241b0:	e0822003 	add	r2, r2, r3
  1241b4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1241b8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1241bc:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  1241c0:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1241c4:	e0833001 	add	r3, r3, r1
  1241c8:	e0423003 	sub	r3, r2, r3
  1241cc:	e3530000 	cmp	r3, #0
  1241d0:	da00007e 	ble	1243d0 <tcp_receive+0x1ccc>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  1241d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1241d8:	e5933000 	ldr	r3, [r3]
  1241dc:	e593300c 	ldr	r3, [r3, #12]
  1241e0:	e1d330bc 	ldrh	r3, [r3, #12]
  1241e4:	e6ff3073 	uxth	r3, r3
  1241e8:	e1a00003 	mov	r0, r3
  1241ec:	ebffc8fb 	bl	1165e0 <lwip_htons>
  1241f0:	e1a03000 	mov	r3, r0
  1241f4:	e2033001 	and	r3, r3, #1
  1241f8:	e3530000 	cmp	r3, #0
  1241fc:	0a00001a 	beq	12426c <tcp_receive+0x1b68>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
  124200:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124204:	e5933000 	ldr	r3, [r3]
  124208:	e593300c 	ldr	r3, [r3, #12]
  12420c:	e1d330bc 	ldrh	r3, [r3, #12]
  124210:	e6ff3073 	uxth	r3, r3
  124214:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  124218:	e6ff4073 	uxth	r4, r3
  12421c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124220:	e5933000 	ldr	r3, [r3]
  124224:	e593300c 	ldr	r3, [r3, #12]
  124228:	e1d330bc 	ldrh	r3, [r3, #12]
  12422c:	e6ff3073 	uxth	r3, r3
  124230:	e1a00003 	mov	r0, r3
  124234:	ebffc8e9 	bl	1165e0 <lwip_htons>
  124238:	e1a03000 	mov	r3, r0
  12423c:	e203303e 	and	r3, r3, #62	; 0x3e
  124240:	e6ff3073 	uxth	r3, r3
  124244:	e1a00003 	mov	r0, r3
  124248:	ebffc8e4 	bl	1165e0 <lwip_htons>
  12424c:	e1a03000 	mov	r3, r0
  124250:	e1a02003 	mov	r2, r3
  124254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124258:	e5933000 	ldr	r3, [r3]
  12425c:	e593300c 	ldr	r3, [r3, #12]
  124260:	e1842002 	orr	r2, r4, r2
  124264:	e6ff2072 	uxth	r2, r2
  124268:	e1c320bc 	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
  12426c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124270:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124274:	e6ff2073 	uxth	r2, r3
  124278:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12427c:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  124280:	e0823003 	add	r3, r2, r3
  124284:	e6ff1073 	uxth	r1, r3
  124288:	e30e3250 	movw	r3, #57936	; 0xe250
  12428c:	e3403014 	movt	r3, #20
  124290:	e5933000 	ldr	r3, [r3]
  124294:	e6ff2073 	uxth	r2, r3
  124298:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12429c:	e5933000 	ldr	r3, [r3]
  1242a0:	e0412002 	sub	r2, r1, r2
  1242a4:	e6ff2072 	uxth	r2, r2
  1242a8:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  1242ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1242b0:	e5933000 	ldr	r3, [r3]
  1242b4:	e5932004 	ldr	r2, [r3, #4]
  1242b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1242bc:	e5933000 	ldr	r3, [r3]
  1242c0:	e1d330b8 	ldrh	r3, [r3, #8]
  1242c4:	e1a01003 	mov	r1, r3
  1242c8:	e1a00002 	mov	r0, r2
  1242cc:	ebffd9b1 	bl	11a998 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
  1242d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1242d4:	e5933000 	ldr	r3, [r3]
  1242d8:	e1d340b8 	ldrh	r4, [r3, #8]
  1242dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1242e0:	e5933000 	ldr	r3, [r3]
  1242e4:	e593300c 	ldr	r3, [r3, #12]
  1242e8:	e1d330bc 	ldrh	r3, [r3, #12]
  1242ec:	e6ff3073 	uxth	r3, r3
  1242f0:	e1a00003 	mov	r0, r3
  1242f4:	ebffc8b9 	bl	1165e0 <lwip_htons>
  1242f8:	e1a03000 	mov	r3, r0
  1242fc:	e2033003 	and	r3, r3, #3
  124300:	e3530000 	cmp	r3, #0
  124304:	0a000001 	beq	124310 <tcp_receive+0x1c0c>
  124308:	e3a03001 	mov	r3, #1
  12430c:	ea000000 	b	124314 <tcp_receive+0x1c10>
  124310:	e3a03000 	mov	r3, #0
  124314:	e0833004 	add	r3, r3, r4
  124318:	e6ff2073 	uxth	r2, r3
  12431c:	e30e325a 	movw	r3, #57946	; 0xe25a
  124320:	e3403014 	movt	r3, #20
  124324:	e1c320b0 	strh	r2, [r3]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  124328:	e30e325a 	movw	r3, #57946	; 0xe25a
  12432c:	e3403014 	movt	r3, #20
  124330:	e1d330b0 	ldrh	r3, [r3]
  124334:	e1a02003 	mov	r2, r3
  124338:	e30e3250 	movw	r3, #57936	; 0xe250
  12433c:	e3403014 	movt	r3, #20
  124340:	e5933000 	ldr	r3, [r3]
  124344:	e0822003 	add	r2, r2, r3
  124348:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12434c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124350:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  124354:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  124358:	e0833001 	add	r3, r3, r1
  12435c:	e1520003 	cmp	r2, r3
  124360:	0a00001a 	beq	1243d0 <tcp_receive+0x1ccc>
  124364:	e308054c 	movw	r0, #34124	; 0x854c
  124368:	e3400014 	movt	r0, #20
  12436c:	ebff7b68 	bl	103114 <rt_kprintf>
  124370:	e3001668 	movw	r1, #1640	; 0x668
  124374:	e30802bc 	movw	r0, #33468	; 0x82bc
  124378:	e3400014 	movt	r0, #20
  12437c:	ebff9b5b 	bl	10b0f0 <sys_arch_assert>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
  124380:	ea000012 	b	1243d0 <tcp_receive+0x1ccc>
              }
            }
            prev = next;
  124384:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124388:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  12438c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124390:	e5933000 	ldr	r3, [r3]
  124394:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124398:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12439c:	e3530000 	cmp	r3, #0
  1243a0:	1afffebc 	bne	123e98 <tcp_receive+0x1794>
      if (pcb->rcv_nxt == seqno) {
  1243a4:	ea00000e 	b	1243e4 <tcp_receive+0x1ce0>
                break;
  1243a8:	e320f000 	nop	{0}
  1243ac:	ea00000c 	b	1243e4 <tcp_receive+0x1ce0>
                break;
  1243b0:	e320f000 	nop	{0}
  1243b4:	ea00000a 	b	1243e4 <tcp_receive+0x1ce0>
                  break;
  1243b8:	e320f000 	nop	{0}
  1243bc:	ea000008 	b	1243e4 <tcp_receive+0x1ce0>
                  break;
  1243c0:	e320f000 	nop	{0}
  1243c4:	ea000006 	b	1243e4 <tcp_receive+0x1ce0>
                  break;
  1243c8:	e320f000 	nop	{0}
  1243cc:	ea000004 	b	1243e4 <tcp_receive+0x1ce0>
                break;
  1243d0:	e320f000 	nop	{0}
      if (pcb->rcv_nxt == seqno) {
  1243d4:	ea000002 	b	1243e4 <tcp_receive+0x1ce0>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
  1243d8:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  1243dc:	eb00067f 	bl	125de0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  1243e0:	ea00001b 	b	124454 <tcp_receive+0x1d50>
  1243e4:	ea00001a 	b	124454 <tcp_receive+0x1d50>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
  1243e8:	e30e3250 	movw	r3, #57936	; 0xe250
  1243ec:	e3403014 	movt	r3, #20
  1243f0:	e5932000 	ldr	r2, [r3]
  1243f4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1243f8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1243fc:	e0423003 	sub	r3, r2, r3
  124400:	e3530000 	cmp	r3, #0
  124404:	ba00000b 	blt	124438 <tcp_receive+0x1d34>
  124408:	e30e3250 	movw	r3, #57936	; 0xe250
  12440c:	e3403014 	movt	r3, #20
  124410:	e5932000 	ldr	r2, [r3]
  124414:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124418:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12441c:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  124420:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  124424:	e0833001 	add	r3, r3, r1
  124428:	e0423003 	sub	r3, r2, r3
  12442c:	e2833001 	add	r3, r3, #1
  124430:	e3530000 	cmp	r3, #0
  124434:	da000006 	ble	124454 <tcp_receive+0x1d50>
      tcp_ack_now(pcb);
  124438:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12443c:	e5d3301e 	ldrb	r3, [r3, #30]
  124440:	e3833002 	orr	r3, r3, #2
  124444:	e6ef2073 	uxtb	r2, r3
  124448:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12444c:	e5c3201e 	strb	r2, [r3, #30]
    }
  }
}
  124450:	eaffffff 	b	124454 <tcp_receive+0x1d50>
  124454:	e320f000 	nop	{0}
  124458:	e24bd010 	sub	sp, fp, #16
  12445c:	e8bd8870 	pop	{r4, r5, r6, fp, pc}

00124460 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  124460:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  124464:	e28db000 	add	fp, sp, #0
  124468:	e24dd00c 	sub	sp, sp, #12
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
  12446c:	e30e3248 	movw	r3, #57928	; 0xe248
  124470:	e3403014 	movt	r3, #20
  124474:	e5933000 	ldr	r3, [r3]
  124478:	e3530000 	cmp	r3, #0
  12447c:	0a000007 	beq	1244a0 <tcp_getoptbyte+0x40>
  124480:	e30e324c 	movw	r3, #57932	; 0xe24c
  124484:	e3403014 	movt	r3, #20
  124488:	e1d320b0 	ldrh	r2, [r3]
  12448c:	e30e3246 	movw	r3, #57926	; 0xe246
  124490:	e3403014 	movt	r3, #20
  124494:	e1d330b0 	ldrh	r3, [r3]
  124498:	e1520003 	cmp	r2, r3
  12449c:	2a000010 	bcs	1244e4 <tcp_getoptbyte+0x84>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
  1244a0:	e30e3240 	movw	r3, #57920	; 0xe240
  1244a4:	e3403014 	movt	r3, #20
  1244a8:	e5933000 	ldr	r3, [r3]
  1244ac:	e2833014 	add	r3, r3, #20
  1244b0:	e50b300c 	str	r3, [fp, #-12]
    return opts[tcp_optidx++];
  1244b4:	e30e324c 	movw	r3, #57932	; 0xe24c
  1244b8:	e3403014 	movt	r3, #20
  1244bc:	e1d320b0 	ldrh	r2, [r3]
  1244c0:	e2823001 	add	r3, r2, #1
  1244c4:	e6ff1073 	uxth	r1, r3
  1244c8:	e30e324c 	movw	r3, #57932	; 0xe24c
  1244cc:	e3403014 	movt	r3, #20
  1244d0:	e1c310b0 	strh	r1, [r3]
  1244d4:	e51b300c 	ldr	r3, [fp, #-12]
  1244d8:	e0833002 	add	r3, r3, r2
  1244dc:	e5d33000 	ldrb	r3, [r3]
  1244e0:	ea000014 	b	124538 <tcp_getoptbyte+0xd8>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
  1244e4:	e30e324c 	movw	r3, #57932	; 0xe24c
  1244e8:	e3403014 	movt	r3, #20
  1244ec:	e1d320b0 	ldrh	r2, [r3]
  1244f0:	e2823001 	add	r3, r2, #1
  1244f4:	e6ff1073 	uxth	r1, r3
  1244f8:	e30e324c 	movw	r3, #57932	; 0xe24c
  1244fc:	e3403014 	movt	r3, #20
  124500:	e1c310b0 	strh	r1, [r3]
  124504:	e6ef2072 	uxtb	r2, r2
  124508:	e30e3246 	movw	r3, #57926	; 0xe246
  12450c:	e3403014 	movt	r3, #20
  124510:	e1d330b0 	ldrh	r3, [r3]
  124514:	e6ef3073 	uxtb	r3, r3
  124518:	e0423003 	sub	r3, r2, r3
  12451c:	e54b3005 	strb	r3, [fp, #-5]
    return tcphdr_opt2[idx];
  124520:	e30e3248 	movw	r3, #57928	; 0xe248
  124524:	e3403014 	movt	r3, #20
  124528:	e5932000 	ldr	r2, [r3]
  12452c:	e55b3005 	ldrb	r3, [fp, #-5]
  124530:	e0823003 	add	r3, r2, r3
  124534:	e5d33000 	ldrb	r3, [r3]
  }
}
  124538:	e1a00003 	mov	r0, r3
  12453c:	e28bd000 	add	sp, fp, #0
  124540:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  124544:	e12fff1e 	bx	lr

00124548 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  124548:	e92d4800 	push	{fp, lr}
  12454c:	e28db004 	add	fp, sp, #4
  124550:	e24dd010 	sub	sp, sp, #16
  124554:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
  124558:	e30e3244 	movw	r3, #57924	; 0xe244
  12455c:	e3403014 	movt	r3, #20
  124560:	e1d330b0 	ldrh	r3, [r3]
  124564:	e3530000 	cmp	r3, #0
  124568:	0a000054 	beq	1246c0 <tcp_parseopt+0x178>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  12456c:	e30e324c 	movw	r3, #57932	; 0xe24c
  124570:	e3403014 	movt	r3, #20
  124574:	e3a02000 	mov	r2, #0
  124578:	e1c320b0 	strh	r2, [r3]
  12457c:	ea000041 	b	124688 <tcp_parseopt+0x140>
      u8_t opt = tcp_getoptbyte();
  124580:	ebffffb6 	bl	124460 <tcp_getoptbyte>
  124584:	e1a03000 	mov	r3, r0
  124588:	e54b3005 	strb	r3, [fp, #-5]
      switch (opt) {
  12458c:	e55b3005 	ldrb	r3, [fp, #-5]
  124590:	e3530001 	cmp	r3, #1
  124594:	0a00003b 	beq	124688 <tcp_parseopt+0x140>
  124598:	e3530002 	cmp	r3, #2
  12459c:	0a000002 	beq	1245ac <tcp_parseopt+0x64>
  1245a0:	e3530000 	cmp	r3, #0
  1245a4:	0a000040 	beq	1246ac <tcp_parseopt+0x164>
  1245a8:	ea000024 	b	124640 <tcp_parseopt+0xf8>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
  1245ac:	ebffffab 	bl	124460 <tcp_getoptbyte>
  1245b0:	e1a03000 	mov	r3, r0
  1245b4:	e3530004 	cmp	r3, #4
  1245b8:	1a00003d 	bne	1246b4 <tcp_parseopt+0x16c>
  1245bc:	e30e324c 	movw	r3, #57932	; 0xe24c
  1245c0:	e3403014 	movt	r3, #20
  1245c4:	e1d330b0 	ldrh	r3, [r3]
  1245c8:	e2832002 	add	r2, r3, #2
  1245cc:	e30e3244 	movw	r3, #57924	; 0xe244
  1245d0:	e3403014 	movt	r3, #20
  1245d4:	e1d330b0 	ldrh	r3, [r3]
  1245d8:	e1520003 	cmp	r2, r3
  1245dc:	ca000034 	bgt	1246b4 <tcp_parseopt+0x16c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
  1245e0:	ebffff9e 	bl	124460 <tcp_getoptbyte>
  1245e4:	e1a03000 	mov	r3, r0
  1245e8:	e6ff3073 	uxth	r3, r3
  1245ec:	e1a03403 	lsl	r3, r3, #8
  1245f0:	e14b30b8 	strh	r3, [fp, #-8]
        mss |= tcp_getoptbyte();
  1245f4:	ebffff99 	bl	124460 <tcp_getoptbyte>
  1245f8:	e1a03000 	mov	r3, r0
  1245fc:	e6ff2073 	uxth	r2, r3
  124600:	e15b30b8 	ldrh	r3, [fp, #-8]
  124604:	e1823003 	orr	r3, r2, r3
  124608:	e14b30b8 	strh	r3, [fp, #-8]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  12460c:	e15b30b8 	ldrh	r3, [fp, #-8]
  124610:	e30025b4 	movw	r2, #1460	; 0x5b4
  124614:	e1530002 	cmp	r3, r2
  124618:	8a000004 	bhi	124630 <tcp_parseopt+0xe8>
  12461c:	e15b30b8 	ldrh	r3, [fp, #-8]
  124620:	e3530000 	cmp	r3, #0
  124624:	0a000001 	beq	124630 <tcp_parseopt+0xe8>
  124628:	e15b30b8 	ldrh	r3, [fp, #-8]
  12462c:	ea000000 	b	124634 <tcp_parseopt+0xec>
  124630:	e30035b4 	movw	r3, #1460	; 0x5b4
  124634:	e51b2010 	ldr	r2, [fp, #-16]
  124638:	e1c233b6 	strh	r3, [r2, #54]	; 0x36
        break;
  12463c:	ea000011 	b	124688 <tcp_parseopt+0x140>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
  124640:	ebffff86 	bl	124460 <tcp_getoptbyte>
  124644:	e1a03000 	mov	r3, r0
  124648:	e54b3009 	strb	r3, [fp, #-9]
        if (data < 2) {
  12464c:	e55b3009 	ldrb	r3, [fp, #-9]
  124650:	e3530001 	cmp	r3, #1
  124654:	9a000018 	bls	1246bc <tcp_parseopt+0x174>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
  124658:	e55b3009 	ldrb	r3, [fp, #-9]
  12465c:	e6ff2073 	uxth	r2, r3
  124660:	e30e324c 	movw	r3, #57932	; 0xe24c
  124664:	e3403014 	movt	r3, #20
  124668:	e1d330b0 	ldrh	r3, [r3]
  12466c:	e0823003 	add	r3, r2, r3
  124670:	e6ff3073 	uxth	r3, r3
  124674:	e2433002 	sub	r3, r3, #2
  124678:	e6ff2073 	uxth	r2, r3
  12467c:	e30e324c 	movw	r3, #57932	; 0xe24c
  124680:	e3403014 	movt	r3, #20
  124684:	e1c320b0 	strh	r2, [r3]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  124688:	e30e324c 	movw	r3, #57932	; 0xe24c
  12468c:	e3403014 	movt	r3, #20
  124690:	e1d320b0 	ldrh	r2, [r3]
  124694:	e30e3244 	movw	r3, #57924	; 0xe244
  124698:	e3403014 	movt	r3, #20
  12469c:	e1d330b0 	ldrh	r3, [r3]
  1246a0:	e1520003 	cmp	r2, r3
  1246a4:	3affffb5 	bcc	124580 <tcp_parseopt+0x38>
  1246a8:	ea000004 	b	1246c0 <tcp_parseopt+0x178>
        return;
  1246ac:	e320f000 	nop	{0}
  1246b0:	ea000002 	b	1246c0 <tcp_parseopt+0x178>
          return;
  1246b4:	e320f000 	nop	{0}
  1246b8:	ea000000 	b	1246c0 <tcp_parseopt+0x178>
          return;
  1246bc:	e320f000 	nop	{0}
      }
    }
  }
}
  1246c0:	e24bd004 	sub	sp, fp, #4
  1246c4:	e8bd8800 	pop	{fp, pc}

001246c8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  1246c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1246cc:	e28db000 	add	fp, sp, #0
  recv_flags |= TF_CLOSED;
  1246d0:	e30e325d 	movw	r3, #57949	; 0xe25d
  1246d4:	e3403014 	movt	r3, #20
  1246d8:	e5d33000 	ldrb	r3, [r3]
  1246dc:	e3833010 	orr	r3, r3, #16
  1246e0:	e6ef2073 	uxtb	r2, r3
  1246e4:	e30e325d 	movw	r3, #57949	; 0xe25d
  1246e8:	e3403014 	movt	r3, #20
  1246ec:	e5c32000 	strb	r2, [r3]
}
  1246f0:	e320f000 	nop	{0}
  1246f4:	e28bd000 	add	sp, fp, #0
  1246f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1246fc:	e12fff1e 	bx	lr

00124700 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
  124700:	e92d4800 	push	{fp, lr}
  124704:	e28db004 	add	fp, sp, #4
  124708:	e24dd018 	sub	sp, sp, #24
  12470c:	e50b0010 	str	r0, [fp, #-16]
  124710:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124714:	e1a03001 	mov	r3, r1
  124718:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  12471c:	e1a03002 	mov	r3, r2
  124720:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  124724:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124728:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  12472c:	e0823003 	add	r3, r2, r3
  124730:	e6ff3073 	uxth	r3, r3
  124734:	e2833014 	add	r3, r3, #20
  124738:	e6ff3073 	uxth	r3, r3
  12473c:	e3a02000 	mov	r2, #0
  124740:	e1a01003 	mov	r1, r3
  124744:	e3a00001 	mov	r0, #1
  124748:	ebffd6d4 	bl	11a2a0 <pbuf_alloc>
  12474c:	e50b0008 	str	r0, [fp, #-8]
  if (p != NULL) {
  124750:	e51b3008 	ldr	r3, [fp, #-8]
  124754:	e3530000 	cmp	r3, #0
  124758:	0a000052 	beq	1248a8 <tcp_output_alloc_header+0x1a8>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  12475c:	e51b3008 	ldr	r3, [fp, #-8]
  124760:	e1d330ba 	ldrh	r3, [r3, #10]
  124764:	e1a02003 	mov	r2, r3
  124768:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  12476c:	e2833014 	add	r3, r3, #20
  124770:	e1520003 	cmp	r2, r3
  124774:	aa000006 	bge	124794 <tcp_output_alloc_header+0x94>
  124778:	e3080608 	movw	r0, #34312	; 0x8608
  12477c:	e3400014 	movt	r0, #20
  124780:	ebff7a63 	bl	103114 <rt_kprintf>
  124784:	e3a01073 	mov	r1, #115	; 0x73
  124788:	e3080638 	movw	r0, #34360	; 0x8638
  12478c:	e3400014 	movt	r0, #20
  124790:	ebff9a56 	bl	10b0f0 <sys_arch_assert>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
  124794:	e51b3008 	ldr	r3, [fp, #-8]
  124798:	e5933004 	ldr	r3, [r3, #4]
  12479c:	e50b300c 	str	r3, [fp, #-12]
    tcphdr->src = lwip_htons(pcb->local_port);
  1247a0:	e51b3010 	ldr	r3, [fp, #-16]
  1247a4:	e1d331ba 	ldrh	r3, [r3, #26]
  1247a8:	e1a00003 	mov	r0, r3
  1247ac:	ebffc78b 	bl	1165e0 <lwip_htons>
  1247b0:	e1a03000 	mov	r3, r0
  1247b4:	e1a02003 	mov	r2, r3
  1247b8:	e51b300c 	ldr	r3, [fp, #-12]
  1247bc:	e1c320b0 	strh	r2, [r3]
    tcphdr->dest = lwip_htons(pcb->remote_port);
  1247c0:	e51b3010 	ldr	r3, [fp, #-16]
  1247c4:	e1d331bc 	ldrh	r3, [r3, #28]
  1247c8:	e1a00003 	mov	r0, r3
  1247cc:	ebffc783 	bl	1165e0 <lwip_htons>
  1247d0:	e1a03000 	mov	r3, r0
  1247d4:	e1a02003 	mov	r2, r3
  1247d8:	e51b300c 	ldr	r3, [fp, #-12]
  1247dc:	e1c320b2 	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
  1247e0:	e51b300c 	ldr	r3, [fp, #-12]
  1247e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1247e8:	e5832004 	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  1247ec:	e51b3010 	ldr	r3, [fp, #-16]
  1247f0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1247f4:	e1a00003 	mov	r0, r3
  1247f8:	ebffc784 	bl	116610 <lwip_htonl>
  1247fc:	e1a02000 	mov	r2, r0
  124800:	e51b300c 	ldr	r3, [fp, #-12]
  124804:	e5832008 	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  124808:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  12480c:	e1a03123 	lsr	r3, r3, #2
  124810:	e6ff3073 	uxth	r3, r3
  124814:	e2833005 	add	r3, r3, #5
  124818:	e6ff3073 	uxth	r3, r3
  12481c:	e1a03603 	lsl	r3, r3, #12
  124820:	e6ff3073 	uxth	r3, r3
  124824:	e3833010 	orr	r3, r3, #16
  124828:	e6ff3073 	uxth	r3, r3
  12482c:	e1a00003 	mov	r0, r3
  124830:	ebffc76a 	bl	1165e0 <lwip_htons>
  124834:	e1a03000 	mov	r3, r0
  124838:	e1a02003 	mov	r2, r3
  12483c:	e51b300c 	ldr	r3, [fp, #-12]
  124840:	e1c320bc 	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  124844:	e51b3010 	ldr	r3, [fp, #-16]
  124848:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  12484c:	e1a00003 	mov	r0, r3
  124850:	ebffc762 	bl	1165e0 <lwip_htons>
  124854:	e1a03000 	mov	r3, r0
  124858:	e1a02003 	mov	r2, r3
  12485c:	e51b300c 	ldr	r3, [fp, #-12]
  124860:	e1c320be 	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
  124864:	e51b300c 	ldr	r3, [fp, #-12]
  124868:	e3a02000 	mov	r2, #0
  12486c:	e5c32010 	strb	r2, [r3, #16]
  124870:	e3a02000 	mov	r2, #0
  124874:	e5c32011 	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
  124878:	e51b300c 	ldr	r3, [fp, #-12]
  12487c:	e3a02000 	mov	r2, #0
  124880:	e5c32012 	strb	r2, [r3, #18]
  124884:	e3a02000 	mov	r2, #0
  124888:	e5c32013 	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  12488c:	e51b3010 	ldr	r3, [fp, #-16]
  124890:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124894:	e51b2010 	ldr	r2, [fp, #-16]
  124898:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  12489c:	e0832002 	add	r2, r3, r2
  1248a0:	e51b3010 	ldr	r3, [fp, #-16]
  1248a4:	e5832030 	str	r2, [r3, #48]	; 0x30
  }
  return p;
  1248a8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1248ac:	e1a00003 	mov	r0, r3
  1248b0:	e24bd004 	sub	sp, fp, #4
  1248b4:	e8bd8800 	pop	{fp, pc}

001248b8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
  1248b8:	e92d4810 	push	{r4, fp, lr}
  1248bc:	e28db008 	add	fp, sp, #8
  1248c0:	e24dd014 	sub	sp, sp, #20
  1248c4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
  1248c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1248cc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1248d0:	e3530000 	cmp	r3, #0
  1248d4:	0a000029 	beq	124980 <tcp_send_fin+0xc8>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  1248d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1248dc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1248e0:	e50b3010 	str	r3, [fp, #-16]
  1248e4:	ea000002 	b	1248f4 <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
  1248e8:	e51b3010 	ldr	r3, [fp, #-16]
  1248ec:	e5933000 	ldr	r3, [r3]
  1248f0:	e50b3010 	str	r3, [fp, #-16]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  1248f4:	e51b3010 	ldr	r3, [fp, #-16]
  1248f8:	e5933000 	ldr	r3, [r3]
  1248fc:	e3530000 	cmp	r3, #0
  124900:	1afffff8 	bne	1248e8 <tcp_send_fin+0x30>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  124904:	e51b3010 	ldr	r3, [fp, #-16]
  124908:	e593300c 	ldr	r3, [r3, #12]
  12490c:	e1d330bc 	ldrh	r3, [r3, #12]
  124910:	e6ff3073 	uxth	r3, r3
  124914:	e1a00003 	mov	r0, r3
  124918:	ebffc730 	bl	1165e0 <lwip_htons>
  12491c:	e1a03000 	mov	r3, r0
  124920:	e2033007 	and	r3, r3, #7
  124924:	e3530000 	cmp	r3, #0
  124928:	1a000014 	bne	124980 <tcp_send_fin+0xc8>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  12492c:	e51b3010 	ldr	r3, [fp, #-16]
  124930:	e593300c 	ldr	r3, [r3, #12]
  124934:	e1d330bc 	ldrh	r3, [r3, #12]
  124938:	e6ff4073 	uxth	r4, r3
  12493c:	e3a00001 	mov	r0, #1
  124940:	ebffc726 	bl	1165e0 <lwip_htons>
  124944:	e1a03000 	mov	r3, r0
  124948:	e1a02003 	mov	r2, r3
  12494c:	e51b3010 	ldr	r3, [fp, #-16]
  124950:	e593300c 	ldr	r3, [r3, #12]
  124954:	e1842002 	orr	r2, r4, r2
  124958:	e6ff2072 	uxth	r2, r2
  12495c:	e1c320bc 	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
  124960:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124964:	e5d3301e 	ldrb	r3, [r3, #30]
  124968:	e3833020 	orr	r3, r3, #32
  12496c:	e6ef2073 	uxtb	r2, r3
  124970:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124974:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_OK;
  124978:	e3a03000 	mov	r3, #0
  12497c:	ea000003 	b	124990 <tcp_send_fin+0xd8>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
  124980:	e3a01001 	mov	r1, #1
  124984:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  124988:	eb000426 	bl	125a28 <tcp_enqueue_flags>
  12498c:	e1a03000 	mov	r3, r0
}
  124990:	e1a00003 	mov	r0, r3
  124994:	e24bd008 	sub	sp, fp, #8
  124998:	e8bd8810 	pop	{r4, fp, pc}

0012499c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  12499c:	e92d4810 	push	{r4, fp, lr}
  1249a0:	e28db008 	add	fp, sp, #8
  1249a4:	e24dd01c 	sub	sp, sp, #28
  1249a8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1249ac:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1249b0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  1249b4:	e1a03002 	mov	r3, r2
  1249b8:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
  1249bc:	e5db3004 	ldrb	r3, [fp, #4]
  1249c0:	e1a03103 	lsl	r3, r3, #2
  1249c4:	e6ef3073 	uxtb	r3, r3
  1249c8:	e2033004 	and	r3, r3, #4
  1249cc:	e54b300d 	strb	r3, [fp, #-13]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  1249d0:	e3a020b2 	mov	r2, #178	; 0xb2
  1249d4:	e3081638 	movw	r1, #34360	; 0x8638
  1249d8:	e3401014 	movt	r1, #20
  1249dc:	e3a00004 	mov	r0, #4
  1249e0:	ebffd1bf 	bl	1190e4 <memp_malloc_fn>
  1249e4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1249e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1249ec:	e3530000 	cmp	r3, #0
  1249f0:	1a000003 	bne	124a04 <tcp_create_segment+0x68>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
  1249f4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1249f8:	ebffd92f 	bl	11aebc <pbuf_free>
    return NULL;
  1249fc:	e3a03000 	mov	r3, #0
  124a00:	ea000063 	b	124b94 <tcp_create_segment+0x1f8>
  }
  seg->flags = optflags;
  124a04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124a08:	e5db2004 	ldrb	r2, [fp, #4]
  124a0c:	e5c3200a 	strb	r2, [r3, #10]
  seg->next = NULL;
  124a10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124a14:	e3a02000 	mov	r2, #0
  124a18:	e5832000 	str	r2, [r3]
  seg->p = p;
  124a1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124a20:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  124a24:	e5832004 	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  124a28:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124a2c:	e1d320b8 	ldrh	r2, [r3, #8]
  124a30:	e55b300d 	ldrb	r3, [fp, #-13]
  124a34:	e6ff3073 	uxth	r3, r3
  124a38:	e1520003 	cmp	r2, r3
  124a3c:	2a000006 	bcs	124a5c <tcp_create_segment+0xc0>
  124a40:	e3080668 	movw	r0, #34408	; 0x8668
  124a44:	e3400014 	movt	r0, #20
  124a48:	ebff79b1 	bl	103114 <rt_kprintf>
  124a4c:	e3a010ba 	mov	r1, #186	; 0xba
  124a50:	e3080638 	movw	r0, #34360	; 0x8638
  124a54:	e3400014 	movt	r0, #20
  124a58:	ebff99a4 	bl	10b0f0 <sys_arch_assert>
  seg->len = p->tot_len - optlen;
  124a5c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124a60:	e1d320b8 	ldrh	r2, [r3, #8]
  124a64:	e55b300d 	ldrb	r3, [fp, #-13]
  124a68:	e6ff3073 	uxth	r3, r3
  124a6c:	e0423003 	sub	r3, r2, r3
  124a70:	e6ff2073 	uxth	r2, r3
  124a74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124a78:	e1c320b8 	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  124a7c:	e3a01014 	mov	r1, #20
  124a80:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  124a84:	ebffd8ee 	bl	11ae44 <pbuf_header>
  124a88:	e1a03000 	mov	r3, r0
  124a8c:	e3530000 	cmp	r3, #0
  124a90:	0a00000b 	beq	124ac4 <tcp_create_segment+0x128>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
  124a94:	e30e3a14 	movw	r3, #59924	; 0xea14
  124a98:	e3403056 	movt	r3, #86	; 0x56
  124a9c:	e1d33cb0 	ldrh	r3, [r3, #192]	; 0xc0
  124aa0:	e2833001 	add	r3, r3, #1
  124aa4:	e6ff2073 	uxth	r2, r3
  124aa8:	e30e3a14 	movw	r3, #59924	; 0xea14
  124aac:	e3403056 	movt	r3, #86	; 0x56
  124ab0:	e1c32cb0 	strh	r2, [r3, #192]	; 0xc0
    tcp_seg_free(seg);
  124ab4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  124ab8:	ebffea71 	bl	11f484 <tcp_seg_free>
    return NULL;
  124abc:	e3a03000 	mov	r3, #0
  124ac0:	ea000033 	b	124b94 <tcp_create_segment+0x1f8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  124ac4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ac8:	e5933004 	ldr	r3, [r3, #4]
  124acc:	e5932004 	ldr	r2, [r3, #4]
  124ad0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ad4:	e583200c 	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
  124ad8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124adc:	e1d321ba 	ldrh	r2, [r3, #26]
  124ae0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ae4:	e593400c 	ldr	r4, [r3, #12]
  124ae8:	e1a00002 	mov	r0, r2
  124aec:	ebffc6bb 	bl	1165e0 <lwip_htons>
  124af0:	e1a03000 	mov	r3, r0
  124af4:	e1c430b0 	strh	r3, [r4]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
  124af8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124afc:	e1d321bc 	ldrh	r2, [r3, #28]
  124b00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124b04:	e593400c 	ldr	r4, [r3, #12]
  124b08:	e1a00002 	mov	r0, r2
  124b0c:	ebffc6b3 	bl	1165e0 <lwip_htons>
  124b10:	e1a03000 	mov	r3, r0
  124b14:	e1c430b2 	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
  124b18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124b1c:	e593400c 	ldr	r4, [r3, #12]
  124b20:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  124b24:	ebffc6b9 	bl	116610 <lwip_htonl>
  124b28:	e1a03000 	mov	r3, r0
  124b2c:	e5843004 	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  124b30:	e55b300d 	ldrb	r3, [fp, #-13]
  124b34:	e1a03123 	lsr	r3, r3, #2
  124b38:	e6ef3073 	uxtb	r3, r3
  124b3c:	e6ff3073 	uxth	r3, r3
  124b40:	e2833005 	add	r3, r3, #5
  124b44:	e6ff3073 	uxth	r3, r3
  124b48:	e1a03603 	lsl	r3, r3, #12
  124b4c:	e6ff2073 	uxth	r2, r3
  124b50:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  124b54:	e6ff3073 	uxth	r3, r3
  124b58:	e1823003 	orr	r3, r2, r3
  124b5c:	e6ff2073 	uxth	r2, r3
  124b60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124b64:	e593400c 	ldr	r4, [r3, #12]
  124b68:	e1a00002 	mov	r0, r2
  124b6c:	ebffc69b 	bl	1165e0 <lwip_htons>
  124b70:	e1a03000 	mov	r3, r0
  124b74:	e1c430bc 	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  124b78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124b7c:	e593300c 	ldr	r3, [r3, #12]
  124b80:	e3a02000 	mov	r2, #0
  124b84:	e5c32012 	strb	r2, [r3, #18]
  124b88:	e3a02000 	mov	r2, #0
  124b8c:	e5c32013 	strb	r2, [r3, #19]
  return seg;
  124b90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  124b94:	e1a00003 	mov	r0, r3
  124b98:	e24bd008 	sub	sp, fp, #8
  124b9c:	e8bd8810 	pop	{r4, fp, pc}

00124ba0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
  124ba0:	e92d4800 	push	{fp, lr}
  124ba4:	e28db004 	add	fp, sp, #4
  124ba8:	e24dd018 	sub	sp, sp, #24
  124bac:	e50b0010 	str	r0, [fp, #-16]
  124bb0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124bb4:	e1a03001 	mov	r3, r1
  124bb8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  124bbc:	e1a03002 	mov	r3, r2
  124bc0:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *p;
  u16_t alloc = length;
  124bc4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124bc8:	e14b30b6 	strh	r3, [fp, #-6]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
  124bcc:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124bd0:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  124bd4:	e1520003 	cmp	r2, r3
  124bd8:	2a00001c 	bcs	124c50 <tcp_pbuf_prealloc+0xb0>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  124bdc:	e5db3008 	ldrb	r3, [fp, #8]
  124be0:	e2033002 	and	r3, r3, #2
  124be4:	e3530000 	cmp	r3, #0
  124be8:	1a00000f 	bne	124c2c <tcp_pbuf_prealloc+0x8c>
        (!(pcb->flags & TF_NODELAY) &&
  124bec:	e59b3004 	ldr	r3, [fp, #4]
  124bf0:	e5d3301e 	ldrb	r3, [r3, #30]
  124bf4:	e2033040 	and	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  124bf8:	e3530000 	cmp	r3, #0
  124bfc:	1a000013 	bne	124c50 <tcp_pbuf_prealloc+0xb0>
        (!(pcb->flags & TF_NODELAY) &&
  124c00:	e5db300c 	ldrb	r3, [fp, #12]
  124c04:	e3530000 	cmp	r3, #0
  124c08:	0a000007 	beq	124c2c <tcp_pbuf_prealloc+0x8c>
         (!first_seg ||
          pcb->unsent != NULL ||
  124c0c:	e59b3004 	ldr	r3, [fp, #4]
  124c10:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
  124c14:	e3530000 	cmp	r3, #0
  124c18:	1a000003 	bne	124c2c <tcp_pbuf_prealloc+0x8c>
          pcb->unacked != NULL))) {
  124c1c:	e59b3004 	ldr	r3, [fp, #4]
  124c20:	e5933070 	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
  124c24:	e3530000 	cmp	r3, #0
  124c28:	0a000008 	beq	124c50 <tcp_pbuf_prealloc+0xb0>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
  124c2c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124c30:	e2833e5b 	add	r3, r3, #1456	; 0x5b0
  124c34:	e2833007 	add	r3, r3, #7
  124c38:	e3c32003 	bic	r2, r3, #3
  124c3c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  124c40:	e1520003 	cmp	r2, r3
  124c44:	31a03002 	movcc	r3, r2
  124c48:	21a03003 	movcs	r3, r3
  124c4c:	e14b30b6 	strh	r3, [fp, #-6]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  124c50:	e15b30b6 	ldrh	r3, [fp, #-6]
  124c54:	e3a02000 	mov	r2, #0
  124c58:	e1a01003 	mov	r1, r3
  124c5c:	e51b0010 	ldr	r0, [fp, #-16]
  124c60:	ebffd58e 	bl	11a2a0 <pbuf_alloc>
  124c64:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  124c68:	e51b300c 	ldr	r3, [fp, #-12]
  124c6c:	e3530000 	cmp	r3, #0
  124c70:	1a000001 	bne	124c7c <tcp_pbuf_prealloc+0xdc>
    return NULL;
  124c74:	e3a03000 	mov	r3, #0
  124c78:	ea000019 	b	124ce4 <tcp_pbuf_prealloc+0x144>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  124c7c:	e51b300c 	ldr	r3, [fp, #-12]
  124c80:	e5933000 	ldr	r3, [r3]
  124c84:	e3530000 	cmp	r3, #0
  124c88:	0a000006 	beq	124ca8 <tcp_pbuf_prealloc+0x108>
  124c8c:	e3080680 	movw	r0, #34432	; 0x8680
  124c90:	e3400014 	movt	r0, #20
  124c94:	ebff791e 	bl	103114 <rt_kprintf>
  124c98:	e3a01e11 	mov	r1, #272	; 0x110
  124c9c:	e3080638 	movw	r0, #34360	; 0x8638
  124ca0:	e3400014 	movt	r0, #20
  124ca4:	ebff9911 	bl	10b0f0 <sys_arch_assert>
  *oversize = p->len - length;
  124ca8:	e51b300c 	ldr	r3, [fp, #-12]
  124cac:	e1d320ba 	ldrh	r2, [r3, #10]
  124cb0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124cb4:	e0423003 	sub	r3, r2, r3
  124cb8:	e6ff2073 	uxth	r2, r3
  124cbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124cc0:	e1c320b0 	strh	r2, [r3]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
  124cc4:	e51b300c 	ldr	r3, [fp, #-12]
  124cc8:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124ccc:	e1c320b8 	strh	r2, [r3, #8]
  124cd0:	e51b300c 	ldr	r3, [fp, #-12]
  124cd4:	e1d320b8 	ldrh	r2, [r3, #8]
  124cd8:	e51b300c 	ldr	r3, [fp, #-12]
  124cdc:	e1c320ba 	strh	r2, [r3, #10]
  return p;
  124ce0:	e51b300c 	ldr	r3, [fp, #-12]
}
  124ce4:	e1a00003 	mov	r0, r3
  124ce8:	e24bd004 	sub	sp, fp, #4
  124cec:	e8bd8800 	pop	{fp, pc}

00124cf0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  124cf0:	e92d4800 	push	{fp, lr}
  124cf4:	e28db004 	add	fp, sp, #4
  124cf8:	e24dd008 	sub	sp, sp, #8
  124cfc:	e50b0008 	str	r0, [fp, #-8]
  124d00:	e1a03001 	mov	r3, r1
  124d04:	e14b30ba 	strh	r3, [fp, #-10]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
  124d08:	e51b3008 	ldr	r3, [fp, #-8]
  124d0c:	e5933014 	ldr	r3, [r3, #20]
  124d10:	e3530004 	cmp	r3, #4
  124d14:	0a00000d 	beq	124d50 <tcp_write_checks+0x60>
      (pcb->state != CLOSE_WAIT) &&
  124d18:	e51b3008 	ldr	r3, [fp, #-8]
  124d1c:	e5933014 	ldr	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
  124d20:	e3530007 	cmp	r3, #7
  124d24:	0a000009 	beq	124d50 <tcp_write_checks+0x60>
      (pcb->state != SYN_SENT) &&
  124d28:	e51b3008 	ldr	r3, [fp, #-8]
  124d2c:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
  124d30:	e3530002 	cmp	r3, #2
  124d34:	0a000005 	beq	124d50 <tcp_write_checks+0x60>
      (pcb->state != SYN_RCVD)) {
  124d38:	e51b3008 	ldr	r3, [fp, #-8]
  124d3c:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
  124d40:	e3530003 	cmp	r3, #3
  124d44:	0a000001 	beq	124d50 <tcp_write_checks+0x60>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  124d48:	e3e0300a 	mvn	r3, #10
  124d4c:	ea000050 	b	124e94 <tcp_write_checks+0x1a4>
  } else if (len == 0) {
  124d50:	e15b30ba 	ldrh	r3, [fp, #-10]
  124d54:	e3530000 	cmp	r3, #0
  124d58:	1a000001 	bne	124d64 <tcp_write_checks+0x74>
    return ERR_OK;
  124d5c:	e3a03000 	mov	r3, #0
  124d60:	ea00004b 	b	124e94 <tcp_write_checks+0x1a4>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
  124d64:	e51b3008 	ldr	r3, [fp, #-8]
  124d68:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  124d6c:	e15b20ba 	ldrh	r2, [fp, #-10]
  124d70:	e1520003 	cmp	r2, r3
  124d74:	9a000008 	bls	124d9c <tcp_write_checks+0xac>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
  124d78:	e51b3008 	ldr	r3, [fp, #-8]
  124d7c:	e5d3301e 	ldrb	r3, [r3, #30]
  124d80:	e1e03c83 	mvn	r3, r3, lsl #25
  124d84:	e1e03ca3 	mvn	r3, r3, lsr #25
  124d88:	e6ef2073 	uxtb	r2, r3
  124d8c:	e51b3008 	ldr	r3, [fp, #-8]
  124d90:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  124d94:	e3e03000 	mvn	r3, #0
  124d98:	ea00003d 	b	124e94 <tcp_write_checks+0x1a4>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  124d9c:	e51b3008 	ldr	r3, [fp, #-8]
  124da0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124da4:	e35300b2 	cmp	r3, #178	; 0xb2
  124da8:	8a000004 	bhi	124dc0 <tcp_write_checks+0xd0>
  124dac:	e51b3008 	ldr	r3, [fp, #-8]
  124db0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124db4:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  124db8:	e1530002 	cmp	r3, r2
  124dbc:	9a000010 	bls	124e04 <tcp_write_checks+0x114>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  124dc0:	e30e3a14 	movw	r3, #59924	; 0xea14
  124dc4:	e3403056 	movt	r3, #86	; 0x56
  124dc8:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  124dcc:	e2833001 	add	r3, r3, #1
  124dd0:	e6ff2073 	uxth	r2, r3
  124dd4:	e30e3a14 	movw	r3, #59924	; 0xea14
  124dd8:	e3403056 	movt	r3, #86	; 0x56
  124ddc:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  124de0:	e51b3008 	ldr	r3, [fp, #-8]
  124de4:	e5d3301e 	ldrb	r3, [r3, #30]
  124de8:	e1e03c83 	mvn	r3, r3, lsl #25
  124dec:	e1e03ca3 	mvn	r3, r3, lsr #25
  124df0:	e6ef2073 	uxtb	r2, r3
  124df4:	e51b3008 	ldr	r3, [fp, #-8]
  124df8:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  124dfc:	e3e03000 	mvn	r3, #0
  124e00:	ea000023 	b	124e94 <tcp_write_checks+0x1a4>
  }
  if (pcb->snd_queuelen != 0) {
  124e04:	e51b3008 	ldr	r3, [fp, #-8]
  124e08:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124e0c:	e3530000 	cmp	r3, #0
  124e10:	0a00000f 	beq	124e54 <tcp_write_checks+0x164>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
  124e14:	e51b3008 	ldr	r3, [fp, #-8]
  124e18:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  124e1c:	e3530000 	cmp	r3, #0
  124e20:	1a00001a 	bne	124e90 <tcp_write_checks+0x1a0>
  124e24:	e51b3008 	ldr	r3, [fp, #-8]
  124e28:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124e2c:	e3530000 	cmp	r3, #0
  124e30:	1a000016 	bne	124e90 <tcp_write_checks+0x1a0>
  124e34:	e3080694 	movw	r0, #34452	; 0x8694
  124e38:	e3400014 	movt	r0, #20
  124e3c:	ebff78b4 	bl	103114 <rt_kprintf>
  124e40:	e3001156 	movw	r1, #342	; 0x156
  124e44:	e3080638 	movw	r0, #34360	; 0x8638
  124e48:	e3400014 	movt	r0, #20
  124e4c:	ebff98a7 	bl	10b0f0 <sys_arch_assert>
  124e50:	ea00000e 	b	124e90 <tcp_write_checks+0x1a0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
  124e54:	e51b3008 	ldr	r3, [fp, #-8]
  124e58:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  124e5c:	e3530000 	cmp	r3, #0
  124e60:	1a000003 	bne	124e74 <tcp_write_checks+0x184>
  124e64:	e51b3008 	ldr	r3, [fp, #-8]
  124e68:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124e6c:	e3530000 	cmp	r3, #0
  124e70:	0a000006 	beq	124e90 <tcp_write_checks+0x1a0>
  124e74:	e30806d0 	movw	r0, #34512	; 0x86d0
  124e78:	e3400014 	movt	r0, #20
  124e7c:	ebff78a4 	bl	103114 <rt_kprintf>
  124e80:	e3001159 	movw	r1, #345	; 0x159
  124e84:	e3080638 	movw	r0, #34360	; 0x8638
  124e88:	e3400014 	movt	r0, #20
  124e8c:	ebff9897 	bl	10b0f0 <sys_arch_assert>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
  124e90:	e3a03000 	mov	r3, #0
}
  124e94:	e1a00003 	mov	r0, r3
  124e98:	e24bd004 	sub	sp, fp, #4
  124e9c:	e8bd8800 	pop	{fp, pc}

00124ea0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  124ea0:	e92d4810 	push	{r4, fp, lr}
  124ea4:	e28db008 	add	fp, sp, #8
  124ea8:	e24dd06c 	sub	sp, sp, #108	; 0x6c
  124eac:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  124eb0:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  124eb4:	e1a01002 	mov	r1, r2
  124eb8:	e1a02003 	mov	r2, r3
  124ebc:	e1a03001 	mov	r3, r1
  124ec0:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
  124ec4:	e1a03002 	mov	r3, r2
  124ec8:	e54b305f 	strb	r3, [fp, #-95]	; 0xffffffa1
  struct pbuf *concat_p = NULL;
  124ecc:	e3a03000 	mov	r3, #0
  124ed0:	e50b3010 	str	r3, [fp, #-16]
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  124ed4:	e3a03000 	mov	r3, #0
  124ed8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  124edc:	e3a03000 	mov	r3, #0
  124ee0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124ee4:	e3a03000 	mov	r3, #0
  124ee8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  124eec:	e3a03000 	mov	r3, #0
  124ef0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  u16_t pos = 0; /* position in 'arg' data */
  124ef4:	e3a03000 	mov	r3, #0
  124ef8:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t queuelen;
  u8_t optlen = 0;
  124efc:	e3a03000 	mov	r3, #0
  124f00:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  u8_t optflags = 0;
  124f04:	e3a03000 	mov	r3, #0
  124f08:	e54b303e 	strb	r3, [fp, #-62]	; 0xffffffc2
#if TCP_OVERSIZE
  u16_t oversize = 0;
  124f0c:	e3a03000 	mov	r3, #0
  124f10:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
  u16_t oversize_used = 0;
  124f14:	e3a03000 	mov	r3, #0
  124f18:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
  124f1c:	e3a03000 	mov	r3, #0
  124f20:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
  124f24:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124f28:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  124f2c:	e1a030a3 	lsr	r3, r3, #1
  124f30:	e6ff2073 	uxth	r2, r3
  124f34:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124f38:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  124f3c:	e1520003 	cmp	r2, r3
  124f40:	31a03002 	movcc	r3, r2
  124f44:	21a03003 	movcs	r3, r3
  124f48:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  mss_local = mss_local ? mss_local : pcb->mss;
  124f4c:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  124f50:	e3530000 	cmp	r3, #0
  124f54:	1a000002 	bne	124f64 <tcp_write+0xc4>
  124f58:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124f5c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  124f60:	ea000000 	b	124f68 <tcp_write+0xc8>
  124f64:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  124f68:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
  124f6c:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  124f70:	e3530000 	cmp	r3, #0
  124f74:	1a000008 	bne	124f9c <tcp_write+0xfc>
  124f78:	e3080704 	movw	r0, #34564	; 0x8704
  124f7c:	e3400014 	movt	r0, #20
  124f80:	ebff7863 	bl	103114 <rt_kprintf>
  124f84:	e3001192 	movw	r1, #402	; 0x192
  124f88:	e3080638 	movw	r0, #34360	; 0x8638
  124f8c:	e3400014 	movt	r0, #20
  124f90:	ebff9856 	bl	10b0f0 <sys_arch_assert>
  124f94:	e3e0300f 	mvn	r3, #15
  124f98:	ea00029f 	b	125a1c <tcp_write+0xb7c>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
  124f9c:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124fa0:	e1a01003 	mov	r1, r3
  124fa4:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  124fa8:	ebffff50 	bl	124cf0 <tcp_write_checks>
  124fac:	e1a03000 	mov	r3, r0
  124fb0:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  if (err != ERR_OK) {
  124fb4:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  124fb8:	e3530000 	cmp	r3, #0
  124fbc:	0a000001 	beq	124fc8 <tcp_write+0x128>
    return err;
  124fc0:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  124fc4:	ea000294 	b	125a1c <tcp_write+0xb7c>
  }
  queuelen = pcb->snd_queuelen;
  124fc8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124fcc:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124fd0:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
  124fd4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124fd8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124fdc:	e3530000 	cmp	r3, #0
  124fe0:	0a0000d8 	beq	125348 <tcp_write+0x4a8>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124fe4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124fe8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124fec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  124ff0:	ea000002 	b	125000 <tcp_write+0x160>
         last_unsent = last_unsent->next);
  124ff4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ff8:	e5933000 	ldr	r3, [r3]
  124ffc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  125000:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125004:	e5933000 	ldr	r3, [r3]
  125008:	e3530000 	cmp	r3, #0
  12500c:	1afffff8 	bne	124ff4 <tcp_write+0x154>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
  125010:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125014:	e5d3300a 	ldrb	r3, [r3, #10]
  125018:	e1a03103 	lsl	r3, r3, #2
  12501c:	e6ff3073 	uxth	r3, r3
  125020:	e2033004 	and	r3, r3, #4
  125024:	e14b34b4 	strh	r3, [fp, #-68]	; 0xffffffbc
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
  125028:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  12502c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125030:	e1d330b8 	ldrh	r3, [r3, #8]
  125034:	e1a01003 	mov	r1, r3
  125038:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  12503c:	e0813003 	add	r3, r1, r3
  125040:	e1520003 	cmp	r2, r3
  125044:	aa000006 	bge	125064 <tcp_write+0x1c4>
  125048:	e3080738 	movw	r0, #34616	; 0x8738
  12504c:	e3400014 	movt	r0, #20
  125050:	ebff782f 	bl	103114 <rt_kprintf>
  125054:	e30011c7 	movw	r1, #455	; 0x1c7
  125058:	e3080638 	movw	r0, #34360	; 0x8638
  12505c:	e3400014 	movt	r0, #20
  125060:	ebff9822 	bl	10b0f0 <sys_arch_assert>
    space = mss_local - (last_unsent->len + unsent_optlen);
  125064:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125068:	e1d320b8 	ldrh	r2, [r3, #8]
  12506c:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  125070:	e0823003 	add	r3, r2, r3
  125074:	e6ff3073 	uxth	r3, r3
  125078:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  12507c:	e0423003 	sub	r3, r2, r3
  125080:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
  125084:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125088:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  12508c:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
    if (oversize > 0) {
  125090:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  125094:	e3530000 	cmp	r3, #0
  125098:	0a000025 	beq	125134 <tcp_write+0x294>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
  12509c:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  1250a0:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  1250a4:	e1520003 	cmp	r2, r3
  1250a8:	2a000006 	bcs	1250c8 <tcp_write+0x228>
  1250ac:	e3080750 	movw	r0, #34640	; 0x8750
  1250b0:	e3400014 	movt	r0, #20
  1250b4:	ebff7816 	bl	103114 <rt_kprintf>
  1250b8:	e30011d9 	movw	r1, #473	; 0x1d9
  1250bc:	e3080638 	movw	r0, #34360	; 0x8638
  1250c0:	e3400014 	movt	r0, #20
  1250c4:	ebff9809 	bl	10b0f0 <sys_arch_assert>
      seg = last_unsent;
  1250c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1250cc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
  1250d0:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  1250d4:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  1250d8:	e1520003 	cmp	r2, r3
  1250dc:	9a000001 	bls	1250e8 <tcp_write+0x248>
  1250e0:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  1250e4:	ea000000 	b	1250ec <tcp_write+0x24c>
  1250e8:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  1250ec:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  1250f0:	e1530002 	cmp	r3, r2
  1250f4:	b1a03003 	movlt	r3, r3
  1250f8:	a1a03002 	movge	r3, r2
  1250fc:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
      pos += oversize_used;
  125100:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125104:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125108:	e0823003 	add	r3, r2, r3
  12510c:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      oversize -= oversize_used;
  125110:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  125114:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125118:	e0423003 	sub	r3, r2, r3
  12511c:	e6ff3073 	uxth	r3, r3
  125120:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
      space -= oversize_used;
  125124:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  125128:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12512c:	e0423003 	sub	r3, r2, r3
  125130:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
  125134:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  125138:	e3530000 	cmp	r3, #0
  12513c:	0a00000a 	beq	12516c <tcp_write+0x2cc>
  125140:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125144:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125148:	e1520003 	cmp	r2, r3
  12514c:	0a000006 	beq	12516c <tcp_write+0x2cc>
  125150:	e3080770 	movw	r0, #34672	; 0x8770
  125154:	e3400014 	movt	r0, #20
  125158:	ebff77ed 	bl	103114 <rt_kprintf>
  12515c:	e30011e1 	movw	r1, #481	; 0x1e1
  125160:	e3080638 	movw	r0, #34360	; 0x8638
  125164:	e3400014 	movt	r0, #20
  125168:	ebff97e0 	bl	10b0f0 <sys_arch_assert>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
  12516c:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125170:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125174:	e1520003 	cmp	r2, r3
  125178:	2a000121 	bcs	125604 <tcp_write+0x764>
  12517c:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  125180:	e3530000 	cmp	r3, #0
  125184:	0a00011e 	beq	125604 <tcp_write+0x764>
  125188:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12518c:	e1d330b8 	ldrh	r3, [r3, #8]
  125190:	e3530000 	cmp	r3, #0
  125194:	0a00011a 	beq	125604 <tcp_write+0x764>
      u16_t seglen = LWIP_MIN(space, len - pos);
  125198:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  12519c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1251a0:	e0422003 	sub	r2, r2, r3
  1251a4:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  1251a8:	e1520003 	cmp	r2, r3
  1251ac:	b1a03002 	movlt	r3, r2
  1251b0:	a1a03003 	movge	r3, r3
  1251b4:	e14b34b6 	strh	r3, [fp, #-70]	; 0xffffffba
      seg = last_unsent;
  1251b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1251bc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
  1251c0:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1251c4:	e2033001 	and	r3, r3, #1
  1251c8:	e3530000 	cmp	r3, #0
  1251cc:	0a00001f 	beq	125250 <tcp_write+0x3b0>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
  1251d0:	e24b0052 	sub	r0, fp, #82	; 0x52
  1251d4:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  1251d8:	e15b14b6 	ldrh	r1, [fp, #-70]	; 0xffffffba
  1251dc:	e3a03001 	mov	r3, #1
  1251e0:	e58d3008 	str	r3, [sp, #8]
  1251e4:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1251e8:	e58d3004 	str	r3, [sp, #4]
  1251ec:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1251f0:	e58d3000 	str	r3, [sp]
  1251f4:	e1a03000 	mov	r3, r0
  1251f8:	e3a00004 	mov	r0, #4
  1251fc:	ebfffe67 	bl	124ba0 <tcp_pbuf_prealloc>
  125200:	e50b0010 	str	r0, [fp, #-16]
  125204:	e51b3010 	ldr	r3, [fp, #-16]
  125208:	e3530000 	cmp	r3, #0
  12520c:	0a0001cc 	beq	125944 <tcp_write+0xaa4>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
  125210:	e51b3010 	ldr	r3, [fp, #-16]
  125214:	e5930004 	ldr	r0, [r3, #4]
  125218:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  12521c:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  125220:	e0823003 	add	r3, r2, r3
  125224:	e15b24b6 	ldrh	r2, [fp, #-70]	; 0xffffffba
  125228:	e1a01003 	mov	r1, r3
  12522c:	eb006eda 	bl	140d9c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
  125230:	e51b0010 	ldr	r0, [fp, #-16]
  125234:	ebffd7a5 	bl	11b0d0 <pbuf_clen>
  125238:	e1a03000 	mov	r3, r0
  12523c:	e1a02003 	mov	r2, r3
  125240:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125244:	e0823003 	add	r3, r2, r3
  125248:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  12524c:	ea000038 	b	125334 <tcp_write+0x494>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
  125250:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125254:	e5933004 	ldr	r3, [r3, #4]
  125258:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  12525c:	ea000002 	b	12526c <tcp_write+0x3cc>
  125260:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125264:	e5933000 	ldr	r3, [r3]
  125268:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  12526c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125270:	e5933000 	ldr	r3, [r3]
  125274:	e3530000 	cmp	r3, #0
  125278:	1afffff8 	bne	125260 <tcp_write+0x3c0>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
  12527c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125280:	e5d3300c 	ldrb	r3, [r3, #12]
  125284:	e3530001 	cmp	r3, #1
  125288:	1a000014 	bne	1252e0 <tcp_write+0x440>
  12528c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125290:	e5933004 	ldr	r3, [r3, #4]
  125294:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  125298:	e1d220ba 	ldrh	r2, [r2, #10]
  12529c:	e0833002 	add	r3, r3, r2
  1252a0:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  1252a4:	e1520003 	cmp	r2, r3
  1252a8:	1a00000c 	bne	1252e0 <tcp_write+0x440>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
  1252ac:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1252b0:	e3530000 	cmp	r3, #0
  1252b4:	0a000006 	beq	1252d4 <tcp_write+0x434>
  1252b8:	e3080790 	movw	r0, #34704	; 0x8790
  1252bc:	e3400014 	movt	r0, #20
  1252c0:	ebff7793 	bl	103114 <rt_kprintf>
  1252c4:	e3a01f83 	mov	r1, #524	; 0x20c
  1252c8:	e3080638 	movw	r0, #34360	; 0x8638
  1252cc:	e3400014 	movt	r0, #20
  1252d0:	ebff9786 	bl	10b0f0 <sys_arch_assert>
          extendlen = seglen;
  1252d4:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  1252d8:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  1252dc:	ea000014 	b	125334 <tcp_write+0x494>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
  1252e0:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  1252e4:	e3a02001 	mov	r2, #1
  1252e8:	e1a01003 	mov	r1, r3
  1252ec:	e3a00004 	mov	r0, #4
  1252f0:	ebffd3ea 	bl	11a2a0 <pbuf_alloc>
  1252f4:	e50b0010 	str	r0, [fp, #-16]
  1252f8:	e51b3010 	ldr	r3, [fp, #-16]
  1252fc:	e3530000 	cmp	r3, #0
  125300:	0a000191 	beq	12594c <tcp_write+0xaac>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
  125304:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125308:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  12530c:	e0822003 	add	r2, r2, r3
  125310:	e51b3010 	ldr	r3, [fp, #-16]
  125314:	e5832004 	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
  125318:	e51b0010 	ldr	r0, [fp, #-16]
  12531c:	ebffd76b 	bl	11b0d0 <pbuf_clen>
  125320:	e1a03000 	mov	r3, r0
  125324:	e1a02003 	mov	r2, r3
  125328:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  12532c:	e0823003 	add	r3, r2, r3
  125330:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
  125334:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125338:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  12533c:	e0823003 	add	r3, r2, r3
  125340:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  125344:	ea0000ae 	b	125604 <tcp_write+0x764>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
  125348:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12534c:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  125350:	e3530000 	cmp	r3, #0
  125354:	0a0000aa 	beq	125604 <tcp_write+0x764>
  125358:	e30807bc 	movw	r0, #34748	; 0x87bc
  12535c:	e3400014 	movt	r0, #20
  125360:	ebff776b 	bl	103114 <rt_kprintf>
  125364:	e3001225 	movw	r1, #549	; 0x225
  125368:	e3080638 	movw	r0, #34360	; 0x8638
  12536c:	e3400014 	movt	r0, #20
  125370:	ebff975e 	bl	10b0f0 <sys_arch_assert>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  125374:	ea0000a2 	b	125604 <tcp_write+0x764>
    struct pbuf *p;
    u16_t left = len - pos;
  125378:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  12537c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125380:	e0423003 	sub	r3, r2, r3
  125384:	e14b34b8 	strh	r3, [fp, #-72]	; 0xffffffb8
    u16_t max_len = mss_local - optlen;
  125388:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  12538c:	e6ff3073 	uxth	r3, r3
  125390:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  125394:	e0423003 	sub	r3, r2, r3
  125398:	e14b34ba 	strh	r3, [fp, #-74]	; 0xffffffb6
    u16_t seglen = LWIP_MIN(left, max_len);
  12539c:	e15b24ba 	ldrh	r2, [fp, #-74]	; 0xffffffb6
  1253a0:	e15b34b8 	ldrh	r3, [fp, #-72]	; 0xffffffb8
  1253a4:	e1520003 	cmp	r2, r3
  1253a8:	31a03002 	movcc	r3, r2
  1253ac:	21a03003 	movcs	r3, r3
  1253b0:	e14b34bc 	strh	r3, [fp, #-76]	; 0xffffffb4
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
  1253b4:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1253b8:	e2033001 	and	r3, r3, #1
  1253bc:	e3530000 	cmp	r3, #0
  1253c0:	0a00002e 	beq	125480 <tcp_write+0x5e0>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
  1253c4:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  1253c8:	e6ff2073 	uxth	r2, r3
  1253cc:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  1253d0:	e0823003 	add	r3, r2, r3
  1253d4:	e6ff1073 	uxth	r1, r3
  1253d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1253dc:	e3530000 	cmp	r3, #0
  1253e0:	03a03001 	moveq	r3, #1
  1253e4:	13a03000 	movne	r3, #0
  1253e8:	e6ef3073 	uxtb	r3, r3
  1253ec:	e24b0052 	sub	r0, fp, #82	; 0x52
  1253f0:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  1253f4:	e58d3008 	str	r3, [sp, #8]
  1253f8:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1253fc:	e58d3004 	str	r3, [sp, #4]
  125400:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125404:	e58d3000 	str	r3, [sp]
  125408:	e1a03000 	mov	r3, r0
  12540c:	e3a00000 	mov	r0, #0
  125410:	ebfffde2 	bl	124ba0 <tcp_pbuf_prealloc>
  125414:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  125418:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12541c:	e3530000 	cmp	r3, #0
  125420:	0a00014b 	beq	125954 <tcp_write+0xab4>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
  125424:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125428:	e1d330ba 	ldrh	r3, [r3, #10]
  12542c:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  125430:	e1520003 	cmp	r2, r3
  125434:	9a000006 	bls	125454 <tcp_write+0x5b4>
  125438:	e30807ec 	movw	r0, #34796	; 0x87ec
  12543c:	e3400014 	movt	r0, #20
  125440:	ebff7733 	bl	103114 <rt_kprintf>
  125444:	e3001241 	movw	r1, #577	; 0x241
  125448:	e3080638 	movw	r0, #34360	; 0x8638
  12544c:	e3400014 	movt	r0, #20
  125450:	ebff9726 	bl	10b0f0 <sys_arch_assert>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
  125454:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125458:	e5932004 	ldr	r2, [r3, #4]
  12545c:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  125460:	e0820003 	add	r0, r2, r3
  125464:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125468:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  12546c:	e0823003 	add	r3, r2, r3
  125470:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  125474:	e1a01003 	mov	r1, r3
  125478:	eb006e47 	bl	140d9c <memcpy>
  12547c:	ea000027 	b	125520 <tcp_write+0x680>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
  125480:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  125484:	e3530000 	cmp	r3, #0
  125488:	0a000006 	beq	1254a8 <tcp_write+0x608>
  12548c:	e308082c 	movw	r0, #34860	; 0x882c
  125490:	e3400014 	movt	r0, #20
  125494:	ebff771e 	bl	103114 <rt_kprintf>
  125498:	e300124b 	movw	r1, #587	; 0x24b
  12549c:	e3080638 	movw	r0, #34360	; 0x8638
  1254a0:	e3400014 	movt	r0, #20
  1254a4:	ebff9711 	bl	10b0f0 <sys_arch_assert>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
  1254a8:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  1254ac:	e3a02001 	mov	r2, #1
  1254b0:	e1a01003 	mov	r1, r3
  1254b4:	e3a00000 	mov	r0, #0
  1254b8:	ebffd378 	bl	11a2a0 <pbuf_alloc>
  1254bc:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  1254c0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1254c4:	e3530000 	cmp	r3, #0
  1254c8:	0a000123 	beq	12595c <tcp_write+0xabc>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
  1254cc:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1254d0:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  1254d4:	e0822003 	add	r2, r2, r3
  1254d8:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1254dc:	e5832004 	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  1254e0:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  1254e4:	e6ff3073 	uxth	r3, r3
  1254e8:	e3a02000 	mov	r2, #0
  1254ec:	e1a01003 	mov	r1, r3
  1254f0:	e3a00000 	mov	r0, #0
  1254f4:	ebffd369 	bl	11a2a0 <pbuf_alloc>
  1254f8:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  1254fc:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125500:	e3530000 	cmp	r3, #0
  125504:	1a000002 	bne	125514 <tcp_write+0x674>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
  125508:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  12550c:	ebffd66a 	bl	11aebc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
  125510:	ea000114 	b	125968 <tcp_write+0xac8>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
  125514:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
  125518:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  12551c:	ebffd71d 	bl	11b198 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
  125520:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  125524:	ebffd6e9 	bl	11b0d0 <pbuf_clen>
  125528:	e1a03000 	mov	r3, r0
  12552c:	e1a02003 	mov	r2, r3
  125530:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125534:	e0823003 	add	r3, r2, r3
  125538:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  12553c:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125540:	e35300b3 	cmp	r3, #179	; 0xb3
  125544:	8a000003 	bhi	125558 <tcp_write+0x6b8>
  125548:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  12554c:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  125550:	e1530002 	cmp	r3, r2
  125554:	9a000002 	bls	125564 <tcp_write+0x6c4>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
  125558:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  12555c:	ebffd656 	bl	11aebc <pbuf_free>
      goto memerr;
  125560:	ea000100 	b	125968 <tcp_write+0xac8>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  125564:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125568:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  12556c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125570:	e0822003 	add	r2, r2, r3
  125574:	e55b303e 	ldrb	r3, [fp, #-62]	; 0xffffffc2
  125578:	e58d3000 	str	r3, [sp]
  12557c:	e1a03002 	mov	r3, r2
  125580:	e3a02000 	mov	r2, #0
  125584:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  125588:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  12558c:	ebfffd02 	bl	12499c <tcp_create_segment>
  125590:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  125594:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125598:	e3530000 	cmp	r3, #0
  12559c:	0a0000f0 	beq	125964 <tcp_write+0xac4>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
  1255a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1255a4:	e3530000 	cmp	r3, #0
  1255a8:	1a000002 	bne	1255b8 <tcp_write+0x718>
      queue = seg;
  1255ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1255b0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  1255b4:	ea00000c 	b	1255ec <tcp_write+0x74c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
  1255b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1255bc:	e3530000 	cmp	r3, #0
  1255c0:	1a000006 	bne	1255e0 <tcp_write+0x740>
  1255c4:	e308083c 	movw	r0, #34876	; 0x883c
  1255c8:	e3400014 	movt	r0, #20
  1255cc:	ebff76d0 	bl	103114 <rt_kprintf>
  1255d0:	e3001285 	movw	r1, #645	; 0x285
  1255d4:	e3080638 	movw	r0, #34360	; 0x8638
  1255d8:	e3400014 	movt	r0, #20
  1255dc:	ebff96c3 	bl	10b0f0 <sys_arch_assert>
      prev_seg->next = seg;
  1255e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1255e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1255e8:	e5832000 	str	r2, [r3]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
  1255ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1255f0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
  1255f4:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  1255f8:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  1255fc:	e0823003 	add	r3, r2, r3
  125600:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  while (pos < len) {
  125604:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125608:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  12560c:	e1520003 	cmp	r2, r3
  125610:	3affff58 	bcc	125378 <tcp_write+0x4d8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
  125614:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125618:	e3530000 	cmp	r3, #0
  12561c:	0a00002b 	beq	1256d0 <tcp_write+0x830>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
  125620:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125624:	e5933004 	ldr	r3, [r3, #4]
  125628:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  12562c:	ea00001d 	b	1256a8 <tcp_write+0x808>
      p->tot_len += oversize_used;
  125630:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125634:	e1d320b8 	ldrh	r2, [r3, #8]
  125638:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12563c:	e0823003 	add	r3, r2, r3
  125640:	e6ff2073 	uxth	r2, r3
  125644:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125648:	e1c320b8 	strh	r2, [r3, #8]
      if (p->next == NULL) {
  12564c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125650:	e5933000 	ldr	r3, [r3]
  125654:	e3530000 	cmp	r3, #0
  125658:	1a00000f 	bne	12569c <tcp_write+0x7fc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  12565c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125660:	e5933004 	ldr	r3, [r3, #4]
  125664:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  125668:	e1d220ba 	ldrh	r2, [r2, #10]
  12566c:	e0833002 	add	r3, r3, r2
  125670:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  125674:	e51b105c 	ldr	r1, [fp, #-92]	; 0xffffffa4
  125678:	e1a00003 	mov	r0, r3
  12567c:	eb006dc6 	bl	140d9c <memcpy>
        p->len += oversize_used;
  125680:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125684:	e1d320ba 	ldrh	r2, [r3, #10]
  125688:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12568c:	e0823003 	add	r3, r2, r3
  125690:	e6ff2073 	uxth	r2, r3
  125694:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125698:	e1c320ba 	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
  12569c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1256a0:	e5933000 	ldr	r3, [r3]
  1256a4:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  1256a8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1256ac:	e3530000 	cmp	r3, #0
  1256b0:	1affffde 	bne	125630 <tcp_write+0x790>
      }
    }
    last_unsent->len += oversize_used;
  1256b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1256b8:	e1d320b8 	ldrh	r2, [r3, #8]
  1256bc:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1256c0:	e0823003 	add	r3, r2, r3
  1256c4:	e6ff2073 	uxth	r2, r3
  1256c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1256cc:	e1c320b8 	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
  1256d0:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  1256d4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1256d8:	e1c326b8 	strh	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
  1256dc:	e51b3010 	ldr	r3, [fp, #-16]
  1256e0:	e3530000 	cmp	r3, #0
  1256e4:	0a000017 	beq	125748 <tcp_write+0x8a8>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
  1256e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1256ec:	e3530000 	cmp	r3, #0
  1256f0:	1a000006 	bne	125710 <tcp_write+0x870>
  1256f4:	e3080850 	movw	r0, #34896	; 0x8850
  1256f8:	e3400014 	movt	r0, #20
  1256fc:	ebff7684 	bl	103114 <rt_kprintf>
  125700:	e30012bb 	movw	r1, #699	; 0x2bb
  125704:	e3080638 	movw	r0, #34360	; 0x8638
  125708:	e3400014 	movt	r0, #20
  12570c:	ebff9677 	bl	10b0f0 <sys_arch_assert>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
  125710:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125714:	e5933004 	ldr	r3, [r3, #4]
  125718:	e51b1010 	ldr	r1, [fp, #-16]
  12571c:	e1a00003 	mov	r0, r3
  125720:	ebffd69c 	bl	11b198 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
  125724:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125728:	e1d320b8 	ldrh	r2, [r3, #8]
  12572c:	e51b3010 	ldr	r3, [fp, #-16]
  125730:	e1d330b8 	ldrh	r3, [r3, #8]
  125734:	e0823003 	add	r3, r2, r3
  125738:	e6ff2073 	uxth	r2, r3
  12573c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125740:	e1c320b8 	strh	r2, [r3, #8]
  125744:	ea000037 	b	125828 <tcp_write+0x988>
  } else if (extendlen > 0) {
  125748:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  12574c:	e3530000 	cmp	r3, #0
  125750:	0a000034 	beq	125828 <tcp_write+0x988>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
  125754:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125758:	e3530000 	cmp	r3, #0
  12575c:	0a000003 	beq	125770 <tcp_write+0x8d0>
  125760:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125764:	e5933004 	ldr	r3, [r3, #4]
  125768:	e3530000 	cmp	r3, #0
  12576c:	1a000006 	bne	12578c <tcp_write+0x8ec>
  125770:	e3080888 	movw	r0, #34952	; 0x8888
  125774:	e3400014 	movt	r0, #20
  125778:	ebff7665 	bl	103114 <rt_kprintf>
  12577c:	e30012c1 	movw	r1, #705	; 0x2c1
  125780:	e3080638 	movw	r0, #34360	; 0x8638
  125784:	e3400014 	movt	r0, #20
  125788:	ebff9658 	bl	10b0f0 <sys_arch_assert>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  12578c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125790:	e5933004 	ldr	r3, [r3, #4]
  125794:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  125798:	ea000009 	b	1257c4 <tcp_write+0x924>
      p->tot_len += extendlen;
  12579c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257a0:	e1d320b8 	ldrh	r2, [r3, #8]
  1257a4:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1257a8:	e0823003 	add	r3, r2, r3
  1257ac:	e6ff2073 	uxth	r2, r3
  1257b0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257b4:	e1c320b8 	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  1257b8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257bc:	e5933000 	ldr	r3, [r3]
  1257c0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  1257c4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257c8:	e5933000 	ldr	r3, [r3]
  1257cc:	e3530000 	cmp	r3, #0
  1257d0:	1afffff1 	bne	12579c <tcp_write+0x8fc>
    }
    p->tot_len += extendlen;
  1257d4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257d8:	e1d320b8 	ldrh	r2, [r3, #8]
  1257dc:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1257e0:	e0823003 	add	r3, r2, r3
  1257e4:	e6ff2073 	uxth	r2, r3
  1257e8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257ec:	e1c320b8 	strh	r2, [r3, #8]
    p->len += extendlen;
  1257f0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257f4:	e1d320ba 	ldrh	r2, [r3, #10]
  1257f8:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1257fc:	e0823003 	add	r3, r2, r3
  125800:	e6ff2073 	uxth	r2, r3
  125804:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125808:	e1c320ba 	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
  12580c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125810:	e1d320b8 	ldrh	r2, [r3, #8]
  125814:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125818:	e0823003 	add	r3, r2, r3
  12581c:	e6ff2073 	uxth	r2, r3
  125820:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125824:	e1c320b8 	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
  125828:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12582c:	e3530000 	cmp	r3, #0
  125830:	1a000003 	bne	125844 <tcp_write+0x9a4>
    pcb->unsent = queue;
  125834:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125838:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12583c:	e583206c 	str	r2, [r3, #108]	; 0x6c
  125840:	ea000002 	b	125850 <tcp_write+0x9b0>
  } else {
    last_unsent->next = queue;
  125844:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125848:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12584c:	e5832000 	str	r2, [r3]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
  125850:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125854:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  125858:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  12585c:	e0822003 	add	r2, r2, r3
  125860:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125864:	e583205c 	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
  125868:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12586c:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  125870:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125874:	e0423003 	sub	r3, r2, r3
  125878:	e6ff2073 	uxth	r2, r3
  12587c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125880:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
  125884:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125888:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  12588c:	e1c326b6 	strh	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  125890:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125894:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125898:	e3530000 	cmp	r3, #0
  12589c:	0a00000e 	beq	1258dc <tcp_write+0xa3c>
    LWIP_ASSERT("tcp_write: valid queue length",
  1258a0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1258a4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1258a8:	e3530000 	cmp	r3, #0
  1258ac:	1a00000a 	bne	1258dc <tcp_write+0xa3c>
  1258b0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1258b4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1258b8:	e3530000 	cmp	r3, #0
  1258bc:	1a000006 	bne	1258dc <tcp_write+0xa3c>
  1258c0:	e30808c0 	movw	r0, #35008	; 0x88c0
  1258c4:	e3400014 	movt	r0, #20
  1258c8:	ebff7611 	bl	103114 <rt_kprintf>
  1258cc:	e30012ed 	movw	r1, #749	; 0x2ed
  1258d0:	e3080638 	movw	r0, #34360	; 0x8638
  1258d4:	e3400014 	movt	r0, #20
  1258d8:	ebff9604 	bl	10b0f0 <sys_arch_assert>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  1258dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1258e0:	e3530000 	cmp	r3, #0
  1258e4:	0a000014 	beq	12593c <tcp_write+0xa9c>
  1258e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1258ec:	e593300c 	ldr	r3, [r3, #12]
  1258f0:	e3530000 	cmp	r3, #0
  1258f4:	0a000010 	beq	12593c <tcp_write+0xa9c>
  1258f8:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1258fc:	e2033002 	and	r3, r3, #2
  125900:	e3530000 	cmp	r3, #0
  125904:	1a00000c 	bne	12593c <tcp_write+0xa9c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  125908:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12590c:	e593300c 	ldr	r3, [r3, #12]
  125910:	e1d330bc 	ldrh	r3, [r3, #12]
  125914:	e6ff4073 	uxth	r4, r3
  125918:	e3a00008 	mov	r0, #8
  12591c:	ebffc32f 	bl	1165e0 <lwip_htons>
  125920:	e1a03000 	mov	r3, r0
  125924:	e1a02003 	mov	r2, r3
  125928:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12592c:	e593300c 	ldr	r3, [r3, #12]
  125930:	e1842002 	orr	r2, r4, r2
  125934:	e6ff2072 	uxth	r2, r2
  125938:	e1c320bc 	strh	r2, [r3, #12]
  }

  return ERR_OK;
  12593c:	e3a03000 	mov	r3, #0
  125940:	ea000035 	b	125a1c <tcp_write+0xb7c>
          goto memerr;
  125944:	e320f000 	nop	{0}
  125948:	ea000006 	b	125968 <tcp_write+0xac8>
            goto memerr;
  12594c:	e320f000 	nop	{0}
  125950:	ea000004 	b	125968 <tcp_write+0xac8>
        goto memerr;
  125954:	e320f000 	nop	{0}
  125958:	ea000002 	b	125968 <tcp_write+0xac8>
        goto memerr;
  12595c:	e320f000 	nop	{0}
  125960:	ea000000 	b	125968 <tcp_write+0xac8>
      goto memerr;
  125964:	e320f000 	nop	{0}
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  125968:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12596c:	e5d3301e 	ldrb	r3, [r3, #30]
  125970:	e1e03c83 	mvn	r3, r3, lsl #25
  125974:	e1e03ca3 	mvn	r3, r3, lsr #25
  125978:	e6ef2073 	uxtb	r2, r3
  12597c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125980:	e5c3201e 	strb	r2, [r3, #30]
  TCP_STATS_INC(tcp.memerr);
  125984:	e30e3a14 	movw	r3, #59924	; 0xea14
  125988:	e3403056 	movt	r3, #86	; 0x56
  12598c:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125990:	e2833001 	add	r3, r3, #1
  125994:	e6ff2073 	uxth	r2, r3
  125998:	e30e3a14 	movw	r3, #59924	; 0xea14
  12599c:	e3403056 	movt	r3, #86	; 0x56
  1259a0:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8

  if (concat_p != NULL) {
  1259a4:	e51b3010 	ldr	r3, [fp, #-16]
  1259a8:	e3530000 	cmp	r3, #0
  1259ac:	0a000001 	beq	1259b8 <tcp_write+0xb18>
    pbuf_free(concat_p);
  1259b0:	e51b0010 	ldr	r0, [fp, #-16]
  1259b4:	ebffd540 	bl	11aebc <pbuf_free>
  }
  if (queue != NULL) {
  1259b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259bc:	e3530000 	cmp	r3, #0
  1259c0:	0a000001 	beq	1259cc <tcp_write+0xb2c>
    tcp_segs_free(queue);
  1259c4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1259c8:	ebffe69b 	bl	11f43c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
  1259cc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1259d0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1259d4:	e3530000 	cmp	r3, #0
  1259d8:	0a00000e 	beq	125a18 <tcp_write+0xb78>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
  1259dc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1259e0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1259e4:	e3530000 	cmp	r3, #0
  1259e8:	1a00000a 	bne	125a18 <tcp_write+0xb78>
  1259ec:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1259f0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1259f4:	e3530000 	cmp	r3, #0
  1259f8:	1a000006 	bne	125a18 <tcp_write+0xb78>
  1259fc:	e30808c0 	movw	r0, #35008	; 0x88c0
  125a00:	e3400014 	movt	r0, #20
  125a04:	ebff75c2 	bl	103114 <rt_kprintf>
  125a08:	e3001302 	movw	r1, #770	; 0x302
  125a0c:	e3080638 	movw	r0, #34360	; 0x8638
  125a10:	e3400014 	movt	r0, #20
  125a14:	ebff95b5 	bl	10b0f0 <sys_arch_assert>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  125a18:	e3e03000 	mvn	r3, #0
}
  125a1c:	e1a00003 	mov	r0, r3
  125a20:	e24bd008 	sub	sp, fp, #8
  125a24:	e8bd8810 	pop	{r4, fp, pc}

00125a28 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  125a28:	e92d4800 	push	{fp, lr}
  125a2c:	e28db004 	add	fp, sp, #4
  125a30:	e24dd028 	sub	sp, sp, #40	; 0x28
  125a34:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  125a38:	e1a03001 	mov	r3, r1
  125a3c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
  125a40:	e3a03000 	mov	r3, #0
  125a44:	e54b3005 	strb	r3, [fp, #-5]
  u8_t optlen = 0;
  125a48:	e3a03000 	mov	r3, #0
  125a4c:	e54b300d 	strb	r3, [fp, #-13]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
  125a50:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125a54:	e2033003 	and	r3, r3, #3
  125a58:	e3530000 	cmp	r3, #0
  125a5c:	1a000006 	bne	125a7c <tcp_enqueue_flags+0x54>
  125a60:	e30808e0 	movw	r0, #35040	; 0x88e0
  125a64:	e3400014 	movt	r0, #20
  125a68:	ebff75a9 	bl	103114 <rt_kprintf>
  125a6c:	e300131b 	movw	r1, #795	; 0x31b
  125a70:	e3080638 	movw	r0, #34360	; 0x8638
  125a74:	e3400014 	movt	r0, #20
  125a78:	ebff959c 	bl	10b0f0 <sys_arch_assert>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  125a7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a80:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125a84:	e35300b2 	cmp	r3, #178	; 0xb2
  125a88:	8a000004 	bhi	125aa0 <tcp_enqueue_flags+0x78>
  125a8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a90:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125a94:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  125a98:	e1530002 	cmp	r3, r2
  125a9c:	9a000014 	bls	125af4 <tcp_enqueue_flags+0xcc>
      ((flags & TCP_FIN) == 0)) {
  125aa0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125aa4:	e2033001 	and	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  125aa8:	e3530000 	cmp	r3, #0
  125aac:	1a000010 	bne	125af4 <tcp_enqueue_flags+0xcc>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  125ab0:	e30e3a14 	movw	r3, #59924	; 0xea14
  125ab4:	e3403056 	movt	r3, #86	; 0x56
  125ab8:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125abc:	e2833001 	add	r3, r3, #1
  125ac0:	e6ff2073 	uxth	r2, r3
  125ac4:	e30e3a14 	movw	r3, #59924	; 0xea14
  125ac8:	e3403056 	movt	r3, #86	; 0x56
  125acc:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  125ad0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ad4:	e5d3301e 	ldrb	r3, [r3, #30]
  125ad8:	e1e03c83 	mvn	r3, r3, lsl #25
  125adc:	e1e03ca3 	mvn	r3, r3, lsr #25
  125ae0:	e6ef2073 	uxtb	r2, r3
  125ae4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ae8:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  125aec:	e3e03000 	mvn	r3, #0
  125af0:	ea0000b7 	b	125dd4 <tcp_enqueue_flags+0x3ac>
  }

  if (flags & TCP_SYN) {
  125af4:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125af8:	e2033002 	and	r3, r3, #2
  125afc:	e3530000 	cmp	r3, #0
  125b00:	0a000001 	beq	125b0c <tcp_enqueue_flags+0xe4>
    optflags = TF_SEG_OPTS_MSS;
  125b04:	e3a03001 	mov	r3, #1
  125b08:	e54b3005 	strb	r3, [fp, #-5]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  125b0c:	e55b3005 	ldrb	r3, [fp, #-5]
  125b10:	e1a03103 	lsl	r3, r3, #2
  125b14:	e6ef3073 	uxtb	r3, r3
  125b18:	e2033004 	and	r3, r3, #4
  125b1c:	e54b300d 	strb	r3, [fp, #-13]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  125b20:	e55b300d 	ldrb	r3, [fp, #-13]
  125b24:	e6ff3073 	uxth	r3, r3
  125b28:	e3a02000 	mov	r2, #0
  125b2c:	e1a01003 	mov	r1, r3
  125b30:	e3a00000 	mov	r0, #0
  125b34:	ebffd1d9 	bl	11a2a0 <pbuf_alloc>
  125b38:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  125b3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125b40:	e3530000 	cmp	r3, #0
  125b44:	1a000010 	bne	125b8c <tcp_enqueue_flags+0x164>
    pcb->flags |= TF_NAGLEMEMERR;
  125b48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b4c:	e5d3301e 	ldrb	r3, [r3, #30]
  125b50:	e1e03c83 	mvn	r3, r3, lsl #25
  125b54:	e1e03ca3 	mvn	r3, r3, lsr #25
  125b58:	e6ef2073 	uxtb	r2, r3
  125b5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b60:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  125b64:	e30e3a14 	movw	r3, #59924	; 0xea14
  125b68:	e3403056 	movt	r3, #86	; 0x56
  125b6c:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125b70:	e2833001 	add	r3, r3, #1
  125b74:	e6ff2073 	uxth	r2, r3
  125b78:	e30e3a14 	movw	r3, #59924	; 0xea14
  125b7c:	e3403056 	movt	r3, #86	; 0x56
  125b80:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  125b84:	e3e03000 	mvn	r3, #0
  125b88:	ea000091 	b	125dd4 <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
  125b8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125b90:	e1d320ba 	ldrh	r2, [r3, #10]
  125b94:	e55b300d 	ldrb	r3, [fp, #-13]
  125b98:	e6ff3073 	uxth	r3, r3
  125b9c:	e1520003 	cmp	r2, r3
  125ba0:	2a000006 	bcs	125bc0 <tcp_enqueue_flags+0x198>
  125ba4:	e3080938 	movw	r0, #35128	; 0x8938
  125ba8:	e3400014 	movt	r0, #20
  125bac:	ebff7558 	bl	103114 <rt_kprintf>
  125bb0:	e3001341 	movw	r1, #833	; 0x341
  125bb4:	e3080638 	movw	r0, #34360	; 0x8638
  125bb8:	e3400014 	movt	r0, #20
  125bbc:	ebff954b 	bl	10b0f0 <sys_arch_assert>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  125bc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125bc4:	e593105c 	ldr	r1, [r3, #92]	; 0x5c
  125bc8:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  125bcc:	e55b3005 	ldrb	r3, [fp, #-5]
  125bd0:	e58d3000 	str	r3, [sp]
  125bd4:	e1a03001 	mov	r3, r1
  125bd8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  125bdc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125be0:	ebfffb6d 	bl	12499c <tcp_create_segment>
  125be4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  125be8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125bec:	e3530000 	cmp	r3, #0
  125bf0:	1a000010 	bne	125c38 <tcp_enqueue_flags+0x210>
    pcb->flags |= TF_NAGLEMEMERR;
  125bf4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125bf8:	e5d3301e 	ldrb	r3, [r3, #30]
  125bfc:	e1e03c83 	mvn	r3, r3, lsl #25
  125c00:	e1e03ca3 	mvn	r3, r3, lsr #25
  125c04:	e6ef2073 	uxtb	r2, r3
  125c08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c0c:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  125c10:	e30e3a14 	movw	r3, #59924	; 0xea14
  125c14:	e3403056 	movt	r3, #86	; 0x56
  125c18:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125c1c:	e2833001 	add	r3, r3, #1
  125c20:	e6ff2073 	uxth	r2, r3
  125c24:	e30e3a14 	movw	r3, #59924	; 0xea14
  125c28:	e3403056 	movt	r3, #86	; 0x56
  125c2c:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  125c30:	e3e03000 	mvn	r3, #0
  125c34:	ea000066 	b	125dd4 <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  125c38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125c3c:	e593300c 	ldr	r3, [r3, #12]
  125c40:	e2033003 	and	r3, r3, #3
  125c44:	e3530000 	cmp	r3, #0
  125c48:	0a000006 	beq	125c68 <tcp_enqueue_flags+0x240>
  125c4c:	e3080974 	movw	r0, #35188	; 0x8974
  125c50:	e3400014 	movt	r0, #20
  125c54:	ebff752e 	bl	103114 <rt_kprintf>
  125c58:	e3001349 	movw	r1, #841	; 0x349
  125c5c:	e3080638 	movw	r0, #34360	; 0x8638
  125c60:	e3400014 	movt	r0, #20
  125c64:	ebff9521 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
  125c68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125c6c:	e1d330b8 	ldrh	r3, [r3, #8]
  125c70:	e3530000 	cmp	r3, #0
  125c74:	0a000006 	beq	125c94 <tcp_enqueue_flags+0x26c>
  125c78:	e308098c 	movw	r0, #35212	; 0x898c
  125c7c:	e3400014 	movt	r0, #20
  125c80:	ebff7523 	bl	103114 <rt_kprintf>
  125c84:	e300134a 	movw	r1, #842	; 0x34a
  125c88:	e3080638 	movw	r0, #34360	; 0x8638
  125c8c:	e3400014 	movt	r0, #20
  125c90:	ebff9516 	bl	10b0f0 <sys_arch_assert>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  125c94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c98:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125c9c:	e3530000 	cmp	r3, #0
  125ca0:	1a000003 	bne	125cb4 <tcp_enqueue_flags+0x28c>
    pcb->unsent = seg;
  125ca4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ca8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  125cac:	e583206c 	str	r2, [r3, #108]	; 0x6c
  125cb0:	ea00000d 	b	125cec <tcp_enqueue_flags+0x2c4>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  125cb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125cb8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125cbc:	e50b300c 	str	r3, [fp, #-12]
  125cc0:	ea000002 	b	125cd0 <tcp_enqueue_flags+0x2a8>
  125cc4:	e51b300c 	ldr	r3, [fp, #-12]
  125cc8:	e5933000 	ldr	r3, [r3]
  125ccc:	e50b300c 	str	r3, [fp, #-12]
  125cd0:	e51b300c 	ldr	r3, [fp, #-12]
  125cd4:	e5933000 	ldr	r3, [r3]
  125cd8:	e3530000 	cmp	r3, #0
  125cdc:	1afffff8 	bne	125cc4 <tcp_enqueue_flags+0x29c>
    useg->next = seg;
  125ce0:	e51b300c 	ldr	r3, [fp, #-12]
  125ce4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  125ce8:	e5832000 	str	r2, [r3]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  125cec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125cf0:	e3a02000 	mov	r2, #0
  125cf4:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  125cf8:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125cfc:	e2033002 	and	r3, r3, #2
  125d00:	e3530000 	cmp	r3, #0
  125d04:	1a000003 	bne	125d18 <tcp_enqueue_flags+0x2f0>
  125d08:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125d0c:	e2033001 	and	r3, r3, #1
  125d10:	e3530000 	cmp	r3, #0
  125d14:	0a000004 	beq	125d2c <tcp_enqueue_flags+0x304>
    pcb->snd_lbb++;
  125d18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d1c:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
  125d20:	e2832001 	add	r2, r3, #1
  125d24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d28:	e583205c 	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
  125d2c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125d30:	e2033001 	and	r3, r3, #1
  125d34:	e3530000 	cmp	r3, #0
  125d38:	0a000005 	beq	125d54 <tcp_enqueue_flags+0x32c>
    pcb->flags |= TF_FIN;
  125d3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d40:	e5d3301e 	ldrb	r3, [r3, #30]
  125d44:	e3833020 	orr	r3, r3, #32
  125d48:	e6ef2073 	uxtb	r2, r3
  125d4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d50:	e5c3201e 	strb	r2, [r3, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  125d54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125d58:	e5933004 	ldr	r3, [r3, #4]
  125d5c:	e1a00003 	mov	r0, r3
  125d60:	ebffd4da 	bl	11b0d0 <pbuf_clen>
  125d64:	e1a03000 	mov	r3, r0
  125d68:	e1a02003 	mov	r2, r3
  125d6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d70:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125d74:	e0823003 	add	r3, r2, r3
  125d78:	e6ff2073 	uxth	r2, r3
  125d7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d80:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  125d84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d88:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125d8c:	e3530000 	cmp	r3, #0
  125d90:	0a00000e 	beq	125dd0 <tcp_enqueue_flags+0x3a8>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
  125d94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d98:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125d9c:	e3530000 	cmp	r3, #0
  125da0:	1a00000a 	bne	125dd0 <tcp_enqueue_flags+0x3a8>
  125da4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125da8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125dac:	e3530000 	cmp	r3, #0
  125db0:	1a000006 	bne	125dd0 <tcp_enqueue_flags+0x3a8>
  125db4:	e30809b8 	movw	r0, #35256	; 0x89b8
  125db8:	e3400014 	movt	r0, #20
  125dbc:	ebff74d4 	bl	103114 <rt_kprintf>
  125dc0:	e300136d 	movw	r1, #877	; 0x36d
  125dc4:	e3080638 	movw	r0, #34360	; 0x8638
  125dc8:	e3400014 	movt	r0, #20
  125dcc:	ebff94c7 	bl	10b0f0 <sys_arch_assert>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  125dd0:	e3a03000 	mov	r3, #0
}
  125dd4:	e1a00003 	mov	r0, r3
  125dd8:	e24bd004 	sub	sp, fp, #4
  125ddc:	e8bd8800 	pop	{fp, pc}

00125de0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  125de0:	e92d4810 	push	{r4, fp, lr}
  125de4:	e28db008 	add	fp, sp, #8
  125de8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  125dec:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
  125df0:	e3a03000 	mov	r3, #0
  125df4:	e54b300e 	strb	r3, [fp, #-14]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
  125df8:	e55b300e 	ldrb	r3, [fp, #-14]
  125dfc:	e6ff4073 	uxth	r4, r3
  125e00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e04:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  125e08:	e1a00003 	mov	r0, r3
  125e0c:	ebffc1ff 	bl	116610 <lwip_htonl>
  125e10:	e1a03000 	mov	r3, r0
  125e14:	e3a02000 	mov	r2, #0
  125e18:	e1a01004 	mov	r1, r4
  125e1c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125e20:	ebfffa36 	bl	124700 <tcp_output_alloc_header>
  125e24:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (p == NULL) {
  125e28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125e2c:	e3530000 	cmp	r3, #0
  125e30:	1a000007 	bne	125e54 <tcp_send_empty_ack+0x74>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  125e34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e38:	e5d3301e 	ldrb	r3, [r3, #30]
  125e3c:	e3833003 	orr	r3, r3, #3
  125e40:	e6ef2073 	uxtb	r2, r3
  125e44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e48:	e5c3201e 	strb	r2, [r3, #30]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  125e4c:	e3e03001 	mvn	r3, #1
  125e50:	ea000040 	b	125f58 <tcp_send_empty_ack+0x178>
  }
#if LWIP_TCP_TIMESTAMPS || CHECKSUM_GEN_TCP
  tcphdr = (struct tcp_hdr *)p->payload;
  125e54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125e58:	e5933004 	ldr	r3, [r3, #4]
  125e5c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  125e60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e64:	e2833004 	add	r3, r3, #4
  125e68:	e1a00003 	mov	r0, r3
  125e6c:	eb002cc9 	bl	131198 <ip4_route>
  125e70:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (netif == NULL) {
  125e74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125e78:	e3530000 	cmp	r3, #0
  125e7c:	1a000002 	bne	125e8c <tcp_send_empty_ack+0xac>
    err = ERR_RTE;
  125e80:	e3e03003 	mvn	r3, #3
  125e84:	e54b300d 	strb	r3, [fp, #-13]
  125e88:	ea00001f 	b	125f0c <tcp_send_empty_ack+0x12c>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  125e8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125e90:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  125e94:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  125e98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e9c:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  125ea0:	e58d3000 	str	r3, [sp]
  125ea4:	e1a03001 	mov	r3, r1
  125ea8:	e3a01006 	mov	r1, #6
  125eac:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125eb0:	ebffc9e9 	bl	11865c <ip_chksum_pseudo>
  125eb4:	e1a03000 	mov	r3, r0
  125eb8:	e1a02003 	mov	r2, r3
  125ebc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125ec0:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
  125ec4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  125ec8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ecc:	e2830004 	add	r0, r3, #4
  125ed0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ed4:	e5d3c00a 	ldrb	ip, [r3, #10]
  125ed8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125edc:	e5d33009 	ldrb	r3, [r3, #9]
  125ee0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  125ee4:	e58d2008 	str	r2, [sp, #8]
  125ee8:	e3a02006 	mov	r2, #6
  125eec:	e58d2004 	str	r2, [sp, #4]
  125ef0:	e58d3000 	str	r3, [sp]
  125ef4:	e1a0300c 	mov	r3, ip
  125ef8:	e1a02000 	mov	r2, r0
  125efc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125f00:	eb002f7d 	bl	131cfc <ip4_output_if>
  125f04:	e1a03000 	mov	r3, r0
  125f08:	e54b300d 	strb	r3, [fp, #-13]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  125f0c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125f10:	ebffd3e9 	bl	11aebc <pbuf_free>

  if (err != ERR_OK) {
  125f14:	e15b30dd 	ldrsb	r3, [fp, #-13]
  125f18:	e3530000 	cmp	r3, #0
  125f1c:	0a000006 	beq	125f3c <tcp_send_empty_ack+0x15c>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  125f20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f24:	e5d3301e 	ldrb	r3, [r3, #30]
  125f28:	e3833003 	orr	r3, r3, #3
  125f2c:	e6ef2073 	uxtb	r2, r3
  125f30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f34:	e5c3201e 	strb	r2, [r3, #30]
  125f38:	ea000005 	b	125f54 <tcp_send_empty_ack+0x174>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  125f3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f40:	e5d3301e 	ldrb	r3, [r3, #30]
  125f44:	e3c33003 	bic	r3, r3, #3
  125f48:	e6ef2073 	uxtb	r2, r3
  125f4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f50:	e5c3201e 	strb	r2, [r3, #30]
  }

  return err;
  125f54:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  125f58:	e1a00003 	mov	r0, r3
  125f5c:	e24bd008 	sub	sp, fp, #8
  125f60:	e8bd8810 	pop	{r4, fp, pc}

00125f64 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
  125f64:	e92d4830 	push	{r4, r5, fp, lr}
  125f68:	e28db00c 	add	fp, sp, #12
  125f6c:	e24dd028 	sub	sp, sp, #40	; 0x28
  125f70:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
  125f74:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f78:	e5933014 	ldr	r3, [r3, #20]
  125f7c:	e3530001 	cmp	r3, #1
  125f80:	1a000006 	bne	125fa0 <tcp_output+0x3c>
  125f84:	e30809e0 	movw	r0, #35296	; 0x89e0
  125f88:	e3400014 	movt	r0, #20
  125f8c:	ebff7460 	bl	103114 <rt_kprintf>
  125f90:	e30013ed 	movw	r1, #1005	; 0x3ed
  125f94:	e3080638 	movw	r0, #34360	; 0x8638
  125f98:	e3400014 	movt	r0, #20
  125f9c:	ebff9453 	bl	10b0f0 <sys_arch_assert>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  125fa0:	e30e3c18 	movw	r3, #60440	; 0xec18
  125fa4:	e3403056 	movt	r3, #86	; 0x56
  125fa8:	e5933000 	ldr	r3, [r3]
  125fac:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  125fb0:	e1520003 	cmp	r2, r3
  125fb4:	1a000001 	bne	125fc0 <tcp_output+0x5c>
    return ERR_OK;
  125fb8:	e3a03000 	mov	r3, #0
  125fbc:	ea000196 	b	12661c <tcp_output+0x6b8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  125fc0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fc4:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  125fc8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fcc:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  125fd0:	e1520003 	cmp	r2, r3
  125fd4:	2a000002 	bcs	125fe4 <tcp_output+0x80>
  125fd8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fdc:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  125fe0:	ea000001 	b	125fec <tcp_output+0x88>
  125fe4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fe8:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  125fec:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  seg = pcb->unsent;
  125ff0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ff4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125ff8:	e50b3010 	str	r3, [fp, #-16]
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  125ffc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126000:	e5d3301e 	ldrb	r3, [r3, #30]
  126004:	e2033002 	and	r3, r3, #2
  126008:	e3530000 	cmp	r3, #0
  12600c:	0a000015 	beq	126068 <tcp_output+0x104>
  126010:	e51b3010 	ldr	r3, [fp, #-16]
  126014:	e3530000 	cmp	r3, #0
  126018:	0a00000e 	beq	126058 <tcp_output+0xf4>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  12601c:	e51b3010 	ldr	r3, [fp, #-16]
  126020:	e593300c 	ldr	r3, [r3, #12]
  126024:	e5933004 	ldr	r3, [r3, #4]
  126028:	e1a00003 	mov	r0, r3
  12602c:	ebffc177 	bl	116610 <lwip_htonl>
  126030:	e1a02000 	mov	r2, r0
  126034:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126038:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  12603c:	e0423003 	sub	r3, r2, r3
  126040:	e51b2010 	ldr	r2, [fp, #-16]
  126044:	e1d220b8 	ldrh	r2, [r2, #8]
  126048:	e0833002 	add	r3, r3, r2
     (seg == NULL ||
  12604c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  126050:	e1520003 	cmp	r2, r3
  126054:	2a000003 	bcs	126068 <tcp_output+0x104>
     return tcp_send_empty_ack(pcb);
  126058:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12605c:	ebffff5f 	bl	125de0 <tcp_send_empty_ack>
  126060:	e1a03000 	mov	r3, r0
  126064:	ea00016c 	b	12661c <tcp_output+0x6b8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  126068:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12606c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126070:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (useg != NULL) {
  126074:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126078:	e3530000 	cmp	r3, #0
  12607c:	0a000007 	beq	1260a0 <tcp_output+0x13c>
    for (; useg->next != NULL; useg = useg->next);
  126080:	ea000002 	b	126090 <tcp_output+0x12c>
  126084:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126088:	e5933000 	ldr	r3, [r3]
  12608c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  126090:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126094:	e5933000 	ldr	r3, [r3]
  126098:	e3530000 	cmp	r3, #0
  12609c:	1afffff8 	bne	126084 <tcp_output+0x120>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  1260a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1260a4:	e2833004 	add	r3, r3, #4
  1260a8:	e1a00003 	mov	r0, r3
  1260ac:	eb002c39 	bl	131198 <ip4_route>
  1260b0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (netif == NULL) {
  1260b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1260b8:	e3530000 	cmp	r3, #0
  1260bc:	1a000001 	bne	1260c8 <tcp_output+0x164>
    return ERR_RTE;
  1260c0:	e3e03003 	mvn	r3, #3
  1260c4:	ea000154 	b	12661c <tcp_output+0x6b8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
  1260c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1260cc:	e3530000 	cmp	r3, #0
  1260d0:	0a000003 	beq	1260e4 <tcp_output+0x180>
  1260d4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1260d8:	e5933000 	ldr	r3, [r3]
  1260dc:	e3530000 	cmp	r3, #0
  1260e0:	1a000010 	bne	126128 <tcp_output+0x1c4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
  1260e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1260e8:	e3530000 	cmp	r3, #0
  1260ec:	0a000002 	beq	1260fc <tcp_output+0x198>
  1260f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1260f4:	e2833004 	add	r3, r3, #4
  1260f8:	ea000000 	b	126100 <tcp_output+0x19c>
  1260fc:	e3a03000 	mov	r3, #0
  126100:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (local_ip == NULL) {
  126104:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126108:	e3530000 	cmp	r3, #0
  12610c:	1a000001 	bne	126118 <tcp_output+0x1b4>
      return ERR_RTE;
  126110:	e3e03003 	mvn	r3, #3
  126114:	ea000140 	b	12661c <tcp_output+0x6b8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
  126118:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12611c:	e5932000 	ldr	r2, [r3]
  126120:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126124:	e5832000 	str	r2, [r3]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
  126128:	e51b3010 	ldr	r3, [fp, #-16]
  12612c:	e3530000 	cmp	r3, #0
  126130:	0a000113 	beq	126584 <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  126134:	e51b3010 	ldr	r3, [fp, #-16]
  126138:	e593300c 	ldr	r3, [r3, #12]
  12613c:	e5933004 	ldr	r3, [r3, #4]
  126140:	e1a00003 	mov	r0, r3
  126144:	ebffc131 	bl	116610 <lwip_htonl>
  126148:	e1a02000 	mov	r2, r0
  12614c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126150:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  126154:	e0423003 	sub	r3, r2, r3
  126158:	e51b2010 	ldr	r2, [fp, #-16]
  12615c:	e1d220b8 	ldrh	r2, [r2, #8]
  126160:	e0833002 	add	r3, r3, r2
  if (seg != NULL &&
  126164:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  126168:	e1520003 	cmp	r2, r3
  12616c:	2a000104 	bcs	126584 <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  126170:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126174:	e3530000 	cmp	r3, #0
  126178:	0a000101 	beq	126584 <tcp_output+0x620>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
  12617c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126180:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126184:	e1a02003 	mov	r2, r3
  126188:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12618c:	e1530002 	cmp	r3, r2
  126190:	1a0000fb 	bne	126584 <tcp_output+0x620>
  126194:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126198:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12619c:	e3530000 	cmp	r3, #0
  1261a0:	1a0000f7 	bne	126584 <tcp_output+0x620>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
  1261a4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261a8:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  1261ac:	e3530000 	cmp	r3, #0
  1261b0:	1a000106 	bne	1265d0 <tcp_output+0x66c>
      pcb->persist_cnt = 0;
  1261b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261b8:	e3a02000 	mov	r2, #0
  1261bc:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
      pcb->persist_backoff = 1;
  1261c0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261c4:	e3a02001 	mov	r2, #1
  1261c8:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
    }
    goto output_done;
  1261cc:	ea0000ff 	b	1265d0 <tcp_output+0x66c>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
  1261d0:	e51b3010 	ldr	r3, [fp, #-16]
  1261d4:	e593300c 	ldr	r3, [r3, #12]
  1261d8:	e1d330bc 	ldrh	r3, [r3, #12]
  1261dc:	e6ff3073 	uxth	r3, r3
  1261e0:	e1a00003 	mov	r0, r3
  1261e4:	ebffc0fd 	bl	1165e0 <lwip_htons>
  1261e8:	e1a03000 	mov	r3, r0
  1261ec:	e2033004 	and	r3, r3, #4
  1261f0:	e3530000 	cmp	r3, #0
  1261f4:	0a000006 	beq	126214 <tcp_output+0x2b0>
  1261f8:	e3080a08 	movw	r0, #35336	; 0x8a08
  1261fc:	e3400014 	movt	r0, #20
  126200:	ebff73c3 	bl	103114 <rt_kprintf>
  126204:	e3001446 	movw	r1, #1094	; 0x446
  126208:	e3080638 	movw	r0, #34360	; 0x8638
  12620c:	e3400014 	movt	r0, #20
  126210:	ebff93b6 	bl	10b0f0 <sys_arch_assert>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
  126214:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126218:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12621c:	e3530000 	cmp	r3, #0
  126220:	0a00001c 	beq	126298 <tcp_output+0x334>
  126224:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126228:	e5d3301e 	ldrb	r3, [r3, #30]
  12622c:	e2033044 	and	r3, r3, #68	; 0x44
  126230:	e3530000 	cmp	r3, #0
  126234:	1a000017 	bne	126298 <tcp_output+0x334>
  126238:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12623c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126240:	e3530000 	cmp	r3, #0
  126244:	0a00000b 	beq	126278 <tcp_output+0x314>
  126248:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12624c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126250:	e5933000 	ldr	r3, [r3]
  126254:	e3530000 	cmp	r3, #0
  126258:	1a00000e 	bne	126298 <tcp_output+0x334>
  12625c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126260:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126264:	e1d320b8 	ldrh	r2, [r3, #8]
  126268:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12626c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126270:	e1520003 	cmp	r2, r3
  126274:	2a000007 	bcs	126298 <tcp_output+0x334>
  126278:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12627c:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  126280:	e3530000 	cmp	r3, #0
  126284:	0a000003 	beq	126298 <tcp_output+0x334>
  126288:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12628c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  126290:	e35300b2 	cmp	r3, #178	; 0xb2
  126294:	9a000001 	bls	1262a0 <tcp_output+0x33c>
  126298:	e3a03001 	mov	r3, #1
  12629c:	ea000000 	b	1262a4 <tcp_output+0x340>
  1262a0:	e3a03000 	mov	r3, #0
  1262a4:	e3530000 	cmp	r3, #0
  1262a8:	1a000004 	bne	1262c0 <tcp_output+0x35c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
  1262ac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1262b0:	e5d3301e 	ldrb	r3, [r3, #30]
  1262b4:	e20330a0 	and	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
  1262b8:	e3530000 	cmp	r3, #0
  1262bc:	0a0000c5 	beq	1265d8 <tcp_output+0x674>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
  1262c0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1262c4:	e5933014 	ldr	r3, [r3, #20]
  1262c8:	e3530002 	cmp	r3, #2
  1262cc:	0a00000c 	beq	126304 <tcp_output+0x3a0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  1262d0:	e51b3010 	ldr	r3, [fp, #-16]
  1262d4:	e593300c 	ldr	r3, [r3, #12]
  1262d8:	e1d330bc 	ldrh	r3, [r3, #12]
  1262dc:	e6ff4073 	uxth	r4, r3
  1262e0:	e3a00010 	mov	r0, #16
  1262e4:	ebffc0bd 	bl	1165e0 <lwip_htons>
  1262e8:	e1a03000 	mov	r3, r0
  1262ec:	e1a02003 	mov	r2, r3
  1262f0:	e51b3010 	ldr	r3, [fp, #-16]
  1262f4:	e593300c 	ldr	r3, [r3, #12]
  1262f8:	e1842002 	orr	r2, r4, r2
  1262fc:	e6ff2072 	uxth	r2, r2
  126300:	e1c320bc 	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
  126304:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  126308:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  12630c:	e51b0010 	ldr	r0, [fp, #-16]
  126310:	eb0000c4 	bl	126628 <tcp_output_segment>
  126314:	e1a03000 	mov	r3, r0
  126318:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    if (err != ERR_OK) {
  12631c:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  126320:	e3530000 	cmp	r3, #0
  126324:	0a000008 	beq	12634c <tcp_output+0x3e8>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
  126328:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12632c:	e5d3301e 	ldrb	r3, [r3, #30]
  126330:	e1e03c83 	mvn	r3, r3, lsl #25
  126334:	e1e03ca3 	mvn	r3, r3, lsr #25
  126338:	e6ef2073 	uxtb	r2, r3
  12633c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126340:	e5c3201e 	strb	r2, [r3, #30]
      return err;
  126344:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  126348:	ea0000b3 	b	12661c <tcp_output+0x6b8>
    }
    pcb->unsent = seg->next;
  12634c:	e51b3010 	ldr	r3, [fp, #-16]
  126350:	e5932000 	ldr	r2, [r3]
  126354:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126358:	e583206c 	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
  12635c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126360:	e5933014 	ldr	r3, [r3, #20]
  126364:	e3530002 	cmp	r3, #2
  126368:	0a000005 	beq	126384 <tcp_output+0x420>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  12636c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126370:	e5d3301e 	ldrb	r3, [r3, #30]
  126374:	e3c33003 	bic	r3, r3, #3
  126378:	e6ef2073 	uxtb	r2, r3
  12637c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126380:	e5c3201e 	strb	r2, [r3, #30]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  126384:	e51b3010 	ldr	r3, [fp, #-16]
  126388:	e593300c 	ldr	r3, [r3, #12]
  12638c:	e5933004 	ldr	r3, [r3, #4]
  126390:	e1a00003 	mov	r0, r3
  126394:	ebffc09d 	bl	116610 <lwip_htonl>
  126398:	e1a04000 	mov	r4, r0
  12639c:	e51b3010 	ldr	r3, [fp, #-16]
  1263a0:	e1d330b8 	ldrh	r3, [r3, #8]
  1263a4:	e1a05003 	mov	r5, r3
  1263a8:	e51b3010 	ldr	r3, [fp, #-16]
  1263ac:	e593300c 	ldr	r3, [r3, #12]
  1263b0:	e1d330bc 	ldrh	r3, [r3, #12]
  1263b4:	e6ff3073 	uxth	r3, r3
  1263b8:	e1a00003 	mov	r0, r3
  1263bc:	ebffc087 	bl	1165e0 <lwip_htons>
  1263c0:	e1a03000 	mov	r3, r0
  1263c4:	e2033003 	and	r3, r3, #3
  1263c8:	e3530000 	cmp	r3, #0
  1263cc:	0a000001 	beq	1263d8 <tcp_output+0x474>
  1263d0:	e3a03001 	mov	r3, #1
  1263d4:	ea000000 	b	1263dc <tcp_output+0x478>
  1263d8:	e3a03000 	mov	r3, #0
  1263dc:	e0833005 	add	r3, r3, r5
  1263e0:	e0843003 	add	r3, r4, r3
  1263e4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  1263e8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1263ec:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1263f0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1263f4:	e0423003 	sub	r3, r2, r3
  1263f8:	e3530000 	cmp	r3, #0
  1263fc:	aa000002 	bge	12640c <tcp_output+0x4a8>
      pcb->snd_nxt = snd_nxt;
  126400:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126404:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  126408:	e5832050 	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
  12640c:	e51b3010 	ldr	r3, [fp, #-16]
  126410:	e1d330b8 	ldrh	r3, [r3, #8]
  126414:	e1a04003 	mov	r4, r3
  126418:	e51b3010 	ldr	r3, [fp, #-16]
  12641c:	e593300c 	ldr	r3, [r3, #12]
  126420:	e1d330bc 	ldrh	r3, [r3, #12]
  126424:	e6ff3073 	uxth	r3, r3
  126428:	e1a00003 	mov	r0, r3
  12642c:	ebffc06b 	bl	1165e0 <lwip_htons>
  126430:	e1a03000 	mov	r3, r0
  126434:	e2033003 	and	r3, r3, #3
  126438:	e3530000 	cmp	r3, #0
  12643c:	0a000001 	beq	126448 <tcp_output+0x4e4>
  126440:	e3a03001 	mov	r3, #1
  126444:	ea000000 	b	12644c <tcp_output+0x4e8>
  126448:	e3a03000 	mov	r3, #0
  12644c:	e0833004 	add	r3, r3, r4
  126450:	e3530000 	cmp	r3, #0
  126454:	0a000045 	beq	126570 <tcp_output+0x60c>
      seg->next = NULL;
  126458:	e51b3010 	ldr	r3, [fp, #-16]
  12645c:	e3a02000 	mov	r2, #0
  126460:	e5832000 	str	r2, [r3]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
  126464:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126468:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12646c:	e3530000 	cmp	r3, #0
  126470:	1a000005 	bne	12648c <tcp_output+0x528>
        pcb->unacked = seg;
  126474:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126478:	e51b2010 	ldr	r2, [fp, #-16]
  12647c:	e5832070 	str	r2, [r3, #112]	; 0x70
        useg = seg;
  126480:	e51b3010 	ldr	r3, [fp, #-16]
  126484:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  126488:	ea00003a 	b	126578 <tcp_output+0x614>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
  12648c:	e51b3010 	ldr	r3, [fp, #-16]
  126490:	e593300c 	ldr	r3, [r3, #12]
  126494:	e5933004 	ldr	r3, [r3, #4]
  126498:	e1a00003 	mov	r0, r3
  12649c:	ebffc05b 	bl	116610 <lwip_htonl>
  1264a0:	e1a04000 	mov	r4, r0
  1264a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1264a8:	e593300c 	ldr	r3, [r3, #12]
  1264ac:	e5933004 	ldr	r3, [r3, #4]
  1264b0:	e1a00003 	mov	r0, r3
  1264b4:	ebffc055 	bl	116610 <lwip_htonl>
  1264b8:	e1a03000 	mov	r3, r0
  1264bc:	e0443003 	sub	r3, r4, r3
  1264c0:	e3530000 	cmp	r3, #0
  1264c4:	aa000022 	bge	126554 <tcp_output+0x5f0>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
  1264c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1264cc:	e2833070 	add	r3, r3, #112	; 0x70
  1264d0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  1264d4:	ea000002 	b	1264e4 <tcp_output+0x580>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
  1264d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1264dc:	e5933000 	ldr	r3, [r3]
  1264e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  1264e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1264e8:	e5933000 	ldr	r3, [r3]
  1264ec:	e3530000 	cmp	r3, #0
  1264f0:	0a00000f 	beq	126534 <tcp_output+0x5d0>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  1264f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1264f8:	e5933000 	ldr	r3, [r3]
  1264fc:	e593300c 	ldr	r3, [r3, #12]
  126500:	e5933004 	ldr	r3, [r3, #4]
  126504:	e1a00003 	mov	r0, r3
  126508:	ebffc040 	bl	116610 <lwip_htonl>
  12650c:	e1a04000 	mov	r4, r0
  126510:	e51b3010 	ldr	r3, [fp, #-16]
  126514:	e593300c 	ldr	r3, [r3, #12]
  126518:	e5933004 	ldr	r3, [r3, #4]
  12651c:	e1a00003 	mov	r0, r3
  126520:	ebffc03a 	bl	116610 <lwip_htonl>
  126524:	e1a03000 	mov	r3, r0
  126528:	e0443003 	sub	r3, r4, r3
          while (*cur_seg &&
  12652c:	e3530000 	cmp	r3, #0
  126530:	baffffe8 	blt	1264d8 <tcp_output+0x574>
          }
          seg->next = (*cur_seg);
  126534:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126538:	e5932000 	ldr	r2, [r3]
  12653c:	e51b3010 	ldr	r3, [fp, #-16]
  126540:	e5832000 	str	r2, [r3]
          (*cur_seg) = seg;
  126544:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126548:	e51b2010 	ldr	r2, [fp, #-16]
  12654c:	e5832000 	str	r2, [r3]
  126550:	ea000008 	b	126578 <tcp_output+0x614>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
  126554:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126558:	e51b2010 	ldr	r2, [fp, #-16]
  12655c:	e5832000 	str	r2, [r3]
          useg = useg->next;
  126560:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126564:	e5933000 	ldr	r3, [r3]
  126568:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12656c:	ea000001 	b	126578 <tcp_output+0x614>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
  126570:	e51b0010 	ldr	r0, [fp, #-16]
  126574:	ebffe3c2 	bl	11f484 <tcp_seg_free>
    }
    seg = pcb->unsent;
  126578:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12657c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126580:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL &&
  126584:	e51b3010 	ldr	r3, [fp, #-16]
  126588:	e3530000 	cmp	r3, #0
  12658c:	0a000013 	beq	1265e0 <tcp_output+0x67c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  126590:	e51b3010 	ldr	r3, [fp, #-16]
  126594:	e593300c 	ldr	r3, [r3, #12]
  126598:	e5933004 	ldr	r3, [r3, #4]
  12659c:	e1a00003 	mov	r0, r3
  1265a0:	ebffc01a 	bl	116610 <lwip_htonl>
  1265a4:	e1a02000 	mov	r2, r0
  1265a8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1265ac:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  1265b0:	e0423003 	sub	r3, r2, r3
  1265b4:	e51b2010 	ldr	r2, [fp, #-16]
  1265b8:	e1d220b8 	ldrh	r2, [r2, #8]
  1265bc:	e0833002 	add	r3, r3, r2
  while (seg != NULL &&
  1265c0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1265c4:	e1520003 	cmp	r2, r3
  1265c8:	2affff00 	bcs	1261d0 <tcp_output+0x26c>
  }
output_done:
  1265cc:	ea000003 	b	1265e0 <tcp_output+0x67c>
    goto output_done;
  1265d0:	e320f000 	nop	{0}
  1265d4:	ea000002 	b	1265e4 <tcp_output+0x680>
      break;
  1265d8:	e320f000 	nop	{0}
  1265dc:	ea000000 	b	1265e4 <tcp_output+0x680>
output_done:
  1265e0:	e320f000 	nop	{0}
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
  1265e4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1265e8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1265ec:	e3530000 	cmp	r3, #0
  1265f0:	1a000002 	bne	126600 <tcp_output+0x69c>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  1265f4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1265f8:	e3a02000 	mov	r2, #0
  1265fc:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  126600:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126604:	e5d3301e 	ldrb	r3, [r3, #30]
  126608:	e203307f 	and	r3, r3, #127	; 0x7f
  12660c:	e6ef2073 	uxtb	r2, r3
  126610:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126614:	e5c3201e 	strb	r2, [r3, #30]
  return ERR_OK;
  126618:	e3a03000 	mov	r3, #0
}
  12661c:	e1a00003 	mov	r0, r3
  126620:	e24bd00c 	sub	sp, fp, #12
  126624:	e8bd8830 	pop	{r4, r5, fp, pc}

00126628 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
  126628:	e92d4810 	push	{r4, fp, lr}
  12662c:	e28db008 	add	fp, sp, #8
  126630:	e24dd034 	sub	sp, sp, #52	; 0x34
  126634:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  126638:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  12663c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
  126640:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126644:	e5933004 	ldr	r3, [r3, #4]
  126648:	e1d330be 	ldrh	r3, [r3, #14]
  12664c:	e3530001 	cmp	r3, #1
  126650:	0a000001 	beq	12665c <tcp_output_segment+0x34>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
  126654:	e3a03000 	mov	r3, #0
  126658:	ea0000a4 	b	1268f0 <tcp_output_segment+0x2c8>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  12665c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126660:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  126664:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126668:	e593400c 	ldr	r4, [r3, #12]
  12666c:	e1a00002 	mov	r0, r2
  126670:	ebffbfe6 	bl	116610 <lwip_htonl>
  126674:	e1a03000 	mov	r3, r0
  126678:	e5843008 	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  12667c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126680:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  126684:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126688:	e593400c 	ldr	r4, [r3, #12]
  12668c:	e1a00002 	mov	r0, r2
  126690:	ebffbfd2 	bl	1165e0 <lwip_htons>
  126694:	e1a03000 	mov	r3, r0
  126698:	e1c430be 	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  12669c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1266a0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1266a4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1266a8:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  1266ac:	e0832002 	add	r2, r3, r2
  1266b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1266b4:	e5832030 	str	r2, [r3, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  1266b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1266bc:	e593300c 	ldr	r3, [r3, #12]
  1266c0:	e2833014 	add	r3, r3, #20
  1266c4:	e50b3010 	str	r3, [fp, #-16]
  if (seg->flags & TF_SEG_OPTS_MSS) {
  1266c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1266cc:	e5d3300a 	ldrb	r3, [r3, #10]
  1266d0:	e2033001 	and	r3, r3, #1
  1266d4:	e3530000 	cmp	r3, #0
  1266d8:	0a000010 	beq	126720 <tcp_output_segment+0xf8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
  1266dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1266e0:	e2833004 	add	r3, r3, #4
  1266e4:	e1a01003 	mov	r1, r3
  1266e8:	e30005b4 	movw	r0, #1460	; 0x5b4
  1266ec:	ebffe664 	bl	120084 <tcp_eff_send_mss_impl>
  1266f0:	e1a03000 	mov	r3, r0
  1266f4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
  1266f8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1266fc:	e3833781 	orr	r3, r3, #33816576	; 0x2040000
  126700:	e1a00003 	mov	r0, r3
  126704:	ebffbfc1 	bl	116610 <lwip_htonl>
  126708:	e1a02000 	mov	r2, r0
  12670c:	e51b3010 	ldr	r3, [fp, #-16]
  126710:	e5832000 	str	r2, [r3]
    opts += 1;
  126714:	e51b3010 	ldr	r3, [fp, #-16]
  126718:	e2833004 	add	r3, r3, #4
  12671c:	e50b3010 	str	r3, [fp, #-16]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
  126720:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126724:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  126728:	e3530000 	cmp	r3, #0
  12672c:	aa000002 	bge	12673c <tcp_output_segment+0x114>
    pcb->rtime = 0;
  126730:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126734:	e3a02000 	mov	r2, #0
  126738:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }

  if (pcb->rttest == 0) {
  12673c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126740:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  126744:	e3530000 	cmp	r3, #0
  126748:	1a00000c 	bne	126780 <tcp_output_segment+0x158>
    pcb->rttest = tcp_ticks;
  12674c:	e30e3c08 	movw	r3, #60424	; 0xec08
  126750:	e3403056 	movt	r3, #86	; 0x56
  126754:	e5932000 	ldr	r2, [r3]
  126758:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12675c:	e5832038 	str	r2, [r3, #56]	; 0x38
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
  126760:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126764:	e593300c 	ldr	r3, [r3, #12]
  126768:	e5933004 	ldr	r3, [r3, #4]
  12676c:	e1a00003 	mov	r0, r3
  126770:	ebffbfa6 	bl	116610 <lwip_htonl>
  126774:	e1a02000 	mov	r2, r0
  126778:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12677c:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  126780:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126784:	e593300c 	ldr	r3, [r3, #12]
  126788:	e1a02003 	mov	r2, r3
  12678c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126790:	e5933004 	ldr	r3, [r3, #4]
  126794:	e5933004 	ldr	r3, [r3, #4]
  126798:	e0423003 	sub	r3, r2, r3
  12679c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  if (len == 0) {
  1267a0:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  1267a4:	e3530000 	cmp	r3, #0
  1267a8:	1a000006 	bne	1267c8 <tcp_output_segment+0x1a0>
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  1267ac:	e30e3a14 	movw	r3, #59924	; 0xea14
  1267b0:	e3403056 	movt	r3, #86	; 0x56
  1267b4:	e593317c 	ldr	r3, [r3, #380]	; 0x17c
  1267b8:	e2832001 	add	r2, r3, #1
  1267bc:	e30e3a14 	movw	r3, #59924	; 0xea14
  1267c0:	e3403056 	movt	r3, #86	; 0x56
  1267c4:	e583217c 	str	r2, [r3, #380]	; 0x17c
  }

  seg->p->len -= len;
  1267c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267cc:	e5933004 	ldr	r3, [r3, #4]
  1267d0:	e1d310ba 	ldrh	r1, [r3, #10]
  1267d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267d8:	e5933004 	ldr	r3, [r3, #4]
  1267dc:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  1267e0:	e0412002 	sub	r2, r1, r2
  1267e4:	e6ff2072 	uxth	r2, r2
  1267e8:	e1c320ba 	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
  1267ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267f0:	e5933004 	ldr	r3, [r3, #4]
  1267f4:	e1d310b8 	ldrh	r1, [r3, #8]
  1267f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267fc:	e5933004 	ldr	r3, [r3, #4]
  126800:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  126804:	e0412002 	sub	r2, r1, r2
  126808:	e6ff2072 	uxth	r2, r2
  12680c:	e1c320b8 	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
  126810:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126814:	e5933004 	ldr	r3, [r3, #4]
  126818:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12681c:	e592200c 	ldr	r2, [r2, #12]
  126820:	e5832004 	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  126824:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126828:	e593300c 	ldr	r3, [r3, #12]
  12682c:	e3a02000 	mov	r2, #0
  126830:	e5c32010 	strb	r2, [r3, #16]
  126834:	e3a02000 	mov	r2, #0
  126838:	e5c32011 	strb	r2, [r3, #17]
                  seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  12683c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126840:	e5930004 	ldr	r0, [r3, #4]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  126844:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126848:	e5933004 	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  12684c:	e1d310b8 	ldrh	r1, [r3, #8]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  126850:	e51bc024 	ldr	ip, [fp, #-36]	; 0xffffffdc
  126854:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126858:	e2833004 	add	r3, r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  12685c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  126860:	e592400c 	ldr	r4, [r2, #12]
  126864:	e58d3000 	str	r3, [sp]
  126868:	e1a0300c 	mov	r3, ip
  12686c:	e1a02001 	mov	r2, r1
  126870:	e3a01006 	mov	r1, #6
  126874:	ebffc778 	bl	11865c <ip_chksum_pseudo>
  126878:	e1a03000 	mov	r3, r0
  12687c:	e1c431b0 	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
  126880:	e30e3a14 	movw	r3, #59924	; 0xea14
  126884:	e3403056 	movt	r3, #86	; 0x56
  126888:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  12688c:	e2833001 	add	r3, r3, #1
  126890:	e6ff2073 	uxth	r2, r3
  126894:	e30e3a14 	movw	r3, #59924	; 0xea14
  126898:	e3403056 	movt	r3, #86	; 0x56
  12689c:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  1268a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1268a4:	e5930004 	ldr	r0, [r3, #4]
  1268a8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1268ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1268b0:	e283c004 	add	ip, r3, #4
  1268b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1268b8:	e5d3e00a 	ldrb	lr, [r3, #10]
  1268bc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1268c0:	e5d33009 	ldrb	r3, [r3, #9]
  1268c4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1268c8:	e58d2008 	str	r2, [sp, #8]
  1268cc:	e3a02006 	mov	r2, #6
  1268d0:	e58d2004 	str	r2, [sp, #4]
  1268d4:	e58d3000 	str	r3, [sp]
  1268d8:	e1a0300e 	mov	r3, lr
  1268dc:	e1a0200c 	mov	r2, ip
  1268e0:	eb002d05 	bl	131cfc <ip4_output_if>
  1268e4:	e1a03000 	mov	r3, r0
  1268e8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
  1268ec:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  1268f0:	e1a00003 	mov	r0, r3
  1268f4:	e24bd008 	sub	sp, fp, #8
  1268f8:	e8bd8810 	pop	{r4, fp, pc}

001268fc <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  1268fc:	e92d4800 	push	{fp, lr}
  126900:	e28db004 	add	fp, sp, #4
  126904:	e24dd030 	sub	sp, sp, #48	; 0x30
  126908:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12690c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  126910:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  126914:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  126918:	e3a02000 	mov	r2, #0
  12691c:	e3a01014 	mov	r1, #20
  126920:	e3a00001 	mov	r0, #1
  126924:	ebffce5d 	bl	11a2a0 <pbuf_alloc>
  126928:	e50b0008 	str	r0, [fp, #-8]
  if (p == NULL) {
  12692c:	e51b3008 	ldr	r3, [fp, #-8]
  126930:	e3530000 	cmp	r3, #0
  126934:	0a000069 	beq	126ae0 <tcp_rst+0x1e4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  126938:	e51b3008 	ldr	r3, [fp, #-8]
  12693c:	e1d330ba 	ldrh	r3, [r3, #10]
  126940:	e3530013 	cmp	r3, #19
  126944:	8a000006 	bhi	126964 <tcp_rst+0x68>
  126948:	e3080608 	movw	r0, #34312	; 0x8608
  12694c:	e3400014 	movt	r0, #20
  126950:	ebff71ef 	bl	103114 <rt_kprintf>
  126954:	e300154d 	movw	r1, #1357	; 0x54d
  126958:	e3080638 	movw	r0, #34360	; 0x8638
  12695c:	e3400014 	movt	r0, #20
  126960:	ebff91e2 	bl	10b0f0 <sys_arch_assert>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  126964:	e51b3008 	ldr	r3, [fp, #-8]
  126968:	e5933004 	ldr	r3, [r3, #4]
  12696c:	e50b300c 	str	r3, [fp, #-12]
  tcphdr->src = lwip_htons(local_port);
  126970:	e1db30b4 	ldrh	r3, [fp, #4]
  126974:	e1a00003 	mov	r0, r3
  126978:	ebffbf18 	bl	1165e0 <lwip_htons>
  12697c:	e1a03000 	mov	r3, r0
  126980:	e1a02003 	mov	r2, r3
  126984:	e51b300c 	ldr	r3, [fp, #-12]
  126988:	e1c320b0 	strh	r2, [r3]
  tcphdr->dest = lwip_htons(remote_port);
  12698c:	e1db30b8 	ldrh	r3, [fp, #8]
  126990:	e1a00003 	mov	r0, r3
  126994:	ebffbf11 	bl	1165e0 <lwip_htons>
  126998:	e1a03000 	mov	r3, r0
  12699c:	e1a02003 	mov	r2, r3
  1269a0:	e51b300c 	ldr	r3, [fp, #-12]
  1269a4:	e1c320b2 	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
  1269a8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1269ac:	ebffbf17 	bl	116610 <lwip_htonl>
  1269b0:	e1a02000 	mov	r2, r0
  1269b4:	e51b300c 	ldr	r3, [fp, #-12]
  1269b8:	e5832004 	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
  1269bc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1269c0:	ebffbf12 	bl	116610 <lwip_htonl>
  1269c4:	e1a02000 	mov	r2, r0
  1269c8:	e51b300c 	ldr	r3, [fp, #-12]
  1269cc:	e5832008 	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  1269d0:	e3050014 	movw	r0, #20500	; 0x5014
  1269d4:	ebffbf01 	bl	1165e0 <lwip_htons>
  1269d8:	e1a03000 	mov	r3, r0
  1269dc:	e1a02003 	mov	r2, r3
  1269e0:	e51b300c 	ldr	r3, [fp, #-12]
  1269e4:	e1c320bc 	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
  1269e8:	e51b300c 	ldr	r3, [fp, #-12]
  1269ec:	e3e02000 	mvn	r2, #0
  1269f0:	e5c3200e 	strb	r2, [r3, #14]
  1269f4:	e3e02000 	mvn	r2, #0
  1269f8:	e5c3200f 	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
  1269fc:	e51b300c 	ldr	r3, [fp, #-12]
  126a00:	e3a02000 	mov	r2, #0
  126a04:	e5c32010 	strb	r2, [r3, #16]
  126a08:	e3a02000 	mov	r2, #0
  126a0c:	e5c32011 	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
  126a10:	e51b300c 	ldr	r3, [fp, #-12]
  126a14:	e3a02000 	mov	r2, #0
  126a18:	e5c32012 	strb	r2, [r3, #18]
  126a1c:	e3a02000 	mov	r2, #0
  126a20:	e5c32013 	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  126a24:	e30e3a14 	movw	r3, #59924	; 0xea14
  126a28:	e3403056 	movt	r3, #86	; 0x56
  126a2c:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126a30:	e2833001 	add	r3, r3, #1
  126a34:	e6ff2073 	uxth	r2, r3
  126a38:	e30e3a14 	movw	r3, #59924	; 0xea14
  126a3c:	e3403056 	movt	r3, #86	; 0x56
  126a40:	e1c32abc 	strh	r2, [r3, #172]	; 0xac
  MIB2_STATS_INC(mib2.tcpoutrsts);
  126a44:	e30e3a14 	movw	r3, #59924	; 0xea14
  126a48:	e3403056 	movt	r3, #86	; 0x56
  126a4c:	e593318c 	ldr	r3, [r3, #396]	; 0x18c
  126a50:	e2832001 	add	r2, r3, #1
  126a54:	e30e3a14 	movw	r3, #59924	; 0xea14
  126a58:	e3403056 	movt	r3, #86	; 0x56
  126a5c:	e583218c 	str	r2, [r3, #396]	; 0x18c

  netif = ip_route(local_ip, remote_ip);
  126a60:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  126a64:	eb0029cb 	bl	131198 <ip4_route>
  126a68:	e50b0010 	str	r0, [fp, #-16]
  if (netif != NULL) {
  126a6c:	e51b3010 	ldr	r3, [fp, #-16]
  126a70:	e3530000 	cmp	r3, #0
  126a74:	0a000016 	beq	126ad4 <tcp_rst+0x1d8>
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126a78:	e51b3008 	ldr	r3, [fp, #-8]
  126a7c:	e1d320b8 	ldrh	r2, [r3, #8]
  126a80:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126a84:	e58d3000 	str	r3, [sp]
  126a88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126a8c:	e3a01006 	mov	r1, #6
  126a90:	e51b0008 	ldr	r0, [fp, #-8]
  126a94:	ebffc6f0 	bl	11865c <ip_chksum_pseudo>
  126a98:	e1a03000 	mov	r3, r0
  126a9c:	e1a02003 	mov	r2, r3
  126aa0:	e51b300c 	ldr	r3, [fp, #-12]
  126aa4:	e1c321b0 	strh	r2, [r3, #16]
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
  126aa8:	e51b3010 	ldr	r3, [fp, #-16]
  126aac:	e58d3008 	str	r3, [sp, #8]
  126ab0:	e3a03006 	mov	r3, #6
  126ab4:	e58d3004 	str	r3, [sp, #4]
  126ab8:	e3a03000 	mov	r3, #0
  126abc:	e58d3000 	str	r3, [sp]
  126ac0:	e3a030ff 	mov	r3, #255	; 0xff
  126ac4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  126ac8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  126acc:	e51b0008 	ldr	r0, [fp, #-8]
  126ad0:	eb002c89 	bl	131cfc <ip4_output_if>
  }
  pbuf_free(p);
  126ad4:	e51b0008 	ldr	r0, [fp, #-8]
  126ad8:	ebffd0f7 	bl	11aebc <pbuf_free>
  126adc:	ea000000 	b	126ae4 <tcp_rst+0x1e8>
    return;
  126ae0:	e320f000 	nop	{0}
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  126ae4:	e24bd004 	sub	sp, fp, #4
  126ae8:	e8bd8800 	pop	{fp, pc}

00126aec <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  126aec:	e92d4800 	push	{fp, lr}
  126af0:	e28db004 	add	fp, sp, #4
  126af4:	e24dd010 	sub	sp, sp, #16
  126af8:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  126afc:	e51b3010 	ldr	r3, [fp, #-16]
  126b00:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126b04:	e3530000 	cmp	r3, #0
  126b08:	0a000025 	beq	126ba4 <tcp_rexmit_rto+0xb8>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  126b0c:	e51b3010 	ldr	r3, [fp, #-16]
  126b10:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126b14:	e50b3008 	str	r3, [fp, #-8]
  126b18:	ea000002 	b	126b28 <tcp_rexmit_rto+0x3c>
  126b1c:	e51b3008 	ldr	r3, [fp, #-8]
  126b20:	e5933000 	ldr	r3, [r3]
  126b24:	e50b3008 	str	r3, [fp, #-8]
  126b28:	e51b3008 	ldr	r3, [fp, #-8]
  126b2c:	e5933000 	ldr	r3, [r3]
  126b30:	e3530000 	cmp	r3, #0
  126b34:	1afffff8 	bne	126b1c <tcp_rexmit_rto+0x30>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  126b38:	e51b3010 	ldr	r3, [fp, #-16]
  126b3c:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  126b40:	e51b3008 	ldr	r3, [fp, #-8]
  126b44:	e5832000 	str	r2, [r3]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  126b48:	e51b3010 	ldr	r3, [fp, #-16]
  126b4c:	e5932070 	ldr	r2, [r3, #112]	; 0x70
  126b50:	e51b3010 	ldr	r3, [fp, #-16]
  126b54:	e583206c 	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  126b58:	e51b3010 	ldr	r3, [fp, #-16]
  126b5c:	e3a02000 	mov	r2, #0
  126b60:	e5832070 	str	r2, [r3, #112]	; 0x70

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
  126b64:	e51b3010 	ldr	r3, [fp, #-16]
  126b68:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126b6c:	e35300ff 	cmp	r3, #255	; 0xff
  126b70:	0a000005 	beq	126b8c <tcp_rexmit_rto+0xa0>
    ++pcb->nrtx;
  126b74:	e51b3010 	ldr	r3, [fp, #-16]
  126b78:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126b7c:	e2833001 	add	r3, r3, #1
  126b80:	e6ef2073 	uxtb	r2, r3
  126b84:	e51b3010 	ldr	r3, [fp, #-16]
  126b88:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  126b8c:	e51b3010 	ldr	r3, [fp, #-16]
  126b90:	e3a02000 	mov	r2, #0
  126b94:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
  126b98:	e51b0010 	ldr	r0, [fp, #-16]
  126b9c:	ebfffcf0 	bl	125f64 <tcp_output>
  126ba0:	ea000000 	b	126ba8 <tcp_rexmit_rto+0xbc>
    return;
  126ba4:	e320f000 	nop	{0}
}
  126ba8:	e24bd004 	sub	sp, fp, #4
  126bac:	e8bd8800 	pop	{fp, pc}

00126bb0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  126bb0:	e92d4810 	push	{r4, fp, lr}
  126bb4:	e28db008 	add	fp, sp, #8
  126bb8:	e24dd014 	sub	sp, sp, #20
  126bbc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  126bc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126bc4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126bc8:	e3530000 	cmp	r3, #0
  126bcc:	0a000044 	beq	126ce4 <tcp_rexmit+0x134>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  126bd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126bd4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126bd8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb->unacked = seg->next;
  126bdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126be0:	e5932000 	ldr	r2, [r3]
  126be4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126be8:	e5832070 	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  126bec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126bf0:	e283306c 	add	r3, r3, #108	; 0x6c
  126bf4:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  126bf8:	ea000002 	b	126c08 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  126bfc:	e51b3010 	ldr	r3, [fp, #-16]
  126c00:	e5933000 	ldr	r3, [r3]
  126c04:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  126c08:	e51b3010 	ldr	r3, [fp, #-16]
  126c0c:	e5933000 	ldr	r3, [r3]
  126c10:	e3530000 	cmp	r3, #0
  126c14:	0a00000f 	beq	126c58 <tcp_rexmit+0xa8>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  126c18:	e51b3010 	ldr	r3, [fp, #-16]
  126c1c:	e5933000 	ldr	r3, [r3]
  126c20:	e593300c 	ldr	r3, [r3, #12]
  126c24:	e5933004 	ldr	r3, [r3, #4]
  126c28:	e1a00003 	mov	r0, r3
  126c2c:	ebffbe77 	bl	116610 <lwip_htonl>
  126c30:	e1a04000 	mov	r4, r0
  126c34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c38:	e593300c 	ldr	r3, [r3, #12]
  126c3c:	e5933004 	ldr	r3, [r3, #4]
  126c40:	e1a00003 	mov	r0, r3
  126c44:	ebffbe71 	bl	116610 <lwip_htonl>
  126c48:	e1a03000 	mov	r3, r0
  126c4c:	e0443003 	sub	r3, r4, r3
  while (*cur_seg &&
  126c50:	e3530000 	cmp	r3, #0
  126c54:	baffffe8 	blt	126bfc <tcp_rexmit+0x4c>
  }
  seg->next = *cur_seg;
  126c58:	e51b3010 	ldr	r3, [fp, #-16]
  126c5c:	e5932000 	ldr	r2, [r3]
  126c60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c64:	e5832000 	str	r2, [r3]
  *cur_seg = seg;
  126c68:	e51b3010 	ldr	r3, [fp, #-16]
  126c6c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  126c70:	e5832000 	str	r2, [r3]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  126c74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c78:	e5933000 	ldr	r3, [r3]
  126c7c:	e3530000 	cmp	r3, #0
  126c80:	1a000002 	bne	126c90 <tcp_rexmit+0xe0>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  126c84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126c88:	e3a02000 	mov	r2, #0
  126c8c:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
  126c90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126c94:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126c98:	e35300ff 	cmp	r3, #255	; 0xff
  126c9c:	0a000005 	beq	126cb8 <tcp_rexmit+0x108>
    ++pcb->nrtx;
  126ca0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126ca4:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126ca8:	e2833001 	add	r3, r3, #1
  126cac:	e6ef2073 	uxtb	r2, r3
  126cb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126cb4:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  126cb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126cbc:	e3a02000 	mov	r2, #0
  126cc0:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  126cc4:	e30e3a14 	movw	r3, #59924	; 0xea14
  126cc8:	e3403056 	movt	r3, #86	; 0x56
  126ccc:	e5933180 	ldr	r3, [r3, #384]	; 0x180
  126cd0:	e2832001 	add	r2, r3, #1
  126cd4:	e30e3a14 	movw	r3, #59924	; 0xea14
  126cd8:	e3403056 	movt	r3, #86	; 0x56
  126cdc:	e5832180 	str	r2, [r3, #384]	; 0x180
  126ce0:	ea000000 	b	126ce8 <tcp_rexmit+0x138>
    return;
  126ce4:	e320f000 	nop	{0}
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
  126ce8:	e24bd008 	sub	sp, fp, #8
  126cec:	e8bd8810 	pop	{r4, fp, pc}

00126cf0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  126cf0:	e92d4800 	push	{fp, lr}
  126cf4:	e28db004 	add	fp, sp, #4
  126cf8:	e24dd008 	sub	sp, sp, #8
  126cfc:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  126d00:	e51b3008 	ldr	r3, [fp, #-8]
  126d04:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126d08:	e3530000 	cmp	r3, #0
  126d0c:	0a00003e 	beq	126e0c <tcp_rexmit_fast+0x11c>
  126d10:	e51b3008 	ldr	r3, [fp, #-8]
  126d14:	e5d3301e 	ldrb	r3, [r3, #30]
  126d18:	e2033004 	and	r3, r3, #4
  126d1c:	e3530000 	cmp	r3, #0
  126d20:	1a000039 	bne	126e0c <tcp_rexmit_fast+0x11c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  126d24:	e51b0008 	ldr	r0, [fp, #-8]
  126d28:	ebffffa0 	bl	126bb0 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
  126d2c:	e51b3008 	ldr	r3, [fp, #-8]
  126d30:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  126d34:	e51b3008 	ldr	r3, [fp, #-8]
  126d38:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126d3c:	e1520003 	cmp	r2, r3
  126d40:	2a000006 	bcs	126d60 <tcp_rexmit_fast+0x70>
  126d44:	e51b3008 	ldr	r3, [fp, #-8]
  126d48:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  126d4c:	e1a02fa3 	lsr	r2, r3, #31
  126d50:	e0823003 	add	r3, r2, r3
  126d54:	e1a030c3 	asr	r3, r3, #1
  126d58:	e6ff3073 	uxth	r3, r3
  126d5c:	ea000005 	b	126d78 <tcp_rexmit_fast+0x88>
  126d60:	e51b3008 	ldr	r3, [fp, #-8]
  126d64:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126d68:	e1a02fa3 	lsr	r2, r3, #31
  126d6c:	e0823003 	add	r3, r2, r3
  126d70:	e1a030c3 	asr	r3, r3, #1
  126d74:	e6ff3073 	uxth	r3, r3
  126d78:	e51b2008 	ldr	r2, [fp, #-8]
  126d7c:	e1c234be 	strh	r3, [r2, #78]	; 0x4e

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
  126d80:	e51b3008 	ldr	r3, [fp, #-8]
  126d84:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  126d88:	e1a02003 	mov	r2, r3
  126d8c:	e51b3008 	ldr	r3, [fp, #-8]
  126d90:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126d94:	e1a03083 	lsl	r3, r3, #1
  126d98:	e1520003 	cmp	r2, r3
  126d9c:	2a000005 	bcs	126db8 <tcp_rexmit_fast+0xc8>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
  126da0:	e51b3008 	ldr	r3, [fp, #-8]
  126da4:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126da8:	e1a03083 	lsl	r3, r3, #1
  126dac:	e6ff2073 	uxth	r2, r3
  126db0:	e51b3008 	ldr	r3, [fp, #-8]
  126db4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  126db8:	e51b3008 	ldr	r3, [fp, #-8]
  126dbc:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  126dc0:	e51b3008 	ldr	r3, [fp, #-8]
  126dc4:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126dc8:	e1a01003 	mov	r1, r3
  126dcc:	e1a01081 	lsl	r1, r1, #1
  126dd0:	e0813003 	add	r3, r1, r3
  126dd4:	e6ff3073 	uxth	r3, r3
  126dd8:	e0823003 	add	r3, r2, r3
  126ddc:	e6ff2073 	uxth	r2, r3
  126de0:	e51b3008 	ldr	r3, [fp, #-8]
  126de4:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->flags |= TF_INFR;
  126de8:	e51b3008 	ldr	r3, [fp, #-8]
  126dec:	e5d3301e 	ldrb	r3, [r3, #30]
  126df0:	e3833004 	orr	r3, r3, #4
  126df4:	e6ef2073 	uxtb	r2, r3
  126df8:	e51b3008 	ldr	r3, [fp, #-8]
  126dfc:	e5c3201e 	strb	r2, [r3, #30]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
  126e00:	e51b3008 	ldr	r3, [fp, #-8]
  126e04:	e3a02000 	mov	r2, #0
  126e08:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }
}
  126e0c:	e320f000 	nop	{0}
  126e10:	e24bd004 	sub	sp, fp, #4
  126e14:	e8bd8800 	pop	{fp, pc}

00126e18 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
  126e18:	e92d4800 	push	{fp, lr}
  126e1c:	e28db004 	add	fp, sp, #4
  126e20:	e24dd028 	sub	sp, sp, #40	; 0x28
  126e24:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
  126e28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126e2c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  126e30:	e2433001 	sub	r3, r3, #1
  126e34:	e1a00003 	mov	r0, r3
  126e38:	ebffbdf4 	bl	116610 <lwip_htonl>
  126e3c:	e1a03000 	mov	r3, r0
  126e40:	e3a02000 	mov	r2, #0
  126e44:	e3a01000 	mov	r1, #0
  126e48:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  126e4c:	ebfff62b 	bl	124700 <tcp_output_alloc_header>
  126e50:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  126e54:	e51b300c 	ldr	r3, [fp, #-12]
  126e58:	e3530000 	cmp	r3, #0
  126e5c:	1a000001 	bne	126e68 <tcp_keepalive+0x50>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  126e60:	e3e03000 	mvn	r3, #0
  126e64:	ea000036 	b	126f44 <tcp_keepalive+0x12c>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  126e68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126e6c:	e2833004 	add	r3, r3, #4
  126e70:	e1a00003 	mov	r0, r3
  126e74:	eb0028c7 	bl	131198 <ip4_route>
  126e78:	e50b0010 	str	r0, [fp, #-16]
  if (netif == NULL) {
  126e7c:	e51b3010 	ldr	r3, [fp, #-16]
  126e80:	e3530000 	cmp	r3, #0
  126e84:	1a000002 	bne	126e94 <tcp_keepalive+0x7c>
    err = ERR_RTE;
  126e88:	e3e03003 	mvn	r3, #3
  126e8c:	e54b3005 	strb	r3, [fp, #-5]
  126e90:	ea000028 	b	126f38 <tcp_keepalive+0x120>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
  126e94:	e51b300c 	ldr	r3, [fp, #-12]
  126e98:	e5933004 	ldr	r3, [r3, #4]
  126e9c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126ea0:	e51b300c 	ldr	r3, [fp, #-12]
  126ea4:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  126ea8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  126eac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126eb0:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126eb4:	e58d3000 	str	r3, [sp]
  126eb8:	e1a03001 	mov	r3, r1
  126ebc:	e3a01006 	mov	r1, #6
  126ec0:	e51b000c 	ldr	r0, [fp, #-12]
  126ec4:	ebffc5e4 	bl	11865c <ip_chksum_pseudo>
  126ec8:	e1a03000 	mov	r3, r0
  126ecc:	e1a02003 	mov	r2, r3
  126ed0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126ed4:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
  126ed8:	e30e3a14 	movw	r3, #59924	; 0xea14
  126edc:	e3403056 	movt	r3, #86	; 0x56
  126ee0:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126ee4:	e2833001 	add	r3, r3, #1
  126ee8:	e6ff2073 	uxth	r2, r3
  126eec:	e30e3a14 	movw	r3, #59924	; 0xea14
  126ef0:	e3403056 	movt	r3, #86	; 0x56
  126ef4:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
  126ef8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  126efc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126f00:	e2832004 	add	r2, r3, #4
  126f04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126f08:	e5d3000a 	ldrb	r0, [r3, #10]
  126f0c:	e51b3010 	ldr	r3, [fp, #-16]
  126f10:	e58d3008 	str	r3, [sp, #8]
  126f14:	e3a03006 	mov	r3, #6
  126f18:	e58d3004 	str	r3, [sp, #4]
  126f1c:	e3a03000 	mov	r3, #0
  126f20:	e58d3000 	str	r3, [sp]
  126f24:	e1a03000 	mov	r3, r0
  126f28:	e51b000c 	ldr	r0, [fp, #-12]
  126f2c:	eb002b72 	bl	131cfc <ip4_output_if>
  126f30:	e1a03000 	mov	r3, r0
  126f34:	e54b3005 	strb	r3, [fp, #-5]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  126f38:	e51b000c 	ldr	r0, [fp, #-12]
  126f3c:	ebffcfde 	bl	11aebc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  126f40:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  126f44:	e1a00003 	mov	r0, r3
  126f48:	e24bd004 	sub	sp, fp, #4
  126f4c:	e8bd8800 	pop	{fp, pc}

00126f50 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  126f50:	e92d4810 	push	{r4, fp, lr}
  126f54:	e28db008 	add	fp, sp, #8
  126f58:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  126f5c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
  126f60:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126f64:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126f68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if (seg == NULL) {
  126f6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126f70:	e3530000 	cmp	r3, #0
  126f74:	1a000002 	bne	126f84 <tcp_zero_window_probe+0x34>
    seg = pcb->unsent;
  126f78:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126f7c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126f80:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
  if (seg == NULL) {
  126f84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126f88:	e3530000 	cmp	r3, #0
  126f8c:	1a000001 	bne	126f98 <tcp_zero_window_probe+0x48>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  126f90:	e3a03000 	mov	r3, #0
  126f94:	ea00008c 	b	1271cc <tcp_zero_window_probe+0x27c>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  126f98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126f9c:	e593300c 	ldr	r3, [r3, #12]
  126fa0:	e1d330bc 	ldrh	r3, [r3, #12]
  126fa4:	e6ff3073 	uxth	r3, r3
  126fa8:	e1a00003 	mov	r0, r3
  126fac:	ebffbd8b 	bl	1165e0 <lwip_htons>
  126fb0:	e1a03000 	mov	r3, r0
  126fb4:	e2033001 	and	r3, r3, #1
  126fb8:	e3530000 	cmp	r3, #0
  126fbc:	0a000005 	beq	126fd8 <tcp_zero_window_probe+0x88>
  126fc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126fc4:	e1d330b8 	ldrh	r3, [r3, #8]
  126fc8:	e3530000 	cmp	r3, #0
  126fcc:	1a000001 	bne	126fd8 <tcp_zero_window_probe+0x88>
  126fd0:	e3a03001 	mov	r3, #1
  126fd4:	ea000000 	b	126fdc <tcp_zero_window_probe+0x8c>
  126fd8:	e3a03000 	mov	r3, #0
  126fdc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
  126fe0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  126fe4:	e3530000 	cmp	r3, #0
  126fe8:	03a03001 	moveq	r3, #1
  126fec:	13a03000 	movne	r3, #0
  126ff0:	e6ef3073 	uxtb	r3, r3
  126ff4:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  126ff8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126ffc:	e593300c 	ldr	r3, [r3, #12]
  127000:	e5933004 	ldr	r3, [r3, #4]
  127004:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  127008:	e3a01000 	mov	r1, #0
  12700c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127010:	ebfff5ba 	bl	124700 <tcp_output_alloc_header>
  127014:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (p == NULL) {
  127018:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12701c:	e3530000 	cmp	r3, #0
  127020:	1a000001 	bne	12702c <tcp_zero_window_probe+0xdc>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  127024:	e3e03000 	mvn	r3, #0
  127028:	ea000067 	b	1271cc <tcp_zero_window_probe+0x27c>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  12702c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  127030:	e5933004 	ldr	r3, [r3, #4]
  127034:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  if (is_fin) {
  127038:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12703c:	e3530000 	cmp	r3, #0
  127040:	0a00000c 	beq	127078 <tcp_zero_window_probe+0x128>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  127044:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127048:	e1d330bc 	ldrh	r3, [r3, #12]
  12704c:	e6ff3073 	uxth	r3, r3
  127050:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  127054:	e6ff4073 	uxth	r4, r3
  127058:	e3a00011 	mov	r0, #17
  12705c:	ebffbd5f 	bl	1165e0 <lwip_htons>
  127060:	e1a03000 	mov	r3, r0
  127064:	e1843003 	orr	r3, r4, r3
  127068:	e6ff2073 	uxth	r2, r3
  12706c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127070:	e1c320bc 	strh	r2, [r3, #12]
  127074:	ea00000f 	b	1270b8 <tcp_zero_window_probe+0x168>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
  127078:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12707c:	e5933004 	ldr	r3, [r3, #4]
  127080:	e2833014 	add	r3, r3, #20
  127084:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  127088:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12708c:	e5930004 	ldr	r0, [r3, #4]
  127090:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127094:	e5933004 	ldr	r3, [r3, #4]
  127098:	e1d320b8 	ldrh	r2, [r3, #8]
  12709c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1270a0:	e1d330b8 	ldrh	r3, [r3, #8]
  1270a4:	e0423003 	sub	r3, r2, r3
  1270a8:	e6ff3073 	uxth	r3, r3
  1270ac:	e3a02001 	mov	r2, #1
  1270b0:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1270b4:	ebffd18b 	bl	11b6e8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
  1270b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1270bc:	e593300c 	ldr	r3, [r3, #12]
  1270c0:	e5933004 	ldr	r3, [r3, #4]
  1270c4:	e1a00003 	mov	r0, r3
  1270c8:	ebffbd50 	bl	116610 <lwip_htonl>
  1270cc:	e1a03000 	mov	r3, r0
  1270d0:	e2833001 	add	r3, r3, #1
  1270d4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  1270d8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1270dc:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1270e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1270e4:	e0423003 	sub	r3, r2, r3
  1270e8:	e3530000 	cmp	r3, #0
  1270ec:	aa000002 	bge	1270fc <tcp_zero_window_probe+0x1ac>
    pcb->snd_nxt = snd_nxt;
  1270f0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1270f4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1270f8:	e5832050 	str	r2, [r3, #80]	; 0x50
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  1270fc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127100:	e2833004 	add	r3, r3, #4
  127104:	e1a00003 	mov	r0, r3
  127108:	eb002822 	bl	131198 <ip4_route>
  12710c:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  if (netif == NULL) {
  127110:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  127114:	e3530000 	cmp	r3, #0
  127118:	1a000002 	bne	127128 <tcp_zero_window_probe+0x1d8>
    err = ERR_RTE;
  12711c:	e3e03003 	mvn	r3, #3
  127120:	e54b300d 	strb	r3, [fp, #-13]
  127124:	ea000025 	b	1271c0 <tcp_zero_window_probe+0x270>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  127128:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12712c:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  127130:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  127134:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127138:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  12713c:	e58d3000 	str	r3, [sp]
  127140:	e1a03001 	mov	r3, r1
  127144:	e3a01006 	mov	r1, #6
  127148:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12714c:	ebffc542 	bl	11865c <ip_chksum_pseudo>
  127150:	e1a03000 	mov	r3, r0
  127154:	e1a02003 	mov	r2, r3
  127158:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12715c:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    TCP_STATS_INC(tcp.xmit);
  127160:	e30e3a14 	movw	r3, #59924	; 0xea14
  127164:	e3403056 	movt	r3, #86	; 0x56
  127168:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  12716c:	e2833001 	add	r3, r3, #1
  127170:	e6ff2073 	uxth	r2, r3
  127174:	e30e3a14 	movw	r3, #59924	; 0xea14
  127178:	e3403056 	movt	r3, #86	; 0x56
  12717c:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  127180:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  127184:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127188:	e2832004 	add	r2, r3, #4
  12718c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127190:	e5d3000a 	ldrb	r0, [r3, #10]
  127194:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  127198:	e58d3008 	str	r3, [sp, #8]
  12719c:	e3a03006 	mov	r3, #6
  1271a0:	e58d3004 	str	r3, [sp, #4]
  1271a4:	e3a03000 	mov	r3, #0
  1271a8:	e58d3000 	str	r3, [sp]
  1271ac:	e1a03000 	mov	r3, r0
  1271b0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1271b4:	eb002ad0 	bl	131cfc <ip4_output_if>
  1271b8:	e1a03000 	mov	r3, r0
  1271bc:	e54b300d 	strb	r3, [fp, #-13]
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
  1271c0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1271c4:	ebffcf3c 	bl	11aebc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  1271c8:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  1271cc:	e1a00003 	mov	r0, r3
  1271d0:	e24bd008 	sub	sp, fp, #8
  1271d4:	e8bd8810 	pop	{r4, fp, pc}

001271d8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
  1271d8:	e92d4800 	push	{fp, lr}
  1271dc:	e28db004 	add	fp, sp, #4
  1271e0:	e24dd008 	sub	sp, sp, #8
  1271e4:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
  1271e8:	ebffd77b 	bl	11cfdc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  1271ec:	e30e3c04 	movw	r3, #60420	; 0xec04
  1271f0:	e3403056 	movt	r3, #86	; 0x56
  1271f4:	e5933000 	ldr	r3, [r3]
  1271f8:	e3530000 	cmp	r3, #0
  1271fc:	1a000004 	bne	127214 <tcpip_tcp_timer+0x3c>
  127200:	e30e3c14 	movw	r3, #60436	; 0xec14
  127204:	e3403056 	movt	r3, #86	; 0x56
  127208:	e5933000 	ldr	r3, [r3]
  12720c:	e3530000 	cmp	r3, #0
  127210:	0a000005 	beq	12722c <tcpip_tcp_timer+0x54>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  127214:	e3a02000 	mov	r2, #0
  127218:	e30711d8 	movw	r1, #29144	; 0x71d8
  12721c:	e3401012 	movt	r1, #18
  127220:	e3a000fa 	mov	r0, #250	; 0xfa
  127224:	eb000057 	bl	127388 <sys_timeout>
  127228:	ea000003 	b	12723c <tcpip_tcp_timer+0x64>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
  12722c:	e30e326c 	movw	r3, #57964	; 0xe26c
  127230:	e3403014 	movt	r3, #20
  127234:	e3a02000 	mov	r2, #0
  127238:	e5832000 	str	r2, [r3]
  }
}
  12723c:	e320f000 	nop	{0}
  127240:	e24bd004 	sub	sp, fp, #4
  127244:	e8bd8800 	pop	{fp, pc}

00127248 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
  127248:	e92d4800 	push	{fp, lr}
  12724c:	e28db004 	add	fp, sp, #4
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  127250:	e30e326c 	movw	r3, #57964	; 0xe26c
  127254:	e3403014 	movt	r3, #20
  127258:	e5933000 	ldr	r3, [r3]
  12725c:	e3530000 	cmp	r3, #0
  127260:	1a000012 	bne	1272b0 <tcp_timer_needed+0x68>
  127264:	e30e3c04 	movw	r3, #60420	; 0xec04
  127268:	e3403056 	movt	r3, #86	; 0x56
  12726c:	e5933000 	ldr	r3, [r3]
  127270:	e3530000 	cmp	r3, #0
  127274:	1a000004 	bne	12728c <tcp_timer_needed+0x44>
  127278:	e30e3c14 	movw	r3, #60436	; 0xec14
  12727c:	e3403056 	movt	r3, #86	; 0x56
  127280:	e5933000 	ldr	r3, [r3]
  127284:	e3530000 	cmp	r3, #0
  127288:	0a000008 	beq	1272b0 <tcp_timer_needed+0x68>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
  12728c:	e30e326c 	movw	r3, #57964	; 0xe26c
  127290:	e3403014 	movt	r3, #20
  127294:	e3a02001 	mov	r2, #1
  127298:	e5832000 	str	r2, [r3]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  12729c:	e3a02000 	mov	r2, #0
  1272a0:	e30711d8 	movw	r1, #29144	; 0x71d8
  1272a4:	e3401012 	movt	r1, #18
  1272a8:	e3a000fa 	mov	r0, #250	; 0xfa
  1272ac:	eb000035 	bl	127388 <sys_timeout>
  }
}
  1272b0:	e320f000 	nop	{0}
  1272b4:	e8bd8800 	pop	{fp, pc}

001272b8 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
  1272b8:	e92d4800 	push	{fp, lr}
  1272bc:	e28db004 	add	fp, sp, #4
  1272c0:	e24dd010 	sub	sp, sp, #16
  1272c4:	e50b0010 	str	r0, [fp, #-16]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
  1272c8:	e51b3010 	ldr	r3, [fp, #-16]
  1272cc:	e50b3008 	str	r3, [fp, #-8]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
  1272d0:	e51b3008 	ldr	r3, [fp, #-8]
  1272d4:	e5933004 	ldr	r3, [r3, #4]
  1272d8:	e12fff33 	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
  1272dc:	e51b3008 	ldr	r3, [fp, #-8]
  1272e0:	e5933000 	ldr	r3, [r3]
  1272e4:	e51b2010 	ldr	r2, [fp, #-16]
  1272e8:	e30712b8 	movw	r1, #29368	; 0x72b8
  1272ec:	e3401012 	movt	r1, #18
  1272f0:	e1a00003 	mov	r0, r3
  1272f4:	eb000023 	bl	127388 <sys_timeout>
}
  1272f8:	e320f000 	nop	{0}
  1272fc:	e24bd004 	sub	sp, fp, #4
  127300:	e8bd8800 	pop	{fp, pc}

00127304 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
  127304:	e92d4800 	push	{fp, lr}
  127308:	e28db004 	add	fp, sp, #4
  12730c:	e24dd008 	sub	sp, sp, #8
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  127310:	e3a03001 	mov	r3, #1
  127314:	e50b3008 	str	r3, [fp, #-8]
  127318:	ea00000f 	b	12735c <sys_timeouts_init+0x58>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
  12731c:	e3083a20 	movw	r3, #35360	; 0x8a20
  127320:	e3403014 	movt	r3, #20
  127324:	e51b2008 	ldr	r2, [fp, #-8]
  127328:	e7930182 	ldr	r0, [r3, r2, lsl #3]
  12732c:	e51b3008 	ldr	r3, [fp, #-8]
  127330:	e1a02183 	lsl	r2, r3, #3
  127334:	e3083a20 	movw	r3, #35360	; 0x8a20
  127338:	e3403014 	movt	r3, #20
  12733c:	e0823003 	add	r3, r2, r3
  127340:	e1a02003 	mov	r2, r3
  127344:	e30712b8 	movw	r1, #29368	; 0x72b8
  127348:	e3401012 	movt	r1, #18
  12734c:	eb00000d 	bl	127388 <sys_timeout>
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  127350:	e51b3008 	ldr	r3, [fp, #-8]
  127354:	e2833001 	add	r3, r3, #1
  127358:	e50b3008 	str	r3, [fp, #-8]
  12735c:	e51b3008 	ldr	r3, [fp, #-8]
  127360:	e3530006 	cmp	r3, #6
  127364:	9affffec 	bls	12731c <sys_timeouts_init+0x18>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
  127368:	ebff8f79 	bl	10b154 <sys_now>
  12736c:	e1a02000 	mov	r2, r0
  127370:	e30e3268 	movw	r3, #57960	; 0xe268
  127374:	e3403014 	movt	r3, #20
  127378:	e5832000 	str	r2, [r3]
}
  12737c:	e320f000 	nop	{0}
  127380:	e24bd004 	sub	sp, fp, #4
  127384:	e8bd8800 	pop	{fp, pc}

00127388 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  127388:	e92d4800 	push	{fp, lr}
  12738c:	e28db004 	add	fp, sp, #4
  127390:	e24dd020 	sub	sp, sp, #32
  127394:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  127398:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12739c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  1273a0:	e3a020d2 	mov	r2, #210	; 0xd2
  1273a4:	e3081a58 	movw	r1, #35416	; 0x8a58
  1273a8:	e3401014 	movt	r1, #20
  1273ac:	e3a0000d 	mov	r0, #13
  1273b0:	ebffc74b 	bl	1190e4 <memp_malloc_fn>
  1273b4:	e50b0010 	str	r0, [fp, #-16]
  if (timeout == NULL) {
  1273b8:	e51b3010 	ldr	r3, [fp, #-16]
  1273bc:	e3530000 	cmp	r3, #0
  1273c0:	1a00000a 	bne	1273f0 <sys_timeout+0x68>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
  1273c4:	e51b3010 	ldr	r3, [fp, #-16]
  1273c8:	e3530000 	cmp	r3, #0
  1273cc:	1a00008f 	bne	127610 <sys_timeout+0x288>
  1273d0:	e3080a88 	movw	r0, #35464	; 0x8a88
  1273d4:	e3400014 	movt	r0, #20
  1273d8:	ebff6f4d 	bl	103114 <rt_kprintf>
  1273dc:	e3a010d4 	mov	r1, #212	; 0xd4
  1273e0:	e3080a58 	movw	r0, #35416	; 0x8a58
  1273e4:	e3400014 	movt	r0, #20
  1273e8:	ebff8f40 	bl	10b0f0 <sys_arch_assert>
    return;
  1273ec:	ea000087 	b	127610 <sys_timeout+0x288>
  }

  now = sys_now();
  1273f0:	ebff8f57 	bl	10b154 <sys_now>
  1273f4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (next_timeout == NULL) {
  1273f8:	e30e3264 	movw	r3, #57956	; 0xe264
  1273fc:	e3403014 	movt	r3, #20
  127400:	e5933000 	ldr	r3, [r3]
  127404:	e3530000 	cmp	r3, #0
  127408:	1a000006 	bne	127428 <sys_timeout+0xa0>
    diff = 0;
  12740c:	e3a03000 	mov	r3, #0
  127410:	e50b300c 	str	r3, [fp, #-12]
    timeouts_last_time = now;
  127414:	e30e3268 	movw	r3, #57960	; 0xe268
  127418:	e3403014 	movt	r3, #20
  12741c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  127420:	e5832000 	str	r2, [r3]
  127424:	ea000005 	b	127440 <sys_timeout+0xb8>
  } else {
    diff = now - timeouts_last_time;
  127428:	e30e3268 	movw	r3, #57960	; 0xe268
  12742c:	e3403014 	movt	r3, #20
  127430:	e5933000 	ldr	r3, [r3]
  127434:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  127438:	e0423003 	sub	r3, r2, r3
  12743c:	e50b300c 	str	r3, [fp, #-12]
  }

  timeout->next = NULL;
  127440:	e51b3010 	ldr	r3, [fp, #-16]
  127444:	e3a02000 	mov	r2, #0
  127448:	e5832000 	str	r2, [r3]
  timeout->h = handler;
  12744c:	e51b3010 	ldr	r3, [fp, #-16]
  127450:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  127454:	e5832008 	str	r2, [r3, #8]
  timeout->arg = arg;
  127458:	e51b3010 	ldr	r3, [fp, #-16]
  12745c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  127460:	e583200c 	str	r2, [r3, #12]
  timeout->time = msecs + diff;
  127464:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127468:	e51b300c 	ldr	r3, [fp, #-12]
  12746c:	e0822003 	add	r2, r2, r3
  127470:	e51b3010 	ldr	r3, [fp, #-16]
  127474:	e5832004 	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
  127478:	e30e3264 	movw	r3, #57956	; 0xe264
  12747c:	e3403014 	movt	r3, #20
  127480:	e5933000 	ldr	r3, [r3]
  127484:	e3530000 	cmp	r3, #0
  127488:	1a000004 	bne	1274a0 <sys_timeout+0x118>
    next_timeout = timeout;
  12748c:	e30e3264 	movw	r3, #57956	; 0xe264
  127490:	e3403014 	movt	r3, #20
  127494:	e51b2010 	ldr	r2, [fp, #-16]
  127498:	e5832000 	str	r2, [r3]
    return;
  12749c:	ea00005c 	b	127614 <sys_timeout+0x28c>
  }

  if (next_timeout->time > msecs) {
  1274a0:	e30e3264 	movw	r3, #57956	; 0xe264
  1274a4:	e3403014 	movt	r3, #20
  1274a8:	e5933000 	ldr	r3, [r3]
  1274ac:	e5933004 	ldr	r3, [r3, #4]
  1274b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1274b4:	e1520003 	cmp	r2, r3
  1274b8:	2a000013 	bcs	12750c <sys_timeout+0x184>
    next_timeout->time -= msecs;
  1274bc:	e30e3264 	movw	r3, #57956	; 0xe264
  1274c0:	e3403014 	movt	r3, #20
  1274c4:	e5933000 	ldr	r3, [r3]
  1274c8:	e5931004 	ldr	r1, [r3, #4]
  1274cc:	e30e3264 	movw	r3, #57956	; 0xe264
  1274d0:	e3403014 	movt	r3, #20
  1274d4:	e5933000 	ldr	r3, [r3]
  1274d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1274dc:	e0412002 	sub	r2, r1, r2
  1274e0:	e5832004 	str	r2, [r3, #4]
    timeout->next = next_timeout;
  1274e4:	e30e3264 	movw	r3, #57956	; 0xe264
  1274e8:	e3403014 	movt	r3, #20
  1274ec:	e5932000 	ldr	r2, [r3]
  1274f0:	e51b3010 	ldr	r3, [fp, #-16]
  1274f4:	e5832000 	str	r2, [r3]
    next_timeout = timeout;
  1274f8:	e30e3264 	movw	r3, #57956	; 0xe264
  1274fc:	e3403014 	movt	r3, #20
  127500:	e51b2010 	ldr	r2, [fp, #-16]
  127504:	e5832000 	str	r2, [r3]
  127508:	ea000041 	b	127614 <sys_timeout+0x28c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
  12750c:	e30e3264 	movw	r3, #57956	; 0xe264
  127510:	e3403014 	movt	r3, #20
  127514:	e5933000 	ldr	r3, [r3]
  127518:	e50b3008 	str	r3, [fp, #-8]
  12751c:	ea000037 	b	127600 <sys_timeout+0x278>
      timeout->time -= t->time;
  127520:	e51b3010 	ldr	r3, [fp, #-16]
  127524:	e5932004 	ldr	r2, [r3, #4]
  127528:	e51b3008 	ldr	r3, [fp, #-8]
  12752c:	e5933004 	ldr	r3, [r3, #4]
  127530:	e0422003 	sub	r2, r2, r3
  127534:	e51b3010 	ldr	r3, [fp, #-16]
  127538:	e5832004 	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  12753c:	e51b3008 	ldr	r3, [fp, #-8]
  127540:	e5933000 	ldr	r3, [r3]
  127544:	e3530000 	cmp	r3, #0
  127548:	0a000006 	beq	127568 <sys_timeout+0x1e0>
  12754c:	e51b3008 	ldr	r3, [fp, #-8]
  127550:	e5933000 	ldr	r3, [r3]
  127554:	e5932004 	ldr	r2, [r3, #4]
  127558:	e51b3010 	ldr	r3, [fp, #-16]
  12755c:	e5933004 	ldr	r3, [r3, #4]
  127560:	e1520003 	cmp	r2, r3
  127564:	9a000022 	bls	1275f4 <sys_timeout+0x26c>
        if (t->next != NULL) {
  127568:	e51b3008 	ldr	r3, [fp, #-8]
  12756c:	e5933000 	ldr	r3, [r3]
  127570:	e3530000 	cmp	r3, #0
  127574:	0a000009 	beq	1275a0 <sys_timeout+0x218>
          t->next->time -= timeout->time;
  127578:	e51b3008 	ldr	r3, [fp, #-8]
  12757c:	e5933000 	ldr	r3, [r3]
  127580:	e5931004 	ldr	r1, [r3, #4]
  127584:	e51b3010 	ldr	r3, [fp, #-16]
  127588:	e5932004 	ldr	r2, [r3, #4]
  12758c:	e51b3008 	ldr	r3, [fp, #-8]
  127590:	e5933000 	ldr	r3, [r3]
  127594:	e0412002 	sub	r2, r1, r2
  127598:	e5832004 	str	r2, [r3, #4]
  12759c:	ea00000c 	b	1275d4 <sys_timeout+0x24c>
        } else if (timeout->time > msecs) {
  1275a0:	e51b3010 	ldr	r3, [fp, #-16]
  1275a4:	e5933004 	ldr	r3, [r3, #4]
  1275a8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1275ac:	e1520003 	cmp	r2, r3
  1275b0:	2a000007 	bcs	1275d4 <sys_timeout+0x24c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
  1275b4:	e30e3264 	movw	r3, #57956	; 0xe264
  1275b8:	e3403014 	movt	r3, #20
  1275bc:	e5933000 	ldr	r3, [r3]
  1275c0:	e5932004 	ldr	r2, [r3, #4]
  1275c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1275c8:	e0822003 	add	r2, r2, r3
  1275cc:	e51b3010 	ldr	r3, [fp, #-16]
  1275d0:	e5832004 	str	r2, [r3, #4]
        }
        timeout->next = t->next;
  1275d4:	e51b3008 	ldr	r3, [fp, #-8]
  1275d8:	e5932000 	ldr	r2, [r3]
  1275dc:	e51b3010 	ldr	r3, [fp, #-16]
  1275e0:	e5832000 	str	r2, [r3]
        t->next = timeout;
  1275e4:	e51b3008 	ldr	r3, [fp, #-8]
  1275e8:	e51b2010 	ldr	r2, [fp, #-16]
  1275ec:	e5832000 	str	r2, [r3]
        break;
  1275f0:	ea000007 	b	127614 <sys_timeout+0x28c>
    for (t = next_timeout; t != NULL; t = t->next) {
  1275f4:	e51b3008 	ldr	r3, [fp, #-8]
  1275f8:	e5933000 	ldr	r3, [r3]
  1275fc:	e50b3008 	str	r3, [fp, #-8]
  127600:	e51b3008 	ldr	r3, [fp, #-8]
  127604:	e3530000 	cmp	r3, #0
  127608:	1affffc4 	bne	127520 <sys_timeout+0x198>
  12760c:	ea000000 	b	127614 <sys_timeout+0x28c>
    return;
  127610:	e320f000 	nop	{0}
      }
    }
  }
}
  127614:	e24bd004 	sub	sp, fp, #4
  127618:	e8bd8800 	pop	{fp, pc}

0012761c <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
  12761c:	e92d4800 	push	{fp, lr}
  127620:	e28db004 	add	fp, sp, #4
  127624:	e24dd010 	sub	sp, sp, #16
  127628:	e50b0010 	str	r0, [fp, #-16]
  12762c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
  127630:	e30e3264 	movw	r3, #57956	; 0xe264
  127634:	e3403014 	movt	r3, #20
  127638:	e5933000 	ldr	r3, [r3]
  12763c:	e3530000 	cmp	r3, #0
  127640:	0a000038 	beq	127728 <sys_untimeout+0x10c>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  127644:	e30e3264 	movw	r3, #57956	; 0xe264
  127648:	e3403014 	movt	r3, #20
  12764c:	e5933000 	ldr	r3, [r3]
  127650:	e50b300c 	str	r3, [fp, #-12]
  127654:	e3a03000 	mov	r3, #0
  127658:	e50b3008 	str	r3, [fp, #-8]
  12765c:	ea00002c 	b	127714 <sys_untimeout+0xf8>
    if ((t->h == handler) && (t->arg == arg)) {
  127660:	e51b300c 	ldr	r3, [fp, #-12]
  127664:	e5933008 	ldr	r3, [r3, #8]
  127668:	e51b2010 	ldr	r2, [fp, #-16]
  12766c:	e1520003 	cmp	r2, r3
  127670:	1a000022 	bne	127700 <sys_untimeout+0xe4>
  127674:	e51b300c 	ldr	r3, [fp, #-12]
  127678:	e593300c 	ldr	r3, [r3, #12]
  12767c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  127680:	e1520003 	cmp	r2, r3
  127684:	1a00001d 	bne	127700 <sys_untimeout+0xe4>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
  127688:	e51b3008 	ldr	r3, [fp, #-8]
  12768c:	e3530000 	cmp	r3, #0
  127690:	1a000005 	bne	1276ac <sys_untimeout+0x90>
        next_timeout = t->next;
  127694:	e51b300c 	ldr	r3, [fp, #-12]
  127698:	e5932000 	ldr	r2, [r3]
  12769c:	e30e3264 	movw	r3, #57956	; 0xe264
  1276a0:	e3403014 	movt	r3, #20
  1276a4:	e5832000 	str	r2, [r3]
  1276a8:	ea000003 	b	1276bc <sys_untimeout+0xa0>
      } else {
        prev_t->next = t->next;
  1276ac:	e51b300c 	ldr	r3, [fp, #-12]
  1276b0:	e5932000 	ldr	r2, [r3]
  1276b4:	e51b3008 	ldr	r3, [fp, #-8]
  1276b8:	e5832000 	str	r2, [r3]
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
  1276bc:	e51b300c 	ldr	r3, [fp, #-12]
  1276c0:	e5933000 	ldr	r3, [r3]
  1276c4:	e3530000 	cmp	r3, #0
  1276c8:	0a000008 	beq	1276f0 <sys_untimeout+0xd4>
        t->next->time += t->time;
  1276cc:	e51b300c 	ldr	r3, [fp, #-12]
  1276d0:	e5933000 	ldr	r3, [r3]
  1276d4:	e5931004 	ldr	r1, [r3, #4]
  1276d8:	e51b300c 	ldr	r3, [fp, #-12]
  1276dc:	e5932004 	ldr	r2, [r3, #4]
  1276e0:	e51b300c 	ldr	r3, [fp, #-12]
  1276e4:	e5933000 	ldr	r3, [r3]
  1276e8:	e0812002 	add	r2, r1, r2
  1276ec:	e5832004 	str	r2, [r3, #4]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
  1276f0:	e51b100c 	ldr	r1, [fp, #-12]
  1276f4:	e3a0000d 	mov	r0, #13
  1276f8:	ebffc6e1 	bl	119284 <memp_free>
      return;
  1276fc:	ea00000a 	b	12772c <sys_untimeout+0x110>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  127700:	e51b300c 	ldr	r3, [fp, #-12]
  127704:	e50b3008 	str	r3, [fp, #-8]
  127708:	e51b300c 	ldr	r3, [fp, #-12]
  12770c:	e5933000 	ldr	r3, [r3]
  127710:	e50b300c 	str	r3, [fp, #-12]
  127714:	e51b300c 	ldr	r3, [fp, #-12]
  127718:	e3530000 	cmp	r3, #0
  12771c:	1affffcf 	bne	127660 <sys_untimeout+0x44>
    }
  }
  return;
  127720:	e320f000 	nop	{0}
  127724:	ea000000 	b	12772c <sys_untimeout+0x110>
    return;
  127728:	e320f000 	nop	{0}
}
  12772c:	e24bd004 	sub	sp, fp, #4
  127730:	e8bd8800 	pop	{fp, pc}

00127734 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
  127734:	e92d4800 	push	{fp, lr}
  127738:	e28db004 	add	fp, sp, #4
  12773c:	e24dd018 	sub	sp, sp, #24
  if (next_timeout) {
  127740:	e30e3264 	movw	r3, #57956	; 0xe264
  127744:	e3403014 	movt	r3, #20
  127748:	e5933000 	ldr	r3, [r3]
  12774c:	e3530000 	cmp	r3, #0
  127750:	0a000042 	beq	127860 <sys_check_timeouts+0x12c>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
  127754:	ebff8e7e 	bl	10b154 <sys_now>
  127758:	e50b0010 	str	r0, [fp, #-16]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
  12775c:	e30e3268 	movw	r3, #57960	; 0xe268
  127760:	e3403014 	movt	r3, #20
  127764:	e5933000 	ldr	r3, [r3]
  127768:	e51b2010 	ldr	r2, [fp, #-16]
  12776c:	e0423003 	sub	r3, r2, r3
  127770:	e50b3008 	str	r3, [fp, #-8]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
  127774:	e3a03000 	mov	r3, #0
  127778:	e54b3009 	strb	r3, [fp, #-9]
      tmptimeout = next_timeout;
  12777c:	e30e3264 	movw	r3, #57956	; 0xe264
  127780:	e3403014 	movt	r3, #20
  127784:	e5933000 	ldr	r3, [r3]
  127788:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      if (tmptimeout && (tmptimeout->time <= diff)) {
  12778c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127790:	e3530000 	cmp	r3, #0
  127794:	0a00002e 	beq	127854 <sys_check_timeouts+0x120>
  127798:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12779c:	e5933004 	ldr	r3, [r3, #4]
  1277a0:	e51b2008 	ldr	r2, [fp, #-8]
  1277a4:	e1520003 	cmp	r2, r3
  1277a8:	3a000029 	bcc	127854 <sys_check_timeouts+0x120>
        /* timeout has expired */
        had_one = 1;
  1277ac:	e3a03001 	mov	r3, #1
  1277b0:	e54b3009 	strb	r3, [fp, #-9]
        timeouts_last_time += tmptimeout->time;
  1277b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1277b8:	e5932004 	ldr	r2, [r3, #4]
  1277bc:	e30e3268 	movw	r3, #57960	; 0xe268
  1277c0:	e3403014 	movt	r3, #20
  1277c4:	e5933000 	ldr	r3, [r3]
  1277c8:	e0822003 	add	r2, r2, r3
  1277cc:	e30e3268 	movw	r3, #57960	; 0xe268
  1277d0:	e3403014 	movt	r3, #20
  1277d4:	e5832000 	str	r2, [r3]
        diff -= tmptimeout->time;
  1277d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1277dc:	e5933004 	ldr	r3, [r3, #4]
  1277e0:	e51b2008 	ldr	r2, [fp, #-8]
  1277e4:	e0423003 	sub	r3, r2, r3
  1277e8:	e50b3008 	str	r3, [fp, #-8]
        next_timeout = tmptimeout->next;
  1277ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1277f0:	e5932000 	ldr	r2, [r3]
  1277f4:	e30e3264 	movw	r3, #57956	; 0xe264
  1277f8:	e3403014 	movt	r3, #20
  1277fc:	e5832000 	str	r2, [r3]
        handler = tmptimeout->h;
  127800:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127804:	e5933008 	ldr	r3, [r3, #8]
  127808:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        arg = tmptimeout->arg;
  12780c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127810:	e593300c 	ldr	r3, [r3, #12]
  127814:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
  127818:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12781c:	e3a0000d 	mov	r0, #13
  127820:	ebffc697 	bl	119284 <memp_free>
        if (handler != NULL) {
  127824:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127828:	e3530000 	cmp	r3, #0
  12782c:	0a000008 	beq	127854 <sys_check_timeouts+0x120>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
  127830:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  127834:	e3400014 	movt	r0, #20
  127838:	ebff8cb0 	bl	10ab00 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
  12783c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127840:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  127844:	e12fff33 	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
  127848:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  12784c:	e3400014 	movt	r0, #20
  127850:	ebff8cb6 	bl	10ab30 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
  127854:	e55b3009 	ldrb	r3, [fp, #-9]
  127858:	e3530000 	cmp	r3, #0
  12785c:	1affffc4 	bne	127774 <sys_check_timeouts+0x40>
  }
}
  127860:	e320f000 	nop	{0}
  127864:	e24bd004 	sub	sp, fp, #4
  127868:	e8bd8800 	pop	{fp, pc}

0012786c <sys_restart_timeouts>:
 * time (e.g. while saving energy) to prevent all timer functions of that
 * period being called.
 */
void
sys_restart_timeouts(void)
{
  12786c:	e92d4800 	push	{fp, lr}
  127870:	e28db004 	add	fp, sp, #4
  timeouts_last_time = sys_now();
  127874:	ebff8e36 	bl	10b154 <sys_now>
  127878:	e1a02000 	mov	r2, r0
  12787c:	e30e3268 	movw	r3, #57960	; 0xe268
  127880:	e3403014 	movt	r3, #20
  127884:	e5832000 	str	r2, [r3]
}
  127888:	e320f000 	nop	{0}
  12788c:	e8bd8800 	pop	{fp, pc}

00127890 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
  127890:	e92d4800 	push	{fp, lr}
  127894:	e28db004 	add	fp, sp, #4
  127898:	e24dd008 	sub	sp, sp, #8
  u32_t diff;
  if (next_timeout == NULL) {
  12789c:	e30e3264 	movw	r3, #57956	; 0xe264
  1278a0:	e3403014 	movt	r3, #20
  1278a4:	e5933000 	ldr	r3, [r3]
  1278a8:	e3530000 	cmp	r3, #0
  1278ac:	1a000001 	bne	1278b8 <sys_timeouts_sleeptime+0x28>
    return 0xffffffff;
  1278b0:	e3e03000 	mvn	r3, #0
  1278b4:	ea000015 	b	127910 <sys_timeouts_sleeptime+0x80>
  }
  diff = sys_now() - timeouts_last_time;
  1278b8:	ebff8e25 	bl	10b154 <sys_now>
  1278bc:	e1a02000 	mov	r2, r0
  1278c0:	e30e3268 	movw	r3, #57960	; 0xe268
  1278c4:	e3403014 	movt	r3, #20
  1278c8:	e5933000 	ldr	r3, [r3]
  1278cc:	e0423003 	sub	r3, r2, r3
  1278d0:	e50b3008 	str	r3, [fp, #-8]
  if (diff > next_timeout->time) {
  1278d4:	e30e3264 	movw	r3, #57956	; 0xe264
  1278d8:	e3403014 	movt	r3, #20
  1278dc:	e5933000 	ldr	r3, [r3]
  1278e0:	e5933004 	ldr	r3, [r3, #4]
  1278e4:	e51b2008 	ldr	r2, [fp, #-8]
  1278e8:	e1520003 	cmp	r2, r3
  1278ec:	9a000001 	bls	1278f8 <sys_timeouts_sleeptime+0x68>
    return 0;
  1278f0:	e3a03000 	mov	r3, #0
  1278f4:	ea000005 	b	127910 <sys_timeouts_sleeptime+0x80>
  } else {
    return next_timeout->time - diff;
  1278f8:	e30e3264 	movw	r3, #57956	; 0xe264
  1278fc:	e3403014 	movt	r3, #20
  127900:	e5933000 	ldr	r3, [r3]
  127904:	e5932004 	ldr	r2, [r3, #4]
  127908:	e51b3008 	ldr	r3, [fp, #-8]
  12790c:	e0423003 	sub	r3, r2, r3
  }
}
  127910:	e1a00003 	mov	r0, r3
  127914:	e24bd004 	sub	sp, fp, #4
  127918:	e8bd8800 	pop	{fp, pc}

0012791c <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
  12791c:	e92d4800 	push	{fp, lr}
  127920:	e28db004 	add	fp, sp, #4
  127924:	e24dd010 	sub	sp, sp, #16
  127928:	e50b0010 	str	r0, [fp, #-16]
  12792c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u32_t sleeptime;

again:
  if (!next_timeout) {
  127930:	e30e3264 	movw	r3, #57956	; 0xe264
  127934:	e3403014 	movt	r3, #20
  127938:	e5933000 	ldr	r3, [r3]
  12793c:	e3530000 	cmp	r3, #0
  127940:	1a000004 	bne	127958 <sys_timeouts_mbox_fetch+0x3c>
    sys_arch_mbox_fetch(mbox, msg, 0);
  127944:	e3a02000 	mov	r2, #0
  127948:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12794c:	e51b0010 	ldr	r0, [fp, #-16]
  127950:	ebff8d4c 	bl	10ae88 <sys_arch_mbox_fetch>
    return;
  127954:	ea00000d 	b	127990 <sys_timeouts_mbox_fetch+0x74>
  }

  sleeptime = sys_timeouts_sleeptime();
  127958:	ebffffcc 	bl	127890 <sys_timeouts_sleeptime>
  12795c:	e50b0008 	str	r0, [fp, #-8]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
  127960:	e51b3008 	ldr	r3, [fp, #-8]
  127964:	e3530000 	cmp	r3, #0
  127968:	0a000006 	beq	127988 <sys_timeouts_mbox_fetch+0x6c>
  12796c:	e51b2008 	ldr	r2, [fp, #-8]
  127970:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127974:	e51b0010 	ldr	r0, [fp, #-16]
  127978:	ebff8d42 	bl	10ae88 <sys_arch_mbox_fetch>
  12797c:	e1a03000 	mov	r3, r0
  127980:	e3730001 	cmn	r3, #1
  127984:	1a000001 	bne	127990 <sys_timeouts_mbox_fetch+0x74>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
  127988:	ebffff69 	bl	127734 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
  12798c:	eaffffe7 	b	127930 <sys_timeouts_mbox_fetch+0x14>
  }
}
  127990:	e24bd004 	sub	sp, fp, #4
  127994:	e8bd8800 	pop	{fp, pc}

00127998 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  127998:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12799c:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  1279a0:	e320f000 	nop	{0}
  1279a4:	e28bd000 	add	sp, fp, #0
  1279a8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1279ac:	e12fff1e 	bx	lr

001279b0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  1279b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1279b4:	e28db000 	add	fp, sp, #0
  1279b8:	e24dd00c 	sub	sp, sp, #12
  u16_t n = 0;
  1279bc:	e3a03000 	mov	r3, #0
  1279c0:	e14b30b6 	strh	r3, [fp, #-6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
  1279c4:	e30d3038 	movw	r3, #53304	; 0xd038
  1279c8:	e3403014 	movt	r3, #20
  1279cc:	e1d320b0 	ldrh	r2, [r3]
  1279d0:	e2823001 	add	r3, r2, #1
  1279d4:	e6ff1073 	uxth	r1, r3
  1279d8:	e30d3038 	movw	r3, #53304	; 0xd038
  1279dc:	e3403014 	movt	r3, #20
  1279e0:	e1c310b0 	strh	r1, [r3]
  1279e4:	e30f3fff 	movw	r3, #65535	; 0xffff
  1279e8:	e1520003 	cmp	r2, r3
  1279ec:	1a000003 	bne	127a00 <udp_new_port+0x50>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  1279f0:	e30d3038 	movw	r3, #53304	; 0xd038
  1279f4:	e3403014 	movt	r3, #20
  1279f8:	e3a02903 	mov	r2, #49152	; 0xc000
  1279fc:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127a00:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  127a04:	e3403056 	movt	r3, #86	; 0x56
  127a08:	e5933000 	ldr	r3, [r3]
  127a0c:	e50b300c 	str	r3, [fp, #-12]
  127a10:	ea000011 	b	127a5c <udp_new_port+0xac>
    if (pcb->local_port == udp_port) {
  127a14:	e51b300c 	ldr	r3, [fp, #-12]
  127a18:	e1d321b2 	ldrh	r2, [r3, #18]
  127a1c:	e30d3038 	movw	r3, #53304	; 0xd038
  127a20:	e3403014 	movt	r3, #20
  127a24:	e1d330b0 	ldrh	r3, [r3]
  127a28:	e1520003 	cmp	r2, r3
  127a2c:	1a000007 	bne	127a50 <udp_new_port+0xa0>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
  127a30:	e15b30b6 	ldrh	r3, [fp, #-6]
  127a34:	e2833001 	add	r3, r3, #1
  127a38:	e14b30b6 	strh	r3, [fp, #-6]
  127a3c:	e15b30b6 	ldrh	r3, [fp, #-6]
  127a40:	e3530901 	cmp	r3, #16384	; 0x4000
  127a44:	3affffde 	bcc	1279c4 <udp_new_port+0x14>
        return 0;
  127a48:	e3a03000 	mov	r3, #0
  127a4c:	ea000008 	b	127a74 <udp_new_port+0xc4>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127a50:	e51b300c 	ldr	r3, [fp, #-12]
  127a54:	e593300c 	ldr	r3, [r3, #12]
  127a58:	e50b300c 	str	r3, [fp, #-12]
  127a5c:	e51b300c 	ldr	r3, [fp, #-12]
  127a60:	e3530000 	cmp	r3, #0
  127a64:	1affffea 	bne	127a14 <udp_new_port+0x64>
      }
      goto again;
    }
  }
  return udp_port;
  127a68:	e30d3038 	movw	r3, #53304	; 0xd038
  127a6c:	e3403014 	movt	r3, #20
  127a70:	e1d330b0 	ldrh	r3, [r3]
}
  127a74:	e1a00003 	mov	r0, r3
  127a78:	e28bd000 	add	sp, fp, #0
  127a7c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  127a80:	e12fff1e 	bx	lr

00127a84 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
  127a84:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  127a88:	e28db000 	add	fp, sp, #0
  127a8c:	e24dd014 	sub	sp, sp, #20
  127a90:	e50b0008 	str	r0, [fp, #-8]
  127a94:	e50b100c 	str	r1, [fp, #-12]
  127a98:	e1a03002 	mov	r3, r2
  127a9c:	e54b300d 	strb	r3, [fp, #-13]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  127aa0:	e55b300d 	ldrb	r3, [fp, #-13]
  127aa4:	e3530000 	cmp	r3, #0
  127aa8:	0a00001e 	beq	127b28 <udp_input_local_match+0xa4>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  127aac:	e51b3008 	ldr	r3, [fp, #-8]
  127ab0:	e5d33008 	ldrb	r3, [r3, #8]
  127ab4:	e2033020 	and	r3, r3, #32
  127ab8:	e3530000 	cmp	r3, #0
  127abc:	0a000029 	beq	127b68 <udp_input_local_match+0xe4>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127ac0:	e51b3008 	ldr	r3, [fp, #-8]
  127ac4:	e3530000 	cmp	r3, #0
  127ac8:	0a000014 	beq	127b20 <udp_input_local_match+0x9c>
  127acc:	e51b3008 	ldr	r3, [fp, #-8]
  127ad0:	e5933000 	ldr	r3, [r3]
  127ad4:	e3530000 	cmp	r3, #0
  127ad8:	0a000010 	beq	127b20 <udp_input_local_match+0x9c>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  127adc:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127ae0:	e3403014 	movt	r3, #20
  127ae4:	e5933014 	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127ae8:	e3730001 	cmn	r3, #1
  127aec:	0a00000b 	beq	127b20 <udp_input_local_match+0x9c>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
  127af0:	e51b3008 	ldr	r3, [fp, #-8]
  127af4:	e5932000 	ldr	r2, [r3]
  127af8:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127afc:	e3403014 	movt	r3, #20
  127b00:	e5933014 	ldr	r3, [r3, #20]
  127b04:	e0222003 	eor	r2, r2, r3
  127b08:	e51b300c 	ldr	r3, [fp, #-12]
  127b0c:	e2833008 	add	r3, r3, #8
  127b10:	e5933000 	ldr	r3, [r3]
  127b14:	e0033002 	and	r3, r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  127b18:	e3530000 	cmp	r3, #0
  127b1c:	1a000011 	bne	127b68 <udp_input_local_match+0xe4>
          return 1;
  127b20:	e3a03001 	mov	r3, #1
  127b24:	ea000010 	b	127b6c <udp_input_local_match+0xe8>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  127b28:	e51b3008 	ldr	r3, [fp, #-8]
  127b2c:	e3530000 	cmp	r3, #0
  127b30:	0a00000a 	beq	127b60 <udp_input_local_match+0xdc>
  127b34:	e51b3008 	ldr	r3, [fp, #-8]
  127b38:	e5933000 	ldr	r3, [r3]
  127b3c:	e3530000 	cmp	r3, #0
  127b40:	0a000006 	beq	127b60 <udp_input_local_match+0xdc>
  127b44:	e51b3008 	ldr	r3, [fp, #-8]
  127b48:	e5932000 	ldr	r2, [r3]
  127b4c:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127b50:	e3403014 	movt	r3, #20
  127b54:	e5933014 	ldr	r3, [r3, #20]
  127b58:	e1520003 	cmp	r2, r3
  127b5c:	1a000001 	bne	127b68 <udp_input_local_match+0xe4>
      return 1;
  127b60:	e3a03001 	mov	r3, #1
  127b64:	ea000000 	b	127b6c <udp_input_local_match+0xe8>
    }
  }

  return 0;
  127b68:	e3a03000 	mov	r3, #0
}
  127b6c:	e1a00003 	mov	r0, r3
  127b70:	e28bd000 	add	sp, fp, #0
  127b74:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  127b78:	e12fff1e 	bx	lr

00127b7c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  127b7c:	e92d4810 	push	{r4, fp, lr}
  127b80:	e28db008 	add	fp, sp, #8
  127b84:	e24dd034 	sub	sp, sp, #52	; 0x34
  127b88:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  127b8c:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
  127b90:	e3a03000 	mov	r3, #0
  127b94:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
  127b98:	e30e3a14 	movw	r3, #59924	; 0xea14
  127b9c:	e3403056 	movt	r3, #86	; 0x56
  127ba0:	e1d339b6 	ldrh	r3, [r3, #150]	; 0x96
  127ba4:	e2833001 	add	r3, r3, #1
  127ba8:	e6ff2073 	uxth	r2, r3
  127bac:	e30e3a14 	movw	r3, #59924	; 0xea14
  127bb0:	e3403056 	movt	r3, #86	; 0x56
  127bb4:	e1c329b6 	strh	r2, [r3, #150]	; 0x96

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
  127bb8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127bbc:	e1d330ba 	ldrh	r3, [r3, #10]
  127bc0:	e3530007 	cmp	r3, #7
  127bc4:	8a000019 	bhi	127c30 <udp_input+0xb4>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
  127bc8:	e30e3a14 	movw	r3, #59924	; 0xea14
  127bcc:	e3403056 	movt	r3, #86	; 0x56
  127bd0:	e1d339be 	ldrh	r3, [r3, #158]	; 0x9e
  127bd4:	e2833001 	add	r3, r3, #1
  127bd8:	e6ff2073 	uxth	r2, r3
  127bdc:	e30e3a14 	movw	r3, #59924	; 0xea14
  127be0:	e3403056 	movt	r3, #86	; 0x56
  127be4:	e1c329be 	strh	r2, [r3, #158]	; 0x9e
    UDP_STATS_INC(udp.drop);
  127be8:	e30e3a14 	movw	r3, #59924	; 0xea14
  127bec:	e3403056 	movt	r3, #86	; 0x56
  127bf0:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127bf4:	e2833001 	add	r3, r3, #1
  127bf8:	e6ff2073 	uxth	r2, r3
  127bfc:	e30e3a14 	movw	r3, #59924	; 0xea14
  127c00:	e3403056 	movt	r3, #86	; 0x56
  127c04:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
    MIB2_STATS_INC(mib2.udpinerrors);
  127c08:	e30e3a14 	movw	r3, #59924	; 0xea14
  127c0c:	e3403056 	movt	r3, #86	; 0x56
  127c10:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127c14:	e2832001 	add	r2, r3, #1
  127c18:	e30e3a14 	movw	r3, #59924	; 0xea14
  127c1c:	e3403056 	movt	r3, #86	; 0x56
  127c20:	e5832198 	str	r2, [r3, #408]	; 0x198
    pbuf_free(p);
  127c24:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127c28:	ebffcca3 	bl	11aebc <pbuf_free>
    goto end;
  127c2c:	ea00010c 	b	128064 <udp_input+0x4e8>
  }

  udphdr = (struct udp_hdr *)p->payload;
  127c30:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127c34:	e5933004 	ldr	r3, [r3, #4]
  127c38:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  127c3c:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127c40:	e3403014 	movt	r3, #20
  127c44:	e5932014 	ldr	r2, [r3, #20]
  127c48:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127c4c:	e3403014 	movt	r3, #20
  127c50:	e5933000 	ldr	r3, [r3]
  127c54:	e1a01003 	mov	r1, r3
  127c58:	e1a00002 	mov	r0, r2
  127c5c:	eb002a2c 	bl	132514 <ip4_addr_isbroadcast_u32>
  127c60:	e1a03000 	mov	r3, r0
  127c64:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
  127c68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127c6c:	e1d330b0 	ldrh	r3, [r3]
  127c70:	e6ff3073 	uxth	r3, r3
  127c74:	e1a00003 	mov	r0, r3
  127c78:	ebffba58 	bl	1165e0 <lwip_htons>
  127c7c:	e1a03000 	mov	r3, r0
  127c80:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  dest = lwip_ntohs(udphdr->dest);
  127c84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127c88:	e1d330b2 	ldrh	r3, [r3, #2]
  127c8c:	e6ff3073 	uxth	r3, r3
  127c90:	e1a00003 	mov	r0, r3
  127c94:	ebffba51 	bl	1165e0 <lwip_htons>
  127c98:	e1a03000 	mov	r3, r0
  127c9c:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
  127ca0:	e3a03000 	mov	r3, #0
  127ca4:	e50b3010 	str	r3, [fp, #-16]
  prev = NULL;
  127ca8:	e3a03000 	mov	r3, #0
  127cac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  uncon_pcb = NULL;
  127cb0:	e3a03000 	mov	r3, #0
  127cb4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127cb8:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  127cbc:	e3403056 	movt	r3, #86	; 0x56
  127cc0:	e5933000 	ldr	r3, [r3]
  127cc4:	e50b3010 	str	r3, [fp, #-16]
  127cc8:	ea00004c 	b	127e00 <udp_input+0x284>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
  127ccc:	e51b3010 	ldr	r3, [fp, #-16]
  127cd0:	e1d331b2 	ldrh	r3, [r3, #18]
  127cd4:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  127cd8:	e1520003 	cmp	r2, r3
  127cdc:	1a000042 	bne	127dec <udp_input+0x270>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
  127ce0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  127ce4:	e1a02003 	mov	r2, r3
  127ce8:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  127cec:	e51b0010 	ldr	r0, [fp, #-16]
  127cf0:	ebffff63 	bl	127a84 <udp_input_local_match>
  127cf4:	e1a03000 	mov	r3, r0
    if ((pcb->local_port == dest) &&
  127cf8:	e3530000 	cmp	r3, #0
  127cfc:	0a00003a 	beq	127dec <udp_input+0x270>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
  127d00:	e51b3010 	ldr	r3, [fp, #-16]
  127d04:	e5d33010 	ldrb	r3, [r3, #16]
  127d08:	e2033004 	and	r3, r3, #4
  127d0c:	e3530000 	cmp	r3, #0
  127d10:	1a00000b 	bne	127d44 <udp_input+0x1c8>
  127d14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127d18:	e3530000 	cmp	r3, #0
  127d1c:	0a000006 	beq	127d3c <udp_input+0x1c0>
          ((uncon_pcb == NULL)
#if SO_REUSE
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
  127d20:	e51b3010 	ldr	r3, [fp, #-16]
  127d24:	e3530000 	cmp	r3, #0
  127d28:	0a000005 	beq	127d44 <udp_input+0x1c8>
  127d2c:	e51b3010 	ldr	r3, [fp, #-16]
  127d30:	e5933000 	ldr	r3, [r3]
  127d34:	e3530000 	cmp	r3, #0
  127d38:	0a000001 	beq	127d44 <udp_input+0x1c8>
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
  127d3c:	e51b3010 	ldr	r3, [fp, #-16]
  127d40:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
  127d44:	e51b3010 	ldr	r3, [fp, #-16]
  127d48:	e1d331b4 	ldrh	r3, [r3, #20]
  127d4c:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  127d50:	e1520003 	cmp	r2, r3
  127d54:	1a000024 	bne	127dec <udp_input+0x270>
          (ip_addr_isany_val(pcb->remote_ip) ||
  127d58:	e51b3010 	ldr	r3, [fp, #-16]
  127d5c:	e5933004 	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
  127d60:	e3530000 	cmp	r3, #0
  127d64:	0a000006 	beq	127d84 <udp_input+0x208>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
  127d68:	e51b3010 	ldr	r3, [fp, #-16]
  127d6c:	e5932004 	ldr	r2, [r3, #4]
  127d70:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127d74:	e3403014 	movt	r3, #20
  127d78:	e5933010 	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
  127d7c:	e1520003 	cmp	r2, r3
  127d80:	1a000019 	bne	127dec <udp_input+0x270>
        /* the first fully matching PCB */
        if (prev != NULL) {
  127d84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127d88:	e3530000 	cmp	r3, #0
  127d8c:	0a00000d 	beq	127dc8 <udp_input+0x24c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
  127d90:	e51b3010 	ldr	r3, [fp, #-16]
  127d94:	e593200c 	ldr	r2, [r3, #12]
  127d98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127d9c:	e583200c 	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
  127da0:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  127da4:	e3403056 	movt	r3, #86	; 0x56
  127da8:	e5932000 	ldr	r2, [r3]
  127dac:	e51b3010 	ldr	r3, [fp, #-16]
  127db0:	e583200c 	str	r2, [r3, #12]
          udp_pcbs = pcb;
  127db4:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  127db8:	e3403056 	movt	r3, #86	; 0x56
  127dbc:	e51b2010 	ldr	r2, [fp, #-16]
  127dc0:	e5832000 	str	r2, [r3]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
  127dc4:	ea000010 	b	127e0c <udp_input+0x290>
          UDP_STATS_INC(udp.cachehit);
  127dc8:	e30e3a14 	movw	r3, #59924	; 0xea14
  127dcc:	e3403056 	movt	r3, #86	; 0x56
  127dd0:	e1d33aba 	ldrh	r3, [r3, #170]	; 0xaa
  127dd4:	e2833001 	add	r3, r3, #1
  127dd8:	e6ff2073 	uxth	r2, r3
  127ddc:	e30e3a14 	movw	r3, #59924	; 0xea14
  127de0:	e3403056 	movt	r3, #86	; 0x56
  127de4:	e1c32aba 	strh	r2, [r3, #170]	; 0xaa
        break;
  127de8:	ea000007 	b	127e0c <udp_input+0x290>
      }
    }

    prev = pcb;
  127dec:	e51b3010 	ldr	r3, [fp, #-16]
  127df0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127df4:	e51b3010 	ldr	r3, [fp, #-16]
  127df8:	e593300c 	ldr	r3, [r3, #12]
  127dfc:	e50b3010 	str	r3, [fp, #-16]
  127e00:	e51b3010 	ldr	r3, [fp, #-16]
  127e04:	e3530000 	cmp	r3, #0
  127e08:	1affffaf 	bne	127ccc <udp_input+0x150>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
  127e0c:	e51b3010 	ldr	r3, [fp, #-16]
  127e10:	e3530000 	cmp	r3, #0
  127e14:	1a000001 	bne	127e20 <udp_input+0x2a4>
    pcb = uncon_pcb;
  127e18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127e1c:	e50b3010 	str	r3, [fp, #-16]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
  127e20:	e51b3010 	ldr	r3, [fp, #-16]
  127e24:	e3530000 	cmp	r3, #0
  127e28:	0a000002 	beq	127e38 <udp_input+0x2bc>
    for_us = 1;
  127e2c:	e3a03001 	mov	r3, #1
  127e30:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  127e34:	ea00000a 	b	127e64 <udp_input+0x2e8>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
  127e38:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  127e3c:	e2833004 	add	r3, r3, #4
  127e40:	e5932000 	ldr	r2, [r3]
  127e44:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127e48:	e3403014 	movt	r3, #20
  127e4c:	e5933014 	ldr	r3, [r3, #20]
  127e50:	e1520003 	cmp	r2, r3
  127e54:	03a03001 	moveq	r3, #1
  127e58:	13a03000 	movne	r3, #0
  127e5c:	e6ef3073 	uxtb	r3, r3
  127e60:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
  127e64:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  127e68:	e3530000 	cmp	r3, #0
  127e6c:	0a000079 	beq	128058 <udp_input+0x4dc>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
  127e70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127e74:	e1d330b6 	ldrh	r3, [r3, #6]
  127e78:	e6ff3073 	uxth	r3, r3
  127e7c:	e3530000 	cmp	r3, #0
  127e80:	0a00000a 	beq	127eb0 <udp_input+0x334>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
  127e84:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127e88:	e1d320b8 	ldrh	r2, [r3, #8]
  127e8c:	e59f3244 	ldr	r3, [pc, #580]	; 1280d8 <udp_input+0x55c>
  127e90:	e58d3000 	str	r3, [sp]
  127e94:	e59f3240 	ldr	r3, [pc, #576]	; 1280dc <udp_input+0x560>
  127e98:	e3a01011 	mov	r1, #17
  127e9c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127ea0:	ebffc1ed 	bl	11865c <ip_chksum_pseudo>
  127ea4:	e1a03000 	mov	r3, r0
  127ea8:	e3530000 	cmp	r3, #0
  127eac:	1a00006d 	bne	128068 <udp_input+0x4ec>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
  127eb0:	e3e01007 	mvn	r1, #7
  127eb4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127eb8:	ebffcbe1 	bl	11ae44 <pbuf_header>
  127ebc:	e1a03000 	mov	r3, r0
  127ec0:	e3530000 	cmp	r3, #0
  127ec4:	0a000018 	beq	127f2c <udp_input+0x3b0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
  127ec8:	e3080ac8 	movw	r0, #35528	; 0x8ac8
  127ecc:	e3400014 	movt	r0, #20
  127ed0:	ebff6c8f 	bl	103114 <rt_kprintf>
  127ed4:	e3001155 	movw	r1, #341	; 0x155
  127ed8:	e3080adc 	movw	r0, #35548	; 0x8adc
  127edc:	e3400014 	movt	r0, #20
  127ee0:	ebff8c82 	bl	10b0f0 <sys_arch_assert>
      UDP_STATS_INC(udp.drop);
  127ee4:	e30e3a14 	movw	r3, #59924	; 0xea14
  127ee8:	e3403056 	movt	r3, #86	; 0x56
  127eec:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127ef0:	e2833001 	add	r3, r3, #1
  127ef4:	e6ff2073 	uxth	r2, r3
  127ef8:	e30e3a14 	movw	r3, #59924	; 0xea14
  127efc:	e3403056 	movt	r3, #86	; 0x56
  127f00:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpinerrors);
  127f04:	e30e3a14 	movw	r3, #59924	; 0xea14
  127f08:	e3403056 	movt	r3, #86	; 0x56
  127f0c:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127f10:	e2832001 	add	r2, r3, #1
  127f14:	e30e3a14 	movw	r3, #59924	; 0xea14
  127f18:	e3403056 	movt	r3, #86	; 0x56
  127f1c:	e5832198 	str	r2, [r3, #408]	; 0x198
      pbuf_free(p);
  127f20:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127f24:	ebffcbe4 	bl	11aebc <pbuf_free>
      goto end;
  127f28:	ea00004d 	b	128064 <udp_input+0x4e8>
    }

    if (pcb != NULL) {
  127f2c:	e51b3010 	ldr	r3, [fp, #-16]
  127f30:	e3530000 	cmp	r3, #0
  127f34:	0a000018 	beq	127f9c <udp_input+0x420>
      MIB2_STATS_INC(mib2.udpindatagrams);
  127f38:	e30e3a14 	movw	r3, #59924	; 0xea14
  127f3c:	e3403056 	movt	r3, #86	; 0x56
  127f40:	e5933190 	ldr	r3, [r3, #400]	; 0x190
  127f44:	e2832001 	add	r2, r3, #1
  127f48:	e30e3a14 	movw	r3, #59924	; 0xea14
  127f4c:	e3403056 	movt	r3, #86	; 0x56
  127f50:	e5832190 	str	r2, [r3, #400]	; 0x190
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
  127f54:	e51b3010 	ldr	r3, [fp, #-16]
  127f58:	e5933020 	ldr	r3, [r3, #32]
  127f5c:	e3530000 	cmp	r3, #0
  127f60:	0a00000a 	beq	127f90 <udp_input+0x414>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  127f64:	e51b3010 	ldr	r3, [fp, #-16]
  127f68:	e5934020 	ldr	r4, [r3, #32]
  127f6c:	e51b3010 	ldr	r3, [fp, #-16]
  127f70:	e5930024 	ldr	r0, [r3, #36]	; 0x24
  127f74:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  127f78:	e58d3000 	str	r3, [sp]
  127f7c:	e59f3158 	ldr	r3, [pc, #344]	; 1280dc <udp_input+0x560>
  127f80:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  127f84:	e51b1010 	ldr	r1, [fp, #-16]
  127f88:	e12fff34 	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
  127f8c:	ea00004f 	b	1280d0 <udp_input+0x554>
        pbuf_free(p);
  127f90:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127f94:	ebffcbc8 	bl	11aebc <pbuf_free>
        goto end;
  127f98:	ea000031 	b	128064 <udp_input+0x4e8>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
  127f9c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  127fa0:	e3530000 	cmp	r3, #0
  127fa4:	1a000011 	bne	127ff0 <udp_input+0x474>
  127fa8:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127fac:	e3403014 	movt	r3, #20
  127fb0:	e5933014 	ldr	r3, [r3, #20]
  127fb4:	e20330f0 	and	r3, r3, #240	; 0xf0
  127fb8:	e35300e0 	cmp	r3, #224	; 0xe0
  127fbc:	0a00000b 	beq	127ff0 <udp_input+0x474>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
  127fc0:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127fc4:	e3403014 	movt	r3, #20
  127fc8:	e1d330bc 	ldrh	r3, [r3, #12]
  127fcc:	e2833008 	add	r3, r3, #8
  127fd0:	e6ff3073 	uxth	r3, r3
  127fd4:	e6bf3073 	sxth	r3, r3
  127fd8:	e1a01003 	mov	r1, r3
  127fdc:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127fe0:	ebffcba6 	bl	11ae80 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
  127fe4:	e3a01003 	mov	r1, #3
  127fe8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127fec:	eb001f27 	bl	12fc90 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
  127ff0:	e30e3a14 	movw	r3, #59924	; 0xea14
  127ff4:	e3403056 	movt	r3, #86	; 0x56
  127ff8:	e1d33ab4 	ldrh	r3, [r3, #164]	; 0xa4
  127ffc:	e2833001 	add	r3, r3, #1
  128000:	e6ff2073 	uxth	r2, r3
  128004:	e30e3a14 	movw	r3, #59924	; 0xea14
  128008:	e3403056 	movt	r3, #86	; 0x56
  12800c:	e1c32ab4 	strh	r2, [r3, #164]	; 0xa4
      UDP_STATS_INC(udp.drop);
  128010:	e30e3a14 	movw	r3, #59924	; 0xea14
  128014:	e3403056 	movt	r3, #86	; 0x56
  128018:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  12801c:	e2833001 	add	r3, r3, #1
  128020:	e6ff2073 	uxth	r2, r3
  128024:	e30e3a14 	movw	r3, #59924	; 0xea14
  128028:	e3403056 	movt	r3, #86	; 0x56
  12802c:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpnoports);
  128030:	e30e3a14 	movw	r3, #59924	; 0xea14
  128034:	e3403056 	movt	r3, #86	; 0x56
  128038:	e5933194 	ldr	r3, [r3, #404]	; 0x194
  12803c:	e2832001 	add	r2, r3, #1
  128040:	e30e3a14 	movw	r3, #59924	; 0xea14
  128044:	e3403056 	movt	r3, #86	; 0x56
  128048:	e5832194 	str	r2, [r3, #404]	; 0x194
      pbuf_free(p);
  12804c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  128050:	ebffcb99 	bl	11aebc <pbuf_free>
  return;
  128054:	ea00001d 	b	1280d0 <udp_input+0x554>
    pbuf_free(p);
  128058:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12805c:	ebffcb96 	bl	11aebc <pbuf_free>
  return;
  128060:	ea00001a 	b	1280d0 <udp_input+0x554>
  128064:	ea000019 	b	1280d0 <udp_input+0x554>
            goto chkerr;
  128068:	e320f000 	nop	{0}
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  12806c:	e30e3a14 	movw	r3, #59924	; 0xea14
  128070:	e3403056 	movt	r3, #86	; 0x56
  128074:	e1d339bc 	ldrh	r3, [r3, #156]	; 0x9c
  128078:	e2833001 	add	r3, r3, #1
  12807c:	e6ff2073 	uxth	r2, r3
  128080:	e30e3a14 	movw	r3, #59924	; 0xea14
  128084:	e3403056 	movt	r3, #86	; 0x56
  128088:	e1c329bc 	strh	r2, [r3, #156]	; 0x9c
  UDP_STATS_INC(udp.drop);
  12808c:	e30e3a14 	movw	r3, #59924	; 0xea14
  128090:	e3403056 	movt	r3, #86	; 0x56
  128094:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  128098:	e2833001 	add	r3, r3, #1
  12809c:	e6ff2073 	uxth	r2, r3
  1280a0:	e30e3a14 	movw	r3, #59924	; 0xea14
  1280a4:	e3403056 	movt	r3, #86	; 0x56
  1280a8:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
  MIB2_STATS_INC(mib2.udpinerrors);
  1280ac:	e30e3a14 	movw	r3, #59924	; 0xea14
  1280b0:	e3403056 	movt	r3, #86	; 0x56
  1280b4:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  1280b8:	e2832001 	add	r2, r3, #1
  1280bc:	e30e3a14 	movw	r3, #59924	; 0xea14
  1280c0:	e3403056 	movt	r3, #86	; 0x56
  1280c4:	e5832198 	str	r2, [r3, #408]	; 0x198
  pbuf_free(p);
  1280c8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1280cc:	ebffcb7a 	bl	11aebc <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
  1280d0:	e24bd008 	sub	sp, fp, #8
  1280d4:	e8bd8810 	pop	{r4, fp, pc}
  1280d8:	0014f60c 	.word	0x0014f60c
  1280dc:	0014f608 	.word	0x0014f608

001280e0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
  1280e0:	e92d4800 	push	{fp, lr}
  1280e4:	e28db004 	add	fp, sp, #4
  1280e8:	e24dd008 	sub	sp, sp, #8
  1280ec:	e50b0008 	str	r0, [fp, #-8]
  1280f0:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
  1280f4:	e51b3008 	ldr	r3, [fp, #-8]
  1280f8:	e3530000 	cmp	r3, #0
  1280fc:	1a000001 	bne	128108 <udp_send+0x28>
    return ERR_VAL;
  128100:	e3e03005 	mvn	r3, #5
  128104:	ea000007 	b	128128 <udp_send+0x48>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
  128108:	e51b3008 	ldr	r3, [fp, #-8]
  12810c:	e2832004 	add	r2, r3, #4
  128110:	e51b3008 	ldr	r3, [fp, #-8]
  128114:	e1d331b4 	ldrh	r3, [r3, #20]
  128118:	e51b100c 	ldr	r1, [fp, #-12]
  12811c:	e51b0008 	ldr	r0, [fp, #-8]
  128120:	eb000003 	bl	128134 <udp_sendto>
  128124:	e1a03000 	mov	r3, r0
}
  128128:	e1a00003 	mov	r0, r3
  12812c:	e24bd004 	sub	sp, fp, #4
  128130:	e8bd8800 	pop	{fp, pc}

00128134 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
  128134:	e92d4800 	push	{fp, lr}
  128138:	e28db004 	add	fp, sp, #4
  12813c:	e24dd020 	sub	sp, sp, #32
  128140:	e50b0010 	str	r0, [fp, #-16]
  128144:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128148:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  12814c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
  128150:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128154:	e50b3008 	str	r3, [fp, #-8]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  128158:	e51b3010 	ldr	r3, [fp, #-16]
  12815c:	e3530000 	cmp	r3, #0
  128160:	0a000002 	beq	128170 <udp_sendto+0x3c>
  128164:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128168:	e3530000 	cmp	r3, #0
  12816c:	1a000001 	bne	128178 <udp_sendto+0x44>
    return ERR_VAL;
  128170:	e3e03005 	mvn	r3, #5
  128174:	ea00002b 	b	128228 <udp_sendto+0xf4>
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

#if LWIP_IPV6 || (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS)
  if (ip_addr_ismulticast(dst_ip_route)) {
  128178:	e51b3008 	ldr	r3, [fp, #-8]
  12817c:	e5933000 	ldr	r3, [r3]
  128180:	e20330f0 	and	r3, r3, #240	; 0xf0
  128184:	e35300e0 	cmp	r3, #224	; 0xe0
  128188:	1a00000d 	bne	1281c4 <udp_sendto+0x90>
#if LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS
      /* IPv4 does not use source-based routing by default, so we use an
         administratively selected interface for multicast by default.
         However, this can be overridden by setting an interface address
         in pcb->multicast_ip that is used for routing. */
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  12818c:	e51b3010 	ldr	r3, [fp, #-16]
  128190:	e5933018 	ldr	r3, [r3, #24]
  128194:	e3530000 	cmp	r3, #0
  128198:	0a000009 	beq	1281c4 <udp_sendto+0x90>
          !ip4_addr_cmp(ip_2_ip4(&pcb->multicast_ip), IP4_ADDR_BROADCAST)) {
  12819c:	e51b3010 	ldr	r3, [fp, #-16]
  1281a0:	e5932018 	ldr	r2, [r3, #24]
  1281a4:	e3093914 	movw	r3, #39188	; 0x9914
  1281a8:	e3403014 	movt	r3, #20
  1281ac:	e5933000 	ldr	r3, [r3]
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  1281b0:	e1520003 	cmp	r2, r3
  1281b4:	0a000002 	beq	1281c4 <udp_sendto+0x90>
        dst_ip_route = &pcb->multicast_ip;
  1281b8:	e51b3010 	ldr	r3, [fp, #-16]
  1281bc:	e2833018 	add	r3, r3, #24
  1281c0:	e50b3008 	str	r3, [fp, #-8]
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
  1281c4:	e51b0008 	ldr	r0, [fp, #-8]
  1281c8:	eb0023f2 	bl	131198 <ip4_route>
  1281cc:	e50b000c 	str	r0, [fp, #-12]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
  1281d0:	e51b300c 	ldr	r3, [fp, #-12]
  1281d4:	e3530000 	cmp	r3, #0
  1281d8:	1a000009 	bne	128204 <udp_sendto+0xd0>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
  1281dc:	e30e3a14 	movw	r3, #59924	; 0xea14
  1281e0:	e3403056 	movt	r3, #86	; 0x56
  1281e4:	e1d33ab2 	ldrh	r3, [r3, #162]	; 0xa2
  1281e8:	e2833001 	add	r3, r3, #1
  1281ec:	e6ff2073 	uxth	r2, r3
  1281f0:	e30e3a14 	movw	r3, #59924	; 0xea14
  1281f4:	e3403056 	movt	r3, #86	; 0x56
  1281f8:	e1c32ab2 	strh	r2, [r3, #162]	; 0xa2
    return ERR_RTE;
  1281fc:	e3e03003 	mvn	r3, #3
  128200:	ea000008 	b	128228 <udp_sendto+0xf4>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
  128204:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  128208:	e51b300c 	ldr	r3, [fp, #-12]
  12820c:	e58d3000 	str	r3, [sp]
  128210:	e1a03002 	mov	r3, r2
  128214:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  128218:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12821c:	e51b0010 	ldr	r0, [fp, #-16]
  128220:	eb000003 	bl	128234 <udp_sendto_if>
  128224:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  128228:	e1a00003 	mov	r0, r3
  12822c:	e24bd004 	sub	sp, fp, #4
  128230:	e8bd8800 	pop	{fp, pc}

00128234 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
  128234:	e92d4800 	push	{fp, lr}
  128238:	e28db004 	add	fp, sp, #4
  12823c:	e24dd020 	sub	sp, sp, #32
  128240:	e50b0010 	str	r0, [fp, #-16]
  128244:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128248:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  12824c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  128250:	e51b3010 	ldr	r3, [fp, #-16]
  128254:	e3530000 	cmp	r3, #0
  128258:	0a000002 	beq	128268 <udp_sendto_if+0x34>
  12825c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128260:	e3530000 	cmp	r3, #0
  128264:	1a000001 	bne	128270 <udp_sendto_if+0x3c>
    return ERR_VAL;
  128268:	e3e03005 	mvn	r3, #5
  12826c:	ea000025 	b	128308 <udp_sendto_if+0xd4>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  128270:	e51b3010 	ldr	r3, [fp, #-16]
  128274:	e3530000 	cmp	r3, #0
  128278:	0a000008 	beq	1282a0 <udp_sendto_if+0x6c>
  12827c:	e51b3010 	ldr	r3, [fp, #-16]
  128280:	e5933000 	ldr	r3, [r3]
  128284:	e3530000 	cmp	r3, #0
  128288:	0a000004 	beq	1282a0 <udp_sendto_if+0x6c>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
  12828c:	e51b3010 	ldr	r3, [fp, #-16]
  128290:	e5933000 	ldr	r3, [r3]
  128294:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  128298:	e35300e0 	cmp	r3, #224	; 0xe0
  12829c:	1a000003 	bne	1282b0 <udp_sendto_if+0x7c>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
  1282a0:	e59b3004 	ldr	r3, [fp, #4]
  1282a4:	e2833004 	add	r3, r3, #4
  1282a8:	e50b3008 	str	r3, [fp, #-8]
  1282ac:	ea00000a 	b	1282dc <udp_sendto_if+0xa8>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
  1282b0:	e51b3010 	ldr	r3, [fp, #-16]
  1282b4:	e5932000 	ldr	r2, [r3]
  1282b8:	e59b3004 	ldr	r3, [fp, #4]
  1282bc:	e2833004 	add	r3, r3, #4
  1282c0:	e5933000 	ldr	r3, [r3]
  1282c4:	e1520003 	cmp	r2, r3
  1282c8:	0a000001 	beq	1282d4 <udp_sendto_if+0xa0>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
  1282cc:	e3e03003 	mvn	r3, #3
  1282d0:	ea00000c 	b	128308 <udp_sendto_if+0xd4>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  1282d4:	e51b3010 	ldr	r3, [fp, #-16]
  1282d8:	e50b3008 	str	r3, [fp, #-8]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
  1282dc:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  1282e0:	e51b3008 	ldr	r3, [fp, #-8]
  1282e4:	e58d3004 	str	r3, [sp, #4]
  1282e8:	e59b3004 	ldr	r3, [fp, #4]
  1282ec:	e58d3000 	str	r3, [sp]
  1282f0:	e1a03002 	mov	r3, r2
  1282f4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1282f8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1282fc:	e51b0010 	ldr	r0, [fp, #-16]
  128300:	eb000003 	bl	128314 <udp_sendto_if_src>
  128304:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  128308:	e1a00003 	mov	r0, r3
  12830c:	e24bd004 	sub	sp, fp, #4
  128310:	e8bd8800 	pop	{fp, pc}

00128314 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
  128314:	e92d4800 	push	{fp, lr}
  128318:	e28db004 	add	fp, sp, #4
  12831c:	e24dd030 	sub	sp, sp, #48	; 0x30
  128320:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  128324:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  128328:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12832c:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
  128330:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128334:	e3530000 	cmp	r3, #0
  128338:	0a000002 	beq	128348 <udp_sendto_if_src+0x34>
  12833c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128340:	e3530000 	cmp	r3, #0
  128344:	1a000001 	bne	128350 <udp_sendto_if_src+0x3c>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  128348:	e3e03005 	mvn	r3, #5
  12834c:	ea0000be 	b	12864c <udp_sendto_if_src+0x338>
  }

#if LWIP_IPV4 && IP_SOF_BROADCAST
  /* broadcast filter? */
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  128350:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128354:	e5d33008 	ldrb	r3, [r3, #8]
  128358:	e2033020 	and	r3, r3, #32
  12835c:	e3530000 	cmp	r3, #0
  128360:	1a000009 	bne	12838c <udp_sendto_if_src+0x78>
#if LWIP_IPV6
      IP_IS_V4(dst_ip) &&
#endif /* LWIP_IPV6 */
      ip_addr_isbroadcast(dst_ip, netif)) {
  128364:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128368:	e5933000 	ldr	r3, [r3]
  12836c:	e59b1004 	ldr	r1, [fp, #4]
  128370:	e1a00003 	mov	r0, r3
  128374:	eb002866 	bl	132514 <ip4_addr_isbroadcast_u32>
  128378:	e1a03000 	mov	r3, r0
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  12837c:	e3530000 	cmp	r3, #0
  128380:	0a000001 	beq	12838c <udp_sendto_if_src+0x78>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("udp_sendto_if: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
    return ERR_VAL;
  128384:	e3e03005 	mvn	r3, #5
  128388:	ea0000af 	b	12864c <udp_sendto_if_src+0x338>
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
  12838c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128390:	e1d331b2 	ldrh	r3, [r3, #18]
  128394:	e3530000 	cmp	r3, #0
  128398:	1a00000c 	bne	1283d0 <udp_sendto_if_src+0xbc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  12839c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1283a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1283a4:	e1d331b2 	ldrh	r3, [r3, #18]
  1283a8:	e1a02003 	mov	r2, r3
  1283ac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1283b0:	eb0000a8 	bl	128658 <udp_bind>
  1283b4:	e1a03000 	mov	r3, r0
  1283b8:	e54b300b 	strb	r3, [fp, #-11]
    if (err != ERR_OK) {
  1283bc:	e15b30db 	ldrsb	r3, [fp, #-11]
  1283c0:	e3530000 	cmp	r3, #0
  1283c4:	0a000001 	beq	1283d0 <udp_sendto_if_src+0xbc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
  1283c8:	e15b30db 	ldrsb	r3, [fp, #-11]
  1283cc:	ea00009e 	b	12864c <udp_sendto_if_src+0x338>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
  1283d0:	e3a01008 	mov	r1, #8
  1283d4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1283d8:	ebffca99 	bl	11ae44 <pbuf_header>
  1283dc:	e1a03000 	mov	r3, r0
  1283e0:	e3530000 	cmp	r3, #0
  1283e4:	0a000011 	beq	128430 <udp_sendto_if_src+0x11c>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
  1283e8:	e3a02000 	mov	r2, #0
  1283ec:	e3a01008 	mov	r1, #8
  1283f0:	e3a00001 	mov	r0, #1
  1283f4:	ebffc7a9 	bl	11a2a0 <pbuf_alloc>
  1283f8:	e50b0008 	str	r0, [fp, #-8]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  1283fc:	e51b3008 	ldr	r3, [fp, #-8]
  128400:	e3530000 	cmp	r3, #0
  128404:	1a000001 	bne	128410 <udp_sendto_if_src+0xfc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
  128408:	e3e03000 	mvn	r3, #0
  12840c:	ea00008e 	b	12864c <udp_sendto_if_src+0x338>
    }
    if (p->tot_len != 0) {
  128410:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128414:	e1d330b8 	ldrh	r3, [r3, #8]
  128418:	e3530000 	cmp	r3, #0
  12841c:	0a000005 	beq	128438 <udp_sendto_if_src+0x124>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
  128420:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128424:	e51b0008 	ldr	r0, [fp, #-8]
  128428:	ebffcba4 	bl	11b2c0 <pbuf_chain>
  12842c:	ea000001 	b	128438 <udp_sendto_if_src+0x124>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
  128430:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128434:	e50b3008 	str	r3, [fp, #-8]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
  128438:	e51b3008 	ldr	r3, [fp, #-8]
  12843c:	e1d330ba 	ldrh	r3, [r3, #10]
  128440:	e3530007 	cmp	r3, #7
  128444:	8a000006 	bhi	128464 <udp_sendto_if_src+0x150>
  128448:	e3080b08 	movw	r0, #35592	; 0x8b08
  12844c:	e3400014 	movt	r0, #20
  128450:	ebff6b2f 	bl	103114 <rt_kprintf>
  128454:	e3a01fb7 	mov	r1, #732	; 0x2dc
  128458:	e3080adc 	movw	r0, #35548	; 0x8adc
  12845c:	e3400014 	movt	r0, #20
  128460:	ebff8b22 	bl	10b0f0 <sys_arch_assert>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  128464:	e51b3008 	ldr	r3, [fp, #-8]
  128468:	e5933004 	ldr	r3, [r3, #4]
  12846c:	e50b3010 	str	r3, [fp, #-16]
  udphdr->src = lwip_htons(pcb->local_port);
  128470:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128474:	e1d331b2 	ldrh	r3, [r3, #18]
  128478:	e1a00003 	mov	r0, r3
  12847c:	ebffb857 	bl	1165e0 <lwip_htons>
  128480:	e1a03000 	mov	r3, r0
  128484:	e1a02003 	mov	r2, r3
  128488:	e51b3010 	ldr	r3, [fp, #-16]
  12848c:	e1c320b0 	strh	r2, [r3]
  udphdr->dest = lwip_htons(dst_port);
  128490:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  128494:	e1a00003 	mov	r0, r3
  128498:	ebffb850 	bl	1165e0 <lwip_htons>
  12849c:	e1a03000 	mov	r3, r0
  1284a0:	e1a02003 	mov	r2, r3
  1284a4:	e51b3010 	ldr	r3, [fp, #-16]
  1284a8:	e1c320b2 	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
  1284ac:	e51b3010 	ldr	r3, [fp, #-16]
  1284b0:	e3a02000 	mov	r2, #0
  1284b4:	e5c32006 	strb	r2, [r3, #6]
  1284b8:	e3a02000 	mov	r2, #0
  1284bc:	e5c32007 	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS) || (LWIP_IPV6 && LWIP_IPV6_MLD)
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
  1284c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1284c4:	e5d33010 	ldrb	r3, [r3, #16]
  1284c8:	e2033008 	and	r3, r3, #8
  1284cc:	e3530000 	cmp	r3, #0
  1284d0:	0a00000a 	beq	128500 <udp_sendto_if_src+0x1ec>
  1284d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1284d8:	e5933000 	ldr	r3, [r3]
  1284dc:	e20330f0 	and	r3, r3, #240	; 0xf0
  1284e0:	e35300e0 	cmp	r3, #224	; 0xe0
  1284e4:	1a000005 	bne	128500 <udp_sendto_if_src+0x1ec>
    q->flags |= PBUF_FLAG_MCASTLOOP;
  1284e8:	e51b3008 	ldr	r3, [fp, #-8]
  1284ec:	e5d3300d 	ldrb	r3, [r3, #13]
  1284f0:	e3833004 	orr	r3, r3, #4
  1284f4:	e6ef2073 	uxtb	r2, r3
  1284f8:	e51b3008 	ldr	r3, [fp, #-8]
  1284fc:	e5c3200d 	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
  128500:	e51b3008 	ldr	r3, [fp, #-8]
  128504:	e1d330b8 	ldrh	r3, [r3, #8]
  128508:	e1a00003 	mov	r0, r3
  12850c:	ebffb833 	bl	1165e0 <lwip_htons>
  128510:	e1a03000 	mov	r3, r0
  128514:	e1a02003 	mov	r2, r3
  128518:	e51b3010 	ldr	r3, [fp, #-16]
  12851c:	e1c320b4 	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
  128520:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128524:	e5d33010 	ldrb	r3, [r3, #16]
  128528:	e2033001 	and	r3, r3, #1
  12852c:	e3530000 	cmp	r3, #0
  128530:	1a000011 	bne	12857c <udp_sendto_if_src+0x268>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
  128534:	e51b3008 	ldr	r3, [fp, #-8]
  128538:	e1d320b8 	ldrh	r2, [r3, #8]
  12853c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128540:	e58d3000 	str	r3, [sp]
  128544:	e59b3008 	ldr	r3, [fp, #8]
  128548:	e3a01011 	mov	r1, #17
  12854c:	e51b0008 	ldr	r0, [fp, #-8]
  128550:	ebffc041 	bl	11865c <ip_chksum_pseudo>
  128554:	e1a03000 	mov	r3, r0
  128558:	e14b30ba 	strh	r3, [fp, #-10]
            src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
  12855c:	e15b30ba 	ldrh	r3, [fp, #-10]
  128560:	e3530000 	cmp	r3, #0
  128564:	1a000001 	bne	128570 <udp_sendto_if_src+0x25c>
          udpchksum = 0xffff;
  128568:	e3e03000 	mvn	r3, #0
  12856c:	e14b30ba 	strh	r3, [fp, #-10]
        }
        udphdr->chksum = udpchksum;
  128570:	e51b3010 	ldr	r3, [fp, #-16]
  128574:	e15b20ba 	ldrh	r2, [fp, #-10]
  128578:	e1c320b6 	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
  12857c:	e3a03011 	mov	r3, #17
  128580:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
  128584:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128588:	e5933000 	ldr	r3, [r3]
  12858c:	e20330f0 	and	r3, r3, #240	; 0xf0
  128590:	e35300e0 	cmp	r3, #224	; 0xe0
  128594:	1a000002 	bne	1285a4 <udp_sendto_if_src+0x290>
  128598:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12859c:	e5d3301c 	ldrb	r3, [r3, #28]
  1285a0:	ea000001 	b	1285ac <udp_sendto_if_src+0x298>
  1285a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1285a8:	e5d3300a 	ldrb	r3, [r3, #10]
  1285ac:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
  1285b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1285b4:	e5d33009 	ldrb	r3, [r3, #9]
  1285b8:	e55b1012 	ldrb	r1, [fp, #-18]	; 0xffffffee
  1285bc:	e59b2004 	ldr	r2, [fp, #4]
  1285c0:	e58d2008 	str	r2, [sp, #8]
  1285c4:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1285c8:	e58d2004 	str	r2, [sp, #4]
  1285cc:	e58d3000 	str	r3, [sp]
  1285d0:	e1a03001 	mov	r3, r1
  1285d4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1285d8:	e59b1008 	ldr	r1, [fp, #8]
  1285dc:	e51b0008 	ldr	r0, [fp, #-8]
  1285e0:	eb00260a 	bl	131e10 <ip4_output_if_src>
  1285e4:	e1a03000 	mov	r3, r0
  1285e8:	e54b300b 	strb	r3, [fp, #-11]
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);
  1285ec:	e30e3a14 	movw	r3, #59924	; 0xea14
  1285f0:	e3403056 	movt	r3, #86	; 0x56
  1285f4:	e593319c 	ldr	r3, [r3, #412]	; 0x19c
  1285f8:	e2832001 	add	r2, r3, #1
  1285fc:	e30e3a14 	movw	r3, #59924	; 0xea14
  128600:	e3403056 	movt	r3, #86	; 0x56
  128604:	e583219c 	str	r2, [r3, #412]	; 0x19c

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
  128608:	e51b2008 	ldr	r2, [fp, #-8]
  12860c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128610:	e1520003 	cmp	r2, r3
  128614:	0a000003 	beq	128628 <udp_sendto_if_src+0x314>
    /* free the header pbuf */
    pbuf_free(q);
  128618:	e51b0008 	ldr	r0, [fp, #-8]
  12861c:	ebffca26 	bl	11aebc <pbuf_free>
    q = NULL;
  128620:	e3a03000 	mov	r3, #0
  128624:	e50b3008 	str	r3, [fp, #-8]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  128628:	e30e3a14 	movw	r3, #59924	; 0xea14
  12862c:	e3403056 	movt	r3, #86	; 0x56
  128630:	e1d339b4 	ldrh	r3, [r3, #148]	; 0x94
  128634:	e2833001 	add	r3, r3, #1
  128638:	e6ff2073 	uxth	r2, r3
  12863c:	e30e3a14 	movw	r3, #59924	; 0xea14
  128640:	e3403056 	movt	r3, #86	; 0x56
  128644:	e1c329b4 	strh	r2, [r3, #148]	; 0x94
  return err;
  128648:	e15b30db 	ldrsb	r3, [fp, #-11]
}
  12864c:	e1a00003 	mov	r0, r3
  128650:	e24bd004 	sub	sp, fp, #4
  128654:	e8bd8800 	pop	{fp, pc}

00128658 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  128658:	e92d4800 	push	{fp, lr}
  12865c:	e28db004 	add	fp, sp, #4
  128660:	e24dd018 	sub	sp, sp, #24
  128664:	e50b0010 	str	r0, [fp, #-16]
  128668:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  12866c:	e1a03002 	mov	r3, r2
  128670:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  128674:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128678:	e3530000 	cmp	r3, #0
  12867c:	1a000002 	bne	12868c <udp_bind+0x34>
    ipaddr = IP4_ADDR_ANY;
  128680:	e3093910 	movw	r3, #39184	; 0x9910
  128684:	e3403014 	movt	r3, #20
  128688:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  12868c:	e51b3010 	ldr	r3, [fp, #-16]
  128690:	e3530000 	cmp	r3, #0
  128694:	0a000002 	beq	1286a4 <udp_bind+0x4c>
  128698:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12869c:	e3530000 	cmp	r3, #0
  1286a0:	1a000001 	bne	1286ac <udp_bind+0x54>
    return ERR_VAL;
  1286a4:	e3e03005 	mvn	r3, #5
  1286a8:	ea00005d 	b	128824 <udp_bind+0x1cc>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  1286ac:	e3a03000 	mov	r3, #0
  1286b0:	e54b3009 	strb	r3, [fp, #-9]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1286b4:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  1286b8:	e3403056 	movt	r3, #86	; 0x56
  1286bc:	e5933000 	ldr	r3, [r3]
  1286c0:	e50b3008 	str	r3, [fp, #-8]
  1286c4:	ea000009 	b	1286f0 <udp_bind+0x98>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
  1286c8:	e51b2010 	ldr	r2, [fp, #-16]
  1286cc:	e51b3008 	ldr	r3, [fp, #-8]
  1286d0:	e1520003 	cmp	r2, r3
  1286d4:	1a000002 	bne	1286e4 <udp_bind+0x8c>
      rebind = 1;
  1286d8:	e3a03001 	mov	r3, #1
  1286dc:	e54b3009 	strb	r3, [fp, #-9]
      break;
  1286e0:	ea000005 	b	1286fc <udp_bind+0xa4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1286e4:	e51b3008 	ldr	r3, [fp, #-8]
  1286e8:	e593300c 	ldr	r3, [r3, #12]
  1286ec:	e50b3008 	str	r3, [fp, #-8]
  1286f0:	e51b3008 	ldr	r3, [fp, #-8]
  1286f4:	e3530000 	cmp	r3, #0
  1286f8:	1afffff2 	bne	1286c8 <udp_bind+0x70>
    }
  }

  /* no port specified? */
  if (port == 0) {
  1286fc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  128700:	e3530000 	cmp	r3, #0
  128704:	1a000007 	bne	128728 <udp_bind+0xd0>
    port = udp_new_port();
  128708:	ebfffca8 	bl	1279b0 <udp_new_port>
  12870c:	e1a03000 	mov	r3, r0
  128710:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (port == 0) {
  128714:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  128718:	e3530000 	cmp	r3, #0
  12871c:	1a000027 	bne	1287c0 <udp_bind+0x168>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
  128720:	e3e03007 	mvn	r3, #7
  128724:	ea00003e 	b	128824 <udp_bind+0x1cc>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128728:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  12872c:	e3403056 	movt	r3, #86	; 0x56
  128730:	e5933000 	ldr	r3, [r3]
  128734:	e50b3008 	str	r3, [fp, #-8]
  128738:	ea00001d 	b	1287b4 <udp_bind+0x15c>
      if (pcb != ipcb) {
  12873c:	e51b2010 	ldr	r2, [fp, #-16]
  128740:	e51b3008 	ldr	r3, [fp, #-8]
  128744:	e1520003 	cmp	r2, r3
  128748:	0a000016 	beq	1287a8 <udp_bind+0x150>
      /* By default, we don't allow to bind to a port that any other udp
         PCB is already bound to, unless *all* PCBs with that port have tha
         REUSEADDR flag set. */
#if SO_REUSE
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  12874c:	e51b3010 	ldr	r3, [fp, #-16]
  128750:	e5d33008 	ldrb	r3, [r3, #8]
  128754:	e2033004 	and	r3, r3, #4
  128758:	e3530000 	cmp	r3, #0
  12875c:	0a000004 	beq	128774 <udp_bind+0x11c>
            !ip_get_option(ipcb, SOF_REUSEADDR))
  128760:	e51b3008 	ldr	r3, [fp, #-8]
  128764:	e5d33008 	ldrb	r3, [r3, #8]
  128768:	e2033004 	and	r3, r3, #4
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  12876c:	e3530000 	cmp	r3, #0
  128770:	1a00000c 	bne	1287a8 <udp_bind+0x150>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
  128774:	e51b3008 	ldr	r3, [fp, #-8]
  128778:	e1d331b2 	ldrh	r3, [r3, #18]
  12877c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  128780:	e1520003 	cmp	r2, r3
  128784:	1a000007 	bne	1287a8 <udp_bind+0x150>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
  128788:	e51b3008 	ldr	r3, [fp, #-8]
  12878c:	e5932000 	ldr	r2, [r3]
  128790:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128794:	e5933000 	ldr	r3, [r3]
          if ((ipcb->local_port == port) &&
  128798:	e1520003 	cmp	r2, r3
  12879c:	1a000001 	bne	1287a8 <udp_bind+0x150>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
  1287a0:	e3e03007 	mvn	r3, #7
  1287a4:	ea00001e 	b	128824 <udp_bind+0x1cc>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1287a8:	e51b3008 	ldr	r3, [fp, #-8]
  1287ac:	e593300c 	ldr	r3, [r3, #12]
  1287b0:	e50b3008 	str	r3, [fp, #-8]
  1287b4:	e51b3008 	ldr	r3, [fp, #-8]
  1287b8:	e3530000 	cmp	r3, #0
  1287bc:	1affffde 	bne	12873c <udp_bind+0xe4>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  1287c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1287c4:	e3530000 	cmp	r3, #0
  1287c8:	0a000002 	beq	1287d8 <udp_bind+0x180>
  1287cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1287d0:	e5933000 	ldr	r3, [r3]
  1287d4:	ea000000 	b	1287dc <udp_bind+0x184>
  1287d8:	e3a03000 	mov	r3, #0
  1287dc:	e51b2010 	ldr	r2, [fp, #-16]
  1287e0:	e5823000 	str	r3, [r2]

  pcb->local_port = port;
  1287e4:	e51b3010 	ldr	r3, [fp, #-16]
  1287e8:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1287ec:	e1c321b2 	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
  1287f0:	e55b3009 	ldrb	r3, [fp, #-9]
  1287f4:	e3530000 	cmp	r3, #0
  1287f8:	1a000008 	bne	128820 <udp_bind+0x1c8>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
  1287fc:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  128800:	e3403056 	movt	r3, #86	; 0x56
  128804:	e5932000 	ldr	r2, [r3]
  128808:	e51b3010 	ldr	r3, [fp, #-16]
  12880c:	e583200c 	str	r2, [r3, #12]
    udp_pcbs = pcb;
  128810:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  128814:	e3403056 	movt	r3, #86	; 0x56
  128818:	e51b2010 	ldr	r2, [fp, #-16]
  12881c:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
  128820:	e3a03000 	mov	r3, #0
}
  128824:	e1a00003 	mov	r0, r3
  128828:	e24bd004 	sub	sp, fp, #4
  12882c:	e8bd8800 	pop	{fp, pc}

00128830 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  128830:	e92d4800 	push	{fp, lr}
  128834:	e28db004 	add	fp, sp, #4
  128838:	e24dd018 	sub	sp, sp, #24
  12883c:	e50b0010 	str	r0, [fp, #-16]
  128840:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128844:	e1a03002 	mov	r3, r2
  128848:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  12884c:	e51b3010 	ldr	r3, [fp, #-16]
  128850:	e3530000 	cmp	r3, #0
  128854:	0a000002 	beq	128864 <udp_connect+0x34>
  128858:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12885c:	e3530000 	cmp	r3, #0
  128860:	1a000001 	bne	12886c <udp_connect+0x3c>
    return ERR_VAL;
  128864:	e3e03005 	mvn	r3, #5
  128868:	ea00003d 	b	128964 <udp_connect+0x134>
  }

  if (pcb->local_port == 0) {
  12886c:	e51b3010 	ldr	r3, [fp, #-16]
  128870:	e1d331b2 	ldrh	r3, [r3, #18]
  128874:	e3530000 	cmp	r3, #0
  128878:	1a00000c 	bne	1288b0 <udp_connect+0x80>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  12887c:	e51b1010 	ldr	r1, [fp, #-16]
  128880:	e51b3010 	ldr	r3, [fp, #-16]
  128884:	e1d331b2 	ldrh	r3, [r3, #18]
  128888:	e1a02003 	mov	r2, r3
  12888c:	e51b0010 	ldr	r0, [fp, #-16]
  128890:	ebffff70 	bl	128658 <udp_bind>
  128894:	e1a03000 	mov	r3, r0
  128898:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  12889c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  1288a0:	e3530000 	cmp	r3, #0
  1288a4:	0a000001 	beq	1288b0 <udp_connect+0x80>
      return err;
  1288a8:	e15b30d9 	ldrsb	r3, [fp, #-9]
  1288ac:	ea00002c 	b	128964 <udp_connect+0x134>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  1288b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1288b4:	e3530000 	cmp	r3, #0
  1288b8:	0a000002 	beq	1288c8 <udp_connect+0x98>
  1288bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1288c0:	e5933000 	ldr	r3, [r3]
  1288c4:	ea000000 	b	1288cc <udp_connect+0x9c>
  1288c8:	e3a03000 	mov	r3, #0
  1288cc:	e51b2010 	ldr	r2, [fp, #-16]
  1288d0:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  1288d4:	e51b3010 	ldr	r3, [fp, #-16]
  1288d8:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1288dc:	e1c321b4 	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
  1288e0:	e51b3010 	ldr	r3, [fp, #-16]
  1288e4:	e5d33010 	ldrb	r3, [r3, #16]
  1288e8:	e3833004 	orr	r3, r3, #4
  1288ec:	e6ef2073 	uxtb	r2, r3
  1288f0:	e51b3010 	ldr	r3, [fp, #-16]
  1288f4:	e5c32010 	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1288f8:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  1288fc:	e3403056 	movt	r3, #86	; 0x56
  128900:	e5933000 	ldr	r3, [r3]
  128904:	e50b3008 	str	r3, [fp, #-8]
  128908:	ea000008 	b	128930 <udp_connect+0x100>
    if (pcb == ipcb) {
  12890c:	e51b2010 	ldr	r2, [fp, #-16]
  128910:	e51b3008 	ldr	r3, [fp, #-8]
  128914:	e1520003 	cmp	r2, r3
  128918:	1a000001 	bne	128924 <udp_connect+0xf4>
      /* already on the list, just return */
      return ERR_OK;
  12891c:	e3a03000 	mov	r3, #0
  128920:	ea00000f 	b	128964 <udp_connect+0x134>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128924:	e51b3008 	ldr	r3, [fp, #-8]
  128928:	e593300c 	ldr	r3, [r3, #12]
  12892c:	e50b3008 	str	r3, [fp, #-8]
  128930:	e51b3008 	ldr	r3, [fp, #-8]
  128934:	e3530000 	cmp	r3, #0
  128938:	1afffff3 	bne	12890c <udp_connect+0xdc>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  12893c:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  128940:	e3403056 	movt	r3, #86	; 0x56
  128944:	e5932000 	ldr	r2, [r3]
  128948:	e51b3010 	ldr	r3, [fp, #-16]
  12894c:	e583200c 	str	r2, [r3, #12]
  udp_pcbs = pcb;
  128950:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  128954:	e3403056 	movt	r3, #86	; 0x56
  128958:	e51b2010 	ldr	r2, [fp, #-16]
  12895c:	e5832000 	str	r2, [r3]
  return ERR_OK;
  128960:	e3a03000 	mov	r3, #0
}
  128964:	e1a00003 	mov	r0, r3
  128968:	e24bd004 	sub	sp, fp, #4
  12896c:	e8bd8800 	pop	{fp, pc}

00128970 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
  128970:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128974:	e28db000 	add	fp, sp, #0
  128978:	e24dd00c 	sub	sp, sp, #12
  12897c:	e50b0008 	str	r0, [fp, #-8]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
  128980:	e51b3008 	ldr	r3, [fp, #-8]
  128984:	e3a02000 	mov	r2, #0
  128988:	e5832004 	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
  12898c:	e51b3008 	ldr	r3, [fp, #-8]
  128990:	e3a02000 	mov	r2, #0
  128994:	e1c321b4 	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
  128998:	e51b3008 	ldr	r3, [fp, #-8]
  12899c:	e5d33010 	ldrb	r3, [r3, #16]
  1289a0:	e3c33004 	bic	r3, r3, #4
  1289a4:	e6ef2073 	uxtb	r2, r3
  1289a8:	e51b3008 	ldr	r3, [fp, #-8]
  1289ac:	e5c32010 	strb	r2, [r3, #16]
}
  1289b0:	e320f000 	nop	{0}
  1289b4:	e28bd000 	add	sp, fp, #0
  1289b8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1289bc:	e12fff1e 	bx	lr

001289c0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  1289c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1289c4:	e28db000 	add	fp, sp, #0
  1289c8:	e24dd014 	sub	sp, sp, #20
  1289cc:	e50b0008 	str	r0, [fp, #-8]
  1289d0:	e50b100c 	str	r1, [fp, #-12]
  1289d4:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  1289d8:	e51b3008 	ldr	r3, [fp, #-8]
  1289dc:	e51b200c 	ldr	r2, [fp, #-12]
  1289e0:	e5832020 	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
  1289e4:	e51b3008 	ldr	r3, [fp, #-8]
  1289e8:	e51b2010 	ldr	r2, [fp, #-16]
  1289ec:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  1289f0:	e320f000 	nop	{0}
  1289f4:	e28bd000 	add	sp, fp, #0
  1289f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1289fc:	e12fff1e 	bx	lr

00128a00 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
  128a00:	e92d4800 	push	{fp, lr}
  128a04:	e28db004 	add	fp, sp, #4
  128a08:	e24dd010 	sub	sp, sp, #16
  128a0c:	e50b0010 	str	r0, [fp, #-16]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
  128a10:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  128a14:	e3403056 	movt	r3, #86	; 0x56
  128a18:	e5933000 	ldr	r3, [r3]
  128a1c:	e51b2010 	ldr	r2, [fp, #-16]
  128a20:	e1520003 	cmp	r2, r3
  128a24:	1a000007 	bne	128a48 <udp_remove+0x48>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
  128a28:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  128a2c:	e3403056 	movt	r3, #86	; 0x56
  128a30:	e5933000 	ldr	r3, [r3]
  128a34:	e593200c 	ldr	r2, [r3, #12]
  128a38:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  128a3c:	e3403056 	movt	r3, #86	; 0x56
  128a40:	e5832000 	str	r2, [r3]
  128a44:	ea000018 	b	128aac <udp_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  128a48:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  128a4c:	e3403056 	movt	r3, #86	; 0x56
  128a50:	e5933000 	ldr	r3, [r3]
  128a54:	e50b3008 	str	r3, [fp, #-8]
  128a58:	ea000010 	b	128aa0 <udp_remove+0xa0>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  128a5c:	e51b3008 	ldr	r3, [fp, #-8]
  128a60:	e593300c 	ldr	r3, [r3, #12]
  128a64:	e3530000 	cmp	r3, #0
  128a68:	0a000009 	beq	128a94 <udp_remove+0x94>
  128a6c:	e51b3008 	ldr	r3, [fp, #-8]
  128a70:	e593300c 	ldr	r3, [r3, #12]
  128a74:	e51b2010 	ldr	r2, [fp, #-16]
  128a78:	e1520003 	cmp	r2, r3
  128a7c:	1a000004 	bne	128a94 <udp_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  128a80:	e51b3010 	ldr	r3, [fp, #-16]
  128a84:	e593200c 	ldr	r2, [r3, #12]
  128a88:	e51b3008 	ldr	r3, [fp, #-8]
  128a8c:	e583200c 	str	r2, [r3, #12]
        break;
  128a90:	ea000005 	b	128aac <udp_remove+0xac>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  128a94:	e51b3008 	ldr	r3, [fp, #-8]
  128a98:	e593300c 	ldr	r3, [r3, #12]
  128a9c:	e50b3008 	str	r3, [fp, #-8]
  128aa0:	e51b3008 	ldr	r3, [fp, #-8]
  128aa4:	e3530000 	cmp	r3, #0
  128aa8:	1affffeb 	bne	128a5c <udp_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
  128aac:	e51b1010 	ldr	r1, [fp, #-16]
  128ab0:	e3a00001 	mov	r0, #1
  128ab4:	ebffc1f2 	bl	119284 <memp_free>
}
  128ab8:	e320f000 	nop	{0}
  128abc:	e24bd004 	sub	sp, fp, #4
  128ac0:	e8bd8800 	pop	{fp, pc}

00128ac4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
  128ac4:	e92d4800 	push	{fp, lr}
  128ac8:	e28db004 	add	fp, sp, #4
  128acc:	e24dd008 	sub	sp, sp, #8
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
  128ad0:	e3002452 	movw	r2, #1106	; 0x452
  128ad4:	e3081adc 	movw	r1, #35548	; 0x8adc
  128ad8:	e3401014 	movt	r1, #20
  128adc:	e3a00001 	mov	r0, #1
  128ae0:	ebffc17f 	bl	1190e4 <memp_malloc_fn>
  128ae4:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
  128ae8:	e51b3008 	ldr	r3, [fp, #-8]
  128aec:	e3530000 	cmp	r3, #0
  128af0:	0a000009 	beq	128b1c <udp_new+0x58>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
  128af4:	e3a02028 	mov	r2, #40	; 0x28
  128af8:	e3a01000 	mov	r1, #0
  128afc:	e51b0008 	ldr	r0, [fp, #-8]
  128b00:	eb0061dd 	bl	14127c <memset>
    pcb->ttl = UDP_TTL;
  128b04:	e51b3008 	ldr	r3, [fp, #-8]
  128b08:	e3e02000 	mvn	r2, #0
  128b0c:	e5c3200a 	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
  128b10:	e51b3008 	ldr	r3, [fp, #-8]
  128b14:	e3e02000 	mvn	r2, #0
  128b18:	e5c3201c 	strb	r2, [r3, #28]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
  128b1c:	e51b3008 	ldr	r3, [fp, #-8]
}
  128b20:	e1a00003 	mov	r0, r3
  128b24:	e24bd004 	sub	sp, fp, #4
  128b28:	e8bd8800 	pop	{fp, pc}

00128b2c <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
  128b2c:	e92d4800 	push	{fp, lr}
  128b30:	e28db004 	add	fp, sp, #4
  128b34:	e24dd010 	sub	sp, sp, #16
  128b38:	e1a03000 	mov	r3, r0
  128b3c:	e54b300d 	strb	r3, [fp, #-13]
  struct udp_pcb *pcb;
  pcb = udp_new();
  128b40:	ebffffdf 	bl	128ac4 <udp_new>
  128b44:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  128b48:	e51b3008 	ldr	r3, [fp, #-8]
}
  128b4c:	e1a00003 	mov	r0, r3
  128b50:	e24bd004 	sub	sp, fp, #4
  128b54:	e8bd8800 	pop	{fp, pc}

00128b58 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  128b58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128b5c:	e28db000 	add	fp, sp, #0
  128b60:	e24dd014 	sub	sp, sp, #20
  128b64:	e50b0010 	str	r0, [fp, #-16]
  128b68:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  128b6c:	e51b3010 	ldr	r3, [fp, #-16]
  128b70:	e3530000 	cmp	r3, #0
  128b74:	0a00001f 	beq	128bf8 <udp_netif_ip_addr_changed+0xa0>
  128b78:	e51b3010 	ldr	r3, [fp, #-16]
  128b7c:	e5933000 	ldr	r3, [r3]
  128b80:	e3530000 	cmp	r3, #0
  128b84:	0a00001b 	beq	128bf8 <udp_netif_ip_addr_changed+0xa0>
  128b88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128b8c:	e3530000 	cmp	r3, #0
  128b90:	0a000018 	beq	128bf8 <udp_netif_ip_addr_changed+0xa0>
  128b94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128b98:	e5933000 	ldr	r3, [r3]
  128b9c:	e3530000 	cmp	r3, #0
  128ba0:	0a000014 	beq	128bf8 <udp_netif_ip_addr_changed+0xa0>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  128ba4:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  128ba8:	e3403056 	movt	r3, #86	; 0x56
  128bac:	e5933000 	ldr	r3, [r3]
  128bb0:	e50b3008 	str	r3, [fp, #-8]
  128bb4:	ea00000c 	b	128bec <udp_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
  128bb8:	e51b3008 	ldr	r3, [fp, #-8]
  128bbc:	e5932000 	ldr	r2, [r3]
  128bc0:	e51b3010 	ldr	r3, [fp, #-16]
  128bc4:	e5933000 	ldr	r3, [r3]
  128bc8:	e1520003 	cmp	r2, r3
  128bcc:	1a000003 	bne	128be0 <udp_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
  128bd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128bd4:	e5932000 	ldr	r2, [r3]
  128bd8:	e51b3008 	ldr	r3, [fp, #-8]
  128bdc:	e5832000 	str	r2, [r3]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  128be0:	e51b3008 	ldr	r3, [fp, #-8]
  128be4:	e593300c 	ldr	r3, [r3, #12]
  128be8:	e50b3008 	str	r3, [fp, #-8]
  128bec:	e51b3008 	ldr	r3, [fp, #-8]
  128bf0:	e3530000 	cmp	r3, #0
  128bf4:	1affffef 	bne	128bb8 <udp_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  128bf8:	e320f000 	nop	{0}
  128bfc:	e28bd000 	add	sp, fp, #0
  128c00:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  128c04:	e12fff1e 	bx	lr

00128c08 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  128c08:	e92d4800 	push	{fp, lr}
  128c0c:	e28db004 	add	fp, sp, #4
  128c10:	e24dd018 	sub	sp, sp, #24
  128c14:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  128c18:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
  128c1c:	e3a0300e 	mov	r3, #14
  128c20:	e14b30b6 	strh	r3, [fp, #-6]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  128c24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128c28:	e1d330ba 	ldrh	r3, [r3, #10]
  128c2c:	e353000e 	cmp	r3, #14
  128c30:	8a000015 	bhi	128c8c <ethernet_input+0x84>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
  128c34:	e30e3a14 	movw	r3, #59924	; 0xea14
  128c38:	e3403056 	movt	r3, #86	; 0x56
  128c3c:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  128c40:	e2833001 	add	r3, r3, #1
  128c44:	e6ff2073 	uxth	r2, r3
  128c48:	e30e3a14 	movw	r3, #59924	; 0xea14
  128c4c:	e3403056 	movt	r3, #86	; 0x56
  128c50:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  128c54:	e30e3a14 	movw	r3, #59924	; 0xea14
  128c58:	e3403056 	movt	r3, #86	; 0x56
  128c5c:	e1d331be 	ldrh	r3, [r3, #30]
  128c60:	e2833001 	add	r3, r3, #1
  128c64:	e6ff2073 	uxth	r2, r3
  128c68:	e30e3a14 	movw	r3, #59924	; 0xea14
  128c6c:	e3403056 	movt	r3, #86	; 0x56
  128c70:	e1c321be 	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
  128c74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128c78:	e5933060 	ldr	r3, [r3, #96]	; 0x60
  128c7c:	e2832001 	add	r2, r3, #1
  128c80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128c84:	e5832060 	str	r2, [r3, #96]	; 0x60
    goto free_and_return;
  128c88:	ea000096 	b	128ee8 <ethernet_input+0x2e0>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  128c8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128c90:	e5933004 	ldr	r3, [r3, #4]
  128c94:	e50b300c 	str	r3, [fp, #-12]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
  128c98:	e51b300c 	ldr	r3, [fp, #-12]
  128c9c:	e5d3200c 	ldrb	r2, [r3, #12]
  128ca0:	e5d3300d 	ldrb	r3, [r3, #13]
  128ca4:	e1a03403 	lsl	r3, r3, #8
  128ca8:	e1833002 	orr	r3, r3, r2
  128cac:	e14b30be 	strh	r3, [fp, #-14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  128cb0:	e51b300c 	ldr	r3, [fp, #-12]
  128cb4:	e5d33000 	ldrb	r3, [r3]
  128cb8:	e2033001 	and	r3, r3, #1
  128cbc:	e3530000 	cmp	r3, #0
  128cc0:	0a000021 	beq	128d4c <ethernet_input+0x144>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
  128cc4:	e51b300c 	ldr	r3, [fp, #-12]
  128cc8:	e5d33000 	ldrb	r3, [r3]
  128ccc:	e3530001 	cmp	r3, #1
  128cd0:	1a00000e 	bne	128d10 <ethernet_input+0x108>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  128cd4:	e51b300c 	ldr	r3, [fp, #-12]
  128cd8:	e5d33001 	ldrb	r3, [r3, #1]
  128cdc:	e3530000 	cmp	r3, #0
  128ce0:	1a000019 	bne	128d4c <ethernet_input+0x144>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
  128ce4:	e51b300c 	ldr	r3, [fp, #-12]
  128ce8:	e5d33002 	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  128cec:	e353005e 	cmp	r3, #94	; 0x5e
  128cf0:	1a000015 	bne	128d4c <ethernet_input+0x144>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
  128cf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128cf8:	e5d3300d 	ldrb	r3, [r3, #13]
  128cfc:	e3833010 	orr	r3, r3, #16
  128d00:	e6ef2073 	uxtb	r2, r3
  128d04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128d08:	e5c3200d 	strb	r2, [r3, #13]
  128d0c:	ea00000e 	b	128d4c <ethernet_input+0x144>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  128d10:	e51b300c 	ldr	r3, [fp, #-12]
  128d14:	e3a02006 	mov	r2, #6
  128d18:	e3081b38 	movw	r1, #35640	; 0x8b38
  128d1c:	e3401014 	movt	r1, #20
  128d20:	e1a00003 	mov	r0, r3
  128d24:	eb0060db 	bl	141098 <memcmp>
  128d28:	e1a03000 	mov	r3, r0
  128d2c:	e3530000 	cmp	r3, #0
  128d30:	1a000005 	bne	128d4c <ethernet_input+0x144>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  128d34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128d38:	e5d3300d 	ldrb	r3, [r3, #13]
  128d3c:	e3833008 	orr	r3, r3, #8
  128d40:	e6ef2073 	uxtb	r2, r3
  128d44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128d48:	e5c3200d 	strb	r2, [r3, #13]
    }
  }

  switch (type) {
  128d4c:	e15b30be 	ldrh	r3, [fp, #-14]
  128d50:	e3530008 	cmp	r3, #8
  128d54:	0a000003 	beq	128d68 <ethernet_input+0x160>
  128d58:	e3002608 	movw	r2, #1544	; 0x608
  128d5c:	e1530002 	cmp	r3, r2
  128d60:	0a000019 	beq	128dcc <ethernet_input+0x1c4>
  128d64:	ea000042 	b	128e74 <ethernet_input+0x26c>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  128d68:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128d6c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  128d70:	e2033008 	and	r3, r3, #8
  128d74:	e3530000 	cmp	r3, #0
  128d78:	0a000055 	beq	128ed4 <ethernet_input+0x2cc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  128d7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128d80:	e1d330ba 	ldrh	r3, [r3, #10]
  128d84:	e1a02003 	mov	r2, r3
  128d88:	e15b30f6 	ldrsh	r3, [fp, #-6]
  128d8c:	e1520003 	cmp	r2, r3
  128d90:	ba000051 	blt	128edc <ethernet_input+0x2d4>
  128d94:	e15b30b6 	ldrh	r3, [fp, #-6]
  128d98:	e2633000 	rsb	r3, r3, #0
  128d9c:	e6ff3073 	uxth	r3, r3
  128da0:	e6bf3073 	sxth	r3, r3
  128da4:	e1a01003 	mov	r1, r3
  128da8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128dac:	ebffc824 	bl	11ae44 <pbuf_header>
  128db0:	e1a03000 	mov	r3, r0
  128db4:	e3530000 	cmp	r3, #0
  128db8:	1a000047 	bne	128edc <ethernet_input+0x2d4>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
  128dbc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128dc0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128dc4:	eb00219b 	bl	131438 <ip4_input>
      }
      break;
  128dc8:	ea00003f 	b	128ecc <ethernet_input+0x2c4>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  128dcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128dd0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  128dd4:	e2033008 	and	r3, r3, #8
  128dd8:	e3530000 	cmp	r3, #0
  128ddc:	0a000040 	beq	128ee4 <ethernet_input+0x2dc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  128de0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128de4:	e1d330ba 	ldrh	r3, [r3, #10]
  128de8:	e1a02003 	mov	r2, r3
  128dec:	e15b30f6 	ldrsh	r3, [fp, #-6]
  128df0:	e1520003 	cmp	r2, r3
  128df4:	ba000009 	blt	128e20 <ethernet_input+0x218>
  128df8:	e15b30b6 	ldrh	r3, [fp, #-6]
  128dfc:	e2633000 	rsb	r3, r3, #0
  128e00:	e6ff3073 	uxth	r3, r3
  128e04:	e6bf3073 	sxth	r3, r3
  128e08:	e1a01003 	mov	r1, r3
  128e0c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128e10:	ebffc80b 	bl	11ae44 <pbuf_header>
  128e14:	e1a03000 	mov	r3, r0
  128e18:	e3530000 	cmp	r3, #0
  128e1c:	0a000010 	beq	128e64 <ethernet_input+0x25c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
  128e20:	e30e3a14 	movw	r3, #59924	; 0xea14
  128e24:	e3403056 	movt	r3, #86	; 0x56
  128e28:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  128e2c:	e2833001 	add	r3, r3, #1
  128e30:	e6ff2073 	uxth	r2, r3
  128e34:	e30e3a14 	movw	r3, #59924	; 0xea14
  128e38:	e3403056 	movt	r3, #86	; 0x56
  128e3c:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
  128e40:	e30e3a14 	movw	r3, #59924	; 0xea14
  128e44:	e3403056 	movt	r3, #86	; 0x56
  128e48:	e1d331be 	ldrh	r3, [r3, #30]
  128e4c:	e2833001 	add	r3, r3, #1
  128e50:	e6ff2073 	uxth	r2, r3
  128e54:	e30e3a14 	movw	r3, #59924	; 0xea14
  128e58:	e3403056 	movt	r3, #86	; 0x56
  128e5c:	e1c321be 	strh	r2, [r3, #30]
        goto free_and_return;
  128e60:	ea000020 	b	128ee8 <ethernet_input+0x2e0>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
  128e64:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128e68:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128e6c:	eb0015a9 	bl	12e518 <etharp_input>
      }
      break;
  128e70:	ea000015 	b	128ecc <ethernet_input+0x2c4>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
  128e74:	e30e3a14 	movw	r3, #59924	; 0xea14
  128e78:	e3403056 	movt	r3, #86	; 0x56
  128e7c:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  128e80:	e2833001 	add	r3, r3, #1
  128e84:	e6ff2073 	uxth	r2, r3
  128e88:	e30e3a14 	movw	r3, #59924	; 0xea14
  128e8c:	e3403056 	movt	r3, #86	; 0x56
  128e90:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
  128e94:	e30e3a14 	movw	r3, #59924	; 0xea14
  128e98:	e3403056 	movt	r3, #86	; 0x56
  128e9c:	e1d331be 	ldrh	r3, [r3, #30]
  128ea0:	e2833001 	add	r3, r3, #1
  128ea4:	e6ff2073 	uxth	r2, r3
  128ea8:	e30e3a14 	movw	r3, #59924	; 0xea14
  128eac:	e3403056 	movt	r3, #86	; 0x56
  128eb0:	e1c321be 	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
  128eb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128eb8:	e5933064 	ldr	r3, [r3, #100]	; 0x64
  128ebc:	e2832001 	add	r2, r3, #1
  128ec0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128ec4:	e5832064 	str	r2, [r3, #100]	; 0x64
      goto free_and_return;
  128ec8:	ea000006 	b	128ee8 <ethernet_input+0x2e0>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
  128ecc:	e3a03000 	mov	r3, #0
  128ed0:	ea000007 	b	128ef4 <ethernet_input+0x2ec>
        goto free_and_return;
  128ed4:	e320f000 	nop	{0}
  128ed8:	ea000002 	b	128ee8 <ethernet_input+0x2e0>

free_and_return:
  128edc:	e320f000 	nop	{0}
  128ee0:	ea000000 	b	128ee8 <ethernet_input+0x2e0>
        goto free_and_return;
  128ee4:	e320f000 	nop	{0}
  pbuf_free(p);
  128ee8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128eec:	ebffc7f2 	bl	11aebc <pbuf_free>
  return ERR_OK;
  128ef0:	e3a03000 	mov	r3, #0
}
  128ef4:	e1a00003 	mov	r0, r3
  128ef8:	e24bd004 	sub	sp, fp, #4
  128efc:	e8bd8800 	pop	{fp, pc}

00128f00 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
  128f00:	e92d4800 	push	{fp, lr}
  128f04:	e28db004 	add	fp, sp, #4
  128f08:	e24dd018 	sub	sp, sp, #24
  128f0c:	e50b0010 	str	r0, [fp, #-16]
  128f10:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128f14:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  128f18:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
  128f1c:	e1db30b4 	ldrh	r3, [fp, #4]
  128f20:	e1a00003 	mov	r0, r3
  128f24:	ebffb5ad 	bl	1165e0 <lwip_htons>
  128f28:	e1a03000 	mov	r3, r0
  128f2c:	e14b30b6 	strh	r3, [fp, #-6]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
  128f30:	e3a0100e 	mov	r1, #14
  128f34:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  128f38:	ebffc7c1 	bl	11ae44 <pbuf_header>
  128f3c:	e1a03000 	mov	r3, r0
  128f40:	e3530000 	cmp	r3, #0
  128f44:	1a000022 	bne	128fd4 <ethernet_output+0xd4>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
  128f48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128f4c:	e5933004 	ldr	r3, [r3, #4]
  128f50:	e50b300c 	str	r3, [fp, #-12]
  ethhdr->type = eth_type_be;
  128f54:	e51b300c 	ldr	r3, [fp, #-12]
  128f58:	e15b20b6 	ldrh	r2, [fp, #-6]
  128f5c:	e1c320bc 	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
  128f60:	e51b300c 	ldr	r3, [fp, #-12]
  128f64:	e3a02006 	mov	r2, #6
  128f68:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128f6c:	e1a00003 	mov	r0, r3
  128f70:	eb005f89 	bl	140d9c <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
  128f74:	e51b300c 	ldr	r3, [fp, #-12]
  128f78:	e2833006 	add	r3, r3, #6
  128f7c:	e3a02006 	mov	r2, #6
  128f80:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  128f84:	e1a00003 	mov	r0, r3
  128f88:	eb005f83 	bl	140d9c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
  128f8c:	e51b3010 	ldr	r3, [fp, #-16]
  128f90:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  128f94:	e3530006 	cmp	r3, #6
  128f98:	0a000006 	beq	128fb8 <ethernet_output+0xb8>
  128f9c:	e3080b48 	movw	r0, #35656	; 0x8b48
  128fa0:	e3400014 	movt	r0, #20
  128fa4:	ebff685a 	bl	103114 <rt_kprintf>
  128fa8:	e300112e 	movw	r1, #302	; 0x12e
  128fac:	e3080b7c 	movw	r0, #35708	; 0x8b7c
  128fb0:	e3400014 	movt	r0, #20
  128fb4:	ebff884d 	bl	10b0f0 <sys_arch_assert>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
  128fb8:	e51b3010 	ldr	r3, [fp, #-16]
  128fbc:	e5933018 	ldr	r3, [r3, #24]
  128fc0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  128fc4:	e51b0010 	ldr	r0, [fp, #-16]
  128fc8:	e12fff33 	blx	r3
  128fcc:	e1a03000 	mov	r3, r0
  128fd0:	ea000009 	b	128ffc <ethernet_output+0xfc>
      goto pbuf_header_failed;
  128fd4:	e320f000 	nop	{0}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  128fd8:	e30e3a14 	movw	r3, #59924	; 0xea14
  128fdc:	e3403056 	movt	r3, #86	; 0x56
  128fe0:	e1d330ba 	ldrh	r3, [r3, #10]
  128fe4:	e2833001 	add	r3, r3, #1
  128fe8:	e6ff2073 	uxth	r2, r3
  128fec:	e30e3a14 	movw	r3, #59924	; 0xea14
  128ff0:	e3403056 	movt	r3, #86	; 0x56
  128ff4:	e1c320ba 	strh	r2, [r3, #10]
  return ERR_BUF;
  128ff8:	e3e03001 	mvn	r3, #1
}
  128ffc:	e1a00003 	mov	r0, r3
  129000:	e24bd004 	sub	sp, fp, #4
  129004:	e8bd8800 	pop	{fp, pc}

00129008 <lwip_netdev_set_up>:
#include "lwip/netdb.h"
#include "../../../netdev/netdev.h"
#include "../../../netdev/eth_device_manager.h"

static int lwip_netdev_set_up(struct netdev *netif)
{
  129008:	e92d4800 	push	{fp, lr}
  12900c:	e28db004 	add	fp, sp, #4
  129010:	e24dd008 	sub	sp, sp, #8
  129014:	e50b0008 	str	r0, [fp, #-8]
    netif_set_up((struct netif *)netif->user_data);
  129018:	e51b3008 	ldr	r3, [fp, #-8]
  12901c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129020:	e1a00003 	mov	r0, r3
  129024:	ebffc26a 	bl	1199d4 <netif_set_up>
    return ERR_OK;
  129028:	e3a03000 	mov	r3, #0
}
  12902c:	e1a00003 	mov	r0, r3
  129030:	e24bd004 	sub	sp, fp, #4
  129034:	e8bd8800 	pop	{fp, pc}

00129038 <lwip_netdev_set_down>:

static int lwip_netdev_set_down(struct netdev *netif)
{
  129038:	e92d4800 	push	{fp, lr}
  12903c:	e28db004 	add	fp, sp, #4
  129040:	e24dd008 	sub	sp, sp, #8
  129044:	e50b0008 	str	r0, [fp, #-8]
    netif_set_down((struct netif *)netif->user_data);
  129048:	e51b3008 	ldr	r3, [fp, #-8]
  12904c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129050:	e1a00003 	mov	r0, r3
  129054:	ebffc2b3 	bl	119b28 <netif_set_down>
    return ERR_OK;
  129058:	e3a03000 	mov	r3, #0
}
  12905c:	e1a00003 	mov	r0, r3
  129060:	e24bd004 	sub	sp, fp, #4
  129064:	e8bd8800 	pop	{fp, pc}

00129068 <lwip_netdev_set_addr_info>:

static int lwip_netdev_set_addr_info(struct netdev *netif, ip_addr_t *ip_addr, ip_addr_t *netmask, ip_addr_t *gw)
{
  129068:	e92d4800 	push	{fp, lr}
  12906c:	e28db004 	add	fp, sp, #4
  129070:	e24dd010 	sub	sp, sp, #16
  129074:	e50b0008 	str	r0, [fp, #-8]
  129078:	e50b100c 	str	r1, [fp, #-12]
  12907c:	e50b2010 	str	r2, [fp, #-16]
  129080:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (ip_addr && netmask && gw)
  129084:	e51b300c 	ldr	r3, [fp, #-12]
  129088:	e3530000 	cmp	r3, #0
  12908c:	0a00000c 	beq	1290c4 <lwip_netdev_set_addr_info+0x5c>
  129090:	e51b3010 	ldr	r3, [fp, #-16]
  129094:	e3530000 	cmp	r3, #0
  129098:	0a000009 	beq	1290c4 <lwip_netdev_set_addr_info+0x5c>
  12909c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1290a0:	e3530000 	cmp	r3, #0
  1290a4:	0a000006 	beq	1290c4 <lwip_netdev_set_addr_info+0x5c>
    {
        netif_set_addr((struct netif *)netif->user_data, ip_2_ip4(ip_addr), ip_2_ip4(netmask), ip_2_ip4(gw));
  1290a8:	e51b3008 	ldr	r3, [fp, #-8]
  1290ac:	e5930040 	ldr	r0, [r3, #64]	; 0x40
  1290b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1290b4:	e51b2010 	ldr	r2, [fp, #-16]
  1290b8:	e51b100c 	ldr	r1, [fp, #-12]
  1290bc:	ebffc110 	bl	119504 <netif_set_addr>
  1290c0:	ea000017 	b	129124 <lwip_netdev_set_addr_info+0xbc>
    }
    else
    {
        if (ip_addr)
  1290c4:	e51b300c 	ldr	r3, [fp, #-12]
  1290c8:	e3530000 	cmp	r3, #0
  1290cc:	0a000004 	beq	1290e4 <lwip_netdev_set_addr_info+0x7c>
        {
            netif_set_ipaddr((struct netif *)netif->user_data, ip_2_ip4(ip_addr));
  1290d0:	e51b3008 	ldr	r3, [fp, #-8]
  1290d4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  1290d8:	e51b100c 	ldr	r1, [fp, #-12]
  1290dc:	e1a00003 	mov	r0, r3
  1290e0:	ebffc1b6 	bl	1197c0 <netif_set_ipaddr>
        }

        if (netmask)
  1290e4:	e51b3010 	ldr	r3, [fp, #-16]
  1290e8:	e3530000 	cmp	r3, #0
  1290ec:	0a000004 	beq	129104 <lwip_netdev_set_addr_info+0x9c>
        {
            netif_set_netmask((struct netif *)netif->user_data, ip_2_ip4(netmask));
  1290f0:	e51b3008 	ldr	r3, [fp, #-8]
  1290f4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  1290f8:	e51b1010 	ldr	r1, [fp, #-16]
  1290fc:	e1a00003 	mov	r0, r3
  129100:	ebffc20e 	bl	119940 <netif_set_netmask>
        }

        if (gw)
  129104:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129108:	e3530000 	cmp	r3, #0
  12910c:	0a000004 	beq	129124 <lwip_netdev_set_addr_info+0xbc>
        {
            netif_set_gw((struct netif *)netif->user_data, ip_2_ip4(gw));
  129110:	e51b3008 	ldr	r3, [fp, #-8]
  129114:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129118:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12911c:	e1a00003 	mov	r0, r3
  129120:	ebffc1ed 	bl	1198dc <netif_set_gw>
        }
    }

    return ERR_OK;
  129124:	e3a03000 	mov	r3, #0
}
  129128:	e1a00003 	mov	r0, r3
  12912c:	e24bd004 	sub	sp, fp, #4
  129130:	e8bd8800 	pop	{fp, pc}

00129134 <lwip_netdev_set_dns_server>:

#ifdef RT_LWIP_DNS
static int lwip_netdev_set_dns_server(struct netdev *netif, uint8_t dns_num, ip_addr_t *dns_server)
{
  129134:	e92d4800 	push	{fp, lr}
  129138:	e28db004 	add	fp, sp, #4
  12913c:	e24dd010 	sub	sp, sp, #16
  129140:	e50b0008 	str	r0, [fp, #-8]
  129144:	e1a03001 	mov	r3, r1
  129148:	e50b2010 	str	r2, [fp, #-16]
  12914c:	e54b3009 	strb	r3, [fp, #-9]
    extern void dns_setserver(uint8_t dns_num, const ip_addr_t *dns_server);
    dns_setserver(dns_num, dns_server);
  129150:	e55b3009 	ldrb	r3, [fp, #-9]
  129154:	e51b1010 	ldr	r1, [fp, #-16]
  129158:	e1a00003 	mov	r0, r3
  12915c:	ebffb625 	bl	1169f8 <dns_setserver>
    return ERR_OK;
  129160:	e3a03000 	mov	r3, #0
}
  129164:	e1a00003 	mov	r0, r3
  129168:	e24bd004 	sub	sp, fp, #4
  12916c:	e8bd8800 	pop	{fp, pc}

00129170 <lwip_netdev_set_dhcp>:
#endif /* RT_LWIP_DNS */

#ifdef RT_LWIP_DHCP
static int lwip_netdev_set_dhcp(struct netdev *netif, rt_bool_t is_enabled)
{
  129170:	e92d4800 	push	{fp, lr}
  129174:	e28db004 	add	fp, sp, #4
  129178:	e24dd008 	sub	sp, sp, #8
  12917c:	e50b0008 	str	r0, [fp, #-8]
  129180:	e50b100c 	str	r1, [fp, #-12]
    if(RT_TRUE == is_enabled)
  129184:	e51b300c 	ldr	r3, [fp, #-12]
  129188:	e3530001 	cmp	r3, #1
  12918c:	1a000004 	bne	1291a4 <lwip_netdev_set_dhcp+0x34>
    {
        dhcp_start((struct netif *)netif->user_data);
  129190:	e51b3008 	ldr	r3, [fp, #-8]
  129194:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129198:	e1a00003 	mov	r0, r3
  12919c:	eb0006d5 	bl	12acf8 <dhcp_start>
  1291a0:	ea000003 	b	1291b4 <lwip_netdev_set_dhcp+0x44>
    }
    else
    {
        dhcp_stop((struct netif *)netif->user_data);
  1291a4:	e51b3008 	ldr	r3, [fp, #-8]
  1291a8:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  1291ac:	e1a00003 	mov	r0, r3
  1291b0:	eb000b48 	bl	12bed8 <dhcp_stop>
    }
    netdev_low_level_set_dhcp_status(netif, is_enabled);
  1291b4:	e51b100c 	ldr	r1, [fp, #-12]
  1291b8:	e51b0008 	ldr	r0, [fp, #-8]
  1291bc:	ebff7511 	bl	106608 <netdev_low_level_set_dhcp_status>
    return ERR_OK;
  1291c0:	e3a03000 	mov	r3, #0
}
  1291c4:	e1a00003 	mov	r0, r3
  1291c8:	e24bd004 	sub	sp, fp, #4
  1291cc:	e8bd8800 	pop	{fp, pc}

001291d0 <lwip_netdev_ping>:
extern int lwip_ping_recv(int s, int *ttl);
extern err_t lwip_ping_send(int s, ip_addr_t *addr, int size);

int lwip_netdev_ping(struct netdev *netif, const char *host, size_t data_len, 
                        uint32_t timeout, struct netdev_ping_resp *ping_resp)
{
  1291d0:	e92d4800 	push	{fp, lr}
  1291d4:	e28db004 	add	fp, sp, #4
  1291d8:	e24dd070 	sub	sp, sp, #112	; 0x70
  1291dc:	e50b0060 	str	r0, [fp, #-96]	; 0xffffffa0
  1291e0:	e50b1064 	str	r1, [fp, #-100]	; 0xffffff9c
  1291e4:	e50b2068 	str	r2, [fp, #-104]	; 0xffffff98
  1291e8:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
    int s, ttl, recv_len, result = 0;
  1291ec:	e3a03000 	mov	r3, #0
  1291f0:	e50b3008 	str	r3, [fp, #-8]
    int elapsed_time;
    rt_tick_t recv_start_tick;
#if LWIP_VERSION_MAJOR >= 2U
    struct timeval recv_timeout = { timeout / RT_TICK_PER_SECOND, timeout % RT_TICK_PER_SECOND };
  1291f4:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
  1291f8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1291fc:	e3413062 	movt	r3, #4194	; 0x1062
  129200:	e0832392 	umull	r2, r3, r2, r3
  129204:	e1a03323 	lsr	r3, r3, #6
  129208:	e1a02003 	mov	r2, r3
  12920c:	e3a03000 	mov	r3, #0
  129210:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
  129214:	e51b106c 	ldr	r1, [fp, #-108]	; 0xffffff94
  129218:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  12921c:	e3413062 	movt	r3, #4194	; 0x1062
  129220:	e0832391 	umull	r2, r3, r1, r3
  129224:	e1a03323 	lsr	r3, r3, #6
  129228:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  12922c:	e0030392 	mul	r3, r2, r3
  129230:	e0413003 	sub	r3, r1, r3
  129234:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#else
    int recv_timeout = timeout * 1000UL / RT_TICK_PER_SECOND;
#endif
    ip_addr_t target_addr;
    struct addrinfo hint, *res = RT_NULL;
  129238:	e3a03000 	mov	r3, #0
  12923c:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac
    struct sockaddr_in *h = RT_NULL;
  129240:	e3a03000 	mov	r3, #0
  129244:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
    struct in_addr ina;
    
    RT_ASSERT(netif);
  129248:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  12924c:	e3530000 	cmp	r3, #0
  129250:	1a000005 	bne	12926c <lwip_netdev_ping+0x9c>
  129254:	e3a020ca 	mov	r2, #202	; 0xca
  129258:	e3081cc0 	movw	r1, #36032	; 0x8cc0
  12925c:	e3401014 	movt	r1, #20
  129260:	e3080bb0 	movw	r0, #35760	; 0x8bb0
  129264:	e3400014 	movt	r0, #20
  129268:	ebff68ca 	bl	103598 <rt_assert_handler>
    RT_ASSERT(host);
  12926c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  129270:	e3530000 	cmp	r3, #0
  129274:	1a000005 	bne	129290 <lwip_netdev_ping+0xc0>
  129278:	e3a020cb 	mov	r2, #203	; 0xcb
  12927c:	e3081cc0 	movw	r1, #36032	; 0x8cc0
  129280:	e3401014 	movt	r1, #20
  129284:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  129288:	e3400014 	movt	r0, #20
  12928c:	ebff68c1 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ping_resp);
  129290:	e59b3004 	ldr	r3, [fp, #4]
  129294:	e3530000 	cmp	r3, #0
  129298:	1a000005 	bne	1292b4 <lwip_netdev_ping+0xe4>
  12929c:	e3a020cc 	mov	r2, #204	; 0xcc
  1292a0:	e3081cc0 	movw	r1, #36032	; 0x8cc0
  1292a4:	e3401014 	movt	r1, #20
  1292a8:	e3080bc0 	movw	r0, #35776	; 0x8bc0
  1292ac:	e3400014 	movt	r0, #20
  1292b0:	ebff68b8 	bl	103598 <rt_assert_handler>

    rt_memset(&hint, 0x00, sizeof(hint));
  1292b4:	e24b3050 	sub	r3, fp, #80	; 0x50
  1292b8:	e3a02020 	mov	r2, #32
  1292bc:	e3a01000 	mov	r1, #0
  1292c0:	e1a00003 	mov	r0, r3
  1292c4:	ebff67ff 	bl	1032c8 <rt_memset>
    /* convert URL to IP */
    if (lwip_getaddrinfo(host, RT_NULL, &hint, &res) != 0)
  1292c8:	e24b3054 	sub	r3, fp, #84	; 0x54
  1292cc:	e24b2050 	sub	r2, fp, #80	; 0x50
  1292d0:	e3a01000 	mov	r1, #0
  1292d4:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
  1292d8:	ebff9d43 	bl	1107ec <lwip_getaddrinfo>
  1292dc:	e1a03000 	mov	r3, r0
  1292e0:	e3530000 	cmp	r3, #0
  1292e4:	0a000001 	beq	1292f0 <lwip_netdev_ping+0x120>
    {
        return -RT_ERROR;
  1292e8:	e3e03000 	mvn	r3, #0
  1292ec:	ea000064 	b	129484 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&h, &res->ai_addr, sizeof(struct sockaddr_in *));
  1292f0:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  1292f4:	e2831014 	add	r1, r3, #20
  1292f8:	e24b3058 	sub	r3, fp, #88	; 0x58
  1292fc:	e3a02004 	mov	r2, #4
  129300:	e1a00003 	mov	r0, r3
  129304:	ebff67fd 	bl	103300 <rt_memcpy>
    rt_memcpy(&ina, &h->sin_addr, sizeof(ina));
  129308:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12930c:	e2831004 	add	r1, r3, #4
  129310:	e24b305c 	sub	r3, fp, #92	; 0x5c
  129314:	e3a02004 	mov	r2, #4
  129318:	e1a00003 	mov	r0, r3
  12931c:	ebff67f7 	bl	103300 <rt_memcpy>
    lwip_freeaddrinfo(res);
  129320:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  129324:	e1a00003 	mov	r0, r3
  129328:	ebff9d1c 	bl	1107a0 <lwip_freeaddrinfo>
    if (inet_aton(inet_ntoa(ina), &target_addr) == 0)
  12932c:	e24b305c 	sub	r3, fp, #92	; 0x5c
  129330:	e1a00003 	mov	r0, r3
  129334:	eb0025f0 	bl	132afc <ip4addr_ntoa>
  129338:	e1a02000 	mov	r2, r0
  12933c:	e24b3030 	sub	r3, fp, #48	; 0x30
  129340:	e1a01003 	mov	r1, r3
  129344:	e1a00002 	mov	r0, r2
  129348:	eb0024e7 	bl	1326ec <ip4addr_aton>
  12934c:	e1a03000 	mov	r3, r0
  129350:	e3530000 	cmp	r3, #0
  129354:	1a000001 	bne	129360 <lwip_netdev_ping+0x190>
    {
        return -RT_ERROR;
  129358:	e3e03000 	mvn	r3, #0
  12935c:	ea000048 	b	129484 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&(ping_resp->ip_addr), &target_addr, sizeof(ip_addr_t));
  129360:	e59b3004 	ldr	r3, [fp, #4]
  129364:	e24b1030 	sub	r1, fp, #48	; 0x30
  129368:	e3a02004 	mov	r2, #4
  12936c:	e1a00003 	mov	r0, r3
  129370:	ebff67e2 	bl	103300 <rt_memcpy>
    
    /* new a socket */
    if ((s = lwip_socket(AF_INET, SOCK_RAW, IP_PROTO_ICMP)) < 0)
  129374:	e3a02001 	mov	r2, #1
  129378:	e3a01003 	mov	r1, #3
  12937c:	e3a00002 	mov	r0, #2
  129380:	ebffa65a 	bl	112cf0 <lwip_socket>
  129384:	e50b000c 	str	r0, [fp, #-12]
  129388:	e51b300c 	ldr	r3, [fp, #-12]
  12938c:	e3530000 	cmp	r3, #0
  129390:	aa000001 	bge	12939c <lwip_netdev_ping+0x1cc>
    {
        return -RT_ERROR;
  129394:	e3e03000 	mvn	r3, #0
  129398:	ea000039 	b	129484 <lwip_netdev_ping+0x2b4>
    }

    lwip_setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &recv_timeout, sizeof(recv_timeout));
  12939c:	e24b202c 	sub	r2, fp, #44	; 0x2c
  1293a0:	e3a03010 	mov	r3, #16
  1293a4:	e58d3000 	str	r3, [sp]
  1293a8:	e1a03002 	mov	r3, r2
  1293ac:	e3012006 	movw	r2, #4102	; 0x1006
  1293b0:	e3001fff 	movw	r1, #4095	; 0xfff
  1293b4:	e51b000c 	ldr	r0, [fp, #-12]
  1293b8:	ebffae2a 	bl	114c68 <lwip_setsockopt>

    if (lwip_ping_send(s, &target_addr, data_len) == ERR_OK)
  1293bc:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
  1293c0:	e24b3030 	sub	r3, fp, #48	; 0x30
  1293c4:	e1a01003 	mov	r1, r3
  1293c8:	e51b000c 	ldr	r0, [fp, #-12]
  1293cc:	eb002c05 	bl	1343e8 <lwip_ping_send>
  1293d0:	e1a03000 	mov	r3, r0
  1293d4:	e3530000 	cmp	r3, #0
  1293d8:	1a000023 	bne	12946c <lwip_netdev_ping+0x29c>
    {
        recv_start_tick = rt_tick_get();
  1293dc:	ebff629f 	bl	101e60 <rt_tick_get>
  1293e0:	e50b0010 	str	r0, [fp, #-16]
        if ((recv_len = lwip_ping_recv(s, &ttl)) >= 0)
  1293e4:	e24b301c 	sub	r3, fp, #28
  1293e8:	e1a01003 	mov	r1, r3
  1293ec:	e51b000c 	ldr	r0, [fp, #-12]
  1293f0:	eb002c3a 	bl	1344e0 <lwip_ping_recv>
  1293f4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1293f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1293fc:	e3530000 	cmp	r3, #0
  129400:	ba000016 	blt	129460 <lwip_netdev_ping+0x290>
        {
            elapsed_time = (rt_tick_get() - recv_start_tick) * 1000UL / RT_TICK_PER_SECOND;
  129404:	ebff6295 	bl	101e60 <rt_tick_get>
  129408:	e1a02000 	mov	r2, r0
  12940c:	e51b3010 	ldr	r3, [fp, #-16]
  129410:	e0423003 	sub	r3, r2, r3
  129414:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  129418:	e0020392 	mul	r2, r2, r3
  12941c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  129420:	e3413062 	movt	r3, #4194	; 0x1062
  129424:	e0832392 	umull	r2, r3, r2, r3
  129428:	e1a03323 	lsr	r3, r3, #6
  12942c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            ping_resp->data_len = recv_len;
  129430:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129434:	e6ff2073 	uxth	r2, r3
  129438:	e59b3004 	ldr	r3, [fp, #4]
  12943c:	e1c320b4 	strh	r2, [r3, #4]
            ping_resp->ttl = ttl;
  129440:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  129444:	e6ff2073 	uxth	r2, r3
  129448:	e59b3004 	ldr	r3, [fp, #4]
  12944c:	e1c320b6 	strh	r2, [r3, #6]
            ping_resp->ticks = elapsed_time;
  129450:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  129454:	e59b3004 	ldr	r3, [fp, #4]
  129458:	e5832008 	str	r2, [r3, #8]
  12945c:	ea000005 	b	129478 <lwip_netdev_ping+0x2a8>
        }
        else
        {
            result = -RT_ETIMEOUT;
  129460:	e3e03001 	mvn	r3, #1
  129464:	e50b3008 	str	r3, [fp, #-8]
            goto __exit;
  129468:	ea000002 	b	129478 <lwip_netdev_ping+0x2a8>
        }
    }
    else
    {
        result = -RT_ETIMEOUT;
  12946c:	e3e03001 	mvn	r3, #1
  129470:	e50b3008 	str	r3, [fp, #-8]
        goto __exit;
  129474:	e320f000 	nop	{0}
    }

__exit:
    lwip_close(s);
  129478:	e51b000c 	ldr	r0, [fp, #-12]
  12947c:	ebffa105 	bl	111898 <lwip_close>

    return result;
  129480:	e51b3008 	ldr	r3, [fp, #-8]
}
  129484:	e1a00003 	mov	r0, r3
  129488:	e24bd004 	sub	sp, fp, #4
  12948c:	e8bd8800 	pop	{fp, pc}

00129490 <lwip_netdev_set_default>:
// }
// #endif /* RT_LWIP_TCP || RT_LWIP_UDP */
#endif /* RT_USING_FINSH */

static int lwip_netdev_set_default(struct netdev *netif)
{
  129490:	e92d4800 	push	{fp, lr}
  129494:	e28db004 	add	fp, sp, #4
  129498:	e24dd008 	sub	sp, sp, #8
  12949c:	e50b0008 	str	r0, [fp, #-8]
    netif_set_default((struct netif *)netif->user_data);
  1294a0:	e51b3008 	ldr	r3, [fp, #-8]
  1294a4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  1294a8:	e1a00003 	mov	r0, r3
  1294ac:	ebffc13c 	bl	1199a4 <netif_set_default>
    return ERR_OK;
  1294b0:	e3a03000 	mov	r3, #0
}
  1294b4:	e1a00003 	mov	r0, r3
  1294b8:	e24bd004 	sub	sp, fp, #4
  1294bc:	e8bd8800 	pop	{fp, pc}

001294c0 <netdev_add>:

    lwip_netdev_set_default,
};

static int netdev_add(struct netif *lwip_netif)
{
  1294c0:	e92d4800 	push	{fp, lr}
  1294c4:	e28db004 	add	fp, sp, #4
  1294c8:	e24dd018 	sub	sp, sp, #24
  1294cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#define LWIP_NETIF_NAME_LEN 2
    int result = 0;
  1294d0:	e3a03000 	mov	r3, #0
  1294d4:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1294d8:	e3a03000 	mov	r3, #0
  1294dc:	e50b300c 	str	r3, [fp, #-12]
    char name[LWIP_NETIF_NAME_LEN + 1] = {0};
  1294e0:	e24b3010 	sub	r3, fp, #16
  1294e4:	e3a02000 	mov	r2, #0
  1294e8:	e1c320b0 	strh	r2, [r3]
  1294ec:	e5c32002 	strb	r2, [r3, #2]

    RT_ASSERT(lwip_netif);
  1294f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1294f4:	e3530000 	cmp	r3, #0
  1294f8:	1a000005 	bne	129514 <netdev_add+0x54>
  1294fc:	e3002141 	movw	r2, #321	; 0x141
  129500:	e3081cd4 	movw	r1, #36052	; 0x8cd4
  129504:	e3401014 	movt	r1, #20
  129508:	e3080bec 	movw	r0, #35820	; 0x8bec
  12950c:	e3400014 	movt	r0, #20
  129510:	ebff6820 	bl	103598 <rt_assert_handler>

    netdev = (struct netdev *)rt_calloc(1, sizeof(struct netdev));
  129514:	e3a01044 	mov	r1, #68	; 0x44
  129518:	e3a00001 	mov	r0, #1
  12951c:	ebff66ba 	bl	10300c <rt_calloc>
  129520:	e50b000c 	str	r0, [fp, #-12]
    if (netdev == RT_NULL)
  129524:	e51b300c 	ldr	r3, [fp, #-12]
  129528:	e3530000 	cmp	r3, #0
  12952c:	1a000001 	bne	129538 <netdev_add+0x78>
    {
        return -ERR_IF;
  129530:	e3a0300c 	mov	r3, #12
  129534:	ea000036 	b	129614 <netdev_add+0x154>
//     extern int sal_lwip_netdev_set_pf_info(struct netdev *netdev);
//     /* set the lwIP network interface device protocol family information */
//     sal_lwip_netdev_set_pf_info(netdev);
// #endif /* SAL_USING_LWIP */
    extern int sal_unet_netdev_set_pf_info(struct netdev *netdev);
    sal_unet_netdev_set_pf_info(netdev);
  129538:	e51b000c 	ldr	r0, [fp, #-12]
  12953c:	ebff6cfd 	bl	104938 <sal_unet_netdev_set_pf_info>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  129540:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129544:	e2831042 	add	r1, r3, #66	; 0x42
  129548:	e24b3010 	sub	r3, fp, #16
  12954c:	e3a02002 	mov	r2, #2
  129550:	e1a00003 	mov	r0, r3
  129554:	ebff6741 	bl	103260 <rt_strncpy>
    result = netdev_register(netdev, name, (void *)lwip_netif);
  129558:	e24b3010 	sub	r3, fp, #16
  12955c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  129560:	e1a01003 	mov	r1, r3
  129564:	e51b000c 	ldr	r0, [fp, #-12]
  129568:	ebff6ebd 	bl	105064 <netdev_register>
  12956c:	e50b0008 	str	r0, [fp, #-8]
    // result = ueth_netdev_register(netdev, name, (void *)lwip_netif);
	
    /* Update netdev info after registered */
    netdev->flags = lwip_netif->flags;
  129570:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129574:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  129578:	e6ff2073 	uxth	r2, r3
  12957c:	e51b300c 	ldr	r3, [fp, #-12]
  129580:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    netdev->mtu = lwip_netif->mtu;
  129584:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129588:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  12958c:	e51b300c 	ldr	r3, [fp, #-12]
  129590:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->ops = &lwip_netdev_ops;
  129594:	e51b200c 	ldr	r2, [fp, #-12]
  129598:	e3083bcc 	movw	r3, #35788	; 0x8bcc
  12959c:	e3403014 	movt	r3, #20
  1295a0:	e5823030 	str	r3, [r2, #48]	; 0x30
    netdev->hwaddr_len =  lwip_netif->hwaddr_len;
  1295a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1295a8:	e5d3203a 	ldrb	r2, [r3, #58]	; 0x3a
  1295ac:	e51b300c 	ldr	r3, [fp, #-12]
  1295b0:	e5c32020 	strb	r2, [r3, #32]
    rt_memcpy(netdev->hwaddr, lwip_netif->hwaddr, lwip_netif->hwaddr_len);
  1295b4:	e51b300c 	ldr	r3, [fp, #-12]
  1295b8:	e2830021 	add	r0, r3, #33	; 0x21
  1295bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1295c0:	e283103b 	add	r1, r3, #59	; 0x3b
  1295c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1295c8:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  1295cc:	e1a02003 	mov	r2, r3
  1295d0:	ebff674a 	bl	103300 <rt_memcpy>
    netdev->ip_addr = lwip_netif->ip_addr;
  1295d4:	e51b300c 	ldr	r3, [fp, #-12]
  1295d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1295dc:	e5922004 	ldr	r2, [r2, #4]
  1295e0:	e583200c 	str	r2, [r3, #12]
    netdev->gw = lwip_netif->gw;
  1295e4:	e51b300c 	ldr	r3, [fp, #-12]
  1295e8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1295ec:	e592200c 	ldr	r2, [r2, #12]
  1295f0:	e5832014 	str	r2, [r3, #20]
    netdev->netmask = lwip_netif->netmask;
  1295f4:	e51b300c 	ldr	r3, [fp, #-12]
  1295f8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1295fc:	e5922008 	ldr	r2, [r2, #8]
  129600:	e5832010 	str	r2, [r3, #16]

#ifdef RT_LWIP_DHCP
    netdev_low_level_set_dhcp_status(netdev, RT_TRUE);
  129604:	e3a01001 	mov	r1, #1
  129608:	e51b000c 	ldr	r0, [fp, #-12]
  12960c:	ebff73fd 	bl	106608 <netdev_low_level_set_dhcp_status>
#endif

    return result;
  129610:	e51b3008 	ldr	r3, [fp, #-8]
}
  129614:	e1a00003 	mov	r0, r3
  129618:	e24bd004 	sub	sp, fp, #4
  12961c:	e8bd8800 	pop	{fp, pc}

00129620 <netdev_del>:

static void netdev_del(struct netif *lwip_netif)
{
  129620:	e92d4800 	push	{fp, lr}
  129624:	e28db004 	add	fp, sp, #4
  129628:	e24dd010 	sub	sp, sp, #16
  12962c:	e50b0010 	str	r0, [fp, #-16]
    char name[LWIP_NETIF_NAME_LEN + 1];
    struct netdev *netdev;

    RT_ASSERT(lwip_netif);
  129630:	e51b3010 	ldr	r3, [fp, #-16]
  129634:	e3530000 	cmp	r3, #0
  129638:	1a000005 	bne	129654 <netdev_del+0x34>
  12963c:	e300216b 	movw	r2, #363	; 0x16b
  129640:	e3081ce0 	movw	r1, #36064	; 0x8ce0
  129644:	e3401014 	movt	r1, #20
  129648:	e3080bec 	movw	r0, #35820	; 0x8bec
  12964c:	e3400014 	movt	r0, #20
  129650:	ebff67d0 	bl	103598 <rt_assert_handler>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  129654:	e51b3010 	ldr	r3, [fp, #-16]
  129658:	e2831042 	add	r1, r3, #66	; 0x42
  12965c:	e24b300c 	sub	r3, fp, #12
  129660:	e3a02002 	mov	r2, #2
  129664:	e1a00003 	mov	r0, r3
  129668:	ebff66fc 	bl	103260 <rt_strncpy>
    netdev = netdev_get_by_name(name);
  12966c:	e24b300c 	sub	r3, fp, #12
  129670:	e1a00003 	mov	r0, r3
  129674:	ebff6f9e 	bl	1054f4 <netdev_get_by_name>
  129678:	e50b0008 	str	r0, [fp, #-8]
    netdev_unregister(netdev);
  12967c:	e51b0008 	ldr	r0, [fp, #-8]
  129680:	ebff6ee2 	bl	105210 <netdev_unregister>
    rt_free(netdev);
  129684:	e51b0008 	ldr	r0, [fp, #-8]
  129688:	ebff664b 	bl	102fbc <rt_free>
}
  12968c:	e320f000 	nop	{0}
  129690:	e24bd004 	sub	sp, fp, #4
  129694:	e8bd8800 	pop	{fp, pc}

00129698 <netdev_flags_sync>:

/* synchronize lwIP network interface device and network interface device flags */
static int netdev_flags_sync(struct netif *lwip_netif)
{
  129698:	e92d4800 	push	{fp, lr}
  12969c:	e28db004 	add	fp, sp, #4
  1296a0:	e24dd010 	sub	sp, sp, #16
  1296a4:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = NULL;
  1296a8:	e3a03000 	mov	r3, #0
  1296ac:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(lwip_netif);
  1296b0:	e51b3010 	ldr	r3, [fp, #-16]
  1296b4:	e3530000 	cmp	r3, #0
  1296b8:	1a000005 	bne	1296d4 <netdev_flags_sync+0x3c>
  1296bc:	e3a02f5e 	mov	r2, #376	; 0x178
  1296c0:	e3081cec 	movw	r1, #36076	; 0x8cec
  1296c4:	e3401014 	movt	r1, #20
  1296c8:	e3080bec 	movw	r0, #35820	; 0x8bec
  1296cc:	e3400014 	movt	r0, #20
  1296d0:	ebff67b0 	bl	103598 <rt_assert_handler>

    netdev = netdev_get_by_name(lwip_netif->name);
  1296d4:	e51b3010 	ldr	r3, [fp, #-16]
  1296d8:	e2833042 	add	r3, r3, #66	; 0x42
  1296dc:	e1a00003 	mov	r0, r3
  1296e0:	ebff6f83 	bl	1054f4 <netdev_get_by_name>
  1296e4:	e50b0008 	str	r0, [fp, #-8]
    if (netdev == RT_NULL)
  1296e8:	e51b3008 	ldr	r3, [fp, #-8]
  1296ec:	e3530000 	cmp	r3, #0
  1296f0:	1a000001 	bne	1296fc <netdev_flags_sync+0x64>
    {
        return -ERR_IF;
  1296f4:	e3a0300c 	mov	r3, #12
  1296f8:	ea00000d 	b	129734 <netdev_flags_sync+0x9c>
    }
    
    netdev->mtu = lwip_netif->mtu;
  1296fc:	e51b3010 	ldr	r3, [fp, #-16]
  129700:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  129704:	e51b3008 	ldr	r3, [fp, #-8]
  129708:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->flags |= lwip_netif->flags;
  12970c:	e51b3008 	ldr	r3, [fp, #-8]
  129710:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  129714:	e51b3010 	ldr	r3, [fp, #-16]
  129718:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12971c:	e6ff3073 	uxth	r3, r3
  129720:	e1823003 	orr	r3, r2, r3
  129724:	e6ff2073 	uxth	r2, r3
  129728:	e51b3008 	ldr	r3, [fp, #-8]
  12972c:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    return ERR_OK;
  129730:	e3a03000 	mov	r3, #0
}
  129734:	e1a00003 	mov	r0, r3
  129738:	e24bd004 	sub	sp, fp, #4
  12973c:	e8bd8800 	pop	{fp, pc}

00129740 <ethernetif_linkoutput>:
// #endif /* RT_USING_NETDEV */

static err_t ethernetif_linkoutput(struct netif *netif, struct pbuf *p)
{
  129740:	e92d4800 	push	{fp, lr}
  129744:	e28db004 	add	fp, sp, #4
  129748:	e24dd010 	sub	sp, sp, #16
  12974c:	e50b0010 	str	r0, [fp, #-16]
  129750:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
//         return ERR_IF;
//     }
// #endif
    struct eth_device* enetif;

    RT_ASSERT(netif != RT_NULL);
  129754:	e51b3010 	ldr	r3, [fp, #-16]
  129758:	e3530000 	cmp	r3, #0
  12975c:	1a000005 	bne	129778 <ethernetif_linkoutput+0x38>
  129760:	e30021a5 	movw	r2, #421	; 0x1a5
  129764:	e3081d00 	movw	r1, #36096	; 0x8d00
  129768:	e3401014 	movt	r1, #20
  12976c:	e3080bf8 	movw	r0, #35832	; 0x8bf8
  129770:	e3400014 	movt	r0, #20
  129774:	ebff6787 	bl	103598 <rt_assert_handler>
    enetif = (struct eth_device*)netif->state;
  129778:	e51b3010 	ldr	r3, [fp, #-16]
  12977c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  129780:	e50b3008 	str	r3, [fp, #-8]

    if (enetif->eth_tx(&(enetif->parent), p) != RT_EOK)
  129784:	e51b3008 	ldr	r3, [fp, #-8]
  129788:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  12978c:	e51b2008 	ldr	r2, [fp, #-8]
  129790:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  129794:	e1a00002 	mov	r0, r2
  129798:	e12fff33 	blx	r3
  12979c:	e1a03000 	mov	r3, r0
  1297a0:	e3530000 	cmp	r3, #0
  1297a4:	0a000001 	beq	1297b0 <ethernetif_linkoutput+0x70>
    {
        return ERR_IF;
  1297a8:	e3e0300b 	mvn	r3, #11
  1297ac:	ea000000 	b	1297b4 <ethernetif_linkoutput+0x74>
    }
    return ERR_OK;
  1297b0:	e3a03000 	mov	r3, #0
}
  1297b4:	e1a00003 	mov	r0, r3
  1297b8:	e24bd004 	sub	sp, fp, #4
  1297bc:	e8bd8800 	pop	{fp, pc}

001297c0 <eth_netif_device_init>:

static err_t eth_netif_device_init(struct netif *netif)
{
  1297c0:	e92d4800 	push	{fp, lr}
  1297c4:	e28db004 	add	fp, sp, #4
  1297c8:	e24dd010 	sub	sp, sp, #16
  1297cc:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device *ethif;

    ethif = (struct eth_device*)netif->state;
  1297d0:	e51b3010 	ldr	r3, [fp, #-16]
  1297d4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1297d8:	e50b3008 	str	r3, [fp, #-8]
    if (ethif != RT_NULL)
  1297dc:	e51b3008 	ldr	r3, [fp, #-8]
  1297e0:	e3530000 	cmp	r3, #0
  1297e4:	0a000032 	beq	1298b4 <eth_netif_device_init+0xf4>
    {
        rt_device_t device;

#ifdef RT_USING_NETDEV
    /* network interface device register */
    netdev_add(netif);
  1297e8:	e51b0010 	ldr	r0, [fp, #-16]
  1297ec:	ebffff33 	bl	1294c0 <netdev_add>
#endif /* RT_USING_NETDEV */

        /* get device object */
        device = (rt_device_t) ethif;
  1297f0:	e51b3008 	ldr	r3, [fp, #-8]
  1297f4:	e50b300c 	str	r3, [fp, #-12]
        if (ueth_device_init(device) != RT_EOK)
  1297f8:	e51b000c 	ldr	r0, [fp, #-12]
  1297fc:	ebff6d1d 	bl	104c78 <ueth_device_init>
  129800:	e1a03000 	mov	r3, r0
  129804:	e3530000 	cmp	r3, #0
  129808:	0a000001 	beq	129814 <eth_netif_device_init+0x54>
        // if (rt_device_init(device) != RT_EOK)
        {
            return ERR_IF;
  12980c:	e3e0300b 	mvn	r3, #11
  129810:	ea000028 	b	1298b8 <eth_netif_device_init+0xf8>
        }

        /* copy device flags to netif flags */
        netif->flags = (ethif->flags & 0xff);
  129814:	e51b3008 	ldr	r3, [fp, #-8]
  129818:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  12981c:	e6ef2073 	uxtb	r2, r3
  129820:	e51b3010 	ldr	r3, [fp, #-16]
  129824:	e5c32041 	strb	r2, [r3, #65]	; 0x41
        netif->mtu = ETHERNET_MTU;
  129828:	e51b3010 	ldr	r3, [fp, #-16]
  12982c:	e30025dc 	movw	r2, #1500	; 0x5dc
  129830:	e1c323b8 	strh	r2, [r3, #56]	; 0x38
        
        /* set output */
        netif->output       = etharp_output;
  129834:	e51b2010 	ldr	r2, [fp, #-16]
  129838:	e30e397c 	movw	r3, #59772	; 0xe97c
  12983c:	e3403012 	movt	r3, #18
  129840:	e5823014 	str	r3, [r2, #20]
#endif /* LWIP_IPV6_MLD */

#endif /* LWIP_IPV6 */

        /* set default netif */
        if (netif_default == RT_NULL)
  129844:	e30e3a0c 	movw	r3, #59916	; 0xea0c
  129848:	e3403056 	movt	r3, #86	; 0x56
  12984c:	e5933000 	ldr	r3, [r3]
  129850:	e3530000 	cmp	r3, #0
  129854:	1a000003 	bne	129868 <eth_netif_device_init+0xa8>
            netif_set_default(ethif->netif);
  129858:	e51b3008 	ldr	r3, [fp, #-8]
  12985c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129860:	e1a00003 	mov	r0, r3
  129864:	ebffc04e 	bl	1199a4 <netif_set_default>
#if LWIP_DHCP
        /* set interface up */
        netif_set_up(ethif->netif);
  129868:	e51b3008 	ldr	r3, [fp, #-8]
  12986c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129870:	e1a00003 	mov	r0, r3
  129874:	ebffc056 	bl	1199d4 <netif_set_up>
        /* if this interface uses DHCP, start the DHCP client */
        dhcp_start(ethif->netif);
  129878:	e51b3008 	ldr	r3, [fp, #-8]
  12987c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129880:	e1a00003 	mov	r0, r3
  129884:	eb00051b 	bl	12acf8 <dhcp_start>
#else
        /* set interface up */
        netif_set_up(ethif->netif);
#endif
        if (ethif->flags & ETHIF_LINK_PHYUP)
  129888:	e51b3008 	ldr	r3, [fp, #-8]
  12988c:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  129890:	e2033c01 	and	r3, r3, #256	; 0x100
  129894:	e3530000 	cmp	r3, #0
  129898:	0a000003 	beq	1298ac <eth_netif_device_init+0xec>
        {
            /* set link_up for this netif */
            netif_set_link_up(ethif->netif);
  12989c:	e51b3008 	ldr	r3, [fp, #-8]
  1298a0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1298a4:	e1a00003 	mov	r0, r3
  1298a8:	ebffc0de 	bl	119c28 <netif_set_link_up>
        }
        return ERR_OK;
  1298ac:	e3a03000 	mov	r3, #0
  1298b0:	ea000000 	b	1298b8 <eth_netif_device_init+0xf8>
    }

    return ERR_IF;
  1298b4:	e3e0300b 	mvn	r3, #11
}
  1298b8:	e1a00003 	mov	r0, r3
  1298bc:	e24bd004 	sub	sp, fp, #4
  1298c0:	e8bd8800 	pop	{fp, pc}

001298c4 <eth_device_init_with_flag>:

/* Keep old drivers compatible in RT-Thread */
rt_err_t eth_device_init_with_flag(struct eth_device *dev, const char *name, rt_uint16_t flags)
{
  1298c4:	e92d4800 	push	{fp, lr}
  1298c8:	e28db004 	add	fp, sp, #4
  1298cc:	e24dd038 	sub	sp, sp, #56	; 0x38
  1298d0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1298d4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1298d8:	e1a03002 	mov	r3, r2
  1298dc:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    struct netif* netif;
#if LWIP_NETIF_HOSTNAME
#define LWIP_HOSTNAME_LEN 16
    char *hostname = RT_NULL;
  1298e0:	e3a03000 	mov	r3, #0
  1298e4:	e50b3008 	str	r3, [fp, #-8]
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif) + LWIP_HOSTNAME_LEN);
  1298e8:	e3a01098 	mov	r1, #152	; 0x98
  1298ec:	e3a00001 	mov	r0, #1
  1298f0:	ebff65c5 	bl	10300c <rt_calloc>
  1298f4:	e50b000c 	str	r0, [fp, #-12]
#else
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif));
#endif
    if (netif == RT_NULL)
  1298f8:	e51b300c 	ldr	r3, [fp, #-12]
  1298fc:	e3530000 	cmp	r3, #0
  129900:	1a000004 	bne	129918 <eth_device_init_with_flag+0x54>
    {
        rt_kprintf("malloc netif failed\n");
  129904:	e3080c0c 	movw	r0, #35852	; 0x8c0c
  129908:	e3400014 	movt	r0, #20
  12990c:	ebff6600 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  129910:	e3e03000 	mvn	r3, #0
  129914:	ea00005b 	b	129a88 <eth_device_init_with_flag+0x1c4>
    }

    /* set netif */
    dev->netif = netif;
  129918:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12991c:	e51b200c 	ldr	r2, [fp, #-12]
  129920:	e5832044 	str	r2, [r3, #68]	; 0x44
    /* device flags, which will be set to netif flags when initializing */
    dev->flags = flags;
  129924:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129928:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  12992c:	e1c326bc 	strh	r2, [r3, #108]	; 0x6c
    /* link changed status of device */
    dev->link_changed = 0x00;
  129930:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129934:	e3a02000 	mov	r2, #0
  129938:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    dev->parent.type = RT_Device_Class_NetIf;
  12993c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129940:	e3a02002 	mov	r2, #2
  129944:	e5832018 	str	r2, [r3, #24]
    /* register to RT-Thread device manager */
   // rt_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
    ueth_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
  129948:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12994c:	e3a02003 	mov	r2, #3
  129950:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  129954:	e1a00003 	mov	r0, r3
  129958:	ebff6c39 	bl	104a44 <ueth_device_register>
    rt_sem_init(&(dev->tx_ack), name, 0, RT_IPC_FLAG_FIFO);
  12995c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129960:	e2830048 	add	r0, r3, #72	; 0x48
  129964:	e3a03000 	mov	r3, #0
  129968:	e3a02000 	mov	r2, #0
  12996c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  129970:	ebff5dc5 	bl	10108c <rt_sem_init>

    /* set name */
    netif->name[0] = name[0];
  129974:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129978:	e5d32000 	ldrb	r2, [r3]
  12997c:	e51b300c 	ldr	r3, [fp, #-12]
  129980:	e5c32042 	strb	r2, [r3, #66]	; 0x42
    netif->name[1] = name[1];
  129984:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129988:	e5d32001 	ldrb	r2, [r3, #1]
  12998c:	e51b300c 	ldr	r3, [fp, #-12]
  129990:	e5c32043 	strb	r2, [r3, #67]	; 0x43

    /* set hw address to 6 */
    netif->hwaddr_len   = 6;
  129994:	e51b300c 	ldr	r3, [fp, #-12]
  129998:	e3a02006 	mov	r2, #6
  12999c:	e5c3203a 	strb	r2, [r3, #58]	; 0x3a
    /* maximum transfer unit */
    netif->mtu          = ETHERNET_MTU;
  1299a0:	e51b300c 	ldr	r3, [fp, #-12]
  1299a4:	e30025dc 	movw	r2, #1500	; 0x5dc
  1299a8:	e1c323b8 	strh	r2, [r3, #56]	; 0x38

    /* set linkoutput */
    netif->linkoutput   = ethernetif_linkoutput;
  1299ac:	e51b200c 	ldr	r2, [fp, #-12]
  1299b0:	e3093740 	movw	r3, #38720	; 0x9740
  1299b4:	e3403012 	movt	r3, #18
  1299b8:	e5823018 	str	r3, [r2, #24]
        
    /* get hardware MAC address */
    ueth_device_control(&(dev->parent), NIOCTL_GADDR, netif->hwaddr);
  1299bc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1299c0:	e51b300c 	ldr	r3, [fp, #-12]
  1299c4:	e283303b 	add	r3, r3, #59	; 0x3b
  1299c8:	e1a02003 	mov	r2, r3
  1299cc:	e3a01001 	mov	r1, #1
  1299d0:	ebff6d28 	bl	104e78 <ueth_device_control>
    

#if LWIP_NETIF_HOSTNAME
    /* Initialize interface hostname */
    hostname = (char *)netif + sizeof(struct netif);
  1299d4:	e51b300c 	ldr	r3, [fp, #-12]
  1299d8:	e2833088 	add	r3, r3, #136	; 0x88
  1299dc:	e50b3008 	str	r3, [fp, #-8]
    rt_sprintf(hostname, "rtthread_%02x%02x", name[0], name[1]);
  1299e0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1299e4:	e5d33000 	ldrb	r3, [r3]
  1299e8:	e1a02003 	mov	r2, r3
  1299ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1299f0:	e2833001 	add	r3, r3, #1
  1299f4:	e5d33000 	ldrb	r3, [r3]
  1299f8:	e3081c24 	movw	r1, #35876	; 0x8c24
  1299fc:	e3401014 	movt	r1, #20
  129a00:	e51b0008 	ldr	r0, [fp, #-8]
  129a04:	ebff65a0 	bl	10308c <rt_sprintf>
    netif->hostname = hostname;
  129a08:	e51b300c 	ldr	r3, [fp, #-12]
  129a0c:	e51b2008 	ldr	r2, [fp, #-8]
  129a10:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_NETIF_HOSTNAME */
    /* if tcp thread has been started up, we add this netif to the system */
    if (rt_thread_find("tcpip") != RT_NULL)
  129a14:	e3080c38 	movw	r0, #35896	; 0x8c38
  129a18:	e3400014 	movt	r0, #20
  129a1c:	ebff6195 	bl	102078 <rt_thread_find>
  129a20:	e1a03000 	mov	r3, r0
  129a24:	e3530000 	cmp	r3, #0
  129a28:	0a000013 	beq	129a7c <eth_device_init_with_flag+0x1b8>
#if !LWIP_DHCP
        ipaddr.addr = inet_addr(RT_LWIP_IPADDR);
        gw.addr = inet_addr(RT_LWIP_GWADDR);
        netmask.addr = inet_addr(RT_LWIP_MSKADDR);
#else        
        IP4_ADDR(&ipaddr, 0, 0, 0, 0);
  129a2c:	e3a03000 	mov	r3, #0
  129a30:	e50b3010 	str	r3, [fp, #-16]
        IP4_ADDR(&gw, 0, 0, 0, 0);
  129a34:	e3a03000 	mov	r3, #0
  129a38:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        IP4_ADDR(&netmask, 0, 0, 0, 0);
  129a3c:	e3a03000 	mov	r3, #0
  129a40:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#endif
        netifapi_netif_add(netif, &ipaddr, &netmask, &gw, dev, eth_netif_device_init, tcpip_input);
  129a44:	e24b0018 	sub	r0, fp, #24
  129a48:	e24b2014 	sub	r2, fp, #20
  129a4c:	e24b1010 	sub	r1, fp, #16
  129a50:	e3063174 	movw	r3, #24948	; 0x6174
  129a54:	e3403011 	movt	r3, #17
  129a58:	e58d3008 	str	r3, [sp, #8]
  129a5c:	e30937c0 	movw	r3, #38848	; 0x97c0
  129a60:	e3403012 	movt	r3, #18
  129a64:	e58d3004 	str	r3, [sp, #4]
  129a68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129a6c:	e58d3000 	str	r3, [sp]
  129a70:	e1a03000 	mov	r3, r0
  129a74:	e51b000c 	ldr	r0, [fp, #-12]
  129a78:	ebff9c94 	bl	110cd0 <netifapi_netif_add>
    }
#ifdef RT_USING_NETDEV
    /* network interface device flags synchronize */
    netdev_flags_sync(netif);
  129a7c:	e51b000c 	ldr	r0, [fp, #-12]
  129a80:	ebffff04 	bl	129698 <netdev_flags_sync>
#endif /* RT_USING_NETDEV */
    return RT_EOK;
  129a84:	e3a03000 	mov	r3, #0
}
  129a88:	e1a00003 	mov	r0, r3
  129a8c:	e24bd004 	sub	sp, fp, #4
  129a90:	e8bd8800 	pop	{fp, pc}

00129a94 <eth_device_init>:

rt_err_t eth_device_init(struct eth_device * dev, const char *name)
{
  129a94:	e92d4800 	push	{fp, lr}
  129a98:	e28db004 	add	fp, sp, #4
  129a9c:	e24dd010 	sub	sp, sp, #16
  129aa0:	e50b0010 	str	r0, [fp, #-16]
  129aa4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_uint16_t flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
  129aa8:	e3a0300a 	mov	r3, #10
  129aac:	e14b30b6 	strh	r3, [fp, #-6]

#if LWIP_IGMP
    /* IGMP support */
    flags |= NETIF_FLAG_IGMP;
  129ab0:	e15b30b6 	ldrh	r3, [fp, #-6]
  129ab4:	e3833020 	orr	r3, r3, #32
  129ab8:	e14b30b6 	strh	r3, [fp, #-6]
#endif
    return eth_device_init_with_flag(dev, name, flags);
  129abc:	e15b30b6 	ldrh	r3, [fp, #-6]
  129ac0:	e1a02003 	mov	r2, r3
  129ac4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  129ac8:	e51b0010 	ldr	r0, [fp, #-16]
  129acc:	ebffff7c 	bl	1298c4 <eth_device_init_with_flag>
  129ad0:	e1a03000 	mov	r3, r0
}
  129ad4:	e1a00003 	mov	r0, r3
  129ad8:	e24bd004 	sub	sp, fp, #4
  129adc:	e8bd8800 	pop	{fp, pc}

00129ae0 <eth_device_deinit>:

void eth_device_deinit(struct eth_device *dev)
{
  129ae0:	e92d4800 	push	{fp, lr}
  129ae4:	e28db004 	add	fp, sp, #4
  129ae8:	e24dd010 	sub	sp, sp, #16
  129aec:	e50b0010 	str	r0, [fp, #-16]
    struct netif* netif = dev->netif;
  129af0:	e51b3010 	ldr	r3, [fp, #-16]
  129af4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129af8:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_DHCP
    dhcp_stop(netif);
  129afc:	e51b0008 	ldr	r0, [fp, #-8]
  129b00:	eb0008f4 	bl	12bed8 <dhcp_stop>
    dhcp_cleanup(netif);
  129b04:	e51b0008 	ldr	r0, [fp, #-8]
  129b08:	eb00045e 	bl	12ac88 <dhcp_cleanup>
#endif
    netif_set_down(netif);
  129b0c:	e51b0008 	ldr	r0, [fp, #-8]
  129b10:	ebffc004 	bl	119b28 <netif_set_down>
    netif_remove(netif);
  129b14:	e51b0008 	ldr	r0, [fp, #-8]
  129b18:	ebffbe9d 	bl	119594 <netif_remove>
// #ifdef RT_USING_NETDEV
    netdev_del(netif);
  129b1c:	e51b0008 	ldr	r0, [fp, #-8]
  129b20:	ebfffebe 	bl	129620 <netdev_del>
// #endif
    ueth_device_close(&(dev->parent));
  129b24:	e51b3010 	ldr	r3, [fp, #-16]
  129b28:	e1a00003 	mov	r0, r3
  129b2c:	ebff6c8e 	bl	104d6c <ueth_device_close>
    ueth_device_unregister(&(dev->parent));
  129b30:	e51b3010 	ldr	r3, [fp, #-16]
  129b34:	e1a00003 	mov	r0, r3
  129b38:	ebff6c13 	bl	104b8c <ueth_device_unregister>
    rt_sem_detach(&(dev->tx_ack));
  129b3c:	e51b3010 	ldr	r3, [fp, #-16]
  129b40:	e2833048 	add	r3, r3, #72	; 0x48
  129b44:	e1a00003 	mov	r0, r3
  129b48:	ebff5d95 	bl	1011a4 <rt_sem_detach>
    rt_free(netif);
  129b4c:	e51b0008 	ldr	r0, [fp, #-8]
  129b50:	ebff6519 	bl	102fbc <rt_free>
}
  129b54:	e320f000 	nop	{0}
  129b58:	e24bd004 	sub	sp, fp, #4
  129b5c:	e8bd8800 	pop	{fp, pc}

00129b60 <eth_device_ready>:
}
#endif /* SAL_USING_AF_UNIX */

#ifndef LWIP_NO_RX_THREAD
rt_err_t eth_device_ready(struct eth_device* dev)
{
  129b60:	e92d4800 	push	{fp, lr}
  129b64:	e28db004 	add	fp, sp, #4
  129b68:	e24dd008 	sub	sp, sp, #8
  129b6c:	e50b0008 	str	r0, [fp, #-8]
    if (dev->netif)
  129b70:	e51b3008 	ldr	r3, [fp, #-8]
  129b74:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129b78:	e3530000 	cmp	r3, #0
  129b7c:	0a000006 	beq	129b9c <eth_device_ready+0x3c>
    {
        /* post message to Ethernet thread */
        return rt_mb_send(&eth_rx_thread_mb, (rt_ubase_t)dev);        
  129b80:	e51b3008 	ldr	r3, [fp, #-8]
  129b84:	e1a01003 	mov	r1, r3
  129b88:	e30e06a4 	movw	r0, #59044	; 0xe6a4
  129b8c:	e3400014 	movt	r0, #20
  129b90:	ebff5e9b 	bl	101604 <rt_mb_send>
  129b94:	e1a03000 	mov	r3, r0
  129b98:	ea000000 	b	129ba0 <eth_device_ready+0x40>
    }
    else
        return ERR_OK; /* netif is not initialized yet, just return. */
  129b9c:	e3a03000 	mov	r3, #0
}
  129ba0:	e1a00003 	mov	r0, r3
  129ba4:	e24bd004 	sub	sp, fp, #4
  129ba8:	e8bd8800 	pop	{fp, pc}

00129bac <eth_device_linkchange>:

rt_err_t eth_device_linkchange(struct eth_device* dev, rt_bool_t up)
{
  129bac:	e92d4800 	push	{fp, lr}
  129bb0:	e28db004 	add	fp, sp, #4
  129bb4:	e24dd010 	sub	sp, sp, #16
  129bb8:	e50b0010 	str	r0, [fp, #-16]
  129bbc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    // rt_uint32_t level;

    RT_ASSERT(dev != RT_NULL);
  129bc0:	e51b3010 	ldr	r3, [fp, #-16]
  129bc4:	e3530000 	cmp	r3, #0
  129bc8:	1a000005 	bne	129be4 <eth_device_linkchange+0x38>
  129bcc:	e3a02fc3 	mov	r2, #780	; 0x30c
  129bd0:	e3081d18 	movw	r1, #36120	; 0x8d18
  129bd4:	e3401014 	movt	r1, #20
  129bd8:	e3080c40 	movw	r0, #35904	; 0x8c40
  129bdc:	e3400014 	movt	r0, #20
  129be0:	ebff666c 	bl	103598 <rt_assert_handler>

    // level = rt_hw_interrupt_disable();
    dev->link_changed = 0x01;
  129be4:	e51b3010 	ldr	r3, [fp, #-16]
  129be8:	e3a02001 	mov	r2, #1
  129bec:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    if (up == RT_TRUE)
  129bf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129bf4:	e3530001 	cmp	r3, #1
  129bf8:	1a000003 	bne	129c0c <eth_device_linkchange+0x60>
        dev->link_status = 0x01;
  129bfc:	e51b3010 	ldr	r3, [fp, #-16]
  129c00:	e3a02001 	mov	r2, #1
  129c04:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
  129c08:	ea000002 	b	129c18 <eth_device_linkchange+0x6c>
    else
        dev->link_status = 0x00;
  129c0c:	e51b3010 	ldr	r3, [fp, #-16]
  129c10:	e3a02000 	mov	r2, #0
  129c14:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
    // rt_hw_interrupt_enable(level);
    
    // rt_uint32_t level;
    // level = rt_hw_interrupt_disable();
    int status = dev->link_status;
  129c18:	e51b3010 	ldr	r3, [fp, #-16]
  129c1c:	e5d3306f 	ldrb	r3, [r3, #111]	; 0x6f
  129c20:	e50b3008 	str	r3, [fp, #-8]
    dev->link_changed = 0x00;
  129c24:	e51b3010 	ldr	r3, [fp, #-16]
  129c28:	e3a02000 	mov	r2, #0
  129c2c:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    // rt_hw_interrupt_enable(level);

    if (status)
  129c30:	e51b3008 	ldr	r3, [fp, #-8]
  129c34:	e3530000 	cmp	r3, #0
  129c38:	0a000007 	beq	129c5c <eth_device_linkchange+0xb0>
        netifapi_netif_set_link_up(dev->netif);
  129c3c:	e51b3010 	ldr	r3, [fp, #-16]
  129c40:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129c44:	e3a02000 	mov	r2, #0
  129c48:	e3091c28 	movw	r1, #39976	; 0x9c28
  129c4c:	e3401011 	movt	r1, #17
  129c50:	e1a00003 	mov	r0, r3
  129c54:	ebff9c7b 	bl	110e48 <netifapi_netif_common>
  129c58:	ea000006 	b	129c78 <eth_device_linkchange+0xcc>
    else
        netifapi_netif_set_link_down(dev->netif);
  129c5c:	e51b3010 	ldr	r3, [fp, #-16]
  129c60:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129c64:	e3a02000 	mov	r2, #0
  129c68:	e3091cd8 	movw	r1, #40152	; 0x9cd8
  129c6c:	e3401011 	movt	r1, #17
  129c70:	e1a00003 	mov	r0, r3
  129c74:	ebff9c73 	bl	110e48 <netifapi_netif_common>

    return RT_EOK;
  129c78:	e3a03000 	mov	r3, #0
}
  129c7c:	e1a00003 	mov	r0, r3
  129c80:	e24bd004 	sub	sp, fp, #4
  129c84:	e8bd8800 	pop	{fp, pc}

00129c88 <eth_rx_thread_entry>:
#ifndef LWIP_NO_RX_THREAD

/* Ethernet Rx Thread */
extern void* ueth_rx_interrupt_detect(void);
static void eth_rx_thread_entry(void* parameter)
{
  129c88:	e92d4800 	push	{fp, lr}
  129c8c:	e28db004 	add	fp, sp, #4
  129c90:	e24dd010 	sub	sp, sp, #16
  129c94:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device* device;
    struct pbuf *p;

    while (!eth_init_done)
  129c98:	ea000001 	b	129ca4 <eth_rx_thread_entry+0x1c>
    {
        rt_thread_mdelay(10);
  129c9c:	e3a0000a 	mov	r0, #10
  129ca0:	ebff6075 	bl	101e7c <rt_thread_mdelay>
    while (!eth_init_done)
  129ca4:	e30e3c00 	movw	r3, #60416	; 0xec00
  129ca8:	e3403014 	movt	r3, #20
  129cac:	e5933000 	ldr	r3, [r3]
  129cb0:	e3530000 	cmp	r3, #0
  129cb4:	0afffff8 	beq	129c9c <eth_rx_thread_entry+0x14>
    }

    while (1)
    {
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  129cb8:	eb002e61 	bl	135644 <ueth_rx_interrupt_detect>
  129cbc:	e50b0008 	str	r0, [fp, #-8]
        if(device->eth_rx == RT_NULL) break;
  129cc0:	e51b3008 	ldr	r3, [fp, #-8]
  129cc4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  129cc8:	e3530000 	cmp	r3, #0
  129ccc:	0a00001a 	beq	129d3c <eth_rx_thread_entry+0xb4>

        /* receive all of buffer */
        while (1)
        {
            p = device->eth_rx(&(device->parent));
  129cd0:	e51b3008 	ldr	r3, [fp, #-8]
  129cd4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  129cd8:	e51b2008 	ldr	r2, [fp, #-8]
  129cdc:	e1a00002 	mov	r0, r2
  129ce0:	e12fff33 	blx	r3
  129ce4:	e50b000c 	str	r0, [fp, #-12]
            if (p != RT_NULL)
  129ce8:	e51b300c 	ldr	r3, [fp, #-12]
  129cec:	e3530000 	cmp	r3, #0
  129cf0:	0a00000f 	beq	129d34 <eth_rx_thread_entry+0xac>
            {
                /* notify to upper layer */
                if(device->netif->input(p, device->netif) != ERR_OK)
  129cf4:	e51b3008 	ldr	r3, [fp, #-8]
  129cf8:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129cfc:	e5933010 	ldr	r3, [r3, #16]
  129d00:	e51b2008 	ldr	r2, [fp, #-8]
  129d04:	e5922044 	ldr	r2, [r2, #68]	; 0x44
  129d08:	e1a01002 	mov	r1, r2
  129d0c:	e51b000c 	ldr	r0, [fp, #-12]
  129d10:	e12fff33 	blx	r3
  129d14:	e1a03000 	mov	r3, r0
  129d18:	e3530000 	cmp	r3, #0
  129d1c:	0affffeb 	beq	129cd0 <eth_rx_thread_entry+0x48>
                {
                    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: Input error\n"));
                    pbuf_free(p);
  129d20:	e51b000c 	ldr	r0, [fp, #-12]
  129d24:	ebffc464 	bl	11aebc <pbuf_free>
                    p = NULL;
  129d28:	e3a03000 	mov	r3, #0
  129d2c:	e50b300c 	str	r3, [fp, #-12]
            p = device->eth_rx(&(device->parent));
  129d30:	eaffffe6 	b	129cd0 <eth_rx_thread_entry+0x48>
                }
            }
            else break;
  129d34:	e320f000 	nop	{0}
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  129d38:	eaffffde 	b	129cb8 <eth_rx_thread_entry+0x30>
        if(device->eth_rx == RT_NULL) break;
  129d3c:	e320f000 	nop	{0}
        }
    }
}
  129d40:	e320f000 	nop	{0}
  129d44:	e24bd004 	sub	sp, fp, #4
  129d48:	e8bd8800 	pop	{fp, pc}

00129d4c <eth_system_device_init>:
/* this function does not need, 
 * use eth_system_device_init_private() 
 * call by lwip_system_init(). 
 */
int eth_system_device_init(void)
{
  129d4c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  129d50:	e28db000 	add	fp, sp, #0
    return 0;
  129d54:	e3a03000 	mov	r3, #0
}
  129d58:	e1a00003 	mov	r0, r3
  129d5c:	e28bd000 	add	sp, fp, #0
  129d60:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  129d64:	e12fff1e 	bx	lr

00129d68 <eth_system_device_init_private>:
int eth_system_device_init_private(void)
{
  129d68:	e92d4800 	push	{fp, lr}
  129d6c:	e28db004 	add	fp, sp, #4
  129d70:	e24dd010 	sub	sp, sp, #16
    rt_err_t result = RT_EOK;
  129d74:	e3a03000 	mov	r3, #0
  129d78:	e50b3008 	str	r3, [fp, #-8]

    /* initialize Rx thread. */
#ifndef LWIP_NO_RX_THREAD
    /* initialize mailbox and create Ethernet Rx thread */
    result = rt_mb_init(&eth_rx_thread_mb, "erxmb",
  129d7c:	e3a03000 	mov	r3, #0
  129d80:	e58d3000 	str	r3, [sp]
  129d84:	e3a03c01 	mov	r3, #256	; 0x100
  129d88:	e30e26d8 	movw	r2, #59096	; 0xe6d8
  129d8c:	e3402014 	movt	r2, #20
  129d90:	e3081c50 	movw	r1, #35920	; 0x8c50
  129d94:	e3401014 	movt	r1, #20
  129d98:	e30e06a4 	movw	r0, #59044	; 0xe6a4
  129d9c:	e3400014 	movt	r0, #20
  129da0:	ebff5d8a 	bl	1013d0 <rt_mb_init>
  129da4:	e50b0008 	str	r0, [fp, #-8]
                        &eth_rx_thread_mb_pool[0], sizeof(eth_rx_thread_mb_pool)/sizeof(void *),
                        RT_IPC_FLAG_FIFO);
    RT_ASSERT(result == RT_EOK);
  129da8:	e51b3008 	ldr	r3, [fp, #-8]
  129dac:	e3530000 	cmp	r3, #0
  129db0:	0a000005 	beq	129dcc <eth_system_device_init_private+0x64>
  129db4:	e300238e 	movw	r2, #910	; 0x38e
  129db8:	e3081d30 	movw	r1, #36144	; 0x8d30
  129dbc:	e3401014 	movt	r1, #20
  129dc0:	e3080c58 	movw	r0, #35928	; 0x8c58
  129dc4:	e3400014 	movt	r0, #20
  129dc8:	ebff65f2 	bl	103598 <rt_assert_handler>

    rt_thread_t erx_tid = rt_thread_create("erx", eth_rx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, 25, 16);
  129dcc:	e3a03010 	mov	r3, #16
  129dd0:	e58d3004 	str	r3, [sp, #4]
  129dd4:	e3a03019 	mov	r3, #25
  129dd8:	e58d3000 	str	r3, [sp]
  129ddc:	e3a03a02 	mov	r3, #8192	; 0x2000
  129de0:	e3a02000 	mov	r2, #0
  129de4:	e3091c88 	movw	r1, #40072	; 0x9c88
  129de8:	e3401012 	movt	r1, #18
  129dec:	e3080c6c 	movw	r0, #35948	; 0x8c6c
  129df0:	e3400014 	movt	r0, #20
  129df4:	ebff60be 	bl	1020f4 <rt_thread_create>
  129df8:	e50b000c 	str	r0, [fp, #-12]
    // rt_thread_t erx_tid = rt_thread_create("erx", eth_rx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, 30, 16);
    result = rt_thread_startup(erx_tid);
  129dfc:	e51b000c 	ldr	r0, [fp, #-12]
  129e00:	ebff60f0 	bl	1021c8 <rt_thread_startup>
  129e04:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(result == RT_EOK);
  129e08:	e51b3008 	ldr	r3, [fp, #-8]
  129e0c:	e3530000 	cmp	r3, #0
  129e10:	0a000005 	beq	129e2c <eth_system_device_init_private+0xc4>
  129e14:	e3002393 	movw	r2, #915	; 0x393
  129e18:	e3081d30 	movw	r1, #36144	; 0x8d30
  129e1c:	e3401014 	movt	r1, #20
  129e20:	e3080c58 	movw	r0, #35928	; 0x8c58
  129e24:	e3400014 	movt	r0, #20
  129e28:	ebff65da 	bl	103598 <rt_assert_handler>
#endif

    /* initialize Tx thread */
#ifndef LWIP_NO_TX_THREAD
    /* initialize mailbox and create Ethernet Tx thread */
    result = rt_mb_init(&eth_tx_thread_mb, "etxmb",
  129e2c:	e3a03000 	mov	r3, #0
  129e30:	e58d3000 	str	r3, [sp]
  129e34:	e3a03c01 	mov	r3, #256	; 0x100
  129e38:	e30e22a4 	movw	r2, #58020	; 0xe2a4
  129e3c:	e3402014 	movt	r2, #20
  129e40:	e3081c70 	movw	r1, #35952	; 0x8c70
  129e44:	e3401014 	movt	r1, #20
  129e48:	e30e0270 	movw	r0, #57968	; 0xe270
  129e4c:	e3400014 	movt	r0, #20
  129e50:	ebff5d5e 	bl	1013d0 <rt_mb_init>
  129e54:	e50b0008 	str	r0, [fp, #-8]
                        &eth_tx_thread_mb_pool[0], sizeof(eth_tx_thread_mb_pool)/sizeof(void *),
                        RT_IPC_FLAG_FIFO);
    RT_ASSERT(result == RT_EOK);
  129e58:	e51b3008 	ldr	r3, [fp, #-8]
  129e5c:	e3530000 	cmp	r3, #0
  129e60:	0a000005 	beq	129e7c <eth_system_device_init_private+0x114>
  129e64:	e30023a3 	movw	r2, #931	; 0x3a3
  129e68:	e3081d30 	movw	r1, #36144	; 0x8d30
  129e6c:	e3401014 	movt	r1, #20
  129e70:	e3080c58 	movw	r0, #35928	; 0x8c58
  129e74:	e3400014 	movt	r0, #20
  129e78:	ebff65c6 	bl	103598 <rt_assert_handler>

    // rt_thread_t etx_tid = rt_thread_create("etx", eth_tx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, RT_ETHERNETIF_THREAD_PREORITY, 16);
    // result = rt_thread_startup(etx_tid);
    // RT_ASSERT(result == RT_EOK);
#endif
    return (int)result;
  129e7c:	e51b3008 	ldr	r3, [fp, #-8]
}
  129e80:	e1a00003 	mov	r0, r3
  129e84:	e24bd004 	sub	sp, fp, #4
  129e88:	e8bd8800 	pop	{fp, pc}

00129e8c <set_if>:

void set_if(char* netif_name, char* ip_addr, char* gw_addr, char* nm_addr)
{
  129e8c:	e92d4800 	push	{fp, lr}
  129e90:	e28db004 	add	fp, sp, #4
  129e94:	e24dd020 	sub	sp, sp, #32
  129e98:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  129e9c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  129ea0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  129ea4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    ip4_addr_t *ip;
    ip4_addr_t addr;
    struct netif * netif = netif_list;
  129ea8:	e30e3a08 	movw	r3, #59912	; 0xea08
  129eac:	e3403056 	movt	r3, #86	; 0x56
  129eb0:	e5933000 	ldr	r3, [r3]
  129eb4:	e50b3008 	str	r3, [fp, #-8]

    if(strlen(netif_name) > sizeof(netif->name))
  129eb8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129ebc:	eb005d7f 	bl	1414c0 <strlen>
  129ec0:	e1a03000 	mov	r3, r0
  129ec4:	e3530002 	cmp	r3, #2
  129ec8:	9a000017 	bls	129f2c <set_if+0xa0>
    {
        rt_kprintf("network interface name too long!\r\n");
  129ecc:	e3080c78 	movw	r0, #35960	; 0x8c78
  129ed0:	e3400014 	movt	r0, #20
  129ed4:	ebff648e 	bl	103114 <rt_kprintf>
        return;
  129ed8:	ea000041 	b	129fe4 <set_if+0x158>
    }

    while(netif != RT_NULL)
    {
        if(strncmp(netif_name, netif->name, sizeof(netif->name)) == 0)
  129edc:	e51b3008 	ldr	r3, [fp, #-8]
  129ee0:	e2833042 	add	r3, r3, #66	; 0x42
  129ee4:	e3a02002 	mov	r2, #2
  129ee8:	e1a01003 	mov	r1, r3
  129eec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129ef0:	eb005d9e 	bl	141570 <strncmp>
  129ef4:	e1a03000 	mov	r3, r0
  129ef8:	e3530000 	cmp	r3, #0
  129efc:	0a00000e 	beq	129f3c <set_if+0xb0>
            break;

        netif = netif->next;
  129f00:	e51b3008 	ldr	r3, [fp, #-8]
  129f04:	e5933000 	ldr	r3, [r3]
  129f08:	e50b3008 	str	r3, [fp, #-8]
        if( netif == RT_NULL )
  129f0c:	e51b3008 	ldr	r3, [fp, #-8]
  129f10:	e3530000 	cmp	r3, #0
  129f14:	1a000004 	bne	129f2c <set_if+0xa0>
        {
            rt_kprintf("network interface: %s not found!\r\n", netif_name);
  129f18:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  129f1c:	e3080c9c 	movw	r0, #35996	; 0x8c9c
  129f20:	e3400014 	movt	r0, #20
  129f24:	ebff647a 	bl	103114 <rt_kprintf>
            return;
  129f28:	ea00002d 	b	129fe4 <set_if+0x158>
    while(netif != RT_NULL)
  129f2c:	e51b3008 	ldr	r3, [fp, #-8]
  129f30:	e3530000 	cmp	r3, #0
  129f34:	1affffe8 	bne	129edc <set_if+0x50>
  129f38:	ea000000 	b	129f40 <set_if+0xb4>
            break;
  129f3c:	e320f000 	nop	{0}
        }
    }

    ip = (ip4_addr_t *)&addr;
  129f40:	e24b3010 	sub	r3, fp, #16
  129f44:	e50b300c 	str	r3, [fp, #-12]

    /* set ip address */
    if ((ip_addr != RT_NULL) && ip4addr_aton(ip_addr, &addr))
  129f48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  129f4c:	e3530000 	cmp	r3, #0
  129f50:	0a000009 	beq	129f7c <set_if+0xf0>
  129f54:	e24b3010 	sub	r3, fp, #16
  129f58:	e1a01003 	mov	r1, r3
  129f5c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  129f60:	eb0021e1 	bl	1326ec <ip4addr_aton>
  129f64:	e1a03000 	mov	r3, r0
  129f68:	e3530000 	cmp	r3, #0
  129f6c:	0a000002 	beq	129f7c <set_if+0xf0>
    {
        netif_set_ipaddr(netif, ip);
  129f70:	e51b100c 	ldr	r1, [fp, #-12]
  129f74:	e51b0008 	ldr	r0, [fp, #-8]
  129f78:	ebffbe10 	bl	1197c0 <netif_set_ipaddr>
    }

    /* set gateway address */
    if ((gw_addr != RT_NULL) && ip4addr_aton(gw_addr, &addr))
  129f7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129f80:	e3530000 	cmp	r3, #0
  129f84:	0a000009 	beq	129fb0 <set_if+0x124>
  129f88:	e24b3010 	sub	r3, fp, #16
  129f8c:	e1a01003 	mov	r1, r3
  129f90:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  129f94:	eb0021d4 	bl	1326ec <ip4addr_aton>
  129f98:	e1a03000 	mov	r3, r0
  129f9c:	e3530000 	cmp	r3, #0
  129fa0:	0a000002 	beq	129fb0 <set_if+0x124>
    {
        netif_set_gw(netif, ip);
  129fa4:	e51b100c 	ldr	r1, [fp, #-12]
  129fa8:	e51b0008 	ldr	r0, [fp, #-8]
  129fac:	ebffbe4a 	bl	1198dc <netif_set_gw>
    }

    /* set netmask address */
    if ((nm_addr != RT_NULL) && ip4addr_aton(nm_addr, &addr))
  129fb0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129fb4:	e3530000 	cmp	r3, #0
  129fb8:	0a000009 	beq	129fe4 <set_if+0x158>
  129fbc:	e24b3010 	sub	r3, fp, #16
  129fc0:	e1a01003 	mov	r1, r3
  129fc4:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  129fc8:	eb0021c7 	bl	1326ec <ip4addr_aton>
  129fcc:	e1a03000 	mov	r3, r0
  129fd0:	e3530000 	cmp	r3, #0
  129fd4:	0a000002 	beq	129fe4 <set_if+0x158>
    {
        netif_set_netmask(netif, ip);
  129fd8:	e51b100c 	ldr	r1, [fp, #-12]
  129fdc:	e51b0008 	ldr	r0, [fp, #-8]
  129fe0:	ebffbe56 	bl	119940 <netif_set_netmask>
    }
}
  129fe4:	e24bd004 	sub	sp, fp, #4
  129fe8:	e8bd8800 	pop	{fp, pc}

00129fec <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
  129fec:	e92d4800 	push	{fp, lr}
  129ff0:	e28db004 	add	fp, sp, #4
  if (dhcp_pcb_refcount == 0) {
  129ff4:	e30e3adc 	movw	r3, #60124	; 0xeadc
  129ff8:	e3403014 	movt	r3, #20
  129ffc:	e5d33000 	ldrb	r3, [r3]
  12a000:	e3530000 	cmp	r3, #0
  12a004:	1a000039 	bne	12a0f0 <dhcp_inc_pcb_refcount+0x104>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
  12a008:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a00c:	e3403014 	movt	r3, #20
  12a010:	e5933000 	ldr	r3, [r3]
  12a014:	e3530000 	cmp	r3, #0
  12a018:	0a000006 	beq	12a038 <dhcp_inc_pcb_refcount+0x4c>
  12a01c:	e3080d50 	movw	r0, #36176	; 0x8d50
  12a020:	e3400014 	movt	r0, #20
  12a024:	ebff643a 	bl	103114 <rt_kprintf>
  12a028:	e3a010db 	mov	r1, #219	; 0xdb
  12a02c:	e3080d78 	movw	r0, #36216	; 0x8d78
  12a030:	e3400014 	movt	r0, #20
  12a034:	ebff842d 	bl	10b0f0 <sys_arch_assert>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
  12a038:	ebfffaa1 	bl	128ac4 <udp_new>
  12a03c:	e1a02000 	mov	r2, r0
  12a040:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a044:	e3403014 	movt	r3, #20
  12a048:	e5832000 	str	r2, [r3]

    if (dhcp_pcb == NULL) {
  12a04c:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a050:	e3403014 	movt	r3, #20
  12a054:	e5933000 	ldr	r3, [r3]
  12a058:	e3530000 	cmp	r3, #0
  12a05c:	1a000001 	bne	12a068 <dhcp_inc_pcb_refcount+0x7c>
      return ERR_MEM;
  12a060:	e3e03000 	mvn	r3, #0
  12a064:	ea00002a 	b	12a114 <dhcp_inc_pcb_refcount+0x128>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
  12a068:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a06c:	e3403014 	movt	r3, #20
  12a070:	e5933000 	ldr	r3, [r3]
  12a074:	e5d32008 	ldrb	r2, [r3, #8]
  12a078:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a07c:	e3403014 	movt	r3, #20
  12a080:	e5933000 	ldr	r3, [r3]
  12a084:	e3822020 	orr	r2, r2, #32
  12a088:	e6ef2072 	uxtb	r2, r2
  12a08c:	e5c32008 	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
  12a090:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a094:	e3403014 	movt	r3, #20
  12a098:	e5933000 	ldr	r3, [r3]
  12a09c:	e3a02044 	mov	r2, #68	; 0x44
  12a0a0:	e3091910 	movw	r1, #39184	; 0x9910
  12a0a4:	e3401014 	movt	r1, #20
  12a0a8:	e1a00003 	mov	r0, r3
  12a0ac:	ebfff969 	bl	128658 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
  12a0b0:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a0b4:	e3403014 	movt	r3, #20
  12a0b8:	e5933000 	ldr	r3, [r3]
  12a0bc:	e3a02043 	mov	r2, #67	; 0x43
  12a0c0:	e3091910 	movw	r1, #39184	; 0x9910
  12a0c4:	e3401014 	movt	r1, #20
  12a0c8:	e1a00003 	mov	r0, r3
  12a0cc:	ebfff9d7 	bl	128830 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
  12a0d0:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a0d4:	e3403014 	movt	r3, #20
  12a0d8:	e5933000 	ldr	r3, [r3]
  12a0dc:	e3a02000 	mov	r2, #0
  12a0e0:	e30c1d54 	movw	r1, #52564	; 0xcd54
  12a0e4:	e3401012 	movt	r1, #18
  12a0e8:	e1a00003 	mov	r0, r3
  12a0ec:	ebfffa33 	bl	1289c0 <udp_recv>
  }

  dhcp_pcb_refcount++;
  12a0f0:	e30e3adc 	movw	r3, #60124	; 0xeadc
  12a0f4:	e3403014 	movt	r3, #20
  12a0f8:	e5d33000 	ldrb	r3, [r3]
  12a0fc:	e2833001 	add	r3, r3, #1
  12a100:	e6ef2073 	uxtb	r2, r3
  12a104:	e30e3adc 	movw	r3, #60124	; 0xeadc
  12a108:	e3403014 	movt	r3, #20
  12a10c:	e5c32000 	strb	r2, [r3]

  return ERR_OK;
  12a110:	e3a03000 	mov	r3, #0
}
  12a114:	e1a00003 	mov	r0, r3
  12a118:	e8bd8800 	pop	{fp, pc}

0012a11c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
  12a11c:	e92d4800 	push	{fp, lr}
  12a120:	e28db004 	add	fp, sp, #4
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
  12a124:	e30e3adc 	movw	r3, #60124	; 0xeadc
  12a128:	e3403014 	movt	r3, #20
  12a12c:	e5d33000 	ldrb	r3, [r3]
  12a130:	e3530000 	cmp	r3, #0
  12a134:	1a000006 	bne	12a154 <dhcp_dec_pcb_refcount+0x38>
  12a138:	e3080dac 	movw	r0, #36268	; 0x8dac
  12a13c:	e3400014 	movt	r0, #20
  12a140:	ebff63f3 	bl	103114 <rt_kprintf>
  12a144:	e3a010f5 	mov	r1, #245	; 0xf5
  12a148:	e3080d78 	movw	r0, #36216	; 0x8d78
  12a14c:	e3400014 	movt	r0, #20
  12a150:	ebff83e6 	bl	10b0f0 <sys_arch_assert>
  dhcp_pcb_refcount--;
  12a154:	e30e3adc 	movw	r3, #60124	; 0xeadc
  12a158:	e3403014 	movt	r3, #20
  12a15c:	e5d33000 	ldrb	r3, [r3]
  12a160:	e2433001 	sub	r3, r3, #1
  12a164:	e6ef2073 	uxtb	r2, r3
  12a168:	e30e3adc 	movw	r3, #60124	; 0xeadc
  12a16c:	e3403014 	movt	r3, #20
  12a170:	e5c32000 	strb	r2, [r3]

  if (dhcp_pcb_refcount == 0) {
  12a174:	e30e3adc 	movw	r3, #60124	; 0xeadc
  12a178:	e3403014 	movt	r3, #20
  12a17c:	e5d33000 	ldrb	r3, [r3]
  12a180:	e3530000 	cmp	r3, #0
  12a184:	1a000008 	bne	12a1ac <dhcp_dec_pcb_refcount+0x90>
    udp_remove(dhcp_pcb);
  12a188:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a18c:	e3403014 	movt	r3, #20
  12a190:	e5933000 	ldr	r3, [r3]
  12a194:	e1a00003 	mov	r0, r3
  12a198:	ebfffa18 	bl	128a00 <udp_remove>
    dhcp_pcb = NULL;
  12a19c:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a1a0:	e3403014 	movt	r3, #20
  12a1a4:	e3a02000 	mov	r2, #0
  12a1a8:	e5832000 	str	r2, [r3]
  }
}
  12a1ac:	e320f000 	nop	{0}
  12a1b0:	e8bd8800 	pop	{fp, pc}

0012a1b4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
  12a1b4:	e92d4800 	push	{fp, lr}
  12a1b8:	e28db004 	add	fp, sp, #4
  12a1bc:	e24dd010 	sub	sp, sp, #16
  12a1c0:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a1c4:	e51b3010 	ldr	r3, [fp, #-16]
  12a1c8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a1cc:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  12a1d0:	e3a0100c 	mov	r1, #12
  12a1d4:	e51b0008 	ldr	r0, [fp, #-8]
  12a1d8:	eb00076b 	bl	12bf8c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  12a1dc:	e3093910 	movw	r3, #39184	; 0x9910
  12a1e0:	e3403014 	movt	r3, #20
  12a1e4:	e3092910 	movw	r2, #39184	; 0x9910
  12a1e8:	e3402014 	movt	r2, #20
  12a1ec:	e3091910 	movw	r1, #39184	; 0x9910
  12a1f0:	e3401014 	movt	r1, #20
  12a1f4:	e51b0010 	ldr	r0, [fp, #-16]
  12a1f8:	ebffbcc1 	bl	119504 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
  12a1fc:	e51b0010 	ldr	r0, [fp, #-16]
  12a200:	eb000420 	bl	12b288 <dhcp_discover>
}
  12a204:	e320f000 	nop	{0}
  12a208:	e24bd004 	sub	sp, fp, #4
  12a20c:	e8bd8800 	pop	{fp, pc}

0012a210 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
  12a210:	e92d4800 	push	{fp, lr}
  12a214:	e28db004 	add	fp, sp, #4
  12a218:	e24dd010 	sub	sp, sp, #16
  12a21c:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a220:	e51b3010 	ldr	r3, [fp, #-16]
  12a224:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a228:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
  12a22c:	e3a01008 	mov	r1, #8
  12a230:	e51b0008 	ldr	r0, [fp, #-8]
  12a234:	eb000754 	bl	12bf8c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
  12a238:	e51b3008 	ldr	r3, [fp, #-8]
  12a23c:	e2833028 	add	r3, r3, #40	; 0x28
  12a240:	e3a02000 	mov	r2, #0
  12a244:	e1a01003 	mov	r1, r3
  12a248:	e51b0010 	ldr	r0, [fp, #-16]
  12a24c:	eb0012a0 	bl	12ecd4 <etharp_query>
  12a250:	e1a03000 	mov	r3, r0
  12a254:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
  12a258:	e51b3008 	ldr	r3, [fp, #-8]
  12a25c:	e5d3300a 	ldrb	r3, [r3, #10]
  12a260:	e35300ff 	cmp	r3, #255	; 0xff
  12a264:	0a000005 	beq	12a280 <dhcp_check+0x70>
    dhcp->tries++;
  12a268:	e51b3008 	ldr	r3, [fp, #-8]
  12a26c:	e5d3300a 	ldrb	r3, [r3, #10]
  12a270:	e2833001 	add	r3, r3, #1
  12a274:	e6ef2073 	uxtb	r2, r3
  12a278:	e51b3008 	ldr	r3, [fp, #-8]
  12a27c:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 500;
  12a280:	e3a03f7d 	mov	r3, #500	; 0x1f4
  12a284:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12a288:	e15b30bc 	ldrh	r3, [fp, #-12]
  12a28c:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12a290:	e2833003 	add	r3, r3, #3
  12a294:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12a298:	e3412062 	movt	r2, #4194	; 0x1062
  12a29c:	e0c10293 	smull	r0, r1, r3, r2
  12a2a0:	e1a022c1 	asr	r2, r1, #5
  12a2a4:	e1a03fc3 	asr	r3, r3, #31
  12a2a8:	e0423003 	sub	r3, r2, r3
  12a2ac:	e6ff2073 	uxth	r2, r3
  12a2b0:	e51b3008 	ldr	r3, [fp, #-8]
  12a2b4:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
  12a2b8:	e320f000 	nop	{0}
  12a2bc:	e24bd004 	sub	sp, fp, #4
  12a2c0:	e8bd8800 	pop	{fp, pc}

0012a2c4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
  12a2c4:	e92d4800 	push	{fp, lr}
  12a2c8:	e28db004 	add	fp, sp, #4
  12a2cc:	e24dd010 	sub	sp, sp, #16
  12a2d0:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a2d4:	e51b3010 	ldr	r3, [fp, #-16]
  12a2d8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a2dc:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
  12a2e0:	e30e3c20 	movw	r3, #60448	; 0xec20
  12a2e4:	e3403056 	movt	r3, #86	; 0x56
  12a2e8:	e5d33002 	ldrb	r3, [r3, #2]
  12a2ec:	e3530000 	cmp	r3, #0
  12a2f0:	0a00000e 	beq	12a330 <dhcp_handle_offer+0x6c>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
  12a2f4:	e30e3c2c 	movw	r3, #60460	; 0xec2c
  12a2f8:	e3403056 	movt	r3, #86	; 0x56
  12a2fc:	e5933008 	ldr	r3, [r3, #8]
  12a300:	e1a00003 	mov	r0, r3
  12a304:	ebffb0c1 	bl	116610 <lwip_htonl>
  12a308:	e1a02000 	mov	r2, r0
  12a30c:	e51b3008 	ldr	r3, [fp, #-8]
  12a310:	e5832024 	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  12a314:	e51b3008 	ldr	r3, [fp, #-8]
  12a318:	e5933004 	ldr	r3, [r3, #4]
  12a31c:	e5932010 	ldr	r2, [r3, #16]
  12a320:	e51b3008 	ldr	r3, [fp, #-8]
  12a324:	e5832028 	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
  12a328:	e51b0010 	ldr	r0, [fp, #-16]
  12a32c:	eb000002 	bl	12a33c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
  12a330:	e320f000 	nop	{0}
  12a334:	e24bd004 	sub	sp, fp, #4
  12a338:	e8bd8800 	pop	{fp, pc}

0012a33c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
  12a33c:	e92d4800 	push	{fp, lr}
  12a340:	e28db004 	add	fp, sp, #4
  12a344:	e24dd020 	sub	sp, sp, #32
  12a348:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a34c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a350:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a354:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
  12a358:	e3a01001 	mov	r1, #1
  12a35c:	e51b000c 	ldr	r0, [fp, #-12]
  12a360:	eb000709 	bl	12bf8c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12a364:	e3a02003 	mov	r2, #3
  12a368:	e51b100c 	ldr	r1, [fp, #-12]
  12a36c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12a370:	eb000b35 	bl	12d04c <dhcp_create_msg>
  12a374:	e1a03000 	mov	r3, r0
  12a378:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12a37c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12a380:	e3530000 	cmp	r3, #0
  12a384:	1a000052 	bne	12a4d4 <dhcp_select+0x198>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12a388:	e3a02002 	mov	r2, #2
  12a38c:	e3a01039 	mov	r1, #57	; 0x39
  12a390:	e51b000c 	ldr	r0, [fp, #-12]
  12a394:	eb000714 	bl	12bfec <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12a398:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a39c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12a3a0:	e1a01003 	mov	r1, r3
  12a3a4:	e51b000c 	ldr	r0, [fp, #-12]
  12a3a8:	eb00075e 	bl	12c128 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12a3ac:	e3a02004 	mov	r2, #4
  12a3b0:	e3a01032 	mov	r1, #50	; 0x32
  12a3b4:	e51b000c 	ldr	r0, [fp, #-12]
  12a3b8:	eb00070b 	bl	12bfec <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12a3bc:	e51b300c 	ldr	r3, [fp, #-12]
  12a3c0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a3c4:	e1a00003 	mov	r0, r3
  12a3c8:	ebffb090 	bl	116610 <lwip_htonl>
  12a3cc:	e1a03000 	mov	r3, r0
  12a3d0:	e1a01003 	mov	r1, r3
  12a3d4:	e51b000c 	ldr	r0, [fp, #-12]
  12a3d8:	eb000783 	bl	12c1ec <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  12a3dc:	e3a02004 	mov	r2, #4
  12a3e0:	e3a01036 	mov	r1, #54	; 0x36
  12a3e4:	e51b000c 	ldr	r0, [fp, #-12]
  12a3e8:	eb0006ff 	bl	12bfec <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
  12a3ec:	e51b300c 	ldr	r3, [fp, #-12]
  12a3f0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12a3f4:	e1a00003 	mov	r0, r3
  12a3f8:	ebffb084 	bl	116610 <lwip_htonl>
  12a3fc:	e1a03000 	mov	r3, r0
  12a400:	e1a01003 	mov	r1, r3
  12a404:	e51b000c 	ldr	r0, [fp, #-12]
  12a408:	eb000777 	bl	12c1ec <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12a40c:	e3a02004 	mov	r2, #4
  12a410:	e3a01037 	mov	r1, #55	; 0x37
  12a414:	e51b000c 	ldr	r0, [fp, #-12]
  12a418:	eb0006f3 	bl	12bfec <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12a41c:	e3a03000 	mov	r3, #0
  12a420:	e54b3005 	strb	r3, [fp, #-5]
  12a424:	ea000009 	b	12a450 <dhcp_select+0x114>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12a428:	e55b2005 	ldrb	r2, [fp, #-5]
  12a42c:	e30d303c 	movw	r3, #53308	; 0xd03c
  12a430:	e3403014 	movt	r3, #20
  12a434:	e7d33002 	ldrb	r3, [r3, r2]
  12a438:	e1a01003 	mov	r1, r3
  12a43c:	e51b000c 	ldr	r0, [fp, #-12]
  12a440:	eb000719 	bl	12c0ac <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12a444:	e55b3005 	ldrb	r3, [fp, #-5]
  12a448:	e2833001 	add	r3, r3, #1
  12a44c:	e54b3005 	strb	r3, [fp, #-5]
  12a450:	e55b3005 	ldrb	r3, [fp, #-5]
  12a454:	e3530003 	cmp	r3, #3
  12a458:	9afffff2 	bls	12a428 <dhcp_select+0xec>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12a45c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12a460:	e51b000c 	ldr	r0, [fp, #-12]
  12a464:	eb0007ab 	bl	12c318 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12a468:	e51b000c 	ldr	r0, [fp, #-12]
  12a46c:	eb000c63 	bl	12d600 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12a470:	e51b300c 	ldr	r3, [fp, #-12]
  12a474:	e593200c 	ldr	r2, [r3, #12]
  12a478:	e51b300c 	ldr	r3, [fp, #-12]
  12a47c:	e1d331b4 	ldrh	r3, [r3, #20]
  12a480:	e28330f0 	add	r3, r3, #240	; 0xf0
  12a484:	e6ff3073 	uxth	r3, r3
  12a488:	e1a01003 	mov	r1, r3
  12a48c:	e1a00002 	mov	r0, r2
  12a490:	ebffc140 	bl	11a998 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12a494:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a498:	e3403014 	movt	r3, #20
  12a49c:	e5930000 	ldr	r0, [r3]
  12a4a0:	e51b300c 	ldr	r3, [fp, #-12]
  12a4a4:	e593100c 	ldr	r1, [r3, #12]
  12a4a8:	e3093910 	movw	r3, #39184	; 0x9910
  12a4ac:	e3403014 	movt	r3, #20
  12a4b0:	e58d3004 	str	r3, [sp, #4]
  12a4b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a4b8:	e58d3000 	str	r3, [sp]
  12a4bc:	e3a03043 	mov	r3, #67	; 0x43
  12a4c0:	e3092914 	movw	r2, #39188	; 0x9914
  12a4c4:	e3402014 	movt	r2, #20
  12a4c8:	ebfff791 	bl	128314 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12a4cc:	e51b000c 	ldr	r0, [fp, #-12]
  12a4d0:	eb000c15 	bl	12d52c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12a4d4:	e51b300c 	ldr	r3, [fp, #-12]
  12a4d8:	e5d3300a 	ldrb	r3, [r3, #10]
  12a4dc:	e35300ff 	cmp	r3, #255	; 0xff
  12a4e0:	0a000005 	beq	12a4fc <dhcp_select+0x1c0>
    dhcp->tries++;
  12a4e4:	e51b300c 	ldr	r3, [fp, #-12]
  12a4e8:	e5d3300a 	ldrb	r3, [r3, #10]
  12a4ec:	e2833001 	add	r3, r3, #1
  12a4f0:	e6ef2073 	uxtb	r2, r3
  12a4f4:	e51b300c 	ldr	r3, [fp, #-12]
  12a4f8:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12a4fc:	e51b300c 	ldr	r3, [fp, #-12]
  12a500:	e5d3300a 	ldrb	r3, [r3, #10]
  12a504:	e3530005 	cmp	r3, #5
  12a508:	8a000006 	bhi	12a528 <dhcp_select+0x1ec>
  12a50c:	e51b300c 	ldr	r3, [fp, #-12]
  12a510:	e5d3300a 	ldrb	r3, [r3, #10]
  12a514:	e1a02003 	mov	r2, r3
  12a518:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12a51c:	e1a03213 	lsl	r3, r3, r2
  12a520:	e6ff3073 	uxth	r3, r3
  12a524:	ea000000 	b	12a52c <dhcp_select+0x1f0>
  12a528:	e30e3a60 	movw	r3, #60000	; 0xea60
  12a52c:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12a530:	e15b31b0 	ldrh	r3, [fp, #-16]
  12a534:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12a538:	e2833003 	add	r3, r3, #3
  12a53c:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12a540:	e3412062 	movt	r2, #4194	; 0x1062
  12a544:	e0c10293 	smull	r0, r1, r3, r2
  12a548:	e1a022c1 	asr	r2, r1, #5
  12a54c:	e1a03fc3 	asr	r3, r3, #31
  12a550:	e0423003 	sub	r3, r2, r3
  12a554:	e6ff2073 	uxth	r2, r3
  12a558:	e51b300c 	ldr	r3, [fp, #-12]
  12a55c:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12a560:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12a564:	e1a00003 	mov	r0, r3
  12a568:	e24bd004 	sub	sp, fp, #4
  12a56c:	e8bd8800 	pop	{fp, pc}

0012a570 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
  12a570:	e92d4800 	push	{fp, lr}
  12a574:	e28db004 	add	fp, sp, #4
  12a578:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a57c:	e30e3a08 	movw	r3, #59912	; 0xea08
  12a580:	e3403056 	movt	r3, #86	; 0x56
  12a584:	e5933000 	ldr	r3, [r3]
  12a588:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
  12a58c:	ea00003e 	b	12a68c <dhcp_coarse_tmr+0x11c>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a590:	e51b3008 	ldr	r3, [fp, #-8]
  12a594:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a598:	e50b300c 	str	r3, [fp, #-12]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
  12a59c:	e51b300c 	ldr	r3, [fp, #-12]
  12a5a0:	e3530000 	cmp	r3, #0
  12a5a4:	0a000035 	beq	12a680 <dhcp_coarse_tmr+0x110>
  12a5a8:	e51b300c 	ldr	r3, [fp, #-12]
  12a5ac:	e5d33009 	ldrb	r3, [r3, #9]
  12a5b0:	e3530000 	cmp	r3, #0
  12a5b4:	0a000031 	beq	12a680 <dhcp_coarse_tmr+0x110>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
  12a5b8:	e51b300c 	ldr	r3, [fp, #-12]
  12a5bc:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a5c0:	e3530000 	cmp	r3, #0
  12a5c4:	0a000010 	beq	12a60c <dhcp_coarse_tmr+0x9c>
  12a5c8:	e51b300c 	ldr	r3, [fp, #-12]
  12a5cc:	e1d332b0 	ldrh	r3, [r3, #32]
  12a5d0:	e2833001 	add	r3, r3, #1
  12a5d4:	e6ff2073 	uxth	r2, r3
  12a5d8:	e51b300c 	ldr	r3, [fp, #-12]
  12a5dc:	e1c322b0 	strh	r2, [r3, #32]
  12a5e0:	e51b300c 	ldr	r3, [fp, #-12]
  12a5e4:	e1d322b0 	ldrh	r2, [r3, #32]
  12a5e8:	e51b300c 	ldr	r3, [fp, #-12]
  12a5ec:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a5f0:	e1520003 	cmp	r2, r3
  12a5f4:	1a000004 	bne	12a60c <dhcp_coarse_tmr+0x9c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
  12a5f8:	e51b0008 	ldr	r0, [fp, #-8]
  12a5fc:	eb0005bd 	bl	12bcf8 <dhcp_release>
        dhcp_discover(netif);
  12a600:	e51b0008 	ldr	r0, [fp, #-8]
  12a604:	eb00031f 	bl	12b288 <dhcp_discover>
  12a608:	ea00001c 	b	12a680 <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
  12a60c:	e51b300c 	ldr	r3, [fp, #-12]
  12a610:	e1d331be 	ldrh	r3, [r3, #30]
  12a614:	e3530000 	cmp	r3, #0
  12a618:	0a00000a 	beq	12a648 <dhcp_coarse_tmr+0xd8>
  12a61c:	e51b300c 	ldr	r3, [fp, #-12]
  12a620:	e1d331be 	ldrh	r3, [r3, #30]
  12a624:	e2432001 	sub	r2, r3, #1
  12a628:	e6ff1072 	uxth	r1, r2
  12a62c:	e51b200c 	ldr	r2, [fp, #-12]
  12a630:	e1c211be 	strh	r1, [r2, #30]
  12a634:	e3530001 	cmp	r3, #1
  12a638:	1a000002 	bne	12a648 <dhcp_coarse_tmr+0xd8>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
  12a63c:	e51b0008 	ldr	r0, [fp, #-8]
  12a640:	eb0000b1 	bl	12a90c <dhcp_t2_timeout>
  12a644:	ea00000d 	b	12a680 <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
  12a648:	e51b300c 	ldr	r3, [fp, #-12]
  12a64c:	e1d331bc 	ldrh	r3, [r3, #28]
  12a650:	e3530000 	cmp	r3, #0
  12a654:	0a000009 	beq	12a680 <dhcp_coarse_tmr+0x110>
  12a658:	e51b300c 	ldr	r3, [fp, #-12]
  12a65c:	e1d331bc 	ldrh	r3, [r3, #28]
  12a660:	e2432001 	sub	r2, r3, #1
  12a664:	e6ff1072 	uxth	r1, r2
  12a668:	e51b200c 	ldr	r2, [fp, #-12]
  12a66c:	e1c211bc 	strh	r1, [r2, #28]
  12a670:	e3530001 	cmp	r3, #1
  12a674:	1a000001 	bne	12a680 <dhcp_coarse_tmr+0x110>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
  12a678:	e51b0008 	ldr	r0, [fp, #-8]
  12a67c:	eb000076 	bl	12a85c <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  12a680:	e51b3008 	ldr	r3, [fp, #-8]
  12a684:	e5933000 	ldr	r3, [r3]
  12a688:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a68c:	e51b3008 	ldr	r3, [fp, #-8]
  12a690:	e3530000 	cmp	r3, #0
  12a694:	1affffbd 	bne	12a590 <dhcp_coarse_tmr+0x20>
  }
}
  12a698:	e320f000 	nop	{0}
  12a69c:	e24bd004 	sub	sp, fp, #4
  12a6a0:	e8bd8800 	pop	{fp, pc}

0012a6a4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
  12a6a4:	e92d4800 	push	{fp, lr}
  12a6a8:	e28db004 	add	fp, sp, #4
  12a6ac:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a6b0:	e30e3a08 	movw	r3, #59912	; 0xea08
  12a6b4:	e3403056 	movt	r3, #86	; 0x56
  12a6b8:	e5933000 	ldr	r3, [r3]
  12a6bc:	e50b3008 	str	r3, [fp, #-8]
  /* loop through netif's */
  while (netif != NULL) {
  12a6c0:	ea00001f 	b	12a744 <dhcp_fine_tmr+0xa0>
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a6c4:	e51b3008 	ldr	r3, [fp, #-8]
  12a6c8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a6cc:	e50b300c 	str	r3, [fp, #-12]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
  12a6d0:	e51b300c 	ldr	r3, [fp, #-12]
  12a6d4:	e3530000 	cmp	r3, #0
  12a6d8:	0a000016 	beq	12a738 <dhcp_fine_tmr+0x94>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
  12a6dc:	e51b300c 	ldr	r3, [fp, #-12]
  12a6e0:	e1d331b6 	ldrh	r3, [r3, #22]
  12a6e4:	e3530001 	cmp	r3, #1
  12a6e8:	9a000006 	bls	12a708 <dhcp_fine_tmr+0x64>
        dhcp->request_timeout--;
  12a6ec:	e51b300c 	ldr	r3, [fp, #-12]
  12a6f0:	e1d331b6 	ldrh	r3, [r3, #22]
  12a6f4:	e2433001 	sub	r3, r3, #1
  12a6f8:	e6ff2073 	uxth	r2, r3
  12a6fc:	e51b300c 	ldr	r3, [fp, #-12]
  12a700:	e1c321b6 	strh	r2, [r3, #22]
  12a704:	ea00000b 	b	12a738 <dhcp_fine_tmr+0x94>
      }
      else if (dhcp->request_timeout == 1) {
  12a708:	e51b300c 	ldr	r3, [fp, #-12]
  12a70c:	e1d331b6 	ldrh	r3, [r3, #22]
  12a710:	e3530001 	cmp	r3, #1
  12a714:	1a000007 	bne	12a738 <dhcp_fine_tmr+0x94>
        dhcp->request_timeout--;
  12a718:	e51b300c 	ldr	r3, [fp, #-12]
  12a71c:	e1d331b6 	ldrh	r3, [r3, #22]
  12a720:	e2433001 	sub	r3, r3, #1
  12a724:	e6ff2073 	uxth	r2, r3
  12a728:	e51b300c 	ldr	r3, [fp, #-12]
  12a72c:	e1c321b6 	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
  12a730:	e51b0008 	ldr	r0, [fp, #-8]
  12a734:	eb000008 	bl	12a75c <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  12a738:	e51b3008 	ldr	r3, [fp, #-8]
  12a73c:	e5933000 	ldr	r3, [r3]
  12a740:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a744:	e51b3008 	ldr	r3, [fp, #-8]
  12a748:	e3530000 	cmp	r3, #0
  12a74c:	1affffdc 	bne	12a6c4 <dhcp_fine_tmr+0x20>
  }
}
  12a750:	e320f000 	nop	{0}
  12a754:	e24bd004 	sub	sp, fp, #4
  12a758:	e8bd8800 	pop	{fp, pc}

0012a75c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
  12a75c:	e92d4800 	push	{fp, lr}
  12a760:	e28db004 	add	fp, sp, #4
  12a764:	e24dd010 	sub	sp, sp, #16
  12a768:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a76c:	e51b3010 	ldr	r3, [fp, #-16]
  12a770:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a774:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
  12a778:	e51b3008 	ldr	r3, [fp, #-8]
  12a77c:	e5d33009 	ldrb	r3, [r3, #9]
  12a780:	e353000c 	cmp	r3, #12
  12a784:	0a000003 	beq	12a798 <dhcp_timeout+0x3c>
  12a788:	e51b3008 	ldr	r3, [fp, #-8]
  12a78c:	e5d33009 	ldrb	r3, [r3, #9]
  12a790:	e3530006 	cmp	r3, #6
  12a794:	1a000002 	bne	12a7a4 <dhcp_timeout+0x48>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  12a798:	e51b0010 	ldr	r0, [fp, #-16]
  12a79c:	eb0002b9 	bl	12b288 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  12a7a0:	ea00002a 	b	12a850 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
  12a7a4:	e51b3008 	ldr	r3, [fp, #-8]
  12a7a8:	e5d33009 	ldrb	r3, [r3, #9]
  12a7ac:	e3530001 	cmp	r3, #1
  12a7b0:	1a00000b 	bne	12a7e4 <dhcp_timeout+0x88>
    if (dhcp->tries <= 5) {
  12a7b4:	e51b3008 	ldr	r3, [fp, #-8]
  12a7b8:	e5d3300a 	ldrb	r3, [r3, #10]
  12a7bc:	e3530005 	cmp	r3, #5
  12a7c0:	8a000002 	bhi	12a7d0 <dhcp_timeout+0x74>
      dhcp_select(netif);
  12a7c4:	e51b0010 	ldr	r0, [fp, #-16]
  12a7c8:	ebfffedb 	bl	12a33c <dhcp_select>
}
  12a7cc:	ea00001f 	b	12a850 <dhcp_timeout+0xf4>
      dhcp_release(netif);
  12a7d0:	e51b0010 	ldr	r0, [fp, #-16]
  12a7d4:	eb000547 	bl	12bcf8 <dhcp_release>
      dhcp_discover(netif);
  12a7d8:	e51b0010 	ldr	r0, [fp, #-16]
  12a7dc:	eb0002a9 	bl	12b288 <dhcp_discover>
}
  12a7e0:	ea00001a 	b	12a850 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
  12a7e4:	e51b3008 	ldr	r3, [fp, #-8]
  12a7e8:	e5d33009 	ldrb	r3, [r3, #9]
  12a7ec:	e3530008 	cmp	r3, #8
  12a7f0:	1a000009 	bne	12a81c <dhcp_timeout+0xc0>
    if (dhcp->tries <= 1) {
  12a7f4:	e51b3008 	ldr	r3, [fp, #-8]
  12a7f8:	e5d3300a 	ldrb	r3, [r3, #10]
  12a7fc:	e3530001 	cmp	r3, #1
  12a800:	8a000002 	bhi	12a810 <dhcp_timeout+0xb4>
      dhcp_check(netif);
  12a804:	e51b0010 	ldr	r0, [fp, #-16]
  12a808:	ebfffe80 	bl	12a210 <dhcp_check>
}
  12a80c:	ea00000f 	b	12a850 <dhcp_timeout+0xf4>
      dhcp_bind(netif);
  12a810:	e51b0010 	ldr	r0, [fp, #-16]
  12a814:	eb000312 	bl	12b464 <dhcp_bind>
}
  12a818:	ea00000c 	b	12a850 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
  12a81c:	e51b3008 	ldr	r3, [fp, #-8]
  12a820:	e5d33009 	ldrb	r3, [r3, #9]
  12a824:	e3530003 	cmp	r3, #3
  12a828:	1a000008 	bne	12a850 <dhcp_timeout+0xf4>
    if (dhcp->tries < REBOOT_TRIES) {
  12a82c:	e51b3008 	ldr	r3, [fp, #-8]
  12a830:	e5d3300a 	ldrb	r3, [r3, #10]
  12a834:	e3530001 	cmp	r3, #1
  12a838:	8a000002 	bhi	12a848 <dhcp_timeout+0xec>
      dhcp_reboot(netif);
  12a83c:	e51b0010 	ldr	r0, [fp, #-16]
  12a840:	eb0004af 	bl	12bb04 <dhcp_reboot>
}
  12a844:	ea000001 	b	12a850 <dhcp_timeout+0xf4>
      dhcp_discover(netif);
  12a848:	e51b0010 	ldr	r0, [fp, #-16]
  12a84c:	eb00028d 	bl	12b288 <dhcp_discover>
}
  12a850:	e320f000 	nop	{0}
  12a854:	e24bd004 	sub	sp, fp, #4
  12a858:	e8bd8800 	pop	{fp, pc}

0012a85c <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
  12a85c:	e92d4800 	push	{fp, lr}
  12a860:	e28db004 	add	fp, sp, #4
  12a864:	e24dd010 	sub	sp, sp, #16
  12a868:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a86c:	e51b3010 	ldr	r3, [fp, #-16]
  12a870:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a874:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a878:	e51b3008 	ldr	r3, [fp, #-8]
  12a87c:	e5d33009 	ldrb	r3, [r3, #9]
  12a880:	e3530001 	cmp	r3, #1
  12a884:	0a000007 	beq	12a8a8 <dhcp_t1_timeout+0x4c>
  12a888:	e51b3008 	ldr	r3, [fp, #-8]
  12a88c:	e5d33009 	ldrb	r3, [r3, #9]
  12a890:	e353000a 	cmp	r3, #10
  12a894:	0a000003 	beq	12a8a8 <dhcp_t1_timeout+0x4c>
      (dhcp->state == DHCP_STATE_RENEWING)) {
  12a898:	e51b3008 	ldr	r3, [fp, #-8]
  12a89c:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a8a0:	e3530005 	cmp	r3, #5
  12a8a4:	1a000015 	bne	12a900 <dhcp_t1_timeout+0xa4>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
  12a8a8:	e51b0010 	ldr	r0, [fp, #-16]
  12a8ac:	eb0003a8 	bl	12b754 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12a8b0:	e51b3008 	ldr	r3, [fp, #-8]
  12a8b4:	e1d331ba 	ldrh	r3, [r3, #26]
  12a8b8:	e1a02003 	mov	r2, r3
  12a8bc:	e51b3008 	ldr	r3, [fp, #-8]
  12a8c0:	e1d332b0 	ldrh	r3, [r3, #32]
  12a8c4:	e0423003 	sub	r3, r2, r3
  12a8c8:	e3530001 	cmp	r3, #1
  12a8cc:	da00000b 	ble	12a900 <dhcp_t1_timeout+0xa4>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
  12a8d0:	e51b3008 	ldr	r3, [fp, #-8]
  12a8d4:	e1d331ba 	ldrh	r3, [r3, #26]
  12a8d8:	e1a02003 	mov	r2, r3
  12a8dc:	e51b3008 	ldr	r3, [fp, #-8]
  12a8e0:	e1d332b0 	ldrh	r3, [r3, #32]
  12a8e4:	e0423003 	sub	r3, r2, r3
  12a8e8:	e1a02fa3 	lsr	r2, r3, #31
  12a8ec:	e0823003 	add	r3, r2, r3
  12a8f0:	e1a030c3 	asr	r3, r3, #1
  12a8f4:	e6ff2073 	uxth	r2, r3
  12a8f8:	e51b3008 	ldr	r3, [fp, #-8]
  12a8fc:	e1c321bc 	strh	r2, [r3, #28]
    }
  }
}
  12a900:	e320f000 	nop	{0}
  12a904:	e24bd004 	sub	sp, fp, #4
  12a908:	e8bd8800 	pop	{fp, pc}

0012a90c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
  12a90c:	e92d4800 	push	{fp, lr}
  12a910:	e28db004 	add	fp, sp, #4
  12a914:	e24dd010 	sub	sp, sp, #16
  12a918:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a91c:	e51b3010 	ldr	r3, [fp, #-16]
  12a920:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a924:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a928:	e51b3008 	ldr	r3, [fp, #-8]
  12a92c:	e5d33009 	ldrb	r3, [r3, #9]
  12a930:	e3530001 	cmp	r3, #1
  12a934:	0a00000b 	beq	12a968 <dhcp_t2_timeout+0x5c>
  12a938:	e51b3008 	ldr	r3, [fp, #-8]
  12a93c:	e5d33009 	ldrb	r3, [r3, #9]
  12a940:	e353000a 	cmp	r3, #10
  12a944:	0a000007 	beq	12a968 <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12a948:	e51b3008 	ldr	r3, [fp, #-8]
  12a94c:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a950:	e3530005 	cmp	r3, #5
  12a954:	0a000003 	beq	12a968 <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12a958:	e51b3008 	ldr	r3, [fp, #-8]
  12a95c:	e5d33009 	ldrb	r3, [r3, #9]
  12a960:	e3530004 	cmp	r3, #4
  12a964:	1a000015 	bne	12a9c0 <dhcp_t2_timeout+0xb4>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
  12a968:	e51b0010 	ldr	r0, [fp, #-16]
  12a96c:	eb0003ee 	bl	12b92c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12a970:	e51b3008 	ldr	r3, [fp, #-8]
  12a974:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a978:	e1a02003 	mov	r2, r3
  12a97c:	e51b3008 	ldr	r3, [fp, #-8]
  12a980:	e1d332b0 	ldrh	r3, [r3, #32]
  12a984:	e0423003 	sub	r3, r2, r3
  12a988:	e3530001 	cmp	r3, #1
  12a98c:	da00000b 	ble	12a9c0 <dhcp_t2_timeout+0xb4>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
  12a990:	e51b3008 	ldr	r3, [fp, #-8]
  12a994:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a998:	e1a02003 	mov	r2, r3
  12a99c:	e51b3008 	ldr	r3, [fp, #-8]
  12a9a0:	e1d332b0 	ldrh	r3, [r3, #32]
  12a9a4:	e0423003 	sub	r3, r2, r3
  12a9a8:	e1a02fa3 	lsr	r2, r3, #31
  12a9ac:	e0823003 	add	r3, r2, r3
  12a9b0:	e1a030c3 	asr	r3, r3, #1
  12a9b4:	e6ff2073 	uxth	r2, r3
  12a9b8:	e51b3008 	ldr	r3, [fp, #-8]
  12a9bc:	e1c321be 	strh	r2, [r3, #30]
    }
  }
}
  12a9c0:	e320f000 	nop	{0}
  12a9c4:	e24bd004 	sub	sp, fp, #4
  12a9c8:	e8bd8800 	pop	{fp, pc}

0012a9cc <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
  12a9cc:	e92d4800 	push	{fp, lr}
  12a9d0:	e28db004 	add	fp, sp, #4
  12a9d4:	e24dd018 	sub	sp, sp, #24
  12a9d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a9dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a9e0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a9e4:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12a9e8:	e51b300c 	ldr	r3, [fp, #-12]
  12a9ec:	e3a02000 	mov	r2, #0
  12a9f0:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12a9f4:	e51b300c 	ldr	r3, [fp, #-12]
  12a9f8:	e3a02000 	mov	r2, #0
  12a9fc:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
  12aa00:	e30e3c20 	movw	r3, #60448	; 0xec20
  12aa04:	e3403056 	movt	r3, #86	; 0x56
  12aa08:	e5d33003 	ldrb	r3, [r3, #3]
  12aa0c:	e3530000 	cmp	r3, #0
  12aa10:	0a000004 	beq	12aa28 <dhcp_handle_ack+0x5c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
  12aa14:	e30e3c2c 	movw	r3, #60460	; 0xec2c
  12aa18:	e3403056 	movt	r3, #86	; 0x56
  12aa1c:	e593200c 	ldr	r2, [r3, #12]
  12aa20:	e51b300c 	ldr	r3, [fp, #-12]
  12aa24:	e5832034 	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
  12aa28:	e30e3c20 	movw	r3, #60448	; 0xec20
  12aa2c:	e3403056 	movt	r3, #86	; 0x56
  12aa30:	e5d33004 	ldrb	r3, [r3, #4]
  12aa34:	e3530000 	cmp	r3, #0
  12aa38:	0a000005 	beq	12aa54 <dhcp_handle_ack+0x88>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
  12aa3c:	e30e3c2c 	movw	r3, #60460	; 0xec2c
  12aa40:	e3403056 	movt	r3, #86	; 0x56
  12aa44:	e5932010 	ldr	r2, [r3, #16]
  12aa48:	e51b300c 	ldr	r3, [fp, #-12]
  12aa4c:	e5832038 	str	r2, [r3, #56]	; 0x38
  12aa50:	ea000004 	b	12aa68 <dhcp_handle_ack+0x9c>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
  12aa54:	e51b300c 	ldr	r3, [fp, #-12]
  12aa58:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12aa5c:	e1a020a3 	lsr	r2, r3, #1
  12aa60:	e51b300c 	ldr	r3, [fp, #-12]
  12aa64:	e5832038 	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
  12aa68:	e30e3c20 	movw	r3, #60448	; 0xec20
  12aa6c:	e3403056 	movt	r3, #86	; 0x56
  12aa70:	e5d33005 	ldrb	r3, [r3, #5]
  12aa74:	e3530000 	cmp	r3, #0
  12aa78:	0a000005 	beq	12aa94 <dhcp_handle_ack+0xc8>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
  12aa7c:	e30e3c2c 	movw	r3, #60460	; 0xec2c
  12aa80:	e3403056 	movt	r3, #86	; 0x56
  12aa84:	e5932014 	ldr	r2, [r3, #20]
  12aa88:	e51b300c 	ldr	r3, [fp, #-12]
  12aa8c:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12aa90:	ea000007 	b	12aab4 <dhcp_handle_ack+0xe8>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
  12aa94:	e51b300c 	ldr	r3, [fp, #-12]
  12aa98:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  12aa9c:	e1a03002 	mov	r3, r2
  12aaa0:	e1a03183 	lsl	r3, r3, #3
  12aaa4:	e0433002 	sub	r3, r3, r2
  12aaa8:	e1a021a3 	lsr	r2, r3, #3
  12aaac:	e51b300c 	ldr	r3, [fp, #-12]
  12aab0:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  12aab4:	e51b300c 	ldr	r3, [fp, #-12]
  12aab8:	e5933004 	ldr	r3, [r3, #4]
  12aabc:	e5932010 	ldr	r2, [r3, #16]
  12aac0:	e51b300c 	ldr	r3, [fp, #-12]
  12aac4:	e5832028 	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
  12aac8:	e30e3c20 	movw	r3, #60448	; 0xec20
  12aacc:	e3403056 	movt	r3, #86	; 0x56
  12aad0:	e5d33006 	ldrb	r3, [r3, #6]
  12aad4:	e3530000 	cmp	r3, #0
  12aad8:	0a00000b 	beq	12ab0c <dhcp_handle_ack+0x140>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
  12aadc:	e30e3c2c 	movw	r3, #60460	; 0xec2c
  12aae0:	e3403056 	movt	r3, #86	; 0x56
  12aae4:	e5933018 	ldr	r3, [r3, #24]
  12aae8:	e1a00003 	mov	r0, r3
  12aaec:	ebffaec7 	bl	116610 <lwip_htonl>
  12aaf0:	e1a02000 	mov	r2, r0
  12aaf4:	e51b300c 	ldr	r3, [fp, #-12]
  12aaf8:	e583202c 	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
  12aafc:	e51b300c 	ldr	r3, [fp, #-12]
  12ab00:	e3a02001 	mov	r2, #1
  12ab04:	e5c3200b 	strb	r2, [r3, #11]
  12ab08:	ea000002 	b	12ab18 <dhcp_handle_ack+0x14c>
  } else {
    dhcp->subnet_mask_given = 0;
  12ab0c:	e51b300c 	ldr	r3, [fp, #-12]
  12ab10:	e3a02000 	mov	r2, #0
  12ab14:	e5c3200b 	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
  12ab18:	e30e3c20 	movw	r3, #60448	; 0xec20
  12ab1c:	e3403056 	movt	r3, #86	; 0x56
  12ab20:	e5d33007 	ldrb	r3, [r3, #7]
  12ab24:	e3530000 	cmp	r3, #0
  12ab28:	0a000007 	beq	12ab4c <dhcp_handle_ack+0x180>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
  12ab2c:	e30e3c2c 	movw	r3, #60460	; 0xec2c
  12ab30:	e3403056 	movt	r3, #86	; 0x56
  12ab34:	e593301c 	ldr	r3, [r3, #28]
  12ab38:	e1a00003 	mov	r0, r3
  12ab3c:	ebffaeb3 	bl	116610 <lwip_htonl>
  12ab40:	e1a02000 	mov	r2, r0
  12ab44:	e51b300c 	ldr	r3, [fp, #-12]
  12ab48:	e5832030 	str	r2, [r3, #48]	; 0x30
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12ab4c:	e3a03000 	mov	r3, #0
  12ab50:	e54b3005 	strb	r3, [fp, #-5]
  12ab54:	ea000010 	b	12ab9c <dhcp_handle_ack+0x1d0>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
  12ab58:	e55b3005 	ldrb	r3, [fp, #-5]
  12ab5c:	e2832008 	add	r2, r3, #8
  12ab60:	e30e3c2c 	movw	r3, #60460	; 0xec2c
  12ab64:	e3403056 	movt	r3, #86	; 0x56
  12ab68:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  12ab6c:	e1a00003 	mov	r0, r3
  12ab70:	ebffaea6 	bl	116610 <lwip_htonl>
  12ab74:	e1a03000 	mov	r3, r0
  12ab78:	e50b3010 	str	r3, [fp, #-16]
    dns_setserver(n, &dns_addr);
  12ab7c:	e24b2010 	sub	r2, fp, #16
  12ab80:	e55b3005 	ldrb	r3, [fp, #-5]
  12ab84:	e1a01002 	mov	r1, r2
  12ab88:	e1a00003 	mov	r0, r3
  12ab8c:	ebffaf99 	bl	1169f8 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12ab90:	e55b3005 	ldrb	r3, [fp, #-5]
  12ab94:	e2833001 	add	r3, r3, #1
  12ab98:	e54b3005 	strb	r3, [fp, #-5]
  12ab9c:	e55b3005 	ldrb	r3, [fp, #-5]
  12aba0:	e3530001 	cmp	r3, #1
  12aba4:	8a000006 	bhi	12abc4 <dhcp_handle_ack+0x1f8>
  12aba8:	e55b3005 	ldrb	r3, [fp, #-5]
  12abac:	e2832008 	add	r2, r3, #8
  12abb0:	e30e3c20 	movw	r3, #60448	; 0xec20
  12abb4:	e3403056 	movt	r3, #86	; 0x56
  12abb8:	e7d33002 	ldrb	r3, [r3, r2]
  12abbc:	e3530000 	cmp	r3, #0
  12abc0:	1affffe4 	bne	12ab58 <dhcp_handle_ack+0x18c>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
  12abc4:	e320f000 	nop	{0}
  12abc8:	e24bd004 	sub	sp, fp, #4
  12abcc:	e8bd8800 	pop	{fp, pc}

0012abd0 <dhcp_set_struct>:
 * @param netif the netif for which to set the struct dhcp
 * @param dhcp (uninitialised) dhcp struct allocated by the application
 */
void
dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
{
  12abd0:	e92d4800 	push	{fp, lr}
  12abd4:	e28db004 	add	fp, sp, #4
  12abd8:	e24dd008 	sub	sp, sp, #8
  12abdc:	e50b0008 	str	r0, [fp, #-8]
  12abe0:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12abe4:	e51b3008 	ldr	r3, [fp, #-8]
  12abe8:	e3530000 	cmp	r3, #0
  12abec:	1a000006 	bne	12ac0c <dhcp_set_struct+0x3c>
  12abf0:	e3080dd0 	movw	r0, #36304	; 0x8dd0
  12abf4:	e3400014 	movt	r0, #20
  12abf8:	ebff6145 	bl	103114 <rt_kprintf>
  12abfc:	e3a01faa 	mov	r1, #680	; 0x2a8
  12ac00:	e3080d78 	movw	r0, #36216	; 0x8d78
  12ac04:	e3400014 	movt	r0, #20
  12ac08:	ebff8138 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
  12ac0c:	e51b300c 	ldr	r3, [fp, #-12]
  12ac10:	e3530000 	cmp	r3, #0
  12ac14:	1a000006 	bne	12ac34 <dhcp_set_struct+0x64>
  12ac18:	e3080de0 	movw	r0, #36320	; 0x8de0
  12ac1c:	e3400014 	movt	r0, #20
  12ac20:	ebff613b 	bl	103114 <rt_kprintf>
  12ac24:	e30012a9 	movw	r1, #681	; 0x2a9
  12ac28:	e3080d78 	movw	r0, #36216	; 0x8d78
  12ac2c:	e3400014 	movt	r0, #20
  12ac30:	ebff812e 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("netif already has a struct dhcp set", netif_dhcp_data(netif) == NULL);
  12ac34:	e51b3008 	ldr	r3, [fp, #-8]
  12ac38:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ac3c:	e3530000 	cmp	r3, #0
  12ac40:	0a000006 	beq	12ac60 <dhcp_set_struct+0x90>
  12ac44:	e3080df0 	movw	r0, #36336	; 0x8df0
  12ac48:	e3400014 	movt	r0, #20
  12ac4c:	ebff6130 	bl	103114 <rt_kprintf>
  12ac50:	e30012aa 	movw	r1, #682	; 0x2aa
  12ac54:	e3080d78 	movw	r0, #36216	; 0x8d78
  12ac58:	e3400014 	movt	r0, #20
  12ac5c:	ebff8123 	bl	10b0f0 <sys_arch_assert>

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12ac60:	e3a02040 	mov	r2, #64	; 0x40
  12ac64:	e3a01000 	mov	r1, #0
  12ac68:	e51b000c 	ldr	r0, [fp, #-12]
  12ac6c:	eb005982 	bl	14127c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */
  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12ac70:	e51b3008 	ldr	r3, [fp, #-8]
  12ac74:	e51b200c 	ldr	r2, [fp, #-12]
  12ac78:	e5832028 	str	r2, [r3, #40]	; 0x28
}
  12ac7c:	e320f000 	nop	{0}
  12ac80:	e24bd004 	sub	sp, fp, #4
  12ac84:	e8bd8800 	pop	{fp, pc}

0012ac88 <dhcp_cleanup>:
 *            struct dhcp since the memory is passed back to the heap.
 *
 * @param netif the netif from which to remove the struct dhcp
 */
void dhcp_cleanup(struct netif *netif)
{
  12ac88:	e92d4800 	push	{fp, lr}
  12ac8c:	e28db004 	add	fp, sp, #4
  12ac90:	e24dd008 	sub	sp, sp, #8
  12ac94:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12ac98:	e51b3008 	ldr	r3, [fp, #-8]
  12ac9c:	e3530000 	cmp	r3, #0
  12aca0:	1a000006 	bne	12acc0 <dhcp_cleanup+0x38>
  12aca4:	e3080dd0 	movw	r0, #36304	; 0x8dd0
  12aca8:	e3400014 	movt	r0, #20
  12acac:	ebff6118 	bl	103114 <rt_kprintf>
  12acb0:	e30012bd 	movw	r1, #701	; 0x2bd
  12acb4:	e3080d78 	movw	r0, #36216	; 0x8d78
  12acb8:	e3400014 	movt	r0, #20
  12acbc:	ebff810b 	bl	10b0f0 <sys_arch_assert>

  if (netif_dhcp_data(netif) != NULL) {
  12acc0:	e51b3008 	ldr	r3, [fp, #-8]
  12acc4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12acc8:	e3530000 	cmp	r3, #0
  12accc:	0a000006 	beq	12acec <dhcp_cleanup+0x64>
    mem_free(netif_dhcp_data(netif));
  12acd0:	e51b3008 	ldr	r3, [fp, #-8]
  12acd4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12acd8:	e1a00003 	mov	r0, r3
  12acdc:	ebff8150 	bl	10b224 <mem_free>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, NULL);
  12ace0:	e51b3008 	ldr	r3, [fp, #-8]
  12ace4:	e3a02000 	mov	r2, #0
  12ace8:	e5832028 	str	r2, [r3, #40]	; 0x28
  }
}
  12acec:	e320f000 	nop	{0}
  12acf0:	e24bd004 	sub	sp, fp, #4
  12acf4:	e8bd8800 	pop	{fp, pc}

0012acf8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
  12acf8:	e92d4800 	push	{fp, lr}
  12acfc:	e28db004 	add	fp, sp, #4
  12ad00:	e24dd010 	sub	sp, sp, #16
  12ad04:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
  12ad08:	e51b3010 	ldr	r3, [fp, #-16]
  12ad0c:	e3530000 	cmp	r3, #0
  12ad10:	1a000008 	bne	12ad38 <dhcp_start+0x40>
  12ad14:	e3080dd0 	movw	r0, #36304	; 0x8dd0
  12ad18:	e3400014 	movt	r0, #20
  12ad1c:	ebff60fc 	bl	103114 <rt_kprintf>
  12ad20:	e3a01fb6 	mov	r1, #728	; 0x2d8
  12ad24:	e3080d78 	movw	r0, #36216	; 0x8d78
  12ad28:	e3400014 	movt	r0, #20
  12ad2c:	ebff80ef 	bl	10b0f0 <sys_arch_assert>
  12ad30:	e3e0300f 	mvn	r3, #15
  12ad34:	ea000059 	b	12aea0 <dhcp_start+0x1a8>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
  12ad38:	e51b3010 	ldr	r3, [fp, #-16]
  12ad3c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12ad40:	e2033001 	and	r3, r3, #1
  12ad44:	e3530000 	cmp	r3, #0
  12ad48:	1a000008 	bne	12ad70 <dhcp_start+0x78>
  12ad4c:	e3080e14 	movw	r0, #36372	; 0x8e14
  12ad50:	e3400014 	movt	r0, #20
  12ad54:	ebff60ee 	bl	103114 <rt_kprintf>
  12ad58:	e30012d9 	movw	r1, #729	; 0x2d9
  12ad5c:	e3080d78 	movw	r0, #36216	; 0x8d78
  12ad60:	e3400014 	movt	r0, #20
  12ad64:	ebff80e1 	bl	10b0f0 <sys_arch_assert>
  12ad68:	e3e0300f 	mvn	r3, #15
  12ad6c:	ea00004b 	b	12aea0 <dhcp_start+0x1a8>
  dhcp = netif_dhcp_data(netif);
  12ad70:	e51b3010 	ldr	r3, [fp, #-16]
  12ad74:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ad78:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
  12ad7c:	e51b3010 	ldr	r3, [fp, #-16]
  12ad80:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12ad84:	e3530d09 	cmp	r3, #576	; 0x240
  12ad88:	2a000001 	bcs	12ad94 <dhcp_start+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
  12ad8c:	e3e03000 	mvn	r3, #0
  12ad90:	ea000042 	b	12aea0 <dhcp_start+0x1a8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
  12ad94:	e51b3008 	ldr	r3, [fp, #-8]
  12ad98:	e3530000 	cmp	r3, #0
  12ad9c:	1a00000b 	bne	12add0 <dhcp_start+0xd8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
  12ada0:	e3a00040 	mov	r0, #64	; 0x40
  12ada4:	ebff8112 	bl	10b1f4 <mem_malloc>
  12ada8:	e50b0008 	str	r0, [fp, #-8]
    if (dhcp == NULL) {
  12adac:	e51b3008 	ldr	r3, [fp, #-8]
  12adb0:	e3530000 	cmp	r3, #0
  12adb4:	1a000001 	bne	12adc0 <dhcp_start+0xc8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
  12adb8:	e3e03000 	mvn	r3, #0
  12adbc:	ea000037 	b	12aea0 <dhcp_start+0x1a8>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12adc0:	e51b3010 	ldr	r3, [fp, #-16]
  12adc4:	e51b2008 	ldr	r2, [fp, #-8]
  12adc8:	e5832028 	str	r2, [r3, #40]	; 0x28
  12adcc:	ea00001a 	b	12ae3c <dhcp_start+0x144>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
  12add0:	e51b3008 	ldr	r3, [fp, #-8]
  12add4:	e593300c 	ldr	r3, [r3, #12]
  12add8:	e3530000 	cmp	r3, #0
  12addc:	0a000006 	beq	12adfc <dhcp_start+0x104>
  12ade0:	e3080e38 	movw	r0, #36408	; 0x8e38
  12ade4:	e3400014 	movt	r0, #20
  12ade8:	ebff60c9 	bl	103114 <rt_kprintf>
  12adec:	e30012f2 	movw	r1, #754	; 0x2f2
  12adf0:	e3080d78 	movw	r0, #36216	; 0x8d78
  12adf4:	e3400014 	movt	r0, #20
  12adf8:	ebff80bc 	bl	10b0f0 <sys_arch_assert>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  12adfc:	e51b3008 	ldr	r3, [fp, #-8]
  12ae00:	e5933004 	ldr	r3, [r3, #4]
  12ae04:	e3530000 	cmp	r3, #0
  12ae08:	0a000006 	beq	12ae28 <dhcp_start+0x130>
  12ae0c:	e3080e50 	movw	r0, #36432	; 0x8e50
  12ae10:	e3400014 	movt	r0, #20
  12ae14:	ebff60be 	bl	103114 <rt_kprintf>
  12ae18:	e30012f3 	movw	r1, #755	; 0x2f3
  12ae1c:	e3080d78 	movw	r0, #36216	; 0x8d78
  12ae20:	e3400014 	movt	r0, #20
  12ae24:	ebff80b1 	bl	10b0f0 <sys_arch_assert>

    if (dhcp->pcb_allocated != 0) {
  12ae28:	e51b3008 	ldr	r3, [fp, #-8]
  12ae2c:	e5d33008 	ldrb	r3, [r3, #8]
  12ae30:	e3530000 	cmp	r3, #0
  12ae34:	0a000000 	beq	12ae3c <dhcp_start+0x144>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12ae38:	ebfffcb7 	bl	12a11c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12ae3c:	e3a02040 	mov	r2, #64	; 0x40
  12ae40:	e3a01000 	mov	r1, #0
  12ae44:	e51b0008 	ldr	r0, [fp, #-8]
  12ae48:	eb00590b 	bl	14127c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12ae4c:	ebfffc66 	bl	129fec <dhcp_inc_pcb_refcount>
  12ae50:	e1a03000 	mov	r3, r0
  12ae54:	e3530000 	cmp	r3, #0
  12ae58:	0a000001 	beq	12ae64 <dhcp_start+0x16c>
    return ERR_MEM;
  12ae5c:	e3e03000 	mvn	r3, #0
  12ae60:	ea00000e 	b	12aea0 <dhcp_start+0x1a8>
  }
  dhcp->pcb_allocated = 1;
  12ae64:	e51b3008 	ldr	r3, [fp, #-8]
  12ae68:	e3a02001 	mov	r2, #1
  12ae6c:	e5c32008 	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
  12ae70:	e51b0010 	ldr	r0, [fp, #-16]
  12ae74:	eb000103 	bl	12b288 <dhcp_discover>
  12ae78:	e1a03000 	mov	r3, r0
  12ae7c:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
  12ae80:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12ae84:	e3530000 	cmp	r3, #0
  12ae88:	0a000003 	beq	12ae9c <dhcp_start+0x1a4>
    /* free resources allocated above */
    dhcp_stop(netif);
  12ae8c:	e51b0010 	ldr	r0, [fp, #-16]
  12ae90:	eb000410 	bl	12bed8 <dhcp_stop>
    return ERR_MEM;
  12ae94:	e3e03000 	mvn	r3, #0
  12ae98:	ea000000 	b	12aea0 <dhcp_start+0x1a8>
  }
  return result;
  12ae9c:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12aea0:	e1a00003 	mov	r0, r3
  12aea4:	e24bd004 	sub	sp, fp, #4
  12aea8:	e8bd8800 	pop	{fp, pc}

0012aeac <dhcp_inform>:
 *
 * @param netif The lwIP network interface
 */
void
dhcp_inform(struct netif *netif)
{
  12aeac:	e92d4800 	push	{fp, lr}
  12aeb0:	e28db004 	add	fp, sp, #4
  12aeb4:	e24dd058 	sub	sp, sp, #88	; 0x58
  12aeb8:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  struct dhcp dhcp;
  err_t result = ERR_OK;
  12aebc:	e3a03000 	mov	r3, #0
  12aec0:	e54b3005 	strb	r3, [fp, #-5]

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12aec4:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12aec8:	e3530000 	cmp	r3, #0
  12aecc:	1a000007 	bne	12aef0 <dhcp_inform+0x44>
  12aed0:	e3080dd0 	movw	r0, #36304	; 0x8dd0
  12aed4:	e3400014 	movt	r0, #20
  12aed8:	ebff608d 	bl	103114 <rt_kprintf>
  12aedc:	e3001329 	movw	r1, #809	; 0x329
  12aee0:	e3080d78 	movw	r0, #36216	; 0x8d78
  12aee4:	e3400014 	movt	r0, #20
  12aee8:	ebff8080 	bl	10b0f0 <sys_arch_assert>
  12aeec:	ea00003b 	b	12afe0 <dhcp_inform+0x134>

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12aef0:	ebfffc3d 	bl	129fec <dhcp_inc_pcb_refcount>
  12aef4:	e1a03000 	mov	r3, r0
  12aef8:	e3530000 	cmp	r3, #0
  12aefc:	1a000036 	bne	12afdc <dhcp_inform+0x130>
    return;
  }

  memset(&dhcp, 0, sizeof(struct dhcp));
  12af00:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af04:	e3a02040 	mov	r2, #64	; 0x40
  12af08:	e3a01000 	mov	r1, #0
  12af0c:	e1a00003 	mov	r0, r3
  12af10:	eb0058d9 	bl	14127c <memset>
  dhcp_set_state(&dhcp, DHCP_STATE_INFORMING);
  12af14:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af18:	e3a01007 	mov	r1, #7
  12af1c:	e1a00003 	mov	r0, r3
  12af20:	eb000419 	bl	12bf8c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
  12af24:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af28:	e3a02008 	mov	r2, #8
  12af2c:	e1a01003 	mov	r1, r3
  12af30:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  12af34:	eb000844 	bl	12d04c <dhcp_create_msg>
  12af38:	e1a03000 	mov	r3, r0
  12af3c:	e54b3005 	strb	r3, [fp, #-5]
  if (result == ERR_OK) {
  12af40:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12af44:	e3530000 	cmp	r3, #0
  12af48:	1a000021 	bne	12afd4 <dhcp_inform+0x128>
    dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12af4c:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af50:	e3a02002 	mov	r2, #2
  12af54:	e3a01039 	mov	r1, #57	; 0x39
  12af58:	e1a00003 	mov	r0, r3
  12af5c:	eb000422 	bl	12bfec <dhcp_option>
    dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
  12af60:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12af64:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  12af68:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af6c:	e1a01002 	mov	r1, r2
  12af70:	e1a00003 	mov	r0, r3
  12af74:	eb00046b 	bl	12c128 <dhcp_option_short>

    dhcp_option_trailer(&dhcp);
  12af78:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af7c:	e1a00003 	mov	r0, r3
  12af80:	eb00099e 	bl	12d600 <dhcp_option_trailer>

    pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
  12af84:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  12af88:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  12af8c:	e28330f0 	add	r3, r3, #240	; 0xf0
  12af90:	e6ff3073 	uxth	r3, r3
  12af94:	e1a01003 	mov	r1, r3
  12af98:	e1a00002 	mov	r0, r2
  12af9c:	ebffbe7d 	bl	11a998 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));

    udp_sendto_if(dhcp_pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12afa0:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12afa4:	e3403014 	movt	r3, #20
  12afa8:	e5930000 	ldr	r0, [r3]
  12afac:	e51b103c 	ldr	r1, [fp, #-60]	; 0xffffffc4
  12afb0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12afb4:	e58d3000 	str	r3, [sp]
  12afb8:	e3a03043 	mov	r3, #67	; 0x43
  12afbc:	e3092914 	movw	r2, #39188	; 0x9914
  12afc0:	e3402014 	movt	r2, #20
  12afc4:	ebfff49a 	bl	128234 <udp_sendto_if>

    dhcp_delete_msg(&dhcp);
  12afc8:	e24b3048 	sub	r3, fp, #72	; 0x48
  12afcc:	e1a00003 	mov	r0, r3
  12afd0:	eb000955 	bl	12d52c <dhcp_delete_msg>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
  }

  dhcp_dec_pcb_refcount(); /* delete DHCP PCB if not needed any more */
  12afd4:	ebfffc50 	bl	12a11c <dhcp_dec_pcb_refcount>
  12afd8:	ea000000 	b	12afe0 <dhcp_inform+0x134>
    return;
  12afdc:	e320f000 	nop	{0}
}
  12afe0:	e24bd004 	sub	sp, fp, #4
  12afe4:	e8bd8800 	pop	{fp, pc}

0012afe8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
  12afe8:	e92d4800 	push	{fp, lr}
  12afec:	e28db004 	add	fp, sp, #4
  12aff0:	e24dd010 	sub	sp, sp, #16
  12aff4:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12aff8:	e51b3010 	ldr	r3, [fp, #-16]
  12affc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b000:	e50b3008 	str	r3, [fp, #-8]

  if (!dhcp)
  12b004:	e51b3008 	ldr	r3, [fp, #-8]
  12b008:	e3530000 	cmp	r3, #0
  12b00c:	0a00001c 	beq	12b084 <dhcp_network_changed+0x9c>
    return;
  switch (dhcp->state) {
  12b010:	e51b3008 	ldr	r3, [fp, #-8]
  12b014:	e5d33009 	ldrb	r3, [r3, #9]
  12b018:	e353000a 	cmp	r3, #10
  12b01c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12b020:	ea000010 	b	12b068 <dhcp_network_changed+0x80>
  12b024:	0012b08c 	.word	0x0012b08c
  12b028:	0012b068 	.word	0x0012b068
  12b02c:	0012b068 	.word	0x0012b068
  12b030:	0012b050 	.word	0x0012b050
  12b034:	0012b050 	.word	0x0012b050
  12b038:	0012b050 	.word	0x0012b050
  12b03c:	0012b068 	.word	0x0012b068
  12b040:	0012b068 	.word	0x0012b068
  12b044:	0012b068 	.word	0x0012b068
  12b048:	0012b068 	.word	0x0012b068
  12b04c:	0012b050 	.word	0x0012b050
  case DHCP_STATE_REBINDING:
  case DHCP_STATE_RENEWING:
  case DHCP_STATE_BOUND:
  case DHCP_STATE_REBOOTING:
    dhcp->tries = 0;
  12b050:	e51b3008 	ldr	r3, [fp, #-8]
  12b054:	e3a02000 	mov	r2, #0
  12b058:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_reboot(netif);
  12b05c:	e51b0010 	ldr	r0, [fp, #-16]
  12b060:	eb0002a7 	bl	12bb04 <dhcp_reboot>
    break;
  12b064:	ea000009 	b	12b090 <dhcp_network_changed+0xa8>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    /* ensure we start with short timeouts, even if already discovering */
    dhcp->tries = 0;
  12b068:	e51b3008 	ldr	r3, [fp, #-8]
  12b06c:	e3a02000 	mov	r2, #0
  12b070:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_discover(netif);
  12b074:	e51b0010 	ldr	r0, [fp, #-16]
  12b078:	eb000082 	bl	12b288 <dhcp_discover>
    break;
  12b07c:	e320f000 	nop	{0}
  12b080:	ea000002 	b	12b090 <dhcp_network_changed+0xa8>
    return;
  12b084:	e320f000 	nop	{0}
  12b088:	ea000000 	b	12b090 <dhcp_network_changed+0xa8>
    break;
  12b08c:	e320f000 	nop	{0}
  }
}
  12b090:	e24bd004 	sub	sp, fp, #4
  12b094:	e8bd8800 	pop	{fp, pc}

0012b098 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
  12b098:	e92d4800 	push	{fp, lr}
  12b09c:	e28db004 	add	fp, sp, #4
  12b0a0:	e24dd010 	sub	sp, sp, #16
  12b0a4:	e50b0010 	str	r0, [fp, #-16]
  12b0a8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12b0ac:	e51b3010 	ldr	r3, [fp, #-16]
  12b0b0:	e3530000 	cmp	r3, #0
  12b0b4:	1a000007 	bne	12b0d8 <dhcp_arp_reply+0x40>
  12b0b8:	e3080dd0 	movw	r0, #36304	; 0x8dd0
  12b0bc:	e3400014 	movt	r0, #20
  12b0c0:	ebff6013 	bl	103114 <rt_kprintf>
  12b0c4:	e300137d 	movw	r1, #893	; 0x37d
  12b0c8:	e3080d78 	movw	r0, #36216	; 0x8d78
  12b0cc:	e3400014 	movt	r0, #20
  12b0d0:	ebff8006 	bl	10b0f0 <sys_arch_assert>
  12b0d4:	ea000011 	b	12b120 <dhcp_arp_reply+0x88>
  dhcp = netif_dhcp_data(netif);
  12b0d8:	e51b3010 	ldr	r3, [fp, #-16]
  12b0dc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b0e0:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
  12b0e4:	e51b3008 	ldr	r3, [fp, #-8]
  12b0e8:	e3530000 	cmp	r3, #0
  12b0ec:	0a00000b 	beq	12b120 <dhcp_arp_reply+0x88>
  12b0f0:	e51b3008 	ldr	r3, [fp, #-8]
  12b0f4:	e5d33009 	ldrb	r3, [r3, #9]
  12b0f8:	e3530008 	cmp	r3, #8
  12b0fc:	1a000007 	bne	12b120 <dhcp_arp_reply+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
  12b100:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12b104:	e5932000 	ldr	r2, [r3]
  12b108:	e51b3008 	ldr	r3, [fp, #-8]
  12b10c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b110:	e1520003 	cmp	r2, r3
  12b114:	1a000001 	bne	12b120 <dhcp_arp_reply+0x88>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
  12b118:	e51b0010 	ldr	r0, [fp, #-16]
  12b11c:	eb000001 	bl	12b128 <dhcp_decline>
    }
  }
}
  12b120:	e24bd004 	sub	sp, fp, #4
  12b124:	e8bd8800 	pop	{fp, pc}

0012b128 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
  12b128:	e92d4800 	push	{fp, lr}
  12b12c:	e28db004 	add	fp, sp, #4
  12b130:	e24dd018 	sub	sp, sp, #24
  12b134:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b138:	e51b3010 	ldr	r3, [fp, #-16]
  12b13c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b140:	e50b3008 	str	r3, [fp, #-8]
  err_t result = ERR_OK;
  12b144:	e3a03000 	mov	r3, #0
  12b148:	e54b3009 	strb	r3, [fp, #-9]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  12b14c:	e3a0100c 	mov	r1, #12
  12b150:	e51b0008 	ldr	r0, [fp, #-8]
  12b154:	eb00038c 	bl	12bf8c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
  12b158:	e3a02004 	mov	r2, #4
  12b15c:	e51b1008 	ldr	r1, [fp, #-8]
  12b160:	e51b0010 	ldr	r0, [fp, #-16]
  12b164:	eb0007b8 	bl	12d04c <dhcp_create_msg>
  12b168:	e1a03000 	mov	r3, r0
  12b16c:	e54b3009 	strb	r3, [fp, #-9]
  if (result == ERR_OK) {
  12b170:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12b174:	e3530000 	cmp	r3, #0
  12b178:	1a000026 	bne	12b218 <dhcp_decline+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12b17c:	e3a02004 	mov	r2, #4
  12b180:	e3a01032 	mov	r1, #50	; 0x32
  12b184:	e51b0008 	ldr	r0, [fp, #-8]
  12b188:	eb000397 	bl	12bfec <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12b18c:	e51b3008 	ldr	r3, [fp, #-8]
  12b190:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b194:	e1a00003 	mov	r0, r3
  12b198:	ebffad1c 	bl	116610 <lwip_htonl>
  12b19c:	e1a03000 	mov	r3, r0
  12b1a0:	e1a01003 	mov	r1, r3
  12b1a4:	e51b0008 	ldr	r0, [fp, #-8]
  12b1a8:	eb00040f 	bl	12c1ec <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12b1ac:	e51b0008 	ldr	r0, [fp, #-8]
  12b1b0:	eb000912 	bl	12d600 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b1b4:	e51b3008 	ldr	r3, [fp, #-8]
  12b1b8:	e593200c 	ldr	r2, [r3, #12]
  12b1bc:	e51b3008 	ldr	r3, [fp, #-8]
  12b1c0:	e1d331b4 	ldrh	r3, [r3, #20]
  12b1c4:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b1c8:	e6ff3073 	uxth	r3, r3
  12b1cc:	e1a01003 	mov	r1, r3
  12b1d0:	e1a00002 	mov	r0, r2
  12b1d4:	ebffbdef 	bl	11a998 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12b1d8:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12b1dc:	e3403014 	movt	r3, #20
  12b1e0:	e5930000 	ldr	r0, [r3]
  12b1e4:	e51b3008 	ldr	r3, [fp, #-8]
  12b1e8:	e593100c 	ldr	r1, [r3, #12]
  12b1ec:	e3093910 	movw	r3, #39184	; 0x9910
  12b1f0:	e3403014 	movt	r3, #20
  12b1f4:	e58d3004 	str	r3, [sp, #4]
  12b1f8:	e51b3010 	ldr	r3, [fp, #-16]
  12b1fc:	e58d3000 	str	r3, [sp]
  12b200:	e3a03043 	mov	r3, #67	; 0x43
  12b204:	e3092914 	movw	r2, #39188	; 0x9914
  12b208:	e3402014 	movt	r2, #20
  12b20c:	ebfff440 	bl	128314 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12b210:	e51b0008 	ldr	r0, [fp, #-8]
  12b214:	eb0008c4 	bl	12d52c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b218:	e51b3008 	ldr	r3, [fp, #-8]
  12b21c:	e5d3300a 	ldrb	r3, [r3, #10]
  12b220:	e35300ff 	cmp	r3, #255	; 0xff
  12b224:	0a000005 	beq	12b240 <dhcp_decline+0x118>
    dhcp->tries++;
  12b228:	e51b3008 	ldr	r3, [fp, #-8]
  12b22c:	e5d3300a 	ldrb	r3, [r3, #10]
  12b230:	e2833001 	add	r3, r3, #1
  12b234:	e6ef2073 	uxtb	r2, r3
  12b238:	e51b3008 	ldr	r3, [fp, #-8]
  12b23c:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
  12b240:	e3023710 	movw	r3, #10000	; 0x2710
  12b244:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b248:	e15b30bc 	ldrh	r3, [fp, #-12]
  12b24c:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b250:	e2833003 	add	r3, r3, #3
  12b254:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b258:	e3412062 	movt	r2, #4194	; 0x1062
  12b25c:	e0c10293 	smull	r0, r1, r3, r2
  12b260:	e1a022c1 	asr	r2, r1, #5
  12b264:	e1a03fc3 	asr	r3, r3, #31
  12b268:	e0423003 	sub	r3, r2, r3
  12b26c:	e6ff2073 	uxth	r2, r3
  12b270:	e51b3008 	ldr	r3, [fp, #-8]
  12b274:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b278:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12b27c:	e1a00003 	mov	r0, r3
  12b280:	e24bd004 	sub	sp, fp, #4
  12b284:	e8bd8800 	pop	{fp, pc}

0012b288 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
  12b288:	e92d4800 	push	{fp, lr}
  12b28c:	e28db004 	add	fp, sp, #4
  12b290:	e24dd020 	sub	sp, sp, #32
  12b294:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b298:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b29c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b2a0:	e50b300c 	str	r3, [fp, #-12]
  err_t result = ERR_OK;
  12b2a4:	e3a03000 	mov	r3, #0
  12b2a8:	e54b300d 	strb	r3, [fp, #-13]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
  12b2ac:	e51b300c 	ldr	r3, [fp, #-12]
  12b2b0:	e3a02000 	mov	r2, #0
  12b2b4:	e5832028 	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
  12b2b8:	e3a01006 	mov	r1, #6
  12b2bc:	e51b000c 	ldr	r0, [fp, #-12]
  12b2c0:	eb000331 	bl	12bf8c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
  12b2c4:	e3a02001 	mov	r2, #1
  12b2c8:	e51b100c 	ldr	r1, [fp, #-12]
  12b2cc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b2d0:	eb00075d 	bl	12d04c <dhcp_create_msg>
  12b2d4:	e1a03000 	mov	r3, r0
  12b2d8:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b2dc:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b2e0:	e3530000 	cmp	r3, #0
  12b2e4:	1a000037 	bne	12b3c8 <dhcp_discover+0x140>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b2e8:	e3a02002 	mov	r2, #2
  12b2ec:	e3a01039 	mov	r1, #57	; 0x39
  12b2f0:	e51b000c 	ldr	r0, [fp, #-12]
  12b2f4:	eb00033c 	bl	12bfec <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b2f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b2fc:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b300:	e1a01003 	mov	r1, r3
  12b304:	e51b000c 	ldr	r0, [fp, #-12]
  12b308:	eb000386 	bl	12c128 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b30c:	e3a02004 	mov	r2, #4
  12b310:	e3a01037 	mov	r1, #55	; 0x37
  12b314:	e51b000c 	ldr	r0, [fp, #-12]
  12b318:	eb000333 	bl	12bfec <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b31c:	e3a03000 	mov	r3, #0
  12b320:	e54b3005 	strb	r3, [fp, #-5]
  12b324:	ea000009 	b	12b350 <dhcp_discover+0xc8>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b328:	e55b2005 	ldrb	r2, [fp, #-5]
  12b32c:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b330:	e3403014 	movt	r3, #20
  12b334:	e7d33002 	ldrb	r3, [r3, r2]
  12b338:	e1a01003 	mov	r1, r3
  12b33c:	e51b000c 	ldr	r0, [fp, #-12]
  12b340:	eb000359 	bl	12c0ac <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b344:	e55b3005 	ldrb	r3, [fp, #-5]
  12b348:	e2833001 	add	r3, r3, #1
  12b34c:	e54b3005 	strb	r3, [fp, #-5]
  12b350:	e55b3005 	ldrb	r3, [fp, #-5]
  12b354:	e3530003 	cmp	r3, #3
  12b358:	9afffff2 	bls	12b328 <dhcp_discover+0xa0>
    }
    dhcp_option_trailer(dhcp);
  12b35c:	e51b000c 	ldr	r0, [fp, #-12]
  12b360:	eb0008a6 	bl	12d600 <dhcp_option_trailer>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b364:	e51b300c 	ldr	r3, [fp, #-12]
  12b368:	e593200c 	ldr	r2, [r3, #12]
  12b36c:	e51b300c 	ldr	r3, [fp, #-12]
  12b370:	e1d331b4 	ldrh	r3, [r3, #20]
  12b374:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b378:	e6ff3073 	uxth	r3, r3
  12b37c:	e1a01003 	mov	r1, r3
  12b380:	e1a00002 	mov	r0, r2
  12b384:	ebffbd83 	bl	11a998 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12b388:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12b38c:	e3403014 	movt	r3, #20
  12b390:	e5930000 	ldr	r0, [r3]
  12b394:	e51b300c 	ldr	r3, [fp, #-12]
  12b398:	e593100c 	ldr	r1, [r3, #12]
  12b39c:	e3093910 	movw	r3, #39184	; 0x9910
  12b3a0:	e3403014 	movt	r3, #20
  12b3a4:	e58d3004 	str	r3, [sp, #4]
  12b3a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b3ac:	e58d3000 	str	r3, [sp]
  12b3b0:	e3a03043 	mov	r3, #67	; 0x43
  12b3b4:	e3092914 	movw	r2, #39188	; 0x9914
  12b3b8:	e3402014 	movt	r2, #20
  12b3bc:	ebfff3d4 	bl	128314 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
  12b3c0:	e51b000c 	ldr	r0, [fp, #-12]
  12b3c4:	eb000858 	bl	12d52c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b3c8:	e51b300c 	ldr	r3, [fp, #-12]
  12b3cc:	e5d3300a 	ldrb	r3, [r3, #10]
  12b3d0:	e35300ff 	cmp	r3, #255	; 0xff
  12b3d4:	0a000005 	beq	12b3f0 <dhcp_discover+0x168>
    dhcp->tries++;
  12b3d8:	e51b300c 	ldr	r3, [fp, #-12]
  12b3dc:	e5d3300a 	ldrb	r3, [r3, #10]
  12b3e0:	e2833001 	add	r3, r3, #1
  12b3e4:	e6ef2073 	uxtb	r2, r3
  12b3e8:	e51b300c 	ldr	r3, [fp, #-12]
  12b3ec:	e5c3200a 	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12b3f0:	e51b300c 	ldr	r3, [fp, #-12]
  12b3f4:	e5d3300a 	ldrb	r3, [r3, #10]
  12b3f8:	e3530005 	cmp	r3, #5
  12b3fc:	8a000006 	bhi	12b41c <dhcp_discover+0x194>
  12b400:	e51b300c 	ldr	r3, [fp, #-12]
  12b404:	e5d3300a 	ldrb	r3, [r3, #10]
  12b408:	e1a02003 	mov	r2, r3
  12b40c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12b410:	e1a03213 	lsl	r3, r3, r2
  12b414:	e6ff3073 	uxth	r3, r3
  12b418:	ea000000 	b	12b420 <dhcp_discover+0x198>
  12b41c:	e30e3a60 	movw	r3, #60000	; 0xea60
  12b420:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b424:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b428:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b42c:	e2833003 	add	r3, r3, #3
  12b430:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b434:	e3412062 	movt	r2, #4194	; 0x1062
  12b438:	e0c10293 	smull	r0, r1, r3, r2
  12b43c:	e1a022c1 	asr	r2, r1, #5
  12b440:	e1a03fc3 	asr	r3, r3, #31
  12b444:	e0423003 	sub	r3, r2, r3
  12b448:	e6ff2073 	uxth	r2, r3
  12b44c:	e51b300c 	ldr	r3, [fp, #-12]
  12b450:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b454:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b458:	e1a00003 	mov	r0, r3
  12b45c:	e24bd004 	sub	sp, fp, #4
  12b460:	e8bd8800 	pop	{fp, pc}

0012b464 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
  12b464:	e92d4800 	push	{fp, lr}
  12b468:	e28db004 	add	fp, sp, #4
  12b46c:	e24dd020 	sub	sp, sp, #32
  12b470:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
  12b474:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b478:	e3530000 	cmp	r3, #0
  12b47c:	1a000007 	bne	12b4a0 <dhcp_bind+0x3c>
  12b480:	e3080e64 	movw	r0, #36452	; 0x8e64
  12b484:	e3400014 	movt	r0, #20
  12b488:	ebff5f21 	bl	103114 <rt_kprintf>
  12b48c:	e30013ff 	movw	r1, #1023	; 0x3ff
  12b490:	e3080d78 	movw	r0, #36216	; 0x8d78
  12b494:	e3400014 	movt	r0, #20
  12b498:	ebff7f14 	bl	10b0f0 <sys_arch_assert>
  12b49c:	ea0000aa 	b	12b74c <dhcp_bind+0x2e8>
  dhcp = netif_dhcp_data(netif);
  12b4a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b4a4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b4a8:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
  12b4ac:	e51b300c 	ldr	r3, [fp, #-12]
  12b4b0:	e3530000 	cmp	r3, #0
  12b4b4:	1a000007 	bne	12b4d8 <dhcp_bind+0x74>
  12b4b8:	e3080e80 	movw	r0, #36480	; 0x8e80
  12b4bc:	e3400014 	movt	r0, #20
  12b4c0:	ebff5f13 	bl	103114 <rt_kprintf>
  12b4c4:	e3001401 	movw	r1, #1025	; 0x401
  12b4c8:	e3080d78 	movw	r0, #36216	; 0x8d78
  12b4cc:	e3400014 	movt	r0, #20
  12b4d0:	ebff7f06 	bl	10b0f0 <sys_arch_assert>
  12b4d4:	ea00009c 	b	12b74c <dhcp_bind+0x2e8>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
  12b4d8:	e51b300c 	ldr	r3, [fp, #-12]
  12b4dc:	e3a02000 	mov	r2, #0
  12b4e0:	e1c322b0 	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
  12b4e4:	e51b300c 	ldr	r3, [fp, #-12]
  12b4e8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b4ec:	e3730001 	cmn	r3, #1
  12b4f0:	0a000017 	beq	12b554 <dhcp_bind+0xf0>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b4f4:	e51b300c 	ldr	r3, [fp, #-12]
  12b4f8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b4fc:	e283201e 	add	r2, r3, #30
  12b500:	e3083889 	movw	r3, #34953	; 0x8889
  12b504:	e3483888 	movt	r3, #34952	; 0x8888
  12b508:	e0832392 	umull	r2, r3, r2, r3
  12b50c:	e1a032a3 	lsr	r3, r3, #5
  12b510:	e50b3008 	str	r3, [fp, #-8]
     if (timeout > 0xffff) {
  12b514:	e51b3008 	ldr	r3, [fp, #-8]
  12b518:	e3530801 	cmp	r3, #65536	; 0x10000
  12b51c:	3a000001 	bcc	12b528 <dhcp_bind+0xc4>
       timeout = 0xffff;
  12b520:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b524:	e50b3008 	str	r3, [fp, #-8]
     }
     dhcp->t0_timeout = (u16_t)timeout;
  12b528:	e51b3008 	ldr	r3, [fp, #-8]
  12b52c:	e6ff2073 	uxth	r2, r3
  12b530:	e51b300c 	ldr	r3, [fp, #-12]
  12b534:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
  12b538:	e51b300c 	ldr	r3, [fp, #-12]
  12b53c:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12b540:	e3530000 	cmp	r3, #0
  12b544:	1a000002 	bne	12b554 <dhcp_bind+0xf0>
       dhcp->t0_timeout = 1;
  12b548:	e51b300c 	ldr	r3, [fp, #-12]
  12b54c:	e3a02001 	mov	r2, #1
  12b550:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
  12b554:	e51b300c 	ldr	r3, [fp, #-12]
  12b558:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b55c:	e3730001 	cmn	r3, #1
  12b560:	0a00001b 	beq	12b5d4 <dhcp_bind+0x170>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b564:	e51b300c 	ldr	r3, [fp, #-12]
  12b568:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b56c:	e283201e 	add	r2, r3, #30
  12b570:	e3083889 	movw	r3, #34953	; 0x8889
  12b574:	e3483888 	movt	r3, #34952	; 0x8888
  12b578:	e0832392 	umull	r2, r3, r2, r3
  12b57c:	e1a032a3 	lsr	r3, r3, #5
  12b580:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b584:	e51b3008 	ldr	r3, [fp, #-8]
  12b588:	e3530801 	cmp	r3, #65536	; 0x10000
  12b58c:	3a000001 	bcc	12b598 <dhcp_bind+0x134>
      timeout = 0xffff;
  12b590:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b594:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t1_timeout = (u16_t)timeout;
  12b598:	e51b3008 	ldr	r3, [fp, #-8]
  12b59c:	e6ff2073 	uxth	r2, r3
  12b5a0:	e51b300c 	ldr	r3, [fp, #-12]
  12b5a4:	e1c321b8 	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
  12b5a8:	e51b300c 	ldr	r3, [fp, #-12]
  12b5ac:	e1d331b8 	ldrh	r3, [r3, #24]
  12b5b0:	e3530000 	cmp	r3, #0
  12b5b4:	1a000002 	bne	12b5c4 <dhcp_bind+0x160>
      dhcp->t1_timeout = 1;
  12b5b8:	e51b300c 	ldr	r3, [fp, #-12]
  12b5bc:	e3a02001 	mov	r2, #1
  12b5c0:	e1c321b8 	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
  12b5c4:	e51b300c 	ldr	r3, [fp, #-12]
  12b5c8:	e1d321b8 	ldrh	r2, [r3, #24]
  12b5cc:	e51b300c 	ldr	r3, [fp, #-12]
  12b5d0:	e1c321bc 	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
  12b5d4:	e51b300c 	ldr	r3, [fp, #-12]
  12b5d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b5dc:	e3730001 	cmn	r3, #1
  12b5e0:	0a00001b 	beq	12b654 <dhcp_bind+0x1f0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b5e4:	e51b300c 	ldr	r3, [fp, #-12]
  12b5e8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b5ec:	e283201e 	add	r2, r3, #30
  12b5f0:	e3083889 	movw	r3, #34953	; 0x8889
  12b5f4:	e3483888 	movt	r3, #34952	; 0x8888
  12b5f8:	e0832392 	umull	r2, r3, r2, r3
  12b5fc:	e1a032a3 	lsr	r3, r3, #5
  12b600:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b604:	e51b3008 	ldr	r3, [fp, #-8]
  12b608:	e3530801 	cmp	r3, #65536	; 0x10000
  12b60c:	3a000001 	bcc	12b618 <dhcp_bind+0x1b4>
      timeout = 0xffff;
  12b610:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b614:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t2_timeout = (u16_t)timeout;
  12b618:	e51b3008 	ldr	r3, [fp, #-8]
  12b61c:	e6ff2073 	uxth	r2, r3
  12b620:	e51b300c 	ldr	r3, [fp, #-12]
  12b624:	e1c321ba 	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
  12b628:	e51b300c 	ldr	r3, [fp, #-12]
  12b62c:	e1d331ba 	ldrh	r3, [r3, #26]
  12b630:	e3530000 	cmp	r3, #0
  12b634:	1a000002 	bne	12b644 <dhcp_bind+0x1e0>
      dhcp->t2_timeout = 1;
  12b638:	e51b300c 	ldr	r3, [fp, #-12]
  12b63c:	e3a02001 	mov	r2, #1
  12b640:	e1c321ba 	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
  12b644:	e51b300c 	ldr	r3, [fp, #-12]
  12b648:	e1d321ba 	ldrh	r2, [r3, #26]
  12b64c:	e51b300c 	ldr	r3, [fp, #-12]
  12b650:	e1c321be 	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
  12b654:	e51b300c 	ldr	r3, [fp, #-12]
  12b658:	e1d321b8 	ldrh	r2, [r3, #24]
  12b65c:	e51b300c 	ldr	r3, [fp, #-12]
  12b660:	e1d331ba 	ldrh	r3, [r3, #26]
  12b664:	e1520003 	cmp	r2, r3
  12b668:	3a000006 	bcc	12b688 <dhcp_bind+0x224>
  12b66c:	e51b300c 	ldr	r3, [fp, #-12]
  12b670:	e1d331ba 	ldrh	r3, [r3, #26]
  12b674:	e3530000 	cmp	r3, #0
  12b678:	0a000002 	beq	12b688 <dhcp_bind+0x224>
    dhcp->t1_timeout = 0;
  12b67c:	e51b300c 	ldr	r3, [fp, #-12]
  12b680:	e3a02000 	mov	r2, #0
  12b684:	e1c321b8 	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
  12b688:	e51b300c 	ldr	r3, [fp, #-12]
  12b68c:	e5d3300b 	ldrb	r3, [r3, #11]
  12b690:	e3530000 	cmp	r3, #0
  12b694:	0a000003 	beq	12b6a8 <dhcp_bind+0x244>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
  12b698:	e51b300c 	ldr	r3, [fp, #-12]
  12b69c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12b6a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b6a4:	ea000011 	b	12b6f0 <dhcp_bind+0x28c>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
  12b6a8:	e51b300c 	ldr	r3, [fp, #-12]
  12b6ac:	e2833028 	add	r3, r3, #40	; 0x28
  12b6b0:	e5d33000 	ldrb	r3, [r3]
  12b6b4:	e54b300d 	strb	r3, [fp, #-13]
    if (first_octet <= 127) {
  12b6b8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b6bc:	e3530000 	cmp	r3, #0
  12b6c0:	ba000002 	blt	12b6d0 <dhcp_bind+0x26c>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
  12b6c4:	e3a030ff 	mov	r3, #255	; 0xff
  12b6c8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b6cc:	ea000007 	b	12b6f0 <dhcp_bind+0x28c>
    } else if (first_octet >= 192) {
  12b6d0:	e55b300d 	ldrb	r3, [fp, #-13]
  12b6d4:	e35300bf 	cmp	r3, #191	; 0xbf
  12b6d8:	9a000002 	bls	12b6e8 <dhcp_bind+0x284>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
  12b6dc:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
  12b6e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b6e4:	ea000001 	b	12b6f0 <dhcp_bind+0x28c>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
  12b6e8:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b6ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
  12b6f0:	e51b300c 	ldr	r3, [fp, #-12]
  12b6f4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  12b6f8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
  12b6fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b700:	e3530000 	cmp	r3, #0
  12b704:	1a000007 	bne	12b728 <dhcp_bind+0x2c4>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
  12b708:	e51b300c 	ldr	r3, [fp, #-12]
  12b70c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12b710:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12b714:	e0033002 	and	r3, r3, r2
  12b718:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
  12b71c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b720:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
  12b724:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
  12b728:	e3a0100a 	mov	r1, #10
  12b72c:	e51b000c 	ldr	r0, [fp, #-12]
  12b730:	eb000215 	bl	12bf8c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
  12b734:	e51b300c 	ldr	r3, [fp, #-12]
  12b738:	e2831028 	add	r1, r3, #40	; 0x28
  12b73c:	e24b3018 	sub	r3, fp, #24
  12b740:	e24b2014 	sub	r2, fp, #20
  12b744:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  12b748:	ebffb76d 	bl	119504 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
  12b74c:	e24bd004 	sub	sp, fp, #4
  12b750:	e8bd8800 	pop	{fp, pc}

0012b754 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
  12b754:	e92d4800 	push	{fp, lr}
  12b758:	e28db004 	add	fp, sp, #4
  12b75c:	e24dd020 	sub	sp, sp, #32
  12b760:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b764:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b768:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b76c:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
  12b770:	e3a01005 	mov	r1, #5
  12b774:	e51b000c 	ldr	r0, [fp, #-12]
  12b778:	eb000203 	bl	12bf8c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b77c:	e3a02003 	mov	r2, #3
  12b780:	e51b100c 	ldr	r1, [fp, #-12]
  12b784:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b788:	eb00062f 	bl	12d04c <dhcp_create_msg>
  12b78c:	e1a03000 	mov	r3, r0
  12b790:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b794:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b798:	e3530000 	cmp	r3, #0
  12b79c:	1a000037 	bne	12b880 <dhcp_renew+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b7a0:	e3a02002 	mov	r2, #2
  12b7a4:	e3a01039 	mov	r1, #57	; 0x39
  12b7a8:	e51b000c 	ldr	r0, [fp, #-12]
  12b7ac:	eb00020e 	bl	12bfec <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b7b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b7b4:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b7b8:	e1a01003 	mov	r1, r3
  12b7bc:	e51b000c 	ldr	r0, [fp, #-12]
  12b7c0:	eb000258 	bl	12c128 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b7c4:	e3a02004 	mov	r2, #4
  12b7c8:	e3a01037 	mov	r1, #55	; 0x37
  12b7cc:	e51b000c 	ldr	r0, [fp, #-12]
  12b7d0:	eb000205 	bl	12bfec <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b7d4:	e3a03000 	mov	r3, #0
  12b7d8:	e54b3005 	strb	r3, [fp, #-5]
  12b7dc:	ea000009 	b	12b808 <dhcp_renew+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b7e0:	e55b2005 	ldrb	r2, [fp, #-5]
  12b7e4:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b7e8:	e3403014 	movt	r3, #20
  12b7ec:	e7d33002 	ldrb	r3, [r3, r2]
  12b7f0:	e1a01003 	mov	r1, r3
  12b7f4:	e51b000c 	ldr	r0, [fp, #-12]
  12b7f8:	eb00022b 	bl	12c0ac <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b7fc:	e55b3005 	ldrb	r3, [fp, #-5]
  12b800:	e2833001 	add	r3, r3, #1
  12b804:	e54b3005 	strb	r3, [fp, #-5]
  12b808:	e55b3005 	ldrb	r3, [fp, #-5]
  12b80c:	e3530003 	cmp	r3, #3
  12b810:	9afffff2 	bls	12b7e0 <dhcp_renew+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12b814:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12b818:	e51b000c 	ldr	r0, [fp, #-12]
  12b81c:	eb0002bd 	bl	12c318 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
  12b820:	e51b000c 	ldr	r0, [fp, #-12]
  12b824:	eb000775 	bl	12d600 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b828:	e51b300c 	ldr	r3, [fp, #-12]
  12b82c:	e593200c 	ldr	r2, [r3, #12]
  12b830:	e51b300c 	ldr	r3, [fp, #-12]
  12b834:	e1d331b4 	ldrh	r3, [r3, #20]
  12b838:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b83c:	e6ff3073 	uxth	r3, r3
  12b840:	e1a01003 	mov	r1, r3
  12b844:	e1a00002 	mov	r0, r2
  12b848:	ebffbc52 	bl	11a998 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  12b84c:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12b850:	e3403014 	movt	r3, #20
  12b854:	e5930000 	ldr	r0, [r3]
  12b858:	e51b300c 	ldr	r3, [fp, #-12]
  12b85c:	e593100c 	ldr	r1, [r3, #12]
  12b860:	e51b300c 	ldr	r3, [fp, #-12]
  12b864:	e2832024 	add	r2, r3, #36	; 0x24
  12b868:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b86c:	e58d3000 	str	r3, [sp]
  12b870:	e3a03043 	mov	r3, #67	; 0x43
  12b874:	ebfff26e 	bl	128234 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12b878:	e51b000c 	ldr	r0, [fp, #-12]
  12b87c:	eb00072a 	bl	12d52c <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b880:	e51b300c 	ldr	r3, [fp, #-12]
  12b884:	e5d3300a 	ldrb	r3, [r3, #10]
  12b888:	e35300ff 	cmp	r3, #255	; 0xff
  12b88c:	0a000005 	beq	12b8a8 <dhcp_renew+0x154>
    dhcp->tries++;
  12b890:	e51b300c 	ldr	r3, [fp, #-12]
  12b894:	e5d3300a 	ldrb	r3, [r3, #10]
  12b898:	e2833001 	add	r3, r3, #1
  12b89c:	e6ef2073 	uxtb	r2, r3
  12b8a0:	e51b300c 	ldr	r3, [fp, #-12]
  12b8a4:	e5c3200a 	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
  12b8a8:	e51b300c 	ldr	r3, [fp, #-12]
  12b8ac:	e5d3300a 	ldrb	r3, [r3, #10]
  12b8b0:	e3530009 	cmp	r3, #9
  12b8b4:	8a00000a 	bhi	12b8e4 <dhcp_renew+0x190>
  12b8b8:	e51b300c 	ldr	r3, [fp, #-12]
  12b8bc:	e5d3300a 	ldrb	r3, [r3, #10]
  12b8c0:	e6ff3073 	uxth	r3, r3
  12b8c4:	e1a02003 	mov	r2, r3
  12b8c8:	e1a02282 	lsl	r2, r2, #5
  12b8cc:	e0422003 	sub	r2, r2, r3
  12b8d0:	e1a02102 	lsl	r2, r2, #2
  12b8d4:	e0823003 	add	r3, r2, r3
  12b8d8:	e1a03203 	lsl	r3, r3, #4
  12b8dc:	e6ff3073 	uxth	r3, r3
  12b8e0:	ea000000 	b	12b8e8 <dhcp_renew+0x194>
  12b8e4:	e3043e20 	movw	r3, #20000	; 0x4e20
  12b8e8:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b8ec:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b8f0:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b8f4:	e2833003 	add	r3, r3, #3
  12b8f8:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b8fc:	e3412062 	movt	r2, #4194	; 0x1062
  12b900:	e0c10293 	smull	r0, r1, r3, r2
  12b904:	e1a022c1 	asr	r2, r1, #5
  12b908:	e1a03fc3 	asr	r3, r3, #31
  12b90c:	e0423003 	sub	r3, r2, r3
  12b910:	e6ff2073 	uxth	r2, r3
  12b914:	e51b300c 	ldr	r3, [fp, #-12]
  12b918:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b91c:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b920:	e1a00003 	mov	r0, r3
  12b924:	e24bd004 	sub	sp, fp, #4
  12b928:	e8bd8800 	pop	{fp, pc}

0012b92c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
  12b92c:	e92d4800 	push	{fp, lr}
  12b930:	e28db004 	add	fp, sp, #4
  12b934:	e24dd020 	sub	sp, sp, #32
  12b938:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b93c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b940:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b944:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
  12b948:	e3a01004 	mov	r1, #4
  12b94c:	e51b000c 	ldr	r0, [fp, #-12]
  12b950:	eb00018d 	bl	12bf8c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b954:	e3a02003 	mov	r2, #3
  12b958:	e51b100c 	ldr	r1, [fp, #-12]
  12b95c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b960:	eb0005b9 	bl	12d04c <dhcp_create_msg>
  12b964:	e1a03000 	mov	r3, r0
  12b968:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b96c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b970:	e3530000 	cmp	r3, #0
  12b974:	1a000037 	bne	12ba58 <dhcp_rebind+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b978:	e3a02002 	mov	r2, #2
  12b97c:	e3a01039 	mov	r1, #57	; 0x39
  12b980:	e51b000c 	ldr	r0, [fp, #-12]
  12b984:	eb000198 	bl	12bfec <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b988:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b98c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b990:	e1a01003 	mov	r1, r3
  12b994:	e51b000c 	ldr	r0, [fp, #-12]
  12b998:	eb0001e2 	bl	12c128 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b99c:	e3a02004 	mov	r2, #4
  12b9a0:	e3a01037 	mov	r1, #55	; 0x37
  12b9a4:	e51b000c 	ldr	r0, [fp, #-12]
  12b9a8:	eb00018f 	bl	12bfec <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b9ac:	e3a03000 	mov	r3, #0
  12b9b0:	e54b3005 	strb	r3, [fp, #-5]
  12b9b4:	ea000009 	b	12b9e0 <dhcp_rebind+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b9b8:	e55b2005 	ldrb	r2, [fp, #-5]
  12b9bc:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b9c0:	e3403014 	movt	r3, #20
  12b9c4:	e7d33002 	ldrb	r3, [r3, r2]
  12b9c8:	e1a01003 	mov	r1, r3
  12b9cc:	e51b000c 	ldr	r0, [fp, #-12]
  12b9d0:	eb0001b5 	bl	12c0ac <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b9d4:	e55b3005 	ldrb	r3, [fp, #-5]
  12b9d8:	e2833001 	add	r3, r3, #1
  12b9dc:	e54b3005 	strb	r3, [fp, #-5]
  12b9e0:	e55b3005 	ldrb	r3, [fp, #-5]
  12b9e4:	e3530003 	cmp	r3, #3
  12b9e8:	9afffff2 	bls	12b9b8 <dhcp_rebind+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12b9ec:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12b9f0:	e51b000c 	ldr	r0, [fp, #-12]
  12b9f4:	eb000247 	bl	12c318 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12b9f8:	e51b000c 	ldr	r0, [fp, #-12]
  12b9fc:	eb0006ff 	bl	12d600 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12ba00:	e51b300c 	ldr	r3, [fp, #-12]
  12ba04:	e593200c 	ldr	r2, [r3, #12]
  12ba08:	e51b300c 	ldr	r3, [fp, #-12]
  12ba0c:	e1d331b4 	ldrh	r3, [r3, #20]
  12ba10:	e28330f0 	add	r3, r3, #240	; 0xf0
  12ba14:	e6ff3073 	uxth	r3, r3
  12ba18:	e1a01003 	mov	r1, r3
  12ba1c:	e1a00002 	mov	r0, r2
  12ba20:	ebffbbdc 	bl	11a998 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12ba24:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12ba28:	e3403014 	movt	r3, #20
  12ba2c:	e5930000 	ldr	r0, [r3]
  12ba30:	e51b300c 	ldr	r3, [fp, #-12]
  12ba34:	e593100c 	ldr	r1, [r3, #12]
  12ba38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ba3c:	e58d3000 	str	r3, [sp]
  12ba40:	e3a03043 	mov	r3, #67	; 0x43
  12ba44:	e3092914 	movw	r2, #39188	; 0x9914
  12ba48:	e3402014 	movt	r2, #20
  12ba4c:	ebfff1f8 	bl	128234 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12ba50:	e51b000c 	ldr	r0, [fp, #-12]
  12ba54:	eb0006b4 	bl	12d52c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12ba58:	e51b300c 	ldr	r3, [fp, #-12]
  12ba5c:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba60:	e35300ff 	cmp	r3, #255	; 0xff
  12ba64:	0a000005 	beq	12ba80 <dhcp_rebind+0x154>
    dhcp->tries++;
  12ba68:	e51b300c 	ldr	r3, [fp, #-12]
  12ba6c:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba70:	e2833001 	add	r3, r3, #1
  12ba74:	e6ef2073 	uxtb	r2, r3
  12ba78:	e51b300c 	ldr	r3, [fp, #-12]
  12ba7c:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12ba80:	e51b300c 	ldr	r3, [fp, #-12]
  12ba84:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba88:	e3530009 	cmp	r3, #9
  12ba8c:	8a00000a 	bhi	12babc <dhcp_rebind+0x190>
  12ba90:	e51b300c 	ldr	r3, [fp, #-12]
  12ba94:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba98:	e6ff3073 	uxth	r3, r3
  12ba9c:	e1a02003 	mov	r2, r3
  12baa0:	e1a02282 	lsl	r2, r2, #5
  12baa4:	e0422003 	sub	r2, r2, r3
  12baa8:	e1a02102 	lsl	r2, r2, #2
  12baac:	e0823003 	add	r3, r2, r3
  12bab0:	e1a03183 	lsl	r3, r3, #3
  12bab4:	e6ff3073 	uxth	r3, r3
  12bab8:	ea000000 	b	12bac0 <dhcp_rebind+0x194>
  12babc:	e3023710 	movw	r3, #10000	; 0x2710
  12bac0:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12bac4:	e15b31b0 	ldrh	r3, [fp, #-16]
  12bac8:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12bacc:	e2833003 	add	r3, r3, #3
  12bad0:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12bad4:	e3412062 	movt	r2, #4194	; 0x1062
  12bad8:	e0c10293 	smull	r0, r1, r3, r2
  12badc:	e1a022c1 	asr	r2, r1, #5
  12bae0:	e1a03fc3 	asr	r3, r3, #31
  12bae4:	e0423003 	sub	r3, r2, r3
  12bae8:	e6ff2073 	uxth	r2, r3
  12baec:	e51b300c 	ldr	r3, [fp, #-12]
  12baf0:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12baf4:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12baf8:	e1a00003 	mov	r0, r3
  12bafc:	e24bd004 	sub	sp, fp, #4
  12bb00:	e8bd8800 	pop	{fp, pc}

0012bb04 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
  12bb04:	e92d4800 	push	{fp, lr}
  12bb08:	e28db004 	add	fp, sp, #4
  12bb0c:	e24dd020 	sub	sp, sp, #32
  12bb10:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12bb14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bb18:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bb1c:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
  12bb20:	e3a01003 	mov	r1, #3
  12bb24:	e51b000c 	ldr	r0, [fp, #-12]
  12bb28:	eb000117 	bl	12bf8c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12bb2c:	e3a02003 	mov	r2, #3
  12bb30:	e51b100c 	ldr	r1, [fp, #-12]
  12bb34:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bb38:	eb000543 	bl	12d04c <dhcp_create_msg>
  12bb3c:	e1a03000 	mov	r3, r0
  12bb40:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12bb44:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12bb48:	e3530000 	cmp	r3, #0
  12bb4c:	1a00003e 	bne	12bc4c <dhcp_reboot+0x148>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12bb50:	e3a02002 	mov	r2, #2
  12bb54:	e3a01039 	mov	r1, #57	; 0x39
  12bb58:	e51b000c 	ldr	r0, [fp, #-12]
  12bb5c:	eb000122 	bl	12bfec <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
  12bb60:	e3a01d09 	mov	r1, #576	; 0x240
  12bb64:	e51b000c 	ldr	r0, [fp, #-12]
  12bb68:	eb00016e 	bl	12c128 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12bb6c:	e3a02004 	mov	r2, #4
  12bb70:	e3a01032 	mov	r1, #50	; 0x32
  12bb74:	e51b000c 	ldr	r0, [fp, #-12]
  12bb78:	eb00011b 	bl	12bfec <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12bb7c:	e51b300c 	ldr	r3, [fp, #-12]
  12bb80:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bb84:	e1a00003 	mov	r0, r3
  12bb88:	ebffaaa0 	bl	116610 <lwip_htonl>
  12bb8c:	e1a03000 	mov	r3, r0
  12bb90:	e1a01003 	mov	r1, r3
  12bb94:	e51b000c 	ldr	r0, [fp, #-12]
  12bb98:	eb000193 	bl	12c1ec <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12bb9c:	e3a02004 	mov	r2, #4
  12bba0:	e3a01037 	mov	r1, #55	; 0x37
  12bba4:	e51b000c 	ldr	r0, [fp, #-12]
  12bba8:	eb00010f 	bl	12bfec <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12bbac:	e3a03000 	mov	r3, #0
  12bbb0:	e54b3005 	strb	r3, [fp, #-5]
  12bbb4:	ea000009 	b	12bbe0 <dhcp_reboot+0xdc>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12bbb8:	e55b2005 	ldrb	r2, [fp, #-5]
  12bbbc:	e30d303c 	movw	r3, #53308	; 0xd03c
  12bbc0:	e3403014 	movt	r3, #20
  12bbc4:	e7d33002 	ldrb	r3, [r3, r2]
  12bbc8:	e1a01003 	mov	r1, r3
  12bbcc:	e51b000c 	ldr	r0, [fp, #-12]
  12bbd0:	eb000135 	bl	12c0ac <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12bbd4:	e55b3005 	ldrb	r3, [fp, #-5]
  12bbd8:	e2833001 	add	r3, r3, #1
  12bbdc:	e54b3005 	strb	r3, [fp, #-5]
  12bbe0:	e55b3005 	ldrb	r3, [fp, #-5]
  12bbe4:	e3530003 	cmp	r3, #3
  12bbe8:	9afffff2 	bls	12bbb8 <dhcp_reboot+0xb4>
    }

    dhcp_option_trailer(dhcp);
  12bbec:	e51b000c 	ldr	r0, [fp, #-12]
  12bbf0:	eb000682 	bl	12d600 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12bbf4:	e51b300c 	ldr	r3, [fp, #-12]
  12bbf8:	e593200c 	ldr	r2, [r3, #12]
  12bbfc:	e51b300c 	ldr	r3, [fp, #-12]
  12bc00:	e1d331b4 	ldrh	r3, [r3, #20]
  12bc04:	e28330f0 	add	r3, r3, #240	; 0xf0
  12bc08:	e6ff3073 	uxth	r3, r3
  12bc0c:	e1a01003 	mov	r1, r3
  12bc10:	e1a00002 	mov	r0, r2
  12bc14:	ebffbb5f 	bl	11a998 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12bc18:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12bc1c:	e3403014 	movt	r3, #20
  12bc20:	e5930000 	ldr	r0, [r3]
  12bc24:	e51b300c 	ldr	r3, [fp, #-12]
  12bc28:	e593100c 	ldr	r1, [r3, #12]
  12bc2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bc30:	e58d3000 	str	r3, [sp]
  12bc34:	e3a03043 	mov	r3, #67	; 0x43
  12bc38:	e3092914 	movw	r2, #39188	; 0x9914
  12bc3c:	e3402014 	movt	r2, #20
  12bc40:	ebfff17b 	bl	128234 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12bc44:	e51b000c 	ldr	r0, [fp, #-12]
  12bc48:	eb000637 	bl	12d52c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12bc4c:	e51b300c 	ldr	r3, [fp, #-12]
  12bc50:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc54:	e35300ff 	cmp	r3, #255	; 0xff
  12bc58:	0a000005 	beq	12bc74 <dhcp_reboot+0x170>
    dhcp->tries++;
  12bc5c:	e51b300c 	ldr	r3, [fp, #-12]
  12bc60:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc64:	e2833001 	add	r3, r3, #1
  12bc68:	e6ef2073 	uxtb	r2, r3
  12bc6c:	e51b300c 	ldr	r3, [fp, #-12]
  12bc70:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12bc74:	e51b300c 	ldr	r3, [fp, #-12]
  12bc78:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc7c:	e3530009 	cmp	r3, #9
  12bc80:	8a00000a 	bhi	12bcb0 <dhcp_reboot+0x1ac>
  12bc84:	e51b300c 	ldr	r3, [fp, #-12]
  12bc88:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc8c:	e6ff3073 	uxth	r3, r3
  12bc90:	e1a02003 	mov	r2, r3
  12bc94:	e1a02282 	lsl	r2, r2, #5
  12bc98:	e0422003 	sub	r2, r2, r3
  12bc9c:	e1a02102 	lsl	r2, r2, #2
  12bca0:	e0823003 	add	r3, r2, r3
  12bca4:	e1a03183 	lsl	r3, r3, #3
  12bca8:	e6ff3073 	uxth	r3, r3
  12bcac:	ea000000 	b	12bcb4 <dhcp_reboot+0x1b0>
  12bcb0:	e3023710 	movw	r3, #10000	; 0x2710
  12bcb4:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12bcb8:	e15b31b0 	ldrh	r3, [fp, #-16]
  12bcbc:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12bcc0:	e2833003 	add	r3, r3, #3
  12bcc4:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12bcc8:	e3412062 	movt	r2, #4194	; 0x1062
  12bccc:	e0c10293 	smull	r0, r1, r3, r2
  12bcd0:	e1a022c1 	asr	r2, r1, #5
  12bcd4:	e1a03fc3 	asr	r3, r3, #31
  12bcd8:	e0423003 	sub	r3, r2, r3
  12bcdc:	e6ff2073 	uxth	r2, r3
  12bce0:	e51b300c 	ldr	r3, [fp, #-12]
  12bce4:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12bce8:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12bcec:	e1a00003 	mov	r0, r3
  12bcf0:	e24bd004 	sub	sp, fp, #4
  12bcf4:	e8bd8800 	pop	{fp, pc}

0012bcf8 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
  12bcf8:	e92d4800 	push	{fp, lr}
  12bcfc:	e28db004 	add	fp, sp, #4
  12bd00:	e24dd020 	sub	sp, sp, #32
  12bd04:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12bd08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bd0c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bd10:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
  12bd14:	e51b3008 	ldr	r3, [fp, #-8]
  12bd18:	e3530000 	cmp	r3, #0
  12bd1c:	1a000001 	bne	12bd28 <dhcp_release+0x30>
    return ERR_ARG;
  12bd20:	e3e0300f 	mvn	r3, #15
  12bd24:	ea000068 	b	12becc <dhcp_release+0x1d4>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
  12bd28:	e51b3008 	ldr	r3, [fp, #-8]
  12bd2c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12bd30:	e50b3010 	str	r3, [fp, #-16]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
  12bd34:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bd38:	eb00067b 	bl	12d72c <dhcp_supplied_address>
  12bd3c:	e1a03000 	mov	r3, r0
  12bd40:	e54b3009 	strb	r3, [fp, #-9]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12bd44:	e3a01000 	mov	r1, #0
  12bd48:	e51b0008 	ldr	r0, [fp, #-8]
  12bd4c:	eb00008e 	bl	12bf8c <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
  12bd50:	e51b3008 	ldr	r3, [fp, #-8]
  12bd54:	e3a02000 	mov	r2, #0
  12bd58:	e5832024 	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
  12bd5c:	e51b3008 	ldr	r3, [fp, #-8]
  12bd60:	e3a02000 	mov	r2, #0
  12bd64:	e5832028 	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12bd68:	e51b3008 	ldr	r3, [fp, #-8]
  12bd6c:	e3a02000 	mov	r2, #0
  12bd70:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12bd74:	e51b3008 	ldr	r3, [fp, #-8]
  12bd78:	e3a02000 	mov	r2, #0
  12bd7c:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
  12bd80:	e51b3008 	ldr	r3, [fp, #-8]
  12bd84:	e3a02000 	mov	r2, #0
  12bd88:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12bd8c:	e51b3008 	ldr	r3, [fp, #-8]
  12bd90:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  12bd94:	e51b3008 	ldr	r3, [fp, #-8]
  12bd98:	e5832038 	str	r2, [r3, #56]	; 0x38
  12bd9c:	e51b3008 	ldr	r3, [fp, #-8]
  12bda0:	e5932038 	ldr	r2, [r3, #56]	; 0x38
  12bda4:	e51b3008 	ldr	r3, [fp, #-8]
  12bda8:	e5832034 	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
  12bdac:	e51b3008 	ldr	r3, [fp, #-8]
  12bdb0:	e3a02000 	mov	r2, #0
  12bdb4:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
  12bdb8:	e51b3008 	ldr	r3, [fp, #-8]
  12bdbc:	e1d322b2 	ldrh	r2, [r3, #34]	; 0x22
  12bdc0:	e51b3008 	ldr	r3, [fp, #-8]
  12bdc4:	e1c322b0 	strh	r2, [r3, #32]
  12bdc8:	e51b3008 	ldr	r3, [fp, #-8]
  12bdcc:	e1d322b0 	ldrh	r2, [r3, #32]
  12bdd0:	e51b3008 	ldr	r3, [fp, #-8]
  12bdd4:	e1c321be 	strh	r2, [r3, #30]
  12bdd8:	e51b3008 	ldr	r3, [fp, #-8]
  12bddc:	e1d321be 	ldrh	r2, [r3, #30]
  12bde0:	e51b3008 	ldr	r3, [fp, #-8]
  12bde4:	e1c321bc 	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
  12bde8:	e55b3009 	ldrb	r3, [fp, #-9]
  12bdec:	e3530000 	cmp	r3, #0
  12bdf0:	1a000001 	bne	12bdfc <dhcp_release+0x104>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
  12bdf4:	e3a03000 	mov	r3, #0
  12bdf8:	ea000033 	b	12becc <dhcp_release+0x1d4>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
  12bdfc:	e3a02007 	mov	r2, #7
  12be00:	e51b1008 	ldr	r1, [fp, #-8]
  12be04:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12be08:	eb00048f 	bl	12d04c <dhcp_create_msg>
  12be0c:	e1a03000 	mov	r3, r0
  12be10:	e54b300a 	strb	r3, [fp, #-10]
  if (result == ERR_OK) {
  12be14:	e15b30da 	ldrsb	r3, [fp, #-10]
  12be18:	e3530000 	cmp	r3, #0
  12be1c:	1a000021 	bne	12bea8 <dhcp_release+0x1b0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  12be20:	e3a02004 	mov	r2, #4
  12be24:	e3a01036 	mov	r1, #54	; 0x36
  12be28:	e51b0008 	ldr	r0, [fp, #-8]
  12be2c:	eb00006e 	bl	12bfec <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
  12be30:	e51b3010 	ldr	r3, [fp, #-16]
  12be34:	e1a00003 	mov	r0, r3
  12be38:	ebffa9f4 	bl	116610 <lwip_htonl>
  12be3c:	e1a03000 	mov	r3, r0
  12be40:	e1a01003 	mov	r1, r3
  12be44:	e51b0008 	ldr	r0, [fp, #-8]
  12be48:	eb0000e7 	bl	12c1ec <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12be4c:	e51b0008 	ldr	r0, [fp, #-8]
  12be50:	eb0005ea 	bl	12d600 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12be54:	e51b3008 	ldr	r3, [fp, #-8]
  12be58:	e593200c 	ldr	r2, [r3, #12]
  12be5c:	e51b3008 	ldr	r3, [fp, #-8]
  12be60:	e1d331b4 	ldrh	r3, [r3, #20]
  12be64:	e28330f0 	add	r3, r3, #240	; 0xf0
  12be68:	e6ff3073 	uxth	r3, r3
  12be6c:	e1a01003 	mov	r1, r3
  12be70:	e1a00002 	mov	r0, r2
  12be74:	ebffbac7 	bl	11a998 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
  12be78:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12be7c:	e3403014 	movt	r3, #20
  12be80:	e5930000 	ldr	r0, [r3]
  12be84:	e51b3008 	ldr	r3, [fp, #-8]
  12be88:	e593100c 	ldr	r1, [r3, #12]
  12be8c:	e24b2010 	sub	r2, fp, #16
  12be90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12be94:	e58d3000 	str	r3, [sp]
  12be98:	e3a03043 	mov	r3, #67	; 0x43
  12be9c:	ebfff0e4 	bl	128234 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12bea0:	e51b0008 	ldr	r0, [fp, #-8]
  12bea4:	eb0005a0 	bl	12d52c <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  12bea8:	e3093910 	movw	r3, #39184	; 0x9910
  12beac:	e3403014 	movt	r3, #20
  12beb0:	e3092910 	movw	r2, #39184	; 0x9910
  12beb4:	e3402014 	movt	r2, #20
  12beb8:	e3091910 	movw	r1, #39184	; 0x9910
  12bebc:	e3401014 	movt	r1, #20
  12bec0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bec4:	ebffb58e 	bl	119504 <netif_set_addr>

  return result;
  12bec8:	e15b30da 	ldrsb	r3, [fp, #-10]
}
  12becc:	e1a00003 	mov	r0, r3
  12bed0:	e24bd004 	sub	sp, fp, #4
  12bed4:	e8bd8800 	pop	{fp, pc}

0012bed8 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
  12bed8:	e92d4800 	push	{fp, lr}
  12bedc:	e28db004 	add	fp, sp, #4
  12bee0:	e24dd010 	sub	sp, sp, #16
  12bee4:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
  12bee8:	e51b3010 	ldr	r3, [fp, #-16]
  12beec:	e3530000 	cmp	r3, #0
  12bef0:	1a000007 	bne	12bf14 <dhcp_stop+0x3c>
  12bef4:	e3080e98 	movw	r0, #36504	; 0x8e98
  12bef8:	e3400014 	movt	r0, #20
  12befc:	ebff5c84 	bl	103114 <rt_kprintf>
  12bf00:	e3001543 	movw	r1, #1347	; 0x543
  12bf04:	e3080d78 	movw	r0, #36216	; 0x8d78
  12bf08:	e3400014 	movt	r0, #20
  12bf0c:	ebff7c77 	bl	10b0f0 <sys_arch_assert>
  12bf10:	ea00001b 	b	12bf84 <dhcp_stop+0xac>
  dhcp = netif_dhcp_data(netif);
  12bf14:	e51b3010 	ldr	r3, [fp, #-16]
  12bf18:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bf1c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
  12bf20:	e51b3008 	ldr	r3, [fp, #-8]
  12bf24:	e3530000 	cmp	r3, #0
  12bf28:	0a000015 	beq	12bf84 <dhcp_stop+0xac>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12bf2c:	e51b3008 	ldr	r3, [fp, #-8]
  12bf30:	e5933004 	ldr	r3, [r3, #4]
  12bf34:	e3530000 	cmp	r3, #0
  12bf38:	0a000006 	beq	12bf58 <dhcp_stop+0x80>
  12bf3c:	e3080e50 	movw	r0, #36432	; 0x8e50
  12bf40:	e3400014 	movt	r0, #20
  12bf44:	ebff5c72 	bl	103114 <rt_kprintf>
  12bf48:	e3a01e55 	mov	r1, #1360	; 0x550
  12bf4c:	e3080d78 	movw	r0, #36216	; 0x8d78
  12bf50:	e3400014 	movt	r0, #20
  12bf54:	ebff7c65 	bl	10b0f0 <sys_arch_assert>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12bf58:	e3a01000 	mov	r1, #0
  12bf5c:	e51b0008 	ldr	r0, [fp, #-8]
  12bf60:	eb000009 	bl	12bf8c <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
  12bf64:	e51b3008 	ldr	r3, [fp, #-8]
  12bf68:	e5d33008 	ldrb	r3, [r3, #8]
  12bf6c:	e3530000 	cmp	r3, #0
  12bf70:	0a000003 	beq	12bf84 <dhcp_stop+0xac>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12bf74:	ebfff868 	bl	12a11c <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
  12bf78:	e51b3008 	ldr	r3, [fp, #-8]
  12bf7c:	e3a02000 	mov	r2, #0
  12bf80:	e5c32008 	strb	r2, [r3, #8]
    }
  }
}
  12bf84:	e24bd004 	sub	sp, fp, #4
  12bf88:	e8bd8800 	pop	{fp, pc}

0012bf8c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  12bf8c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12bf90:	e28db000 	add	fp, sp, #0
  12bf94:	e24dd00c 	sub	sp, sp, #12
  12bf98:	e50b0008 	str	r0, [fp, #-8]
  12bf9c:	e1a03001 	mov	r3, r1
  12bfa0:	e54b3009 	strb	r3, [fp, #-9]
  if (new_state != dhcp->state) {
  12bfa4:	e51b3008 	ldr	r3, [fp, #-8]
  12bfa8:	e5d33009 	ldrb	r3, [r3, #9]
  12bfac:	e55b2009 	ldrb	r2, [fp, #-9]
  12bfb0:	e1520003 	cmp	r2, r3
  12bfb4:	0a000008 	beq	12bfdc <dhcp_set_state+0x50>
    dhcp->state = new_state;
  12bfb8:	e51b3008 	ldr	r3, [fp, #-8]
  12bfbc:	e55b2009 	ldrb	r2, [fp, #-9]
  12bfc0:	e5c32009 	strb	r2, [r3, #9]
    dhcp->tries = 0;
  12bfc4:	e51b3008 	ldr	r3, [fp, #-8]
  12bfc8:	e3a02000 	mov	r2, #0
  12bfcc:	e5c3200a 	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
  12bfd0:	e51b3008 	ldr	r3, [fp, #-8]
  12bfd4:	e3a02000 	mov	r2, #0
  12bfd8:	e1c321b6 	strh	r2, [r3, #22]
  }
}
  12bfdc:	e320f000 	nop	{0}
  12bfe0:	e28bd000 	add	sp, fp, #0
  12bfe4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12bfe8:	e12fff1e 	bx	lr

0012bfec <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  12bfec:	e92d4800 	push	{fp, lr}
  12bff0:	e28db004 	add	fp, sp, #4
  12bff4:	e24dd008 	sub	sp, sp, #8
  12bff8:	e50b0008 	str	r0, [fp, #-8]
  12bffc:	e1a03001 	mov	r3, r1
  12c000:	e54b3009 	strb	r3, [fp, #-9]
  12c004:	e1a03002 	mov	r3, r2
  12c008:	e54b300a 	strb	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  12c00c:	e51b3008 	ldr	r3, [fp, #-8]
  12c010:	e1d331b4 	ldrh	r3, [r3, #20]
  12c014:	e1a02003 	mov	r2, r3
  12c018:	e55b300a 	ldrb	r3, [fp, #-10]
  12c01c:	e0823003 	add	r3, r2, r3
  12c020:	e2833002 	add	r3, r3, #2
  12c024:	e3530044 	cmp	r3, #68	; 0x44
  12c028:	9a000006 	bls	12c048 <dhcp_option+0x5c>
  12c02c:	e3080eb4 	movw	r0, #36532	; 0x8eb4
  12c030:	e3400014 	movt	r0, #20
  12c034:	ebff5c36 	bl	103114 <rt_kprintf>
  12c038:	e3001571 	movw	r1, #1393	; 0x571
  12c03c:	e3080d78 	movw	r0, #36216	; 0x8d78
  12c040:	e3400014 	movt	r0, #20
  12c044:	ebff7c29 	bl	10b0f0 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
  12c048:	e51b3008 	ldr	r3, [fp, #-8]
  12c04c:	e5932010 	ldr	r2, [r3, #16]
  12c050:	e51b3008 	ldr	r3, [fp, #-8]
  12c054:	e1d331b4 	ldrh	r3, [r3, #20]
  12c058:	e2831001 	add	r1, r3, #1
  12c05c:	e6ff0071 	uxth	r0, r1
  12c060:	e51b1008 	ldr	r1, [fp, #-8]
  12c064:	e1c101b4 	strh	r0, [r1, #20]
  12c068:	e0823003 	add	r3, r2, r3
  12c06c:	e55b2009 	ldrb	r2, [fp, #-9]
  12c070:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
  12c074:	e51b3008 	ldr	r3, [fp, #-8]
  12c078:	e5932010 	ldr	r2, [r3, #16]
  12c07c:	e51b3008 	ldr	r3, [fp, #-8]
  12c080:	e1d331b4 	ldrh	r3, [r3, #20]
  12c084:	e2831001 	add	r1, r3, #1
  12c088:	e6ff0071 	uxth	r0, r1
  12c08c:	e51b1008 	ldr	r1, [fp, #-8]
  12c090:	e1c101b4 	strh	r0, [r1, #20]
  12c094:	e0823003 	add	r3, r2, r3
  12c098:	e55b200a 	ldrb	r2, [fp, #-10]
  12c09c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c0a0:	e320f000 	nop	{0}
  12c0a4:	e24bd004 	sub	sp, fp, #4
  12c0a8:	e8bd8800 	pop	{fp, pc}

0012c0ac <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  12c0ac:	e92d4800 	push	{fp, lr}
  12c0b0:	e28db004 	add	fp, sp, #4
  12c0b4:	e24dd008 	sub	sp, sp, #8
  12c0b8:	e50b0008 	str	r0, [fp, #-8]
  12c0bc:	e1a03001 	mov	r3, r1
  12c0c0:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12c0c4:	e51b3008 	ldr	r3, [fp, #-8]
  12c0c8:	e1d331b4 	ldrh	r3, [r3, #20]
  12c0cc:	e3530043 	cmp	r3, #67	; 0x43
  12c0d0:	9a000006 	bls	12c0f0 <dhcp_option_byte+0x44>
  12c0d4:	e3080efc 	movw	r0, #36604	; 0x8efc
  12c0d8:	e3400014 	movt	r0, #20
  12c0dc:	ebff5c0c 	bl	103114 <rt_kprintf>
  12c0e0:	e300157c 	movw	r1, #1404	; 0x57c
  12c0e4:	e3080d78 	movw	r0, #36216	; 0x8d78
  12c0e8:	e3400014 	movt	r0, #20
  12c0ec:	ebff7bff 	bl	10b0f0 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
  12c0f0:	e51b3008 	ldr	r3, [fp, #-8]
  12c0f4:	e5932010 	ldr	r2, [r3, #16]
  12c0f8:	e51b3008 	ldr	r3, [fp, #-8]
  12c0fc:	e1d331b4 	ldrh	r3, [r3, #20]
  12c100:	e2831001 	add	r1, r3, #1
  12c104:	e6ff0071 	uxth	r0, r1
  12c108:	e51b1008 	ldr	r1, [fp, #-8]
  12c10c:	e1c101b4 	strh	r0, [r1, #20]
  12c110:	e0823003 	add	r3, r2, r3
  12c114:	e55b2009 	ldrb	r2, [fp, #-9]
  12c118:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c11c:	e320f000 	nop	{0}
  12c120:	e24bd004 	sub	sp, fp, #4
  12c124:	e8bd8800 	pop	{fp, pc}

0012c128 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  12c128:	e92d4800 	push	{fp, lr}
  12c12c:	e28db004 	add	fp, sp, #4
  12c130:	e24dd008 	sub	sp, sp, #8
  12c134:	e50b0008 	str	r0, [fp, #-8]
  12c138:	e1a03001 	mov	r3, r1
  12c13c:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  12c140:	e51b3008 	ldr	r3, [fp, #-8]
  12c144:	e1d331b4 	ldrh	r3, [r3, #20]
  12c148:	e2833002 	add	r3, r3, #2
  12c14c:	e3530044 	cmp	r3, #68	; 0x44
  12c150:	9a000006 	bls	12c170 <dhcp_option_short+0x48>
  12c154:	e3080f38 	movw	r0, #36664	; 0x8f38
  12c158:	e3400014 	movt	r0, #20
  12c15c:	ebff5bec 	bl	103114 <rt_kprintf>
  12c160:	e3001583 	movw	r1, #1411	; 0x583
  12c164:	e3080d78 	movw	r0, #36216	; 0x8d78
  12c168:	e3400014 	movt	r0, #20
  12c16c:	ebff7bdf 	bl	10b0f0 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
  12c170:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c174:	e1a03423 	lsr	r3, r3, #8
  12c178:	e6ffc073 	uxth	ip, r3
  12c17c:	e51b3008 	ldr	r3, [fp, #-8]
  12c180:	e5932010 	ldr	r2, [r3, #16]
  12c184:	e51b3008 	ldr	r3, [fp, #-8]
  12c188:	e1d331b4 	ldrh	r3, [r3, #20]
  12c18c:	e2831001 	add	r1, r3, #1
  12c190:	e6ff0071 	uxth	r0, r1
  12c194:	e51b1008 	ldr	r1, [fp, #-8]
  12c198:	e1c101b4 	strh	r0, [r1, #20]
  12c19c:	e6ef107c 	uxtb	r1, ip
  12c1a0:	e0823003 	add	r3, r2, r3
  12c1a4:	e1a02001 	mov	r2, r1
  12c1a8:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
  12c1ac:	e51b3008 	ldr	r3, [fp, #-8]
  12c1b0:	e5932010 	ldr	r2, [r3, #16]
  12c1b4:	e51b3008 	ldr	r3, [fp, #-8]
  12c1b8:	e1d331b4 	ldrh	r3, [r3, #20]
  12c1bc:	e2831001 	add	r1, r3, #1
  12c1c0:	e6ff0071 	uxth	r0, r1
  12c1c4:	e51b1008 	ldr	r1, [fp, #-8]
  12c1c8:	e1c101b4 	strh	r0, [r1, #20]
  12c1cc:	e15b10ba 	ldrh	r1, [fp, #-10]
  12c1d0:	e6ef1071 	uxtb	r1, r1
  12c1d4:	e0823003 	add	r3, r2, r3
  12c1d8:	e1a02001 	mov	r2, r1
  12c1dc:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c1e0:	e320f000 	nop	{0}
  12c1e4:	e24bd004 	sub	sp, fp, #4
  12c1e8:	e8bd8800 	pop	{fp, pc}

0012c1ec <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  12c1ec:	e92d4800 	push	{fp, lr}
  12c1f0:	e28db004 	add	fp, sp, #4
  12c1f4:	e24dd008 	sub	sp, sp, #8
  12c1f8:	e50b0008 	str	r0, [fp, #-8]
  12c1fc:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  12c200:	e51b3008 	ldr	r3, [fp, #-8]
  12c204:	e1d331b4 	ldrh	r3, [r3, #20]
  12c208:	e2833004 	add	r3, r3, #4
  12c20c:	e3530044 	cmp	r3, #68	; 0x44
  12c210:	9a000006 	bls	12c230 <dhcp_option_long+0x44>
  12c214:	e3080f7c 	movw	r0, #36732	; 0x8f7c
  12c218:	e3400014 	movt	r0, #20
  12c21c:	ebff5bbc 	bl	103114 <rt_kprintf>
  12c220:	e300158b 	movw	r1, #1419	; 0x58b
  12c224:	e3080d78 	movw	r0, #36216	; 0x8d78
  12c228:	e3400014 	movt	r0, #20
  12c22c:	ebff7baf 	bl	10b0f0 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
  12c230:	e51b300c 	ldr	r3, [fp, #-12]
  12c234:	e1a0cc23 	lsr	ip, r3, #24
  12c238:	e51b3008 	ldr	r3, [fp, #-8]
  12c23c:	e5932010 	ldr	r2, [r3, #16]
  12c240:	e51b3008 	ldr	r3, [fp, #-8]
  12c244:	e1d331b4 	ldrh	r3, [r3, #20]
  12c248:	e2831001 	add	r1, r3, #1
  12c24c:	e6ff0071 	uxth	r0, r1
  12c250:	e51b1008 	ldr	r1, [fp, #-8]
  12c254:	e1c101b4 	strh	r0, [r1, #20]
  12c258:	e6ef107c 	uxtb	r1, ip
  12c25c:	e0823003 	add	r3, r2, r3
  12c260:	e1a02001 	mov	r2, r1
  12c264:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
  12c268:	e51b300c 	ldr	r3, [fp, #-12]
  12c26c:	e1a0c823 	lsr	ip, r3, #16
  12c270:	e51b3008 	ldr	r3, [fp, #-8]
  12c274:	e5932010 	ldr	r2, [r3, #16]
  12c278:	e51b3008 	ldr	r3, [fp, #-8]
  12c27c:	e1d331b4 	ldrh	r3, [r3, #20]
  12c280:	e2831001 	add	r1, r3, #1
  12c284:	e6ff0071 	uxth	r0, r1
  12c288:	e51b1008 	ldr	r1, [fp, #-8]
  12c28c:	e1c101b4 	strh	r0, [r1, #20]
  12c290:	e6ef107c 	uxtb	r1, ip
  12c294:	e0823003 	add	r3, r2, r3
  12c298:	e1a02001 	mov	r2, r1
  12c29c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  12c2a0:	e51b300c 	ldr	r3, [fp, #-12]
  12c2a4:	e1a0c423 	lsr	ip, r3, #8
  12c2a8:	e51b3008 	ldr	r3, [fp, #-8]
  12c2ac:	e5932010 	ldr	r2, [r3, #16]
  12c2b0:	e51b3008 	ldr	r3, [fp, #-8]
  12c2b4:	e1d331b4 	ldrh	r3, [r3, #20]
  12c2b8:	e2831001 	add	r1, r3, #1
  12c2bc:	e6ff0071 	uxth	r0, r1
  12c2c0:	e51b1008 	ldr	r1, [fp, #-8]
  12c2c4:	e1c101b4 	strh	r0, [r1, #20]
  12c2c8:	e6ef107c 	uxtb	r1, ip
  12c2cc:	e0823003 	add	r3, r2, r3
  12c2d0:	e1a02001 	mov	r2, r1
  12c2d4:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
  12c2d8:	e51b3008 	ldr	r3, [fp, #-8]
  12c2dc:	e5932010 	ldr	r2, [r3, #16]
  12c2e0:	e51b3008 	ldr	r3, [fp, #-8]
  12c2e4:	e1d331b4 	ldrh	r3, [r3, #20]
  12c2e8:	e2831001 	add	r1, r3, #1
  12c2ec:	e6ff0071 	uxth	r0, r1
  12c2f0:	e51b1008 	ldr	r1, [fp, #-8]
  12c2f4:	e1c101b4 	strh	r0, [r1, #20]
  12c2f8:	e51b100c 	ldr	r1, [fp, #-12]
  12c2fc:	e6ef1071 	uxtb	r1, r1
  12c300:	e0823003 	add	r3, r2, r3
  12c304:	e1a02001 	mov	r2, r1
  12c308:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c30c:	e320f000 	nop	{0}
  12c310:	e24bd004 	sub	sp, fp, #4
  12c314:	e8bd8800 	pop	{fp, pc}

0012c318 <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static void
dhcp_option_hostname(struct dhcp *dhcp, struct netif *netif)
{
  12c318:	e92d4800 	push	{fp, lr}
  12c31c:	e28db004 	add	fp, sp, #4
  12c320:	e24dd018 	sub	sp, sp, #24
  12c324:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12c328:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  if (netif->hostname != NULL) {
  12c32c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c330:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c334:	e3530000 	cmp	r3, #0
  12c338:	0a00003c 	beq	12c430 <dhcp_option_hostname+0x118>
    size_t namelen = strlen(netif->hostname);
  12c33c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c340:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c344:	e1a00003 	mov	r0, r3
  12c348:	eb00545c 	bl	1414c0 <strlen>
  12c34c:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > 0) {
  12c350:	e51b3010 	ldr	r3, [fp, #-16]
  12c354:	e3530000 	cmp	r3, #0
  12c358:	0a000034 	beq	12c430 <dhcp_option_hostname+0x118>
      size_t len;
      const char *p = netif->hostname;
  12c35c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c360:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c364:	e50b300c 	str	r3, [fp, #-12]
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - dhcp->options_out_len - 3;
  12c368:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12c36c:	e1d331b4 	ldrh	r3, [r3, #20]
  12c370:	e2633041 	rsb	r3, r3, #65	; 0x41
  12c374:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
  12c378:	e51b2010 	ldr	r2, [fp, #-16]
  12c37c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c380:	e1520003 	cmp	r2, r3
  12c384:	9a000006 	bls	12c3a4 <dhcp_option_hostname+0x8c>
  12c388:	e3080fbc 	movw	r0, #36796	; 0x8fbc
  12c38c:	e3400014 	movt	r0, #20
  12c390:	ebff5b5f 	bl	103114 <rt_kprintf>
  12c394:	e300159e 	movw	r1, #1438	; 0x59e
  12c398:	e3080d78 	movw	r0, #36216	; 0x8d78
  12c39c:	e3400014 	movt	r0, #20
  12c3a0:	ebff7b52 	bl	10b0f0 <sys_arch_assert>
      len = LWIP_MIN(namelen, available);
  12c3a4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12c3a8:	e51b3010 	ldr	r3, [fp, #-16]
  12c3ac:	e1520003 	cmp	r2, r3
  12c3b0:	31a03002 	movcc	r3, r2
  12c3b4:	21a03003 	movcs	r3, r3
  12c3b8:	e50b3008 	str	r3, [fp, #-8]
      LWIP_ASSERT("DHCP: hostname is too long!", len <= 0xFF);
  12c3bc:	e51b3008 	ldr	r3, [fp, #-8]
  12c3c0:	e35300ff 	cmp	r3, #255	; 0xff
  12c3c4:	9a000006 	bls	12c3e4 <dhcp_option_hostname+0xcc>
  12c3c8:	e3080fbc 	movw	r0, #36796	; 0x8fbc
  12c3cc:	e3400014 	movt	r0, #20
  12c3d0:	ebff5b4f 	bl	103114 <rt_kprintf>
  12c3d4:	e3a01e5a 	mov	r1, #1440	; 0x5a0
  12c3d8:	e3080d78 	movw	r0, #36216	; 0x8d78
  12c3dc:	e3400014 	movt	r0, #20
  12c3e0:	ebff7b42 	bl	10b0f0 <sys_arch_assert>
      dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, (u8_t)len);
  12c3e4:	e51b3008 	ldr	r3, [fp, #-8]
  12c3e8:	e6ef3073 	uxtb	r3, r3
  12c3ec:	e1a02003 	mov	r2, r3
  12c3f0:	e3a0100c 	mov	r1, #12
  12c3f4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12c3f8:	ebfffefb 	bl	12bfec <dhcp_option>
      while (len--) {
  12c3fc:	ea000006 	b	12c41c <dhcp_option_hostname+0x104>
        dhcp_option_byte(dhcp, *p++);
  12c400:	e51b300c 	ldr	r3, [fp, #-12]
  12c404:	e2832001 	add	r2, r3, #1
  12c408:	e50b200c 	str	r2, [fp, #-12]
  12c40c:	e5d33000 	ldrb	r3, [r3]
  12c410:	e1a01003 	mov	r1, r3
  12c414:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12c418:	ebffff23 	bl	12c0ac <dhcp_option_byte>
      while (len--) {
  12c41c:	e51b3008 	ldr	r3, [fp, #-8]
  12c420:	e2432001 	sub	r2, r3, #1
  12c424:	e50b2008 	str	r2, [fp, #-8]
  12c428:	e3530000 	cmp	r3, #0
  12c42c:	1afffff3 	bne	12c400 <dhcp_option_hostname+0xe8>
      }
    }
  }
}
  12c430:	e320f000 	nop	{0}
  12c434:	e24bd004 	sub	sp, fp, #4
  12c438:	e8bd8800 	pop	{fp, pc}

0012c43c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
  12c43c:	e92d4800 	push	{fp, lr}
  12c440:	e28db004 	add	fp, sp, #4
  12c444:	e24dd038 	sub	sp, sp, #56	; 0x38
  12c448:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  12c44c:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
  12c450:	e3a03000 	mov	r3, #0
  12c454:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int parse_sname_as_options = 0;
  12c458:	e3a03000 	mov	r3, #0
  12c45c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  /* clear received options */
  dhcp_clear_all_options(dhcp);
  12c460:	e3a0200a 	mov	r2, #10
  12c464:	e3a01000 	mov	r1, #0
  12c468:	e30e0c20 	movw	r0, #60448	; 0xec20
  12c46c:	e3400056 	movt	r0, #86	; 0x56
  12c470:	eb005381 	bl	14127c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
  12c474:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c478:	e1d330ba 	ldrh	r3, [r3, #10]
  12c47c:	e353002b 	cmp	r3, #43	; 0x2b
  12c480:	8a000001 	bhi	12c48c <dhcp_parse_reply+0x50>
    return ERR_BUF;
  12c484:	e3e03001 	mvn	r3, #1
  12c488:	ea00022e 	b	12cd48 <dhcp_parse_reply+0x90c>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
  12c48c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c490:	e5932004 	ldr	r2, [r3, #4]
  12c494:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12c498:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
  12c49c:	e3a030f0 	mov	r3, #240	; 0xf0
  12c4a0:	e14b30be 	strh	r3, [fp, #-14]
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
  12c4a4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c4a8:	e1d330b8 	ldrh	r3, [r3, #8]
  12c4ac:	e14b31b0 	strh	r3, [fp, #-16]
again:
  q = p;
  12c4b0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c4b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c4b8:	ea00000c 	b	12c4f0 <dhcp_parse_reply+0xb4>
    options_idx -= q->len;
  12c4bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4c0:	e1d330ba 	ldrh	r3, [r3, #10]
  12c4c4:	e15b20be 	ldrh	r2, [fp, #-14]
  12c4c8:	e0423003 	sub	r3, r2, r3
  12c4cc:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max -= q->len;
  12c4d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4d4:	e1d330ba 	ldrh	r3, [r3, #10]
  12c4d8:	e15b21b0 	ldrh	r2, [fp, #-16]
  12c4dc:	e0423003 	sub	r3, r2, r3
  12c4e0:	e14b31b0 	strh	r3, [fp, #-16]
    q = q->next;
  12c4e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4e8:	e5933000 	ldr	r3, [r3]
  12c4ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c4f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4f4:	e3530000 	cmp	r3, #0
  12c4f8:	0a000004 	beq	12c510 <dhcp_parse_reply+0xd4>
  12c4fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c500:	e1d330ba 	ldrh	r3, [r3, #10]
  12c504:	e15b20be 	ldrh	r2, [fp, #-14]
  12c508:	e1520003 	cmp	r2, r3
  12c50c:	2affffea 	bcs	12c4bc <dhcp_parse_reply+0x80>
  }
  if (q == NULL) {
  12c510:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c514:	e3530000 	cmp	r3, #0
  12c518:	1a000001 	bne	12c524 <dhcp_parse_reply+0xe8>
    return ERR_BUF;
  12c51c:	e3e03001 	mvn	r3, #1
  12c520:	ea000208 	b	12cd48 <dhcp_parse_reply+0x90c>
  }
  offset = options_idx;
  12c524:	e15b30be 	ldrh	r3, [fp, #-14]
  12c528:	e14b30ba 	strh	r3, [fp, #-10]
  offset_max = options_idx_max;
  12c52c:	e15b31b0 	ldrh	r3, [fp, #-16]
  12c530:	e14b30bc 	strh	r3, [fp, #-12]
  options = (u8_t*)q->payload;
  12c534:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c538:	e5933004 	ldr	r3, [r3, #4]
  12c53c:	e50b3008 	str	r3, [fp, #-8]
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12c540:	ea0001be 	b	12cc40 <dhcp_parse_reply+0x804>
    u8_t op = options[offset];
  12c544:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c548:	e51b2008 	ldr	r2, [fp, #-8]
  12c54c:	e0823003 	add	r3, r2, r3
  12c550:	e5d33000 	ldrb	r3, [r3]
  12c554:	e54b3027 	strb	r3, [fp, #-39]	; 0xffffffd9
    u8_t len;
    u8_t decode_len = 0;
  12c558:	e3a03000 	mov	r3, #0
  12c55c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    int decode_idx = -1;
  12c560:	e3e03000 	mvn	r3, #0
  12c564:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    u16_t val_offset = offset + 2;
  12c568:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c56c:	e2833002 	add	r3, r3, #2
  12c570:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
  12c574:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c578:	e2833001 	add	r3, r3, #1
  12c57c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12c580:	e1d220ba 	ldrh	r2, [r2, #10]
  12c584:	e1530002 	cmp	r3, r2
  12c588:	aa000006 	bge	12c5a8 <dhcp_parse_reply+0x16c>
      len = options[offset + 1];
  12c58c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c590:	e2833001 	add	r3, r3, #1
  12c594:	e51b2008 	ldr	r2, [fp, #-8]
  12c598:	e0823003 	add	r3, r2, r3
  12c59c:	e5d33000 	ldrb	r3, [r3]
  12c5a0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c5a4:	ea00000a 	b	12c5d4 <dhcp_parse_reply+0x198>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
  12c5a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c5ac:	e5933000 	ldr	r3, [r3]
  12c5b0:	e3530000 	cmp	r3, #0
  12c5b4:	0a000004 	beq	12c5cc <dhcp_parse_reply+0x190>
  12c5b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c5bc:	e5933000 	ldr	r3, [r3]
  12c5c0:	e5933004 	ldr	r3, [r3, #4]
  12c5c4:	e5d33000 	ldrb	r3, [r3]
  12c5c8:	ea000000 	b	12c5d0 <dhcp_parse_reply+0x194>
  12c5cc:	e3a03000 	mov	r3, #0
  12c5d0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  12c5d4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c5d8:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    switch(op) {
  12c5dc:	e55b3027 	ldrb	r3, [fp, #-39]	; 0xffffffd9
  12c5e0:	e353003b 	cmp	r3, #59	; 0x3b
  12c5e4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12c5e8:	ea0000ed 	b	12c9a4 <dhcp_parse_reply+0x568>
  12c5ec:	0012c6dc 	.word	0x0012c6dc
  12c5f0:	0012c6fc 	.word	0x0012c6fc
  12c5f4:	0012c9a4 	.word	0x0012c9a4
  12c5f8:	0012c738 	.word	0x0012c738
  12c5fc:	0012c9a4 	.word	0x0012c9a4
  12c600:	0012c9a4 	.word	0x0012c9a4
  12c604:	0012c780 	.word	0x0012c780
  12c608:	0012c9a4 	.word	0x0012c9a4
  12c60c:	0012c9a4 	.word	0x0012c9a4
  12c610:	0012c9a4 	.word	0x0012c9a4
  12c614:	0012c9a4 	.word	0x0012c9a4
  12c618:	0012c9a4 	.word	0x0012c9a4
  12c61c:	0012c9a4 	.word	0x0012c9a4
  12c620:	0012c9a4 	.word	0x0012c9a4
  12c624:	0012c9a4 	.word	0x0012c9a4
  12c628:	0012c9a4 	.word	0x0012c9a4
  12c62c:	0012c9a4 	.word	0x0012c9a4
  12c630:	0012c9a4 	.word	0x0012c9a4
  12c634:	0012c9a4 	.word	0x0012c9a4
  12c638:	0012c9a4 	.word	0x0012c9a4
  12c63c:	0012c9a4 	.word	0x0012c9a4
  12c640:	0012c9a4 	.word	0x0012c9a4
  12c644:	0012c9a4 	.word	0x0012c9a4
  12c648:	0012c9a4 	.word	0x0012c9a4
  12c64c:	0012c9a4 	.word	0x0012c9a4
  12c650:	0012c9a4 	.word	0x0012c9a4
  12c654:	0012c9a4 	.word	0x0012c9a4
  12c658:	0012c9a4 	.word	0x0012c9a4
  12c65c:	0012c9a4 	.word	0x0012c9a4
  12c660:	0012c9a4 	.word	0x0012c9a4
  12c664:	0012c9a4 	.word	0x0012c9a4
  12c668:	0012c9a4 	.word	0x0012c9a4
  12c66c:	0012c9a4 	.word	0x0012c9a4
  12c670:	0012c9a4 	.word	0x0012c9a4
  12c674:	0012c9a4 	.word	0x0012c9a4
  12c678:	0012c9a4 	.word	0x0012c9a4
  12c67c:	0012c9a4 	.word	0x0012c9a4
  12c680:	0012c9a4 	.word	0x0012c9a4
  12c684:	0012c9a4 	.word	0x0012c9a4
  12c688:	0012c9a4 	.word	0x0012c9a4
  12c68c:	0012c9a4 	.word	0x0012c9a4
  12c690:	0012c9a4 	.word	0x0012c9a4
  12c694:	0012c9a4 	.word	0x0012c9a4
  12c698:	0012c9a4 	.word	0x0012c9a4
  12c69c:	0012c9a4 	.word	0x0012c9a4
  12c6a0:	0012c9a4 	.word	0x0012c9a4
  12c6a4:	0012c9a4 	.word	0x0012c9a4
  12c6a8:	0012c9a4 	.word	0x0012c9a4
  12c6ac:	0012c9a4 	.word	0x0012c9a4
  12c6b0:	0012c9a4 	.word	0x0012c9a4
  12c6b4:	0012c9a4 	.word	0x0012c9a4
  12c6b8:	0012c80c 	.word	0x0012c80c
  12c6bc:	0012c848 	.word	0x0012c848
  12c6c0:	0012c8b4 	.word	0x0012c8b4
  12c6c4:	0012c8f0 	.word	0x0012c8f0
  12c6c8:	0012c9a4 	.word	0x0012c9a4
  12c6cc:	0012c9a4 	.word	0x0012c9a4
  12c6d0:	0012c9a4 	.word	0x0012c9a4
  12c6d4:	0012c92c 	.word	0x0012c92c
  12c6d8:	0012c968 	.word	0x0012c968
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
  12c6dc:	e3a03000 	mov	r3, #0
  12c6e0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c6e4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c6e8:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        /* will be increased below */
        offset--;
  12c6ec:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c6f0:	e2433001 	sub	r3, r3, #1
  12c6f4:	e14b30ba 	strh	r3, [fp, #-10]
        break;
  12c6f8:	ea0000ac 	b	12c9b0 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c6fc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c700:	e3530004 	cmp	r3, #4
  12c704:	0a000008 	beq	12c72c <dhcp_parse_reply+0x2f0>
  12c708:	e3080fd8 	movw	r0, #36824	; 0x8fd8
  12c70c:	e3400014 	movt	r0, #20
  12c710:	ebff5a7f 	bl	103114 <rt_kprintf>
  12c714:	e30015f7 	movw	r1, #1527	; 0x5f7
  12c718:	e3080d78 	movw	r0, #36216	; 0x8d78
  12c71c:	e3400014 	movt	r0, #20
  12c720:	ebff7a72 	bl	10b0f0 <sys_arch_assert>
  12c724:	e3e03005 	mvn	r3, #5
  12c728:	ea000186 	b	12cd48 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
  12c72c:	e3a03006 	mov	r3, #6
  12c730:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c734:	ea00009d 	b	12c9b0 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
  12c738:	e3a03004 	mov	r3, #4
  12c73c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c740:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c744:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c748:	e1520003 	cmp	r2, r3
  12c74c:	2a000008 	bcs	12c774 <dhcp_parse_reply+0x338>
  12c750:	e3080fe4 	movw	r0, #36836	; 0x8fe4
  12c754:	e3400014 	movt	r0, #20
  12c758:	ebff5a6d 	bl	103114 <rt_kprintf>
  12c75c:	e30015fc 	movw	r1, #1532	; 0x5fc
  12c760:	e3080d78 	movw	r0, #36216	; 0x8d78
  12c764:	e3400014 	movt	r0, #20
  12c768:	ebff7a60 	bl	10b0f0 <sys_arch_assert>
  12c76c:	e3e03005 	mvn	r3, #5
  12c770:	ea000174 	b	12cd48 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
  12c774:	e3a03007 	mov	r3, #7
  12c778:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c77c:	ea00008b 	b	12c9b0 <dhcp_parse_reply+0x574>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
  12c780:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c784:	e2033003 	and	r3, r3, #3
  12c788:	e6ef3073 	uxtb	r3, r3
  12c78c:	e3530000 	cmp	r3, #0
  12c790:	0a000008 	beq	12c7b8 <dhcp_parse_reply+0x37c>
  12c794:	e3080ff8 	movw	r0, #36856	; 0x8ff8
  12c798:	e3400014 	movt	r0, #20
  12c79c:	ebff5a5c 	bl	103114 <rt_kprintf>
  12c7a0:	e3001602 	movw	r1, #1538	; 0x602
  12c7a4:	e3080d78 	movw	r0, #36216	; 0x8d78
  12c7a8:	e3400014 	movt	r0, #20
  12c7ac:	ebff7a4f 	bl	10b0f0 <sys_arch_assert>
  12c7b0:	e3e03005 	mvn	r3, #5
  12c7b4:	ea000163 	b	12cd48 <dhcp_parse_reply+0x90c>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
  12c7b8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c7bc:	e3530008 	cmp	r3, #8
  12c7c0:	31a03003 	movcc	r3, r3
  12c7c4:	23a03008 	movcs	r3, #8
  12c7c8:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c7cc:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c7d0:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c7d4:	e1520003 	cmp	r2, r3
  12c7d8:	2a000008 	bcs	12c800 <dhcp_parse_reply+0x3c4>
  12c7dc:	e3080fe4 	movw	r0, #36836	; 0x8fe4
  12c7e0:	e3400014 	movt	r0, #20
  12c7e4:	ebff5a4a 	bl	103114 <rt_kprintf>
  12c7e8:	e3001605 	movw	r1, #1541	; 0x605
  12c7ec:	e3080d78 	movw	r0, #36216	; 0x8d78
  12c7f0:	e3400014 	movt	r0, #20
  12c7f4:	ebff7a3d 	bl	10b0f0 <sys_arch_assert>
  12c7f8:	e3e03005 	mvn	r3, #5
  12c7fc:	ea000151 	b	12cd48 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
  12c800:	e3a03008 	mov	r3, #8
  12c804:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c808:	ea000068 	b	12c9b0 <dhcp_parse_reply+0x574>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c80c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c810:	e3530004 	cmp	r3, #4
  12c814:	0a000008 	beq	12c83c <dhcp_parse_reply+0x400>
  12c818:	e3080fd8 	movw	r0, #36824	; 0x8fd8
  12c81c:	e3400014 	movt	r0, #20
  12c820:	ebff5a3b 	bl	103114 <rt_kprintf>
  12c824:	e300160a 	movw	r1, #1546	; 0x60a
  12c828:	e3080d78 	movw	r0, #36216	; 0x8d78
  12c82c:	e3400014 	movt	r0, #20
  12c830:	ebff7a2e 	bl	10b0f0 <sys_arch_assert>
  12c834:	e3e03005 	mvn	r3, #5
  12c838:	ea000142 	b	12cd48 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
  12c83c:	e3a03003 	mov	r3, #3
  12c840:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c844:	ea000059 	b	12c9b0 <dhcp_parse_reply+0x574>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12c848:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c84c:	e3530001 	cmp	r3, #1
  12c850:	0a000008 	beq	12c878 <dhcp_parse_reply+0x43c>
  12c854:	e3090008 	movw	r0, #36872	; 0x9008
  12c858:	e3400014 	movt	r0, #20
  12c85c:	ebff5a2c 	bl	103114 <rt_kprintf>
  12c860:	e3001618 	movw	r1, #1560	; 0x618
  12c864:	e3080d78 	movw	r0, #36216	; 0x8d78
  12c868:	e3400014 	movt	r0, #20
  12c86c:	ebff7a1f 	bl	10b0f0 <sys_arch_assert>
  12c870:	e3e03005 	mvn	r3, #5
  12c874:	ea000133 	b	12cd48 <dhcp_parse_reply+0x90c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
  12c878:	e15b30be 	ldrh	r3, [fp, #-14]
  12c87c:	e35300f0 	cmp	r3, #240	; 0xf0
  12c880:	0a000008 	beq	12c8a8 <dhcp_parse_reply+0x46c>
  12c884:	e3090014 	movw	r0, #36884	; 0x9014
  12c888:	e3400014 	movt	r0, #20
  12c88c:	ebff5a20 	bl	103114 <rt_kprintf>
  12c890:	e300161a 	movw	r1, #1562	; 0x61a
  12c894:	e3080d78 	movw	r0, #36216	; 0x8d78
  12c898:	e3400014 	movt	r0, #20
  12c89c:	ebff7a13 	bl	10b0f0 <sys_arch_assert>
  12c8a0:	e3e03005 	mvn	r3, #5
  12c8a4:	ea000127 	b	12cd48 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
  12c8a8:	e3a03000 	mov	r3, #0
  12c8ac:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c8b0:	ea00003e 	b	12c9b0 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12c8b4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c8b8:	e3530001 	cmp	r3, #1
  12c8bc:	0a000008 	beq	12c8e4 <dhcp_parse_reply+0x4a8>
  12c8c0:	e3090008 	movw	r0, #36872	; 0x9008
  12c8c4:	e3400014 	movt	r0, #20
  12c8c8:	ebff5a11 	bl	103114 <rt_kprintf>
  12c8cc:	e300161e 	movw	r1, #1566	; 0x61e
  12c8d0:	e3080d78 	movw	r0, #36216	; 0x8d78
  12c8d4:	e3400014 	movt	r0, #20
  12c8d8:	ebff7a04 	bl	10b0f0 <sys_arch_assert>
  12c8dc:	e3e03005 	mvn	r3, #5
  12c8e0:	ea000118 	b	12cd48 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
  12c8e4:	e3a03001 	mov	r3, #1
  12c8e8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c8ec:	ea00002f 	b	12c9b0 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c8f0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c8f4:	e3530004 	cmp	r3, #4
  12c8f8:	0a000008 	beq	12c920 <dhcp_parse_reply+0x4e4>
  12c8fc:	e3080fd8 	movw	r0, #36824	; 0x8fd8
  12c900:	e3400014 	movt	r0, #20
  12c904:	ebff5a02 	bl	103114 <rt_kprintf>
  12c908:	e3001622 	movw	r1, #1570	; 0x622
  12c90c:	e3080d78 	movw	r0, #36216	; 0x8d78
  12c910:	e3400014 	movt	r0, #20
  12c914:	ebff79f5 	bl	10b0f0 <sys_arch_assert>
  12c918:	e3e03005 	mvn	r3, #5
  12c91c:	ea000109 	b	12cd48 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
  12c920:	e3a03002 	mov	r3, #2
  12c924:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c928:	ea000020 	b	12c9b0 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c92c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c930:	e3530004 	cmp	r3, #4
  12c934:	0a000008 	beq	12c95c <dhcp_parse_reply+0x520>
  12c938:	e3080fd8 	movw	r0, #36824	; 0x8fd8
  12c93c:	e3400014 	movt	r0, #20
  12c940:	ebff59f3 	bl	103114 <rt_kprintf>
  12c944:	e3001626 	movw	r1, #1574	; 0x626
  12c948:	e3080d78 	movw	r0, #36216	; 0x8d78
  12c94c:	e3400014 	movt	r0, #20
  12c950:	ebff79e6 	bl	10b0f0 <sys_arch_assert>
  12c954:	e3e03005 	mvn	r3, #5
  12c958:	ea0000fa 	b	12cd48 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T1;
  12c95c:	e3a03004 	mov	r3, #4
  12c960:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c964:	ea000011 	b	12c9b0 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c968:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c96c:	e3530004 	cmp	r3, #4
  12c970:	0a000008 	beq	12c998 <dhcp_parse_reply+0x55c>
  12c974:	e3080fd8 	movw	r0, #36824	; 0x8fd8
  12c978:	e3400014 	movt	r0, #20
  12c97c:	ebff59e4 	bl	103114 <rt_kprintf>
  12c980:	e300162a 	movw	r1, #1578	; 0x62a
  12c984:	e3080d78 	movw	r0, #36216	; 0x8d78
  12c988:	e3400014 	movt	r0, #20
  12c98c:	ebff79d7 	bl	10b0f0 <sys_arch_assert>
  12c990:	e3e03005 	mvn	r3, #5
  12c994:	ea0000eb 	b	12cd48 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T2;
  12c998:	e3a03005 	mov	r3, #5
  12c99c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c9a0:	ea000002 	b	12c9b0 <dhcp_parse_reply+0x574>
      default:
        decode_len = 0;
  12c9a4:	e3a03000 	mov	r3, #0
  12c9a8:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
  12c9ac:	e320f000 	nop	{0}
    }
    offset += len + 2;
  12c9b0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c9b4:	e6ff2073 	uxth	r2, r3
  12c9b8:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c9bc:	e0823003 	add	r3, r2, r3
  12c9c0:	e6ff3073 	uxth	r3, r3
  12c9c4:	e2833002 	add	r3, r3, #2
  12c9c8:	e14b30ba 	strh	r3, [fp, #-10]
    if (decode_len > 0) {
  12c9cc:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c9d0:	e3530000 	cmp	r3, #0
  12c9d4:	0a000073 	beq	12cba8 <dhcp_parse_reply+0x76c>
      u32_t value = 0;
  12c9d8:	e3a03000 	mov	r3, #0
  12c9dc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
  12c9e0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c9e4:	e3530000 	cmp	r3, #0
  12c9e8:	ba000002 	blt	12c9f8 <dhcp_parse_reply+0x5bc>
  12c9ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c9f0:	e3530009 	cmp	r3, #9
  12c9f4:	da000006 	ble	12ca14 <dhcp_parse_reply+0x5d8>
  12c9f8:	e309002c 	movw	r0, #36908	; 0x902c
  12c9fc:	e3400014 	movt	r0, #20
  12ca00:	ebff59c3 	bl	103114 <rt_kprintf>
  12ca04:	e3001637 	movw	r1, #1591	; 0x637
  12ca08:	e3080d78 	movw	r0, #36216	; 0x8d78
  12ca0c:	e3400014 	movt	r0, #20
  12ca10:	ebff79b6 	bl	10b0f0 <sys_arch_assert>
      if (!dhcp_option_given(dhcp, decode_idx)) {
  12ca14:	e30e3c20 	movw	r3, #60448	; 0xec20
  12ca18:	e3403056 	movt	r3, #86	; 0x56
  12ca1c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12ca20:	e0833002 	add	r3, r3, r2
  12ca24:	e5d33000 	ldrb	r3, [r3]
  12ca28:	e3530000 	cmp	r3, #0
  12ca2c:	1a00005d 	bne	12cba8 <dhcp_parse_reply+0x76c>
        copy_len = LWIP_MIN(decode_len, 4);
  12ca30:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12ca34:	e3530004 	cmp	r3, #4
  12ca38:	31a03003 	movcc	r3, r3
  12ca3c:	23a03004 	movcs	r3, #4
  12ca40:	e6ef3073 	uxtb	r3, r3
  12ca44:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
  12ca48:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12ca4c:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  12ca50:	e24b1034 	sub	r1, fp, #52	; 0x34
  12ca54:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12ca58:	ebffbb22 	bl	11b6e8 <pbuf_copy_partial>
  12ca5c:	e1a03000 	mov	r3, r0
  12ca60:	e1a02003 	mov	r2, r3
  12ca64:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  12ca68:	e1530002 	cmp	r3, r2
  12ca6c:	0a000001 	beq	12ca78 <dhcp_parse_reply+0x63c>
          return ERR_BUF;
  12ca70:	e3e03001 	mvn	r3, #1
  12ca74:	ea0000b3 	b	12cd48 <dhcp_parse_reply+0x90c>
        }
        if (decode_len > 4) {
  12ca78:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12ca7c:	e3530004 	cmp	r3, #4
  12ca80:	9a000025 	bls	12cb1c <dhcp_parse_reply+0x6e0>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
  12ca84:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12ca88:	e2033003 	and	r3, r3, #3
  12ca8c:	e6ef3073 	uxtb	r3, r3
  12ca90:	e3530000 	cmp	r3, #0
  12ca94:	0a000008 	beq	12cabc <dhcp_parse_reply+0x680>
  12ca98:	e3090040 	movw	r0, #36928	; 0x9040
  12ca9c:	e3400014 	movt	r0, #20
  12caa0:	ebff599b 	bl	103114 <rt_kprintf>
  12caa4:	e300163f 	movw	r1, #1599	; 0x63f
  12caa8:	e3080d78 	movw	r0, #36216	; 0x8d78
  12caac:	e3400014 	movt	r0, #20
  12cab0:	ebff798e 	bl	10b0f0 <sys_arch_assert>
  12cab4:	e3e03005 	mvn	r3, #5
  12cab8:	ea0000a2 	b	12cd48 <dhcp_parse_reply+0x90c>
          dhcp_got_option(dhcp, decode_idx);
  12cabc:	e30e3c20 	movw	r3, #60448	; 0xec20
  12cac0:	e3403056 	movt	r3, #86	; 0x56
  12cac4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12cac8:	e0833002 	add	r3, r3, r2
  12cacc:	e3a02001 	mov	r2, #1
  12cad0:	e5c32000 	strb	r2, [r3]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
  12cad4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12cad8:	e1a00003 	mov	r0, r3
  12cadc:	ebffa6cb 	bl	116610 <lwip_htonl>
  12cae0:	e1a01000 	mov	r1, r0
  12cae4:	e30e3c2c 	movw	r3, #60460	; 0xec2c
  12cae8:	e3403056 	movt	r3, #86	; 0x56
  12caec:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12caf0:	e7831102 	str	r1, [r3, r2, lsl #2]
          decode_len -= 4;
  12caf4:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12caf8:	e2433004 	sub	r3, r3, #4
  12cafc:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
          val_offset += 4;
  12cb00:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12cb04:	e2833004 	add	r3, r3, #4
  12cb08:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
          decode_idx++;
  12cb0c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12cb10:	e2833001 	add	r3, r3, #1
  12cb14:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
          goto decode_next;
  12cb18:	eaffffb0 	b	12c9e0 <dhcp_parse_reply+0x5a4>
        } else if (decode_len == 4) {
  12cb1c:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12cb20:	e3530004 	cmp	r3, #4
  12cb24:	1a000005 	bne	12cb40 <dhcp_parse_reply+0x704>
          value = lwip_ntohl(value);
  12cb28:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12cb2c:	e1a00003 	mov	r0, r3
  12cb30:	ebffa6b6 	bl	116610 <lwip_htonl>
  12cb34:	e1a03000 	mov	r3, r0
  12cb38:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  12cb3c:	ea00000e 	b	12cb7c <dhcp_parse_reply+0x740>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
  12cb40:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12cb44:	e3530001 	cmp	r3, #1
  12cb48:	0a000008 	beq	12cb70 <dhcp_parse_reply+0x734>
  12cb4c:	e3090058 	movw	r0, #36952	; 0x9058
  12cb50:	e3400014 	movt	r0, #20
  12cb54:	ebff596e 	bl	103114 <rt_kprintf>
  12cb58:	e3001649 	movw	r1, #1609	; 0x649
  12cb5c:	e3080d78 	movw	r0, #36216	; 0x8d78
  12cb60:	e3400014 	movt	r0, #20
  12cb64:	ebff7961 	bl	10b0f0 <sys_arch_assert>
  12cb68:	e3e03005 	mvn	r3, #5
  12cb6c:	ea000075 	b	12cd48 <dhcp_parse_reply+0x90c>
          value = ((u8_t*)&value)[0];
  12cb70:	e24b3034 	sub	r3, fp, #52	; 0x34
  12cb74:	e5d33000 	ldrb	r3, [r3]
  12cb78:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
        }
        dhcp_got_option(dhcp, decode_idx);
  12cb7c:	e30e3c20 	movw	r3, #60448	; 0xec20
  12cb80:	e3403056 	movt	r3, #86	; 0x56
  12cb84:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12cb88:	e0833002 	add	r3, r3, r2
  12cb8c:	e3a02001 	mov	r2, #1
  12cb90:	e5c32000 	strb	r2, [r3]
        dhcp_set_option_value(dhcp, decode_idx, value);
  12cb94:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12cb98:	e30e3c2c 	movw	r3, #60460	; 0xec2c
  12cb9c:	e3403056 	movt	r3, #86	; 0x56
  12cba0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12cba4:	e7831102 	str	r1, [r3, r2, lsl #2]
      }
    }
    if (offset >= q->len) {
  12cba8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cbac:	e1d330ba 	ldrh	r3, [r3, #10]
  12cbb0:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cbb4:	e1520003 	cmp	r2, r3
  12cbb8:	3a000020 	bcc	12cc40 <dhcp_parse_reply+0x804>
      offset -= q->len;
  12cbbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cbc0:	e1d330ba 	ldrh	r3, [r3, #10]
  12cbc4:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cbc8:	e0423003 	sub	r3, r2, r3
  12cbcc:	e14b30ba 	strh	r3, [fp, #-10]
      offset_max -= q->len;
  12cbd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cbd4:	e1d330ba 	ldrh	r3, [r3, #10]
  12cbd8:	e15b20bc 	ldrh	r2, [fp, #-12]
  12cbdc:	e0423003 	sub	r3, r2, r3
  12cbe0:	e14b30bc 	strh	r3, [fp, #-12]
      if ((offset < offset_max) && offset_max) {
  12cbe4:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cbe8:	e15b30bc 	ldrh	r3, [fp, #-12]
  12cbec:	e1520003 	cmp	r2, r3
  12cbf0:	2a00001f 	bcs	12cc74 <dhcp_parse_reply+0x838>
  12cbf4:	e15b30bc 	ldrh	r3, [fp, #-12]
  12cbf8:	e3530000 	cmp	r3, #0
  12cbfc:	0a00001c 	beq	12cc74 <dhcp_parse_reply+0x838>
        q = q->next;
  12cc00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cc04:	e5933000 	ldr	r3, [r3]
  12cc08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("next pbuf was null", q);
  12cc0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cc10:	e3530000 	cmp	r3, #0
  12cc14:	1a000006 	bne	12cc34 <dhcp_parse_reply+0x7f8>
  12cc18:	e309006c 	movw	r0, #36972	; 0x906c
  12cc1c:	e3400014 	movt	r0, #20
  12cc20:	ebff593b 	bl	103114 <rt_kprintf>
  12cc24:	e3001655 	movw	r1, #1621	; 0x655
  12cc28:	e3080d78 	movw	r0, #36216	; 0x8d78
  12cc2c:	e3400014 	movt	r0, #20
  12cc30:	ebff792e 	bl	10b0f0 <sys_arch_assert>
        options = (u8_t*)q->payload;
  12cc34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cc38:	e5933004 	ldr	r3, [r3, #4]
  12cc3c:	e50b3008 	str	r3, [fp, #-8]
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12cc40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cc44:	e3530000 	cmp	r3, #0
  12cc48:	0a000009 	beq	12cc74 <dhcp_parse_reply+0x838>
  12cc4c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12cc50:	e51b2008 	ldr	r2, [fp, #-8]
  12cc54:	e0823003 	add	r3, r2, r3
  12cc58:	e5d33000 	ldrb	r3, [r3]
  12cc5c:	e35300ff 	cmp	r3, #255	; 0xff
  12cc60:	0a000003 	beq	12cc74 <dhcp_parse_reply+0x838>
  12cc64:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cc68:	e15b30bc 	ldrh	r3, [fp, #-12]
  12cc6c:	e1520003 	cmp	r2, r3
  12cc70:	3afffe33 	bcc	12c544 <dhcp_parse_reply+0x108>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
  12cc74:	e30e3c20 	movw	r3, #60448	; 0xec20
  12cc78:	e3403056 	movt	r3, #86	; 0x56
  12cc7c:	e5d33000 	ldrb	r3, [r3]
  12cc80:	e3530000 	cmp	r3, #0
  12cc84:	0a00001a 	beq	12ccf4 <dhcp_parse_reply+0x8b8>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12cc88:	e30e3c2c 	movw	r3, #60460	; 0xec2c
  12cc8c:	e3403056 	movt	r3, #86	; 0x56
  12cc90:	e5933000 	ldr	r3, [r3]
  12cc94:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12cc98:	e30e3c20 	movw	r3, #60448	; 0xec20
  12cc9c:	e3403056 	movt	r3, #86	; 0x56
  12cca0:	e3a02000 	mov	r2, #0
  12cca4:	e5c32000 	strb	r2, [r3]
    if (overload == DHCP_OVERLOAD_FILE) {
  12cca8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12ccac:	e3530001 	cmp	r3, #1
  12ccb0:	1a000002 	bne	12ccc0 <dhcp_parse_reply+0x884>
      parse_file_as_options = 1;
  12ccb4:	e3a03001 	mov	r3, #1
  12ccb8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  12ccbc:	ea00000c 	b	12ccf4 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
  12ccc0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12ccc4:	e3530002 	cmp	r3, #2
  12ccc8:	1a000002 	bne	12ccd8 <dhcp_parse_reply+0x89c>
      parse_sname_as_options = 1;
  12cccc:	e3a03001 	mov	r3, #1
  12ccd0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  12ccd4:	ea000006 	b	12ccf4 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
  12ccd8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12ccdc:	e3530003 	cmp	r3, #3
  12cce0:	1a000003 	bne	12ccf4 <dhcp_parse_reply+0x8b8>
      parse_sname_as_options = 1;
  12cce4:	e3a03001 	mov	r3, #1
  12cce8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      parse_file_as_options = 1;
  12ccec:	e3a03001 	mov	r3, #1
  12ccf0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
  12ccf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ccf8:	e3530000 	cmp	r3, #0
  12ccfc:	0a000006 	beq	12cd1c <dhcp_parse_reply+0x8e0>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
  12cd00:	e3a03000 	mov	r3, #0
  12cd04:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    options_idx = DHCP_FILE_OFS;
  12cd08:	e3a0306c 	mov	r3, #108	; 0x6c
  12cd0c:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
  12cd10:	e3a030ec 	mov	r3, #236	; 0xec
  12cd14:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12cd18:	eafffde4 	b	12c4b0 <dhcp_parse_reply+0x74>
  } else if (parse_sname_as_options) {
  12cd1c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cd20:	e3530000 	cmp	r3, #0
  12cd24:	0a000006 	beq	12cd44 <dhcp_parse_reply+0x908>
    parse_sname_as_options = 0;
  12cd28:	e3a03000 	mov	r3, #0
  12cd2c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    options_idx = DHCP_SNAME_OFS;
  12cd30:	e3a0302c 	mov	r3, #44	; 0x2c
  12cd34:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
  12cd38:	e3a0306c 	mov	r3, #108	; 0x6c
  12cd3c:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12cd40:	eafffdda 	b	12c4b0 <dhcp_parse_reply+0x74>
  }
  return ERR_OK;
  12cd44:	e3a03000 	mov	r3, #0
}
  12cd48:	e1a00003 	mov	r0, r3
  12cd4c:	e24bd004 	sub	sp, fp, #4
  12cd50:	e8bd8800 	pop	{fp, pc}

0012cd54 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  12cd54:	e92d4800 	push	{fp, lr}
  12cd58:	e28db004 	add	fp, sp, #4
  12cd5c:	e24dd028 	sub	sp, sp, #40	; 0x28
  12cd60:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12cd64:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  12cd68:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  12cd6c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct netif *netif = ip_current_input_netif();
  12cd70:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  12cd74:	e3403014 	movt	r3, #20
  12cd78:	e5933004 	ldr	r3, [r3, #4]
  12cd7c:	e50b300c 	str	r3, [fp, #-12]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12cd80:	e51b300c 	ldr	r3, [fp, #-12]
  12cd84:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12cd88:	e50b3010 	str	r3, [fp, #-16]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
  12cd8c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12cd90:	e5933004 	ldr	r3, [r3, #4]
  12cd94:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
  12cd98:	e51b3010 	ldr	r3, [fp, #-16]
  12cd9c:	e3530000 	cmp	r3, #0
  12cda0:	0a000091 	beq	12cfec <dhcp_recv+0x298>
  12cda4:	e51b3010 	ldr	r3, [fp, #-16]
  12cda8:	e5d33008 	ldrb	r3, [r3, #8]
  12cdac:	e3530000 	cmp	r3, #0
  12cdb0:	0a00008d 	beq	12cfec <dhcp_recv+0x298>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12cdb4:	e51b3010 	ldr	r3, [fp, #-16]
  12cdb8:	e5933004 	ldr	r3, [r3, #4]
  12cdbc:	e3530000 	cmp	r3, #0
  12cdc0:	0a000006 	beq	12cde0 <dhcp_recv+0x8c>
  12cdc4:	e3080e50 	movw	r0, #36432	; 0x8e50
  12cdc8:	e3400014 	movt	r0, #20
  12cdcc:	ebff58d0 	bl	103114 <rt_kprintf>
  12cdd0:	e30016a9 	movw	r1, #1705	; 0x6a9
  12cdd4:	e3080d78 	movw	r0, #36216	; 0x8d78
  12cdd8:	e3400014 	movt	r0, #20
  12cddc:	ebff78c3 	bl	10b0f0 <sys_arch_assert>

  if (p->len < DHCP_MIN_REPLY_LEN) {
  12cde0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12cde4:	e1d330ba 	ldrh	r3, [r3, #10]
  12cde8:	e353002b 	cmp	r3, #43	; 0x2b
  12cdec:	9a000080 	bls	12cff4 <dhcp_recv+0x2a0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
  12cdf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cdf4:	e5d33000 	ldrb	r3, [r3]
  12cdf8:	e3530002 	cmp	r3, #2
  12cdfc:	1a00007e 	bne	12cffc <dhcp_recv+0x2a8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12ce00:	e3a03000 	mov	r3, #0
  12ce04:	e54b3005 	strb	r3, [fp, #-5]
  12ce08:	ea00000c 	b	12ce40 <dhcp_recv+0xec>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
  12ce0c:	e55b3005 	ldrb	r3, [fp, #-5]
  12ce10:	e51b200c 	ldr	r2, [fp, #-12]
  12ce14:	e0823003 	add	r3, r2, r3
  12ce18:	e5d3203b 	ldrb	r2, [r3, #59]	; 0x3b
  12ce1c:	e55b3005 	ldrb	r3, [fp, #-5]
  12ce20:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12ce24:	e0813003 	add	r3, r1, r3
  12ce28:	e5d3301c 	ldrb	r3, [r3, #28]
  12ce2c:	e1520003 	cmp	r2, r3
  12ce30:	1a000073 	bne	12d004 <dhcp_recv+0x2b0>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12ce34:	e55b3005 	ldrb	r3, [fp, #-5]
  12ce38:	e2833001 	add	r3, r3, #1
  12ce3c:	e54b3005 	strb	r3, [fp, #-5]
  12ce40:	e51b300c 	ldr	r3, [fp, #-12]
  12ce44:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12ce48:	e55b2005 	ldrb	r2, [fp, #-5]
  12ce4c:	e1520003 	cmp	r2, r3
  12ce50:	2a000005 	bcs	12ce6c <dhcp_recv+0x118>
  12ce54:	e55b3005 	ldrb	r3, [fp, #-5]
  12ce58:	e3530005 	cmp	r3, #5
  12ce5c:	8a000002 	bhi	12ce6c <dhcp_recv+0x118>
  12ce60:	e55b3005 	ldrb	r3, [fp, #-5]
  12ce64:	e353000f 	cmp	r3, #15
  12ce68:	9affffe7 	bls	12ce0c <dhcp_recv+0xb8>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
  12ce6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ce70:	e5933004 	ldr	r3, [r3, #4]
  12ce74:	e1a00003 	mov	r0, r3
  12ce78:	ebffa5e4 	bl	116610 <lwip_htonl>
  12ce7c:	e1a02000 	mov	r2, r0
  12ce80:	e51b3010 	ldr	r3, [fp, #-16]
  12ce84:	e5933000 	ldr	r3, [r3]
  12ce88:	e1520003 	cmp	r2, r3
  12ce8c:	1a00005e 	bne	12d00c <dhcp_recv+0x2b8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
  12ce90:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12ce94:	e51b0010 	ldr	r0, [fp, #-16]
  12ce98:	ebfffd67 	bl	12c43c <dhcp_parse_reply>
  12ce9c:	e1a03000 	mov	r3, r0
  12cea0:	e3530000 	cmp	r3, #0
  12cea4:	1a00005a 	bne	12d014 <dhcp_recv+0x2c0>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
  12cea8:	e30e3c20 	movw	r3, #60448	; 0xec20
  12ceac:	e3403056 	movt	r3, #86	; 0x56
  12ceb0:	e5d33001 	ldrb	r3, [r3, #1]
  12ceb4:	e3530000 	cmp	r3, #0
  12ceb8:	0a000057 	beq	12d01c <dhcp_recv+0x2c8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
  12cebc:	e30e3c2c 	movw	r3, #60460	; 0xec2c
  12cec0:	e3403056 	movt	r3, #86	; 0x56
  12cec4:	e5933004 	ldr	r3, [r3, #4]
  12cec8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
  12cecc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12ced0:	e3530005 	cmp	r3, #5
  12ced4:	1a000021 	bne	12cf60 <dhcp_recv+0x20c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
  12ced8:	e51b3010 	ldr	r3, [fp, #-16]
  12cedc:	e5d33009 	ldrb	r3, [r3, #9]
  12cee0:	e3530001 	cmp	r3, #1
  12cee4:	1a00000c 	bne	12cf1c <dhcp_recv+0x1c8>
      dhcp_handle_ack(netif);
  12cee8:	e51b000c 	ldr	r0, [fp, #-12]
  12ceec:	ebfff6b6 	bl	12a9cc <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
  12cef0:	e51b300c 	ldr	r3, [fp, #-12]
  12cef4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12cef8:	e2033008 	and	r3, r3, #8
  12cefc:	e3530000 	cmp	r3, #0
  12cf00:	0a000002 	beq	12cf10 <dhcp_recv+0x1bc>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
  12cf04:	e51b000c 	ldr	r0, [fp, #-12]
  12cf08:	ebfff4c0 	bl	12a210 <dhcp_check>
  12cf0c:	ea000043 	b	12d020 <dhcp_recv+0x2cc>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
  12cf10:	e51b000c 	ldr	r0, [fp, #-12]
  12cf14:	ebfff952 	bl	12b464 <dhcp_bind>
  12cf18:	ea000040 	b	12d020 <dhcp_recv+0x2cc>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12cf1c:	e51b3010 	ldr	r3, [fp, #-16]
  12cf20:	e5d33009 	ldrb	r3, [r3, #9]
  12cf24:	e3530003 	cmp	r3, #3
  12cf28:	0a000007 	beq	12cf4c <dhcp_recv+0x1f8>
  12cf2c:	e51b3010 	ldr	r3, [fp, #-16]
  12cf30:	e5d33009 	ldrb	r3, [r3, #9]
  12cf34:	e3530004 	cmp	r3, #4
  12cf38:	0a000003 	beq	12cf4c <dhcp_recv+0x1f8>
             (dhcp->state == DHCP_STATE_RENEWING)) {
  12cf3c:	e51b3010 	ldr	r3, [fp, #-16]
  12cf40:	e5d33009 	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12cf44:	e3530005 	cmp	r3, #5
  12cf48:	1a000034 	bne	12d020 <dhcp_recv+0x2cc>
      dhcp_handle_ack(netif);
  12cf4c:	e51b000c 	ldr	r0, [fp, #-12]
  12cf50:	ebfff69d 	bl	12a9cc <dhcp_handle_ack>
      dhcp_bind(netif);
  12cf54:	e51b000c 	ldr	r0, [fp, #-12]
  12cf58:	ebfff941 	bl	12b464 <dhcp_bind>
  12cf5c:	ea00002f 	b	12d020 <dhcp_recv+0x2cc>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
  12cf60:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cf64:	e3530006 	cmp	r3, #6
  12cf68:	1a000012 	bne	12cfb8 <dhcp_recv+0x264>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cf6c:	e51b3010 	ldr	r3, [fp, #-16]
  12cf70:	e5d33009 	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
  12cf74:	e3530003 	cmp	r3, #3
  12cf78:	0a00000b 	beq	12cfac <dhcp_recv+0x258>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cf7c:	e51b3010 	ldr	r3, [fp, #-16]
  12cf80:	e5d33009 	ldrb	r3, [r3, #9]
  12cf84:	e3530001 	cmp	r3, #1
  12cf88:	0a000007 	beq	12cfac <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12cf8c:	e51b3010 	ldr	r3, [fp, #-16]
  12cf90:	e5d33009 	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cf94:	e3530004 	cmp	r3, #4
  12cf98:	0a000003 	beq	12cfac <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12cf9c:	e51b3010 	ldr	r3, [fp, #-16]
  12cfa0:	e5d33009 	ldrb	r3, [r3, #9]
  12cfa4:	e3530005 	cmp	r3, #5
  12cfa8:	1a000002 	bne	12cfb8 <dhcp_recv+0x264>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
  12cfac:	e51b000c 	ldr	r0, [fp, #-12]
  12cfb0:	ebfff47f 	bl	12a1b4 <dhcp_handle_nak>
  12cfb4:	ea000019 	b	12d020 <dhcp_recv+0x2cc>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
  12cfb8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cfbc:	e3530002 	cmp	r3, #2
  12cfc0:	1a000009 	bne	12cfec <dhcp_recv+0x298>
  12cfc4:	e51b3010 	ldr	r3, [fp, #-16]
  12cfc8:	e5d33009 	ldrb	r3, [r3, #9]
  12cfcc:	e3530006 	cmp	r3, #6
  12cfd0:	1a000005 	bne	12cfec <dhcp_recv+0x298>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
  12cfd4:	e51b3010 	ldr	r3, [fp, #-16]
  12cfd8:	e3a02000 	mov	r2, #0
  12cfdc:	e1c321b6 	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
  12cfe0:	e51b000c 	ldr	r0, [fp, #-12]
  12cfe4:	ebfff4b6 	bl	12a2c4 <dhcp_handle_offer>
  12cfe8:	ea00000c 	b	12d020 <dhcp_recv+0x2cc>
  }

free_pbuf_and_return:
  12cfec:	e320f000 	nop	{0}
  12cff0:	ea00000a 	b	12d020 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cff4:	e320f000 	nop	{0}
  12cff8:	ea000008 	b	12d020 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cffc:	e320f000 	nop	{0}
  12d000:	ea000006 	b	12d020 <dhcp_recv+0x2cc>
      goto free_pbuf_and_return;
  12d004:	e320f000 	nop	{0}
  12d008:	ea000004 	b	12d020 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12d00c:	e320f000 	nop	{0}
  12d010:	ea000002 	b	12d020 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12d014:	e320f000 	nop	{0}
  12d018:	ea000000 	b	12d020 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12d01c:	e320f000 	nop	{0}
  if (dhcp != NULL) {
  12d020:	e51b3010 	ldr	r3, [fp, #-16]
  12d024:	e3530000 	cmp	r3, #0
  12d028:	0a000002 	beq	12d038 <dhcp_recv+0x2e4>
    dhcp->msg_in = NULL;
  12d02c:	e51b3010 	ldr	r3, [fp, #-16]
  12d030:	e3a02000 	mov	r2, #0
  12d034:	e5832004 	str	r2, [r3, #4]
  }
  pbuf_free(p);
  12d038:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12d03c:	ebffb79e 	bl	11aebc <pbuf_free>
}
  12d040:	e320f000 	nop	{0}
  12d044:	e24bd004 	sub	sp, fp, #4
  12d048:	e8bd8800 	pop	{fp, pc}

0012d04c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
  12d04c:	e92d4810 	push	{r4, fp, lr}
  12d050:	e28db008 	add	fp, sp, #8
  12d054:	e24dd01c 	sub	sp, sp, #28
  12d058:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12d05c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12d060:	e1a03002 	mov	r3, r2
  12d064:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
  12d068:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d06c:	e3530000 	cmp	r3, #0
  12d070:	1a000008 	bne	12d098 <dhcp_create_msg+0x4c>
  12d074:	e3090080 	movw	r0, #36992	; 0x9080
  12d078:	e3400014 	movt	r0, #20
  12d07c:	ebff5824 	bl	103114 <rt_kprintf>
  12d080:	e300171e 	movw	r1, #1822	; 0x71e
  12d084:	e3080d78 	movw	r0, #36216	; 0x8d78
  12d088:	e3400014 	movt	r0, #20
  12d08c:	ebff7817 	bl	10b0f0 <sys_arch_assert>
  12d090:	e3e0300f 	mvn	r3, #15
  12d094:	ea000121 	b	12d520 <dhcp_create_msg+0x4d4>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
  12d098:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d09c:	e3530000 	cmp	r3, #0
  12d0a0:	1a000008 	bne	12d0c8 <dhcp_create_msg+0x7c>
  12d0a4:	e30900a0 	movw	r0, #37024	; 0x90a0
  12d0a8:	e3400014 	movt	r0, #20
  12d0ac:	ebff5818 	bl	103114 <rt_kprintf>
  12d0b0:	e300171f 	movw	r1, #1823	; 0x71f
  12d0b4:	e3080d78 	movw	r0, #36216	; 0x8d78
  12d0b8:	e3400014 	movt	r0, #20
  12d0bc:	ebff780b 	bl	10b0f0 <sys_arch_assert>
  12d0c0:	e3e03005 	mvn	r3, #5
  12d0c4:	ea000115 	b	12d520 <dhcp_create_msg+0x4d4>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  12d0c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d0cc:	e593300c 	ldr	r3, [r3, #12]
  12d0d0:	e3530000 	cmp	r3, #0
  12d0d4:	0a000006 	beq	12d0f4 <dhcp_create_msg+0xa8>
  12d0d8:	e30900c0 	movw	r0, #37056	; 0x90c0
  12d0dc:	e3400014 	movt	r0, #20
  12d0e0:	ebff580b 	bl	103114 <rt_kprintf>
  12d0e4:	e3a01e72 	mov	r1, #1824	; 0x720
  12d0e8:	e3080d78 	movw	r0, #36216	; 0x8d78
  12d0ec:	e3400014 	movt	r0, #20
  12d0f0:	ebff77fe 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  12d0f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d0f8:	e5933010 	ldr	r3, [r3, #16]
  12d0fc:	e3530000 	cmp	r3, #0
  12d100:	0a000006 	beq	12d120 <dhcp_create_msg+0xd4>
  12d104:	e30900e8 	movw	r0, #37096	; 0x90e8
  12d108:	e3400014 	movt	r0, #20
  12d10c:	ebff5800 	bl	103114 <rt_kprintf>
  12d110:	e3001721 	movw	r1, #1825	; 0x721
  12d114:	e3080d78 	movw	r0, #36216	; 0x8d78
  12d118:	e3400014 	movt	r0, #20
  12d11c:	ebff77f3 	bl	10b0f0 <sys_arch_assert>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  12d120:	e3a02000 	mov	r2, #0
  12d124:	e3a01f4d 	mov	r1, #308	; 0x134
  12d128:	e3a00000 	mov	r0, #0
  12d12c:	ebffb45b 	bl	11a2a0 <pbuf_alloc>
  12d130:	e1a02000 	mov	r2, r0
  12d134:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d138:	e583200c 	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
  12d13c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d140:	e593300c 	ldr	r3, [r3, #12]
  12d144:	e3530000 	cmp	r3, #0
  12d148:	1a000001 	bne	12d154 <dhcp_create_msg+0x108>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  12d14c:	e3e03000 	mvn	r3, #0
  12d150:	ea0000f2 	b	12d520 <dhcp_create_msg+0x4d4>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
  12d154:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d158:	e593300c 	ldr	r3, [r3, #12]
  12d15c:	e1d330ba 	ldrh	r3, [r3, #10]
  12d160:	e3530f4d 	cmp	r3, #308	; 0x134
  12d164:	2a000006 	bcs	12d184 <dhcp_create_msg+0x138>
  12d168:	e3090110 	movw	r0, #37136	; 0x9110
  12d16c:	e3400014 	movt	r0, #20
  12d170:	ebff57e7 	bl	103114 <rt_kprintf>
  12d174:	e3001729 	movw	r1, #1833	; 0x729
  12d178:	e3080d78 	movw	r0, #36216	; 0x8d78
  12d17c:	e3400014 	movt	r0, #20
  12d180:	ebff77da 	bl	10b0f0 <sys_arch_assert>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if (message_type != DHCP_REQUEST) {
  12d184:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d188:	e3530003 	cmp	r3, #3
  12d18c:	0a00000e 	beq	12d1cc <dhcp_create_msg+0x180>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
  12d190:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d194:	e5d3300a 	ldrb	r3, [r3, #10]
  12d198:	e3530000 	cmp	r3, #0
  12d19c:	1a000005 	bne	12d1b8 <dhcp_create_msg+0x16c>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
  12d1a0:	eb0043fb 	bl	13e194 <rand>
  12d1a4:	e1a03000 	mov	r3, r0
  12d1a8:	e1a02003 	mov	r2, r3
  12d1ac:	e30e3ae0 	movw	r3, #60128	; 0xeae0
  12d1b0:	e3403014 	movt	r3, #20
  12d1b4:	e5832000 	str	r2, [r3]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
  12d1b8:	e30e3ae0 	movw	r3, #60128	; 0xeae0
  12d1bc:	e3403014 	movt	r3, #20
  12d1c0:	e5932000 	ldr	r2, [r3]
  12d1c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1c8:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
  12d1cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1d0:	e593300c 	ldr	r3, [r3, #12]
  12d1d4:	e5932004 	ldr	r2, [r3, #4]
  12d1d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1dc:	e5832010 	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  12d1e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1e4:	e5933010 	ldr	r3, [r3, #16]
  12d1e8:	e3a02001 	mov	r2, #1
  12d1ec:	e5c32000 	strb	r2, [r3]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  12d1f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1f4:	e5933010 	ldr	r3, [r3, #16]
  12d1f8:	e3a02001 	mov	r2, #1
  12d1fc:	e5c32001 	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
  12d200:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d204:	e5933010 	ldr	r3, [r3, #16]
  12d208:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12d20c:	e5d2203a 	ldrb	r2, [r2, #58]	; 0x3a
  12d210:	e5c32002 	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
  12d214:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d218:	e5933010 	ldr	r3, [r3, #16]
  12d21c:	e3a02000 	mov	r2, #0
  12d220:	e5c32003 	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
  12d224:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d228:	e5932000 	ldr	r2, [r3]
  12d22c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d230:	e5934010 	ldr	r4, [r3, #16]
  12d234:	e1a00002 	mov	r0, r2
  12d238:	ebffa4f4 	bl	116610 <lwip_htonl>
  12d23c:	e1a03000 	mov	r3, r0
  12d240:	e5843004 	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
  12d244:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d248:	e5933010 	ldr	r3, [r3, #16]
  12d24c:	e3a02000 	mov	r2, #0
  12d250:	e5c32008 	strb	r2, [r3, #8]
  12d254:	e3a02000 	mov	r2, #0
  12d258:	e5c32009 	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  12d25c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d260:	e5933010 	ldr	r3, [r3, #16]
  12d264:	e3a02000 	mov	r2, #0
  12d268:	e5c3200a 	strb	r2, [r3, #10]
  12d26c:	e3a02000 	mov	r2, #0
  12d270:	e5c3200b 	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
  12d274:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d278:	e5933010 	ldr	r3, [r3, #16]
  12d27c:	e3a02000 	mov	r2, #0
  12d280:	e5c3200c 	strb	r2, [r3, #12]
  12d284:	e3a02000 	mov	r2, #0
  12d288:	e5c3200d 	strb	r2, [r3, #13]
  12d28c:	e3a02000 	mov	r2, #0
  12d290:	e5c3200e 	strb	r2, [r3, #14]
  12d294:	e3a02000 	mov	r2, #0
  12d298:	e5c3200f 	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
  12d29c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d2a0:	e3530008 	cmp	r3, #8
  12d2a4:	0a000010 	beq	12d2ec <dhcp_create_msg+0x2a0>
  12d2a8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d2ac:	e3530004 	cmp	r3, #4
  12d2b0:	0a00000d 	beq	12d2ec <dhcp_create_msg+0x2a0>
  12d2b4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d2b8:	e3530007 	cmp	r3, #7
  12d2bc:	0a00000a 	beq	12d2ec <dhcp_create_msg+0x2a0>
  12d2c0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d2c4:	e3530003 	cmp	r3, #3
  12d2c8:	1a00000d 	bne	12d304 <dhcp_create_msg+0x2b8>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12d2cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d2d0:	e5d33009 	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
  12d2d4:	e3530005 	cmp	r3, #5
  12d2d8:	0a000003 	beq	12d2ec <dhcp_create_msg+0x2a0>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12d2dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d2e0:	e5d33009 	ldrb	r3, [r3, #9]
  12d2e4:	e3530004 	cmp	r3, #4
  12d2e8:	1a000005 	bne	12d304 <dhcp_create_msg+0x2b8>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
  12d2ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d2f0:	e2832004 	add	r2, r3, #4
  12d2f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d2f8:	e5933010 	ldr	r3, [r3, #16]
  12d2fc:	e5922000 	ldr	r2, [r2]
  12d300:	e583200c 	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
  12d304:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d308:	e5933010 	ldr	r3, [r3, #16]
  12d30c:	e3a02000 	mov	r2, #0
  12d310:	e5c32010 	strb	r2, [r3, #16]
  12d314:	e3a02000 	mov	r2, #0
  12d318:	e5c32011 	strb	r2, [r3, #17]
  12d31c:	e3a02000 	mov	r2, #0
  12d320:	e5c32012 	strb	r2, [r3, #18]
  12d324:	e3a02000 	mov	r2, #0
  12d328:	e5c32013 	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
  12d32c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d330:	e5933010 	ldr	r3, [r3, #16]
  12d334:	e3a02000 	mov	r2, #0
  12d338:	e5c32014 	strb	r2, [r3, #20]
  12d33c:	e3a02000 	mov	r2, #0
  12d340:	e5c32015 	strb	r2, [r3, #21]
  12d344:	e3a02000 	mov	r2, #0
  12d348:	e5c32016 	strb	r2, [r3, #22]
  12d34c:	e3a02000 	mov	r2, #0
  12d350:	e5c32017 	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
  12d354:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d358:	e5933010 	ldr	r3, [r3, #16]
  12d35c:	e3a02000 	mov	r2, #0
  12d360:	e5c32018 	strb	r2, [r3, #24]
  12d364:	e3a02000 	mov	r2, #0
  12d368:	e5c32019 	strb	r2, [r3, #25]
  12d36c:	e3a02000 	mov	r2, #0
  12d370:	e5c3201a 	strb	r2, [r3, #26]
  12d374:	e3a02000 	mov	r2, #0
  12d378:	e5c3201b 	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12d37c:	e3a03000 	mov	r3, #0
  12d380:	e14b30be 	strh	r3, [fp, #-14]
  12d384:	ea000017 	b	12d3e8 <dhcp_create_msg+0x39c>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  12d388:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d38c:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12d390:	e6ff3073 	uxth	r3, r3
  12d394:	e15b20be 	ldrh	r2, [fp, #-14]
  12d398:	e1520003 	cmp	r2, r3
  12d39c:	2a000007 	bcs	12d3c0 <dhcp_create_msg+0x374>
  12d3a0:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3a4:	e3530005 	cmp	r3, #5
  12d3a8:	8a000004 	bhi	12d3c0 <dhcp_create_msg+0x374>
  12d3ac:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12d3b4:	e0823003 	add	r3, r2, r3
  12d3b8:	e5d3103b 	ldrb	r1, [r3, #59]	; 0x3b
  12d3bc:	ea000000 	b	12d3c4 <dhcp_create_msg+0x378>
  12d3c0:	e3a01000 	mov	r1, #0
  12d3c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d3c8:	e5932010 	ldr	r2, [r3, #16]
  12d3cc:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3d0:	e0823003 	add	r3, r2, r3
  12d3d4:	e1a02001 	mov	r2, r1
  12d3d8:	e5c3201c 	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12d3dc:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3e0:	e2833001 	add	r3, r3, #1
  12d3e4:	e14b30be 	strh	r3, [fp, #-14]
  12d3e8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3ec:	e353000f 	cmp	r3, #15
  12d3f0:	9affffe4 	bls	12d388 <dhcp_create_msg+0x33c>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12d3f4:	e3a03000 	mov	r3, #0
  12d3f8:	e14b30be 	strh	r3, [fp, #-14]
  12d3fc:	ea000008 	b	12d424 <dhcp_create_msg+0x3d8>
    dhcp->msg_out->sname[i] = 0;
  12d400:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d404:	e5932010 	ldr	r2, [r3, #16]
  12d408:	e15b30be 	ldrh	r3, [fp, #-14]
  12d40c:	e0823003 	add	r3, r2, r3
  12d410:	e3a02000 	mov	r2, #0
  12d414:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12d418:	e15b30be 	ldrh	r3, [fp, #-14]
  12d41c:	e2833001 	add	r3, r3, #1
  12d420:	e14b30be 	strh	r3, [fp, #-14]
  12d424:	e15b30be 	ldrh	r3, [fp, #-14]
  12d428:	e353003f 	cmp	r3, #63	; 0x3f
  12d42c:	9afffff3 	bls	12d400 <dhcp_create_msg+0x3b4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12d430:	e3a03000 	mov	r3, #0
  12d434:	e14b30be 	strh	r3, [fp, #-14]
  12d438:	ea000008 	b	12d460 <dhcp_create_msg+0x414>
    dhcp->msg_out->file[i] = 0;
  12d43c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d440:	e5932010 	ldr	r2, [r3, #16]
  12d444:	e15b30be 	ldrh	r3, [fp, #-14]
  12d448:	e0823003 	add	r3, r2, r3
  12d44c:	e3a02000 	mov	r2, #0
  12d450:	e5c3206c 	strb	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12d454:	e15b30be 	ldrh	r3, [fp, #-14]
  12d458:	e2833001 	add	r3, r3, #1
  12d45c:	e14b30be 	strh	r3, [fp, #-14]
  12d460:	e15b30be 	ldrh	r3, [fp, #-14]
  12d464:	e353007f 	cmp	r3, #127	; 0x7f
  12d468:	9afffff3 	bls	12d43c <dhcp_create_msg+0x3f0>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  12d46c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d470:	e5932010 	ldr	r2, [r3, #16]
  12d474:	e3a03000 	mov	r3, #0
  12d478:	e3833063 	orr	r3, r3, #99	; 0x63
  12d47c:	e5c230ec 	strb	r3, [r2, #236]	; 0xec
  12d480:	e3a03000 	mov	r3, #0
  12d484:	e1e03003 	mvn	r3, r3
  12d488:	e203307d 	and	r3, r3, #125	; 0x7d
  12d48c:	e1e03003 	mvn	r3, r3
  12d490:	e5c230ed 	strb	r3, [r2, #237]	; 0xed
  12d494:	e3a03000 	mov	r3, #0
  12d498:	e3833053 	orr	r3, r3, #83	; 0x53
  12d49c:	e5c230ee 	strb	r3, [r2, #238]	; 0xee
  12d4a0:	e3a03000 	mov	r3, #0
  12d4a4:	e3833063 	orr	r3, r3, #99	; 0x63
  12d4a8:	e5c230ef 	strb	r3, [r2, #239]	; 0xef
  dhcp->options_out_len = 0;
  12d4ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d4b0:	e3a02000 	mov	r2, #0
  12d4b4:	e1c321b4 	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d4b8:	e3a03000 	mov	r3, #0
  12d4bc:	e14b30be 	strh	r3, [fp, #-14]
  12d4c0:	ea00000a 	b	12d4f0 <dhcp_create_msg+0x4a4>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  12d4c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d4c8:	e5932010 	ldr	r2, [r3, #16]
  12d4cc:	e15b30be 	ldrh	r3, [fp, #-14]
  12d4d0:	e15b10be 	ldrh	r1, [fp, #-14]
  12d4d4:	e6ef1071 	uxtb	r1, r1
  12d4d8:	e0823003 	add	r3, r2, r3
  12d4dc:	e1a02001 	mov	r2, r1
  12d4e0:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d4e4:	e15b30be 	ldrh	r3, [fp, #-14]
  12d4e8:	e2833001 	add	r3, r3, #1
  12d4ec:	e14b30be 	strh	r3, [fp, #-14]
  12d4f0:	e15b30be 	ldrh	r3, [fp, #-14]
  12d4f4:	e3530043 	cmp	r3, #67	; 0x43
  12d4f8:	9afffff1 	bls	12d4c4 <dhcp_create_msg+0x478>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  12d4fc:	e3a02001 	mov	r2, #1
  12d500:	e3a01035 	mov	r1, #53	; 0x35
  12d504:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d508:	ebfffab7 	bl	12bfec <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
  12d50c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d510:	e1a01003 	mov	r1, r3
  12d514:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d518:	ebfffae3 	bl	12c0ac <dhcp_option_byte>
  return ERR_OK;
  12d51c:	e3a03000 	mov	r3, #0
}
  12d520:	e1a00003 	mov	r0, r3
  12d524:	e24bd008 	sub	sp, fp, #8
  12d528:	e8bd8810 	pop	{r4, fp, pc}

0012d52c <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
  12d52c:	e92d4800 	push	{fp, lr}
  12d530:	e28db004 	add	fp, sp, #4
  12d534:	e24dd008 	sub	sp, sp, #8
  12d538:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
  12d53c:	e51b3008 	ldr	r3, [fp, #-8]
  12d540:	e3530000 	cmp	r3, #0
  12d544:	1a000007 	bne	12d568 <dhcp_delete_msg+0x3c>
  12d548:	e3090150 	movw	r0, #37200	; 0x9150
  12d54c:	e3400014 	movt	r0, #20
  12d550:	ebff56ef 	bl	103114 <rt_kprintf>
  12d554:	e300176e 	movw	r1, #1902	; 0x76e
  12d558:	e3080d78 	movw	r0, #36216	; 0x8d78
  12d55c:	e3400014 	movt	r0, #20
  12d560:	ebff76e2 	bl	10b0f0 <sys_arch_assert>
  12d564:	ea000023 	b	12d5f8 <dhcp_delete_msg+0xcc>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  12d568:	e51b3008 	ldr	r3, [fp, #-8]
  12d56c:	e593300c 	ldr	r3, [r3, #12]
  12d570:	e3530000 	cmp	r3, #0
  12d574:	1a000006 	bne	12d594 <dhcp_delete_msg+0x68>
  12d578:	e3090170 	movw	r0, #37232	; 0x9170
  12d57c:	e3400014 	movt	r0, #20
  12d580:	ebff56e3 	bl	103114 <rt_kprintf>
  12d584:	e300176f 	movw	r1, #1903	; 0x76f
  12d588:	e3080d78 	movw	r0, #36216	; 0x8d78
  12d58c:	e3400014 	movt	r0, #20
  12d590:	ebff76d6 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  12d594:	e51b3008 	ldr	r3, [fp, #-8]
  12d598:	e5933010 	ldr	r3, [r3, #16]
  12d59c:	e3530000 	cmp	r3, #0
  12d5a0:	1a000006 	bne	12d5c0 <dhcp_delete_msg+0x94>
  12d5a4:	e3090198 	movw	r0, #37272	; 0x9198
  12d5a8:	e3400014 	movt	r0, #20
  12d5ac:	ebff56d8 	bl	103114 <rt_kprintf>
  12d5b0:	e3a01e77 	mov	r1, #1904	; 0x770
  12d5b4:	e3080d78 	movw	r0, #36216	; 0x8d78
  12d5b8:	e3400014 	movt	r0, #20
  12d5bc:	ebff76cb 	bl	10b0f0 <sys_arch_assert>
  if (dhcp->p_out != NULL) {
  12d5c0:	e51b3008 	ldr	r3, [fp, #-8]
  12d5c4:	e593300c 	ldr	r3, [r3, #12]
  12d5c8:	e3530000 	cmp	r3, #0
  12d5cc:	0a000003 	beq	12d5e0 <dhcp_delete_msg+0xb4>
    pbuf_free(dhcp->p_out);
  12d5d0:	e51b3008 	ldr	r3, [fp, #-8]
  12d5d4:	e593300c 	ldr	r3, [r3, #12]
  12d5d8:	e1a00003 	mov	r0, r3
  12d5dc:	ebffb636 	bl	11aebc <pbuf_free>
  }
  dhcp->p_out = NULL;
  12d5e0:	e51b3008 	ldr	r3, [fp, #-8]
  12d5e4:	e3a02000 	mov	r2, #0
  12d5e8:	e583200c 	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
  12d5ec:	e51b3008 	ldr	r3, [fp, #-8]
  12d5f0:	e3a02000 	mov	r2, #0
  12d5f4:	e5832010 	str	r2, [r3, #16]
}
  12d5f8:	e24bd004 	sub	sp, fp, #4
  12d5fc:	e8bd8800 	pop	{fp, pc}

0012d600 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  12d600:	e92d4800 	push	{fp, lr}
  12d604:	e28db004 	add	fp, sp, #4
  12d608:	e24dd008 	sub	sp, sp, #8
  12d60c:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  12d610:	e51b3008 	ldr	r3, [fp, #-8]
  12d614:	e3530000 	cmp	r3, #0
  12d618:	1a000007 	bne	12d63c <dhcp_option_trailer+0x3c>
  12d61c:	e30901c0 	movw	r0, #37312	; 0x91c0
  12d620:	e3400014 	movt	r0, #20
  12d624:	ebff56ba 	bl	103114 <rt_kprintf>
  12d628:	e3001783 	movw	r1, #1923	; 0x783
  12d62c:	e3080d78 	movw	r0, #36216	; 0x8d78
  12d630:	e3400014 	movt	r0, #20
  12d634:	ebff76ad 	bl	10b0f0 <sys_arch_assert>
  12d638:	ea000039 	b	12d724 <dhcp_option_trailer+0x124>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  12d63c:	e51b3008 	ldr	r3, [fp, #-8]
  12d640:	e5933010 	ldr	r3, [r3, #16]
  12d644:	e3530000 	cmp	r3, #0
  12d648:	1a000006 	bne	12d668 <dhcp_option_trailer+0x68>
  12d64c:	e30901e4 	movw	r0, #37348	; 0x91e4
  12d650:	e3400014 	movt	r0, #20
  12d654:	ebff56ae 	bl	103114 <rt_kprintf>
  12d658:	e3001784 	movw	r1, #1924	; 0x784
  12d65c:	e3080d78 	movw	r0, #36216	; 0x8d78
  12d660:	e3400014 	movt	r0, #20
  12d664:	ebff76a1 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12d668:	e51b3008 	ldr	r3, [fp, #-8]
  12d66c:	e1d331b4 	ldrh	r3, [r3, #20]
  12d670:	e3530043 	cmp	r3, #67	; 0x43
  12d674:	9a000006 	bls	12d694 <dhcp_option_trailer+0x94>
  12d678:	e3090210 	movw	r0, #37392	; 0x9210
  12d67c:	e3400014 	movt	r0, #20
  12d680:	ebff56a3 	bl	103114 <rt_kprintf>
  12d684:	e3001785 	movw	r1, #1925	; 0x785
  12d688:	e3080d78 	movw	r0, #36216	; 0x8d78
  12d68c:	e3400014 	movt	r0, #20
  12d690:	ebff7696 	bl	10b0f0 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  12d694:	e51b3008 	ldr	r3, [fp, #-8]
  12d698:	e5932010 	ldr	r2, [r3, #16]
  12d69c:	e51b3008 	ldr	r3, [fp, #-8]
  12d6a0:	e1d331b4 	ldrh	r3, [r3, #20]
  12d6a4:	e2831001 	add	r1, r3, #1
  12d6a8:	e6ff0071 	uxth	r0, r1
  12d6ac:	e51b1008 	ldr	r1, [fp, #-8]
  12d6b0:	e1c101b4 	strh	r0, [r1, #20]
  12d6b4:	e0823003 	add	r3, r2, r3
  12d6b8:	e3e02000 	mvn	r2, #0
  12d6bc:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d6c0:	ea00000a 	b	12d6f0 <dhcp_option_trailer+0xf0>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  12d6c4:	e51b3008 	ldr	r3, [fp, #-8]
  12d6c8:	e5932010 	ldr	r2, [r3, #16]
  12d6cc:	e51b3008 	ldr	r3, [fp, #-8]
  12d6d0:	e1d331b4 	ldrh	r3, [r3, #20]
  12d6d4:	e2831001 	add	r1, r3, #1
  12d6d8:	e6ff0071 	uxth	r0, r1
  12d6dc:	e51b1008 	ldr	r1, [fp, #-8]
  12d6e0:	e1c101b4 	strh	r0, [r1, #20]
  12d6e4:	e0823003 	add	r3, r2, r3
  12d6e8:	e3a02000 	mov	r2, #0
  12d6ec:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d6f0:	e51b3008 	ldr	r3, [fp, #-8]
  12d6f4:	e1d331b4 	ldrh	r3, [r3, #20]
  12d6f8:	e3530043 	cmp	r3, #67	; 0x43
  12d6fc:	9a000004 	bls	12d714 <dhcp_option_trailer+0x114>
  12d700:	e51b3008 	ldr	r3, [fp, #-8]
  12d704:	e1d331b4 	ldrh	r3, [r3, #20]
  12d708:	e2033003 	and	r3, r3, #3
  12d70c:	e3530000 	cmp	r3, #0
  12d710:	0a000003 	beq	12d724 <dhcp_option_trailer+0x124>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
  12d714:	e51b3008 	ldr	r3, [fp, #-8]
  12d718:	e1d331b4 	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d71c:	e3530043 	cmp	r3, #67	; 0x43
  12d720:	9affffe7 	bls	12d6c4 <dhcp_option_trailer+0xc4>
  }
}
  12d724:	e24bd004 	sub	sp, fp, #4
  12d728:	e8bd8800 	pop	{fp, pc}

0012d72c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  12d72c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12d730:	e28db000 	add	fp, sp, #0
  12d734:	e24dd014 	sub	sp, sp, #20
  12d738:	e50b0010 	str	r0, [fp, #-16]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
  12d73c:	e51b3010 	ldr	r3, [fp, #-16]
  12d740:	e3530000 	cmp	r3, #0
  12d744:	0a000013 	beq	12d798 <dhcp_supplied_address+0x6c>
  12d748:	e51b3010 	ldr	r3, [fp, #-16]
  12d74c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d750:	e3530000 	cmp	r3, #0
  12d754:	0a00000f 	beq	12d798 <dhcp_supplied_address+0x6c>
    struct dhcp* dhcp = netif_dhcp_data(netif);
  12d758:	e51b3010 	ldr	r3, [fp, #-16]
  12d75c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d760:	e50b3008 	str	r3, [fp, #-8]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING);
  12d764:	e51b3008 	ldr	r3, [fp, #-8]
  12d768:	e5d33009 	ldrb	r3, [r3, #9]
  12d76c:	e353000a 	cmp	r3, #10
  12d770:	0a000003 	beq	12d784 <dhcp_supplied_address+0x58>
  12d774:	e51b3008 	ldr	r3, [fp, #-8]
  12d778:	e5d33009 	ldrb	r3, [r3, #9]
  12d77c:	e3530005 	cmp	r3, #5
  12d780:	1a000001 	bne	12d78c <dhcp_supplied_address+0x60>
  12d784:	e3a03001 	mov	r3, #1
  12d788:	ea000000 	b	12d790 <dhcp_supplied_address+0x64>
  12d78c:	e3a03000 	mov	r3, #0
  12d790:	e6ef3073 	uxtb	r3, r3
  12d794:	ea000000 	b	12d79c <dhcp_supplied_address+0x70>
  }
  return 0;
  12d798:	e3a03000 	mov	r3, #0
}
  12d79c:	e1a00003 	mov	r0, r3
  12d7a0:	e28bd000 	add	sp, fp, #0
  12d7a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12d7a8:	e12fff1e 	bx	lr

0012d7ac <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
  12d7ac:	e92d4800 	push	{fp, lr}
  12d7b0:	e28db004 	add	fp, sp, #4
  12d7b4:	e24dd010 	sub	sp, sp, #16
  12d7b8:	e50b0010 	str	r0, [fp, #-16]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  12d7bc:	e51b3010 	ldr	r3, [fp, #-16]
  12d7c0:	e3530000 	cmp	r3, #0
  12d7c4:	1a000006 	bne	12d7e4 <free_etharp_q+0x38>
  12d7c8:	e3090250 	movw	r0, #37456	; 0x9250
  12d7cc:	e3400014 	movt	r0, #20
  12d7d0:	ebff564f 	bl	103114 <rt_kprintf>
  12d7d4:	e3a01097 	mov	r1, #151	; 0x97
  12d7d8:	e309025c 	movw	r0, #37468	; 0x925c
  12d7dc:	e3400014 	movt	r0, #20
  12d7e0:	ebff7642 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  12d7e4:	e51b3010 	ldr	r3, [fp, #-16]
  12d7e8:	e5933004 	ldr	r3, [r3, #4]
  12d7ec:	e3530000 	cmp	r3, #0
  12d7f0:	1a00001e 	bne	12d870 <free_etharp_q+0xc4>
  12d7f4:	e3090290 	movw	r0, #37520	; 0x9290
  12d7f8:	e3400014 	movt	r0, #20
  12d7fc:	ebff5644 	bl	103114 <rt_kprintf>
  12d800:	e3a01098 	mov	r1, #152	; 0x98
  12d804:	e309025c 	movw	r0, #37468	; 0x925c
  12d808:	e3400014 	movt	r0, #20
  12d80c:	ebff7637 	bl	10b0f0 <sys_arch_assert>
  while (q) {
  12d810:	ea000016 	b	12d870 <free_etharp_q+0xc4>
    r = q;
  12d814:	e51b3010 	ldr	r3, [fp, #-16]
  12d818:	e50b3008 	str	r3, [fp, #-8]
    q = q->next;
  12d81c:	e51b3010 	ldr	r3, [fp, #-16]
  12d820:	e5933000 	ldr	r3, [r3]
  12d824:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
  12d828:	e51b3008 	ldr	r3, [fp, #-8]
  12d82c:	e5933004 	ldr	r3, [r3, #4]
  12d830:	e3530000 	cmp	r3, #0
  12d834:	1a000006 	bne	12d854 <free_etharp_q+0xa8>
  12d838:	e30902a0 	movw	r0, #37536	; 0x92a0
  12d83c:	e3400014 	movt	r0, #20
  12d840:	ebff5633 	bl	103114 <rt_kprintf>
  12d844:	e3a0109c 	mov	r1, #156	; 0x9c
  12d848:	e309025c 	movw	r0, #37468	; 0x925c
  12d84c:	e3400014 	movt	r0, #20
  12d850:	ebff7626 	bl	10b0f0 <sys_arch_assert>
    pbuf_free(r->p);
  12d854:	e51b3008 	ldr	r3, [fp, #-8]
  12d858:	e5933004 	ldr	r3, [r3, #4]
  12d85c:	e1a00003 	mov	r0, r3
  12d860:	ebffb595 	bl	11aebc <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
  12d864:	e51b1008 	ldr	r1, [fp, #-8]
  12d868:	e3a0000b 	mov	r0, #11
  12d86c:	ebffae84 	bl	119284 <memp_free>
  while (q) {
  12d870:	e51b3010 	ldr	r3, [fp, #-16]
  12d874:	e3530000 	cmp	r3, #0
  12d878:	1affffe5 	bne	12d814 <free_etharp_q+0x68>
  }
}
  12d87c:	e320f000 	nop	{0}
  12d880:	e24bd004 	sub	sp, fp, #4
  12d884:	e8bd8800 	pop	{fp, pc}

0012d888 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  12d888:	e92d4800 	push	{fp, lr}
  12d88c:	e28db004 	add	fp, sp, #4
  12d890:	e24dd008 	sub	sp, sp, #8
  12d894:	e50b0008 	str	r0, [fp, #-8]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  12d898:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d89c:	e3403014 	movt	r3, #20
  12d8a0:	e51b2008 	ldr	r2, [fp, #-8]
  12d8a4:	e3a01018 	mov	r1, #24
  12d8a8:	e0020291 	mul	r2, r1, r2
  12d8ac:	e0833002 	add	r3, r3, r2
  12d8b0:	e5933000 	ldr	r3, [r3]
  12d8b4:	e3530000 	cmp	r3, #0
  12d8b8:	0a000010 	beq	12d900 <etharp_free_entry+0x78>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  12d8bc:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d8c0:	e3403014 	movt	r3, #20
  12d8c4:	e51b2008 	ldr	r2, [fp, #-8]
  12d8c8:	e3a01018 	mov	r1, #24
  12d8cc:	e0020291 	mul	r2, r1, r2
  12d8d0:	e0833002 	add	r3, r3, r2
  12d8d4:	e5933000 	ldr	r3, [r3]
  12d8d8:	e1a00003 	mov	r0, r3
  12d8dc:	ebffffb2 	bl	12d7ac <free_etharp_q>
    arp_table[i].q = NULL;
  12d8e0:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d8e4:	e3403014 	movt	r3, #20
  12d8e8:	e51b2008 	ldr	r2, [fp, #-8]
  12d8ec:	e3a01018 	mov	r1, #24
  12d8f0:	e0020291 	mul	r2, r1, r2
  12d8f4:	e0833002 	add	r3, r3, r2
  12d8f8:	e3a02000 	mov	r2, #0
  12d8fc:	e5832000 	str	r2, [r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  12d900:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d904:	e3403014 	movt	r3, #20
  12d908:	e51b2008 	ldr	r2, [fp, #-8]
  12d90c:	e3a01018 	mov	r1, #24
  12d910:	e0020291 	mul	r2, r1, r2
  12d914:	e0833002 	add	r3, r3, r2
  12d918:	e2833014 	add	r3, r3, #20
  12d91c:	e3a02000 	mov	r2, #0
  12d920:	e5c32000 	strb	r2, [r3]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
  12d924:	e320f000 	nop	{0}
  12d928:	e24bd004 	sub	sp, fp, #4
  12d92c:	e8bd8800 	pop	{fp, pc}

0012d930 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
  12d930:	e92d4800 	push	{fp, lr}
  12d934:	e28db004 	add	fp, sp, #4
  12d938:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12d93c:	e3a03000 	mov	r3, #0
  12d940:	e54b3005 	strb	r3, [fp, #-5]
  12d944:	ea000084 	b	12db5c <etharp_tmr+0x22c>
    u8_t state = arp_table[i].state;
  12d948:	e55b2005 	ldrb	r2, [fp, #-5]
  12d94c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d950:	e3403014 	movt	r3, #20
  12d954:	e3a01018 	mov	r1, #24
  12d958:	e0020291 	mul	r2, r1, r2
  12d95c:	e0833002 	add	r3, r3, r2
  12d960:	e2833014 	add	r3, r3, #20
  12d964:	e5d33000 	ldrb	r3, [r3]
  12d968:	e54b3006 	strb	r3, [fp, #-6]
    if (state != ETHARP_STATE_EMPTY
  12d96c:	e55b3006 	ldrb	r3, [fp, #-6]
  12d970:	e3530000 	cmp	r3, #0
  12d974:	0a000075 	beq	12db50 <etharp_tmr+0x220>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
  12d978:	e55b2005 	ldrb	r2, [fp, #-5]
  12d97c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d980:	e3403014 	movt	r3, #20
  12d984:	e3a01018 	mov	r1, #24
  12d988:	e0010291 	mul	r1, r1, r2
  12d98c:	e0833001 	add	r3, r3, r1
  12d990:	e2833012 	add	r3, r3, #18
  12d994:	e1d330b0 	ldrh	r3, [r3]
  12d998:	e2833001 	add	r3, r3, #1
  12d99c:	e6ff1073 	uxth	r1, r3
  12d9a0:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d9a4:	e3403014 	movt	r3, #20
  12d9a8:	e3a00018 	mov	r0, #24
  12d9ac:	e0020290 	mul	r2, r0, r2
  12d9b0:	e0833002 	add	r3, r3, r2
  12d9b4:	e2833012 	add	r3, r3, #18
  12d9b8:	e1c310b0 	strh	r1, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12d9bc:	e55b2005 	ldrb	r2, [fp, #-5]
  12d9c0:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d9c4:	e3403014 	movt	r3, #20
  12d9c8:	e3a01018 	mov	r1, #24
  12d9cc:	e0020291 	mul	r2, r1, r2
  12d9d0:	e0833002 	add	r3, r3, r2
  12d9d4:	e2833012 	add	r3, r3, #18
  12d9d8:	e1d330b0 	ldrh	r3, [r3]
  12d9dc:	e3530f4b 	cmp	r3, #300	; 0x12c
  12d9e0:	2a000013 	bcs	12da34 <etharp_tmr+0x104>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12d9e4:	e55b2005 	ldrb	r2, [fp, #-5]
  12d9e8:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d9ec:	e3403014 	movt	r3, #20
  12d9f0:	e3a01018 	mov	r1, #24
  12d9f4:	e0020291 	mul	r2, r1, r2
  12d9f8:	e0833002 	add	r3, r3, r2
  12d9fc:	e2833014 	add	r3, r3, #20
  12da00:	e5d33000 	ldrb	r3, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12da04:	e3530001 	cmp	r3, #1
  12da08:	1a00000d 	bne	12da44 <etharp_tmr+0x114>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
  12da0c:	e55b2005 	ldrb	r2, [fp, #-5]
  12da10:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12da14:	e3403014 	movt	r3, #20
  12da18:	e3a01018 	mov	r1, #24
  12da1c:	e0020291 	mul	r2, r1, r2
  12da20:	e0833002 	add	r3, r3, r2
  12da24:	e2833012 	add	r3, r3, #18
  12da28:	e1d330b0 	ldrh	r3, [r3]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12da2c:	e3530004 	cmp	r3, #4
  12da30:	9a000003 	bls	12da44 <etharp_tmr+0x114>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
  12da34:	e55b3005 	ldrb	r3, [fp, #-5]
  12da38:	e1a00003 	mov	r0, r3
  12da3c:	ebffff91 	bl	12d888 <etharp_free_entry>
  12da40:	ea000042 	b	12db50 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
  12da44:	e55b2005 	ldrb	r2, [fp, #-5]
  12da48:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12da4c:	e3403014 	movt	r3, #20
  12da50:	e3a01018 	mov	r1, #24
  12da54:	e0020291 	mul	r2, r1, r2
  12da58:	e0833002 	add	r3, r3, r2
  12da5c:	e2833014 	add	r3, r3, #20
  12da60:	e5d33000 	ldrb	r3, [r3]
  12da64:	e3530003 	cmp	r3, #3
  12da68:	1a000009 	bne	12da94 <etharp_tmr+0x164>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
  12da6c:	e55b2005 	ldrb	r2, [fp, #-5]
  12da70:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12da74:	e3403014 	movt	r3, #20
  12da78:	e3a01018 	mov	r1, #24
  12da7c:	e0020291 	mul	r2, r1, r2
  12da80:	e0833002 	add	r3, r3, r2
  12da84:	e2833014 	add	r3, r3, #20
  12da88:	e3a02004 	mov	r2, #4
  12da8c:	e5c32000 	strb	r2, [r3]
  12da90:	ea00002e 	b	12db50 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
  12da94:	e55b2005 	ldrb	r2, [fp, #-5]
  12da98:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12da9c:	e3403014 	movt	r3, #20
  12daa0:	e3a01018 	mov	r1, #24
  12daa4:	e0020291 	mul	r2, r1, r2
  12daa8:	e0833002 	add	r3, r3, r2
  12daac:	e2833014 	add	r3, r3, #20
  12dab0:	e5d33000 	ldrb	r3, [r3]
  12dab4:	e3530004 	cmp	r3, #4
  12dab8:	1a000009 	bne	12dae4 <etharp_tmr+0x1b4>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
  12dabc:	e55b2005 	ldrb	r2, [fp, #-5]
  12dac0:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dac4:	e3403014 	movt	r3, #20
  12dac8:	e3a01018 	mov	r1, #24
  12dacc:	e0020291 	mul	r2, r1, r2
  12dad0:	e0833002 	add	r3, r3, r2
  12dad4:	e2833014 	add	r3, r3, #20
  12dad8:	e3a02002 	mov	r2, #2
  12dadc:	e5c32000 	strb	r2, [r3]
  12dae0:	ea00001a 	b	12db50 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12dae4:	e55b2005 	ldrb	r2, [fp, #-5]
  12dae8:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12daec:	e3403014 	movt	r3, #20
  12daf0:	e3a01018 	mov	r1, #24
  12daf4:	e0020291 	mul	r2, r1, r2
  12daf8:	e0833002 	add	r3, r3, r2
  12dafc:	e2833014 	add	r3, r3, #20
  12db00:	e5d33000 	ldrb	r3, [r3]
  12db04:	e3530001 	cmp	r3, #1
  12db08:	1a000010 	bne	12db50 <etharp_tmr+0x220>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
  12db0c:	e55b2005 	ldrb	r2, [fp, #-5]
  12db10:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12db14:	e3403014 	movt	r3, #20
  12db18:	e3a01018 	mov	r1, #24
  12db1c:	e0020291 	mul	r2, r1, r2
  12db20:	e0833002 	add	r3, r3, r2
  12db24:	e2833008 	add	r3, r3, #8
  12db28:	e5930000 	ldr	r0, [r3]
  12db2c:	e55b3005 	ldrb	r3, [fp, #-5]
  12db30:	e3a02018 	mov	r2, #24
  12db34:	e0020392 	mul	r2, r2, r3
  12db38:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12db3c:	e3403014 	movt	r3, #20
  12db40:	e0823003 	add	r3, r2, r3
  12db44:	e2833004 	add	r3, r3, #4
  12db48:	e1a01003 	mov	r1, r3
  12db4c:	eb00066b 	bl	12f500 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12db50:	e55b3005 	ldrb	r3, [fp, #-5]
  12db54:	e2833001 	add	r3, r3, #1
  12db58:	e54b3005 	strb	r3, [fp, #-5]
  12db5c:	e55b3005 	ldrb	r3, [fp, #-5]
  12db60:	e3530009 	cmp	r3, #9
  12db64:	9affff77 	bls	12d948 <etharp_tmr+0x18>
      }
    }
  }
}
  12db68:	e320f000 	nop	{0}
  12db6c:	e24bd004 	sub	sp, fp, #4
  12db70:	e8bd8800 	pop	{fp, pc}

0012db74 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
  12db74:	e92d4800 	push	{fp, lr}
  12db78:	e28db004 	add	fp, sp, #4
  12db7c:	e24dd020 	sub	sp, sp, #32
  12db80:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12db84:	e1a03001 	mov	r3, r1
  12db88:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12db8c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  12db90:	e3a0300a 	mov	r3, #10
  12db94:	e54b3005 	strb	r3, [fp, #-5]
  12db98:	e3a0300a 	mov	r3, #10
  12db9c:	e54b3006 	strb	r3, [fp, #-6]
  s8_t empty = ARP_TABLE_SIZE;
  12dba0:	e3a0300a 	mov	r3, #10
  12dba4:	e54b3007 	strb	r3, [fp, #-7]
  u8_t i = 0;
  12dba8:	e3a03000 	mov	r3, #0
  12dbac:	e54b3008 	strb	r3, [fp, #-8]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  12dbb0:	e3a0300a 	mov	r3, #10
  12dbb4:	e54b3009 	strb	r3, [fp, #-9]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
  12dbb8:	e3a03000 	mov	r3, #0
  12dbbc:	e14b30bc 	strh	r3, [fp, #-12]
  12dbc0:	e3a03000 	mov	r3, #0
  12dbc4:	e14b30be 	strh	r3, [fp, #-14]
  12dbc8:	e3a03000 	mov	r3, #0
  12dbcc:	e14b31b0 	strh	r3, [fp, #-16]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12dbd0:	e3a03000 	mov	r3, #0
  12dbd4:	e54b3008 	strb	r3, [fp, #-8]
  12dbd8:	ea000088 	b	12de00 <etharp_find_entry+0x28c>
    u8_t state = arp_table[i].state;
  12dbdc:	e55b2008 	ldrb	r2, [fp, #-8]
  12dbe0:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dbe4:	e3403014 	movt	r3, #20
  12dbe8:	e3a01018 	mov	r1, #24
  12dbec:	e0020291 	mul	r2, r1, r2
  12dbf0:	e0833002 	add	r3, r3, r2
  12dbf4:	e2833014 	add	r3, r3, #20
  12dbf8:	e5d33000 	ldrb	r3, [r3]
  12dbfc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  12dc00:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12dc04:	e353000a 	cmp	r3, #10
  12dc08:	1a000005 	bne	12dc24 <etharp_find_entry+0xb0>
  12dc0c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dc10:	e3530000 	cmp	r3, #0
  12dc14:	1a000002 	bne	12dc24 <etharp_find_entry+0xb0>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
  12dc18:	e55b3008 	ldrb	r3, [fp, #-8]
  12dc1c:	e54b3007 	strb	r3, [fp, #-7]
  12dc20:	ea000073 	b	12ddf4 <etharp_find_entry+0x280>
    } else if (state != ETHARP_STATE_EMPTY) {
  12dc24:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dc28:	e3530000 	cmp	r3, #0
  12dc2c:	0a000070 	beq	12ddf4 <etharp_find_entry+0x280>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
  12dc30:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dc34:	e3530001 	cmp	r3, #1
  12dc38:	0a000009 	beq	12dc64 <etharp_find_entry+0xf0>
  12dc3c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dc40:	e3530001 	cmp	r3, #1
  12dc44:	8a000006 	bhi	12dc64 <etharp_find_entry+0xf0>
  12dc48:	e30902b0 	movw	r0, #37552	; 0x92b0
  12dc4c:	e3400014 	movt	r0, #20
  12dc50:	ebff552f 	bl	103114 <rt_kprintf>
  12dc54:	e3001126 	movw	r1, #294	; 0x126
  12dc58:	e309025c 	movw	r0, #37468	; 0x925c
  12dc5c:	e3400014 	movt	r0, #20
  12dc60:	ebff7522 	bl	10b0f0 <sys_arch_assert>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
  12dc64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dc68:	e3530000 	cmp	r3, #0
  12dc6c:	0a00000d 	beq	12dca8 <etharp_find_entry+0x134>
  12dc70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dc74:	e5932000 	ldr	r2, [r3]
  12dc78:	e55b1008 	ldrb	r1, [fp, #-8]
  12dc7c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dc80:	e3403014 	movt	r3, #20
  12dc84:	e3a00018 	mov	r0, #24
  12dc88:	e0010190 	mul	r1, r0, r1
  12dc8c:	e0833001 	add	r3, r3, r1
  12dc90:	e2833004 	add	r3, r3, #4
  12dc94:	e5933000 	ldr	r3, [r3]
  12dc98:	e1520003 	cmp	r2, r3
  12dc9c:	1a000001 	bne	12dca8 <etharp_find_entry+0x134>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
  12dca0:	e15b30d8 	ldrsb	r3, [fp, #-8]
  12dca4:	ea0000ce 	b	12dfe4 <etharp_find_entry+0x470>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  12dca8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dcac:	e3530001 	cmp	r3, #1
  12dcb0:	1a000036 	bne	12dd90 <etharp_find_entry+0x21c>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
  12dcb4:	e55b2008 	ldrb	r2, [fp, #-8]
  12dcb8:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dcbc:	e3403014 	movt	r3, #20
  12dcc0:	e3a01018 	mov	r1, #24
  12dcc4:	e0020291 	mul	r2, r1, r2
  12dcc8:	e0833002 	add	r3, r3, r2
  12dccc:	e5933000 	ldr	r3, [r3]
  12dcd0:	e3530000 	cmp	r3, #0
  12dcd4:	0a000016 	beq	12dd34 <etharp_find_entry+0x1c0>
          if (arp_table[i].ctime >= age_queue) {
  12dcd8:	e55b2008 	ldrb	r2, [fp, #-8]
  12dcdc:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dce0:	e3403014 	movt	r3, #20
  12dce4:	e3a01018 	mov	r1, #24
  12dce8:	e0020291 	mul	r2, r1, r2
  12dcec:	e0833002 	add	r3, r3, r2
  12dcf0:	e2833012 	add	r3, r3, #18
  12dcf4:	e1d330b0 	ldrh	r3, [r3]
  12dcf8:	e15b20bc 	ldrh	r2, [fp, #-12]
  12dcfc:	e1520003 	cmp	r2, r3
  12dd00:	8a00003b 	bhi	12ddf4 <etharp_find_entry+0x280>
            old_queue = i;
  12dd04:	e55b3008 	ldrb	r3, [fp, #-8]
  12dd08:	e54b3009 	strb	r3, [fp, #-9]
            age_queue = arp_table[i].ctime;
  12dd0c:	e55b2008 	ldrb	r2, [fp, #-8]
  12dd10:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dd14:	e3403014 	movt	r3, #20
  12dd18:	e3a01018 	mov	r1, #24
  12dd1c:	e0020291 	mul	r2, r1, r2
  12dd20:	e0833002 	add	r3, r3, r2
  12dd24:	e2833012 	add	r3, r3, #18
  12dd28:	e1d330b0 	ldrh	r3, [r3]
  12dd2c:	e14b30bc 	strh	r3, [fp, #-12]
  12dd30:	ea00002f 	b	12ddf4 <etharp_find_entry+0x280>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
  12dd34:	e55b2008 	ldrb	r2, [fp, #-8]
  12dd38:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dd3c:	e3403014 	movt	r3, #20
  12dd40:	e3a01018 	mov	r1, #24
  12dd44:	e0020291 	mul	r2, r1, r2
  12dd48:	e0833002 	add	r3, r3, r2
  12dd4c:	e2833012 	add	r3, r3, #18
  12dd50:	e1d330b0 	ldrh	r3, [r3]
  12dd54:	e15b20be 	ldrh	r2, [fp, #-14]
  12dd58:	e1520003 	cmp	r2, r3
  12dd5c:	8a000024 	bhi	12ddf4 <etharp_find_entry+0x280>
            old_pending = i;
  12dd60:	e55b3008 	ldrb	r3, [fp, #-8]
  12dd64:	e54b3005 	strb	r3, [fp, #-5]
            age_pending = arp_table[i].ctime;
  12dd68:	e55b2008 	ldrb	r2, [fp, #-8]
  12dd6c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dd70:	e3403014 	movt	r3, #20
  12dd74:	e3a01018 	mov	r1, #24
  12dd78:	e0020291 	mul	r2, r1, r2
  12dd7c:	e0833002 	add	r3, r3, r2
  12dd80:	e2833012 	add	r3, r3, #18
  12dd84:	e1d330b0 	ldrh	r3, [r3]
  12dd88:	e14b30be 	strh	r3, [fp, #-14]
  12dd8c:	ea000018 	b	12ddf4 <etharp_find_entry+0x280>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  12dd90:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dd94:	e3530001 	cmp	r3, #1
  12dd98:	9a000015 	bls	12ddf4 <etharp_find_entry+0x280>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  12dd9c:	e55b2008 	ldrb	r2, [fp, #-8]
  12dda0:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dda4:	e3403014 	movt	r3, #20
  12dda8:	e3a01018 	mov	r1, #24
  12ddac:	e0020291 	mul	r2, r1, r2
  12ddb0:	e0833002 	add	r3, r3, r2
  12ddb4:	e2833012 	add	r3, r3, #18
  12ddb8:	e1d330b0 	ldrh	r3, [r3]
  12ddbc:	e15b21b0 	ldrh	r2, [fp, #-16]
  12ddc0:	e1520003 	cmp	r2, r3
  12ddc4:	8a00000a 	bhi	12ddf4 <etharp_find_entry+0x280>
            old_stable = i;
  12ddc8:	e55b3008 	ldrb	r3, [fp, #-8]
  12ddcc:	e54b3006 	strb	r3, [fp, #-6]
            age_stable = arp_table[i].ctime;
  12ddd0:	e55b2008 	ldrb	r2, [fp, #-8]
  12ddd4:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ddd8:	e3403014 	movt	r3, #20
  12dddc:	e3a01018 	mov	r1, #24
  12dde0:	e0020291 	mul	r2, r1, r2
  12dde4:	e0833002 	add	r3, r3, r2
  12dde8:	e2833012 	add	r3, r3, #18
  12ddec:	e1d330b0 	ldrh	r3, [r3]
  12ddf0:	e14b31b0 	strh	r3, [fp, #-16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12ddf4:	e55b3008 	ldrb	r3, [fp, #-8]
  12ddf8:	e2833001 	add	r3, r3, #1
  12ddfc:	e54b3008 	strb	r3, [fp, #-8]
  12de00:	e55b3008 	ldrb	r3, [fp, #-8]
  12de04:	e3530009 	cmp	r3, #9
  12de08:	9affff73 	bls	12dbdc <etharp_find_entry+0x68>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  12de0c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12de10:	e2033002 	and	r3, r3, #2
  12de14:	e3530000 	cmp	r3, #0
  12de18:	1a000006 	bne	12de38 <etharp_find_entry+0x2c4>
  12de1c:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12de20:	e353000a 	cmp	r3, #10
  12de24:	1a000005 	bne	12de40 <etharp_find_entry+0x2cc>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  12de28:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12de2c:	e2033001 	and	r3, r3, #1
  12de30:	e3530000 	cmp	r3, #0
  12de34:	1a000001 	bne	12de40 <etharp_find_entry+0x2cc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
  12de38:	e3e03000 	mvn	r3, #0
  12de3c:	ea000068 	b	12dfe4 <etharp_find_entry+0x470>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  12de40:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12de44:	e3530009 	cmp	r3, #9
  12de48:	ca000002 	bgt	12de58 <etharp_find_entry+0x2e4>
    i = empty;
  12de4c:	e55b3007 	ldrb	r3, [fp, #-7]
  12de50:	e54b3008 	strb	r3, [fp, #-8]
  12de54:	ea000030 	b	12df1c <etharp_find_entry+0x3a8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
  12de58:	e15b30d6 	ldrsb	r3, [fp, #-6]
  12de5c:	e3530009 	cmp	r3, #9
  12de60:	ca000012 	bgt	12deb0 <etharp_find_entry+0x33c>
      /* recycle oldest stable*/
      i = old_stable;
  12de64:	e55b3006 	ldrb	r3, [fp, #-6]
  12de68:	e54b3008 	strb	r3, [fp, #-8]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
  12de6c:	e55b2008 	ldrb	r2, [fp, #-8]
  12de70:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12de74:	e3403014 	movt	r3, #20
  12de78:	e3a01018 	mov	r1, #24
  12de7c:	e0020291 	mul	r2, r1, r2
  12de80:	e0833002 	add	r3, r3, r2
  12de84:	e5933000 	ldr	r3, [r3]
  12de88:	e3530000 	cmp	r3, #0
  12de8c:	0a000015 	beq	12dee8 <etharp_find_entry+0x374>
  12de90:	e30902f0 	movw	r0, #37616	; 0x92f0
  12de94:	e3400014 	movt	r0, #20
  12de98:	ebff549d 	bl	103114 <rt_kprintf>
  12de9c:	e300116f 	movw	r1, #367	; 0x16f
  12dea0:	e309025c 	movw	r0, #37468	; 0x925c
  12dea4:	e3400014 	movt	r0, #20
  12dea8:	ebff7490 	bl	10b0f0 <sys_arch_assert>
  12deac:	ea00000d 	b	12dee8 <etharp_find_entry+0x374>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
  12deb0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12deb4:	e3530009 	cmp	r3, #9
  12deb8:	ca000002 	bgt	12dec8 <etharp_find_entry+0x354>
      /* recycle oldest pending */
      i = old_pending;
  12debc:	e55b3005 	ldrb	r3, [fp, #-5]
  12dec0:	e54b3008 	strb	r3, [fp, #-8]
  12dec4:	ea000007 	b	12dee8 <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
  12dec8:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12decc:	e3530009 	cmp	r3, #9
  12ded0:	ca000002 	bgt	12dee0 <etharp_find_entry+0x36c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
  12ded4:	e55b3009 	ldrb	r3, [fp, #-9]
  12ded8:	e54b3008 	strb	r3, [fp, #-8]
  12dedc:	ea000001 	b	12dee8 <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
  12dee0:	e3e03000 	mvn	r3, #0
  12dee4:	ea00003e 	b	12dfe4 <etharp_find_entry+0x470>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12dee8:	e55b3008 	ldrb	r3, [fp, #-8]
  12deec:	e3530009 	cmp	r3, #9
  12def0:	9a000006 	bls	12df10 <etharp_find_entry+0x39c>
  12def4:	e3090308 	movw	r0, #37640	; 0x9308
  12def8:	e3400014 	movt	r0, #20
  12defc:	ebff5484 	bl	103114 <rt_kprintf>
  12df00:	e3001181 	movw	r1, #385	; 0x181
  12df04:	e309025c 	movw	r0, #37468	; 0x925c
  12df08:	e3400014 	movt	r0, #20
  12df0c:	ebff7477 	bl	10b0f0 <sys_arch_assert>
    etharp_free_entry(i);
  12df10:	e55b3008 	ldrb	r3, [fp, #-8]
  12df14:	e1a00003 	mov	r0, r3
  12df18:	ebfffe5a 	bl	12d888 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12df1c:	e55b3008 	ldrb	r3, [fp, #-8]
  12df20:	e3530009 	cmp	r3, #9
  12df24:	9a000006 	bls	12df44 <etharp_find_entry+0x3d0>
  12df28:	e3090308 	movw	r0, #37640	; 0x9308
  12df2c:	e3400014 	movt	r0, #20
  12df30:	ebff5477 	bl	103114 <rt_kprintf>
  12df34:	e3001185 	movw	r1, #389	; 0x185
  12df38:	e309025c 	movw	r0, #37468	; 0x925c
  12df3c:	e3400014 	movt	r0, #20
  12df40:	ebff746a 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
  12df44:	e55b2008 	ldrb	r2, [fp, #-8]
  12df48:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12df4c:	e3403014 	movt	r3, #20
  12df50:	e3a01018 	mov	r1, #24
  12df54:	e0020291 	mul	r2, r1, r2
  12df58:	e0833002 	add	r3, r3, r2
  12df5c:	e2833014 	add	r3, r3, #20
  12df60:	e5d33000 	ldrb	r3, [r3]
  12df64:	e3530000 	cmp	r3, #0
  12df68:	0a000006 	beq	12df88 <etharp_find_entry+0x414>
  12df6c:	e309031c 	movw	r0, #37660	; 0x931c
  12df70:	e3400014 	movt	r0, #20
  12df74:	ebff5466 	bl	103114 <rt_kprintf>
  12df78:	e3001187 	movw	r1, #391	; 0x187
  12df7c:	e309025c 	movw	r0, #37468	; 0x925c
  12df80:	e3400014 	movt	r0, #20
  12df84:	ebff7459 	bl	10b0f0 <sys_arch_assert>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  12df88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12df8c:	e3530000 	cmp	r3, #0
  12df90:	0a000009 	beq	12dfbc <etharp_find_entry+0x448>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
  12df94:	e55b1008 	ldrb	r1, [fp, #-8]
  12df98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12df9c:	e5932000 	ldr	r2, [r3]
  12dfa0:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dfa4:	e3403014 	movt	r3, #20
  12dfa8:	e3a00018 	mov	r0, #24
  12dfac:	e0010190 	mul	r1, r0, r1
  12dfb0:	e0833001 	add	r3, r3, r1
  12dfb4:	e2833004 	add	r3, r3, #4
  12dfb8:	e5832000 	str	r2, [r3]
  }
  arp_table[i].ctime = 0;
  12dfbc:	e55b2008 	ldrb	r2, [fp, #-8]
  12dfc0:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dfc4:	e3403014 	movt	r3, #20
  12dfc8:	e3a01018 	mov	r1, #24
  12dfcc:	e0020291 	mul	r2, r1, r2
  12dfd0:	e0833002 	add	r3, r3, r2
  12dfd4:	e2833012 	add	r3, r3, #18
  12dfd8:	e3a02000 	mov	r2, #0
  12dfdc:	e1c320b0 	strh	r2, [r3]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
  12dfe0:	e15b30d8 	ldrsb	r3, [fp, #-8]
}
  12dfe4:	e1a00003 	mov	r0, r3
  12dfe8:	e24bd004 	sub	sp, fp, #4
  12dfec:	e8bd8800 	pop	{fp, pc}

0012dff0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
  12dff0:	e92d4800 	push	{fp, lr}
  12dff4:	e28db004 	add	fp, sp, #4
  12dff8:	e24dd028 	sub	sp, sp, #40	; 0x28
  12dffc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e000:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12e004:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12e008:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
  12e00c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e010:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12e014:	e3530006 	cmp	r3, #6
  12e018:	0a000006 	beq	12e038 <etharp_update_arp_entry+0x48>
  12e01c:	e3090348 	movw	r0, #37704	; 0x9348
  12e020:	e3400014 	movt	r0, #20
  12e024:	ebff543a 	bl	103114 <rt_kprintf>
  12e028:	e30011ab 	movw	r1, #427	; 0x1ab
  12e02c:	e309025c 	movw	r0, #37468	; 0x925c
  12e030:	e3400014 	movt	r0, #20
  12e034:	ebff742d 	bl	10b0f0 <sys_arch_assert>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
  12e038:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e03c:	e3530000 	cmp	r3, #0
  12e040:	0a000010 	beq	12e088 <etharp_update_arp_entry+0x98>
  12e044:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e048:	e5933000 	ldr	r3, [r3]
  12e04c:	e3530000 	cmp	r3, #0
  12e050:	0a00000c 	beq	12e088 <etharp_update_arp_entry+0x98>
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12e054:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e058:	e5933000 	ldr	r3, [r3]
  12e05c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12e060:	e1a00003 	mov	r0, r3
  12e064:	eb00112a 	bl	132514 <ip4_addr_isbroadcast_u32>
  12e068:	e1a03000 	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
  12e06c:	e3530000 	cmp	r3, #0
  12e070:	1a000004 	bne	12e088 <etharp_update_arp_entry+0x98>
      ip4_addr_ismulticast(ipaddr)) {
  12e074:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e078:	e5933000 	ldr	r3, [r3]
  12e07c:	e20330f0 	and	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12e080:	e35300e0 	cmp	r3, #224	; 0xe0
  12e084:	1a000001 	bne	12e090 <etharp_update_arp_entry+0xa0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12e088:	e3e0300f 	mvn	r3, #15
  12e08c:	ea00005e 	b	12e20c <etharp_update_arp_entry+0x21c>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
  12e090:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  12e094:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12e098:	e1a01003 	mov	r1, r3
  12e09c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e0a0:	ebfffeb3 	bl	12db74 <etharp_find_entry>
  12e0a4:	e1a03000 	mov	r3, r0
  12e0a8:	e54b3005 	strb	r3, [fp, #-5]
  /* bail out if no entry could be found */
  if (i < 0) {
  12e0ac:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e0b0:	e3530000 	cmp	r3, #0
  12e0b4:	aa000001 	bge	12e0c0 <etharp_update_arp_entry+0xd0>
    return (err_t)i;
  12e0b8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e0bc:	ea000052 	b	12e20c <etharp_update_arp_entry+0x21c>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
  12e0c0:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e0c4:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e0c8:	e3403014 	movt	r3, #20
  12e0cc:	e3a01018 	mov	r1, #24
  12e0d0:	e0020291 	mul	r2, r1, r2
  12e0d4:	e0833002 	add	r3, r3, r2
  12e0d8:	e2833014 	add	r3, r3, #20
  12e0dc:	e3a02002 	mov	r2, #2
  12e0e0:	e5c32000 	strb	r2, [r3]
  }

  /* record network interface */
  arp_table[i].netif = netif;
  12e0e4:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e0e8:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e0ec:	e3403014 	movt	r3, #20
  12e0f0:	e3a01018 	mov	r1, #24
  12e0f4:	e0020291 	mul	r2, r1, r2
  12e0f8:	e0833002 	add	r3, r3, r2
  12e0fc:	e2833008 	add	r3, r3, #8
  12e100:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12e104:	e5832000 	str	r2, [r3]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  12e108:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e10c:	e3a02018 	mov	r2, #24
  12e110:	e0030392 	mul	r3, r2, r3
  12e114:	e2832008 	add	r2, r3, #8
  12e118:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e11c:	e3403014 	movt	r3, #20
  12e120:	e0823003 	add	r3, r2, r3
  12e124:	e2833004 	add	r3, r3, #4
  12e128:	e3a02006 	mov	r2, #6
  12e12c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  12e130:	e1a00003 	mov	r0, r3
  12e134:	eb004b18 	bl	140d9c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
  12e138:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e13c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e140:	e3403014 	movt	r3, #20
  12e144:	e3a01018 	mov	r1, #24
  12e148:	e0020291 	mul	r2, r1, r2
  12e14c:	e0833002 	add	r3, r3, r2
  12e150:	e2833012 	add	r3, r3, #18
  12e154:	e3a02000 	mov	r2, #0
  12e158:	e1c320b0 	strh	r2, [r3]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
  12e15c:	ea000020 	b	12e1e4 <etharp_update_arp_entry+0x1f4>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
  12e160:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e164:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e168:	e3403014 	movt	r3, #20
  12e16c:	e3a01018 	mov	r1, #24
  12e170:	e0020291 	mul	r2, r1, r2
  12e174:	e0833002 	add	r3, r3, r2
  12e178:	e5933000 	ldr	r3, [r3]
  12e17c:	e50b300c 	str	r3, [fp, #-12]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
  12e180:	e15b10d5 	ldrsb	r1, [fp, #-5]
  12e184:	e51b300c 	ldr	r3, [fp, #-12]
  12e188:	e5932000 	ldr	r2, [r3]
  12e18c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e190:	e3403014 	movt	r3, #20
  12e194:	e3a00018 	mov	r0, #24
  12e198:	e0010190 	mul	r1, r0, r1
  12e19c:	e0833001 	add	r3, r3, r1
  12e1a0:	e5832000 	str	r2, [r3]
    /* get the packet pointer */
    p = q->p;
  12e1a4:	e51b300c 	ldr	r3, [fp, #-12]
  12e1a8:	e5933004 	ldr	r3, [r3, #4]
  12e1ac:	e50b3010 	str	r3, [fp, #-16]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
  12e1b0:	e51b100c 	ldr	r1, [fp, #-12]
  12e1b4:	e3a0000b 	mov	r0, #11
  12e1b8:	ebffac31 	bl	119284 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
  12e1bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e1c0:	e283203b 	add	r2, r3, #59	; 0x3b
  12e1c4:	e3a03b02 	mov	r3, #2048	; 0x800
  12e1c8:	e58d3000 	str	r3, [sp]
  12e1cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e1d0:	e51b1010 	ldr	r1, [fp, #-16]
  12e1d4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e1d8:	ebffeb48 	bl	128f00 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
  12e1dc:	e51b0010 	ldr	r0, [fp, #-16]
  12e1e0:	ebffb335 	bl	11aebc <pbuf_free>
  while (arp_table[i].q != NULL) {
  12e1e4:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e1e8:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e1ec:	e3403014 	movt	r3, #20
  12e1f0:	e3a01018 	mov	r1, #24
  12e1f4:	e0020291 	mul	r2, r1, r2
  12e1f8:	e0833002 	add	r3, r3, r2
  12e1fc:	e5933000 	ldr	r3, [r3]
  12e200:	e3530000 	cmp	r3, #0
  12e204:	1affffd5 	bne	12e160 <etharp_update_arp_entry+0x170>
  }
  return ERR_OK;
  12e208:	e3a03000 	mov	r3, #0
}
  12e20c:	e1a00003 	mov	r0, r3
  12e210:	e24bd004 	sub	sp, fp, #4
  12e214:	e8bd8800 	pop	{fp, pc}

0012e218 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
  12e218:	e92d4800 	push	{fp, lr}
  12e21c:	e28db004 	add	fp, sp, #4
  12e220:	e24dd010 	sub	sp, sp, #16
  12e224:	e50b0010 	str	r0, [fp, #-16]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12e228:	e3a03000 	mov	r3, #0
  12e22c:	e54b3005 	strb	r3, [fp, #-5]
  12e230:	ea00001c 	b	12e2a8 <etharp_cleanup_netif+0x90>
    u8_t state = arp_table[i].state;
  12e234:	e55b2005 	ldrb	r2, [fp, #-5]
  12e238:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e23c:	e3403014 	movt	r3, #20
  12e240:	e3a01018 	mov	r1, #24
  12e244:	e0020291 	mul	r2, r1, r2
  12e248:	e0833002 	add	r3, r3, r2
  12e24c:	e2833014 	add	r3, r3, #20
  12e250:	e5d33000 	ldrb	r3, [r3]
  12e254:	e54b3006 	strb	r3, [fp, #-6]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
  12e258:	e55b3006 	ldrb	r3, [fp, #-6]
  12e25c:	e3530000 	cmp	r3, #0
  12e260:	0a00000d 	beq	12e29c <etharp_cleanup_netif+0x84>
  12e264:	e55b2005 	ldrb	r2, [fp, #-5]
  12e268:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e26c:	e3403014 	movt	r3, #20
  12e270:	e3a01018 	mov	r1, #24
  12e274:	e0020291 	mul	r2, r1, r2
  12e278:	e0833002 	add	r3, r3, r2
  12e27c:	e2833008 	add	r3, r3, #8
  12e280:	e5933000 	ldr	r3, [r3]
  12e284:	e51b2010 	ldr	r2, [fp, #-16]
  12e288:	e1520003 	cmp	r2, r3
  12e28c:	1a000002 	bne	12e29c <etharp_cleanup_netif+0x84>
      etharp_free_entry(i);
  12e290:	e55b3005 	ldrb	r3, [fp, #-5]
  12e294:	e1a00003 	mov	r0, r3
  12e298:	ebfffd7a 	bl	12d888 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12e29c:	e55b3005 	ldrb	r3, [fp, #-5]
  12e2a0:	e2833001 	add	r3, r3, #1
  12e2a4:	e54b3005 	strb	r3, [fp, #-5]
  12e2a8:	e55b3005 	ldrb	r3, [fp, #-5]
  12e2ac:	e3530009 	cmp	r3, #9
  12e2b0:	9affffdf 	bls	12e234 <etharp_cleanup_netif+0x1c>
    }
  }
}
  12e2b4:	e320f000 	nop	{0}
  12e2b8:	e24bd004 	sub	sp, fp, #4
  12e2bc:	e8bd8800 	pop	{fp, pc}

0012e2c0 <etharp_find_addr>:
 * @return table index if found, -1 otherwise
 */
s8_t
etharp_find_addr(struct netif *netif, const ip4_addr_t *ipaddr,
         struct eth_addr **eth_ret, const ip4_addr_t **ip_ret)
{
  12e2c0:	e92d4800 	push	{fp, lr}
  12e2c4:	e28db004 	add	fp, sp, #4
  12e2c8:	e24dd018 	sub	sp, sp, #24
  12e2cc:	e50b0010 	str	r0, [fp, #-16]
  12e2d0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  12e2d4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  12e2d8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  s8_t i;

  LWIP_ASSERT("eth_ret != NULL && ip_ret != NULL",
  12e2dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e2e0:	e3530000 	cmp	r3, #0
  12e2e4:	0a000002 	beq	12e2f4 <etharp_find_addr+0x34>
  12e2e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e2ec:	e3530000 	cmp	r3, #0
  12e2f0:	1a000006 	bne	12e310 <etharp_find_addr+0x50>
  12e2f4:	e309036c 	movw	r0, #37740	; 0x936c
  12e2f8:	e3400014 	movt	r0, #20
  12e2fc:	ebff5384 	bl	103114 <rt_kprintf>
  12e300:	e300124d 	movw	r1, #589	; 0x24d
  12e304:	e309025c 	movw	r0, #37468	; 0x925c
  12e308:	e3400014 	movt	r0, #20
  12e30c:	ebff7377 	bl	10b0f0 <sys_arch_assert>
    eth_ret != NULL && ip_ret != NULL);

  LWIP_UNUSED_ARG(netif);

  i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY, netif);
  12e310:	e51b2010 	ldr	r2, [fp, #-16]
  12e314:	e3a01002 	mov	r1, #2
  12e318:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12e31c:	ebfffe14 	bl	12db74 <etharp_find_entry>
  12e320:	e1a03000 	mov	r3, r0
  12e324:	e54b3005 	strb	r3, [fp, #-5]
  if ((i >= 0) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12e328:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e32c:	e3530000 	cmp	r3, #0
  12e330:	ba00001e 	blt	12e3b0 <etharp_find_addr+0xf0>
  12e334:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e338:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e33c:	e3403014 	movt	r3, #20
  12e340:	e3a01018 	mov	r1, #24
  12e344:	e0020291 	mul	r2, r1, r2
  12e348:	e0833002 	add	r3, r3, r2
  12e34c:	e2833014 	add	r3, r3, #20
  12e350:	e5d33000 	ldrb	r3, [r3]
  12e354:	e3530001 	cmp	r3, #1
  12e358:	9a000014 	bls	12e3b0 <etharp_find_addr+0xf0>
      *eth_ret = &arp_table[i].ethaddr;
  12e35c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e360:	e3a02018 	mov	r2, #24
  12e364:	e0030392 	mul	r3, r2, r3
  12e368:	e2832008 	add	r2, r3, #8
  12e36c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e370:	e3403014 	movt	r3, #20
  12e374:	e0823003 	add	r3, r2, r3
  12e378:	e2832004 	add	r2, r3, #4
  12e37c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e380:	e5832000 	str	r2, [r3]
      *ip_ret = &arp_table[i].ipaddr;
  12e384:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e388:	e3a02018 	mov	r2, #24
  12e38c:	e0020392 	mul	r2, r2, r3
  12e390:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e394:	e3403014 	movt	r3, #20
  12e398:	e0823003 	add	r3, r2, r3
  12e39c:	e2832004 	add	r2, r3, #4
  12e3a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e3a4:	e5832000 	str	r2, [r3]
      return i;
  12e3a8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e3ac:	ea000000 	b	12e3b4 <etharp_find_addr+0xf4>
  }
  return -1;
  12e3b0:	e3e03000 	mvn	r3, #0
}
  12e3b4:	e1a00003 	mov	r0, r3
  12e3b8:	e24bd004 	sub	sp, fp, #4
  12e3bc:	e8bd8800 	pop	{fp, pc}

0012e3c0 <etharp_get_entry>:
 * @param eth_ret return value: ETH address
 * @return 1 on valid index, 0 otherwise
 */
u8_t
etharp_get_entry(u8_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)
{
  12e3c0:	e92d4800 	push	{fp, lr}
  12e3c4:	e28db004 	add	fp, sp, #4
  12e3c8:	e24dd010 	sub	sp, sp, #16
  12e3cc:	e50b100c 	str	r1, [fp, #-12]
  12e3d0:	e50b2010 	str	r2, [fp, #-16]
  12e3d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12e3d8:	e1a03000 	mov	r3, r0
  12e3dc:	e54b3005 	strb	r3, [fp, #-5]
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12e3e0:	e51b300c 	ldr	r3, [fp, #-12]
  12e3e4:	e3530000 	cmp	r3, #0
  12e3e8:	1a000006 	bne	12e408 <etharp_get_entry+0x48>
  12e3ec:	e3090390 	movw	r0, #37776	; 0x9390
  12e3f0:	e3400014 	movt	r0, #20
  12e3f4:	ebff5346 	bl	103114 <rt_kprintf>
  12e3f8:	e3001266 	movw	r1, #614	; 0x266
  12e3fc:	e309025c 	movw	r0, #37468	; 0x925c
  12e400:	e3400014 	movt	r0, #20
  12e404:	ebff7339 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12e408:	e51b3010 	ldr	r3, [fp, #-16]
  12e40c:	e3530000 	cmp	r3, #0
  12e410:	1a000006 	bne	12e430 <etharp_get_entry+0x70>
  12e414:	e30903a0 	movw	r0, #37792	; 0x93a0
  12e418:	e3400014 	movt	r0, #20
  12e41c:	ebff533c 	bl	103114 <rt_kprintf>
  12e420:	e3001267 	movw	r1, #615	; 0x267
  12e424:	e309025c 	movw	r0, #37468	; 0x925c
  12e428:	e3400014 	movt	r0, #20
  12e42c:	ebff732f 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
  12e430:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12e434:	e3530000 	cmp	r3, #0
  12e438:	1a000006 	bne	12e458 <etharp_get_entry+0x98>
  12e43c:	e30903b0 	movw	r0, #37808	; 0x93b0
  12e440:	e3400014 	movt	r0, #20
  12e444:	ebff5332 	bl	103114 <rt_kprintf>
  12e448:	e3a01f9a 	mov	r1, #616	; 0x268
  12e44c:	e309025c 	movw	r0, #37468	; 0x925c
  12e450:	e3400014 	movt	r0, #20
  12e454:	ebff7325 	bl	10b0f0 <sys_arch_assert>

  if((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12e458:	e55b3005 	ldrb	r3, [fp, #-5]
  12e45c:	e3530009 	cmp	r3, #9
  12e460:	8a000028 	bhi	12e508 <etharp_get_entry+0x148>
  12e464:	e55b2005 	ldrb	r2, [fp, #-5]
  12e468:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e46c:	e3403014 	movt	r3, #20
  12e470:	e3a01018 	mov	r1, #24
  12e474:	e0020291 	mul	r2, r1, r2
  12e478:	e0833002 	add	r3, r3, r2
  12e47c:	e2833014 	add	r3, r3, #20
  12e480:	e5d33000 	ldrb	r3, [r3]
  12e484:	e3530001 	cmp	r3, #1
  12e488:	9a00001e 	bls	12e508 <etharp_get_entry+0x148>
    *ipaddr  = &arp_table[i].ipaddr;
  12e48c:	e55b3005 	ldrb	r3, [fp, #-5]
  12e490:	e3a02018 	mov	r2, #24
  12e494:	e0020392 	mul	r2, r2, r3
  12e498:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e49c:	e3403014 	movt	r3, #20
  12e4a0:	e0823003 	add	r3, r2, r3
  12e4a4:	e2832004 	add	r2, r3, #4
  12e4a8:	e51b300c 	ldr	r3, [fp, #-12]
  12e4ac:	e5832000 	str	r2, [r3]
    *netif   = arp_table[i].netif;
  12e4b0:	e55b2005 	ldrb	r2, [fp, #-5]
  12e4b4:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e4b8:	e3403014 	movt	r3, #20
  12e4bc:	e3a01018 	mov	r1, #24
  12e4c0:	e0020291 	mul	r2, r1, r2
  12e4c4:	e0833002 	add	r3, r3, r2
  12e4c8:	e2833008 	add	r3, r3, #8
  12e4cc:	e5932000 	ldr	r2, [r3]
  12e4d0:	e51b3010 	ldr	r3, [fp, #-16]
  12e4d4:	e5832000 	str	r2, [r3]
    *eth_ret = &arp_table[i].ethaddr;
  12e4d8:	e55b3005 	ldrb	r3, [fp, #-5]
  12e4dc:	e3a02018 	mov	r2, #24
  12e4e0:	e0030392 	mul	r3, r2, r3
  12e4e4:	e2832008 	add	r2, r3, #8
  12e4e8:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e4ec:	e3403014 	movt	r3, #20
  12e4f0:	e0823003 	add	r3, r2, r3
  12e4f4:	e2832004 	add	r2, r3, #4
  12e4f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12e4fc:	e5832000 	str	r2, [r3]
    return 1;
  12e500:	e3a03001 	mov	r3, #1
  12e504:	ea000000 	b	12e50c <etharp_get_entry+0x14c>
  } else {
    return 0;
  12e508:	e3a03000 	mov	r3, #0
  }
}
  12e50c:	e1a00003 	mov	r0, r3
  12e510:	e24bd004 	sub	sp, fp, #4
  12e514:	e8bd8800 	pop	{fp, pc}

0012e518 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
  12e518:	e92d4800 	push	{fp, lr}
  12e51c:	e28db004 	add	fp, sp, #4
  12e520:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e524:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e528:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12e52c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e530:	e3530000 	cmp	r3, #0
  12e534:	1a000007 	bne	12e558 <etharp_input+0x40>
  12e538:	e30903a0 	movw	r0, #37792	; 0x93a0
  12e53c:	e3400014 	movt	r0, #20
  12e540:	ebff52f3 	bl	103114 <rt_kprintf>
  12e544:	e3a01fa2 	mov	r1, #648	; 0x288
  12e548:	e309025c 	movw	r0, #37468	; 0x925c
  12e54c:	e3400014 	movt	r0, #20
  12e550:	ebff72e6 	bl	10b0f0 <sys_arch_assert>
  12e554:	ea000085 	b	12e770 <etharp_input+0x258>

  hdr = (struct etharp_hdr *)p->payload;
  12e558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e55c:	e5933004 	ldr	r3, [r3, #4]
  12e560:	e50b300c 	str	r3, [fp, #-12]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e564:	e51b300c 	ldr	r3, [fp, #-12]
  12e568:	e1d330b0 	ldrh	r3, [r3]
  12e56c:	e6ff3073 	uxth	r3, r3
  12e570:	e3530c01 	cmp	r3, #256	; 0x100
  12e574:	1a00000c 	bne	12e5ac <etharp_input+0x94>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e578:	e51b300c 	ldr	r3, [fp, #-12]
  12e57c:	e5d33004 	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e580:	e3530006 	cmp	r3, #6
  12e584:	1a000008 	bne	12e5ac <etharp_input+0x94>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e588:	e51b300c 	ldr	r3, [fp, #-12]
  12e58c:	e5d33005 	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e590:	e3530004 	cmp	r3, #4
  12e594:	1a000004 	bne	12e5ac <etharp_input+0x94>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
  12e598:	e51b300c 	ldr	r3, [fp, #-12]
  12e59c:	e1d330b2 	ldrh	r3, [r3, #2]
  12e5a0:	e6ff3073 	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e5a4:	e3530008 	cmp	r3, #8
  12e5a8:	0a000012 	beq	12e5f8 <etharp_input+0xe0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
  12e5ac:	e30e3a14 	movw	r3, #59924	; 0xea14
  12e5b0:	e3403056 	movt	r3, #86	; 0x56
  12e5b4:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  12e5b8:	e2833001 	add	r3, r3, #1
  12e5bc:	e6ff2073 	uxth	r2, r3
  12e5c0:	e30e3a14 	movw	r3, #59924	; 0xea14
  12e5c4:	e3403056 	movt	r3, #86	; 0x56
  12e5c8:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  12e5cc:	e30e3a14 	movw	r3, #59924	; 0xea14
  12e5d0:	e3403056 	movt	r3, #86	; 0x56
  12e5d4:	e1d331be 	ldrh	r3, [r3, #30]
  12e5d8:	e2833001 	add	r3, r3, #1
  12e5dc:	e6ff2073 	uxth	r2, r3
  12e5e0:	e30e3a14 	movw	r3, #59924	; 0xea14
  12e5e4:	e3403056 	movt	r3, #86	; 0x56
  12e5e8:	e1c321be 	strh	r2, [r3, #30]
    pbuf_free(p);
  12e5ec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e5f0:	ebffb231 	bl	11aebc <pbuf_free>
    return;
  12e5f4:	ea00005d 	b	12e770 <etharp_input+0x258>
  }
  ETHARP_STATS_INC(etharp.recv);
  12e5f8:	e30e3a14 	movw	r3, #59924	; 0xea14
  12e5fc:	e3403056 	movt	r3, #86	; 0x56
  12e600:	e1d331ba 	ldrh	r3, [r3, #26]
  12e604:	e2833001 	add	r3, r3, #1
  12e608:	e6ff2073 	uxth	r2, r3
  12e60c:	e30e3a14 	movw	r3, #59924	; 0xea14
  12e610:	e3403056 	movt	r3, #86	; 0x56
  12e614:	e1c321ba 	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  12e618:	e51b300c 	ldr	r3, [fp, #-12]
  12e61c:	e283300e 	add	r3, r3, #14
  12e620:	e5933000 	ldr	r3, [r3]
  12e624:	e50b3010 	str	r3, [fp, #-16]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  12e628:	e51b300c 	ldr	r3, [fp, #-12]
  12e62c:	e2833018 	add	r3, r3, #24
  12e630:	e5933000 	ldr	r3, [r3]
  12e634:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  12e638:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e63c:	e2833004 	add	r3, r3, #4
  12e640:	e5933000 	ldr	r3, [r3]
  12e644:	e3530000 	cmp	r3, #0
  12e648:	1a000002 	bne	12e658 <etharp_input+0x140>
    for_us = 0;
  12e64c:	e3a03000 	mov	r3, #0
  12e650:	e54b3005 	strb	r3, [fp, #-5]
  12e654:	ea000008 	b	12e67c <etharp_input+0x164>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
  12e658:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12e65c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e660:	e2833004 	add	r3, r3, #4
  12e664:	e5933000 	ldr	r3, [r3]
  12e668:	e1520003 	cmp	r2, r3
  12e66c:	03a03001 	moveq	r3, #1
  12e670:	13a03000 	movne	r3, #0
  12e674:	e6ef3073 	uxtb	r3, r3
  12e678:	e54b3005 	strb	r3, [fp, #-5]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  12e67c:	e51b300c 	ldr	r3, [fp, #-12]
  12e680:	e2832008 	add	r2, r3, #8
  12e684:	e55b3005 	ldrb	r3, [fp, #-5]
  12e688:	e3530000 	cmp	r3, #0
  12e68c:	0a000001 	beq	12e698 <etharp_input+0x180>
  12e690:	e3a03001 	mov	r3, #1
  12e694:	ea000000 	b	12e69c <etharp_input+0x184>
  12e698:	e3a03002 	mov	r3, #2
  12e69c:	e24b1010 	sub	r1, fp, #16
  12e6a0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e6a4:	ebfffe51 	bl	12dff0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
  12e6a8:	e51b300c 	ldr	r3, [fp, #-12]
  12e6ac:	e1d330b6 	ldrh	r3, [r3, #6]
  12e6b0:	e6ff3073 	uxth	r3, r3
  12e6b4:	e3530c01 	cmp	r3, #256	; 0x100
  12e6b8:	0a000002 	beq	12e6c8 <etharp_input+0x1b0>
  12e6bc:	e3530c02 	cmp	r3, #512	; 0x200
  12e6c0:	0a000019 	beq	12e72c <etharp_input+0x214>
  12e6c4:	ea00001d 	b	12e740 <etharp_input+0x228>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
  12e6c8:	e55b3005 	ldrb	r3, [fp, #-5]
  12e6cc:	e3530000 	cmp	r3, #0
  12e6d0:	0a000023 	beq	12e764 <etharp_input+0x24c>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
  12e6d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e6d8:	e283003b 	add	r0, r3, #59	; 0x3b
  12e6dc:	e51b300c 	ldr	r3, [fp, #-12]
  12e6e0:	e283c008 	add	ip, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
  12e6e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e6e8:	e283e03b 	add	lr, r3, #59	; 0x3b
  12e6ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e6f0:	e2833004 	add	r3, r3, #4
                 &hdr->shwaddr, &sipaddr,
  12e6f4:	e51b200c 	ldr	r2, [fp, #-12]
  12e6f8:	e2822008 	add	r2, r2, #8
      etharp_raw(netif,
  12e6fc:	e3a01002 	mov	r1, #2
  12e700:	e58d100c 	str	r1, [sp, #12]
  12e704:	e24b1010 	sub	r1, fp, #16
  12e708:	e58d1008 	str	r1, [sp, #8]
  12e70c:	e58d2004 	str	r2, [sp, #4]
  12e710:	e58d3000 	str	r3, [sp]
  12e714:	e1a0300e 	mov	r3, lr
  12e718:	e1a0200c 	mov	r2, ip
  12e71c:	e1a01000 	mov	r1, r0
  12e720:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e724:	eb0002d5 	bl	12f280 <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
  12e728:	ea00000d 	b	12e764 <etharp_input+0x24c>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
  12e72c:	e24b3010 	sub	r3, fp, #16
  12e730:	e1a01003 	mov	r1, r3
  12e734:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e738:	ebfff256 	bl	12b098 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  12e73c:	ea000009 	b	12e768 <etharp_input+0x250>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
  12e740:	e30e3a14 	movw	r3, #59924	; 0xea14
  12e744:	e3403056 	movt	r3, #86	; 0x56
  12e748:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  12e74c:	e2833001 	add	r3, r3, #1
  12e750:	e6ff2073 	uxth	r2, r3
  12e754:	e30e3a14 	movw	r3, #59924	; 0xea14
  12e758:	e3403056 	movt	r3, #86	; 0x56
  12e75c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    break;
  12e760:	ea000000 	b	12e768 <etharp_input+0x250>
    break;
  12e764:	e320f000 	nop	{0}
  }
  /* free ARP packet */
  pbuf_free(p);
  12e768:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e76c:	ebffb1d2 	bl	11aebc <pbuf_free>
}
  12e770:	e24bd004 	sub	sp, fp, #4
  12e774:	e8bd8800 	pop	{fp, pc}

0012e778 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
  12e778:	e92d4800 	push	{fp, lr}
  12e77c:	e28db004 	add	fp, sp, #4
  12e780:	e24dd018 	sub	sp, sp, #24
  12e784:	e50b0008 	str	r0, [fp, #-8]
  12e788:	e50b100c 	str	r1, [fp, #-12]
  12e78c:	e1a03002 	mov	r3, r2
  12e790:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
  12e794:	e55b200d 	ldrb	r2, [fp, #-13]
  12e798:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e79c:	e3403014 	movt	r3, #20
  12e7a0:	e3a01018 	mov	r1, #24
  12e7a4:	e0020291 	mul	r2, r1, r2
  12e7a8:	e0833002 	add	r3, r3, r2
  12e7ac:	e2833014 	add	r3, r3, #20
  12e7b0:	e5d33000 	ldrb	r3, [r3]
  12e7b4:	e3530001 	cmp	r3, #1
  12e7b8:	8a000006 	bhi	12e7d8 <etharp_output_to_arp_index+0x60>
  12e7bc:	e30903c0 	movw	r0, #37824	; 0x93c0
  12e7c0:	e3400014 	movt	r0, #20
  12e7c4:	ebff5252 	bl	103114 <rt_kprintf>
  12e7c8:	e30012ed 	movw	r1, #749	; 0x2ed
  12e7cc:	e309025c 	movw	r0, #37468	; 0x925c
  12e7d0:	e3400014 	movt	r0, #20
  12e7d4:	ebff7245 	bl	10b0f0 <sys_arch_assert>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
  12e7d8:	e55b200d 	ldrb	r2, [fp, #-13]
  12e7dc:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e7e0:	e3403014 	movt	r3, #20
  12e7e4:	e3a01018 	mov	r1, #24
  12e7e8:	e0020291 	mul	r2, r1, r2
  12e7ec:	e0833002 	add	r3, r3, r2
  12e7f0:	e2833014 	add	r3, r3, #20
  12e7f4:	e5d33000 	ldrb	r3, [r3]
  12e7f8:	e3530002 	cmp	r3, #2
  12e7fc:	1a000049 	bne	12e928 <etharp_output_to_arp_index+0x1b0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
  12e800:	e55b200d 	ldrb	r2, [fp, #-13]
  12e804:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e808:	e3403014 	movt	r3, #20
  12e80c:	e3a01018 	mov	r1, #24
  12e810:	e0020291 	mul	r2, r1, r2
  12e814:	e0833002 	add	r3, r3, r2
  12e818:	e2833012 	add	r3, r3, #18
  12e81c:	e1d330b0 	ldrh	r3, [r3]
  12e820:	e3530f47 	cmp	r3, #284	; 0x11c
  12e824:	9a000016 	bls	12e884 <etharp_output_to_arp_index+0x10c>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  12e828:	e55b300d 	ldrb	r3, [fp, #-13]
  12e82c:	e3a02018 	mov	r2, #24
  12e830:	e0020392 	mul	r2, r2, r3
  12e834:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e838:	e3403014 	movt	r3, #20
  12e83c:	e0823003 	add	r3, r2, r3
  12e840:	e2833004 	add	r3, r3, #4
  12e844:	e1a01003 	mov	r1, r3
  12e848:	e51b0008 	ldr	r0, [fp, #-8]
  12e84c:	eb00032b 	bl	12f500 <etharp_request>
  12e850:	e1a03000 	mov	r3, r0
  12e854:	e3530000 	cmp	r3, #0
  12e858:	1a000032 	bne	12e928 <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12e85c:	e55b200d 	ldrb	r2, [fp, #-13]
  12e860:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e864:	e3403014 	movt	r3, #20
  12e868:	e3a01018 	mov	r1, #24
  12e86c:	e0020291 	mul	r2, r1, r2
  12e870:	e0833002 	add	r3, r3, r2
  12e874:	e2833014 	add	r3, r3, #20
  12e878:	e3a02003 	mov	r2, #3
  12e87c:	e5c32000 	strb	r2, [r3]
  12e880:	ea000028 	b	12e928 <etharp_output_to_arp_index+0x1b0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
  12e884:	e55b200d 	ldrb	r2, [fp, #-13]
  12e888:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e88c:	e3403014 	movt	r3, #20
  12e890:	e3a01018 	mov	r1, #24
  12e894:	e0020291 	mul	r2, r1, r2
  12e898:	e0833002 	add	r3, r3, r2
  12e89c:	e2833012 	add	r3, r3, #18
  12e8a0:	e1d330b0 	ldrh	r3, [r3]
  12e8a4:	e300210d 	movw	r2, #269	; 0x10d
  12e8a8:	e1530002 	cmp	r3, r2
  12e8ac:	9a00001d 	bls	12e928 <etharp_output_to_arp_index+0x1b0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
  12e8b0:	e55b300d 	ldrb	r3, [fp, #-13]
  12e8b4:	e3a02018 	mov	r2, #24
  12e8b8:	e0020392 	mul	r2, r2, r3
  12e8bc:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e8c0:	e3403014 	movt	r3, #20
  12e8c4:	e0823003 	add	r3, r2, r3
  12e8c8:	e2831004 	add	r1, r3, #4
  12e8cc:	e55b300d 	ldrb	r3, [fp, #-13]
  12e8d0:	e3a02018 	mov	r2, #24
  12e8d4:	e0030392 	mul	r3, r2, r3
  12e8d8:	e2832008 	add	r2, r3, #8
  12e8dc:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e8e0:	e3403014 	movt	r3, #20
  12e8e4:	e0823003 	add	r3, r2, r3
  12e8e8:	e2833004 	add	r3, r3, #4
  12e8ec:	e1a02003 	mov	r2, r3
  12e8f0:	e51b0008 	ldr	r0, [fp, #-8]
  12e8f4:	eb0002e5 	bl	12f490 <etharp_request_dst>
  12e8f8:	e1a03000 	mov	r3, r0
  12e8fc:	e3530000 	cmp	r3, #0
  12e900:	1a000008 	bne	12e928 <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12e904:	e55b200d 	ldrb	r2, [fp, #-13]
  12e908:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e90c:	e3403014 	movt	r3, #20
  12e910:	e3a01018 	mov	r1, #24
  12e914:	e0020291 	mul	r2, r1, r2
  12e918:	e0833002 	add	r3, r3, r2
  12e91c:	e2833014 	add	r3, r3, #20
  12e920:	e3a02003 	mov	r2, #3
  12e924:	e5c32000 	strb	r2, [r3]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
  12e928:	e51b3008 	ldr	r3, [fp, #-8]
  12e92c:	e283103b 	add	r1, r3, #59	; 0x3b
  12e930:	e55b300d 	ldrb	r3, [fp, #-13]
  12e934:	e3a02018 	mov	r2, #24
  12e938:	e0030392 	mul	r3, r2, r3
  12e93c:	e2832008 	add	r2, r3, #8
  12e940:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e944:	e3403014 	movt	r3, #20
  12e948:	e0823003 	add	r3, r2, r3
  12e94c:	e2832004 	add	r2, r3, #4
  12e950:	e3a03b02 	mov	r3, #2048	; 0x800
  12e954:	e58d3000 	str	r3, [sp]
  12e958:	e1a03002 	mov	r3, r2
  12e95c:	e1a02001 	mov	r2, r1
  12e960:	e51b100c 	ldr	r1, [fp, #-12]
  12e964:	e51b0008 	ldr	r0, [fp, #-8]
  12e968:	ebffe964 	bl	128f00 <ethernet_output>
  12e96c:	e1a03000 	mov	r3, r0
}
  12e970:	e1a00003 	mov	r0, r3
  12e974:	e24bd004 	sub	sp, fp, #4
  12e978:	e8bd8800 	pop	{fp, pc}

0012e97c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
  12e97c:	e92d4800 	push	{fp, lr}
  12e980:	e28db004 	add	fp, sp, #4
  12e984:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e988:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e98c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12e990:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
  12e994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e998:	e50b300c 	str	r3, [fp, #-12]

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12e99c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e9a0:	e3530000 	cmp	r3, #0
  12e9a4:	1a000006 	bne	12e9c4 <etharp_output+0x48>
  12e9a8:	e30903a0 	movw	r0, #37792	; 0x93a0
  12e9ac:	e3400014 	movt	r0, #20
  12e9b0:	ebff51d7 	bl	103114 <rt_kprintf>
  12e9b4:	e300131b 	movw	r1, #795	; 0x31b
  12e9b8:	e309025c 	movw	r0, #37468	; 0x925c
  12e9bc:	e3400014 	movt	r0, #20
  12e9c0:	ebff71ca 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("q != NULL", q != NULL);
  12e9c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e9c8:	e3530000 	cmp	r3, #0
  12e9cc:	1a000006 	bne	12e9ec <etharp_output+0x70>
  12e9d0:	e3090250 	movw	r0, #37456	; 0x9250
  12e9d4:	e3400014 	movt	r0, #20
  12e9d8:	ebff51cd 	bl	103114 <rt_kprintf>
  12e9dc:	e3a01fc7 	mov	r1, #796	; 0x31c
  12e9e0:	e309025c 	movw	r0, #37468	; 0x925c
  12e9e4:	e3400014 	movt	r0, #20
  12e9e8:	ebff71c0 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12e9ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e9f0:	e3530000 	cmp	r3, #0
  12e9f4:	1a000006 	bne	12ea14 <etharp_output+0x98>
  12e9f8:	e3090390 	movw	r0, #37776	; 0x9390
  12e9fc:	e3400014 	movt	r0, #20
  12ea00:	ebff51c3 	bl	103114 <rt_kprintf>
  12ea04:	e300131d 	movw	r1, #797	; 0x31d
  12ea08:	e309025c 	movw	r0, #37468	; 0x925c
  12ea0c:	e3400014 	movt	r0, #20
  12ea10:	ebff71b6 	bl	10b0f0 <sys_arch_assert>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
  12ea14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea18:	e5933000 	ldr	r3, [r3]
  12ea1c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12ea20:	e1a00003 	mov	r0, r3
  12ea24:	eb000eba 	bl	132514 <ip4_addr_isbroadcast_u32>
  12ea28:	e1a03000 	mov	r3, r0
  12ea2c:	e3530000 	cmp	r3, #0
  12ea30:	0a000003 	beq	12ea44 <etharp_output+0xc8>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
  12ea34:	e3083b38 	movw	r3, #35640	; 0x8b38
  12ea38:	e3403014 	movt	r3, #20
  12ea3c:	e50b3008 	str	r3, [fp, #-8]
  12ea40:	ea000097 	b	12eca4 <etharp_output+0x328>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
  12ea44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea48:	e5933000 	ldr	r3, [r3]
  12ea4c:	e20330f0 	and	r3, r3, #240	; 0xf0
  12ea50:	e35300e0 	cmp	r3, #224	; 0xe0
  12ea54:	1a000016 	bne	12eab4 <etharp_output+0x138>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
  12ea58:	e3a03001 	mov	r3, #1
  12ea5c:	e54b3014 	strb	r3, [fp, #-20]	; 0xffffffec
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
  12ea60:	e3a03000 	mov	r3, #0
  12ea64:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
  12ea68:	e3a0305e 	mov	r3, #94	; 0x5e
  12ea6c:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  12ea70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea74:	e2833001 	add	r3, r3, #1
  12ea78:	e5d33000 	ldrb	r3, [r3]
  12ea7c:	e203307f 	and	r3, r3, #127	; 0x7f
  12ea80:	e6ef3073 	uxtb	r3, r3
  12ea84:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  12ea88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea8c:	e2833002 	add	r3, r3, #2
  12ea90:	e5d33000 	ldrb	r3, [r3]
  12ea94:	e54b3010 	strb	r3, [fp, #-16]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  12ea98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea9c:	e2833003 	add	r3, r3, #3
  12eaa0:	e5d33000 	ldrb	r3, [r3]
  12eaa4:	e54b300f 	strb	r3, [fp, #-15]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  12eaa8:	e24b3014 	sub	r3, fp, #20
  12eaac:	e50b3008 	str	r3, [fp, #-8]
  12eab0:	ea00007b 	b	12eca4 <etharp_output+0x328>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12eab4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12eab8:	e5932000 	ldr	r2, [r3]
  12eabc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eac0:	e2833004 	add	r3, r3, #4
  12eac4:	e5933000 	ldr	r3, [r3]
  12eac8:	e0222003 	eor	r2, r2, r3
  12eacc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ead0:	e2833008 	add	r3, r3, #8
  12ead4:	e5933000 	ldr	r3, [r3]
  12ead8:	e0033002 	and	r3, r3, r2
  12eadc:	e3530000 	cmp	r3, #0
  12eae0:	0a000010 	beq	12eb28 <etharp_output+0x1ac>
        !ip4_addr_islinklocal(ipaddr)) {
  12eae4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12eae8:	e5933000 	ldr	r3, [r3]
  12eaec:	e6ff3073 	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12eaf0:	e30f2ea9 	movw	r2, #65193	; 0xfea9
  12eaf4:	e1530002 	cmp	r3, r2
  12eaf8:	0a00000a 	beq	12eb28 <etharp_output+0x1ac>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
  12eafc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eb00:	e283300c 	add	r3, r3, #12
  12eb04:	e5933000 	ldr	r3, [r3]
  12eb08:	e3530000 	cmp	r3, #0
  12eb0c:	0a000003 	beq	12eb20 <etharp_output+0x1a4>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
  12eb10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eb14:	e283300c 	add	r3, r3, #12
  12eb18:	e50b300c 	str	r3, [fp, #-12]
  12eb1c:	ea000001 	b	12eb28 <etharp_output+0x1ac>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
  12eb20:	e3e03003 	mvn	r3, #3
  12eb24:	ea000067 	b	12ecc8 <etharp_output+0x34c>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12eb28:	e30e3bd4 	movw	r3, #60372	; 0xebd4
  12eb2c:	e3403014 	movt	r3, #20
  12eb30:	e5d33000 	ldrb	r3, [r3]
  12eb34:	e1a01003 	mov	r1, r3
  12eb38:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12eb3c:	e3403014 	movt	r3, #20
  12eb40:	e3a02018 	mov	r2, #24
  12eb44:	e0020192 	mul	r2, r2, r1
  12eb48:	e0833002 	add	r3, r3, r2
  12eb4c:	e2833014 	add	r3, r3, #20
  12eb50:	e5d33000 	ldrb	r3, [r3]
  12eb54:	e3530001 	cmp	r3, #1
  12eb58:	9a00001f 	bls	12ebdc <etharp_output+0x260>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  12eb5c:	e51b300c 	ldr	r3, [fp, #-12]
  12eb60:	e5932000 	ldr	r2, [r3]
  12eb64:	e30e3bd4 	movw	r3, #60372	; 0xebd4
  12eb68:	e3403014 	movt	r3, #20
  12eb6c:	e5d33000 	ldrb	r3, [r3]
  12eb70:	e1a00003 	mov	r0, r3
  12eb74:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12eb78:	e3403014 	movt	r3, #20
  12eb7c:	e3a01018 	mov	r1, #24
  12eb80:	e0010091 	mul	r1, r1, r0
  12eb84:	e0833001 	add	r3, r3, r1
  12eb88:	e2833004 	add	r3, r3, #4
  12eb8c:	e5933000 	ldr	r3, [r3]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12eb90:	e1520003 	cmp	r2, r3
  12eb94:	1a000010 	bne	12ebdc <etharp_output+0x260>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
  12eb98:	e30e3a14 	movw	r3, #59924	; 0xea14
  12eb9c:	e3403056 	movt	r3, #86	; 0x56
  12eba0:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  12eba4:	e2833001 	add	r3, r3, #1
  12eba8:	e6ff2073 	uxth	r2, r3
  12ebac:	e30e3a14 	movw	r3, #59924	; 0xea14
  12ebb0:	e3403056 	movt	r3, #86	; 0x56
  12ebb4:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  12ebb8:	e30e3bd4 	movw	r3, #60372	; 0xebd4
  12ebbc:	e3403014 	movt	r3, #20
  12ebc0:	e5d33000 	ldrb	r3, [r3]
  12ebc4:	e1a02003 	mov	r2, r3
  12ebc8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12ebcc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ebd0:	ebfffee8 	bl	12e778 <etharp_output_to_arp_index>
  12ebd4:	e1a03000 	mov	r3, r0
  12ebd8:	ea00003a 	b	12ecc8 <etharp_output+0x34c>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12ebdc:	e3a03000 	mov	r3, #0
  12ebe0:	e54b300d 	strb	r3, [fp, #-13]
  12ebe4:	ea000025 	b	12ec80 <etharp_output+0x304>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12ebe8:	e15b20dd 	ldrsb	r2, [fp, #-13]
  12ebec:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ebf0:	e3403014 	movt	r3, #20
  12ebf4:	e3a01018 	mov	r1, #24
  12ebf8:	e0020291 	mul	r2, r1, r2
  12ebfc:	e0833002 	add	r3, r3, r2
  12ec00:	e2833014 	add	r3, r3, #20
  12ec04:	e5d33000 	ldrb	r3, [r3]
  12ec08:	e3530001 	cmp	r3, #1
  12ec0c:	9a000016 	bls	12ec6c <etharp_output+0x2f0>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
  12ec10:	e51b300c 	ldr	r3, [fp, #-12]
  12ec14:	e5932000 	ldr	r2, [r3]
  12ec18:	e15b10dd 	ldrsb	r1, [fp, #-13]
  12ec1c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ec20:	e3403014 	movt	r3, #20
  12ec24:	e3a00018 	mov	r0, #24
  12ec28:	e0010190 	mul	r1, r0, r1
  12ec2c:	e0833001 	add	r3, r3, r1
  12ec30:	e2833004 	add	r3, r3, #4
  12ec34:	e5933000 	ldr	r3, [r3]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12ec38:	e1520003 	cmp	r2, r3
  12ec3c:	1a00000a 	bne	12ec6c <etharp_output+0x2f0>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
  12ec40:	e55b200d 	ldrb	r2, [fp, #-13]
  12ec44:	e30e3bd4 	movw	r3, #60372	; 0xebd4
  12ec48:	e3403014 	movt	r3, #20
  12ec4c:	e5c32000 	strb	r2, [r3]
        return etharp_output_to_arp_index(netif, q, i);
  12ec50:	e55b300d 	ldrb	r3, [fp, #-13]
  12ec54:	e1a02003 	mov	r2, r3
  12ec58:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12ec5c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ec60:	ebfffec4 	bl	12e778 <etharp_output_to_arp_index>
  12ec64:	e1a03000 	mov	r3, r0
  12ec68:	ea000016 	b	12ecc8 <etharp_output+0x34c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12ec6c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12ec70:	e6ef3073 	uxtb	r3, r3
  12ec74:	e2833001 	add	r3, r3, #1
  12ec78:	e6ef3073 	uxtb	r3, r3
  12ec7c:	e54b300d 	strb	r3, [fp, #-13]
  12ec80:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12ec84:	e3530009 	cmp	r3, #9
  12ec88:	daffffd6 	ble	12ebe8 <etharp_output+0x26c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
  12ec8c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12ec90:	e51b100c 	ldr	r1, [fp, #-12]
  12ec94:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ec98:	eb00000d 	bl	12ecd4 <etharp_query>
  12ec9c:	e1a03000 	mov	r3, r0
  12eca0:	ea000008 	b	12ecc8 <etharp_output+0x34c>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
  12eca4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eca8:	e283203b 	add	r2, r3, #59	; 0x3b
  12ecac:	e3a03b02 	mov	r3, #2048	; 0x800
  12ecb0:	e58d3000 	str	r3, [sp]
  12ecb4:	e51b3008 	ldr	r3, [fp, #-8]
  12ecb8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12ecbc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ecc0:	ebffe88e 	bl	128f00 <ethernet_output>
  12ecc4:	e1a03000 	mov	r3, r0
}
  12ecc8:	e1a00003 	mov	r0, r3
  12eccc:	e24bd004 	sub	sp, fp, #4
  12ecd0:	e8bd8800 	pop	{fp, pc}

0012ecd4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
  12ecd4:	e92d4800 	push	{fp, lr}
  12ecd8:	e28db004 	add	fp, sp, #4
  12ecdc:	e24dd040 	sub	sp, sp, #64	; 0x40
  12ece0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  12ece4:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  12ece8:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  12ecec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12ecf0:	e283303b 	add	r3, r3, #59	; 0x3b
  12ecf4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err_t result = ERR_MEM;
  12ecf8:	e3e03000 	mvn	r3, #0
  12ecfc:	e54b3005 	strb	r3, [fp, #-5]
  int is_new_entry = 0;
  12ed00:	e3a03000 	mov	r3, #0
  12ed04:	e50b300c 	str	r3, [fp, #-12]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12ed08:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ed0c:	e5933000 	ldr	r3, [r3]
  12ed10:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  12ed14:	e1a00003 	mov	r0, r3
  12ed18:	eb000dfd 	bl	132514 <ip4_addr_isbroadcast_u32>
  12ed1c:	e1a03000 	mov	r3, r0
  12ed20:	e3530000 	cmp	r3, #0
  12ed24:	1a00000b 	bne	12ed58 <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12ed28:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ed2c:	e5933000 	ldr	r3, [r3]
  12ed30:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12ed34:	e35300e0 	cmp	r3, #224	; 0xe0
  12ed38:	0a000006 	beq	12ed58 <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12ed3c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ed40:	e3530000 	cmp	r3, #0
  12ed44:	0a000003 	beq	12ed58 <etharp_query+0x84>
      ip4_addr_isany(ipaddr)) {
  12ed48:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ed4c:	e5933000 	ldr	r3, [r3]
  12ed50:	e3530000 	cmp	r3, #0
  12ed54:	1a000001 	bne	12ed60 <etharp_query+0x8c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12ed58:	e3e0300f 	mvn	r3, #15
  12ed5c:	ea000144 	b	12f274 <etharp_query+0x5a0>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
  12ed60:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12ed64:	e3a01001 	mov	r1, #1
  12ed68:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  12ed6c:	ebfffb80 	bl	12db74 <etharp_find_entry>
  12ed70:	e1a03000 	mov	r3, r0
  12ed74:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  /* could not find or create entry? */
  if (i < 0) {
  12ed78:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12ed7c:	e3530000 	cmp	r3, #0
  12ed80:	aa00000c 	bge	12edb8 <etharp_query+0xe4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
  12ed84:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ed88:	e3530000 	cmp	r3, #0
  12ed8c:	0a000007 	beq	12edb0 <etharp_query+0xdc>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
  12ed90:	e30e3a14 	movw	r3, #59924	; 0xea14
  12ed94:	e3403056 	movt	r3, #86	; 0x56
  12ed98:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12ed9c:	e2833001 	add	r3, r3, #1
  12eda0:	e6ff2073 	uxth	r2, r3
  12eda4:	e30e3a14 	movw	r3, #59924	; 0xea14
  12eda8:	e3403056 	movt	r3, #86	; 0x56
  12edac:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i;
  12edb0:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12edb4:	ea00012e 	b	12f274 <etharp_query+0x5a0>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  12edb8:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12edbc:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12edc0:	e3403014 	movt	r3, #20
  12edc4:	e3a01018 	mov	r1, #24
  12edc8:	e0020291 	mul	r2, r1, r2
  12edcc:	e0833002 	add	r3, r3, r2
  12edd0:	e2833014 	add	r3, r3, #20
  12edd4:	e5d33000 	ldrb	r3, [r3]
  12edd8:	e3530000 	cmp	r3, #0
  12eddc:	1a000013 	bne	12ee30 <etharp_query+0x15c>
    is_new_entry = 1;
  12ede0:	e3a03001 	mov	r3, #1
  12ede4:	e50b300c 	str	r3, [fp, #-12]
    arp_table[i].state = ETHARP_STATE_PENDING;
  12ede8:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12edec:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12edf0:	e3403014 	movt	r3, #20
  12edf4:	e3a01018 	mov	r1, #24
  12edf8:	e0020291 	mul	r2, r1, r2
  12edfc:	e0833002 	add	r3, r3, r2
  12ee00:	e2833014 	add	r3, r3, #20
  12ee04:	e3a02001 	mov	r2, #1
  12ee08:	e5c32000 	strb	r2, [r3]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
  12ee0c:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ee10:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ee14:	e3403014 	movt	r3, #20
  12ee18:	e3a01018 	mov	r1, #24
  12ee1c:	e0020291 	mul	r2, r1, r2
  12ee20:	e0833002 	add	r3, r3, r2
  12ee24:	e2833008 	add	r3, r3, #8
  12ee28:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12ee2c:	e5832000 	str	r2, [r3]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  12ee30:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ee34:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ee38:	e3403014 	movt	r3, #20
  12ee3c:	e3a01018 	mov	r1, #24
  12ee40:	e0020291 	mul	r2, r1, r2
  12ee44:	e0833002 	add	r3, r3, r2
  12ee48:	e2833014 	add	r3, r3, #20
  12ee4c:	e5d33000 	ldrb	r3, [r3]
  12ee50:	e3530001 	cmp	r3, #1
  12ee54:	0a000010 	beq	12ee9c <etharp_query+0x1c8>
  12ee58:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ee5c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ee60:	e3403014 	movt	r3, #20
  12ee64:	e3a01018 	mov	r1, #24
  12ee68:	e0020291 	mul	r2, r1, r2
  12ee6c:	e0833002 	add	r3, r3, r2
  12ee70:	e2833014 	add	r3, r3, #20
  12ee74:	e5d33000 	ldrb	r3, [r3]
  12ee78:	e3530001 	cmp	r3, #1
  12ee7c:	8a000006 	bhi	12ee9c <etharp_query+0x1c8>
  12ee80:	e30903f0 	movw	r0, #37872	; 0x93f0
  12ee84:	e3400014 	movt	r0, #20
  12ee88:	ebff50a1 	bl	103114 <rt_kprintf>
  12ee8c:	e30013c9 	movw	r1, #969	; 0x3c9
  12ee90:	e309025c 	movw	r0, #37468	; 0x925c
  12ee94:	e3400014 	movt	r0, #20
  12ee98:	ebff7094 	bl	10b0f0 <sys_arch_assert>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
  12ee9c:	e51b300c 	ldr	r3, [fp, #-12]
  12eea0:	e3530000 	cmp	r3, #0
  12eea4:	1a000002 	bne	12eeb4 <etharp_query+0x1e0>
  12eea8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12eeac:	e3530000 	cmp	r3, #0
  12eeb0:	1a000009 	bne	12eedc <etharp_query+0x208>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  12eeb4:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12eeb8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12eebc:	eb00018f 	bl	12f500 <etharp_request>
  12eec0:	e1a03000 	mov	r3, r0
  12eec4:	e54b3005 	strb	r3, [fp, #-5]
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
  12eec8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12eecc:	e3530000 	cmp	r3, #0
  12eed0:	1a000001 	bne	12eedc <etharp_query+0x208>
      return result;
  12eed4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12eed8:	ea0000e5 	b	12f274 <etharp_query+0x5a0>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  12eedc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12eee0:	e3530000 	cmp	r3, #0
  12eee4:	1a000006 	bne	12ef04 <etharp_query+0x230>
  12eee8:	e3090250 	movw	r0, #37456	; 0x9250
  12eeec:	e3400014 	movt	r0, #20
  12eef0:	ebff5087 	bl	103114 <rt_kprintf>
  12eef4:	e30013db 	movw	r1, #987	; 0x3db
  12eef8:	e309025c 	movw	r0, #37468	; 0x925c
  12eefc:	e3400014 	movt	r0, #20
  12ef00:	ebff707a 	bl	10b0f0 <sys_arch_assert>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  12ef04:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ef08:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ef0c:	e3403014 	movt	r3, #20
  12ef10:	e3a01018 	mov	r1, #24
  12ef14:	e0020291 	mul	r2, r1, r2
  12ef18:	e0833002 	add	r3, r3, r2
  12ef1c:	e2833014 	add	r3, r3, #20
  12ef20:	e5d33000 	ldrb	r3, [r3]
  12ef24:	e3530001 	cmp	r3, #1
  12ef28:	9a000015 	bls	12ef84 <etharp_query+0x2b0>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
  12ef2c:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12ef30:	e30e3bd4 	movw	r3, #60372	; 0xebd4
  12ef34:	e3403014 	movt	r3, #20
  12ef38:	e5c32000 	strb	r2, [r3]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
  12ef3c:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12ef40:	e3a02018 	mov	r2, #24
  12ef44:	e0030392 	mul	r3, r2, r3
  12ef48:	e2832008 	add	r2, r3, #8
  12ef4c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ef50:	e3403014 	movt	r3, #20
  12ef54:	e0823003 	add	r3, r2, r3
  12ef58:	e2832004 	add	r2, r3, #4
  12ef5c:	e3a03b02 	mov	r3, #2048	; 0x800
  12ef60:	e58d3000 	str	r3, [sp]
  12ef64:	e1a03002 	mov	r3, r2
  12ef68:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12ef6c:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12ef70:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12ef74:	ebffe7e1 	bl	128f00 <ethernet_output>
  12ef78:	e1a03000 	mov	r3, r0
  12ef7c:	e54b3005 	strb	r3, [fp, #-5]
  12ef80:	ea0000ba 	b	12f270 <etharp_query+0x59c>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12ef84:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ef88:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ef8c:	e3403014 	movt	r3, #20
  12ef90:	e3a01018 	mov	r1, #24
  12ef94:	e0020291 	mul	r2, r1, r2
  12ef98:	e0833002 	add	r3, r3, r2
  12ef9c:	e2833014 	add	r3, r3, #20
  12efa0:	e5d33000 	ldrb	r3, [r3]
  12efa4:	e3530001 	cmp	r3, #1
  12efa8:	1a0000b0 	bne	12f270 <etharp_query+0x59c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
  12efac:	e3a03000 	mov	r3, #0
  12efb0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
  12efb4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12efb8:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12efbc:	ea00001a 	b	12f02c <etharp_query+0x358>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
  12efc0:	e51b3010 	ldr	r3, [fp, #-16]
  12efc4:	e1d320ba 	ldrh	r2, [r3, #10]
  12efc8:	e51b3010 	ldr	r3, [fp, #-16]
  12efcc:	e1d330b8 	ldrh	r3, [r3, #8]
  12efd0:	e1520003 	cmp	r2, r3
  12efd4:	1a00000a 	bne	12f004 <etharp_query+0x330>
  12efd8:	e51b3010 	ldr	r3, [fp, #-16]
  12efdc:	e5933000 	ldr	r3, [r3]
  12efe0:	e3530000 	cmp	r3, #0
  12efe4:	0a000006 	beq	12f004 <etharp_query+0x330>
  12efe8:	e3090418 	movw	r0, #37912	; 0x9418
  12efec:	e3400014 	movt	r0, #20
  12eff0:	ebff5047 	bl	103114 <rt_kprintf>
  12eff4:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  12eff8:	e309025c 	movw	r0, #37468	; 0x925c
  12effc:	e3400014 	movt	r0, #20
  12f000:	ebff703a 	bl	10b0f0 <sys_arch_assert>
      if (p->type != PBUF_ROM) {
  12f004:	e51b3010 	ldr	r3, [fp, #-16]
  12f008:	e5d3300c 	ldrb	r3, [r3, #12]
  12f00c:	e3530001 	cmp	r3, #1
  12f010:	0a000002 	beq	12f020 <etharp_query+0x34c>
        copy_needed = 1;
  12f014:	e3a03001 	mov	r3, #1
  12f018:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        break;
  12f01c:	ea000005 	b	12f038 <etharp_query+0x364>
      }
      p = p->next;
  12f020:	e51b3010 	ldr	r3, [fp, #-16]
  12f024:	e5933000 	ldr	r3, [r3]
  12f028:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12f02c:	e51b3010 	ldr	r3, [fp, #-16]
  12f030:	e3530000 	cmp	r3, #0
  12f034:	1affffe1 	bne	12efc0 <etharp_query+0x2ec>
    }
    if (copy_needed) {
  12f038:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f03c:	e3530000 	cmp	r3, #0
  12f040:	0a000014 	beq	12f098 <etharp_query+0x3c4>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  12f044:	e51b3010 	ldr	r3, [fp, #-16]
  12f048:	e1d330b8 	ldrh	r3, [r3, #8]
  12f04c:	e3a02000 	mov	r2, #0
  12f050:	e1a01003 	mov	r1, r3
  12f054:	e3a00002 	mov	r0, #2
  12f058:	ebffac90 	bl	11a2a0 <pbuf_alloc>
  12f05c:	e50b0010 	str	r0, [fp, #-16]
      if (p != NULL) {
  12f060:	e51b3010 	ldr	r3, [fp, #-16]
  12f064:	e3530000 	cmp	r3, #0
  12f068:	0a00000e 	beq	12f0a8 <etharp_query+0x3d4>
        if (pbuf_copy(p, q) != ERR_OK) {
  12f06c:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12f070:	e51b0010 	ldr	r0, [fp, #-16]
  12f074:	ebffb0e5 	bl	11b410 <pbuf_copy>
  12f078:	e1a03000 	mov	r3, r0
  12f07c:	e3530000 	cmp	r3, #0
  12f080:	0a000008 	beq	12f0a8 <etharp_query+0x3d4>
          pbuf_free(p);
  12f084:	e51b0010 	ldr	r0, [fp, #-16]
  12f088:	ebffaf8b 	bl	11aebc <pbuf_free>
          p = NULL;
  12f08c:	e3a03000 	mov	r3, #0
  12f090:	e50b3010 	str	r3, [fp, #-16]
  12f094:	ea000003 	b	12f0a8 <etharp_query+0x3d4>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
  12f098:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12f09c:	e50b3010 	str	r3, [fp, #-16]
      pbuf_ref(p);
  12f0a0:	e51b0010 	ldr	r0, [fp, #-16]
  12f0a4:	ebffb01e 	bl	11b124 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
  12f0a8:	e51b3010 	ldr	r3, [fp, #-16]
  12f0ac:	e3530000 	cmp	r3, #0
  12f0b0:	0a000064 	beq	12f248 <etharp_query+0x574>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
  12f0b4:	e3002407 	movw	r2, #1031	; 0x407
  12f0b8:	e309125c 	movw	r1, #37468	; 0x925c
  12f0bc:	e3401014 	movt	r1, #20
  12f0c0:	e3a0000b 	mov	r0, #11
  12f0c4:	ebffa806 	bl	1190e4 <memp_malloc_fn>
  12f0c8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
      if (new_entry != NULL) {
  12f0cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f0d0:	e3530000 	cmp	r3, #0
  12f0d4:	0a000056 	beq	12f234 <etharp_query+0x560>
        unsigned int qlen = 0;
  12f0d8:	e3a03000 	mov	r3, #0
  12f0dc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        new_entry->next = 0;
  12f0e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f0e4:	e3a02000 	mov	r2, #0
  12f0e8:	e5832000 	str	r2, [r3]
        new_entry->p = p;
  12f0ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f0f0:	e51b2010 	ldr	r2, [fp, #-16]
  12f0f4:	e5832004 	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
  12f0f8:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f0fc:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12f100:	e3403014 	movt	r3, #20
  12f104:	e3a01018 	mov	r1, #24
  12f108:	e0020291 	mul	r2, r1, r2
  12f10c:	e0833002 	add	r3, r3, r2
  12f110:	e5933000 	ldr	r3, [r3]
  12f114:	e3530000 	cmp	r3, #0
  12f118:	0a000019 	beq	12f184 <etharp_query+0x4b0>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
  12f11c:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f120:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12f124:	e3403014 	movt	r3, #20
  12f128:	e3a01018 	mov	r1, #24
  12f12c:	e0020291 	mul	r2, r1, r2
  12f130:	e0833002 	add	r3, r3, r2
  12f134:	e5933000 	ldr	r3, [r3]
  12f138:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          qlen++;
  12f13c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f140:	e2833001 	add	r3, r3, #1
  12f144:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12f148:	ea000005 	b	12f164 <etharp_query+0x490>
            r = r->next;
  12f14c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f150:	e5933000 	ldr	r3, [r3]
  12f154:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            qlen++;
  12f158:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f15c:	e2833001 	add	r3, r3, #1
  12f160:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12f164:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f168:	e5933000 	ldr	r3, [r3]
  12f16c:	e3530000 	cmp	r3, #0
  12f170:	1afffff5 	bne	12f14c <etharp_query+0x478>
          }
          r->next = new_entry;
  12f174:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f178:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12f17c:	e5832000 	str	r2, [r3]
  12f180:	ea000007 	b	12f1a4 <etharp_query+0x4d0>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
  12f184:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f188:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12f18c:	e3403014 	movt	r3, #20
  12f190:	e3a01018 	mov	r1, #24
  12f194:	e0020291 	mul	r2, r1, r2
  12f198:	e0833002 	add	r3, r3, r2
  12f19c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12f1a0:	e5832000 	str	r2, [r3]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
  12f1a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f1a8:	e3530002 	cmp	r3, #2
  12f1ac:	9a00001d 	bls	12f228 <etharp_query+0x554>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
  12f1b0:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f1b4:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12f1b8:	e3403014 	movt	r3, #20
  12f1bc:	e3a01018 	mov	r1, #24
  12f1c0:	e0020291 	mul	r2, r1, r2
  12f1c4:	e0833002 	add	r3, r3, r2
  12f1c8:	e5933000 	ldr	r3, [r3]
  12f1cc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
          arp_table[i].q = arp_table[i].q->next;
  12f1d0:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f1d4:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12f1d8:	e3403014 	movt	r3, #20
  12f1dc:	e3a01018 	mov	r1, #24
  12f1e0:	e0020291 	mul	r2, r1, r2
  12f1e4:	e0833002 	add	r3, r3, r2
  12f1e8:	e5933000 	ldr	r3, [r3]
  12f1ec:	e15b12d1 	ldrsb	r1, [fp, #-33]	; 0xffffffdf
  12f1f0:	e5932000 	ldr	r2, [r3]
  12f1f4:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12f1f8:	e3403014 	movt	r3, #20
  12f1fc:	e3a00018 	mov	r0, #24
  12f200:	e0010190 	mul	r1, r0, r1
  12f204:	e0833001 	add	r3, r3, r1
  12f208:	e5832000 	str	r2, [r3]
          pbuf_free(old->p);
  12f20c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12f210:	e5933004 	ldr	r3, [r3, #4]
  12f214:	e1a00003 	mov	r0, r3
  12f218:	ebffaf27 	bl	11aebc <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
  12f21c:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  12f220:	e3a0000b 	mov	r0, #11
  12f224:	ebffa816 	bl	119284 <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
  12f228:	e3a03000 	mov	r3, #0
  12f22c:	e54b3005 	strb	r3, [fp, #-5]
  12f230:	ea00000e 	b	12f270 <etharp_query+0x59c>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
  12f234:	e51b0010 	ldr	r0, [fp, #-16]
  12f238:	ebffaf1f 	bl	11aebc <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
  12f23c:	e3e03000 	mvn	r3, #0
  12f240:	e54b3005 	strb	r3, [fp, #-5]
  12f244:	ea000009 	b	12f270 <etharp_query+0x59c>
      arp_table[i].q = p;
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
  12f248:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f24c:	e3403056 	movt	r3, #86	; 0x56
  12f250:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12f254:	e2833001 	add	r3, r3, #1
  12f258:	e6ff2073 	uxth	r2, r3
  12f25c:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f260:	e3403056 	movt	r3, #86	; 0x56
  12f264:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
  12f268:	e3e03000 	mvn	r3, #0
  12f26c:	e54b3005 	strb	r3, [fp, #-5]
    }
  }
  return result;
  12f270:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12f274:	e1a00003 	mov	r0, r3
  12f278:	e24bd004 	sub	sp, fp, #4
  12f27c:	e8bd8800 	pop	{fp, pc}

0012f280 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
  12f280:	e92d4800 	push	{fp, lr}
  12f284:	e28db004 	add	fp, sp, #4
  12f288:	e24dd028 	sub	sp, sp, #40	; 0x28
  12f28c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12f290:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12f294:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12f298:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  err_t result = ERR_OK;
  12f29c:	e3a03000 	mov	r3, #0
  12f2a0:	e54b3005 	strb	r3, [fp, #-5]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12f2a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f2a8:	e3530000 	cmp	r3, #0
  12f2ac:	1a000006 	bne	12f2cc <etharp_raw+0x4c>
  12f2b0:	e30903a0 	movw	r0, #37792	; 0x93a0
  12f2b4:	e3400014 	movt	r0, #20
  12f2b8:	ebff4f95 	bl	103114 <rt_kprintf>
  12f2bc:	e3001458 	movw	r1, #1112	; 0x458
  12f2c0:	e309025c 	movw	r0, #37468	; 0x925c
  12f2c4:	e3400014 	movt	r0, #20
  12f2c8:	ebff6f88 	bl	10b0f0 <sys_arch_assert>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
  12f2cc:	e3a02000 	mov	r2, #0
  12f2d0:	e3a0101c 	mov	r1, #28
  12f2d4:	e3a00002 	mov	r0, #2
  12f2d8:	ebffabf0 	bl	11a2a0 <pbuf_alloc>
  12f2dc:	e50b000c 	str	r0, [fp, #-12]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
  12f2e0:	e51b300c 	ldr	r3, [fp, #-12]
  12f2e4:	e3530000 	cmp	r3, #0
  12f2e8:	1a000009 	bne	12f314 <etharp_raw+0x94>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
  12f2ec:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f2f0:	e3403056 	movt	r3, #86	; 0x56
  12f2f4:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12f2f8:	e2833001 	add	r3, r3, #1
  12f2fc:	e6ff2073 	uxth	r2, r3
  12f300:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f304:	e3403056 	movt	r3, #86	; 0x56
  12f308:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
  12f30c:	e3e03000 	mvn	r3, #0
  12f310:	ea00005b 	b	12f484 <etharp_raw+0x204>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
  12f314:	e51b300c 	ldr	r3, [fp, #-12]
  12f318:	e1d330ba 	ldrh	r3, [r3, #10]
  12f31c:	e353001b 	cmp	r3, #27
  12f320:	8a000006 	bhi	12f340 <etharp_raw+0xc0>
  12f324:	e3090434 	movw	r0, #37940	; 0x9434
  12f328:	e3400014 	movt	r0, #20
  12f32c:	ebff4f78 	bl	103114 <rt_kprintf>
  12f330:	e3001464 	movw	r1, #1124	; 0x464
  12f334:	e309025c 	movw	r0, #37468	; 0x925c
  12f338:	e3400014 	movt	r0, #20
  12f33c:	ebff6f6b 	bl	10b0f0 <sys_arch_assert>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  12f340:	e51b300c 	ldr	r3, [fp, #-12]
  12f344:	e5933004 	ldr	r3, [r3, #4]
  12f348:	e50b3010 	str	r3, [fp, #-16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
  12f34c:	e1db31b0 	ldrh	r3, [fp, #16]
  12f350:	e1a00003 	mov	r0, r3
  12f354:	ebff9ca1 	bl	1165e0 <lwip_htons>
  12f358:	e1a03000 	mov	r3, r0
  12f35c:	e1a02003 	mov	r2, r3
  12f360:	e51b3010 	ldr	r3, [fp, #-16]
  12f364:	e1c320b6 	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
  12f368:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f36c:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12f370:	e3530006 	cmp	r3, #6
  12f374:	0a000006 	beq	12f394 <etharp_raw+0x114>
  12f378:	e3090468 	movw	r0, #37992	; 0x9468
  12f37c:	e3400014 	movt	r0, #20
  12f380:	ebff4f63 	bl	103114 <rt_kprintf>
  12f384:	e300146b 	movw	r1, #1131	; 0x46b
  12f388:	e309025c 	movw	r0, #37468	; 0x925c
  12f38c:	e3400014 	movt	r0, #20
  12f390:	ebff6f56 	bl	10b0f0 <sys_arch_assert>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  12f394:	e51b3010 	ldr	r3, [fp, #-16]
  12f398:	e2833008 	add	r3, r3, #8
  12f39c:	e3a02006 	mov	r2, #6
  12f3a0:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  12f3a4:	e1a00003 	mov	r0, r3
  12f3a8:	eb00467b 	bl	140d9c <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  12f3ac:	e51b3010 	ldr	r3, [fp, #-16]
  12f3b0:	e2833012 	add	r3, r3, #18
  12f3b4:	e3a02006 	mov	r2, #6
  12f3b8:	e59b1008 	ldr	r1, [fp, #8]
  12f3bc:	e1a00003 	mov	r0, r3
  12f3c0:	eb004675 	bl	140d9c <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  12f3c4:	e51b3010 	ldr	r3, [fp, #-16]
  12f3c8:	e283300e 	add	r3, r3, #14
  12f3cc:	e59b2004 	ldr	r2, [fp, #4]
  12f3d0:	e5922000 	ldr	r2, [r2]
  12f3d4:	e5832000 	str	r2, [r3]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  12f3d8:	e51b3010 	ldr	r3, [fp, #-16]
  12f3dc:	e2833018 	add	r3, r3, #24
  12f3e0:	e59b200c 	ldr	r2, [fp, #12]
  12f3e4:	e5922000 	ldr	r2, [r2]
  12f3e8:	e5832000 	str	r2, [r3]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  12f3ec:	e51b3010 	ldr	r3, [fp, #-16]
  12f3f0:	e3a02000 	mov	r2, #0
  12f3f4:	e5c32000 	strb	r2, [r3]
  12f3f8:	e3a02000 	mov	r2, #0
  12f3fc:	e3822001 	orr	r2, r2, #1
  12f400:	e5c32001 	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  12f404:	e51b3010 	ldr	r3, [fp, #-16]
  12f408:	e3a02000 	mov	r2, #0
  12f40c:	e3822008 	orr	r2, r2, #8
  12f410:	e5c32002 	strb	r2, [r3, #2]
  12f414:	e3a02000 	mov	r2, #0
  12f418:	e5c32003 	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
  12f41c:	e51b3010 	ldr	r3, [fp, #-16]
  12f420:	e3a02006 	mov	r2, #6
  12f424:	e5c32004 	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
  12f428:	e51b3010 	ldr	r3, [fp, #-16]
  12f42c:	e3a02004 	mov	r2, #4
  12f430:	e5c32005 	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
  12f434:	e3003806 	movw	r3, #2054	; 0x806
  12f438:	e58d3000 	str	r3, [sp]
  12f43c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12f440:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12f444:	e51b100c 	ldr	r1, [fp, #-12]
  12f448:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12f44c:	ebffe6ab 	bl	128f00 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  12f450:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f454:	e3403056 	movt	r3, #86	; 0x56
  12f458:	e1d331b8 	ldrh	r3, [r3, #24]
  12f45c:	e2833001 	add	r3, r3, #1
  12f460:	e6ff2073 	uxth	r2, r3
  12f464:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f468:	e3403056 	movt	r3, #86	; 0x56
  12f46c:	e1c321b8 	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
  12f470:	e51b000c 	ldr	r0, [fp, #-12]
  12f474:	ebffae90 	bl	11aebc <pbuf_free>
  p = NULL;
  12f478:	e3a03000 	mov	r3, #0
  12f47c:	e50b300c 	str	r3, [fp, #-12]
  /* could not allocate pbuf for ARP request */

  return result;
  12f480:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12f484:	e1a00003 	mov	r0, r3
  12f488:	e24bd004 	sub	sp, fp, #4
  12f48c:	e8bd8800 	pop	{fp, pc}

0012f490 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  12f490:	e92d4800 	push	{fp, lr}
  12f494:	e28db004 	add	fp, sp, #4
  12f498:	e24dd020 	sub	sp, sp, #32
  12f49c:	e50b0008 	str	r0, [fp, #-8]
  12f4a0:	e50b100c 	str	r1, [fp, #-12]
  12f4a4:	e50b2010 	str	r2, [fp, #-16]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f4a8:	e51b3008 	ldr	r3, [fp, #-8]
  12f4ac:	e283103b 	add	r1, r3, #59	; 0x3b
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
  12f4b0:	e51b3008 	ldr	r3, [fp, #-8]
  12f4b4:	e283003b 	add	r0, r3, #59	; 0x3b
  12f4b8:	e51b3008 	ldr	r3, [fp, #-8]
  12f4bc:	e2832004 	add	r2, r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f4c0:	e3a03001 	mov	r3, #1
  12f4c4:	e58d300c 	str	r3, [sp, #12]
  12f4c8:	e51b300c 	ldr	r3, [fp, #-12]
  12f4cc:	e58d3008 	str	r3, [sp, #8]
  12f4d0:	e3083b40 	movw	r3, #35648	; 0x8b40
  12f4d4:	e3403014 	movt	r3, #20
  12f4d8:	e58d3004 	str	r3, [sp, #4]
  12f4dc:	e58d2000 	str	r2, [sp]
  12f4e0:	e1a03000 	mov	r3, r0
  12f4e4:	e51b2010 	ldr	r2, [fp, #-16]
  12f4e8:	e51b0008 	ldr	r0, [fp, #-8]
  12f4ec:	ebffff63 	bl	12f280 <etharp_raw>
  12f4f0:	e1a03000 	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
  12f4f4:	e1a00003 	mov	r0, r3
  12f4f8:	e24bd004 	sub	sp, fp, #4
  12f4fc:	e8bd8800 	pop	{fp, pc}

0012f500 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
  12f500:	e92d4800 	push	{fp, lr}
  12f504:	e28db004 	add	fp, sp, #4
  12f508:	e24dd008 	sub	sp, sp, #8
  12f50c:	e50b0008 	str	r0, [fp, #-8]
  12f510:	e50b100c 	str	r1, [fp, #-12]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
  12f514:	e3082b38 	movw	r2, #35640	; 0x8b38
  12f518:	e3402014 	movt	r2, #20
  12f51c:	e51b100c 	ldr	r1, [fp, #-12]
  12f520:	e51b0008 	ldr	r0, [fp, #-8]
  12f524:	ebffffd9 	bl	12f490 <etharp_request_dst>
  12f528:	e1a03000 	mov	r3, r0
}
  12f52c:	e1a00003 	mov	r0, r3
  12f530:	e24bd004 	sub	sp, fp, #4
  12f534:	e8bd8800 	pop	{fp, pc}

0012f538 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
  12f538:	e92d4800 	push	{fp, lr}
  12f53c:	e28db004 	add	fp, sp, #4
  12f540:	e24dd038 	sub	sp, sp, #56	; 0x38
  12f544:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  12f548:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  12f54c:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f550:	e3403056 	movt	r3, #86	; 0x56
  12f554:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  12f558:	e2833001 	add	r3, r3, #1
  12f55c:	e6ff2073 	uxth	r2, r3
  12f560:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f564:	e3403056 	movt	r3, #86	; 0x56
  12f568:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);
  12f56c:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f570:	e3403056 	movt	r3, #86	; 0x56
  12f574:	e59331a0 	ldr	r3, [r3, #416]	; 0x1a0
  12f578:	e2832001 	add	r2, r3, #1
  12f57c:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f580:	e3403056 	movt	r3, #86	; 0x56
  12f584:	e58321a0 	str	r2, [r3, #416]	; 0x1a0

  iphdr_in = ip4_current_header();
  12f588:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  12f58c:	e3403014 	movt	r3, #20
  12f590:	e5933008 	ldr	r3, [r3, #8]
  12f594:	e50b3008 	str	r3, [fp, #-8]
  hlen = IPH_HL(iphdr_in) * 4;
  12f598:	e51b3008 	ldr	r3, [fp, #-8]
  12f59c:	e5d33000 	ldrb	r3, [r3]
  12f5a0:	e6ff3073 	uxth	r3, r3
  12f5a4:	e203300f 	and	r3, r3, #15
  12f5a8:	e6ff3073 	uxth	r3, r3
  12f5ac:	e1a03103 	lsl	r3, r3, #2
  12f5b0:	e14b30ba 	strh	r3, [fp, #-10]
  if (hlen < IP_HLEN) {
  12f5b4:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f5b8:	e3530013 	cmp	r3, #19
  12f5bc:	9a000182 	bls	12fbcc <icmp_input+0x694>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
  12f5c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f5c4:	e1d330ba 	ldrh	r3, [r3, #10]
  12f5c8:	e3530003 	cmp	r3, #3
  12f5cc:	9a000180 	bls	12fbd4 <icmp_input+0x69c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
  12f5d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f5d4:	e5933004 	ldr	r3, [r3, #4]
  12f5d8:	e5d33000 	ldrb	r3, [r3]
  12f5dc:	e54b300b 	strb	r3, [fp, #-11]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
  12f5e0:	e55b300b 	ldrb	r3, [fp, #-11]
  12f5e4:	e3530000 	cmp	r3, #0
  12f5e8:	0a000002 	beq	12f5f8 <icmp_input+0xc0>
  12f5ec:	e3530008 	cmp	r3, #8
  12f5f0:	0a000008 	beq	12f618 <icmp_input+0xe0>
  12f5f4:	ea0000fd 	b	12f9f0 <icmp_input+0x4b8>
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
  12f5f8:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f5fc:	e3403056 	movt	r3, #86	; 0x56
  12f600:	e59331c0 	ldr	r3, [r3, #448]	; 0x1c0
  12f604:	e2832001 	add	r2, r3, #1
  12f608:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f60c:	e3403056 	movt	r3, #86	; 0x56
  12f610:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    break;
  12f614:	ea000169 	b	12fbc0 <icmp_input+0x688>
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
  12f618:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f61c:	e3403056 	movt	r3, #86	; 0x56
  12f620:	e59331bc 	ldr	r3, [r3, #444]	; 0x1bc
  12f624:	e2832001 	add	r2, r3, #1
  12f628:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f62c:	e3403056 	movt	r3, #86	; 0x56
  12f630:	e58321bc 	str	r2, [r3, #444]	; 0x1bc
    src = ip4_current_dest_addr();
  12f634:	e59f3650 	ldr	r3, [pc, #1616]	; 12fc8c <icmp_input+0x754>
  12f638:	e50b3010 	str	r3, [fp, #-16]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  12f63c:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  12f640:	e3403014 	movt	r3, #20
  12f644:	e5933014 	ldr	r3, [r3, #20]
  12f648:	e20330f0 	and	r3, r3, #240	; 0xf0
  12f64c:	e35300e0 	cmp	r3, #224	; 0xe0
  12f650:	0a000174 	beq	12fc28 <icmp_input+0x6f0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
  12f654:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  12f658:	e3403014 	movt	r3, #20
  12f65c:	e5932014 	ldr	r2, [r3, #20]
  12f660:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  12f664:	e3403014 	movt	r3, #20
  12f668:	e5933000 	ldr	r3, [r3]
  12f66c:	e1a01003 	mov	r1, r3
  12f670:	e1a00002 	mov	r0, r2
  12f674:	eb000ba6 	bl	132514 <ip4_addr_isbroadcast_u32>
  12f678:	e1a03000 	mov	r3, r0
  12f67c:	e3530000 	cmp	r3, #0
  12f680:	1a00016a 	bne	12fc30 <icmp_input+0x6f8>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  12f684:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f688:	e1d330b8 	ldrh	r3, [r3, #8]
  12f68c:	e3530007 	cmp	r3, #7
  12f690:	9a000151 	bls	12fbdc <icmp_input+0x6a4>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
#if CHECKSUM_CHECK_ICMP
    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
      if (inet_chksum_pbuf(p) != 0) {
  12f694:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f698:	ebffa4ef 	bl	118a5c <inet_chksum_pbuf>
  12f69c:	e1a03000 	mov	r3, r0
  12f6a0:	e3530000 	cmp	r3, #0
  12f6a4:	0a000011 	beq	12f6f0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
        pbuf_free(p);
  12f6a8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f6ac:	ebffae02 	bl	11aebc <pbuf_free>
        ICMP_STATS_INC(icmp.chkerr);
  12f6b0:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f6b4:	e3403056 	movt	r3, #86	; 0x56
  12f6b8:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  12f6bc:	e2833001 	add	r3, r3, #1
  12f6c0:	e6ff2073 	uxth	r2, r3
  12f6c4:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f6c8:	e3403056 	movt	r3, #86	; 0x56
  12f6cc:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
        MIB2_STATS_INC(mib2.icmpinerrors);
  12f6d0:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f6d4:	e3403056 	movt	r3, #86	; 0x56
  12f6d8:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12f6dc:	e2832001 	add	r2, r3, #1
  12f6e0:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f6e4:	e3403056 	movt	r3, #86	; 0x56
  12f6e8:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
        return;
  12f6ec:	ea000164 	b	12fc84 <icmp_input+0x74c>
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f6f0:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f6f4:	e2833010 	add	r3, r3, #16
  12f6f8:	e6ff3073 	uxth	r3, r3
  12f6fc:	e6bf3073 	sxth	r3, r3
  12f700:	e1a01003 	mov	r1, r3
  12f704:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f708:	ebffadcd 	bl	11ae44 <pbuf_header>
  12f70c:	e1a03000 	mov	r3, r0
  12f710:	e3530000 	cmp	r3, #0
  12f714:	0a00003e 	beq	12f814 <icmp_input+0x2dc>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
  12f718:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f71c:	e1d320b8 	ldrh	r2, [r3, #8]
  12f720:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f724:	e0823003 	add	r3, r2, r3
  12f728:	e6ff3073 	uxth	r3, r3
  12f72c:	e3a02000 	mov	r2, #0
  12f730:	e1a01003 	mov	r1, r3
  12f734:	e3a00002 	mov	r0, #2
  12f738:	ebffaad8 	bl	11a2a0 <pbuf_alloc>
  12f73c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (r == NULL) {
  12f740:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f744:	e3530000 	cmp	r3, #0
  12f748:	0a00013a 	beq	12fc38 <icmp_input+0x700>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
  12f74c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f750:	e1d330ba 	ldrh	r3, [r3, #10]
  12f754:	e1a02003 	mov	r2, r3
  12f758:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f75c:	e2833008 	add	r3, r3, #8
  12f760:	e1520003 	cmp	r2, r3
  12f764:	2a000002 	bcs	12f774 <icmp_input+0x23c>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
  12f768:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f76c:	ebffadd2 	bl	11aebc <pbuf_free>
        goto icmperr;
  12f770:	ea000131 	b	12fc3c <icmp_input+0x704>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
  12f774:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f778:	e5933004 	ldr	r3, [r3, #4]
  12f77c:	e15b20ba 	ldrh	r2, [fp, #-10]
  12f780:	e51b1008 	ldr	r1, [fp, #-8]
  12f784:	e1a00003 	mov	r0, r3
  12f788:	eb004583 	bl	140d9c <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
  12f78c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f790:	e2633000 	rsb	r3, r3, #0
  12f794:	e6ff3073 	uxth	r3, r3
  12f798:	e6bf3073 	sxth	r3, r3
  12f79c:	e1a01003 	mov	r1, r3
  12f7a0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f7a4:	ebffada6 	bl	11ae44 <pbuf_header>
  12f7a8:	e1a03000 	mov	r3, r0
  12f7ac:	e3530000 	cmp	r3, #0
  12f7b0:	0a000009 	beq	12f7dc <icmp_input+0x2a4>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
  12f7b4:	e30904ac 	movw	r0, #38060	; 0x94ac
  12f7b8:	e3400014 	movt	r0, #20
  12f7bc:	ebff4e54 	bl	103114 <rt_kprintf>
  12f7c0:	e3a010af 	mov	r1, #175	; 0xaf
  12f7c4:	e30904e4 	movw	r0, #38116	; 0x94e4
  12f7c8:	e3400014 	movt	r0, #20
  12f7cc:	ebff6e47 	bl	10b0f0 <sys_arch_assert>
        pbuf_free(r);
  12f7d0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f7d4:	ebffadb8 	bl	11aebc <pbuf_free>
        goto icmperr;
  12f7d8:	ea000117 	b	12fc3c <icmp_input+0x704>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
  12f7dc:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12f7e0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f7e4:	ebffaf09 	bl	11b410 <pbuf_copy>
  12f7e8:	e1a03000 	mov	r3, r0
  12f7ec:	e3530000 	cmp	r3, #0
  12f7f0:	0a000002 	beq	12f800 <icmp_input+0x2c8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
  12f7f4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f7f8:	ebffadaf 	bl	11aebc <pbuf_free>
        goto icmperr;
  12f7fc:	ea00010e 	b	12fc3c <icmp_input+0x704>
      }
      /* free the original p */
      pbuf_free(p);
  12f800:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f804:	ebffadac 	bl	11aebc <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
  12f808:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f80c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  12f810:	ea000014 	b	12f868 <icmp_input+0x330>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f814:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f818:	e26334ff 	rsb	r3, r3, #-16777216	; 0xff000000
  12f81c:	e28338ff 	add	r3, r3, #16711680	; 0xff0000
  12f820:	e2833cff 	add	r3, r3, #65280	; 0xff00
  12f824:	e28330f0 	add	r3, r3, #240	; 0xf0
  12f828:	e6ff3073 	uxth	r3, r3
  12f82c:	e6bf3073 	sxth	r3, r3
  12f830:	e1a01003 	mov	r1, r3
  12f834:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f838:	ebffad81 	bl	11ae44 <pbuf_header>
  12f83c:	e1a03000 	mov	r3, r0
  12f840:	e3530000 	cmp	r3, #0
  12f844:	0a000007 	beq	12f868 <icmp_input+0x330>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
  12f848:	e3090518 	movw	r0, #38168	; 0x9518
  12f84c:	e3400014 	movt	r0, #20
  12f850:	ebff4e2f 	bl	103114 <rt_kprintf>
  12f854:	e3a010c0 	mov	r1, #192	; 0xc0
  12f858:	e30904e4 	movw	r0, #38116	; 0x94e4
  12f85c:	e3400014 	movt	r0, #20
  12f860:	ebff6e22 	bl	10b0f0 <sys_arch_assert>
        goto icmperr;
  12f864:	ea0000f4 	b	12fc3c <icmp_input+0x704>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
  12f868:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f86c:	e5933004 	ldr	r3, [r3, #4]
  12f870:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (pbuf_header(p, (s16_t)hlen)) {
  12f874:	e15b30fa 	ldrsh	r3, [fp, #-10]
  12f878:	e1a01003 	mov	r1, r3
  12f87c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f880:	ebffad6f 	bl	11ae44 <pbuf_header>
  12f884:	e1a03000 	mov	r3, r0
  12f888:	e3530000 	cmp	r3, #0
  12f88c:	1a0000ca 	bne	12fbbc <icmp_input+0x684>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
  12f890:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f894:	e5933004 	ldr	r3, [r3, #4]
  12f898:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      ip4_addr_copy(iphdr->src, *src);
  12f89c:	e51b3010 	ldr	r3, [fp, #-16]
  12f8a0:	e5932000 	ldr	r2, [r3]
  12f8a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f8a8:	e583200c 	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
  12f8ac:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  12f8b0:	e3403014 	movt	r3, #20
  12f8b4:	e5932010 	ldr	r2, [r3, #16]
  12f8b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f8bc:	e5832010 	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
  12f8c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f8c4:	e3a02000 	mov	r2, #0
  12f8c8:	e5c32000 	strb	r2, [r3]
#if CHECKSUM_GEN_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
        /* adjust the checksum */
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  12f8cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f8d0:	e1d330b2 	ldrh	r3, [r3, #2]
  12f8d4:	e6ff3073 	uxth	r3, r3
  12f8d8:	e30f2ff7 	movw	r2, #65527	; 0xfff7
  12f8dc:	e1530002 	cmp	r3, r2
  12f8e0:	9a000007 	bls	12f904 <icmp_input+0x3cc>
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  12f8e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f8e8:	e1d330b2 	ldrh	r3, [r3, #2]
  12f8ec:	e6ff3073 	uxth	r3, r3
  12f8f0:	e2833009 	add	r3, r3, #9
  12f8f4:	e6ff2073 	uxth	r2, r3
  12f8f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f8fc:	e1c320b2 	strh	r2, [r3, #2]
  12f900:	ea000006 	b	12f920 <icmp_input+0x3e8>
        } else {
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  12f904:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f908:	e1d330b2 	ldrh	r3, [r3, #2]
  12f90c:	e6ff3073 	uxth	r3, r3
  12f910:	e2833008 	add	r3, r3, #8
  12f914:	e6ff2073 	uxth	r2, r3
  12f918:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f91c:	e1c320b2 	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
  12f920:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f924:	e3e02000 	mvn	r2, #0
  12f928:	e5c32008 	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
  12f92c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f930:	e3a02000 	mov	r2, #0
  12f934:	e5c3200a 	strb	r2, [r3, #10]
  12f938:	e3a02000 	mov	r2, #0
  12f93c:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
  12f940:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f944:	e1a01003 	mov	r1, r3
  12f948:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12f94c:	ebffa432 	bl	118a1c <inet_chksum>
  12f950:	e1a03000 	mov	r3, r0
  12f954:	e1a02003 	mov	r2, r3
  12f958:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f95c:	e1c320ba 	strh	r2, [r3, #10]
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
  12f960:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f964:	e3403056 	movt	r3, #86	; 0x56
  12f968:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12f96c:	e2833001 	add	r3, r3, #1
  12f970:	e6ff2073 	uxth	r2, r3
  12f974:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f978:	e3403056 	movt	r3, #86	; 0x56
  12f97c:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* increase number of messages attempted to send */
      MIB2_STATS_INC(mib2.icmpoutmsgs);
  12f980:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f984:	e3403056 	movt	r3, #86	; 0x56
  12f988:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12f98c:	e2832001 	add	r2, r3, #1
  12f990:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f994:	e3403056 	movt	r3, #86	; 0x56
  12f998:	e58321d4 	str	r2, [r3, #468]	; 0x1d4
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);
  12f99c:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f9a0:	e3403056 	movt	r3, #86	; 0x56
  12f9a4:	e59331e8 	ldr	r3, [r3, #488]	; 0x1e8
  12f9a8:	e2832001 	add	r2, r3, #1
  12f9ac:	e30e3a14 	movw	r3, #59924	; 0xea14
  12f9b0:	e3403056 	movt	r3, #86	; 0x56
  12f9b4:	e58321e8 	str	r2, [r3, #488]	; 0x1e8

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
  12f9b8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12f9bc:	e58d3008 	str	r3, [sp, #8]
  12f9c0:	e3a03001 	mov	r3, #1
  12f9c4:	e58d3004 	str	r3, [sp, #4]
  12f9c8:	e3a03000 	mov	r3, #0
  12f9cc:	e58d3000 	str	r3, [sp]
  12f9d0:	e3a030ff 	mov	r3, #255	; 0xff
  12f9d4:	e3a02000 	mov	r2, #0
  12f9d8:	e51b1010 	ldr	r1, [fp, #-16]
  12f9dc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f9e0:	eb0008c5 	bl	131cfc <ip4_output_if>
  12f9e4:	e1a03000 	mov	r3, r0
  12f9e8:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
  12f9ec:	ea000072 	b	12fbbc <icmp_input+0x684>
  default:
    if (type == ICMP_DUR) {
  12f9f0:	e55b300b 	ldrb	r3, [fp, #-11]
  12f9f4:	e3530003 	cmp	r3, #3
  12f9f8:	1a000007 	bne	12fa1c <icmp_input+0x4e4>
      MIB2_STATS_INC(mib2.icmpindestunreachs);
  12f9fc:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fa00:	e3403056 	movt	r3, #86	; 0x56
  12fa04:	e59331a8 	ldr	r3, [r3, #424]	; 0x1a8
  12fa08:	e2832001 	add	r2, r3, #1
  12fa0c:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fa10:	e3403056 	movt	r3, #86	; 0x56
  12fa14:	e58321a8 	str	r2, [r3, #424]	; 0x1a8
  12fa18:	ea000056 	b	12fb78 <icmp_input+0x640>
    } else if (type == ICMP_TE) {
  12fa1c:	e55b300b 	ldrb	r3, [fp, #-11]
  12fa20:	e353000b 	cmp	r3, #11
  12fa24:	1a000007 	bne	12fa48 <icmp_input+0x510>
      MIB2_STATS_INC(mib2.icmpintimeexcds);
  12fa28:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fa2c:	e3403056 	movt	r3, #86	; 0x56
  12fa30:	e59331ac 	ldr	r3, [r3, #428]	; 0x1ac
  12fa34:	e2832001 	add	r2, r3, #1
  12fa38:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fa3c:	e3403056 	movt	r3, #86	; 0x56
  12fa40:	e58321ac 	str	r2, [r3, #428]	; 0x1ac
  12fa44:	ea00004b 	b	12fb78 <icmp_input+0x640>
    } else if (type == ICMP_PP) {
  12fa48:	e55b300b 	ldrb	r3, [fp, #-11]
  12fa4c:	e353000c 	cmp	r3, #12
  12fa50:	1a000007 	bne	12fa74 <icmp_input+0x53c>
      MIB2_STATS_INC(mib2.icmpinparmprobs);
  12fa54:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fa58:	e3403056 	movt	r3, #86	; 0x56
  12fa5c:	e59331b0 	ldr	r3, [r3, #432]	; 0x1b0
  12fa60:	e2832001 	add	r2, r3, #1
  12fa64:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fa68:	e3403056 	movt	r3, #86	; 0x56
  12fa6c:	e58321b0 	str	r2, [r3, #432]	; 0x1b0
  12fa70:	ea000040 	b	12fb78 <icmp_input+0x640>
    } else if (type == ICMP_SQ) {
  12fa74:	e55b300b 	ldrb	r3, [fp, #-11]
  12fa78:	e3530004 	cmp	r3, #4
  12fa7c:	1a000007 	bne	12faa0 <icmp_input+0x568>
      MIB2_STATS_INC(mib2.icmpinsrcquenchs);
  12fa80:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fa84:	e3403056 	movt	r3, #86	; 0x56
  12fa88:	e59331b4 	ldr	r3, [r3, #436]	; 0x1b4
  12fa8c:	e2832001 	add	r2, r3, #1
  12fa90:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fa94:	e3403056 	movt	r3, #86	; 0x56
  12fa98:	e58321b4 	str	r2, [r3, #436]	; 0x1b4
  12fa9c:	ea000035 	b	12fb78 <icmp_input+0x640>
    } else if (type == ICMP_RD) {
  12faa0:	e55b300b 	ldrb	r3, [fp, #-11]
  12faa4:	e3530005 	cmp	r3, #5
  12faa8:	1a000007 	bne	12facc <icmp_input+0x594>
      MIB2_STATS_INC(mib2.icmpinredirects);
  12faac:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fab0:	e3403056 	movt	r3, #86	; 0x56
  12fab4:	e59331b8 	ldr	r3, [r3, #440]	; 0x1b8
  12fab8:	e2832001 	add	r2, r3, #1
  12fabc:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fac0:	e3403056 	movt	r3, #86	; 0x56
  12fac4:	e58321b8 	str	r2, [r3, #440]	; 0x1b8
  12fac8:	ea00002a 	b	12fb78 <icmp_input+0x640>
    } else if (type == ICMP_TS) {
  12facc:	e55b300b 	ldrb	r3, [fp, #-11]
  12fad0:	e353000d 	cmp	r3, #13
  12fad4:	1a000007 	bne	12faf8 <icmp_input+0x5c0>
      MIB2_STATS_INC(mib2.icmpintimestamps);
  12fad8:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fadc:	e3403056 	movt	r3, #86	; 0x56
  12fae0:	e59331c4 	ldr	r3, [r3, #452]	; 0x1c4
  12fae4:	e2832001 	add	r2, r3, #1
  12fae8:	e30e3a14 	movw	r3, #59924	; 0xea14
  12faec:	e3403056 	movt	r3, #86	; 0x56
  12faf0:	e58321c4 	str	r2, [r3, #452]	; 0x1c4
  12faf4:	ea00001f 	b	12fb78 <icmp_input+0x640>
    } else if (type == ICMP_TSR) {
  12faf8:	e55b300b 	ldrb	r3, [fp, #-11]
  12fafc:	e353000e 	cmp	r3, #14
  12fb00:	1a000007 	bne	12fb24 <icmp_input+0x5ec>
      MIB2_STATS_INC(mib2.icmpintimestampreps);
  12fb04:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fb08:	e3403056 	movt	r3, #86	; 0x56
  12fb0c:	e59331c8 	ldr	r3, [r3, #456]	; 0x1c8
  12fb10:	e2832001 	add	r2, r3, #1
  12fb14:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fb18:	e3403056 	movt	r3, #86	; 0x56
  12fb1c:	e58321c8 	str	r2, [r3, #456]	; 0x1c8
  12fb20:	ea000014 	b	12fb78 <icmp_input+0x640>
    } else if (type == ICMP_AM) {
  12fb24:	e55b300b 	ldrb	r3, [fp, #-11]
  12fb28:	e3530011 	cmp	r3, #17
  12fb2c:	1a000007 	bne	12fb50 <icmp_input+0x618>
      MIB2_STATS_INC(mib2.icmpinaddrmasks);
  12fb30:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fb34:	e3403056 	movt	r3, #86	; 0x56
  12fb38:	e59331cc 	ldr	r3, [r3, #460]	; 0x1cc
  12fb3c:	e2832001 	add	r2, r3, #1
  12fb40:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fb44:	e3403056 	movt	r3, #86	; 0x56
  12fb48:	e58321cc 	str	r2, [r3, #460]	; 0x1cc
  12fb4c:	ea000009 	b	12fb78 <icmp_input+0x640>
    } else if (type == ICMP_AMR) {
  12fb50:	e55b300b 	ldrb	r3, [fp, #-11]
  12fb54:	e3530012 	cmp	r3, #18
  12fb58:	1a000006 	bne	12fb78 <icmp_input+0x640>
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
  12fb5c:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fb60:	e3403056 	movt	r3, #86	; 0x56
  12fb64:	e59331d0 	ldr	r3, [r3, #464]	; 0x1d0
  12fb68:	e2832001 	add	r2, r3, #1
  12fb6c:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fb70:	e3403056 	movt	r3, #86	; 0x56
  12fb74:	e58321d0 	str	r2, [r3, #464]	; 0x1d0
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
  12fb78:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fb7c:	e3403056 	movt	r3, #86	; 0x56
  12fb80:	e1d337b0 	ldrh	r3, [r3, #112]	; 0x70
  12fb84:	e2833001 	add	r3, r3, #1
  12fb88:	e6ff2073 	uxth	r2, r3
  12fb8c:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fb90:	e3403056 	movt	r3, #86	; 0x56
  12fb94:	e1c327b0 	strh	r2, [r3, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
  12fb98:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fb9c:	e3403056 	movt	r3, #86	; 0x56
  12fba0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  12fba4:	e2833001 	add	r3, r3, #1
  12fba8:	e6ff2073 	uxth	r2, r3
  12fbac:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fbb0:	e3403056 	movt	r3, #86	; 0x56
  12fbb4:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  12fbb8:	ea000000 	b	12fbc0 <icmp_input+0x688>
    break;
  12fbbc:	e320f000 	nop	{0}
  }
  pbuf_free(p);
  12fbc0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fbc4:	ebffacbc 	bl	11aebc <pbuf_free>
  return;
  12fbc8:	ea00002d 	b	12fc84 <icmp_input+0x74c>
    goto lenerr;
  12fbcc:	e320f000 	nop	{0}
  12fbd0:	ea000002 	b	12fbe0 <icmp_input+0x6a8>
    goto lenerr;
  12fbd4:	e320f000 	nop	{0}
  12fbd8:	ea000000 	b	12fbe0 <icmp_input+0x6a8>
      goto lenerr;
  12fbdc:	e320f000 	nop	{0}
lenerr:
  pbuf_free(p);
  12fbe0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fbe4:	ebffacb4 	bl	11aebc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  12fbe8:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fbec:	e3403056 	movt	r3, #86	; 0x56
  12fbf0:	e1d336ba 	ldrh	r3, [r3, #106]	; 0x6a
  12fbf4:	e2833001 	add	r3, r3, #1
  12fbf8:	e6ff2073 	uxth	r2, r3
  12fbfc:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fc00:	e3403056 	movt	r3, #86	; 0x56
  12fc04:	e1c326ba 	strh	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  12fc08:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fc0c:	e3403056 	movt	r3, #86	; 0x56
  12fc10:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12fc14:	e2832001 	add	r2, r3, #1
  12fc18:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fc1c:	e3403056 	movt	r3, #86	; 0x56
  12fc20:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12fc24:	ea000016 	b	12fc84 <icmp_input+0x74c>
      goto icmperr;
  12fc28:	e320f000 	nop	{0}
  12fc2c:	ea000002 	b	12fc3c <icmp_input+0x704>
      goto icmperr;
  12fc30:	e320f000 	nop	{0}
  12fc34:	ea000000 	b	12fc3c <icmp_input+0x704>
        goto icmperr;
  12fc38:	e320f000 	nop	{0}
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
  12fc3c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fc40:	ebffac9d 	bl	11aebc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  12fc44:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fc48:	e3403056 	movt	r3, #86	; 0x56
  12fc4c:	e1d337b4 	ldrh	r3, [r3, #116]	; 0x74
  12fc50:	e2833001 	add	r3, r3, #1
  12fc54:	e6ff2073 	uxth	r2, r3
  12fc58:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fc5c:	e3403056 	movt	r3, #86	; 0x56
  12fc60:	e1c327b4 	strh	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  12fc64:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fc68:	e3403056 	movt	r3, #86	; 0x56
  12fc6c:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12fc70:	e2832001 	add	r2, r3, #1
  12fc74:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fc78:	e3403056 	movt	r3, #86	; 0x56
  12fc7c:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12fc80:	e320f000 	nop	{0}
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
  12fc84:	e24bd004 	sub	sp, fp, #4
  12fc88:	e8bd8800 	pop	{fp, pc}
  12fc8c:	0014f60c 	.word	0x0014f60c

0012fc90 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  12fc90:	e92d4800 	push	{fp, lr}
  12fc94:	e28db004 	add	fp, sp, #4
  12fc98:	e24dd008 	sub	sp, sp, #8
  12fc9c:	e50b0008 	str	r0, [fp, #-8]
  12fca0:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  12fca4:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fca8:	e3403056 	movt	r3, #86	; 0x56
  12fcac:	e59331dc 	ldr	r3, [r3, #476]	; 0x1dc
  12fcb0:	e2832001 	add	r2, r3, #1
  12fcb4:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fcb8:	e3403056 	movt	r3, #86	; 0x56
  12fcbc:	e58321dc 	str	r2, [r3, #476]	; 0x1dc
  icmp_send_response(p, ICMP_DUR, t);
  12fcc0:	e51b300c 	ldr	r3, [fp, #-12]
  12fcc4:	e6ef3073 	uxtb	r3, r3
  12fcc8:	e1a02003 	mov	r2, r3
  12fccc:	e3a01003 	mov	r1, #3
  12fcd0:	e51b0008 	ldr	r0, [fp, #-8]
  12fcd4:	eb000017 	bl	12fd38 <icmp_send_response>
}
  12fcd8:	e320f000 	nop	{0}
  12fcdc:	e24bd004 	sub	sp, fp, #4
  12fce0:	e8bd8800 	pop	{fp, pc}

0012fce4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
  12fce4:	e92d4800 	push	{fp, lr}
  12fce8:	e28db004 	add	fp, sp, #4
  12fcec:	e24dd008 	sub	sp, sp, #8
  12fcf0:	e50b0008 	str	r0, [fp, #-8]
  12fcf4:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  12fcf8:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fcfc:	e3403056 	movt	r3, #86	; 0x56
  12fd00:	e59331e0 	ldr	r3, [r3, #480]	; 0x1e0
  12fd04:	e2832001 	add	r2, r3, #1
  12fd08:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fd0c:	e3403056 	movt	r3, #86	; 0x56
  12fd10:	e58321e0 	str	r2, [r3, #480]	; 0x1e0
  icmp_send_response(p, ICMP_TE, t);
  12fd14:	e51b300c 	ldr	r3, [fp, #-12]
  12fd18:	e6ef3073 	uxtb	r3, r3
  12fd1c:	e1a02003 	mov	r2, r3
  12fd20:	e3a0100b 	mov	r1, #11
  12fd24:	e51b0008 	ldr	r0, [fp, #-8]
  12fd28:	eb000002 	bl	12fd38 <icmp_send_response>
}
  12fd2c:	e320f000 	nop	{0}
  12fd30:	e24bd004 	sub	sp, fp, #4
  12fd34:	e8bd8800 	pop	{fp, pc}

0012fd38 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  12fd38:	e92d4800 	push	{fp, lr}
  12fd3c:	e28db004 	add	fp, sp, #4
  12fd40:	e24dd030 	sub	sp, sp, #48	; 0x30
  12fd44:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12fd48:	e1a03001 	mov	r3, r1
  12fd4c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  12fd50:	e1a03002 	mov	r3, r2
  12fd54:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
  struct icmp_echo_hdr *icmphdr;
  ip4_addr_t iphdr_src;
  struct netif *netif;

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);
  12fd58:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fd5c:	e3403056 	movt	r3, #86	; 0x56
  12fd60:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12fd64:	e2832001 	add	r2, r3, #1
  12fd68:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fd6c:	e3403056 	movt	r3, #86	; 0x56
  12fd70:	e58321d4 	str	r2, [r3, #468]	; 0x1d4

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  12fd74:	e3a02000 	mov	r2, #0
  12fd78:	e3a01024 	mov	r1, #36	; 0x24
  12fd7c:	e3a00001 	mov	r0, #1
  12fd80:	ebffa946 	bl	11a2a0 <pbuf_alloc>
  12fd84:	e50b0008 	str	r0, [fp, #-8]
                 PBUF_RAM);
  if (q == NULL) {
  12fd88:	e51b3008 	ldr	r3, [fp, #-8]
  12fd8c:	e3530000 	cmp	r3, #0
  12fd90:	1a000007 	bne	12fdb4 <icmp_send_response+0x7c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
  12fd94:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fd98:	e3403056 	movt	r3, #86	; 0x56
  12fd9c:	e59331d8 	ldr	r3, [r3, #472]	; 0x1d8
  12fda0:	e2832001 	add	r2, r3, #1
  12fda4:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fda8:	e3403056 	movt	r3, #86	; 0x56
  12fdac:	e58321d8 	str	r2, [r3, #472]	; 0x1d8
  12fdb0:	ea000055 	b	12ff0c <icmp_send_response+0x1d4>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
  12fdb4:	e51b3008 	ldr	r3, [fp, #-8]
  12fdb8:	e1d330ba 	ldrh	r3, [r3, #10]
  12fdbc:	e3530023 	cmp	r3, #35	; 0x23
  12fdc0:	8a000006 	bhi	12fde0 <icmp_send_response+0xa8>
  12fdc4:	e309054c 	movw	r0, #38220	; 0x954c
  12fdc8:	e3400014 	movt	r0, #20
  12fdcc:	ebff4cd0 	bl	103114 <rt_kprintf>
  12fdd0:	e3001162 	movw	r1, #354	; 0x162
  12fdd4:	e30904e4 	movw	r0, #38116	; 0x94e4
  12fdd8:	e3400014 	movt	r0, #20
  12fddc:	ebff6cc3 	bl	10b0f0 <sys_arch_assert>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  12fde0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12fde4:	e5933004 	ldr	r3, [r3, #4]
  12fde8:	e50b300c 	str	r3, [fp, #-12]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  12fdec:	e51b3008 	ldr	r3, [fp, #-8]
  12fdf0:	e5933004 	ldr	r3, [r3, #4]
  12fdf4:	e50b3010 	str	r3, [fp, #-16]
  icmphdr->type = type;
  12fdf8:	e51b3010 	ldr	r3, [fp, #-16]
  12fdfc:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12fe00:	e5c32000 	strb	r2, [r3]
  icmphdr->code = code;
  12fe04:	e51b3010 	ldr	r3, [fp, #-16]
  12fe08:	e55b2022 	ldrb	r2, [fp, #-34]	; 0xffffffde
  12fe0c:	e5c32001 	strb	r2, [r3, #1]
  icmphdr->id = 0;
  12fe10:	e51b3010 	ldr	r3, [fp, #-16]
  12fe14:	e3a02000 	mov	r2, #0
  12fe18:	e5c32004 	strb	r2, [r3, #4]
  12fe1c:	e3a02000 	mov	r2, #0
  12fe20:	e5c32005 	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
  12fe24:	e51b3010 	ldr	r3, [fp, #-16]
  12fe28:	e3a02000 	mov	r2, #0
  12fe2c:	e5c32006 	strb	r2, [r3, #6]
  12fe30:	e3a02000 	mov	r2, #0
  12fe34:	e5c32007 	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  12fe38:	e51b3008 	ldr	r3, [fp, #-8]
  12fe3c:	e5933004 	ldr	r3, [r3, #4]
  12fe40:	e2830008 	add	r0, r3, #8
  12fe44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12fe48:	e5933004 	ldr	r3, [r3, #4]
  12fe4c:	e3a0201c 	mov	r2, #28
  12fe50:	e1a01003 	mov	r1, r3
  12fe54:	eb0043d0 	bl	140d9c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
  12fe58:	e51b300c 	ldr	r3, [fp, #-12]
  12fe5c:	e593300c 	ldr	r3, [r3, #12]
  12fe60:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
  12fe64:	e24b3018 	sub	r3, fp, #24
  12fe68:	e1a00003 	mov	r0, r3
  12fe6c:	eb0004c9 	bl	131198 <ip4_route>
  12fe70:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
#endif
  if (netif != NULL) {
  12fe74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fe78:	e3530000 	cmp	r3, #0
  12fe7c:	0a000020 	beq	12ff04 <icmp_send_response+0x1cc>
    /* calculate checksum */
    icmphdr->chksum = 0;
  12fe80:	e51b3010 	ldr	r3, [fp, #-16]
  12fe84:	e3a02000 	mov	r2, #0
  12fe88:	e5c32002 	strb	r2, [r3, #2]
  12fe8c:	e3a02000 	mov	r2, #0
  12fe90:	e5c32003 	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
  12fe94:	e51b3008 	ldr	r3, [fp, #-8]
  12fe98:	e1d330ba 	ldrh	r3, [r3, #10]
  12fe9c:	e1a01003 	mov	r1, r3
  12fea0:	e51b0010 	ldr	r0, [fp, #-16]
  12fea4:	ebffa2dc 	bl	118a1c <inet_chksum>
  12fea8:	e1a03000 	mov	r3, r0
  12feac:	e1a02003 	mov	r2, r3
  12feb0:	e51b3010 	ldr	r3, [fp, #-16]
  12feb4:	e1c320b2 	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
  12feb8:	e30e3a14 	movw	r3, #59924	; 0xea14
  12febc:	e3403056 	movt	r3, #86	; 0x56
  12fec0:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12fec4:	e2833001 	add	r3, r3, #1
  12fec8:	e6ff2073 	uxth	r2, r3
  12fecc:	e30e3a14 	movw	r3, #59924	; 0xea14
  12fed0:	e3403056 	movt	r3, #86	; 0x56
  12fed4:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
  12fed8:	e24b2018 	sub	r2, fp, #24
  12fedc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fee0:	e58d3008 	str	r3, [sp, #8]
  12fee4:	e3a03001 	mov	r3, #1
  12fee8:	e58d3004 	str	r3, [sp, #4]
  12feec:	e3a03000 	mov	r3, #0
  12fef0:	e58d3000 	str	r3, [sp]
  12fef4:	e3a030ff 	mov	r3, #255	; 0xff
  12fef8:	e3a01000 	mov	r1, #0
  12fefc:	e51b0008 	ldr	r0, [fp, #-8]
  12ff00:	eb00077d 	bl	131cfc <ip4_output_if>
  }
  pbuf_free(q);
  12ff04:	e51b0008 	ldr	r0, [fp, #-8]
  12ff08:	ebffabeb 	bl	11aebc <pbuf_free>
}
  12ff0c:	e24bd004 	sub	sp, fp, #4
  12ff10:	e8bd8800 	pop	{fp, pc}

0012ff14 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
  12ff14:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12ff18:	e28db000 	add	fp, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
  12ff1c:	e30e2bd8 	movw	r2, #60376	; 0xebd8
  12ff20:	e3402014 	movt	r2, #20
  12ff24:	e3a030e0 	mov	r3, #224	; 0xe0
  12ff28:	e3403100 	movt	r3, #256	; 0x100
  12ff2c:	e5823000 	str	r3, [r2]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
  12ff30:	e30e2bdc 	movw	r2, #60380	; 0xebdc
  12ff34:	e3402014 	movt	r2, #20
  12ff38:	e3a030e0 	mov	r3, #224	; 0xe0
  12ff3c:	e3403200 	movt	r3, #512	; 0x200
  12ff40:	e5823000 	str	r3, [r2]
}
  12ff44:	e320f000 	nop	{0}
  12ff48:	e28bd000 	add	sp, fp, #0
  12ff4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12ff50:	e12fff1e 	bx	lr

0012ff54 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
  12ff54:	e92d4800 	push	{fp, lr}
  12ff58:	e28db004 	add	fp, sp, #4
  12ff5c:	e24dd010 	sub	sp, sp, #16
  12ff60:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group* group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void*)netif));

  group = igmp_lookup_group(netif, &allsystems);
  12ff64:	e30e1bd8 	movw	r1, #60376	; 0xebd8
  12ff68:	e3401014 	movt	r1, #20
  12ff6c:	e51b0010 	ldr	r0, [fp, #-16]
  12ff70:	eb000078 	bl	130158 <igmp_lookup_group>
  12ff74:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  12ff78:	e51b3008 	ldr	r3, [fp, #-8]
  12ff7c:	e3530000 	cmp	r3, #0
  12ff80:	0a000015 	beq	12ffdc <igmp_start+0x88>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  12ff84:	e51b3008 	ldr	r3, [fp, #-8]
  12ff88:	e3a02002 	mov	r2, #2
  12ff8c:	e5c32009 	strb	r2, [r3, #9]
    group->use++;
  12ff90:	e51b3008 	ldr	r3, [fp, #-8]
  12ff94:	e5d3300c 	ldrb	r3, [r3, #12]
  12ff98:	e2833001 	add	r3, r3, #1
  12ff9c:	e6ef2073 	uxtb	r2, r3
  12ffa0:	e51b3008 	ldr	r3, [fp, #-8]
  12ffa4:	e5c3200c 	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  12ffa8:	e51b3010 	ldr	r3, [fp, #-16]
  12ffac:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12ffb0:	e3530000 	cmp	r3, #0
  12ffb4:	0a000006 	beq	12ffd4 <igmp_start+0x80>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
  12ffb8:	e51b3010 	ldr	r3, [fp, #-16]
  12ffbc:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12ffc0:	e3a02001 	mov	r2, #1
  12ffc4:	e30e1bd8 	movw	r1, #60376	; 0xebd8
  12ffc8:	e3401014 	movt	r1, #20
  12ffcc:	e51b0010 	ldr	r0, [fp, #-16]
  12ffd0:	e12fff33 	blx	r3
    }

    return ERR_OK;
  12ffd4:	e3a03000 	mov	r3, #0
  12ffd8:	ea000000 	b	12ffe0 <igmp_start+0x8c>
  }

  return ERR_MEM;
  12ffdc:	e3e03000 	mvn	r3, #0
}
  12ffe0:	e1a00003 	mov	r0, r3
  12ffe4:	e24bd004 	sub	sp, fp, #4
  12ffe8:	e8bd8800 	pop	{fp, pc}

0012ffec <igmp_stop>:
 *
 * @param netif network interface on which stop IGMP processing
 */
err_t
igmp_stop(struct netif *netif)
{
  12ffec:	e92d4800 	push	{fp, lr}
  12fff0:	e28db004 	add	fp, sp, #4
  12fff4:	e24dd010 	sub	sp, sp, #16
  12fff8:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  12fffc:	e51b3010 	ldr	r3, [fp, #-16]
  130000:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130004:	e50b3008 	str	r3, [fp, #-8]

  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, NULL);
  130008:	e51b3010 	ldr	r3, [fp, #-16]
  13000c:	e3a02000 	mov	r2, #0
  130010:	e583202c 	str	r2, [r3, #44]	; 0x2c

  while (group != NULL) {
  130014:	ea000012 	b	130064 <igmp_stop+0x78>
    struct igmp_group *next = group->next; /* avoid use-after-free below */
  130018:	e51b3008 	ldr	r3, [fp, #-8]
  13001c:	e5933000 	ldr	r3, [r3]
  130020:	e50b300c 	str	r3, [fp, #-12]

    /* disable the group at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  130024:	e51b3010 	ldr	r3, [fp, #-16]
  130028:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  13002c:	e3530000 	cmp	r3, #0
  130030:	0a000006 	beq	130050 <igmp_stop+0x64>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_stop: igmp_mac_filter(DEL "));
      ip4_addr_debug_print(IGMP_DEBUG, &group->group_address);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &(group->group_address), NETIF_DEL_MAC_FILTER);
  130034:	e51b3010 	ldr	r3, [fp, #-16]
  130038:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  13003c:	e51b2008 	ldr	r2, [fp, #-8]
  130040:	e2821004 	add	r1, r2, #4
  130044:	e3a02000 	mov	r2, #0
  130048:	e51b0010 	ldr	r0, [fp, #-16]
  13004c:	e12fff33 	blx	r3
    }

    /* free group */
    memp_free(MEMP_IGMP_GROUP, group);
  130050:	e51b1008 	ldr	r1, [fp, #-8]
  130054:	e3a0000c 	mov	r0, #12
  130058:	ebffa489 	bl	119284 <memp_free>

    /* move to "next" */
    group = next;
  13005c:	e51b300c 	ldr	r3, [fp, #-12]
  130060:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  130064:	e51b3008 	ldr	r3, [fp, #-8]
  130068:	e3530000 	cmp	r3, #0
  13006c:	1affffe9 	bne	130018 <igmp_stop+0x2c>
  }
  return ERR_OK;
  130070:	e3a03000 	mov	r3, #0
}
  130074:	e1a00003 	mov	r0, r3
  130078:	e24bd004 	sub	sp, fp, #4
  13007c:	e8bd8800 	pop	{fp, pc}

00130080 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
  130080:	e92d4800 	push	{fp, lr}
  130084:	e28db004 	add	fp, sp, #4
  130088:	e24dd010 	sub	sp, sp, #16
  13008c:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  130090:	e51b3010 	ldr	r3, [fp, #-16]
  130094:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130098:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void*)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if(group != NULL) {
  13009c:	e51b3008 	ldr	r3, [fp, #-8]
  1300a0:	e3530000 	cmp	r3, #0
  1300a4:	0a000009 	beq	1300d0 <igmp_report_groups+0x50>
    group = group->next;
  1300a8:	e51b3008 	ldr	r3, [fp, #-8]
  1300ac:	e5933000 	ldr	r3, [r3]
  1300b0:	e50b3008 	str	r3, [fp, #-8]
  }
  
  while (group != NULL) {
  1300b4:	ea000005 	b	1300d0 <igmp_report_groups+0x50>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  1300b8:	e3a01005 	mov	r1, #5
  1300bc:	e51b0008 	ldr	r0, [fp, #-8]
  1300c0:	eb000372 	bl	130e90 <igmp_delaying_member>
    group = group->next;
  1300c4:	e51b3008 	ldr	r3, [fp, #-8]
  1300c8:	e5933000 	ldr	r3, [r3]
  1300cc:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  1300d0:	e51b3008 	ldr	r3, [fp, #-8]
  1300d4:	e3530000 	cmp	r3, #0
  1300d8:	1afffff6 	bne	1300b8 <igmp_report_groups+0x38>
  }
}
  1300dc:	e320f000 	nop	{0}
  1300e0:	e24bd004 	sub	sp, fp, #4
  1300e4:	e8bd8800 	pop	{fp, pc}

001300e8 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
  1300e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1300ec:	e28db000 	add	fp, sp, #0
  1300f0:	e24dd014 	sub	sp, sp, #20
  1300f4:	e50b0010 	str	r0, [fp, #-16]
  1300f8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group = netif_igmp_data(ifp);
  1300fc:	e51b3010 	ldr	r3, [fp, #-16]
  130100:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130104:	e50b3008 	str	r3, [fp, #-8]

  while (group != NULL) {
  130108:	ea00000a 	b	130138 <igmp_lookfor_group+0x50>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
  13010c:	e51b3008 	ldr	r3, [fp, #-8]
  130110:	e5932004 	ldr	r2, [r3, #4]
  130114:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130118:	e5933000 	ldr	r3, [r3]
  13011c:	e1520003 	cmp	r2, r3
  130120:	1a000001 	bne	13012c <igmp_lookfor_group+0x44>
      return group;
  130124:	e51b3008 	ldr	r3, [fp, #-8]
  130128:	ea000006 	b	130148 <igmp_lookfor_group+0x60>
    }
    group = group->next;
  13012c:	e51b3008 	ldr	r3, [fp, #-8]
  130130:	e5933000 	ldr	r3, [r3]
  130134:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  130138:	e51b3008 	ldr	r3, [fp, #-8]
  13013c:	e3530000 	cmp	r3, #0
  130140:	1afffff1 	bne	13010c <igmp_lookfor_group+0x24>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
  130144:	e3a03000 	mov	r3, #0
}
  130148:	e1a00003 	mov	r0, r3
  13014c:	e28bd000 	add	sp, fp, #0
  130150:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  130154:	e12fff1e 	bx	lr

00130158 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
  130158:	e92d4800 	push	{fp, lr}
  13015c:	e28db004 	add	fp, sp, #4
  130160:	e24dd010 	sub	sp, sp, #16
  130164:	e50b0010 	str	r0, [fp, #-16]
  130168:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
  13016c:	e51b3010 	ldr	r3, [fp, #-16]
  130170:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130174:	e50b3008 	str	r3, [fp, #-8]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
  130178:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13017c:	e51b0010 	ldr	r0, [fp, #-16]
  130180:	ebffffd8 	bl	1300e8 <igmp_lookfor_group>
  130184:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  130188:	e51b300c 	ldr	r3, [fp, #-12]
  13018c:	e3530000 	cmp	r3, #0
  130190:	0a000001 	beq	13019c <igmp_lookup_group+0x44>
    /* Group already exists. */
    return group;
  130194:	e51b300c 	ldr	r3, [fp, #-12]
  130198:	ea00004b 	b	1302cc <igmp_lookup_group+0x174>
  }
  
  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
  13019c:	e3002101 	movw	r2, #257	; 0x101
  1301a0:	e3091578 	movw	r1, #38264	; 0x9578
  1301a4:	e3401014 	movt	r1, #20
  1301a8:	e3a0000c 	mov	r0, #12
  1301ac:	ebffa3cc 	bl	1190e4 <memp_malloc_fn>
  1301b0:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  1301b4:	e51b300c 	ldr	r3, [fp, #-12]
  1301b8:	e3530000 	cmp	r3, #0
  1301bc:	0a000041 	beq	1302c8 <igmp_lookup_group+0x170>
    ip4_addr_set(&(group->group_address), addr);
  1301c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1301c4:	e3530000 	cmp	r3, #0
  1301c8:	0a000002 	beq	1301d8 <igmp_lookup_group+0x80>
  1301cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1301d0:	e5933000 	ldr	r3, [r3]
  1301d4:	ea000000 	b	1301dc <igmp_lookup_group+0x84>
  1301d8:	e3a03000 	mov	r3, #0
  1301dc:	e51b200c 	ldr	r2, [fp, #-12]
  1301e0:	e5823004 	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
  1301e4:	e51b300c 	ldr	r3, [fp, #-12]
  1301e8:	e3a02000 	mov	r2, #0
  1301ec:	e1c320ba 	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
  1301f0:	e51b300c 	ldr	r3, [fp, #-12]
  1301f4:	e3a02000 	mov	r2, #0
  1301f8:	e5c32009 	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
  1301fc:	e51b300c 	ldr	r3, [fp, #-12]
  130200:	e3a02000 	mov	r2, #0
  130204:	e5c32008 	strb	r2, [r3, #8]
    group->use                = 0;
  130208:	e51b300c 	ldr	r3, [fp, #-12]
  13020c:	e3a02000 	mov	r2, #0
  130210:	e5c3200c 	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */    
    if (list_head == NULL) {
  130214:	e51b3008 	ldr	r3, [fp, #-8]
  130218:	e3530000 	cmp	r3, #0
  13021c:	1a000014 	bne	130274 <igmp_lookup_group+0x11c>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
  130220:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130224:	e5932000 	ldr	r2, [r3]
  130228:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  13022c:	e3403014 	movt	r3, #20
  130230:	e5933000 	ldr	r3, [r3]
  130234:	e1520003 	cmp	r2, r3
  130238:	0a000006 	beq	130258 <igmp_lookup_group+0x100>
  13023c:	e30905ac 	movw	r0, #38316	; 0x95ac
  130240:	e3400014 	movt	r0, #20
  130244:	ebff4bb2 	bl	103114 <rt_kprintf>
  130248:	e300110d 	movw	r1, #269	; 0x10d
  13024c:	e3090578 	movw	r0, #38264	; 0x9578
  130250:	e3400014 	movt	r0, #20
  130254:	ebff6ba5 	bl	10b0f0 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
  130258:	e51b300c 	ldr	r3, [fp, #-12]
  13025c:	e3a02000 	mov	r2, #0
  130260:	e5832000 	str	r2, [r3]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
  130264:	e51b3010 	ldr	r3, [fp, #-16]
  130268:	e51b200c 	ldr	r2, [fp, #-12]
  13026c:	e583202c 	str	r2, [r3, #44]	; 0x2c
  130270:	ea000014 	b	1302c8 <igmp_lookup_group+0x170>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
  130274:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130278:	e5932000 	ldr	r2, [r3]
  13027c:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  130280:	e3403014 	movt	r3, #20
  130284:	e5933000 	ldr	r3, [r3]
  130288:	e1520003 	cmp	r2, r3
  13028c:	1a000006 	bne	1302ac <igmp_lookup_group+0x154>
  130290:	e30905e0 	movw	r0, #38368	; 0x95e0
  130294:	e3400014 	movt	r0, #20
  130298:	ebff4b9d 	bl	103114 <rt_kprintf>
  13029c:	e3001113 	movw	r1, #275	; 0x113
  1302a0:	e3090578 	movw	r0, #38264	; 0x9578
  1302a4:	e3400014 	movt	r0, #20
  1302a8:	ebff6b90 	bl	10b0f0 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
  1302ac:	e51b3008 	ldr	r3, [fp, #-8]
  1302b0:	e5932000 	ldr	r2, [r3]
  1302b4:	e51b300c 	ldr	r3, [fp, #-12]
  1302b8:	e5832000 	str	r2, [r3]
      list_head->next = group;
  1302bc:	e51b3008 	ldr	r3, [fp, #-8]
  1302c0:	e51b200c 	ldr	r2, [fp, #-12]
  1302c4:	e5832000 	str	r2, [r3]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group?"":"impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)ifp));

  return group;
  1302c8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1302cc:	e1a00003 	mov	r0, r3
  1302d0:	e24bd004 	sub	sp, fp, #4
  1302d4:	e8bd8800 	pop	{fp, pc}

001302d8 <igmp_remove_group>:
 * @param group the group to remove from the global igmp_group_list
 * @return ERR_OK if group was removed from the list, an err_t otherwise
 */
static err_t
igmp_remove_group(struct netif* netif, struct igmp_group *group)
{
  1302d8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1302dc:	e28db000 	add	fp, sp, #0
  1302e0:	e24dd014 	sub	sp, sp, #20
  1302e4:	e50b0010 	str	r0, [fp, #-16]
  1302e8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_OK;
  1302ec:	e3a03000 	mov	r3, #0
  1302f0:	e54b3005 	strb	r3, [fp, #-5]
  struct igmp_group *tmp_group;

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  1302f4:	e51b3010 	ldr	r3, [fp, #-16]
  1302f8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1302fc:	e50b300c 	str	r3, [fp, #-12]
  130300:	ea00000c 	b	130338 <igmp_remove_group+0x60>
    if (tmp_group->next == group) {
  130304:	e51b300c 	ldr	r3, [fp, #-12]
  130308:	e5933000 	ldr	r3, [r3]
  13030c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  130310:	e1520003 	cmp	r2, r3
  130314:	1a000004 	bne	13032c <igmp_remove_group+0x54>
      tmp_group->next = group->next;
  130318:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13031c:	e5932000 	ldr	r2, [r3]
  130320:	e51b300c 	ldr	r3, [fp, #-12]
  130324:	e5832000 	str	r2, [r3]
      break;
  130328:	ea000005 	b	130344 <igmp_remove_group+0x6c>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  13032c:	e51b300c 	ldr	r3, [fp, #-12]
  130330:	e5933000 	ldr	r3, [r3]
  130334:	e50b300c 	str	r3, [fp, #-12]
  130338:	e51b300c 	ldr	r3, [fp, #-12]
  13033c:	e3530000 	cmp	r3, #0
  130340:	1affffef 	bne	130304 <igmp_remove_group+0x2c>
    }
  }
  /* Group not found in the global igmp_group_list */
  if (tmp_group == NULL) {
  130344:	e51b300c 	ldr	r3, [fp, #-12]
  130348:	e3530000 	cmp	r3, #0
  13034c:	1a000001 	bne	130358 <igmp_remove_group+0x80>
    err = ERR_ARG;
  130350:	e3e0300f 	mvn	r3, #15
  130354:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  130358:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  13035c:	e1a00003 	mov	r0, r3
  130360:	e28bd000 	add	sp, fp, #0
  130364:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  130368:	e12fff1e 	bx	lr

0013036c <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
  13036c:	e92d4800 	push	{fp, lr}
  130370:	e28db004 	add	fp, sp, #4
  130374:	e24dd020 	sub	sp, sp, #32
  130378:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  13037c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  130380:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct igmp_msg*   igmp;
  struct igmp_group* group;
  struct igmp_group* groupref;

  IGMP_STATS_INC(igmp.recv);
  130384:	e30e3a14 	movw	r3, #59924	; 0xea14
  130388:	e3403056 	movt	r3, #86	; 0x56
  13038c:	e1d337ba 	ldrh	r3, [r3, #122]	; 0x7a
  130390:	e2833001 	add	r3, r3, #1
  130394:	e6ff2073 	uxth	r2, r3
  130398:	e30e3a14 	movw	r3, #59924	; 0xea14
  13039c:	e3403056 	movt	r3, #86	; 0x56
  1303a0:	e1c327ba 	strh	r2, [r3, #122]	; 0x7a

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
  1303a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1303a8:	e1d330ba 	ldrh	r3, [r3, #10]
  1303ac:	e3530007 	cmp	r3, #7
  1303b0:	8a00000a 	bhi	1303e0 <igmp_input+0x74>
    pbuf_free(p);
  1303b4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1303b8:	ebffaabf 	bl	11aebc <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
  1303bc:	e30e3a14 	movw	r3, #59924	; 0xea14
  1303c0:	e3403056 	movt	r3, #86	; 0x56
  1303c4:	e1d338b0 	ldrh	r3, [r3, #128]	; 0x80
  1303c8:	e2833001 	add	r3, r3, #1
  1303cc:	e6ff2073 	uxth	r2, r3
  1303d0:	e30e3a14 	movw	r3, #59924	; 0xea14
  1303d4:	e3403056 	movt	r3, #86	; 0x56
  1303d8:	e1c328b0 	strh	r2, [r3, #128]	; 0x80
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
  1303dc:	ea0000c9 	b	130708 <igmp_input+0x39c>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print(IGMP_DEBUG, &(ip4_current_header()->dest));
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
  1303e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1303e4:	e5933004 	ldr	r3, [r3, #4]
  1303e8:	e50b3010 	str	r3, [fp, #-16]
  if (inet_chksum(igmp, p->len)) {
  1303ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1303f0:	e1d330ba 	ldrh	r3, [r3, #10]
  1303f4:	e1a01003 	mov	r1, r3
  1303f8:	e51b0010 	ldr	r0, [fp, #-16]
  1303fc:	ebffa186 	bl	118a1c <inet_chksum>
  130400:	e1a03000 	mov	r3, r0
  130404:	e3530000 	cmp	r3, #0
  130408:	0a00000a 	beq	130438 <igmp_input+0xcc>
    pbuf_free(p);
  13040c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  130410:	ebffaaa9 	bl	11aebc <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
  130414:	e30e3a14 	movw	r3, #59924	; 0xea14
  130418:	e3403056 	movt	r3, #86	; 0x56
  13041c:	e1d337be 	ldrh	r3, [r3, #126]	; 0x7e
  130420:	e2833001 	add	r3, r3, #1
  130424:	e6ff2073 	uxth	r2, r3
  130428:	e30e3a14 	movw	r3, #59924	; 0xea14
  13042c:	e3403056 	movt	r3, #86	; 0x56
  130430:	e1c327be 	strh	r2, [r3, #126]	; 0x7e
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
  130434:	ea0000b3 	b	130708 <igmp_input+0x39c>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
  130438:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  13043c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  130440:	ebffff28 	bl	1300e8 <igmp_lookfor_group>
  130444:	e50b0008 	str	r0, [fp, #-8]

  /* If group can be found or create... */
  if (!group) {
  130448:	e51b3008 	ldr	r3, [fp, #-8]
  13044c:	e3530000 	cmp	r3, #0
  130450:	1a00000a 	bne	130480 <igmp_input+0x114>
    pbuf_free(p);
  130454:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  130458:	ebffaa97 	bl	11aebc <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
  13045c:	e30e3a14 	movw	r3, #59924	; 0xea14
  130460:	e3403056 	movt	r3, #86	; 0x56
  130464:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  130468:	e2833001 	add	r3, r3, #1
  13046c:	e6ff2073 	uxth	r2, r3
  130470:	e30e3a14 	movw	r3, #59924	; 0xea14
  130474:	e3403056 	movt	r3, #86	; 0x56
  130478:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
  13047c:	ea0000a1 	b	130708 <igmp_input+0x39c>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
  130480:	e51b3010 	ldr	r3, [fp, #-16]
  130484:	e5d33000 	ldrb	r3, [r3]
  130488:	e3530011 	cmp	r3, #17
  13048c:	0a000002 	beq	13049c <igmp_input+0x130>
  130490:	e3530016 	cmp	r3, #22
  130494:	0a000078 	beq	13067c <igmp_input+0x310>
  130498:	ea00008d 	b	1306d4 <igmp_input+0x368>
  case IGMP_MEMB_QUERY:
    /* IGMP_MEMB_QUERY to the "all systems" address ? */
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  13049c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1304a0:	e5932000 	ldr	r2, [r3]
  1304a4:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  1304a8:	e3403014 	movt	r3, #20
  1304ac:	e5933000 	ldr	r3, [r3]
  1304b0:	e1520003 	cmp	r2, r3
  1304b4:	1a000035 	bne	130590 <igmp_input+0x224>
  1304b8:	e51b3010 	ldr	r3, [fp, #-16]
  1304bc:	e2833004 	add	r3, r3, #4
  1304c0:	e3530000 	cmp	r3, #0
  1304c4:	0a000003 	beq	1304d8 <igmp_input+0x16c>
  1304c8:	e51b3010 	ldr	r3, [fp, #-16]
  1304cc:	e5933004 	ldr	r3, [r3, #4]
  1304d0:	e3530000 	cmp	r3, #0
  1304d4:	1a00002d 	bne	130590 <igmp_input+0x224>
      /* THIS IS THE GENERAL QUERY */
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));

      if (igmp->igmp_maxresp == 0) {
  1304d8:	e51b3010 	ldr	r3, [fp, #-16]
  1304dc:	e5d33001 	ldrb	r3, [r3, #1]
  1304e0:	e3530000 	cmp	r3, #0
  1304e4:	1a00000b 	bne	130518 <igmp_input+0x1ac>
        IGMP_STATS_INC(igmp.rx_v1);
  1304e8:	e30e3a14 	movw	r3, #59924	; 0xea14
  1304ec:	e3403056 	movt	r3, #86	; 0x56
  1304f0:	e1d338b6 	ldrh	r3, [r3, #134]	; 0x86
  1304f4:	e2833001 	add	r3, r3, #1
  1304f8:	e6ff2073 	uxth	r2, r3
  1304fc:	e30e3a14 	movw	r3, #59924	; 0xea14
  130500:	e3403056 	movt	r3, #86	; 0x56
  130504:	e1c328b6 	strh	r2, [r3, #134]	; 0x86
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: got an all hosts query with time== 0 - this is V1 and not implemented - treat as v2\n"));
        igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
  130508:	e51b3010 	ldr	r3, [fp, #-16]
  13050c:	e3a0200a 	mov	r2, #10
  130510:	e5c32001 	strb	r2, [r3, #1]
  130514:	ea000007 	b	130538 <igmp_input+0x1cc>
      } else {
        IGMP_STATS_INC(igmp.rx_general);
  130518:	e30e3a14 	movw	r3, #59924	; 0xea14
  13051c:	e3403056 	movt	r3, #86	; 0x56
  130520:	e1d338ba 	ldrh	r3, [r3, #138]	; 0x8a
  130524:	e2833001 	add	r3, r3, #1
  130528:	e6ff2073 	uxth	r2, r3
  13052c:	e30e3a14 	movw	r3, #59924	; 0xea14
  130530:	e3403056 	movt	r3, #86	; 0x56
  130534:	e1c328ba 	strh	r2, [r3, #138]	; 0x8a
      }

      groupref = netif_igmp_data(inp);
  130538:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13053c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130540:	e50b300c 	str	r3, [fp, #-12]
      
      /* Do not send messages on the all systems group address! */
      /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
      if(groupref != NULL) {
  130544:	e51b300c 	ldr	r3, [fp, #-12]
  130548:	e3530000 	cmp	r3, #0
  13054c:	0a00000b 	beq	130580 <igmp_input+0x214>
        groupref = groupref->next;
  130550:	e51b300c 	ldr	r3, [fp, #-12]
  130554:	e5933000 	ldr	r3, [r3]
  130558:	e50b300c 	str	r3, [fp, #-12]
      }

      while (groupref) {
  13055c:	ea000007 	b	130580 <igmp_input+0x214>
        igmp_delaying_member(groupref, igmp->igmp_maxresp);
  130560:	e51b3010 	ldr	r3, [fp, #-16]
  130564:	e5d33001 	ldrb	r3, [r3, #1]
  130568:	e1a01003 	mov	r1, r3
  13056c:	e51b000c 	ldr	r0, [fp, #-12]
  130570:	eb000246 	bl	130e90 <igmp_delaying_member>
        groupref = groupref->next;
  130574:	e51b300c 	ldr	r3, [fp, #-12]
  130578:	e5933000 	ldr	r3, [r3]
  13057c:	e50b300c 	str	r3, [fp, #-12]
      while (groupref) {
  130580:	e51b300c 	ldr	r3, [fp, #-12]
  130584:	e3530000 	cmp	r3, #0
  130588:	1afffff4 	bne	130560 <igmp_input+0x1f4>
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  13058c:	ea000039 	b	130678 <igmp_input+0x30c>
      }
    } else {
      /* IGMP_MEMB_QUERY to a specific group ? */
      if (!ip4_addr_isany(&igmp->igmp_group_address)) {
  130590:	e51b3010 	ldr	r3, [fp, #-16]
  130594:	e2833004 	add	r3, r3, #4
  130598:	e3530000 	cmp	r3, #0
  13059c:	0a00002c 	beq	130654 <igmp_input+0x2e8>
  1305a0:	e51b3010 	ldr	r3, [fp, #-16]
  1305a4:	e5933004 	ldr	r3, [r3, #4]
  1305a8:	e3530000 	cmp	r3, #0
  1305ac:	0a000028 	beq	130654 <igmp_input+0x2e8>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_MEMB_QUERY to a specific group "));
        ip4_addr_debug_print(IGMP_DEBUG, &igmp->igmp_group_address);
        if (ip4_addr_cmp(dest, &allsystems)) {
  1305b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1305b4:	e5932000 	ldr	r2, [r3]
  1305b8:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  1305bc:	e3403014 	movt	r3, #20
  1305c0:	e5933000 	ldr	r3, [r3]
  1305c4:	e1520003 	cmp	r2, r3
  1305c8:	1a000007 	bne	1305ec <igmp_input+0x280>
          ip4_addr_t groupaddr;
          LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
          /* we first need to re-look for the group since we used dest last time */
          ip4_addr_copy(groupaddr, igmp->igmp_group_address);
  1305cc:	e51b3010 	ldr	r3, [fp, #-16]
  1305d0:	e5933004 	ldr	r3, [r3, #4]
  1305d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
          group = igmp_lookfor_group(inp, &groupaddr);
  1305d8:	e24b3014 	sub	r3, fp, #20
  1305dc:	e1a01003 	mov	r1, r3
  1305e0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1305e4:	ebfffebf 	bl	1300e8 <igmp_lookfor_group>
  1305e8:	e50b0008 	str	r0, [fp, #-8]
        } else {
          LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
        }

        if (group != NULL) {
  1305ec:	e51b3008 	ldr	r3, [fp, #-8]
  1305f0:	e3530000 	cmp	r3, #0
  1305f4:	0a00000d 	beq	130630 <igmp_input+0x2c4>
          IGMP_STATS_INC(igmp.rx_group);
  1305f8:	e30e3a14 	movw	r3, #59924	; 0xea14
  1305fc:	e3403056 	movt	r3, #86	; 0x56
  130600:	e1d338b8 	ldrh	r3, [r3, #136]	; 0x88
  130604:	e2833001 	add	r3, r3, #1
  130608:	e6ff2073 	uxth	r2, r3
  13060c:	e30e3a14 	movw	r3, #59924	; 0xea14
  130610:	e3403056 	movt	r3, #86	; 0x56
  130614:	e1c328b8 	strh	r2, [r3, #136]	; 0x88
          igmp_delaying_member(group, igmp->igmp_maxresp);
  130618:	e51b3010 	ldr	r3, [fp, #-16]
  13061c:	e5d33001 	ldrb	r3, [r3, #1]
  130620:	e1a01003 	mov	r1, r3
  130624:	e51b0008 	ldr	r0, [fp, #-8]
  130628:	eb000218 	bl	130e90 <igmp_delaying_member>
        if (group != NULL) {
  13062c:	ea000011 	b	130678 <igmp_input+0x30c>
        } else {
          IGMP_STATS_INC(igmp.drop);
  130630:	e30e3a14 	movw	r3, #59924	; 0xea14
  130634:	e3403056 	movt	r3, #86	; 0x56
  130638:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  13063c:	e2833001 	add	r3, r3, #1
  130640:	e6ff2073 	uxth	r2, r3
  130644:	e30e3a14 	movw	r3, #59924	; 0xea14
  130648:	e3403056 	movt	r3, #86	; 0x56
  13064c:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
        if (group != NULL) {
  130650:	ea000008 	b	130678 <igmp_input+0x30c>
        }
      } else {
        IGMP_STATS_INC(igmp.proterr);
  130654:	e30e3a14 	movw	r3, #59924	; 0xea14
  130658:	e3403056 	movt	r3, #86	; 0x56
  13065c:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  130660:	e2833001 	add	r3, r3, #1
  130664:	e6ff2073 	uxth	r2, r3
  130668:	e30e3a14 	movw	r3, #59924	; 0xea14
  13066c:	e3403056 	movt	r3, #86	; 0x56
  130670:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
      }
    }
    break;
  130674:	ea000020 	b	1306fc <igmp_input+0x390>
  130678:	ea00001f 	b	1306fc <igmp_input+0x390>
  case IGMP_V2_MEMB_REPORT:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));
    IGMP_STATS_INC(igmp.rx_report);
  13067c:	e30e3a14 	movw	r3, #59924	; 0xea14
  130680:	e3403056 	movt	r3, #86	; 0x56
  130684:	e1d338bc 	ldrh	r3, [r3, #140]	; 0x8c
  130688:	e2833001 	add	r3, r3, #1
  13068c:	e6ff2073 	uxth	r2, r3
  130690:	e30e3a14 	movw	r3, #59924	; 0xea14
  130694:	e3403056 	movt	r3, #86	; 0x56
  130698:	e1c328bc 	strh	r2, [r3, #140]	; 0x8c
    if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
  13069c:	e51b3008 	ldr	r3, [fp, #-8]
  1306a0:	e5d33009 	ldrb	r3, [r3, #9]
  1306a4:	e3530001 	cmp	r3, #1
  1306a8:	1a000012 	bne	1306f8 <igmp_input+0x38c>
      /* This is on a specific group we have already looked up */
      group->timer = 0; /* stopped */
  1306ac:	e51b3008 	ldr	r3, [fp, #-8]
  1306b0:	e3a02000 	mov	r2, #0
  1306b4:	e1c320ba 	strh	r2, [r3, #10]
      group->group_state = IGMP_GROUP_IDLE_MEMBER;
  1306b8:	e51b3008 	ldr	r3, [fp, #-8]
  1306bc:	e3a02002 	mov	r2, #2
  1306c0:	e5c32009 	strb	r2, [r3, #9]
      group->last_reporter_flag = 0;
  1306c4:	e51b3008 	ldr	r3, [fp, #-8]
  1306c8:	e3a02000 	mov	r2, #0
  1306cc:	e5c32008 	strb	r2, [r3, #8]
    }
    break;
  1306d0:	ea000008 	b	1306f8 <igmp_input+0x38c>
  default:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
      igmp->igmp_msgtype, group->group_state, (void*)&group, (void*)inp));
    IGMP_STATS_INC(igmp.proterr);
  1306d4:	e30e3a14 	movw	r3, #59924	; 0xea14
  1306d8:	e3403056 	movt	r3, #86	; 0x56
  1306dc:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  1306e0:	e2833001 	add	r3, r3, #1
  1306e4:	e6ff2073 	uxth	r2, r3
  1306e8:	e30e3a14 	movw	r3, #59924	; 0xea14
  1306ec:	e3403056 	movt	r3, #86	; 0x56
  1306f0:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
    break;
  1306f4:	ea000000 	b	1306fc <igmp_input+0x390>
    break;
  1306f8:	e320f000 	nop	{0}
  }

  pbuf_free(p);
  1306fc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  130700:	ebffa9ed 	bl	11aebc <pbuf_free>
  return;
  130704:	e320f000 	nop	{0}
}
  130708:	e24bd004 	sub	sp, fp, #4
  13070c:	e8bd8800 	pop	{fp, pc}

00130710 <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  130710:	e92d4800 	push	{fp, lr}
  130714:	e28db004 	add	fp, sp, #4
  130718:	e24dd010 	sub	sp, sp, #16
  13071c:	e50b0010 	str	r0, [fp, #-16]
  130720:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_VAL; /* no matching interface */
  130724:	e3e03005 	mvn	r3, #5
  130728:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  13072c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130730:	e5933000 	ldr	r3, [r3]
  130734:	e20330f0 	and	r3, r3, #240	; 0xf0
  130738:	e35300e0 	cmp	r3, #224	; 0xe0
  13073c:	0a000008 	beq	130764 <igmp_joingroup+0x54>
  130740:	e3090624 	movw	r0, #38436	; 0x9624
  130744:	e3400014 	movt	r0, #20
  130748:	ebff4a71 	bl	103114 <rt_kprintf>
  13074c:	e30011c7 	movw	r1, #455	; 0x1c7
  130750:	e3090578 	movw	r0, #38264	; 0x9578
  130754:	e3400014 	movt	r0, #20
  130758:	ebff6a64 	bl	10b0f0 <sys_arch_assert>
  13075c:	e3e03005 	mvn	r3, #5
  130760:	ea000038 	b	130848 <igmp_joingroup+0x138>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130764:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130768:	e5932000 	ldr	r2, [r3]
  13076c:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  130770:	e3403014 	movt	r3, #20
  130774:	e5933000 	ldr	r3, [r3]
  130778:	e1520003 	cmp	r2, r3
  13077c:	1a000008 	bne	1307a4 <igmp_joingroup+0x94>
  130780:	e309065c 	movw	r0, #38492	; 0x965c
  130784:	e3400014 	movt	r0, #20
  130788:	ebff4a61 	bl	103114 <rt_kprintf>
  13078c:	e3a01f72 	mov	r1, #456	; 0x1c8
  130790:	e3090578 	movw	r0, #38264	; 0x9578
  130794:	e3400014 	movt	r0, #20
  130798:	ebff6a54 	bl	10b0f0 <sys_arch_assert>
  13079c:	e3e03005 	mvn	r3, #5
  1307a0:	ea000028 	b	130848 <igmp_joingroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  1307a4:	e30e3a08 	movw	r3, #59912	; 0xea08
  1307a8:	e3403056 	movt	r3, #86	; 0x56
  1307ac:	e5933000 	ldr	r3, [r3]
  1307b0:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  1307b4:	ea00001f 	b	130838 <igmp_joingroup+0x128>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  1307b8:	e51b300c 	ldr	r3, [fp, #-12]
  1307bc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1307c0:	e2033020 	and	r3, r3, #32
  1307c4:	e3530000 	cmp	r3, #0
  1307c8:	0a000017 	beq	13082c <igmp_joingroup+0x11c>
  1307cc:	e51b3010 	ldr	r3, [fp, #-16]
  1307d0:	e3530000 	cmp	r3, #0
  1307d4:	0a00000a 	beq	130804 <igmp_joingroup+0xf4>
  1307d8:	e51b3010 	ldr	r3, [fp, #-16]
  1307dc:	e5933000 	ldr	r3, [r3]
  1307e0:	e3530000 	cmp	r3, #0
  1307e4:	0a000006 	beq	130804 <igmp_joingroup+0xf4>
  1307e8:	e51b300c 	ldr	r3, [fp, #-12]
  1307ec:	e2833004 	add	r3, r3, #4
  1307f0:	e5932000 	ldr	r2, [r3]
  1307f4:	e51b3010 	ldr	r3, [fp, #-16]
  1307f8:	e5933000 	ldr	r3, [r3]
  1307fc:	e1520003 	cmp	r2, r3
  130800:	1a000009 	bne	13082c <igmp_joingroup+0x11c>
      err = igmp_joingroup_netif(netif, groupaddr);
  130804:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130808:	e51b000c 	ldr	r0, [fp, #-12]
  13080c:	eb000010 	bl	130854 <igmp_joingroup_netif>
  130810:	e1a03000 	mov	r3, r0
  130814:	e54b3005 	strb	r3, [fp, #-5]
      if (err != ERR_OK) {
  130818:	e15b30d5 	ldrsb	r3, [fp, #-5]
  13081c:	e3530000 	cmp	r3, #0
  130820:	0a000001 	beq	13082c <igmp_joingroup+0x11c>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
  130824:	e15b30d5 	ldrsb	r3, [fp, #-5]
  130828:	ea000006 	b	130848 <igmp_joingroup+0x138>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  13082c:	e51b300c 	ldr	r3, [fp, #-12]
  130830:	e5933000 	ldr	r3, [r3]
  130834:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130838:	e51b300c 	ldr	r3, [fp, #-12]
  13083c:	e3530000 	cmp	r3, #0
  130840:	1affffdc 	bne	1307b8 <igmp_joingroup+0xa8>
  }

  return err;
  130844:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  130848:	e1a00003 	mov	r0, r3
  13084c:	e24bd004 	sub	sp, fp, #4
  130850:	e8bd8800 	pop	{fp, pc}

00130854 <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  130854:	e92d4800 	push	{fp, lr}
  130858:	e28db004 	add	fp, sp, #4
  13085c:	e24dd010 	sub	sp, sp, #16
  130860:	e50b0010 	str	r0, [fp, #-16]
  130864:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130868:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13086c:	e5933000 	ldr	r3, [r3]
  130870:	e20330f0 	and	r3, r3, #240	; 0xf0
  130874:	e35300e0 	cmp	r3, #224	; 0xe0
  130878:	0a000008 	beq	1308a0 <igmp_joingroup_netif+0x4c>
  13087c:	e3090690 	movw	r0, #38544	; 0x9690
  130880:	e3400014 	movt	r0, #20
  130884:	ebff4a22 	bl	103114 <rt_kprintf>
  130888:	e30011eb 	movw	r1, #491	; 0x1eb
  13088c:	e3090578 	movw	r0, #38264	; 0x9578
  130890:	e3400014 	movt	r0, #20
  130894:	ebff6a15 	bl	10b0f0 <sys_arch_assert>
  130898:	e3e03005 	mvn	r3, #5
  13089c:	ea000051 	b	1309e8 <igmp_joingroup_netif+0x194>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  1308a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1308a4:	e5932000 	ldr	r2, [r3]
  1308a8:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  1308ac:	e3403014 	movt	r3, #20
  1308b0:	e5933000 	ldr	r3, [r3]
  1308b4:	e1520003 	cmp	r2, r3
  1308b8:	1a000008 	bne	1308e0 <igmp_joingroup_netif+0x8c>
  1308bc:	e30906cc 	movw	r0, #38604	; 0x96cc
  1308c0:	e3400014 	movt	r0, #20
  1308c4:	ebff4a12 	bl	103114 <rt_kprintf>
  1308c8:	e3a01f7b 	mov	r1, #492	; 0x1ec
  1308cc:	e3090578 	movw	r0, #38264	; 0x9578
  1308d0:	e3400014 	movt	r0, #20
  1308d4:	ebff6a05 	bl	10b0f0 <sys_arch_assert>
  1308d8:	e3e03005 	mvn	r3, #5
  1308dc:	ea000041 	b	1309e8 <igmp_joingroup_netif+0x194>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  1308e0:	e51b3010 	ldr	r3, [fp, #-16]
  1308e4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1308e8:	e2033020 	and	r3, r3, #32
  1308ec:	e3530000 	cmp	r3, #0
  1308f0:	1a000008 	bne	130918 <igmp_joingroup_netif+0xc4>
  1308f4:	e3090708 	movw	r0, #38664	; 0x9708
  1308f8:	e3400014 	movt	r0, #20
  1308fc:	ebff4a04 	bl	103114 <rt_kprintf>
  130900:	e30011ef 	movw	r1, #495	; 0x1ef
  130904:	e3090578 	movw	r0, #38264	; 0x9578
  130908:	e3400014 	movt	r0, #20
  13090c:	ebff69f7 	bl	10b0f0 <sys_arch_assert>
  130910:	e3e03005 	mvn	r3, #5
  130914:	ea000033 	b	1309e8 <igmp_joingroup_netif+0x194>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
  130918:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13091c:	e51b0010 	ldr	r0, [fp, #-16]
  130920:	ebfffe0c 	bl	130158 <igmp_lookup_group>
  130924:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  130928:	e51b3008 	ldr	r3, [fp, #-8]
  13092c:	e3530000 	cmp	r3, #0
  130930:	0a00002b 	beq	1309e4 <igmp_joingroup_netif+0x190>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
  130934:	e51b3008 	ldr	r3, [fp, #-8]
  130938:	e5d33009 	ldrb	r3, [r3, #9]
  13093c:	e3530000 	cmp	r3, #0
  130940:	1a00001f 	bne	1309c4 <igmp_joingroup_netif+0x170>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use==0) && (netif->igmp_mac_filter != NULL)) {
  130944:	e51b3008 	ldr	r3, [fp, #-8]
  130948:	e5d3300c 	ldrb	r3, [r3, #12]
  13094c:	e3530000 	cmp	r3, #0
  130950:	1a000009 	bne	13097c <igmp_joingroup_netif+0x128>
  130954:	e51b3010 	ldr	r3, [fp, #-16]
  130958:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  13095c:	e3530000 	cmp	r3, #0
  130960:	0a000005 	beq	13097c <igmp_joingroup_netif+0x128>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
  130964:	e51b3010 	ldr	r3, [fp, #-16]
  130968:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  13096c:	e3a02001 	mov	r2, #1
  130970:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130974:	e51b0010 	ldr	r0, [fp, #-16]
  130978:	e12fff33 	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
  13097c:	e30e3a14 	movw	r3, #59924	; 0xea14
  130980:	e3403056 	movt	r3, #86	; 0x56
  130984:	e1d338be 	ldrh	r3, [r3, #142]	; 0x8e
  130988:	e2833001 	add	r3, r3, #1
  13098c:	e6ff2073 	uxth	r2, r3
  130990:	e30e3a14 	movw	r3, #59924	; 0xea14
  130994:	e3403056 	movt	r3, #86	; 0x56
  130998:	e1c328be 	strh	r2, [r3, #142]	; 0x8e
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  13099c:	e3a02016 	mov	r2, #22
  1309a0:	e51b1008 	ldr	r1, [fp, #-8]
  1309a4:	e51b0010 	ldr	r0, [fp, #-16]
  1309a8:	eb000180 	bl	130fb0 <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  1309ac:	e3a01005 	mov	r1, #5
  1309b0:	e51b0008 	ldr	r0, [fp, #-8]
  1309b4:	eb000116 	bl	130e14 <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  1309b8:	e51b3008 	ldr	r3, [fp, #-8]
  1309bc:	e3a02001 	mov	r2, #1
  1309c0:	e5c32009 	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
  1309c4:	e51b3008 	ldr	r3, [fp, #-8]
  1309c8:	e5d3300c 	ldrb	r3, [r3, #12]
  1309cc:	e2833001 	add	r3, r3, #1
  1309d0:	e6ef2073 	uxtb	r2, r3
  1309d4:	e51b3008 	ldr	r3, [fp, #-8]
  1309d8:	e5c3200c 	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
  1309dc:	e3a03000 	mov	r3, #0
  1309e0:	ea000000 	b	1309e8 <igmp_joingroup_netif+0x194>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
  1309e4:	e3e03000 	mvn	r3, #0
  }
}
  1309e8:	e1a00003 	mov	r0, r3
  1309ec:	e24bd004 	sub	sp, fp, #4
  1309f0:	e8bd8800 	pop	{fp, pc}

001309f4 <igmp_leavegroup>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif(s), an err_t otherwise
 */
err_t
igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  1309f4:	e92d4800 	push	{fp, lr}
  1309f8:	e28db004 	add	fp, sp, #4
  1309fc:	e24dd018 	sub	sp, sp, #24
  130a00:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  130a04:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  err_t err = ERR_VAL; /* no matching interface */
  130a08:	e3e03005 	mvn	r3, #5
  130a0c:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130a10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130a14:	e5933000 	ldr	r3, [r3]
  130a18:	e20330f0 	and	r3, r3, #240	; 0xf0
  130a1c:	e35300e0 	cmp	r3, #224	; 0xe0
  130a20:	0a000008 	beq	130a48 <igmp_leavegroup+0x54>
  130a24:	e3090740 	movw	r0, #38720	; 0x9740
  130a28:	e3400014 	movt	r0, #20
  130a2c:	ebff49b8 	bl	103114 <rt_kprintf>
  130a30:	e3001227 	movw	r1, #551	; 0x227
  130a34:	e3090578 	movw	r0, #38264	; 0x9578
  130a38:	e3400014 	movt	r0, #20
  130a3c:	ebff69ab 	bl	10b0f0 <sys_arch_assert>
  130a40:	e3e03005 	mvn	r3, #5
  130a44:	ea000038 	b	130b2c <igmp_leavegroup+0x138>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130a48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130a4c:	e5932000 	ldr	r2, [r3]
  130a50:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  130a54:	e3403014 	movt	r3, #20
  130a58:	e5933000 	ldr	r3, [r3]
  130a5c:	e1520003 	cmp	r2, r3
  130a60:	1a000008 	bne	130a88 <igmp_leavegroup+0x94>
  130a64:	e3090778 	movw	r0, #38776	; 0x9778
  130a68:	e3400014 	movt	r0, #20
  130a6c:	ebff49a8 	bl	103114 <rt_kprintf>
  130a70:	e3a01f8a 	mov	r1, #552	; 0x228
  130a74:	e3090578 	movw	r0, #38264	; 0x9578
  130a78:	e3400014 	movt	r0, #20
  130a7c:	ebff699b 	bl	10b0f0 <sys_arch_assert>
  130a80:	e3e03005 	mvn	r3, #5
  130a84:	ea000028 	b	130b2c <igmp_leavegroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  130a88:	e30e3a08 	movw	r3, #59912	; 0xea08
  130a8c:	e3403056 	movt	r3, #86	; 0x56
  130a90:	e5933000 	ldr	r3, [r3]
  130a94:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130a98:	ea00001f 	b	130b1c <igmp_leavegroup+0x128>
    /* Should we leave this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  130a9c:	e51b300c 	ldr	r3, [fp, #-12]
  130aa0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130aa4:	e2033020 	and	r3, r3, #32
  130aa8:	e3530000 	cmp	r3, #0
  130aac:	0a000017 	beq	130b10 <igmp_leavegroup+0x11c>
  130ab0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130ab4:	e3530000 	cmp	r3, #0
  130ab8:	0a00000a 	beq	130ae8 <igmp_leavegroup+0xf4>
  130abc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130ac0:	e5933000 	ldr	r3, [r3]
  130ac4:	e3530000 	cmp	r3, #0
  130ac8:	0a000006 	beq	130ae8 <igmp_leavegroup+0xf4>
  130acc:	e51b300c 	ldr	r3, [fp, #-12]
  130ad0:	e2833004 	add	r3, r3, #4
  130ad4:	e5932000 	ldr	r2, [r3]
  130ad8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130adc:	e5933000 	ldr	r3, [r3]
  130ae0:	e1520003 	cmp	r2, r3
  130ae4:	1a000009 	bne	130b10 <igmp_leavegroup+0x11c>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
  130ae8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  130aec:	e51b000c 	ldr	r0, [fp, #-12]
  130af0:	eb000010 	bl	130b38 <igmp_leavegroup_netif>
  130af4:	e1a03000 	mov	r3, r0
  130af8:	e54b300d 	strb	r3, [fp, #-13]
      if (err != ERR_OK) {
  130afc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  130b00:	e3530000 	cmp	r3, #0
  130b04:	0a000001 	beq	130b10 <igmp_leavegroup+0x11c>
        /* Store this result if we have not yet gotten a success */
        err = res;
  130b08:	e55b300d 	ldrb	r3, [fp, #-13]
  130b0c:	e54b3005 	strb	r3, [fp, #-5]
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  130b10:	e51b300c 	ldr	r3, [fp, #-12]
  130b14:	e5933000 	ldr	r3, [r3]
  130b18:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130b1c:	e51b300c 	ldr	r3, [fp, #-12]
  130b20:	e3530000 	cmp	r3, #0
  130b24:	1affffdc 	bne	130a9c <igmp_leavegroup+0xa8>
  }

  return err;
  130b28:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  130b2c:	e1a00003 	mov	r0, r3
  130b30:	e24bd004 	sub	sp, fp, #4
  130b34:	e8bd8800 	pop	{fp, pc}

00130b38 <igmp_leavegroup_netif>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif, an err_t otherwise
 */
err_t
igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  130b38:	e92d4800 	push	{fp, lr}
  130b3c:	e28db004 	add	fp, sp, #4
  130b40:	e24dd010 	sub	sp, sp, #16
  130b44:	e50b0010 	str	r0, [fp, #-16]
  130b48:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130b4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130b50:	e5933000 	ldr	r3, [r3]
  130b54:	e20330f0 	and	r3, r3, #240	; 0xf0
  130b58:	e35300e0 	cmp	r3, #224	; 0xe0
  130b5c:	0a000008 	beq	130b84 <igmp_leavegroup_netif+0x4c>
  130b60:	e30907b0 	movw	r0, #38832	; 0x97b0
  130b64:	e3400014 	movt	r0, #20
  130b68:	ebff4969 	bl	103114 <rt_kprintf>
  130b6c:	e300124a 	movw	r1, #586	; 0x24a
  130b70:	e3090578 	movw	r0, #38264	; 0x9578
  130b74:	e3400014 	movt	r0, #20
  130b78:	ebff695c 	bl	10b0f0 <sys_arch_assert>
  130b7c:	e3e03005 	mvn	r3, #5
  130b80:	ea000052 	b	130cd0 <igmp_leavegroup_netif+0x198>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130b84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130b88:	e5932000 	ldr	r2, [r3]
  130b8c:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  130b90:	e3403014 	movt	r3, #20
  130b94:	e5933000 	ldr	r3, [r3]
  130b98:	e1520003 	cmp	r2, r3
  130b9c:	1a000008 	bne	130bc4 <igmp_leavegroup_netif+0x8c>
  130ba0:	e30907f0 	movw	r0, #38896	; 0x97f0
  130ba4:	e3400014 	movt	r0, #20
  130ba8:	ebff4959 	bl	103114 <rt_kprintf>
  130bac:	e300124b 	movw	r1, #587	; 0x24b
  130bb0:	e3090578 	movw	r0, #38264	; 0x9578
  130bb4:	e3400014 	movt	r0, #20
  130bb8:	ebff694c 	bl	10b0f0 <sys_arch_assert>
  130bbc:	e3e03005 	mvn	r3, #5
  130bc0:	ea000042 	b	130cd0 <igmp_leavegroup_netif+0x198>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  130bc4:	e51b3010 	ldr	r3, [fp, #-16]
  130bc8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130bcc:	e2033020 	and	r3, r3, #32
  130bd0:	e3530000 	cmp	r3, #0
  130bd4:	1a000008 	bne	130bfc <igmp_leavegroup_netif+0xc4>
  130bd8:	e309082c 	movw	r0, #38956	; 0x982c
  130bdc:	e3400014 	movt	r0, #20
  130be0:	ebff494b 	bl	103114 <rt_kprintf>
  130be4:	e300124e 	movw	r1, #590	; 0x24e
  130be8:	e3090578 	movw	r0, #38264	; 0x9578
  130bec:	e3400014 	movt	r0, #20
  130bf0:	ebff693e 	bl	10b0f0 <sys_arch_assert>
  130bf4:	e3e03005 	mvn	r3, #5
  130bf8:	ea000034 	b	130cd0 <igmp_leavegroup_netif+0x198>

  /* find group */
  group = igmp_lookfor_group(netif, groupaddr);
  130bfc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130c00:	e51b0010 	ldr	r0, [fp, #-16]
  130c04:	ebfffd37 	bl	1300e8 <igmp_lookfor_group>
  130c08:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  130c0c:	e51b3008 	ldr	r3, [fp, #-8]
  130c10:	e3530000 	cmp	r3, #0
  130c14:	0a00002c 	beq	130ccc <igmp_leavegroup_netif+0x194>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: Leaving group: "));
    ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
    LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

    /* If there is no other use of the group */
    if (group->use <= 1) {
  130c18:	e51b3008 	ldr	r3, [fp, #-8]
  130c1c:	e5d3300c 	ldrb	r3, [r3, #12]
  130c20:	e3530001 	cmp	r3, #1
  130c24:	8a000020 	bhi	130cac <igmp_leavegroup_netif+0x174>
      /* Remove the group from the list */
      igmp_remove_group(netif, group);
  130c28:	e51b1008 	ldr	r1, [fp, #-8]
  130c2c:	e51b0010 	ldr	r0, [fp, #-16]
  130c30:	ebfffda8 	bl	1302d8 <igmp_remove_group>

      /* If we are the last reporter for this group */
      if (group->last_reporter_flag) {
  130c34:	e51b3008 	ldr	r3, [fp, #-8]
  130c38:	e5d33008 	ldrb	r3, [r3, #8]
  130c3c:	e3530000 	cmp	r3, #0
  130c40:	0a00000b 	beq	130c74 <igmp_leavegroup_netif+0x13c>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: sending leaving group\n"));
        IGMP_STATS_INC(igmp.tx_leave);
  130c44:	e30e3a14 	movw	r3, #59924	; 0xea14
  130c48:	e3403056 	movt	r3, #86	; 0x56
  130c4c:	e1d339b0 	ldrh	r3, [r3, #144]	; 0x90
  130c50:	e2833001 	add	r3, r3, #1
  130c54:	e6ff2073 	uxth	r2, r3
  130c58:	e30e3a14 	movw	r3, #59924	; 0xea14
  130c5c:	e3403056 	movt	r3, #86	; 0x56
  130c60:	e1c329b0 	strh	r2, [r3, #144]	; 0x90
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
  130c64:	e3a02017 	mov	r2, #23
  130c68:	e51b1008 	ldr	r1, [fp, #-8]
  130c6c:	e51b0010 	ldr	r0, [fp, #-16]
  130c70:	eb0000ce 	bl	130fb0 <igmp_send>
      }

      /* Disable the group at the MAC level */
      if (netif->igmp_mac_filter != NULL) {
  130c74:	e51b3010 	ldr	r3, [fp, #-16]
  130c78:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130c7c:	e3530000 	cmp	r3, #0
  130c80:	0a000005 	beq	130c9c <igmp_leavegroup_netif+0x164>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: igmp_mac_filter(DEL "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
  130c84:	e51b3010 	ldr	r3, [fp, #-16]
  130c88:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130c8c:	e3a02000 	mov	r2, #0
  130c90:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130c94:	e51b0010 	ldr	r0, [fp, #-16]
  130c98:	e12fff33 	blx	r3
      }

      /* Free group struct */
      memp_free(MEMP_IGMP_GROUP, group);
  130c9c:	e51b1008 	ldr	r1, [fp, #-8]
  130ca0:	e3a0000c 	mov	r0, #12
  130ca4:	ebffa176 	bl	119284 <memp_free>
  130ca8:	ea000005 	b	130cc4 <igmp_leavegroup_netif+0x18c>
    } else {
      /* Decrement group use */
      group->use--;
  130cac:	e51b3008 	ldr	r3, [fp, #-8]
  130cb0:	e5d3300c 	ldrb	r3, [r3, #12]
  130cb4:	e2433001 	sub	r3, r3, #1
  130cb8:	e6ef2073 	uxtb	r2, r3
  130cbc:	e51b3008 	ldr	r3, [fp, #-8]
  130cc0:	e5c3200c 	strb	r2, [r3, #12]
    }
    return ERR_OK;
  130cc4:	e3a03000 	mov	r3, #0
  130cc8:	ea000000 	b	130cd0 <igmp_leavegroup_netif+0x198>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: not member of group\n"));
    return ERR_VAL;
  130ccc:	e3e03005 	mvn	r3, #5
  }
}
  130cd0:	e1a00003 	mov	r0, r3
  130cd4:	e24bd004 	sub	sp, fp, #4
  130cd8:	e8bd8800 	pop	{fp, pc}

00130cdc <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
  130cdc:	e92d4800 	push	{fp, lr}
  130ce0:	e28db004 	add	fp, sp, #4
  130ce4:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  130ce8:	e30e3a08 	movw	r3, #59912	; 0xea08
  130cec:	e3403056 	movt	r3, #86	; 0x56
  130cf0:	e5933000 	ldr	r3, [r3]
  130cf4:	e50b3008 	str	r3, [fp, #-8]

  while (netif != NULL) {
  130cf8:	ea00001d 	b	130d74 <igmp_tmr+0x98>
    struct igmp_group *group = netif_igmp_data(netif);
  130cfc:	e51b3008 	ldr	r3, [fp, #-8]
  130d00:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130d04:	e50b300c 	str	r3, [fp, #-12]

    while (group != NULL) {
  130d08:	ea000013 	b	130d5c <igmp_tmr+0x80>
      if (group->timer > 0) {
  130d0c:	e51b300c 	ldr	r3, [fp, #-12]
  130d10:	e1d330ba 	ldrh	r3, [r3, #10]
  130d14:	e3530000 	cmp	r3, #0
  130d18:	0a00000c 	beq	130d50 <igmp_tmr+0x74>
        group->timer--;
  130d1c:	e51b300c 	ldr	r3, [fp, #-12]
  130d20:	e1d330ba 	ldrh	r3, [r3, #10]
  130d24:	e2433001 	sub	r3, r3, #1
  130d28:	e6ff2073 	uxth	r2, r3
  130d2c:	e51b300c 	ldr	r3, [fp, #-12]
  130d30:	e1c320ba 	strh	r2, [r3, #10]
        if (group->timer == 0) {
  130d34:	e51b300c 	ldr	r3, [fp, #-12]
  130d38:	e1d330ba 	ldrh	r3, [r3, #10]
  130d3c:	e3530000 	cmp	r3, #0
  130d40:	1a000002 	bne	130d50 <igmp_tmr+0x74>
          igmp_timeout(netif, group);
  130d44:	e51b100c 	ldr	r1, [fp, #-12]
  130d48:	e51b0008 	ldr	r0, [fp, #-8]
  130d4c:	eb00000e 	bl	130d8c <igmp_timeout>
        }
      }
      group = group->next;
  130d50:	e51b300c 	ldr	r3, [fp, #-12]
  130d54:	e5933000 	ldr	r3, [r3]
  130d58:	e50b300c 	str	r3, [fp, #-12]
    while (group != NULL) {
  130d5c:	e51b300c 	ldr	r3, [fp, #-12]
  130d60:	e3530000 	cmp	r3, #0
  130d64:	1affffe8 	bne	130d0c <igmp_tmr+0x30>
    }
    netif = netif->next;
  130d68:	e51b3008 	ldr	r3, [fp, #-8]
  130d6c:	e5933000 	ldr	r3, [r3]
  130d70:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  130d74:	e51b3008 	ldr	r3, [fp, #-8]
  130d78:	e3530000 	cmp	r3, #0
  130d7c:	1affffde 	bne	130cfc <igmp_tmr+0x20>
  }
}
  130d80:	e320f000 	nop	{0}
  130d84:	e24bd004 	sub	sp, fp, #4
  130d88:	e8bd8800 	pop	{fp, pc}

00130d8c <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
  130d8c:	e92d4800 	push	{fp, lr}
  130d90:	e28db004 	add	fp, sp, #4
  130d94:	e24dd008 	sub	sp, sp, #8
  130d98:	e50b0008 	str	r0, [fp, #-8]
  130d9c:	e50b100c 	str	r1, [fp, #-12]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130da0:	e51b300c 	ldr	r3, [fp, #-12]
  130da4:	e5d33009 	ldrb	r3, [r3, #9]
  130da8:	e3530001 	cmp	r3, #1
  130dac:	1a000015 	bne	130e08 <igmp_timeout+0x7c>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
  130db0:	e51b300c 	ldr	r3, [fp, #-12]
  130db4:	e5932004 	ldr	r2, [r3, #4]
  130db8:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  130dbc:	e3403014 	movt	r3, #20
  130dc0:	e5933000 	ldr	r3, [r3]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130dc4:	e1520003 	cmp	r2, r3
  130dc8:	0a00000e 	beq	130e08 <igmp_timeout+0x7c>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print(IGMP_DEBUG, &(group->group_address));
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  130dcc:	e51b300c 	ldr	r3, [fp, #-12]
  130dd0:	e3a02002 	mov	r2, #2
  130dd4:	e5c32009 	strb	r2, [r3, #9]
    
    IGMP_STATS_INC(igmp.tx_report);
  130dd8:	e30e3a14 	movw	r3, #59924	; 0xea14
  130ddc:	e3403056 	movt	r3, #86	; 0x56
  130de0:	e1d339b2 	ldrh	r3, [r3, #146]	; 0x92
  130de4:	e2833001 	add	r3, r3, #1
  130de8:	e6ff2073 	uxth	r2, r3
  130dec:	e30e3a14 	movw	r3, #59924	; 0xea14
  130df0:	e3403056 	movt	r3, #86	; 0x56
  130df4:	e1c329b2 	strh	r2, [r3, #146]	; 0x92
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  130df8:	e3a02016 	mov	r2, #22
  130dfc:	e51b100c 	ldr	r1, [fp, #-12]
  130e00:	e51b0008 	ldr	r0, [fp, #-8]
  130e04:	eb000069 	bl	130fb0 <igmp_send>
  }
}
  130e08:	e320f000 	nop	{0}
  130e0c:	e24bd004 	sub	sp, fp, #4
  130e10:	e8bd8800 	pop	{fp, pc}

00130e14 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
  130e14:	e92d4800 	push	{fp, lr}
  130e18:	e28db004 	add	fp, sp, #4
  130e1c:	e24dd008 	sub	sp, sp, #8
  130e20:	e50b0008 	str	r0, [fp, #-8]
  130e24:	e1a03001 	mov	r3, r1
  130e28:	e54b3009 	strb	r3, [fp, #-9]
#ifdef LWIP_RAND
  group->timer = max_time > 2 ? (LWIP_RAND() % max_time) : 1;
  130e2c:	e55b3009 	ldrb	r3, [fp, #-9]
  130e30:	e3530002 	cmp	r3, #2
  130e34:	9a000008 	bls	130e5c <igmp_start_timer+0x48>
  130e38:	eb0034d5 	bl	13e194 <rand>
  130e3c:	e1a02000 	mov	r2, r0
  130e40:	e55b3009 	ldrb	r3, [fp, #-9]
  130e44:	e1a01003 	mov	r1, r3
  130e48:	e1a00002 	mov	r0, r2
  130e4c:	eb001f95 	bl	138ca8 <__aeabi_idivmod>
  130e50:	e1a03001 	mov	r3, r1
  130e54:	e6ff3073 	uxth	r3, r3
  130e58:	ea000000 	b	130e60 <igmp_start_timer+0x4c>
  130e5c:	e3a03001 	mov	r3, #1
  130e60:	e51b2008 	ldr	r2, [fp, #-8]
  130e64:	e1c230ba 	strh	r3, [r2, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
  130e68:	e51b3008 	ldr	r3, [fp, #-8]
  130e6c:	e1d330ba 	ldrh	r3, [r3, #10]
  130e70:	e3530000 	cmp	r3, #0
  130e74:	1a000002 	bne	130e84 <igmp_start_timer+0x70>
    group->timer = 1;
  130e78:	e51b3008 	ldr	r3, [fp, #-8]
  130e7c:	e3a02001 	mov	r2, #1
  130e80:	e1c320ba 	strh	r2, [r3, #10]
  }
}
  130e84:	e320f000 	nop	{0}
  130e88:	e24bd004 	sub	sp, fp, #4
  130e8c:	e8bd8800 	pop	{fp, pc}

00130e90 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
  130e90:	e92d4800 	push	{fp, lr}
  130e94:	e28db004 	add	fp, sp, #4
  130e98:	e24dd008 	sub	sp, sp, #8
  130e9c:	e50b0008 	str	r0, [fp, #-8]
  130ea0:	e1a03001 	mov	r3, r1
  130ea4:	e54b3009 	strb	r3, [fp, #-9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  130ea8:	e51b3008 	ldr	r3, [fp, #-8]
  130eac:	e5d33009 	ldrb	r3, [r3, #9]
  130eb0:	e3530002 	cmp	r3, #2
  130eb4:	0a00000d 	beq	130ef0 <igmp_delaying_member+0x60>
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130eb8:	e51b3008 	ldr	r3, [fp, #-8]
  130ebc:	e5d33009 	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  130ec0:	e3530001 	cmp	r3, #1
  130ec4:	1a000010 	bne	130f0c <igmp_delaying_member+0x7c>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  130ec8:	e51b3008 	ldr	r3, [fp, #-8]
  130ecc:	e1d330ba 	ldrh	r3, [r3, #10]
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130ed0:	e3530000 	cmp	r3, #0
  130ed4:	0a000005 	beq	130ef0 <igmp_delaying_member+0x60>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  130ed8:	e55b3009 	ldrb	r3, [fp, #-9]
  130edc:	e6ff2073 	uxth	r2, r3
  130ee0:	e51b3008 	ldr	r3, [fp, #-8]
  130ee4:	e1d330ba 	ldrh	r3, [r3, #10]
  130ee8:	e1520003 	cmp	r2, r3
  130eec:	2a000006 	bcs	130f0c <igmp_delaying_member+0x7c>
    igmp_start_timer(group, maxresp);
  130ef0:	e55b3009 	ldrb	r3, [fp, #-9]
  130ef4:	e1a01003 	mov	r1, r3
  130ef8:	e51b0008 	ldr	r0, [fp, #-8]
  130efc:	ebffffc4 	bl	130e14 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  130f00:	e51b3008 	ldr	r3, [fp, #-8]
  130f04:	e3a02001 	mov	r2, #1
  130f08:	e5c32009 	strb	r2, [r3, #9]
  }
}
  130f0c:	e320f000 	nop	{0}
  130f10:	e24bd004 	sub	sp, fp, #4
  130f14:	e8bd8800 	pop	{fp, pc}

00130f18 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
  130f18:	e92d4800 	push	{fp, lr}
  130f1c:	e28db004 	add	fp, sp, #4
  130f20:	e24dd030 	sub	sp, sp, #48	; 0x30
  130f24:	e50b0010 	str	r0, [fp, #-16]
  130f28:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  130f2c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  130f30:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
  130f34:	e3003494 	movw	r3, #1172	; 0x494
  130f38:	e14b30b8 	strh	r3, [fp, #-8]
  ra[1] = 0x0000; /* Router shall examine packet */
  130f3c:	e3a03000 	mov	r3, #0
  130f40:	e14b30b6 	strh	r3, [fp, #-6]
  IGMP_STATS_INC(igmp.xmit);
  130f44:	e30e3a14 	movw	r3, #59924	; 0xea14
  130f48:	e3403056 	movt	r3, #86	; 0x56
  130f4c:	e1d337b8 	ldrh	r3, [r3, #120]	; 0x78
  130f50:	e2833001 	add	r3, r3, #1
  130f54:	e6ff2073 	uxth	r2, r3
  130f58:	e30e3a14 	movw	r3, #59924	; 0xea14
  130f5c:	e3403056 	movt	r3, #86	; 0x56
  130f60:	e1c327b8 	strh	r2, [r3, #120]	; 0x78
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
  130f64:	e3a03004 	mov	r3, #4
  130f68:	e58d3010 	str	r3, [sp, #16]
  130f6c:	e24b3008 	sub	r3, fp, #8
  130f70:	e58d300c 	str	r3, [sp, #12]
  130f74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130f78:	e58d3008 	str	r3, [sp, #8]
  130f7c:	e3a03002 	mov	r3, #2
  130f80:	e58d3004 	str	r3, [sp, #4]
  130f84:	e3a03000 	mov	r3, #0
  130f88:	e58d3000 	str	r3, [sp]
  130f8c:	e3a03001 	mov	r3, #1
  130f90:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  130f94:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130f98:	e51b0010 	ldr	r0, [fp, #-16]
  130f9c:	eb000371 	bl	131d68 <ip4_output_if_opt>
  130fa0:	e1a03000 	mov	r3, r0
}
  130fa4:	e1a00003 	mov	r0, r3
  130fa8:	e24bd004 	sub	sp, fp, #4
  130fac:	e8bd8800 	pop	{fp, pc}

00130fb0 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
  130fb0:	e92d4800 	push	{fp, lr}
  130fb4:	e28db004 	add	fp, sp, #4
  130fb8:	e24dd020 	sub	sp, sp, #32
  130fbc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  130fc0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  130fc4:	e1a03002 	mov	r3, r2
  130fc8:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct pbuf*     p    = NULL;
  130fcc:	e3a03000 	mov	r3, #0
  130fd0:	e50b300c 	str	r3, [fp, #-12]
  struct igmp_msg* igmp = NULL;
  130fd4:	e3a03000 	mov	r3, #0
  130fd8:	e50b3010 	str	r3, [fp, #-16]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
  130fdc:	e3093910 	movw	r3, #39184	; 0x9910
  130fe0:	e3403014 	movt	r3, #20
  130fe4:	e5933000 	ldr	r3, [r3]
  130fe8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  ip4_addr_t*  dest = NULL;
  130fec:	e3a03000 	mov	r3, #0
  130ff0:	e50b3008 	str	r3, [fp, #-8]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
  130ff4:	e3a02000 	mov	r2, #0
  130ff8:	e3a01008 	mov	r1, #8
  130ffc:	e3a00000 	mov	r0, #0
  131000:	ebffa4a6 	bl	11a2a0 <pbuf_alloc>
  131004:	e50b000c 	str	r0, [fp, #-12]

  if (p) {
  131008:	e51b300c 	ldr	r3, [fp, #-12]
  13100c:	e3530000 	cmp	r3, #0
  131010:	0a000049 	beq	13113c <igmp_send+0x18c>
    igmp = (struct igmp_msg *)p->payload;
  131014:	e51b300c 	ldr	r3, [fp, #-12]
  131018:	e5933004 	ldr	r3, [r3, #4]
  13101c:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
  131020:	e51b300c 	ldr	r3, [fp, #-12]
  131024:	e1d330ba 	ldrh	r3, [r3, #10]
  131028:	e3530007 	cmp	r3, #7
  13102c:	8a000006 	bhi	13104c <igmp_send+0x9c>
  131030:	e3090868 	movw	r0, #39016	; 0x9868
  131034:	e3400014 	movt	r0, #20
  131038:	ebff4835 	bl	103114 <rt_kprintf>
  13103c:	e3001302 	movw	r1, #770	; 0x302
  131040:	e3090578 	movw	r0, #38264	; 0x9578
  131044:	e3400014 	movt	r0, #20
  131048:	ebff6828 	bl	10b0f0 <sys_arch_assert>
               (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
  13104c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  131050:	e2833004 	add	r3, r3, #4
  131054:	e5933000 	ldr	r3, [r3]
  131058:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (type == IGMP_V2_MEMB_REPORT) {
  13105c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  131060:	e3530016 	cmp	r3, #22
  131064:	1a00000a 	bne	131094 <igmp_send+0xe4>
      dest = &(group->group_address);
  131068:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13106c:	e2833004 	add	r3, r3, #4
  131070:	e50b3008 	str	r3, [fp, #-8]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  131074:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131078:	e5932004 	ldr	r2, [r3, #4]
  13107c:	e51b3010 	ldr	r3, [fp, #-16]
  131080:	e5832004 	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
  131084:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131088:	e3a02001 	mov	r2, #1
  13108c:	e5c32008 	strb	r2, [r3, #8]
  131090:	ea000009 	b	1310bc <igmp_send+0x10c>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
  131094:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  131098:	e3530017 	cmp	r3, #23
  13109c:	1a000006 	bne	1310bc <igmp_send+0x10c>
        dest = &allrouters;
  1310a0:	e30e3bdc 	movw	r3, #60380	; 0xebdc
  1310a4:	e3403014 	movt	r3, #20
  1310a8:	e50b3008 	str	r3, [fp, #-8]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  1310ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1310b0:	e5932004 	ldr	r2, [r3, #4]
  1310b4:	e51b3010 	ldr	r3, [fp, #-16]
  1310b8:	e5832004 	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
  1310bc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  1310c0:	e3530016 	cmp	r3, #22
  1310c4:	0a000002 	beq	1310d4 <igmp_send+0x124>
  1310c8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  1310cc:	e3530017 	cmp	r3, #23
  1310d0:	1a000016 	bne	131130 <igmp_send+0x180>
      igmp->igmp_msgtype  = type;
  1310d4:	e51b3010 	ldr	r3, [fp, #-16]
  1310d8:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  1310dc:	e5c32000 	strb	r2, [r3]
      igmp->igmp_maxresp  = 0;
  1310e0:	e51b3010 	ldr	r3, [fp, #-16]
  1310e4:	e3a02000 	mov	r2, #0
  1310e8:	e5c32001 	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
  1310ec:	e51b3010 	ldr	r3, [fp, #-16]
  1310f0:	e3a02000 	mov	r2, #0
  1310f4:	e5c32002 	strb	r2, [r3, #2]
  1310f8:	e3a02000 	mov	r2, #0
  1310fc:	e5c32003 	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
  131100:	e3a01008 	mov	r1, #8
  131104:	e51b0010 	ldr	r0, [fp, #-16]
  131108:	ebff9e43 	bl	118a1c <inet_chksum>
  13110c:	e1a03000 	mov	r3, r0
  131110:	e1a02003 	mov	r2, r3
  131114:	e51b3010 	ldr	r3, [fp, #-16]
  131118:	e1c320b2 	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
  13111c:	e24b1014 	sub	r1, fp, #20
  131120:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  131124:	e51b2008 	ldr	r2, [fp, #-8]
  131128:	e51b000c 	ldr	r0, [fp, #-12]
  13112c:	ebffff79 	bl	130f18 <igmp_ip_output_if>
    }

    pbuf_free(p);
  131130:	e51b000c 	ldr	r0, [fp, #-12]
  131134:	ebffa760 	bl	11aebc <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
  131138:	ea000007 	b	13115c <igmp_send+0x1ac>
    IGMP_STATS_INC(igmp.memerr);
  13113c:	e30e3a14 	movw	r3, #59924	; 0xea14
  131140:	e3403056 	movt	r3, #86	; 0x56
  131144:	e1d338b2 	ldrh	r3, [r3, #130]	; 0x82
  131148:	e2833001 	add	r3, r3, #1
  13114c:	e6ff2073 	uxth	r2, r3
  131150:	e30e3a14 	movw	r3, #59924	; 0xea14
  131154:	e3403056 	movt	r3, #86	; 0x56
  131158:	e1c328b2 	strh	r2, [r3, #130]	; 0x82
}
  13115c:	e320f000 	nop	{0}
  131160:	e24bd004 	sub	sp, fp, #4
  131164:	e8bd8800 	pop	{fp, pc}

00131168 <ip4_set_default_multicast_netif>:
/**
 * @ingroup ip4
 * Set a default netif for IPv4 multicast. */
void
ip4_set_default_multicast_netif(struct netif* default_multicast_netif)
{
  131168:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13116c:	e28db000 	add	fp, sp, #0
  131170:	e24dd00c 	sub	sp, sp, #12
  131174:	e50b0008 	str	r0, [fp, #-8]
  ip4_default_multicast_netif = default_multicast_netif;
  131178:	e30e3be4 	movw	r3, #60388	; 0xebe4
  13117c:	e3403014 	movt	r3, #20
  131180:	e51b2008 	ldr	r2, [fp, #-8]
  131184:	e5832000 	str	r2, [r3]
}
  131188:	e320f000 	nop	{0}
  13118c:	e28bd000 	add	sp, fp, #0
  131190:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  131194:	e12fff1e 	bx	lr

00131198 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
  131198:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13119c:	e28db000 	add	fp, sp, #0
  1311a0:	e24dd014 	sub	sp, sp, #20
  1311a4:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
  1311a8:	e51b3010 	ldr	r3, [fp, #-16]
  1311ac:	e5933000 	ldr	r3, [r3]
  1311b0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1311b4:	e35300e0 	cmp	r3, #224	; 0xe0
  1311b8:	1a000008 	bne	1311e0 <ip4_route+0x48>
  1311bc:	e30e3be4 	movw	r3, #60388	; 0xebe4
  1311c0:	e3403014 	movt	r3, #20
  1311c4:	e5933000 	ldr	r3, [r3]
  1311c8:	e3530000 	cmp	r3, #0
  1311cc:	0a000003 	beq	1311e0 <ip4_route+0x48>
    return ip4_default_multicast_netif;
  1311d0:	e30e3be4 	movw	r3, #60388	; 0xebe4
  1311d4:	e3403014 	movt	r3, #20
  1311d8:	e5933000 	ldr	r3, [r3]
  1311dc:	ea000091 	b	131428 <ip4_route+0x290>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  1311e0:	e30e3a08 	movw	r3, #59912	; 0xea08
  1311e4:	e3403056 	movt	r3, #86	; 0x56
  1311e8:	e5933000 	ldr	r3, [r3]
  1311ec:	e50b3008 	str	r3, [fp, #-8]
  1311f0:	ea000030 	b	1312b8 <ip4_route+0x120>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  1311f4:	e51b3008 	ldr	r3, [fp, #-8]
  1311f8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1311fc:	e2033001 	and	r3, r3, #1
  131200:	e6ef3073 	uxtb	r3, r3
  131204:	e3530000 	cmp	r3, #0
  131208:	0a000027 	beq	1312ac <ip4_route+0x114>
  13120c:	e51b3008 	ldr	r3, [fp, #-8]
  131210:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131214:	e1a03123 	lsr	r3, r3, #2
  131218:	e2033001 	and	r3, r3, #1
  13121c:	e6ef3073 	uxtb	r3, r3
  131220:	e3530000 	cmp	r3, #0
  131224:	0a000020 	beq	1312ac <ip4_route+0x114>
  131228:	e51b3008 	ldr	r3, [fp, #-8]
  13122c:	e2833004 	add	r3, r3, #4
  131230:	e5933000 	ldr	r3, [r3]
  131234:	e3530000 	cmp	r3, #0
  131238:	0a00001b 	beq	1312ac <ip4_route+0x114>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
  13123c:	e51b3010 	ldr	r3, [fp, #-16]
  131240:	e5932000 	ldr	r2, [r3]
  131244:	e51b3008 	ldr	r3, [fp, #-8]
  131248:	e2833004 	add	r3, r3, #4
  13124c:	e5933000 	ldr	r3, [r3]
  131250:	e0222003 	eor	r2, r2, r3
  131254:	e51b3008 	ldr	r3, [fp, #-8]
  131258:	e2833008 	add	r3, r3, #8
  13125c:	e5933000 	ldr	r3, [r3]
  131260:	e0033002 	and	r3, r3, r2
  131264:	e3530000 	cmp	r3, #0
  131268:	1a000001 	bne	131274 <ip4_route+0xdc>
        /* return netif on which to forward IP packet */
        return netif;
  13126c:	e51b3008 	ldr	r3, [fp, #-8]
  131270:	ea00006c 	b	131428 <ip4_route+0x290>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
  131274:	e51b3008 	ldr	r3, [fp, #-8]
  131278:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  13127c:	e2033002 	and	r3, r3, #2
  131280:	e3530000 	cmp	r3, #0
  131284:	1a000008 	bne	1312ac <ip4_route+0x114>
  131288:	e51b3010 	ldr	r3, [fp, #-16]
  13128c:	e5932000 	ldr	r2, [r3]
  131290:	e51b3008 	ldr	r3, [fp, #-8]
  131294:	e283300c 	add	r3, r3, #12
  131298:	e5933000 	ldr	r3, [r3]
  13129c:	e1520003 	cmp	r2, r3
  1312a0:	1a000001 	bne	1312ac <ip4_route+0x114>
        /* return netif on which to forward IP packet */
        return netif;
  1312a4:	e51b3008 	ldr	r3, [fp, #-8]
  1312a8:	ea00005e 	b	131428 <ip4_route+0x290>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  1312ac:	e51b3008 	ldr	r3, [fp, #-8]
  1312b0:	e5933000 	ldr	r3, [r3]
  1312b4:	e50b3008 	str	r3, [fp, #-8]
  1312b8:	e51b3008 	ldr	r3, [fp, #-8]
  1312bc:	e3530000 	cmp	r3, #0
  1312c0:	1affffcb 	bne	1311f4 <ip4_route+0x5c>
    }
  }

#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
  /* loopif is disabled, looopback traffic is passed through any netif */
  if (ip4_addr_isloopback(dest)) {
  1312c4:	e51b3010 	ldr	r3, [fp, #-16]
  1312c8:	e5933000 	ldr	r3, [r3]
  1312cc:	e6ef3073 	uxtb	r3, r3
  1312d0:	e353007f 	cmp	r3, #127	; 0x7f
  1312d4:	1a000025 	bne	131370 <ip4_route+0x1d8>
    /* don't check for link on loopback traffic */
    if (netif_default != NULL && netif_is_up(netif_default)) {
  1312d8:	e30e3a0c 	movw	r3, #59916	; 0xea0c
  1312dc:	e3403056 	movt	r3, #86	; 0x56
  1312e0:	e5933000 	ldr	r3, [r3]
  1312e4:	e3530000 	cmp	r3, #0
  1312e8:	0a00000b 	beq	13131c <ip4_route+0x184>
  1312ec:	e30e3a0c 	movw	r3, #59916	; 0xea0c
  1312f0:	e3403056 	movt	r3, #86	; 0x56
  1312f4:	e5933000 	ldr	r3, [r3]
  1312f8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1312fc:	e2033001 	and	r3, r3, #1
  131300:	e6ef3073 	uxtb	r3, r3
  131304:	e3530000 	cmp	r3, #0
  131308:	0a000003 	beq	13131c <ip4_route+0x184>
      return netif_default;
  13130c:	e30e3a0c 	movw	r3, #59916	; 0xea0c
  131310:	e3403056 	movt	r3, #86	; 0x56
  131314:	e5933000 	ldr	r3, [r3]
  131318:	ea000042 	b	131428 <ip4_route+0x290>
    }
    /* default netif is not up, just use any netif for loopback traffic */
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  13131c:	e30e3a08 	movw	r3, #59912	; 0xea08
  131320:	e3403056 	movt	r3, #86	; 0x56
  131324:	e5933000 	ldr	r3, [r3]
  131328:	e50b3008 	str	r3, [fp, #-8]
  13132c:	ea00000a 	b	13135c <ip4_route+0x1c4>
      if (netif_is_up(netif)) {
  131330:	e51b3008 	ldr	r3, [fp, #-8]
  131334:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131338:	e2033001 	and	r3, r3, #1
  13133c:	e6ef3073 	uxtb	r3, r3
  131340:	e3530000 	cmp	r3, #0
  131344:	0a000001 	beq	131350 <ip4_route+0x1b8>
        return netif;
  131348:	e51b3008 	ldr	r3, [fp, #-8]
  13134c:	ea000035 	b	131428 <ip4_route+0x290>
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  131350:	e51b3008 	ldr	r3, [fp, #-8]
  131354:	e5933000 	ldr	r3, [r3]
  131358:	e50b3008 	str	r3, [fp, #-8]
  13135c:	e51b3008 	ldr	r3, [fp, #-8]
  131360:	e3530000 	cmp	r3, #0
  131364:	1afffff1 	bne	131330 <ip4_route+0x198>
      }
    }
    return NULL;
  131368:	e3a03000 	mov	r3, #0
  13136c:	ea00002d 	b	131428 <ip4_route+0x290>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  131370:	e30e3a0c 	movw	r3, #59916	; 0xea0c
  131374:	e3403056 	movt	r3, #86	; 0x56
  131378:	e5933000 	ldr	r3, [r3]
  13137c:	e3530000 	cmp	r3, #0
  131380:	0a000014 	beq	1313d8 <ip4_route+0x240>
  131384:	e30e3a0c 	movw	r3, #59916	; 0xea0c
  131388:	e3403056 	movt	r3, #86	; 0x56
  13138c:	e5933000 	ldr	r3, [r3]
  131390:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131394:	e2033001 	and	r3, r3, #1
  131398:	e3530000 	cmp	r3, #0
  13139c:	0a00000d 	beq	1313d8 <ip4_route+0x240>
  1313a0:	e30e3a0c 	movw	r3, #59916	; 0xea0c
  1313a4:	e3403056 	movt	r3, #86	; 0x56
  1313a8:	e5933000 	ldr	r3, [r3]
  1313ac:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1313b0:	e2033004 	and	r3, r3, #4
  1313b4:	e3530000 	cmp	r3, #0
  1313b8:	0a000006 	beq	1313d8 <ip4_route+0x240>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
  1313bc:	e30e3a0c 	movw	r3, #59916	; 0xea0c
  1313c0:	e3403056 	movt	r3, #86	; 0x56
  1313c4:	e5933000 	ldr	r3, [r3]
  1313c8:	e2833004 	add	r3, r3, #4
  1313cc:	e5933000 	ldr	r3, [r3]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  1313d0:	e3530000 	cmp	r3, #0
  1313d4:	1a000010 	bne	13141c <ip4_route+0x284>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  1313d8:	e30e3a14 	movw	r3, #59924	; 0xea14
  1313dc:	e3403056 	movt	r3, #86	; 0x56
  1313e0:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  1313e4:	e2833001 	add	r3, r3, #1
  1313e8:	e6ff2073 	uxth	r2, r3
  1313ec:	e30e3a14 	movw	r3, #59924	; 0xea14
  1313f0:	e3403056 	movt	r3, #86	; 0x56
  1313f4:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
  1313f8:	e30e3a14 	movw	r3, #59924	; 0xea14
  1313fc:	e3403056 	movt	r3, #86	; 0x56
  131400:	e5933148 	ldr	r3, [r3, #328]	; 0x148
  131404:	e2832001 	add	r2, r3, #1
  131408:	e30e3a14 	movw	r3, #59924	; 0xea14
  13140c:	e3403056 	movt	r3, #86	; 0x56
  131410:	e5832148 	str	r2, [r3, #328]	; 0x148
    return NULL;
  131414:	e3a03000 	mov	r3, #0
  131418:	ea000002 	b	131428 <ip4_route+0x290>
  }

  return netif_default;
  13141c:	e30e3a0c 	movw	r3, #59916	; 0xea0c
  131420:	e3403056 	movt	r3, #86	; 0x56
  131424:	e5933000 	ldr	r3, [r3]
}
  131428:	e1a00003 	mov	r0, r3
  13142c:	e28bd000 	add	sp, fp, #0
  131430:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  131434:	e12fff1e 	bx	lr

00131438 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
  131438:	e92d4800 	push	{fp, lr}
  13143c:	e28db004 	add	fp, sp, #4
  131440:	e24dd028 	sub	sp, sp, #40	; 0x28
  131444:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  131448:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
  13144c:	e3a03001 	mov	r3, #1
  131450:	e50b3010 	str	r3, [fp, #-16]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
  131454:	e30e3a14 	movw	r3, #59924	; 0xea14
  131458:	e3403056 	movt	r3, #86	; 0x56
  13145c:	e1d334ba 	ldrh	r3, [r3, #74]	; 0x4a
  131460:	e2833001 	add	r3, r3, #1
  131464:	e6ff2073 	uxth	r2, r3
  131468:	e30e3a14 	movw	r3, #59924	; 0xea14
  13146c:	e3403056 	movt	r3, #86	; 0x56
  131470:	e1c324ba 	strh	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);
  131474:	e30e3a14 	movw	r3, #59924	; 0xea14
  131478:	e3403056 	movt	r3, #86	; 0x56
  13147c:	e5933168 	ldr	r3, [r3, #360]	; 0x168
  131480:	e2832001 	add	r2, r3, #1
  131484:	e30e3a14 	movw	r3, #59924	; 0xea14
  131488:	e3403056 	movt	r3, #86	; 0x56
  13148c:	e5832168 	str	r2, [r3, #360]	; 0x168

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  131490:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131494:	e5933004 	ldr	r3, [r3, #4]
  131498:	e50b3008 	str	r3, [fp, #-8]
  if (IPH_V(iphdr) != 4) {
  13149c:	e51b3008 	ldr	r3, [fp, #-8]
  1314a0:	e5d33000 	ldrb	r3, [r3]
  1314a4:	e1a03223 	lsr	r3, r3, #4
  1314a8:	e6ef3073 	uxtb	r3, r3
  1314ac:	e3530004 	cmp	r3, #4
  1314b0:	0a00001a 	beq	131520 <ip4_input+0xe8>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
  1314b4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1314b8:	ebffa67f 	bl	11aebc <pbuf_free>
    IP_STATS_INC(ip.err);
  1314bc:	e30e3a14 	movw	r3, #59924	; 0xea14
  1314c0:	e3403056 	movt	r3, #86	; 0x56
  1314c4:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  1314c8:	e2833001 	add	r3, r3, #1
  1314cc:	e6ff2073 	uxth	r2, r3
  1314d0:	e30e3a14 	movw	r3, #59924	; 0xea14
  1314d4:	e3403056 	movt	r3, #86	; 0x56
  1314d8:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
  1314dc:	e30e3a14 	movw	r3, #59924	; 0xea14
  1314e0:	e3403056 	movt	r3, #86	; 0x56
  1314e4:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1314e8:	e2833001 	add	r3, r3, #1
  1314ec:	e6ff2073 	uxth	r2, r3
  1314f0:	e30e3a14 	movw	r3, #59924	; 0xea14
  1314f4:	e3403056 	movt	r3, #86	; 0x56
  1314f8:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
  1314fc:	e30e3a14 	movw	r3, #59924	; 0xea14
  131500:	e3403056 	movt	r3, #86	; 0x56
  131504:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  131508:	e2832001 	add	r2, r3, #1
  13150c:	e30e3a14 	movw	r3, #59924	; 0xea14
  131510:	e3403056 	movt	r3, #86	; 0x56
  131514:	e583212c 	str	r2, [r3, #300]	; 0x12c
    return ERR_OK;
  131518:	e3a03000 	mov	r3, #0
  13151c:	ea0001f2 	b	131cec <ip4_input+0x8b4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  131520:	e51b3008 	ldr	r3, [fp, #-8]
  131524:	e5d33000 	ldrb	r3, [r3]
  131528:	e6ff3073 	uxth	r3, r3
  13152c:	e203300f 	and	r3, r3, #15
  131530:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  131534:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131538:	e1a03103 	lsl	r3, r3, #2
  13153c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
  131540:	e51b3008 	ldr	r3, [fp, #-8]
  131544:	e1d330b2 	ldrh	r3, [r3, #2]
  131548:	e6ff3073 	uxth	r3, r3
  13154c:	e1a00003 	mov	r0, r3
  131550:	ebff9422 	bl	1165e0 <lwip_htons>
  131554:	e1a03000 	mov	r3, r0
  131558:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
  13155c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131560:	e1d330b8 	ldrh	r3, [r3, #8]
  131564:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  131568:	e1520003 	cmp	r2, r3
  13156c:	2a000003 	bcs	131580 <ip4_input+0x148>
    pbuf_realloc(p, iphdr_len);
  131570:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  131574:	e1a01003 	mov	r1, r3
  131578:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13157c:	ebffa505 	bl	11a998 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
  131580:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131584:	e1d330ba 	ldrh	r3, [r3, #10]
  131588:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  13158c:	e1520003 	cmp	r2, r3
  131590:	8a000007 	bhi	1315b4 <ip4_input+0x17c>
  131594:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131598:	e1d330b8 	ldrh	r3, [r3, #8]
  13159c:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  1315a0:	e1520003 	cmp	r2, r3
  1315a4:	8a000002 	bhi	1315b4 <ip4_input+0x17c>
  1315a8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1315ac:	e3530013 	cmp	r3, #19
  1315b0:	8a00001a 	bhi	131620 <ip4_input+0x1e8>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
  1315b4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1315b8:	ebffa63f 	bl	11aebc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
  1315bc:	e30e3a14 	movw	r3, #59924	; 0xea14
  1315c0:	e3403056 	movt	r3, #86	; 0x56
  1315c4:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
  1315c8:	e2833001 	add	r3, r3, #1
  1315cc:	e6ff2073 	uxth	r2, r3
  1315d0:	e30e3a14 	movw	r3, #59924	; 0xea14
  1315d4:	e3403056 	movt	r3, #86	; 0x56
  1315d8:	e1c325b2 	strh	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
  1315dc:	e30e3a14 	movw	r3, #59924	; 0xea14
  1315e0:	e3403056 	movt	r3, #86	; 0x56
  1315e4:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1315e8:	e2833001 	add	r3, r3, #1
  1315ec:	e6ff2073 	uxth	r2, r3
  1315f0:	e30e3a14 	movw	r3, #59924	; 0xea14
  1315f4:	e3403056 	movt	r3, #86	; 0x56
  1315f8:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
  1315fc:	e30e3a14 	movw	r3, #59924	; 0xea14
  131600:	e3403056 	movt	r3, #86	; 0x56
  131604:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  131608:	e2832001 	add	r2, r3, #1
  13160c:	e30e3a14 	movw	r3, #59924	; 0xea14
  131610:	e3403056 	movt	r3, #86	; 0x56
  131614:	e5832138 	str	r2, [r3, #312]	; 0x138
    return ERR_OK;
  131618:	e3a03000 	mov	r3, #0
  13161c:	ea0001b2 	b	131cec <ip4_input+0x8b4>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  131620:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131624:	e1a01003 	mov	r1, r3
  131628:	e51b0008 	ldr	r0, [fp, #-8]
  13162c:	ebff9cfa 	bl	118a1c <inet_chksum>
  131630:	e1a03000 	mov	r3, r0
  131634:	e3530000 	cmp	r3, #0
  131638:	0a00001a 	beq	1316a8 <ip4_input+0x270>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
  13163c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131640:	ebffa61d 	bl	11aebc <pbuf_free>
      IP_STATS_INC(ip.chkerr);
  131644:	e30e3a14 	movw	r3, #59924	; 0xea14
  131648:	e3403056 	movt	r3, #86	; 0x56
  13164c:	e1d335b0 	ldrh	r3, [r3, #80]	; 0x50
  131650:	e2833001 	add	r3, r3, #1
  131654:	e6ff2073 	uxth	r2, r3
  131658:	e30e3a14 	movw	r3, #59924	; 0xea14
  13165c:	e3403056 	movt	r3, #86	; 0x56
  131660:	e1c325b0 	strh	r2, [r3, #80]	; 0x50
      IP_STATS_INC(ip.drop);
  131664:	e30e3a14 	movw	r3, #59924	; 0xea14
  131668:	e3403056 	movt	r3, #86	; 0x56
  13166c:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131670:	e2833001 	add	r3, r3, #1
  131674:	e6ff2073 	uxth	r2, r3
  131678:	e30e3a14 	movw	r3, #59924	; 0xea14
  13167c:	e3403056 	movt	r3, #86	; 0x56
  131680:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
  131684:	e30e3a14 	movw	r3, #59924	; 0xea14
  131688:	e3403056 	movt	r3, #86	; 0x56
  13168c:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  131690:	e2832001 	add	r2, r3, #1
  131694:	e30e3a14 	movw	r3, #59924	; 0xea14
  131698:	e3403056 	movt	r3, #86	; 0x56
  13169c:	e583212c 	str	r2, [r3, #300]	; 0x12c
      return ERR_OK;
  1316a0:	e3a03000 	mov	r3, #0
  1316a4:	ea000190 	b	131cec <ip4_input+0x8b4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
  1316a8:	e51b3008 	ldr	r3, [fp, #-8]
  1316ac:	e5932010 	ldr	r2, [r3, #16]
  1316b0:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1316b4:	e3403014 	movt	r3, #20
  1316b8:	e5832014 	str	r2, [r3, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
  1316bc:	e51b3008 	ldr	r3, [fp, #-8]
  1316c0:	e593200c 	ldr	r2, [r3, #12]
  1316c4:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1316c8:	e3403014 	movt	r3, #20
  1316cc:	e5832010 	str	r2, [r3, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  1316d0:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1316d4:	e3403014 	movt	r3, #20
  1316d8:	e5933014 	ldr	r3, [r3, #20]
  1316dc:	e20330f0 	and	r3, r3, #240	; 0xf0
  1316e0:	e35300e0 	cmp	r3, #224	; 0xe0
  1316e4:	1a000020 	bne	13176c <ip4_input+0x334>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  1316e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1316ec:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1316f0:	e2033020 	and	r3, r3, #32
  1316f4:	e3530000 	cmp	r3, #0
  1316f8:	0a000018 	beq	131760 <ip4_input+0x328>
  1316fc:	e59f15f4 	ldr	r1, [pc, #1524]	; 131cf8 <ip4_input+0x8c0>
  131700:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  131704:	ebfffa77 	bl	1300e8 <igmp_lookfor_group>
  131708:	e1a03000 	mov	r3, r0
  13170c:	e3530000 	cmp	r3, #0
  131710:	0a000012 	beq	131760 <ip4_input+0x328>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
  131714:	e3a030e0 	mov	r3, #224	; 0xe0
  131718:	e3403100 	movt	r3, #256	; 0x100
  13171c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  131720:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131724:	e3403014 	movt	r3, #20
  131728:	e5932014 	ldr	r2, [r3, #20]
  13172c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131730:	e1520003 	cmp	r2, r3
  131734:	1a000006 	bne	131754 <ip4_input+0x31c>
          ip4_addr_isany(ip4_current_src_addr())) {
  131738:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  13173c:	e3403014 	movt	r3, #20
  131740:	e5933010 	ldr	r3, [r3, #16]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  131744:	e3530000 	cmp	r3, #0
  131748:	1a000001 	bne	131754 <ip4_input+0x31c>
        check_ip_src = 0;
  13174c:	e3a03000 	mov	r3, #0
  131750:	e50b3010 	str	r3, [fp, #-16]
      }
      netif = inp;
  131754:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131758:	e50b300c 	str	r3, [fp, #-12]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  13175c:	ea000040 	b	131864 <ip4_input+0x42c>
    } else {
      netif = NULL;
  131760:	e3a03000 	mov	r3, #0
  131764:	e50b300c 	str	r3, [fp, #-12]
  131768:	ea00003d 	b	131864 <ip4_input+0x42c>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
  13176c:	e3a03001 	mov	r3, #1
  131770:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    netif = inp;
  131774:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131778:	e50b300c 	str	r3, [fp, #-12]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
  13177c:	e51b300c 	ldr	r3, [fp, #-12]
  131780:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131784:	e2033001 	and	r3, r3, #1
  131788:	e6ef3073 	uxtb	r3, r3
  13178c:	e3530000 	cmp	r3, #0
  131790:	0a00001c 	beq	131808 <ip4_input+0x3d0>
  131794:	e51b300c 	ldr	r3, [fp, #-12]
  131798:	e2833004 	add	r3, r3, #4
  13179c:	e5933000 	ldr	r3, [r3]
  1317a0:	e3530000 	cmp	r3, #0
  1317a4:	0a000017 	beq	131808 <ip4_input+0x3d0>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  1317a8:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1317ac:	e3403014 	movt	r3, #20
  1317b0:	e5932014 	ldr	r2, [r3, #20]
  1317b4:	e51b300c 	ldr	r3, [fp, #-12]
  1317b8:	e2833004 	add	r3, r3, #4
  1317bc:	e5933000 	ldr	r3, [r3]
  1317c0:	e1520003 	cmp	r2, r3
  1317c4:	0a000026 	beq	131864 <ip4_input+0x42c>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
  1317c8:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1317cc:	e3403014 	movt	r3, #20
  1317d0:	e5933014 	ldr	r3, [r3, #20]
  1317d4:	e51b100c 	ldr	r1, [fp, #-12]
  1317d8:	e1a00003 	mov	r0, r3
  1317dc:	eb00034c 	bl	132514 <ip4_addr_isbroadcast_u32>
  1317e0:	e1a03000 	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  1317e4:	e3530000 	cmp	r3, #0
  1317e8:	1a00001d 	bne	131864 <ip4_input+0x42c>
#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
            || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
  1317ec:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1317f0:	e3403014 	movt	r3, #20
  1317f4:	e5932014 	ldr	r2, [r3, #20]
  1317f8:	e3a0307f 	mov	r3, #127	; 0x7f
  1317fc:	e3403100 	movt	r3, #256	; 0x100
  131800:	e1520003 	cmp	r2, r3
  131804:	0a000016 	beq	131864 <ip4_input+0x42c>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
  131808:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13180c:	e3530000 	cmp	r3, #0
  131810:	0a000006 	beq	131830 <ip4_input+0x3f8>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
          netif = NULL;
          break;
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
  131814:	e3a03000 	mov	r3, #0
  131818:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        netif = netif_list;
  13181c:	e30e3a08 	movw	r3, #59912	; 0xea08
  131820:	e3403056 	movt	r3, #86	; 0x56
  131824:	e5933000 	ldr	r3, [r3]
  131828:	e50b300c 	str	r3, [fp, #-12]
  13182c:	ea000002 	b	13183c <ip4_input+0x404>
      } else {
        netif = netif->next;
  131830:	e51b300c 	ldr	r3, [fp, #-12]
  131834:	e5933000 	ldr	r3, [r3]
  131838:	e50b300c 	str	r3, [fp, #-12]
      }
      if (netif == inp) {
  13183c:	e51b200c 	ldr	r2, [fp, #-12]
  131840:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131844:	e1520003 	cmp	r2, r3
  131848:	1a000002 	bne	131858 <ip4_input+0x420>
        netif = netif->next;
  13184c:	e51b300c 	ldr	r3, [fp, #-12]
  131850:	e5933000 	ldr	r3, [r3]
  131854:	e50b300c 	str	r3, [fp, #-12]
      }
    } while (netif != NULL);
  131858:	e51b300c 	ldr	r3, [fp, #-12]
  13185c:	e3530000 	cmp	r3, #0
  131860:	1affffc5 	bne	13177c <ip4_input+0x344>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
  131864:	e51b300c 	ldr	r3, [fp, #-12]
  131868:	e3530000 	cmp	r3, #0
  13186c:	1a000010 	bne	1318b4 <ip4_input+0x47c>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
  131870:	e51b3008 	ldr	r3, [fp, #-8]
  131874:	e5d33009 	ldrb	r3, [r3, #9]
  131878:	e3530011 	cmp	r3, #17
  13187c:	1a00000c 	bne	1318b4 <ip4_input+0x47c>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
  131880:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131884:	e51b2008 	ldr	r2, [fp, #-8]
  131888:	e0823003 	add	r3, r2, r3
  13188c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
  131890:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131894:	e1d330b2 	ldrh	r3, [r3, #2]
  131898:	e6ff3073 	uxth	r3, r3
  13189c:	e3530b11 	cmp	r3, #17408	; 0x4400
  1318a0:	1a000003 	bne	1318b4 <ip4_input+0x47c>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
  1318a4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1318a8:	e50b300c 	str	r3, [fp, #-12]
        check_ip_src = 0;
  1318ac:	e3a03000 	mov	r3, #0
  1318b0:	e50b3010 	str	r3, [fp, #-16]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
  1318b4:	e51b3010 	ldr	r3, [fp, #-16]
  1318b8:	e3530000 	cmp	r3, #0
  1318bc:	0a00002d 	beq	131978 <ip4_input+0x540>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
  1318c0:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1318c4:	e3403014 	movt	r3, #20
  1318c8:	e5933010 	ldr	r3, [r3, #16]
  1318cc:	e3530000 	cmp	r3, #0
  1318d0:	0a000028 	beq	131978 <ip4_input+0x540>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  1318d4:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1318d8:	e3403014 	movt	r3, #20
  1318dc:	e5933010 	ldr	r3, [r3, #16]
  1318e0:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1318e4:	e1a00003 	mov	r0, r3
  1318e8:	eb000309 	bl	132514 <ip4_addr_isbroadcast_u32>
  1318ec:	e1a03000 	mov	r3, r0
  1318f0:	e3530000 	cmp	r3, #0
  1318f4:	1a000005 	bne	131910 <ip4_input+0x4d8>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
  1318f8:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1318fc:	e3403014 	movt	r3, #20
  131900:	e5933010 	ldr	r3, [r3, #16]
  131904:	e20330f0 	and	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  131908:	e35300e0 	cmp	r3, #224	; 0xe0
  13190c:	1a000019 	bne	131978 <ip4_input+0x540>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
  131910:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131914:	ebffa568 	bl	11aebc <pbuf_free>
      IP_STATS_INC(ip.drop);
  131918:	e30e3a14 	movw	r3, #59924	; 0xea14
  13191c:	e3403056 	movt	r3, #86	; 0x56
  131920:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131924:	e2833001 	add	r3, r3, #1
  131928:	e6ff2073 	uxth	r2, r3
  13192c:	e30e3a14 	movw	r3, #59924	; 0xea14
  131930:	e3403056 	movt	r3, #86	; 0x56
  131934:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  131938:	e30e3a14 	movw	r3, #59924	; 0xea14
  13193c:	e3403056 	movt	r3, #86	; 0x56
  131940:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  131944:	e2832001 	add	r2, r3, #1
  131948:	e30e3a14 	movw	r3, #59924	; 0xea14
  13194c:	e3403056 	movt	r3, #86	; 0x56
  131950:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  131954:	e30e3a14 	movw	r3, #59924	; 0xea14
  131958:	e3403056 	movt	r3, #86	; 0x56
  13195c:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  131960:	e2832001 	add	r2, r3, #1
  131964:	e30e3a14 	movw	r3, #59924	; 0xea14
  131968:	e3403056 	movt	r3, #86	; 0x56
  13196c:	e5832138 	str	r2, [r3, #312]	; 0x138
      return ERR_OK;
  131970:	e3a03000 	mov	r3, #0
  131974:	ea0000dc 	b	131cec <ip4_input+0x8b4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
  131978:	e51b300c 	ldr	r3, [fp, #-12]
  13197c:	e3530000 	cmp	r3, #0
  131980:	1a000019 	bne	1319ec <ip4_input+0x5b4>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
  131984:	e30e3a14 	movw	r3, #59924	; 0xea14
  131988:	e3403056 	movt	r3, #86	; 0x56
  13198c:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131990:	e2833001 	add	r3, r3, #1
  131994:	e6ff2073 	uxth	r2, r3
  131998:	e30e3a14 	movw	r3, #59924	; 0xea14
  13199c:	e3403056 	movt	r3, #86	; 0x56
  1319a0:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  1319a4:	e30e3a14 	movw	r3, #59924	; 0xea14
  1319a8:	e3403056 	movt	r3, #86	; 0x56
  1319ac:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  1319b0:	e2832001 	add	r2, r3, #1
  1319b4:	e30e3a14 	movw	r3, #59924	; 0xea14
  1319b8:	e3403056 	movt	r3, #86	; 0x56
  1319bc:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  1319c0:	e30e3a14 	movw	r3, #59924	; 0xea14
  1319c4:	e3403056 	movt	r3, #86	; 0x56
  1319c8:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  1319cc:	e2832001 	add	r2, r3, #1
  1319d0:	e30e3a14 	movw	r3, #59924	; 0xea14
  1319d4:	e3403056 	movt	r3, #86	; 0x56
  1319d8:	e5832138 	str	r2, [r3, #312]	; 0x138
    }
    pbuf_free(p);
  1319dc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1319e0:	ebffa535 	bl	11aebc <pbuf_free>
    return ERR_OK;
  1319e4:	e3a03000 	mov	r3, #0
  1319e8:	ea0000bf 	b	131cec <ip4_input+0x8b4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  1319ec:	e51b3008 	ldr	r3, [fp, #-8]
  1319f0:	e1d330b6 	ldrh	r3, [r3, #6]
  1319f4:	e6ff3073 	uxth	r3, r3
  1319f8:	e1a02003 	mov	r2, r3
  1319fc:	e30f3f3f 	movw	r3, #65343	; 0xff3f
  131a00:	e0033002 	and	r3, r3, r2
  131a04:	e3530000 	cmp	r3, #0
  131a08:	0a00000a 	beq	131a38 <ip4_input+0x600>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
  131a0c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131a10:	eb000778 	bl	1337f8 <ip4_reass>
  131a14:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    /* packet not fully reassembled yet? */
    if (p == NULL) {
  131a18:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131a1c:	e3530000 	cmp	r3, #0
  131a20:	1a000001 	bne	131a2c <ip4_input+0x5f4>
      return ERR_OK;
  131a24:	e3a03000 	mov	r3, #0
  131a28:	ea0000af 	b	131cec <ip4_input+0x8b4>
    }
    iphdr = (struct ip_hdr *)p->payload;
  131a2c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131a30:	e5933004 	ldr	r3, [r3, #4]
  131a34:	e50b3008 	str	r3, [fp, #-8]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  131a38:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131a3c:	e3403014 	movt	r3, #20
  131a40:	e51b200c 	ldr	r2, [fp, #-12]
  131a44:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = inp;
  131a48:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131a4c:	e3403014 	movt	r3, #20
  131a50:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  131a54:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = iphdr;
  131a58:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131a5c:	e3403014 	movt	r3, #20
  131a60:	e51b2008 	ldr	r2, [fp, #-8]
  131a64:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
  131a68:	e51b3008 	ldr	r3, [fp, #-8]
  131a6c:	e5d33000 	ldrb	r3, [r3]
  131a70:	e6ff3073 	uxth	r3, r3
  131a74:	e203300f 	and	r3, r3, #15
  131a78:	e6ff3073 	uxth	r3, r3
  131a7c:	e1a03103 	lsl	r3, r3, #2
  131a80:	e6ff2073 	uxth	r2, r3
  131a84:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131a88:	e3403014 	movt	r3, #20
  131a8c:	e1c320bc 	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
  131a90:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131a94:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131a98:	ebffa9d1 	bl	11c1e4 <raw_input>
  131a9c:	e1a03000 	mov	r3, r0
  131aa0:	e3530000 	cmp	r3, #0
  131aa4:	1a000076 	bne	131c84 <ip4_input+0x84c>
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
  131aa8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131aac:	e2633000 	rsb	r3, r3, #0
  131ab0:	e6ff3073 	uxth	r3, r3
  131ab4:	e6bf3073 	sxth	r3, r3
  131ab8:	e1a01003 	mov	r1, r3
  131abc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131ac0:	ebffa4df 	bl	11ae44 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
  131ac4:	e51b3008 	ldr	r3, [fp, #-8]
  131ac8:	e5d33009 	ldrb	r3, [r3, #9]
  131acc:	e2433001 	sub	r3, r3, #1
  131ad0:	e3530010 	cmp	r3, #16
  131ad4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  131ad8:	ea000036 	b	131bb8 <ip4_input+0x780>
  131adc:	00131b78 	.word	0x00131b78
  131ae0:	00131ba4 	.word	0x00131ba4
  131ae4:	00131bb8 	.word	0x00131bb8
  131ae8:	00131bb8 	.word	0x00131bb8
  131aec:	00131bb8 	.word	0x00131bb8
  131af0:	00131b4c 	.word	0x00131b4c
  131af4:	00131bb8 	.word	0x00131bb8
  131af8:	00131bb8 	.word	0x00131bb8
  131afc:	00131bb8 	.word	0x00131bb8
  131b00:	00131bb8 	.word	0x00131bb8
  131b04:	00131bb8 	.word	0x00131bb8
  131b08:	00131bb8 	.word	0x00131bb8
  131b0c:	00131bb8 	.word	0x00131bb8
  131b10:	00131bb8 	.word	0x00131bb8
  131b14:	00131bb8 	.word	0x00131bb8
  131b18:	00131bb8 	.word	0x00131bb8
  131b1c:	00131b20 	.word	0x00131b20
#if LWIP_UDP
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
  131b20:	e30e3a14 	movw	r3, #59924	; 0xea14
  131b24:	e3403056 	movt	r3, #86	; 0x56
  131b28:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131b2c:	e2832001 	add	r2, r3, #1
  131b30:	e30e3a14 	movw	r3, #59924	; 0xea14
  131b34:	e3403056 	movt	r3, #86	; 0x56
  131b38:	e583213c 	str	r2, [r3, #316]	; 0x13c
      udp_input(p, inp);
  131b3c:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131b40:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131b44:	ebffd80c 	bl	127b7c <udp_input>
      break;
  131b48:	ea00004e 	b	131c88 <ip4_input+0x850>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
  131b4c:	e30e3a14 	movw	r3, #59924	; 0xea14
  131b50:	e3403056 	movt	r3, #86	; 0x56
  131b54:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131b58:	e2832001 	add	r2, r3, #1
  131b5c:	e30e3a14 	movw	r3, #59924	; 0xea14
  131b60:	e3403056 	movt	r3, #86	; 0x56
  131b64:	e583213c 	str	r2, [r3, #316]	; 0x13c
      tcp_input(p, inp);
  131b68:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131b6c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131b70:	ebffb9c8 	bl	120298 <tcp_input>
      break;
  131b74:	ea000043 	b	131c88 <ip4_input+0x850>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
  131b78:	e30e3a14 	movw	r3, #59924	; 0xea14
  131b7c:	e3403056 	movt	r3, #86	; 0x56
  131b80:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131b84:	e2832001 	add	r2, r3, #1
  131b88:	e30e3a14 	movw	r3, #59924	; 0xea14
  131b8c:	e3403056 	movt	r3, #86	; 0x56
  131b90:	e583213c 	str	r2, [r3, #316]	; 0x13c
      icmp_input(p, inp);
  131b94:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131b98:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131b9c:	ebfff665 	bl	12f538 <icmp_input>
      break;
  131ba0:	ea000038 	b	131c88 <ip4_input+0x850>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
    case IP_PROTO_IGMP:
      igmp_input(p, inp, ip4_current_dest_addr());
  131ba4:	e59f214c 	ldr	r2, [pc, #332]	; 131cf8 <ip4_input+0x8c0>
  131ba8:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131bac:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131bb0:	ebfff9ed 	bl	13036c <igmp_input>
      break;
  131bb4:	ea000033 	b	131c88 <ip4_input+0x850>
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  131bb8:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131bbc:	e3403014 	movt	r3, #20
  131bc0:	e5933014 	ldr	r3, [r3, #20]
  131bc4:	e51b100c 	ldr	r1, [fp, #-12]
  131bc8:	e1a00003 	mov	r0, r3
  131bcc:	eb000250 	bl	132514 <ip4_addr_isbroadcast_u32>
  131bd0:	e1a03000 	mov	r3, r0
  131bd4:	e3530000 	cmp	r3, #0
  131bd8:	1a00000f 	bne	131c1c <ip4_input+0x7e4>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
  131bdc:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131be0:	e3403014 	movt	r3, #20
  131be4:	e5933014 	ldr	r3, [r3, #20]
  131be8:	e20330f0 	and	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  131bec:	e35300e0 	cmp	r3, #224	; 0xe0
  131bf0:	0a000009 	beq	131c1c <ip4_input+0x7e4>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
  131bf4:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  131bf8:	e1a01003 	mov	r1, r3
  131bfc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131c00:	ebffa49e 	bl	11ae80 <pbuf_header_force>
        p->payload = iphdr;
  131c04:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131c08:	e51b2008 	ldr	r2, [fp, #-8]
  131c0c:	e5832004 	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  131c10:	e3a01002 	mov	r1, #2
  131c14:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131c18:	ebfff81c 	bl	12fc90 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
  131c1c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131c20:	ebffa4a5 	bl	11aebc <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
  131c24:	e30e3a14 	movw	r3, #59924	; 0xea14
  131c28:	e3403056 	movt	r3, #86	; 0x56
  131c2c:	e1d335b8 	ldrh	r3, [r3, #88]	; 0x58
  131c30:	e2833001 	add	r3, r3, #1
  131c34:	e6ff2073 	uxth	r2, r3
  131c38:	e30e3a14 	movw	r3, #59924	; 0xea14
  131c3c:	e3403056 	movt	r3, #86	; 0x56
  131c40:	e1c325b8 	strh	r2, [r3, #88]	; 0x58
      IP_STATS_INC(ip.drop);
  131c44:	e30e3a14 	movw	r3, #59924	; 0xea14
  131c48:	e3403056 	movt	r3, #86	; 0x56
  131c4c:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131c50:	e2833001 	add	r3, r3, #1
  131c54:	e6ff2073 	uxth	r2, r3
  131c58:	e30e3a14 	movw	r3, #59924	; 0xea14
  131c5c:	e3403056 	movt	r3, #86	; 0x56
  131c60:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
  131c64:	e30e3a14 	movw	r3, #59924	; 0xea14
  131c68:	e3403056 	movt	r3, #86	; 0x56
  131c6c:	e5933134 	ldr	r3, [r3, #308]	; 0x134
  131c70:	e2832001 	add	r2, r3, #1
  131c74:	e30e3a14 	movw	r3, #59924	; 0xea14
  131c78:	e3403056 	movt	r3, #86	; 0x56
  131c7c:	e5832134 	str	r2, [r3, #308]	; 0x134
  131c80:	ea000000 	b	131c88 <ip4_input+0x850>
    }
  }
  131c84:	e320f000 	nop	{0}

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
  131c88:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131c8c:	e3403014 	movt	r3, #20
  131c90:	e3a02000 	mov	r2, #0
  131c94:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = NULL;
  131c98:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131c9c:	e3403014 	movt	r3, #20
  131ca0:	e3a02000 	mov	r2, #0
  131ca4:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
  131ca8:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131cac:	e3403014 	movt	r3, #20
  131cb0:	e3a02000 	mov	r2, #0
  131cb4:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
  131cb8:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131cbc:	e3403014 	movt	r3, #20
  131cc0:	e3a02000 	mov	r2, #0
  131cc4:	e1c320bc 	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  131cc8:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131ccc:	e3403014 	movt	r3, #20
  131cd0:	e3a02000 	mov	r2, #0
  131cd4:	e5832010 	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
  131cd8:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131cdc:	e3403014 	movt	r3, #20
  131ce0:	e3a02000 	mov	r2, #0
  131ce4:	e5832014 	str	r2, [r3, #20]

  return ERR_OK;
  131ce8:	e3a03000 	mov	r3, #0
}
  131cec:	e1a00003 	mov	r0, r3
  131cf0:	e24bd004 	sub	sp, fp, #4
  131cf4:	e8bd8800 	pop	{fp, pc}
  131cf8:	0014f60c 	.word	0x0014f60c

00131cfc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  131cfc:	e92d4800 	push	{fp, lr}
  131d00:	e28db004 	add	fp, sp, #4
  131d04:	e24dd028 	sub	sp, sp, #40	; 0x28
  131d08:	e50b0008 	str	r0, [fp, #-8]
  131d0c:	e50b100c 	str	r1, [fp, #-12]
  131d10:	e50b2010 	str	r2, [fp, #-16]
  131d14:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  131d18:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  131d1c:	e3a03000 	mov	r3, #0
  131d20:	e58d3010 	str	r3, [sp, #16]
  131d24:	e3a03000 	mov	r3, #0
  131d28:	e58d300c 	str	r3, [sp, #12]
  131d2c:	e59b300c 	ldr	r3, [fp, #12]
  131d30:	e58d3008 	str	r3, [sp, #8]
  131d34:	e5db3008 	ldrb	r3, [fp, #8]
  131d38:	e58d3004 	str	r3, [sp, #4]
  131d3c:	e5db3004 	ldrb	r3, [fp, #4]
  131d40:	e58d3000 	str	r3, [sp]
  131d44:	e1a03002 	mov	r3, r2
  131d48:	e51b2010 	ldr	r2, [fp, #-16]
  131d4c:	e51b100c 	ldr	r1, [fp, #-12]
  131d50:	e51b0008 	ldr	r0, [fp, #-8]
  131d54:	eb000003 	bl	131d68 <ip4_output_if_opt>
  131d58:	e1a03000 	mov	r3, r0
}
  131d5c:	e1a00003 	mov	r0, r3
  131d60:	e24bd004 	sub	sp, fp, #4
  131d64:	e8bd8800 	pop	{fp, pc}

00131d68 <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  131d68:	e92d4800 	push	{fp, lr}
  131d6c:	e28db004 	add	fp, sp, #4
  131d70:	e24dd030 	sub	sp, sp, #48	; 0x30
  131d74:	e50b0010 	str	r0, [fp, #-16]
  131d78:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  131d7c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  131d80:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
  131d84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d88:	e50b3008 	str	r3, [fp, #-8]
  if (dest != LWIP_IP_HDRINCL) {
  131d8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  131d90:	e3530000 	cmp	r3, #0
  131d94:	0a000009 	beq	131dc0 <ip4_output_if_opt+0x58>
    if (ip4_addr_isany(src)) {
  131d98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d9c:	e3530000 	cmp	r3, #0
  131da0:	0a000003 	beq	131db4 <ip4_output_if_opt+0x4c>
  131da4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131da8:	e5933000 	ldr	r3, [r3]
  131dac:	e3530000 	cmp	r3, #0
  131db0:	1a000002 	bne	131dc0 <ip4_output_if_opt+0x58>
      src_used = netif_ip4_addr(netif);
  131db4:	e59b300c 	ldr	r3, [fp, #12]
  131db8:	e2833004 	add	r3, r3, #4
  131dbc:	e50b3008 	str	r3, [fp, #-8]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
  131dc0:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  131dc4:	e1db31b4 	ldrh	r3, [fp, #20]
  131dc8:	e58d3010 	str	r3, [sp, #16]
  131dcc:	e59b3010 	ldr	r3, [fp, #16]
  131dd0:	e58d300c 	str	r3, [sp, #12]
  131dd4:	e59b300c 	ldr	r3, [fp, #12]
  131dd8:	e58d3008 	str	r3, [sp, #8]
  131ddc:	e5db3008 	ldrb	r3, [fp, #8]
  131de0:	e58d3004 	str	r3, [sp, #4]
  131de4:	e5db3004 	ldrb	r3, [fp, #4]
  131de8:	e58d3000 	str	r3, [sp]
  131dec:	e1a03002 	mov	r3, r2
  131df0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  131df4:	e51b1008 	ldr	r1, [fp, #-8]
  131df8:	e51b0010 	ldr	r0, [fp, #-16]
  131dfc:	eb00001e 	bl	131e7c <ip4_output_if_opt_src>
  131e00:	e1a03000 	mov	r3, r0
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
  131e04:	e1a00003 	mov	r0, r3
  131e08:	e24bd004 	sub	sp, fp, #4
  131e0c:	e8bd8800 	pop	{fp, pc}

00131e10 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  131e10:	e92d4800 	push	{fp, lr}
  131e14:	e28db004 	add	fp, sp, #4
  131e18:	e24dd028 	sub	sp, sp, #40	; 0x28
  131e1c:	e50b0008 	str	r0, [fp, #-8]
  131e20:	e50b100c 	str	r1, [fp, #-12]
  131e24:	e50b2010 	str	r2, [fp, #-16]
  131e28:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  131e2c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  131e30:	e3a03000 	mov	r3, #0
  131e34:	e58d3010 	str	r3, [sp, #16]
  131e38:	e3a03000 	mov	r3, #0
  131e3c:	e58d300c 	str	r3, [sp, #12]
  131e40:	e59b300c 	ldr	r3, [fp, #12]
  131e44:	e58d3008 	str	r3, [sp, #8]
  131e48:	e5db3008 	ldrb	r3, [fp, #8]
  131e4c:	e58d3004 	str	r3, [sp, #4]
  131e50:	e5db3004 	ldrb	r3, [fp, #4]
  131e54:	e58d3000 	str	r3, [sp]
  131e58:	e1a03002 	mov	r3, r2
  131e5c:	e51b2010 	ldr	r2, [fp, #-16]
  131e60:	e51b100c 	ldr	r1, [fp, #-12]
  131e64:	e51b0008 	ldr	r0, [fp, #-8]
  131e68:	eb000003 	bl	131e7c <ip4_output_if_opt_src>
  131e6c:	e1a03000 	mov	r3, r0
}
  131e70:	e1a00003 	mov	r0, r3
  131e74:	e24bd004 	sub	sp, fp, #4
  131e78:	e8bd8800 	pop	{fp, pc}

00131e7c <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  131e7c:	e92d4800 	push	{fp, lr}
  131e80:	e28db004 	add	fp, sp, #4
  131e84:	e24dd028 	sub	sp, sp, #40	; 0x28
  131e88:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  131e8c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  131e90:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  131e94:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
  131e98:	e3a03000 	mov	r3, #0
  131e9c:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  131ea0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131ea4:	e1d330be 	ldrh	r3, [r3, #14]
  131ea8:	e3530001 	cmp	r3, #1
  131eac:	0a000006 	beq	131ecc <ip4_output_if_opt_src+0x50>
  131eb0:	e30908a4 	movw	r0, #39076	; 0x98a4
  131eb4:	e3400014 	movt	r0, #20
  131eb8:	ebff4495 	bl	103114 <rt_kprintf>
  131ebc:	e3001333 	movw	r1, #819	; 0x333
  131ec0:	e30908b0 	movw	r0, #39088	; 0x98b0
  131ec4:	e3400014 	movt	r0, #20
  131ec8:	ebff6488 	bl	10b0f0 <sys_arch_assert>

  MIB2_STATS_INC(mib2.ipoutrequests);
  131ecc:	e30e3a14 	movw	r3, #59924	; 0xea14
  131ed0:	e3403056 	movt	r3, #86	; 0x56
  131ed4:	e5933140 	ldr	r3, [r3, #320]	; 0x140
  131ed8:	e2832001 	add	r2, r3, #1
  131edc:	e30e3a14 	movw	r3, #59924	; 0xea14
  131ee0:	e3403056 	movt	r3, #86	; 0x56
  131ee4:	e5832140 	str	r2, [r3, #320]	; 0x140

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
  131ee8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131eec:	e3530000 	cmp	r3, #0
  131ef0:	0a000112 	beq	132340 <ip4_output_if_opt_src+0x4c4>
    u16_t ip_hlen = IP_HLEN;
  131ef4:	e3a03014 	mov	r3, #20
  131ef8:	e14b30ba 	strh	r3, [fp, #-10]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
  131efc:	e3a03000 	mov	r3, #0
  131f00:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (optlen != 0) {
  131f04:	e1db31b4 	ldrh	r3, [fp, #20]
  131f08:	e3530000 	cmp	r3, #0
  131f0c:	0a00004b 	beq	132040 <ip4_output_if_opt_src+0x1c4>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      /* round up to a multiple of 4 */
      optlen_aligned = ((optlen + 3) & ~3);
  131f10:	e1db31b4 	ldrh	r3, [fp, #20]
  131f14:	e2833003 	add	r3, r3, #3
  131f18:	e6ff3073 	uxth	r3, r3
  131f1c:	e3c33003 	bic	r3, r3, #3
  131f20:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      ip_hlen += optlen_aligned;
  131f24:	e15b20ba 	ldrh	r2, [fp, #-10]
  131f28:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131f2c:	e0823003 	add	r3, r2, r3
  131f30:	e14b30ba 	strh	r3, [fp, #-10]
      /* First write in the IP options */
      if (pbuf_header(p, optlen_aligned)) {
  131f34:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  131f38:	e1a01003 	mov	r1, r3
  131f3c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  131f40:	ebffa3bf 	bl	11ae44 <pbuf_header>
  131f44:	e1a03000 	mov	r3, r0
  131f48:	e3530000 	cmp	r3, #0
  131f4c:	0a000010 	beq	131f94 <ip4_output_if_opt_src+0x118>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
  131f50:	e30e3a14 	movw	r3, #59924	; 0xea14
  131f54:	e3403056 	movt	r3, #86	; 0x56
  131f58:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  131f5c:	e2833001 	add	r3, r3, #1
  131f60:	e6ff2073 	uxth	r2, r3
  131f64:	e30e3a14 	movw	r3, #59924	; 0xea14
  131f68:	e3403056 	movt	r3, #86	; 0x56
  131f6c:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
        MIB2_STATS_INC(mib2.ipoutdiscards);
  131f70:	e30e3a14 	movw	r3, #59924	; 0xea14
  131f74:	e3403056 	movt	r3, #86	; 0x56
  131f78:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  131f7c:	e2832001 	add	r2, r3, #1
  131f80:	e30e3a14 	movw	r3, #59924	; 0xea14
  131f84:	e3403056 	movt	r3, #86	; 0x56
  131f88:	e5832144 	str	r2, [r3, #324]	; 0x144
        return ERR_BUF;
  131f8c:	e3e03001 	mvn	r3, #1
  131f90:	ea00012a 	b	132440 <ip4_output_if_opt_src+0x5c4>
      }
      MEMCPY(p->payload, ip_options, optlen);
  131f94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131f98:	e5933004 	ldr	r3, [r3, #4]
  131f9c:	e1db21b4 	ldrh	r2, [fp, #20]
  131fa0:	e59b1010 	ldr	r1, [fp, #16]
  131fa4:	e1a00003 	mov	r0, r3
  131fa8:	eb003b7b 	bl	140d9c <memcpy>
      if (optlen < optlen_aligned) {
  131fac:	e1db21b4 	ldrh	r2, [fp, #20]
  131fb0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131fb4:	e1520003 	cmp	r2, r3
  131fb8:	2a000009 	bcs	131fe4 <ip4_output_if_opt_src+0x168>
        /* zero the remaining bytes */
        memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
  131fbc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131fc0:	e5932004 	ldr	r2, [r3, #4]
  131fc4:	e1db31b4 	ldrh	r3, [fp, #20]
  131fc8:	e0820003 	add	r0, r2, r3
  131fcc:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  131fd0:	e1db31b4 	ldrh	r3, [fp, #20]
  131fd4:	e0423003 	sub	r3, r2, r3
  131fd8:	e1a02003 	mov	r2, r3
  131fdc:	e3a01000 	mov	r1, #0
  131fe0:	eb003ca5 	bl	14127c <memset>
      }
#if CHECKSUM_GEN_IP_INLINE
      for (i = 0; i < optlen_aligned/2; i++) {
  131fe4:	e3a03000 	mov	r3, #0
  131fe8:	e50b3010 	str	r3, [fp, #-16]
  131fec:	ea00000c 	b	132024 <ip4_output_if_opt_src+0x1a8>
        chk_sum += ((u16_t*)p->payload)[i];
  131ff0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131ff4:	e5932004 	ldr	r2, [r3, #4]
  131ff8:	e51b3010 	ldr	r3, [fp, #-16]
  131ffc:	e1a03083 	lsl	r3, r3, #1
  132000:	e0823003 	add	r3, r2, r3
  132004:	e1d330b0 	ldrh	r3, [r3]
  132008:	e1a02003 	mov	r2, r3
  13200c:	e51b3008 	ldr	r3, [fp, #-8]
  132010:	e0833002 	add	r3, r3, r2
  132014:	e50b3008 	str	r3, [fp, #-8]
      for (i = 0; i < optlen_aligned/2; i++) {
  132018:	e51b3010 	ldr	r3, [fp, #-16]
  13201c:	e2833001 	add	r3, r3, #1
  132020:	e50b3010 	str	r3, [fp, #-16]
  132024:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  132028:	e1a030a3 	lsr	r3, r3, #1
  13202c:	e6ff3073 	uxth	r3, r3
  132030:	e1a02003 	mov	r2, r3
  132034:	e51b3010 	ldr	r3, [fp, #-16]
  132038:	e1530002 	cmp	r3, r2
  13203c:	baffffeb 	blt	131ff0 <ip4_output_if_opt_src+0x174>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  132040:	e3a01014 	mov	r1, #20
  132044:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132048:	ebffa37d 	bl	11ae44 <pbuf_header>
  13204c:	e1a03000 	mov	r3, r0
  132050:	e3530000 	cmp	r3, #0
  132054:	0a000010 	beq	13209c <ip4_output_if_opt_src+0x220>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
  132058:	e30e3a14 	movw	r3, #59924	; 0xea14
  13205c:	e3403056 	movt	r3, #86	; 0x56
  132060:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  132064:	e2833001 	add	r3, r3, #1
  132068:	e6ff2073 	uxth	r2, r3
  13206c:	e30e3a14 	movw	r3, #59924	; 0xea14
  132070:	e3403056 	movt	r3, #86	; 0x56
  132074:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
  132078:	e30e3a14 	movw	r3, #59924	; 0xea14
  13207c:	e3403056 	movt	r3, #86	; 0x56
  132080:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  132084:	e2832001 	add	r2, r3, #1
  132088:	e30e3a14 	movw	r3, #59924	; 0xea14
  13208c:	e3403056 	movt	r3, #86	; 0x56
  132090:	e5832144 	str	r2, [r3, #324]	; 0x144
      return ERR_BUF;
  132094:	e3e03001 	mvn	r3, #1
  132098:	ea0000e8 	b	132440 <ip4_output_if_opt_src+0x5c4>
    }

    iphdr = (struct ip_hdr *)p->payload;
  13209c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1320a0:	e5933004 	ldr	r3, [r3, #4]
  1320a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
  1320a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1320ac:	e1d330ba 	ldrh	r3, [r3, #10]
  1320b0:	e3530013 	cmp	r3, #19
  1320b4:	8a000006 	bhi	1320d4 <ip4_output_if_opt_src+0x258>
  1320b8:	e30908e0 	movw	r0, #39136	; 0x98e0
  1320bc:	e3400014 	movt	r0, #20
  1320c0:	ebff4413 	bl	103114 <rt_kprintf>
  1320c4:	e3001361 	movw	r1, #865	; 0x361
  1320c8:	e30908b0 	movw	r0, #39088	; 0x98b0
  1320cc:	e3400014 	movt	r0, #20
  1320d0:	ebff6406 	bl	10b0f0 <sys_arch_assert>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  1320d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1320d8:	e55b2029 	ldrb	r2, [fp, #-41]	; 0xffffffd7
  1320dc:	e5c32008 	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
  1320e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1320e4:	e5db2008 	ldrb	r2, [fp, #8]
  1320e8:	e5c32009 	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
  1320ec:	e5db2008 	ldrb	r2, [fp, #8]
  1320f0:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  1320f4:	e1a03403 	lsl	r3, r3, #8
  1320f8:	e1823003 	orr	r3, r2, r3
  1320fc:	e1a03403 	lsl	r3, r3, #8
  132100:	e6ff2073 	uxth	r2, r3
  132104:	e5db1008 	ldrb	r1, [fp, #8]
  132108:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  13210c:	e1a03403 	lsl	r3, r3, #8
  132110:	e1813003 	orr	r3, r1, r3
  132114:	e1a03423 	lsr	r3, r3, #8
  132118:	e6ef3073 	uxtb	r3, r3
  13211c:	e1823003 	orr	r3, r2, r3
  132120:	e51b2008 	ldr	r2, [fp, #-8]
  132124:	e0823003 	add	r3, r2, r3
  132128:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
  13212c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132130:	e5932000 	ldr	r2, [r3]
  132134:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132138:	e5832010 	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
  13213c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132140:	e5933010 	ldr	r3, [r3, #16]
  132144:	e6ff3073 	uxth	r3, r3
  132148:	e51b2008 	ldr	r2, [fp, #-8]
  13214c:	e0823003 	add	r3, r2, r3
  132150:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
  132154:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132158:	e5933010 	ldr	r3, [r3, #16]
  13215c:	e1a03823 	lsr	r3, r3, #16
  132160:	e51b2008 	ldr	r2, [fp, #-8]
  132164:	e0823003 	add	r3, r2, r3
  132168:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  13216c:	e15b30ba 	ldrh	r3, [fp, #-10]
  132170:	e1a03123 	lsr	r3, r3, #2
  132174:	e6ff3073 	uxth	r3, r3
  132178:	e6ef3073 	uxtb	r3, r3
  13217c:	e3833040 	orr	r3, r3, #64	; 0x40
  132180:	e6ef2073 	uxtb	r2, r3
  132184:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132188:	e5c32000 	strb	r2, [r3]
    IPH_TOS_SET(iphdr, tos);
  13218c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132190:	e5db2004 	ldrb	r2, [fp, #4]
  132194:	e5c32001 	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
  132198:	e5db2004 	ldrb	r2, [fp, #4]
  13219c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1321a0:	e5d33000 	ldrb	r3, [r3]
  1321a4:	e1a03403 	lsl	r3, r3, #8
  1321a8:	e1823003 	orr	r3, r2, r3
  1321ac:	e1a03403 	lsl	r3, r3, #8
  1321b0:	e6ff2073 	uxth	r2, r3
  1321b4:	e5db1004 	ldrb	r1, [fp, #4]
  1321b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1321bc:	e5d33000 	ldrb	r3, [r3]
  1321c0:	e1a03403 	lsl	r3, r3, #8
  1321c4:	e1813003 	orr	r3, r1, r3
  1321c8:	e1a03423 	lsr	r3, r3, #8
  1321cc:	e6ef3073 	uxtb	r3, r3
  1321d0:	e1823003 	orr	r3, r2, r3
  1321d4:	e51b2008 	ldr	r2, [fp, #-8]
  1321d8:	e0823003 	add	r3, r2, r3
  1321dc:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
  1321e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1321e4:	e1d330b8 	ldrh	r3, [r3, #8]
  1321e8:	e1a00003 	mov	r0, r3
  1321ec:	ebff90fb 	bl	1165e0 <lwip_htons>
  1321f0:	e1a03000 	mov	r3, r0
  1321f4:	e1a02003 	mov	r2, r3
  1321f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1321fc:	e1c320b2 	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
  132200:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132204:	e1d330b2 	ldrh	r3, [r3, #2]
  132208:	e6ff3073 	uxth	r3, r3
  13220c:	e1a02003 	mov	r2, r3
  132210:	e51b3008 	ldr	r3, [fp, #-8]
  132214:	e0833002 	add	r3, r3, r2
  132218:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  13221c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132220:	e3a02000 	mov	r2, #0
  132224:	e5c32006 	strb	r2, [r3, #6]
  132228:	e3a02000 	mov	r2, #0
  13222c:	e5c32007 	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
  132230:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132234:	e3403014 	movt	r3, #20
  132238:	e1d330b0 	ldrh	r3, [r3]
  13223c:	e1a00003 	mov	r0, r3
  132240:	ebff90e6 	bl	1165e0 <lwip_htons>
  132244:	e1a03000 	mov	r3, r0
  132248:	e1a02003 	mov	r2, r3
  13224c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132250:	e1c320b4 	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
  132254:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132258:	e1d330b4 	ldrh	r3, [r3, #4]
  13225c:	e6ff3073 	uxth	r3, r3
  132260:	e1a02003 	mov	r2, r3
  132264:	e51b3008 	ldr	r3, [fp, #-8]
  132268:	e0833002 	add	r3, r3, r2
  13226c:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  132270:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132274:	e3403014 	movt	r3, #20
  132278:	e1d330b0 	ldrh	r3, [r3]
  13227c:	e2833001 	add	r3, r3, #1
  132280:	e6ff2073 	uxth	r2, r3
  132284:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132288:	e3403014 	movt	r3, #20
  13228c:	e1c320b0 	strh	r2, [r3]

    if (src == NULL) {
  132290:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132294:	e3530000 	cmp	r3, #0
  132298:	1a000005 	bne	1322b4 <ip4_output_if_opt_src+0x438>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
  13229c:	e3093910 	movw	r3, #39184	; 0x9910
  1322a0:	e3403014 	movt	r3, #20
  1322a4:	e5932000 	ldr	r2, [r3]
  1322a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322ac:	e583200c 	str	r2, [r3, #12]
  1322b0:	ea000003 	b	1322c4 <ip4_output_if_opt_src+0x448>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
  1322b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1322b8:	e5932000 	ldr	r2, [r3]
  1322bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322c0:	e583200c 	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  1322c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322c8:	e593300c 	ldr	r3, [r3, #12]
  1322cc:	e6ff3073 	uxth	r3, r3
  1322d0:	e51b2008 	ldr	r2, [fp, #-8]
  1322d4:	e0823003 	add	r3, r2, r3
  1322d8:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  1322dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322e0:	e593300c 	ldr	r3, [r3, #12]
  1322e4:	e1a03823 	lsr	r3, r3, #16
  1322e8:	e51b2008 	ldr	r2, [fp, #-8]
  1322ec:	e0823003 	add	r3, r2, r3
  1322f0:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  1322f4:	e51b3008 	ldr	r3, [fp, #-8]
  1322f8:	e1a02823 	lsr	r2, r3, #16
  1322fc:	e51b3008 	ldr	r3, [fp, #-8]
  132300:	e6ff3073 	uxth	r3, r3
  132304:	e0823003 	add	r3, r2, r3
  132308:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + chk_sum;
  13230c:	e51b3008 	ldr	r3, [fp, #-8]
  132310:	e1a03823 	lsr	r3, r3, #16
  132314:	e51b2008 	ldr	r2, [fp, #-8]
  132318:	e0823003 	add	r3, r2, r3
  13231c:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = ~chk_sum;
  132320:	e51b3008 	ldr	r3, [fp, #-8]
  132324:	e1e03003 	mvn	r3, r3
  132328:	e50b3008 	str	r3, [fp, #-8]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
  13232c:	e51b3008 	ldr	r3, [fp, #-8]
  132330:	e6ff2073 	uxth	r2, r3
  132334:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132338:	e1c320ba 	strh	r2, [r3, #10]
  13233c:	ea000007 	b	132360 <ip4_output_if_opt_src+0x4e4>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
  132340:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132344:	e5933004 	ldr	r3, [r3, #4]
  132348:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ip4_addr_copy(dest_addr, iphdr->dest);
  13234c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132350:	e5933010 	ldr	r3, [r3, #16]
  132354:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    dest = &dest_addr;
  132358:	e24b301c 	sub	r3, fp, #28
  13235c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  }

  IP_STATS_INC(ip.xmit);
  132360:	e30e3a14 	movw	r3, #59924	; 0xea14
  132364:	e3403056 	movt	r3, #86	; 0x56
  132368:	e1d334b8 	ldrh	r3, [r3, #72]	; 0x48
  13236c:	e2833001 	add	r3, r3, #1
  132370:	e6ff2073 	uxth	r2, r3
  132374:	e30e3a14 	movw	r3, #59924	; 0xea14
  132378:	e3403056 	movt	r3, #86	; 0x56
  13237c:	e1c324b8 	strh	r2, [r3, #72]	; 0x48

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
  132380:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132384:	e5932000 	ldr	r2, [r3]
  132388:	e59b300c 	ldr	r3, [fp, #12]
  13238c:	e2833004 	add	r3, r3, #4
  132390:	e5933000 	ldr	r3, [r3]
  132394:	e1520003 	cmp	r2, r3
  132398:	0a000004 	beq	1323b0 <ip4_output_if_opt_src+0x534>
#if !LWIP_HAVE_LOOPIF
      || ip4_addr_isloopback(dest)
  13239c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1323a0:	e5933000 	ldr	r3, [r3]
  1323a4:	e6ef3073 	uxtb	r3, r3
  1323a8:	e353007f 	cmp	r3, #127	; 0x7f
  1323ac:	1a000004 	bne	1323c4 <ip4_output_if_opt_src+0x548>
#endif /* !LWIP_HAVE_LOOPIF */
      ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
  1323b0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1323b4:	e59b000c 	ldr	r0, [fp, #12]
  1323b8:	ebff9e77 	bl	119d9c <netif_loop_output>
  1323bc:	e1a03000 	mov	r3, r0
  1323c0:	ea00001e 	b	132440 <ip4_output_if_opt_src+0x5c4>
  }
#if LWIP_MULTICAST_TX_OPTIONS
  if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
  1323c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1323c8:	e5d3300d 	ldrb	r3, [r3, #13]
  1323cc:	e2033004 	and	r3, r3, #4
  1323d0:	e3530000 	cmp	r3, #0
  1323d4:	0a000002 	beq	1323e4 <ip4_output_if_opt_src+0x568>
    netif_loop_output(netif, p);
  1323d8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1323dc:	e59b000c 	ldr	r0, [fp, #12]
  1323e0:	ebff9e6d 	bl	119d9c <netif_loop_output>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  1323e4:	e59b300c 	ldr	r3, [fp, #12]
  1323e8:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  1323ec:	e3530000 	cmp	r3, #0
  1323f0:	0a00000b 	beq	132424 <ip4_output_if_opt_src+0x5a8>
  1323f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1323f8:	e1d320b8 	ldrh	r2, [r3, #8]
  1323fc:	e59b300c 	ldr	r3, [fp, #12]
  132400:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  132404:	e1520003 	cmp	r2, r3
  132408:	9a000005 	bls	132424 <ip4_output_if_opt_src+0x5a8>
    return ip4_frag(p, netif, dest);
  13240c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  132410:	e59b100c 	ldr	r1, [fp, #12]
  132414:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132418:	eb00068e 	bl	133e58 <ip4_frag>
  13241c:	e1a03000 	mov	r3, r0
  132420:	ea000006 	b	132440 <ip4_output_if_opt_src+0x5c4>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
  132424:	e59b300c 	ldr	r3, [fp, #12]
  132428:	e5933014 	ldr	r3, [r3, #20]
  13242c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  132430:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  132434:	e59b000c 	ldr	r0, [fp, #12]
  132438:	e12fff33 	blx	r3
  13243c:	e1a03000 	mov	r3, r0
}
  132440:	e1a00003 	mov	r0, r3
  132444:	e24bd004 	sub	sp, fp, #4
  132448:	e8bd8800 	pop	{fp, pc}

0013244c <ip4_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip4_output(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  13244c:	e92d4800 	push	{fp, lr}
  132450:	e28db004 	add	fp, sp, #4
  132454:	e24dd028 	sub	sp, sp, #40	; 0x28
  132458:	e50b0010 	str	r0, [fp, #-16]
  13245c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  132460:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  132464:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netif *netif;

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  132468:	e51b3010 	ldr	r3, [fp, #-16]
  13246c:	e1d330be 	ldrh	r3, [r3, #14]
  132470:	e3530001 	cmp	r3, #1
  132474:	0a000006 	beq	132494 <ip4_output+0x48>
  132478:	e30908a4 	movw	r0, #39076	; 0x98a4
  13247c:	e3400014 	movt	r0, #20
  132480:	ebff4323 	bl	103114 <rt_kprintf>
  132484:	e30013db 	movw	r1, #987	; 0x3db
  132488:	e30908b0 	movw	r0, #39088	; 0x98b0
  13248c:	e3400014 	movt	r0, #20
  132490:	ebff6316 	bl	10b0f0 <sys_arch_assert>

  if ((netif = ip4_route_src(dest, src)) == NULL) {
  132494:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132498:	ebfffb3e 	bl	131198 <ip4_route>
  13249c:	e50b0008 	str	r0, [fp, #-8]
  1324a0:	e51b3008 	ldr	r3, [fp, #-8]
  1324a4:	e3530000 	cmp	r3, #0
  1324a8:	1a000009 	bne	1324d4 <ip4_output+0x88>
    LWIP_DEBUGF(IP_DEBUG, ("ip4_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  1324ac:	e30e3a14 	movw	r3, #59924	; 0xea14
  1324b0:	e3403056 	movt	r3, #86	; 0x56
  1324b4:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  1324b8:	e2833001 	add	r3, r3, #1
  1324bc:	e6ff2073 	uxth	r2, r3
  1324c0:	e30e3a14 	movw	r3, #59924	; 0xea14
  1324c4:	e3403056 	movt	r3, #86	; 0x56
  1324c8:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    return ERR_RTE;
  1324cc:	e3e03003 	mvn	r3, #3
  1324d0:	ea00000c 	b	132508 <ip4_output+0xbc>
  }

  return ip4_output_if(p, src, dest, ttl, tos, proto, netif);
  1324d4:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  1324d8:	e51b3008 	ldr	r3, [fp, #-8]
  1324dc:	e58d3008 	str	r3, [sp, #8]
  1324e0:	e5db3008 	ldrb	r3, [fp, #8]
  1324e4:	e58d3004 	str	r3, [sp, #4]
  1324e8:	e5db3004 	ldrb	r3, [fp, #4]
  1324ec:	e58d3000 	str	r3, [sp]
  1324f0:	e1a03002 	mov	r3, r2
  1324f4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1324f8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1324fc:	e51b0010 	ldr	r0, [fp, #-16]
  132500:	ebfffdfd 	bl	131cfc <ip4_output_if>
  132504:	e1a03000 	mov	r3, r0
}
  132508:	e1a00003 	mov	r0, r3
  13250c:	e24bd004 	sub	sp, fp, #4
  132510:	e8bd8800 	pop	{fp, pc}

00132514 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
  132514:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  132518:	e28db000 	add	fp, sp, #0
  13251c:	e24dd014 	sub	sp, sp, #20
  132520:	e50b0010 	str	r0, [fp, #-16]
  132524:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
  132528:	e51b3010 	ldr	r3, [fp, #-16]
  13252c:	e50b3008 	str	r3, [fp, #-8]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  132530:	e51b3010 	ldr	r3, [fp, #-16]
  132534:	e3730001 	cmn	r3, #1
  132538:	0a000002 	beq	132548 <ip4_addr_isbroadcast_u32+0x34>
  13253c:	e51b3010 	ldr	r3, [fp, #-16]
  132540:	e3530000 	cmp	r3, #0
  132544:	1a000001 	bne	132550 <ip4_addr_isbroadcast_u32+0x3c>
      (addr == IPADDR_ANY)) {
    return 1;
  132548:	e3a03001 	mov	r3, #1
  13254c:	ea000028 	b	1325f4 <ip4_addr_isbroadcast_u32+0xe0>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  132550:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132554:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  132558:	e2033002 	and	r3, r3, #2
  13255c:	e3530000 	cmp	r3, #0
  132560:	1a000001 	bne	13256c <ip4_addr_isbroadcast_u32+0x58>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  132564:	e3a03000 	mov	r3, #0
  132568:	ea000021 	b	1325f4 <ip4_addr_isbroadcast_u32+0xe0>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
  13256c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132570:	e2833004 	add	r3, r3, #4
  132574:	e5933000 	ldr	r3, [r3]
  132578:	e51b2010 	ldr	r2, [fp, #-16]
  13257c:	e1520003 	cmp	r2, r3
  132580:	1a000001 	bne	13258c <ip4_addr_isbroadcast_u32+0x78>
    return 0;
  132584:	e3a03000 	mov	r3, #0
  132588:	ea000019 	b	1325f4 <ip4_addr_isbroadcast_u32+0xe0>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
  13258c:	e51b2008 	ldr	r2, [fp, #-8]
  132590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132594:	e2833004 	add	r3, r3, #4
  132598:	e5933000 	ldr	r3, [r3]
  13259c:	e0222003 	eor	r2, r2, r3
  1325a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1325a4:	e2833008 	add	r3, r3, #8
  1325a8:	e5933000 	ldr	r3, [r3]
  1325ac:	e0033002 	and	r3, r3, r2
  1325b0:	e3530000 	cmp	r3, #0
  1325b4:	1a00000d 	bne	1325f0 <ip4_addr_isbroadcast_u32+0xdc>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  1325b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1325bc:	e2833008 	add	r3, r3, #8
  1325c0:	e5933000 	ldr	r3, [r3]
  1325c4:	e1e02003 	mvn	r2, r3
  1325c8:	e51b3010 	ldr	r3, [fp, #-16]
  1325cc:	e0022003 	and	r2, r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
  1325d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1325d4:	e2833008 	add	r3, r3, #8
  1325d8:	e5933000 	ldr	r3, [r3]
  1325dc:	e1e03003 	mvn	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  1325e0:	e1520003 	cmp	r2, r3
  1325e4:	1a000001 	bne	1325f0 <ip4_addr_isbroadcast_u32+0xdc>
    /* => network broadcast address */
    return 1;
  1325e8:	e3a03001 	mov	r3, #1
  1325ec:	ea000000 	b	1325f4 <ip4_addr_isbroadcast_u32+0xe0>
  } else {
    return 0;
  1325f0:	e3a03000 	mov	r3, #0
  }
}
  1325f4:	e1a00003 	mov	r0, r3
  1325f8:	e28bd000 	add	sp, fp, #0
  1325fc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  132600:	e12fff1e 	bx	lr

00132604 <ip4_addr_netmask_valid>:
 * @param netmask the IPv4 netmask to check (in network byte order!)
 * @return 1 if the netmask is valid, 0 if it is not
 */
u8_t
ip4_addr_netmask_valid(u32_t netmask)
{
  132604:	e92d4800 	push	{fp, lr}
  132608:	e28db004 	add	fp, sp, #4
  13260c:	e24dd010 	sub	sp, sp, #16
  132610:	e50b0010 	str	r0, [fp, #-16]
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);
  132614:	e51b0010 	ldr	r0, [fp, #-16]
  132618:	ebff8ffc 	bl	116610 <lwip_htonl>
  13261c:	e50b000c 	str	r0, [fp, #-12]

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  132620:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
  132624:	e50b3008 	str	r3, [fp, #-8]
  132628:	ea000007 	b	13264c <ip4_addr_netmask_valid+0x48>
    if ((nm_hostorder & mask) == 0) {
  13262c:	e51b200c 	ldr	r2, [fp, #-12]
  132630:	e51b3008 	ldr	r3, [fp, #-8]
  132634:	e0033002 	and	r3, r3, r2
  132638:	e3530000 	cmp	r3, #0
  13263c:	0a000006 	beq	13265c <ip4_addr_netmask_valid+0x58>
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  132640:	e51b3008 	ldr	r3, [fp, #-8]
  132644:	e1a030a3 	lsr	r3, r3, #1
  132648:	e50b3008 	str	r3, [fp, #-8]
  13264c:	e51b3008 	ldr	r3, [fp, #-8]
  132650:	e3530000 	cmp	r3, #0
  132654:	1afffff4 	bne	13262c <ip4_addr_netmask_valid+0x28>
  132658:	ea00000b 	b	13268c <ip4_addr_netmask_valid+0x88>
      break;
  13265c:	e320f000 	nop	{0}
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
  132660:	ea000009 	b	13268c <ip4_addr_netmask_valid+0x88>
    if ((nm_hostorder & mask) != 0) {
  132664:	e51b200c 	ldr	r2, [fp, #-12]
  132668:	e51b3008 	ldr	r3, [fp, #-8]
  13266c:	e0033002 	and	r3, r3, r2
  132670:	e3530000 	cmp	r3, #0
  132674:	0a000001 	beq	132680 <ip4_addr_netmask_valid+0x7c>
      /* there is a one after the first zero -> invalid */
      return 0;
  132678:	e3a03000 	mov	r3, #0
  13267c:	ea000006 	b	13269c <ip4_addr_netmask_valid+0x98>
  for (; mask != 0; mask >>= 1) {
  132680:	e51b3008 	ldr	r3, [fp, #-8]
  132684:	e1a030a3 	lsr	r3, r3, #1
  132688:	e50b3008 	str	r3, [fp, #-8]
  13268c:	e51b3008 	ldr	r3, [fp, #-8]
  132690:	e3530000 	cmp	r3, #0
  132694:	1afffff2 	bne	132664 <ip4_addr_netmask_valid+0x60>
    }
  }
  /* no one after the first zero -> valid */
  return 1;
  132698:	e3a03001 	mov	r3, #1
}
  13269c:	e1a00003 	mov	r0, r3
  1326a0:	e24bd004 	sub	sp, fp, #4
  1326a4:	e8bd8800 	pop	{fp, pc}

001326a8 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
  1326a8:	e92d4800 	push	{fp, lr}
  1326ac:	e28db004 	add	fp, sp, #4
  1326b0:	e24dd010 	sub	sp, sp, #16
  1326b4:	e50b0010 	str	r0, [fp, #-16]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
  1326b8:	e24b3008 	sub	r3, fp, #8
  1326bc:	e1a01003 	mov	r1, r3
  1326c0:	e51b0010 	ldr	r0, [fp, #-16]
  1326c4:	eb000008 	bl	1326ec <ip4addr_aton>
  1326c8:	e1a03000 	mov	r3, r0
  1326cc:	e3530000 	cmp	r3, #0
  1326d0:	0a000001 	beq	1326dc <ipaddr_addr+0x34>
    return ip4_addr_get_u32(&val);
  1326d4:	e51b3008 	ldr	r3, [fp, #-8]
  1326d8:	ea000000 	b	1326e0 <ipaddr_addr+0x38>
  }
  return (IPADDR_NONE);
  1326dc:	e3e03000 	mvn	r3, #0
}
  1326e0:	e1a00003 	mov	r0, r3
  1326e4:	e24bd004 	sub	sp, fp, #4
  1326e8:	e8bd8800 	pop	{fp, pc}

001326ec <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  1326ec:	e92d4800 	push	{fp, lr}
  1326f0:	e28db004 	add	fp, sp, #4
  1326f4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1326f8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1326fc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
  132700:	e24b3020 	sub	r3, fp, #32
  132704:	e50b3010 	str	r3, [fp, #-16]

  c = *cp;
  132708:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13270c:	e5d33000 	ldrb	r3, [r3]
  132710:	e54b300a 	strb	r3, [fp, #-10]
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
  132714:	e55b300a 	ldrb	r3, [fp, #-10]
  132718:	e353002f 	cmp	r3, #47	; 0x2f
  13271c:	9a000002 	bls	13272c <ip4addr_aton+0x40>
  132720:	e55b300a 	ldrb	r3, [fp, #-10]
  132724:	e3530039 	cmp	r3, #57	; 0x39
  132728:	9a000001 	bls	132734 <ip4addr_aton+0x48>
      return 0;
  13272c:	e3a03000 	mov	r3, #0
  132730:	ea0000ee 	b	132af0 <ip4addr_aton+0x404>
    }
    val = 0;
  132734:	e3a03000 	mov	r3, #0
  132738:	e50b3008 	str	r3, [fp, #-8]
    base = 10;
  13273c:	e3a0300a 	mov	r3, #10
  132740:	e54b3009 	strb	r3, [fp, #-9]
    if (c == '0') {
  132744:	e55b300a 	ldrb	r3, [fp, #-10]
  132748:	e3530030 	cmp	r3, #48	; 0x30
  13274c:	1a000016 	bne	1327ac <ip4addr_aton+0xc0>
      c = *++cp;
  132750:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132754:	e2833001 	add	r3, r3, #1
  132758:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  13275c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132760:	e5d33000 	ldrb	r3, [r3]
  132764:	e54b300a 	strb	r3, [fp, #-10]
      if (c == 'x' || c == 'X') {
  132768:	e55b300a 	ldrb	r3, [fp, #-10]
  13276c:	e3530078 	cmp	r3, #120	; 0x78
  132770:	0a000002 	beq	132780 <ip4addr_aton+0x94>
  132774:	e55b300a 	ldrb	r3, [fp, #-10]
  132778:	e3530058 	cmp	r3, #88	; 0x58
  13277c:	1a000008 	bne	1327a4 <ip4addr_aton+0xb8>
        base = 16;
  132780:	e3a03010 	mov	r3, #16
  132784:	e54b3009 	strb	r3, [fp, #-9]
        c = *++cp;
  132788:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13278c:	e2833001 	add	r3, r3, #1
  132790:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132794:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132798:	e5d33000 	ldrb	r3, [r3]
  13279c:	e54b300a 	strb	r3, [fp, #-10]
  1327a0:	ea000001 	b	1327ac <ip4addr_aton+0xc0>
      } else {
        base = 8;
  1327a4:	e3a03008 	mov	r3, #8
  1327a8:	e54b3009 	strb	r3, [fp, #-9]
      }
    }
    for (;;) {
      if (isdigit(c)) {
  1327ac:	e55b300a 	ldrb	r3, [fp, #-10]
  1327b0:	e353002f 	cmp	r3, #47	; 0x2f
  1327b4:	9a000010 	bls	1327fc <ip4addr_aton+0x110>
  1327b8:	e55b300a 	ldrb	r3, [fp, #-10]
  1327bc:	e3530039 	cmp	r3, #57	; 0x39
  1327c0:	8a00000d 	bhi	1327fc <ip4addr_aton+0x110>
        val = (val * base) + (u32_t)(c - '0');
  1327c4:	e55b3009 	ldrb	r3, [fp, #-9]
  1327c8:	e51b2008 	ldr	r2, [fp, #-8]
  1327cc:	e0020392 	mul	r2, r2, r3
  1327d0:	e55b300a 	ldrb	r3, [fp, #-10]
  1327d4:	e0823003 	add	r3, r2, r3
  1327d8:	e2433030 	sub	r3, r3, #48	; 0x30
  1327dc:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  1327e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1327e4:	e2833001 	add	r3, r3, #1
  1327e8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1327ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1327f0:	e5d33000 	ldrb	r3, [r3]
  1327f4:	e54b300a 	strb	r3, [fp, #-10]
  1327f8:	ea00002a 	b	1328a8 <ip4addr_aton+0x1bc>
      } else if (base == 16 && isxdigit(c)) {
  1327fc:	e55b3009 	ldrb	r3, [fp, #-9]
  132800:	e3530010 	cmp	r3, #16
  132804:	1a000028 	bne	1328ac <ip4addr_aton+0x1c0>
  132808:	e55b300a 	ldrb	r3, [fp, #-10]
  13280c:	e353002f 	cmp	r3, #47	; 0x2f
  132810:	9a000002 	bls	132820 <ip4addr_aton+0x134>
  132814:	e55b300a 	ldrb	r3, [fp, #-10]
  132818:	e3530039 	cmp	r3, #57	; 0x39
  13281c:	9a00000b 	bls	132850 <ip4addr_aton+0x164>
  132820:	e55b300a 	ldrb	r3, [fp, #-10]
  132824:	e3530060 	cmp	r3, #96	; 0x60
  132828:	9a000002 	bls	132838 <ip4addr_aton+0x14c>
  13282c:	e55b300a 	ldrb	r3, [fp, #-10]
  132830:	e3530066 	cmp	r3, #102	; 0x66
  132834:	9a000005 	bls	132850 <ip4addr_aton+0x164>
  132838:	e55b300a 	ldrb	r3, [fp, #-10]
  13283c:	e3530040 	cmp	r3, #64	; 0x40
  132840:	9a000019 	bls	1328ac <ip4addr_aton+0x1c0>
  132844:	e55b300a 	ldrb	r3, [fp, #-10]
  132848:	e3530046 	cmp	r3, #70	; 0x46
  13284c:	8a000016 	bhi	1328ac <ip4addr_aton+0x1c0>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
  132850:	e51b3008 	ldr	r3, [fp, #-8]
  132854:	e1a03203 	lsl	r3, r3, #4
  132858:	e55b200a 	ldrb	r2, [fp, #-10]
  13285c:	e282100a 	add	r1, r2, #10
  132860:	e55b200a 	ldrb	r2, [fp, #-10]
  132864:	e3520060 	cmp	r2, #96	; 0x60
  132868:	9a000004 	bls	132880 <ip4addr_aton+0x194>
  13286c:	e55b200a 	ldrb	r2, [fp, #-10]
  132870:	e352007a 	cmp	r2, #122	; 0x7a
  132874:	8a000001 	bhi	132880 <ip4addr_aton+0x194>
  132878:	e3a02061 	mov	r2, #97	; 0x61
  13287c:	ea000000 	b	132884 <ip4addr_aton+0x198>
  132880:	e3a02041 	mov	r2, #65	; 0x41
  132884:	e0412002 	sub	r2, r1, r2
  132888:	e1833002 	orr	r3, r3, r2
  13288c:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  132890:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132894:	e2833001 	add	r3, r3, #1
  132898:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  13289c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1328a0:	e5d33000 	ldrb	r3, [r3]
  1328a4:	e54b300a 	strb	r3, [fp, #-10]
      if (isdigit(c)) {
  1328a8:	eaffffbf 	b	1327ac <ip4addr_aton+0xc0>
      } else {
        break;
      }
    }
    if (c == '.') {
  1328ac:	e55b300a 	ldrb	r3, [fp, #-10]
  1328b0:	e353002e 	cmp	r3, #46	; 0x2e
  1328b4:	1a000012 	bne	132904 <ip4addr_aton+0x218>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
  1328b8:	e24b3020 	sub	r3, fp, #32
  1328bc:	e283300c 	add	r3, r3, #12
  1328c0:	e51b2010 	ldr	r2, [fp, #-16]
  1328c4:	e1520003 	cmp	r2, r3
  1328c8:	3a000001 	bcc	1328d4 <ip4addr_aton+0x1e8>
        return 0;
  1328cc:	e3a03000 	mov	r3, #0
  1328d0:	ea000086 	b	132af0 <ip4addr_aton+0x404>
      }
      *pp++ = val;
  1328d4:	e51b3010 	ldr	r3, [fp, #-16]
  1328d8:	e2832004 	add	r2, r3, #4
  1328dc:	e50b2010 	str	r2, [fp, #-16]
  1328e0:	e51b2008 	ldr	r2, [fp, #-8]
  1328e4:	e5832000 	str	r2, [r3]
      c = *++cp;
  1328e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1328ec:	e2833001 	add	r3, r3, #1
  1328f0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1328f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1328f8:	e5d33000 	ldrb	r3, [r3]
  1328fc:	e54b300a 	strb	r3, [fp, #-10]
    if (!isdigit(c)) {
  132900:	eaffff83 	b	132714 <ip4addr_aton+0x28>
    } else {
      break;
  132904:	e320f000 	nop	{0}
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
  132908:	e55b300a 	ldrb	r3, [fp, #-10]
  13290c:	e3530000 	cmp	r3, #0
  132910:	0a000013 	beq	132964 <ip4addr_aton+0x278>
  132914:	e55b300a 	ldrb	r3, [fp, #-10]
  132918:	e3530020 	cmp	r3, #32
  13291c:	0a000010 	beq	132964 <ip4addr_aton+0x278>
  132920:	e55b300a 	ldrb	r3, [fp, #-10]
  132924:	e353000c 	cmp	r3, #12
  132928:	0a00000d 	beq	132964 <ip4addr_aton+0x278>
  13292c:	e55b300a 	ldrb	r3, [fp, #-10]
  132930:	e353000a 	cmp	r3, #10
  132934:	0a00000a 	beq	132964 <ip4addr_aton+0x278>
  132938:	e55b300a 	ldrb	r3, [fp, #-10]
  13293c:	e353000d 	cmp	r3, #13
  132940:	0a000007 	beq	132964 <ip4addr_aton+0x278>
  132944:	e55b300a 	ldrb	r3, [fp, #-10]
  132948:	e3530009 	cmp	r3, #9
  13294c:	0a000004 	beq	132964 <ip4addr_aton+0x278>
  132950:	e55b300a 	ldrb	r3, [fp, #-10]
  132954:	e353000b 	cmp	r3, #11
  132958:	0a000001 	beq	132964 <ip4addr_aton+0x278>
    return 0;
  13295c:	e3a03000 	mov	r3, #0
  132960:	ea000062 	b	132af0 <ip4addr_aton+0x404>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
  132964:	e51b2010 	ldr	r2, [fp, #-16]
  132968:	e24b3020 	sub	r3, fp, #32
  13296c:	e0423003 	sub	r3, r2, r3
  132970:	e1a03143 	asr	r3, r3, #2
  132974:	e2833001 	add	r3, r3, #1
  132978:	e3530004 	cmp	r3, #4
  13297c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  132980:	ea000048 	b	132aa8 <ip4addr_aton+0x3bc>
  132984:	00132998 	.word	0x00132998
  132988:	00132ac8 	.word	0x00132ac8
  13298c:	001329a0 	.word	0x001329a0
  132990:	001329e0 	.word	0x001329e0
  132994:	00132a38 	.word	0x00132a38

  case 0:
    return 0;       /* initial nondigit */
  132998:	e3a03000 	mov	r3, #0
  13299c:	ea000053 	b	132af0 <ip4addr_aton+0x404>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
  1329a0:	e51b3008 	ldr	r3, [fp, #-8]
  1329a4:	e3530401 	cmp	r3, #16777216	; 0x1000000
  1329a8:	3a000001 	bcc	1329b4 <ip4addr_aton+0x2c8>
      return 0;
  1329ac:	e3a03000 	mov	r3, #0
  1329b0:	ea00004e 	b	132af0 <ip4addr_aton+0x404>
    }
    if (parts[0] > 0xff) {
  1329b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1329b8:	e35300ff 	cmp	r3, #255	; 0xff
  1329bc:	9a000001 	bls	1329c8 <ip4addr_aton+0x2dc>
      return 0;
  1329c0:	e3a03000 	mov	r3, #0
  1329c4:	ea000049 	b	132af0 <ip4addr_aton+0x404>
    }
    val |= parts[0] << 24;
  1329c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1329cc:	e1a03c03 	lsl	r3, r3, #24
  1329d0:	e51b2008 	ldr	r2, [fp, #-8]
  1329d4:	e1823003 	orr	r3, r2, r3
  1329d8:	e50b3008 	str	r3, [fp, #-8]
    break;
  1329dc:	ea00003a 	b	132acc <ip4addr_aton+0x3e0>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
  1329e0:	e51b3008 	ldr	r3, [fp, #-8]
  1329e4:	e3530801 	cmp	r3, #65536	; 0x10000
  1329e8:	3a000001 	bcc	1329f4 <ip4addr_aton+0x308>
      return 0;
  1329ec:	e3a03000 	mov	r3, #0
  1329f0:	ea00003e 	b	132af0 <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
  1329f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1329f8:	e35300ff 	cmp	r3, #255	; 0xff
  1329fc:	8a000002 	bhi	132a0c <ip4addr_aton+0x320>
  132a00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132a04:	e35300ff 	cmp	r3, #255	; 0xff
  132a08:	9a000001 	bls	132a14 <ip4addr_aton+0x328>
      return 0;
  132a0c:	e3a03000 	mov	r3, #0
  132a10:	ea000036 	b	132af0 <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
  132a14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132a18:	e1a02c03 	lsl	r2, r3, #24
  132a1c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132a20:	e1a03803 	lsl	r3, r3, #16
  132a24:	e1823003 	orr	r3, r2, r3
  132a28:	e51b2008 	ldr	r2, [fp, #-8]
  132a2c:	e1823003 	orr	r3, r2, r3
  132a30:	e50b3008 	str	r3, [fp, #-8]
    break;
  132a34:	ea000024 	b	132acc <ip4addr_aton+0x3e0>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
  132a38:	e51b3008 	ldr	r3, [fp, #-8]
  132a3c:	e35300ff 	cmp	r3, #255	; 0xff
  132a40:	9a000001 	bls	132a4c <ip4addr_aton+0x360>
      return 0;
  132a44:	e3a03000 	mov	r3, #0
  132a48:	ea000028 	b	132af0 <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
  132a4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132a50:	e35300ff 	cmp	r3, #255	; 0xff
  132a54:	8a000005 	bhi	132a70 <ip4addr_aton+0x384>
  132a58:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132a5c:	e35300ff 	cmp	r3, #255	; 0xff
  132a60:	8a000002 	bhi	132a70 <ip4addr_aton+0x384>
  132a64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132a68:	e35300ff 	cmp	r3, #255	; 0xff
  132a6c:	9a000001 	bls	132a78 <ip4addr_aton+0x38c>
      return 0;
  132a70:	e3a03000 	mov	r3, #0
  132a74:	ea00001d 	b	132af0 <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  132a78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132a7c:	e1a02c03 	lsl	r2, r3, #24
  132a80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132a84:	e1a03803 	lsl	r3, r3, #16
  132a88:	e1822003 	orr	r2, r2, r3
  132a8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132a90:	e1a03403 	lsl	r3, r3, #8
  132a94:	e1823003 	orr	r3, r2, r3
  132a98:	e51b2008 	ldr	r2, [fp, #-8]
  132a9c:	e1823003 	orr	r3, r2, r3
  132aa0:	e50b3008 	str	r3, [fp, #-8]
    break;
  132aa4:	ea000008 	b	132acc <ip4addr_aton+0x3e0>
  default:
    LWIP_ASSERT("unhandled", 0);
  132aa8:	e3090918 	movw	r0, #39192	; 0x9918
  132aac:	e3400014 	movt	r0, #20
  132ab0:	ebff4197 	bl	103114 <rt_kprintf>
  132ab4:	e3001103 	movw	r1, #259	; 0x103
  132ab8:	e3090924 	movw	r0, #39204	; 0x9924
  132abc:	e3400014 	movt	r0, #20
  132ac0:	ebff618a 	bl	10b0f0 <sys_arch_assert>
    break;
  132ac4:	ea000000 	b	132acc <ip4addr_aton+0x3e0>
    break;
  132ac8:	e320f000 	nop	{0}
  }
  if (addr) {
  132acc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132ad0:	e3530000 	cmp	r3, #0
  132ad4:	0a000004 	beq	132aec <ip4addr_aton+0x400>
    ip4_addr_set_u32(addr, lwip_htonl(val));
  132ad8:	e51b0008 	ldr	r0, [fp, #-8]
  132adc:	ebff8ecb 	bl	116610 <lwip_htonl>
  132ae0:	e1a02000 	mov	r2, r0
  132ae4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132ae8:	e5832000 	str	r2, [r3]
  }
  return 1;
  132aec:	e3a03001 	mov	r3, #1
}
  132af0:	e1a00003 	mov	r0, r3
  132af4:	e24bd004 	sub	sp, fp, #4
  132af8:	e8bd8800 	pop	{fp, pc}

00132afc <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
  132afc:	e92d4800 	push	{fp, lr}
  132b00:	e28db004 	add	fp, sp, #4
  132b04:	e24dd008 	sub	sp, sp, #8
  132b08:	e50b0008 	str	r0, [fp, #-8]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  132b0c:	e3a02010 	mov	r2, #16
  132b10:	e30e1be8 	movw	r1, #60392	; 0xebe8
  132b14:	e3401014 	movt	r1, #20
  132b18:	e51b0008 	ldr	r0, [fp, #-8]
  132b1c:	eb000003 	bl	132b30 <ip4addr_ntoa_r>
  132b20:	e1a03000 	mov	r3, r0
}
  132b24:	e1a00003 	mov	r0, r3
  132b28:	e24bd004 	sub	sp, fp, #4
  132b2c:	e8bd8800 	pop	{fp, pc}

00132b30 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  132b30:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  132b34:	e28db000 	add	fp, sp, #0
  132b38:	e24dd034 	sub	sp, sp, #52	; 0x34
  132b3c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132b40:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  132b44:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
  132b48:	e3a03000 	mov	r3, #0
  132b4c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  s_addr = ip4_addr_get_u32(addr);
  132b50:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132b54:	e5933000 	ldr	r3, [r3]
  132b58:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  rp = buf;
  132b5c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132b60:	e50b3008 	str	r3, [fp, #-8]
  ap = (u8_t *)&s_addr;
  132b64:	e24b301c 	sub	r3, fp, #28
  132b68:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  132b6c:	e3a03000 	mov	r3, #0
  132b70:	e54b300d 	strb	r3, [fp, #-13]
  132b74:	ea00004b 	b	132ca8 <ip4addr_ntoa_r+0x178>
    i = 0;
  132b78:	e3a03000 	mov	r3, #0
  132b7c:	e54b300e 	strb	r3, [fp, #-14]
    do {
      rem = *ap % (u8_t)10;
  132b80:	e51b300c 	ldr	r3, [fp, #-12]
  132b84:	e5d31000 	ldrb	r1, [r3]
  132b88:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  132b8c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  132b90:	e0832391 	umull	r2, r3, r1, r3
  132b94:	e1a031a3 	lsr	r3, r3, #3
  132b98:	e3a0200a 	mov	r2, #10
  132b9c:	e0030392 	mul	r3, r2, r3
  132ba0:	e0413003 	sub	r3, r1, r3
  132ba4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
      *ap /= (u8_t)10;
  132ba8:	e51b300c 	ldr	r3, [fp, #-12]
  132bac:	e5d32000 	ldrb	r2, [r3]
  132bb0:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  132bb4:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  132bb8:	e0832392 	umull	r2, r3, r2, r3
  132bbc:	e1a031a3 	lsr	r3, r3, #3
  132bc0:	e6ef2073 	uxtb	r2, r3
  132bc4:	e51b300c 	ldr	r3, [fp, #-12]
  132bc8:	e5c32000 	strb	r2, [r3]
      inv[i++] = (char)('0' + rem);
  132bcc:	e55b300e 	ldrb	r3, [fp, #-14]
  132bd0:	e2832001 	add	r2, r3, #1
  132bd4:	e54b200e 	strb	r2, [fp, #-14]
  132bd8:	e1a01003 	mov	r1, r3
  132bdc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  132be0:	e2833030 	add	r3, r3, #48	; 0x30
  132be4:	e6ef2073 	uxtb	r2, r3
  132be8:	e24b3004 	sub	r3, fp, #4
  132bec:	e0833001 	add	r3, r3, r1
  132bf0:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
    } while (*ap);
  132bf4:	e51b300c 	ldr	r3, [fp, #-12]
  132bf8:	e5d33000 	ldrb	r3, [r3]
  132bfc:	e3530000 	cmp	r3, #0
  132c00:	1affffde 	bne	132b80 <ip4addr_ntoa_r+0x50>
    while (i--) {
  132c04:	ea00000f 	b	132c48 <ip4addr_ntoa_r+0x118>
      if (len++ >= buflen) {
  132c08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132c0c:	e2832001 	add	r2, r3, #1
  132c10:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  132c14:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  132c18:	e1520003 	cmp	r2, r3
  132c1c:	ca000001 	bgt	132c28 <ip4addr_ntoa_r+0xf8>
        return NULL;
  132c20:	e3a03000 	mov	r3, #0
  132c24:	ea000029 	b	132cd0 <ip4addr_ntoa_r+0x1a0>
      }
      *rp++ = inv[i];
  132c28:	e55b200e 	ldrb	r2, [fp, #-14]
  132c2c:	e51b3008 	ldr	r3, [fp, #-8]
  132c30:	e2831001 	add	r1, r3, #1
  132c34:	e50b1008 	str	r1, [fp, #-8]
  132c38:	e24b1004 	sub	r1, fp, #4
  132c3c:	e0812002 	add	r2, r1, r2
  132c40:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  132c44:	e5c32000 	strb	r2, [r3]
    while (i--) {
  132c48:	e55b300e 	ldrb	r3, [fp, #-14]
  132c4c:	e2432001 	sub	r2, r3, #1
  132c50:	e54b200e 	strb	r2, [fp, #-14]
  132c54:	e3530000 	cmp	r3, #0
  132c58:	1affffea 	bne	132c08 <ip4addr_ntoa_r+0xd8>
    }
    if (len++ >= buflen) {
  132c5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132c60:	e2832001 	add	r2, r3, #1
  132c64:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  132c68:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  132c6c:	e1520003 	cmp	r2, r3
  132c70:	ca000001 	bgt	132c7c <ip4addr_ntoa_r+0x14c>
      return NULL;
  132c74:	e3a03000 	mov	r3, #0
  132c78:	ea000014 	b	132cd0 <ip4addr_ntoa_r+0x1a0>
    }
    *rp++ = '.';
  132c7c:	e51b3008 	ldr	r3, [fp, #-8]
  132c80:	e2832001 	add	r2, r3, #1
  132c84:	e50b2008 	str	r2, [fp, #-8]
  132c88:	e3a0202e 	mov	r2, #46	; 0x2e
  132c8c:	e5c32000 	strb	r2, [r3]
    ap++;
  132c90:	e51b300c 	ldr	r3, [fp, #-12]
  132c94:	e2833001 	add	r3, r3, #1
  132c98:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  132c9c:	e55b300d 	ldrb	r3, [fp, #-13]
  132ca0:	e2833001 	add	r3, r3, #1
  132ca4:	e54b300d 	strb	r3, [fp, #-13]
  132ca8:	e55b300d 	ldrb	r3, [fp, #-13]
  132cac:	e3530003 	cmp	r3, #3
  132cb0:	9affffb0 	bls	132b78 <ip4addr_ntoa_r+0x48>
  }
  *--rp = 0;
  132cb4:	e51b3008 	ldr	r3, [fp, #-8]
  132cb8:	e2433001 	sub	r3, r3, #1
  132cbc:	e50b3008 	str	r3, [fp, #-8]
  132cc0:	e51b3008 	ldr	r3, [fp, #-8]
  132cc4:	e3a02000 	mov	r2, #0
  132cc8:	e5c32000 	strb	r2, [r3]
  return buf;
  132ccc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  132cd0:	e1a00003 	mov	r0, r3
  132cd4:	e28bd000 	add	sp, fp, #0
  132cd8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  132cdc:	e12fff1e 	bx	lr

00132ce0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
  132ce0:	e92d4800 	push	{fp, lr}
  132ce4:	e28db004 	add	fp, sp, #4
  132ce8:	e24dd010 	sub	sp, sp, #16
  struct ip_reassdata *r, *prev = NULL;
  132cec:	e3a03000 	mov	r3, #0
  132cf0:	e50b300c 	str	r3, [fp, #-12]

  r = reassdatagrams;
  132cf4:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  132cf8:	e3403014 	movt	r3, #20
  132cfc:	e5933000 	ldr	r3, [r3]
  132d00:	e50b3008 	str	r3, [fp, #-8]
  while (r != NULL) {
  132d04:	ea000017 	b	132d68 <ip_reass_tmr+0x88>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
  132d08:	e51b3008 	ldr	r3, [fp, #-8]
  132d0c:	e5d3301f 	ldrb	r3, [r3, #31]
  132d10:	e3530000 	cmp	r3, #0
  132d14:	0a00000b 	beq	132d48 <ip_reass_tmr+0x68>
      r->timer--;
  132d18:	e51b3008 	ldr	r3, [fp, #-8]
  132d1c:	e5d3301f 	ldrb	r3, [r3, #31]
  132d20:	e2433001 	sub	r3, r3, #1
  132d24:	e6ef2073 	uxtb	r2, r3
  132d28:	e51b3008 	ldr	r3, [fp, #-8]
  132d2c:	e5c3201f 	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
  132d30:	e51b3008 	ldr	r3, [fp, #-8]
  132d34:	e50b300c 	str	r3, [fp, #-12]
      r = r->next;
  132d38:	e51b3008 	ldr	r3, [fp, #-8]
  132d3c:	e5933000 	ldr	r3, [r3]
  132d40:	e50b3008 	str	r3, [fp, #-8]
  132d44:	ea000007 	b	132d68 <ip_reass_tmr+0x88>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
  132d48:	e51b3008 	ldr	r3, [fp, #-8]
  132d4c:	e50b3010 	str	r3, [fp, #-16]
      /* get the next pointer before freeing */
      r = r->next;
  132d50:	e51b3008 	ldr	r3, [fp, #-8]
  132d54:	e5933000 	ldr	r3, [r3]
  132d58:	e50b3008 	str	r3, [fp, #-8]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
  132d5c:	e51b100c 	ldr	r1, [fp, #-12]
  132d60:	e51b0010 	ldr	r0, [fp, #-16]
  132d64:	eb000005 	bl	132d80 <ip_reass_free_complete_datagram>
  while (r != NULL) {
  132d68:	e51b3008 	ldr	r3, [fp, #-8]
  132d6c:	e3530000 	cmp	r3, #0
  132d70:	1affffe4 	bne	132d08 <ip_reass_tmr+0x28>
     }
   }
}
  132d74:	e320f000 	nop	{0}
  132d78:	e24bd004 	sub	sp, fp, #4
  132d7c:	e8bd8800 	pop	{fp, pc}

00132d80 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  132d80:	e92d4800 	push	{fp, lr}
  132d84:	e28db004 	add	fp, sp, #4
  132d88:	e24dd020 	sub	sp, sp, #32
  132d8c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  132d90:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  u16_t pbufs_freed = 0;
  132d94:	e3a03000 	mov	r3, #0
  132d98:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
  132d9c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  132da0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132da4:	e1520003 	cmp	r2, r3
  132da8:	1a000006 	bne	132dc8 <ip_reass_free_complete_datagram+0x48>
  132dac:	e309095c 	movw	r0, #39260	; 0x995c
  132db0:	e3400014 	movt	r0, #20
  132db4:	ebff40d6 	bl	103114 <rt_kprintf>
  132db8:	e3a010a7 	mov	r1, #167	; 0xa7
  132dbc:	e3090968 	movw	r0, #39272	; 0x9968
  132dc0:	e3400014 	movt	r0, #20
  132dc4:	ebff60c9 	bl	10b0f0 <sys_arch_assert>
  if (prev != NULL) {
  132dc8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132dcc:	e3530000 	cmp	r3, #0
  132dd0:	0a00000b 	beq	132e04 <ip_reass_free_complete_datagram+0x84>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  132dd4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132dd8:	e5933000 	ldr	r3, [r3]
  132ddc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  132de0:	e1520003 	cmp	r2, r3
  132de4:	0a000006 	beq	132e04 <ip_reass_free_complete_datagram+0x84>
  132de8:	e30909a0 	movw	r0, #39328	; 0x99a0
  132dec:	e3400014 	movt	r0, #20
  132df0:	ebff40c7 	bl	103114 <rt_kprintf>
  132df4:	e3a010a9 	mov	r1, #169	; 0xa9
  132df8:	e3090968 	movw	r0, #39272	; 0x9968
  132dfc:	e3400014 	movt	r0, #20
  132e00:	ebff60ba 	bl	10b0f0 <sys_arch_assert>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
  132e04:	e30e3a14 	movw	r3, #59924	; 0xea14
  132e08:	e3403056 	movt	r3, #86	; 0x56
  132e0c:	e5933150 	ldr	r3, [r3, #336]	; 0x150
  132e10:	e2832001 	add	r2, r3, #1
  132e14:	e30e3a14 	movw	r3, #59924	; 0xea14
  132e18:	e3403056 	movt	r3, #86	; 0x56
  132e1c:	e5832150 	str	r2, [r3, #336]	; 0x150
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  132e20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132e24:	e5933004 	ldr	r3, [r3, #4]
  132e28:	e5933004 	ldr	r3, [r3, #4]
  132e2c:	e50b3010 	str	r3, [fp, #-16]
  if (iprh->start == 0) {
  132e30:	e51b3010 	ldr	r3, [fp, #-16]
  132e34:	e1d330b4 	ldrh	r3, [r3, #4]
  132e38:	e6ff3073 	uxth	r3, r3
  132e3c:	e3530000 	cmp	r3, #0
  132e40:	1a000026 	bne	132ee0 <ip_reass_free_complete_datagram+0x160>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
  132e44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132e48:	e5933004 	ldr	r3, [r3, #4]
  132e4c:	e50b300c 	str	r3, [fp, #-12]
    ipr->p = iprh->next_pbuf;
  132e50:	e51b3010 	ldr	r3, [fp, #-16]
  132e54:	e5932000 	ldr	r2, [r3]
  132e58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132e5c:	e5832004 	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  132e60:	e51b300c 	ldr	r3, [fp, #-12]
  132e64:	e5930004 	ldr	r0, [r3, #4]
  132e68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132e6c:	e2833008 	add	r3, r3, #8
  132e70:	e3a02014 	mov	r2, #20
  132e74:	e1a01003 	mov	r1, r3
  132e78:	eb0037c7 	bl	140d9c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  132e7c:	e3a01001 	mov	r1, #1
  132e80:	e51b000c 	ldr	r0, [fp, #-12]
  132e84:	ebfff396 	bl	12fce4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
  132e88:	e51b000c 	ldr	r0, [fp, #-12]
  132e8c:	ebffa08f 	bl	11b0d0 <pbuf_clen>
  132e90:	e1a03000 	mov	r3, r0
  132e94:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  132e98:	e15b20b6 	ldrh	r2, [fp, #-6]
  132e9c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132ea0:	e0823003 	add	r3, r2, r3
  132ea4:	e3530801 	cmp	r3, #65536	; 0x10000
  132ea8:	ba000006 	blt	132ec8 <ip_reass_free_complete_datagram+0x148>
  132eac:	e30909b4 	movw	r0, #39348	; 0x99b4
  132eb0:	e3400014 	movt	r0, #20
  132eb4:	ebff4096 	bl	103114 <rt_kprintf>
  132eb8:	e3a010b8 	mov	r1, #184	; 0xb8
  132ebc:	e3090968 	movw	r0, #39272	; 0x9968
  132ec0:	e3400014 	movt	r0, #20
  132ec4:	ebff6089 	bl	10b0f0 <sys_arch_assert>
    pbufs_freed += clen;
  132ec8:	e15b20b6 	ldrh	r2, [fp, #-6]
  132ecc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132ed0:	e0823003 	add	r3, r2, r3
  132ed4:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(p);
  132ed8:	e51b000c 	ldr	r0, [fp, #-12]
  132edc:	ebff9ff6 	bl	11aebc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
  132ee0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132ee4:	e5933004 	ldr	r3, [r3, #4]
  132ee8:	e50b300c 	str	r3, [fp, #-12]
  while (p != NULL) {
  132eec:	ea00001d 	b	132f68 <ip_reass_free_complete_datagram+0x1e8>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
  132ef0:	e51b300c 	ldr	r3, [fp, #-12]
  132ef4:	e5933004 	ldr	r3, [r3, #4]
  132ef8:	e50b3010 	str	r3, [fp, #-16]
    pcur = p;
  132efc:	e51b300c 	ldr	r3, [fp, #-12]
  132f00:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  132f04:	e51b3010 	ldr	r3, [fp, #-16]
  132f08:	e5933000 	ldr	r3, [r3]
  132f0c:	e50b300c 	str	r3, [fp, #-12]
    clen = pbuf_clen(pcur);
  132f10:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132f14:	ebffa06d 	bl	11b0d0 <pbuf_clen>
  132f18:	e1a03000 	mov	r3, r0
  132f1c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  132f20:	e15b20b6 	ldrh	r2, [fp, #-6]
  132f24:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132f28:	e0823003 	add	r3, r2, r3
  132f2c:	e3530801 	cmp	r3, #65536	; 0x10000
  132f30:	ba000006 	blt	132f50 <ip_reass_free_complete_datagram+0x1d0>
  132f34:	e30909b4 	movw	r0, #39348	; 0x99b4
  132f38:	e3400014 	movt	r0, #20
  132f3c:	ebff4074 	bl	103114 <rt_kprintf>
  132f40:	e3a010c8 	mov	r1, #200	; 0xc8
  132f44:	e3090968 	movw	r0, #39272	; 0x9968
  132f48:	e3400014 	movt	r0, #20
  132f4c:	ebff6067 	bl	10b0f0 <sys_arch_assert>
    pbufs_freed += clen;
  132f50:	e15b20b6 	ldrh	r2, [fp, #-6]
  132f54:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132f58:	e0823003 	add	r3, r2, r3
  132f5c:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(pcur);
  132f60:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132f64:	ebff9fd4 	bl	11aebc <pbuf_free>
  while (p != NULL) {
  132f68:	e51b300c 	ldr	r3, [fp, #-12]
  132f6c:	e3530000 	cmp	r3, #0
  132f70:	1affffde 	bne	132ef0 <ip_reass_free_complete_datagram+0x170>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
  132f74:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  132f78:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132f7c:	eb0000b9 	bl	133268 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  132f80:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  132f84:	e3403014 	movt	r3, #20
  132f88:	e1d330b0 	ldrh	r3, [r3]
  132f8c:	e15b20b6 	ldrh	r2, [fp, #-6]
  132f90:	e1520003 	cmp	r2, r3
  132f94:	9a000006 	bls	132fb4 <ip_reass_free_complete_datagram+0x234>
  132f98:	e30909d4 	movw	r0, #39380	; 0x99d4
  132f9c:	e3400014 	movt	r0, #20
  132fa0:	ebff405b 	bl	103114 <rt_kprintf>
  132fa4:	e3a010ce 	mov	r1, #206	; 0xce
  132fa8:	e3090968 	movw	r0, #39272	; 0x9968
  132fac:	e3400014 	movt	r0, #20
  132fb0:	ebff604e 	bl	10b0f0 <sys_arch_assert>
  ip_reass_pbufcount -= pbufs_freed;
  132fb4:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  132fb8:	e3403014 	movt	r3, #20
  132fbc:	e1d320b0 	ldrh	r2, [r3]
  132fc0:	e15b30b6 	ldrh	r3, [fp, #-6]
  132fc4:	e0423003 	sub	r3, r2, r3
  132fc8:	e6ff2073 	uxth	r2, r3
  132fcc:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  132fd0:	e3403014 	movt	r3, #20
  132fd4:	e1c320b0 	strh	r2, [r3]

  return pbufs_freed;
  132fd8:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  132fdc:	e1a00003 	mov	r0, r3
  132fe0:	e24bd004 	sub	sp, fp, #4
  132fe4:	e8bd8800 	pop	{fp, pc}

00132fe8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
  132fe8:	e92d4800 	push	{fp, lr}
  132fec:	e28db004 	add	fp, sp, #4
  132ff0:	e24dd028 	sub	sp, sp, #40	; 0x28
  132ff4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132ff8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
  132ffc:	e3a03000 	mov	r3, #0
  133000:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
  133004:	e3a03000 	mov	r3, #0
  133008:	e50b300c 	str	r3, [fp, #-12]
    prev = NULL;
  13300c:	e3a03000 	mov	r3, #0
  133010:	e50b3010 	str	r3, [fp, #-16]
    oldest_prev = NULL;
  133014:	e3a03000 	mov	r3, #0
  133018:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    other_datagrams = 0;
  13301c:	e3a03000 	mov	r3, #0
  133020:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    r = reassdatagrams;
  133024:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  133028:	e3403014 	movt	r3, #20
  13302c:	e5933000 	ldr	r3, [r3]
  133030:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  133034:	ea000030 	b	1330fc <ip_reass_remove_oldest_datagram+0x114>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  133038:	e51b3008 	ldr	r3, [fp, #-8]
  13303c:	e5932014 	ldr	r2, [r3, #20]
  133040:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133044:	e593300c 	ldr	r3, [r3, #12]
  133048:	e1520003 	cmp	r2, r3
  13304c:	1a00000c 	bne	133084 <ip_reass_remove_oldest_datagram+0x9c>
  133050:	e51b3008 	ldr	r3, [fp, #-8]
  133054:	e5932018 	ldr	r2, [r3, #24]
  133058:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13305c:	e5933010 	ldr	r3, [r3, #16]
  133060:	e1520003 	cmp	r2, r3
  133064:	1a000006 	bne	133084 <ip_reass_remove_oldest_datagram+0x9c>
  133068:	e51b3008 	ldr	r3, [fp, #-8]
  13306c:	e1d320bc 	ldrh	r2, [r3, #12]
  133070:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133074:	e1d330b4 	ldrh	r3, [r3, #4]
  133078:	e6ff3073 	uxth	r3, r3
  13307c:	e1520003 	cmp	r2, r3
  133080:	0a000014 	beq	1330d8 <ip_reass_remove_oldest_datagram+0xf0>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
  133084:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133088:	e2833001 	add	r3, r3, #1
  13308c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (oldest == NULL) {
  133090:	e51b300c 	ldr	r3, [fp, #-12]
  133094:	e3530000 	cmp	r3, #0
  133098:	1a000004 	bne	1330b0 <ip_reass_remove_oldest_datagram+0xc8>
          oldest = r;
  13309c:	e51b3008 	ldr	r3, [fp, #-8]
  1330a0:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  1330a4:	e51b3010 	ldr	r3, [fp, #-16]
  1330a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1330ac:	ea000009 	b	1330d8 <ip_reass_remove_oldest_datagram+0xf0>
        } else if (r->timer <= oldest->timer) {
  1330b0:	e51b3008 	ldr	r3, [fp, #-8]
  1330b4:	e5d3201f 	ldrb	r2, [r3, #31]
  1330b8:	e51b300c 	ldr	r3, [fp, #-12]
  1330bc:	e5d3301f 	ldrb	r3, [r3, #31]
  1330c0:	e1520003 	cmp	r2, r3
  1330c4:	8a000003 	bhi	1330d8 <ip_reass_remove_oldest_datagram+0xf0>
          /* older than the previous oldest */
          oldest = r;
  1330c8:	e51b3008 	ldr	r3, [fp, #-8]
  1330cc:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  1330d0:	e51b3010 	ldr	r3, [fp, #-16]
  1330d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (r->next != NULL) {
  1330d8:	e51b3008 	ldr	r3, [fp, #-8]
  1330dc:	e5933000 	ldr	r3, [r3]
  1330e0:	e3530000 	cmp	r3, #0
  1330e4:	0a000001 	beq	1330f0 <ip_reass_remove_oldest_datagram+0x108>
        prev = r;
  1330e8:	e51b3008 	ldr	r3, [fp, #-8]
  1330ec:	e50b3010 	str	r3, [fp, #-16]
      }
      r = r->next;
  1330f0:	e51b3008 	ldr	r3, [fp, #-8]
  1330f4:	e5933000 	ldr	r3, [r3]
  1330f8:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  1330fc:	e51b3008 	ldr	r3, [fp, #-8]
  133100:	e3530000 	cmp	r3, #0
  133104:	1affffcb 	bne	133038 <ip_reass_remove_oldest_datagram+0x50>
    }
    if (oldest != NULL) {
  133108:	e51b300c 	ldr	r3, [fp, #-12]
  13310c:	e3530000 	cmp	r3, #0
  133110:	0a000007 	beq	133134 <ip_reass_remove_oldest_datagram+0x14c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
  133114:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  133118:	e51b000c 	ldr	r0, [fp, #-12]
  13311c:	ebffff17 	bl	132d80 <ip_reass_free_complete_datagram>
  133120:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
      pbufs_freed += pbufs_freed_current;
  133124:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  133128:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13312c:	e0823003 	add	r3, r2, r3
  133130:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  133134:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  133138:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13313c:	e1520003 	cmp	r2, r3
  133140:	aa000002 	bge	133150 <ip_reass_remove_oldest_datagram+0x168>
  133144:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133148:	e3530001 	cmp	r3, #1
  13314c:	caffffac 	bgt	133004 <ip_reass_remove_oldest_datagram+0x1c>
  return pbufs_freed;
  133150:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  133154:	e1a00003 	mov	r0, r3
  133158:	e24bd004 	sub	sp, fp, #4
  13315c:	e8bd8800 	pop	{fp, pc}

00133160 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
  133160:	e92d4800 	push	{fp, lr}
  133164:	e28db004 	add	fp, sp, #4
  133168:	e24dd010 	sub	sp, sp, #16
  13316c:	e50b0010 	str	r0, [fp, #-16]
  133170:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  133174:	e300211a 	movw	r2, #282	; 0x11a
  133178:	e3091968 	movw	r1, #39272	; 0x9968
  13317c:	e3401014 	movt	r1, #20
  133180:	e3a00005 	mov	r0, #5
  133184:	ebff97d6 	bl	1190e4 <memp_malloc_fn>
  133188:	e50b0008 	str	r0, [fp, #-8]
  if (ipr == NULL) {
  13318c:	e51b3008 	ldr	r3, [fp, #-8]
  133190:	e3530000 	cmp	r3, #0
  133194:	1a000019 	bne	133200 <ip_reass_enqueue_new_datagram+0xa0>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  133198:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13319c:	e51b0010 	ldr	r0, [fp, #-16]
  1331a0:	ebffff90 	bl	132fe8 <ip_reass_remove_oldest_datagram>
  1331a4:	e1a02000 	mov	r2, r0
  1331a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1331ac:	e1530002 	cmp	r3, r2
  1331b0:	ca000005 	bgt	1331cc <ip_reass_enqueue_new_datagram+0x6c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  1331b4:	e300211e 	movw	r2, #286	; 0x11e
  1331b8:	e3091968 	movw	r1, #39272	; 0x9968
  1331bc:	e3401014 	movt	r1, #20
  1331c0:	e3a00005 	mov	r0, #5
  1331c4:	ebff97c6 	bl	1190e4 <memp_malloc_fn>
  1331c8:	e50b0008 	str	r0, [fp, #-8]
    }
    if (ipr == NULL)
  1331cc:	e51b3008 	ldr	r3, [fp, #-8]
  1331d0:	e3530000 	cmp	r3, #0
  1331d4:	1a000009 	bne	133200 <ip_reass_enqueue_new_datagram+0xa0>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
  1331d8:	e30e3a14 	movw	r3, #59924	; 0xea14
  1331dc:	e3403056 	movt	r3, #86	; 0x56
  1331e0:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  1331e4:	e2833001 	add	r3, r3, #1
  1331e8:	e6ff2073 	uxth	r2, r3
  1331ec:	e30e3a14 	movw	r3, #59924	; 0xea14
  1331f0:	e3403056 	movt	r3, #86	; 0x56
  1331f4:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
  1331f8:	e3a03000 	mov	r3, #0
  1331fc:	ea000016 	b	13325c <ip_reass_enqueue_new_datagram+0xfc>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
  133200:	e3a02020 	mov	r2, #32
  133204:	e3a01000 	mov	r1, #0
  133208:	e51b0008 	ldr	r0, [fp, #-8]
  13320c:	eb00381a 	bl	14127c <memset>
  ipr->timer = IP_REASS_MAXAGE;
  133210:	e51b3008 	ldr	r3, [fp, #-8]
  133214:	e3a02003 	mov	r2, #3
  133218:	e5c3201f 	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
  13321c:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  133220:	e3403014 	movt	r3, #20
  133224:	e5932000 	ldr	r2, [r3]
  133228:	e51b3008 	ldr	r3, [fp, #-8]
  13322c:	e5832000 	str	r2, [r3]
  reassdatagrams = ipr;
  133230:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  133234:	e3403014 	movt	r3, #20
  133238:	e51b2008 	ldr	r2, [fp, #-8]
  13323c:	e5832000 	str	r2, [r3]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  133240:	e51b3008 	ldr	r3, [fp, #-8]
  133244:	e2833008 	add	r3, r3, #8
  133248:	e3a02014 	mov	r2, #20
  13324c:	e51b1010 	ldr	r1, [fp, #-16]
  133250:	e1a00003 	mov	r0, r3
  133254:	eb0036d0 	bl	140d9c <memcpy>
  return ipr;
  133258:	e51b3008 	ldr	r3, [fp, #-8]
}
  13325c:	e1a00003 	mov	r0, r3
  133260:	e24bd004 	sub	sp, fp, #4
  133264:	e8bd8800 	pop	{fp, pc}

00133268 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  133268:	e92d4800 	push	{fp, lr}
  13326c:	e28db004 	add	fp, sp, #4
  133270:	e24dd008 	sub	sp, sp, #8
  133274:	e50b0008 	str	r0, [fp, #-8]
  133278:	e50b100c 	str	r1, [fp, #-12]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  13327c:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  133280:	e3403014 	movt	r3, #20
  133284:	e5933000 	ldr	r3, [r3]
  133288:	e51b2008 	ldr	r2, [fp, #-8]
  13328c:	e1520003 	cmp	r2, r3
  133290:	1a000005 	bne	1332ac <ip_reass_dequeue_datagram+0x44>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  133294:	e51b3008 	ldr	r3, [fp, #-8]
  133298:	e5932000 	ldr	r2, [r3]
  13329c:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  1332a0:	e3403014 	movt	r3, #20
  1332a4:	e5832000 	str	r2, [r3]
  1332a8:	ea00000d 	b	1332e4 <ip_reass_dequeue_datagram+0x7c>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
  1332ac:	e51b300c 	ldr	r3, [fp, #-12]
  1332b0:	e3530000 	cmp	r3, #0
  1332b4:	1a000006 	bne	1332d4 <ip_reass_dequeue_datagram+0x6c>
  1332b8:	e30909f0 	movw	r0, #39408	; 0x99f0
  1332bc:	e3400014 	movt	r0, #20
  1332c0:	ebff3f93 	bl	103114 <rt_kprintf>
  1332c4:	e3001141 	movw	r1, #321	; 0x141
  1332c8:	e3090968 	movw	r0, #39272	; 0x9968
  1332cc:	e3400014 	movt	r0, #20
  1332d0:	ebff5f86 	bl	10b0f0 <sys_arch_assert>
    prev->next = ipr->next;
  1332d4:	e51b3008 	ldr	r3, [fp, #-8]
  1332d8:	e5932000 	ldr	r2, [r3]
  1332dc:	e51b300c 	ldr	r3, [fp, #-12]
  1332e0:	e5832000 	str	r2, [r3]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
  1332e4:	e51b1008 	ldr	r1, [fp, #-8]
  1332e8:	e3a00005 	mov	r0, #5
  1332ec:	ebff97e4 	bl	119284 <memp_free>
}
  1332f0:	e320f000 	nop	{0}
  1332f4:	e24bd004 	sub	sp, fp, #4
  1332f8:	e8bd8800 	pop	{fp, pc}

001332fc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
  1332fc:	e92d4800 	push	{fp, lr}
  133300:	e28db004 	add	fp, sp, #4
  133304:	e24dd028 	sub	sp, sp, #40	; 0x28
  133308:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  13330c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  133310:	e3a03000 	mov	r3, #0
  133314:	e50b300c 	str	r3, [fp, #-12]
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
  133318:	e3a03001 	mov	r3, #1
  13331c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
  133320:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  133324:	e5933004 	ldr	r3, [r3, #4]
  133328:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  13332c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133330:	e1d330b2 	ldrh	r3, [r3, #2]
  133334:	e6ff3073 	uxth	r3, r3
  133338:	e1a00003 	mov	r0, r3
  13333c:	ebff8ca7 	bl	1165e0 <lwip_htons>
  133340:	e1a03000 	mov	r3, r0
  133344:	e1a02003 	mov	r2, r3
  133348:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13334c:	e5d33000 	ldrb	r3, [r3]
  133350:	e6ff3073 	uxth	r3, r3
  133354:	e203300f 	and	r3, r3, #15
  133358:	e6ff3073 	uxth	r3, r3
  13335c:	e1a03103 	lsl	r3, r3, #2
  133360:	e6ff3073 	uxth	r3, r3
  133364:	e0423003 	sub	r3, r2, r3
  133368:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  13336c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133370:	e1d330b6 	ldrh	r3, [r3, #6]
  133374:	e6ff3073 	uxth	r3, r3
  133378:	e1a00003 	mov	r0, r3
  13337c:	ebff8c97 	bl	1165e0 <lwip_htons>
  133380:	e1a03000 	mov	r3, r0
  133384:	e7ec3053 	ubfx	r3, r3, #0, #13
  133388:	e6ff3073 	uxth	r3, r3
  13338c:	e1a03183 	lsl	r3, r3, #3
  133390:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  133394:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  133398:	e5933004 	ldr	r3, [r3, #4]
  13339c:	e50b3008 	str	r3, [fp, #-8]
  iprh->next_pbuf = NULL;
  1333a0:	e51b3008 	ldr	r3, [fp, #-8]
  1333a4:	e3a02000 	mov	r2, #0
  1333a8:	e5c32000 	strb	r2, [r3]
  1333ac:	e3a02000 	mov	r2, #0
  1333b0:	e5c32001 	strb	r2, [r3, #1]
  1333b4:	e3a02000 	mov	r2, #0
  1333b8:	e5c32002 	strb	r2, [r3, #2]
  1333bc:	e3a02000 	mov	r2, #0
  1333c0:	e5c32003 	strb	r2, [r3, #3]
  iprh->start = offset;
  1333c4:	e51b3008 	ldr	r3, [fp, #-8]
  1333c8:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  1333cc:	e1c320b4 	strh	r2, [r3, #4]
  iprh->end = offset + len;
  1333d0:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  1333d4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1333d8:	e0823003 	add	r3, r2, r3
  1333dc:	e6ff2073 	uxth	r2, r3
  1333e0:	e51b3008 	ldr	r3, [fp, #-8]
  1333e4:	e1c320b6 	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  1333e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1333ec:	e5933004 	ldr	r3, [r3, #4]
  1333f0:	e50b3010 	str	r3, [fp, #-16]
  1333f4:	ea00004a 	b	133524 <ip_reass_chain_frag_into_datagram_and_validate+0x228>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  1333f8:	e51b3010 	ldr	r3, [fp, #-16]
  1333fc:	e5933004 	ldr	r3, [r3, #4]
  133400:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (iprh->start < iprh_tmp->start) {
  133404:	e51b3008 	ldr	r3, [fp, #-8]
  133408:	e1d330b4 	ldrh	r3, [r3, #4]
  13340c:	e6ff2073 	uxth	r2, r3
  133410:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133414:	e1d330b4 	ldrh	r3, [r3, #4]
  133418:	e6ff3073 	uxth	r3, r3
  13341c:	e1520003 	cmp	r2, r3
  133420:	2a00001d 	bcs	13349c <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
  133424:	e51b3008 	ldr	r3, [fp, #-8]
  133428:	e51b2010 	ldr	r2, [fp, #-16]
  13342c:	e5832000 	str	r2, [r3]
      if (iprh_prev != NULL) {
  133430:	e51b300c 	ldr	r3, [fp, #-12]
  133434:	e3530000 	cmp	r3, #0
  133438:	0a000013 	beq	13348c <ip_reass_chain_frag_into_datagram_and_validate+0x190>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  13343c:	e51b3008 	ldr	r3, [fp, #-8]
  133440:	e1d330b4 	ldrh	r3, [r3, #4]
  133444:	e6ff2073 	uxth	r2, r3
  133448:	e51b300c 	ldr	r3, [fp, #-12]
  13344c:	e1d330b6 	ldrh	r3, [r3, #6]
  133450:	e6ff3073 	uxth	r3, r3
  133454:	e1520003 	cmp	r2, r3
  133458:	3a0000cf 	bcc	13379c <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
  13345c:	e51b3008 	ldr	r3, [fp, #-8]
  133460:	e1d330b6 	ldrh	r3, [r3, #6]
  133464:	e6ff2073 	uxth	r2, r3
  133468:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13346c:	e1d330b4 	ldrh	r3, [r3, #4]
  133470:	e6ff3073 	uxth	r3, r3
  133474:	e1520003 	cmp	r2, r3
  133478:	8a0000c7 	bhi	13379c <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
  13347c:	e51b300c 	ldr	r3, [fp, #-12]
  133480:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133484:	e5832000 	str	r2, [r3]
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
  133488:	ea000028 	b	133530 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
        ipr->p = new_p;
  13348c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133490:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133494:	e5832004 	str	r2, [r3, #4]
      break;
  133498:	ea000024 	b	133530 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
    } else if (iprh->start == iprh_tmp->start) {
  13349c:	e51b3008 	ldr	r3, [fp, #-8]
  1334a0:	e1d330b4 	ldrh	r3, [r3, #4]
  1334a4:	e6ff2073 	uxth	r2, r3
  1334a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1334ac:	e1d330b4 	ldrh	r3, [r3, #4]
  1334b0:	e6ff3073 	uxth	r3, r3
  1334b4:	e1520003 	cmp	r2, r3
  1334b8:	0a0000b9 	beq	1337a4 <ip_reass_chain_frag_into_datagram_and_validate+0x4a8>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
  1334bc:	e51b3008 	ldr	r3, [fp, #-8]
  1334c0:	e1d330b4 	ldrh	r3, [r3, #4]
  1334c4:	e6ff2073 	uxth	r2, r3
  1334c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1334cc:	e1d330b6 	ldrh	r3, [r3, #6]
  1334d0:	e6ff3073 	uxth	r3, r3
  1334d4:	e1520003 	cmp	r2, r3
  1334d8:	3a0000b3 	bcc	1337ac <ip_reass_chain_frag_into_datagram_and_validate+0x4b0>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
  1334dc:	e51b300c 	ldr	r3, [fp, #-12]
  1334e0:	e3530000 	cmp	r3, #0
  1334e4:	0a000009 	beq	133510 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
        if (iprh_prev->end != iprh_tmp->start) {
  1334e8:	e51b300c 	ldr	r3, [fp, #-12]
  1334ec:	e1d330b6 	ldrh	r3, [r3, #6]
  1334f0:	e6ff2073 	uxth	r2, r3
  1334f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1334f8:	e1d330b4 	ldrh	r3, [r3, #4]
  1334fc:	e6ff3073 	uxth	r3, r3
  133500:	e1520003 	cmp	r2, r3
  133504:	0a000001 	beq	133510 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
  133508:	e3a03000 	mov	r3, #0
  13350c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
    }
    q = iprh_tmp->next_pbuf;
  133510:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133514:	e5933000 	ldr	r3, [r3]
  133518:	e50b3010 	str	r3, [fp, #-16]
    iprh_prev = iprh_tmp;
  13351c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133520:	e50b300c 	str	r3, [fp, #-12]
  for (q = ipr->p; q != NULL;) {
  133524:	e51b3010 	ldr	r3, [fp, #-16]
  133528:	e3530000 	cmp	r3, #0
  13352c:	1affffb1 	bne	1333f8 <ip_reass_chain_frag_into_datagram_and_validate+0xfc>
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
  133530:	e51b3010 	ldr	r3, [fp, #-16]
  133534:	e3530000 	cmp	r3, #0
  133538:	1a00002d 	bne	1335f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
    if (iprh_prev != NULL) {
  13353c:	e51b300c 	ldr	r3, [fp, #-12]
  133540:	e3530000 	cmp	r3, #0
  133544:	0a00001c 	beq	1335bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
  133548:	e51b300c 	ldr	r3, [fp, #-12]
  13354c:	e1d330b6 	ldrh	r3, [r3, #6]
  133550:	e6ff2073 	uxth	r2, r3
  133554:	e51b3008 	ldr	r3, [fp, #-8]
  133558:	e1d330b4 	ldrh	r3, [r3, #4]
  13355c:	e6ff3073 	uxth	r3, r3
  133560:	e1520003 	cmp	r2, r3
  133564:	9a000006 	bls	133584 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
  133568:	e3090a0c 	movw	r0, #39436	; 0x9a0c
  13356c:	e3400014 	movt	r0, #20
  133570:	ebff3ee7 	bl	103114 <rt_kprintf>
  133574:	e300119b 	movw	r1, #411	; 0x19b
  133578:	e3090968 	movw	r0, #39272	; 0x9968
  13357c:	e3400014 	movt	r0, #20
  133580:	ebff5eda 	bl	10b0f0 <sys_arch_assert>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
  133584:	e51b300c 	ldr	r3, [fp, #-12]
  133588:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  13358c:	e5832000 	str	r2, [r3]
      if (iprh_prev->end != iprh->start) {
  133590:	e51b300c 	ldr	r3, [fp, #-12]
  133594:	e1d330b6 	ldrh	r3, [r3, #6]
  133598:	e6ff2073 	uxth	r2, r3
  13359c:	e51b3008 	ldr	r3, [fp, #-8]
  1335a0:	e1d330b4 	ldrh	r3, [r3, #4]
  1335a4:	e6ff3073 	uxth	r3, r3
  1335a8:	e1520003 	cmp	r2, r3
  1335ac:	0a000010 	beq	1335f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
        valid = 0;
  1335b0:	e3a03000 	mov	r3, #0
  1335b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1335b8:	ea00000d 	b	1335f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
  1335bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1335c0:	e5933004 	ldr	r3, [r3, #4]
  1335c4:	e3530000 	cmp	r3, #0
  1335c8:	0a000006 	beq	1335e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2ec>
  1335cc:	e3090a2c 	movw	r0, #39468	; 0x9a2c
  1335d0:	e3400014 	movt	r0, #20
  1335d4:	ebff3ece 	bl	103114 <rt_kprintf>
  1335d8:	e3a01f69 	mov	r1, #420	; 0x1a4
  1335dc:	e3090968 	movw	r0, #39272	; 0x9968
  1335e0:	e3400014 	movt	r0, #20
  1335e4:	ebff5ec1 	bl	10b0f0 <sys_arch_assert>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
  1335e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1335ec:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1335f0:	e5832004 	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  1335f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1335f8:	e5d3301e 	ldrb	r3, [r3, #30]
  1335fc:	e2033001 	and	r3, r3, #1
  133600:	e3530000 	cmp	r3, #0
  133604:	0a000062 	beq	133794 <ip_reass_chain_frag_into_datagram_and_validate+0x498>
    /* and had no holes so far */
    if (valid) {
  133608:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13360c:	e3530000 	cmp	r3, #0
  133610:	0a00005d 	beq	13378c <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
  133614:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133618:	e5933004 	ldr	r3, [r3, #4]
  13361c:	e3530000 	cmp	r3, #0
  133620:	0a000006 	beq	133640 <ip_reass_chain_frag_into_datagram_and_validate+0x344>
  133624:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133628:	e5933004 	ldr	r3, [r3, #4]
  13362c:	e5933004 	ldr	r3, [r3, #4]
  133630:	e1d330b4 	ldrh	r3, [r3, #4]
  133634:	e6ff3073 	uxth	r3, r3
  133638:	e3530000 	cmp	r3, #0
  13363c:	0a000002 	beq	13364c <ip_reass_chain_frag_into_datagram_and_validate+0x350>
        valid = 0;
  133640:	e3a03000 	mov	r3, #0
  133644:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  133648:	ea00004f 	b	13378c <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
  13364c:	e51b3008 	ldr	r3, [fp, #-8]
  133650:	e50b300c 	str	r3, [fp, #-12]
        q = iprh->next_pbuf;
  133654:	e51b3008 	ldr	r3, [fp, #-8]
  133658:	e5933000 	ldr	r3, [r3]
  13365c:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  133660:	ea000012 	b	1336b0 <ip_reass_chain_frag_into_datagram_and_validate+0x3b4>
          iprh = (struct ip_reass_helper*)q->payload;
  133664:	e51b3010 	ldr	r3, [fp, #-16]
  133668:	e5933004 	ldr	r3, [r3, #4]
  13366c:	e50b3008 	str	r3, [fp, #-8]
          if (iprh_prev->end != iprh->start) {
  133670:	e51b300c 	ldr	r3, [fp, #-12]
  133674:	e1d330b6 	ldrh	r3, [r3, #6]
  133678:	e6ff2073 	uxth	r2, r3
  13367c:	e51b3008 	ldr	r3, [fp, #-8]
  133680:	e1d330b4 	ldrh	r3, [r3, #4]
  133684:	e6ff3073 	uxth	r3, r3
  133688:	e1520003 	cmp	r2, r3
  13368c:	0a000002 	beq	13369c <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
            valid = 0;
  133690:	e3a03000 	mov	r3, #0
  133694:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            break;
  133698:	ea000007 	b	1336bc <ip_reass_chain_frag_into_datagram_and_validate+0x3c0>
          }
          iprh_prev = iprh;
  13369c:	e51b3008 	ldr	r3, [fp, #-8]
  1336a0:	e50b300c 	str	r3, [fp, #-12]
          q = iprh->next_pbuf;
  1336a4:	e51b3008 	ldr	r3, [fp, #-8]
  1336a8:	e5933000 	ldr	r3, [r3]
  1336ac:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  1336b0:	e51b3010 	ldr	r3, [fp, #-16]
  1336b4:	e3530000 	cmp	r3, #0
  1336b8:	1affffe9 	bne	133664 <ip_reass_chain_frag_into_datagram_and_validate+0x368>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
  1336bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1336c0:	e3530000 	cmp	r3, #0
  1336c4:	0a000030 	beq	13378c <ip_reass_chain_frag_into_datagram_and_validate+0x490>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
  1336c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1336cc:	e5933004 	ldr	r3, [r3, #4]
  1336d0:	e3530000 	cmp	r3, #0
  1336d4:	1a000006 	bne	1336f4 <ip_reass_chain_frag_into_datagram_and_validate+0x3f8>
  1336d8:	e3090a64 	movw	r0, #39524	; 0x9a64
  1336dc:	e3400014 	movt	r0, #20
  1336e0:	ebff3e8b 	bl	103114 <rt_kprintf>
  1336e4:	e3a01f71 	mov	r1, #452	; 0x1c4
  1336e8:	e3090968 	movw	r0, #39272	; 0x9968
  1336ec:	e3400014 	movt	r0, #20
  1336f0:	ebff5e7e 	bl	10b0f0 <sys_arch_assert>
          LWIP_ASSERT("sanity check",
  1336f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1336f8:	e5933004 	ldr	r3, [r3, #4]
  1336fc:	e5933004 	ldr	r3, [r3, #4]
  133700:	e51b2008 	ldr	r2, [fp, #-8]
  133704:	e1520003 	cmp	r2, r3
  133708:	1a000006 	bne	133728 <ip_reass_chain_frag_into_datagram_and_validate+0x42c>
  13370c:	e3090a64 	movw	r0, #39524	; 0x9a64
  133710:	e3400014 	movt	r0, #20
  133714:	ebff3e7e 	bl	103114 <rt_kprintf>
  133718:	e30011c6 	movw	r1, #454	; 0x1c6
  13371c:	e3090968 	movw	r0, #39272	; 0x9968
  133720:	e3400014 	movt	r0, #20
  133724:	ebff5e71 	bl	10b0f0 <sys_arch_assert>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
  133728:	e51b3008 	ldr	r3, [fp, #-8]
  13372c:	e5933000 	ldr	r3, [r3]
  133730:	e3530000 	cmp	r3, #0
  133734:	0a000006 	beq	133754 <ip_reass_chain_frag_into_datagram_and_validate+0x458>
  133738:	e3090a74 	movw	r0, #39540	; 0x9a74
  13373c:	e3400014 	movt	r0, #20
  133740:	ebff3e73 	bl	103114 <rt_kprintf>
  133744:	e3a01f72 	mov	r1, #456	; 0x1c8
  133748:	e3090968 	movw	r0, #39272	; 0x9968
  13374c:	e3400014 	movt	r0, #20
  133750:	ebff5e66 	bl	10b0f0 <sys_arch_assert>
            iprh->next_pbuf == NULL);
          LWIP_ASSERT("validate_datagram:datagram end!=datagram len",
  133754:	e51b3008 	ldr	r3, [fp, #-8]
  133758:	e1d330b6 	ldrh	r3, [r3, #6]
  13375c:	e6ff2073 	uxth	r2, r3
  133760:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133764:	e1d331bc 	ldrh	r3, [r3, #28]
  133768:	e1520003 	cmp	r2, r3
  13376c:	0a000006 	beq	13378c <ip_reass_chain_frag_into_datagram_and_validate+0x490>
  133770:	e3090a98 	movw	r0, #39576	; 0x9a98
  133774:	e3400014 	movt	r0, #20
  133778:	ebff3e65 	bl	103114 <rt_kprintf>
  13377c:	e30011ca 	movw	r1, #458	; 0x1ca
  133780:	e3090968 	movw	r0, #39272	; 0x9968
  133784:	e3400014 	movt	r0, #20
  133788:	ebff5e58 	bl	10b0f0 <sys_arch_assert>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
  13378c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133790:	ea000015 	b	1337ec <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
  133794:	e3a03000 	mov	r3, #0
  133798:	ea000013 	b	1337ec <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  13379c:	e320f000 	nop	{0}
  1337a0:	ea000002 	b	1337b0 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  1337a4:	e320f000 	nop	{0}
  1337a8:	ea000000 	b	1337b0 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  1337ac:	e320f000 	nop	{0}
  ip_reass_pbufcount -= pbuf_clen(new_p);
  1337b0:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1337b4:	ebff9e45 	bl	11b0d0 <pbuf_clen>
  1337b8:	e1a03000 	mov	r3, r0
  1337bc:	e1a02003 	mov	r2, r3
  1337c0:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  1337c4:	e3403014 	movt	r3, #20
  1337c8:	e1d330b0 	ldrh	r3, [r3]
  1337cc:	e0433002 	sub	r3, r3, r2
  1337d0:	e6ff2073 	uxth	r2, r3
  1337d4:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  1337d8:	e3403014 	movt	r3, #20
  1337dc:	e1c320b0 	strh	r2, [r3]
  pbuf_free(new_p);
  1337e0:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1337e4:	ebff9db4 	bl	11aebc <pbuf_free>
  return 0;
  1337e8:	e3a03000 	mov	r3, #0
#endif /* IP_REASS_CHECK_OVERLAP */
}
  1337ec:	e1a00003 	mov	r0, r3
  1337f0:	e24bd004 	sub	sp, fp, #4
  1337f4:	e8bd8800 	pop	{fp, pc}

001337f8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
  1337f8:	e92d4800 	push	{fp, lr}
  1337fc:	e28db004 	add	fp, sp, #4
  133800:	e24dd028 	sub	sp, sp, #40	; 0x28
  133804:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;

  IPFRAG_STATS_INC(ip_frag.recv);
  133808:	e30e3a14 	movw	r3, #59924	; 0xea14
  13380c:	e3403056 	movt	r3, #86	; 0x56
  133810:	e1d333b2 	ldrh	r3, [r3, #50]	; 0x32
  133814:	e2833001 	add	r3, r3, #1
  133818:	e6ff2073 	uxth	r2, r3
  13381c:	e30e3a14 	movw	r3, #59924	; 0xea14
  133820:	e3403056 	movt	r3, #86	; 0x56
  133824:	e1c323b2 	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);
  133828:	e30e3a14 	movw	r3, #59924	; 0xea14
  13382c:	e3403056 	movt	r3, #86	; 0x56
  133830:	e5933160 	ldr	r3, [r3, #352]	; 0x160
  133834:	e2832001 	add	r2, r3, #1
  133838:	e30e3a14 	movw	r3, #59924	; 0xea14
  13383c:	e3403056 	movt	r3, #86	; 0x56
  133840:	e5832160 	str	r2, [r3, #352]	; 0x160

  fraghdr = (struct ip_hdr*)p->payload;
  133844:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133848:	e5933004 	ldr	r3, [r3, #4]
  13384c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  133850:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133854:	e5d33000 	ldrb	r3, [r3]
  133858:	e203300f 	and	r3, r3, #15
  13385c:	e1a03103 	lsl	r3, r3, #2
  133860:	e3530014 	cmp	r3, #20
  133864:	0a000008 	beq	13388c <ip4_reass+0x94>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
  133868:	e30e3a14 	movw	r3, #59924	; 0xea14
  13386c:	e3403056 	movt	r3, #86	; 0x56
  133870:	e1d334b4 	ldrh	r3, [r3, #68]	; 0x44
  133874:	e2833001 	add	r3, r3, #1
  133878:	e6ff2073 	uxth	r2, r3
  13387c:	e30e3a14 	movw	r3, #59924	; 0xea14
  133880:	e3403056 	movt	r3, #86	; 0x56
  133884:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    goto nullreturn;
  133888:	ea00011e 	b	133d08 <ip4_reass+0x510>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  13388c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133890:	e1d330b6 	ldrh	r3, [r3, #6]
  133894:	e6ff3073 	uxth	r3, r3
  133898:	e1a00003 	mov	r0, r3
  13389c:	ebff8b4f 	bl	1165e0 <lwip_htons>
  1338a0:	e1a03000 	mov	r3, r0
  1338a4:	e7ec3053 	ubfx	r3, r3, #0, #13
  1338a8:	e6ff3073 	uxth	r3, r3
  1338ac:	e1a03183 	lsl	r3, r3, #3
  1338b0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  1338b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1338b8:	e1d330b2 	ldrh	r3, [r3, #2]
  1338bc:	e6ff3073 	uxth	r3, r3
  1338c0:	e1a00003 	mov	r0, r3
  1338c4:	ebff8b45 	bl	1165e0 <lwip_htons>
  1338c8:	e1a03000 	mov	r3, r0
  1338cc:	e1a02003 	mov	r2, r3
  1338d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1338d4:	e5d33000 	ldrb	r3, [r3]
  1338d8:	e6ff3073 	uxth	r3, r3
  1338dc:	e203300f 	and	r3, r3, #15
  1338e0:	e6ff3073 	uxth	r3, r3
  1338e4:	e1a03103 	lsl	r3, r3, #2
  1338e8:	e6ff3073 	uxth	r3, r3
  1338ec:	e0423003 	sub	r3, r2, r3
  1338f0:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  1338f4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1338f8:	ebff9df4 	bl	11b0d0 <pbuf_clen>
  1338fc:	e1a03000 	mov	r3, r0
  133900:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  133904:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  133908:	e3403014 	movt	r3, #20
  13390c:	e1d330b0 	ldrh	r3, [r3]
  133910:	e1a02003 	mov	r2, r3
  133914:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133918:	e0823003 	add	r3, r2, r3
  13391c:	e353000a 	cmp	r3, #10
  133920:	da000017 	ble	133984 <ip4_reass+0x18c>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  133924:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133928:	e1a01003 	mov	r1, r3
  13392c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133930:	ebfffdac 	bl	132fe8 <ip_reass_remove_oldest_datagram>
  133934:	e1a03000 	mov	r3, r0
  133938:	e3530000 	cmp	r3, #0
  13393c:	0a000007 	beq	133960 <ip4_reass+0x168>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  133940:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  133944:	e3403014 	movt	r3, #20
  133948:	e1d330b0 	ldrh	r3, [r3]
  13394c:	e1a02003 	mov	r2, r3
  133950:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133954:	e0823003 	add	r3, r2, r3
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  133958:	e353000a 	cmp	r3, #10
  13395c:	da000008 	ble	133984 <ip4_reass+0x18c>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
  133960:	e30e3a14 	movw	r3, #59924	; 0xea14
  133964:	e3403056 	movt	r3, #86	; 0x56
  133968:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  13396c:	e2833001 	add	r3, r3, #1
  133970:	e6ff2073 	uxth	r2, r3
  133974:	e30e3a14 	movw	r3, #59924	; 0xea14
  133978:	e3403056 	movt	r3, #86	; 0x56
  13397c:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
  133980:	ea0000e0 	b	133d08 <ip4_reass+0x510>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  133984:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  133988:	e3403014 	movt	r3, #20
  13398c:	e5933000 	ldr	r3, [r3]
  133990:	e50b300c 	str	r3, [fp, #-12]
  133994:	ea00001e 	b	133a14 <ip4_reass+0x21c>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  133998:	e51b300c 	ldr	r3, [fp, #-12]
  13399c:	e5932014 	ldr	r2, [r3, #20]
  1339a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1339a4:	e593300c 	ldr	r3, [r3, #12]
  1339a8:	e1520003 	cmp	r2, r3
  1339ac:	1a000015 	bne	133a08 <ip4_reass+0x210>
  1339b0:	e51b300c 	ldr	r3, [fp, #-12]
  1339b4:	e5932018 	ldr	r2, [r3, #24]
  1339b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1339bc:	e5933010 	ldr	r3, [r3, #16]
  1339c0:	e1520003 	cmp	r2, r3
  1339c4:	1a00000f 	bne	133a08 <ip4_reass+0x210>
  1339c8:	e51b300c 	ldr	r3, [fp, #-12]
  1339cc:	e1d320bc 	ldrh	r2, [r3, #12]
  1339d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1339d4:	e1d330b4 	ldrh	r3, [r3, #4]
  1339d8:	e6ff3073 	uxth	r3, r3
  1339dc:	e1520003 	cmp	r2, r3
  1339e0:	1a000008 	bne	133a08 <ip4_reass+0x210>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
  1339e4:	e30e3a14 	movw	r3, #59924	; 0xea14
  1339e8:	e3403056 	movt	r3, #86	; 0x56
  1339ec:	e1d334b6 	ldrh	r3, [r3, #70]	; 0x46
  1339f0:	e2833001 	add	r3, r3, #1
  1339f4:	e6ff2073 	uxth	r2, r3
  1339f8:	e30e3a14 	movw	r3, #59924	; 0xea14
  1339fc:	e3403056 	movt	r3, #86	; 0x56
  133a00:	e1c324b6 	strh	r2, [r3, #70]	; 0x46
      break;
  133a04:	ea000005 	b	133a20 <ip4_reass+0x228>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  133a08:	e51b300c 	ldr	r3, [fp, #-12]
  133a0c:	e5933000 	ldr	r3, [r3]
  133a10:	e50b300c 	str	r3, [fp, #-12]
  133a14:	e51b300c 	ldr	r3, [fp, #-12]
  133a18:	e3530000 	cmp	r3, #0
  133a1c:	1affffdd 	bne	133998 <ip4_reass+0x1a0>
    }
  }

  if (ipr == NULL) {
  133a20:	e51b300c 	ldr	r3, [fp, #-12]
  133a24:	e3530000 	cmp	r3, #0
  133a28:	1a000008 	bne	133a50 <ip4_reass+0x258>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
  133a2c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133a30:	e1a01003 	mov	r1, r3
  133a34:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133a38:	ebfffdc8 	bl	133160 <ip_reass_enqueue_new_datagram>
  133a3c:	e50b000c 	str	r0, [fp, #-12]
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
  133a40:	e51b300c 	ldr	r3, [fp, #-12]
  133a44:	e3530000 	cmp	r3, #0
  133a48:	1a000017 	bne	133aac <ip4_reass+0x2b4>
      goto nullreturn;
  133a4c:	ea0000ad 	b	133d08 <ip4_reass+0x510>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  133a50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133a54:	e1d330b6 	ldrh	r3, [r3, #6]
  133a58:	e6ff3073 	uxth	r3, r3
  133a5c:	e1a00003 	mov	r0, r3
  133a60:	ebff8ade 	bl	1165e0 <lwip_htons>
  133a64:	e1a03000 	mov	r3, r0
  133a68:	e7ec3053 	ubfx	r3, r3, #0, #13
  133a6c:	e3530000 	cmp	r3, #0
  133a70:	1a00000d 	bne	133aac <ip4_reass+0x2b4>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  133a74:	e51b300c 	ldr	r3, [fp, #-12]
  133a78:	e1d330be 	ldrh	r3, [r3, #14]
  133a7c:	e1a00003 	mov	r0, r3
  133a80:	ebff8ad6 	bl	1165e0 <lwip_htons>
  133a84:	e1a03000 	mov	r3, r0
  133a88:	e7ec3053 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  133a8c:	e3530000 	cmp	r3, #0
  133a90:	0a000005 	beq	133aac <ip4_reass+0x2b4>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  133a94:	e51b300c 	ldr	r3, [fp, #-12]
  133a98:	e2833008 	add	r3, r3, #8
  133a9c:	e3a02014 	mov	r2, #20
  133aa0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  133aa4:	e1a00003 	mov	r0, r3
  133aa8:	eb0034bb 	bl	140d9c <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
  133aac:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  133ab0:	e3403014 	movt	r3, #20
  133ab4:	e1d320b0 	ldrh	r2, [r3]
  133ab8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133abc:	e0823003 	add	r3, r2, r3
  133ac0:	e6ff2073 	uxth	r2, r3
  133ac4:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  133ac8:	e3403014 	movt	r3, #20
  133acc:	e1c320b0 	strh	r2, [r3]

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
  133ad0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133ad4:	e1d330b6 	ldrh	r3, [r3, #6]
  133ad8:	e6ff3073 	uxth	r3, r3
  133adc:	e2033020 	and	r3, r3, #32
  133ae0:	e3530000 	cmp	r3, #0
  133ae4:	1a00000b 	bne	133b18 <ip4_reass+0x320>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  133ae8:	e51b300c 	ldr	r3, [fp, #-12]
  133aec:	e5d3301e 	ldrb	r3, [r3, #30]
  133af0:	e3833001 	orr	r3, r3, #1
  133af4:	e6ef2073 	uxtb	r2, r3
  133af8:	e51b300c 	ldr	r3, [fp, #-12]
  133afc:	e5c3201e 	strb	r2, [r3, #30]
    ipr->datagram_len = offset + len;
  133b00:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  133b04:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  133b08:	e0823003 	add	r3, r2, r3
  133b0c:	e6ff2073 	uxth	r2, r3
  133b10:	e51b300c 	ldr	r3, [fp, #-12]
  133b14:	e1c321bc 	strh	r2, [r3, #28]
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
  133b18:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  133b1c:	e51b000c 	ldr	r0, [fp, #-12]
  133b20:	ebfffdf5 	bl	1332fc <ip_reass_chain_frag_into_datagram_and_validate>
  133b24:	e1a03000 	mov	r3, r0
  133b28:	e3530000 	cmp	r3, #0
  133b2c:	0a000073 	beq	133d00 <ip4_reass+0x508>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
  133b30:	e51b300c 	ldr	r3, [fp, #-12]
  133b34:	e1d331bc 	ldrh	r3, [r3, #28]
  133b38:	e2833014 	add	r3, r3, #20
  133b3c:	e6ff2073 	uxth	r2, r3
  133b40:	e51b300c 	ldr	r3, [fp, #-12]
  133b44:	e1c321bc 	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  133b48:	e51b300c 	ldr	r3, [fp, #-12]
  133b4c:	e5933004 	ldr	r3, [r3, #4]
  133b50:	e5933004 	ldr	r3, [r3, #4]
  133b54:	e5933000 	ldr	r3, [r3]
  133b58:	e50b3008 	str	r3, [fp, #-8]

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
  133b5c:	e51b300c 	ldr	r3, [fp, #-12]
  133b60:	e5933004 	ldr	r3, [r3, #4]
  133b64:	e5933004 	ldr	r3, [r3, #4]
  133b68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  133b6c:	e51b300c 	ldr	r3, [fp, #-12]
  133b70:	e2833008 	add	r3, r3, #8
  133b74:	e3a02014 	mov	r2, #20
  133b78:	e1a01003 	mov	r1, r3
  133b7c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133b80:	eb003485 	bl	140d9c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
  133b84:	e51b300c 	ldr	r3, [fp, #-12]
  133b88:	e1d331bc 	ldrh	r3, [r3, #28]
  133b8c:	e1a00003 	mov	r0, r3
  133b90:	ebff8a92 	bl	1165e0 <lwip_htons>
  133b94:	e1a03000 	mov	r3, r0
  133b98:	e1a02003 	mov	r2, r3
  133b9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133ba0:	e1c320b2 	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  133ba4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133ba8:	e3a02000 	mov	r2, #0
  133bac:	e5c32006 	strb	r2, [r3, #6]
  133bb0:	e3a02000 	mov	r2, #0
  133bb4:	e5c32007 	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  133bb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133bbc:	e3a02000 	mov	r2, #0
  133bc0:	e5c3200a 	strb	r2, [r3, #10]
  133bc4:	e3a02000 	mov	r2, #0
  133bc8:	e5c3200b 	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  133bcc:	e3a01014 	mov	r1, #20
  133bd0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133bd4:	ebff9390 	bl	118a1c <inet_chksum>
  133bd8:	e1a03000 	mov	r3, r0
  133bdc:	e1a02003 	mov	r2, r3
  133be0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133be4:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
  133be8:	e51b300c 	ldr	r3, [fp, #-12]
  133bec:	e5933004 	ldr	r3, [r3, #4]
  133bf0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
  133bf4:	ea00000b 	b	133c28 <ip4_reass+0x430>
      iprh = (struct ip_reass_helper*)r->payload;
  133bf8:	e51b3008 	ldr	r3, [fp, #-8]
  133bfc:	e5933004 	ldr	r3, [r3, #4]
  133c00:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
  133c04:	e3e01013 	mvn	r1, #19
  133c08:	e51b0008 	ldr	r0, [fp, #-8]
  133c0c:	ebff9c8c 	bl	11ae44 <pbuf_header>
      pbuf_cat(p, r);
  133c10:	e51b1008 	ldr	r1, [fp, #-8]
  133c14:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133c18:	ebff9d5e 	bl	11b198 <pbuf_cat>
      r = iprh->next_pbuf;
  133c1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133c20:	e5933000 	ldr	r3, [r3]
  133c24:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  133c28:	e51b3008 	ldr	r3, [fp, #-8]
  133c2c:	e3530000 	cmp	r3, #0
  133c30:	1afffff0 	bne	133bf8 <ip4_reass+0x400>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
  133c34:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  133c38:	e3403014 	movt	r3, #20
  133c3c:	e5933000 	ldr	r3, [r3]
  133c40:	e51b200c 	ldr	r2, [fp, #-12]
  133c44:	e1520003 	cmp	r2, r3
  133c48:	1a000002 	bne	133c58 <ip4_reass+0x460>
      ipr_prev = NULL;
  133c4c:	e3a03000 	mov	r3, #0
  133c50:	e50b3010 	str	r3, [fp, #-16]
  133c54:	ea000011 	b	133ca0 <ip4_reass+0x4a8>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  133c58:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  133c5c:	e3403014 	movt	r3, #20
  133c60:	e5933000 	ldr	r3, [r3]
  133c64:	e50b3010 	str	r3, [fp, #-16]
  133c68:	ea000007 	b	133c8c <ip4_reass+0x494>
        if (ipr_prev->next == ipr) {
  133c6c:	e51b3010 	ldr	r3, [fp, #-16]
  133c70:	e5933000 	ldr	r3, [r3]
  133c74:	e51b200c 	ldr	r2, [fp, #-12]
  133c78:	e1520003 	cmp	r2, r3
  133c7c:	0a000006 	beq	133c9c <ip4_reass+0x4a4>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  133c80:	e51b3010 	ldr	r3, [fp, #-16]
  133c84:	e5933000 	ldr	r3, [r3]
  133c88:	e50b3010 	str	r3, [fp, #-16]
  133c8c:	e51b3010 	ldr	r3, [fp, #-16]
  133c90:	e3530000 	cmp	r3, #0
  133c94:	1afffff4 	bne	133c6c <ip4_reass+0x474>
  133c98:	ea000000 	b	133ca0 <ip4_reass+0x4a8>
          break;
  133c9c:	e320f000 	nop	{0}
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
  133ca0:	e51b1010 	ldr	r1, [fp, #-16]
  133ca4:	e51b000c 	ldr	r0, [fp, #-12]
  133ca8:	ebfffd6e 	bl	133268 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
  133cac:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133cb0:	ebff9d06 	bl	11b0d0 <pbuf_clen>
  133cb4:	e1a03000 	mov	r3, r0
  133cb8:	e1a02003 	mov	r2, r3
  133cbc:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  133cc0:	e3403014 	movt	r3, #20
  133cc4:	e1d330b0 	ldrh	r3, [r3]
  133cc8:	e0433002 	sub	r3, r3, r2
  133ccc:	e6ff2073 	uxth	r2, r3
  133cd0:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  133cd4:	e3403014 	movt	r3, #20
  133cd8:	e1c320b0 	strh	r2, [r3]

    MIB2_STATS_INC(mib2.ipreasmoks);
  133cdc:	e30e3a14 	movw	r3, #59924	; 0xea14
  133ce0:	e3403056 	movt	r3, #86	; 0x56
  133ce4:	e593314c 	ldr	r3, [r3, #332]	; 0x14c
  133ce8:	e2832001 	add	r2, r3, #1
  133cec:	e30e3a14 	movw	r3, #59924	; 0xea14
  133cf0:	e3403056 	movt	r3, #86	; 0x56
  133cf4:	e583214c 	str	r2, [r3, #332]	; 0x14c

    /* Return the pbuf chain */
    return p;
  133cf8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133cfc:	ea00000c 	b	133d34 <ip4_reass+0x53c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
  133d00:	e3a03000 	mov	r3, #0
  133d04:	ea00000a 	b	133d34 <ip4_reass+0x53c>

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  133d08:	e30e3a14 	movw	r3, #59924	; 0xea14
  133d0c:	e3403056 	movt	r3, #86	; 0x56
  133d10:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  133d14:	e2833001 	add	r3, r3, #1
  133d18:	e6ff2073 	uxth	r2, r3
  133d1c:	e30e3a14 	movw	r3, #59924	; 0xea14
  133d20:	e3403056 	movt	r3, #86	; 0x56
  133d24:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
  133d28:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133d2c:	ebff9c62 	bl	11aebc <pbuf_free>
  return NULL;
  133d30:	e3a03000 	mov	r3, #0
}
  133d34:	e1a00003 	mov	r0, r3
  133d38:	e24bd004 	sub	sp, fp, #4
  133d3c:	e8bd8800 	pop	{fp, pc}

00133d40 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
  133d40:	e92d4800 	push	{fp, lr}
  133d44:	e28db004 	add	fp, sp, #4
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
  133d48:	e3002286 	movw	r2, #646	; 0x286
  133d4c:	e3091968 	movw	r1, #39272	; 0x9968
  133d50:	e3401014 	movt	r1, #20
  133d54:	e3a00006 	mov	r0, #6
  133d58:	ebff94e1 	bl	1190e4 <memp_malloc_fn>
  133d5c:	e1a03000 	mov	r3, r0
}
  133d60:	e1a00003 	mov	r0, r3
  133d64:	e8bd8800 	pop	{fp, pc}

00133d68 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
  133d68:	e92d4800 	push	{fp, lr}
  133d6c:	e28db004 	add	fp, sp, #4
  133d70:	e24dd008 	sub	sp, sp, #8
  133d74:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("p != NULL", p != NULL);
  133d78:	e51b3008 	ldr	r3, [fp, #-8]
  133d7c:	e3530000 	cmp	r3, #0
  133d80:	1a000006 	bne	133da0 <ip_frag_free_pbuf_custom_ref+0x38>
  133d84:	e3090ac8 	movw	r0, #39624	; 0x9ac8
  133d88:	e3400014 	movt	r0, #20
  133d8c:	ebff3ce0 	bl	103114 <rt_kprintf>
  133d90:	e300128d 	movw	r1, #653	; 0x28d
  133d94:	e3090968 	movw	r0, #39272	; 0x9968
  133d98:	e3400014 	movt	r0, #20
  133d9c:	ebff5cd3 	bl	10b0f0 <sys_arch_assert>
  memp_free(MEMP_FRAG_PBUF, p);
  133da0:	e51b1008 	ldr	r1, [fp, #-8]
  133da4:	e3a00006 	mov	r0, #6
  133da8:	ebff9535 	bl	119284 <memp_free>
}
  133dac:	e320f000 	nop	{0}
  133db0:	e24bd004 	sub	sp, fp, #4
  133db4:	e8bd8800 	pop	{fp, pc}

00133db8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
  133db8:	e92d4800 	push	{fp, lr}
  133dbc:	e28db004 	add	fp, sp, #4
  133dc0:	e24dd010 	sub	sp, sp, #16
  133dc4:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  133dc8:	e51b3010 	ldr	r3, [fp, #-16]
  133dcc:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  133dd0:	e51b3008 	ldr	r3, [fp, #-8]
  133dd4:	e3530000 	cmp	r3, #0
  133dd8:	1a000006 	bne	133df8 <ipfrag_free_pbuf_custom+0x40>
  133ddc:	e3090ad4 	movw	r0, #39636	; 0x9ad4
  133de0:	e3400014 	movt	r0, #20
  133de4:	ebff3cca 	bl	103114 <rt_kprintf>
  133de8:	e3001297 	movw	r1, #663	; 0x297
  133dec:	e3090968 	movw	r0, #39272	; 0x9968
  133df0:	e3400014 	movt	r0, #20
  133df4:	ebff5cbd 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  133df8:	e51b2008 	ldr	r2, [fp, #-8]
  133dfc:	e51b3010 	ldr	r3, [fp, #-16]
  133e00:	e1520003 	cmp	r2, r3
  133e04:	0a000006 	beq	133e24 <ipfrag_free_pbuf_custom+0x6c>
  133e08:	e3090ae0 	movw	r0, #39648	; 0x9ae0
  133e0c:	e3400014 	movt	r0, #20
  133e10:	ebff3cbf 	bl	103114 <rt_kprintf>
  133e14:	e3a01fa6 	mov	r1, #664	; 0x298
  133e18:	e3090968 	movw	r0, #39272	; 0x9968
  133e1c:	e3400014 	movt	r0, #20
  133e20:	ebff5cb2 	bl	10b0f0 <sys_arch_assert>
  if (pcr->original != NULL) {
  133e24:	e51b3008 	ldr	r3, [fp, #-8]
  133e28:	e5933014 	ldr	r3, [r3, #20]
  133e2c:	e3530000 	cmp	r3, #0
  133e30:	0a000003 	beq	133e44 <ipfrag_free_pbuf_custom+0x8c>
    pbuf_free(pcr->original);
  133e34:	e51b3008 	ldr	r3, [fp, #-8]
  133e38:	e5933014 	ldr	r3, [r3, #20]
  133e3c:	e1a00003 	mov	r0, r3
  133e40:	ebff9c1d 	bl	11aebc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
  133e44:	e51b0008 	ldr	r0, [fp, #-8]
  133e48:	ebffffc6 	bl	133d68 <ip_frag_free_pbuf_custom_ref>
}
  133e4c:	e320f000 	nop	{0}
  133e50:	e24bd004 	sub	sp, fp, #4
  133e54:	e8bd8800 	pop	{fp, pc}

00133e58 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
  133e58:	e92d4800 	push	{fp, lr}
  133e5c:	e28db004 	add	fp, sp, #4
  133e60:	e24dd048 	sub	sp, sp, #72	; 0x48
  133e64:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  133e68:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  133e6c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
  133e70:	e3a03000 	mov	r3, #0
  133e74:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
  133e78:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  133e7c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  133e80:	e2433014 	sub	r3, r3, #20
  133e84:	e2832007 	add	r2, r3, #7
  133e88:	e3530000 	cmp	r3, #0
  133e8c:	b1a03002 	movlt	r3, r2
  133e90:	a1a03003 	movge	r3, r3
  133e94:	e1a031c3 	asr	r3, r3, #3
  133e98:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  133e9c:	e3a03014 	mov	r3, #20
  133ea0:	e14b30be 	strh	r3, [fp, #-14]
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
  133ea4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133ea8:	e5933004 	ldr	r3, [r3, #4]
  133eac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  iphdr = original_iphdr;
  133eb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133eb4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
  133eb8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133ebc:	e5d33000 	ldrb	r3, [r3]
  133ec0:	e203300f 	and	r3, r3, #15
  133ec4:	e1a03103 	lsl	r3, r3, #2
  133ec8:	e3530014 	cmp	r3, #20
  133ecc:	0a000008 	beq	133ef4 <ip4_frag+0x9c>
  133ed0:	e3090aec 	movw	r0, #39660	; 0x9aec
  133ed4:	e3400014 	movt	r0, #20
  133ed8:	ebff3c8d 	bl	103114 <rt_kprintf>
  133edc:	e3a01d0b 	mov	r1, #704	; 0x2c0
  133ee0:	e3090968 	movw	r0, #39272	; 0x9968
  133ee4:	e3400014 	movt	r0, #20
  133ee8:	ebff5c80 	bl	10b0f0 <sys_arch_assert>
  133eec:	e3e03005 	mvn	r3, #5
  133ef0:	ea0000ed 	b	1342ac <ip4_frag+0x454>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  133ef4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133ef8:	e1d330b6 	ldrh	r3, [r3, #6]
  133efc:	e6ff3073 	uxth	r3, r3
  133f00:	e1a00003 	mov	r0, r3
  133f04:	ebff89b5 	bl	1165e0 <lwip_htons>
  133f08:	e1a03000 	mov	r3, r0
  133f0c:	e14b31b0 	strh	r3, [fp, #-16]
  ofo = tmp & IP_OFFMASK;
  133f10:	e15b31b0 	ldrh	r3, [fp, #-16]
  133f14:	e7ec3053 	ubfx	r3, r3, #0, #13
  133f18:	e14b30bc 	strh	r3, [fp, #-12]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
  133f1c:	e15b31b0 	ldrh	r3, [fp, #-16]
  133f20:	e2033a02 	and	r3, r3, #8192	; 0x2000
  133f24:	e3530000 	cmp	r3, #0
  133f28:	0a000008 	beq	133f50 <ip4_frag+0xf8>
  133f2c:	e3090b14 	movw	r0, #39700	; 0x9b14
  133f30:	e3400014 	movt	r0, #20
  133f34:	ebff3c76 	bl	103114 <rt_kprintf>
  133f38:	e30012c5 	movw	r1, #709	; 0x2c5
  133f3c:	e3090968 	movw	r0, #39272	; 0x9968
  133f40:	e3400014 	movt	r0, #20
  133f44:	ebff5c69 	bl	10b0f0 <sys_arch_assert>
  133f48:	e3e03005 	mvn	r3, #5
  133f4c:	ea0000d6 	b	1342ac <ip4_frag+0x454>

  left = p->tot_len - IP_HLEN;
  133f50:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133f54:	e1d330b8 	ldrh	r3, [r3, #8]
  133f58:	e2433014 	sub	r3, r3, #20
  133f5c:	e14b30ba 	strh	r3, [fp, #-10]

  while (left) {
  133f60:	ea0000bc 	b	134258 <ip4_frag+0x400>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
  133f64:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133f68:	e1a02183 	lsl	r2, r3, #3
  133f6c:	e15b30ba 	ldrh	r3, [fp, #-10]
  133f70:	e1520003 	cmp	r2, r3
  133f74:	b1a03002 	movlt	r3, r2
  133f78:	a1a03003 	movge	r3, r3
  133f7c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
  133f80:	e3a02000 	mov	r2, #0
  133f84:	e3a01014 	mov	r1, #20
  133f88:	e3a00002 	mov	r0, #2
  133f8c:	ebff98c3 	bl	11a2a0 <pbuf_alloc>
  133f90:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
    if (rambuf == NULL) {
  133f94:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133f98:	e3530000 	cmp	r3, #0
  133f9c:	0a0000b9 	beq	134288 <ip4_frag+0x430>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
  133fa0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133fa4:	e1d330ba 	ldrh	r3, [r3, #10]
  133fa8:	e3530013 	cmp	r3, #19
  133fac:	8a000006 	bhi	133fcc <ip4_frag+0x174>
  133fb0:	e3090b30 	movw	r0, #39728	; 0x9b30
  133fb4:	e3400014 	movt	r0, #20
  133fb8:	ebff3c55 	bl	103114 <rt_kprintf>
  133fbc:	e3a01fba 	mov	r1, #744	; 0x2e8
  133fc0:	e3090968 	movw	r0, #39272	; 0x9968
  133fc4:	e3400014 	movt	r0, #20
  133fc8:	ebff5c48 	bl	10b0f0 <sys_arch_assert>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  133fcc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133fd0:	e5933004 	ldr	r3, [r3, #4]
  133fd4:	e3a02014 	mov	r2, #20
  133fd8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  133fdc:	e1a00003 	mov	r0, r3
  133fe0:	eb00336d 	bl	140d9c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
  133fe4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133fe8:	e5933004 	ldr	r3, [r3, #4]
  133fec:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    left_to_copy = fragsize;
  133ff0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  133ff4:	e14b30b8 	strh	r3, [fp, #-8]
    while (left_to_copy) {
  133ff8:	ea000049 	b	134124 <ip4_frag+0x2cc>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
  133ffc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  134000:	e1d320ba 	ldrh	r2, [r3, #10]
  134004:	e15b30be 	ldrh	r3, [fp, #-14]
  134008:	e0423003 	sub	r3, r2, r3
  13400c:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
  134010:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  134014:	e15b30b8 	ldrh	r3, [fp, #-8]
  134018:	e1520003 	cmp	r2, r3
  13401c:	31a03002 	movcc	r3, r2
  134020:	21a03003 	movcs	r3, r3
  134024:	e14b30b6 	strh	r3, [fp, #-6]
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
  134028:	e15b30b6 	ldrh	r3, [fp, #-6]
  13402c:	e3530000 	cmp	r3, #0
  134030:	1a000005 	bne	13404c <ip4_frag+0x1f4>
        poff = 0;
  134034:	e3a03000 	mov	r3, #0
  134038:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  13403c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  134040:	e5933000 	ldr	r3, [r3]
  134044:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
        continue;
  134048:	ea000035 	b	134124 <ip4_frag+0x2cc>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
  13404c:	ebffff3b 	bl	133d40 <ip_frag_alloc_pbuf_custom_ref>
  134050:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
      if (pcr == NULL) {
  134054:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134058:	e3530000 	cmp	r3, #0
  13405c:	1a000002 	bne	13406c <ip4_frag+0x214>
        pbuf_free(rambuf);
  134060:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  134064:	ebff9b94 	bl	11aebc <pbuf_free>
        goto memerr;
  134068:	ea000087 	b	13428c <ip4_frag+0x434>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  13406c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
        (u8_t*)p->payload + poff, newpbuflen);
  134070:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  134074:	e5932004 	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  134078:	e15b30be 	ldrh	r3, [fp, #-14]
  13407c:	e0823003 	add	r3, r2, r3
  134080:	e15b10b6 	ldrh	r1, [fp, #-6]
  134084:	e15b20b6 	ldrh	r2, [fp, #-6]
  134088:	e58d2004 	str	r2, [sp, #4]
  13408c:	e58d3000 	str	r3, [sp]
  134090:	e1a03000 	mov	r3, r0
  134094:	e3a02002 	mov	r2, #2
  134098:	e3a00004 	mov	r0, #4
  13409c:	ebff99e4 	bl	11a834 <pbuf_alloced_custom>
  1340a0:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
      if (newpbuf == NULL) {
  1340a4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1340a8:	e3530000 	cmp	r3, #0
  1340ac:	1a000004 	bne	1340c4 <ip4_frag+0x26c>
        ip_frag_free_pbuf_custom_ref(pcr);
  1340b0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1340b4:	ebffff2b 	bl	133d68 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
  1340b8:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  1340bc:	ebff9b7e 	bl	11aebc <pbuf_free>
        goto memerr;
  1340c0:	ea000071 	b	13428c <ip4_frag+0x434>
      }
      pbuf_ref(p);
  1340c4:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  1340c8:	ebff9c15 	bl	11b124 <pbuf_ref>
      pcr->original = p;
  1340cc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1340d0:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  1340d4:	e5832014 	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
  1340d8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  1340dc:	e3033db8 	movw	r3, #15800	; 0x3db8
  1340e0:	e3403013 	movt	r3, #19
  1340e4:	e5823010 	str	r3, [r2, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
  1340e8:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1340ec:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  1340f0:	ebff9c28 	bl	11b198 <pbuf_cat>
      left_to_copy -= newpbuflen;
  1340f4:	e15b20b8 	ldrh	r2, [fp, #-8]
  1340f8:	e15b30b6 	ldrh	r3, [fp, #-6]
  1340fc:	e0423003 	sub	r3, r2, r3
  134100:	e14b30b8 	strh	r3, [fp, #-8]
      if (left_to_copy) {
  134104:	e15b30b8 	ldrh	r3, [fp, #-8]
  134108:	e3530000 	cmp	r3, #0
  13410c:	0a000004 	beq	134124 <ip4_frag+0x2cc>
        poff = 0;
  134110:	e3a03000 	mov	r3, #0
  134114:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  134118:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  13411c:	e5933000 	ldr	r3, [r3]
  134120:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    while (left_to_copy) {
  134124:	e15b30b8 	ldrh	r3, [fp, #-8]
  134128:	e3530000 	cmp	r3, #0
  13412c:	1affffb2 	bne	133ffc <ip4_frag+0x1a4>
      }
    }
    poff += newpbuflen;
  134130:	e15b20be 	ldrh	r2, [fp, #-14]
  134134:	e15b30b6 	ldrh	r3, [fp, #-6]
  134138:	e0823003 	add	r3, r2, r3
  13413c:	e14b30be 	strh	r3, [fp, #-14]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
  134140:	e15b20ba 	ldrh	r2, [fp, #-10]
  134144:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  134148:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  13414c:	e2433014 	sub	r3, r3, #20
  134150:	e1520003 	cmp	r2, r3
  134154:	d3a03001 	movle	r3, #1
  134158:	c3a03000 	movgt	r3, #0
  13415c:	e6ef3073 	uxtb	r3, r3
  134160:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
  134164:	e15b30bc 	ldrh	r3, [fp, #-12]
  134168:	e7ec3053 	ubfx	r3, r3, #0, #13
  13416c:	e14b31b0 	strh	r3, [fp, #-16]
    if (!last) {
  134170:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134174:	e3530000 	cmp	r3, #0
  134178:	1a000002 	bne	134188 <ip4_frag+0x330>
      tmp = tmp | IP_MF;
  13417c:	e15b31b0 	ldrh	r3, [fp, #-16]
  134180:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  134184:	e14b31b0 	strh	r3, [fp, #-16]
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
  134188:	e15b31b0 	ldrh	r3, [fp, #-16]
  13418c:	e1a00003 	mov	r0, r3
  134190:	ebff8912 	bl	1165e0 <lwip_htons>
  134194:	e1a03000 	mov	r3, r0
  134198:	e1a02003 	mov	r2, r3
  13419c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1341a0:	e1c320b6 	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
  1341a4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  1341a8:	e2833014 	add	r3, r3, #20
  1341ac:	e6ff3073 	uxth	r3, r3
  1341b0:	e1a00003 	mov	r0, r3
  1341b4:	ebff8909 	bl	1165e0 <lwip_htons>
  1341b8:	e1a03000 	mov	r3, r0
  1341bc:	e1a02003 	mov	r2, r3
  1341c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1341c4:	e1c320b2 	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  1341c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1341cc:	e3a02000 	mov	r2, #0
  1341d0:	e5c3200a 	strb	r2, [r3, #10]
  1341d4:	e3a02000 	mov	r2, #0
  1341d8:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  1341dc:	e3a01014 	mov	r1, #20
  1341e0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1341e4:	ebff920c 	bl	118a1c <inet_chksum>
  1341e8:	e1a03000 	mov	r3, r0
  1341ec:	e1a02003 	mov	r2, r3
  1341f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1341f4:	e1c320ba 	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  1341f8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1341fc:	e5933014 	ldr	r3, [r3, #20]
  134200:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  134204:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  134208:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  13420c:	e12fff33 	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
  134210:	e30e3a14 	movw	r3, #59924	; 0xea14
  134214:	e3403056 	movt	r3, #86	; 0x56
  134218:	e1d333b0 	ldrh	r3, [r3, #48]	; 0x30
  13421c:	e2833001 	add	r3, r3, #1
  134220:	e6ff2073 	uxth	r2, r3
  134224:	e30e3a14 	movw	r3, #59924	; 0xea14
  134228:	e3403056 	movt	r3, #86	; 0x56
  13422c:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
  134230:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  134234:	ebff9b20 	bl	11aebc <pbuf_free>
    left -= fragsize;
  134238:	e15b20ba 	ldrh	r2, [fp, #-10]
  13423c:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  134240:	e0423003 	sub	r3, r2, r3
  134244:	e14b30ba 	strh	r3, [fp, #-10]
    ofo += nfb;
  134248:	e15b20bc 	ldrh	r2, [fp, #-12]
  13424c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  134250:	e0823003 	add	r3, r2, r3
  134254:	e14b30bc 	strh	r3, [fp, #-12]
  while (left) {
  134258:	e15b30ba 	ldrh	r3, [fp, #-10]
  13425c:	e3530000 	cmp	r3, #0
  134260:	1affff3f 	bne	133f64 <ip4_frag+0x10c>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  134264:	e30e3a14 	movw	r3, #59924	; 0xea14
  134268:	e3403056 	movt	r3, #86	; 0x56
  13426c:	e5933154 	ldr	r3, [r3, #340]	; 0x154
  134270:	e2832001 	add	r2, r3, #1
  134274:	e30e3a14 	movw	r3, #59924	; 0xea14
  134278:	e3403056 	movt	r3, #86	; 0x56
  13427c:	e5832154 	str	r2, [r3, #340]	; 0x154
  return ERR_OK;
  134280:	e3a03000 	mov	r3, #0
  134284:	ea000008 	b	1342ac <ip4_frag+0x454>
      goto memerr;
  134288:	e320f000 	nop	{0}
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  13428c:	e30e3a14 	movw	r3, #59924	; 0xea14
  134290:	e3403056 	movt	r3, #86	; 0x56
  134294:	e5933158 	ldr	r3, [r3, #344]	; 0x158
  134298:	e2832001 	add	r2, r3, #1
  13429c:	e30e3a14 	movw	r3, #59924	; 0xea14
  1342a0:	e3403056 	movt	r3, #86	; 0x56
  1342a4:	e5832158 	str	r2, [r3, #344]	; 0x158
  return ERR_MEM;
  1342a8:	e3e03000 	mvn	r3, #0
}
  1342ac:	e1a00003 	mov	r0, r3
  1342b0:	e24bd004 	sub	sp, fp, #4
  1342b4:	e8bd8800 	pop	{fp, pc}

001342b8 <ping_prepare_echo>:
    rt_uint8_t addr0, addr1, addr2, addr3;
};

/** Prepare a echo ICMP request */
static void ping_prepare_echo( struct icmp_echo_hdr *iecho, u16_t len)
{
  1342b8:	e92d4800 	push	{fp, lr}
  1342bc:	e28db004 	add	fp, sp, #4
  1342c0:	e24dd010 	sub	sp, sp, #16
  1342c4:	e50b0010 	str	r0, [fp, #-16]
  1342c8:	e1a03001 	mov	r3, r1
  1342cc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    size_t i;
    size_t data_len = len - sizeof(struct icmp_echo_hdr);
  1342d0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1342d4:	e2433008 	sub	r3, r3, #8
  1342d8:	e50b300c 	str	r3, [fp, #-12]

    ICMPH_TYPE_SET(iecho, ICMP_ECHO);
  1342dc:	e51b3010 	ldr	r3, [fp, #-16]
  1342e0:	e3a02008 	mov	r2, #8
  1342e4:	e5c32000 	strb	r2, [r3]
    ICMPH_CODE_SET(iecho, 0);
  1342e8:	e51b3010 	ldr	r3, [fp, #-16]
  1342ec:	e3a02000 	mov	r2, #0
  1342f0:	e5c32001 	strb	r2, [r3, #1]
    iecho->chksum = 0;
  1342f4:	e51b3010 	ldr	r3, [fp, #-16]
  1342f8:	e3a02000 	mov	r2, #0
  1342fc:	e5c32002 	strb	r2, [r3, #2]
  134300:	e3a02000 	mov	r2, #0
  134304:	e5c32003 	strb	r2, [r3, #3]
    iecho->id     = PING_ID;
  134308:	e51b2010 	ldr	r2, [fp, #-16]
  13430c:	e3a03000 	mov	r3, #0
  134310:	e1e03003 	mvn	r3, r3
  134314:	e2033050 	and	r3, r3, #80	; 0x50
  134318:	e1e03003 	mvn	r3, r3
  13431c:	e5c23004 	strb	r3, [r2, #4]
  134320:	e3a03000 	mov	r3, #0
  134324:	e1e03003 	mvn	r3, r3
  134328:	e2033050 	and	r3, r3, #80	; 0x50
  13432c:	e1e03003 	mvn	r3, r3
  134330:	e5c23005 	strb	r3, [r2, #5]
    iecho->seqno  = htons(++ping_seq_num);
  134334:	e30e3bfe 	movw	r3, #60414	; 0xebfe
  134338:	e3403014 	movt	r3, #20
  13433c:	e1d330b0 	ldrh	r3, [r3]
  134340:	e2833001 	add	r3, r3, #1
  134344:	e6ff2073 	uxth	r2, r3
  134348:	e30e3bfe 	movw	r3, #60414	; 0xebfe
  13434c:	e3403014 	movt	r3, #20
  134350:	e1c320b0 	strh	r2, [r3]
  134354:	e30e3bfe 	movw	r3, #60414	; 0xebfe
  134358:	e3403014 	movt	r3, #20
  13435c:	e1d330b0 	ldrh	r3, [r3]
  134360:	e1a00003 	mov	r0, r3
  134364:	ebff889d 	bl	1165e0 <lwip_htons>
  134368:	e1a03000 	mov	r3, r0
  13436c:	e1a02003 	mov	r2, r3
  134370:	e51b3010 	ldr	r3, [fp, #-16]
  134374:	e1c320b6 	strh	r2, [r3, #6]

    /* fill the additional data buffer with some data */
    for (i = 0; i < data_len; i++)
  134378:	e3a03000 	mov	r3, #0
  13437c:	e50b3008 	str	r3, [fp, #-8]
  134380:	ea000009 	b	1343ac <ping_prepare_echo+0xf4>
    {
        ((char*) iecho)[sizeof(struct icmp_echo_hdr) + i] = (char) i;
  134384:	e51b3008 	ldr	r3, [fp, #-8]
  134388:	e2833008 	add	r3, r3, #8
  13438c:	e51b2010 	ldr	r2, [fp, #-16]
  134390:	e0823003 	add	r3, r2, r3
  134394:	e51b2008 	ldr	r2, [fp, #-8]
  134398:	e6ef2072 	uxtb	r2, r2
  13439c:	e5c32000 	strb	r2, [r3]
    for (i = 0; i < data_len; i++)
  1343a0:	e51b3008 	ldr	r3, [fp, #-8]
  1343a4:	e2833001 	add	r3, r3, #1
  1343a8:	e50b3008 	str	r3, [fp, #-8]
  1343ac:	e51b2008 	ldr	r2, [fp, #-8]
  1343b0:	e51b300c 	ldr	r3, [fp, #-12]
  1343b4:	e1520003 	cmp	r2, r3
  1343b8:	3afffff1 	bcc	134384 <ping_prepare_echo+0xcc>
    }

#ifdef RT_LWIP_USING_HW_CHECKSUM
      iecho->chksum = 0;
#else
      iecho->chksum = inet_chksum(iecho, len);
  1343bc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1343c0:	e1a01003 	mov	r1, r3
  1343c4:	e51b0010 	ldr	r0, [fp, #-16]
  1343c8:	ebff9193 	bl	118a1c <inet_chksum>
  1343cc:	e1a03000 	mov	r3, r0
  1343d0:	e1a02003 	mov	r2, r3
  1343d4:	e51b3010 	ldr	r3, [fp, #-16]
  1343d8:	e1c320b2 	strh	r2, [r3, #2]
#endif

}
  1343dc:	e320f000 	nop	{0}
  1343e0:	e24bd004 	sub	sp, fp, #4
  1343e4:	e8bd8800 	pop	{fp, pc}

001343e8 <lwip_ping_send>:

#include <stdio.h>

/* Ping using the socket ip */
err_t lwip_ping_send(int s, ip_addr_t *addr, int size)
{
  1343e8:	e92d4800 	push	{fp, lr}
  1343ec:	e28db004 	add	fp, sp, #4
  1343f0:	e24dd038 	sub	sp, sp, #56	; 0x38
  1343f4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1343f8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1343fc:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    int err;
    struct icmp_echo_hdr *iecho;
    struct sockaddr_in to;
    int ping_size = sizeof(struct icmp_echo_hdr) + size;
  134400:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134404:	e2833008 	add	r3, r3, #8
  134408:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("ping_size is too big", ping_size <= 0xffff);
  13440c:	e51b3008 	ldr	r3, [fp, #-8]
  134410:	e3530801 	cmp	r3, #65536	; 0x10000
  134414:	ba000006 	blt	134434 <lwip_ping_send+0x4c>
  134418:	e3090b50 	movw	r0, #39760	; 0x9b50
  13441c:	e3400014 	movt	r0, #20
  134420:	ebff3b3b 	bl	103114 <rt_kprintf>
  134424:	e3a01054 	mov	r1, #84	; 0x54
  134428:	e3090b68 	movw	r0, #39784	; 0x9b68
  13442c:	e3400014 	movt	r0, #20
  134430:	ebff5b2e 	bl	10b0f0 <sys_arch_assert>

    iecho = rt_malloc(ping_size);
  134434:	e51b3008 	ldr	r3, [fp, #-8]
  134438:	e1a00003 	mov	r0, r3
  13443c:	ebff3ad4 	bl	102f94 <rt_malloc>
  134440:	e50b000c 	str	r0, [fp, #-12]
    if (iecho == RT_NULL)
  134444:	e51b300c 	ldr	r3, [fp, #-12]
  134448:	e3530000 	cmp	r3, #0
  13444c:	1a000001 	bne	134458 <lwip_ping_send+0x70>
    {
        return ERR_MEM;
  134450:	e3e03000 	mvn	r3, #0
  134454:	ea00001e 	b	1344d4 <lwip_ping_send+0xec>
    }

    ping_prepare_echo(iecho, (u16_t) ping_size);
  134458:	e51b3008 	ldr	r3, [fp, #-8]
  13445c:	e6ff3073 	uxth	r3, r3
  134460:	e1a01003 	mov	r1, r3
  134464:	e51b000c 	ldr	r0, [fp, #-12]
  134468:	ebffff92 	bl	1342b8 <ping_prepare_echo>

    to.sin_len = sizeof(to);
  13446c:	e3a03010 	mov	r3, #16
  134470:	e54b3020 	strb	r3, [fp, #-32]	; 0xffffffe0
    to.sin_family = AF_INET;
  134474:	e3a03002 	mov	r3, #2
  134478:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
#if LWIP_IPV4 && LWIP_IPV6
    to.sin_addr.s_addr = addr->u_addr.ip4.addr;
#elif LWIP_IPV4
    to.sin_addr.s_addr = addr->addr;
  13447c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134480:	e5933000 	ldr	r3, [r3]
  134484:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#elif LWIP_IPV6
#error Not supported IPv6.
#endif

    err = lwip_sendto(s, iecho, ping_size, 0, (struct sockaddr*) &to, sizeof(to));
  134488:	e51b2008 	ldr	r2, [fp, #-8]
  13448c:	e3a03010 	mov	r3, #16
  134490:	e58d3004 	str	r3, [sp, #4]
  134494:	e24b3020 	sub	r3, fp, #32
  134498:	e58d3000 	str	r3, [sp]
  13449c:	e3a03000 	mov	r3, #0
  1344a0:	e51b100c 	ldr	r1, [fp, #-12]
  1344a4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1344a8:	ebff797c 	bl	112aa0 <lwip_sendto>
  1344ac:	e50b0010 	str	r0, [fp, #-16]
    rt_free(iecho);
  1344b0:	e51b000c 	ldr	r0, [fp, #-12]
  1344b4:	ebff3ac0 	bl	102fbc <rt_free>

    return (err == ping_size ? ERR_OK : ERR_VAL);
  1344b8:	e51b2010 	ldr	r2, [fp, #-16]
  1344bc:	e51b3008 	ldr	r3, [fp, #-8]
  1344c0:	e1520003 	cmp	r2, r3
  1344c4:	1a000001 	bne	1344d0 <lwip_ping_send+0xe8>
  1344c8:	e3a03000 	mov	r3, #0
  1344cc:	ea000000 	b	1344d4 <lwip_ping_send+0xec>
  1344d0:	e3e03005 	mvn	r3, #5
}
  1344d4:	e1a00003 	mov	r0, r3
  1344d8:	e24bd004 	sub	sp, fp, #4
  1344dc:	e8bd8800 	pop	{fp, pc}

001344e0 <lwip_ping_recv>:

int lwip_ping_recv(int s, int *ttl)
{
  1344e0:	e92d4810 	push	{r4, fp, lr}
  1344e4:	e28db008 	add	fp, sp, #8
  1344e8:	e24dd074 	sub	sp, sp, #116	; 0x74
  1344ec:	e50b0070 	str	r0, [fp, #-112]	; 0xffffff90
  1344f0:	e50b1074 	str	r1, [fp, #-116]	; 0xffffff8c
    char buf[64];
    int fromlen = sizeof(struct sockaddr_in), len;
  1344f4:	e3a03010 	mov	r3, #16
  1344f8:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    struct sockaddr_in from;
    struct ip_hdr *iphdr;
    struct icmp_echo_hdr *iecho;

    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  1344fc:	ea000024 	b	134594 <lwip_ping_recv+0xb4>
    {
        if (len >= (int)(sizeof(struct ip_hdr) + sizeof(struct icmp_echo_hdr)))
  134500:	e51b3010 	ldr	r3, [fp, #-16]
  134504:	e353001b 	cmp	r3, #27
  134508:	da000021 	ble	134594 <lwip_ping_recv+0xb4>
        {
            iphdr = (struct ip_hdr *) buf;
  13450c:	e24b3058 	sub	r3, fp, #88	; 0x58
  134510:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            iecho = (struct icmp_echo_hdr *) (buf + (IPH_HL(iphdr) * 4));
  134514:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134518:	e5d33000 	ldrb	r3, [r3]
  13451c:	e203300f 	and	r3, r3, #15
  134520:	e1a03103 	lsl	r3, r3, #2
  134524:	e1a02003 	mov	r2, r3
  134528:	e24b3058 	sub	r3, fp, #88	; 0x58
  13452c:	e0833002 	add	r3, r3, r2
  134530:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            if ((iecho->id == PING_ID) && (iecho->seqno == htons(ping_seq_num)))
  134534:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134538:	e1d330b4 	ldrh	r3, [r3, #4]
  13453c:	e6ff3073 	uxth	r3, r3
  134540:	e30a2faf 	movw	r2, #44975	; 0xafaf
  134544:	e1530002 	cmp	r3, r2
  134548:	1a000011 	bne	134594 <lwip_ping_recv+0xb4>
  13454c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134550:	e1d330b6 	ldrh	r3, [r3, #6]
  134554:	e6ff4073 	uxth	r4, r3
  134558:	e30e3bfe 	movw	r3, #60414	; 0xebfe
  13455c:	e3403014 	movt	r3, #20
  134560:	e1d330b0 	ldrh	r3, [r3]
  134564:	e1a00003 	mov	r0, r3
  134568:	ebff881c 	bl	1165e0 <lwip_htons>
  13456c:	e1a03000 	mov	r3, r0
  134570:	e1540003 	cmp	r4, r3
  134574:	1a000006 	bne	134594 <lwip_ping_recv+0xb4>
            {
                *ttl = iphdr->_ttl;
  134578:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13457c:	e5d33008 	ldrb	r3, [r3, #8]
  134580:	e1a02003 	mov	r2, r3
  134584:	e51b3074 	ldr	r3, [fp, #-116]	; 0xffffff8c
  134588:	e5832000 	str	r2, [r3]
                return len;
  13458c:	e51b3010 	ldr	r3, [fp, #-16]
  134590:	ea00000d 	b	1345cc <lwip_ping_recv+0xec>
    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  134594:	e24b1058 	sub	r1, fp, #88	; 0x58
  134598:	e24b305c 	sub	r3, fp, #92	; 0x5c
  13459c:	e58d3004 	str	r3, [sp, #4]
  1345a0:	e24b306c 	sub	r3, fp, #108	; 0x6c
  1345a4:	e58d3000 	str	r3, [sp]
  1345a8:	e3a03000 	mov	r3, #0
  1345ac:	e3a02040 	mov	r2, #64	; 0x40
  1345b0:	e51b0070 	ldr	r0, [fp, #-112]	; 0xffffff90
  1345b4:	ebff75ce 	bl	111cf4 <lwip_recvfrom>
  1345b8:	e50b0010 	str	r0, [fp, #-16]
  1345bc:	e51b3010 	ldr	r3, [fp, #-16]
  1345c0:	e3530000 	cmp	r3, #0
  1345c4:	caffffcd 	bgt	134500 <lwip_ping_recv+0x20>
            }
        }
    }

    return len;
  1345c8:	e51b3010 	ldr	r3, [fp, #-16]
}
  1345cc:	e1a00003 	mov	r0, r3
  1345d0:	e24bd008 	sub	sp, fp, #8
  1345d4:	e8bd8810 	pop	{r4, fp, pc}

001345d8 <ENET_ActiveRead>:
 * @note This must be called after the MAC configuration and
 * state are ready. It must be called after the ENET_Init() and
 * ENET_Ptp1588Configure(). This should be called when the ENET receive required.
 */
static inline void ENET_ActiveRead(ENET_Type *base)
{
  1345d8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1345dc:	e28db000 	add	fp, sp, #0
  1345e0:	e24dd00c 	sub	sp, sp, #12
  1345e4:	e50b0008 	str	r0, [fp, #-8]
    base->RDAR = ENET_RDAR_RDAR_MASK;
  1345e8:	e51b3008 	ldr	r3, [fp, #-8]
  1345ec:	e3a02401 	mov	r2, #16777216	; 0x1000000
  1345f0:	e5832010 	str	r2, [r3, #16]
}
  1345f4:	e320f000 	nop	{0}
  1345f8:	e28bd000 	add	sp, fp, #0
  1345fc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  134600:	e12fff1e 	bx	lr

00134604 <ENET_EnableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to enable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_EnableInterrupts(ENET_Type *base, uint32_t mask)
{
  134604:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  134608:	e28db000 	add	fp, sp, #0
  13460c:	e24dd00c 	sub	sp, sp, #12
  134610:	e50b0008 	str	r0, [fp, #-8]
  134614:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  134618:	e51b3008 	ldr	r3, [fp, #-8]
  13461c:	e5932008 	ldr	r2, [r3, #8]
  134620:	e51b300c 	ldr	r3, [fp, #-12]
  134624:	e1822003 	orr	r2, r2, r3
  134628:	e51b3008 	ldr	r3, [fp, #-8]
  13462c:	e5832008 	str	r2, [r3, #8]
}
  134630:	e320f000 	nop	{0}
  134634:	e28bd000 	add	sp, fp, #0
  134638:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  13463c:	e12fff1e 	bx	lr

00134640 <ENET_DisableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to disable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_DisableInterrupts(ENET_Type *base, uint32_t mask)
{
  134640:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  134644:	e28db000 	add	fp, sp, #0
  134648:	e24dd00c 	sub	sp, sp, #12
  13464c:	e50b0008 	str	r0, [fp, #-8]
  134650:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR &= ~mask;
  134654:	e51b3008 	ldr	r3, [fp, #-8]
  134658:	e5932008 	ldr	r2, [r3, #8]
  13465c:	e51b300c 	ldr	r3, [fp, #-12]
  134660:	e1e03003 	mvn	r3, r3
  134664:	e0022003 	and	r2, r2, r3
  134668:	e51b3008 	ldr	r3, [fp, #-8]
  13466c:	e5832008 	str	r2, [r3, #8]
}
  134670:	e320f000 	nop	{0}
  134674:	e28bd000 	add	sp, fp, #0
  134678:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  13467c:	e12fff1e 	bx	lr

00134680 <imx6ul_eth_link_change>:
#else
#define eth_device_linkchange(x, y)
#endif

void imx6ul_eth_link_change(struct rt_imx6ul_ethps *imx6ul_device,rt_bool_t up)
{
  134680:	e92d4800 	push	{fp, lr}
  134684:	e28db004 	add	fp, sp, #4
  134688:	e24dd008 	sub	sp, sp, #8
  13468c:	e50b0008 	str	r0, [fp, #-8]
  134690:	e50b100c 	str	r1, [fp, #-12]
    if(up)
  134694:	e51b300c 	ldr	r3, [fp, #-12]
  134698:	e3530000 	cmp	r3, #0
  13469c:	0a000013 	beq	1346f0 <imx6ul_eth_link_change+0x70>
    {
        LOG_D("enet%d link up",imx6ul_device->mac_num);
  1346a0:	e3090bac 	movw	r0, #39852	; 0x9bac
  1346a4:	e3400014 	movt	r0, #20
  1346a8:	ebff3a99 	bl	103114 <rt_kprintf>
  1346ac:	e51b3008 	ldr	r3, [fp, #-8]
  1346b0:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  1346b4:	e1a01003 	mov	r1, r3
  1346b8:	e3090bc0 	movw	r0, #39872	; 0x9bc0
  1346bc:	e3400014 	movt	r0, #20
  1346c0:	ebff3a93 	bl	103114 <rt_kprintf>
  1346c4:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  1346c8:	e3400014 	movt	r0, #20
  1346cc:	ebff3a90 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_TRUE);
  1346d0:	e51b3008 	ldr	r3, [fp, #-8]
  1346d4:	e3a01001 	mov	r1, #1
  1346d8:	e1a00003 	mov	r0, r3
  1346dc:	ebffd532 	bl	129bac <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_TRUE;
  1346e0:	e51b3008 	ldr	r3, [fp, #-8]
  1346e4:	e3a02001 	mov	r2, #1
  1346e8:	e5832088 	str	r2, [r3, #136]	; 0x88
    {
        LOG_D("enet%d link down",imx6ul_device->mac_num);
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
        imx6ul_device->phy_link_status = RT_FALSE;
    }
}
  1346ec:	ea000012 	b	13473c <imx6ul_eth_link_change+0xbc>
        LOG_D("enet%d link down",imx6ul_device->mac_num);
  1346f0:	e3090bac 	movw	r0, #39852	; 0x9bac
  1346f4:	e3400014 	movt	r0, #20
  1346f8:	ebff3a85 	bl	103114 <rt_kprintf>
  1346fc:	e51b3008 	ldr	r3, [fp, #-8]
  134700:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134704:	e1a01003 	mov	r1, r3
  134708:	e3090bd8 	movw	r0, #39896	; 0x9bd8
  13470c:	e3400014 	movt	r0, #20
  134710:	ebff3a7f 	bl	103114 <rt_kprintf>
  134714:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  134718:	e3400014 	movt	r0, #20
  13471c:	ebff3a7c 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
  134720:	e51b3008 	ldr	r3, [fp, #-8]
  134724:	e3a01000 	mov	r1, #0
  134728:	e1a00003 	mov	r0, r3
  13472c:	ebffd51e 	bl	129bac <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_FALSE;
  134730:	e51b3008 	ldr	r3, [fp, #-8]
  134734:	e3a02000 	mov	r2, #0
  134738:	e5832088 	str	r2, [r3, #136]	; 0x88
}
  13473c:	e320f000 	nop	{0}
  134740:	e24bd004 	sub	sp, fp, #4
  134744:	e8bd8800 	pop	{fp, pc}

00134748 <page_alloc>:

void page_alloc(size_t memsize, void **addr)
{
  134748:	e92d4800 	push	{fp, lr}
  13474c:	e28db004 	add	fp, sp, #4
  134750:	e24dd018 	sub	sp, sp, #24
  134754:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  134758:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    size_t alloc_size = memsize + SYS_PAGE_SIZE * 2;
  13475c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134760:	e2833a02 	add	r3, r3, #8192	; 0x2000
  134764:	e50b3008 	str	r3, [fp, #-8]
    void * addr_start = malloc(alloc_size);
  134768:	e51b0008 	ldr	r0, [fp, #-8]
  13476c:	eb0022f9 	bl	13d358 <malloc>
  134770:	e1a03000 	mov	r3, r0
  134774:	e50b300c 	str	r3, [fp, #-12]
    rt_memset(addr_start, 0, alloc_size);
  134778:	e51b2008 	ldr	r2, [fp, #-8]
  13477c:	e3a01000 	mov	r1, #0
  134780:	e51b000c 	ldr	r0, [fp, #-12]
  134784:	ebff3acf 	bl	1032c8 <rt_memset>

    long mask = SYS_PAGE_SIZE - 1;
  134788:	e3003fff 	movw	r3, #4095	; 0xfff
  13478c:	e50b3010 	str	r3, [fp, #-16]
    *addr = (void*)((long)(addr_start + SYS_PAGE_SIZE) & ~mask);
  134790:	e51b300c 	ldr	r3, [fp, #-12]
  134794:	e2833a01 	add	r3, r3, #4096	; 0x1000
  134798:	e1a02003 	mov	r2, r3
  13479c:	e51b3010 	ldr	r3, [fp, #-16]
  1347a0:	e1e03003 	mvn	r3, r3
  1347a4:	e0033002 	and	r3, r3, r2
  1347a8:	e1a02003 	mov	r2, r3
  1347ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1347b0:	e5832000 	str	r2, [r3]

    return;
  1347b4:	e320f000 	nop	{0}
}
  1347b8:	e24bd004 	sub	sp, fp, #4
  1347bc:	e8bd8800 	pop	{fp, pc}

001347c0 <enet_buffer_init>:

rt_err_t enet_buffer_init(enet_buffer_config_t *buffConfig)
{
  1347c0:	e92d4800 	push	{fp, lr}
  1347c4:	e28db004 	add	fp, sp, #4
  1347c8:	e24dd030 	sub	sp, sp, #48	; 0x30
  1347cc:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    void *tx_buff_addr = RT_NULL;
  1347d0:	e3a03000 	mov	r3, #0
  1347d4:	e50b3008 	str	r3, [fp, #-8]
    void *rx_buff_addr = RT_NULL;
  1347d8:	e3a03000 	mov	r3, #0
  1347dc:	e50b300c 	str	r3, [fp, #-12]
    void *tx_bd_addr = RT_NULL;
  1347e0:	e3a03000 	mov	r3, #0
  1347e4:	e50b3010 	str	r3, [fp, #-16]
    void *rx_bd_addr = RT_NULL;
  1347e8:	e3a03000 	mov	r3, #0
  1347ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  1347f0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1347f4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1347f8:	e3530701 	cmp	r3, #262144	; 0x40000
  1347fc:	8a000003 	bhi	134810 <enet_buffer_init+0x50>
       ((SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM)<buffConfig->txBufferTotalSize))
  134800:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134804:	e5933030 	ldr	r3, [r3, #48]	; 0x30
    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  134808:	e3530701 	cmp	r3, #262144	; 0x40000
  13480c:	9a00000a 	bls	13483c <enet_buffer_init+0x7c>
    {
        LOG_E("ERROR: alloc mem not enough for enet driver");
  134810:	e3090bec 	movw	r0, #39916	; 0x9bec
  134814:	e3400014 	movt	r0, #20
  134818:	ebff3a3d 	bl	103114 <rt_kprintf>
  13481c:	e3090c00 	movw	r0, #39936	; 0x9c00
  134820:	e3400014 	movt	r0, #20
  134824:	ebff3a3a 	bl	103114 <rt_kprintf>
  134828:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  13482c:	e3400014 	movt	r0, #20
  134830:	ebff3a37 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134834:	e3a03001 	mov	r3, #1
  134838:	ea000093 	b	134a8c <enet_buffer_init+0x2cc>
    }

    size_t rx_buff_memsize = SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM;
  13483c:	e3a03701 	mov	r3, #262144	; 0x40000
  134840:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    size_t tx_buff_memsize = SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM;
  134844:	e3a03701 	mov	r3, #262144	; 0x40000
  134848:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    size_t rx_bd_memsize = SYS_PAGE_SIZE<<RX_BD_INDEX_NUM;
  13484c:	e3a03a01 	mov	r3, #4096	; 0x1000
  134850:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    size_t tx_bd_memsize = SYS_PAGE_SIZE<<TX_BD_INDEX_NUM;
  134854:	e3a03a01 	mov	r3, #4096	; 0x1000
  134858:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    size_t total_memsize = rx_buff_memsize + tx_buff_memsize + rx_bd_memsize + tx_bd_memsize;
  13485c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  134860:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134864:	e0822003 	add	r2, r2, r3
  134868:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13486c:	e0823003 	add	r3, r2, r3
  134870:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134874:	e0823003 	add	r3, r2, r3
  134878:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    void *mem_align= RT_NULL;
  13487c:	e3a03000 	mov	r3, #0
  134880:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    page_alloc(total_memsize, &mem_align);
  134884:	e24b302c 	sub	r3, fp, #44	; 0x2c
  134888:	e1a01003 	mov	r1, r3
  13488c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  134890:	ebffffac 	bl	134748 <page_alloc>
    if (!mem_align)
  134894:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134898:	e3530000 	cmp	r3, #0
  13489c:	1a000001 	bne	1348a8 <enet_buffer_init+0xe8>
    {
        return RT_ERROR;
  1348a0:	e3a03001 	mov	r3, #1
  1348a4:	ea000078 	b	134a8c <enet_buffer_init+0x2cc>
    }
    
    rx_buff_addr = mem_align;
  1348a8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1348ac:	e50b300c 	str	r3, [fp, #-12]
    mem_align += rx_buff_memsize;
  1348b0:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1348b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1348b8:	e0823003 	add	r3, r2, r3
  1348bc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_buff_addr)
  1348c0:	e51b300c 	ldr	r3, [fp, #-12]
  1348c4:	e3530000 	cmp	r3, #0
  1348c8:	1a00000a 	bne	1348f8 <enet_buffer_init+0x138>
    {
        LOG_E("ERROR: rx buff page alloc failed");
  1348cc:	e3090bec 	movw	r0, #39916	; 0x9bec
  1348d0:	e3400014 	movt	r0, #20
  1348d4:	ebff3a0e 	bl	103114 <rt_kprintf>
  1348d8:	e3090c2c 	movw	r0, #39980	; 0x9c2c
  1348dc:	e3400014 	movt	r0, #20
  1348e0:	ebff3a0b 	bl	103114 <rt_kprintf>
  1348e4:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  1348e8:	e3400014 	movt	r0, #20
  1348ec:	ebff3a08 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  1348f0:	e3a03001 	mov	r3, #1
  1348f4:	ea000064 	b	134a8c <enet_buffer_init+0x2cc>
    }
    // buffConfig->rxBufferAlign = (void *)rt_ioremap_nocache(virtual_to_physical(rx_buff_addr), (SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM));
    // buffConfig->rxBufferAlign = ueth_remap(ueth_v2p(rx_buff_addr), UETH_REMAP_NOCACHE, rx_buff_memsize);
    buffConfig->rxBufferAlign = rx_buff_addr;
  1348f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1348fc:	e51b200c 	ldr	r2, [fp, #-12]
  134900:	e5832014 	str	r2, [r3, #20]
    buffConfig->rxPhyBufferAlign = ueth_v2p(rx_buff_addr);
  134904:	e51b000c 	ldr	r0, [fp, #-12]
  134908:	ebff3ebc 	bl	104400 <ueth_v2p>
  13490c:	e1a02000 	mov	r2, r0
  134910:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134914:	e5832024 	str	r2, [r3, #36]	; 0x24
    
    // tx_buff_addr = (void*)rt_pages_alloc(TX_BUFFER_INDEX_NUM);
    tx_buff_addr = mem_align;
  134918:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13491c:	e50b3008 	str	r3, [fp, #-8]
    mem_align += tx_buff_memsize;
  134920:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134924:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134928:	e0823003 	add	r3, r2, r3
  13492c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!tx_buff_addr)
  134930:	e51b3008 	ldr	r3, [fp, #-8]
  134934:	e3530000 	cmp	r3, #0
  134938:	1a00000a 	bne	134968 <enet_buffer_init+0x1a8>
    {
        LOG_E("ERROR: tx buff page alloc failed");
  13493c:	e3090bec 	movw	r0, #39916	; 0x9bec
  134940:	e3400014 	movt	r0, #20
  134944:	ebff39f2 	bl	103114 <rt_kprintf>
  134948:	e3090c50 	movw	r0, #40016	; 0x9c50
  13494c:	e3400014 	movt	r0, #20
  134950:	ebff39ef 	bl	103114 <rt_kprintf>
  134954:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  134958:	e3400014 	movt	r0, #20
  13495c:	ebff39ec 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134960:	e3a03001 	mov	r3, #1
  134964:	ea000048 	b	134a8c <enet_buffer_init+0x2cc>
    }
    // buffConfig->txBufferAlign = (void *)rt_ioremap_nocache(virtual_to_physical(tx_buff_addr), (SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM));
    // buffConfig->txBufferAlign = ueth_remap(ueth_v2p(tx_buff_addr), UETH_REMAP_NOCACHE, tx_buff_memsize);
    buffConfig->txBufferAlign = tx_buff_addr;
  134968:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  13496c:	e51b2008 	ldr	r2, [fp, #-8]
  134970:	e5832018 	str	r2, [r3, #24]
    buffConfig->txPhyBufferAlign = ueth_v2p(tx_buff_addr);
  134974:	e51b0008 	ldr	r0, [fp, #-8]
  134978:	ebff3ea0 	bl	104400 <ueth_v2p>
  13497c:	e1a02000 	mov	r2, r0
  134980:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134984:	e5832028 	str	r2, [r3, #40]	; 0x28
    
    // rx_bd_addr = (void*)rt_pages_alloc(RX_BD_INDEX_NUM);
    rx_bd_addr = mem_align;
  134988:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13498c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    mem_align += rx_bd_memsize;
  134990:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134998:	e0823003 	add	r3, r2, r3
  13499c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_bd_addr)
  1349a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1349a4:	e3530000 	cmp	r3, #0
  1349a8:	1a00000a 	bne	1349d8 <enet_buffer_init+0x218>
    {
        LOG_E("ERROR: rx bd page alloc failed");
  1349ac:	e3090bec 	movw	r0, #39916	; 0x9bec
  1349b0:	e3400014 	movt	r0, #20
  1349b4:	ebff39d6 	bl	103114 <rt_kprintf>
  1349b8:	e3090c74 	movw	r0, #40052	; 0x9c74
  1349bc:	e3400014 	movt	r0, #20
  1349c0:	ebff39d3 	bl	103114 <rt_kprintf>
  1349c4:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  1349c8:	e3400014 	movt	r0, #20
  1349cc:	ebff39d0 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  1349d0:	e3a03001 	mov	r3, #1
  1349d4:	ea00002c 	b	134a8c <enet_buffer_init+0x2cc>
    }
    buffConfig->rxPhyBdStartAddrAlign = ueth_v2p(rx_bd_addr);
  1349d8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1349dc:	ebff3e87 	bl	104400 <ueth_v2p>
  1349e0:	e1a02000 	mov	r2, r0
  1349e4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1349e8:	e583201c 	str	r2, [r3, #28]
    buffConfig->rxBdStartAddrAlign = ueth_remap(buffConfig->rxPhyBdStartAddrAlign, UETH_REMAP_NOCACHE, rx_bd_memsize);
  1349ec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1349f0:	e593301c 	ldr	r3, [r3, #28]
  1349f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1349f8:	e3a01003 	mov	r1, #3
  1349fc:	e1a00003 	mov	r0, r3
  134a00:	ebff3eab 	bl	1044b4 <ueth_remap>
  134a04:	e1a02000 	mov	r2, r0
  134a08:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134a0c:	e583200c 	str	r2, [r3, #12]
    // buffConfig->rxBdStartAddrAlign = (void *)rt_ioremap_nocache(virtual_to_physical(rx_bd_addr), (SYS_PAGE_SIZE<<RX_BD_INDEX_NUM));
    // buffConfig->rxBdStartAddrAlign = rx_bd_addr;
   
    // tx_bd_addr = (void*)rt_pages_alloc(TX_BD_INDEX_NUM);
    tx_bd_addr = mem_align;
  134a10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134a14:	e50b3010 	str	r3, [fp, #-16]
    if(!tx_bd_addr)
  134a18:	e51b3010 	ldr	r3, [fp, #-16]
  134a1c:	e3530000 	cmp	r3, #0
  134a20:	1a00000a 	bne	134a50 <enet_buffer_init+0x290>
    {
        LOG_E("ERROR: tx bd page alloc failed");
  134a24:	e3090bec 	movw	r0, #39916	; 0x9bec
  134a28:	e3400014 	movt	r0, #20
  134a2c:	ebff39b8 	bl	103114 <rt_kprintf>
  134a30:	e3090c94 	movw	r0, #40084	; 0x9c94
  134a34:	e3400014 	movt	r0, #20
  134a38:	ebff39b5 	bl	103114 <rt_kprintf>
  134a3c:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  134a40:	e3400014 	movt	r0, #20
  134a44:	ebff39b2 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134a48:	e3a03001 	mov	r3, #1
  134a4c:	ea00000e 	b	134a8c <enet_buffer_init+0x2cc>
    }
    // buffConfig->txBdStartAddrAlign = (void *)rt_ioremap_nocache(virtual_to_physical(tx_bd_addr), (SYS_PAGE_SIZE<<TX_BD_INDEX_NUM));
    buffConfig->txPhyBdStartAddrAlign = ueth_v2p(tx_bd_addr);
  134a50:	e51b0010 	ldr	r0, [fp, #-16]
  134a54:	ebff3e69 	bl	104400 <ueth_v2p>
  134a58:	e1a02000 	mov	r2, r0
  134a5c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134a60:	e5832020 	str	r2, [r3, #32]
    buffConfig->txBdStartAddrAlign = ueth_remap(buffConfig->txPhyBdStartAddrAlign, UETH_REMAP_NOCACHE, tx_bd_memsize);
  134a64:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134a68:	e5933020 	ldr	r3, [r3, #32]
  134a6c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134a70:	e3a01003 	mov	r1, #3
  134a74:	e1a00003 	mov	r0, r3
  134a78:	ebff3e8d 	bl	1044b4 <ueth_remap>
  134a7c:	e1a02000 	mov	r2, r0
  134a80:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134a84:	e5832010 	str	r2, [r3, #16]
    // buffConfig->txBdStartAddrAlign = tx_bd_addr;
    
    return RT_EOK;
  134a88:	e3a03000 	mov	r3, #0
}
  134a8c:	e1a00003 	mov	r0, r3
  134a90:	e24bd004 	sub	sp, fp, #4
  134a94:	e8bd8800 	pop	{fp, pc}

00134a98 <rt_imx6ul_eth_init>:

/* EMAC initialization function */
static rt_err_t rt_imx6ul_eth_init(rt_device_t dev)
{
  134a98:	e92d4800 	push	{fp, lr}
  134a9c:	e28db004 	add	fp, sp, #4
  134aa0:	e24dd038 	sub	sp, sp, #56	; 0x38
  134aa4:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    rt_err_t state;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134aa8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134aac:	e50b300c 	str	r3, [fp, #-12]
    ENET_Type *base_addr = RT_NULL;
  134ab0:	e3a03000 	mov	r3, #0
  134ab4:	e50b3010 	str	r3, [fp, #-16]
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    rt_uint32_t reg_value;

    // imx6ul_device->enet_virtual_base_addr = (ENET_Type *)rt_ioremap((void *)imx6ul_device->enet_phy_base_addr, SYS_PAGE_SIZE);
    imx6ul_device->enet_virtual_base_addr = (ENET_Type *)ueth_remap((void *)imx6ul_device->enet_phy_base_addr, UETH_REMAP, SYS_PAGE_SIZE);
  134ab8:	e51b300c 	ldr	r3, [fp, #-12]
  134abc:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  134ac0:	e3a02a01 	mov	r2, #4096	; 0x1000
  134ac4:	e3a01001 	mov	r1, #1
  134ac8:	e1a00003 	mov	r0, r3
  134acc:	ebff3e78 	bl	1044b4 <ueth_remap>
  134ad0:	e1a02000 	mov	r2, r0
  134ad4:	e51b300c 	ldr	r3, [fp, #-12]
  134ad8:	e58320a0 	str	r2, [r3, #160]	; 0xa0
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134adc:	e51b300c 	ldr	r3, [fp, #-12]
  134ae0:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134ae4:	e50b3010 	str	r3, [fp, #-16]
    config = &imx6ul_device->config;
  134ae8:	e51b300c 	ldr	r3, [fp, #-12]
  134aec:	e28330dc 	add	r3, r3, #220	; 0xdc
  134af0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134af4:	e51b300c 	ldr	r3, [fp, #-12]
  134af8:	e2833c01 	add	r3, r3, #256	; 0x100
  134afc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  134b00:	e51b300c 	ldr	r3, [fp, #-12]
  134b04:	e28330a8 	add	r3, r3, #168	; 0xa8
  134b08:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  134b0c:	e3a03000 	mov	r3, #0
  134b10:	e50b3008 	str	r3, [fp, #-8]
  134b14:	ea00000b 	b	134b48 <rt_imx6ul_eth_init+0xb0>
    {
        ueth_gpioinit((void *)&imx6ul_device->gpio[i], sizeof(imx6ul_device->gpio[i]));
  134b18:	e51b3008 	ldr	r3, [fp, #-8]
  134b1c:	e3a0201c 	mov	r2, #28
  134b20:	e0030392 	mul	r3, r2, r3
  134b24:	e2833e12 	add	r3, r3, #288	; 0x120
  134b28:	e51b200c 	ldr	r2, [fp, #-12]
  134b2c:	e0823003 	add	r3, r2, r3
  134b30:	e3a0101c 	mov	r1, #28
  134b34:	e1a00003 	mov	r0, r3
  134b38:	ebff3e91 	bl	104584 <ueth_gpioinit>
    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  134b3c:	e51b3008 	ldr	r3, [fp, #-8]
  134b40:	e2833001 	add	r3, r3, #1
  134b44:	e50b3008 	str	r3, [fp, #-8]
  134b48:	e51b3008 	ldr	r3, [fp, #-8]
  134b4c:	e3530008 	cmp	r3, #8
  134b50:	9afffff0 	bls	134b18 <rt_imx6ul_eth_init+0x80>
    }
    
    IOMUXC_GPR_Type *GPR1 = (IOMUXC_GPR_Type *)ueth_remap((void *)IOMUXC_GPR, UETH_REMAP, 0x1000);
  134b54:	e3a02a01 	mov	r2, #4096	; 0x1000
  134b58:	e3a01001 	mov	r1, #1
  134b5c:	e3a00901 	mov	r0, #16384	; 0x4000
  134b60:	e340020e 	movt	r0, #526	; 0x20e
  134b64:	ebff3e52 	bl	1044b4 <ueth_remap>
  134b68:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    if(imx6ul_device->mac_num == 1)
  134b6c:	e51b300c 	ldr	r3, [fp, #-12]
  134b70:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134b74:	e3530001 	cmp	r3, #1
  134b78:	1a00000c 	bne	134bb0 <rt_imx6ul_eth_init+0x118>
    {
        reg_value = GPR1->GPR1;
  134b7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134b80:	e5933004 	ldr	r3, [r3, #4]
  134b84:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK
  134b88:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134b8c:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
  134b90:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_TX_CLK_DIR(1);
  134b94:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134b98:	e3833802 	orr	r3, r3, #131072	; 0x20000
  134b9c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  134ba0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134ba4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134ba8:	e5832004 	str	r2, [r3, #4]
  134bac:	ea00000f 	b	134bf0 <rt_imx6ul_eth_init+0x158>
    }
    else if(imx6ul_device->mac_num == 2)
  134bb0:	e51b300c 	ldr	r3, [fp, #-12]
  134bb4:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134bb8:	e3530002 	cmp	r3, #2
  134bbc:	1a00000b 	bne	134bf0 <rt_imx6ul_eth_init+0x158>
    {
        reg_value = GPR1->GPR1;
  134bc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134bc4:	e5933004 	ldr	r3, [r3, #4]
  134bc8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK
  134bcc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134bd0:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  134bd4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_TX_CLK_DIR(1);
  134bd8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134bdc:	e3833701 	orr	r3, r3, #262144	; 0x40000
  134be0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  134be4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134be8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134bec:	e5832004 	str	r2, [r3, #4]
    } 

    // ENET_InitModuleClock();
    ueth_init_clock();
  134bf0:	ebff3e91 	bl	10463c <ueth_init_clock>
    ENET_GetDefaultConfig(config);
  134bf4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  134bf8:	eb00047c 	bl	135df0 <ENET_GetDefaultConfig>
    config->interrupt |= (ENET_RX_INTERRUPT);
  134bfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134c00:	e5933004 	ldr	r3, [r3, #4]
  134c04:	e3832403 	orr	r2, r3, #50331648	; 0x3000000
  134c08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134c0c:	e5832004 	str	r2, [r3, #4]
    state = enet_buffer_init(buffConfig);
  134c10:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  134c14:	ebfffee9 	bl	1347c0 <enet_buffer_init>
  134c18:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if(state != RT_EOK)
  134c1c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134c20:	e3530000 	cmp	r3, #0
  134c24:	0a000001 	beq	134c30 <rt_imx6ul_eth_init+0x198>
    {
        return state;
  134c28:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134c2c:	ea000015 	b	134c88 <rt_imx6ul_eth_init+0x1f0>
    }
    ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  134c30:	e51b300c 	ldr	r3, [fp, #-12]
  134c34:	e2832078 	add	r2, r3, #120	; 0x78
  134c38:	e3a03d52 	mov	r3, #5248	; 0x1480
  134c3c:	e34033ef 	movt	r3, #1007	; 0x3ef
  134c40:	e58d3004 	str	r3, [sp, #4]
  134c44:	e58d2000 	str	r2, [sp]
  134c48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134c4c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134c50:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134c54:	e51b0010 	ldr	r0, [fp, #-16]
  134c58:	eb000488 	bl	135e80 <ENET_Init>
    ENET_ActiveRead(base_addr);
  134c5c:	e51b0010 	ldr	r0, [fp, #-16]
  134c60:	ebfffe5c 	bl	1345d8 <ENET_ActiveRead>

    // ENET_DisableInterrupts(base_addr,ENET_RX_INTERRUPT);
    // rt_hw_interrupt_install(imx6ul_device->irq_num, (rt_isr_handler_t)ENET_DriverIRQHandler, (void *)base_addr,imx6ul_device->irq_name);     
    // rt_hw_interrupt_umask(imx6ul_device->irq_num);
#ifndef POLL_INT
    ueth_hw_interrupt_install(imx6ul_device->irq_num, (void *)imx6ul_device->enet_phy_base_addr);
  134c64:	e51b300c 	ldr	r3, [fp, #-12]
  134c68:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  134c6c:	e1a02003 	mov	r2, r3
  134c70:	e51b300c 	ldr	r3, [fp, #-12]
  134c74:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  134c78:	e1a01003 	mov	r1, r3
  134c7c:	e1a00002 	mov	r0, r2
  134c80:	ebff3eeb 	bl	104834 <ueth_hw_interrupt_install>
#endif

    return RT_EOK;
  134c84:	e3a03000 	mov	r3, #0
}
  134c88:	e1a00003 	mov	r0, r3
  134c8c:	e24bd004 	sub	sp, fp, #4
  134c90:	e8bd8800 	pop	{fp, pc}

00134c94 <rt_imx6ul_eth_control>:

static rt_err_t rt_imx6ul_eth_control(rt_device_t dev, int cmd, void *args)
{
  134c94:	e92d4800 	push	{fp, lr}
  134c98:	e28db004 	add	fp, sp, #4
  134c9c:	e24dd028 	sub	sp, sp, #40	; 0x28
  134ca0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  134ca4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  134ca8:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134cac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134cb0:	e50b3008 	str	r3, [fp, #-8]

    
    switch (cmd)
  134cb4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134cb8:	e3530001 	cmp	r3, #1
  134cbc:	0a000000 	beq	134cc4 <rt_imx6ul_eth_control+0x30>
            return -RT_ERROR;
        }
        break;

    default :
        break;
  134cc0:	ea000070 	b	134e88 <rt_imx6ul_eth_control+0x1f4>
        if (args)
  134cc4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134cc8:	e3530000 	cmp	r3, #0
  134ccc:	0a00006b 	beq	134e80 <rt_imx6ul_eth_control+0x1ec>
            rt_uint32_t uid_crc = 0;
  134cd0:	e3a03000 	mov	r3, #0
  134cd4:	e50b300c 	str	r3, [fp, #-12]
            ocotp_base = (OCOTP_Type *)ueth_remap((void*)OCOTP_BASE, UETH_REMAP, 0x1000);
  134cd8:	e3a02a01 	mov	r2, #4096	; 0x1000
  134cdc:	e3a01001 	mov	r1, #1
  134ce0:	e3a00903 	mov	r0, #49152	; 0xc000
  134ce4:	e340021b 	movt	r0, #539	; 0x21b
  134ce8:	ebff3df1 	bl	1044b4 <ueth_remap>
  134cec:	e50b0010 	str	r0, [fp, #-16]
            uid[0] = ocotp_base->CFG0;
  134cf0:	e51b3010 	ldr	r3, [fp, #-16]
  134cf4:	e5933410 	ldr	r3, [r3, #1040]	; 0x410
  134cf8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            uid[1] = ocotp_base->CFG1;
  134cfc:	e51b3010 	ldr	r3, [fp, #-16]
  134d00:	e5933420 	ldr	r3, [r3, #1056]	; 0x420
  134d04:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            ueth_remap(ocotp_base, UETH_UNMAP, 0);
  134d08:	e3a02000 	mov	r2, #0
  134d0c:	e3a01002 	mov	r1, #2
  134d10:	e51b0010 	ldr	r0, [fp, #-16]
  134d14:	ebff3de6 	bl	1044b4 <ueth_remap>
            LOG_D("UNIQUE_ID is %x%x",uid[0], uid[1]);
  134d18:	e3090bac 	movw	r0, #39852	; 0x9bac
  134d1c:	e3400014 	movt	r0, #20
  134d20:	ebff38fb 	bl	103114 <rt_kprintf>
  134d24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134d28:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134d2c:	e1a01003 	mov	r1, r3
  134d30:	e3090cb4 	movw	r0, #40116	; 0x9cb4
  134d34:	e3400014 	movt	r0, #20
  134d38:	ebff38f5 	bl	103114 <rt_kprintf>
  134d3c:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  134d40:	e3400014 	movt	r0, #20
  134d44:	ebff38f2 	bl	103114 <rt_kprintf>
            uid_crc = uid[0] - uid[1];
  134d48:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  134d4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134d50:	e0423003 	sub	r3, r2, r3
  134d54:	e50b300c 	str	r3, [fp, #-12]
            LOG_D("UNIQUE_ID change to 32 bits %x", uid_crc);
  134d58:	e3090bac 	movw	r0, #39852	; 0x9bac
  134d5c:	e3400014 	movt	r0, #20
  134d60:	ebff38eb 	bl	103114 <rt_kprintf>
  134d64:	e51b100c 	ldr	r1, [fp, #-12]
  134d68:	e3090cc8 	movw	r0, #40136	; 0x9cc8
  134d6c:	e3400014 	movt	r0, #20
  134d70:	ebff38e7 	bl	103114 <rt_kprintf>
  134d74:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  134d78:	e3400014 	movt	r0, #20
  134d7c:	ebff38e4 	bl	103114 <rt_kprintf>
            if (imx6ul_device->enet_phy_base_addr == ENET1)
  134d80:	e51b3008 	ldr	r3, [fp, #-8]
  134d84:	e593209c 	ldr	r2, [r3, #156]	; 0x9c
  134d88:	e3a03902 	mov	r3, #32768	; 0x8000
  134d8c:	e3403218 	movt	r3, #536	; 0x218
  134d90:	e1520003 	cmp	r2, r3
  134d94:	1a000019 	bne	134e00 <rt_imx6ul_eth_control+0x16c>
                imx6ul_device->dev_addr[0] = 0xa8;
  134d98:	e51b3008 	ldr	r3, [fp, #-8]
  134d9c:	e3e02057 	mvn	r2, #87	; 0x57
  134da0:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  134da4:	e51b3008 	ldr	r3, [fp, #-8]
  134da8:	e3a0205e 	mov	r2, #94	; 0x5e
  134dac:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x45;
  134db0:	e51b3008 	ldr	r3, [fp, #-8]
  134db4:	e3a02045 	mov	r2, #69	; 0x45
  134db8:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc>>16) & 0x7f;
  134dbc:	e51b300c 	ldr	r3, [fp, #-12]
  134dc0:	e1a03823 	lsr	r3, r3, #16
  134dc4:	e6ef3073 	uxtb	r3, r3
  134dc8:	e203307f 	and	r3, r3, #127	; 0x7f
  134dcc:	e6ef2073 	uxtb	r2, r3
  134dd0:	e51b3008 	ldr	r3, [fp, #-8]
  134dd4:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc>>8) & 0xff;
  134dd8:	e51b300c 	ldr	r3, [fp, #-12]
  134ddc:	e1a03423 	lsr	r3, r3, #8
  134de0:	e6ef2073 	uxtb	r2, r3
  134de4:	e51b3008 	ldr	r3, [fp, #-8]
  134de8:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  134dec:	e51b300c 	ldr	r3, [fp, #-12]
  134df0:	e6ef2073 	uxtb	r2, r3
  134df4:	e51b3008 	ldr	r3, [fp, #-8]
  134df8:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
  134dfc:	ea000018 	b	134e64 <rt_imx6ul_eth_control+0x1d0>
                imx6ul_device->dev_addr[0] = 0xa8;
  134e00:	e51b3008 	ldr	r3, [fp, #-8]
  134e04:	e3e02057 	mvn	r2, #87	; 0x57
  134e08:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  134e0c:	e51b3008 	ldr	r3, [fp, #-8]
  134e10:	e3a0205e 	mov	r2, #94	; 0x5e
  134e14:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x46;
  134e18:	e51b3008 	ldr	r3, [fp, #-8]
  134e1c:	e3a02046 	mov	r2, #70	; 0x46
  134e20:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc >> 16) & 0x7f;
  134e24:	e51b300c 	ldr	r3, [fp, #-12]
  134e28:	e1a03823 	lsr	r3, r3, #16
  134e2c:	e6ef3073 	uxtb	r3, r3
  134e30:	e203307f 	and	r3, r3, #127	; 0x7f
  134e34:	e6ef2073 	uxtb	r2, r3
  134e38:	e51b3008 	ldr	r3, [fp, #-8]
  134e3c:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc >> 8) & 0xff;
  134e40:	e51b300c 	ldr	r3, [fp, #-12]
  134e44:	e1a03423 	lsr	r3, r3, #8
  134e48:	e6ef2073 	uxtb	r2, r3
  134e4c:	e51b3008 	ldr	r3, [fp, #-8]
  134e50:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  134e54:	e51b300c 	ldr	r3, [fp, #-12]
  134e58:	e6ef2073 	uxtb	r2, r3
  134e5c:	e51b3008 	ldr	r3, [fp, #-8]
  134e60:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
            memcpy(args, imx6ul_device->dev_addr, MAX_ADDR_LEN);
  134e64:	e51b3008 	ldr	r3, [fp, #-8]
  134e68:	e2833078 	add	r3, r3, #120	; 0x78
  134e6c:	e3a02006 	mov	r2, #6
  134e70:	e1a01003 	mov	r1, r3
  134e74:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  134e78:	eb002fc7 	bl	140d9c <memcpy>
        break;
  134e7c:	ea000001 	b	134e88 <rt_imx6ul_eth_control+0x1f4>
            return -RT_ERROR;
  134e80:	e3e03000 	mvn	r3, #0
  134e84:	ea000000 	b	134e8c <rt_imx6ul_eth_control+0x1f8>
    }
    return RT_EOK;
  134e88:	e3a03000 	mov	r3, #0
}
  134e8c:	e1a00003 	mov	r0, r3
  134e90:	e24bd004 	sub	sp, fp, #4
  134e94:	e8bd8800 	pop	{fp, pc}

00134e98 <read_data_from_eth>:

static status_t read_data_from_eth(rt_device_t dev,void *read_data,uint16_t *read_length)
{
  134e98:	e92d4800 	push	{fp, lr}
  134e9c:	e28db004 	add	fp, sp, #4
  134ea0:	e24dd038 	sub	sp, sp, #56	; 0x38
  134ea4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  134ea8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  134eac:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    status_t status = 0;
  134eb0:	e3a03000 	mov	r3, #0
  134eb4:	e50b3008 	str	r3, [fp, #-8]
    uint16_t length = 0;
  134eb8:	e3a03000 	mov	r3, #0
  134ebc:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    ENET_Type *base_addr = RT_NULL;
  134ec0:	e3a03000 	mov	r3, #0
  134ec4:	e50b300c 	str	r3, [fp, #-12]
    enet_config_t *config;
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134ec8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134ecc:	e50b3010 	str	r3, [fp, #-16]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134ed0:	e51b3010 	ldr	r3, [fp, #-16]
  134ed4:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134ed8:	e50b300c 	str	r3, [fp, #-12]
    config = &imx6ul_device->config;
  134edc:	e51b3010 	ldr	r3, [fp, #-16]
  134ee0:	e28330dc 	add	r3, r3, #220	; 0xdc
  134ee4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134ee8:	e51b3010 	ldr	r3, [fp, #-16]
  134eec:	e2833c01 	add	r3, r3, #256	; 0x100
  134ef0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  134ef4:	e51b3010 	ldr	r3, [fp, #-16]
  134ef8:	e28330a8 	add	r3, r3, #168	; 0xa8
  134efc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    /* Get the Frame size */
    status = ENET_ReadFrame(base_addr,handle,config,read_data,&length);
  134f00:	e24b301e 	sub	r3, fp, #30
  134f04:	e58d3000 	str	r3, [sp]
  134f08:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134f0c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134f10:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134f14:	e51b000c 	ldr	r0, [fp, #-12]
  134f18:	eb00088e 	bl	137158 <ENET_ReadFrame>
  134f1c:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty)||(status == kStatus_ENET_RxFrameError))
  134f20:	e51b3008 	ldr	r3, [fp, #-8]
  134f24:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134f28:	e1530002 	cmp	r3, r2
  134f2c:	0a000002 	beq	134f3c <read_data_from_eth+0xa4>
  134f30:	e51b3008 	ldr	r3, [fp, #-8]
  134f34:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134f38:	1a00001a 	bne	134fa8 <read_data_from_eth+0x110>
    {
        ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  134f3c:	e3a01403 	mov	r1, #50331648	; 0x3000000
  134f40:	e51b000c 	ldr	r0, [fp, #-12]
  134f44:	ebfffdae 	bl	134604 <ENET_EnableInterrupts>
        if(status == kStatus_ENET_RxFrameError)
  134f48:	e51b3008 	ldr	r3, [fp, #-8]
  134f4c:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134f50:	1a00000e 	bne	134f90 <read_data_from_eth+0xf8>
        {
            /*recv error happend reinitialize mac*/
            ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  134f54:	e51b3010 	ldr	r3, [fp, #-16]
  134f58:	e2832078 	add	r2, r3, #120	; 0x78
  134f5c:	e3a03d52 	mov	r3, #5248	; 0x1480
  134f60:	e34033ef 	movt	r3, #1007	; 0x3ef
  134f64:	e58d3004 	str	r3, [sp, #4]
  134f68:	e58d2000 	str	r2, [sp]
  134f6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134f70:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134f74:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134f78:	e51b000c 	ldr	r0, [fp, #-12]
  134f7c:	eb0003bf 	bl	135e80 <ENET_Init>
            ENET_ActiveRead(base_addr);
  134f80:	e51b000c 	ldr	r0, [fp, #-12]
  134f84:	ebfffd93 	bl	1345d8 <ENET_ActiveRead>
            return kStatus_ENET_RxFrameError;
  134f88:	e3a03efa 	mov	r3, #4000	; 0xfa0
  134f8c:	ea000009 	b	134fb8 <read_data_from_eth+0x120>
        }
        else if(status == kStatus_ENET_RxFrameEmpty)
  134f90:	e51b3008 	ldr	r3, [fp, #-8]
  134f94:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134f98:	e1530002 	cmp	r3, r2
  134f9c:	1a000001 	bne	134fa8 <read_data_from_eth+0x110>
        {
            return kStatus_ENET_RxFrameEmpty;
  134fa0:	e3003fa2 	movw	r3, #4002	; 0xfa2
  134fa4:	ea000003 	b	134fb8 <read_data_from_eth+0x120>
        }
    }
    *read_length = length;
  134fa8:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  134fac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134fb0:	e1c320b0 	strh	r2, [r3]
    return status;
  134fb4:	e51b3008 	ldr	r3, [fp, #-8]
}
  134fb8:	e1a00003 	mov	r0, r3
  134fbc:	e24bd004 	sub	sp, fp, #4
  134fc0:	e8bd8800 	pop	{fp, pc}

00134fc4 <rt_imx6ul_eth_tx>:

#ifdef RT_USING_LWIP
/* transmit data*/
rt_err_t rt_imx6ul_eth_tx(rt_device_t dev, struct pbuf *p)
{
  134fc4:	e92d4800 	push	{fp, lr}
  134fc8:	e28db004 	add	fp, sp, #4
  134fcc:	e24dd030 	sub	sp, sp, #48	; 0x30
  134fd0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  134fd4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    struct pbuf *q = RT_NULL;
  134fd8:	e3a03000 	mov	r3, #0
  134fdc:	e50b3008 	str	r3, [fp, #-8]
    uint16_t offset = 0;
  134fe0:	e3a03000 	mov	r3, #0
  134fe4:	e14b30ba 	strh	r3, [fp, #-10]
    uint32_t last_flag = 0;
  134fe8:	e3a03000 	mov	r3, #0
  134fec:	e50b3010 	str	r3, [fp, #-16]
    status_t status;
    ENET_Type *base_addr = RT_NULL;
  134ff0:	e3a03000 	mov	r3, #0
  134ff4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    enet_handle_t *handle;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134ff8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134ffc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base_addr = imx6ul_device->enet_virtual_base_addr;
  135000:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135004:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135008:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  13500c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135010:	e2833c01 	add	r3, r3, #256	; 0x100
  135014:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(p);
  135018:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13501c:	e3530000 	cmp	r3, #0
  135020:	1a000005 	bne	13503c <rt_imx6ul_eth_tx+0x78>
  135024:	e3a02e1b 	mov	r2, #432	; 0x1b0
  135028:	e3091e94 	movw	r1, #40596	; 0x9e94
  13502c:	e3401014 	movt	r1, #20
  135030:	e3090ce8 	movw	r0, #40168	; 0x9ce8
  135034:	e3400014 	movt	r0, #20
  135038:	ebff3956 	bl	103598 <rt_assert_handler>

    for(q = p;q != RT_NULL;q=q->next)
  13503c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135040:	e50b3008 	str	r3, [fp, #-8]
  135044:	ea000020 	b	1350cc <rt_imx6ul_eth_tx+0x108>
    {
        if(q->next == RT_NULL)
  135048:	e51b3008 	ldr	r3, [fp, #-8]
  13504c:	e5933000 	ldr	r3, [r3]
  135050:	e3530000 	cmp	r3, #0
  135054:	1a000002 	bne	135064 <rt_imx6ul_eth_tx+0xa0>
        {
            last_flag = 1;
  135058:	e3a03001 	mov	r3, #1
  13505c:	e50b3010 	str	r3, [fp, #-16]
  135060:	ea000001 	b	13506c <rt_imx6ul_eth_tx+0xa8>
        }
        else
        {
            last_flag = 0;
  135064:	e3a03000 	mov	r3, #0
  135068:	e50b3010 	str	r3, [fp, #-16]
        }
        status = ENET_SendFrame(base_addr, handle, q->payload, q->len,last_flag);
  13506c:	e51b3008 	ldr	r3, [fp, #-8]
  135070:	e5932004 	ldr	r2, [r3, #4]
  135074:	e51b3008 	ldr	r3, [fp, #-8]
  135078:	e1d310ba 	ldrh	r1, [r3, #10]
  13507c:	e51b3010 	ldr	r3, [fp, #-16]
  135080:	e58d3000 	str	r3, [sp]
  135084:	e1a03001 	mov	r3, r1
  135088:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13508c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  135090:	eb0008fb 	bl	137484 <ENET_SendFrame>
  135094:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0

        offset = offset + q->len;
  135098:	e51b3008 	ldr	r3, [fp, #-8]
  13509c:	e1d320ba 	ldrh	r2, [r3, #10]
  1350a0:	e15b30ba 	ldrh	r3, [fp, #-10]
  1350a4:	e0823003 	add	r3, r2, r3
  1350a8:	e14b30ba 	strh	r3, [fp, #-10]
        if(status == kStatus_Success)
  1350ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1350b0:	e3530000 	cmp	r3, #0
  1350b4:	0a000001 	beq	1350c0 <rt_imx6ul_eth_tx+0xfc>
        {
        }
        else
        {
            return RT_ERROR;
  1350b8:	e3a03001 	mov	r3, #1
  1350bc:	ea000015 	b	135118 <rt_imx6ul_eth_tx+0x154>
    for(q = p;q != RT_NULL;q=q->next)
  1350c0:	e51b3008 	ldr	r3, [fp, #-8]
  1350c4:	e5933000 	ldr	r3, [r3]
  1350c8:	e50b3008 	str	r3, [fp, #-8]
  1350cc:	e51b3008 	ldr	r3, [fp, #-8]
  1350d0:	e3530000 	cmp	r3, #0
  1350d4:	1affffdb 	bne	135048 <rt_imx6ul_eth_tx+0x84>
        }
    }
    if(offset > ENET_FRAME_MAX_FRAMELEN)
  1350d8:	e15b30ba 	ldrh	r3, [fp, #-10]
  1350dc:	e30025ee 	movw	r2, #1518	; 0x5ee
  1350e0:	e1530002 	cmp	r3, r2
  1350e4:	9a00000a 	bls	135114 <rt_imx6ul_eth_tx+0x150>
    {
        LOG_E("net error send length %d exceed max length",offset);
  1350e8:	e3090bec 	movw	r0, #39916	; 0x9bec
  1350ec:	e3400014 	movt	r0, #20
  1350f0:	ebff3807 	bl	103114 <rt_kprintf>
  1350f4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1350f8:	e1a01003 	mov	r1, r3
  1350fc:	e3090cec 	movw	r0, #40172	; 0x9cec
  135100:	e3400014 	movt	r0, #20
  135104:	ebff3802 	bl	103114 <rt_kprintf>
  135108:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  13510c:	e3400014 	movt	r0, #20
  135110:	ebff37ff 	bl	103114 <rt_kprintf>
    }
    return RT_EOK;
  135114:	e3a03000 	mov	r3, #0
}
  135118:	e1a00003 	mov	r0, r3
  13511c:	e24bd004 	sub	sp, fp, #4
  135120:	e8bd8800 	pop	{fp, pc}

00135124 <rt_imx6ul_eth_rx>:

struct pbuf *rt_imx6ul_eth_rx(rt_device_t dev)
{
  135124:	e92d4800 	push	{fp, lr}
  135128:	e28db004 	add	fp, sp, #4
  13512c:	e24dd018 	sub	sp, sp, #24
  135130:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    static struct pbuf *p_s = RT_NULL;
    struct pbuf *p = RT_NULL;
  135134:	e3a03000 	mov	r3, #0
  135138:	e50b3008 	str	r3, [fp, #-8]
    status_t status;
    uint16_t length = 0;
  13513c:	e3a03000 	mov	r3, #0
  135140:	e14b30be 	strh	r3, [fp, #-14]

    if(p_s == RT_NULL)
  135144:	e30e3c04 	movw	r3, #60420	; 0xec04
  135148:	e3403014 	movt	r3, #20
  13514c:	e5933000 	ldr	r3, [r3]
  135150:	e3530000 	cmp	r3, #0
  135154:	1a00000e 	bne	135194 <rt_imx6ul_eth_rx+0x70>
    {
        p_s = pbuf_alloc(PBUF_RAW, ENET_FRAME_MAX_FRAMELEN, PBUF_POOL);
  135158:	e3a02003 	mov	r2, #3
  13515c:	e30015ee 	movw	r1, #1518	; 0x5ee
  135160:	e3a00004 	mov	r0, #4
  135164:	ebff944d 	bl	11a2a0 <pbuf_alloc>
  135168:	e1a02000 	mov	r2, r0
  13516c:	e30e3c04 	movw	r3, #60420	; 0xec04
  135170:	e3403014 	movt	r3, #20
  135174:	e5832000 	str	r2, [r3]
        if(p_s == RT_NULL)
  135178:	e30e3c04 	movw	r3, #60420	; 0xec04
  13517c:	e3403014 	movt	r3, #20
  135180:	e5933000 	ldr	r3, [r3]
  135184:	e3530000 	cmp	r3, #0
  135188:	1a000001 	bne	135194 <rt_imx6ul_eth_rx+0x70>
        {
            return RT_NULL;
  13518c:	e3a03000 	mov	r3, #0
  135190:	ea00002f 	b	135254 <rt_imx6ul_eth_rx+0x130>
        }
    }
    p = p_s;
  135194:	e30e3c04 	movw	r3, #60420	; 0xec04
  135198:	e3403014 	movt	r3, #20
  13519c:	e5933000 	ldr	r3, [r3]
  1351a0:	e50b3008 	str	r3, [fp, #-8]
    status = read_data_from_eth(dev,p->payload,&length);
  1351a4:	e51b3008 	ldr	r3, [fp, #-8]
  1351a8:	e5933004 	ldr	r3, [r3, #4]
  1351ac:	e24b200e 	sub	r2, fp, #14
  1351b0:	e1a01003 	mov	r1, r3
  1351b4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1351b8:	ebffff36 	bl	134e98 <read_data_from_eth>
  1351bc:	e50b000c 	str	r0, [fp, #-12]
    if(status == kStatus_ENET_RxFrameEmpty)
  1351c0:	e51b300c 	ldr	r3, [fp, #-12]
  1351c4:	e3002fa2 	movw	r2, #4002	; 0xfa2
  1351c8:	e1530002 	cmp	r3, r2
  1351cc:	1a000001 	bne	1351d8 <rt_imx6ul_eth_rx+0xb4>
    {
        return RT_NULL;
  1351d0:	e3a03000 	mov	r3, #0
  1351d4:	ea00001e 	b	135254 <rt_imx6ul_eth_rx+0x130>
    }
    else if(status == kStatus_ENET_RxFrameError)
  1351d8:	e51b300c 	ldr	r3, [fp, #-12]
  1351dc:	e3530efa 	cmp	r3, #4000	; 0xfa0
  1351e0:	1a000001 	bne	1351ec <rt_imx6ul_eth_rx+0xc8>
    {
        return RT_NULL;
  1351e4:	e3a03000 	mov	r3, #0
  1351e8:	ea000019 	b	135254 <rt_imx6ul_eth_rx+0x130>
    }
    if(length > ENET_FRAME_MAX_FRAMELEN)
  1351ec:	e15b30be 	ldrh	r3, [fp, #-14]
  1351f0:	e30025ee 	movw	r2, #1518	; 0x5ee
  1351f4:	e1530002 	cmp	r3, r2
  1351f8:	9a00000c 	bls	135230 <rt_imx6ul_eth_rx+0x10c>
    {
        LOG_E("net error recv length %d exceed max length",length);
  1351fc:	e3090bec 	movw	r0, #39916	; 0x9bec
  135200:	e3400014 	movt	r0, #20
  135204:	ebff37c2 	bl	103114 <rt_kprintf>
  135208:	e15b30be 	ldrh	r3, [fp, #-14]
  13520c:	e1a01003 	mov	r1, r3
  135210:	e3090d18 	movw	r0, #40216	; 0x9d18
  135214:	e3400014 	movt	r0, #20
  135218:	ebff37bd 	bl	103114 <rt_kprintf>
  13521c:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  135220:	e3400014 	movt	r0, #20
  135224:	ebff37ba 	bl	103114 <rt_kprintf>
        return RT_NULL;
  135228:	e3a03000 	mov	r3, #0
  13522c:	ea000008 	b	135254 <rt_imx6ul_eth_rx+0x130>
    }
    pbuf_realloc(p, length);
  135230:	e15b30be 	ldrh	r3, [fp, #-14]
  135234:	e1a01003 	mov	r1, r3
  135238:	e51b0008 	ldr	r0, [fp, #-8]
  13523c:	ebff95d5 	bl	11a998 <pbuf_realloc>
    p_s = RT_NULL;
  135240:	e30e3c04 	movw	r3, #60420	; 0xec04
  135244:	e3403014 	movt	r3, #20
  135248:	e3a02000 	mov	r2, #0
  13524c:	e5832000 	str	r2, [r3]
    return p;
  135250:	e51b3008 	ldr	r3, [fp, #-8]
}
  135254:	e1a00003 	mov	r0, r3
  135258:	e24bd004 	sub	sp, fp, #4
  13525c:	e8bd8800 	pop	{fp, pc}

00135260 <rt_imx6ul_eth_open>:
#endif

static rt_err_t rt_imx6ul_eth_open(rt_device_t dev, rt_uint16_t oflag)
{
  135260:	e92d4800 	push	{fp, lr}
  135264:	e28db004 	add	fp, sp, #4
  135268:	e24dd010 	sub	sp, sp, #16
  13526c:	e50b0010 	str	r0, [fp, #-16]
  135270:	e1a03001 	mov	r3, r1
  135274:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  135278:	e51b3010 	ldr	r3, [fp, #-16]
  13527c:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  135280:	e51b3008 	ldr	r3, [fp, #-8]
  135284:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135288:	e50b300c 	str	r3, [fp, #-12]
    ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  13528c:	e3a01403 	mov	r1, #50331648	; 0x3000000
  135290:	e51b000c 	ldr	r0, [fp, #-12]
  135294:	ebfffcda 	bl	134604 <ENET_EnableInterrupts>

    return RT_EOK;
  135298:	e3a03000 	mov	r3, #0
}
  13529c:	e1a00003 	mov	r0, r3
  1352a0:	e24bd004 	sub	sp, fp, #4
  1352a4:	e8bd8800 	pop	{fp, pc}

001352a8 <rt_imx6ul_eth_close>:

static rt_err_t rt_imx6ul_eth_close(rt_device_t dev)
{
  1352a8:	e92d4800 	push	{fp, lr}
  1352ac:	e28db004 	add	fp, sp, #4
  1352b0:	e24dd010 	sub	sp, sp, #16
  1352b4:	e50b0010 	str	r0, [fp, #-16]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  1352b8:	e51b3010 	ldr	r3, [fp, #-16]
  1352bc:	e50b3008 	str	r3, [fp, #-8]
    ENET_DisableInterrupts(imx6ul_device->enet_virtual_base_addr,ENET_RX_INTERRUPT);
  1352c0:	e51b3008 	ldr	r3, [fp, #-8]
  1352c4:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  1352c8:	e3a01403 	mov	r1, #50331648	; 0x3000000
  1352cc:	e1a00003 	mov	r0, r3
  1352d0:	ebfffcda 	bl	134640 <ENET_DisableInterrupts>
    return RT_EOK;
  1352d4:	e3a03000 	mov	r3, #0
}
  1352d8:	e1a00003 	mov	r0, r3
  1352dc:	e24bd004 	sub	sp, fp, #4
  1352e0:	e8bd8800 	pop	{fp, pc}

001352e4 <rt_imx6ul_eth_read>:

static rt_size_t rt_imx6ul_eth_read(rt_device_t dev, rt_off_t pos, void *buffer, rt_size_t size)
{
  1352e4:	e92d4800 	push	{fp, lr}
  1352e8:	e28db004 	add	fp, sp, #4
  1352ec:	e24dd018 	sub	sp, sp, #24
  1352f0:	e50b0010 	str	r0, [fp, #-16]
  1352f4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1352f8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1352fc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint16_t length = 0;
  135300:	e3a03000 	mov	r3, #0
  135304:	e14b30ba 	strh	r3, [fp, #-10]
    status_t status;
    if(!buffer) 
  135308:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13530c:	e3530000 	cmp	r3, #0
  135310:	1a00000c 	bne	135348 <rt_imx6ul_eth_read+0x64>
    {
        LOG_E("eth read invalid parameter buffer %p size %d",buffer,size);
  135314:	e3090bec 	movw	r0, #39916	; 0x9bec
  135318:	e3400014 	movt	r0, #20
  13531c:	ebff377c 	bl	103114 <rt_kprintf>
  135320:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  135324:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  135328:	e3090d44 	movw	r0, #40260	; 0x9d44
  13532c:	e3400014 	movt	r0, #20
  135330:	ebff3777 	bl	103114 <rt_kprintf>
  135334:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  135338:	e3400014 	movt	r0, #20
  13533c:	ebff3774 	bl	103114 <rt_kprintf>
        return 0;
  135340:	e3a03000 	mov	r3, #0
  135344:	ea00000f 	b	135388 <rt_imx6ul_eth_read+0xa4>
    }
    status = read_data_from_eth(dev,buffer,&length);
  135348:	e24b300a 	sub	r3, fp, #10
  13534c:	e1a02003 	mov	r2, r3
  135350:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  135354:	e51b0010 	ldr	r0, [fp, #-16]
  135358:	ebfffece 	bl	134e98 <read_data_from_eth>
  13535c:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty) || (status == kStatus_ENET_RxFrameError))
  135360:	e51b3008 	ldr	r3, [fp, #-8]
  135364:	e3002fa2 	movw	r2, #4002	; 0xfa2
  135368:	e1530002 	cmp	r3, r2
  13536c:	0a000002 	beq	13537c <rt_imx6ul_eth_read+0x98>
  135370:	e51b3008 	ldr	r3, [fp, #-8]
  135374:	e3530efa 	cmp	r3, #4000	; 0xfa0
  135378:	1a000001 	bne	135384 <rt_imx6ul_eth_read+0xa0>
    {
        return 0;
  13537c:	e3a03000 	mov	r3, #0
  135380:	ea000000 	b	135388 <rt_imx6ul_eth_read+0xa4>
    }
    return (rt_size_t)length;
  135384:	e15b30ba 	ldrh	r3, [fp, #-10]
}
  135388:	e1a00003 	mov	r0, r3
  13538c:	e24bd004 	sub	sp, fp, #4
  135390:	e8bd8800 	pop	{fp, pc}

00135394 <rt_imx6ul_eth_write>:

static rt_size_t rt_imx6ul_eth_write(rt_device_t dev, rt_off_t pos, const void *buffer, rt_size_t size)
{
  135394:	e92d4800 	push	{fp, lr}
  135398:	e28db004 	add	fp, sp, #4
  13539c:	e24dd028 	sub	sp, sp, #40	; 0x28
  1353a0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1353a4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1353a8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1353ac:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    status_t status;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  1353b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1353b4:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  1353b8:	e51b3008 	ldr	r3, [fp, #-8]
  1353bc:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  1353c0:	e50b300c 	str	r3, [fp, #-12]
    enet_handle_t *handle = &imx6ul_device->handle;
  1353c4:	e51b3008 	ldr	r3, [fp, #-8]
  1353c8:	e2833c01 	add	r3, r3, #256	; 0x100
  1353cc:	e50b3010 	str	r3, [fp, #-16]

    if((!buffer) || (size > ENET_FRAME_MAX_FRAMELEN))
  1353d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1353d4:	e3530000 	cmp	r3, #0
  1353d8:	0a000003 	beq	1353ec <rt_imx6ul_eth_write+0x58>
  1353dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1353e0:	e30025ee 	movw	r2, #1518	; 0x5ee
  1353e4:	e1530002 	cmp	r3, r2
  1353e8:	9a00000a 	bls	135418 <rt_imx6ul_eth_write+0x84>
    {
        LOG_E("eth write invalid parameter buffer %p size %d",buffer,size);
  1353ec:	e3090bec 	movw	r0, #39916	; 0x9bec
  1353f0:	e3400014 	movt	r0, #20
  1353f4:	ebff3746 	bl	103114 <rt_kprintf>
  1353f8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1353fc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  135400:	e3090d74 	movw	r0, #40308	; 0x9d74
  135404:	e3400014 	movt	r0, #20
  135408:	ebff3741 	bl	103114 <rt_kprintf>
  13540c:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  135410:	e3400014 	movt	r0, #20
  135414:	ebff373e 	bl	103114 <rt_kprintf>
    }
    status = ENET_SendFrame(base_addr, handle, buffer, size,1);
  135418:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  13541c:	e6ff2073 	uxth	r2, r3
  135420:	e3a03001 	mov	r3, #1
  135424:	e58d3000 	str	r3, [sp]
  135428:	e1a03002 	mov	r3, r2
  13542c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  135430:	e51b1010 	ldr	r1, [fp, #-16]
  135434:	e51b000c 	ldr	r0, [fp, #-12]
  135438:	eb000811 	bl	137484 <ENET_SendFrame>
  13543c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if(status != kStatus_Success)
  135440:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135444:	e3530000 	cmp	r3, #0
  135448:	0a000001 	beq	135454 <rt_imx6ul_eth_write+0xc0>
    {
        return RT_ERROR;
  13544c:	e3a03001 	mov	r3, #1
  135450:	ea000000 	b	135458 <rt_imx6ul_eth_write+0xc4>
    }

    return RT_EOK;
  135454:	e3a03000 	mov	r3, #0
}
  135458:	e1a00003 	mov	r0, r3
  13545c:	e24bd004 	sub	sp, fp, #4
  135460:	e8bd8800 	pop	{fp, pc}

00135464 <get_instance_by_base>:

int32_t get_instance_by_base(void *base)
{
  135464:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135468:	e28db000 	add	fp, sp, #0
  13546c:	e24dd014 	sub	sp, sp, #20
  135470:	e50b0010 	str	r0, [fp, #-16]
    int32_t i = 0;
  135474:	e3a03000 	mov	r3, #0
  135478:	e50b3008 	str	r3, [fp, #-8]
    int32_t instance = 0;
  13547c:	e3a03000 	mov	r3, #0
  135480:	e50b300c 	str	r3, [fp, #-12]
    for(i = 0; i < DEV_ENET_MAX; i ++)
  135484:	e3a03000 	mov	r3, #0
  135488:	e50b3008 	str	r3, [fp, #-8]
  13548c:	ea00000d 	b	1354c8 <get_instance_by_base+0x64>
    {
        if((void *)_imx6ul_eth_device[i].enet_virtual_base_addr == base)
  135490:	e30d3078 	movw	r3, #53368	; 0xd078
  135494:	e3403014 	movt	r3, #20
  135498:	e51b2008 	ldr	r2, [fp, #-8]
  13549c:	e3a01f8a 	mov	r1, #552	; 0x228
  1354a0:	e0020291 	mul	r2, r1, r2
  1354a4:	e0833002 	add	r3, r3, r2
  1354a8:	e28330a0 	add	r3, r3, #160	; 0xa0
  1354ac:	e5933000 	ldr	r3, [r3]
  1354b0:	e51b2010 	ldr	r2, [fp, #-16]
  1354b4:	e1520003 	cmp	r2, r3
  1354b8:	0a000006 	beq	1354d8 <get_instance_by_base+0x74>
    for(i = 0; i < DEV_ENET_MAX; i ++)
  1354bc:	e51b3008 	ldr	r3, [fp, #-8]
  1354c0:	e2833001 	add	r3, r3, #1
  1354c4:	e50b3008 	str	r3, [fp, #-8]
  1354c8:	e51b3008 	ldr	r3, [fp, #-8]
  1354cc:	e3530000 	cmp	r3, #0
  1354d0:	daffffee 	ble	135490 <get_instance_by_base+0x2c>
  1354d4:	ea000000 	b	1354dc <get_instance_by_base+0x78>
        {
            break;
  1354d8:	e320f000 	nop	{0}
        }
    }
    if(i == DEV_ENET_MAX)
  1354dc:	e51b3008 	ldr	r3, [fp, #-8]
  1354e0:	e3530001 	cmp	r3, #1
  1354e4:	1a000001 	bne	1354f0 <get_instance_by_base+0x8c>
    {
        return -1;
  1354e8:	e3e03000 	mvn	r3, #0
  1354ec:	ea000000 	b	1354f4 <get_instance_by_base+0x90>
    }
    return instance;
  1354f0:	e51b300c 	ldr	r3, [fp, #-12]
    
}
  1354f4:	e1a00003 	mov	r0, r3
  1354f8:	e28bd000 	add	sp, fp, #0
  1354fc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135500:	e12fff1e 	bx	lr

00135504 <rx_enet_callback>:

void rx_enet_callback(void *base)
{
  135504:	e92d4800 	push	{fp, lr}
  135508:	e28db004 	add	fp, sp, #4
  13550c:	e24dd010 	sub	sp, sp, #16
  135510:	e50b0010 	str	r0, [fp, #-16]
    int32_t instance = 0;
  135514:	e3a03000 	mov	r3, #0
  135518:	e50b3008 	str	r3, [fp, #-8]
    instance = get_instance_by_base(base);
  13551c:	e51b0010 	ldr	r0, [fp, #-16]
  135520:	ebffffcf 	bl	135464 <get_instance_by_base>
  135524:	e50b0008 	str	r0, [fp, #-8]
    if(instance == -1)
  135528:	e51b3008 	ldr	r3, [fp, #-8]
  13552c:	e3730001 	cmn	r3, #1
  135530:	1a000009 	bne	13555c <rx_enet_callback+0x58>
    {
        LOG_E("interrput match base addr error");
  135534:	e3090bec 	movw	r0, #39916	; 0x9bec
  135538:	e3400014 	movt	r0, #20
  13553c:	ebff36f4 	bl	103114 <rt_kprintf>
  135540:	e3090da4 	movw	r0, #40356	; 0x9da4
  135544:	e3400014 	movt	r0, #20
  135548:	ebff36f1 	bl	103114 <rt_kprintf>
  13554c:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  135550:	e3400014 	movt	r0, #20
  135554:	ebff36ee 	bl	103114 <rt_kprintf>
        return;
  135558:	ea00000a 	b	135588 <rx_enet_callback+0x84>
    }
    ENET_DisableInterrupts(base,ENET_RX_INTERRUPT);
  13555c:	e3a01403 	mov	r1, #50331648	; 0x3000000
  135560:	e51b0010 	ldr	r0, [fp, #-16]
  135564:	ebfffc35 	bl	134640 <ENET_DisableInterrupts>
    eth_device_ready(&(_imx6ul_eth_device[instance].parent));
  135568:	e51b3008 	ldr	r3, [fp, #-8]
  13556c:	e3a02f8a 	mov	r2, #552	; 0x228
  135570:	e0020392 	mul	r2, r2, r3
  135574:	e30d3078 	movw	r3, #53368	; 0xd078
  135578:	e3403014 	movt	r3, #20
  13557c:	e0823003 	add	r3, r2, r3
  135580:	e1a00003 	mov	r0, r3
  135584:	ebffd175 	bl	129b60 <eth_device_ready>
}
  135588:	e24bd004 	sub	sp, fp, #4
  13558c:	e8bd8800 	pop	{fp, pc}

00135590 <tx_enet_callback>:

void tx_enet_callback(void *base)
{
  135590:	e92d4800 	push	{fp, lr}
  135594:	e28db004 	add	fp, sp, #4
  135598:	e24dd008 	sub	sp, sp, #8
  13559c:	e50b0008 	str	r0, [fp, #-8]
    ENET_DisableInterrupts(base,ENET_TX_INTERRUPT);
  1355a0:	e3a01303 	mov	r1, #201326592	; 0xc000000
  1355a4:	e51b0008 	ldr	r0, [fp, #-8]
  1355a8:	ebfffc24 	bl	134640 <ENET_DisableInterrupts>
}
  1355ac:	e320f000 	nop	{0}
  1355b0:	e24bd004 	sub	sp, fp, #4
  1355b4:	e8bd8800 	pop	{fp, pc}

001355b8 <ueth_rx_interrupt_handle>:

static void* ueth_rx_interrupt_handle(ENET_Type *base)
{
  1355b8:	e92d4800 	push	{fp, lr}
  1355bc:	e28db004 	add	fp, sp, #4
  1355c0:	e24dd010 	sub	sp, sp, #16
  1355c4:	e50b0010 	str	r0, [fp, #-16]
    /* Clear the transmit interrupt event. */
    base->EIR = ENET_RX_INTERRUPT;
  1355c8:	e51b3010 	ldr	r3, [fp, #-16]
  1355cc:	e3a02403 	mov	r2, #50331648	; 0x3000000
  1355d0:	e5832004 	str	r2, [r3, #4]
    int32_t instance = 0;
  1355d4:	e3a03000 	mov	r3, #0
  1355d8:	e50b3008 	str	r3, [fp, #-8]
    instance = get_instance_by_base(base);
  1355dc:	e51b0010 	ldr	r0, [fp, #-16]
  1355e0:	ebffff9f 	bl	135464 <get_instance_by_base>
  1355e4:	e50b0008 	str	r0, [fp, #-8]
    if(instance == -1)
  1355e8:	e51b3008 	ldr	r3, [fp, #-8]
  1355ec:	e3730001 	cmn	r3, #1
  1355f0:	1a00000a 	bne	135620 <ueth_rx_interrupt_handle+0x68>
    {
        LOG_E("interrput match base addr error");
  1355f4:	e3090bec 	movw	r0, #39916	; 0x9bec
  1355f8:	e3400014 	movt	r0, #20
  1355fc:	ebff36c4 	bl	103114 <rt_kprintf>
  135600:	e3090da4 	movw	r0, #40356	; 0x9da4
  135604:	e3400014 	movt	r0, #20
  135608:	ebff36c1 	bl	103114 <rt_kprintf>
  13560c:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  135610:	e3400014 	movt	r0, #20
  135614:	ebff36be 	bl	103114 <rt_kprintf>
        return RT_NULL;
  135618:	e3a03000 	mov	r3, #0
  13561c:	ea000005 	b	135638 <ueth_rx_interrupt_handle+0x80>
    }
    return (void*)&(_imx6ul_eth_device[instance].parent);
  135620:	e51b3008 	ldr	r3, [fp, #-8]
  135624:	e3a02f8a 	mov	r2, #552	; 0x228
  135628:	e0020392 	mul	r2, r2, r3
  13562c:	e30d3078 	movw	r3, #53368	; 0xd078
  135630:	e3403014 	movt	r3, #20
  135634:	e0823003 	add	r3, r2, r3
}
  135638:	e1a00003 	mov	r0, r3
  13563c:	e24bd004 	sub	sp, fp, #4
  135640:	e8bd8800 	pop	{fp, pc}

00135644 <ueth_rx_interrupt_detect>:

int eth_init_done = 0;
void* ueth_rx_interrupt_detect(void) {
  135644:	e92d4800 	push	{fp, lr}
  135648:	e28db004 	add	fp, sp, #4
  13564c:	e24dd008 	sub	sp, sp, #8
    ENET_Type *base = _imx6ul_eth_device[0].enet_virtual_base_addr;
  135650:	e30d3078 	movw	r3, #53368	; 0xd078
  135654:	e3403014 	movt	r3, #20
  135658:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  13565c:	e50b3008 	str	r3, [fp, #-8]
            ENET_DisableInterrupts(base, ENET_RX_INTERRUPT);
            return ueth_rx_interrupt_handle(base);
        }
    }
#else
    ueth_int_recv();
  135660:	ebff3b5d 	bl	1043dc <ueth_int_recv>
    return ueth_rx_interrupt_handle(base);
  135664:	e51b0008 	ldr	r0, [fp, #-8]
  135668:	ebffffd2 	bl	1355b8 <ueth_rx_interrupt_handle>
  13566c:	e1a03000 	mov	r3, r0
#endif
}
  135670:	e1a00003 	mov	r0, r3
  135674:	e24bd004 	sub	sp, fp, #4
  135678:	e8bd8800 	pop	{fp, pc}

0013567c <phy_detect_thread_entry>:

/*phy link detect thread*/
static void phy_detect_thread_entry(void *param)
{
  13567c:	e92d4800 	push	{fp, lr}
  135680:	e28db004 	add	fp, sp, #4
  135684:	e24dd020 	sub	sp, sp, #32
  135688:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    bool link = false;
  13568c:	e3a03000 	mov	r3, #0
  135690:	e54b300d 	strb	r3, [fp, #-13]
    phy_speed_t speed;
    phy_duplex_t duplex;
    ENET_Type *base_addr = RT_NULL;
  135694:	e3a03000 	mov	r3, #0
  135698:	e50b3008 	str	r3, [fp, #-8]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)param;
  13569c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1356a0:	e50b300c 	str	r3, [fp, #-12]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  1356a4:	e51b300c 	ldr	r3, [fp, #-12]
  1356a8:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  1356ac:	e50b3008 	str	r3, [fp, #-8]

    phy_reset(imx6ul_device->phy_base_addr,imx6ul_device->phy_gpio_pin);
  1356b0:	e51b300c 	ldr	r3, [fp, #-12]
  1356b4:	e593221c 	ldr	r2, [r3, #540]	; 0x21c
  1356b8:	e51b300c 	ldr	r3, [fp, #-12]
  1356bc:	e5933220 	ldr	r3, [r3, #544]	; 0x220
  1356c0:	e1a01003 	mov	r1, r3
  1356c4:	e1a00002 	mov	r0, r2
  1356c8:	eb000a8e 	bl	138108 <phy_reset>
    PHY_Init(base_addr, imx6ul_device->phy_num, SYS_CLOCK_HZ,imx6ul_device->phy_id);
  1356cc:	e51b300c 	ldr	r3, [fp, #-12]
  1356d0:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1356d4:	e1a01003 	mov	r1, r3
  1356d8:	e51b300c 	ldr	r3, [fp, #-12]
  1356dc:	e5933224 	ldr	r3, [r3, #548]	; 0x224
  1356e0:	e3a02d52 	mov	r2, #5248	; 0x1480
  1356e4:	e34023ef 	movt	r2, #1007	; 0x3ef
  1356e8:	e51b0008 	ldr	r0, [fp, #-8]
  1356ec:	eb000af9 	bl	1382d8 <PHY_Init>
    PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  1356f0:	e51b300c 	ldr	r3, [fp, #-12]
  1356f4:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1356f8:	e1a01003 	mov	r1, r3
  1356fc:	e24b300d 	sub	r3, fp, #13
  135700:	e1a02003 	mov	r2, r3
  135704:	e51b0008 	ldr	r0, [fp, #-8]
  135708:	eb000be5 	bl	1386a4 <PHY_GetLinkStatus>
    if (link)
  13570c:	e55b300d 	ldrb	r3, [fp, #-13]
  135710:	e3530000 	cmp	r3, #0
  135714:	0a00000d 	beq	135750 <phy_detect_thread_entry+0xd4>
    {
        /* Get the actual PHY link speed. */
        PHY_GetLinkSpeedDuplex(base_addr, imx6ul_device->phy_num, &speed, &duplex);
  135718:	e51b300c 	ldr	r3, [fp, #-12]
  13571c:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  135720:	e1a01003 	mov	r1, r3
  135724:	e24b3018 	sub	r3, fp, #24
  135728:	e24b2014 	sub	r2, fp, #20
  13572c:	e51b0008 	ldr	r0, [fp, #-8]
  135730:	eb000c04 	bl	138748 <PHY_GetLinkSpeedDuplex>
        /* Change the MII speed and duplex for actual link status. */
        imx6ul_device->config.miiSpeed = (enet_mii_speed_t)speed;
  135734:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135738:	e51b300c 	ldr	r3, [fp, #-12]
  13573c:	e58320ec 	str	r2, [r3, #236]	; 0xec
        imx6ul_device->config.miiDuplex = (enet_mii_duplex_t)duplex;
  135740:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  135744:	e51b300c 	ldr	r3, [fp, #-12]
  135748:	e58320f0 	str	r2, [r3, #240]	; 0xf0
  13574c:	ea000008 	b	135774 <phy_detect_thread_entry+0xf8>
    }
    else
    {
        LOG_W("PHY Link down, please check the cable connection and link partner setting.");
  135750:	e3090dc4 	movw	r0, #40388	; 0x9dc4
  135754:	e3400014 	movt	r0, #20
  135758:	ebff366d 	bl	103114 <rt_kprintf>
  13575c:	e3090dd8 	movw	r0, #40408	; 0x9dd8
  135760:	e3400014 	movt	r0, #20
  135764:	ebff366a 	bl	103114 <rt_kprintf>
  135768:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  13576c:	e3400014 	movt	r0, #20
  135770:	ebff3667 	bl	103114 <rt_kprintf>
    }

    while(1)
    {
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  135774:	e51b300c 	ldr	r3, [fp, #-12]
  135778:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  13577c:	e1a01003 	mov	r1, r3
  135780:	e24b300d 	sub	r3, fp, #13
  135784:	e1a02003 	mov	r2, r3
  135788:	e51b0008 	ldr	r0, [fp, #-8]
  13578c:	eb000bc4 	bl	1386a4 <PHY_GetLinkStatus>
        if(link != imx6ul_device->phy_link_status)
  135790:	e55b300d 	ldrb	r3, [fp, #-13]
  135794:	e1a02003 	mov	r2, r3
  135798:	e51b300c 	ldr	r3, [fp, #-12]
  13579c:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  1357a0:	e1520003 	cmp	r2, r3
  1357a4:	0a00000b 	beq	1357d8 <phy_detect_thread_entry+0x15c>
        {
            if(link == true)
  1357a8:	e55b300d 	ldrb	r3, [fp, #-13]
  1357ac:	e3530000 	cmp	r3, #0
  1357b0:	0a000004 	beq	1357c8 <phy_detect_thread_entry+0x14c>
            {
                PHY_StartNegotiation(base_addr,imx6ul_device->phy_num);
  1357b4:	e51b300c 	ldr	r3, [fp, #-12]
  1357b8:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1357bc:	e1a01003 	mov	r1, r3
  1357c0:	e51b0008 	ldr	r0, [fp, #-8]
  1357c4:	eb000a74 	bl	13819c <PHY_StartNegotiation>
                
            }            
            imx6ul_eth_link_change(imx6ul_device,link);
  1357c8:	e55b300d 	ldrb	r3, [fp, #-13]
  1357cc:	e1a01003 	mov	r1, r3
  1357d0:	e51b000c 	ldr	r0, [fp, #-12]
  1357d4:	ebfffba9 	bl	134680 <imx6ul_eth_link_change>
        }
        rt_thread_mdelay(DETECT_DELAY_ONE_SECOND);
  1357d8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
  1357dc:	ebff31a6 	bl	101e7c <rt_thread_mdelay>
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  1357e0:	eaffffe3 	b	135774 <phy_detect_thread_entry+0xf8>

001357e4 <imx6ul_eth_init>:
    rt_imx6ul_eth_write,
    rt_imx6ul_eth_control,
};

int imx6ul_eth_init(int eth_select, const char ** eth_name)
{
  1357e4:	e92d4800 	push	{fp, lr}
  1357e8:	e28db004 	add	fp, sp, #4
  1357ec:	e24dd030 	sub	sp, sp, #48	; 0x30
  1357f0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1357f4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    rt_err_t state = RT_EOK;
  1357f8:	e3a03000 	mov	r3, #0
  1357fc:	e50b3008 	str	r3, [fp, #-8]
    char link_detect[10];
    char mac_addr[MAX_ADDR_LEN];

    if (ipc_service_init() == RT_ERROR)
  135800:	ebff3ac0 	bl	104308 <ipc_service_init>
  135804:	e1a03000 	mov	r3, r0
  135808:	e3530001 	cmp	r3, #1
  13580c:	1a000001 	bne	135818 <imx6ul_eth_init+0x34>
    {
        return -RT_ERROR;
  135810:	e3e03000 	mvn	r3, #0
  135814:	ea0000b1 	b	135ae0 <imx6ul_eth_init+0x2fc>
    }


    ueth_gpioinit((void *)&mdio_gpio[0], sizeof(mdio_gpio[0]));
  135818:	e3a0101c 	mov	r1, #28
  13581c:	e30d0040 	movw	r0, #53312	; 0xd040
  135820:	e3400014 	movt	r0, #20
  135824:	ebff3b56 	bl	104584 <ueth_gpioinit>
    ueth_gpioinit((void *)&mdio_gpio[1], sizeof(mdio_gpio[1]));
  135828:	e3a0101c 	mov	r1, #28
  13582c:	e59f02b8 	ldr	r0, [pc, #696]	; 135aec <imx6ul_eth_init+0x308>
  135830:	ebff3b53 	bl	104584 <ueth_gpioinit>

    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  135834:	e3a03000 	mov	r3, #0
  135838:	e50b300c 	str	r3, [fp, #-12]
  13583c:	ea000090 	b	135a84 <imx6ul_eth_init+0x2a0>
    {
        _imx6ul_eth_device[idx].parent.parent.ops = &_k_enet_ops;
  135840:	e30d3078 	movw	r3, #53368	; 0xd078
  135844:	e3403014 	movt	r3, #20
  135848:	e51b200c 	ldr	r2, [fp, #-12]
  13584c:	e3a01f8a 	mov	r1, #552	; 0x228
  135850:	e0020291 	mul	r2, r1, r2
  135854:	e0833002 	add	r3, r3, r2
  135858:	e283202c 	add	r2, r3, #44	; 0x2c
  13585c:	e3093e24 	movw	r3, #40484	; 0x9e24
  135860:	e3403014 	movt	r3, #20
  135864:	e5823000 	str	r3, [r2]
#ifdef RT_USING_LWIP        
        _imx6ul_eth_device[idx].parent.eth_rx     = rt_imx6ul_eth_rx;
  135868:	e30d3078 	movw	r3, #53368	; 0xd078
  13586c:	e3403014 	movt	r3, #20
  135870:	e51b200c 	ldr	r2, [fp, #-12]
  135874:	e3a01f8a 	mov	r1, #552	; 0x228
  135878:	e0020291 	mul	r2, r1, r2
  13587c:	e0833002 	add	r3, r3, r2
  135880:	e2832070 	add	r2, r3, #112	; 0x70
  135884:	e3053124 	movw	r3, #20772	; 0x5124
  135888:	e3403013 	movt	r3, #19
  13588c:	e5823000 	str	r3, [r2]
        _imx6ul_eth_device[idx].parent.eth_tx     = rt_imx6ul_eth_tx;
  135890:	e30d3078 	movw	r3, #53368	; 0xd078
  135894:	e3403014 	movt	r3, #20
  135898:	e51b200c 	ldr	r2, [fp, #-12]
  13589c:	e3a01f8a 	mov	r1, #552	; 0x228
  1358a0:	e0020291 	mul	r2, r1, r2
  1358a4:	e0833002 	add	r3, r3, r2
  1358a8:	e2832074 	add	r2, r3, #116	; 0x74
  1358ac:	e3043fc4 	movw	r3, #20420	; 0x4fc4
  1358b0:	e3403013 	movt	r3, #19
  1358b4:	e5823000 	str	r3, [r2]
#endif        
        _imx6ul_eth_device[idx].phy_link_status   = RT_FALSE;
  1358b8:	e30d3078 	movw	r3, #53368	; 0xd078
  1358bc:	e3403014 	movt	r3, #20
  1358c0:	e51b200c 	ldr	r2, [fp, #-12]
  1358c4:	e3a01f8a 	mov	r1, #552	; 0x228
  1358c8:	e0020291 	mul	r2, r1, r2
  1358cc:	e0833002 	add	r3, r3, r2
  1358d0:	e2833088 	add	r3, r3, #136	; 0x88
  1358d4:	e3a02000 	mov	r2, #0
  1358d8:	e5832000 	str	r2, [r3]

#ifdef SAL_USING_UNET
        rt_imx6ul_eth_control((rt_device_t)(&_imx6ul_eth_device[idx]),NIOCTL_GADDR,mac_addr);
  1358dc:	e51b300c 	ldr	r3, [fp, #-12]
  1358e0:	e3a02f8a 	mov	r2, #552	; 0x228
  1358e4:	e0020392 	mul	r2, r2, r3
  1358e8:	e30d3078 	movw	r3, #53368	; 0xd078
  1358ec:	e3403014 	movt	r3, #20
  1358f0:	e0823003 	add	r3, r2, r3
  1358f4:	e24b2024 	sub	r2, fp, #36	; 0x24
  1358f8:	e3a01001 	mov	r1, #1
  1358fc:	e1a00003 	mov	r0, r3
  135900:	ebfffce3 	bl	134c94 <rt_imx6ul_eth_control>
        
        rt_imx6ul_eth_init((rt_device_t)(&(_imx6ul_eth_device[idx].parent)));
  135904:	e51b300c 	ldr	r3, [fp, #-12]
  135908:	e3a02f8a 	mov	r2, #552	; 0x228
  13590c:	e0020392 	mul	r2, r2, r3
  135910:	e30d3078 	movw	r3, #53368	; 0xd078
  135914:	e3403014 	movt	r3, #20
  135918:	e0823003 	add	r3, r2, r3
  13591c:	e1a00003 	mov	r0, r3
  135920:	ebfffc5c 	bl	134a98 <rt_imx6ul_eth_init>
#endif
        eth_init_done = 1;
  135924:	e30e3c00 	movw	r3, #60416	; 0xec00
  135928:	e3403014 	movt	r3, #20
  13592c:	e3a02001 	mov	r2, #1
  135930:	e5832000 	str	r2, [r3]
        /* register eth device */
        state = eth_device_init(&(_imx6ul_eth_device[idx].parent), _imx6ul_eth_device[idx].mac_name);
  135934:	e51b300c 	ldr	r3, [fp, #-12]
  135938:	e3a02f8a 	mov	r2, #552	; 0x228
  13593c:	e0020392 	mul	r2, r2, r3
  135940:	e30d3078 	movw	r3, #53368	; 0xd078
  135944:	e3403014 	movt	r3, #20
  135948:	e0820003 	add	r0, r2, r3
  13594c:	e30d3078 	movw	r3, #53368	; 0xd078
  135950:	e3403014 	movt	r3, #20
  135954:	e51b200c 	ldr	r2, [fp, #-12]
  135958:	e3a01f8a 	mov	r1, #552	; 0x228
  13595c:	e0020291 	mul	r2, r1, r2
  135960:	e0833002 	add	r3, r3, r2
  135964:	e283308c 	add	r3, r3, #140	; 0x8c
  135968:	e5933000 	ldr	r3, [r3]
  13596c:	e1a01003 	mov	r1, r3
  135970:	ebffd047 	bl	129a94 <eth_device_init>
  135974:	e50b0008 	str	r0, [fp, #-8]
        if (RT_EOK == state)
  135978:	e51b3008 	ldr	r3, [fp, #-8]
  13597c:	e3530000 	cmp	r3, #0
  135980:	1a000009 	bne	1359ac <imx6ul_eth_init+0x1c8>
        {
            LOG_I("emac device init success");
  135984:	e3090e3c 	movw	r0, #40508	; 0x9e3c
  135988:	e3400014 	movt	r0, #20
  13598c:	ebff35e0 	bl	103114 <rt_kprintf>
  135990:	e3090e50 	movw	r0, #40528	; 0x9e50
  135994:	e3400014 	movt	r0, #20
  135998:	ebff35dd 	bl	103114 <rt_kprintf>
  13599c:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  1359a0:	e3400014 	movt	r0, #20
  1359a4:	ebff35da 	bl	103114 <rt_kprintf>
  1359a8:	ea00000b 	b	1359dc <imx6ul_eth_init+0x1f8>
        }
        else
        {
            LOG_E("emac device init faild: %d", state);
  1359ac:	e3090bec 	movw	r0, #39916	; 0x9bec
  1359b0:	e3400014 	movt	r0, #20
  1359b4:	ebff35d6 	bl	103114 <rt_kprintf>
  1359b8:	e51b1008 	ldr	r1, [fp, #-8]
  1359bc:	e3090e6c 	movw	r0, #40556	; 0x9e6c
  1359c0:	e3400014 	movt	r0, #20
  1359c4:	ebff35d2 	bl	103114 <rt_kprintf>
  1359c8:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  1359cc:	e3400014 	movt	r0, #20
  1359d0:	ebff35cf 	bl	103114 <rt_kprintf>
            state = -RT_ERROR;
  1359d4:	e3e03000 	mvn	r3, #0
  1359d8:	e50b3008 	str	r3, [fp, #-8]
        }

        rt_sprintf(link_detect,"link_d%d",_imx6ul_eth_device[idx].mac_num);
  1359dc:	e30d3078 	movw	r3, #53368	; 0xd078
  1359e0:	e3403014 	movt	r3, #20
  1359e4:	e51b200c 	ldr	r2, [fp, #-12]
  1359e8:	e3a01f8a 	mov	r1, #552	; 0x228
  1359ec:	e0020291 	mul	r2, r1, r2
  1359f0:	e0833002 	add	r3, r3, r2
  1359f4:	e28330a4 	add	r3, r3, #164	; 0xa4
  1359f8:	e5932000 	ldr	r2, [r3]
  1359fc:	e24b301c 	sub	r3, fp, #28
  135a00:	e3091e88 	movw	r1, #40584	; 0x9e88
  135a04:	e3401014 	movt	r1, #20
  135a08:	e1a00003 	mov	r0, r3
  135a0c:	ebff359e 	bl	10308c <rt_sprintf>
        /* start phy link detect */
        rt_thread_t phy_link_tid;
        phy_link_tid = rt_thread_create(link_detect,
                                phy_detect_thread_entry,
                                &_imx6ul_eth_device[idx],
  135a10:	e51b300c 	ldr	r3, [fp, #-12]
  135a14:	e3a02f8a 	mov	r2, #552	; 0x228
  135a18:	e0020392 	mul	r2, r2, r3
  135a1c:	e30d3078 	movw	r3, #53368	; 0xd078
  135a20:	e3403014 	movt	r3, #20
  135a24:	e0822003 	add	r2, r2, r3
        phy_link_tid = rt_thread_create(link_detect,
  135a28:	e24b001c 	sub	r0, fp, #28
  135a2c:	e3a03002 	mov	r3, #2
  135a30:	e58d3004 	str	r3, [sp, #4]
  135a34:	e3a03019 	mov	r3, #25
  135a38:	e58d3000 	str	r3, [sp]
  135a3c:	e3a03a01 	mov	r3, #4096	; 0x1000
  135a40:	e305167c 	movw	r1, #22140	; 0x567c
  135a44:	e3401013 	movt	r1, #19
  135a48:	ebff31a9 	bl	1020f4 <rt_thread_create>
  135a4c:	e50b0010 	str	r0, [fp, #-16]
                                4096,
                                25,
                                2);
        if (phy_link_tid != RT_NULL)
  135a50:	e51b3010 	ldr	r3, [fp, #-16]
  135a54:	e3530000 	cmp	r3, #0
  135a58:	0a000001 	beq	135a64 <imx6ul_eth_init+0x280>
        {
            rt_thread_startup(phy_link_tid);
  135a5c:	e51b0010 	ldr	r0, [fp, #-16]
  135a60:	ebff31d8 	bl	1021c8 <rt_thread_startup>
        }
        memset(link_detect,0,sizeof(link_detect));
  135a64:	e24b301c 	sub	r3, fp, #28
  135a68:	e3a0200a 	mov	r2, #10
  135a6c:	e3a01000 	mov	r1, #0
  135a70:	e1a00003 	mov	r0, r3
  135a74:	eb002e00 	bl	14127c <memset>
    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  135a78:	e51b300c 	ldr	r3, [fp, #-12]
  135a7c:	e2833001 	add	r3, r3, #1
  135a80:	e50b300c 	str	r3, [fp, #-12]
  135a84:	e51b300c 	ldr	r3, [fp, #-12]
  135a88:	e3530000 	cmp	r3, #0
  135a8c:	0affff6b 	beq	135840 <imx6ul_eth_init+0x5c>
    }

    if (eth_select > GET_ARRAY_NUM(_imx6ul_eth_device)) 
  135a90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135a94:	e3530001 	cmp	r3, #1
  135a98:	9a000005 	bls	135ab4 <imx6ul_eth_init+0x2d0>
    {
        *eth_name = RT_NULL;
  135a9c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135aa0:	e3a02000 	mov	r2, #0
  135aa4:	e5832000 	str	r2, [r3]
        state = -RT_ERROR;
  135aa8:	e3e03000 	mvn	r3, #0
  135aac:	e50b3008 	str	r3, [fp, #-8]
  135ab0:	ea000009 	b	135adc <imx6ul_eth_init+0x2f8>
    } 
    else 
    {
        *eth_name = _imx6ul_eth_device[eth_select].mac_name;
  135ab4:	e30d3078 	movw	r3, #53368	; 0xd078
  135ab8:	e3403014 	movt	r3, #20
  135abc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  135ac0:	e3a01f8a 	mov	r1, #552	; 0x228
  135ac4:	e0020291 	mul	r2, r1, r2
  135ac8:	e0833002 	add	r3, r3, r2
  135acc:	e283308c 	add	r3, r3, #140	; 0x8c
  135ad0:	e5932000 	ldr	r2, [r3]
  135ad4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135ad8:	e5832000 	str	r2, [r3]
    }

    return state;
  135adc:	e51b3008 	ldr	r3, [fp, #-8]
}
  135ae0:	e1a00003 	mov	r0, r3
  135ae4:	e24bd004 	sub	sp, fp, #4
  135ae8:	e8bd8800 	pop	{fp, pc}
  135aec:	0014d05c 	.word	0x0014d05c

00135af0 <__assert_func>:
        __BKPT(0);
    }
}
#elif(defined(__GNUC__))
void __assert_func(const char *file, int line, const char *func, const char *failedExpr)
{
  135af0:	e92d4800 	push	{fp, lr}
  135af4:	e28db004 	add	fp, sp, #4
  135af8:	e24dd018 	sub	sp, sp, #24
  135afc:	e50b0008 	str	r0, [fp, #-8]
  135b00:	e50b100c 	str	r1, [fp, #-12]
  135b04:	e50b2010 	str	r2, [fp, #-16]
  135b08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    PRINTF("ASSERT ERROR \" %s \": file \"%s\" Line \"%d\" function name \"%s\" \n", failedExpr, file, line, func);
  135b0c:	e51b3010 	ldr	r3, [fp, #-16]
  135b10:	e58d3000 	str	r3, [sp]
  135b14:	e51b300c 	ldr	r3, [fp, #-12]
  135b18:	e51b2008 	ldr	r2, [fp, #-8]
  135b1c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  135b20:	e3090ea8 	movw	r0, #40616	; 0x9ea8
  135b24:	e3400014 	movt	r0, #20
  135b28:	ebff3579 	bl	103114 <rt_kprintf>
    for (;;)
    {
        __BKPT(0);
  135b2c:	e1200070 	bkpt	0x0000
  135b30:	eafffffd 	b	135b2c <__assert_func+0x3c>

00135b34 <SDK_Malloc>:
                           /*   SYSCON->STARTERCLR[index] = 1u << intNumber; */
}
#endif /*CPU_QN908X */

void *SDK_Malloc(size_t size, size_t alignbytes)
{
  135b34:	e92d4800 	push	{fp, lr}
  135b38:	e28db004 	add	fp, sp, #4
  135b3c:	e24dd018 	sub	sp, sp, #24
  135b40:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  135b44:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    mem_align_cb_t *p_cb = NULL;
  135b48:	e3a03000 	mov	r3, #0
  135b4c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t alignedsize = SDK_SIZEALIGN(size, alignbytes) + alignbytes + sizeof(mem_align_cb_t);
  135b50:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  135b54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135b58:	e0823003 	add	r3, r2, r3
  135b5c:	e2432001 	sub	r2, r3, #1
  135b60:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135b64:	e2633000 	rsb	r3, r3, #0
  135b68:	e0022003 	and	r2, r2, r3
  135b6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135b70:	e0823003 	add	r3, r2, r3
  135b74:	e2833004 	add	r3, r3, #4
  135b78:	e50b300c 	str	r3, [fp, #-12]
    void *p_align_addr, *p_addr = malloc(alignedsize);
  135b7c:	e51b000c 	ldr	r0, [fp, #-12]
  135b80:	eb001df4 	bl	13d358 <malloc>
  135b84:	e1a03000 	mov	r3, r0
  135b88:	e50b3010 	str	r3, [fp, #-16]

    if (!p_addr)
  135b8c:	e51b3010 	ldr	r3, [fp, #-16]
  135b90:	e3530000 	cmp	r3, #0
  135b94:	1a000001 	bne	135ba0 <SDK_Malloc+0x6c>
    {
        return NULL;
  135b98:	e3a03000 	mov	r3, #0
  135b9c:	ea000014 	b	135bf4 <SDK_Malloc+0xc0>
    }

    p_align_addr = (void *)SDK_SIZEALIGN((uint32_t)p_addr + sizeof(mem_align_cb_t), alignbytes);
  135ba0:	e51b2010 	ldr	r2, [fp, #-16]
  135ba4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135ba8:	e0823003 	add	r3, r2, r3
  135bac:	e2832003 	add	r2, r3, #3
  135bb0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135bb4:	e2633000 	rsb	r3, r3, #0
  135bb8:	e0033002 	and	r3, r3, r2
  135bbc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    p_cb = (mem_align_cb_t *)((uint32_t)p_align_addr - 4);
  135bc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135bc4:	e2433004 	sub	r3, r3, #4
  135bc8:	e50b3008 	str	r3, [fp, #-8]
    p_cb->identifier = SDK_MEM_MAGIC_NUMBER;
  135bcc:	e51b3008 	ldr	r3, [fp, #-8]
  135bd0:	e3032039 	movw	r2, #12345	; 0x3039
  135bd4:	e1c320b0 	strh	r2, [r3]
    p_cb->offset = (uint32_t)p_align_addr - (uint32_t)p_addr;
  135bd8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135bdc:	e51b3010 	ldr	r3, [fp, #-16]
  135be0:	e0423003 	sub	r3, r2, r3
  135be4:	e6ff2073 	uxth	r2, r3
  135be8:	e51b3008 	ldr	r3, [fp, #-8]
  135bec:	e1c320b2 	strh	r2, [r3, #2]

    return (void *)p_align_addr;
  135bf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  135bf4:	e1a00003 	mov	r0, r3
  135bf8:	e24bd004 	sub	sp, fp, #4
  135bfc:	e8bd8800 	pop	{fp, pc}

00135c00 <SDK_Free>:

void SDK_Free(void *ptr)
{
  135c00:	e92d4800 	push	{fp, lr}
  135c04:	e28db004 	add	fp, sp, #4
  135c08:	e24dd010 	sub	sp, sp, #16
  135c0c:	e50b0010 	str	r0, [fp, #-16]
    mem_align_cb_t *p_cb = (mem_align_cb_t *)((uint32_t)ptr - 4);
  135c10:	e51b3010 	ldr	r3, [fp, #-16]
  135c14:	e2433004 	sub	r3, r3, #4
  135c18:	e50b3008 	str	r3, [fp, #-8]

    if (p_cb->identifier != SDK_MEM_MAGIC_NUMBER)
  135c1c:	e51b3008 	ldr	r3, [fp, #-8]
  135c20:	e1d330b0 	ldrh	r3, [r3]
  135c24:	e3032039 	movw	r2, #12345	; 0x3039
  135c28:	e1530002 	cmp	r3, r2
  135c2c:	1a000006 	bne	135c4c <SDK_Free+0x4c>
    {
        return;
    }

    free((void *)((uint32_t)ptr - p_cb->offset));
  135c30:	e51b3010 	ldr	r3, [fp, #-16]
  135c34:	e51b2008 	ldr	r2, [fp, #-8]
  135c38:	e1d220b2 	ldrh	r2, [r2, #2]
  135c3c:	e0433002 	sub	r3, r3, r2
  135c40:	e1a00003 	mov	r0, r3
  135c44:	eb001f7f 	bl	13da48 <free>
  135c48:	ea000000 	b	135c50 <SDK_Free+0x50>
        return;
  135c4c:	e320f000 	nop	{0}
}
  135c50:	e24bd004 	sub	sp, fp, #4
  135c54:	e8bd8800 	pop	{fp, pc}

00135c58 <ENET_Reset>:
{
  135c58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135c5c:	e28db000 	add	fp, sp, #0
  135c60:	e24dd00c 	sub	sp, sp, #12
  135c64:	e50b0008 	str	r0, [fp, #-8]
    base->ECR |= ENET_ECR_RESET_MASK;
  135c68:	e51b3008 	ldr	r3, [fp, #-8]
  135c6c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135c70:	e3832001 	orr	r2, r3, #1
  135c74:	e51b3008 	ldr	r3, [fp, #-8]
  135c78:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135c7c:	e320f000 	nop	{0}
  135c80:	e28bd000 	add	sp, fp, #0
  135c84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135c88:	e12fff1e 	bx	lr

00135c8c <ENET_GetSMI>:
{
  135c8c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135c90:	e28db000 	add	fp, sp, #0
  135c94:	e24dd00c 	sub	sp, sp, #12
  135c98:	e50b0008 	str	r0, [fp, #-8]
    return (0 != (base->MSCR & 0x7E));
  135c9c:	e51b3008 	ldr	r3, [fp, #-8]
  135ca0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  135ca4:	e203307e 	and	r3, r3, #126	; 0x7e
  135ca8:	e3530000 	cmp	r3, #0
  135cac:	13a03001 	movne	r3, #1
  135cb0:	03a03000 	moveq	r3, #0
  135cb4:	e6ef3073 	uxtb	r3, r3
}
  135cb8:	e1a00003 	mov	r0, r3
  135cbc:	e28bd000 	add	sp, fp, #0
  135cc0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135cc4:	e12fff1e 	bx	lr

00135cc8 <ENET_EnableSleepMode>:
{
  135cc8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135ccc:	e28db000 	add	fp, sp, #0
  135cd0:	e24dd00c 	sub	sp, sp, #12
  135cd4:	e50b0008 	str	r0, [fp, #-8]
  135cd8:	e1a03001 	mov	r3, r1
  135cdc:	e54b3009 	strb	r3, [fp, #-9]
    if (enable)
  135ce0:	e55b3009 	ldrb	r3, [fp, #-9]
  135ce4:	e3530000 	cmp	r3, #0
  135ce8:	0a000005 	beq	135d04 <ENET_EnableSleepMode+0x3c>
        base->ECR |= ENET_ECR_SLEEP_MASK | ENET_ECR_MAGICEN_MASK;
  135cec:	e51b3008 	ldr	r3, [fp, #-8]
  135cf0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135cf4:	e383200c 	orr	r2, r3, #12
  135cf8:	e51b3008 	ldr	r3, [fp, #-8]
  135cfc:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135d00:	ea000004 	b	135d18 <ENET_EnableSleepMode+0x50>
        base->ECR &= ~(ENET_ECR_SLEEP_MASK | ENET_ECR_MAGICEN_MASK);
  135d04:	e51b3008 	ldr	r3, [fp, #-8]
  135d08:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135d0c:	e3c3200c 	bic	r2, r3, #12
  135d10:	e51b3008 	ldr	r3, [fp, #-8]
  135d14:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135d18:	e320f000 	nop	{0}
  135d1c:	e28bd000 	add	sp, fp, #0
  135d20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135d24:	e12fff1e 	bx	lr

00135d28 <ENET_EnableInterrupts>:
{
  135d28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135d2c:	e28db000 	add	fp, sp, #0
  135d30:	e24dd00c 	sub	sp, sp, #12
  135d34:	e50b0008 	str	r0, [fp, #-8]
  135d38:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  135d3c:	e51b3008 	ldr	r3, [fp, #-8]
  135d40:	e5932008 	ldr	r2, [r3, #8]
  135d44:	e51b300c 	ldr	r3, [fp, #-12]
  135d48:	e1822003 	orr	r2, r2, r3
  135d4c:	e51b3008 	ldr	r3, [fp, #-8]
  135d50:	e5832008 	str	r2, [r3, #8]
}
  135d54:	e320f000 	nop	{0}
  135d58:	e28bd000 	add	sp, fp, #0
  135d5c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135d60:	e12fff1e 	bx	lr

00135d64 <ENET_GetInstance>:

/*******************************************************************************
 * Code
 ******************************************************************************/
uint32_t ENET_GetInstance(ENET_Type *base)
{
  135d64:	e92d4800 	push	{fp, lr}
  135d68:	e28db004 	add	fp, sp, #4
  135d6c:	e24dd010 	sub	sp, sp, #16
  135d70:	e50b0010 	str	r0, [fp, #-16]
    uint32_t instance;
    /* Find the instance index from base address mappings. */
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  135d74:	e3a03000 	mov	r3, #0
  135d78:	e50b3008 	str	r3, [fp, #-8]
  135d7c:	ea000009 	b	135da8 <ENET_GetInstance+0x44>
    {
        if (s_enetBases[instance] == base)
  135d80:	e3093ee8 	movw	r3, #40680	; 0x9ee8
  135d84:	e3403014 	movt	r3, #20
  135d88:	e51b2008 	ldr	r2, [fp, #-8]
  135d8c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  135d90:	e51b2010 	ldr	r2, [fp, #-16]
  135d94:	e1520003 	cmp	r2, r3
  135d98:	0a000006 	beq	135db8 <ENET_GetInstance+0x54>
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  135d9c:	e51b3008 	ldr	r3, [fp, #-8]
  135da0:	e2833001 	add	r3, r3, #1
  135da4:	e50b3008 	str	r3, [fp, #-8]
  135da8:	e51b3008 	ldr	r3, [fp, #-8]
  135dac:	e3530002 	cmp	r3, #2
  135db0:	9afffff2 	bls	135d80 <ENET_GetInstance+0x1c>
  135db4:	ea000000 	b	135dbc <ENET_GetInstance+0x58>
        {
            break;
  135db8:	e320f000 	nop	{0}
        }
    }
    RT_ASSERT(instance < ARRAY_SIZE(s_enetBases));
  135dbc:	e51b3008 	ldr	r3, [fp, #-8]
  135dc0:	e3530002 	cmp	r3, #2
  135dc4:	9a000005 	bls	135de0 <ENET_GetInstance+0x7c>
  135dc8:	e3a020d7 	mov	r2, #215	; 0xd7
  135dcc:	e30a1264 	movw	r1, #41572	; 0xa264
  135dd0:	e3401014 	movt	r1, #20
  135dd4:	e3090ef4 	movw	r0, #40692	; 0x9ef4
  135dd8:	e3400014 	movt	r0, #20
  135ddc:	ebff35ed 	bl	103598 <rt_assert_handler>

    return instance;
  135de0:	e51b3008 	ldr	r3, [fp, #-8]
}
  135de4:	e1a00003 	mov	r0, r3
  135de8:	e24bd004 	sub	sp, fp, #4
  135dec:	e8bd8800 	pop	{fp, pc}

00135df0 <ENET_GetDefaultConfig>:
};

#endif

void ENET_GetDefaultConfig(enet_config_t *config)
{
  135df0:	e92d4800 	push	{fp, lr}
  135df4:	e28db004 	add	fp, sp, #4
  135df8:	e24dd008 	sub	sp, sp, #8
  135dfc:	e50b0008 	str	r0, [fp, #-8]
    /* Checks input parameter. */
    RT_ASSERT(config);
  135e00:	e51b3008 	ldr	r3, [fp, #-8]
  135e04:	e3530000 	cmp	r3, #0
  135e08:	1a000005 	bne	135e24 <ENET_GetDefaultConfig+0x34>
  135e0c:	e3a020e9 	mov	r2, #233	; 0xe9
  135e10:	e30a1278 	movw	r1, #41592	; 0xa278
  135e14:	e3401014 	movt	r1, #20
  135e18:	e3090f18 	movw	r0, #40728	; 0x9f18
  135e1c:	e3400014 	movt	r0, #20
  135e20:	ebff35dc 	bl	103598 <rt_assert_handler>

    /* Initializes the MAC configure structure to zero. */
    memset(config, 0, sizeof(enet_config_t));
  135e24:	e3a02024 	mov	r2, #36	; 0x24
  135e28:	e3a01000 	mov	r1, #0
  135e2c:	e51b0008 	ldr	r0, [fp, #-8]
  135e30:	eb002d11 	bl	14127c <memset>

    #if defined (FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    config->intCoalesceCfg = &intcoalesce_config;
  135e34:	e51b2008 	ldr	r2, [fp, #-8]
  135e38:	e30d32a0 	movw	r3, #53920	; 0xd2a0
  135e3c:	e3403014 	movt	r3, #20
  135e40:	e5823020 	str	r3, [r2, #32]
    #endif

    /* Sets MII mode, full duplex, 100Mbps for MAC and PHY data interface. */
    config->miiMode = kENET_RmiiMode;
  135e44:	e51b3008 	ldr	r3, [fp, #-8]
  135e48:	e3a02001 	mov	r2, #1
  135e4c:	e583200c 	str	r2, [r3, #12]
    config->miiSpeed = kENET_MiiSpeed100M;
  135e50:	e51b3008 	ldr	r3, [fp, #-8]
  135e54:	e3a02001 	mov	r2, #1
  135e58:	e5832010 	str	r2, [r3, #16]
    config->miiDuplex = kENET_MiiFullDuplex;
  135e5c:	e51b3008 	ldr	r3, [fp, #-8]
  135e60:	e3a02001 	mov	r2, #1
  135e64:	e5832014 	str	r2, [r3, #20]

    /* Sets the maximum receive frame length. */
    config->rxMaxFrameLen = ENET_FRAME_MAX_FRAMELEN;
  135e68:	e51b3008 	ldr	r3, [fp, #-8]
  135e6c:	e30025ee 	movw	r2, #1518	; 0x5ee
  135e70:	e1c320b8 	strh	r2, [r3, #8]
}
  135e74:	e320f000 	nop	{0}
  135e78:	e24bd004 	sub	sp, fp, #4
  135e7c:	e8bd8800 	pop	{fp, pc}

00135e80 <ENET_Init>:
               enet_handle_t *handle,
               const enet_config_t *config,
               const enet_buffer_config_t *bufferConfig,
               uint8_t *macAddr,
               uint32_t srcClock_Hz)
{
  135e80:	e92d4800 	push	{fp, lr}
  135e84:	e28db004 	add	fp, sp, #4
  135e88:	e24dd018 	sub	sp, sp, #24
  135e8c:	e50b0008 	str	r0, [fp, #-8]
  135e90:	e50b100c 	str	r1, [fp, #-12]
  135e94:	e50b2010 	str	r2, [fp, #-16]
  135e98:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Checks input parameters. */
    RT_ASSERT(handle);
  135e9c:	e51b300c 	ldr	r3, [fp, #-12]
  135ea0:	e3530000 	cmp	r3, #0
  135ea4:	1a000005 	bne	135ec0 <ENET_Init+0x40>
  135ea8:	e3002103 	movw	r2, #259	; 0x103
  135eac:	e30a1290 	movw	r1, #41616	; 0xa290
  135eb0:	e3401014 	movt	r1, #20
  135eb4:	e3090f20 	movw	r0, #40736	; 0x9f20
  135eb8:	e3400014 	movt	r0, #20
  135ebc:	ebff35b5 	bl	103598 <rt_assert_handler>
    RT_ASSERT(config);
  135ec0:	e51b3010 	ldr	r3, [fp, #-16]
  135ec4:	e3530000 	cmp	r3, #0
  135ec8:	1a000005 	bne	135ee4 <ENET_Init+0x64>
  135ecc:	e3a02f41 	mov	r2, #260	; 0x104
  135ed0:	e30a1290 	movw	r1, #41616	; 0xa290
  135ed4:	e3401014 	movt	r1, #20
  135ed8:	e3090f18 	movw	r0, #40728	; 0x9f18
  135edc:	e3400014 	movt	r0, #20
  135ee0:	ebff35ac 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig);
  135ee4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135ee8:	e3530000 	cmp	r3, #0
  135eec:	1a000005 	bne	135f08 <ENET_Init+0x88>
  135ef0:	e3002105 	movw	r2, #261	; 0x105
  135ef4:	e30a1290 	movw	r1, #41616	; 0xa290
  135ef8:	e3401014 	movt	r1, #20
  135efc:	e3090f28 	movw	r0, #40744	; 0x9f28
  135f00:	e3400014 	movt	r0, #20
  135f04:	ebff35a3 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBdStartAddrAlign);
  135f08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f0c:	e593300c 	ldr	r3, [r3, #12]
  135f10:	e3530000 	cmp	r3, #0
  135f14:	1a000005 	bne	135f30 <ENET_Init+0xb0>
  135f18:	e3002106 	movw	r2, #262	; 0x106
  135f1c:	e30a1290 	movw	r1, #41616	; 0xa290
  135f20:	e3401014 	movt	r1, #20
  135f24:	e3090f38 	movw	r0, #40760	; 0x9f38
  135f28:	e3400014 	movt	r0, #20
  135f2c:	ebff3599 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBdStartAddrAlign);
  135f30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f34:	e5933010 	ldr	r3, [r3, #16]
  135f38:	e3530000 	cmp	r3, #0
  135f3c:	1a000005 	bne	135f58 <ENET_Init+0xd8>
  135f40:	e3002107 	movw	r2, #263	; 0x107
  135f44:	e30a1290 	movw	r1, #41616	; 0xa290
  135f48:	e3401014 	movt	r1, #20
  135f4c:	e3090f5c 	movw	r0, #40796	; 0x9f5c
  135f50:	e3400014 	movt	r0, #20
  135f54:	ebff358f 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBufferAlign);
  135f58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f5c:	e5933014 	ldr	r3, [r3, #20]
  135f60:	e3530000 	cmp	r3, #0
  135f64:	1a000005 	bne	135f80 <ENET_Init+0x100>
  135f68:	e3a02f42 	mov	r2, #264	; 0x108
  135f6c:	e30a1290 	movw	r1, #41616	; 0xa290
  135f70:	e3401014 	movt	r1, #20
  135f74:	e3090f80 	movw	r0, #40832	; 0x9f80
  135f78:	e3400014 	movt	r0, #20
  135f7c:	ebff3585 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBufferAlign);
  135f80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f84:	e5933018 	ldr	r3, [r3, #24]
  135f88:	e3530000 	cmp	r3, #0
  135f8c:	1a000005 	bne	135fa8 <ENET_Init+0x128>
  135f90:	e3002109 	movw	r2, #265	; 0x109
  135f94:	e30a1290 	movw	r1, #41616	; 0xa290
  135f98:	e3401014 	movt	r1, #20
  135f9c:	e3090f9c 	movw	r0, #40860	; 0x9f9c
  135fa0:	e3400014 	movt	r0, #20
  135fa4:	ebff357b 	bl	103598 <rt_assert_handler>
    RT_ASSERT(macAddr);
  135fa8:	e59b3004 	ldr	r3, [fp, #4]
  135fac:	e3530000 	cmp	r3, #0
  135fb0:	1a000005 	bne	135fcc <ENET_Init+0x14c>
  135fb4:	e300210a 	movw	r2, #266	; 0x10a
  135fb8:	e30a1290 	movw	r1, #41616	; 0xa290
  135fbc:	e3401014 	movt	r1, #20
  135fc0:	e3090fb8 	movw	r0, #40888	; 0x9fb8
  135fc4:	e3400014 	movt	r0, #20
  135fc8:	ebff3572 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBuffSizeAlign >= ENET_RX_MIN_BUFFERSIZE);
  135fcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135fd0:	e5933004 	ldr	r3, [r3, #4]
  135fd4:	e35300ff 	cmp	r3, #255	; 0xff
  135fd8:	8a000005 	bhi	135ff4 <ENET_Init+0x174>
  135fdc:	e300210b 	movw	r2, #267	; 0x10b
  135fe0:	e30a1290 	movw	r1, #41616	; 0xa290
  135fe4:	e3401014 	movt	r1, #20
  135fe8:	e3090fc0 	movw	r0, #40896	; 0x9fc0
  135fec:	e3400014 	movt	r0, #20
  135ff0:	ebff3568 	bl	103598 <rt_assert_handler>
    /* Make sure the buffers should be have the capability of process at least one maximum frame. */
    if (config->macSpecialConfig & kENET_ControlVLANTagEnable)
  135ff4:	e51b3010 	ldr	r3, [fp, #-16]
  135ff8:	e5933000 	ldr	r3, [r3]
  135ffc:	e2033c02 	and	r3, r3, #512	; 0x200
  136000:	e3530000 	cmp	r3, #0
  136004:	0a00000e 	beq	136044 <ENET_Init+0x1c4>
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN));
  136008:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13600c:	e5933008 	ldr	r3, [r3, #8]
  136010:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136014:	e1d220b2 	ldrh	r2, [r2, #2]
  136018:	e0030392 	mul	r3, r2, r3
  13601c:	e30025f2 	movw	r2, #1522	; 0x5f2
  136020:	e1530002 	cmp	r3, r2
  136024:	8a000023 	bhi	1360b8 <ENET_Init+0x238>
  136028:	e300210f 	movw	r2, #271	; 0x10f
  13602c:	e30a1290 	movw	r1, #41616	; 0xa290
  136030:	e3401014 	movt	r1, #20
  136034:	e3090ff8 	movw	r0, #40952	; 0x9ff8
  136038:	e3400014 	movt	r0, #20
  13603c:	ebff3555 	bl	103598 <rt_assert_handler>
  136040:	ea00001c 	b	1360b8 <ENET_Init+0x238>
    }
    else
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > ENET_FRAME_MAX_FRAMELEN);
  136044:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136048:	e5933008 	ldr	r3, [r3, #8]
  13604c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136050:	e1d220b2 	ldrh	r2, [r2, #2]
  136054:	e0030392 	mul	r3, r2, r3
  136058:	e30025ee 	movw	r2, #1518	; 0x5ee
  13605c:	e1530002 	cmp	r3, r2
  136060:	8a000005 	bhi	13607c <ENET_Init+0x1fc>
  136064:	e3002113 	movw	r2, #275	; 0x113
  136068:	e30a1290 	movw	r1, #41616	; 0xa290
  13606c:	e3401014 	movt	r1, #20
  136070:	e30a0068 	movw	r0, #41064	; 0xa068
  136074:	e3400014 	movt	r0, #20
  136078:	ebff3546 	bl	103598 <rt_assert_handler>
        RT_ASSERT(bufferConfig->rxBuffSizeAlign * bufferConfig->rxBdNumber > config->rxMaxFrameLen);
  13607c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136080:	e5933004 	ldr	r3, [r3, #4]
  136084:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136088:	e1d220b0 	ldrh	r2, [r2]
  13608c:	e0030392 	mul	r3, r2, r3
  136090:	e51b2010 	ldr	r2, [fp, #-16]
  136094:	e1d220b8 	ldrh	r2, [r2, #8]
  136098:	e1530002 	cmp	r3, r2
  13609c:	8a000005 	bhi	1360b8 <ENET_Init+0x238>
  1360a0:	e3a02f45 	mov	r2, #276	; 0x114
  1360a4:	e30a1290 	movw	r1, #41616	; 0xa290
  1360a8:	e3401014 	movt	r1, #20
  1360ac:	e30a00bc 	movw	r0, #41148	; 0xa0bc
  1360b0:	e3400014 	movt	r0, #20
  1360b4:	ebff3537 	bl	103598 <rt_assert_handler>
    }

    /* Reset ENET module. */
    ENET_Reset(base);
  1360b8:	e51b0008 	ldr	r0, [fp, #-8]
  1360bc:	ebfffee5 	bl	135c58 <ENET_Reset>
    /* Initializes the ENET transmit buffer descriptors. */
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  1360c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360c4:	e5930010 	ldr	r0, [r3, #16]
  1360c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360cc:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  1360d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360d4:	e5932018 	ldr	r2, [r3, #24]
  1360d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360dc:	e593c008 	ldr	ip, [r3, #8]
                                bufferConfig->txBuffSizeAlign, bufferConfig->txBdNumber);
  1360e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360e4:	e1d330b2 	ldrh	r3, [r3, #2]
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  1360e8:	e58d3000 	str	r3, [sp]
  1360ec:	e1a0300c 	mov	r3, ip
  1360f0:	eb00018b 	bl	136724 <ENET_SetTxBufferDescriptors>
    /* Initializes the ENET receive buffer descriptors. */
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  1360f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360f8:	e593000c 	ldr	r0, [r3, #12]
  1360fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136100:	e5931024 	ldr	r1, [r3, #36]	; 0x24
  136104:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136108:	e5932014 	ldr	r2, [r3, #20]
  13610c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136110:	e593c004 	ldr	ip, [r3, #4]
                                bufferConfig->rxBuffSizeAlign, bufferConfig->rxBdNumber,
  136114:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136118:	e1d330b0 	ldrh	r3, [r3]
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  13611c:	e1a0e003 	mov	lr, r3
                                !!(config->interrupt & (kENET_RxFrameInterrupt | kENET_RxBufferInterrupt)));
  136120:	e51b3010 	ldr	r3, [fp, #-16]
  136124:	e5933004 	ldr	r3, [r3, #4]
  136128:	e2033403 	and	r3, r3, #50331648	; 0x3000000
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  13612c:	e3530000 	cmp	r3, #0
  136130:	13a03001 	movne	r3, #1
  136134:	03a03000 	moveq	r3, #0
  136138:	e6ef3073 	uxtb	r3, r3
  13613c:	e58d3004 	str	r3, [sp, #4]
  136140:	e58de000 	str	lr, [sp]
  136144:	e1a0300c 	mov	r3, ip
  136148:	eb0001c7 	bl	13686c <ENET_SetRxBufferDescriptors>
    /* Initializes the ENET MAC controller. */
    ENET_SetMacController(base, config, bufferConfig, macAddr, srcClock_Hz);
  13614c:	e59b3008 	ldr	r3, [fp, #8]
  136150:	e58d3000 	str	r3, [sp]
  136154:	e59b3004 	ldr	r3, [fp, #4]
  136158:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  13615c:	e51b1010 	ldr	r1, [fp, #-16]
  136160:	e51b0008 	ldr	r0, [fp, #-8]
  136164:	eb00005e 	bl	1362e4 <ENET_SetMacController>
    /* Set all buffers or data in handler for data transmit/receive process. */
    ENET_SetHandler(base, handle, config, bufferConfig);
  136168:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13616c:	e51b2010 	ldr	r2, [fp, #-16]
  136170:	e51b100c 	ldr	r1, [fp, #-12]
  136174:	e51b0008 	ldr	r0, [fp, #-8]
  136178:	eb00002a 	bl	136228 <ENET_SetHandler>
}
  13617c:	e320f000 	nop	{0}
  136180:	e24bd004 	sub	sp, fp, #4
  136184:	e8bd8800 	pop	{fp, pc}

00136188 <ENET_Deinit>:

void ENET_Deinit(ENET_Type *base)
{
  136188:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13618c:	e28db000 	add	fp, sp, #0
  136190:	e24dd00c 	sub	sp, sp, #12
  136194:	e50b0008 	str	r0, [fp, #-8]
    /* Disable interrupt. */
    base->EIMR = 0;
  136198:	e51b3008 	ldr	r3, [fp, #-8]
  13619c:	e3a02000 	mov	r2, #0
  1361a0:	e5832008 	str	r2, [r3, #8]

    /* Disable ENET. */
    base->ECR &= ~ENET_ECR_ETHEREN_MASK;
  1361a4:	e51b3008 	ldr	r3, [fp, #-8]
  1361a8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1361ac:	e3c32002 	bic	r2, r3, #2
  1361b0:	e51b3008 	ldr	r3, [fp, #-8]
  1361b4:	e5832024 	str	r2, [r3, #36]	; 0x24

}
  1361b8:	e320f000 	nop	{0}
  1361bc:	e28bd000 	add	sp, fp, #0
  1361c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1361c4:	e12fff1e 	bx	lr

001361c8 <ENET_SetCallback>:

void ENET_SetCallback(enet_handle_t *handle, enet_callback_t callback, void *userData)
{
  1361c8:	e92d4800 	push	{fp, lr}
  1361cc:	e28db004 	add	fp, sp, #4
  1361d0:	e24dd010 	sub	sp, sp, #16
  1361d4:	e50b0008 	str	r0, [fp, #-8]
  1361d8:	e50b100c 	str	r1, [fp, #-12]
  1361dc:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(handle);
  1361e0:	e51b3008 	ldr	r3, [fp, #-8]
  1361e4:	e3530000 	cmp	r3, #0
  1361e8:	1a000005 	bne	136204 <ENET_SetCallback+0x3c>
  1361ec:	e3002132 	movw	r2, #306	; 0x132
  1361f0:	e30a129c 	movw	r1, #41628	; 0xa29c
  1361f4:	e3401014 	movt	r1, #20
  1361f8:	e3090f20 	movw	r0, #40736	; 0x9f20
  1361fc:	e3400014 	movt	r0, #20
  136200:	ebff34e4 	bl	103598 <rt_assert_handler>

    /* Set callback and userData. */
    handle->callback = callback;
  136204:	e51b3008 	ldr	r3, [fp, #-8]
  136208:	e51b200c 	ldr	r2, [fp, #-12]
  13620c:	e5832018 	str	r2, [r3, #24]
    handle->userData = userData;
  136210:	e51b3008 	ldr	r3, [fp, #-8]
  136214:	e51b2010 	ldr	r2, [fp, #-16]
  136218:	e583201c 	str	r2, [r3, #28]
}
  13621c:	e320f000 	nop	{0}
  136220:	e24bd004 	sub	sp, fp, #4
  136224:	e8bd8800 	pop	{fp, pc}

00136228 <ENET_SetHandler>:

static void ENET_SetHandler(ENET_Type *base,
                            enet_handle_t *handle,
                            const enet_config_t *config,
                            const enet_buffer_config_t *bufferConfig)
{
  136228:	e92d4800 	push	{fp, lr}
  13622c:	e28db004 	add	fp, sp, #4
  136230:	e24dd018 	sub	sp, sp, #24
  136234:	e50b0010 	str	r0, [fp, #-16]
  136238:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  13623c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136240:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    // struct rt_imx6ul_ethps *imx6ul_device = rt_container_of(config,struct rt_imx6ul_ethps,config);
    uint32_t instance = get_instance_by_base(base);
  136244:	e51b0010 	ldr	r0, [fp, #-16]
  136248:	ebfffc85 	bl	135464 <get_instance_by_base>
  13624c:	e1a03000 	mov	r3, r0
  136250:	e50b3008 	str	r3, [fp, #-8]
    memset(handle, 0, sizeof(enet_handle_t));
  136254:	e3a02020 	mov	r2, #32
  136258:	e3a01000 	mov	r1, #0
  13625c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  136260:	eb002c05 	bl	14127c <memset>
    handle->rxBdBase = bufferConfig->rxBdStartAddrAlign;
  136264:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136268:	e593200c 	ldr	r2, [r3, #12]
  13626c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136270:	e5832000 	str	r2, [r3]
    handle->rxBdCurrent = bufferConfig->rxBdStartAddrAlign;
  136274:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136278:	e593200c 	ldr	r2, [r3, #12]
  13627c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136280:	e5832004 	str	r2, [r3, #4]
    handle->txBdBase = bufferConfig->txBdStartAddrAlign;
  136284:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136288:	e5932010 	ldr	r2, [r3, #16]
  13628c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136290:	e5832008 	str	r2, [r3, #8]
    handle->txBdCurrent = bufferConfig->txBdStartAddrAlign;
  136294:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136298:	e5932010 	ldr	r2, [r3, #16]
  13629c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1362a0:	e583200c 	str	r2, [r3, #12]
    handle->rxBuffSizeAlign = bufferConfig->rxBuffSizeAlign;
  1362a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1362a8:	e5932004 	ldr	r2, [r3, #4]
  1362ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1362b0:	e5832010 	str	r2, [r3, #16]
    handle->txBuffSizeAlign = bufferConfig->txBuffSizeAlign;
  1362b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1362b8:	e5932008 	ldr	r2, [r3, #8]
  1362bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1362c0:	e5832014 	str	r2, [r3, #20]

    /* Save the handle pointer in the global variables. */
    s_ENETHandle[instance] = handle;
  1362c4:	e30e3c08 	movw	r3, #60424	; 0xec08
  1362c8:	e3403014 	movt	r3, #20
  1362cc:	e51b2008 	ldr	r2, [fp, #-8]
  1362d0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1362d4:	e7831102 	str	r1, [r3, r2, lsl #2]
    // if (config->interrupt & ENET_ERR_INTERRUPT)
    // {
    //     s_enetErrIsr = ENET_ErrorIRQHandler;
    //     EnableIRQ(imx6ul_device->irq_num);
    // }
}
  1362d8:	e320f000 	nop	{0}
  1362dc:	e24bd004 	sub	sp, fp, #4
  1362e0:	e8bd8800 	pop	{fp, pc}

001362e4 <ENET_SetMacController>:
static void ENET_SetMacController(ENET_Type *base,
                                  const enet_config_t *config,
                                  const enet_buffer_config_t *bufferConfig,
                                  uint8_t *macAddr,
                                  uint32_t srcClock_Hz)
{
  1362e4:	e92d4800 	push	{fp, lr}
  1362e8:	e28db004 	add	fp, sp, #4
  1362ec:	e24dd030 	sub	sp, sp, #48	; 0x30
  1362f0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1362f4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1362f8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  1362fc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    uint32_t rcr = 0;
  136300:	e3a03000 	mov	r3, #0
  136304:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = 0;
  136308:	e3a03000 	mov	r3, #0
  13630c:	e50b3010 	str	r3, [fp, #-16]
    uint32_t ecr = 0;
  136310:	e3a03000 	mov	r3, #0
  136314:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t macSpecialConfig = config->macSpecialConfig;
  136318:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13631c:	e5933000 	ldr	r3, [r3]
  136320:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    uint32_t maxFrameLen = config->rxMaxFrameLen;
  136324:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136328:	e1d330b8 	ldrh	r3, [r3, #8]
  13632c:	e50b300c 	str	r3, [fp, #-12]

    /* Maximum frame length check. */
    if ((macSpecialConfig & kENET_ControlVLANTagEnable) && (maxFrameLen <= ENET_FRAME_MAX_FRAMELEN))
  136330:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136334:	e2033c02 	and	r3, r3, #512	; 0x200
  136338:	e3530000 	cmp	r3, #0
  13633c:	0a000005 	beq	136358 <ENET_SetMacController+0x74>
  136340:	e51b300c 	ldr	r3, [fp, #-12]
  136344:	e30025ee 	movw	r2, #1518	; 0x5ee
  136348:	e1530002 	cmp	r3, r2
  13634c:	8a000001 	bhi	136358 <ENET_SetMacController+0x74>
    {
        maxFrameLen = (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN);
  136350:	e30035f2 	movw	r3, #1522	; 0x5f2
  136354:	e50b300c 	str	r3, [fp, #-12]
    }

    /* Configures MAC receive controller with user configure structure. */
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  136358:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13635c:	e1a03e83 	lsl	r3, r3, #29
  136360:	e2032101 	and	r2, r3, #1073741824	; 0x40000000
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136364:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136368:	e1a03783 	lsl	r3, r3, #15
  13636c:	e6ff3073 	uxth	r3, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  136370:	e1822003 	orr	r2, r2, r3
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136374:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136378:	e1a03283 	lsl	r3, r3, #5
  13637c:	e2033020 	and	r3, r3, #32
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136380:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  136384:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136388:	e1a03503 	lsl	r3, r3, #10
  13638c:	e2033a01 	and	r3, r3, #4096	; 0x1000
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136390:	e1822003 	orr	r2, r2, r3
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  136394:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136398:	e1a03083 	lsl	r3, r3, #1
  13639c:	e2033010 	and	r3, r3, #16
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  1363a0:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  1363a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1363a8:	e1a03223 	lsr	r3, r3, #4
  1363ac:	e2033008 	and	r3, r3, #8
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  1363b0:	e1822003 	orr	r2, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  1363b4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1363b8:	e593300c 	ldr	r3, [r3, #12]
  1363bc:	e1a03403 	lsl	r3, r3, #8
  1363c0:	e2033c01 	and	r3, r3, #256	; 0x100
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  1363c4:	e1823003 	orr	r3, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  1363c8:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1363cc:	e5922010 	ldr	r2, [r2, #16]
  1363d0:	e3520000 	cmp	r2, #0
  1363d4:	1a000001 	bne	1363e0 <ENET_SetMacController+0xfc>
  1363d8:	e3a02c02 	mov	r2, #512	; 0x200
  1363dc:	ea000000 	b	1363e4 <ENET_SetMacController+0x100>
  1363e0:	e3a02000 	mov	r2, #0
  1363e4:	e1822003 	orr	r2, r2, r3
          ENET_RCR_MAX_FL(maxFrameLen) | ENET_RCR_CRCFWD(1);
  1363e8:	e51b300c 	ldr	r3, [fp, #-12]
  1363ec:	e1a01803 	lsl	r1, r3, #16
  1363f0:	e3a03000 	mov	r3, #0
  1363f4:	e3433fff 	movt	r3, #16383	; 0x3fff
  1363f8:	e0033001 	and	r3, r3, r1
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  1363fc:	e1823003 	orr	r3, r2, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  136400:	e3833901 	orr	r3, r3, #16384	; 0x4000
  136404:	e3833004 	orr	r3, r3, #4
  136408:	e50b3008 	str	r3, [fp, #-8]
    /* Receive setting for half duplex. */
    if (config->miiDuplex == kENET_MiiHalfDuplex)
  13640c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136410:	e5933014 	ldr	r3, [r3, #20]
  136414:	e3530000 	cmp	r3, #0
  136418:	1a000002 	bne	136428 <ENET_SetMacController+0x144>
    {
        rcr |= ENET_RCR_DRT_MASK;
  13641c:	e51b3008 	ldr	r3, [fp, #-8]
  136420:	e3833002 	orr	r3, r3, #2
  136424:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Sets internal loop only for MII mode. */
    if ((config->macSpecialConfig & kENET_ControlMIILoopEnable) && (config->miiMode == kENET_MiiMode))
  136428:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13642c:	e5933000 	ldr	r3, [r3]
  136430:	e2033c01 	and	r3, r3, #256	; 0x100
  136434:	e3530000 	cmp	r3, #0
  136438:	0a000009 	beq	136464 <ENET_SetMacController+0x180>
  13643c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136440:	e593300c 	ldr	r3, [r3, #12]
  136444:	e3530000 	cmp	r3, #0
  136448:	1a000005 	bne	136464 <ENET_SetMacController+0x180>
    {
        rcr |= ENET_RCR_LOOP_MASK;
  13644c:	e51b3008 	ldr	r3, [fp, #-8]
  136450:	e3833001 	orr	r3, r3, #1
  136454:	e50b3008 	str	r3, [fp, #-8]
        rcr &= ~ENET_RCR_DRT_MASK;
  136458:	e51b3008 	ldr	r3, [fp, #-8]
  13645c:	e3c33002 	bic	r3, r3, #2
  136460:	e50b3008 	str	r3, [fp, #-8]
    }
    base->RCR = rcr;
  136464:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136468:	e51b2008 	ldr	r2, [fp, #-8]
  13646c:	e5832084 	str	r2, [r3, #132]	; 0x84

    /* Configures MAC transmit controller: duplex mode, mac address insertion. */
    tcr = base->TCR & ~(ENET_TCR_FDEN_MASK | ENET_TCR_ADDINS_MASK);
  136470:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136474:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  136478:	e3c33f41 	bic	r3, r3, #260	; 0x104
  13647c:	e50b3010 	str	r3, [fp, #-16]
    tcr |= ENET_TCR_FDEN(config->miiDuplex) | ENET_TCR_ADDINS(!!(macSpecialConfig & kENET_ControlMacAddrInsert));
  136480:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136484:	e5933014 	ldr	r3, [r3, #20]
  136488:	e1a03103 	lsl	r3, r3, #2
  13648c:	e2032004 	and	r2, r3, #4
  136490:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136494:	e1a03203 	lsl	r3, r3, #4
  136498:	e2033c01 	and	r3, r3, #256	; 0x100
  13649c:	e1823003 	orr	r3, r2, r3
  1364a0:	e51b2010 	ldr	r2, [fp, #-16]
  1364a4:	e1823003 	orr	r3, r2, r3
  1364a8:	e50b3010 	str	r3, [fp, #-16]
    base->TCR = tcr;
  1364ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1364b0:	e51b2010 	ldr	r2, [fp, #-16]
  1364b4:	e58320c4 	str	r2, [r3, #196]	; 0xc4

    /* Configures receive and transmit accelerator. */
    base->TACC = config->txAccelerConfig;
  1364b8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1364bc:	e5d33019 	ldrb	r3, [r3, #25]
  1364c0:	e1a02003 	mov	r2, r3
  1364c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1364c8:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    base->RACC = config->rxAccelerConfig;
  1364cc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1364d0:	e5d33018 	ldrb	r3, [r3, #24]
  1364d4:	e1a02003 	mov	r2, r3
  1364d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1364dc:	e58321c4 	str	r2, [r3, #452]	; 0x1c4

    /* Sets the pause duration and FIFO threshold for the flow control enabled case. */
    if (macSpecialConfig & kENET_ControlFlowControlEnable)
  1364e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1364e4:	e2033001 	and	r3, r3, #1
  1364e8:	e3530000 	cmp	r3, #0
  1364ec:	0a00000a 	beq	13651c <ENET_SetMacController+0x238>
    {
        uint32_t reemReg;
        base->OPD = config->pauseDuration;
  1364f0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1364f4:	e1d331ba 	ldrh	r3, [r3, #26]
  1364f8:	e1a02003 	mov	r2, r3
  1364fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136500:	e58320ec 	str	r2, [r3, #236]	; 0xec
        reemReg = ENET_RSEM_RX_SECTION_EMPTY(config->rxFifoEmptyThreshold);
  136504:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136508:	e5d3301c 	ldrb	r3, [r3, #28]
  13650c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if defined (FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD) && FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD
        reemReg |= ENET_RSEM_STAT_SECTION_EMPTY(config->rxFifoStatEmptyThreshold);
#endif /* FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD */
        base->RSEM = reemReg;
  136510:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136514:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136518:	e5832194 	str	r2, [r3, #404]	; 0x194
    }

    /* FIFO threshold setting for store and forward enable/disable case. */
    if (macSpecialConfig & kENET_ControlStoreAndFwdDisable)
  13651c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136520:	e2033020 	and	r3, r3, #32
  136524:	e3530000 	cmp	r3, #0
  136528:	0a00000a 	beq	136558 <ENET_SetMacController+0x274>
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = config->txFifoWatermark & ENET_TFWR_TFWR_MASK;
  13652c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136530:	e5d3301e 	ldrb	r3, [r3, #30]
  136534:	e203203f 	and	r2, r3, #63	; 0x3f
  136538:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13653c:	e5832144 	str	r2, [r3, #324]	; 0x144
        /* Receive fifo full threshold settings. */
        base->RSFL = config->rxFifoFullThreshold & ENET_RSFL_RX_SECTION_FULL_MASK;
  136540:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136544:	e5d3301d 	ldrb	r3, [r3, #29]
  136548:	e1a02003 	mov	r2, r3
  13654c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136550:	e5832190 	str	r2, [r3, #400]	; 0x190
  136554:	ea000005 	b	136570 <ENET_SetMacController+0x28c>
    }
    else
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  136558:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13655c:	e3a02c01 	mov	r2, #256	; 0x100
  136560:	e5832144 	str	r2, [r3, #324]	; 0x144
        base->RSFL = 0;
  136564:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136568:	e3a02000 	mov	r2, #0
  13656c:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Enable store and forward when accelerator is enabled */
    if (config->txAccelerConfig & (kENET_TxAccelIpCheckEnabled | kENET_TxAccelProtoCheckEnabled))
  136570:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136574:	e5d33019 	ldrb	r3, [r3, #25]
  136578:	e2033018 	and	r3, r3, #24
  13657c:	e3530000 	cmp	r3, #0
  136580:	0a000002 	beq	136590 <ENET_SetMacController+0x2ac>
    {
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  136584:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136588:	e3a02c01 	mov	r2, #256	; 0x100
  13658c:	e5832144 	str	r2, [r3, #324]	; 0x144
    }
    if (config->rxAccelerConfig & (kENET_RxAccelIpCheckEnabled | kENET_RxAccelProtoCheckEnabled))
  136590:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136594:	e5d33018 	ldrb	r3, [r3, #24]
  136598:	e2033006 	and	r3, r3, #6
  13659c:	e3530000 	cmp	r3, #0
  1365a0:	0a000002 	beq	1365b0 <ENET_SetMacController+0x2cc>
    {
        base->RSFL = 0;
  1365a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1365a8:	e3a02000 	mov	r2, #0
  1365ac:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Initializes transmit buffer descriptor rings start address, two start address should be aligned. */
    base->TDSR = (uint32_t)bufferConfig->txPhyBdStartAddrAlign;
  1365b0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1365b4:	e5933020 	ldr	r3, [r3, #32]
  1365b8:	e1a02003 	mov	r2, r3
  1365bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1365c0:	e5832184 	str	r2, [r3, #388]	; 0x184
    base->RDSR = (uint32_t)bufferConfig->rxPhyBdStartAddrAlign;
  1365c4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1365c8:	e593301c 	ldr	r3, [r3, #28]
  1365cc:	e1a02003 	mov	r2, r3
  1365d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1365d4:	e5832180 	str	r2, [r3, #384]	; 0x180

    /* Initializes the maximum buffer size, the buffer size should be aligned. */

    base->MRBR = ENET_MRBR_R_BUF_SIZE(bufferConfig->rxBuffSizeAlign);
  1365d8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1365dc:	e5933004 	ldr	r3, [r3, #4]
  1365e0:	e1a02203 	lsl	r2, r3, #4
  1365e4:	e3033ff0 	movw	r3, #16368	; 0x3ff0
  1365e8:	e0033002 	and	r3, r3, r2
  1365ec:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1365f0:	e5823188 	str	r3, [r2, #392]	; 0x188

    /* Configures the Mac address. */
    ENET_SetMacAddr(base, macAddr);
  1365f4:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1365f8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1365fc:	eb00011e 	bl	136a7c <ENET_SetMacAddr>

    /* Initialize the SMI if uninitialized. */
    if (!ENET_GetSMI(base))
  136600:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  136604:	ebfffda0 	bl	135c8c <ENET_GetSMI>
  136608:	e1a03000 	mov	r3, r0
  13660c:	e2233001 	eor	r3, r3, #1
  136610:	e6ef3073 	uxtb	r3, r3
  136614:	e3530000 	cmp	r3, #0
  136618:	0a00000a 	beq	136648 <ENET_SetMacController+0x364>
    {
        ENET_SetSMI(base, srcClock_Hz, !!(config->macSpecialConfig & kENET_ControlSMIPreambleDisable));
  13661c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136620:	e5933000 	ldr	r3, [r3]
  136624:	e2033040 	and	r3, r3, #64	; 0x40
  136628:	e3530000 	cmp	r3, #0
  13662c:	13a03001 	movne	r3, #1
  136630:	03a03000 	moveq	r3, #0
  136634:	e6ef3073 	uxtb	r3, r3
  136638:	e1a02003 	mov	r2, r3
  13663c:	e59b1004 	ldr	r1, [fp, #4]
  136640:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  136644:	eb000171 	bl	136c10 <ENET_SetSMI>
    }
/* Enables Ethernet interrupt and NVIC. */
#if defined(FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    if (config->intCoalesceCfg)
  136648:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13664c:	e5933020 	ldr	r3, [r3, #32]
  136650:	e3530000 	cmp	r3, #0
  136654:	0a000020 	beq	1366dc <ENET_SetMacController+0x3f8>
    {
        uint32_t intMask = (ENET_EIMR_TXB_MASK | ENET_EIMR_RXB_MASK);
  136658:	e3a03405 	mov	r3, #83886080	; 0x5000000
  13665c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

        /* Clear all buffer interrupts. */
        base->EIMR &= ~intMask;
  136660:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136664:	e5932008 	ldr	r2, [r3, #8]
  136668:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13666c:	e1e03003 	mvn	r3, r3
  136670:	e0022003 	and	r2, r2, r3
  136674:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136678:	e5832008 	str	r2, [r3, #8]
        /* Set the interrupt coalescence. */
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  13667c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136680:	e5933020 	ldr	r3, [r3, #32]
  136684:	e5d33000 	ldrb	r3, [r3]
  136688:	e1a03a03 	lsl	r3, r3, #20
  13668c:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  136690:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  136694:	e5922020 	ldr	r2, [r2, #32]
  136698:	e1d220b2 	ldrh	r2, [r2, #2]
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  13669c:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  1366a0:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  1366a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1366a8:	e58320f0 	str	r2, [r3, #240]	; 0xf0
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  1366ac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1366b0:	e5933020 	ldr	r3, [r3, #32]
  1366b4:	e5d33004 	ldrb	r3, [r3, #4]
  1366b8:	e1a03a03 	lsl	r3, r3, #20
  1366bc:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  1366c0:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1366c4:	e5922020 	ldr	r2, [r2, #32]
  1366c8:	e1d220b6 	ldrh	r2, [r2, #6]
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  1366cc:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  1366d0:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  1366d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1366d8:	e5832100 	str	r2, [r3, #256]	; 0x100
    }
#endif /* FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE */
    ENET_EnableInterrupts(base, config->interrupt);
  1366dc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1366e0:	e5933004 	ldr	r3, [r3, #4]
  1366e4:	e1a01003 	mov	r1, r3
  1366e8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1366ec:	ebfffd8d 	bl	135d28 <ENET_EnableInterrupts>

    /* ENET control register setting. */
    ecr = base->ECR;
  1366f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1366f4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1366f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    /* Enables Ethernet module after all configuration except the buffer descriptor active. */
    ecr |= ENET_ECR_ETHEREN_MASK | ENET_ECR_DBSWP_MASK;
  1366fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136700:	e3833c01 	orr	r3, r3, #256	; 0x100
  136704:	e3833002 	orr	r3, r3, #2
  136708:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    base->ECR = ecr;
  13670c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136710:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136714:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  136718:	e320f000 	nop	{0}
  13671c:	e24bd004 	sub	sp, fp, #4
  136720:	e8bd8800 	pop	{fp, pc}

00136724 <ENET_SetTxBufferDescriptors>:
static void ENET_SetTxBufferDescriptors(volatile enet_tx_bd_struct_t *txBdStartAlign,
                                        uint8_t *txBuffStartAlign,
                                        uint8_t *txBuffStartAlign_vaddr,
                                        uint32_t txBuffSizeAlign,
                                        uint32_t txBdNumber)
{
  136724:	e92d4800 	push	{fp, lr}
  136728:	e28db004 	add	fp, sp, #4
  13672c:	e24dd018 	sub	sp, sp, #24
  136730:	e50b0010 	str	r0, [fp, #-16]
  136734:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136738:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  13673c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(txBdStartAlign);
  136740:	e51b3010 	ldr	r3, [fp, #-16]
  136744:	e3530000 	cmp	r3, #0
  136748:	1a000005 	bne	136764 <ENET_SetTxBufferDescriptors+0x40>
  13674c:	e30021e2 	movw	r2, #482	; 0x1e2
  136750:	e30a12b0 	movw	r1, #41648	; 0xa2b0
  136754:	e3401014 	movt	r1, #20
  136758:	e30a0110 	movw	r0, #41232	; 0xa110
  13675c:	e3400014 	movt	r0, #20
  136760:	ebff338c 	bl	103598 <rt_assert_handler>
    RT_ASSERT(txBuffStartAlign);
  136764:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136768:	e3530000 	cmp	r3, #0
  13676c:	1a000005 	bne	136788 <ENET_SetTxBufferDescriptors+0x64>
  136770:	e30021e3 	movw	r2, #483	; 0x1e3
  136774:	e30a12b0 	movw	r1, #41648	; 0xa2b0
  136778:	e3401014 	movt	r1, #20
  13677c:	e30a0120 	movw	r0, #41248	; 0xa120
  136780:	e3400014 	movt	r0, #20
  136784:	ebff3383 	bl	103598 <rt_assert_handler>
    uint32_t count;
    volatile enet_tx_bd_struct_t *curBuffDescrip = txBdStartAlign;
  136788:	e51b3010 	ldr	r3, [fp, #-16]
  13678c:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  136790:	e3a03000 	mov	r3, #0
  136794:	e50b3008 	str	r3, [fp, #-8]
  136798:	ea00002c 	b	136850 <ENET_SetTxBufferDescriptors+0x12c>
        /* Set data buffer address. */
        // curBuffDescrip->buffer = (uint8_t *)((uint32_t)&txBuffStartAlign[(-1) * count * txBuffSizeAlign]);
        // curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        // curBuffDescrip->buffer_vaddr = (uint8_t *)((uint32_t)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        // buffer_vaddr_tx[count] = (uint8_t *)((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
  13679c:	e51b3008 	ldr	r3, [fp, #-8]
  1367a0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1367a4:	e0030392 	mul	r3, r2, r3
  1367a8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1367ac:	e0823003 	add	r3, r2, r3
  1367b0:	e1a00003 	mov	r0, r3
  1367b4:	ebff3711 	bl	104400 <ueth_v2p>
  1367b8:	e1a02000 	mov	r2, r0
  1367bc:	e51b300c 	ldr	r3, [fp, #-12]
  1367c0:	e5832004 	str	r2, [r3, #4]
        buffer_vaddr_tx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, txBuffSizeAlign);
  1367c4:	e51b300c 	ldr	r3, [fp, #-12]
  1367c8:	e5933004 	ldr	r3, [r3, #4]
  1367cc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1367d0:	e3a01003 	mov	r1, #3
  1367d4:	e1a00003 	mov	r0, r3
  1367d8:	ebff3735 	bl	1044b4 <ueth_remap>
  1367dc:	e1a01000 	mov	r1, r0
  1367e0:	e30e3e54 	movw	r3, #61012	; 0xee54
  1367e4:	e3403056 	movt	r3, #86	; 0x56
  1367e8:	e51b2008 	ldr	r2, [fp, #-8]
  1367ec:	e7831102 	str	r1, [r3, r2, lsl #2]
        /* Initializes data length. */
        curBuffDescrip->length = 0;
  1367f0:	e51b300c 	ldr	r3, [fp, #-12]
  1367f4:	e3a02000 	mov	r2, #0
  1367f8:	e1c320b0 	strh	r2, [r3]
        /* Sets the crc. */
        curBuffDescrip->control = (ENET_BUFFDESCRIPTOR_TX_TRANMITCRC_MASK);
  1367fc:	e51b300c 	ldr	r3, [fp, #-12]
  136800:	e3a02b01 	mov	r2, #1024	; 0x400
  136804:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == txBdNumber - 1)
  136808:	e59b3004 	ldr	r3, [fp, #4]
  13680c:	e2433001 	sub	r3, r3, #1
  136810:	e51b2008 	ldr	r2, [fp, #-8]
  136814:	e1520003 	cmp	r2, r3
  136818:	1a000006 	bne	136838 <ENET_SetTxBufferDescriptors+0x114>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_WRAP_MASK;
  13681c:	e51b300c 	ldr	r3, [fp, #-12]
  136820:	e1d330b2 	ldrh	r3, [r3, #2]
  136824:	e6ff3073 	uxth	r3, r3
  136828:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  13682c:	e6ff2073 	uxth	r2, r3
  136830:	e51b300c 	ldr	r3, [fp, #-12]
  136834:	e1c320b2 	strh	r2, [r3, #2]

        /* Add cache clean operation. */
        // rt_hw_cpu_dcache_clean((void *)curBuffDescrip, sizeof(enet_tx_bd_struct_t));
        // ueth_dcache_clean((void *)curBuffDescrip, sizeof(enet_tx_bd_struct_t));
        /* Increase the index. */
        curBuffDescrip++;
  136838:	e51b300c 	ldr	r3, [fp, #-12]
  13683c:	e2833008 	add	r3, r3, #8
  136840:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  136844:	e51b3008 	ldr	r3, [fp, #-8]
  136848:	e2833001 	add	r3, r3, #1
  13684c:	e50b3008 	str	r3, [fp, #-8]
  136850:	e51b2008 	ldr	r2, [fp, #-8]
  136854:	e59b3004 	ldr	r3, [fp, #4]
  136858:	e1520003 	cmp	r2, r3
  13685c:	3affffce 	bcc	13679c <ENET_SetTxBufferDescriptors+0x78>
    }
}
  136860:	e320f000 	nop	{0}
  136864:	e24bd004 	sub	sp, fp, #4
  136868:	e8bd8800 	pop	{fp, pc}

0013686c <ENET_SetRxBufferDescriptors>:
                                        uint8_t *rxBuffStartAlign,
                                        uint8_t *rxBuffStartAlign_vaddr,
                                        uint32_t rxBuffSizeAlign,
                                        uint32_t rxBdNumber,
                                        bool enableInterrupt)
{
  13686c:	e92d4800 	push	{fp, lr}
  136870:	e28db004 	add	fp, sp, #4
  136874:	e24dd018 	sub	sp, sp, #24
  136878:	e50b0010 	str	r0, [fp, #-16]
  13687c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136880:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136884:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(rxBdStartAlign);
  136888:	e51b3010 	ldr	r3, [fp, #-16]
  13688c:	e3530000 	cmp	r3, #0
  136890:	1a000005 	bne	1368ac <ENET_SetRxBufferDescriptors+0x40>
  136894:	e3002209 	movw	r2, #521	; 0x209
  136898:	e30a12cc 	movw	r1, #41676	; 0xa2cc
  13689c:	e3401014 	movt	r1, #20
  1368a0:	e30a0134 	movw	r0, #41268	; 0xa134
  1368a4:	e3400014 	movt	r0, #20
  1368a8:	ebff333a 	bl	103598 <rt_assert_handler>
    RT_ASSERT(rxBuffStartAlign);
  1368ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1368b0:	e3530000 	cmp	r3, #0
  1368b4:	1a000005 	bne	1368d0 <ENET_SetRxBufferDescriptors+0x64>
  1368b8:	e300220a 	movw	r2, #522	; 0x20a
  1368bc:	e30a12cc 	movw	r1, #41676	; 0xa2cc
  1368c0:	e3401014 	movt	r1, #20
  1368c4:	e30a0144 	movw	r0, #41284	; 0xa144
  1368c8:	e3400014 	movt	r0, #20
  1368cc:	ebff3331 	bl	103598 <rt_assert_handler>

    volatile enet_rx_bd_struct_t *curBuffDescrip = rxBdStartAlign;
  1368d0:	e51b3010 	ldr	r3, [fp, #-16]
  1368d4:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count = 0;
  1368d8:	e3a03000 	mov	r3, #0
  1368dc:	e50b300c 	str	r3, [fp, #-12]

    /* Initializes receive buffer descriptors. */
    for (count = 0; count < rxBdNumber; count++)
  1368e0:	e3a03000 	mov	r3, #0
  1368e4:	e50b300c 	str	r3, [fp, #-12]
  1368e8:	ea00002c 	b	1369a0 <ENET_SetRxBufferDescriptors+0x134>
    {
        /* Set data buffer and the length. */
        // curBuffDescrip->buffer = (uint8_t *)((void *)&rxBuffStartAlign[(-1) * count * rxBuffSizeAlign]);
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&rxBuffStartAlign_vaddr[count * rxBuffSizeAlign]);
  1368ec:	e51b300c 	ldr	r3, [fp, #-12]
  1368f0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1368f4:	e0030392 	mul	r3, r2, r3
  1368f8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1368fc:	e0823003 	add	r3, r2, r3
  136900:	e1a00003 	mov	r0, r3
  136904:	ebff36bd 	bl	104400 <ueth_v2p>
  136908:	e1a02000 	mov	r2, r0
  13690c:	e51b3008 	ldr	r3, [fp, #-8]
  136910:	e5832004 	str	r2, [r3, #4]
        // curBuffDescrip->buffer_vaddr = (uint8_t *)((void *)&rxBuffStartAlign_vaddr[count * rxBuffSizeAlign]);
        buffer_vaddr_rx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, rxBuffSizeAlign);
  136914:	e51b3008 	ldr	r3, [fp, #-8]
  136918:	e5933004 	ldr	r3, [r3, #4]
  13691c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136920:	e3a01003 	mov	r1, #3
  136924:	e1a00003 	mov	r0, r3
  136928:	ebff36e1 	bl	1044b4 <ueth_remap>
  13692c:	e1a01000 	mov	r1, r0
  136930:	e30e3c54 	movw	r3, #60500	; 0xec54
  136934:	e3403056 	movt	r3, #86	; 0x56
  136938:	e51b200c 	ldr	r2, [fp, #-12]
  13693c:	e7831102 	str	r1, [r3, r2, lsl #2]
        curBuffDescrip->length = 0;
  136940:	e51b3008 	ldr	r3, [fp, #-8]
  136944:	e3a02000 	mov	r2, #0
  136948:	e1c320b0 	strh	r2, [r3]
        /* Initializes the buffer descriptors with empty bit. */
        curBuffDescrip->control = ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  13694c:	e51b3008 	ldr	r3, [fp, #-8]
  136950:	e3a02902 	mov	r2, #32768	; 0x8000
  136954:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == rxBdNumber - 1)
  136958:	e59b3004 	ldr	r3, [fp, #4]
  13695c:	e2433001 	sub	r3, r3, #1
  136960:	e51b200c 	ldr	r2, [fp, #-12]
  136964:	e1520003 	cmp	r2, r3
  136968:	1a000006 	bne	136988 <ENET_SetRxBufferDescriptors+0x11c>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  13696c:	e51b3008 	ldr	r3, [fp, #-8]
  136970:	e1d330b2 	ldrh	r3, [r3, #2]
  136974:	e6ff3073 	uxth	r3, r3
  136978:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  13697c:	e6ff2073 	uxth	r2, r3
  136980:	e51b3008 	ldr	r3, [fp, #-8]
  136984:	e1c320b2 	strh	r2, [r3, #2]
        
#ifdef ENET_ENHANCEDBUFFERDESCRIPTOR_MODE
        curBuffDescrip->controlExtend1 |= ENET_BUFFDESCRIPTOR_RX_INTERRUPT_MASK;
#endif

        curBuffDescrip++;
  136988:	e51b3008 	ldr	r3, [fp, #-8]
  13698c:	e2833008 	add	r3, r3, #8
  136990:	e50b3008 	str	r3, [fp, #-8]
    for (count = 0; count < rxBdNumber; count++)
  136994:	e51b300c 	ldr	r3, [fp, #-12]
  136998:	e2833001 	add	r3, r3, #1
  13699c:	e50b300c 	str	r3, [fp, #-12]
  1369a0:	e51b200c 	ldr	r2, [fp, #-12]
  1369a4:	e59b3004 	ldr	r3, [fp, #4]
  1369a8:	e1520003 	cmp	r2, r3
  1369ac:	3affffce 	bcc	1368ec <ENET_SetRxBufferDescriptors+0x80>

    }
}
  1369b0:	e320f000 	nop	{0}
  1369b4:	e24bd004 	sub	sp, fp, #4
  1369b8:	e8bd8800 	pop	{fp, pc}

001369bc <ENET_SetMII>:

void ENET_SetMII(ENET_Type *base, enet_mii_speed_t speed, enet_mii_duplex_t duplex)
{
  1369bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1369c0:	e28db000 	add	fp, sp, #0
  1369c4:	e24dd01c 	sub	sp, sp, #28
  1369c8:	e50b0010 	str	r0, [fp, #-16]
  1369cc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1369d0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t rcr = base->RCR;
  1369d4:	e51b3010 	ldr	r3, [fp, #-16]
  1369d8:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  1369dc:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = base->TCR;
  1369e0:	e51b3010 	ldr	r3, [fp, #-16]
  1369e4:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  1369e8:	e50b300c 	str	r3, [fp, #-12]
    /* Sets speed mode. */
    if (kENET_MiiSpeed10M == speed)
  1369ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1369f0:	e3530000 	cmp	r3, #0
  1369f4:	1a000003 	bne	136a08 <ENET_SetMII+0x4c>
    {
        rcr |= ENET_RCR_RMII_10T_MASK;
  1369f8:	e51b3008 	ldr	r3, [fp, #-8]
  1369fc:	e3833c02 	orr	r3, r3, #512	; 0x200
  136a00:	e50b3008 	str	r3, [fp, #-8]
  136a04:	ea000002 	b	136a14 <ENET_SetMII+0x58>
    }
    else
    {
        rcr &= ~ENET_RCR_RMII_10T_MASK;
  136a08:	e51b3008 	ldr	r3, [fp, #-8]
  136a0c:	e3c33c02 	bic	r3, r3, #512	; 0x200
  136a10:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Set duplex mode. */
    if (duplex == kENET_MiiHalfDuplex)
  136a14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136a18:	e3530000 	cmp	r3, #0
  136a1c:	1a000006 	bne	136a3c <ENET_SetMII+0x80>
    {
        rcr |= ENET_RCR_DRT_MASK;
  136a20:	e51b3008 	ldr	r3, [fp, #-8]
  136a24:	e3833002 	orr	r3, r3, #2
  136a28:	e50b3008 	str	r3, [fp, #-8]
        tcr &= ~ENET_TCR_FDEN_MASK;
  136a2c:	e51b300c 	ldr	r3, [fp, #-12]
  136a30:	e3c33004 	bic	r3, r3, #4
  136a34:	e50b300c 	str	r3, [fp, #-12]
  136a38:	ea000005 	b	136a54 <ENET_SetMII+0x98>
    }
    else
    {
        rcr &= ~ENET_RCR_DRT_MASK;
  136a3c:	e51b3008 	ldr	r3, [fp, #-8]
  136a40:	e3c33002 	bic	r3, r3, #2
  136a44:	e50b3008 	str	r3, [fp, #-8]
        tcr |= ENET_TCR_FDEN_MASK;
  136a48:	e51b300c 	ldr	r3, [fp, #-12]
  136a4c:	e3833004 	orr	r3, r3, #4
  136a50:	e50b300c 	str	r3, [fp, #-12]
    }

    base->RCR = rcr;
  136a54:	e51b3010 	ldr	r3, [fp, #-16]
  136a58:	e51b2008 	ldr	r2, [fp, #-8]
  136a5c:	e5832084 	str	r2, [r3, #132]	; 0x84
    base->TCR = tcr;
  136a60:	e51b3010 	ldr	r3, [fp, #-16]
  136a64:	e51b200c 	ldr	r2, [fp, #-12]
  136a68:	e58320c4 	str	r2, [r3, #196]	; 0xc4
}
  136a6c:	e320f000 	nop	{0}
  136a70:	e28bd000 	add	sp, fp, #0
  136a74:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136a78:	e12fff1e 	bx	lr

00136a7c <ENET_SetMacAddr>:

void ENET_SetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  136a7c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136a80:	e28db000 	add	fp, sp, #0
  136a84:	e24dd014 	sub	sp, sp, #20
  136a88:	e50b0010 	str	r0, [fp, #-16]
  136a8c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    uint32_t address;

    /* Set physical address lower register. */
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  136a90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136a94:	e5d33000 	ldrb	r3, [r3]
  136a98:	e1a02c03 	lsl	r2, r3, #24
  136a9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136aa0:	e2833001 	add	r3, r3, #1
  136aa4:	e5d33000 	ldrb	r3, [r3]
  136aa8:	e1a03803 	lsl	r3, r3, #16
  136aac:	e1822003 	orr	r2, r2, r3
  136ab0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ab4:	e2833002 	add	r3, r3, #2
  136ab8:	e5d33000 	ldrb	r3, [r3]
  136abc:	e1a03403 	lsl	r3, r3, #8
  136ac0:	e1823003 	orr	r3, r2, r3
                         (uint32_t)macAddr[3]);
  136ac4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136ac8:	e2822003 	add	r2, r2, #3
  136acc:	e5d22000 	ldrb	r2, [r2]
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  136ad0:	e1833002 	orr	r3, r3, r2
  136ad4:	e50b3008 	str	r3, [fp, #-8]
    base->PALR = address;
  136ad8:	e51b3010 	ldr	r3, [fp, #-16]
  136adc:	e51b2008 	ldr	r2, [fp, #-8]
  136ae0:	e58320e4 	str	r2, [r3, #228]	; 0xe4
    /* Set physical address high register. */
    address = (uint32_t)(((uint32_t)macAddr[4] << 8U) | ((uint32_t)macAddr[5]));
  136ae4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ae8:	e2833004 	add	r3, r3, #4
  136aec:	e5d33000 	ldrb	r3, [r3]
  136af0:	e1a03403 	lsl	r3, r3, #8
  136af4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136af8:	e2822005 	add	r2, r2, #5
  136afc:	e5d22000 	ldrb	r2, [r2]
  136b00:	e1833002 	orr	r3, r3, r2
  136b04:	e50b3008 	str	r3, [fp, #-8]
    base->PAUR = address << ENET_PAUR_PADDR2_SHIFT;
  136b08:	e51b3008 	ldr	r3, [fp, #-8]
  136b0c:	e1a02803 	lsl	r2, r3, #16
  136b10:	e51b3010 	ldr	r3, [fp, #-16]
  136b14:	e58320e8 	str	r2, [r3, #232]	; 0xe8
}
  136b18:	e320f000 	nop	{0}
  136b1c:	e28bd000 	add	sp, fp, #0
  136b20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136b24:	e12fff1e 	bx	lr

00136b28 <ENET_GetMacAddr>:

void ENET_GetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  136b28:	e92d4800 	push	{fp, lr}
  136b2c:	e28db004 	add	fp, sp, #4
  136b30:	e24dd010 	sub	sp, sp, #16
  136b34:	e50b0010 	str	r0, [fp, #-16]
  136b38:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(macAddr);
  136b3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b40:	e3530000 	cmp	r3, #0
  136b44:	1a000005 	bne	136b60 <ENET_GetMacAddr+0x38>
  136b48:	e3002259 	movw	r2, #601	; 0x259
  136b4c:	e30a12e8 	movw	r1, #41704	; 0xa2e8
  136b50:	e3401014 	movt	r1, #20
  136b54:	e3090fb8 	movw	r0, #40888	; 0x9fb8
  136b58:	e3400014 	movt	r0, #20
  136b5c:	ebff328d 	bl	103598 <rt_assert_handler>

    uint32_t address;

    /* Get from physical address lower register. */
    address = base->PALR;
  136b60:	e51b3010 	ldr	r3, [fp, #-16]
  136b64:	e59330e4 	ldr	r3, [r3, #228]	; 0xe4
  136b68:	e50b3008 	str	r3, [fp, #-8]
    macAddr[0] = 0xFFU & (address >> 24U);
  136b6c:	e51b3008 	ldr	r3, [fp, #-8]
  136b70:	e1a03c23 	lsr	r3, r3, #24
  136b74:	e6ef2073 	uxtb	r2, r3
  136b78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b7c:	e5c32000 	strb	r2, [r3]
    macAddr[1] = 0xFFU & (address >> 16U);
  136b80:	e51b3008 	ldr	r3, [fp, #-8]
  136b84:	e1a02823 	lsr	r2, r3, #16
  136b88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b8c:	e2833001 	add	r3, r3, #1
  136b90:	e6ef2072 	uxtb	r2, r2
  136b94:	e5c32000 	strb	r2, [r3]
    macAddr[2] = 0xFFU & (address >> 8U);
  136b98:	e51b3008 	ldr	r3, [fp, #-8]
  136b9c:	e1a02423 	lsr	r2, r3, #8
  136ba0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ba4:	e2833002 	add	r3, r3, #2
  136ba8:	e6ef2072 	uxtb	r2, r2
  136bac:	e5c32000 	strb	r2, [r3]
    macAddr[3] = 0xFFU & address;
  136bb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136bb4:	e2833003 	add	r3, r3, #3
  136bb8:	e51b2008 	ldr	r2, [fp, #-8]
  136bbc:	e6ef2072 	uxtb	r2, r2
  136bc0:	e5c32000 	strb	r2, [r3]

    /* Get from physical address high register. */
    address = (base->PAUR & ENET_PAUR_PADDR2_MASK) >> ENET_PAUR_PADDR2_SHIFT;
  136bc4:	e51b3010 	ldr	r3, [fp, #-16]
  136bc8:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
  136bcc:	e1a03823 	lsr	r3, r3, #16
  136bd0:	e6ff3073 	uxth	r3, r3
  136bd4:	e50b3008 	str	r3, [fp, #-8]
    macAddr[4] = 0xFFU & (address >> 8U);
  136bd8:	e51b3008 	ldr	r3, [fp, #-8]
  136bdc:	e1a02423 	lsr	r2, r3, #8
  136be0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136be4:	e2833004 	add	r3, r3, #4
  136be8:	e6ef2072 	uxtb	r2, r2
  136bec:	e5c32000 	strb	r2, [r3]
    macAddr[5] = 0xFFU & address;
  136bf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136bf4:	e2833005 	add	r3, r3, #5
  136bf8:	e51b2008 	ldr	r2, [fp, #-8]
  136bfc:	e6ef2072 	uxtb	r2, r2
  136c00:	e5c32000 	strb	r2, [r3]
}
  136c04:	e320f000 	nop	{0}
  136c08:	e24bd004 	sub	sp, fp, #4
  136c0c:	e8bd8800 	pop	{fp, pc}

00136c10 <ENET_SetSMI>:

void ENET_SetSMI(ENET_Type *base, uint32_t srcClock_Hz, bool isPreambleDisabled)
{
  136c10:	e92d4810 	push	{r4, fp, lr}
  136c14:	e28db008 	add	fp, sp, #8
  136c18:	e24dd024 	sub	sp, sp, #36	; 0x24
  136c1c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  136c20:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  136c24:	e1a03002 	mov	r3, r2
  136c28:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    RT_ASSERT(srcClock_Hz);
  136c2c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  136c30:	e3530000 	cmp	r3, #0
  136c34:	1a000005 	bne	136c50 <ENET_SetSMI+0x40>
  136c38:	e3a02f9b 	mov	r2, #620	; 0x26c
  136c3c:	e30a12f8 	movw	r1, #41720	; 0xa2f8
  136c40:	e3401014 	movt	r1, #20
  136c44:	e30a0158 	movw	r0, #41304	; 0xa158
  136c48:	e3400014 	movt	r0, #20
  136c4c:	ebff3251 	bl	103598 <rt_assert_handler>

    uint32_t clkCycle = 0;
  136c50:	e3a03000 	mov	r3, #0
  136c54:	e50b3010 	str	r3, [fp, #-16]
    uint32_t speed = 0;
  136c58:	e3a03000 	mov	r3, #0
  136c5c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t mscr = 0;
  136c60:	e3a03000 	mov	r3, #0
  136c64:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    /* Calculate the MII speed which controls the frequency of the MDC. */
    speed = srcClock_Hz / (2 * ENET_MDC_FREQUENCY);
  136c68:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  136c6c:	e30c3a6b 	movw	r3, #51819	; 0xca6b
  136c70:	e3463b5f 	movt	r3, #27487	; 0x6b5f
  136c74:	e0832392 	umull	r2, r3, r2, r3
  136c78:	e1a03aa3 	lsr	r3, r3, #21
  136c7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Calculate the hold time on the MDIO output. */
    clkCycle = (10 + ENET_NANOSECOND_ONE_SECOND / srcClock_Hz - 1) / (ENET_NANOSECOND_ONE_SECOND / srcClock_Hz) - 1;
  136c80:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  136c84:	e3a00cca 	mov	r0, #51712	; 0xca00
  136c88:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  136c8c:	eb0006fa 	bl	13887c <__udivsi3>
  136c90:	e1a03000 	mov	r3, r0
  136c94:	e2834009 	add	r4, r3, #9
  136c98:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  136c9c:	e3a00cca 	mov	r0, #51712	; 0xca00
  136ca0:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  136ca4:	eb0006f4 	bl	13887c <__udivsi3>
  136ca8:	e1a03000 	mov	r3, r0
  136cac:	e1a01003 	mov	r1, r3
  136cb0:	e1a00004 	mov	r0, r4
  136cb4:	eb0006f0 	bl	13887c <__udivsi3>
  136cb8:	e1a03000 	mov	r3, r0
  136cbc:	e2433001 	sub	r3, r3, #1
  136cc0:	e50b3010 	str	r3, [fp, #-16]
    /* Build the configuration for MDC/MDIO control. */
    mscr = ENET_MSCR_MII_SPEED(speed) | ENET_MSCR_DIS_PRE(isPreambleDisabled) | ENET_MSCR_HOLDTIME(clkCycle);
  136cc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136cc8:	e1a03083 	lsl	r3, r3, #1
  136ccc:	e203207e 	and	r2, r3, #126	; 0x7e
  136cd0:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  136cd4:	e1a03383 	lsl	r3, r3, #7
  136cd8:	e6ef3073 	uxtb	r3, r3
  136cdc:	e1822003 	orr	r2, r2, r3
  136ce0:	e51b3010 	ldr	r3, [fp, #-16]
  136ce4:	e1a03403 	lsl	r3, r3, #8
  136ce8:	e2033c07 	and	r3, r3, #1792	; 0x700
  136cec:	e1823003 	orr	r3, r2, r3
  136cf0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base->MSCR = mscr;
  136cf4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  136cf8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  136cfc:	e5832044 	str	r2, [r3, #68]	; 0x44
}
  136d00:	e320f000 	nop	{0}
  136d04:	e24bd008 	sub	sp, fp, #8
  136d08:	e8bd8810 	pop	{r4, fp, pc}

00136d0c <ENET_StartSMIWrite>:

void ENET_StartSMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_write_t operation, uint32_t data)
{
  136d0c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136d10:	e28db000 	add	fp, sp, #0
  136d14:	e24dd01c 	sub	sp, sp, #28
  136d18:	e50b0010 	str	r0, [fp, #-16]
  136d1c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136d20:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136d24:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136d28:	e3a03000 	mov	r3, #0
  136d2c:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  136d30:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136d34:	e1a03e03 	lsl	r3, r3, #28
  136d38:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  136d3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d40:	e1a03b83 	lsl	r3, r3, #23
  136d44:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  136d48:	e1822003 	orr	r2, r2, r3
  136d4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136d50:	e1a03903 	lsl	r3, r3, #18
  136d54:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136d58:	e1822003 	orr	r2, r2, r3
           (data & 0xFFFF);
  136d5c:	e59b3004 	ldr	r3, [fp, #4]
  136d60:	e6ff3073 	uxth	r3, r3
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  136d64:	e1823003 	orr	r3, r2, r3
  136d68:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  136d6c:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136d70:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136d74:	e51b3010 	ldr	r3, [fp, #-16]
  136d78:	e51b2008 	ldr	r2, [fp, #-8]
  136d7c:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136d80:	e320f000 	nop	{0}
  136d84:	e28bd000 	add	sp, fp, #0
  136d88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136d8c:	e12fff1e 	bx	lr

00136d90 <ENET_StartSMIRead>:

void ENET_StartSMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_read_t operation)
{
  136d90:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136d94:	e28db000 	add	fp, sp, #0
  136d98:	e24dd01c 	sub	sp, sp, #28
  136d9c:	e50b0010 	str	r0, [fp, #-16]
  136da0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136da4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136da8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136dac:	e3a03000 	mov	r3, #0
  136db0:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2);
  136db4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136db8:	e1a03e03 	lsl	r3, r3, #28
  136dbc:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  136dc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136dc4:	e1a03b83 	lsl	r3, r3, #23
  136dc8:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  136dcc:	e1822003 	orr	r2, r2, r3
  136dd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136dd4:	e1a03903 	lsl	r3, r3, #18
  136dd8:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136ddc:	e1823003 	orr	r3, r2, r3
  136de0:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  136de4:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136de8:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136dec:	e51b3010 	ldr	r3, [fp, #-16]
  136df0:	e51b2008 	ldr	r2, [fp, #-8]
  136df4:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136df8:	e320f000 	nop	{0}
  136dfc:	e28bd000 	add	sp, fp, #0
  136e00:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136e04:	e12fff1e 	bx	lr

00136e08 <ENET_StartExtC45SMIWrite>:

#if defined(FSL_FEATURE_ENET_HAS_EXTEND_MDIO) && FSL_FEATURE_ENET_HAS_EXTEND_MDIO
void ENET_StartExtC45SMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  136e08:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136e0c:	e28db000 	add	fp, sp, #0
  136e10:	e24dd01c 	sub	sp, sp, #28
  136e14:	e50b0010 	str	r0, [fp, #-16]
  136e18:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136e1c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136e20:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136e24:	e3a03000 	mov	r3, #0
  136e28:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  136e2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136e30:	e1a03823 	lsr	r3, r3, #16
  136e34:	e6ff3073 	uxth	r3, r3
  136e38:	e203301f 	and	r3, r3, #31
  136e3c:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  136e40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136e44:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136e48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136e4c:	e1a03b83 	lsl	r3, r3, #23
  136e50:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136e54:	e15b30ba 	ldrh	r3, [fp, #-10]
  136e58:	e1a03903 	lsl	r3, r3, #18
  136e5c:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136e60:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  136e64:	e15b30bc 	ldrh	r3, [fp, #-12]
  136e68:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136e6c:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136e70:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136e74:	e51b3010 	ldr	r3, [fp, #-16]
  136e78:	e51b2008 	ldr	r2, [fp, #-8]
  136e7c:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136e80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136e84:	e1a03b83 	lsl	r3, r3, #23
  136e88:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136e8c:	e15b30ba 	ldrh	r3, [fp, #-10]
  136e90:	e1a03903 	lsl	r3, r3, #18
  136e94:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136e98:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(data);
  136e9c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136ea0:	e6ff3073 	uxth	r3, r3
  136ea4:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136ea8:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
  136eac:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136eb0:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136eb4:	e51b3010 	ldr	r3, [fp, #-16]
  136eb8:	e51b2008 	ldr	r2, [fp, #-8]
  136ebc:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136ec0:	e320f000 	nop	{0}
  136ec4:	e28bd000 	add	sp, fp, #0
  136ec8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136ecc:	e12fff1e 	bx	lr

00136ed0 <ENET_StartExtC45SMIRead>:

void ENET_StartExtC45SMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg)
{
  136ed0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136ed4:	e28db000 	add	fp, sp, #0
  136ed8:	e24dd01c 	sub	sp, sp, #28
  136edc:	e50b0010 	str	r0, [fp, #-16]
  136ee0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136ee4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t mmfr = 0;
  136ee8:	e3a03000 	mov	r3, #0
  136eec:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  136ef0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136ef4:	e1a03823 	lsr	r3, r3, #16
  136ef8:	e6ff3073 	uxth	r3, r3
  136efc:	e203301f 	and	r3, r3, #31
  136f00:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  136f04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136f08:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136f0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136f10:	e1a03b83 	lsl	r3, r3, #23
  136f14:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136f18:	e15b30ba 	ldrh	r3, [fp, #-10]
  136f1c:	e1a03903 	lsl	r3, r3, #18
  136f20:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136f24:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  136f28:	e15b30bc 	ldrh	r3, [fp, #-12]
  136f2c:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136f30:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136f34:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136f38:	e51b3010 	ldr	r3, [fp, #-16]
  136f3c:	e51b2008 	ldr	r2, [fp, #-8]
  136f40:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiReadFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136f44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136f48:	e1a03b83 	lsl	r3, r3, #23
  136f4c:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136f50:	e15b30ba 	ldrh	r3, [fp, #-10]
  136f54:	e1a03903 	lsl	r3, r3, #18
  136f58:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136f5c:	e1823003 	orr	r3, r2, r3
  136f60:	e3833203 	orr	r3, r3, #805306368	; 0x30000000
  136f64:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136f68:	e50b3008 	str	r3, [fp, #-8]
           ENET_MMFR_TA(2);
    base->MMFR = mmfr;
  136f6c:	e51b3010 	ldr	r3, [fp, #-16]
  136f70:	e51b2008 	ldr	r2, [fp, #-8]
  136f74:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136f78:	e320f000 	nop	{0}
  136f7c:	e28bd000 	add	sp, fp, #0
  136f80:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136f84:	e12fff1e 	bx	lr

00136f88 <ENET_GetRxErrBeforeReadFrame>:
#endif /* FSL_FEATURE_ENET_HAS_EXTEND_MDIO */

void ENET_GetRxErrBeforeReadFrame(enet_handle_t *handle, enet_data_error_stats_t *eErrorStatic)
{
  136f88:	e92d4800 	push	{fp, lr}
  136f8c:	e28db004 	add	fp, sp, #4
  136f90:	e24dd010 	sub	sp, sp, #16
  136f94:	e50b0010 	str	r0, [fp, #-16]
  136f98:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(handle);
  136f9c:	e51b3010 	ldr	r3, [fp, #-16]
  136fa0:	e3530000 	cmp	r3, #0
  136fa4:	1a000005 	bne	136fc0 <ENET_GetRxErrBeforeReadFrame+0x38>
  136fa8:	e3a02fae 	mov	r2, #696	; 0x2b8
  136fac:	e30a1304 	movw	r1, #41732	; 0xa304
  136fb0:	e3401014 	movt	r1, #20
  136fb4:	e3090f20 	movw	r0, #40736	; 0x9f20
  136fb8:	e3400014 	movt	r0, #20
  136fbc:	ebff3175 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  136fc0:	e51b3010 	ldr	r3, [fp, #-16]
  136fc4:	e5933004 	ldr	r3, [r3, #4]
  136fc8:	e3530000 	cmp	r3, #0
  136fcc:	1a000005 	bne	136fe8 <ENET_GetRxErrBeforeReadFrame+0x60>
  136fd0:	e30022b9 	movw	r2, #697	; 0x2b9
  136fd4:	e30a1304 	movw	r1, #41732	; 0xa304
  136fd8:	e3401014 	movt	r1, #20
  136fdc:	e30a0164 	movw	r0, #41316	; 0xa164
  136fe0:	e3400014 	movt	r0, #20
  136fe4:	ebff316b 	bl	103598 <rt_assert_handler>
    RT_ASSERT(eErrorStatic);
  136fe8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136fec:	e3530000 	cmp	r3, #0
  136ff0:	1a000005 	bne	13700c <ENET_GetRxErrBeforeReadFrame+0x84>
  136ff4:	e30022ba 	movw	r2, #698	; 0x2ba
  136ff8:	e30a1304 	movw	r1, #41732	; 0xa304
  136ffc:	e3401014 	movt	r1, #20
  137000:	e30a0178 	movw	r0, #41336	; 0xa178
  137004:	e3400014 	movt	r0, #20
  137008:	ebff3162 	bl	103598 <rt_assert_handler>

    uint16_t control = 0;
  13700c:	e3a03000 	mov	r3, #0
  137010:	e14b30ba 	strh	r3, [fp, #-10]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  137014:	e51b3010 	ldr	r3, [fp, #-16]
  137018:	e5933004 	ldr	r3, [r3, #4]
  13701c:	e50b3008 	str	r3, [fp, #-8]
        /* Add the cache invalidate maintain. */
        // rt_hw_cpu_dcache_invalidate((void *)curBuffDescrip, sizeof(enet_rx_bd_struct_t));
        // ueth_dcache_invalid((void *)curBuffDescrip, sizeof(enet_rx_bd_struct_t));

        /* The last buffer descriptor of a frame. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  137020:	e51b3008 	ldr	r3, [fp, #-8]
  137024:	e1d330b2 	ldrh	r3, [r3, #2]
  137028:	e6ff3073 	uxth	r3, r3
  13702c:	e2033b02 	and	r3, r3, #2048	; 0x800
  137030:	e3530000 	cmp	r3, #0
  137034:	0a000030 	beq	1370fc <ENET_GetRxErrBeforeReadFrame+0x174>
        {
            control = curBuffDescrip->control;
  137038:	e51b3008 	ldr	r3, [fp, #-8]
  13703c:	e1d330b2 	ldrh	r3, [r3, #2]
  137040:	e14b30ba 	strh	r3, [fp, #-10]
            if (control & ENET_BUFFDESCRIPTOR_RX_TRUNC_MASK)
  137044:	e15b30ba 	ldrh	r3, [fp, #-10]
  137048:	e2033001 	and	r3, r3, #1
  13704c:	e3530000 	cmp	r3, #0
  137050:	0a000004 	beq	137068 <ENET_GetRxErrBeforeReadFrame+0xe0>
            {
                /* The receive truncate error. */
                eErrorStatic->statsRxTruncateErr++;
  137054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137058:	e5933010 	ldr	r3, [r3, #16]
  13705c:	e2832001 	add	r2, r3, #1
  137060:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137064:	e5832010 	str	r2, [r3, #16]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_OVERRUN_MASK)
  137068:	e15b30ba 	ldrh	r3, [fp, #-10]
  13706c:	e2033002 	and	r3, r3, #2
  137070:	e3530000 	cmp	r3, #0
  137074:	0a000004 	beq	13708c <ENET_GetRxErrBeforeReadFrame+0x104>
            {
                /* The receive over run error. */
                eErrorStatic->statsRxOverRunErr++;
  137078:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13707c:	e593300c 	ldr	r3, [r3, #12]
  137080:	e2832001 	add	r2, r3, #1
  137084:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137088:	e583200c 	str	r2, [r3, #12]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_LENVLIOLATE_MASK)
  13708c:	e15b30ba 	ldrh	r3, [fp, #-10]
  137090:	e2033020 	and	r3, r3, #32
  137094:	e3530000 	cmp	r3, #0
  137098:	0a000004 	beq	1370b0 <ENET_GetRxErrBeforeReadFrame+0x128>
            {
                /* The receive length violation error. */
                eErrorStatic->statsRxLenGreaterErr++;
  13709c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370a0:	e5933000 	ldr	r3, [r3]
  1370a4:	e2832001 	add	r2, r3, #1
  1370a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370ac:	e5832000 	str	r2, [r3]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_NOOCTET_MASK)
  1370b0:	e15b30ba 	ldrh	r3, [fp, #-10]
  1370b4:	e2033010 	and	r3, r3, #16
  1370b8:	e3530000 	cmp	r3, #0
  1370bc:	0a000004 	beq	1370d4 <ENET_GetRxErrBeforeReadFrame+0x14c>
            {
                /* The receive alignment error. */
                eErrorStatic->statsRxAlignErr++;
  1370c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370c4:	e5933004 	ldr	r3, [r3, #4]
  1370c8:	e2832001 	add	r2, r3, #1
  1370cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370d0:	e5832004 	str	r2, [r3, #4]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_CRC_MASK)
  1370d4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1370d8:	e2033004 	and	r3, r3, #4
  1370dc:	e3530000 	cmp	r3, #0
  1370e0:	0a000018 	beq	137148 <ENET_GetRxErrBeforeReadFrame+0x1c0>
            {
                /* The receive CRC error. */
                eErrorStatic->statsRxFcsErr++;
  1370e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370e8:	e5933008 	ldr	r3, [r3, #8]
  1370ec:	e2832001 	add	r2, r3, #1
  1370f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370f4:	e5832008 	str	r2, [r3, #8]
            }
            break;
  1370f8:	ea000012 	b	137148 <ENET_GetRxErrBeforeReadFrame+0x1c0>
        }

        /* Increase the buffer descriptor, if it is the last one, increase to first one of the ring buffer. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  1370fc:	e51b3008 	ldr	r3, [fp, #-8]
  137100:	e1d330b2 	ldrh	r3, [r3, #2]
  137104:	e6ff3073 	uxth	r3, r3
  137108:	e2033a02 	and	r3, r3, #8192	; 0x2000
  13710c:	e3530000 	cmp	r3, #0
  137110:	0a000003 	beq	137124 <ENET_GetRxErrBeforeReadFrame+0x19c>
        {
            curBuffDescrip = handle->rxBdBase;
  137114:	e51b3010 	ldr	r3, [fp, #-16]
  137118:	e5933000 	ldr	r3, [r3]
  13711c:	e50b3008 	str	r3, [fp, #-8]
  137120:	ea000002 	b	137130 <ENET_GetRxErrBeforeReadFrame+0x1a8>
        }
        else
        {
            curBuffDescrip++;
  137124:	e51b3008 	ldr	r3, [fp, #-8]
  137128:	e2833008 	add	r3, r3, #8
  13712c:	e50b3008 	str	r3, [fp, #-8]
        }

    } while (curBuffDescrip != handle->rxBdCurrent);
  137130:	e51b3010 	ldr	r3, [fp, #-16]
  137134:	e5933004 	ldr	r3, [r3, #4]
  137138:	e51b2008 	ldr	r2, [fp, #-8]
  13713c:	e1520003 	cmp	r2, r3
  137140:	1affffb6 	bne	137020 <ENET_GetRxErrBeforeReadFrame+0x98>
}
  137144:	ea000000 	b	13714c <ENET_GetRxErrBeforeReadFrame+0x1c4>
            break;
  137148:	e320f000 	nop	{0}
}
  13714c:	e320f000 	nop	{0}
  137150:	e24bd004 	sub	sp, fp, #4
  137154:	e8bd8800 	pop	{fp, pc}

00137158 <ENET_ReadFrame>:

status_t ENET_ReadFrame(ENET_Type *base,enet_handle_t *handle,const enet_config_t *config,uint8_t *data,uint16_t *length)
{
  137158:	e92d4800 	push	{fp, lr}
  13715c:	e28db004 	add	fp, sp, #4
  137160:	e24dd018 	sub	sp, sp, #24
  137164:	e50b0010 	str	r0, [fp, #-16]
  137168:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  13716c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  137170:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(handle);
  137174:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137178:	e3530000 	cmp	r3, #0
  13717c:	1a000005 	bne	137198 <ENET_ReadFrame+0x40>
  137180:	e3a02fbd 	mov	r2, #756	; 0x2f4
  137184:	e30a1324 	movw	r1, #41764	; 0xa324
  137188:	e3401014 	movt	r1, #20
  13718c:	e3090f20 	movw	r0, #40736	; 0x9f20
  137190:	e3400014 	movt	r0, #20
  137194:	ebff30ff 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  137198:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13719c:	e5933004 	ldr	r3, [r3, #4]
  1371a0:	e3530000 	cmp	r3, #0
  1371a4:	1a000005 	bne	1371c0 <ENET_ReadFrame+0x68>
  1371a8:	e30022f5 	movw	r2, #757	; 0x2f5
  1371ac:	e30a1324 	movw	r1, #41764	; 0xa324
  1371b0:	e3401014 	movt	r1, #20
  1371b4:	e30a0164 	movw	r0, #41316	; 0xa164
  1371b8:	e3400014 	movt	r0, #20
  1371bc:	ebff30f5 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length);
  1371c0:	e59b3004 	ldr	r3, [fp, #4]
  1371c4:	e3530000 	cmp	r3, #0
  1371c8:	1a000005 	bne	1371e4 <ENET_ReadFrame+0x8c>
  1371cc:	e30022f6 	movw	r2, #758	; 0x2f6
  1371d0:	e30a1324 	movw	r1, #41764	; 0xa324
  1371d4:	e3401014 	movt	r1, #20
  1371d8:	e30a0188 	movw	r0, #41352	; 0xa188
  1371dc:	e3400014 	movt	r0, #20
  1371e0:	ebff30ec 	bl	103598 <rt_assert_handler>

    /* Reset the length to zero. */
    *length = 0;
  1371e4:	e59b3004 	ldr	r3, [fp, #4]
  1371e8:	e3a02000 	mov	r2, #0
  1371ec:	e1c320b0 	strh	r2, [r3]

    uint16_t validLastMask = ENET_BUFFDESCRIPTOR_RX_LAST_MASK | ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  1371f0:	e3a03b22 	mov	r3, #34816	; 0x8800
  1371f4:	e14b30b6 	strh	r3, [fp, #-6]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  1371f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1371fc:	e5933004 	ldr	r3, [r3, #4]
  137200:	e50b300c 	str	r3, [fp, #-12]

    // rt_hw_cpu_dcache_invalidate((void *)physical_to_virtual(curBuffDescrip->buffer), handle->rxBuffSizeAlign);
    // ueth_dcache_invalid((void *)(curBuffDescrip->buffer_vaddr), handle->rxBuffSizeAlign);
    /* Check the current buffer descriptor's empty flag.  if empty means there is no frame received. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK)
  137204:	e51b300c 	ldr	r3, [fp, #-12]
  137208:	e1d330b2 	ldrh	r3, [r3, #2]
  13720c:	e6ff3073 	uxth	r3, r3
  137210:	e6bf3073 	sxth	r3, r3
  137214:	e3530000 	cmp	r3, #0
  137218:	aa000001 	bge	137224 <ENET_ReadFrame+0xcc>
    {
        return kStatus_ENET_RxFrameEmpty;
  13721c:	e3003fa2 	movw	r3, #4002	; 0xfa2
  137220:	ea00005c 	b	137398 <ENET_ReadFrame+0x240>
    }
    else
    {
        if ((curBuffDescrip->control & validLastMask) == ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  137224:	e51b300c 	ldr	r3, [fp, #-12]
  137228:	e1d330b2 	ldrh	r3, [r3, #2]
  13722c:	e6ff2073 	uxth	r2, r3
  137230:	e15b30b6 	ldrh	r3, [fp, #-6]
  137234:	e0033002 	and	r3, r3, r2
  137238:	e6ff3073 	uxth	r3, r3
  13723c:	e3530b02 	cmp	r3, #2048	; 0x800
  137240:	1a00003a 	bne	137330 <ENET_ReadFrame+0x1d8>
        {
            if(curBuffDescrip->length <= config->rxMaxFrameLen)
  137244:	e51b300c 	ldr	r3, [fp, #-12]
  137248:	e1d330b0 	ldrh	r3, [r3]
  13724c:	e6ff2073 	uxth	r2, r3
  137250:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137254:	e1d330b8 	ldrh	r3, [r3, #8]
  137258:	e1520003 	cmp	r2, r3
  13725c:	8a000018 	bhi	1372c4 <ENET_ReadFrame+0x16c>
            {
                *length = curBuffDescrip->length;
  137260:	e51b300c 	ldr	r3, [fp, #-12]
  137264:	e1d330b0 	ldrh	r3, [r3]
  137268:	e6ff2073 	uxth	r2, r3
  13726c:	e59b3004 	ldr	r3, [fp, #4]
  137270:	e1c320b0 	strh	r2, [r3]
                rt_memcpy(data, buffer_vaddr_rx[curBuffDescrip - handle->rxBdBase], curBuffDescrip->length);
  137274:	e51b300c 	ldr	r3, [fp, #-12]
  137278:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  13727c:	e5922000 	ldr	r2, [r2]
  137280:	e0433002 	sub	r3, r3, r2
  137284:	e1a031c3 	asr	r3, r3, #3
  137288:	e1a02003 	mov	r2, r3
  13728c:	e30e3c54 	movw	r3, #60500	; 0xec54
  137290:	e3403056 	movt	r3, #86	; 0x56
  137294:	e7931102 	ldr	r1, [r3, r2, lsl #2]
  137298:	e51b300c 	ldr	r3, [fp, #-12]
  13729c:	e1d330b0 	ldrh	r3, [r3]
  1372a0:	e6ff3073 	uxth	r3, r3
  1372a4:	e1a02003 	mov	r2, r3
  1372a8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1372ac:	ebff3013 	bl	103300 <rt_memcpy>
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  1372b0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1372b4:	e51b0010 	ldr	r0, [fp, #-16]
  1372b8:	eb000039 	bl	1373a4 <ENET_UpdateReadBuffers>
                return kStatus_Success;
  1372bc:	e3a03000 	mov	r3, #0
  1372c0:	ea000034 	b	137398 <ENET_ReadFrame+0x240>
            }
            else
            {
                LOG_E("frame error0 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  1372c4:	e30a0190 	movw	r0, #41360	; 0xa190
  1372c8:	e3400014 	movt	r0, #20
  1372cc:	ebff2f90 	bl	103114 <rt_kprintf>
  1372d0:	e51b300c 	ldr	r3, [fp, #-12]
  1372d4:	e1d330b2 	ldrh	r3, [r3, #2]
  1372d8:	e6ff3073 	uxth	r3, r3
  1372dc:	e1a01003 	mov	r1, r3
  1372e0:	e51b300c 	ldr	r3, [fp, #-12]
  1372e4:	e1d330b0 	ldrh	r3, [r3]
  1372e8:	e6ff3073 	uxth	r3, r3
  1372ec:	e1a02003 	mov	r2, r3
  1372f0:	e30a01a4 	movw	r0, #41380	; 0xa1a4
  1372f4:	e3400014 	movt	r0, #20
  1372f8:	ebff2f85 	bl	103114 <rt_kprintf>
  1372fc:	e30a01dc 	movw	r0, #41436	; 0xa1dc
  137300:	e3400014 	movt	r0, #20
  137304:	ebff2f82 	bl	103114 <rt_kprintf>
                *length = curBuffDescrip->length;
  137308:	e51b300c 	ldr	r3, [fp, #-12]
  13730c:	e1d330b0 	ldrh	r3, [r3]
  137310:	e6ff2073 	uxth	r2, r3
  137314:	e59b3004 	ldr	r3, [fp, #4]
  137318:	e1c320b0 	strh	r2, [r3]
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  13731c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137320:	e51b0010 	ldr	r0, [fp, #-16]
  137324:	eb00001e 	bl	1373a4 <ENET_UpdateReadBuffers>
                return kStatus_ENET_RxFrameError;
  137328:	e3a03efa 	mov	r3, #4000	; 0xfa0
  13732c:	ea000019 	b	137398 <ENET_ReadFrame+0x240>
            }
        }
        else
        {
            LOG_E("frame error1 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  137330:	e30a0190 	movw	r0, #41360	; 0xa190
  137334:	e3400014 	movt	r0, #20
  137338:	ebff2f75 	bl	103114 <rt_kprintf>
  13733c:	e51b300c 	ldr	r3, [fp, #-12]
  137340:	e1d330b2 	ldrh	r3, [r3, #2]
  137344:	e6ff3073 	uxth	r3, r3
  137348:	e1a01003 	mov	r1, r3
  13734c:	e51b300c 	ldr	r3, [fp, #-12]
  137350:	e1d330b0 	ldrh	r3, [r3]
  137354:	e6ff3073 	uxth	r3, r3
  137358:	e1a02003 	mov	r2, r3
  13735c:	e30a01e4 	movw	r0, #41444	; 0xa1e4
  137360:	e3400014 	movt	r0, #20
  137364:	ebff2f6a 	bl	103114 <rt_kprintf>
  137368:	e30a01dc 	movw	r0, #41436	; 0xa1dc
  13736c:	e3400014 	movt	r0, #20
  137370:	ebff2f67 	bl	103114 <rt_kprintf>
            *length = curBuffDescrip->length;
  137374:	e51b300c 	ldr	r3, [fp, #-12]
  137378:	e1d330b0 	ldrh	r3, [r3]
  13737c:	e6ff2073 	uxth	r2, r3
  137380:	e59b3004 	ldr	r3, [fp, #4]
  137384:	e1c320b0 	strh	r2, [r3]
            ENET_UpdateReadBuffers(base, handle);
  137388:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13738c:	e51b0010 	ldr	r0, [fp, #-16]
  137390:	eb000003 	bl	1373a4 <ENET_UpdateReadBuffers>
            return kStatus_ENET_RxFrameError;
  137394:	e3a03efa 	mov	r3, #4000	; 0xfa0
        }
    }
    /* The frame is on processing - set to empty status to make application to receive it next time. */
    return kStatus_ENET_RxFrameEmpty;
}
  137398:	e1a00003 	mov	r0, r3
  13739c:	e24bd004 	sub	sp, fp, #4
  1373a0:	e8bd8800 	pop	{fp, pc}

001373a4 <ENET_UpdateReadBuffers>:

static void ENET_UpdateReadBuffers(ENET_Type *base, enet_handle_t *handle)
{
  1373a4:	e92d4800 	push	{fp, lr}
  1373a8:	e28db004 	add	fp, sp, #4
  1373ac:	e24dd008 	sub	sp, sp, #8
  1373b0:	e50b0008 	str	r0, [fp, #-8]
  1373b4:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  1373b8:	e51b300c 	ldr	r3, [fp, #-12]
  1373bc:	e3530000 	cmp	r3, #0
  1373c0:	1a000005 	bne	1373dc <ENET_UpdateReadBuffers+0x38>
  1373c4:	e3a02fca 	mov	r2, #808	; 0x328
  1373c8:	e30a1334 	movw	r1, #41780	; 0xa334
  1373cc:	e3401014 	movt	r1, #20
  1373d0:	e3090f20 	movw	r0, #40736	; 0x9f20
  1373d4:	e3400014 	movt	r0, #20
  1373d8:	ebff306e 	bl	103598 <rt_assert_handler>

    /* Clears status. */
    handle->rxBdCurrent->control &= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  1373dc:	e51b300c 	ldr	r3, [fp, #-12]
  1373e0:	e5933004 	ldr	r3, [r3, #4]
  1373e4:	e1d330b2 	ldrh	r3, [r3, #2]
  1373e8:	e6ff2073 	uxth	r2, r3
  1373ec:	e51b300c 	ldr	r3, [fp, #-12]
  1373f0:	e5933004 	ldr	r3, [r3, #4]
  1373f4:	e2022a02 	and	r2, r2, #8192	; 0x2000
  1373f8:	e6ff2072 	uxth	r2, r2
  1373fc:	e1c320b2 	strh	r2, [r3, #2]
    /* Sets the receive buffer descriptor with the empty flag. */
    handle->rxBdCurrent->control |= ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  137400:	e51b300c 	ldr	r3, [fp, #-12]
  137404:	e5933004 	ldr	r3, [r3, #4]
  137408:	e1d330b2 	ldrh	r3, [r3, #2]
  13740c:	e6ff3073 	uxth	r3, r3
  137410:	e51b200c 	ldr	r2, [fp, #-12]
  137414:	e5922004 	ldr	r2, [r2, #4]
  137418:	e1e03883 	mvn	r3, r3, lsl #17
  13741c:	e1e038a3 	mvn	r3, r3, lsr #17
  137420:	e6ff3073 	uxth	r3, r3
  137424:	e1c230b2 	strh	r3, [r2, #2]
    /* Increase current buffer descriptor to the next one. */
    if (handle->rxBdCurrent->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  137428:	e51b300c 	ldr	r3, [fp, #-12]
  13742c:	e5933004 	ldr	r3, [r3, #4]
  137430:	e1d330b2 	ldrh	r3, [r3, #2]
  137434:	e6ff3073 	uxth	r3, r3
  137438:	e2033a02 	and	r3, r3, #8192	; 0x2000
  13743c:	e3530000 	cmp	r3, #0
  137440:	0a000004 	beq	137458 <ENET_UpdateReadBuffers+0xb4>
    {
        handle->rxBdCurrent = handle->rxBdBase;
  137444:	e51b300c 	ldr	r3, [fp, #-12]
  137448:	e5932000 	ldr	r2, [r3]
  13744c:	e51b300c 	ldr	r3, [fp, #-12]
  137450:	e5832004 	str	r2, [r3, #4]
  137454:	ea000004 	b	13746c <ENET_UpdateReadBuffers+0xc8>
    }
    else
    {
        handle->rxBdCurrent++;
  137458:	e51b300c 	ldr	r3, [fp, #-12]
  13745c:	e5933004 	ldr	r3, [r3, #4]
  137460:	e2832008 	add	r2, r3, #8
  137464:	e51b300c 	ldr	r3, [fp, #-12]
  137468:	e5832004 	str	r2, [r3, #4]
    }
    /* Actives the receive buffer descriptor. */
    base->RDAR = ENET_RDAR_RDAR_MASK;
  13746c:	e51b3008 	ldr	r3, [fp, #-8]
  137470:	e3a02401 	mov	r2, #16777216	; 0x1000000
  137474:	e5832010 	str	r2, [r3, #16]
}
  137478:	e320f000 	nop	{0}
  13747c:	e24bd004 	sub	sp, fp, #4
  137480:	e8bd8800 	pop	{fp, pc}

00137484 <ENET_SendFrame>:

status_t ENET_SendFrame(ENET_Type *base, enet_handle_t *handle, const uint8_t *data, uint16_t length,uint32_t last_flag)
{
  137484:	e92d4800 	push	{fp, lr}
  137488:	e28db004 	add	fp, sp, #4
  13748c:	e24dd018 	sub	sp, sp, #24
  137490:	e50b0010 	str	r0, [fp, #-16]
  137494:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137498:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  13749c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
    RT_ASSERT(handle);
  1374a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1374a4:	e3530000 	cmp	r3, #0
  1374a8:	1a000005 	bne	1374c4 <ENET_SendFrame+0x40>
  1374ac:	e300233d 	movw	r2, #829	; 0x33d
  1374b0:	e30a134c 	movw	r1, #41804	; 0xa34c
  1374b4:	e3401014 	movt	r1, #20
  1374b8:	e3090f20 	movw	r0, #40736	; 0x9f20
  1374bc:	e3400014 	movt	r0, #20
  1374c0:	ebff3034 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->txBdCurrent);
  1374c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1374c8:	e593300c 	ldr	r3, [r3, #12]
  1374cc:	e3530000 	cmp	r3, #0
  1374d0:	1a000005 	bne	1374ec <ENET_SendFrame+0x68>
  1374d4:	e300233e 	movw	r2, #830	; 0x33e
  1374d8:	e30a134c 	movw	r1, #41804	; 0xa34c
  1374dc:	e3401014 	movt	r1, #20
  1374e0:	e30a021c 	movw	r0, #41500	; 0xa21c
  1374e4:	e3400014 	movt	r0, #20
  1374e8:	ebff302a 	bl	103598 <rt_assert_handler>
    RT_ASSERT(data);
  1374ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1374f0:	e3530000 	cmp	r3, #0
  1374f4:	1a000005 	bne	137510 <ENET_SendFrame+0x8c>
  1374f8:	e300233f 	movw	r2, #831	; 0x33f
  1374fc:	e30a134c 	movw	r1, #41804	; 0xa34c
  137500:	e3401014 	movt	r1, #20
  137504:	e30a0230 	movw	r0, #41520	; 0xa230
  137508:	e3400014 	movt	r0, #20
  13750c:	ebff3021 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length <= ENET_FRAME_MAX_FRAMELEN);
  137510:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  137514:	e30025ee 	movw	r2, #1518	; 0x5ee
  137518:	e1530002 	cmp	r3, r2
  13751c:	9a000005 	bls	137538 <ENET_SendFrame+0xb4>
  137520:	e3a02d0d 	mov	r2, #832	; 0x340
  137524:	e30a134c 	movw	r1, #41804	; 0xa34c
  137528:	e3401014 	movt	r1, #20
  13752c:	e30a0238 	movw	r0, #41528	; 0xa238
  137530:	e3400014 	movt	r0, #20
  137534:	ebff3017 	bl	103598 <rt_assert_handler>

    volatile enet_tx_bd_struct_t *curBuffDescrip = handle->txBdCurrent;
  137538:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13753c:	e593300c 	ldr	r3, [r3, #12]
  137540:	e50b3008 	str	r3, [fp, #-8]
    /* Check if the transmit buffer is ready. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_READY_MASK)
  137544:	e51b3008 	ldr	r3, [fp, #-8]
  137548:	e1d330b2 	ldrh	r3, [r3, #2]
  13754c:	e6ff3073 	uxth	r3, r3
  137550:	e6bf3073 	sxth	r3, r3
  137554:	e3530000 	cmp	r3, #0
  137558:	aa000001 	bge	137564 <ENET_SendFrame+0xe0>
    {
        return kStatus_ENET_TxFrameBusy;
  13755c:	e3003fa3 	movw	r3, #4003	; 0xfa3
  137560:	ea00004b 	b	137694 <ENET_SendFrame+0x210>
    }
    /* One transmit buffer is enough for one frame. */
    if (handle->txBuffSizeAlign >= length)
  137564:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137568:	e5932014 	ldr	r2, [r3, #20]
  13756c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  137570:	e1520003 	cmp	r2, r3
  137574:	3a000045 	bcc	137690 <ENET_SendFrame+0x20c>
    {
        /* Copy data to the buffer for uDMA transfer. */
        rt_memcpy(buffer_vaddr_tx[curBuffDescrip - handle->txBdBase], data, length);
  137578:	e51b3008 	ldr	r3, [fp, #-8]
  13757c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  137580:	e5922008 	ldr	r2, [r2, #8]
  137584:	e0433002 	sub	r3, r3, r2
  137588:	e1a031c3 	asr	r3, r3, #3
  13758c:	e1a02003 	mov	r2, r3
  137590:	e30e3e54 	movw	r3, #61012	; 0xee54
  137594:	e3403056 	movt	r3, #86	; 0x56
  137598:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  13759c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  1375a0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1375a4:	e1a00003 	mov	r0, r3
  1375a8:	ebff2f54 	bl	103300 <rt_memcpy>
        /* Set data length. */
        curBuffDescrip->length = length;
  1375ac:	e51b3008 	ldr	r3, [fp, #-8]
  1375b0:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  1375b4:	e1c320b0 	strh	r2, [r3]
        if(last_flag)
  1375b8:	e59b3004 	ldr	r3, [fp, #4]
  1375bc:	e3530000 	cmp	r3, #0
  1375c0:	0a000009 	beq	1375ec <ENET_SendFrame+0x168>
        {
            curBuffDescrip->control |= (ENET_BUFFDESCRIPTOR_TX_READY_MASK | ENET_BUFFDESCRIPTOR_TX_LAST_MASK);
  1375c4:	e51b3008 	ldr	r3, [fp, #-8]
  1375c8:	e1d330b2 	ldrh	r3, [r3, #2]
  1375cc:	e6ff2073 	uxth	r2, r3
  1375d0:	e3a03b22 	mov	r3, #34816	; 0x8800
  1375d4:	e34f3fff 	movt	r3, #65535	; 0xffff
  1375d8:	e1823003 	orr	r3, r2, r3
  1375dc:	e6ff2073 	uxth	r2, r3
  1375e0:	e51b3008 	ldr	r3, [fp, #-8]
  1375e4:	e1c320b2 	strh	r2, [r3, #2]
  1375e8:	ea00000e 	b	137628 <ENET_SendFrame+0x1a4>
        }
        else
        {
            curBuffDescrip->control &= ~ENET_BUFFDESCRIPTOR_TX_LAST_MASK;
  1375ec:	e51b3008 	ldr	r3, [fp, #-8]
  1375f0:	e1d330b2 	ldrh	r3, [r3, #2]
  1375f4:	e6ff3073 	uxth	r3, r3
  1375f8:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  1375fc:	e6ff2073 	uxth	r2, r3
  137600:	e51b3008 	ldr	r3, [fp, #-8]
  137604:	e1c320b2 	strh	r2, [r3, #2]
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_READY_MASK;
  137608:	e51b3008 	ldr	r3, [fp, #-8]
  13760c:	e1d330b2 	ldrh	r3, [r3, #2]
  137610:	e6ff3073 	uxth	r3, r3
  137614:	e1e03883 	mvn	r3, r3, lsl #17
  137618:	e1e038a3 	mvn	r3, r3, lsr #17
  13761c:	e6ff2073 	uxth	r2, r3
  137620:	e51b3008 	ldr	r3, [fp, #-8]
  137624:	e1c320b2 	strh	r2, [r3, #2]

        // rt_hw_cpu_dcache_clean((void *)physical_to_virtual(curBuffDescrip->buffer),length);
        // ueth_dcache_clean(curBuffDescrip->buffer_vaddr, length);
        /* Active the transmit buffer descriptor. */

        base->TDAR = ENET_TDAR_TDAR_MASK;
  137628:	e51b3010 	ldr	r3, [fp, #-16]
  13762c:	e3a02401 	mov	r2, #16777216	; 0x1000000
  137630:	e5832014 	str	r2, [r3, #20]
        /* Increase the buffer descriptor address. */
        while((base->TDAR != 0))
  137634:	e320f000 	nop	{0}
  137638:	e51b3010 	ldr	r3, [fp, #-16]
  13763c:	e5933014 	ldr	r3, [r3, #20]
  137640:	e3530000 	cmp	r3, #0
  137644:	1afffffb 	bne	137638 <ENET_SendFrame+0x1b4>
        {
        }
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_WRAP_MASK)
  137648:	e51b3008 	ldr	r3, [fp, #-8]
  13764c:	e1d330b2 	ldrh	r3, [r3, #2]
  137650:	e6ff3073 	uxth	r3, r3
  137654:	e2033a02 	and	r3, r3, #8192	; 0x2000
  137658:	e3530000 	cmp	r3, #0
  13765c:	0a000004 	beq	137674 <ENET_SendFrame+0x1f0>
        {
            handle->txBdCurrent = handle->txBdBase;
  137660:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137664:	e5932008 	ldr	r2, [r3, #8]
  137668:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13766c:	e583200c 	str	r2, [r3, #12]
  137670:	ea000004 	b	137688 <ENET_SendFrame+0x204>
        }
        else
        {
            handle->txBdCurrent++;
  137674:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137678:	e593300c 	ldr	r3, [r3, #12]
  13767c:	e2832008 	add	r2, r3, #8
  137680:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137684:	e583200c 	str	r2, [r3, #12]
        }
        return kStatus_Success;
  137688:	e3a03000 	mov	r3, #0
  13768c:	ea000000 	b	137694 <ENET_SendFrame+0x210>
    }
    else
    {
        return kStatus_ENET_RxFrameError;
  137690:	e3a03efa 	mov	r3, #4000	; 0xfa0
    }
}
  137694:	e1a00003 	mov	r0, r3
  137698:	e24bd004 	sub	sp, fp, #4
  13769c:	e8bd8800 	pop	{fp, pc}

001376a0 <ENET_AddMulticastGroup>:

void ENET_AddMulticastGroup(ENET_Type *base, uint8_t *address)
{
  1376a0:	e92d4800 	push	{fp, lr}
  1376a4:	e28db004 	add	fp, sp, #4
  1376a8:	e24dd018 	sub	sp, sp, #24
  1376ac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1376b0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  1376b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1376b8:	e3530000 	cmp	r3, #0
  1376bc:	1a000005 	bne	1376d8 <ENET_AddMulticastGroup+0x38>
  1376c0:	e3a02fdd 	mov	r2, #884	; 0x374
  1376c4:	e30a135c 	movw	r1, #41820	; 0xa35c
  1376c8:	e3401014 	movt	r1, #20
  1376cc:	e30a025c 	movw	r0, #41564	; 0xa25c
  1376d0:	e3400014 	movt	r0, #20
  1376d4:	ebff2faf 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  1376d8:	e3e03000 	mvn	r3, #0
  1376dc:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  1376e0:	e3a03000 	mov	r3, #0
  1376e4:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  1376e8:	e3a03000 	mov	r3, #0
  1376ec:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  1376f0:	e3a03000 	mov	r3, #0
  1376f4:	e50b300c 	str	r3, [fp, #-12]
  1376f8:	ea000028 	b	1377a0 <ENET_AddMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  1376fc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  137700:	e51b300c 	ldr	r3, [fp, #-12]
  137704:	e0823003 	add	r3, r2, r3
  137708:	e5d33000 	ldrb	r3, [r3]
  13770c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  137710:	e3a03000 	mov	r3, #0
  137714:	e50b3010 	str	r3, [fp, #-16]
  137718:	ea00001a 	b	137788 <ENET_AddMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  13771c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  137720:	e51b3008 	ldr	r3, [fp, #-8]
  137724:	e0233002 	eor	r3, r3, r2
  137728:	e2033001 	and	r3, r3, #1
  13772c:	e3530000 	cmp	r3, #0
  137730:	0a00000b 	beq	137764 <ENET_AddMulticastGroup+0xc4>
            {
                crc >>= 1U;
  137734:	e51b3008 	ldr	r3, [fp, #-8]
  137738:	e1a030a3 	lsr	r3, r3, #1
  13773c:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  137740:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137744:	e1a030a3 	lsr	r3, r3, #1
  137748:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  13774c:	e51b2008 	ldr	r2, [fp, #-8]
  137750:	e3083320 	movw	r3, #33568	; 0x8320
  137754:	e34e3db8 	movt	r3, #60856	; 0xedb8
  137758:	e0233002 	eor	r3, r3, r2
  13775c:	e50b3008 	str	r3, [fp, #-8]
  137760:	ea000005 	b	13777c <ENET_AddMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  137764:	e51b3008 	ldr	r3, [fp, #-8]
  137768:	e1a030a3 	lsr	r3, r3, #1
  13776c:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  137770:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137774:	e1a030a3 	lsr	r3, r3, #1
  137778:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  13777c:	e51b3010 	ldr	r3, [fp, #-16]
  137780:	e2833001 	add	r3, r3, #1
  137784:	e50b3010 	str	r3, [fp, #-16]
  137788:	e51b3010 	ldr	r3, [fp, #-16]
  13778c:	e3530007 	cmp	r3, #7
  137790:	9affffe1 	bls	13771c <ENET_AddMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137794:	e51b300c 	ldr	r3, [fp, #-12]
  137798:	e2833001 	add	r3, r3, #1
  13779c:	e50b300c 	str	r3, [fp, #-12]
  1377a0:	e51b300c 	ldr	r3, [fp, #-12]
  1377a4:	e3530005 	cmp	r3, #5
  1377a8:	9affffd3 	bls	1376fc <ENET_AddMulticastGroup+0x5c>
            }
        }
    }

    /* Enable a multicast group address. */
    if (!((crc >> 0x1FU) & 1U))
  1377ac:	e51b3008 	ldr	r3, [fp, #-8]
  1377b0:	e3530000 	cmp	r3, #0
  1377b4:	ba00000a 	blt	1377e4 <ENET_AddMulticastGroup+0x144>
    {
        base->GALR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  1377b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1377bc:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  1377c0:	e51b3008 	ldr	r3, [fp, #-8]
  1377c4:	e1a03d23 	lsr	r3, r3, #26
  1377c8:	e203301f 	and	r3, r3, #31
  1377cc:	e3a01001 	mov	r1, #1
  1377d0:	e1a03311 	lsl	r3, r1, r3
  1377d4:	e1822003 	orr	r2, r2, r3
  1377d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1377dc:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
    }
}
  1377e0:	ea000009 	b	13780c <ENET_AddMulticastGroup+0x16c>
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  1377e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1377e8:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  1377ec:	e51b3008 	ldr	r3, [fp, #-8]
  1377f0:	e1a03d23 	lsr	r3, r3, #26
  1377f4:	e203301f 	and	r3, r3, #31
  1377f8:	e3a01001 	mov	r1, #1
  1377fc:	e1a03311 	lsl	r3, r1, r3
  137800:	e1822003 	orr	r2, r2, r3
  137804:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137808:	e5832120 	str	r2, [r3, #288]	; 0x120
}
  13780c:	e320f000 	nop	{0}
  137810:	e24bd004 	sub	sp, fp, #4
  137814:	e8bd8800 	pop	{fp, pc}

00137818 <ENET_LeaveMulticastGroup>:

void ENET_LeaveMulticastGroup(ENET_Type *base, uint8_t *address)
{
  137818:	e92d4800 	push	{fp, lr}
  13781c:	e28db004 	add	fp, sp, #4
  137820:	e24dd018 	sub	sp, sp, #24
  137824:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137828:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  13782c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137830:	e3530000 	cmp	r3, #0
  137834:	1a000005 	bne	137850 <ENET_LeaveMulticastGroup+0x38>
  137838:	e300239b 	movw	r2, #923	; 0x39b
  13783c:	e30a1374 	movw	r1, #41844	; 0xa374
  137840:	e3401014 	movt	r1, #20
  137844:	e30a025c 	movw	r0, #41564	; 0xa25c
  137848:	e3400014 	movt	r0, #20
  13784c:	ebff2f51 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  137850:	e3e03000 	mvn	r3, #0
  137854:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  137858:	e3a03000 	mov	r3, #0
  13785c:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  137860:	e3a03000 	mov	r3, #0
  137864:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137868:	e3a03000 	mov	r3, #0
  13786c:	e50b300c 	str	r3, [fp, #-12]
  137870:	ea000028 	b	137918 <ENET_LeaveMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  137874:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  137878:	e51b300c 	ldr	r3, [fp, #-12]
  13787c:	e0823003 	add	r3, r2, r3
  137880:	e5d33000 	ldrb	r3, [r3]
  137884:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  137888:	e3a03000 	mov	r3, #0
  13788c:	e50b3010 	str	r3, [fp, #-16]
  137890:	ea00001a 	b	137900 <ENET_LeaveMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  137894:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  137898:	e51b3008 	ldr	r3, [fp, #-8]
  13789c:	e0233002 	eor	r3, r3, r2
  1378a0:	e2033001 	and	r3, r3, #1
  1378a4:	e3530000 	cmp	r3, #0
  1378a8:	0a00000b 	beq	1378dc <ENET_LeaveMulticastGroup+0xc4>
            {
                crc >>= 1U;
  1378ac:	e51b3008 	ldr	r3, [fp, #-8]
  1378b0:	e1a030a3 	lsr	r3, r3, #1
  1378b4:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  1378b8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1378bc:	e1a030a3 	lsr	r3, r3, #1
  1378c0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  1378c4:	e51b2008 	ldr	r2, [fp, #-8]
  1378c8:	e3083320 	movw	r3, #33568	; 0x8320
  1378cc:	e34e3db8 	movt	r3, #60856	; 0xedb8
  1378d0:	e0233002 	eor	r3, r3, r2
  1378d4:	e50b3008 	str	r3, [fp, #-8]
  1378d8:	ea000005 	b	1378f4 <ENET_LeaveMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  1378dc:	e51b3008 	ldr	r3, [fp, #-8]
  1378e0:	e1a030a3 	lsr	r3, r3, #1
  1378e4:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  1378e8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1378ec:	e1a030a3 	lsr	r3, r3, #1
  1378f0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  1378f4:	e51b3010 	ldr	r3, [fp, #-16]
  1378f8:	e2833001 	add	r3, r3, #1
  1378fc:	e50b3010 	str	r3, [fp, #-16]
  137900:	e51b3010 	ldr	r3, [fp, #-16]
  137904:	e3530007 	cmp	r3, #7
  137908:	9affffe1 	bls	137894 <ENET_LeaveMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  13790c:	e51b300c 	ldr	r3, [fp, #-12]
  137910:	e2833001 	add	r3, r3, #1
  137914:	e50b300c 	str	r3, [fp, #-12]
  137918:	e51b300c 	ldr	r3, [fp, #-12]
  13791c:	e3530005 	cmp	r3, #5
  137920:	9affffd3 	bls	137874 <ENET_LeaveMulticastGroup+0x5c>
            }
        }
    }

    /* Set the hash table. */
    if (!((crc >> 0x1FU) & 1U))
  137924:	e51b3008 	ldr	r3, [fp, #-8]
  137928:	e3530000 	cmp	r3, #0
  13792c:	ba00000b 	blt	137960 <ENET_LeaveMulticastGroup+0x148>
    {
        base->GALR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  137930:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137934:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  137938:	e51b3008 	ldr	r3, [fp, #-8]
  13793c:	e1a03d23 	lsr	r3, r3, #26
  137940:	e203301f 	and	r3, r3, #31
  137944:	e3a01001 	mov	r1, #1
  137948:	e1a03311 	lsl	r3, r1, r3
  13794c:	e1e03003 	mvn	r3, r3
  137950:	e0022003 	and	r2, r2, r3
  137954:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137958:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
    }
}
  13795c:	ea00000a 	b	13798c <ENET_LeaveMulticastGroup+0x174>
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  137960:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137964:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  137968:	e51b3008 	ldr	r3, [fp, #-8]
  13796c:	e1a03d23 	lsr	r3, r3, #26
  137970:	e203301f 	and	r3, r3, #31
  137974:	e3a01001 	mov	r1, #1
  137978:	e1a03311 	lsl	r3, r1, r3
  13797c:	e1e03003 	mvn	r3, r3
  137980:	e0022003 	and	r2, r2, r3
  137984:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137988:	e5832120 	str	r2, [r3, #288]	; 0x120
}
  13798c:	e320f000 	nop	{0}
  137990:	e24bd004 	sub	sp, fp, #4
  137994:	e8bd8800 	pop	{fp, pc}

00137998 <ENET_TransmitIRQHandler>:
void tx_enet_callback(void *base);
void ENET_TransmitIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  137998:	e92d4800 	push	{fp, lr}
  13799c:	e28db004 	add	fp, sp, #4
  1379a0:	e24dd008 	sub	sp, sp, #8
  1379a4:	e50b0008 	str	r0, [fp, #-8]
  1379a8:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  1379ac:	e51b300c 	ldr	r3, [fp, #-12]
  1379b0:	e3530000 	cmp	r3, #0
  1379b4:	1a000005 	bne	1379d0 <ENET_TransmitIRQHandler+0x38>
  1379b8:	e30023c2 	movw	r2, #962	; 0x3c2
  1379bc:	e30a1390 	movw	r1, #41872	; 0xa390
  1379c0:	e3401014 	movt	r1, #20
  1379c4:	e3090f20 	movw	r0, #40736	; 0x9f20
  1379c8:	e3400014 	movt	r0, #20
  1379cc:	ebff2ef1 	bl	103598 <rt_assert_handler>
    /* Check if the transmit interrupt happen. */
    if((kENET_TxBufferInterrupt | kENET_TxFrameInterrupt) & base->EIR)
  1379d0:	e51b3008 	ldr	r3, [fp, #-8]
  1379d4:	e5933004 	ldr	r3, [r3, #4]
  1379d8:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  1379dc:	e3530000 	cmp	r3, #0
  1379e0:	0a000002 	beq	1379f0 <ENET_TransmitIRQHandler+0x58>
    {
        /* Clear the transmit interrupt event. */
        base->EIR = kENET_TxFrameInterrupt | kENET_TxBufferInterrupt;
  1379e4:	e51b3008 	ldr	r3, [fp, #-8]
  1379e8:	e3a02303 	mov	r2, #201326592	; 0xc000000
  1379ec:	e5832004 	str	r2, [r3, #4]
    }
    tx_enet_callback((void *)base);
  1379f0:	e51b0008 	ldr	r0, [fp, #-8]
  1379f4:	ebfff6e5 	bl	135590 <tx_enet_callback>
}
  1379f8:	e320f000 	nop	{0}
  1379fc:	e24bd004 	sub	sp, fp, #4
  137a00:	e8bd8800 	pop	{fp, pc}

00137a04 <ENET_ReceiveIRQHandler>:
void rx_enet_callback(void *base);
void ENET_ReceiveIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  137a04:	e92d4800 	push	{fp, lr}
  137a08:	e28db004 	add	fp, sp, #4
  137a0c:	e24dd008 	sub	sp, sp, #8
  137a10:	e50b0008 	str	r0, [fp, #-8]
  137a14:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  137a18:	e51b300c 	ldr	r3, [fp, #-12]
  137a1c:	e3530000 	cmp	r3, #0
  137a20:	1a000005 	bne	137a3c <ENET_ReceiveIRQHandler+0x38>
  137a24:	e30023ce 	movw	r2, #974	; 0x3ce
  137a28:	e30a13a8 	movw	r1, #41896	; 0xa3a8
  137a2c:	e3401014 	movt	r1, #20
  137a30:	e3090f20 	movw	r0, #40736	; 0x9f20
  137a34:	e3400014 	movt	r0, #20
  137a38:	ebff2ed6 	bl	103598 <rt_assert_handler>

    /* Check if the receive interrupt happen. */
    if((kENET_RxBufferInterrupt | kENET_RxFrameInterrupt) & base->EIR)
  137a3c:	e51b3008 	ldr	r3, [fp, #-8]
  137a40:	e5933004 	ldr	r3, [r3, #4]
  137a44:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137a48:	e3530000 	cmp	r3, #0
  137a4c:	0a000004 	beq	137a64 <ENET_ReceiveIRQHandler+0x60>
    {
        /* Clear the transmit interrupt event. */
        base->EIR = kENET_RxFrameInterrupt | kENET_RxBufferInterrupt;
  137a50:	e51b3008 	ldr	r3, [fp, #-8]
  137a54:	e3a02403 	mov	r2, #50331648	; 0x3000000
  137a58:	e5832004 	str	r2, [r3, #4]
        rx_enet_callback((void *)base);
  137a5c:	e51b0008 	ldr	r0, [fp, #-8]
  137a60:	ebfff6a7 	bl	135504 <rx_enet_callback>
    }
}
  137a64:	e320f000 	nop	{0}
  137a68:	e24bd004 	sub	sp, fp, #4
  137a6c:	e8bd8800 	pop	{fp, pc}

00137a70 <ENET_ErrorIRQHandler>:
void ENET_ErrorIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  137a70:	e92d4810 	push	{r4, fp, lr}
  137a74:	e28db008 	add	fp, sp, #8
  137a78:	e24dd014 	sub	sp, sp, #20
  137a7c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137a80:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(handle);
  137a84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137a88:	e3530000 	cmp	r3, #0
  137a8c:	1a000005 	bne	137aa8 <ENET_ErrorIRQHandler+0x38>
  137a90:	e30023da 	movw	r2, #986	; 0x3da
  137a94:	e30a13c0 	movw	r1, #41920	; 0xa3c0
  137a98:	e3401014 	movt	r1, #20
  137a9c:	e3090f20 	movw	r0, #40736	; 0x9f20
  137aa0:	e3400014 	movt	r0, #20
  137aa4:	ebff2ebb 	bl	103598 <rt_assert_handler>

    uint32_t errMask = kENET_BabrInterrupt | kENET_BabtInterrupt | kENET_EBusERInterrupt | kENET_PayloadRxInterrupt |
  137aa8:	e3a03000 	mov	r3, #0
  137aac:	e346307c 	movt	r3, #24700	; 0x607c
  137ab0:	e50b3010 	str	r3, [fp, #-16]
                       kENET_LateCollisionInterrupt | kENET_RetryLimitInterrupt | kENET_UnderrunInterrupt;
    /* Check if the error interrupt happen. */
    if (kENET_WakeupInterrupt & base->EIR)
  137ab4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137ab8:	e5933004 	ldr	r3, [r3, #4]
  137abc:	e2033802 	and	r3, r3, #131072	; 0x20000
  137ac0:	e3530000 	cmp	r3, #0
  137ac4:	0a000012 	beq	137b14 <ENET_ErrorIRQHandler+0xa4>
    {
        /* Clear the wakeup interrupt. */
        base->EIR = kENET_WakeupInterrupt;
  137ac8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137acc:	e3a02802 	mov	r2, #131072	; 0x20000
  137ad0:	e5832004 	str	r2, [r3, #4]
        /* wake up and enter the normal mode. */
        ENET_EnableSleepMode(base, false);
  137ad4:	e3a01000 	mov	r1, #0
  137ad8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137adc:	ebfff879 	bl	135cc8 <ENET_EnableSleepMode>
        /* Callback function. */
        if (handle->callback)
  137ae0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137ae4:	e5933018 	ldr	r3, [r3, #24]
  137ae8:	e3530000 	cmp	r3, #0
  137aec:	0a00001c 	beq	137b64 <ENET_ErrorIRQHandler+0xf4>
        {
            handle->callback(base, handle, kENET_WakeUpEvent, handle->userData);
  137af0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137af4:	e5934018 	ldr	r4, [r3, #24]
  137af8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137afc:	e593301c 	ldr	r3, [r3, #28]
  137b00:	e3a02003 	mov	r2, #3
  137b04:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137b08:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137b0c:	e12fff34 	blx	r4
        if (handle->callback)
        {
            handle->callback(base, handle, kENET_ErrEvent, handle->userData);
        }
    }
}
  137b10:	ea000013 	b	137b64 <ENET_ErrorIRQHandler+0xf4>
        errMask &= base->EIR;
  137b14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137b18:	e5933004 	ldr	r3, [r3, #4]
  137b1c:	e51b2010 	ldr	r2, [fp, #-16]
  137b20:	e0033002 	and	r3, r3, r2
  137b24:	e50b3010 	str	r3, [fp, #-16]
        base->EIR = errMask;
  137b28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137b2c:	e51b2010 	ldr	r2, [fp, #-16]
  137b30:	e5832004 	str	r2, [r3, #4]
        if (handle->callback)
  137b34:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137b38:	e5933018 	ldr	r3, [r3, #24]
  137b3c:	e3530000 	cmp	r3, #0
  137b40:	0a000007 	beq	137b64 <ENET_ErrorIRQHandler+0xf4>
            handle->callback(base, handle, kENET_ErrEvent, handle->userData);
  137b44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137b48:	e5934018 	ldr	r4, [r3, #24]
  137b4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137b50:	e593301c 	ldr	r3, [r3, #28]
  137b54:	e3a02002 	mov	r2, #2
  137b58:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137b5c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137b60:	e12fff34 	blx	r4
}
  137b64:	e320f000 	nop	{0}
  137b68:	e24bd008 	sub	sp, fp, #8
  137b6c:	e8bd8810 	pop	{r4, fp, pc}

00137b70 <ENET_CommonFrame0IRQHandler>:

void ENET_CommonFrame0IRQHandler(ENET_Type *base)
{
  137b70:	e92d4800 	push	{fp, lr}
  137b74:	e28db004 	add	fp, sp, #4
  137b78:	e24dd010 	sub	sp, sp, #16
  137b7c:	e50b0010 	str	r0, [fp, #-16]
    uint32_t event = base->EIR;
  137b80:	e51b3010 	ldr	r3, [fp, #-16]
  137b84:	e5933004 	ldr	r3, [r3, #4]
  137b88:	e50b3008 	str	r3, [fp, #-8]
    uint32_t instance = get_instance_by_base(base);
  137b8c:	e51b0010 	ldr	r0, [fp, #-16]
  137b90:	ebfff633 	bl	135464 <get_instance_by_base>
  137b94:	e1a03000 	mov	r3, r0
  137b98:	e50b300c 	str	r3, [fp, #-12]

    if(base->EIMR & ENET_TX_INTERRUPT)
  137b9c:	e51b3010 	ldr	r3, [fp, #-16]
  137ba0:	e5933008 	ldr	r3, [r3, #8]
  137ba4:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  137ba8:	e3530000 	cmp	r3, #0
  137bac:	0a000012 	beq	137bfc <ENET_CommonFrame0IRQHandler+0x8c>
    {
        if (event & ENET_TX_INTERRUPT)
  137bb0:	e51b3008 	ldr	r3, [fp, #-8]
  137bb4:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  137bb8:	e3530000 	cmp	r3, #0
  137bbc:	0a00000e 	beq	137bfc <ENET_CommonFrame0IRQHandler+0x8c>
        {
            if(s_enetTxIsr)
  137bc0:	e30e3c10 	movw	r3, #60432	; 0xec10
  137bc4:	e3403014 	movt	r3, #20
  137bc8:	e5933000 	ldr	r3, [r3]
  137bcc:	e3530000 	cmp	r3, #0
  137bd0:	0a000009 	beq	137bfc <ENET_CommonFrame0IRQHandler+0x8c>
            {
                s_enetTxIsr(base, s_ENETHandle[instance]);
  137bd4:	e30e3c10 	movw	r3, #60432	; 0xec10
  137bd8:	e3403014 	movt	r3, #20
  137bdc:	e5932000 	ldr	r2, [r3]
  137be0:	e30e3c08 	movw	r3, #60424	; 0xec08
  137be4:	e3403014 	movt	r3, #20
  137be8:	e51b100c 	ldr	r1, [fp, #-12]
  137bec:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137bf0:	e1a01003 	mov	r1, r3
  137bf4:	e51b0010 	ldr	r0, [fp, #-16]
  137bf8:	e12fff32 	blx	r2
            }
        }
    }
    if (base->EIMR & ENET_RX_INTERRUPT)
  137bfc:	e51b3010 	ldr	r3, [fp, #-16]
  137c00:	e5933008 	ldr	r3, [r3, #8]
  137c04:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137c08:	e3530000 	cmp	r3, #0
  137c0c:	0a000012 	beq	137c5c <ENET_CommonFrame0IRQHandler+0xec>
    {
        if (event & ENET_RX_INTERRUPT)
  137c10:	e51b3008 	ldr	r3, [fp, #-8]
  137c14:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137c18:	e3530000 	cmp	r3, #0
  137c1c:	0a00000e 	beq	137c5c <ENET_CommonFrame0IRQHandler+0xec>
        {
            if(s_enetRxIsr)
  137c20:	e30e3c14 	movw	r3, #60436	; 0xec14
  137c24:	e3403014 	movt	r3, #20
  137c28:	e5933000 	ldr	r3, [r3]
  137c2c:	e3530000 	cmp	r3, #0
  137c30:	0a000009 	beq	137c5c <ENET_CommonFrame0IRQHandler+0xec>
            {
                s_enetRxIsr(base, s_ENETHandle[instance]);
  137c34:	e30e3c14 	movw	r3, #60436	; 0xec14
  137c38:	e3403014 	movt	r3, #20
  137c3c:	e5932000 	ldr	r2, [r3]
  137c40:	e30e3c08 	movw	r3, #60424	; 0xec08
  137c44:	e3403014 	movt	r3, #20
  137c48:	e51b100c 	ldr	r1, [fp, #-12]
  137c4c:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137c50:	e1a01003 	mov	r1, r3
  137c54:	e51b0010 	ldr	r0, [fp, #-16]
  137c58:	e12fff32 	blx	r2
            }
        }
    }
    if(base->EIMR & ENET_TS_INTERRUPT)
  137c5c:	e51b3010 	ldr	r3, [fp, #-16]
  137c60:	e5933008 	ldr	r3, [r3, #8]
  137c64:	e2033906 	and	r3, r3, #98304	; 0x18000
  137c68:	e3530000 	cmp	r3, #0
  137c6c:	0a000012 	beq	137cbc <ENET_CommonFrame0IRQHandler+0x14c>
    {
        if (event & ENET_TS_INTERRUPT)
  137c70:	e51b3008 	ldr	r3, [fp, #-8]
  137c74:	e2033906 	and	r3, r3, #98304	; 0x18000
  137c78:	e3530000 	cmp	r3, #0
  137c7c:	0a00000e 	beq	137cbc <ENET_CommonFrame0IRQHandler+0x14c>
        {
            if(s_enetTsIsr)
  137c80:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  137c84:	e3403014 	movt	r3, #20
  137c88:	e5933000 	ldr	r3, [r3]
  137c8c:	e3530000 	cmp	r3, #0
  137c90:	0a000009 	beq	137cbc <ENET_CommonFrame0IRQHandler+0x14c>
            {
                s_enetTsIsr(base, s_ENETHandle[instance]);
  137c94:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  137c98:	e3403014 	movt	r3, #20
  137c9c:	e5932000 	ldr	r2, [r3]
  137ca0:	e30e3c08 	movw	r3, #60424	; 0xec08
  137ca4:	e3403014 	movt	r3, #20
  137ca8:	e51b100c 	ldr	r1, [fp, #-12]
  137cac:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137cb0:	e1a01003 	mov	r1, r3
  137cb4:	e51b0010 	ldr	r0, [fp, #-16]
  137cb8:	e12fff32 	blx	r2
            }
        }
    }
    if(base->EIMR & ENET_ERR_INTERRUPT)
  137cbc:	e51b3010 	ldr	r3, [fp, #-16]
  137cc0:	e5932008 	ldr	r2, [r3, #8]
  137cc4:	e3a03000 	mov	r3, #0
  137cc8:	e346307c 	movt	r3, #24700	; 0x607c
  137ccc:	e0033002 	and	r3, r3, r2
  137cd0:	e3530000 	cmp	r3, #0
  137cd4:	0a000014 	beq	137d2c <ENET_CommonFrame0IRQHandler+0x1bc>
    {
        if (event & ENET_ERR_INTERRUPT)
  137cd8:	e51b2008 	ldr	r2, [fp, #-8]
  137cdc:	e3a03000 	mov	r3, #0
  137ce0:	e346307c 	movt	r3, #24700	; 0x607c
  137ce4:	e0033002 	and	r3, r3, r2
  137ce8:	e3530000 	cmp	r3, #0
  137cec:	0a00000e 	beq	137d2c <ENET_CommonFrame0IRQHandler+0x1bc>
        {
            if(s_enetErrIsr)
  137cf0:	e30e3c18 	movw	r3, #60440	; 0xec18
  137cf4:	e3403014 	movt	r3, #20
  137cf8:	e5933000 	ldr	r3, [r3]
  137cfc:	e3530000 	cmp	r3, #0
  137d00:	0a000009 	beq	137d2c <ENET_CommonFrame0IRQHandler+0x1bc>
            {
                s_enetErrIsr(base, s_ENETHandle[instance]);
  137d04:	e30e3c18 	movw	r3, #60440	; 0xec18
  137d08:	e3403014 	movt	r3, #20
  137d0c:	e5932000 	ldr	r2, [r3]
  137d10:	e30e3c08 	movw	r3, #60424	; 0xec08
  137d14:	e3403014 	movt	r3, #20
  137d18:	e51b100c 	ldr	r1, [fp, #-12]
  137d1c:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137d20:	e1a01003 	mov	r1, r3
  137d24:	e51b0010 	ldr	r0, [fp, #-16]
  137d28:	e12fff32 	blx	r2
            }
        }
    }
}
  137d2c:	e320f000 	nop	{0}
  137d30:	e24bd004 	sub	sp, fp, #4
  137d34:	e8bd8800 	pop	{fp, pc}

00137d38 <ENET_DriverIRQHandler>:
void ENET_DriverIRQHandler(int irq, void *base)
{
  137d38:	e92d4800 	push	{fp, lr}
  137d3c:	e28db004 	add	fp, sp, #4
  137d40:	e24dd008 	sub	sp, sp, #8
  137d44:	e50b0008 	str	r0, [fp, #-8]
  137d48:	e50b100c 	str	r1, [fp, #-12]
    ENET_CommonFrame0IRQHandler((ENET_Type *)base);
  137d4c:	e51b000c 	ldr	r0, [fp, #-12]
  137d50:	ebffff86 	bl	137b70 <ENET_CommonFrame0IRQHandler>
  137d54:	e320f000 	nop	{0}
  137d58:	e24bd004 	sub	sp, fp, #4
  137d5c:	e8bd8800 	pop	{fp, pc}

00137d60 <GPIO_PinInit>:

//     return instance;
// }

void GPIO_PinInit(GPIO_Type* base, uint32_t pin, const gpio_pin_config_t* Config)
{
  137d60:	e92d4800 	push	{fp, lr}
  137d64:	e28db004 	add	fp, sp, #4
  137d68:	e24dd010 	sub	sp, sp, #16
  137d6c:	e50b0008 	str	r0, [fp, #-8]
  137d70:	e50b100c 	str	r1, [fp, #-12]
  137d74:	e50b2010 	str	r2, [fp, #-16]
//     /* Enable GPIO clock. */
//     CLOCK_EnableClock(s_gpioClock[GPIO_GetInstance(base)]);
// #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */

    /* Register reset to default value */
    base->IMR &= ~(1U << pin);
  137d78:	e51b3008 	ldr	r3, [fp, #-8]
  137d7c:	e5932014 	ldr	r2, [r3, #20]
  137d80:	e3a01001 	mov	r1, #1
  137d84:	e51b300c 	ldr	r3, [fp, #-12]
  137d88:	e1a03311 	lsl	r3, r1, r3
  137d8c:	e1e03003 	mvn	r3, r3
  137d90:	e0022003 	and	r2, r2, r3
  137d94:	e51b3008 	ldr	r3, [fp, #-8]
  137d98:	e5832014 	str	r2, [r3, #20]

    /* Configure GPIO pin direction */
    if (Config->direction == kGPIO_DigitalInput)
  137d9c:	e51b3010 	ldr	r3, [fp, #-16]
  137da0:	e5933000 	ldr	r3, [r3]
  137da4:	e3530000 	cmp	r3, #0
  137da8:	1a000009 	bne	137dd4 <GPIO_PinInit+0x74>
    {
        base->GDIR &= ~(1U << pin);
  137dac:	e51b3008 	ldr	r3, [fp, #-8]
  137db0:	e5932004 	ldr	r2, [r3, #4]
  137db4:	e3a01001 	mov	r1, #1
  137db8:	e51b300c 	ldr	r3, [fp, #-12]
  137dbc:	e1a03311 	lsl	r3, r1, r3
  137dc0:	e1e03003 	mvn	r3, r3
  137dc4:	e0022003 	and	r2, r2, r3
  137dc8:	e51b3008 	ldr	r3, [fp, #-8]
  137dcc:	e5832004 	str	r2, [r3, #4]
  137dd0:	ea00000d 	b	137e0c <GPIO_PinInit+0xac>
    }
    else
    {
        GPIO_WritePinOutput(base, pin, Config->outputLogic);
  137dd4:	e51b3010 	ldr	r3, [fp, #-16]
  137dd8:	e5d33004 	ldrb	r3, [r3, #4]
  137ddc:	e1a02003 	mov	r2, r3
  137de0:	e51b100c 	ldr	r1, [fp, #-12]
  137de4:	e51b0008 	ldr	r0, [fp, #-8]
  137de8:	eb000010 	bl	137e30 <GPIO_WritePinOutput>
        base->GDIR |= (1U << pin);
  137dec:	e51b3008 	ldr	r3, [fp, #-8]
  137df0:	e5932004 	ldr	r2, [r3, #4]
  137df4:	e3a01001 	mov	r1, #1
  137df8:	e51b300c 	ldr	r3, [fp, #-12]
  137dfc:	e1a03311 	lsl	r3, r1, r3
  137e00:	e1822003 	orr	r2, r2, r3
  137e04:	e51b3008 	ldr	r3, [fp, #-8]
  137e08:	e5832004 	str	r2, [r3, #4]
    }

    /* Configure GPIO pin interrupt mode */
    GPIO_SetPinInterruptConfig(base, pin, Config->interruptMode);
  137e0c:	e51b3010 	ldr	r3, [fp, #-16]
  137e10:	e5933008 	ldr	r3, [r3, #8]
  137e14:	e1a02003 	mov	r2, r3
  137e18:	e51b100c 	ldr	r1, [fp, #-12]
  137e1c:	e51b0008 	ldr	r0, [fp, #-8]
  137e20:	eb00002c 	bl	137ed8 <GPIO_SetPinInterruptConfig>
}
  137e24:	e320f000 	nop	{0}
  137e28:	e24bd004 	sub	sp, fp, #4
  137e2c:	e8bd8800 	pop	{fp, pc}

00137e30 <GPIO_WritePinOutput>:

void GPIO_WritePinOutput(GPIO_Type* base, uint32_t pin, uint8_t output)
{
  137e30:	e92d4800 	push	{fp, lr}
  137e34:	e28db004 	add	fp, sp, #4
  137e38:	e24dd010 	sub	sp, sp, #16
  137e3c:	e50b0008 	str	r0, [fp, #-8]
  137e40:	e50b100c 	str	r1, [fp, #-12]
  137e44:	e1a03002 	mov	r3, r2
  137e48:	e54b300d 	strb	r3, [fp, #-13]
    assert(pin < 32);
  137e4c:	e51b300c 	ldr	r3, [fp, #-12]
  137e50:	e353001f 	cmp	r3, #31
  137e54:	9a000007 	bls	137e78 <GPIO_WritePinOutput+0x48>
  137e58:	e30a3410 	movw	r3, #42000	; 0xa410
  137e5c:	e3403014 	movt	r3, #20
  137e60:	e3a0206a 	mov	r2, #106	; 0x6a
  137e64:	e30a13d8 	movw	r1, #41944	; 0xa3d8
  137e68:	e3401014 	movt	r1, #20
  137e6c:	e30a0404 	movw	r0, #41988	; 0xa404
  137e70:	e3400014 	movt	r0, #20
  137e74:	eb000445 	bl	138f90 <__assert_fail>
    if (output == 0U)
  137e78:	e55b300d 	ldrb	r3, [fp, #-13]
  137e7c:	e3530000 	cmp	r3, #0
  137e80:	1a000009 	bne	137eac <GPIO_WritePinOutput+0x7c>
    {
        base->DR &= ~(1U << pin);  /* Set pin output to low level.*/
  137e84:	e51b3008 	ldr	r3, [fp, #-8]
  137e88:	e5932000 	ldr	r2, [r3]
  137e8c:	e3a01001 	mov	r1, #1
  137e90:	e51b300c 	ldr	r3, [fp, #-12]
  137e94:	e1a03311 	lsl	r3, r1, r3
  137e98:	e1e03003 	mvn	r3, r3
  137e9c:	e0022003 	and	r2, r2, r3
  137ea0:	e51b3008 	ldr	r3, [fp, #-8]
  137ea4:	e5832000 	str	r2, [r3]
    }
    else
    {
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
    }
}
  137ea8:	ea000007 	b	137ecc <GPIO_WritePinOutput+0x9c>
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
  137eac:	e51b3008 	ldr	r3, [fp, #-8]
  137eb0:	e5932000 	ldr	r2, [r3]
  137eb4:	e3a01001 	mov	r1, #1
  137eb8:	e51b300c 	ldr	r3, [fp, #-12]
  137ebc:	e1a03311 	lsl	r3, r1, r3
  137ec0:	e1822003 	orr	r2, r2, r3
  137ec4:	e51b3008 	ldr	r3, [fp, #-8]
  137ec8:	e5832000 	str	r2, [r3]
}
  137ecc:	e320f000 	nop	{0}
  137ed0:	e24bd004 	sub	sp, fp, #4
  137ed4:	e8bd8800 	pop	{fp, pc}

00137ed8 <GPIO_SetPinInterruptConfig>:

void GPIO_SetPinInterruptConfig(GPIO_Type* base, uint32_t pin, gpio_interrupt_mode_t pinInterruptMode)
{
  137ed8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137edc:	e28db000 	add	fp, sp, #0
  137ee0:	e24dd01c 	sub	sp, sp, #28
  137ee4:	e50b0010 	str	r0, [fp, #-16]
  137ee8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137eec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    volatile uint32_t *icr;
    uint32_t icrShift;

    icrShift = pin;
  137ef0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137ef4:	e50b300c 	str	r3, [fp, #-12]

    /* Register reset to default value */
    base->EDGE_SEL &= ~(1U << pin);
  137ef8:	e51b3010 	ldr	r3, [fp, #-16]
  137efc:	e593201c 	ldr	r2, [r3, #28]
  137f00:	e3a01001 	mov	r1, #1
  137f04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137f08:	e1a03311 	lsl	r3, r1, r3
  137f0c:	e1e03003 	mvn	r3, r3
  137f10:	e0022003 	and	r2, r2, r3
  137f14:	e51b3010 	ldr	r3, [fp, #-16]
  137f18:	e583201c 	str	r2, [r3, #28]

    if(pin < 16)
  137f1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137f20:	e353000f 	cmp	r3, #15
  137f24:	8a000003 	bhi	137f38 <GPIO_SetPinInterruptConfig+0x60>
    {
        icr = &(base->ICR1);
  137f28:	e51b3010 	ldr	r3, [fp, #-16]
  137f2c:	e283300c 	add	r3, r3, #12
  137f30:	e50b3008 	str	r3, [fp, #-8]
  137f34:	ea000005 	b	137f50 <GPIO_SetPinInterruptConfig+0x78>
    }
    else
    {
        icr = &(base->ICR2);
  137f38:	e51b3010 	ldr	r3, [fp, #-16]
  137f3c:	e2833010 	add	r3, r3, #16
  137f40:	e50b3008 	str	r3, [fp, #-8]
        icrShift -= 16;
  137f44:	e51b300c 	ldr	r3, [fp, #-12]
  137f48:	e2433010 	sub	r3, r3, #16
  137f4c:	e50b300c 	str	r3, [fp, #-12]
    }
    switch(pinInterruptMode)
  137f50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137f54:	e2433001 	sub	r3, r3, #1
  137f58:	e3530004 	cmp	r3, #4
  137f5c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  137f60:	ea000042 	b	138070 <GPIO_SetPinInterruptConfig+0x198>
  137f64:	00137f78 	.word	0x00137f78
  137f68:	00137fa4 	.word	0x00137fa4
  137f6c:	00137fe4 	.word	0x00137fe4
  137f70:	00138024 	.word	0x00138024
  137f74:	0013804c 	.word	0x0013804c
    {
        case(kGPIO_IntLowLevel):
            *icr &= ~(3U << (2 * icrShift));
  137f78:	e51b3008 	ldr	r3, [fp, #-8]
  137f7c:	e5932000 	ldr	r2, [r3]
  137f80:	e51b300c 	ldr	r3, [fp, #-12]
  137f84:	e1a03083 	lsl	r3, r3, #1
  137f88:	e3a01003 	mov	r1, #3
  137f8c:	e1a03311 	lsl	r3, r1, r3
  137f90:	e1e03003 	mvn	r3, r3
  137f94:	e0022003 	and	r2, r2, r3
  137f98:	e51b3008 	ldr	r3, [fp, #-8]
  137f9c:	e5832000 	str	r2, [r3]
            break;
  137fa0:	ea000033 	b	138074 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntHighLevel):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (1U << (2 * icrShift));
  137fa4:	e51b3008 	ldr	r3, [fp, #-8]
  137fa8:	e5932000 	ldr	r2, [r3]
  137fac:	e51b300c 	ldr	r3, [fp, #-12]
  137fb0:	e1a03083 	lsl	r3, r3, #1
  137fb4:	e3a01003 	mov	r1, #3
  137fb8:	e1a03311 	lsl	r3, r1, r3
  137fbc:	e1e03003 	mvn	r3, r3
  137fc0:	e0022003 	and	r2, r2, r3
  137fc4:	e51b300c 	ldr	r3, [fp, #-12]
  137fc8:	e1a03083 	lsl	r3, r3, #1
  137fcc:	e3a01001 	mov	r1, #1
  137fd0:	e1a03311 	lsl	r3, r1, r3
  137fd4:	e1822003 	orr	r2, r2, r3
  137fd8:	e51b3008 	ldr	r3, [fp, #-8]
  137fdc:	e5832000 	str	r2, [r3]
            break;
  137fe0:	ea000023 	b	138074 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingEdge):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (2U << (2 * icrShift));
  137fe4:	e51b3008 	ldr	r3, [fp, #-8]
  137fe8:	e5932000 	ldr	r2, [r3]
  137fec:	e51b300c 	ldr	r3, [fp, #-12]
  137ff0:	e1a03083 	lsl	r3, r3, #1
  137ff4:	e3a01003 	mov	r1, #3
  137ff8:	e1a03311 	lsl	r3, r1, r3
  137ffc:	e1e03003 	mvn	r3, r3
  138000:	e0022003 	and	r2, r2, r3
  138004:	e51b300c 	ldr	r3, [fp, #-12]
  138008:	e1a03083 	lsl	r3, r3, #1
  13800c:	e3a01002 	mov	r1, #2
  138010:	e1a03311 	lsl	r3, r1, r3
  138014:	e1822003 	orr	r2, r2, r3
  138018:	e51b3008 	ldr	r3, [fp, #-8]
  13801c:	e5832000 	str	r2, [r3]
            break;
  138020:	ea000013 	b	138074 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntFallingEdge):
            *icr |= (3U << (2 * icrShift));
  138024:	e51b3008 	ldr	r3, [fp, #-8]
  138028:	e5932000 	ldr	r2, [r3]
  13802c:	e51b300c 	ldr	r3, [fp, #-12]
  138030:	e1a03083 	lsl	r3, r3, #1
  138034:	e3a01003 	mov	r1, #3
  138038:	e1a03311 	lsl	r3, r1, r3
  13803c:	e1822003 	orr	r2, r2, r3
  138040:	e51b3008 	ldr	r3, [fp, #-8]
  138044:	e5832000 	str	r2, [r3]
            break;
  138048:	ea000009 	b	138074 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingOrFallingEdge):
            base->EDGE_SEL |= (1U << pin);
  13804c:	e51b3010 	ldr	r3, [fp, #-16]
  138050:	e593201c 	ldr	r2, [r3, #28]
  138054:	e3a01001 	mov	r1, #1
  138058:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13805c:	e1a03311 	lsl	r3, r1, r3
  138060:	e1822003 	orr	r2, r2, r3
  138064:	e51b3010 	ldr	r3, [fp, #-16]
  138068:	e583201c 	str	r2, [r3, #28]
            break;
  13806c:	ea000000 	b	138074 <GPIO_SetPinInterruptConfig+0x19c>
        default:
            break;
  138070:	e320f000 	nop	{0}
    }
}
  138074:	e320f000 	nop	{0}
  138078:	e28bd000 	add	sp, fp, #0
  13807c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  138080:	e12fff1e 	bx	lr

00138084 <ENET_ReadSMIData>:
{
  138084:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  138088:	e28db000 	add	fp, sp, #0
  13808c:	e24dd00c 	sub	sp, sp, #12
  138090:	e50b0008 	str	r0, [fp, #-8]
    return (uint32_t)((base->MMFR & ENET_MMFR_DATA_MASK) >> ENET_MMFR_DATA_SHIFT);
  138094:	e51b3008 	ldr	r3, [fp, #-8]
  138098:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  13809c:	e6ff3073 	uxth	r3, r3
}
  1380a0:	e1a00003 	mov	r0, r3
  1380a4:	e28bd000 	add	sp, fp, #0
  1380a8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1380ac:	e12fff1e 	bx	lr

001380b0 <ENET_GetInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @return The event status of the interrupt source. This is the logical OR of members
 *         of the enumeration :: enet_interrupt_enable_t.
 */
static inline uint32_t ENET_GetInterruptStatus(ENET_Type *base)
{
  1380b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1380b4:	e28db000 	add	fp, sp, #0
  1380b8:	e24dd00c 	sub	sp, sp, #12
  1380bc:	e50b0008 	str	r0, [fp, #-8]
    return base->EIR;
  1380c0:	e51b3008 	ldr	r3, [fp, #-8]
  1380c4:	e5933004 	ldr	r3, [r3, #4]
}
  1380c8:	e1a00003 	mov	r0, r3
  1380cc:	e28bd000 	add	sp, fp, #0
  1380d0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1380d4:	e12fff1e 	bx	lr

001380d8 <ENET_ClearInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupt source to be cleared.
 * This is the logical OR of members of the enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_ClearInterruptStatus(ENET_Type *base, uint32_t mask)
{
  1380d8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1380dc:	e28db000 	add	fp, sp, #0
  1380e0:	e24dd00c 	sub	sp, sp, #12
  1380e4:	e50b0008 	str	r0, [fp, #-8]
  1380e8:	e50b100c 	str	r1, [fp, #-12]
    base->EIR = mask;
  1380ec:	e51b3008 	ldr	r3, [fp, #-8]
  1380f0:	e51b200c 	ldr	r2, [fp, #-12]
  1380f4:	e5832004 	str	r2, [r3, #4]
}
  1380f8:	e320f000 	nop	{0}
  1380fc:	e28bd000 	add	sp, fp, #0
  138100:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  138104:	e12fff1e 	bx	lr

00138108 <phy_reset>:

/*******************************************************************************
 * Code
 ******************************************************************************/
status_t phy_reset(GPIO_Type *base,uint32_t pin)
{
  138108:	e92d4800 	push	{fp, lr}
  13810c:	e28db004 	add	fp, sp, #4
  138110:	e24dd018 	sub	sp, sp, #24
  138114:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  138118:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    GPIO_Type *gpio_base = NULL;
  13811c:	e3a03000 	mov	r3, #0
  138120:	e50b3008 	str	r3, [fp, #-8]
    gpio_pin_config_t sw_config =
  138124:	e3a03001 	mov	r3, #1
  138128:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  13812c:	e3a03000 	mov	r3, #0
  138130:	e54b3010 	strb	r3, [fp, #-16]
  138134:	e3a03000 	mov	r3, #0
  138138:	e50b300c 	str	r3, [fp, #-12]
        0,
        kGPIO_NoIntmode,
    };

    // gpio_base = (GPIO_Type *)rt_ioremap((void *)base,0x1000);
    gpio_base = (GPIO_Type *)ueth_remap((void *)base, UETH_REMAP, 0x1000);
  13813c:	e3a02a01 	mov	r2, #4096	; 0x1000
  138140:	e3a01001 	mov	r1, #1
  138144:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138148:	ebff30d9 	bl	1044b4 <ueth_remap>
  13814c:	e50b0008 	str	r0, [fp, #-8]
    GPIO_PinInit(gpio_base, pin, &sw_config);
  138150:	e24b3014 	sub	r3, fp, #20
  138154:	e1a02003 	mov	r2, r3
  138158:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13815c:	e51b0008 	ldr	r0, [fp, #-8]
  138160:	ebfffefe 	bl	137d60 <GPIO_PinInit>
    GPIO_WritePinOutput(gpio_base,pin,0);
  138164:	e3a02000 	mov	r2, #0
  138168:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13816c:	e51b0008 	ldr	r0, [fp, #-8]
  138170:	ebffff2e 	bl	137e30 <GPIO_WritePinOutput>
    rt_thread_mdelay(1);
  138174:	e3a00001 	mov	r0, #1
  138178:	ebff273f 	bl	101e7c <rt_thread_mdelay>
    GPIO_WritePinOutput(gpio_base,pin,1);
  13817c:	e3a02001 	mov	r2, #1
  138180:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138184:	e51b0008 	ldr	r0, [fp, #-8]
  138188:	ebffff28 	bl	137e30 <GPIO_WritePinOutput>

    return kStatus_Success;
  13818c:	e3a03000 	mov	r3, #0

}
  138190:	e1a00003 	mov	r0, r3
  138194:	e24bd004 	sub	sp, fp, #4
  138198:	e8bd8800 	pop	{fp, pc}

0013819c <PHY_StartNegotiation>:

status_t PHY_StartNegotiation(ENET_Type *base, uint32_t phyAddr)
{
  13819c:	e92d4800 	push	{fp, lr}
  1381a0:	e28db004 	add	fp, sp, #4
  1381a4:	e24dd018 	sub	sp, sp, #24
  1381a8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1381ac:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32_t counter = PHY_TIMEOUT_COUNT;
  1381b0:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1381b4:	e50b3008 	str	r3, [fp, #-8]
    status_t result = kStatus_Success;
  1381b8:	e3a03000 	mov	r3, #0
  1381bc:	e50b3010 	str	r3, [fp, #-16]
    uint32_t bssReg;
    uint32_t timeDelay;

    result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, PHY_BCTL_RESET_MASK);
  1381c0:	e3a03902 	mov	r3, #32768	; 0x8000
  1381c4:	e3a02000 	mov	r2, #0
  1381c8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1381cc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1381d0:	eb000071 	bl	13839c <PHY_Write>
  1381d4:	e50b0010 	str	r0, [fp, #-16]
    if (result == kStatus_Success)
  1381d8:	e51b3010 	ldr	r3, [fp, #-16]
  1381dc:	e3530000 	cmp	r3, #0
  1381e0:	1a000038 	bne	1382c8 <PHY_StartNegotiation+0x12c>
        {
            return result;
        }
#endif  /* FSL_FEATURE_PHYKSZ8081_USE_RMII50M_MODE */
        /* Set the negotiation. */
        result = PHY_Write(base, phyAddr, PHY_AUTONEG_ADVERTISE_REG,
  1381e4:	e30031e1 	movw	r3, #481	; 0x1e1
  1381e8:	e3a02004 	mov	r2, #4
  1381ec:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1381f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1381f4:	eb000068 	bl	13839c <PHY_Write>
  1381f8:	e50b0010 	str	r0, [fp, #-16]
                           (PHY_100BASETX_FULLDUPLEX_MASK | PHY_100BASETX_HALFDUPLEX_MASK |
                            PHY_10BASETX_FULLDUPLEX_MASK | PHY_10BASETX_HALFDUPLEX_MASK | 0x1U));
        if (result == kStatus_Success)
  1381fc:	e51b3010 	ldr	r3, [fp, #-16]
  138200:	e3530000 	cmp	r3, #0
  138204:	1a00002f 	bne	1382c8 <PHY_StartNegotiation+0x12c>
        {
            result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG,
  138208:	e3a03c12 	mov	r3, #4608	; 0x1200
  13820c:	e3a02000 	mov	r2, #0
  138210:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138214:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138218:	eb00005f 	bl	13839c <PHY_Write>
  13821c:	e50b0010 	str	r0, [fp, #-16]
                               (PHY_BCTL_AUTONEG_MASK | PHY_BCTL_RESTART_AUTONEG_MASK));
            if (result == kStatus_Success)
  138220:	e51b3010 	ldr	r3, [fp, #-16]
  138224:	e3530000 	cmp	r3, #0
  138228:	1a000026 	bne	1382c8 <PHY_StartNegotiation+0x12c>
            {
                /* Check auto negotiation complete. */
                while (counter --)
  13822c:	ea000020 	b	1382b4 <PHY_StartNegotiation+0x118>
                {
                    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &bssReg);
  138230:	e24b3014 	sub	r3, fp, #20
  138234:	e3a02001 	mov	r2, #1
  138238:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13823c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138240:	eb000083 	bl	138454 <PHY_Read>
  138244:	e50b0010 	str	r0, [fp, #-16]
                    if ( result == kStatus_Success)
  138248:	e51b3010 	ldr	r3, [fp, #-16]
  13824c:	e3530000 	cmp	r3, #0
  138250:	1a000010 	bne	138298 <PHY_StartNegotiation+0xfc>
                    {
                        if ((bssReg & PHY_BSTATUS_AUTONEGCOMP_MASK) != 0)
  138254:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  138258:	e2033020 	and	r3, r3, #32
  13825c:	e3530000 	cmp	r3, #0
  138260:	0a00000c 	beq	138298 <PHY_StartNegotiation+0xfc>
                        {
                            /* Wait a moment for Phy status stable. */
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  138264:	e3a03000 	mov	r3, #0
  138268:	e50b300c 	str	r3, [fp, #-12]
  13826c:	ea000003 	b	138280 <PHY_StartNegotiation+0xe4>
                            {
                                __ASM("nop");
  138270:	e320f000 	nop	{0}
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  138274:	e51b300c 	ldr	r3, [fp, #-12]
  138278:	e2833001 	add	r3, r3, #1
  13827c:	e50b300c 	str	r3, [fp, #-12]
  138280:	e51b200c 	ldr	r2, [fp, #-12]
  138284:	e30f3ffe 	movw	r3, #65534	; 0xfffe
  138288:	e34034ff 	movt	r3, #1279	; 0x4ff
  13828c:	e1520003 	cmp	r2, r3
  138290:	9afffff6 	bls	138270 <PHY_StartNegotiation+0xd4>
                            }
                            break;
  138294:	ea00000b 	b	1382c8 <PHY_StartNegotiation+0x12c>
                        }
                    }
                    // rt_thread_delay(PHY_NEGOTIATION_DELAY);
                    rt_thread_mdelay(PHY_NEGOTIATION_DELAY);
  138298:	e3a00064 	mov	r0, #100	; 0x64
  13829c:	ebff26f6 	bl	101e7c <rt_thread_mdelay>
                    if (!counter)
  1382a0:	e51b3008 	ldr	r3, [fp, #-8]
  1382a4:	e3530000 	cmp	r3, #0
  1382a8:	1a000001 	bne	1382b4 <PHY_StartNegotiation+0x118>
                    {
                        return kStatus_PHY_AutoNegotiateFail;
  1382ac:	e3013006 	movw	r3, #4102	; 0x1006
  1382b0:	ea000005 	b	1382cc <PHY_StartNegotiation+0x130>
                while (counter --)
  1382b4:	e51b3008 	ldr	r3, [fp, #-8]
  1382b8:	e2432001 	sub	r2, r3, #1
  1382bc:	e50b2008 	str	r2, [fp, #-8]
  1382c0:	e3530000 	cmp	r3, #0
  1382c4:	1affffd9 	bne	138230 <PHY_StartNegotiation+0x94>
                    }
                }
            }
        }
    }
    return kStatus_Success;
  1382c8:	e3a03000 	mov	r3, #0
}
  1382cc:	e1a00003 	mov	r0, r3
  1382d0:	e24bd004 	sub	sp, fp, #4
  1382d4:	e8bd8800 	pop	{fp, pc}

001382d8 <PHY_Init>:

status_t PHY_Init(ENET_Type *base, uint32_t phyAddr, uint32_t srcClock_Hz,uint32_t phy_id)
{
  1382d8:	e92d4800 	push	{fp, lr}
  1382dc:	e28db004 	add	fp, sp, #4
  1382e0:	e24dd020 	sub	sp, sp, #32
  1382e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1382e8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1382ec:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1382f0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    uint32_t counter = PHY_TIMEOUT_COUNT;
  1382f4:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1382f8:	e50b3008 	str	r3, [fp, #-8]
    uint32_t idReg = 0;
  1382fc:	e3a03000 	mov	r3, #0
  138300:	e50b3010 	str	r3, [fp, #-16]
    status_t result = kStatus_Success;
  138304:	e3a03000 	mov	r3, #0
  138308:	e50b300c 	str	r3, [fp, #-12]

    ENET_SetSMI(base, srcClock_Hz, false);
  13830c:	e3a02000 	mov	r2, #0
  138310:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  138314:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138318:	ebfffa3c 	bl	136c10 <ENET_SetSMI>
    PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  13831c:	e24b3010 	sub	r3, fp, #16
  138320:	e3a02002 	mov	r2, #2
  138324:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138328:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  13832c:	eb000048 	bl	138454 <PHY_Read>
    while ((idReg != phy_id) && (counter != 0))
  138330:	ea000007 	b	138354 <PHY_Init+0x7c>
    {
        PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  138334:	e24b3010 	sub	r3, fp, #16
  138338:	e3a02002 	mov	r2, #2
  13833c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138340:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138344:	eb000042 	bl	138454 <PHY_Read>
        counter --;
  138348:	e51b3008 	ldr	r3, [fp, #-8]
  13834c:	e2433001 	sub	r3, r3, #1
  138350:	e50b3008 	str	r3, [fp, #-8]
    while ((idReg != phy_id) && (counter != 0))
  138354:	e51b3010 	ldr	r3, [fp, #-16]
  138358:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  13835c:	e1520003 	cmp	r2, r3
  138360:	0a000002 	beq	138370 <PHY_Init+0x98>
  138364:	e51b3008 	ldr	r3, [fp, #-8]
  138368:	e3530000 	cmp	r3, #0
  13836c:	1afffff0 	bne	138334 <PHY_Init+0x5c>
    }
    if (!counter)
  138370:	e51b3008 	ldr	r3, [fp, #-8]
  138374:	e3530000 	cmp	r3, #0
  138378:	1a000001 	bne	138384 <PHY_Init+0xac>
    {
        return kStatus_Fail;
  13837c:	e3a03001 	mov	r3, #1
  138380:	ea000002 	b	138390 <PHY_Init+0xb8>
    }
    /* Reset PHY. */
    counter = PHY_TIMEOUT_COUNT;
  138384:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  138388:	e50b3008 	str	r3, [fp, #-8]
    return result;
  13838c:	e51b300c 	ldr	r3, [fp, #-12]
}
  138390:	e1a00003 	mov	r0, r3
  138394:	e24bd004 	sub	sp, fp, #4
  138398:	e8bd8800 	pop	{fp, pc}

0013839c <PHY_Write>:

status_t PHY_Write(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  13839c:	e92d4800 	push	{fp, lr}
  1383a0:	e28db004 	add	fp, sp, #4
  1383a4:	e24dd020 	sub	sp, sp, #32
  1383a8:	e50b0010 	str	r0, [fp, #-16]
  1383ac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1383b0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1383b4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t counter;

    /* Clear the SMI interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  1383b8:	e3a01502 	mov	r1, #8388608	; 0x800000
  1383bc:	e51b0010 	ldr	r0, [fp, #-16]
  1383c0:	ebffff44 	bl	1380d8 <ENET_ClearInterruptStatus>

    /* Starts a SMI write command. */
    ENET_StartSMIWrite(base, phyAddr, phyReg, kENET_MiiWriteValidFrame, data);
  1383c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1383c8:	e58d3000 	str	r3, [sp]
  1383cc:	e3a03001 	mov	r3, #1
  1383d0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1383d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1383d8:	e51b0010 	ldr	r0, [fp, #-16]
  1383dc:	ebfffa4a 	bl	136d0c <ENET_StartSMIWrite>

    /* Wait for SMI complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1383e0:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1383e4:	e50b3008 	str	r3, [fp, #-8]
  1383e8:	ea000008 	b	138410 <PHY_Write+0x74>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  1383ec:	e51b0010 	ldr	r0, [fp, #-16]
  1383f0:	ebffff2e 	bl	1380b0 <ENET_GetInterruptStatus>
  1383f4:	e1a03000 	mov	r3, r0
  1383f8:	e2033502 	and	r3, r3, #8388608	; 0x800000
  1383fc:	e3530000 	cmp	r3, #0
  138400:	1a000006 	bne	138420 <PHY_Write+0x84>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  138404:	e51b3008 	ldr	r3, [fp, #-8]
  138408:	e2433001 	sub	r3, r3, #1
  13840c:	e50b3008 	str	r3, [fp, #-8]
  138410:	e51b3008 	ldr	r3, [fp, #-8]
  138414:	e3530000 	cmp	r3, #0
  138418:	1afffff3 	bne	1383ec <PHY_Write+0x50>
  13841c:	ea000000 	b	138424 <PHY_Write+0x88>
        {
            break;
  138420:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  138424:	e51b3008 	ldr	r3, [fp, #-8]
  138428:	e3530000 	cmp	r3, #0
  13842c:	1a000001 	bne	138438 <PHY_Write+0x9c>
    {
        return kStatus_PHY_SMIVisitTimeout;
  138430:	e3013005 	movw	r3, #4101	; 0x1005
  138434:	ea000003 	b	138448 <PHY_Write+0xac>
    }

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138438:	e3a01502 	mov	r1, #8388608	; 0x800000
  13843c:	e51b0010 	ldr	r0, [fp, #-16]
  138440:	ebffff24 	bl	1380d8 <ENET_ClearInterruptStatus>

    return kStatus_Success;
  138444:	e3a03000 	mov	r3, #0
}
  138448:	e1a00003 	mov	r0, r3
  13844c:	e24bd004 	sub	sp, fp, #4
  138450:	e8bd8800 	pop	{fp, pc}

00138454 <PHY_Read>:

status_t PHY_Read(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t *dataPtr)
{
  138454:	e92d4800 	push	{fp, lr}
  138458:	e28db004 	add	fp, sp, #4
  13845c:	e24dd018 	sub	sp, sp, #24
  138460:	e50b0010 	str	r0, [fp, #-16]
  138464:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138468:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  13846c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(dataPtr);
  138470:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  138474:	e3530000 	cmp	r3, #0
  138478:	1a000005 	bne	138494 <PHY_Read+0x40>
  13847c:	e3a020d0 	mov	r2, #208	; 0xd0
  138480:	e30a143c 	movw	r1, #42044	; 0xa43c
  138484:	e3401014 	movt	r1, #20
  138488:	e30a0424 	movw	r0, #42020	; 0xa424
  13848c:	e3400014 	movt	r0, #20
  138490:	ebff2c40 	bl	103598 <rt_assert_handler>

    uint32_t counter;

    /* Clear the MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138494:	e3a01502 	mov	r1, #8388608	; 0x800000
  138498:	e51b0010 	ldr	r0, [fp, #-16]
  13849c:	ebffff0d 	bl	1380d8 <ENET_ClearInterruptStatus>

    /* Starts a SMI read command operation. */
    ENET_StartSMIRead(base, phyAddr, phyReg, kENET_MiiReadValidFrame);
  1384a0:	e3a03002 	mov	r3, #2
  1384a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1384a8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1384ac:	e51b0010 	ldr	r0, [fp, #-16]
  1384b0:	ebfffa36 	bl	136d90 <ENET_StartSMIRead>

    /* Wait for MII complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1384b4:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1384b8:	e50b3008 	str	r3, [fp, #-8]
  1384bc:	ea000008 	b	1384e4 <PHY_Read+0x90>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  1384c0:	e51b0010 	ldr	r0, [fp, #-16]
  1384c4:	ebfffef9 	bl	1380b0 <ENET_GetInterruptStatus>
  1384c8:	e1a03000 	mov	r3, r0
  1384cc:	e2033502 	and	r3, r3, #8388608	; 0x800000
  1384d0:	e3530000 	cmp	r3, #0
  1384d4:	1a000006 	bne	1384f4 <PHY_Read+0xa0>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1384d8:	e51b3008 	ldr	r3, [fp, #-8]
  1384dc:	e2433001 	sub	r3, r3, #1
  1384e0:	e50b3008 	str	r3, [fp, #-8]
  1384e4:	e51b3008 	ldr	r3, [fp, #-8]
  1384e8:	e3530000 	cmp	r3, #0
  1384ec:	1afffff3 	bne	1384c0 <PHY_Read+0x6c>
  1384f0:	ea000000 	b	1384f8 <PHY_Read+0xa4>
        {
            break;
  1384f4:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  1384f8:	e51b3008 	ldr	r3, [fp, #-8]
  1384fc:	e3530000 	cmp	r3, #0
  138500:	1a000001 	bne	13850c <PHY_Read+0xb8>
    {
        return kStatus_PHY_SMIVisitTimeout;
  138504:	e3013005 	movw	r3, #4101	; 0x1005
  138508:	ea000008 	b	138530 <PHY_Read+0xdc>
    }

    /* Get data from MII register. */
    *dataPtr = ENET_ReadSMIData(base);
  13850c:	e51b0010 	ldr	r0, [fp, #-16]
  138510:	ebfffedb 	bl	138084 <ENET_ReadSMIData>
  138514:	e1a02000 	mov	r2, r0
  138518:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13851c:	e5832000 	str	r2, [r3]

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138520:	e3a01502 	mov	r1, #8388608	; 0x800000
  138524:	e51b0010 	ldr	r0, [fp, #-16]
  138528:	ebfffeea 	bl	1380d8 <ENET_ClearInterruptStatus>

    return kStatus_Success;
  13852c:	e3a03000 	mov	r3, #0
}
  138530:	e1a00003 	mov	r0, r3
  138534:	e24bd004 	sub	sp, fp, #4
  138538:	e8bd8800 	pop	{fp, pc}

0013853c <PHY_EnableLoopback>:

status_t PHY_EnableLoopback(ENET_Type *base, uint32_t phyAddr, phy_loop_t mode, bool enable)
{
  13853c:	e92d4800 	push	{fp, lr}
  138540:	e28db004 	add	fp, sp, #4
  138544:	e24dd018 	sub	sp, sp, #24
  138548:	e50b0010 	str	r0, [fp, #-16]
  13854c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138550:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  138554:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    status_t result;
    uint32_t data = 0;
  138558:	e3a03000 	mov	r3, #0
  13855c:	e50b300c 	str	r3, [fp, #-12]

    /* Set the loop mode. */
    if (enable)
  138560:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  138564:	e3530000 	cmp	r3, #0
  138568:	0a000024 	beq	138600 <PHY_EnableLoopback+0xc4>
    {
        if (mode == kPHY_LocalLoop)
  13856c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138570:	e3530000 	cmp	r3, #0
  138574:	1a000010 	bne	1385bc <PHY_EnableLoopback+0x80>
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  138578:	e24b300c 	sub	r3, fp, #12
  13857c:	e3a02000 	mov	r2, #0
  138580:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138584:	e51b0010 	ldr	r0, [fp, #-16]
  138588:	ebffffb1 	bl	138454 <PHY_Read>
  13858c:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  138590:	e51b3008 	ldr	r3, [fp, #-8]
  138594:	e3530000 	cmp	r3, #0
  138598:	1a00003d 	bne	138694 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data | PHY_BCTL_LOOP_MASK));
  13859c:	e51b300c 	ldr	r3, [fp, #-12]
  1385a0:	e3833901 	orr	r3, r3, #16384	; 0x4000
  1385a4:	e3a02000 	mov	r2, #0
  1385a8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1385ac:	e51b0010 	ldr	r0, [fp, #-16]
  1385b0:	ebffff79 	bl	13839c <PHY_Write>
  1385b4:	e1a03000 	mov	r3, r0
  1385b8:	ea000036 	b	138698 <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  1385bc:	e24b300c 	sub	r3, fp, #12
  1385c0:	e3a0201f 	mov	r2, #31
  1385c4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1385c8:	e51b0010 	ldr	r0, [fp, #-16]
  1385cc:	ebffffa0 	bl	138454 <PHY_Read>
  1385d0:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  1385d4:	e51b3008 	ldr	r3, [fp, #-8]
  1385d8:	e3530000 	cmp	r3, #0
  1385dc:	1a00002c 	bne	138694 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data | PHY_CTL2_REMOTELOOP_MASK));
  1385e0:	e51b300c 	ldr	r3, [fp, #-12]
  1385e4:	e3833004 	orr	r3, r3, #4
  1385e8:	e3a0201f 	mov	r2, #31
  1385ec:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1385f0:	e51b0010 	ldr	r0, [fp, #-16]
  1385f4:	ebffff68 	bl	13839c <PHY_Write>
  1385f8:	e1a03000 	mov	r3, r0
  1385fc:	ea000025 	b	138698 <PHY_EnableLoopback+0x15c>
        }
    }
    else
    {
        /* Disable the loop mode. */
        if (mode == kPHY_LocalLoop)
  138600:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138604:	e3530000 	cmp	r3, #0
  138608:	1a000010 	bne	138650 <PHY_EnableLoopback+0x114>
        {
            /* First read the current status in the basic control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  13860c:	e24b300c 	sub	r3, fp, #12
  138610:	e3a02000 	mov	r2, #0
  138614:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138618:	e51b0010 	ldr	r0, [fp, #-16]
  13861c:	ebffff8c 	bl	138454 <PHY_Read>
  138620:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  138624:	e51b3008 	ldr	r3, [fp, #-8]
  138628:	e3530000 	cmp	r3, #0
  13862c:	1a000018 	bne	138694 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data & ~PHY_BCTL_LOOP_MASK));
  138630:	e51b300c 	ldr	r3, [fp, #-12]
  138634:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  138638:	e3a02000 	mov	r2, #0
  13863c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138640:	e51b0010 	ldr	r0, [fp, #-16]
  138644:	ebffff54 	bl	13839c <PHY_Write>
  138648:	e1a03000 	mov	r3, r0
  13864c:	ea000011 	b	138698 <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control one register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  138650:	e24b300c 	sub	r3, fp, #12
  138654:	e3a0201f 	mov	r2, #31
  138658:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13865c:	e51b0010 	ldr	r0, [fp, #-16]
  138660:	ebffff7b 	bl	138454 <PHY_Read>
  138664:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  138668:	e51b3008 	ldr	r3, [fp, #-8]
  13866c:	e3530000 	cmp	r3, #0
  138670:	1a000007 	bne	138694 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data & ~PHY_CTL2_REMOTELOOP_MASK));
  138674:	e51b300c 	ldr	r3, [fp, #-12]
  138678:	e3c33004 	bic	r3, r3, #4
  13867c:	e3a0201f 	mov	r2, #31
  138680:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138684:	e51b0010 	ldr	r0, [fp, #-16]
  138688:	ebffff43 	bl	13839c <PHY_Write>
  13868c:	e1a03000 	mov	r3, r0
  138690:	ea000000 	b	138698 <PHY_EnableLoopback+0x15c>
            }
        }
    }
    return result;
  138694:	e51b3008 	ldr	r3, [fp, #-8]
}
  138698:	e1a00003 	mov	r0, r3
  13869c:	e24bd004 	sub	sp, fp, #4
  1386a0:	e8bd8800 	pop	{fp, pc}

001386a4 <PHY_GetLinkStatus>:

status_t PHY_GetLinkStatus(ENET_Type *base, uint32_t phyAddr, bool *status)
{
  1386a4:	e92d4800 	push	{fp, lr}
  1386a8:	e28db004 	add	fp, sp, #4
  1386ac:	e24dd018 	sub	sp, sp, #24
  1386b0:	e50b0010 	str	r0, [fp, #-16]
  1386b4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1386b8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(status);
  1386bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1386c0:	e3530000 	cmp	r3, #0
  1386c4:	1a000005 	bne	1386e0 <PHY_GetLinkStatus+0x3c>
  1386c8:	e3a02f4a 	mov	r2, #296	; 0x128
  1386cc:	e30a1448 	movw	r1, #42056	; 0xa448
  1386d0:	e3401014 	movt	r1, #20
  1386d4:	e30a042c 	movw	r0, #42028	; 0xa42c
  1386d8:	e3400014 	movt	r0, #20
  1386dc:	ebff2bad 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  1386e0:	e3a03000 	mov	r3, #0
  1386e4:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data;

    /* Read the basic status register. */
    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &data);
  1386e8:	e24b300c 	sub	r3, fp, #12
  1386ec:	e3a02001 	mov	r2, #1
  1386f0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1386f4:	e51b0010 	ldr	r0, [fp, #-16]
  1386f8:	ebffff55 	bl	138454 <PHY_Read>
  1386fc:	e50b0008 	str	r0, [fp, #-8]
    if (result == kStatus_Success)
  138700:	e51b3008 	ldr	r3, [fp, #-8]
  138704:	e3530000 	cmp	r3, #0
  138708:	1a00000a 	bne	138738 <PHY_GetLinkStatus+0x94>
    {
        if (!(PHY_BSTATUS_LINKSTATUS_MASK & data))
  13870c:	e51b300c 	ldr	r3, [fp, #-12]
  138710:	e2033004 	and	r3, r3, #4
  138714:	e3530000 	cmp	r3, #0
  138718:	1a000003 	bne	13872c <PHY_GetLinkStatus+0x88>
        {
            /* link down. */
            *status = false;
  13871c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138720:	e3a02000 	mov	r2, #0
  138724:	e5c32000 	strb	r2, [r3]
  138728:	ea000002 	b	138738 <PHY_GetLinkStatus+0x94>
        }
        else
        {
            /* link up. */
            *status = true;
  13872c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138730:	e3a02001 	mov	r2, #1
  138734:	e5c32000 	strb	r2, [r3]
        }
    }
    return result;
  138738:	e51b3008 	ldr	r3, [fp, #-8]
}
  13873c:	e1a00003 	mov	r0, r3
  138740:	e24bd004 	sub	sp, fp, #4
  138744:	e8bd8800 	pop	{fp, pc}

00138748 <PHY_GetLinkSpeedDuplex>:

status_t PHY_GetLinkSpeedDuplex(ENET_Type *base, uint32_t phyAddr, phy_speed_t *speed, phy_duplex_t *duplex)
{
  138748:	e92d4800 	push	{fp, lr}
  13874c:	e28db004 	add	fp, sp, #4
  138750:	e24dd020 	sub	sp, sp, #32
  138754:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  138758:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  13875c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  138760:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    RT_ASSERT(duplex);
  138764:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138768:	e3530000 	cmp	r3, #0
  13876c:	1a000005 	bne	138788 <PHY_GetLinkSpeedDuplex+0x40>
  138770:	e3002141 	movw	r2, #321	; 0x141
  138774:	e30a145c 	movw	r1, #42076	; 0xa45c
  138778:	e3401014 	movt	r1, #20
  13877c:	e30a0434 	movw	r0, #42036	; 0xa434
  138780:	e3400014 	movt	r0, #20
  138784:	ebff2b83 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  138788:	e3a03000 	mov	r3, #0
  13878c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data, ctlReg;

    /* Read the control two register. */

    result = PHY_Read(base, phyAddr, 31, &ctlReg);
  138790:	e24b3010 	sub	r3, fp, #16
  138794:	e3a0201f 	mov	r2, #31
  138798:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13879c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1387a0:	ebffff2b 	bl	138454 <PHY_Read>
  1387a4:	e50b0008 	str	r0, [fp, #-8]

    data = ((ctlReg>>2) & 0x7);
  1387a8:	e51b3010 	ldr	r3, [fp, #-16]
  1387ac:	e1a03123 	lsr	r3, r3, #2
  1387b0:	e2033007 	and	r3, r3, #7
  1387b4:	e50b300c 	str	r3, [fp, #-12]
    switch (data)
  1387b8:	e51b300c 	ldr	r3, [fp, #-12]
  1387bc:	e2433001 	sub	r3, r3, #1
  1387c0:	e3530005 	cmp	r3, #5
  1387c4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1387c8:	ea000021 	b	138854 <PHY_GetLinkSpeedDuplex+0x10c>
  1387cc:	001387e4 	.word	0x001387e4
  1387d0:	0013881c 	.word	0x0013881c
  1387d4:	00138854 	.word	0x00138854
  1387d8:	00138854 	.word	0x00138854
  1387dc:	00138800 	.word	0x00138800
  1387e0:	00138838 	.word	0x00138838
    {
        case 1:
            *speed = kPHY_Speed10M;
  1387e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1387e8:	e3a02000 	mov	r2, #0
  1387ec:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  1387f0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1387f4:	e3a02000 	mov	r2, #0
  1387f8:	e5832000 	str	r2, [r3]
            break;
  1387fc:	ea00001a 	b	13886c <PHY_GetLinkSpeedDuplex+0x124>
        case 5:
            *speed = kPHY_Speed10M;
  138800:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138804:	e3a02000 	mov	r2, #0
  138808:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  13880c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138810:	e3a02001 	mov	r2, #1
  138814:	e5832000 	str	r2, [r3]
            break;
  138818:	ea000013 	b	13886c <PHY_GetLinkSpeedDuplex+0x124>
        case 2:
            *speed = kPHY_Speed100M;
  13881c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138820:	e3a02001 	mov	r2, #1
  138824:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  138828:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  13882c:	e3a02000 	mov	r2, #0
  138830:	e5832000 	str	r2, [r3]
            break;
  138834:	ea00000c 	b	13886c <PHY_GetLinkSpeedDuplex+0x124>
        case 6:
            *speed = kPHY_Speed100M;
  138838:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13883c:	e3a02001 	mov	r2, #1
  138840:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  138844:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138848:	e3a02001 	mov	r2, #1
  13884c:	e5832000 	str	r2, [r3]
            break;
  138850:	ea000005 	b	13886c <PHY_GetLinkSpeedDuplex+0x124>
        default:
            *speed = kPHY_Speed100M;
  138854:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138858:	e3a02001 	mov	r2, #1
  13885c:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  138860:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138864:	e3a02001 	mov	r2, #1
  138868:	e5832000 	str	r2, [r3]
    }

    return result;
  13886c:	e51b3008 	ldr	r3, [fp, #-8]
}
  138870:	e1a00003 	mov	r0, r3
  138874:	e24bd004 	sub	sp, fp, #4
  138878:	e8bd8800 	pop	{fp, pc}

0013887c <__udivsi3>:
  13887c:	e2512001 	subs	r2, r1, #1
  138880:	012fff1e 	bxeq	lr
  138884:	3a000074 	bcc	138a5c <__udivsi3+0x1e0>
  138888:	e1500001 	cmp	r0, r1
  13888c:	9a00006b 	bls	138a40 <__udivsi3+0x1c4>
  138890:	e1110002 	tst	r1, r2
  138894:	0a00006c 	beq	138a4c <__udivsi3+0x1d0>
  138898:	e16f3f10 	clz	r3, r0
  13889c:	e16f2f11 	clz	r2, r1
  1388a0:	e0423003 	sub	r3, r2, r3
  1388a4:	e273301f 	rsbs	r3, r3, #31
  1388a8:	10833083 	addne	r3, r3, r3, lsl #1
  1388ac:	e3a02000 	mov	r2, #0
  1388b0:	108ff103 	addne	pc, pc, r3, lsl #2
  1388b4:	e1a00000 	nop			; (mov r0, r0)
  1388b8:	e1500f81 	cmp	r0, r1, lsl #31
  1388bc:	e0a22002 	adc	r2, r2, r2
  1388c0:	20400f81 	subcs	r0, r0, r1, lsl #31
  1388c4:	e1500f01 	cmp	r0, r1, lsl #30
  1388c8:	e0a22002 	adc	r2, r2, r2
  1388cc:	20400f01 	subcs	r0, r0, r1, lsl #30
  1388d0:	e1500e81 	cmp	r0, r1, lsl #29
  1388d4:	e0a22002 	adc	r2, r2, r2
  1388d8:	20400e81 	subcs	r0, r0, r1, lsl #29
  1388dc:	e1500e01 	cmp	r0, r1, lsl #28
  1388e0:	e0a22002 	adc	r2, r2, r2
  1388e4:	20400e01 	subcs	r0, r0, r1, lsl #28
  1388e8:	e1500d81 	cmp	r0, r1, lsl #27
  1388ec:	e0a22002 	adc	r2, r2, r2
  1388f0:	20400d81 	subcs	r0, r0, r1, lsl #27
  1388f4:	e1500d01 	cmp	r0, r1, lsl #26
  1388f8:	e0a22002 	adc	r2, r2, r2
  1388fc:	20400d01 	subcs	r0, r0, r1, lsl #26
  138900:	e1500c81 	cmp	r0, r1, lsl #25
  138904:	e0a22002 	adc	r2, r2, r2
  138908:	20400c81 	subcs	r0, r0, r1, lsl #25
  13890c:	e1500c01 	cmp	r0, r1, lsl #24
  138910:	e0a22002 	adc	r2, r2, r2
  138914:	20400c01 	subcs	r0, r0, r1, lsl #24
  138918:	e1500b81 	cmp	r0, r1, lsl #23
  13891c:	e0a22002 	adc	r2, r2, r2
  138920:	20400b81 	subcs	r0, r0, r1, lsl #23
  138924:	e1500b01 	cmp	r0, r1, lsl #22
  138928:	e0a22002 	adc	r2, r2, r2
  13892c:	20400b01 	subcs	r0, r0, r1, lsl #22
  138930:	e1500a81 	cmp	r0, r1, lsl #21
  138934:	e0a22002 	adc	r2, r2, r2
  138938:	20400a81 	subcs	r0, r0, r1, lsl #21
  13893c:	e1500a01 	cmp	r0, r1, lsl #20
  138940:	e0a22002 	adc	r2, r2, r2
  138944:	20400a01 	subcs	r0, r0, r1, lsl #20
  138948:	e1500981 	cmp	r0, r1, lsl #19
  13894c:	e0a22002 	adc	r2, r2, r2
  138950:	20400981 	subcs	r0, r0, r1, lsl #19
  138954:	e1500901 	cmp	r0, r1, lsl #18
  138958:	e0a22002 	adc	r2, r2, r2
  13895c:	20400901 	subcs	r0, r0, r1, lsl #18
  138960:	e1500881 	cmp	r0, r1, lsl #17
  138964:	e0a22002 	adc	r2, r2, r2
  138968:	20400881 	subcs	r0, r0, r1, lsl #17
  13896c:	e1500801 	cmp	r0, r1, lsl #16
  138970:	e0a22002 	adc	r2, r2, r2
  138974:	20400801 	subcs	r0, r0, r1, lsl #16
  138978:	e1500781 	cmp	r0, r1, lsl #15
  13897c:	e0a22002 	adc	r2, r2, r2
  138980:	20400781 	subcs	r0, r0, r1, lsl #15
  138984:	e1500701 	cmp	r0, r1, lsl #14
  138988:	e0a22002 	adc	r2, r2, r2
  13898c:	20400701 	subcs	r0, r0, r1, lsl #14
  138990:	e1500681 	cmp	r0, r1, lsl #13
  138994:	e0a22002 	adc	r2, r2, r2
  138998:	20400681 	subcs	r0, r0, r1, lsl #13
  13899c:	e1500601 	cmp	r0, r1, lsl #12
  1389a0:	e0a22002 	adc	r2, r2, r2
  1389a4:	20400601 	subcs	r0, r0, r1, lsl #12
  1389a8:	e1500581 	cmp	r0, r1, lsl #11
  1389ac:	e0a22002 	adc	r2, r2, r2
  1389b0:	20400581 	subcs	r0, r0, r1, lsl #11
  1389b4:	e1500501 	cmp	r0, r1, lsl #10
  1389b8:	e0a22002 	adc	r2, r2, r2
  1389bc:	20400501 	subcs	r0, r0, r1, lsl #10
  1389c0:	e1500481 	cmp	r0, r1, lsl #9
  1389c4:	e0a22002 	adc	r2, r2, r2
  1389c8:	20400481 	subcs	r0, r0, r1, lsl #9
  1389cc:	e1500401 	cmp	r0, r1, lsl #8
  1389d0:	e0a22002 	adc	r2, r2, r2
  1389d4:	20400401 	subcs	r0, r0, r1, lsl #8
  1389d8:	e1500381 	cmp	r0, r1, lsl #7
  1389dc:	e0a22002 	adc	r2, r2, r2
  1389e0:	20400381 	subcs	r0, r0, r1, lsl #7
  1389e4:	e1500301 	cmp	r0, r1, lsl #6
  1389e8:	e0a22002 	adc	r2, r2, r2
  1389ec:	20400301 	subcs	r0, r0, r1, lsl #6
  1389f0:	e1500281 	cmp	r0, r1, lsl #5
  1389f4:	e0a22002 	adc	r2, r2, r2
  1389f8:	20400281 	subcs	r0, r0, r1, lsl #5
  1389fc:	e1500201 	cmp	r0, r1, lsl #4
  138a00:	e0a22002 	adc	r2, r2, r2
  138a04:	20400201 	subcs	r0, r0, r1, lsl #4
  138a08:	e1500181 	cmp	r0, r1, lsl #3
  138a0c:	e0a22002 	adc	r2, r2, r2
  138a10:	20400181 	subcs	r0, r0, r1, lsl #3
  138a14:	e1500101 	cmp	r0, r1, lsl #2
  138a18:	e0a22002 	adc	r2, r2, r2
  138a1c:	20400101 	subcs	r0, r0, r1, lsl #2
  138a20:	e1500081 	cmp	r0, r1, lsl #1
  138a24:	e0a22002 	adc	r2, r2, r2
  138a28:	20400081 	subcs	r0, r0, r1, lsl #1
  138a2c:	e1500001 	cmp	r0, r1
  138a30:	e0a22002 	adc	r2, r2, r2
  138a34:	20400001 	subcs	r0, r0, r1
  138a38:	e1a00002 	mov	r0, r2
  138a3c:	e12fff1e 	bx	lr
  138a40:	03a00001 	moveq	r0, #1
  138a44:	13a00000 	movne	r0, #0
  138a48:	e12fff1e 	bx	lr
  138a4c:	e16f2f11 	clz	r2, r1
  138a50:	e262201f 	rsb	r2, r2, #31
  138a54:	e1a00230 	lsr	r0, r0, r2
  138a58:	e12fff1e 	bx	lr
  138a5c:	e3500000 	cmp	r0, #0
  138a60:	13e00000 	mvnne	r0, #0
  138a64:	ea000097 	b	138cc8 <__aeabi_idiv0>

00138a68 <__aeabi_uidivmod>:
  138a68:	e3510000 	cmp	r1, #0
  138a6c:	0afffffa 	beq	138a5c <__udivsi3+0x1e0>
  138a70:	e92d4003 	push	{r0, r1, lr}
  138a74:	ebffff80 	bl	13887c <__udivsi3>
  138a78:	e8bd4006 	pop	{r1, r2, lr}
  138a7c:	e0030092 	mul	r3, r2, r0
  138a80:	e0411003 	sub	r1, r1, r3
  138a84:	e12fff1e 	bx	lr

00138a88 <__divsi3>:
  138a88:	e3510000 	cmp	r1, #0
  138a8c:	0a000081 	beq	138c98 <.divsi3_skip_div0_test+0x208>

00138a90 <.divsi3_skip_div0_test>:
  138a90:	e020c001 	eor	ip, r0, r1
  138a94:	42611000 	rsbmi	r1, r1, #0
  138a98:	e2512001 	subs	r2, r1, #1
  138a9c:	0a000070 	beq	138c64 <.divsi3_skip_div0_test+0x1d4>
  138aa0:	e1b03000 	movs	r3, r0
  138aa4:	42603000 	rsbmi	r3, r0, #0
  138aa8:	e1530001 	cmp	r3, r1
  138aac:	9a00006f 	bls	138c70 <.divsi3_skip_div0_test+0x1e0>
  138ab0:	e1110002 	tst	r1, r2
  138ab4:	0a000071 	beq	138c80 <.divsi3_skip_div0_test+0x1f0>
  138ab8:	e16f2f13 	clz	r2, r3
  138abc:	e16f0f11 	clz	r0, r1
  138ac0:	e0402002 	sub	r2, r0, r2
  138ac4:	e272201f 	rsbs	r2, r2, #31
  138ac8:	10822082 	addne	r2, r2, r2, lsl #1
  138acc:	e3a00000 	mov	r0, #0
  138ad0:	108ff102 	addne	pc, pc, r2, lsl #2
  138ad4:	e1a00000 	nop			; (mov r0, r0)
  138ad8:	e1530f81 	cmp	r3, r1, lsl #31
  138adc:	e0a00000 	adc	r0, r0, r0
  138ae0:	20433f81 	subcs	r3, r3, r1, lsl #31
  138ae4:	e1530f01 	cmp	r3, r1, lsl #30
  138ae8:	e0a00000 	adc	r0, r0, r0
  138aec:	20433f01 	subcs	r3, r3, r1, lsl #30
  138af0:	e1530e81 	cmp	r3, r1, lsl #29
  138af4:	e0a00000 	adc	r0, r0, r0
  138af8:	20433e81 	subcs	r3, r3, r1, lsl #29
  138afc:	e1530e01 	cmp	r3, r1, lsl #28
  138b00:	e0a00000 	adc	r0, r0, r0
  138b04:	20433e01 	subcs	r3, r3, r1, lsl #28
  138b08:	e1530d81 	cmp	r3, r1, lsl #27
  138b0c:	e0a00000 	adc	r0, r0, r0
  138b10:	20433d81 	subcs	r3, r3, r1, lsl #27
  138b14:	e1530d01 	cmp	r3, r1, lsl #26
  138b18:	e0a00000 	adc	r0, r0, r0
  138b1c:	20433d01 	subcs	r3, r3, r1, lsl #26
  138b20:	e1530c81 	cmp	r3, r1, lsl #25
  138b24:	e0a00000 	adc	r0, r0, r0
  138b28:	20433c81 	subcs	r3, r3, r1, lsl #25
  138b2c:	e1530c01 	cmp	r3, r1, lsl #24
  138b30:	e0a00000 	adc	r0, r0, r0
  138b34:	20433c01 	subcs	r3, r3, r1, lsl #24
  138b38:	e1530b81 	cmp	r3, r1, lsl #23
  138b3c:	e0a00000 	adc	r0, r0, r0
  138b40:	20433b81 	subcs	r3, r3, r1, lsl #23
  138b44:	e1530b01 	cmp	r3, r1, lsl #22
  138b48:	e0a00000 	adc	r0, r0, r0
  138b4c:	20433b01 	subcs	r3, r3, r1, lsl #22
  138b50:	e1530a81 	cmp	r3, r1, lsl #21
  138b54:	e0a00000 	adc	r0, r0, r0
  138b58:	20433a81 	subcs	r3, r3, r1, lsl #21
  138b5c:	e1530a01 	cmp	r3, r1, lsl #20
  138b60:	e0a00000 	adc	r0, r0, r0
  138b64:	20433a01 	subcs	r3, r3, r1, lsl #20
  138b68:	e1530981 	cmp	r3, r1, lsl #19
  138b6c:	e0a00000 	adc	r0, r0, r0
  138b70:	20433981 	subcs	r3, r3, r1, lsl #19
  138b74:	e1530901 	cmp	r3, r1, lsl #18
  138b78:	e0a00000 	adc	r0, r0, r0
  138b7c:	20433901 	subcs	r3, r3, r1, lsl #18
  138b80:	e1530881 	cmp	r3, r1, lsl #17
  138b84:	e0a00000 	adc	r0, r0, r0
  138b88:	20433881 	subcs	r3, r3, r1, lsl #17
  138b8c:	e1530801 	cmp	r3, r1, lsl #16
  138b90:	e0a00000 	adc	r0, r0, r0
  138b94:	20433801 	subcs	r3, r3, r1, lsl #16
  138b98:	e1530781 	cmp	r3, r1, lsl #15
  138b9c:	e0a00000 	adc	r0, r0, r0
  138ba0:	20433781 	subcs	r3, r3, r1, lsl #15
  138ba4:	e1530701 	cmp	r3, r1, lsl #14
  138ba8:	e0a00000 	adc	r0, r0, r0
  138bac:	20433701 	subcs	r3, r3, r1, lsl #14
  138bb0:	e1530681 	cmp	r3, r1, lsl #13
  138bb4:	e0a00000 	adc	r0, r0, r0
  138bb8:	20433681 	subcs	r3, r3, r1, lsl #13
  138bbc:	e1530601 	cmp	r3, r1, lsl #12
  138bc0:	e0a00000 	adc	r0, r0, r0
  138bc4:	20433601 	subcs	r3, r3, r1, lsl #12
  138bc8:	e1530581 	cmp	r3, r1, lsl #11
  138bcc:	e0a00000 	adc	r0, r0, r0
  138bd0:	20433581 	subcs	r3, r3, r1, lsl #11
  138bd4:	e1530501 	cmp	r3, r1, lsl #10
  138bd8:	e0a00000 	adc	r0, r0, r0
  138bdc:	20433501 	subcs	r3, r3, r1, lsl #10
  138be0:	e1530481 	cmp	r3, r1, lsl #9
  138be4:	e0a00000 	adc	r0, r0, r0
  138be8:	20433481 	subcs	r3, r3, r1, lsl #9
  138bec:	e1530401 	cmp	r3, r1, lsl #8
  138bf0:	e0a00000 	adc	r0, r0, r0
  138bf4:	20433401 	subcs	r3, r3, r1, lsl #8
  138bf8:	e1530381 	cmp	r3, r1, lsl #7
  138bfc:	e0a00000 	adc	r0, r0, r0
  138c00:	20433381 	subcs	r3, r3, r1, lsl #7
  138c04:	e1530301 	cmp	r3, r1, lsl #6
  138c08:	e0a00000 	adc	r0, r0, r0
  138c0c:	20433301 	subcs	r3, r3, r1, lsl #6
  138c10:	e1530281 	cmp	r3, r1, lsl #5
  138c14:	e0a00000 	adc	r0, r0, r0
  138c18:	20433281 	subcs	r3, r3, r1, lsl #5
  138c1c:	e1530201 	cmp	r3, r1, lsl #4
  138c20:	e0a00000 	adc	r0, r0, r0
  138c24:	20433201 	subcs	r3, r3, r1, lsl #4
  138c28:	e1530181 	cmp	r3, r1, lsl #3
  138c2c:	e0a00000 	adc	r0, r0, r0
  138c30:	20433181 	subcs	r3, r3, r1, lsl #3
  138c34:	e1530101 	cmp	r3, r1, lsl #2
  138c38:	e0a00000 	adc	r0, r0, r0
  138c3c:	20433101 	subcs	r3, r3, r1, lsl #2
  138c40:	e1530081 	cmp	r3, r1, lsl #1
  138c44:	e0a00000 	adc	r0, r0, r0
  138c48:	20433081 	subcs	r3, r3, r1, lsl #1
  138c4c:	e1530001 	cmp	r3, r1
  138c50:	e0a00000 	adc	r0, r0, r0
  138c54:	20433001 	subcs	r3, r3, r1
  138c58:	e35c0000 	cmp	ip, #0
  138c5c:	42600000 	rsbmi	r0, r0, #0
  138c60:	e12fff1e 	bx	lr
  138c64:	e13c0000 	teq	ip, r0
  138c68:	42600000 	rsbmi	r0, r0, #0
  138c6c:	e12fff1e 	bx	lr
  138c70:	33a00000 	movcc	r0, #0
  138c74:	01a00fcc 	asreq	r0, ip, #31
  138c78:	03800001 	orreq	r0, r0, #1
  138c7c:	e12fff1e 	bx	lr
  138c80:	e16f2f11 	clz	r2, r1
  138c84:	e262201f 	rsb	r2, r2, #31
  138c88:	e35c0000 	cmp	ip, #0
  138c8c:	e1a00233 	lsr	r0, r3, r2
  138c90:	42600000 	rsbmi	r0, r0, #0
  138c94:	e12fff1e 	bx	lr
  138c98:	e3500000 	cmp	r0, #0
  138c9c:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
  138ca0:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
  138ca4:	ea000007 	b	138cc8 <__aeabi_idiv0>

00138ca8 <__aeabi_idivmod>:
  138ca8:	e3510000 	cmp	r1, #0
  138cac:	0afffff9 	beq	138c98 <.divsi3_skip_div0_test+0x208>
  138cb0:	e92d4003 	push	{r0, r1, lr}
  138cb4:	ebffff75 	bl	138a90 <.divsi3_skip_div0_test>
  138cb8:	e8bd4006 	pop	{r1, r2, lr}
  138cbc:	e0030092 	mul	r3, r2, r0
  138cc0:	e0411003 	sub	r1, r1, r3
  138cc4:	e12fff1e 	bx	lr

00138cc8 <__aeabi_idiv0>:
  138cc8:	e92d4002 	push	{r1, lr}
  138ccc:	e3a00008 	mov	r0, #8
  138cd0:	eb001550 	bl	13e218 <raise>
  138cd4:	e8bd8002 	pop	{r1, pc}

00138cd8 <dummy>:
  138cd8:	e12fff1e 	bx	lr

00138cdc <dummy1>:
  138cdc:	e12fff1e 	bx	lr

00138ce0 <__init_libc>:
  138ce0:	e92d4030 	push	{r4, r5, lr}
  138ce4:	e1a04000 	mov	r4, r0
  138ce8:	e24dd09c 	sub	sp, sp, #156	; 0x9c
  138cec:	e3a02098 	mov	r2, #152	; 0x98
  138cf0:	e1a05001 	mov	r5, r1
  138cf4:	e1a0000d 	mov	r0, sp
  138cf8:	e3a01000 	mov	r1, #0
  138cfc:	eb00215e 	bl	14127c <memset>
  138d00:	e5942000 	ldr	r2, [r4]
  138d04:	e59f3118 	ldr	r3, [pc, #280]	; 138e24 <__init_libc+0x144>
  138d08:	e3520000 	cmp	r2, #0
  138d0c:	e5834000 	str	r4, [r3]
  138d10:	03a02004 	moveq	r2, #4
  138d14:	0a000009 	beq	138d40 <__init_libc+0x60>
  138d18:	e1a03004 	mov	r3, r4
  138d1c:	e3a02000 	mov	r2, #0
  138d20:	ea000000 	b	138d28 <__init_libc+0x48>
  138d24:	e1a02000 	mov	r2, r0
  138d28:	e5b31004 	ldr	r1, [r3, #4]!
  138d2c:	e2820001 	add	r0, r2, #1
  138d30:	e3510000 	cmp	r1, #0
  138d34:	1afffffa 	bne	138d24 <__init_libc+0x44>
  138d38:	e2822002 	add	r2, r2, #2
  138d3c:	e1a02102 	lsl	r2, r2, #2
  138d40:	e7943002 	ldr	r3, [r4, r2]
  138d44:	e59f00dc 	ldr	r0, [pc, #220]	; 138e28 <__init_libc+0x148>
  138d48:	e0842002 	add	r2, r4, r2
  138d4c:	e3530000 	cmp	r3, #0
  138d50:	e5802010 	str	r2, [r0, #16]
  138d54:	0a00002d 	beq	138e10 <__init_libc+0x130>
  138d58:	e3530025 	cmp	r3, #37	; 0x25
  138d5c:	95921004 	ldrls	r1, [r2, #4]
  138d60:	928dc098 	addls	ip, sp, #152	; 0x98
  138d64:	908c3103 	addls	r3, ip, r3, lsl #2
  138d68:	95031098 	strls	r1, [r3, #-152]	; 0xffffff68
  138d6c:	e5b23008 	ldr	r3, [r2, #8]!
  138d70:	e3530000 	cmp	r3, #0
  138d74:	1afffff7 	bne	138d58 <__init_libc+0x78>
  138d78:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  138d7c:	e59dc080 	ldr	ip, [sp, #128]	; 0x80
  138d80:	e59d2018 	ldr	r2, [sp, #24]
  138d84:	e59f10a0 	ldr	r1, [pc, #160]	; 138e2c <__init_libc+0x14c>
  138d88:	e5802024 	str	r2, [r0, #36]	; 0x24
  138d8c:	e59f209c 	ldr	r2, [pc, #156]	; 138e30 <__init_libc+0x150>
  138d90:	e3550000 	cmp	r5, #0
  138d94:	e5813000 	str	r3, [r1]
  138d98:	e582c000 	str	ip, [r2]
  138d9c:	0a000012 	beq	138dec <__init_libc+0x10c>
  138da0:	e59f308c 	ldr	r3, [pc, #140]	; 138e34 <__init_libc+0x154>
  138da4:	e59f208c 	ldr	r2, [pc, #140]	; 138e38 <__init_libc+0x158>
  138da8:	e5835000 	str	r5, [r3]
  138dac:	e5825000 	str	r5, [r2]
  138db0:	e5d53000 	ldrb	r3, [r5]
  138db4:	e3530000 	cmp	r3, #0
  138db8:	0a000005 	beq	138dd4 <__init_libc+0xf4>
  138dbc:	e2851001 	add	r1, r5, #1
  138dc0:	e353002f 	cmp	r3, #47	; 0x2f
  138dc4:	05821000 	streq	r1, [r2]
  138dc8:	e4d13001 	ldrb	r3, [r1], #1
  138dcc:	e3530000 	cmp	r3, #0
  138dd0:	1afffffa 	bne	138dc0 <__init_libc+0xe0>
  138dd4:	e1a0000d 	mov	r0, sp
  138dd8:	eb002849 	bl	142f04 <__init_tls>
  138ddc:	e59d0064 	ldr	r0, [sp, #100]	; 0x64
  138de0:	eb0028be 	bl	1430e0 <__init_ssp>
  138de4:	e28dd09c 	add	sp, sp, #156	; 0x9c
  138de8:	e8bd8030 	pop	{r4, r5, pc}
  138dec:	e59d107c 	ldr	r1, [sp, #124]	; 0x7c
  138df0:	e3510000 	cmp	r1, #0
  138df4:	1a000008 	bne	138e1c <__init_libc+0x13c>
  138df8:	e59f303c 	ldr	r3, [pc, #60]	; 138e3c <__init_libc+0x15c>
  138dfc:	e59f1030 	ldr	r1, [pc, #48]	; 138e34 <__init_libc+0x154>
  138e00:	e59f2030 	ldr	r2, [pc, #48]	; 138e38 <__init_libc+0x158>
  138e04:	e5813000 	str	r3, [r1]
  138e08:	e5823000 	str	r3, [r2]
  138e0c:	eafffff0 	b	138dd4 <__init_libc+0xf4>
  138e10:	e1a02003 	mov	r2, r3
  138e14:	e1a0c003 	mov	ip, r3
  138e18:	eaffffd9 	b	138d84 <__init_libc+0xa4>
  138e1c:	e1a05001 	mov	r5, r1
  138e20:	eaffffde 	b	138da0 <__init_libc+0xc0>
  138e24:	0014f490 	.word	0x0014f490
  138e28:	0056f058 	.word	0x0056f058
  138e2c:	0056f054 	.word	0x0056f054
  138e30:	0056f098 	.word	0x0056f098
  138e34:	0014ec24 	.word	0x0014ec24
  138e38:	0014ec20 	.word	0x0014ec20
  138e3c:	0014c6f0 	.word	0x0014c6f0

00138e40 <__libc_start_init>:
  138e40:	e92d4070 	push	{r4, r5, r6, lr}
  138e44:	e59f4020 	ldr	r4, [pc, #32]	; 138e6c <__libc_start_init+0x2c>
  138e48:	e59f5020 	ldr	r5, [pc, #32]	; 138e70 <__libc_start_init+0x30>
  138e4c:	eb003148 	bl	145374 <_init>
  138e50:	e1540005 	cmp	r4, r5
  138e54:	28bd8070 	popcs	{r4, r5, r6, pc}
  138e58:	e4943004 	ldr	r3, [r4], #4
  138e5c:	e12fff33 	blx	r3
  138e60:	e1540005 	cmp	r4, r5
  138e64:	3afffffb 	bcc	138e58 <__libc_start_init+0x18>
  138e68:	e8bd8070 	pop	{r4, r5, r6, pc}
  138e6c:	0014d3e8 	.word	0x0014d3e8
  138e70:	0014d3ec 	.word	0x0014d3ec

00138e74 <libc_start_main_stage2>:
  138e74:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  138e78:	e1a05001 	mov	r5, r1
  138e7c:	e1a06002 	mov	r6, r2
  138e80:	e2814001 	add	r4, r1, #1
  138e84:	e0824104 	add	r4, r2, r4, lsl #2
  138e88:	e1a07000 	mov	r7, r0
  138e8c:	ebffffeb 	bl	138e40 <__libc_start_init>
  138e90:	e1a02004 	mov	r2, r4
  138e94:	e1a01006 	mov	r1, r6
  138e98:	e1a00005 	mov	r0, r5
  138e9c:	e12fff37 	blx	r7
  138ea0:	eb000056 	bl	139000 <exit>

00138ea4 <__libc_start_main>:
  138ea4:	e92d4070 	push	{r4, r5, r6, lr}
  138ea8:	e1a05001 	mov	r5, r1
  138eac:	e1a04002 	mov	r4, r2
  138eb0:	e1a06000 	mov	r6, r0
  138eb4:	e2810001 	add	r0, r1, #1
  138eb8:	e0820100 	add	r0, r2, r0, lsl #2
  138ebc:	e5921000 	ldr	r1, [r2]
  138ec0:	ebffff86 	bl	138ce0 <__init_libc>
  138ec4:	e59f3010 	ldr	r3, [pc, #16]	; 138edc <__libc_start_main+0x38>
  138ec8:	e1a02004 	mov	r2, r4
  138ecc:	e1a01005 	mov	r1, r5
  138ed0:	e1a00006 	mov	r0, r6
  138ed4:	e8bd4070 	pop	{r4, r5, r6, lr}
  138ed8:	e12fff13 	bx	r3
  138edc:	00138e74 	.word	0x00138e74

00138ee0 <__errno_location>:
  138ee0:	e59f3010 	ldr	r3, [pc, #16]	; 138ef8 <__errno_location+0x18>
  138ee4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138ee8:	e5930000 	ldr	r0, [r3]
  138eec:	e12fff30 	blx	r0
  138ef0:	e2400058 	sub	r0, r0, #88	; 0x58
  138ef4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  138ef8:	0014d3dc 	.word	0x0014d3dc

00138efc <__strerror_l>:
  138efc:	e3500054 	cmp	r0, #84	; 0x54
  138f00:	0a000013 	beq	138f54 <__strerror_l+0x58>
  138f04:	e3a0c001 	mov	ip, #1
  138f08:	e3a03021 	mov	r3, #33	; 0x21
  138f0c:	e59f204c 	ldr	r2, [pc, #76]	; 138f60 <__strerror_l+0x64>
  138f10:	e1530000 	cmp	r3, r0
  138f14:	0a000003 	beq	138f28 <__strerror_l+0x2c>
  138f18:	e4d23001 	ldrb	r3, [r2], #1
  138f1c:	e28cc001 	add	ip, ip, #1
  138f20:	e3530000 	cmp	r3, #0
  138f24:	1afffff9 	bne	138f10 <__strerror_l+0x14>
  138f28:	e3a02049 	mov	r2, #73	; 0x49
  138f2c:	e59f3030 	ldr	r3, [pc, #48]	; 138f64 <__strerror_l+0x68>
  138f30:	e3520000 	cmp	r2, #0
  138f34:	15f32001 	ldrbne	r2, [r3, #1]!
  138f38:	1afffffc 	bne	138f30 <__strerror_l+0x34>
  138f3c:	e25cc001 	subs	ip, ip, #1
  138f40:	e2830001 	add	r0, r3, #1
  138f44:	0a000003 	beq	138f58 <__strerror_l+0x5c>
  138f48:	e5d32001 	ldrb	r2, [r3, #1]
  138f4c:	e1a03000 	mov	r3, r0
  138f50:	eafffff6 	b	138f30 <__strerror_l+0x34>
  138f54:	e59f0008 	ldr	r0, [pc, #8]	; 138f64 <__strerror_l+0x68>
  138f58:	e5911014 	ldr	r1, [r1, #20]
  138f5c:	ea000d54 	b	13c4b4 <__lctrans>
  138f60:	0014a476 	.word	0x0014a476
  138f64:	0014a4d0 	.word	0x0014a4d0

00138f68 <strerror>:
  138f68:	e1a03000 	mov	r3, r0
  138f6c:	e59f2018 	ldr	r2, [pc, #24]	; 138f8c <strerror+0x24>
  138f70:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138f74:	e5920000 	ldr	r0, [r2]
  138f78:	e12fff30 	blx	r0
  138f7c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  138f80:	e5101018 	ldr	r1, [r0, #-24]	; 0xffffffe8
  138f84:	e1a00003 	mov	r0, r3
  138f88:	eaffffdb 	b	138efc <__strerror_l>
  138f8c:	0014d3dc 	.word	0x0014d3dc

00138f90 <__assert_fail>:
  138f90:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138f94:	e24dd00c 	sub	sp, sp, #12
  138f98:	e58d2004 	str	r2, [sp, #4]
  138f9c:	e58d3000 	str	r3, [sp]
  138fa0:	e1a02000 	mov	r2, r0
  138fa4:	e1a03001 	mov	r3, r1
  138fa8:	e59f0010 	ldr	r0, [pc, #16]	; 138fc0 <__assert_fail+0x30>
  138fac:	e59f1010 	ldr	r1, [pc, #16]	; 138fc4 <__assert_fail+0x34>
  138fb0:	eb001523 	bl	13e444 <fprintf>
  138fb4:	e3a00000 	mov	r0, #0
  138fb8:	eb0014b0 	bl	13e280 <fflush>
  138fbc:	eb00286b 	bl	143170 <abort>
  138fc0:	0014d2a8 	.word	0x0014d2a8
  138fc4:	0014abf0 	.word	0x0014abf0

00138fc8 <__funcs_on_exit>:
  138fc8:	e12fff1e 	bx	lr

00138fcc <__libc_exit_fini>:
  138fcc:	e92d4070 	push	{r4, r5, r6, lr}
  138fd0:	e59f4020 	ldr	r4, [pc, #32]	; 138ff8 <__libc_exit_fini+0x2c>
  138fd4:	e59f5020 	ldr	r5, [pc, #32]	; 138ffc <__libc_exit_fini+0x30>
  138fd8:	e1540005 	cmp	r4, r5
  138fdc:	9a000003 	bls	138ff0 <__libc_exit_fini+0x24>
  138fe0:	e5343004 	ldr	r3, [r4, #-4]!
  138fe4:	e12fff33 	blx	r3
  138fe8:	e1540005 	cmp	r4, r5
  138fec:	8afffffb 	bhi	138fe0 <__libc_exit_fini+0x14>
  138ff0:	e8bd4070 	pop	{r4, r5, r6, lr}
  138ff4:	ea0030e1 	b	145380 <_fini>
  138ff8:	0014d3f0 	.word	0x0014d3f0
  138ffc:	0014d3ec 	.word	0x0014d3ec

00139000 <exit>:
  139000:	e92d4010 	push	{r4, lr}
  139004:	e1a04000 	mov	r4, r0
  139008:	ebffffee 	bl	138fc8 <__funcs_on_exit>
  13900c:	ebffffee 	bl	138fcc <__libc_exit_fini>
  139010:	eb002da3 	bl	1446a4 <__stdio_exit>
  139014:	e1a00004 	mov	r0, r4
  139018:	eb002847 	bl	14313c <_Exit>

0013901c <fcntl>:
  13901c:	e92d000e 	push	{r1, r2, r3}
  139020:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  139024:	e24dd020 	sub	sp, sp, #32
  139028:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  13902c:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
  139030:	e28d3038 	add	r3, sp, #56	; 0x38
  139034:	e3540004 	cmp	r4, #4
  139038:	e1a06000 	mov	r6, r0
  13903c:	e58d3014 	str	r3, [sp, #20]
  139040:	03855802 	orreq	r5, r5, #131072	; 0x20000
  139044:	0a00000f 	beq	139088 <fcntl+0x6c>
  139048:	e354000e 	cmp	r4, #14
  13904c:	0a00001a 	beq	1390bc <fcntl+0xa0>
  139050:	e3540009 	cmp	r4, #9
  139054:	0a000026 	beq	1390f4 <fcntl+0xd8>
  139058:	e59f3234 	ldr	r3, [pc, #564]	; 139294 <fcntl+0x278>
  13905c:	e1540003 	cmp	r4, r3
  139060:	0a000034 	beq	139138 <fcntl+0x11c>
  139064:	e244300c 	sub	r3, r4, #12
  139068:	e3530004 	cmp	r3, #4
  13906c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  139070:	ea000004 	b	139088 <fcntl+0x6c>
  139074:	00139088 	.word	0x00139088
  139078:	00139088 	.word	0x00139088
  13907c:	00139088 	.word	0x00139088
  139080:	00139088 	.word	0x00139088
  139084:	00139088 	.word	0x00139088
  139088:	e3a000dd 	mov	r0, #221	; 0xdd
  13908c:	eb000cc9 	bl	13c3b8 <get_rtt_syscall>
  139090:	e2503000 	subs	r3, r0, #0
  139094:	0a000046 	beq	1391b4 <fcntl+0x198>
  139098:	e1a02005 	mov	r2, r5
  13909c:	e1a01004 	mov	r1, r4
  1390a0:	e1a00006 	mov	r0, r6
  1390a4:	e12fff33 	blx	r3
  1390a8:	eb000cf7 	bl	13c48c <__syscall_ret>
  1390ac:	e28dd020 	add	sp, sp, #32
  1390b0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  1390b4:	e28dd00c 	add	sp, sp, #12
  1390b8:	e12fff1e 	bx	lr
  1390bc:	e3a00000 	mov	r0, #0
  1390c0:	e1a03005 	mov	r3, r5
  1390c4:	e1a02004 	mov	r2, r4
  1390c8:	e1a01006 	mov	r1, r6
  1390cc:	e58d0008 	str	r0, [sp, #8]
  1390d0:	e58d0004 	str	r0, [sp, #4]
  1390d4:	e58d0000 	str	r0, [sp]
  1390d8:	e3a000dd 	mov	r0, #221	; 0xdd
  1390dc:	eb00231d 	bl	141d58 <__syscall_cp>
  1390e0:	eb000ce9 	bl	13c48c <__syscall_ret>
  1390e4:	e28dd020 	add	sp, sp, #32
  1390e8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  1390ec:	e28dd00c 	add	sp, sp, #12
  1390f0:	e12fff1e 	bx	lr
  1390f4:	e3a000dd 	mov	r0, #221	; 0xdd
  1390f8:	eb000cae 	bl	13c3b8 <get_rtt_syscall>
  1390fc:	e2503000 	subs	r3, r0, #0
  139100:	0a000007 	beq	139124 <fcntl+0x108>
  139104:	e28d2018 	add	r2, sp, #24
  139108:	e3a01010 	mov	r1, #16
  13910c:	e1a00006 	mov	r0, r6
  139110:	e12fff33 	blx	r3
  139114:	e3700016 	cmn	r0, #22
  139118:	0a000027 	beq	1391bc <fcntl+0x1a0>
  13911c:	e3500000 	cmp	r0, #0
  139120:	1affffe0 	bne	1390a8 <fcntl+0x8c>
  139124:	e59d3018 	ldr	r3, [sp, #24]
  139128:	e59d001c 	ldr	r0, [sp, #28]
  13912c:	e3530002 	cmp	r3, #2
  139130:	02600000 	rsbeq	r0, r0, #0
  139134:	eaffffdc 	b	1390ac <fcntl+0x90>
  139138:	e3a000dd 	mov	r0, #221	; 0xdd
  13913c:	eb000c9d 	bl	13c3b8 <get_rtt_syscall>
  139140:	e2503000 	subs	r3, r0, #0
  139144:	0a00000f 	beq	139188 <fcntl+0x16c>
  139148:	e1a02005 	mov	r2, r5
  13914c:	e1a01004 	mov	r1, r4
  139150:	e1a00006 	mov	r0, r6
  139154:	e12fff33 	blx	r3
  139158:	e3700016 	cmn	r0, #22
  13915c:	e1a07000 	mov	r7, r0
  139160:	0a00001e 	beq	1391e0 <fcntl+0x1c4>
  139164:	e3500000 	cmp	r0, #0
  139168:	e1a04000 	mov	r4, r0
  13916c:	aa000007 	bge	139190 <fcntl+0x174>
  139170:	e1a00004 	mov	r0, r4
  139174:	eb000cc4 	bl	13c48c <__syscall_ret>
  139178:	e28dd020 	add	sp, sp, #32
  13917c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  139180:	e28dd00c 	add	sp, sp, #12
  139184:	e12fff1e 	bx	lr
  139188:	e1a04003 	mov	r4, r3
  13918c:	e1a07003 	mov	r7, r3
  139190:	e3a000dd 	mov	r0, #221	; 0xdd
  139194:	eb000c87 	bl	13c3b8 <get_rtt_syscall>
  139198:	e2503000 	subs	r3, r0, #0
  13919c:	0afffff3 	beq	139170 <fcntl+0x154>
  1391a0:	e1a00007 	mov	r0, r7
  1391a4:	e3a02001 	mov	r2, #1
  1391a8:	e3a01002 	mov	r1, #2
  1391ac:	e12fff33 	blx	r3
  1391b0:	eaffffee 	b	139170 <fcntl+0x154>
  1391b4:	e1a00003 	mov	r0, r3
  1391b8:	eaffffba 	b	1390a8 <fcntl+0x8c>
  1391bc:	e3a000dd 	mov	r0, #221	; 0xdd
  1391c0:	eb000c7c 	bl	13c3b8 <get_rtt_syscall>
  1391c4:	e2503000 	subs	r3, r0, #0
  1391c8:	0a00002f 	beq	13928c <fcntl+0x270>
  1391cc:	e1a02005 	mov	r2, r5
  1391d0:	e1a01004 	mov	r1, r4
  1391d4:	e1a00006 	mov	r0, r6
  1391d8:	e12fff33 	blx	r3
  1391dc:	eaffffb2 	b	1390ac <fcntl+0x90>
  1391e0:	e3a000dd 	mov	r0, #221	; 0xdd
  1391e4:	eb000c73 	bl	13c3b8 <get_rtt_syscall>
  1391e8:	e2503000 	subs	r3, r0, #0
  1391ec:	0a00000b 	beq	139220 <fcntl+0x204>
  1391f0:	e1a01004 	mov	r1, r4
  1391f4:	e3a02000 	mov	r2, #0
  1391f8:	e1a00006 	mov	r0, r6
  1391fc:	e12fff33 	blx	r3
  139200:	e3700016 	cmn	r0, #22
  139204:	e1a04000 	mov	r4, r0
  139208:	0a00000c 	beq	139240 <fcntl+0x224>
  13920c:	e3500000 	cmp	r0, #0
  139210:	aa000003 	bge	139224 <fcntl+0x208>
  139214:	e3e00015 	mvn	r0, #21
  139218:	eb000c9b 	bl	13c48c <__syscall_ret>
  13921c:	eaffffa2 	b	1390ac <fcntl+0x90>
  139220:	e1a04003 	mov	r4, r3
  139224:	e3a00006 	mov	r0, #6
  139228:	eb000c62 	bl	13c3b8 <get_rtt_syscall>
  13922c:	e2503000 	subs	r3, r0, #0
  139230:	0afffff7 	beq	139214 <fcntl+0x1f8>
  139234:	e1a00004 	mov	r0, r4
  139238:	e12fff33 	blx	r3
  13923c:	eafffff4 	b	139214 <fcntl+0x1f8>
  139240:	e3a000dd 	mov	r0, #221	; 0xdd
  139244:	eb000c5b 	bl	13c3b8 <get_rtt_syscall>
  139248:	e2504000 	subs	r4, r0, #0
  13924c:	0a000005 	beq	139268 <fcntl+0x24c>
  139250:	e1a02005 	mov	r2, r5
  139254:	e1a00006 	mov	r0, r6
  139258:	e3a01000 	mov	r1, #0
  13925c:	e12fff34 	blx	r4
  139260:	e2504000 	subs	r4, r0, #0
  139264:	baffffc1 	blt	139170 <fcntl+0x154>
  139268:	e3a000dd 	mov	r0, #221	; 0xdd
  13926c:	eb000c51 	bl	13c3b8 <get_rtt_syscall>
  139270:	e2503000 	subs	r3, r0, #0
  139274:	0affffbd 	beq	139170 <fcntl+0x154>
  139278:	e3a02001 	mov	r2, #1
  13927c:	e3a01002 	mov	r1, #2
  139280:	e1a00004 	mov	r0, r4
  139284:	e12fff33 	blx	r3
  139288:	eaffffb8 	b	139170 <fcntl+0x154>
  13928c:	e1a00003 	mov	r0, r3
  139290:	eaffff85 	b	1390ac <fcntl+0x90>
  139294:	00000406 	.word	0x00000406

00139298 <syscall_set_thread_area>:
  139298:	e1a01000 	mov	r1, r0
  13929c:	e3a0007b 	mov	r0, #123	; 0x7b
  1392a0:	ea000c6f 	b	13c464 <syscall>

001392a4 <syscall_trace>:
  1392a4:	e92d4070 	push	{r4, r5, r6, lr}
  1392a8:	e1a04000 	mov	r4, r0
  1392ac:	e1a05001 	mov	r5, r1
  1392b0:	e3a0201d 	mov	r2, #29
  1392b4:	e59f1018 	ldr	r1, [pc, #24]	; 1392d4 <syscall_trace+0x30>
  1392b8:	e3a000ff 	mov	r0, #255	; 0xff
  1392bc:	eb000c68 	bl	13c464 <syscall>
  1392c0:	e1a02005 	mov	r2, r5
  1392c4:	e1a01004 	mov	r1, r4
  1392c8:	e8bd4070 	pop	{r4, r5, r6, lr}
  1392cc:	e3a000ff 	mov	r0, #255	; 0xff
  1392d0:	ea000c63 	b	13c464 <syscall>
  1392d4:	0014cd34 	.word	0x0014cd34

001392d8 <syscall_io_pgetevents>:
  1392d8:	e92d4010 	push	{r4, lr}
  1392dc:	e3a01016 	mov	r1, #22
  1392e0:	e59f0008 	ldr	r0, [pc, #8]	; 1392f0 <syscall_io_pgetevents+0x18>
  1392e4:	ebffffee 	bl	1392a4 <syscall_trace>
  1392e8:	e3a00000 	mov	r0, #0
  1392ec:	e8bd8010 	pop	{r4, pc}
  1392f0:	0014c6bc 	.word	0x0014c6bc

001392f4 <syscall_rseq>:
  1392f4:	e92d4010 	push	{r4, lr}
  1392f8:	e3a0100d 	mov	r1, #13
  1392fc:	e59f0008 	ldr	r0, [pc, #8]	; 13930c <syscall_rseq+0x18>
  139300:	ebffffe7 	bl	1392a4 <syscall_trace>
  139304:	e3a00000 	mov	r0, #0
  139308:	e8bd8010 	pop	{r4, pc}
  13930c:	0014c6ac 	.word	0x0014c6ac

00139310 <syscall_statx>:
  139310:	e92d4010 	push	{r4, lr}
  139314:	e3a0100e 	mov	r1, #14
  139318:	e59f0008 	ldr	r0, [pc, #8]	; 139328 <syscall_statx+0x18>
  13931c:	ebffffe0 	bl	1392a4 <syscall_trace>
  139320:	e3a00000 	mov	r0, #0
  139324:	e8bd8010 	pop	{r4, pc}
  139328:	0014c69c 	.word	0x0014c69c

0013932c <syscall_pkey_free>:
  13932c:	e92d4010 	push	{r4, lr}
  139330:	e3a01012 	mov	r1, #18
  139334:	e59f0008 	ldr	r0, [pc, #8]	; 139344 <syscall_pkey_free+0x18>
  139338:	ebffffd9 	bl	1392a4 <syscall_trace>
  13933c:	e3a00000 	mov	r0, #0
  139340:	e8bd8010 	pop	{r4, pc}
  139344:	0014c688 	.word	0x0014c688

00139348 <syscall_pkey_alloc>:
  139348:	e92d4010 	push	{r4, lr}
  13934c:	e3a01013 	mov	r1, #19
  139350:	e59f0008 	ldr	r0, [pc, #8]	; 139360 <syscall_pkey_alloc+0x18>
  139354:	ebffffd2 	bl	1392a4 <syscall_trace>
  139358:	e3a00000 	mov	r0, #0
  13935c:	e8bd8010 	pop	{r4, pc}
  139360:	0014c674 	.word	0x0014c674

00139364 <syscall_pkey_mprotect>:
  139364:	e92d4010 	push	{r4, lr}
  139368:	e3a01016 	mov	r1, #22
  13936c:	e59f0008 	ldr	r0, [pc, #8]	; 13937c <syscall_pkey_mprotect+0x18>
  139370:	ebffffcb 	bl	1392a4 <syscall_trace>
  139374:	e3a00000 	mov	r0, #0
  139378:	e8bd8010 	pop	{r4, pc}
  13937c:	0014c65c 	.word	0x0014c65c

00139380 <syscall_pwritev2>:
  139380:	e92d4010 	push	{r4, lr}
  139384:	e3a01011 	mov	r1, #17
  139388:	e59f0008 	ldr	r0, [pc, #8]	; 139398 <syscall_pwritev2+0x18>
  13938c:	ebffffc4 	bl	1392a4 <syscall_trace>
  139390:	e3a00000 	mov	r0, #0
  139394:	e8bd8010 	pop	{r4, pc}
  139398:	0014c648 	.word	0x0014c648

0013939c <syscall_preadv2>:
  13939c:	e92d4010 	push	{r4, lr}
  1393a0:	e3a01010 	mov	r1, #16
  1393a4:	e59f0008 	ldr	r0, [pc, #8]	; 1393b4 <syscall_preadv2+0x18>
  1393a8:	ebffffbd 	bl	1392a4 <syscall_trace>
  1393ac:	e3a00000 	mov	r0, #0
  1393b0:	e8bd8010 	pop	{r4, pc}
  1393b4:	0014c638 	.word	0x0014c638

001393b8 <syscall_copy_file_range>:
  1393b8:	e92d4010 	push	{r4, lr}
  1393bc:	e3a01018 	mov	r1, #24
  1393c0:	e59f0008 	ldr	r0, [pc, #8]	; 1393d0 <syscall_copy_file_range+0x18>
  1393c4:	ebffffb6 	bl	1392a4 <syscall_trace>
  1393c8:	e3a00000 	mov	r0, #0
  1393cc:	e8bd8010 	pop	{r4, pc}
  1393d0:	0014c620 	.word	0x0014c620

001393d4 <syscall_mlock2>:
  1393d4:	e92d4010 	push	{r4, lr}
  1393d8:	e3a0100f 	mov	r1, #15
  1393dc:	e59f0008 	ldr	r0, [pc, #8]	; 1393ec <syscall_mlock2+0x18>
  1393e0:	ebffffaf 	bl	1392a4 <syscall_trace>
  1393e4:	e3a00000 	mov	r0, #0
  1393e8:	e8bd8010 	pop	{r4, pc}
  1393ec:	0014c610 	.word	0x0014c610

001393f0 <syscall_membarrier>:
  1393f0:	e92d4010 	push	{r4, lr}
  1393f4:	e3a01013 	mov	r1, #19
  1393f8:	e59f0008 	ldr	r0, [pc, #8]	; 139408 <syscall_membarrier+0x18>
  1393fc:	ebffffa8 	bl	1392a4 <syscall_trace>
  139400:	e3a00000 	mov	r0, #0
  139404:	e8bd8010 	pop	{r4, pc}
  139408:	0014c5fc 	.word	0x0014c5fc

0013940c <syscall_userfaultfd>:
  13940c:	e92d4010 	push	{r4, lr}
  139410:	e3a01014 	mov	r1, #20
  139414:	e59f0008 	ldr	r0, [pc, #8]	; 139424 <syscall_userfaultfd+0x18>
  139418:	ebffffa1 	bl	1392a4 <syscall_trace>
  13941c:	e3a00000 	mov	r0, #0
  139420:	e8bd8010 	pop	{r4, pc}
  139424:	0014c5e8 	.word	0x0014c5e8

00139428 <syscall_execveat>:
  139428:	e92d4010 	push	{r4, lr}
  13942c:	e3a01011 	mov	r1, #17
  139430:	e59f0008 	ldr	r0, [pc, #8]	; 139440 <syscall_execveat+0x18>
  139434:	ebffff9a 	bl	1392a4 <syscall_trace>
  139438:	e3a00000 	mov	r0, #0
  13943c:	e8bd8010 	pop	{r4, pc}
  139440:	0014c5d4 	.word	0x0014c5d4

00139444 <syscall_bpf>:
  139444:	e92d4010 	push	{r4, lr}
  139448:	e3a0100c 	mov	r1, #12
  13944c:	e59f0008 	ldr	r0, [pc, #8]	; 13945c <syscall_bpf+0x18>
  139450:	ebffff93 	bl	1392a4 <syscall_trace>
  139454:	e3a00000 	mov	r0, #0
  139458:	e8bd8010 	pop	{r4, pc}
  13945c:	0014c5c8 	.word	0x0014c5c8

00139460 <syscall_memfd_create>:
  139460:	e92d4010 	push	{r4, lr}
  139464:	e3a01015 	mov	r1, #21
  139468:	e59f0008 	ldr	r0, [pc, #8]	; 139478 <syscall_memfd_create+0x18>
  13946c:	ebffff8c 	bl	1392a4 <syscall_trace>
  139470:	e3a00000 	mov	r0, #0
  139474:	e8bd8010 	pop	{r4, pc}
  139478:	0014c5b0 	.word	0x0014c5b0

0013947c <syscall_seccomp>:
  13947c:	e92d4010 	push	{r4, lr}
  139480:	e3a01010 	mov	r1, #16
  139484:	e59f0008 	ldr	r0, [pc, #8]	; 139494 <syscall_seccomp+0x18>
  139488:	ebffff85 	bl	1392a4 <syscall_trace>
  13948c:	e3a00000 	mov	r0, #0
  139490:	e8bd8010 	pop	{r4, pc}
  139494:	0014c58c 	.word	0x0014c58c

00139498 <syscall_renameat2>:
  139498:	e92d4010 	push	{r4, lr}
  13949c:	e3a01012 	mov	r1, #18
  1394a0:	e59f0008 	ldr	r0, [pc, #8]	; 1394b0 <syscall_renameat2+0x18>
  1394a4:	ebffff7e 	bl	1392a4 <syscall_trace>
  1394a8:	e3a00000 	mov	r0, #0
  1394ac:	e8bd8010 	pop	{r4, pc}
  1394b0:	0014c578 	.word	0x0014c578

001394b4 <syscall_sched_getattr>:
  1394b4:	e92d4010 	push	{r4, lr}
  1394b8:	e3a01016 	mov	r1, #22
  1394bc:	e59f0008 	ldr	r0, [pc, #8]	; 1394cc <syscall_sched_getattr+0x18>
  1394c0:	ebffff77 	bl	1392a4 <syscall_trace>
  1394c4:	e3a00000 	mov	r0, #0
  1394c8:	e8bd8010 	pop	{r4, pc}
  1394cc:	0014c560 	.word	0x0014c560

001394d0 <syscall_sched_setattr>:
  1394d0:	e92d4010 	push	{r4, lr}
  1394d4:	e3a01016 	mov	r1, #22
  1394d8:	e59f0008 	ldr	r0, [pc, #8]	; 1394e8 <syscall_sched_setattr+0x18>
  1394dc:	ebffff70 	bl	1392a4 <syscall_trace>
  1394e0:	e3a00000 	mov	r0, #0
  1394e4:	e8bd8010 	pop	{r4, pc}
  1394e8:	0014c548 	.word	0x0014c548

001394ec <syscall_finit_module>:
  1394ec:	e92d4010 	push	{r4, lr}
  1394f0:	e3a01015 	mov	r1, #21
  1394f4:	e59f0008 	ldr	r0, [pc, #8]	; 139504 <syscall_finit_module+0x18>
  1394f8:	ebffff69 	bl	1392a4 <syscall_trace>
  1394fc:	e3a00000 	mov	r0, #0
  139500:	e8bd8010 	pop	{r4, pc}
  139504:	0014c530 	.word	0x0014c530

00139508 <syscall_kcmp>:
  139508:	e92d4010 	push	{r4, lr}
  13950c:	e3a0100d 	mov	r1, #13
  139510:	e59f0008 	ldr	r0, [pc, #8]	; 139520 <syscall_kcmp+0x18>
  139514:	ebffff62 	bl	1392a4 <syscall_trace>
  139518:	e3a00000 	mov	r0, #0
  13951c:	e8bd8010 	pop	{r4, pc}
  139520:	0014c520 	.word	0x0014c520

00139524 <syscall_process_vm_writev>:
  139524:	e92d4010 	push	{r4, lr}
  139528:	e3a0101a 	mov	r1, #26
  13952c:	e59f0008 	ldr	r0, [pc, #8]	; 13953c <syscall_process_vm_writev+0x18>
  139530:	ebffff5b 	bl	1392a4 <syscall_trace>
  139534:	e3a00000 	mov	r0, #0
  139538:	e8bd8010 	pop	{r4, pc}
  13953c:	0014c504 	.word	0x0014c504

00139540 <syscall_process_vm_readv>:
  139540:	e92d4010 	push	{r4, lr}
  139544:	e3a01019 	mov	r1, #25
  139548:	e59f0008 	ldr	r0, [pc, #8]	; 139558 <syscall_process_vm_readv+0x18>
  13954c:	ebffff54 	bl	1392a4 <syscall_trace>
  139550:	e3a00000 	mov	r0, #0
  139554:	e8bd8010 	pop	{r4, pc}
  139558:	0014c4e8 	.word	0x0014c4e8

0013955c <syscall_setns>:
  13955c:	e92d4010 	push	{r4, lr}
  139560:	e3a0100e 	mov	r1, #14
  139564:	e59f0008 	ldr	r0, [pc, #8]	; 139574 <syscall_setns+0x18>
  139568:	ebffff4d 	bl	1392a4 <syscall_trace>
  13956c:	e3a00000 	mov	r0, #0
  139570:	e8bd8010 	pop	{r4, pc}
  139574:	0014c4d8 	.word	0x0014c4d8

00139578 <syscall_sendmmsg>:
  139578:	e92d4010 	push	{r4, lr}
  13957c:	e3a01011 	mov	r1, #17
  139580:	e59f0008 	ldr	r0, [pc, #8]	; 139590 <syscall_sendmmsg+0x18>
  139584:	ebffff46 	bl	1392a4 <syscall_trace>
  139588:	e3a00000 	mov	r0, #0
  13958c:	e8bd8010 	pop	{r4, pc}
  139590:	0014c4c4 	.word	0x0014c4c4

00139594 <syscall_syncfs>:
  139594:	e92d4010 	push	{r4, lr}
  139598:	e3a0100f 	mov	r1, #15
  13959c:	e59f0008 	ldr	r0, [pc, #8]	; 1395ac <syscall_syncfs+0x18>
  1395a0:	ebffff3f 	bl	1392a4 <syscall_trace>
  1395a4:	e3a00000 	mov	r0, #0
  1395a8:	e8bd8010 	pop	{r4, pc}
  1395ac:	0014c4b4 	.word	0x0014c4b4

001395b0 <syscall_clock_adjtime>:
  1395b0:	e92d4010 	push	{r4, lr}
  1395b4:	e3a01016 	mov	r1, #22
  1395b8:	e59f0008 	ldr	r0, [pc, #8]	; 1395c8 <syscall_clock_adjtime+0x18>
  1395bc:	ebffff38 	bl	1392a4 <syscall_trace>
  1395c0:	e3a00000 	mov	r0, #0
  1395c4:	e8bd8010 	pop	{r4, pc}
  1395c8:	0014c49c 	.word	0x0014c49c

001395cc <syscall_open_by_handle_at>:
  1395cc:	e92d4010 	push	{r4, lr}
  1395d0:	e3a0101a 	mov	r1, #26
  1395d4:	e59f0008 	ldr	r0, [pc, #8]	; 1395e4 <syscall_open_by_handle_at+0x18>
  1395d8:	ebffff31 	bl	1392a4 <syscall_trace>
  1395dc:	e3a00000 	mov	r0, #0
  1395e0:	e8bd8010 	pop	{r4, pc}
  1395e4:	0014c480 	.word	0x0014c480

001395e8 <syscall_name_to_handle_at>:
  1395e8:	e92d4010 	push	{r4, lr}
  1395ec:	e3a0101a 	mov	r1, #26
  1395f0:	e59f0008 	ldr	r0, [pc, #8]	; 139600 <syscall_name_to_handle_at+0x18>
  1395f4:	ebffff2a 	bl	1392a4 <syscall_trace>
  1395f8:	e3a00000 	mov	r0, #0
  1395fc:	e8bd8010 	pop	{r4, pc}
  139600:	0014c464 	.word	0x0014c464

00139604 <syscall_fanotify_mark>:
  139604:	e92d4010 	push	{r4, lr}
  139608:	e3a01016 	mov	r1, #22
  13960c:	e59f0008 	ldr	r0, [pc, #8]	; 13961c <syscall_fanotify_mark+0x18>
  139610:	ebffff23 	bl	1392a4 <syscall_trace>
  139614:	e3a00000 	mov	r0, #0
  139618:	e8bd8010 	pop	{r4, pc}
  13961c:	0014c438 	.word	0x0014c438

00139620 <syscall_fanotify_init>:
  139620:	e92d4010 	push	{r4, lr}
  139624:	e3a01016 	mov	r1, #22
  139628:	e59f0008 	ldr	r0, [pc, #8]	; 139638 <syscall_fanotify_init+0x18>
  13962c:	ebffff1c 	bl	1392a4 <syscall_trace>
  139630:	e3a00000 	mov	r0, #0
  139634:	e8bd8010 	pop	{r4, pc}
  139638:	0014c420 	.word	0x0014c420

0013963c <syscall_accept4>:
  13963c:	e92d4010 	push	{r4, lr}
  139640:	e3a01010 	mov	r1, #16
  139644:	e59f0008 	ldr	r0, [pc, #8]	; 139654 <syscall_accept4+0x18>
  139648:	ebffff15 	bl	1392a4 <syscall_trace>
  13964c:	e3a00000 	mov	r0, #0
  139650:	e8bd8010 	pop	{r4, pc}
  139654:	0014c410 	.word	0x0014c410

00139658 <syscall_recvmmsg>:
  139658:	e92d4010 	push	{r4, lr}
  13965c:	e3a01011 	mov	r1, #17
  139660:	e59f0008 	ldr	r0, [pc, #8]	; 139670 <syscall_recvmmsg+0x18>
  139664:	ebffff0e 	bl	1392a4 <syscall_trace>
  139668:	e3a00000 	mov	r0, #0
  13966c:	e8bd8010 	pop	{r4, pc}
  139670:	0014c3fc 	.word	0x0014c3fc

00139674 <syscall_perf_event_open>:
  139674:	e92d4010 	push	{r4, lr}
  139678:	e3a01018 	mov	r1, #24
  13967c:	e59f0008 	ldr	r0, [pc, #8]	; 13968c <syscall_perf_event_open+0x18>
  139680:	ebffff07 	bl	1392a4 <syscall_trace>
  139684:	e3a00000 	mov	r0, #0
  139688:	e8bd8010 	pop	{r4, pc}
  13968c:	0014c3e4 	.word	0x0014c3e4

00139690 <syscall_rt_tgsigqueueinfo>:
  139690:	e92d4010 	push	{r4, lr}
  139694:	e3a0101a 	mov	r1, #26
  139698:	e59f0008 	ldr	r0, [pc, #8]	; 1396a8 <syscall_rt_tgsigqueueinfo+0x18>
  13969c:	ebffff00 	bl	1392a4 <syscall_trace>
  1396a0:	e3a00000 	mov	r0, #0
  1396a4:	e8bd8010 	pop	{r4, pc}
  1396a8:	0014c3c8 	.word	0x0014c3c8

001396ac <syscall_pwritev>:
  1396ac:	e92d4010 	push	{r4, lr}
  1396b0:	e3a01010 	mov	r1, #16
  1396b4:	e59f0008 	ldr	r0, [pc, #8]	; 1396c4 <syscall_pwritev+0x18>
  1396b8:	ebfffef9 	bl	1392a4 <syscall_trace>
  1396bc:	e3a00000 	mov	r0, #0
  1396c0:	e8bd8010 	pop	{r4, pc}
  1396c4:	0014c3b8 	.word	0x0014c3b8

001396c8 <syscall_preadv>:
  1396c8:	e92d4010 	push	{r4, lr}
  1396cc:	e3a0100f 	mov	r1, #15
  1396d0:	e59f0008 	ldr	r0, [pc, #8]	; 1396e0 <syscall_preadv+0x18>
  1396d4:	ebfffef2 	bl	1392a4 <syscall_trace>
  1396d8:	e3a00000 	mov	r0, #0
  1396dc:	e8bd8010 	pop	{r4, pc}
  1396e0:	0014c3a8 	.word	0x0014c3a8

001396e4 <syscall_inotify_init1>:
  1396e4:	e92d4010 	push	{r4, lr}
  1396e8:	e3a01016 	mov	r1, #22
  1396ec:	e59f0008 	ldr	r0, [pc, #8]	; 1396fc <syscall_inotify_init1+0x18>
  1396f0:	ebfffeeb 	bl	1392a4 <syscall_trace>
  1396f4:	e3a00000 	mov	r0, #0
  1396f8:	e8bd8010 	pop	{r4, pc}
  1396fc:	0014c390 	.word	0x0014c390

00139700 <syscall_pipe2>:
  139700:	e92d4010 	push	{r4, lr}
  139704:	e3a0100e 	mov	r1, #14
  139708:	e59f0008 	ldr	r0, [pc, #8]	; 139718 <syscall_pipe2+0x18>
  13970c:	ebfffee4 	bl	1392a4 <syscall_trace>
  139710:	e3a00000 	mov	r0, #0
  139714:	e8bd8010 	pop	{r4, pc}
  139718:	0014c380 	.word	0x0014c380

0013971c <syscall_dup3>:
  13971c:	e92d4010 	push	{r4, lr}
  139720:	e3a0100d 	mov	r1, #13
  139724:	e59f0008 	ldr	r0, [pc, #8]	; 139734 <syscall_dup3+0x18>
  139728:	ebfffedd 	bl	1392a4 <syscall_trace>
  13972c:	e3a00000 	mov	r0, #0
  139730:	e8bd8010 	pop	{r4, pc}
  139734:	0014c370 	.word	0x0014c370

00139738 <syscall_epoll_create1>:
  139738:	e92d4010 	push	{r4, lr}
  13973c:	e3a01016 	mov	r1, #22
  139740:	e59f0008 	ldr	r0, [pc, #8]	; 139750 <syscall_epoll_create1+0x18>
  139744:	ebfffed6 	bl	1392a4 <syscall_trace>
  139748:	e3e00025 	mvn	r0, #37	; 0x25
  13974c:	e8bd8010 	pop	{r4, pc}
  139750:	0014c358 	.word	0x0014c358

00139754 <syscall_eventfd2>:
  139754:	e92d4010 	push	{r4, lr}
  139758:	e3a01011 	mov	r1, #17
  13975c:	e59f0008 	ldr	r0, [pc, #8]	; 13976c <syscall_eventfd2+0x18>
  139760:	ebfffecf 	bl	1392a4 <syscall_trace>
  139764:	e3a00000 	mov	r0, #0
  139768:	e8bd8010 	pop	{r4, pc}
  13976c:	0014c344 	.word	0x0014c344

00139770 <syscall_signalfd4>:
  139770:	e92d4010 	push	{r4, lr}
  139774:	e3a01012 	mov	r1, #18
  139778:	e59f0008 	ldr	r0, [pc, #8]	; 139788 <syscall_signalfd4+0x18>
  13977c:	ebfffec8 	bl	1392a4 <syscall_trace>
  139780:	e3a00000 	mov	r0, #0
  139784:	e8bd8010 	pop	{r4, pc}
  139788:	0014c330 	.word	0x0014c330

0013978c <syscall_timerfd_gettime>:
  13978c:	e92d4010 	push	{r4, lr}
  139790:	e3a01018 	mov	r1, #24
  139794:	e59f0008 	ldr	r0, [pc, #8]	; 1397a4 <syscall_timerfd_gettime+0x18>
  139798:	ebfffec1 	bl	1392a4 <syscall_trace>
  13979c:	e3a00000 	mov	r0, #0
  1397a0:	e8bd8010 	pop	{r4, pc}
  1397a4:	0014c318 	.word	0x0014c318

001397a8 <syscall_timerfd_settime>:
  1397a8:	e92d4010 	push	{r4, lr}
  1397ac:	e3a01018 	mov	r1, #24
  1397b0:	e59f0008 	ldr	r0, [pc, #8]	; 1397c0 <syscall_timerfd_settime+0x18>
  1397b4:	ebfffeba 	bl	1392a4 <syscall_trace>
  1397b8:	e3a00000 	mov	r0, #0
  1397bc:	e8bd8010 	pop	{r4, pc}
  1397c0:	0014c300 	.word	0x0014c300

001397c4 <syscall_fallocate>:
  1397c4:	e92d4010 	push	{r4, lr}
  1397c8:	e3a01012 	mov	r1, #18
  1397cc:	e59f0008 	ldr	r0, [pc, #8]	; 1397dc <syscall_fallocate+0x18>
  1397d0:	ebfffeb3 	bl	1392a4 <syscall_trace>
  1397d4:	e3a00000 	mov	r0, #0
  1397d8:	e8bd8010 	pop	{r4, pc}
  1397dc:	0014c2ec 	.word	0x0014c2ec

001397e0 <syscall_eventfd>:
  1397e0:	e92d4010 	push	{r4, lr}
  1397e4:	e3a01010 	mov	r1, #16
  1397e8:	e59f0008 	ldr	r0, [pc, #8]	; 1397f8 <syscall_eventfd+0x18>
  1397ec:	ebfffeac 	bl	1392a4 <syscall_trace>
  1397f0:	e3a00000 	mov	r0, #0
  1397f4:	e8bd8010 	pop	{r4, pc}
  1397f8:	0014c2dc 	.word	0x0014c2dc

001397fc <syscall_timerfd_create>:
  1397fc:	e92d4010 	push	{r4, lr}
  139800:	e3a01017 	mov	r1, #23
  139804:	e59f0008 	ldr	r0, [pc, #8]	; 139814 <syscall_timerfd_create+0x18>
  139808:	ebfffea5 	bl	1392a4 <syscall_trace>
  13980c:	e3a00000 	mov	r0, #0
  139810:	e8bd8010 	pop	{r4, pc}
  139814:	0014c2c4 	.word	0x0014c2c4

00139818 <syscall_signalfd>:
  139818:	e92d4010 	push	{r4, lr}
  13981c:	e3a01011 	mov	r1, #17
  139820:	e59f0008 	ldr	r0, [pc, #8]	; 139830 <syscall_signalfd+0x18>
  139824:	ebfffe9e 	bl	1392a4 <syscall_trace>
  139828:	e3a00000 	mov	r0, #0
  13982c:	e8bd8010 	pop	{r4, pc}
  139830:	0014c2b0 	.word	0x0014c2b0

00139834 <syscall_utimensat>:
  139834:	e92d4010 	push	{r4, lr}
  139838:	e3a01012 	mov	r1, #18
  13983c:	e59f0008 	ldr	r0, [pc, #8]	; 13984c <syscall_utimensat+0x18>
  139840:	ebfffe97 	bl	1392a4 <syscall_trace>
  139844:	e3a00000 	mov	r0, #0
  139848:	e8bd8010 	pop	{r4, pc}
  13984c:	0014c29c 	.word	0x0014c29c

00139850 <syscall_kexec_load>:
  139850:	e92d4010 	push	{r4, lr}
  139854:	e3a01013 	mov	r1, #19
  139858:	e59f0008 	ldr	r0, [pc, #8]	; 139868 <syscall_kexec_load+0x18>
  13985c:	ebfffe90 	bl	1392a4 <syscall_trace>
  139860:	e3a00000 	mov	r0, #0
  139864:	e8bd8010 	pop	{r4, pc}
  139868:	0014c288 	.word	0x0014c288

0013986c <syscall_epoll_pwait>:
  13986c:	e92d4010 	push	{r4, lr}
  139870:	e3a01014 	mov	r1, #20
  139874:	e59f0008 	ldr	r0, [pc, #8]	; 139884 <syscall_epoll_pwait+0x18>
  139878:	ebfffe89 	bl	1392a4 <syscall_trace>
  13987c:	e3e00025 	mvn	r0, #37	; 0x25
  139880:	e8bd8010 	pop	{r4, pc}
  139884:	0014c274 	.word	0x0014c274

00139888 <syscall_getcpu>:
  139888:	e92d4010 	push	{r4, lr}
  13988c:	e3a0100f 	mov	r1, #15
  139890:	e59f0008 	ldr	r0, [pc, #8]	; 1398a0 <syscall_getcpu+0x18>
  139894:	ebfffe82 	bl	1392a4 <syscall_trace>
  139898:	e3a00000 	mov	r0, #0
  13989c:	e8bd8010 	pop	{r4, pc}
  1398a0:	0014c264 	.word	0x0014c264

001398a4 <syscall_move_pages>:
  1398a4:	e92d4010 	push	{r4, lr}
  1398a8:	e3a01013 	mov	r1, #19
  1398ac:	e59f0008 	ldr	r0, [pc, #8]	; 1398bc <syscall_move_pages+0x18>
  1398b0:	ebfffe7b 	bl	1392a4 <syscall_trace>
  1398b4:	e3a00000 	mov	r0, #0
  1398b8:	e8bd8010 	pop	{r4, pc}
  1398bc:	0014c250 	.word	0x0014c250

001398c0 <syscall_vmsplice>:
  1398c0:	e92d4010 	push	{r4, lr}
  1398c4:	e3a01011 	mov	r1, #17
  1398c8:	e59f0008 	ldr	r0, [pc, #8]	; 1398d8 <syscall_vmsplice+0x18>
  1398cc:	ebfffe74 	bl	1392a4 <syscall_trace>
  1398d0:	e3a00000 	mov	r0, #0
  1398d4:	e8bd8010 	pop	{r4, pc}
  1398d8:	0014c23c 	.word	0x0014c23c

001398dc <syscall_tee>:
  1398dc:	e92d4010 	push	{r4, lr}
  1398e0:	e3a0100c 	mov	r1, #12
  1398e4:	e59f0008 	ldr	r0, [pc, #8]	; 1398f4 <syscall_tee+0x18>
  1398e8:	ebfffe6d 	bl	1392a4 <syscall_trace>
  1398ec:	e3a00000 	mov	r0, #0
  1398f0:	e8bd8010 	pop	{r4, pc}
  1398f4:	0014c230 	.word	0x0014c230

001398f8 <syscall_arm_sync_file_range>:
  1398f8:	e92d4010 	push	{r4, lr}
  1398fc:	e3a0101c 	mov	r1, #28
  139900:	e59f0008 	ldr	r0, [pc, #8]	; 139910 <syscall_arm_sync_file_range+0x18>
  139904:	ebfffe66 	bl	1392a4 <syscall_trace>
  139908:	e3a00000 	mov	r0, #0
  13990c:	e8bd8010 	pop	{r4, pc}
  139910:	0014c214 	.word	0x0014c214

00139914 <syscall_splice>:
  139914:	e92d4010 	push	{r4, lr}
  139918:	e3a0100f 	mov	r1, #15
  13991c:	e59f0008 	ldr	r0, [pc, #8]	; 13992c <syscall_splice+0x18>
  139920:	ebfffe5f 	bl	1392a4 <syscall_trace>
  139924:	e3a00000 	mov	r0, #0
  139928:	e8bd8010 	pop	{r4, pc}
  13992c:	0014c204 	.word	0x0014c204

00139930 <syscall_get_robust_list>:
  139930:	e92d4010 	push	{r4, lr}
  139934:	e3a01018 	mov	r1, #24
  139938:	e59f0008 	ldr	r0, [pc, #8]	; 139948 <syscall_get_robust_list+0x18>
  13993c:	ebfffe58 	bl	1392a4 <syscall_trace>
  139940:	e3a00000 	mov	r0, #0
  139944:	e8bd8010 	pop	{r4, pc}
  139948:	0014c1ec 	.word	0x0014c1ec

0013994c <syscall_set_robust_list>:
  13994c:	e92d4010 	push	{r4, lr}
  139950:	e3a01018 	mov	r1, #24
  139954:	e59f0008 	ldr	r0, [pc, #8]	; 139964 <syscall_set_robust_list+0x18>
  139958:	ebfffe51 	bl	1392a4 <syscall_trace>
  13995c:	e3a00000 	mov	r0, #0
  139960:	e8bd8010 	pop	{r4, pc}
  139964:	0014c1d4 	.word	0x0014c1d4

00139968 <syscall_unshare>:
  139968:	e92d4010 	push	{r4, lr}
  13996c:	e3a01010 	mov	r1, #16
  139970:	e59f0008 	ldr	r0, [pc, #8]	; 139980 <syscall_unshare+0x18>
  139974:	ebfffe4a 	bl	1392a4 <syscall_trace>
  139978:	e3a00000 	mov	r0, #0
  13997c:	e8bd8010 	pop	{r4, pc}
  139980:	0014c1c4 	.word	0x0014c1c4

00139984 <syscall_ppoll>:
  139984:	e92d4010 	push	{r4, lr}
  139988:	e3a0100e 	mov	r1, #14
  13998c:	e59f0008 	ldr	r0, [pc, #8]	; 13999c <syscall_ppoll+0x18>
  139990:	ebfffe43 	bl	1392a4 <syscall_trace>
  139994:	e3a00000 	mov	r0, #0
  139998:	e8bd8010 	pop	{r4, pc}
  13999c:	0014c1b4 	.word	0x0014c1b4

001399a0 <syscall_pselect6>:
  1399a0:	e92d4010 	push	{r4, lr}
  1399a4:	e3a01011 	mov	r1, #17
  1399a8:	e59f0008 	ldr	r0, [pc, #8]	; 1399b8 <syscall_pselect6+0x18>
  1399ac:	ebfffe3c 	bl	1392a4 <syscall_trace>
  1399b0:	e3a00000 	mov	r0, #0
  1399b4:	e8bd8010 	pop	{r4, pc}
  1399b8:	0014c1a0 	.word	0x0014c1a0

001399bc <syscall_faccessat>:
  1399bc:	e92d4010 	push	{r4, lr}
  1399c0:	e3a01012 	mov	r1, #18
  1399c4:	e59f0008 	ldr	r0, [pc, #8]	; 1399d4 <syscall_faccessat+0x18>
  1399c8:	ebfffe35 	bl	1392a4 <syscall_trace>
  1399cc:	e3a00000 	mov	r0, #0
  1399d0:	e8bd8010 	pop	{r4, pc}
  1399d4:	0014c18c 	.word	0x0014c18c

001399d8 <syscall_fchmodat>:
  1399d8:	e92d4010 	push	{r4, lr}
  1399dc:	e3a01011 	mov	r1, #17
  1399e0:	e59f0008 	ldr	r0, [pc, #8]	; 1399f0 <syscall_fchmodat+0x18>
  1399e4:	ebfffe2e 	bl	1392a4 <syscall_trace>
  1399e8:	e3a00000 	mov	r0, #0
  1399ec:	e8bd8010 	pop	{r4, pc}
  1399f0:	0014c178 	.word	0x0014c178

001399f4 <syscall_readlinkat>:
  1399f4:	e92d4010 	push	{r4, lr}
  1399f8:	e3a01013 	mov	r1, #19
  1399fc:	e59f0008 	ldr	r0, [pc, #8]	; 139a0c <syscall_readlinkat+0x18>
  139a00:	ebfffe27 	bl	1392a4 <syscall_trace>
  139a04:	e3a00000 	mov	r0, #0
  139a08:	e8bd8010 	pop	{r4, pc}
  139a0c:	0014c164 	.word	0x0014c164

00139a10 <syscall_symlinkat>:
  139a10:	e92d4010 	push	{r4, lr}
  139a14:	e3a01012 	mov	r1, #18
  139a18:	e59f0008 	ldr	r0, [pc, #8]	; 139a28 <syscall_symlinkat+0x18>
  139a1c:	ebfffe20 	bl	1392a4 <syscall_trace>
  139a20:	e3a00000 	mov	r0, #0
  139a24:	e8bd8010 	pop	{r4, pc}
  139a28:	0014c150 	.word	0x0014c150

00139a2c <syscall_linkat>:
  139a2c:	e92d4010 	push	{r4, lr}
  139a30:	e3a0100f 	mov	r1, #15
  139a34:	e59f0008 	ldr	r0, [pc, #8]	; 139a44 <syscall_linkat+0x18>
  139a38:	ebfffe19 	bl	1392a4 <syscall_trace>
  139a3c:	e3a00000 	mov	r0, #0
  139a40:	e8bd8010 	pop	{r4, pc}
  139a44:	0014c140 	.word	0x0014c140

00139a48 <syscall_renameat>:
  139a48:	e92d4010 	push	{r4, lr}
  139a4c:	e3a01011 	mov	r1, #17
  139a50:	e59f0008 	ldr	r0, [pc, #8]	; 139a60 <syscall_renameat+0x18>
  139a54:	ebfffe12 	bl	1392a4 <syscall_trace>
  139a58:	e3a00000 	mov	r0, #0
  139a5c:	e8bd8010 	pop	{r4, pc}
  139a60:	0014c12c 	.word	0x0014c12c

00139a64 <syscall_unlinkat>:
  139a64:	e92d4010 	push	{r4, lr}
  139a68:	e3a01011 	mov	r1, #17
  139a6c:	e59f0008 	ldr	r0, [pc, #8]	; 139a7c <syscall_unlinkat+0x18>
  139a70:	ebfffe0b 	bl	1392a4 <syscall_trace>
  139a74:	e3a00000 	mov	r0, #0
  139a78:	e8bd8010 	pop	{r4, pc}
  139a7c:	0014c118 	.word	0x0014c118

00139a80 <syscall_fstatat64>:
  139a80:	e92d4010 	push	{r4, lr}
  139a84:	e3a01012 	mov	r1, #18
  139a88:	e59f0008 	ldr	r0, [pc, #8]	; 139a98 <syscall_fstatat64+0x18>
  139a8c:	ebfffe04 	bl	1392a4 <syscall_trace>
  139a90:	e3a00000 	mov	r0, #0
  139a94:	e8bd8010 	pop	{r4, pc}
  139a98:	0014c104 	.word	0x0014c104

00139a9c <syscall_futimesat>:
  139a9c:	e92d4010 	push	{r4, lr}
  139aa0:	e3a01012 	mov	r1, #18
  139aa4:	e59f0008 	ldr	r0, [pc, #8]	; 139ab4 <syscall_futimesat+0x18>
  139aa8:	ebfffdfd 	bl	1392a4 <syscall_trace>
  139aac:	e3a00000 	mov	r0, #0
  139ab0:	e8bd8010 	pop	{r4, pc}
  139ab4:	0014c0f0 	.word	0x0014c0f0

00139ab8 <syscall_fchownat>:
  139ab8:	e92d4010 	push	{r4, lr}
  139abc:	e3a01011 	mov	r1, #17
  139ac0:	e59f0008 	ldr	r0, [pc, #8]	; 139ad0 <syscall_fchownat+0x18>
  139ac4:	ebfffdf6 	bl	1392a4 <syscall_trace>
  139ac8:	e3a00000 	mov	r0, #0
  139acc:	e8bd8010 	pop	{r4, pc}
  139ad0:	0014c0dc 	.word	0x0014c0dc

00139ad4 <syscall_mknodat>:
  139ad4:	e92d4010 	push	{r4, lr}
  139ad8:	e3a01010 	mov	r1, #16
  139adc:	e59f0008 	ldr	r0, [pc, #8]	; 139aec <syscall_mknodat+0x18>
  139ae0:	ebfffdef 	bl	1392a4 <syscall_trace>
  139ae4:	e3a00000 	mov	r0, #0
  139ae8:	e8bd8010 	pop	{r4, pc}
  139aec:	0014c0cc 	.word	0x0014c0cc

00139af0 <syscall_mkdirat>:
  139af0:	e92d4010 	push	{r4, lr}
  139af4:	e3a01010 	mov	r1, #16
  139af8:	e59f0008 	ldr	r0, [pc, #8]	; 139b08 <syscall_mkdirat+0x18>
  139afc:	ebfffde8 	bl	1392a4 <syscall_trace>
  139b00:	e3a00000 	mov	r0, #0
  139b04:	e8bd8010 	pop	{r4, pc}
  139b08:	0014c0bc 	.word	0x0014c0bc

00139b0c <syscall_openat>:
  139b0c:	e92d4010 	push	{r4, lr}
  139b10:	e3a0100f 	mov	r1, #15
  139b14:	e59f0008 	ldr	r0, [pc, #8]	; 139b24 <syscall_openat+0x18>
  139b18:	ebfffde1 	bl	1392a4 <syscall_trace>
  139b1c:	e3a00000 	mov	r0, #0
  139b20:	e8bd8010 	pop	{r4, pc}
  139b24:	0014c0ac 	.word	0x0014c0ac

00139b28 <syscall_set_mempolicy>:
  139b28:	e92d4010 	push	{r4, lr}
  139b2c:	e3a01016 	mov	r1, #22
  139b30:	e59f0008 	ldr	r0, [pc, #8]	; 139b40 <syscall_set_mempolicy+0x18>
  139b34:	ebfffdda 	bl	1392a4 <syscall_trace>
  139b38:	e3a00000 	mov	r0, #0
  139b3c:	e8bd8010 	pop	{r4, pc}
  139b40:	0014c094 	.word	0x0014c094

00139b44 <syscall_get_mempolicy>:
  139b44:	e92d4010 	push	{r4, lr}
  139b48:	e3a01016 	mov	r1, #22
  139b4c:	e59f0008 	ldr	r0, [pc, #8]	; 139b5c <syscall_get_mempolicy+0x18>
  139b50:	ebfffdd3 	bl	1392a4 <syscall_trace>
  139b54:	e3a00000 	mov	r0, #0
  139b58:	e8bd8010 	pop	{r4, pc}
  139b5c:	0014c07c 	.word	0x0014c07c

00139b60 <syscall_mbind>:
  139b60:	e92d4010 	push	{r4, lr}
  139b64:	e3a0100e 	mov	r1, #14
  139b68:	e59f0008 	ldr	r0, [pc, #8]	; 139b78 <syscall_mbind+0x18>
  139b6c:	ebfffdcc 	bl	1392a4 <syscall_trace>
  139b70:	e3a00000 	mov	r0, #0
  139b74:	e8bd8010 	pop	{r4, pc}
  139b78:	0014c06c 	.word	0x0014c06c

00139b7c <syscall_inotify_rm_watch>:
  139b7c:	e92d4010 	push	{r4, lr}
  139b80:	e3a01019 	mov	r1, #25
  139b84:	e59f0008 	ldr	r0, [pc, #8]	; 139b94 <syscall_inotify_rm_watch+0x18>
  139b88:	ebfffdc5 	bl	1392a4 <syscall_trace>
  139b8c:	e3a00000 	mov	r0, #0
  139b90:	e8bd8010 	pop	{r4, pc}
  139b94:	0014c050 	.word	0x0014c050

00139b98 <syscall_inotify_add_watch>:
  139b98:	e92d4010 	push	{r4, lr}
  139b9c:	e3a0101a 	mov	r1, #26
  139ba0:	e59f0008 	ldr	r0, [pc, #8]	; 139bb0 <syscall_inotify_add_watch+0x18>
  139ba4:	ebfffdbe 	bl	1392a4 <syscall_trace>
  139ba8:	e3a00000 	mov	r0, #0
  139bac:	e8bd8010 	pop	{r4, pc}
  139bb0:	0014c034 	.word	0x0014c034

00139bb4 <syscall_inotify_init>:
  139bb4:	e92d4010 	push	{r4, lr}
  139bb8:	e3a01015 	mov	r1, #21
  139bbc:	e59f0008 	ldr	r0, [pc, #8]	; 139bcc <syscall_inotify_init+0x18>
  139bc0:	ebfffdb7 	bl	1392a4 <syscall_trace>
  139bc4:	e3a00000 	mov	r0, #0
  139bc8:	e8bd8010 	pop	{r4, pc}
  139bcc:	0014c01c 	.word	0x0014c01c

00139bd0 <syscall_ioprio_get>:
  139bd0:	e92d4010 	push	{r4, lr}
  139bd4:	e3a01013 	mov	r1, #19
  139bd8:	e59f0008 	ldr	r0, [pc, #8]	; 139be8 <syscall_ioprio_get+0x18>
  139bdc:	ebfffdb0 	bl	1392a4 <syscall_trace>
  139be0:	e3a00000 	mov	r0, #0
  139be4:	e8bd8010 	pop	{r4, pc}
  139be8:	0014c008 	.word	0x0014c008

00139bec <syscall_ioprio_set>:
  139bec:	e92d4010 	push	{r4, lr}
  139bf0:	e3a01013 	mov	r1, #19
  139bf4:	e59f0008 	ldr	r0, [pc, #8]	; 139c04 <syscall_ioprio_set+0x18>
  139bf8:	ebfffda9 	bl	1392a4 <syscall_trace>
  139bfc:	e3a00000 	mov	r0, #0
  139c00:	e8bd8010 	pop	{r4, pc}
  139c04:	0014bff4 	.word	0x0014bff4

00139c08 <syscall_vserver>:
  139c08:	e92d4010 	push	{r4, lr}
  139c0c:	e3a01010 	mov	r1, #16
  139c10:	e59f0008 	ldr	r0, [pc, #8]	; 139c20 <syscall_vserver+0x18>
  139c14:	ebfffda2 	bl	1392a4 <syscall_trace>
  139c18:	e3a00000 	mov	r0, #0
  139c1c:	e8bd8010 	pop	{r4, pc}
  139c20:	0014bfe4 	.word	0x0014bfe4

00139c24 <syscall_semtimedop>:
  139c24:	e92d4010 	push	{r4, lr}
  139c28:	e3a01013 	mov	r1, #19
  139c2c:	e59f0008 	ldr	r0, [pc, #8]	; 139c3c <syscall_semtimedop+0x18>
  139c30:	ebfffd9b 	bl	1392a4 <syscall_trace>
  139c34:	e3a00000 	mov	r0, #0
  139c38:	e8bd8010 	pop	{r4, pc}
  139c3c:	0014bfd0 	.word	0x0014bfd0

00139c40 <syscall_keyctl>:
  139c40:	e92d4010 	push	{r4, lr}
  139c44:	e3a0100f 	mov	r1, #15
  139c48:	e59f0008 	ldr	r0, [pc, #8]	; 139c58 <syscall_keyctl+0x18>
  139c4c:	ebfffd94 	bl	1392a4 <syscall_trace>
  139c50:	e3a00000 	mov	r0, #0
  139c54:	e8bd8010 	pop	{r4, pc}
  139c58:	0014bfc0 	.word	0x0014bfc0

00139c5c <syscall_request_key>:
  139c5c:	e92d4010 	push	{r4, lr}
  139c60:	e3a01014 	mov	r1, #20
  139c64:	e59f0008 	ldr	r0, [pc, #8]	; 139c74 <syscall_request_key+0x18>
  139c68:	ebfffd8d 	bl	1392a4 <syscall_trace>
  139c6c:	e3a00000 	mov	r0, #0
  139c70:	e8bd8010 	pop	{r4, pc}
  139c74:	0014bfac 	.word	0x0014bfac

00139c78 <syscall_add_key>:
  139c78:	e92d4010 	push	{r4, lr}
  139c7c:	e3a01010 	mov	r1, #16
  139c80:	e59f0008 	ldr	r0, [pc, #8]	; 139c90 <syscall_add_key+0x18>
  139c84:	ebfffd86 	bl	1392a4 <syscall_trace>
  139c88:	e3a00000 	mov	r0, #0
  139c8c:	e8bd8010 	pop	{r4, pc}
  139c90:	0014bf9c 	.word	0x0014bf9c

00139c94 <syscall_msgctl>:
  139c94:	e92d4010 	push	{r4, lr}
  139c98:	e3a0100f 	mov	r1, #15
  139c9c:	e59f0008 	ldr	r0, [pc, #8]	; 139cac <syscall_msgctl+0x18>
  139ca0:	ebfffd7f 	bl	1392a4 <syscall_trace>
  139ca4:	e3a00000 	mov	r0, #0
  139ca8:	e8bd8010 	pop	{r4, pc}
  139cac:	0014bf4c 	.word	0x0014bf4c

00139cb0 <syscall_msgget>:
  139cb0:	e92d4010 	push	{r4, lr}
  139cb4:	e3a0100f 	mov	r1, #15
  139cb8:	e59f0008 	ldr	r0, [pc, #8]	; 139cc8 <syscall_msgget+0x18>
  139cbc:	ebfffd78 	bl	1392a4 <syscall_trace>
  139cc0:	e3a00000 	mov	r0, #0
  139cc4:	e8bd8010 	pop	{r4, pc}
  139cc8:	0014bf3c 	.word	0x0014bf3c

00139ccc <syscall_msgrcv>:
  139ccc:	e92d4010 	push	{r4, lr}
  139cd0:	e3a0100f 	mov	r1, #15
  139cd4:	e59f0008 	ldr	r0, [pc, #8]	; 139ce4 <syscall_msgrcv+0x18>
  139cd8:	ebfffd71 	bl	1392a4 <syscall_trace>
  139cdc:	e3a00000 	mov	r0, #0
  139ce0:	e8bd8010 	pop	{r4, pc}
  139ce4:	0014bf2c 	.word	0x0014bf2c

00139ce8 <syscall_msgsnd>:
  139ce8:	e92d4010 	push	{r4, lr}
  139cec:	e3a0100f 	mov	r1, #15
  139cf0:	e59f0008 	ldr	r0, [pc, #8]	; 139d00 <syscall_msgsnd+0x18>
  139cf4:	ebfffd6a 	bl	1392a4 <syscall_trace>
  139cf8:	e3a00000 	mov	r0, #0
  139cfc:	e8bd8010 	pop	{r4, pc}
  139d00:	0014bf1c 	.word	0x0014bf1c

00139d04 <syscall_semctl>:
  139d04:	e92d4010 	push	{r4, lr}
  139d08:	e3a0100f 	mov	r1, #15
  139d0c:	e59f0008 	ldr	r0, [pc, #8]	; 139d1c <syscall_semctl+0x18>
  139d10:	ebfffd63 	bl	1392a4 <syscall_trace>
  139d14:	e3a00000 	mov	r0, #0
  139d18:	e8bd8010 	pop	{r4, pc}
  139d1c:	0014bf0c 	.word	0x0014bf0c

00139d20 <syscall_semget>:
  139d20:	e92d4010 	push	{r4, lr}
  139d24:	e3a0100f 	mov	r1, #15
  139d28:	e59f0008 	ldr	r0, [pc, #8]	; 139d38 <syscall_semget+0x18>
  139d2c:	ebfffd5c 	bl	1392a4 <syscall_trace>
  139d30:	e3a00000 	mov	r0, #0
  139d34:	e8bd8010 	pop	{r4, pc}
  139d38:	0014befc 	.word	0x0014befc

00139d3c <syscall_semop>:
  139d3c:	e92d4010 	push	{r4, lr}
  139d40:	e3a0100e 	mov	r1, #14
  139d44:	e59f0008 	ldr	r0, [pc, #8]	; 139d54 <syscall_semop+0x18>
  139d48:	ebfffd55 	bl	1392a4 <syscall_trace>
  139d4c:	e3a00000 	mov	r0, #0
  139d50:	e8bd8010 	pop	{r4, pc}
  139d54:	0014beec 	.word	0x0014beec

00139d58 <syscall_recvmsg>:
  139d58:	e92d4010 	push	{r4, lr}
  139d5c:	e3a01010 	mov	r1, #16
  139d60:	e59f0008 	ldr	r0, [pc, #8]	; 139d70 <syscall_recvmsg+0x18>
  139d64:	ebfffd4e 	bl	1392a4 <syscall_trace>
  139d68:	e3a00000 	mov	r0, #0
  139d6c:	e8bd8010 	pop	{r4, pc}
  139d70:	0014bedc 	.word	0x0014bedc

00139d74 <syscall_sendmsg>:
  139d74:	e92d4010 	push	{r4, lr}
  139d78:	e3a01010 	mov	r1, #16
  139d7c:	e59f0008 	ldr	r0, [pc, #8]	; 139d8c <syscall_sendmsg+0x18>
  139d80:	ebfffd47 	bl	1392a4 <syscall_trace>
  139d84:	e3a00000 	mov	r0, #0
  139d88:	e8bd8010 	pop	{r4, pc}
  139d8c:	0014becc 	.word	0x0014becc

00139d90 <syscall_shutdown>:
  139d90:	e92d4010 	push	{r4, lr}
  139d94:	e3a01011 	mov	r1, #17
  139d98:	e59f0008 	ldr	r0, [pc, #8]	; 139da8 <syscall_shutdown+0x18>
  139d9c:	ebfffd40 	bl	1392a4 <syscall_trace>
  139da0:	e3a00000 	mov	r0, #0
  139da4:	e8bd8010 	pop	{r4, pc}
  139da8:	0014be90 	.word	0x0014be90

00139dac <syscall_socketpair>:
  139dac:	e92d4010 	push	{r4, lr}
  139db0:	e3a01013 	mov	r1, #19
  139db4:	e59f0008 	ldr	r0, [pc, #8]	; 139dc4 <syscall_socketpair+0x18>
  139db8:	ebfffd39 	bl	1392a4 <syscall_trace>
  139dbc:	e3a00000 	mov	r0, #0
  139dc0:	e8bd8010 	pop	{r4, pc}
  139dc4:	0014be38 	.word	0x0014be38

00139dc8 <syscall_waitid>:
  139dc8:	e92d4010 	push	{r4, lr}
  139dcc:	e3a0100f 	mov	r1, #15
  139dd0:	e59f0008 	ldr	r0, [pc, #8]	; 139de0 <syscall_waitid+0x18>
  139dd4:	ebfffd32 	bl	1392a4 <syscall_trace>
  139dd8:	e3a00000 	mov	r0, #0
  139ddc:	e8bd8010 	pop	{r4, pc}
  139de0:	0014bdb0 	.word	0x0014bdb0

00139de4 <syscall_mq_getsetattr>:
  139de4:	e92d4010 	push	{r4, lr}
  139de8:	e3a01016 	mov	r1, #22
  139dec:	e59f0008 	ldr	r0, [pc, #8]	; 139dfc <syscall_mq_getsetattr+0x18>
  139df0:	ebfffd2b 	bl	1392a4 <syscall_trace>
  139df4:	e3a00000 	mov	r0, #0
  139df8:	e8bd8010 	pop	{r4, pc}
  139dfc:	0014bd98 	.word	0x0014bd98

00139e00 <syscall_mq_notify>:
  139e00:	e92d4010 	push	{r4, lr}
  139e04:	e3a01012 	mov	r1, #18
  139e08:	e59f0008 	ldr	r0, [pc, #8]	; 139e18 <syscall_mq_notify+0x18>
  139e0c:	ebfffd24 	bl	1392a4 <syscall_trace>
  139e10:	e3a00000 	mov	r0, #0
  139e14:	e8bd8010 	pop	{r4, pc}
  139e18:	0014bd84 	.word	0x0014bd84

00139e1c <syscall_mq_timedreceive>:
  139e1c:	e92d4010 	push	{r4, lr}
  139e20:	e3a01018 	mov	r1, #24
  139e24:	e59f0008 	ldr	r0, [pc, #8]	; 139e34 <syscall_mq_timedreceive+0x18>
  139e28:	ebfffd1d 	bl	1392a4 <syscall_trace>
  139e2c:	e3a00000 	mov	r0, #0
  139e30:	e8bd8010 	pop	{r4, pc}
  139e34:	0014bd6c 	.word	0x0014bd6c

00139e38 <syscall_mq_timedsend>:
  139e38:	e92d4010 	push	{r4, lr}
  139e3c:	e3a01015 	mov	r1, #21
  139e40:	e59f0008 	ldr	r0, [pc, #8]	; 139e50 <syscall_mq_timedsend+0x18>
  139e44:	ebfffd16 	bl	1392a4 <syscall_trace>
  139e48:	e3a00000 	mov	r0, #0
  139e4c:	e8bd8010 	pop	{r4, pc}
  139e50:	0014bd54 	.word	0x0014bd54

00139e54 <syscall_mq_unlink>:
  139e54:	e92d4010 	push	{r4, lr}
  139e58:	e3a01012 	mov	r1, #18
  139e5c:	e59f0008 	ldr	r0, [pc, #8]	; 139e6c <syscall_mq_unlink+0x18>
  139e60:	ebfffd0f 	bl	1392a4 <syscall_trace>
  139e64:	e3a00000 	mov	r0, #0
  139e68:	e8bd8010 	pop	{r4, pc}
  139e6c:	0014bd40 	.word	0x0014bd40

00139e70 <syscall_mq_open>:
  139e70:	e92d4010 	push	{r4, lr}
  139e74:	e3a01010 	mov	r1, #16
  139e78:	e59f0008 	ldr	r0, [pc, #8]	; 139e88 <syscall_mq_open+0x18>
  139e7c:	ebfffd08 	bl	1392a4 <syscall_trace>
  139e80:	e3a00000 	mov	r0, #0
  139e84:	e8bd8010 	pop	{r4, pc}
  139e88:	0014bd30 	.word	0x0014bd30

00139e8c <syscall_pciconfig_write>:
  139e8c:	e92d4010 	push	{r4, lr}
  139e90:	e3a01018 	mov	r1, #24
  139e94:	e59f0008 	ldr	r0, [pc, #8]	; 139ea4 <syscall_pciconfig_write+0x18>
  139e98:	ebfffd01 	bl	1392a4 <syscall_trace>
  139e9c:	e3a00000 	mov	r0, #0
  139ea0:	e8bd8010 	pop	{r4, pc}
  139ea4:	0014bd18 	.word	0x0014bd18

00139ea8 <syscall_pciconfig_read>:
  139ea8:	e92d4010 	push	{r4, lr}
  139eac:	e3a01017 	mov	r1, #23
  139eb0:	e59f0008 	ldr	r0, [pc, #8]	; 139ec0 <syscall_pciconfig_read+0x18>
  139eb4:	ebfffcfa 	bl	1392a4 <syscall_trace>
  139eb8:	e3a00000 	mov	r0, #0
  139ebc:	e8bd8010 	pop	{r4, pc}
  139ec0:	0014bd00 	.word	0x0014bd00

00139ec4 <syscall_pciconfig_iobase>:
  139ec4:	e92d4010 	push	{r4, lr}
  139ec8:	e3a01019 	mov	r1, #25
  139ecc:	e59f0008 	ldr	r0, [pc, #8]	; 139edc <syscall_pciconfig_iobase+0x18>
  139ed0:	ebfffcf3 	bl	1392a4 <syscall_trace>
  139ed4:	e3a00000 	mov	r0, #0
  139ed8:	e8bd8010 	pop	{r4, pc}
  139edc:	0014bce4 	.word	0x0014bce4

00139ee0 <syscall_arm_fadvise64_64>:
  139ee0:	e92d4010 	push	{r4, lr}
  139ee4:	e3a01019 	mov	r1, #25
  139ee8:	e59f0008 	ldr	r0, [pc, #8]	; 139ef8 <syscall_arm_fadvise64_64+0x18>
  139eec:	ebfffcec 	bl	1392a4 <syscall_trace>
  139ef0:	e3a00000 	mov	r0, #0
  139ef4:	e8bd8010 	pop	{r4, pc}
  139ef8:	0014bcc8 	.word	0x0014bcc8

00139efc <syscall_utimes>:
  139efc:	e92d4010 	push	{r4, lr}
  139f00:	e3a0100f 	mov	r1, #15
  139f04:	e59f0008 	ldr	r0, [pc, #8]	; 139f14 <syscall_utimes+0x18>
  139f08:	ebfffce5 	bl	1392a4 <syscall_trace>
  139f0c:	e3a00000 	mov	r0, #0
  139f10:	e8bd8010 	pop	{r4, pc}
  139f14:	0014bcb8 	.word	0x0014bcb8

00139f18 <syscall_tgkill>:
  139f18:	e92d4010 	push	{r4, lr}
  139f1c:	e3a0100f 	mov	r1, #15
  139f20:	e59f0008 	ldr	r0, [pc, #8]	; 139f30 <syscall_tgkill+0x18>
  139f24:	ebfffcde 	bl	1392a4 <syscall_trace>
  139f28:	e3a00000 	mov	r0, #0
  139f2c:	e8bd8010 	pop	{r4, pc}
  139f30:	0014bca8 	.word	0x0014bca8

00139f34 <syscall_fstatfs64>:
  139f34:	e92d4010 	push	{r4, lr}
  139f38:	e3a01012 	mov	r1, #18
  139f3c:	e59f0008 	ldr	r0, [pc, #8]	; 139f4c <syscall_fstatfs64+0x18>
  139f40:	ebfffcd7 	bl	1392a4 <syscall_trace>
  139f44:	e3a00000 	mov	r0, #0
  139f48:	e8bd8010 	pop	{r4, pc}
  139f4c:	0014bc94 	.word	0x0014bc94

00139f50 <syscall_statfs64>:
  139f50:	e92d4010 	push	{r4, lr}
  139f54:	e3a01011 	mov	r1, #17
  139f58:	e59f0008 	ldr	r0, [pc, #8]	; 139f68 <syscall_statfs64+0x18>
  139f5c:	ebfffcd0 	bl	1392a4 <syscall_trace>
  139f60:	e3a00000 	mov	r0, #0
  139f64:	e8bd8010 	pop	{r4, pc}
  139f68:	0014bc80 	.word	0x0014bc80

00139f6c <syscall_clock_nanosleep>:
  139f6c:	e92d4010 	push	{r4, lr}
  139f70:	e3a01018 	mov	r1, #24
  139f74:	e59f0008 	ldr	r0, [pc, #8]	; 139f84 <syscall_clock_nanosleep+0x18>
  139f78:	ebfffcc9 	bl	1392a4 <syscall_trace>
  139f7c:	e3a00000 	mov	r0, #0
  139f80:	e8bd8010 	pop	{r4, pc}
  139f84:	0014bc68 	.word	0x0014bc68

00139f88 <syscall_timer_delete>:
  139f88:	e92d4010 	push	{r4, lr}
  139f8c:	e3a01015 	mov	r1, #21
  139f90:	e59f0008 	ldr	r0, [pc, #8]	; 139fa0 <syscall_timer_delete+0x18>
  139f94:	ebfffcc2 	bl	1392a4 <syscall_trace>
  139f98:	e3a00000 	mov	r0, #0
  139f9c:	e8bd8010 	pop	{r4, pc}
  139fa0:	0014bc08 	.word	0x0014bc08

00139fa4 <syscall_timer_getoverrun>:
  139fa4:	e92d4010 	push	{r4, lr}
  139fa8:	e3a01019 	mov	r1, #25
  139fac:	e59f0008 	ldr	r0, [pc, #8]	; 139fbc <syscall_timer_getoverrun+0x18>
  139fb0:	ebfffcbb 	bl	1392a4 <syscall_trace>
  139fb4:	e3a00000 	mov	r0, #0
  139fb8:	e8bd8010 	pop	{r4, pc}
  139fbc:	0014bbec 	.word	0x0014bbec

00139fc0 <syscall_timer_gettime>:
  139fc0:	e92d4010 	push	{r4, lr}
  139fc4:	e3a01016 	mov	r1, #22
  139fc8:	e59f0008 	ldr	r0, [pc, #8]	; 139fd8 <syscall_timer_gettime+0x18>
  139fcc:	ebfffcb4 	bl	1392a4 <syscall_trace>
  139fd0:	e3a00000 	mov	r0, #0
  139fd4:	e8bd8010 	pop	{r4, pc}
  139fd8:	0014bbd4 	.word	0x0014bbd4

00139fdc <syscall_timer_settime>:
  139fdc:	e92d4010 	push	{r4, lr}
  139fe0:	e3a01016 	mov	r1, #22
  139fe4:	e59f0008 	ldr	r0, [pc, #8]	; 139ff4 <syscall_timer_settime+0x18>
  139fe8:	ebfffcad 	bl	1392a4 <syscall_trace>
  139fec:	e3a00000 	mov	r0, #0
  139ff0:	e8bd8010 	pop	{r4, pc}
  139ff4:	0014bbbc 	.word	0x0014bbbc

00139ff8 <syscall_timer_create>:
  139ff8:	e92d4010 	push	{r4, lr}
  139ffc:	e3a01015 	mov	r1, #21
  13a000:	e59f0008 	ldr	r0, [pc, #8]	; 13a010 <syscall_timer_create+0x18>
  13a004:	ebfffca6 	bl	1392a4 <syscall_trace>
  13a008:	e3a00000 	mov	r0, #0
  13a00c:	e8bd8010 	pop	{r4, pc}
  13a010:	0014bba4 	.word	0x0014bba4

0013a014 <syscall_remap_file_pages>:
  13a014:	e92d4010 	push	{r4, lr}
  13a018:	e3a01019 	mov	r1, #25
  13a01c:	e59f0008 	ldr	r0, [pc, #8]	; 13a02c <syscall_remap_file_pages+0x18>
  13a020:	ebfffc9f 	bl	1392a4 <syscall_trace>
  13a024:	e3a00000 	mov	r0, #0
  13a028:	e8bd8010 	pop	{r4, pc}
  13a02c:	0014bb70 	.word	0x0014bb70

0013a030 <syscall_epoll_wait>:
  13a030:	e92d4010 	push	{r4, lr}
  13a034:	e3a01013 	mov	r1, #19
  13a038:	e59f0008 	ldr	r0, [pc, #8]	; 13a048 <syscall_epoll_wait+0x18>
  13a03c:	ebfffc98 	bl	1392a4 <syscall_trace>
  13a040:	e3e00025 	mvn	r0, #37	; 0x25
  13a044:	e8bd8010 	pop	{r4, pc}
  13a048:	0014bb5c 	.word	0x0014bb5c

0013a04c <syscall_epoll_ctl>:
  13a04c:	e92d4010 	push	{r4, lr}
  13a050:	e3a01012 	mov	r1, #18
  13a054:	e59f0008 	ldr	r0, [pc, #8]	; 13a064 <syscall_epoll_ctl+0x18>
  13a058:	ebfffc91 	bl	1392a4 <syscall_trace>
  13a05c:	e3e00025 	mvn	r0, #37	; 0x25
  13a060:	e8bd8010 	pop	{r4, pc}
  13a064:	0014bb48 	.word	0x0014bb48

0013a068 <syscall_epoll_create>:
  13a068:	e92d4010 	push	{r4, lr}
  13a06c:	e3a01015 	mov	r1, #21
  13a070:	e59f0008 	ldr	r0, [pc, #8]	; 13a080 <syscall_epoll_create+0x18>
  13a074:	ebfffc8a 	bl	1392a4 <syscall_trace>
  13a078:	e3e00025 	mvn	r0, #37	; 0x25
  13a07c:	e8bd8010 	pop	{r4, pc}
  13a080:	0014bb30 	.word	0x0014bb30

0013a084 <syscall_lookup_dcookie>:
  13a084:	e92d4010 	push	{r4, lr}
  13a088:	e3a01017 	mov	r1, #23
  13a08c:	e59f0008 	ldr	r0, [pc, #8]	; 13a09c <syscall_lookup_dcookie+0x18>
  13a090:	ebfffc83 	bl	1392a4 <syscall_trace>
  13a094:	e3a00000 	mov	r0, #0
  13a098:	e8bd8010 	pop	{r4, pc}
  13a09c:	0014bb18 	.word	0x0014bb18

0013a0a0 <syscall_io_cancel>:
  13a0a0:	e92d4010 	push	{r4, lr}
  13a0a4:	e3a01012 	mov	r1, #18
  13a0a8:	e59f0008 	ldr	r0, [pc, #8]	; 13a0b8 <syscall_io_cancel+0x18>
  13a0ac:	ebfffc7c 	bl	1392a4 <syscall_trace>
  13a0b0:	e3a00000 	mov	r0, #0
  13a0b4:	e8bd8010 	pop	{r4, pc}
  13a0b8:	0014baf0 	.word	0x0014baf0

0013a0bc <syscall_io_submit>:
  13a0bc:	e92d4010 	push	{r4, lr}
  13a0c0:	e3a01012 	mov	r1, #18
  13a0c4:	e59f0008 	ldr	r0, [pc, #8]	; 13a0d4 <syscall_io_submit+0x18>
  13a0c8:	ebfffc75 	bl	1392a4 <syscall_trace>
  13a0cc:	e3a00000 	mov	r0, #0
  13a0d0:	e8bd8010 	pop	{r4, pc}
  13a0d4:	0014badc 	.word	0x0014badc

0013a0d8 <syscall_io_getevents>:
  13a0d8:	e92d4010 	push	{r4, lr}
  13a0dc:	e3a01015 	mov	r1, #21
  13a0e0:	e59f0008 	ldr	r0, [pc, #8]	; 13a0f0 <syscall_io_getevents+0x18>
  13a0e4:	ebfffc6e 	bl	1392a4 <syscall_trace>
  13a0e8:	e3a00000 	mov	r0, #0
  13a0ec:	e8bd8010 	pop	{r4, pc}
  13a0f0:	0014bac4 	.word	0x0014bac4

0013a0f4 <syscall_io_destroy>:
  13a0f4:	e92d4010 	push	{r4, lr}
  13a0f8:	e3a01013 	mov	r1, #19
  13a0fc:	e59f0008 	ldr	r0, [pc, #8]	; 13a10c <syscall_io_destroy+0x18>
  13a100:	ebfffc67 	bl	1392a4 <syscall_trace>
  13a104:	e3a00000 	mov	r0, #0
  13a108:	e8bd8010 	pop	{r4, pc}
  13a10c:	0014bab0 	.word	0x0014bab0

0013a110 <syscall_io_setup>:
  13a110:	e92d4010 	push	{r4, lr}
  13a114:	e3a01011 	mov	r1, #17
  13a118:	e59f0008 	ldr	r0, [pc, #8]	; 13a128 <syscall_io_setup+0x18>
  13a11c:	ebfffc60 	bl	1392a4 <syscall_trace>
  13a120:	e3a00000 	mov	r0, #0
  13a124:	e8bd8010 	pop	{r4, pc}
  13a128:	0014ba9c 	.word	0x0014ba9c

0013a12c <syscall_sched_getaffinity>:
  13a12c:	e92d4010 	push	{r4, lr}
  13a130:	e3a0101a 	mov	r1, #26
  13a134:	e59f0008 	ldr	r0, [pc, #8]	; 13a144 <syscall_sched_getaffinity+0x18>
  13a138:	ebfffc59 	bl	1392a4 <syscall_trace>
  13a13c:	e3a00000 	mov	r0, #0
  13a140:	e8bd8010 	pop	{r4, pc}
  13a144:	0014ba80 	.word	0x0014ba80

0013a148 <syscall_sendfile64>:
  13a148:	e92d4010 	push	{r4, lr}
  13a14c:	e3a01013 	mov	r1, #19
  13a150:	e59f0008 	ldr	r0, [pc, #8]	; 13a160 <syscall_sendfile64+0x18>
  13a154:	ebfffc52 	bl	1392a4 <syscall_trace>
  13a158:	e3a00000 	mov	r0, #0
  13a15c:	e8bd8010 	pop	{r4, pc}
  13a160:	0014ba40 	.word	0x0014ba40

0013a164 <syscall_fremovexattr>:
  13a164:	e92d4010 	push	{r4, lr}
  13a168:	e3a01015 	mov	r1, #21
  13a16c:	e59f0008 	ldr	r0, [pc, #8]	; 13a17c <syscall_fremovexattr+0x18>
  13a170:	ebfffc4b 	bl	1392a4 <syscall_trace>
  13a174:	e3a00000 	mov	r0, #0
  13a178:	e8bd8010 	pop	{r4, pc}
  13a17c:	0014ba18 	.word	0x0014ba18

0013a180 <syscall_lremovexattr>:
  13a180:	e92d4010 	push	{r4, lr}
  13a184:	e3a01015 	mov	r1, #21
  13a188:	e59f0008 	ldr	r0, [pc, #8]	; 13a198 <syscall_lremovexattr+0x18>
  13a18c:	ebfffc44 	bl	1392a4 <syscall_trace>
  13a190:	e3a00000 	mov	r0, #0
  13a194:	e8bd8010 	pop	{r4, pc}
  13a198:	0014ba00 	.word	0x0014ba00

0013a19c <syscall_removexattr>:
  13a19c:	e92d4010 	push	{r4, lr}
  13a1a0:	e3a01014 	mov	r1, #20
  13a1a4:	e59f0008 	ldr	r0, [pc, #8]	; 13a1b4 <syscall_removexattr+0x18>
  13a1a8:	ebfffc3d 	bl	1392a4 <syscall_trace>
  13a1ac:	e3a00000 	mov	r0, #0
  13a1b0:	e8bd8010 	pop	{r4, pc}
  13a1b4:	0014b9ec 	.word	0x0014b9ec

0013a1b8 <syscall_flistxattr>:
  13a1b8:	e92d4010 	push	{r4, lr}
  13a1bc:	e3a01013 	mov	r1, #19
  13a1c0:	e59f0008 	ldr	r0, [pc, #8]	; 13a1d0 <syscall_flistxattr+0x18>
  13a1c4:	ebfffc36 	bl	1392a4 <syscall_trace>
  13a1c8:	e3a00000 	mov	r0, #0
  13a1cc:	e8bd8010 	pop	{r4, pc}
  13a1d0:	0014b9d8 	.word	0x0014b9d8

0013a1d4 <syscall_llistxattr>:
  13a1d4:	e92d4010 	push	{r4, lr}
  13a1d8:	e3a01013 	mov	r1, #19
  13a1dc:	e59f0008 	ldr	r0, [pc, #8]	; 13a1ec <syscall_llistxattr+0x18>
  13a1e0:	ebfffc2f 	bl	1392a4 <syscall_trace>
  13a1e4:	e3a00000 	mov	r0, #0
  13a1e8:	e8bd8010 	pop	{r4, pc}
  13a1ec:	0014b9c4 	.word	0x0014b9c4

0013a1f0 <syscall_listxattr>:
  13a1f0:	e92d4010 	push	{r4, lr}
  13a1f4:	e3a01012 	mov	r1, #18
  13a1f8:	e59f0008 	ldr	r0, [pc, #8]	; 13a208 <syscall_listxattr+0x18>
  13a1fc:	ebfffc28 	bl	1392a4 <syscall_trace>
  13a200:	e3a00000 	mov	r0, #0
  13a204:	e8bd8010 	pop	{r4, pc}
  13a208:	0014b9b0 	.word	0x0014b9b0

0013a20c <syscall_fgetxattr>:
  13a20c:	e92d4010 	push	{r4, lr}
  13a210:	e3a01012 	mov	r1, #18
  13a214:	e59f0008 	ldr	r0, [pc, #8]	; 13a224 <syscall_fgetxattr+0x18>
  13a218:	ebfffc21 	bl	1392a4 <syscall_trace>
  13a21c:	e3a00000 	mov	r0, #0
  13a220:	e8bd8010 	pop	{r4, pc}
  13a224:	0014b99c 	.word	0x0014b99c

0013a228 <syscall_lgetxattr>:
  13a228:	e92d4010 	push	{r4, lr}
  13a22c:	e3a01012 	mov	r1, #18
  13a230:	e59f0008 	ldr	r0, [pc, #8]	; 13a240 <syscall_lgetxattr+0x18>
  13a234:	ebfffc1a 	bl	1392a4 <syscall_trace>
  13a238:	e3a00000 	mov	r0, #0
  13a23c:	e8bd8010 	pop	{r4, pc}
  13a240:	0014b988 	.word	0x0014b988

0013a244 <syscall_getxattr>:
  13a244:	e92d4010 	push	{r4, lr}
  13a248:	e3a01011 	mov	r1, #17
  13a24c:	e59f0008 	ldr	r0, [pc, #8]	; 13a25c <syscall_getxattr+0x18>
  13a250:	ebfffc13 	bl	1392a4 <syscall_trace>
  13a254:	e3a00000 	mov	r0, #0
  13a258:	e8bd8010 	pop	{r4, pc}
  13a25c:	0014b974 	.word	0x0014b974

0013a260 <syscall_fsetxattr>:
  13a260:	e92d4010 	push	{r4, lr}
  13a264:	e3a01012 	mov	r1, #18
  13a268:	e59f0008 	ldr	r0, [pc, #8]	; 13a278 <syscall_fsetxattr+0x18>
  13a26c:	ebfffc0c 	bl	1392a4 <syscall_trace>
  13a270:	e3a00000 	mov	r0, #0
  13a274:	e8bd8010 	pop	{r4, pc}
  13a278:	0014b960 	.word	0x0014b960

0013a27c <syscall_lsetxattr>:
  13a27c:	e92d4010 	push	{r4, lr}
  13a280:	e3a01012 	mov	r1, #18
  13a284:	e59f0008 	ldr	r0, [pc, #8]	; 13a294 <syscall_lsetxattr+0x18>
  13a288:	ebfffc05 	bl	1392a4 <syscall_trace>
  13a28c:	e3a00000 	mov	r0, #0
  13a290:	e8bd8010 	pop	{r4, pc}
  13a294:	0014b94c 	.word	0x0014b94c

0013a298 <syscall_setxattr>:
  13a298:	e92d4010 	push	{r4, lr}
  13a29c:	e3a01011 	mov	r1, #17
  13a2a0:	e59f0008 	ldr	r0, [pc, #8]	; 13a2b0 <syscall_setxattr+0x18>
  13a2a4:	ebfffbfe 	bl	1392a4 <syscall_trace>
  13a2a8:	e3a00000 	mov	r0, #0
  13a2ac:	e8bd8010 	pop	{r4, pc}
  13a2b0:	0014b938 	.word	0x0014b938

0013a2b4 <syscall_readahead>:
  13a2b4:	e92d4010 	push	{r4, lr}
  13a2b8:	e3a01012 	mov	r1, #18
  13a2bc:	e59f0008 	ldr	r0, [pc, #8]	; 13a2cc <syscall_readahead+0x18>
  13a2c0:	ebfffbf7 	bl	1392a4 <syscall_trace>
  13a2c4:	e3a00000 	mov	r0, #0
  13a2c8:	e8bd8010 	pop	{r4, pc}
  13a2cc:	0014b924 	.word	0x0014b924

0013a2d0 <syscall_mincore>:
  13a2d0:	e92d4010 	push	{r4, lr}
  13a2d4:	e3a01010 	mov	r1, #16
  13a2d8:	e59f0008 	ldr	r0, [pc, #8]	; 13a2e8 <syscall_mincore+0x18>
  13a2dc:	ebfffbf0 	bl	1392a4 <syscall_trace>
  13a2e0:	e3a00000 	mov	r0, #0
  13a2e4:	e8bd8010 	pop	{r4, pc}
  13a2e8:	0014b8e4 	.word	0x0014b8e4

0013a2ec <syscall_pivot_root>:
  13a2ec:	e92d4010 	push	{r4, lr}
  13a2f0:	e3a01013 	mov	r1, #19
  13a2f4:	e59f0008 	ldr	r0, [pc, #8]	; 13a304 <syscall_pivot_root+0x18>
  13a2f8:	ebfffbe9 	bl	1392a4 <syscall_trace>
  13a2fc:	e3a00000 	mov	r0, #0
  13a300:	e8bd8010 	pop	{r4, pc}
  13a304:	0014b8d0 	.word	0x0014b8d0

0013a308 <syscall_setfsgid32>:
  13a308:	e92d4010 	push	{r4, lr}
  13a30c:	e3a01013 	mov	r1, #19
  13a310:	e59f0008 	ldr	r0, [pc, #8]	; 13a320 <syscall_setfsgid32+0x18>
  13a314:	ebfffbe2 	bl	1392a4 <syscall_trace>
  13a318:	e3a00000 	mov	r0, #0
  13a31c:	e8bd8010 	pop	{r4, pc}
  13a320:	0014b8a8 	.word	0x0014b8a8

0013a324 <syscall_setfsuid32>:
  13a324:	e92d4010 	push	{r4, lr}
  13a328:	e3a01013 	mov	r1, #19
  13a32c:	e59f0008 	ldr	r0, [pc, #8]	; 13a33c <syscall_setfsuid32+0x18>
  13a330:	ebfffbdb 	bl	1392a4 <syscall_trace>
  13a334:	e3a00000 	mov	r0, #0
  13a338:	e8bd8010 	pop	{r4, pc}
  13a33c:	0014b894 	.word	0x0014b894

0013a340 <syscall_setgid32>:
  13a340:	e92d4010 	push	{r4, lr}
  13a344:	e3a01011 	mov	r1, #17
  13a348:	e59f0008 	ldr	r0, [pc, #8]	; 13a358 <syscall_setgid32+0x18>
  13a34c:	ebfffbd4 	bl	1392a4 <syscall_trace>
  13a350:	e3a00000 	mov	r0, #0
  13a354:	e8bd8010 	pop	{r4, pc}
  13a358:	0014b880 	.word	0x0014b880

0013a35c <syscall_setuid32>:
  13a35c:	e92d4010 	push	{r4, lr}
  13a360:	e3a01011 	mov	r1, #17
  13a364:	e59f0008 	ldr	r0, [pc, #8]	; 13a374 <syscall_setuid32+0x18>
  13a368:	ebfffbcd 	bl	1392a4 <syscall_trace>
  13a36c:	e3a00000 	mov	r0, #0
  13a370:	e8bd8010 	pop	{r4, pc}
  13a374:	0014b86c 	.word	0x0014b86c

0013a378 <syscall_chown32>:
  13a378:	e92d4010 	push	{r4, lr}
  13a37c:	e3a01010 	mov	r1, #16
  13a380:	e59f0008 	ldr	r0, [pc, #8]	; 13a390 <syscall_chown32+0x18>
  13a384:	ebfffbc6 	bl	1392a4 <syscall_trace>
  13a388:	e3a00000 	mov	r0, #0
  13a38c:	e8bd8010 	pop	{r4, pc}
  13a390:	0014b85c 	.word	0x0014b85c

0013a394 <syscall_getresgid32>:
  13a394:	e92d4010 	push	{r4, lr}
  13a398:	e3a01014 	mov	r1, #20
  13a39c:	e59f0008 	ldr	r0, [pc, #8]	; 13a3ac <syscall_getresgid32+0x18>
  13a3a0:	ebfffbbf 	bl	1392a4 <syscall_trace>
  13a3a4:	e3a00000 	mov	r0, #0
  13a3a8:	e8bd8010 	pop	{r4, pc}
  13a3ac:	0014b848 	.word	0x0014b848

0013a3b0 <syscall_setresgid32>:
  13a3b0:	e92d4010 	push	{r4, lr}
  13a3b4:	e3a01014 	mov	r1, #20
  13a3b8:	e59f0008 	ldr	r0, [pc, #8]	; 13a3c8 <syscall_setresgid32+0x18>
  13a3bc:	ebfffbb8 	bl	1392a4 <syscall_trace>
  13a3c0:	e3a00000 	mov	r0, #0
  13a3c4:	e8bd8010 	pop	{r4, pc}
  13a3c8:	0014b834 	.word	0x0014b834

0013a3cc <syscall_getresuid32>:
  13a3cc:	e92d4010 	push	{r4, lr}
  13a3d0:	e3a01014 	mov	r1, #20
  13a3d4:	e59f0008 	ldr	r0, [pc, #8]	; 13a3e4 <syscall_getresuid32+0x18>
  13a3d8:	ebfffbb1 	bl	1392a4 <syscall_trace>
  13a3dc:	e3a00000 	mov	r0, #0
  13a3e0:	e8bd8010 	pop	{r4, pc}
  13a3e4:	0014b820 	.word	0x0014b820

0013a3e8 <syscall_setresuid32>:
  13a3e8:	e92d4010 	push	{r4, lr}
  13a3ec:	e3a01014 	mov	r1, #20
  13a3f0:	e59f0008 	ldr	r0, [pc, #8]	; 13a400 <syscall_setresuid32+0x18>
  13a3f4:	ebfffbaa 	bl	1392a4 <syscall_trace>
  13a3f8:	e3a00000 	mov	r0, #0
  13a3fc:	e8bd8010 	pop	{r4, pc}
  13a400:	0014b80c 	.word	0x0014b80c

0013a404 <syscall_fchown32>:
  13a404:	e92d4010 	push	{r4, lr}
  13a408:	e3a01011 	mov	r1, #17
  13a40c:	e59f0008 	ldr	r0, [pc, #8]	; 13a41c <syscall_fchown32+0x18>
  13a410:	ebfffba3 	bl	1392a4 <syscall_trace>
  13a414:	e3a00000 	mov	r0, #0
  13a418:	e8bd8010 	pop	{r4, pc}
  13a41c:	0014b7f8 	.word	0x0014b7f8

0013a420 <syscall_setgroups32>:
  13a420:	e92d4010 	push	{r4, lr}
  13a424:	e3a01014 	mov	r1, #20
  13a428:	e59f0008 	ldr	r0, [pc, #8]	; 13a438 <syscall_setgroups32+0x18>
  13a42c:	ebfffb9c 	bl	1392a4 <syscall_trace>
  13a430:	e3a00000 	mov	r0, #0
  13a434:	e8bd8010 	pop	{r4, pc}
  13a438:	0014b7e4 	.word	0x0014b7e4

0013a43c <syscall_getgroups32>:
  13a43c:	e92d4010 	push	{r4, lr}
  13a440:	e3a01014 	mov	r1, #20
  13a444:	e59f0008 	ldr	r0, [pc, #8]	; 13a454 <syscall_getgroups32+0x18>
  13a448:	ebfffb95 	bl	1392a4 <syscall_trace>
  13a44c:	e3a00000 	mov	r0, #0
  13a450:	e8bd8010 	pop	{r4, pc}
  13a454:	0014b7d0 	.word	0x0014b7d0

0013a458 <syscall_setregid32>:
  13a458:	e92d4010 	push	{r4, lr}
  13a45c:	e3a01013 	mov	r1, #19
  13a460:	e59f0008 	ldr	r0, [pc, #8]	; 13a470 <syscall_setregid32+0x18>
  13a464:	ebfffb8e 	bl	1392a4 <syscall_trace>
  13a468:	e3a00000 	mov	r0, #0
  13a46c:	e8bd8010 	pop	{r4, pc}
  13a470:	0014b7bc 	.word	0x0014b7bc

0013a474 <syscall_setreuid32>:
  13a474:	e92d4010 	push	{r4, lr}
  13a478:	e3a01013 	mov	r1, #19
  13a47c:	e59f0008 	ldr	r0, [pc, #8]	; 13a48c <syscall_setreuid32+0x18>
  13a480:	ebfffb87 	bl	1392a4 <syscall_trace>
  13a484:	e3a00000 	mov	r0, #0
  13a488:	e8bd8010 	pop	{r4, pc}
  13a48c:	0014b7a8 	.word	0x0014b7a8

0013a490 <syscall_getegid32>:
  13a490:	e92d4010 	push	{r4, lr}
  13a494:	e3a01012 	mov	r1, #18
  13a498:	e59f0008 	ldr	r0, [pc, #8]	; 13a4a8 <syscall_getegid32+0x18>
  13a49c:	ebfffb80 	bl	1392a4 <syscall_trace>
  13a4a0:	e3a00000 	mov	r0, #0
  13a4a4:	e8bd8010 	pop	{r4, pc}
  13a4a8:	0014b794 	.word	0x0014b794

0013a4ac <syscall_geteuid32>:
  13a4ac:	e92d4010 	push	{r4, lr}
  13a4b0:	e3a01012 	mov	r1, #18
  13a4b4:	e59f0008 	ldr	r0, [pc, #8]	; 13a4c4 <syscall_geteuid32+0x18>
  13a4b8:	ebfffb79 	bl	1392a4 <syscall_trace>
  13a4bc:	e3a00000 	mov	r0, #0
  13a4c0:	e8bd8010 	pop	{r4, pc}
  13a4c4:	0014b780 	.word	0x0014b780

0013a4c8 <syscall_getgid32>:
  13a4c8:	e92d4010 	push	{r4, lr}
  13a4cc:	e3a01011 	mov	r1, #17
  13a4d0:	e59f0008 	ldr	r0, [pc, #8]	; 13a4e0 <syscall_getgid32+0x18>
  13a4d4:	ebfffb72 	bl	1392a4 <syscall_trace>
  13a4d8:	e3a00000 	mov	r0, #0
  13a4dc:	e8bd8010 	pop	{r4, pc}
  13a4e0:	0014b76c 	.word	0x0014b76c

0013a4e4 <syscall_getuid32>:
  13a4e4:	e92d4010 	push	{r4, lr}
  13a4e8:	e3a01011 	mov	r1, #17
  13a4ec:	e59f0008 	ldr	r0, [pc, #8]	; 13a4fc <syscall_getuid32+0x18>
  13a4f0:	ebfffb6b 	bl	1392a4 <syscall_trace>
  13a4f4:	e3a00000 	mov	r0, #0
  13a4f8:	e8bd8010 	pop	{r4, pc}
  13a4fc:	0014b758 	.word	0x0014b758

0013a500 <syscall_lchown32>:
  13a500:	e92d4010 	push	{r4, lr}
  13a504:	e3a01011 	mov	r1, #17
  13a508:	e59f0008 	ldr	r0, [pc, #8]	; 13a518 <syscall_lchown32+0x18>
  13a50c:	ebfffb64 	bl	1392a4 <syscall_trace>
  13a510:	e3a00000 	mov	r0, #0
  13a514:	e8bd8010 	pop	{r4, pc}
  13a518:	0014b744 	.word	0x0014b744

0013a51c <syscall_ftruncate64>:
  13a51c:	e92d4010 	push	{r4, lr}
  13a520:	e3a01014 	mov	r1, #20
  13a524:	e59f0008 	ldr	r0, [pc, #8]	; 13a534 <syscall_ftruncate64+0x18>
  13a528:	ebfffb5d 	bl	1392a4 <syscall_trace>
  13a52c:	e3a00000 	mov	r0, #0
  13a530:	e8bd8010 	pop	{r4, pc}
  13a534:	0014b700 	.word	0x0014b700

0013a538 <syscall_truncate64>:
  13a538:	e92d4010 	push	{r4, lr}
  13a53c:	e3a01013 	mov	r1, #19
  13a540:	e59f0008 	ldr	r0, [pc, #8]	; 13a550 <syscall_truncate64+0x18>
  13a544:	ebfffb56 	bl	1392a4 <syscall_trace>
  13a548:	e3a00000 	mov	r0, #0
  13a54c:	e8bd8010 	pop	{r4, pc}
  13a550:	0014b6ec 	.word	0x0014b6ec

0013a554 <syscall_sendfile>:
  13a554:	e92d4010 	push	{r4, lr}
  13a558:	e3a01011 	mov	r1, #17
  13a55c:	e59f0008 	ldr	r0, [pc, #8]	; 13a56c <syscall_sendfile+0x18>
  13a560:	ebfffb4f 	bl	1392a4 <syscall_trace>
  13a564:	e3a00000 	mov	r0, #0
  13a568:	e8bd8010 	pop	{r4, pc}
  13a56c:	0014b6a4 	.word	0x0014b6a4

0013a570 <syscall_sigaltstack>:
  13a570:	e92d4010 	push	{r4, lr}
  13a574:	e3a01014 	mov	r1, #20
  13a578:	e59f0008 	ldr	r0, [pc, #8]	; 13a588 <syscall_sigaltstack+0x18>
  13a57c:	ebfffb48 	bl	1392a4 <syscall_trace>
  13a580:	e3a00000 	mov	r0, #0
  13a584:	e8bd8010 	pop	{r4, pc}
  13a588:	0014b690 	.word	0x0014b690

0013a58c <syscall_capset>:
  13a58c:	e92d4010 	push	{r4, lr}
  13a590:	e3a0100f 	mov	r1, #15
  13a594:	e59f0008 	ldr	r0, [pc, #8]	; 13a5a4 <syscall_capset+0x18>
  13a598:	ebfffb41 	bl	1392a4 <syscall_trace>
  13a59c:	e3a00000 	mov	r0, #0
  13a5a0:	e8bd8010 	pop	{r4, pc}
  13a5a4:	0014b680 	.word	0x0014b680

0013a5a8 <syscall_capget>:
  13a5a8:	e92d4010 	push	{r4, lr}
  13a5ac:	e3a0100f 	mov	r1, #15
  13a5b0:	e59f0008 	ldr	r0, [pc, #8]	; 13a5c0 <syscall_capget+0x18>
  13a5b4:	ebfffb3a 	bl	1392a4 <syscall_trace>
  13a5b8:	e3a00000 	mov	r0, #0
  13a5bc:	e8bd8010 	pop	{r4, pc}
  13a5c0:	0014b670 	.word	0x0014b670

0013a5c4 <syscall_chown>:
  13a5c4:	e92d4010 	push	{r4, lr}
  13a5c8:	e3a0100e 	mov	r1, #14
  13a5cc:	e59f0008 	ldr	r0, [pc, #8]	; 13a5dc <syscall_chown+0x18>
  13a5d0:	ebfffb33 	bl	1392a4 <syscall_trace>
  13a5d4:	e3a00000 	mov	r0, #0
  13a5d8:	e8bd8010 	pop	{r4, pc}
  13a5dc:	0014b650 	.word	0x0014b650

0013a5e0 <syscall_pwrite64>:
  13a5e0:	e92d4010 	push	{r4, lr}
  13a5e4:	e3a01011 	mov	r1, #17
  13a5e8:	e59f0008 	ldr	r0, [pc, #8]	; 13a5f8 <syscall_pwrite64+0x18>
  13a5ec:	ebfffb2c 	bl	1392a4 <syscall_trace>
  13a5f0:	e3a00000 	mov	r0, #0
  13a5f4:	e8bd8010 	pop	{r4, pc}
  13a5f8:	0014b63c 	.word	0x0014b63c

0013a5fc <syscall_pread64>:
  13a5fc:	e92d4010 	push	{r4, lr}
  13a600:	e3a01010 	mov	r1, #16
  13a604:	e59f0008 	ldr	r0, [pc, #8]	; 13a614 <syscall_pread64+0x18>
  13a608:	ebfffb25 	bl	1392a4 <syscall_trace>
  13a60c:	e3a00000 	mov	r0, #0
  13a610:	e8bd8010 	pop	{r4, pc}
  13a614:	0014b62c 	.word	0x0014b62c

0013a618 <syscall_rt_sigsuspend>:
  13a618:	e92d4010 	push	{r4, lr}
  13a61c:	e3a01016 	mov	r1, #22
  13a620:	e59f0008 	ldr	r0, [pc, #8]	; 13a630 <syscall_rt_sigsuspend+0x18>
  13a624:	ebfffb1e 	bl	1392a4 <syscall_trace>
  13a628:	e3a00000 	mov	r0, #0
  13a62c:	e8bd8010 	pop	{r4, pc}
  13a630:	0014b614 	.word	0x0014b614

0013a634 <syscall_rt_sigqueueinfo>:
  13a634:	e92d4010 	push	{r4, lr}
  13a638:	e3a01018 	mov	r1, #24
  13a63c:	e59f0008 	ldr	r0, [pc, #8]	; 13a64c <syscall_rt_sigqueueinfo+0x18>
  13a640:	ebfffb17 	bl	1392a4 <syscall_trace>
  13a644:	e3a00000 	mov	r0, #0
  13a648:	e8bd8010 	pop	{r4, pc}
  13a64c:	0014b5fc 	.word	0x0014b5fc

0013a650 <syscall_rt_sigtimedwait>:
  13a650:	e92d4010 	push	{r4, lr}
  13a654:	e3a01018 	mov	r1, #24
  13a658:	e59f0008 	ldr	r0, [pc, #8]	; 13a668 <syscall_rt_sigtimedwait+0x18>
  13a65c:	ebfffb10 	bl	1392a4 <syscall_trace>
  13a660:	e3a00000 	mov	r0, #0
  13a664:	e8bd8010 	pop	{r4, pc}
  13a668:	0014b5e4 	.word	0x0014b5e4

0013a66c <syscall_rt_sigpending>:
  13a66c:	e92d4010 	push	{r4, lr}
  13a670:	e3a01016 	mov	r1, #22
  13a674:	e59f0008 	ldr	r0, [pc, #8]	; 13a684 <syscall_rt_sigpending+0x18>
  13a678:	ebfffb09 	bl	1392a4 <syscall_trace>
  13a67c:	e3a00000 	mov	r0, #0
  13a680:	e8bd8010 	pop	{r4, pc}
  13a684:	0014b5cc 	.word	0x0014b5cc

0013a688 <syscall_rt_sigreturn>:
  13a688:	e92d4010 	push	{r4, lr}
  13a68c:	e3a01015 	mov	r1, #21
  13a690:	e59f0008 	ldr	r0, [pc, #8]	; 13a6a0 <syscall_rt_sigreturn+0x18>
  13a694:	ebfffb02 	bl	1392a4 <syscall_trace>
  13a698:	e3a00000 	mov	r0, #0
  13a69c:	e8bd8010 	pop	{r4, pc}
  13a6a0:	0014b584 	.word	0x0014b584

0013a6a4 <syscall_prctl>:
  13a6a4:	e92d4010 	push	{r4, lr}
  13a6a8:	e3a0100e 	mov	r1, #14
  13a6ac:	e59f0008 	ldr	r0, [pc, #8]	; 13a6bc <syscall_prctl+0x18>
  13a6b0:	ebfffafb 	bl	1392a4 <syscall_trace>
  13a6b4:	e3a00000 	mov	r0, #0
  13a6b8:	e8bd8010 	pop	{r4, pc}
  13a6bc:	0014b574 	.word	0x0014b574

0013a6c0 <syscall_getresgid>:
  13a6c0:	e92d4010 	push	{r4, lr}
  13a6c4:	e3a01012 	mov	r1, #18
  13a6c8:	e59f0008 	ldr	r0, [pc, #8]	; 13a6d8 <syscall_getresgid+0x18>
  13a6cc:	ebfffaf4 	bl	1392a4 <syscall_trace>
  13a6d0:	e3a00000 	mov	r0, #0
  13a6d4:	e8bd8010 	pop	{r4, pc}
  13a6d8:	0014b560 	.word	0x0014b560

0013a6dc <syscall_setresgid>:
  13a6dc:	e92d4010 	push	{r4, lr}
  13a6e0:	e3a01012 	mov	r1, #18
  13a6e4:	e59f0008 	ldr	r0, [pc, #8]	; 13a6f4 <syscall_setresgid+0x18>
  13a6e8:	ebfffaed 	bl	1392a4 <syscall_trace>
  13a6ec:	e3a00000 	mov	r0, #0
  13a6f0:	e8bd8010 	pop	{r4, pc}
  13a6f4:	0014b54c 	.word	0x0014b54c

0013a6f8 <syscall_nfsservctl>:
  13a6f8:	e92d4010 	push	{r4, lr}
  13a6fc:	e3a01013 	mov	r1, #19
  13a700:	e59f0008 	ldr	r0, [pc, #8]	; 13a710 <syscall_nfsservctl+0x18>
  13a704:	ebfffae6 	bl	1392a4 <syscall_trace>
  13a708:	e3a00000 	mov	r0, #0
  13a70c:	e8bd8010 	pop	{r4, pc}
  13a710:	0014b538 	.word	0x0014b538

0013a714 <syscall_getresuid>:
  13a714:	e92d4010 	push	{r4, lr}
  13a718:	e3a01012 	mov	r1, #18
  13a71c:	e59f0008 	ldr	r0, [pc, #8]	; 13a72c <syscall_getresuid+0x18>
  13a720:	ebfffadf 	bl	1392a4 <syscall_trace>
  13a724:	e3a00000 	mov	r0, #0
  13a728:	e8bd8010 	pop	{r4, pc}
  13a72c:	0014b514 	.word	0x0014b514

0013a730 <syscall_setresuid>:
  13a730:	e92d4010 	push	{r4, lr}
  13a734:	e3a01012 	mov	r1, #18
  13a738:	e59f0008 	ldr	r0, [pc, #8]	; 13a748 <syscall_setresuid+0x18>
  13a73c:	ebfffad8 	bl	1392a4 <syscall_trace>
  13a740:	e3a00000 	mov	r0, #0
  13a744:	e8bd8010 	pop	{r4, pc}
  13a748:	0014b500 	.word	0x0014b500

0013a74c <syscall_sched_rr_get_interval>:
  13a74c:	e92d4010 	push	{r4, lr}
  13a750:	e3a0101e 	mov	r1, #30
  13a754:	e59f0008 	ldr	r0, [pc, #8]	; 13a764 <syscall_sched_rr_get_interval+0x18>
  13a758:	ebfffad1 	bl	1392a4 <syscall_trace>
  13a75c:	e3a00000 	mov	r0, #0
  13a760:	e8bd8010 	pop	{r4, pc}
  13a764:	0014b4bc 	.word	0x0014b4bc

0013a768 <syscall_sched_yield>:
  13a768:	e92d4010 	push	{r4, lr}
  13a76c:	e3a01014 	mov	r1, #20
  13a770:	e59f0008 	ldr	r0, [pc, #8]	; 13a780 <syscall_sched_yield+0x18>
  13a774:	ebfffaca 	bl	1392a4 <syscall_trace>
  13a778:	e3a00000 	mov	r0, #0
  13a77c:	e8bd8010 	pop	{r4, pc}
  13a780:	0014b468 	.word	0x0014b468

0013a784 <syscall_munlockall>:
  13a784:	e92d4010 	push	{r4, lr}
  13a788:	e3a01013 	mov	r1, #19
  13a78c:	e59f0008 	ldr	r0, [pc, #8]	; 13a79c <syscall_munlockall+0x18>
  13a790:	ebfffac3 	bl	1392a4 <syscall_trace>
  13a794:	e3a00000 	mov	r0, #0
  13a798:	e8bd8010 	pop	{r4, pc}
  13a79c:	0014b3ec 	.word	0x0014b3ec

0013a7a0 <syscall_mlockall>:
  13a7a0:	e92d4010 	push	{r4, lr}
  13a7a4:	e3a01011 	mov	r1, #17
  13a7a8:	e59f0008 	ldr	r0, [pc, #8]	; 13a7b8 <syscall_mlockall+0x18>
  13a7ac:	ebfffabc 	bl	1392a4 <syscall_trace>
  13a7b0:	e3a00000 	mov	r0, #0
  13a7b4:	e8bd8010 	pop	{r4, pc}
  13a7b8:	0014b3d8 	.word	0x0014b3d8

0013a7bc <syscall_munlock>:
  13a7bc:	e92d4010 	push	{r4, lr}
  13a7c0:	e3a01010 	mov	r1, #16
  13a7c4:	e59f0008 	ldr	r0, [pc, #8]	; 13a7d4 <syscall_munlock+0x18>
  13a7c8:	ebfffab5 	bl	1392a4 <syscall_trace>
  13a7cc:	e3a00000 	mov	r0, #0
  13a7d0:	e8bd8010 	pop	{r4, pc}
  13a7d4:	0014b3c8 	.word	0x0014b3c8

0013a7d8 <syscall_mlock>:
  13a7d8:	e92d4010 	push	{r4, lr}
  13a7dc:	e3a0100e 	mov	r1, #14
  13a7e0:	e59f0008 	ldr	r0, [pc, #8]	; 13a7f0 <syscall_mlock+0x18>
  13a7e4:	ebfffaae 	bl	1392a4 <syscall_trace>
  13a7e8:	e3a00000 	mov	r0, #0
  13a7ec:	e8bd8010 	pop	{r4, pc}
  13a7f0:	0014b3b8 	.word	0x0014b3b8

0013a7f4 <syscall__sysctl>:
  13a7f4:	e92d4010 	push	{r4, lr}
  13a7f8:	e3a01010 	mov	r1, #16
  13a7fc:	e59f0008 	ldr	r0, [pc, #8]	; 13a80c <syscall__sysctl+0x18>
  13a800:	ebfffaa7 	bl	1392a4 <syscall_trace>
  13a804:	e3a00000 	mov	r0, #0
  13a808:	e8bd8010 	pop	{r4, pc}
  13a80c:	0014b3a8 	.word	0x0014b3a8

0013a810 <syscall_fdatasync>:
  13a810:	e92d4010 	push	{r4, lr}
  13a814:	e3a01012 	mov	r1, #18
  13a818:	e59f0008 	ldr	r0, [pc, #8]	; 13a828 <syscall_fdatasync+0x18>
  13a81c:	ebfffaa0 	bl	1392a4 <syscall_trace>
  13a820:	e3a00000 	mov	r0, #0
  13a824:	e8bd8010 	pop	{r4, pc}
  13a828:	0014b394 	.word	0x0014b394

0013a82c <syscall_getsid>:
  13a82c:	e92d4010 	push	{r4, lr}
  13a830:	e3a0100f 	mov	r1, #15
  13a834:	e59f0008 	ldr	r0, [pc, #8]	; 13a844 <syscall_getsid+0x18>
  13a838:	ebfffa99 	bl	1392a4 <syscall_trace>
  13a83c:	e3a00000 	mov	r0, #0
  13a840:	e8bd8010 	pop	{r4, pc}
  13a844:	0014b384 	.word	0x0014b384

0013a848 <syscall_msync>:
  13a848:	e92d4010 	push	{r4, lr}
  13a84c:	e3a0100e 	mov	r1, #14
  13a850:	e59f0008 	ldr	r0, [pc, #8]	; 13a860 <syscall_msync+0x18>
  13a854:	ebfffa92 	bl	1392a4 <syscall_trace>
  13a858:	e3a00000 	mov	r0, #0
  13a85c:	e8bd8010 	pop	{r4, pc}
  13a860:	0014b354 	.word	0x0014b354

0013a864 <syscall_flock>:
  13a864:	e92d4010 	push	{r4, lr}
  13a868:	e3a0100e 	mov	r1, #14
  13a86c:	e59f0008 	ldr	r0, [pc, #8]	; 13a87c <syscall_flock+0x18>
  13a870:	ebfffa8b 	bl	1392a4 <syscall_trace>
  13a874:	e3a00000 	mov	r0, #0
  13a878:	e8bd8010 	pop	{r4, pc}
  13a87c:	0014b344 	.word	0x0014b344

0013a880 <syscall_setfsgid>:
  13a880:	e92d4010 	push	{r4, lr}
  13a884:	e3a01011 	mov	r1, #17
  13a888:	e59f0008 	ldr	r0, [pc, #8]	; 13a898 <syscall_setfsgid+0x18>
  13a88c:	ebfffa84 	bl	1392a4 <syscall_trace>
  13a890:	e3a00000 	mov	r0, #0
  13a894:	e8bd8010 	pop	{r4, pc}
  13a898:	0014b2f8 	.word	0x0014b2f8

0013a89c <syscall_setfsuid>:
  13a89c:	e92d4010 	push	{r4, lr}
  13a8a0:	e3a01011 	mov	r1, #17
  13a8a4:	e59f0008 	ldr	r0, [pc, #8]	; 13a8b4 <syscall_setfsuid+0x18>
  13a8a8:	ebfffa7d 	bl	1392a4 <syscall_trace>
  13a8ac:	e3a00000 	mov	r0, #0
  13a8b0:	e8bd8010 	pop	{r4, pc}
  13a8b4:	0014b2e4 	.word	0x0014b2e4

0013a8b8 <syscall_personality>:
  13a8b8:	e92d4010 	push	{r4, lr}
  13a8bc:	e3a01014 	mov	r1, #20
  13a8c0:	e59f0008 	ldr	r0, [pc, #8]	; 13a8d0 <syscall_personality+0x18>
  13a8c4:	ebfffa76 	bl	1392a4 <syscall_trace>
  13a8c8:	e3a00000 	mov	r0, #0
  13a8cc:	e8bd8010 	pop	{r4, pc}
  13a8d0:	0014b2d0 	.word	0x0014b2d0

0013a8d4 <syscall_sysfs>:
  13a8d4:	e92d4010 	push	{r4, lr}
  13a8d8:	e3a0100e 	mov	r1, #14
  13a8dc:	e59f0008 	ldr	r0, [pc, #8]	; 13a8ec <syscall_sysfs+0x18>
  13a8e0:	ebfffa6f 	bl	1392a4 <syscall_trace>
  13a8e4:	e3a00000 	mov	r0, #0
  13a8e8:	e8bd8010 	pop	{r4, pc}
  13a8ec:	0014b2c0 	.word	0x0014b2c0

0013a8f0 <syscall_bdflush>:
  13a8f0:	e92d4010 	push	{r4, lr}
  13a8f4:	e3a01010 	mov	r1, #16
  13a8f8:	e59f0008 	ldr	r0, [pc, #8]	; 13a908 <syscall_bdflush+0x18>
  13a8fc:	ebfffa68 	bl	1392a4 <syscall_trace>
  13a900:	e3a00000 	mov	r0, #0
  13a904:	e8bd8010 	pop	{r4, pc}
  13a908:	0014b2b0 	.word	0x0014b2b0

0013a90c <syscall_fchdir>:
  13a90c:	e92d4010 	push	{r4, lr}
  13a910:	e3a0100f 	mov	r1, #15
  13a914:	e59f0008 	ldr	r0, [pc, #8]	; 13a924 <syscall_fchdir+0x18>
  13a918:	ebfffa61 	bl	1392a4 <syscall_trace>
  13a91c:	e3a00000 	mov	r0, #0
  13a920:	e8bd8010 	pop	{r4, pc}
  13a924:	0014b2a0 	.word	0x0014b2a0

0013a928 <syscall_getpgid>:
  13a928:	e92d4010 	push	{r4, lr}
  13a92c:	e3a01010 	mov	r1, #16
  13a930:	e59f0008 	ldr	r0, [pc, #8]	; 13a940 <syscall_getpgid+0x18>
  13a934:	ebfffa5a 	bl	1392a4 <syscall_trace>
  13a938:	e3a00000 	mov	r0, #0
  13a93c:	e8bd8010 	pop	{r4, pc}
  13a940:	0014b290 	.word	0x0014b290

0013a944 <syscall_quotactl>:
  13a944:	e92d4010 	push	{r4, lr}
  13a948:	e3a01011 	mov	r1, #17
  13a94c:	e59f0008 	ldr	r0, [pc, #8]	; 13a95c <syscall_quotactl+0x18>
  13a950:	ebfffa53 	bl	1392a4 <syscall_trace>
  13a954:	e3a00000 	mov	r0, #0
  13a958:	e8bd8010 	pop	{r4, pc}
  13a95c:	0014b27c 	.word	0x0014b27c

0013a960 <syscall_delete_module>:
  13a960:	e92d4010 	push	{r4, lr}
  13a964:	e3a01016 	mov	r1, #22
  13a968:	e59f0008 	ldr	r0, [pc, #8]	; 13a978 <syscall_delete_module+0x18>
  13a96c:	ebfffa4c 	bl	1392a4 <syscall_trace>
  13a970:	e3a00000 	mov	r0, #0
  13a974:	e8bd8010 	pop	{r4, pc}
  13a978:	0014b264 	.word	0x0014b264

0013a97c <syscall_init_module>:
  13a97c:	e92d4010 	push	{r4, lr}
  13a980:	e3a01014 	mov	r1, #20
  13a984:	e59f0008 	ldr	r0, [pc, #8]	; 13a994 <syscall_init_module+0x18>
  13a988:	ebfffa45 	bl	1392a4 <syscall_trace>
  13a98c:	e3a00000 	mov	r0, #0
  13a990:	e8bd8010 	pop	{r4, pc}
  13a994:	0014b250 	.word	0x0014b250

0013a998 <syscall_mprotect>:
  13a998:	e92d4010 	push	{r4, lr}
  13a99c:	e3a01011 	mov	r1, #17
  13a9a0:	e59f0008 	ldr	r0, [pc, #8]	; 13a9b0 <syscall_mprotect+0x18>
  13a9a4:	ebfffa3e 	bl	1392a4 <syscall_trace>
  13a9a8:	e3a00000 	mov	r0, #0
  13a9ac:	e8bd8010 	pop	{r4, pc}
  13a9b0:	0014b228 	.word	0x0014b228

0013a9b4 <syscall_adjtimex>:
  13a9b4:	e92d4010 	push	{r4, lr}
  13a9b8:	e3a01011 	mov	r1, #17
  13a9bc:	e59f0008 	ldr	r0, [pc, #8]	; 13a9cc <syscall_adjtimex+0x18>
  13a9c0:	ebfffa37 	bl	1392a4 <syscall_trace>
  13a9c4:	e3a00000 	mov	r0, #0
  13a9c8:	e8bd8010 	pop	{r4, pc}
  13a9cc:	0014b214 	.word	0x0014b214

0013a9d0 <syscall_uname>:
  13a9d0:	e92d4010 	push	{r4, lr}
  13a9d4:	e3a0100e 	mov	r1, #14
  13a9d8:	e59f0008 	ldr	r0, [pc, #8]	; 13a9e8 <syscall_uname+0x18>
  13a9dc:	ebfffa30 	bl	1392a4 <syscall_trace>
  13a9e0:	e3a00000 	mov	r0, #0
  13a9e4:	e8bd8010 	pop	{r4, pc}
  13a9e8:	0014b204 	.word	0x0014b204

0013a9ec <syscall_setdomainname>:
  13a9ec:	e92d4010 	push	{r4, lr}
  13a9f0:	e3a01016 	mov	r1, #22
  13a9f4:	e59f0008 	ldr	r0, [pc, #8]	; 13aa04 <syscall_setdomainname+0x18>
  13a9f8:	ebfffa29 	bl	1392a4 <syscall_trace>
  13a9fc:	e3a00000 	mov	r0, #0
  13aa00:	e8bd8010 	pop	{r4, pc}
  13aa04:	0014b1ec 	.word	0x0014b1ec

0013aa08 <syscall_clone>:
  13aa08:	e92d4010 	push	{r4, lr}
  13aa0c:	e3a0100e 	mov	r1, #14
  13aa10:	e59f0008 	ldr	r0, [pc, #8]	; 13aa20 <syscall_clone+0x18>
  13aa14:	ebfffa22 	bl	1392a4 <syscall_trace>
  13aa18:	e3a00000 	mov	r0, #0
  13aa1c:	e8bd8010 	pop	{r4, pc}
  13aa20:	0014b1dc 	.word	0x0014b1dc

0013aa24 <syscall_sigreturn>:
  13aa24:	e92d4010 	push	{r4, lr}
  13aa28:	e3a01012 	mov	r1, #18
  13aa2c:	e59f0008 	ldr	r0, [pc, #8]	; 13aa3c <syscall_sigreturn+0x18>
  13aa30:	ebfffa1b 	bl	1392a4 <syscall_trace>
  13aa34:	e3a00000 	mov	r0, #0
  13aa38:	e8bd8010 	pop	{r4, pc}
  13aa3c:	0014b1c8 	.word	0x0014b1c8

0013aa40 <syscall_sysinfo>:
  13aa40:	e92d4010 	push	{r4, lr}
  13aa44:	e3a01010 	mov	r1, #16
  13aa48:	e59f0008 	ldr	r0, [pc, #8]	; 13aa58 <syscall_sysinfo+0x18>
  13aa4c:	ebfffa14 	bl	1392a4 <syscall_trace>
  13aa50:	e3a00000 	mov	r0, #0
  13aa54:	e8bd8010 	pop	{r4, pc}
  13aa58:	0014b1a8 	.word	0x0014b1a8

0013aa5c <syscall_swapoff>:
  13aa5c:	e92d4010 	push	{r4, lr}
  13aa60:	e3a01010 	mov	r1, #16
  13aa64:	e59f0008 	ldr	r0, [pc, #8]	; 13aa74 <syscall_swapoff+0x18>
  13aa68:	ebfffa0d 	bl	1392a4 <syscall_trace>
  13aa6c:	e3a00000 	mov	r0, #0
  13aa70:	e8bd8010 	pop	{r4, pc}
  13aa74:	0014b198 	.word	0x0014b198

0013aa78 <syscall_wait4>:
  13aa78:	e92d4010 	push	{r4, lr}
  13aa7c:	e3a0100e 	mov	r1, #14
  13aa80:	e59f0008 	ldr	r0, [pc, #8]	; 13aa90 <syscall_wait4+0x18>
  13aa84:	ebfffa06 	bl	1392a4 <syscall_trace>
  13aa88:	e3a00000 	mov	r0, #0
  13aa8c:	e8bd8010 	pop	{r4, pc}
  13aa90:	0014b188 	.word	0x0014b188

0013aa94 <syscall_vhangup>:
  13aa94:	e92d4010 	push	{r4, lr}
  13aa98:	e3a01010 	mov	r1, #16
  13aa9c:	e59f0008 	ldr	r0, [pc, #8]	; 13aaac <syscall_vhangup+0x18>
  13aaa0:	ebfff9ff 	bl	1392a4 <syscall_trace>
  13aaa4:	e3a00000 	mov	r0, #0
  13aaa8:	e8bd8010 	pop	{r4, pc}
  13aaac:	0014b178 	.word	0x0014b178

0013aab0 <syscall_fstat>:
  13aab0:	e92d4010 	push	{r4, lr}
  13aab4:	e3a0100e 	mov	r1, #14
  13aab8:	e59f0008 	ldr	r0, [pc, #8]	; 13aac8 <syscall_fstat+0x18>
  13aabc:	ebfff9f8 	bl	1392a4 <syscall_trace>
  13aac0:	e3a00000 	mov	r0, #0
  13aac4:	e8bd8010 	pop	{r4, pc}
  13aac8:	0014b168 	.word	0x0014b168

0013aacc <syscall_getitimer>:
  13aacc:	e92d4010 	push	{r4, lr}
  13aad0:	e3a01012 	mov	r1, #18
  13aad4:	e59f0008 	ldr	r0, [pc, #8]	; 13aae4 <syscall_getitimer+0x18>
  13aad8:	ebfff9f1 	bl	1392a4 <syscall_trace>
  13aadc:	e3a00000 	mov	r0, #0
  13aae0:	e8bd8010 	pop	{r4, pc}
  13aae4:	0014b134 	.word	0x0014b134

0013aae8 <syscall_setitimer>:
  13aae8:	e92d4010 	push	{r4, lr}
  13aaec:	e3a01012 	mov	r1, #18
  13aaf0:	e59f0008 	ldr	r0, [pc, #8]	; 13ab00 <syscall_setitimer+0x18>
  13aaf4:	ebfff9ea 	bl	1392a4 <syscall_trace>
  13aaf8:	e3a00000 	mov	r0, #0
  13aafc:	e8bd8010 	pop	{r4, pc}
  13ab00:	0014b120 	.word	0x0014b120

0013ab04 <syscall_syslog>:
  13ab04:	e92d4010 	push	{r4, lr}
  13ab08:	e3a0100f 	mov	r1, #15
  13ab0c:	e59f0008 	ldr	r0, [pc, #8]	; 13ab1c <syscall_syslog+0x18>
  13ab10:	ebfff9e3 	bl	1392a4 <syscall_trace>
  13ab14:	e3a00000 	mov	r0, #0
  13ab18:	e8bd8010 	pop	{r4, pc}
  13ab1c:	0014b110 	.word	0x0014b110

0013ab20 <syscall_fstatfs>:
  13ab20:	e92d4010 	push	{r4, lr}
  13ab24:	e3a01010 	mov	r1, #16
  13ab28:	e59f0008 	ldr	r0, [pc, #8]	; 13ab38 <syscall_fstatfs+0x18>
  13ab2c:	ebfff9dc 	bl	1392a4 <syscall_trace>
  13ab30:	e3a00000 	mov	r0, #0
  13ab34:	e8bd8010 	pop	{r4, pc}
  13ab38:	0014b100 	.word	0x0014b100

0013ab3c <syscall_statfs>:
  13ab3c:	e92d4010 	push	{r4, lr}
  13ab40:	e3a0100f 	mov	r1, #15
  13ab44:	e59f0008 	ldr	r0, [pc, #8]	; 13ab54 <syscall_statfs+0x18>
  13ab48:	ebfff9d5 	bl	1392a4 <syscall_trace>
  13ab4c:	e3a00000 	mov	r0, #0
  13ab50:	e8bd8010 	pop	{r4, pc}
  13ab54:	0014b0f0 	.word	0x0014b0f0

0013ab58 <syscall_setpriority>:
  13ab58:	e92d4010 	push	{r4, lr}
  13ab5c:	e3a01014 	mov	r1, #20
  13ab60:	e59f0008 	ldr	r0, [pc, #8]	; 13ab70 <syscall_setpriority+0x18>
  13ab64:	ebfff9ce 	bl	1392a4 <syscall_trace>
  13ab68:	e3a00000 	mov	r0, #0
  13ab6c:	e8bd8010 	pop	{r4, pc}
  13ab70:	0014b0dc 	.word	0x0014b0dc

0013ab74 <syscall_getpriority>:
  13ab74:	e92d4010 	push	{r4, lr}
  13ab78:	e3a01014 	mov	r1, #20
  13ab7c:	e59f0008 	ldr	r0, [pc, #8]	; 13ab8c <syscall_getpriority+0x18>
  13ab80:	ebfff9c7 	bl	1392a4 <syscall_trace>
  13ab84:	e3a00000 	mov	r0, #0
  13ab88:	e8bd8010 	pop	{r4, pc}
  13ab8c:	0014b0c8 	.word	0x0014b0c8

0013ab90 <syscall_fchown>:
  13ab90:	e92d4010 	push	{r4, lr}
  13ab94:	e3a0100f 	mov	r1, #15
  13ab98:	e59f0008 	ldr	r0, [pc, #8]	; 13aba8 <syscall_fchown+0x18>
  13ab9c:	ebfff9c0 	bl	1392a4 <syscall_trace>
  13aba0:	e3a00000 	mov	r0, #0
  13aba4:	e8bd8010 	pop	{r4, pc}
  13aba8:	0014b0b8 	.word	0x0014b0b8

0013abac <syscall_fchmod>:
  13abac:	e92d4010 	push	{r4, lr}
  13abb0:	e3a0100f 	mov	r1, #15
  13abb4:	e59f0008 	ldr	r0, [pc, #8]	; 13abc4 <syscall_fchmod+0x18>
  13abb8:	ebfff9b9 	bl	1392a4 <syscall_trace>
  13abbc:	e3a00000 	mov	r0, #0
  13abc0:	e8bd8010 	pop	{r4, pc}
  13abc4:	0014b0a8 	.word	0x0014b0a8

0013abc8 <syscall_ftruncate>:
  13abc8:	e92d4010 	push	{r4, lr}
  13abcc:	e3a01012 	mov	r1, #18
  13abd0:	e59f0008 	ldr	r0, [pc, #8]	; 13abe0 <syscall_ftruncate+0x18>
  13abd4:	ebfff9b2 	bl	1392a4 <syscall_trace>
  13abd8:	e3a00000 	mov	r0, #0
  13abdc:	e8bd8010 	pop	{r4, pc}
  13abe0:	0014b094 	.word	0x0014b094

0013abe4 <syscall_truncate>:
  13abe4:	e92d4010 	push	{r4, lr}
  13abe8:	e3a01011 	mov	r1, #17
  13abec:	e59f0008 	ldr	r0, [pc, #8]	; 13abfc <syscall_truncate+0x18>
  13abf0:	ebfff9ab 	bl	1392a4 <syscall_trace>
  13abf4:	e3a00000 	mov	r0, #0
  13abf8:	e8bd8010 	pop	{r4, pc}
  13abfc:	0014b080 	.word	0x0014b080

0013ac00 <syscall_reboot>:
  13ac00:	e92d4010 	push	{r4, lr}
  13ac04:	e3a0100f 	mov	r1, #15
  13ac08:	e59f0008 	ldr	r0, [pc, #8]	; 13ac18 <syscall_reboot+0x18>
  13ac0c:	ebfff9a4 	bl	1392a4 <syscall_trace>
  13ac10:	e3a00000 	mov	r0, #0
  13ac14:	e8bd8010 	pop	{r4, pc}
  13ac18:	0014b060 	.word	0x0014b060

0013ac1c <syscall_swapon>:
  13ac1c:	e92d4010 	push	{r4, lr}
  13ac20:	e3a0100f 	mov	r1, #15
  13ac24:	e59f0008 	ldr	r0, [pc, #8]	; 13ac34 <syscall_swapon+0x18>
  13ac28:	ebfff99d 	bl	1392a4 <syscall_trace>
  13ac2c:	e3a00000 	mov	r0, #0
  13ac30:	e8bd8010 	pop	{r4, pc}
  13ac34:	0014b050 	.word	0x0014b050

0013ac38 <syscall_uselib>:
  13ac38:	e92d4010 	push	{r4, lr}
  13ac3c:	e3a0100f 	mov	r1, #15
  13ac40:	e59f0008 	ldr	r0, [pc, #8]	; 13ac50 <syscall_uselib+0x18>
  13ac44:	ebfff996 	bl	1392a4 <syscall_trace>
  13ac48:	e3a00000 	mov	r0, #0
  13ac4c:	e8bd8010 	pop	{r4, pc}
  13ac50:	0014b040 	.word	0x0014b040

0013ac54 <syscall_symlink>:
  13ac54:	e92d4010 	push	{r4, lr}
  13ac58:	e3a01010 	mov	r1, #16
  13ac5c:	e59f0008 	ldr	r0, [pc, #8]	; 13ac6c <syscall_symlink+0x18>
  13ac60:	ebfff98f 	bl	1392a4 <syscall_trace>
  13ac64:	e3a00000 	mov	r0, #0
  13ac68:	e8bd8010 	pop	{r4, pc}
  13ac6c:	0014b01c 	.word	0x0014b01c

0013ac70 <syscall_setgroups>:
  13ac70:	e92d4010 	push	{r4, lr}
  13ac74:	e3a01012 	mov	r1, #18
  13ac78:	e59f0008 	ldr	r0, [pc, #8]	; 13ac88 <syscall_setgroups+0x18>
  13ac7c:	ebfff988 	bl	1392a4 <syscall_trace>
  13ac80:	e3a00000 	mov	r0, #0
  13ac84:	e8bd8010 	pop	{r4, pc}
  13ac88:	0014b008 	.word	0x0014b008

0013ac8c <syscall_getgroups>:
  13ac8c:	e92d4010 	push	{r4, lr}
  13ac90:	e3a01012 	mov	r1, #18
  13ac94:	e59f0008 	ldr	r0, [pc, #8]	; 13aca4 <syscall_getgroups+0x18>
  13ac98:	ebfff981 	bl	1392a4 <syscall_trace>
  13ac9c:	e3a00000 	mov	r0, #0
  13aca0:	e8bd8010 	pop	{r4, pc}
  13aca4:	0014aff4 	.word	0x0014aff4

0013aca8 <syscall_settimeofday>:
  13aca8:	e92d4010 	push	{r4, lr}
  13acac:	e3a01015 	mov	r1, #21
  13acb0:	e59f0008 	ldr	r0, [pc, #8]	; 13acc0 <syscall_settimeofday+0x18>
  13acb4:	ebfff97a 	bl	1392a4 <syscall_trace>
  13acb8:	e3a00000 	mov	r0, #0
  13acbc:	e8bd8010 	pop	{r4, pc}
  13acc0:	0014afdc 	.word	0x0014afdc

0013acc4 <syscall_gettimeofday>:
  13acc4:	e92d4010 	push	{r4, lr}
  13acc8:	e3a01015 	mov	r1, #21
  13accc:	e59f0008 	ldr	r0, [pc, #8]	; 13acdc <syscall_gettimeofday+0x18>
  13acd0:	ebfff973 	bl	1392a4 <syscall_trace>
  13acd4:	e3a00000 	mov	r0, #0
  13acd8:	e8bd8010 	pop	{r4, pc}
  13acdc:	0014afc4 	.word	0x0014afc4

0013ace0 <syscall_getrusage>:
  13ace0:	e92d4010 	push	{r4, lr}
  13ace4:	e3a01012 	mov	r1, #18
  13ace8:	e59f0008 	ldr	r0, [pc, #8]	; 13acf8 <syscall_getrusage+0x18>
  13acec:	ebfff96c 	bl	1392a4 <syscall_trace>
  13acf0:	e3a00000 	mov	r0, #0
  13acf4:	e8bd8010 	pop	{r4, pc}
  13acf8:	0014afb0 	.word	0x0014afb0

0013acfc <syscall_sethostname>:
  13acfc:	e92d4010 	push	{r4, lr}
  13ad00:	e3a01014 	mov	r1, #20
  13ad04:	e59f0008 	ldr	r0, [pc, #8]	; 13ad14 <syscall_sethostname+0x18>
  13ad08:	ebfff965 	bl	1392a4 <syscall_trace>
  13ad0c:	e3a00000 	mov	r0, #0
  13ad10:	e8bd8010 	pop	{r4, pc}
  13ad14:	0014af88 	.word	0x0014af88

0013ad18 <syscall_sigpending>:
  13ad18:	e92d4010 	push	{r4, lr}
  13ad1c:	e3a01013 	mov	r1, #19
  13ad20:	e59f0008 	ldr	r0, [pc, #8]	; 13ad30 <syscall_sigpending+0x18>
  13ad24:	ebfff95e 	bl	1392a4 <syscall_trace>
  13ad28:	e3a00000 	mov	r0, #0
  13ad2c:	e8bd8010 	pop	{r4, pc}
  13ad30:	0014af74 	.word	0x0014af74

0013ad34 <syscall_sigsuspend>:
  13ad34:	e92d4010 	push	{r4, lr}
  13ad38:	e3a01013 	mov	r1, #19
  13ad3c:	e59f0008 	ldr	r0, [pc, #8]	; 13ad4c <syscall_sigsuspend+0x18>
  13ad40:	ebfff957 	bl	1392a4 <syscall_trace>
  13ad44:	e3a00000 	mov	r0, #0
  13ad48:	e8bd8010 	pop	{r4, pc}
  13ad4c:	0014af60 	.word	0x0014af60

0013ad50 <syscall_setregid>:
  13ad50:	e92d4010 	push	{r4, lr}
  13ad54:	e3a01011 	mov	r1, #17
  13ad58:	e59f0008 	ldr	r0, [pc, #8]	; 13ad68 <syscall_setregid+0x18>
  13ad5c:	ebfff950 	bl	1392a4 <syscall_trace>
  13ad60:	e3a00000 	mov	r0, #0
  13ad64:	e8bd8010 	pop	{r4, pc}
  13ad68:	0014af4c 	.word	0x0014af4c

0013ad6c <syscall_setreuid>:
  13ad6c:	e92d4010 	push	{r4, lr}
  13ad70:	e3a01011 	mov	r1, #17
  13ad74:	e59f0008 	ldr	r0, [pc, #8]	; 13ad84 <syscall_setreuid+0x18>
  13ad78:	ebfff949 	bl	1392a4 <syscall_trace>
  13ad7c:	e3a00000 	mov	r0, #0
  13ad80:	e8bd8010 	pop	{r4, pc}
  13ad84:	0014af38 	.word	0x0014af38

0013ad88 <syscall_getpgrp>:
  13ad88:	e92d4010 	push	{r4, lr}
  13ad8c:	e3a01010 	mov	r1, #16
  13ad90:	e59f0008 	ldr	r0, [pc, #8]	; 13ada0 <syscall_getpgrp+0x18>
  13ad94:	ebfff942 	bl	1392a4 <syscall_trace>
  13ad98:	e3a00000 	mov	r0, #0
  13ad9c:	e8bd8010 	pop	{r4, pc}
  13ada0:	0014af04 	.word	0x0014af04

0013ada4 <syscall_getppid>:
  13ada4:	e92d4010 	push	{r4, lr}
  13ada8:	e3a01010 	mov	r1, #16
  13adac:	e59f0008 	ldr	r0, [pc, #8]	; 13adbc <syscall_getppid+0x18>
  13adb0:	ebfff93b 	bl	1392a4 <syscall_trace>
  13adb4:	e3a00000 	mov	r0, #0
  13adb8:	e8bd8010 	pop	{r4, pc}
  13adbc:	0014aef4 	.word	0x0014aef4

0013adc0 <syscall_ustat>:
  13adc0:	e92d4010 	push	{r4, lr}
  13adc4:	e3a0100e 	mov	r1, #14
  13adc8:	e59f0008 	ldr	r0, [pc, #8]	; 13add8 <syscall_ustat+0x18>
  13adcc:	ebfff934 	bl	1392a4 <syscall_trace>
  13add0:	e3a00000 	mov	r0, #0
  13add4:	e8bd8010 	pop	{r4, pc}
  13add8:	0014aed4 	.word	0x0014aed4

0013addc <syscall_chroot>:
  13addc:	e92d4010 	push	{r4, lr}
  13ade0:	e3a0100f 	mov	r1, #15
  13ade4:	e59f0008 	ldr	r0, [pc, #8]	; 13adf4 <syscall_chroot+0x18>
  13ade8:	ebfff92d 	bl	1392a4 <syscall_trace>
  13adec:	e3a00000 	mov	r0, #0
  13adf0:	e8bd8010 	pop	{r4, pc}
  13adf4:	0014aec4 	.word	0x0014aec4

0013adf8 <syscall_umask>:
  13adf8:	e92d4010 	push	{r4, lr}
  13adfc:	e3a0100e 	mov	r1, #14
  13ae00:	e59f0008 	ldr	r0, [pc, #8]	; 13ae10 <syscall_umask+0x18>
  13ae04:	ebfff926 	bl	1392a4 <syscall_trace>
  13ae08:	e3a00000 	mov	r0, #0
  13ae0c:	e8bd8010 	pop	{r4, pc}
  13ae10:	0014aeb4 	.word	0x0014aeb4

0013ae14 <syscall_setpgid>:
  13ae14:	e92d4010 	push	{r4, lr}
  13ae18:	e3a01010 	mov	r1, #16
  13ae1c:	e59f0008 	ldr	r0, [pc, #8]	; 13ae2c <syscall_setpgid+0x18>
  13ae20:	ebfff91f 	bl	1392a4 <syscall_trace>
  13ae24:	e3a00000 	mov	r0, #0
  13ae28:	e8bd8010 	pop	{r4, pc}
  13ae2c:	0014aea4 	.word	0x0014aea4

0013ae30 <syscall_umount2>:
  13ae30:	e92d4010 	push	{r4, lr}
  13ae34:	e3a01010 	mov	r1, #16
  13ae38:	e59f0008 	ldr	r0, [pc, #8]	; 13ae48 <syscall_umount2+0x18>
  13ae3c:	ebfff918 	bl	1392a4 <syscall_trace>
  13ae40:	e3a00000 	mov	r0, #0
  13ae44:	e8bd8010 	pop	{r4, pc}
  13ae48:	0014ae74 	.word	0x0014ae74

0013ae4c <syscall_acct>:
  13ae4c:	e92d4010 	push	{r4, lr}
  13ae50:	e3a0100d 	mov	r1, #13
  13ae54:	e59f0008 	ldr	r0, [pc, #8]	; 13ae64 <syscall_acct+0x18>
  13ae58:	ebfff911 	bl	1392a4 <syscall_trace>
  13ae5c:	e3a00000 	mov	r0, #0
  13ae60:	e8bd8010 	pop	{r4, pc}
  13ae64:	0014ae64 	.word	0x0014ae64

0013ae68 <syscall_getegid>:
  13ae68:	e92d4010 	push	{r4, lr}
  13ae6c:	e3a01010 	mov	r1, #16
  13ae70:	e59f0008 	ldr	r0, [pc, #8]	; 13ae80 <syscall_getegid+0x18>
  13ae74:	ebfff90a 	bl	1392a4 <syscall_trace>
  13ae78:	e3a00000 	mov	r0, #0
  13ae7c:	e8bd8010 	pop	{r4, pc}
  13ae80:	0014ae54 	.word	0x0014ae54

0013ae84 <syscall_geteuid>:
  13ae84:	e92d4010 	push	{r4, lr}
  13ae88:	e3a01010 	mov	r1, #16
  13ae8c:	e59f0008 	ldr	r0, [pc, #8]	; 13ae9c <syscall_geteuid+0x18>
  13ae90:	ebfff903 	bl	1392a4 <syscall_trace>
  13ae94:	e3a00000 	mov	r0, #0
  13ae98:	e8bd8010 	pop	{r4, pc}
  13ae9c:	0014ae44 	.word	0x0014ae44

0013aea0 <syscall_getgid>:
  13aea0:	e92d4010 	push	{r4, lr}
  13aea4:	e3a0100f 	mov	r1, #15
  13aea8:	e59f0008 	ldr	r0, [pc, #8]	; 13aeb8 <syscall_getgid+0x18>
  13aeac:	ebfff8fc 	bl	1392a4 <syscall_trace>
  13aeb0:	e3a00000 	mov	r0, #0
  13aeb4:	e8bd8010 	pop	{r4, pc}
  13aeb8:	0014ae34 	.word	0x0014ae34

0013aebc <syscall_setgid>:
  13aebc:	e92d4010 	push	{r4, lr}
  13aec0:	e3a0100f 	mov	r1, #15
  13aec4:	e59f0008 	ldr	r0, [pc, #8]	; 13aed4 <syscall_setgid+0x18>
  13aec8:	ebfff8f5 	bl	1392a4 <syscall_trace>
  13aecc:	e3a00000 	mov	r0, #0
  13aed0:	e8bd8010 	pop	{r4, pc}
  13aed4:	0014ae24 	.word	0x0014ae24

0013aed8 <syscall_times>:
  13aed8:	e92d4010 	push	{r4, lr}
  13aedc:	e3a0100e 	mov	r1, #14
  13aee0:	e59f0008 	ldr	r0, [pc, #8]	; 13aef0 <syscall_times+0x18>
  13aee4:	ebfff8ee 	bl	1392a4 <syscall_trace>
  13aee8:	e3a00000 	mov	r0, #0
  13aeec:	e8bd8010 	pop	{r4, pc}
  13aef0:	0014ae08 	.word	0x0014ae08

0013aef4 <syscall_sync>:
  13aef4:	e92d4010 	push	{r4, lr}
  13aef8:	e3a0100d 	mov	r1, #13
  13aefc:	e59f0008 	ldr	r0, [pc, #8]	; 13af0c <syscall_sync+0x18>
  13af00:	ebfff8e7 	bl	1392a4 <syscall_trace>
  13af04:	e3a00000 	mov	r0, #0
  13af08:	e8bd8010 	pop	{r4, pc}
  13af0c:	0014ad9c 	.word	0x0014ad9c

0013af10 <syscall_nice>:
  13af10:	e92d4010 	push	{r4, lr}
  13af14:	e3a0100d 	mov	r1, #13
  13af18:	e59f0008 	ldr	r0, [pc, #8]	; 13af28 <syscall_nice+0x18>
  13af1c:	ebfff8e0 	bl	1392a4 <syscall_trace>
  13af20:	e3a00000 	mov	r0, #0
  13af24:	e8bd8010 	pop	{r4, pc}
  13af28:	0014ad8c 	.word	0x0014ad8c

0013af2c <syscall_pause>:
  13af2c:	e92d4010 	push	{r4, lr}
  13af30:	e3a0100e 	mov	r1, #14
  13af34:	e59f0008 	ldr	r0, [pc, #8]	; 13af44 <syscall_pause+0x18>
  13af38:	ebfff8d9 	bl	1392a4 <syscall_trace>
  13af3c:	e3a00000 	mov	r0, #0
  13af40:	e8bd8010 	pop	{r4, pc}
  13af44:	0014ad6c 	.word	0x0014ad6c

0013af48 <syscall_ptrace>:
  13af48:	e92d4010 	push	{r4, lr}
  13af4c:	e3a0100f 	mov	r1, #15
  13af50:	e59f0008 	ldr	r0, [pc, #8]	; 13af60 <syscall_ptrace+0x18>
  13af54:	ebfff8d2 	bl	1392a4 <syscall_trace>
  13af58:	e3a00000 	mov	r0, #0
  13af5c:	e8bd8010 	pop	{r4, pc}
  13af60:	0014ad5c 	.word	0x0014ad5c

0013af64 <syscall_getuid>:
  13af64:	e92d4010 	push	{r4, lr}
  13af68:	e3a0100f 	mov	r1, #15
  13af6c:	e59f0008 	ldr	r0, [pc, #8]	; 13af7c <syscall_getuid+0x18>
  13af70:	ebfff8cb 	bl	1392a4 <syscall_trace>
  13af74:	e3a00000 	mov	r0, #0
  13af78:	e8bd8010 	pop	{r4, pc}
  13af7c:	0014ad4c 	.word	0x0014ad4c

0013af80 <syscall_setuid>:
  13af80:	e92d4010 	push	{r4, lr}
  13af84:	e3a0100f 	mov	r1, #15
  13af88:	e59f0008 	ldr	r0, [pc, #8]	; 13af98 <syscall_setuid+0x18>
  13af8c:	ebfff8c4 	bl	1392a4 <syscall_trace>
  13af90:	e3a00000 	mov	r0, #0
  13af94:	e8bd8010 	pop	{r4, pc}
  13af98:	0014ad3c 	.word	0x0014ad3c

0013af9c <syscall_mount>:
  13af9c:	e92d4010 	push	{r4, lr}
  13afa0:	e3a0100e 	mov	r1, #14
  13afa4:	e59f0008 	ldr	r0, [pc, #8]	; 13afb4 <syscall_mount+0x18>
  13afa8:	ebfff8bd 	bl	1392a4 <syscall_trace>
  13afac:	e3a00000 	mov	r0, #0
  13afb0:	e8bd8010 	pop	{r4, pc}
  13afb4:	0014ad2c 	.word	0x0014ad2c

0013afb8 <syscall_lchown>:
  13afb8:	e92d4010 	push	{r4, lr}
  13afbc:	e3a0100f 	mov	r1, #15
  13afc0:	e59f0008 	ldr	r0, [pc, #8]	; 13afd0 <syscall_lchown+0x18>
  13afc4:	ebfff8b6 	bl	1392a4 <syscall_trace>
  13afc8:	e3a00000 	mov	r0, #0
  13afcc:	e8bd8010 	pop	{r4, pc}
  13afd0:	0014acfc 	.word	0x0014acfc

0013afd4 <syscall_chmod>:
  13afd4:	e92d4010 	push	{r4, lr}
  13afd8:	e3a0100e 	mov	r1, #14
  13afdc:	e59f0008 	ldr	r0, [pc, #8]	; 13afec <syscall_chmod+0x18>
  13afe0:	ebfff8af 	bl	1392a4 <syscall_trace>
  13afe4:	e3a00000 	mov	r0, #0
  13afe8:	e8bd8010 	pop	{r4, pc}
  13afec:	0014acec 	.word	0x0014acec

0013aff0 <syscall_mknod>:
  13aff0:	e92d4010 	push	{r4, lr}
  13aff4:	e3a0100e 	mov	r1, #14
  13aff8:	e59f0008 	ldr	r0, [pc, #8]	; 13b008 <syscall_mknod+0x18>
  13affc:	ebfff8a8 	bl	1392a4 <syscall_trace>
  13b000:	e3a00000 	mov	r0, #0
  13b004:	e8bd8010 	pop	{r4, pc}
  13b008:	0014acdc 	.word	0x0014acdc

0013b00c <syscall_link>:
  13b00c:	e92d4010 	push	{r4, lr}
  13b010:	e3a0100d 	mov	r1, #13
  13b014:	e59f0008 	ldr	r0, [pc, #8]	; 13b024 <syscall_link+0x18>
  13b018:	ebfff8a1 	bl	1392a4 <syscall_trace>
  13b01c:	e3a00000 	mov	r0, #0
  13b020:	e8bd8010 	pop	{r4, pc}
  13b024:	0014ac9c 	.word	0x0014ac9c

0013b028 <syscall_creat>:
  13b028:	e92d4010 	push	{r4, lr}
  13b02c:	e3a0100e 	mov	r1, #14
  13b030:	e59f0008 	ldr	r0, [pc, #8]	; 13b040 <syscall_creat+0x18>
  13b034:	ebfff89a 	bl	1392a4 <syscall_trace>
  13b038:	e3a00000 	mov	r0, #0
  13b03c:	e8bd8010 	pop	{r4, pc}
  13b040:	0014ac8c 	.word	0x0014ac8c

0013b044 <syscall_restart_syscall>:
  13b044:	e92d4010 	push	{r4, lr}
  13b048:	e3a01018 	mov	r1, #24
  13b04c:	e59f0008 	ldr	r0, [pc, #8]	; 13b05c <syscall_restart_syscall+0x18>
  13b050:	ebfff893 	bl	1392a4 <syscall_trace>
  13b054:	e3a00000 	mov	r0, #0
  13b058:	e8bd8010 	pop	{r4, pc}
  13b05c:	0014ac14 	.word	0x0014ac14

0013b060 <syscall_debug>:
  13b060:	e92d4070 	push	{r4, r5, r6, lr}
  13b064:	e1a04000 	mov	r4, r0
  13b068:	e1a05001 	mov	r5, r1
  13b06c:	e3a0201d 	mov	r2, #29
  13b070:	e59f1018 	ldr	r1, [pc, #24]	; 13b090 <syscall_debug+0x30>
  13b074:	e3a000ff 	mov	r0, #255	; 0xff
  13b078:	eb0004f9 	bl	13c464 <syscall>
  13b07c:	e1a02005 	mov	r2, r5
  13b080:	e1a01004 	mov	r1, r4
  13b084:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b088:	e3a000ff 	mov	r0, #255	; 0xff
  13b08c:	ea0004f4 	b	13c464 <syscall>
  13b090:	0014c6d4 	.word	0x0014c6d4

0013b094 <syscall_shmdt>:
  13b094:	e92d4010 	push	{r4, lr}
  13b098:	e1a04000 	mov	r4, r0
  13b09c:	e3a0100e 	mov	r1, #14
  13b0a0:	e59f0010 	ldr	r0, [pc, #16]	; 13b0b8 <syscall_shmdt+0x24>
  13b0a4:	ebffffed 	bl	13b060 <syscall_debug>
  13b0a8:	e1a01004 	mov	r1, r4
  13b0ac:	e8bd4010 	pop	{r4, lr}
  13b0b0:	e59f0004 	ldr	r0, [pc, #4]	; 13b0bc <syscall_shmdt+0x28>
  13b0b4:	ea0004ea 	b	13c464 <syscall>
  13b0b8:	0014bf6c 	.word	0x0014bf6c
  13b0bc:	00000132 	.word	0x00000132

0013b0c0 <syscall_set_tid_address>:
  13b0c0:	e92d4010 	push	{r4, lr}
  13b0c4:	e1a04000 	mov	r4, r0
  13b0c8:	e3a01018 	mov	r1, #24
  13b0cc:	e59f0010 	ldr	r0, [pc, #16]	; 13b0e4 <syscall_set_tid_address+0x24>
  13b0d0:	ebffffe2 	bl	13b060 <syscall_debug>
  13b0d4:	e1a01004 	mov	r1, r4
  13b0d8:	e8bd4010 	pop	{r4, lr}
  13b0dc:	e3a0007c 	mov	r0, #124	; 0x7c
  13b0e0:	ea0004df 	b	13c464 <syscall>
  13b0e4:	0014bb8c 	.word	0x0014bb8c

0013b0e8 <syscall_exit_group>:
  13b0e8:	e92d4010 	push	{r4, lr}
  13b0ec:	e1a04000 	mov	r4, r0
  13b0f0:	e3a01013 	mov	r1, #19
  13b0f4:	e59f0010 	ldr	r0, [pc, #16]	; 13b10c <syscall_exit_group+0x24>
  13b0f8:	ebffffd8 	bl	13b060 <syscall_debug>
  13b0fc:	e1a01004 	mov	r1, r4
  13b100:	e8bd4010 	pop	{r4, lr}
  13b104:	e3a00062 	mov	r0, #98	; 0x62
  13b108:	ea0004d5 	b	13c464 <syscall>
  13b10c:	0014bb04 	.word	0x0014bb04

0013b110 <syscall_sched_get_priority_min>:
  13b110:	e92d4010 	push	{r4, lr}
  13b114:	e1a04000 	mov	r4, r0
  13b118:	e3a0101f 	mov	r1, #31
  13b11c:	e59f0010 	ldr	r0, [pc, #16]	; 13b134 <syscall_sched_get_priority_min+0x24>
  13b120:	ebffffce 	bl	13b060 <syscall_debug>
  13b124:	e1a01004 	mov	r1, r4
  13b128:	e8bd4010 	pop	{r4, lr}
  13b12c:	e3a00097 	mov	r0, #151	; 0x97
  13b130:	ea0004cb 	b	13c464 <syscall>
  13b134:	0014b49c 	.word	0x0014b49c

0013b138 <syscall_sched_get_priority_max>:
  13b138:	e92d4010 	push	{r4, lr}
  13b13c:	e1a04000 	mov	r4, r0
  13b140:	e3a0101f 	mov	r1, #31
  13b144:	e59f0010 	ldr	r0, [pc, #16]	; 13b15c <syscall_sched_get_priority_max+0x24>
  13b148:	ebffffc4 	bl	13b060 <syscall_debug>
  13b14c:	e1a01004 	mov	r1, r4
  13b150:	e8bd4010 	pop	{r4, lr}
  13b154:	e3a00096 	mov	r0, #150	; 0x96
  13b158:	ea0004c1 	b	13c464 <syscall>
  13b15c:	0014b47c 	.word	0x0014b47c

0013b160 <syscall_fsync>:
  13b160:	e92d4010 	push	{r4, lr}
  13b164:	e1a04000 	mov	r4, r0
  13b168:	e3a0100e 	mov	r1, #14
  13b16c:	e59f0010 	ldr	r0, [pc, #16]	; 13b184 <syscall_fsync+0x24>
  13b170:	ebffffba 	bl	13b060 <syscall_debug>
  13b174:	e1a01004 	mov	r1, r4
  13b178:	e8bd4010 	pop	{r4, lr}
  13b17c:	e3a0009b 	mov	r0, #155	; 0x9b
  13b180:	ea0004b7 	b	13c464 <syscall>
  13b184:	0014b1b8 	.word	0x0014b1b8

0013b188 <syscall_brk>:
  13b188:	e92d4010 	push	{r4, lr}
  13b18c:	e1a04000 	mov	r4, r0
  13b190:	e3a0100c 	mov	r1, #12
  13b194:	e59f0010 	ldr	r0, [pc, #16]	; 13b1ac <syscall_brk+0x24>
  13b198:	ebffffb0 	bl	13b060 <syscall_debug>
  13b19c:	e1a01004 	mov	r1, r4
  13b1a0:	e8bd4010 	pop	{r4, lr}
  13b1a4:	e3a00034 	mov	r0, #52	; 0x34
  13b1a8:	ea0004ad 	b	13c464 <syscall>
  13b1ac:	0014ae18 	.word	0x0014ae18

0013b1b0 <syscall_pipe>:
  13b1b0:	e92d4010 	push	{r4, lr}
  13b1b4:	e1a04000 	mov	r4, r0
  13b1b8:	e3a0100d 	mov	r1, #13
  13b1bc:	e59f0010 	ldr	r0, [pc, #16]	; 13b1d4 <syscall_pipe+0x24>
  13b1c0:	ebffffa6 	bl	13b060 <syscall_debug>
  13b1c4:	e1a01004 	mov	r1, r4
  13b1c8:	e8bd4010 	pop	{r4, lr}
  13b1cc:	e3a0007e 	mov	r0, #126	; 0x7e
  13b1d0:	ea0004a3 	b	13c464 <syscall>
  13b1d4:	0014adf8 	.word	0x0014adf8

0013b1d8 <syscall_dup>:
  13b1d8:	e92d4010 	push	{r4, lr}
  13b1dc:	e1a04000 	mov	r4, r0
  13b1e0:	e3a0100c 	mov	r1, #12
  13b1e4:	e59f0010 	ldr	r0, [pc, #16]	; 13b1fc <syscall_dup+0x24>
  13b1e8:	ebffff9c 	bl	13b060 <syscall_debug>
  13b1ec:	e1a01004 	mov	r1, r4
  13b1f0:	e8bd4010 	pop	{r4, lr}
  13b1f4:	e3a00085 	mov	r0, #133	; 0x85
  13b1f8:	ea000499 	b	13c464 <syscall>
  13b1fc:	0014adec 	.word	0x0014adec

0013b200 <syscall_rmdir>:
  13b200:	e92d4010 	push	{r4, lr}
  13b204:	e1a04000 	mov	r4, r0
  13b208:	e3a0100e 	mov	r1, #14
  13b20c:	e59f0010 	ldr	r0, [pc, #16]	; 13b224 <syscall_rmdir+0x24>
  13b210:	ebffff92 	bl	13b060 <syscall_debug>
  13b214:	e1a01004 	mov	r1, r4
  13b218:	e8bd4010 	pop	{r4, lr}
  13b21c:	e3a00078 	mov	r0, #120	; 0x78
  13b220:	ea00048f 	b	13c464 <syscall>
  13b224:	0014addc 	.word	0x0014addc

0013b228 <syscall_chdir>:
  13b228:	e92d4010 	push	{r4, lr}
  13b22c:	e1a04000 	mov	r4, r0
  13b230:	e3a0100e 	mov	r1, #14
  13b234:	e59f0010 	ldr	r0, [pc, #16]	; 13b24c <syscall_chdir+0x24>
  13b238:	ebffff88 	bl	13b060 <syscall_debug>
  13b23c:	e1a01004 	mov	r1, r4
  13b240:	e8bd4010 	pop	{r4, lr}
  13b244:	e3a00075 	mov	r0, #117	; 0x75
  13b248:	ea000485 	b	13c464 <syscall>
  13b24c:	0014accc 	.word	0x0014accc

0013b250 <syscall_unlink>:
  13b250:	e92d4010 	push	{r4, lr}
  13b254:	e1a04000 	mov	r4, r0
  13b258:	e3a0100f 	mov	r1, #15
  13b25c:	e59f0010 	ldr	r0, [pc, #16]	; 13b274 <syscall_unlink+0x24>
  13b260:	ebffff7e 	bl	13b060 <syscall_debug>
  13b264:	e1a01004 	mov	r1, r4
  13b268:	e8bd4010 	pop	{r4, lr}
  13b26c:	e3a00076 	mov	r0, #118	; 0x76
  13b270:	ea00047b 	b	13c464 <syscall>
  13b274:	0014acac 	.word	0x0014acac

0013b278 <syscall_close>:
  13b278:	e92d4010 	push	{r4, lr}
  13b27c:	e1a04000 	mov	r4, r0
  13b280:	e3a0100e 	mov	r1, #14
  13b284:	e59f0010 	ldr	r0, [pc, #16]	; 13b29c <syscall_close+0x24>
  13b288:	ebffff74 	bl	13b060 <syscall_debug>
  13b28c:	e1a01004 	mov	r1, r4
  13b290:	e8bd4010 	pop	{r4, lr}
  13b294:	e3a00006 	mov	r0, #6
  13b298:	ea000471 	b	13c464 <syscall>
  13b29c:	0014ac7c 	.word	0x0014ac7c

0013b2a0 <syscall_exit>:
  13b2a0:	e92d4010 	push	{r4, lr}
  13b2a4:	e1a04000 	mov	r4, r0
  13b2a8:	e3a0100d 	mov	r1, #13
  13b2ac:	e59f0010 	ldr	r0, [pc, #16]	; 13b2c4 <syscall_exit+0x24>
  13b2b0:	ebffff6a 	bl	13b060 <syscall_debug>
  13b2b4:	e1a01004 	mov	r1, r4
  13b2b8:	e8bd4010 	pop	{r4, lr}
  13b2bc:	e3a00001 	mov	r0, #1
  13b2c0:	ea000467 	b	13c464 <syscall>
  13b2c4:	0014ac2c 	.word	0x0014ac2c

0013b2c8 <syscall_listen>:
  13b2c8:	e92d4070 	push	{r4, r5, r6, lr}
  13b2cc:	e1a04000 	mov	r4, r0
  13b2d0:	e1a05001 	mov	r5, r1
  13b2d4:	e59f0018 	ldr	r0, [pc, #24]	; 13b2f4 <syscall_listen+0x2c>
  13b2d8:	e3a0100f 	mov	r1, #15
  13b2dc:	ebffff5f 	bl	13b060 <syscall_debug>
  13b2e0:	e1a02005 	mov	r2, r5
  13b2e4:	e1a01004 	mov	r1, r4
  13b2e8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b2ec:	e3a0004d 	mov	r0, #77	; 0x4d
  13b2f0:	ea00045b 	b	13c464 <syscall>
  13b2f4:	0014bdf0 	.word	0x0014bdf0

0013b2f8 <syscall_clock_getres>:
  13b2f8:	e92d4070 	push	{r4, r5, r6, lr}
  13b2fc:	e1a04000 	mov	r4, r0
  13b300:	e1a05001 	mov	r5, r1
  13b304:	e59f0018 	ldr	r0, [pc, #24]	; 13b324 <syscall_clock_getres+0x2c>
  13b308:	e3a01015 	mov	r1, #21
  13b30c:	ebffff53 	bl	13b060 <syscall_debug>
  13b310:	e1a02005 	mov	r2, r5
  13b314:	e1a01004 	mov	r1, r4
  13b318:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b31c:	e3a00081 	mov	r0, #129	; 0x81
  13b320:	ea00044f 	b	13c464 <syscall>
  13b324:	0014bc50 	.word	0x0014bc50

0013b328 <syscall_clock_gettime>:
  13b328:	e92d4070 	push	{r4, r5, r6, lr}
  13b32c:	e1a04000 	mov	r4, r0
  13b330:	e1a05001 	mov	r5, r1
  13b334:	e59f0018 	ldr	r0, [pc, #24]	; 13b354 <syscall_clock_gettime+0x2c>
  13b338:	e3a01016 	mov	r1, #22
  13b33c:	ebffff47 	bl	13b060 <syscall_debug>
  13b340:	e1a02005 	mov	r2, r5
  13b344:	e1a01004 	mov	r1, r4
  13b348:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b34c:	e3a00080 	mov	r0, #128	; 0x80
  13b350:	ea000443 	b	13c464 <syscall>
  13b354:	0014bc38 	.word	0x0014bc38

0013b358 <syscall_clock_settime>:
  13b358:	e92d4070 	push	{r4, r5, r6, lr}
  13b35c:	e1a04000 	mov	r4, r0
  13b360:	e1a05001 	mov	r5, r1
  13b364:	e59f0018 	ldr	r0, [pc, #24]	; 13b384 <syscall_clock_settime+0x2c>
  13b368:	e3a01016 	mov	r1, #22
  13b36c:	ebffff3b 	bl	13b060 <syscall_debug>
  13b370:	e1a02005 	mov	r2, r5
  13b374:	e1a01004 	mov	r1, r4
  13b378:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b37c:	e3a0007f 	mov	r0, #127	; 0x7f
  13b380:	ea000437 	b	13c464 <syscall>
  13b384:	0014bc20 	.word	0x0014bc20

0013b388 <syscall_tkill>:
  13b388:	e92d4070 	push	{r4, r5, r6, lr}
  13b38c:	e1a04000 	mov	r4, r0
  13b390:	e1a05001 	mov	r5, r1
  13b394:	e59f0018 	ldr	r0, [pc, #24]	; 13b3b4 <syscall_tkill+0x2c>
  13b398:	e3a0100e 	mov	r1, #14
  13b39c:	ebffff2f 	bl	13b060 <syscall_debug>
  13b3a0:	e1a02005 	mov	r2, r5
  13b3a4:	e1a01004 	mov	r1, r4
  13b3a8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b3ac:	e3a00069 	mov	r0, #105	; 0x69
  13b3b0:	ea00042b 	b	13c464 <syscall>
  13b3b4:	0014ba30 	.word	0x0014ba30

0013b3b8 <syscall_fstat64>:
  13b3b8:	e92d4070 	push	{r4, r5, r6, lr}
  13b3bc:	e1a04000 	mov	r4, r0
  13b3c0:	e1a05001 	mov	r5, r1
  13b3c4:	e59f0018 	ldr	r0, [pc, #24]	; 13b3e4 <syscall_fstat64+0x2c>
  13b3c8:	e3a01010 	mov	r1, #16
  13b3cc:	ebffff23 	bl	13b060 <syscall_debug>
  13b3d0:	e1a02005 	mov	r2, r5
  13b3d4:	e1a01004 	mov	r1, r4
  13b3d8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b3dc:	e3a00008 	mov	r0, #8
  13b3e0:	ea00041f 	b	13c464 <syscall>
  13b3e4:	0014b734 	.word	0x0014b734

0013b3e8 <syscall_lstat64>:
  13b3e8:	e92d4070 	push	{r4, r5, r6, lr}
  13b3ec:	e1a04000 	mov	r4, r0
  13b3f0:	e1a05001 	mov	r5, r1
  13b3f4:	e59f0018 	ldr	r0, [pc, #24]	; 13b414 <syscall_lstat64+0x2c>
  13b3f8:	e3a01010 	mov	r1, #16
  13b3fc:	ebffff17 	bl	13b060 <syscall_debug>
  13b400:	e1a02005 	mov	r2, r5
  13b404:	e1a01004 	mov	r1, r4
  13b408:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b40c:	e3a00043 	mov	r0, #67	; 0x43
  13b410:	ea000413 	b	13c464 <syscall>
  13b414:	0014b724 	.word	0x0014b724

0013b418 <syscall_stat64>:
  13b418:	e92d4070 	push	{r4, r5, r6, lr}
  13b41c:	e1a04000 	mov	r4, r0
  13b420:	e1a05001 	mov	r5, r1
  13b424:	e59f0018 	ldr	r0, [pc, #24]	; 13b444 <syscall_stat64+0x2c>
  13b428:	e3a0100f 	mov	r1, #15
  13b42c:	ebffff0b 	bl	13b060 <syscall_debug>
  13b430:	e1a02005 	mov	r2, r5
  13b434:	e1a01004 	mov	r1, r4
  13b438:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b43c:	e3a00043 	mov	r0, #67	; 0x43
  13b440:	ea000407 	b	13c464 <syscall>
  13b444:	0014b714 	.word	0x0014b714

0013b448 <syscall_ugetrlimit>:
  13b448:	e92d4070 	push	{r4, r5, r6, lr}
  13b44c:	e1a04000 	mov	r4, r0
  13b450:	e1a05001 	mov	r5, r1
  13b454:	e59f0018 	ldr	r0, [pc, #24]	; 13b474 <syscall_ugetrlimit+0x2c>
  13b458:	e3a01013 	mov	r1, #19
  13b45c:	ebfffeff 	bl	13b060 <syscall_debug>
  13b460:	e1a02005 	mov	r2, r5
  13b464:	e1a01004 	mov	r1, r4
  13b468:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b46c:	e3a0008d 	mov	r0, #141	; 0x8d
  13b470:	ea0003fb 	b	13c464 <syscall>
  13b474:	0014b6c8 	.word	0x0014b6c8

0013b478 <syscall_getcwd>:
  13b478:	e92d4070 	push	{r4, r5, r6, lr}
  13b47c:	e1a04000 	mov	r4, r0
  13b480:	e1a05001 	mov	r5, r1
  13b484:	e59f0018 	ldr	r0, [pc, #24]	; 13b4a4 <syscall_getcwd+0x2c>
  13b488:	e3a0100f 	mov	r1, #15
  13b48c:	ebfffef3 	bl	13b060 <syscall_debug>
  13b490:	e1a02005 	mov	r2, r5
  13b494:	e1a01004 	mov	r1, r4
  13b498:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b49c:	e3a00074 	mov	r0, #116	; 0x74
  13b4a0:	ea0003ef 	b	13c464 <syscall>
  13b4a4:	0014b660 	.word	0x0014b660

0013b4a8 <syscall_nanosleep>:
  13b4a8:	e92d4070 	push	{r4, r5, r6, lr}
  13b4ac:	e1a04000 	mov	r4, r0
  13b4b0:	e1a05001 	mov	r5, r1
  13b4b4:	e59f0018 	ldr	r0, [pc, #24]	; 13b4d4 <syscall_nanosleep+0x2c>
  13b4b8:	e3a01012 	mov	r1, #18
  13b4bc:	ebfffee7 	bl	13b060 <syscall_debug>
  13b4c0:	e1a02005 	mov	r2, r5
  13b4c4:	e1a01004 	mov	r1, r4
  13b4c8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b4cc:	e3a0000a 	mov	r0, #10
  13b4d0:	ea0003e3 	b	13c464 <syscall>
  13b4d4:	0014b4dc 	.word	0x0014b4dc

0013b4d8 <syscall_sched_getparam>:
  13b4d8:	e92d4070 	push	{r4, r5, r6, lr}
  13b4dc:	e1a04000 	mov	r4, r0
  13b4e0:	e1a05001 	mov	r5, r1
  13b4e4:	e59f0018 	ldr	r0, [pc, #24]	; 13b504 <syscall_sched_getparam+0x2c>
  13b4e8:	e3a01017 	mov	r1, #23
  13b4ec:	ebfffedb 	bl	13b060 <syscall_debug>
  13b4f0:	e1a02005 	mov	r2, r5
  13b4f4:	e1a01004 	mov	r1, r4
  13b4f8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b4fc:	e3a00095 	mov	r0, #149	; 0x95
  13b500:	ea0003d7 	b	13c464 <syscall>
  13b504:	0014b418 	.word	0x0014b418

0013b508 <syscall_sched_setparam>:
  13b508:	e92d4070 	push	{r4, r5, r6, lr}
  13b50c:	e1a04000 	mov	r4, r0
  13b510:	e1a05001 	mov	r5, r1
  13b514:	e59f0018 	ldr	r0, [pc, #24]	; 13b534 <syscall_sched_setparam+0x2c>
  13b518:	e3a01017 	mov	r1, #23
  13b51c:	ebfffecf 	bl	13b060 <syscall_debug>
  13b520:	e1a02005 	mov	r2, r5
  13b524:	e1a01004 	mov	r1, r4
  13b528:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b52c:	e3a00094 	mov	r0, #148	; 0x94
  13b530:	ea0003cb 	b	13c464 <syscall>
  13b534:	0014b400 	.word	0x0014b400

0013b538 <syscall_lstat>:
  13b538:	e92d4070 	push	{r4, r5, r6, lr}
  13b53c:	e1a04000 	mov	r4, r0
  13b540:	e1a05001 	mov	r5, r1
  13b544:	e59f0018 	ldr	r0, [pc, #24]	; 13b564 <syscall_lstat+0x2c>
  13b548:	e3a0100e 	mov	r1, #14
  13b54c:	ebfffec3 	bl	13b060 <syscall_debug>
  13b550:	e1a02005 	mov	r2, r5
  13b554:	e1a01004 	mov	r1, r4
  13b558:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b55c:	e3a00043 	mov	r0, #67	; 0x43
  13b560:	ea0003bf 	b	13c464 <syscall>
  13b564:	0014b158 	.word	0x0014b158

0013b568 <syscall_stat>:
  13b568:	e92d4070 	push	{r4, r5, r6, lr}
  13b56c:	e1a04000 	mov	r4, r0
  13b570:	e1a05001 	mov	r5, r1
  13b574:	e59f0018 	ldr	r0, [pc, #24]	; 13b594 <syscall_stat+0x2c>
  13b578:	e3a0100d 	mov	r1, #13
  13b57c:	ebfffeb7 	bl	13b060 <syscall_debug>
  13b580:	e1a02005 	mov	r2, r5
  13b584:	e1a01004 	mov	r1, r4
  13b588:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b58c:	e3a00043 	mov	r0, #67	; 0x43
  13b590:	ea0003b3 	b	13c464 <syscall>
  13b594:	0014b148 	.word	0x0014b148

0013b598 <syscall_munmap>:
  13b598:	e92d4070 	push	{r4, r5, r6, lr}
  13b59c:	e1a04000 	mov	r4, r0
  13b5a0:	e1a05001 	mov	r5, r1
  13b5a4:	e59f0018 	ldr	r0, [pc, #24]	; 13b5c4 <syscall_munmap+0x2c>
  13b5a8:	e3a0100f 	mov	r1, #15
  13b5ac:	ebfffeab 	bl	13b060 <syscall_debug>
  13b5b0:	e1a02005 	mov	r2, r5
  13b5b4:	e1a01004 	mov	r1, r4
  13b5b8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b5bc:	e3a00036 	mov	r0, #54	; 0x36
  13b5c0:	ea0003a7 	b	13c464 <syscall>
  13b5c4:	0014b070 	.word	0x0014b070

0013b5c8 <syscall_setrlimit>:
  13b5c8:	e92d4070 	push	{r4, r5, r6, lr}
  13b5cc:	e1a04000 	mov	r4, r0
  13b5d0:	e1a05001 	mov	r5, r1
  13b5d4:	e59f0018 	ldr	r0, [pc, #24]	; 13b5f4 <syscall_setrlimit+0x2c>
  13b5d8:	e3a01012 	mov	r1, #18
  13b5dc:	ebfffe9f 	bl	13b060 <syscall_debug>
  13b5e0:	e1a02005 	mov	r2, r5
  13b5e4:	e1a01004 	mov	r1, r4
  13b5e8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b5ec:	e3a0008e 	mov	r0, #142	; 0x8e
  13b5f0:	ea00039b 	b	13c464 <syscall>
  13b5f4:	0014af9c 	.word	0x0014af9c

0013b5f8 <syscall_dup2>:
  13b5f8:	e92d4070 	push	{r4, r5, r6, lr}
  13b5fc:	e1a04000 	mov	r4, r0
  13b600:	e1a05001 	mov	r5, r1
  13b604:	e59f0018 	ldr	r0, [pc, #24]	; 13b624 <syscall_dup2+0x2c>
  13b608:	e3a0100d 	mov	r1, #13
  13b60c:	ebfffe93 	bl	13b060 <syscall_debug>
  13b610:	e1a02005 	mov	r2, r5
  13b614:	e1a01004 	mov	r1, r4
  13b618:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b61c:	e3a00086 	mov	r0, #134	; 0x86
  13b620:	ea00038f 	b	13c464 <syscall>
  13b624:	0014aee4 	.word	0x0014aee4

0013b628 <syscall_mkdir>:
  13b628:	e92d4070 	push	{r4, r5, r6, lr}
  13b62c:	e1a04000 	mov	r4, r0
  13b630:	e1a05001 	mov	r5, r1
  13b634:	e59f0018 	ldr	r0, [pc, #24]	; 13b654 <syscall_mkdir+0x2c>
  13b638:	e3a0100e 	mov	r1, #14
  13b63c:	ebfffe87 	bl	13b060 <syscall_debug>
  13b640:	e1a02005 	mov	r2, r5
  13b644:	e1a01004 	mov	r1, r4
  13b648:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b64c:	e3a00077 	mov	r0, #119	; 0x77
  13b650:	ea000383 	b	13c464 <syscall>
  13b654:	0014adcc 	.word	0x0014adcc

0013b658 <syscall_rename>:
  13b658:	e92d4070 	push	{r4, r5, r6, lr}
  13b65c:	e1a04000 	mov	r4, r0
  13b660:	e1a05001 	mov	r5, r1
  13b664:	e59f0018 	ldr	r0, [pc, #24]	; 13b684 <syscall_rename+0x2c>
  13b668:	e3a0100f 	mov	r1, #15
  13b66c:	ebfffe7b 	bl	13b060 <syscall_debug>
  13b670:	e1a02005 	mov	r2, r5
  13b674:	e1a01004 	mov	r1, r4
  13b678:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b67c:	e3a00087 	mov	r0, #135	; 0x87
  13b680:	ea000377 	b	13c464 <syscall>
  13b684:	0014adbc 	.word	0x0014adbc

0013b688 <syscall_kill>:
  13b688:	e92d4070 	push	{r4, r5, r6, lr}
  13b68c:	e1a04000 	mov	r4, r0
  13b690:	e1a05001 	mov	r5, r1
  13b694:	e59f0018 	ldr	r0, [pc, #24]	; 13b6b4 <syscall_kill+0x2c>
  13b698:	e3a0100d 	mov	r1, #13
  13b69c:	ebfffe6f 	bl	13b060 <syscall_debug>
  13b6a0:	e1a02005 	mov	r2, r5
  13b6a4:	e1a01004 	mov	r1, r4
  13b6a8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b6ac:	e3a0000e 	mov	r0, #14
  13b6b0:	ea00036b 	b	13c464 <syscall>
  13b6b4:	0014adac 	.word	0x0014adac

0013b6b8 <syscall_access>:
  13b6b8:	e92d4070 	push	{r4, r5, r6, lr}
  13b6bc:	e1a04000 	mov	r4, r0
  13b6c0:	e1a05001 	mov	r5, r1
  13b6c4:	e59f0018 	ldr	r0, [pc, #24]	; 13b6e4 <syscall_access+0x2c>
  13b6c8:	e3a0100f 	mov	r1, #15
  13b6cc:	ebfffe63 	bl	13b060 <syscall_debug>
  13b6d0:	e1a02005 	mov	r2, r5
  13b6d4:	e1a01004 	mov	r1, r4
  13b6d8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b6dc:	e3a0007d 	mov	r0, #125	; 0x7d
  13b6e0:	ea00035f 	b	13c464 <syscall>
  13b6e4:	0014ad7c 	.word	0x0014ad7c

0013b6e8 <syscall_getrandom>:
  13b6e8:	e92d4070 	push	{r4, r5, r6, lr}
  13b6ec:	e1a06002 	mov	r6, r2
  13b6f0:	e1a04000 	mov	r4, r0
  13b6f4:	e1a05001 	mov	r5, r1
  13b6f8:	e59f001c 	ldr	r0, [pc, #28]	; 13b71c <syscall_getrandom+0x34>
  13b6fc:	e3a01012 	mov	r1, #18
  13b700:	ebfffe56 	bl	13b060 <syscall_debug>
  13b704:	e1a03006 	mov	r3, r6
  13b708:	e1a02005 	mov	r2, r5
  13b70c:	e1a01004 	mov	r1, r4
  13b710:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b714:	e3a00090 	mov	r0, #144	; 0x90
  13b718:	ea000351 	b	13c464 <syscall>
  13b71c:	0014c59c 	.word	0x0014c59c

0013b720 <syscall_shmctl>:
  13b720:	e92d4070 	push	{r4, r5, r6, lr}
  13b724:	e1a06002 	mov	r6, r2
  13b728:	e1a04000 	mov	r4, r0
  13b72c:	e1a05001 	mov	r5, r1
  13b730:	e59f001c 	ldr	r0, [pc, #28]	; 13b754 <syscall_shmctl+0x34>
  13b734:	e3a0100f 	mov	r1, #15
  13b738:	ebfffe48 	bl	13b060 <syscall_debug>
  13b73c:	e1a03006 	mov	r3, r6
  13b740:	e1a02005 	mov	r2, r5
  13b744:	e1a01004 	mov	r1, r4
  13b748:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b74c:	e3a00f4d 	mov	r0, #308	; 0x134
  13b750:	ea000343 	b	13c464 <syscall>
  13b754:	0014bf8c 	.word	0x0014bf8c

0013b758 <syscall_shmget>:
  13b758:	e92d4070 	push	{r4, r5, r6, lr}
  13b75c:	e1a06002 	mov	r6, r2
  13b760:	e1a04000 	mov	r4, r0
  13b764:	e1a05001 	mov	r5, r1
  13b768:	e59f001c 	ldr	r0, [pc, #28]	; 13b78c <syscall_shmget+0x34>
  13b76c:	e3a0100f 	mov	r1, #15
  13b770:	ebfffe3a 	bl	13b060 <syscall_debug>
  13b774:	e1a03006 	mov	r3, r6
  13b778:	e1a02005 	mov	r2, r5
  13b77c:	e1a01004 	mov	r1, r4
  13b780:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b784:	e59f0004 	ldr	r0, [pc, #4]	; 13b790 <syscall_shmget+0x38>
  13b788:	ea000335 	b	13c464 <syscall>
  13b78c:	0014bf7c 	.word	0x0014bf7c
  13b790:	00000133 	.word	0x00000133

0013b794 <syscall_shmat>:
  13b794:	e92d4070 	push	{r4, r5, r6, lr}
  13b798:	e1a06002 	mov	r6, r2
  13b79c:	e1a04000 	mov	r4, r0
  13b7a0:	e1a05001 	mov	r5, r1
  13b7a4:	e59f001c 	ldr	r0, [pc, #28]	; 13b7c8 <syscall_shmat+0x34>
  13b7a8:	e3a0100e 	mov	r1, #14
  13b7ac:	ebfffe2b 	bl	13b060 <syscall_debug>
  13b7b0:	e1a03006 	mov	r3, r6
  13b7b4:	e1a02005 	mov	r2, r5
  13b7b8:	e1a01004 	mov	r1, r4
  13b7bc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b7c0:	e59f0004 	ldr	r0, [pc, #4]	; 13b7cc <syscall_shmat+0x38>
  13b7c4:	ea000326 	b	13c464 <syscall>
  13b7c8:	0014bf5c 	.word	0x0014bf5c
  13b7cc:	00000131 	.word	0x00000131

0013b7d0 <syscall_getpeername>:
  13b7d0:	e92d4070 	push	{r4, r5, r6, lr}
  13b7d4:	e1a06002 	mov	r6, r2
  13b7d8:	e1a04000 	mov	r4, r0
  13b7dc:	e1a05001 	mov	r5, r1
  13b7e0:	e59f001c 	ldr	r0, [pc, #28]	; 13b804 <syscall_getpeername+0x34>
  13b7e4:	e3a01014 	mov	r1, #20
  13b7e8:	ebfffe1c 	bl	13b060 <syscall_debug>
  13b7ec:	e1a03006 	mov	r3, r6
  13b7f0:	e1a02005 	mov	r2, r5
  13b7f4:	e1a01004 	mov	r1, r4
  13b7f8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b7fc:	e3a00048 	mov	r0, #72	; 0x48
  13b800:	ea000317 	b	13c464 <syscall>
  13b804:	0014be24 	.word	0x0014be24

0013b808 <syscall_getsockname>:
  13b808:	e92d4070 	push	{r4, r5, r6, lr}
  13b80c:	e1a06002 	mov	r6, r2
  13b810:	e1a04000 	mov	r4, r0
  13b814:	e1a05001 	mov	r5, r1
  13b818:	e59f001c 	ldr	r0, [pc, #28]	; 13b83c <syscall_getsockname+0x34>
  13b81c:	e3a01014 	mov	r1, #20
  13b820:	ebfffe0e 	bl	13b060 <syscall_debug>
  13b824:	e1a03006 	mov	r3, r6
  13b828:	e1a02005 	mov	r2, r5
  13b82c:	e1a01004 	mov	r1, r4
  13b830:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b834:	e3a00049 	mov	r0, #73	; 0x49
  13b838:	ea000309 	b	13c464 <syscall>
  13b83c:	0014be10 	.word	0x0014be10

0013b840 <syscall_accept>:
  13b840:	e92d4070 	push	{r4, r5, r6, lr}
  13b844:	e1a06002 	mov	r6, r2
  13b848:	e1a04000 	mov	r4, r0
  13b84c:	e1a05001 	mov	r5, r1
  13b850:	e59f001c 	ldr	r0, [pc, #28]	; 13b874 <syscall_accept+0x34>
  13b854:	e3a0100f 	mov	r1, #15
  13b858:	ebfffe00 	bl	13b060 <syscall_debug>
  13b85c:	e1a03006 	mov	r3, r6
  13b860:	e1a02005 	mov	r2, r5
  13b864:	e1a01004 	mov	r1, r4
  13b868:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b86c:	e3a00045 	mov	r0, #69	; 0x45
  13b870:	ea0002fb 	b	13c464 <syscall>
  13b874:	0014be00 	.word	0x0014be00

0013b878 <syscall_connect>:
  13b878:	e92d4070 	push	{r4, r5, r6, lr}
  13b87c:	e1a06002 	mov	r6, r2
  13b880:	e1a04000 	mov	r4, r0
  13b884:	e1a05001 	mov	r5, r1
  13b888:	e59f001c 	ldr	r0, [pc, #28]	; 13b8ac <syscall_connect+0x34>
  13b88c:	e3a01010 	mov	r1, #16
  13b890:	ebfffdf2 	bl	13b060 <syscall_debug>
  13b894:	e1a03006 	mov	r3, r6
  13b898:	e1a02005 	mov	r2, r5
  13b89c:	e1a01004 	mov	r1, r4
  13b8a0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b8a4:	e3a0004c 	mov	r0, #76	; 0x4c
  13b8a8:	ea0002ed 	b	13c464 <syscall>
  13b8ac:	0014bde0 	.word	0x0014bde0

0013b8b0 <syscall_bind>:
  13b8b0:	e92d4070 	push	{r4, r5, r6, lr}
  13b8b4:	e1a06002 	mov	r6, r2
  13b8b8:	e1a04000 	mov	r4, r0
  13b8bc:	e1a05001 	mov	r5, r1
  13b8c0:	e59f001c 	ldr	r0, [pc, #28]	; 13b8e4 <syscall_bind+0x34>
  13b8c4:	e3a0100d 	mov	r1, #13
  13b8c8:	ebfffde4 	bl	13b060 <syscall_debug>
  13b8cc:	e1a03006 	mov	r3, r6
  13b8d0:	e1a02005 	mov	r2, r5
  13b8d4:	e1a01004 	mov	r1, r4
  13b8d8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b8dc:	e3a00046 	mov	r0, #70	; 0x46
  13b8e0:	ea0002df 	b	13c464 <syscall>
  13b8e4:	0014bdd0 	.word	0x0014bdd0

0013b8e8 <syscall_socket>:
  13b8e8:	e92d4070 	push	{r4, r5, r6, lr}
  13b8ec:	e1a06002 	mov	r6, r2
  13b8f0:	e1a04000 	mov	r4, r0
  13b8f4:	e1a05001 	mov	r5, r1
  13b8f8:	e59f001c 	ldr	r0, [pc, #28]	; 13b91c <syscall_socket+0x34>
  13b8fc:	e3a0100f 	mov	r1, #15
  13b900:	ebfffdd6 	bl	13b060 <syscall_debug>
  13b904:	e1a03006 	mov	r3, r6
  13b908:	e1a02005 	mov	r2, r5
  13b90c:	e1a01004 	mov	r1, r4
  13b910:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b914:	e3a00052 	mov	r0, #82	; 0x52
  13b918:	ea0002d1 	b	13c464 <syscall>
  13b91c:	0014bdc0 	.word	0x0014bdc0

0013b920 <syscall_sched_setaffinity>:
  13b920:	e92d4070 	push	{r4, r5, r6, lr}
  13b924:	e1a06002 	mov	r6, r2
  13b928:	e1a04000 	mov	r4, r0
  13b92c:	e1a05001 	mov	r5, r1
  13b930:	e59f001c 	ldr	r0, [pc, #28]	; 13b954 <syscall_sched_setaffinity+0x34>
  13b934:	e3a0101a 	mov	r1, #26
  13b938:	ebfffdc8 	bl	13b060 <syscall_debug>
  13b93c:	e1a03006 	mov	r3, r6
  13b940:	e1a02005 	mov	r2, r5
  13b944:	e1a01004 	mov	r1, r4
  13b948:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b94c:	e3a0009a 	mov	r0, #154	; 0x9a
  13b950:	ea0002c3 	b	13c464 <syscall>
  13b954:	0014ba64 	.word	0x0014ba64

0013b958 <syscall_fcntl64>:
  13b958:	e92d4070 	push	{r4, r5, r6, lr}
  13b95c:	e1a06002 	mov	r6, r2
  13b960:	e1a04000 	mov	r4, r0
  13b964:	e1a05001 	mov	r5, r1
  13b968:	e59f001c 	ldr	r0, [pc, #28]	; 13b98c <syscall_fcntl64+0x34>
  13b96c:	e3a01010 	mov	r1, #16
  13b970:	ebfffdba 	bl	13b060 <syscall_debug>
  13b974:	e1a03006 	mov	r3, r6
  13b978:	e1a02005 	mov	r2, r5
  13b97c:	e1a01004 	mov	r1, r4
  13b980:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b984:	e3a00007 	mov	r0, #7
  13b988:	ea0002b5 	b	13c464 <syscall>
  13b98c:	0014b904 	.word	0x0014b904

0013b990 <syscall_madvise>:
  13b990:	e92d4070 	push	{r4, r5, r6, lr}
  13b994:	e1a06002 	mov	r6, r2
  13b998:	e1a04000 	mov	r4, r0
  13b99c:	e1a05001 	mov	r5, r1
  13b9a0:	e59f001c 	ldr	r0, [pc, #28]	; 13b9c4 <syscall_madvise+0x34>
  13b9a4:	e3a01010 	mov	r1, #16
  13b9a8:	ebfffdac 	bl	13b060 <syscall_debug>
  13b9ac:	e1a03006 	mov	r3, r6
  13b9b0:	e1a02005 	mov	r2, r5
  13b9b4:	e1a01004 	mov	r1, r4
  13b9b8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b9bc:	e3a00093 	mov	r0, #147	; 0x93
  13b9c0:	ea0002a7 	b	13c464 <syscall>
  13b9c4:	0014b8f4 	.word	0x0014b8f4

0013b9c8 <syscall_getdents64>:
  13b9c8:	e92d4070 	push	{r4, r5, r6, lr}
  13b9cc:	e1a06002 	mov	r6, r2
  13b9d0:	e1a04000 	mov	r4, r0
  13b9d4:	e1a05001 	mov	r5, r1
  13b9d8:	e59f001c 	ldr	r0, [pc, #28]	; 13b9fc <syscall_getdents64+0x34>
  13b9dc:	e3a01013 	mov	r1, #19
  13b9e0:	ebfffd9e 	bl	13b060 <syscall_debug>
  13b9e4:	e1a03006 	mov	r3, r6
  13b9e8:	e1a02005 	mov	r2, r5
  13b9ec:	e1a01004 	mov	r1, r4
  13b9f0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b9f4:	e3a00079 	mov	r0, #121	; 0x79
  13b9f8:	ea000299 	b	13c464 <syscall>
  13b9fc:	0014b8bc 	.word	0x0014b8bc

0013ba00 <syscall_poll>:
  13ba00:	e92d4070 	push	{r4, r5, r6, lr}
  13ba04:	e1a06002 	mov	r6, r2
  13ba08:	e1a04000 	mov	r4, r0
  13ba0c:	e1a05001 	mov	r5, r1
  13ba10:	e59f001c 	ldr	r0, [pc, #28]	; 13ba34 <syscall_poll+0x34>
  13ba14:	e3a0100d 	mov	r1, #13
  13ba18:	ebfffd90 	bl	13b060 <syscall_debug>
  13ba1c:	e1a03006 	mov	r3, r6
  13ba20:	e1a02005 	mov	r2, r5
  13ba24:	e1a01004 	mov	r1, r4
  13ba28:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba2c:	e3a00009 	mov	r0, #9
  13ba30:	ea00028b 	b	13c464 <syscall>
  13ba34:	0014b528 	.word	0x0014b528

0013ba38 <syscall_sched_getscheduler>:
  13ba38:	e92d4070 	push	{r4, r5, r6, lr}
  13ba3c:	e1a06002 	mov	r6, r2
  13ba40:	e1a04000 	mov	r4, r0
  13ba44:	e1a05001 	mov	r5, r1
  13ba48:	e59f001c 	ldr	r0, [pc, #28]	; 13ba6c <syscall_sched_getscheduler+0x34>
  13ba4c:	e3a0101b 	mov	r1, #27
  13ba50:	ebfffd82 	bl	13b060 <syscall_debug>
  13ba54:	e1a03006 	mov	r3, r6
  13ba58:	e1a02005 	mov	r2, r5
  13ba5c:	e1a01004 	mov	r1, r4
  13ba60:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba64:	e3a00099 	mov	r0, #153	; 0x99
  13ba68:	ea00027d 	b	13c464 <syscall>
  13ba6c:	0014b44c 	.word	0x0014b44c

0013ba70 <syscall_sched_setscheduler>:
  13ba70:	e92d4070 	push	{r4, r5, r6, lr}
  13ba74:	e1a06002 	mov	r6, r2
  13ba78:	e1a04000 	mov	r4, r0
  13ba7c:	e1a05001 	mov	r5, r1
  13ba80:	e59f001c 	ldr	r0, [pc, #28]	; 13baa4 <syscall_sched_setscheduler+0x34>
  13ba84:	e3a0101b 	mov	r1, #27
  13ba88:	ebfffd74 	bl	13b060 <syscall_debug>
  13ba8c:	e1a03006 	mov	r3, r6
  13ba90:	e1a02005 	mov	r2, r5
  13ba94:	e1a01004 	mov	r1, r4
  13ba98:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba9c:	e3a00098 	mov	r0, #152	; 0x98
  13baa0:	ea00026f 	b	13c464 <syscall>
  13baa4:	0014b430 	.word	0x0014b430

0013baa8 <syscall_writev>:
  13baa8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13baac:	e1a06002 	mov	r6, r2
  13bab0:	e1a08000 	mov	r8, r0
  13bab4:	e1a04001 	mov	r4, r1
  13bab8:	e59f0088 	ldr	r0, [pc, #136]	; 13bb48 <syscall_writev+0xa0>
  13babc:	e3a0100f 	mov	r1, #15
  13bac0:	ebfffd66 	bl	13b060 <syscall_debug>
  13bac4:	e3560000 	cmp	r6, #0
  13bac8:	e3a07000 	mov	r7, #0
  13bacc:	da000013 	ble	13bb20 <syscall_writev+0x78>
  13bad0:	e1a05007 	mov	r5, r7
  13bad4:	ea000003 	b	13bae8 <syscall_writev+0x40>
  13bad8:	e2855001 	add	r5, r5, #1
  13badc:	e1560005 	cmp	r6, r5
  13bae0:	e2844008 	add	r4, r4, #8
  13bae4:	0a00000d 	beq	13bb20 <syscall_writev+0x78>
  13bae8:	e5943004 	ldr	r3, [r4, #4]
  13baec:	e3530000 	cmp	r3, #0
  13baf0:	0afffff8 	beq	13bad8 <syscall_writev+0x30>
  13baf4:	e5942000 	ldr	r2, [r4]
  13baf8:	e1a01008 	mov	r1, r8
  13bafc:	e3a00003 	mov	r0, #3
  13bb00:	eb000257 	bl	13c464 <syscall>
  13bb04:	e3500000 	cmp	r0, #0
  13bb08:	da000006 	ble	13bb28 <syscall_writev+0x80>
  13bb0c:	e2855001 	add	r5, r5, #1
  13bb10:	e1560005 	cmp	r6, r5
  13bb14:	e0877000 	add	r7, r7, r0
  13bb18:	e2844008 	add	r4, r4, #8
  13bb1c:	1afffff1 	bne	13bae8 <syscall_writev+0x40>
  13bb20:	e1a00007 	mov	r0, r7
  13bb24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bb28:	13a03000 	movne	r3, #0
  13bb2c:	03a03001 	moveq	r3, #1
  13bb30:	e3570000 	cmp	r7, #0
  13bb34:	13a03001 	movne	r3, #1
  13bb38:	e3530000 	cmp	r3, #0
  13bb3c:	01a07000 	moveq	r7, r0
  13bb40:	e1a00007 	mov	r0, r7
  13bb44:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bb48:	0014b374 	.word	0x0014b374

0013bb4c <syscall_readv>:
  13bb4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bb50:	e1a06002 	mov	r6, r2
  13bb54:	e1a08000 	mov	r8, r0
  13bb58:	e1a04001 	mov	r4, r1
  13bb5c:	e59f0088 	ldr	r0, [pc, #136]	; 13bbec <syscall_readv+0xa0>
  13bb60:	e3a0100e 	mov	r1, #14
  13bb64:	ebfffd3d 	bl	13b060 <syscall_debug>
  13bb68:	e3560000 	cmp	r6, #0
  13bb6c:	e3a07000 	mov	r7, #0
  13bb70:	da000013 	ble	13bbc4 <syscall_readv+0x78>
  13bb74:	e1a05007 	mov	r5, r7
  13bb78:	ea000003 	b	13bb8c <syscall_readv+0x40>
  13bb7c:	e2855001 	add	r5, r5, #1
  13bb80:	e1560005 	cmp	r6, r5
  13bb84:	e2844008 	add	r4, r4, #8
  13bb88:	0a00000d 	beq	13bbc4 <syscall_readv+0x78>
  13bb8c:	e5943004 	ldr	r3, [r4, #4]
  13bb90:	e3530000 	cmp	r3, #0
  13bb94:	0afffff8 	beq	13bb7c <syscall_readv+0x30>
  13bb98:	e5942000 	ldr	r2, [r4]
  13bb9c:	e1a01008 	mov	r1, r8
  13bba0:	e3a00002 	mov	r0, #2
  13bba4:	eb00022e 	bl	13c464 <syscall>
  13bba8:	e3500000 	cmp	r0, #0
  13bbac:	da000006 	ble	13bbcc <syscall_readv+0x80>
  13bbb0:	e2855001 	add	r5, r5, #1
  13bbb4:	e1560005 	cmp	r6, r5
  13bbb8:	e0877000 	add	r7, r7, r0
  13bbbc:	e2844008 	add	r4, r4, #8
  13bbc0:	1afffff1 	bne	13bb8c <syscall_readv+0x40>
  13bbc4:	e1a00007 	mov	r0, r7
  13bbc8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bbcc:	13a03000 	movne	r3, #0
  13bbd0:	03a03001 	moveq	r3, #1
  13bbd4:	e3570000 	cmp	r7, #0
  13bbd8:	13a03001 	movne	r3, #1
  13bbdc:	e3530000 	cmp	r3, #0
  13bbe0:	01a07000 	moveq	r7, r0
  13bbe4:	e1a00007 	mov	r0, r7
  13bbe8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bbec:	0014b364 	.word	0x0014b364

0013bbf0 <syscall_getdents>:
  13bbf0:	e92d4070 	push	{r4, r5, r6, lr}
  13bbf4:	e1a06002 	mov	r6, r2
  13bbf8:	e1a04000 	mov	r4, r0
  13bbfc:	e1a05001 	mov	r5, r1
  13bc00:	e59f001c 	ldr	r0, [pc, #28]	; 13bc24 <syscall_getdents+0x34>
  13bc04:	e3a01011 	mov	r1, #17
  13bc08:	ebfffd14 	bl	13b060 <syscall_debug>
  13bc0c:	e1a03006 	mov	r3, r6
  13bc10:	e1a02005 	mov	r2, r5
  13bc14:	e1a01004 	mov	r1, r4
  13bc18:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bc1c:	e3a00079 	mov	r0, #121	; 0x79
  13bc20:	ea00020f 	b	13c464 <syscall>
  13bc24:	0014b31c 	.word	0x0014b31c

0013bc28 <syscall_readlink>:
  13bc28:	e92d4070 	push	{r4, r5, r6, lr}
  13bc2c:	e1a06002 	mov	r6, r2
  13bc30:	e1a04000 	mov	r4, r0
  13bc34:	e1a05001 	mov	r5, r1
  13bc38:	e59f001c 	ldr	r0, [pc, #28]	; 13bc5c <syscall_readlink+0x34>
  13bc3c:	e3a01011 	mov	r1, #17
  13bc40:	ebfffd06 	bl	13b060 <syscall_debug>
  13bc44:	e1a03006 	mov	r3, r6
  13bc48:	e1a02005 	mov	r2, r5
  13bc4c:	e1a01004 	mov	r1, r4
  13bc50:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bc54:	e3a00091 	mov	r0, #145	; 0x91
  13bc58:	ea000201 	b	13c464 <syscall>
  13bc5c:	0014b02c 	.word	0x0014b02c

0013bc60 <syscall_fcntl>:
  13bc60:	e92d4070 	push	{r4, r5, r6, lr}
  13bc64:	e1a06002 	mov	r6, r2
  13bc68:	e1a04000 	mov	r4, r0
  13bc6c:	e1a05001 	mov	r5, r1
  13bc70:	e59f001c 	ldr	r0, [pc, #28]	; 13bc94 <syscall_fcntl+0x34>
  13bc74:	e3a0100e 	mov	r1, #14
  13bc78:	ebfffcf8 	bl	13b060 <syscall_debug>
  13bc7c:	e1a03006 	mov	r3, r6
  13bc80:	e1a02005 	mov	r2, r5
  13bc84:	e1a01004 	mov	r1, r4
  13bc88:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bc8c:	e3a00007 	mov	r0, #7
  13bc90:	ea0001f3 	b	13c464 <syscall>
  13bc94:	0014ae94 	.word	0x0014ae94

0013bc98 <syscall_execve>:
  13bc98:	e92d4070 	push	{r4, r5, r6, lr}
  13bc9c:	e1a06002 	mov	r6, r2
  13bca0:	e1a04000 	mov	r4, r0
  13bca4:	e1a05001 	mov	r5, r1
  13bca8:	e59f001c 	ldr	r0, [pc, #28]	; 13bccc <syscall_execve+0x34>
  13bcac:	e3a0100f 	mov	r1, #15
  13bcb0:	ebfffcea 	bl	13b060 <syscall_debug>
  13bcb4:	e1a03006 	mov	r3, r6
  13bcb8:	e1a02005 	mov	r2, r5
  13bcbc:	e1a01004 	mov	r1, r4
  13bcc0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bcc4:	e3a00089 	mov	r0, #137	; 0x89
  13bcc8:	ea0001e5 	b	13c464 <syscall>
  13bccc:	0014acbc 	.word	0x0014acbc

0013bcd0 <syscall_open>:
  13bcd0:	e92d4070 	push	{r4, r5, r6, lr}
  13bcd4:	e1a06002 	mov	r6, r2
  13bcd8:	e1a04000 	mov	r4, r0
  13bcdc:	e1a05001 	mov	r5, r1
  13bce0:	e59f001c 	ldr	r0, [pc, #28]	; 13bd04 <syscall_open+0x34>
  13bce4:	e3a0100d 	mov	r1, #13
  13bce8:	ebfffcdc 	bl	13b060 <syscall_debug>
  13bcec:	e1a03006 	mov	r3, r6
  13bcf0:	e1a02005 	mov	r2, r5
  13bcf4:	e1a01004 	mov	r1, r4
  13bcf8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bcfc:	e3a00005 	mov	r0, #5
  13bd00:	ea0001d7 	b	13c464 <syscall>
  13bd04:	0014ac6c 	.word	0x0014ac6c

0013bd08 <syscall_write>:
  13bd08:	e92d4070 	push	{r4, r5, r6, lr}
  13bd0c:	e1a06002 	mov	r6, r2
  13bd10:	e1a04000 	mov	r4, r0
  13bd14:	e1a05001 	mov	r5, r1
  13bd18:	e59f001c 	ldr	r0, [pc, #28]	; 13bd3c <syscall_write+0x34>
  13bd1c:	e3a0100e 	mov	r1, #14
  13bd20:	ebfffcce 	bl	13b060 <syscall_debug>
  13bd24:	e1a03006 	mov	r3, r6
  13bd28:	e1a02005 	mov	r2, r5
  13bd2c:	e1a01004 	mov	r1, r4
  13bd30:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bd34:	e3a00003 	mov	r0, #3
  13bd38:	ea0001c9 	b	13c464 <syscall>
  13bd3c:	0014ac5c 	.word	0x0014ac5c

0013bd40 <syscall_read>:
  13bd40:	e92d4070 	push	{r4, r5, r6, lr}
  13bd44:	e1a06002 	mov	r6, r2
  13bd48:	e1a04000 	mov	r4, r0
  13bd4c:	e1a05001 	mov	r5, r1
  13bd50:	e59f001c 	ldr	r0, [pc, #28]	; 13bd74 <syscall_read+0x34>
  13bd54:	e3a0100d 	mov	r1, #13
  13bd58:	ebfffcc0 	bl	13b060 <syscall_debug>
  13bd5c:	e1a03006 	mov	r3, r6
  13bd60:	e1a02005 	mov	r2, r5
  13bd64:	e1a01004 	mov	r1, r4
  13bd68:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bd6c:	e3a00002 	mov	r0, #2
  13bd70:	ea0001bb 	b	13c464 <syscall>
  13bd74:	0014ac4c 	.word	0x0014ac4c

0013bd78 <syscall_prlimit64>:
  13bd78:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bd7c:	e1a06002 	mov	r6, r2
  13bd80:	e1a07003 	mov	r7, r3
  13bd84:	e1a04000 	mov	r4, r0
  13bd88:	e1a05001 	mov	r5, r1
  13bd8c:	e24dd00c 	sub	sp, sp, #12
  13bd90:	e3a01012 	mov	r1, #18
  13bd94:	e59f0020 	ldr	r0, [pc, #32]	; 13bdbc <syscall_prlimit64+0x44>
  13bd98:	ebfffcb0 	bl	13b060 <syscall_debug>
  13bd9c:	e58d7000 	str	r7, [sp]
  13bda0:	e1a03006 	mov	r3, r6
  13bda4:	e1a02005 	mov	r2, r5
  13bda8:	e1a01004 	mov	r1, r4
  13bdac:	e3a0008c 	mov	r0, #140	; 0x8c
  13bdb0:	eb0001ab 	bl	13c464 <syscall>
  13bdb4:	e28dd00c 	add	sp, sp, #12
  13bdb8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bdbc:	0014c450 	.word	0x0014c450

0013bdc0 <syscall_recv>:
  13bdc0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bdc4:	e1a06002 	mov	r6, r2
  13bdc8:	e1a07003 	mov	r7, r3
  13bdcc:	e1a04000 	mov	r4, r0
  13bdd0:	e1a05001 	mov	r5, r1
  13bdd4:	e24dd00c 	sub	sp, sp, #12
  13bdd8:	e3a0100d 	mov	r1, #13
  13bddc:	e59f0020 	ldr	r0, [pc, #32]	; 13be04 <syscall_recv+0x44>
  13bde0:	ebfffc9e 	bl	13b060 <syscall_debug>
  13bde4:	e58d7000 	str	r7, [sp]
  13bde8:	e1a03006 	mov	r3, r6
  13bdec:	e1a02005 	mov	r2, r5
  13bdf0:	e1a01004 	mov	r1, r4
  13bdf4:	e3a0004e 	mov	r0, #78	; 0x4e
  13bdf8:	eb000199 	bl	13c464 <syscall>
  13bdfc:	e28dd00c 	add	sp, sp, #12
  13be00:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13be04:	0014be6c 	.word	0x0014be6c

0013be08 <syscall_send>:
  13be08:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13be0c:	e1a06002 	mov	r6, r2
  13be10:	e1a07003 	mov	r7, r3
  13be14:	e1a04000 	mov	r4, r0
  13be18:	e1a05001 	mov	r5, r1
  13be1c:	e24dd00c 	sub	sp, sp, #12
  13be20:	e3a0100d 	mov	r1, #13
  13be24:	e59f0020 	ldr	r0, [pc, #32]	; 13be4c <syscall_send+0x44>
  13be28:	ebfffc8c 	bl	13b060 <syscall_debug>
  13be2c:	e58d7000 	str	r7, [sp]
  13be30:	e1a03006 	mov	r3, r6
  13be34:	e1a02005 	mov	r2, r5
  13be38:	e1a01004 	mov	r1, r4
  13be3c:	e3a00050 	mov	r0, #80	; 0x50
  13be40:	eb000187 	bl	13c464 <syscall>
  13be44:	e28dd00c 	add	sp, sp, #12
  13be48:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13be4c:	0014be4c 	.word	0x0014be4c

0013be50 <syscall_rt_sigprocmask>:
  13be50:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13be54:	e1a06002 	mov	r6, r2
  13be58:	e1a07003 	mov	r7, r3
  13be5c:	e1a04000 	mov	r4, r0
  13be60:	e1a05001 	mov	r5, r1
  13be64:	e24dd00c 	sub	sp, sp, #12
  13be68:	e3a01017 	mov	r1, #23
  13be6c:	e59f0020 	ldr	r0, [pc, #32]	; 13be94 <syscall_rt_sigprocmask+0x44>
  13be70:	ebfffc7a 	bl	13b060 <syscall_debug>
  13be74:	e58d7000 	str	r7, [sp]
  13be78:	e1a03006 	mov	r3, r6
  13be7c:	e1a02005 	mov	r2, r5
  13be80:	e1a01004 	mov	r1, r4
  13be84:	e3a00068 	mov	r0, #104	; 0x68
  13be88:	eb000175 	bl	13c464 <syscall>
  13be8c:	e28dd00c 	add	sp, sp, #12
  13be90:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13be94:	0014b5b4 	.word	0x0014b5b4

0013be98 <syscall_rt_sigaction>:
  13be98:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13be9c:	e1a06002 	mov	r6, r2
  13bea0:	e1a07003 	mov	r7, r3
  13bea4:	e1a04000 	mov	r4, r0
  13bea8:	e1a05001 	mov	r5, r1
  13beac:	e24dd00c 	sub	sp, sp, #12
  13beb0:	e3a01015 	mov	r1, #21
  13beb4:	e59f0020 	ldr	r0, [pc, #32]	; 13bedc <syscall_rt_sigaction+0x44>
  13beb8:	ebfffc68 	bl	13b060 <syscall_debug>
  13bebc:	e58d7000 	str	r7, [sp]
  13bec0:	e1a03006 	mov	r3, r6
  13bec4:	e1a02005 	mov	r2, r5
  13bec8:	e1a01004 	mov	r1, r4
  13becc:	e3a00067 	mov	r0, #103	; 0x67
  13bed0:	eb000163 	bl	13c464 <syscall>
  13bed4:	e28dd00c 	add	sp, sp, #12
  13bed8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bedc:	0014b59c 	.word	0x0014b59c

0013bee0 <syscall_sigprocmask>:
  13bee0:	e92d4070 	push	{r4, r5, r6, lr}
  13bee4:	e1a04000 	mov	r4, r0
  13bee8:	e24dd008 	sub	sp, sp, #8
  13beec:	e1a05001 	mov	r5, r1
  13bef0:	e59f002c 	ldr	r0, [pc, #44]	; 13bf24 <syscall_sigprocmask+0x44>
  13bef4:	e3a01014 	mov	r1, #20
  13bef8:	e1a06002 	mov	r6, r2
  13befc:	ebfffc57 	bl	13b060 <syscall_debug>
  13bf00:	e3a00080 	mov	r0, #128	; 0x80
  13bf04:	e1a03006 	mov	r3, r6
  13bf08:	e58d0000 	str	r0, [sp]
  13bf0c:	e1a02005 	mov	r2, r5
  13bf10:	e1a01004 	mov	r1, r4
  13bf14:	e3a00068 	mov	r0, #104	; 0x68
  13bf18:	eb000151 	bl	13c464 <syscall>
  13bf1c:	e28dd008 	add	sp, sp, #8
  13bf20:	e8bd8070 	pop	{r4, r5, r6, pc}
  13bf24:	0014b23c 	.word	0x0014b23c

0013bf28 <syscall_sigaction>:
  13bf28:	e92d4070 	push	{r4, r5, r6, lr}
  13bf2c:	e1a04000 	mov	r4, r0
  13bf30:	e24dd008 	sub	sp, sp, #8
  13bf34:	e1a05001 	mov	r5, r1
  13bf38:	e59f002c 	ldr	r0, [pc, #44]	; 13bf6c <syscall_sigaction+0x44>
  13bf3c:	e3a01012 	mov	r1, #18
  13bf40:	e1a06002 	mov	r6, r2
  13bf44:	ebfffc45 	bl	13b060 <syscall_debug>
  13bf48:	e3a00080 	mov	r0, #128	; 0x80
  13bf4c:	e1a03006 	mov	r3, r6
  13bf50:	e58d0000 	str	r0, [sp]
  13bf54:	e1a02005 	mov	r2, r5
  13bf58:	e1a01004 	mov	r1, r4
  13bf5c:	e3a00067 	mov	r0, #103	; 0x67
  13bf60:	eb00013f 	bl	13c464 <syscall>
  13bf64:	e28dd008 	add	sp, sp, #8
  13bf68:	e8bd8070 	pop	{r4, r5, r6, pc}
  13bf6c:	0014af24 	.word	0x0014af24

0013bf70 <syscall_getsockopt>:
  13bf70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bf74:	e1a06002 	mov	r6, r2
  13bf78:	e1a08003 	mov	r8, r3
  13bf7c:	e1a04000 	mov	r4, r0
  13bf80:	e1a05001 	mov	r5, r1
  13bf84:	e24dd008 	sub	sp, sp, #8
  13bf88:	e59d7020 	ldr	r7, [sp, #32]
  13bf8c:	e3a01013 	mov	r1, #19
  13bf90:	e59f0024 	ldr	r0, [pc, #36]	; 13bfbc <syscall_getsockopt+0x4c>
  13bf94:	ebfffc31 	bl	13b060 <syscall_debug>
  13bf98:	e58d8000 	str	r8, [sp]
  13bf9c:	e58d7004 	str	r7, [sp, #4]
  13bfa0:	e1a03006 	mov	r3, r6
  13bfa4:	e1a02005 	mov	r2, r5
  13bfa8:	e1a01004 	mov	r1, r4
  13bfac:	e3a0004a 	mov	r0, #74	; 0x4a
  13bfb0:	eb00012b 	bl	13c464 <syscall>
  13bfb4:	e28dd008 	add	sp, sp, #8
  13bfb8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bfbc:	0014beb8 	.word	0x0014beb8

0013bfc0 <syscall_setsockopt>:
  13bfc0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bfc4:	e1a06002 	mov	r6, r2
  13bfc8:	e1a08003 	mov	r8, r3
  13bfcc:	e1a04000 	mov	r4, r0
  13bfd0:	e1a05001 	mov	r5, r1
  13bfd4:	e24dd008 	sub	sp, sp, #8
  13bfd8:	e59d7020 	ldr	r7, [sp, #32]
  13bfdc:	e3a01013 	mov	r1, #19
  13bfe0:	e59f0024 	ldr	r0, [pc, #36]	; 13c00c <syscall_setsockopt+0x4c>
  13bfe4:	ebfffc1d 	bl	13b060 <syscall_debug>
  13bfe8:	e58d8000 	str	r8, [sp]
  13bfec:	e58d7004 	str	r7, [sp, #4]
  13bff0:	e1a03006 	mov	r3, r6
  13bff4:	e1a02005 	mov	r2, r5
  13bff8:	e1a01004 	mov	r1, r4
  13bffc:	e3a0004b 	mov	r0, #75	; 0x4b
  13c000:	eb000117 	bl	13c464 <syscall>
  13c004:	e28dd008 	add	sp, sp, #8
  13c008:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c00c:	0014bea4 	.word	0x0014bea4

0013c010 <syscall_mremap>:
  13c010:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c014:	e1a06002 	mov	r6, r2
  13c018:	e1a08003 	mov	r8, r3
  13c01c:	e1a04000 	mov	r4, r0
  13c020:	e1a05001 	mov	r5, r1
  13c024:	e24dd008 	sub	sp, sp, #8
  13c028:	e59d7020 	ldr	r7, [sp, #32]
  13c02c:	e3a0100f 	mov	r1, #15
  13c030:	e59f0024 	ldr	r0, [pc, #36]	; 13c05c <syscall_mremap+0x4c>
  13c034:	ebfffc09 	bl	13b060 <syscall_debug>
  13c038:	e58d8000 	str	r8, [sp]
  13c03c:	e58d7004 	str	r7, [sp, #4]
  13c040:	e1a03006 	mov	r3, r6
  13c044:	e1a02005 	mov	r2, r5
  13c048:	e1a01004 	mov	r1, r4
  13c04c:	e3a00092 	mov	r0, #146	; 0x92
  13c050:	eb000103 	bl	13c464 <syscall>
  13c054:	e28dd008 	add	sp, sp, #8
  13c058:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c05c:	0014b4f0 	.word	0x0014b4f0

0013c060 <syscall__newselect>:
  13c060:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c064:	e1a06002 	mov	r6, r2
  13c068:	e1a08003 	mov	r8, r3
  13c06c:	e1a04000 	mov	r4, r0
  13c070:	e1a05001 	mov	r5, r1
  13c074:	e24dd008 	sub	sp, sp, #8
  13c078:	e59d7020 	ldr	r7, [sp, #32]
  13c07c:	e3a01013 	mov	r1, #19
  13c080:	e59f0024 	ldr	r0, [pc, #36]	; 13c0ac <syscall__newselect+0x4c>
  13c084:	ebfffbf5 	bl	13b060 <syscall_debug>
  13c088:	e58d8000 	str	r8, [sp]
  13c08c:	e58d7004 	str	r7, [sp, #4]
  13c090:	e1a03006 	mov	r3, r6
  13c094:	e1a02005 	mov	r2, r5
  13c098:	e1a01004 	mov	r1, r4
  13c09c:	e3a0005e 	mov	r0, #94	; 0x5e
  13c0a0:	eb0000ef 	bl	13c464 <syscall>
  13c0a4:	e28dd008 	add	sp, sp, #8
  13c0a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c0ac:	0014b330 	.word	0x0014b330

0013c0b0 <syscall__llseek>:
  13c0b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c0b4:	e1a06002 	mov	r6, r2
  13c0b8:	e1a05000 	mov	r5, r0
  13c0bc:	e1a08001 	mov	r8, r1
  13c0c0:	e24dd008 	sub	sp, sp, #8
  13c0c4:	e59d7020 	ldr	r7, [sp, #32]
  13c0c8:	e3a01010 	mov	r1, #16
  13c0cc:	e59f0034 	ldr	r0, [pc, #52]	; 13c108 <syscall__llseek+0x58>
  13c0d0:	e1a04003 	mov	r4, r3
  13c0d4:	ebfffbe1 	bl	13b060 <syscall_debug>
  13c0d8:	e1a01005 	mov	r1, r5
  13c0dc:	e58d8000 	str	r8, [sp]
  13c0e0:	e58d7004 	str	r7, [sp, #4]
  13c0e4:	e1a03006 	mov	r3, r6
  13c0e8:	e3a02000 	mov	r2, #0
  13c0ec:	e3a00004 	mov	r0, #4
  13c0f0:	eb0000db 	bl	13c464 <syscall>
  13c0f4:	e1a01fc0 	asr	r1, r0, #31
  13c0f8:	e8840003 	stm	r4, {r0, r1}
  13c0fc:	e1a00fc1 	asr	r0, r1, #31
  13c100:	e28dd008 	add	sp, sp, #8
  13c104:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c108:	0014b30c 	.word	0x0014b30c

0013c10c <syscall_recvfrom>:
  13c10c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13c110:	e1a06002 	mov	r6, r2
  13c114:	e1a09003 	mov	r9, r3
  13c118:	e1a04000 	mov	r4, r0
  13c11c:	e1a05001 	mov	r5, r1
  13c120:	e24dd014 	sub	sp, sp, #20
  13c124:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13c128:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13c12c:	e3a01011 	mov	r1, #17
  13c130:	e59f0024 	ldr	r0, [pc, #36]	; 13c15c <syscall_recvfrom+0x50>
  13c134:	ebfffbc9 	bl	13b060 <syscall_debug>
  13c138:	e58d9000 	str	r9, [sp]
  13c13c:	e98d0180 	stmib	sp, {r7, r8}
  13c140:	e1a03006 	mov	r3, r6
  13c144:	e1a02005 	mov	r2, r5
  13c148:	e1a01004 	mov	r1, r4
  13c14c:	e3a0004f 	mov	r0, #79	; 0x4f
  13c150:	eb0000c3 	bl	13c464 <syscall>
  13c154:	e28dd014 	add	sp, sp, #20
  13c158:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13c15c:	0014be7c 	.word	0x0014be7c

0013c160 <syscall_sendto>:
  13c160:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13c164:	e1a06002 	mov	r6, r2
  13c168:	e1a09003 	mov	r9, r3
  13c16c:	e1a04000 	mov	r4, r0
  13c170:	e1a05001 	mov	r5, r1
  13c174:	e24dd014 	sub	sp, sp, #20
  13c178:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13c17c:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13c180:	e3a0100f 	mov	r1, #15
  13c184:	e59f0024 	ldr	r0, [pc, #36]	; 13c1b0 <syscall_sendto+0x50>
  13c188:	ebfffbb4 	bl	13b060 <syscall_debug>
  13c18c:	e58d9000 	str	r9, [sp]
  13c190:	e98d0180 	stmib	sp, {r7, r8}
  13c194:	e1a03006 	mov	r3, r6
  13c198:	e1a02005 	mov	r2, r5
  13c19c:	e1a01004 	mov	r1, r4
  13c1a0:	e3a00051 	mov	r0, #81	; 0x51
  13c1a4:	eb0000ae 	bl	13c464 <syscall>
  13c1a8:	e28dd014 	add	sp, sp, #20
  13c1ac:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13c1b0:	0014be5c 	.word	0x0014be5c

0013c1b4 <syscall_futex>:
  13c1b4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13c1b8:	e1a06002 	mov	r6, r2
  13c1bc:	e1a09003 	mov	r9, r3
  13c1c0:	e1a04000 	mov	r4, r0
  13c1c4:	e1a05001 	mov	r5, r1
  13c1c8:	e24dd014 	sub	sp, sp, #20
  13c1cc:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13c1d0:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13c1d4:	e3a0100e 	mov	r1, #14
  13c1d8:	e59f0024 	ldr	r0, [pc, #36]	; 13c204 <syscall_futex+0x50>
  13c1dc:	ebfffb9f 	bl	13b060 <syscall_debug>
  13c1e0:	e58d9000 	str	r9, [sp]
  13c1e4:	e98d0180 	stmib	sp, {r7, r8}
  13c1e8:	e1a03006 	mov	r3, r6
  13c1ec:	e1a02005 	mov	r2, r5
  13c1f0:	e1a01004 	mov	r1, r4
  13c1f4:	e3a00083 	mov	r0, #131	; 0x83
  13c1f8:	eb000099 	bl	13c464 <syscall>
  13c1fc:	e28dd014 	add	sp, sp, #20
  13c200:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13c204:	0014ba54 	.word	0x0014ba54

0013c208 <syscall_mmap2>:
  13c208:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13c20c:	e1a06002 	mov	r6, r2
  13c210:	e1a09003 	mov	r9, r3
  13c214:	e1a04000 	mov	r4, r0
  13c218:	e1a05001 	mov	r5, r1
  13c21c:	e59d7020 	ldr	r7, [sp, #32]
  13c220:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  13c224:	e3a0100e 	mov	r1, #14
  13c228:	e59f0024 	ldr	r0, [pc, #36]	; 13c254 <syscall_mmap2+0x4c>
  13c22c:	ebfffb8b 	bl	13b060 <syscall_debug>
  13c230:	e58d9020 	str	r9, [sp, #32]
  13c234:	e58d8028 	str	r8, [sp, #40]	; 0x28
  13c238:	e58d7024 	str	r7, [sp, #36]	; 0x24
  13c23c:	e1a03006 	mov	r3, r6
  13c240:	e1a02005 	mov	r2, r5
  13c244:	e1a01004 	mov	r1, r4
  13c248:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13c24c:	e3a00035 	mov	r0, #53	; 0x35
  13c250:	ea000083 	b	13c464 <syscall>
  13c254:	0014b6dc 	.word	0x0014b6dc

0013c258 <syscall_gettid>:
  13c258:	e92d4010 	push	{r4, lr}
  13c25c:	e59f0010 	ldr	r0, [pc, #16]	; 13c274 <syscall_gettid+0x1c>
  13c260:	e3a0100f 	mov	r1, #15
  13c264:	ebfffb7d 	bl	13b060 <syscall_debug>
  13c268:	e8bd4010 	pop	{r4, lr}
  13c26c:	e3a0008b 	mov	r0, #139	; 0x8b
  13c270:	ea00007b 	b	13c464 <syscall>
  13c274:	0014b914 	.word	0x0014b914

0013c278 <syscall_vfork>:
  13c278:	e92d4010 	push	{r4, lr}
  13c27c:	e59f0010 	ldr	r0, [pc, #16]	; 13c294 <syscall_vfork+0x1c>
  13c280:	e3a0100e 	mov	r1, #14
  13c284:	ebfffb75 	bl	13b060 <syscall_debug>
  13c288:	e8bd4010 	pop	{r4, lr}
  13c28c:	e3a0008a 	mov	r0, #138	; 0x8a
  13c290:	ea000073 	b	13c464 <syscall>
  13c294:	0014b6b8 	.word	0x0014b6b8

0013c298 <syscall_setsid>:
  13c298:	e92d4010 	push	{r4, lr}
  13c29c:	e59f0010 	ldr	r0, [pc, #16]	; 13c2b4 <syscall_setsid+0x1c>
  13c2a0:	e3a0100f 	mov	r1, #15
  13c2a4:	ebfffb6d 	bl	13b060 <syscall_debug>
  13c2a8:	e8bd4010 	pop	{r4, lr}
  13c2ac:	e3a0008f 	mov	r0, #143	; 0x8f
  13c2b0:	ea00006b 	b	13c464 <syscall>
  13c2b4:	0014af14 	.word	0x0014af14

0013c2b8 <syscall_getpid>:
  13c2b8:	e92d4010 	push	{r4, lr}
  13c2bc:	e59f0010 	ldr	r0, [pc, #16]	; 13c2d4 <syscall_getpid+0x1c>
  13c2c0:	e3a0100f 	mov	r1, #15
  13c2c4:	ebfffb65 	bl	13b060 <syscall_debug>
  13c2c8:	e8bd4010 	pop	{r4, lr}
  13c2cc:	e3a0000f 	mov	r0, #15
  13c2d0:	ea000063 	b	13c464 <syscall>
  13c2d4:	0014ad1c 	.word	0x0014ad1c

0013c2d8 <syscall_fork>:
  13c2d8:	e92d4010 	push	{r4, lr}
  13c2dc:	e59f0010 	ldr	r0, [pc, #16]	; 13c2f4 <syscall_fork+0x1c>
  13c2e0:	e3a0100d 	mov	r1, #13
  13c2e4:	ebfffb5d 	bl	13b060 <syscall_debug>
  13c2e8:	e8bd4010 	pop	{r4, lr}
  13c2ec:	e3a00088 	mov	r0, #136	; 0x88
  13c2f0:	ea00005b 	b	13c464 <syscall>
  13c2f4:	0014ac3c 	.word	0x0014ac3c

0013c2f8 <syscall_ioctl>:
  13c2f8:	e92d4070 	push	{r4, r5, r6, lr}
  13c2fc:	e1a04000 	mov	r4, r0
  13c300:	e1a05001 	mov	r5, r1
  13c304:	e59f0030 	ldr	r0, [pc, #48]	; 13c33c <syscall_ioctl+0x44>
  13c308:	e3a0100e 	mov	r1, #14
  13c30c:	e1a06002 	mov	r6, r2
  13c310:	ebfffb52 	bl	13b060 <syscall_debug>
  13c314:	e3540001 	cmp	r4, #1
  13c318:	0a000005 	beq	13c334 <syscall_ioctl+0x3c>
  13c31c:	e1a03006 	mov	r3, r6
  13c320:	e1a02005 	mov	r2, r5
  13c324:	e1a01004 	mov	r1, r4
  13c328:	e8bd4070 	pop	{r4, r5, r6, lr}
  13c32c:	e3a00007 	mov	r0, #7
  13c330:	ea00004b 	b	13c464 <syscall>
  13c334:	e3a00000 	mov	r0, #0
  13c338:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c33c:	0014ae84 	.word	0x0014ae84

0013c340 <syscall_lseek>:
  13c340:	e92d4070 	push	{r4, r5, r6, lr}
  13c344:	e1a04001 	mov	r4, r1
  13c348:	e24dd008 	sub	sp, sp, #8
  13c34c:	e1a05000 	mov	r5, r0
  13c350:	e3a0100e 	mov	r1, #14
  13c354:	e59f0058 	ldr	r0, [pc, #88]	; 13c3b4 <syscall_lseek+0x74>
  13c358:	e1a06002 	mov	r6, r2
  13c35c:	ebfffb3f 	bl	13b060 <syscall_debug>
  13c360:	e3540000 	cmp	r4, #0
  13c364:	ba000008 	blt	13c38c <syscall_lseek+0x4c>
  13c368:	e3a02000 	mov	r2, #0
  13c36c:	e58d6004 	str	r6, [sp, #4]
  13c370:	e1a03004 	mov	r3, r4
  13c374:	e1a01005 	mov	r1, r5
  13c378:	e58d2000 	str	r2, [sp]
  13c37c:	e3a00004 	mov	r0, #4
  13c380:	eb000037 	bl	13c464 <syscall>
  13c384:	e28dd008 	add	sp, sp, #8
  13c388:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c38c:	e3e02000 	mvn	r2, #0
  13c390:	e58d6004 	str	r6, [sp, #4]
  13c394:	e58d2000 	str	r2, [sp]
  13c398:	e1a03004 	mov	r3, r4
  13c39c:	e1a01005 	mov	r1, r5
  13c3a0:	e3a02000 	mov	r2, #0
  13c3a4:	e3a00004 	mov	r0, #4
  13c3a8:	eb00002d 	bl	13c464 <syscall>
  13c3ac:	e28dd008 	add	sp, sp, #8
  13c3b0:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c3b4:	0014ad0c 	.word	0x0014ad0c

0013c3b8 <get_rtt_syscall>:
  13c3b8:	e3500e19 	cmp	r0, #400	; 0x190
  13c3bc:	3a000005 	bcc	13c3d8 <get_rtt_syscall+0x20>
  13c3c0:	e59f201c 	ldr	r2, [pc, #28]	; 13c3e4 <get_rtt_syscall+0x2c>
  13c3c4:	e59f301c 	ldr	r3, [pc, #28]	; 13c3e8 <get_rtt_syscall+0x30>
  13c3c8:	e1500002 	cmp	r0, r2
  13c3cc:	01a00003 	moveq	r0, r3
  13c3d0:	13a00000 	movne	r0, #0
  13c3d4:	e12fff1e 	bx	lr
  13c3d8:	e59f300c 	ldr	r3, [pc, #12]	; 13c3ec <get_rtt_syscall+0x34>
  13c3dc:	e7930100 	ldr	r0, [r3, r0, lsl #2]
  13c3e0:	e12fff1e 	bx	lr
  13c3e4:	000f0005 	.word	0x000f0005
  13c3e8:	00139298 	.word	0x00139298
  13c3ec:	0014c6f4 	.word	0x0014c6f4

0013c3f0 <___syscall>:
  13c3f0:	e92d4070 	push	{r4, r5, r6, lr}
  13c3f4:	e1a0c001 	mov	ip, r1
  13c3f8:	e3500e19 	cmp	r0, #400	; 0x190
  13c3fc:	e1a01002 	mov	r1, r2
  13c400:	e1a02003 	mov	r2, r3
  13c404:	e28d3010 	add	r3, sp, #16
  13c408:	e8930078 	ldm	r3, {r3, r4, r5, r6}
  13c40c:	2a00000a 	bcs	13c43c <___syscall+0x4c>
  13c410:	e59fe03c 	ldr	lr, [pc, #60]	; 13c454 <___syscall+0x64>
  13c414:	e79ee100 	ldr	lr, [lr, r0, lsl #2]
  13c418:	e35e0000 	cmp	lr, #0
  13c41c:	0a00000a 	beq	13c44c <___syscall+0x5c>
  13c420:	e58d6018 	str	r6, [sp, #24]
  13c424:	e58d5014 	str	r5, [sp, #20]
  13c428:	e58d4010 	str	r4, [sp, #16]
  13c42c:	e1a0000c 	mov	r0, ip
  13c430:	e1a0c00e 	mov	ip, lr
  13c434:	e8bd4070 	pop	{r4, r5, r6, lr}
  13c438:	e12fff1c 	bx	ip
  13c43c:	e59fe014 	ldr	lr, [pc, #20]	; 13c458 <___syscall+0x68>
  13c440:	e150000e 	cmp	r0, lr
  13c444:	059fe010 	ldreq	lr, [pc, #16]	; 13c45c <___syscall+0x6c>
  13c448:	0afffff4 	beq	13c420 <___syscall+0x30>
  13c44c:	e3a00000 	mov	r0, #0
  13c450:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c454:	0014c6f4 	.word	0x0014c6f4
  13c458:	000f0005 	.word	0x000f0005
  13c45c:	00139298 	.word	0x00139298

0013c460 <__syscall>:
  13c460:	eaffffe2 	b	13c3f0 <___syscall>

0013c464 <syscall>:
  13c464:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13c468:	e1a07000 	mov	r7, r0
  13c46c:	e1a00001 	mov	r0, r1
  13c470:	e1a01002 	mov	r1, r2
  13c474:	e1a02003 	mov	r2, r3
  13c478:	e28d6014 	add	r6, sp, #20
  13c47c:	e8960038 	ldm	r6, {r3, r4, r5}
  13c480:	ef000000 	svc	0x00000000
  13c484:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13c488:	e12fff1e 	bx	lr

0013c48c <__syscall_ret>:
  13c48c:	e3700a01 	cmn	r0, #4096	; 0x1000
  13c490:	912fff1e 	bxls	lr
  13c494:	e92d4010 	push	{r4, lr}
  13c498:	e1a04000 	mov	r4, r0
  13c49c:	ebfff28f 	bl	138ee0 <__errno_location>
  13c4a0:	e2644000 	rsb	r4, r4, #0
  13c4a4:	e5804000 	str	r4, [r0]
  13c4a8:	e3e00000 	mvn	r0, #0
  13c4ac:	e8bd8010 	pop	{r4, pc}

0013c4b0 <__lctrans_impl>:
  13c4b0:	e12fff1e 	bx	lr

0013c4b4 <__lctrans>:
  13c4b4:	eafffffd 	b	13c4b0 <__lctrans_impl>

0013c4b8 <__lctrans_cur>:
  13c4b8:	e1a02000 	mov	r2, r0
  13c4bc:	e59f301c 	ldr	r3, [pc, #28]	; 13c4e0 <__lctrans_cur+0x28>
  13c4c0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13c4c4:	e5930000 	ldr	r0, [r3]
  13c4c8:	e12fff30 	blx	r0
  13c4cc:	e5103018 	ldr	r3, [r0, #-24]	; 0xffffffe8
  13c4d0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13c4d4:	e1a00002 	mov	r0, r2
  13c4d8:	e5931014 	ldr	r1, [r3, #20]
  13c4dc:	eafffff3 	b	13c4b0 <__lctrans_impl>
  13c4e0:	0014d3dc 	.word	0x0014d3dc

0013c4e4 <__simple_malloc>:
  13c4e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c4e8:	e2505000 	subs	r5, r0, #0
  13c4ec:	e24dd008 	sub	sp, sp, #8
  13c4f0:	0a000016 	beq	13c550 <__simple_malloc+0x6c>
  13c4f4:	e3550001 	cmp	r5, #1
  13c4f8:	9a000037 	bls	13c5dc <__simple_malloc+0xf8>
  13c4fc:	e3a03001 	mov	r3, #1
  13c500:	e1a03083 	lsl	r3, r3, #1
  13c504:	e1550003 	cmp	r5, r3
  13c508:	83a02001 	movhi	r2, #1
  13c50c:	93a02000 	movls	r2, #0
  13c510:	e353000f 	cmp	r3, #15
  13c514:	83a02000 	movhi	r2, #0
  13c518:	e3520000 	cmp	r2, #0
  13c51c:	1afffff7 	bne	13c500 <__simple_malloc+0x1c>
  13c520:	e2434001 	sub	r4, r3, #1
  13c524:	e59f60c8 	ldr	r6, [pc, #200]	; 13c5f4 <__simple_malloc+0x110>
  13c528:	e59f00c8 	ldr	r0, [pc, #200]	; 13c5f8 <__simple_malloc+0x114>
  13c52c:	eb001587 	bl	141b50 <__lock>
  13c530:	e5962000 	ldr	r2, [r6]
  13c534:	e355013e 	cmp	r5, #-2147483633	; 0x8000000f
  13c538:	e2623000 	rsb	r3, r2, #0
  13c53c:	e0044003 	and	r4, r4, r3
  13c540:	8a000009 	bhi	13c56c <__simple_malloc+0x88>
  13c544:	e0853004 	add	r3, r5, r4
  13c548:	e1a05004 	mov	r5, r4
  13c54c:	ea000004 	b	13c564 <__simple_malloc+0x80>
  13c550:	e59f00a0 	ldr	r0, [pc, #160]	; 13c5f8 <__simple_malloc+0x114>
  13c554:	eb00157d 	bl	141b50 <__lock>
  13c558:	e3a03001 	mov	r3, #1
  13c55c:	e59f6090 	ldr	r6, [pc, #144]	; 13c5f4 <__simple_malloc+0x110>
  13c560:	e5962000 	ldr	r2, [r6]
  13c564:	e1a04005 	mov	r4, r5
  13c568:	e1a05003 	mov	r5, r3
  13c56c:	e59f8088 	ldr	r8, [pc, #136]	; 13c5fc <__simple_malloc+0x118>
  13c570:	e5981000 	ldr	r1, [r8]
  13c574:	e0411002 	sub	r1, r1, r2
  13c578:	e1510005 	cmp	r1, r5
  13c57c:	20827004 	addcs	r7, r2, r4
  13c580:	2a00000e 	bcs	13c5c0 <__simple_malloc+0xdc>
  13c584:	e28d0008 	add	r0, sp, #8
  13c588:	e5205004 	str	r5, [r0, #-4]!
  13c58c:	eb001b2e 	bl	14324c <__expand_heap>
  13c590:	e2503000 	subs	r3, r0, #0
  13c594:	0a000012 	beq	13c5e4 <__simple_malloc+0x100>
  13c598:	e5982000 	ldr	r2, [r8]
  13c59c:	e59d1004 	ldr	r1, [sp, #4]
  13c5a0:	e1520003 	cmp	r2, r3
  13c5a4:	05962000 	ldreq	r2, [r6]
  13c5a8:	11a07003 	movne	r7, r3
  13c5ac:	11a02003 	movne	r2, r3
  13c5b0:	e0833001 	add	r3, r3, r1
  13c5b4:	00827004 	addeq	r7, r2, r4
  13c5b8:	10455004 	subne	r5, r5, r4
  13c5bc:	e5883000 	str	r3, [r8]
  13c5c0:	e0825005 	add	r5, r2, r5
  13c5c4:	e59f002c 	ldr	r0, [pc, #44]	; 13c5f8 <__simple_malloc+0x114>
  13c5c8:	e5865000 	str	r5, [r6]
  13c5cc:	eb0015b7 	bl	141cb0 <__unlock>
  13c5d0:	e1a00007 	mov	r0, r7
  13c5d4:	e28dd008 	add	sp, sp, #8
  13c5d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c5dc:	e3a04000 	mov	r4, #0
  13c5e0:	eaffffcf 	b	13c524 <__simple_malloc+0x40>
  13c5e4:	e59f000c 	ldr	r0, [pc, #12]	; 13c5f8 <__simple_malloc+0x114>
  13c5e8:	e1a07003 	mov	r7, r3
  13c5ec:	eb0015af 	bl	141cb0 <__unlock>
  13c5f0:	eafffff6 	b	13c5d0 <__simple_malloc+0xec>
  13c5f4:	0014ec28 	.word	0x0014ec28
  13c5f8:	0014ec30 	.word	0x0014ec30
  13c5fc:	0014ec2c 	.word	0x0014ec2c

0013c600 <__simple_calloc>:
  13c600:	e3510000 	cmp	r1, #0
  13c604:	e1a0c000 	mov	ip, r0
  13c608:	0a000002 	beq	13c618 <__simple_calloc+0x18>
  13c60c:	e0832190 	umull	r2, r3, r0, r1
  13c610:	e3530000 	cmp	r3, #0
  13c614:	1a000001 	bne	13c620 <__simple_calloc+0x20>
  13c618:	e0000c91 	mul	r0, r1, ip
  13c61c:	eaffffb0 	b	13c4e4 <__simple_malloc>
  13c620:	e92d4010 	push	{r4, lr}
  13c624:	ebfff22d 	bl	138ee0 <__errno_location>
  13c628:	e3a0300c 	mov	r3, #12
  13c62c:	e5803000 	str	r3, [r0]
  13c630:	e3a00000 	mov	r0, #0
  13c634:	e8bd8010 	pop	{r4, pc}

0013c638 <adjust_size>:
  13c638:	e5903000 	ldr	r3, [r0]
  13c63c:	e59f2058 	ldr	r2, [pc, #88]	; 13c69c <adjust_size+0x64>
  13c640:	e2431001 	sub	r1, r3, #1
  13c644:	e1510002 	cmp	r1, r2
  13c648:	9a000006 	bls	13c668 <adjust_size+0x30>
  13c64c:	e3530000 	cmp	r3, #0
  13c650:	03a01010 	moveq	r1, #16
  13c654:	01a02003 	moveq	r2, r3
  13c658:	05801000 	streq	r1, [r0]
  13c65c:	1a000007 	bne	13c680 <adjust_size+0x48>
  13c660:	e1a00002 	mov	r0, r2
  13c664:	e12fff1e 	bx	lr
  13c668:	e3a02000 	mov	r2, #0
  13c66c:	e2833017 	add	r3, r3, #23
  13c670:	e3c3300f 	bic	r3, r3, #15
  13c674:	e5803000 	str	r3, [r0]
  13c678:	e1a00002 	mov	r0, r2
  13c67c:	e12fff1e 	bx	lr
  13c680:	e92d4010 	push	{r4, lr}
  13c684:	ebfff215 	bl	138ee0 <__errno_location>
  13c688:	e3a0300c 	mov	r3, #12
  13c68c:	e3e02000 	mvn	r2, #0
  13c690:	e5803000 	str	r3, [r0]
  13c694:	e1a00002 	mov	r0, r2
  13c698:	e8bd8010 	pop	{r4, pc}
  13c69c:	7fffefef 	.word	0x7fffefef

0013c6a0 <unbin>:
  13c6a0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c6a4:	e590200c 	ldr	r2, [r0, #12]
  13c6a8:	e1a07000 	mov	r7, r0
  13c6ac:	e5900008 	ldr	r0, [r0, #8]
  13c6b0:	e24dd00c 	sub	sp, sp, #12
  13c6b4:	e1520000 	cmp	r2, r0
  13c6b8:	0a00000b 	beq	13c6ec <unbin+0x4c>
  13c6bc:	e5973004 	ldr	r3, [r7, #4]
  13c6c0:	e5820008 	str	r0, [r2, #8]
  13c6c4:	e3c30001 	bic	r0, r3, #1
  13c6c8:	e7971000 	ldr	r1, [r7, r0]
  13c6cc:	e597c008 	ldr	ip, [r7, #8]
  13c6d0:	e3833001 	orr	r3, r3, #1
  13c6d4:	e3811001 	orr	r1, r1, #1
  13c6d8:	e58c200c 	str	r2, [ip, #12]
  13c6dc:	e5873004 	str	r3, [r7, #4]
  13c6e0:	e7871000 	str	r1, [r7, r0]
  13c6e4:	e28dd00c 	add	sp, sp, #12
  13c6e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c6ec:	e3a00001 	mov	r0, #1
  13c6f0:	e241c020 	sub	ip, r1, #32
  13c6f4:	e1a0a110 	lsl	sl, r0, r1
  13c6f8:	e1a0bc10 	lsl	fp, r0, ip
  13c6fc:	e261c020 	rsb	ip, r1, #32
  13c700:	e1e0100a 	mvn	r1, sl
  13c704:	e18bbc30 	orr	fp, fp, r0, lsr ip
  13c708:	e3710001 	cmn	r1, #1
  13c70c:	e1e0200b 	mvn	r2, fp
  13c710:	0a000014 	beq	13c768 <unbin+0xc8>
  13c714:	e59f40a4 	ldr	r4, [pc, #164]	; 13c7c0 <unbin+0x120>
  13c718:	e1a0b007 	mov	fp, r7
  13c71c:	e1a09004 	mov	r9, r4
  13c720:	e1a07001 	mov	r7, r1
  13c724:	e88d0006 	stm	sp, {r1, r2}
  13c728:	e59f6094 	ldr	r6, [pc, #148]	; 13c7c4 <unbin+0x124>
  13c72c:	e5945000 	ldr	r5, [r4]
  13c730:	e0078005 	and	r8, r7, r5
  13c734:	ea000002 	b	13c744 <unbin+0xa4>
  13c738:	e5943000 	ldr	r3, [r4]
  13c73c:	e1550003 	cmp	r5, r3
  13c740:	1afffff9 	bne	13c72c <unbin+0x8c>
  13c744:	e1a00005 	mov	r0, r5
  13c748:	e1a01008 	mov	r1, r8
  13c74c:	e1a02009 	mov	r2, r9
  13c750:	e5963000 	ldr	r3, [r6]
  13c754:	e12fff33 	blx	r3
  13c758:	e3500000 	cmp	r0, #0
  13c75c:	1afffff5 	bne	13c738 <unbin+0x98>
  13c760:	e1a0700b 	mov	r7, fp
  13c764:	e89d0006 	ldm	sp, {r1, r2}
  13c768:	e3720001 	cmn	r2, #1
  13c76c:	0a000010 	beq	13c7b4 <unbin+0x114>
  13c770:	e1a0a002 	mov	sl, r2
  13c774:	e59f4044 	ldr	r4, [pc, #68]	; 13c7c0 <unbin+0x120>
  13c778:	e59f6044 	ldr	r6, [pc, #68]	; 13c7c4 <unbin+0x124>
  13c77c:	e2849004 	add	r9, r4, #4
  13c780:	e5945004 	ldr	r5, [r4, #4]
  13c784:	e00a8005 	and	r8, sl, r5
  13c788:	ea000002 	b	13c798 <unbin+0xf8>
  13c78c:	e5943004 	ldr	r3, [r4, #4]
  13c790:	e1550003 	cmp	r5, r3
  13c794:	1afffff9 	bne	13c780 <unbin+0xe0>
  13c798:	e1a00005 	mov	r0, r5
  13c79c:	e1a01008 	mov	r1, r8
  13c7a0:	e1a02009 	mov	r2, r9
  13c7a4:	e5963000 	ldr	r3, [r6]
  13c7a8:	e12fff33 	blx	r3
  13c7ac:	e3500000 	cmp	r0, #0
  13c7b0:	1afffff5 	bne	13c78c <unbin+0xec>
  13c7b4:	e597200c 	ldr	r2, [r7, #12]
  13c7b8:	e5970008 	ldr	r0, [r7, #8]
  13c7bc:	eaffffbe 	b	13c6bc <unbin+0x1c>
  13c7c0:	0014ec40 	.word	0x0014ec40
  13c7c4:	0014d3d8 	.word	0x0014d3d8

0013c7c8 <alloc_fwd>:
  13c7c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c7cc:	e59f925c 	ldr	r9, [pc, #604]	; 13ca30 <alloc_fwd+0x268>
  13c7d0:	e24dd00c 	sub	sp, sp, #12
  13c7d4:	e58d0004 	str	r0, [sp, #4]
  13c7d8:	e59f6254 	ldr	r6, [pc, #596]	; 13ca34 <alloc_fwd+0x26c>
  13c7dc:	e59d3004 	ldr	r3, [sp, #4]
  13c7e0:	e5938004 	ldr	r8, [r3, #4]
  13c7e4:	e3180001 	tst	r8, #1
  13c7e8:	1a000055 	bne	13c944 <alloc_fwd+0x17c>
  13c7ec:	e1a07228 	lsr	r7, r8, #4
  13c7f0:	e2477001 	sub	r7, r7, #1
  13c7f4:	e3570020 	cmp	r7, #32
  13c7f8:	9a000005 	bls	13c814 <alloc_fwd+0x4c>
  13c7fc:	e59f3234 	ldr	r3, [pc, #564]	; 13ca38 <alloc_fwd+0x270>
  13c800:	e1570003 	cmp	r7, r3
  13c804:	8a000058 	bhi	13c96c <alloc_fwd+0x1a4>
  13c808:	e59f322c 	ldr	r3, [pc, #556]	; 13ca3c <alloc_fwd+0x274>
  13c80c:	e08371a7 	add	r7, r3, r7, lsr #3
  13c810:	e5577004 	ldrb	r7, [r7, #-4]
  13c814:	e1a0b007 	mov	fp, r7
  13c818:	e1a04207 	lsl	r4, r7, #4
  13c81c:	e2844008 	add	r4, r4, #8
  13c820:	e59f3218 	ldr	r3, [pc, #536]	; 13ca40 <alloc_fwd+0x278>
  13c824:	e0894004 	add	r4, r9, r4
  13c828:	e593300c 	ldr	r3, [r3, #12]
  13c82c:	e3530000 	cmp	r3, #0
  13c830:	1284a004 	addne	sl, r4, #4
  13c834:	1a000032 	bne	13c904 <alloc_fwd+0x13c>
  13c838:	e28b3001 	add	r3, fp, #1
  13c83c:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13c840:	e3520000 	cmp	r2, #0
  13c844:	1a000053 	bne	13c998 <alloc_fwd+0x1d0>
  13c848:	e1a02008 	mov	r2, r8
  13c84c:	e0891207 	add	r1, r9, r7, lsl #4
  13c850:	e2811008 	add	r1, r1, #8
  13c854:	e0890203 	add	r0, r9, r3, lsl #4
  13c858:	e7891203 	str	r1, [r9, r3, lsl #4]
  13c85c:	e5801004 	str	r1, [r0, #4]
  13c860:	e1580002 	cmp	r8, r2
  13c864:	0a00004b 	beq	13c998 <alloc_fwd+0x1d0>
  13c868:	e5943000 	ldr	r3, [r4]
  13c86c:	e3530000 	cmp	r3, #0
  13c870:	0a000030 	beq	13c938 <alloc_fwd+0x170>
  13c874:	e59f31c8 	ldr	r3, [pc, #456]	; 13ca44 <alloc_fwd+0x27c>
  13c878:	e593c000 	ldr	ip, [r3]
  13c87c:	e12fff3c 	blx	ip
  13c880:	e3a02000 	mov	r2, #0
  13c884:	e593c000 	ldr	ip, [r3]
  13c888:	e5842000 	str	r2, [r4]
  13c88c:	e12fff3c 	blx	ip
  13c890:	e5943004 	ldr	r3, [r4, #4]
  13c894:	e1530002 	cmp	r3, r2
  13c898:	0affffcf 	beq	13c7dc <alloc_fwd+0x14>
  13c89c:	e3a000f0 	mov	r0, #240	; 0xf0
  13c8a0:	ebfffec4 	bl	13c3b8 <get_rtt_syscall>
  13c8a4:	e2503000 	subs	r3, r0, #0
  13c8a8:	0affffca 	beq	13c7d8 <alloc_fwd+0x10>
  13c8ac:	e3a02001 	mov	r2, #1
  13c8b0:	e3a01081 	mov	r1, #129	; 0x81
  13c8b4:	e1a00004 	mov	r0, r4
  13c8b8:	e12fff33 	blx	r3
  13c8bc:	e3700026 	cmn	r0, #38	; 0x26
  13c8c0:	1affffc4 	bne	13c7d8 <alloc_fwd+0x10>
  13c8c4:	e3a000f0 	mov	r0, #240	; 0xf0
  13c8c8:	ebfffeba 	bl	13c3b8 <get_rtt_syscall>
  13c8cc:	e2503000 	subs	r3, r0, #0
  13c8d0:	0affffc0 	beq	13c7d8 <alloc_fwd+0x10>
  13c8d4:	e3a02001 	mov	r2, #1
  13c8d8:	e1a00004 	mov	r0, r4
  13c8dc:	e1a01002 	mov	r1, r2
  13c8e0:	e12fff33 	blx	r3
  13c8e4:	eaffffbb 	b	13c7d8 <alloc_fwd+0x10>
  13c8e8:	e3550000 	cmp	r5, #0
  13c8ec:	0a000017 	beq	13c950 <alloc_fwd+0x188>
  13c8f0:	e1a03001 	mov	r3, r1
  13c8f4:	e1a02001 	mov	r2, r1
  13c8f8:	e1a00004 	mov	r0, r4
  13c8fc:	e1a0100a 	mov	r1, sl
  13c900:	eb001515 	bl	141d5c <__wait>
  13c904:	e5945000 	ldr	r5, [r4]
  13c908:	ea000002 	b	13c918 <alloc_fwd+0x150>
  13c90c:	e5943000 	ldr	r3, [r4]
  13c910:	e1550003 	cmp	r5, r3
  13c914:	1afffffa 	bne	13c904 <alloc_fwd+0x13c>
  13c918:	e1a00005 	mov	r0, r5
  13c91c:	e3a01001 	mov	r1, #1
  13c920:	e1a02004 	mov	r2, r4
  13c924:	e5963000 	ldr	r3, [r6]
  13c928:	e12fff33 	blx	r3
  13c92c:	e3500000 	cmp	r0, #0
  13c930:	1afffff5 	bne	13c90c <alloc_fwd+0x144>
  13c934:	eaffffeb 	b	13c8e8 <alloc_fwd+0x120>
  13c938:	e1a08002 	mov	r8, r2
  13c93c:	e3180001 	tst	r8, #1
  13c940:	0affffa9 	beq	13c7ec <alloc_fwd+0x24>
  13c944:	e3a00000 	mov	r0, #0
  13c948:	e28dd00c 	add	sp, sp, #12
  13c94c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c950:	e28b3001 	add	r3, fp, #1
  13c954:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13c958:	e59d2004 	ldr	r2, [sp, #4]
  13c95c:	e3510000 	cmp	r1, #0
  13c960:	e5922004 	ldr	r2, [r2, #4]
  13c964:	1affffbd 	bne	13c860 <alloc_fwd+0x98>
  13c968:	eaffffb7 	b	13c84c <alloc_fwd+0x84>
  13c96c:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13c970:	83a0703f 	movhi	r7, #63	; 0x3f
  13c974:	959f30c0 	ldrls	r3, [pc, #192]	; 13ca3c <alloc_fwd+0x274>
  13c978:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13c97c:	908373a7 	addls	r7, r3, r7, lsr #7
  13c980:	95577004 	ldrbls	r7, [r7, #-4]
  13c984:	92877010 	addls	r7, r7, #16
  13c988:	91a04207 	lslls	r4, r7, #4
  13c98c:	92844008 	addls	r4, r4, #8
  13c990:	e1a0b007 	mov	fp, r7
  13c994:	eaffffa1 	b	13c820 <alloc_fwd+0x58>
  13c998:	e1a0100b 	mov	r1, fp
  13c99c:	e59d0004 	ldr	r0, [sp, #4]
  13c9a0:	ebffff3e 	bl	13c6a0 <unbin>
  13c9a4:	e5943000 	ldr	r3, [r4]
  13c9a8:	e3530000 	cmp	r3, #0
  13c9ac:	0a000009 	beq	13c9d8 <alloc_fwd+0x210>
  13c9b0:	e59f308c 	ldr	r3, [pc, #140]	; 13ca44 <alloc_fwd+0x27c>
  13c9b4:	e593c000 	ldr	ip, [r3]
  13c9b8:	e12fff3c 	blx	ip
  13c9bc:	e3a02000 	mov	r2, #0
  13c9c0:	e593c000 	ldr	ip, [r3]
  13c9c4:	e5842000 	str	r2, [r4]
  13c9c8:	e12fff3c 	blx	ip
  13c9cc:	e5943004 	ldr	r3, [r4, #4]
  13c9d0:	e1530002 	cmp	r3, r2
  13c9d4:	1a000002 	bne	13c9e4 <alloc_fwd+0x21c>
  13c9d8:	e3a00001 	mov	r0, #1
  13c9dc:	e28dd00c 	add	sp, sp, #12
  13c9e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c9e4:	e3a000f0 	mov	r0, #240	; 0xf0
  13c9e8:	ebfffe72 	bl	13c3b8 <get_rtt_syscall>
  13c9ec:	e2503000 	subs	r3, r0, #0
  13c9f0:	0afffff8 	beq	13c9d8 <alloc_fwd+0x210>
  13c9f4:	e3a02001 	mov	r2, #1
  13c9f8:	e3a01081 	mov	r1, #129	; 0x81
  13c9fc:	e1a00004 	mov	r0, r4
  13ca00:	e12fff33 	blx	r3
  13ca04:	e3700026 	cmn	r0, #38	; 0x26
  13ca08:	1afffff2 	bne	13c9d8 <alloc_fwd+0x210>
  13ca0c:	e3a000f0 	mov	r0, #240	; 0xf0
  13ca10:	ebfffe68 	bl	13c3b8 <get_rtt_syscall>
  13ca14:	e2503000 	subs	r3, r0, #0
  13ca18:	0affffee 	beq	13c9d8 <alloc_fwd+0x210>
  13ca1c:	e3a02001 	mov	r2, #1
  13ca20:	e1a00004 	mov	r0, r4
  13ca24:	e1a01002 	mov	r1, r2
  13ca28:	e12fff33 	blx	r3
  13ca2c:	eaffffe9 	b	13c9d8 <alloc_fwd+0x210>
  13ca30:	0014ec40 	.word	0x0014ec40
  13ca34:	0014d3d8 	.word	0x0014d3d8
  13ca38:	000001ff 	.word	0x000001ff
  13ca3c:	0014cd54 	.word	0x0014cd54
  13ca40:	0056f058 	.word	0x0056f058
  13ca44:	0014d3d4 	.word	0x0014d3d4

0013ca48 <alloc_rev>:
  13ca48:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13ca4c:	e59f9264 	ldr	r9, [pc, #612]	; 13ccb8 <alloc_rev+0x270>
  13ca50:	e24dd00c 	sub	sp, sp, #12
  13ca54:	e58d0004 	str	r0, [sp, #4]
  13ca58:	e59f625c 	ldr	r6, [pc, #604]	; 13ccbc <alloc_rev+0x274>
  13ca5c:	e59d3004 	ldr	r3, [sp, #4]
  13ca60:	e5938000 	ldr	r8, [r3]
  13ca64:	e3180001 	tst	r8, #1
  13ca68:	1a000055 	bne	13cbc4 <alloc_rev+0x17c>
  13ca6c:	e1a07228 	lsr	r7, r8, #4
  13ca70:	e2477001 	sub	r7, r7, #1
  13ca74:	e3570020 	cmp	r7, #32
  13ca78:	9a000005 	bls	13ca94 <alloc_rev+0x4c>
  13ca7c:	e59f323c 	ldr	r3, [pc, #572]	; 13ccc0 <alloc_rev+0x278>
  13ca80:	e1570003 	cmp	r7, r3
  13ca84:	8a000058 	bhi	13cbec <alloc_rev+0x1a4>
  13ca88:	e59f3234 	ldr	r3, [pc, #564]	; 13ccc4 <alloc_rev+0x27c>
  13ca8c:	e08371a7 	add	r7, r3, r7, lsr #3
  13ca90:	e5577004 	ldrb	r7, [r7, #-4]
  13ca94:	e1a0b007 	mov	fp, r7
  13ca98:	e1a04207 	lsl	r4, r7, #4
  13ca9c:	e2844008 	add	r4, r4, #8
  13caa0:	e59f3220 	ldr	r3, [pc, #544]	; 13ccc8 <alloc_rev+0x280>
  13caa4:	e0894004 	add	r4, r9, r4
  13caa8:	e593300c 	ldr	r3, [r3, #12]
  13caac:	e3530000 	cmp	r3, #0
  13cab0:	1284a004 	addne	sl, r4, #4
  13cab4:	1a000032 	bne	13cb84 <alloc_rev+0x13c>
  13cab8:	e28b3001 	add	r3, fp, #1
  13cabc:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13cac0:	e3520000 	cmp	r2, #0
  13cac4:	1a000053 	bne	13cc18 <alloc_rev+0x1d0>
  13cac8:	e1a02008 	mov	r2, r8
  13cacc:	e0891207 	add	r1, r9, r7, lsl #4
  13cad0:	e2811008 	add	r1, r1, #8
  13cad4:	e0890203 	add	r0, r9, r3, lsl #4
  13cad8:	e7891203 	str	r1, [r9, r3, lsl #4]
  13cadc:	e5801004 	str	r1, [r0, #4]
  13cae0:	e1580002 	cmp	r8, r2
  13cae4:	0a00004b 	beq	13cc18 <alloc_rev+0x1d0>
  13cae8:	e5943000 	ldr	r3, [r4]
  13caec:	e3530000 	cmp	r3, #0
  13caf0:	0a000030 	beq	13cbb8 <alloc_rev+0x170>
  13caf4:	e59f31d0 	ldr	r3, [pc, #464]	; 13cccc <alloc_rev+0x284>
  13caf8:	e593c000 	ldr	ip, [r3]
  13cafc:	e12fff3c 	blx	ip
  13cb00:	e3a02000 	mov	r2, #0
  13cb04:	e593c000 	ldr	ip, [r3]
  13cb08:	e5842000 	str	r2, [r4]
  13cb0c:	e12fff3c 	blx	ip
  13cb10:	e5943004 	ldr	r3, [r4, #4]
  13cb14:	e1530002 	cmp	r3, r2
  13cb18:	0affffcf 	beq	13ca5c <alloc_rev+0x14>
  13cb1c:	e3a000f0 	mov	r0, #240	; 0xf0
  13cb20:	ebfffe24 	bl	13c3b8 <get_rtt_syscall>
  13cb24:	e2503000 	subs	r3, r0, #0
  13cb28:	0affffca 	beq	13ca58 <alloc_rev+0x10>
  13cb2c:	e3a02001 	mov	r2, #1
  13cb30:	e3a01081 	mov	r1, #129	; 0x81
  13cb34:	e1a00004 	mov	r0, r4
  13cb38:	e12fff33 	blx	r3
  13cb3c:	e3700026 	cmn	r0, #38	; 0x26
  13cb40:	1affffc4 	bne	13ca58 <alloc_rev+0x10>
  13cb44:	e3a000f0 	mov	r0, #240	; 0xf0
  13cb48:	ebfffe1a 	bl	13c3b8 <get_rtt_syscall>
  13cb4c:	e2503000 	subs	r3, r0, #0
  13cb50:	0affffc0 	beq	13ca58 <alloc_rev+0x10>
  13cb54:	e3a02001 	mov	r2, #1
  13cb58:	e1a00004 	mov	r0, r4
  13cb5c:	e1a01002 	mov	r1, r2
  13cb60:	e12fff33 	blx	r3
  13cb64:	eaffffbb 	b	13ca58 <alloc_rev+0x10>
  13cb68:	e3550000 	cmp	r5, #0
  13cb6c:	0a000017 	beq	13cbd0 <alloc_rev+0x188>
  13cb70:	e1a03001 	mov	r3, r1
  13cb74:	e1a02001 	mov	r2, r1
  13cb78:	e1a00004 	mov	r0, r4
  13cb7c:	e1a0100a 	mov	r1, sl
  13cb80:	eb001475 	bl	141d5c <__wait>
  13cb84:	e5945000 	ldr	r5, [r4]
  13cb88:	ea000002 	b	13cb98 <alloc_rev+0x150>
  13cb8c:	e5943000 	ldr	r3, [r4]
  13cb90:	e1550003 	cmp	r5, r3
  13cb94:	1afffffa 	bne	13cb84 <alloc_rev+0x13c>
  13cb98:	e1a00005 	mov	r0, r5
  13cb9c:	e3a01001 	mov	r1, #1
  13cba0:	e1a02004 	mov	r2, r4
  13cba4:	e5963000 	ldr	r3, [r6]
  13cba8:	e12fff33 	blx	r3
  13cbac:	e3500000 	cmp	r0, #0
  13cbb0:	1afffff5 	bne	13cb8c <alloc_rev+0x144>
  13cbb4:	eaffffeb 	b	13cb68 <alloc_rev+0x120>
  13cbb8:	e1a08002 	mov	r8, r2
  13cbbc:	e3180001 	tst	r8, #1
  13cbc0:	0affffa9 	beq	13ca6c <alloc_rev+0x24>
  13cbc4:	e3a00000 	mov	r0, #0
  13cbc8:	e28dd00c 	add	sp, sp, #12
  13cbcc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13cbd0:	e28b3001 	add	r3, fp, #1
  13cbd4:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13cbd8:	e59d2004 	ldr	r2, [sp, #4]
  13cbdc:	e3510000 	cmp	r1, #0
  13cbe0:	e5922000 	ldr	r2, [r2]
  13cbe4:	1affffbd 	bne	13cae0 <alloc_rev+0x98>
  13cbe8:	eaffffb7 	b	13cacc <alloc_rev+0x84>
  13cbec:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13cbf0:	83a0703f 	movhi	r7, #63	; 0x3f
  13cbf4:	959f30c8 	ldrls	r3, [pc, #200]	; 13ccc4 <alloc_rev+0x27c>
  13cbf8:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13cbfc:	908373a7 	addls	r7, r3, r7, lsr #7
  13cc00:	95577004 	ldrbls	r7, [r7, #-4]
  13cc04:	92877010 	addls	r7, r7, #16
  13cc08:	91a04207 	lslls	r4, r7, #4
  13cc0c:	92844008 	addls	r4, r4, #8
  13cc10:	e1a0b007 	mov	fp, r7
  13cc14:	eaffffa1 	b	13caa0 <alloc_rev+0x58>
  13cc18:	e59d3004 	ldr	r3, [sp, #4]
  13cc1c:	e3c80001 	bic	r0, r8, #1
  13cc20:	e0430000 	sub	r0, r3, r0
  13cc24:	e1a0100b 	mov	r1, fp
  13cc28:	ebfffe9c 	bl	13c6a0 <unbin>
  13cc2c:	e5943000 	ldr	r3, [r4]
  13cc30:	e3530000 	cmp	r3, #0
  13cc34:	0a000009 	beq	13cc60 <alloc_rev+0x218>
  13cc38:	e59f308c 	ldr	r3, [pc, #140]	; 13cccc <alloc_rev+0x284>
  13cc3c:	e593c000 	ldr	ip, [r3]
  13cc40:	e12fff3c 	blx	ip
  13cc44:	e3a02000 	mov	r2, #0
  13cc48:	e593c000 	ldr	ip, [r3]
  13cc4c:	e5842000 	str	r2, [r4]
  13cc50:	e12fff3c 	blx	ip
  13cc54:	e5943004 	ldr	r3, [r4, #4]
  13cc58:	e1530002 	cmp	r3, r2
  13cc5c:	1a000002 	bne	13cc6c <alloc_rev+0x224>
  13cc60:	e3a00001 	mov	r0, #1
  13cc64:	e28dd00c 	add	sp, sp, #12
  13cc68:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13cc6c:	e3a000f0 	mov	r0, #240	; 0xf0
  13cc70:	ebfffdd0 	bl	13c3b8 <get_rtt_syscall>
  13cc74:	e2503000 	subs	r3, r0, #0
  13cc78:	0afffff8 	beq	13cc60 <alloc_rev+0x218>
  13cc7c:	e3a02001 	mov	r2, #1
  13cc80:	e3a01081 	mov	r1, #129	; 0x81
  13cc84:	e1a00004 	mov	r0, r4
  13cc88:	e12fff33 	blx	r3
  13cc8c:	e3700026 	cmn	r0, #38	; 0x26
  13cc90:	1afffff2 	bne	13cc60 <alloc_rev+0x218>
  13cc94:	e3a000f0 	mov	r0, #240	; 0xf0
  13cc98:	ebfffdc6 	bl	13c3b8 <get_rtt_syscall>
  13cc9c:	e2503000 	subs	r3, r0, #0
  13cca0:	0affffee 	beq	13cc60 <alloc_rev+0x218>
  13cca4:	e3a02001 	mov	r2, #1
  13cca8:	e1a00004 	mov	r0, r4
  13ccac:	e1a01002 	mov	r1, r2
  13ccb0:	e12fff33 	blx	r3
  13ccb4:	eaffffe9 	b	13cc60 <alloc_rev+0x218>
  13ccb8:	0014ec40 	.word	0x0014ec40
  13ccbc:	0014d3d8 	.word	0x0014d3d8
  13ccc0:	000001ff 	.word	0x000001ff
  13ccc4:	0014cd54 	.word	0x0014cd54
  13ccc8:	0056f058 	.word	0x0056f058
  13cccc:	0014d3d4 	.word	0x0014d3d4

0013ccd0 <__bin_chunk>:
  13ccd0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13ccd4:	e5903004 	ldr	r3, [r0, #4]
  13ccd8:	e24dd01c 	sub	sp, sp, #28
  13ccdc:	e3c31001 	bic	r1, r3, #1
  13cce0:	e7902001 	ldr	r2, [r0, r1]
  13cce4:	e1a06000 	mov	r6, r0
  13cce8:	e1530002 	cmp	r3, r2
  13ccec:	e58d1010 	str	r1, [sp, #16]
  13ccf0:	e080b001 	add	fp, r0, r1
  13ccf4:	0a000000 	beq	13ccfc <__bin_chunk+0x2c>
  13ccf8:	e7f000f0 	.word	0xe7f000f0
  13ccfc:	e59d3010 	ldr	r3, [sp, #16]
  13cd00:	e59f55e8 	ldr	r5, [pc, #1512]	; 13d2f0 <__bin_chunk+0x620>
  13cd04:	e58d3000 	str	r3, [sp]
  13cd08:	e3a03000 	mov	r3, #0
  13cd0c:	e58d3014 	str	r3, [sp, #20]
  13cd10:	e2853b01 	add	r3, r5, #1024	; 0x400
  13cd14:	e283300c 	add	r3, r3, #12
  13cd18:	e59f95d4 	ldr	r9, [pc, #1492]	; 13d2f4 <__bin_chunk+0x624>
  13cd1c:	e58d300c 	str	r3, [sp, #12]
  13cd20:	e5963000 	ldr	r3, [r6]
  13cd24:	e59b2004 	ldr	r2, [fp, #4]
  13cd28:	e0033002 	and	r3, r3, r2
  13cd2c:	e3130001 	tst	r3, #1
  13cd30:	0a000038 	beq	13ce18 <__bin_chunk+0x148>
  13cd34:	e59d1000 	ldr	r1, [sp]
  13cd38:	e1a03221 	lsr	r3, r1, #4
  13cd3c:	e2432001 	sub	r2, r3, #1
  13cd40:	e3520020 	cmp	r2, #32
  13cd44:	e3813001 	orr	r3, r1, #1
  13cd48:	e5863004 	str	r3, [r6, #4]
  13cd4c:	e58d2008 	str	r2, [sp, #8]
  13cd50:	e58b3000 	str	r3, [fp]
  13cd54:	8a00006c 	bhi	13cf0c <__bin_chunk+0x23c>
  13cd58:	e1a04202 	lsl	r4, r2, #4
  13cd5c:	e2844008 	add	r4, r4, #8
  13cd60:	e58d2004 	str	r2, [sp, #4]
  13cd64:	e59f358c 	ldr	r3, [pc, #1420]	; 13d2f8 <__bin_chunk+0x628>
  13cd68:	e0854004 	add	r4, r5, r4
  13cd6c:	e593300c 	ldr	r3, [r3, #12]
  13cd70:	e3530000 	cmp	r3, #0
  13cd74:	12848004 	addne	r8, r4, #4
  13cd78:	1a000056 	bne	13ced8 <__bin_chunk+0x208>
  13cd7c:	e59d3004 	ldr	r3, [sp, #4]
  13cd80:	e2837001 	add	r7, r3, #1
  13cd84:	e7953207 	ldr	r3, [r5, r7, lsl #4]
  13cd88:	e3530000 	cmp	r3, #0
  13cd8c:	0a000069 	beq	13cf38 <__bin_chunk+0x268>
  13cd90:	e59f3560 	ldr	r3, [pc, #1376]	; 13d2f8 <__bin_chunk+0x628>
  13cd94:	e593300c 	ldr	r3, [r3, #12]
  13cd98:	e3530000 	cmp	r3, #0
  13cd9c:	1a00006f 	bne	13cf60 <__bin_chunk+0x290>
  13cda0:	e5963000 	ldr	r3, [r6]
  13cda4:	e59b2004 	ldr	r2, [fp, #4]
  13cda8:	e0033002 	and	r3, r3, r2
  13cdac:	e2133001 	ands	r3, r3, #1
  13cdb0:	1a0000b5 	bne	13d08c <__bin_chunk+0x3bc>
  13cdb4:	e5952408 	ldr	r2, [r5, #1032]	; 0x408
  13cdb8:	e3520000 	cmp	r2, #0
  13cdbc:	0a000008 	beq	13cde4 <__bin_chunk+0x114>
  13cdc0:	e59f2534 	ldr	r2, [pc, #1332]	; 13d2fc <__bin_chunk+0x62c>
  13cdc4:	e592c000 	ldr	ip, [r2]
  13cdc8:	e12fff3c 	blx	ip
  13cdcc:	e5853408 	str	r3, [r5, #1032]	; 0x408
  13cdd0:	e592c000 	ldr	ip, [r2]
  13cdd4:	e12fff3c 	blx	ip
  13cdd8:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13cddc:	e3530000 	cmp	r3, #0
  13cde0:	1a000095 	bne	13d03c <__bin_chunk+0x36c>
  13cde4:	e5943000 	ldr	r3, [r4]
  13cde8:	e3530000 	cmp	r3, #0
  13cdec:	0a000009 	beq	13ce18 <__bin_chunk+0x148>
  13cdf0:	e59f2504 	ldr	r2, [pc, #1284]	; 13d2fc <__bin_chunk+0x62c>
  13cdf4:	e592c000 	ldr	ip, [r2]
  13cdf8:	e12fff3c 	blx	ip
  13cdfc:	e3a03000 	mov	r3, #0
  13ce00:	e592c000 	ldr	ip, [r2]
  13ce04:	e5843000 	str	r3, [r4]
  13ce08:	e12fff3c 	blx	ip
  13ce0c:	e5943004 	ldr	r3, [r4, #4]
  13ce10:	e3530000 	cmp	r3, #0
  13ce14:	1a000075 	bne	13cff0 <__bin_chunk+0x320>
  13ce18:	e1a00006 	mov	r0, r6
  13ce1c:	ebffff09 	bl	13ca48 <alloc_rev>
  13ce20:	e3500000 	cmp	r0, #0
  13ce24:	0a000010 	beq	13ce6c <__bin_chunk+0x19c>
  13ce28:	e5963000 	ldr	r3, [r6]
  13ce2c:	e59d2010 	ldr	r2, [sp, #16]
  13ce30:	e3c33001 	bic	r3, r3, #1
  13ce34:	e0466003 	sub	r6, r6, r3
  13ce38:	e5963004 	ldr	r3, [r6, #4]
  13ce3c:	e59d1000 	ldr	r1, [sp]
  13ce40:	e3c33001 	bic	r3, r3, #1
  13ce44:	e0822003 	add	r2, r2, r3
  13ce48:	e0811003 	add	r1, r1, r3
  13ce4c:	e352090a 	cmp	r2, #163840	; 0x28000
  13ce50:	e58d1000 	str	r1, [sp]
  13ce54:	9a000004 	bls	13ce6c <__bin_chunk+0x19c>
  13ce58:	e0222003 	eor	r2, r2, r3
  13ce5c:	e1520003 	cmp	r2, r3
  13ce60:	e59d1014 	ldr	r1, [sp, #20]
  13ce64:	83a01001 	movhi	r1, #1
  13ce68:	e58d1014 	str	r1, [sp, #20]
  13ce6c:	e1a0000b 	mov	r0, fp
  13ce70:	ebfffe54 	bl	13c7c8 <alloc_fwd>
  13ce74:	e3500000 	cmp	r0, #0
  13ce78:	0affffa8 	beq	13cd20 <__bin_chunk+0x50>
  13ce7c:	e59b3004 	ldr	r3, [fp, #4]
  13ce80:	e59d2010 	ldr	r2, [sp, #16]
  13ce84:	e3c33001 	bic	r3, r3, #1
  13ce88:	e59d1000 	ldr	r1, [sp]
  13ce8c:	e0822003 	add	r2, r2, r3
  13ce90:	e0811003 	add	r1, r1, r3
  13ce94:	e352090a 	cmp	r2, #163840	; 0x28000
  13ce98:	e58d1000 	str	r1, [sp]
  13ce9c:	9a000004 	bls	13ceb4 <__bin_chunk+0x1e4>
  13cea0:	e0222003 	eor	r2, r2, r3
  13cea4:	e1520003 	cmp	r2, r3
  13cea8:	e59d1014 	ldr	r1, [sp, #20]
  13ceac:	83a01001 	movhi	r1, #1
  13ceb0:	e58d1014 	str	r1, [sp, #20]
  13ceb4:	e08bb003 	add	fp, fp, r3
  13ceb8:	eaffff98 	b	13cd20 <__bin_chunk+0x50>
  13cebc:	e3570000 	cmp	r7, #0
  13cec0:	0affffad 	beq	13cd7c <__bin_chunk+0xac>
  13cec4:	e1a03001 	mov	r3, r1
  13cec8:	e1a02001 	mov	r2, r1
  13cecc:	e1a00004 	mov	r0, r4
  13ced0:	e1a01008 	mov	r1, r8
  13ced4:	eb0013a0 	bl	141d5c <__wait>
  13ced8:	e5947000 	ldr	r7, [r4]
  13cedc:	ea000002 	b	13ceec <__bin_chunk+0x21c>
  13cee0:	e5943000 	ldr	r3, [r4]
  13cee4:	e1570003 	cmp	r7, r3
  13cee8:	1afffffa 	bne	13ced8 <__bin_chunk+0x208>
  13ceec:	e1a00007 	mov	r0, r7
  13cef0:	e3a01001 	mov	r1, #1
  13cef4:	e1a02004 	mov	r2, r4
  13cef8:	e5993000 	ldr	r3, [r9]
  13cefc:	e12fff33 	blx	r3
  13cf00:	e3500000 	cmp	r0, #0
  13cf04:	1afffff5 	bne	13cee0 <__bin_chunk+0x210>
  13cf08:	eaffffeb 	b	13cebc <__bin_chunk+0x1ec>
  13cf0c:	e59d3008 	ldr	r3, [sp, #8]
  13cf10:	e3530c02 	cmp	r3, #512	; 0x200
  13cf14:	2a000027 	bcs	13cfb8 <__bin_chunk+0x2e8>
  13cf18:	e59f23e0 	ldr	r2, [pc, #992]	; 13d300 <__bin_chunk+0x630>
  13cf1c:	e08231a3 	add	r3, r2, r3, lsr #3
  13cf20:	e5533004 	ldrb	r3, [r3, #-4]
  13cf24:	e1a04203 	lsl	r4, r3, #4
  13cf28:	e58d3008 	str	r3, [sp, #8]
  13cf2c:	e2844008 	add	r4, r4, #8
  13cf30:	e58d3004 	str	r3, [sp, #4]
  13cf34:	eaffff8a 	b	13cd64 <__bin_chunk+0x94>
  13cf38:	e59d3008 	ldr	r3, [sp, #8]
  13cf3c:	e0852207 	add	r2, r5, r7, lsl #4
  13cf40:	e0853203 	add	r3, r5, r3, lsl #4
  13cf44:	e2833008 	add	r3, r3, #8
  13cf48:	e7853207 	str	r3, [r5, r7, lsl #4]
  13cf4c:	e5823004 	str	r3, [r2, #4]
  13cf50:	e59f33a0 	ldr	r3, [pc, #928]	; 13d2f8 <__bin_chunk+0x628>
  13cf54:	e593300c 	ldr	r3, [r3, #12]
  13cf58:	e3530000 	cmp	r3, #0
  13cf5c:	0affff8f 	beq	13cda0 <__bin_chunk+0xd0>
  13cf60:	e59f339c 	ldr	r3, [pc, #924]	; 13d304 <__bin_chunk+0x634>
  13cf64:	e283a008 	add	sl, r3, #8
  13cf68:	e5958408 	ldr	r8, [r5, #1032]	; 0x408
  13cf6c:	ea000002 	b	13cf7c <__bin_chunk+0x2ac>
  13cf70:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13cf74:	e1580003 	cmp	r8, r3
  13cf78:	1afffffa 	bne	13cf68 <__bin_chunk+0x298>
  13cf7c:	e1a00008 	mov	r0, r8
  13cf80:	e3a01001 	mov	r1, #1
  13cf84:	e1a0200a 	mov	r2, sl
  13cf88:	e5993000 	ldr	r3, [r9]
  13cf8c:	e12fff33 	blx	r3
  13cf90:	e3500000 	cmp	r0, #0
  13cf94:	1afffff5 	bne	13cf70 <__bin_chunk+0x2a0>
  13cf98:	e3580000 	cmp	r8, #0
  13cf9c:	0affff7f 	beq	13cda0 <__bin_chunk+0xd0>
  13cfa0:	e1a03001 	mov	r3, r1
  13cfa4:	e1a02001 	mov	r2, r1
  13cfa8:	e1a0000a 	mov	r0, sl
  13cfac:	e59d100c 	ldr	r1, [sp, #12]
  13cfb0:	eb001369 	bl	141d5c <__wait>
  13cfb4:	eaffffeb 	b	13cf68 <__bin_chunk+0x298>
  13cfb8:	e59d3008 	ldr	r3, [sp, #8]
  13cfbc:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13cfc0:	83a0303f 	movhi	r3, #63	; 0x3f
  13cfc4:	959f2334 	ldrls	r2, [pc, #820]	; 13d300 <__bin_chunk+0x630>
  13cfc8:	858d3008 	strhi	r3, [sp, #8]
  13cfcc:	908233a3 	addls	r3, r2, r3, lsr #7
  13cfd0:	95533004 	ldrbls	r3, [r3, #-4]
  13cfd4:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13cfd8:	92833010 	addls	r3, r3, #16
  13cfdc:	91a04203 	lslls	r4, r3, #4
  13cfe0:	958d3008 	strls	r3, [sp, #8]
  13cfe4:	92844008 	addls	r4, r4, #8
  13cfe8:	e58d3004 	str	r3, [sp, #4]
  13cfec:	eaffff5c 	b	13cd64 <__bin_chunk+0x94>
  13cff0:	e3a000f0 	mov	r0, #240	; 0xf0
  13cff4:	ebfffcef 	bl	13c3b8 <get_rtt_syscall>
  13cff8:	e2503000 	subs	r3, r0, #0
  13cffc:	0affff85 	beq	13ce18 <__bin_chunk+0x148>
  13d000:	e3a02001 	mov	r2, #1
  13d004:	e3a01081 	mov	r1, #129	; 0x81
  13d008:	e1a00004 	mov	r0, r4
  13d00c:	e12fff33 	blx	r3
  13d010:	e3700026 	cmn	r0, #38	; 0x26
  13d014:	1affff7f 	bne	13ce18 <__bin_chunk+0x148>
  13d018:	e3a000f0 	mov	r0, #240	; 0xf0
  13d01c:	ebfffce5 	bl	13c3b8 <get_rtt_syscall>
  13d020:	e2503000 	subs	r3, r0, #0
  13d024:	0affff7b 	beq	13ce18 <__bin_chunk+0x148>
  13d028:	e3a02001 	mov	r2, #1
  13d02c:	e1a00004 	mov	r0, r4
  13d030:	e1a01002 	mov	r1, r2
  13d034:	e12fff33 	blx	r3
  13d038:	eaffff76 	b	13ce18 <__bin_chunk+0x148>
  13d03c:	e3a000f0 	mov	r0, #240	; 0xf0
  13d040:	ebfffcdc 	bl	13c3b8 <get_rtt_syscall>
  13d044:	e2503000 	subs	r3, r0, #0
  13d048:	e59f72b8 	ldr	r7, [pc, #696]	; 13d308 <__bin_chunk+0x638>
  13d04c:	0affff64 	beq	13cde4 <__bin_chunk+0x114>
  13d050:	e3a02001 	mov	r2, #1
  13d054:	e3a01081 	mov	r1, #129	; 0x81
  13d058:	e1a00007 	mov	r0, r7
  13d05c:	e12fff33 	blx	r3
  13d060:	e3700026 	cmn	r0, #38	; 0x26
  13d064:	1affff5e 	bne	13cde4 <__bin_chunk+0x114>
  13d068:	e3a000f0 	mov	r0, #240	; 0xf0
  13d06c:	ebfffcd1 	bl	13c3b8 <get_rtt_syscall>
  13d070:	e2503000 	subs	r3, r0, #0
  13d074:	0affff5a 	beq	13cde4 <__bin_chunk+0x114>
  13d078:	e3a02001 	mov	r2, #1
  13d07c:	e1a00007 	mov	r0, r7
  13d080:	e1a01002 	mov	r1, r2
  13d084:	e12fff33 	blx	r3
  13d088:	eaffff55 	b	13cde4 <__bin_chunk+0x114>
  13d08c:	e59d3004 	ldr	r3, [sp, #4]
  13d090:	e8950006 	ldm	r5, {r1, r2}
  13d094:	e263c020 	rsb	ip, r3, #32
  13d098:	e1a08331 	lsr	r8, r1, r3
  13d09c:	e2430020 	sub	r0, r3, #32
  13d0a0:	e3a03000 	mov	r3, #0
  13d0a4:	e1888c12 	orr	r8, r8, r2, lsl ip
  13d0a8:	e1888032 	orr	r8, r8, r2, lsr r0
  13d0ac:	e2082001 	and	r2, r8, #1
  13d0b0:	e1923003 	orrs	r3, r2, r3
  13d0b4:	0a00005d 	beq	13d230 <__bin_chunk+0x560>
  13d0b8:	e59d3000 	ldr	r3, [sp]
  13d0bc:	e5863004 	str	r3, [r6, #4]
  13d0c0:	e58b3000 	str	r3, [fp]
  13d0c4:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13d0c8:	e3530000 	cmp	r3, #0
  13d0cc:	0a000009 	beq	13d0f8 <__bin_chunk+0x428>
  13d0d0:	e59f3224 	ldr	r3, [pc, #548]	; 13d2fc <__bin_chunk+0x62c>
  13d0d4:	e593c000 	ldr	ip, [r3]
  13d0d8:	e12fff3c 	blx	ip
  13d0dc:	e3a02000 	mov	r2, #0
  13d0e0:	e593c000 	ldr	ip, [r3]
  13d0e4:	e5852408 	str	r2, [r5, #1032]	; 0x408
  13d0e8:	e12fff3c 	blx	ip
  13d0ec:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13d0f0:	e1530002 	cmp	r3, r2
  13d0f4:	1a000039 	bne	13d1e0 <__bin_chunk+0x510>
  13d0f8:	e59d3008 	ldr	r3, [sp, #8]
  13d0fc:	e0857207 	add	r7, r5, r7, lsl #4
  13d100:	e2833001 	add	r3, r3, #1
  13d104:	e5972004 	ldr	r2, [r7, #4]
  13d108:	e0855203 	add	r5, r5, r3, lsl #4
  13d10c:	e2453008 	sub	r3, r5, #8
  13d110:	e586200c 	str	r2, [r6, #12]
  13d114:	e5863008 	str	r3, [r6, #8]
  13d118:	e59d2014 	ldr	r2, [sp, #20]
  13d11c:	e5856004 	str	r6, [r5, #4]
  13d120:	e596300c 	ldr	r3, [r6, #12]
  13d124:	e3520000 	cmp	r2, #0
  13d128:	e5836008 	str	r6, [r3, #8]
  13d12c:	0a000008 	beq	13d154 <__bin_chunk+0x484>
  13d130:	e59f31d4 	ldr	r3, [pc, #468]	; 13d30c <__bin_chunk+0x63c>
  13d134:	e2866a01 	add	r6, r6, #4096	; 0x1000
  13d138:	e286600f 	add	r6, r6, #15
  13d13c:	e24b1010 	sub	r1, fp, #16
  13d140:	e0060003 	and	r0, r6, r3
  13d144:	e0011003 	and	r1, r1, r3
  13d148:	e0411000 	sub	r1, r1, r0
  13d14c:	e3a02004 	mov	r2, #4
  13d150:	eb0002ca 	bl	13dc80 <__madvise>
  13d154:	e5943000 	ldr	r3, [r4]
  13d158:	e3530000 	cmp	r3, #0
  13d15c:	0a000009 	beq	13d188 <__bin_chunk+0x4b8>
  13d160:	e59f3194 	ldr	r3, [pc, #404]	; 13d2fc <__bin_chunk+0x62c>
  13d164:	e593c000 	ldr	ip, [r3]
  13d168:	e12fff3c 	blx	ip
  13d16c:	e3a02000 	mov	r2, #0
  13d170:	e593c000 	ldr	ip, [r3]
  13d174:	e5842000 	str	r2, [r4]
  13d178:	e12fff3c 	blx	ip
  13d17c:	e5943004 	ldr	r3, [r4, #4]
  13d180:	e1530002 	cmp	r3, r2
  13d184:	1a000001 	bne	13d190 <__bin_chunk+0x4c0>
  13d188:	e28dd01c 	add	sp, sp, #28
  13d18c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d190:	e3a000f0 	mov	r0, #240	; 0xf0
  13d194:	ebfffc87 	bl	13c3b8 <get_rtt_syscall>
  13d198:	e2503000 	subs	r3, r0, #0
  13d19c:	0afffff9 	beq	13d188 <__bin_chunk+0x4b8>
  13d1a0:	e3a02001 	mov	r2, #1
  13d1a4:	e3a01081 	mov	r1, #129	; 0x81
  13d1a8:	e1a00004 	mov	r0, r4
  13d1ac:	e12fff33 	blx	r3
  13d1b0:	e3700026 	cmn	r0, #38	; 0x26
  13d1b4:	1afffff3 	bne	13d188 <__bin_chunk+0x4b8>
  13d1b8:	e3a000f0 	mov	r0, #240	; 0xf0
  13d1bc:	ebfffc7d 	bl	13c3b8 <get_rtt_syscall>
  13d1c0:	e2503000 	subs	r3, r0, #0
  13d1c4:	0affffef 	beq	13d188 <__bin_chunk+0x4b8>
  13d1c8:	e3a02001 	mov	r2, #1
  13d1cc:	e1a00004 	mov	r0, r4
  13d1d0:	e1a01002 	mov	r1, r2
  13d1d4:	e28dd01c 	add	sp, sp, #28
  13d1d8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13d1dc:	e12fff13 	bx	r3
  13d1e0:	e3a000f0 	mov	r0, #240	; 0xf0
  13d1e4:	ebfffc73 	bl	13c3b8 <get_rtt_syscall>
  13d1e8:	e2503000 	subs	r3, r0, #0
  13d1ec:	e59f8114 	ldr	r8, [pc, #276]	; 13d308 <__bin_chunk+0x638>
  13d1f0:	0affffc0 	beq	13d0f8 <__bin_chunk+0x428>
  13d1f4:	e3a02001 	mov	r2, #1
  13d1f8:	e3a01081 	mov	r1, #129	; 0x81
  13d1fc:	e1a00008 	mov	r0, r8
  13d200:	e12fff33 	blx	r3
  13d204:	e3700026 	cmn	r0, #38	; 0x26
  13d208:	1affffba 	bne	13d0f8 <__bin_chunk+0x428>
  13d20c:	e3a000f0 	mov	r0, #240	; 0xf0
  13d210:	ebfffc68 	bl	13c3b8 <get_rtt_syscall>
  13d214:	e2503000 	subs	r3, r0, #0
  13d218:	0affffb6 	beq	13d0f8 <__bin_chunk+0x428>
  13d21c:	e3a02001 	mov	r2, #1
  13d220:	e1a00008 	mov	r0, r8
  13d224:	e1a01002 	mov	r1, r2
  13d228:	e12fff33 	blx	r3
  13d22c:	eaffffb1 	b	13d0f8 <__bin_chunk+0x428>
  13d230:	e3a03001 	mov	r3, #1
  13d234:	e59d1004 	ldr	r1, [sp, #4]
  13d238:	e1a02013 	lsl	r2, r3, r0
  13d23c:	e1b01113 	lsls	r1, r3, r1
  13d240:	e1823c33 	orr	r3, r2, r3, lsr ip
  13d244:	e58d100c 	str	r1, [sp, #12]
  13d248:	e58d3004 	str	r3, [sp, #4]
  13d24c:	0a000011 	beq	13d298 <__bin_chunk+0x5c8>
  13d250:	e59f809c 	ldr	r8, [pc, #156]	; 13d2f4 <__bin_chunk+0x624>
  13d254:	e59fa094 	ldr	sl, [pc, #148]	; 13d2f0 <__bin_chunk+0x620>
  13d258:	e58db010 	str	fp, [sp, #16]
  13d25c:	e5959000 	ldr	r9, [r5]
  13d260:	e59d300c 	ldr	r3, [sp, #12]
  13d264:	e183b009 	orr	fp, r3, r9
  13d268:	ea000002 	b	13d278 <__bin_chunk+0x5a8>
  13d26c:	e5953000 	ldr	r3, [r5]
  13d270:	e1590003 	cmp	r9, r3
  13d274:	1afffff8 	bne	13d25c <__bin_chunk+0x58c>
  13d278:	e1a00009 	mov	r0, r9
  13d27c:	e1a0100b 	mov	r1, fp
  13d280:	e1a0200a 	mov	r2, sl
  13d284:	e5983000 	ldr	r3, [r8]
  13d288:	e12fff33 	blx	r3
  13d28c:	e3500000 	cmp	r0, #0
  13d290:	1afffff5 	bne	13d26c <__bin_chunk+0x59c>
  13d294:	e59db010 	ldr	fp, [sp, #16]
  13d298:	e59d3004 	ldr	r3, [sp, #4]
  13d29c:	e3530000 	cmp	r3, #0
  13d2a0:	0affff84 	beq	13d0b8 <__bin_chunk+0x3e8>
  13d2a4:	e59f8048 	ldr	r8, [pc, #72]	; 13d2f4 <__bin_chunk+0x624>
  13d2a8:	e59fa060 	ldr	sl, [pc, #96]	; 13d310 <__bin_chunk+0x640>
  13d2ac:	e58db00c 	str	fp, [sp, #12]
  13d2b0:	e5959004 	ldr	r9, [r5, #4]
  13d2b4:	e59d3004 	ldr	r3, [sp, #4]
  13d2b8:	e183b009 	orr	fp, r3, r9
  13d2bc:	ea000002 	b	13d2cc <__bin_chunk+0x5fc>
  13d2c0:	e5953004 	ldr	r3, [r5, #4]
  13d2c4:	e1590003 	cmp	r9, r3
  13d2c8:	1afffff8 	bne	13d2b0 <__bin_chunk+0x5e0>
  13d2cc:	e1a00009 	mov	r0, r9
  13d2d0:	e1a0100b 	mov	r1, fp
  13d2d4:	e1a0200a 	mov	r2, sl
  13d2d8:	e5983000 	ldr	r3, [r8]
  13d2dc:	e12fff33 	blx	r3
  13d2e0:	e3500000 	cmp	r0, #0
  13d2e4:	1afffff5 	bne	13d2c0 <__bin_chunk+0x5f0>
  13d2e8:	e59db00c 	ldr	fp, [sp, #12]
  13d2ec:	eaffff71 	b	13d0b8 <__bin_chunk+0x3e8>
  13d2f0:	0014ec40 	.word	0x0014ec40
  13d2f4:	0014d3d8 	.word	0x0014d3d8
  13d2f8:	0056f058 	.word	0x0056f058
  13d2fc:	0014d3d4 	.word	0x0014d3d4
  13d300:	0014cd54 	.word	0x0014cd54
  13d304:	0014f040 	.word	0x0014f040
  13d308:	0014f048 	.word	0x0014f048
  13d30c:	fffff000 	.word	0xfffff000
  13d310:	0014ec44 	.word	0x0014ec44

0013d314 <trim>:
  13d314:	e5903004 	ldr	r3, [r0, #4]
  13d318:	e1a02000 	mov	r2, r0
  13d31c:	e3c33001 	bic	r3, r3, #1
  13d320:	e2430010 	sub	r0, r3, #16
  13d324:	e1500001 	cmp	r0, r1
  13d328:	912fff1e 	bxls	lr
  13d32c:	e043c001 	sub	ip, r3, r1
  13d330:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13d334:	e38cc001 	orr	ip, ip, #1
  13d338:	e381e001 	orr	lr, r1, #1
  13d33c:	e0820001 	add	r0, r2, r1
  13d340:	e782e001 	str	lr, [r2, r1]
  13d344:	e580c004 	str	ip, [r0, #4]
  13d348:	e782c003 	str	ip, [r2, r3]
  13d34c:	e582e004 	str	lr, [r2, #4]
  13d350:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13d354:	eafffe5d 	b	13ccd0 <__bin_chunk>

0013d358 <malloc>:
  13d358:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13d35c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  13d360:	e28d3028 	add	r3, sp, #40	; 0x28
  13d364:	e523000c 	str	r0, [r3, #-12]!
  13d368:	e1a00003 	mov	r0, r3
  13d36c:	ebfffcb1 	bl	13c638 <adjust_size>
  13d370:	e3500000 	cmp	r0, #0
  13d374:	ba000145 	blt	13d890 <malloc+0x538>
  13d378:	e59d301c 	ldr	r3, [sp, #28]
  13d37c:	e3530907 	cmp	r3, #114688	; 0x1c000
  13d380:	8a000076 	bhi	13d560 <malloc+0x208>
  13d384:	e1a03223 	lsr	r3, r3, #4
  13d388:	e2432001 	sub	r2, r3, #1
  13d38c:	e3520020 	cmp	r2, #32
  13d390:	958d2018 	strls	r2, [sp, #24]
  13d394:	8a000066 	bhi	13d534 <malloc+0x1dc>
  13d398:	e3a01001 	mov	r1, #1
  13d39c:	e59dc018 	ldr	ip, [sp, #24]
  13d3a0:	e59f85a8 	ldr	r8, [pc, #1448]	; 13d950 <malloc+0x5f8>
  13d3a4:	e24c0020 	sub	r0, ip, #32
  13d3a8:	e1a03011 	lsl	r3, r1, r0
  13d3ac:	e1a02c11 	lsl	r2, r1, ip
  13d3b0:	e26c0020 	rsb	r0, ip, #32
  13d3b4:	e2722000 	rsbs	r2, r2, #0
  13d3b8:	e1833031 	orr	r3, r3, r1, lsr r0
  13d3bc:	e2e33000 	rsc	r3, r3, #0
  13d3c0:	e58d2010 	str	r2, [sp, #16]
  13d3c4:	e58d3014 	str	r3, [sp, #20]
  13d3c8:	e59fb584 	ldr	fp, [pc, #1412]	; 13d954 <malloc+0x5fc>
  13d3cc:	e59f6584 	ldr	r6, [pc, #1412]	; 13d958 <malloc+0x600>
  13d3d0:	e898000c 	ldm	r8, {r2, r3}
  13d3d4:	e28d1010 	add	r1, sp, #16
  13d3d8:	e8910003 	ldm	r1, {r0, r1}
  13d3dc:	e0011003 	and	r1, r1, r3
  13d3e0:	e0000002 	and	r0, r0, r2
  13d3e4:	e1a02000 	mov	r2, r0
  13d3e8:	e1a03001 	mov	r3, r1
  13d3ec:	e1921003 	orrs	r1, r2, r3
  13d3f0:	0a000073 	beq	13d5c4 <malloc+0x26c>
  13d3f4:	e3500000 	cmp	r0, #0
  13d3f8:	1a000048 	bne	13d520 <malloc+0x1c8>
  13d3fc:	e2637000 	rsb	r7, r3, #0
  13d400:	e0077003 	and	r7, r7, r3
  13d404:	e16f7f17 	clz	r7, r7
  13d408:	e267703f 	rsb	r7, r7, #63	; 0x3f
  13d40c:	e59b300c 	ldr	r3, [fp, #12]
  13d410:	e1a09207 	lsl	r9, r7, #4
  13d414:	e2899008 	add	r9, r9, #8
  13d418:	e3530000 	cmp	r3, #0
  13d41c:	e0885009 	add	r5, r8, r9
  13d420:	1285a004 	addne	sl, r5, #4
  13d424:	1a000030 	bne	13d4ec <malloc+0x194>
  13d428:	e2873001 	add	r3, r7, #1
  13d42c:	e7984203 	ldr	r4, [r8, r3, lsl #4]
  13d430:	e0882009 	add	r2, r8, r9
  13d434:	e3540000 	cmp	r4, #0
  13d438:	00881203 	addeq	r1, r8, r3, lsl #4
  13d43c:	07882203 	streq	r2, [r8, r3, lsl #4]
  13d440:	05812004 	streq	r2, [r1, #4]
  13d444:	0a000001 	beq	13d450 <malloc+0xf8>
  13d448:	e1540002 	cmp	r4, r2
  13d44c:	1a00009d 	bne	13d6c8 <malloc+0x370>
  13d450:	e7983009 	ldr	r3, [r8, r9]
  13d454:	e3530000 	cmp	r3, #0
  13d458:	0affffdc 	beq	13d3d0 <malloc+0x78>
  13d45c:	e59f24f8 	ldr	r2, [pc, #1272]	; 13d95c <malloc+0x604>
  13d460:	e592c000 	ldr	ip, [r2]
  13d464:	e12fff3c 	blx	ip
  13d468:	e3a03000 	mov	r3, #0
  13d46c:	e592c000 	ldr	ip, [r2]
  13d470:	e5853000 	str	r3, [r5]
  13d474:	e12fff3c 	blx	ip
  13d478:	e5953004 	ldr	r3, [r5, #4]
  13d47c:	e3530000 	cmp	r3, #0
  13d480:	0affffd2 	beq	13d3d0 <malloc+0x78>
  13d484:	e3a000f0 	mov	r0, #240	; 0xf0
  13d488:	ebfffbca 	bl	13c3b8 <get_rtt_syscall>
  13d48c:	e2503000 	subs	r3, r0, #0
  13d490:	0affffce 	beq	13d3d0 <malloc+0x78>
  13d494:	e3a02001 	mov	r2, #1
  13d498:	e3a01081 	mov	r1, #129	; 0x81
  13d49c:	e1a00005 	mov	r0, r5
  13d4a0:	e12fff33 	blx	r3
  13d4a4:	e3700026 	cmn	r0, #38	; 0x26
  13d4a8:	1affffc8 	bne	13d3d0 <malloc+0x78>
  13d4ac:	e3a000f0 	mov	r0, #240	; 0xf0
  13d4b0:	ebfffbc0 	bl	13c3b8 <get_rtt_syscall>
  13d4b4:	e2503000 	subs	r3, r0, #0
  13d4b8:	0affffc4 	beq	13d3d0 <malloc+0x78>
  13d4bc:	e3a02001 	mov	r2, #1
  13d4c0:	e1a00005 	mov	r0, r5
  13d4c4:	e1a01002 	mov	r1, r2
  13d4c8:	e12fff33 	blx	r3
  13d4cc:	eaffffbf 	b	13d3d0 <malloc+0x78>
  13d4d0:	e3540000 	cmp	r4, #0
  13d4d4:	0affffd3 	beq	13d428 <malloc+0xd0>
  13d4d8:	e1a03001 	mov	r3, r1
  13d4dc:	e1a02001 	mov	r2, r1
  13d4e0:	e1a00005 	mov	r0, r5
  13d4e4:	e1a0100a 	mov	r1, sl
  13d4e8:	eb00121b 	bl	141d5c <__wait>
  13d4ec:	e5954000 	ldr	r4, [r5]
  13d4f0:	ea000002 	b	13d500 <malloc+0x1a8>
  13d4f4:	e5953000 	ldr	r3, [r5]
  13d4f8:	e1540003 	cmp	r4, r3
  13d4fc:	1afffffa 	bne	13d4ec <malloc+0x194>
  13d500:	e1a00004 	mov	r0, r4
  13d504:	e3a01001 	mov	r1, #1
  13d508:	e1a02005 	mov	r2, r5
  13d50c:	e5963000 	ldr	r3, [r6]
  13d510:	e12fff33 	blx	r3
  13d514:	e3500000 	cmp	r0, #0
  13d518:	1afffff5 	bne	13d4f4 <malloc+0x19c>
  13d51c:	eaffffeb 	b	13d4d0 <malloc+0x178>
  13d520:	e2607000 	rsb	r7, r0, #0
  13d524:	e0077000 	and	r7, r7, r0
  13d528:	e16f7f17 	clz	r7, r7
  13d52c:	e267701f 	rsb	r7, r7, #31
  13d530:	eaffffb5 	b	13d40c <malloc+0xb4>
  13d534:	e2433002 	sub	r3, r3, #2
  13d538:	e59f2420 	ldr	r2, [pc, #1056]	; 13d960 <malloc+0x608>
  13d53c:	e3530c02 	cmp	r3, #512	; 0x200
  13d540:	308231a3 	addcc	r3, r2, r3, lsr #3
  13d544:	208233a3 	addcs	r3, r2, r3, lsr #7
  13d548:	35533004 	ldrbcc	r3, [r3, #-4]
  13d54c:	25533004 	ldrbcs	r3, [r3, #-4]
  13d550:	32833001 	addcc	r3, r3, #1
  13d554:	22833011 	addcs	r3, r3, #17
  13d558:	e58d3018 	str	r3, [sp, #24]
  13d55c:	eaffff8d 	b	13d398 <malloc+0x40>
  13d560:	e3e02000 	mvn	r2, #0
  13d564:	e3a06000 	mov	r6, #0
  13d568:	e3a07000 	mov	r7, #0
  13d56c:	e2833a01 	add	r3, r3, #4096	; 0x1000
  13d570:	e2833007 	add	r3, r3, #7
  13d574:	e3c34eff 	bic	r4, r3, #4080	; 0xff0
  13d578:	e3c4400f 	bic	r4, r4, #15
  13d57c:	e58d2000 	str	r2, [sp]
  13d580:	e1a01004 	mov	r1, r4
  13d584:	e58d6008 	str	r6, [sp, #8]
  13d588:	e58d700c 	str	r7, [sp, #12]
  13d58c:	e3a03022 	mov	r3, #34	; 0x22
  13d590:	e3a02003 	mov	r2, #3
  13d594:	e3a00000 	mov	r0, #0
  13d598:	eb0001ca 	bl	13dcc8 <__mmap>
  13d59c:	e3700001 	cmn	r0, #1
  13d5a0:	0a0000ba 	beq	13d890 <malloc+0x538>
  13d5a4:	e3a03008 	mov	r3, #8
  13d5a8:	e2444008 	sub	r4, r4, #8
  13d5ac:	e580400c 	str	r4, [r0, #12]
  13d5b0:	e5803008 	str	r3, [r0, #8]
  13d5b4:	e2804010 	add	r4, r0, #16
  13d5b8:	e1a00004 	mov	r0, r4
  13d5bc:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d5c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d5c4:	e59b200c 	ldr	r2, [fp, #12]
  13d5c8:	e59d301c 	ldr	r3, [sp, #28]
  13d5cc:	e3520000 	cmp	r2, #0
  13d5d0:	e2833010 	add	r3, r3, #16
  13d5d4:	e59f5388 	ldr	r5, [pc, #904]	; 13d964 <malloc+0x60c>
  13d5d8:	e58d3024 	str	r3, [sp, #36]	; 0x24
  13d5dc:	1a000094 	bne	13d834 <malloc+0x4dc>
  13d5e0:	e28d0024 	add	r0, sp, #36	; 0x24
  13d5e4:	eb001718 	bl	14324c <__expand_heap>
  13d5e8:	e2504000 	subs	r4, r0, #0
  13d5ec:	0a0000b8 	beq	13d8d4 <malloc+0x57c>
  13d5f0:	e59f1370 	ldr	r1, [pc, #880]	; 13d968 <malloc+0x610>
  13d5f4:	e3a07001 	mov	r7, #1
  13d5f8:	e5916000 	ldr	r6, [r1]
  13d5fc:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  13d600:	e1540006 	cmp	r4, r6
  13d604:	13a02001 	movne	r2, #1
  13d608:	e5950000 	ldr	r0, [r5]
  13d60c:	12433010 	subne	r3, r3, #16
  13d610:	12846010 	addne	r6, r4, #16
  13d614:	15842008 	strne	r2, [r4, #8]
  13d618:	158d3024 	strne	r3, [sp, #36]	; 0x24
  13d61c:	e0862003 	add	r2, r6, r3
  13d620:	e3500000 	cmp	r0, #0
  13d624:	e1833007 	orr	r3, r3, r7
  13d628:	e9020088 	stmdb	r2, {r3, r7}
  13d62c:	e5812000 	str	r2, [r1]
  13d630:	e5063004 	str	r3, [r6, #-4]
  13d634:	e2464008 	sub	r4, r6, #8
  13d638:	0a000009 	beq	13d664 <malloc+0x30c>
  13d63c:	e59f3318 	ldr	r3, [pc, #792]	; 13d95c <malloc+0x604>
  13d640:	e593c000 	ldr	ip, [r3]
  13d644:	e12fff3c 	blx	ip
  13d648:	e3a02000 	mov	r2, #0
  13d64c:	e593c000 	ldr	ip, [r3]
  13d650:	e5852000 	str	r2, [r5]
  13d654:	e12fff3c 	blx	ip
  13d658:	e5953004 	ldr	r3, [r5, #4]
  13d65c:	e1530002 	cmp	r3, r2
  13d660:	1a000060 	bne	13d7e8 <malloc+0x490>
  13d664:	e3540000 	cmp	r4, #0
  13d668:	0a000088 	beq	13d890 <malloc+0x538>
  13d66c:	e1a00004 	mov	r0, r4
  13d670:	ebfffcf4 	bl	13ca48 <alloc_rev>
  13d674:	e3500000 	cmp	r0, #0
  13d678:	0a00000b 	beq	13d6ac <malloc+0x354>
  13d67c:	e5163008 	ldr	r3, [r6, #-8]
  13d680:	e5161004 	ldr	r1, [r6, #-4]
  13d684:	e3c33001 	bic	r3, r3, #1
  13d688:	e0443003 	sub	r3, r4, r3
  13d68c:	e5932004 	ldr	r2, [r3, #4]
  13d690:	e3c22001 	bic	r2, r2, #1
  13d694:	e0822001 	add	r2, r2, r1
  13d698:	e5832004 	str	r2, [r3, #4]
  13d69c:	e5161004 	ldr	r1, [r6, #-4]
  13d6a0:	e3c11001 	bic	r1, r1, #1
  13d6a4:	e7842001 	str	r2, [r4, r1]
  13d6a8:	e1a04003 	mov	r4, r3
  13d6ac:	e1a00004 	mov	r0, r4
  13d6b0:	e59d101c 	ldr	r1, [sp, #28]
  13d6b4:	e2844008 	add	r4, r4, #8
  13d6b8:	ebffff15 	bl	13d314 <trim>
  13d6bc:	e1a00004 	mov	r0, r4
  13d6c0:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d6c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d6c8:	e3570027 	cmp	r7, #39	; 0x27
  13d6cc:	da000041 	ble	13d7d8 <malloc+0x480>
  13d6d0:	e59d3018 	ldr	r3, [sp, #24]
  13d6d4:	e59d001c 	ldr	r0, [sp, #28]
  13d6d8:	e2833002 	add	r3, r3, #2
  13d6dc:	e1570003 	cmp	r7, r3
  13d6e0:	da00003a 	ble	13d7d0 <malloc+0x478>
  13d6e4:	e5942004 	ldr	r2, [r4, #4]
  13d6e8:	e3c22001 	bic	r2, r2, #1
  13d6ec:	e0421000 	sub	r1, r2, r0
  13d6f0:	e1a03221 	lsr	r3, r1, #4
  13d6f4:	e2433001 	sub	r3, r3, #1
  13d6f8:	e3530020 	cmp	r3, #32
  13d6fc:	9a000035 	bls	13d7d8 <malloc+0x480>
  13d700:	e3530c02 	cmp	r3, #512	; 0x200
  13d704:	2a000065 	bcs	13d8a0 <malloc+0x548>
  13d708:	e59fc250 	ldr	ip, [pc, #592]	; 13d960 <malloc+0x608>
  13d70c:	e08c31a3 	add	r3, ip, r3, lsr #3
  13d710:	e5533004 	ldrb	r3, [r3, #-4]
  13d714:	e1570003 	cmp	r7, r3
  13d718:	1a00002e 	bne	13d7d8 <malloc+0x480>
  13d71c:	e594c00c 	ldr	ip, [r4, #12]
  13d720:	e594e008 	ldr	lr, [r4, #8]
  13d724:	e0843000 	add	r3, r4, r0
  13d728:	e583c00c 	str	ip, [r3, #12]
  13d72c:	e583e008 	str	lr, [r3, #8]
  13d730:	e58c3008 	str	r3, [ip, #8]
  13d734:	e593e008 	ldr	lr, [r3, #8]
  13d738:	e380c001 	orr	ip, r0, #1
  13d73c:	e58e300c 	str	r3, [lr, #12]
  13d740:	e784c000 	str	ip, [r4, r0]
  13d744:	e5831004 	str	r1, [r3, #4]
  13d748:	e7841002 	str	r1, [r4, r2]
  13d74c:	e584c004 	str	ip, [r4, #4]
  13d750:	e5953000 	ldr	r3, [r5]
  13d754:	e3530000 	cmp	r3, #0
  13d758:	0affffd3 	beq	13d6ac <malloc+0x354>
  13d75c:	e59f31f8 	ldr	r3, [pc, #504]	; 13d95c <malloc+0x604>
  13d760:	e593c000 	ldr	ip, [r3]
  13d764:	e12fff3c 	blx	ip
  13d768:	e3a02000 	mov	r2, #0
  13d76c:	e593c000 	ldr	ip, [r3]
  13d770:	e5852000 	str	r2, [r5]
  13d774:	e12fff3c 	blx	ip
  13d778:	e5953004 	ldr	r3, [r5, #4]
  13d77c:	e1530002 	cmp	r3, r2
  13d780:	0affffc9 	beq	13d6ac <malloc+0x354>
  13d784:	e3a000f0 	mov	r0, #240	; 0xf0
  13d788:	ebfffb0a 	bl	13c3b8 <get_rtt_syscall>
  13d78c:	e2503000 	subs	r3, r0, #0
  13d790:	0affffc5 	beq	13d6ac <malloc+0x354>
  13d794:	e3a02001 	mov	r2, #1
  13d798:	e3a01081 	mov	r1, #129	; 0x81
  13d79c:	e1a00005 	mov	r0, r5
  13d7a0:	e12fff33 	blx	r3
  13d7a4:	e3700026 	cmn	r0, #38	; 0x26
  13d7a8:	1affffbf 	bne	13d6ac <malloc+0x354>
  13d7ac:	e3a000f0 	mov	r0, #240	; 0xf0
  13d7b0:	ebfffb00 	bl	13c3b8 <get_rtt_syscall>
  13d7b4:	e2503000 	subs	r3, r0, #0
  13d7b8:	0affffbb 	beq	13d6ac <malloc+0x354>
  13d7bc:	e3a02001 	mov	r2, #1
  13d7c0:	e1a00005 	mov	r0, r5
  13d7c4:	e1a01002 	mov	r1, r2
  13d7c8:	e12fff33 	blx	r3
  13d7cc:	eaffffb6 	b	13d6ac <malloc+0x354>
  13d7d0:	e357003f 	cmp	r7, #63	; 0x3f
  13d7d4:	0a000038 	beq	13d8bc <malloc+0x564>
  13d7d8:	e1a01007 	mov	r1, r7
  13d7dc:	e1a00004 	mov	r0, r4
  13d7e0:	ebfffbae 	bl	13c6a0 <unbin>
  13d7e4:	eaffffd9 	b	13d750 <malloc+0x3f8>
  13d7e8:	e3a000f0 	mov	r0, #240	; 0xf0
  13d7ec:	ebfffaf1 	bl	13c3b8 <get_rtt_syscall>
  13d7f0:	e2503000 	subs	r3, r0, #0
  13d7f4:	0affff9a 	beq	13d664 <malloc+0x30c>
  13d7f8:	e1a02007 	mov	r2, r7
  13d7fc:	e3a01081 	mov	r1, #129	; 0x81
  13d800:	e59f015c 	ldr	r0, [pc, #348]	; 13d964 <malloc+0x60c>
  13d804:	e12fff33 	blx	r3
  13d808:	e3700026 	cmn	r0, #38	; 0x26
  13d80c:	1affff94 	bne	13d664 <malloc+0x30c>
  13d810:	e3a000f0 	mov	r0, #240	; 0xf0
  13d814:	ebfffae7 	bl	13c3b8 <get_rtt_syscall>
  13d818:	e2503000 	subs	r3, r0, #0
  13d81c:	0affff90 	beq	13d664 <malloc+0x30c>
  13d820:	e1a02007 	mov	r2, r7
  13d824:	e1a01007 	mov	r1, r7
  13d828:	e59f0134 	ldr	r0, [pc, #308]	; 13d964 <malloc+0x60c>
  13d82c:	e12fff33 	blx	r3
  13d830:	eaffff8b 	b	13d664 <malloc+0x30c>
  13d834:	e1a06005 	mov	r6, r5
  13d838:	e59f7118 	ldr	r7, [pc, #280]	; 13d958 <malloc+0x600>
  13d83c:	e2858004 	add	r8, r5, #4
  13d840:	e5954000 	ldr	r4, [r5]
  13d844:	ea000002 	b	13d854 <malloc+0x4fc>
  13d848:	e5953000 	ldr	r3, [r5]
  13d84c:	e1540003 	cmp	r4, r3
  13d850:	1afffffa 	bne	13d840 <malloc+0x4e8>
  13d854:	e1a00004 	mov	r0, r4
  13d858:	e3a01001 	mov	r1, #1
  13d85c:	e1a02006 	mov	r2, r6
  13d860:	e5973000 	ldr	r3, [r7]
  13d864:	e12fff33 	blx	r3
  13d868:	e3500000 	cmp	r0, #0
  13d86c:	1afffff5 	bne	13d848 <malloc+0x4f0>
  13d870:	e3540000 	cmp	r4, #0
  13d874:	0affff59 	beq	13d5e0 <malloc+0x288>
  13d878:	e1a03001 	mov	r3, r1
  13d87c:	e1a02001 	mov	r2, r1
  13d880:	e59f00dc 	ldr	r0, [pc, #220]	; 13d964 <malloc+0x60c>
  13d884:	e1a01008 	mov	r1, r8
  13d888:	eb001133 	bl	141d5c <__wait>
  13d88c:	eaffffeb 	b	13d840 <malloc+0x4e8>
  13d890:	e3a04000 	mov	r4, #0
  13d894:	e1a00004 	mov	r0, r4
  13d898:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d89c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d8a0:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13d8a4:	959fc0b4 	ldrls	ip, [pc, #180]	; 13d960 <malloc+0x608>
  13d8a8:	83a0303f 	movhi	r3, #63	; 0x3f
  13d8ac:	908c33a3 	addls	r3, ip, r3, lsr #7
  13d8b0:	95533004 	ldrbls	r3, [r3, #-4]
  13d8b4:	92833010 	addls	r3, r3, #16
  13d8b8:	eaffff95 	b	13d714 <malloc+0x3bc>
  13d8bc:	e5942004 	ldr	r2, [r4, #4]
  13d8c0:	e3c22001 	bic	r2, r2, #1
  13d8c4:	e0421000 	sub	r1, r2, r0
  13d8c8:	e3510907 	cmp	r1, #114688	; 0x1c000
  13d8cc:	8affff87 	bhi	13d6f0 <malloc+0x398>
  13d8d0:	eaffffc0 	b	13d7d8 <malloc+0x480>
  13d8d4:	e5953000 	ldr	r3, [r5]
  13d8d8:	e3530000 	cmp	r3, #0
  13d8dc:	0affffeb 	beq	13d890 <malloc+0x538>
  13d8e0:	e59f3074 	ldr	r3, [pc, #116]	; 13d95c <malloc+0x604>
  13d8e4:	e593c000 	ldr	ip, [r3]
  13d8e8:	e12fff3c 	blx	ip
  13d8ec:	e5854000 	str	r4, [r5]
  13d8f0:	e593c000 	ldr	ip, [r3]
  13d8f4:	e12fff3c 	blx	ip
  13d8f8:	e5953004 	ldr	r3, [r5, #4]
  13d8fc:	e3530000 	cmp	r3, #0
  13d900:	0affffe2 	beq	13d890 <malloc+0x538>
  13d904:	e3a000f0 	mov	r0, #240	; 0xf0
  13d908:	ebfffaaa 	bl	13c3b8 <get_rtt_syscall>
  13d90c:	e2503000 	subs	r3, r0, #0
  13d910:	0affffde 	beq	13d890 <malloc+0x538>
  13d914:	e3a02001 	mov	r2, #1
  13d918:	e3a01081 	mov	r1, #129	; 0x81
  13d91c:	e59f0040 	ldr	r0, [pc, #64]	; 13d964 <malloc+0x60c>
  13d920:	e12fff33 	blx	r3
  13d924:	e3700026 	cmn	r0, #38	; 0x26
  13d928:	1affffd8 	bne	13d890 <malloc+0x538>
  13d92c:	e3a000f0 	mov	r0, #240	; 0xf0
  13d930:	ebfffaa0 	bl	13c3b8 <get_rtt_syscall>
  13d934:	e2503000 	subs	r3, r0, #0
  13d938:	0affffd4 	beq	13d890 <malloc+0x538>
  13d93c:	e3a02001 	mov	r2, #1
  13d940:	e59f001c 	ldr	r0, [pc, #28]	; 13d964 <malloc+0x60c>
  13d944:	e1a01002 	mov	r1, r2
  13d948:	e12fff33 	blx	r3
  13d94c:	eaffff19 	b	13d5b8 <malloc+0x260>
  13d950:	0014ec40 	.word	0x0014ec40
  13d954:	0056f058 	.word	0x0056f058
  13d958:	0014d3d8 	.word	0x0014d3d8
  13d95c:	0014d3d4 	.word	0x0014d3d4
  13d960:	0014cd54 	.word	0x0014cd54
  13d964:	0014ec38 	.word	0x0014ec38
  13d968:	0014ec34 	.word	0x0014ec34

0013d96c <calloc>:
  13d96c:	e3510000 	cmp	r1, #0
  13d970:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
  13d974:	0a000002 	beq	13d984 <calloc+0x18>
  13d978:	e0832190 	umull	r2, r3, r0, r1
  13d97c:	e3530000 	cmp	r3, #0
  13d980:	1a000013 	bne	13d9d4 <calloc+0x68>
  13d984:	e0040190 	mul	r4, r0, r1
  13d988:	e1a00004 	mov	r0, r4
  13d98c:	ebfffe71 	bl	13d358 <malloc>
  13d990:	e2509000 	subs	r9, r0, #0
  13d994:	0a000012 	beq	13d9e4 <calloc+0x78>
  13d998:	e59f30a0 	ldr	r3, [pc, #160]	; 13da40 <calloc+0xd4>
  13d99c:	e5933000 	ldr	r3, [r3]
  13d9a0:	e3530000 	cmp	r3, #0
  13d9a4:	1a000005 	bne	13d9c0 <calloc+0x54>
  13d9a8:	e5193004 	ldr	r3, [r9, #-4]
  13d9ac:	e3130001 	tst	r3, #1
  13d9b0:	0a00000b 	beq	13d9e4 <calloc+0x78>
  13d9b4:	e59f3088 	ldr	r3, [pc, #136]	; 13da44 <calloc+0xd8>
  13d9b8:	e1540003 	cmp	r4, r3
  13d9bc:	8a00000a 	bhi	13d9ec <calloc+0x80>
  13d9c0:	e1a02004 	mov	r2, r4
  13d9c4:	e1a00009 	mov	r0, r9
  13d9c8:	e8bd4bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
  13d9cc:	e3a01000 	mov	r1, #0
  13d9d0:	ea000e29 	b	14127c <memset>
  13d9d4:	ebffed41 	bl	138ee0 <__errno_location>
  13d9d8:	e3a0300c 	mov	r3, #12
  13d9dc:	e3a09000 	mov	r9, #0
  13d9e0:	e5803000 	str	r3, [r0]
  13d9e4:	e1a00009 	mov	r0, r9
  13d9e8:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
  13d9ec:	e1a08003 	mov	r8, r3
  13d9f0:	e0890004 	add	r0, r9, r4
  13d9f4:	e0002003 	and	r2, r0, r3
  13d9f8:	e0400002 	sub	r0, r0, r2
  13d9fc:	e3a01000 	mov	r1, #0
  13da00:	eb000e1d 	bl	14127c <memset>
  13da04:	e0404009 	sub	r4, r0, r9
  13da08:	e1540008 	cmp	r4, r8
  13da0c:	9affffeb 	bls	13d9c0 <calloc+0x54>
  13da10:	e3a02a01 	mov	r2, #4096	; 0x1000
  13da14:	e9100030 	ldmdb	r0, {r4, r5}
  13da18:	e2407010 	sub	r7, r0, #16
  13da1c:	e89700c0 	ldm	r7, {r6, r7}
  13da20:	e184b006 	orr	fp, r4, r6
  13da24:	e185c007 	orr	ip, r5, r7
  13da28:	e19b300c 	orrs	r3, fp, ip
  13da2c:	1afffff1 	bne	13d9f8 <calloc+0x8c>
  13da30:	e2522010 	subs	r2, r2, #16
  13da34:	e2400010 	sub	r0, r0, #16
  13da38:	1afffff5 	bne	13da14 <calloc+0xa8>
  13da3c:	eaffffed 	b	13d9f8 <calloc+0x8c>
  13da40:	0056f09c 	.word	0x0056f09c
  13da44:	00000fff 	.word	0x00000fff

0013da48 <free>:
  13da48:	e2502000 	subs	r2, r0, #0
  13da4c:	012fff1e 	bxeq	lr
  13da50:	e5123004 	ldr	r3, [r2, #-4]
  13da54:	e2420008 	sub	r0, r2, #8
  13da58:	e3130001 	tst	r3, #1
  13da5c:	0a000000 	beq	13da64 <free+0x1c>
  13da60:	eafffc9a 	b	13ccd0 <__bin_chunk>
  13da64:	e5121008 	ldr	r1, [r2, #-8]
  13da68:	e3c33001 	bic	r3, r3, #1
  13da6c:	e3110001 	tst	r1, #1
  13da70:	e0400001 	sub	r0, r0, r1
  13da74:	e0831001 	add	r1, r3, r1
  13da78:	0a000000 	beq	13da80 <free+0x38>
  13da7c:	e7f000f0 	.word	0xe7f000f0
  13da80:	ea0000f6 	b	13de60 <__munmap>

0013da84 <realloc>:
  13da84:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13da88:	e2505000 	subs	r5, r0, #0
  13da8c:	e24dd008 	sub	sp, sp, #8
  13da90:	e58d1004 	str	r1, [sp, #4]
  13da94:	0a000034 	beq	13db6c <realloc+0xe8>
  13da98:	e28d0004 	add	r0, sp, #4
  13da9c:	ebfffae5 	bl	13c638 <adjust_size>
  13daa0:	e3500000 	cmp	r0, #0
  13daa4:	ba00005b 	blt	13dc18 <realloc+0x194>
  13daa8:	e5153004 	ldr	r3, [r5, #-4]
  13daac:	e2459008 	sub	r9, r5, #8
  13dab0:	e3130001 	tst	r3, #1
  13dab4:	e3c36001 	bic	r6, r3, #1
  13dab8:	0a000010 	beq	13db00 <realloc+0x7c>
  13dabc:	e7992006 	ldr	r2, [r9, r6]
  13dac0:	e0894006 	add	r4, r9, r6
  13dac4:	e1530002 	cmp	r3, r2
  13dac8:	0a000000 	beq	13dad0 <realloc+0x4c>
  13dacc:	e7f000f0 	.word	0xe7f000f0
  13dad0:	e59d1004 	ldr	r1, [sp, #4]
  13dad4:	e1510006 	cmp	r1, r6
  13dad8:	93866001 	orrls	r6, r6, #1
  13dadc:	95056004 	strls	r6, [r5, #-4]
  13dae0:	95846000 	strls	r6, [r4]
  13dae4:	8a000038 	bhi	13dbcc <realloc+0x148>
  13dae8:	e1a00009 	mov	r0, r9
  13daec:	ebfffe08 	bl	13d314 <trim>
  13daf0:	e1a07005 	mov	r7, r5
  13daf4:	e1a00007 	mov	r0, r7
  13daf8:	e28dd008 	add	sp, sp, #8
  13dafc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13db00:	e5158008 	ldr	r8, [r5, #-8]
  13db04:	e59d4004 	ldr	r4, [sp, #4]
  13db08:	e3180001 	tst	r8, #1
  13db0c:	e086a008 	add	sl, r6, r8
  13db10:	e0884004 	add	r4, r8, r4
  13db14:	1a00001a 	bne	13db84 <realloc+0x100>
  13db18:	e3540a01 	cmp	r4, #4096	; 0x1000
  13db1c:	3a00001b 	bcc	13db90 <realloc+0x10c>
  13db20:	e2844eff 	add	r4, r4, #4080	; 0xff0
  13db24:	e284400f 	add	r4, r4, #15
  13db28:	e3c44eff 	bic	r4, r4, #4080	; 0xff0
  13db2c:	e3c4400f 	bic	r4, r4, #15
  13db30:	e15a0004 	cmp	sl, r4
  13db34:	01a07005 	moveq	r7, r5
  13db38:	0affffed 	beq	13daf4 <realloc+0x70>
  13db3c:	e1a0100a 	mov	r1, sl
  13db40:	e0490008 	sub	r0, r9, r8
  13db44:	e3a03001 	mov	r3, #1
  13db48:	e1a02004 	mov	r2, r4
  13db4c:	eb00009a 	bl	13ddbc <__mremap>
  13db50:	e3700001 	cmn	r0, #1
  13db54:	0a000031 	beq	13dc20 <realloc+0x19c>
  13db58:	e0800008 	add	r0, r0, r8
  13db5c:	e0444008 	sub	r4, r4, r8
  13db60:	e5804004 	str	r4, [r0, #4]
  13db64:	e2807008 	add	r7, r0, #8
  13db68:	eaffffe1 	b	13daf4 <realloc+0x70>
  13db6c:	e1a00001 	mov	r0, r1
  13db70:	ebfffdf8 	bl	13d358 <malloc>
  13db74:	e1a07000 	mov	r7, r0
  13db78:	e1a00007 	mov	r0, r7
  13db7c:	e28dd008 	add	sp, sp, #8
  13db80:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13db84:	e7f000f0 	.word	0xe7f000f0
  13db88:	e3540a01 	cmp	r4, #4096	; 0x1000
  13db8c:	2affffe3 	bcs	13db20 <realloc+0x9c>
  13db90:	e59d0004 	ldr	r0, [sp, #4]
  13db94:	e2400008 	sub	r0, r0, #8
  13db98:	ebfffdee 	bl	13d358 <malloc>
  13db9c:	e2507000 	subs	r7, r0, #0
  13dba0:	0affffde 	beq	13db20 <realloc+0x9c>
  13dba4:	e59d6004 	ldr	r6, [sp, #4]
  13dba8:	e2462008 	sub	r2, r6, #8
  13dbac:	e1a01005 	mov	r1, r5
  13dbb0:	e1a00007 	mov	r0, r7
  13dbb4:	eb000c78 	bl	140d9c <memcpy>
  13dbb8:	e1a00005 	mov	r0, r5
  13dbbc:	ebffffa1 	bl	13da48 <free>
  13dbc0:	e1a00007 	mov	r0, r7
  13dbc4:	e28dd008 	add	sp, sp, #8
  13dbc8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13dbcc:	e1a00004 	mov	r0, r4
  13dbd0:	ebfffafc 	bl	13c7c8 <alloc_fwd>
  13dbd4:	e3500000 	cmp	r0, #0
  13dbd8:	01a03006 	moveq	r3, r6
  13dbdc:	15943004 	ldrne	r3, [r4, #4]
  13dbe0:	059d1004 	ldreq	r1, [sp, #4]
  13dbe4:	13c33001 	bicne	r3, r3, #1
  13dbe8:	159d1004 	ldrne	r1, [sp, #4]
  13dbec:	10844003 	addne	r4, r4, r3
  13dbf0:	10833006 	addne	r3, r3, r6
  13dbf4:	e1530001 	cmp	r3, r1
  13dbf8:	e3833001 	orr	r3, r3, #1
  13dbfc:	e5053004 	str	r3, [r5, #-4]
  13dc00:	e5843000 	str	r3, [r4]
  13dc04:	2affffb7 	bcs	13dae8 <realloc+0x64>
  13dc08:	e2410008 	sub	r0, r1, #8
  13dc0c:	ebfffdd1 	bl	13d358 <malloc>
  13dc10:	e2507000 	subs	r7, r0, #0
  13dc14:	1affffe3 	bne	13dba8 <realloc+0x124>
  13dc18:	e3a07000 	mov	r7, #0
  13dc1c:	eaffffb4 	b	13daf4 <realloc+0x70>
  13dc20:	e59d1004 	ldr	r1, [sp, #4]
  13dc24:	eafffff7 	b	13dc08 <realloc+0x184>

0013dc28 <__malloc_donate>:
  13dc28:	e2602008 	rsb	r2, r0, #8
  13dc2c:	e201300f 	and	r3, r1, #15
  13dc30:	e202200f 	and	r2, r2, #15
  13dc34:	e2833008 	add	r3, r3, #8
  13dc38:	e0833002 	add	r3, r3, r2
  13dc3c:	e041c000 	sub	ip, r1, r0
  13dc40:	e15c0003 	cmp	ip, r3
  13dc44:	912fff1e 	bxls	lr
  13dc48:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13dc4c:	e3a0e001 	mov	lr, #1
  13dc50:	e2823008 	add	r3, r2, #8
  13dc54:	e0803003 	add	r3, r0, r3
  13dc58:	e3c1100f 	bic	r1, r1, #15
  13dc5c:	e041c003 	sub	ip, r1, r3
  13dc60:	e18cc00e 	orr	ip, ip, lr
  13dc64:	e501e004 	str	lr, [r1, #-4]
  13dc68:	e0800002 	add	r0, r0, r2
  13dc6c:	e503e008 	str	lr, [r3, #-8]
  13dc70:	e501c008 	str	ip, [r1, #-8]
  13dc74:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13dc78:	e503c004 	str	ip, [r3, #-4]
  13dc7c:	eafffc13 	b	13ccd0 <__bin_chunk>

0013dc80 <__madvise>:
  13dc80:	e92d4070 	push	{r4, r5, r6, lr}
  13dc84:	e1a04000 	mov	r4, r0
  13dc88:	e3a000dc 	mov	r0, #220	; 0xdc
  13dc8c:	e1a05001 	mov	r5, r1
  13dc90:	e1a06002 	mov	r6, r2
  13dc94:	ebfff9c7 	bl	13c3b8 <get_rtt_syscall>
  13dc98:	e2503000 	subs	r3, r0, #0
  13dc9c:	0a000005 	beq	13dcb8 <__madvise+0x38>
  13dca0:	e1a02006 	mov	r2, r6
  13dca4:	e1a01005 	mov	r1, r5
  13dca8:	e1a00004 	mov	r0, r4
  13dcac:	e12fff33 	blx	r3
  13dcb0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13dcb4:	eafff9f4 	b	13c48c <__syscall_ret>
  13dcb8:	e1a00003 	mov	r0, r3
  13dcbc:	eafffffb 	b	13dcb0 <__madvise+0x30>

0013dcc0 <dummy>:
  13dcc0:	e12fff1e 	bx	lr
  13dcc4:	00000000 	andeq	r0, r0, r0

0013dcc8 <__mmap>:
  13dcc8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13dccc:	e28f50dc 	add	r5, pc, #220	; 0xdc
  13dcd0:	e8950030 	ldm	r5, {r4, r5}
  13dcd4:	e24dd00c 	sub	sp, sp, #12
  13dcd8:	e28d7038 	add	r7, sp, #56	; 0x38
  13dcdc:	e89700c0 	ldm	r7, {r6, r7}
  13dce0:	e0048006 	and	r8, r4, r6
  13dce4:	e0059007 	and	r9, r5, r7
  13dce8:	e198c009 	orrs	ip, r8, r9
  13dcec:	e59db030 	ldr	fp, [sp, #48]	; 0x30
  13dcf0:	1a000024 	bne	13dd88 <__mmap+0xc0>
  13dcf4:	e371010a 	cmn	r1, #-2147483646	; 0x80000002
  13dcf8:	e1a08001 	mov	r8, r1
  13dcfc:	8a00001b 	bhi	13dd70 <__mmap+0xa8>
  13dd00:	e3130010 	tst	r3, #16
  13dd04:	e1a09000 	mov	r9, r0
  13dd08:	e1a0a002 	mov	sl, r2
  13dd0c:	e1a05003 	mov	r5, r3
  13dd10:	1a000022 	bne	13dda0 <__mmap+0xd8>
  13dd14:	e3a000c0 	mov	r0, #192	; 0xc0
  13dd18:	ebfff9a6 	bl	13c3b8 <get_rtt_syscall>
  13dd1c:	e1a03626 	lsr	r3, r6, #12
  13dd20:	e2504000 	subs	r4, r0, #0
  13dd24:	e1833a07 	orr	r3, r3, r7, lsl #20
  13dd28:	0a00001e 	beq	13dda8 <__mmap+0xe0>
  13dd2c:	e58d3004 	str	r3, [sp, #4]
  13dd30:	e58db000 	str	fp, [sp]
  13dd34:	e1a0200a 	mov	r2, sl
  13dd38:	e1a01008 	mov	r1, r8
  13dd3c:	e1a03005 	mov	r3, r5
  13dd40:	e1a00009 	mov	r0, r9
  13dd44:	e12fff34 	blx	r4
  13dd48:	e3590000 	cmp	r9, #0
  13dd4c:	03700001 	cmneq	r0, #1
  13dd50:	1a000003 	bne	13dd64 <__mmap+0x9c>
  13dd54:	e2055030 	and	r5, r5, #48	; 0x30
  13dd58:	e3550020 	cmp	r5, #32
  13dd5c:	03e0000b 	mvneq	r0, #11
  13dd60:	13e00000 	mvnne	r0, #0
  13dd64:	e28dd00c 	add	sp, sp, #12
  13dd68:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13dd6c:	eafff9c6 	b	13c48c <__syscall_ret>
  13dd70:	ebffec5a 	bl	138ee0 <__errno_location>
  13dd74:	e3a0300c 	mov	r3, #12
  13dd78:	e5803000 	str	r3, [r0]
  13dd7c:	e3e00000 	mvn	r0, #0
  13dd80:	e28dd00c 	add	sp, sp, #12
  13dd84:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13dd88:	ebffec54 	bl	138ee0 <__errno_location>
  13dd8c:	e3a03016 	mov	r3, #22
  13dd90:	e5803000 	str	r3, [r0]
  13dd94:	e3e00000 	mvn	r0, #0
  13dd98:	e28dd00c 	add	sp, sp, #12
  13dd9c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13dda0:	eb00139d 	bl	142c1c <__vm_wait>
  13dda4:	eaffffda 	b	13dd14 <__mmap+0x4c>
  13dda8:	e1a00004 	mov	r0, r4
  13ddac:	eaffffec 	b	13dd64 <__mmap+0x9c>
  13ddb0:	00000fff 	.word	0x00000fff
  13ddb4:	fffff000 	.word	0xfffff000

0013ddb8 <dummy>:
  13ddb8:	e12fff1e 	bx	lr

0013ddbc <__mremap>:
  13ddbc:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
  13ddc0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13ddc4:	e372010a 	cmn	r2, #-2147483646	; 0x80000002
  13ddc8:	e24dd014 	sub	sp, sp, #20
  13ddcc:	8a00001b 	bhi	13de40 <__mremap+0x84>
  13ddd0:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13ddd4:	e1a05002 	mov	r5, r2
  13ddd8:	e2136002 	ands	r6, r3, #2
  13dddc:	e1a07000 	mov	r7, r0
  13dde0:	e1a08001 	mov	r8, r1
  13dde4:	1a000010 	bne	13de2c <__mremap+0x70>
  13dde8:	e3a000a3 	mov	r0, #163	; 0xa3
  13ddec:	ebfff971 	bl	13c3b8 <get_rtt_syscall>
  13ddf0:	e2504000 	subs	r4, r0, #0
  13ddf4:	0a000016 	beq	13de54 <__mremap+0x98>
  13ddf8:	e58d6000 	str	r6, [sp]
  13ddfc:	e1a02005 	mov	r2, r5
  13de00:	e1a01008 	mov	r1, r8
  13de04:	e1a00007 	mov	r0, r7
  13de08:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13de0c:	e12fff34 	blx	r4
  13de10:	ebfff99d 	bl	13c48c <__syscall_ret>
  13de14:	e1a03000 	mov	r3, r0
  13de18:	e1a00003 	mov	r0, r3
  13de1c:	e28dd014 	add	sp, sp, #20
  13de20:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  13de24:	e28dd004 	add	sp, sp, #4
  13de28:	e12fff1e 	bx	lr
  13de2c:	eb00137a 	bl	142c1c <__vm_wait>
  13de30:	e28d3030 	add	r3, sp, #48	; 0x30
  13de34:	e58d300c 	str	r3, [sp, #12]
  13de38:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
  13de3c:	eaffffe9 	b	13dde8 <__mremap+0x2c>
  13de40:	ebffec26 	bl	138ee0 <__errno_location>
  13de44:	e3a0200c 	mov	r2, #12
  13de48:	e3e03000 	mvn	r3, #0
  13de4c:	e5802000 	str	r2, [r0]
  13de50:	eafffff0 	b	13de18 <__mremap+0x5c>
  13de54:	e1a00004 	mov	r0, r4
  13de58:	eaffffec 	b	13de10 <__mremap+0x54>

0013de5c <dummy>:
  13de5c:	e12fff1e 	bx	lr

0013de60 <__munmap>:
  13de60:	e92d4070 	push	{r4, r5, r6, lr}
  13de64:	e1a04000 	mov	r4, r0
  13de68:	e1a05001 	mov	r5, r1
  13de6c:	eb00136a 	bl	142c1c <__vm_wait>
  13de70:	e3a0005b 	mov	r0, #91	; 0x5b
  13de74:	ebfff94f 	bl	13c3b8 <get_rtt_syscall>
  13de78:	e2503000 	subs	r3, r0, #0
  13de7c:	0a000004 	beq	13de94 <__munmap+0x34>
  13de80:	e1a01005 	mov	r1, r5
  13de84:	e1a00004 	mov	r0, r4
  13de88:	e12fff33 	blx	r3
  13de8c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13de90:	eafff97d 	b	13c48c <__syscall_ret>
  13de94:	e1a00003 	mov	r0, r3
  13de98:	eafffffb 	b	13de8c <__munmap+0x2c>

0013de9c <accept>:
  13de9c:	e3a0c000 	mov	ip, #0
  13dea0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13dea4:	e24dd014 	sub	sp, sp, #20
  13dea8:	e1a03002 	mov	r3, r2
  13deac:	e58dc008 	str	ip, [sp, #8]
  13deb0:	e1a02001 	mov	r2, r1
  13deb4:	e58dc004 	str	ip, [sp, #4]
  13deb8:	e1a01000 	mov	r1, r0
  13debc:	e58dc000 	str	ip, [sp]
  13dec0:	e59f000c 	ldr	r0, [pc, #12]	; 13ded4 <accept+0x38>
  13dec4:	eb000fa3 	bl	141d58 <__syscall_cp>
  13dec8:	e28dd014 	add	sp, sp, #20
  13decc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13ded0:	eafff96d 	b	13c48c <__syscall_ret>
  13ded4:	0000011d 	.word	0x0000011d

0013ded8 <bind>:
  13ded8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13dedc:	e1a05000 	mov	r5, r0
  13dee0:	e24dd00c 	sub	sp, sp, #12
  13dee4:	e59f0040 	ldr	r0, [pc, #64]	; 13df2c <bind+0x54>
  13dee8:	e1a06001 	mov	r6, r1
  13deec:	e1a07002 	mov	r7, r2
  13def0:	ebfff930 	bl	13c3b8 <get_rtt_syscall>
  13def4:	e2504000 	subs	r4, r0, #0
  13def8:	0a000009 	beq	13df24 <bind+0x4c>
  13defc:	e3a03000 	mov	r3, #0
  13df00:	e1a02007 	mov	r2, r7
  13df04:	e1a01006 	mov	r1, r6
  13df08:	e1a00005 	mov	r0, r5
  13df0c:	e58d3004 	str	r3, [sp, #4]
  13df10:	e58d3000 	str	r3, [sp]
  13df14:	e12fff34 	blx	r4
  13df18:	e28dd00c 	add	sp, sp, #12
  13df1c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13df20:	eafff959 	b	13c48c <__syscall_ret>
  13df24:	e1a00004 	mov	r0, r4
  13df28:	eafffffa 	b	13df18 <bind+0x40>
  13df2c:	0000011a 	.word	0x0000011a

0013df30 <connect>:
  13df30:	e3a0c000 	mov	ip, #0
  13df34:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13df38:	e24dd014 	sub	sp, sp, #20
  13df3c:	e1a03002 	mov	r3, r2
  13df40:	e58dc008 	str	ip, [sp, #8]
  13df44:	e1a02001 	mov	r2, r1
  13df48:	e58dc004 	str	ip, [sp, #4]
  13df4c:	e1a01000 	mov	r1, r0
  13df50:	e58dc000 	str	ip, [sp]
  13df54:	e59f000c 	ldr	r0, [pc, #12]	; 13df68 <connect+0x38>
  13df58:	eb000f7e 	bl	141d58 <__syscall_cp>
  13df5c:	e28dd014 	add	sp, sp, #20
  13df60:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13df64:	eafff948 	b	13c48c <__syscall_ret>
  13df68:	0000011b 	.word	0x0000011b

0013df6c <htonl>:
  13df6c:	e0203860 	eor	r3, r0, r0, ror #16
  13df70:	e1a03423 	lsr	r3, r3, #8
  13df74:	e3c33cff 	bic	r3, r3, #65280	; 0xff00
  13df78:	e0230460 	eor	r0, r3, r0, ror #8
  13df7c:	e12fff1e 	bx	lr

0013df80 <htons>:
  13df80:	e1a03420 	lsr	r3, r0, #8
  13df84:	e1830400 	orr	r0, r3, r0, lsl #8
  13df88:	e1a00800 	lsl	r0, r0, #16
  13df8c:	e1a00820 	lsr	r0, r0, #16
  13df90:	e12fff1e 	bx	lr

0013df94 <listen>:
  13df94:	e92d4070 	push	{r4, r5, r6, lr}
  13df98:	e1a05000 	mov	r5, r0
  13df9c:	e24dd008 	sub	sp, sp, #8
  13dfa0:	e3a00f47 	mov	r0, #284	; 0x11c
  13dfa4:	e1a06001 	mov	r6, r1
  13dfa8:	ebfff902 	bl	13c3b8 <get_rtt_syscall>
  13dfac:	e2504000 	subs	r4, r0, #0
  13dfb0:	0a000009 	beq	13dfdc <listen+0x48>
  13dfb4:	e3a03000 	mov	r3, #0
  13dfb8:	e1a01006 	mov	r1, r6
  13dfbc:	e1a00005 	mov	r0, r5
  13dfc0:	e58d3004 	str	r3, [sp, #4]
  13dfc4:	e58d3000 	str	r3, [sp]
  13dfc8:	e1a02003 	mov	r2, r3
  13dfcc:	e12fff34 	blx	r4
  13dfd0:	e28dd008 	add	sp, sp, #8
  13dfd4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13dfd8:	eafff92b 	b	13c48c <__syscall_ret>
  13dfdc:	e1a00004 	mov	r0, r4
  13dfe0:	eafffffa 	b	13dfd0 <listen+0x3c>

0013dfe4 <setsockopt>:
  13dfe4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13dfe8:	e1a05000 	mov	r5, r0
  13dfec:	e24dd00c 	sub	sp, sp, #12
  13dff0:	e59f004c 	ldr	r0, [pc, #76]	; 13e044 <setsockopt+0x60>
  13dff4:	e1a06001 	mov	r6, r1
  13dff8:	e1a07002 	mov	r7, r2
  13dffc:	e1a08003 	mov	r8, r3
  13e000:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
  13e004:	ebfff8eb 	bl	13c3b8 <get_rtt_syscall>
  13e008:	e2504000 	subs	r4, r0, #0
  13e00c:	0a00000a 	beq	13e03c <setsockopt+0x58>
  13e010:	e3a0c000 	mov	ip, #0
  13e014:	e58d9000 	str	r9, [sp]
  13e018:	e1a03008 	mov	r3, r8
  13e01c:	e1a02007 	mov	r2, r7
  13e020:	e1a01006 	mov	r1, r6
  13e024:	e1a00005 	mov	r0, r5
  13e028:	e58dc004 	str	ip, [sp, #4]
  13e02c:	e12fff34 	blx	r4
  13e030:	e28dd00c 	add	sp, sp, #12
  13e034:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
  13e038:	eafff913 	b	13c48c <__syscall_ret>
  13e03c:	e1a00004 	mov	r0, r4
  13e040:	eafffffa 	b	13e030 <setsockopt+0x4c>
  13e044:	00000126 	.word	0x00000126

0013e048 <socket>:
  13e048:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13e04c:	e1a06000 	mov	r6, r0
  13e050:	e24dd00c 	sub	sp, sp, #12
  13e054:	e59f0118 	ldr	r0, [pc, #280]	; 13e174 <socket+0x12c>
  13e058:	e1a05001 	mov	r5, r1
  13e05c:	e1a07002 	mov	r7, r2
  13e060:	ebfff8d4 	bl	13c3b8 <get_rtt_syscall>
  13e064:	e2504000 	subs	r4, r0, #0
  13e068:	0a000034 	beq	13e140 <socket+0xf8>
  13e06c:	e3a03000 	mov	r3, #0
  13e070:	e1a02007 	mov	r2, r7
  13e074:	e58d3004 	str	r3, [sp, #4]
  13e078:	e58d3000 	str	r3, [sp]
  13e07c:	e1a01005 	mov	r1, r5
  13e080:	e1a00006 	mov	r0, r6
  13e084:	e12fff34 	blx	r4
  13e088:	ebfff8ff 	bl	13c48c <__syscall_ret>
  13e08c:	e2504000 	subs	r4, r0, #0
  13e090:	ba000002 	blt	13e0a0 <socket+0x58>
  13e094:	e1a00004 	mov	r0, r4
  13e098:	e28dd00c 	add	sp, sp, #12
  13e09c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13e0a0:	ebffeb8e 	bl	138ee0 <__errno_location>
  13e0a4:	e5903000 	ldr	r3, [r0]
  13e0a8:	e3530016 	cmp	r3, #22
  13e0ac:	1a00001e 	bne	13e12c <socket+0xe4>
  13e0b0:	e59f30c0 	ldr	r3, [pc, #192]	; 13e178 <socket+0x130>
  13e0b4:	e1150003 	tst	r5, r3
  13e0b8:	0afffff5 	beq	13e094 <socket+0x4c>
  13e0bc:	e59f00b0 	ldr	r0, [pc, #176]	; 13e174 <socket+0x12c>
  13e0c0:	ebfff8bc 	bl	13c3b8 <get_rtt_syscall>
  13e0c4:	e3c51702 	bic	r1, r5, #524288	; 0x80000
  13e0c8:	e2504000 	subs	r4, r0, #0
  13e0cc:	e3c11b02 	bic	r1, r1, #2048	; 0x800
  13e0d0:	0a000025 	beq	13e16c <socket+0x124>
  13e0d4:	e3a03000 	mov	r3, #0
  13e0d8:	e1a02007 	mov	r2, r7
  13e0dc:	e1a00006 	mov	r0, r6
  13e0e0:	e58d3004 	str	r3, [sp, #4]
  13e0e4:	e58d3000 	str	r3, [sp]
  13e0e8:	e12fff34 	blx	r4
  13e0ec:	ebfff8e6 	bl	13c48c <__syscall_ret>
  13e0f0:	e2504000 	subs	r4, r0, #0
  13e0f4:	baffffe6 	blt	13e094 <socket+0x4c>
  13e0f8:	e3150702 	tst	r5, #524288	; 0x80000
  13e0fc:	1a000011 	bne	13e148 <socket+0x100>
  13e100:	e3150b02 	tst	r5, #2048	; 0x800
  13e104:	0affffe2 	beq	13e094 <socket+0x4c>
  13e108:	e3a000dd 	mov	r0, #221	; 0xdd
  13e10c:	ebfff8a9 	bl	13c3b8 <get_rtt_syscall>
  13e110:	e2503000 	subs	r3, r0, #0
  13e114:	0affffde 	beq	13e094 <socket+0x4c>
  13e118:	e3a02b02 	mov	r2, #2048	; 0x800
  13e11c:	e3a01004 	mov	r1, #4
  13e120:	e1a00004 	mov	r0, r4
  13e124:	e12fff33 	blx	r3
  13e128:	eaffffd9 	b	13e094 <socket+0x4c>
  13e12c:	ebffeb6b 	bl	138ee0 <__errno_location>
  13e130:	e5903000 	ldr	r3, [r0]
  13e134:	e353005d 	cmp	r3, #93	; 0x5d
  13e138:	1affffd5 	bne	13e094 <socket+0x4c>
  13e13c:	eaffffdb 	b	13e0b0 <socket+0x68>
  13e140:	e1a00004 	mov	r0, r4
  13e144:	eaffffcf 	b	13e088 <socket+0x40>
  13e148:	e3a000dd 	mov	r0, #221	; 0xdd
  13e14c:	ebfff899 	bl	13c3b8 <get_rtt_syscall>
  13e150:	e2503000 	subs	r3, r0, #0
  13e154:	0affffe9 	beq	13e100 <socket+0xb8>
  13e158:	e3a02001 	mov	r2, #1
  13e15c:	e3a01002 	mov	r1, #2
  13e160:	e1a00004 	mov	r0, r4
  13e164:	e12fff33 	blx	r3
  13e168:	eaffffe4 	b	13e100 <socket+0xb8>
  13e16c:	e1a00004 	mov	r0, r4
  13e170:	eaffffdd 	b	13e0ec <socket+0xa4>
  13e174:	00000119 	.word	0x00000119
  13e178:	00080800 	.word	0x00080800

0013e17c <srand>:
  13e17c:	e3a02000 	mov	r2, #0
  13e180:	e59f3008 	ldr	r3, [pc, #8]	; 13e190 <srand+0x14>
  13e184:	e2400001 	sub	r0, r0, #1
  13e188:	e8830005 	stm	r3, {r0, r2}
  13e18c:	e12fff1e 	bx	lr
  13e190:	0014f050 	.word	0x0014f050

0013e194 <rand>:
  13e194:	e59f1034 	ldr	r1, [pc, #52]	; 13e1d0 <rand+0x3c>
  13e198:	e92d4800 	push	{fp, lr}
  13e19c:	e59f3030 	ldr	r3, [pc, #48]	; 13e1d4 <rand+0x40>
  13e1a0:	e591e000 	ldr	lr, [r1]
  13e1a4:	e5912004 	ldr	r2, [r1, #4]
  13e1a8:	e00b039e 	mul	fp, lr, r3
  13e1ac:	e59fc024 	ldr	ip, [pc, #36]	; 13e1d8 <rand+0x44>
  13e1b0:	e020b29c 	mla	r0, ip, r2, fp
  13e1b4:	e0832c9e 	umull	r2, r3, lr, ip
  13e1b8:	e0803003 	add	r3, r0, r3
  13e1bc:	e292b001 	adds	fp, r2, #1
  13e1c0:	e2a3c000 	adc	ip, r3, #0
  13e1c4:	e8811800 	stm	r1, {fp, ip}
  13e1c8:	e1a000ac 	lsr	r0, ip, #1
  13e1cc:	e8bd8800 	pop	{fp, pc}
  13e1d0:	0014f050 	.word	0x0014f050
  13e1d4:	5851f42d 	.word	0x5851f42d
  13e1d8:	4c957f2d 	.word	0x4c957f2d

0013e1dc <select>:
  13e1dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e1e0:	e3a0e000 	mov	lr, #0
  13e1e4:	e24dd014 	sub	sp, sp, #20
  13e1e8:	e59dc018 	ldr	ip, [sp, #24]
  13e1ec:	e58d3000 	str	r3, [sp]
  13e1f0:	e58de008 	str	lr, [sp, #8]
  13e1f4:	e1a03002 	mov	r3, r2
  13e1f8:	e58dc004 	str	ip, [sp, #4]
  13e1fc:	e1a02001 	mov	r2, r1
  13e200:	e1a01000 	mov	r1, r0
  13e204:	e3a0008e 	mov	r0, #142	; 0x8e
  13e208:	eb000ed2 	bl	141d58 <__syscall_cp>
  13e20c:	e28dd014 	add	sp, sp, #20
  13e210:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e214:	eafff89c 	b	13c48c <__syscall_ret>

0013e218 <raise>:
  13e218:	e92d4030 	push	{r4, r5, lr}
  13e21c:	e24dd084 	sub	sp, sp, #132	; 0x84
  13e220:	e1a05000 	mov	r5, r0
  13e224:	e1a0000d 	mov	r0, sp
  13e228:	eb001496 	bl	143488 <__block_app_sigs>
  13e22c:	e59f3048 	ldr	r3, [pc, #72]	; 13e27c <raise+0x64>
  13e230:	e5930000 	ldr	r0, [r3]
  13e234:	e12fff30 	blx	r0
  13e238:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  13e23c:	e3a000ee 	mov	r0, #238	; 0xee
  13e240:	ebfff85c 	bl	13c3b8 <get_rtt_syscall>
  13e244:	e2503000 	subs	r3, r0, #0
  13e248:	0a000009 	beq	13e274 <raise+0x5c>
  13e24c:	e1a01005 	mov	r1, r5
  13e250:	e1a00004 	mov	r0, r4
  13e254:	e12fff33 	blx	r3
  13e258:	ebfff88b 	bl	13c48c <__syscall_ret>
  13e25c:	e1a04000 	mov	r4, r0
  13e260:	e1a0000d 	mov	r0, sp
  13e264:	eb001495 	bl	1434c0 <__restore_sigs>
  13e268:	e1a00004 	mov	r0, r4
  13e26c:	e28dd084 	add	sp, sp, #132	; 0x84
  13e270:	e8bd8030 	pop	{r4, r5, pc}
  13e274:	e1a00003 	mov	r0, r3
  13e278:	eafffff6 	b	13e258 <raise+0x40>
  13e27c:	0014d3dc 	.word	0x0014d3dc

0013e280 <fflush>:
  13e280:	e92d4070 	push	{r4, r5, r6, lr}
  13e284:	e2504000 	subs	r4, r0, #0
  13e288:	e24dd008 	sub	sp, sp, #8
  13e28c:	0a000027 	beq	13e330 <fflush+0xb0>
  13e290:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e294:	e3530000 	cmp	r3, #0
  13e298:	b3a05000 	movlt	r5, #0
  13e29c:	aa000020 	bge	13e324 <fflush+0xa4>
  13e2a0:	e5942014 	ldr	r2, [r4, #20]
  13e2a4:	e594301c 	ldr	r3, [r4, #28]
  13e2a8:	e1520003 	cmp	r2, r3
  13e2ac:	0a000007 	beq	13e2d0 <fflush+0x50>
  13e2b0:	e3a02000 	mov	r2, #0
  13e2b4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  13e2b8:	e1a01002 	mov	r1, r2
  13e2bc:	e1a00004 	mov	r0, r4
  13e2c0:	e12fff33 	blx	r3
  13e2c4:	e5943014 	ldr	r3, [r4, #20]
  13e2c8:	e3530000 	cmp	r3, #0
  13e2cc:	0a00003d 	beq	13e3c8 <fflush+0x148>
  13e2d0:	e994000c 	ldmib	r4, {r2, r3}
  13e2d4:	e1520003 	cmp	r2, r3
  13e2d8:	0a000006 	beq	13e2f8 <fflush+0x78>
  13e2dc:	e3a01001 	mov	r1, #1
  13e2e0:	e0422003 	sub	r2, r2, r3
  13e2e4:	e58d1000 	str	r1, [sp]
  13e2e8:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  13e2ec:	e1a03fc2 	asr	r3, r2, #31
  13e2f0:	e1a00004 	mov	r0, r4
  13e2f4:	e12fff31 	blx	r1
  13e2f8:	e3a06000 	mov	r6, #0
  13e2fc:	e1550006 	cmp	r5, r6
  13e300:	e5846010 	str	r6, [r4, #16]
  13e304:	e584601c 	str	r6, [r4, #28]
  13e308:	e5846014 	str	r6, [r4, #20]
  13e30c:	e5846008 	str	r6, [r4, #8]
  13e310:	e5846004 	str	r6, [r4, #4]
  13e314:	1a000032 	bne	13e3e4 <fflush+0x164>
  13e318:	e1a00005 	mov	r0, r5
  13e31c:	e28dd008 	add	sp, sp, #8
  13e320:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e324:	eb001472 	bl	1434f4 <__lockfile>
  13e328:	e1a05000 	mov	r5, r0
  13e32c:	eaffffdb 	b	13e2a0 <fflush+0x20>
  13e330:	e59f3104 	ldr	r3, [pc, #260]	; 13e43c <fflush+0x1bc>
  13e334:	e5935000 	ldr	r5, [r3]
  13e338:	e3550000 	cmp	r5, #0
  13e33c:	1a00003a 	bne	13e42c <fflush+0x1ac>
  13e340:	e59f30f8 	ldr	r3, [pc, #248]	; 13e440 <fflush+0x1c0>
  13e344:	e5932000 	ldr	r2, [r3]
  13e348:	e3520000 	cmp	r2, #0
  13e34c:	1a000032 	bne	13e41c <fflush+0x19c>
  13e350:	eb000047 	bl	13e474 <__ofl_lock>
  13e354:	e5904000 	ldr	r4, [r0]
  13e358:	e3540000 	cmp	r4, #0
  13e35c:	0a000009 	beq	13e388 <fflush+0x108>
  13e360:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e364:	e3530000 	cmp	r3, #0
  13e368:	aa00000a 	bge	13e398 <fflush+0x118>
  13e36c:	e5942014 	ldr	r2, [r4, #20]
  13e370:	e594301c 	ldr	r3, [r4, #28]
  13e374:	e1520003 	cmp	r2, r3
  13e378:	1a00001f 	bne	13e3fc <fflush+0x17c>
  13e37c:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  13e380:	e3540000 	cmp	r4, #0
  13e384:	1afffff5 	bne	13e360 <fflush+0xe0>
  13e388:	eb000040 	bl	13e490 <__ofl_unlock>
  13e38c:	e1a00005 	mov	r0, r5
  13e390:	e28dd008 	add	sp, sp, #8
  13e394:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e398:	e1a00004 	mov	r0, r4
  13e39c:	eb001454 	bl	1434f4 <__lockfile>
  13e3a0:	e5942014 	ldr	r2, [r4, #20]
  13e3a4:	e594301c 	ldr	r3, [r4, #28]
  13e3a8:	e1a06000 	mov	r6, r0
  13e3ac:	e1520003 	cmp	r2, r3
  13e3b0:	1a000015 	bne	13e40c <fflush+0x18c>
  13e3b4:	e3560000 	cmp	r6, #0
  13e3b8:	0affffef 	beq	13e37c <fflush+0xfc>
  13e3bc:	e1a00004 	mov	r0, r4
  13e3c0:	eb001498 	bl	143628 <__unlockfile>
  13e3c4:	eaffffec 	b	13e37c <fflush+0xfc>
  13e3c8:	e3550000 	cmp	r5, #0
  13e3cc:	03e05000 	mvneq	r5, #0
  13e3d0:	0affffd0 	beq	13e318 <fflush+0x98>
  13e3d4:	e1a00004 	mov	r0, r4
  13e3d8:	eb001492 	bl	143628 <__unlockfile>
  13e3dc:	e3e05000 	mvn	r5, #0
  13e3e0:	eaffffcc 	b	13e318 <fflush+0x98>
  13e3e4:	e1a05006 	mov	r5, r6
  13e3e8:	e1a00004 	mov	r0, r4
  13e3ec:	eb00148d 	bl	143628 <__unlockfile>
  13e3f0:	e1a00005 	mov	r0, r5
  13e3f4:	e28dd008 	add	sp, sp, #8
  13e3f8:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e3fc:	e1a00004 	mov	r0, r4
  13e400:	ebffff9e 	bl	13e280 <fflush>
  13e404:	e1855000 	orr	r5, r5, r0
  13e408:	eaffffdb 	b	13e37c <fflush+0xfc>
  13e40c:	e1a00004 	mov	r0, r4
  13e410:	ebffff9a 	bl	13e280 <fflush>
  13e414:	e1855000 	orr	r5, r5, r0
  13e418:	eaffffe5 	b	13e3b4 <fflush+0x134>
  13e41c:	e5930000 	ldr	r0, [r3]
  13e420:	ebffff96 	bl	13e280 <fflush>
  13e424:	e1855000 	orr	r5, r5, r0
  13e428:	eaffffc8 	b	13e350 <fflush+0xd0>
  13e42c:	e5930000 	ldr	r0, [r3]
  13e430:	ebffff92 	bl	13e280 <fflush>
  13e434:	e1a05000 	mov	r5, r0
  13e438:	eaffffc0 	b	13e340 <fflush+0xc0>
  13e43c:	0014d3d0 	.word	0x0014d3d0
  13e440:	0014d338 	.word	0x0014d338

0013e444 <fprintf>:
  13e444:	e92d000e 	push	{r1, r2, r3}
  13e448:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e44c:	e24dd008 	sub	sp, sp, #8
  13e450:	e28d3010 	add	r3, sp, #16
  13e454:	e1a02003 	mov	r2, r3
  13e458:	e59d100c 	ldr	r1, [sp, #12]
  13e45c:	e58d3004 	str	r3, [sp, #4]
  13e460:	eb000959 	bl	1409cc <vfprintf>
  13e464:	e28dd008 	add	sp, sp, #8
  13e468:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e46c:	e28dd00c 	add	sp, sp, #12
  13e470:	e12fff1e 	bx	lr

0013e474 <__ofl_lock>:
  13e474:	e92d4010 	push	{r4, lr}
  13e478:	e59f0008 	ldr	r0, [pc, #8]	; 13e488 <__ofl_lock+0x14>
  13e47c:	eb000db3 	bl	141b50 <__lock>
  13e480:	e59f0004 	ldr	r0, [pc, #4]	; 13e48c <__ofl_lock+0x18>
  13e484:	e8bd8010 	pop	{r4, pc}
  13e488:	0014f060 	.word	0x0014f060
  13e48c:	0014f05c 	.word	0x0014f05c

0013e490 <__ofl_unlock>:
  13e490:	e59f0000 	ldr	r0, [pc]	; 13e498 <__ofl_unlock+0x8>
  13e494:	ea000e05 	b	141cb0 <__unlock>
  13e498:	0014f060 	.word	0x0014f060

0013e49c <perror>:
  13e49c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13e4a0:	e1a05000 	mov	r5, r0
  13e4a4:	ebffea8d 	bl	138ee0 <__errno_location>
  13e4a8:	e5900000 	ldr	r0, [r0]
  13e4ac:	ebffeaad 	bl	138f68 <strerror>
  13e4b0:	e59f4104 	ldr	r4, [pc, #260]	; 13e5bc <perror+0x120>
  13e4b4:	e1a06000 	mov	r6, r0
  13e4b8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e4bc:	e3530000 	cmp	r3, #0
  13e4c0:	aa000026 	bge	13e560 <perror+0xc4>
  13e4c4:	e3550000 	cmp	r5, #0
  13e4c8:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13e4cc:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13e4d0:	13a09000 	movne	r9, #0
  13e4d4:	0a00002c 	beq	13e58c <perror+0xf0>
  13e4d8:	e5d53000 	ldrb	r3, [r5]
  13e4dc:	e3530000 	cmp	r3, #0
  13e4e0:	1a000010 	bne	13e528 <perror+0x8c>
  13e4e4:	e1a00006 	mov	r0, r6
  13e4e8:	eb000bf4 	bl	1414c0 <strlen>
  13e4ec:	e59f30c8 	ldr	r3, [pc, #200]	; 13e5bc <perror+0x120>
  13e4f0:	e1a01000 	mov	r1, r0
  13e4f4:	e3a02001 	mov	r2, #1
  13e4f8:	e1a00006 	mov	r0, r6
  13e4fc:	eb0015fa 	bl	143cec <fwrite>
  13e500:	e59f10b4 	ldr	r1, [pc, #180]	; 13e5bc <perror+0x120>
  13e504:	e3a0000a 	mov	r0, #10
  13e508:	eb001578 	bl	143af0 <fputc>
  13e50c:	e3590000 	cmp	r9, #0
  13e510:	e5848048 	str	r8, [r4, #72]	; 0x48
  13e514:	e5847088 	str	r7, [r4, #136]	; 0x88
  13e518:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  13e51c:	e59f0098 	ldr	r0, [pc, #152]	; 13e5bc <perror+0x120>
  13e520:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13e524:	ea00143f 	b	143628 <__unlockfile>
  13e528:	e1a00005 	mov	r0, r5
  13e52c:	eb000be3 	bl	1414c0 <strlen>
  13e530:	e59f3084 	ldr	r3, [pc, #132]	; 13e5bc <perror+0x120>
  13e534:	e1a01000 	mov	r1, r0
  13e538:	e3a02001 	mov	r2, #1
  13e53c:	e1a00005 	mov	r0, r5
  13e540:	eb0015e9 	bl	143cec <fwrite>
  13e544:	e59f1070 	ldr	r1, [pc, #112]	; 13e5bc <perror+0x120>
  13e548:	e3a0003a 	mov	r0, #58	; 0x3a
  13e54c:	eb001567 	bl	143af0 <fputc>
  13e550:	e59f1064 	ldr	r1, [pc, #100]	; 13e5bc <perror+0x120>
  13e554:	e3a00020 	mov	r0, #32
  13e558:	eb001564 	bl	143af0 <fputc>
  13e55c:	eaffffe0 	b	13e4e4 <perror+0x48>
  13e560:	e1a00004 	mov	r0, r4
  13e564:	eb0013e2 	bl	1434f4 <__lockfile>
  13e568:	e3550000 	cmp	r5, #0
  13e56c:	e1a09000 	mov	r9, r0
  13e570:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13e574:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13e578:	0affffd9 	beq	13e4e4 <perror+0x48>
  13e57c:	e5d53000 	ldrb	r3, [r5]
  13e580:	e3530000 	cmp	r3, #0
  13e584:	0affffd6 	beq	13e4e4 <perror+0x48>
  13e588:	eaffffe6 	b	13e528 <perror+0x8c>
  13e58c:	eb000bcb 	bl	1414c0 <strlen>
  13e590:	e1a03004 	mov	r3, r4
  13e594:	e1a01000 	mov	r1, r0
  13e598:	e3a02001 	mov	r2, #1
  13e59c:	e1a00006 	mov	r0, r6
  13e5a0:	eb0015d1 	bl	143cec <fwrite>
  13e5a4:	e1a01004 	mov	r1, r4
  13e5a8:	e3a0000a 	mov	r0, #10
  13e5ac:	eb00154f 	bl	143af0 <fputc>
  13e5b0:	e5848048 	str	r8, [r4, #72]	; 0x48
  13e5b4:	e5847088 	str	r7, [r4, #136]	; 0x88
  13e5b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13e5bc:	0014d2a8 	.word	0x0014d2a8

0013e5c0 <printf>:
  13e5c0:	e92d000f 	push	{r0, r1, r2, r3}
  13e5c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e5c8:	e24dd00c 	sub	sp, sp, #12
  13e5cc:	e28d3014 	add	r3, sp, #20
  13e5d0:	e1a02003 	mov	r2, r3
  13e5d4:	e59d1010 	ldr	r1, [sp, #16]
  13e5d8:	e59f0014 	ldr	r0, [pc, #20]	; 13e5f4 <printf+0x34>
  13e5dc:	e58d3004 	str	r3, [sp, #4]
  13e5e0:	eb0008f9 	bl	1409cc <vfprintf>
  13e5e4:	e28dd00c 	add	sp, sp, #12
  13e5e8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e5ec:	e28dd010 	add	sp, sp, #16
  13e5f0:	e12fff1e 	bx	lr
  13e5f4:	0014d340 	.word	0x0014d340

0013e5f8 <puts>:
  13e5f8:	e92d4070 	push	{r4, r5, r6, lr}
  13e5fc:	e59f40b0 	ldr	r4, [pc, #176]	; 13e6b4 <puts+0xbc>
  13e600:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e604:	e3530000 	cmp	r3, #0
  13e608:	aa00001b 	bge	13e67c <puts+0x84>
  13e60c:	e1a01004 	mov	r1, r4
  13e610:	eb001569 	bl	143bbc <fputs>
  13e614:	e3500000 	cmp	r0, #0
  13e618:	a3a05000 	movge	r5, #0
  13e61c:	ba000021 	blt	13e6a8 <puts+0xb0>
  13e620:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  13e624:	e353000a 	cmp	r3, #10
  13e628:	0a00000e 	beq	13e668 <puts+0x70>
  13e62c:	e5943014 	ldr	r3, [r4, #20]
  13e630:	e5942010 	ldr	r2, [r4, #16]
  13e634:	e1530002 	cmp	r3, r2
  13e638:	0a00000a 	beq	13e668 <puts+0x70>
  13e63c:	e3a0200a 	mov	r2, #10
  13e640:	e2831001 	add	r1, r3, #1
  13e644:	e5841014 	str	r1, [r4, #20]
  13e648:	e3a04000 	mov	r4, #0
  13e64c:	e5c32000 	strb	r2, [r3]
  13e650:	e3550000 	cmp	r5, #0
  13e654:	0a000001 	beq	13e660 <puts+0x68>
  13e658:	e59f0054 	ldr	r0, [pc, #84]	; 13e6b4 <puts+0xbc>
  13e65c:	eb0013f1 	bl	143628 <__unlockfile>
  13e660:	e1a00004 	mov	r0, r4
  13e664:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e668:	e3a0100a 	mov	r1, #10
  13e66c:	e59f0040 	ldr	r0, [pc, #64]	; 13e6b4 <puts+0xbc>
  13e670:	eb001412 	bl	1436c0 <__overflow>
  13e674:	e1a04fc0 	asr	r4, r0, #31
  13e678:	eafffff4 	b	13e650 <puts+0x58>
  13e67c:	e1a06000 	mov	r6, r0
  13e680:	e1a00004 	mov	r0, r4
  13e684:	eb00139a 	bl	1434f4 <__lockfile>
  13e688:	e1a01004 	mov	r1, r4
  13e68c:	e1a05000 	mov	r5, r0
  13e690:	e1a00006 	mov	r0, r6
  13e694:	eb001548 	bl	143bbc <fputs>
  13e698:	e3500000 	cmp	r0, #0
  13e69c:	b3e04000 	mvnlt	r4, #0
  13e6a0:	aaffffde 	bge	13e620 <puts+0x28>
  13e6a4:	eaffffe9 	b	13e650 <puts+0x58>
  13e6a8:	e3e04000 	mvn	r4, #0
  13e6ac:	e1a00004 	mov	r0, r4
  13e6b0:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e6b4:	0014d340 	.word	0x0014d340

0013e6b8 <pop_arg>:
  13e6b8:	e2411009 	sub	r1, r1, #9
  13e6bc:	e92d0030 	push	{r4, r5}
  13e6c0:	e3510011 	cmp	r1, #17
  13e6c4:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
  13e6c8:	ea000018 	b	13e730 <pop_arg+0x78>
  13e6cc:	0013e7f8 	.word	0x0013e7f8
  13e6d0:	0013e75c 	.word	0x0013e75c
  13e6d4:	0013e77c 	.word	0x0013e77c
  13e6d8:	0013e738 	.word	0x0013e738
  13e6dc:	0013e75c 	.word	0x0013e75c
  13e6e0:	0013e77c 	.word	0x0013e77c
  13e6e4:	0013e830 	.word	0x0013e830
  13e6e8:	0013e7a0 	.word	0x0013e7a0
  13e6ec:	0013e7c0 	.word	0x0013e7c0
  13e6f0:	0013e7dc 	.word	0x0013e7dc
  13e6f4:	0013e738 	.word	0x0013e738
  13e6f8:	0013e77c 	.word	0x0013e77c
  13e6fc:	0013e738 	.word	0x0013e738
  13e700:	0013e738 	.word	0x0013e738
  13e704:	0013e75c 	.word	0x0013e75c
  13e708:	0013e810 	.word	0x0013e810
  13e70c:	0013e714 	.word	0x0013e714
  13e710:	0013e714 	.word	0x0013e714
  13e714:	e5923000 	ldr	r3, [r2]
  13e718:	e2833007 	add	r3, r3, #7
  13e71c:	e3c33007 	bic	r3, r3, #7
  13e720:	e2831008 	add	r1, r3, #8
  13e724:	e5821000 	str	r1, [r2]
  13e728:	e893000c 	ldm	r3, {r2, r3}
  13e72c:	e880000c 	stm	r0, {r2, r3}
  13e730:	e8bd0030 	pop	{r4, r5}
  13e734:	e12fff1e 	bx	lr
  13e738:	e5923000 	ldr	r3, [r2]
  13e73c:	e8bd0030 	pop	{r4, r5}
  13e740:	e2833007 	add	r3, r3, #7
  13e744:	e3c33007 	bic	r3, r3, #7
  13e748:	e2831008 	add	r1, r3, #8
  13e74c:	e5821000 	str	r1, [r2]
  13e750:	e893000c 	ldm	r3, {r2, r3}
  13e754:	e880000c 	stm	r0, {r2, r3}
  13e758:	e12fff1e 	bx	lr
  13e75c:	e5923000 	ldr	r3, [r2]
  13e760:	e5934000 	ldr	r4, [r3]
  13e764:	e2833004 	add	r3, r3, #4
  13e768:	e1a05fc4 	asr	r5, r4, #31
  13e76c:	e5823000 	str	r3, [r2]
  13e770:	e8800030 	stm	r0, {r4, r5}
  13e774:	e8bd0030 	pop	{r4, r5}
  13e778:	e12fff1e 	bx	lr
  13e77c:	e3a01000 	mov	r1, #0
  13e780:	e8bd0030 	pop	{r4, r5}
  13e784:	e5923000 	ldr	r3, [r2]
  13e788:	e593c000 	ldr	ip, [r3]
  13e78c:	e2833004 	add	r3, r3, #4
  13e790:	e5823000 	str	r3, [r2]
  13e794:	e580c000 	str	ip, [r0]
  13e798:	e5801004 	str	r1, [r0, #4]
  13e79c:	e12fff1e 	bx	lr
  13e7a0:	e3a01000 	mov	r1, #0
  13e7a4:	e5923000 	ldr	r3, [r2]
  13e7a8:	e1d3c0b0 	ldrh	ip, [r3]
  13e7ac:	e2833004 	add	r3, r3, #4
  13e7b0:	e5823000 	str	r3, [r2]
  13e7b4:	e580c000 	str	ip, [r0]
  13e7b8:	e5801004 	str	r1, [r0, #4]
  13e7bc:	eaffffdb 	b	13e730 <pop_arg+0x78>
  13e7c0:	e5923000 	ldr	r3, [r2]
  13e7c4:	e1d340d0 	ldrsb	r4, [r3]
  13e7c8:	e2833004 	add	r3, r3, #4
  13e7cc:	e1a05fc4 	asr	r5, r4, #31
  13e7d0:	e5823000 	str	r3, [r2]
  13e7d4:	e8800030 	stm	r0, {r4, r5}
  13e7d8:	eaffffd4 	b	13e730 <pop_arg+0x78>
  13e7dc:	e3a05000 	mov	r5, #0
  13e7e0:	e5923000 	ldr	r3, [r2]
  13e7e4:	e5d34000 	ldrb	r4, [r3]
  13e7e8:	e2833004 	add	r3, r3, #4
  13e7ec:	e5823000 	str	r3, [r2]
  13e7f0:	e8800030 	stm	r0, {r4, r5}
  13e7f4:	eaffffcd 	b	13e730 <pop_arg+0x78>
  13e7f8:	e5923000 	ldr	r3, [r2]
  13e7fc:	e2831004 	add	r1, r3, #4
  13e800:	e5821000 	str	r1, [r2]
  13e804:	e5933000 	ldr	r3, [r3]
  13e808:	e5803000 	str	r3, [r0]
  13e80c:	eaffffc7 	b	13e730 <pop_arg+0x78>
  13e810:	e3a01000 	mov	r1, #0
  13e814:	e5923000 	ldr	r3, [r2]
  13e818:	e283c004 	add	ip, r3, #4
  13e81c:	e582c000 	str	ip, [r2]
  13e820:	e5933000 	ldr	r3, [r3]
  13e824:	e5801004 	str	r1, [r0, #4]
  13e828:	e5803000 	str	r3, [r0]
  13e82c:	eaffffbf 	b	13e730 <pop_arg+0x78>
  13e830:	e5923000 	ldr	r3, [r2]
  13e834:	e1d340f0 	ldrsh	r4, [r3]
  13e838:	e2833004 	add	r3, r3, #4
  13e83c:	e1a05fc4 	asr	r5, r4, #31
  13e840:	e5823000 	str	r3, [r2]
  13e844:	e8800030 	stm	r0, {r4, r5}
  13e848:	eaffffb8 	b	13e730 <pop_arg+0x78>

0013e84c <pad.part.0>:
  13e84c:	e92d4070 	push	{r4, r5, r6, lr}
  13e850:	e0425003 	sub	r5, r2, r3
  13e854:	e3550c01 	cmp	r5, #256	; 0x100
  13e858:	e24ddc01 	sub	sp, sp, #256	; 0x100
  13e85c:	31a02005 	movcc	r2, r5
  13e860:	23a02c01 	movcs	r2, #256	; 0x100
  13e864:	e1a06000 	mov	r6, r0
  13e868:	e1a0000d 	mov	r0, sp
  13e86c:	eb000a82 	bl	14127c <memset>
  13e870:	e35500ff 	cmp	r5, #255	; 0xff
  13e874:	9a00001b 	bls	13e8e8 <pad.part.0+0x9c>
  13e878:	e5962000 	ldr	r2, [r6]
  13e87c:	e1a04005 	mov	r4, r5
  13e880:	e2022020 	and	r2, r2, #32
  13e884:	ea000001 	b	13e890 <pad.part.0+0x44>
  13e888:	e35400ff 	cmp	r4, #255	; 0xff
  13e88c:	9a00000c 	bls	13e8c4 <pad.part.0+0x78>
  13e890:	e3520000 	cmp	r2, #0
  13e894:	e2444c01 	sub	r4, r4, #256	; 0x100
  13e898:	e1a01002 	mov	r1, r2
  13e89c:	1afffff9 	bne	13e888 <pad.part.0+0x3c>
  13e8a0:	e1a02006 	mov	r2, r6
  13e8a4:	e3a01c01 	mov	r1, #256	; 0x100
  13e8a8:	e1a0000d 	mov	r0, sp
  13e8ac:	eb0014cf 	bl	143bf0 <__fwritex>
  13e8b0:	e5962000 	ldr	r2, [r6]
  13e8b4:	e35400ff 	cmp	r4, #255	; 0xff
  13e8b8:	e2022020 	and	r2, r2, #32
  13e8bc:	e1a01002 	mov	r1, r2
  13e8c0:	8afffff2 	bhi	13e890 <pad.part.0+0x44>
  13e8c4:	e20550ff 	and	r5, r5, #255	; 0xff
  13e8c8:	e3510000 	cmp	r1, #0
  13e8cc:	1a000003 	bne	13e8e0 <pad.part.0+0x94>
  13e8d0:	e1a02006 	mov	r2, r6
  13e8d4:	e1a01005 	mov	r1, r5
  13e8d8:	e1a0000d 	mov	r0, sp
  13e8dc:	eb0014c3 	bl	143bf0 <__fwritex>
  13e8e0:	e28ddc01 	add	sp, sp, #256	; 0x100
  13e8e4:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e8e8:	e5961000 	ldr	r1, [r6]
  13e8ec:	e2011020 	and	r1, r1, #32
  13e8f0:	eafffff4 	b	13e8c8 <pad.part.0+0x7c>
  13e8f4:	00000000 	andeq	r0, r0, r0

0013e8f8 <printf_core>:
  13e8f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13e8fc:	e3a0a000 	mov	sl, #0
  13e900:	e1a0b001 	mov	fp, r1
  13e904:	e24ddfb3 	sub	sp, sp, #716	; 0x2cc
  13e908:	e58d0004 	str	r0, [sp, #4]
  13e90c:	e58d2018 	str	r2, [sp, #24]
  13e910:	e58d3028 	str	r3, [sp, #40]	; 0x28
  13e914:	e58da000 	str	sl, [sp]
  13e918:	e58da00c 	str	sl, [sp, #12]
  13e91c:	e59d2000 	ldr	r2, [sp]
  13e920:	e5db3000 	ldrb	r3, [fp]
  13e924:	e082200a 	add	r2, r2, sl
  13e928:	e3530000 	cmp	r3, #0
  13e92c:	e58d2000 	str	r2, [sp]
  13e930:	0a0001c8 	beq	13f058 <printf_core+0x760>
  13e934:	e3530025 	cmp	r3, #37	; 0x25
  13e938:	e1a0300b 	mov	r3, fp
  13e93c:	0a000005 	beq	13e958 <printf_core+0x60>
  13e940:	e5f32001 	ldrb	r2, [r3, #1]!
  13e944:	e3520000 	cmp	r2, #0
  13e948:	13520025 	cmpne	r2, #37	; 0x25
  13e94c:	1afffffb 	bne	13e940 <printf_core+0x48>
  13e950:	e3520025 	cmp	r2, #37	; 0x25
  13e954:	1a00019c 	bne	13efcc <printf_core+0x6d4>
  13e958:	e5d32001 	ldrb	r2, [r3, #1]
  13e95c:	e1a04003 	mov	r4, r3
  13e960:	e3520025 	cmp	r2, #37	; 0x25
  13e964:	0a000003 	beq	13e978 <printf_core+0x80>
  13e968:	ea000006 	b	13e988 <printf_core+0x90>
  13e96c:	e5d42001 	ldrb	r2, [r4, #1]
  13e970:	e3520025 	cmp	r2, #37	; 0x25
  13e974:	1a000003 	bne	13e988 <printf_core+0x90>
  13e978:	e5f42002 	ldrb	r2, [r4, #2]!
  13e97c:	e2833001 	add	r3, r3, #1
  13e980:	e3520025 	cmp	r2, #37	; 0x25
  13e984:	0afffff8 	beq	13e96c <printf_core+0x74>
  13e988:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13e98c:	e043a00b 	sub	sl, r3, fp
  13e990:	e59d3000 	ldr	r3, [sp]
  13e994:	e0423003 	sub	r3, r2, r3
  13e998:	e15a0003 	cmp	sl, r3
  13e99c:	e58d3008 	str	r3, [sp, #8]
  13e9a0:	ca000181 	bgt	13efac <printf_core+0x6b4>
  13e9a4:	e59d3004 	ldr	r3, [sp, #4]
  13e9a8:	e3530000 	cmp	r3, #0
  13e9ac:	0a000002 	beq	13e9bc <printf_core+0xc4>
  13e9b0:	e5933000 	ldr	r3, [r3]
  13e9b4:	e3130020 	tst	r3, #32
  13e9b8:	0a000146 	beq	13eed8 <printf_core+0x5e0>
  13e9bc:	e35a0000 	cmp	sl, #0
  13e9c0:	1a0000b7 	bne	13eca4 <printf_core+0x3ac>
  13e9c4:	e5d42001 	ldrb	r2, [r4, #1]
  13e9c8:	e242c030 	sub	ip, r2, #48	; 0x30
  13e9cc:	e35c0009 	cmp	ip, #9
  13e9d0:	8a000002 	bhi	13e9e0 <printf_core+0xe8>
  13e9d4:	e5d43002 	ldrb	r3, [r4, #2]
  13e9d8:	e3530024 	cmp	r3, #36	; 0x24
  13e9dc:	0a000194 	beq	13f034 <printf_core+0x73c>
  13e9e0:	e2423020 	sub	r3, r2, #32
  13e9e4:	e353001f 	cmp	r3, #31
  13e9e8:	e3e0c000 	mvn	ip, #0
  13e9ec:	e2846001 	add	r6, r4, #1
  13e9f0:	8a000196 	bhi	13f050 <printf_core+0x758>
  13e9f4:	e59f0f44 	ldr	r0, [pc, #3908]	; 13f940 <printf_core+0x1048>
  13e9f8:	e1a01330 	lsr	r1, r0, r3
  13e9fc:	e2118001 	ands	r8, r1, #1
  13ea00:	0a00000a 	beq	13ea30 <printf_core+0x138>
  13ea04:	e3a08000 	mov	r8, #0
  13ea08:	e3a0e001 	mov	lr, #1
  13ea0c:	ea000002 	b	13ea1c <printf_core+0x124>
  13ea10:	e1a01330 	lsr	r1, r0, r3
  13ea14:	e3110001 	tst	r1, #1
  13ea18:	0a000004 	beq	13ea30 <printf_core+0x138>
  13ea1c:	e5f62001 	ldrb	r2, [r6, #1]!
  13ea20:	e188831e 	orr	r8, r8, lr, lsl r3
  13ea24:	e2423020 	sub	r3, r2, #32
  13ea28:	e353001f 	cmp	r3, #31
  13ea2c:	9afffff7 	bls	13ea10 <printf_core+0x118>
  13ea30:	e352002a 	cmp	r2, #42	; 0x2a
  13ea34:	0a00009c 	beq	13ecac <printf_core+0x3b4>
  13ea38:	e5d61000 	ldrb	r1, [r6]
  13ea3c:	e2413030 	sub	r3, r1, #48	; 0x30
  13ea40:	e3530009 	cmp	r3, #9
  13ea44:	81a02001 	movhi	r2, r1
  13ea48:	83a09000 	movhi	r9, #0
  13ea4c:	8a000012 	bhi	13ea9c <printf_core+0x1a4>
  13ea50:	e3a09000 	mov	r9, #0
  13ea54:	e59f0ee8 	ldr	r0, [pc, #3816]	; 13f944 <printf_core+0x104c>
  13ea58:	e0693e89 	rsb	r3, r9, r9, lsl #29
  13ea5c:	e0693103 	rsb	r3, r9, r3, lsl #2
  13ea60:	e5f62001 	ldrb	r2, [r6, #1]!
  13ea64:	e1a03083 	lsl	r3, r3, #1
  13ea68:	e1590000 	cmp	r9, r0
  13ea6c:	e2411030 	sub	r1, r1, #48	; 0x30
  13ea70:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13ea74:	e242e030 	sub	lr, r2, #48	; 0x30
  13ea78:	8a000025 	bhi	13eb14 <printf_core+0x21c>
  13ea7c:	e1510003 	cmp	r1, r3
  13ea80:	e0899109 	add	r9, r9, r9, lsl #2
  13ea84:	ca000022 	bgt	13eb14 <printf_core+0x21c>
  13ea88:	e35e0009 	cmp	lr, #9
  13ea8c:	e0819089 	add	r9, r1, r9, lsl #1
  13ea90:	9a000022 	bls	13eb20 <printf_core+0x228>
  13ea94:	e3590000 	cmp	r9, #0
  13ea98:	ba000143 	blt	13efac <printf_core+0x6b4>
  13ea9c:	e352002e 	cmp	r2, #46	; 0x2e
  13eaa0:	1a000097 	bne	13ed04 <printf_core+0x40c>
  13eaa4:	e5d62001 	ldrb	r2, [r6, #1]
  13eaa8:	e352002a 	cmp	r2, #42	; 0x2a
  13eaac:	1a00011e 	bne	13ef2c <printf_core+0x634>
  13eab0:	e5d62002 	ldrb	r2, [r6, #2]
  13eab4:	e2423030 	sub	r3, r2, #48	; 0x30
  13eab8:	e3530009 	cmp	r3, #9
  13eabc:	8a000002 	bhi	13eacc <printf_core+0x1d4>
  13eac0:	e5d63003 	ldrb	r3, [r6, #3]
  13eac4:	e3530024 	cmp	r3, #36	; 0x24
  13eac8:	0a000143 	beq	13efdc <printf_core+0x6e4>
  13eacc:	e59d300c 	ldr	r3, [sp, #12]
  13ead0:	e3530000 	cmp	r3, #0
  13ead4:	1a00009f 	bne	13ed58 <printf_core+0x460>
  13ead8:	e59d3004 	ldr	r3, [sp, #4]
  13eadc:	e2866002 	add	r6, r6, #2
  13eae0:	e3530000 	cmp	r3, #0
  13eae4:	159d1018 	ldrne	r1, [sp, #24]
  13eae8:	03a03001 	moveq	r3, #1
  13eaec:	15913000 	ldrne	r3, [r1]
  13eaf0:	059d5004 	ldreq	r5, [sp, #4]
  13eaf4:	15935000 	ldrne	r5, [r3]
  13eaf8:	12832004 	addne	r2, r3, #4
  13eafc:	11e03005 	mvnne	r3, r5
  13eb00:	15812000 	strne	r2, [r1]
  13eb04:	11a03fa3 	lsrne	r3, r3, #31
  13eb08:	15d62000 	ldrbne	r2, [r6]
  13eb0c:	e58d301c 	str	r3, [sp, #28]
  13eb10:	ea00007e 	b	13ed10 <printf_core+0x418>
  13eb14:	e35e0009 	cmp	lr, #9
  13eb18:	8a000123 	bhi	13efac <printf_core+0x6b4>
  13eb1c:	e3e09000 	mvn	r9, #0
  13eb20:	e1a01002 	mov	r1, r2
  13eb24:	eaffffcb 	b	13ea58 <printf_core+0x160>
  13eb28:	e28d3070 	add	r3, sp, #112	; 0x70
  13eb2c:	e893000c 	ldm	r3, {r2, r3}
  13eb30:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13eb34:	e1921003 	orrs	r1, r2, r3
  13eb38:	e1a0b00a 	mov	fp, sl
  13eb3c:	0a000009 	beq	13eb68 <printf_core+0x270>
  13eb40:	e1a001a2 	lsr	r0, r2, #3
  13eb44:	e1800e83 	orr	r0, r0, r3, lsl #29
  13eb48:	e1a0c1a3 	lsr	ip, r3, #3
  13eb4c:	e2021007 	and	r1, r2, #7
  13eb50:	e1a0300c 	mov	r3, ip
  13eb54:	e1a02000 	mov	r2, r0
  13eb58:	e2811030 	add	r1, r1, #48	; 0x30
  13eb5c:	e1920003 	orrs	r0, r2, r3
  13eb60:	e56b1001 	strb	r1, [fp, #-1]!
  13eb64:	1afffff5 	bne	13eb40 <printf_core+0x248>
  13eb68:	e2183008 	ands	r3, r8, #8
  13eb6c:	0a00026f 	beq	13f530 <printf_core+0xc38>
  13eb70:	e04a300b 	sub	r3, sl, fp
  13eb74:	e1530005 	cmp	r3, r5
  13eb78:	ba00026b 	blt	13f52c <printf_core+0xc34>
  13eb7c:	e2835001 	add	r5, r3, #1
  13eb80:	e3a03000 	mov	r3, #0
  13eb84:	e58d3020 	str	r3, [sp, #32]
  13eb88:	e59f3db8 	ldr	r3, [pc, #3512]	; 13f948 <printf_core+0x1050>
  13eb8c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13eb90:	e59d301c 	ldr	r3, [sp, #28]
  13eb94:	e0132fa5 	ands	r2, r3, r5, lsr #31
  13eb98:	1a000103 	bne	13efac <printf_core+0x6b4>
  13eb9c:	e59d2070 	ldr	r2, [sp, #112]	; 0x70
  13eba0:	e3530000 	cmp	r3, #0
  13eba4:	e59d3074 	ldr	r3, [sp, #116]	; 0x74
  13eba8:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13ebac:	e1923003 	orrs	r3, r2, r3
  13ebb0:	03a03001 	moveq	r3, #1
  13ebb4:	13a03000 	movne	r3, #0
  13ebb8:	e3550000 	cmp	r5, #0
  13ebbc:	01a02003 	moveq	r2, r3
  13ebc0:	13a02000 	movne	r2, #0
  13ebc4:	e3520000 	cmp	r2, #0
  13ebc8:	1a0002a8 	bne	13f670 <printf_core+0xd78>
  13ebcc:	e04a600b 	sub	r6, sl, fp
  13ebd0:	e1560005 	cmp	r6, r5
  13ebd4:	a1a05006 	movge	r5, r6
  13ebd8:	e0833006 	add	r3, r3, r6
  13ebdc:	e1530005 	cmp	r3, r5
  13ebe0:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13ebe4:	a1a05003 	movge	r5, r3
  13ebe8:	e59d3020 	ldr	r3, [sp, #32]
  13ebec:	e0423003 	sub	r3, r2, r3
  13ebf0:	e1530005 	cmp	r3, r5
  13ebf4:	ba0000ec 	blt	13efac <printf_core+0x6b4>
  13ebf8:	e59d3020 	ldr	r3, [sp, #32]
  13ebfc:	e0857003 	add	r7, r5, r3
  13ec00:	e1570009 	cmp	r7, r9
  13ec04:	a1a0a007 	movge	sl, r7
  13ec08:	b1a0a009 	movlt	sl, r9
  13ec0c:	e59d3008 	ldr	r3, [sp, #8]
  13ec10:	e153000a 	cmp	r3, sl
  13ec14:	ba0000e4 	blt	13efac <printf_core+0x6b4>
  13ec18:	e157000a 	cmp	r7, sl
  13ec1c:	b3a09000 	movlt	r9, #0
  13ec20:	a3a09001 	movge	r9, #1
  13ec24:	e3180a12 	tst	r8, #73728	; 0x12000
  13ec28:	01a03009 	moveq	r3, r9
  13ec2c:	13a03001 	movne	r3, #1
  13ec30:	e3530000 	cmp	r3, #0
  13ec34:	0a000281 	beq	13f640 <printf_core+0xd48>
  13ec38:	e59d3004 	ldr	r3, [sp, #4]
  13ec3c:	e5933000 	ldr	r3, [r3]
  13ec40:	e3130020 	tst	r3, #32
  13ec44:	0a000233 	beq	13f518 <printf_core+0xc20>
  13ec48:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13ec4c:	e3130a12 	tst	r3, #73728	; 0x12000
  13ec50:	01a03009 	moveq	r3, r9
  13ec54:	13a03001 	movne	r3, #1
  13ec58:	e3530000 	cmp	r3, #0
  13ec5c:	0a00027d 	beq	13f658 <printf_core+0xd60>
  13ec60:	e1550006 	cmp	r5, r6
  13ec64:	ca000225 	bgt	13f500 <printf_core+0xc08>
  13ec68:	e59d3004 	ldr	r3, [sp, #4]
  13ec6c:	e5933000 	ldr	r3, [r3]
  13ec70:	e3130020 	tst	r3, #32
  13ec74:	0a00021c 	beq	13f4ec <printf_core+0xbf4>
  13ec78:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13ec7c:	e3130a12 	tst	r3, #73728	; 0x12000
  13ec80:	01a03009 	moveq	r3, r9
  13ec84:	13a03001 	movne	r3, #1
  13ec88:	e3530000 	cmp	r3, #0
  13ec8c:	1a000004 	bne	13eca4 <printf_core+0x3ac>
  13ec90:	e1a03007 	mov	r3, r7
  13ec94:	e1a0200a 	mov	r2, sl
  13ec98:	e3a01020 	mov	r1, #32
  13ec9c:	e59d0004 	ldr	r0, [sp, #4]
  13eca0:	ebfffee9 	bl	13e84c <pad.part.0>
  13eca4:	e1a0b004 	mov	fp, r4
  13eca8:	eaffff1b 	b	13e91c <printf_core+0x24>
  13ecac:	e5d62001 	ldrb	r2, [r6, #1]
  13ecb0:	e2423030 	sub	r3, r2, #48	; 0x30
  13ecb4:	e3530009 	cmp	r3, #9
  13ecb8:	9a00008b 	bls	13eeec <printf_core+0x5f4>
  13ecbc:	e59d300c 	ldr	r3, [sp, #12]
  13ecc0:	e3530000 	cmp	r3, #0
  13ecc4:	1a000023 	bne	13ed58 <printf_core+0x460>
  13ecc8:	e59d3004 	ldr	r3, [sp, #4]
  13eccc:	e2866001 	add	r6, r6, #1
  13ecd0:	e3530000 	cmp	r3, #0
  13ecd4:	0a0000be 	beq	13efd4 <printf_core+0x6dc>
  13ecd8:	e59d1018 	ldr	r1, [sp, #24]
  13ecdc:	e5913000 	ldr	r3, [r1]
  13ece0:	e2832004 	add	r2, r3, #4
  13ece4:	e5939000 	ldr	r9, [r3]
  13ece8:	e5812000 	str	r2, [r1]
  13ecec:	e5d62000 	ldrb	r2, [r6]
  13ecf0:	e3590000 	cmp	r9, #0
  13ecf4:	b3888a02 	orrlt	r8, r8, #8192	; 0x2000
  13ecf8:	b2699000 	rsblt	r9, r9, #0
  13ecfc:	e352002e 	cmp	r2, #46	; 0x2e
  13ed00:	0affff67 	beq	13eaa4 <printf_core+0x1ac>
  13ed04:	e3a03000 	mov	r3, #0
  13ed08:	e3e05000 	mvn	r5, #0
  13ed0c:	e58d301c 	str	r3, [sp, #28]
  13ed10:	e3a07000 	mov	r7, #0
  13ed14:	e59f0c30 	ldr	r0, [pc, #3120]	; 13f94c <printf_core+0x1054>
  13ed18:	ea000007 	b	13ed3c <printf_core+0x444>
  13ed1c:	e5531041 	ldrb	r1, [r3, #-65]	; 0xffffffbf
  13ed20:	e2864001 	add	r4, r6, #1
  13ed24:	e2413001 	sub	r3, r1, #1
  13ed28:	e3530007 	cmp	r3, #7
  13ed2c:	8a000011 	bhi	13ed78 <printf_core+0x480>
  13ed30:	e5d62001 	ldrb	r2, [r6, #1]
  13ed34:	e1a07001 	mov	r7, r1
  13ed38:	e1a06004 	mov	r6, r4
  13ed3c:	e0673187 	rsb	r3, r7, r7, lsl #3
  13ed40:	e0873103 	add	r3, r7, r3, lsl #2
  13ed44:	e0803083 	add	r3, r0, r3, lsl #1
  13ed48:	e0833002 	add	r3, r3, r2
  13ed4c:	e2422041 	sub	r2, r2, #65	; 0x41
  13ed50:	e3520039 	cmp	r2, #57	; 0x39
  13ed54:	9afffff0 	bls	13ed1c <printf_core+0x424>
  13ed58:	ebffe860 	bl	138ee0 <__errno_location>
  13ed5c:	e3a03016 	mov	r3, #22
  13ed60:	e3e02000 	mvn	r2, #0
  13ed64:	e58d2000 	str	r2, [sp]
  13ed68:	e5803000 	str	r3, [r0]
  13ed6c:	e59d0000 	ldr	r0, [sp]
  13ed70:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13ed74:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13ed78:	e3510000 	cmp	r1, #0
  13ed7c:	0afffff5 	beq	13ed58 <printf_core+0x460>
  13ed80:	e351001b 	cmp	r1, #27
  13ed84:	0a000080 	beq	13ef8c <printf_core+0x694>
  13ed88:	e35c0000 	cmp	ip, #0
  13ed8c:	ba0000a1 	blt	13f018 <printf_core+0x720>
  13ed90:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13ed94:	e59d22f0 	ldr	r2, [sp, #752]	; 0x2f0
  13ed98:	e083318c 	add	r3, r3, ip, lsl #3
  13ed9c:	e782110c 	str	r1, [r2, ip, lsl #2]
  13eda0:	e893000c 	ldm	r3, {r2, r3}
  13eda4:	e58d2070 	str	r2, [sp, #112]	; 0x70
  13eda8:	e58d3074 	str	r3, [sp, #116]	; 0x74
  13edac:	e59d3004 	ldr	r3, [sp, #4]
  13edb0:	e3530000 	cmp	r3, #0
  13edb4:	0a000079 	beq	13efa0 <printf_core+0x6a8>
  13edb8:	e5d63000 	ldrb	r3, [r6]
  13edbc:	e3570000 	cmp	r7, #0
  13edc0:	e58d3010 	str	r3, [sp, #16]
  13edc4:	0a000004 	beq	13eddc <printf_core+0x4e4>
  13edc8:	e203300f 	and	r3, r3, #15
  13edcc:	e3530003 	cmp	r3, #3
  13edd0:	059d3010 	ldreq	r3, [sp, #16]
  13edd4:	03c33020 	biceq	r3, r3, #32
  13edd8:	058d3010 	streq	r3, [sp, #16]
  13eddc:	e59d3010 	ldr	r3, [sp, #16]
  13ede0:	e3180a02 	tst	r8, #8192	; 0x2000
  13ede4:	e2433041 	sub	r3, r3, #65	; 0x41
  13ede8:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13edec:	e3530037 	cmp	r3, #55	; 0x37
  13edf0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  13edf4:	ea0001a2 	b	13f484 <printf_core+0xb8c>
  13edf8:	0013f2d8 	.word	0x0013f2d8
  13edfc:	0013f484 	.word	0x0013f484
  13ee00:	0013f174 	.word	0x0013f174
  13ee04:	0013f484 	.word	0x0013f484
  13ee08:	0013f2d8 	.word	0x0013f2d8
  13ee0c:	0013f2d8 	.word	0x0013f2d8
  13ee10:	0013f2d8 	.word	0x0013f2d8
  13ee14:	0013f484 	.word	0x0013f484
  13ee18:	0013f484 	.word	0x0013f484
  13ee1c:	0013f484 	.word	0x0013f484
  13ee20:	0013f484 	.word	0x0013f484
  13ee24:	0013f484 	.word	0x0013f484
  13ee28:	0013f484 	.word	0x0013f484
  13ee2c:	0013f484 	.word	0x0013f484
  13ee30:	0013f484 	.word	0x0013f484
  13ee34:	0013f484 	.word	0x0013f484
  13ee38:	0013f484 	.word	0x0013f484
  13ee3c:	0013f484 	.word	0x0013f484
  13ee40:	0013f1e4 	.word	0x0013f1e4
  13ee44:	0013f484 	.word	0x0013f484
  13ee48:	0013f484 	.word	0x0013f484
  13ee4c:	0013f484 	.word	0x0013f484
  13ee50:	0013f484 	.word	0x0013f484
  13ee54:	0013f478 	.word	0x0013f478
  13ee58:	0013f484 	.word	0x0013f484
  13ee5c:	0013f484 	.word	0x0013f484
  13ee60:	0013f484 	.word	0x0013f484
  13ee64:	0013f484 	.word	0x0013f484
  13ee68:	0013f484 	.word	0x0013f484
  13ee6c:	0013f484 	.word	0x0013f484
  13ee70:	0013f484 	.word	0x0013f484
  13ee74:	0013f484 	.word	0x0013f484
  13ee78:	0013f2d8 	.word	0x0013f2d8
  13ee7c:	0013f484 	.word	0x0013f484
  13ee80:	0013f1f8 	.word	0x0013f1f8
  13ee84:	0013f234 	.word	0x0013f234
  13ee88:	0013f2d8 	.word	0x0013f2d8
  13ee8c:	0013f2d8 	.word	0x0013f2d8
  13ee90:	0013f2d8 	.word	0x0013f2d8
  13ee94:	0013f484 	.word	0x0013f484
  13ee98:	0013f234 	.word	0x0013f234
  13ee9c:	0013f484 	.word	0x0013f484
  13eea0:	0013f484 	.word	0x0013f484
  13eea4:	0013f484 	.word	0x0013f484
  13eea8:	0013f27c 	.word	0x0013f27c
  13eeac:	0013f2ac 	.word	0x0013f2ac
  13eeb0:	0013eb28 	.word	0x0013eb28
  13eeb4:	0013f3cc 	.word	0x0013f3cc
  13eeb8:	0013f484 	.word	0x0013f484
  13eebc:	0013f484 	.word	0x0013f484
  13eec0:	0013f464 	.word	0x0013f464
  13eec4:	0013f484 	.word	0x0013f484
  13eec8:	0013f0b8 	.word	0x0013f0b8
  13eecc:	0013f484 	.word	0x0013f484
  13eed0:	0013f484 	.word	0x0013f484
  13eed4:	0013f478 	.word	0x0013f478
  13eed8:	e59d2004 	ldr	r2, [sp, #4]
  13eedc:	e1a0100a 	mov	r1, sl
  13eee0:	e1a0000b 	mov	r0, fp
  13eee4:	eb001341 	bl	143bf0 <__fwritex>
  13eee8:	eafffeb3 	b	13e9bc <printf_core+0xc4>
  13eeec:	e5d63002 	ldrb	r3, [r6, #2]
  13eef0:	e3530024 	cmp	r3, #36	; 0x24
  13eef4:	1affff70 	bne	13ecbc <printf_core+0x3c4>
  13eef8:	e3a0300a 	mov	r3, #10
  13eefc:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13ef00:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13ef04:	e7813102 	str	r3, [r1, r2, lsl #2]
  13ef08:	e3a02001 	mov	r2, #1
  13ef0c:	e5d63001 	ldrb	r3, [r6, #1]
  13ef10:	e58d200c 	str	r2, [sp, #12]
  13ef14:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13ef18:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  13ef1c:	e2433030 	sub	r3, r3, #48	; 0x30
  13ef20:	e7929183 	ldr	r9, [r2, r3, lsl #3]
  13ef24:	e2866003 	add	r6, r6, #3
  13ef28:	eaffff6f 	b	13ecec <printf_core+0x3f4>
  13ef2c:	e2421030 	sub	r1, r2, #48	; 0x30
  13ef30:	e3510009 	cmp	r1, #9
  13ef34:	e3a05000 	mov	r5, #0
  13ef38:	e2866001 	add	r6, r6, #1
  13ef3c:	8a00000f 	bhi	13ef80 <printf_core+0x688>
  13ef40:	e59f09fc 	ldr	r0, [pc, #2556]	; 13f944 <printf_core+0x104c>
  13ef44:	e0653e85 	rsb	r3, r5, r5, lsl #29
  13ef48:	e0653103 	rsb	r3, r5, r3, lsl #2
  13ef4c:	e1a03083 	lsl	r3, r3, #1
  13ef50:	e1550000 	cmp	r5, r0
  13ef54:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13ef58:	8a000003 	bhi	13ef6c <printf_core+0x674>
  13ef5c:	e1510003 	cmp	r1, r3
  13ef60:	e0855105 	add	r5, r5, r5, lsl #2
  13ef64:	d0815085 	addle	r5, r1, r5, lsl #1
  13ef68:	da000000 	ble	13ef70 <printf_core+0x678>
  13ef6c:	e3e05000 	mvn	r5, #0
  13ef70:	e5f62001 	ldrb	r2, [r6, #1]!
  13ef74:	e2421030 	sub	r1, r2, #48	; 0x30
  13ef78:	e3510009 	cmp	r1, #9
  13ef7c:	9afffff0 	bls	13ef44 <printf_core+0x64c>
  13ef80:	e3a03001 	mov	r3, #1
  13ef84:	e58d301c 	str	r3, [sp, #28]
  13ef88:	eaffff60 	b	13ed10 <printf_core+0x418>
  13ef8c:	e35c0000 	cmp	ip, #0
  13ef90:	aaffff70 	bge	13ed58 <printf_core+0x460>
  13ef94:	e59d3004 	ldr	r3, [sp, #4]
  13ef98:	e3530000 	cmp	r3, #0
  13ef9c:	1affff85 	bne	13edb8 <printf_core+0x4c0>
  13efa0:	e59d3008 	ldr	r3, [sp, #8]
  13efa4:	e153000a 	cmp	r3, sl
  13efa8:	aaffff3d 	bge	13eca4 <printf_core+0x3ac>
  13efac:	ebffe7cb 	bl	138ee0 <__errno_location>
  13efb0:	e3e02000 	mvn	r2, #0
  13efb4:	e3a0304b 	mov	r3, #75	; 0x4b
  13efb8:	e58d2000 	str	r2, [sp]
  13efbc:	e5803000 	str	r3, [r0]
  13efc0:	e59d0000 	ldr	r0, [sp]
  13efc4:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13efc8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13efcc:	e1a04003 	mov	r4, r3
  13efd0:	eafffe6c 	b	13e988 <printf_core+0x90>
  13efd4:	e59d9004 	ldr	r9, [sp, #4]
  13efd8:	eafffeaf 	b	13ea9c <printf_core+0x1a4>
  13efdc:	e3a0300a 	mov	r3, #10
  13efe0:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13efe4:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13efe8:	e7813102 	str	r3, [r1, r2, lsl #2]
  13efec:	e5d63002 	ldrb	r3, [r6, #2]
  13eff0:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
  13eff4:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13eff8:	e2433030 	sub	r3, r3, #48	; 0x30
  13effc:	e7915183 	ldr	r5, [r1, r3, lsl #3]
  13f000:	e5d62004 	ldrb	r2, [r6, #4]
  13f004:	e1e03005 	mvn	r3, r5
  13f008:	e1a03fa3 	lsr	r3, r3, #31
  13f00c:	e2866004 	add	r6, r6, #4
  13f010:	e58d301c 	str	r3, [sp, #28]
  13f014:	eaffff3d 	b	13ed10 <printf_core+0x418>
  13f018:	e59d3004 	ldr	r3, [sp, #4]
  13f01c:	e3530000 	cmp	r3, #0
  13f020:	0a000409 	beq	14004c <printf_core+0x1754>
  13f024:	e59d2018 	ldr	r2, [sp, #24]
  13f028:	e28d0070 	add	r0, sp, #112	; 0x70
  13f02c:	ebfffda1 	bl	13e6b8 <pop_arg>
  13f030:	eaffff60 	b	13edb8 <printf_core+0x4c0>
  13f034:	e3a03001 	mov	r3, #1
  13f038:	e5d42003 	ldrb	r2, [r4, #3]
  13f03c:	e58d300c 	str	r3, [sp, #12]
  13f040:	e2423020 	sub	r3, r2, #32
  13f044:	e353001f 	cmp	r3, #31
  13f048:	e2846003 	add	r6, r4, #3
  13f04c:	9afffe68 	bls	13e9f4 <printf_core+0xfc>
  13f050:	e3a08000 	mov	r8, #0
  13f054:	eafffe75 	b	13ea30 <printf_core+0x138>
  13f058:	e59d3004 	ldr	r3, [sp, #4]
  13f05c:	e3530000 	cmp	r3, #0
  13f060:	1affff41 	bne	13ed6c <printf_core+0x474>
  13f064:	e59d300c 	ldr	r3, [sp, #12]
  13f068:	e3530000 	cmp	r3, #0
  13f06c:	0a0003f6 	beq	14004c <printf_core+0x1754>
  13f070:	e3a05001 	mov	r5, #1
  13f074:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13f078:	e59d62f0 	ldr	r6, [sp, #752]	; 0x2f0
  13f07c:	e59d7018 	ldr	r7, [sp, #24]
  13f080:	e2834008 	add	r4, r3, #8
  13f084:	e5b61004 	ldr	r1, [r6, #4]!
  13f088:	e3510000 	cmp	r1, #0
  13f08c:	0a0004f8 	beq	140474 <printf_core+0x1b7c>
  13f090:	e1a00004 	mov	r0, r4
  13f094:	e2855001 	add	r5, r5, #1
  13f098:	e1a02007 	mov	r2, r7
  13f09c:	ebfffd85 	bl	13e6b8 <pop_arg>
  13f0a0:	e355000a 	cmp	r5, #10
  13f0a4:	e2844008 	add	r4, r4, #8
  13f0a8:	1afffff5 	bne	13f084 <printf_core+0x78c>
  13f0ac:	e3a03001 	mov	r3, #1
  13f0b0:	e58d3000 	str	r3, [sp]
  13f0b4:	eaffff2c 	b	13ed6c <printf_core+0x474>
  13f0b8:	e3a03000 	mov	r3, #0
  13f0bc:	e28d7070 	add	r7, sp, #112	; 0x70
  13f0c0:	e89700c0 	ldm	r7, {r6, r7}
  13f0c4:	e58d3020 	str	r3, [sp, #32]
  13f0c8:	e59f3878 	ldr	r3, [pc, #2168]	; 13f948 <printf_core+0x1050>
  13f0cc:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f0d0:	e3a03000 	mov	r3, #0
  13f0d4:	e3e02000 	mvn	r2, #0
  13f0d8:	e1570003 	cmp	r7, r3
  13f0dc:	01560002 	cmpeq	r6, r2
  13f0e0:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13f0e4:	91a0b00a 	movls	fp, sl
  13f0e8:	9a000015 	bls	13f144 <printf_core+0x84c>
  13f0ec:	e1a0b00a 	mov	fp, sl
  13f0f0:	e58d2010 	str	r2, [sp, #16]
  13f0f4:	e58d3014 	str	r3, [sp, #20]
  13f0f8:	e1a00006 	mov	r0, r6
  13f0fc:	e1a01007 	mov	r1, r7
  13f100:	e3a0200a 	mov	r2, #10
  13f104:	e3a03000 	mov	r3, #0
  13f108:	eb001834 	bl	1451e0 <__aeabi_uldivmod>
  13f10c:	e2822030 	add	r2, r2, #48	; 0x30
  13f110:	e56b2001 	strb	r2, [fp, #-1]!
  13f114:	e1a00006 	mov	r0, r6
  13f118:	e1a01007 	mov	r1, r7
  13f11c:	e3a0200a 	mov	r2, #10
  13f120:	e3a03000 	mov	r3, #0
  13f124:	eb00182d 	bl	1451e0 <__aeabi_uldivmod>
  13f128:	e28d3010 	add	r3, sp, #16
  13f12c:	e893000c 	ldm	r3, {r2, r3}
  13f130:	e1510003 	cmp	r1, r3
  13f134:	01500002 	cmpeq	r0, r2
  13f138:	e1a06000 	mov	r6, r0
  13f13c:	e1a07001 	mov	r7, r1
  13f140:	8affffec 	bhi	13f0f8 <printf_core+0x800>
  13f144:	e3560000 	cmp	r6, #0
  13f148:	0afffe90 	beq	13eb90 <printf_core+0x298>
  13f14c:	e59f1838 	ldr	r1, [pc, #2104]	; 13f98c <printf_core+0x1094>
  13f150:	e0832196 	umull	r2, r3, r6, r1
  13f154:	e1a031a3 	lsr	r3, r3, #3
  13f158:	e0832103 	add	r2, r3, r3, lsl #2
  13f15c:	e0466082 	sub	r6, r6, r2, lsl #1
  13f160:	e2862030 	add	r2, r6, #48	; 0x30
  13f164:	e2536000 	subs	r6, r3, #0
  13f168:	e56b2001 	strb	r2, [fp, #-1]!
  13f16c:	1afffff6 	bne	13f14c <printf_core+0x854>
  13f170:	eafffe86 	b	13eb90 <printf_core+0x298>
  13f174:	e3a03000 	mov	r3, #0
  13f178:	e3e0a000 	mvn	sl, #0
  13f17c:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13f180:	e28d707c 	add	r7, sp, #124	; 0x7c
  13f184:	e58d3080 	str	r3, [sp, #128]	; 0x80
  13f188:	e58d107c 	str	r1, [sp, #124]	; 0x7c
  13f18c:	e58d7070 	str	r7, [sp, #112]	; 0x70
  13f190:	e3510000 	cmp	r1, #0
  13f194:	0a000112 	beq	13f5e4 <printf_core+0xcec>
  13f198:	e3a05000 	mov	r5, #0
  13f19c:	e28d6068 	add	r6, sp, #104	; 0x68
  13f1a0:	ea000007 	b	13f1c4 <printf_core+0x8cc>
  13f1a4:	e1530000 	cmp	r3, r0
  13f1a8:	3a0000e4 	bcc	13f540 <printf_core+0xc48>
  13f1ac:	e0855000 	add	r5, r5, r0
  13f1b0:	e155000a 	cmp	r5, sl
  13f1b4:	2a0000e1 	bcs	13f540 <printf_core+0xc48>
  13f1b8:	e5b71004 	ldr	r1, [r7, #4]!
  13f1bc:	e3510000 	cmp	r1, #0
  13f1c0:	0a0000de 	beq	13f540 <printf_core+0xc48>
  13f1c4:	e1a00006 	mov	r0, r6
  13f1c8:	eb00109c 	bl	143440 <wctomb>
  13f1cc:	e3500000 	cmp	r0, #0
  13f1d0:	e04a3005 	sub	r3, sl, r5
  13f1d4:	aafffff2 	bge	13f1a4 <printf_core+0x8ac>
  13f1d8:	e3e03000 	mvn	r3, #0
  13f1dc:	e58d3000 	str	r3, [sp]
  13f1e0:	eafffee1 	b	13ed6c <printf_core+0x474>
  13f1e4:	e255a000 	subs	sl, r5, #0
  13f1e8:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13f1ec:	0a0000fc 	beq	13f5e4 <printf_core+0xcec>
  13f1f0:	e5971000 	ldr	r1, [r7]
  13f1f4:	eaffffe5 	b	13f190 <printf_core+0x898>
  13f1f8:	e3a00001 	mov	r0, #1
  13f1fc:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f200:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13f204:	e5cd30cf 	strb	r3, [sp, #207]	; 0xcf
  13f208:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13f20c:	e28db0cf 	add	fp, sp, #207	; 0xcf
  13f210:	e3a03000 	mov	r3, #0
  13f214:	e046600b 	sub	r6, r6, fp
  13f218:	e58d3020 	str	r3, [sp, #32]
  13f21c:	e59f3724 	ldr	r3, [pc, #1828]	; 13f948 <printf_core+0x1050>
  13f220:	e1560000 	cmp	r6, r0
  13f224:	a1a05006 	movge	r5, r6
  13f228:	b1a05000 	movlt	r5, r0
  13f22c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f230:	eafffe70 	b	13ebf8 <printf_core+0x300>
  13f234:	e28d7070 	add	r7, sp, #112	; 0x70
  13f238:	e89700c0 	ldm	r7, {r6, r7}
  13f23c:	e3560000 	cmp	r6, #0
  13f240:	e2d73000 	sbcs	r3, r7, #0
  13f244:	ba000122 	blt	13f6d4 <printf_core+0xddc>
  13f248:	e3180b02 	tst	r8, #2048	; 0x800
  13f24c:	1a000379 	bne	140038 <printf_core+0x1740>
  13f250:	e59fa6f0 	ldr	sl, [pc, #1776]	; 13f948 <printf_core+0x1050>
  13f254:	e2083001 	and	r3, r8, #1
  13f258:	e3530000 	cmp	r3, #0
  13f25c:	e28a2002 	add	r2, sl, #2
  13f260:	01a0300a 	moveq	r3, sl
  13f264:	11a03002 	movne	r3, r2
  13f268:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f26c:	13a03001 	movne	r3, #1
  13f270:	03a03000 	moveq	r3, #0
  13f274:	e58d3020 	str	r3, [sp, #32]
  13f278:	eaffff94 	b	13f0d0 <printf_core+0x7d8>
  13f27c:	ebffe717 	bl	138ee0 <__errno_location>
  13f280:	e5900000 	ldr	r0, [r0]
  13f284:	ebffe737 	bl	138f68 <strerror>
  13f288:	e1a0b000 	mov	fp, r0
  13f28c:	e3550000 	cmp	r5, #0
  13f290:	ba0000fa 	blt	13f680 <printf_core+0xd88>
  13f294:	e1a01005 	mov	r1, r5
  13f298:	e1a0000b 	mov	r0, fp
  13f29c:	eb0008dd 	bl	141618 <strnlen>
  13f2a0:	e08b6000 	add	r6, fp, r0
  13f2a4:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13f2a8:	eaffffd8 	b	13f210 <printf_core+0x918>
  13f2ac:	e3570007 	cmp	r7, #7
  13f2b0:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
  13f2b4:	eaffff39 	b	13efa0 <printf_core+0x6a8>
  13f2b8:	0013f4a8 	.word	0x0013f4a8
  13f2bc:	0013f4a8 	.word	0x0013f4a8
  13f2c0:	0013f4b8 	.word	0x0013f4b8
  13f2c4:	0013f4cc 	.word	0x0013f4cc
  13f2c8:	0013f4dc 	.word	0x0013f4dc
  13f2cc:	0013efa0 	.word	0x0013efa0
  13f2d0:	0013f4a8 	.word	0x0013f4a8
  13f2d4:	0013f4b8 	.word	0x0013f4b8
  13f2d8:	e59d301c 	ldr	r3, [sp, #28]
  13f2dc:	e0133fa5 	ands	r3, r3, r5, lsr #31
  13f2e0:	1affff31 	bne	13efac <printf_core+0x6b4>
  13f2e4:	e28d7070 	add	r7, sp, #112	; 0x70
  13f2e8:	e89700c0 	ldm	r7, {r6, r7}
  13f2ec:	e1b02fa7 	lsrs	r2, r7, #31
  13f2f0:	e58d2030 	str	r2, [sp, #48]	; 0x30
  13f2f4:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f2f8:	0a0000e8 	beq	13f6a0 <printf_core+0xda8>
  13f2fc:	e2873102 	add	r3, r7, #-2147483648	; 0x80000000
  13f300:	e1a07003 	mov	r7, r3
  13f304:	e59f3644 	ldr	r3, [pc, #1604]	; 13f950 <printf_core+0x1058>
  13f308:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13f30c:	e3e02000 	mvn	r2, #0
  13f310:	e59f363c 	ldr	r3, [pc, #1596]	; 13f954 <printf_core+0x105c>
  13f314:	e3c71102 	bic	r1, r7, #-2147483648	; 0x80000000
  13f318:	e1510003 	cmp	r1, r3
  13f31c:	01560002 	cmpeq	r6, r2
  13f320:	e1a00006 	mov	r0, r6
  13f324:	9a0000fb 	bls	13f718 <printf_core+0xe20>
  13f328:	e59d3010 	ldr	r3, [sp, #16]
  13f32c:	e59fe624 	ldr	lr, [pc, #1572]	; 13f958 <printf_core+0x1060>
  13f330:	e59fc624 	ldr	ip, [pc, #1572]	; 13f95c <printf_core+0x1064>
  13f334:	e213a020 	ands	sl, r3, #32
  13f338:	e1a02006 	mov	r2, r6
  13f33c:	e1a03007 	mov	r3, r7
  13f340:	e1a01007 	mov	r1, r7
  13f344:	01a0600e 	moveq	r6, lr
  13f348:	11a0600c 	movne	r6, ip
  13f34c:	eb001729 	bl	144ff8 <__aeabi_dcmpeq>
  13f350:	e3500000 	cmp	r0, #0
  13f354:	1a000004 	bne	13f36c <printf_core+0xa74>
  13f358:	e59fe600 	ldr	lr, [pc, #1536]	; 13f960 <printf_core+0x1068>
  13f35c:	e59fc600 	ldr	ip, [pc, #1536]	; 13f964 <printf_core+0x106c>
  13f360:	e35a0000 	cmp	sl, #0
  13f364:	01a0600e 	moveq	r6, lr
  13f368:	11a0600c 	movne	r6, ip
  13f36c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f370:	e283a003 	add	sl, r3, #3
  13f374:	e159000a 	cmp	r9, sl
  13f378:	c3a07000 	movgt	r7, #0
  13f37c:	d3a07001 	movle	r7, #1
  13f380:	e3180a02 	tst	r8, #8192	; 0x2000
  13f384:	01a03007 	moveq	r3, r7
  13f388:	13a03001 	movne	r3, #1
  13f38c:	e3530000 	cmp	r3, #0
  13f390:	0a00042e 	beq	140450 <printf_core+0x1b58>
  13f394:	e59d3004 	ldr	r3, [sp, #4]
  13f398:	e5933000 	ldr	r3, [r3]
  13f39c:	e3130020 	tst	r3, #32
  13f3a0:	0a00032c 	beq	140058 <printf_core+0x1760>
  13f3a4:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13f3a8:	e3130a12 	tst	r3, #73728	; 0x12000
  13f3ac:	13a07001 	movne	r7, #1
  13f3b0:	e3570000 	cmp	r7, #0
  13f3b4:	0a00034f 	beq	1400f8 <printf_core+0x1800>
  13f3b8:	e159000a 	cmp	r9, sl
  13f3bc:	a1a0a009 	movge	sl, r9
  13f3c0:	e35a0000 	cmp	sl, #0
  13f3c4:	aafffef5 	bge	13efa0 <printf_core+0x6a8>
  13f3c8:	eafffef7 	b	13efac <printf_core+0x6b4>
  13f3cc:	e3550008 	cmp	r5, #8
  13f3d0:	e3a03078 	mov	r3, #120	; 0x78
  13f3d4:	33a05008 	movcc	r5, #8
  13f3d8:	e3a0c020 	mov	ip, #32
  13f3dc:	e58d3010 	str	r3, [sp, #16]
  13f3e0:	e3888008 	orr	r8, r8, #8
  13f3e4:	e28d3070 	add	r3, sp, #112	; 0x70
  13f3e8:	e893000c 	ldm	r3, {r2, r3}
  13f3ec:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13f3f0:	e1921003 	orrs	r1, r2, r3
  13f3f4:	e1a0b00a 	mov	fp, sl
  13f3f8:	0a00004b 	beq	13f52c <printf_core+0xc34>
  13f3fc:	e59f6584 	ldr	r6, [pc, #1412]	; 13f988 <printf_core+0x1090>
  13f400:	e3a01000 	mov	r1, #0
  13f404:	e202000f 	and	r0, r2, #15
  13f408:	e1a0e222 	lsr	lr, r2, #4
  13f40c:	e58d0020 	str	r0, [sp, #32]
  13f410:	e58d1024 	str	r1, [sp, #36]	; 0x24
  13f414:	e18eee03 	orr	lr, lr, r3, lsl #28
  13f418:	e1a01223 	lsr	r1, r3, #4
  13f41c:	e1a03001 	mov	r3, r1
  13f420:	e1a0200e 	mov	r2, lr
  13f424:	e59d1020 	ldr	r1, [sp, #32]
  13f428:	e0860001 	add	r0, r6, r1
  13f42c:	e5d01000 	ldrb	r1, [r0]
  13f430:	e1920003 	orrs	r0, r2, r3
  13f434:	e18c1001 	orr	r1, ip, r1
  13f438:	e56b1001 	strb	r1, [fp, #-1]!
  13f43c:	1affffef 	bne	13f400 <printf_core+0xb08>
  13f440:	e2183008 	ands	r3, r8, #8
  13f444:	0a000039 	beq	13f530 <printf_core+0xc38>
  13f448:	e3a02002 	mov	r2, #2
  13f44c:	e59f34f4 	ldr	r3, [pc, #1268]	; 13f948 <printf_core+0x1050>
  13f450:	e58d2020 	str	r2, [sp, #32]
  13f454:	e59d2010 	ldr	r2, [sp, #16]
  13f458:	e0833242 	add	r3, r3, r2, asr #4
  13f45c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f460:	eafffdca 	b	13eb90 <printf_core+0x298>
  13f464:	e59db070 	ldr	fp, [sp, #112]	; 0x70
  13f468:	e59f34f8 	ldr	r3, [pc, #1272]	; 13f968 <printf_core+0x1070>
  13f46c:	e35b0000 	cmp	fp, #0
  13f470:	01a0b003 	moveq	fp, r3
  13f474:	eaffff84 	b	13f28c <printf_core+0x994>
  13f478:	e59d3010 	ldr	r3, [sp, #16]
  13f47c:	e203c020 	and	ip, r3, #32
  13f480:	eaffffd7 	b	13f3e4 <printf_core+0xaec>
  13f484:	e3a03000 	mov	r3, #0
  13f488:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13f48c:	e046600b 	sub	r6, r6, fp
  13f490:	e58d3020 	str	r3, [sp, #32]
  13f494:	e59f34ac 	ldr	r3, [pc, #1196]	; 13f948 <printf_core+0x1050>
  13f498:	e1560005 	cmp	r6, r5
  13f49c:	a1a05006 	movge	r5, r6
  13f4a0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f4a4:	eafffdd3 	b	13ebf8 <printf_core+0x300>
  13f4a8:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f4ac:	e59d2000 	ldr	r2, [sp]
  13f4b0:	e5832000 	str	r2, [r3]
  13f4b4:	eafffeb9 	b	13efa0 <printf_core+0x6a8>
  13f4b8:	e59d2000 	ldr	r2, [sp]
  13f4bc:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13f4c0:	e1a03fc2 	asr	r3, r2, #31
  13f4c4:	e881000c 	stm	r1, {r2, r3}
  13f4c8:	eafffeb4 	b	13efa0 <printf_core+0x6a8>
  13f4cc:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f4d0:	e59d2000 	ldr	r2, [sp]
  13f4d4:	e1c320b0 	strh	r2, [r3]
  13f4d8:	eafffeb0 	b	13efa0 <printf_core+0x6a8>
  13f4dc:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f4e0:	e59d2000 	ldr	r2, [sp]
  13f4e4:	e5c32000 	strb	r2, [r3]
  13f4e8:	eafffeac 	b	13efa0 <printf_core+0x6a8>
  13f4ec:	e1a01006 	mov	r1, r6
  13f4f0:	e1a0000b 	mov	r0, fp
  13f4f4:	e59d2004 	ldr	r2, [sp, #4]
  13f4f8:	eb0011bc 	bl	143bf0 <__fwritex>
  13f4fc:	eafffddd 	b	13ec78 <printf_core+0x380>
  13f500:	e1a02005 	mov	r2, r5
  13f504:	e1a03006 	mov	r3, r6
  13f508:	e3a01030 	mov	r1, #48	; 0x30
  13f50c:	e59d0004 	ldr	r0, [sp, #4]
  13f510:	ebfffccd 	bl	13e84c <pad.part.0>
  13f514:	eafffdd3 	b	13ec68 <printf_core+0x370>
  13f518:	e59d1020 	ldr	r1, [sp, #32]
  13f51c:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  13f520:	e59d2004 	ldr	r2, [sp, #4]
  13f524:	eb0011b1 	bl	143bf0 <__fwritex>
  13f528:	eafffdc6 	b	13ec48 <printf_core+0x350>
  13f52c:	e3a03000 	mov	r3, #0
  13f530:	e58d3020 	str	r3, [sp, #32]
  13f534:	e59f340c 	ldr	r3, [pc, #1036]	; 13f948 <printf_core+0x1050>
  13f538:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f53c:	eafffd93 	b	13eb90 <printf_core+0x298>
  13f540:	e3550000 	cmp	r5, #0
  13f544:	e1a0b005 	mov	fp, r5
  13f548:	bafffe97 	blt	13efac <printf_core+0x6b4>
  13f54c:	e1550009 	cmp	r5, r9
  13f550:	b3a03000 	movlt	r3, #0
  13f554:	a3a03001 	movge	r3, #1
  13f558:	e3180a12 	tst	r8, #73728	; 0x12000
  13f55c:	e58d3010 	str	r3, [sp, #16]
  13f560:	13a03001 	movne	r3, #1
  13f564:	e3530000 	cmp	r3, #0
  13f568:	0a000062 	beq	13f6f8 <printf_core+0xe00>
  13f56c:	e3550000 	cmp	r5, #0
  13f570:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13f574:	0a000025 	beq	13f610 <printf_core+0xd18>
  13f578:	e5971000 	ldr	r1, [r7]
  13f57c:	e3510000 	cmp	r1, #0
  13f580:	0a000022 	beq	13f610 <printf_core+0xd18>
  13f584:	e3a0a000 	mov	sl, #0
  13f588:	e58d401c 	str	r4, [sp, #28]
  13f58c:	e28d6068 	add	r6, sp, #104	; 0x68
  13f590:	e1a0400a 	mov	r4, sl
  13f594:	e59da004 	ldr	sl, [sp, #4]
  13f598:	ea000004 	b	13f5b0 <printf_core+0xcb8>
  13f59c:	e1540005 	cmp	r4, r5
  13f5a0:	2a000024 	bcs	13f638 <printf_core+0xd40>
  13f5a4:	e5b71004 	ldr	r1, [r7, #4]!
  13f5a8:	e3510000 	cmp	r1, #0
  13f5ac:	0a000021 	beq	13f638 <printf_core+0xd40>
  13f5b0:	e1a00006 	mov	r0, r6
  13f5b4:	eb000fa1 	bl	143440 <wctomb>
  13f5b8:	e0844000 	add	r4, r4, r0
  13f5bc:	e1540005 	cmp	r4, r5
  13f5c0:	8a00001c 	bhi	13f638 <printf_core+0xd40>
  13f5c4:	e59a2000 	ldr	r2, [sl]
  13f5c8:	e3120020 	tst	r2, #32
  13f5cc:	1afffff2 	bne	13f59c <printf_core+0xca4>
  13f5d0:	e1a01000 	mov	r1, r0
  13f5d4:	e1a0200a 	mov	r2, sl
  13f5d8:	e1a00006 	mov	r0, r6
  13f5dc:	eb001183 	bl	143bf0 <__fwritex>
  13f5e0:	eaffffed 	b	13f59c <printf_core+0xca4>
  13f5e4:	e3590000 	cmp	r9, #0
  13f5e8:	c3a03000 	movgt	r3, #0
  13f5ec:	d3a03001 	movle	r3, #1
  13f5f0:	e3180a12 	tst	r8, #73728	; 0x12000
  13f5f4:	e58d3010 	str	r3, [sp, #16]
  13f5f8:	13a03001 	movne	r3, #1
  13f5fc:	e3530000 	cmp	r3, #0
  13f600:	01a0b003 	moveq	fp, r3
  13f604:	01a0500b 	moveq	r5, fp
  13f608:	0a00003a 	beq	13f6f8 <printf_core+0xe00>
  13f60c:	e3a0b000 	mov	fp, #0
  13f610:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13f614:	e3130a12 	tst	r3, #73728	; 0x12000
  13f618:	e59d3010 	ldr	r3, [sp, #16]
  13f61c:	13a03001 	movne	r3, #1
  13f620:	e3530000 	cmp	r3, #0
  13f624:	0a00027d 	beq	140020 <printf_core+0x1728>
  13f628:	e159000b 	cmp	r9, fp
  13f62c:	a1a0a009 	movge	sl, r9
  13f630:	b1a0a00b 	movlt	sl, fp
  13f634:	eafffe59 	b	13efa0 <printf_core+0x6a8>
  13f638:	e59d401c 	ldr	r4, [sp, #28]
  13f63c:	eafffff3 	b	13f610 <printf_core+0xd18>
  13f640:	e1a03007 	mov	r3, r7
  13f644:	e1a0200a 	mov	r2, sl
  13f648:	e3a01020 	mov	r1, #32
  13f64c:	e59d0004 	ldr	r0, [sp, #4]
  13f650:	ebfffc7d 	bl	13e84c <pad.part.0>
  13f654:	eafffd77 	b	13ec38 <printf_core+0x340>
  13f658:	e1a03007 	mov	r3, r7
  13f65c:	e1a0200a 	mov	r2, sl
  13f660:	e3a01030 	mov	r1, #48	; 0x30
  13f664:	e59d0004 	ldr	r0, [sp, #4]
  13f668:	ebfffc77 	bl	13e84c <pad.part.0>
  13f66c:	eafffd7b 	b	13ec60 <printf_core+0x368>
  13f670:	e3a05000 	mov	r5, #0
  13f674:	e1a0b00a 	mov	fp, sl
  13f678:	e1a06005 	mov	r6, r5
  13f67c:	eafffd5d 	b	13ebf8 <printf_core+0x300>
  13f680:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  13f684:	e1a0000b 	mov	r0, fp
  13f688:	eb0007e2 	bl	141618 <strnlen>
  13f68c:	e7db3000 	ldrb	r3, [fp, r0]
  13f690:	e08b6000 	add	r6, fp, r0
  13f694:	e3530000 	cmp	r3, #0
  13f698:	0affff01 	beq	13f2a4 <printf_core+0x9ac>
  13f69c:	eafffe42 	b	13efac <printf_core+0x6b4>
  13f6a0:	e3180b02 	tst	r8, #2048	; 0x800
  13f6a4:	1a000278 	bne	14008c <printf_core+0x1794>
  13f6a8:	e59f22bc 	ldr	r2, [pc, #700]	; 13f96c <printf_core+0x1074>
  13f6ac:	e2083001 	and	r3, r8, #1
  13f6b0:	e3530000 	cmp	r3, #0
  13f6b4:	e2821005 	add	r1, r2, #5
  13f6b8:	01a03002 	moveq	r3, r2
  13f6bc:	11a03001 	movne	r3, r1
  13f6c0:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13f6c4:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f6c8:	13a03001 	movne	r3, #1
  13f6cc:	e58d3030 	str	r3, [sp, #48]	; 0x30
  13f6d0:	eaffff0d 	b	13f30c <printf_core+0xa14>
  13f6d4:	e3a03001 	mov	r3, #1
  13f6d8:	e2766000 	rsbs	r6, r6, #0
  13f6dc:	e58d3020 	str	r3, [sp, #32]
  13f6e0:	e59f3260 	ldr	r3, [pc, #608]	; 13f948 <printf_core+0x1050>
  13f6e4:	e2e77000 	rsc	r7, r7, #0
  13f6e8:	e58d6070 	str	r6, [sp, #112]	; 0x70
  13f6ec:	e58d7074 	str	r7, [sp, #116]	; 0x74
  13f6f0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f6f4:	eafffe75 	b	13f0d0 <printf_core+0x7d8>
  13f6f8:	e1a0300b 	mov	r3, fp
  13f6fc:	e1a02009 	mov	r2, r9
  13f700:	e3a01020 	mov	r1, #32
  13f704:	e59d0004 	ldr	r0, [sp, #4]
  13f708:	ebfffc4f 	bl	13e84c <pad.part.0>
  13f70c:	e3a03000 	mov	r3, #0
  13f710:	e58d3010 	str	r3, [sp, #16]
  13f714:	eaffff94 	b	13f56c <printf_core+0xc74>
  13f718:	e28d206c 	add	r2, sp, #108	; 0x6c
  13f71c:	e1a01007 	mov	r1, r7
  13f720:	eb000f2f 	bl	1433e4 <frexpl>
  13f724:	e1a02000 	mov	r2, r0
  13f728:	e1a03001 	mov	r3, r1
  13f72c:	eb0013f6 	bl	14470c <__adddf3>
  13f730:	e3a03000 	mov	r3, #0
  13f734:	e3a02000 	mov	r2, #0
  13f738:	e58d001c 	str	r0, [sp, #28]
  13f73c:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13f740:	eb00162c 	bl	144ff8 <__aeabi_dcmpeq>
  13f744:	e59d306c 	ldr	r3, [sp, #108]	; 0x6c
  13f748:	e3500000 	cmp	r0, #0
  13f74c:	02433001 	subeq	r3, r3, #1
  13f750:	158d3020 	strne	r3, [sp, #32]
  13f754:	058d3020 	streq	r3, [sp, #32]
  13f758:	058d306c 	streq	r3, [sp, #108]	; 0x6c
  13f75c:	e59d3010 	ldr	r3, [sp, #16]
  13f760:	e3833020 	orr	r3, r3, #32
  13f764:	e3530061 	cmp	r3, #97	; 0x61
  13f768:	e58d303c 	str	r3, [sp, #60]	; 0x3c
  13f76c:	0a000267 	beq	140110 <printf_core+0x1818>
  13f770:	e3550000 	cmp	r5, #0
  13f774:	ba000460 	blt	1408fc <printf_core+0x2004>
  13f778:	13a03001 	movne	r3, #1
  13f77c:	03a03000 	moveq	r3, #0
  13f780:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13f784:	e59d701c 	ldr	r7, [sp, #28]
  13f788:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
  13f78c:	e1a00007 	mov	r0, r7
  13f790:	e1a01006 	mov	r1, r6
  13f794:	e3a02000 	mov	r2, #0
  13f798:	e3a03000 	mov	r3, #0
  13f79c:	eb001615 	bl	144ff8 <__aeabi_dcmpeq>
  13f7a0:	e3500000 	cmp	r0, #0
  13f7a4:	1a00000a 	bne	13f7d4 <printf_core+0xedc>
  13f7a8:	e59f31c0 	ldr	r3, [pc, #448]	; 13f970 <printf_core+0x1078>
  13f7ac:	e1a00007 	mov	r0, r7
  13f7b0:	e1a01006 	mov	r1, r6
  13f7b4:	e3a02000 	mov	r2, #0
  13f7b8:	eb0014c0 	bl	144ac0 <__aeabi_dmul>
  13f7bc:	e59d3020 	ldr	r3, [sp, #32]
  13f7c0:	e58d001c 	str	r0, [sp, #28]
  13f7c4:	e243301c 	sub	r3, r3, #28
  13f7c8:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13f7cc:	e58d3020 	str	r3, [sp, #32]
  13f7d0:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f7d4:	e59d3020 	ldr	r3, [sp, #32]
  13f7d8:	e59d601c 	ldr	r6, [sp, #28]
  13f7dc:	e3530000 	cmp	r3, #0
  13f7e0:	a28d3e1f 	addge	r3, sp, #496	; 0x1f0
  13f7e4:	b28d30d0 	addlt	r3, sp, #208	; 0xd0
  13f7e8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f7ec:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13f7f0:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
  13f7f4:	e1a01007 	mov	r1, r7
  13f7f8:	e1a00006 	mov	r0, r6
  13f7fc:	eb00162d 	bl	1450b8 <__aeabi_d2uiz>
  13f800:	e48b0004 	str	r0, [fp], #4
  13f804:	eb00146b 	bl	1449b8 <__aeabi_ui2d>
  13f808:	e1a02000 	mov	r2, r0
  13f80c:	e1a03001 	mov	r3, r1
  13f810:	e1a00006 	mov	r0, r6
  13f814:	e1a01007 	mov	r1, r7
  13f818:	eb0013ba 	bl	144708 <__aeabi_dsub>
  13f81c:	e3a02000 	mov	r2, #0
  13f820:	e59f314c 	ldr	r3, [pc, #332]	; 13f974 <printf_core+0x107c>
  13f824:	eb0014a5 	bl	144ac0 <__aeabi_dmul>
  13f828:	e3a02000 	mov	r2, #0
  13f82c:	e3a03000 	mov	r3, #0
  13f830:	e1a07001 	mov	r7, r1
  13f834:	e1a06000 	mov	r6, r0
  13f838:	eb0015ee 	bl	144ff8 <__aeabi_dcmpeq>
  13f83c:	e3500000 	cmp	r0, #0
  13f840:	0affffeb 	beq	13f7f4 <printf_core+0xefc>
  13f844:	e59d2020 	ldr	r2, [sp, #32]
  13f848:	e1a0300b 	mov	r3, fp
  13f84c:	e3520000 	cmp	r2, #0
  13f850:	e58db01c 	str	fp, [sp, #28]
  13f854:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13f858:	da000067 	ble	13f9fc <printf_core+0x1104>
  13f85c:	e58da048 	str	sl, [sp, #72]	; 0x48
  13f860:	e1a0a003 	mov	sl, r3
  13f864:	e58d5060 	str	r5, [sp, #96]	; 0x60
  13f868:	e58d4064 	str	r4, [sp, #100]	; 0x64
  13f86c:	e58d9058 	str	r9, [sp, #88]	; 0x58
  13f870:	e58d805c 	str	r8, [sp, #92]	; 0x5c
  13f874:	e28d9050 	add	r9, sp, #80	; 0x50
  13f878:	e8990300 	ldm	r9, {r8, r9}
  13f87c:	e59d2020 	ldr	r2, [sp, #32]
  13f880:	e24a3004 	sub	r3, sl, #4
  13f884:	e352001d 	cmp	r2, #29
  13f888:	b1a05002 	movlt	r5, r2
  13f88c:	a3a0501d 	movge	r5, #29
  13f890:	e153000b 	cmp	r3, fp
  13f894:	e58d3038 	str	r3, [sp, #56]	; 0x38
  13f898:	3a00001e 	bcc	13f918 <printf_core+0x1020>
  13f89c:	e1a04003 	mov	r4, r3
  13f8a0:	e2453020 	sub	r3, r5, #32
  13f8a4:	e58da040 	str	sl, [sp, #64]	; 0x40
  13f8a8:	e3a00000 	mov	r0, #0
  13f8ac:	e1a0a003 	mov	sl, r3
  13f8b0:	e2652020 	rsb	r2, r5, #32
  13f8b4:	e58d201c 	str	r2, [sp, #28]
  13f8b8:	e5941000 	ldr	r1, [r4]
  13f8bc:	e59dc01c 	ldr	ip, [sp, #28]
  13f8c0:	e1a09a11 	lsl	r9, r1, sl
  13f8c4:	e1a08511 	lsl	r8, r1, r5
  13f8c8:	e0986000 	adds	r6, r8, r0
  13f8cc:	e1899c31 	orr	r9, r9, r1, lsr ip
  13f8d0:	e2a97000 	adc	r7, r9, #0
  13f8d4:	e28f305c 	add	r3, pc, #92	; 0x5c
  13f8d8:	e893000c 	ldm	r3, {r2, r3}
  13f8dc:	e1a00006 	mov	r0, r6
  13f8e0:	e1a01007 	mov	r1, r7
  13f8e4:	eb00163d 	bl	1451e0 <__aeabi_uldivmod>
  13f8e8:	e1a00006 	mov	r0, r6
  13f8ec:	e4042004 	str	r2, [r4], #-4
  13f8f0:	e1a01007 	mov	r1, r7
  13f8f4:	e28f303c 	add	r3, pc, #60	; 0x3c
  13f8f8:	e893000c 	ldm	r3, {r2, r3}
  13f8fc:	eb001637 	bl	1451e0 <__aeabi_uldivmod>
  13f900:	e154000b 	cmp	r4, fp
  13f904:	2affffeb 	bcs	13f8b8 <printf_core+0xfc0>
  13f908:	e3500000 	cmp	r0, #0
  13f90c:	e59da040 	ldr	sl, [sp, #64]	; 0x40
  13f910:	150b0004 	strne	r0, [fp, #-4]
  13f914:	124bb004 	subne	fp, fp, #4
  13f918:	e15b000a 	cmp	fp, sl
  13f91c:	2a000028 	bcs	13f9c4 <printf_core+0x10cc>
  13f920:	e51a3004 	ldr	r3, [sl, #-4]
  13f924:	e3530000 	cmp	r3, #0
  13f928:	059d3038 	ldreq	r3, [sp, #56]	; 0x38
  13f92c:	0a000021 	beq	13f9b8 <printf_core+0x10c0>
  13f930:	ea000023 	b	13f9c4 <printf_core+0x10cc>
  13f934:	e1a00000 	nop			; (mov r0, r0)
  13f938:	3b9aca00 	.word	0x3b9aca00
  13f93c:	00000000 	.word	0x00000000
  13f940:	00012889 	.word	0x00012889
  13f944:	0ccccccc 	.word	0x0ccccccc
  13f948:	0014cd98 	.word	0x0014cd98
  13f94c:	0014cdd4 	.word	0x0014cdd4
  13f950:	0014cdac 	.word	0x0014cdac
  13f954:	7fefffff 	.word	0x7fefffff
  13f958:	0014cdc4 	.word	0x0014cdc4
  13f95c:	0014cdc0 	.word	0x0014cdc0
  13f960:	0014cdcc 	.word	0x0014cdcc
  13f964:	0014cdc8 	.word	0x0014cdc8
  13f968:	0014cda4 	.word	0x0014cda4
  13f96c:	0014cdad 	.word	0x0014cdad
  13f970:	41b00000 	.word	0x41b00000
  13f974:	41cdcd65 	.word	0x41cdcd65
  13f978:	38e38e39 	.word	0x38e38e39
  13f97c:	3b9aca00 	.word	0x3b9aca00
  13f980:	0014cd99 	.word	0x0014cd99
  13f984:	0014cdaf 	.word	0x0014cdaf
  13f988:	0014cfa4 	.word	0x0014cfa4
  13f98c:	cccccccd 	.word	0xcccccccd
  13f990:	0014cdd0 	.word	0x0014cdd0
  13f994:	3b9ac9ff 	.word	0x3b9ac9ff
  13f998:	40300000 	.word	0x40300000
  13f99c:	3fe00000 	.word	0x3fe00000
  13f9a0:	43400000 	.word	0x43400000
  13f9a4:	3ff00000 	.word	0x3ff00000
  13f9a8:	3ff80000 	.word	0x3ff80000
  13f9ac:	e5332004 	ldr	r2, [r3, #-4]!
  13f9b0:	e3520000 	cmp	r2, #0
  13f9b4:	1a000002 	bne	13f9c4 <printf_core+0x10cc>
  13f9b8:	e153000b 	cmp	r3, fp
  13f9bc:	e1a0a003 	mov	sl, r3
  13f9c0:	8afffff9 	bhi	13f9ac <printf_core+0x10b4>
  13f9c4:	e59d3020 	ldr	r3, [sp, #32]
  13f9c8:	e0433005 	sub	r3, r3, r5
  13f9cc:	e3530000 	cmp	r3, #0
  13f9d0:	e58d3020 	str	r3, [sp, #32]
  13f9d4:	caffffa8 	bgt	13f87c <printf_core+0xf84>
  13f9d8:	e58d8050 	str	r8, [sp, #80]	; 0x50
  13f9dc:	e58d9054 	str	r9, [sp, #84]	; 0x54
  13f9e0:	e58da01c 	str	sl, [sp, #28]
  13f9e4:	e59d5060 	ldr	r5, [sp, #96]	; 0x60
  13f9e8:	e59da048 	ldr	sl, [sp, #72]	; 0x48
  13f9ec:	e59d4064 	ldr	r4, [sp, #100]	; 0x64
  13f9f0:	e59d805c 	ldr	r8, [sp, #92]	; 0x5c
  13f9f4:	e59d9058 	ldr	r9, [sp, #88]	; 0x58
  13f9f8:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f9fc:	e59dc020 	ldr	ip, [sp, #32]
  13fa00:	e35c0000 	cmp	ip, #0
  13fa04:	0a000037 	beq	13fae8 <printf_core+0x11f0>
  13fa08:	e58da038 	str	sl, [sp, #56]	; 0x38
  13fa0c:	e1a0a00c 	mov	sl, ip
  13fa10:	e51f10a0 	ldr	r1, [pc, #-160]	; 13f978 <printf_core+0x1080>
  13fa14:	e2850019 	add	r0, r5, #25
  13fa18:	e0832190 	umull	r2, r3, r0, r1
  13fa1c:	e1a030a3 	lsr	r3, r3, #1
  13fa20:	e2836001 	add	r6, r3, #1
  13fa24:	e1a03106 	lsl	r3, r6, #2
  13fa28:	e51f70b4 	ldr	r7, [pc, #-180]	; 13f97c <printf_core+0x1084>
  13fa2c:	e59d001c 	ldr	r0, [sp, #28]
  13fa30:	e58d3020 	str	r3, [sp, #32]
  13fa34:	e58d9040 	str	r9, [sp, #64]	; 0x40
  13fa38:	e37a0009 	cmn	sl, #9
  13fa3c:	a26ac000 	rsbge	ip, sl, #0
  13fa40:	b28aa009 	addlt	sl, sl, #9
  13fa44:	b3a0c009 	movlt	ip, #9
  13fa48:	a3a0a000 	movge	sl, #0
  13fa4c:	e150000b 	cmp	r0, fp
  13fa50:	e59b1000 	ldr	r1, [fp]
  13fa54:	9a000191 	bls	1400a0 <printf_core+0x17a8>
  13fa58:	e3a0e001 	mov	lr, #1
  13fa5c:	e1a0ec1e 	lsl	lr, lr, ip
  13fa60:	e1a0200b 	mov	r2, fp
  13fa64:	e3a03000 	mov	r3, #0
  13fa68:	e24ee001 	sub	lr, lr, #1
  13fa6c:	e1a09c57 	asr	r9, r7, ip
  13fa70:	ea000000 	b	13fa78 <printf_core+0x1180>
  13fa74:	e5921000 	ldr	r1, [r2]
  13fa78:	e0833c31 	add	r3, r3, r1, lsr ip
  13fa7c:	e4823004 	str	r3, [r2], #4
  13fa80:	e00e3001 	and	r3, lr, r1
  13fa84:	e0010399 	mul	r1, r9, r3
  13fa88:	e1520000 	cmp	r2, r0
  13fa8c:	e1a03001 	mov	r3, r1
  13fa90:	3afffff7 	bcc	13fa74 <printf_core+0x117c>
  13fa94:	e59b2000 	ldr	r2, [fp]
  13fa98:	e3520000 	cmp	r2, #0
  13fa9c:	028bb004 	addeq	fp, fp, #4
  13faa0:	e3510000 	cmp	r1, #0
  13faa4:	15801000 	strne	r1, [r0]
  13faa8:	12800004 	addne	r0, r0, #4
  13faac:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13fab0:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13fab4:	e3520066 	cmp	r2, #102	; 0x66
  13fab8:	11a0300b 	movne	r3, fp
  13fabc:	e0402003 	sub	r2, r0, r3
  13fac0:	e1560142 	cmp	r6, r2, asr #2
  13fac4:	b59d2020 	ldrlt	r2, [sp, #32]
  13fac8:	b0830002 	addlt	r0, r3, r2
  13facc:	e35a0000 	cmp	sl, #0
  13fad0:	1affffd8 	bne	13fa38 <printf_core+0x1140>
  13fad4:	e1a0300a 	mov	r3, sl
  13fad8:	e59d9040 	ldr	r9, [sp, #64]	; 0x40
  13fadc:	e59da038 	ldr	sl, [sp, #56]	; 0x38
  13fae0:	e58d001c 	str	r0, [sp, #28]
  13fae4:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13fae8:	e59d301c 	ldr	r3, [sp, #28]
  13faec:	e153000b 	cmp	r3, fp
  13faf0:	91a03005 	movls	r3, r5
  13faf4:	93a06000 	movls	r6, #0
  13faf8:	9a000013 	bls	13fb4c <printf_core+0x1254>
  13fafc:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13fb00:	e59b1000 	ldr	r1, [fp]
  13fb04:	e043600b 	sub	r6, r3, fp
  13fb08:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13fb0c:	e1a06146 	asr	r6, r6, #2
  13fb10:	e2530066 	subs	r0, r3, #102	; 0x66
  13fb14:	13a00001 	movne	r0, #1
  13fb18:	e3510009 	cmp	r1, #9
  13fb1c:	e0866186 	add	r6, r6, r6, lsl #3
  13fb20:	83a0200a 	movhi	r2, #10
  13fb24:	81a03000 	movhi	r3, r0
  13fb28:	9a000005 	bls	13fb44 <printf_core+0x124c>
  13fb2c:	e0822102 	add	r2, r2, r2, lsl #2
  13fb30:	e1a02082 	lsl	r2, r2, #1
  13fb34:	e1510002 	cmp	r1, r2
  13fb38:	e2866001 	add	r6, r6, #1
  13fb3c:	2afffffa 	bcs	13fb2c <printf_core+0x1234>
  13fb40:	e1a00003 	mov	r0, r3
  13fb44:	e0030096 	mul	r3, r6, r0
  13fb48:	e0453003 	sub	r3, r5, r3
  13fb4c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13fb50:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
  13fb54:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
  13fb58:	e3520067 	cmp	r2, #103	; 0x67
  13fb5c:	13a01000 	movne	r1, #0
  13fb60:	02011001 	andeq	r1, r1, #1
  13fb64:	e59d201c 	ldr	r2, [sp, #28]
  13fb68:	e0433001 	sub	r3, r3, r1
  13fb6c:	e042200c 	sub	r2, r2, ip
  13fb70:	e1a02142 	asr	r2, r2, #2
  13fb74:	e2422001 	sub	r2, r2, #1
  13fb78:	e0822182 	add	r2, r2, r2, lsl #3
  13fb7c:	e1530002 	cmp	r3, r2
  13fb80:	aa000057 	bge	13fce4 <printf_core+0x13ec>
  13fb84:	e51f2214 	ldr	r2, [pc, #-532]	; 13f978 <printf_core+0x1080>
  13fb88:	e2833b09 	add	r3, r3, #9216	; 0x2400
  13fb8c:	e0c10293 	smull	r0, r1, r3, r2
  13fb90:	e1a07fc3 	asr	r7, r3, #31
  13fb94:	e06770c1 	rsb	r7, r7, r1, asr #1
  13fb98:	e0872187 	add	r2, r7, r7, lsl #3
  13fb9c:	e0433002 	sub	r3, r3, r2
  13fba0:	e2833001 	add	r3, r3, #1
  13fba4:	e2477fff 	sub	r7, r7, #1020	; 0x3fc
  13fba8:	e247710f 	sub	r7, r7, #-1073741821	; 0xc0000003
  13fbac:	e3530009 	cmp	r3, #9
  13fbb0:	e08c7107 	add	r7, ip, r7, lsl #2
  13fbb4:	0a00036b 	beq	140968 <printf_core+0x2070>
  13fbb8:	e3a0200a 	mov	r2, #10
  13fbbc:	e2833001 	add	r3, r3, #1
  13fbc0:	e0822102 	add	r2, r2, r2, lsl #2
  13fbc4:	e3530009 	cmp	r3, #9
  13fbc8:	e1a02082 	lsl	r2, r2, #1
  13fbcc:	1afffffa 	bne	13fbbc <printf_core+0x12c4>
  13fbd0:	e58d2038 	str	r2, [sp, #56]	; 0x38
  13fbd4:	e5973000 	ldr	r3, [r7]
  13fbd8:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  13fbdc:	e1a00003 	mov	r0, r3
  13fbe0:	e58d3048 	str	r3, [sp, #72]	; 0x48
  13fbe4:	ebffe39f 	bl	138a68 <__aeabi_uidivmod>
  13fbe8:	e2513000 	subs	r3, r1, #0
  13fbec:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13fbf0:	1a000003 	bne	13fc04 <printf_core+0x130c>
  13fbf4:	e59d301c 	ldr	r3, [sp, #28]
  13fbf8:	e287c004 	add	ip, r7, #4
  13fbfc:	e153000c 	cmp	r3, ip
  13fc00:	0a000033 	beq	13fcd4 <printf_core+0x13dc>
  13fc04:	e3100001 	tst	r0, #1
  13fc08:	1a000336 	bne	1408e8 <printf_core+0x1ff0>
  13fc0c:	e51f3298 	ldr	r3, [pc, #-664]	; 13f97c <printf_core+0x1084>
  13fc10:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13fc14:	e157000b 	cmp	r7, fp
  13fc18:	e0422003 	sub	r2, r2, r3
  13fc1c:	e16f2f12 	clz	r2, r2
  13fc20:	e1a022a2 	lsr	r2, r2, #5
  13fc24:	93a02000 	movls	r2, #0
  13fc28:	e3520000 	cmp	r2, #0
  13fc2c:	0a000329 	beq	1408d8 <printf_core+0x1fe0>
  13fc30:	e5173004 	ldr	r3, [r7, #-4]
  13fc34:	e51f229c 	ldr	r2, [pc, #-668]	; 13f9a0 <printf_core+0x10a8>
  13fc38:	e2033001 	and	r3, r3, #1
  13fc3c:	e58d2020 	str	r2, [sp, #32]
  13fc40:	e58d3040 	str	r3, [sp, #64]	; 0x40
  13fc44:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13fc48:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13fc4c:	e15300c2 	cmp	r3, r2, asr #1
  13fc50:	3a00031d 	bcc	1408cc <printf_core+0x1fd4>
  13fc54:	13a0e000 	movne	lr, #0
  13fc58:	151fc2b8 	ldrne	ip, [pc, #-696]	; 13f9a8 <printf_core+0x10b0>
  13fc5c:	0a00032a 	beq	14090c <printf_core+0x2014>
  13fc60:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13fc64:	e3530000 	cmp	r3, #0
  13fc68:	0a000006 	beq	13fc88 <printf_core+0x1390>
  13fc6c:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  13fc70:	e5d33000 	ldrb	r3, [r3]
  13fc74:	e353002d 	cmp	r3, #45	; 0x2d
  13fc78:	059d3020 	ldreq	r3, [sp, #32]
  13fc7c:	028cc102 	addeq	ip, ip, #-2147483648	; 0x80000000
  13fc80:	02833102 	addeq	r3, r3, #-2147483648	; 0x80000000
  13fc84:	058d3020 	streq	r3, [sp, #32]
  13fc88:	e1a0200e 	mov	r2, lr
  13fc8c:	e1a0300c 	mov	r3, ip
  13fc90:	e59de044 	ldr	lr, [sp, #68]	; 0x44
  13fc94:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
  13fc98:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13fc9c:	e04cc00e 	sub	ip, ip, lr
  13fca0:	e59d1020 	ldr	r1, [sp, #32]
  13fca4:	e58dc044 	str	ip, [sp, #68]	; 0x44
  13fca8:	eb001297 	bl	14470c <__adddf3>
  13fcac:	e1a02000 	mov	r2, r0
  13fcb0:	e1a03001 	mov	r3, r1
  13fcb4:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13fcb8:	e59d1020 	ldr	r1, [sp, #32]
  13fcbc:	eb0014cd 	bl	144ff8 <__aeabi_dcmpeq>
  13fcc0:	e2502000 	subs	r2, r0, #0
  13fcc4:	0a0002ab 	beq	140778 <printf_core+0x1e80>
  13fcc8:	e1a0c007 	mov	ip, r7
  13fccc:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13fcd0:	e48c3004 	str	r3, [ip], #4
  13fcd4:	e59d301c 	ldr	r3, [sp, #28]
  13fcd8:	e153000c 	cmp	r3, ip
  13fcdc:	21a0300c 	movcs	r3, ip
  13fce0:	e58d301c 	str	r3, [sp, #28]
  13fce4:	e59d301c 	ldr	r3, [sp, #28]
  13fce8:	e15b0003 	cmp	fp, r3
  13fcec:	2a00000c 	bcs	13fd24 <printf_core+0x142c>
  13fcf0:	e5133004 	ldr	r3, [r3, #-4]
  13fcf4:	e3530000 	cmp	r3, #0
  13fcf8:	059d301c 	ldreq	r3, [sp, #28]
  13fcfc:	02433004 	subeq	r3, r3, #4
  13fd00:	0a000003 	beq	13fd14 <printf_core+0x141c>
  13fd04:	ea000006 	b	13fd24 <printf_core+0x142c>
  13fd08:	e5332004 	ldr	r2, [r3, #-4]!
  13fd0c:	e3520000 	cmp	r2, #0
  13fd10:	1a000002 	bne	13fd20 <printf_core+0x1428>
  13fd14:	e153000b 	cmp	r3, fp
  13fd18:	e1a01003 	mov	r1, r3
  13fd1c:	8afffff9 	bhi	13fd08 <printf_core+0x1410>
  13fd20:	e58d101c 	str	r1, [sp, #28]
  13fd24:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13fd28:	e3530067 	cmp	r3, #103	; 0x67
  13fd2c:	0a000192 	beq	14037c <printf_core+0x1a84>
  13fd30:	e3550000 	cmp	r5, #0
  13fd34:	1a00018b 	bne	140368 <printf_core+0x1a70>
  13fd38:	e3a02001 	mov	r2, #1
  13fd3c:	e1a031a8 	lsr	r3, r8, #3
  13fd40:	e0033002 	and	r3, r3, r2
  13fd44:	e3e0e102 	mvn	lr, #-2147483648	; 0x80000000
  13fd48:	e59d1010 	ldr	r1, [sp, #16]
  13fd4c:	e0833002 	add	r3, r3, r2
  13fd50:	e381a020 	orr	sl, r1, #32
  13fd54:	e35a0066 	cmp	sl, #102	; 0x66
  13fd58:	e04ee003 	sub	lr, lr, r3
  13fd5c:	0a000280 	beq	140764 <printf_core+0x1e6c>
  13fd60:	e026cfc6 	eor	ip, r6, r6, asr #31
  13fd64:	e28d7090 	add	r7, sp, #144	; 0x90
  13fd68:	e3560000 	cmp	r6, #0
  13fd6c:	e04ccfc6 	sub	ip, ip, r6, asr #31
  13fd70:	e1a02007 	mov	r2, r7
  13fd74:	0a00000a 	beq	13fda4 <printf_core+0x14ac>
  13fd78:	e58d3020 	str	r3, [sp, #32]
  13fd7c:	e51f33f8 	ldr	r3, [pc, #-1016]	; 13f98c <printf_core+0x1094>
  13fd80:	e081039c 	umull	r0, r1, ip, r3
  13fd84:	e1a001a1 	lsr	r0, r1, #3
  13fd88:	e0801100 	add	r1, r0, r0, lsl #2
  13fd8c:	e04c1081 	sub	r1, ip, r1, lsl #1
  13fd90:	e2811030 	add	r1, r1, #48	; 0x30
  13fd94:	e250c000 	subs	ip, r0, #0
  13fd98:	e5621001 	strb	r1, [r2, #-1]!
  13fd9c:	1afffff6 	bne	13fd7c <printf_core+0x1484>
  13fda0:	e59d3020 	ldr	r3, [sp, #32]
  13fda4:	e0471002 	sub	r1, r7, r2
  13fda8:	e3510001 	cmp	r1, #1
  13fdac:	ca000004 	bgt	13fdc4 <printf_core+0x14cc>
  13fdb0:	e3a01030 	mov	r1, #48	; 0x30
  13fdb4:	e5621001 	strb	r1, [r2, #-1]!
  13fdb8:	e0470002 	sub	r0, r7, r2
  13fdbc:	e3500001 	cmp	r0, #1
  13fdc0:	dafffffb 	ble	13fdb4 <printf_core+0x14bc>
  13fdc4:	e3560000 	cmp	r6, #0
  13fdc8:	a3a0102b 	movge	r1, #43	; 0x2b
  13fdcc:	b3a0102d 	movlt	r1, #45	; 0x2d
  13fdd0:	e2420002 	sub	r0, r2, #2
  13fdd4:	e0477000 	sub	r7, r7, r0
  13fdd8:	e58d004c 	str	r0, [sp, #76]	; 0x4c
  13fddc:	e59d0010 	ldr	r0, [sp, #16]
  13fde0:	e157000e 	cmp	r7, lr
  13fde4:	e5420002 	strb	r0, [r2, #-2]
  13fde8:	e5421001 	strb	r1, [r2, #-1]
  13fdec:	cafffc6e 	bgt	13efac <printf_core+0x6b4>
  13fdf0:	e0833007 	add	r3, r3, r7
  13fdf4:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13fdf8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  13fdfc:	e0422001 	sub	r2, r2, r1
  13fe00:	e1520003 	cmp	r2, r3
  13fe04:	bafffc68 	blt	13efac <printf_core+0x6b4>
  13fe08:	e0813003 	add	r3, r1, r3
  13fe0c:	e1590003 	cmp	r9, r3
  13fe10:	e58d3010 	str	r3, [sp, #16]
  13fe14:	c3a03000 	movgt	r3, #0
  13fe18:	d3a03001 	movle	r3, #1
  13fe1c:	e3180a12 	tst	r8, #73728	; 0x12000
  13fe20:	e58d3020 	str	r3, [sp, #32]
  13fe24:	13a03001 	movne	r3, #1
  13fe28:	e3530000 	cmp	r3, #0
  13fe2c:	0a000246 	beq	14074c <printf_core+0x1e54>
  13fe30:	e59d3004 	ldr	r3, [sp, #4]
  13fe34:	e5933000 	ldr	r3, [r3]
  13fe38:	e3130020 	tst	r3, #32
  13fe3c:	0a00023d 	beq	140738 <printf_core+0x1e40>
  13fe40:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13fe44:	e3130a12 	tst	r3, #73728	; 0x12000
  13fe48:	e59d3020 	ldr	r3, [sp, #32]
  13fe4c:	13a03001 	movne	r3, #1
  13fe50:	e3530000 	cmp	r3, #0
  13fe54:	0a000231 	beq	140720 <printf_core+0x1e28>
  13fe58:	e35a0066 	cmp	sl, #102	; 0x66
  13fe5c:	0a00018f 	beq	1404a0 <printf_core+0x1ba8>
  13fe60:	e59d301c 	ldr	r3, [sp, #28]
  13fe64:	e15b0003 	cmp	fp, r3
  13fe68:	228b3004 	addcs	r3, fp, #4
  13fe6c:	258d301c 	strcs	r3, [sp, #28]
  13fe70:	e59d301c 	ldr	r3, [sp, #28]
  13fe74:	e15b0003 	cmp	fp, r3
  13fe78:	23a03000 	movcs	r3, #0
  13fe7c:	33a03001 	movcc	r3, #1
  13fe80:	e3550000 	cmp	r5, #0
  13fe84:	b3a03000 	movlt	r3, #0
  13fe88:	e3530000 	cmp	r3, #0
  13fe8c:	0a000036 	beq	13ff6c <printf_core+0x1674>
  13fe90:	e1a0600b 	mov	r6, fp
  13fe94:	e28d7090 	add	r7, sp, #144	; 0x90
  13fe98:	e58d9030 	str	r9, [sp, #48]	; 0x30
  13fe9c:	e59d9004 	ldr	r9, [sp, #4]
  13fea0:	e287a009 	add	sl, r7, #9
  13fea4:	e58d802c 	str	r8, [sp, #44]	; 0x2c
  13fea8:	e58d4034 	str	r4, [sp, #52]	; 0x34
  13feac:	e5962000 	ldr	r2, [r6]
  13feb0:	e599e000 	ldr	lr, [r9]
  13feb4:	e3520000 	cmp	r2, #0
  13feb8:	1287c009 	addne	ip, r7, #9
  13febc:	0a000046 	beq	13ffdc <printf_core+0x16e4>
  13fec0:	e51f353c 	ldr	r3, [pc, #-1340]	; 13f98c <printf_core+0x1094>
  13fec4:	e0810392 	umull	r0, r1, r2, r3
  13fec8:	e1a031a1 	lsr	r3, r1, #3
  13fecc:	e0831103 	add	r1, r3, r3, lsl #2
  13fed0:	e0422081 	sub	r2, r2, r1, lsl #1
  13fed4:	e2821030 	add	r1, r2, #48	; 0x30
  13fed8:	e2532000 	subs	r2, r3, #0
  13fedc:	e56c1001 	strb	r1, [ip, #-1]!
  13fee0:	1afffff6 	bne	13fec0 <printf_core+0x15c8>
  13fee4:	e2872009 	add	r2, r7, #9
  13fee8:	e15c0002 	cmp	ip, r2
  13feec:	0a00003a 	beq	13ffdc <printf_core+0x16e4>
  13fef0:	e15b0006 	cmp	fp, r6
  13fef4:	e20ee020 	and	lr, lr, #32
  13fef8:	0a00003d 	beq	13fff4 <printf_core+0x16fc>
  13fefc:	e15c0007 	cmp	ip, r7
  13ff00:	9a000003 	bls	13ff14 <printf_core+0x161c>
  13ff04:	e3a02030 	mov	r2, #48	; 0x30
  13ff08:	e56c2001 	strb	r2, [ip, #-1]!
  13ff0c:	e15c0007 	cmp	ip, r7
  13ff10:	8afffffc 	bhi	13ff08 <printf_core+0x1610>
  13ff14:	e04a400c 	sub	r4, sl, ip
  13ff18:	e35e0000 	cmp	lr, #0
  13ff1c:	1a000005 	bne	13ff38 <printf_core+0x1640>
  13ff20:	e1550004 	cmp	r5, r4
  13ff24:	e1a0000c 	mov	r0, ip
  13ff28:	b1a01005 	movlt	r1, r5
  13ff2c:	a1a01004 	movge	r1, r4
  13ff30:	e1a02009 	mov	r2, r9
  13ff34:	eb000f2d 	bl	143bf0 <__fwritex>
  13ff38:	e59d201c 	ldr	r2, [sp, #28]
  13ff3c:	e2866004 	add	r6, r6, #4
  13ff40:	e1560002 	cmp	r6, r2
  13ff44:	e0455004 	sub	r5, r5, r4
  13ff48:	23a02000 	movcs	r2, #0
  13ff4c:	33a02001 	movcc	r2, #1
  13ff50:	e3550000 	cmp	r5, #0
  13ff54:	b3a02000 	movlt	r2, #0
  13ff58:	e3520000 	cmp	r2, #0
  13ff5c:	1affffd2 	bne	13feac <printf_core+0x15b4>
  13ff60:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
  13ff64:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
  13ff68:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  13ff6c:	e2852012 	add	r2, r5, #18
  13ff70:	e3520012 	cmp	r2, #18
  13ff74:	da000003 	ble	13ff88 <printf_core+0x1690>
  13ff78:	e3a03012 	mov	r3, #18
  13ff7c:	e3a01030 	mov	r1, #48	; 0x30
  13ff80:	e59d0004 	ldr	r0, [sp, #4]
  13ff84:	ebfffa30 	bl	13e84c <pad.part.0>
  13ff88:	e59d3004 	ldr	r3, [sp, #4]
  13ff8c:	e5933000 	ldr	r3, [r3]
  13ff90:	e3130020 	tst	r3, #32
  13ff94:	1a000005 	bne	13ffb0 <printf_core+0x16b8>
  13ff98:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
  13ff9c:	e28d7090 	add	r7, sp, #144	; 0x90
  13ffa0:	e0471003 	sub	r1, r7, r3
  13ffa4:	e59d2004 	ldr	r2, [sp, #4]
  13ffa8:	e1a00003 	mov	r0, r3
  13ffac:	eb000f0f 	bl	143bf0 <__fwritex>
  13ffb0:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13ffb4:	e3130a12 	tst	r3, #73728	; 0x12000
  13ffb8:	e59d3020 	ldr	r3, [sp, #32]
  13ffbc:	13a03001 	movne	r3, #1
  13ffc0:	e3530000 	cmp	r3, #0
  13ffc4:	0a00023a 	beq	1408b4 <printf_core+0x1fbc>
  13ffc8:	e59d3010 	ldr	r3, [sp, #16]
  13ffcc:	e1590003 	cmp	r9, r3
  13ffd0:	a1a0a009 	movge	sl, r9
  13ffd4:	b1a0a003 	movlt	sl, r3
  13ffd8:	eafffbf0 	b	13efa0 <printf_core+0x6a8>
  13ffdc:	e3a02030 	mov	r2, #48	; 0x30
  13ffe0:	e15b0006 	cmp	fp, r6
  13ffe4:	e28dc098 	add	ip, sp, #152	; 0x98
  13ffe8:	e20ee020 	and	lr, lr, #32
  13ffec:	e5cd2098 	strb	r2, [sp, #152]	; 0x98
  13fff0:	1affffc3 	bne	13ff04 <printf_core+0x160c>
  13fff4:	e35e0000 	cmp	lr, #0
  13fff8:	e28c8001 	add	r8, ip, #1
  13fffc:	0a00002a 	beq	1400ac <printf_core+0x17b4>
  140000:	e3550000 	cmp	r5, #0
  140004:	e04a4008 	sub	r4, sl, r8
  140008:	1affffca 	bne	13ff38 <printf_core+0x1640>
  14000c:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140010:	e3130008 	tst	r3, #8
  140014:	1a00002d 	bne	1400d0 <printf_core+0x17d8>
  140018:	e1a0c008 	mov	ip, r8
  14001c:	eaffffbd 	b	13ff18 <printf_core+0x1620>
  140020:	e1a0300b 	mov	r3, fp
  140024:	e1a02009 	mov	r2, r9
  140028:	e3a01020 	mov	r1, #32
  14002c:	e59d0004 	ldr	r0, [sp, #4]
  140030:	ebfffa05 	bl	13e84c <pad.part.0>
  140034:	eafffd7b 	b	13f628 <printf_core+0xd30>
  140038:	e3a03001 	mov	r3, #1
  14003c:	e58d3020 	str	r3, [sp, #32]
  140040:	e51f36c8 	ldr	r3, [pc, #-1736]	; 13f980 <printf_core+0x1088>
  140044:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  140048:	eafffc20 	b	13f0d0 <printf_core+0x7d8>
  14004c:	e3a03000 	mov	r3, #0
  140050:	e58d3000 	str	r3, [sp]
  140054:	eafffb44 	b	13ed6c <printf_core+0x474>
  140058:	e59d5004 	ldr	r5, [sp, #4]
  14005c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  140060:	e1a02005 	mov	r2, r5
  140064:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  140068:	eb000ee0 	bl	143bf0 <__fwritex>
  14006c:	e5953000 	ldr	r3, [r5]
  140070:	e1a02005 	mov	r2, r5
  140074:	e3130020 	tst	r3, #32
  140078:	1afffcc9 	bne	13f3a4 <printf_core+0xaac>
  14007c:	e1a00006 	mov	r0, r6
  140080:	e3a01003 	mov	r1, #3
  140084:	eb000ed9 	bl	143bf0 <__fwritex>
  140088:	eafffcc5 	b	13f3a4 <printf_core+0xaac>
  14008c:	e3a03001 	mov	r3, #1
  140090:	e58d3030 	str	r3, [sp, #48]	; 0x30
  140094:	e51f3718 	ldr	r3, [pc, #-1816]	; 13f984 <printf_core+0x108c>
  140098:	e58d3034 	str	r3, [sp, #52]	; 0x34
  14009c:	eafffc9a 	b	13f30c <printf_core+0xa14>
  1400a0:	e3510000 	cmp	r1, #0
  1400a4:	028bb004 	addeq	fp, fp, #4
  1400a8:	eafffe7f 	b	13faac <printf_core+0x11b4>
  1400ac:	e1a0000c 	mov	r0, ip
  1400b0:	e1a02009 	mov	r2, r9
  1400b4:	e3a01001 	mov	r1, #1
  1400b8:	eb000ecc 	bl	143bf0 <__fwritex>
  1400bc:	e599e000 	ldr	lr, [r9]
  1400c0:	e3550000 	cmp	r5, #0
  1400c4:	e20ee020 	and	lr, lr, #32
  1400c8:	e04a4008 	sub	r4, sl, r8
  1400cc:	0affffce 	beq	14000c <printf_core+0x1714>
  1400d0:	e35e0000 	cmp	lr, #0
  1400d4:	1affff97 	bne	13ff38 <printf_core+0x1640>
  1400d8:	e1a02009 	mov	r2, r9
  1400dc:	e3a01001 	mov	r1, #1
  1400e0:	e51f0758 	ldr	r0, [pc, #-1880]	; 13f990 <printf_core+0x1098>
  1400e4:	eb000ec1 	bl	143bf0 <__fwritex>
  1400e8:	e599e000 	ldr	lr, [r9]
  1400ec:	e1a0c008 	mov	ip, r8
  1400f0:	e20ee020 	and	lr, lr, #32
  1400f4:	eaffff87 	b	13ff18 <printf_core+0x1620>
  1400f8:	e1a0300a 	mov	r3, sl
  1400fc:	e1a02009 	mov	r2, r9
  140100:	e3a01020 	mov	r1, #32
  140104:	e59d0004 	ldr	r0, [sp, #4]
  140108:	ebfff9cf 	bl	13e84c <pad.part.0>
  14010c:	eafffca9 	b	13f3b8 <printf_core+0xac0>
  140110:	e59d3010 	ldr	r3, [sp, #16]
  140114:	e213b020 	ands	fp, r3, #32
  140118:	159d3034 	ldrne	r3, [sp, #52]	; 0x34
  14011c:	12833009 	addne	r3, r3, #9
  140120:	158d3034 	strne	r3, [sp, #52]	; 0x34
  140124:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  140128:	e355000b 	cmp	r5, #11
  14012c:	e2833002 	add	r3, r3, #2
  140130:	e58d3030 	str	r3, [sp, #48]	; 0x30
  140134:	9a0001b8 	bls	14081c <printf_core+0x1f24>
  140138:	e59d2020 	ldr	r2, [sp, #32]
  14013c:	e28d7090 	add	r7, sp, #144	; 0x90
  140140:	e3520000 	cmp	r2, #0
  140144:	e1a03002 	mov	r3, r2
  140148:	b2623000 	rsblt	r3, r2, #0
  14014c:	e3520000 	cmp	r2, #0
  140150:	11a0c007 	movne	ip, r7
  140154:	0a0001ac 	beq	14080c <printf_core+0x1f14>
  140158:	e51f27d4 	ldr	r2, [pc, #-2004]	; 13f98c <printf_core+0x1094>
  14015c:	e0810293 	umull	r0, r1, r3, r2
  140160:	e1a021a1 	lsr	r2, r1, #3
  140164:	e0821102 	add	r1, r2, r2, lsl #2
  140168:	e0433081 	sub	r3, r3, r1, lsl #1
  14016c:	e2831030 	add	r1, r3, #48	; 0x30
  140170:	e2523000 	subs	r3, r2, #0
  140174:	e56c1001 	strb	r1, [ip, #-1]!
  140178:	1afffff6 	bne	140158 <printf_core+0x1860>
  14017c:	e15c0007 	cmp	ip, r7
  140180:	0a0001a1 	beq	14080c <printf_core+0x1f14>
  140184:	e59d3020 	ldr	r3, [sp, #32]
  140188:	e59d2010 	ldr	r2, [sp, #16]
  14018c:	e3530000 	cmp	r3, #0
  140190:	a3a0302b 	movge	r3, #43	; 0x2b
  140194:	b3a0302d 	movlt	r3, #45	; 0x2d
  140198:	e54c3001 	strb	r3, [ip, #-1]
  14019c:	e24c3002 	sub	r3, ip, #2
  1401a0:	e282200f 	add	r2, r2, #15
  1401a4:	e58d3010 	str	r3, [sp, #16]
  1401a8:	e2083008 	and	r3, r8, #8
  1401ac:	e58db020 	str	fp, [sp, #32]
  1401b0:	e58d8040 	str	r8, [sp, #64]	; 0x40
  1401b4:	e58d4044 	str	r4, [sp, #68]	; 0x44
  1401b8:	e1a0b007 	mov	fp, r7
  1401bc:	e51f683c 	ldr	r6, [pc, #-2108]	; 13f988 <printf_core+0x1090>
  1401c0:	e54c2002 	strb	r2, [ip, #-2]
  1401c4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  1401c8:	e58da03c 	str	sl, [sp, #60]	; 0x3c
  1401cc:	e59d401c 	ldr	r4, [sp, #28]
  1401d0:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  1401d4:	ea000007 	b	1401f8 <printf_core+0x1900>
  1401d8:	e1a0b00a 	mov	fp, sl
  1401dc:	e1a00004 	mov	r0, r4
  1401e0:	e1a01008 	mov	r1, r8
  1401e4:	e3a02000 	mov	r2, #0
  1401e8:	e3a03000 	mov	r3, #0
  1401ec:	eb001381 	bl	144ff8 <__aeabi_dcmpeq>
  1401f0:	e3500000 	cmp	r0, #0
  1401f4:	1a000026 	bne	140294 <printf_core+0x199c>
  1401f8:	e1a01008 	mov	r1, r8
  1401fc:	e1a00004 	mov	r0, r4
  140200:	eb001395 	bl	14505c <__aeabi_d2iz>
  140204:	e59d2020 	ldr	r2, [sp, #32]
  140208:	e7d63000 	ldrb	r3, [r6, r0]
  14020c:	e28ba001 	add	sl, fp, #1
  140210:	e1823003 	orr	r3, r2, r3
  140214:	e5cb3000 	strb	r3, [fp]
  140218:	eb0011ef 	bl	1449dc <__aeabi_i2d>
  14021c:	e1a02000 	mov	r2, r0
  140220:	e1a03001 	mov	r3, r1
  140224:	e1a00004 	mov	r0, r4
  140228:	e1a01008 	mov	r1, r8
  14022c:	eb001135 	bl	144708 <__aeabi_dsub>
  140230:	e51f38a0 	ldr	r3, [pc, #-2208]	; 13f998 <printf_core+0x10a0>
  140234:	e3a02000 	mov	r2, #0
  140238:	eb001220 	bl	144ac0 <__aeabi_dmul>
  14023c:	e04a3007 	sub	r3, sl, r7
  140240:	e3530001 	cmp	r3, #1
  140244:	e1a04000 	mov	r4, r0
  140248:	e1a08001 	mov	r8, r1
  14024c:	1affffe1 	bne	1401d8 <printf_core+0x18e0>
  140250:	e3a03000 	mov	r3, #0
  140254:	e3a02000 	mov	r2, #0
  140258:	eb001366 	bl	144ff8 <__aeabi_dcmpeq>
  14025c:	e3500000 	cmp	r0, #0
  140260:	e3a03001 	mov	r3, #1
  140264:	13a03000 	movne	r3, #0
  140268:	e3550000 	cmp	r5, #0
  14026c:	c3833001 	orrgt	r3, r3, #1
  140270:	e3130001 	tst	r3, #1
  140274:	1a000002 	bne	140284 <printf_core+0x198c>
  140278:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14027c:	e3530000 	cmp	r3, #0
  140280:	0affffd4 	beq	1401d8 <printf_core+0x18e0>
  140284:	e3a0302e 	mov	r3, #46	; 0x2e
  140288:	e28bb002 	add	fp, fp, #2
  14028c:	e54b3001 	strb	r3, [fp, #-1]
  140290:	eaffffd1 	b	1401dc <printf_core+0x18e4>
  140294:	e3e0310a 	mvn	r3, #-2147483646	; 0x80000002
  140298:	e59d2010 	ldr	r2, [sp, #16]
  14029c:	e59da03c 	ldr	sl, [sp, #60]	; 0x3c
  1402a0:	e0476002 	sub	r6, r7, r2
  1402a4:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
  1402a8:	e0433006 	sub	r3, r3, r6
  1402ac:	e0433002 	sub	r3, r3, r2
  1402b0:	e1550003 	cmp	r5, r3
  1402b4:	e59d8040 	ldr	r8, [sp, #64]	; 0x40
  1402b8:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
  1402bc:	cafffb3a 	bgt	13efac <printf_core+0x6b4>
  1402c0:	e04b2007 	sub	r2, fp, r7
  1402c4:	e3550000 	cmp	r5, #0
  1402c8:	e58d201c 	str	r2, [sp, #28]
  1402cc:	0a000065 	beq	140468 <printf_core+0x1b70>
  1402d0:	e2423001 	sub	r3, r2, #1
  1402d4:	e1550003 	cmp	r5, r3
  1402d8:	ba000062 	blt	140468 <printf_core+0x1b70>
  1402dc:	e2853002 	add	r3, r5, #2
  1402e0:	e0865003 	add	r5, r6, r3
  1402e4:	e043a002 	sub	sl, r3, r2
  1402e8:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  1402ec:	e0835005 	add	r5, r3, r5
  1402f0:	e1590005 	cmp	r9, r5
  1402f4:	c3a0b000 	movgt	fp, #0
  1402f8:	d3a0b001 	movle	fp, #1
  1402fc:	e3180a12 	tst	r8, #73728	; 0x12000
  140300:	01a0300b 	moveq	r3, fp
  140304:	13a03001 	movne	r3, #1
  140308:	e3530000 	cmp	r3, #0
  14030c:	0a0001a8 	beq	1409b4 <printf_core+0x20bc>
  140310:	e59d3004 	ldr	r3, [sp, #4]
  140314:	e5933000 	ldr	r3, [r3]
  140318:	e3130020 	tst	r3, #32
  14031c:	0a0000e4 	beq	1406b4 <printf_core+0x1dbc>
  140320:	e2283801 	eor	r3, r8, #65536	; 0x10000
  140324:	e3130a12 	tst	r3, #73728	; 0x12000
  140328:	01a0300b 	moveq	r3, fp
  14032c:	13a03001 	movne	r3, #1
  140330:	e3530000 	cmp	r3, #0
  140334:	0a000198 	beq	14099c <printf_core+0x20a4>
  140338:	e35a0000 	cmp	sl, #0
  14033c:	ca00012c 	bgt	1407f4 <printf_core+0x1efc>
  140340:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  140344:	e3130a12 	tst	r3, #73728	; 0x12000
  140348:	01a0300b 	moveq	r3, fp
  14034c:	13a03001 	movne	r3, #1
  140350:	e3530000 	cmp	r3, #0
  140354:	0a000186 	beq	140974 <printf_core+0x207c>
  140358:	e1590005 	cmp	r9, r5
  14035c:	a1a0a009 	movge	sl, r9
  140360:	b1a0a005 	movlt	sl, r5
  140364:	eafffb0d 	b	13efa0 <printf_core+0x6a8>
  140368:	e375010e 	cmn	r5, #-2147483645	; 0x80000003
  14036c:	cafffb0e 	bgt	13efac <printf_core+0x6b4>
  140370:	e2852001 	add	r2, r5, #1
  140374:	e3a03001 	mov	r3, #1
  140378:	eafffe71 	b	13fd44 <printf_core+0x144c>
  14037c:	e3550000 	cmp	r5, #0
  140380:	03a05001 	moveq	r5, #1
  140384:	e3760004 	cmn	r6, #4
  140388:	a1550006 	cmpge	r5, r6
  14038c:	c59d2010 	ldrgt	r2, [sp, #16]
  140390:	d59d3010 	ldrle	r3, [sp, #16]
  140394:	c2863001 	addgt	r3, r6, #1
  140398:	c2422001 	subgt	r2, r2, #1
  14039c:	d2433002 	suble	r3, r3, #2
  1403a0:	c58d2010 	strgt	r2, [sp, #16]
  1403a4:	c0455003 	subgt	r5, r5, r3
  1403a8:	d58d3010 	strle	r3, [sp, #16]
  1403ac:	d2455001 	suble	r5, r5, #1
  1403b0:	e3180008 	tst	r8, #8
  1403b4:	1afffe5d 	bne	13fd30 <printf_core+0x1438>
  1403b8:	e59d301c 	ldr	r3, [sp, #28]
  1403bc:	e15b0003 	cmp	fp, r3
  1403c0:	2a000034 	bcs	140498 <printf_core+0x1ba0>
  1403c4:	e5137004 	ldr	r7, [r3, #-4]
  1403c8:	e3570000 	cmp	r7, #0
  1403cc:	0a000031 	beq	140498 <printf_core+0x1ba0>
  1403d0:	e3a0100a 	mov	r1, #10
  1403d4:	e1a00007 	mov	r0, r7
  1403d8:	ebffe1a2 	bl	138a68 <__aeabi_uidivmod>
  1403dc:	e3510000 	cmp	r1, #0
  1403e0:	1a00000b 	bne	140414 <printf_core+0x1b1c>
  1403e4:	e3a0300a 	mov	r3, #10
  1403e8:	e58d4020 	str	r4, [sp, #32]
  1403ec:	e1a04003 	mov	r4, r3
  1403f0:	e0844104 	add	r4, r4, r4, lsl #2
  1403f4:	e1a04084 	lsl	r4, r4, #1
  1403f8:	e1a01004 	mov	r1, r4
  1403fc:	e1a00007 	mov	r0, r7
  140400:	ebffe198 	bl	138a68 <__aeabi_uidivmod>
  140404:	e3510000 	cmp	r1, #0
  140408:	e28aa001 	add	sl, sl, #1
  14040c:	0afffff7 	beq	1403f0 <printf_core+0x1af8>
  140410:	e59d4020 	ldr	r4, [sp, #32]
  140414:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
  140418:	e59d301c 	ldr	r3, [sp, #28]
  14041c:	e0433002 	sub	r3, r3, r2
  140420:	e59d2010 	ldr	r2, [sp, #16]
  140424:	e1a03143 	asr	r3, r3, #2
  140428:	e3822020 	orr	r2, r2, #32
  14042c:	e2433001 	sub	r3, r3, #1
  140430:	e3520066 	cmp	r2, #102	; 0x66
  140434:	e0833183 	add	r3, r3, r3, lsl #3
  140438:	10863003 	addne	r3, r6, r3
  14043c:	e043300a 	sub	r3, r3, sl
  140440:	e1c33fc3 	bic	r3, r3, r3, asr #31
  140444:	e1550003 	cmp	r5, r3
  140448:	a1a05003 	movge	r5, r3
  14044c:	eafffe37 	b	13fd30 <printf_core+0x1438>
  140450:	e1a0300a 	mov	r3, sl
  140454:	e1a02009 	mov	r2, r9
  140458:	e3a01020 	mov	r1, #32
  14045c:	e59d0004 	ldr	r0, [sp, #4]
  140460:	ebfff8f9 	bl	13e84c <pad.part.0>
  140464:	eafffbca 	b	13f394 <printf_core+0xa9c>
  140468:	e59d301c 	ldr	r3, [sp, #28]
  14046c:	e0865003 	add	r5, r6, r3
  140470:	eaffff9c 	b	1402e8 <printf_core+0x19f0>
  140474:	e59d32f0 	ldr	r3, [sp, #752]	; 0x2f0
  140478:	e0832105 	add	r2, r3, r5, lsl #2
  14047c:	e2833024 	add	r3, r3, #36	; 0x24
  140480:	e1530002 	cmp	r3, r2
  140484:	0afffb08 	beq	13f0ac <printf_core+0x7b4>
  140488:	e5b21004 	ldr	r1, [r2, #4]!
  14048c:	e3510000 	cmp	r1, #0
  140490:	0afffffa 	beq	140480 <printf_core+0x1b88>
  140494:	eafffa2f 	b	13ed58 <printf_core+0x460>
  140498:	e3a0a009 	mov	sl, #9
  14049c:	eaffffdc 	b	140414 <printf_core+0x1b1c>
  1404a0:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  1404a4:	e15b0003 	cmp	fp, r3
  1404a8:	31a0a00b 	movcc	sl, fp
  1404ac:	21a0a003 	movcs	sl, r3
  1404b0:	e15a0003 	cmp	sl, r3
  1404b4:	8a00002f 	bhi	140578 <printf_core+0x1c80>
  1404b8:	e28d7090 	add	r7, sp, #144	; 0x90
  1404bc:	e043b00a 	sub	fp, r3, sl
  1404c0:	e2872009 	add	r2, r7, #9
  1404c4:	e58d2030 	str	r2, [sp, #48]	; 0x30
  1404c8:	e58d2034 	str	r2, [sp, #52]	; 0x34
  1404cc:	e3cb2003 	bic	r2, fp, #3
  1404d0:	e08a3002 	add	r3, sl, r2
  1404d4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  1404d8:	e24a3004 	sub	r3, sl, #4
  1404dc:	e58db038 	str	fp, [sp, #56]	; 0x38
  1404e0:	e3a06030 	mov	r6, #48	; 0x30
  1404e4:	e1a0b004 	mov	fp, r4
  1404e8:	e1a04003 	mov	r4, r3
  1404ec:	e5b4c004 	ldr	ip, [r4, #4]!
  1404f0:	e35c0000 	cmp	ip, #0
  1404f4:	0a000068 	beq	14069c <printf_core+0x1da4>
  1404f8:	e2870009 	add	r0, r7, #9
  1404fc:	e51f1b78 	ldr	r1, [pc, #-2936]	; 13f98c <printf_core+0x1094>
  140500:	e083219c 	umull	r2, r3, ip, r1
  140504:	e1a021a3 	lsr	r2, r3, #3
  140508:	e0823102 	add	r3, r2, r2, lsl #2
  14050c:	e04c3083 	sub	r3, ip, r3, lsl #1
  140510:	e2833030 	add	r3, r3, #48	; 0x30
  140514:	e252c000 	subs	ip, r2, #0
  140518:	e5603001 	strb	r3, [r0, #-1]!
  14051c:	1afffff6 	bne	1404fc <printf_core+0x1c04>
  140520:	e15a0004 	cmp	sl, r4
  140524:	1a000001 	bne	140530 <printf_core+0x1c38>
  140528:	ea000117 	b	14098c <printf_core+0x2094>
  14052c:	e5606001 	strb	r6, [r0, #-1]!
  140530:	e1500007 	cmp	r0, r7
  140534:	8afffffc 	bhi	14052c <printf_core+0x1c34>
  140538:	e59d3004 	ldr	r3, [sp, #4]
  14053c:	e5932000 	ldr	r2, [r3]
  140540:	e3120020 	tst	r2, #32
  140544:	1a000003 	bne	140558 <printf_core+0x1c60>
  140548:	e1a02003 	mov	r2, r3
  14054c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  140550:	e0431000 	sub	r1, r3, r0
  140554:	eb000da5 	bl	143bf0 <__fwritex>
  140558:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14055c:	e1530004 	cmp	r3, r4
  140560:	1affffe1 	bne	1404ec <printf_core+0x1bf4>
  140564:	e1a0400b 	mov	r4, fp
  140568:	e59db038 	ldr	fp, [sp, #56]	; 0x38
  14056c:	e3cb3003 	bic	r3, fp, #3
  140570:	e2833004 	add	r3, r3, #4
  140574:	e08aa003 	add	sl, sl, r3
  140578:	e3550000 	cmp	r5, #0
  14057c:	0a00003b 	beq	140670 <printf_core+0x1d78>
  140580:	e59d3004 	ldr	r3, [sp, #4]
  140584:	e5933000 	ldr	r3, [r3]
  140588:	e3130020 	tst	r3, #32
  14058c:	0a00003d 	beq	140688 <printf_core+0x1d90>
  140590:	e59d201c 	ldr	r2, [sp, #28]
  140594:	e3550000 	cmp	r5, #0
  140598:	d3a03000 	movle	r3, #0
  14059c:	c3a03001 	movgt	r3, #1
  1405a0:	e15a0002 	cmp	sl, r2
  1405a4:	23a03000 	movcs	r3, #0
  1405a8:	e3530000 	cmp	r3, #0
  1405ac:	0a000027 	beq	140650 <printf_core+0x1d58>
  1405b0:	e1a0600a 	mov	r6, sl
  1405b4:	e3a0a030 	mov	sl, #48	; 0x30
  1405b8:	e59db004 	ldr	fp, [sp, #4]
  1405bc:	e28d7090 	add	r7, sp, #144	; 0x90
  1405c0:	e4963004 	ldr	r3, [r6], #4
  1405c4:	e287c009 	add	ip, r7, #9
  1405c8:	e3530000 	cmp	r3, #0
  1405cc:	0a00000a 	beq	1405fc <printf_core+0x1d04>
  1405d0:	e1a01003 	mov	r1, r3
  1405d4:	e51f0c50 	ldr	r0, [pc, #-3152]	; 13f98c <printf_core+0x1094>
  1405d8:	e0832091 	umull	r2, r3, r1, r0
  1405dc:	e1a031a3 	lsr	r3, r3, #3
  1405e0:	e0832103 	add	r2, r3, r3, lsl #2
  1405e4:	e0412082 	sub	r2, r1, r2, lsl #1
  1405e8:	e2822030 	add	r2, r2, #48	; 0x30
  1405ec:	e2531000 	subs	r1, r3, #0
  1405f0:	e56c2001 	strb	r2, [ip, #-1]!
  1405f4:	1afffff6 	bne	1405d4 <printf_core+0x1cdc>
  1405f8:	ea000000 	b	140600 <printf_core+0x1d08>
  1405fc:	e56ca001 	strb	sl, [ip, #-1]!
  140600:	e15c0007 	cmp	ip, r7
  140604:	8afffffc 	bhi	1405fc <printf_core+0x1d04>
  140608:	e59b3000 	ldr	r3, [fp]
  14060c:	e3130020 	tst	r3, #32
  140610:	1a000005 	bne	14062c <printf_core+0x1d34>
  140614:	e3550009 	cmp	r5, #9
  140618:	e1a0000c 	mov	r0, ip
  14061c:	b1a01005 	movlt	r1, r5
  140620:	a3a01009 	movge	r1, #9
  140624:	e1a0200b 	mov	r2, fp
  140628:	eb000d70 	bl	143bf0 <__fwritex>
  14062c:	e59d301c 	ldr	r3, [sp, #28]
  140630:	e2455009 	sub	r5, r5, #9
  140634:	e1530006 	cmp	r3, r6
  140638:	93a03000 	movls	r3, #0
  14063c:	83a03001 	movhi	r3, #1
  140640:	e3550000 	cmp	r5, #0
  140644:	d3a03000 	movle	r3, #0
  140648:	e3530000 	cmp	r3, #0
  14064c:	1affffdb 	bne	1405c0 <printf_core+0x1cc8>
  140650:	e2852009 	add	r2, r5, #9
  140654:	e3520009 	cmp	r2, #9
  140658:	dafffe54 	ble	13ffb0 <printf_core+0x16b8>
  14065c:	e3a03009 	mov	r3, #9
  140660:	e3a01030 	mov	r1, #48	; 0x30
  140664:	e59d0004 	ldr	r0, [sp, #4]
  140668:	ebfff877 	bl	13e84c <pad.part.0>
  14066c:	eafffe4f 	b	13ffb0 <printf_core+0x16b8>
  140670:	e3180008 	tst	r8, #8
  140674:	0afffe4d 	beq	13ffb0 <printf_core+0x16b8>
  140678:	e59d3004 	ldr	r3, [sp, #4]
  14067c:	e5933000 	ldr	r3, [r3]
  140680:	e3130020 	tst	r3, #32
  140684:	1afffe49 	bne	13ffb0 <printf_core+0x16b8>
  140688:	e59d2004 	ldr	r2, [sp, #4]
  14068c:	e3a01001 	mov	r1, #1
  140690:	e51f0d08 	ldr	r0, [pc, #-3336]	; 13f990 <printf_core+0x1098>
  140694:	eb000d55 	bl	143bf0 <__fwritex>
  140698:	eaffffbc 	b	140590 <printf_core+0x1c98>
  14069c:	e15a0004 	cmp	sl, r4
  1406a0:	12870009 	addne	r0, r7, #9
  1406a4:	1affffa0 	bne	14052c <printf_core+0x1c34>
  1406a8:	e28d0fb2 	add	r0, sp, #712	; 0x2c8
  1406ac:	e5606230 	strb	r6, [r0, #-560]!	; 0xfffffdd0
  1406b0:	eaffffa0 	b	140538 <printf_core+0x1c40>
  1406b4:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  1406b8:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  1406bc:	e59d2004 	ldr	r2, [sp, #4]
  1406c0:	eb000d4a 	bl	143bf0 <__fwritex>
  1406c4:	e2283801 	eor	r3, r8, #65536	; 0x10000
  1406c8:	e3130a12 	tst	r3, #73728	; 0x12000
  1406cc:	01a0300b 	moveq	r3, fp
  1406d0:	13a03001 	movne	r3, #1
  1406d4:	e3530000 	cmp	r3, #0
  1406d8:	0a0000af 	beq	14099c <printf_core+0x20a4>
  1406dc:	e59d2004 	ldr	r2, [sp, #4]
  1406e0:	e5923000 	ldr	r3, [r2]
  1406e4:	e3130020 	tst	r3, #32
  1406e8:	1affff12 	bne	140338 <printf_core+0x1a40>
  1406ec:	e59d101c 	ldr	r1, [sp, #28]
  1406f0:	e1a00007 	mov	r0, r7
  1406f4:	eb000d3d 	bl	143bf0 <__fwritex>
  1406f8:	e35a0000 	cmp	sl, #0
  1406fc:	ca00003c 	bgt	1407f4 <printf_core+0x1efc>
  140700:	e59d2004 	ldr	r2, [sp, #4]
  140704:	e5923000 	ldr	r3, [r2]
  140708:	e3130020 	tst	r3, #32
  14070c:	1affff0b 	bne	140340 <printf_core+0x1a48>
  140710:	e1a01006 	mov	r1, r6
  140714:	e59d0010 	ldr	r0, [sp, #16]
  140718:	eb000d34 	bl	143bf0 <__fwritex>
  14071c:	eaffff07 	b	140340 <printf_core+0x1a48>
  140720:	e59d3010 	ldr	r3, [sp, #16]
  140724:	e1a02009 	mov	r2, r9
  140728:	e3a01030 	mov	r1, #48	; 0x30
  14072c:	e59d0004 	ldr	r0, [sp, #4]
  140730:	ebfff845 	bl	13e84c <pad.part.0>
  140734:	eafffdc7 	b	13fe58 <printf_core+0x1560>
  140738:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  14073c:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  140740:	e59d2004 	ldr	r2, [sp, #4]
  140744:	eb000d29 	bl	143bf0 <__fwritex>
  140748:	eafffdbc 	b	13fe40 <printf_core+0x1548>
  14074c:	e59d3010 	ldr	r3, [sp, #16]
  140750:	e1a02009 	mov	r2, r9
  140754:	e3a01020 	mov	r1, #32
  140758:	e59d0004 	ldr	r0, [sp, #4]
  14075c:	ebfff83a 	bl	13e84c <pad.part.0>
  140760:	eafffdb2 	b	13fe30 <printf_core+0x1538>
  140764:	e156000e 	cmp	r6, lr
  140768:	cafffa0f 	bgt	13efac <printf_core+0x6b4>
  14076c:	e3560000 	cmp	r6, #0
  140770:	c0833006 	addgt	r3, r3, r6
  140774:	eafffd9e 	b	13fdf4 <printf_core+0x14fc>
  140778:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  14077c:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
  140780:	e51f3df4 	ldr	r3, [pc, #-3572]	; 13f994 <printf_core+0x109c>
  140784:	e0811000 	add	r1, r1, r0
  140788:	e1510003 	cmp	r1, r3
  14078c:	e5871000 	str	r1, [r7]
  140790:	9a000008 	bls	1407b8 <printf_core+0x1ec0>
  140794:	e4072004 	str	r2, [r7], #-4
  140798:	e157000b 	cmp	r7, fp
  14079c:	350b2004 	strcc	r2, [fp, #-4]
  1407a0:	e5971000 	ldr	r1, [r7]
  1407a4:	324bb004 	subcc	fp, fp, #4
  1407a8:	e2811001 	add	r1, r1, #1
  1407ac:	e1510003 	cmp	r1, r3
  1407b0:	e5871000 	str	r1, [r7]
  1407b4:	8afffff6 	bhi	140794 <printf_core+0x1e9c>
  1407b8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  1407bc:	e59b2000 	ldr	r2, [fp]
  1407c0:	e043600b 	sub	r6, r3, fp
  1407c4:	e1a06146 	asr	r6, r6, #2
  1407c8:	e3520009 	cmp	r2, #9
  1407cc:	e0866186 	add	r6, r6, r6, lsl #3
  1407d0:	83a0300a 	movhi	r3, #10
  1407d4:	9a000004 	bls	1407ec <printf_core+0x1ef4>
  1407d8:	e0833103 	add	r3, r3, r3, lsl #2
  1407dc:	e1a03083 	lsl	r3, r3, #1
  1407e0:	e1520003 	cmp	r2, r3
  1407e4:	e2866001 	add	r6, r6, #1
  1407e8:	2afffffa 	bcs	1407d8 <printf_core+0x1ee0>
  1407ec:	e287c004 	add	ip, r7, #4
  1407f0:	eafffd37 	b	13fcd4 <printf_core+0x13dc>
  1407f4:	e1a0200a 	mov	r2, sl
  1407f8:	e3a03000 	mov	r3, #0
  1407fc:	e3a01030 	mov	r1, #48	; 0x30
  140800:	e59d0004 	ldr	r0, [sp, #4]
  140804:	ebfff810 	bl	13e84c <pad.part.0>
  140808:	eaffffbc 	b	140700 <printf_core+0x1e08>
  14080c:	e3a03030 	mov	r3, #48	; 0x30
  140810:	e28dc08f 	add	ip, sp, #143	; 0x8f
  140814:	e5cd308f 	strb	r3, [sp, #143]	; 0x8f
  140818:	eafffe59 	b	140184 <printf_core+0x188c>
  14081c:	e265300b 	rsb	r3, r5, #11
  140820:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  140824:	e1a0300b 	mov	r3, fp
  140828:	e3a06000 	mov	r6, #0
  14082c:	e1a0b004 	mov	fp, r4
  140830:	e1a04003 	mov	r4, r3
  140834:	e51f7ea4 	ldr	r7, [pc, #-3748]	; 13f998 <printf_core+0x10a0>
  140838:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14083c:	e1a00006 	mov	r0, r6
  140840:	e2433001 	sub	r3, r3, #1
  140844:	e1a01007 	mov	r1, r7
  140848:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  14084c:	e3a02000 	mov	r2, #0
  140850:	e51f3ec0 	ldr	r3, [pc, #-3776]	; 13f998 <printf_core+0x10a0>
  140854:	eb001099 	bl	144ac0 <__aeabi_dmul>
  140858:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14085c:	e1a06000 	mov	r6, r0
  140860:	e3730001 	cmn	r3, #1
  140864:	e1a07001 	mov	r7, r1
  140868:	1afffff2 	bne	140838 <printf_core+0x1f40>
  14086c:	e1a03004 	mov	r3, r4
  140870:	e1a0400b 	mov	r4, fp
  140874:	e1a0b003 	mov	fp, r3
  140878:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  14087c:	e59d001c 	ldr	r0, [sp, #28]
  140880:	e5d33000 	ldrb	r3, [r3]
  140884:	e353002d 	cmp	r3, #45	; 0x2d
  140888:	0a000028 	beq	140930 <printf_core+0x2038>
  14088c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  140890:	e1a02006 	mov	r2, r6
  140894:	e1a03007 	mov	r3, r7
  140898:	eb000f9b 	bl	14470c <__adddf3>
  14089c:	e1a02006 	mov	r2, r6
  1408a0:	e1a03007 	mov	r3, r7
  1408a4:	eb000f97 	bl	144708 <__aeabi_dsub>
  1408a8:	e58d001c 	str	r0, [sp, #28]
  1408ac:	e58d1038 	str	r1, [sp, #56]	; 0x38
  1408b0:	eafffe20 	b	140138 <printf_core+0x1840>
  1408b4:	e59d3010 	ldr	r3, [sp, #16]
  1408b8:	e1a02009 	mov	r2, r9
  1408bc:	e3a01020 	mov	r1, #32
  1408c0:	e59d0004 	ldr	r0, [sp, #4]
  1408c4:	ebfff7e0 	bl	13e84c <pad.part.0>
  1408c8:	eafffdbe 	b	13ffc8 <printf_core+0x16d0>
  1408cc:	e3a0e000 	mov	lr, #0
  1408d0:	e51fcf3c 	ldr	ip, [pc, #-3900]	; 13f99c <printf_core+0x10a4>
  1408d4:	eafffce1 	b	13fc60 <printf_core+0x1368>
  1408d8:	e51f3f40 	ldr	r3, [pc, #-3904]	; 13f9a0 <printf_core+0x10a8>
  1408dc:	e58d2040 	str	r2, [sp, #64]	; 0x40
  1408e0:	e58d3020 	str	r3, [sp, #32]
  1408e4:	eafffcd6 	b	13fc44 <printf_core+0x134c>
  1408e8:	e3a03001 	mov	r3, #1
  1408ec:	e58d3040 	str	r3, [sp, #64]	; 0x40
  1408f0:	e51f3f58 	ldr	r3, [pc, #-3928]	; 13f9a0 <printf_core+0x10a8>
  1408f4:	e58d3020 	str	r3, [sp, #32]
  1408f8:	eafffcd1 	b	13fc44 <printf_core+0x134c>
  1408fc:	e3a03001 	mov	r3, #1
  140900:	e3a05006 	mov	r5, #6
  140904:	e58d3044 	str	r3, [sp, #68]	; 0x44
  140908:	eafffb9d 	b	13f784 <printf_core+0xe8c>
  14090c:	e59d101c 	ldr	r1, [sp, #28]
  140910:	e287c004 	add	ip, r7, #4
  140914:	e51f2f78 	ldr	r2, [pc, #-3960]	; 13f9a4 <printf_core+0x10ac>
  140918:	e51f3f78 	ldr	r3, [pc, #-3960]	; 13f9a8 <printf_core+0x10b0>
  14091c:	e151000c 	cmp	r1, ip
  140920:	01a0c002 	moveq	ip, r2
  140924:	11a0c003 	movne	ip, r3
  140928:	e3a0e000 	mov	lr, #0
  14092c:	eafffccb 	b	13fc60 <printf_core+0x1368>
  140930:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
  140934:	e1a02006 	mov	r2, r6
  140938:	e2831102 	add	r1, r3, #-2147483648	; 0x80000000
  14093c:	e1a03007 	mov	r3, r7
  140940:	eb000f70 	bl	144708 <__aeabi_dsub>
  140944:	e1a03001 	mov	r3, r1
  140948:	e1a02000 	mov	r2, r0
  14094c:	e1a01007 	mov	r1, r7
  140950:	e1a00006 	mov	r0, r6
  140954:	eb000f6c 	bl	14470c <__adddf3>
  140958:	e2813102 	add	r3, r1, #-2147483648	; 0x80000000
  14095c:	e58d001c 	str	r0, [sp, #28]
  140960:	e58d3038 	str	r3, [sp, #56]	; 0x38
  140964:	eafffdf3 	b	140138 <printf_core+0x1840>
  140968:	e3a0300a 	mov	r3, #10
  14096c:	e58d3038 	str	r3, [sp, #56]	; 0x38
  140970:	eafffc97 	b	13fbd4 <printf_core+0x12dc>
  140974:	e1a03005 	mov	r3, r5
  140978:	e1a02009 	mov	r2, r9
  14097c:	e3a01020 	mov	r1, #32
  140980:	e59d0004 	ldr	r0, [sp, #4]
  140984:	ebfff7b0 	bl	13e84c <pad.part.0>
  140988:	eafffe72 	b	140358 <printf_core+0x1a60>
  14098c:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  140990:	e1500003 	cmp	r0, r3
  140994:	1afffee7 	bne	140538 <printf_core+0x1c40>
  140998:	eaffff42 	b	1406a8 <printf_core+0x1db0>
  14099c:	e1a03005 	mov	r3, r5
  1409a0:	e1a02009 	mov	r2, r9
  1409a4:	e3a01030 	mov	r1, #48	; 0x30
  1409a8:	e59d0004 	ldr	r0, [sp, #4]
  1409ac:	ebfff7a6 	bl	13e84c <pad.part.0>
  1409b0:	eaffff49 	b	1406dc <printf_core+0x1de4>
  1409b4:	e1a03005 	mov	r3, r5
  1409b8:	e1a02009 	mov	r2, r9
  1409bc:	e3a01020 	mov	r1, #32
  1409c0:	e59d0004 	ldr	r0, [sp, #4]
  1409c4:	ebfff7a0 	bl	13e84c <pad.part.0>
  1409c8:	eafffe50 	b	140310 <printf_core+0x1a18>

001409cc <vfprintf>:
  1409cc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  1409d0:	e1a09001 	mov	r9, r1
  1409d4:	e1a06002 	mov	r6, r2
  1409d8:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  1409dc:	e28d5010 	add	r5, sp, #16
  1409e0:	e3a02028 	mov	r2, #40	; 0x28
  1409e4:	e3a01000 	mov	r1, #0
  1409e8:	e1a04000 	mov	r4, r0
  1409ec:	e1a00005 	mov	r0, r5
  1409f0:	eb000221 	bl	14127c <memset>
  1409f4:	e58d5000 	str	r5, [sp]
  1409f8:	e1a01009 	mov	r1, r9
  1409fc:	e28d3038 	add	r3, sp, #56	; 0x38
  140a00:	e28d200c 	add	r2, sp, #12
  140a04:	e3a00000 	mov	r0, #0
  140a08:	e58d600c 	str	r6, [sp, #12]
  140a0c:	ebfff7b9 	bl	13e8f8 <printf_core>
  140a10:	e3500000 	cmp	r0, #0
  140a14:	ba000047 	blt	140b38 <vfprintf+0x16c>
  140a18:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  140a1c:	e3530000 	cmp	r3, #0
  140a20:	b3a08000 	movlt	r8, #0
  140a24:	ba000002 	blt	140a34 <vfprintf+0x68>
  140a28:	e1a00004 	mov	r0, r4
  140a2c:	eb000ab0 	bl	1434f4 <__lockfile>
  140a30:	e1a08000 	mov	r8, r0
  140a34:	e5942048 	ldr	r2, [r4, #72]	; 0x48
  140a38:	e5943000 	ldr	r3, [r4]
  140a3c:	e3520000 	cmp	r2, #0
  140a40:	e2036020 	and	r6, r3, #32
  140a44:	d3c33020 	bicle	r3, r3, #32
  140a48:	d5843000 	strle	r3, [r4]
  140a4c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  140a50:	e3530000 	cmp	r3, #0
  140a54:	0a000024 	beq	140aec <vfprintf+0x120>
  140a58:	e5947010 	ldr	r7, [r4, #16]
  140a5c:	e3570000 	cmp	r7, #0
  140a60:	13a07000 	movne	r7, #0
  140a64:	0a000035 	beq	140b40 <vfprintf+0x174>
  140a68:	e58d5000 	str	r5, [sp]
  140a6c:	e28d3038 	add	r3, sp, #56	; 0x38
  140a70:	e28d200c 	add	r2, sp, #12
  140a74:	e1a01009 	mov	r1, r9
  140a78:	e1a00004 	mov	r0, r4
  140a7c:	ebfff79d 	bl	13e8f8 <printf_core>
  140a80:	e1a05000 	mov	r5, r0
  140a84:	e3570000 	cmp	r7, #0
  140a88:	0a00000d 	beq	140ac4 <vfprintf+0xf8>
  140a8c:	e3a02000 	mov	r2, #0
  140a90:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  140a94:	e1a01002 	mov	r1, r2
  140a98:	e1a00004 	mov	r0, r4
  140a9c:	e12fff33 	blx	r3
  140aa0:	e3a03000 	mov	r3, #0
  140aa4:	e5942014 	ldr	r2, [r4, #20]
  140aa8:	e584702c 	str	r7, [r4, #44]	; 0x2c
  140aac:	e1520003 	cmp	r2, r3
  140ab0:	03e05000 	mvneq	r5, #0
  140ab4:	e5843030 	str	r3, [r4, #48]	; 0x30
  140ab8:	e5843010 	str	r3, [r4, #16]
  140abc:	e584301c 	str	r3, [r4, #28]
  140ac0:	e5843014 	str	r3, [r4, #20]
  140ac4:	e5943000 	ldr	r3, [r4]
  140ac8:	e3130020 	tst	r3, #32
  140acc:	13e05000 	mvnne	r5, #0
  140ad0:	e1866003 	orr	r6, r6, r3
  140ad4:	e3580000 	cmp	r8, #0
  140ad8:	e5846000 	str	r6, [r4]
  140adc:	1a000010 	bne	140b24 <vfprintf+0x158>
  140ae0:	e1a00005 	mov	r0, r5
  140ae4:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  140ae8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140aec:	e3a01050 	mov	r1, #80	; 0x50
  140af0:	e28d2088 	add	r2, sp, #136	; 0x88
  140af4:	e594702c 	ldr	r7, [r4, #44]	; 0x2c
  140af8:	e5843010 	str	r3, [r4, #16]
  140afc:	e584301c 	str	r3, [r4, #28]
  140b00:	e5843014 	str	r3, [r4, #20]
  140b04:	e5841030 	str	r1, [r4, #48]	; 0x30
  140b08:	e584202c 	str	r2, [r4, #44]	; 0x2c
  140b0c:	e1a00004 	mov	r0, r4
  140b10:	eb000b95 	bl	14396c <__towrite>
  140b14:	e3500000 	cmp	r0, #0
  140b18:	13e05000 	mvnne	r5, #0
  140b1c:	1affffd8 	bne	140a84 <vfprintf+0xb8>
  140b20:	eaffffd0 	b	140a68 <vfprintf+0x9c>
  140b24:	e1a00004 	mov	r0, r4
  140b28:	eb000abe 	bl	143628 <__unlockfile>
  140b2c:	e1a00005 	mov	r0, r5
  140b30:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  140b34:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140b38:	e3e05000 	mvn	r5, #0
  140b3c:	eaffffe7 	b	140ae0 <vfprintf+0x114>
  140b40:	e1a00004 	mov	r0, r4
  140b44:	eb000b88 	bl	14396c <__towrite>
  140b48:	e3500000 	cmp	r0, #0
  140b4c:	13e05000 	mvnne	r5, #0
  140b50:	1affffdb 	bne	140ac4 <vfprintf+0xf8>
  140b54:	eaffffc3 	b	140a68 <vfprintf+0x9c>

00140b58 <sn_write>:
  140b58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  140b5c:	e5906054 	ldr	r6, [r0, #84]	; 0x54
  140b60:	e590c01c 	ldr	ip, [r0, #28]
  140b64:	e1a05000 	mov	r5, r0
  140b68:	e5900014 	ldr	r0, [r0, #20]
  140b6c:	e5963004 	ldr	r3, [r6, #4]
  140b70:	e040000c 	sub	r0, r0, ip
  140b74:	e1500003 	cmp	r0, r3
  140b78:	31a04000 	movcc	r4, r0
  140b7c:	21a04003 	movcs	r4, r3
  140b80:	e3540000 	cmp	r4, #0
  140b84:	e1a08001 	mov	r8, r1
  140b88:	e1a07002 	mov	r7, r2
  140b8c:	e5960000 	ldr	r0, [r6]
  140b90:	1a000012 	bne	140be0 <sn_write+0x88>
  140b94:	e1570003 	cmp	r7, r3
  140b98:	31a04007 	movcc	r4, r7
  140b9c:	21a04003 	movcs	r4, r3
  140ba0:	e3540000 	cmp	r4, #0
  140ba4:	0a000006 	beq	140bc4 <sn_write+0x6c>
  140ba8:	e1a01008 	mov	r1, r8
  140bac:	e1a02004 	mov	r2, r4
  140bb0:	eb000079 	bl	140d9c <memcpy>
  140bb4:	e8960009 	ldm	r6, {r0, r3}
  140bb8:	e0800004 	add	r0, r0, r4
  140bbc:	e0433004 	sub	r3, r3, r4
  140bc0:	e8860009 	stm	r6, {r0, r3}
  140bc4:	e3a03000 	mov	r3, #0
  140bc8:	e5c03000 	strb	r3, [r0]
  140bcc:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
  140bd0:	e1a00007 	mov	r0, r7
  140bd4:	e585301c 	str	r3, [r5, #28]
  140bd8:	e5853014 	str	r3, [r5, #20]
  140bdc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  140be0:	e1a0100c 	mov	r1, ip
  140be4:	e1a02004 	mov	r2, r4
  140be8:	eb00006b 	bl	140d9c <memcpy>
  140bec:	e8960009 	ldm	r6, {r0, r3}
  140bf0:	e0800004 	add	r0, r0, r4
  140bf4:	e0433004 	sub	r3, r3, r4
  140bf8:	e8860009 	stm	r6, {r0, r3}
  140bfc:	eaffffe4 	b	140b94 <sn_write+0x3c>

00140c00 <vsnprintf>:
  140c00:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  140c04:	e2516000 	subs	r6, r1, #0
  140c08:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
  140c0c:	e1a08002 	mov	r8, r2
  140c10:	e1a09003 	mov	r9, r3
  140c14:	1a000018 	bne	140c7c <vsnprintf+0x7c>
  140c18:	e28d7010 	add	r7, sp, #16
  140c1c:	e3a02090 	mov	r2, #144	; 0x90
  140c20:	e1a00007 	mov	r0, r7
  140c24:	e28d4004 	add	r4, sp, #4
  140c28:	e58d600c 	str	r6, [sp, #12]
  140c2c:	e58d4008 	str	r4, [sp, #8]
  140c30:	eb000191 	bl	14127c <memset>
  140c34:	e3e02000 	mvn	r2, #0
  140c38:	e59f1098 	ldr	r1, [pc, #152]	; 140cd8 <vsnprintf+0xd8>
  140c3c:	e28d3008 	add	r3, sp, #8
  140c40:	e58d205c 	str	r2, [sp, #92]	; 0x5c
  140c44:	e58d2060 	str	r2, [sp, #96]	; 0x60
  140c48:	e58d1034 	str	r1, [sp, #52]	; 0x34
  140c4c:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  140c50:	e58d3064 	str	r3, [sp, #100]	; 0x64
  140c54:	e3a0c000 	mov	ip, #0
  140c58:	e1a02009 	mov	r2, r9
  140c5c:	e1a01008 	mov	r1, r8
  140c60:	e1a00007 	mov	r0, r7
  140c64:	e5c4c000 	strb	ip, [r4]
  140c68:	ebffff57 	bl	1409cc <vfprintf>
  140c6c:	e1a05000 	mov	r5, r0
  140c70:	e1a00005 	mov	r0, r5
  140c74:	e28dd0a4 	add	sp, sp, #164	; 0xa4
  140c78:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140c7c:	e3e05000 	mvn	r5, #0
  140c80:	e1a04000 	mov	r4, r0
  140c84:	e28d7010 	add	r7, sp, #16
  140c88:	e0863005 	add	r3, r6, r5
  140c8c:	e3a02090 	mov	r2, #144	; 0x90
  140c90:	e1a00007 	mov	r0, r7
  140c94:	e3a01000 	mov	r1, #0
  140c98:	e58d300c 	str	r3, [sp, #12]
  140c9c:	e58d4008 	str	r4, [sp, #8]
  140ca0:	eb000175 	bl	14127c <memset>
  140ca4:	e59f202c 	ldr	r2, [pc, #44]	; 140cd8 <vsnprintf+0xd8>
  140ca8:	e28d3008 	add	r3, sp, #8
  140cac:	e3560000 	cmp	r6, #0
  140cb0:	e58d505c 	str	r5, [sp, #92]	; 0x5c
  140cb4:	e58d5060 	str	r5, [sp, #96]	; 0x60
  140cb8:	e58d2034 	str	r2, [sp, #52]	; 0x34
  140cbc:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  140cc0:	e58d3064 	str	r3, [sp, #100]	; 0x64
  140cc4:	aaffffe2 	bge	140c54 <vsnprintf+0x54>
  140cc8:	ebffe084 	bl	138ee0 <__errno_location>
  140ccc:	e3a0204b 	mov	r2, #75	; 0x4b
  140cd0:	e5802000 	str	r2, [r0]
  140cd4:	eaffffe5 	b	140c70 <vsnprintf+0x70>
  140cd8:	00140b58 	.word	0x00140b58

00140cdc <vsprintf>:
  140cdc:	e1a03002 	mov	r3, r2
  140ce0:	e1a02001 	mov	r2, r1
  140ce4:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  140ce8:	eaffffc4 	b	140c00 <vsnprintf>

00140cec <atoi>:
  140cec:	e5d03000 	ldrb	r3, [r0]
  140cf0:	e2432009 	sub	r2, r3, #9
  140cf4:	e3530020 	cmp	r3, #32
  140cf8:	13520004 	cmpne	r2, #4
  140cfc:	8a000004 	bhi	140d14 <atoi+0x28>
  140d00:	e5f03001 	ldrb	r3, [r0, #1]!
  140d04:	e2432009 	sub	r2, r3, #9
  140d08:	e3530020 	cmp	r3, #32
  140d0c:	13520004 	cmpne	r2, #4
  140d10:	9afffffa 	bls	140d00 <atoi+0x14>
  140d14:	e353002b 	cmp	r3, #43	; 0x2b
  140d18:	0a000019 	beq	140d84 <atoi+0x98>
  140d1c:	e353002d 	cmp	r3, #45	; 0x2d
  140d20:	0a00000f 	beq	140d64 <atoi+0x78>
  140d24:	e5d01000 	ldrb	r1, [r0]
  140d28:	e2412030 	sub	r2, r1, #48	; 0x30
  140d2c:	e3520009 	cmp	r2, #9
  140d30:	91a03000 	movls	r3, r0
  140d34:	8a000010 	bhi	140d7c <atoi+0x90>
  140d38:	e3a0c000 	mov	ip, #0
  140d3c:	e3a00000 	mov	r0, #0
  140d40:	e5f31001 	ldrb	r1, [r3, #1]!
  140d44:	e0800100 	add	r0, r0, r0, lsl #2
  140d48:	e0620080 	rsb	r0, r2, r0, lsl #1
  140d4c:	e2412030 	sub	r2, r1, #48	; 0x30
  140d50:	e3520009 	cmp	r2, #9
  140d54:	9afffff9 	bls	140d40 <atoi+0x54>
  140d58:	e35c0000 	cmp	ip, #0
  140d5c:	02600000 	rsbeq	r0, r0, #0
  140d60:	e12fff1e 	bx	lr
  140d64:	e5d01001 	ldrb	r1, [r0, #1]
  140d68:	e2803001 	add	r3, r0, #1
  140d6c:	e2412030 	sub	r2, r1, #48	; 0x30
  140d70:	e3520009 	cmp	r2, #9
  140d74:	93a0c001 	movls	ip, #1
  140d78:	9affffef 	bls	140d3c <atoi+0x50>
  140d7c:	e3a00000 	mov	r0, #0
  140d80:	e12fff1e 	bx	lr
  140d84:	e5d01001 	ldrb	r1, [r0, #1]
  140d88:	e2803001 	add	r3, r0, #1
  140d8c:	e2412030 	sub	r2, r1, #48	; 0x30
  140d90:	e3520009 	cmp	r2, #9
  140d94:	9affffe7 	bls	140d38 <atoi+0x4c>
  140d98:	eafffff7 	b	140d7c <atoi+0x90>

00140d9c <memcpy>:
  140d9c:	e92d4011 	push	{r0, r4, lr}
  140da0:	e24dd01c 	sub	sp, sp, #28
  140da4:	e3520004 	cmp	r2, #4
  140da8:	3a0000b0 	bcc	141070 <copy_last_3_and_return>
  140dac:	e2613000 	rsb	r3, r1, #0
  140db0:	e2133003 	ands	r3, r3, #3
  140db4:	0a000007 	beq	140dd8 <src_aligned>
  140db8:	e1b0cf83 	lsls	ip, r3, #31
  140dbc:	e0422003 	sub	r2, r2, r3
  140dc0:	44d13001 	ldrbmi	r3, [r1], #1
  140dc4:	24d14001 	ldrbcs	r4, [r1], #1
  140dc8:	24d1c001 	ldrbcs	ip, [r1], #1
  140dcc:	44c03001 	strbmi	r3, [r0], #1
  140dd0:	24c04001 	strbcs	r4, [r0], #1
  140dd4:	24c0c001 	strbcs	ip, [r0], #1

00140dd8 <src_aligned>:
  140dd8:	e020c001 	eor	ip, r0, r1
  140ddc:	e31c0003 	tst	ip, #3
  140de0:	1a000027 	bne	140e84 <non_congruent>
  140de4:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  140de8:	e2603000 	rsb	r3, r0, #0
  140dec:	e213301c 	ands	r3, r3, #28
  140df0:	0a00000a 	beq	140e20 <cached_aligned32>
  140df4:	e1530002 	cmp	r3, r2
  140df8:	8202301c 	andhi	r3, r2, #28
  140dfc:	e1b0ce03 	lsls	ip, r3, #28
  140e00:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  140e04:	48b10300 	ldmmi	r1!, {r8, r9}
  140e08:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  140e0c:	48a00300 	stmiami	r0!, {r8, r9}
  140e10:	e3130004 	tst	r3, #4
  140e14:	1491a004 	ldrne	sl, [r1], #4
  140e18:	1480a004 	strne	sl, [r0], #4
  140e1c:	e0422003 	sub	r2, r2, r3

00140e20 <cached_aligned32>:
  140e20:	e2522020 	subs	r2, r2, #32
  140e24:	3a000004 	bcc	140e3c <less_than_32_left>
  140e28:	e8b10ff0 	ldm	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
  140e2c:	e2522020 	subs	r2, r2, #32
  140e30:	e8a00ff0 	stmia	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  140e34:	2afffffb 	bcs	140e28 <cached_aligned32+0x8>
  140e38:	e2822020 	add	r2, r2, #32

00140e3c <less_than_32_left>:
  140e3c:	e312001f 	tst	r2, #31
  140e40:	0a00000c 	beq	140e78 <less_than_32_left+0x3c>
  140e44:	e1b0ce02 	lsls	ip, r2, #28
  140e48:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  140e4c:	48b10300 	ldmmi	r1!, {r8, r9}
  140e50:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  140e54:	48a00300 	stmiami	r0!, {r8, r9}
  140e58:	e1b0cf02 	lsls	ip, r2, #30
  140e5c:	24913004 	ldrcs	r3, [r1], #4
  140e60:	40d140b2 	ldrhmi	r4, [r1], #2
  140e64:	24803004 	strcs	r3, [r0], #4
  140e68:	40c040b2 	strhmi	r4, [r0], #2
  140e6c:	e3120001 	tst	r2, #1
  140e70:	15d13000 	ldrbne	r3, [r1]
  140e74:	15c03000 	strbne	r3, [r0]
  140e78:	e8bd0fe0 	pop	{r5, r6, r7, r8, r9, sl, fp}
  140e7c:	e8bd4011 	pop	{r0, r4, lr}
  140e80:	e12fff1e 	bx	lr

00140e84 <non_congruent>:
  140e84:	e3520004 	cmp	r2, #4
  140e88:	3a000078 	bcc	141070 <copy_last_3_and_return>
  140e8c:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  140e90:	e2605000 	rsb	r5, r0, #0
  140e94:	e2055003 	and	r5, r5, #3
  140e98:	e1a0c185 	lsl	ip, r5, #3
  140e9c:	e26ce020 	rsb	lr, ip, #32
  140ea0:	e4913004 	ldr	r3, [r1], #4
  140ea4:	e2422004 	sub	r2, r2, #4
  140ea8:	e1b05f85 	lsls	r5, r5, #31
  140eac:	44c03001 	strbmi	r3, [r0], #1
  140eb0:	41a03423 	lsrmi	r3, r3, #8
  140eb4:	24c03001 	strbcs	r3, [r0], #1
  140eb8:	21a03423 	lsrcs	r3, r3, #8
  140ebc:	24c03001 	strbcs	r3, [r0], #1
  140ec0:	21a03423 	lsrcs	r3, r3, #8
  140ec4:	e3520004 	cmp	r2, #4
  140ec8:	3a000061 	bcc	141054 <partial_word_tail>
  140ecc:	e310001c 	tst	r0, #28
  140ed0:	0a000007 	beq	140ef4 <non_congruent+0x70>
  140ed4:	e4915004 	ldr	r5, [r1], #4
  140ed8:	e2422004 	sub	r2, r2, #4
  140edc:	e1834e15 	orr	r4, r3, r5, lsl lr
  140ee0:	e1a03c35 	lsr	r3, r5, ip
  140ee4:	e4804004 	str	r4, [r0], #4
  140ee8:	e3520004 	cmp	r2, #4
  140eec:	2afffff6 	bcs	140ecc <non_congruent+0x48>
  140ef0:	3a000057 	bcc	141054 <partial_word_tail>
  140ef4:	e2522020 	subs	r2, r2, #32
  140ef8:	3a00004a 	bcc	141028 <less_than_thirtytwo>
  140efc:	e35c0018 	cmp	ip, #24
  140f00:	0a000031 	beq	140fcc <loop24>
  140f04:	e35c0008 	cmp	ip, #8
  140f08:	0a000017 	beq	140f6c <loop8>

00140f0c <loop16>:
  140f0c:	e491c004 	ldr	ip, [r1], #4
  140f10:	e1a0400c 	mov	r4, ip
  140f14:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140f18:	e2522020 	subs	r2, r2, #32
  140f1c:	2491c004 	ldrcs	ip, [r1], #4
  140f20:	e1833804 	orr	r3, r3, r4, lsl #16
  140f24:	e1a04824 	lsr	r4, r4, #16
  140f28:	e1844805 	orr	r4, r4, r5, lsl #16
  140f2c:	e1a05825 	lsr	r5, r5, #16
  140f30:	e1855806 	orr	r5, r5, r6, lsl #16
  140f34:	e1a06826 	lsr	r6, r6, #16
  140f38:	e1866807 	orr	r6, r6, r7, lsl #16
  140f3c:	e1a07827 	lsr	r7, r7, #16
  140f40:	e1877808 	orr	r7, r7, r8, lsl #16
  140f44:	e1a08828 	lsr	r8, r8, #16
  140f48:	e1888809 	orr	r8, r8, r9, lsl #16
  140f4c:	e1a09829 	lsr	r9, r9, #16
  140f50:	e189980a 	orr	r9, r9, sl, lsl #16
  140f54:	e1a0a82a 	lsr	sl, sl, #16
  140f58:	e18aa80b 	orr	sl, sl, fp, lsl #16
  140f5c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140f60:	e1a0382b 	lsr	r3, fp, #16
  140f64:	2affffe9 	bcs	140f10 <loop16+0x4>
  140f68:	ea00002e 	b	141028 <less_than_thirtytwo>

00140f6c <loop8>:
  140f6c:	e491c004 	ldr	ip, [r1], #4
  140f70:	e1a0400c 	mov	r4, ip
  140f74:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140f78:	e2522020 	subs	r2, r2, #32
  140f7c:	2491c004 	ldrcs	ip, [r1], #4
  140f80:	e1833c04 	orr	r3, r3, r4, lsl #24
  140f84:	e1a04424 	lsr	r4, r4, #8
  140f88:	e1844c05 	orr	r4, r4, r5, lsl #24
  140f8c:	e1a05425 	lsr	r5, r5, #8
  140f90:	e1855c06 	orr	r5, r5, r6, lsl #24
  140f94:	e1a06426 	lsr	r6, r6, #8
  140f98:	e1866c07 	orr	r6, r6, r7, lsl #24
  140f9c:	e1a07427 	lsr	r7, r7, #8
  140fa0:	e1877c08 	orr	r7, r7, r8, lsl #24
  140fa4:	e1a08428 	lsr	r8, r8, #8
  140fa8:	e1888c09 	orr	r8, r8, r9, lsl #24
  140fac:	e1a09429 	lsr	r9, r9, #8
  140fb0:	e1899c0a 	orr	r9, r9, sl, lsl #24
  140fb4:	e1a0a42a 	lsr	sl, sl, #8
  140fb8:	e18aac0b 	orr	sl, sl, fp, lsl #24
  140fbc:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140fc0:	e1a0342b 	lsr	r3, fp, #8
  140fc4:	2affffe9 	bcs	140f70 <loop8+0x4>
  140fc8:	ea000016 	b	141028 <less_than_thirtytwo>

00140fcc <loop24>:
  140fcc:	e491c004 	ldr	ip, [r1], #4
  140fd0:	e1a0400c 	mov	r4, ip
  140fd4:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140fd8:	e2522020 	subs	r2, r2, #32
  140fdc:	2491c004 	ldrcs	ip, [r1], #4
  140fe0:	e1833404 	orr	r3, r3, r4, lsl #8
  140fe4:	e1a04c24 	lsr	r4, r4, #24
  140fe8:	e1844405 	orr	r4, r4, r5, lsl #8
  140fec:	e1a05c25 	lsr	r5, r5, #24
  140ff0:	e1855406 	orr	r5, r5, r6, lsl #8
  140ff4:	e1a06c26 	lsr	r6, r6, #24
  140ff8:	e1866407 	orr	r6, r6, r7, lsl #8
  140ffc:	e1a07c27 	lsr	r7, r7, #24
  141000:	e1877408 	orr	r7, r7, r8, lsl #8
  141004:	e1a08c28 	lsr	r8, r8, #24
  141008:	e1888409 	orr	r8, r8, r9, lsl #8
  14100c:	e1a09c29 	lsr	r9, r9, #24
  141010:	e189940a 	orr	r9, r9, sl, lsl #8
  141014:	e1a0ac2a 	lsr	sl, sl, #24
  141018:	e18aa40b 	orr	sl, sl, fp, lsl #8
  14101c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  141020:	e1a03c2b 	lsr	r3, fp, #24
  141024:	2affffe9 	bcs	140fd0 <loop24+0x4>

00141028 <less_than_thirtytwo>:
  141028:	e26ec020 	rsb	ip, lr, #32
  14102c:	e2822020 	add	r2, r2, #32
  141030:	e3520004 	cmp	r2, #4
  141034:	3a000006 	bcc	141054 <partial_word_tail>
  141038:	e4915004 	ldr	r5, [r1], #4
  14103c:	e2422004 	sub	r2, r2, #4
  141040:	e1834e15 	orr	r4, r3, r5, lsl lr
  141044:	e1a03c35 	lsr	r3, r5, ip
  141048:	e4804004 	str	r4, [r0], #4
  14104c:	e3520004 	cmp	r2, #4
  141050:	2afffff8 	bcs	141038 <less_than_thirtytwo+0x10>

00141054 <partial_word_tail>:
  141054:	e1b05e0e 	lsls	r5, lr, #28
  141058:	44c03001 	strbmi	r3, [r0], #1
  14105c:	41a03423 	lsrmi	r3, r3, #8
  141060:	24c03001 	strbcs	r3, [r0], #1
  141064:	21a03423 	lsrcs	r3, r3, #8
  141068:	24c03001 	strbcs	r3, [r0], #1
  14106c:	e89d0fe0 	ldm	sp, {r5, r6, r7, r8, r9, sl, fp}

00141070 <copy_last_3_and_return>:
  141070:	e1b02f82 	lsls	r2, r2, #31
  141074:	44d12001 	ldrbmi	r2, [r1], #1
  141078:	24d13001 	ldrbcs	r3, [r1], #1
  14107c:	25d1c000 	ldrbcs	ip, [r1]
  141080:	44c02001 	strbmi	r2, [r0], #1
  141084:	24c03001 	strbcs	r3, [r0], #1
  141088:	25c0c000 	strbcs	ip, [r0]
  14108c:	e28dd01c 	add	sp, sp, #28
  141090:	e8bd4011 	pop	{r0, r4, lr}
  141094:	e12fff1e 	bx	lr

00141098 <memcmp>:
  141098:	e3520000 	cmp	r2, #0
  14109c:	0a00000c 	beq	1410d4 <memcmp+0x3c>
  1410a0:	e5d0c000 	ldrb	ip, [r0]
  1410a4:	e5d13000 	ldrb	r3, [r1]
  1410a8:	e153000c 	cmp	r3, ip
  1410ac:	1a00000a 	bne	1410dc <memcmp+0x44>
  1410b0:	e2422001 	sub	r2, r2, #1
  1410b4:	e0812002 	add	r2, r1, r2
  1410b8:	ea000003 	b	1410cc <memcmp+0x34>
  1410bc:	e5f0c001 	ldrb	ip, [r0, #1]!
  1410c0:	e5f13001 	ldrb	r3, [r1, #1]!
  1410c4:	e15c0003 	cmp	ip, r3
  1410c8:	1a000003 	bne	1410dc <memcmp+0x44>
  1410cc:	e1510002 	cmp	r1, r2
  1410d0:	1afffff9 	bne	1410bc <memcmp+0x24>
  1410d4:	e3a00000 	mov	r0, #0
  1410d8:	e12fff1e 	bx	lr
  1410dc:	e04c0003 	sub	r0, ip, r3
  1410e0:	e12fff1e 	bx	lr

001410e4 <memmove>:
  1410e4:	e1500001 	cmp	r0, r1
  1410e8:	e92d4030 	push	{r4, r5, lr}
  1410ec:	e1a0e000 	mov	lr, r0
  1410f0:	0a000030 	beq	1411b8 <memmove+0xd4>
  1410f4:	e0414000 	sub	r4, r1, r0
  1410f8:	e0444002 	sub	r4, r4, r2
  1410fc:	e0625f82 	rsb	r5, r2, r2, lsl #31
  141100:	e1540085 	cmp	r4, r5, lsl #1
  141104:	e1a0c001 	mov	ip, r1
  141108:	e1a03002 	mov	r3, r2
  14110c:	9a000054 	bls	141264 <memmove+0x180>
  141110:	e0212000 	eor	r2, r1, r0
  141114:	e1500001 	cmp	r0, r1
  141118:	e2022003 	and	r2, r2, #3
  14111c:	2a000027 	bcs	1411c0 <memmove+0xdc>
  141120:	e3520000 	cmp	r2, #0
  141124:	1a00001a 	bne	141194 <memmove+0xb0>
  141128:	e3100003 	tst	r0, #3
  14112c:	0a000050 	beq	141274 <memmove+0x190>
  141130:	e3530000 	cmp	r3, #0
  141134:	11a02000 	movne	r2, r0
  141138:	e2433001 	sub	r3, r3, #1
  14113c:	1a000002 	bne	14114c <memmove+0x68>
  141140:	ea00001c 	b	1411b8 <memmove+0xd4>
  141144:	e2533001 	subs	r3, r3, #1
  141148:	3a00001a 	bcc	1411b8 <memmove+0xd4>
  14114c:	e4dc1001 	ldrb	r1, [ip], #1
  141150:	e4c21001 	strb	r1, [r2], #1
  141154:	e3120003 	tst	r2, #3
  141158:	1afffff9 	bne	141144 <memmove+0x60>
  14115c:	e3530003 	cmp	r3, #3
  141160:	9a00000c 	bls	141198 <memmove+0xb4>
  141164:	e2435004 	sub	r5, r3, #4
  141168:	e3c55003 	bic	r5, r5, #3
  14116c:	e2855004 	add	r5, r5, #4
  141170:	e0824005 	add	r4, r2, r5
  141174:	e24c1004 	sub	r1, ip, #4
  141178:	e5b10004 	ldr	r0, [r1, #4]!
  14117c:	e4820004 	str	r0, [r2], #4
  141180:	e1540002 	cmp	r4, r2
  141184:	1afffffb 	bne	141178 <memmove+0x94>
  141188:	e2033003 	and	r3, r3, #3
  14118c:	e08cc005 	add	ip, ip, r5
  141190:	ea000000 	b	141198 <memmove+0xb4>
  141194:	e1a02000 	mov	r2, r0
  141198:	e3530000 	cmp	r3, #0
  14119c:	12422001 	subne	r2, r2, #1
  1411a0:	108c3003 	addne	r3, ip, r3
  1411a4:	0a000003 	beq	1411b8 <memmove+0xd4>
  1411a8:	e4dc1001 	ldrb	r1, [ip], #1
  1411ac:	e153000c 	cmp	r3, ip
  1411b0:	e5e21001 	strb	r1, [r2, #1]!
  1411b4:	1afffffb 	bne	1411a8 <memmove+0xc4>
  1411b8:	e1a0000e 	mov	r0, lr
  1411bc:	e8bd8030 	pop	{r4, r5, pc}
  1411c0:	e3520000 	cmp	r2, #0
  1411c4:	1a00001c 	bne	14123c <memmove+0x158>
  1411c8:	e0801003 	add	r1, r0, r3
  1411cc:	e3110003 	tst	r1, #3
  1411d0:	0a000025 	beq	14126c <memmove+0x188>
  1411d4:	e3530000 	cmp	r3, #0
  1411d8:	e2432001 	sub	r2, r3, #1
  1411dc:	0afffff5 	beq	1411b8 <memmove+0xd4>
  1411e0:	e08c3003 	add	r3, ip, r3
  1411e4:	ea000001 	b	1411f0 <memmove+0x10c>
  1411e8:	e2522001 	subs	r2, r2, #1
  1411ec:	3afffff1 	bcc	1411b8 <memmove+0xd4>
  1411f0:	e5730001 	ldrb	r0, [r3, #-1]!
  1411f4:	e5610001 	strb	r0, [r1, #-1]!
  1411f8:	e3110003 	tst	r1, #3
  1411fc:	1afffff9 	bne	1411e8 <memmove+0x104>
  141200:	e3520003 	cmp	r2, #3
  141204:	91a03002 	movls	r3, r2
  141208:	9a00000b 	bls	14123c <memmove+0x158>
  14120c:	e24c0004 	sub	r0, ip, #4
  141210:	e2423004 	sub	r3, r2, #4
  141214:	e3c33003 	bic	r3, r3, #3
  141218:	e0800002 	add	r0, r0, r2
  14121c:	e0400003 	sub	r0, r0, r3
  141220:	e08e1002 	add	r1, lr, r2
  141224:	e08c3002 	add	r3, ip, r2
  141228:	e5334004 	ldr	r4, [r3, #-4]!
  14122c:	e1530000 	cmp	r3, r0
  141230:	e5214004 	str	r4, [r1, #-4]!
  141234:	1afffffb 	bne	141228 <memmove+0x144>
  141238:	e2023003 	and	r3, r2, #3
  14123c:	e3530000 	cmp	r3, #0
  141240:	108c2003 	addne	r2, ip, r3
  141244:	108e3003 	addne	r3, lr, r3
  141248:	0affffda 	beq	1411b8 <memmove+0xd4>
  14124c:	e5721001 	ldrb	r1, [r2, #-1]!
  141250:	e15c0002 	cmp	ip, r2
  141254:	e5631001 	strb	r1, [r3, #-1]!
  141258:	1afffffb 	bne	14124c <memmove+0x168>
  14125c:	e1a0000e 	mov	r0, lr
  141260:	e8bd8030 	pop	{r4, r5, pc}
  141264:	e8bd4030 	pop	{r4, r5, lr}
  141268:	eafffecb 	b	140d9c <memcpy>
  14126c:	e1a02003 	mov	r2, r3
  141270:	eaffffe2 	b	141200 <memmove+0x11c>
  141274:	e1a02000 	mov	r2, r0
  141278:	eaffffb7 	b	14115c <memmove+0x78>

0014127c <memset>:
  14127c:	e3520000 	cmp	r2, #0
  141280:	012fff1e 	bxeq	lr
  141284:	e1a03000 	mov	r3, r0
  141288:	e20110ff 	and	r1, r1, #255	; 0xff
  14128c:	e6c31002 	strb	r1, [r3], r2
  141290:	e3520002 	cmp	r2, #2
  141294:	e5431001 	strb	r1, [r3, #-1]
  141298:	912fff1e 	bxls	lr
  14129c:	e3520006 	cmp	r2, #6
  1412a0:	e5c01001 	strb	r1, [r0, #1]
  1412a4:	e5c01002 	strb	r1, [r0, #2]
  1412a8:	e5431002 	strb	r1, [r3, #-2]
  1412ac:	e5431003 	strb	r1, [r3, #-3]
  1412b0:	912fff1e 	bxls	lr
  1412b4:	e3520008 	cmp	r2, #8
  1412b8:	e5c01003 	strb	r1, [r0, #3]
  1412bc:	e5431004 	strb	r1, [r3, #-4]
  1412c0:	912fff1e 	bxls	lr
  1412c4:	e260c000 	rsb	ip, r0, #0
  1412c8:	e20cc003 	and	ip, ip, #3
  1412cc:	e042200c 	sub	r2, r2, ip
  1412d0:	e3c22003 	bic	r2, r2, #3
  1412d4:	e0811401 	add	r1, r1, r1, lsl #8
  1412d8:	e080300c 	add	r3, r0, ip
  1412dc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  1412e0:	e0811801 	add	r1, r1, r1, lsl #16
  1412e4:	e3520008 	cmp	r2, #8
  1412e8:	e083e002 	add	lr, r3, r2
  1412ec:	e780100c 	str	r1, [r0, ip]
  1412f0:	e50e1004 	str	r1, [lr, #-4]
  1412f4:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  1412f8:	e3520018 	cmp	r2, #24
  1412fc:	e5831004 	str	r1, [r3, #4]
  141300:	e5831008 	str	r1, [r3, #8]
  141304:	e50e100c 	str	r1, [lr, #-12]
  141308:	e50e1008 	str	r1, [lr, #-8]
  14130c:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  141310:	e3a04000 	mov	r4, #0
  141314:	e203c004 	and	ip, r3, #4
  141318:	e28cc018 	add	ip, ip, #24
  14131c:	e042200c 	sub	r2, r2, ip
  141320:	e352001f 	cmp	r2, #31
  141324:	e583100c 	str	r1, [r3, #12]
  141328:	e5831010 	str	r1, [r3, #16]
  14132c:	e5831014 	str	r1, [r3, #20]
  141330:	e5831018 	str	r1, [r3, #24]
  141334:	e1a05001 	mov	r5, r1
  141338:	e50e101c 	str	r1, [lr, #-28]	; 0xffffffe4
  14133c:	e50e1018 	str	r1, [lr, #-24]	; 0xffffffe8
  141340:	e50e1014 	str	r1, [lr, #-20]	; 0xffffffec
  141344:	e50e1010 	str	r1, [lr, #-16]
  141348:	e1846001 	orr	r6, r4, r1
  14134c:	e1a07001 	mov	r7, r1
  141350:	e083100c 	add	r1, r3, ip
  141354:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  141358:	e2422020 	sub	r2, r2, #32
  14135c:	e3c2301f 	bic	r3, r2, #31
  141360:	e2812040 	add	r2, r1, #64	; 0x40
  141364:	e0833002 	add	r3, r3, r2
  141368:	e2812020 	add	r2, r1, #32
  14136c:	e5026020 	str	r6, [r2, #-32]	; 0xffffffe0
  141370:	e502701c 	str	r7, [r2, #-28]	; 0xffffffe4
  141374:	e5026018 	str	r6, [r2, #-24]	; 0xffffffe8
  141378:	e5027014 	str	r7, [r2, #-20]	; 0xffffffec
  14137c:	e5026010 	str	r6, [r2, #-16]
  141380:	e502700c 	str	r7, [r2, #-12]
  141384:	e90200c0 	stmdb	r2, {r6, r7}
  141388:	e2822020 	add	r2, r2, #32
  14138c:	e1520003 	cmp	r2, r3
  141390:	1afffff5 	bne	14136c <memset+0xf0>
  141394:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00141398 <strcasecmp>:
  141398:	e92d4070 	push	{r4, r5, r6, lr}
  14139c:	e1a05000 	mov	r5, r0
  1413a0:	e5d00000 	ldrb	r0, [r0]
  1413a4:	e1a04001 	mov	r4, r1
  1413a8:	e3500000 	cmp	r0, #0
  1413ac:	1a00000c 	bne	1413e4 <strcasecmp+0x4c>
  1413b0:	ea00000e 	b	1413f0 <strcasecmp+0x58>
  1413b4:	e1500003 	cmp	r0, r3
  1413b8:	0a000005 	beq	1413d4 <strcasecmp+0x3c>
  1413bc:	eb00067f 	bl	142dc0 <tolower>
  1413c0:	e1a06000 	mov	r6, r0
  1413c4:	e5d40000 	ldrb	r0, [r4]
  1413c8:	eb00067c 	bl	142dc0 <tolower>
  1413cc:	e1560000 	cmp	r6, r0
  1413d0:	1a00000c 	bne	141408 <strcasecmp+0x70>
  1413d4:	e5f50001 	ldrb	r0, [r5, #1]!
  1413d8:	e2844001 	add	r4, r4, #1
  1413dc:	e3500000 	cmp	r0, #0
  1413e0:	0a000002 	beq	1413f0 <strcasecmp+0x58>
  1413e4:	e5d43000 	ldrb	r3, [r4]
  1413e8:	e3530000 	cmp	r3, #0
  1413ec:	1afffff0 	bne	1413b4 <strcasecmp+0x1c>
  1413f0:	eb000672 	bl	142dc0 <tolower>
  1413f4:	e1a05000 	mov	r5, r0
  1413f8:	e5d40000 	ldrb	r0, [r4]
  1413fc:	eb00066f 	bl	142dc0 <tolower>
  141400:	e0450000 	sub	r0, r5, r0
  141404:	e8bd8070 	pop	{r4, r5, r6, pc}
  141408:	e5d50000 	ldrb	r0, [r5]
  14140c:	eafffff7 	b	1413f0 <strcasecmp+0x58>

00141410 <__strcasecmp_l>:
  141410:	eaffffe0 	b	141398 <strcasecmp>

00141414 <strcat>:
  141414:	e92d4070 	push	{r4, r5, r6, lr}
  141418:	e1a04000 	mov	r4, r0
  14141c:	e1a05001 	mov	r5, r1
  141420:	eb000026 	bl	1414c0 <strlen>
  141424:	e1a01005 	mov	r1, r5
  141428:	e0840000 	add	r0, r4, r0
  14142c:	eb000012 	bl	14147c <strcpy>
  141430:	e1a00004 	mov	r0, r4
  141434:	e8bd8070 	pop	{r4, r5, r6, pc}

00141438 <strcmp>:
  141438:	e5d02000 	ldrb	r2, [r0]
  14143c:	e5d13000 	ldrb	r3, [r1]
  141440:	e1530002 	cmp	r3, r2
  141444:	0a000004 	beq	14145c <strcmp+0x24>
  141448:	ea000009 	b	141474 <strcmp+0x3c>
  14144c:	e5f03001 	ldrb	r3, [r0, #1]!
  141450:	e5f12001 	ldrb	r2, [r1, #1]!
  141454:	e1530002 	cmp	r3, r2
  141458:	1a000003 	bne	14146c <strcmp+0x34>
  14145c:	e3530000 	cmp	r3, #0
  141460:	1afffff9 	bne	14144c <strcmp+0x14>
  141464:	e1a00003 	mov	r0, r3
  141468:	e12fff1e 	bx	lr
  14146c:	e0430002 	sub	r0, r3, r2
  141470:	e12fff1e 	bx	lr
  141474:	e0420003 	sub	r0, r2, r3
  141478:	e12fff1e 	bx	lr

0014147c <strcpy>:
  14147c:	e92d4010 	push	{r4, lr}
  141480:	e1a04000 	mov	r4, r0
  141484:	eb000a94 	bl	143edc <__stpcpy>
  141488:	e1a00004 	mov	r0, r4
  14148c:	e8bd8010 	pop	{r4, pc}

00141490 <strdup>:
  141490:	e92d4070 	push	{r4, r5, r6, lr}
  141494:	e1a05000 	mov	r5, r0
  141498:	eb000008 	bl	1414c0 <strlen>
  14149c:	e2804001 	add	r4, r0, #1
  1414a0:	e1a00004 	mov	r0, r4
  1414a4:	ebffefab 	bl	13d358 <malloc>
  1414a8:	e3500000 	cmp	r0, #0
  1414ac:	08bd8070 	popeq	{r4, r5, r6, pc}
  1414b0:	e1a02004 	mov	r2, r4
  1414b4:	e1a01005 	mov	r1, r5
  1414b8:	e8bd4070 	pop	{r4, r5, r6, lr}
  1414bc:	eafffe36 	b	140d9c <memcpy>

001414c0 <strlen>:
  1414c0:	e3100003 	tst	r0, #3
  1414c4:	0a000023 	beq	141558 <strlen+0x98>
  1414c8:	e5d03000 	ldrb	r3, [r0]
  1414cc:	e3530000 	cmp	r3, #0
  1414d0:	12803001 	addne	r3, r0, #1
  1414d4:	1a000005 	bne	1414f0 <strlen+0x30>
  1414d8:	ea000020 	b	141560 <strlen+0xa0>
  1414dc:	e5d31000 	ldrb	r1, [r3]
  1414e0:	e283c001 	add	ip, r3, #1
  1414e4:	e3510000 	cmp	r1, #0
  1414e8:	0a000018 	beq	141550 <strlen+0x90>
  1414ec:	e1a0300c 	mov	r3, ip
  1414f0:	e3130003 	tst	r3, #3
  1414f4:	e1a02003 	mov	r2, r3
  1414f8:	1afffff7 	bne	1414dc <strlen+0x1c>
  1414fc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  141500:	e59fe060 	ldr	lr, [pc, #96]	; 141568 <strlen+0xa8>
  141504:	e592c000 	ldr	ip, [r2]
  141508:	e59f305c 	ldr	r3, [pc, #92]	; 14156c <strlen+0xac>
  14150c:	e08c100e 	add	r1, ip, lr
  141510:	e1c1100c 	bic	r1, r1, ip
  141514:	e1110003 	tst	r1, r3
  141518:	1a000004 	bne	141530 <strlen+0x70>
  14151c:	e5b2c004 	ldr	ip, [r2, #4]!
  141520:	e08c100e 	add	r1, ip, lr
  141524:	e1c1100c 	bic	r1, r1, ip
  141528:	e1110003 	tst	r1, r3
  14152c:	0afffffa 	beq	14151c <strlen+0x5c>
  141530:	e5d23000 	ldrb	r3, [r2]
  141534:	e3530000 	cmp	r3, #0
  141538:	0a000002 	beq	141548 <strlen+0x88>
  14153c:	e5f23001 	ldrb	r3, [r2, #1]!
  141540:	e3530000 	cmp	r3, #0
  141544:	1afffffc 	bne	14153c <strlen+0x7c>
  141548:	e0420000 	sub	r0, r2, r0
  14154c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  141550:	e0430000 	sub	r0, r3, r0
  141554:	e12fff1e 	bx	lr
  141558:	e1a02000 	mov	r2, r0
  14155c:	eaffffe6 	b	1414fc <strlen+0x3c>
  141560:	e1a00003 	mov	r0, r3
  141564:	e12fff1e 	bx	lr
  141568:	fefefeff 	.word	0xfefefeff
  14156c:	80808080 	.word	0x80808080

00141570 <strncmp>:
  141570:	e3520000 	cmp	r2, #0
  141574:	0a00001e 	beq	1415f4 <strncmp+0x84>
  141578:	e92d4010 	push	{r4, lr}
  14157c:	e5d04000 	ldrb	r4, [r0]
  141580:	e5d1c000 	ldrb	ip, [r1]
  141584:	e3540000 	cmp	r4, #0
  141588:	0a00001b 	beq	1415fc <strncmp+0x8c>
  14158c:	e3520001 	cmp	r2, #1
  141590:	135c0000 	cmpne	ip, #0
  141594:	13a03001 	movne	r3, #1
  141598:	03a03000 	moveq	r3, #0
  14159c:	e154000c 	cmp	r4, ip
  1415a0:	13a03000 	movne	r3, #0
  1415a4:	02033001 	andeq	r3, r3, #1
  1415a8:	e3530000 	cmp	r3, #0
  1415ac:	e242e001 	sub	lr, r2, #1
  1415b0:	0a000011 	beq	1415fc <strncmp+0x8c>
  1415b4:	e5f02001 	ldrb	r2, [r0, #1]!
  1415b8:	e24ee001 	sub	lr, lr, #1
  1415bc:	e3520000 	cmp	r2, #0
  1415c0:	e5f1c001 	ldrb	ip, [r1, #1]!
  1415c4:	0a000008 	beq	1415ec <strncmp+0x7c>
  1415c8:	e042300c 	sub	r3, r2, ip
  1415cc:	e16f3f13 	clz	r3, r3
  1415d0:	e35c0000 	cmp	ip, #0
  1415d4:	e1a032a3 	lsr	r3, r3, #5
  1415d8:	03a03000 	moveq	r3, #0
  1415dc:	e35e0000 	cmp	lr, #0
  1415e0:	03a03000 	moveq	r3, #0
  1415e4:	e3530000 	cmp	r3, #0
  1415e8:	1afffff1 	bne	1415b4 <strncmp+0x44>
  1415ec:	e042000c 	sub	r0, r2, ip
  1415f0:	e8bd8010 	pop	{r4, pc}
  1415f4:	e1a00002 	mov	r0, r2
  1415f8:	e12fff1e 	bx	lr
  1415fc:	e1a02004 	mov	r2, r4
  141600:	eafffff9 	b	1415ec <strncmp+0x7c>

00141604 <strncpy>:
  141604:	e92d4010 	push	{r4, lr}
  141608:	e1a04000 	mov	r4, r0
  14160c:	eb000a63 	bl	143fa0 <__stpncpy>
  141610:	e1a00004 	mov	r0, r4
  141614:	e8bd8010 	pop	{r4, pc}

00141618 <strnlen>:
  141618:	e92d4070 	push	{r4, r5, r6, lr}
  14161c:	e1a04001 	mov	r4, r1
  141620:	e3a01000 	mov	r1, #0
  141624:	e1a02004 	mov	r2, r4
  141628:	e1a05000 	mov	r5, r0
  14162c:	eb0009d4 	bl	143d84 <memchr>
  141630:	e3500000 	cmp	r0, #0
  141634:	10400005 	subne	r0, r0, r5
  141638:	01a00004 	moveq	r0, r4
  14163c:	e8bd8070 	pop	{r4, r5, r6, pc}

00141640 <twoway_strstr>:
  141640:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  141644:	e1a08001 	mov	r8, r1
  141648:	e24dde43 	sub	sp, sp, #1072	; 0x430
  14164c:	e24dd004 	sub	sp, sp, #4
  141650:	e1a09000 	mov	r9, r0
  141654:	e3a02020 	mov	r2, #32
  141658:	e3a01000 	mov	r1, #0
  14165c:	e28d0010 	add	r0, sp, #16
  141660:	ebffff05 	bl	14127c <memset>
  141664:	e5d83000 	ldrb	r3, [r8]
  141668:	e3530000 	cmp	r3, #0
  14166c:	0a0000c8 	beq	141994 <twoway_strstr+0x354>
  141670:	e5d92000 	ldrb	r2, [r9]
  141674:	e3520000 	cmp	r2, #0
  141678:	11a0c008 	movne	ip, r8
  14167c:	11a0e009 	movne	lr, r9
  141680:	13a05000 	movne	r5, #0
  141684:	13a06001 	movne	r6, #1
  141688:	1a000003 	bne	14169c <twoway_strstr+0x5c>
  14168c:	ea000075 	b	141868 <twoway_strstr+0x228>
  141690:	e5fe2001 	ldrb	r2, [lr, #1]!
  141694:	e3520000 	cmp	r2, #0
  141698:	0a000072 	beq	141868 <twoway_strstr+0x228>
  14169c:	e28d1e43 	add	r1, sp, #1072	; 0x430
  1416a0:	e1a022a3 	lsr	r2, r3, #5
  1416a4:	e0812102 	add	r2, r1, r2, lsl #2
  1416a8:	e0810103 	add	r0, r1, r3, lsl #2
  1416ac:	e203401f 	and	r4, r3, #31
  1416b0:	e5121420 	ldr	r1, [r2, #-1056]	; 0xfffffbe0
  1416b4:	e5fc3001 	ldrb	r3, [ip, #1]!
  1416b8:	e2855001 	add	r5, r5, #1
  1416bc:	e1811416 	orr	r1, r1, r6, lsl r4
  1416c0:	e3530000 	cmp	r3, #0
  1416c4:	e5005400 	str	r5, [r0, #-1024]	; 0xfffffc00
  1416c8:	e5021420 	str	r1, [r2, #-1056]	; 0xfffffbe0
  1416cc:	1affffef 	bne	141690 <twoway_strstr+0x50>
  1416d0:	e3a00001 	mov	r0, #1
  1416d4:	e3e0c000 	mvn	ip, #0
  1416d8:	e1a01000 	mov	r1, r0
  1416dc:	e0832001 	add	r2, r3, r1
  1416e0:	e1550002 	cmp	r5, r2
  1416e4:	e088e00c 	add	lr, r8, ip
  1416e8:	9a00000b 	bls	14171c <twoway_strstr+0xdc>
  1416ec:	e7de4001 	ldrb	r4, [lr, r1]
  1416f0:	e7d8e002 	ldrb	lr, [r8, r2]
  1416f4:	e154000e 	cmp	r4, lr
  1416f8:	0a00008f 	beq	14193c <twoway_strstr+0x2fc>
  1416fc:	9a000096 	bls	14195c <twoway_strstr+0x31c>
  141700:	e042000c 	sub	r0, r2, ip
  141704:	e1a03002 	mov	r3, r2
  141708:	e3a01001 	mov	r1, #1
  14170c:	e0832001 	add	r2, r3, r1
  141710:	e1550002 	cmp	r5, r2
  141714:	e088e00c 	add	lr, r8, ip
  141718:	8afffff3 	bhi	1416ec <twoway_strstr+0xac>
  14171c:	e3a06001 	mov	r6, #1
  141720:	e3a01000 	mov	r1, #0
  141724:	e1a02006 	mov	r2, r6
  141728:	e3e0a000 	mvn	sl, #0
  14172c:	e0813002 	add	r3, r1, r2
  141730:	e1550003 	cmp	r5, r3
  141734:	e088e002 	add	lr, r8, r2
  141738:	9a00000b 	bls	14176c <twoway_strstr+0x12c>
  14173c:	e7de400a 	ldrb	r4, [lr, sl]
  141740:	e7d8e003 	ldrb	lr, [r8, r3]
  141744:	e154000e 	cmp	r4, lr
  141748:	0a00007f 	beq	14194c <twoway_strstr+0x30c>
  14174c:	2a000087 	bcs	141970 <twoway_strstr+0x330>
  141750:	e043600a 	sub	r6, r3, sl
  141754:	e3a02001 	mov	r2, #1
  141758:	e1a01003 	mov	r1, r3
  14175c:	e0813002 	add	r3, r1, r2
  141760:	e1550003 	cmp	r5, r3
  141764:	e088e002 	add	lr, r8, r2
  141768:	8afffff3 	bhi	14173c <twoway_strstr+0xfc>
  14176c:	e58d6008 	str	r6, [sp, #8]
  141770:	e28a2001 	add	r2, sl, #1
  141774:	e28c3001 	add	r3, ip, #1
  141778:	e1520003 	cmp	r2, r3
  14177c:	91a0b003 	movls	fp, r3
  141780:	81a0b002 	movhi	fp, r2
  141784:	e59d3008 	ldr	r3, [sp, #8]
  141788:	91a03000 	movls	r3, r0
  14178c:	e1a0200b 	mov	r2, fp
  141790:	e0881003 	add	r1, r8, r3
  141794:	e1a00008 	mov	r0, r8
  141798:	91a0a00c 	movls	sl, ip
  14179c:	e58d3008 	str	r3, [sp, #8]
  1417a0:	ebfffe3c 	bl	141098 <memcmp>
  1417a4:	e3500000 	cmp	r0, #0
  1417a8:	0a000075 	beq	141984 <twoway_strstr+0x344>
  1417ac:	e2452001 	sub	r2, r5, #1
  1417b0:	e042200a 	sub	r2, r2, sl
  1417b4:	e152000a 	cmp	r2, sl
  1417b8:	e3a03000 	mov	r3, #0
  1417bc:	31a0200a 	movcc	r2, sl
  1417c0:	e58d300c 	str	r3, [sp, #12]
  1417c4:	e2823001 	add	r3, r2, #1
  1417c8:	e58d3008 	str	r3, [sp, #8]
  1417cc:	e1a04009 	mov	r4, r9
  1417d0:	e3a06000 	mov	r6, #0
  1417d4:	e3a07001 	mov	r7, #1
  1417d8:	e385303f 	orr	r3, r5, #63	; 0x3f
  1417dc:	e58d3004 	str	r3, [sp, #4]
  1417e0:	e0493004 	sub	r3, r9, r4
  1417e4:	e1530005 	cmp	r3, r5
  1417e8:	3a000014 	bcc	141840 <twoway_strstr+0x200>
  1417ec:	e0841005 	add	r1, r4, r5
  1417f0:	e5513001 	ldrb	r3, [r1, #-1]
  1417f4:	e28d0e43 	add	r0, sp, #1072	; 0x430
  1417f8:	e1a022a3 	lsr	r2, r3, #5
  1417fc:	e0802102 	add	r2, r0, r2, lsl #2
  141800:	e5122420 	ldr	r2, [r2, #-1056]	; 0xfffffbe0
  141804:	e203001f 	and	r0, r3, #31
  141808:	e0122017 	ands	r2, r2, r7, lsl r0
  14180c:	0a000040 	beq	141914 <twoway_strstr+0x2d4>
  141810:	e28d2e43 	add	r2, sp, #1072	; 0x430
  141814:	e0823103 	add	r3, r2, r3, lsl #2
  141818:	e5133400 	ldr	r3, [r3, #-1024]	; 0xfffffc00
  14181c:	e0553003 	subs	r3, r5, r3
  141820:	0a000015 	beq	14187c <twoway_strstr+0x23c>
  141824:	e1560003 	cmp	r6, r3
  141828:	20844006 	addcs	r4, r4, r6
  14182c:	30844003 	addcc	r4, r4, r3
  141830:	e0493004 	sub	r3, r9, r4
  141834:	e1530005 	cmp	r3, r5
  141838:	e3a06000 	mov	r6, #0
  14183c:	2affffea 	bcs	1417ec <twoway_strstr+0x1ac>
  141840:	e59d2004 	ldr	r2, [sp, #4]
  141844:	e3a01000 	mov	r1, #0
  141848:	e1a00009 	mov	r0, r9
  14184c:	eb00094c 	bl	143d84 <memchr>
  141850:	e3500000 	cmp	r0, #0
  141854:	0a000035 	beq	141930 <twoway_strstr+0x2f0>
  141858:	e0403004 	sub	r3, r0, r4
  14185c:	e1530005 	cmp	r3, r5
  141860:	21a09000 	movcs	r9, r0
  141864:	2affffe0 	bcs	1417ec <twoway_strstr+0x1ac>
  141868:	e3a04000 	mov	r4, #0
  14186c:	e1a00004 	mov	r0, r4
  141870:	e28dde43 	add	sp, sp, #1072	; 0x430
  141874:	e28dd004 	add	sp, sp, #4
  141878:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  14187c:	e156000b 	cmp	r6, fp
  141880:	21a03006 	movcs	r3, r6
  141884:	31a0300b 	movcc	r3, fp
  141888:	e7d82003 	ldrb	r2, [r8, r3]
  14188c:	e0881003 	add	r1, r8, r3
  141890:	e3520000 	cmp	r2, #0
  141894:	0a00000b 	beq	1418c8 <twoway_strstr+0x288>
  141898:	e7d4c003 	ldrb	ip, [r4, r3]
  14189c:	e0840003 	add	r0, r4, r3
  1418a0:	e15c0002 	cmp	ip, r2
  1418a4:	0a000003 	beq	1418b8 <twoway_strstr+0x278>
  1418a8:	ea00001c 	b	141920 <twoway_strstr+0x2e0>
  1418ac:	e5f0c001 	ldrb	ip, [r0, #1]!
  1418b0:	e15c0002 	cmp	ip, r2
  1418b4:	1a000019 	bne	141920 <twoway_strstr+0x2e0>
  1418b8:	e5f12001 	ldrb	r2, [r1, #1]!
  1418bc:	e2833001 	add	r3, r3, #1
  1418c0:	e3520000 	cmp	r2, #0
  1418c4:	1afffff8 	bne	1418ac <twoway_strstr+0x26c>
  1418c8:	e156000b 	cmp	r6, fp
  1418cc:	2affffe6 	bcs	14186c <twoway_strstr+0x22c>
  1418d0:	e7d8300a 	ldrb	r3, [r8, sl]
  1418d4:	e7d4100a 	ldrb	r1, [r4, sl]
  1418d8:	e088200a 	add	r2, r8, sl
  1418dc:	e1510003 	cmp	r1, r3
  1418e0:	e084300a 	add	r3, r4, sl
  1418e4:	1a000006 	bne	141904 <twoway_strstr+0x2c4>
  1418e8:	e0431004 	sub	r1, r3, r4
  1418ec:	e1560001 	cmp	r6, r1
  1418f0:	2affffdd 	bcs	14186c <twoway_strstr+0x22c>
  1418f4:	e5720001 	ldrb	r0, [r2, #-1]!
  1418f8:	e5731001 	ldrb	r1, [r3, #-1]!
  1418fc:	e1500001 	cmp	r0, r1
  141900:	0afffff8 	beq	1418e8 <twoway_strstr+0x2a8>
  141904:	e59d3008 	ldr	r3, [sp, #8]
  141908:	e59d600c 	ldr	r6, [sp, #12]
  14190c:	e0844003 	add	r4, r4, r3
  141910:	eaffffb2 	b	1417e0 <twoway_strstr+0x1a0>
  141914:	e1a04001 	mov	r4, r1
  141918:	e1a06002 	mov	r6, r2
  14191c:	eaffffaf 	b	1417e0 <twoway_strstr+0x1a0>
  141920:	e043300a 	sub	r3, r3, sl
  141924:	e0844003 	add	r4, r4, r3
  141928:	e3a06000 	mov	r6, #0
  14192c:	eaffffab 	b	1417e0 <twoway_strstr+0x1a0>
  141930:	e59d3004 	ldr	r3, [sp, #4]
  141934:	e0899003 	add	r9, r9, r3
  141938:	eaffffab 	b	1417ec <twoway_strstr+0x1ac>
  14193c:	e1510000 	cmp	r1, r0
  141940:	12811001 	addne	r1, r1, #1
  141944:	1affff64 	bne	1416dc <twoway_strstr+0x9c>
  141948:	eaffff6d 	b	141704 <twoway_strstr+0xc4>
  14194c:	e1520006 	cmp	r2, r6
  141950:	12822001 	addne	r2, r2, #1
  141954:	1affff74 	bne	14172c <twoway_strstr+0xec>
  141958:	eaffff7d 	b	141754 <twoway_strstr+0x114>
  14195c:	e3a00001 	mov	r0, #1
  141960:	e1a0c003 	mov	ip, r3
  141964:	e1a01000 	mov	r1, r0
  141968:	e0833000 	add	r3, r3, r0
  14196c:	eaffff5a 	b	1416dc <twoway_strstr+0x9c>
  141970:	e3a06001 	mov	r6, #1
  141974:	e1a0a001 	mov	sl, r1
  141978:	e1a02006 	mov	r2, r6
  14197c:	e0811006 	add	r1, r1, r6
  141980:	eaffff69 	b	14172c <twoway_strstr+0xec>
  141984:	e59d3008 	ldr	r3, [sp, #8]
  141988:	e0453003 	sub	r3, r5, r3
  14198c:	e58d300c 	str	r3, [sp, #12]
  141990:	eaffff8d 	b	1417cc <twoway_strstr+0x18c>
  141994:	e3e0c000 	mvn	ip, #0
  141998:	e3a00001 	mov	r0, #1
  14199c:	e1a05003 	mov	r5, r3
  1419a0:	e1a0a00c 	mov	sl, ip
  1419a4:	e58d0008 	str	r0, [sp, #8]
  1419a8:	eaffff70 	b	141770 <twoway_strstr+0x130>

001419ac <strstr>:
  1419ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1419b0:	e1a04001 	mov	r4, r1
  1419b4:	e5d11000 	ldrb	r1, [r1]
  1419b8:	e1a03000 	mov	r3, r0
  1419bc:	e3510000 	cmp	r1, #0
  1419c0:	1a000001 	bne	1419cc <strstr+0x20>
  1419c4:	e1a00003 	mov	r0, r3
  1419c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1419cc:	eb0009c5 	bl	1440e8 <strchr>
  1419d0:	e2503000 	subs	r3, r0, #0
  1419d4:	0afffffa 	beq	1419c4 <strstr+0x18>
  1419d8:	e5d41001 	ldrb	r1, [r4, #1]
  1419dc:	e3510000 	cmp	r1, #0
  1419e0:	0afffff7 	beq	1419c4 <strstr+0x18>
  1419e4:	e5d3c001 	ldrb	ip, [r3, #1]
  1419e8:	e35c0000 	cmp	ip, #0
  1419ec:	0a000051 	beq	141b38 <strstr+0x18c>
  1419f0:	e5d4e002 	ldrb	lr, [r4, #2]
  1419f4:	e35e0000 	cmp	lr, #0
  1419f8:	0a000029 	beq	141aa4 <strstr+0xf8>
  1419fc:	e5d35002 	ldrb	r5, [r3, #2]
  141a00:	e3550000 	cmp	r5, #0
  141a04:	0a00004d 	beq	141b40 <strstr+0x194>
  141a08:	e5d47003 	ldrb	r7, [r4, #3]
  141a0c:	e3570000 	cmp	r7, #0
  141a10:	0a000032 	beq	141ae0 <strstr+0x134>
  141a14:	e5d36003 	ldrb	r6, [r3, #3]
  141a18:	e3560000 	cmp	r6, #0
  141a1c:	0a000049 	beq	141b48 <strstr+0x19c>
  141a20:	e5d42004 	ldrb	r2, [r4, #4]
  141a24:	e3520000 	cmp	r2, #0
  141a28:	0a000002 	beq	141a38 <strstr+0x8c>
  141a2c:	e1a01004 	mov	r1, r4
  141a30:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  141a34:	eaffff01 	b	141640 <twoway_strstr>
  141a38:	e5d40000 	ldrb	r0, [r4]
  141a3c:	e4d32003 	ldrb	r2, [r3], #3
  141a40:	e1800401 	orr	r0, r0, r1, lsl #8
  141a44:	e182240c 	orr	r2, r2, ip, lsl #8
  141a48:	e180080e 	orr	r0, r0, lr, lsl #16
  141a4c:	e1822805 	orr	r2, r2, r5, lsl #16
  141a50:	e180ec07 	orr	lr, r0, r7, lsl #24
  141a54:	e1825c06 	orr	r5, r2, r6, lsl #24
  141a58:	e0252865 	eor	r2, r5, r5, ror #16
  141a5c:	e02e086e 	eor	r0, lr, lr, ror #16
  141a60:	e1a02422 	lsr	r2, r2, #8
  141a64:	e1a00420 	lsr	r0, r0, #8
  141a68:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
  141a6c:	e3c00cff 	bic	r0, r0, #65280	; 0xff00
  141a70:	e0222465 	eor	r2, r2, r5, ror #8
  141a74:	e020046e 	eor	r0, r0, lr, ror #8
  141a78:	e1520000 	cmp	r2, r0
  141a7c:	1a000002 	bne	141a8c <strstr+0xe0>
  141a80:	ea000028 	b	141b28 <strstr+0x17c>
  141a84:	e1500002 	cmp	r0, r2
  141a88:	0a000026 	beq	141b28 <strstr+0x17c>
  141a8c:	e5f31001 	ldrb	r1, [r3, #1]!
  141a90:	e3510000 	cmp	r1, #0
  141a94:	e1812402 	orr	r2, r1, r2, lsl #8
  141a98:	1afffff9 	bne	141a84 <strstr+0xd8>
  141a9c:	e1a03001 	mov	r3, r1
  141aa0:	eaffffc7 	b	1419c4 <strstr+0x18>
  141aa4:	e5d40000 	ldrb	r0, [r4]
  141aa8:	e4d32001 	ldrb	r2, [r3], #1
  141aac:	e1811400 	orr	r1, r1, r0, lsl #8
  141ab0:	e18c2402 	orr	r2, ip, r2, lsl #8
  141ab4:	ea000005 	b	141ad0 <strstr+0x124>
  141ab8:	e5f30001 	ldrb	r0, [r3, #1]!
  141abc:	e1802402 	orr	r2, r0, r2, lsl #8
  141ac0:	e1a02802 	lsl	r2, r2, #16
  141ac4:	e3500000 	cmp	r0, #0
  141ac8:	e1a02822 	lsr	r2, r2, #16
  141acc:	0a000017 	beq	141b30 <strstr+0x184>
  141ad0:	e1510002 	cmp	r1, r2
  141ad4:	1afffff7 	bne	141ab8 <strstr+0x10c>
  141ad8:	e2433001 	sub	r3, r3, #1
  141adc:	eaffffb8 	b	1419c4 <strstr+0x18>
  141ae0:	e5d46000 	ldrb	r6, [r4]
  141ae4:	e4d34002 	ldrb	r4, [r3], #2
  141ae8:	e1a00801 	lsl	r0, r1, #16
  141aec:	e1a0280c 	lsl	r2, ip, #16
  141af0:	e1800c06 	orr	r0, r0, r6, lsl #24
  141af4:	e1822c04 	orr	r2, r2, r4, lsl #24
  141af8:	e180040e 	orr	r0, r0, lr, lsl #8
  141afc:	e1822405 	orr	r2, r2, r5, lsl #8
  141b00:	ea000004 	b	141b18 <strstr+0x16c>
  141b04:	e5f31001 	ldrb	r1, [r3, #1]!
  141b08:	e1812002 	orr	r2, r1, r2
  141b0c:	e3510000 	cmp	r1, #0
  141b10:	e1a02402 	lsl	r2, r2, #8
  141b14:	0affffe0 	beq	141a9c <strstr+0xf0>
  141b18:	e1500002 	cmp	r0, r2
  141b1c:	1afffff8 	bne	141b04 <strstr+0x158>
  141b20:	e2433002 	sub	r3, r3, #2
  141b24:	eaffffa6 	b	1419c4 <strstr+0x18>
  141b28:	e2433003 	sub	r3, r3, #3
  141b2c:	eaffffa4 	b	1419c4 <strstr+0x18>
  141b30:	e1a03000 	mov	r3, r0
  141b34:	eaffffa2 	b	1419c4 <strstr+0x18>
  141b38:	e1a0300c 	mov	r3, ip
  141b3c:	eaffffa0 	b	1419c4 <strstr+0x18>
  141b40:	e1a03005 	mov	r3, r5
  141b44:	eaffff9e 	b	1419c4 <strstr+0x18>
  141b48:	e1a03006 	mov	r3, r6
  141b4c:	eaffff9c 	b	1419c4 <strstr+0x18>

00141b50 <__lock>:
  141b50:	e59f3150 	ldr	r3, [pc, #336]	; 141ca8 <__lock+0x158>
  141b54:	e593300c 	ldr	r3, [r3, #12]
  141b58:	e3530000 	cmp	r3, #0
  141b5c:	012fff1e 	bxeq	lr
  141b60:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141b64:	e1a04000 	mov	r4, r0
  141b68:	e59f613c 	ldr	r6, [pc, #316]	; 141cac <__lock+0x15c>
  141b6c:	e3a00000 	mov	r0, #0
  141b70:	e3a01106 	mov	r1, #-2147483647	; 0x80000001
  141b74:	e1a02004 	mov	r2, r4
  141b78:	e5963000 	ldr	r3, [r6]
  141b7c:	e12fff33 	blx	r3
  141b80:	e3500000 	cmp	r0, #0
  141b84:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141b88:	e5945000 	ldr	r5, [r4]
  141b8c:	e3550000 	cmp	r5, #0
  141b90:	0afffff5 	beq	141b6c <__lock+0x1c>
  141b94:	e3a0800a 	mov	r8, #10
  141b98:	e3550000 	cmp	r5, #0
  141b9c:	b2455106 	sublt	r5, r5, #-2147483647	; 0x80000001
  141ba0:	e2857106 	add	r7, r5, #-2147483647	; 0x80000001
  141ba4:	e1a00005 	mov	r0, r5
  141ba8:	e1a01007 	mov	r1, r7
  141bac:	e1a02004 	mov	r2, r4
  141bb0:	e5963000 	ldr	r3, [r6]
  141bb4:	e12fff33 	blx	r3
  141bb8:	e3500000 	cmp	r0, #0
  141bbc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141bc0:	e5943000 	ldr	r3, [r4]
  141bc4:	e1550003 	cmp	r5, r3
  141bc8:	0afffff5 	beq	141ba4 <__lock+0x54>
  141bcc:	e2588001 	subs	r8, r8, #1
  141bd0:	e1a05003 	mov	r5, r3
  141bd4:	1affffef 	bne	141b98 <__lock+0x48>
  141bd8:	e5947000 	ldr	r7, [r4]
  141bdc:	e2875001 	add	r5, r7, #1
  141be0:	ea000002 	b	141bf0 <__lock+0xa0>
  141be4:	e5943000 	ldr	r3, [r4]
  141be8:	e1570003 	cmp	r7, r3
  141bec:	1afffff9 	bne	141bd8 <__lock+0x88>
  141bf0:	e1a00007 	mov	r0, r7
  141bf4:	e1a01005 	mov	r1, r5
  141bf8:	e1a02004 	mov	r2, r4
  141bfc:	e5963000 	ldr	r3, [r6]
  141c00:	e12fff33 	blx	r3
  141c04:	e3500000 	cmp	r0, #0
  141c08:	1afffff5 	bne	141be4 <__lock+0x94>
  141c0c:	e3550000 	cmp	r5, #0
  141c10:	ba00000d 	blt	141c4c <__lock+0xfc>
  141c14:	e2857102 	add	r7, r5, #-2147483648	; 0x80000000
  141c18:	e1a00005 	mov	r0, r5
  141c1c:	e1a01007 	mov	r1, r7
  141c20:	e1a02004 	mov	r2, r4
  141c24:	e5963000 	ldr	r3, [r6]
  141c28:	e12fff33 	blx	r3
  141c2c:	e3500000 	cmp	r0, #0
  141c30:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141c34:	e5943000 	ldr	r3, [r4]
  141c38:	e1550003 	cmp	r5, r3
  141c3c:	0afffff5 	beq	141c18 <__lock+0xc8>
  141c40:	e1a05003 	mov	r5, r3
  141c44:	e3550000 	cmp	r5, #0
  141c48:	aafffff1 	bge	141c14 <__lock+0xc4>
  141c4c:	e3a000f0 	mov	r0, #240	; 0xf0
  141c50:	ebffe9d8 	bl	13c3b8 <get_rtt_syscall>
  141c54:	e2507000 	subs	r7, r0, #0
  141c58:	0a000006 	beq	141c78 <__lock+0x128>
  141c5c:	e3a03000 	mov	r3, #0
  141c60:	e1a02005 	mov	r2, r5
  141c64:	e3a01080 	mov	r1, #128	; 0x80
  141c68:	e1a00004 	mov	r0, r4
  141c6c:	e12fff37 	blx	r7
  141c70:	e3700026 	cmn	r0, #38	; 0x26
  141c74:	0a000001 	beq	141c80 <__lock+0x130>
  141c78:	e2455106 	sub	r5, r5, #-2147483647	; 0x80000001
  141c7c:	eaffffe4 	b	141c14 <__lock+0xc4>
  141c80:	e3a000f0 	mov	r0, #240	; 0xf0
  141c84:	ebffe9cb 	bl	13c3b8 <get_rtt_syscall>
  141c88:	e2507000 	subs	r7, r0, #0
  141c8c:	0afffff9 	beq	141c78 <__lock+0x128>
  141c90:	e3a03000 	mov	r3, #0
  141c94:	e1a02005 	mov	r2, r5
  141c98:	e1a01003 	mov	r1, r3
  141c9c:	e1a00004 	mov	r0, r4
  141ca0:	e12fff37 	blx	r7
  141ca4:	eafffff3 	b	141c78 <__lock+0x128>
  141ca8:	0056f058 	.word	0x0056f058
  141cac:	0014d3d8 	.word	0x0014d3d8

00141cb0 <__unlock>:
  141cb0:	e5903000 	ldr	r3, [r0]
  141cb4:	e3530000 	cmp	r3, #0
  141cb8:	a12fff1e 	bxge	lr
  141cbc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141cc0:	e1a05000 	mov	r5, r0
  141cc4:	e59f7084 	ldr	r7, [pc, #132]	; 141d50 <__unlock+0xa0>
  141cc8:	e5954000 	ldr	r4, [r5]
  141ccc:	e2446106 	sub	r6, r4, #-2147483647	; 0x80000001
  141cd0:	ea000002 	b	141ce0 <__unlock+0x30>
  141cd4:	e5953000 	ldr	r3, [r5]
  141cd8:	e1540003 	cmp	r4, r3
  141cdc:	1afffff9 	bne	141cc8 <__unlock+0x18>
  141ce0:	e1a00004 	mov	r0, r4
  141ce4:	e1a01006 	mov	r1, r6
  141ce8:	e1a02005 	mov	r2, r5
  141cec:	e5973000 	ldr	r3, [r7]
  141cf0:	e12fff33 	blx	r3
  141cf4:	e3500000 	cmp	r0, #0
  141cf8:	1afffff5 	bne	141cd4 <__unlock+0x24>
  141cfc:	e3540106 	cmp	r4, #-2147483647	; 0x80000001
  141d00:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141d04:	e3a000f0 	mov	r0, #240	; 0xf0
  141d08:	ebffe9aa 	bl	13c3b8 <get_rtt_syscall>
  141d0c:	e2503000 	subs	r3, r0, #0
  141d10:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141d14:	e3a02001 	mov	r2, #1
  141d18:	e3a01081 	mov	r1, #129	; 0x81
  141d1c:	e1a00005 	mov	r0, r5
  141d20:	e12fff33 	blx	r3
  141d24:	e3700026 	cmn	r0, #38	; 0x26
  141d28:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  141d2c:	e3a000f0 	mov	r0, #240	; 0xf0
  141d30:	ebffe9a0 	bl	13c3b8 <get_rtt_syscall>
  141d34:	e2503000 	subs	r3, r0, #0
  141d38:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141d3c:	e3a02001 	mov	r2, #1
  141d40:	e1a00005 	mov	r0, r5
  141d44:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  141d48:	e1a01002 	mov	r1, r2
  141d4c:	e12fff13 	bx	r3
  141d50:	0014d3d8 	.word	0x0014d3d8

00141d54 <__syscall_cp_c>:
  141d54:	eaffe9c1 	b	13c460 <__syscall>

00141d58 <__syscall_cp>:
  141d58:	eaffe9c0 	b	13c460 <__syscall>

00141d5c <__wait>:
  141d5c:	e3530000 	cmp	r3, #0
  141d60:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  141d64:	e3a03064 	mov	r3, #100	; 0x64
  141d68:	e1a04001 	mov	r4, r1
  141d6c:	e1a07000 	mov	r7, r0
  141d70:	e1a08002 	mov	r8, r2
  141d74:	13a09080 	movne	r9, #128	; 0x80
  141d78:	03a09000 	moveq	r9, #0
  141d7c:	e59f1120 	ldr	r1, [pc, #288]	; 141ea4 <__wait+0x148>
  141d80:	ea000006 	b	141da0 <__wait+0x44>
  141d84:	e5972000 	ldr	r2, [r7]
  141d88:	e1520008 	cmp	r2, r8
  141d8c:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
  141d90:	e591c000 	ldr	ip, [r1]
  141d94:	e12fff3c 	blx	ip
  141d98:	e2533001 	subs	r3, r3, #1
  141d9c:	0a00003d 	beq	141e98 <__wait+0x13c>
  141da0:	e3540000 	cmp	r4, #0
  141da4:	0afffff6 	beq	141d84 <__wait+0x28>
  141da8:	e5942000 	ldr	r2, [r4]
  141dac:	e3520000 	cmp	r2, #0
  141db0:	0afffff3 	beq	141d84 <__wait+0x28>
  141db4:	e59f60ec 	ldr	r6, [pc, #236]	; 141ea8 <__wait+0x14c>
  141db8:	e5945000 	ldr	r5, [r4]
  141dbc:	e285a001 	add	sl, r5, #1
  141dc0:	ea000002 	b	141dd0 <__wait+0x74>
  141dc4:	e5943000 	ldr	r3, [r4]
  141dc8:	e1550003 	cmp	r5, r3
  141dcc:	1afffff9 	bne	141db8 <__wait+0x5c>
  141dd0:	e1a00005 	mov	r0, r5
  141dd4:	e1a0100a 	mov	r1, sl
  141dd8:	e1a02004 	mov	r2, r4
  141ddc:	e5963000 	ldr	r3, [r6]
  141de0:	e12fff33 	blx	r3
  141de4:	e3500000 	cmp	r0, #0
  141de8:	1afffff5 	bne	141dc4 <__wait+0x68>
  141dec:	e5973000 	ldr	r3, [r7]
  141df0:	e1530008 	cmp	r3, r8
  141df4:	1a000006 	bne	141e14 <__wait+0xb8>
  141df8:	e3a000f0 	mov	r0, #240	; 0xf0
  141dfc:	ebffe96d 	bl	13c3b8 <get_rtt_syscall>
  141e00:	e2505000 	subs	r5, r0, #0
  141e04:	1a000012 	bne	141e54 <__wait+0xf8>
  141e08:	e5973000 	ldr	r3, [r7]
  141e0c:	e1530008 	cmp	r3, r8
  141e10:	0afffff8 	beq	141df8 <__wait+0x9c>
  141e14:	e3540000 	cmp	r4, #0
  141e18:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  141e1c:	e59f6084 	ldr	r6, [pc, #132]	; 141ea8 <__wait+0x14c>
  141e20:	e5945000 	ldr	r5, [r4]
  141e24:	e2457001 	sub	r7, r5, #1
  141e28:	e1a00005 	mov	r0, r5
  141e2c:	e1a01007 	mov	r1, r7
  141e30:	e1a02004 	mov	r2, r4
  141e34:	e5963000 	ldr	r3, [r6]
  141e38:	e12fff33 	blx	r3
  141e3c:	e3500000 	cmp	r0, #0
  141e40:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  141e44:	e5943000 	ldr	r3, [r4]
  141e48:	e1550003 	cmp	r5, r3
  141e4c:	0afffff5 	beq	141e28 <__wait+0xcc>
  141e50:	eafffff2 	b	141e20 <__wait+0xc4>
  141e54:	e3a03000 	mov	r3, #0
  141e58:	e1a02008 	mov	r2, r8
  141e5c:	e1a01009 	mov	r1, r9
  141e60:	e1a00007 	mov	r0, r7
  141e64:	e12fff35 	blx	r5
  141e68:	e3700026 	cmn	r0, #38	; 0x26
  141e6c:	1affffe5 	bne	141e08 <__wait+0xac>
  141e70:	e3a000f0 	mov	r0, #240	; 0xf0
  141e74:	ebffe94f 	bl	13c3b8 <get_rtt_syscall>
  141e78:	e2505000 	subs	r5, r0, #0
  141e7c:	0affffe1 	beq	141e08 <__wait+0xac>
  141e80:	e3a03000 	mov	r3, #0
  141e84:	e1a02008 	mov	r2, r8
  141e88:	e1a01003 	mov	r1, r3
  141e8c:	e1a00007 	mov	r0, r7
  141e90:	e12fff35 	blx	r5
  141e94:	eaffffdb 	b	141e08 <__wait+0xac>
  141e98:	e3540000 	cmp	r4, #0
  141e9c:	0affffd9 	beq	141e08 <__wait+0xac>
  141ea0:	eaffffc3 	b	141db4 <__wait+0x58>
  141ea4:	0014d3d4 	.word	0x0014d3d4
  141ea8:	0014d3d8 	.word	0x0014d3d8

00141eac <__a_barrier_dummy>:
  141eac:	e12fff1e 	bx	lr

00141eb0 <__a_barrier_oldkuser>:
  141eb0:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
  141eb4:	e1a01000 	mov	r1, r0
  141eb8:	e1a0200d 	mov	r2, sp
  141ebc:	e59fc080 	ldr	ip, [pc, #128]	; 141f44 <__a_gettp_cp15+0x8>
  141ec0:	e1a0e00f 	mov	lr, pc
  141ec4:	e1a0f00c 	mov	pc, ip
  141ec8:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
  141ecc:	e12fff1e 	bx	lr

00141ed0 <__a_barrier_v6>:
  141ed0:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141ed4:	e12fff1e 	bx	lr

00141ed8 <__a_barrier_v7>:
  141ed8:	f57ff05b 	dmb	ish
  141edc:	e12fff1e 	bx	lr

00141ee0 <__a_cas_dummy>:
  141ee0:	e1a03000 	mov	r3, r0
  141ee4:	e5920000 	ldr	r0, [r2]
  141ee8:	e0530000 	subs	r0, r3, r0
  141eec:	05821000 	streq	r1, [r2]
  141ef0:	e12fff1e 	bx	lr

00141ef4 <__a_cas_v6>:
  141ef4:	e1a03000 	mov	r3, r0
  141ef8:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141efc:	e1920f9f 	ldrex	r0, [r2]
  141f00:	e0530000 	subs	r0, r3, r0
  141f04:	01820f91 	strexeq	r0, r1, [r2]
  141f08:	03300001 	teqeq	r0, #1
  141f0c:	0afffffa 	beq	141efc <__a_cas_v6+0x8>
  141f10:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141f14:	e12fff1e 	bx	lr

00141f18 <__a_cas_v7>:
  141f18:	e1a03000 	mov	r3, r0
  141f1c:	f57ff05b 	dmb	ish
  141f20:	e1920f9f 	ldrex	r0, [r2]
  141f24:	e0530000 	subs	r0, r3, r0
  141f28:	01820f91 	strexeq	r0, r1, [r2]
  141f2c:	03300001 	teqeq	r0, #1
  141f30:	0afffffa 	beq	141f20 <__a_cas_v7+0x8>
  141f34:	f57ff05b 	dmb	ish
  141f38:	e12fff1e 	bx	lr

00141f3c <__a_gettp_cp15>:
  141f3c:	ee1d0f70 	mrc	15, 0, r0, cr13, cr0, {3}
  141f40:	e12fff1e 	bx	lr
  141f44:	ffff0fc0 	.word	0xffff0fc0

00141f48 <__wake.constprop.2>:
  141f48:	e92d4070 	push	{r4, r5, r6, lr}
  141f4c:	e3510000 	cmp	r1, #0
  141f50:	e1a04000 	mov	r4, r0
  141f54:	e3a000f0 	mov	r0, #240	; 0xf0
  141f58:	03a05001 	moveq	r5, #1
  141f5c:	13a05081 	movne	r5, #129	; 0x81
  141f60:	ebffe914 	bl	13c3b8 <get_rtt_syscall>
  141f64:	e2503000 	subs	r3, r0, #0
  141f68:	08bd8070 	popeq	{r4, r5, r6, pc}
  141f6c:	e1a01005 	mov	r1, r5
  141f70:	e3a02001 	mov	r2, #1
  141f74:	e1a00004 	mov	r0, r4
  141f78:	e12fff33 	blx	r3
  141f7c:	e3700026 	cmn	r0, #38	; 0x26
  141f80:	18bd8070 	popne	{r4, r5, r6, pc}
  141f84:	e3a000f0 	mov	r0, #240	; 0xf0
  141f88:	ebffe90a 	bl	13c3b8 <get_rtt_syscall>
  141f8c:	e2503000 	subs	r3, r0, #0
  141f90:	08bd8070 	popeq	{r4, r5, r6, pc}
  141f94:	e3a02001 	mov	r2, #1
  141f98:	e1a00004 	mov	r0, r4
  141f9c:	e8bd4070 	pop	{r4, r5, r6, lr}
  141fa0:	e1a01002 	mov	r1, r2
  141fa4:	e12fff13 	bx	r3

00141fa8 <__acquire_ptc>:
  141fa8:	e12fff1e 	bx	lr

00141fac <__tl_lock>:
  141fac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141fb0:	e59f3070 	ldr	r3, [pc, #112]	; 142028 <__tl_lock+0x7c>
  141fb4:	e59f4070 	ldr	r4, [pc, #112]	; 14202c <__tl_lock+0x80>
  141fb8:	e5930000 	ldr	r0, [r3]
  141fbc:	e5943000 	ldr	r3, [r4]
  141fc0:	e12fff30 	blx	r0
  141fc4:	e510505c 	ldr	r5, [r0, #-92]	; 0xffffffa4
  141fc8:	e1550003 	cmp	r5, r3
  141fcc:	0a000010 	beq	142014 <__tl_lock+0x68>
  141fd0:	e59f6058 	ldr	r6, [pc, #88]	; 142030 <__tl_lock+0x84>
  141fd4:	e59f7058 	ldr	r7, [pc, #88]	; 142034 <__tl_lock+0x88>
  141fd8:	e3a00000 	mov	r0, #0
  141fdc:	e1a01005 	mov	r1, r5
  141fe0:	e1a02004 	mov	r2, r4
  141fe4:	e5963000 	ldr	r3, [r6]
  141fe8:	e12fff33 	blx	r3
  141fec:	e3500000 	cmp	r0, #0
  141ff0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141ff4:	e5942000 	ldr	r2, [r4]
  141ff8:	e3520000 	cmp	r2, #0
  141ffc:	0afffff5 	beq	141fd8 <__tl_lock+0x2c>
  142000:	e3a03000 	mov	r3, #0
  142004:	e1a01007 	mov	r1, r7
  142008:	e1a00004 	mov	r0, r4
  14200c:	ebffff52 	bl	141d5c <__wait>
  142010:	eafffff0 	b	141fd8 <__tl_lock+0x2c>
  142014:	e59f201c 	ldr	r2, [pc, #28]	; 142038 <__tl_lock+0x8c>
  142018:	e5923000 	ldr	r3, [r2]
  14201c:	e2833001 	add	r3, r3, #1
  142020:	e5823000 	str	r3, [r2]
  142024:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  142028:	0014d3dc 	.word	0x0014d3dc
  14202c:	0056f0a0 	.word	0x0056f0a0
  142030:	0014d3d8 	.word	0x0014d3d8
  142034:	0014f484 	.word	0x0014f484
  142038:	0014f480 	.word	0x0014f480

0014203c <__tl_unlock>:
  14203c:	e59f2090 	ldr	r2, [pc, #144]	; 1420d4 <__tl_unlock+0x98>
  142040:	e5923000 	ldr	r3, [r2]
  142044:	e3530000 	cmp	r3, #0
  142048:	1a00001e 	bne	1420c8 <__tl_unlock+0x8c>
  14204c:	e59f2084 	ldr	r2, [pc, #132]	; 1420d8 <__tl_unlock+0x9c>
  142050:	e92d4010 	push	{r4, lr}
  142054:	e592c000 	ldr	ip, [r2]
  142058:	e12fff3c 	blx	ip
  14205c:	e59f4078 	ldr	r4, [pc, #120]	; 1420dc <__tl_unlock+0xa0>
  142060:	e592c000 	ldr	ip, [r2]
  142064:	e5843000 	str	r3, [r4]
  142068:	e12fff3c 	blx	ip
  14206c:	e59f306c 	ldr	r3, [pc, #108]	; 1420e0 <__tl_unlock+0xa4>
  142070:	e5933000 	ldr	r3, [r3]
  142074:	e3530000 	cmp	r3, #0
  142078:	08bd8010 	popeq	{r4, pc}
  14207c:	e3a000f0 	mov	r0, #240	; 0xf0
  142080:	ebffe8cc 	bl	13c3b8 <get_rtt_syscall>
  142084:	e2503000 	subs	r3, r0, #0
  142088:	08bd8010 	popeq	{r4, pc}
  14208c:	e3a02001 	mov	r2, #1
  142090:	e1a00004 	mov	r0, r4
  142094:	e1a01002 	mov	r1, r2
  142098:	e12fff33 	blx	r3
  14209c:	e3700026 	cmn	r0, #38	; 0x26
  1420a0:	18bd8010 	popne	{r4, pc}
  1420a4:	e3a000f0 	mov	r0, #240	; 0xf0
  1420a8:	ebffe8c2 	bl	13c3b8 <get_rtt_syscall>
  1420ac:	e2503000 	subs	r3, r0, #0
  1420b0:	08bd8010 	popeq	{r4, pc}
  1420b4:	e3a02001 	mov	r2, #1
  1420b8:	e1a00004 	mov	r0, r4
  1420bc:	e8bd4010 	pop	{r4, lr}
  1420c0:	e1a01002 	mov	r1, r2
  1420c4:	e12fff13 	bx	r3
  1420c8:	e2433001 	sub	r3, r3, #1
  1420cc:	e5823000 	str	r3, [r2]
  1420d0:	e12fff1e 	bx	lr
  1420d4:	0014f480 	.word	0x0014f480
  1420d8:	0014d3d4 	.word	0x0014d3d4
  1420dc:	0056f0a0 	.word	0x0056f0a0
  1420e0:	0014f484 	.word	0x0014f484

001420e4 <__tl_sync>:
  1420e4:	e59f3084 	ldr	r3, [pc, #132]	; 142170 <__tl_sync+0x8c>
  1420e8:	e92d4070 	push	{r4, r5, r6, lr}
  1420ec:	e593c000 	ldr	ip, [r3]
  1420f0:	e12fff3c 	blx	ip
  1420f4:	e59f4078 	ldr	r4, [pc, #120]	; 142174 <__tl_sync+0x90>
  1420f8:	e5942000 	ldr	r2, [r4]
  1420fc:	e3520000 	cmp	r2, #0
  142100:	08bd8070 	popeq	{r4, r5, r6, pc}
  142104:	e59f506c 	ldr	r5, [pc, #108]	; 142178 <__tl_sync+0x94>
  142108:	e3a03000 	mov	r3, #0
  14210c:	e1a01005 	mov	r1, r5
  142110:	e1a00004 	mov	r0, r4
  142114:	ebffff10 	bl	141d5c <__wait>
  142118:	e5953000 	ldr	r3, [r5]
  14211c:	e3530000 	cmp	r3, #0
  142120:	08bd8070 	popeq	{r4, r5, r6, pc}
  142124:	e3a000f0 	mov	r0, #240	; 0xf0
  142128:	ebffe8a2 	bl	13c3b8 <get_rtt_syscall>
  14212c:	e2503000 	subs	r3, r0, #0
  142130:	08bd8070 	popeq	{r4, r5, r6, pc}
  142134:	e3a02001 	mov	r2, #1
  142138:	e1a00004 	mov	r0, r4
  14213c:	e1a01002 	mov	r1, r2
  142140:	e12fff33 	blx	r3
  142144:	e3700026 	cmn	r0, #38	; 0x26
  142148:	18bd8070 	popne	{r4, r5, r6, pc}
  14214c:	e3a000f0 	mov	r0, #240	; 0xf0
  142150:	ebffe898 	bl	13c3b8 <get_rtt_syscall>
  142154:	e2503000 	subs	r3, r0, #0
  142158:	08bd8070 	popeq	{r4, r5, r6, pc}
  14215c:	e3a02001 	mov	r2, #1
  142160:	e1a00004 	mov	r0, r4
  142164:	e8bd4070 	pop	{r4, r5, r6, lr}
  142168:	e1a01002 	mov	r1, r2
  14216c:	e12fff13 	bx	r3
  142170:	0014d3d4 	.word	0x0014d3d4
  142174:	0056f0a0 	.word	0x0056f0a0
  142178:	0014f484 	.word	0x0014f484

0014217c <__pthread_exit>:
  14217c:	e3a02000 	mov	r2, #0
  142180:	e1a0c000 	mov	ip, r0
  142184:	e3a01001 	mov	r1, #1
  142188:	e59f3224 	ldr	r3, [pc, #548]	; 1423b4 <__pthread_exit+0x238>
  14218c:	e92d4880 	push	{r7, fp, lr}
  142190:	e5930000 	ldr	r0, [r3]
  142194:	e12fff30 	blx	r0
  142198:	e2404078 	sub	r4, r0, #120	; 0x78
  14219c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  1421a0:	e5c4102c 	strb	r1, [r4, #44]	; 0x2c
  1421a4:	e1530002 	cmp	r3, r2
  1421a8:	e24dd08c 	sub	sp, sp, #140	; 0x8c
  1421ac:	e584c044 	str	ip, [r4, #68]	; 0x44
  1421b0:	e5c4202d 	strb	r2, [r4, #45]	; 0x2d
  1421b4:	0a000006 	beq	1421d4 <__pthread_exit+0x58>
  1421b8:	e9930005 	ldmib	r3, {r0, r2}
  1421bc:	e5933000 	ldr	r3, [r3]
  1421c0:	e5842048 	str	r2, [r4, #72]	; 0x48
  1421c4:	e12fff33 	blx	r3
  1421c8:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  1421cc:	e3530000 	cmp	r3, #0
  1421d0:	1afffff8 	bne	1421b8 <__pthread_exit+0x3c>
  1421d4:	e2849064 	add	r9, r4, #100	; 0x64
  1421d8:	ebffff72 	bl	141fa8 <__acquire_ptc>
  1421dc:	e1a00009 	mov	r0, r9
  1421e0:	ebfffe5a 	bl	141b50 <__lock>
  1421e4:	e28d0008 	add	r0, sp, #8
  1421e8:	eb0004a6 	bl	143488 <__block_app_sigs>
  1421ec:	ebffff6e 	bl	141fac <__tl_lock>
  1421f0:	e594300c 	ldr	r3, [r4, #12]
  1421f4:	e1530004 	cmp	r3, r4
  1421f8:	0a000041 	beq	142304 <__pthread_exit+0x188>
  1421fc:	e59f11b4 	ldr	r1, [pc, #436]	; 1423b8 <__pthread_exit+0x23c>
  142200:	e5940008 	ldr	r0, [r4, #8]
  142204:	e591200c 	ldr	r2, [r1, #12]
  142208:	e59f81ac 	ldr	r8, [pc, #428]	; 1423bc <__pthread_exit+0x240>
  14220c:	e2422001 	sub	r2, r2, #1
  142210:	e581200c 	str	r2, [r1, #12]
  142214:	e5830008 	str	r0, [r3, #8]
  142218:	e5942008 	ldr	r2, [r4, #8]
  14221c:	e582300c 	str	r3, [r2, #12]
  142220:	e584400c 	str	r4, [r4, #12]
  142224:	e5844008 	str	r4, [r4, #8]
  142228:	eb00028a 	bl	142c58 <__vm_lock>
  14222c:	e2843050 	add	r3, r4, #80	; 0x50
  142230:	e58d3004 	str	r3, [sp, #4]
  142234:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  142238:	e3560000 	cmp	r6, #0
  14223c:	0a000020 	beq	1422c4 <__pthread_exit+0x148>
  142240:	e59d3004 	ldr	r3, [sp, #4]
  142244:	e1560003 	cmp	r6, r3
  142248:	0a00001d 	beq	1422c4 <__pthread_exit+0x148>
  14224c:	e1a07006 	mov	r7, r6
  142250:	e516b008 	ldr	fp, [r6, #-8]
  142254:	e516a010 	ldr	sl, [r6, #-16]
  142258:	e5846058 	str	r6, [r4, #88]	; 0x58
  14225c:	e417300c 	ldr	r3, [r7], #-12
  142260:	e5843050 	str	r3, [r4, #80]	; 0x50
  142264:	e516500c 	ldr	r5, [r6, #-12]
  142268:	ea000002 	b	142278 <__pthread_exit+0xfc>
  14226c:	e516300c 	ldr	r3, [r6, #-12]
  142270:	e1550003 	cmp	r5, r3
  142274:	1afffffa 	bne	142264 <__pthread_exit+0xe8>
  142278:	e1a00005 	mov	r0, r5
  14227c:	e3a01101 	mov	r1, #1073741824	; 0x40000000
  142280:	e1a02007 	mov	r2, r7
  142284:	e5983000 	ldr	r3, [r8]
  142288:	e12fff33 	blx	r3
  14228c:	e3500000 	cmp	r0, #0
  142290:	1afffff5 	bne	14226c <__pthread_exit+0xf0>
  142294:	e29bb000 	adds	fp, fp, #0
  142298:	13a0b001 	movne	fp, #1
  14229c:	e19b3fa5 	orrs	r3, fp, r5, lsr #31
  1422a0:	e5840058 	str	r0, [r4, #88]	; 0x58
  1422a4:	0affffe2 	beq	142234 <__pthread_exit+0xb8>
  1422a8:	e1e0100a 	mvn	r1, sl
  1422ac:	e1a00007 	mov	r0, r7
  1422b0:	e2011080 	and	r1, r1, #128	; 0x80
  1422b4:	ebffff23 	bl	141f48 <__wake.constprop.2>
  1422b8:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  1422bc:	e3560000 	cmp	r6, #0
  1422c0:	1affffde 	bne	142240 <__pthread_exit+0xc4>
  1422c4:	eb000276 	bl	142ca4 <__vm_unlock>
  1422c8:	e2845024 	add	r5, r4, #36	; 0x24
  1422cc:	ebffff35 	bl	141fa8 <__acquire_ptc>
  1422d0:	ebffff34 	bl	141fa8 <__acquire_ptc>
  1422d4:	ea000002 	b	1422e4 <__pthread_exit+0x168>
  1422d8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  1422dc:	e3530001 	cmp	r3, #1
  1422e0:	1a00000e 	bne	142320 <__pthread_exit+0x1a4>
  1422e4:	e3a00001 	mov	r0, #1
  1422e8:	e3a01000 	mov	r1, #0
  1422ec:	e1a02005 	mov	r2, r5
  1422f0:	e5983000 	ldr	r3, [r8]
  1422f4:	e12fff33 	blx	r3
  1422f8:	e1500001 	cmp	r0, r1
  1422fc:	1afffff5 	bne	1422d8 <__pthread_exit+0x15c>
  142300:	ea000008 	b	142328 <__pthread_exit+0x1ac>
  142304:	ebffff4c 	bl	14203c <__tl_unlock>
  142308:	e28d0008 	add	r0, sp, #8
  14230c:	eb00046b 	bl	1434c0 <__restore_sigs>
  142310:	e1a00009 	mov	r0, r9
  142314:	ebfffe65 	bl	141cb0 <__unlock>
  142318:	e3a00000 	mov	r0, #0
  14231c:	ebffdb37 	bl	139000 <exit>
  142320:	e3530002 	cmp	r3, #2
  142324:	0a00000d 	beq	142360 <__pthread_exit+0x1e4>
  142328:	e1a00005 	mov	r0, r5
  14232c:	e3a01001 	mov	r1, #1
  142330:	ebffff04 	bl	141f48 <__wake.constprop.2>
  142334:	e3a03000 	mov	r3, #0
  142338:	e1a00009 	mov	r0, r9
  14233c:	e584301c 	str	r3, [r4, #28]
  142340:	ebfffe5a 	bl	141cb0 <__unlock>
  142344:	e3a00001 	mov	r0, #1
  142348:	ebffe81a 	bl	13c3b8 <get_rtt_syscall>
  14234c:	e2503000 	subs	r3, r0, #0
  142350:	0afffffb 	beq	142344 <__pthread_exit+0x1c8>
  142354:	e3a00000 	mov	r0, #0
  142358:	e12fff33 	blx	r3
  14235c:	eafffff8 	b	142344 <__pthread_exit+0x1c8>
  142360:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  142364:	e1530001 	cmp	r3, r1
  142368:	0affffee 	beq	142328 <__pthread_exit+0x1ac>
  14236c:	e28d0008 	add	r0, sp, #8
  142370:	eb000436 	bl	143450 <__block_all_sigs>
  142374:	e5943054 	ldr	r3, [r4, #84]	; 0x54
  142378:	e3530000 	cmp	r3, #0
  14237c:	1a000004 	bne	142394 <__pthread_exit+0x218>
  142380:	eb000225 	bl	142c1c <__vm_wait>
  142384:	e5941034 	ldr	r1, [r4, #52]	; 0x34
  142388:	e5940030 	ldr	r0, [r4, #48]	; 0x30
  14238c:	eb0007ec 	bl	144344 <__unmapself>
  142390:	eaffffe4 	b	142328 <__pthread_exit+0x1ac>
  142394:	e59f0024 	ldr	r0, [pc, #36]	; 1423c0 <__pthread_exit+0x244>
  142398:	ebffe806 	bl	13c3b8 <get_rtt_syscall>
  14239c:	e2503000 	subs	r3, r0, #0
  1423a0:	0afffff6 	beq	142380 <__pthread_exit+0x204>
  1423a4:	e3a0100c 	mov	r1, #12
  1423a8:	e3a00000 	mov	r0, #0
  1423ac:	e12fff33 	blx	r3
  1423b0:	eafffff2 	b	142380 <__pthread_exit+0x204>
  1423b4:	0014d3dc 	.word	0x0014d3dc
  1423b8:	0056f058 	.word	0x0056f058
  1423bc:	0014d3d8 	.word	0x0014d3d8
  1423c0:	00000152 	.word	0x00000152

001423c4 <start>:
  1423c4:	e5902008 	ldr	r2, [r0, #8]
  1423c8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  1423cc:	e3520000 	cmp	r2, #0
  1423d0:	e1a08000 	mov	r8, r0
  1423d4:	0a000022 	beq	142464 <start+0xa0>
  1423d8:	e59f30d8 	ldr	r3, [pc, #216]	; 1424b8 <start+0xf4>
  1423dc:	e5926014 	ldr	r6, [r2, #20]
  1423e0:	e5930000 	ldr	r0, [r3]
  1423e4:	e12fff30 	blx	r0
  1423e8:	e2409078 	sub	r9, r0, #120	; 0x78
  1423ec:	e3a0009c 	mov	r0, #156	; 0x9c
  1423f0:	e599501c 	ldr	r5, [r9, #28]
  1423f4:	e2824018 	add	r4, r2, #24
  1423f8:	ebffe7ee 	bl	13c3b8 <get_rtt_syscall>
  1423fc:	e250a000 	subs	sl, r0, #0
  142400:	0a000004 	beq	142418 <start+0x54>
  142404:	e1a02004 	mov	r2, r4
  142408:	e1a01006 	mov	r1, r6
  14240c:	e1a00005 	mov	r0, r5
  142410:	e12fff3a 	blx	sl
  142414:	e1a0a000 	mov	sl, r0
  142418:	e598500c 	ldr	r5, [r8, #12]
  14241c:	e59f7098 	ldr	r7, [pc, #152]	; 1424bc <start+0xf8>
  142420:	e26a6000 	rsb	r6, sl, #0
  142424:	e5954000 	ldr	r4, [r5]
  142428:	ea000002 	b	142438 <start+0x74>
  14242c:	e5953000 	ldr	r3, [r5]
  142430:	e1540003 	cmp	r4, r3
  142434:	1afffffa 	bne	142424 <start+0x60>
  142438:	e1a00004 	mov	r0, r4
  14243c:	e1a01006 	mov	r1, r6
  142440:	e1a02005 	mov	r2, r5
  142444:	e5973000 	ldr	r3, [r7]
  142448:	e12fff33 	blx	r3
  14244c:	e3500000 	cmp	r0, #0
  142450:	1afffff5 	bne	14242c <start+0x68>
  142454:	e3740002 	cmn	r4, #2
  142458:	0a000012 	beq	1424a8 <start+0xe4>
  14245c:	e35a0000 	cmp	sl, #0
  142460:	1a00000c 	bne	142498 <start+0xd4>
  142464:	e3a000af 	mov	r0, #175	; 0xaf
  142468:	ebffe7d2 	bl	13c3b8 <get_rtt_syscall>
  14246c:	e2504000 	subs	r4, r0, #0
  142470:	e2881010 	add	r1, r8, #16
  142474:	0a000003 	beq	142488 <start+0xc4>
  142478:	e3a03008 	mov	r3, #8
  14247c:	e3a02000 	mov	r2, #0
  142480:	e3a00002 	mov	r0, #2
  142484:	e12fff34 	blx	r4
  142488:	e5983000 	ldr	r3, [r8]
  14248c:	e5980004 	ldr	r0, [r8, #4]
  142490:	e12fff33 	blx	r3
  142494:	ebffff38 	bl	14217c <__pthread_exit>
  142498:	e3a03002 	mov	r3, #2
  14249c:	e3a00000 	mov	r0, #0
  1424a0:	e5893024 	str	r3, [r9, #36]	; 0x24
  1424a4:	ebffff34 	bl	14217c <__pthread_exit>
  1424a8:	e3a01001 	mov	r1, #1
  1424ac:	e598000c 	ldr	r0, [r8, #12]
  1424b0:	ebfffea4 	bl	141f48 <__wake.constprop.2>
  1424b4:	eaffffe8 	b	14245c <start+0x98>
  1424b8:	0014d3dc 	.word	0x0014d3dc
  1424bc:	0014d3d8 	.word	0x0014d3d8

001424c0 <start_c11>:
  1424c0:	e5903000 	ldr	r3, [r0]
  1424c4:	e92d4010 	push	{r4, lr}
  1424c8:	e5900004 	ldr	r0, [r0, #4]
  1424cc:	e12fff33 	blx	r3
  1424d0:	ebffff29 	bl	14217c <__pthread_exit>

001424d4 <__do_cleanup_push>:
  1424d4:	e1a03000 	mov	r3, r0
  1424d8:	e59f2018 	ldr	r2, [pc, #24]	; 1424f8 <__do_cleanup_push+0x24>
  1424dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1424e0:	e5920000 	ldr	r0, [r2]
  1424e4:	e12fff30 	blx	r0
  1424e8:	e5102030 	ldr	r2, [r0, #-48]	; 0xffffffd0
  1424ec:	e5832008 	str	r2, [r3, #8]
  1424f0:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  1424f4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  1424f8:	0014d3dc 	.word	0x0014d3dc

001424fc <__do_cleanup_pop>:
  1424fc:	e5903008 	ldr	r3, [r0, #8]
  142500:	e59f2010 	ldr	r2, [pc, #16]	; 142518 <__do_cleanup_pop+0x1c>
  142504:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  142508:	e5920000 	ldr	r0, [r2]
  14250c:	e12fff30 	blx	r0
  142510:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  142514:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  142518:	0014d3dc 	.word	0x0014d3dc

0014251c <__pthread_create>:
  14251c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  142520:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  142524:	e58d001c 	str	r0, [sp, #28]
  142528:	e58d2014 	str	r2, [sp, #20]
  14252c:	e1a09001 	mov	r9, r1
  142530:	e28d0034 	add	r0, sp, #52	; 0x34
  142534:	e3a02024 	mov	r2, #36	; 0x24
  142538:	e3a01000 	mov	r1, #0
  14253c:	e58d3018 	str	r3, [sp, #24]
  142540:	ebfffb4d 	bl	14127c <memset>
  142544:	e3e03000 	mvn	r3, #0
  142548:	e59f656c 	ldr	r6, [pc, #1388]	; 142abc <__pthread_create+0x5a0>
  14254c:	e58d3028 	str	r3, [sp, #40]	; 0x28
  142550:	e5963000 	ldr	r3, [r6]
  142554:	e3530000 	cmp	r3, #0
  142558:	03a00026 	moveq	r0, #38	; 0x26
  14255c:	0a0000a3 	beq	1427f0 <__pthread_create+0x2d4>
  142560:	e59f3558 	ldr	r3, [pc, #1368]	; 142ac0 <__pthread_create+0x5a4>
  142564:	e5964004 	ldr	r4, [r6, #4]
  142568:	e5930000 	ldr	r0, [r3]
  14256c:	e12fff30 	blx	r0
  142570:	e3540000 	cmp	r4, #0
  142574:	e240a078 	sub	sl, r0, #120	; 0x78
  142578:	0a0000da 	beq	1428e8 <__pthread_create+0x3cc>
  14257c:	e2493001 	sub	r3, r9, #1
  142580:	e3730003 	cmn	r3, #3
  142584:	9a00009b 	bls	1427f8 <__pthread_create+0x2dc>
  142588:	ebfffe86 	bl	141fa8 <__acquire_ptc>
  14258c:	e59f2530 	ldr	r2, [pc, #1328]	; 142ac4 <__pthread_create+0x5a8>
  142590:	e59f3530 	ldr	r3, [pc, #1328]	; 142ac8 <__pthread_create+0x5ac>
  142594:	e5927000 	ldr	r7, [r2]
  142598:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  14259c:	e5933000 	ldr	r3, [r3]
  1425a0:	e3520000 	cmp	r2, #0
  1425a4:	e58d7034 	str	r7, [sp, #52]	; 0x34
  1425a8:	e58d3038 	str	r3, [sp, #56]	; 0x38
  1425ac:	e5960018 	ldr	r0, [r6, #24]
  1425b0:	0a00009e 	beq	142830 <__pthread_create+0x314>
  1425b4:	e59f4510 	ldr	r4, [pc, #1296]	; 142acc <__pthread_create+0x5b0>
  1425b8:	e1a031a7 	lsr	r3, r7, #3
  1425bc:	e5941000 	ldr	r1, [r4]
  1425c0:	e3c2500f 	bic	r5, r2, #15
  1425c4:	e0811000 	add	r1, r1, r0
  1425c8:	e3510b02 	cmp	r1, #2048	; 0x800
  1425cc:	23a0c000 	movcs	ip, #0
  1425d0:	33a0c001 	movcc	ip, #1
  1425d4:	e1530001 	cmp	r3, r1
  1425d8:	93a0c000 	movls	ip, #0
  1425dc:	e0423007 	sub	r3, r2, r7
  1425e0:	e35c0000 	cmp	ip, #0
  1425e4:	e58d3020 	str	r3, [sp, #32]
  1425e8:	1a000111 	bne	142a34 <__pthread_create+0x518>
  1425ec:	e2817eff 	add	r7, r1, #4080	; 0xff0
  1425f0:	e287700f 	add	r7, r7, #15
  1425f4:	e3c77eff 	bic	r7, r7, #4080	; 0xff0
  1425f8:	e3c7700f 	bic	r7, r7, #15
  1425fc:	e3a00000 	mov	r0, #0
  142600:	e3a01000 	mov	r1, #0
  142604:	e3e03000 	mvn	r3, #0
  142608:	e58d0008 	str	r0, [sp, #8]
  14260c:	e58d100c 	str	r1, [sp, #12]
  142610:	e58d3000 	str	r3, [sp]
  142614:	e3a02003 	mov	r2, #3
  142618:	e3a03022 	mov	r3, #34	; 0x22
  14261c:	e1a01007 	mov	r1, r7
  142620:	ebffeda8 	bl	13dcc8 <__mmap>
  142624:	e3700001 	cmn	r0, #1
  142628:	e1a0b000 	mov	fp, r0
  14262c:	0a0000ed 	beq	1429e8 <__pthread_create+0x4cc>
  142630:	e5943000 	ldr	r3, [r4]
  142634:	e5960018 	ldr	r0, [r6, #24]
  142638:	e0473003 	sub	r3, r7, r3
  14263c:	e08b3003 	add	r3, fp, r3
  142640:	e3550000 	cmp	r5, #0
  142644:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142648:	e2600000 	rsb	r0, r0, #0
  14264c:	0a000108 	beq	142a74 <__pthread_create+0x558>
  142650:	e3a08000 	mov	r8, #0
  142654:	e0830000 	add	r0, r3, r0
  142658:	eb000202 	bl	142e68 <__copy_tls>
  14265c:	e1a04000 	mov	r4, r0
  142660:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  142664:	e5805038 	str	r5, [r0, #56]	; 0x38
  142668:	e3530000 	cmp	r3, #0
  14266c:	e59f345c 	ldr	r3, [pc, #1116]	; 142ad0 <__pthread_create+0x5b4>
  142670:	e5808040 	str	r8, [r0, #64]	; 0x40
  142674:	e580b030 	str	fp, [r0, #48]	; 0x30
  142678:	e5807034 	str	r7, [r0, #52]	; 0x34
  14267c:	e5840000 	str	r0, [r4]
  142680:	e5803060 	str	r3, [r0, #96]	; 0x60
  142684:	13a03002 	movne	r3, #2
  142688:	03a03001 	moveq	r3, #1
  14268c:	e59d2020 	ldr	r2, [sp, #32]
  142690:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
  142694:	e0452002 	sub	r2, r5, r2
  142698:	e5803024 	str	r3, [r0, #36]	; 0x24
  14269c:	e580203c 	str	r2, [r0, #60]	; 0x3c
  1426a0:	e59a2014 	ldr	r2, [sl, #20]
  1426a4:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  1426a8:	e5802014 	str	r2, [r0, #20]
  1426ac:	e2802050 	add	r2, r0, #80	; 0x50
  1426b0:	e5802050 	str	r2, [r0, #80]	; 0x50
  1426b4:	e59d2014 	ldr	r2, [sp, #20]
  1426b8:	e3c55003 	bic	r5, r5, #3
  1426bc:	e580104c 	str	r1, [r0, #76]	; 0x4c
  1426c0:	e5052018 	str	r2, [r5, #-24]	; 0xffffffe8
  1426c4:	e59d2018 	ldr	r2, [sp, #24]
  1426c8:	e3530000 	cmp	r3, #0
  1426cc:	128d3028 	addne	r3, sp, #40	; 0x28
  1426d0:	e5052014 	str	r2, [r5, #-20]	; 0xffffffec
  1426d4:	128d2034 	addne	r2, sp, #52	; 0x34
  1426d8:	15052010 	strne	r2, [r5, #-16]
  1426dc:	05053010 	streq	r3, [r5, #-16]
  1426e0:	e505300c 	str	r3, [r5, #-12]
  1426e4:	e28d0058 	add	r0, sp, #88	; 0x58
  1426e8:	eb000366 	bl	143488 <__block_app_sigs>
  1426ec:	e28d1058 	add	r1, sp, #88	; 0x58
  1426f0:	e3a02008 	mov	r2, #8
  1426f4:	e2450008 	sub	r0, r5, #8
  1426f8:	ebfff9a7 	bl	140d9c <memcpy>
  1426fc:	e5153004 	ldr	r3, [r5, #-4]
  142700:	e2458018 	sub	r8, r5, #24
  142704:	e3c33001 	bic	r3, r3, #1
  142708:	e5053004 	str	r3, [r5, #-4]
  14270c:	ebfffe26 	bl	141fac <__tl_lock>
  142710:	e59f33bc 	ldr	r3, [pc, #956]	; 142ad4 <__pthread_create+0x5b8>
  142714:	e596c00c 	ldr	ip, [r6, #12]
  142718:	e3790001 	cmn	r9, #1
  14271c:	e59f13b4 	ldr	r1, [pc, #948]	; 142ad8 <__pthread_create+0x5bc>
  142720:	e59f03b4 	ldr	r0, [pc, #948]	; 142adc <__pthread_create+0x5c0>
  142724:	e2842078 	add	r2, r4, #120	; 0x78
  142728:	01a00003 	moveq	r0, r3
  14272c:	e284301c 	add	r3, r4, #28
  142730:	e28cc001 	add	ip, ip, #1
  142734:	e58d1008 	str	r1, [sp, #8]
  142738:	e58d2004 	str	r2, [sp, #4]
  14273c:	e58d3000 	str	r3, [sp]
  142740:	e1a01008 	mov	r1, r8
  142744:	e1a03008 	mov	r3, r8
  142748:	e59f2390 	ldr	r2, [pc, #912]	; 142ae0 <__pthread_create+0x5c4>
  14274c:	e586c00c 	str	ip, [r6, #12]
  142750:	eb0006ff 	bl	144354 <__clone>
  142754:	e3500000 	cmp	r0, #0
  142758:	ba0000a5 	blt	1429f4 <__pthread_create+0x4d8>
  14275c:	e59a300c 	ldr	r3, [sl, #12]
  142760:	e584a008 	str	sl, [r4, #8]
  142764:	e584300c 	str	r3, [r4, #12]
  142768:	e5834008 	str	r4, [r3, #8]
  14276c:	e5943008 	ldr	r3, [r4, #8]
  142770:	e583400c 	str	r4, [r3, #12]
  142774:	ebfffe30 	bl	14203c <__tl_unlock>
  142778:	e28d0058 	add	r0, sp, #88	; 0x58
  14277c:	eb00034f 	bl	1434c0 <__restore_sigs>
  142780:	ebfffe08 	bl	141fa8 <__acquire_ptc>
  142784:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  142788:	e3530000 	cmp	r3, #0
  14278c:	0a000014 	beq	1427e4 <__pthread_create+0x2c8>
  142790:	e59f534c 	ldr	r5, [pc, #844]	; 142ae4 <__pthread_create+0x5c8>
  142794:	ea000002 	b	1427a4 <__pthread_create+0x288>
  142798:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  14279c:	e3730001 	cmn	r3, #1
  1427a0:	1a00000c 	bne	1427d8 <__pthread_create+0x2bc>
  1427a4:	e3e00000 	mvn	r0, #0
  1427a8:	e3e01001 	mvn	r1, #1
  1427ac:	e28d2028 	add	r2, sp, #40	; 0x28
  1427b0:	e5953000 	ldr	r3, [r5]
  1427b4:	e12fff33 	blx	r3
  1427b8:	e3500000 	cmp	r0, #0
  1427bc:	1afffff5 	bne	142798 <__pthread_create+0x27c>
  1427c0:	e1a03000 	mov	r3, r0
  1427c4:	e1a02001 	mov	r2, r1
  1427c8:	e28d0028 	add	r0, sp, #40	; 0x28
  1427cc:	e1a01003 	mov	r1, r3
  1427d0:	e3a03001 	mov	r3, #1
  1427d4:	ebfffd60 	bl	141d5c <__wait>
  1427d8:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
  1427dc:	e3500000 	cmp	r0, #0
  1427e0:	1a000002 	bne	1427f0 <__pthread_create+0x2d4>
  1427e4:	e3a00000 	mov	r0, #0
  1427e8:	e59d301c 	ldr	r3, [sp, #28]
  1427ec:	e5834000 	str	r4, [r3]
  1427f0:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  1427f4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1427f8:	e1a0e009 	mov	lr, r9
  1427fc:	e28dc034 	add	ip, sp, #52	; 0x34
  142800:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  142804:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  142808:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  14280c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  142810:	e59e3000 	ldr	r3, [lr]
  142814:	e58c3000 	str	r3, [ip]
  142818:	ebfffde2 	bl	141fa8 <__acquire_ptc>
  14281c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  142820:	e59d7034 	ldr	r7, [sp, #52]	; 0x34
  142824:	e3520000 	cmp	r2, #0
  142828:	e5960018 	ldr	r0, [r6, #24]
  14282c:	1affff60 	bne	1425b4 <__pthread_create+0x98>
  142830:	e59f5294 	ldr	r5, [pc, #660]	; 142acc <__pthread_create+0x5b0>
  142834:	e3a01000 	mov	r1, #0
  142838:	e5953000 	ldr	r3, [r5]
  14283c:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  142840:	e0833000 	add	r3, r3, r0
  142844:	e2833eff 	add	r3, r3, #4080	; 0xff0
  142848:	e283300f 	add	r3, r3, #15
  14284c:	e0837007 	add	r7, r3, r7
  142850:	e3a00000 	mov	r0, #0
  142854:	e3e03000 	mvn	r3, #0
  142858:	e59f4288 	ldr	r4, [pc, #648]	; 142ae8 <__pthread_create+0x5cc>
  14285c:	e2888eff 	add	r8, r8, #4080	; 0xff0
  142860:	e288800f 	add	r8, r8, #15
  142864:	e0088004 	and	r8, r8, r4
  142868:	e3580000 	cmp	r8, #0
  14286c:	e0044007 	and	r4, r4, r7
  142870:	e58d3000 	str	r3, [sp]
  142874:	e58d0008 	str	r0, [sp, #8]
  142878:	e58d100c 	str	r1, [sp, #12]
  14287c:	e3a03022 	mov	r3, #34	; 0x22
  142880:	e0847008 	add	r7, r4, r8
  142884:	0a00007d 	beq	142a80 <__pthread_create+0x564>
  142888:	e1a00002 	mov	r0, r2
  14288c:	e1a01007 	mov	r1, r7
  142890:	ebffed0c 	bl	13dcc8 <__mmap>
  142894:	e3700001 	cmn	r0, #1
  142898:	e1a0b000 	mov	fp, r0
  14289c:	0a000051 	beq	1429e8 <__pthread_create+0x4cc>
  1428a0:	e0803008 	add	r3, r0, r8
  1428a4:	e1a01004 	mov	r1, r4
  1428a8:	e1a00003 	mov	r0, r3
  1428ac:	e3a02003 	mov	r2, #3
  1428b0:	e58d3020 	str	r3, [sp, #32]
  1428b4:	eb0002cb 	bl	1433e8 <__mprotect>
  1428b8:	e3500000 	cmp	r0, #0
  1428bc:	1a000042 	bne	1429cc <__pthread_create+0x4b0>
  1428c0:	e5953000 	ldr	r3, [r5]
  1428c4:	e5960018 	ldr	r0, [r6, #24]
  1428c8:	e0473003 	sub	r3, r7, r3
  1428cc:	e08b3003 	add	r3, fp, r3
  1428d0:	e58d3024 	str	r3, [sp, #36]	; 0x24
  1428d4:	e2600000 	rsb	r0, r0, #0
  1428d8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  1428dc:	e0835000 	add	r5, r3, r0
  1428e0:	e1a00005 	mov	r0, r5
  1428e4:	eaffff5b 	b	142658 <__pthread_create+0x13c>
  1428e8:	ebffeee1 	bl	13e474 <__ofl_lock>
  1428ec:	e5903000 	ldr	r3, [r0]
  1428f0:	e3530000 	cmp	r3, #0
  1428f4:	0a000005 	beq	142910 <__pthread_create+0x3f4>
  1428f8:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  1428fc:	e3520000 	cmp	r2, #0
  142900:	b583404c 	strlt	r4, [r3, #76]	; 0x4c
  142904:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  142908:	e3530000 	cmp	r3, #0
  14290c:	1afffff9 	bne	1428f8 <__pthread_create+0x3dc>
  142910:	ebffeede 	bl	13e490 <__ofl_unlock>
  142914:	e59f31d0 	ldr	r3, [pc, #464]	; 142aec <__pthread_create+0x5d0>
  142918:	e5933000 	ldr	r3, [r3]
  14291c:	e3530000 	cmp	r3, #0
  142920:	0a000003 	beq	142934 <__pthread_create+0x418>
  142924:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142928:	e3520000 	cmp	r2, #0
  14292c:	b3a02000 	movlt	r2, #0
  142930:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  142934:	e59f31b4 	ldr	r3, [pc, #436]	; 142af0 <__pthread_create+0x5d4>
  142938:	e5933000 	ldr	r3, [r3]
  14293c:	e3530000 	cmp	r3, #0
  142940:	0a000003 	beq	142954 <__pthread_create+0x438>
  142944:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142948:	e3520000 	cmp	r2, #0
  14294c:	b3a02000 	movlt	r2, #0
  142950:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  142954:	e59f3198 	ldr	r3, [pc, #408]	; 142af4 <__pthread_create+0x5d8>
  142958:	e5933000 	ldr	r3, [r3]
  14295c:	e3530000 	cmp	r3, #0
  142960:	0a000003 	beq	142974 <__pthread_create+0x458>
  142964:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142968:	e3520000 	cmp	r2, #0
  14296c:	b3a02000 	movlt	r2, #0
  142970:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  142974:	e3a03003 	mov	r3, #3
  142978:	e3a04000 	mov	r4, #0
  14297c:	e3a000af 	mov	r0, #175	; 0xaf
  142980:	e58d402c 	str	r4, [sp, #44]	; 0x2c
  142984:	e58d3030 	str	r3, [sp, #48]	; 0x30
  142988:	ebffe68a 	bl	13c3b8 <get_rtt_syscall>
  14298c:	e2505000 	subs	r5, r0, #0
  142990:	0a000004 	beq	1429a8 <__pthread_create+0x48c>
  142994:	e1a02004 	mov	r2, r4
  142998:	e28d102c 	add	r1, sp, #44	; 0x2c
  14299c:	e3a03008 	mov	r3, #8
  1429a0:	e3a00001 	mov	r0, #1
  1429a4:	e12fff35 	blx	r5
  1429a8:	e59f3148 	ldr	r3, [pc, #328]	; 142af8 <__pthread_create+0x5dc>
  1429ac:	e58a304c 	str	r3, [sl, #76]	; 0x4c
  1429b0:	ebfffd7c 	bl	141fa8 <__acquire_ptc>
  1429b4:	e3a03001 	mov	r3, #1
  1429b8:	e5863004 	str	r3, [r6, #4]
  1429bc:	e2493001 	sub	r3, r9, #1
  1429c0:	e3730003 	cmn	r3, #3
  1429c4:	8afffeef 	bhi	142588 <__pthread_create+0x6c>
  1429c8:	eaffff8a 	b	1427f8 <__pthread_create+0x2dc>
  1429cc:	ebffd943 	bl	138ee0 <__errno_location>
  1429d0:	e5903000 	ldr	r3, [r0]
  1429d4:	e3530026 	cmp	r3, #38	; 0x26
  1429d8:	0affffb8 	beq	1428c0 <__pthread_create+0x3a4>
  1429dc:	e1a01007 	mov	r1, r7
  1429e0:	e1a0000b 	mov	r0, fp
  1429e4:	ebffed1d 	bl	13de60 <__munmap>
  1429e8:	ebfffd6e 	bl	141fa8 <__acquire_ptc>
  1429ec:	e3a0000b 	mov	r0, #11
  1429f0:	eaffff7e 	b	1427f0 <__pthread_create+0x2d4>
  1429f4:	ebfffd90 	bl	14203c <__tl_unlock>
  1429f8:	e28d0058 	add	r0, sp, #88	; 0x58
  1429fc:	eb0002af 	bl	1434c0 <__restore_sigs>
  142a00:	ebfffd68 	bl	141fa8 <__acquire_ptc>
  142a04:	e596300c 	ldr	r3, [r6, #12]
  142a08:	e35b0000 	cmp	fp, #0
  142a0c:	e2433001 	sub	r3, r3, #1
  142a10:	e586300c 	str	r3, [r6, #12]
  142a14:	03a0000b 	moveq	r0, #11
  142a18:	0affff74 	beq	1427f0 <__pthread_create+0x2d4>
  142a1c:	e1a01007 	mov	r1, r7
  142a20:	e1a0000b 	mov	r0, fp
  142a24:	ebffed0d 	bl	13de60 <__munmap>
  142a28:	e3a0000b 	mov	r0, #11
  142a2c:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  142a30:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  142a34:	e5943000 	ldr	r3, [r4]
  142a38:	e1a02001 	mov	r2, r1
  142a3c:	e0458003 	sub	r8, r5, r3
  142a40:	e0485000 	sub	r5, r8, r0
  142a44:	e1a00005 	mov	r0, r5
  142a48:	e3a01000 	mov	r1, #0
  142a4c:	e58d8024 	str	r8, [sp, #36]	; 0x24
  142a50:	ebfffa09 	bl	14127c <memset>
  142a54:	e3580000 	cmp	r8, #0
  142a58:	e1a03008 	mov	r3, r8
  142a5c:	0afffee6 	beq	1425fc <__pthread_create+0xe0>
  142a60:	e3a08000 	mov	r8, #0
  142a64:	e5960018 	ldr	r0, [r6, #24]
  142a68:	e1a0b008 	mov	fp, r8
  142a6c:	e0430000 	sub	r0, r3, r0
  142a70:	eafffef8 	b	142658 <__pthread_create+0x13c>
  142a74:	e1a08005 	mov	r8, r5
  142a78:	e58db020 	str	fp, [sp, #32]
  142a7c:	eaffff95 	b	1428d8 <__pthread_create+0x3bc>
  142a80:	e3a02003 	mov	r2, #3
  142a84:	e1a01007 	mov	r1, r7
  142a88:	e1a00008 	mov	r0, r8
  142a8c:	ebffec8d 	bl	13dcc8 <__mmap>
  142a90:	e3700001 	cmn	r0, #1
  142a94:	e1a0b000 	mov	fp, r0
  142a98:	0affffd2 	beq	1429e8 <__pthread_create+0x4cc>
  142a9c:	e5953000 	ldr	r3, [r5]
  142aa0:	e5960018 	ldr	r0, [r6, #24]
  142aa4:	e0473003 	sub	r3, r7, r3
  142aa8:	e08b3003 	add	r3, fp, r3
  142aac:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142ab0:	e2600000 	rsb	r0, r0, #0
  142ab4:	e58db020 	str	fp, [sp, #32]
  142ab8:	eaffff86 	b	1428d8 <__pthread_create+0x3bc>
  142abc:	0056f058 	.word	0x0056f058
  142ac0:	0014d3dc 	.word	0x0014d3dc
  142ac4:	0014d3e4 	.word	0x0014d3e4
  142ac8:	0014d3e0 	.word	0x0014d3e0
  142acc:	0014f474 	.word	0x0014f474
  142ad0:	0056f080 	.word	0x0056f080
  142ad4:	001424c0 	.word	0x001424c0
  142ad8:	0056f0a0 	.word	0x0056f0a0
  142adc:	001423c4 	.word	0x001423c4
  142ae0:	007d0f00 	.word	0x007d0f00
  142ae4:	0014d3d8 	.word	0x0014d3d8
  142ae8:	fffff000 	.word	0xfffff000
  142aec:	0014f478 	.word	0x0014f478
  142af0:	0014d3d0 	.word	0x0014d3d0
  142af4:	0014d338 	.word	0x0014d338
  142af8:	0014f47c 	.word	0x0014f47c

00142afc <__get_thread_map>:
  142afc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  142b00:	e2504000 	subs	r4, r0, #0
  142b04:	e24dd014 	sub	sp, sp, #20
  142b08:	0a000002 	beq	142b18 <__get_thread_map+0x1c>
  142b0c:	e2840078 	add	r0, r4, #120	; 0x78
  142b10:	e28dd014 	add	sp, sp, #20
  142b14:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  142b18:	e3a06000 	mov	r6, #0
  142b1c:	e3a07000 	mov	r7, #0
  142b20:	e3e03000 	mvn	r3, #0
  142b24:	e58d6008 	str	r6, [sp, #8]
  142b28:	e58d700c 	str	r7, [sp, #12]
  142b2c:	e59f5074 	ldr	r5, [pc, #116]	; 142ba8 <__get_thread_map+0xac>
  142b30:	e3a02003 	mov	r2, #3
  142b34:	e5951018 	ldr	r1, [r5, #24]
  142b38:	e58d3000 	str	r3, [sp]
  142b3c:	e3510000 	cmp	r1, #0
  142b40:	03a01078 	moveq	r1, #120	; 0x78
  142b44:	e3a03022 	mov	r3, #34	; 0x22
  142b48:	ebffec5e 	bl	13dcc8 <__mmap>
  142b4c:	e2504000 	subs	r4, r0, #0
  142b50:	0a000012 	beq	142ba0 <__get_thread_map+0xa4>
  142b54:	e59f3050 	ldr	r3, [pc, #80]	; 142bac <__get_thread_map+0xb0>
  142b58:	e2855028 	add	r5, r5, #40	; 0x28
  142b5c:	e5932000 	ldr	r2, [r3]
  142b60:	e2843050 	add	r3, r4, #80	; 0x50
  142b64:	e5845060 	str	r5, [r4, #96]	; 0x60
  142b68:	e5844000 	str	r4, [r4]
  142b6c:	e5844008 	str	r4, [r4, #8]
  142b70:	e584400c 	str	r4, [r4, #12]
  142b74:	e5842014 	str	r2, [r4, #20]
  142b78:	e5843050 	str	r3, [r4, #80]	; 0x50
  142b7c:	e3a000e0 	mov	r0, #224	; 0xe0
  142b80:	ebffe60c 	bl	13c3b8 <get_rtt_syscall>
  142b84:	e3500000 	cmp	r0, #0
  142b88:	0a000000 	beq	142b90 <__get_thread_map+0x94>
  142b8c:	e12fff30 	blx	r0
  142b90:	e3a03000 	mov	r3, #0
  142b94:	e584001c 	str	r0, [r4, #28]
  142b98:	e5843020 	str	r3, [r4, #32]
  142b9c:	eaffffda 	b	142b0c <__get_thread_map+0x10>
  142ba0:	e1a00004 	mov	r0, r4
  142ba4:	eaffffd9 	b	142b10 <__get_thread_map+0x14>
  142ba8:	0056f058 	.word	0x0056f058
  142bac:	0056f0a4 	.word	0x0056f0a4

00142bb0 <__put_thread_map>:
  142bb0:	e3500000 	cmp	r0, #0
  142bb4:	012fff1e 	bxeq	lr
  142bb8:	e59f3010 	ldr	r3, [pc, #16]	; 142bd0 <__put_thread_map+0x20>
  142bbc:	e2400078 	sub	r0, r0, #120	; 0x78
  142bc0:	e5931018 	ldr	r1, [r3, #24]
  142bc4:	e3510000 	cmp	r1, #0
  142bc8:	03a01078 	moveq	r1, #120	; 0x78
  142bcc:	eaffeca3 	b	13de60 <__munmap>
  142bd0:	0056f058 	.word	0x0056f058

00142bd4 <__pthread_init_run>:
  142bd4:	e92d4070 	push	{r4, r5, r6, lr}
  142bd8:	e1a05000 	mov	r5, r0
  142bdc:	e3a00000 	mov	r0, #0
  142be0:	e1a06001 	mov	r6, r1
  142be4:	ebffffc4 	bl	142afc <__get_thread_map>
  142be8:	e2504000 	subs	r4, r0, #0
  142bec:	08bd8070 	popeq	{r4, r5, r6, pc}
  142bf0:	eb000582 	bl	144200 <__set_thread_area>
  142bf4:	e1a00006 	mov	r0, r6
  142bf8:	e12fff35 	blx	r5
  142bfc:	e59f3014 	ldr	r3, [pc, #20]	; 142c18 <__pthread_init_run+0x44>
  142c00:	e2440078 	sub	r0, r4, #120	; 0x78
  142c04:	e5931018 	ldr	r1, [r3, #24]
  142c08:	e8bd4070 	pop	{r4, r5, r6, lr}
  142c0c:	e3510000 	cmp	r1, #0
  142c10:	03a01078 	moveq	r1, #120	; 0x78
  142c14:	eaffec91 	b	13de60 <__munmap>
  142c18:	0056f058 	.word	0x0056f058

00142c1c <__vm_wait>:
  142c1c:	e92d4070 	push	{r4, r5, r6, lr}
  142c20:	e59f402c 	ldr	r4, [pc, #44]	; 142c54 <__vm_wait+0x38>
  142c24:	e5942000 	ldr	r2, [r4]
  142c28:	e3520000 	cmp	r2, #0
  142c2c:	08bd8070 	popeq	{r4, r5, r6, pc}
  142c30:	e2845004 	add	r5, r4, #4
  142c34:	e3a03001 	mov	r3, #1
  142c38:	e1a01005 	mov	r1, r5
  142c3c:	e59f0010 	ldr	r0, [pc, #16]	; 142c54 <__vm_wait+0x38>
  142c40:	ebfffc45 	bl	141d5c <__wait>
  142c44:	e5942000 	ldr	r2, [r4]
  142c48:	e3520000 	cmp	r2, #0
  142c4c:	1afffff8 	bne	142c34 <__vm_wait+0x18>
  142c50:	e8bd8070 	pop	{r4, r5, r6, pc}
  142c54:	0014f488 	.word	0x0014f488

00142c58 <__vm_lock>:
  142c58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  142c5c:	e59f6038 	ldr	r6, [pc, #56]	; 142c9c <__vm_lock+0x44>
  142c60:	e59f8038 	ldr	r8, [pc, #56]	; 142ca0 <__vm_lock+0x48>
  142c64:	e1a07006 	mov	r7, r6
  142c68:	e5964000 	ldr	r4, [r6]
  142c6c:	e2845001 	add	r5, r4, #1
  142c70:	e1a00004 	mov	r0, r4
  142c74:	e1a01005 	mov	r1, r5
  142c78:	e1a02007 	mov	r2, r7
  142c7c:	e5983000 	ldr	r3, [r8]
  142c80:	e12fff33 	blx	r3
  142c84:	e3500000 	cmp	r0, #0
  142c88:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142c8c:	e5963000 	ldr	r3, [r6]
  142c90:	e1540003 	cmp	r4, r3
  142c94:	0afffff5 	beq	142c70 <__vm_lock+0x18>
  142c98:	eafffff2 	b	142c68 <__vm_lock+0x10>
  142c9c:	0014f488 	.word	0x0014f488
  142ca0:	0014d3d8 	.word	0x0014d3d8

00142ca4 <__vm_unlock>:
  142ca4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  142ca8:	e59f6098 	ldr	r6, [pc, #152]	; 142d48 <__vm_unlock+0xa4>
  142cac:	e59f8098 	ldr	r8, [pc, #152]	; 142d4c <__vm_unlock+0xa8>
  142cb0:	e1a07006 	mov	r7, r6
  142cb4:	e5964000 	ldr	r4, [r6]
  142cb8:	e2445001 	sub	r5, r4, #1
  142cbc:	ea000002 	b	142ccc <__vm_unlock+0x28>
  142cc0:	e5963000 	ldr	r3, [r6]
  142cc4:	e1540003 	cmp	r4, r3
  142cc8:	1afffff9 	bne	142cb4 <__vm_unlock+0x10>
  142ccc:	e1a00004 	mov	r0, r4
  142cd0:	e1a01005 	mov	r1, r5
  142cd4:	e1a02007 	mov	r2, r7
  142cd8:	e5983000 	ldr	r3, [r8]
  142cdc:	e12fff33 	blx	r3
  142ce0:	e3500000 	cmp	r0, #0
  142ce4:	1afffff5 	bne	142cc0 <__vm_unlock+0x1c>
  142ce8:	e3540001 	cmp	r4, #1
  142cec:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142cf0:	e5963004 	ldr	r3, [r6, #4]
  142cf4:	e3530000 	cmp	r3, #0
  142cf8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142cfc:	e3a000f0 	mov	r0, #240	; 0xf0
  142d00:	ebffe5ac 	bl	13c3b8 <get_rtt_syscall>
  142d04:	e2503000 	subs	r3, r0, #0
  142d08:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142d0c:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  142d10:	e3a01081 	mov	r1, #129	; 0x81
  142d14:	e59f002c 	ldr	r0, [pc, #44]	; 142d48 <__vm_unlock+0xa4>
  142d18:	e12fff33 	blx	r3
  142d1c:	e3700026 	cmn	r0, #38	; 0x26
  142d20:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142d24:	e3a000f0 	mov	r0, #240	; 0xf0
  142d28:	ebffe5a2 	bl	13c3b8 <get_rtt_syscall>
  142d2c:	e2503000 	subs	r3, r0, #0
  142d30:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142d34:	e1a01004 	mov	r1, r4
  142d38:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  142d3c:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  142d40:	e59f0000 	ldr	r0, [pc]	; 142d48 <__vm_unlock+0xa4>
  142d44:	e12fff13 	bx	r3
  142d48:	0014f488 	.word	0x0014f488
  142d4c:	0014d3d8 	.word	0x0014d3d8

00142d50 <time>:
  142d50:	e92d4010 	push	{r4, lr}
  142d54:	e1a04000 	mov	r4, r0
  142d58:	e24dd010 	sub	sp, sp, #16
  142d5c:	e1a0100d 	mov	r1, sp
  142d60:	e3a00000 	mov	r0, #0
  142d64:	eb000595 	bl	1443c0 <__clock_gettime>
  142d68:	e89d0003 	ldm	sp, {r0, r1}
  142d6c:	e3540000 	cmp	r4, #0
  142d70:	18840003 	stmne	r4, {r0, r1}
  142d74:	e28dd010 	add	sp, sp, #16
  142d78:	e8bd8010 	pop	{r4, pc}

00142d7c <__aio_close>:
  142d7c:	e12fff1e 	bx	lr

00142d80 <close>:
  142d80:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  142d84:	e24dd014 	sub	sp, sp, #20
  142d88:	ebfffffb 	bl	142d7c <__aio_close>
  142d8c:	e3a03000 	mov	r3, #0
  142d90:	e1a01000 	mov	r1, r0
  142d94:	e58d3008 	str	r3, [sp, #8]
  142d98:	e58d3004 	str	r3, [sp, #4]
  142d9c:	e58d3000 	str	r3, [sp]
  142da0:	e1a02003 	mov	r2, r3
  142da4:	e3a00006 	mov	r0, #6
  142da8:	ebfffbea 	bl	141d58 <__syscall_cp>
  142dac:	e3700004 	cmn	r0, #4
  142db0:	03a00000 	moveq	r0, #0
  142db4:	e28dd014 	add	sp, sp, #20
  142db8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  142dbc:	eaffe5b2 	b	13c48c <__syscall_ret>

00142dc0 <tolower>:
  142dc0:	e2403041 	sub	r3, r0, #65	; 0x41
  142dc4:	e3530019 	cmp	r3, #25
  142dc8:	93800020 	orrls	r0, r0, #32
  142dcc:	e12fff1e 	bx	lr

00142dd0 <__tolower_l>:
  142dd0:	e2403041 	sub	r3, r0, #65	; 0x41
  142dd4:	e3530019 	cmp	r3, #25
  142dd8:	93800020 	orrls	r0, r0, #32
  142ddc:	e12fff1e 	bx	lr

00142de0 <__init_tp>:
  142de0:	e92d4010 	push	{r4, lr}
  142de4:	e5800000 	str	r0, [r0]
  142de8:	e1a04000 	mov	r4, r0
  142dec:	e2800078 	add	r0, r0, #120	; 0x78
  142df0:	eb000502 	bl	144200 <__set_thread_area>
  142df4:	e3500000 	cmp	r0, #0
  142df8:	ba000015 	blt	142e54 <__init_tp+0x74>
  142dfc:	03a02001 	moveq	r2, #1
  142e00:	059f3054 	ldreq	r3, [pc, #84]	; 142e5c <__init_tp+0x7c>
  142e04:	e3a00c01 	mov	r0, #256	; 0x100
  142e08:	05832000 	streq	r2, [r3]
  142e0c:	e3a03001 	mov	r3, #1
  142e10:	e5843024 	str	r3, [r4, #36]	; 0x24
  142e14:	ebffe567 	bl	13c3b8 <get_rtt_syscall>
  142e18:	e2503000 	subs	r3, r0, #0
  142e1c:	0a00000a 	beq	142e4c <__init_tp+0x6c>
  142e20:	e59f0038 	ldr	r0, [pc, #56]	; 142e60 <__init_tp+0x80>
  142e24:	e12fff33 	blx	r3
  142e28:	e59f2034 	ldr	r2, [pc, #52]	; 142e64 <__init_tp+0x84>
  142e2c:	e2843050 	add	r3, r4, #80	; 0x50
  142e30:	e584001c 	str	r0, [r4, #28]
  142e34:	e5844008 	str	r4, [r4, #8]
  142e38:	e584400c 	str	r4, [r4, #12]
  142e3c:	e5842060 	str	r2, [r4, #96]	; 0x60
  142e40:	e5843050 	str	r3, [r4, #80]	; 0x50
  142e44:	e3a00000 	mov	r0, #0
  142e48:	e8bd8010 	pop	{r4, pc}
  142e4c:	e1a00003 	mov	r0, r3
  142e50:	eafffff4 	b	142e28 <__init_tp+0x48>
  142e54:	e3e00000 	mvn	r0, #0
  142e58:	e8bd8010 	pop	{r4, pc}
  142e5c:	0056f058 	.word	0x0056f058
  142e60:	0056f0a0 	.word	0x0056f0a0
  142e64:	0056f080 	.word	0x0056f080

00142e68 <__copy_tls>:
  142e68:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  142e6c:	e59f808c 	ldr	r8, [pc, #140]	; 142f00 <__copy_tls+0x98>
  142e70:	e3e03077 	mvn	r3, #119	; 0x77
  142e74:	e5982020 	ldr	r2, [r8, #32]
  142e78:	e598601c 	ldr	r6, [r8, #28]
  142e7c:	e1a07102 	lsl	r7, r2, #2
  142e80:	e2277003 	eor	r7, r7, #3
  142e84:	e1e07007 	mvn	r7, r7
  142e88:	e5981018 	ldr	r1, [r8, #24]
  142e8c:	e5984014 	ldr	r4, [r8, #20]
  142e90:	e2466001 	sub	r6, r6, #1
  142e94:	e0433000 	sub	r3, r3, r0
  142e98:	e0066003 	and	r6, r6, r3
  142e9c:	e0877001 	add	r7, r7, r1
  142ea0:	e3540000 	cmp	r4, #0
  142ea4:	e1a09000 	mov	r9, r0
  142ea8:	e0806006 	add	r6, r0, r6
  142eac:	e080a007 	add	sl, r0, r7
  142eb0:	0a00000d 	beq	142eec <__copy_tls+0x84>
  142eb4:	e1a0b00a 	mov	fp, sl
  142eb8:	e2865078 	add	r5, r6, #120	; 0x78
  142ebc:	e5943014 	ldr	r3, [r4, #20]
  142ec0:	e5941004 	ldr	r1, [r4, #4]
  142ec4:	e0853003 	add	r3, r5, r3
  142ec8:	e5ab3004 	str	r3, [fp, #4]!
  142ecc:	e5940014 	ldr	r0, [r4, #20]
  142ed0:	e5942008 	ldr	r2, [r4, #8]
  142ed4:	e0850000 	add	r0, r5, r0
  142ed8:	ebfff7af 	bl	140d9c <memcpy>
  142edc:	e5944000 	ldr	r4, [r4]
  142ee0:	e3540000 	cmp	r4, #0
  142ee4:	1afffff4 	bne	142ebc <__copy_tls+0x54>
  142ee8:	e5982020 	ldr	r2, [r8, #32]
  142eec:	e7892007 	str	r2, [r9, r7]
  142ef0:	e1a00006 	mov	r0, r6
  142ef4:	e586a074 	str	sl, [r6, #116]	; 0x74
  142ef8:	e586a004 	str	sl, [r6, #4]
  142efc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  142f00:	0056f058 	.word	0x0056f058

00142f04 <__init_tls>:
  142f04:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  142f08:	e5901014 	ldr	r1, [r0, #20]
  142f0c:	e24dd00c 	sub	sp, sp, #12
  142f10:	e3510000 	cmp	r1, #0
  142f14:	e590600c 	ldr	r6, [r0, #12]
  142f18:	0a000062 	beq	1430a8 <__init_tls+0x1a4>
  142f1c:	e3a04000 	mov	r4, #0
  142f20:	e59f81a0 	ldr	r8, [pc, #416]	; 1430c8 <__init_tls+0x1c4>
  142f24:	e1a02006 	mov	r2, r6
  142f28:	e1a03004 	mov	r3, r4
  142f2c:	e1a0e004 	mov	lr, r4
  142f30:	e590c010 	ldr	ip, [r0, #16]
  142f34:	e5987000 	ldr	r7, [r8]
  142f38:	e59f918c 	ldr	r9, [pc, #396]	; 1430cc <__init_tls+0x1c8>
  142f3c:	e59f518c 	ldr	r5, [pc, #396]	; 1430d0 <__init_tls+0x1cc>
  142f40:	ea000007 	b	142f64 <__init_tls+0x60>
  142f44:	e3500002 	cmp	r0, #2
  142f48:	1a00003c 	bne	143040 <__init_tls+0x13c>
  142f4c:	e3550000 	cmp	r5, #0
  142f50:	15923008 	ldrne	r3, [r2, #8]
  142f54:	10453003 	subne	r3, r5, r3
  142f58:	e2511001 	subs	r1, r1, #1
  142f5c:	e082200c 	add	r2, r2, ip
  142f60:	0a000007 	beq	142f84 <__init_tls+0x80>
  142f64:	e5920000 	ldr	r0, [r2]
  142f68:	e3500006 	cmp	r0, #6
  142f6c:	1afffff4 	bne	142f44 <__init_tls+0x40>
  142f70:	e5923008 	ldr	r3, [r2, #8]
  142f74:	e2511001 	subs	r1, r1, #1
  142f78:	e0463003 	sub	r3, r6, r3
  142f7c:	e082200c 	add	r2, r2, ip
  142f80:	1afffff7 	bne	142f64 <__init_tls+0x60>
  142f84:	e3540000 	cmp	r4, #0
  142f88:	15887000 	strne	r7, [r8]
  142f8c:	e35e0000 	cmp	lr, #0
  142f90:	0a000044 	beq	1430a8 <__init_tls+0x1a4>
  142f94:	e3a04001 	mov	r4, #1
  142f98:	e59ec008 	ldr	ip, [lr, #8]
  142f9c:	e59e1010 	ldr	r1, [lr, #16]
  142fa0:	e59f212c 	ldr	r2, [pc, #300]	; 1430d4 <__init_tls+0x1d0>
  142fa4:	e59e001c 	ldr	r0, [lr, #28]
  142fa8:	e083300c 	add	r3, r3, ip
  142fac:	e59fc124 	ldr	ip, [pc, #292]	; 1430d8 <__init_tls+0x1d4>
  142fb0:	e5821008 	str	r1, [r2, #8]
  142fb4:	e5823004 	str	r3, [r2, #4]
  142fb8:	e59e1014 	ldr	r1, [lr, #20]
  142fbc:	e5820010 	str	r0, [r2, #16]
  142fc0:	e58c2014 	str	r2, [ip, #20]
  142fc4:	e58c4020 	str	r4, [ip, #32]
  142fc8:	e3500003 	cmp	r0, #3
  142fcc:	93a0e004 	movls	lr, #4
  142fd0:	e0833001 	add	r3, r3, r1
  142fd4:	e2404001 	sub	r4, r0, #1
  142fd8:	e2633000 	rsb	r3, r3, #0
  142fdc:	e0033004 	and	r3, r3, r4
  142fe0:	e0833001 	add	r3, r3, r1
  142fe4:	93a01087 	movls	r1, #135	; 0x87
  142fe8:	91a0000e 	movls	r0, lr
  142fec:	e3c44007 	bic	r4, r4, #7
  142ff0:	e2844008 	add	r4, r4, #8
  142ff4:	82801083 	addhi	r1, r0, #131	; 0x83
  142ff8:	e5824014 	str	r4, [r2, #20]
  142ffc:	e0834004 	add	r4, r3, r4
  143000:	e0844001 	add	r4, r4, r1
  143004:	e3c44003 	bic	r4, r4, #3
  143008:	9582e010 	strls	lr, [r2, #16]
  14300c:	e35400bc 	cmp	r4, #188	; 0xbc
  143010:	e58c001c 	str	r0, [ip, #28]
  143014:	e582300c 	str	r3, [r2, #12]
  143018:	e58c4018 	str	r4, [ip, #24]
  14301c:	959f00b8 	ldrls	r0, [pc, #184]	; 1430dc <__init_tls+0x1d8>
  143020:	8a000013 	bhi	143074 <__init_tls+0x170>
  143024:	ebffff8f 	bl	142e68 <__copy_tls>
  143028:	ebffff6c 	bl	142de0 <__init_tp>
  14302c:	e3500000 	cmp	r0, #0
  143030:	aa000000 	bge	143038 <__init_tls+0x134>
  143034:	e7f000f0 	.word	0xe7f000f0
  143038:	e28dd00c 	add	sp, sp, #12
  14303c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  143040:	e3500007 	cmp	r0, #7
  143044:	01a0e002 	moveq	lr, r2
  143048:	0affffc2 	beq	142f58 <__init_tls+0x54>
  14304c:	e1500009 	cmp	r0, r9
  143050:	1affffc0 	bne	142f58 <__init_tls+0x54>
  143054:	e5920014 	ldr	r0, [r2, #20]
  143058:	e1500007 	cmp	r0, r7
  14305c:	9affffbd 	bls	142f58 <__init_tls+0x54>
  143060:	e3500502 	cmp	r0, #8388608	; 0x800000
  143064:	31a07000 	movcc	r7, r0
  143068:	23a07502 	movcs	r7, #8388608	; 0x800000
  14306c:	e3a04001 	mov	r4, #1
  143070:	eaffffb8 	b	142f58 <__init_tls+0x54>
  143074:	e3a000c0 	mov	r0, #192	; 0xc0
  143078:	ebffe4ce 	bl	13c3b8 <get_rtt_syscall>
  14307c:	e2505000 	subs	r5, r0, #0
  143080:	0a00000e 	beq	1430c0 <__init_tls+0x1bc>
  143084:	e3e03000 	mvn	r3, #0
  143088:	e3a00000 	mov	r0, #0
  14308c:	e58d3000 	str	r3, [sp]
  143090:	e1a01004 	mov	r1, r4
  143094:	e58d0004 	str	r0, [sp, #4]
  143098:	e3a03022 	mov	r3, #34	; 0x22
  14309c:	e3a02003 	mov	r2, #3
  1430a0:	e12fff35 	blx	r5
  1430a4:	eaffffde 	b	143024 <__init_tls+0x120>
  1430a8:	e59f2024 	ldr	r2, [pc, #36]	; 1430d4 <__init_tls+0x1d0>
  1430ac:	e59fc024 	ldr	ip, [pc, #36]	; 1430d8 <__init_tls+0x1d4>
  1430b0:	e592100c 	ldr	r1, [r2, #12]
  1430b4:	e5923004 	ldr	r3, [r2, #4]
  1430b8:	e5920010 	ldr	r0, [r2, #16]
  1430bc:	eaffffc1 	b	142fc8 <__init_tls+0xc4>
  1430c0:	e1a00005 	mov	r0, r5
  1430c4:	eaffffd6 	b	143024 <__init_tls+0x120>
  1430c8:	0014d3e4 	.word	0x0014d3e4
  1430cc:	6474e551 	.word	0x6474e551
  1430d0:	00000000 	.word	0x00000000
  1430d4:	0014f550 	.word	0x0014f550
  1430d8:	0056f058 	.word	0x0056f058
  1430dc:	0014f494 	.word	0x0014f494

001430e0 <__init_ssp>:
  1430e0:	e2501000 	subs	r1, r0, #0
  1430e4:	e92d4010 	push	{r4, lr}
  1430e8:	1a000009 	bne	143114 <__init_ssp+0x34>
  1430ec:	e59f3034 	ldr	r3, [pc, #52]	; 143128 <__init_ssp+0x48>
  1430f0:	e59f2034 	ldr	r2, [pc, #52]	; 14312c <__init_ssp+0x4c>
  1430f4:	e0010293 	mul	r1, r3, r2
  1430f8:	e5831000 	str	r1, [r3]
  1430fc:	e5933000 	ldr	r3, [r3]
  143100:	e59f2028 	ldr	r2, [pc, #40]	; 143130 <__init_ssp+0x50>
  143104:	e5920000 	ldr	r0, [r2]
  143108:	e12fff30 	blx	r0
  14310c:	e5003064 	str	r3, [r0, #-100]	; 0xffffff9c
  143110:	e8bd8010 	pop	{r4, pc}
  143114:	e3a02004 	mov	r2, #4
  143118:	e59f0008 	ldr	r0, [pc, #8]	; 143128 <__init_ssp+0x48>
  14311c:	ebfff71e 	bl	140d9c <memcpy>
  143120:	e59f3000 	ldr	r3, [pc]	; 143128 <__init_ssp+0x48>
  143124:	eafffff4 	b	1430fc <__init_ssp+0x1c>
  143128:	0056f0a4 	.word	0x0056f0a4
  14312c:	41c64e6d 	.word	0x41c64e6d
  143130:	0014d3dc 	.word	0x0014d3dc

00143134 <__stack_chk_fail>:
  143134:	e7f000f0 	.word	0xe7f000f0
  143138:	e12fff1e 	bx	lr

0014313c <_Exit>:
  14313c:	e92d4010 	push	{r4, lr}
  143140:	e1a04000 	mov	r4, r0
  143144:	e3a000f8 	mov	r0, #248	; 0xf8
  143148:	ebffe49a 	bl	13c3b8 <get_rtt_syscall>
  14314c:	e2503000 	subs	r3, r0, #0
  143150:	0a000001 	beq	14315c <_Exit+0x20>
  143154:	e1a00004 	mov	r0, r4
  143158:	e12fff33 	blx	r3
  14315c:	e3a00001 	mov	r0, #1
  143160:	ebffe494 	bl	13c3b8 <get_rtt_syscall>
  143164:	e2503000 	subs	r3, r0, #0
  143168:	0afffffb 	beq	14315c <_Exit+0x20>
  14316c:	eafffff8 	b	143154 <_Exit+0x18>

00143170 <abort>:
  143170:	e3a04000 	mov	r4, #0
  143174:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  143178:	e3a00006 	mov	r0, #6
  14317c:	e24dd024 	sub	sp, sp, #36	; 0x24
  143180:	ebffec24 	bl	13e218 <raise>
  143184:	e1a00004 	mov	r0, r4
  143188:	eb0000b0 	bl	143450 <__block_all_sigs>
  14318c:	e59f00b0 	ldr	r0, [pc, #176]	; 143244 <abort+0xd4>
  143190:	ebfffa6e 	bl	141b50 <__lock>
  143194:	e3a000ae 	mov	r0, #174	; 0xae
  143198:	e58d400c 	str	r4, [sp, #12]
  14319c:	e58d4010 	str	r4, [sp, #16]
  1431a0:	e58d4014 	str	r4, [sp, #20]
  1431a4:	e58d4018 	str	r4, [sp, #24]
  1431a8:	e58d401c 	str	r4, [sp, #28]
  1431ac:	ebffe481 	bl	13c3b8 <get_rtt_syscall>
  1431b0:	e2505000 	subs	r5, r0, #0
  1431b4:	0a000004 	beq	1431cc <abort+0x5c>
  1431b8:	e1a02004 	mov	r2, r4
  1431bc:	e28d100c 	add	r1, sp, #12
  1431c0:	e3a03008 	mov	r3, #8
  1431c4:	e3a00006 	mov	r0, #6
  1431c8:	e12fff35 	blx	r5
  1431cc:	e59f3074 	ldr	r3, [pc, #116]	; 143248 <abort+0xd8>
  1431d0:	e5930000 	ldr	r0, [r3]
  1431d4:	e12fff30 	blx	r0
  1431d8:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  1431dc:	e3a000ee 	mov	r0, #238	; 0xee
  1431e0:	ebffe474 	bl	13c3b8 <get_rtt_syscall>
  1431e4:	e2503000 	subs	r3, r0, #0
  1431e8:	0a000002 	beq	1431f8 <abort+0x88>
  1431ec:	e1a00004 	mov	r0, r4
  1431f0:	e3a01006 	mov	r1, #6
  1431f4:	e12fff33 	blx	r3
  1431f8:	e3a03020 	mov	r3, #32
  1431fc:	e3a05000 	mov	r5, #0
  143200:	e08d4003 	add	r4, sp, r3
  143204:	e3a000af 	mov	r0, #175	; 0xaf
  143208:	e58d5008 	str	r5, [sp, #8]
  14320c:	e524301c 	str	r3, [r4, #-28]!	; 0xffffffe4
  143210:	ebffe468 	bl	13c3b8 <get_rtt_syscall>
  143214:	e2506000 	subs	r6, r0, #0
  143218:	0a000004 	beq	143230 <abort+0xc0>
  14321c:	e1a02005 	mov	r2, r5
  143220:	e1a01004 	mov	r1, r4
  143224:	e3a03008 	mov	r3, #8
  143228:	e3a00001 	mov	r0, #1
  14322c:	e12fff36 	blx	r6
  143230:	e7f000f0 	.word	0xe7f000f0
  143234:	e3a00009 	mov	r0, #9
  143238:	ebffebf6 	bl	13e218 <raise>
  14323c:	e3a0007f 	mov	r0, #127	; 0x7f
  143240:	ebffffbd 	bl	14313c <_Exit>
  143244:	0056f0a8 	.word	0x0056f0a8
  143248:	0014d3dc 	.word	0x0014d3dc

0014324c <__expand_heap>:
  14324c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  143250:	e59f2178 	ldr	r2, [pc, #376]	; 1433d0 <__expand_heap+0x184>
  143254:	e5903000 	ldr	r3, [r0]
  143258:	e24dd01c 	sub	sp, sp, #28
  14325c:	e1530002 	cmp	r3, r2
  143260:	8a000051 	bhi	1433ac <__expand_heap+0x160>
  143264:	e59f7168 	ldr	r7, [pc, #360]	; 1433d4 <__expand_heap+0x188>
  143268:	e59f8168 	ldr	r8, [pc, #360]	; 1433d8 <__expand_heap+0x18c>
  14326c:	e5975000 	ldr	r5, [r7]
  143270:	e2634000 	rsb	r4, r3, #0
  143274:	e3550000 	cmp	r5, #0
  143278:	e0044008 	and	r4, r4, r8
  14327c:	e0844003 	add	r4, r4, r3
  143280:	e1a06000 	mov	r6, r0
  143284:	11e03005 	mvnne	r3, r5
  143288:	0a00003b 	beq	14337c <__expand_heap+0x130>
  14328c:	e1540003 	cmp	r4, r3
  143290:	2a00001d 	bcs	14330c <__expand_heap+0xc0>
  143294:	e59f3140 	ldr	r3, [pc, #320]	; 1433dc <__expand_heap+0x190>
  143298:	e0848005 	add	r8, r4, r5
  14329c:	e5933010 	ldr	r3, [r3, #16]
  1432a0:	e3530502 	cmp	r3, #8388608	; 0x800000
  1432a4:	21a02003 	movcs	r2, r3
  1432a8:	33a02502 	movcc	r2, #8388608	; 0x800000
  1432ac:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  1432b0:	e1580002 	cmp	r8, r2
  1432b4:	81530005 	cmphi	r3, r5
  1432b8:	8a000013 	bhi	14330c <__expand_heap+0xc0>
  1432bc:	e28d3014 	add	r3, sp, #20
  1432c0:	e3530502 	cmp	r3, #8388608	; 0x800000
  1432c4:	21a02003 	movcs	r2, r3
  1432c8:	33a02502 	movcc	r2, #8388608	; 0x800000
  1432cc:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  1432d0:	e1580002 	cmp	r8, r2
  1432d4:	81530005 	cmphi	r3, r5
  1432d8:	8a00000b 	bhi	14330c <__expand_heap+0xc0>
  1432dc:	e3a0002d 	mov	r0, #45	; 0x2d
  1432e0:	ebffe434 	bl	13c3b8 <get_rtt_syscall>
  1432e4:	e2503000 	subs	r3, r0, #0
  1432e8:	0a000036 	beq	1433c8 <__expand_heap+0x17c>
  1432ec:	e1a00008 	mov	r0, r8
  1432f0:	e12fff33 	blx	r3
  1432f4:	e5972000 	ldr	r2, [r7]
  1432f8:	e0823004 	add	r3, r2, r4
  1432fc:	e1530000 	cmp	r3, r0
  143300:	05864000 	streq	r4, [r6]
  143304:	05870000 	streq	r0, [r7]
  143308:	0a000018 	beq	143370 <__expand_heap+0x124>
  14330c:	e3a01a01 	mov	r1, #4096	; 0x1000
  143310:	e59f50c8 	ldr	r5, [pc, #200]	; 1433e0 <__expand_heap+0x194>
  143314:	e3a08000 	mov	r8, #0
  143318:	e5953000 	ldr	r3, [r5]
  14331c:	e3a09000 	mov	r9, #0
  143320:	e1a030a3 	lsr	r3, r3, #1
  143324:	e1a01311 	lsl	r1, r1, r3
  143328:	e1510004 	cmp	r1, r4
  14332c:	21a04001 	movcs	r4, r1
  143330:	e3e03000 	mvn	r3, #0
  143334:	e3a02003 	mov	r2, #3
  143338:	e58d3000 	str	r3, [sp]
  14333c:	e58d8008 	str	r8, [sp, #8]
  143340:	e58d900c 	str	r9, [sp, #12]
  143344:	e3a03022 	mov	r3, #34	; 0x22
  143348:	e1a01004 	mov	r1, r4
  14334c:	e3a00000 	mov	r0, #0
  143350:	ebffea5c 	bl	13dcc8 <__mmap>
  143354:	e3700001 	cmn	r0, #1
  143358:	e1a02000 	mov	r2, r0
  14335c:	03a02000 	moveq	r2, #0
  143360:	15953000 	ldrne	r3, [r5]
  143364:	15864000 	strne	r4, [r6]
  143368:	12833001 	addne	r3, r3, #1
  14336c:	15853000 	strne	r3, [r5]
  143370:	e1a00002 	mov	r0, r2
  143374:	e28dd01c 	add	sp, sp, #28
  143378:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  14337c:	e3a0002d 	mov	r0, #45	; 0x2d
  143380:	ebffe40c 	bl	13c3b8 <get_rtt_syscall>
  143384:	e2503000 	subs	r3, r0, #0
  143388:	0a00000c 	beq	1433c0 <__expand_heap+0x174>
  14338c:	e1a00005 	mov	r0, r5
  143390:	e12fff33 	blx	r3
  143394:	e2605000 	rsb	r5, r0, #0
  143398:	e0055008 	and	r5, r5, r8
  14339c:	e0855000 	add	r5, r5, r0
  1433a0:	e1e03005 	mvn	r3, r5
  1433a4:	e5875000 	str	r5, [r7]
  1433a8:	eaffffb7 	b	14328c <__expand_heap+0x40>
  1433ac:	ebffd6cb 	bl	138ee0 <__errno_location>
  1433b0:	e3a0300c 	mov	r3, #12
  1433b4:	e3a02000 	mov	r2, #0
  1433b8:	e5803000 	str	r3, [r0]
  1433bc:	eaffffeb 	b	143370 <__expand_heap+0x124>
  1433c0:	e3e03000 	mvn	r3, #0
  1433c4:	eafffff6 	b	1433a4 <__expand_heap+0x158>
  1433c8:	e1a00003 	mov	r0, r3
  1433cc:	eaffffc8 	b	1432f4 <__expand_heap+0xa8>
  1433d0:	7fffefff 	.word	0x7fffefff
  1433d4:	0014f568 	.word	0x0014f568
  1433d8:	00000fff 	.word	0x00000fff
  1433dc:	0056f058 	.word	0x0056f058
  1433e0:	0014f56c 	.word	0x0014f56c

001433e4 <frexpl>:
  1433e4:	ea000417 	b	144448 <frexp>

001433e8 <__mprotect>:
  1433e8:	e2811eff 	add	r1, r1, #4080	; 0xff0
  1433ec:	e92d4070 	push	{r4, r5, r6, lr}
  1433f0:	e281100f 	add	r1, r1, #15
  1433f4:	e59f5040 	ldr	r5, [pc, #64]	; 14343c <__mprotect+0x54>
  1433f8:	e0801001 	add	r1, r0, r1
  1433fc:	e0011005 	and	r1, r1, r5
  143400:	e0055000 	and	r5, r5, r0
  143404:	e3a0007d 	mov	r0, #125	; 0x7d
  143408:	e1a06002 	mov	r6, r2
  14340c:	e0414005 	sub	r4, r1, r5
  143410:	ebffe3e8 	bl	13c3b8 <get_rtt_syscall>
  143414:	e2503000 	subs	r3, r0, #0
  143418:	0a000005 	beq	143434 <__mprotect+0x4c>
  14341c:	e1a02006 	mov	r2, r6
  143420:	e1a01004 	mov	r1, r4
  143424:	e1a00005 	mov	r0, r5
  143428:	e12fff33 	blx	r3
  14342c:	e8bd4070 	pop	{r4, r5, r6, lr}
  143430:	eaffe415 	b	13c48c <__syscall_ret>
  143434:	e1a00003 	mov	r0, r3
  143438:	eafffffb 	b	14342c <__mprotect+0x44>
  14343c:	fffff000 	.word	0xfffff000

00143440 <wctomb>:
  143440:	e3500000 	cmp	r0, #0
  143444:	012fff1e 	bxeq	lr
  143448:	e3a02000 	mov	r2, #0
  14344c:	ea00042a 	b	1444fc <wcrtomb>

00143450 <__block_all_sigs>:
  143450:	e92d4010 	push	{r4, lr}
  143454:	e1a04000 	mov	r4, r0
  143458:	e3a000af 	mov	r0, #175	; 0xaf
  14345c:	ebffe3d5 	bl	13c3b8 <get_rtt_syscall>
  143460:	e250e000 	subs	lr, r0, #0
  143464:	08bd8010 	popeq	{r4, pc}
  143468:	e1a02004 	mov	r2, r4
  14346c:	e1a0c00e 	mov	ip, lr
  143470:	e8bd4010 	pop	{r4, lr}
  143474:	e3a03008 	mov	r3, #8
  143478:	e59f1004 	ldr	r1, [pc, #4]	; 143484 <__block_all_sigs+0x34>
  14347c:	e3a00000 	mov	r0, #0
  143480:	e12fff1c 	bx	ip
  143484:	0014cfb4 	.word	0x0014cfb4

00143488 <__block_app_sigs>:
  143488:	e92d4010 	push	{r4, lr}
  14348c:	e1a04000 	mov	r4, r0
  143490:	e3a000af 	mov	r0, #175	; 0xaf
  143494:	ebffe3c7 	bl	13c3b8 <get_rtt_syscall>
  143498:	e250e000 	subs	lr, r0, #0
  14349c:	08bd8010 	popeq	{r4, pc}
  1434a0:	e1a02004 	mov	r2, r4
  1434a4:	e1a0c00e 	mov	ip, lr
  1434a8:	e8bd4010 	pop	{r4, lr}
  1434ac:	e3a03008 	mov	r3, #8
  1434b0:	e59f1004 	ldr	r1, [pc, #4]	; 1434bc <__block_app_sigs+0x34>
  1434b4:	e3a00000 	mov	r0, #0
  1434b8:	e12fff1c 	bx	ip
  1434bc:	0014cfbc 	.word	0x0014cfbc

001434c0 <__restore_sigs>:
  1434c0:	e92d4010 	push	{r4, lr}
  1434c4:	e1a04000 	mov	r4, r0
  1434c8:	e3a000af 	mov	r0, #175	; 0xaf
  1434cc:	ebffe3b9 	bl	13c3b8 <get_rtt_syscall>
  1434d0:	e250e000 	subs	lr, r0, #0
  1434d4:	08bd8010 	popeq	{r4, pc}
  1434d8:	e1a01004 	mov	r1, r4
  1434dc:	e1a0c00e 	mov	ip, lr
  1434e0:	e8bd4010 	pop	{r4, lr}
  1434e4:	e3a03008 	mov	r3, #8
  1434e8:	e3a02000 	mov	r2, #0
  1434ec:	e3a00002 	mov	r0, #2
  1434f0:	e12fff1c 	bx	ip

001434f4 <__lockfile>:
  1434f4:	e59f2124 	ldr	r2, [pc, #292]	; 143620 <__lockfile+0x12c>
  1434f8:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
  1434fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  143500:	e1a06000 	mov	r6, r0
  143504:	e5920000 	ldr	r0, [r2]
  143508:	e12fff30 	blx	r0
  14350c:	e510805c 	ldr	r8, [r0, #-92]	; 0xffffffa4
  143510:	e3c33101 	bic	r3, r3, #1073741824	; 0x40000000
  143514:	e1530008 	cmp	r3, r8
  143518:	0a00003e 	beq	143618 <__lockfile+0x124>
  14351c:	e59f7100 	ldr	r7, [pc, #256]	; 143624 <__lockfile+0x130>
  143520:	e286504c 	add	r5, r6, #76	; 0x4c
  143524:	ea000002 	b	143534 <__lockfile+0x40>
  143528:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  14352c:	e3530000 	cmp	r3, #0
  143530:	1a000008 	bne	143558 <__lockfile+0x64>
  143534:	e3a00000 	mov	r0, #0
  143538:	e1a01008 	mov	r1, r8
  14353c:	e1a02005 	mov	r2, r5
  143540:	e5973000 	ldr	r3, [r7]
  143544:	e12fff33 	blx	r3
  143548:	e3500000 	cmp	r0, #0
  14354c:	1afffff5 	bne	143528 <__lockfile+0x34>
  143550:	e3a00001 	mov	r0, #1
  143554:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143558:	e3888101 	orr	r8, r8, #1073741824	; 0x40000000
  14355c:	ea000002 	b	14356c <__lockfile+0x78>
  143560:	e596404c 	ldr	r4, [r6, #76]	; 0x4c
  143564:	e3540000 	cmp	r4, #0
  143568:	1a000007 	bne	14358c <__lockfile+0x98>
  14356c:	e3a00000 	mov	r0, #0
  143570:	e1a01008 	mov	r1, r8
  143574:	e1a02005 	mov	r2, r5
  143578:	e5973000 	ldr	r3, [r7]
  14357c:	e12fff33 	blx	r3
  143580:	e3500000 	cmp	r0, #0
  143584:	1afffff5 	bne	143560 <__lockfile+0x6c>
  143588:	eafffff0 	b	143550 <__lockfile+0x5c>
  14358c:	e3140101 	tst	r4, #1073741824	; 0x40000000
  143590:	e3849101 	orr	r9, r4, #1073741824	; 0x40000000
  143594:	0a000017 	beq	1435f8 <__lockfile+0x104>
  143598:	e3a000f0 	mov	r0, #240	; 0xf0
  14359c:	ebffe385 	bl	13c3b8 <get_rtt_syscall>
  1435a0:	e2504000 	subs	r4, r0, #0
  1435a4:	0afffff0 	beq	14356c <__lockfile+0x78>
  1435a8:	e3a03000 	mov	r3, #0
  1435ac:	e1a02009 	mov	r2, r9
  1435b0:	e3a01080 	mov	r1, #128	; 0x80
  1435b4:	e1a00005 	mov	r0, r5
  1435b8:	e12fff34 	blx	r4
  1435bc:	e3700026 	cmn	r0, #38	; 0x26
  1435c0:	1affffe9 	bne	14356c <__lockfile+0x78>
  1435c4:	e3a000f0 	mov	r0, #240	; 0xf0
  1435c8:	ebffe37a 	bl	13c3b8 <get_rtt_syscall>
  1435cc:	e2504000 	subs	r4, r0, #0
  1435d0:	0affffe5 	beq	14356c <__lockfile+0x78>
  1435d4:	e3a03000 	mov	r3, #0
  1435d8:	e1a02009 	mov	r2, r9
  1435dc:	e1a01003 	mov	r1, r3
  1435e0:	e1a00005 	mov	r0, r5
  1435e4:	e12fff34 	blx	r4
  1435e8:	eaffffdf 	b	14356c <__lockfile+0x78>
  1435ec:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  1435f0:	e1530004 	cmp	r3, r4
  1435f4:	1affffdc 	bne	14356c <__lockfile+0x78>
  1435f8:	e1a00004 	mov	r0, r4
  1435fc:	e1a01009 	mov	r1, r9
  143600:	e1a02005 	mov	r2, r5
  143604:	e5973000 	ldr	r3, [r7]
  143608:	e12fff33 	blx	r3
  14360c:	e3500000 	cmp	r0, #0
  143610:	1afffff5 	bne	1435ec <__lockfile+0xf8>
  143614:	eaffffdf 	b	143598 <__lockfile+0xa4>
  143618:	e3a00000 	mov	r0, #0
  14361c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143620:	0014d3dc 	.word	0x0014d3dc
  143624:	0014d3d8 	.word	0x0014d3d8

00143628 <__unlockfile>:
  143628:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  14362c:	e1a05000 	mov	r5, r0
  143630:	e59f7084 	ldr	r7, [pc, #132]	; 1436bc <__unlockfile+0x94>
  143634:	e280604c 	add	r6, r0, #76	; 0x4c
  143638:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  14363c:	ea000002 	b	14364c <__unlockfile+0x24>
  143640:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  143644:	e1540003 	cmp	r4, r3
  143648:	1afffffa 	bne	143638 <__unlockfile+0x10>
  14364c:	e1a00004 	mov	r0, r4
  143650:	e3a01000 	mov	r1, #0
  143654:	e1a02006 	mov	r2, r6
  143658:	e5973000 	ldr	r3, [r7]
  14365c:	e12fff33 	blx	r3
  143660:	e1500001 	cmp	r0, r1
  143664:	1afffff5 	bne	143640 <__unlockfile+0x18>
  143668:	e3140101 	tst	r4, #1073741824	; 0x40000000
  14366c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143670:	e3a000f0 	mov	r0, #240	; 0xf0
  143674:	ebffe34f 	bl	13c3b8 <get_rtt_syscall>
  143678:	e2503000 	subs	r3, r0, #0
  14367c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143680:	e3a02001 	mov	r2, #1
  143684:	e3a01081 	mov	r1, #129	; 0x81
  143688:	e1a00006 	mov	r0, r6
  14368c:	e12fff33 	blx	r3
  143690:	e3700026 	cmn	r0, #38	; 0x26
  143694:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  143698:	e3a000f0 	mov	r0, #240	; 0xf0
  14369c:	ebffe345 	bl	13c3b8 <get_rtt_syscall>
  1436a0:	e2503000 	subs	r3, r0, #0
  1436a4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1436a8:	e3a02001 	mov	r2, #1
  1436ac:	e1a00006 	mov	r0, r6
  1436b0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  1436b4:	e1a01002 	mov	r1, r2
  1436b8:	e12fff13 	bx	r3
  1436bc:	0014d3d8 	.word	0x0014d3d8

001436c0 <__overflow>:
  1436c0:	e92d4010 	push	{r4, lr}
  1436c4:	e5903010 	ldr	r3, [r0, #16]
  1436c8:	e24dd008 	sub	sp, sp, #8
  1436cc:	e3530000 	cmp	r3, #0
  1436d0:	e1a04000 	mov	r4, r0
  1436d4:	e5cd1007 	strb	r1, [sp, #7]
  1436d8:	0a000015 	beq	143734 <__overflow+0x74>
  1436dc:	e5942014 	ldr	r2, [r4, #20]
  1436e0:	e1520003 	cmp	r2, r3
  1436e4:	1a000009 	bne	143710 <__overflow+0x50>
  1436e8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  1436ec:	e1a00004 	mov	r0, r4
  1436f0:	e3a02001 	mov	r2, #1
  1436f4:	e28d1007 	add	r1, sp, #7
  1436f8:	e12fff33 	blx	r3
  1436fc:	e3500001 	cmp	r0, #1
  143700:	1a00000f 	bne	143744 <__overflow+0x84>
  143704:	e5dd0007 	ldrb	r0, [sp, #7]
  143708:	e28dd008 	add	sp, sp, #8
  14370c:	e8bd8010 	pop	{r4, pc}
  143710:	e5dd0007 	ldrb	r0, [sp, #7]
  143714:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  143718:	e1500003 	cmp	r0, r3
  14371c:	0afffff1 	beq	1436e8 <__overflow+0x28>
  143720:	e2823001 	add	r3, r2, #1
  143724:	e5843014 	str	r3, [r4, #20]
  143728:	e5c20000 	strb	r0, [r2]
  14372c:	e28dd008 	add	sp, sp, #8
  143730:	e8bd8010 	pop	{r4, pc}
  143734:	eb00008c 	bl	14396c <__towrite>
  143738:	e3500000 	cmp	r0, #0
  14373c:	05943010 	ldreq	r3, [r4, #16]
  143740:	0affffe5 	beq	1436dc <__overflow+0x1c>
  143744:	e3e00000 	mvn	r0, #0
  143748:	eaffffee 	b	143708 <__overflow+0x48>

0014374c <dummy>:
  14374c:	e12fff1e 	bx	lr

00143750 <__stdio_close>:
  143750:	e92d4010 	push	{r4, lr}
  143754:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
  143758:	ebfffd87 	bl	142d7c <__aio_close>
  14375c:	e1a04000 	mov	r4, r0
  143760:	e3a00006 	mov	r0, #6
  143764:	ebffe313 	bl	13c3b8 <get_rtt_syscall>
  143768:	e2503000 	subs	r3, r0, #0
  14376c:	0a000003 	beq	143780 <__stdio_close+0x30>
  143770:	e1a00004 	mov	r0, r4
  143774:	e12fff33 	blx	r3
  143778:	e8bd4010 	pop	{r4, lr}
  14377c:	eaffe342 	b	13c48c <__syscall_ret>
  143780:	e1a00003 	mov	r0, r3
  143784:	eafffffb 	b	143778 <__stdio_close+0x28>

00143788 <__stdio_seek>:
  143788:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  14378c:	e590503c 	ldr	r5, [r0, #60]	; 0x3c
  143790:	e24dd014 	sub	sp, sp, #20
  143794:	e3a0008c 	mov	r0, #140	; 0x8c
  143798:	e1a07002 	mov	r7, r2
  14379c:	e1a06003 	mov	r6, r3
  1437a0:	ebffe304 	bl	13c3b8 <get_rtt_syscall>
  1437a4:	e2504000 	subs	r4, r0, #0
  1437a8:	0a00000e 	beq	1437e8 <__stdio_seek+0x60>
  1437ac:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  1437b0:	e1a02007 	mov	r2, r7
  1437b4:	e58d3000 	str	r3, [sp]
  1437b8:	e1a01006 	mov	r1, r6
  1437bc:	e28d3008 	add	r3, sp, #8
  1437c0:	e1a00005 	mov	r0, r5
  1437c4:	e12fff34 	blx	r4
  1437c8:	ebffe32f 	bl	13c48c <__syscall_ret>
  1437cc:	e3500000 	cmp	r0, #0
  1437d0:	b3e00000 	mvnlt	r0, #0
  1437d4:	b3e01000 	mvnlt	r1, #0
  1437d8:	a28d1008 	addge	r1, sp, #8
  1437dc:	a8910003 	ldmge	r1, {r0, r1}
  1437e0:	e28dd014 	add	sp, sp, #20
  1437e4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  1437e8:	e1a00004 	mov	r0, r4
  1437ec:	eafffff5 	b	1437c8 <__stdio_seek+0x40>

001437f0 <__stdio_write>:
  1437f0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  1437f4:	e590301c 	ldr	r3, [r0, #28]
  1437f8:	e5905014 	ldr	r5, [r0, #20]
  1437fc:	e24dd014 	sub	sp, sp, #20
  143800:	e0455003 	sub	r5, r5, r3
  143804:	e88d0028 	stm	sp, {r3, r5}
  143808:	e1a06000 	mov	r6, r0
  14380c:	e1a08002 	mov	r8, r2
  143810:	e3a07002 	mov	r7, #2
  143814:	e58d200c 	str	r2, [sp, #12]
  143818:	e58d1008 	str	r1, [sp, #8]
  14381c:	e0855002 	add	r5, r5, r2
  143820:	e1a0400d 	mov	r4, sp
  143824:	ea00000d 	b	143860 <__stdio_write+0x70>
  143828:	e3500000 	cmp	r0, #0
  14382c:	ba000020 	blt	1438b4 <__stdio_write+0xc4>
  143830:	e5943004 	ldr	r3, [r4, #4]
  143834:	e0455000 	sub	r5, r5, r0
  143838:	e1500003 	cmp	r0, r3
  14383c:	80400003 	subhi	r0, r0, r3
  143840:	8594300c 	ldrhi	r3, [r4, #12]
  143844:	82844008 	addhi	r4, r4, #8
  143848:	e5942000 	ldr	r2, [r4]
  14384c:	e0433000 	sub	r3, r3, r0
  143850:	e0820000 	add	r0, r2, r0
  143854:	82477001 	subhi	r7, r7, #1
  143858:	e5843004 	str	r3, [r4, #4]
  14385c:	e5840000 	str	r0, [r4]
  143860:	e3a00092 	mov	r0, #146	; 0x92
  143864:	e596903c 	ldr	r9, [r6, #60]	; 0x3c
  143868:	ebffe2d2 	bl	13c3b8 <get_rtt_syscall>
  14386c:	e2503000 	subs	r3, r0, #0
  143870:	0a00001c 	beq	1438e8 <__stdio_write+0xf8>
  143874:	e1a00009 	mov	r0, r9
  143878:	e1a02007 	mov	r2, r7
  14387c:	e1a01004 	mov	r1, r4
  143880:	e12fff33 	blx	r3
  143884:	ebffe300 	bl	13c48c <__syscall_ret>
  143888:	e1500005 	cmp	r0, r5
  14388c:	1affffe5 	bne	143828 <__stdio_write+0x38>
  143890:	e1a00008 	mov	r0, r8
  143894:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
  143898:	e5963030 	ldr	r3, [r6, #48]	; 0x30
  14389c:	e586201c 	str	r2, [r6, #28]
  1438a0:	e0823003 	add	r3, r2, r3
  1438a4:	e5862014 	str	r2, [r6, #20]
  1438a8:	e5863010 	str	r3, [r6, #16]
  1438ac:	e28dd014 	add	sp, sp, #20
  1438b0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  1438b4:	e3a00000 	mov	r0, #0
  1438b8:	e5963000 	ldr	r3, [r6]
  1438bc:	e3570002 	cmp	r7, #2
  1438c0:	e3833020 	orr	r3, r3, #32
  1438c4:	e5863000 	str	r3, [r6]
  1438c8:	e5860010 	str	r0, [r6, #16]
  1438cc:	e586001c 	str	r0, [r6, #28]
  1438d0:	e5860014 	str	r0, [r6, #20]
  1438d4:	0afffff4 	beq	1438ac <__stdio_write+0xbc>
  1438d8:	e5940004 	ldr	r0, [r4, #4]
  1438dc:	e0480000 	sub	r0, r8, r0
  1438e0:	e28dd014 	add	sp, sp, #20
  1438e4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  1438e8:	e1a00003 	mov	r0, r3
  1438ec:	eaffffe4 	b	143884 <__stdio_write+0x94>

001438f0 <__stdout_write>:
  1438f0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  1438f4:	e1a04000 	mov	r4, r0
  1438f8:	e5900000 	ldr	r0, [r0]
  1438fc:	e59f3060 	ldr	r3, [pc, #96]	; 143964 <__stdout_write+0x74>
  143900:	e3100040 	tst	r0, #64	; 0x40
  143904:	e24dd00c 	sub	sp, sp, #12
  143908:	e1a05001 	mov	r5, r1
  14390c:	e1a06002 	mov	r6, r2
  143910:	e5843024 	str	r3, [r4, #36]	; 0x24
  143914:	0a000005 	beq	143930 <__stdout_write+0x40>
  143918:	e1a02006 	mov	r2, r6
  14391c:	e1a01005 	mov	r1, r5
  143920:	e1a00004 	mov	r0, r4
  143924:	ebffffb1 	bl	1437f0 <__stdio_write>
  143928:	e28dd00c 	add	sp, sp, #12
  14392c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  143930:	e3a00036 	mov	r0, #54	; 0x36
  143934:	e594703c 	ldr	r7, [r4, #60]	; 0x3c
  143938:	ebffe29e 	bl	13c3b8 <get_rtt_syscall>
  14393c:	e2503000 	subs	r3, r0, #0
  143940:	0afffff4 	beq	143918 <__stdout_write+0x28>
  143944:	e1a0200d 	mov	r2, sp
  143948:	e1a00007 	mov	r0, r7
  14394c:	e59f1014 	ldr	r1, [pc, #20]	; 143968 <__stdout_write+0x78>
  143950:	e12fff33 	blx	r3
  143954:	e3500000 	cmp	r0, #0
  143958:	13e03000 	mvnne	r3, #0
  14395c:	15843050 	strne	r3, [r4, #80]	; 0x50
  143960:	eaffffec 	b	143918 <__stdout_write+0x28>
  143964:	001437f0 	.word	0x001437f0
  143968:	00005413 	.word	0x00005413

0014396c <__towrite>:
  14396c:	e1a03000 	mov	r3, r0
  143970:	e5901048 	ldr	r1, [r0, #72]	; 0x48
  143974:	e5900000 	ldr	r0, [r0]
  143978:	e2412001 	sub	r2, r1, #1
  14397c:	e1822001 	orr	r2, r2, r1
  143980:	e2101008 	ands	r1, r0, #8
  143984:	e5832048 	str	r2, [r3, #72]	; 0x48
  143988:	1a000009 	bne	1439b4 <__towrite+0x48>
  14398c:	e593c02c 	ldr	ip, [r3, #44]	; 0x2c
  143990:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  143994:	e1a00001 	mov	r0, r1
  143998:	e08c2002 	add	r2, ip, r2
  14399c:	e5831008 	str	r1, [r3, #8]
  1439a0:	e5831004 	str	r1, [r3, #4]
  1439a4:	e583c01c 	str	ip, [r3, #28]
  1439a8:	e583c014 	str	ip, [r3, #20]
  1439ac:	e5832010 	str	r2, [r3, #16]
  1439b0:	e12fff1e 	bx	lr
  1439b4:	e3800020 	orr	r0, r0, #32
  1439b8:	e5830000 	str	r0, [r3]
  1439bc:	e3e00000 	mvn	r0, #0
  1439c0:	e12fff1e 	bx	lr

001439c4 <__towrite_needs_stdio_exit>:
  1439c4:	ea000336 	b	1446a4 <__stdio_exit>

001439c8 <locking_putc>:
  1439c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1439cc:	e1a05001 	mov	r5, r1
  1439d0:	e1a04000 	mov	r4, r0
  1439d4:	e59f7110 	ldr	r7, [pc, #272]	; 143aec <locking_putc+0x124>
  1439d8:	e281604c 	add	r6, r1, #76	; 0x4c
  1439dc:	ea000002 	b	1439ec <locking_putc+0x24>
  1439e0:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  1439e4:	e3530000 	cmp	r3, #0
  1439e8:	1a000021 	bne	143a74 <locking_putc+0xac>
  1439ec:	e3a00000 	mov	r0, #0
  1439f0:	e3e01103 	mvn	r1, #-1073741824	; 0xc0000000
  1439f4:	e1a02006 	mov	r2, r6
  1439f8:	e5973000 	ldr	r3, [r7]
  1439fc:	e12fff33 	blx	r3
  143a00:	e3500000 	cmp	r0, #0
  143a04:	1afffff5 	bne	1439e0 <locking_putc+0x18>
  143a08:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  143a0c:	e20480ff 	and	r8, r4, #255	; 0xff
  143a10:	e1530008 	cmp	r3, r8
  143a14:	0a00001c 	beq	143a8c <locking_putc+0xc4>
  143a18:	e5953014 	ldr	r3, [r5, #20]
  143a1c:	e5952010 	ldr	r2, [r5, #16]
  143a20:	e1530002 	cmp	r3, r2
  143a24:	0a000018 	beq	143a8c <locking_putc+0xc4>
  143a28:	e2832001 	add	r2, r3, #1
  143a2c:	e5852014 	str	r2, [r5, #20]
  143a30:	e5c34000 	strb	r4, [r3]
  143a34:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  143a38:	ea000002 	b	143a48 <locking_putc+0x80>
  143a3c:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  143a40:	e1540003 	cmp	r4, r3
  143a44:	1afffffa 	bne	143a34 <locking_putc+0x6c>
  143a48:	e1a00004 	mov	r0, r4
  143a4c:	e3a01000 	mov	r1, #0
  143a50:	e1a02006 	mov	r2, r6
  143a54:	e5973000 	ldr	r3, [r7]
  143a58:	e12fff33 	blx	r3
  143a5c:	e1500001 	cmp	r0, r1
  143a60:	1afffff5 	bne	143a3c <locking_putc+0x74>
  143a64:	e3140101 	tst	r4, #1073741824	; 0x40000000
  143a68:	1a00000c 	bne	143aa0 <locking_putc+0xd8>
  143a6c:	e1a00008 	mov	r0, r8
  143a70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  143a74:	e1a00005 	mov	r0, r5
  143a78:	ebfffe9d 	bl	1434f4 <__lockfile>
  143a7c:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  143a80:	e20480ff 	and	r8, r4, #255	; 0xff
  143a84:	e1530008 	cmp	r3, r8
  143a88:	1affffe2 	bne	143a18 <locking_putc+0x50>
  143a8c:	e1a01008 	mov	r1, r8
  143a90:	e1a00005 	mov	r0, r5
  143a94:	ebffff09 	bl	1436c0 <__overflow>
  143a98:	e1a08000 	mov	r8, r0
  143a9c:	eaffffe4 	b	143a34 <locking_putc+0x6c>
  143aa0:	e3a000f0 	mov	r0, #240	; 0xf0
  143aa4:	ebffe243 	bl	13c3b8 <get_rtt_syscall>
  143aa8:	e2503000 	subs	r3, r0, #0
  143aac:	0affffee 	beq	143a6c <locking_putc+0xa4>
  143ab0:	e3a02001 	mov	r2, #1
  143ab4:	e3a01081 	mov	r1, #129	; 0x81
  143ab8:	e1a00006 	mov	r0, r6
  143abc:	e12fff33 	blx	r3
  143ac0:	e3700026 	cmn	r0, #38	; 0x26
  143ac4:	1affffe8 	bne	143a6c <locking_putc+0xa4>
  143ac8:	e3a000f0 	mov	r0, #240	; 0xf0
  143acc:	ebffe239 	bl	13c3b8 <get_rtt_syscall>
  143ad0:	e2503000 	subs	r3, r0, #0
  143ad4:	0affffe4 	beq	143a6c <locking_putc+0xa4>
  143ad8:	e3a02001 	mov	r2, #1
  143adc:	e1a00006 	mov	r0, r6
  143ae0:	e1a01002 	mov	r1, r2
  143ae4:	e12fff33 	blx	r3
  143ae8:	eaffffdf 	b	143a6c <locking_putc+0xa4>
  143aec:	0014d3d8 	.word	0x0014d3d8

00143af0 <fputc>:
  143af0:	e591204c 	ldr	r2, [r1, #76]	; 0x4c
  143af4:	e1a03001 	mov	r3, r1
  143af8:	e3520000 	cmp	r2, #0
  143afc:	e1a0c000 	mov	ip, r0
  143b00:	ba00001d 	blt	143b7c <fputc+0x8c>
  143b04:	0a000017 	beq	143b68 <fputc+0x78>
  143b08:	e59f10a8 	ldr	r1, [pc, #168]	; 143bb8 <fputc+0xc8>
  143b0c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  143b10:	e5910000 	ldr	r0, [r1]
  143b14:	e12fff30 	blx	r0
  143b18:	e510105c 	ldr	r1, [r0, #-92]	; 0xffffffa4
  143b1c:	e3c22101 	bic	r2, r2, #1073741824	; 0x40000000
  143b20:	e1520001 	cmp	r2, r1
  143b24:	0a000003 	beq	143b38 <fputc+0x48>
  143b28:	e1a01003 	mov	r1, r3
  143b2c:	e1a0000c 	mov	r0, ip
  143b30:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  143b34:	eaffffa3 	b	1439c8 <locking_putc>
  143b38:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  143b3c:	e20c00ff 	and	r0, ip, #255	; 0xff
  143b40:	e1500002 	cmp	r0, r2
  143b44:	0a000008 	beq	143b6c <fputc+0x7c>
  143b48:	e5932014 	ldr	r2, [r3, #20]
  143b4c:	e5931010 	ldr	r1, [r3, #16]
  143b50:	e1520001 	cmp	r2, r1
  143b54:	0a000004 	beq	143b6c <fputc+0x7c>
  143b58:	e2821001 	add	r1, r2, #1
  143b5c:	e5831014 	str	r1, [r3, #20]
  143b60:	e5c2c000 	strb	ip, [r2]
  143b64:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  143b68:	eaffff96 	b	1439c8 <locking_putc>
  143b6c:	e1a01000 	mov	r1, r0
  143b70:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  143b74:	e1a00003 	mov	r0, r3
  143b78:	eafffed0 	b	1436c0 <__overflow>
  143b7c:	e5912050 	ldr	r2, [r1, #80]	; 0x50
  143b80:	e20000ff 	and	r0, r0, #255	; 0xff
  143b84:	e1500002 	cmp	r0, r2
  143b88:	0a000007 	beq	143bac <fputc+0xbc>
  143b8c:	e5912014 	ldr	r2, [r1, #20]
  143b90:	e5911010 	ldr	r1, [r1, #16]
  143b94:	e1520001 	cmp	r2, r1
  143b98:	0a000003 	beq	143bac <fputc+0xbc>
  143b9c:	e2821001 	add	r1, r2, #1
  143ba0:	e5831014 	str	r1, [r3, #20]
  143ba4:	e5c2c000 	strb	ip, [r2]
  143ba8:	e12fff1e 	bx	lr
  143bac:	e1a01000 	mov	r1, r0
  143bb0:	e1a00003 	mov	r0, r3
  143bb4:	eafffec1 	b	1436c0 <__overflow>
  143bb8:	0014d3dc 	.word	0x0014d3dc

00143bbc <fputs>:
  143bbc:	e92d4070 	push	{r4, r5, r6, lr}
  143bc0:	e1a06001 	mov	r6, r1
  143bc4:	e1a05000 	mov	r5, r0
  143bc8:	ebfff63c 	bl	1414c0 <strlen>
  143bcc:	e1a03006 	mov	r3, r6
  143bd0:	e1a04000 	mov	r4, r0
  143bd4:	e1a02000 	mov	r2, r0
  143bd8:	e3a01001 	mov	r1, #1
  143bdc:	e1a00005 	mov	r0, r5
  143be0:	eb000041 	bl	143cec <fwrite>
  143be4:	e0500004 	subs	r0, r0, r4
  143be8:	13e00000 	mvnne	r0, #0
  143bec:	e8bd8070 	pop	{r4, r5, r6, pc}

00143bf0 <__fwritex>:
  143bf0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  143bf4:	e5924010 	ldr	r4, [r2, #16]
  143bf8:	e1a05002 	mov	r5, r2
  143bfc:	e3540000 	cmp	r4, #0
  143c00:	e1a06000 	mov	r6, r0
  143c04:	e1a07001 	mov	r7, r1
  143c08:	0a000009 	beq	143c34 <__fwritex+0x44>
  143c0c:	e5950014 	ldr	r0, [r5, #20]
  143c10:	e0444000 	sub	r4, r4, r0
  143c14:	e1540007 	cmp	r4, r7
  143c18:	2a00000b 	bcs	143c4c <__fwritex+0x5c>
  143c1c:	e1a02007 	mov	r2, r7
  143c20:	e1a01006 	mov	r1, r6
  143c24:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  143c28:	e1a00005 	mov	r0, r5
  143c2c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  143c30:	e12fff13 	bx	r3
  143c34:	e1a00002 	mov	r0, r2
  143c38:	ebffff4b 	bl	14396c <__towrite>
  143c3c:	e3500000 	cmp	r0, #0
  143c40:	1a000027 	bne	143ce4 <__fwritex+0xf4>
  143c44:	e5954010 	ldr	r4, [r5, #16]
  143c48:	eaffffef 	b	143c0c <__fwritex+0x1c>
  143c4c:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  143c50:	e3530000 	cmp	r3, #0
  143c54:	ba00000d 	blt	143c90 <__fwritex+0xa0>
  143c58:	e3570000 	cmp	r7, #0
  143c5c:	0a00000b 	beq	143c90 <__fwritex+0xa0>
  143c60:	e2473001 	sub	r3, r7, #1
  143c64:	e7d62003 	ldrb	r2, [r6, r3]
  143c68:	e0863003 	add	r3, r6, r3
  143c6c:	e352000a 	cmp	r2, #10
  143c70:	1a000003 	bne	143c84 <__fwritex+0x94>
  143c74:	ea00000e 	b	143cb4 <__fwritex+0xc4>
  143c78:	e5732001 	ldrb	r2, [r3, #-1]!
  143c7c:	e352000a 	cmp	r2, #10
  143c80:	0a00000c 	beq	143cb8 <__fwritex+0xc8>
  143c84:	e1530006 	cmp	r3, r6
  143c88:	e0434006 	sub	r4, r3, r6
  143c8c:	1afffff9 	bne	143c78 <__fwritex+0x88>
  143c90:	e1a04007 	mov	r4, r7
  143c94:	e1a02004 	mov	r2, r4
  143c98:	e1a01006 	mov	r1, r6
  143c9c:	ebfff43e 	bl	140d9c <memcpy>
  143ca0:	e5953014 	ldr	r3, [r5, #20]
  143ca4:	e1a00007 	mov	r0, r7
  143ca8:	e0834004 	add	r4, r3, r4
  143cac:	e5854014 	str	r4, [r5, #20]
  143cb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  143cb4:	e1a04007 	mov	r4, r7
  143cb8:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  143cbc:	e1a02004 	mov	r2, r4
  143cc0:	e1a01006 	mov	r1, r6
  143cc4:	e1a00005 	mov	r0, r5
  143cc8:	e12fff33 	blx	r3
  143ccc:	e1500004 	cmp	r0, r4
  143cd0:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
  143cd4:	e0866004 	add	r6, r6, r4
  143cd8:	e5950014 	ldr	r0, [r5, #20]
  143cdc:	e0474004 	sub	r4, r7, r4
  143ce0:	eaffffeb 	b	143c94 <__fwritex+0xa4>
  143ce4:	e1a00004 	mov	r0, r4
  143ce8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00143cec <fwrite>:
  143cec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  143cf0:	e1a05003 	mov	r5, r3
  143cf4:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
  143cf8:	e3510000 	cmp	r1, #0
  143cfc:	e1a04002 	mov	r4, r2
  143d00:	11a04002 	movne	r4, r2
  143d04:	03a04000 	moveq	r4, #0
  143d08:	e3530000 	cmp	r3, #0
  143d0c:	e1a06001 	mov	r6, r1
  143d10:	e0070192 	mul	r7, r2, r1
  143d14:	aa000009 	bge	143d40 <fwrite+0x54>
  143d18:	e1a02005 	mov	r2, r5
  143d1c:	e1a01007 	mov	r1, r7
  143d20:	ebffffb2 	bl	143bf0 <__fwritex>
  143d24:	e1a08000 	mov	r8, r0
  143d28:	e1570008 	cmp	r7, r8
  143d2c:	0a000012 	beq	143d7c <fwrite+0x90>
  143d30:	e1a01006 	mov	r1, r6
  143d34:	e1a00008 	mov	r0, r8
  143d38:	ebffd2cf 	bl	13887c <__udivsi3>
  143d3c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143d40:	e1a08000 	mov	r8, r0
  143d44:	e1a00005 	mov	r0, r5
  143d48:	ebfffde9 	bl	1434f4 <__lockfile>
  143d4c:	e1a02005 	mov	r2, r5
  143d50:	e1a09000 	mov	r9, r0
  143d54:	e1a01007 	mov	r1, r7
  143d58:	e1a00008 	mov	r0, r8
  143d5c:	ebffffa3 	bl	143bf0 <__fwritex>
  143d60:	e3590000 	cmp	r9, #0
  143d64:	e1a08000 	mov	r8, r0
  143d68:	0affffee 	beq	143d28 <fwrite+0x3c>
  143d6c:	e1a00005 	mov	r0, r5
  143d70:	ebfffe2c 	bl	143628 <__unlockfile>
  143d74:	e1570008 	cmp	r7, r8
  143d78:	1affffec 	bne	143d30 <fwrite+0x44>
  143d7c:	e1a00004 	mov	r0, r4
  143d80:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00143d84 <memchr>:
  143d84:	e3100003 	tst	r0, #3
  143d88:	e20110ff 	and	r1, r1, #255	; 0xff
  143d8c:	0a000010 	beq	143dd4 <memchr+0x50>
  143d90:	e3520000 	cmp	r2, #0
  143d94:	0a000031 	beq	143e60 <memchr+0xdc>
  143d98:	e5d03000 	ldrb	r3, [r0]
  143d9c:	e1530001 	cmp	r3, r1
  143da0:	0a00003e 	beq	143ea0 <memchr+0x11c>
  143da4:	e2803001 	add	r3, r0, #1
  143da8:	ea000005 	b	143dc4 <memchr+0x40>
  143dac:	e3520000 	cmp	r2, #0
  143db0:	0a00002a 	beq	143e60 <memchr+0xdc>
  143db4:	e5d3c000 	ldrb	ip, [r3]
  143db8:	e2833001 	add	r3, r3, #1
  143dbc:	e15c0001 	cmp	ip, r1
  143dc0:	0a000036 	beq	143ea0 <memchr+0x11c>
  143dc4:	e3130003 	tst	r3, #3
  143dc8:	e2422001 	sub	r2, r2, #1
  143dcc:	e1a00003 	mov	r0, r3
  143dd0:	1afffff5 	bne	143dac <memchr+0x28>
  143dd4:	e3520000 	cmp	r2, #0
  143dd8:	0a000020 	beq	143e60 <memchr+0xdc>
  143ddc:	e5d03000 	ldrb	r3, [r0]
  143de0:	e1530001 	cmp	r3, r1
  143de4:	0a00002d 	beq	143ea0 <memchr+0x11c>
  143de8:	e92d4070 	push	{r4, r5, r6, lr}
  143dec:	e3520003 	cmp	r2, #3
  143df0:	e0814401 	add	r4, r1, r1, lsl #8
  143df4:	e0844804 	add	r4, r4, r4, lsl #16
  143df8:	9a00001d 	bls	143e74 <memchr+0xf0>
  143dfc:	e5903000 	ldr	r3, [r0]
  143e00:	e59f60cc 	ldr	r6, [pc, #204]	; 143ed4 <memchr+0x150>
  143e04:	e0233004 	eor	r3, r3, r4
  143e08:	e083c006 	add	ip, r3, r6
  143e0c:	e59f50c4 	ldr	r5, [pc, #196]	; 143ed8 <memchr+0x154>
  143e10:	e1cc3003 	bic	r3, ip, r3
  143e14:	e1130005 	tst	r3, r5
  143e18:	1a000015 	bne	143e74 <memchr+0xf0>
  143e1c:	e280e004 	add	lr, r0, #4
  143e20:	ea000006 	b	143e40 <memchr+0xbc>
  143e24:	e59e3000 	ldr	r3, [lr]
  143e28:	e28ee004 	add	lr, lr, #4
  143e2c:	e0233004 	eor	r3, r3, r4
  143e30:	e083c006 	add	ip, r3, r6
  143e34:	e1cc3003 	bic	r3, ip, r3
  143e38:	e1130005 	tst	r3, r5
  143e3c:	1a000009 	bne	143e68 <memchr+0xe4>
  143e40:	e2422004 	sub	r2, r2, #4
  143e44:	e3520003 	cmp	r2, #3
  143e48:	e1a0000e 	mov	r0, lr
  143e4c:	8afffff4 	bhi	143e24 <memchr+0xa0>
  143e50:	e3520000 	cmp	r2, #0
  143e54:	1a000003 	bne	143e68 <memchr+0xe4>
  143e58:	e3a00000 	mov	r0, #0
  143e5c:	e8bd8070 	pop	{r4, r5, r6, pc}
  143e60:	e3a00000 	mov	r0, #0
  143e64:	e12fff1e 	bx	lr
  143e68:	e5d03000 	ldrb	r3, [r0]
  143e6c:	e1510003 	cmp	r1, r3
  143e70:	08bd8070 	popeq	{r4, r5, r6, pc}
  143e74:	e0802002 	add	r2, r0, r2
  143e78:	e2803001 	add	r3, r0, #1
  143e7c:	ea000003 	b	143e90 <memchr+0x10c>
  143e80:	e5d3c000 	ldrb	ip, [r3]
  143e84:	e2833001 	add	r3, r3, #1
  143e88:	e15c0001 	cmp	ip, r1
  143e8c:	08bd8070 	popeq	{r4, r5, r6, pc}
  143e90:	e1520003 	cmp	r2, r3
  143e94:	e1a00003 	mov	r0, r3
  143e98:	1afffff8 	bne	143e80 <memchr+0xfc>
  143e9c:	eaffffed 	b	143e58 <memchr+0xd4>
  143ea0:	e5d03000 	ldrb	r3, [r0]
  143ea4:	e1510003 	cmp	r1, r3
  143ea8:	012fff1e 	bxeq	lr
  143eac:	e0802002 	add	r2, r0, r2
  143eb0:	e2803001 	add	r3, r0, #1
  143eb4:	e1520003 	cmp	r2, r3
  143eb8:	e1a00003 	mov	r0, r3
  143ebc:	0affffe7 	beq	143e60 <memchr+0xdc>
  143ec0:	e5d3c000 	ldrb	ip, [r3]
  143ec4:	e2833001 	add	r3, r3, #1
  143ec8:	e15c0001 	cmp	ip, r1
  143ecc:	1afffff8 	bne	143eb4 <memchr+0x130>
  143ed0:	e12fff1e 	bx	lr
  143ed4:	fefefeff 	.word	0xfefefeff
  143ed8:	80808080 	.word	0x80808080

00143edc <__stpcpy>:
  143edc:	e0203001 	eor	r3, r0, r1
  143ee0:	e3130003 	tst	r3, #3
  143ee4:	e92d4010 	push	{r4, lr}
  143ee8:	1a00001f 	bne	143f6c <__stpcpy+0x90>
  143eec:	e3110003 	tst	r1, #3
  143ef0:	0a00000e 	beq	143f30 <__stpcpy+0x54>
  143ef4:	e5d13000 	ldrb	r3, [r1]
  143ef8:	e3530000 	cmp	r3, #0
  143efc:	e5c03000 	strb	r3, [r0]
  143f00:	08bd8010 	popeq	{r4, pc}
  143f04:	e2813001 	add	r3, r1, #1
  143f08:	e2802001 	add	r2, r0, #1
  143f0c:	ea000003 	b	143f20 <__stpcpy+0x44>
  143f10:	e4d31001 	ldrb	r1, [r3], #1
  143f14:	e3510000 	cmp	r1, #0
  143f18:	e4c21001 	strb	r1, [r2], #1
  143f1c:	08bd8010 	popeq	{r4, pc}
  143f20:	e3130003 	tst	r3, #3
  143f24:	e1a01003 	mov	r1, r3
  143f28:	e1a00002 	mov	r0, r2
  143f2c:	1afffff7 	bne	143f10 <__stpcpy+0x34>
  143f30:	e5913000 	ldr	r3, [r1]
  143f34:	e59f405c 	ldr	r4, [pc, #92]	; 143f98 <__stpcpy+0xbc>
  143f38:	e59fe05c 	ldr	lr, [pc, #92]	; 143f9c <__stpcpy+0xc0>
  143f3c:	e0832004 	add	r2, r3, r4
  143f40:	e1c22003 	bic	r2, r2, r3
  143f44:	e112000e 	tst	r2, lr
  143f48:	1a000007 	bne	143f6c <__stpcpy+0x90>
  143f4c:	e281c004 	add	ip, r1, #4
  143f50:	e4803004 	str	r3, [r0], #4
  143f54:	e1a0100c 	mov	r1, ip
  143f58:	e49c3004 	ldr	r3, [ip], #4
  143f5c:	e0832004 	add	r2, r3, r4
  143f60:	e1c22003 	bic	r2, r2, r3
  143f64:	e112000e 	tst	r2, lr
  143f68:	0afffff8 	beq	143f50 <__stpcpy+0x74>
  143f6c:	e5d13000 	ldrb	r3, [r1]
  143f70:	e3530000 	cmp	r3, #0
  143f74:	e5c03000 	strb	r3, [r0]
  143f78:	08bd8010 	popeq	{r4, pc}
  143f7c:	e2803001 	add	r3, r0, #1
  143f80:	e5f12001 	ldrb	r2, [r1, #1]!
  143f84:	e1a00003 	mov	r0, r3
  143f88:	e3520000 	cmp	r2, #0
  143f8c:	e4c32001 	strb	r2, [r3], #1
  143f90:	1afffffa 	bne	143f80 <__stpcpy+0xa4>
  143f94:	e8bd8010 	pop	{r4, pc}
  143f98:	fefefeff 	.word	0xfefefeff
  143f9c:	80808080 	.word	0x80808080

00143fa0 <__stpncpy>:
  143fa0:	e0203001 	eor	r3, r0, r1
  143fa4:	e3130003 	tst	r3, #3
  143fa8:	e92d4070 	push	{r4, r5, r6, lr}
  143fac:	1a000030 	bne	144074 <__stpncpy+0xd4>
  143fb0:	e3110003 	tst	r1, #3
  143fb4:	0a000044 	beq	1440cc <__stpncpy+0x12c>
  143fb8:	e3520000 	cmp	r2, #0
  143fbc:	0a000040 	beq	1440c4 <__stpncpy+0x124>
  143fc0:	e5d13000 	ldrb	r3, [r1]
  143fc4:	e3530000 	cmp	r3, #0
  143fc8:	e5c03000 	strb	r3, [r0]
  143fcc:	0a00003c 	beq	1440c4 <__stpncpy+0x124>
  143fd0:	e2813001 	add	r3, r1, #1
  143fd4:	e2800001 	add	r0, r0, #1
  143fd8:	ea000005 	b	143ff4 <__stpncpy+0x54>
  143fdc:	e3520000 	cmp	r2, #0
  143fe0:	0a000032 	beq	1440b0 <__stpncpy+0x110>
  143fe4:	e4d31001 	ldrb	r1, [r3], #1
  143fe8:	e3510000 	cmp	r1, #0
  143fec:	e4c01001 	strb	r1, [r0], #1
  143ff0:	0a00002e 	beq	1440b0 <__stpncpy+0x110>
  143ff4:	e3130003 	tst	r3, #3
  143ff8:	e2422001 	sub	r2, r2, #1
  143ffc:	e1a01003 	mov	r1, r3
  144000:	e1a04000 	mov	r4, r0
  144004:	1afffff4 	bne	143fdc <__stpncpy+0x3c>
  144008:	e3520000 	cmp	r2, #0
  14400c:	0a000027 	beq	1440b0 <__stpncpy+0x110>
  144010:	e5d1c000 	ldrb	ip, [r1]
  144014:	e35c0000 	cmp	ip, #0
  144018:	0a000024 	beq	1440b0 <__stpncpy+0x110>
  14401c:	e3520003 	cmp	r2, #3
  144020:	9a00002b 	bls	1440d4 <__stpncpy+0x134>
  144024:	e5913000 	ldr	r3, [r1]
  144028:	e59f60b0 	ldr	r6, [pc, #176]	; 1440e0 <__stpncpy+0x140>
  14402c:	e59f50b0 	ldr	r5, [pc, #176]	; 1440e4 <__stpncpy+0x144>
  144030:	e0830006 	add	r0, r3, r6
  144034:	e1c00003 	bic	r0, r0, r3
  144038:	e1100005 	tst	r0, r5
  14403c:	1a000024 	bne	1440d4 <__stpncpy+0x134>
  144040:	e281e004 	add	lr, r1, #4
  144044:	ea000004 	b	14405c <__stpncpy+0xbc>
  144048:	e49e3004 	ldr	r3, [lr], #4
  14404c:	e083c006 	add	ip, r3, r6
  144050:	e1ccc003 	bic	ip, ip, r3
  144054:	e11c0005 	tst	ip, r5
  144058:	1a000007 	bne	14407c <__stpncpy+0xdc>
  14405c:	e2422004 	sub	r2, r2, #4
  144060:	e4843004 	str	r3, [r4], #4
  144064:	e3520003 	cmp	r2, #3
  144068:	e1a00004 	mov	r0, r4
  14406c:	e1a0100e 	mov	r1, lr
  144070:	8afffff4 	bhi	144048 <__stpncpy+0xa8>
  144074:	e3520000 	cmp	r2, #0
  144078:	0a000011 	beq	1440c4 <__stpncpy+0x124>
  14407c:	e5d13000 	ldrb	r3, [r1]
  144080:	e3530000 	cmp	r3, #0
  144084:	e5c03000 	strb	r3, [r0]
  144088:	0a00000d 	beq	1440c4 <__stpncpy+0x124>
  14408c:	e2800001 	add	r0, r0, #1
  144090:	ea000003 	b	1440a4 <__stpncpy+0x104>
  144094:	e5f13001 	ldrb	r3, [r1, #1]!
  144098:	e3530000 	cmp	r3, #0
  14409c:	e4c03001 	strb	r3, [r0], #1
  1440a0:	0a000002 	beq	1440b0 <__stpncpy+0x110>
  1440a4:	e2522001 	subs	r2, r2, #1
  1440a8:	e1a04000 	mov	r4, r0
  1440ac:	1afffff8 	bne	144094 <__stpncpy+0xf4>
  1440b0:	e3a01000 	mov	r1, #0
  1440b4:	e1a00004 	mov	r0, r4
  1440b8:	ebfff46f 	bl	14127c <memset>
  1440bc:	e1a00004 	mov	r0, r4
  1440c0:	e8bd8070 	pop	{r4, r5, r6, pc}
  1440c4:	e1a04000 	mov	r4, r0
  1440c8:	eafffff8 	b	1440b0 <__stpncpy+0x110>
  1440cc:	e1a04000 	mov	r4, r0
  1440d0:	eaffffcc 	b	144008 <__stpncpy+0x68>
  1440d4:	e5c4c000 	strb	ip, [r4]
  1440d8:	e1a00004 	mov	r0, r4
  1440dc:	eaffffea 	b	14408c <__stpncpy+0xec>
  1440e0:	fefefeff 	.word	0xfefefeff
  1440e4:	80808080 	.word	0x80808080

001440e8 <strchr>:
  1440e8:	e92d4010 	push	{r4, lr}
  1440ec:	e1a04001 	mov	r4, r1
  1440f0:	eb000004 	bl	144108 <__strchrnul>
  1440f4:	e5d03000 	ldrb	r3, [r0]
  1440f8:	e20440ff 	and	r4, r4, #255	; 0xff
  1440fc:	e1540003 	cmp	r4, r3
  144100:	13a00000 	movne	r0, #0
  144104:	e8bd8010 	pop	{r4, pc}

00144108 <__strchrnul>:
  144108:	e20110ff 	and	r1, r1, #255	; 0xff
  14410c:	e3510000 	cmp	r1, #0
  144110:	e92d4070 	push	{r4, r5, r6, lr}
  144114:	e1a04000 	mov	r4, r0
  144118:	0a000031 	beq	1441e4 <__strchrnul+0xdc>
  14411c:	e3100003 	tst	r0, #3
  144120:	0a00000e 	beq	144160 <__strchrnul+0x58>
  144124:	e5d02000 	ldrb	r2, [r0]
  144128:	e3520000 	cmp	r2, #0
  14412c:	0a00002f 	beq	1441f0 <__strchrnul+0xe8>
  144130:	e1510002 	cmp	r1, r2
  144134:	0a00002d 	beq	1441f0 <__strchrnul+0xe8>
  144138:	e2803001 	add	r3, r0, #1
  14413c:	ea000004 	b	144154 <__strchrnul+0x4c>
  144140:	e4d32001 	ldrb	r2, [r3], #1
  144144:	e3520000 	cmp	r2, #0
  144148:	08bd8070 	popeq	{r4, r5, r6, pc}
  14414c:	e1520001 	cmp	r2, r1
  144150:	08bd8070 	popeq	{r4, r5, r6, pc}
  144154:	e3130003 	tst	r3, #3
  144158:	e1a00003 	mov	r0, r3
  14415c:	1afffff7 	bne	144140 <__strchrnul+0x38>
  144160:	e590c000 	ldr	ip, [r0]
  144164:	e0815401 	add	r5, r1, r1, lsl #8
  144168:	e59f4088 	ldr	r4, [pc, #136]	; 1441f8 <__strchrnul+0xf0>
  14416c:	e0855805 	add	r5, r5, r5, lsl #16
  144170:	e025e00c 	eor	lr, r5, ip
  144174:	e08e2004 	add	r2, lr, r4
  144178:	e08c3004 	add	r3, ip, r4
  14417c:	e1c2200e 	bic	r2, r2, lr
  144180:	e1c3300c 	bic	r3, r3, ip
  144184:	e59f6070 	ldr	r6, [pc, #112]	; 1441fc <__strchrnul+0xf4>
  144188:	e1833002 	orr	r3, r3, r2
  14418c:	e1130006 	tst	r3, r6
  144190:	1a000008 	bne	1441b8 <__strchrnul+0xb0>
  144194:	e5b0c004 	ldr	ip, [r0, #4]!
  144198:	e02ce005 	eor	lr, ip, r5
  14419c:	e08e2004 	add	r2, lr, r4
  1441a0:	e08c3004 	add	r3, ip, r4
  1441a4:	e1c2200e 	bic	r2, r2, lr
  1441a8:	e1c3300c 	bic	r3, r3, ip
  1441ac:	e1833002 	orr	r3, r3, r2
  1441b0:	e1130006 	tst	r3, r6
  1441b4:	0afffff6 	beq	144194 <__strchrnul+0x8c>
  1441b8:	e5d03000 	ldrb	r3, [r0]
  1441bc:	e3530000 	cmp	r3, #0
  1441c0:	08bd8070 	popeq	{r4, r5, r6, pc}
  1441c4:	e1510003 	cmp	r1, r3
  1441c8:	08bd8070 	popeq	{r4, r5, r6, pc}
  1441cc:	e5f03001 	ldrb	r3, [r0, #1]!
  1441d0:	e3530000 	cmp	r3, #0
  1441d4:	08bd8070 	popeq	{r4, r5, r6, pc}
  1441d8:	e1530001 	cmp	r3, r1
  1441dc:	1afffffa 	bne	1441cc <__strchrnul+0xc4>
  1441e0:	e8bd8070 	pop	{r4, r5, r6, pc}
  1441e4:	ebfff4b5 	bl	1414c0 <strlen>
  1441e8:	e0840000 	add	r0, r4, r0
  1441ec:	e8bd8070 	pop	{r4, r5, r6, pc}
  1441f0:	e1a00004 	mov	r0, r4
  1441f4:	e8bd8070 	pop	{r4, r5, r6, pc}
  1441f8:	fefefeff 	.word	0xfefefeff
  1441fc:	80808080 	.word	0x80808080

00144200 <__set_thread_area>:
  144200:	e59f3108 	ldr	r3, [pc, #264]	; 144310 <__set_thread_area+0x110>
  144204:	e92d4010 	push	{r4, lr}
  144208:	e5933000 	ldr	r3, [r3]
  14420c:	e1a04000 	mov	r4, r0
  144210:	e3130902 	tst	r3, #32768	; 0x8000
  144214:	0a000017 	beq	144278 <__set_thread_area+0x78>
  144218:	e59f20f4 	ldr	r2, [pc, #244]	; 144314 <__set_thread_area+0x114>
  14421c:	e59f10f4 	ldr	r1, [pc, #244]	; 144318 <__set_thread_area+0x118>
  144220:	e59f00f4 	ldr	r0, [pc, #244]	; 14431c <__set_thread_area+0x11c>
  144224:	e59fc0f4 	ldr	ip, [pc, #244]	; 144320 <__set_thread_area+0x120>
  144228:	e59f30f4 	ldr	r3, [pc, #244]	; 144324 <__set_thread_area+0x124>
  14422c:	e5922010 	ldr	r2, [r2, #16]
  144230:	e580c000 	str	ip, [r0]
  144234:	e5831000 	str	r1, [r3]
  144238:	e5921000 	ldr	r1, [r2]
  14423c:	e3510000 	cmp	r1, #0
  144240:	0a000005 	beq	14425c <__set_thread_area+0x5c>
  144244:	e351000f 	cmp	r1, #15
  144248:	1a00001b 	bne	1442bc <__set_thread_area+0xbc>
  14424c:	e5922004 	ldr	r2, [r2, #4]
  144250:	e5d21000 	ldrb	r1, [r2]
  144254:	e3510076 	cmp	r1, #118	; 0x76
  144258:	0a000021 	beq	1442e4 <__set_thread_area+0xe4>
  14425c:	e59f00c4 	ldr	r0, [pc, #196]	; 144328 <__set_thread_area+0x128>
  144260:	ebffe054 	bl	13c3b8 <get_rtt_syscall>
  144264:	e2503000 	subs	r3, r0, #0
  144268:	08bd8010 	popeq	{r4, pc}
  14426c:	e1a00004 	mov	r0, r4
  144270:	e8bd4010 	pop	{r4, lr}
  144274:	e12fff13 	bx	r3
  144278:	e3e03a0f 	mvn	r3, #61440	; 0xf000
  14427c:	e59f10a8 	ldr	r1, [pc, #168]	; 14432c <__set_thread_area+0x12c>
  144280:	e5132003 	ldr	r2, [r3, #-3]
  144284:	e59f30a4 	ldr	r3, [pc, #164]	; 144330 <__set_thread_area+0x130>
  144288:	e59f008c 	ldr	r0, [pc, #140]	; 14431c <__set_thread_area+0x11c>
  14428c:	e5831000 	str	r1, [r3]
  144290:	e59fc09c 	ldr	ip, [pc, #156]	; 144334 <__set_thread_area+0x134>
  144294:	e59f3088 	ldr	r3, [pc, #136]	; 144324 <__set_thread_area+0x124>
  144298:	e2411040 	sub	r1, r1, #64	; 0x40
  14429c:	e3520001 	cmp	r2, #1
  1442a0:	e580c000 	str	ip, [r0]
  1442a4:	e5831000 	str	r1, [r3]
  1442a8:	da000009 	ble	1442d4 <__set_thread_area+0xd4>
  1442ac:	e3520002 	cmp	r2, #2
  1442b0:	059f2080 	ldreq	r2, [pc, #128]	; 144338 <__set_thread_area+0x138>
  1442b4:	05832000 	streq	r2, [r3]
  1442b8:	eaffffe7 	b	14425c <__set_thread_area+0x5c>
  1442bc:	e5b21008 	ldr	r1, [r2, #8]!
  1442c0:	e3510000 	cmp	r1, #0
  1442c4:	0affffe4 	beq	14425c <__set_thread_area+0x5c>
  1442c8:	e351000f 	cmp	r1, #15
  1442cc:	0affffde 	beq	14424c <__set_thread_area+0x4c>
  1442d0:	eafffff9 	b	1442bc <__set_thread_area+0xbc>
  1442d4:	e7f000f0 	.word	0xe7f000f0
  1442d8:	e59f2058 	ldr	r2, [pc, #88]	; 144338 <__set_thread_area+0x138>
  1442dc:	e5832000 	str	r2, [r3]
  1442e0:	eaffffdd 	b	14425c <__set_thread_area+0x5c>
  1442e4:	e5d21001 	ldrb	r1, [r2, #1]
  1442e8:	e3510036 	cmp	r1, #54	; 0x36
  1442ec:	1affffda 	bne	14425c <__set_thread_area+0x5c>
  1442f0:	e5d22002 	ldrb	r2, [r2, #2]
  1442f4:	e2422030 	sub	r2, r2, #48	; 0x30
  1442f8:	e3520009 	cmp	r2, #9
  1442fc:	859f1038 	ldrhi	r1, [pc, #56]	; 14433c <__set_thread_area+0x13c>
  144300:	859f2038 	ldrhi	r2, [pc, #56]	; 144340 <__set_thread_area+0x140>
  144304:	85801000 	strhi	r1, [r0]
  144308:	85832000 	strhi	r2, [r3]
  14430c:	eaffffd2 	b	14425c <__set_thread_area+0x5c>
  144310:	0056f054 	.word	0x0056f054
  144314:	0056f058 	.word	0x0056f058
  144318:	00141ed8 	.word	0x00141ed8
  14431c:	0014d3d8 	.word	0x0014d3d8
  144320:	00141f18 	.word	0x00141f18
  144324:	0014d3d4 	.word	0x0014d3d4
  144328:	000f0005 	.word	0x000f0005
  14432c:	ffff0fe0 	.word	0xffff0fe0
  144330:	0014d3dc 	.word	0x0014d3dc
  144334:	ffff0fc0 	.word	0xffff0fc0
  144338:	00141eb0 	.word	0x00141eb0
  14433c:	00141ef4 	.word	0x00141ef4
  144340:	00141ed0 	.word	0x00141ed0

00144344 <__unmapself>:
  144344:	e3a07036 	mov	r7, #54	; 0x36
  144348:	ef000000 	svc	0x00000000
  14434c:	e3a07001 	mov	r7, #1
  144350:	ef000000 	svc	0x00000000

00144354 <__clone>:
  144354:	e92d00f0 	push	{r4, r5, r6, r7}
  144358:	e3a07082 	mov	r7, #130	; 0x82
  14435c:	e1a06003 	mov	r6, r3
  144360:	e1a05000 	mov	r5, r0
  144364:	e1a00002 	mov	r0, r2
  144368:	e3c1100f 	bic	r1, r1, #15
  14436c:	e59d2010 	ldr	r2, [sp, #16]
  144370:	e59d3014 	ldr	r3, [sp, #20]
  144374:	e59d4018 	ldr	r4, [sp, #24]
  144378:	e92d007f 	push	{r0, r1, r2, r3, r4, r5, r6}
  14437c:	e1a0000d 	mov	r0, sp
  144380:	ef000000 	svc	0x00000000
  144384:	e1100000 	tst	r0, r0
  144388:	0a000002 	beq	144398 <__clone+0x44>
  14438c:	e28dd01c 	add	sp, sp, #28
  144390:	e8bd00f0 	pop	{r4, r5, r6, r7}
  144394:	e12fff1e 	bx	lr
  144398:	e1a00006 	mov	r0, r6
  14439c:	e3150001 	tst	r5, #1
  1443a0:	1a000003 	bne	1443b4 <__clone+0x60>
  1443a4:	e1a0e00f 	mov	lr, pc
  1443a8:	e1a0f005 	mov	pc, r5
  1443ac:	e3a07001 	mov	r7, #1
  1443b0:	ef000000 	svc	0x00000000
  1443b4:	e1a0e00f 	mov	lr, pc
  1443b8:	e12fff15 	bx	r5
  1443bc:	eafffffa 	b	1443ac <__clone+0x58>

001443c0 <__clock_gettime>:
  1443c0:	e92d4070 	push	{r4, r5, r6, lr}
  1443c4:	e1a04000 	mov	r4, r0
  1443c8:	e59f0074 	ldr	r0, [pc, #116]	; 144444 <__clock_gettime+0x84>
  1443cc:	e1a05001 	mov	r5, r1
  1443d0:	ebffdff8 	bl	13c3b8 <get_rtt_syscall>
  1443d4:	e2503000 	subs	r3, r0, #0
  1443d8:	0a000017 	beq	14443c <__clock_gettime+0x7c>
  1443dc:	e1a01005 	mov	r1, r5
  1443e0:	e1a00004 	mov	r0, r4
  1443e4:	e12fff33 	blx	r3
  1443e8:	e3700026 	cmn	r0, #38	; 0x26
  1443ec:	0a000001 	beq	1443f8 <__clock_gettime+0x38>
  1443f0:	e8bd4070 	pop	{r4, r5, r6, lr}
  1443f4:	eaffe024 	b	13c48c <__syscall_ret>
  1443f8:	e3540000 	cmp	r4, #0
  1443fc:	13e00015 	mvnne	r0, #21
  144400:	1afffffa 	bne	1443f0 <__clock_gettime+0x30>
  144404:	e3a0004e 	mov	r0, #78	; 0x4e
  144408:	ebffdfea 	bl	13c3b8 <get_rtt_syscall>
  14440c:	e2503000 	subs	r3, r0, #0
  144410:	0a000002 	beq	144420 <__clock_gettime+0x60>
  144414:	e1a01004 	mov	r1, r4
  144418:	e1a00005 	mov	r0, r5
  14441c:	e12fff33 	blx	r3
  144420:	e5953008 	ldr	r3, [r5, #8]
  144424:	e3a00000 	mov	r0, #0
  144428:	e0632283 	rsb	r2, r3, r3, lsl #5
  14442c:	e0833102 	add	r3, r3, r2, lsl #2
  144430:	e1a03183 	lsl	r3, r3, #3
  144434:	e5853008 	str	r3, [r5, #8]
  144438:	e8bd8070 	pop	{r4, r5, r6, pc}
  14443c:	e1a00003 	mov	r0, r3
  144440:	eaffffea 	b	1443f0 <__clock_gettime+0x30>
  144444:	00000107 	.word	0x00000107

00144448 <frexp>:
  144448:	e59fc09c 	ldr	ip, [pc, #156]	; 1444ec <frexp+0xa4>
  14444c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  144450:	e01c6a21 	ands	r6, ip, r1, lsr #20
  144454:	e1a04000 	mov	r4, r0
  144458:	e1a05001 	mov	r5, r1
  14445c:	1a000009 	bne	144488 <frexp+0x40>
  144460:	e1a07002 	mov	r7, r2
  144464:	e3a03000 	mov	r3, #0
  144468:	e3a02000 	mov	r2, #0
  14446c:	eb0002e1 	bl	144ff8 <__aeabi_dcmpeq>
  144470:	e3500000 	cmp	r0, #0
  144474:	0a000011 	beq	1444c0 <frexp+0x78>
  144478:	e5876000 	str	r6, [r7]
  14447c:	e1a00004 	mov	r0, r4
  144480:	e1a01005 	mov	r1, r5
  144484:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  144488:	e156000c 	cmp	r6, ip
  14448c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  144490:	e3e00000 	mvn	r0, #0
  144494:	e0007004 	and	r7, r0, r4
  144498:	e3a04000 	mov	r4, #0
  14449c:	e59f104c 	ldr	r1, [pc, #76]	; 1444f0 <frexp+0xa8>
  1444a0:	e2463fff 	sub	r3, r6, #1020	; 0x3fc
  1444a4:	e0018005 	and	r8, r1, r5
  1444a8:	e59f5044 	ldr	r5, [pc, #68]	; 1444f4 <frexp+0xac>
  1444ac:	e2433002 	sub	r3, r3, #2
  1444b0:	e5823000 	str	r3, [r2]
  1444b4:	e1870004 	orr	r0, r7, r4
  1444b8:	e1881005 	orr	r1, r8, r5
  1444bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1444c0:	e59f3030 	ldr	r3, [pc, #48]	; 1444f8 <frexp+0xb0>
  1444c4:	e1a00004 	mov	r0, r4
  1444c8:	e1a01005 	mov	r1, r5
  1444cc:	e3a02000 	mov	r2, #0
  1444d0:	eb00017a 	bl	144ac0 <__aeabi_dmul>
  1444d4:	e1a02007 	mov	r2, r7
  1444d8:	ebffffda 	bl	144448 <frexp>
  1444dc:	e5973000 	ldr	r3, [r7]
  1444e0:	e2433040 	sub	r3, r3, #64	; 0x40
  1444e4:	e5873000 	str	r3, [r7]
  1444e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1444ec:	000007ff 	.word	0x000007ff
  1444f0:	800fffff 	.word	0x800fffff
  1444f4:	3fe00000 	.word	0x3fe00000
  1444f8:	43f00000 	.word	0x43f00000

001444fc <wcrtomb>:
  1444fc:	e2502000 	subs	r2, r0, #0
  144500:	0a000025 	beq	14459c <wcrtomb+0xa0>
  144504:	e351007f 	cmp	r1, #127	; 0x7f
  144508:	9a000022 	bls	144598 <wcrtomb+0x9c>
  14450c:	e59f0114 	ldr	r0, [pc, #276]	; 144628 <wcrtomb+0x12c>
  144510:	e92d4010 	push	{r4, lr}
  144514:	e5900000 	ldr	r0, [r0]
  144518:	e12fff30 	blx	r0
  14451c:	e5100018 	ldr	r0, [r0, #-24]	; 0xffffffe8
  144520:	e1a03001 	mov	r3, r1
  144524:	e5900000 	ldr	r0, [r0]
  144528:	e1a0c002 	mov	ip, r2
  14452c:	e3500000 	cmp	r0, #0
  144530:	0a000025 	beq	1445cc <wcrtomb+0xd0>
  144534:	e3510b02 	cmp	r1, #2048	; 0x800
  144538:	3a00001a 	bcc	1445a8 <wcrtomb+0xac>
  14453c:	e2412a0e 	sub	r2, r1, #57344	; 0xe000
  144540:	e3510b36 	cmp	r1, #55296	; 0xd800
  144544:	23520a02 	cmpcs	r2, #8192	; 0x2000
  144548:	3a00002a 	bcc	1445f8 <wcrtomb+0xfc>
  14454c:	e2412801 	sub	r2, r1, #65536	; 0x10000
  144550:	e3520601 	cmp	r2, #1048576	; 0x100000
  144554:	2a000022 	bcs	1445e4 <wcrtomb+0xe8>
  144558:	e3e0e00f 	mvn	lr, #15
  14455c:	e3e0207f 	mvn	r2, #127	; 0x7f
  144560:	e18ee923 	orr	lr, lr, r3, lsr #18
  144564:	e203303f 	and	r3, r3, #63	; 0x3f
  144568:	e1823003 	orr	r3, r2, r3
  14456c:	e5cc3003 	strb	r3, [ip, #3]
  144570:	e3a03004 	mov	r3, #4
  144574:	e1a00701 	lsl	r0, r1, #14
  144578:	e1a01a01 	lsl	r1, r1, #20
  14457c:	e1820d20 	orr	r0, r2, r0, lsr #26
  144580:	e1821d21 	orr	r1, r2, r1, lsr #26
  144584:	e5cce000 	strb	lr, [ip]
  144588:	e5cc0001 	strb	r0, [ip, #1]
  14458c:	e5cc1002 	strb	r1, [ip, #2]
  144590:	e1a00003 	mov	r0, r3
  144594:	e8bd8010 	pop	{r4, pc}
  144598:	e5c21000 	strb	r1, [r2]
  14459c:	e3a03001 	mov	r3, #1
  1445a0:	e1a00003 	mov	r0, r3
  1445a4:	e12fff1e 	bx	lr
  1445a8:	e201203f 	and	r2, r1, #63	; 0x3f
  1445ac:	e1e02c82 	mvn	r2, r2, lsl #25
  1445b0:	e3e0103f 	mvn	r1, #63	; 0x3f
  1445b4:	e1e02ca2 	mvn	r2, r2, lsr #25
  1445b8:	e1813323 	orr	r3, r1, r3, lsr #6
  1445bc:	e5cc3000 	strb	r3, [ip]
  1445c0:	e5cc2001 	strb	r2, [ip, #1]
  1445c4:	e3a03002 	mov	r3, #2
  1445c8:	eafffff0 	b	144590 <wcrtomb+0x94>
  1445cc:	e2413cdf 	sub	r3, r1, #57088	; 0xdf00
  1445d0:	e2433080 	sub	r3, r3, #128	; 0x80
  1445d4:	e353007f 	cmp	r3, #127	; 0x7f
  1445d8:	95c21000 	strbls	r1, [r2]
  1445dc:	93a03001 	movls	r3, #1
  1445e0:	9affffea 	bls	144590 <wcrtomb+0x94>
  1445e4:	ebffd23d 	bl	138ee0 <__errno_location>
  1445e8:	e3a02054 	mov	r2, #84	; 0x54
  1445ec:	e3e03000 	mvn	r3, #0
  1445f0:	e5802000 	str	r2, [r0]
  1445f4:	eaffffe5 	b	144590 <wcrtomb+0x94>
  1445f8:	e3e0207f 	mvn	r2, #127	; 0x7f
  1445fc:	e3e0001f 	mvn	r0, #31
  144600:	e203e03f 	and	lr, r3, #63	; 0x3f
  144604:	e1a01a01 	lsl	r1, r1, #20
  144608:	e1803623 	orr	r3, r0, r3, lsr #12
  14460c:	e1821d21 	orr	r1, r2, r1, lsr #26
  144610:	e182200e 	orr	r2, r2, lr
  144614:	e5cc3000 	strb	r3, [ip]
  144618:	e5cc1001 	strb	r1, [ip, #1]
  14461c:	e5cc2002 	strb	r2, [ip, #2]
  144620:	e3a03003 	mov	r3, #3
  144624:	eaffffd9 	b	144590 <wcrtomb+0x94>
  144628:	0014d3dc 	.word	0x0014d3dc

0014462c <close_file>:
  14462c:	e92d4010 	push	{r4, lr}
  144630:	e2504000 	subs	r4, r0, #0
  144634:	e24dd008 	sub	sp, sp, #8
  144638:	0a000015 	beq	144694 <close_file+0x68>
  14463c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  144640:	e3530000 	cmp	r3, #0
  144644:	aa000014 	bge	14469c <close_file+0x70>
  144648:	e5942014 	ldr	r2, [r4, #20]
  14464c:	e594301c 	ldr	r3, [r4, #28]
  144650:	e1520003 	cmp	r2, r3
  144654:	0a000004 	beq	14466c <close_file+0x40>
  144658:	e3a02000 	mov	r2, #0
  14465c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  144660:	e1a01002 	mov	r1, r2
  144664:	e1a00004 	mov	r0, r4
  144668:	e12fff33 	blx	r3
  14466c:	e994000c 	ldmib	r4, {r2, r3}
  144670:	e1520003 	cmp	r2, r3
  144674:	0a000006 	beq	144694 <close_file+0x68>
  144678:	e3a01001 	mov	r1, #1
  14467c:	e0422003 	sub	r2, r2, r3
  144680:	e58d1000 	str	r1, [sp]
  144684:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  144688:	e1a00004 	mov	r0, r4
  14468c:	e1a03fc2 	asr	r3, r2, #31
  144690:	e12fff31 	blx	r1
  144694:	e28dd008 	add	sp, sp, #8
  144698:	e8bd8010 	pop	{r4, pc}
  14469c:	ebfffb94 	bl	1434f4 <__lockfile>
  1446a0:	eaffffe8 	b	144648 <close_file+0x1c>

001446a4 <__stdio_exit>:
  1446a4:	e92d4010 	push	{r4, lr}
  1446a8:	ebffe771 	bl	13e474 <__ofl_lock>
  1446ac:	e5904000 	ldr	r4, [r0]
  1446b0:	e3540000 	cmp	r4, #0
  1446b4:	0a000004 	beq	1446cc <__stdio_exit+0x28>
  1446b8:	e1a00004 	mov	r0, r4
  1446bc:	ebffffda 	bl	14462c <close_file>
  1446c0:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  1446c4:	e3540000 	cmp	r4, #0
  1446c8:	1afffffa 	bne	1446b8 <__stdio_exit+0x14>
  1446cc:	e59f3020 	ldr	r3, [pc, #32]	; 1446f4 <__stdio_exit+0x50>
  1446d0:	e5930000 	ldr	r0, [r3]
  1446d4:	ebffffd4 	bl	14462c <close_file>
  1446d8:	e59f3018 	ldr	r3, [pc, #24]	; 1446f8 <__stdio_exit+0x54>
  1446dc:	e5930000 	ldr	r0, [r3]
  1446e0:	ebffffd1 	bl	14462c <close_file>
  1446e4:	e8bd4010 	pop	{r4, lr}
  1446e8:	e59f300c 	ldr	r3, [pc, #12]	; 1446fc <__stdio_exit+0x58>
  1446ec:	e5930000 	ldr	r0, [r3]
  1446f0:	eaffffcd 	b	14462c <close_file>
  1446f4:	0014f478 	.word	0x0014f478
  1446f8:	0014d3d0 	.word	0x0014d3d0
  1446fc:	0014d338 	.word	0x0014d338

00144700 <__aeabi_drsub>:
  144700:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
  144704:	ea000000 	b	14470c <__adddf3>

00144708 <__aeabi_dsub>:
  144708:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

0014470c <__adddf3>:
  14470c:	e92d4030 	push	{r4, r5, lr}
  144710:	e1a04081 	lsl	r4, r1, #1
  144714:	e1a05083 	lsl	r5, r3, #1
  144718:	e1340005 	teq	r4, r5
  14471c:	01300002 	teqeq	r0, r2
  144720:	1194c000 	orrsne	ip, r4, r0
  144724:	1195c002 	orrsne	ip, r5, r2
  144728:	11f0cac4 	mvnsne	ip, r4, asr #21
  14472c:	11f0cac5 	mvnsne	ip, r5, asr #21
  144730:	0a000079 	beq	14491c <__adddf3+0x210>
  144734:	e1a04aa4 	lsr	r4, r4, #21
  144738:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
  14473c:	b2655000 	rsblt	r5, r5, #0
  144740:	da000006 	ble	144760 <__adddf3+0x54>
  144744:	e0844005 	add	r4, r4, r5
  144748:	e0202002 	eor	r2, r0, r2
  14474c:	e0213003 	eor	r3, r1, r3
  144750:	e0220000 	eor	r0, r2, r0
  144754:	e0231001 	eor	r1, r3, r1
  144758:	e0202002 	eor	r2, r0, r2
  14475c:	e0213003 	eor	r3, r1, r3
  144760:	e3550036 	cmp	r5, #54	; 0x36
  144764:	88bd8030 	pophi	{r4, r5, pc}
  144768:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  14476c:	e1a01601 	lsl	r1, r1, #12
  144770:	e3a0c601 	mov	ip, #1048576	; 0x100000
  144774:	e18c1621 	orr	r1, ip, r1, lsr #12
  144778:	0a000001 	beq	144784 <__adddf3+0x78>
  14477c:	e2700000 	rsbs	r0, r0, #0
  144780:	e2e11000 	rsc	r1, r1, #0
  144784:	e3130102 	tst	r3, #-2147483648	; 0x80000000
  144788:	e1a03603 	lsl	r3, r3, #12
  14478c:	e18c3623 	orr	r3, ip, r3, lsr #12
  144790:	0a000001 	beq	14479c <__adddf3+0x90>
  144794:	e2722000 	rsbs	r2, r2, #0
  144798:	e2e33000 	rsc	r3, r3, #0
  14479c:	e1340005 	teq	r4, r5
  1447a0:	0a000057 	beq	144904 <__adddf3+0x1f8>
  1447a4:	e2444001 	sub	r4, r4, #1
  1447a8:	e275e020 	rsbs	lr, r5, #32
  1447ac:	ba000005 	blt	1447c8 <__adddf3+0xbc>
  1447b0:	e1a0ce12 	lsl	ip, r2, lr
  1447b4:	e0900532 	adds	r0, r0, r2, lsr r5
  1447b8:	e2a11000 	adc	r1, r1, #0
  1447bc:	e0900e13 	adds	r0, r0, r3, lsl lr
  1447c0:	e0b11553 	adcs	r1, r1, r3, asr r5
  1447c4:	ea000006 	b	1447e4 <__adddf3+0xd8>
  1447c8:	e2455020 	sub	r5, r5, #32
  1447cc:	e28ee020 	add	lr, lr, #32
  1447d0:	e3520001 	cmp	r2, #1
  1447d4:	e1a0ce13 	lsl	ip, r3, lr
  1447d8:	238cc002 	orrcs	ip, ip, #2
  1447dc:	e0900553 	adds	r0, r0, r3, asr r5
  1447e0:	e0b11fc3 	adcs	r1, r1, r3, asr #31
  1447e4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  1447e8:	5a000002 	bpl	1447f8 <__adddf3+0xec>
  1447ec:	e27cc000 	rsbs	ip, ip, #0
  1447f0:	e2f00000 	rscs	r0, r0, #0
  1447f4:	e2e11000 	rsc	r1, r1, #0
  1447f8:	e3510601 	cmp	r1, #1048576	; 0x100000
  1447fc:	3a00000e 	bcc	14483c <__adddf3+0x130>
  144800:	e3510602 	cmp	r1, #2097152	; 0x200000
  144804:	3a000006 	bcc	144824 <__adddf3+0x118>
  144808:	e1b010a1 	lsrs	r1, r1, #1
  14480c:	e1b00060 	rrxs	r0, r0
  144810:	e1a0c06c 	rrx	ip, ip
  144814:	e2844001 	add	r4, r4, #1
  144818:	e1a02a84 	lsl	r2, r4, #21
  14481c:	e3720501 	cmn	r2, #4194304	; 0x400000
  144820:	2a000055 	bcs	14497c <__adddf3+0x270>
  144824:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
  144828:	01b0c0a0 	lsrseq	ip, r0, #1
  14482c:	e2b00000 	adcs	r0, r0, #0
  144830:	e0a11a04 	adc	r1, r1, r4, lsl #20
  144834:	e1811005 	orr	r1, r1, r5
  144838:	e8bd8030 	pop	{r4, r5, pc}
  14483c:	e1b0c08c 	lsls	ip, ip, #1
  144840:	e0b00000 	adcs	r0, r0, r0
  144844:	e0a11001 	adc	r1, r1, r1
  144848:	e3110601 	tst	r1, #1048576	; 0x100000
  14484c:	e2444001 	sub	r4, r4, #1
  144850:	1afffff3 	bne	144824 <__adddf3+0x118>
  144854:	e3310000 	teq	r1, #0
  144858:	01a01000 	moveq	r1, r0
  14485c:	03a00000 	moveq	r0, #0
  144860:	e16f3f11 	clz	r3, r1
  144864:	02833020 	addeq	r3, r3, #32
  144868:	e243300b 	sub	r3, r3, #11
  14486c:	e2532020 	subs	r2, r3, #32
  144870:	aa000007 	bge	144894 <__adddf3+0x188>
  144874:	e292200c 	adds	r2, r2, #12
  144878:	da000004 	ble	144890 <__adddf3+0x184>
  14487c:	e282c014 	add	ip, r2, #20
  144880:	e262200c 	rsb	r2, r2, #12
  144884:	e1a00c11 	lsl	r0, r1, ip
  144888:	e1a01231 	lsr	r1, r1, r2
  14488c:	ea000004 	b	1448a4 <__adddf3+0x198>
  144890:	e2822014 	add	r2, r2, #20
  144894:	d262c020 	rsble	ip, r2, #32
  144898:	e1a01211 	lsl	r1, r1, r2
  14489c:	d1811c30 	orrle	r1, r1, r0, lsr ip
  1448a0:	d1a00210 	lslle	r0, r0, r2
  1448a4:	e0544003 	subs	r4, r4, r3
  1448a8:	a0811a04 	addge	r1, r1, r4, lsl #20
  1448ac:	a1811005 	orrge	r1, r1, r5
  1448b0:	a8bd8030 	popge	{r4, r5, pc}
  1448b4:	e1e04004 	mvn	r4, r4
  1448b8:	e254401f 	subs	r4, r4, #31
  1448bc:	aa00000d 	bge	1448f8 <__adddf3+0x1ec>
  1448c0:	e294400c 	adds	r4, r4, #12
  1448c4:	ca000005 	bgt	1448e0 <__adddf3+0x1d4>
  1448c8:	e2844014 	add	r4, r4, #20
  1448cc:	e2642020 	rsb	r2, r4, #32
  1448d0:	e1a00430 	lsr	r0, r0, r4
  1448d4:	e1800211 	orr	r0, r0, r1, lsl r2
  1448d8:	e1851431 	orr	r1, r5, r1, lsr r4
  1448dc:	e8bd8030 	pop	{r4, r5, pc}
  1448e0:	e264400c 	rsb	r4, r4, #12
  1448e4:	e2642020 	rsb	r2, r4, #32
  1448e8:	e1a00230 	lsr	r0, r0, r2
  1448ec:	e1800411 	orr	r0, r0, r1, lsl r4
  1448f0:	e1a01005 	mov	r1, r5
  1448f4:	e8bd8030 	pop	{r4, r5, pc}
  1448f8:	e1a00431 	lsr	r0, r1, r4
  1448fc:	e1a01005 	mov	r1, r5
  144900:	e8bd8030 	pop	{r4, r5, pc}
  144904:	e3340000 	teq	r4, #0
  144908:	e2233601 	eor	r3, r3, #1048576	; 0x100000
  14490c:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
  144910:	02844001 	addeq	r4, r4, #1
  144914:	12455001 	subne	r5, r5, #1
  144918:	eaffffa1 	b	1447a4 <__adddf3+0x98>
  14491c:	e1f0cac4 	mvns	ip, r4, asr #21
  144920:	11f0cac5 	mvnsne	ip, r5, asr #21
  144924:	0a000018 	beq	14498c <__adddf3+0x280>
  144928:	e1340005 	teq	r4, r5
  14492c:	01300002 	teqeq	r0, r2
  144930:	0a000003 	beq	144944 <__adddf3+0x238>
  144934:	e194c000 	orrs	ip, r4, r0
  144938:	01a01003 	moveq	r1, r3
  14493c:	01a00002 	moveq	r0, r2
  144940:	e8bd8030 	pop	{r4, r5, pc}
  144944:	e1310003 	teq	r1, r3
  144948:	13a01000 	movne	r1, #0
  14494c:	13a00000 	movne	r0, #0
  144950:	18bd8030 	popne	{r4, r5, pc}
  144954:	e1b0caa4 	lsrs	ip, r4, #21
  144958:	1a000003 	bne	14496c <__adddf3+0x260>
  14495c:	e1b00080 	lsls	r0, r0, #1
  144960:	e0b11001 	adcs	r1, r1, r1
  144964:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
  144968:	e8bd8030 	pop	{r4, r5, pc}
  14496c:	e2944501 	adds	r4, r4, #4194304	; 0x400000
  144970:	32811601 	addcc	r1, r1, #1048576	; 0x100000
  144974:	38bd8030 	popcc	{r4, r5, pc}
  144978:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  14497c:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
  144980:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  144984:	e3a00000 	mov	r0, #0
  144988:	e8bd8030 	pop	{r4, r5, pc}
  14498c:	e1f0cac4 	mvns	ip, r4, asr #21
  144990:	11a01003 	movne	r1, r3
  144994:	11a00002 	movne	r0, r2
  144998:	01f0cac5 	mvnseq	ip, r5, asr #21
  14499c:	11a03001 	movne	r3, r1
  1449a0:	11a02000 	movne	r2, r0
  1449a4:	e1904601 	orrs	r4, r0, r1, lsl #12
  1449a8:	01925603 	orrseq	r5, r2, r3, lsl #12
  1449ac:	01310003 	teqeq	r1, r3
  1449b0:	13811702 	orrne	r1, r1, #524288	; 0x80000
  1449b4:	e8bd8030 	pop	{r4, r5, pc}

001449b8 <__aeabi_ui2d>:
  1449b8:	e3300000 	teq	r0, #0
  1449bc:	03a01000 	moveq	r1, #0
  1449c0:	012fff1e 	bxeq	lr
  1449c4:	e92d4030 	push	{r4, r5, lr}
  1449c8:	e3a04b01 	mov	r4, #1024	; 0x400
  1449cc:	e2844032 	add	r4, r4, #50	; 0x32
  1449d0:	e3a05000 	mov	r5, #0
  1449d4:	e3a01000 	mov	r1, #0
  1449d8:	eaffff9d 	b	144854 <__adddf3+0x148>

001449dc <__aeabi_i2d>:
  1449dc:	e3300000 	teq	r0, #0
  1449e0:	03a01000 	moveq	r1, #0
  1449e4:	012fff1e 	bxeq	lr
  1449e8:	e92d4030 	push	{r4, r5, lr}
  1449ec:	e3a04b01 	mov	r4, #1024	; 0x400
  1449f0:	e2844032 	add	r4, r4, #50	; 0x32
  1449f4:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
  1449f8:	42600000 	rsbmi	r0, r0, #0
  1449fc:	e3a01000 	mov	r1, #0
  144a00:	eaffff93 	b	144854 <__adddf3+0x148>

00144a04 <__aeabi_f2d>:
  144a04:	e1b02080 	lsls	r2, r0, #1
  144a08:	e1a011c2 	asr	r1, r2, #3
  144a0c:	e1a01061 	rrx	r1, r1
  144a10:	e1a00e02 	lsl	r0, r2, #28
  144a14:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
  144a18:	133304ff 	teqne	r3, #-16777216	; 0xff000000
  144a1c:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
  144a20:	112fff1e 	bxne	lr
  144a24:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
  144a28:	012fff1e 	bxeq	lr
  144a2c:	e33304ff 	teq	r3, #-16777216	; 0xff000000
  144a30:	03811702 	orreq	r1, r1, #524288	; 0x80000
  144a34:	012fff1e 	bxeq	lr
  144a38:	e92d4030 	push	{r4, r5, lr}
  144a3c:	e3a04d0e 	mov	r4, #896	; 0x380
  144a40:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  144a44:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  144a48:	eaffff81 	b	144854 <__adddf3+0x148>

00144a4c <__aeabi_ul2d>:
  144a4c:	e1902001 	orrs	r2, r0, r1
  144a50:	012fff1e 	bxeq	lr
  144a54:	e92d4030 	push	{r4, r5, lr}
  144a58:	e3a05000 	mov	r5, #0
  144a5c:	ea000006 	b	144a7c <__aeabi_l2d+0x1c>

00144a60 <__aeabi_l2d>:
  144a60:	e1902001 	orrs	r2, r0, r1
  144a64:	012fff1e 	bxeq	lr
  144a68:	e92d4030 	push	{r4, r5, lr}
  144a6c:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
  144a70:	5a000001 	bpl	144a7c <__aeabi_l2d+0x1c>
  144a74:	e2700000 	rsbs	r0, r0, #0
  144a78:	e2e11000 	rsc	r1, r1, #0
  144a7c:	e3a04b01 	mov	r4, #1024	; 0x400
  144a80:	e2844032 	add	r4, r4, #50	; 0x32
  144a84:	e1b0cb21 	lsrs	ip, r1, #22
  144a88:	0affff5a 	beq	1447f8 <__adddf3+0xec>
  144a8c:	e3a02003 	mov	r2, #3
  144a90:	e1b0c1ac 	lsrs	ip, ip, #3
  144a94:	12822003 	addne	r2, r2, #3
  144a98:	e1b0c1ac 	lsrs	ip, ip, #3
  144a9c:	12822003 	addne	r2, r2, #3
  144aa0:	e08221ac 	add	r2, r2, ip, lsr #3
  144aa4:	e2623020 	rsb	r3, r2, #32
  144aa8:	e1a0c310 	lsl	ip, r0, r3
  144aac:	e1a00230 	lsr	r0, r0, r2
  144ab0:	e1800311 	orr	r0, r0, r1, lsl r3
  144ab4:	e1a01231 	lsr	r1, r1, r2
  144ab8:	e0844002 	add	r4, r4, r2
  144abc:	eaffff4d 	b	1447f8 <__adddf3+0xec>

00144ac0 <__aeabi_dmul>:
  144ac0:	e92d4070 	push	{r4, r5, r6, lr}
  144ac4:	e3a0c0ff 	mov	ip, #255	; 0xff
  144ac8:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  144acc:	e01c4a21 	ands	r4, ip, r1, lsr #20
  144ad0:	101c5a23 	andsne	r5, ip, r3, lsr #20
  144ad4:	1134000c 	teqne	r4, ip
  144ad8:	1135000c 	teqne	r5, ip
  144adc:	0b00006f 	bleq	144ca0 <__aeabi_dmul+0x1e0>
  144ae0:	e0844005 	add	r4, r4, r5
  144ae4:	e0216003 	eor	r6, r1, r3
  144ae8:	e1c11a8c 	bic	r1, r1, ip, lsl #21
  144aec:	e1c33a8c 	bic	r3, r3, ip, lsl #21
  144af0:	e1905601 	orrs	r5, r0, r1, lsl #12
  144af4:	11925603 	orrsne	r5, r2, r3, lsl #12
  144af8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144afc:	e3833601 	orr	r3, r3, #1048576	; 0x100000
  144b00:	0a00001c 	beq	144b78 <__aeabi_dmul+0xb8>
  144b04:	e08ec290 	umull	ip, lr, r0, r2
  144b08:	e3a05000 	mov	r5, #0
  144b0c:	e0a5e291 	umlal	lr, r5, r1, r2
  144b10:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
  144b14:	e0a5e390 	umlal	lr, r5, r0, r3
  144b18:	e3a06000 	mov	r6, #0
  144b1c:	e0a65391 	umlal	r5, r6, r1, r3
  144b20:	e33c0000 	teq	ip, #0
  144b24:	138ee001 	orrne	lr, lr, #1
  144b28:	e24440ff 	sub	r4, r4, #255	; 0xff
  144b2c:	e3560c02 	cmp	r6, #512	; 0x200
  144b30:	e2c44c03 	sbc	r4, r4, #768	; 0x300
  144b34:	2a000002 	bcs	144b44 <__aeabi_dmul+0x84>
  144b38:	e1b0e08e 	lsls	lr, lr, #1
  144b3c:	e0b55005 	adcs	r5, r5, r5
  144b40:	e0a66006 	adc	r6, r6, r6
  144b44:	e1821586 	orr	r1, r2, r6, lsl #11
  144b48:	e1811aa5 	orr	r1, r1, r5, lsr #21
  144b4c:	e1a00585 	lsl	r0, r5, #11
  144b50:	e1800aae 	orr	r0, r0, lr, lsr #21
  144b54:	e1a0e58e 	lsl	lr, lr, #11
  144b58:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  144b5c:	835c0c07 	cmphi	ip, #1792	; 0x700
  144b60:	8a00000f 	bhi	144ba4 <__aeabi_dmul+0xe4>
  144b64:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
  144b68:	01b0e0a0 	lsrseq	lr, r0, #1
  144b6c:	e2b00000 	adcs	r0, r0, #0
  144b70:	e0a11a04 	adc	r1, r1, r4, lsl #20
  144b74:	e8bd8070 	pop	{r4, r5, r6, pc}
  144b78:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
  144b7c:	e1861001 	orr	r1, r6, r1
  144b80:	e1800002 	orr	r0, r0, r2
  144b84:	e0211003 	eor	r1, r1, r3
  144b88:	e05440ac 	subs	r4, r4, ip, lsr #1
  144b8c:	c074500c 	rsbsgt	r5, r4, ip
  144b90:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  144b94:	c8bd8070 	popgt	{r4, r5, r6, pc}
  144b98:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144b9c:	e3a0e000 	mov	lr, #0
  144ba0:	e2544001 	subs	r4, r4, #1
  144ba4:	ca000058 	bgt	144d0c <__aeabi_dmul+0x24c>
  144ba8:	e3740036 	cmn	r4, #54	; 0x36
  144bac:	d3a00000 	movle	r0, #0
  144bb0:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
  144bb4:	d8bd8070 	pople	{r4, r5, r6, pc}
  144bb8:	e2644000 	rsb	r4, r4, #0
  144bbc:	e2544020 	subs	r4, r4, #32
  144bc0:	aa000018 	bge	144c28 <__aeabi_dmul+0x168>
  144bc4:	e294400c 	adds	r4, r4, #12
  144bc8:	ca00000b 	bgt	144bfc <__aeabi_dmul+0x13c>
  144bcc:	e2844014 	add	r4, r4, #20
  144bd0:	e2645020 	rsb	r5, r4, #32
  144bd4:	e1a03510 	lsl	r3, r0, r5
  144bd8:	e1a00430 	lsr	r0, r0, r4
  144bdc:	e1800511 	orr	r0, r0, r1, lsl r5
  144be0:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
  144be4:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  144be8:	e0900fa3 	adds	r0, r0, r3, lsr #31
  144bec:	e0a21431 	adc	r1, r2, r1, lsr r4
  144bf0:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144bf4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144bf8:	e8bd8070 	pop	{r4, r5, r6, pc}
  144bfc:	e264400c 	rsb	r4, r4, #12
  144c00:	e2645020 	rsb	r5, r4, #32
  144c04:	e1a03410 	lsl	r3, r0, r4
  144c08:	e1a00530 	lsr	r0, r0, r5
  144c0c:	e1800411 	orr	r0, r0, r1, lsl r4
  144c10:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144c14:	e0900fa3 	adds	r0, r0, r3, lsr #31
  144c18:	e2a11000 	adc	r1, r1, #0
  144c1c:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144c20:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144c24:	e8bd8070 	pop	{r4, r5, r6, pc}
  144c28:	e2645020 	rsb	r5, r4, #32
  144c2c:	e18ee510 	orr	lr, lr, r0, lsl r5
  144c30:	e1a03430 	lsr	r3, r0, r4
  144c34:	e1833511 	orr	r3, r3, r1, lsl r5
  144c38:	e1a00431 	lsr	r0, r1, r4
  144c3c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144c40:	e1c00431 	bic	r0, r0, r1, lsr r4
  144c44:	e0800fa3 	add	r0, r0, r3, lsr #31
  144c48:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144c4c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144c50:	e8bd8070 	pop	{r4, r5, r6, pc}
  144c54:	e3340000 	teq	r4, #0
  144c58:	1a000008 	bne	144c80 <__aeabi_dmul+0x1c0>
  144c5c:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
  144c60:	e1b00080 	lsls	r0, r0, #1
  144c64:	e0a11001 	adc	r1, r1, r1
  144c68:	e3110601 	tst	r1, #1048576	; 0x100000
  144c6c:	02444001 	subeq	r4, r4, #1
  144c70:	0afffffa 	beq	144c60 <__aeabi_dmul+0x1a0>
  144c74:	e1811006 	orr	r1, r1, r6
  144c78:	e3350000 	teq	r5, #0
  144c7c:	112fff1e 	bxne	lr
  144c80:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
  144c84:	e1b02082 	lsls	r2, r2, #1
  144c88:	e0a33003 	adc	r3, r3, r3
  144c8c:	e3130601 	tst	r3, #1048576	; 0x100000
  144c90:	02455001 	subeq	r5, r5, #1
  144c94:	0afffffa 	beq	144c84 <__aeabi_dmul+0x1c4>
  144c98:	e1833006 	orr	r3, r3, r6
  144c9c:	e12fff1e 	bx	lr
  144ca0:	e134000c 	teq	r4, ip
  144ca4:	e00c5a23 	and	r5, ip, r3, lsr #20
  144ca8:	1135000c 	teqne	r5, ip
  144cac:	0a000006 	beq	144ccc <__aeabi_dmul+0x20c>
  144cb0:	e1906081 	orrs	r6, r0, r1, lsl #1
  144cb4:	11926083 	orrsne	r6, r2, r3, lsl #1
  144cb8:	1affffe5 	bne	144c54 <__aeabi_dmul+0x194>
  144cbc:	e0211003 	eor	r1, r1, r3
  144cc0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144cc4:	e3a00000 	mov	r0, #0
  144cc8:	e8bd8070 	pop	{r4, r5, r6, pc}
  144ccc:	e1906081 	orrs	r6, r0, r1, lsl #1
  144cd0:	01a00002 	moveq	r0, r2
  144cd4:	01a01003 	moveq	r1, r3
  144cd8:	11926083 	orrsne	r6, r2, r3, lsl #1
  144cdc:	0a00000f 	beq	144d20 <__aeabi_dmul+0x260>
  144ce0:	e134000c 	teq	r4, ip
  144ce4:	1a000001 	bne	144cf0 <__aeabi_dmul+0x230>
  144ce8:	e1906601 	orrs	r6, r0, r1, lsl #12
  144cec:	1a00000b 	bne	144d20 <__aeabi_dmul+0x260>
  144cf0:	e135000c 	teq	r5, ip
  144cf4:	1a000003 	bne	144d08 <__aeabi_dmul+0x248>
  144cf8:	e1926603 	orrs	r6, r2, r3, lsl #12
  144cfc:	11a00002 	movne	r0, r2
  144d00:	11a01003 	movne	r1, r3
  144d04:	1a000005 	bne	144d20 <__aeabi_dmul+0x260>
  144d08:	e0211003 	eor	r1, r1, r3
  144d0c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144d10:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  144d14:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  144d18:	e3a00000 	mov	r0, #0
  144d1c:	e8bd8070 	pop	{r4, r5, r6, pc}
  144d20:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  144d24:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
  144d28:	e8bd8070 	pop	{r4, r5, r6, pc}

00144d2c <__aeabi_ddiv>:
  144d2c:	e92d4070 	push	{r4, r5, r6, lr}
  144d30:	e3a0c0ff 	mov	ip, #255	; 0xff
  144d34:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  144d38:	e01c4a21 	ands	r4, ip, r1, lsr #20
  144d3c:	101c5a23 	andsne	r5, ip, r3, lsr #20
  144d40:	1134000c 	teqne	r4, ip
  144d44:	1135000c 	teqne	r5, ip
  144d48:	0b00005c 	bleq	144ec0 <__aeabi_ddiv+0x194>
  144d4c:	e0444005 	sub	r4, r4, r5
  144d50:	e021e003 	eor	lr, r1, r3
  144d54:	e1925603 	orrs	r5, r2, r3, lsl #12
  144d58:	e1a01601 	lsl	r1, r1, #12
  144d5c:	0a00004b 	beq	144e90 <__aeabi_ddiv+0x164>
  144d60:	e1a03603 	lsl	r3, r3, #12
  144d64:	e3a05201 	mov	r5, #268435456	; 0x10000000
  144d68:	e1853223 	orr	r3, r5, r3, lsr #4
  144d6c:	e1833c22 	orr	r3, r3, r2, lsr #24
  144d70:	e1a02402 	lsl	r2, r2, #8
  144d74:	e1855221 	orr	r5, r5, r1, lsr #4
  144d78:	e1855c20 	orr	r5, r5, r0, lsr #24
  144d7c:	e1a06400 	lsl	r6, r0, #8
  144d80:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
  144d84:	e1550003 	cmp	r5, r3
  144d88:	01560002 	cmpeq	r6, r2
  144d8c:	e2a440fd 	adc	r4, r4, #253	; 0xfd
  144d90:	e2844c03 	add	r4, r4, #768	; 0x300
  144d94:	2a000001 	bcs	144da0 <__aeabi_ddiv+0x74>
  144d98:	e1b030a3 	lsrs	r3, r3, #1
  144d9c:	e1a02062 	rrx	r2, r2
  144da0:	e0566002 	subs	r6, r6, r2
  144da4:	e0c55003 	sbc	r5, r5, r3
  144da8:	e1b030a3 	lsrs	r3, r3, #1
  144dac:	e1a02062 	rrx	r2, r2
  144db0:	e3a00601 	mov	r0, #1048576	; 0x100000
  144db4:	e3a0c702 	mov	ip, #524288	; 0x80000
  144db8:	e056e002 	subs	lr, r6, r2
  144dbc:	e0d5e003 	sbcs	lr, r5, r3
  144dc0:	20466002 	subcs	r6, r6, r2
  144dc4:	21a0500e 	movcs	r5, lr
  144dc8:	2180000c 	orrcs	r0, r0, ip
  144dcc:	e1b030a3 	lsrs	r3, r3, #1
  144dd0:	e1a02062 	rrx	r2, r2
  144dd4:	e056e002 	subs	lr, r6, r2
  144dd8:	e0d5e003 	sbcs	lr, r5, r3
  144ddc:	20466002 	subcs	r6, r6, r2
  144de0:	21a0500e 	movcs	r5, lr
  144de4:	218000ac 	orrcs	r0, r0, ip, lsr #1
  144de8:	e1b030a3 	lsrs	r3, r3, #1
  144dec:	e1a02062 	rrx	r2, r2
  144df0:	e056e002 	subs	lr, r6, r2
  144df4:	e0d5e003 	sbcs	lr, r5, r3
  144df8:	20466002 	subcs	r6, r6, r2
  144dfc:	21a0500e 	movcs	r5, lr
  144e00:	2180012c 	orrcs	r0, r0, ip, lsr #2
  144e04:	e1b030a3 	lsrs	r3, r3, #1
  144e08:	e1a02062 	rrx	r2, r2
  144e0c:	e056e002 	subs	lr, r6, r2
  144e10:	e0d5e003 	sbcs	lr, r5, r3
  144e14:	20466002 	subcs	r6, r6, r2
  144e18:	21a0500e 	movcs	r5, lr
  144e1c:	218001ac 	orrcs	r0, r0, ip, lsr #3
  144e20:	e195e006 	orrs	lr, r5, r6
  144e24:	0a00000d 	beq	144e60 <__aeabi_ddiv+0x134>
  144e28:	e1a05205 	lsl	r5, r5, #4
  144e2c:	e1855e26 	orr	r5, r5, r6, lsr #28
  144e30:	e1a06206 	lsl	r6, r6, #4
  144e34:	e1a03183 	lsl	r3, r3, #3
  144e38:	e1833ea2 	orr	r3, r3, r2, lsr #29
  144e3c:	e1a02182 	lsl	r2, r2, #3
  144e40:	e1b0c22c 	lsrs	ip, ip, #4
  144e44:	1affffdb 	bne	144db8 <__aeabi_ddiv+0x8c>
  144e48:	e3110601 	tst	r1, #1048576	; 0x100000
  144e4c:	1a000006 	bne	144e6c <__aeabi_ddiv+0x140>
  144e50:	e1811000 	orr	r1, r1, r0
  144e54:	e3a00000 	mov	r0, #0
  144e58:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
  144e5c:	eaffffd5 	b	144db8 <__aeabi_ddiv+0x8c>
  144e60:	e3110601 	tst	r1, #1048576	; 0x100000
  144e64:	01811000 	orreq	r1, r1, r0
  144e68:	03a00000 	moveq	r0, #0
  144e6c:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  144e70:	835c0c07 	cmphi	ip, #1792	; 0x700
  144e74:	8affff4a 	bhi	144ba4 <__aeabi_dmul+0xe4>
  144e78:	e055c003 	subs	ip, r5, r3
  144e7c:	0056c002 	subseq	ip, r6, r2
  144e80:	01b0c0a0 	lsrseq	ip, r0, #1
  144e84:	e2b00000 	adcs	r0, r0, #0
  144e88:	e0a11a04 	adc	r1, r1, r4, lsl #20
  144e8c:	e8bd8070 	pop	{r4, r5, r6, pc}
  144e90:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
  144e94:	e18e1621 	orr	r1, lr, r1, lsr #12
  144e98:	e09440ac 	adds	r4, r4, ip, lsr #1
  144e9c:	c074500c 	rsbsgt	r5, r4, ip
  144ea0:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  144ea4:	c8bd8070 	popgt	{r4, r5, r6, pc}
  144ea8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144eac:	e3a0e000 	mov	lr, #0
  144eb0:	e2544001 	subs	r4, r4, #1
  144eb4:	eaffff3a 	b	144ba4 <__aeabi_dmul+0xe4>
  144eb8:	e185e006 	orr	lr, r5, r6
  144ebc:	eaffff38 	b	144ba4 <__aeabi_dmul+0xe4>
  144ec0:	e00c5a23 	and	r5, ip, r3, lsr #20
  144ec4:	e134000c 	teq	r4, ip
  144ec8:	0135000c 	teqeq	r5, ip
  144ecc:	0affff93 	beq	144d20 <__aeabi_dmul+0x260>
  144ed0:	e134000c 	teq	r4, ip
  144ed4:	1a000006 	bne	144ef4 <__aeabi_ddiv+0x1c8>
  144ed8:	e1904601 	orrs	r4, r0, r1, lsl #12
  144edc:	1affff8f 	bne	144d20 <__aeabi_dmul+0x260>
  144ee0:	e135000c 	teq	r5, ip
  144ee4:	1affff87 	bne	144d08 <__aeabi_dmul+0x248>
  144ee8:	e1a00002 	mov	r0, r2
  144eec:	e1a01003 	mov	r1, r3
  144ef0:	eaffff8a 	b	144d20 <__aeabi_dmul+0x260>
  144ef4:	e135000c 	teq	r5, ip
  144ef8:	1a000004 	bne	144f10 <__aeabi_ddiv+0x1e4>
  144efc:	e1925603 	orrs	r5, r2, r3, lsl #12
  144f00:	0affff6d 	beq	144cbc <__aeabi_dmul+0x1fc>
  144f04:	e1a00002 	mov	r0, r2
  144f08:	e1a01003 	mov	r1, r3
  144f0c:	eaffff83 	b	144d20 <__aeabi_dmul+0x260>
  144f10:	e1906081 	orrs	r6, r0, r1, lsl #1
  144f14:	11926083 	orrsne	r6, r2, r3, lsl #1
  144f18:	1affff4d 	bne	144c54 <__aeabi_dmul+0x194>
  144f1c:	e1904081 	orrs	r4, r0, r1, lsl #1
  144f20:	1affff78 	bne	144d08 <__aeabi_dmul+0x248>
  144f24:	e1925083 	orrs	r5, r2, r3, lsl #1
  144f28:	1affff63 	bne	144cbc <__aeabi_dmul+0x1fc>
  144f2c:	eaffff7b 	b	144d20 <__aeabi_dmul+0x260>

00144f30 <__gedf2>:
  144f30:	e3e0c000 	mvn	ip, #0
  144f34:	ea000002 	b	144f44 <__cmpdf2+0x4>

00144f38 <__ledf2>:
  144f38:	e3a0c001 	mov	ip, #1
  144f3c:	ea000000 	b	144f44 <__cmpdf2+0x4>

00144f40 <__cmpdf2>:
  144f40:	e3a0c001 	mov	ip, #1
  144f44:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
  144f48:	e1a0c081 	lsl	ip, r1, #1
  144f4c:	e1f0cacc 	mvns	ip, ip, asr #21
  144f50:	e1a0c083 	lsl	ip, r3, #1
  144f54:	11f0cacc 	mvnsne	ip, ip, asr #21
  144f58:	0a00000e 	beq	144f98 <__cmpdf2+0x58>
  144f5c:	e28dd004 	add	sp, sp, #4
  144f60:	e190c081 	orrs	ip, r0, r1, lsl #1
  144f64:	0192c083 	orrseq	ip, r2, r3, lsl #1
  144f68:	11310003 	teqne	r1, r3
  144f6c:	01300002 	teqeq	r0, r2
  144f70:	03a00000 	moveq	r0, #0
  144f74:	012fff1e 	bxeq	lr
  144f78:	e3700000 	cmn	r0, #0
  144f7c:	e1310003 	teq	r1, r3
  144f80:	51510003 	cmppl	r1, r3
  144f84:	01500002 	cmpeq	r0, r2
  144f88:	21a00fc3 	asrcs	r0, r3, #31
  144f8c:	31e00fc3 	mvncc	r0, r3, asr #31
  144f90:	e3800001 	orr	r0, r0, #1
  144f94:	e12fff1e 	bx	lr
  144f98:	e1a0c081 	lsl	ip, r1, #1
  144f9c:	e1f0cacc 	mvns	ip, ip, asr #21
  144fa0:	1a000001 	bne	144fac <__cmpdf2+0x6c>
  144fa4:	e190c601 	orrs	ip, r0, r1, lsl #12
  144fa8:	1a000004 	bne	144fc0 <__cmpdf2+0x80>
  144fac:	e1a0c083 	lsl	ip, r3, #1
  144fb0:	e1f0cacc 	mvns	ip, ip, asr #21
  144fb4:	1affffe8 	bne	144f5c <__cmpdf2+0x1c>
  144fb8:	e192c603 	orrs	ip, r2, r3, lsl #12
  144fbc:	0affffe6 	beq	144f5c <__cmpdf2+0x1c>
  144fc0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
  144fc4:	e12fff1e 	bx	lr

00144fc8 <__aeabi_cdrcmple>:
  144fc8:	e1a0c000 	mov	ip, r0
  144fcc:	e1a00002 	mov	r0, r2
  144fd0:	e1a0200c 	mov	r2, ip
  144fd4:	e1a0c001 	mov	ip, r1
  144fd8:	e1a01003 	mov	r1, r3
  144fdc:	e1a0300c 	mov	r3, ip
  144fe0:	eaffffff 	b	144fe4 <__aeabi_cdcmpeq>

00144fe4 <__aeabi_cdcmpeq>:
  144fe4:	e92d4001 	push	{r0, lr}
  144fe8:	ebffffd4 	bl	144f40 <__cmpdf2>
  144fec:	e3500000 	cmp	r0, #0
  144ff0:	43700000 	cmnmi	r0, #0
  144ff4:	e8bd8001 	pop	{r0, pc}

00144ff8 <__aeabi_dcmpeq>:
  144ff8:	e52de008 	str	lr, [sp, #-8]!
  144ffc:	ebfffff8 	bl	144fe4 <__aeabi_cdcmpeq>
  145000:	03a00001 	moveq	r0, #1
  145004:	13a00000 	movne	r0, #0
  145008:	e49df008 	ldr	pc, [sp], #8

0014500c <__aeabi_dcmplt>:
  14500c:	e52de008 	str	lr, [sp, #-8]!
  145010:	ebfffff3 	bl	144fe4 <__aeabi_cdcmpeq>
  145014:	33a00001 	movcc	r0, #1
  145018:	23a00000 	movcs	r0, #0
  14501c:	e49df008 	ldr	pc, [sp], #8

00145020 <__aeabi_dcmple>:
  145020:	e52de008 	str	lr, [sp, #-8]!
  145024:	ebffffee 	bl	144fe4 <__aeabi_cdcmpeq>
  145028:	93a00001 	movls	r0, #1
  14502c:	83a00000 	movhi	r0, #0
  145030:	e49df008 	ldr	pc, [sp], #8

00145034 <__aeabi_dcmpge>:
  145034:	e52de008 	str	lr, [sp, #-8]!
  145038:	ebffffe2 	bl	144fc8 <__aeabi_cdrcmple>
  14503c:	93a00001 	movls	r0, #1
  145040:	83a00000 	movhi	r0, #0
  145044:	e49df008 	ldr	pc, [sp], #8

00145048 <__aeabi_dcmpgt>:
  145048:	e52de008 	str	lr, [sp, #-8]!
  14504c:	ebffffdd 	bl	144fc8 <__aeabi_cdrcmple>
  145050:	33a00001 	movcc	r0, #1
  145054:	23a00000 	movcs	r0, #0
  145058:	e49df008 	ldr	pc, [sp], #8

0014505c <__aeabi_d2iz>:
  14505c:	e1a02081 	lsl	r2, r1, #1
  145060:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  145064:	2a00000c 	bcs	14509c <__aeabi_d2iz+0x40>
  145068:	5a000009 	bpl	145094 <__aeabi_d2iz+0x38>
  14506c:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  145070:	e0532ac2 	subs	r2, r3, r2, asr #21
  145074:	9a00000a 	bls	1450a4 <__aeabi_d2iz+0x48>
  145078:	e1a03581 	lsl	r3, r1, #11
  14507c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  145080:	e1833aa0 	orr	r3, r3, r0, lsr #21
  145084:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  145088:	e1a00233 	lsr	r0, r3, r2
  14508c:	12600000 	rsbne	r0, r0, #0
  145090:	e12fff1e 	bx	lr
  145094:	e3a00000 	mov	r0, #0
  145098:	e12fff1e 	bx	lr
  14509c:	e1900601 	orrs	r0, r0, r1, lsl #12
  1450a0:	1a000002 	bne	1450b0 <__aeabi_d2iz+0x54>
  1450a4:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
  1450a8:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
  1450ac:	e12fff1e 	bx	lr
  1450b0:	e3a00000 	mov	r0, #0
  1450b4:	e12fff1e 	bx	lr

001450b8 <__aeabi_d2uiz>:
  1450b8:	e1b02081 	lsls	r2, r1, #1
  1450bc:	2a00000a 	bcs	1450ec <__aeabi_d2uiz+0x34>
  1450c0:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  1450c4:	2a00000a 	bcs	1450f4 <__aeabi_d2uiz+0x3c>
  1450c8:	5a000007 	bpl	1450ec <__aeabi_d2uiz+0x34>
  1450cc:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  1450d0:	e0532ac2 	subs	r2, r3, r2, asr #21
  1450d4:	4a000008 	bmi	1450fc <__aeabi_d2uiz+0x44>
  1450d8:	e1a03581 	lsl	r3, r1, #11
  1450dc:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  1450e0:	e1833aa0 	orr	r3, r3, r0, lsr #21
  1450e4:	e1a00233 	lsr	r0, r3, r2
  1450e8:	e12fff1e 	bx	lr
  1450ec:	e3a00000 	mov	r0, #0
  1450f0:	e12fff1e 	bx	lr
  1450f4:	e1900601 	orrs	r0, r0, r1, lsl #12
  1450f8:	1a000001 	bne	145104 <__aeabi_d2uiz+0x4c>
  1450fc:	e3e00000 	mvn	r0, #0
  145100:	e12fff1e 	bx	lr
  145104:	e3a00000 	mov	r0, #0
  145108:	e12fff1e 	bx	lr

0014510c <__aeabi_ldivmod>:
  14510c:	e3530000 	cmp	r3, #0
  145110:	03520000 	cmpeq	r2, #0
  145114:	1a000007 	bne	145138 <__aeabi_ldivmod+0x2c>
  145118:	e3510000 	cmp	r1, #0
  14511c:	b3a01102 	movlt	r1, #-2147483648	; 0x80000000
  145120:	b3a00000 	movlt	r0, #0
  145124:	ba000002 	blt	145134 <__aeabi_ldivmod+0x28>
  145128:	03500000 	cmpeq	r0, #0
  14512c:	13e01102 	mvnne	r1, #-2147483648	; 0x80000000
  145130:	13e00000 	mvnne	r0, #0
  145134:	eaffcee3 	b	138cc8 <__aeabi_idiv0>
  145138:	e24dd008 	sub	sp, sp, #8
  14513c:	e92d6000 	push	{sp, lr}
  145140:	e3510000 	cmp	r1, #0
  145144:	ba000006 	blt	145164 <__aeabi_ldivmod+0x58>
  145148:	e3530000 	cmp	r3, #0
  14514c:	ba000011 	blt	145198 <__aeabi_ldivmod+0x8c>
  145150:	eb000031 	bl	14521c <__udivmoddi4>
  145154:	e59de004 	ldr	lr, [sp, #4]
  145158:	e28dd008 	add	sp, sp, #8
  14515c:	e8bd000c 	pop	{r2, r3}
  145160:	e12fff1e 	bx	lr
  145164:	e2700000 	rsbs	r0, r0, #0
  145168:	e0c11081 	sbc	r1, r1, r1, lsl #1
  14516c:	e3530000 	cmp	r3, #0
  145170:	ba000011 	blt	1451bc <__aeabi_ldivmod+0xb0>
  145174:	eb000028 	bl	14521c <__udivmoddi4>
  145178:	e59de004 	ldr	lr, [sp, #4]
  14517c:	e28dd008 	add	sp, sp, #8
  145180:	e8bd000c 	pop	{r2, r3}
  145184:	e2700000 	rsbs	r0, r0, #0
  145188:	e0c11081 	sbc	r1, r1, r1, lsl #1
  14518c:	e2722000 	rsbs	r2, r2, #0
  145190:	e0c33083 	sbc	r3, r3, r3, lsl #1
  145194:	e12fff1e 	bx	lr
  145198:	e2722000 	rsbs	r2, r2, #0
  14519c:	e0c33083 	sbc	r3, r3, r3, lsl #1
  1451a0:	eb00001d 	bl	14521c <__udivmoddi4>
  1451a4:	e59de004 	ldr	lr, [sp, #4]
  1451a8:	e28dd008 	add	sp, sp, #8
  1451ac:	e8bd000c 	pop	{r2, r3}
  1451b0:	e2700000 	rsbs	r0, r0, #0
  1451b4:	e0c11081 	sbc	r1, r1, r1, lsl #1
  1451b8:	e12fff1e 	bx	lr
  1451bc:	e2722000 	rsbs	r2, r2, #0
  1451c0:	e0c33083 	sbc	r3, r3, r3, lsl #1
  1451c4:	eb000014 	bl	14521c <__udivmoddi4>
  1451c8:	e59de004 	ldr	lr, [sp, #4]
  1451cc:	e28dd008 	add	sp, sp, #8
  1451d0:	e8bd000c 	pop	{r2, r3}
  1451d4:	e2722000 	rsbs	r2, r2, #0
  1451d8:	e0c33083 	sbc	r3, r3, r3, lsl #1
  1451dc:	e12fff1e 	bx	lr

001451e0 <__aeabi_uldivmod>:
  1451e0:	e3530000 	cmp	r3, #0
  1451e4:	03520000 	cmpeq	r2, #0
  1451e8:	1a000004 	bne	145200 <__aeabi_uldivmod+0x20>
  1451ec:	e3510000 	cmp	r1, #0
  1451f0:	03500000 	cmpeq	r0, #0
  1451f4:	13e01000 	mvnne	r1, #0
  1451f8:	13e00000 	mvnne	r0, #0
  1451fc:	eaffceb1 	b	138cc8 <__aeabi_idiv0>
  145200:	e24dd008 	sub	sp, sp, #8
  145204:	e92d6000 	push	{sp, lr}
  145208:	eb000003 	bl	14521c <__udivmoddi4>
  14520c:	e59de004 	ldr	lr, [sp, #4]
  145210:	e28dd008 	add	sp, sp, #8
  145214:	e8bd000c 	pop	{r2, r3}
  145218:	e12fff1e 	bx	lr

0014521c <__udivmoddi4>:
  14521c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  145220:	e1510003 	cmp	r1, r3
  145224:	e24dd008 	sub	sp, sp, #8
  145228:	01500002 	cmpeq	r0, r2
  14522c:	e1a09000 	mov	r9, r0
  145230:	e1a0a001 	mov	sl, r1
  145234:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  145238:	3a00003c 	bcc	145330 <__udivmoddi4+0x114>
  14523c:	e1a00002 	mov	r0, r2
  145240:	e3530000 	cmp	r3, #0
  145244:	e1a01003 	mov	r1, r3
  145248:	016f3f10 	clzeq	r3, r0
  14524c:	116f2f13 	clzne	r2, r3
  145250:	02832020 	addeq	r2, r3, #32
  145254:	e35a0000 	cmp	sl, #0
  145258:	016f3f19 	clzeq	r3, r9
  14525c:	116f3f1a 	clzne	r3, sl
  145260:	02833020 	addeq	r3, r3, #32
  145264:	e0423003 	sub	r3, r2, r3
  145268:	e243c020 	sub	ip, r3, #32
  14526c:	e1a07311 	lsl	r7, r1, r3
  145270:	e1877c10 	orr	r7, r7, r0, lsl ip
  145274:	e263e020 	rsb	lr, r3, #32
  145278:	e1877e30 	orr	r7, r7, r0, lsr lr
  14527c:	e1a06310 	lsl	r6, r0, r3
  145280:	e15a0007 	cmp	sl, r7
  145284:	01590006 	cmpeq	r9, r6
  145288:	2a000030 	bcs	145350 <__udivmoddi4+0x134>
  14528c:	e3a01000 	mov	r1, #0
  145290:	e3a02000 	mov	r2, #0
  145294:	e88d0006 	stm	sp, {r1, r2}
  145298:	e3530000 	cmp	r3, #0
  14529c:	0a000026 	beq	14533c <__udivmoddi4+0x120>
  1452a0:	e1b070a7 	lsrs	r7, r7, #1
  1452a4:	e1a06066 	rrx	r6, r6
  1452a8:	e1a02003 	mov	r2, r3
  1452ac:	ea000007 	b	1452d0 <__udivmoddi4+0xb4>
  1452b0:	e0590006 	subs	r0, r9, r6
  1452b4:	e0ca1007 	sbc	r1, sl, r7
  1452b8:	e0904000 	adds	r4, r0, r0
  1452bc:	e0a15001 	adc	r5, r1, r1
  1452c0:	e2949001 	adds	r9, r4, #1
  1452c4:	e2a5a000 	adc	sl, r5, #0
  1452c8:	e2522001 	subs	r2, r2, #1
  1452cc:	0a000006 	beq	1452ec <__udivmoddi4+0xd0>
  1452d0:	e15a0007 	cmp	sl, r7
  1452d4:	01590006 	cmpeq	r9, r6
  1452d8:	2afffff4 	bcs	1452b0 <__udivmoddi4+0x94>
  1452dc:	e0999009 	adds	r9, r9, r9
  1452e0:	e0aaa00a 	adc	sl, sl, sl
  1452e4:	e2522001 	subs	r2, r2, #1
  1452e8:	1afffff8 	bne	1452d0 <__udivmoddi4+0xb4>
  1452ec:	e89d00c0 	ldm	sp, {r6, r7}
  1452f0:	e1a02339 	lsr	r2, r9, r3
  1452f4:	e0966009 	adds	r6, r6, r9
  1452f8:	e1822e1a 	orr	r2, r2, sl, lsl lr
  1452fc:	e1a0133a 	lsr	r1, sl, r3
  145300:	e1822c3a 	orr	r2, r2, sl, lsr ip
  145304:	e0a7700a 	adc	r7, r7, sl
  145308:	e1a0a001 	mov	sl, r1
  14530c:	e1a0131a 	lsl	r1, sl, r3
  145310:	e1811c12 	orr	r1, r1, r2, lsl ip
  145314:	e1a00312 	lsl	r0, r2, r3
  145318:	e0566000 	subs	r6, r6, r0
  14531c:	e1811e32 	orr	r1, r1, r2, lsr lr
  145320:	e0c77001 	sbc	r7, r7, r1
  145324:	e1a09002 	mov	r9, r2
  145328:	e88d00c0 	stm	sp, {r6, r7}
  14532c:	ea000002 	b	14533c <__udivmoddi4+0x120>
  145330:	e3a03000 	mov	r3, #0
  145334:	e3a04000 	mov	r4, #0
  145338:	e88d0018 	stm	sp, {r3, r4}
  14533c:	e3580000 	cmp	r8, #0
  145340:	18880600 	stmne	r8, {r9, sl}
  145344:	e89d0003 	ldm	sp, {r0, r1}
  145348:	e28dd008 	add	sp, sp, #8
  14534c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  145350:	e3a02001 	mov	r2, #1
  145354:	e1a01c12 	lsl	r1, r2, ip
  145358:	e1811e32 	orr	r1, r1, r2, lsr lr
  14535c:	e0599006 	subs	r9, r9, r6
  145360:	e1a02312 	lsl	r2, r2, r3
  145364:	e58d1004 	str	r1, [sp, #4]
  145368:	e0caa007 	sbc	sl, sl, r7
  14536c:	e58d2000 	str	r2, [sp]
  145370:	eaffffc8 	b	145298 <__udivmoddi4+0x7c>

00145374 <_init>:
  145374:	e92d4001 	push	{r0, lr}
  145378:	e8bd4001 	pop	{r0, lr}
  14537c:	e12fff1e 	bx	lr

00145380 <_fini>:
  145380:	e92d4001 	push	{r0, lr}
  145384:	e8bd4001 	pop	{r0, lr}
  145388:	e12fff1e 	bx	lr
  14538c:	706d6f63 	.word	0x706d6f63
  145390:	6974656c 	.word	0x6974656c
  145394:	00006e6f 	.word	0x00006e6f
  145398:	20746553 	.word	0x20746553
  14539c:	6c626f6e 	.word	0x6c626f6e
  1453a0:	696b636f 	.word	0x696b636f
  1453a4:	6520676e 	.word	0x6520676e
  1453a8:	726f7272 	.word	0x726f7272
  1453ac:	00000021 	.word	0x00000021
  1453b0:	61657243 	.word	0x61657243
  1453b4:	6c206574 	.word	0x6c206574
  1453b8:	65747369 	.word	0x65747369
  1453bc:	2064666e 	.word	0x2064666e
  1453c0:	6b636f73 	.word	0x6b636f73
  1453c4:	65207465 	.word	0x65207465
  1453c8:	726f7272 	.word	0x726f7272
  1453cc:	7325203a 	.word	0x7325203a
  1453d0:	72726528 	.word	0x72726528
  1453d4:	203a6f6e 	.word	0x203a6f6e
  1453d8:	0a296425 	.word	0x0a296425
  1453dc:	00000000 	.word	0x00000000
  1453e0:	73746553 	.word	0x73746553
  1453e4:	6f6b636f 	.word	0x6f6b636f
  1453e8:	72207470 	.word	0x72207470
  1453ec:	65737565 	.word	0x65737565
  1453f0:	20646461 	.word	0x20646461
  1453f4:	6c696166 	.word	0x6c696166
  1453f8:	00006465 	.word	0x00006465
  1453fc:	646e6942 	.word	0x646e6942
  145400:	636f7320 	.word	0x636f7320
  145404:	2074656b 	.word	0x2074656b
  145408:	6f727265 	.word	0x6f727265
  14540c:	25203a72 	.word	0x25203a72
  145410:	72652873 	.word	0x72652873
  145414:	3a6f6e72 	.word	0x3a6f6e72
  145418:	29642520 	.word	0x29642520
  14541c:	6466202c 	.word	0x6466202c
  145420:	0a64253d 	.word	0x0a64253d
  145424:	00000000 	.word	0x00000000
  145428:	7473694c 	.word	0x7473694c
  14542c:	73206e65 	.word	0x73206e65
  145430:	656b636f 	.word	0x656b636f
  145434:	72652074 	.word	0x72652074
  145438:	3a726f72 	.word	0x3a726f72
  14543c:	28732520 	.word	0x28732520
  145440:	6e727265 	.word	0x6e727265
  145444:	25203a6f 	.word	0x25203a6f
  145448:	000a2964 	.word	0x000a2964
  14544c:	61657243 	.word	0x61657243
  145450:	63206574 	.word	0x63206574
  145454:	6e65696c 	.word	0x6e65696c
  145458:	20646674 	.word	0x20646674
  14545c:	6b636f73 	.word	0x6b636f73
  145460:	65207465 	.word	0x65207465
  145464:	726f7272 	.word	0x726f7272
  145468:	7325203a 	.word	0x7325203a
  14546c:	72726528 	.word	0x72726528
  145470:	203a6f6e 	.word	0x203a6f6e
  145474:	0a296425 	.word	0x0a296425
  145478:	00000000 	.word	0x00000000
  14547c:	656c6573 	.word	0x656c6573
  145480:	65207463 	.word	0x65207463
  145484:	726f7272 	.word	0x726f7272
  145488:	00000000 	.word	0x00000000
  14548c:	746e6f63 	.word	0x746e6f63
  145490:	65756e69 	.word	0x65756e69
  145494:	00000000 	.word	0x00000000
  145498:	69745f75 	.word	0x69745f75
  14549c:	0072656d 	.word	0x0072656d
  1454a0:	5f6d7475 	.word	0x5f6d7475
  1454a4:	6574756d 	.word	0x6574756d
  1454a8:	00000078 	.word	0x00000078
  1454ac:	00007325 	.word	0x00007325
  1454b0:	72657355 	.word	0x72657355
  1454b4:	3a505041 	.word	0x3a505041
  1454b8:	73252820 	.word	0x73252820
  1454bc:	73612029 	.word	0x73612029
  1454c0:	74726573 	.word	0x74726573
  1454c4:	206e6f69 	.word	0x206e6f69
  1454c8:	6c696166 	.word	0x6c696166
  1454cc:	61206465 	.word	0x61206465
  1454d0:	75662074 	.word	0x75662074
  1454d4:	6974636e 	.word	0x6974636e
  1454d8:	253a6e6f 	.word	0x253a6e6f
  1454dc:	6c202c73 	.word	0x6c202c73
  1454e0:	20656e69 	.word	0x20656e69
  1454e4:	626d756e 	.word	0x626d756e
  1454e8:	253a7265 	.word	0x253a7265
  1454ec:	000a2064 	.word	0x000a2064
  1454f0:	6e616863 	.word	0x6e616863
  1454f4:	206c656e 	.word	0x206c656e
  1454f8:	30203d3e 	.word	0x30203d3e
  1454fc:	00000000 	.word	0x00000000
  145500:	5049776c 	.word	0x5049776c
  145504:	0074694b 	.word	0x0074694b
  145508:	61746164 	.word	0x61746164
  14550c:	00646e49 	.word	0x00646e49
  145510:	6c207325 	.word	0x6c207325
  145514:	20656e69 	.word	0x20656e69
  145518:	73206425 	.word	0x73206425
  14551c:	74646e65 	.word	0x74646e65
  145520:	7265206f 	.word	0x7265206f
  145524:	0a726f72 	.word	0x0a726f72
  145528:	00000000 	.word	0x00000000
  14552c:	5049776c 	.word	0x5049776c
  145530:	2074694b 	.word	0x2074694b
  145534:	67617355 	.word	0x67617355
  145538:	090a3a65 	.word	0x090a3a65
  14553c:	5049776c 	.word	0x5049776c
  145540:	2074694b 	.word	0x2074694b
  145544:	20202020 	.word	0x20202020
  145548:	20202020 	.word	0x20202020
  14554c:	20202020 	.word	0x20202020
  145550:	203a2020 	.word	0x203a2020
  145554:	6e757220 	.word	0x6e757220
  145558:	49776c20 	.word	0x49776c20
  14555c:	74694b50 	.word	0x74694b50
  145560:	6177202c 	.word	0x6177202c
  145564:	66207469 	.word	0x66207469
  145568:	6520726f 	.word	0x6520726f
  14556c:	65646874 	.word	0x65646874
  145570:	6f742076 	.word	0x6f742076
  145574:	74746120 	.word	0x74746120
  145578:	0a686361 	.word	0x0a686361
  14557c:	49776c09 	.word	0x49776c09
  145580:	74694b50 	.word	0x74694b50
  145584:	74746120 	.word	0x74746120
  145588:	20686361 	.word	0x20686361
  14558c:	653c2020 	.word	0x653c2020
  145590:	3a3e6874 	.word	0x3a3e6874
  145594:	74612020 	.word	0x74612020
  145598:	68636174 	.word	0x68636174
  14559c:	65687420 	.word	0x65687420
  1455a0:	76656420 	.word	0x76656420
  1455a4:	20656369 	.word	0x20656369
  1455a8:	6874653c 	.word	0x6874653c
  1455ac:	6f74203e 	.word	0x6f74203e
  1455b0:	49776c20 	.word	0x49776c20
  1455b4:	74694b50 	.word	0x74694b50
  1455b8:	776c090a 	.word	0x776c090a
  1455bc:	694b5049 	.word	0x694b5049
  1455c0:	65642074 	.word	0x65642074
  1455c4:	61747461 	.word	0x61747461
  1455c8:	3c206863 	.word	0x3c206863
  1455cc:	3e687465 	.word	0x3e687465
  1455d0:	6420203a 	.word	0x6420203a
  1455d4:	74612d65 	.word	0x74612d65
  1455d8:	68636174 	.word	0x68636174
  1455dc:	65687420 	.word	0x65687420
  1455e0:	76656420 	.word	0x76656420
  1455e4:	20656369 	.word	0x20656369
  1455e8:	6874653c 	.word	0x6874653c
  1455ec:	7266203e 	.word	0x7266203e
  1455f0:	6c206d6f 	.word	0x6c206d6f
  1455f4:	4b504977 	.word	0x4b504977
  1455f8:	090a7469 	.word	0x090a7469
  1455fc:	5049776c 	.word	0x5049776c
  145600:	2074694b 	.word	0x2074694b
  145604:	61666564 	.word	0x61666564
  145608:	20746c75 	.word	0x20746c75
  14560c:	74653c20 	.word	0x74653c20
  145610:	203a3e68 	.word	0x203a3e68
  145614:	74657320 	.word	0x74657320
  145618:	74653c20 	.word	0x74653c20
  14561c:	61203e68 	.word	0x61203e68
  145620:	68742073 	.word	0x68742073
  145624:	65642065 	.word	0x65642065
  145628:	6c756166 	.word	0x6c756166
  14562c:	65642074 	.word	0x65642074
  145630:	65636976 	.word	0x65636976
  145634:	776c090a 	.word	0x776c090a
  145638:	694b5049 	.word	0x694b5049
  14563c:	74732074 	.word	0x74732074
  145640:	73757461 	.word	0x73757461
  145644:	20202020 	.word	0x20202020
  145648:	20202020 	.word	0x20202020
  14564c:	7320203a 	.word	0x7320203a
  145650:	20776f68 	.word	0x20776f68
  145654:	20656874 	.word	0x20656874
  145658:	74617473 	.word	0x74617473
  14565c:	6f207375 	.word	0x6f207375
  145660:	75722066 	.word	0x75722066
  145664:	6e696e6e 	.word	0x6e696e6e
  145668:	776c2067 	.word	0x776c2067
  14566c:	494b5049 	.word	0x494b5049
  145670:	00000074 	.word	0x00000074
  145674:	5049776c 	.word	0x5049776c
  145678:	3a74694b 	.word	0x3a74694b
  14567c:	61747320 	.word	0x61747320
  145680:	20737472 	.word	0x20737472
  145684:	72206f74 	.word	0x72206f74
  145688:	61206e75 	.word	0x61206e75
  14568c:	68742073 	.word	0x68742073
  145690:	65732065 	.word	0x65732065
  145694:	72657672 	.word	0x72657672
  145698:	00000000 	.word	0x00000000
  14569c:	2e2e2e20 	.word	0x2e2e2e20
  1456a0:	6c696166 	.word	0x6c696166
  1456a4:	00216465 	.word	0x00216465
  1456a8:	2e2e2e20 	.word	0x2e2e2e20
  1456ac:	70696b73 	.word	0x70696b73
  1456b0:	21646570 	.word	0x21646570
  1456b4:	726c4120 	.word	0x726c4120
  1456b8:	79646165 	.word	0x79646165
  1456bc:	696e6920 	.word	0x696e6920
  1456c0:	6c616974 	.word	0x6c616974
  1456c4:	64657a69 	.word	0x64657a69
  1456c8:	00000000 	.word	0x00000000
  1456cc:	2e2e2e20 	.word	0x2e2e2e20
  1456d0:	63637573 	.word	0x63637573
  1456d4:	65646565 	.word	0x65646565
  1456d8:	00002164 	.word	0x00002164
  1456dc:	5049776c 	.word	0x5049776c
  1456e0:	3a74694b 	.word	0x3a74694b
  1456e4:	696e6920 	.word	0x696e6920
  1456e8:	74652074 	.word	0x74652074
  1456ec:	65642068 	.word	0x65642068
  1456f0:	2e2e2e76 	.word	0x2e2e2e76
  1456f4:	00000000 	.word	0x00000000
  1456f8:	63637573 	.word	0x63637573
  1456fc:	65646565 	.word	0x65646565
  145700:	00000064 	.word	0x00000064
  145704:	61747461 	.word	0x61747461
  145708:	00006863 	.word	0x00006863
  14570c:	5049776c 	.word	0x5049776c
  145710:	3a74694b 	.word	0x3a74694b
  145714:	74746120 	.word	0x74746120
  145718:	20686361 	.word	0x20686361
  14571c:	69766564 	.word	0x69766564
  145720:	25206563 	.word	0x25206563
  145724:	00000a73 	.word	0x00000a73
  145728:	6e6e6163 	.word	0x6e6e6163
  14572c:	6f20746f 	.word	0x6f20746f
  145730:	206e6570 	.word	0x206e6570
  145734:	61746164 	.word	0x61746164
  145738:	6168635f 	.word	0x6168635f
  14573c:	6c656e6e 	.word	0x6c656e6e
  145740:	6c70202c 	.word	0x6c70202c
  145744:	65736165 	.word	0x65736165
  145748:	6b616d20 	.word	0x6b616d20
  14574c:	75732065 	.word	0x75732065
  145750:	6c206572 	.word	0x6c206572
  145754:	4b504977 	.word	0x4b504977
  145758:	73207469 	.word	0x73207469
  14575c:	65767265 	.word	0x65767265
  145760:	73692072 	.word	0x73692072
  145764:	6e757220 	.word	0x6e757220
  145768:	676e696e 	.word	0x676e696e
  14576c:	00000021 	.word	0x00000021
  145770:	74616564 	.word	0x74616564
  145774:	68636174 	.word	0x68636174
  145778:	00000000 	.word	0x00000000
  14577c:	5049776c 	.word	0x5049776c
  145780:	3a74694b 	.word	0x3a74694b
  145784:	2d656420 	.word	0x2d656420
  145788:	61747461 	.word	0x61747461
  14578c:	64206863 	.word	0x64206863
  145790:	63697665 	.word	0x63697665
  145794:	73252065 	.word	0x73252065
  145798:	0000000a 	.word	0x0000000a
  14579c:	61666564 	.word	0x61666564
  1457a0:	00746c75 	.word	0x00746c75
  1457a4:	5049776c 	.word	0x5049776c
  1457a8:	3a74694b 	.word	0x3a74694b
  1457ac:	74657320 	.word	0x74657320
  1457b0:	65687420 	.word	0x65687420
  1457b4:	66656420 	.word	0x66656420
  1457b8:	746c7561 	.word	0x746c7561
  1457bc:	76656420 	.word	0x76656420
  1457c0:	20656369 	.word	0x20656369
  1457c4:	00007325 	.word	0x00007325
  1457c8:	74617473 	.word	0x74617473
  1457cc:	00007375 	.word	0x00007375
  1457d0:	5049776c 	.word	0x5049776c
  1457d4:	3a74694b 	.word	0x3a74694b
  1457d8:	65687420 	.word	0x65687420
  1457dc:	61747320 	.word	0x61747320
  1457e0:	20737574 	.word	0x20737574
  1457e4:	7420666f 	.word	0x7420666f
  1457e8:	61206568 	.word	0x61206568
  1457ec:	63617474 	.word	0x63617474
  1457f0:	20646568 	.word	0x20646568
  1457f4:	69766564 	.word	0x69766564
  1457f8:	20736563 	.word	0x20736563
  1457fc:	66207361 	.word	0x66207361
  145800:	6f6c6c6f 	.word	0x6f6c6c6f
  145804:	00007377 	.word	0x00007377

00145808 <__func__.9579>:
  145808:	63617473 75725f6b 0000006e              stack_run...

00145814 <__FUNCTION__.6247>:
  145814:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  145824:	00000000                                ....

00145828 <__FUNCTION__.6253>:
  145828:	6e616863 5f6c656e 5f646d63 6c706572     channel_cmd_repl
  145838:	00000079                                y...

0014583c <__FUNCTION__.6242>:
  14583c:	6e616863 5f6c656e 5f646d63 646e6573     channel_cmd_send
  14584c:	00000000 3a207325 6c696146 206f7420     ....%s :Fail to 
  14585c:	6f6c6c61 65746163 73206120 65726168     allocate a share
  14586c:	656d2064 79726f6d 735f2021 6b5f6d68     d memory! _shm_k
  14587c:	25207965 000a646c 20656854 6f6c6c61     ey %ld..The allo
  14588c:	65746163 68732064 64657261 6d656d20     cated shared mem
  14589c:	2079726f 73656f64 2074276e 65766168     ory doesn't have
  1458ac:	76206120 64696c61 64646120 73736572      a valid address
  1458bc:	00000021                                !...

001458c0 <__func__.6282>:
  1458c0:	6e616863 5f6c656e 706d6f63 5f65736f     channel_compose_
  1458d0:	00646d63 6e616863 206c656e 30203d3e     cmd.channel >= 0
  1458e0:	00000000 68746575 7672735f 00000000     ....ueth_srv....
  1458f0:	68746575 746e695f 00000000 6e65706f     ueth_int....open
  145900:	20732520 6c696166 000a6465               %s failed..

0014590c <__FUNCTION__.5856>:
  14590c:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  14591c:	00000000                                ....

00145920 <__FUNCTION__.5845>:
  145920:	6e616863 5f6c656e 5f646d63 646e6573     channel_cmd_send
  145930:	6365725f 00000076                       _recv...

00145938 <unet_socket_ops>:
  145938:	00108e10 00108e8c 00108eb8 00108ef0     ................
  145948:	00108f20 00108f58 00108f94 00109044      ...X.......D...
  145958:	001090d8 00109120 00109168 00109198     .... ...h.......
  145968:	001091d0 001048d4 00000000              .....H......

00145974 <unet_netdb_ops>:
  145974:	00109278 001093b8 001093e8 00109428     x...........(...

00145984 <unet_inet_family>:
  145984:	00000002 00000002 00145938 00145974     ........8Y..tY..
  145994:	6474656e 00007665                       netdev..

0014599c <__FUNCTION__.7159>:
  14599c:	5f6c6173 74656e75 74656e5f 5f766564     sal_unet_netdev_
  1459ac:	5f746573 695f6670 006f666e 20766564     set_pf_info.dev 
  1459bc:	52203d21 554e5f54 00004c4c 2d766564     != RT_NULL..dev-
  1459cc:	7261703e 2e746e65 65707974 203d3d20     >parent.type == 
  1459dc:	4f5f5452 63656a62 6c435f74 5f737361     RT_Object_Class_
  1459ec:	69766544 00006563 69206f54 6974696e     Device..To initi
  1459fc:	7a696c61 65642065 65636976 2073253a     alize device:%s 
  145a0c:	6c696166 202e6465 20656854 6f727265     failed. The erro
  145a1c:	6f632072 69206564 6c252073 00000a64     r code is %ld...

00145a2c <__FUNCTION__.6035>:
  145a2c:	68746575 7665645f 5f656369 65726e75     ueth_device_unre
  145a3c:	74736967 00007265                       gister..

00145a44 <__FUNCTION__.6044>:
  145a44:	68746575 7665645f 5f656369 74696e69     ueth_device_init
  145a54:	00000000                                ....

00145a58 <__FUNCTION__.6049>:
  145a58:	68746575 7665645f 5f656369 736f6c63     ueth_device_clos
  145a68:	00000065                                e...

00145a6c <__FUNCTION__.6055>:
  145a6c:	68746575 7665645f 5f656369 746e6f63     ueth_device_cont
  145a7c:	006c6f72 6474656e 00007665 656d616e     rol.netdev..name
  145a8c:	00000000 31335b1b 2f455b6d 6474656e     .....[31m[E/netd
  145a9c:	205d7665 00000000 20656854 7774656e     ev] ....The netw
  145aac:	206b726f 65746e69 63616672 65642065     ork interface de
  145abc:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  145acc:	74726f70 206f7420 20746573 74617473     port to set stat
  145adc:	002e7375 6d305b1b 0000000a 20656854     us...[0m....The 
  145aec:	7774656e 206b726f 65746e69 63616672     network interfac
  145afc:	65642065 65636976 29732528 746f6e20     e device(%s) not
  145b0c:	70757320 74726f70 206f7420 20746573      support to set 
  145b1c:	50434844 61747320 2e737574 00000000     DHCP status.....
  145b2c:	615f7069 00726464 20656854 7774656e     ip_addr.The netw
  145b3c:	206b726f 65746e69 63616672 65642065     ork interface de
  145b4c:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  145b5c:	74726f70 206f7420 20746573 61205049     port to set IP a
  145b6c:	65726464 002e7373 20656854 7774656e     ddress..The netw
  145b7c:	206b726f 65746e69 63616672 65642065     ork interface de
  145b8c:	65636976 29732528 43484420 61632050     vice(%s) DHCP ca
  145b9c:	69626170 7974696c 20736920 62616e65     pability is enab
  145bac:	202c656c 20746f6e 70707573 2074726f     le, not support 
  145bbc:	20746573 61205049 65726464 002e7373     set IP address..
  145bcc:	6d74656e 006b7361 20656854 7774656e     netmask.The netw
  145bdc:	206b726f 65746e69 63616672 65642065     ork interface de
  145bec:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  145bfc:	74726f70 206f7420 20746573 6d74656e     port to set netm
  145c0c:	206b7361 72646461 2e737365 00000000     ask address.....
  145c1c:	20656854 7774656e 206b726f 65746e69     The network inte
  145c2c:	63616672 65642065 65636976 29732528     rface device(%s)
  145c3c:	43484420 61632050 69626170 7974696c      DHCP capability
  145c4c:	20736920 62616e65 202c656c 20746f6e      is enable, not 
  145c5c:	70707573 2074726f 20746573 6d74656e     support set netm
  145c6c:	206b7361 72646461 2e737365 00000000     ask address.....
  145c7c:	00007767 20656854 7774656e 206b726f     gw..The network 
  145c8c:	65746e69 63616672 65642065 65636976     interface device
  145c9c:	29732528 746f6e20 70757320 74726f70     (%s) not support
  145cac:	206f7420 20746573 65746167 20796177      to set gateway 
  145cbc:	72646461 2e737365 00000000 20656854     address.....The 
  145ccc:	7774656e 206b726f 65746e69 63616672     network interfac
  145cdc:	65642065 65636976 29732528 43484420     e device(%s) DHC
  145cec:	61632050 69626170 7974696c 20736920     P capability is 
  145cfc:	62616e65 202c656c 20746f6e 70707573     enable, not supp
  145d0c:	2074726f 20746573 65746167 20796177     ort set gateway 
  145d1c:	72646461 2e737365 00000000 5f736e64     address.....dns_
  145d2c:	76726573 00007265 20656854 626d756e     server..The numb
  145d3c:	6f207265 4e442066 65732053 72657672     er of DNS server
  145d4c:	64252873 65732029 78652074 64656563     s(%d) set exceed
  145d5c:	68742073 616d2065 756d6978 756e206d     s the maximum nu
  145d6c:	7265626d 29642528 0000002e 20656854     mber(%d)....The 
  145d7c:	7774656e 206b726f 65746e69 63616672     network interfac
  145d8c:	65642065 65636976 29732528 746f6e20     e device(%s) not
  145d9c:	70757320 74726f70 206f7420 20746573      support to set 
  145dac:	20534e44 76726573 61207265 65726464     DNS server addre
  145dbc:	002e7373 74617473 635f7375 626c6c61     ss..status_callb
  145dcc:	006b6361 72646461 6c61635f 6361626c     ack.addr_callbac
  145ddc:	0000006b                                k...

00145de0 <__FUNCTION__.6920>:
  145de0:	6474656e 725f7665 73696765 00726574     netdev_register.

00145df0 <__FUNCTION__.6929>:
  145df0:	6474656e 755f7665 6765726e 65747369     netdev_unregiste
  145e00:	00000072                                r...

00145e04 <__FUNCTION__.6975>:
  145e04:	6474656e 665f7665 6c696d61 65675f79     netdev_family_ge
  145e14:	00000074                                t...

00145e18 <__FUNCTION__.6982>:
  145e18:	6474656e 735f7665 755f7465 00000070     netdev_set_up...

00145e28 <__FUNCTION__.6986>:
  145e28:	6474656e 735f7665 645f7465 006e776f     netdev_set_down.

00145e38 <__FUNCTION__.6991>:
  145e38:	6474656e 645f7665 5f706368 62616e65     netdev_dhcp_enab
  145e48:	0064656c                                led.

00145e4c <__FUNCTION__.6996>:
  145e4c:	6474656e 735f7665 695f7465 64646170     netdev_set_ipadd
  145e5c:	00000072                                r...

00145e60 <__FUNCTION__.7001>:
  145e60:	6474656e 735f7665 6e5f7465 616d7465     netdev_set_netma
  145e70:	00006b73                                sk..

00145e74 <__FUNCTION__.7006>:
  145e74:	6474656e 735f7665 675f7465 00000077     netdev_set_gw...

00145e84 <__FUNCTION__.7012>:
  145e84:	6474656e 735f7665 645f7465 735f736e     netdev_set_dns_s
  145e94:	65767265 00000072                       erver...

00145e9c <__FUNCTION__.7017>:
  145e9c:	6474656e 735f7665 735f7465 75746174     netdev_set_statu
  145eac:	61635f73 61626c6c 00006b63              s_callback..

00145eb8 <__FUNCTION__.7022>:
  145eb8:	6474656e 735f7665 615f7465 5f726464     netdev_set_addr_
  145ec8:	6c6c6163 6b636162 00000000              callback....

00145ed4 <__FUNCTION__.7027>:
  145ed4:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145ee4:	7465735f 6170695f 00726464              _set_ipaddr.

00145ef0 <__FUNCTION__.7032>:
  145ef0:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145f00:	7465735f 74656e5f 6b73616d 00000000     _set_netmask....

00145f10 <__FUNCTION__.7037>:
  145f10:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145f20:	7465735f 0077675f                       _set_gw.

00145f28 <__FUNCTION__.7044>:
  145f28:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145f38:	7465735f 736e645f 7265735f 00726576     _set_dns_server.
  145f48:	00000030                                0...

00145f4c <__FUNCTION__.5841>:
  145f4c:	6474656e 695f7665 64613470 615f7264     netdev_ip4addr_a
  145f5c:	006e6f74 31335b1b 2f455b6d 2e6c6173     ton..[31m[E/sal.
  145f6c:	5d746b73 00000020 6d206f4e 726f6d65     skt] ...No memor
  145f7c:	6f662079 6f732072 74656b63 62617420     y for socket tab
  145f8c:	0a2e656c 00000000 6d305b1b 0000000a     le.......[0m....
  145f9c:	5f6c6173 6b636f6c 00000000 32335b1b     sal_lock.....[32
  145fac:	2f495b6d 2e6c6173 5d746b73 00000020     m[I/sal.skt] ...
  145fbc:	6b636f53 41207465 72747362 69746361     Socket Abstracti
  145fcc:	4c206e6f 72657961 696e6920 6c616974     on Layer initial
  145fdc:	20657a69 63637573 2e737365 00000000     ize success.....
  145fec:	6b6e696c 2d74722e 65726874 6f2e6461     link.rt-thread.o
  145ffc:	00006772 20706553 32203420 00323230     rg..Sep  4 2022.
  14600c:	00007325 006e614a 00626546 0072614d     %s..Jan.Feb.Mar.
  14601c:	00727041 0079614d 006e754a 006c754a     Apr.May.Jun.Jul.
  14602c:	00677541 00706553 0074634f 00766f4e     Aug.Sep.Oct.Nov.
  14603c:	00636544 3e2d7473 6b636f73 5b737465     Dec.st->sockets[
  14604c:	6b636f73 2d5d7465 67616d3e 3d206369     socket]->magic =
  14605c:	4153203d 4f535f4c 54454b43 47414d5f     = SAL_SOCKET_MAG
  14606c:	00004349 00000030 20746f6e 646e6966     IC..0...not find
  14607c:	74656e20 6b726f77 746e6920 61667265      network interfa
  14608c:	64206563 63697665 79622065 6f727020     ce device by pro
  14609c:	6f636f74 6166206c 796c696d 29642528     tocol family(%d)
  1460ac:	0000002e 6b636f73 203d2120 4e5f5452     ....sock != RT_N
  1460bc:	004c4c55 2077654e 6b636f73 72207465     ULL.New socket r
  1460cc:	73696765 65726574 61662064 64656c69     egistered failed
  1460dc:	6572202c 6e727574 72726520 2520726f     , return error %
  1460ec:	00002e64 656d616e 00000000 204c4153     d...name....SAL 
  1460fc:	6b636f73 70207465 6f746f72 206c6f63     socket protocol 
  14610c:	696d6166 6920796c 7475706e 69616620     family input fai
  14611c:	2c64656c 74657220 206e7275 6f727265     led, return erro
  14612c:	64252072 0000002e                       r %d....

00146134 <__FUNCTION__.6969>:
  146134:	5f6c6173 5f746567 6b636f73 00007465     sal_get_socket..

00146144 <__FUNCTION__.6974>:
  146144:	5f6c6173 6b636f6c 00000000              sal_lock....

00146150 <__FUNCTION__.7032>:
  146150:	6b636f73 645f7465 74656c65 00000065     socket_delete...

00146160 <__FUNCTION__.7057>:
  146160:	5f6c6173 646e6962 00000000 6c207325     sal_bind....%s l
  146170:	20656e69 73206425 74646e65 7265206f     ine %d sendto er
  146180:	0a726f72 00000000                       ror.....

00146188 <__func__.6506>:
  146188:	74656e75 6e65735f 006f7464 20736664     unet_sendto.dfs 
  146198:	65726c61 20796461 74696e69 00000a2e     already init....
  1461a8:	6f6c7366 00006b63 6f6c6466 00006b63     fslock..fdlock..
  1461b8:	00000030 20534644 6e206466 69207765     0...DFS fd new i
  1461c8:	61662073 64656c69 6f432021 20646c75     s failed! Could 
  1461d8:	20746f6e 6e756f66 6e612064 706d6520     not found an emp
  1461e8:	66207974 6e652064 2e797274 00000000     ty fd entry.....
  1461f8:	20746466 4e203d21 004c4c55 735f6466     fdt != NULL.fd_s
  146208:	2d746f6c 67616d3e 3d206369 4644203d     lot->magic == DF
  146218:	44465f53 47414d5f 00004349              S_FD_MAGIC..

00146224 <__FUNCTION__.6409>:
  146224:	5f736664 6b636f6c 00000000              dfs_lock....

00146230 <__FUNCTION__.6417>:
  146230:	5f736664 6c5f6466 006b636f              dfs_fd_lock.

0014623c <__FUNCTION__.6470>:
  14623c:	5f746466 725f6466 61656c65 00006573     fdt_fd_release..
  14624c:	5f736664 0072676d                       dfs_mgr.

00146254 <_net_fops>:
  146254:	0010a3f0 0010a26c 0010a2e0 0010a368     ....l.......h...
  146264:	0010a448 7069776c 73797320 206d6574     H...lwip system 
  146274:	65726c61 20796461 74696e69 00000a2e     already init....
  146284:	656e6f64 00000000 6c696146 74206465     done....Failed t
  146294:	7263206f 65746165 6d657320 6f687061     o create semapho
  1462a4:	00006572 76726573 73656369 49776c2f     re..services/lwI
  1462b4:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1462c4:	2f637273 68637261 7379732f 6372615f     src/arch/sys_arc
  1462d4:	00632e68 69706374 6e695f70 5f747570     h.c.tcpip_input_
  1462e4:	656d6974 00000072 006d6573 64257325     timer...sem.%s%d
  1462f4:	00000000 0000756d 20746573 786f626d     ....mu..set mbox
  146304:	6f6c675f 006c6162 786f626d 00000000     _global.mbox....
  146314:	6d5f7472 65725f62 72207663 72757465     rt_mb_recv retur
  146324:	2064656e 68746977 72726520 0021726f     ned with error!.
  146334:	3d212074 5f545220 4c4c554e 00000000     t != RT_NULL....
  146344:	7373410a 69747265 203a6e6f 69206425     .Assertion: %d i
  146354:	7325206e 0000000a 00000030              n %s....0...

00146360 <__FUNCTION__.7499>:
  146360:	5f737973 65726874 6e5f6461 00007765     sys_thread_new..

00146370 <__FUNCTION__.7511>:
  146370:	5f737973 68637261 7373615f 00747265     sys_arch_assert.
  146380:	65657266 20676e69 6e6e6f63 74697720     freeing conn wit
  146390:	74756f68 65726620 676e6965 62637020     hout freeing pcb
  1463a0:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1463b0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1463c0:	2f637273 2f697061 5f697061 2e62696c     src/api/api_lib.
  1463d0:	00000063 6e6e6f63 73616820 206f6e20     c...conn has no 
  1463e0:	76636572 786f626d 00000000 6e6e6f63     recvmbox....conn
  1463f0:	63613e2d 74706563 786f626d 6f687320     ->acceptmbox sho
  146400:	6e646c75 65207427 74736978 00000000     uldn't exist....
  146410:	6e6e6f63 73616820 206f6e20 635f706f     conn has no op_c
  146420:	6c706d6f 64657465 00000000 6374656e     ompleted....netc
  146430:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  146440:	64696c61 6e6f6320 0000006e 6374656e     alid conn...netc
  146450:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  146460:	64696c61 64646120 00000072 6374656e     alid addr...netc
  146470:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  146480:	64696c61 726f7020 00000074 6374656e     alid port...netc
  146490:	5f6e6e6f 646e6962 6e69203a 696c6176     onn_bind: invali
  1464a0:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  1464b0:	6e6e6f63 3a746365 766e6920 64696c61     connect: invalid
  1464c0:	6e6f6320 0000006e 6374656e 5f6e6e6f      conn...netconn_
  1464d0:	63736964 656e6e6f 203a7463 61766e69     disconnect: inva
  1464e0:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  1464f0:	5f6e6e6f 7473696c 203a6e65 61766e69     onn_listen: inva
  146500:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  146510:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  146520:	2064696c 6e696f70 00726574 6374656e     lid pointer.netc
  146530:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  146540:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  146550:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  146560:	6f702064 65746e69 00000072 6374656e     d pointer...netc
  146570:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  146580:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  146590:	76636572 6e69203a 696c6176 65722064     recv: invalid re
  1465a0:	626d7663 0000786f 20667562 4e203d21     cvmbox..buf != N
  1465b0:	004c4c55 3d212070 4c554e20 0000004c     ULL.p != NULL...
  1465c0:	6374656e 5f6e6e6f 646e6573 6e69203a     netconn_send: in
  1465d0:	696c6176 6f632064 00006e6e 6374656e     valid conn..netc
  1465e0:	5f6e6e6f 74697277 69203a65 6c61766e     onn_write: inval
  1465f0:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  146600:	74697277 69203a65 6c61766e 63206469     write: invalid c
  146610:	2d6e6e6f 7079743e 00000065 6374656e     onn->type...netc
  146620:	5f6e6e6f 736f6c63 69203a65 6c61766e     onn_close: inval
  146630:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  146640:	6e696f6a 61656c5f 675f6576 70756f72     join_leave_group
  146650:	6e69203a 696c6176 6f632064 00006e6e     : invalid conn..
  146660:	6374656e 5f6e6e6f 68746567 6274736f     netconn_gethostb
  146670:	6d616e79 69203a65 6c61766e 6e206469     yname: invalid n
  146680:	00656d61 6374656e 5f6e6e6f 68746567     ame.netconn_geth
  146690:	6274736f 6d616e79 69203a65 6c61766e     ostbyname: inval
  1466a0:	61206469 00726464 76726573 73656369     id addr.services
  1466b0:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  1466c0:	2f322e30 2f637273 2f697061 5f697061     0.2/src/api/api_
  1466d0:	2e67736d 00000063 76636572 7064755f     msg.c...recv_udp
  1466e0:	73756d20 61682074 61206576 62637020      must have a pcb
  1466f0:	67726120 6e656d75 00000074 76636572      argument...recv
  146700:	7064755f 73756d20 61682074 61206576     _udp must have a
  146710:	7261206e 656d7567 0000746e 76636572     n argument..recv
  146720:	7064755f 6572203a 66207663 7720726f     _udp: recv for w
  146730:	676e6f72 62637020 00000021 76636572     rong pcb!...recv
  146740:	7063745f 73756d20 61682074 61206576     _tcp must have a
  146750:	62637020 67726120 6e656d75 00000074      pcb argument...
  146760:	76636572 7063745f 73756d20 61682074     recv_tcp must ha
  146770:	61206576 7261206e 656d7567 0000746e     ve an argument..
  146780:	76636572 7063745f 6572203a 66207663     recv_tcp: recv f
  146790:	7720726f 676e6f72 62637020 00000021     or wrong pcb!...
  1467a0:	6e6e6f63 203d2120 4c4c554e 00000000     conn != NULL....
  1467b0:	6e6e6f63 75633e2d 6e657272 736d5f74     conn->current_ms
  1467c0:	3d212067 4c554e20 0000004c 76616e69     g != NULL...inav
  1467d0:	2064696c 635f706f 6c706d6f 64657465     lid op_completed
  1467e0:	6d65735f 00000000 6e6e6f63 75633e2d     _sem....conn->cu
  1467f0:	6e657272 736d5f74 3d3d2067 4c554e20     rrent_msg == NUL
  146800:	0000004c 5f626370 3a77656e 62637020     L...pcb_new: pcb
  146810:	726c6120 79646165 6c6c6120 7461636f      already allocat
  146820:	00006465 6374656e 5f6e6e6f 6f6c6c61     ed..netconn_allo
  146830:	75203a63 6665646e 64656e69 74656e20     c: undefined net
  146840:	6e6e6f63 7079745f 00000065 20424350     conn_type...PCB 
  146850:	7473756d 20656220 6c616564 61636f6c     must be dealloca
  146860:	20646574 7374756f 20656469 73696874     ted outside this
  146870:	6e756620 6f697463 0000006e 76636572      function...recv
  146880:	786f626d 73756d20 65622074 61656420     mbox must be dea
  146890:	636f6c6c 64657461 66656220 2065726f     llocated before 
  1468a0:	6c6c6163 20676e69 73696874 6e756620     calling this fun
  1468b0:	6f697463 0000006e 65636361 626d7470     ction...acceptmb
  1468c0:	6d20786f 20747375 64206562 6c6c6165     ox must be deall
  1468d0:	7461636f 62206465 726f6665 61632065     ocated before ca
  1468e0:	6e696c6c 68742067 66207369 74636e75     lling this funct
  1468f0:	006e6f69 61766e69 2064696c 6e6e6f63     ion.invalid conn
  146900:	00000000 73696874 20736920 20726f66     ....this is for 
  146910:	20706374 6374656e 736e6e6f 6c6e6f20     tcp netconns onl
  146920:	00000079 6e6e6f63 73756d20 65622074     y...conn must be
  146930:	206e6920 74617473 454e2065 4e4f4354      in state NETCON
  146940:	4c435f4e 0045534f 20626370 65726c61     N_CLOSE.pcb alre
  146950:	20796461 736f6c63 00006465 736f6c43     ady closed..Clos
  146960:	20676e69 696c2061 6e657473 62637020     ing a listen pcb
  146970:	79616d20 746f6e20 69616620 0000216c      may not fail!..
  146980:	20727265 45203d21 4f5f5252 0000004b     err != ERR_OK...
  146990:	6374656e 206e6e6f 74617473 72652065     netconn state er
  1469a0:	00726f72 636f6c62 676e696b 6e6f6320     ror.blocking con
  1469b0:	7463656e 206e6920 676f7270 73736572     nect in progress
  1469c0:	00000000 65726c61 20796461 74697277     ....already writ
  1469d0:	20676e69 6320726f 69736f6c 0000676e     ing or closing..
  1469e0:	74617473 00002165 6e6e6f63 74733e2d     state!..conn->st
  1469f0:	20657461 4e203d3d 4f435445 435f4e4e     ate == NETCONN_C
  146a00:	454e4e4f 00005443 6e6f6328 633e2d6e     ONNECT..(conn->c
  146a10:	65727275 6d5f746e 21206773 554e203d     urrent_msg != NU
  146a20:	20294c4c 63207c7c 2d6e6e6f 5f6e693e     LL) || conn->in_
  146a30:	5f6e6f6e 636f6c62 676e696b 6e6f635f     non_blocking_con
  146a40:	7463656e 00000000 636f6c62 676e696b     nect....blocking
  146a50:	6e6f6320 7463656e 61747320 65206574      connect state e
  146a60:	726f7272 00000000 61766e49 2064696c     rror....Invalid 
  146a70:	6374656e 206e6e6f 65707974 00000000     netconn type....
  146a80:	6e6e6f63 74733e2d 20657461 4e203d3d     conn->state == N
  146a90:	4f435445 575f4e4e 45544952 00000000     ETCONN_WRITE....
  146aa0:	6e6e6f63 63703e2d 63742e62 3d212070     conn->pcb.tcp !=
  146ab0:	4c554e20 0000004c 6e6e6f63 72773e2d      NULL...conn->wr
  146ac0:	5f657469 7366666f 3c207465 6e6f6320     ite_offset < con
  146ad0:	633e2d6e 65727275 6d5f746e 3e2d6773     n->current_msg->
  146ae0:	2e67736d 656c2e77 0000006e 7069776c     msg.w.len...lwip
  146af0:	74656e5f 6e6e6f63 5f6f645f 74697277     _netconn_do_writ
  146b00:	726f6d65 69203a65 6c61766e 6c206469     emore: invalid l
  146b10:	74676e65 00002168 2d67736d 67736d3e     ength!..msg->msg
  146b20:	6c2e772e 21206e65 0030203d 61766e69     .w.len != 0.inva
  146b30:	2064696c 6374656e 5f6e6e6f 65707974     lid netconn_type
  146b40:	00000000                                ....

00146b44 <err_to_errno_table>:
  146b44:	00000000 0000000c 00000069 0000000b     ........i.......
  146b54:	00000071 00000073 00000016 0000000b     q...s...........
  146b64:	00000062 00000072 0000006a 0000006b     b...r...j...k...
  146b74:	ffffffff 00000067 00000068 0000006b     ....g...h...k...
  146b84:	00000005 76726573 73656369 49776c2f     ....services/lwI
  146b94:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146ba4:	2f637273 2f697061 6274656e 632e6675     src/api/netbuf.c
  146bb4:	00000000 6274656e 615f6675 636f6c6c     ....netbuf_alloc
  146bc4:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  146bd4:	63656863 6874206b 66207461 74737269     check that first
  146be4:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  146bf4:	00657a69 6274656e 665f6675 3a656572     ize.netbuf_free:
  146c04:	766e6920 64696c61 66756220 00000000      invalid buf....
  146c14:	6274656e 725f6675 203a6665 61766e69     netbuf_ref: inva
  146c24:	2064696c 00667562 6274656e 635f6675     lid buf.netbuf_c
  146c34:	6e696168 6e69203a 696c6176 65682064     hain: invalid he
  146c44:	00006461 6274656e 635f6675 6e696168     ad..netbuf_chain
  146c54:	6e69203a 696c6176 61742064 00006c69     : invalid tail..
  146c64:	6274656e 645f6675 3a617461 766e6920     netbuf_data: inv
  146c74:	64696c61 66756220 00000000 6274656e     alid buf....netb
  146c84:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  146c94:	74616420 72747061 00000000 6274656e      dataptr....netb
  146ca4:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  146cb4:	6e656c20 00000000 6274656e 6e5f6675      len....netbuf_n
  146cc4:	3a747865 766e6920 64696c61 66756220     ext: invalid buf
  146cd4:	00000000 6274656e 665f6675 74737269     ....netbuf_first
  146ce4:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  146cf4:	656d616e 206e656c 74207369 6c206f6f     namelen is too l
  146d04:	00676e6f 76726573 73656369 49776c2f     ong.services/lwI
  146d14:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146d24:	2f637273 2f697061 6474656e 00632e62     src/api/netdb.c.
  146d34:	61746f74 69735f6c 3c20657a 454e203d     total_size <= NE
  146d44:	5f424454 4d454c45 5a49535f 70203a45     TDB_ELEM_SIZE: p
  146d54:	7361656c 65722065 74726f70 69687420     lease report thi
  146d64:	00002173 6377656e 206e6e6f 4e203d21     s!..newconn != N
  146d74:	004c4c55 76726573 73656369 49776c2f     ULL.services/lwI
  146d84:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146d94:	2f637273 2f697061 6b636f73 2e737465     src/api/sockets.
  146da4:	00000063 61766e69 2064696c 6b636f73     c...invalid sock
  146db4:	69207465 7865646e 00000000 72646461     et index....addr
  146dc4:	6c617620 62206469 61207475 6c726464      valid but addrl
  146dd4:	4e206e65 004c4c55 7069776c 6e69625f     en NULL.lwip_bin
  146de4:	69203a64 6c61766e 61206469 65726464     d: invalid addre
  146df4:	00007373 6b636f73 616c3e2d 61647473     ss..sock->lastda
  146e04:	3d206174 554e203d 00004c4c 7069776c     ta == NULL..lwip
  146e14:	6e6f635f 7463656e 6e69203a 696c6176     _connect: invali
  146e24:	64612064 73657264 00000073 20667562     d address...buf 
  146e34:	4e203d21 004c4c55 61766e69 2064696c     != NULL.invalid 
  146e44:	79706f63 2c6e656c 6e656c20 756f7720     copylen, len wou
  146e54:	7520646c 7265646e 776f6c66 00000000     ld underflow....
  146e64:	7069776c 6e65735f 67736d64 6e69203a     lwip_sendmsg: in
  146e74:	696c6176 736d2064 72646867 00000000     valid msghdr....
  146e84:	7069776c 6e65735f 67736d64 6e69203a     lwip_sendmsg: in
  146e94:	696c6176 736d2064 72646867 766f6920     valid msghdr iov
  146ea4:	00000000 7069776c 6e65735f 67736d64     ....lwip_sendmsg
  146eb4:	6e69203a 696c6176 736d2064 72646867     : invalid msghdr
  146ec4:	6d616e20 00000065 5f766f69 206e656c      name...iov_len 
  146ed4:	3175203c 00745f36 7069776c 6e65735f     < u16_t.lwip_sen
  146ee4:	3a6f7464 7a697320 756d2065 66207473     dto: size must f
  146ef4:	69207469 3175206e 00745f36 7069776c     it in u16_t.lwip
  146f04:	6e65735f 3a6f7464 766e6920 64696c61     _sendto: invalid
  146f14:	64646120 73736572 00000000 6165726e      address....nrea
  146f24:	3e207964 0030203d 6b636f73 65733e2d     dy >= 0.sock->se
  146f34:	7463656c 6961775f 676e6974 30203e20     lect_waiting > 0
  146f44:	00000000 656c6573 635f7463 72702e62     ....select_cb.pr
  146f54:	3d207665 554e203d 00004c4c 656c6573     ev == NULL..sele
  146f64:	635f7463 72702e62 21207665 554e203d     ct_cb.prev != NU
  146f74:	00004c4c 6e6b6e75 206e776f 6e657665     LL..unknown even
  146f84:	00000074 69706374 68745f70 64616572     t...tcpip_thread
  146f94:	6e69203a 696c6176 656d2064 67617373     : invalid messag
  146fa4:	00000065 76726573 73656369 49776c2f     e...services/lwI
  146fb4:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146fc4:	2f637273 2f697061 69706374 00632e70     src/api/tcpip.c.
  146fd4:	61766e49 2064696c 786f626d 00000000     Invalid mbox....
  146fe4:	6c696166 74206465 7263206f 65746165     failed to create
  146ff4:	70637420 745f7069 61657268 626d2064      tcpip_thread mb
  147004:	0000786f 6c696166 74206465 7263206f     ox..failed to cr
  147014:	65746165 636f6c20 63745f6b 5f706970     eate lock_tcpip_
  147024:	65726f63 00000000 69706374 00000070     core....tcpip...
  147034:	7778797a 73747576 6f707172 6b6c6d6e     zyxwvutsrqponmlk
  147044:	6768696a 63646566 38396162 34353637     jihgfedcba987654
  147054:	30313233 34333231 38373635 63626139     3210123456789abc
  147064:	67666564 6b6a6968 6f6e6d6c 73727170     defghijklmnopqrs
  147074:	77767574 007a7978                       tuvwxyz.

0014707c <dns_mquery_v4group>:
  14707c:	fb0000e0 20736e64 76726573 6f207265     ....dns server o
  14708c:	6f207475 72612066 00796172 76726573     ut of array.serv
  14709c:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  1470ac:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  1470bc:	736e642f 0000632e 61727261 6e692079     /dns.c..array in
  1470cc:	20786564 2074756f 6220666f 646e756f     dex out of bound
  1470dc:	00000073 6e6b6e75 206e776f 5f736e64     s...unknown dns_
  1470ec:	6c626174 6e652065 20797274 74617473     table entry stat
  1470fc:	00003a65 656c6564 6d206574 00000065     e:..delete me...
  14710c:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  14711c:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  14712c:	65726f63 656e692f 68635f74 6d75736b     core/inet_chksum
  14713c:	0000632e 5f574152 00424350              .c..RAW_PCB.

00147148 <memp_RAW_PCB>:
  147148:	00147140 0014e0d0 0004001c 0016dd98     @q..............
  147158:	0014e0e0 5f504455 00424350              ....UDP_PCB.

00147164 <memp_UDP_PCB>:
  147164:	0014715c 0014e0e4 00080028 0056d9f0     \q......(.....V.
  147174:	0014e0f4 5f504354 00424350              ....TCP_PCB.

00147180 <memp_TCP_PCB>:
  147180:	00147178 0014e0f8 000800a4 0056e1dc     xq............V.
  147190:	0014e108 5f504354 5f424350 5453494c     ....TCP_PCB_LIST
  1471a0:	00004e45                                EN..

001471a4 <memp_TCP_PCB_LISTEN>:
  1471a4:	00147194 0014e10c 00080020 0056d490     .q...... .....V.
  1471b4:	0014e11c 5f504354 00474553              ....TCP_SEG.

001471c0 <memp_TCP_SEG>:
  1471c0:	001471b8 0014e120 ffff0010 0016debc     .q.. ...........
  1471d0:	0014e130 53414552 54414453 00000041     0...REASSDATA...

001471e0 <memp_REASSDATA>:
  1471e0:	001471d4 0014e134 000a0020 0056d6f4     .q..4... .....V.
  1471f0:	0014e144 47415246 5542505f 00000046     D...FRAG_PBUF...

00147200 <memp_FRAG_PBUF>:
  147200:	001471f4 0014e148 000f0018 00547088     .q..H........pT.
  147210:	0014e158 4254454e 00004655              X...NETBUF..

0014721c <memp_NETBUF>:
  14721c:	00147214 0014e15c 04000010 0014f774     .r..\.......t...
  14722c:	0014e16c 4354454e 004e4e4f              l...NETCONN.

00147238 <memp_NETCONN>:
  147238:	00147230 0014e170 00080040 0056dc94     0r..p...@.....V.
  147248:	0014e180 49504354 534d5f50 50415f47     ....TCPIP_MSG_AP
  147258:	00000049                                I...

0014725c <memp_TCPIP_MSG_API>:
  14725c:	0014724c 0014e184 04000010 00547488     Lr...........tT.
  14726c:	0014e194 49504354 534d5f50 4e495f47     ....TCPIP_MSG_IN
  14727c:	00544b50                                PKT.

00147280 <memp_TCPIP_MSG_INPKT>:
  147280:	00147270 0014e198 04000010 0015e778     pr..........x...
  147290:	0014e1a8 5f505241 55455551 00000045     ....ARP_QUEUE...

001472a0 <memp_ARP_QUEUE>:
  1472a0:	00147294 0014e1ac 001e0008 0016d77c     .r..........|...
  1472b0:	0014e1bc 504d4749 4f52475f 00005055     ....IGMP_GROUP..

001472c0 <memp_IGMP_GROUP>:
  1472c0:	001472b4 0014e1c0 00080010 0056dff8     .r............V.
  1472d0:	0014e1d0 5f535953 454d4954 0054554f     ....SYS_TIMEOUT.

001472e0 <memp_SYS_TIMEOUT>:
  1472e0:	001472d4 0014e1d4 00070010 0056e860     .r..........`.V.
  1472f0:	0014e1e4 4454454e 00000042              ....NETDB...

001472fc <memp_NETDB>:
  1472fc:	001472f4 0014e1e8 00010134 0014f610     .r......4.......
  14730c:	0014e1f8 46554250 4645525f 4d4f522f     ....PBUF_REF/ROM
  14731c:	00000000                                ....

00147320 <memp_PBUF>:
  147320:	00147310 0014e1fc 04000030 0055648c     .s......0....dU.
  147330:	0014e20c 46554250 4f4f505f 0000004c     ....PBUF_POOL...

00147340 <memp_PBUF_POOL>:
  147340:	00147334 0014e210 0040061c 0052de84     4s........@...R.
  147350:	0014e220                                 ...

00147354 <memp_pools>:
  147354:	00147148 00147164 00147180 001471a4     Hq..dq...q...q..
  147364:	001471c0 001471e0 00147200 0014721c     .q...q...r...r..
  147374:	00147238 0014725c 00147280 001472a0     8r..\r...r...r..
  147384:	001472c0 001472e0 001472fc 00147320     .r...r...r.. s..
  147394:	00147340 76726573 73656369 49776c2f     @s..services/lwI
  1473a4:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1473b4:	2f637273 65726f63 6d656d2f 00632e70     src/core/memp.c.
  1473c4:	65746564 64657463 6d656d20 766f2070     detected memp ov
  1473d4:	6c667265 6920776f 6f70206e 00206c6f     erflow in pool .
	...
  147444:	65746564 64657463 6d656d20 6e752070     detected memp un
  147454:	66726564 20776f6c 70206e69 206c6f6f     derflow in pool 
	...
  1474c4:	706d656d 6c616d5f 3a636f6c 6d656d20     memp_malloc: mem
  1474d4:	72702070 7265706f 6120796c 6e67696c     p properly align
  1474e4:	00006465 61766e69 2064696c 6c6f6f70     ed..invalid pool
  1474f4:	73656420 00000063 706d656d 6c616d5f      desc...memp_mal
  147504:	3a636f6c 70797420 203c2065 504d454d     loc: type < MEMP
  147514:	58414d5f 00000000 706d656d 6572665f     _MAX....memp_fre
  147524:	6d203a65 70206d65 65706f72 20796c72     e: mem properly 
  147534:	67696c61 0064656e 706d656d 6572665f     aligned.memp_fre
  147544:	74203a65 20657079 454d203c 4d5f504d     e: type < MEMP_M
  147554:	00005841 69206f4e 2074696e 636e7566     AX..No init func
  147564:	6e6f6974 76696720 00006e65 76726573     tion given..serv
  147574:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147584:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147594:	74656e2f 632e6669 00000000 66206669     /netif.c....if f
  1475a4:	74737269 203d2120 4c4c554e 616c202c     irst != NULL, la
  1475b4:	6d207473 20747375 6f736c61 20656220     st must also be 
  1475c4:	4e203d21 004c4c55 75676f62 62702073     != NULL.bogus pb
  1475d4:	203a6675 206e656c 74203d21 6c5f746f     uf: len != tot_l
  1475e4:	62206e65 6e207475 20747865 4e203d3d     en but next == N
  1475f4:	214c4c55 00000000 756f6873 6e20646c     ULL!....should n
  147604:	6220746f 756e2065 73206c6c 65636e69     ot be null since
  147614:	72696620 21207473 616c203d 00217473      first != last!.
  147624:	66756270 6c6c615f 203a636f 20646162     pbuf_alloc: bad 
  147634:	66756270 79616c20 00007265 76726573     pbuf layer..serv
  147644:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147654:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147664:	7562702f 00632e66 66756270 6c6c615f     /pbuf.c.pbuf_all
  147674:	203a636f 66756270 3e2d7020 6c796170     oc: pbuf p->payl
  147684:	2064616f 706f7270 796c7265 696c6120     oad properly ali
  147694:	64656e67 00000000 63656863 2d70206b     gned....check p-
  1476a4:	7961703e 64616f6c 70202b20 656c3e2d     >payload + p->le
  1476b4:	6f64206e 6e207365 6f20746f 66726576     n does not overf
  1476c4:	20776f6c 66756270 00000000 46554250     low pbuf....PBUF
  1476d4:	4f4f505f 55425f4c 5a495346 756d2045     _POOL_BUFSIZE mu
  1476e4:	62207473 69622065 72656767 61687420     st be bigger tha
  1476f4:	454d206e 4c415f4d 4d4e4749 00544e45     n MEM_ALIGNMENT.
  147704:	5f6d6572 206e656c 616d203c 31755f78     rem_len < max_u1
  147714:	00745f36 66756270 6c6c615f 203a636f     6_t.pbuf_alloc: 
  147724:	66756270 3e2d7120 6c796170 2064616f     pbuf q->payload 
  147734:	706f7270 796c7265 696c6120 64656e67     properly aligned
  147744:	00000000 66756270 6c6c615f 203a636f     ....pbuf_alloc: 
  147754:	66756270 61703e2d 616f6c79 72702064     pbuf->payload pr
  147764:	7265706f 6120796c 6e67696c 00006465     operly aligned..
  147774:	66756270 6c6c615f 203a636f 6f727265     pbuf_alloc: erro
  147784:	756f656e 79742073 00006570 66756270     neous type..pbuf
  147794:	6c6c615f 6465636f 7375635f 3a6d6f74     _alloced_custom:
  1477a4:	64616220 75627020 616c2066 00726579      bad pbuf layer.
  1477b4:	66756270 6165725f 636f6c6c 2070203a     pbuf_realloc: p 
  1477c4:	4e203d21 004c4c55 66756270 6165725f     != NULL.pbuf_rea
  1477d4:	636f6c6c 6173203a 7020656e 79743e2d     lloc: sane p->ty
  1477e4:	00006570 776f7267 6d203c20 755f7861     pe..grow < max_u
  1477f4:	745f3631 00000000 66756270 6165725f     16_t....pbuf_rea
  147804:	636f6c6c 2071203a 4e203d21 004c4c55     lloc: q != NULL.
  147814:	5f6d656d 6d697274 74657220 656e7275     mem_trim returne
  147824:	20712064 4e203d3d 004c4c55 3d212070     d q == NULL.p !=
  147834:	4c554e20 0000004c 72636e69 6e656d65      NULL...incremen
  147844:	616d5f74 74696e67 20656475 70203d3c     t_magnitude <= p
  147854:	656c3e2d 0000006e 20646162 66756270     ->len...bad pbuf
  147864:	70797420 00000065 66756270 6572665f      type...pbuf_fre
  147874:	73203a65 20656e61 65707974 00000000     e: sane type....
  147884:	66756270 6572665f 70203a65 65723e2d     pbuf_free: p->re
  147894:	203e2066 00000030 3e2d6370 74737563     f > 0...pc->cust
  1478a4:	665f6d6f 5f656572 636e7566 6e6f6974     om_free_function
  1478b4:	203d2120 4c4c554e 00000000 66756270      != NULL....pbuf
  1478c4:	66657220 65766f20 6f6c6672 00000077      ref overflow...
  1478d4:	21206828 554e203d 20294c4c 28202626     (h != NULL) && (
  1478e4:	3d212074 4c554e20 2820294c 676f7270     t != NULL) (prog
  1478f4:	6d6d6172 76207265 616c6f69 20736574     rammer violates 
  147904:	29495041 00000000 743e2d70 6c5f746f     API)....p->tot_l
  147914:	3d206e65 2d70203d 6e656c3e 666f2820     en == p->len (of
  147924:	73616c20 62702074 69206675 6863206e      last pbuf in ch
  147934:	296e6961 00000000 6e3e2d70 20747865     ain)....p->next 
  147944:	4e203d3d 004c4c55 743e2d70 6c5f746f     == NULL.p->tot_l
  147954:	3d206e65 2d70203d 6e656c3e 71202b20     en == p->len + q
  147964:	6f743e2d 656c5f74 0000006e 743e2d70     ->tot_len...p->t
  147974:	6c5f746f 3d206e65 2d70203d 6e656c3e     ot_len == p->len
  147984:	00000000 66756270 706f635f 74203a79     ....pbuf_copy: t
  147994:	65677261 6f6e2074 69622074 6e652067     arget not big en
  1479a4:	6867756f 206f7420 646c6f68 756f7320     ough to hold sou
  1479b4:	00656372 7366666f 745f7465 3d3c206f     rce.offset_to <=
  1479c4:	745f7020 6c3e2d6f 00006e65 7366666f      p_to->len..offs
  1479d4:	665f7465 206d6f72 70203d3c 6f72665f     et_from <= p_fro
  1479e4:	6c3e2d6d 00006e65 6f745f70 203d2120     m->len..p_to != 
  1479f4:	4c4c554e 00000000 66756270 706f635f     NULL....pbuf_cop
  147a04:	20292879 73656f64 746f6e20 6c6c6120     y() does not all
  147a14:	7020776f 656b6361 75712074 73657565     ow packet queues
  147a24:	00000021 66756270 706f635f 61705f79     !...pbuf_copy_pa
  147a34:	61697472 69203a6c 6c61766e 62206469     rtial: invalid b
  147a44:	00006675 66756270 706f635f 61705f79     uf..pbuf_copy_pa
  147a54:	61697472 69203a6c 6c61766e 64206469     rtial: invalid d
  147a64:	70617461 00007274 66756270 6b61745f     ataptr..pbuf_tak
  147a74:	69203a65 6c61766e 62206469 00006675     e: invalid buf..
  147a84:	66756270 6b61745f 69203a65 6c61766e     pbuf_take: inval
  147a94:	64206469 70617461 00007274 66756270     id dataptr..pbuf
  147aa4:	6b61745f 62203a65 6e206675 6c20746f     _take: buf not l
  147ab4:	65677261 6f6e6520 00686775 66756270     arge enough.pbuf
  147ac4:	6b61745f 69203a65 6c61766e 70206469     _take: invalid p
  147ad4:	00667562 20646964 20746f6e 79706f63     buf.did not copy
  147ae4:	6c6c6120 74616420 00000061 66756270      all data...pbuf
  147af4:	706f635f 61662079 64656c69 00000000     _copy failed....
  147b04:	20776172 20626370 76636572 6c616320     raw pcb recv cal
  147b14:	6361626c 6c61206b 65726574 62702064     lback altered pb
  147b24:	70206675 6f6c7961 70206461 746e696f     uf payload point
  147b34:	77207265 6f687469 65207475 6e697461     er without eatin
  147b44:	61702067 74656b63 00000000 76726573     g packet....serv
  147b54:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147b64:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147b74:	7761722f 0000632e 276e6143 65722074     /raw.c..Can't re
  147b84:	726f7473 65682065 72656461 20657720     store header we 
  147b94:	7473756a 6d657220 6465766f 00000021     just removed!...
  147ba4:	0a73250a 00000009 74696d78 6825203a     .%s.....xmit: %h
  147bb4:	00090a75 76636572 6825203a 00090a75     u...recv: %hu...
  147bc4:	203a7766 0a756825 00000009 706f7264     fw: %hu.....drop
  147bd4:	6825203a 00090a75 656b6863 203a7272     : %hu...chkerr: 
  147be4:	0a756825 00000009 656e656c 203a7272     %hu.....lenerr: 
  147bf4:	0a756825 00000009 656d656d 203a7272     %hu.....memerr: 
  147c04:	0a756825 00000009 72657472 25203a72     %hu.....rterr: %
  147c14:	090a7568 00000000 746f7270 3a727265     hu......proterr:
  147c24:	75682520 0000090a 6574706f 203a7272      %hu....opterr: 
  147c34:	0a756825 00000009 3a727265 75682520     %hu.....err: %hu
  147c44:	0000090a 68636163 74696865 6825203a     ....cachehit: %h
  147c54:	00000a75 765f7872 25203a31 090a7568     u...rx_v1: %hu..
  147c64:	00000000 675f7872 70756f72 6825203a     ....rx_group: %h
  147c74:	00090a75 675f7872 72656e65 203a6c61     u...rx_general: 
  147c84:	0a756825 00000009 725f7872 726f7065     %hu.....rx_repor
  147c94:	25203a74 090a7568 00000000 6a5f7874     t: %hu......tx_j
  147ca4:	3a6e696f 75682520 0000090a 6c5f7874     oin: %hu....tx_l
  147cb4:	65766165 6825203a 00090a75 725f7874     eave: %hu...tx_r
  147cc4:	726f7065 25203a74 000a7568 4d454d0a     eport: %hu...MEM
  147cd4:	0a732520 00000009 69617661 25203a6c      %s.....avail: %
  147ce4:	090a756c 00000000 64657375 6c25203a     lu......used: %l
  147cf4:	00090a75 3a78616d 756c2520 0000090a     u...max: %lu....
  147d04:	3a727265 756c2520 0000000a 5359530a     err: %lu.....SYS
  147d14:	0000090a 2e6d6573 64657375 2520203a     ....sem.used:  %
  147d24:	090a756c 00000000 2e6d6573 3a78616d     lu......sem.max:
  147d34:	25202020 090a756c 00000000 2e6d6573        %lu......sem.
  147d44:	3a727265 25202020 090a756c 00000000     err:   %lu......
  147d54:	6574756d 73752e78 203a6465 0a756c25     mutex.used: %lu.
  147d64:	00000009 6574756d 616d2e78 20203a78     ....mutex.max:  
  147d74:	0a756c25 00000009 6574756d 72652e78     %lu.....mutex.er
  147d84:	20203a72 0a756c25 00000009 786f626d     r:  %lu.....mbox
  147d94:	6573752e 20203a64 0a756c25 00000009     .used:  %lu.....
  147da4:	786f626d 78616d2e 2020203a 0a756c25     mbox.max:   %lu.
  147db4:	00000009 786f626d 7272652e 2020203a     ....mbox.err:   
  147dc4:	0a756c25 00000000 4b4e494c 00000000     %lu.....LINK....
  147dd4:	41485445 00005052 465f5049 00474152     ETHARP..IP_FRAG.
  147de4:	00005049 504d4749 00000000 504d4349     IP..IGMP....ICMP
  147df4:	00000000 00504455 00504354 50414548     ....UDP.TCP.HEAP
  147e04:	00000000 534f4c43 00004445 5453494c     ....CLOSED..LIST
  147e14:	00004e45 5f4e5953 544e4553 00000000     EN..SYN_SENT....
  147e24:	5f4e5953 44564352 00000000 41545345     SYN_RCVD....ESTA
  147e34:	53494c42 00444548 5f4e4946 54494157     BLISHED.FIN_WAIT
  147e44:	0000315f 5f4e4946 54494157 0000325f     _1..FIN_WAIT_2..
  147e54:	534f4c43 41575f45 00005449 534f4c43     CLOSE_WAIT..CLOS
  147e64:	00474e49 5453414c 4b43415f 00000000     ING.LAST_ACK....
  147e74:	454d4954 4941575f 00000054              TIME_WAIT...

00147e80 <tcp_state_str>:
  147e80:	00147e08 00147e10 00147e18 00147e24     .~...~...~..$~..
  147e90:	00147e30 00147e3c 00147e48 00147e54     0~..<~..H~..T~..
  147ea0:	00147e60 00147e68 00147e74              `~..h~..t~..

00147eac <tcp_backoff>:
  147eac:	04030201 07070605 07070707 00000007     ................

00147ebc <tcp_persist_backoff>:
  147ebc:	180c0603 00786030                       ....0`x.

00147ec4 <tcp_pcb_lists>:
  147ec4:	0056ec0c 0056ec10 0056ec04 0056ec14     ..V...V...V...V.
  147ed4:	20626370 4e203d21 004c4c55 76726573     pcb != NULL.serv
  147ee4:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147ef4:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147f04:	7063742f 0000632e 2d626370 6174733e     /tcp.c..pcb->sta
  147f14:	3d206574 494c203d 4e455453 00000000     te == LISTEN....
  147f24:	2d626370 616c663e 26207367 5f465420     pcb->flags & TF_
  147f34:	4c435852 4445534f 00000000 276e6f64     RXCLOSED....don'
  147f44:	61632074 74206c6c 615f7063 74726f62     t call tcp_abort
  147f54:	7063742f 6162615f 6e6f646e 726f6620     /tcp_abandon for
  147f64:	73696c20 2d6e6574 73626370 00000000      listen-pcbs....
  147f74:	5f706374 646e6962 6163203a 6e6f206e     tcp_bind: can on
  147f84:	6220796c 20646e69 73206e69 65746174     ly bind in state
  147f94:	4f4c4320 00444553 5f706374 7473696c      CLOSED.tcp_list
  147fa4:	203a6e65 20626370 65726c61 20796461     en: pcb already 
  147fb4:	6e6e6f63 65746365 00000064 5f77656e     connected...new_
  147fc4:	5f766372 5f6e6e61 20646e77 30203d3c     rcv_ann_wnd <= 0
  147fd4:	66666678 00000066 276e6f64 61632074     xffff...don't ca
  147fe4:	74206c6c 725f7063 65766365 6f662064     ll tcp_recved fo
  147ff4:	696c2072 6e657473 6263702d 00000073     r listen-pcbs...
  148004:	5f706374 76636572 203a6465 206e656c     tcp_recved: len 
  148014:	70617277 20646570 5f766372 0a646e77     wrapped rcv_wnd.
  148024:	00000000 5f706374 6e6e6f63 3a746365     ....tcp_connect:
  148034:	6e616320 6c6e6f20 6f632079 63656e6e      can only connec
  148044:	72662074 73206d6f 65746174 4f4c4320     t from state CLO
  148054:	00444553 5f706374 776f6c73 3a726d74     SED.tcp_slowtmr:
  148064:	74636120 20657669 2d626370 6174733e      active pcb->sta
  148074:	21206574 4c43203d 4445534f 0000000a     te != CLOSED....
  148084:	5f706374 776f6c73 3a726d74 74636120     tcp_slowtmr: act
  148094:	20657669 2d626370 6174733e 21206574     ive pcb->state !
  1480a4:	494c203d 4e455453 0000000a 5f706374     = LISTEN....tcp_
  1480b4:	776f6c73 3a726d74 74636120 20657669     slowtmr: active 
  1480c4:	2d626370 6174733e 21206574 4954203d     pcb->state != TI
  1480d4:	572d454d 0a544941 00000000 5f706374     ME-WAIT.....tcp_
  1480e4:	776f6c73 3a726d74 64696d20 20656c64     slowtmr: middle 
  1480f4:	20706374 74203d21 615f7063 76697463     tcp != tcp_activ
  148104:	63705f65 00007362 5f706374 776f6c73     e_pcbs..tcp_slow
  148114:	3a726d74 72696620 70207473 3d206263     tmr: first pcb =
  148124:	6374203d 63615f70 65766974 6263705f     = tcp_active_pcb
  148134:	00000073 5f706374 776f6c73 3a726d74     s...tcp_slowtmr:
  148144:	4d495420 41572d45 70205449 3e2d6263      TIME-WAIT pcb->
  148154:	74617473 3d3d2065 4d495420 41572d45     state == TIME-WA
  148164:	00005449 5f706374 776f6c73 3a726d74     IT..tcp_slowtmr:
  148174:	64696d20 20656c64 20706374 74203d21      middle tcp != t
  148184:	745f7063 63705f77 00007362 5f706374     cp_tw_pcbs..tcp_
  148194:	776f6c73 3a726d74 72696620 70207473     slowtmr: first p
  1481a4:	3d206263 6374203d 77745f70 6263705f     cb == tcp_tw_pcb
  1481b4:	00000073 61766e69 2064696c 74617473     s...invalid stat
  1481c4:	00000065 61766e69 2064696c 6b636f73     e...invalid sock
  1481d4:	73207465 65746174 726f6620 63657220     et state for rec
  1481e4:	61632076 61626c6c 00006b63 61766e69     v callback..inva
  1481f4:	2064696c 6b636f73 73207465 65746174     lid socket state
  148204:	726f6620 6e657320 61632074 61626c6c      for sent callba
  148214:	00006b63 61766e69 2064696c 6b636f73     ck..invalid sock
  148224:	73207465 65746174 726f6620 72726520     et state for err
  148234:	6c616320 6361626c 0000006b 61766e69      callback...inva
  148244:	2064696c 6b636f73 73207465 65746174     lid socket state
  148254:	726f6620 6c6f7020 0000006c 65736e75      for poll...unse
  148264:	7320746e 656d6765 2073746e 6b61656c     nt segments leak
  148274:	00676e69 63616e75 2064656b 6d676573     ing.unacked segm
  148284:	73746e65 61656c20 676e696b 00000000     ents leaking....
  148294:	65736f6f 65732071 6e656d67 6c207374     ooseq segments l
  1482a4:	696b6165 0000676e 6e3e2d70 20747865     eaking..p->next 
  1482b4:	4e203d21 004c4c55 76726573 73656369     != NULL.services
  1482c4:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  1482d4:	2f322e30 2f637273 65726f63 7063742f     0.2/src/core/tcp
  1482e4:	2e6e695f 00000063 6c3e2d70 3d206e65     _in.c...p->len =
  1482f4:	0030203d 743e2d70 6c5f746f 3d206e65     = 0.p->tot_len =
  148304:	2d70203d 78656e3e 743e2d74 6c5f746f     = p->next->tot_l
  148314:	00006e65 5f706374 75706e69 61203a74     en..tcp_input: a
  148324:	76697463 63702065 733e2d62 65746174     ctive pcb->state
  148334:	203d2120 534f4c43 00004445 5f706374      != CLOSED..tcp_
  148344:	75706e69 61203a74 76697463 63702065     input: active pc
  148354:	733e2d62 65746174 203d2120 454d4954     b->state != TIME
  148364:	4941572d 00000054 5f706374 75706e69     -WAIT...tcp_inpu
  148374:	61203a74 76697463 63702065 733e2d62     t: active pcb->s
  148384:	65746174 203d2120 5453494c 00004e45     tate != LISTEN..
  148394:	5f706374 75706e69 70203a74 3e2d6263     tcp_input: pcb->
  1483a4:	7478656e 203d2120 20626370 66656228     next != pcb (bef
  1483b4:	2065726f 68636163 00002965 5f706374     ore cache)..tcp_
  1483c4:	75706e69 70203a74 3e2d6263 7478656e     input: pcb->next
  1483d4:	203d2120 20626370 74666128 63207265      != pcb (after c
  1483e4:	65686361 00000029 5f706374 75706e69     ache)...tcp_inpu
  1483f4:	54203a74 2d454d49 54494157 62637020     t: TIME-WAIT pcb
  148404:	74733e2d 20657461 54203d3d 2d454d49     ->state == TIME-
  148414:	54494157 00000000 2d626370 6665723e     WAIT....pcb->ref
  148424:	64657375 7461645f 3d3d2061 4c554e20     used_data == NUL
  148434:	0000004c 5f706374 75706e69 70203a74     L...tcp_input: p
  148444:	3e2d6263 74617473 3d212065 4f4c4320     cb->state != CLO
  148454:	00444553 2d626370 646e733e 6575715f     SED.pcb->snd_que
  148464:	656c6575 203e206e 00000030 73206f6e     uelen > 0...no s
  148474:	656d6765 7420746e 7266206f 00006565     egment to free..
  148484:	2d626370 73696c3e 656e6574 613e2d72     pcb->listener->a
  148494:	70656363 3d212074 4c554e20 0000004c     ccept != NULL...
  1484a4:	5f706374 65636572 3a657669 6f727720     tcp_receive: wro
  1484b4:	7320676e 65746174 00000000 2d626370     ng state....pcb-
  1484c4:	646e733e 6575715f 656c6575 3d3e206e     >snd_queuelen >=
  1484d4:	75627020 6c635f66 6e286e65 2d747865      pbuf_clen(next-
  1484e4:	0029703e 5f706374 65636572 3a657669     >p).tcp_receive:
  1484f4:	6c617620 71206469 65756575 6e656c20      valid queue len
  148504:	00687467 65736e69 20702e67 4e203d21     gth.inseg.p != N
  148514:	004c4c55 61736e69 6f20656e 65736666     ULL.insane offse
  148524:	00002174 66756270 6f6f7420 6f687320     t!..pbuf too sho
  148534:	00217472 66756270 6165685f 20726564     rt!.pbuf_header 
  148544:	6c696166 00006465 5f706374 65636572     failed..tcp_rece
  148554:	3a657669 67657320 746e656d 746f6e20     ive: segment not
  148564:	69727420 64656d6d 726f6320 74636572      trimmed correct
  148574:	7420796c 6372206f 6e775f76 00000a64     ly to rcv_wnd...
  148584:	5f706374 65636572 3a657669 67657320     tcp_receive: seg
  148594:	746e656d 746f6e20 69727420 64656d6d     ment not trimmed
  1485a4:	726f6320 74636572 7420796c 6f6f206f      correctly to oo
  1485b4:	20716573 75657571 00000a65 5f706374     seq queue...tcp_
  1485c4:	65636572 3a657669 70637420 206e656c     receive: tcplen 
  1485d4:	6372203e 6e775f76 00000a64 5f706374     > rcv_wnd...tcp_
  1485e4:	65636572 3a657669 736f6f20 74207165     receive: ooseq t
  1485f4:	656c7063 203e206e 5f766372 0a646e77     cplen > rcv_wnd.
  148604:	00000000 63656863 6874206b 66207461     ....check that f
  148614:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  148624:	7320646c 63757274 63742074 64685f70     ld struct tcp_hd
  148634:	00000072 76726573 73656369 49776c2f     r...services/lwI
  148644:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  148654:	2f637273 65726f63 7063742f 74756f5f     src/core/tcp_out
  148664:	0000632e 743e2d70 6c5f746f 3e206e65     .c..p->tot_len >
  148674:	706f203d 6e656c74 00000000 6465656e     = optlen....need
  148684:	636e7520 6e696168 70206465 00667562      unchained pbuf.
  148694:	5f706374 74697277 70203a65 73667562     tcp_write: pbufs
  1486a4:	206e6f20 75657571 3e3d2065 20746120      on queue => at 
  1486b4:	7361656c 6e6f2074 75712065 20657565     least one queue 
  1486c4:	2d6e6f6e 74706d65 00000079 5f706374     non-empty...tcp_
  1486d4:	74697277 6e203a65 6270206f 20736675     write: no pbufs 
  1486e4:	71206e6f 65756575 203e3d20 68746f62     on queue => both
  1486f4:	65757120 20736575 74706d65 00000079      queues empty...
  148704:	5f706374 74697277 61203a65 3d206772     tcp_write: arg =
  148714:	554e203d 28204c4c 676f7270 6d6d6172     = NULL (programm
  148724:	76207265 616c6f69 20736574 29495041     er violates API)
  148734:	00000000 5f73736d 61636f6c 7369206c     ....mss_local is
  148744:	6f6f7420 616d7320 00006c6c 6f636e69      too small..inco
  148754:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  148764:	73762065 7073202e 00656361 6f636e69     e vs. space.inco
  148774:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  148784:	73762065 656c202e 0000006e 5f706374     e vs. len...tcp_
  148794:	74697277 52203a65 70204d4f 73667562     write: ROM pbufs
  1487a4:	6e616320 20746f6e 6f206562 73726576      cannot be overs
  1487b4:	64657a69 00000000 65736e75 6f5f746e     ized....unsent_o
  1487c4:	73726576 20657a69 6d73696d 68637461     versize mismatch
  1487d4:	63702820 753e2d62 6e65736e 73692074      (pcb->unsent is
  1487e4:	4c554e20 0000294c 5f706374 74697277      NULL)..tcp_writ
  1487f4:	63203a65 6b636568 61687420 69662074     e: check that fi
  148804:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  148814:	68742064 6f632065 656c706d 73206574     d the complete s
  148824:	656c6765 0000006e 7265766f 657a6973     eglen...oversize
  148834:	203d3d20 00000030 76657270 6765735f      == 0...prev_seg
  148844:	203d2120 4c4c554e 00000000 5f706374      != NULL....tcp_
  148854:	74697277 63203a65 6f6e6e61 6f632074     write: cannot co
  148864:	7461636e 74616e65 68772065 70206e65     ncatenate when p
  148874:	3e2d6263 65736e75 6920746e 6d652073     cb->unsent is em
  148884:	00797470 5f706374 74697277 65203a65     pty.tcp_write: e
  148894:	6e657478 6e6f6973 20666f20 65666572     xtension of refe
  1488a4:	636e6572 65722065 72697571 72207365     rence requires r
  1488b4:	72656665 65636e65 00000000 5f706374     eference....tcp_
  1488c4:	74697277 76203a65 64696c61 65757120     write: valid que
  1488d4:	6c206575 74676e65 00000068 5f706374     ue length...tcp_
  1488e4:	75716e65 5f657565 67616c66 6e203a73     enqueue_flags: n
  1488f4:	20646565 68746965 54207265 535f5043     eed either TCP_S
  148904:	6f204e59 43542072 49465f50 6e69204e     YN or TCP_FIN in
  148914:	616c6620 28207367 676f7270 6d6d6172      flags (programm
  148924:	76207265 616c6f69 20736574 29495041     er violates API)
  148934:	00000000 5f706374 75716e65 5f657565     ....tcp_enqueue_
  148944:	67616c66 63203a73 6b636568 61687420     flags: check tha
  148954:	69662074 20747372 66756270 6e616320     t first pbuf can
  148964:	6c6f6820 706f2064 6e656c74 00000000      hold optlen....
  148974:	2d676573 7063743e 20726468 20746f6e     seg->tcphdr not 
  148984:	67696c61 0064656e 5f706374 75716e65     aligned.tcp_enqu
  148994:	5f657565 67616c66 69203a73 6c61766e     eue_flags: inval
  1489a4:	73206469 656d6765 6c20746e 74676e65     id segment lengt
  1489b4:	00000068 5f706374 75716e65 5f657565     h...tcp_enqueue_
  1489c4:	67616c66 69203a73 6c61766e 71206469     flags: invalid q
  1489d4:	65756575 6e656c20 00687467 276e6f64     ueue length.don'
  1489e4:	61632074 74206c6c 6f5f7063 75707475     t call tcp_outpu
  1489f4:	6f662074 696c2072 6e657473 6263702d     t for listen-pcb
  148a04:	00000073 20545352 20746f6e 65707865     s...RST not expe
  148a14:	64657463 72656820 00002165              cted here!..

00148a20 <lwip_cyclic_timers>:
  148a20:	000000fa 0011cfdc 000003e8 00132ce0     .............,..
  148a30:	000003e8 0012d930 0000ea60 0012a570     ....0...`...p...
  148a40:	000001f4 0012a6a4 00000064 00130cdc     ........d.......
  148a50:	000003e8 00116af8 76726573 73656369     .....j..services
  148a60:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  148a70:	2f322e30 2f637273 65726f63 6d69742f     0.2/src/core/tim
  148a80:	74756f65 00632e73 5f737973 656d6974     eouts.c.sys_time
  148a90:	3a74756f 6d697420 74756f65 203d2120     out: timeout != 
  148aa0:	4c4c554e 6f70202c 4d206c6f 5f504d45     NULL, pool MEMP_
  148ab0:	5f535953 454d4954 2054554f 65207369     SYS_TIMEOUT is e
  148ac0:	7974706d 00000000 66756270 6165685f     mpty....pbuf_hea
  148ad0:	20726564 6c696166 000a6465 76726573     der failed..serv
  148ae0:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  148af0:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  148b00:	7064752f 0000632e 63656863 6874206b     /udp.c..check th
  148b10:	66207461 74737269 75627020 61632066     at first pbuf ca
  148b20:	6f68206e 7320646c 63757274 64752074     n hold struct ud
  148b30:	64685f70 00000072                       p_hdr...

00148b38 <ethbroadcast>:
  148b38:	ffffffff 0000ffff                       ........

00148b40 <ethzero>:
	...
  148b48:	6974656e 683e2d66 64646177 656c5f72     netif->hwaddr_le
  148b58:	756d206e 62207473 20362065 20726f66     n must be 6 for 
  148b68:	65687465 74656e72 74756f5f 21747570     ethernet_output!
  148b78:	00000000 76726573 73656369 49776c2f     ....services/lwI
  148b88:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  148b98:	2f637273 6974656e 74652f66 6e726568     src/netif/ethern
  148ba8:	632e7465 00000000 6974656e 00000066     et.c....netif...
  148bb8:	74736f68 00000000 676e6970 7365725f     host....ping_res
  148bc8:	00000070                                p...

00148bcc <lwip_netdev_ops>:
  148bcc:	00129008 00129038 00129068 00129134     ....8...h...4...
  148bdc:	00129170 001291d0 00000000 00129490     p...............
  148bec:	7069776c 74656e5f 00006669 6974656e     lwip_netif..neti
  148bfc:	3d212066 5f545220 4c4c554e 00000000     f != RT_NULL....
  148c0c:	6c6c616d 6e20636f 66697465 69616620     malloc netif fai
  148c1c:	0a64656c 00000000 68747472 64616572     led.....rtthread
  148c2c:	3230255f 32302578 00000078 69706374     _%02x%02x...tcpi
  148c3c:	00000070 20766564 52203d21 554e5f54     p...dev != RT_NU
  148c4c:	00004c4c 6d787265 00000062 75736572     LL..erxmb...resu
  148c5c:	3d20746c 5452203d 4b4f455f 00000000     lt == RT_EOK....
  148c6c:	00787265 6d787465 00000062 7774656e     erx.etxmb...netw
  148c7c:	206b726f 65746e69 63616672 616e2065     ork interface na
  148c8c:	7420656d 6c206f6f 21676e6f 00000a0d     me too long!....
  148c9c:	7774656e 206b726f 65746e69 63616672     network interfac
  148cac:	25203a65 6f6e2073 6f662074 21646e75     e: %s not found!
  148cbc:	00000a0d                                ....

00148cc0 <__FUNCTION__.7782>:
  148cc0:	7069776c 74656e5f 5f766564 676e6970     lwip_netdev_ping
  148cd0:	00000000                                ....

00148cd4 <__FUNCTION__.7794>:
  148cd4:	6474656e 615f7665 00006464              netdev_add..

00148ce0 <__FUNCTION__.7803>:
  148ce0:	6474656e 645f7665 00006c65              netdev_del..

00148cec <__FUNCTION__.7808>:
  148cec:	6474656e 665f7665 7367616c 6e79735f     netdev_flags_syn
  148cfc:	00000063                                c...

00148d00 <__FUNCTION__.7814>:
  148d00:	65687465 74656e72 6c5f6669 6f6b6e69     ethernetif_linko
  148d10:	75707475 00000074                       utput...

00148d18 <__FUNCTION__.7846>:
  148d18:	5f687465 69766564 6c5f6563 636b6e69     eth_device_linkc
  148d28:	676e6168 00000065                       hange...

00148d30 <__FUNCTION__.7870>:
  148d30:	5f687465 74737973 645f6d65 63697665     eth_system_devic
  148d40:	6e695f65 705f7469 61766972 00006574     e_init_private..
  148d50:	70636864 636e695f 6263705f 6665725f     dhcp_inc_pcb_ref
  148d60:	6e756f63 3a292874 6d656d20 2079726f     count(): memory 
  148d70:	6b61656c 00000000 76726573 73656369     leak....services
  148d80:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  148d90:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  148da0:	68642f34 632e7063 00000000 70636864     4/dhcp.c....dhcp
  148db0:	6263705f 6665725f 6e756f63 3a292874     _pcb_refcount():
  148dc0:	66657220 6e756f63 72652074 00726f72      refcount error.
  148dd0:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  148de0:	70636864 203d2120 4c4c554e 00000000     dhcp != NULL....
  148df0:	6974656e 6c612066 64616572 61682079     netif already ha
  148e00:	20612073 75727473 64207463 20706368     s a struct dhcp 
  148e10:	00746573 6974656e 73692066 746f6e20     set.netif is not
  148e20:	2c707520 646c6f20 79747320 7020656c      up, old style p
  148e30:	3f74726f 00000000 66756270 6f5f7020     ort?....pbuf p_o
  148e40:	77207475 276e7361 72662074 00646565     ut wasn't freed.
  148e50:	6c706572 61772079 74276e73 65726620     reply wasn't fre
  148e60:	00006465 70636864 6e69625f 6e203a64     ed..dhcp_bind: n
  148e70:	66697465 203d2120 4c4c554e 00000000     etif != NULL....
  148e80:	70636864 6e69625f 64203a64 20706368     dhcp_bind: dhcp 
  148e90:	4e203d21 004c4c55 70636864 6f74735f     != NULL.dhcp_sto
  148ea0:	6e203a70 66697465 203d2120 4c4c554e     p: netif != NULL
  148eb0:	00000000 70636864 74706f5f 3a6e6f69     ....dhcp_option:
  148ec0:	63686420 6f3e2d70 6f697470 6f5f736e      dhcp->options_o
  148ed0:	6c5f7475 2b206e65 2b203220 74706f20     ut_len + 2 + opt
  148ee0:	5f6e6f69 206e656c 44203d3c 5f504348     ion_len <= DHCP_
  148ef0:	4954504f 5f534e4f 004e454c 70636864     OPTIONS_LEN.dhcp
  148f00:	74706f5f 5f6e6f69 65747962 6864203a     _option_byte: dh
  148f10:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  148f20:	206e656c 4844203c 4f5f5043 4f495450     len < DHCP_OPTIO
  148f30:	4c5f534e 00004e45 70636864 74706f5f     NS_LEN..dhcp_opt
  148f40:	5f6e6f69 726f6873 64203a74 2d706368     ion_short: dhcp-
  148f50:	74706f3e 736e6f69 74756f5f 6e656c5f     >options_out_len
  148f60:	32202b20 203d3c20 50434844 54504f5f      + 2 <= DHCP_OPT
  148f70:	534e4f49 4e454c5f 00000000 70636864     IONS_LEN....dhcp
  148f80:	74706f5f 5f6e6f69 676e6f6c 6864203a     _option_long: dh
  148f90:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  148fa0:	206e656c 2034202b 44203d3c 5f504348     len + 4 <= DHCP_
  148fb0:	4954504f 5f534e4f 004e454c 50434844     OPTIONS_LEN.DHCP
  148fc0:	6f68203a 616e7473 6920656d 6f742073     : hostname is to
  148fd0:	6f6c206f 0021676e 206e656c 34203d3d     o long!.len == 4
  148fe0:	00000000 206e656c 64203d3e 646f6365     ....len >= decod
  148ff0:	656c5f65 0000006e 206e656c 34202525     e_len...len %% 4
  149000:	203d3d20 00000030 206e656c 31203d3d      == 0...len == 1
  149010:	00000000 7265766f 64616f6c 206e6920     ....overload in 
  149020:	656c6966 616e732f 0000656d 63656863     file/sname..chec
  149030:	6564206b 65646f63 7864695f 00000000     k decode_idx....
  149040:	6f636564 6c5f6564 25206e65 20342025     decode_len %% 4 
  149050:	30203d3d 00000000 61766e69 2064696c     == 0....invalid 
  149060:	6f636564 6c5f6564 00006e65 7478656e     decode_len..next
  149070:	75627020 61772066 756e2073 00006c6c      pbuf was null..
  149080:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  149090:	74656e20 21206669 554e203d 00004c4c      netif != NULL..
  1490a0:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  1490b0:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  1490c0:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  1490d0:	63686420 703e2d70 74756f5f 203d3d20      dhcp->p_out == 
  1490e0:	4c4c554e 00000000 70636864 6572635f     NULL....dhcp_cre
  1490f0:	5f657461 3a67736d 63686420 6d3e2d70     ate_msg: dhcp->m
  149100:	6f5f6773 3d207475 554e203d 00004c4c     sg_out == NULL..
  149110:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  149120:	65686320 74206b63 20746168 73726966      check that firs
  149130:	62702074 63206675 68206e61 20646c6f     t pbuf can hold 
  149140:	75727473 64207463 5f706368 0067736d     struct dhcp_msg.
  149150:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  149160:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  149170:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  149180:	63686420 703e2d70 74756f5f 203d2120      dhcp->p_out != 
  149190:	4c4c554e 00000000 70636864 6c65645f     NULL....dhcp_del
  1491a0:	5f657465 3a67736d 63686420 6d3e2d70     ete_msg: dhcp->m
  1491b0:	6f5f6773 21207475 554e203d 00004c4c     sg_out != NULL..
  1491c0:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  1491d0:	3a72656c 63686420 3d212070 4c554e20     ler: dhcp != NUL
  1491e0:	0000004c 70636864 74706f5f 5f6e6f69     L...dhcp_option_
  1491f0:	69617274 3a72656c 63686420 6d3e2d70     trailer: dhcp->m
  149200:	6f5f6773 21207475 554e203d 000a4c4c     sg_out != NULL..
  149210:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  149220:	3a72656c 63686420 6f3e2d70 6f697470     ler: dhcp->optio
  149230:	6f5f736e 6c5f7475 3c206e65 43484420     ns_out_len < DHC
  149240:	504f5f50 4e4f4954 454c5f53 00000a4e     P_OPTIONS_LEN...
  149250:	3d212071 4c554e20 0000004c 76726573     q != NULL...serv
  149260:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  149270:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  149280:	7670692f 74652f34 70726168 0000632e     /ipv4/etharp.c..
  149290:	703e2d71 203d2120 4c4c554e 00000000     q->p != NULL....
  1492a0:	703e2d72 203d2120 4c4c554e 00000000     r->p != NULL....
  1492b0:	74617473 3d3d2065 48544520 5f505241     state == ETHARP_
  1492c0:	54415453 45505f45 4e49444e 7c7c2047     STATE_PENDING ||
  1492d0:	61747320 3e206574 5445203d 50524148      state >= ETHARP
  1492e0:	4154535f 535f4554 4c424154 00000045     _STATE_STABLE...
  1492f0:	5f707261 6c626174 5d695b65 3d20712e     arp_table[i].q =
  149300:	554e203d 00004c4c 203c2069 5f505241     = NULL..i < ARP_
  149310:	4c424154 49535f45 0000455a 5f707261     TABLE_SIZE..arp_
  149320:	6c626174 5d695b65 6174732e 3d206574     table[i].state =
  149330:	5445203d 50524148 4154535f 455f4554     = ETHARP_STATE_E
  149340:	5954504d 00000000 6974656e 683e2d66     MPTY....netif->h
  149350:	64646177 656c5f72 3d3d206e 48544520     waddr_len == ETH
  149360:	4157485f 5f524444 004e454c 5f687465     _HWADDR_LEN.eth_
  149370:	20746572 4e203d21 204c4c55 69202626     ret != NULL && i
  149380:	65725f70 3d212074 4c554e20 0000004c     p_ret != NULL...
  149390:	64617069 21207264 554e203d 00004c4c     ipaddr != NULL..
  1493a0:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  1493b0:	5f687465 20746572 4e203d21 004c4c55     eth_ret != NULL.
  1493c0:	5f707261 6c626174 72615b65 64695f70     arp_table[arp_id
  1493d0:	732e5d78 65746174 203d3e20 41485445     x].state >= ETHA
  1493e0:	535f5052 45544154 4154535f 00454c42     RP_STATE_STABLE.
  1493f0:	5f707261 6c626174 5d695b65 6174732e     arp_table[i].sta
  149400:	3d206574 4550203d 4e49444e 726f2047     te == PENDING or
  149410:	41545320 00454c42 70206f6e 656b6361      STABLE.no packe
  149420:	75712074 73657565 6c6c6120 6465776f     t queues allowed
  149430:	00000021 63656863 6874206b 66207461     !...check that f
  149440:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  149450:	7320646c 63757274 74652074 70726168     ld struct etharp
  149460:	7264685f 00000000 6974656e 683e2d66     _hdr....netif->h
  149470:	64646177 656c5f72 756d206e 62207473     waddr_len must b
  149480:	68742065 61732065 6120656d 54452073     e the same as ET
  149490:	57485f48 52444441 4e454c5f 726f6620     H_HWADDR_LEN for
  1494a0:	68746520 21707261 00000000 706d6369      etharp!....icmp
  1494b0:	706e695f 203a7475 69766f6d 7220676e     _input: moving r
  1494c0:	61703e2d 616f6c79 6f742064 6d636920     ->payload to icm
  1494d0:	65682070 72656461 69616620 0a64656c     p header failed.
  1494e0:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1494f0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  149500:	2f637273 65726f63 7670692f 63692f34     src/core/ipv4/ic
  149510:	632e706d 00000000 706d6369 706e695f     mp.c....icmp_inp
  149520:	203a7475 74736572 6e69726f 726f2067     ut: restoring or
  149530:	6e696769 70206c61 61703e2d 616f6c79     iginal p->payloa
  149540:	61662064 64656c69 0000000a 63656863     d failed....chec
  149550:	6874206b 66207461 74737269 75627020     k that first pbu
  149560:	61632066 6f68206e 6920646c 20706d63     f can hold icmp 
  149570:	7373656d 00656761 76726573 73656369     message.services
  149580:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  149590:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  1495a0:	67692f34 632e706d 00000000 706d6769     4/igmp.c....igmp
  1495b0:	6f6f6c5f 5f70756b 756f7267 66203a70     _lookup_group: f
  1495c0:	74737269 6f726720 6d207075 20747375     irst group must 
  1495d0:	61206562 79736c6c 6d657473 00000073     be allsystems...
  1495e0:	706d6769 6f6f6c5f 5f70756b 756f7267     igmp_lookup_grou
  1495f0:	61203a70 65206c6c 70656378 69662074     p: all except fi
  149600:	20747372 756f7267 756d2070 6e207473     rst group must n
  149610:	6220746f 6c612065 7379736c 736d6574     ot be allsystems
  149620:	00000000 706d6769 696f6a5f 6f72676e     ....igmp_joingro
  149630:	203a7075 65747461 2074706d 6a206f74     up: attempt to j
  149640:	206e696f 2d6e6f6e 746c756d 73616369     oin non-multicas
  149650:	64612074 73657264 00000073 706d6769     t address...igmp
  149660:	696f6a5f 6f72676e 203a7075 65747461     _joingroup: atte
  149670:	2074706d 6a206f74 206e696f 736c6c61     mpt to join alls
  149680:	65747379 6120736d 65726464 00007373     ystems address..
  149690:	706d6769 696f6a5f 6f72676e 6e5f7075     igmp_joingroup_n
  1496a0:	66697465 7461203a 706d6574 6f742074     etif: attempt to
  1496b0:	696f6a20 6f6e206e 756d2d6e 6369746c      join non-multic
  1496c0:	20747361 72646461 00737365 706d6769     ast address.igmp
  1496d0:	696f6a5f 6f72676e 6e5f7075 66697465     _joingroup_netif
  1496e0:	7461203a 706d6574 6f742074 696f6a20     : attempt to joi
  1496f0:	6c61206e 7379736c 736d6574 64646120     n allsystems add
  149700:	73736572 00000000 706d6769 696f6a5f     ress....igmp_joi
  149710:	6f72676e 6e5f7075 66697465 7461203a     ngroup_netif: at
  149720:	706d6574 6f742074 696f6a20 6e6f206e     tempt to join on
  149730:	6e6f6e20 4d47492d 656e2050 00666974      non-IGMP netif.
  149740:	706d6769 61656c5f 72676576 3a70756f     igmp_leavegroup:
  149750:	74746120 74706d65 206f7420 7661656c      attempt to leav
  149760:	6f6e2065 756d2d6e 6369746c 20747361     e non-multicast 
  149770:	72646461 00737365 706d6769 61656c5f     address.igmp_lea
  149780:	72676576 3a70756f 74746120 74706d65     vegroup: attempt
  149790:	206f7420 7661656c 6c612065 7379736c      to leave allsys
  1497a0:	736d6574 64646120 73736572 00000000     tems address....
  1497b0:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  1497c0:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  1497d0:	656c206f 20657661 2d6e6f6e 746c756d     o leave non-mult
  1497e0:	73616369 64612074 73657264 00000073     icast address...
  1497f0:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  149800:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  149810:	656c206f 20657661 736c6c61 65747379     o leave allsyste
  149820:	6120736d 65726464 00007373 706d6769     ms address..igmp
  149830:	61656c5f 72676576 5f70756f 6974656e     _leavegroup_neti
  149840:	61203a66 6d657474 74207470 656c206f     f: attempt to le
  149850:	20657661 6e206e6f 492d6e6f 20504d47     ave on non-IGMP 
  149860:	6974656e 00000066 706d6769 6e65735f     netif...igmp_sen
  149870:	63203a64 6b636568 61687420 69662074     d: check that fi
  149880:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  149890:	74732064 74637572 6d676920 736d5f70     d struct igmp_ms
  1498a0:	00000067 723e2d70 3d206665 0031203d     g...p->ref == 1.
  1498b0:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  1498c0:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  1498d0:	65726f63 7670692f 70692f34 00632e34     core/ipv4/ip4.c.
  1498e0:	63656863 6874206b 66207461 74737269     check that first
  1498f0:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  149900:	63757274 70692074 7264685f 00000000     truct ip_hdr....

00149910 <ip_addr_any>:
  149910:	00000000                                ....

00149914 <ip_addr_broadcast>:
  149914:	ffffffff 61686e75 656c646e 00000064     ....unhandled...
  149924:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  149934:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  149944:	65726f63 7670692f 70692f34 64615f34     core/ipv4/ip4_ad
  149954:	632e7264 00000000 76657270 203d2120     dr.c....prev != 
  149964:	00727069 76726573 73656369 49776c2f     ipr.services/lwI
  149974:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  149984:	2f637273 65726f63 7670692f 70692f34     src/core/ipv4/ip
  149994:	72665f34 632e6761 00000000 76657270     4_frag.c....prev
  1499a4:	656e3e2d 3d207478 7069203d 00000072     ->next == ipr...
  1499b4:	66756270 72665f73 20646565 6c63202b     pbufs_freed + cl
  1499c4:	3c206e65 7830203d 66666666 00000000     en <= 0xffff....
  1499d4:	725f7069 73736165 7562705f 756f6366     ip_reass_pbufcou
  1499e4:	3e20746e 6c63203d 00006e65 696e6173     nt >= clen..sani
  1499f4:	63207974 6b636568 6e696c20 2064656b     ty check linked 
  149a04:	7473696c 00000000 63656863 7266206b     list....check fr
  149a14:	656d6761 2073746e 276e6f64 766f2074     agments don't ov
  149a24:	616c7265 00000070 70206f6e 69766572     erlap...no previ
  149a34:	2073756f 67617266 746e656d 6874202c     ous fragment, th
  149a44:	6d207369 20747375 74206562 66206568     is must be the f
  149a54:	74737269 61726620 6e656d67 00002174     irst fragment!..
  149a64:	696e6173 63207974 6b636568 00000000     sanity check....
  149a74:	696c6176 65746164 7461645f 61726761     validate_datagra
  149a84:	656e3a6d 705f7478 21667562 4c554e3d     m:next_pbuf!=NUL
  149a94:	0000004c 696c6176 65746164 7461645f     L...validate_dat
  149aa4:	61726761 61643a6d 72676174 65206d61     agram:datagram e
  149ab4:	3d21646e 61746164 6d617267 6e656c20     nd!=datagram len
  149ac4:	00000000 3d212070 4c554e20 0000004c     ....p != NULL...
  149ad4:	20726370 4e203d21 004c4c55 20726370     pcr != NULL.pcr 
  149ae4:	70203d3d 00000000 5f347069 67617266     == p....ip4_frag
  149af4:	64202928 2073656f 20746f6e 70707573     () does not supp
  149b04:	2074726f 6f205049 6f697470 0000736e     ort IP options..
  149b14:	665f7069 28676172 4d203a29 6c612046     ip_frag(): MF al
  149b24:	64616572 65732079 00000074 73696874     ready set...this
  149b34:	65656e20 61207364 75627020 6e692066      needs a pbuf in
  149b44:	656e6f20 65697020 00216563 676e6970      one piece!.ping
  149b54:	7a69735f 73692065 6f6f7420 67696220     _size is too big
  149b64:	00000000 76726573 73656369 49776c2f     ....services/lwI
  149b74:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  149b84:	2f637273 73707061 6e69702f 69702f67     src/apps/ping/pi
  149b94:	632e676e 00000000 00003165 63616d65     ng.c....e1..emac
  149ba4:	6e695f31 00007274 6d305b1b 642f445b     1_intr...[0m[D/d
  149bb4:	652e7672 5d74656e 00000020 74656e65     rv.enet] ...enet
  149bc4:	6c206425 206b6e69 00007075 6d305b1b     %d link up...[0m
  149bd4:	0000000a 74656e65 6c206425 206b6e69     ....enet%d link 
  149be4:	6e776f64 00000000 31335b1b 2f455b6d     down.....[31m[E/
  149bf4:	2e767264 74656e65 0000205d 4f525245     drv.enet] ..ERRO
  149c04:	61203a52 636f6c6c 6d656d20 746f6e20     R: alloc mem not
  149c14:	6f6e6520 20686775 20726f66 74656e65      enough for enet
  149c24:	69726420 00726576 4f525245 72203a52      driver.ERROR: r
  149c34:	75622078 70206666 20656761 6f6c6c61     x buff page allo
  149c44:	61662063 64656c69 00000000 4f525245     c failed....ERRO
  149c54:	74203a52 75622078 70206666 20656761     R: tx buff page 
  149c64:	6f6c6c61 61662063 64656c69 00000000     alloc failed....
  149c74:	4f525245 72203a52 64622078 67617020     ERROR: rx bd pag
  149c84:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  149c94:	4f525245 74203a52 64622078 67617020     ERROR: tx bd pag
  149ca4:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  149cb4:	51494e55 495f4555 73692044 25782520     UNIQUE_ID is %x%
  149cc4:	00000078 51494e55 495f4555 68632044     x...UNIQUE_ID ch
  149cd4:	65676e61 206f7420 62203233 20737469     ange to 32 bits 
  149ce4:	00007825 00000070 2074656e 6f727265     %x..p...net erro
  149cf4:	65732072 6c20646e 74676e65 64252068     r send length %d
  149d04:	63786520 20646565 2078616d 676e656c      exceed max leng
  149d14:	00006874 2074656e 6f727265 65722072     th..net error re
  149d24:	6c207663 74676e65 64252068 63786520     cv length %d exc
  149d34:	20646565 2078616d 676e656c 00006874     eed max length..
  149d44:	20687465 64616572 766e6920 64696c61     eth read invalid
  149d54:	72617020 74656d61 62207265 65666675      parameter buffe
  149d64:	70252072 7a697320 64252065 00000000     r %p size %d....
  149d74:	20687465 74697277 6e692065 696c6176     eth write invali
  149d84:	61702064 656d6172 20726574 66667562     d parameter buff
  149d94:	25207265 69732070 2520657a 00000064     er %p size %d...
  149da4:	65746e69 75707272 616d2074 20686374     interrput match 
  149db4:	65736162 64646120 72652072 00726f72     base addr error.
  149dc4:	33335b1b 2f575b6d 2e767264 74656e65     .[33m[W/drv.enet
  149dd4:	0000205d 20594850 6b6e694c 776f6420     ] ..PHY Link dow
  149de4:	70202c6e 7361656c 68632065 206b6365     n, please check 
  149df4:	20656874 6c626163 6f632065 63656e6e     the cable connec
  149e04:	6e6f6974 646e6120 6e696c20 6170206b     tion and link pa
  149e14:	656e7472 65732072 6e697474 00002e67     rtner setting...

00149e24 <_k_enet_ops>:
  149e24:	00000000 00135260 001352a8 001352e4     ....`R...R...R..
  149e34:	00135394 00134c94 32335b1b 2f495b6d     .S...L...[32m[I/
  149e44:	2e767264 74656e65 0000205d 63616d65     drv.enet] ..emac
  149e54:	76656420 20656369 74696e69 63757320      device init suc
  149e64:	73736563 00000000 63616d65 76656420     cess....emac dev
  149e74:	20656369 74696e69 69616620 203a646c     ice init faild: 
  149e84:	00006425 6b6e696c 6425645f 00000000     %d..link_d%d....

00149e94 <__FUNCTION__.9268>:
  149e94:	695f7472 7536786d 74655f6c 78745f68     rt_imx6ul_eth_tx
  149ea4:	00000000 45535341 45205452 524f5252     ....ASSERT ERROR
  149eb4:	25202220 3a222073 6c696620 25222065      " %s ": file "%
  149ec4:	4c202273 20656e69 22642522 6e756620     s" Line "%d" fun
  149ed4:	6f697463 616e206e 2220656d 20227325     ction name "%s" 
  149ee4:	0000000a                                ....

00149ee8 <s_enetBases>:
  149ee8:	00000000 02188000 020b4000 74736e69     .........@..inst
  149ef8:	65636e61 41203c20 59415252 5a49535f     ance < ARRAY_SIZ
  149f08:	5f732845 74656e65 65736142 00002973     E(s_enetBases)..
  149f18:	666e6f63 00006769 646e6168 0000656c     config..handle..
  149f28:	66667562 6f437265 6769666e 00000000     bufferConfig....
  149f38:	66667562 6f437265 6769666e 78723e2d     bufferConfig->rx
  149f48:	74536442 41747261 41726464 6e67696c     BdStartAddrAlign
  149f58:	00000000 66667562 6f437265 6769666e     ....bufferConfig
  149f68:	78743e2d 74536442 41747261 41726464     ->txBdStartAddrA
  149f78:	6e67696c 00000000 66667562 6f437265     lign....bufferCo
  149f88:	6769666e 78723e2d 66667542 6c417265     nfig->rxBufferAl
  149f98:	006e6769 66667562 6f437265 6769666e     ign.bufferConfig
  149fa8:	78743e2d 66667542 6c417265 006e6769     ->txBufferAlign.
  149fb8:	4163616d 00726464 66667562 6f437265     macAddr.bufferCo
  149fc8:	6769666e 78723e2d 66667542 657a6953     nfig->rxBuffSize
  149fd8:	67696c41 3d3e206e 454e4520 58525f54     Align >= ENET_RX
  149fe8:	4e494d5f 4655425f 53524546 00455a49     _MIN_BUFFERSIZE.
  149ff8:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  14a008:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  14a018:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  14a028:	754e6442 7265626d 28203e20 54454e45     BdNumber > (ENET
  14a038:	4152465f 4d5f454d 465f5841 454d4152     _FRAME_MAX_FRAME
  14a048:	204e454c 4e45202b 465f5445 454d4152     LEN + ENET_FRAME
  14a058:	414c565f 41545f4e 4e454c47 00000029     _VLAN_TAGLEN)...
  14a068:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  14a078:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  14a088:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  14a098:	754e6442 7265626d 45203e20 5f54454e     BdNumber > ENET_
  14a0a8:	4d415246 414d5f45 52465f58 4c454d41     FRAME_MAX_FRAMEL
  14a0b8:	00004e45 66667562 6f437265 6769666e     EN..bufferConfig
  14a0c8:	78723e2d 66667542 657a6953 67696c41     ->rxBuffSizeAlig
  14a0d8:	202a206e 66667562 6f437265 6769666e     n * bufferConfig
  14a0e8:	78723e2d 754e6442 7265626d 63203e20     ->rxBdNumber > c
  14a0f8:	69666e6f 723e2d67 78614d78 6d617246     onfig->rxMaxFram
  14a108:	6e654c65 00000000 64427874 72617453     eLen....txBdStar
  14a118:	696c4174 00006e67 75427874 74536666     tAlign..txBuffSt
  14a128:	41747261 6e67696c 00000000 64427872     artAlign....rxBd
  14a138:	72617453 696c4174 00006e67 75427872     StartAlign..rxBu
  14a148:	74536666 41747261 6e67696c 00000000     ffStartAlign....
  14a158:	43637273 6b636f6c 007a485f 646e6168     srcClock_Hz.hand
  14a168:	3e2d656c 64427872 72727543 00746e65     le->rxBdCurrent.
  14a178:	72724565 7453726f 63697461 00000000     eErrorStatic....
  14a188:	676e656c 00006874 31335b1b 2f455b6d     length...[31m[E/
  14a198:	2e767264 74656e65 0000205d 6d617266     drv.enet] ..fram
  14a1a8:	72652065 30726f72 72756320 66667542     e error0 curBuff
  14a1b8:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  14a1c8:	25783020 20783430 676e656c 25206874      0x%04x length %
  14a1d8:	00000a64 6d305b1b 0000000a 6d617266     d....[0m....fram
  14a1e8:	72652065 31726f72 72756320 66667542     e error1 curBuff
  14a1f8:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  14a208:	25783020 20783430 676e656c 25206874      0x%04x length %
  14a218:	00000a64 646e6168 3e2d656c 64427874     d...handle->txBd
  14a228:	72727543 00746e65 61746164 00000000     Current.data....
  14a238:	676e656c 3c206874 4e45203d 465f5445     length <= ENET_F
  14a248:	454d4152 58414d5f 4152465f 454c454d     RAME_MAX_FRAMELE
  14a258:	0000004e 72646461 00737365              N...address.

0014a264 <__FUNCTION__.9236>:
  14a264:	54454e45 7465475f 74736e49 65636e61     ENET_GetInstance
  14a274:	00000000                                ....

0014a278 <__FUNCTION__.9241>:
  14a278:	54454e45 7465475f 61666544 43746c75     ENET_GetDefaultC
  14a288:	69666e6f 00000067                       onfig...

0014a290 <__FUNCTION__.9250>:
  14a290:	54454e45 696e495f 00000074              ENET_Init...

0014a29c <__FUNCTION__.9259>:
  14a29c:	54454e45 7465535f 6c6c6143 6b636162     ENET_SetCallback
  14a2ac:	00000000                                ....

0014a2b0 <__FUNCTION__.9288>:
  14a2b0:	54454e45 7465535f 75427854 72656666     ENET_SetTxBuffer
  14a2c0:	63736544 74706972 0073726f              Descriptors.

0014a2cc <__FUNCTION__.9302>:
  14a2cc:	54454e45 7465535f 75427852 72656666     ENET_SetRxBuffer
  14a2dc:	63736544 74706972 0073726f              Descriptors.

0014a2e8 <__FUNCTION__.9324>:
  14a2e8:	54454e45 7465475f 4163614d 00726464     ENET_GetMacAddr.

0014a2f8 <__FUNCTION__.9331>:
  14a2f8:	54454e45 7465535f 00494d53              ENET_SetSMI.

0014a304 <__FUNCTION__.9371>:
  14a304:	54454e45 7465475f 72457852 66654272     ENET_GetRxErrBef
  14a314:	5265726f 46646165 656d6172 00000000     oreReadFrame....

0014a324 <__FUNCTION__.9383>:
  14a324:	54454e45 6165525f 61724664 0000656d     ENET_ReadFrame..

0014a334 <__FUNCTION__.9390>:
  14a334:	54454e45 6470555f 52657461 42646165     ENET_UpdateReadB
  14a344:	65666675 00007372                       uffers..

0014a34c <__FUNCTION__.9398>:
  14a34c:	54454e45 6e65535f 61724664 0000656d     ENET_SendFrame..

0014a35c <__FUNCTION__.9407>:
  14a35c:	54454e45 6464415f 746c754d 73616369     ENET_AddMulticas
  14a36c:	6f724774 00007075                       tGroup..

0014a374 <__FUNCTION__.9422>:
  14a374:	54454e45 61654c5f 754d6576 6369746c     ENET_LeaveMultic
  14a384:	47747361 70756f72 00000000              astGroup....

0014a390 <__FUNCTION__.9439>:
  14a390:	54454e45 6172545f 696d736e 51524974     ENET_TransmitIRQ
  14a3a0:	646e6148 0072656c                       Handler.

0014a3a8 <__FUNCTION__.9446>:
  14a3a8:	54454e45 6365525f 65766965 48515249     ENET_ReceiveIRQH
  14a3b8:	6c646e61 00007265                       andler..

0014a3c0 <__FUNCTION__.9451>:
  14a3c0:	54454e45 7272455f 5249726f 6e614851     ENET_ErrorIRQHan
  14a3d0:	72656c64 00000000 76726573 73656369     dler....services
  14a3e0:	49776c2f 74694b50 7672642f 656e655f     /lwIPKit/drv_ene
  14a3f0:	72642f74 72657669 6c73662f 6970675f     t/driver/fsl_gpi
  14a400:	00632e6f 206e6970 3233203c 00000000     o.c.pin < 32....

0014a410 <__func__.6332>:
  14a410:	4f495047 6972575f 69506574 74754f6e     GPIO_WritePinOut
  14a420:	00747570 61746164 00727450 74617473     put.dataPtr.stat
  14a430:	00007375 6c707564 00007865              us..duplex..

0014a43c <__FUNCTION__.8416>:
  14a43c:	5f594850 64616552 00000000              PHY_Read....

0014a448 <__FUNCTION__.8434>:
  14a448:	5f594850 4c746547 536b6e69 75746174     PHY_GetLinkStatu
  14a458:	00000073                                s...

0014a45c <__FUNCTION__.8443>:
  14a45c:	5f594850 4c746547 536b6e69 64656570     PHY_GetLinkSpeed
  14a46c:	6c707544 00007865                       Duplex..

0014a474 <errid>:
  14a474:	19222154 0302010d 0c1c4b11 1d0b0410     T!"......K......
  14a484:	68271e12 71706f6e 06052062 1514130f     ..'hnopqb ......
  14a494:	0716081a 18172428 1b0e0a09 8323251f     ....($.......%#.
  14a4a4:	2a267d82 3e3d3c2b 4a47433f 5a59584d     .}&*+<=>?CGJMXYZ
  14a4b4:	5e5d5c5b 6361605f 67666564 6c6b6a69     [\]^_`acdefgijkl
  14a4c4:	79747372 487c7b7a 00000000              rstyz{|H....

0014a4d0 <errmsg>:
  14a4d0:	656c6c49 206c6167 65747962 71657320     Illegal byte seq
  14a4e0:	636e6575 6f440065 6e69616d 72726520     uence.Domain err
  14a4f0:	5200726f 6c757365 6f6e2074 65722074     or.Result not re
  14a500:	73657270 61746e65 00656c62 20746f4e     presentable.Not 
  14a510:	74742061 65500079 73696d72 6e6f6973     a tty.Permission
  14a520:	6e656420 00646569 7265704f 6f697461      denied.Operatio
  14a530:	6f6e206e 65702074 74696d72 00646574     n not permitted.
  14a540:	73206f4e 20686375 656c6966 20726f20     No such file or 
  14a550:	65726964 726f7463 6f4e0079 63757320     directory.No suc
  14a560:	72702068 7365636f 69460073 6520656c     h process.File e
  14a570:	74736978 61560073 2065756c 206f6f74     xists.Value too 
  14a580:	6772616c 6f662065 61642072 74206174     large for data t
  14a590:	00657079 73206f4e 65636170 66656c20     ype.No space lef
  14a5a0:	6e6f2074 76656420 00656369 2074754f     t on device.Out 
  14a5b0:	6d20666f 726f6d65 65520079 72756f73     of memory.Resour
  14a5c0:	62206563 00797375 65746e49 70757272     ce busy.Interrup
  14a5d0:	20646574 74737973 63206d65 006c6c61     ted system call.
  14a5e0:	6f736552 65637275 6d657420 61726f70     Resource tempora
  14a5f0:	796c6972 616e7520 6c696176 656c6261     rily unavailable
  14a600:	766e4900 64696c61 65657320 7243006b     .Invalid seek.Cr
  14a610:	2d73736f 69766564 6c206563 006b6e69     oss-device link.
  14a620:	64616552 6c6e6f2d 69662079 7320656c     Read-only file s
  14a630:	65747379 6944006d 74636572 2079726f     ystem.Directory 
  14a640:	20746f6e 74706d65 6f430079 63656e6e     not empty.Connec
  14a650:	6e6f6974 73657220 62207465 65702079     tion reset by pe
  14a660:	4f007265 61726570 6e6f6974 6d697420     er.Operation tim
  14a670:	6f206465 43007475 656e6e6f 6f697463     ed out.Connectio
  14a680:	6572206e 65737566 6f480064 69207473     n refused.Host i
  14a690:	6f642073 48006e77 2074736f 75207369     s down.Host is u
  14a6a0:	6165726e 62616863 4100656c 65726464     nreachable.Addre
  14a6b0:	69207373 7375206e 72420065 6e656b6f     ss in use.Broken
  14a6c0:	70697020 2f490065 7265204f 00726f72      pipe.I/O error.
  14a6d0:	73206f4e 20686375 69766564 6f206563     No such device o
  14a6e0:	64612072 73657264 6c420073 206b636f     r address.Block 
  14a6f0:	69766564 72206563 69757165 00646572     device required.
  14a700:	73206f4e 20686375 69766564 4e006563     No such device.N
  14a710:	6120746f 72696420 6f746365 49007972     ot a directory.I
  14a720:	20612073 65726964 726f7463 65540079     s a directory.Te
  14a730:	66207478 20656c69 79737562 65784500     xt file busy.Exe
  14a740:	6f662063 74616d72 72726520 4900726f     c format error.I
  14a750:	6c61766e 61206469 6d756772 00746e65     nvalid argument.
  14a760:	75677241 746e656d 73696c20 6f742074     Argument list to
  14a770:	6f6c206f 5300676e 6f626d79 2063696c     o long.Symbolic 
  14a780:	6b6e696c 6f6f6c20 69460070 616e656c     link loop.Filena
  14a790:	7420656d 6c206f6f 00676e6f 206f6f54     me too long.Too 
  14a7a0:	796e616d 65706f20 6966206e 2073656c     many open files 
  14a7b0:	73206e69 65747379 6f4e006d 6c696620     in system.No fil
  14a7c0:	65642065 69726373 726f7470 76612073     e descriptors av
  14a7d0:	616c6961 00656c62 20646142 656c6966     ailable.Bad file
  14a7e0:	73656420 70697263 00726f74 63206f4e      descriptor.No c
  14a7f0:	646c6968 6f727020 73736563 64614200     hild process.Bad
  14a800:	64646120 73736572 6c694600 6f742065      address.File to
  14a810:	616c206f 00656772 206f6f54 796e616d     o large.Too many
  14a820:	6e696c20 4e00736b 6f6c206f 20736b63      links.No locks 
  14a830:	69617661 6c62616c 65520065 72756f73     available.Resour
  14a840:	64206563 6c646165 206b636f 6c756f77     ce deadlock woul
  14a850:	636f2064 00727563 74617453 6f6e2065     d occur.State no
  14a860:	65722074 65766f63 6c626172 72500065     t recoverable.Pr
  14a870:	6f697665 6f207375 72656e77 65696420     evious owner die
  14a880:	704f0064 74617265 206e6f69 636e6163     d.Operation canc
  14a890:	64656c65 6e754600 6f697463 6f6e206e     eled.Function no
  14a8a0:	6d692074 6d656c70 65746e65 6f4e0064     t implemented.No
  14a8b0:	73656d20 65676173 20666f20 69736564      message of desi
  14a8c0:	20646572 65707974 65644900 6669746e     red type.Identif
  14a8d0:	20726569 6f6d6572 00646576 69766544     ier removed.Devi
  14a8e0:	6e206563 6120746f 72747320 006d6165     ce not a stream.
  14a8f0:	64206f4e 20617461 69617661 6c62616c     No data availabl
  14a900:	65440065 65636976 6d697420 74756f65     e.Device timeout
  14a910:	74754f00 20666f20 65727473 20736d61     .Out of streams 
  14a920:	6f736572 65637275 694c0073 68206b6e     resources.Link h
  14a930:	62207361 206e6565 65766573 00646572     as been severed.
  14a940:	746f7250 6c6f636f 72726520 4200726f     Protocol error.B
  14a950:	6d206461 61737365 46006567 20656c69     ad message.File 
  14a960:	63736564 74706972 6920726f 6162206e     descriptor in ba
  14a970:	74732064 00657461 20746f4e 6f732061     d state.Not a so
  14a980:	74656b63 73654400 616e6974 6e6f6974     cket.Destination
  14a990:	64646120 73736572 71657220 65726975      address require
  14a9a0:	654d0064 67617373 6f742065 616c206f     d.Message too la
  14a9b0:	00656772 746f7250 6c6f636f 6f727720     rge.Protocol wro
  14a9c0:	7420676e 20657079 20726f66 6b636f73     ng type for sock
  14a9d0:	50007465 6f746f72 206c6f63 20746f6e     et.Protocol not 
  14a9e0:	69617661 6c62616c 72500065 636f746f     available.Protoc
  14a9f0:	6e206c6f 7320746f 6f707075 64657472     ol not supported
  14aa00:	636f5300 2074656b 65707974 746f6e20     .Socket type not
  14aa10:	70757320 74726f70 4e006465 7320746f      supported.Not s
  14aa20:	6f707075 64657472 6f725000 6f636f74     upported.Protoco
  14aa30:	6166206c 796c696d 746f6e20 70757320     l family not sup
  14aa40:	74726f70 41006465 65726464 66207373     ported.Address f
  14aa50:	6c696d61 6f6e2079 75732074 726f7070     amily not suppor
  14aa60:	20646574 70207962 6f746f72 006c6f63     ted by protocol.
  14aa70:	72646441 20737365 20746f6e 69617661     Address not avai
  14aa80:	6c62616c 654e0065 726f7774 7369206b     lable.Network is
  14aa90:	776f6420 654e006e 726f7774 6e75206b      down.Network un
  14aaa0:	63616572 6c626168 6f430065 63656e6e     reachable.Connec
  14aab0:	6e6f6974 73657220 62207465 656e2079     tion reset by ne
  14aac0:	726f7774 6f43006b 63656e6e 6e6f6974     twork.Connection
  14aad0:	6f626120 64657472 206f4e00 66667562      aborted.No buff
  14aae0:	73207265 65636170 61766120 62616c69     er space availab
  14aaf0:	5300656c 656b636f 73692074 6e6f6320     le.Socket is con
  14ab00:	7463656e 53006465 656b636f 6f6e2074     nected.Socket no
  14ab10:	6f632074 63656e6e 00646574 6e6e6143     t connected.Cann
  14ab20:	7320746f 20646e65 65746661 6f732072     ot send after so
  14ab30:	74656b63 75687320 776f6474 704f006e     cket shutdown.Op
  14ab40:	74617265 206e6f69 65726c61 20796461     eration already 
  14ab50:	70206e69 72676f72 00737365 7265704f     in progress.Oper
  14ab60:	6f697461 6e69206e 6f727020 73657267     ation in progres
  14ab70:	74530073 20656c61 656c6966 6e616820     s.Stale file han
  14ab80:	00656c64 6f6d6552 49206574 65204f2f     dle.Remote I/O e
  14ab90:	726f7272 6f755100 65206174 65656378     rror.Quota excee
  14aba0:	00646564 6d206f4e 75696465 6f66206d     ded.No medium fo
  14abb0:	00646e75 6e6f7257 656d2067 6d756964     und.Wrong medium
  14abc0:	70797420 754d0065 6869746c 6120706f      type.Multihop a
  14abd0:	6d657474 64657470 206f4e00 6f727265     ttempted.No erro
  14abe0:	6e692072 6d726f66 6f697461 0000006e     r information...
  14abf0:	65737341 6f697472 6166206e 64656c69     Assertion failed
  14ac00:	7325203a 73252820 7325203a 6425203a     : %s (%s: %s: %d
  14ac10:	00000a29                                )...

0014ac14 <__FUNCTION__.6013>:
  14ac14:	63737973 5f6c6c61 74736572 5f747261     syscall_restart_
  14ac24:	63737973 006c6c61                       syscall.

0014ac2c <__FUNCTION__.6017>:
  14ac2c:	63737973 5f6c6c61 74697865 00000000     syscall_exit....

0014ac3c <__FUNCTION__.6020>:
  14ac3c:	63737973 5f6c6c61 6b726f66 00000000     syscall_fork....

0014ac4c <__FUNCTION__.6026>:
  14ac4c:	63737973 5f6c6c61 64616572 00000000     syscall_read....

0014ac5c <__FUNCTION__.6032>:
  14ac5c:	63737973 5f6c6c61 74697277 00000065     syscall_write...

0014ac6c <__FUNCTION__.6038>:
  14ac6c:	63737973 5f6c6c61 6e65706f 00000000     syscall_open....

0014ac7c <__FUNCTION__.6042>:
  14ac7c:	63737973 5f6c6c61 736f6c63 00000065     syscall_close...

0014ac8c <__FUNCTION__.6045>:
  14ac8c:	63737973 5f6c6c61 61657263 00000074     syscall_creat...

0014ac9c <__FUNCTION__.6048>:
  14ac9c:	63737973 5f6c6c61 6b6e696c 00000000     syscall_link....

0014acac <__FUNCTION__.6052>:
  14acac:	63737973 5f6c6c61 696c6e75 00006b6e     syscall_unlink..

0014acbc <__FUNCTION__.6058>:
  14acbc:	63737973 5f6c6c61 63657865 00006576     syscall_execve..

0014accc <__FUNCTION__.6062>:
  14accc:	63737973 5f6c6c61 69646863 00000072     syscall_chdir...

0014acdc <__FUNCTION__.6065>:
  14acdc:	63737973 5f6c6c61 6f6e6b6d 00000064     syscall_mknod...

0014acec <__FUNCTION__.6068>:
  14acec:	63737973 5f6c6c61 6f6d6863 00000064     syscall_chmod...

0014acfc <__FUNCTION__.6071>:
  14acfc:	63737973 5f6c6c61 6f68636c 00006e77     syscall_lchown..

0014ad0c <__FUNCTION__.6077>:
  14ad0c:	63737973 5f6c6c61 6565736c 0000006b     syscall_lseek...

0014ad1c <__FUNCTION__.6080>:
  14ad1c:	63737973 5f6c6c61 70746567 00006469     syscall_getpid..

0014ad2c <__FUNCTION__.6083>:
  14ad2c:	63737973 5f6c6c61 6e756f6d 00000074     syscall_mount...

0014ad3c <__FUNCTION__.6086>:
  14ad3c:	63737973 5f6c6c61 75746573 00006469     syscall_setuid..

0014ad4c <__FUNCTION__.6089>:
  14ad4c:	63737973 5f6c6c61 75746567 00006469     syscall_getuid..

0014ad5c <__FUNCTION__.6092>:
  14ad5c:	63737973 5f6c6c61 61727470 00006563     syscall_ptrace..

0014ad6c <__FUNCTION__.6095>:
  14ad6c:	63737973 5f6c6c61 73756170 00000065     syscall_pause...

0014ad7c <__FUNCTION__.6100>:
  14ad7c:	63737973 5f6c6c61 65636361 00007373     syscall_access..

0014ad8c <__FUNCTION__.6103>:
  14ad8c:	63737973 5f6c6c61 6563696e 00000000     syscall_nice....

0014ad9c <__FUNCTION__.6106>:
  14ad9c:	63737973 5f6c6c61 636e7973 00000000     syscall_sync....

0014adac <__FUNCTION__.6111>:
  14adac:	63737973 5f6c6c61 6c6c696b 00000000     syscall_kill....

0014adbc <__FUNCTION__.6116>:
  14adbc:	63737973 5f6c6c61 616e6572 0000656d     syscall_rename..

0014adcc <__FUNCTION__.6121>:
  14adcc:	63737973 5f6c6c61 69646b6d 00000072     syscall_mkdir...

0014addc <__FUNCTION__.6125>:
  14addc:	63737973 5f6c6c61 69646d72 00000072     syscall_rmdir...

0014adec <__FUNCTION__.6129>:
  14adec:	63737973 5f6c6c61 00707564              syscall_dup.

0014adf8 <__FUNCTION__.6133>:
  14adf8:	63737973 5f6c6c61 65706970 00000000     syscall_pipe....

0014ae08 <__FUNCTION__.6136>:
  14ae08:	63737973 5f6c6c61 656d6974 00000073     syscall_times...

0014ae18 <__FUNCTION__.6140>:
  14ae18:	63737973 5f6c6c61 006b7262              syscall_brk.

0014ae24 <__FUNCTION__.6143>:
  14ae24:	63737973 5f6c6c61 67746573 00006469     syscall_setgid..

0014ae34 <__FUNCTION__.6146>:
  14ae34:	63737973 5f6c6c61 67746567 00006469     syscall_getgid..

0014ae44 <__FUNCTION__.6149>:
  14ae44:	63737973 5f6c6c61 65746567 00646975     syscall_geteuid.

0014ae54 <__FUNCTION__.6152>:
  14ae54:	63737973 5f6c6c61 65746567 00646967     syscall_getegid.

0014ae64 <__FUNCTION__.6155>:
  14ae64:	63737973 5f6c6c61 74636361 00000000     syscall_acct....

0014ae74 <__FUNCTION__.6158>:
  14ae74:	63737973 5f6c6c61 756f6d75 0032746e     syscall_umount2.

0014ae84 <__FUNCTION__.6164>:
  14ae84:	63737973 5f6c6c61 74636f69 0000006c     syscall_ioctl...

0014ae94 <__FUNCTION__.6170>:
  14ae94:	63737973 5f6c6c61 746e6366 0000006c     syscall_fcntl...

0014aea4 <__FUNCTION__.6173>:
  14aea4:	63737973 5f6c6c61 70746573 00646967     syscall_setpgid.

0014aeb4 <__FUNCTION__.6176>:
  14aeb4:	63737973 5f6c6c61 73616d75 0000006b     syscall_umask...

0014aec4 <__FUNCTION__.6179>:
  14aec4:	63737973 5f6c6c61 6f726863 0000746f     syscall_chroot..

0014aed4 <__FUNCTION__.6182>:
  14aed4:	63737973 5f6c6c61 61747375 00000074     syscall_ustat...

0014aee4 <__FUNCTION__.6187>:
  14aee4:	63737973 5f6c6c61 32707564 00000000     syscall_dup2....

0014aef4 <__FUNCTION__.6190>:
  14aef4:	63737973 5f6c6c61 70746567 00646970     syscall_getppid.

0014af04 <__FUNCTION__.6193>:
  14af04:	63737973 5f6c6c61 70746567 00707267     syscall_getpgrp.

0014af14 <__FUNCTION__.6196>:
  14af14:	63737973 5f6c6c61 73746573 00006469     syscall_setsid..

0014af24 <__FUNCTION__.6203>:
  14af24:	63737973 5f6c6c61 61676973 6f697463     syscall_sigactio
  14af34:	0000006e                                n...

0014af38 <__FUNCTION__.6206>:
  14af38:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14af48:	00000000                                ....

0014af4c <__FUNCTION__.6209>:
  14af4c:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14af5c:	00000000                                ....

0014af60 <__FUNCTION__.6212>:
  14af60:	63737973 5f6c6c61 73676973 65707375     syscall_sigsuspe
  14af70:	0000646e                                nd..

0014af74 <__FUNCTION__.6215>:
  14af74:	63737973 5f6c6c61 70676973 69646e65     syscall_sigpendi
  14af84:	0000676e                                ng..

0014af88 <__FUNCTION__.6218>:
  14af88:	63737973 5f6c6c61 68746573 6e74736f     syscall_sethostn
  14af98:	00656d61                                ame.

0014af9c <__FUNCTION__.6223>:
  14af9c:	63737973 5f6c6c61 72746573 696d696c     syscall_setrlimi
  14afac:	00000074                                t...

0014afb0 <__FUNCTION__.6226>:
  14afb0:	63737973 5f6c6c61 72746567 67617375     syscall_getrusag
  14afc0:	00000065                                e...

0014afc4 <__FUNCTION__.6229>:
  14afc4:	63737973 5f6c6c61 74746567 6f656d69     syscall_gettimeo
  14afd4:	79616466 00000000                       fday....

0014afdc <__FUNCTION__.6232>:
  14afdc:	63737973 5f6c6c61 74746573 6f656d69     syscall_settimeo
  14afec:	79616466 00000000                       fday....

0014aff4 <__FUNCTION__.6235>:
  14aff4:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14b004:	00000073                                s...

0014b008 <__FUNCTION__.6238>:
  14b008:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14b018:	00000073                                s...

0014b01c <__FUNCTION__.6241>:
  14b01c:	63737973 5f6c6c61 6c6d7973 006b6e69     syscall_symlink.

0014b02c <__FUNCTION__.6247>:
  14b02c:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14b03c:	00000000                                ....

0014b040 <__FUNCTION__.6250>:
  14b040:	63737973 5f6c6c61 6c657375 00006269     syscall_uselib..

0014b050 <__FUNCTION__.6253>:
  14b050:	63737973 5f6c6c61 70617773 00006e6f     syscall_swapon..

0014b060 <__FUNCTION__.6256>:
  14b060:	63737973 5f6c6c61 6f626572 0000746f     syscall_reboot..

0014b070 <__FUNCTION__.6261>:
  14b070:	63737973 5f6c6c61 6d6e756d 00007061     syscall_munmap..

0014b080 <__FUNCTION__.6264>:
  14b080:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14b090:	00000000                                ....

0014b094 <__FUNCTION__.6267>:
  14b094:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14b0a4:	00000065                                e...

0014b0a8 <__FUNCTION__.6270>:
  14b0a8:	63737973 5f6c6c61 6d686366 0000646f     syscall_fchmod..

0014b0b8 <__FUNCTION__.6273>:
  14b0b8:	63737973 5f6c6c61 6f686366 00006e77     syscall_fchown..

0014b0c8 <__FUNCTION__.6276>:
  14b0c8:	63737973 5f6c6c61 70746567 726f6972     syscall_getprior
  14b0d8:	00797469                                ity.

0014b0dc <__FUNCTION__.6279>:
  14b0dc:	63737973 5f6c6c61 70746573 726f6972     syscall_setprior
  14b0ec:	00797469                                ity.

0014b0f0 <__FUNCTION__.6285>:
  14b0f0:	63737973 5f6c6c61 74617473 00007366     syscall_statfs..

0014b100 <__FUNCTION__.6291>:
  14b100:	63737973 5f6c6c61 61747366 00736674     syscall_fstatfs.

0014b110 <__FUNCTION__.6294>:
  14b110:	63737973 5f6c6c61 6c737973 0000676f     syscall_syslog..

0014b120 <__FUNCTION__.6297>:
  14b120:	63737973 5f6c6c61 69746573 656d6974     syscall_setitime
  14b130:	00000072                                r...

0014b134 <__FUNCTION__.6300>:
  14b134:	63737973 5f6c6c61 69746567 656d6974     syscall_getitime
  14b144:	00000072                                r...

0014b148 <__FUNCTION__.6305>:
  14b148:	63737973 5f6c6c61 74617473 00000000     syscall_stat....

0014b158 <__FUNCTION__.6310>:
  14b158:	63737973 5f6c6c61 6174736c 00000074     syscall_lstat...

0014b168 <__FUNCTION__.6315>:
  14b168:	63737973 5f6c6c61 61747366 00000074     syscall_fstat...

0014b178 <__FUNCTION__.6318>:
  14b178:	63737973 5f6c6c61 6e616876 00707567     syscall_vhangup.

0014b188 <__FUNCTION__.6321>:
  14b188:	63737973 5f6c6c61 74696177 00000034     syscall_wait4...

0014b198 <__FUNCTION__.6324>:
  14b198:	63737973 5f6c6c61 70617773 0066666f     syscall_swapoff.

0014b1a8 <__FUNCTION__.6327>:
  14b1a8:	63737973 5f6c6c61 69737973 006f666e     syscall_sysinfo.

0014b1b8 <__FUNCTION__.6331>:
  14b1b8:	63737973 5f6c6c61 6e797366 00000063     syscall_fsync...

0014b1c8 <__FUNCTION__.6334>:
  14b1c8:	63737973 5f6c6c61 72676973 72757465     syscall_sigretur
  14b1d8:	0000006e                                n...

0014b1dc <__FUNCTION__.6337>:
  14b1dc:	63737973 5f6c6c61 6e6f6c63 00000065     syscall_clone...

0014b1ec <__FUNCTION__.6340>:
  14b1ec:	63737973 5f6c6c61 64746573 69616d6f     syscall_setdomai
  14b1fc:	6d616e6e 00000065                       nname...

0014b204 <__FUNCTION__.6343>:
  14b204:	63737973 5f6c6c61 6d616e75 00000065     syscall_uname...

0014b214 <__FUNCTION__.6346>:
  14b214:	63737973 5f6c6c61 746a6461 78656d69     syscall_adjtimex
  14b224:	00000000                                ....

0014b228 <__FUNCTION__.6349>:
  14b228:	63737973 5f6c6c61 6f72706d 74636574     syscall_mprotect
  14b238:	00000000                                ....

0014b23c <__FUNCTION__.6356>:
  14b23c:	63737973 5f6c6c61 70676973 6d636f72     syscall_sigprocm
  14b24c:	006b7361                                ask.

0014b250 <__FUNCTION__.6359>:
  14b250:	63737973 5f6c6c61 74696e69 646f6d5f     syscall_init_mod
  14b260:	00656c75                                ule.

0014b264 <__FUNCTION__.6362>:
  14b264:	63737973 5f6c6c61 656c6564 6d5f6574     syscall_delete_m
  14b274:	6c75646f 00000065                       odule...

0014b27c <__FUNCTION__.6365>:
  14b27c:	63737973 5f6c6c61 746f7571 6c746361     syscall_quotactl
  14b28c:	00000000                                ....

0014b290 <__FUNCTION__.6368>:
  14b290:	63737973 5f6c6c61 70746567 00646967     syscall_getpgid.

0014b2a0 <__FUNCTION__.6371>:
  14b2a0:	63737973 5f6c6c61 64686366 00007269     syscall_fchdir..

0014b2b0 <__FUNCTION__.6374>:
  14b2b0:	63737973 5f6c6c61 6c666462 00687375     syscall_bdflush.

0014b2c0 <__FUNCTION__.6377>:
  14b2c0:	63737973 5f6c6c61 66737973 00000073     syscall_sysfs...

0014b2d0 <__FUNCTION__.6380>:
  14b2d0:	63737973 5f6c6c61 73726570 6c616e6f     syscall_personal
  14b2e0:	00797469                                ity.

0014b2e4 <__FUNCTION__.6383>:
  14b2e4:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14b2f4:	00000000                                ....

0014b2f8 <__FUNCTION__.6386>:
  14b2f8:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14b308:	00000000                                ....

0014b30c <__FUNCTION__.6394>:
  14b30c:	63737973 5f6c6c61 736c6c5f 006b6565     syscall__llseek.

0014b31c <__FUNCTION__.6400>:
  14b31c:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14b32c:	00000000                                ....

0014b330 <__FUNCTION__.6408>:
  14b330:	63737973 5f6c6c61 77656e5f 656c6573     syscall__newsele
  14b340:	00007463                                ct..

0014b344 <__FUNCTION__.6411>:
  14b344:	63737973 5f6c6c61 636f6c66 0000006b     syscall_flock...

0014b354 <__FUNCTION__.6414>:
  14b354:	63737973 5f6c6c61 6e79736d 00000063     syscall_msync...

0014b364 <__FUNCTION__.6422>:
  14b364:	63737973 5f6c6c61 64616572 00000076     syscall_readv...

0014b374 <__FUNCTION__.6434>:
  14b374:	63737973 5f6c6c61 74697277 00007665     syscall_writev..

0014b384 <__FUNCTION__.6441>:
  14b384:	63737973 5f6c6c61 73746567 00006469     syscall_getsid..

0014b394 <__FUNCTION__.6444>:
  14b394:	63737973 5f6c6c61 74616466 6e797361     syscall_fdatasyn
  14b3a4:	00000063                                c...

0014b3a8 <__FUNCTION__.6447>:
  14b3a8:	63737973 5f6c6c61 7379735f 006c7463     syscall__sysctl.

0014b3b8 <__FUNCTION__.6450>:
  14b3b8:	63737973 5f6c6c61 636f6c6d 0000006b     syscall_mlock...

0014b3c8 <__FUNCTION__.6453>:
  14b3c8:	63737973 5f6c6c61 6c6e756d 006b636f     syscall_munlock.

0014b3d8 <__FUNCTION__.6456>:
  14b3d8:	63737973 5f6c6c61 636f6c6d 6c6c616b     syscall_mlockall
  14b3e8:	00000000                                ....

0014b3ec <__FUNCTION__.6459>:
  14b3ec:	63737973 5f6c6c61 6c6e756d 616b636f     syscall_munlocka
  14b3fc:	00006c6c                                ll..

0014b400 <__FUNCTION__.6464>:
  14b400:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b410:	72617074 00006d61                       tparam..

0014b418 <__FUNCTION__.6469>:
  14b418:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b428:	72617074 00006d61                       tparam..

0014b430 <__FUNCTION__.6475>:
  14b430:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b440:	68637374 6c756465 00007265              tscheduler..

0014b44c <__FUNCTION__.6481>:
  14b44c:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b45c:	68637374 6c756465 00007265              tscheduler..

0014b468 <__FUNCTION__.6484>:
  14b468:	63737973 5f6c6c61 65686373 69795f64     syscall_sched_yi
  14b478:	00646c65                                eld.

0014b47c <__FUNCTION__.6488>:
  14b47c:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b48c:	72705f74 69726f69 6d5f7974 00007861     t_priority_max..

0014b49c <__FUNCTION__.6492>:
  14b49c:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b4ac:	72705f74 69726f69 6d5f7974 00006e69     t_priority_min..

0014b4bc <__FUNCTION__.6495>:
  14b4bc:	63737973 5f6c6c61 65686373 72725f64     syscall_sched_rr
  14b4cc:	7465675f 746e695f 61767265 0000006c     _get_interval...

0014b4dc <__FUNCTION__.6500>:
  14b4dc:	63737973 5f6c6c61 6f6e616e 65656c73     syscall_nanoslee
  14b4ec:	00000070                                p...

0014b4f0 <__FUNCTION__.6508>:
  14b4f0:	63737973 5f6c6c61 6d65726d 00007061     syscall_mremap..

0014b500 <__FUNCTION__.6511>:
  14b500:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14b510:	00000064                                d...

0014b514 <__FUNCTION__.6514>:
  14b514:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14b524:	00000064                                d...

0014b528 <__FUNCTION__.6520>:
  14b528:	63737973 5f6c6c61 6c6c6f70 00000000     syscall_poll....

0014b538 <__FUNCTION__.6523>:
  14b538:	63737973 5f6c6c61 7373666e 63767265     syscall_nfsservc
  14b548:	00006c74                                tl..

0014b54c <__FUNCTION__.6526>:
  14b54c:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14b55c:	00000064                                d...

0014b560 <__FUNCTION__.6529>:
  14b560:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14b570:	00000064                                d...

0014b574 <__FUNCTION__.6532>:
  14b574:	63737973 5f6c6c61 74637270 0000006c     syscall_prctl...

0014b584 <__FUNCTION__.6535>:
  14b584:	63737973 5f6c6c61 735f7472 65726769     syscall_rt_sigre
  14b594:	6e727574 00000000                       turn....

0014b59c <__FUNCTION__.6543>:
  14b59c:	63737973 5f6c6c61 735f7472 63616769     syscall_rt_sigac
  14b5ac:	6e6f6974 00000000                       tion....

0014b5b4 <__FUNCTION__.6551>:
  14b5b4:	63737973 5f6c6c61 735f7472 72706769     syscall_rt_sigpr
  14b5c4:	616d636f 00006b73                       ocmask..

0014b5cc <__FUNCTION__.6554>:
  14b5cc:	63737973 5f6c6c61 735f7472 65706769     syscall_rt_sigpe
  14b5dc:	6e69646e 00000067                       nding...

0014b5e4 <__FUNCTION__.6557>:
  14b5e4:	63737973 5f6c6c61 735f7472 69746769     syscall_rt_sigti
  14b5f4:	7764656d 00746961                       medwait.

0014b5fc <__FUNCTION__.6560>:
  14b5fc:	63737973 5f6c6c61 735f7472 75716769     syscall_rt_sigqu
  14b60c:	69657565 006f666e                       eueinfo.

0014b614 <__FUNCTION__.6563>:
  14b614:	63737973 5f6c6c61 735f7472 75736769     syscall_rt_sigsu
  14b624:	6e657073 00000064                       spend...

0014b62c <__FUNCTION__.6566>:
  14b62c:	63737973 5f6c6c61 61657270 00343664     syscall_pread64.

0014b63c <__FUNCTION__.6569>:
  14b63c:	63737973 5f6c6c61 69727770 34366574     syscall_pwrite64
  14b64c:	00000000                                ....

0014b650 <__FUNCTION__.6572>:
  14b650:	63737973 5f6c6c61 776f6863 0000006e     syscall_chown...

0014b660 <__FUNCTION__.6577>:
  14b660:	63737973 5f6c6c61 63746567 00006477     syscall_getcwd..

0014b670 <__FUNCTION__.6580>:
  14b670:	63737973 5f6c6c61 67706163 00007465     syscall_capget..

0014b680 <__FUNCTION__.6583>:
  14b680:	63737973 5f6c6c61 73706163 00007465     syscall_capset..

0014b690 <__FUNCTION__.6586>:
  14b690:	63737973 5f6c6c61 61676973 7473746c     syscall_sigaltst
  14b6a0:	006b6361                                ack.

0014b6a4 <__FUNCTION__.6589>:
  14b6a4:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14b6b4:	00000000                                ....

0014b6b8 <__FUNCTION__.6592>:
  14b6b8:	63737973 5f6c6c61 726f6676 0000006b     syscall_vfork...

0014b6c8 <__FUNCTION__.6597>:
  14b6c8:	63737973 5f6c6c61 74656775 6d696c72     syscall_ugetrlim
  14b6d8:	00007469                                it..

0014b6dc <__FUNCTION__.6606>:
  14b6dc:	63737973 5f6c6c61 70616d6d 00000032     syscall_mmap2...

0014b6ec <__FUNCTION__.6609>:
  14b6ec:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14b6fc:	00003436                                64..

0014b700 <__FUNCTION__.6612>:
  14b700:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14b710:	00343665                                e64.

0014b714 <__FUNCTION__.6617>:
  14b714:	63737973 5f6c6c61 74617473 00003436     syscall_stat64..

0014b724 <__FUNCTION__.6622>:
  14b724:	63737973 5f6c6c61 6174736c 00343674     syscall_lstat64.

0014b734 <__FUNCTION__.6627>:
  14b734:	63737973 5f6c6c61 61747366 00343674     syscall_fstat64.

0014b744 <__FUNCTION__.6630>:
  14b744:	63737973 5f6c6c61 6f68636c 32336e77     syscall_lchown32
  14b754:	00000000                                ....

0014b758 <__FUNCTION__.6633>:
  14b758:	63737973 5f6c6c61 75746567 32336469     syscall_getuid32
  14b768:	00000000                                ....

0014b76c <__FUNCTION__.6636>:
  14b76c:	63737973 5f6c6c61 67746567 32336469     syscall_getgid32
  14b77c:	00000000                                ....

0014b780 <__FUNCTION__.6639>:
  14b780:	63737973 5f6c6c61 65746567 33646975     syscall_geteuid3
  14b790:	00000032                                2...

0014b794 <__FUNCTION__.6642>:
  14b794:	63737973 5f6c6c61 65746567 33646967     syscall_getegid3
  14b7a4:	00000032                                2...

0014b7a8 <__FUNCTION__.6645>:
  14b7a8:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14b7b8:	00003233                                32..

0014b7bc <__FUNCTION__.6648>:
  14b7bc:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14b7cc:	00003233                                32..

0014b7d0 <__FUNCTION__.6651>:
  14b7d0:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14b7e0:	00323373                                s32.

0014b7e4 <__FUNCTION__.6654>:
  14b7e4:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14b7f4:	00323373                                s32.

0014b7f8 <__FUNCTION__.6657>:
  14b7f8:	63737973 5f6c6c61 6f686366 32336e77     syscall_fchown32
  14b808:	00000000                                ....

0014b80c <__FUNCTION__.6660>:
  14b80c:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14b81c:	00323364                                d32.

0014b820 <__FUNCTION__.6663>:
  14b820:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14b830:	00323364                                d32.

0014b834 <__FUNCTION__.6666>:
  14b834:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14b844:	00323364                                d32.

0014b848 <__FUNCTION__.6669>:
  14b848:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14b858:	00323364                                d32.

0014b85c <__FUNCTION__.6672>:
  14b85c:	63737973 5f6c6c61 776f6863 0032336e     syscall_chown32.

0014b86c <__FUNCTION__.6675>:
  14b86c:	63737973 5f6c6c61 75746573 32336469     syscall_setuid32
  14b87c:	00000000                                ....

0014b880 <__FUNCTION__.6678>:
  14b880:	63737973 5f6c6c61 67746573 32336469     syscall_setgid32
  14b890:	00000000                                ....

0014b894 <__FUNCTION__.6681>:
  14b894:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14b8a4:	00003233                                32..

0014b8a8 <__FUNCTION__.6684>:
  14b8a8:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14b8b8:	00003233                                32..

0014b8bc <__FUNCTION__.6690>:
  14b8bc:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14b8cc:	00003436                                64..

0014b8d0 <__FUNCTION__.6693>:
  14b8d0:	63737973 5f6c6c61 6f766970 6f725f74     syscall_pivot_ro
  14b8e0:	0000746f                                ot..

0014b8e4 <__FUNCTION__.6696>:
  14b8e4:	63737973 5f6c6c61 636e696d 0065726f     syscall_mincore.

0014b8f4 <__FUNCTION__.6702>:
  14b8f4:	63737973 5f6c6c61 7664616d 00657369     syscall_madvise.

0014b904 <__FUNCTION__.6708>:
  14b904:	63737973 5f6c6c61 746e6366 0034366c     syscall_fcntl64.

0014b914 <__FUNCTION__.6711>:
  14b914:	63737973 5f6c6c61 74746567 00006469     syscall_gettid..

0014b924 <__FUNCTION__.6714>:
  14b924:	63737973 5f6c6c61 64616572 61656861     syscall_readahea
  14b934:	00000064                                d...

0014b938 <__FUNCTION__.6717>:
  14b938:	63737973 5f6c6c61 78746573 72747461     syscall_setxattr
  14b948:	00000000                                ....

0014b94c <__FUNCTION__.6720>:
  14b94c:	63737973 5f6c6c61 7465736c 74746178     syscall_lsetxatt
  14b95c:	00000072                                r...

0014b960 <__FUNCTION__.6723>:
  14b960:	63737973 5f6c6c61 74657366 74746178     syscall_fsetxatt
  14b970:	00000072                                r...

0014b974 <__FUNCTION__.6726>:
  14b974:	63737973 5f6c6c61 78746567 72747461     syscall_getxattr
  14b984:	00000000                                ....

0014b988 <__FUNCTION__.6729>:
  14b988:	63737973 5f6c6c61 7465676c 74746178     syscall_lgetxatt
  14b998:	00000072                                r...

0014b99c <__FUNCTION__.6732>:
  14b99c:	63737973 5f6c6c61 74656766 74746178     syscall_fgetxatt
  14b9ac:	00000072                                r...

0014b9b0 <__FUNCTION__.6735>:
  14b9b0:	63737973 5f6c6c61 7473696c 74746178     syscall_listxatt
  14b9c0:	00000072                                r...

0014b9c4 <__FUNCTION__.6738>:
  14b9c4:	63737973 5f6c6c61 73696c6c 74617874     syscall_llistxat
  14b9d4:	00007274                                tr..

0014b9d8 <__FUNCTION__.6741>:
  14b9d8:	63737973 5f6c6c61 73696c66 74617874     syscall_flistxat
  14b9e8:	00007274                                tr..

0014b9ec <__FUNCTION__.6744>:
  14b9ec:	63737973 5f6c6c61 6f6d6572 61786576     syscall_removexa
  14b9fc:	00727474                                ttr.

0014ba00 <__FUNCTION__.6747>:
  14ba00:	63737973 5f6c6c61 6d65726c 7865766f     syscall_lremovex
  14ba10:	72747461 00000000                       attr....

0014ba18 <__FUNCTION__.6750>:
  14ba18:	63737973 5f6c6c61 6d657266 7865766f     syscall_fremovex
  14ba28:	72747461 00000000                       attr....

0014ba30 <__FUNCTION__.6755>:
  14ba30:	63737973 5f6c6c61 6c696b74 0000006c     syscall_tkill...

0014ba40 <__FUNCTION__.6758>:
  14ba40:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14ba50:	00003436                                64..

0014ba54 <__FUNCTION__.6767>:
  14ba54:	63737973 5f6c6c61 65747566 00000078     syscall_futex...

0014ba64 <__FUNCTION__.6773>:
  14ba64:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14ba74:	66666174 74696e69 00000079              taffinity...

0014ba80 <__FUNCTION__.6776>:
  14ba80:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14ba90:	66666174 74696e69 00000079              taffinity...

0014ba9c <__FUNCTION__.6779>:
  14ba9c:	63737973 5f6c6c61 735f6f69 70757465     syscall_io_setup
  14baac:	00000000                                ....

0014bab0 <__FUNCTION__.6782>:
  14bab0:	63737973 5f6c6c61 645f6f69 72747365     syscall_io_destr
  14bac0:	0000796f                                oy..

0014bac4 <__FUNCTION__.6785>:
  14bac4:	63737973 5f6c6c61 675f6f69 76657465     syscall_io_getev
  14bad4:	73746e65 00000000                       ents....

0014badc <__FUNCTION__.6788>:
  14badc:	63737973 5f6c6c61 735f6f69 696d6275     syscall_io_submi
  14baec:	00000074                                t...

0014baf0 <__FUNCTION__.6791>:
  14baf0:	63737973 5f6c6c61 635f6f69 65636e61     syscall_io_cance
  14bb00:	0000006c                                l...

0014bb04 <__FUNCTION__.6795>:
  14bb04:	63737973 5f6c6c61 74697865 6f72675f     syscall_exit_gro
  14bb14:	00007075                                up..

0014bb18 <__FUNCTION__.6798>:
  14bb18:	63737973 5f6c6c61 6b6f6f6c 645f7075     syscall_lookup_d
  14bb28:	6b6f6f63 00006569                       cookie..

0014bb30 <__FUNCTION__.6801>:
  14bb30:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14bb40:	65746165 00000000                       eate....

0014bb48 <__FUNCTION__.6804>:
  14bb48:	63737973 5f6c6c61 6c6f7065 74635f6c     syscall_epoll_ct
  14bb58:	0000006c                                l...

0014bb5c <__FUNCTION__.6807>:
  14bb5c:	63737973 5f6c6c61 6c6f7065 61775f6c     syscall_epoll_wa
  14bb6c:	00007469                                it..

0014bb70 <__FUNCTION__.6810>:
  14bb70:	63737973 5f6c6c61 616d6572 69665f70     syscall_remap_fi
  14bb80:	705f656c 73656761 00000000              le_pages....

0014bb8c <__FUNCTION__.6814>:
  14bb8c:	63737973 5f6c6c61 5f746573 5f646974     syscall_set_tid_
  14bb9c:	72646461 00737365                       address.

0014bba4 <__FUNCTION__.6817>:
  14bba4:	63737973 5f6c6c61 656d6974 72635f72     syscall_timer_cr
  14bbb4:	65746165 00000000                       eate....

0014bbbc <__FUNCTION__.6820>:
  14bbbc:	63737973 5f6c6c61 656d6974 65735f72     syscall_timer_se
  14bbcc:	6d697474 00000065                       ttime...

0014bbd4 <__FUNCTION__.6823>:
  14bbd4:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14bbe4:	6d697474 00000065                       ttime...

0014bbec <__FUNCTION__.6826>:
  14bbec:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14bbfc:	65766f74 6e757272 00000000              toverrun....

0014bc08 <__FUNCTION__.6829>:
  14bc08:	63737973 5f6c6c61 656d6974 65645f72     syscall_timer_de
  14bc18:	6574656c 00000000                       lete....

0014bc20 <__FUNCTION__.6834>:
  14bc20:	63737973 5f6c6c61 636f6c63 65735f6b     syscall_clock_se
  14bc30:	6d697474 00000065                       ttime...

0014bc38 <__FUNCTION__.6839>:
  14bc38:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14bc48:	6d697474 00000065                       ttime...

0014bc50 <__FUNCTION__.6844>:
  14bc50:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14bc60:	73657274 00000000                       tres....

0014bc68 <__FUNCTION__.6847>:
  14bc68:	63737973 5f6c6c61 636f6c63 616e5f6b     syscall_clock_na
  14bc78:	6c736f6e 00706565                       nosleep.

0014bc80 <__FUNCTION__.6853>:
  14bc80:	63737973 5f6c6c61 74617473 34367366     syscall_statfs64
  14bc90:	00000000                                ....

0014bc94 <__FUNCTION__.6859>:
  14bc94:	63737973 5f6c6c61 61747366 36736674     syscall_fstatfs6
  14bca4:	00000034                                4...

0014bca8 <__FUNCTION__.6862>:
  14bca8:	63737973 5f6c6c61 696b6774 00006c6c     syscall_tgkill..

0014bcb8 <__FUNCTION__.6865>:
  14bcb8:	63737973 5f6c6c61 6d697475 00007365     syscall_utimes..

0014bcc8 <__FUNCTION__.6868>:
  14bcc8:	63737973 5f6c6c61 5f6d7261 76646166     syscall_arm_fadv
  14bcd8:	36657369 34365f34 00000000              ise64_64....

0014bce4 <__FUNCTION__.6871>:
  14bce4:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bcf4:	6f695f67 65736162 00000000              g_iobase....

0014bd00 <__FUNCTION__.6874>:
  14bd00:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bd10:	65725f67 00006461                       g_read..

0014bd18 <__FUNCTION__.6877>:
  14bd18:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bd28:	72775f67 00657469                       g_write.

0014bd30 <__FUNCTION__.6880>:
  14bd30:	63737973 5f6c6c61 6f5f716d 006e6570     syscall_mq_open.

0014bd40 <__FUNCTION__.6883>:
  14bd40:	63737973 5f6c6c61 755f716d 6e696c6e     syscall_mq_unlin
  14bd50:	0000006b                                k...

0014bd54 <__FUNCTION__.6886>:
  14bd54:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14bd64:	646e6573 00000000                       send....

0014bd6c <__FUNCTION__.6889>:
  14bd6c:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14bd7c:	65636572 00657669                       receive.

0014bd84 <__FUNCTION__.6892>:
  14bd84:	63737973 5f6c6c61 6e5f716d 6669746f     syscall_mq_notif
  14bd94:	00000079                                y...

0014bd98 <__FUNCTION__.6895>:
  14bd98:	63737973 5f6c6c61 675f716d 65737465     syscall_mq_getse
  14bda8:	74746174 00000072                       tattr...

0014bdb0 <__FUNCTION__.6898>:
  14bdb0:	63737973 5f6c6c61 74696177 00006469     syscall_waitid..

0014bdc0 <__FUNCTION__.6904>:
  14bdc0:	63737973 5f6c6c61 6b636f73 00007465     syscall_socket..

0014bdd0 <__FUNCTION__.6910>:
  14bdd0:	63737973 5f6c6c61 646e6962 00000000     syscall_bind....

0014bde0 <__FUNCTION__.6916>:
  14bde0:	63737973 5f6c6c61 6e6e6f63 00746365     syscall_connect.

0014bdf0 <__FUNCTION__.6921>:
  14bdf0:	63737973 5f6c6c61 7473696c 00006e65     syscall_listen..

0014be00 <__FUNCTION__.6927>:
  14be00:	63737973 5f6c6c61 65636361 00007470     syscall_accept..

0014be10 <__FUNCTION__.6933>:
  14be10:	63737973 5f6c6c61 73746567 6e6b636f     syscall_getsockn
  14be20:	00656d61                                ame.

0014be24 <__FUNCTION__.6939>:
  14be24:	63737973 5f6c6c61 70746567 6e726565     syscall_getpeern
  14be34:	00656d61                                ame.

0014be38 <__FUNCTION__.6942>:
  14be38:	63737973 5f6c6c61 6b636f73 61707465     syscall_socketpa
  14be48:	00007269                                ir..

0014be4c <__FUNCTION__.6949>:
  14be4c:	63737973 5f6c6c61 646e6573 00000000     syscall_send....

0014be5c <__FUNCTION__.6958>:
  14be5c:	63737973 5f6c6c61 646e6573 00006f74     syscall_sendto..

0014be6c <__FUNCTION__.6965>:
  14be6c:	63737973 5f6c6c61 76636572 00000000     syscall_recv....

0014be7c <__FUNCTION__.6974>:
  14be7c:	63737973 5f6c6c61 76636572 6d6f7266     syscall_recvfrom
  14be8c:	00000000                                ....

0014be90 <__FUNCTION__.6977>:
  14be90:	63737973 5f6c6c61 74756873 6e776f64     syscall_shutdown
  14bea0:	00000000                                ....

0014bea4 <__FUNCTION__.6985>:
  14bea4:	63737973 5f6c6c61 73746573 6f6b636f     syscall_setsocko
  14beb4:	00007470                                pt..

0014beb8 <__FUNCTION__.6993>:
  14beb8:	63737973 5f6c6c61 73746567 6f6b636f     syscall_getsocko
  14bec8:	00007470                                pt..

0014becc <__FUNCTION__.6996>:
  14becc:	63737973 5f6c6c61 646e6573 0067736d     syscall_sendmsg.

0014bedc <__FUNCTION__.6999>:
  14bedc:	63737973 5f6c6c61 76636572 0067736d     syscall_recvmsg.

0014beec <__FUNCTION__.7002>:
  14beec:	63737973 5f6c6c61 6f6d6573 00000070     syscall_semop...

0014befc <__FUNCTION__.7005>:
  14befc:	63737973 5f6c6c61 676d6573 00007465     syscall_semget..

0014bf0c <__FUNCTION__.7008>:
  14bf0c:	63737973 5f6c6c61 636d6573 00006c74     syscall_semctl..

0014bf1c <__FUNCTION__.7011>:
  14bf1c:	63737973 5f6c6c61 7367736d 0000646e     syscall_msgsnd..

0014bf2c <__FUNCTION__.7014>:
  14bf2c:	63737973 5f6c6c61 7267736d 00007663     syscall_msgrcv..

0014bf3c <__FUNCTION__.7017>:
  14bf3c:	63737973 5f6c6c61 6767736d 00007465     syscall_msgget..

0014bf4c <__FUNCTION__.7020>:
  14bf4c:	63737973 5f6c6c61 6367736d 00006c74     syscall_msgctl..

0014bf5c <__FUNCTION__.7026>:
  14bf5c:	63737973 5f6c6c61 616d6873 00000074     syscall_shmat...

0014bf6c <__FUNCTION__.7030>:
  14bf6c:	63737973 5f6c6c61 646d6873 00000074     syscall_shmdt...

0014bf7c <__FUNCTION__.7036>:
  14bf7c:	63737973 5f6c6c61 676d6873 00007465     syscall_shmget..

0014bf8c <__FUNCTION__.7042>:
  14bf8c:	63737973 5f6c6c61 636d6873 00006c74     syscall_shmctl..

0014bf9c <__FUNCTION__.7045>:
  14bf9c:	63737973 5f6c6c61 5f646461 0079656b     syscall_add_key.

0014bfac <__FUNCTION__.7048>:
  14bfac:	63737973 5f6c6c61 75716572 5f747365     syscall_request_
  14bfbc:	0079656b                                key.

0014bfc0 <__FUNCTION__.7051>:
  14bfc0:	63737973 5f6c6c61 6379656b 00006c74     syscall_keyctl..

0014bfd0 <__FUNCTION__.7054>:
  14bfd0:	63737973 5f6c6c61 746d6573 64656d69     syscall_semtimed
  14bfe0:	0000706f                                op..

0014bfe4 <__FUNCTION__.7057>:
  14bfe4:	63737973 5f6c6c61 72657376 00726576     syscall_vserver.

0014bff4 <__FUNCTION__.7060>:
  14bff4:	63737973 5f6c6c61 72706f69 735f6f69     syscall_ioprio_s
  14c004:	00007465                                et..

0014c008 <__FUNCTION__.7063>:
  14c008:	63737973 5f6c6c61 72706f69 675f6f69     syscall_ioprio_g
  14c018:	00007465                                et..

0014c01c <__FUNCTION__.7066>:
  14c01c:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c02c:	74696e69 00000000                       init....

0014c034 <__FUNCTION__.7069>:
  14c034:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c044:	5f646461 63746177 00000068              add_watch...

0014c050 <__FUNCTION__.7072>:
  14c050:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c060:	775f6d72 68637461 00000000              rm_watch....

0014c06c <__FUNCTION__.7075>:
  14c06c:	63737973 5f6c6c61 6e69626d 00000064     syscall_mbind...

0014c07c <__FUNCTION__.7078>:
  14c07c:	63737973 5f6c6c61 5f746567 706d656d     syscall_get_memp
  14c08c:	63696c6f 00000079                       olicy...

0014c094 <__FUNCTION__.7081>:
  14c094:	63737973 5f6c6c61 5f746573 706d656d     syscall_set_memp
  14c0a4:	63696c6f 00000079                       olicy...

0014c0ac <__FUNCTION__.7084>:
  14c0ac:	63737973 5f6c6c61 6e65706f 00007461     syscall_openat..

0014c0bc <__FUNCTION__.7087>:
  14c0bc:	63737973 5f6c6c61 69646b6d 00746172     syscall_mkdirat.

0014c0cc <__FUNCTION__.7090>:
  14c0cc:	63737973 5f6c6c61 6f6e6b6d 00746164     syscall_mknodat.

0014c0dc <__FUNCTION__.7093>:
  14c0dc:	63737973 5f6c6c61 6f686366 74616e77     syscall_fchownat
  14c0ec:	00000000                                ....

0014c0f0 <__FUNCTION__.7096>:
  14c0f0:	63737973 5f6c6c61 69747566 6173656d     syscall_futimesa
  14c100:	00000074                                t...

0014c104 <__FUNCTION__.7099>:
  14c104:	63737973 5f6c6c61 61747366 36746174     syscall_fstatat6
  14c114:	00000034                                4...

0014c118 <__FUNCTION__.7102>:
  14c118:	63737973 5f6c6c61 696c6e75 74616b6e     syscall_unlinkat
  14c128:	00000000                                ....

0014c12c <__FUNCTION__.7105>:
  14c12c:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14c13c:	00000000                                ....

0014c140 <__FUNCTION__.7108>:
  14c140:	63737973 5f6c6c61 6b6e696c 00007461     syscall_linkat..

0014c150 <__FUNCTION__.7111>:
  14c150:	63737973 5f6c6c61 6c6d7973 616b6e69     syscall_symlinka
  14c160:	00000074                                t...

0014c164 <__FUNCTION__.7114>:
  14c164:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14c174:	00007461                                at..

0014c178 <__FUNCTION__.7117>:
  14c178:	63737973 5f6c6c61 6d686366 7461646f     syscall_fchmodat
  14c188:	00000000                                ....

0014c18c <__FUNCTION__.7120>:
  14c18c:	63737973 5f6c6c61 63636166 61737365     syscall_faccessa
  14c19c:	00000074                                t...

0014c1a0 <__FUNCTION__.7123>:
  14c1a0:	63737973 5f6c6c61 6c657370 36746365     syscall_pselect6
  14c1b0:	00000000                                ....

0014c1b4 <__FUNCTION__.7126>:
  14c1b4:	63737973 5f6c6c61 6c6f7070 0000006c     syscall_ppoll...

0014c1c4 <__FUNCTION__.7129>:
  14c1c4:	63737973 5f6c6c61 68736e75 00657261     syscall_unshare.

0014c1d4 <__FUNCTION__.7132>:
  14c1d4:	63737973 5f6c6c61 5f746573 75626f72     syscall_set_robu
  14c1e4:	6c5f7473 00747369                       st_list.

0014c1ec <__FUNCTION__.7135>:
  14c1ec:	63737973 5f6c6c61 5f746567 75626f72     syscall_get_robu
  14c1fc:	6c5f7473 00747369                       st_list.

0014c204 <__FUNCTION__.7138>:
  14c204:	63737973 5f6c6c61 696c7073 00006563     syscall_splice..

0014c214 <__FUNCTION__.7141>:
  14c214:	63737973 5f6c6c61 5f6d7261 636e7973     syscall_arm_sync
  14c224:	6c69665f 61725f65 0065676e              _file_range.

0014c230 <__FUNCTION__.7144>:
  14c230:	63737973 5f6c6c61 00656574              syscall_tee.

0014c23c <__FUNCTION__.7147>:
  14c23c:	63737973 5f6c6c61 70736d76 6563696c     syscall_vmsplice
  14c24c:	00000000                                ....

0014c250 <__FUNCTION__.7150>:
  14c250:	63737973 5f6c6c61 65766f6d 6761705f     syscall_move_pag
  14c260:	00007365                                es..

0014c264 <__FUNCTION__.7153>:
  14c264:	63737973 5f6c6c61 63746567 00007570     syscall_getcpu..

0014c274 <__FUNCTION__.7156>:
  14c274:	63737973 5f6c6c61 6c6f7065 77705f6c     syscall_epoll_pw
  14c284:	00746961                                ait.

0014c288 <__FUNCTION__.7159>:
  14c288:	63737973 5f6c6c61 6578656b 6f6c5f63     syscall_kexec_lo
  14c298:	00006461                                ad..

0014c29c <__FUNCTION__.7162>:
  14c29c:	63737973 5f6c6c61 6d697475 61736e65     syscall_utimensa
  14c2ac:	00000074                                t...

0014c2b0 <__FUNCTION__.7165>:
  14c2b0:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14c2c0:	00000000                                ....

0014c2c4 <__FUNCTION__.7168>:
  14c2c4:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c2d4:	61657263 00006574                       create..

0014c2dc <__FUNCTION__.7171>:
  14c2dc:	63737973 5f6c6c61 6e657665 00646674     syscall_eventfd.

0014c2ec <__FUNCTION__.7174>:
  14c2ec:	63737973 5f6c6c61 6c6c6166 7461636f     syscall_fallocat
  14c2fc:	00000065                                e...

0014c300 <__FUNCTION__.7177>:
  14c300:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c310:	74746573 00656d69                       settime.

0014c318 <__FUNCTION__.7180>:
  14c318:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c328:	74746567 00656d69                       gettime.

0014c330 <__FUNCTION__.7183>:
  14c330:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14c340:	00000034                                4...

0014c344 <__FUNCTION__.7186>:
  14c344:	63737973 5f6c6c61 6e657665 32646674     syscall_eventfd2
  14c354:	00000000                                ....

0014c358 <__FUNCTION__.7189>:
  14c358:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14c368:	65746165 00000031                       eate1...

0014c370 <__FUNCTION__.7192>:
  14c370:	63737973 5f6c6c61 33707564 00000000     syscall_dup3....

0014c380 <__FUNCTION__.7195>:
  14c380:	63737973 5f6c6c61 65706970 00000032     syscall_pipe2...

0014c390 <__FUNCTION__.7198>:
  14c390:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c3a0:	74696e69 00000031                       init1...

0014c3a8 <__FUNCTION__.7201>:
  14c3a8:	63737973 5f6c6c61 61657270 00007664     syscall_preadv..

0014c3b8 <__FUNCTION__.7204>:
  14c3b8:	63737973 5f6c6c61 69727770 00766574     syscall_pwritev.

0014c3c8 <__FUNCTION__.7207>:
  14c3c8:	63737973 5f6c6c61 745f7472 67697367     syscall_rt_tgsig
  14c3d8:	75657571 666e6965 0000006f              queueinfo...

0014c3e4 <__FUNCTION__.7210>:
  14c3e4:	63737973 5f6c6c61 66726570 6576655f     syscall_perf_eve
  14c3f4:	6f5f746e 006e6570                       nt_open.

0014c3fc <__FUNCTION__.7213>:
  14c3fc:	63737973 5f6c6c61 76636572 67736d6d     syscall_recvmmsg
  14c40c:	00000000                                ....

0014c410 <__FUNCTION__.7216>:
  14c410:	63737973 5f6c6c61 65636361 00347470     syscall_accept4.

0014c420 <__FUNCTION__.7219>:
  14c420:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14c430:	696e695f 00000074                       _init...

0014c438 <__FUNCTION__.7222>:
  14c438:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14c448:	72616d5f 0000006b                       _mark...

0014c450 <__FUNCTION__.7230>:
  14c450:	63737973 5f6c6c61 696c7270 3674696d     syscall_prlimit6
  14c460:	00000034                                4...

0014c464 <__FUNCTION__.7233>:
  14c464:	63737973 5f6c6c61 656d616e 5f6f745f     syscall_name_to_
  14c474:	646e6168 615f656c 00000074              handle_at...

0014c480 <__FUNCTION__.7236>:
  14c480:	63737973 5f6c6c61 6e65706f 5f79625f     syscall_open_by_
  14c490:	646e6168 615f656c 00000074              handle_at...

0014c49c <__FUNCTION__.7239>:
  14c49c:	63737973 5f6c6c61 636f6c63 64615f6b     syscall_clock_ad
  14c4ac:	6d69746a 00000065                       jtime...

0014c4b4 <__FUNCTION__.7242>:
  14c4b4:	63737973 5f6c6c61 636e7973 00007366     syscall_syncfs..

0014c4c4 <__FUNCTION__.7245>:
  14c4c4:	63737973 5f6c6c61 646e6573 67736d6d     syscall_sendmmsg
  14c4d4:	00000000                                ....

0014c4d8 <__FUNCTION__.7248>:
  14c4d8:	63737973 5f6c6c61 6e746573 00000073     syscall_setns...

0014c4e8 <__FUNCTION__.7251>:
  14c4e8:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14c4f8:	725f6d76 76646165 00000000              vm_readv....

0014c504 <__FUNCTION__.7254>:
  14c504:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14c514:	775f6d76 65746972 00000076              vm_writev...

0014c520 <__FUNCTION__.7257>:
  14c520:	63737973 5f6c6c61 706d636b 00000000     syscall_kcmp....

0014c530 <__FUNCTION__.7260>:
  14c530:	63737973 5f6c6c61 696e6966 6f6d5f74     syscall_finit_mo
  14c540:	656c7564 00000000                       dule....

0014c548 <__FUNCTION__.7263>:
  14c548:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14c558:	74746174 00000072                       tattr...

0014c560 <__FUNCTION__.7266>:
  14c560:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14c570:	74746174 00000072                       tattr...

0014c578 <__FUNCTION__.7269>:
  14c578:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14c588:	00000032                                2...

0014c58c <__FUNCTION__.7272>:
  14c58c:	63737973 5f6c6c61 63636573 00706d6f     syscall_seccomp.

0014c59c <__FUNCTION__.7278>:
  14c59c:	63737973 5f6c6c61 72746567 6f646e61     syscall_getrando
  14c5ac:	0000006d                                m...

0014c5b0 <__FUNCTION__.7281>:
  14c5b0:	63737973 5f6c6c61 666d656d 72635f64     syscall_memfd_cr
  14c5c0:	65746165 00000000                       eate....

0014c5c8 <__FUNCTION__.7284>:
  14c5c8:	63737973 5f6c6c61 00667062              syscall_bpf.

0014c5d4 <__FUNCTION__.7287>:
  14c5d4:	63737973 5f6c6c61 63657865 74616576     syscall_execveat
  14c5e4:	00000000                                ....

0014c5e8 <__FUNCTION__.7290>:
  14c5e8:	63737973 5f6c6c61 72657375 6c756166     syscall_userfaul
  14c5f8:	00646674                                tfd.

0014c5fc <__FUNCTION__.7293>:
  14c5fc:	63737973 5f6c6c61 626d656d 69727261     syscall_membarri
  14c60c:	00007265                                er..

0014c610 <__FUNCTION__.7296>:
  14c610:	63737973 5f6c6c61 636f6c6d 0000326b     syscall_mlock2..

0014c620 <__FUNCTION__.7299>:
  14c620:	63737973 5f6c6c61 79706f63 6c69665f     syscall_copy_fil
  14c630:	61725f65 0065676e                       e_range.

0014c638 <__FUNCTION__.7302>:
  14c638:	63737973 5f6c6c61 61657270 00327664     syscall_preadv2.

0014c648 <__FUNCTION__.7305>:
  14c648:	63737973 5f6c6c61 69727770 32766574     syscall_pwritev2
  14c658:	00000000                                ....

0014c65c <__FUNCTION__.7308>:
  14c65c:	63737973 5f6c6c61 79656b70 72706d5f     syscall_pkey_mpr
  14c66c:	6365746f 00000074                       otect...

0014c674 <__FUNCTION__.7311>:
  14c674:	63737973 5f6c6c61 79656b70 6c6c615f     syscall_pkey_all
  14c684:	0000636f                                oc..

0014c688 <__FUNCTION__.7314>:
  14c688:	63737973 5f6c6c61 79656b70 6572665f     syscall_pkey_fre
  14c698:	00000065                                e...

0014c69c <__FUNCTION__.7317>:
  14c69c:	63737973 5f6c6c61 74617473 00000078     syscall_statx...

0014c6ac <__FUNCTION__.7320>:
  14c6ac:	63737973 5f6c6c61 71657372 00000000     syscall_rseq....

0014c6bc <__FUNCTION__.7323>:
  14c6bc:	63737973 5f6c6c61 705f6f69 65746567     syscall_io_pgete
  14c6cc:	746e6576 00000073 335b1a0a 5b206d34     vents.....[34m [
  14c6dc:	64202020 7973206f 6c616373 203a5d6c        do syscall]: 
  14c6ec:	6d305b1b 00000000                       .[0m....

0014c6f4 <syscall_table>:
  14c6f4:	0013b044 0013b2a0 0013c2d8 0013bd40     D...........@...
  14c704:	0013bd08 0013bcd0 0013b278 00000000     ........x.......
  14c714:	0013b028 0013b00c 0013b250 0013bc98     (.......P.......
  14c724:	0013b228 00000000 0013aff0 0013afd4     (...............
  14c734:	0013afb8 00000000 00000000 0013c340     ............@...
  14c744:	0013c2b8 0013af9c 00000000 0013af80     ................
  14c754:	0013af64 00000000 0013af48 00000000     d.......H.......
  14c764:	00000000 0013af2c 00000000 00000000     ....,...........
  14c774:	00000000 0013b6b8 0013af10 00000000     ................
  14c784:	0013aef4 0013b688 0013b658 0013b628     ........X...(...
  14c794:	0013b200 0013b1d8 0013b1b0 0013aed8     ................
  14c7a4:	00000000 0013b188 0013aebc 0013aea0     ................
  14c7b4:	00000000 0013ae84 0013ae68 0013ae4c     ........h...L...
  14c7c4:	0013ae30 00000000 0013c2f8 0013bc60     0...........`...
  14c7d4:	00000000 0013ae14 00000000 00000000     ................
  14c7e4:	0013adf8 0013addc 0013adc0 0013b5f8     ................
  14c7f4:	0013ada4 0013ad88 0013c298 0013bf28     ............(...
	...
  14c80c:	0013ad6c 0013ad50 0013ad34 0013ad18     l...P...4.......
  14c81c:	0013acfc 0013b5c8 00000000 0013ace0     ................
  14c82c:	0013acc4 0013aca8 0013ac8c 0013ac70     ............p...
  14c83c:	00000000 0013ac54 00000000 0013bc28     ....T.......(...
  14c84c:	0013ac38 0013ac1c 0013ac00 00000000     8...............
  14c85c:	00000000 0013b598 0013abe4 0013abc8     ................
  14c86c:	0013abac 0013ab90 0013ab74 0013ab58     ........t...X...
  14c87c:	00000000 0013ab3c 0013ab20 00000000     ....<... .......
  14c88c:	00000000 0013ab04 0013aae8 0013aacc     ................
  14c89c:	0013b568 0013b538 0013aab0 00000000     h...8...........
  14c8ac:	00000000 0013aa94 00000000 00000000     ................
  14c8bc:	0013aa78 0013aa5c 0013aa40 00000000     x...\...@.......
  14c8cc:	0013b160 0013aa24 0013aa08 0013a9ec     `...$...........
  14c8dc:	0013a9d0 00000000 0013a9b4 0013a998     ................
  14c8ec:	0013bee0 00000000 0013a97c 0013a960     ........|...`...
  14c8fc:	00000000 0013a944 0013a928 0013a90c     ....D...(.......
  14c90c:	0013a8f0 0013a8d4 0013a8b8 00000000     ................
  14c91c:	0013a89c 0013a880 0013c0b0 0013bbf0     ................
  14c92c:	0013c060 0013a864 0013a848 0013bb4c     `...d...H...L...
  14c93c:	0013baa8 0013a82c 0013a810 0013a7f4     ....,...........
  14c94c:	0013a7d8 0013a7bc 0013a7a0 0013a784     ................
  14c95c:	0013b508 0013b4d8 0013ba70 0013ba38     ........p...8...
  14c96c:	0013a768 0013b138 0013b110 0013a74c     h...8.......L...
  14c97c:	0013b4a8 0013c010 0013a730 0013a714     ........0.......
	...
  14c994:	0013ba00 0013a6f8 0013a6dc 0013a6c0     ................
  14c9a4:	0013a6a4 0013a688 0013be98 0013be50     ............P...
  14c9b4:	0013a66c 0013a650 0013a634 0013a618     l...P...4.......
  14c9c4:	0013a5fc 0013a5e0 0013a5c4 0013b478     ............x...
  14c9d4:	0013a5a8 0013a58c 0013a570 0013a554     ........p...T...
	...
  14c9ec:	0013c278 0013b448 0013c208 0013a538     x...H.......8...
  14c9fc:	0013a51c 0013b418 0013b3e8 0013b3b8     ................
  14ca0c:	0013a500 0013a4e4 0013a4c8 0013a4ac     ................
  14ca1c:	0013a490 0013a474 0013a458 0013a43c     ....t...X...<...
  14ca2c:	0013a420 0013a404 0013a3e8 0013a3cc      ...............
  14ca3c:	0013a3b0 0013a394 0013a378 0013a35c     ........x...\...
  14ca4c:	0013a340 0013a324 0013a308 0013b9c8     @...$...........
  14ca5c:	0013a2ec 0013a2d0 0013b990 0013b958     ............X...
	...
  14ca74:	0013c258 0013a2b4 0013a298 0013a27c     X...........|...
  14ca84:	0013a260 0013a244 0013a228 0013a20c     `...D...(.......
  14ca94:	0013a1f0 0013a1d4 0013a1b8 0013a19c     ................
  14caa4:	0013a180 0013a164 0013b388 0013a148     ....d.......H...
  14cab4:	0013c1b4 0013b920 0013a12c 0013a110     .... ...,.......
  14cac4:	0013a0f4 0013a0d8 0013a0bc 0013a0a0     ................
  14cad4:	0013b0e8 0013a084 0013a068 0013a04c     ........h...L...
  14cae4:	0013a030 0013a014 00000000 00000000     0...............
  14caf4:	0013b0c0 00139ff8 00139fdc 00139fc0     ................
  14cb04:	00139fa4 00139f88 0013b358 0013b328     ........X...(...
  14cb14:	0013b2f8 00139f6c 00139f50 00139f34     ....l...P...4...
  14cb24:	00139f18 00139efc 00139ee0 00139ec4     ................
  14cb34:	00139ea8 00139e8c 00139e70 00139e54     ........p...T...
  14cb44:	00139e38 00139e1c 00139e00 00139de4     8...............
  14cb54:	00139dc8 0013b8e8 0013b8b0 0013b878     ............x...
  14cb64:	0013b2c8 0013b840 0013b808 0013b7d0     ....@...........
  14cb74:	00139dac 0013be08 0013c160 0013bdc0     ........`.......
  14cb84:	0013c10c 00139d90 0013bfc0 0013bf70     ............p...
  14cb94:	00139d74 00139d58 00139d3c 00139d20     t...X...<... ...
  14cba4:	00139d04 00139ce8 00139ccc 00139cb0     ................
  14cbb4:	00139c94 0013b794 0013b094 0013b758     ............X...
  14cbc4:	0013b720 00139c78 00139c5c 00139c40      ...x...\...@...
  14cbd4:	00139c24 00139c08 00139bec 00139bd0     $...............
  14cbe4:	00139bb4 00139b98 00139b7c 00139b60     ........|...`...
  14cbf4:	00139b44 00139b28 00139b0c 00139af0     D...(...........
  14cc04:	00139ad4 00139ab8 00139a9c 00139a80     ................
  14cc14:	00139a64 00139a48 00139a2c 00139a10     d...H...,.......
  14cc24:	001399f4 001399d8 001399bc 001399a0     ................
  14cc34:	00139984 00139968 0013994c 00139930     ....h...L...0...
  14cc44:	00139914 001398f8 001398dc 001398c0     ................
  14cc54:	001398a4 00139888 0013986c 00139850     ........l...P...
  14cc64:	00139834 00139818 001397fc 001397e0     4...............
  14cc74:	001397c4 001397a8 0013978c 00139770     ............p...
  14cc84:	00139754 00139738 0013971c 00139700     T...8...........
  14cc94:	001396e4 001396c8 001396ac 00139690     ................
  14cca4:	00139674 00139658 0013963c 00139620     t...X...<... ...
  14ccb4:	00139604 0013bd78 001395e8 001395cc     ....x...........
  14ccc4:	001395b0 00139594 00139578 0013955c     ........x...\...
  14ccd4:	00139540 00139524 00139508 001394ec     @...$...........
  14cce4:	001394d0 001394b4 00139498 0013947c     ............|...
  14ccf4:	0013b6e8 00139460 00139444 00139428     ....`...D...(...
  14cd04:	0013940c 001393f0 001393d4 001393b8     ................
  14cd14:	0013939c 00139380 00139364 00139348     ........d...H...
  14cd24:	0013932c 00139310 001392f4 001392d8     ,...............
  14cd34:	335b1b0a 5b206d31 74706d65 79732079     ..[31m [empty sy
  14cd44:	6c616373 203a5d6c 6d305b1b 00000000     scall]: .[0m....

0014cd54 <bin_tab>:
  14cd54:	23222120 25252424 27272626 28282828      !"#$$%%&&''((((
  14cd64:	29292929 2a2a2a2a 2b2b2b2b 2c2c2c2c     ))))****++++,,,,
  14cd74:	2c2c2c2c 2d2d2d2d 2d2d2d2d 2e2e2e2e     ,,,,--------....
  14cd84:	2e2e2e2e 2f2f2f2f 2f2f2f2f              ....////////

0014cd90 <stderr>:
  14cd90:	0014d2a8                                ....

0014cd94 <stdout>:
  14cd94:	0014d340 20202b2d 30583020 00000078     @...-+   0X0x...
  14cda4:	6c756e28 0000296c 2b58302d 30205830     (null)..-0X+0X 0
  14cdb4:	78302d58 2078302b 00007830 00666e69     X-0x+0x 0x..inf.
  14cdc4:	00464e49 006e616e 004e414e 0000002e     INF.nan.NAN.....

0014cdd4 <states>:
  14cdd4:	000a0019 00191919 05000000 00000000     ................
  14cde4:	00090000 0b000000 00000000 00000000     ................
  14cdf4:	0a110019 03191919 0100070a 180b091b     ................
  14ce04:	06090000 0b00000b 00190600 19190000     ................
  14ce14:	00000019 00000000 00000000 00000000     ................
  14ce24:	00000e00 00000000 00190000 19190d0a     ................
  14ce34:	000d0019 09000200 0000000e 000e0009     ................
  14ce44:	00000e00 00000000 00000000 00000000     ................
	...
  14ce5c:	0c000000 00000000 00000000 13000000     ................
  14ce6c:	00000000 00000013 000c0900 00000000     ................
  14ce7c:	0c00000c 00000000 00000000 00000000     ................
	...
  14ce98:	00001000 00000000 00000000 00000f00     ................
  14cea8:	000f0400 09000000 00000010 00100000     ................
  14ceb8:	00001000 00000000 00000000 00000000     ................
	...
  14ced0:	12000000 00000000 00000000 11000000     ................
  14cee0:	00000000 00000011 00120900 00000000     ................
  14cef0:	12000012 001a0000 1a1a0000 0000001a     ................
	...
  14cf14:	001a0000 1a1a0000 0000001a 09000000     ................
	...
  14cf44:	14000000 00000000 00000000 17000000     ................
  14cf54:	00000000 00000017 00140900 00000000     ................
  14cf64:	14000014 00000000 00000000 00000000     ................
	...
  14cf80:	00001600 00000000 00000000 00001500     ................
  14cf90:	00150000 09000000 00000016 00160000     ................
  14cfa0:	00001600                                ....

0014cfa4 <xdigits>:
  14cfa4:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0014cfb4 <all_mask>:
  14cfb4:	ffffffff ffffffff                       ........

0014cfbc <app_mask>:
  14cfbc:	7fffffff fffffffc                       ........

0014cfc4 <__EH_FRAME_BEGIN__>:
  14cfc4:	00000000                                ....
