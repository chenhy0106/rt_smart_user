
root/bin/lwIPKit.elf:     file format elf32-littlearm


Disassembly of section .text:

00100000 <_start>:
  100000:	e1a0d003 	mov	sp, r3
  100004:	ebffffff 	bl	100008 <_start_c>

00100008 <_start_c>:
  100008:	e3a0c000 	mov	ip, #0
  10000c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  100010:	e59f3018 	ldr	r3, [pc, #24]	; 100030 <_start_c+0x28>
  100014:	e24dd00c 	sub	sp, sp, #12
  100018:	e5901000 	ldr	r1, [r0]
  10001c:	e2802004 	add	r2, r0, #4
  100020:	e88d1008 	stm	sp, {r3, ip}
  100024:	e59f0008 	ldr	r0, [pc, #8]	; 100034 <_start_c+0x2c>
  100028:	e59f3008 	ldr	r3, [pc, #8]	; 100038 <_start_c+0x30>
  10002c:	eb00e38c 	bl	138e64 <__libc_start_main>
  100030:	00145340 	.word	0x00145340
  100034:	00103c5c 	.word	0x00103c5c
  100038:	00145334 	.word	0x00145334

0010003c <deregister_tm_clones>:
  10003c:	e59f0018 	ldr	r0, [pc, #24]	; 10005c <deregister_tm_clones+0x20>
  100040:	e59f3018 	ldr	r3, [pc, #24]	; 100060 <deregister_tm_clones+0x24>
  100044:	e1530000 	cmp	r3, r0
  100048:	012fff1e 	bxeq	lr
  10004c:	e59f3010 	ldr	r3, [pc, #16]	; 100064 <deregister_tm_clones+0x28>
  100050:	e3530000 	cmp	r3, #0
  100054:	012fff1e 	bxeq	lr
  100058:	e12fff13 	bx	r3
  10005c:	0014d3f0 	.word	0x0014d3f0
  100060:	0014d3f0 	.word	0x0014d3f0
  100064:	00000000 	.word	0x00000000

00100068 <register_tm_clones>:
  100068:	e59f0024 	ldr	r0, [pc, #36]	; 100094 <register_tm_clones+0x2c>
  10006c:	e59f1024 	ldr	r1, [pc, #36]	; 100098 <register_tm_clones+0x30>
  100070:	e0411000 	sub	r1, r1, r0
  100074:	e1a01141 	asr	r1, r1, #2
  100078:	e0811fa1 	add	r1, r1, r1, lsr #31
  10007c:	e1b010c1 	asrs	r1, r1, #1
  100080:	012fff1e 	bxeq	lr
  100084:	e59f3010 	ldr	r3, [pc, #16]	; 10009c <register_tm_clones+0x34>
  100088:	e3530000 	cmp	r3, #0
  10008c:	012fff1e 	bxeq	lr
  100090:	e12fff13 	bx	r3
  100094:	0014d3f0 	.word	0x0014d3f0
  100098:	0014d3f0 	.word	0x0014d3f0
  10009c:	00000000 	.word	0x00000000

001000a0 <__do_global_dtors_aux>:
  1000a0:	e92d4010 	push	{r4, lr}
  1000a4:	e59f402c 	ldr	r4, [pc, #44]	; 1000d8 <__do_global_dtors_aux+0x38>
  1000a8:	e5d43000 	ldrb	r3, [r4]
  1000ac:	e3530000 	cmp	r3, #0
  1000b0:	18bd8010 	popne	{r4, pc}
  1000b4:	ebffffe0 	bl	10003c <deregister_tm_clones>
  1000b8:	e59f301c 	ldr	r3, [pc, #28]	; 1000dc <__do_global_dtors_aux+0x3c>
  1000bc:	e3530000 	cmp	r3, #0
  1000c0:	0a000001 	beq	1000cc <__do_global_dtors_aux+0x2c>
  1000c4:	e59f0014 	ldr	r0, [pc, #20]	; 1000e0 <__do_global_dtors_aux+0x40>
  1000c8:	e320f000 	nop	{0}
  1000cc:	e3a03001 	mov	r3, #1
  1000d0:	e5c43000 	strb	r3, [r4]
  1000d4:	e8bd8010 	pop	{r4, pc}
  1000d8:	0014d3f0 	.word	0x0014d3f0
  1000dc:	00000000 	.word	0x00000000
  1000e0:	0014cf84 	.word	0x0014cf84

001000e4 <frame_dummy>:
  1000e4:	e59f3020 	ldr	r3, [pc, #32]	; 10010c <frame_dummy+0x28>
  1000e8:	e3530000 	cmp	r3, #0
  1000ec:	0a000005 	beq	100108 <frame_dummy+0x24>
  1000f0:	e92d4010 	push	{r4, lr}
  1000f4:	e59f1014 	ldr	r1, [pc, #20]	; 100110 <frame_dummy+0x2c>
  1000f8:	e59f0014 	ldr	r0, [pc, #20]	; 100114 <frame_dummy+0x30>
  1000fc:	e320f000 	nop	{0}
  100100:	e8bd4010 	pop	{r4, lr}
  100104:	eaffffd7 	b	100068 <register_tm_clones>
  100108:	eaffffd6 	b	100068 <register_tm_clones>
  10010c:	00000000 	.word	0x00000000
  100110:	0014d3f4 	.word	0x0014d3f4
  100114:	0014cf84 	.word	0x0014cf84

00100118 <rt_channel_open>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

int rt_channel_open(const char *name, int flags)
{
  100118:	e92d4800 	push	{fp, lr}
  10011c:	e28db004 	add	fp, sp, #4
  100120:	e24dd008 	sub	sp, sp, #8
  100124:	e50b0008 	str	r0, [fp, #-8]
  100128:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_open, name, flags);
  10012c:	e51b200c 	ldr	r2, [fp, #-12]
  100130:	e51b1008 	ldr	r1, [fp, #-8]
  100134:	e3a0002c 	mov	r0, #44	; 0x2c
  100138:	eb00f0b9 	bl	13c424 <syscall>
  10013c:	e1a03000 	mov	r3, r0
}
  100140:	e1a00003 	mov	r0, r3
  100144:	e24bd004 	sub	sp, fp, #4
  100148:	e8bd8800 	pop	{fp, pc}

0010014c <rt_channel_close>:

rt_err_t rt_channel_close(int fd)
{
  10014c:	e92d4800 	push	{fp, lr}
  100150:	e28db004 	add	fp, sp, #4
  100154:	e24dd008 	sub	sp, sp, #8
  100158:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_channel_close, fd);
  10015c:	e51b1008 	ldr	r1, [fp, #-8]
  100160:	e3a0002d 	mov	r0, #45	; 0x2d
  100164:	eb00f0ae 	bl	13c424 <syscall>
  100168:	e1a03000 	mov	r3, r0
}
  10016c:	e1a00003 	mov	r0, r3
  100170:	e24bd004 	sub	sp, fp, #4
  100174:	e8bd8800 	pop	{fp, pc}

00100178 <rt_channel_send_recv>:

rt_err_t rt_channel_send_recv(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret)
{
  100178:	e92d4800 	push	{fp, lr}
  10017c:	e28db004 	add	fp, sp, #4
  100180:	e24dd018 	sub	sp, sp, #24
  100184:	e50b0008 	str	r0, [fp, #-8]
  100188:	e50b100c 	str	r1, [fp, #-12]
  10018c:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, RT_WAITING_FOREVER);
  100190:	e3e03000 	mvn	r3, #0
  100194:	e58d3000 	str	r3, [sp]
  100198:	e51b3010 	ldr	r3, [fp, #-16]
  10019c:	e51b200c 	ldr	r2, [fp, #-12]
  1001a0:	e51b1008 	ldr	r1, [fp, #-8]
  1001a4:	e3a0002f 	mov	r0, #47	; 0x2f
  1001a8:	eb00f09d 	bl	13c424 <syscall>
  1001ac:	e1a03000 	mov	r3, r0
}
  1001b0:	e1a00003 	mov	r0, r3
  1001b4:	e24bd004 	sub	sp, fp, #4
  1001b8:	e8bd8800 	pop	{fp, pc}

001001bc <rt_channel_send_recv_timeout>:

rt_err_t rt_channel_send_recv_timeout(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret, rt_int32_t time)
{
  1001bc:	e92d4800 	push	{fp, lr}
  1001c0:	e28db004 	add	fp, sp, #4
  1001c4:	e24dd018 	sub	sp, sp, #24
  1001c8:	e50b0008 	str	r0, [fp, #-8]
  1001cc:	e50b100c 	str	r1, [fp, #-12]
  1001d0:	e50b2010 	str	r2, [fp, #-16]
  1001d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, time);
  1001d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1001dc:	e58d3000 	str	r3, [sp]
  1001e0:	e51b3010 	ldr	r3, [fp, #-16]
  1001e4:	e51b200c 	ldr	r2, [fp, #-12]
  1001e8:	e51b1008 	ldr	r1, [fp, #-8]
  1001ec:	e3a0002f 	mov	r0, #47	; 0x2f
  1001f0:	eb00f08b 	bl	13c424 <syscall>
  1001f4:	e1a03000 	mov	r3, r0
}
  1001f8:	e1a00003 	mov	r0, r3
  1001fc:	e24bd004 	sub	sp, fp, #4
  100200:	e8bd8800 	pop	{fp, pc}

00100204 <rt_channel_send>:

rt_err_t rt_channel_send(int fd, rt_channel_msg_t data)
{
  100204:	e92d4800 	push	{fp, lr}
  100208:	e28db004 	add	fp, sp, #4
  10020c:	e24dd008 	sub	sp, sp, #8
  100210:	e50b0008 	str	r0, [fp, #-8]
  100214:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_send, fd, data);
  100218:	e51b200c 	ldr	r2, [fp, #-12]
  10021c:	e51b1008 	ldr	r1, [fp, #-8]
  100220:	e3a0002e 	mov	r0, #46	; 0x2e
  100224:	eb00f07e 	bl	13c424 <syscall>
  100228:	e1a03000 	mov	r3, r0
}
  10022c:	e1a00003 	mov	r0, r3
  100230:	e24bd004 	sub	sp, fp, #4
  100234:	e8bd8800 	pop	{fp, pc}

00100238 <rt_channel_reply>:

rt_err_t rt_channel_reply(int fd, rt_channel_msg_t data)
{
  100238:	e92d4800 	push	{fp, lr}
  10023c:	e28db004 	add	fp, sp, #4
  100240:	e24dd008 	sub	sp, sp, #8
  100244:	e50b0008 	str	r0, [fp, #-8]
  100248:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_reply, fd, data);
  10024c:	e51b200c 	ldr	r2, [fp, #-12]
  100250:	e51b1008 	ldr	r1, [fp, #-8]
  100254:	e3a00030 	mov	r0, #48	; 0x30
  100258:	eb00f071 	bl	13c424 <syscall>
  10025c:	e1a03000 	mov	r3, r0
}
  100260:	e1a00003 	mov	r0, r3
  100264:	e24bd004 	sub	sp, fp, #4
  100268:	e8bd8800 	pop	{fp, pc}

0010026c <rt_channel_recv>:

rt_err_t rt_channel_recv(int fd, rt_channel_msg_t data)
{
  10026c:	e92d4800 	push	{fp, lr}
  100270:	e28db004 	add	fp, sp, #4
  100274:	e24dd008 	sub	sp, sp, #8
  100278:	e50b0008 	str	r0, [fp, #-8]
  10027c:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, RT_WAITING_FOREVER);
  100280:	e3e03000 	mvn	r3, #0
  100284:	e51b200c 	ldr	r2, [fp, #-12]
  100288:	e51b1008 	ldr	r1, [fp, #-8]
  10028c:	e3a00031 	mov	r0, #49	; 0x31
  100290:	eb00f063 	bl	13c424 <syscall>
  100294:	e1a03000 	mov	r3, r0
}
  100298:	e1a00003 	mov	r0, r3
  10029c:	e24bd004 	sub	sp, fp, #4
  1002a0:	e8bd8800 	pop	{fp, pc}

001002a4 <rt_channel_recv_timeout>:

rt_err_t rt_channel_recv_timeout(int fd, rt_channel_msg_t data, rt_int32_t time)
{
  1002a4:	e92d4800 	push	{fp, lr}
  1002a8:	e28db004 	add	fp, sp, #4
  1002ac:	e24dd010 	sub	sp, sp, #16
  1002b0:	e50b0008 	str	r0, [fp, #-8]
  1002b4:	e50b100c 	str	r1, [fp, #-12]
  1002b8:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, time);
  1002bc:	e51b3010 	ldr	r3, [fp, #-16]
  1002c0:	e51b200c 	ldr	r2, [fp, #-12]
  1002c4:	e51b1008 	ldr	r1, [fp, #-8]
  1002c8:	e3a00031 	mov	r0, #49	; 0x31
  1002cc:	eb00f054 	bl	13c424 <syscall>
  1002d0:	e1a03000 	mov	r3, r0
}
  1002d4:	e1a00003 	mov	r0, r3
  1002d8:	e24bd004 	sub	sp, fp, #4
  1002dc:	e8bd8800 	pop	{fp, pc}

001002e0 <rt_channel_peek>:

rt_err_t rt_channel_peek(int fd, rt_channel_msg_t data)
{
  1002e0:	e92d4800 	push	{fp, lr}
  1002e4:	e28db004 	add	fp, sp, #4
  1002e8:	e24dd008 	sub	sp, sp, #8
  1002ec:	e50b0008 	str	r0, [fp, #-8]
  1002f0:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, 0);
  1002f4:	e3a03000 	mov	r3, #0
  1002f8:	e51b200c 	ldr	r2, [fp, #-12]
  1002fc:	e51b1008 	ldr	r1, [fp, #-8]
  100300:	e3a00031 	mov	r0, #49	; 0x31
  100304:	eb00f046 	bl	13c424 <syscall>
  100308:	e1a03000 	mov	r3, r0
}
  10030c:	e1a00003 	mov	r0, r3
  100310:	e24bd004 	sub	sp, fp, #4
  100314:	e8bd8800 	pop	{fp, pc}

00100318 <rt_completion_init>:
 * 2019-10-01     Bernard      code cleanup
 */
#include <rtdevice.h>

void rt_completion_init(struct rt_completion *completion)
{
  100318:	e92d4800 	push	{fp, lr}
  10031c:	e28db004 	add	fp, sp, #4
  100320:	e24dd008 	sub	sp, sp, #8
  100324:	e50b0008 	str	r0, [fp, #-8]
    if (completion && completion->flag == 0)
  100328:	e51b3008 	ldr	r3, [fp, #-8]
  10032c:	e3530000 	cmp	r3, #0
  100330:	0a00000d 	beq	10036c <rt_completion_init+0x54>
  100334:	e51b3008 	ldr	r3, [fp, #-8]
  100338:	e5933000 	ldr	r3, [r3]
  10033c:	e3530000 	cmp	r3, #0
  100340:	1a000009 	bne	10036c <rt_completion_init+0x54>
    {
        completion->flag = 0x5A5A;
  100344:	e51b3008 	ldr	r3, [fp, #-8]
  100348:	e3052a5a 	movw	r2, #23130	; 0x5a5a
  10034c:	e5832000 	str	r2, [r3]
        completion->wait_event = rt_event_create("completion", RT_IPC_FLAG_FIFO);
  100350:	e3a01000 	mov	r1, #0
  100354:	e305034c 	movw	r0, #21324	; 0x534c
  100358:	e3400014 	movt	r0, #20
  10035c:	eb0005e5 	bl	101af8 <rt_event_create>
  100360:	e1a02000 	mov	r2, r0
  100364:	e51b3008 	ldr	r3, [fp, #-8]
  100368:	e5832004 	str	r2, [r3, #4]
    }
}
  10036c:	e320f000 	nop	{0}
  100370:	e24bd004 	sub	sp, fp, #4
  100374:	e8bd8800 	pop	{fp, pc}

00100378 <rt_completion_wait>:

rt_err_t rt_completion_wait(struct rt_completion *completion,
    rt_int32_t timeout)
{
  100378:	e92d4800 	push	{fp, lr}
  10037c:	e28db004 	add	fp, sp, #4
  100380:	e24dd018 	sub	sp, sp, #24
  100384:	e50b0010 	str	r0, [fp, #-16]
  100388:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_err_t ret;
    rt_uint32_t recv = 0;
  10038c:	e3a03000 	mov	r3, #0
  100390:	e50b300c 	str	r3, [fp, #-12]

    ret = rt_event_recv(completion->wait_event, 0x01, RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, timeout, &recv);
  100394:	e51b3010 	ldr	r3, [fp, #-16]
  100398:	e5930004 	ldr	r0, [r3, #4]
  10039c:	e24b300c 	sub	r3, fp, #12
  1003a0:	e58d3000 	str	r3, [sp]
  1003a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1003a8:	e3a02006 	mov	r2, #6
  1003ac:	e3a01001 	mov	r1, #1
  1003b0:	eb000684 	bl	101dc8 <rt_event_recv>
  1003b4:	e50b0008 	str	r0, [fp, #-8]

    return ret;
  1003b8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1003bc:	e1a00003 	mov	r0, r3
  1003c0:	e24bd004 	sub	sp, fp, #4
  1003c4:	e8bd8800 	pop	{fp, pc}

001003c8 <rt_completion_done>:

void rt_completion_done(struct rt_completion *completion)
{
  1003c8:	e92d4800 	push	{fp, lr}
  1003cc:	e28db004 	add	fp, sp, #4
  1003d0:	e24dd008 	sub	sp, sp, #8
  1003d4:	e50b0008 	str	r0, [fp, #-8]
    rt_event_send(completion->wait_event, 0x01);
  1003d8:	e51b3008 	ldr	r3, [fp, #-8]
  1003dc:	e5933004 	ldr	r3, [r3, #4]
  1003e0:	e3a01001 	mov	r1, #1
  1003e4:	e1a00003 	mov	r0, r3
  1003e8:	eb000658 	bl	101d50 <rt_event_send>
}
  1003ec:	e320f000 	nop	{0}
  1003f0:	e24bd004 	sub	sp, fp, #4
  1003f4:	e8bd8800 	pop	{fp, pc}

001003f8 <rt_device_init>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

rt_err_t rt_device_init(rt_device_t dev)
{
  1003f8:	e92d4800 	push	{fp, lr}
  1003fc:	e28db004 	add	fp, sp, #4
  100400:	e24dd008 	sub	sp, sp, #8
  100404:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_init, dev);
  100408:	e51b1008 	ldr	r1, [fp, #-8]
  10040c:	e3a0003b 	mov	r0, #59	; 0x3b
  100410:	eb00f003 	bl	13c424 <syscall>
  100414:	e1a03000 	mov	r3, r0
}
  100418:	e1a00003 	mov	r0, r3
  10041c:	e24bd004 	sub	sp, fp, #4
  100420:	e8bd8800 	pop	{fp, pc}

00100424 <rt_device_register>:

rt_err_t rt_device_register(rt_device_t dev,
        const char *name,
        rt_uint16_t flags)
{
  100424:	e92d4800 	push	{fp, lr}
  100428:	e28db004 	add	fp, sp, #4
  10042c:	e24dd010 	sub	sp, sp, #16
  100430:	e50b0008 	str	r0, [fp, #-8]
  100434:	e50b100c 	str	r1, [fp, #-12]
  100438:	e1a03002 	mov	r3, r2
  10043c:	e14b30be 	strh	r3, [fp, #-14]
    return syscall(_NRSYS_rt_device_register, dev, name, flags);
  100440:	e15b30be 	ldrh	r3, [fp, #-14]
  100444:	e51b200c 	ldr	r2, [fp, #-12]
  100448:	e51b1008 	ldr	r1, [fp, #-8]
  10044c:	e3a0003c 	mov	r0, #60	; 0x3c
  100450:	eb00eff3 	bl	13c424 <syscall>
  100454:	e1a03000 	mov	r3, r0
}
  100458:	e1a00003 	mov	r0, r3
  10045c:	e24bd004 	sub	sp, fp, #4
  100460:	e8bd8800 	pop	{fp, pc}

00100464 <rt_device_control>:

rt_err_t rt_device_control(rt_device_t dev, int cmd, void *arg)
{
  100464:	e92d4800 	push	{fp, lr}
  100468:	e28db004 	add	fp, sp, #4
  10046c:	e24dd010 	sub	sp, sp, #16
  100470:	e50b0008 	str	r0, [fp, #-8]
  100474:	e50b100c 	str	r1, [fp, #-12]
  100478:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_rt_device_control, dev, cmd, arg);
  10047c:	e51b3010 	ldr	r3, [fp, #-16]
  100480:	e51b200c 	ldr	r2, [fp, #-12]
  100484:	e51b1008 	ldr	r1, [fp, #-8]
  100488:	e3a0003d 	mov	r0, #61	; 0x3d
  10048c:	eb00efe4 	bl	13c424 <syscall>
  100490:	e1a03000 	mov	r3, r0
}
  100494:	e1a00003 	mov	r0, r3
  100498:	e24bd004 	sub	sp, fp, #4
  10049c:	e8bd8800 	pop	{fp, pc}

001004a0 <rt_device_find>:

rt_device_t rt_device_find(const char *name)
{
  1004a0:	e92d4800 	push	{fp, lr}
  1004a4:	e28db004 	add	fp, sp, #4
  1004a8:	e24dd008 	sub	sp, sp, #8
  1004ac:	e50b0008 	str	r0, [fp, #-8]
    return (rt_device_t)syscall(_NRSYS_rt_device_find, name);
  1004b0:	e51b1008 	ldr	r1, [fp, #-8]
  1004b4:	e3a0003e 	mov	r0, #62	; 0x3e
  1004b8:	eb00efd9 	bl	13c424 <syscall>
  1004bc:	e1a03000 	mov	r3, r0
}
  1004c0:	e1a00003 	mov	r0, r3
  1004c4:	e24bd004 	sub	sp, fp, #4
  1004c8:	e8bd8800 	pop	{fp, pc}

001004cc <rt_device_open>:

rt_err_t rt_device_open(rt_device_t dev, rt_uint16_t oflag)
{
  1004cc:	e92d4800 	push	{fp, lr}
  1004d0:	e28db004 	add	fp, sp, #4
  1004d4:	e24dd008 	sub	sp, sp, #8
  1004d8:	e50b0008 	str	r0, [fp, #-8]
  1004dc:	e1a03001 	mov	r3, r1
  1004e0:	e14b30ba 	strh	r3, [fp, #-10]
    return syscall(_NRSYS_rt_device_open, dev, oflag);
  1004e4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1004e8:	e1a02003 	mov	r2, r3
  1004ec:	e51b1008 	ldr	r1, [fp, #-8]
  1004f0:	e3a0003f 	mov	r0, #63	; 0x3f
  1004f4:	eb00efca 	bl	13c424 <syscall>
  1004f8:	e1a03000 	mov	r3, r0
}
  1004fc:	e1a00003 	mov	r0, r3
  100500:	e24bd004 	sub	sp, fp, #4
  100504:	e8bd8800 	pop	{fp, pc}

00100508 <rt_device_close>:

rt_err_t rt_device_close(rt_device_t dev)
{
  100508:	e92d4800 	push	{fp, lr}
  10050c:	e28db004 	add	fp, sp, #4
  100510:	e24dd008 	sub	sp, sp, #8
  100514:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_close, dev);
  100518:	e51b1008 	ldr	r1, [fp, #-8]
  10051c:	e3a00040 	mov	r0, #64	; 0x40
  100520:	eb00efbf 	bl	13c424 <syscall>
  100524:	e1a03000 	mov	r3, r0
}
  100528:	e1a00003 	mov	r0, r3
  10052c:	e24bd004 	sub	sp, fp, #4
  100530:	e8bd8800 	pop	{fp, pc}

00100534 <rt_device_read>:

rt_size_t rt_device_read(rt_device_t dev,
        rt_off_t    pos,
        void       *buffer,
        rt_size_t   size)
{
  100534:	e92d4800 	push	{fp, lr}
  100538:	e28db004 	add	fp, sp, #4
  10053c:	e24dd018 	sub	sp, sp, #24
  100540:	e50b0008 	str	r0, [fp, #-8]
  100544:	e50b100c 	str	r1, [fp, #-12]
  100548:	e50b2010 	str	r2, [fp, #-16]
  10054c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_read, dev, pos, buffer, size);
  100550:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100554:	e58d3000 	str	r3, [sp]
  100558:	e51b3010 	ldr	r3, [fp, #-16]
  10055c:	e51b200c 	ldr	r2, [fp, #-12]
  100560:	e51b1008 	ldr	r1, [fp, #-8]
  100564:	e3a00041 	mov	r0, #65	; 0x41
  100568:	eb00efad 	bl	13c424 <syscall>
  10056c:	e1a03000 	mov	r3, r0
}
  100570:	e1a00003 	mov	r0, r3
  100574:	e24bd004 	sub	sp, fp, #4
  100578:	e8bd8800 	pop	{fp, pc}

0010057c <rt_device_write>:

rt_size_t rt_device_write(rt_device_t dev,
        rt_off_t    pos,
        const void *buffer,
        rt_size_t   size)
{
  10057c:	e92d4800 	push	{fp, lr}
  100580:	e28db004 	add	fp, sp, #4
  100584:	e24dd018 	sub	sp, sp, #24
  100588:	e50b0008 	str	r0, [fp, #-8]
  10058c:	e50b100c 	str	r1, [fp, #-12]
  100590:	e50b2010 	str	r2, [fp, #-16]
  100594:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_write, dev, pos, buffer, size);;
  100598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10059c:	e58d3000 	str	r3, [sp]
  1005a0:	e51b3010 	ldr	r3, [fp, #-16]
  1005a4:	e51b200c 	ldr	r2, [fp, #-12]
  1005a8:	e51b1008 	ldr	r1, [fp, #-8]
  1005ac:	e3a00042 	mov	r0, #66	; 0x42
  1005b0:	eb00ef9b 	bl	13c424 <syscall>
  1005b4:	e1a03000 	mov	r3, r0
}
  1005b8:	e1a00003 	mov	r0, r3
  1005bc:	e24bd004 	sub	sp, fp, #4
  1005c0:	e8bd8800 	pop	{fp, pc}

001005c4 <closesocket>:
#include <netinet/in.h>
#include <fcntl.h>
#include <time.h>

int closesocket(int s)
{
  1005c4:	e92d4800 	push	{fp, lr}
  1005c8:	e28db004 	add	fp, sp, #4
  1005cc:	e24dd008 	sub	sp, sp, #8
  1005d0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_closesocket, s);
  1005d4:	e51b1008 	ldr	r1, [fp, #-8]
  1005d8:	e3a00053 	mov	r0, #83	; 0x53
  1005dc:	eb00ef90 	bl	13c424 <syscall>
  1005e0:	e1a03000 	mov	r3, r0
}
  1005e4:	e1a00003 	mov	r0, r3
  1005e8:	e24bd004 	sub	sp, fp, #4
  1005ec:	e8bd8800 	pop	{fp, pc}

001005f0 <getaddrinfo>:

int getaddrinfo(const char *restrict host, const char *restrict serv, const struct addrinfo *restrict hint, struct addrinfo **restrict res)
{
  1005f0:	e92d4800 	push	{fp, lr}
  1005f4:	e28db004 	add	fp, sp, #4
  1005f8:	e24dd020 	sub	sp, sp, #32
  1005fc:	e50b0010 	str	r0, [fp, #-16]
  100600:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100604:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100608:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct addrinfo *ret = NULL;
  10060c:	e3a03000 	mov	r3, #0
  100610:	e50b3008 	str	r3, [fp, #-8]

    ret = (struct addrinfo *) malloc(sizeof(struct addrinfo) + sizeof(struct sockaddr));
  100614:	e3a00030 	mov	r0, #48	; 0x30
  100618:	eb00f33e 	bl	13d318 <malloc>
  10061c:	e1a03000 	mov	r3, r0
  100620:	e50b3008 	str	r3, [fp, #-8]
    if (ret)
  100624:	e51b3008 	ldr	r3, [fp, #-8]
  100628:	e3530000 	cmp	r3, #0
  10062c:	0a000011 	beq	100678 <getaddrinfo+0x88>
    {
        ret->ai_addr = (struct sockaddr *)(ret + 1);
  100630:	e51b3008 	ldr	r3, [fp, #-8]
  100634:	e2832020 	add	r2, r3, #32
  100638:	e51b3008 	ldr	r3, [fp, #-8]
  10063c:	e5832014 	str	r2, [r3, #20]

        /* invoke syscall */
        int result = syscall(_NRSYS_getaddrinfo, host, serv, hint, ret);
  100640:	e51b3008 	ldr	r3, [fp, #-8]
  100644:	e58d3000 	str	r3, [sp]
  100648:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10064c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  100650:	e51b1010 	ldr	r1, [fp, #-16]
  100654:	e3a00054 	mov	r0, #84	; 0x54
  100658:	eb00ef71 	bl	13c424 <syscall>
  10065c:	e50b000c 	str	r0, [fp, #-12]
        if (result == 0)
  100660:	e51b300c 	ldr	r3, [fp, #-12]
  100664:	e3530000 	cmp	r3, #0
  100668:	1a000002 	bne	100678 <getaddrinfo+0x88>
        {
            *res = ret;
  10066c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100670:	e51b2008 	ldr	r2, [fp, #-8]
  100674:	e5832000 	str	r2, [r3]
        }
    }

    return 0;
  100678:	e3a03000 	mov	r3, #0
}
  10067c:	e1a00003 	mov	r0, r3
  100680:	e24bd004 	sub	sp, fp, #4
  100684:	e8bd8800 	pop	{fp, pc}

00100688 <freeaddrinfo>:

void freeaddrinfo(struct addrinfo *p)
{
  100688:	e92d4800 	push	{fp, lr}
  10068c:	e28db004 	add	fp, sp, #4
  100690:	e24dd008 	sub	sp, sp, #8
  100694:	e50b0008 	str	r0, [fp, #-8]
    /* p->ai_canonname, p->ai_next should be NULL. */
    free(p);
  100698:	e51b0008 	ldr	r0, [fp, #-8]
  10069c:	eb00f4d9 	bl	13da08 <free>
}
  1006a0:	e320f000 	nop	{0}
  1006a4:	e24bd004 	sub	sp, fp, #4
  1006a8:	e8bd8800 	pop	{fp, pc}

001006ac <gethostbyname2_r>:

int gethostbyname2_r(const char *name, int af, struct hostent *ret,
                    char *buf, size_t buflen,
                    struct hostent **result, int *err)
{
  1006ac:	e92d4800 	push	{fp, lr}
  1006b0:	e28db004 	add	fp, sp, #4
  1006b4:	e24dd020 	sub	sp, sp, #32
  1006b8:	e50b0008 	str	r0, [fp, #-8]
  1006bc:	e50b100c 	str	r1, [fp, #-12]
  1006c0:	e50b2010 	str	r2, [fp, #-16]
  1006c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_gethostbyname2_r, name, af, ret, buf, buflen, result, err);
  1006c8:	e59b300c 	ldr	r3, [fp, #12]
  1006cc:	e58d300c 	str	r3, [sp, #12]
  1006d0:	e59b3008 	ldr	r3, [fp, #8]
  1006d4:	e58d3008 	str	r3, [sp, #8]
  1006d8:	e59b3004 	ldr	r3, [fp, #4]
  1006dc:	e58d3004 	str	r3, [sp, #4]
  1006e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1006e4:	e58d3000 	str	r3, [sp]
  1006e8:	e51b3010 	ldr	r3, [fp, #-16]
  1006ec:	e51b200c 	ldr	r2, [fp, #-12]
  1006f0:	e51b1008 	ldr	r1, [fp, #-8]
  1006f4:	e3a00055 	mov	r0, #85	; 0x55
  1006f8:	eb00ef49 	bl	13c424 <syscall>
  1006fc:	e1a03000 	mov	r3, r0
}
  100700:	e1a00003 	mov	r0, r3
  100704:	e24bd004 	sub	sp, fp, #4
  100708:	e8bd8800 	pop	{fp, pc}

0010070c <setnonblocking>:

/* set non-blocking */
int setnonblocking(int fd)
{
  10070c:	e92d4800 	push	{fp, lr}
  100710:	e28db004 	add	fp, sp, #4
  100714:	e24dd010 	sub	sp, sp, #16
  100718:	e50b0010 	str	r0, [fp, #-16]
    int old_option = fcntl( fd, F_GETFL, 0);
  10071c:	e3a02000 	mov	r2, #0
  100720:	e3a01003 	mov	r1, #3
  100724:	e51b0010 	ldr	r0, [fp, #-16]
  100728:	eb00e22b 	bl	138fdc <fcntl>
  10072c:	e50b0008 	str	r0, [fp, #-8]
    int new_option = old_option | O_NONBLOCK;
  100730:	e51b3008 	ldr	r3, [fp, #-8]
  100734:	e3833b02 	orr	r3, r3, #2048	; 0x800
  100738:	e50b300c 	str	r3, [fp, #-12]
    if (fcntl(fd, F_SETFL, new_option) == -1)
  10073c:	e51b200c 	ldr	r2, [fp, #-12]
  100740:	e3a01004 	mov	r1, #4
  100744:	e51b0010 	ldr	r0, [fp, #-16]
  100748:	eb00e223 	bl	138fdc <fcntl>
  10074c:	e1a03000 	mov	r3, r0
  100750:	e3730001 	cmn	r3, #1
  100754:	1a000004 	bne	10076c <setnonblocking+0x60>
    {
        printf("Set noblocking error!\n");
  100758:	e3050358 	movw	r0, #21336	; 0x5358
  10075c:	e3400014 	movt	r0, #20
  100760:	eb00f794 	bl	13e5b8 <puts>
        return 1;
  100764:	e3a03001 	mov	r3, #1
  100768:	ea000000 	b	100770 <setnonblocking+0x64>
    }
    return old_option;
  10076c:	e51b3008 	ldr	r3, [fp, #-8]
}
  100770:	e1a00003 	mov	r0, r3
  100774:	e24bd004 	sub	sp, fp, #4
  100778:	e8bd8800 	pop	{fp, pc}

0010077c <socketpair>:

int socketpair(int domain, int type, int protocol, int sv[2])
{
  10077c:	e92d4810 	push	{r4, fp, lr}
  100780:	e28db008 	add	fp, sp, #8
  100784:	e24ddf43 	sub	sp, sp, #268	; 0x10c
  100788:	e50b0100 	str	r0, [fp, #-256]	; 0xffffff00
  10078c:	e50b1104 	str	r1, [fp, #-260]	; 0xfffffefc
  100790:	e50b2108 	str	r2, [fp, #-264]	; 0xfffffef8
  100794:	e50b310c 	str	r3, [fp, #-268]	; 0xfffffef4
    int listenfd = -1, acceptfd = -1, clientfd = -1;
  100798:	e3e03000 	mvn	r3, #0
  10079c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1007a0:	e3e03000 	mvn	r3, #0
  1007a4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  1007a8:	e3e03000 	mvn	r3, #0
  1007ac:	e50b3010 	str	r3, [fp, #-16]
    /* for server, accept, client */
    struct sockaddr_in saddr, aaddr, caddr;
    socklen_t len = sizeof(struct sockaddr_in);
  1007b0:	e3a03010 	mov	r3, #16
  1007b4:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
    int on = 1;
  1007b8:	e3a03001 	mov	r3, #1
  1007bc:	e50b3068 	str	r3, [fp, #-104]	; 0xffffff98
    int fdopt;
    int rt_port;

    /* for select */
    int maxfdp = 0;
  1007c0:	e3a03000 	mov	r3, #0
  1007c4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int rst;
    fd_set rfd;
    struct timeval timeout = {0, 1000};
  1007c8:	e3a02000 	mov	r2, #0
  1007cc:	e3a03000 	mov	r3, #0
  1007d0:	e14b2ffc 	strd	r2, [fp, #-252]	; 0xffffff04
  1007d4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  1007d8:	e50b30f4 	str	r3, [fp, #-244]	; 0xffffff0c

    /* server socket */
    if ((listenfd = socket(domain, type, protocol)) < 0)
  1007dc:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1007e0:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1007e4:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1007e8:	eb00f606 	bl	13e008 <socket>
  1007ec:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  1007f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1007f4:	e3530000 	cmp	r3, #0
  1007f8:	aa00000f 	bge	10083c <socketpair+0xc0>
    {
        printf("Create listenfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  1007fc:	eb00e1a7 	bl	138ea0 <__errno_location>
  100800:	e1a03000 	mov	r3, r0
  100804:	e5933000 	ldr	r3, [r3]
  100808:	e1a00003 	mov	r0, r3
  10080c:	eb00e1c5 	bl	138f28 <strerror>
  100810:	e1a04000 	mov	r4, r0
  100814:	eb00e1a1 	bl	138ea0 <__errno_location>
  100818:	e1a03000 	mov	r3, r0
  10081c:	e5933000 	ldr	r3, [r3]
  100820:	e1a02003 	mov	r2, r3
  100824:	e1a01004 	mov	r1, r4
  100828:	e3050370 	movw	r0, #21360	; 0x5370
  10082c:	e3400014 	movt	r0, #20
  100830:	eb00f752 	bl	13e580 <printf>
        return -1;
  100834:	e3e03000 	mvn	r3, #0
  100838:	ea000117 	b	100c9c <socketpair+0x520>
    }
    /* non-blocking */
    setnonblocking(listenfd);
  10083c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100840:	ebffffb1 	bl	10070c <setnonblocking>

    /* get random port: 5001~65001 */
    srand((unsigned)time(NULL));
  100844:	e3a00000 	mov	r0, #0
  100848:	eb010930 	bl	142d10 <time>
  10084c:	e1a02000 	mov	r2, r0
  100850:	e1a03001 	mov	r3, r1
  100854:	e1a03002 	mov	r3, r2
  100858:	e1a00003 	mov	r0, r3
  10085c:	eb00f636 	bl	13e13c <srand>
    rt_port = rand() % 60000 + 5001;
  100860:	eb00f63b 	bl	13e154 <rand>
  100864:	e1a02000 	mov	r2, r0
  100868:	e30b3273 	movw	r3, #45683	; 0xb273
  10086c:	e34435e7 	movt	r3, #17895	; 0x45e7
  100870:	e0c10392 	smull	r0, r1, r2, r3
  100874:	e1a01741 	asr	r1, r1, #14
  100878:	e1a03fc2 	asr	r3, r2, #31
  10087c:	e0413003 	sub	r3, r1, r3
  100880:	e30e1a60 	movw	r1, #60000	; 0xea60
  100884:	e0030391 	mul	r3, r1, r3
  100888:	e0423003 	sub	r3, r2, r3
  10088c:	e2833d4e 	add	r3, r3, #4992	; 0x1380
  100890:	e2833009 	add	r3, r3, #9
  100894:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* bind and listen */
    memset(&saddr, 0, sizeof(saddr));
  100898:	e24b3040 	sub	r3, fp, #64	; 0x40
  10089c:	e3a02010 	mov	r2, #16
  1008a0:	e3a01000 	mov	r1, #0
  1008a4:	e1a00003 	mov	r0, r3
  1008a8:	eb010263 	bl	14123c <memset>
    memset(&aaddr, 0, sizeof(aaddr));
  1008ac:	e24b3050 	sub	r3, fp, #80	; 0x50
  1008b0:	e3a02010 	mov	r2, #16
  1008b4:	e3a01000 	mov	r1, #0
  1008b8:	e1a00003 	mov	r0, r3
  1008bc:	eb01025e 	bl	14123c <memset>
    saddr.sin_family = domain;
  1008c0:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  1008c4:	e6ff3073 	uxth	r3, r3
  1008c8:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
    saddr.sin_port = htons(rt_port);
  1008cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1008d0:	e6ff3073 	uxth	r3, r3
  1008d4:	e1a00003 	mov	r0, r3
  1008d8:	eb00f598 	bl	13df40 <htons>
  1008dc:	e1a03000 	mov	r3, r0
  1008e0:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
    saddr.sin_addr.s_addr = htonl(INADDR_ANY);
  1008e4:	e3a00000 	mov	r0, #0
  1008e8:	eb00f58f 	bl	13df2c <htonl>
  1008ec:	e1a03000 	mov	r3, r0
  1008f0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4

    if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, (const char*)&on, sizeof(int)) < 0)
  1008f4:	e24b2068 	sub	r2, fp, #104	; 0x68
  1008f8:	e3a03004 	mov	r3, #4
  1008fc:	e58d3000 	str	r3, [sp]
  100900:	e1a03002 	mov	r3, r2
  100904:	e3a02002 	mov	r2, #2
  100908:	e3a01001 	mov	r1, #1
  10090c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100910:	eb00f5a3 	bl	13dfa4 <setsockopt>
  100914:	e1a03000 	mov	r3, r0
  100918:	e3530000 	cmp	r3, #0
  10091c:	aa000003 	bge	100930 <socketpair+0x1b4>
    {
        perror("Setsockopt reuseadd failed");
  100920:	e30503a0 	movw	r0, #21408	; 0x53a0
  100924:	e3400014 	movt	r0, #20
  100928:	eb00f6cb 	bl	13e45c <perror>
        goto __exit;
  10092c:	ea0000cf 	b	100c70 <socketpair+0x4f4>
    }

    if (bind(listenfd, (struct sockaddr*)&saddr, sizeof(saddr)) == -1)
  100930:	e24b3040 	sub	r3, fp, #64	; 0x40
  100934:	e3a02010 	mov	r2, #16
  100938:	e1a01003 	mov	r1, r3
  10093c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100940:	eb00f554 	bl	13de98 <bind>
  100944:	e1a03000 	mov	r3, r0
  100948:	e3730001 	cmn	r3, #1
  10094c:	1a00000e 	bne	10098c <socketpair+0x210>
    {
        printf("Bind socket error: %s(errno: %d), fd=%d\n", strerror(errno), errno, listenfd);
  100950:	eb00e152 	bl	138ea0 <__errno_location>
  100954:	e1a03000 	mov	r3, r0
  100958:	e5933000 	ldr	r3, [r3]
  10095c:	e1a00003 	mov	r0, r3
  100960:	eb00e170 	bl	138f28 <strerror>
  100964:	e1a04000 	mov	r4, r0
  100968:	eb00e14c 	bl	138ea0 <__errno_location>
  10096c:	e1a03000 	mov	r3, r0
  100970:	e5932000 	ldr	r2, [r3]
  100974:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100978:	e1a01004 	mov	r1, r4
  10097c:	e30503bc 	movw	r0, #21436	; 0x53bc
  100980:	e3400014 	movt	r0, #20
  100984:	eb00f6fd 	bl	13e580 <printf>
        goto __exit;
  100988:	ea0000b8 	b	100c70 <socketpair+0x4f4>
    }

    if (listen(listenfd, 10) == -1)
  10098c:	e3a0100a 	mov	r1, #10
  100990:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100994:	eb00f56e 	bl	13df54 <listen>
  100998:	e1a03000 	mov	r3, r0
  10099c:	e3730001 	cmn	r3, #1
  1009a0:	1a00000e 	bne	1009e0 <socketpair+0x264>
    {
        printf("Listen socket error: %s(errno: %d)\n", strerror(errno), errno);
  1009a4:	eb00e13d 	bl	138ea0 <__errno_location>
  1009a8:	e1a03000 	mov	r3, r0
  1009ac:	e5933000 	ldr	r3, [r3]
  1009b0:	e1a00003 	mov	r0, r3
  1009b4:	eb00e15b 	bl	138f28 <strerror>
  1009b8:	e1a04000 	mov	r4, r0
  1009bc:	eb00e137 	bl	138ea0 <__errno_location>
  1009c0:	e1a03000 	mov	r3, r0
  1009c4:	e5933000 	ldr	r3, [r3]
  1009c8:	e1a02003 	mov	r2, r3
  1009cc:	e1a01004 	mov	r1, r4
  1009d0:	e30503e8 	movw	r0, #21480	; 0x53e8
  1009d4:	e3400014 	movt	r0, #20
  1009d8:	eb00f6e8 	bl	13e580 <printf>
        goto __exit;
  1009dc:	ea0000a3 	b	100c70 <socketpair+0x4f4>
    }

    /* client socket */
    if ((clientfd = socket(domain, type, protocol)) < 0)
  1009e0:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1009e4:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1009e8:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1009ec:	eb00f585 	bl	13e008 <socket>
  1009f0:	e50b0010 	str	r0, [fp, #-16]
  1009f4:	e51b3010 	ldr	r3, [fp, #-16]
  1009f8:	e3530000 	cmp	r3, #0
  1009fc:	aa00000e 	bge	100a3c <socketpair+0x2c0>
    {
        printf("Create clientfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  100a00:	eb00e126 	bl	138ea0 <__errno_location>
  100a04:	e1a03000 	mov	r3, r0
  100a08:	e5933000 	ldr	r3, [r3]
  100a0c:	e1a00003 	mov	r0, r3
  100a10:	eb00e144 	bl	138f28 <strerror>
  100a14:	e1a04000 	mov	r4, r0
  100a18:	eb00e120 	bl	138ea0 <__errno_location>
  100a1c:	e1a03000 	mov	r3, r0
  100a20:	e5933000 	ldr	r3, [r3]
  100a24:	e1a02003 	mov	r2, r3
  100a28:	e1a01004 	mov	r1, r4
  100a2c:	e305040c 	movw	r0, #21516	; 0x540c
  100a30:	e3400014 	movt	r0, #20
  100a34:	eb00f6d1 	bl	13e580 <printf>
        goto __exit;
  100a38:	ea00008c 	b	100c70 <socketpair+0x4f4>
    }

    /* non-blocking */
    fdopt = setnonblocking(clientfd);
  100a3c:	e51b0010 	ldr	r0, [fp, #-16]
  100a40:	ebffff31 	bl	10070c <setnonblocking>
  100a44:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    /* client connect */
    memset(&caddr, 0, sizeof(caddr));
  100a48:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a4c:	e3a02010 	mov	r2, #16
  100a50:	e3a01000 	mov	r1, #0
  100a54:	e1a00003 	mov	r0, r3
  100a58:	eb0101f7 	bl	14123c <memset>
    caddr.sin_family = domain;
  100a5c:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  100a60:	e6ff3073 	uxth	r3, r3
  100a64:	e14b36b0 	strh	r3, [fp, #-96]	; 0xffffffa0
    caddr.sin_port =htons(rt_port);
  100a68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  100a6c:	e6ff3073 	uxth	r3, r3
  100a70:	e1a00003 	mov	r0, r3
  100a74:	eb00f531 	bl	13df40 <htons>
  100a78:	e1a03000 	mov	r3, r0
  100a7c:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
    caddr.sin_addr.s_addr=htonl(INADDR_ANY);
  100a80:	e3a00000 	mov	r0, #0
  100a84:	eb00f528 	bl	13df2c <htonl>
  100a88:	e1a03000 	mov	r3, r0
  100a8c:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    connect(clientfd, (struct sockaddr*)&caddr, sizeof(caddr));
  100a90:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a94:	e3a02010 	mov	r2, #16
  100a98:	e1a01003 	mov	r1, r3
  100a9c:	e51b0010 	ldr	r0, [fp, #-16]
  100aa0:	eb00f512 	bl	13def0 <connect>

    /* do select */
    FD_ZERO(&rfd);
  100aa4:	e24b30e8 	sub	r3, fp, #232	; 0xe8
  100aa8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  100aac:	e3a03020 	mov	r3, #32
  100ab0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ab4:	ea000007 	b	100ad8 <socketpair+0x35c>
  100ab8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  100abc:	e2832004 	add	r2, r3, #4
  100ac0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100ac4:	e3a02000 	mov	r2, #0
  100ac8:	e5832000 	str	r2, [r3]
  100acc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100ad0:	e2433001 	sub	r3, r3, #1
  100ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100adc:	e3530000 	cmp	r3, #0
  100ae0:	1afffff4 	bne	100ab8 <socketpair+0x33c>
    FD_SET(listenfd, &rfd);
  100ae4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100ae8:	e1a022a3 	lsr	r2, r3, #5
  100aec:	e1a03102 	lsl	r3, r2, #2
  100af0:	e24b100c 	sub	r1, fp, #12
  100af4:	e0813003 	add	r3, r1, r3
  100af8:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100afc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b00:	e203301f 	and	r3, r3, #31
  100b04:	e3a00001 	mov	r0, #1
  100b08:	e1a03310 	lsl	r3, r0, r3
  100b0c:	e1811003 	orr	r1, r1, r3
  100b10:	e1a03102 	lsl	r3, r2, #2
  100b14:	e24b200c 	sub	r2, fp, #12
  100b18:	e0823003 	add	r3, r2, r3
  100b1c:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    FD_SET(clientfd, &rfd);
  100b20:	e51b3010 	ldr	r3, [fp, #-16]
  100b24:	e1a022a3 	lsr	r2, r3, #5
  100b28:	e1a03102 	lsl	r3, r2, #2
  100b2c:	e24b100c 	sub	r1, fp, #12
  100b30:	e0813003 	add	r3, r1, r3
  100b34:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100b38:	e51b3010 	ldr	r3, [fp, #-16]
  100b3c:	e203301f 	and	r3, r3, #31
  100b40:	e3a00001 	mov	r0, #1
  100b44:	e1a03310 	lsl	r3, r0, r3
  100b48:	e1811003 	orr	r1, r1, r3
  100b4c:	e1a03102 	lsl	r3, r2, #2
  100b50:	e24b200c 	sub	r2, fp, #12
  100b54:	e0823003 	add	r3, r2, r3
  100b58:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    maxfdp = listenfd > clientfd ? listenfd+1 : clientfd+1;
  100b5c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  100b60:	e51b3010 	ldr	r3, [fp, #-16]
  100b64:	e1520003 	cmp	r2, r3
  100b68:	da000002 	ble	100b78 <socketpair+0x3fc>
  100b6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b70:	e2833001 	add	r3, r3, #1
  100b74:	ea000001 	b	100b80 <socketpair+0x404>
  100b78:	e51b3010 	ldr	r3, [fp, #-16]
  100b7c:	e2833001 	add	r3, r3, #1
  100b80:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    rst = select(maxfdp, &rfd, NULL, NULL, &timeout);
  100b84:	e24b10e8 	sub	r1, fp, #232	; 0xe8
  100b88:	e24b30fc 	sub	r3, fp, #252	; 0xfc
  100b8c:	e58d3000 	str	r3, [sp]
  100b90:	e3a03000 	mov	r3, #0
  100b94:	e3a02000 	mov	r2, #0
  100b98:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  100b9c:	eb00f57e 	bl	13e19c <select>
  100ba0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    switch(rst)
  100ba4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  100ba8:	e3730001 	cmn	r3, #1
  100bac:	0a000002 	beq	100bbc <socketpair+0x440>
  100bb0:	e3530000 	cmp	r3, #0
  100bb4:	0a000004 	beq	100bcc <socketpair+0x450>
  100bb8:	ea000007 	b	100bdc <socketpair+0x460>
    {
    case -1:
        perror("select error");
  100bbc:	e305043c 	movw	r0, #21564	; 0x543c
  100bc0:	e3400014 	movt	r0, #20
  100bc4:	eb00f624 	bl	13e45c <perror>
        goto __exit;
  100bc8:	ea000028 	b	100c70 <socketpair+0x4f4>
        break;
    case 0:
        perror("continue");
  100bcc:	e305044c 	movw	r0, #21580	; 0x544c
  100bd0:	e3400014 	movt	r0, #20
  100bd4:	eb00f620 	bl	13e45c <perror>
        break;
  100bd8:	ea000024 	b	100c70 <socketpair+0x4f4>
    default:
        if (FD_ISSET(listenfd, &rfd))
  100bdc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100be0:	e1a032a3 	lsr	r3, r3, #5
  100be4:	e1a03103 	lsl	r3, r3, #2
  100be8:	e24b200c 	sub	r2, fp, #12
  100bec:	e0823003 	add	r3, r2, r3
  100bf0:	e51320dc 	ldr	r2, [r3, #-220]	; 0xffffff24
  100bf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100bf8:	e203301f 	and	r3, r3, #31
  100bfc:	e1a03332 	lsr	r3, r2, r3
  100c00:	e2033001 	and	r3, r3, #1
  100c04:	e3530000 	cmp	r3, #0
  100c08:	0a000017 	beq	100c6c <socketpair+0x4f0>
        {
            if ((acceptfd = accept(listenfd, (struct sockaddr*)&caddr, &len)) > 0)
  100c0c:	e24b2064 	sub	r2, fp, #100	; 0x64
  100c10:	e24b3060 	sub	r3, fp, #96	; 0x60
  100c14:	e1a01003 	mov	r1, r3
  100c18:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c1c:	eb00f48e 	bl	13de5c <accept>
  100c20:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  100c24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  100c28:	e3530000 	cmp	r3, #0
  100c2c:	da00000c 	ble	100c64 <socketpair+0x4e8>
            {
                close(listenfd);
  100c30:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c34:	eb010841 	bl	142d40 <close>
                /* set old optional back */
                fcntl(clientfd, F_SETFL, fdopt);
  100c38:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  100c3c:	e3a01004 	mov	r1, #4
  100c40:	e51b0010 	ldr	r0, [fp, #-16]
  100c44:	eb00e0e4 	bl	138fdc <fcntl>
                sv[0] = clientfd;
  100c48:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c4c:	e51b2010 	ldr	r2, [fp, #-16]
  100c50:	e5832000 	str	r2, [r3]
                sv[1] = acceptfd;
  100c54:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c58:	e2833004 	add	r3, r3, #4
  100c5c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  100c60:	e5832000 	str	r2, [r3]
            }

            return 0;
  100c64:	e3a03000 	mov	r3, #0
  100c68:	ea00000b 	b	100c9c <socketpair+0x520>
        }
    }

__exit:
  100c6c:	e320f000 	nop	{0}
    if (listenfd >= 0) close(listenfd);
  100c70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100c74:	e3530000 	cmp	r3, #0
  100c78:	ba000001 	blt	100c84 <socketpair+0x508>
  100c7c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c80:	eb01082e 	bl	142d40 <close>
    if (clientfd >= 0) close(clientfd);
  100c84:	e51b3010 	ldr	r3, [fp, #-16]
  100c88:	e3530000 	cmp	r3, #0
  100c8c:	ba000001 	blt	100c98 <socketpair+0x51c>
  100c90:	e51b0010 	ldr	r0, [fp, #-16]
  100c94:	eb010829 	bl	142d40 <close>

    return -1;
  100c98:	e3e03000 	mvn	r3, #0
}
  100c9c:	e1a00003 	mov	r0, r3
  100ca0:	e24bd008 	sub	sp, fp, #8
  100ca4:	e8bd8810 	pop	{r4, fp, pc}

00100ca8 <rt_mutex_create>:
            return RT_EIO;\
        }\
    } while (0)

rt_mutex_t rt_mutex_create(const char *name, rt_uint8_t flag)
{
  100ca8:	e92d4800 	push	{fp, lr}
  100cac:	e28db004 	add	fp, sp, #4
  100cb0:	e24dd010 	sub	sp, sp, #16
  100cb4:	e50b0010 	str	r0, [fp, #-16]
  100cb8:	e1a03001 	mov	r3, r1
  100cbc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100cc0:	e3a00008 	mov	r0, #8
  100cc4:	eb00f193 	bl	13d318 <malloc>
  100cc8:	e1a03000 	mov	r3, r0
  100ccc:	e50b3008 	str	r3, [fp, #-8]
  100cd0:	e51b3008 	ldr	r3, [fp, #-8]
  100cd4:	e3530000 	cmp	r3, #0
  100cd8:	1a000001 	bne	100ce4 <rt_mutex_create+0x3c>
  100cdc:	e3a03000 	mov	r3, #0
  100ce0:	ea000015 	b	100d3c <rt_mutex_create+0x94>
  100ce4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  100ce8:	e1a02003 	mov	r2, r3
  100cec:	e51b1010 	ldr	r1, [fp, #-16]
  100cf0:	e3a00016 	mov	r0, #22
  100cf4:	eb00edca 	bl	13c424 <syscall>
  100cf8:	e1a03000 	mov	r3, r0
  100cfc:	e1a02003 	mov	r2, r3
  100d00:	e51b3008 	ldr	r3, [fp, #-8]
  100d04:	e5832004 	str	r2, [r3, #4]
  100d08:	e51b3008 	ldr	r3, [fp, #-8]
  100d0c:	e5933004 	ldr	r3, [r3, #4]
  100d10:	e3530000 	cmp	r3, #0
  100d14:	0a000003 	beq	100d28 <rt_mutex_create+0x80>
  100d18:	e51b3008 	ldr	r3, [fp, #-8]
  100d1c:	e3a02003 	mov	r2, #3
  100d20:	e5832000 	str	r2, [r3]
  100d24:	ea000003 	b	100d38 <rt_mutex_create+0x90>
  100d28:	e51b0008 	ldr	r0, [fp, #-8]
  100d2c:	eb00f335 	bl	13da08 <free>
  100d30:	e3a03000 	mov	r3, #0
  100d34:	e50b3008 	str	r3, [fp, #-8]
  100d38:	e51b3008 	ldr	r3, [fp, #-8]
}
  100d3c:	e1a00003 	mov	r0, r3
  100d40:	e24bd004 	sub	sp, fp, #4
  100d44:	e8bd8800 	pop	{fp, pc}

00100d48 <rt_mutex_init>:

rt_err_t rt_mutex_init(rt_mutex_t mutex, const char *name, rt_uint8_t flag)
{
  100d48:	e92d4800 	push	{fp, lr}
  100d4c:	e28db004 	add	fp, sp, #4
  100d50:	e24dd010 	sub	sp, sp, #16
  100d54:	e50b0008 	str	r0, [fp, #-8]
  100d58:	e50b100c 	str	r1, [fp, #-12]
  100d5c:	e1a03002 	mov	r3, r2
  100d60:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100d64:	e51b3008 	ldr	r3, [fp, #-8]
  100d68:	e3530000 	cmp	r3, #0
  100d6c:	1a000001 	bne	100d78 <rt_mutex_init+0x30>
  100d70:	e3a03008 	mov	r3, #8
  100d74:	ea000012 	b	100dc4 <rt_mutex_init+0x7c>
  100d78:	e55b300d 	ldrb	r3, [fp, #-13]
  100d7c:	e1a02003 	mov	r2, r3
  100d80:	e51b100c 	ldr	r1, [fp, #-12]
  100d84:	e3a00016 	mov	r0, #22
  100d88:	eb00eda5 	bl	13c424 <syscall>
  100d8c:	e1a03000 	mov	r3, r0
  100d90:	e1a02003 	mov	r2, r3
  100d94:	e51b3008 	ldr	r3, [fp, #-8]
  100d98:	e5832004 	str	r2, [r3, #4]
  100d9c:	e51b3008 	ldr	r3, [fp, #-8]
  100da0:	e5933004 	ldr	r3, [r3, #4]
  100da4:	e3530000 	cmp	r3, #0
  100da8:	0a000004 	beq	100dc0 <rt_mutex_init+0x78>
  100dac:	e51b3008 	ldr	r3, [fp, #-8]
  100db0:	e3a02003 	mov	r2, #3
  100db4:	e5832000 	str	r2, [r3]
  100db8:	e3a03000 	mov	r3, #0
  100dbc:	ea000000 	b	100dc4 <rt_mutex_init+0x7c>
  100dc0:	e3a03001 	mov	r3, #1
}
  100dc4:	e1a00003 	mov	r0, r3
  100dc8:	e24bd004 	sub	sp, fp, #4
  100dcc:	e8bd8800 	pop	{fp, pc}

00100dd0 <rt_mutex_delete>:

rt_err_t rt_mutex_delete(rt_mutex_t mutex)
{
  100dd0:	e92d4800 	push	{fp, lr}
  100dd4:	e28db004 	add	fp, sp, #4
  100dd8:	e24dd010 	sub	sp, sp, #16
  100ddc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100de0:	e51b3010 	ldr	r3, [fp, #-16]
  100de4:	e3530000 	cmp	r3, #0
  100de8:	0a000003 	beq	100dfc <rt_mutex_delete+0x2c>
  100dec:	e51b3010 	ldr	r3, [fp, #-16]
  100df0:	e5933004 	ldr	r3, [r3, #4]
  100df4:	e3530000 	cmp	r3, #0
  100df8:	1a000001 	bne	100e04 <rt_mutex_delete+0x34>
  100dfc:	e3a03008 	mov	r3, #8
  100e00:	ea000013 	b	100e54 <rt_mutex_delete+0x84>
  100e04:	e51b3010 	ldr	r3, [fp, #-16]
  100e08:	e5933000 	ldr	r3, [r3]
  100e0c:	e3530003 	cmp	r3, #3
  100e10:	0a000001 	beq	100e1c <rt_mutex_delete+0x4c>
  100e14:	e3a03008 	mov	r3, #8
  100e18:	ea00000d 	b	100e54 <rt_mutex_delete+0x84>
  100e1c:	e51b3010 	ldr	r3, [fp, #-16]
  100e20:	e5933004 	ldr	r3, [r3, #4]
  100e24:	e1a01003 	mov	r1, r3
  100e28:	e3a00017 	mov	r0, #23
  100e2c:	eb00ed7c 	bl	13c424 <syscall>
  100e30:	e50b0008 	str	r0, [fp, #-8]
  100e34:	e51b3008 	ldr	r3, [fp, #-8]
  100e38:	e3530000 	cmp	r3, #0
  100e3c:	0a000001 	beq	100e48 <rt_mutex_delete+0x78>
  100e40:	e51b3008 	ldr	r3, [fp, #-8]
  100e44:	ea000002 	b	100e54 <rt_mutex_delete+0x84>
  100e48:	e51b0010 	ldr	r0, [fp, #-16]
  100e4c:	eb00f2ed 	bl	13da08 <free>
  100e50:	e3a03000 	mov	r3, #0
}
  100e54:	e1a00003 	mov	r0, r3
  100e58:	e24bd004 	sub	sp, fp, #4
  100e5c:	e8bd8800 	pop	{fp, pc}

00100e60 <rt_mutex_detach>:

rt_err_t rt_mutex_detach(rt_mutex_t mutex)
{
  100e60:	e92d4800 	push	{fp, lr}
  100e64:	e28db004 	add	fp, sp, #4
  100e68:	e24dd010 	sub	sp, sp, #16
  100e6c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100e70:	e51b3010 	ldr	r3, [fp, #-16]
  100e74:	e3530000 	cmp	r3, #0
  100e78:	0a000003 	beq	100e8c <rt_mutex_detach+0x2c>
  100e7c:	e51b3010 	ldr	r3, [fp, #-16]
  100e80:	e5933004 	ldr	r3, [r3, #4]
  100e84:	e3530000 	cmp	r3, #0
  100e88:	1a000001 	bne	100e94 <rt_mutex_detach+0x34>
  100e8c:	e3a03008 	mov	r3, #8
  100e90:	ea000017 	b	100ef4 <rt_mutex_detach+0x94>
  100e94:	e51b3010 	ldr	r3, [fp, #-16]
  100e98:	e5933000 	ldr	r3, [r3]
  100e9c:	e3530003 	cmp	r3, #3
  100ea0:	0a000001 	beq	100eac <rt_mutex_detach+0x4c>
  100ea4:	e3a03008 	mov	r3, #8
  100ea8:	ea000011 	b	100ef4 <rt_mutex_detach+0x94>
  100eac:	e51b3010 	ldr	r3, [fp, #-16]
  100eb0:	e5933004 	ldr	r3, [r3, #4]
  100eb4:	e1a01003 	mov	r1, r3
  100eb8:	e3a00017 	mov	r0, #23
  100ebc:	eb00ed58 	bl	13c424 <syscall>
  100ec0:	e50b0008 	str	r0, [fp, #-8]
  100ec4:	e51b3008 	ldr	r3, [fp, #-8]
  100ec8:	e3530000 	cmp	r3, #0
  100ecc:	0a000001 	beq	100ed8 <rt_mutex_detach+0x78>
  100ed0:	e51b3008 	ldr	r3, [fp, #-8]
  100ed4:	ea000006 	b	100ef4 <rt_mutex_detach+0x94>
  100ed8:	e51b3010 	ldr	r3, [fp, #-16]
  100edc:	e3a02000 	mov	r2, #0
  100ee0:	e5832000 	str	r2, [r3]
  100ee4:	e51b3010 	ldr	r3, [fp, #-16]
  100ee8:	e3a02000 	mov	r2, #0
  100eec:	e5832004 	str	r2, [r3, #4]
  100ef0:	e3a03000 	mov	r3, #0
}
  100ef4:	e1a00003 	mov	r0, r3
  100ef8:	e24bd004 	sub	sp, fp, #4
  100efc:	e8bd8800 	pop	{fp, pc}

00100f00 <rt_mutex_take>:

rt_err_t rt_mutex_take(rt_mutex_t mutex, rt_int32_t time)
{
  100f00:	e92d4800 	push	{fp, lr}
  100f04:	e28db004 	add	fp, sp, #4
  100f08:	e24dd008 	sub	sp, sp, #8
  100f0c:	e50b0008 	str	r0, [fp, #-8]
  100f10:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f14:	e51b3008 	ldr	r3, [fp, #-8]
  100f18:	e3530000 	cmp	r3, #0
  100f1c:	0a000003 	beq	100f30 <rt_mutex_take+0x30>
  100f20:	e51b3008 	ldr	r3, [fp, #-8]
  100f24:	e5933004 	ldr	r3, [r3, #4]
  100f28:	e3530000 	cmp	r3, #0
  100f2c:	1a000001 	bne	100f38 <rt_mutex_take+0x38>
  100f30:	e3a03008 	mov	r3, #8
  100f34:	ea00000c 	b	100f6c <rt_mutex_take+0x6c>
  100f38:	e51b3008 	ldr	r3, [fp, #-8]
  100f3c:	e5933000 	ldr	r3, [r3]
  100f40:	e3530003 	cmp	r3, #3
  100f44:	0a000001 	beq	100f50 <rt_mutex_take+0x50>
  100f48:	e3a03008 	mov	r3, #8
  100f4c:	ea000006 	b	100f6c <rt_mutex_take+0x6c>
    return syscall(_NRSYS_mutex_take, mutex->data, time);
  100f50:	e51b3008 	ldr	r3, [fp, #-8]
  100f54:	e5933004 	ldr	r3, [r3, #4]
  100f58:	e51b200c 	ldr	r2, [fp, #-12]
  100f5c:	e1a01003 	mov	r1, r3
  100f60:	e3a00018 	mov	r0, #24
  100f64:	eb00ed2e 	bl	13c424 <syscall>
  100f68:	e1a03000 	mov	r3, r0
}
  100f6c:	e1a00003 	mov	r0, r3
  100f70:	e24bd004 	sub	sp, fp, #4
  100f74:	e8bd8800 	pop	{fp, pc}

00100f78 <rt_mutex_release>:

rt_err_t rt_mutex_release(rt_mutex_t mutex)
{
  100f78:	e92d4800 	push	{fp, lr}
  100f7c:	e28db004 	add	fp, sp, #4
  100f80:	e24dd008 	sub	sp, sp, #8
  100f84:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f88:	e51b3008 	ldr	r3, [fp, #-8]
  100f8c:	e3530000 	cmp	r3, #0
  100f90:	0a000003 	beq	100fa4 <rt_mutex_release+0x2c>
  100f94:	e51b3008 	ldr	r3, [fp, #-8]
  100f98:	e5933004 	ldr	r3, [r3, #4]
  100f9c:	e3530000 	cmp	r3, #0
  100fa0:	1a000001 	bne	100fac <rt_mutex_release+0x34>
  100fa4:	e3a03008 	mov	r3, #8
  100fa8:	ea00000b 	b	100fdc <rt_mutex_release+0x64>
  100fac:	e51b3008 	ldr	r3, [fp, #-8]
  100fb0:	e5933000 	ldr	r3, [r3]
  100fb4:	e3530003 	cmp	r3, #3
  100fb8:	0a000001 	beq	100fc4 <rt_mutex_release+0x4c>
  100fbc:	e3a03008 	mov	r3, #8
  100fc0:	ea000005 	b	100fdc <rt_mutex_release+0x64>
    return syscall(_NRSYS_mutex_release, mutex->data);
  100fc4:	e51b3008 	ldr	r3, [fp, #-8]
  100fc8:	e5933004 	ldr	r3, [r3, #4]
  100fcc:	e1a01003 	mov	r1, r3
  100fd0:	e3a00019 	mov	r0, #25
  100fd4:	eb00ed12 	bl	13c424 <syscall>
  100fd8:	e1a03000 	mov	r3, r0
}
  100fdc:	e1a00003 	mov	r0, r3
  100fe0:	e24bd004 	sub	sp, fp, #4
  100fe4:	e8bd8800 	pop	{fp, pc}

00100fe8 <rt_sem_create>:

rt_sem_t rt_sem_create(const char *name, rt_uint32_t value, rt_uint8_t flag)
{
  100fe8:	e92d4800 	push	{fp, lr}
  100fec:	e28db004 	add	fp, sp, #4
  100ff0:	e24dd018 	sub	sp, sp, #24
  100ff4:	e50b0010 	str	r0, [fp, #-16]
  100ff8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100ffc:	e1a03002 	mov	r3, r2
  101000:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  101004:	e3a00008 	mov	r0, #8
  101008:	eb00f0c2 	bl	13d318 <malloc>
  10100c:	e1a03000 	mov	r3, r0
  101010:	e50b3008 	str	r3, [fp, #-8]
  101014:	e51b3008 	ldr	r3, [fp, #-8]
  101018:	e3530000 	cmp	r3, #0
  10101c:	1a000001 	bne	101028 <rt_sem_create+0x40>
  101020:	e3a03000 	mov	r3, #0
  101024:	ea000015 	b	101080 <rt_sem_create+0x98>
  101028:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10102c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101030:	e51b1010 	ldr	r1, [fp, #-16]
  101034:	e3a00012 	mov	r0, #18
  101038:	eb00ecf9 	bl	13c424 <syscall>
  10103c:	e1a03000 	mov	r3, r0
  101040:	e1a02003 	mov	r2, r3
  101044:	e51b3008 	ldr	r3, [fp, #-8]
  101048:	e5832004 	str	r2, [r3, #4]
  10104c:	e51b3008 	ldr	r3, [fp, #-8]
  101050:	e5933004 	ldr	r3, [r3, #4]
  101054:	e3530000 	cmp	r3, #0
  101058:	0a000003 	beq	10106c <rt_sem_create+0x84>
  10105c:	e51b3008 	ldr	r3, [fp, #-8]
  101060:	e3a02002 	mov	r2, #2
  101064:	e5832000 	str	r2, [r3]
  101068:	ea000003 	b	10107c <rt_sem_create+0x94>
  10106c:	e51b0008 	ldr	r0, [fp, #-8]
  101070:	eb00f264 	bl	13da08 <free>
  101074:	e3a03000 	mov	r3, #0
  101078:	e50b3008 	str	r3, [fp, #-8]
  10107c:	e51b3008 	ldr	r3, [fp, #-8]
}
  101080:	e1a00003 	mov	r0, r3
  101084:	e24bd004 	sub	sp, fp, #4
  101088:	e8bd8800 	pop	{fp, pc}

0010108c <rt_sem_init>:

rt_err_t rt_sem_init(rt_sem_t sem,
                     const char *name,
                     rt_uint32_t value,
                     rt_uint8_t  flag)
{
  10108c:	e92d4800 	push	{fp, lr}
  101090:	e28db004 	add	fp, sp, #4
  101094:	e24dd010 	sub	sp, sp, #16
  101098:	e50b0008 	str	r0, [fp, #-8]
  10109c:	e50b100c 	str	r1, [fp, #-12]
  1010a0:	e50b2010 	str	r2, [fp, #-16]
  1010a4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_INIT(sem, RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  1010a8:	e51b3008 	ldr	r3, [fp, #-8]
  1010ac:	e3530000 	cmp	r3, #0
  1010b0:	1a000001 	bne	1010bc <rt_sem_init+0x30>
  1010b4:	e3a03008 	mov	r3, #8
  1010b8:	ea000012 	b	101108 <rt_sem_init+0x7c>
  1010bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1010c0:	e51b2010 	ldr	r2, [fp, #-16]
  1010c4:	e51b100c 	ldr	r1, [fp, #-12]
  1010c8:	e3a00012 	mov	r0, #18
  1010cc:	eb00ecd4 	bl	13c424 <syscall>
  1010d0:	e1a03000 	mov	r3, r0
  1010d4:	e1a02003 	mov	r2, r3
  1010d8:	e51b3008 	ldr	r3, [fp, #-8]
  1010dc:	e5832004 	str	r2, [r3, #4]
  1010e0:	e51b3008 	ldr	r3, [fp, #-8]
  1010e4:	e5933004 	ldr	r3, [r3, #4]
  1010e8:	e3530000 	cmp	r3, #0
  1010ec:	0a000004 	beq	101104 <rt_sem_init+0x78>
  1010f0:	e51b3008 	ldr	r3, [fp, #-8]
  1010f4:	e3a02002 	mov	r2, #2
  1010f8:	e5832000 	str	r2, [r3]
  1010fc:	e3a03000 	mov	r3, #0
  101100:	ea000000 	b	101108 <rt_sem_init+0x7c>
  101104:	e3a03001 	mov	r3, #1
}
  101108:	e1a00003 	mov	r0, r3
  10110c:	e24bd004 	sub	sp, fp, #4
  101110:	e8bd8800 	pop	{fp, pc}

00101114 <rt_sem_delete>:

rt_err_t rt_sem_delete(rt_sem_t sem)
{
  101114:	e92d4800 	push	{fp, lr}
  101118:	e28db004 	add	fp, sp, #4
  10111c:	e24dd010 	sub	sp, sp, #16
  101120:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  101124:	e51b3010 	ldr	r3, [fp, #-16]
  101128:	e3530000 	cmp	r3, #0
  10112c:	0a000003 	beq	101140 <rt_sem_delete+0x2c>
  101130:	e51b3010 	ldr	r3, [fp, #-16]
  101134:	e5933004 	ldr	r3, [r3, #4]
  101138:	e3530000 	cmp	r3, #0
  10113c:	1a000001 	bne	101148 <rt_sem_delete+0x34>
  101140:	e3a03008 	mov	r3, #8
  101144:	ea000013 	b	101198 <rt_sem_delete+0x84>
  101148:	e51b3010 	ldr	r3, [fp, #-16]
  10114c:	e5933000 	ldr	r3, [r3]
  101150:	e3530002 	cmp	r3, #2
  101154:	0a000001 	beq	101160 <rt_sem_delete+0x4c>
  101158:	e3a03008 	mov	r3, #8
  10115c:	ea00000d 	b	101198 <rt_sem_delete+0x84>
  101160:	e51b3010 	ldr	r3, [fp, #-16]
  101164:	e5933004 	ldr	r3, [r3, #4]
  101168:	e1a01003 	mov	r1, r3
  10116c:	e3a00013 	mov	r0, #19
  101170:	eb00ecab 	bl	13c424 <syscall>
  101174:	e50b0008 	str	r0, [fp, #-8]
  101178:	e51b3008 	ldr	r3, [fp, #-8]
  10117c:	e3530000 	cmp	r3, #0
  101180:	0a000001 	beq	10118c <rt_sem_delete+0x78>
  101184:	e51b3008 	ldr	r3, [fp, #-8]
  101188:	ea000002 	b	101198 <rt_sem_delete+0x84>
  10118c:	e51b0010 	ldr	r0, [fp, #-16]
  101190:	eb00f21c 	bl	13da08 <free>
  101194:	e3a03000 	mov	r3, #0
}
  101198:	e1a00003 	mov	r0, r3
  10119c:	e24bd004 	sub	sp, fp, #4
  1011a0:	e8bd8800 	pop	{fp, pc}

001011a4 <rt_sem_detach>:

rt_err_t rt_sem_detach(rt_sem_t sem)
{
  1011a4:	e92d4800 	push	{fp, lr}
  1011a8:	e28db004 	add	fp, sp, #4
  1011ac:	e24dd010 	sub	sp, sp, #16
  1011b0:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  1011b4:	e51b3010 	ldr	r3, [fp, #-16]
  1011b8:	e3530000 	cmp	r3, #0
  1011bc:	0a000003 	beq	1011d0 <rt_sem_detach+0x2c>
  1011c0:	e51b3010 	ldr	r3, [fp, #-16]
  1011c4:	e5933004 	ldr	r3, [r3, #4]
  1011c8:	e3530000 	cmp	r3, #0
  1011cc:	1a000001 	bne	1011d8 <rt_sem_detach+0x34>
  1011d0:	e3a03008 	mov	r3, #8
  1011d4:	ea000017 	b	101238 <rt_sem_detach+0x94>
  1011d8:	e51b3010 	ldr	r3, [fp, #-16]
  1011dc:	e5933000 	ldr	r3, [r3]
  1011e0:	e3530002 	cmp	r3, #2
  1011e4:	0a000001 	beq	1011f0 <rt_sem_detach+0x4c>
  1011e8:	e3a03008 	mov	r3, #8
  1011ec:	ea000011 	b	101238 <rt_sem_detach+0x94>
  1011f0:	e51b3010 	ldr	r3, [fp, #-16]
  1011f4:	e5933004 	ldr	r3, [r3, #4]
  1011f8:	e1a01003 	mov	r1, r3
  1011fc:	e3a00013 	mov	r0, #19
  101200:	eb00ec87 	bl	13c424 <syscall>
  101204:	e50b0008 	str	r0, [fp, #-8]
  101208:	e51b3008 	ldr	r3, [fp, #-8]
  10120c:	e3530000 	cmp	r3, #0
  101210:	0a000001 	beq	10121c <rt_sem_detach+0x78>
  101214:	e51b3008 	ldr	r3, [fp, #-8]
  101218:	ea000006 	b	101238 <rt_sem_detach+0x94>
  10121c:	e51b3010 	ldr	r3, [fp, #-16]
  101220:	e3a02000 	mov	r2, #0
  101224:	e5832000 	str	r2, [r3]
  101228:	e51b3010 	ldr	r3, [fp, #-16]
  10122c:	e3a02000 	mov	r2, #0
  101230:	e5832004 	str	r2, [r3, #4]
  101234:	e3a03000 	mov	r3, #0
}
  101238:	e1a00003 	mov	r0, r3
  10123c:	e24bd004 	sub	sp, fp, #4
  101240:	e8bd8800 	pop	{fp, pc}

00101244 <rt_sem_release>:

rt_err_t rt_sem_release(rt_sem_t sem)
{
  101244:	e92d4800 	push	{fp, lr}
  101248:	e28db004 	add	fp, sp, #4
  10124c:	e24dd008 	sub	sp, sp, #8
  101250:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  101254:	e51b3008 	ldr	r3, [fp, #-8]
  101258:	e3530000 	cmp	r3, #0
  10125c:	0a000003 	beq	101270 <rt_sem_release+0x2c>
  101260:	e51b3008 	ldr	r3, [fp, #-8]
  101264:	e5933004 	ldr	r3, [r3, #4]
  101268:	e3530000 	cmp	r3, #0
  10126c:	1a000001 	bne	101278 <rt_sem_release+0x34>
  101270:	e3a03008 	mov	r3, #8
  101274:	ea00000b 	b	1012a8 <rt_sem_release+0x64>
  101278:	e51b3008 	ldr	r3, [fp, #-8]
  10127c:	e5933000 	ldr	r3, [r3]
  101280:	e3530002 	cmp	r3, #2
  101284:	0a000001 	beq	101290 <rt_sem_release+0x4c>
  101288:	e3a03008 	mov	r3, #8
  10128c:	ea000005 	b	1012a8 <rt_sem_release+0x64>
    return syscall(_NRSYS_sem_release, sem->data);
  101290:	e51b3008 	ldr	r3, [fp, #-8]
  101294:	e5933004 	ldr	r3, [r3, #4]
  101298:	e1a01003 	mov	r1, r3
  10129c:	e3a00015 	mov	r0, #21
  1012a0:	eb00ec5f 	bl	13c424 <syscall>
  1012a4:	e1a03000 	mov	r3, r0
}
  1012a8:	e1a00003 	mov	r0, r3
  1012ac:	e24bd004 	sub	sp, fp, #4
  1012b0:	e8bd8800 	pop	{fp, pc}

001012b4 <rt_sem_take>:

rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t time)
{
  1012b4:	e92d4800 	push	{fp, lr}
  1012b8:	e28db004 	add	fp, sp, #4
  1012bc:	e24dd008 	sub	sp, sp, #8
  1012c0:	e50b0008 	str	r0, [fp, #-8]
  1012c4:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  1012c8:	e51b3008 	ldr	r3, [fp, #-8]
  1012cc:	e3530000 	cmp	r3, #0
  1012d0:	0a000003 	beq	1012e4 <rt_sem_take+0x30>
  1012d4:	e51b3008 	ldr	r3, [fp, #-8]
  1012d8:	e5933004 	ldr	r3, [r3, #4]
  1012dc:	e3530000 	cmp	r3, #0
  1012e0:	1a000001 	bne	1012ec <rt_sem_take+0x38>
  1012e4:	e3a03008 	mov	r3, #8
  1012e8:	ea00000c 	b	101320 <rt_sem_take+0x6c>
  1012ec:	e51b3008 	ldr	r3, [fp, #-8]
  1012f0:	e5933000 	ldr	r3, [r3]
  1012f4:	e3530002 	cmp	r3, #2
  1012f8:	0a000001 	beq	101304 <rt_sem_take+0x50>
  1012fc:	e3a03008 	mov	r3, #8
  101300:	ea000006 	b	101320 <rt_sem_take+0x6c>
    return syscall(_NRSYS_sem_take, sem->data, time);
  101304:	e51b3008 	ldr	r3, [fp, #-8]
  101308:	e5933004 	ldr	r3, [r3, #4]
  10130c:	e51b200c 	ldr	r2, [fp, #-12]
  101310:	e1a01003 	mov	r1, r3
  101314:	e3a00014 	mov	r0, #20
  101318:	eb00ec41 	bl	13c424 <syscall>
  10131c:	e1a03000 	mov	r3, r0
}
  101320:	e1a00003 	mov	r0, r3
  101324:	e24bd004 	sub	sp, fp, #4
  101328:	e8bd8800 	pop	{fp, pc}

0010132c <rt_mb_create>:

rt_mailbox_t rt_mb_create(const char *name, rt_size_t size, rt_uint8_t flag)
{
  10132c:	e92d4800 	push	{fp, lr}
  101330:	e28db004 	add	fp, sp, #4
  101334:	e24dd018 	sub	sp, sp, #24
  101338:	e50b0010 	str	r0, [fp, #-16]
  10133c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  101340:	e1a03002 	mov	r3, r2
  101344:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  101348:	e3a00008 	mov	r0, #8
  10134c:	eb00eff1 	bl	13d318 <malloc>
  101350:	e1a03000 	mov	r3, r0
  101354:	e50b3008 	str	r3, [fp, #-8]
  101358:	e51b3008 	ldr	r3, [fp, #-8]
  10135c:	e3530000 	cmp	r3, #0
  101360:	1a000001 	bne	10136c <rt_mb_create+0x40>
  101364:	e3a03000 	mov	r3, #0
  101368:	ea000015 	b	1013c4 <rt_mb_create+0x98>
  10136c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  101370:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101374:	e51b1010 	ldr	r1, [fp, #-16]
  101378:	e3a0001e 	mov	r0, #30
  10137c:	eb00ec28 	bl	13c424 <syscall>
  101380:	e1a03000 	mov	r3, r0
  101384:	e1a02003 	mov	r2, r3
  101388:	e51b3008 	ldr	r3, [fp, #-8]
  10138c:	e5832004 	str	r2, [r3, #4]
  101390:	e51b3008 	ldr	r3, [fp, #-8]
  101394:	e5933004 	ldr	r3, [r3, #4]
  101398:	e3530000 	cmp	r3, #0
  10139c:	0a000003 	beq	1013b0 <rt_mb_create+0x84>
  1013a0:	e51b3008 	ldr	r3, [fp, #-8]
  1013a4:	e3a02005 	mov	r2, #5
  1013a8:	e5832000 	str	r2, [r3]
  1013ac:	ea000003 	b	1013c0 <rt_mb_create+0x94>
  1013b0:	e51b0008 	ldr	r0, [fp, #-8]
  1013b4:	eb00f193 	bl	13da08 <free>
  1013b8:	e3a03000 	mov	r3, #0
  1013bc:	e50b3008 	str	r3, [fp, #-8]
  1013c0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1013c4:	e1a00003 	mov	r0, r3
  1013c8:	e24bd004 	sub	sp, fp, #4
  1013cc:	e8bd8800 	pop	{fp, pc}

001013d0 <rt_mb_init>:
rt_err_t rt_mb_init(rt_mailbox_t mb,
                    const char  *name,
                    void        *msgpool,
                    rt_size_t    size,
                    rt_uint8_t   flag)
{
  1013d0:	e92d4800 	push	{fp, lr}
  1013d4:	e28db004 	add	fp, sp, #4
  1013d8:	e24dd010 	sub	sp, sp, #16
  1013dc:	e50b0008 	str	r0, [fp, #-8]
  1013e0:	e50b100c 	str	r1, [fp, #-12]
  1013e4:	e50b2010 	str	r2, [fp, #-16]
  1013e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mb, RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  1013ec:	e51b3008 	ldr	r3, [fp, #-8]
  1013f0:	e3530000 	cmp	r3, #0
  1013f4:	1a000001 	bne	101400 <rt_mb_init+0x30>
  1013f8:	e3a03008 	mov	r3, #8
  1013fc:	ea000012 	b	10144c <rt_mb_init+0x7c>
  101400:	e5db3004 	ldrb	r3, [fp, #4]
  101404:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101408:	e51b100c 	ldr	r1, [fp, #-12]
  10140c:	e3a0001e 	mov	r0, #30
  101410:	eb00ec03 	bl	13c424 <syscall>
  101414:	e1a03000 	mov	r3, r0
  101418:	e1a02003 	mov	r2, r3
  10141c:	e51b3008 	ldr	r3, [fp, #-8]
  101420:	e5832004 	str	r2, [r3, #4]
  101424:	e51b3008 	ldr	r3, [fp, #-8]
  101428:	e5933004 	ldr	r3, [r3, #4]
  10142c:	e3530000 	cmp	r3, #0
  101430:	0a000004 	beq	101448 <rt_mb_init+0x78>
  101434:	e51b3008 	ldr	r3, [fp, #-8]
  101438:	e3a02005 	mov	r2, #5
  10143c:	e5832000 	str	r2, [r3]
  101440:	e3a03000 	mov	r3, #0
  101444:	ea000000 	b	10144c <rt_mb_init+0x7c>
  101448:	e3a03001 	mov	r3, #1
}
  10144c:	e1a00003 	mov	r0, r3
  101450:	e24bd004 	sub	sp, fp, #4
  101454:	e8bd8800 	pop	{fp, pc}

00101458 <rt_mb_delete>:


rt_err_t rt_mb_delete(rt_mailbox_t mb)
{
  101458:	e92d4800 	push	{fp, lr}
  10145c:	e28db004 	add	fp, sp, #4
  101460:	e24dd010 	sub	sp, sp, #16
  101464:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  101468:	e51b3010 	ldr	r3, [fp, #-16]
  10146c:	e3530000 	cmp	r3, #0
  101470:	0a000003 	beq	101484 <rt_mb_delete+0x2c>
  101474:	e51b3010 	ldr	r3, [fp, #-16]
  101478:	e5933004 	ldr	r3, [r3, #4]
  10147c:	e3530000 	cmp	r3, #0
  101480:	1a000001 	bne	10148c <rt_mb_delete+0x34>
  101484:	e3a03008 	mov	r3, #8
  101488:	ea000013 	b	1014dc <rt_mb_delete+0x84>
  10148c:	e51b3010 	ldr	r3, [fp, #-16]
  101490:	e5933000 	ldr	r3, [r3]
  101494:	e3530005 	cmp	r3, #5
  101498:	0a000001 	beq	1014a4 <rt_mb_delete+0x4c>
  10149c:	e3a03008 	mov	r3, #8
  1014a0:	ea00000d 	b	1014dc <rt_mb_delete+0x84>
  1014a4:	e51b3010 	ldr	r3, [fp, #-16]
  1014a8:	e5933004 	ldr	r3, [r3, #4]
  1014ac:	e1a01003 	mov	r1, r3
  1014b0:	e3a0001f 	mov	r0, #31
  1014b4:	eb00ebda 	bl	13c424 <syscall>
  1014b8:	e50b0008 	str	r0, [fp, #-8]
  1014bc:	e51b3008 	ldr	r3, [fp, #-8]
  1014c0:	e3530000 	cmp	r3, #0
  1014c4:	0a000001 	beq	1014d0 <rt_mb_delete+0x78>
  1014c8:	e51b3008 	ldr	r3, [fp, #-8]
  1014cc:	ea000002 	b	1014dc <rt_mb_delete+0x84>
  1014d0:	e51b0010 	ldr	r0, [fp, #-16]
  1014d4:	eb00f14b 	bl	13da08 <free>
  1014d8:	e3a03000 	mov	r3, #0
}
  1014dc:	e1a00003 	mov	r0, r3
  1014e0:	e24bd004 	sub	sp, fp, #4
  1014e4:	e8bd8800 	pop	{fp, pc}

001014e8 <rt_mb_detach>:

rt_err_t rt_mb_detach(rt_mailbox_t mb)
{
  1014e8:	e92d4800 	push	{fp, lr}
  1014ec:	e28db004 	add	fp, sp, #4
  1014f0:	e24dd010 	sub	sp, sp, #16
  1014f4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  1014f8:	e51b3010 	ldr	r3, [fp, #-16]
  1014fc:	e3530000 	cmp	r3, #0
  101500:	0a000003 	beq	101514 <rt_mb_detach+0x2c>
  101504:	e51b3010 	ldr	r3, [fp, #-16]
  101508:	e5933004 	ldr	r3, [r3, #4]
  10150c:	e3530000 	cmp	r3, #0
  101510:	1a000001 	bne	10151c <rt_mb_detach+0x34>
  101514:	e3a03008 	mov	r3, #8
  101518:	ea000017 	b	10157c <rt_mb_detach+0x94>
  10151c:	e51b3010 	ldr	r3, [fp, #-16]
  101520:	e5933000 	ldr	r3, [r3]
  101524:	e3530005 	cmp	r3, #5
  101528:	0a000001 	beq	101534 <rt_mb_detach+0x4c>
  10152c:	e3a03008 	mov	r3, #8
  101530:	ea000011 	b	10157c <rt_mb_detach+0x94>
  101534:	e51b3010 	ldr	r3, [fp, #-16]
  101538:	e5933004 	ldr	r3, [r3, #4]
  10153c:	e1a01003 	mov	r1, r3
  101540:	e3a0001f 	mov	r0, #31
  101544:	eb00ebb6 	bl	13c424 <syscall>
  101548:	e50b0008 	str	r0, [fp, #-8]
  10154c:	e51b3008 	ldr	r3, [fp, #-8]
  101550:	e3530000 	cmp	r3, #0
  101554:	0a000001 	beq	101560 <rt_mb_detach+0x78>
  101558:	e51b3008 	ldr	r3, [fp, #-8]
  10155c:	ea000006 	b	10157c <rt_mb_detach+0x94>
  101560:	e51b3010 	ldr	r3, [fp, #-16]
  101564:	e3a02000 	mov	r2, #0
  101568:	e5832000 	str	r2, [r3]
  10156c:	e51b3010 	ldr	r3, [fp, #-16]
  101570:	e3a02000 	mov	r2, #0
  101574:	e5832004 	str	r2, [r3, #4]
  101578:	e3a03000 	mov	r3, #0
}
  10157c:	e1a00003 	mov	r0, r3
  101580:	e24bd004 	sub	sp, fp, #4
  101584:	e8bd8800 	pop	{fp, pc}

00101588 <rt_mb_send_wait>:

rt_err_t rt_mb_send_wait(rt_mailbox_t mb,
        rt_ubase_t   value,
        rt_int32_t   timeout)
{
  101588:	e92d4800 	push	{fp, lr}
  10158c:	e28db004 	add	fp, sp, #4
  101590:	e24dd010 	sub	sp, sp, #16
  101594:	e50b0008 	str	r0, [fp, #-8]
  101598:	e50b100c 	str	r1, [fp, #-12]
  10159c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  1015a0:	e51b3008 	ldr	r3, [fp, #-8]
  1015a4:	e3530000 	cmp	r3, #0
  1015a8:	0a000003 	beq	1015bc <rt_mb_send_wait+0x34>
  1015ac:	e51b3008 	ldr	r3, [fp, #-8]
  1015b0:	e5933004 	ldr	r3, [r3, #4]
  1015b4:	e3530000 	cmp	r3, #0
  1015b8:	1a000001 	bne	1015c4 <rt_mb_send_wait+0x3c>
  1015bc:	e3a03008 	mov	r3, #8
  1015c0:	ea00000c 	b	1015f8 <rt_mb_send_wait+0x70>
  1015c4:	e51b3008 	ldr	r3, [fp, #-8]
  1015c8:	e5933000 	ldr	r3, [r3]
  1015cc:	e3530005 	cmp	r3, #5
  1015d0:	0a000001 	beq	1015dc <rt_mb_send_wait+0x54>
  1015d4:	e3a03008 	mov	r3, #8
  1015d8:	ea000006 	b	1015f8 <rt_mb_send_wait+0x70>
    return syscall(_NRSYS_mb_send_wait, mb->data, value, timeout);
  1015dc:	e51b3008 	ldr	r3, [fp, #-8]
  1015e0:	e5931004 	ldr	r1, [r3, #4]
  1015e4:	e51b3010 	ldr	r3, [fp, #-16]
  1015e8:	e51b200c 	ldr	r2, [fp, #-12]
  1015ec:	e3a00021 	mov	r0, #33	; 0x21
  1015f0:	eb00eb8b 	bl	13c424 <syscall>
  1015f4:	e1a03000 	mov	r3, r0
}
  1015f8:	e1a00003 	mov	r0, r3
  1015fc:	e24bd004 	sub	sp, fp, #4
  101600:	e8bd8800 	pop	{fp, pc}

00101604 <rt_mb_send>:

rt_err_t rt_mb_send(rt_mailbox_t mb, rt_ubase_t value)
{
  101604:	e92d4800 	push	{fp, lr}
  101608:	e28db004 	add	fp, sp, #4
  10160c:	e24dd008 	sub	sp, sp, #8
  101610:	e50b0008 	str	r0, [fp, #-8]
  101614:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101618:	e51b3008 	ldr	r3, [fp, #-8]
  10161c:	e3530000 	cmp	r3, #0
  101620:	0a000003 	beq	101634 <rt_mb_send+0x30>
  101624:	e51b3008 	ldr	r3, [fp, #-8]
  101628:	e5933004 	ldr	r3, [r3, #4]
  10162c:	e3530000 	cmp	r3, #0
  101630:	1a000001 	bne	10163c <rt_mb_send+0x38>
  101634:	e3a03008 	mov	r3, #8
  101638:	ea00000c 	b	101670 <rt_mb_send+0x6c>
  10163c:	e51b3008 	ldr	r3, [fp, #-8]
  101640:	e5933000 	ldr	r3, [r3]
  101644:	e3530005 	cmp	r3, #5
  101648:	0a000001 	beq	101654 <rt_mb_send+0x50>
  10164c:	e3a03008 	mov	r3, #8
  101650:	ea000006 	b	101670 <rt_mb_send+0x6c>
    return syscall(_NRSYS_mb_send, mb->data, value);
  101654:	e51b3008 	ldr	r3, [fp, #-8]
  101658:	e5933004 	ldr	r3, [r3, #4]
  10165c:	e51b200c 	ldr	r2, [fp, #-12]
  101660:	e1a01003 	mov	r1, r3
  101664:	e3a00020 	mov	r0, #32
  101668:	eb00eb6d 	bl	13c424 <syscall>
  10166c:	e1a03000 	mov	r3, r0
}
  101670:	e1a00003 	mov	r0, r3
  101674:	e24bd004 	sub	sp, fp, #4
  101678:	e8bd8800 	pop	{fp, pc}

0010167c <rt_mb_recv>:

rt_err_t rt_mb_recv(rt_mailbox_t mb, rt_ubase_t *value, rt_int32_t timeout)
{
  10167c:	e92d4800 	push	{fp, lr}
  101680:	e28db004 	add	fp, sp, #4
  101684:	e24dd010 	sub	sp, sp, #16
  101688:	e50b0008 	str	r0, [fp, #-8]
  10168c:	e50b100c 	str	r1, [fp, #-12]
  101690:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101694:	e51b3008 	ldr	r3, [fp, #-8]
  101698:	e3530000 	cmp	r3, #0
  10169c:	0a000003 	beq	1016b0 <rt_mb_recv+0x34>
  1016a0:	e51b3008 	ldr	r3, [fp, #-8]
  1016a4:	e5933004 	ldr	r3, [r3, #4]
  1016a8:	e3530000 	cmp	r3, #0
  1016ac:	1a000001 	bne	1016b8 <rt_mb_recv+0x3c>
  1016b0:	e3a03008 	mov	r3, #8
  1016b4:	ea00000c 	b	1016ec <rt_mb_recv+0x70>
  1016b8:	e51b3008 	ldr	r3, [fp, #-8]
  1016bc:	e5933000 	ldr	r3, [r3]
  1016c0:	e3530005 	cmp	r3, #5
  1016c4:	0a000001 	beq	1016d0 <rt_mb_recv+0x54>
  1016c8:	e3a03008 	mov	r3, #8
  1016cc:	ea000006 	b	1016ec <rt_mb_recv+0x70>
    return syscall(_NRSYS_mb_recv, mb->data, value, timeout);
  1016d0:	e51b3008 	ldr	r3, [fp, #-8]
  1016d4:	e5931004 	ldr	r1, [r3, #4]
  1016d8:	e51b3010 	ldr	r3, [fp, #-16]
  1016dc:	e51b200c 	ldr	r2, [fp, #-12]
  1016e0:	e3a00022 	mov	r0, #34	; 0x22
  1016e4:	eb00eb4e 	bl	13c424 <syscall>
  1016e8:	e1a03000 	mov	r3, r0
}
  1016ec:	e1a00003 	mov	r0, r3
  1016f0:	e24bd004 	sub	sp, fp, #4
  1016f4:	e8bd8800 	pop	{fp, pc}

001016f8 <rt_mq_create>:

rt_mq_t rt_mq_create(const char *name,
                     rt_size_t   msg_size,
                     rt_size_t   max_msgs,
                     rt_uint8_t  flag)
{
  1016f8:	e92d4800 	push	{fp, lr}
  1016fc:	e28db004 	add	fp, sp, #4
  101700:	e24dd020 	sub	sp, sp, #32
  101704:	e50b0010 	str	r0, [fp, #-16]
  101708:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10170c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  101710:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    RT_USER_IPC_CREATE(RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, max_msgs, flag);
  101714:	e3a00008 	mov	r0, #8
  101718:	eb00eefe 	bl	13d318 <malloc>
  10171c:	e1a03000 	mov	r3, r0
  101720:	e50b3008 	str	r3, [fp, #-8]
  101724:	e51b3008 	ldr	r3, [fp, #-8]
  101728:	e3530000 	cmp	r3, #0
  10172c:	1a000001 	bne	101738 <rt_mq_create+0x40>
  101730:	e3a03000 	mov	r3, #0
  101734:	ea000017 	b	101798 <rt_mq_create+0xa0>
  101738:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  10173c:	e58d3000 	str	r3, [sp]
  101740:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  101744:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101748:	e51b1010 	ldr	r1, [fp, #-16]
  10174c:	e3a00023 	mov	r0, #35	; 0x23
  101750:	eb00eb33 	bl	13c424 <syscall>
  101754:	e1a03000 	mov	r3, r0
  101758:	e1a02003 	mov	r2, r3
  10175c:	e51b3008 	ldr	r3, [fp, #-8]
  101760:	e5832004 	str	r2, [r3, #4]
  101764:	e51b3008 	ldr	r3, [fp, #-8]
  101768:	e5933004 	ldr	r3, [r3, #4]
  10176c:	e3530000 	cmp	r3, #0
  101770:	0a000003 	beq	101784 <rt_mq_create+0x8c>
  101774:	e51b3008 	ldr	r3, [fp, #-8]
  101778:	e3a02006 	mov	r2, #6
  10177c:	e5832000 	str	r2, [r3]
  101780:	ea000003 	b	101794 <rt_mq_create+0x9c>
  101784:	e51b0008 	ldr	r0, [fp, #-8]
  101788:	eb00f09e 	bl	13da08 <free>
  10178c:	e3a03000 	mov	r3, #0
  101790:	e50b3008 	str	r3, [fp, #-8]
  101794:	e51b3008 	ldr	r3, [fp, #-8]
}
  101798:	e1a00003 	mov	r0, r3
  10179c:	e24bd004 	sub	sp, fp, #4
  1017a0:	e8bd8800 	pop	{fp, pc}

001017a4 <rt_mq_init>:
                    const char *name,
                    void       *msgpool,
                    rt_size_t   msg_size,
                    rt_size_t   pool_size,
                    rt_uint8_t  flag)
{
  1017a4:	e92d4800 	push	{fp, lr}
  1017a8:	e28db004 	add	fp, sp, #4
  1017ac:	e24dd018 	sub	sp, sp, #24
  1017b0:	e50b0008 	str	r0, [fp, #-8]
  1017b4:	e50b100c 	str	r1, [fp, #-12]
  1017b8:	e50b2010 	str	r2, [fp, #-16]
  1017bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, pool_size/msg_size, flag);
  1017c0:	e51b3008 	ldr	r3, [fp, #-8]
  1017c4:	e3530000 	cmp	r3, #0
  1017c8:	1a000001 	bne	1017d4 <rt_mq_init+0x30>
  1017cc:	e3a03008 	mov	r3, #8
  1017d0:	ea000019 	b	10183c <rt_mq_init+0x98>
  1017d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1017d8:	e59b0004 	ldr	r0, [fp, #4]
  1017dc:	eb00dc16 	bl	13883c <__udivsi3>
  1017e0:	e1a03000 	mov	r3, r0
  1017e4:	e1a02003 	mov	r2, r3
  1017e8:	e5db3008 	ldrb	r3, [fp, #8]
  1017ec:	e58d3000 	str	r3, [sp]
  1017f0:	e1a03002 	mov	r3, r2
  1017f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1017f8:	e51b100c 	ldr	r1, [fp, #-12]
  1017fc:	e3a00023 	mov	r0, #35	; 0x23
  101800:	eb00eb07 	bl	13c424 <syscall>
  101804:	e1a03000 	mov	r3, r0
  101808:	e1a02003 	mov	r2, r3
  10180c:	e51b3008 	ldr	r3, [fp, #-8]
  101810:	e5832004 	str	r2, [r3, #4]
  101814:	e51b3008 	ldr	r3, [fp, #-8]
  101818:	e5933004 	ldr	r3, [r3, #4]
  10181c:	e3530000 	cmp	r3, #0
  101820:	0a000004 	beq	101838 <rt_mq_init+0x94>
  101824:	e51b3008 	ldr	r3, [fp, #-8]
  101828:	e3a02006 	mov	r2, #6
  10182c:	e5832000 	str	r2, [r3]
  101830:	e3a03000 	mov	r3, #0
  101834:	ea000000 	b	10183c <rt_mq_init+0x98>
  101838:	e3a03001 	mov	r3, #1
}
  10183c:	e1a00003 	mov	r0, r3
  101840:	e24bd004 	sub	sp, fp, #4
  101844:	e8bd8800 	pop	{fp, pc}

00101848 <rt_mq_delete>:

rt_err_t rt_mq_delete(rt_mq_t mq)
{
  101848:	e92d4800 	push	{fp, lr}
  10184c:	e28db004 	add	fp, sp, #4
  101850:	e24dd010 	sub	sp, sp, #16
  101854:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  101858:	e51b3010 	ldr	r3, [fp, #-16]
  10185c:	e3530000 	cmp	r3, #0
  101860:	0a000003 	beq	101874 <rt_mq_delete+0x2c>
  101864:	e51b3010 	ldr	r3, [fp, #-16]
  101868:	e5933004 	ldr	r3, [r3, #4]
  10186c:	e3530000 	cmp	r3, #0
  101870:	1a000001 	bne	10187c <rt_mq_delete+0x34>
  101874:	e3a03008 	mov	r3, #8
  101878:	ea000013 	b	1018cc <rt_mq_delete+0x84>
  10187c:	e51b3010 	ldr	r3, [fp, #-16]
  101880:	e5933000 	ldr	r3, [r3]
  101884:	e3530006 	cmp	r3, #6
  101888:	0a000001 	beq	101894 <rt_mq_delete+0x4c>
  10188c:	e3a03008 	mov	r3, #8
  101890:	ea00000d 	b	1018cc <rt_mq_delete+0x84>
  101894:	e51b3010 	ldr	r3, [fp, #-16]
  101898:	e5933004 	ldr	r3, [r3, #4]
  10189c:	e1a01003 	mov	r1, r3
  1018a0:	e3a00024 	mov	r0, #36	; 0x24
  1018a4:	eb00eade 	bl	13c424 <syscall>
  1018a8:	e50b0008 	str	r0, [fp, #-8]
  1018ac:	e51b3008 	ldr	r3, [fp, #-8]
  1018b0:	e3530000 	cmp	r3, #0
  1018b4:	0a000001 	beq	1018c0 <rt_mq_delete+0x78>
  1018b8:	e51b3008 	ldr	r3, [fp, #-8]
  1018bc:	ea000002 	b	1018cc <rt_mq_delete+0x84>
  1018c0:	e51b0010 	ldr	r0, [fp, #-16]
  1018c4:	eb00f04f 	bl	13da08 <free>
  1018c8:	e3a03000 	mov	r3, #0
}
  1018cc:	e1a00003 	mov	r0, r3
  1018d0:	e24bd004 	sub	sp, fp, #4
  1018d4:	e8bd8800 	pop	{fp, pc}

001018d8 <rt_mq_detach>:

rt_err_t rt_mq_detach(rt_mq_t mq)
{
  1018d8:	e92d4800 	push	{fp, lr}
  1018dc:	e28db004 	add	fp, sp, #4
  1018e0:	e24dd010 	sub	sp, sp, #16
  1018e4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  1018e8:	e51b3010 	ldr	r3, [fp, #-16]
  1018ec:	e3530000 	cmp	r3, #0
  1018f0:	0a000003 	beq	101904 <rt_mq_detach+0x2c>
  1018f4:	e51b3010 	ldr	r3, [fp, #-16]
  1018f8:	e5933004 	ldr	r3, [r3, #4]
  1018fc:	e3530000 	cmp	r3, #0
  101900:	1a000001 	bne	10190c <rt_mq_detach+0x34>
  101904:	e3a03008 	mov	r3, #8
  101908:	ea000017 	b	10196c <rt_mq_detach+0x94>
  10190c:	e51b3010 	ldr	r3, [fp, #-16]
  101910:	e5933000 	ldr	r3, [r3]
  101914:	e3530006 	cmp	r3, #6
  101918:	0a000001 	beq	101924 <rt_mq_detach+0x4c>
  10191c:	e3a03008 	mov	r3, #8
  101920:	ea000011 	b	10196c <rt_mq_detach+0x94>
  101924:	e51b3010 	ldr	r3, [fp, #-16]
  101928:	e5933004 	ldr	r3, [r3, #4]
  10192c:	e1a01003 	mov	r1, r3
  101930:	e3a00024 	mov	r0, #36	; 0x24
  101934:	eb00eaba 	bl	13c424 <syscall>
  101938:	e50b0008 	str	r0, [fp, #-8]
  10193c:	e51b3008 	ldr	r3, [fp, #-8]
  101940:	e3530000 	cmp	r3, #0
  101944:	0a000001 	beq	101950 <rt_mq_detach+0x78>
  101948:	e51b3008 	ldr	r3, [fp, #-8]
  10194c:	ea000006 	b	10196c <rt_mq_detach+0x94>
  101950:	e51b3010 	ldr	r3, [fp, #-16]
  101954:	e3a02000 	mov	r2, #0
  101958:	e5832000 	str	r2, [r3]
  10195c:	e51b3010 	ldr	r3, [fp, #-16]
  101960:	e3a02000 	mov	r2, #0
  101964:	e5832004 	str	r2, [r3, #4]
  101968:	e3a03000 	mov	r3, #0
}
  10196c:	e1a00003 	mov	r0, r3
  101970:	e24bd004 	sub	sp, fp, #4
  101974:	e8bd8800 	pop	{fp, pc}

00101978 <rt_mq_send>:

rt_err_t rt_mq_send(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  101978:	e92d4800 	push	{fp, lr}
  10197c:	e28db004 	add	fp, sp, #4
  101980:	e24dd010 	sub	sp, sp, #16
  101984:	e50b0008 	str	r0, [fp, #-8]
  101988:	e50b100c 	str	r1, [fp, #-12]
  10198c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101990:	e51b3008 	ldr	r3, [fp, #-8]
  101994:	e3530000 	cmp	r3, #0
  101998:	0a000003 	beq	1019ac <rt_mq_send+0x34>
  10199c:	e51b3008 	ldr	r3, [fp, #-8]
  1019a0:	e5933004 	ldr	r3, [r3, #4]
  1019a4:	e3530000 	cmp	r3, #0
  1019a8:	1a000001 	bne	1019b4 <rt_mq_send+0x3c>
  1019ac:	e3a03008 	mov	r3, #8
  1019b0:	ea00000c 	b	1019e8 <rt_mq_send+0x70>
  1019b4:	e51b3008 	ldr	r3, [fp, #-8]
  1019b8:	e5933000 	ldr	r3, [r3]
  1019bc:	e3530006 	cmp	r3, #6
  1019c0:	0a000001 	beq	1019cc <rt_mq_send+0x54>
  1019c4:	e3a03008 	mov	r3, #8
  1019c8:	ea000006 	b	1019e8 <rt_mq_send+0x70>
    return syscall(_NRSYS_mq_send, mq->data, buffer, size);
  1019cc:	e51b3008 	ldr	r3, [fp, #-8]
  1019d0:	e5931004 	ldr	r1, [r3, #4]
  1019d4:	e51b3010 	ldr	r3, [fp, #-16]
  1019d8:	e51b200c 	ldr	r2, [fp, #-12]
  1019dc:	e3a00025 	mov	r0, #37	; 0x25
  1019e0:	eb00ea8f 	bl	13c424 <syscall>
  1019e4:	e1a03000 	mov	r3, r0
}
  1019e8:	e1a00003 	mov	r0, r3
  1019ec:	e24bd004 	sub	sp, fp, #4
  1019f0:	e8bd8800 	pop	{fp, pc}

001019f4 <rt_mq_urgent>:

rt_err_t rt_mq_urgent(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  1019f4:	e92d4800 	push	{fp, lr}
  1019f8:	e28db004 	add	fp, sp, #4
  1019fc:	e24dd010 	sub	sp, sp, #16
  101a00:	e50b0008 	str	r0, [fp, #-8]
  101a04:	e50b100c 	str	r1, [fp, #-12]
  101a08:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a0c:	e51b3008 	ldr	r3, [fp, #-8]
  101a10:	e3530000 	cmp	r3, #0
  101a14:	0a000003 	beq	101a28 <rt_mq_urgent+0x34>
  101a18:	e51b3008 	ldr	r3, [fp, #-8]
  101a1c:	e5933004 	ldr	r3, [r3, #4]
  101a20:	e3530000 	cmp	r3, #0
  101a24:	1a000001 	bne	101a30 <rt_mq_urgent+0x3c>
  101a28:	e3a03008 	mov	r3, #8
  101a2c:	ea00000c 	b	101a64 <rt_mq_urgent+0x70>
  101a30:	e51b3008 	ldr	r3, [fp, #-8]
  101a34:	e5933000 	ldr	r3, [r3]
  101a38:	e3530006 	cmp	r3, #6
  101a3c:	0a000001 	beq	101a48 <rt_mq_urgent+0x54>
  101a40:	e3a03008 	mov	r3, #8
  101a44:	ea000006 	b	101a64 <rt_mq_urgent+0x70>
    return syscall(_NRSYS_mq_urgent, mq->data, buffer, size);
  101a48:	e51b3008 	ldr	r3, [fp, #-8]
  101a4c:	e5931004 	ldr	r1, [r3, #4]
  101a50:	e51b3010 	ldr	r3, [fp, #-16]
  101a54:	e51b200c 	ldr	r2, [fp, #-12]
  101a58:	e3a00026 	mov	r0, #38	; 0x26
  101a5c:	eb00ea70 	bl	13c424 <syscall>
  101a60:	e1a03000 	mov	r3, r0
}
  101a64:	e1a00003 	mov	r0, r3
  101a68:	e24bd004 	sub	sp, fp, #4
  101a6c:	e8bd8800 	pop	{fp, pc}

00101a70 <rt_mq_recv>:

rt_err_t rt_mq_recv(rt_mq_t    mq,
                    void      *buffer,
                    rt_size_t  size,
                    rt_int32_t timeout)
{
  101a70:	e92d4800 	push	{fp, lr}
  101a74:	e28db004 	add	fp, sp, #4
  101a78:	e24dd018 	sub	sp, sp, #24
  101a7c:	e50b0008 	str	r0, [fp, #-8]
  101a80:	e50b100c 	str	r1, [fp, #-12]
  101a84:	e50b2010 	str	r2, [fp, #-16]
  101a88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a8c:	e51b3008 	ldr	r3, [fp, #-8]
  101a90:	e3530000 	cmp	r3, #0
  101a94:	0a000003 	beq	101aa8 <rt_mq_recv+0x38>
  101a98:	e51b3008 	ldr	r3, [fp, #-8]
  101a9c:	e5933004 	ldr	r3, [r3, #4]
  101aa0:	e3530000 	cmp	r3, #0
  101aa4:	1a000001 	bne	101ab0 <rt_mq_recv+0x40>
  101aa8:	e3a03008 	mov	r3, #8
  101aac:	ea00000e 	b	101aec <rt_mq_recv+0x7c>
  101ab0:	e51b3008 	ldr	r3, [fp, #-8]
  101ab4:	e5933000 	ldr	r3, [r3]
  101ab8:	e3530006 	cmp	r3, #6
  101abc:	0a000001 	beq	101ac8 <rt_mq_recv+0x58>
  101ac0:	e3a03008 	mov	r3, #8
  101ac4:	ea000008 	b	101aec <rt_mq_recv+0x7c>
    return syscall(_NRSYS_mq_recv, mq->data, buffer, size, timeout);
  101ac8:	e51b3008 	ldr	r3, [fp, #-8]
  101acc:	e5931004 	ldr	r1, [r3, #4]
  101ad0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101ad4:	e58d3000 	str	r3, [sp]
  101ad8:	e51b3010 	ldr	r3, [fp, #-16]
  101adc:	e51b200c 	ldr	r2, [fp, #-12]
  101ae0:	e3a00027 	mov	r0, #39	; 0x27
  101ae4:	eb00ea4e 	bl	13c424 <syscall>
  101ae8:	e1a03000 	mov	r3, r0
}
  101aec:	e1a00003 	mov	r0, r3
  101af0:	e24bd004 	sub	sp, fp, #4
  101af4:	e8bd8800 	pop	{fp, pc}

00101af8 <rt_event_create>:

rt_event_t rt_event_create(const char *name, rt_uint8_t flag)
{
  101af8:	e92d4800 	push	{fp, lr}
  101afc:	e28db004 	add	fp, sp, #4
  101b00:	e24dd010 	sub	sp, sp, #16
  101b04:	e50b0010 	str	r0, [fp, #-16]
  101b08:	e1a03001 	mov	r3, r1
  101b0c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101b10:	e3a00008 	mov	r0, #8
  101b14:	eb00edff 	bl	13d318 <malloc>
  101b18:	e1a03000 	mov	r3, r0
  101b1c:	e50b3008 	str	r3, [fp, #-8]
  101b20:	e51b3008 	ldr	r3, [fp, #-8]
  101b24:	e3530000 	cmp	r3, #0
  101b28:	1a000001 	bne	101b34 <rt_event_create+0x3c>
  101b2c:	e3a03000 	mov	r3, #0
  101b30:	ea000015 	b	101b8c <rt_event_create+0x94>
  101b34:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  101b38:	e1a02003 	mov	r2, r3
  101b3c:	e51b1010 	ldr	r1, [fp, #-16]
  101b40:	e3a0001a 	mov	r0, #26
  101b44:	eb00ea36 	bl	13c424 <syscall>
  101b48:	e1a03000 	mov	r3, r0
  101b4c:	e1a02003 	mov	r2, r3
  101b50:	e51b3008 	ldr	r3, [fp, #-8]
  101b54:	e5832004 	str	r2, [r3, #4]
  101b58:	e51b3008 	ldr	r3, [fp, #-8]
  101b5c:	e5933004 	ldr	r3, [r3, #4]
  101b60:	e3530000 	cmp	r3, #0
  101b64:	0a000003 	beq	101b78 <rt_event_create+0x80>
  101b68:	e51b3008 	ldr	r3, [fp, #-8]
  101b6c:	e3a02004 	mov	r2, #4
  101b70:	e5832000 	str	r2, [r3]
  101b74:	ea000003 	b	101b88 <rt_event_create+0x90>
  101b78:	e51b0008 	ldr	r0, [fp, #-8]
  101b7c:	eb00efa1 	bl	13da08 <free>
  101b80:	e3a03000 	mov	r3, #0
  101b84:	e50b3008 	str	r3, [fp, #-8]
  101b88:	e51b3008 	ldr	r3, [fp, #-8]
}
  101b8c:	e1a00003 	mov	r0, r3
  101b90:	e24bd004 	sub	sp, fp, #4
  101b94:	e8bd8800 	pop	{fp, pc}

00101b98 <rt_event_init>:

rt_err_t rt_event_init(rt_event_t event, const char *name, rt_uint8_t flag)
{
  101b98:	e92d4800 	push	{fp, lr}
  101b9c:	e28db004 	add	fp, sp, #4
  101ba0:	e24dd010 	sub	sp, sp, #16
  101ba4:	e50b0008 	str	r0, [fp, #-8]
  101ba8:	e50b100c 	str	r1, [fp, #-12]
  101bac:	e1a03002 	mov	r3, r2
  101bb0:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(event, RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101bb4:	e51b3008 	ldr	r3, [fp, #-8]
  101bb8:	e3530000 	cmp	r3, #0
  101bbc:	1a000001 	bne	101bc8 <rt_event_init+0x30>
  101bc0:	e3a03008 	mov	r3, #8
  101bc4:	ea000012 	b	101c14 <rt_event_init+0x7c>
  101bc8:	e55b300d 	ldrb	r3, [fp, #-13]
  101bcc:	e1a02003 	mov	r2, r3
  101bd0:	e51b100c 	ldr	r1, [fp, #-12]
  101bd4:	e3a0001a 	mov	r0, #26
  101bd8:	eb00ea11 	bl	13c424 <syscall>
  101bdc:	e1a03000 	mov	r3, r0
  101be0:	e1a02003 	mov	r2, r3
  101be4:	e51b3008 	ldr	r3, [fp, #-8]
  101be8:	e5832004 	str	r2, [r3, #4]
  101bec:	e51b3008 	ldr	r3, [fp, #-8]
  101bf0:	e5933004 	ldr	r3, [r3, #4]
  101bf4:	e3530000 	cmp	r3, #0
  101bf8:	0a000004 	beq	101c10 <rt_event_init+0x78>
  101bfc:	e51b3008 	ldr	r3, [fp, #-8]
  101c00:	e3a02004 	mov	r2, #4
  101c04:	e5832000 	str	r2, [r3]
  101c08:	e3a03000 	mov	r3, #0
  101c0c:	ea000000 	b	101c14 <rt_event_init+0x7c>
  101c10:	e3a03001 	mov	r3, #1
}
  101c14:	e1a00003 	mov	r0, r3
  101c18:	e24bd004 	sub	sp, fp, #4
  101c1c:	e8bd8800 	pop	{fp, pc}

00101c20 <rt_event_delete>:

rt_err_t rt_event_delete(rt_event_t event)
{
  101c20:	e92d4800 	push	{fp, lr}
  101c24:	e28db004 	add	fp, sp, #4
  101c28:	e24dd010 	sub	sp, sp, #16
  101c2c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101c30:	e51b3010 	ldr	r3, [fp, #-16]
  101c34:	e3530000 	cmp	r3, #0
  101c38:	0a000003 	beq	101c4c <rt_event_delete+0x2c>
  101c3c:	e51b3010 	ldr	r3, [fp, #-16]
  101c40:	e5933004 	ldr	r3, [r3, #4]
  101c44:	e3530000 	cmp	r3, #0
  101c48:	1a000001 	bne	101c54 <rt_event_delete+0x34>
  101c4c:	e3a03008 	mov	r3, #8
  101c50:	ea000013 	b	101ca4 <rt_event_delete+0x84>
  101c54:	e51b3010 	ldr	r3, [fp, #-16]
  101c58:	e5933000 	ldr	r3, [r3]
  101c5c:	e3530004 	cmp	r3, #4
  101c60:	0a000001 	beq	101c6c <rt_event_delete+0x4c>
  101c64:	e3a03008 	mov	r3, #8
  101c68:	ea00000d 	b	101ca4 <rt_event_delete+0x84>
  101c6c:	e51b3010 	ldr	r3, [fp, #-16]
  101c70:	e5933004 	ldr	r3, [r3, #4]
  101c74:	e1a01003 	mov	r1, r3
  101c78:	e3a0001b 	mov	r0, #27
  101c7c:	eb00e9e8 	bl	13c424 <syscall>
  101c80:	e50b0008 	str	r0, [fp, #-8]
  101c84:	e51b3008 	ldr	r3, [fp, #-8]
  101c88:	e3530000 	cmp	r3, #0
  101c8c:	0a000001 	beq	101c98 <rt_event_delete+0x78>
  101c90:	e51b3008 	ldr	r3, [fp, #-8]
  101c94:	ea000002 	b	101ca4 <rt_event_delete+0x84>
  101c98:	e51b0010 	ldr	r0, [fp, #-16]
  101c9c:	eb00ef59 	bl	13da08 <free>
  101ca0:	e3a03000 	mov	r3, #0
}
  101ca4:	e1a00003 	mov	r0, r3
  101ca8:	e24bd004 	sub	sp, fp, #4
  101cac:	e8bd8800 	pop	{fp, pc}

00101cb0 <rt_event_detach>:

rt_err_t rt_event_detach(rt_event_t event)
{
  101cb0:	e92d4800 	push	{fp, lr}
  101cb4:	e28db004 	add	fp, sp, #4
  101cb8:	e24dd010 	sub	sp, sp, #16
  101cbc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101cc0:	e51b3010 	ldr	r3, [fp, #-16]
  101cc4:	e3530000 	cmp	r3, #0
  101cc8:	0a000003 	beq	101cdc <rt_event_detach+0x2c>
  101ccc:	e51b3010 	ldr	r3, [fp, #-16]
  101cd0:	e5933004 	ldr	r3, [r3, #4]
  101cd4:	e3530000 	cmp	r3, #0
  101cd8:	1a000001 	bne	101ce4 <rt_event_detach+0x34>
  101cdc:	e3a03008 	mov	r3, #8
  101ce0:	ea000017 	b	101d44 <rt_event_detach+0x94>
  101ce4:	e51b3010 	ldr	r3, [fp, #-16]
  101ce8:	e5933000 	ldr	r3, [r3]
  101cec:	e3530004 	cmp	r3, #4
  101cf0:	0a000001 	beq	101cfc <rt_event_detach+0x4c>
  101cf4:	e3a03008 	mov	r3, #8
  101cf8:	ea000011 	b	101d44 <rt_event_detach+0x94>
  101cfc:	e51b3010 	ldr	r3, [fp, #-16]
  101d00:	e5933004 	ldr	r3, [r3, #4]
  101d04:	e1a01003 	mov	r1, r3
  101d08:	e3a0001b 	mov	r0, #27
  101d0c:	eb00e9c4 	bl	13c424 <syscall>
  101d10:	e50b0008 	str	r0, [fp, #-8]
  101d14:	e51b3008 	ldr	r3, [fp, #-8]
  101d18:	e3530000 	cmp	r3, #0
  101d1c:	0a000001 	beq	101d28 <rt_event_detach+0x78>
  101d20:	e51b3008 	ldr	r3, [fp, #-8]
  101d24:	ea000006 	b	101d44 <rt_event_detach+0x94>
  101d28:	e51b3010 	ldr	r3, [fp, #-16]
  101d2c:	e3a02000 	mov	r2, #0
  101d30:	e5832000 	str	r2, [r3]
  101d34:	e51b3010 	ldr	r3, [fp, #-16]
  101d38:	e3a02000 	mov	r2, #0
  101d3c:	e5832004 	str	r2, [r3, #4]
  101d40:	e3a03000 	mov	r3, #0
}
  101d44:	e1a00003 	mov	r0, r3
  101d48:	e24bd004 	sub	sp, fp, #4
  101d4c:	e8bd8800 	pop	{fp, pc}

00101d50 <rt_event_send>:

rt_err_t rt_event_send(rt_event_t event, rt_uint32_t set)
{
  101d50:	e92d4800 	push	{fp, lr}
  101d54:	e28db004 	add	fp, sp, #4
  101d58:	e24dd008 	sub	sp, sp, #8
  101d5c:	e50b0008 	str	r0, [fp, #-8]
  101d60:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101d64:	e51b3008 	ldr	r3, [fp, #-8]
  101d68:	e3530000 	cmp	r3, #0
  101d6c:	0a000003 	beq	101d80 <rt_event_send+0x30>
  101d70:	e51b3008 	ldr	r3, [fp, #-8]
  101d74:	e5933004 	ldr	r3, [r3, #4]
  101d78:	e3530000 	cmp	r3, #0
  101d7c:	1a000001 	bne	101d88 <rt_event_send+0x38>
  101d80:	e3a03008 	mov	r3, #8
  101d84:	ea00000c 	b	101dbc <rt_event_send+0x6c>
  101d88:	e51b3008 	ldr	r3, [fp, #-8]
  101d8c:	e5933000 	ldr	r3, [r3]
  101d90:	e3530004 	cmp	r3, #4
  101d94:	0a000001 	beq	101da0 <rt_event_send+0x50>
  101d98:	e3a03008 	mov	r3, #8
  101d9c:	ea000006 	b	101dbc <rt_event_send+0x6c>
    return syscall(_NRSYS_event_send, event->data, set);
  101da0:	e51b3008 	ldr	r3, [fp, #-8]
  101da4:	e5933004 	ldr	r3, [r3, #4]
  101da8:	e51b200c 	ldr	r2, [fp, #-12]
  101dac:	e1a01003 	mov	r1, r3
  101db0:	e3a0001c 	mov	r0, #28
  101db4:	eb00e99a 	bl	13c424 <syscall>
  101db8:	e1a03000 	mov	r3, r0
}
  101dbc:	e1a00003 	mov	r0, r3
  101dc0:	e24bd004 	sub	sp, fp, #4
  101dc4:	e8bd8800 	pop	{fp, pc}

00101dc8 <rt_event_recv>:
rt_err_t rt_event_recv(rt_event_t   event,
                       rt_uint32_t  set,
                       rt_uint8_t   opt,
                       rt_int32_t   timeout,
                       rt_uint32_t *recved)
{
  101dc8:	e92d4800 	push	{fp, lr}
  101dcc:	e28db004 	add	fp, sp, #4
  101dd0:	e24dd018 	sub	sp, sp, #24
  101dd4:	e50b0008 	str	r0, [fp, #-8]
  101dd8:	e50b100c 	str	r1, [fp, #-12]
  101ddc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  101de0:	e1a03002 	mov	r3, r2
  101de4:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101de8:	e51b3008 	ldr	r3, [fp, #-8]
  101dec:	e3530000 	cmp	r3, #0
  101df0:	0a000003 	beq	101e04 <rt_event_recv+0x3c>
  101df4:	e51b3008 	ldr	r3, [fp, #-8]
  101df8:	e5933004 	ldr	r3, [r3, #4]
  101dfc:	e3530000 	cmp	r3, #0
  101e00:	1a000001 	bne	101e0c <rt_event_recv+0x44>
  101e04:	e3a03008 	mov	r3, #8
  101e08:	ea000011 	b	101e54 <rt_event_recv+0x8c>
  101e0c:	e51b3008 	ldr	r3, [fp, #-8]
  101e10:	e5933000 	ldr	r3, [r3]
  101e14:	e3530004 	cmp	r3, #4
  101e18:	0a000001 	beq	101e24 <rt_event_recv+0x5c>
  101e1c:	e3a03008 	mov	r3, #8
  101e20:	ea00000b 	b	101e54 <rt_event_recv+0x8c>
    return syscall(_NRSYS_event_recv, event->data, set, opt, timeout, recved);
  101e24:	e51b3008 	ldr	r3, [fp, #-8]
  101e28:	e5931004 	ldr	r1, [r3, #4]
  101e2c:	e55b200d 	ldrb	r2, [fp, #-13]
  101e30:	e59b3004 	ldr	r3, [fp, #4]
  101e34:	e58d3004 	str	r3, [sp, #4]
  101e38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101e3c:	e58d3000 	str	r3, [sp]
  101e40:	e1a03002 	mov	r3, r2
  101e44:	e51b200c 	ldr	r2, [fp, #-12]
  101e48:	e3a0001d 	mov	r0, #29
  101e4c:	eb00e974 	bl	13c424 <syscall>
  101e50:	e1a03000 	mov	r3, r0
}
  101e54:	e1a00003 	mov	r0, r3
  101e58:	e24bd004 	sub	sp, fp, #4
  101e5c:	e8bd8800 	pop	{fp, pc}

00101e60 <rt_tick_get>:

rt_tick_t rt_tick_get(void)
{
  101e60:	e92d4800 	push	{fp, lr}
  101e64:	e28db004 	add	fp, sp, #4
    return (rt_tick_t)syscall(_NRSYS_rt_tick_get);
  101e68:	e3a00061 	mov	r0, #97	; 0x61
  101e6c:	eb00e96c 	bl	13c424 <syscall>
  101e70:	e1a03000 	mov	r3, r0
}
  101e74:	e1a00003 	mov	r0, r3
  101e78:	e8bd8800 	pop	{fp, pc}

00101e7c <rt_thread_mdelay>:

rt_err_t rt_thread_mdelay(rt_int32_t ms)
{
  101e7c:	e92d4800 	push	{fp, lr}
  101e80:	e28db004 	add	fp, sp, #4
  101e84:	e24dd008 	sub	sp, sp, #8
  101e88:	e50b0008 	str	r0, [fp, #-8]
    return (rt_err_t)syscall(_NRSYS_rt_thread_mdelay, ms);
  101e8c:	e51b1008 	ldr	r1, [fp, #-8]
  101e90:	e3a00066 	mov	r0, #102	; 0x66
  101e94:	eb00e962 	bl	13c424 <syscall>
  101e98:	e1a03000 	mov	r3, r0
}
  101e9c:	e1a00003 	mov	r0, r3
  101ea0:	e24bd004 	sub	sp, fp, #4
  101ea4:	e8bd8800 	pop	{fp, pc}

00101ea8 <lwp_shmget>:

int lwp_shmget(size_t key, size_t size, int create)
{
  101ea8:	e92d4800 	push	{fp, lr}
  101eac:	e28db004 	add	fp, sp, #4
  101eb0:	e24dd010 	sub	sp, sp, #16
  101eb4:	e50b0008 	str	r0, [fp, #-8]
  101eb8:	e50b100c 	str	r1, [fp, #-12]
  101ebc:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_shmget, key, size, create);
  101ec0:	e51b3010 	ldr	r3, [fp, #-16]
  101ec4:	e51b200c 	ldr	r2, [fp, #-12]
  101ec8:	e51b1008 	ldr	r1, [fp, #-8]
  101ecc:	e3a00037 	mov	r0, #55	; 0x37
  101ed0:	eb00e953 	bl	13c424 <syscall>
  101ed4:	e1a03000 	mov	r3, r0
}
  101ed8:	e1a00003 	mov	r0, r3
  101edc:	e24bd004 	sub	sp, fp, #4
  101ee0:	e8bd8800 	pop	{fp, pc}

00101ee4 <lwp_shmrm>:

int lwp_shmrm(int id)
{
  101ee4:	e92d4800 	push	{fp, lr}
  101ee8:	e28db004 	add	fp, sp, #4
  101eec:	e24dd008 	sub	sp, sp, #8
  101ef0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmrm, id);
  101ef4:	e51b1008 	ldr	r1, [fp, #-8]
  101ef8:	e3a00038 	mov	r0, #56	; 0x38
  101efc:	eb00e948 	bl	13c424 <syscall>
  101f00:	e1a03000 	mov	r3, r0
}
  101f04:	e1a00003 	mov	r0, r3
  101f08:	e24bd004 	sub	sp, fp, #4
  101f0c:	e8bd8800 	pop	{fp, pc}

00101f10 <lwp_shmat>:

void* lwp_shmat(int id, void* shm_vaddr)
{
  101f10:	e92d4800 	push	{fp, lr}
  101f14:	e28db004 	add	fp, sp, #4
  101f18:	e24dd008 	sub	sp, sp, #8
  101f1c:	e50b0008 	str	r0, [fp, #-8]
  101f20:	e50b100c 	str	r1, [fp, #-12]
    return (void*)syscall(_NRSYS_shmat, id, shm_vaddr);
  101f24:	e51b200c 	ldr	r2, [fp, #-12]
  101f28:	e51b1008 	ldr	r1, [fp, #-8]
  101f2c:	e3a00039 	mov	r0, #57	; 0x39
  101f30:	eb00e93b 	bl	13c424 <syscall>
  101f34:	e1a03000 	mov	r3, r0
}
  101f38:	e1a00003 	mov	r0, r3
  101f3c:	e24bd004 	sub	sp, fp, #4
  101f40:	e8bd8800 	pop	{fp, pc}

00101f44 <lwp_shmdt>:

int lwp_shmdt(void* shm_vaddr)
{
  101f44:	e92d4800 	push	{fp, lr}
  101f48:	e28db004 	add	fp, sp, #4
  101f4c:	e24dd008 	sub	sp, sp, #8
  101f50:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmdt, shm_vaddr);
  101f54:	e51b1008 	ldr	r1, [fp, #-8]
  101f58:	e3a0003a 	mov	r0, #58	; 0x3a
  101f5c:	eb00e930 	bl	13c424 <syscall>
  101f60:	e1a03000 	mov	r3, r0
}
  101f64:	e1a00003 	mov	r0, r3
  101f68:	e24bd004 	sub	sp, fp, #4
  101f6c:	e8bd8800 	pop	{fp, pc}

00101f70 <exec>:

int exec(char *filename, int argc, char **argv, char **envp)
{
  101f70:	e92d4800 	push	{fp, lr}
  101f74:	e28db004 	add	fp, sp, #4
  101f78:	e24dd018 	sub	sp, sp, #24
  101f7c:	e50b0008 	str	r0, [fp, #-8]
  101f80:	e50b100c 	str	r1, [fp, #-12]
  101f84:	e50b2010 	str	r2, [fp, #-16]
  101f88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (int)syscall(_NRSYS_exec, filename, argc, argv, envp);
  101f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101f90:	e58d3000 	str	r3, [sp]
  101f94:	e51b3010 	ldr	r3, [fp, #-16]
  101f98:	e51b200c 	ldr	r2, [fp, #-12]
  101f9c:	e51b1008 	ldr	r1, [fp, #-8]
  101fa0:	e3a0000d 	mov	r0, #13
  101fa4:	eb00e91e 	bl	13c424 <syscall>
  101fa8:	e1a03000 	mov	r3, r0
}
  101fac:	e1a00003 	mov	r0, r3
  101fb0:	e24bd004 	sub	sp, fp, #4
  101fb4:	e8bd8800 	pop	{fp, pc}

00101fb8 <lwp_kill>:

int lwp_kill(pid_t pid, int sig)
{
  101fb8:	e92d4800 	push	{fp, lr}
  101fbc:	e28db004 	add	fp, sp, #4
  101fc0:	e24dd008 	sub	sp, sp, #8
  101fc4:	e50b0008 	str	r0, [fp, #-8]
  101fc8:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_kill, pid, sig);
  101fcc:	e51b200c 	ldr	r2, [fp, #-12]
  101fd0:	e51b1008 	ldr	r1, [fp, #-8]
  101fd4:	e3a0000e 	mov	r0, #14
  101fd8:	eb00e911 	bl	13c424 <syscall>
  101fdc:	e1a03000 	mov	r3, r0
}
  101fe0:	e1a00003 	mov	r0, r3
  101fe4:	e24bd004 	sub	sp, fp, #4
  101fe8:	e8bd8800 	pop	{fp, pc}

00101fec <lwp_tkill>:

int lwp_tkill(int tid, int sig)
{
  101fec:	e92d4800 	push	{fp, lr}
  101ff0:	e28db004 	add	fp, sp, #4
  101ff4:	e24dd008 	sub	sp, sp, #8
  101ff8:	e50b0008 	str	r0, [fp, #-8]
  101ffc:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_tkill, tid, sig);
  102000:	e51b200c 	ldr	r2, [fp, #-12]
  102004:	e51b1008 	ldr	r1, [fp, #-8]
  102008:	e3a00069 	mov	r0, #105	; 0x69
  10200c:	eb00e904 	bl	13c424 <syscall>
  102010:	e1a03000 	mov	r3, r0
}
  102014:	e1a00003 	mov	r0, r3
  102018:	e24bd004 	sub	sp, fp, #4
  10201c:	e8bd8800 	pop	{fp, pc}

00102020 <waitpid>:

pid_t waitpid(pid_t pid, int *status, int options)
{
  102020:	e92d4800 	push	{fp, lr}
  102024:	e28db004 	add	fp, sp, #4
  102028:	e24dd010 	sub	sp, sp, #16
  10202c:	e50b0008 	str	r0, [fp, #-8]
  102030:	e50b100c 	str	r1, [fp, #-12]
  102034:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_waitpid, pid, status, options);
  102038:	e51b3010 	ldr	r3, [fp, #-16]
  10203c:	e51b200c 	ldr	r2, [fp, #-12]
  102040:	e51b1008 	ldr	r1, [fp, #-8]
  102044:	e3a0006e 	mov	r0, #110	; 0x6e
  102048:	eb00e8f5 	bl	13c424 <syscall>
  10204c:	e1a03000 	mov	r3, r0
}
  102050:	e1a00003 	mov	r0, r3
  102054:	e24bd004 	sub	sp, fp, #4
  102058:	e8bd8800 	pop	{fp, pc}

0010205c <rt_get_errno>:

rt_err_t rt_get_errno(void)
{
  10205c:	e92d4800 	push	{fp, lr}
  102060:	e28db004 	add	fp, sp, #4
    return (rt_err_t)syscall(_NRSYS_rt_get_errno);
  102064:	e3a0007a 	mov	r0, #122	; 0x7a
  102068:	eb00e8ed 	bl	13c424 <syscall>
  10206c:	e1a03000 	mov	r3, r0
}
  102070:	e1a00003 	mov	r0, r3
  102074:	e8bd8800 	pop	{fp, pc}

00102078 <rt_thread_find>:
#include <pthread.h>

void __pthread_init_run(void (*enter)(void *parameter), void *parameter);

rt_thread_t rt_thread_find(char *name)
{
  102078:	e92d4800 	push	{fp, lr}
  10207c:	e28db004 	add	fp, sp, #4
  102080:	e24dd008 	sub	sp, sp, #8
  102084:	e50b0008 	str	r0, [fp, #-8]
    return (rt_thread_t)syscall(_NRSYS_rt_thread_find, name);
  102088:	e51b1008 	ldr	r1, [fp, #-8]
  10208c:	e3a00044 	mov	r0, #68	; 0x44
  102090:	eb00e8e3 	bl	13c424 <syscall>
  102094:	e1a03000 	mov	r3, r0
}
  102098:	e1a00003 	mov	r0, r3
  10209c:	e24bd004 	sub	sp, fp, #4
  1020a0:	e8bd8800 	pop	{fp, pc}

001020a4 <rt_thread_user_entry>:
    void (*entry)(void *parameter);
    void *parameter;
};

static void rt_thread_user_entry(void *arg)
{
  1020a4:	e92d4800 	push	{fp, lr}
  1020a8:	e28db004 	add	fp, sp, #4
  1020ac:	e24dd018 	sub	sp, sp, #24
  1020b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct rt_thread_startup_ucontext *ucontext;
    void (*entry)(void *parameter);
    void *parameter;

    ucontext = (struct rt_thread_startup_ucontext *)arg;
  1020b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1020b8:	e50b3008 	str	r3, [fp, #-8]
    entry = ucontext->entry;
  1020bc:	e51b3008 	ldr	r3, [fp, #-8]
  1020c0:	e5933000 	ldr	r3, [r3]
  1020c4:	e50b300c 	str	r3, [fp, #-12]
    parameter = ucontext->parameter;
  1020c8:	e51b3008 	ldr	r3, [fp, #-8]
  1020cc:	e5933004 	ldr	r3, [r3, #4]
  1020d0:	e50b3010 	str	r3, [fp, #-16]
    rt_free(ucontext);
  1020d4:	e51b0008 	ldr	r0, [fp, #-8]
  1020d8:	eb0003b7 	bl	102fbc <rt_free>

    __pthread_init_run(entry, parameter);
  1020dc:	e51b1010 	ldr	r1, [fp, #-16]
  1020e0:	e51b000c 	ldr	r0, [fp, #-12]
  1020e4:	eb0102aa 	bl	142b94 <__pthread_init_run>
}
  1020e8:	e320f000 	nop	{0}
  1020ec:	e24bd004 	sub	sp, fp, #4
  1020f0:	e8bd8800 	pop	{fp, pc}

001020f4 <rt_thread_create>:
        void (*entry)(void *parameter),
        void       *parameter,
        rt_uint32_t stack_size,
        rt_uint8_t  priority,
        rt_uint32_t tick)
{
  1020f4:	e92d4800 	push	{fp, lr}
  1020f8:	e28db004 	add	fp, sp, #4
  1020fc:	e24dd030 	sub	sp, sp, #48	; 0x30
  102100:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  102104:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  102108:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10210c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    rt_thread_t thread;
    void * arg[] = {(void *)name, (void*)entry, (void*)parameter, (void*)(size_t)stack_size, (void*)(size_t)priority, (void*)(size_t)tick};
  102110:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  102114:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  102118:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10211c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  102120:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  102124:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  102128:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10212c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  102130:	e5db3004 	ldrb	r3, [fp, #4]
  102134:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  102138:	e59b3008 	ldr	r3, [fp, #8]
  10213c:	e50b3010 	str	r3, [fp, #-16]
    struct rt_thread_startup_ucontext *ucontext;

    ucontext = rt_malloc(sizeof *ucontext);
  102140:	e3a00008 	mov	r0, #8
  102144:	eb000392 	bl	102f94 <rt_malloc>
  102148:	e50b0008 	str	r0, [fp, #-8]
    if (!ucontext)
  10214c:	e51b3008 	ldr	r3, [fp, #-8]
  102150:	e3530000 	cmp	r3, #0
  102154:	1a000001 	bne	102160 <rt_thread_create+0x6c>
    {
        return RT_NULL;
  102158:	e3a03000 	mov	r3, #0
  10215c:	ea000016 	b	1021bc <rt_thread_create+0xc8>
    }
    ucontext->entry = entry;
  102160:	e51b3008 	ldr	r3, [fp, #-8]
  102164:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  102168:	e5832000 	str	r2, [r3]
    ucontext->parameter = parameter;
  10216c:	e51b3008 	ldr	r3, [fp, #-8]
  102170:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  102174:	e5832004 	str	r2, [r3, #4]
    arg[1] = rt_thread_user_entry;
  102178:	e30230a4 	movw	r3, #8356	; 0x20a4
  10217c:	e3403010 	movt	r3, #16
  102180:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    arg[2] = ucontext;
  102184:	e51b3008 	ldr	r3, [fp, #-8]
  102188:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    thread = (rt_thread_t)syscall(_NRSYS_thread_create, arg);
  10218c:	e24b3024 	sub	r3, fp, #36	; 0x24
  102190:	e1a01003 	mov	r1, r3
  102194:	e3a00028 	mov	r0, #40	; 0x28
  102198:	eb00e8a1 	bl	13c424 <syscall>
  10219c:	e1a03000 	mov	r3, r0
  1021a0:	e50b300c 	str	r3, [fp, #-12]
    if (!thread)
  1021a4:	e51b300c 	ldr	r3, [fp, #-12]
  1021a8:	e3530000 	cmp	r3, #0
  1021ac:	1a000001 	bne	1021b8 <rt_thread_create+0xc4>
    {
        rt_free(ucontext);
  1021b0:	e51b0008 	ldr	r0, [fp, #-8]
  1021b4:	eb000380 	bl	102fbc <rt_free>
    }
    return thread;
  1021b8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1021bc:	e1a00003 	mov	r0, r3
  1021c0:	e24bd004 	sub	sp, fp, #4
  1021c4:	e8bd8800 	pop	{fp, pc}

001021c8 <rt_thread_startup>:

rt_err_t rt_thread_startup(rt_thread_t thread)
{
  1021c8:	e92d4800 	push	{fp, lr}
  1021cc:	e28db004 	add	fp, sp, #4
  1021d0:	e24dd008 	sub	sp, sp, #8
  1021d4:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_startup, thread);
  1021d8:	e51b1008 	ldr	r1, [fp, #-8]
  1021dc:	e3a0002a 	mov	r0, #42	; 0x2a
  1021e0:	eb00e88f 	bl	13c424 <syscall>
  1021e4:	e1a03000 	mov	r3, r0
}
  1021e8:	e1a00003 	mov	r0, r3
  1021ec:	e24bd004 	sub	sp, fp, #4
  1021f0:	e8bd8800 	pop	{fp, pc}

001021f4 <rt_thread_self>:

rt_thread_t rt_thread_self(void)
{
  1021f4:	e92d4800 	push	{fp, lr}
  1021f8:	e28db004 	add	fp, sp, #4
    return (rt_thread_t)syscall(_NRSYS_thread_self);
  1021fc:	e3a0002b 	mov	r0, #43	; 0x2b
  102200:	eb00e887 	bl	13c424 <syscall>
  102204:	e1a03000 	mov	r3, r0
}
  102208:	e1a00003 	mov	r0, r3
  10220c:	e8bd8800 	pop	{fp, pc}

00102210 <rt_thread_delete>:

rt_err_t rt_thread_delete(rt_thread_t thread)
{
  102210:	e92d4800 	push	{fp, lr}
  102214:	e28db004 	add	fp, sp, #4
  102218:	e24dd008 	sub	sp, sp, #8
  10221c:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_delete, thread);
  102220:	e51b1008 	ldr	r1, [fp, #-8]
  102224:	e3a00029 	mov	r0, #41	; 0x29
  102228:	eb00e87d 	bl	13c424 <syscall>
  10222c:	e1a03000 	mov	r3, r0
}
  102230:	e1a00003 	mov	r0, r3
  102234:	e24bd004 	sub	sp, fp, #4
  102238:	e8bd8800 	pop	{fp, pc}

0010223c <rt_enter_critical>:

void rt_enter_critical(void)
{
  10223c:	e92d4800 	push	{fp, lr}
  102240:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_enter_critical);
  102244:	e3a00032 	mov	r0, #50	; 0x32
  102248:	eb00e875 	bl	13c424 <syscall>
}
  10224c:	e320f000 	nop	{0}
  102250:	e8bd8800 	pop	{fp, pc}

00102254 <rt_exit_critical>:

void rt_exit_critical(void)
{
  102254:	e92d4800 	push	{fp, lr}
  102258:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_exit_critical);
  10225c:	e3a00033 	mov	r0, #51	; 0x33
  102260:	eb00e86f 	bl	13c424 <syscall>
}
  102264:	e320f000 	nop	{0}
  102268:	e8bd8800 	pop	{fp, pc}

0010226c <cacheflush>:

int cacheflush(void *addr, int size, int cache)
{
  10226c:	e92d4800 	push	{fp, lr}
  102270:	e28db004 	add	fp, sp, #4
  102274:	e24dd010 	sub	sp, sp, #16
  102278:	e50b0008 	str	r0, [fp, #-8]
  10227c:	e50b100c 	str	r1, [fp, #-12]
  102280:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_cacheflush, addr, size, cache);
  102284:	e51b3010 	ldr	r3, [fp, #-16]
  102288:	e51b200c 	ldr	r2, [fp, #-12]
  10228c:	e51b1008 	ldr	r1, [fp, #-8]
  102290:	e3a0006b 	mov	r0, #107	; 0x6b
  102294:	eb00e862 	bl	13c424 <syscall>
  102298:	e1a03000 	mov	r3, r0
}
  10229c:	e1a00003 	mov	r0, r3
  1022a0:	e24bd004 	sub	sp, fp, #4
  1022a4:	e8bd8800 	pop	{fp, pc}

001022a8 <rt_list_init>:
 * @brief initialize a list
 *
 * @param l list to be initialized
 */
rt_inline void rt_list_init(rt_list_t *l)
{
  1022a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022ac:	e28db000 	add	fp, sp, #0
  1022b0:	e24dd00c 	sub	sp, sp, #12
  1022b4:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  1022b8:	e51b3008 	ldr	r3, [fp, #-8]
  1022bc:	e51b2008 	ldr	r2, [fp, #-8]
  1022c0:	e5832004 	str	r2, [r3, #4]
  1022c4:	e51b3008 	ldr	r3, [fp, #-8]
  1022c8:	e5932004 	ldr	r2, [r3, #4]
  1022cc:	e51b3008 	ldr	r3, [fp, #-8]
  1022d0:	e5832000 	str	r2, [r3]
}
  1022d4:	e320f000 	nop	{0}
  1022d8:	e28bd000 	add	sp, fp, #0
  1022dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1022e0:	e12fff1e 	bx	lr

001022e4 <rt_list_insert_after>:
 *
 * @param l list to insert it
 * @param n new node to be inserted
 */
rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
{
  1022e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022e8:	e28db000 	add	fp, sp, #0
  1022ec:	e24dd00c 	sub	sp, sp, #12
  1022f0:	e50b0008 	str	r0, [fp, #-8]
  1022f4:	e50b100c 	str	r1, [fp, #-12]
    l->next->prev = n;
  1022f8:	e51b3008 	ldr	r3, [fp, #-8]
  1022fc:	e5933000 	ldr	r3, [r3]
  102300:	e51b200c 	ldr	r2, [fp, #-12]
  102304:	e5832004 	str	r2, [r3, #4]
    n->next = l->next;
  102308:	e51b3008 	ldr	r3, [fp, #-8]
  10230c:	e5932000 	ldr	r2, [r3]
  102310:	e51b300c 	ldr	r3, [fp, #-12]
  102314:	e5832000 	str	r2, [r3]

    l->next = n;
  102318:	e51b3008 	ldr	r3, [fp, #-8]
  10231c:	e51b200c 	ldr	r2, [fp, #-12]
  102320:	e5832000 	str	r2, [r3]
    n->prev = l;
  102324:	e51b300c 	ldr	r3, [fp, #-12]
  102328:	e51b2008 	ldr	r2, [fp, #-8]
  10232c:	e5832004 	str	r2, [r3, #4]
}
  102330:	e320f000 	nop	{0}
  102334:	e28bd000 	add	sp, fp, #0
  102338:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10233c:	e12fff1e 	bx	lr

00102340 <rt_list_remove>:
/**
 * @brief remove node from list.
 * @param n the node to remove from the list.
 */
rt_inline void rt_list_remove(rt_list_t *n)
{
  102340:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102344:	e28db000 	add	fp, sp, #0
  102348:	e24dd00c 	sub	sp, sp, #12
  10234c:	e50b0008 	str	r0, [fp, #-8]
    n->next->prev = n->prev;
  102350:	e51b3008 	ldr	r3, [fp, #-8]
  102354:	e5933000 	ldr	r3, [r3]
  102358:	e51b2008 	ldr	r2, [fp, #-8]
  10235c:	e5922004 	ldr	r2, [r2, #4]
  102360:	e5832004 	str	r2, [r3, #4]
    n->prev->next = n->next;
  102364:	e51b3008 	ldr	r3, [fp, #-8]
  102368:	e5933004 	ldr	r3, [r3, #4]
  10236c:	e51b2008 	ldr	r2, [fp, #-8]
  102370:	e5922000 	ldr	r2, [r2]
  102374:	e5832000 	str	r2, [r3]

    n->next = n->prev = n;
  102378:	e51b3008 	ldr	r3, [fp, #-8]
  10237c:	e51b2008 	ldr	r2, [fp, #-8]
  102380:	e5832004 	str	r2, [r3, #4]
  102384:	e51b3008 	ldr	r3, [fp, #-8]
  102388:	e5932004 	ldr	r2, [r3, #4]
  10238c:	e51b3008 	ldr	r3, [fp, #-8]
  102390:	e5832000 	str	r2, [r3]
}
  102394:	e320f000 	nop	{0}
  102398:	e28bd000 	add	sp, fp, #0
  10239c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023a0:	e12fff1e 	bx	lr

001023a4 <rt_list_isempty>:
/**
 * @brief tests whether a list is empty
 * @param l the list to test.
 */
rt_inline int rt_list_isempty(const rt_list_t *l)
{
  1023a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1023a8:	e28db000 	add	fp, sp, #0
  1023ac:	e24dd00c 	sub	sp, sp, #12
  1023b0:	e50b0008 	str	r0, [fp, #-8]
    return l->next == l;
  1023b4:	e51b3008 	ldr	r3, [fp, #-8]
  1023b8:	e5933000 	ldr	r3, [r3]
  1023bc:	e51b2008 	ldr	r2, [fp, #-8]
  1023c0:	e1520003 	cmp	r2, r3
  1023c4:	03a03001 	moveq	r3, #1
  1023c8:	13a03000 	movne	r3, #0
  1023cc:	e6ef3073 	uxtb	r3, r3
}
  1023d0:	e1a00003 	mov	r0, r3
  1023d4:	e28bd000 	add	sp, fp, #0
  1023d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023dc:	e12fff1e 	bx	lr

001023e0 <_rt_timer_init>:
static void _rt_timer_init(rt_timer_t timer,
                           void (*timeout)(void *parameter),
                           void      *parameter,
                           rt_tick_t  time,
                           rt_uint8_t flag)
{
  1023e0:	e92d4800 	push	{fp, lr}
  1023e4:	e28db004 	add	fp, sp, #4
  1023e8:	e24dd018 	sub	sp, sp, #24
  1023ec:	e50b0010 	str	r0, [fp, #-16]
  1023f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1023f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1023f8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int i;

    /* set flag */
    timer->parent.flag  = flag;
  1023fc:	e51b3010 	ldr	r3, [fp, #-16]
  102400:	e5db2004 	ldrb	r2, [fp, #4]
  102404:	e5c32009 	strb	r2, [r3, #9]

    /* set deactivated */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102408:	e51b3010 	ldr	r3, [fp, #-16]
  10240c:	e5d33009 	ldrb	r3, [r3, #9]
  102410:	e3c33001 	bic	r3, r3, #1
  102414:	e6ef2073 	uxtb	r2, r3
  102418:	e51b3010 	ldr	r3, [fp, #-16]
  10241c:	e5c32009 	strb	r2, [r3, #9]

    timer->timeout_func = timeout;
  102420:	e51b3010 	ldr	r3, [fp, #-16]
  102424:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  102428:	e583201c 	str	r2, [r3, #28]
    timer->parameter    = parameter;
  10242c:	e51b3010 	ldr	r3, [fp, #-16]
  102430:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102434:	e5832020 	str	r2, [r3, #32]

    timer->timeout_tick = 0;
  102438:	e51b3010 	ldr	r3, [fp, #-16]
  10243c:	e3a02000 	mov	r2, #0
  102440:	e5832028 	str	r2, [r3, #40]	; 0x28
    timer->init_tick    = time;
  102444:	e51b3010 	ldr	r3, [fp, #-16]
  102448:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10244c:	e5832024 	str	r2, [r3, #36]	; 0x24

    /* initialize timer list */
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102450:	e3a03000 	mov	r3, #0
  102454:	e50b3008 	str	r3, [fp, #-8]
  102458:	ea00000a 	b	102488 <_rt_timer_init+0xa8>
    {
        rt_list_init(&(timer->row[i]));
  10245c:	e51b3008 	ldr	r3, [fp, #-8]
  102460:	e2833002 	add	r3, r3, #2
  102464:	e1a03183 	lsl	r3, r3, #3
  102468:	e51b2010 	ldr	r2, [fp, #-16]
  10246c:	e0823003 	add	r3, r2, r3
  102470:	e2833004 	add	r3, r3, #4
  102474:	e1a00003 	mov	r0, r3
  102478:	ebffff8a 	bl	1022a8 <rt_list_init>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10247c:	e51b3008 	ldr	r3, [fp, #-8]
  102480:	e2833001 	add	r3, r3, #1
  102484:	e50b3008 	str	r3, [fp, #-8]
  102488:	e51b3008 	ldr	r3, [fp, #-8]
  10248c:	e3530000 	cmp	r3, #0
  102490:	dafffff1 	ble	10245c <_rt_timer_init+0x7c>
    }
}
  102494:	e320f000 	nop	{0}
  102498:	e24bd004 	sub	sp, fp, #4
  10249c:	e8bd8800 	pop	{fp, pc}

001024a0 <rt_timer_list_next_timeout>:

/* the fist timer always in the last row */
static rt_tick_t rt_timer_list_next_timeout(rt_list_t timer_list[])
{
  1024a0:	e92d4800 	push	{fp, lr}
  1024a4:	e28db004 	add	fp, sp, #4
  1024a8:	e24dd010 	sub	sp, sp, #16
  1024ac:	e50b0010 	str	r0, [fp, #-16]
    struct rt_timer *timer;

    if (rt_list_isempty(&timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
  1024b0:	e51b0010 	ldr	r0, [fp, #-16]
  1024b4:	ebffffba 	bl	1023a4 <rt_list_isempty>
  1024b8:	e1a03000 	mov	r3, r0
  1024bc:	e3530000 	cmp	r3, #0
  1024c0:	0a000001 	beq	1024cc <rt_timer_list_next_timeout+0x2c>
        return RT_TICK_MAX;
  1024c4:	e3e03000 	mvn	r3, #0
  1024c8:	ea000005 	b	1024e4 <rt_timer_list_next_timeout+0x44>

    timer = rt_list_entry(timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
  1024cc:	e51b3010 	ldr	r3, [fp, #-16]
  1024d0:	e5933000 	ldr	r3, [r3]
  1024d4:	e2433014 	sub	r3, r3, #20
  1024d8:	e50b3008 	str	r3, [fp, #-8]
                          struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);

    return timer->timeout_tick;
  1024dc:	e51b3008 	ldr	r3, [fp, #-8]
  1024e0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
}
  1024e4:	e1a00003 	mov	r0, r3
  1024e8:	e24bd004 	sub	sp, fp, #4
  1024ec:	e8bd8800 	pop	{fp, pc}

001024f0 <_rt_timer_remove>:

rt_inline void _rt_timer_remove(rt_timer_t timer)
{
  1024f0:	e92d4800 	push	{fp, lr}
  1024f4:	e28db004 	add	fp, sp, #4
  1024f8:	e24dd010 	sub	sp, sp, #16
  1024fc:	e50b0010 	str	r0, [fp, #-16]
    int i;

    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102500:	e3a03000 	mov	r3, #0
  102504:	e50b3008 	str	r3, [fp, #-8]
  102508:	ea00000a 	b	102538 <_rt_timer_remove+0x48>
    {
        rt_list_remove(&timer->row[i]);
  10250c:	e51b3008 	ldr	r3, [fp, #-8]
  102510:	e2833002 	add	r3, r3, #2
  102514:	e1a03183 	lsl	r3, r3, #3
  102518:	e51b2010 	ldr	r2, [fp, #-16]
  10251c:	e0823003 	add	r3, r2, r3
  102520:	e2833004 	add	r3, r3, #4
  102524:	e1a00003 	mov	r0, r3
  102528:	ebffff84 	bl	102340 <rt_list_remove>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10252c:	e51b3008 	ldr	r3, [fp, #-8]
  102530:	e2833001 	add	r3, r3, #1
  102534:	e50b3008 	str	r3, [fp, #-8]
  102538:	e51b3008 	ldr	r3, [fp, #-8]
  10253c:	e3530000 	cmp	r3, #0
  102540:	dafffff1 	ble	10250c <_rt_timer_remove+0x1c>
    }
}
  102544:	e320f000 	nop	{0}
  102548:	e24bd004 	sub	sp, fp, #4
  10254c:	e8bd8800 	pop	{fp, pc}

00102550 <rt_timer_init>:
                   const char *name,
                   void (*timeout)(void *parameter),
                   void       *parameter,
                   rt_tick_t   time,
                   rt_uint8_t  flag)
{
  102550:	e92d4800 	push	{fp, lr}
  102554:	e28db004 	add	fp, sp, #4
  102558:	e24dd018 	sub	sp, sp, #24
  10255c:	e50b0008 	str	r0, [fp, #-8]
  102560:	e50b100c 	str	r1, [fp, #-12]
  102564:	e50b2010 	str	r2, [fp, #-16]
  102568:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    _rt_timer_init(timer, timeout, parameter, time, flag);
  10256c:	e5db3008 	ldrb	r3, [fp, #8]
  102570:	e58d3000 	str	r3, [sp]
  102574:	e59b3004 	ldr	r3, [fp, #4]
  102578:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10257c:	e51b1010 	ldr	r1, [fp, #-16]
  102580:	e51b0008 	ldr	r0, [fp, #-8]
  102584:	ebffff95 	bl	1023e0 <_rt_timer_init>
}
  102588:	e320f000 	nop	{0}
  10258c:	e24bd004 	sub	sp, fp, #4
  102590:	e8bd8800 	pop	{fp, pc}

00102594 <rt_timer_detach>:
 * @param timer the static timer object
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_detach(rt_timer_t timer)
{
  102594:	e92d4800 	push	{fp, lr}
  102598:	e28db004 	add	fp, sp, #4
  10259c:	e24dd008 	sub	sp, sp, #8
  1025a0:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1025a4:	e320f000 	nop	{0}
  1025a8:	e30d3410 	movw	r3, #54288	; 0xd410
  1025ac:	e3403014 	movt	r3, #20
  1025b0:	e5933000 	ldr	r3, [r3]
  1025b4:	e3e01000 	mvn	r1, #0
  1025b8:	e1a00003 	mov	r0, r3
  1025bc:	ebfffa4f 	bl	100f00 <rt_mutex_take>
  1025c0:	e1a03000 	mov	r3, r0
  1025c4:	e3530000 	cmp	r3, #0
  1025c8:	1afffff6 	bne	1025a8 <rt_timer_detach+0x14>

    _rt_timer_remove(timer);
  1025cc:	e51b0008 	ldr	r0, [fp, #-8]
  1025d0:	ebffffc6 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  1025d4:	e30d3410 	movw	r3, #54288	; 0xd410
  1025d8:	e3403014 	movt	r3, #20
  1025dc:	e5933000 	ldr	r3, [r3]
  1025e0:	e1a00003 	mov	r0, r3
  1025e4:	ebfffa63 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1025e8:	e3a03000 	mov	r3, #0
}
  1025ec:	e1a00003 	mov	r0, r3
  1025f0:	e24bd004 	sub	sp, fp, #4
  1025f4:	e8bd8800 	pop	{fp, pc}

001025f8 <rt_timer_create>:
rt_timer_t rt_timer_create(const char *name,
                           void (*timeout)(void *parameter),
                           void       *parameter,
                           rt_tick_t   time,
                           rt_uint8_t  flag)
{
  1025f8:	e92d4800 	push	{fp, lr}
  1025fc:	e28db004 	add	fp, sp, #4
  102600:	e24dd020 	sub	sp, sp, #32
  102604:	e50b0010 	str	r0, [fp, #-16]
  102608:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10260c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  102610:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct rt_timer *timer;

    /* allocate a timer object */
    timer = (struct rt_timer *)malloc(sizeof(struct rt_timer));
  102614:	e3a0002c 	mov	r0, #44	; 0x2c
  102618:	eb00eb3e 	bl	13d318 <malloc>
  10261c:	e1a03000 	mov	r3, r0
  102620:	e50b3008 	str	r3, [fp, #-8]
    if (timer == RT_NULL)
  102624:	e51b3008 	ldr	r3, [fp, #-8]
  102628:	e3530000 	cmp	r3, #0
  10262c:	1a000001 	bne	102638 <rt_timer_create+0x40>
    {
        return RT_NULL;
  102630:	e3a03000 	mov	r3, #0
  102634:	ea000007 	b	102658 <rt_timer_create+0x60>
    }

    _rt_timer_init(timer, timeout, parameter, time, flag);
  102638:	e5db3004 	ldrb	r3, [fp, #4]
  10263c:	e58d3000 	str	r3, [sp]
  102640:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  102644:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102648:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10264c:	e51b0008 	ldr	r0, [fp, #-8]
  102650:	ebffff62 	bl	1023e0 <_rt_timer_init>

    return timer;
  102654:	e51b3008 	ldr	r3, [fp, #-8]
}
  102658:	e1a00003 	mov	r0, r3
  10265c:	e24bd004 	sub	sp, fp, #4
  102660:	e8bd8800 	pop	{fp, pc}

00102664 <rt_timer_delete>:
 * @param timer the timer to be deleted
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_delete(rt_timer_t timer)
{
  102664:	e92d4800 	push	{fp, lr}
  102668:	e28db004 	add	fp, sp, #4
  10266c:	e24dd008 	sub	sp, sp, #8
  102670:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102674:	e320f000 	nop	{0}
  102678:	e30d3410 	movw	r3, #54288	; 0xd410
  10267c:	e3403014 	movt	r3, #20
  102680:	e5933000 	ldr	r3, [r3]
  102684:	e3e01000 	mvn	r1, #0
  102688:	e1a00003 	mov	r0, r3
  10268c:	ebfffa1b 	bl	100f00 <rt_mutex_take>
  102690:	e1a03000 	mov	r3, r0
  102694:	e3530000 	cmp	r3, #0
  102698:	1afffff6 	bne	102678 <rt_timer_delete+0x14>

    _rt_timer_remove(timer);
  10269c:	e51b0008 	ldr	r0, [fp, #-8]
  1026a0:	ebffff92 	bl	1024f0 <_rt_timer_remove>

    /*free timer object */
    free(timer);
  1026a4:	e51b0008 	ldr	r0, [fp, #-8]
  1026a8:	eb00ecd6 	bl	13da08 <free>

    /* release mutex */
    rt_mutex_release(mutex);
  1026ac:	e30d3410 	movw	r3, #54288	; 0xd410
  1026b0:	e3403014 	movt	r3, #20
  1026b4:	e5933000 	ldr	r3, [r3]
  1026b8:	e1a00003 	mov	r0, r3
  1026bc:	ebfffa2d 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1026c0:	e3a03000 	mov	r3, #0
}
  1026c4:	e1a00003 	mov	r0, r3
  1026c8:	e24bd004 	sub	sp, fp, #4
  1026cc:	e8bd8800 	pop	{fp, pc}

001026d0 <rt_timer_start>:
 * @param timer the timer to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_start(rt_timer_t timer)
{
  1026d0:	e92d4800 	push	{fp, lr}
  1026d4:	e28db004 	add	fp, sp, #4
  1026d8:	e24dd020 	sub	sp, sp, #32
  1026dc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    rt_list_t *row_head[RT_TIMER_SKIP_LIST_LEVEL];
    unsigned int tst_nr;
    static unsigned int random_nr;

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1026e0:	e320f000 	nop	{0}
  1026e4:	e30d3410 	movw	r3, #54288	; 0xd410
  1026e8:	e3403014 	movt	r3, #20
  1026ec:	e5933000 	ldr	r3, [r3]
  1026f0:	e3e01000 	mvn	r1, #0
  1026f4:	e1a00003 	mov	r0, r3
  1026f8:	ebfffa00 	bl	100f00 <rt_mutex_take>
  1026fc:	e1a03000 	mov	r3, r0
  102700:	e3530000 	cmp	r3, #0
  102704:	1afffff6 	bne	1026e4 <rt_timer_start+0x14>
    /* remove timer from list */
    _rt_timer_remove(timer);
  102708:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10270c:	ebffff77 	bl	1024f0 <_rt_timer_remove>
    /* change status of timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102710:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102714:	e5d33009 	ldrb	r3, [r3, #9]
  102718:	e3c33001 	bic	r3, r3, #1
  10271c:	e6ef2073 	uxtb	r2, r3
  102720:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102724:	e5c32009 	strb	r2, [r3, #9]
    /* release mutex */
    rt_mutex_release(mutex);
  102728:	e30d3410 	movw	r3, #54288	; 0xd410
  10272c:	e3403014 	movt	r3, #20
  102730:	e5933000 	ldr	r3, [r3]
  102734:	e1a00003 	mov	r0, r3
  102738:	ebfffa0e 	bl	100f78 <rt_mutex_release>

    /*
     * get timeout tick,
     * the max timeout tick shall not great than RT_TICK_MAX/2
     */
    timer->timeout_tick = rt_tick_get() + timer->init_tick;
  10273c:	ebfffdc7 	bl	101e60 <rt_tick_get>
  102740:	e1a02000 	mov	r2, r0
  102744:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102748:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10274c:	e0822003 	add	r2, r2, r3
  102750:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102754:	e5832028 	str	r2, [r3, #40]	; 0x28

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102758:	e320f000 	nop	{0}
  10275c:	e30d3410 	movw	r3, #54288	; 0xd410
  102760:	e3403014 	movt	r3, #20
  102764:	e5933000 	ldr	r3, [r3]
  102768:	e3e01000 	mvn	r1, #0
  10276c:	e1a00003 	mov	r0, r3
  102770:	ebfff9e2 	bl	100f00 <rt_mutex_take>
  102774:	e1a03000 	mov	r3, r0
  102778:	e3530000 	cmp	r3, #0
  10277c:	1afffff6 	bne	10275c <rt_timer_start+0x8c>

    /* insert timer to soft timer list */
    timer_list = rt_soft_timer_list;
  102780:	e30d3418 	movw	r3, #54296	; 0xd418
  102784:	e3403014 	movt	r3, #20
  102788:	e50b3010 	str	r3, [fp, #-16]

    row_head[0]  = &timer_list[0];
  10278c:	e51b3010 	ldr	r3, [fp, #-16]
  102790:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102794:	e3a03000 	mov	r3, #0
  102798:	e50b3008 	str	r3, [fp, #-8]
  10279c:	ea000047 	b	1028c0 <rt_timer_start+0x1f0>
    {
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
             row_head[row_lvl]  = row_head[row_lvl]->next)
        {
            struct rt_timer *t;
            rt_list_t *p = row_head[row_lvl]->next;
  1027a0:	e51b3008 	ldr	r3, [fp, #-8]
  1027a4:	e1a03103 	lsl	r3, r3, #2
  1027a8:	e24b2004 	sub	r2, fp, #4
  1027ac:	e0823003 	add	r3, r2, r3
  1027b0:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  1027b4:	e5933000 	ldr	r3, [r3]
  1027b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

            /* fix up the entry pointer */
            t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
  1027bc:	e51b3008 	ldr	r3, [fp, #-8]
  1027c0:	e1a03183 	lsl	r3, r3, #3
  1027c4:	e2833014 	add	r3, r3, #20
  1027c8:	e2633000 	rsb	r3, r3, #0
  1027cc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1027d0:	e0823003 	add	r3, r2, r3
  1027d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* If we have two timers that timeout at the same time, it's
             * preferred that the timer inserted early get called early.
             * So insert the new timer to the end the the some-timeout timer
             * list.
             */
            if ((t->timeout_tick - timer->timeout_tick) == 0)
  1027d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027dc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1027e8:	e1520003 	cmp	r2, r3
  1027ec:	0a000007 	beq	102810 <rt_timer_start+0x140>
            {
                continue;
            }
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
  1027f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027f4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027fc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102800:	e0423003 	sub	r3, r2, r3
  102804:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102808:	9a000019 	bls	102874 <rt_timer_start+0x1a4>
  10280c:	ea000000 	b	102814 <rt_timer_start+0x144>
                continue;
  102810:	e320f000 	nop	{0}
             row_head[row_lvl]  = row_head[row_lvl]->next)
  102814:	e51b3008 	ldr	r3, [fp, #-8]
  102818:	e1a03103 	lsl	r3, r3, #2
  10281c:	e24b2004 	sub	r2, fp, #4
  102820:	e0823003 	add	r3, r2, r3
  102824:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  102828:	e5932000 	ldr	r2, [r3]
  10282c:	e51b3008 	ldr	r3, [fp, #-8]
  102830:	e1a03103 	lsl	r3, r3, #2
  102834:	e24b1004 	sub	r1, fp, #4
  102838:	e0813003 	add	r3, r1, r3
  10283c:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
  102840:	e51b3008 	ldr	r3, [fp, #-8]
  102844:	e1a03103 	lsl	r3, r3, #2
  102848:	e24b2004 	sub	r2, fp, #4
  10284c:	e0823003 	add	r3, r2, r3
  102850:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102854:	e51b3008 	ldr	r3, [fp, #-8]
  102858:	e1a03183 	lsl	r3, r3, #3
  10285c:	e51b1010 	ldr	r1, [fp, #-16]
  102860:	e0813003 	add	r3, r1, r3
  102864:	e5933004 	ldr	r3, [r3, #4]
  102868:	e1520003 	cmp	r2, r3
  10286c:	1affffcb 	bne	1027a0 <rt_timer_start+0xd0>
  102870:	ea000000 	b	102878 <rt_timer_start+0x1a8>
            {
                break;
  102874:	e320f000 	nop	{0}
            }
        }
        if (row_lvl != RT_TIMER_SKIP_LIST_LEVEL - 1)
  102878:	e51b3008 	ldr	r3, [fp, #-8]
  10287c:	e3530000 	cmp	r3, #0
  102880:	0a00000b 	beq	1028b4 <rt_timer_start+0x1e4>
            row_head[row_lvl + 1] = row_head[row_lvl] + 1;
  102884:	e51b3008 	ldr	r3, [fp, #-8]
  102888:	e1a03103 	lsl	r3, r3, #2
  10288c:	e24b2004 	sub	r2, fp, #4
  102890:	e0823003 	add	r3, r2, r3
  102894:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102898:	e51b3008 	ldr	r3, [fp, #-8]
  10289c:	e2833001 	add	r3, r3, #1
  1028a0:	e2822008 	add	r2, r2, #8
  1028a4:	e1a03103 	lsl	r3, r3, #2
  1028a8:	e24b1004 	sub	r1, fp, #4
  1028ac:	e0813003 	add	r3, r1, r3
  1028b0:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  1028b4:	e51b3008 	ldr	r3, [fp, #-8]
  1028b8:	e2833001 	add	r3, r3, #1
  1028bc:	e50b3008 	str	r3, [fp, #-8]
  1028c0:	e51b3008 	ldr	r3, [fp, #-8]
  1028c4:	e3530000 	cmp	r3, #0
  1028c8:	0affffdc 	beq	102840 <rt_timer_start+0x170>

    /* Interestingly, this super simple timer insert counter works very very
     * well on distributing the list height uniformly. By means of "very very
     * well", I mean it beats the randomness of timer->timeout_tick very easily
     * (actually, the timeout_tick is not random and easy to be attacked). */
    random_nr++;
  1028cc:	e30d3420 	movw	r3, #54304	; 0xd420
  1028d0:	e3403014 	movt	r3, #20
  1028d4:	e5933000 	ldr	r3, [r3]
  1028d8:	e2832001 	add	r2, r3, #1
  1028dc:	e30d3420 	movw	r3, #54304	; 0xd420
  1028e0:	e3403014 	movt	r3, #20
  1028e4:	e5832000 	str	r2, [r3]
    tst_nr = random_nr;
  1028e8:	e30d3420 	movw	r3, #54304	; 0xd420
  1028ec:	e3403014 	movt	r3, #20
  1028f0:	e5933000 	ldr	r3, [r3]
  1028f4:	e50b300c 	str	r3, [fp, #-12]

    rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
  1028f8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1028fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102900:	e2833014 	add	r3, r3, #20
  102904:	e1a01003 	mov	r1, r3
  102908:	e1a00002 	mov	r0, r2
  10290c:	ebfffe74 	bl	1022e4 <rt_list_insert_after>
                         &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102910:	e3a03002 	mov	r3, #2
  102914:	e50b3008 	str	r3, [fp, #-8]
  102918:	ea000018 	b	102980 <rt_timer_start+0x2b0>
    {
        if (!(tst_nr & RT_TIMER_SKIP_LIST_MASK))
  10291c:	e51b300c 	ldr	r3, [fp, #-12]
  102920:	e2033003 	and	r3, r3, #3
  102924:	e3530000 	cmp	r3, #0
  102928:	1a000018 	bne	102990 <rt_timer_start+0x2c0>
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10292c:	e51b3008 	ldr	r3, [fp, #-8]
  102930:	e2633001 	rsb	r3, r3, #1
  102934:	e1a03103 	lsl	r3, r3, #2
  102938:	e24b2004 	sub	r2, fp, #4
  10293c:	e0823003 	add	r3, r2, r3
  102940:	e5130018 	ldr	r0, [r3, #-24]	; 0xffffffe8
                                 &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - row_lvl]));
  102944:	e51b3008 	ldr	r3, [fp, #-8]
  102948:	e2633001 	rsb	r3, r3, #1
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10294c:	e2833002 	add	r3, r3, #2
  102950:	e1a03183 	lsl	r3, r3, #3
  102954:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  102958:	e0823003 	add	r3, r2, r3
  10295c:	e2833004 	add	r3, r3, #4
  102960:	e1a01003 	mov	r1, r3
  102964:	ebfffe5e 	bl	1022e4 <rt_list_insert_after>
        else
            break;
        /* Shift over the bits we have tested. Works well with 1 bit and 2
         * bits. */
        tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
  102968:	e51b300c 	ldr	r3, [fp, #-12]
  10296c:	e1a03123 	lsr	r3, r3, #2
  102970:	e50b300c 	str	r3, [fp, #-12]
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102974:	e51b3008 	ldr	r3, [fp, #-8]
  102978:	e2833001 	add	r3, r3, #1
  10297c:	e50b3008 	str	r3, [fp, #-8]
  102980:	e51b3008 	ldr	r3, [fp, #-8]
  102984:	e3530001 	cmp	r3, #1
  102988:	9affffe3 	bls	10291c <rt_timer_start+0x24c>
  10298c:	ea000000 	b	102994 <rt_timer_start+0x2c4>
            break;
  102990:	e320f000 	nop	{0}
    }

    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
  102994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102998:	e5d33009 	ldrb	r3, [r3, #9]
  10299c:	e3833001 	orr	r3, r3, #1
  1029a0:	e6ef2073 	uxtb	r2, r3
  1029a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1029a8:	e5c32009 	strb	r2, [r3, #9]

    /* release mutex */
    rt_mutex_release(mutex);
  1029ac:	e30d3410 	movw	r3, #54288	; 0xd410
  1029b0:	e3403014 	movt	r3, #20
  1029b4:	e5933000 	ldr	r3, [r3]
  1029b8:	e1a00003 	mov	r0, r3
  1029bc:	ebfff96d 	bl	100f78 <rt_mutex_release>

    /* update hardware timer */
    rt_hw_timer_update();
  1029c0:	eb0000cc 	bl	102cf8 <rt_hw_timer_update>

    return RT_EOK;
  1029c4:	e3a03000 	mov	r3, #0
}
  1029c8:	e1a00003 	mov	r0, r3
  1029cc:	e24bd004 	sub	sp, fp, #4
  1029d0:	e8bd8800 	pop	{fp, pc}

001029d4 <rt_timer_stop>:
 * @param timer the timer to be stopped
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_stop(rt_timer_t timer)
{
  1029d4:	e92d4800 	push	{fp, lr}
  1029d8:	e28db004 	add	fp, sp, #4
  1029dc:	e24dd008 	sub	sp, sp, #8
  1029e0:	e50b0008 	str	r0, [fp, #-8]
    if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  1029e4:	e51b3008 	ldr	r3, [fp, #-8]
  1029e8:	e5d33009 	ldrb	r3, [r3, #9]
  1029ec:	e2033001 	and	r3, r3, #1
  1029f0:	e3530000 	cmp	r3, #0
  1029f4:	1a000001 	bne	102a00 <rt_timer_stop+0x2c>
        return -RT_ERROR;
  1029f8:	e3e03000 	mvn	r3, #0
  1029fc:	ea000017 	b	102a60 <rt_timer_stop+0x8c>

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102a00:	e320f000 	nop	{0}
  102a04:	e30d3410 	movw	r3, #54288	; 0xd410
  102a08:	e3403014 	movt	r3, #20
  102a0c:	e5933000 	ldr	r3, [r3]
  102a10:	e3e01000 	mvn	r1, #0
  102a14:	e1a00003 	mov	r0, r3
  102a18:	ebfff938 	bl	100f00 <rt_mutex_take>
  102a1c:	e1a03000 	mov	r3, r0
  102a20:	e3530000 	cmp	r3, #0
  102a24:	1afffff6 	bne	102a04 <rt_timer_stop+0x30>

    _rt_timer_remove(timer);
  102a28:	e51b0008 	ldr	r0, [fp, #-8]
  102a2c:	ebfffeaf 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  102a30:	e30d3410 	movw	r3, #54288	; 0xd410
  102a34:	e3403014 	movt	r3, #20
  102a38:	e5933000 	ldr	r3, [r3]
  102a3c:	e1a00003 	mov	r0, r3
  102a40:	ebfff94c 	bl	100f78 <rt_mutex_release>

    /* change stat */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102a44:	e51b3008 	ldr	r3, [fp, #-8]
  102a48:	e5d33009 	ldrb	r3, [r3, #9]
  102a4c:	e3c33001 	bic	r3, r3, #1
  102a50:	e6ef2073 	uxtb	r2, r3
  102a54:	e51b3008 	ldr	r3, [fp, #-8]
  102a58:	e5c32009 	strb	r2, [r3, #9]

    return RT_EOK;
  102a5c:	e3a03000 	mov	r3, #0
}
  102a60:	e1a00003 	mov	r0, r3
  102a64:	e24bd004 	sub	sp, fp, #4
  102a68:	e8bd8800 	pop	{fp, pc}

00102a6c <rt_timer_control>:
 * @param arg the argument
 *
 * @return RT_EOK
 */
rt_err_t rt_timer_control(rt_timer_t timer, int cmd, void *arg)
{
  102a6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102a70:	e28db000 	add	fp, sp, #0
  102a74:	e24dd014 	sub	sp, sp, #20
  102a78:	e50b0008 	str	r0, [fp, #-8]
  102a7c:	e50b100c 	str	r1, [fp, #-12]
  102a80:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  102a84:	e51b300c 	ldr	r3, [fp, #-12]
  102a88:	e3530008 	cmp	r3, #8
  102a8c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  102a90:	ea000032 	b	102b60 <rt_timer_control+0xf4>
  102a94:	00102acc 	.word	0x00102acc
  102a98:	00102ab8 	.word	0x00102ab8
  102a9c:	00102ae0 	.word	0x00102ae0
  102aa0:	00102afc 	.word	0x00102afc
  102aa4:	00102b60 	.word	0x00102b60
  102aa8:	00102b18 	.word	0x00102b18
  102aac:	00102b2c 	.word	0x00102b2c
  102ab0:	00102b3c 	.word	0x00102b3c
  102ab4:	00102b50 	.word	0x00102b50
    {
    case RT_TIMER_CTRL_GET_TIME:
        *(rt_tick_t *)arg = timer->init_tick;
  102ab8:	e51b3008 	ldr	r3, [fp, #-8]
  102abc:	e5932024 	ldr	r2, [r3, #36]	; 0x24
  102ac0:	e51b3010 	ldr	r3, [fp, #-16]
  102ac4:	e5832000 	str	r2, [r3]
        break;
  102ac8:	ea000024 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_TIME:
        timer->init_tick = *(rt_tick_t *)arg;
  102acc:	e51b3010 	ldr	r3, [fp, #-16]
  102ad0:	e5932000 	ldr	r2, [r3]
  102ad4:	e51b3008 	ldr	r3, [fp, #-8]
  102ad8:	e5832024 	str	r2, [r3, #36]	; 0x24
        break;
  102adc:	ea00001f 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_ONESHOT:
        timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
  102ae0:	e51b3008 	ldr	r3, [fp, #-8]
  102ae4:	e5d33009 	ldrb	r3, [r3, #9]
  102ae8:	e3c33002 	bic	r3, r3, #2
  102aec:	e6ef2073 	uxtb	r2, r3
  102af0:	e51b3008 	ldr	r3, [fp, #-8]
  102af4:	e5c32009 	strb	r2, [r3, #9]
        break;
  102af8:	ea000018 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PERIODIC:
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
  102afc:	e51b3008 	ldr	r3, [fp, #-8]
  102b00:	e5d33009 	ldrb	r3, [r3, #9]
  102b04:	e3833002 	orr	r3, r3, #2
  102b08:	e6ef2073 	uxtb	r2, r3
  102b0c:	e51b3008 	ldr	r3, [fp, #-8]
  102b10:	e5c32009 	strb	r2, [r3, #9]
        break;
  102b14:	ea000011 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_FUNC:
        *(void **)arg = timer->timeout_func;
  102b18:	e51b3008 	ldr	r3, [fp, #-8]
  102b1c:	e593201c 	ldr	r2, [r3, #28]
  102b20:	e51b3010 	ldr	r3, [fp, #-16]
  102b24:	e5832000 	str	r2, [r3]
        break;
  102b28:	ea00000c 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_FUNC:
        timer->timeout_func = (void (*)(void*))arg;
  102b2c:	e51b2010 	ldr	r2, [fp, #-16]
  102b30:	e51b3008 	ldr	r3, [fp, #-8]
  102b34:	e583201c 	str	r2, [r3, #28]
        break;
  102b38:	ea000008 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_PARM:
        *(void **)arg = timer->parameter;
  102b3c:	e51b3008 	ldr	r3, [fp, #-8]
  102b40:	e5932020 	ldr	r2, [r3, #32]
  102b44:	e51b3010 	ldr	r3, [fp, #-16]
  102b48:	e5832000 	str	r2, [r3]
        break;
  102b4c:	ea000003 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PARM:
        timer->parameter = arg;
  102b50:	e51b3008 	ldr	r3, [fp, #-8]
  102b54:	e51b2010 	ldr	r2, [fp, #-16]
  102b58:	e5832020 	str	r2, [r3, #32]
        break;
  102b5c:	e320f000 	nop	{0}
    }

    return RT_EOK;
  102b60:	e3a03000 	mov	r3, #0
}
  102b64:	e1a00003 	mov	r0, r3
  102b68:	e28bd000 	add	sp, fp, #0
  102b6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  102b70:	e12fff1e 	bx	lr

00102b74 <rt_soft_timer_check>:
/**
 * This function will check timer list, if a timeout event happens, the
 * corresponding timeout function will be invoked.
 */
void rt_soft_timer_check(void)
{
  102b74:	e92d4800 	push	{fp, lr}
  102b78:	e28db004 	add	fp, sp, #4
  102b7c:	e24dd010 	sub	sp, sp, #16
    rt_list_t *n;
    struct rt_timer *t;

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check enter\n"));

    current_tick = rt_tick_get();
  102b80:	ebfffcb6 	bl	101e60 <rt_tick_get>
  102b84:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102b88:	e320f000 	nop	{0}
  102b8c:	e30d3410 	movw	r3, #54288	; 0xd410
  102b90:	e3403014 	movt	r3, #20
  102b94:	e5933000 	ldr	r3, [r3]
  102b98:	e3e01000 	mvn	r1, #0
  102b9c:	e1a00003 	mov	r0, r3
  102ba0:	ebfff8d6 	bl	100f00 <rt_mutex_take>
  102ba4:	e1a03000 	mov	r3, r0
  102ba8:	e3530000 	cmp	r3, #0
  102bac:	1afffff6 	bne	102b8c <rt_soft_timer_check+0x18>

    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102bb0:	e30d3418 	movw	r3, #54296	; 0xd418
  102bb4:	e3403014 	movt	r3, #20
  102bb8:	e5933000 	ldr	r3, [r3]
  102bbc:	e50b300c 	str	r3, [fp, #-12]
  102bc0:	ea00003d 	b	102cbc <rt_soft_timer_check+0x148>
         n != &(rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]);)
    {
        t = rt_list_entry(n, struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
  102bc4:	e51b300c 	ldr	r3, [fp, #-12]
  102bc8:	e2433014 	sub	r3, r3, #20
  102bcc:	e50b3010 	str	r3, [fp, #-16]

        /*
         * It supposes that the new tick shall less than the half duration of
         * tick max.
         */
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
  102bd0:	e51b3010 	ldr	r3, [fp, #-16]
  102bd4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102bd8:	e51b2008 	ldr	r2, [fp, #-8]
  102bdc:	e0423003 	sub	r3, r2, r3
  102be0:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102be4:	8a00003a 	bhi	102cd4 <rt_soft_timer_check+0x160>
        {
            /* move node to the next */
            n = n->next;
  102be8:	e51b300c 	ldr	r3, [fp, #-12]
  102bec:	e5933000 	ldr	r3, [r3]
  102bf0:	e50b300c 	str	r3, [fp, #-12]

            /* remove timer from timer list firstly */
            _rt_timer_remove(t);
  102bf4:	e51b0010 	ldr	r0, [fp, #-16]
  102bf8:	ebfffe3c 	bl	1024f0 <_rt_timer_remove>

            /* release mutex */
            rt_mutex_release(mutex);
  102bfc:	e30d3410 	movw	r3, #54288	; 0xd410
  102c00:	e3403014 	movt	r3, #20
  102c04:	e5933000 	ldr	r3, [r3]
  102c08:	e1a00003 	mov	r0, r3
  102c0c:	ebfff8d9 	bl	100f78 <rt_mutex_release>
            /* call timeout function */
            t->timeout_func(t->parameter);
  102c10:	e51b3010 	ldr	r3, [fp, #-16]
  102c14:	e593301c 	ldr	r3, [r3, #28]
  102c18:	e51b2010 	ldr	r2, [fp, #-16]
  102c1c:	e5922020 	ldr	r2, [r2, #32]
  102c20:	e1a00002 	mov	r0, r2
  102c24:	e12fff33 	blx	r3

            /* re-get tick */
            current_tick = rt_tick_get();
  102c28:	ebfffc8c 	bl	101e60 <rt_tick_get>
  102c2c:	e50b0008 	str	r0, [fp, #-8]

            RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));

            /* make sure take mutex */
            while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102c30:	e320f000 	nop	{0}
  102c34:	e30d3410 	movw	r3, #54288	; 0xd410
  102c38:	e3403014 	movt	r3, #20
  102c3c:	e5933000 	ldr	r3, [r3]
  102c40:	e3e01000 	mvn	r1, #0
  102c44:	e1a00003 	mov	r0, r3
  102c48:	ebfff8ac 	bl	100f00 <rt_mutex_take>
  102c4c:	e1a03000 	mov	r3, r0
  102c50:	e3530000 	cmp	r3, #0
  102c54:	1afffff6 	bne	102c34 <rt_soft_timer_check+0xc0>


            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c58:	e51b3010 	ldr	r3, [fp, #-16]
  102c5c:	e5d33009 	ldrb	r3, [r3, #9]
  102c60:	e2033002 	and	r3, r3, #2
  102c64:	e3530000 	cmp	r3, #0
  102c68:	0a00000d 	beq	102ca4 <rt_soft_timer_check+0x130>
                    (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  102c6c:	e51b3010 	ldr	r3, [fp, #-16]
  102c70:	e5d33009 	ldrb	r3, [r3, #9]
  102c74:	e2033001 	and	r3, r3, #1
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c78:	e3530000 	cmp	r3, #0
  102c7c:	0a000008 	beq	102ca4 <rt_soft_timer_check+0x130>
            {
                /* start it */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102c80:	e51b3010 	ldr	r3, [fp, #-16]
  102c84:	e5d33009 	ldrb	r3, [r3, #9]
  102c88:	e3c33001 	bic	r3, r3, #1
  102c8c:	e6ef2073 	uxtb	r2, r3
  102c90:	e51b3010 	ldr	r3, [fp, #-16]
  102c94:	e5c32009 	strb	r2, [r3, #9]
                rt_timer_start(t);
  102c98:	e51b0010 	ldr	r0, [fp, #-16]
  102c9c:	ebfffe8b 	bl	1026d0 <rt_timer_start>
  102ca0:	ea000005 	b	102cbc <rt_soft_timer_check+0x148>
            }
            else
            {
                /* stop timer */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102ca4:	e51b3010 	ldr	r3, [fp, #-16]
  102ca8:	e5d33009 	ldrb	r3, [r3, #9]
  102cac:	e3c33001 	bic	r3, r3, #1
  102cb0:	e6ef2073 	uxtb	r2, r3
  102cb4:	e51b3010 	ldr	r3, [fp, #-16]
  102cb8:	e5c32009 	strb	r2, [r3, #9]
    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102cbc:	e51b200c 	ldr	r2, [fp, #-12]
  102cc0:	e30d3418 	movw	r3, #54296	; 0xd418
  102cc4:	e3403014 	movt	r3, #20
  102cc8:	e1520003 	cmp	r2, r3
  102ccc:	1affffbc 	bne	102bc4 <rt_soft_timer_check+0x50>
  102cd0:	ea000000 	b	102cd8 <rt_soft_timer_check+0x164>
            }
        }
        else break; /* not check anymore */
  102cd4:	e320f000 	nop	{0}
    }

    /* release mutex */
    rt_mutex_release(mutex);
  102cd8:	e30d3410 	movw	r3, #54288	; 0xd410
  102cdc:	e3403014 	movt	r3, #20
  102ce0:	e5933000 	ldr	r3, [r3]
  102ce4:	e1a00003 	mov	r0, r3
  102ce8:	ebfff8a2 	bl	100f78 <rt_mutex_release>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check leave\n"));
}
  102cec:	e320f000 	nop	{0}
  102cf0:	e24bd004 	sub	sp, fp, #4
  102cf4:	e8bd8800 	pop	{fp, pc}

00102cf8 <rt_hw_timer_update>:

/* update hardware timer */
static void rt_hw_timer_update(void)
{
  102cf8:	e92d4800 	push	{fp, lr}
  102cfc:	e28db004 	add	fp, sp, #4
  102d00:	e24dd008 	sub	sp, sp, #8
    rt_tick_t next_timeout;
    rt_tick_t current_tick;

    /* get the next timeout tick */
    next_timeout = rt_timer_list_next_timeout(rt_soft_timer_list);
  102d04:	e30d0418 	movw	r0, #54296	; 0xd418
  102d08:	e3400014 	movt	r0, #20
  102d0c:	ebfffde3 	bl	1024a0 <rt_timer_list_next_timeout>
  102d10:	e1a03000 	mov	r3, r0
  102d14:	e50b300c 	str	r3, [fp, #-12]
    if (next_timeout == RT_TICK_MAX)
  102d18:	e51b300c 	ldr	r3, [fp, #-12]
  102d1c:	e3730001 	cmn	r3, #1
  102d20:	0a00001f 	beq	102da4 <rt_hw_timer_update+0xac>
        /* no software timer exist, return. */
        return;
    }

    /* get current tick */
    current_tick = rt_tick_get();
  102d24:	ebfffc4d 	bl	101e60 <rt_tick_get>
  102d28:	e50b0008 	str	r0, [fp, #-8]

    if ((next_timeout - current_tick) < RT_TICK_MAX / 2)
  102d2c:	e51b200c 	ldr	r2, [fp, #-12]
  102d30:	e51b3008 	ldr	r3, [fp, #-8]
  102d34:	e0423003 	sub	r3, r2, r3
  102d38:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102d3c:	8a00001a 	bhi	102dac <rt_hw_timer_update+0xb4>
    {
        syscall(_NRSYS_timer_stop, hw_timer);
  102d40:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d44:	e3403014 	movt	r3, #20
  102d48:	e5933000 	ldr	r3, [r3]
  102d4c:	e1a01003 	mov	r1, r3
  102d50:	e3a00072 	mov	r0, #114	; 0x72
  102d54:	eb00e5b2 	bl	13c424 <syscall>
        /* get the delta timeout tick */
        next_timeout = next_timeout - current_tick;
  102d58:	e51b200c 	ldr	r2, [fp, #-12]
  102d5c:	e51b3008 	ldr	r3, [fp, #-8]
  102d60:	e0423003 	sub	r3, r2, r3
  102d64:	e50b300c 	str	r3, [fp, #-12]
        syscall(_NRSYS_timer_control,
  102d68:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d6c:	e3403014 	movt	r3, #20
  102d70:	e5931000 	ldr	r1, [r3]
  102d74:	e24b300c 	sub	r3, fp, #12
  102d78:	e3a02000 	mov	r2, #0
  102d7c:	e3a00073 	mov	r0, #115	; 0x73
  102d80:	eb00e5a7 	bl	13c424 <syscall>
                hw_timer,
                RT_TIMER_CTRL_SET_TIME,
                &next_timeout);
        syscall(_NRSYS_timer_start, hw_timer);
  102d84:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d88:	e3403014 	movt	r3, #20
  102d8c:	e5933000 	ldr	r3, [r3]
  102d90:	e1a01003 	mov	r1, r3
  102d94:	e3a00071 	mov	r0, #113	; 0x71
  102d98:	eb00e5a1 	bl	13c424 <syscall>
    }
    return;
  102d9c:	e320f000 	nop	{0}
  102da0:	ea000001 	b	102dac <rt_hw_timer_update+0xb4>
        return;
  102da4:	e320f000 	nop	{0}
  102da8:	ea000000 	b	102db0 <rt_hw_timer_update+0xb8>
    return;
  102dac:	e320f000 	nop	{0}
}
  102db0:	e24bd004 	sub	sp, fp, #4
  102db4:	e8bd8800 	pop	{fp, pc}

00102db8 <rt_thread_timer_handler>:

/* timer signal handler */
static void rt_thread_timer_handler(void)
{
  102db8:	e92d4800 	push	{fp, lr}
  102dbc:	e28db004 	add	fp, sp, #4
    /* update hardware timer */
    rt_hw_timer_update();
  102dc0:	ebffffcc 	bl	102cf8 <rt_hw_timer_update>
    /* check software timer */
    rt_soft_timer_check();
  102dc4:	ebffff6a 	bl	102b74 <rt_soft_timer_check>
}
  102dc8:	e320f000 	nop	{0}
  102dcc:	e8bd8800 	pop	{fp, pc}

00102dd0 <timer_thread_entry>:

static void timer_thread_entry(void* parameter)
{
  102dd0:	e92d4800 	push	{fp, lr}
  102dd4:	e28db004 	add	fp, sp, #4
  102dd8:	e24dd010 	sub	sp, sp, #16
  102ddc:	e50b0010 	str	r0, [fp, #-16]
    while (1)
    {
        rt_err_t ret;
        ret = rt_sem_take(sem, RT_WAITING_FOREVER);
  102de0:	e30d3414 	movw	r3, #54292	; 0xd414
  102de4:	e3403014 	movt	r3, #20
  102de8:	e5933000 	ldr	r3, [r3]
  102dec:	e3e01000 	mvn	r1, #0
  102df0:	e1a00003 	mov	r0, r3
  102df4:	ebfff92e 	bl	1012b4 <rt_sem_take>
  102df8:	e50b0008 	str	r0, [fp, #-8]
        if (ret != RT_EOK)
  102dfc:	e51b3008 	ldr	r3, [fp, #-8]
  102e00:	e3530000 	cmp	r3, #0
  102e04:	1a000001 	bne	102e10 <timer_thread_entry+0x40>
        {
            break;
        }
        rt_thread_timer_handler();
  102e08:	ebffffea 	bl	102db8 <rt_thread_timer_handler>
    {
  102e0c:	eafffff3 	b	102de0 <timer_thread_entry+0x10>
            break;
  102e10:	e320f000 	nop	{0}
    }
}
  102e14:	e320f000 	nop	{0}
  102e18:	e24bd004 	sub	sp, fp, #4
  102e1c:	e8bd8800 	pop	{fp, pc}

00102e20 <rt_system_timer_init>:

void rt_system_timer_init(rt_uint32_t timer_stack_size)
{
  102e20:	e92d4800 	push	{fp, lr}
  102e24:	e28db004 	add	fp, sp, #4
  102e28:	e24dd018 	sub	sp, sp, #24
  102e2c:	e50b0010 	str	r0, [fp, #-16]
    int i;
    rt_thread_t tid;

    if (!sem)
  102e30:	e30d3414 	movw	r3, #54292	; 0xd414
  102e34:	e3403014 	movt	r3, #20
  102e38:	e5933000 	ldr	r3, [r3]
  102e3c:	e3530000 	cmp	r3, #0
  102e40:	1a000008 	bne	102e68 <rt_system_timer_init+0x48>
    {
        sem = rt_sem_create("u_timer", 0, RT_IPC_FLAG_FIFO);
  102e44:	e3a02000 	mov	r2, #0
  102e48:	e3a01000 	mov	r1, #0
  102e4c:	e3050458 	movw	r0, #21592	; 0x5458
  102e50:	e3400014 	movt	r0, #20
  102e54:	ebfff863 	bl	100fe8 <rt_sem_create>
  102e58:	e1a02000 	mov	r2, r0
  102e5c:	e30d3414 	movw	r3, #54292	; 0xd414
  102e60:	e3403014 	movt	r3, #20
  102e64:	e5832000 	str	r2, [r3]
    }

    if (!mutex)
  102e68:	e30d3410 	movw	r3, #54288	; 0xd410
  102e6c:	e3403014 	movt	r3, #20
  102e70:	e5933000 	ldr	r3, [r3]
  102e74:	e3530000 	cmp	r3, #0
  102e78:	1a000007 	bne	102e9c <rt_system_timer_init+0x7c>
    {
        mutex = rt_mutex_create("utm_mutex", RT_IPC_FLAG_FIFO);
  102e7c:	e3a01000 	mov	r1, #0
  102e80:	e3050460 	movw	r0, #21600	; 0x5460
  102e84:	e3400014 	movt	r0, #20
  102e88:	ebfff786 	bl	100ca8 <rt_mutex_create>
  102e8c:	e1a02000 	mov	r2, r0
  102e90:	e30d3410 	movw	r3, #54288	; 0xd410
  102e94:	e3403014 	movt	r3, #20
  102e98:	e5832000 	str	r2, [r3]
    }

    for (i = 0;
  102e9c:	e3a03000 	mov	r3, #0
  102ea0:	e50b3008 	str	r3, [fp, #-8]
  102ea4:	ea000009 	b	102ed0 <rt_system_timer_init+0xb0>
         i < sizeof(rt_soft_timer_list) / sizeof(rt_soft_timer_list[0]);
         i++)
    {
        rt_list_init(rt_soft_timer_list + i);
  102ea8:	e51b3008 	ldr	r3, [fp, #-8]
  102eac:	e1a02183 	lsl	r2, r3, #3
  102eb0:	e30d3418 	movw	r3, #54296	; 0xd418
  102eb4:	e3403014 	movt	r3, #20
  102eb8:	e0823003 	add	r3, r2, r3
  102ebc:	e1a00003 	mov	r0, r3
  102ec0:	ebfffcf8 	bl	1022a8 <rt_list_init>
         i++)
  102ec4:	e51b3008 	ldr	r3, [fp, #-8]
  102ec8:	e2833001 	add	r3, r3, #1
  102ecc:	e50b3008 	str	r3, [fp, #-8]
    for (i = 0;
  102ed0:	e51b3008 	ldr	r3, [fp, #-8]
  102ed4:	e3530000 	cmp	r3, #0
  102ed8:	0afffff2 	beq	102ea8 <rt_system_timer_init+0x88>
    }

    /* initial hardware timer */
    if (!hw_timer)
  102edc:	e30d340c 	movw	r3, #54284	; 0xd40c
  102ee0:	e3403014 	movt	r3, #20
  102ee4:	e5933000 	ldr	r3, [r3]
  102ee8:	e3530000 	cmp	r3, #0
  102eec:	1a00000f 	bne	102f30 <rt_system_timer_init+0x110>
    {
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
                "u_timer",
                sem->data, //SIG_HW_TIMER,
  102ef0:	e30d3414 	movw	r3, #54292	; 0xd414
  102ef4:	e3403014 	movt	r3, #20
  102ef8:	e5933000 	ldr	r3, [r3]
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
  102efc:	e5932004 	ldr	r2, [r3, #4]
  102f00:	e3a03000 	mov	r3, #0
  102f04:	e58d3000 	str	r3, [sp]
  102f08:	e3a03000 	mov	r3, #0
  102f0c:	e3051458 	movw	r1, #21592	; 0x5458
  102f10:	e3401014 	movt	r1, #20
  102f14:	e3a0006f 	mov	r0, #111	; 0x6f
  102f18:	eb00e541 	bl	13c424 <syscall>
  102f1c:	e1a03000 	mov	r3, r0
  102f20:	e1a02003 	mov	r2, r3
  102f24:	e30d340c 	movw	r3, #54284	; 0xd40c
  102f28:	e3403014 	movt	r3, #20
  102f2c:	e5832000 	str	r2, [r3]
                0,
                RT_TIMER_FLAG_ONE_SHOT|RT_TIMER_FLAG_HARD_TIMER);
    }

    if (timer_stack_size < 4096)
  102f30:	e51b3010 	ldr	r3, [fp, #-16]
  102f34:	e3530a01 	cmp	r3, #4096	; 0x1000
  102f38:	2a000001 	bcs	102f44 <rt_system_timer_init+0x124>
    {
        timer_stack_size = 4096;
  102f3c:	e3a03a01 	mov	r3, #4096	; 0x1000
  102f40:	e50b3010 	str	r3, [fp, #-16]
    }

    tid = rt_thread_create("u_timer", timer_thread_entry, RT_NULL,
  102f44:	e3a0300a 	mov	r3, #10
  102f48:	e58d3004 	str	r3, [sp, #4]
  102f4c:	e3a03002 	mov	r3, #2
  102f50:	e58d3000 	str	r3, [sp]
  102f54:	e51b3010 	ldr	r3, [fp, #-16]
  102f58:	e3a02000 	mov	r2, #0
  102f5c:	e3021dd0 	movw	r1, #11728	; 0x2dd0
  102f60:	e3401010 	movt	r1, #16
  102f64:	e3050458 	movw	r0, #21592	; 0x5458
  102f68:	e3400014 	movt	r0, #20
  102f6c:	ebfffc60 	bl	1020f4 <rt_thread_create>
  102f70:	e50b000c 	str	r0, [fp, #-12]
            timer_stack_size, 2, 10);
    if (tid)
  102f74:	e51b300c 	ldr	r3, [fp, #-12]
  102f78:	e3530000 	cmp	r3, #0
  102f7c:	0a000001 	beq	102f88 <rt_system_timer_init+0x168>
    {
        rt_thread_startup(tid);
  102f80:	e51b000c 	ldr	r0, [fp, #-12]
  102f84:	ebfffc8f 	bl	1021c8 <rt_thread_startup>
    }
}
  102f88:	e320f000 	nop	{0}
  102f8c:	e24bd004 	sub	sp, fp, #4
  102f90:	e8bd8800 	pop	{fp, pc}

00102f94 <rt_malloc>:
#include <stdarg.h>

#include <rtthread.h>

void *rt_malloc(rt_size_t nbytes)
{
  102f94:	e92d4800 	push	{fp, lr}
  102f98:	e28db004 	add	fp, sp, #4
  102f9c:	e24dd008 	sub	sp, sp, #8
  102fa0:	e50b0008 	str	r0, [fp, #-8]
    return malloc(nbytes);
  102fa4:	e51b0008 	ldr	r0, [fp, #-8]
  102fa8:	eb00e8da 	bl	13d318 <malloc>
  102fac:	e1a03000 	mov	r3, r0
}
  102fb0:	e1a00003 	mov	r0, r3
  102fb4:	e24bd004 	sub	sp, fp, #4
  102fb8:	e8bd8800 	pop	{fp, pc}

00102fbc <rt_free>:

void rt_free(void *ptr)
{
  102fbc:	e92d4800 	push	{fp, lr}
  102fc0:	e28db004 	add	fp, sp, #4
  102fc4:	e24dd008 	sub	sp, sp, #8
  102fc8:	e50b0008 	str	r0, [fp, #-8]
    return free(ptr);
  102fcc:	e51b0008 	ldr	r0, [fp, #-8]
  102fd0:	eb00ea8c 	bl	13da08 <free>
}
  102fd4:	e24bd004 	sub	sp, fp, #4
  102fd8:	e8bd8800 	pop	{fp, pc}

00102fdc <rt_realloc>:

void *rt_realloc(void *ptr, rt_size_t nbytes)
{
  102fdc:	e92d4800 	push	{fp, lr}
  102fe0:	e28db004 	add	fp, sp, #4
  102fe4:	e24dd008 	sub	sp, sp, #8
  102fe8:	e50b0008 	str	r0, [fp, #-8]
  102fec:	e50b100c 	str	r1, [fp, #-12]
    return realloc(ptr, nbytes);
  102ff0:	e51b100c 	ldr	r1, [fp, #-12]
  102ff4:	e51b0008 	ldr	r0, [fp, #-8]
  102ff8:	eb00ea91 	bl	13da44 <realloc>
  102ffc:	e1a03000 	mov	r3, r0
}
  103000:	e1a00003 	mov	r0, r3
  103004:	e24bd004 	sub	sp, fp, #4
  103008:	e8bd8800 	pop	{fp, pc}

0010300c <rt_calloc>:

void *rt_calloc(rt_size_t count, rt_size_t size)
{
  10300c:	e92d4800 	push	{fp, lr}
  103010:	e28db004 	add	fp, sp, #4
  103014:	e24dd008 	sub	sp, sp, #8
  103018:	e50b0008 	str	r0, [fp, #-8]
  10301c:	e50b100c 	str	r1, [fp, #-12]
    return calloc(count, size);
  103020:	e51b100c 	ldr	r1, [fp, #-12]
  103024:	e51b0008 	ldr	r0, [fp, #-8]
  103028:	eb00ea3f 	bl	13d92c <calloc>
  10302c:	e1a03000 	mov	r3, r0
}
  103030:	e1a00003 	mov	r0, r3
  103034:	e24bd004 	sub	sp, fp, #4
  103038:	e8bd8800 	pop	{fp, pc}

0010303c <rt_snprintf>:

rt_int32_t rt_snprintf(char *buf, rt_size_t size, const char *format, ...)
{
  10303c:	e92d000c 	push	{r2, r3}
  103040:	e92d4800 	push	{fp, lr}
  103044:	e28db004 	add	fp, sp, #4
  103048:	e24dd010 	sub	sp, sp, #16
  10304c:	e50b0010 	str	r0, [fp, #-16]
  103050:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  103054:	e28b3008 	add	r3, fp, #8
  103058:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, size, format, ap);
  10305c:	e51b300c 	ldr	r3, [fp, #-12]
  103060:	e59b2004 	ldr	r2, [fp, #4]
  103064:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  103068:	e51b0010 	ldr	r0, [fp, #-16]
  10306c:	eb00f6d3 	bl	140bc0 <vsnprintf>
  103070:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    return ret;
  103074:	e51b3008 	ldr	r3, [fp, #-8]
}
  103078:	e1a00003 	mov	r0, r3
  10307c:	e24bd004 	sub	sp, fp, #4
  103080:	e8bd4800 	pop	{fp, lr}
  103084:	e28dd008 	add	sp, sp, #8
  103088:	e12fff1e 	bx	lr

0010308c <rt_sprintf>:

rt_int32_t rt_sprintf(char *buf, const char *format, ...)
{
  10308c:	e92d000e 	push	{r1, r2, r3}
  103090:	e92d4800 	push	{fp, lr}
  103094:	e28db004 	add	fp, sp, #4
  103098:	e24dd014 	sub	sp, sp, #20
  10309c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  1030a0:	e28b3008 	add	r3, fp, #8
  1030a4:	e50b3010 	str	r3, [fp, #-16]
    ret = vsprintf(buf, format, ap);
  1030a8:	e51b2010 	ldr	r2, [fp, #-16]
  1030ac:	e59b1004 	ldr	r1, [fp, #4]
  1030b0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1030b4:	eb00f6f8 	bl	140c9c <vsprintf>
  1030b8:	e50b000c 	str	r0, [fp, #-12]
    va_end(ap);
    return ret;
  1030bc:	e51b300c 	ldr	r3, [fp, #-12]
}
  1030c0:	e1a00003 	mov	r0, r3
  1030c4:	e24bd004 	sub	sp, fp, #4
  1030c8:	e8bd4800 	pop	{fp, lr}
  1030cc:	e28dd00c 	add	sp, sp, #12
  1030d0:	e12fff1e 	bx	lr

001030d4 <rt_vsnprintf>:

rt_int32_t rt_vsnprintf(char *buf,
    rt_size_t size,
    const char *fmt,
    va_list args)
{
  1030d4:	e92d4800 	push	{fp, lr}
  1030d8:	e28db004 	add	fp, sp, #4
  1030dc:	e24dd010 	sub	sp, sp, #16
  1030e0:	e50b0008 	str	r0, [fp, #-8]
  1030e4:	e50b100c 	str	r1, [fp, #-12]
  1030e8:	e50b2010 	str	r2, [fp, #-16]
  1030ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (rt_int32_t)vsnprintf(buf, size, fmt, args);
  1030f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1030f4:	e51b2010 	ldr	r2, [fp, #-16]
  1030f8:	e51b100c 	ldr	r1, [fp, #-12]
  1030fc:	e51b0008 	ldr	r0, [fp, #-8]
  103100:	eb00f6ae 	bl	140bc0 <vsnprintf>
  103104:	e1a03000 	mov	r3, r0
}
  103108:	e1a00003 	mov	r0, r3
  10310c:	e24bd004 	sub	sp, fp, #4
  103110:	e8bd8800 	pop	{fp, pc}

00103114 <rt_kprintf>:

void rt_kprintf(const char *fmt, ...)
{
  103114:	e92d000f 	push	{r0, r1, r2, r3}
  103118:	e92d4800 	push	{fp, lr}
  10311c:	e28db004 	add	fp, sp, #4
  103120:	e24dd060 	sub	sp, sp, #96	; 0x60
    int ret;
    va_list ap;
    char buf[81];

    va_start(ap, fmt);
  103124:	e28b3008 	add	r3, fp, #8
  103128:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, 81, fmt, ap);
  10312c:	e24b0060 	sub	r0, fp, #96	; 0x60
  103130:	e51b300c 	ldr	r3, [fp, #-12]
  103134:	e59b2004 	ldr	r2, [fp, #4]
  103138:	e3a01051 	mov	r1, #81	; 0x51
  10313c:	eb00f69f 	bl	140bc0 <vsnprintf>
  103140:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    if (ret > 0)
  103144:	e51b3008 	ldr	r3, [fp, #-8]
  103148:	e3530000 	cmp	r3, #0
  10314c:	da000004 	ble	103164 <rt_kprintf+0x50>
        printf("%s", buf);
  103150:	e24b3060 	sub	r3, fp, #96	; 0x60
  103154:	e1a01003 	mov	r1, r3
  103158:	e305046c 	movw	r0, #21612	; 0x546c
  10315c:	e3400014 	movt	r0, #20
  103160:	eb00ed06 	bl	13e580 <printf>
}
  103164:	e320f000 	nop	{0}
  103168:	e24bd004 	sub	sp, fp, #4
  10316c:	e8bd4800 	pop	{fp, lr}
  103170:	e28dd010 	add	sp, sp, #16
  103174:	e12fff1e 	bx	lr

00103178 <rt_strdup>:

char *rt_strdup(const char* s)
{
  103178:	e92d4800 	push	{fp, lr}
  10317c:	e28db004 	add	fp, sp, #4
  103180:	e24dd008 	sub	sp, sp, #8
  103184:	e50b0008 	str	r0, [fp, #-8]
    return strdup(s);
  103188:	e51b0008 	ldr	r0, [fp, #-8]
  10318c:	eb00f8af 	bl	141450 <strdup>
  103190:	e1a03000 	mov	r3, r0
}
  103194:	e1a00003 	mov	r0, r3
  103198:	e24bd004 	sub	sp, fp, #4
  10319c:	e8bd8800 	pop	{fp, pc}

001031a0 <rt_strstr>:

char *rt_strstr(const char *s1, const char *s2)
{
  1031a0:	e92d4800 	push	{fp, lr}
  1031a4:	e28db004 	add	fp, sp, #4
  1031a8:	e24dd008 	sub	sp, sp, #8
  1031ac:	e50b0008 	str	r0, [fp, #-8]
  1031b0:	e50b100c 	str	r1, [fp, #-12]
    return strstr(s1, s2);
  1031b4:	e51b100c 	ldr	r1, [fp, #-12]
  1031b8:	e51b0008 	ldr	r0, [fp, #-8]
  1031bc:	eb00f9ea 	bl	14196c <strstr>
  1031c0:	e1a03000 	mov	r3, r0
}
  1031c4:	e1a00003 	mov	r0, r3
  1031c8:	e24bd004 	sub	sp, fp, #4
  1031cc:	e8bd8800 	pop	{fp, pc}

001031d0 <rt_strcmp>:

rt_int32_t rt_strcmp(const char *cs, const char *ct)
{
  1031d0:	e92d4800 	push	{fp, lr}
  1031d4:	e28db004 	add	fp, sp, #4
  1031d8:	e24dd008 	sub	sp, sp, #8
  1031dc:	e50b0008 	str	r0, [fp, #-8]
  1031e0:	e50b100c 	str	r1, [fp, #-12]
    return (rt_int32_t)strcmp(cs, ct);
  1031e4:	e51b100c 	ldr	r1, [fp, #-12]
  1031e8:	e51b0008 	ldr	r0, [fp, #-8]
  1031ec:	eb00f881 	bl	1413f8 <strcmp>
  1031f0:	e1a03000 	mov	r3, r0
}
  1031f4:	e1a00003 	mov	r0, r3
  1031f8:	e24bd004 	sub	sp, fp, #4
  1031fc:	e8bd8800 	pop	{fp, pc}

00103200 <rt_strlen>:

rt_size_t rt_strlen(const char *src)
{
  103200:	e92d4800 	push	{fp, lr}
  103204:	e28db004 	add	fp, sp, #4
  103208:	e24dd008 	sub	sp, sp, #8
  10320c:	e50b0008 	str	r0, [fp, #-8]
    return strlen(src);
  103210:	e51b0008 	ldr	r0, [fp, #-8]
  103214:	eb00f899 	bl	141480 <strlen>
  103218:	e1a03000 	mov	r3, r0
}
  10321c:	e1a00003 	mov	r0, r3
  103220:	e24bd004 	sub	sp, fp, #4
  103224:	e8bd8800 	pop	{fp, pc}

00103228 <rt_strncmp>:

rt_int32_t rt_strncmp(const char *cs, const char *ct, rt_ubase_t count)
{
  103228:	e92d4800 	push	{fp, lr}
  10322c:	e28db004 	add	fp, sp, #4
  103230:	e24dd010 	sub	sp, sp, #16
  103234:	e50b0008 	str	r0, [fp, #-8]
  103238:	e50b100c 	str	r1, [fp, #-12]
  10323c:	e50b2010 	str	r2, [fp, #-16]
    return strncmp(cs, ct, count);
  103240:	e51b2010 	ldr	r2, [fp, #-16]
  103244:	e51b100c 	ldr	r1, [fp, #-12]
  103248:	e51b0008 	ldr	r0, [fp, #-8]
  10324c:	eb00f8b7 	bl	141530 <strncmp>
  103250:	e1a03000 	mov	r3, r0
}
  103254:	e1a00003 	mov	r0, r3
  103258:	e24bd004 	sub	sp, fp, #4
  10325c:	e8bd8800 	pop	{fp, pc}

00103260 <rt_strncpy>:

char *rt_strncpy(char *dest, const char *src, rt_ubase_t n)
{
  103260:	e92d4800 	push	{fp, lr}
  103264:	e28db004 	add	fp, sp, #4
  103268:	e24dd010 	sub	sp, sp, #16
  10326c:	e50b0008 	str	r0, [fp, #-8]
  103270:	e50b100c 	str	r1, [fp, #-12]
  103274:	e50b2010 	str	r2, [fp, #-16]
    return strncpy(dest, src, n);
  103278:	e51b2010 	ldr	r2, [fp, #-16]
  10327c:	e51b100c 	ldr	r1, [fp, #-12]
  103280:	e51b0008 	ldr	r0, [fp, #-8]
  103284:	eb00f8ce 	bl	1415c4 <strncpy>
  103288:	e1a03000 	mov	r3, r0
}
  10328c:	e1a00003 	mov	r0, r3
  103290:	e24bd004 	sub	sp, fp, #4
  103294:	e8bd8800 	pop	{fp, pc}

00103298 <rt_strcasecmp>:

rt_uint32_t rt_strcasecmp(const char *a, const char *b)
{
  103298:	e92d4800 	push	{fp, lr}
  10329c:	e28db004 	add	fp, sp, #4
  1032a0:	e24dd008 	sub	sp, sp, #8
  1032a4:	e50b0008 	str	r0, [fp, #-8]
  1032a8:	e50b100c 	str	r1, [fp, #-12]
    return strcasecmp(a, b);
  1032ac:	e51b100c 	ldr	r1, [fp, #-12]
  1032b0:	e51b0008 	ldr	r0, [fp, #-8]
  1032b4:	eb00f827 	bl	141358 <strcasecmp>
  1032b8:	e1a03000 	mov	r3, r0
}
  1032bc:	e1a00003 	mov	r0, r3
  1032c0:	e24bd004 	sub	sp, fp, #4
  1032c4:	e8bd8800 	pop	{fp, pc}

001032c8 <rt_memset>:

void *rt_memset(void *src, int c, rt_ubase_t n)
{
  1032c8:	e92d4800 	push	{fp, lr}
  1032cc:	e28db004 	add	fp, sp, #4
  1032d0:	e24dd010 	sub	sp, sp, #16
  1032d4:	e50b0008 	str	r0, [fp, #-8]
  1032d8:	e50b100c 	str	r1, [fp, #-12]
  1032dc:	e50b2010 	str	r2, [fp, #-16]
    return memset(src, c, n);
  1032e0:	e51b2010 	ldr	r2, [fp, #-16]
  1032e4:	e51b100c 	ldr	r1, [fp, #-12]
  1032e8:	e51b0008 	ldr	r0, [fp, #-8]
  1032ec:	eb00f7d2 	bl	14123c <memset>
  1032f0:	e1a03000 	mov	r3, r0
}
  1032f4:	e1a00003 	mov	r0, r3
  1032f8:	e24bd004 	sub	sp, fp, #4
  1032fc:	e8bd8800 	pop	{fp, pc}

00103300 <rt_memcpy>:

void *rt_memcpy(void *dest, const void *src, rt_ubase_t n)
{
  103300:	e92d4800 	push	{fp, lr}
  103304:	e28db004 	add	fp, sp, #4
  103308:	e24dd010 	sub	sp, sp, #16
  10330c:	e50b0008 	str	r0, [fp, #-8]
  103310:	e50b100c 	str	r1, [fp, #-12]
  103314:	e50b2010 	str	r2, [fp, #-16]
    return memcpy(dest, src, n);
  103318:	e51b2010 	ldr	r2, [fp, #-16]
  10331c:	e51b100c 	ldr	r1, [fp, #-12]
  103320:	e51b0008 	ldr	r0, [fp, #-8]
  103324:	eb00f68c 	bl	140d5c <memcpy>
  103328:	e1a03000 	mov	r3, r0
}
  10332c:	e1a00003 	mov	r0, r3
  103330:	e24bd004 	sub	sp, fp, #4
  103334:	e8bd8800 	pop	{fp, pc}

00103338 <rt_memcmp>:

rt_int32_t rt_memcmp(const void *cs, const void *ct, rt_ubase_t count)
{
  103338:	e92d4800 	push	{fp, lr}
  10333c:	e28db004 	add	fp, sp, #4
  103340:	e24dd010 	sub	sp, sp, #16
  103344:	e50b0008 	str	r0, [fp, #-8]
  103348:	e50b100c 	str	r1, [fp, #-12]
  10334c:	e50b2010 	str	r2, [fp, #-16]
    return memcmp(cs, ct, count);
  103350:	e51b2010 	ldr	r2, [fp, #-16]
  103354:	e51b100c 	ldr	r1, [fp, #-12]
  103358:	e51b0008 	ldr	r0, [fp, #-8]
  10335c:	eb00f73d 	bl	141058 <memcmp>
  103360:	e1a03000 	mov	r3, r0
}
  103364:	e1a00003 	mov	r0, r3
  103368:	e24bd004 	sub	sp, fp, #4
  10336c:	e8bd8800 	pop	{fp, pc}

00103370 <rt_memmove>:

void *rt_memmove(void *dest, const void *src, rt_ubase_t n)
{
  103370:	e92d4800 	push	{fp, lr}
  103374:	e28db004 	add	fp, sp, #4
  103378:	e24dd010 	sub	sp, sp, #16
  10337c:	e50b0008 	str	r0, [fp, #-8]
  103380:	e50b100c 	str	r1, [fp, #-12]
  103384:	e50b2010 	str	r2, [fp, #-16]
    return memmove(dest, src, n);
  103388:	e51b2010 	ldr	r2, [fp, #-16]
  10338c:	e51b100c 	ldr	r1, [fp, #-12]
  103390:	e51b0008 	ldr	r0, [fp, #-8]
  103394:	eb00f742 	bl	1410a4 <memmove>
  103398:	e1a03000 	mov	r3, r0
}
  10339c:	e1a00003 	mov	r0, r3
  1033a0:	e24bd004 	sub	sp, fp, #4
  1033a4:	e8bd8800 	pop	{fp, pc}

001033a8 <rt_tick_from_millisecond>:

rt_tick_t rt_tick_from_millisecond(rt_int32_t ms)
{
  1033a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1033ac:	e28db000 	add	fp, sp, #0
  1033b0:	e24dd014 	sub	sp, sp, #20
  1033b4:	e50b0010 	str	r0, [fp, #-16]
    rt_tick_t tick;

    if (ms < 0)
  1033b8:	e51b3010 	ldr	r3, [fp, #-16]
  1033bc:	e3530000 	cmp	r3, #0
  1033c0:	aa000002 	bge	1033d0 <rt_tick_from_millisecond+0x28>
    {
        tick = (rt_tick_t)RT_WAITING_FOREVER;
  1033c4:	e3e03000 	mvn	r3, #0
  1033c8:	e50b3008 	str	r3, [fp, #-8]
  1033cc:	ea000021 	b	103458 <rt_tick_from_millisecond+0xb0>
    }
    else
    {
        tick = RT_TICK_PER_SECOND * (ms / 1000);
  1033d0:	e51b1010 	ldr	r1, [fp, #-16]
  1033d4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1033d8:	e3413062 	movt	r3, #4194	; 0x1062
  1033dc:	e0c32391 	smull	r2, r3, r1, r3
  1033e0:	e1a02343 	asr	r2, r3, #6
  1033e4:	e1a03fc1 	asr	r3, r1, #31
  1033e8:	e0423003 	sub	r3, r2, r3
  1033ec:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1033f0:	e0030392 	mul	r3, r2, r3
  1033f4:	e50b3008 	str	r3, [fp, #-8]
        tick += (RT_TICK_PER_SECOND * (ms % 1000) + 999) / 1000;
  1033f8:	e51b2010 	ldr	r2, [fp, #-16]
  1033fc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  103400:	e3413062 	movt	r3, #4194	; 0x1062
  103404:	e0c10392 	smull	r0, r1, r2, r3
  103408:	e1a01341 	asr	r1, r1, #6
  10340c:	e1a03fc2 	asr	r3, r2, #31
  103410:	e0413003 	sub	r3, r1, r3
  103414:	e3a01ffa 	mov	r1, #1000	; 0x3e8
  103418:	e0030391 	mul	r3, r1, r3
  10341c:	e0423003 	sub	r3, r2, r3
  103420:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  103424:	e0030392 	mul	r3, r2, r3
  103428:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  10342c:	e2833003 	add	r3, r3, #3
  103430:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  103434:	e3412062 	movt	r2, #4194	; 0x1062
  103438:	e0c10293 	smull	r0, r1, r3, r2
  10343c:	e1a02341 	asr	r2, r1, #6
  103440:	e1a03fc3 	asr	r3, r3, #31
  103444:	e0423003 	sub	r3, r2, r3
  103448:	e1a02003 	mov	r2, r3
  10344c:	e51b3008 	ldr	r3, [fp, #-8]
  103450:	e0833002 	add	r3, r3, r2
  103454:	e50b3008 	str	r3, [fp, #-8]
    }

    /* return the calculated tick */
    return tick;
  103458:	e51b3008 	ldr	r3, [fp, #-8]
}
  10345c:	e1a00003 	mov	r0, r3
  103460:	e28bd000 	add	sp, fp, #0
  103464:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103468:	e12fff1e 	bx	lr

0010346c <rt_malloc_align>:
 * @param align the alignment size
 *
 * @return the allocated memory block on successful, otherwise returns RT_NULL
 */
void *rt_malloc_align(rt_size_t size, rt_size_t align)
{
  10346c:	e92d4800 	push	{fp, lr}
  103470:	e28db004 	add	fp, sp, #4
  103474:	e24dd018 	sub	sp, sp, #24
  103478:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10347c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    void *align_ptr;
    int uintptr_size;
    rt_size_t align_size;

    /* sizeof pointer */
    uintptr_size = sizeof(void*);
  103480:	e3a03004 	mov	r3, #4
  103484:	e50b3010 	str	r3, [fp, #-16]
    uintptr_size -= 1;
  103488:	e51b3010 	ldr	r3, [fp, #-16]
  10348c:	e2433001 	sub	r3, r3, #1
  103490:	e50b3010 	str	r3, [fp, #-16]

    /* align the alignment size to uintptr size byte */
    align = ((align + uintptr_size) & ~uintptr_size);
  103494:	e51b2010 	ldr	r2, [fp, #-16]
  103498:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10349c:	e0823003 	add	r3, r2, r3
  1034a0:	e51b2010 	ldr	r2, [fp, #-16]
  1034a4:	e1e02002 	mvn	r2, r2
  1034a8:	e0033002 	and	r3, r3, r2
  1034ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* get total aligned size */
    align_size = ((size + uintptr_size) & ~uintptr_size) + align;
  1034b0:	e51b2010 	ldr	r2, [fp, #-16]
  1034b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1034b8:	e0823003 	add	r3, r2, r3
  1034bc:	e51b2010 	ldr	r2, [fp, #-16]
  1034c0:	e1e02002 	mvn	r2, r2
  1034c4:	e0033002 	and	r3, r3, r2
  1034c8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1034cc:	e0823003 	add	r3, r2, r3
  1034d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* allocate memory block from heap */
    ptr = rt_malloc(align_size);
  1034d4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1034d8:	ebfffead 	bl	102f94 <rt_malloc>
  1034dc:	e50b0008 	str	r0, [fp, #-8]
    if (ptr != RT_NULL)
  1034e0:	e51b3008 	ldr	r3, [fp, #-8]
  1034e4:	e3530000 	cmp	r3, #0
  1034e8:	0a000019 	beq	103554 <rt_malloc_align+0xe8>
    {
        /* the allocated memory block is aligned */
        if (((rt_ubase_t)ptr & (align - 1)) == 0)
  1034ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1034f0:	e2432001 	sub	r2, r3, #1
  1034f4:	e51b3008 	ldr	r3, [fp, #-8]
  1034f8:	e0033002 	and	r3, r3, r2
  1034fc:	e3530000 	cmp	r3, #0
  103500:	1a000004 	bne	103518 <rt_malloc_align+0xac>
        {
            align_ptr = (void *)((rt_ubase_t)ptr + align);
  103504:	e51b2008 	ldr	r2, [fp, #-8]
  103508:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10350c:	e0823003 	add	r3, r2, r3
  103510:	e50b300c 	str	r3, [fp, #-12]
  103514:	ea000007 	b	103538 <rt_malloc_align+0xcc>
        }
        else
        {
            align_ptr = (void *)(((rt_ubase_t)ptr + (align - 1)) & ~(align - 1));
  103518:	e51b2008 	ldr	r2, [fp, #-8]
  10351c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103520:	e0823003 	add	r3, r2, r3
  103524:	e2432001 	sub	r2, r3, #1
  103528:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10352c:	e2633000 	rsb	r3, r3, #0
  103530:	e0033002 	and	r3, r3, r2
  103534:	e50b300c 	str	r3, [fp, #-12]
        }

        /* set the pointer before alignment pointer to the real pointer */
        *((rt_ubase_t *)((rt_ubase_t)align_ptr - sizeof(void *))) = (rt_ubase_t)ptr;
  103538:	e51b300c 	ldr	r3, [fp, #-12]
  10353c:	e2433004 	sub	r3, r3, #4
  103540:	e1a02003 	mov	r2, r3
  103544:	e51b3008 	ldr	r3, [fp, #-8]
  103548:	e5823000 	str	r3, [r2]

        ptr = align_ptr;
  10354c:	e51b300c 	ldr	r3, [fp, #-12]
  103550:	e50b3008 	str	r3, [fp, #-8]
    }

    return ptr;
  103554:	e51b3008 	ldr	r3, [fp, #-8]
}
  103558:	e1a00003 	mov	r0, r3
  10355c:	e24bd004 	sub	sp, fp, #4
  103560:	e8bd8800 	pop	{fp, pc}

00103564 <rt_free_align>:
 * rt_malloc_align function and address is aligned.
 *
 * @param ptr the memory block pointer
 */
void rt_free_align(void *ptr)
{
  103564:	e92d4800 	push	{fp, lr}
  103568:	e28db004 	add	fp, sp, #4
  10356c:	e24dd010 	sub	sp, sp, #16
  103570:	e50b0010 	str	r0, [fp, #-16]
    void *real_ptr;

    real_ptr = (void *) * (rt_ubase_t *)((rt_ubase_t)ptr - sizeof(void *));
  103574:	e51b3010 	ldr	r3, [fp, #-16]
  103578:	e2433004 	sub	r3, r3, #4
  10357c:	e5933000 	ldr	r3, [r3]
  103580:	e50b3008 	str	r3, [fp, #-8]
    rt_free(real_ptr);
  103584:	e51b0008 	ldr	r0, [fp, #-8]
  103588:	ebfffe8b 	bl	102fbc <rt_free>
}
  10358c:	e320f000 	nop	{0}
  103590:	e24bd004 	sub	sp, fp, #4
  103594:	e8bd8800 	pop	{fp, pc}

00103598 <rt_assert_handler>:

void rt_assert_handler(const char *ex_string, const char *func, rt_size_t line)
{
  103598:	e92d4800 	push	{fp, lr}
  10359c:	e28db004 	add	fp, sp, #4
  1035a0:	e24dd010 	sub	sp, sp, #16
  1035a4:	e50b0008 	str	r0, [fp, #-8]
  1035a8:	e50b100c 	str	r1, [fp, #-12]
  1035ac:	e50b2010 	str	r2, [fp, #-16]
    printf("UserAPP: (%s) assertion failed at function:%s, line number:%d \n", ex_string, func, (int)line);
  1035b0:	e51b3010 	ldr	r3, [fp, #-16]
  1035b4:	e51b200c 	ldr	r2, [fp, #-12]
  1035b8:	e51b1008 	ldr	r1, [fp, #-8]
  1035bc:	e3050470 	movw	r0, #21616	; 0x5470
  1035c0:	e3400014 	movt	r0, #20
  1035c4:	eb00ebed 	bl	13e580 <printf>
    exit(-1);
  1035c8:	e3e00000 	mvn	r0, #0
  1035cc:	eb00d67b 	bl	138fc0 <exit>

001035d0 <channel_cmd_send>:
    /* Watch this, we use a void pointer to transfer the returned value. */
    return chn_msg.u.d;
}

rt_inline void channel_cmd_send(int channel, void *cmd)
{
  1035d0:	e92d4800 	push	{fp, lr}
  1035d4:	e28db004 	add	fp, sp, #4
  1035d8:	e24dd018 	sub	sp, sp, #24
  1035dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1035e0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  1035e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1035e8:	e3530000 	cmp	r3, #0
  1035ec:	aa000005 	bge	103608 <channel_cmd_send+0x38>
  1035f0:	e3a0201a 	mov	r2, #26
  1035f4:	e30517fc 	movw	r1, #22524	; 0x57fc
  1035f8:	e3401014 	movt	r1, #20
  1035fc:	e30504b0 	movw	r0, #21680	; 0x54b0
  103600:	e3400014 	movt	r0, #20
  103604:	ebffffe3 	bl	103598 <rt_assert_handler>

    /* wrap the command and data into an IPC message */
    struct rt_channel_msg chn_msg;
    chn_msg.type   = RT_CHANNEL_RAW;
  103608:	e3a03000 	mov	r3, #0
  10360c:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d    = cmd;
  103610:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103614:	e50b300c 	str	r3, [fp, #-12]

    /* send the command and not wait for the result */
    rt_channel_send(channel, &chn_msg);
  103618:	e24b3014 	sub	r3, fp, #20
  10361c:	e1a01003 	mov	r1, r3
  103620:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103624:	ebfff2f6 	bl	100204 <rt_channel_send>
}
  103628:	e320f000 	nop	{0}
  10362c:	e24bd004 	sub	sp, fp, #4
  103630:	e8bd8800 	pop	{fp, pc}

00103634 <channel_cmd_recv>:

rt_inline void *channel_cmd_recv(int channel)
{
  103634:	e92d4800 	push	{fp, lr}
  103638:	e28db004 	add	fp, sp, #4
  10363c:	e24dd018 	sub	sp, sp, #24
  103640:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  103644:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103648:	e3530000 	cmp	r3, #0
  10364c:	aa000005 	bge	103668 <channel_cmd_recv+0x34>
  103650:	e3a02027 	mov	r2, #39	; 0x27
  103654:	e30517d4 	movw	r1, #22484	; 0x57d4
  103658:	e3401014 	movt	r1, #20
  10365c:	e30504b0 	movw	r0, #21680	; 0x54b0
  103660:	e3400014 	movt	r0, #20
  103664:	ebffffcb 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  103668:	e3a03000 	mov	r3, #0
  10366c:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  103670:	e24b3014 	sub	r3, fp, #20
  103674:	e1a01003 	mov	r1, r3
  103678:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10367c:	ebfff2fa 	bl	10026c <rt_channel_recv>

    return chn_msg.u.d;
  103680:	e51b300c 	ldr	r3, [fp, #-12]
}
  103684:	e1a00003 	mov	r0, r3
  103688:	e24bd004 	sub	sp, fp, #4
  10368c:	e8bd8800 	pop	{fp, pc}

00103690 <channel_cmd_reply>:

rt_inline void channel_cmd_reply(int channel, void *cmd)
{
  103690:	e92d4800 	push	{fp, lr}
  103694:	e28db004 	add	fp, sp, #4
  103698:	e24dd018 	sub	sp, sp, #24
  10369c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1036a0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  1036a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1036a8:	e3530000 	cmp	r3, #0
  1036ac:	aa000005 	bge	1036c8 <channel_cmd_reply+0x38>
  1036b0:	e3a02032 	mov	r2, #50	; 0x32
  1036b4:	e30517e8 	movw	r1, #22504	; 0x57e8
  1036b8:	e3401014 	movt	r1, #20
  1036bc:	e30504b0 	movw	r0, #21680	; 0x54b0
  1036c0:	e3400014 	movt	r0, #20
  1036c4:	ebffffb3 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  1036c8:	e3a03000 	mov	r3, #0
  1036cc:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d = cmd;
  1036d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1036d4:	e50b300c 	str	r3, [fp, #-12]

    rt_channel_reply(channel, &chn_msg);
  1036d8:	e24b3014 	sub	r3, fp, #20
  1036dc:	e1a01003 	mov	r1, r3
  1036e0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1036e4:	ebfff2d3 	bl	100238 <rt_channel_reply>
}
  1036e8:	e320f000 	nop	{0}
  1036ec:	e24bd004 	sub	sp, fp, #4
  1036f0:	e8bd8800 	pop	{fp, pc}

001036f4 <stack_init>:
 *  0: initialization completes successfully, further actions can be carried on
 *  1: initialization has been done before, we could do anything but another
 *  initialization
 */
int stack_init(void)
{
  1036f4:	e92d4800 	push	{fp, lr}
  1036f8:	e28db004 	add	fp, sp, #4
    /* stack channel as a flag whether the stack has been initialized */
    stack_channel = rt_channel_open(chn_name, O_CREAT);
  1036fc:	e30d3014 	movw	r3, #53268	; 0xd014
  103700:	e3403014 	movt	r3, #20
  103704:	e5933000 	ldr	r3, [r3]
  103708:	e3a01040 	mov	r1, #64	; 0x40
  10370c:	e1a00003 	mov	r0, r3
  103710:	ebfff280 	bl	100118 <rt_channel_open>
  103714:	e1a02000 	mov	r2, r0
  103718:	e30d3010 	movw	r3, #53264	; 0xd010
  10371c:	e3403014 	movt	r3, #20
  103720:	e5832000 	str	r2, [r3]
    if (stack_channel < 0) return 1;    /* initialization has been done */
  103724:	e30d3010 	movw	r3, #53264	; 0xd010
  103728:	e3403014 	movt	r3, #20
  10372c:	e5933000 	ldr	r3, [r3]
  103730:	e3530000 	cmp	r3, #0
  103734:	aa000001 	bge	103740 <stack_init+0x4c>
  103738:	e3a03001 	mov	r3, #1
  10373c:	ea000001 	b	103748 <stack_init+0x54>
    //     printf("attach stack failed!\n");
    //     goto close_unet_channel;
    // }

    /* start the TCPIP thread */
    lwip_system_init();
  103740:	eb001bd6 	bl	10a6a0 <lwip_system_init>
    return 0;
  103744:	e3a03000 	mov	r3, #0
//     data_channel = -1;
// close_stack_channel:
//     rt_channel_close(stack_channel);
//     stack_channel = -1;
//     return -1;      /* initialization fails */
}
  103748:	e1a00003 	mov	r0, r3
  10374c:	e8bd8800 	pop	{fp, pc}

00103750 <stack_run>:
};
extern struct lwip_sock *lwip_tryget_socket(int s);
extern struct lwip_sock * get_socket(int s);
extern int access_is_blocking(u32_t flags, struct lwip_sock *sock);
int stack_run(void)
{
  103750:	e92d4800 	push	{fp, lr}
  103754:	e28db004 	add	fp, sp, #4
  103758:	e24dd050 	sub	sp, sp, #80	; 0x50
    // struct lwip_sock *sock = RT_NULL;

    /* run stack event loop */
    while (1)
    {
        int shmid = (int)(size_t)channel_cmd_recv(stack_channel);
  10375c:	e30d3010 	movw	r3, #53264	; 0xd010
  103760:	e3403014 	movt	r3, #20
  103764:	e5933000 	ldr	r3, [r3]
  103768:	e1a00003 	mov	r0, r3
  10376c:	ebffffb0 	bl	103634 <channel_cmd_recv>
  103770:	e1a03000 	mov	r3, r0
  103774:	e50b300c 	str	r3, [fp, #-12]
        if (shmid >= 0)
  103778:	e51b300c 	ldr	r3, [fp, #-12]
  10377c:	e3530000 	cmp	r3, #0
  103780:	ba000124 	blt	103c18 <stack_run+0x4c8>
        {
            cmd = lwp_shmat(shmid, NULL);
  103784:	e3a01000 	mov	r1, #0
  103788:	e51b000c 	ldr	r0, [fp, #-12]
  10378c:	ebfff9df 	bl	101f10 <lwp_shmat>
  103790:	e50b0010 	str	r0, [fp, #-16]
            if (!cmd)
  103794:	e51b3010 	ldr	r3, [fp, #-16]
  103798:	e3530000 	cmp	r3, #0
  10379c:	1a000002 	bne	1037ac <stack_run+0x5c>
            {
                lwp_shmrm(shmid);
  1037a0:	e51b000c 	ldr	r0, [fp, #-12]
  1037a4:	ebfff9ce 	bl	101ee4 <lwp_shmrm>
                continue;
  1037a8:	ea00011d 	b	103c24 <stack_run+0x4d4>
            }

            switch (cmd->cmd)
  1037ac:	e51b3010 	ldr	r3, [fp, #-16]
  1037b0:	e5933000 	ldr	r3, [r3]
  1037b4:	e2433014 	sub	r3, r3, #20
  1037b8:	e3530009 	cmp	r3, #9
  1037bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1037c0:	ea000116 	b	103c20 <stack_run+0x4d0>
  1037c4:	001037ec 	.word	0x001037ec
  1037c8:	00103c20 	.word	0x00103c20
  1037cc:	0010384c 	.word	0x0010384c
  1037d0:	001038b0 	.word	0x001038b0
  1037d4:	001038fc 	.word	0x001038fc
  1037d8:	00103960 	.word	0x00103960
  1037dc:	001039bc 	.word	0x001039bc
  1037e0:	00103ac8 	.word	0x00103ac8
  1037e4:	00103c20 	.word	0x00103c20
  1037e8:	00103b94 	.word	0x00103b94
            {
            /* handle socket requests */
            case UNET_SRV_CMD_SOCKET:
                domain = (int)(size_t)cmd->argv[0];
  1037ec:	e51b3010 	ldr	r3, [fp, #-16]
  1037f0:	e5933004 	ldr	r3, [r3, #4]
  1037f4:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
                type = (int)(size_t)cmd->argv[1];
  1037f8:	e51b3010 	ldr	r3, [fp, #-16]
  1037fc:	e5933008 	ldr	r3, [r3, #8]
  103800:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8
                protocol = (int)(size_t)cmd->argv[2];
  103804:	e51b3010 	ldr	r3, [fp, #-16]
  103808:	e593300c 	ldr	r3, [r3, #12]
  10380c:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
                socket = socket_internal(domain, type, protocol);
  103810:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
  103814:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  103818:	e51b0044 	ldr	r0, [fp, #-68]	; 0xffffffbc
  10381c:	eb001823 	bl	1098b0 <socket_internal>
  103820:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
                lwp_shmdt(cmd);
  103824:	e51b0010 	ldr	r0, [fp, #-16]
  103828:	ebfff9c5 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)socket);
  10382c:	e30d3010 	movw	r3, #53264	; 0xd010
  103830:	e3403014 	movt	r3, #20
  103834:	e5933000 	ldr	r3, [r3]
  103838:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10383c:	e1a01002 	mov	r1, r2
  103840:	e1a00003 	mov	r0, r3
  103844:	ebffff91 	bl	103690 <channel_cmd_reply>
                break;
  103848:	ea0000f5 	b	103c24 <stack_run+0x4d4>
            //     lwp_shmdt(cmd);
            //     channel_cmd_reply(stack_channel, (void *)(size_t)result);
            //     break;

            case UNET_SRV_CMD_BIND:
                socket = (int)(size_t)cmd->argv[0];
  10384c:	e51b3010 	ldr	r3, [fp, #-16]
  103850:	e5933004 	ldr	r3, [r3, #4]
  103854:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103858:	e51b3010 	ldr	r3, [fp, #-16]
  10385c:	e283301c 	add	r3, r3, #28
  103860:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  103864:	e51b3010 	ldr	r3, [fp, #-16]
  103868:	e5933008 	ldr	r3, [r3, #8]
  10386c:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = bind_internal(socket, psockaddr, len);
  103870:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  103874:	e1a02003 	mov	r2, r3
  103878:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  10387c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103880:	eb001768 	bl	109628 <bind_internal>
  103884:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103888:	e51b0010 	ldr	r0, [fp, #-16]
  10388c:	ebfff9ac 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103890:	e30d3010 	movw	r3, #53264	; 0xd010
  103894:	e3403014 	movt	r3, #20
  103898:	e5933000 	ldr	r3, [r3]
  10389c:	e51b2008 	ldr	r2, [fp, #-8]
  1038a0:	e1a01002 	mov	r1, r2
  1038a4:	e1a00003 	mov	r0, r3
  1038a8:	ebffff78 	bl	103690 <channel_cmd_reply>
                break;
  1038ac:	ea0000dc 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_LISTEN:
                socket = (int)(size_t)cmd->argv[0];
  1038b0:	e51b3010 	ldr	r3, [fp, #-16]
  1038b4:	e5933004 	ldr	r3, [r3, #4]
  1038b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

                result = listen_internal(socket, (int)(size_t)cmd->argv[1]);
  1038bc:	e51b3010 	ldr	r3, [fp, #-16]
  1038c0:	e5933008 	ldr	r3, [r3, #8]
  1038c4:	e1a01003 	mov	r1, r3
  1038c8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1038cc:	eb00178c 	bl	109704 <listen_internal>
  1038d0:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  1038d4:	e51b0010 	ldr	r0, [fp, #-16]
  1038d8:	ebfff999 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  1038dc:	e30d3010 	movw	r3, #53264	; 0xd010
  1038e0:	e3403014 	movt	r3, #20
  1038e4:	e5933000 	ldr	r3, [r3]
  1038e8:	e51b2008 	ldr	r2, [fp, #-8]
  1038ec:	e1a01002 	mov	r1, r2
  1038f0:	e1a00003 	mov	r0, r3
  1038f4:	ebffff65 	bl	103690 <channel_cmd_reply>
                break;
  1038f8:	ea0000c9 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_CONNECT:
                socket = (int)(size_t)cmd->argv[0];
  1038fc:	e51b3010 	ldr	r3, [fp, #-16]
  103900:	e5933004 	ldr	r3, [r3, #4]
  103904:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103908:	e51b3010 	ldr	r3, [fp, #-16]
  10390c:	e283301c 	add	r3, r3, #28
  103910:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  103914:	e51b3010 	ldr	r3, [fp, #-16]
  103918:	e5933008 	ldr	r3, [r3, #8]
  10391c:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = connect_internal(socket, psockaddr, len);
  103920:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  103924:	e1a02003 	mov	r2, r3
  103928:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  10392c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103930:	eb00174d 	bl	10966c <connect_internal>
  103934:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103938:	e51b0010 	ldr	r0, [fp, #-16]
  10393c:	ebfff980 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103940:	e30d3010 	movw	r3, #53264	; 0xd010
  103944:	e3403014 	movt	r3, #20
  103948:	e5933000 	ldr	r3, [r3]
  10394c:	e51b2008 	ldr	r2, [fp, #-8]
  103950:	e1a01002 	mov	r1, r2
  103954:	e1a00003 	mov	r0, r3
  103958:	ebffff4c 	bl	103690 <channel_cmd_reply>
                break;
  10395c:	ea0000b0 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_ACCEPT:
                socket = (int)(size_t)cmd->argv[0];
  103960:	e51b3010 	ldr	r3, [fp, #-16]
  103964:	e5933004 	ldr	r3, [r3, #4]
  103968:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  10396c:	e51b3010 	ldr	r3, [fp, #-16]
  103970:	e283301c 	add	r3, r3, #28
  103974:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                result = accept_internal(socket, psockaddr, (socklen_t *)&cmd->argv[1]);
  103978:	e51b3010 	ldr	r3, [fp, #-16]
  10397c:	e2833008 	add	r3, r3, #8
  103980:	e1a02003 	mov	r2, r3
  103984:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  103988:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10398c:	eb0016bd 	bl	109488 <accept_internal>
  103990:	e50b0008 	str	r0, [fp, #-8]
                lwp_shmdt(cmd);
  103994:	e51b0010 	ldr	r0, [fp, #-16]
  103998:	ebfff969 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  10399c:	e30d3010 	movw	r3, #53264	; 0xd010
  1039a0:	e3403014 	movt	r3, #20
  1039a4:	e5933000 	ldr	r3, [r3]
  1039a8:	e51b2008 	ldr	r2, [fp, #-8]
  1039ac:	e1a01002 	mov	r1, r2
  1039b0:	e1a00003 	mov	r0, r3
  1039b4:	ebffff35 	bl	103690 <channel_cmd_reply>
                break;
  1039b8:	ea000099 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_SENDTO:
                socket = (int)(size_t)cmd->argv[0];
  1039bc:	e51b3010 	ldr	r3, [fp, #-16]
  1039c0:	e5933004 	ldr	r3, [r3, #4]
  1039c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  1039c8:	e51b3010 	ldr	r3, [fp, #-16]
  1039cc:	e5933008 	ldr	r3, [r3, #8]
  1039d0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  1039d4:	e51b3010 	ldr	r3, [fp, #-16]
  1039d8:	e593300c 	ldr	r3, [r3, #12]
  1039dc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                tolen = (int)(size_t)cmd->argv[3];
  1039e0:	e51b3010 	ldr	r3, [fp, #-16]
  1039e4:	e5933010 	ldr	r3, [r3, #16]
  1039e8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  1039ec:	e51b3010 	ldr	r3, [fp, #-16]
  1039f0:	e283301c 	add	r3, r3, #28
  1039f4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                lwip_send_count++;
  1039f8:	e30d3424 	movw	r3, #54308	; 0xd424
  1039fc:	e3403014 	movt	r3, #20
  103a00:	e5933000 	ldr	r3, [r3]
  103a04:	e2832001 	add	r2, r3, #1
  103a08:	e30d3424 	movw	r3, #54308	; 0xd424
  103a0c:	e3403014 	movt	r3, #20
  103a10:	e5832000 	str	r2, [r3]
                if(tolen  == 0)
  103a14:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  103a18:	e3530000 	cmp	r3, #0
  103a1c:	1a000006 	bne	103a3c <stack_run+0x2ec>
                {
                    result = send_internal(socket, data, size, flags);
  103a20:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103a24:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103a28:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103a2c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103a30:	eb001770 	bl	1097f8 <send_internal>
  103a34:	e50b0008 	str	r0, [fp, #-8]
  103a38:	ea00000f 	b	103a7c <stack_run+0x32c>
                }
                else
                {
                    psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  103a3c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103a40:	e283301c 	add	r3, r3, #28
  103a44:	e51b2010 	ldr	r2, [fp, #-16]
  103a48:	e0823003 	add	r3, r2, r3
  103a4c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = sendto_internal(socket, data, size, flags, psockaddr, tolen);
  103a50:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  103a54:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  103a58:	e58d3004 	str	r3, [sp, #4]
  103a5c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  103a60:	e58d3000 	str	r3, [sp]
  103a64:	e1a03002 	mov	r3, r2
  103a68:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103a6c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103a70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103a74:	eb001776 	bl	109854 <sendto_internal>
  103a78:	e50b0008 	str	r0, [fp, #-8]
                }
                if(result <= 0)
  103a7c:	e51b3008 	ldr	r3, [fp, #-8]
  103a80:	e3530000 	cmp	r3, #0
  103a84:	ca000005 	bgt	103aa0 <stack_run+0x350>
                {
                    rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  103a88:	e3a02f53 	mov	r2, #332	; 0x14c
  103a8c:	e30517c8 	movw	r1, #22472	; 0x57c8
  103a90:	e3401014 	movt	r1, #20
  103a94:	e30504d0 	movw	r0, #21712	; 0x54d0
  103a98:	e3400014 	movt	r0, #20
  103a9c:	ebfffd9c 	bl	103114 <rt_kprintf>
                }
                lwp_shmdt(cmd);
  103aa0:	e51b0010 	ldr	r0, [fp, #-16]
  103aa4:	ebfff926 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103aa8:	e30d3010 	movw	r3, #53264	; 0xd010
  103aac:	e3403014 	movt	r3, #20
  103ab0:	e5933000 	ldr	r3, [r3]
  103ab4:	e51b2008 	ldr	r2, [fp, #-8]
  103ab8:	e1a01002 	mov	r1, r2
  103abc:	e1a00003 	mov	r0, r3
  103ac0:	ebfffef2 	bl	103690 <channel_cmd_reply>
                break;
  103ac4:	ea000056 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_RECVFROM:
                socket = (int)(size_t)cmd->argv[0];
  103ac8:	e51b3010 	ldr	r3, [fp, #-16]
  103acc:	e5933004 	ldr	r3, [r3, #4]
  103ad0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  103ad4:	e51b3010 	ldr	r3, [fp, #-16]
  103ad8:	e5933008 	ldr	r3, [r3, #8]
  103adc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  103ae0:	e51b3010 	ldr	r3, [fp, #-16]
  103ae4:	e593300c 	ldr	r3, [r3, #12]
  103ae8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                fromlen = (socklen_t*)cmd->argv[3];
  103aec:	e51b3010 	ldr	r3, [fp, #-16]
  103af0:	e5933010 	ldr	r3, [r3, #16]
  103af4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103af8:	e51b3010 	ldr	r3, [fp, #-16]
  103afc:	e283301c 	add	r3, r3, #28
  103b00:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                if(fromlen == RT_NULL)
  103b04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103b08:	e3530000 	cmp	r3, #0
  103b0c:	1a000006 	bne	103b2c <stack_run+0x3dc>
                {
                    result = recv_internal(socket, data, size, flags);
  103b10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103b14:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103b18:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103b1c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103b20:	eb001706 	bl	109740 <recv_internal>
  103b24:	e50b0008 	str	r0, [fp, #-8]
  103b28:	ea00000f 	b	103b6c <stack_run+0x41c>
                }
                else
                {
                    psockaddr =  (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  103b2c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103b30:	e283301c 	add	r3, r3, #28
  103b34:	e51b2010 	ldr	r2, [fp, #-16]
  103b38:	e0823003 	add	r3, r2, r3
  103b3c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = recvfrom_internal(socket, data, size, flags , psockaddr, fromlen);
  103b40:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  103b44:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103b48:	e58d3004 	str	r3, [sp, #4]
  103b4c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  103b50:	e58d3000 	str	r3, [sp]
  103b54:	e1a03002 	mov	r3, r2
  103b58:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103b5c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103b60:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103b64:	eb00170c 	bl	10979c <recvfrom_internal>
  103b68:	e50b0008 	str	r0, [fp, #-8]
                }

                lwp_shmdt(cmd);
  103b6c:	e51b0010 	ldr	r0, [fp, #-16]
  103b70:	ebfff8f3 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103b74:	e30d3010 	movw	r3, #53264	; 0xd010
  103b78:	e3403014 	movt	r3, #20
  103b7c:	e5933000 	ldr	r3, [r3]
  103b80:	e51b2008 	ldr	r2, [fp, #-8]
  103b84:	e1a01002 	mov	r1, r2
  103b88:	e1a00003 	mov	r0, r3
  103b8c:	ebfffebf 	bl	103690 <channel_cmd_reply>
                break;
  103b90:	ea000023 	b	103c24 <stack_run+0x4d4>
            //     channel_cmd_reply(stack_channel, (void *)(size_t)result);
            //     break;

            case UNET_SRV_CMD_SETSOCKOPT:
            {
                socket = (int)(size_t)cmd->argv[0];
  103b94:	e51b3010 	ldr	r3, [fp, #-16]
  103b98:	e5933004 	ldr	r3, [r3, #4]
  103b9c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                int level = (int)(size_t)cmd->argv[1];
  103ba0:	e51b3010 	ldr	r3, [fp, #-16]
  103ba4:	e5933008 	ldr	r3, [r3, #8]
  103ba8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                int opt = (int)(size_t)cmd->argv[2];
  103bac:	e51b3010 	ldr	r3, [fp, #-16]
  103bb0:	e593300c 	ldr	r3, [r3, #12]
  103bb4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                socklen = (socklen_t)(size_t)cmd->argv[3];
  103bb8:	e51b3010 	ldr	r3, [fp, #-16]
  103bbc:	e5933010 	ldr	r3, [r3, #16]
  103bc0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                void *optval =  (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103bc4:	e51b3010 	ldr	r3, [fp, #-16]
  103bc8:	e283301c 	add	r3, r3, #28
  103bcc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

                result = setsockopt_internal(socket, level, opt, optval, socklen);
  103bd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  103bd4:	e58d3000 	str	r3, [sp]
  103bd8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  103bdc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  103be0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  103be4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103be8:	eb0016b0 	bl	1096b0 <setsockopt_internal>
  103bec:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103bf0:	e51b0010 	ldr	r0, [fp, #-16]
  103bf4:	ebfff8d2 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103bf8:	e30d3010 	movw	r3, #53264	; 0xd010
  103bfc:	e3403014 	movt	r3, #20
  103c00:	e5933000 	ldr	r3, [r3]
  103c04:	e51b2008 	ldr	r2, [fp, #-8]
  103c08:	e1a01002 	mov	r1, r2
  103c0c:	e1a00003 	mov	r0, r3
  103c10:	ebfffe9e 	bl	103690 <channel_cmd_reply>
                break;
  103c14:	ea000002 	b	103c24 <stack_run+0x4d4>
    //             break;

            default :
                break;
            }
        }
  103c18:	e320f000 	nop	{0}
  103c1c:	eafffece 	b	10375c <stack_run+0xc>
                break;
  103c20:	e320f000 	nop	{0}
    {
  103c24:	eafffecc 	b	10375c <stack_run+0xc>

00103c28 <lwipkit_status>:

    return 0;
}

static void lwipkit_status(void)
{
  103c28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  103c2c:	e28db000 	add	fp, sp, #0
}
  103c30:	e320f000 	nop	{0}
  103c34:	e28bd000 	add	sp, fp, #0
  103c38:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103c3c:	e12fff1e 	bx	lr

00103c40 <lwipkit_usage>:

/* lwIPKit initialization should be done once at most */
static void lwipkit_usage(void)
{
  103c40:	e92d4800 	push	{fp, lr}
  103c44:	e28db004 	add	fp, sp, #4
    printf("lwIPKit Usage:\n"
  103c48:	e30504ec 	movw	r0, #21740	; 0x54ec
  103c4c:	e3400014 	movt	r0, #20
  103c50:	eb00ea58 	bl	13e5b8 <puts>
            "\tlwIPKit               :  run lwIPKit, wait for ethdev to attach\n"
            "\tlwIPKit attach   <eth>:  attach the device <eth> to lwIPKit\n"
            "\tlwIPKit deattach <eth>:  de-attach the device <eth> from lwIPKit\n"
            "\tlwIPKit default  <eth>:  set <eth> as the default device\n"
            "\tlwIPKit status        :  show the status of running lwIPKIt\n");
}
  103c54:	e320f000 	nop	{0}
  103c58:	e8bd8800 	pop	{fp, pc}

00103c5c <main>:

/* entry point */
extern void sal_init(void);
extern int dfs_init(void);
int main(int argc, char **argv)
{
  103c5c:	e92d4810 	push	{r4, fp, lr}
  103c60:	e28db008 	add	fp, sp, #8
  103c64:	e24dd034 	sub	sp, sp, #52	; 0x34
  103c68:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  103c6c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    int initialized = 0;
  103c70:	e3a03000 	mov	r3, #0
  103c74:	e50b3010 	str	r3, [fp, #-16]

    int data_channel = -1;  /* local variable, not the global one */
  103c78:	e3e03000 	mvn	r3, #0
  103c7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    int shmid = -1;
  103c80:	e3e03000 	mvn	r3, #0
  103c84:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    struct channel_cmd *cmd = NULL;
  103c88:	e3a03000 	mov	r3, #0
  103c8c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* no arguments, we want to run lwIPKit as a server */
    if (argc < 2)
  103c90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103c94:	e3530001 	cmp	r3, #1
  103c98:	ca000035 	bgt	103d74 <main+0x118>
    {        
        printf("lwIPKit: starts to run as the server");
  103c9c:	e3050634 	movw	r0, #22068	; 0x5634
  103ca0:	e3400014 	movt	r0, #20
  103ca4:	eb00ea35 	bl	13e580 <printf>
        initialized = stack_init();
  103ca8:	ebfffe91 	bl	1036f4 <stack_init>
  103cac:	e50b0010 	str	r0, [fp, #-16]
        if (initialized < 0)
  103cb0:	e51b3010 	ldr	r3, [fp, #-16]
  103cb4:	e3530000 	cmp	r3, #0
  103cb8:	aa000004 	bge	103cd0 <main+0x74>
        {
            printf(" ...failed!\n");
  103cbc:	e305065c 	movw	r0, #22108	; 0x565c
  103cc0:	e3400014 	movt	r0, #20
  103cc4:	eb00ea3b 	bl	13e5b8 <puts>
            return -1;
  103cc8:	e3e03000 	mvn	r3, #0
  103ccc:	ea0000f7 	b	1040b0 <main+0x454>
        }
        else if (initialized > 0)   /* valid lwIPKit process exists */
  103cd0:	e51b3010 	ldr	r3, [fp, #-16]
  103cd4:	e3530000 	cmp	r3, #0
  103cd8:	da000004 	ble	103cf0 <main+0x94>
        {
            printf(" ...skipped! Already initialized\n");
  103cdc:	e3050668 	movw	r0, #22120	; 0x5668
  103ce0:	e3400014 	movt	r0, #20
  103ce4:	eb00ea33 	bl	13e5b8 <puts>
            return 0;
  103ce8:	e3a03000 	mov	r3, #0
  103cec:	ea0000ef 	b	1040b0 <main+0x454>
        }
        else
        {
            // netdev_list_init();
            printf(" ...succeeded!\n");
  103cf0:	e305068c 	movw	r0, #22156	; 0x568c
  103cf4:	e3400014 	movt	r0, #20
  103cf8:	eb00ea2e 	bl	13e5b8 <puts>

            // rt_thread_t tid = rt_thread_create("ipdata", stack_data_input, NULL, 8192,
            //     25, 10);            /* handle the input data */
            // if (tid) rt_thread_startup(tid);

            printf("lwIPKit: init eth dev...");
  103cfc:	e305069c 	movw	r0, #22172	; 0x569c
  103d00:	e3400014 	movt	r0, #20
  103d04:	eb00ea1d 	bl	13e580 <printf>
            const char * eth_name;
            initialized = imx6ul_eth_init(0, &eth_name);
  103d08:	e24b3024 	sub	r3, fp, #36	; 0x24
  103d0c:	e1a01003 	mov	r1, r3
  103d10:	e3a00000 	mov	r0, #0
  103d14:	eb00c6a2 	bl	1357a4 <imx6ul_eth_init>
  103d18:	e50b0010 	str	r0, [fp, #-16]
            if (initialized < 0)
  103d1c:	e51b3010 	ldr	r3, [fp, #-16]
  103d20:	e3530000 	cmp	r3, #0
  103d24:	aa000004 	bge	103d3c <main+0xe0>
            {
                printf(" ...failed!\n");
  103d28:	e305065c 	movw	r0, #22108	; 0x565c
  103d2c:	e3400014 	movt	r0, #20
  103d30:	eb00ea20 	bl	13e5b8 <puts>
                return -1;
  103d34:	e3e03000 	mvn	r3, #0
  103d38:	ea0000dc 	b	1040b0 <main+0x454>
            }
            else if (initialized > 0)   /* valid lwIPKit process exists */
  103d3c:	e51b3010 	ldr	r3, [fp, #-16]
  103d40:	e3530000 	cmp	r3, #0
  103d44:	da000004 	ble	103d5c <main+0x100>
            {
                printf(" ...skipped! Already initialized\n");
  103d48:	e3050668 	movw	r0, #22120	; 0x5668
  103d4c:	e3400014 	movt	r0, #20
  103d50:	eb00ea18 	bl	13e5b8 <puts>
                return 0;
  103d54:	e3a03000 	mov	r3, #0
  103d58:	ea0000d4 	b	1040b0 <main+0x454>
            } 
            else 
            {
                printf("succeeded\n");
  103d5c:	e30506b8 	movw	r0, #22200	; 0x56b8
  103d60:	e3400014 	movt	r0, #20
  103d64:	eb00ea13 	bl	13e5b8 <puts>
                dfs_init();
  103d68:	eb001730 	bl	109a30 <dfs_init>
                sal_init();
  103d6c:	eb000c20 	bl	106df4 <sal_init>
                // netdev_init(eth_name);
            }

            stack_run();            /* handle network requests, never return */
  103d70:	ebfffe76 	bl	103750 <stack_run>
        }
    }

    /* attach the device */
    if (argc >= 3 && strncmp(argv[1], "attach", 6) == 0)
  103d74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103d78:	e3530002 	cmp	r3, #2
  103d7c:	da000050 	ble	103ec4 <main+0x268>
  103d80:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103d84:	e2833004 	add	r3, r3, #4
  103d88:	e5933000 	ldr	r3, [r3]
  103d8c:	e3a02006 	mov	r2, #6
  103d90:	e30516c4 	movw	r1, #22212	; 0x56c4
  103d94:	e3401014 	movt	r1, #20
  103d98:	e1a00003 	mov	r0, r3
  103d9c:	eb00f5e3 	bl	141530 <strncmp>
  103da0:	e1a03000 	mov	r3, r0
  103da4:	e3530000 	cmp	r3, #0
  103da8:	1a000045 	bne	103ec4 <main+0x268>
    {
        int static_ip = 0;
  103dac:	e3a03000 	mov	r3, #0
  103db0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
        printf("lwIPKit: attach device %s\n", argv[2]);
  103db4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103db8:	e2833008 	add	r3, r3, #8
  103dbc:	e5933000 	ldr	r3, [r3]
  103dc0:	e1a01003 	mov	r1, r3
  103dc4:	e30506cc 	movw	r0, #22220	; 0x56cc
  103dc8:	e3400014 	movt	r0, #20
  103dcc:	eb00e9eb 	bl	13e580 <printf>

        data_channel = rt_channel_open(data_name, O_RDWR);
  103dd0:	e30d3018 	movw	r3, #53272	; 0xd018
  103dd4:	e3403014 	movt	r3, #20
  103dd8:	e5933000 	ldr	r3, [r3]
  103ddc:	e3a01002 	mov	r1, #2
  103de0:	e1a00003 	mov	r0, r3
  103de4:	ebfff0cb 	bl	100118 <rt_channel_open>
  103de8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (data_channel < 0)
  103dec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103df0:	e3530000 	cmp	r3, #0
  103df4:	aa000004 	bge	103e0c <main+0x1b0>
        {
            printf("cannot open data_channel, please make sure lwIPKit server is running!\n");
  103df8:	e30506e8 	movw	r0, #22248	; 0x56e8
  103dfc:	e3400014 	movt	r0, #20
  103e00:	eb00e9ec 	bl	13e5b8 <puts>
            return -1;
  103e04:	e3e03000 	mvn	r3, #0
  103e08:	ea0000a8 	b	1040b0 <main+0x454>
        }

        shmid = channel_compose_cmd1(UNET_NETDEV_REQ_ATTACH, (void *)(size_t)static_ip, strlen(argv[2]) + 1);
  103e0c:	e51b4020 	ldr	r4, [fp, #-32]	; 0xffffffe0
  103e10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103e14:	e2833008 	add	r3, r3, #8
  103e18:	e5933000 	ldr	r3, [r3]
  103e1c:	e1a00003 	mov	r0, r3
  103e20:	eb00f596 	bl	141480 <strlen>
  103e24:	e1a03000 	mov	r3, r0
  103e28:	e2833001 	add	r3, r3, #1
  103e2c:	e58d300c 	str	r3, [sp, #12]
  103e30:	e3a03000 	mov	r3, #0
  103e34:	e58d3008 	str	r3, [sp, #8]
  103e38:	e3a03000 	mov	r3, #0
  103e3c:	e58d3004 	str	r3, [sp, #4]
  103e40:	e3a03000 	mov	r3, #0
  103e44:	e58d3000 	str	r3, [sp]
  103e48:	e3a03000 	mov	r3, #0
  103e4c:	e3a02000 	mov	r2, #0
  103e50:	e1a01004 	mov	r1, r4
  103e54:	e3a00065 	mov	r0, #101	; 0x65
  103e58:	eb000097 	bl	1040bc <channel_compose_cmd>
  103e5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  103e60:	e3a01000 	mov	r1, #0
  103e64:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103e68:	ebfff828 	bl	101f10 <lwp_shmat>
  103e6c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (cmd)
  103e70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103e74:	e3530000 	cmp	r3, #0
  103e78:	0a000009 	beq	103ea4 <main+0x248>
        {
            strcpy(CHANNEL_CMD_DATA(cmd), argv[2]);
  103e7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103e80:	e283201c 	add	r2, r3, #28
  103e84:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103e88:	e2833008 	add	r3, r3, #8
  103e8c:	e5933000 	ldr	r3, [r3]
  103e90:	e1a01003 	mov	r1, r3
  103e94:	e1a00002 	mov	r0, r2
  103e98:	eb00f567 	bl	14143c <strcpy>
            lwp_shmdt(cmd);
  103e9c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  103ea0:	ebfff827 	bl	101f44 <lwp_shmdt>
        }
        channel_cmd_send(data_channel, (void *)(size_t)shmid);
  103ea4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103ea8:	e1a01003 	mov	r1, r3
  103eac:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103eb0:	ebfffdc6 	bl	1035d0 <channel_cmd_send>
        rt_channel_close(data_channel);
  103eb4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103eb8:	ebfff0a3 	bl	10014c <rt_channel_close>

        return 0;
  103ebc:	e3a03000 	mov	r3, #0
  103ec0:	ea00007a 	b	1040b0 <main+0x454>
    }

    /* deattach the device and restore it to the uninitialized state */
    if (argc == 3)
  103ec4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103ec8:	e3530003 	cmp	r3, #3
  103ecc:	1a000061 	bne	104058 <main+0x3fc>
    {
        if (strncmp(argv[1], "deattach", 8) == 0)
  103ed0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103ed4:	e2833004 	add	r3, r3, #4
  103ed8:	e5933000 	ldr	r3, [r3]
  103edc:	e3a02008 	mov	r2, #8
  103ee0:	e3051730 	movw	r1, #22320	; 0x5730
  103ee4:	e3401014 	movt	r1, #20
  103ee8:	e1a00003 	mov	r0, r3
  103eec:	eb00f58f 	bl	141530 <strncmp>
  103ef0:	e1a03000 	mov	r3, r0
  103ef4:	e3530000 	cmp	r3, #0
  103ef8:	1a000042 	bne	104008 <main+0x3ac>
        {
            printf("lwIPKit: de-attach device %s\n", argv[2]);
  103efc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103f00:	e2833008 	add	r3, r3, #8
  103f04:	e5933000 	ldr	r3, [r3]
  103f08:	e1a01003 	mov	r1, r3
  103f0c:	e305073c 	movw	r0, #22332	; 0x573c
  103f10:	e3400014 	movt	r0, #20
  103f14:	eb00e999 	bl	13e580 <printf>

            data_channel = rt_channel_open(data_name, O_RDWR);
  103f18:	e30d3018 	movw	r3, #53272	; 0xd018
  103f1c:	e3403014 	movt	r3, #20
  103f20:	e5933000 	ldr	r3, [r3]
  103f24:	e3a01002 	mov	r1, #2
  103f28:	e1a00003 	mov	r0, r3
  103f2c:	ebfff079 	bl	100118 <rt_channel_open>
  103f30:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
            if (data_channel < 0)
  103f34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103f38:	e3530000 	cmp	r3, #0
  103f3c:	aa000004 	bge	103f54 <main+0x2f8>
            {
                printf("cannot open data_channel, please make sure lwIPKit server is running!\n");
  103f40:	e30506e8 	movw	r0, #22248	; 0x56e8
  103f44:	e3400014 	movt	r0, #20
  103f48:	eb00e99a 	bl	13e5b8 <puts>
                return -1;
  103f4c:	e3e03000 	mvn	r3, #0
  103f50:	ea000056 	b	1040b0 <main+0x454>
            }

            shmid = channel_compose_cmd0(UNET_NETDEV_REQ_DETACH, strlen(argv[2]) + 1);
  103f54:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103f58:	e2833008 	add	r3, r3, #8
  103f5c:	e5933000 	ldr	r3, [r3]
  103f60:	e1a00003 	mov	r0, r3
  103f64:	eb00f545 	bl	141480 <strlen>
  103f68:	e1a03000 	mov	r3, r0
  103f6c:	e2833001 	add	r3, r3, #1
  103f70:	e58d300c 	str	r3, [sp, #12]
  103f74:	e3a03000 	mov	r3, #0
  103f78:	e58d3008 	str	r3, [sp, #8]
  103f7c:	e3a03000 	mov	r3, #0
  103f80:	e58d3004 	str	r3, [sp, #4]
  103f84:	e3a03000 	mov	r3, #0
  103f88:	e58d3000 	str	r3, [sp]
  103f8c:	e3a03000 	mov	r3, #0
  103f90:	e3a02000 	mov	r2, #0
  103f94:	e3a01000 	mov	r1, #0
  103f98:	e3a00066 	mov	r0, #102	; 0x66
  103f9c:	eb000046 	bl	1040bc <channel_compose_cmd>
  103fa0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
            cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  103fa4:	e3a01000 	mov	r1, #0
  103fa8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103fac:	ebfff7d7 	bl	101f10 <lwp_shmat>
  103fb0:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
            if (cmd)
  103fb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103fb8:	e3530000 	cmp	r3, #0
  103fbc:	0a000009 	beq	103fe8 <main+0x38c>
            {
                strcpy(CHANNEL_CMD_DATA(cmd), argv[2]);
  103fc0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103fc4:	e283201c 	add	r2, r3, #28
  103fc8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103fcc:	e2833008 	add	r3, r3, #8
  103fd0:	e5933000 	ldr	r3, [r3]
  103fd4:	e1a01003 	mov	r1, r3
  103fd8:	e1a00002 	mov	r0, r2
  103fdc:	eb00f516 	bl	14143c <strcpy>
                lwp_shmdt(cmd);
  103fe0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  103fe4:	ebfff7d6 	bl	101f44 <lwp_shmdt>
            }
            channel_cmd_send(data_channel, (void *)(size_t)shmid);
  103fe8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103fec:	e1a01003 	mov	r1, r3
  103ff0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103ff4:	ebfffd75 	bl	1035d0 <channel_cmd_send>
            rt_channel_close(data_channel);
  103ff8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103ffc:	ebfff052 	bl	10014c <rt_channel_close>

            return 0;
  104000:	e3a03000 	mov	r3, #0
  104004:	ea000029 	b	1040b0 <main+0x454>
        }


        if (strncmp(argv[1], "default", 8) == 0)
  104008:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10400c:	e2833004 	add	r3, r3, #4
  104010:	e5933000 	ldr	r3, [r3]
  104014:	e3a02008 	mov	r2, #8
  104018:	e305175c 	movw	r1, #22364	; 0x575c
  10401c:	e3401014 	movt	r1, #20
  104020:	e1a00003 	mov	r0, r3
  104024:	eb00f541 	bl	141530 <strncmp>
  104028:	e1a03000 	mov	r3, r0
  10402c:	e3530000 	cmp	r3, #0
  104030:	1a000008 	bne	104058 <main+0x3fc>
        {
            printf("lwIPKit: set the default device %s", argv[2]);
  104034:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104038:	e2833008 	add	r3, r3, #8
  10403c:	e5933000 	ldr	r3, [r3]
  104040:	e1a01003 	mov	r1, r3
  104044:	e3050764 	movw	r0, #22372	; 0x5764
  104048:	e3400014 	movt	r0, #20
  10404c:	eb00e94b 	bl	13e580 <printf>
            //eth_set_default(argv[2]);
            return 0;
  104050:	e3a03000 	mov	r3, #0
  104054:	ea000015 	b	1040b0 <main+0x454>
        }
    }

    /* show the status */
    if (argc == 2 && strncmp(argv[1], "status", 6) == 0)
  104058:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10405c:	e3530002 	cmp	r3, #2
  104060:	1a000010 	bne	1040a8 <main+0x44c>
  104064:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104068:	e2833004 	add	r3, r3, #4
  10406c:	e5933000 	ldr	r3, [r3]
  104070:	e3a02006 	mov	r2, #6
  104074:	e3051788 	movw	r1, #22408	; 0x5788
  104078:	e3401014 	movt	r1, #20
  10407c:	e1a00003 	mov	r0, r3
  104080:	eb00f52a 	bl	141530 <strncmp>
  104084:	e1a03000 	mov	r3, r0
  104088:	e3530000 	cmp	r3, #0
  10408c:	1a000005 	bne	1040a8 <main+0x44c>
    {
        printf("lwIPKit: the status of the attached devices as follows\n");
  104090:	e3050790 	movw	r0, #22416	; 0x5790
  104094:	e3400014 	movt	r0, #20
  104098:	eb00e946 	bl	13e5b8 <puts>
        lwipkit_status();
  10409c:	ebfffee1 	bl	103c28 <lwipkit_status>
        return 0;
  1040a0:	e3a03000 	mov	r3, #0
  1040a4:	ea000001 	b	1040b0 <main+0x454>
    }

    lwipkit_usage();
  1040a8:	ebfffee4 	bl	103c40 <lwipkit_usage>
    return -1;
  1040ac:	e3e03000 	mvn	r3, #0
}
  1040b0:	e1a00003 	mov	r0, r3
  1040b4:	e24bd008 	sub	sp, fp, #8
  1040b8:	e8bd8810 	pop	{r4, fp, pc}

001040bc <channel_compose_cmd>:
#include "channel.h"

static int _shm_key = -1;
int channel_compose_cmd(uint32_t cmd, void *arg0, void *arg1, void *arg2,
    void *arg3, void *arg4, void *arg5, size_t datalen)
{
  1040bc:	e92d4800 	push	{fp, lr}
  1040c0:	e28db004 	add	fp, sp, #4
  1040c4:	e24dd020 	sub	sp, sp, #32
  1040c8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1040cc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1040d0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1040d4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int shmid;
    void *shm_vaddr = NULL;
  1040d8:	e3a03000 	mov	r3, #0
  1040dc:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *pcmd = NULL;
  1040e0:	e3a03000 	mov	r3, #0
  1040e4:	e50b300c 	str	r3, [fp, #-12]

    /* the shared memory includes the command and the possible data */
    size_t len = datalen + CHANNEL_CMD_OFFSET;
  1040e8:	e59b3010 	ldr	r3, [fp, #16]
  1040ec:	e283301c 	add	r3, r3, #28
  1040f0:	e50b3010 	str	r3, [fp, #-16]

    /* use the current thread ID to label the shared memory */
    if (_shm_key == -1)_shm_key = (int)(unsigned long)rt_thread_self();
  1040f4:	e30d301c 	movw	r3, #53276	; 0xd01c
  1040f8:	e3403014 	movt	r3, #20
  1040fc:	e5933000 	ldr	r3, [r3]
  104100:	e3730001 	cmn	r3, #1
  104104:	1a000005 	bne	104120 <channel_compose_cmd+0x64>
  104108:	ebfff839 	bl	1021f4 <rt_thread_self>
  10410c:	e1a03000 	mov	r3, r0
  104110:	e1a02003 	mov	r2, r3
  104114:	e30d301c 	movw	r3, #53276	; 0xd01c
  104118:	e3403014 	movt	r3, #20
  10411c:	e5832000 	str	r2, [r3]
    _shm_key = _shm_key + 2;
  104120:	e30d301c 	movw	r3, #53276	; 0xd01c
  104124:	e3403014 	movt	r3, #20
  104128:	e5933000 	ldr	r3, [r3]
  10412c:	e2832002 	add	r2, r3, #2
  104130:	e30d301c 	movw	r3, #53276	; 0xd01c
  104134:	e3403014 	movt	r3, #20
  104138:	e5832000 	str	r2, [r3]

    shmid = lwp_shmget(_shm_key, len, 1);    /* create a new shared-memory */
  10413c:	e30d301c 	movw	r3, #53276	; 0xd01c
  104140:	e3403014 	movt	r3, #20
  104144:	e5933000 	ldr	r3, [r3]
  104148:	e3a02001 	mov	r2, #1
  10414c:	e51b1010 	ldr	r1, [fp, #-16]
  104150:	e1a00003 	mov	r0, r3
  104154:	ebfff753 	bl	101ea8 <lwp_shmget>
  104158:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (shmid == -1)
  10415c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104160:	e3730001 	cmn	r3, #1
  104164:	1a00000a 	bne	104194 <channel_compose_cmd+0xd8>
    {
        rt_kprintf("%s :Fail to allocate a shared memory! _shm_key %ld\n",__func__,_shm_key);
  104168:	e30d301c 	movw	r3, #53276	; 0xd01c
  10416c:	e3403014 	movt	r3, #20
  104170:	e5933000 	ldr	r3, [r3]
  104174:	e1a02003 	mov	r2, r3
  104178:	e3051880 	movw	r1, #22656	; 0x5880
  10417c:	e3401014 	movt	r1, #20
  104180:	e3050810 	movw	r0, #22544	; 0x5810
  104184:	e3400014 	movt	r0, #20
  104188:	ebfffbe1 	bl	103114 <rt_kprintf>
        return -1;
  10418c:	e3e03000 	mvn	r3, #0
  104190:	ea000027 	b	104234 <channel_compose_cmd+0x178>
    }

    /* get the start address of the shared memory */
    shm_vaddr = lwp_shmat(shmid, NULL);
  104194:	e3a01000 	mov	r1, #0
  104198:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10419c:	ebfff75b 	bl	101f10 <lwp_shmat>
  1041a0:	e50b0008 	str	r0, [fp, #-8]
    if (shm_vaddr == NULL)
  1041a4:	e51b3008 	ldr	r3, [fp, #-8]
  1041a8:	e3530000 	cmp	r3, #0
  1041ac:	1a000006 	bne	1041cc <channel_compose_cmd+0x110>
    {
        printf("The allocated shared memory doesn't have a valid address!\n");
  1041b0:	e3050844 	movw	r0, #22596	; 0x5844
  1041b4:	e3400014 	movt	r0, #20
  1041b8:	eb00e8fe 	bl	13e5b8 <puts>
        lwp_shmrm(shmid);
  1041bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1041c0:	ebfff747 	bl	101ee4 <lwp_shmrm>
        return -1;
  1041c4:	e3e03000 	mvn	r3, #0
  1041c8:	ea000019 	b	104234 <channel_compose_cmd+0x178>
    }

    /* prepare the command structure */
    pcmd = (struct channel_cmd *) shm_vaddr;
  1041cc:	e51b3008 	ldr	r3, [fp, #-8]
  1041d0:	e50b300c 	str	r3, [fp, #-12]

    pcmd->cmd = cmd;
  1041d4:	e51b300c 	ldr	r3, [fp, #-12]
  1041d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1041dc:	e5832000 	str	r2, [r3]
    pcmd->argv[0] = arg0;
  1041e0:	e51b300c 	ldr	r3, [fp, #-12]
  1041e4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1041e8:	e5832004 	str	r2, [r3, #4]
    pcmd->argv[1] = arg1;
  1041ec:	e51b300c 	ldr	r3, [fp, #-12]
  1041f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1041f4:	e5832008 	str	r2, [r3, #8]
    pcmd->argv[2] = arg2;
  1041f8:	e51b300c 	ldr	r3, [fp, #-12]
  1041fc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  104200:	e583200c 	str	r2, [r3, #12]
    pcmd->argv[3] = arg3;
  104204:	e51b300c 	ldr	r3, [fp, #-12]
  104208:	e59b2004 	ldr	r2, [fp, #4]
  10420c:	e5832010 	str	r2, [r3, #16]
    pcmd->argv[4] = arg4;
  104210:	e51b300c 	ldr	r3, [fp, #-12]
  104214:	e59b2008 	ldr	r2, [fp, #8]
  104218:	e5832014 	str	r2, [r3, #20]
    pcmd->argv[5] = arg5;
  10421c:	e51b300c 	ldr	r3, [fp, #-12]
  104220:	e59b200c 	ldr	r2, [fp, #12]
  104224:	e5832018 	str	r2, [r3, #24]

    lwp_shmdt(shm_vaddr);
  104228:	e51b0008 	ldr	r0, [fp, #-8]
  10422c:	ebfff744 	bl	101f44 <lwp_shmdt>

    return shmid;
  104230:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  104234:	e1a00003 	mov	r0, r3
  104238:	e24bd004 	sub	sp, fp, #4
  10423c:	e8bd8800 	pop	{fp, pc}

00104240 <channel_cmd_send_recv>:
{
  104240:	e92d4800 	push	{fp, lr}
  104244:	e28db004 	add	fp, sp, #4
  104248:	e24dd018 	sub	sp, sp, #24
  10424c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  104250:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  104254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104258:	e3530000 	cmp	r3, #0
  10425c:	aa000005 	bge	104278 <channel_cmd_send_recv+0x38>
  104260:	e3a0200a 	mov	r2, #10
  104264:	e30518e0 	movw	r1, #22752	; 0x58e0
  104268:	e3401014 	movt	r1, #20
  10426c:	e3050894 	movw	r0, #22676	; 0x5894
  104270:	e3400014 	movt	r0, #20
  104274:	ebfffcc7 	bl	103598 <rt_assert_handler>
    chn_msg.type   = RT_CHANNEL_RAW;
  104278:	e3a03000 	mov	r3, #0
  10427c:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d    = cmd;
  104280:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  104284:	e50b300c 	str	r3, [fp, #-12]
    rt_channel_send_recv(channel, &chn_msg, &chn_msg);
  104288:	e24b2014 	sub	r2, fp, #20
  10428c:	e24b3014 	sub	r3, fp, #20
  104290:	e1a01003 	mov	r1, r3
  104294:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  104298:	ebffefb6 	bl	100178 <rt_channel_send_recv>
    return chn_msg.u.d;
  10429c:	e51b300c 	ldr	r3, [fp, #-12]
}
  1042a0:	e1a00003 	mov	r0, r3
  1042a4:	e24bd004 	sub	sp, fp, #4
  1042a8:	e8bd8800 	pop	{fp, pc}

001042ac <channel_cmd_recv>:
{
  1042ac:	e92d4800 	push	{fp, lr}
  1042b0:	e28db004 	add	fp, sp, #4
  1042b4:	e24dd018 	sub	sp, sp, #24
  1042b8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  1042bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1042c0:	e3530000 	cmp	r3, #0
  1042c4:	aa000005 	bge	1042e0 <channel_cmd_recv+0x34>
  1042c8:	e3a02027 	mov	r2, #39	; 0x27
  1042cc:	e30518cc 	movw	r1, #22732	; 0x58cc
  1042d0:	e3401014 	movt	r1, #20
  1042d4:	e3050894 	movw	r0, #22676	; 0x5894
  1042d8:	e3400014 	movt	r0, #20
  1042dc:	ebfffcad 	bl	103598 <rt_assert_handler>
    chn_msg.type = RT_CHANNEL_RAW;
  1042e0:	e3a03000 	mov	r3, #0
  1042e4:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  1042e8:	e24b3014 	sub	r3, fp, #20
  1042ec:	e1a01003 	mov	r1, r3
  1042f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1042f4:	ebffefdc 	bl	10026c <rt_channel_recv>
    return chn_msg.u.d;
  1042f8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1042fc:	e1a00003 	mov	r0, r3
  104300:	e24bd004 	sub	sp, fp, #4
  104304:	e8bd8800 	pop	{fp, pc}

00104308 <ipc_service_init>:
const char *ueth_srv_name = "ueth_srv";
static int ueth_int_channel = -1;
const char *ueth_int_name = "ueth_int";

rt_err_t ipc_service_init()
{
  104308:	e92d4800 	push	{fp, lr}
  10430c:	e28db004 	add	fp, sp, #4
    ueth_ueth_srv_channel = rt_channel_open(ueth_srv_name, O_RDWR);
  104310:	e30d3024 	movw	r3, #53284	; 0xd024
  104314:	e3403014 	movt	r3, #20
  104318:	e5933000 	ldr	r3, [r3]
  10431c:	e3a01002 	mov	r1, #2
  104320:	e1a00003 	mov	r0, r3
  104324:	ebffef7b 	bl	100118 <rt_channel_open>
  104328:	e1a02000 	mov	r2, r0
  10432c:	e30d3020 	movw	r3, #53280	; 0xd020
  104330:	e3403014 	movt	r3, #20
  104334:	e5832000 	str	r2, [r3]
    if (ueth_ueth_srv_channel < 0)
  104338:	e30d3020 	movw	r3, #53280	; 0xd020
  10433c:	e3403014 	movt	r3, #20
  104340:	e5933000 	ldr	r3, [r3]
  104344:	e3530000 	cmp	r3, #0
  104348:	aa000008 	bge	104370 <ipc_service_init+0x68>
    {
        printf("open %s failed\n", ueth_srv_name);
  10434c:	e30d3024 	movw	r3, #53284	; 0xd024
  104350:	e3403014 	movt	r3, #20
  104354:	e5933000 	ldr	r3, [r3]
  104358:	e1a01003 	mov	r1, r3
  10435c:	e30508bc 	movw	r0, #22716	; 0x58bc
  104360:	e3400014 	movt	r0, #20
  104364:	eb00e885 	bl	13e580 <printf>
        return RT_ERROR;
  104368:	e3a03001 	mov	r3, #1
  10436c:	ea000018 	b	1043d4 <ipc_service_init+0xcc>
    }

    ueth_int_channel = rt_channel_open(ueth_int_name, O_RDWR);
  104370:	e30d302c 	movw	r3, #53292	; 0xd02c
  104374:	e3403014 	movt	r3, #20
  104378:	e5933000 	ldr	r3, [r3]
  10437c:	e3a01002 	mov	r1, #2
  104380:	e1a00003 	mov	r0, r3
  104384:	ebffef63 	bl	100118 <rt_channel_open>
  104388:	e1a02000 	mov	r2, r0
  10438c:	e30d3028 	movw	r3, #53288	; 0xd028
  104390:	e3403014 	movt	r3, #20
  104394:	e5832000 	str	r2, [r3]
    if (ueth_int_channel < 0)
  104398:	e30d3028 	movw	r3, #53288	; 0xd028
  10439c:	e3403014 	movt	r3, #20
  1043a0:	e5933000 	ldr	r3, [r3]
  1043a4:	e3530000 	cmp	r3, #0
  1043a8:	aa000008 	bge	1043d0 <ipc_service_init+0xc8>
    {
        printf("open %s failed\n", ueth_int_name);
  1043ac:	e30d302c 	movw	r3, #53292	; 0xd02c
  1043b0:	e3403014 	movt	r3, #20
  1043b4:	e5933000 	ldr	r3, [r3]
  1043b8:	e1a01003 	mov	r1, r3
  1043bc:	e30508bc 	movw	r0, #22716	; 0x58bc
  1043c0:	e3400014 	movt	r0, #20
  1043c4:	eb00e86d 	bl	13e580 <printf>
        return RT_ERROR;
  1043c8:	e3a03001 	mov	r3, #1
  1043cc:	ea000000 	b	1043d4 <ipc_service_init+0xcc>
    }

    return RT_EOK;
  1043d0:	e3a03000 	mov	r3, #0
}
  1043d4:	e1a00003 	mov	r0, r3
  1043d8:	e8bd8800 	pop	{fp, pc}

001043dc <ueth_int_recv>:

void ueth_int_recv(void)
{
  1043dc:	e92d4800 	push	{fp, lr}
  1043e0:	e28db004 	add	fp, sp, #4
    channel_cmd_recv(ueth_int_channel);
  1043e4:	e30d3028 	movw	r3, #53288	; 0xd028
  1043e8:	e3403014 	movt	r3, #20
  1043ec:	e5933000 	ldr	r3, [r3]
  1043f0:	e1a00003 	mov	r0, r3
  1043f4:	ebffffac 	bl	1042ac <channel_cmd_recv>
}
  1043f8:	e320f000 	nop	{0}
  1043fc:	e8bd8800 	pop	{fp, pc}

00104400 <ueth_v2p>:

void *ueth_v2p(void * addr)
{
  104400:	e92d4800 	push	{fp, lr}
  104404:	e28db004 	add	fp, sp, #4
  104408:	e24dd028 	sub	sp, sp, #40	; 0x28
  10440c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    void* thread_self = rt_thread_self();
  104410:	ebfff777 	bl	1021f4 <rt_thread_self>
  104414:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd3(UETH_V2P_REQ, (void*)0, thread_self, addr, 0);
  104418:	e3a03000 	mov	r3, #0
  10441c:	e58d300c 	str	r3, [sp, #12]
  104420:	e3a03000 	mov	r3, #0
  104424:	e58d3008 	str	r3, [sp, #8]
  104428:	e3a03000 	mov	r3, #0
  10442c:	e58d3004 	str	r3, [sp, #4]
  104430:	e3a03000 	mov	r3, #0
  104434:	e58d3000 	str	r3, [sp]
  104438:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10443c:	e51b200c 	ldr	r2, [fp, #-12]
  104440:	e3a01000 	mov	r1, #0
  104444:	e3a00005 	mov	r0, #5
  104448:	ebffff1b 	bl	1040bc <channel_compose_cmd>
  10444c:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  104450:	e3a03000 	mov	r3, #0
  104454:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  104458:	e3a01000 	mov	r1, #0
  10445c:	e51b0010 	ldr	r0, [fp, #-16]
  104460:	ebfff6aa 	bl	101f10 <lwp_shmat>
  104464:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  104468:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10446c:	e3530000 	cmp	r3, #0
  104470:	0a000009 	beq	10449c <ueth_v2p+0x9c>
    {
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  104474:	e30d3020 	movw	r3, #53280	; 0xd020
  104478:	e3403014 	movt	r3, #20
  10447c:	e5933000 	ldr	r3, [r3]
  104480:	e51b2010 	ldr	r2, [fp, #-16]
  104484:	e1a01002 	mov	r1, r2
  104488:	e1a00003 	mov	r0, r3
  10448c:	ebffff6b 	bl	104240 <channel_cmd_send_recv>
  104490:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  104494:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104498:	ebfff6a9 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  10449c:	e51b0010 	ldr	r0, [fp, #-16]
  1044a0:	ebfff68f 	bl	101ee4 <lwp_shmrm>
    return res;
  1044a4:	e51b3008 	ldr	r3, [fp, #-8]

}
  1044a8:	e1a00003 	mov	r0, r3
  1044ac:	e24bd004 	sub	sp, fp, #4
  1044b0:	e8bd8800 	pop	{fp, pc}

001044b4 <ueth_remap>:

void *ueth_remap(void * addr, int type, size_t size) 
{
  1044b4:	e92d4800 	push	{fp, lr}
  1044b8:	e28db004 	add	fp, sp, #4
  1044bc:	e24dd030 	sub	sp, sp, #48	; 0x30
  1044c0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1044c4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1044c8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    void* thread_self = rt_thread_self();
  1044cc:	ebfff748 	bl	1021f4 <rt_thread_self>
  1044d0:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd4(UETH_REMAP_REQ, (void*)0, thread_self, (void*)type, addr, sizeof(size_t));
  1044d4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1044d8:	e3a03004 	mov	r3, #4
  1044dc:	e58d300c 	str	r3, [sp, #12]
  1044e0:	e3a03000 	mov	r3, #0
  1044e4:	e58d3008 	str	r3, [sp, #8]
  1044e8:	e3a03000 	mov	r3, #0
  1044ec:	e58d3004 	str	r3, [sp, #4]
  1044f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1044f4:	e58d3000 	str	r3, [sp]
  1044f8:	e1a03002 	mov	r3, r2
  1044fc:	e51b200c 	ldr	r2, [fp, #-12]
  104500:	e3a01000 	mov	r1, #0
  104504:	e3a00001 	mov	r0, #1
  104508:	ebfffeeb 	bl	1040bc <channel_compose_cmd>
  10450c:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  104510:	e3a03000 	mov	r3, #0
  104514:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  104518:	e3a01000 	mov	r1, #0
  10451c:	e51b0010 	ldr	r0, [fp, #-16]
  104520:	ebfff67a 	bl	101f10 <lwp_shmat>
  104524:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  104528:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10452c:	e3530000 	cmp	r3, #0
  104530:	0a00000d 	beq	10456c <ueth_remap+0xb8>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  104534:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104538:	e283301c 	add	r3, r3, #28
  10453c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  104540:	e5832000 	str	r2, [r3]
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  104544:	e30d3020 	movw	r3, #53280	; 0xd020
  104548:	e3403014 	movt	r3, #20
  10454c:	e5933000 	ldr	r3, [r3]
  104550:	e51b2010 	ldr	r2, [fp, #-16]
  104554:	e1a01002 	mov	r1, r2
  104558:	e1a00003 	mov	r0, r3
  10455c:	ebffff37 	bl	104240 <channel_cmd_send_recv>
  104560:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  104564:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104568:	ebfff675 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  10456c:	e51b0010 	ldr	r0, [fp, #-16]
  104570:	ebfff65b 	bl	101ee4 <lwp_shmrm>
    return res;
  104574:	e51b3008 	ldr	r3, [fp, #-8]
}
  104578:	e1a00003 	mov	r0, r3
  10457c:	e24bd004 	sub	sp, fp, #4
  104580:	e8bd8800 	pop	{fp, pc}

00104584 <ueth_gpioinit>:

void ueth_gpioinit(void *gpio, size_t size) 
{
  104584:	e92d4800 	push	{fp, lr}
  104588:	e28db004 	add	fp, sp, #4
  10458c:	e24dd020 	sub	sp, sp, #32
  104590:	e50b0010 	str	r0, [fp, #-16]
  104594:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd1(UETH_GPIOINIT_REQ, (void*)0, size);
  104598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10459c:	e58d300c 	str	r3, [sp, #12]
  1045a0:	e3a03000 	mov	r3, #0
  1045a4:	e58d3008 	str	r3, [sp, #8]
  1045a8:	e3a03000 	mov	r3, #0
  1045ac:	e58d3004 	str	r3, [sp, #4]
  1045b0:	e3a03000 	mov	r3, #0
  1045b4:	e58d3000 	str	r3, [sp]
  1045b8:	e3a03000 	mov	r3, #0
  1045bc:	e3a02000 	mov	r2, #0
  1045c0:	e3a01000 	mov	r1, #0
  1045c4:	e3a00002 	mov	r0, #2
  1045c8:	ebfffebb 	bl	1040bc <channel_compose_cmd>
  1045cc:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  1045d0:	e3a01000 	mov	r1, #0
  1045d4:	e51b0008 	ldr	r0, [fp, #-8]
  1045d8:	ebfff64c 	bl	101f10 <lwp_shmat>
  1045dc:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1045e0:	e51b300c 	ldr	r3, [fp, #-12]
  1045e4:	e3530000 	cmp	r3, #0
  1045e8:	0a00000e 	beq	104628 <ueth_gpioinit+0xa4>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), gpio, size);
  1045ec:	e51b300c 	ldr	r3, [fp, #-12]
  1045f0:	e283301c 	add	r3, r3, #28
  1045f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1045f8:	e51b1010 	ldr	r1, [fp, #-16]
  1045fc:	e1a00003 	mov	r0, r3
  104600:	eb00f1d5 	bl	140d5c <memcpy>
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  104604:	e30d3020 	movw	r3, #53280	; 0xd020
  104608:	e3403014 	movt	r3, #20
  10460c:	e5933000 	ldr	r3, [r3]
  104610:	e51b2008 	ldr	r2, [fp, #-8]
  104614:	e1a01002 	mov	r1, r2
  104618:	e1a00003 	mov	r0, r3
  10461c:	ebffff07 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104620:	e51b000c 	ldr	r0, [fp, #-12]
  104624:	ebfff646 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104628:	e51b0008 	ldr	r0, [fp, #-8]
  10462c:	ebfff62c 	bl	101ee4 <lwp_shmrm>
}
  104630:	e320f000 	nop	{0}
  104634:	e24bd004 	sub	sp, fp, #4
  104638:	e8bd8800 	pop	{fp, pc}

0010463c <ueth_init_clock>:

void ueth_init_clock() 
{
  10463c:	e92d4800 	push	{fp, lr}
  104640:	e28db004 	add	fp, sp, #4
  104644:	e24dd018 	sub	sp, sp, #24
    int shmid = channel_compose_cmd1(UETH_CLOCKINIT_REQ, (void*)0, 0);
  104648:	e3a03000 	mov	r3, #0
  10464c:	e58d300c 	str	r3, [sp, #12]
  104650:	e3a03000 	mov	r3, #0
  104654:	e58d3008 	str	r3, [sp, #8]
  104658:	e3a03000 	mov	r3, #0
  10465c:	e58d3004 	str	r3, [sp, #4]
  104660:	e3a03000 	mov	r3, #0
  104664:	e58d3000 	str	r3, [sp]
  104668:	e3a03000 	mov	r3, #0
  10466c:	e3a02000 	mov	r2, #0
  104670:	e3a01000 	mov	r1, #0
  104674:	e3a00003 	mov	r0, #3
  104678:	ebfffe8f 	bl	1040bc <channel_compose_cmd>
  10467c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104680:	e3a01000 	mov	r1, #0
  104684:	e51b0008 	ldr	r0, [fp, #-8]
  104688:	ebfff620 	bl	101f10 <lwp_shmat>
  10468c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104690:	e51b300c 	ldr	r3, [fp, #-12]
  104694:	e3530000 	cmp	r3, #0
  104698:	0a000008 	beq	1046c0 <ueth_init_clock+0x84>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10469c:	e30d3020 	movw	r3, #53280	; 0xd020
  1046a0:	e3403014 	movt	r3, #20
  1046a4:	e5933000 	ldr	r3, [r3]
  1046a8:	e51b2008 	ldr	r2, [fp, #-8]
  1046ac:	e1a01002 	mov	r1, r2
  1046b0:	e1a00003 	mov	r0, r3
  1046b4:	ebfffee1 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1046b8:	e51b000c 	ldr	r0, [fp, #-12]
  1046bc:	ebfff620 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  1046c0:	e51b0008 	ldr	r0, [fp, #-8]
  1046c4:	ebfff606 	bl	101ee4 <lwp_shmrm>
}
  1046c8:	e320f000 	nop	{0}
  1046cc:	e24bd004 	sub	sp, fp, #4
  1046d0:	e8bd8800 	pop	{fp, pc}

001046d4 <ueth_dcache_clean>:

void ueth_dcache_clean(void *paddr, size_t size)
{
  1046d4:	e92d4800 	push	{fp, lr}
  1046d8:	e28db004 	add	fp, sp, #4
  1046dc:	e24dd020 	sub	sp, sp, #32
  1046e0:	e50b0010 	str	r0, [fp, #-16]
  1046e4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_DCACHE_REQ, (void*)0, (void*)UETH_DCACHE_CLEAN, paddr, sizeof(size_t));
  1046e8:	e3a03004 	mov	r3, #4
  1046ec:	e58d300c 	str	r3, [sp, #12]
  1046f0:	e3a03000 	mov	r3, #0
  1046f4:	e58d3008 	str	r3, [sp, #8]
  1046f8:	e3a03000 	mov	r3, #0
  1046fc:	e58d3004 	str	r3, [sp, #4]
  104700:	e3a03000 	mov	r3, #0
  104704:	e58d3000 	str	r3, [sp]
  104708:	e51b3010 	ldr	r3, [fp, #-16]
  10470c:	e3a02001 	mov	r2, #1
  104710:	e3a01000 	mov	r1, #0
  104714:	e3a00004 	mov	r0, #4
  104718:	ebfffe67 	bl	1040bc <channel_compose_cmd>
  10471c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104720:	e3a01000 	mov	r1, #0
  104724:	e51b0008 	ldr	r0, [fp, #-8]
  104728:	ebfff5f8 	bl	101f10 <lwp_shmat>
  10472c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104730:	e51b300c 	ldr	r3, [fp, #-12]
  104734:	e3530000 	cmp	r3, #0
  104738:	0a00000c 	beq	104770 <ueth_dcache_clean+0x9c>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  10473c:	e51b300c 	ldr	r3, [fp, #-12]
  104740:	e283301c 	add	r3, r3, #28
  104744:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104748:	e5832000 	str	r2, [r3]
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10474c:	e30d3020 	movw	r3, #53280	; 0xd020
  104750:	e3403014 	movt	r3, #20
  104754:	e5933000 	ldr	r3, [r3]
  104758:	e51b2008 	ldr	r2, [fp, #-8]
  10475c:	e1a01002 	mov	r1, r2
  104760:	e1a00003 	mov	r0, r3
  104764:	ebfffeb5 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104768:	e51b000c 	ldr	r0, [fp, #-12]
  10476c:	ebfff5f4 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104770:	e51b0008 	ldr	r0, [fp, #-8]
  104774:	ebfff5da 	bl	101ee4 <lwp_shmrm>
    return;
  104778:	e320f000 	nop	{0}
}
  10477c:	e24bd004 	sub	sp, fp, #4
  104780:	e8bd8800 	pop	{fp, pc}

00104784 <ueth_dcache_invalid>:

void ueth_dcache_invalid(void *paddr, size_t size)
{
  104784:	e92d4800 	push	{fp, lr}
  104788:	e28db004 	add	fp, sp, #4
  10478c:	e24dd020 	sub	sp, sp, #32
  104790:	e50b0010 	str	r0, [fp, #-16]
  104794:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_DCACHE_REQ, (void*)0, (void*)UETH_DCACHE_INVALID, paddr, sizeof(size_t));
  104798:	e3a03004 	mov	r3, #4
  10479c:	e58d300c 	str	r3, [sp, #12]
  1047a0:	e3a03000 	mov	r3, #0
  1047a4:	e58d3008 	str	r3, [sp, #8]
  1047a8:	e3a03000 	mov	r3, #0
  1047ac:	e58d3004 	str	r3, [sp, #4]
  1047b0:	e3a03000 	mov	r3, #0
  1047b4:	e58d3000 	str	r3, [sp]
  1047b8:	e51b3010 	ldr	r3, [fp, #-16]
  1047bc:	e3a02002 	mov	r2, #2
  1047c0:	e3a01000 	mov	r1, #0
  1047c4:	e3a00004 	mov	r0, #4
  1047c8:	ebfffe3b 	bl	1040bc <channel_compose_cmd>
  1047cc:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  1047d0:	e3a01000 	mov	r1, #0
  1047d4:	e51b0008 	ldr	r0, [fp, #-8]
  1047d8:	ebfff5cc 	bl	101f10 <lwp_shmat>
  1047dc:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1047e0:	e51b300c 	ldr	r3, [fp, #-12]
  1047e4:	e3530000 	cmp	r3, #0
  1047e8:	0a00000c 	beq	104820 <ueth_dcache_invalid+0x9c>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  1047ec:	e51b300c 	ldr	r3, [fp, #-12]
  1047f0:	e283301c 	add	r3, r3, #28
  1047f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1047f8:	e5832000 	str	r2, [r3]
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  1047fc:	e30d3020 	movw	r3, #53280	; 0xd020
  104800:	e3403014 	movt	r3, #20
  104804:	e5933000 	ldr	r3, [r3]
  104808:	e51b2008 	ldr	r2, [fp, #-8]
  10480c:	e1a01002 	mov	r1, r2
  104810:	e1a00003 	mov	r0, r3
  104814:	ebfffe89 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104818:	e51b000c 	ldr	r0, [fp, #-12]
  10481c:	ebfff5c8 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104820:	e51b0008 	ldr	r0, [fp, #-8]
  104824:	ebfff5ae 	bl	101ee4 <lwp_shmrm>
    return;
  104828:	e320f000 	nop	{0}
}
  10482c:	e24bd004 	sub	sp, fp, #4
  104830:	e8bd8800 	pop	{fp, pc}

00104834 <ueth_hw_interrupt_install>:

void ueth_hw_interrupt_install(int vector, void * param) {
  104834:	e92d4800 	push	{fp, lr}
  104838:	e28db004 	add	fp, sp, #4
  10483c:	e24dd020 	sub	sp, sp, #32
  104840:	e50b0010 	str	r0, [fp, #-16]
  104844:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_INSTALL_INTERRUPT_REQ, (void*)0, (void*)vector, param, 0);
  104848:	e51b2010 	ldr	r2, [fp, #-16]
  10484c:	e3a03000 	mov	r3, #0
  104850:	e58d300c 	str	r3, [sp, #12]
  104854:	e3a03000 	mov	r3, #0
  104858:	e58d3008 	str	r3, [sp, #8]
  10485c:	e3a03000 	mov	r3, #0
  104860:	e58d3004 	str	r3, [sp, #4]
  104864:	e3a03000 	mov	r3, #0
  104868:	e58d3000 	str	r3, [sp]
  10486c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104870:	e3a01000 	mov	r1, #0
  104874:	e3a00006 	mov	r0, #6
  104878:	ebfffe0f 	bl	1040bc <channel_compose_cmd>
  10487c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104880:	e3a01000 	mov	r1, #0
  104884:	e51b0008 	ldr	r0, [fp, #-8]
  104888:	ebfff5a0 	bl	101f10 <lwp_shmat>
  10488c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104890:	e51b300c 	ldr	r3, [fp, #-12]
  104894:	e3530000 	cmp	r3, #0
  104898:	0a000008 	beq	1048c0 <ueth_hw_interrupt_install+0x8c>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10489c:	e30d3020 	movw	r3, #53280	; 0xd020
  1048a0:	e3403014 	movt	r3, #20
  1048a4:	e5933000 	ldr	r3, [r3]
  1048a8:	e51b2008 	ldr	r2, [fp, #-8]
  1048ac:	e1a01002 	mov	r1, r2
  1048b0:	e1a00003 	mov	r0, r3
  1048b4:	ebfffe61 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1048b8:	e51b000c 	ldr	r0, [fp, #-12]
  1048bc:	ebfff5a0 	bl	101f44 <lwp_shmdt>
        
    }
    
    lwp_shmrm(shmid);
  1048c0:	e51b0008 	ldr	r0, [fp, #-8]
  1048c4:	ebfff586 	bl	101ee4 <lwp_shmrm>
  1048c8:	e320f000 	nop	{0}
  1048cc:	e24bd004 	sub	sp, fp, #4
  1048d0:	e8bd8800 	pop	{fp, pc}

001048d4 <inet_ioctlsocket>:
// #include "af_inet.h"

#include "netdev.h"

int inet_ioctlsocket(int socket, long cmd, void *arg)
{
  1048d4:	e92d4800 	push	{fp, lr}
  1048d8:	e28db004 	add	fp, sp, #4
  1048dc:	e24dd010 	sub	sp, sp, #16
  1048e0:	e50b0008 	str	r0, [fp, #-8]
  1048e4:	e50b100c 	str	r1, [fp, #-12]
  1048e8:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  1048ec:	e51b300c 	ldr	r3, [fp, #-12]
  1048f0:	e2433003 	sub	r3, r3, #3
  1048f4:	e3530001 	cmp	r3, #1
  1048f8:	8a000006 	bhi	104918 <inet_ioctlsocket+0x44>
    {
    case F_GETFL:
    case F_SETFL:
        return unet_fcntl(socket, cmd, (int)(unsigned long) arg);
  1048fc:	e51b3010 	ldr	r3, [fp, #-16]
  104900:	e1a02003 	mov	r2, r3
  104904:	e51b100c 	ldr	r1, [fp, #-12]
  104908:	e51b0008 	ldr	r0, [fp, #-8]
  10490c:	eb00123d 	bl	109208 <unet_fcntl>
  104910:	e1a03000 	mov	r3, r0
  104914:	ea000004 	b	10492c <inet_ioctlsocket+0x58>

    default:
        return unet_ioctl(socket, cmd, arg);
  104918:	e51b2010 	ldr	r2, [fp, #-16]
  10491c:	e51b100c 	ldr	r1, [fp, #-12]
  104920:	e51b0008 	ldr	r0, [fp, #-8]
  104924:	eb001245 	bl	109240 <unet_ioctl>
  104928:	e1a03000 	mov	r3, r0
    }
}
  10492c:	e1a00003 	mov	r0, r3
  104930:	e24bd004 	sub	sp, fp, #4
  104934:	e8bd8800 	pop	{fp, pc}

00104938 <sal_unet_netdev_set_pf_info>:
    &unet_netdb_ops,
};

/* Set lwIP network interface device protocol family information */
int sal_unet_netdev_set_pf_info(struct netdev *netdev)
{
  104938:	e92d4800 	push	{fp, lr}
  10493c:	e28db004 	add	fp, sp, #4
  104940:	e24dd008 	sub	sp, sp, #8
  104944:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  104948:	e51b3008 	ldr	r3, [fp, #-8]
  10494c:	e3530000 	cmp	r3, #0
  104950:	1a000005 	bne	10496c <sal_unet_netdev_set_pf_info+0x34>
  104954:	e3a02086 	mov	r2, #134	; 0x86
  104958:	e305195c 	movw	r1, #22876	; 0x595c
  10495c:	e3401014 	movt	r1, #20
  104960:	e3050954 	movw	r0, #22868	; 0x5954
  104964:	e3400014 	movt	r0, #20
  104968:	ebfffb0a 	bl	103598 <rt_assert_handler>

    netdev->sal_user_data = (void *)(unsigned long) &unet_inet_family;
  10496c:	e51b2008 	ldr	r2, [fp, #-8]
  104970:	e3053944 	movw	r3, #22852	; 0x5944
  104974:	e3403014 	movt	r3, #20
  104978:	e582303c 	str	r3, [r2, #60]	; 0x3c
    return 0;
  10497c:	e3a03000 	mov	r3, #0
}
  104980:	e1a00003 	mov	r0, r3
  104984:	e24bd004 	sub	sp, fp, #4
  104988:	e8bd8800 	pop	{fp, pc}

0010498c <ueth_device_find>:
#define MAX_DEV_NUM 3
static eth_device_node ueth_dev_list[MAX_DEV_NUM];
static char ueth_dev_list_valid[MAX_DEV_NUM];

rt_device_t ueth_device_find(const char *name)
{
  10498c:	e92d4800 	push	{fp, lr}
  104990:	e28db004 	add	fp, sp, #4
  104994:	e24dd010 	sub	sp, sp, #16
  104998:	e50b0010 	str	r0, [fp, #-16]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  10499c:	e3a03000 	mov	r3, #0
  1049a0:	e50b3008 	str	r3, [fp, #-8]
  1049a4:	ea00001f 	b	104a28 <ueth_device_find+0x9c>
    {
        if (ueth_dev_list_valid[i])
  1049a8:	e30d344c 	movw	r3, #54348	; 0xd44c
  1049ac:	e3403014 	movt	r3, #20
  1049b0:	e51b2008 	ldr	r2, [fp, #-8]
  1049b4:	e0833002 	add	r3, r3, r2
  1049b8:	e5d33000 	ldrb	r3, [r3]
  1049bc:	e3530000 	cmp	r3, #0
  1049c0:	0a000015 	beq	104a1c <ueth_device_find+0x90>
        {
            if (strncmp(ueth_dev_list[i].name, name, 8) == 0)
  1049c4:	e51b3008 	ldr	r3, [fp, #-8]
  1049c8:	e3a0200c 	mov	r2, #12
  1049cc:	e0020392 	mul	r2, r2, r3
  1049d0:	e30d3428 	movw	r3, #54312	; 0xd428
  1049d4:	e3403014 	movt	r3, #20
  1049d8:	e0823003 	add	r3, r2, r3
  1049dc:	e2833004 	add	r3, r3, #4
  1049e0:	e3a02008 	mov	r2, #8
  1049e4:	e51b1010 	ldr	r1, [fp, #-16]
  1049e8:	e1a00003 	mov	r0, r3
  1049ec:	eb00f2cf 	bl	141530 <strncmp>
  1049f0:	e1a03000 	mov	r3, r0
  1049f4:	e3530000 	cmp	r3, #0
  1049f8:	1a000007 	bne	104a1c <ueth_device_find+0x90>
            {  
                return ueth_dev_list[i].dev;
  1049fc:	e30d3428 	movw	r3, #54312	; 0xd428
  104a00:	e3403014 	movt	r3, #20
  104a04:	e51b2008 	ldr	r2, [fp, #-8]
  104a08:	e3a0100c 	mov	r1, #12
  104a0c:	e0020291 	mul	r2, r1, r2
  104a10:	e0833002 	add	r3, r3, r2
  104a14:	e5933000 	ldr	r3, [r3]
  104a18:	ea000006 	b	104a38 <ueth_device_find+0xac>
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104a1c:	e51b3008 	ldr	r3, [fp, #-8]
  104a20:	e2833001 	add	r3, r3, #1
  104a24:	e50b3008 	str	r3, [fp, #-8]
  104a28:	e51b3008 	ldr	r3, [fp, #-8]
  104a2c:	e3530002 	cmp	r3, #2
  104a30:	daffffdc 	ble	1049a8 <ueth_device_find+0x1c>
            }
        }
    }

    return RT_NULL;
  104a34:	e3a03000 	mov	r3, #0
}
  104a38:	e1a00003 	mov	r0, r3
  104a3c:	e24bd004 	sub	sp, fp, #4
  104a40:	e8bd8800 	pop	{fp, pc}

00104a44 <ueth_device_register>:

rt_err_t ueth_device_register(rt_device_t dev, const char *name, rt_uint16_t flags)
{
  104a44:	e92d4800 	push	{fp, lr}
  104a48:	e28db004 	add	fp, sp, #4
  104a4c:	e24dd018 	sub	sp, sp, #24
  104a50:	e50b0010 	str	r0, [fp, #-16]
  104a54:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  104a58:	e1a03002 	mov	r3, r2
  104a5c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (dev == RT_NULL)
  104a60:	e51b3010 	ldr	r3, [fp, #-16]
  104a64:	e3530000 	cmp	r3, #0
  104a68:	1a000001 	bne	104a74 <ueth_device_register+0x30>
        return -RT_ERROR;
  104a6c:	e3e03000 	mvn	r3, #0
  104a70:	ea000042 	b	104b80 <ueth_device_register+0x13c>

    if (ueth_device_find(name) != RT_NULL)
  104a74:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104a78:	ebffffc3 	bl	10498c <ueth_device_find>
  104a7c:	e1a03000 	mov	r3, r0
  104a80:	e3530000 	cmp	r3, #0
  104a84:	0a000001 	beq	104a90 <ueth_device_register+0x4c>
        return -RT_ERROR;
  104a88:	e3e03000 	mvn	r3, #0
  104a8c:	ea00003b 	b	104b80 <ueth_device_register+0x13c>

    int ueth_dev_list_index = 0;
  104a90:	e3a03000 	mov	r3, #0
  104a94:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104a98:	ea000009 	b	104ac4 <ueth_device_register+0x80>
    {
        if (!ueth_dev_list_valid[ueth_dev_list_index])
  104a9c:	e30d344c 	movw	r3, #54348	; 0xd44c
  104aa0:	e3403014 	movt	r3, #20
  104aa4:	e51b2008 	ldr	r2, [fp, #-8]
  104aa8:	e0833002 	add	r3, r3, r2
  104aac:	e5d33000 	ldrb	r3, [r3]
  104ab0:	e3530000 	cmp	r3, #0
  104ab4:	0a000006 	beq	104ad4 <ueth_device_register+0x90>
        {
            break;
        }
        ueth_dev_list_index++;
  104ab8:	e51b3008 	ldr	r3, [fp, #-8]
  104abc:	e2833001 	add	r3, r3, #1
  104ac0:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104ac4:	e51b3008 	ldr	r3, [fp, #-8]
  104ac8:	e3530002 	cmp	r3, #2
  104acc:	dafffff2 	ble	104a9c <ueth_device_register+0x58>
  104ad0:	ea000000 	b	104ad8 <ueth_device_register+0x94>
            break;
  104ad4:	e320f000 	nop	{0}
    }

    if (ueth_dev_list_index == MAX_DEV_NUM)
  104ad8:	e51b3008 	ldr	r3, [fp, #-8]
  104adc:	e3530003 	cmp	r3, #3
  104ae0:	1a000001 	bne	104aec <ueth_device_register+0xa8>
    {
        return -RT_ERROR;
  104ae4:	e3e03000 	mvn	r3, #0
  104ae8:	ea000024 	b	104b80 <ueth_device_register+0x13c>
    }
    
    strcpy(ueth_dev_list[ueth_dev_list_index].name, name);
  104aec:	e51b3008 	ldr	r3, [fp, #-8]
  104af0:	e3a0200c 	mov	r2, #12
  104af4:	e0020392 	mul	r2, r2, r3
  104af8:	e30d3428 	movw	r3, #54312	; 0xd428
  104afc:	e3403014 	movt	r3, #20
  104b00:	e0823003 	add	r3, r2, r3
  104b04:	e2833004 	add	r3, r3, #4
  104b08:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  104b0c:	e1a00003 	mov	r0, r3
  104b10:	eb00f249 	bl	14143c <strcpy>
    ueth_dev_list[ueth_dev_list_index].dev = dev;
  104b14:	e30d3428 	movw	r3, #54312	; 0xd428
  104b18:	e3403014 	movt	r3, #20
  104b1c:	e51b2008 	ldr	r2, [fp, #-8]
  104b20:	e3a0100c 	mov	r1, #12
  104b24:	e0020291 	mul	r2, r1, r2
  104b28:	e0833002 	add	r3, r3, r2
  104b2c:	e51b2010 	ldr	r2, [fp, #-16]
  104b30:	e5832000 	str	r2, [r3]
    ueth_dev_list_valid[ueth_dev_list_index] = 1;
  104b34:	e30d344c 	movw	r3, #54348	; 0xd44c
  104b38:	e3403014 	movt	r3, #20
  104b3c:	e51b2008 	ldr	r2, [fp, #-8]
  104b40:	e0833002 	add	r3, r3, r2
  104b44:	e3a02001 	mov	r2, #1
  104b48:	e5c32000 	strb	r2, [r3]
    dev->flag = flags;
  104b4c:	e51b3010 	ldr	r3, [fp, #-16]
  104b50:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  104b54:	e1c321bc 	strh	r2, [r3, #28]
    dev->ref_count = 0;
  104b58:	e51b3010 	ldr	r3, [fp, #-16]
  104b5c:	e3a02000 	mov	r2, #0
  104b60:	e5c32020 	strb	r2, [r3, #32]
    dev->open_flag = 0;
  104b64:	e51b3010 	ldr	r3, [fp, #-16]
  104b68:	e3a02000 	mov	r2, #0
  104b6c:	e1c321be 	strh	r2, [r3, #30]

    dev->parent.type = RT_Object_Class_Device;
  104b70:	e51b3010 	ldr	r3, [fp, #-16]
  104b74:	e3a02009 	mov	r2, #9
  104b78:	e5c32008 	strb	r2, [r3, #8]

    return RT_EOK;
  104b7c:	e3a03000 	mov	r3, #0
}
  104b80:	e1a00003 	mov	r0, r3
  104b84:	e24bd004 	sub	sp, fp, #4
  104b88:	e8bd8800 	pop	{fp, pc}

00104b8c <ueth_device_unregister>:

rt_err_t ueth_device_unregister(rt_device_t dev)
{
  104b8c:	e92d4800 	push	{fp, lr}
  104b90:	e28db004 	add	fp, sp, #4
  104b94:	e24dd010 	sub	sp, sp, #16
  104b98:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  104b9c:	e51b3010 	ldr	r3, [fp, #-16]
  104ba0:	e3530000 	cmp	r3, #0
  104ba4:	1a000005 	bne	104bc0 <ueth_device_unregister+0x34>
  104ba8:	e3a02048 	mov	r2, #72	; 0x48
  104bac:	e30519ec 	movw	r1, #23020	; 0x59ec
  104bb0:	e3401014 	movt	r1, #20
  104bb4:	e3050978 	movw	r0, #22904	; 0x5978
  104bb8:	e3400014 	movt	r0, #20
  104bbc:	ebfffa75 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104bc0:	e51b3010 	ldr	r3, [fp, #-16]
  104bc4:	e5d33008 	ldrb	r3, [r3, #8]
  104bc8:	e3530009 	cmp	r3, #9
  104bcc:	0a000005 	beq	104be8 <ueth_device_unregister+0x5c>
  104bd0:	e3a02049 	mov	r2, #73	; 0x49
  104bd4:	e30519ec 	movw	r1, #23020	; 0x59ec
  104bd8:	e3401014 	movt	r1, #20
  104bdc:	e3050988 	movw	r0, #22920	; 0x5988
  104be0:	e3400014 	movt	r0, #20
  104be4:	ebfffa6b 	bl	103598 <rt_assert_handler>

    for (int i = 0; i < MAX_DEV_NUM; i++)
  104be8:	e3a03000 	mov	r3, #0
  104bec:	e50b3008 	str	r3, [fp, #-8]
  104bf0:	ea000019 	b	104c5c <ueth_device_unregister+0xd0>
    {
        if (ueth_dev_list_valid[i] && dev == ueth_dev_list[i].dev)
  104bf4:	e30d344c 	movw	r3, #54348	; 0xd44c
  104bf8:	e3403014 	movt	r3, #20
  104bfc:	e51b2008 	ldr	r2, [fp, #-8]
  104c00:	e0833002 	add	r3, r3, r2
  104c04:	e5d33000 	ldrb	r3, [r3]
  104c08:	e3530000 	cmp	r3, #0
  104c0c:	0a00000f 	beq	104c50 <ueth_device_unregister+0xc4>
  104c10:	e30d3428 	movw	r3, #54312	; 0xd428
  104c14:	e3403014 	movt	r3, #20
  104c18:	e51b2008 	ldr	r2, [fp, #-8]
  104c1c:	e3a0100c 	mov	r1, #12
  104c20:	e0020291 	mul	r2, r1, r2
  104c24:	e0833002 	add	r3, r3, r2
  104c28:	e5933000 	ldr	r3, [r3]
  104c2c:	e51b2010 	ldr	r2, [fp, #-16]
  104c30:	e1520003 	cmp	r2, r3
  104c34:	1a000005 	bne	104c50 <ueth_device_unregister+0xc4>
        {
            ueth_dev_list_valid[i] = 0;
  104c38:	e30d344c 	movw	r3, #54348	; 0xd44c
  104c3c:	e3403014 	movt	r3, #20
  104c40:	e51b2008 	ldr	r2, [fp, #-8]
  104c44:	e0833002 	add	r3, r3, r2
  104c48:	e3a02000 	mov	r2, #0
  104c4c:	e5c32000 	strb	r2, [r3]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104c50:	e51b3008 	ldr	r3, [fp, #-8]
  104c54:	e2833001 	add	r3, r3, #1
  104c58:	e50b3008 	str	r3, [fp, #-8]
  104c5c:	e51b3008 	ldr	r3, [fp, #-8]
  104c60:	e3530002 	cmp	r3, #2
  104c64:	daffffe2 	ble	104bf4 <ueth_device_unregister+0x68>
        }
    }

    return RT_EOK;
  104c68:	e3a03000 	mov	r3, #0
}
  104c6c:	e1a00003 	mov	r0, r3
  104c70:	e24bd004 	sub	sp, fp, #4
  104c74:	e8bd8800 	pop	{fp, pc}

00104c78 <ueth_device_init>:

rt_err_t ueth_device_init(rt_device_t dev)
{
  104c78:	e92d4800 	push	{fp, lr}
  104c7c:	e28db004 	add	fp, sp, #4
  104c80:	e24dd010 	sub	sp, sp, #16
  104c84:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  104c88:	e3a03000 	mov	r3, #0
  104c8c:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104c90:	e51b3010 	ldr	r3, [fp, #-16]
  104c94:	e3530000 	cmp	r3, #0
  104c98:	1a000005 	bne	104cb4 <ueth_device_init+0x3c>
  104c9c:	e3a0205a 	mov	r2, #90	; 0x5a
  104ca0:	e3051a04 	movw	r1, #23044	; 0x5a04
  104ca4:	e3401014 	movt	r1, #20
  104ca8:	e3050978 	movw	r0, #22904	; 0x5978
  104cac:	e3400014 	movt	r0, #20
  104cb0:	ebfffa38 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104cb4:	e51b3010 	ldr	r3, [fp, #-16]
  104cb8:	e5d33008 	ldrb	r3, [r3, #8]
  104cbc:	e3530009 	cmp	r3, #9
  104cc0:	0a000005 	beq	104cdc <ueth_device_init+0x64>
  104cc4:	e3a0205b 	mov	r2, #91	; 0x5b
  104cc8:	e3051a04 	movw	r1, #23044	; 0x5a04
  104ccc:	e3401014 	movt	r1, #20
  104cd0:	e3050988 	movw	r0, #22920	; 0x5988
  104cd4:	e3400014 	movt	r0, #20
  104cd8:	ebfffa2e 	bl	103598 <rt_assert_handler>

    /* get device_init handler */
    if (DEV_INIT != RT_NULL)
  104cdc:	e51b3010 	ldr	r3, [fp, #-16]
  104ce0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ce4:	e5933000 	ldr	r3, [r3]
  104ce8:	e3530000 	cmp	r3, #0
  104cec:	0a00001a 	beq	104d5c <ueth_device_init+0xe4>
    {
        if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
  104cf0:	e51b3010 	ldr	r3, [fp, #-16]
  104cf4:	e1d331bc 	ldrh	r3, [r3, #28]
  104cf8:	e2033010 	and	r3, r3, #16
  104cfc:	e3530000 	cmp	r3, #0
  104d00:	1a000015 	bne	104d5c <ueth_device_init+0xe4>
        {
            result = DEV_INIT(dev);
  104d04:	e51b3010 	ldr	r3, [fp, #-16]
  104d08:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104d0c:	e5933000 	ldr	r3, [r3]
  104d10:	e51b0010 	ldr	r0, [fp, #-16]
  104d14:	e12fff33 	blx	r3
  104d18:	e50b0008 	str	r0, [fp, #-8]
            if (result != RT_EOK)
  104d1c:	e51b3008 	ldr	r3, [fp, #-8]
  104d20:	e3530000 	cmp	r3, #0
  104d24:	0a000006 	beq	104d44 <ueth_device_init+0xcc>
            {
                printf("To initialize device:%s failed. The error code is %ld\n",
                           dev->parent.name, result);
  104d28:	e51b3010 	ldr	r3, [fp, #-16]
                printf("To initialize device:%s failed. The error code is %ld\n",
  104d2c:	e51b2008 	ldr	r2, [fp, #-8]
  104d30:	e1a01003 	mov	r1, r3
  104d34:	e30509b4 	movw	r0, #22964	; 0x59b4
  104d38:	e3400014 	movt	r0, #20
  104d3c:	eb00e60f 	bl	13e580 <printf>
  104d40:	ea000005 	b	104d5c <ueth_device_init+0xe4>
            }
            else
            {
                dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
  104d44:	e51b3010 	ldr	r3, [fp, #-16]
  104d48:	e1d331bc 	ldrh	r3, [r3, #28]
  104d4c:	e3833010 	orr	r3, r3, #16
  104d50:	e6ff2073 	uxth	r2, r3
  104d54:	e51b3010 	ldr	r3, [fp, #-16]
  104d58:	e1c321bc 	strh	r2, [r3, #28]
            }
        }
    }

    return result;
  104d5c:	e51b3008 	ldr	r3, [fp, #-8]
}
  104d60:	e1a00003 	mov	r0, r3
  104d64:	e24bd004 	sub	sp, fp, #4
  104d68:	e8bd8800 	pop	{fp, pc}

00104d6c <ueth_device_close>:

rt_err_t ueth_device_close(rt_device_t dev)
{
  104d6c:	e92d4800 	push	{fp, lr}
  104d70:	e28db004 	add	fp, sp, #4
  104d74:	e24dd010 	sub	sp, sp, #16
  104d78:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  104d7c:	e3a03000 	mov	r3, #0
  104d80:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104d84:	e51b3010 	ldr	r3, [fp, #-16]
  104d88:	e3530000 	cmp	r3, #0
  104d8c:	1a000005 	bne	104da8 <ueth_device_close+0x3c>
  104d90:	e3a02076 	mov	r2, #118	; 0x76
  104d94:	e3051a18 	movw	r1, #23064	; 0x5a18
  104d98:	e3401014 	movt	r1, #20
  104d9c:	e3050978 	movw	r0, #22904	; 0x5978
  104da0:	e3400014 	movt	r0, #20
  104da4:	ebfff9fb 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104da8:	e51b3010 	ldr	r3, [fp, #-16]
  104dac:	e5d33008 	ldrb	r3, [r3, #8]
  104db0:	e3530009 	cmp	r3, #9
  104db4:	0a000005 	beq	104dd0 <ueth_device_close+0x64>
  104db8:	e3a02077 	mov	r2, #119	; 0x77
  104dbc:	e3051a18 	movw	r1, #23064	; 0x5a18
  104dc0:	e3401014 	movt	r1, #20
  104dc4:	e3050988 	movw	r0, #22920	; 0x5988
  104dc8:	e3400014 	movt	r0, #20
  104dcc:	ebfff9f1 	bl	103598 <rt_assert_handler>

    if (dev->ref_count == 0)
  104dd0:	e51b3010 	ldr	r3, [fp, #-16]
  104dd4:	e5d33020 	ldrb	r3, [r3, #32]
  104dd8:	e3530000 	cmp	r3, #0
  104ddc:	1a000001 	bne	104de8 <ueth_device_close+0x7c>
        return -RT_ERROR;
  104de0:	e3e03000 	mvn	r3, #0
  104de4:	ea000020 	b	104e6c <ueth_device_close+0x100>

    dev->ref_count--;
  104de8:	e51b3010 	ldr	r3, [fp, #-16]
  104dec:	e5d33020 	ldrb	r3, [r3, #32]
  104df0:	e2433001 	sub	r3, r3, #1
  104df4:	e6ef2073 	uxtb	r2, r3
  104df8:	e51b3010 	ldr	r3, [fp, #-16]
  104dfc:	e5c32020 	strb	r2, [r3, #32]

    if (dev->ref_count != 0)
  104e00:	e51b3010 	ldr	r3, [fp, #-16]
  104e04:	e5d33020 	ldrb	r3, [r3, #32]
  104e08:	e3530000 	cmp	r3, #0
  104e0c:	0a000001 	beq	104e18 <ueth_device_close+0xac>
        return RT_EOK;
  104e10:	e3a03000 	mov	r3, #0
  104e14:	ea000014 	b	104e6c <ueth_device_close+0x100>

    /* call device_close interface */
    if (DEV_CLOSE != RT_NULL)
  104e18:	e51b3010 	ldr	r3, [fp, #-16]
  104e1c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104e20:	e5933008 	ldr	r3, [r3, #8]
  104e24:	e3530000 	cmp	r3, #0
  104e28:	0a000005 	beq	104e44 <ueth_device_close+0xd8>
    {
        result = DEV_CLOSE(dev);
  104e2c:	e51b3010 	ldr	r3, [fp, #-16]
  104e30:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104e34:	e5933008 	ldr	r3, [r3, #8]
  104e38:	e51b0010 	ldr	r0, [fp, #-16]
  104e3c:	e12fff33 	blx	r3
  104e40:	e50b0008 	str	r0, [fp, #-8]
    }

    /* set open flag */
    if (result == RT_EOK || result == -RT_ENOSYS)
  104e44:	e51b3008 	ldr	r3, [fp, #-8]
  104e48:	e3530000 	cmp	r3, #0
  104e4c:	0a000002 	beq	104e5c <ueth_device_close+0xf0>
  104e50:	e51b3008 	ldr	r3, [fp, #-8]
  104e54:	e3730006 	cmn	r3, #6
  104e58:	1a000002 	bne	104e68 <ueth_device_close+0xfc>
        dev->open_flag = RT_DEVICE_OFLAG_CLOSE;
  104e5c:	e51b3010 	ldr	r3, [fp, #-16]
  104e60:	e3a02000 	mov	r2, #0
  104e64:	e1c321be 	strh	r2, [r3, #30]

    return result;
  104e68:	e51b3008 	ldr	r3, [fp, #-8]
}
  104e6c:	e1a00003 	mov	r0, r3
  104e70:	e24bd004 	sub	sp, fp, #4
  104e74:	e8bd8800 	pop	{fp, pc}

00104e78 <ueth_device_control>:

rt_err_t ueth_device_control(rt_device_t dev, int cmd, void *arg)
{
  104e78:	e92d4800 	push	{fp, lr}
  104e7c:	e28db004 	add	fp, sp, #4
  104e80:	e24dd010 	sub	sp, sp, #16
  104e84:	e50b0008 	str	r0, [fp, #-8]
  104e88:	e50b100c 	str	r1, [fp, #-12]
  104e8c:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  104e90:	e51b3008 	ldr	r3, [fp, #-8]
  104e94:	e3530000 	cmp	r3, #0
  104e98:	1a000005 	bne	104eb4 <ueth_device_control+0x3c>
  104e9c:	e3a02090 	mov	r2, #144	; 0x90
  104ea0:	e3051a2c 	movw	r1, #23084	; 0x5a2c
  104ea4:	e3401014 	movt	r1, #20
  104ea8:	e3050978 	movw	r0, #22904	; 0x5978
  104eac:	e3400014 	movt	r0, #20
  104eb0:	ebfff9b8 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104eb4:	e51b3008 	ldr	r3, [fp, #-8]
  104eb8:	e5d33008 	ldrb	r3, [r3, #8]
  104ebc:	e3530009 	cmp	r3, #9
  104ec0:	0a000005 	beq	104edc <ueth_device_control+0x64>
  104ec4:	e3a02091 	mov	r2, #145	; 0x91
  104ec8:	e3051a2c 	movw	r1, #23084	; 0x5a2c
  104ecc:	e3401014 	movt	r1, #20
  104ed0:	e3050988 	movw	r0, #22920	; 0x5988
  104ed4:	e3400014 	movt	r0, #20
  104ed8:	ebfff9ae 	bl	103598 <rt_assert_handler>

    /* call device_write interface */
    if (DEV_CONTROL != RT_NULL)
  104edc:	e51b3008 	ldr	r3, [fp, #-8]
  104ee0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ee4:	e5933014 	ldr	r3, [r3, #20]
  104ee8:	e3530000 	cmp	r3, #0
  104eec:	0a000008 	beq	104f14 <ueth_device_control+0x9c>
    {
        return DEV_CONTROL(dev, cmd, arg);
  104ef0:	e51b3008 	ldr	r3, [fp, #-8]
  104ef4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ef8:	e5933014 	ldr	r3, [r3, #20]
  104efc:	e51b2010 	ldr	r2, [fp, #-16]
  104f00:	e51b100c 	ldr	r1, [fp, #-12]
  104f04:	e51b0008 	ldr	r0, [fp, #-8]
  104f08:	e12fff33 	blx	r3
  104f0c:	e1a03000 	mov	r3, r0
  104f10:	ea000000 	b	104f18 <ueth_device_control+0xa0>
    }

    return -RT_ENOSYS;
  104f14:	e3e03005 	mvn	r3, #5
  104f18:	e1a00003 	mov	r0, r3
  104f1c:	e24bd004 	sub	sp, fp, #4
  104f20:	e8bd8800 	pop	{fp, pc}

00104f24 <rt_slist_init>:
 * @brief initialize a single list
 *
 * @param l the single list to be initialized
 */
rt_inline void rt_slist_init(rt_slist_t *l)
{
  104f24:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104f28:	e28db000 	add	fp, sp, #0
  104f2c:	e24dd00c 	sub	sp, sp, #12
  104f30:	e50b0008 	str	r0, [fp, #-8]
    l->next = RT_NULL;
  104f34:	e51b3008 	ldr	r3, [fp, #-8]
  104f38:	e3a02000 	mov	r2, #0
  104f3c:	e5832000 	str	r2, [r3]
}
  104f40:	e320f000 	nop	{0}
  104f44:	e28bd000 	add	sp, fp, #0
  104f48:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104f4c:	e12fff1e 	bx	lr

00104f50 <rt_slist_append>:

rt_inline void rt_slist_append(rt_slist_t *l, rt_slist_t *n)
{
  104f50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104f54:	e28db000 	add	fp, sp, #0
  104f58:	e24dd014 	sub	sp, sp, #20
  104f5c:	e50b0010 	str	r0, [fp, #-16]
  104f60:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct rt_slist_node *node;

    node = l;
  104f64:	e51b3010 	ldr	r3, [fp, #-16]
  104f68:	e50b3008 	str	r3, [fp, #-8]
    while (node->next) node = node->next;
  104f6c:	ea000002 	b	104f7c <rt_slist_append+0x2c>
  104f70:	e51b3008 	ldr	r3, [fp, #-8]
  104f74:	e5933000 	ldr	r3, [r3]
  104f78:	e50b3008 	str	r3, [fp, #-8]
  104f7c:	e51b3008 	ldr	r3, [fp, #-8]
  104f80:	e5933000 	ldr	r3, [r3]
  104f84:	e3530000 	cmp	r3, #0
  104f88:	1afffff8 	bne	104f70 <rt_slist_append+0x20>

    /* append the node to the tail */
    node->next = n;
  104f8c:	e51b3008 	ldr	r3, [fp, #-8]
  104f90:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104f94:	e5832000 	str	r2, [r3]
    n->next = RT_NULL;
  104f98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104f9c:	e3a02000 	mov	r2, #0
  104fa0:	e5832000 	str	r2, [r3]
}
  104fa4:	e320f000 	nop	{0}
  104fa8:	e28bd000 	add	sp, fp, #0
  104fac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104fb0:	e12fff1e 	bx	lr

00104fb4 <rt_slist_remove>:

    return len;
}

rt_inline rt_slist_t *rt_slist_remove(rt_slist_t *l, rt_slist_t *n)
{
  104fb4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104fb8:	e28db000 	add	fp, sp, #0
  104fbc:	e24dd014 	sub	sp, sp, #20
  104fc0:	e50b0010 	str	r0, [fp, #-16]
  104fc4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    /* remove slist head */
    struct rt_slist_node *node = l;
  104fc8:	e51b3010 	ldr	r3, [fp, #-16]
  104fcc:	e50b3008 	str	r3, [fp, #-8]
    while (node->next && node->next != n) node = node->next;
  104fd0:	ea000002 	b	104fe0 <rt_slist_remove+0x2c>
  104fd4:	e51b3008 	ldr	r3, [fp, #-8]
  104fd8:	e5933000 	ldr	r3, [r3]
  104fdc:	e50b3008 	str	r3, [fp, #-8]
  104fe0:	e51b3008 	ldr	r3, [fp, #-8]
  104fe4:	e5933000 	ldr	r3, [r3]
  104fe8:	e3530000 	cmp	r3, #0
  104fec:	0a000004 	beq	105004 <rt_slist_remove+0x50>
  104ff0:	e51b3008 	ldr	r3, [fp, #-8]
  104ff4:	e5933000 	ldr	r3, [r3]
  104ff8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104ffc:	e1520003 	cmp	r2, r3
  105000:	1afffff3 	bne	104fd4 <rt_slist_remove+0x20>

    /* remove node */
    if (node->next != (rt_slist_t *)0) node->next = node->next->next;
  105004:	e51b3008 	ldr	r3, [fp, #-8]
  105008:	e5933000 	ldr	r3, [r3]
  10500c:	e3530000 	cmp	r3, #0
  105010:	0a000004 	beq	105028 <rt_slist_remove+0x74>
  105014:	e51b3008 	ldr	r3, [fp, #-8]
  105018:	e5933000 	ldr	r3, [r3]
  10501c:	e5932000 	ldr	r2, [r3]
  105020:	e51b3008 	ldr	r3, [fp, #-8]
  105024:	e5832000 	str	r2, [r3]

    return l;
  105028:	e51b3010 	ldr	r3, [fp, #-16]
}
  10502c:	e1a00003 	mov	r0, r3
  105030:	e28bd000 	add	sp, fp, #0
  105034:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  105038:	e12fff1e 	bx	lr

0010503c <rt_slist_next>:

    return l;
}

rt_inline rt_slist_t *rt_slist_next(rt_slist_t *n)
{
  10503c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  105040:	e28db000 	add	fp, sp, #0
  105044:	e24dd00c 	sub	sp, sp, #12
  105048:	e50b0008 	str	r0, [fp, #-8]
    return n->next;
  10504c:	e51b3008 	ldr	r3, [fp, #-8]
  105050:	e5933000 	ldr	r3, [r3]
}
  105054:	e1a00003 	mov	r0, r3
  105058:	e28bd000 	add	sp, fp, #0
  10505c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  105060:	e12fff1e 	bx	lr

00105064 <netdev_register>:
 *
 * @return  0: registered successfully
 *         -1: registered failed
 */
int netdev_register(struct netdev *netdev, const char *name, void *user_data)
{
  105064:	e92d4810 	push	{r4, fp, lr}
  105068:	e28db008 	add	fp, sp, #8
  10506c:	e24dd01c 	sub	sp, sp, #28
  105070:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  105074:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  105078:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    // rt_base_t level;
    uint16_t flags_mask;
    int index;

    RT_ASSERT(netdev);
  10507c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105080:	e3530000 	cmp	r3, #0
  105084:	1a000005 	bne	1050a0 <netdev_register+0x3c>
  105088:	e3a02032 	mov	r2, #50	; 0x32
  10508c:	e3051da0 	movw	r1, #23968	; 0x5da0
  105090:	e3401014 	movt	r1, #20
  105094:	e3050a40 	movw	r0, #23104	; 0x5a40
  105098:	e3400014 	movt	r0, #20
  10509c:	ebfff93d 	bl	103598 <rt_assert_handler>
    RT_ASSERT(name);
  1050a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1050a4:	e3530000 	cmp	r3, #0
  1050a8:	1a000005 	bne	1050c4 <netdev_register+0x60>
  1050ac:	e3a02033 	mov	r2, #51	; 0x33
  1050b0:	e3051da0 	movw	r1, #23968	; 0x5da0
  1050b4:	e3401014 	movt	r1, #20
  1050b8:	e3050a48 	movw	r0, #23112	; 0x5a48
  1050bc:	e3400014 	movt	r0, #20
  1050c0:	ebfff934 	bl	103598 <rt_assert_handler>

    /* clean network interface device */
    flags_mask = NETDEV_FLAG_UP | NETDEV_FLAG_LINK_UP | NETDEV_FLAG_INTERNET_UP | NETDEV_FLAG_DHCP;
  1050c4:	e3003185 	movw	r3, #389	; 0x185
  1050c8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    netdev->flags &= ~flags_mask;
  1050cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050d0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1050d4:	e6bf2073 	sxth	r2, r3
  1050d8:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  1050dc:	e1e03003 	mvn	r3, r3
  1050e0:	e6bf3073 	sxth	r3, r3
  1050e4:	e0033002 	and	r3, r3, r2
  1050e8:	e6bf3073 	sxth	r3, r3
  1050ec:	e6ff2073 	uxth	r2, r3
  1050f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050f4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    ip_addr_set_zero(&(netdev->ip_addr));
  1050f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050fc:	e3a02000 	mov	r2, #0
  105100:	e583200c 	str	r2, [r3, #12]
    ip_addr_set_zero(&(netdev->netmask));
  105104:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105108:	e3a02000 	mov	r2, #0
  10510c:	e5832010 	str	r2, [r3, #16]
    ip_addr_set_zero(&(netdev->gw));
  105110:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105114:	e3a02000 	mov	r2, #0
  105118:	e5832014 	str	r2, [r3, #20]
    {
        ip_addr_set_zero(&(netdev->ip6_addr[index]));
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V6);
    }
#endif /* NETDEV_IPV6 */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  10511c:	e3a03000 	mov	r3, #0
  105120:	e50b3010 	str	r3, [fp, #-16]
  105124:	ea000007 	b	105148 <netdev_register+0xe4>
    {
        ip_addr_set_zero(&(netdev->dns_servers[index]));
  105128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10512c:	e51b2010 	ldr	r2, [fp, #-16]
  105130:	e2822006 	add	r2, r2, #6
  105134:	e3a01000 	mov	r1, #0
  105138:	e7831102 	str	r1, [r3, r2, lsl #2]
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  10513c:	e51b3010 	ldr	r3, [fp, #-16]
  105140:	e2833001 	add	r3, r3, #1
  105144:	e50b3010 	str	r3, [fp, #-16]
  105148:	e51b3010 	ldr	r3, [fp, #-16]
  10514c:	e3530001 	cmp	r3, #1
  105150:	9afffff4 	bls	105128 <netdev_register+0xc4>
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V4);
    }
    netdev->status_callback = RT_NULL;
  105154:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105158:	e3a02000 	mov	r2, #0
  10515c:	e5832034 	str	r2, [r3, #52]	; 0x34
    netdev->addr_callback = RT_NULL;
  105160:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105164:	e3a02000 	mov	r2, #0
  105168:	e5832038 	str	r2, [r3, #56]	; 0x38

    /* fill network interface device */
    rt_strncpy(netdev->name, name, rt_strlen(name));
  10516c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105170:	e2834004 	add	r4, r3, #4
  105174:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  105178:	ebfff820 	bl	103200 <rt_strlen>
  10517c:	e1a03000 	mov	r3, r0
  105180:	e1a02003 	mov	r2, r3
  105184:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  105188:	e1a00004 	mov	r0, r4
  10518c:	ebfff833 	bl	103260 <rt_strncpy>
    netdev->user_data = user_data;
  105190:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105194:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  105198:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* initialize current network interface device single list */
    rt_slist_init(&(netdev->list));
  10519c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051a0:	e1a00003 	mov	r0, r3
  1051a4:	ebffff5e 	bl	104f24 <rt_slist_init>

    // level = rt_hw_interrupt_disable();

    if (netdev_list == RT_NULL)
  1051a8:	e30f3590 	movw	r3, #62864	; 0xf590
  1051ac:	e3403014 	movt	r3, #20
  1051b0:	e5933000 	ldr	r3, [r3]
  1051b4:	e3530000 	cmp	r3, #0
  1051b8:	1a000008 	bne	1051e0 <netdev_register+0x17c>
    {
        netdev_list = netdev;
  1051bc:	e30f3590 	movw	r3, #62864	; 0xf590
  1051c0:	e3403014 	movt	r3, #20
  1051c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1051c8:	e5832000 	str	r2, [r3]
        netdev_default = netdev;
  1051cc:	e30f358c 	movw	r3, #62860	; 0xf58c
  1051d0:	e3403014 	movt	r3, #20
  1051d4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1051d8:	e5832000 	str	r2, [r3]
  1051dc:	ea000007 	b	105200 <netdev_register+0x19c>
    }
    else
    {
        /* tail insertion */
        rt_slist_append(&(netdev_list->list), &(netdev->list));
  1051e0:	e30f3590 	movw	r3, #62864	; 0xf590
  1051e4:	e3403014 	movt	r3, #20
  1051e8:	e5933000 	ldr	r3, [r3]
  1051ec:	e1a02003 	mov	r2, r3
  1051f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051f4:	e1a01003 	mov	r1, r3
  1051f8:	e1a00002 	mov	r0, r2
  1051fc:	ebffff53 	bl	104f50 <rt_slist_append>
    }

    // rt_hw_interrupt_enable(level);

    return RT_EOK;
  105200:	e3a03000 	mov	r3, #0
}
  105204:	e1a00003 	mov	r0, r3
  105208:	e24bd008 	sub	sp, fp, #8
  10520c:	e8bd8810 	pop	{r4, fp, pc}

00105210 <netdev_unregister>:
 *
 * @return  0: unregistered successfully
 *         -1: unregistered failed
 */
int netdev_unregister(struct netdev *netdev)
{
  105210:	e92d4800 	push	{fp, lr}
  105214:	e28db004 	add	fp, sp, #4
  105218:	e24dd010 	sub	sp, sp, #16
  10521c:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105220:	e3a03000 	mov	r3, #0
  105224:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *cur_netdev = RT_NULL;
  105228:	e3a03000 	mov	r3, #0
  10522c:	e50b300c 	str	r3, [fp, #-12]

    RT_ASSERT(netdev);
  105230:	e51b3010 	ldr	r3, [fp, #-16]
  105234:	e3530000 	cmp	r3, #0
  105238:	1a000005 	bne	105254 <netdev_unregister+0x44>
  10523c:	e3a02077 	mov	r2, #119	; 0x77
  105240:	e3051db0 	movw	r1, #23984	; 0x5db0
  105244:	e3401014 	movt	r1, #20
  105248:	e3050a40 	movw	r0, #23104	; 0x5a40
  10524c:	e3400014 	movt	r0, #20
  105250:	ebfff8d0 	bl	103598 <rt_assert_handler>

    if (netdev_list == RT_NULL)
  105254:	e30f3590 	movw	r3, #62864	; 0xf590
  105258:	e3403014 	movt	r3, #20
  10525c:	e5933000 	ldr	r3, [r3]
  105260:	e3530000 	cmp	r3, #0
  105264:	1a000001 	bne	105270 <netdev_unregister+0x60>
    {
        return -RT_ERROR;
  105268:	e3e03000 	mvn	r3, #0
  10526c:	ea000045 	b	105388 <netdev_unregister+0x178>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105270:	e30f3590 	movw	r3, #62864	; 0xf590
  105274:	e3403014 	movt	r3, #20
  105278:	e5933000 	ldr	r3, [r3]
  10527c:	e50b3008 	str	r3, [fp, #-8]
  105280:	ea000030 	b	105348 <netdev_unregister+0x138>
    {
        cur_netdev = rt_slist_entry(node, struct netdev, list);
  105284:	e51b3008 	ldr	r3, [fp, #-8]
  105288:	e50b300c 	str	r3, [fp, #-12]
        if (cur_netdev == netdev)
  10528c:	e51b200c 	ldr	r2, [fp, #-12]
  105290:	e51b3010 	ldr	r3, [fp, #-16]
  105294:	e1520003 	cmp	r2, r3
  105298:	1a000027 	bne	10533c <netdev_unregister+0x12c>
        {
            /* find this network interface device in network interface device list */
            if (netdev_list == netdev && rt_slist_next(&netdev_list->list) == RT_NULL)
  10529c:	e30f3590 	movw	r3, #62864	; 0xf590
  1052a0:	e3403014 	movt	r3, #20
  1052a4:	e5933000 	ldr	r3, [r3]
  1052a8:	e51b2010 	ldr	r2, [fp, #-16]
  1052ac:	e1520003 	cmp	r2, r3
  1052b0:	1a00000c 	bne	1052e8 <netdev_unregister+0xd8>
  1052b4:	e30f3590 	movw	r3, #62864	; 0xf590
  1052b8:	e3403014 	movt	r3, #20
  1052bc:	e5933000 	ldr	r3, [r3]
  1052c0:	e1a00003 	mov	r0, r3
  1052c4:	ebffff5c 	bl	10503c <rt_slist_next>
  1052c8:	e1a03000 	mov	r3, r0
  1052cc:	e3530000 	cmp	r3, #0
  1052d0:	1a000004 	bne	1052e8 <netdev_unregister+0xd8>
            {
                netdev_list = RT_NULL;
  1052d4:	e30f3590 	movw	r3, #62864	; 0xf590
  1052d8:	e3403014 	movt	r3, #20
  1052dc:	e3a02000 	mov	r2, #0
  1052e0:	e5832000 	str	r2, [r3]
  1052e4:	ea000007 	b	105308 <netdev_unregister+0xf8>
            }
            else
            {
                rt_slist_remove(&(netdev_list->list), &(cur_netdev->list));
  1052e8:	e30f3590 	movw	r3, #62864	; 0xf590
  1052ec:	e3403014 	movt	r3, #20
  1052f0:	e5933000 	ldr	r3, [r3]
  1052f4:	e1a02003 	mov	r2, r3
  1052f8:	e51b300c 	ldr	r3, [fp, #-12]
  1052fc:	e1a01003 	mov	r1, r3
  105300:	e1a00002 	mov	r0, r2
  105304:	ebffff2a 	bl	104fb4 <rt_slist_remove>
            }
            if (netdev_default == netdev)
  105308:	e30f358c 	movw	r3, #62860	; 0xf58c
  10530c:	e3403014 	movt	r3, #20
  105310:	e5933000 	ldr	r3, [r3]
  105314:	e51b2010 	ldr	r2, [fp, #-16]
  105318:	e1520003 	cmp	r2, r3
  10531c:	1a00000d 	bne	105358 <netdev_unregister+0x148>
            {
                netdev_default = netdev_list;
  105320:	e30f3590 	movw	r3, #62864	; 0xf590
  105324:	e3403014 	movt	r3, #20
  105328:	e5932000 	ldr	r2, [r3]
  10532c:	e30f358c 	movw	r3, #62860	; 0xf58c
  105330:	e3403014 	movt	r3, #20
  105334:	e5832000 	str	r2, [r3]
            }
            break;
  105338:	ea000006 	b	105358 <netdev_unregister+0x148>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10533c:	e51b0008 	ldr	r0, [fp, #-8]
  105340:	ebffff3d 	bl	10503c <rt_slist_next>
  105344:	e50b0008 	str	r0, [fp, #-8]
  105348:	e51b3008 	ldr	r3, [fp, #-8]
  10534c:	e3530000 	cmp	r3, #0
  105350:	1affffcb 	bne	105284 <netdev_unregister+0x74>
  105354:	ea000000 	b	10535c <netdev_unregister+0x14c>
            break;
  105358:	e320f000 	nop	{0}
        }
    }
    // rt_hw_interrupt_enable(level);

    if (cur_netdev == netdev)
  10535c:	e51b200c 	ldr	r2, [fp, #-12]
  105360:	e51b3010 	ldr	r3, [fp, #-16]
  105364:	e1520003 	cmp	r2, r3
  105368:	1a000005 	bne	105384 <netdev_unregister+0x174>
    {
#ifdef RT_USING_SAL
        extern int sal_netdev_cleanup(struct netdev *netdev);
        sal_netdev_cleanup(netdev);
  10536c:	e51b0010 	ldr	r0, [fp, #-16]
  105370:	eb000823 	bl	107404 <sal_netdev_cleanup>
#endif
        rt_memset(netdev, 0, sizeof(*netdev));
  105374:	e3a02044 	mov	r2, #68	; 0x44
  105378:	e3a01000 	mov	r1, #0
  10537c:	e51b0010 	ldr	r0, [fp, #-16]
  105380:	ebfff7d0 	bl	1032c8 <rt_memset>
    }

    return -RT_ERROR;
  105384:	e3e03000 	mvn	r3, #0
}
  105388:	e1a00003 	mov	r0, r3
  10538c:	e24bd004 	sub	sp, fp, #4
  105390:	e8bd8800 	pop	{fp, pc}

00105394 <netdev_get_first_by_flags>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_first_by_flags(uint16_t flags)
{
  105394:	e92d4800 	push	{fp, lr}
  105398:	e28db004 	add	fp, sp, #4
  10539c:	e24dd010 	sub	sp, sp, #16
  1053a0:	e1a03000 	mov	r3, r0
  1053a4:	e14b30be 	strh	r3, [fp, #-14]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  1053a8:	e3a03000 	mov	r3, #0
  1053ac:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1053b0:	e3a03000 	mov	r3, #0
  1053b4:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  1053b8:	e30f3590 	movw	r3, #62864	; 0xf590
  1053bc:	e3403014 	movt	r3, #20
  1053c0:	e5933000 	ldr	r3, [r3]
  1053c4:	e3530000 	cmp	r3, #0
  1053c8:	1a000001 	bne	1053d4 <netdev_get_first_by_flags+0x40>
    {
        return RT_NULL;
  1053cc:	e3a03000 	mov	r3, #0
  1053d0:	ea000019 	b	10543c <netdev_get_first_by_flags+0xa8>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1053d4:	e30f3590 	movw	r3, #62864	; 0xf590
  1053d8:	e3403014 	movt	r3, #20
  1053dc:	e5933000 	ldr	r3, [r3]
  1053e0:	e50b3008 	str	r3, [fp, #-8]
  1053e4:	ea000010 	b	10542c <netdev_get_first_by_flags+0x98>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  1053e8:	e51b3008 	ldr	r3, [fp, #-8]
  1053ec:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && (netdev->flags & flags) != 0)
  1053f0:	e51b300c 	ldr	r3, [fp, #-12]
  1053f4:	e3530000 	cmp	r3, #0
  1053f8:	0a000008 	beq	105420 <netdev_get_first_by_flags+0x8c>
  1053fc:	e51b300c 	ldr	r3, [fp, #-12]
  105400:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  105404:	e15b30be 	ldrh	r3, [fp, #-14]
  105408:	e0033002 	and	r3, r3, r2
  10540c:	e6ff3073 	uxth	r3, r3
  105410:	e3530000 	cmp	r3, #0
  105414:	0a000001 	beq	105420 <netdev_get_first_by_flags+0x8c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105418:	e51b300c 	ldr	r3, [fp, #-12]
  10541c:	ea000006 	b	10543c <netdev_get_first_by_flags+0xa8>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105420:	e51b0008 	ldr	r0, [fp, #-8]
  105424:	ebffff04 	bl	10503c <rt_slist_next>
  105428:	e50b0008 	str	r0, [fp, #-8]
  10542c:	e51b3008 	ldr	r3, [fp, #-8]
  105430:	e3530000 	cmp	r3, #0
  105434:	1affffeb 	bne	1053e8 <netdev_get_first_by_flags+0x54>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  105438:	e3a03000 	mov	r3, #0
}
  10543c:	e1a00003 	mov	r0, r3
  105440:	e24bd004 	sub	sp, fp, #4
  105444:	e8bd8800 	pop	{fp, pc}

00105448 <netdev_get_by_ipaddr>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_ipaddr(ip_addr_t *ip_addr)
{
  105448:	e92d4800 	push	{fp, lr}
  10544c:	e28db004 	add	fp, sp, #4
  105450:	e24dd010 	sub	sp, sp, #16
  105454:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105458:	e3a03000 	mov	r3, #0
  10545c:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  105460:	e3a03000 	mov	r3, #0
  105464:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  105468:	e30f3590 	movw	r3, #62864	; 0xf590
  10546c:	e3403014 	movt	r3, #20
  105470:	e5933000 	ldr	r3, [r3]
  105474:	e3530000 	cmp	r3, #0
  105478:	1a000001 	bne	105484 <netdev_get_by_ipaddr+0x3c>
    {
        return RT_NULL;
  10547c:	e3a03000 	mov	r3, #0
  105480:	ea000018 	b	1054e8 <netdev_get_by_ipaddr+0xa0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105484:	e30f3590 	movw	r3, #62864	; 0xf590
  105488:	e3403014 	movt	r3, #20
  10548c:	e5933000 	ldr	r3, [r3]
  105490:	e50b3008 	str	r3, [fp, #-8]
  105494:	ea00000f 	b	1054d8 <netdev_get_by_ipaddr+0x90>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105498:	e51b3008 	ldr	r3, [fp, #-8]
  10549c:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr))
  1054a0:	e51b300c 	ldr	r3, [fp, #-12]
  1054a4:	e3530000 	cmp	r3, #0
  1054a8:	0a000007 	beq	1054cc <netdev_get_by_ipaddr+0x84>
  1054ac:	e51b300c 	ldr	r3, [fp, #-12]
  1054b0:	e593200c 	ldr	r2, [r3, #12]
  1054b4:	e51b3010 	ldr	r3, [fp, #-16]
  1054b8:	e5933000 	ldr	r3, [r3]
  1054bc:	e1520003 	cmp	r2, r3
  1054c0:	1a000001 	bne	1054cc <netdev_get_by_ipaddr+0x84>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  1054c4:	e51b300c 	ldr	r3, [fp, #-12]
  1054c8:	ea000006 	b	1054e8 <netdev_get_by_ipaddr+0xa0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1054cc:	e51b0008 	ldr	r0, [fp, #-8]
  1054d0:	ebfffed9 	bl	10503c <rt_slist_next>
  1054d4:	e50b0008 	str	r0, [fp, #-8]
  1054d8:	e51b3008 	ldr	r3, [fp, #-8]
  1054dc:	e3530000 	cmp	r3, #0
  1054e0:	1affffec 	bne	105498 <netdev_get_by_ipaddr+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  1054e4:	e3a03000 	mov	r3, #0
}
  1054e8:	e1a00003 	mov	r0, r3
  1054ec:	e24bd004 	sub	sp, fp, #4
  1054f0:	e8bd8800 	pop	{fp, pc}

001054f4 <netdev_get_by_name>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_name(const char *name)
{
  1054f4:	e92d4810 	push	{r4, fp, lr}
  1054f8:	e28db008 	add	fp, sp, #8
  1054fc:	e24dd014 	sub	sp, sp, #20
  105500:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105504:	e3a03000 	mov	r3, #0
  105508:	e50b3010 	str	r3, [fp, #-16]
    struct netdev *netdev = RT_NULL;
  10550c:	e3a03000 	mov	r3, #0
  105510:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (netdev_list == RT_NULL)
  105514:	e30f3590 	movw	r3, #62864	; 0xf590
  105518:	e3403014 	movt	r3, #20
  10551c:	e5933000 	ldr	r3, [r3]
  105520:	e3530000 	cmp	r3, #0
  105524:	1a000001 	bne	105530 <netdev_get_by_name+0x3c>
    {
        return RT_NULL;
  105528:	e3a03000 	mov	r3, #0
  10552c:	ea000020 	b	1055b4 <netdev_get_by_name+0xc0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105530:	e30f3590 	movw	r3, #62864	; 0xf590
  105534:	e3403014 	movt	r3, #20
  105538:	e5933000 	ldr	r3, [r3]
  10553c:	e50b3010 	str	r3, [fp, #-16]
  105540:	ea000017 	b	1055a4 <netdev_get_by_name+0xb0>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105544:	e51b3010 	ldr	r3, [fp, #-16]
  105548:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        if (netdev && (rt_strncmp(netdev->name, name, rt_strlen(netdev->name)) == 0))
  10554c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105550:	e3530000 	cmp	r3, #0
  105554:	0a00000f 	beq	105598 <netdev_get_by_name+0xa4>
  105558:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10555c:	e2834004 	add	r4, r3, #4
  105560:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105564:	e2833004 	add	r3, r3, #4
  105568:	e1a00003 	mov	r0, r3
  10556c:	ebfff723 	bl	103200 <rt_strlen>
  105570:	e1a03000 	mov	r3, r0
  105574:	e1a02003 	mov	r2, r3
  105578:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10557c:	e1a00004 	mov	r0, r4
  105580:	ebfff728 	bl	103228 <rt_strncmp>
  105584:	e1a03000 	mov	r3, r0
  105588:	e3530000 	cmp	r3, #0
  10558c:	1a000001 	bne	105598 <netdev_get_by_name+0xa4>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105594:	ea000006 	b	1055b4 <netdev_get_by_name+0xc0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105598:	e51b0010 	ldr	r0, [fp, #-16]
  10559c:	ebfffea6 	bl	10503c <rt_slist_next>
  1055a0:	e50b0010 	str	r0, [fp, #-16]
  1055a4:	e51b3010 	ldr	r3, [fp, #-16]
  1055a8:	e3530000 	cmp	r3, #0
  1055ac:	1affffe4 	bne	105544 <netdev_get_by_name+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  1055b0:	e3a03000 	mov	r3, #0
}
  1055b4:	e1a00003 	mov	r0, r3
  1055b8:	e24bd008 	sub	sp, fp, #8
  1055bc:	e8bd8810 	pop	{r4, fp, pc}

001055c0 <netdev_get_by_family>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_family(int family)
{
  1055c0:	e92d4800 	push	{fp, lr}
  1055c4:	e28db004 	add	fp, sp, #4
  1055c8:	e24dd018 	sub	sp, sp, #24
  1055cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  1055d0:	e3a03000 	mov	r3, #0
  1055d4:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1055d8:	e3a03000 	mov	r3, #0
  1055dc:	e50b300c 	str	r3, [fp, #-12]
    struct sal_proto_family *pf = RT_NULL;
  1055e0:	e3a03000 	mov	r3, #0
  1055e4:	e50b3010 	str	r3, [fp, #-16]

    if (netdev_list == RT_NULL)
  1055e8:	e30f3590 	movw	r3, #62864	; 0xf590
  1055ec:	e3403014 	movt	r3, #20
  1055f0:	e5933000 	ldr	r3, [r3]
  1055f4:	e3530000 	cmp	r3, #0
  1055f8:	1a000001 	bne	105604 <netdev_get_by_family+0x44>
    {
        return RT_NULL;
  1055fc:	e3a03000 	mov	r3, #0
  105600:	ea000048 	b	105728 <netdev_get_by_family+0x168>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105604:	e30f3590 	movw	r3, #62864	; 0xf590
  105608:	e3403014 	movt	r3, #20
  10560c:	e5933000 	ldr	r3, [r3]
  105610:	e50b3008 	str	r3, [fp, #-8]
  105614:	ea00001b 	b	105688 <netdev_get_by_family+0xc8>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105618:	e51b3008 	ldr	r3, [fp, #-8]
  10561c:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  105620:	e51b300c 	ldr	r3, [fp, #-12]
  105624:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  105628:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->family == family && netdev_is_up(netdev))
  10562c:	e51b3010 	ldr	r3, [fp, #-16]
  105630:	e3530000 	cmp	r3, #0
  105634:	0a000010 	beq	10567c <netdev_get_by_family+0xbc>
  105638:	e51b3010 	ldr	r3, [fp, #-16]
  10563c:	e5933008 	ldr	r3, [r3, #8]
  105640:	e3530000 	cmp	r3, #0
  105644:	0a00000c 	beq	10567c <netdev_get_by_family+0xbc>
  105648:	e51b3010 	ldr	r3, [fp, #-16]
  10564c:	e5933000 	ldr	r3, [r3]
  105650:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  105654:	e1520003 	cmp	r2, r3
  105658:	1a000007 	bne	10567c <netdev_get_by_family+0xbc>
  10565c:	e51b300c 	ldr	r3, [fp, #-12]
  105660:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105664:	e2033001 	and	r3, r3, #1
  105668:	e6ef3073 	uxtb	r3, r3
  10566c:	e3530000 	cmp	r3, #0
  105670:	0a000001 	beq	10567c <netdev_get_by_family+0xbc>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105674:	e51b300c 	ldr	r3, [fp, #-12]
  105678:	ea00002a 	b	105728 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10567c:	e51b0008 	ldr	r0, [fp, #-8]
  105680:	ebfffe6d 	bl	10503c <rt_slist_next>
  105684:	e50b0008 	str	r0, [fp, #-8]
  105688:	e51b3008 	ldr	r3, [fp, #-8]
  10568c:	e3530000 	cmp	r3, #0
  105690:	1affffe0 	bne	105618 <netdev_get_by_family+0x58>
        }
    }

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105694:	e30f3590 	movw	r3, #62864	; 0xf590
  105698:	e3403014 	movt	r3, #20
  10569c:	e5933000 	ldr	r3, [r3]
  1056a0:	e50b3008 	str	r3, [fp, #-8]
  1056a4:	ea00001b 	b	105718 <netdev_get_by_family+0x158>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  1056a8:	e51b3008 	ldr	r3, [fp, #-8]
  1056ac:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  1056b0:	e51b300c 	ldr	r3, [fp, #-12]
  1056b4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1056b8:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->sec_family == family && netdev_is_up(netdev))
  1056bc:	e51b3010 	ldr	r3, [fp, #-16]
  1056c0:	e3530000 	cmp	r3, #0
  1056c4:	0a000010 	beq	10570c <netdev_get_by_family+0x14c>
  1056c8:	e51b3010 	ldr	r3, [fp, #-16]
  1056cc:	e5933008 	ldr	r3, [r3, #8]
  1056d0:	e3530000 	cmp	r3, #0
  1056d4:	0a00000c 	beq	10570c <netdev_get_by_family+0x14c>
  1056d8:	e51b3010 	ldr	r3, [fp, #-16]
  1056dc:	e5933004 	ldr	r3, [r3, #4]
  1056e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1056e4:	e1520003 	cmp	r2, r3
  1056e8:	1a000007 	bne	10570c <netdev_get_by_family+0x14c>
  1056ec:	e51b300c 	ldr	r3, [fp, #-12]
  1056f0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1056f4:	e2033001 	and	r3, r3, #1
  1056f8:	e6ef3073 	uxtb	r3, r3
  1056fc:	e3530000 	cmp	r3, #0
  105700:	0a000001 	beq	10570c <netdev_get_by_family+0x14c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105704:	e51b300c 	ldr	r3, [fp, #-12]
  105708:	ea000006 	b	105728 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10570c:	e51b0008 	ldr	r0, [fp, #-8]
  105710:	ebfffe49 	bl	10503c <rt_slist_next>
  105714:	e50b0008 	str	r0, [fp, #-8]
  105718:	e51b3008 	ldr	r3, [fp, #-8]
  10571c:	e3530000 	cmp	r3, #0
  105720:	1affffe0 	bne	1056a8 <netdev_get_by_family+0xe8>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  105724:	e3a03000 	mov	r3, #0
}
  105728:	e1a00003 	mov	r0, r3
  10572c:	e24bd004 	sub	sp, fp, #4
  105730:	e8bd8800 	pop	{fp, pc}

00105734 <netdev_family_get>:
 * @param netdev network interface device object
 *
 * @return the network interface device family type
 */
int netdev_family_get(struct netdev *netdev)
{
  105734:	e92d4800 	push	{fp, lr}
  105738:	e28db004 	add	fp, sp, #4
  10573c:	e24dd008 	sub	sp, sp, #8
  105740:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  105744:	e51b3008 	ldr	r3, [fp, #-8]
  105748:	e3530000 	cmp	r3, #0
  10574c:	1a000005 	bne	105768 <netdev_family_get+0x34>
  105750:	e300214e 	movw	r2, #334	; 0x14e
  105754:	e3051dc4 	movw	r1, #24004	; 0x5dc4
  105758:	e3401014 	movt	r1, #20
  10575c:	e3050a40 	movw	r0, #23104	; 0x5a40
  105760:	e3400014 	movt	r0, #20
  105764:	ebfff78b 	bl	103598 <rt_assert_handler>

    return ((struct sal_proto_family *)netdev->sal_user_data)->family;
  105768:	e51b3008 	ldr	r3, [fp, #-8]
  10576c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  105770:	e5933000 	ldr	r3, [r3]
}
  105774:	e1a00003 	mov	r0, r3
  105778:	e24bd004 	sub	sp, fp, #4
  10577c:	e8bd8800 	pop	{fp, pc}

00105780 <netdev_set_default>:
 * This function will set default network interface device.
 *
 * @param netdev the network interface device to change
 */
void netdev_set_default(struct netdev *netdev)
{
  105780:	e92d4800 	push	{fp, lr}
  105784:	e28db004 	add	fp, sp, #4
  105788:	e24dd008 	sub	sp, sp, #8
  10578c:	e50b0008 	str	r0, [fp, #-8]
    if (netdev)
  105790:	e51b3008 	ldr	r3, [fp, #-8]
  105794:	e3530000 	cmp	r3, #0
  105798:	0a00000d 	beq	1057d4 <netdev_set_default+0x54>
    {
        netdev_default = netdev;
  10579c:	e30f358c 	movw	r3, #62860	; 0xf58c
  1057a0:	e3403014 	movt	r3, #20
  1057a4:	e51b2008 	ldr	r2, [fp, #-8]
  1057a8:	e5832000 	str	r2, [r3]

        if (netdev->ops->set_default)
  1057ac:	e51b3008 	ldr	r3, [fp, #-8]
  1057b0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1057b4:	e593301c 	ldr	r3, [r3, #28]
  1057b8:	e3530000 	cmp	r3, #0
  1057bc:	0a000004 	beq	1057d4 <netdev_set_default+0x54>
        {
            /* set default network interface device in the current network stack */
            netdev->ops->set_default(netdev);
  1057c0:	e51b3008 	ldr	r3, [fp, #-8]
  1057c4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1057c8:	e593301c 	ldr	r3, [r3, #28]
  1057cc:	e51b0008 	ldr	r0, [fp, #-8]
  1057d0:	e12fff33 	blx	r3
        }
        LOG_D("Setting default network interface device name(%s) successfully.", netdev->name);
    }
}
  1057d4:	e320f000 	nop	{0}
  1057d8:	e24bd004 	sub	sp, fp, #4
  1057dc:	e8bd8800 	pop	{fp, pc}

001057e0 <netdev_set_up>:
 *
 * @return  0: set status successfully
 *         -1: set status failed
 */
int netdev_set_up(struct netdev *netdev)
{
  1057e0:	e92d4800 	push	{fp, lr}
  1057e4:	e28db004 	add	fp, sp, #4
  1057e8:	e24dd008 	sub	sp, sp, #8
  1057ec:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1057f0:	e51b3008 	ldr	r3, [fp, #-8]
  1057f4:	e3530000 	cmp	r3, #0
  1057f8:	1a000005 	bne	105814 <netdev_set_up+0x34>
  1057fc:	e3002173 	movw	r2, #371	; 0x173
  105800:	e3051dd8 	movw	r1, #24024	; 0x5dd8
  105804:	e3401014 	movt	r1, #20
  105808:	e3050a40 	movw	r0, #23104	; 0x5a40
  10580c:	e3400014 	movt	r0, #20
  105810:	ebfff760 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_up)
  105814:	e51b3008 	ldr	r3, [fp, #-8]
  105818:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10581c:	e3530000 	cmp	r3, #0
  105820:	0a000004 	beq	105838 <netdev_set_up+0x58>
  105824:	e51b3008 	ldr	r3, [fp, #-8]
  105828:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10582c:	e5933000 	ldr	r3, [r3]
  105830:	e3530000 	cmp	r3, #0
  105834:	1a00000d 	bne	105870 <netdev_set_up+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  105838:	e3050a50 	movw	r0, #23120	; 0x5a50
  10583c:	e3400014 	movt	r0, #20
  105840:	ebfff633 	bl	103114 <rt_kprintf>
  105844:	e51b3008 	ldr	r3, [fp, #-8]
  105848:	e2833004 	add	r3, r3, #4
  10584c:	e1a01003 	mov	r1, r3
  105850:	e3050a64 	movw	r0, #23140	; 0x5a64
  105854:	e3400014 	movt	r0, #20
  105858:	ebfff62d 	bl	103114 <rt_kprintf>
  10585c:	e3050aa0 	movw	r0, #23200	; 0x5aa0
  105860:	e3400014 	movt	r0, #20
  105864:	ebfff62a 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105868:	e3e03000 	mvn	r3, #0
  10586c:	ea00000d 	b	1058a8 <netdev_set_up+0xc8>
    }

    /* network interface device status flags check */
    if (netdev_is_up(netdev))
  105870:	e51b3008 	ldr	r3, [fp, #-8]
  105874:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105878:	e2033001 	and	r3, r3, #1
  10587c:	e6ef3073 	uxtb	r3, r3
  105880:	e3530000 	cmp	r3, #0
  105884:	0a000001 	beq	105890 <netdev_set_up+0xb0>
    {
        return RT_EOK;
  105888:	e3a03000 	mov	r3, #0
  10588c:	ea000005 	b	1058a8 <netdev_set_up+0xc8>
    }

    /* execute enable network interface device operations by network interface device driver */
    return netdev->ops->set_up(netdev);
  105890:	e51b3008 	ldr	r3, [fp, #-8]
  105894:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105898:	e5933000 	ldr	r3, [r3]
  10589c:	e51b0008 	ldr	r0, [fp, #-8]
  1058a0:	e12fff33 	blx	r3
  1058a4:	e1a03000 	mov	r3, r0
}
  1058a8:	e1a00003 	mov	r0, r3
  1058ac:	e24bd004 	sub	sp, fp, #4
  1058b0:	e8bd8800 	pop	{fp, pc}

001058b4 <netdev_set_down>:
 *
 * @return  0: set status successfully
 *         -1: set sttaus failed
 */
int netdev_set_down(struct netdev *netdev)
{
  1058b4:	e92d4800 	push	{fp, lr}
  1058b8:	e28db004 	add	fp, sp, #4
  1058bc:	e24dd008 	sub	sp, sp, #8
  1058c0:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1058c4:	e51b3008 	ldr	r3, [fp, #-8]
  1058c8:	e3530000 	cmp	r3, #0
  1058cc:	1a000005 	bne	1058e8 <netdev_set_down+0x34>
  1058d0:	e300218e 	movw	r2, #398	; 0x18e
  1058d4:	e3051de8 	movw	r1, #24040	; 0x5de8
  1058d8:	e3401014 	movt	r1, #20
  1058dc:	e3050a40 	movw	r0, #23104	; 0x5a40
  1058e0:	e3400014 	movt	r0, #20
  1058e4:	ebfff72b 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_down)
  1058e8:	e51b3008 	ldr	r3, [fp, #-8]
  1058ec:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1058f0:	e3530000 	cmp	r3, #0
  1058f4:	0a000004 	beq	10590c <netdev_set_down+0x58>
  1058f8:	e51b3008 	ldr	r3, [fp, #-8]
  1058fc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105900:	e5933004 	ldr	r3, [r3, #4]
  105904:	e3530000 	cmp	r3, #0
  105908:	1a00000d 	bne	105944 <netdev_set_down+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  10590c:	e3050a50 	movw	r0, #23120	; 0x5a50
  105910:	e3400014 	movt	r0, #20
  105914:	ebfff5fe 	bl	103114 <rt_kprintf>
  105918:	e51b3008 	ldr	r3, [fp, #-8]
  10591c:	e2833004 	add	r3, r3, #4
  105920:	e1a01003 	mov	r1, r3
  105924:	e3050a64 	movw	r0, #23140	; 0x5a64
  105928:	e3400014 	movt	r0, #20
  10592c:	ebfff5f8 	bl	103114 <rt_kprintf>
  105930:	e3050aa0 	movw	r0, #23200	; 0x5aa0
  105934:	e3400014 	movt	r0, #20
  105938:	ebfff5f5 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  10593c:	e3e03000 	mvn	r3, #0
  105940:	ea00000c 	b	105978 <netdev_set_down+0xc4>
    }

    /* network interface device status flags check */
    if (!netdev_is_up(netdev))
  105944:	e51b3008 	ldr	r3, [fp, #-8]
  105948:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10594c:	e2033001 	and	r3, r3, #1
  105950:	e3530000 	cmp	r3, #0
  105954:	1a000001 	bne	105960 <netdev_set_down+0xac>
    {
        return RT_EOK;
  105958:	e3a03000 	mov	r3, #0
  10595c:	ea000005 	b	105978 <netdev_set_down+0xc4>
    }

    /* execute disable network interface device operations by network interface driver */
    return netdev->ops->set_down(netdev);
  105960:	e51b3008 	ldr	r3, [fp, #-8]
  105964:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105968:	e5933004 	ldr	r3, [r3, #4]
  10596c:	e51b0008 	ldr	r0, [fp, #-8]
  105970:	e12fff33 	blx	r3
  105974:	e1a03000 	mov	r3, r0
}
  105978:	e1a00003 	mov	r0, r3
  10597c:	e24bd004 	sub	sp, fp, #4
  105980:	e8bd8800 	pop	{fp, pc}

00105984 <netdev_dhcp_enabled>:
 *
 * @return  0: set DHCP status successfully
 *         -1: set DHCP status failed
 */
int netdev_dhcp_enabled(struct netdev *netdev, rt_bool_t is_enabled)
{
  105984:	e92d4800 	push	{fp, lr}
  105988:	e28db004 	add	fp, sp, #4
  10598c:	e24dd008 	sub	sp, sp, #8
  105990:	e50b0008 	str	r0, [fp, #-8]
  105994:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105998:	e51b3008 	ldr	r3, [fp, #-8]
  10599c:	e3530000 	cmp	r3, #0
  1059a0:	1a000005 	bne	1059bc <netdev_dhcp_enabled+0x38>
  1059a4:	e30021ab 	movw	r2, #427	; 0x1ab
  1059a8:	e3051df8 	movw	r1, #24056	; 0x5df8
  1059ac:	e3401014 	movt	r1, #20
  1059b0:	e3050a40 	movw	r0, #23104	; 0x5a40
  1059b4:	e3400014 	movt	r0, #20
  1059b8:	ebfff6f6 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_dhcp)
  1059bc:	e51b3008 	ldr	r3, [fp, #-8]
  1059c0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1059c4:	e3530000 	cmp	r3, #0
  1059c8:	0a000004 	beq	1059e0 <netdev_dhcp_enabled+0x5c>
  1059cc:	e51b3008 	ldr	r3, [fp, #-8]
  1059d0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1059d4:	e5933010 	ldr	r3, [r3, #16]
  1059d8:	e3530000 	cmp	r3, #0
  1059dc:	1a00000d 	bne	105a18 <netdev_dhcp_enabled+0x94>
    {
        LOG_E("The network interface device(%s) not support to set DHCP status.", netdev->name);
  1059e0:	e3050a50 	movw	r0, #23120	; 0x5a50
  1059e4:	e3400014 	movt	r0, #20
  1059e8:	ebfff5c9 	bl	103114 <rt_kprintf>
  1059ec:	e51b3008 	ldr	r3, [fp, #-8]
  1059f0:	e2833004 	add	r3, r3, #4
  1059f4:	e1a01003 	mov	r1, r3
  1059f8:	e3050aa8 	movw	r0, #23208	; 0x5aa8
  1059fc:	e3400014 	movt	r0, #20
  105a00:	ebfff5c3 	bl	103114 <rt_kprintf>
  105a04:	e3050aa0 	movw	r0, #23200	; 0x5aa0
  105a08:	e3400014 	movt	r0, #20
  105a0c:	ebfff5c0 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105a10:	e3e03000 	mvn	r3, #0
  105a14:	ea00000f 	b	105a58 <netdev_dhcp_enabled+0xd4>
    }

    /* network interface device DHCP flags check */
    if (netdev_is_dhcp_enabled(netdev) == is_enabled)
  105a18:	e51b3008 	ldr	r3, [fp, #-8]
  105a1c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105a20:	e1a03423 	lsr	r3, r3, #8
  105a24:	e2033001 	and	r3, r3, #1
  105a28:	e51b200c 	ldr	r2, [fp, #-12]
  105a2c:	e1520003 	cmp	r2, r3
  105a30:	1a000001 	bne	105a3c <netdev_dhcp_enabled+0xb8>
    {
        return RT_EOK;
  105a34:	e3a03000 	mov	r3, #0
  105a38:	ea000006 	b	105a58 <netdev_dhcp_enabled+0xd4>
    }

    /* execute network interface device DHCP capability control operations */
    return netdev->ops->set_dhcp(netdev, is_enabled);
  105a3c:	e51b3008 	ldr	r3, [fp, #-8]
  105a40:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105a44:	e5933010 	ldr	r3, [r3, #16]
  105a48:	e51b100c 	ldr	r1, [fp, #-12]
  105a4c:	e51b0008 	ldr	r0, [fp, #-8]
  105a50:	e12fff33 	blx	r3
  105a54:	e1a03000 	mov	r3, r0
}
  105a58:	e1a00003 	mov	r0, r3
  105a5c:	e24bd004 	sub	sp, fp, #4
  105a60:	e8bd8800 	pop	{fp, pc}

00105a64 <netdev_set_ipaddr>:
 *
 * @return  0: set IP address successfully
 *         -1: set IP address failed
 */
int netdev_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  105a64:	e92d4810 	push	{r4, fp, lr}
  105a68:	e28db008 	add	fp, sp, #8
  105a6c:	e24dd00c 	sub	sp, sp, #12
  105a70:	e50b0010 	str	r0, [fp, #-16]
  105a74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105a78:	e51b3010 	ldr	r3, [fp, #-16]
  105a7c:	e3530000 	cmp	r3, #0
  105a80:	1a000005 	bne	105a9c <netdev_set_ipaddr+0x38>
  105a84:	e3a02f72 	mov	r2, #456	; 0x1c8
  105a88:	e3051e0c 	movw	r1, #24076	; 0x5e0c
  105a8c:	e3401014 	movt	r1, #20
  105a90:	e3050a40 	movw	r0, #23104	; 0x5a40
  105a94:	e3400014 	movt	r0, #20
  105a98:	ebfff6be 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ip_addr);
  105a9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105aa0:	e3530000 	cmp	r3, #0
  105aa4:	1a000005 	bne	105ac0 <netdev_set_ipaddr+0x5c>
  105aa8:	e30021c9 	movw	r2, #457	; 0x1c9
  105aac:	e3051e0c 	movw	r1, #24076	; 0x5e0c
  105ab0:	e3401014 	movt	r1, #20
  105ab4:	e3050aec 	movw	r0, #23276	; 0x5aec
  105ab8:	e3400014 	movt	r0, #20
  105abc:	ebfff6b5 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105ac0:	e51b3010 	ldr	r3, [fp, #-16]
  105ac4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ac8:	e3530000 	cmp	r3, #0
  105acc:	0a000004 	beq	105ae4 <netdev_set_ipaddr+0x80>
  105ad0:	e51b3010 	ldr	r3, [fp, #-16]
  105ad4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ad8:	e5933008 	ldr	r3, [r3, #8]
  105adc:	e3530000 	cmp	r3, #0
  105ae0:	1a00000d 	bne	105b1c <netdev_set_ipaddr+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set IP address.", netdev->name);
  105ae4:	e3050a50 	movw	r0, #23120	; 0x5a50
  105ae8:	e3400014 	movt	r0, #20
  105aec:	ebfff588 	bl	103114 <rt_kprintf>
  105af0:	e51b3010 	ldr	r3, [fp, #-16]
  105af4:	e2833004 	add	r3, r3, #4
  105af8:	e1a01003 	mov	r1, r3
  105afc:	e3050af4 	movw	r0, #23284	; 0x5af4
  105b00:	e3400014 	movt	r0, #20
  105b04:	ebfff582 	bl	103114 <rt_kprintf>
  105b08:	e3050aa0 	movw	r0, #23200	; 0x5aa0
  105b0c:	e3400014 	movt	r0, #20
  105b10:	ebfff57f 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105b14:	e3e03000 	mvn	r3, #0
  105b18:	ea00001d 	b	105b94 <netdev_set_ipaddr+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105b1c:	e51b3010 	ldr	r3, [fp, #-16]
  105b20:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105b24:	e1a03423 	lsr	r3, r3, #8
  105b28:	e2033001 	and	r3, r3, #1
  105b2c:	e6ef3073 	uxtb	r3, r3
  105b30:	e3530000 	cmp	r3, #0
  105b34:	0a00000d 	beq	105b70 <netdev_set_ipaddr+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set IP address.", netdev->name);
  105b38:	e3050a50 	movw	r0, #23120	; 0x5a50
  105b3c:	e3400014 	movt	r0, #20
  105b40:	ebfff573 	bl	103114 <rt_kprintf>
  105b44:	e51b3010 	ldr	r3, [fp, #-16]
  105b48:	e2833004 	add	r3, r3, #4
  105b4c:	e1a01003 	mov	r1, r3
  105b50:	e3050b34 	movw	r0, #23348	; 0x5b34
  105b54:	e3400014 	movt	r0, #20
  105b58:	ebfff56d 	bl	103114 <rt_kprintf>
  105b5c:	e3050aa0 	movw	r0, #23200	; 0x5aa0
  105b60:	e3400014 	movt	r0, #20
  105b64:	ebfff56a 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105b68:	e3e03000 	mvn	r3, #0
  105b6c:	ea000008 	b	105b94 <netdev_set_ipaddr+0x130>
    }

     /* execute network interface device set IP address operations */
    return netdev->ops->set_addr_info(netdev, (ip_addr_t *)ip_addr, RT_NULL, RT_NULL);
  105b70:	e51b3010 	ldr	r3, [fp, #-16]
  105b74:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105b78:	e5934008 	ldr	r4, [r3, #8]
  105b7c:	e3a03000 	mov	r3, #0
  105b80:	e3a02000 	mov	r2, #0
  105b84:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  105b88:	e51b0010 	ldr	r0, [fp, #-16]
  105b8c:	e12fff34 	blx	r4
  105b90:	e1a03000 	mov	r3, r0
}
  105b94:	e1a00003 	mov	r0, r3
  105b98:	e24bd008 	sub	sp, fp, #8
  105b9c:	e8bd8810 	pop	{r4, fp, pc}

00105ba0 <netdev_set_netmask>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  105ba0:	e92d4810 	push	{r4, fp, lr}
  105ba4:	e28db008 	add	fp, sp, #8
  105ba8:	e24dd00c 	sub	sp, sp, #12
  105bac:	e50b0010 	str	r0, [fp, #-16]
  105bb0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105bb4:	e51b3010 	ldr	r3, [fp, #-16]
  105bb8:	e3530000 	cmp	r3, #0
  105bbc:	1a000005 	bne	105bd8 <netdev_set_netmask+0x38>
  105bc0:	e30021e6 	movw	r2, #486	; 0x1e6
  105bc4:	e3051e20 	movw	r1, #24096	; 0x5e20
  105bc8:	e3401014 	movt	r1, #20
  105bcc:	e3050a40 	movw	r0, #23104	; 0x5a40
  105bd0:	e3400014 	movt	r0, #20
  105bd4:	ebfff66f 	bl	103598 <rt_assert_handler>
    RT_ASSERT(netmask);
  105bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105bdc:	e3530000 	cmp	r3, #0
  105be0:	1a000005 	bne	105bfc <netdev_set_netmask+0x5c>
  105be4:	e30021e7 	movw	r2, #487	; 0x1e7
  105be8:	e3051e20 	movw	r1, #24096	; 0x5e20
  105bec:	e3401014 	movt	r1, #20
  105bf0:	e3050b8c 	movw	r0, #23436	; 0x5b8c
  105bf4:	e3400014 	movt	r0, #20
  105bf8:	ebfff666 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105bfc:	e51b3010 	ldr	r3, [fp, #-16]
  105c00:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105c04:	e3530000 	cmp	r3, #0
  105c08:	0a000004 	beq	105c20 <netdev_set_netmask+0x80>
  105c0c:	e51b3010 	ldr	r3, [fp, #-16]
  105c10:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105c14:	e5933008 	ldr	r3, [r3, #8]
  105c18:	e3530000 	cmp	r3, #0
  105c1c:	1a00000d 	bne	105c58 <netdev_set_netmask+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set netmask address.", netdev->name);
  105c20:	e3050a50 	movw	r0, #23120	; 0x5a50
  105c24:	e3400014 	movt	r0, #20
  105c28:	ebfff539 	bl	103114 <rt_kprintf>
  105c2c:	e51b3010 	ldr	r3, [fp, #-16]
  105c30:	e2833004 	add	r3, r3, #4
  105c34:	e1a01003 	mov	r1, r3
  105c38:	e3050b94 	movw	r0, #23444	; 0x5b94
  105c3c:	e3400014 	movt	r0, #20
  105c40:	ebfff533 	bl	103114 <rt_kprintf>
  105c44:	e3050aa0 	movw	r0, #23200	; 0x5aa0
  105c48:	e3400014 	movt	r0, #20
  105c4c:	ebfff530 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105c50:	e3e03000 	mvn	r3, #0
  105c54:	ea00001d 	b	105cd0 <netdev_set_netmask+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105c58:	e51b3010 	ldr	r3, [fp, #-16]
  105c5c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105c60:	e1a03423 	lsr	r3, r3, #8
  105c64:	e2033001 	and	r3, r3, #1
  105c68:	e6ef3073 	uxtb	r3, r3
  105c6c:	e3530000 	cmp	r3, #0
  105c70:	0a00000d 	beq	105cac <netdev_set_netmask+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set netmask address.", netdev->name);
  105c74:	e3050a50 	movw	r0, #23120	; 0x5a50
  105c78:	e3400014 	movt	r0, #20
  105c7c:	ebfff524 	bl	103114 <rt_kprintf>
  105c80:	e51b3010 	ldr	r3, [fp, #-16]
  105c84:	e2833004 	add	r3, r3, #4
  105c88:	e1a01003 	mov	r1, r3
  105c8c:	e3050bdc 	movw	r0, #23516	; 0x5bdc
  105c90:	e3400014 	movt	r0, #20
  105c94:	ebfff51e 	bl	103114 <rt_kprintf>
  105c98:	e3050aa0 	movw	r0, #23200	; 0x5aa0
  105c9c:	e3400014 	movt	r0, #20
  105ca0:	ebfff51b 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105ca4:	e3e03000 	mvn	r3, #0
  105ca8:	ea000008 	b	105cd0 <netdev_set_netmask+0x130>
    }

    /* execute network interface device set netmask address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, (ip_addr_t *)netmask, RT_NULL);
  105cac:	e51b3010 	ldr	r3, [fp, #-16]
  105cb0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105cb4:	e5934008 	ldr	r4, [r3, #8]
  105cb8:	e3a03000 	mov	r3, #0
  105cbc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105cc0:	e3a01000 	mov	r1, #0
  105cc4:	e51b0010 	ldr	r0, [fp, #-16]
  105cc8:	e12fff34 	blx	r4
  105ccc:	e1a03000 	mov	r3, r0
}
  105cd0:	e1a00003 	mov	r0, r3
  105cd4:	e24bd008 	sub	sp, fp, #8
  105cd8:	e8bd8810 	pop	{r4, fp, pc}

00105cdc <netdev_set_gw>:
 *
 * @return  0: set gateway address successfully
 *         -1: set gateway address failed
 */
int netdev_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  105cdc:	e92d4810 	push	{r4, fp, lr}
  105ce0:	e28db008 	add	fp, sp, #8
  105ce4:	e24dd00c 	sub	sp, sp, #12
  105ce8:	e50b0010 	str	r0, [fp, #-16]
  105cec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105cf0:	e51b3010 	ldr	r3, [fp, #-16]
  105cf4:	e3530000 	cmp	r3, #0
  105cf8:	1a000005 	bne	105d14 <netdev_set_gw+0x38>
  105cfc:	e3a02f81 	mov	r2, #516	; 0x204
  105d00:	e3051e34 	movw	r1, #24116	; 0x5e34
  105d04:	e3401014 	movt	r1, #20
  105d08:	e3050a40 	movw	r0, #23104	; 0x5a40
  105d0c:	e3400014 	movt	r0, #20
  105d10:	ebfff620 	bl	103598 <rt_assert_handler>
    RT_ASSERT(gw);
  105d14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105d18:	e3530000 	cmp	r3, #0
  105d1c:	1a000005 	bne	105d38 <netdev_set_gw+0x5c>
  105d20:	e3002205 	movw	r2, #517	; 0x205
  105d24:	e3051e34 	movw	r1, #24116	; 0x5e34
  105d28:	e3401014 	movt	r1, #20
  105d2c:	e3050c3c 	movw	r0, #23612	; 0x5c3c
  105d30:	e3400014 	movt	r0, #20
  105d34:	ebfff617 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105d38:	e51b3010 	ldr	r3, [fp, #-16]
  105d3c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105d40:	e3530000 	cmp	r3, #0
  105d44:	0a000004 	beq	105d5c <netdev_set_gw+0x80>
  105d48:	e51b3010 	ldr	r3, [fp, #-16]
  105d4c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105d50:	e5933008 	ldr	r3, [r3, #8]
  105d54:	e3530000 	cmp	r3, #0
  105d58:	1a00000d 	bne	105d94 <netdev_set_gw+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set gateway address.", netdev->name);
  105d5c:	e3050a50 	movw	r0, #23120	; 0x5a50
  105d60:	e3400014 	movt	r0, #20
  105d64:	ebfff4ea 	bl	103114 <rt_kprintf>
  105d68:	e51b3010 	ldr	r3, [fp, #-16]
  105d6c:	e2833004 	add	r3, r3, #4
  105d70:	e1a01003 	mov	r1, r3
  105d74:	e3050c40 	movw	r0, #23616	; 0x5c40
  105d78:	e3400014 	movt	r0, #20
  105d7c:	ebfff4e4 	bl	103114 <rt_kprintf>
  105d80:	e3050aa0 	movw	r0, #23200	; 0x5aa0
  105d84:	e3400014 	movt	r0, #20
  105d88:	ebfff4e1 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105d8c:	e3e03000 	mvn	r3, #0
  105d90:	ea00001d 	b	105e0c <netdev_set_gw+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105d94:	e51b3010 	ldr	r3, [fp, #-16]
  105d98:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105d9c:	e1a03423 	lsr	r3, r3, #8
  105da0:	e2033001 	and	r3, r3, #1
  105da4:	e6ef3073 	uxtb	r3, r3
  105da8:	e3530000 	cmp	r3, #0
  105dac:	0a00000d 	beq	105de8 <netdev_set_gw+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set gateway address.", netdev->name);
  105db0:	e3050a50 	movw	r0, #23120	; 0x5a50
  105db4:	e3400014 	movt	r0, #20
  105db8:	ebfff4d5 	bl	103114 <rt_kprintf>
  105dbc:	e51b3010 	ldr	r3, [fp, #-16]
  105dc0:	e2833004 	add	r3, r3, #4
  105dc4:	e1a01003 	mov	r1, r3
  105dc8:	e3050c88 	movw	r0, #23688	; 0x5c88
  105dcc:	e3400014 	movt	r0, #20
  105dd0:	ebfff4cf 	bl	103114 <rt_kprintf>
  105dd4:	e3050aa0 	movw	r0, #23200	; 0x5aa0
  105dd8:	e3400014 	movt	r0, #20
  105ddc:	ebfff4cc 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105de0:	e3e03000 	mvn	r3, #0
  105de4:	ea000008 	b	105e0c <netdev_set_gw+0x130>
    }

    /* execute network interface device set gateway address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, RT_NULL, (ip_addr_t *)gw);
  105de8:	e51b3010 	ldr	r3, [fp, #-16]
  105dec:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105df0:	e5934008 	ldr	r4, [r3, #8]
  105df4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105df8:	e3a02000 	mov	r2, #0
  105dfc:	e3a01000 	mov	r1, #0
  105e00:	e51b0010 	ldr	r0, [fp, #-16]
  105e04:	e12fff34 	blx	r4
  105e08:	e1a03000 	mov	r3, r0
}
  105e0c:	e1a00003 	mov	r0, r3
  105e10:	e24bd008 	sub	sp, fp, #8
  105e14:	e8bd8810 	pop	{r4, fp, pc}

00105e18 <netdev_set_dns_server>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  105e18:	e92d4800 	push	{fp, lr}
  105e1c:	e28db004 	add	fp, sp, #4
  105e20:	e24dd010 	sub	sp, sp, #16
  105e24:	e50b0008 	str	r0, [fp, #-8]
  105e28:	e1a03001 	mov	r3, r1
  105e2c:	e50b2010 	str	r2, [fp, #-16]
  105e30:	e54b3009 	strb	r3, [fp, #-9]
    RT_ASSERT(netdev);
  105e34:	e51b3008 	ldr	r3, [fp, #-8]
  105e38:	e3530000 	cmp	r3, #0
  105e3c:	1a000005 	bne	105e58 <netdev_set_dns_server+0x40>
  105e40:	e3002222 	movw	r2, #546	; 0x222
  105e44:	e3051e44 	movw	r1, #24132	; 0x5e44
  105e48:	e3401014 	movt	r1, #20
  105e4c:	e3050a40 	movw	r0, #23104	; 0x5a40
  105e50:	e3400014 	movt	r0, #20
  105e54:	ebfff5cf 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dns_server);
  105e58:	e51b3010 	ldr	r3, [fp, #-16]
  105e5c:	e3530000 	cmp	r3, #0
  105e60:	1a000005 	bne	105e7c <netdev_set_dns_server+0x64>
  105e64:	e3002223 	movw	r2, #547	; 0x223
  105e68:	e3051e44 	movw	r1, #24132	; 0x5e44
  105e6c:	e3401014 	movt	r1, #20
  105e70:	e3050ce8 	movw	r0, #23784	; 0x5ce8
  105e74:	e3400014 	movt	r0, #20
  105e78:	ebfff5c6 	bl	103598 <rt_assert_handler>

    if (dns_num >= NETDEV_DNS_SERVERS_NUM)
  105e7c:	e55b3009 	ldrb	r3, [fp, #-9]
  105e80:	e3530001 	cmp	r3, #1
  105e84:	9a00000e 	bls	105ec4 <netdev_set_dns_server+0xac>
    {
        LOG_E("The number of DNS servers(%d) set exceeds the maximum number(%d).", dns_num + 1, NETDEV_DNS_SERVERS_NUM);
  105e88:	e3050a50 	movw	r0, #23120	; 0x5a50
  105e8c:	e3400014 	movt	r0, #20
  105e90:	ebfff49f 	bl	103114 <rt_kprintf>
  105e94:	e55b3009 	ldrb	r3, [fp, #-9]
  105e98:	e2833001 	add	r3, r3, #1
  105e9c:	e3a02002 	mov	r2, #2
  105ea0:	e1a01003 	mov	r1, r3
  105ea4:	e3050cf4 	movw	r0, #23796	; 0x5cf4
  105ea8:	e3400014 	movt	r0, #20
  105eac:	ebfff498 	bl	103114 <rt_kprintf>
  105eb0:	e3050aa0 	movw	r0, #23200	; 0x5aa0
  105eb4:	e3400014 	movt	r0, #20
  105eb8:	ebfff495 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105ebc:	e3e03000 	mvn	r3, #0
  105ec0:	ea00001e 	b	105f40 <netdev_set_dns_server+0x128>
    }

    if (!netdev->ops || !netdev->ops->set_dns_server)
  105ec4:	e51b3008 	ldr	r3, [fp, #-8]
  105ec8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ecc:	e3530000 	cmp	r3, #0
  105ed0:	0a000004 	beq	105ee8 <netdev_set_dns_server+0xd0>
  105ed4:	e51b3008 	ldr	r3, [fp, #-8]
  105ed8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105edc:	e593300c 	ldr	r3, [r3, #12]
  105ee0:	e3530000 	cmp	r3, #0
  105ee4:	1a00000d 	bne	105f20 <netdev_set_dns_server+0x108>
    {
        LOG_E("The network interface device(%s) not support to set DNS server address.", netdev->name);
  105ee8:	e3050a50 	movw	r0, #23120	; 0x5a50
  105eec:	e3400014 	movt	r0, #20
  105ef0:	ebfff487 	bl	103114 <rt_kprintf>
  105ef4:	e51b3008 	ldr	r3, [fp, #-8]
  105ef8:	e2833004 	add	r3, r3, #4
  105efc:	e1a01003 	mov	r1, r3
  105f00:	e3050d38 	movw	r0, #23864	; 0x5d38
  105f04:	e3400014 	movt	r0, #20
  105f08:	ebfff481 	bl	103114 <rt_kprintf>
  105f0c:	e3050aa0 	movw	r0, #23200	; 0x5aa0
  105f10:	e3400014 	movt	r0, #20
  105f14:	ebfff47e 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105f18:	e3e03000 	mvn	r3, #0
  105f1c:	ea000007 	b	105f40 <netdev_set_dns_server+0x128>
    }

    /* execute network interface device set DNS server address operations */
    return netdev->ops->set_dns_server(netdev, dns_num, (ip_addr_t *)dns_server);
  105f20:	e51b3008 	ldr	r3, [fp, #-8]
  105f24:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105f28:	e593300c 	ldr	r3, [r3, #12]
  105f2c:	e55b1009 	ldrb	r1, [fp, #-9]
  105f30:	e51b2010 	ldr	r2, [fp, #-16]
  105f34:	e51b0008 	ldr	r0, [fp, #-8]
  105f38:	e12fff33 	blx	r3
  105f3c:	e1a03000 	mov	r3, r0
}
  105f40:	e1a00003 	mov	r0, r3
  105f44:	e24bd004 	sub	sp, fp, #4
  105f48:	e8bd8800 	pop	{fp, pc}

00105f4c <netdev_set_status_callback>:
 *
 * @param netdev the network interface device to change
 * @param status_callback the callback be called when the status has been changed.
 */
void netdev_set_status_callback(struct netdev *netdev, netdev_callback_fn status_callback)
{
  105f4c:	e92d4800 	push	{fp, lr}
  105f50:	e28db004 	add	fp, sp, #4
  105f54:	e24dd008 	sub	sp, sp, #8
  105f58:	e50b0008 	str	r0, [fp, #-8]
  105f5c:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105f60:	e51b3008 	ldr	r3, [fp, #-8]
  105f64:	e3530000 	cmp	r3, #0
  105f68:	1a000005 	bne	105f84 <netdev_set_status_callback+0x38>
  105f6c:	e300223d 	movw	r2, #573	; 0x23d
  105f70:	e3051e5c 	movw	r1, #24156	; 0x5e5c
  105f74:	e3401014 	movt	r1, #20
  105f78:	e3050a40 	movw	r0, #23104	; 0x5a40
  105f7c:	e3400014 	movt	r0, #20
  105f80:	ebfff584 	bl	103598 <rt_assert_handler>
    RT_ASSERT(status_callback);
  105f84:	e51b300c 	ldr	r3, [fp, #-12]
  105f88:	e3530000 	cmp	r3, #0
  105f8c:	1a000005 	bne	105fa8 <netdev_set_status_callback+0x5c>
  105f90:	e300223e 	movw	r2, #574	; 0x23e
  105f94:	e3051e5c 	movw	r1, #24156	; 0x5e5c
  105f98:	e3401014 	movt	r1, #20
  105f9c:	e3050d80 	movw	r0, #23936	; 0x5d80
  105fa0:	e3400014 	movt	r0, #20
  105fa4:	ebfff57b 	bl	103598 <rt_assert_handler>

    netdev->status_callback = status_callback;
  105fa8:	e51b3008 	ldr	r3, [fp, #-8]
  105fac:	e51b200c 	ldr	r2, [fp, #-12]
  105fb0:	e5832034 	str	r2, [r3, #52]	; 0x34
}
  105fb4:	e320f000 	nop	{0}
  105fb8:	e24bd004 	sub	sp, fp, #4
  105fbc:	e8bd8800 	pop	{fp, pc}

00105fc0 <netdev_set_addr_callback>:
 *
 * @param netdev the network interface device to change
 * @param addr_callback the callback be called when the address has been changed.
 */
void netdev_set_addr_callback(struct netdev *netdev, netdev_callback_fn addr_callback)
{
  105fc0:	e92d4800 	push	{fp, lr}
  105fc4:	e28db004 	add	fp, sp, #4
  105fc8:	e24dd008 	sub	sp, sp, #8
  105fcc:	e50b0008 	str	r0, [fp, #-8]
  105fd0:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105fd4:	e51b3008 	ldr	r3, [fp, #-8]
  105fd8:	e3530000 	cmp	r3, #0
  105fdc:	1a000005 	bne	105ff8 <netdev_set_addr_callback+0x38>
  105fe0:	e300224b 	movw	r2, #587	; 0x24b
  105fe4:	e3051e78 	movw	r1, #24184	; 0x5e78
  105fe8:	e3401014 	movt	r1, #20
  105fec:	e3050a40 	movw	r0, #23104	; 0x5a40
  105ff0:	e3400014 	movt	r0, #20
  105ff4:	ebfff567 	bl	103598 <rt_assert_handler>
    RT_ASSERT(addr_callback);
  105ff8:	e51b300c 	ldr	r3, [fp, #-12]
  105ffc:	e3530000 	cmp	r3, #0
  106000:	1a000005 	bne	10601c <netdev_set_addr_callback+0x5c>
  106004:	e3a02f93 	mov	r2, #588	; 0x24c
  106008:	e3051e78 	movw	r1, #24184	; 0x5e78
  10600c:	e3401014 	movt	r1, #20
  106010:	e3050d90 	movw	r0, #23952	; 0x5d90
  106014:	e3400014 	movt	r0, #20
  106018:	ebfff55e 	bl	103598 <rt_assert_handler>

    netdev->addr_callback = addr_callback;
  10601c:	e51b3008 	ldr	r3, [fp, #-8]
  106020:	e51b200c 	ldr	r2, [fp, #-12]
  106024:	e5832038 	str	r2, [r3, #56]	; 0x38
}
  106028:	e320f000 	nop	{0}
  10602c:	e24bd004 	sub	sp, fp, #4
  106030:	e8bd8800 	pop	{fp, pc}

00106034 <netdev_low_level_set_ipaddr>:
 *
 * @param netdev the network interface device to change
 * @param ipaddr the new IP address
 */
void netdev_low_level_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  106034:	e92d4800 	push	{fp, lr}
  106038:	e28db004 	add	fp, sp, #4
  10603c:	e24dd008 	sub	sp, sp, #8
  106040:	e50b0008 	str	r0, [fp, #-8]
  106044:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(ip_addr);
  106048:	e51b300c 	ldr	r3, [fp, #-12]
  10604c:	e3530000 	cmp	r3, #0
  106050:	1a000005 	bne	10606c <netdev_low_level_set_ipaddr+0x38>
  106054:	e300225b 	movw	r2, #603	; 0x25b
  106058:	e3051e94 	movw	r1, #24212	; 0x5e94
  10605c:	e3401014 	movt	r1, #20
  106060:	e3050aec 	movw	r0, #23276	; 0x5aec
  106064:	e3400014 	movt	r0, #20
  106068:	ebfff54a 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr) == 0)
  10606c:	e51b3008 	ldr	r3, [fp, #-8]
  106070:	e3530000 	cmp	r3, #0
  106074:	0a000025 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
  106078:	e51b3008 	ldr	r3, [fp, #-8]
  10607c:	e593200c 	ldr	r2, [r3, #12]
  106080:	e51b300c 	ldr	r3, [fp, #-12]
  106084:	e5933000 	ldr	r3, [r3]
  106088:	e1520003 	cmp	r2, r3
  10608c:	0a00001f 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
    {
        ip_addr_copy(netdev->ip_addr, *ip_addr);
  106090:	e51b300c 	ldr	r3, [fp, #-12]
  106094:	e5932000 	ldr	r2, [r3]
  106098:	e51b3008 	ldr	r3, [fp, #-8]
  10609c:	e583200c 	str	r2, [r3, #12]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev))
  1060a0:	e51b3008 	ldr	r3, [fp, #-8]
  1060a4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060a8:	e2033001 	and	r3, r3, #1
  1060ac:	e6ef3073 	uxtb	r3, r3
  1060b0:	e3530000 	cmp	r3, #0
  1060b4:	0a00000c 	beq	1060ec <netdev_low_level_set_ipaddr+0xb8>
  1060b8:	e51b3008 	ldr	r3, [fp, #-8]
  1060bc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060c0:	e1a03123 	lsr	r3, r3, #2
  1060c4:	e2033001 	and	r3, r3, #1
  1060c8:	e6ef3073 	uxtb	r3, r3
  1060cc:	e3530000 	cmp	r3, #0
  1060d0:	0a000005 	beq	1060ec <netdev_low_level_set_ipaddr+0xb8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1060d4:	e51b3008 	ldr	r3, [fp, #-8]
  1060d8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060dc:	e3833080 	orr	r3, r3, #128	; 0x80
  1060e0:	e6ff2073 	uxth	r2, r3
  1060e4:	e51b3008 	ldr	r3, [fp, #-8]
  1060e8:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute IP address change callback function */
        if (netdev->addr_callback)
  1060ec:	e51b3008 	ldr	r3, [fp, #-8]
  1060f0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1060f4:	e3530000 	cmp	r3, #0
  1060f8:	0a000004 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_IP);
  1060fc:	e51b3008 	ldr	r3, [fp, #-8]
  106100:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106104:	e3a01000 	mov	r1, #0
  106108:	e51b0008 	ldr	r0, [fp, #-8]
  10610c:	e12fff33 	blx	r3
        }
    }
}
  106110:	e320f000 	nop	{0}
  106114:	e24bd004 	sub	sp, fp, #4
  106118:	e8bd8800 	pop	{fp, pc}

0010611c <netdev_low_level_set_netmask>:
 *
 * @param netdev the network interface device to change
 * @param netmask the new netmask address
 */
void netdev_low_level_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  10611c:	e92d4800 	push	{fp, lr}
  106120:	e28db004 	add	fp, sp, #4
  106124:	e24dd008 	sub	sp, sp, #8
  106128:	e50b0008 	str	r0, [fp, #-8]
  10612c:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netmask);
  106130:	e51b300c 	ldr	r3, [fp, #-12]
  106134:	e3530000 	cmp	r3, #0
  106138:	1a000005 	bne	106154 <netdev_low_level_set_netmask+0x38>
  10613c:	e3a02f9f 	mov	r2, #636	; 0x27c
  106140:	e3051eb0 	movw	r1, #24240	; 0x5eb0
  106144:	e3401014 	movt	r1, #20
  106148:	e3050b8c 	movw	r0, #23436	; 0x5b8c
  10614c:	e3400014 	movt	r0, #20
  106150:	ebfff510 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->netmask), netmask) == 0)
  106154:	e51b3008 	ldr	r3, [fp, #-8]
  106158:	e3530000 	cmp	r3, #0
  10615c:	0a00002d 	beq	106218 <netdev_low_level_set_netmask+0xfc>
  106160:	e51b3008 	ldr	r3, [fp, #-8]
  106164:	e5932010 	ldr	r2, [r3, #16]
  106168:	e51b300c 	ldr	r3, [fp, #-12]
  10616c:	e5933000 	ldr	r3, [r3]
  106170:	e1520003 	cmp	r2, r3
  106174:	0a000027 	beq	106218 <netdev_low_level_set_netmask+0xfc>
    {
        ip_addr_copy(netdev->netmask, *netmask);
  106178:	e51b300c 	ldr	r3, [fp, #-12]
  10617c:	e5932000 	ldr	r2, [r3]
  106180:	e51b3008 	ldr	r3, [fp, #-8]
  106184:	e5832010 	str	r2, [r3, #16]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  106188:	e51b3008 	ldr	r3, [fp, #-8]
  10618c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106190:	e2033001 	and	r3, r3, #1
  106194:	e6ef3073 	uxtb	r3, r3
  106198:	e3530000 	cmp	r3, #0
  10619c:	0a000014 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
  1061a0:	e51b3008 	ldr	r3, [fp, #-8]
  1061a4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1061a8:	e1a03123 	lsr	r3, r3, #2
  1061ac:	e2033001 	and	r3, r3, #1
  1061b0:	e6ef3073 	uxtb	r3, r3
  1061b4:	e3530000 	cmp	r3, #0
  1061b8:	0a00000d 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1061bc:	e51b3008 	ldr	r3, [fp, #-8]
  1061c0:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  1061c4:	e3530000 	cmp	r3, #0
  1061c8:	0a000009 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1061cc:	e51b3008 	ldr	r3, [fp, #-8]
  1061d0:	e593300c 	ldr	r3, [r3, #12]
  1061d4:	e3530000 	cmp	r3, #0
  1061d8:	0a000005 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1061dc:	e51b3008 	ldr	r3, [fp, #-8]
  1061e0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1061e4:	e3833080 	orr	r3, r3, #128	; 0x80
  1061e8:	e6ff2073 	uxth	r2, r3
  1061ec:	e51b3008 	ldr	r3, [fp, #-8]
  1061f0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute netmask address change callback function */
        if (netdev->addr_callback)
  1061f4:	e51b3008 	ldr	r3, [fp, #-8]
  1061f8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1061fc:	e3530000 	cmp	r3, #0
  106200:	0a000004 	beq	106218 <netdev_low_level_set_netmask+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_NETMASK);
  106204:	e51b3008 	ldr	r3, [fp, #-8]
  106208:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10620c:	e3a01001 	mov	r1, #1
  106210:	e51b0008 	ldr	r0, [fp, #-8]
  106214:	e12fff33 	blx	r3
        }
    }
}
  106218:	e320f000 	nop	{0}
  10621c:	e24bd004 	sub	sp, fp, #4
  106220:	e8bd8800 	pop	{fp, pc}

00106224 <netdev_low_level_set_gw>:
 *
 * @param netdev the network interface device to change
 * @param gateway the new gateway address
 */
void netdev_low_level_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  106224:	e92d4800 	push	{fp, lr}
  106228:	e28db004 	add	fp, sp, #4
  10622c:	e24dd008 	sub	sp, sp, #8
  106230:	e50b0008 	str	r0, [fp, #-8]
  106234:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(gw);
  106238:	e51b300c 	ldr	r3, [fp, #-12]
  10623c:	e3530000 	cmp	r3, #0
  106240:	1a000005 	bne	10625c <netdev_low_level_set_gw+0x38>
  106244:	e300229e 	movw	r2, #670	; 0x29e
  106248:	e3051ed0 	movw	r1, #24272	; 0x5ed0
  10624c:	e3401014 	movt	r1, #20
  106250:	e3050c3c 	movw	r0, #23612	; 0x5c3c
  106254:	e3400014 	movt	r0, #20
  106258:	ebfff4ce 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->gw), gw) == 0)
  10625c:	e51b3008 	ldr	r3, [fp, #-8]
  106260:	e3530000 	cmp	r3, #0
  106264:	0a00002d 	beq	106320 <netdev_low_level_set_gw+0xfc>
  106268:	e51b3008 	ldr	r3, [fp, #-8]
  10626c:	e5932014 	ldr	r2, [r3, #20]
  106270:	e51b300c 	ldr	r3, [fp, #-12]
  106274:	e5933000 	ldr	r3, [r3]
  106278:	e1520003 	cmp	r2, r3
  10627c:	0a000027 	beq	106320 <netdev_low_level_set_gw+0xfc>
    {
        ip_addr_copy(netdev->gw, *gw);
  106280:	e51b300c 	ldr	r3, [fp, #-12]
  106284:	e5932000 	ldr	r2, [r3]
  106288:	e51b3008 	ldr	r3, [fp, #-8]
  10628c:	e5832014 	str	r2, [r3, #20]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  106290:	e51b3008 	ldr	r3, [fp, #-8]
  106294:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106298:	e2033001 	and	r3, r3, #1
  10629c:	e6ef3073 	uxtb	r3, r3
  1062a0:	e3530000 	cmp	r3, #0
  1062a4:	0a000014 	beq	1062fc <netdev_low_level_set_gw+0xd8>
  1062a8:	e51b3008 	ldr	r3, [fp, #-8]
  1062ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1062b0:	e1a03123 	lsr	r3, r3, #2
  1062b4:	e2033001 	and	r3, r3, #1
  1062b8:	e6ef3073 	uxtb	r3, r3
  1062bc:	e3530000 	cmp	r3, #0
  1062c0:	0a00000d 	beq	1062fc <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1062c4:	e51b3008 	ldr	r3, [fp, #-8]
  1062c8:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  1062cc:	e3530000 	cmp	r3, #0
  1062d0:	0a000009 	beq	1062fc <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1062d4:	e51b3008 	ldr	r3, [fp, #-8]
  1062d8:	e593300c 	ldr	r3, [r3, #12]
  1062dc:	e3530000 	cmp	r3, #0
  1062e0:	0a000005 	beq	1062fc <netdev_low_level_set_gw+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1062e4:	e51b3008 	ldr	r3, [fp, #-8]
  1062e8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1062ec:	e3833080 	orr	r3, r3, #128	; 0x80
  1062f0:	e6ff2073 	uxth	r2, r3
  1062f4:	e51b3008 	ldr	r3, [fp, #-8]
  1062f8:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute gateway address change callback function */
        if (netdev->addr_callback)
  1062fc:	e51b3008 	ldr	r3, [fp, #-8]
  106300:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106304:	e3530000 	cmp	r3, #0
  106308:	0a000004 	beq	106320 <netdev_low_level_set_gw+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_GATEWAY);
  10630c:	e51b3008 	ldr	r3, [fp, #-8]
  106310:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106314:	e3a01002 	mov	r1, #2
  106318:	e51b0008 	ldr	r0, [fp, #-8]
  10631c:	e12fff33 	blx	r3
        }
    }
}
  106320:	e320f000 	nop	{0}
  106324:	e24bd004 	sub	sp, fp, #4
  106328:	e8bd8800 	pop	{fp, pc}

0010632c <netdev_low_level_set_dns_server>:
 * @param netdev the network interface device to change
 * @param dns_server the new DNS server address
 *
 */
void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  10632c:	e92d4800 	push	{fp, lr}
  106330:	e28db004 	add	fp, sp, #4
  106334:	e24dd018 	sub	sp, sp, #24
  106338:	e50b0010 	str	r0, [fp, #-16]
  10633c:	e1a03001 	mov	r3, r1
  106340:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  106344:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    int index;

    RT_ASSERT(dns_server);
  106348:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10634c:	e3530000 	cmp	r3, #0
  106350:	1a000005 	bne	10636c <netdev_low_level_set_dns_server+0x40>
  106354:	e30022c3 	movw	r2, #707	; 0x2c3
  106358:	e3051ee8 	movw	r1, #24296	; 0x5ee8
  10635c:	e3401014 	movt	r1, #20
  106360:	e3050ce8 	movw	r0, #23784	; 0x5ce8
  106364:	e3400014 	movt	r0, #20
  106368:	ebfff48a 	bl	103598 <rt_assert_handler>

    if (netdev == RT_NULL)
  10636c:	e51b3010 	ldr	r3, [fp, #-16]
  106370:	e3530000 	cmp	r3, #0
  106374:	0a000023 	beq	106408 <netdev_low_level_set_dns_server+0xdc>
    {
        return;
    }
    /* check DNS servers is exist */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  106378:	e3a03000 	mov	r3, #0
  10637c:	e50b3008 	str	r3, [fp, #-8]
  106380:	ea00000a 	b	1063b0 <netdev_low_level_set_dns_server+0x84>
    {
        if (ip_addr_cmp(&(netdev->dns_servers[index]), dns_server))
  106384:	e51b3010 	ldr	r3, [fp, #-16]
  106388:	e51b2008 	ldr	r2, [fp, #-8]
  10638c:	e2822006 	add	r2, r2, #6
  106390:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  106394:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106398:	e5933000 	ldr	r3, [r3]
  10639c:	e1520003 	cmp	r2, r3
  1063a0:	0a00001a 	beq	106410 <netdev_low_level_set_dns_server+0xe4>
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  1063a4:	e51b3008 	ldr	r3, [fp, #-8]
  1063a8:	e2833001 	add	r3, r3, #1
  1063ac:	e50b3008 	str	r3, [fp, #-8]
  1063b0:	e51b3008 	ldr	r3, [fp, #-8]
  1063b4:	e3530001 	cmp	r3, #1
  1063b8:	9afffff1 	bls	106384 <netdev_low_level_set_dns_server+0x58>
        {
            return;
        }
    }

    if (dns_num < NETDEV_DNS_SERVERS_NUM)
  1063bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1063c0:	e3530001 	cmp	r3, #1
  1063c4:	8a000012 	bhi	106414 <netdev_low_level_set_dns_server+0xe8>
    {
        ip_addr_copy(netdev->dns_servers[dns_num], *dns_server);
  1063c8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1063cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1063d0:	e5931000 	ldr	r1, [r3]
  1063d4:	e51b3010 	ldr	r3, [fp, #-16]
  1063d8:	e2822006 	add	r2, r2, #6
  1063dc:	e7831102 	str	r1, [r3, r2, lsl #2]

        /* execute DNS servers address change callback function */
        if (netdev->addr_callback)
  1063e0:	e51b3010 	ldr	r3, [fp, #-16]
  1063e4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1063e8:	e3530000 	cmp	r3, #0
  1063ec:	0a000008 	beq	106414 <netdev_low_level_set_dns_server+0xe8>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_DNS_SERVER);
  1063f0:	e51b3010 	ldr	r3, [fp, #-16]
  1063f4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1063f8:	e3a01003 	mov	r1, #3
  1063fc:	e51b0010 	ldr	r0, [fp, #-16]
  106400:	e12fff33 	blx	r3
  106404:	ea000002 	b	106414 <netdev_low_level_set_dns_server+0xe8>
        return;
  106408:	e320f000 	nop	{0}
  10640c:	ea000000 	b	106414 <netdev_low_level_set_dns_server+0xe8>
            return;
  106410:	e320f000 	nop	{0}
        }
    }
}
  106414:	e24bd004 	sub	sp, fp, #4
  106418:	e8bd8800 	pop	{fp, pc}

0010641c <netdev_low_level_set_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new status
 */
void netdev_low_level_set_status(struct netdev *netdev, rt_bool_t is_up)
{
  10641c:	e92d4800 	push	{fp, lr}
  106420:	e28db004 	add	fp, sp, #4
  106424:	e24dd008 	sub	sp, sp, #8
  106428:	e50b0008 	str	r0, [fp, #-8]
  10642c:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_up(netdev) != is_up)
  106430:	e51b3008 	ldr	r3, [fp, #-8]
  106434:	e3530000 	cmp	r3, #0
  106438:	0a000024 	beq	1064d0 <netdev_low_level_set_status+0xb4>
  10643c:	e51b3008 	ldr	r3, [fp, #-8]
  106440:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106444:	e2033001 	and	r3, r3, #1
  106448:	e51b200c 	ldr	r2, [fp, #-12]
  10644c:	e1520003 	cmp	r2, r3
  106450:	0a00001e 	beq	1064d0 <netdev_low_level_set_status+0xb4>
    {
        if (is_up)
  106454:	e51b300c 	ldr	r3, [fp, #-12]
  106458:	e3530000 	cmp	r3, #0
  10645c:	0a000006 	beq	10647c <netdev_low_level_set_status+0x60>
        {
            netdev->flags |= NETDEV_FLAG_UP;
  106460:	e51b3008 	ldr	r3, [fp, #-8]
  106464:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106468:	e3833001 	orr	r3, r3, #1
  10646c:	e6ff2073 	uxth	r2, r3
  106470:	e51b3008 	ldr	r3, [fp, #-8]
  106474:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106478:	ea000005 	b	106494 <netdev_low_level_set_status+0x78>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_UP;
  10647c:	e51b3008 	ldr	r3, [fp, #-8]
  106480:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106484:	e3c33001 	bic	r3, r3, #1
  106488:	e6ff2073 	uxth	r2, r3
  10648c:	e51b3008 	ldr	r3, [fp, #-8]
  106490:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */
        }

        /* execute  network interface device status change callback function */
        if (netdev->status_callback)
  106494:	e51b3008 	ldr	r3, [fp, #-8]
  106498:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10649c:	e3530000 	cmp	r3, #0
  1064a0:	0a00000a 	beq	1064d0 <netdev_low_level_set_status+0xb4>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_UP : NETDEV_CB_STATUS_DOWN);
  1064a4:	e51b3008 	ldr	r3, [fp, #-8]
  1064a8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1064ac:	e51b200c 	ldr	r2, [fp, #-12]
  1064b0:	e3520000 	cmp	r2, #0
  1064b4:	0a000001 	beq	1064c0 <netdev_low_level_set_status+0xa4>
  1064b8:	e3a02004 	mov	r2, #4
  1064bc:	ea000000 	b	1064c4 <netdev_low_level_set_status+0xa8>
  1064c0:	e3a02005 	mov	r2, #5
  1064c4:	e1a01002 	mov	r1, r2
  1064c8:	e51b0008 	ldr	r0, [fp, #-8]
  1064cc:	e12fff33 	blx	r3
        }
    }
}
  1064d0:	e320f000 	nop	{0}
  1064d4:	e24bd004 	sub	sp, fp, #4
  1064d8:	e8bd8800 	pop	{fp, pc}

001064dc <netdev_low_level_set_link_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new link status
 */
void netdev_low_level_set_link_status(struct netdev *netdev, rt_bool_t is_up)
{
  1064dc:	e92d4800 	push	{fp, lr}
  1064e0:	e28db004 	add	fp, sp, #4
  1064e4:	e24dd008 	sub	sp, sp, #8
  1064e8:	e50b0008 	str	r0, [fp, #-8]
  1064ec:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_link_up(netdev) != is_up)
  1064f0:	e51b3008 	ldr	r3, [fp, #-8]
  1064f4:	e3530000 	cmp	r3, #0
  1064f8:	0a00003f 	beq	1065fc <netdev_low_level_set_link_status+0x120>
  1064fc:	e51b3008 	ldr	r3, [fp, #-8]
  106500:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106504:	e1a03123 	lsr	r3, r3, #2
  106508:	e2033001 	and	r3, r3, #1
  10650c:	e51b200c 	ldr	r2, [fp, #-12]
  106510:	e1520003 	cmp	r2, r3
  106514:	0a000038 	beq	1065fc <netdev_low_level_set_link_status+0x120>
    {
        if (is_up)
  106518:	e51b300c 	ldr	r3, [fp, #-12]
  10651c:	e3530000 	cmp	r3, #0
  106520:	0a00001a 	beq	106590 <netdev_low_level_set_link_status+0xb4>
        {
            netdev->flags |= NETDEV_FLAG_LINK_UP;
  106524:	e51b3008 	ldr	r3, [fp, #-8]
  106528:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10652c:	e3833004 	orr	r3, r3, #4
  106530:	e6ff2073 	uxth	r2, r3
  106534:	e51b3008 	ldr	r3, [fp, #-8]
  106538:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

#ifdef RT_USING_SAL
            /* set network interface device flags to internet up */
            if (netdev_is_up(netdev) && !ip_addr_isany(&(netdev->ip_addr)))
  10653c:	e51b3008 	ldr	r3, [fp, #-8]
  106540:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106544:	e2033001 	and	r3, r3, #1
  106548:	e6ef3073 	uxtb	r3, r3
  10654c:	e3530000 	cmp	r3, #0
  106550:	0a00001a 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
  106554:	e51b3008 	ldr	r3, [fp, #-8]
  106558:	e283300c 	add	r3, r3, #12
  10655c:	e3530000 	cmp	r3, #0
  106560:	0a000016 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
  106564:	e51b3008 	ldr	r3, [fp, #-8]
  106568:	e593300c 	ldr	r3, [r3, #12]
  10656c:	e3530000 	cmp	r3, #0
  106570:	0a000012 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
            {
                // sal_check_netdev_internet_up(netdev);
                // check_netdev_internet_up_work(netdev);
                netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  106574:	e51b3008 	ldr	r3, [fp, #-8]
  106578:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10657c:	e3833080 	orr	r3, r3, #128	; 0x80
  106580:	e6ff2073 	uxth	r2, r3
  106584:	e51b3008 	ldr	r3, [fp, #-8]
  106588:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  10658c:	ea00000b 	b	1065c0 <netdev_low_level_set_link_status+0xe4>
            }
#endif /* RT_USING_SAL */
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_LINK_UP;
  106590:	e51b3008 	ldr	r3, [fp, #-8]
  106594:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106598:	e3c33004 	bic	r3, r3, #4
  10659c:	e6ff2073 	uxth	r2, r3
  1065a0:	e51b3008 	ldr	r3, [fp, #-8]
  1065a4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

            /* set network interface device flags to internet down */
            netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  1065a8:	e51b3008 	ldr	r3, [fp, #-8]
  1065ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1065b0:	e3c33080 	bic	r3, r3, #128	; 0x80
  1065b4:	e6ff2073 	uxth	r2, r3
  1065b8:	e51b3008 	ldr	r3, [fp, #-8]
  1065bc:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            /* change to the first link_up network interface device automatically */
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */

        /* execute link status change callback function */
        if (netdev->status_callback)
  1065c0:	e51b3008 	ldr	r3, [fp, #-8]
  1065c4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1065c8:	e3530000 	cmp	r3, #0
  1065cc:	0a00000a 	beq	1065fc <netdev_low_level_set_link_status+0x120>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_LINK_UP : NETDEV_CB_STATUS_LINK_DOWN);
  1065d0:	e51b3008 	ldr	r3, [fp, #-8]
  1065d4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1065d8:	e51b200c 	ldr	r2, [fp, #-12]
  1065dc:	e3520000 	cmp	r2, #0
  1065e0:	0a000001 	beq	1065ec <netdev_low_level_set_link_status+0x110>
  1065e4:	e3a02006 	mov	r2, #6
  1065e8:	ea000000 	b	1065f0 <netdev_low_level_set_link_status+0x114>
  1065ec:	e3a02007 	mov	r2, #7
  1065f0:	e1a01002 	mov	r1, r2
  1065f4:	e51b0008 	ldr	r0, [fp, #-8]
  1065f8:	e12fff33 	blx	r3
        }
    }
}
  1065fc:	e320f000 	nop	{0}
  106600:	e24bd004 	sub	sp, fp, #4
  106604:	e8bd8800 	pop	{fp, pc}

00106608 <netdev_low_level_set_dhcp_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new DHCP status
 */
void netdev_low_level_set_dhcp_status(struct netdev *netdev, rt_bool_t is_enable)
{
  106608:	e92d4800 	push	{fp, lr}
  10660c:	e28db004 	add	fp, sp, #4
  106610:	e24dd008 	sub	sp, sp, #8
  106614:	e50b0008 	str	r0, [fp, #-8]
  106618:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_dhcp_enabled(netdev) != is_enable)
  10661c:	e51b3008 	ldr	r3, [fp, #-8]
  106620:	e3530000 	cmp	r3, #0
  106624:	0a000025 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
  106628:	e51b3008 	ldr	r3, [fp, #-8]
  10662c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106630:	e1a03423 	lsr	r3, r3, #8
  106634:	e2033001 	and	r3, r3, #1
  106638:	e51b200c 	ldr	r2, [fp, #-12]
  10663c:	e1520003 	cmp	r2, r3
  106640:	0a00001e 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
    {
        if (is_enable)
  106644:	e51b300c 	ldr	r3, [fp, #-12]
  106648:	e3530000 	cmp	r3, #0
  10664c:	0a000006 	beq	10666c <netdev_low_level_set_dhcp_status+0x64>
        {
            netdev->flags |= NETDEV_FLAG_DHCP;
  106650:	e51b3008 	ldr	r3, [fp, #-8]
  106654:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106658:	e3833c01 	orr	r3, r3, #256	; 0x100
  10665c:	e6ff2073 	uxth	r2, r3
  106660:	e51b3008 	ldr	r3, [fp, #-8]
  106664:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106668:	ea000005 	b	106684 <netdev_low_level_set_dhcp_status+0x7c>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_DHCP;
  10666c:	e51b3008 	ldr	r3, [fp, #-8]
  106670:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106674:	e3c33c01 	bic	r3, r3, #256	; 0x100
  106678:	e6ff2073 	uxth	r2, r3
  10667c:	e51b3008 	ldr	r3, [fp, #-8]
  106680:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }

        /* execute DHCP status change callback function */
        if (netdev->status_callback)
  106684:	e51b3008 	ldr	r3, [fp, #-8]
  106688:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10668c:	e3530000 	cmp	r3, #0
  106690:	0a00000a 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
        {
            netdev->status_callback(netdev, is_enable ? NETDEV_CB_STATUS_DHCP_ENABLE : NETDEV_CB_STATUS_DHCP_DISABLE);
  106694:	e51b3008 	ldr	r3, [fp, #-8]
  106698:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10669c:	e51b200c 	ldr	r2, [fp, #-12]
  1066a0:	e3520000 	cmp	r2, #0
  1066a4:	0a000001 	beq	1066b0 <netdev_low_level_set_dhcp_status+0xa8>
  1066a8:	e3a0200a 	mov	r2, #10
  1066ac:	ea000000 	b	1066b4 <netdev_low_level_set_dhcp_status+0xac>
  1066b0:	e3a0200b 	mov	r2, #11
  1066b4:	e1a01002 	mov	r1, r2
  1066b8:	e51b0008 	ldr	r0, [fp, #-8]
  1066bc:	e12fff33 	blx	r3
        }
    }
}
  1066c0:	e320f000 	nop	{0}
  1066c4:	e24bd004 	sub	sp, fp, #4
  1066c8:	e8bd8800 	pop	{fp, pc}

001066cc <netdev_ip4addr_aton>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int netdev_ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  1066cc:	e92d4800 	push	{fp, lr}
  1066d0:	e28db004 	add	fp, sp, #4
  1066d4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1066d8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1066dc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    uint32_t val;
    uint8_t base;
    char c;
    uint32_t parts[4];
    uint32_t *pp = parts;
  1066e0:	e24b3020 	sub	r3, fp, #32
  1066e4:	e50b3010 	str	r3, [fp, #-16]

    c = *cp;
  1066e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1066ec:	e5d33000 	ldrb	r3, [r3]
  1066f0:	e54b300a 	strb	r3, [fp, #-10]
        /*
         * Collect number up to ``.''.
         * Values are specified as for C:
         * 0x=hex, 0=octal, 1-9=decimal.
         */
        if (!isdigit(c))
  1066f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1066f8:	e353002f 	cmp	r3, #47	; 0x2f
  1066fc:	9a000002 	bls	10670c <netdev_ip4addr_aton+0x40>
  106700:	e55b300a 	ldrb	r3, [fp, #-10]
  106704:	e3530039 	cmp	r3, #57	; 0x39
  106708:	9a000001 	bls	106714 <netdev_ip4addr_aton+0x48>
        {
            return 0;
  10670c:	e3a03000 	mov	r3, #0
  106710:	ea0000f7 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val = 0;
  106714:	e3a03000 	mov	r3, #0
  106718:	e50b3008 	str	r3, [fp, #-8]
        base = 10;
  10671c:	e3a0300a 	mov	r3, #10
  106720:	e54b3009 	strb	r3, [fp, #-9]
        if (c == '0')
  106724:	e55b300a 	ldrb	r3, [fp, #-10]
  106728:	e3530030 	cmp	r3, #48	; 0x30
  10672c:	1a000016 	bne	10678c <netdev_ip4addr_aton+0xc0>
        {
            c = *++cp;
  106730:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106734:	e2833001 	add	r3, r3, #1
  106738:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  10673c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106740:	e5d33000 	ldrb	r3, [r3]
  106744:	e54b300a 	strb	r3, [fp, #-10]
            if (c == 'x' || c == 'X')
  106748:	e55b300a 	ldrb	r3, [fp, #-10]
  10674c:	e3530078 	cmp	r3, #120	; 0x78
  106750:	0a000002 	beq	106760 <netdev_ip4addr_aton+0x94>
  106754:	e55b300a 	ldrb	r3, [fp, #-10]
  106758:	e3530058 	cmp	r3, #88	; 0x58
  10675c:	1a000008 	bne	106784 <netdev_ip4addr_aton+0xb8>
            {
                base = 16;
  106760:	e3a03010 	mov	r3, #16
  106764:	e54b3009 	strb	r3, [fp, #-9]
                c = *++cp;
  106768:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10676c:	e2833001 	add	r3, r3, #1
  106770:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  106774:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106778:	e5d33000 	ldrb	r3, [r3]
  10677c:	e54b300a 	strb	r3, [fp, #-10]
  106780:	ea000001 	b	10678c <netdev_ip4addr_aton+0xc0>
            }
            else
            {
                base = 8;
  106784:	e3a03008 	mov	r3, #8
  106788:	e54b3009 	strb	r3, [fp, #-9]
            }
        }
        for (;;)
        {
            if (isdigit(c))
  10678c:	e55b300a 	ldrb	r3, [fp, #-10]
  106790:	e353002f 	cmp	r3, #47	; 0x2f
  106794:	9a000010 	bls	1067dc <netdev_ip4addr_aton+0x110>
  106798:	e55b300a 	ldrb	r3, [fp, #-10]
  10679c:	e3530039 	cmp	r3, #57	; 0x39
  1067a0:	8a00000d 	bhi	1067dc <netdev_ip4addr_aton+0x110>
            {
                val = (val * base) + (uint32_t) (c - '0');
  1067a4:	e55b3009 	ldrb	r3, [fp, #-9]
  1067a8:	e51b2008 	ldr	r2, [fp, #-8]
  1067ac:	e0020392 	mul	r2, r2, r3
  1067b0:	e55b300a 	ldrb	r3, [fp, #-10]
  1067b4:	e0823003 	add	r3, r2, r3
  1067b8:	e2433030 	sub	r3, r3, #48	; 0x30
  1067bc:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  1067c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1067c4:	e2833001 	add	r3, r3, #1
  1067c8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1067cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1067d0:	e5d33000 	ldrb	r3, [r3]
  1067d4:	e54b300a 	strb	r3, [fp, #-10]
  1067d8:	ea00002a 	b	106888 <netdev_ip4addr_aton+0x1bc>
            }
            else if (base == 16 && isxdigit(c))
  1067dc:	e55b3009 	ldrb	r3, [fp, #-9]
  1067e0:	e3530010 	cmp	r3, #16
  1067e4:	1a000028 	bne	10688c <netdev_ip4addr_aton+0x1c0>
  1067e8:	e55b300a 	ldrb	r3, [fp, #-10]
  1067ec:	e353002f 	cmp	r3, #47	; 0x2f
  1067f0:	9a000002 	bls	106800 <netdev_ip4addr_aton+0x134>
  1067f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1067f8:	e3530039 	cmp	r3, #57	; 0x39
  1067fc:	9a00000b 	bls	106830 <netdev_ip4addr_aton+0x164>
  106800:	e55b300a 	ldrb	r3, [fp, #-10]
  106804:	e3530060 	cmp	r3, #96	; 0x60
  106808:	9a000002 	bls	106818 <netdev_ip4addr_aton+0x14c>
  10680c:	e55b300a 	ldrb	r3, [fp, #-10]
  106810:	e3530066 	cmp	r3, #102	; 0x66
  106814:	9a000005 	bls	106830 <netdev_ip4addr_aton+0x164>
  106818:	e55b300a 	ldrb	r3, [fp, #-10]
  10681c:	e3530040 	cmp	r3, #64	; 0x40
  106820:	9a000019 	bls	10688c <netdev_ip4addr_aton+0x1c0>
  106824:	e55b300a 	ldrb	r3, [fp, #-10]
  106828:	e3530046 	cmp	r3, #70	; 0x46
  10682c:	8a000016 	bhi	10688c <netdev_ip4addr_aton+0x1c0>
            {
                val = (val << 4) | (uint32_t) (c + 10 - (islower(c) ? 'a' : 'A'));
  106830:	e51b3008 	ldr	r3, [fp, #-8]
  106834:	e1a03203 	lsl	r3, r3, #4
  106838:	e55b200a 	ldrb	r2, [fp, #-10]
  10683c:	e282100a 	add	r1, r2, #10
  106840:	e55b200a 	ldrb	r2, [fp, #-10]
  106844:	e3520060 	cmp	r2, #96	; 0x60
  106848:	9a000004 	bls	106860 <netdev_ip4addr_aton+0x194>
  10684c:	e55b200a 	ldrb	r2, [fp, #-10]
  106850:	e352007a 	cmp	r2, #122	; 0x7a
  106854:	8a000001 	bhi	106860 <netdev_ip4addr_aton+0x194>
  106858:	e3a02061 	mov	r2, #97	; 0x61
  10685c:	ea000000 	b	106864 <netdev_ip4addr_aton+0x198>
  106860:	e3a02041 	mov	r2, #65	; 0x41
  106864:	e0412002 	sub	r2, r1, r2
  106868:	e1833002 	orr	r3, r3, r2
  10686c:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  106870:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106874:	e2833001 	add	r3, r3, #1
  106878:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  10687c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106880:	e5d33000 	ldrb	r3, [r3]
  106884:	e54b300a 	strb	r3, [fp, #-10]
            if (isdigit(c))
  106888:	eaffffbf 	b	10678c <netdev_ip4addr_aton+0xc0>
            else
            {
                break;
            }
        }
        if (c == '.')
  10688c:	e55b300a 	ldrb	r3, [fp, #-10]
  106890:	e353002e 	cmp	r3, #46	; 0x2e
  106894:	1a000012 	bne	1068e4 <netdev_ip4addr_aton+0x218>
             * Internet format:
             *  a.b.c.d
             *  a.b.c   (with c treated as 16 bits)
             *  a.b (with b treated as 24 bits)
             */
            if (pp >= parts + 3)
  106898:	e24b3020 	sub	r3, fp, #32
  10689c:	e283300c 	add	r3, r3, #12
  1068a0:	e51b2010 	ldr	r2, [fp, #-16]
  1068a4:	e1520003 	cmp	r2, r3
  1068a8:	3a000001 	bcc	1068b4 <netdev_ip4addr_aton+0x1e8>
            {
                return 0;
  1068ac:	e3a03000 	mov	r3, #0
  1068b0:	ea00008f 	b	106af4 <netdev_ip4addr_aton+0x428>
            }
            *pp++ = val;
  1068b4:	e51b3010 	ldr	r3, [fp, #-16]
  1068b8:	e2832004 	add	r2, r3, #4
  1068bc:	e50b2010 	str	r2, [fp, #-16]
  1068c0:	e51b2008 	ldr	r2, [fp, #-8]
  1068c4:	e5832000 	str	r2, [r3]
            c = *++cp;
  1068c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1068cc:	e2833001 	add	r3, r3, #1
  1068d0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1068d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1068d8:	e5d33000 	ldrb	r3, [r3]
  1068dc:	e54b300a 	strb	r3, [fp, #-10]
        if (!isdigit(c))
  1068e0:	eaffff83 	b	1066f4 <netdev_ip4addr_aton+0x28>
        }
        else
        {
            break;
  1068e4:	e320f000 	nop	{0}
        }
    }
    /*
     * Check for trailing characters.
     */
    if (c != '\0' && !isspace(c))
  1068e8:	e55b300a 	ldrb	r3, [fp, #-10]
  1068ec:	e3530000 	cmp	r3, #0
  1068f0:	0a000013 	beq	106944 <netdev_ip4addr_aton+0x278>
  1068f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1068f8:	e3530020 	cmp	r3, #32
  1068fc:	0a000010 	beq	106944 <netdev_ip4addr_aton+0x278>
  106900:	e55b300a 	ldrb	r3, [fp, #-10]
  106904:	e353000c 	cmp	r3, #12
  106908:	0a00000d 	beq	106944 <netdev_ip4addr_aton+0x278>
  10690c:	e55b300a 	ldrb	r3, [fp, #-10]
  106910:	e353000a 	cmp	r3, #10
  106914:	0a00000a 	beq	106944 <netdev_ip4addr_aton+0x278>
  106918:	e55b300a 	ldrb	r3, [fp, #-10]
  10691c:	e353000d 	cmp	r3, #13
  106920:	0a000007 	beq	106944 <netdev_ip4addr_aton+0x278>
  106924:	e55b300a 	ldrb	r3, [fp, #-10]
  106928:	e3530009 	cmp	r3, #9
  10692c:	0a000004 	beq	106944 <netdev_ip4addr_aton+0x278>
  106930:	e55b300a 	ldrb	r3, [fp, #-10]
  106934:	e353000b 	cmp	r3, #11
  106938:	0a000001 	beq	106944 <netdev_ip4addr_aton+0x278>
    {
        return 0;
  10693c:	e3a03000 	mov	r3, #0
  106940:	ea00006b 	b	106af4 <netdev_ip4addr_aton+0x428>
    }
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
    switch (pp - parts + 1)
  106944:	e51b2010 	ldr	r2, [fp, #-16]
  106948:	e24b3020 	sub	r3, fp, #32
  10694c:	e0423003 	sub	r3, r2, r3
  106950:	e1a03143 	asr	r3, r3, #2
  106954:	e2833001 	add	r3, r3, #1
  106958:	e3530004 	cmp	r3, #4
  10695c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  106960:	ea000048 	b	106a88 <netdev_ip4addr_aton+0x3bc>
  106964:	00106978 	.word	0x00106978
  106968:	00106aa4 	.word	0x00106aa4
  10696c:	00106980 	.word	0x00106980
  106970:	001069c0 	.word	0x001069c0
  106974:	00106a18 	.word	0x00106a18
    {

    case 0:
        return 0; /* initial nondigit */
  106978:	e3a03000 	mov	r3, #0
  10697c:	ea00005c 	b	106af4 <netdev_ip4addr_aton+0x428>

    case 1: /* a -- 32 bits */
        break;

    case 2: /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
  106980:	e51b3008 	ldr	r3, [fp, #-8]
  106984:	e3530401 	cmp	r3, #16777216	; 0x1000000
  106988:	3a000001 	bcc	106994 <netdev_ip4addr_aton+0x2c8>
        {
            return 0;
  10698c:	e3a03000 	mov	r3, #0
  106990:	ea000057 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if (parts[0] > 0xff)
  106994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106998:	e35300ff 	cmp	r3, #255	; 0xff
  10699c:	9a000001 	bls	1069a8 <netdev_ip4addr_aton+0x2dc>
        {
            return 0;
  1069a0:	e3a03000 	mov	r3, #0
  1069a4:	ea000052 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= parts[0] << 24;
  1069a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069ac:	e1a03c03 	lsl	r3, r3, #24
  1069b0:	e51b2008 	ldr	r2, [fp, #-8]
  1069b4:	e1823003 	orr	r3, r2, r3
  1069b8:	e50b3008 	str	r3, [fp, #-8]
        break;
  1069bc:	ea000039 	b	106aa8 <netdev_ip4addr_aton+0x3dc>

    case 3: /* a.b.c -- 8.8.16 bits */
        if (val > 0xffff)
  1069c0:	e51b3008 	ldr	r3, [fp, #-8]
  1069c4:	e3530801 	cmp	r3, #65536	; 0x10000
  1069c8:	3a000001 	bcc	1069d4 <netdev_ip4addr_aton+0x308>
        {
            return 0;
  1069cc:	e3a03000 	mov	r3, #0
  1069d0:	ea000047 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff))
  1069d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069d8:	e35300ff 	cmp	r3, #255	; 0xff
  1069dc:	8a000002 	bhi	1069ec <netdev_ip4addr_aton+0x320>
  1069e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1069e4:	e35300ff 	cmp	r3, #255	; 0xff
  1069e8:	9a000001 	bls	1069f4 <netdev_ip4addr_aton+0x328>
        {
            return 0;
  1069ec:	e3a03000 	mov	r3, #0
  1069f0:	ea00003f 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16);
  1069f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069f8:	e1a02c03 	lsl	r2, r3, #24
  1069fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a00:	e1a03803 	lsl	r3, r3, #16
  106a04:	e1823003 	orr	r3, r2, r3
  106a08:	e51b2008 	ldr	r2, [fp, #-8]
  106a0c:	e1823003 	orr	r3, r2, r3
  106a10:	e50b3008 	str	r3, [fp, #-8]
        break;
  106a14:	ea000023 	b	106aa8 <netdev_ip4addr_aton+0x3dc>

    case 4: /* a.b.c.d -- 8.8.8.8 bits */
        if (val > 0xff)
  106a18:	e51b3008 	ldr	r3, [fp, #-8]
  106a1c:	e35300ff 	cmp	r3, #255	; 0xff
  106a20:	9a000001 	bls	106a2c <netdev_ip4addr_aton+0x360>
        {
            return 0;
  106a24:	e3a03000 	mov	r3, #0
  106a28:	ea000031 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff))
  106a2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a30:	e35300ff 	cmp	r3, #255	; 0xff
  106a34:	8a000005 	bhi	106a50 <netdev_ip4addr_aton+0x384>
  106a38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a3c:	e35300ff 	cmp	r3, #255	; 0xff
  106a40:	8a000002 	bhi	106a50 <netdev_ip4addr_aton+0x384>
  106a44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106a48:	e35300ff 	cmp	r3, #255	; 0xff
  106a4c:	9a000001 	bls	106a58 <netdev_ip4addr_aton+0x38c>
        {
            return 0;
  106a50:	e3a03000 	mov	r3, #0
  106a54:	ea000026 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  106a58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a5c:	e1a02c03 	lsl	r2, r3, #24
  106a60:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a64:	e1a03803 	lsl	r3, r3, #16
  106a68:	e1822003 	orr	r2, r2, r3
  106a6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106a70:	e1a03403 	lsl	r3, r3, #8
  106a74:	e1823003 	orr	r3, r2, r3
  106a78:	e51b2008 	ldr	r2, [fp, #-8]
  106a7c:	e1823003 	orr	r3, r2, r3
  106a80:	e50b3008 	str	r3, [fp, #-8]
        break;
  106a84:	ea000007 	b	106aa8 <netdev_ip4addr_aton+0x3dc>
    default:
        RT_ASSERT(0);
  106a88:	e3a020a7 	mov	r2, #167	; 0xa7
  106a8c:	e3051f0c 	movw	r1, #24332	; 0x5f0c
  106a90:	e3401014 	movt	r1, #20
  106a94:	e3050f08 	movw	r0, #24328	; 0x5f08
  106a98:	e3400014 	movt	r0, #20
  106a9c:	ebfff2bd 	bl	103598 <rt_assert_handler>
        break;
  106aa0:	ea000000 	b	106aa8 <netdev_ip4addr_aton+0x3dc>
        break;
  106aa4:	e320f000 	nop	{0}
    }
    if (addr)
  106aa8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106aac:	e3530000 	cmp	r3, #0
  106ab0:	0a00000e 	beq	106af0 <netdev_ip4addr_aton+0x424>
    {
        ip4_addr_set_u32(addr, htonl(val));
  106ab4:	e51b3008 	ldr	r3, [fp, #-8]
  106ab8:	e1a02c03 	lsl	r2, r3, #24
  106abc:	e51b3008 	ldr	r3, [fp, #-8]
  106ac0:	e1a03403 	lsl	r3, r3, #8
  106ac4:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  106ac8:	e1822003 	orr	r2, r2, r3
  106acc:	e51b3008 	ldr	r3, [fp, #-8]
  106ad0:	e1a03423 	lsr	r3, r3, #8
  106ad4:	e2033cff 	and	r3, r3, #65280	; 0xff00
  106ad8:	e1822003 	orr	r2, r2, r3
  106adc:	e51b3008 	ldr	r3, [fp, #-8]
  106ae0:	e1a03c23 	lsr	r3, r3, #24
  106ae4:	e1822003 	orr	r2, r2, r3
  106ae8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106aec:	e5832000 	str	r2, [r3]
    }
    return 1;
  106af0:	e3a03001 	mov	r3, #1
}
  106af4:	e1a00003 	mov	r0, r3
  106af8:	e24bd004 	sub	sp, fp, #4
  106afc:	e8bd8800 	pop	{fp, pc}

00106b00 <netdev_ip4addr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *netdev_ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  106b00:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  106b04:	e28db000 	add	fp, sp, #0
  106b08:	e24dd034 	sub	sp, sp, #52	; 0x34
  106b0c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  106b10:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  106b14:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    char *rp;
    uint8_t *ap;
    uint8_t rem;
    uint8_t n;
    uint8_t i;
    int len = 0;
  106b18:	e3a03000 	mov	r3, #0
  106b1c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    s_addr = ip4_addr_get_u32(addr);
  106b20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106b24:	e5933000 	ldr	r3, [r3]
  106b28:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    rp = buf;
  106b2c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106b30:	e50b3008 	str	r3, [fp, #-8]
    ap = (uint8_t *) &s_addr;
  106b34:	e24b301c 	sub	r3, fp, #28
  106b38:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  106b3c:	e3a03000 	mov	r3, #0
  106b40:	e54b300d 	strb	r3, [fp, #-13]
  106b44:	ea00004b 	b	106c78 <netdev_ip4addr_ntoa_r+0x178>
    {
        i = 0;
  106b48:	e3a03000 	mov	r3, #0
  106b4c:	e54b300e 	strb	r3, [fp, #-14]
        do
        {
            rem = *ap % (uint8_t) 10;
  106b50:	e51b300c 	ldr	r3, [fp, #-12]
  106b54:	e5d31000 	ldrb	r1, [r3]
  106b58:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  106b5c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106b60:	e0832391 	umull	r2, r3, r1, r3
  106b64:	e1a031a3 	lsr	r3, r3, #3
  106b68:	e3a0200a 	mov	r2, #10
  106b6c:	e0030392 	mul	r3, r2, r3
  106b70:	e0413003 	sub	r3, r1, r3
  106b74:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            *ap /= (uint8_t) 10;
  106b78:	e51b300c 	ldr	r3, [fp, #-12]
  106b7c:	e5d32000 	ldrb	r2, [r3]
  106b80:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  106b84:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106b88:	e0832392 	umull	r2, r3, r2, r3
  106b8c:	e1a031a3 	lsr	r3, r3, #3
  106b90:	e6ef2073 	uxtb	r2, r3
  106b94:	e51b300c 	ldr	r3, [fp, #-12]
  106b98:	e5c32000 	strb	r2, [r3]
            inv[i++] = (char) ('0' + rem);
  106b9c:	e55b300e 	ldrb	r3, [fp, #-14]
  106ba0:	e2832001 	add	r2, r3, #1
  106ba4:	e54b200e 	strb	r2, [fp, #-14]
  106ba8:	e1a01003 	mov	r1, r3
  106bac:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  106bb0:	e2833030 	add	r3, r3, #48	; 0x30
  106bb4:	e6ef2073 	uxtb	r2, r3
  106bb8:	e24b3004 	sub	r3, fp, #4
  106bbc:	e0833001 	add	r3, r3, r1
  106bc0:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
        } while (*ap);
  106bc4:	e51b300c 	ldr	r3, [fp, #-12]
  106bc8:	e5d33000 	ldrb	r3, [r3]
  106bcc:	e3530000 	cmp	r3, #0
  106bd0:	1affffde 	bne	106b50 <netdev_ip4addr_ntoa_r+0x50>
        while (i--)
  106bd4:	ea00000f 	b	106c18 <netdev_ip4addr_ntoa_r+0x118>
        {
            if (len++ >= buflen)
  106bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106bdc:	e2832001 	add	r2, r3, #1
  106be0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  106be4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  106be8:	e1520003 	cmp	r2, r3
  106bec:	ca000001 	bgt	106bf8 <netdev_ip4addr_ntoa_r+0xf8>
            {
                return NULL;
  106bf0:	e3a03000 	mov	r3, #0
  106bf4:	ea000029 	b	106ca0 <netdev_ip4addr_ntoa_r+0x1a0>
            }
            *rp++ = inv[i];
  106bf8:	e55b200e 	ldrb	r2, [fp, #-14]
  106bfc:	e51b3008 	ldr	r3, [fp, #-8]
  106c00:	e2831001 	add	r1, r3, #1
  106c04:	e50b1008 	str	r1, [fp, #-8]
  106c08:	e24b1004 	sub	r1, fp, #4
  106c0c:	e0812002 	add	r2, r1, r2
  106c10:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  106c14:	e5c32000 	strb	r2, [r3]
        while (i--)
  106c18:	e55b300e 	ldrb	r3, [fp, #-14]
  106c1c:	e2432001 	sub	r2, r3, #1
  106c20:	e54b200e 	strb	r2, [fp, #-14]
  106c24:	e3530000 	cmp	r3, #0
  106c28:	1affffea 	bne	106bd8 <netdev_ip4addr_ntoa_r+0xd8>
        }
        if (len++ >= buflen)
  106c2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106c30:	e2832001 	add	r2, r3, #1
  106c34:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  106c38:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  106c3c:	e1520003 	cmp	r2, r3
  106c40:	ca000001 	bgt	106c4c <netdev_ip4addr_ntoa_r+0x14c>
        {
            return NULL;
  106c44:	e3a03000 	mov	r3, #0
  106c48:	ea000014 	b	106ca0 <netdev_ip4addr_ntoa_r+0x1a0>
        }
        *rp++ = '.';
  106c4c:	e51b3008 	ldr	r3, [fp, #-8]
  106c50:	e2832001 	add	r2, r3, #1
  106c54:	e50b2008 	str	r2, [fp, #-8]
  106c58:	e3a0202e 	mov	r2, #46	; 0x2e
  106c5c:	e5c32000 	strb	r2, [r3]
        ap++;
  106c60:	e51b300c 	ldr	r3, [fp, #-12]
  106c64:	e2833001 	add	r3, r3, #1
  106c68:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  106c6c:	e55b300d 	ldrb	r3, [fp, #-13]
  106c70:	e2833001 	add	r3, r3, #1
  106c74:	e54b300d 	strb	r3, [fp, #-13]
  106c78:	e55b300d 	ldrb	r3, [fp, #-13]
  106c7c:	e3530003 	cmp	r3, #3
  106c80:	9affffb0 	bls	106b48 <netdev_ip4addr_ntoa_r+0x48>
    }
    *--rp = 0;
  106c84:	e51b3008 	ldr	r3, [fp, #-8]
  106c88:	e2433001 	sub	r3, r3, #1
  106c8c:	e50b3008 	str	r3, [fp, #-8]
  106c90:	e51b3008 	ldr	r3, [fp, #-8]
  106c94:	e3a02000 	mov	r2, #0
  106c98:	e5c32000 	strb	r2, [r3]
    return buf;
  106c9c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  106ca0:	e1a00003 	mov	r0, r3
  106ca4:	e28bd000 	add	sp, fp, #0
  106ca8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  106cac:	e12fff1e 	bx	lr

00106cb0 <netdev_ip4addr_ntoa>:
 * @param addr ip address in network order to convert
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *netdev_ip4addr_ntoa(const ip4_addr_t *addr)
{
  106cb0:	e92d4800 	push	{fp, lr}
  106cb4:	e28db004 	add	fp, sp, #4
  106cb8:	e24dd008 	sub	sp, sp, #8
  106cbc:	e50b0008 	str	r0, [fp, #-8]
    static char str[IP4ADDR_STRLEN_MAX];
    return netdev_ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  106cc0:	e3a02010 	mov	r2, #16
  106cc4:	e30d1450 	movw	r1, #54352	; 0xd450
  106cc8:	e3401014 	movt	r1, #20
  106ccc:	e51b0008 	ldr	r0, [fp, #-8]
  106cd0:	ebffff8a 	bl	106b00 <netdev_ip4addr_ntoa_r>
  106cd4:	e1a03000 	mov	r3, r0
}
  106cd8:	e1a00003 	mov	r0, r3
  106cdc:	e24bd004 	sub	sp, fp, #4
  106ce0:	e8bd8800 	pop	{fp, pc}

00106ce4 <netdev_ipaddr_addr>:
 *
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
in_addr_t netdev_ipaddr_addr(const char *cp)
{
  106ce4:	e92d4800 	push	{fp, lr}
  106ce8:	e28db004 	add	fp, sp, #4
  106cec:	e24dd010 	sub	sp, sp, #16
  106cf0:	e50b0010 	str	r0, [fp, #-16]
    ip4_addr_t val;

    if (netdev_ip4addr_aton(cp, &val)) {
  106cf4:	e24b3008 	sub	r3, fp, #8
  106cf8:	e1a01003 	mov	r1, r3
  106cfc:	e51b0010 	ldr	r0, [fp, #-16]
  106d00:	ebfffe71 	bl	1066cc <netdev_ip4addr_aton>
  106d04:	e1a03000 	mov	r3, r0
  106d08:	e3530000 	cmp	r3, #0
  106d0c:	0a000001 	beq	106d18 <netdev_ipaddr_addr+0x34>
        return ip4_addr_get_u32(&val);
  106d10:	e51b3008 	ldr	r3, [fp, #-8]
  106d14:	ea000000 	b	106d1c <netdev_ipaddr_addr+0x38>
    }
    return (IPADDR_NONE);
  106d18:	e3e03000 	mvn	r3, #0
}
  106d1c:	e1a00003 	mov	r0, r3
  106d20:	e24bd004 	sub	sp, fp, #4
  106d24:	e8bd8800 	pop	{fp, pc}

00106d28 <netdev_inet_ntop>:

#endif /* NETDEV_IPV6 */

const char *
netdev_inet_ntop(int af, const void *src, char *dst, int32_t size)
{
  106d28:	e92d4800 	push	{fp, lr}
  106d2c:	e28db004 	add	fp, sp, #4
  106d30:	e24dd018 	sub	sp, sp, #24
  106d34:	e50b0010 	str	r0, [fp, #-16]
  106d38:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  106d3c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  106d40:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#define AF_INET         2
#define AF_INET6        10

    const char *ret = NULL;
  106d44:	e3a03000 	mov	r3, #0
  106d48:	e50b3008 	str	r3, [fp, #-8]
    int size_int = (int)size;
  106d4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106d50:	e50b300c 	str	r3, [fp, #-12]
    if (size_int < 0)
  106d54:	e51b300c 	ldr	r3, [fp, #-12]
  106d58:	e3530000 	cmp	r3, #0
  106d5c:	aa000001 	bge	106d68 <netdev_inet_ntop+0x40>
    {
        return NULL;
  106d60:	e3a03000 	mov	r3, #0
  106d64:	ea00000a 	b	106d94 <netdev_inet_ntop+0x6c>
    }
    switch (af)
  106d68:	e51b3010 	ldr	r3, [fp, #-16]
  106d6c:	e3530002 	cmp	r3, #2
  106d70:	0a000002 	beq	106d80 <netdev_inet_ntop+0x58>
#if NETDEV_IPV6
    case AF_INET6:
        return netdev_ip6addr_ntoa_r((const ip6_addr_t *)src, dst, size_int);
#endif
    default:
        break;
  106d74:	e320f000 	nop	{0}
    }
    return ret;
  106d78:	e51b3008 	ldr	r3, [fp, #-8]
  106d7c:	ea000004 	b	106d94 <netdev_inet_ntop+0x6c>
        return netdev_ip4addr_ntoa_r((const ip4_addr_t *)src, dst, size_int);
  106d80:	e51b200c 	ldr	r2, [fp, #-12]
  106d84:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106d88:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106d8c:	ebffff5b 	bl	106b00 <netdev_ip4addr_ntoa_r>
  106d90:	e1a03000 	mov	r3, r0
}
  106d94:	e1a00003 	mov	r0, r3
  106d98:	e24bd004 	sub	sp, fp, #4
  106d9c:	e8bd8800 	pop	{fp, pc}

00106da0 <netdev_inet_pton>:

int
netdev_inet_pton(int af, const char *src, void *dst)
{
  106da0:	e92d4800 	push	{fp, lr}
  106da4:	e28db004 	add	fp, sp, #4
  106da8:	e24dd018 	sub	sp, sp, #24
  106dac:	e50b0010 	str	r0, [fp, #-16]
  106db0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  106db4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
#define AF_INET         2
#define AF_INET6        10

    int err;
    switch (af)
  106db8:	e51b3010 	ldr	r3, [fp, #-16]
  106dbc:	e3530002 	cmp	r3, #2
  106dc0:	1a000004 	bne	106dd8 <netdev_inet_pton+0x38>
    {
#if NETDEV_IPV4
    case AF_INET:
        err = netdev_ip4addr_aton(src, (ip4_addr_t *)dst);
  106dc4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106dc8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106dcc:	ebfffe3e 	bl	1066cc <netdev_ip4addr_aton>
  106dd0:	e50b0008 	str	r0, [fp, #-8]
        break;
  106dd4:	ea000002 	b	106de4 <netdev_inet_pton+0x44>
        }
        break;
    }
#endif
    default:
        err = -1;
  106dd8:	e3e03000 	mvn	r3, #0
  106ddc:	e50b3008 	str	r3, [fp, #-8]
        break;
  106de0:	e320f000 	nop	{0}
    }
    return err;
  106de4:	e51b3008 	ldr	r3, [fp, #-8]
}
  106de8:	e1a00003 	mov	r0, r3
  106dec:	e24bd004 	sub	sp, fp, #4
  106df0:	e8bd8800 	pop	{fp, pc}

00106df4 <sal_init>:
 *
 * @return result  0: initialize success
 *                -1: initialize failed
 */
int sal_init(void)
{
  106df4:	e92d4800 	push	{fp, lr}
  106df8:	e28db004 	add	fp, sp, #4
  106dfc:	e24dd008 	sub	sp, sp, #8
    int cn;

    if (init_ok)
  106e00:	e30d3490 	movw	r3, #54416	; 0xd490
  106e04:	e3403014 	movt	r3, #20
  106e08:	e5933000 	ldr	r3, [r3]
  106e0c:	e3530000 	cmp	r3, #0
  106e10:	0a000001 	beq	106e1c <sal_init+0x28>
    {
        LOG_D("Socket Abstraction Layer is already initialized.");
        return 0;
  106e14:	e3a03000 	mov	r3, #0
  106e18:	ea000032 	b	106ee8 <sal_init+0xf4>
    }

    /* init sal socket table */
    cn = SOCKET_TABLE_STEP_LEN < SAL_SOCKETS_NUM ? SOCKET_TABLE_STEP_LEN : SAL_SOCKETS_NUM;
  106e1c:	e3a03004 	mov	r3, #4
  106e20:	e50b3008 	str	r3, [fp, #-8]
    socket_table.max_socket = cn;
  106e24:	e51b2008 	ldr	r2, [fp, #-8]
  106e28:	e30d3460 	movw	r3, #54368	; 0xd460
  106e2c:	e3403014 	movt	r3, #20
  106e30:	e5832000 	str	r2, [r3]
    socket_table.sockets = rt_calloc(1, cn * sizeof(struct sal_socket *));
  106e34:	e51b3008 	ldr	r3, [fp, #-8]
  106e38:	e1a03103 	lsl	r3, r3, #2
  106e3c:	e1a01003 	mov	r1, r3
  106e40:	e3a00001 	mov	r0, #1
  106e44:	ebfff070 	bl	10300c <rt_calloc>
  106e48:	e1a02000 	mov	r2, r0
  106e4c:	e30d3460 	movw	r3, #54368	; 0xd460
  106e50:	e3403014 	movt	r3, #20
  106e54:	e5832004 	str	r2, [r3, #4]
    if (socket_table.sockets == RT_NULL)
  106e58:	e30d3460 	movw	r3, #54368	; 0xd460
  106e5c:	e3403014 	movt	r3, #20
  106e60:	e5933004 	ldr	r3, [r3, #4]
  106e64:	e3530000 	cmp	r3, #0
  106e68:	1a00000a 	bne	106e98 <sal_init+0xa4>
    {
        LOG_E("No memory for socket table.\n");
  106e6c:	e3050f20 	movw	r0, #24352	; 0x5f20
  106e70:	e3400014 	movt	r0, #20
  106e74:	ebfff0a6 	bl	103114 <rt_kprintf>
  106e78:	e3050f34 	movw	r0, #24372	; 0x5f34
  106e7c:	e3400014 	movt	r0, #20
  106e80:	ebfff0a3 	bl	103114 <rt_kprintf>
  106e84:	e3050f54 	movw	r0, #24404	; 0x5f54
  106e88:	e3400014 	movt	r0, #20
  106e8c:	ebfff0a0 	bl	103114 <rt_kprintf>
        return -1;
  106e90:	e3e03000 	mvn	r3, #0
  106e94:	ea000013 	b	106ee8 <sal_init+0xf4>
    }

    /* create sal socket lock */
    rt_mutex_init(&sal_core_lock, "sal_lock", RT_IPC_FLAG_FIFO);
  106e98:	e3a02000 	mov	r2, #0
  106e9c:	e3051f5c 	movw	r1, #24412	; 0x5f5c
  106ea0:	e3401014 	movt	r1, #20
  106ea4:	e30d0468 	movw	r0, #54376	; 0xd468
  106ea8:	e3400014 	movt	r0, #20
  106eac:	ebffe7a5 	bl	100d48 <rt_mutex_init>

    LOG_I("Socket Abstraction Layer initialize success.");
  106eb0:	e3050f68 	movw	r0, #24424	; 0x5f68
  106eb4:	e3400014 	movt	r0, #20
  106eb8:	ebfff095 	bl	103114 <rt_kprintf>
  106ebc:	e3050f7c 	movw	r0, #24444	; 0x5f7c
  106ec0:	e3400014 	movt	r0, #20
  106ec4:	ebfff092 	bl	103114 <rt_kprintf>
  106ec8:	e3050f54 	movw	r0, #24404	; 0x5f54
  106ecc:	e3400014 	movt	r0, #20
  106ed0:	ebfff08f 	bl	103114 <rt_kprintf>
    init_ok = RT_TRUE;
  106ed4:	e30d3490 	movw	r3, #54416	; 0xd490
  106ed8:	e3403014 	movt	r3, #20
  106edc:	e3a02001 	mov	r2, #1
  106ee0:	e5832000 	str	r2, [r3]

    return 0;
  106ee4:	e3a03000 	mov	r3, #0
}
  106ee8:	e1a00003 	mov	r0, r3
  106eec:	e24bd004 	sub	sp, fp, #4
  106ef0:	e8bd8800 	pop	{fp, pc}

00106ef4 <check_netdev_internet_up_work>:

/* check SAL network interface device internet status */
void check_netdev_internet_up_work(void *work_data)
{
  106ef4:	e92d4810 	push	{r4, fp, lr}
  106ef8:	e28db008 	add	fp, sp, #8
  106efc:	e24dd0ac 	sub	sp, sp, #172	; 0xac
  106f00:	e50b00a8 	str	r0, [fp, #-168]	; 0xffffff58
#define SAL_INTERNET_PORT      8101

#define SAL_INTERNET_MONTH_LEN 4
#define SAL_INTERNET_DATE_LEN  16

    int index, sockfd = -1, result = 0;
  106f04:	e3e03000 	mvn	r3, #0
  106f08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  106f0c:	e3a03000 	mov	r3, #0
  106f10:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    struct sockaddr_in server_addr;
    struct hostent *host;
    struct timeval timeout;
    struct netdev *netdev = (struct netdev *)work_data;
  106f14:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xffffff58
  106f18:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    socklen_t addr_len = sizeof(struct sockaddr_in);
  106f1c:	e3a03010 	mov	r3, #16
  106f20:	e50b3050 	str	r3, [fp, #-80]	; 0xffffffb0
    char send_data[SAL_INTERNET_BUFF_LEN], recv_data = 0;
  106f24:	e3a03000 	mov	r3, #0
  106f28:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
    // struct rt_delayed_work *delay_work = (struct rt_delayed_work *)work;

    const char month[][SAL_INTERNET_MONTH_LEN] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
  106f2c:	e3053fd0 	movw	r3, #24528	; 0x5fd0
  106f30:	e3403014 	movt	r3, #20
  106f34:	e24bc090 	sub	ip, fp, #144	; 0x90
  106f38:	e1a0e003 	mov	lr, r3
  106f3c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  106f40:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  106f44:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  106f48:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  106f4c:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  106f50:	e88c000f 	stm	ip, {r0, r1, r2, r3}
    char date[SAL_INTERNET_DATE_LEN];
    int moth_num = 0;
  106f54:	e3a03000 	mov	r3, #0
  106f58:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    struct sal_proto_family *pf = (struct sal_proto_family *) netdev->sal_user_data;
  106f5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106f60:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  106f64:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    // {
    //     rt_free(delay_work);
    // }

    /* get network interface socket operations */
    if (pf == RT_NULL || pf->skt_ops == RT_NULL)
  106f68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f6c:	e3530000 	cmp	r3, #0
  106f70:	0a000003 	beq	106f84 <check_netdev_internet_up_work+0x90>
  106f74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f78:	e5933008 	ldr	r3, [r3, #8]
  106f7c:	e3530000 	cmp	r3, #0
  106f80:	1a000002 	bne	106f90 <check_netdev_internet_up_work+0x9c>
    {
        result = -RT_ERROR;
  106f84:	e3e03000 	mvn	r3, #0
  106f88:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106f8c:	ea0000bc 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    host = (struct hostent *) pf->netdb_ops->gethostbyname(SAL_INTERNET_HOST);
  106f90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f94:	e593300c 	ldr	r3, [r3, #12]
  106f98:	e5933000 	ldr	r3, [r3]
  106f9c:	e3050fac 	movw	r0, #24492	; 0x5fac
  106fa0:	e3400014 	movt	r0, #20
  106fa4:	e12fff33 	blx	r3
  106fa8:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    if (host == RT_NULL)
  106fac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106fb0:	e3530000 	cmp	r3, #0
  106fb4:	1a000002 	bne	106fc4 <check_netdev_internet_up_work+0xd0>
    {
        result = -RT_ERROR;
  106fb8:	e3e03000 	mvn	r3, #0
  106fbc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106fc0:	ea0000af 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    skt_ops = pf->skt_ops;
  106fc4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106fc8:	e5933008 	ldr	r3, [r3, #8]
  106fcc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if ((sockfd = skt_ops->socket(AF_INET, SOCK_DGRAM, 0)) < 0)
  106fd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106fd4:	e5933000 	ldr	r3, [r3]
  106fd8:	e3a02000 	mov	r2, #0
  106fdc:	e3a01002 	mov	r1, #2
  106fe0:	e3a00002 	mov	r0, #2
  106fe4:	e12fff33 	blx	r3
  106fe8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  106fec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106ff0:	e3530000 	cmp	r3, #0
  106ff4:	aa000002 	bge	107004 <check_netdev_internet_up_work+0x110>
    {
        result = -RT_ERROR;
  106ff8:	e3e03000 	mvn	r3, #0
  106ffc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107000:	ea00009f 	b	107284 <check_netdev_internet_up_work+0x390>
    }
    
    server_addr.sin_family = AF_INET;
  107004:	e3a03002 	mov	r3, #2
  107008:	e54b303b 	strb	r3, [fp, #-59]	; 0xffffffc5
    server_addr.sin_port = htons(SAL_INTERNET_PORT);
  10700c:	e30a351f 	movw	r3, #42271	; 0xa51f
  107010:	e34f3fff 	movt	r3, #65535	; 0xffff
  107014:	e14b33ba 	strh	r3, [fp, #-58]	; 0xffffffc6
    server_addr.sin_addr = *((struct in_addr *)host->h_addr);
  107018:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10701c:	e5933010 	ldr	r3, [r3, #16]
  107020:	e5933000 	ldr	r3, [r3]
  107024:	e5933000 	ldr	r3, [r3]
  107028:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    rt_memset(&(server_addr.sin_zero), 0, sizeof(server_addr.sin_zero));
  10702c:	e24b303c 	sub	r3, fp, #60	; 0x3c
  107030:	e2833008 	add	r3, r3, #8
  107034:	e3a02008 	mov	r2, #8
  107038:	e3a01000 	mov	r1, #0
  10703c:	e1a00003 	mov	r0, r3
  107040:	ebfff0a0 	bl	1032c8 <rt_memset>

    timeout.tv_sec = SAL_INTERNET_TIMEOUT;
  107044:	e3a02002 	mov	r2, #2
  107048:	e3a03000 	mov	r3, #0
  10704c:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
    timeout.tv_usec = 0;
  107050:	e3a03000 	mov	r3, #0
  107054:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc

    /* set receive and send timeout */
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, (void *) &timeout, sizeof(timeout));
  107058:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10705c:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  107060:	e24b204c 	sub	r2, fp, #76	; 0x4c
  107064:	e3a03010 	mov	r3, #16
  107068:	e58d3000 	str	r3, [sp]
  10706c:	e1a03002 	mov	r3, r2
  107070:	e3012006 	movw	r2, #4102	; 0x1006
  107074:	e3001fff 	movw	r1, #4095	; 0xfff
  107078:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10707c:	e12fff34 	blx	r4
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, (void *) &timeout, sizeof(timeout));
  107080:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107084:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  107088:	e24b204c 	sub	r2, fp, #76	; 0x4c
  10708c:	e3a03010 	mov	r3, #16
  107090:	e58d3000 	str	r3, [sp]
  107094:	e1a03002 	mov	r3, r2
  107098:	e3012005 	movw	r2, #4101	; 0x1005
  10709c:	e3001fff 	movw	r1, #4095	; 0xfff
  1070a0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1070a4:	e12fff34 	blx	r4

    /* get build moth value*/
    rt_memset(date, 0x00, SAL_INTERNET_DATE_LEN);
  1070a8:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1070ac:	e3a02010 	mov	r2, #16
  1070b0:	e3a01000 	mov	r1, #0
  1070b4:	e1a00003 	mov	r0, r3
  1070b8:	ebfff082 	bl	1032c8 <rt_memset>
    rt_snprintf(date, SAL_INTERNET_DATE_LEN, "%s", __DATE__);
  1070bc:	e24b00a0 	sub	r0, fp, #160	; 0xa0
  1070c0:	e3053fc0 	movw	r3, #24512	; 0x5fc0
  1070c4:	e3403014 	movt	r3, #20
  1070c8:	e3052fcc 	movw	r2, #24524	; 0x5fcc
  1070cc:	e3402014 	movt	r2, #20
  1070d0:	e3a01010 	mov	r1, #16
  1070d4:	ebffefd8 	bl	10303c <rt_snprintf>

    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  1070d8:	e3a03000 	mov	r3, #0
  1070dc:	e50b3010 	str	r3, [fp, #-16]
  1070e0:	ea000011 	b	10712c <check_netdev_internet_up_work+0x238>
    {
        if (rt_memcmp(date, month[index], SAL_INTERNET_MONTH_LEN - 1) == 0)
  1070e4:	e24b2090 	sub	r2, fp, #144	; 0x90
  1070e8:	e51b3010 	ldr	r3, [fp, #-16]
  1070ec:	e1a03103 	lsl	r3, r3, #2
  1070f0:	e0821003 	add	r1, r2, r3
  1070f4:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1070f8:	e3a02003 	mov	r2, #3
  1070fc:	e1a00003 	mov	r0, r3
  107100:	ebfff08c 	bl	103338 <rt_memcmp>
  107104:	e1a03000 	mov	r3, r0
  107108:	e3530000 	cmp	r3, #0
  10710c:	1a000003 	bne	107120 <check_netdev_internet_up_work+0x22c>
        {
            moth_num = index + 1;
  107110:	e51b3010 	ldr	r3, [fp, #-16]
  107114:	e2833001 	add	r3, r3, #1
  107118:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
  10711c:	ea000005 	b	107138 <check_netdev_internet_up_work+0x244>
    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  107120:	e51b3010 	ldr	r3, [fp, #-16]
  107124:	e2833001 	add	r3, r3, #1
  107128:	e50b3010 	str	r3, [fp, #-16]
  10712c:	e51b3010 	ldr	r3, [fp, #-16]
  107130:	e353000b 	cmp	r3, #11
  107134:	9affffea 	bls	1070e4 <check_netdev_internet_up_work+0x1f0>
        }
    }

    /* not find build month */
    if (moth_num == 0 || moth_num > sizeof(month) / SAL_INTERNET_MONTH_LEN)
  107138:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10713c:	e3530000 	cmp	r3, #0
  107140:	0a000002 	beq	107150 <check_netdev_internet_up_work+0x25c>
  107144:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107148:	e353000c 	cmp	r3, #12
  10714c:	9a000002 	bls	10715c <check_netdev_internet_up_work+0x268>
    {
        result = -RT_ERROR;
  107150:	e3e03000 	mvn	r3, #0
  107154:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107158:	ea000049 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    rt_memset(send_data, 0x00, SAL_INTERNET_BUFF_LEN);
  10715c:	e24b305c 	sub	r3, fp, #92	; 0x5c
  107160:	e3a0200c 	mov	r2, #12
  107164:	e3a01000 	mov	r1, #0
  107168:	e1a00003 	mov	r0, r3
  10716c:	ebfff055 	bl	1032c8 <rt_memset>
    send_data[0] = SAL_INTERNET_VERSION;
  107170:	e3a03000 	mov	r3, #0
  107174:	e54b305c 	strb	r3, [fp, #-92]	; 0xffffffa4
    for (index = 0; index < netdev->hwaddr_len; index++)
  107178:	e3a03000 	mov	r3, #0
  10717c:	e50b3010 	str	r3, [fp, #-16]
  107180:	ea000010 	b	1071c8 <check_netdev_internet_up_work+0x2d4>
    {
        send_data[index + 1] = netdev->hwaddr[index] + moth_num;
  107184:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  107188:	e51b3010 	ldr	r3, [fp, #-16]
  10718c:	e0823003 	add	r3, r2, r3
  107190:	e2833021 	add	r3, r3, #33	; 0x21
  107194:	e5d31000 	ldrb	r1, [r3]
  107198:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10719c:	e6ef2073 	uxtb	r2, r3
  1071a0:	e51b3010 	ldr	r3, [fp, #-16]
  1071a4:	e2833001 	add	r3, r3, #1
  1071a8:	e0812002 	add	r2, r1, r2
  1071ac:	e6ef2072 	uxtb	r2, r2
  1071b0:	e24b100c 	sub	r1, fp, #12
  1071b4:	e0813003 	add	r3, r1, r3
  1071b8:	e5432050 	strb	r2, [r3, #-80]	; 0xffffffb0
    for (index = 0; index < netdev->hwaddr_len; index++)
  1071bc:	e51b3010 	ldr	r3, [fp, #-16]
  1071c0:	e2833001 	add	r3, r3, #1
  1071c4:	e50b3010 	str	r3, [fp, #-16]
  1071c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1071cc:	e5d33020 	ldrb	r3, [r3, #32]
  1071d0:	e1a02003 	mov	r2, r3
  1071d4:	e51b3010 	ldr	r3, [fp, #-16]
  1071d8:	e1530002 	cmp	r3, r2
  1071dc:	baffffe8 	blt	107184 <check_netdev_internet_up_work+0x290>
    }
    send_data[9] = RT_VERSION;
  1071e0:	e3a03005 	mov	r3, #5
  1071e4:	e54b3053 	strb	r3, [fp, #-83]	; 0xffffffad
    send_data[10] = RT_SUBVERSION;
  1071e8:	e3a03000 	mov	r3, #0
  1071ec:	e54b3052 	strb	r3, [fp, #-82]	; 0xffffffae
    send_data[11] = RT_REVISION;
  1071f0:	e3a03000 	mov	r3, #0
  1071f4:	e54b3051 	strb	r3, [fp, #-81]	; 0xffffffaf

    skt_ops->sendto(sockfd, send_data, SAL_INTERNET_BUFF_LEN, 0,
  1071f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1071fc:	e5934018 	ldr	r4, [r3, #24]
  107200:	e24b105c 	sub	r1, fp, #92	; 0x5c
  107204:	e3a03010 	mov	r3, #16
  107208:	e58d3004 	str	r3, [sp, #4]
  10720c:	e24b303c 	sub	r3, fp, #60	; 0x3c
  107210:	e58d3000 	str	r3, [sp]
  107214:	e3a03000 	mov	r3, #0
  107218:	e3a0200c 	mov	r2, #12
  10721c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107220:	e12fff34 	blx	r4
                    (struct sockaddr *)&server_addr, sizeof(struct sockaddr));

    result = skt_ops->recvfrom(sockfd, &recv_data, sizeof(recv_data), 0, (struct sockaddr *)&server_addr, &addr_len);
  107224:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107228:	e593401c 	ldr	r4, [r3, #28]
  10722c:	e24b105d 	sub	r1, fp, #93	; 0x5d
  107230:	e24b3050 	sub	r3, fp, #80	; 0x50
  107234:	e58d3004 	str	r3, [sp, #4]
  107238:	e24b303c 	sub	r3, fp, #60	; 0x3c
  10723c:	e58d3000 	str	r3, [sp]
  107240:	e3a03000 	mov	r3, #0
  107244:	e3a02001 	mov	r2, #1
  107248:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10724c:	e12fff34 	blx	r4
  107250:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (result < 0)
  107254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107258:	e3530000 	cmp	r3, #0
  10725c:	ba000005 	blt	107278 <check_netdev_internet_up_work+0x384>
    {
        goto __exit;
    }

    if (recv_data == RT_FALSE)
  107260:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
  107264:	e3530000 	cmp	r3, #0
  107268:	1a000004 	bne	107280 <check_netdev_internet_up_work+0x38c>
    {
        result = -RT_ERROR;
  10726c:	e3e03000 	mvn	r3, #0
  107270:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107274:	ea000002 	b	107284 <check_netdev_internet_up_work+0x390>
        goto __exit;
  107278:	e320f000 	nop	{0}
  10727c:	ea000000 	b	107284 <check_netdev_internet_up_work+0x390>
    }

__exit:
  107280:	e320f000 	nop	{0}
    if (result > 0)
  107284:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107288:	e3530000 	cmp	r3, #0
  10728c:	da000006 	ble	1072ac <check_netdev_internet_up_work+0x3b8>
    {
        LOG_D("Set network interface device(%s) internet status up.", netdev->name);
        netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  107290:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107294:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107298:	e3833080 	orr	r3, r3, #128	; 0x80
  10729c:	e6ff2073 	uxth	r2, r3
  1072a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072a4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  1072a8:	ea000005 	b	1072c4 <check_netdev_internet_up_work+0x3d0>
    }
    else
    {
        LOG_D("Set network interface device(%s) internet status down.", netdev->name);
        netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  1072ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072b0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1072b4:	e3c33080 	bic	r3, r3, #128	; 0x80
  1072b8:	e6ff2073 	uxth	r2, r3
  1072bc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072c0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    }

    if (sockfd >= 0)
  1072c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1072c8:	e3530000 	cmp	r3, #0
  1072cc:	ba000003 	blt	1072e0 <check_netdev_internet_up_work+0x3ec>
    {
        skt_ops->closesocket(sockfd);
  1072d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1072d4:	e5933004 	ldr	r3, [r3, #4]
  1072d8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1072dc:	e12fff33 	blx	r3
    }
}
  1072e0:	e320f000 	nop	{0}
  1072e4:	e24bd008 	sub	sp, fp, #8
  1072e8:	e8bd8810 	pop	{r4, fp, pc}

001072ec <sal_get_socket>:
 * @param socket sal socket index
 *
 * @return sal socket object of the current sal socket index
 */
struct sal_socket *sal_get_socket(int socket)
{
  1072ec:	e92d4800 	push	{fp, lr}
  1072f0:	e28db004 	add	fp, sp, #4
  1072f4:	e24dd010 	sub	sp, sp, #16
  1072f8:	e50b0010 	str	r0, [fp, #-16]
    struct sal_socket_table *st = &socket_table;
  1072fc:	e30d3460 	movw	r3, #54368	; 0xd460
  107300:	e3403014 	movt	r3, #20
  107304:	e50b3008 	str	r3, [fp, #-8]

    if (socket < 0 || socket >= (int) st->max_socket)
  107308:	e51b3010 	ldr	r3, [fp, #-16]
  10730c:	e3530000 	cmp	r3, #0
  107310:	ba000005 	blt	10732c <sal_get_socket+0x40>
  107314:	e51b3008 	ldr	r3, [fp, #-8]
  107318:	e5933000 	ldr	r3, [r3]
  10731c:	e1a02003 	mov	r2, r3
  107320:	e51b3010 	ldr	r3, [fp, #-16]
  107324:	e1530002 	cmp	r3, r2
  107328:	ba000001 	blt	107334 <sal_get_socket+0x48>
    {
        return RT_NULL;
  10732c:	e3a03000 	mov	r3, #0
  107330:	ea000015 	b	10738c <sal_get_socket+0xa0>
    }

    socket = socket - SAL_SOCKET_OFFSET;
    /* check socket structure valid or not */
    RT_ASSERT(st->sockets[socket]->magic == SAL_SOCKET_MAGIC);
  107334:	e51b3008 	ldr	r3, [fp, #-8]
  107338:	e5932004 	ldr	r2, [r3, #4]
  10733c:	e51b3010 	ldr	r3, [fp, #-16]
  107340:	e1a03103 	lsl	r3, r3, #2
  107344:	e0823003 	add	r3, r2, r3
  107348:	e5933000 	ldr	r3, [r3]
  10734c:	e5933000 	ldr	r3, [r3]
  107350:	e3052a10 	movw	r2, #23056	; 0x5a10
  107354:	e1530002 	cmp	r3, r2
  107358:	0a000005 	beq	107374 <sal_get_socket+0x88>
  10735c:	e300213b 	movw	r2, #315	; 0x13b
  107360:	e30610f4 	movw	r1, #24820	; 0x60f4
  107364:	e3401014 	movt	r1, #20
  107368:	e3060000 	movw	r0, #24576	; 0x6000
  10736c:	e3400014 	movt	r0, #20
  107370:	ebfff088 	bl	103598 <rt_assert_handler>

    return st->sockets[socket];
  107374:	e51b3008 	ldr	r3, [fp, #-8]
  107378:	e5932004 	ldr	r2, [r3, #4]
  10737c:	e51b3010 	ldr	r3, [fp, #-16]
  107380:	e1a03103 	lsl	r3, r3, #2
  107384:	e0823003 	add	r3, r2, r3
  107388:	e5933000 	ldr	r3, [r3]
}
  10738c:	e1a00003 	mov	r0, r3
  107390:	e24bd004 	sub	sp, fp, #4
  107394:	e8bd8800 	pop	{fp, pc}

00107398 <sal_lock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_lock(void)
{
  107398:	e92d4800 	push	{fp, lr}
  10739c:	e28db004 	add	fp, sp, #4
  1073a0:	e24dd008 	sub	sp, sp, #8
    rt_err_t result;

    result = rt_mutex_take(&sal_core_lock, RT_WAITING_FOREVER);
  1073a4:	e3e01000 	mvn	r1, #0
  1073a8:	e30d0468 	movw	r0, #54376	; 0xd468
  1073ac:	e3400014 	movt	r0, #20
  1073b0:	ebffe6d2 	bl	100f00 <rt_mutex_take>
  1073b4:	e50b0008 	str	r0, [fp, #-8]
    if (result != RT_EOK)
  1073b8:	e51b3008 	ldr	r3, [fp, #-8]
  1073bc:	e3530000 	cmp	r3, #0
  1073c0:	0a000005 	beq	1073dc <sal_lock+0x44>
    {
        RT_ASSERT(0);
  1073c4:	e3a02f53 	mov	r2, #332	; 0x14c
  1073c8:	e3061104 	movw	r1, #24836	; 0x6104
  1073cc:	e3401014 	movt	r1, #20
  1073d0:	e3060030 	movw	r0, #24624	; 0x6030
  1073d4:	e3400014 	movt	r0, #20
  1073d8:	ebfff06e 	bl	103598 <rt_assert_handler>
    }
}
  1073dc:	e320f000 	nop	{0}
  1073e0:	e24bd004 	sub	sp, fp, #4
  1073e4:	e8bd8800 	pop	{fp, pc}

001073e8 <sal_unlock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_unlock(void)
{
  1073e8:	e92d4800 	push	{fp, lr}
  1073ec:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&sal_core_lock);
  1073f0:	e30d0468 	movw	r0, #54376	; 0xd468
  1073f4:	e3400014 	movt	r0, #20
  1073f8:	ebffe6de 	bl	100f78 <rt_mutex_release>
}
  1073fc:	e320f000 	nop	{0}
  107400:	e8bd8800 	pop	{fp, pc}

00107404 <sal_netdev_cleanup>:
 * This function will clean the netdev.
 *
 * @note please don't invoke it on ISR.
 */
int sal_netdev_cleanup(struct netdev *netdev)
{
  107404:	e92d4800 	push	{fp, lr}
  107408:	e28db004 	add	fp, sp, #4
  10740c:	e24dd010 	sub	sp, sp, #16
  107410:	e50b0010 	str	r0, [fp, #-16]
    int idx = 0, find_dev;
  107414:	e3a03000 	mov	r3, #0
  107418:	e50b3008 	str	r3, [fp, #-8]

    do
    {
        find_dev = 0;
  10741c:	e3a03000 	mov	r3, #0
  107420:	e50b300c 	str	r3, [fp, #-12]
        sal_lock();
  107424:	ebffffdb 	bl	107398 <sal_lock>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  107428:	e3a03000 	mov	r3, #0
  10742c:	e50b3008 	str	r3, [fp, #-8]
  107430:	ea000019 	b	10749c <sal_netdev_cleanup+0x98>
        {
            if (socket_table.sockets[idx] && socket_table.sockets[idx]->netdev == netdev)
  107434:	e30d3460 	movw	r3, #54368	; 0xd460
  107438:	e3403014 	movt	r3, #20
  10743c:	e5932004 	ldr	r2, [r3, #4]
  107440:	e51b3008 	ldr	r3, [fp, #-8]
  107444:	e1a03103 	lsl	r3, r3, #2
  107448:	e0823003 	add	r3, r2, r3
  10744c:	e5933000 	ldr	r3, [r3]
  107450:	e3530000 	cmp	r3, #0
  107454:	0a00000d 	beq	107490 <sal_netdev_cleanup+0x8c>
  107458:	e30d3460 	movw	r3, #54368	; 0xd460
  10745c:	e3403014 	movt	r3, #20
  107460:	e5932004 	ldr	r2, [r3, #4]
  107464:	e51b3008 	ldr	r3, [fp, #-8]
  107468:	e1a03103 	lsl	r3, r3, #2
  10746c:	e0823003 	add	r3, r2, r3
  107470:	e5933000 	ldr	r3, [r3]
  107474:	e5933014 	ldr	r3, [r3, #20]
  107478:	e51b2010 	ldr	r2, [fp, #-16]
  10747c:	e1520003 	cmp	r2, r3
  107480:	1a000002 	bne	107490 <sal_netdev_cleanup+0x8c>
            {
                find_dev = 1;
  107484:	e3a03001 	mov	r3, #1
  107488:	e50b300c 	str	r3, [fp, #-12]
                break;
  10748c:	ea000008 	b	1074b4 <sal_netdev_cleanup+0xb0>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  107490:	e51b3008 	ldr	r3, [fp, #-8]
  107494:	e2833001 	add	r3, r3, #1
  107498:	e50b3008 	str	r3, [fp, #-8]
  10749c:	e30d3460 	movw	r3, #54368	; 0xd460
  1074a0:	e3403014 	movt	r3, #20
  1074a4:	e5932000 	ldr	r2, [r3]
  1074a8:	e51b3008 	ldr	r3, [fp, #-8]
  1074ac:	e1520003 	cmp	r2, r3
  1074b0:	8affffdf 	bhi	107434 <sal_netdev_cleanup+0x30>
            }
        }
        sal_unlock();
  1074b4:	ebffffcb 	bl	1073e8 <sal_unlock>
        if (find_dev)
  1074b8:	e51b300c 	ldr	r3, [fp, #-12]
  1074bc:	e3530000 	cmp	r3, #0
  1074c0:	0a000001 	beq	1074cc <sal_netdev_cleanup+0xc8>
        {
            rt_thread_mdelay(100);
  1074c4:	e3a00064 	mov	r0, #100	; 0x64
  1074c8:	ebffea6b 	bl	101e7c <rt_thread_mdelay>
        }
    }
    while (find_dev);
  1074cc:	e51b300c 	ldr	r3, [fp, #-12]
  1074d0:	e3530000 	cmp	r3, #0
  1074d4:	1affffd0 	bne	10741c <sal_netdev_cleanup+0x18>

    return 0;
  1074d8:	e3a03000 	mov	r3, #0
}
  1074dc:	e1a00003 	mov	r0, r3
  1074e0:	e24bd004 	sub	sp, fp, #4
  1074e4:	e8bd8800 	pop	{fp, pc}

001074e8 <socket_init>:
 *         -1 : input the wrong family
 *         -2 : input the wrong socket type
 *         -3 : get network interface failed
 */
static int socket_init(int family, int type, int protocol, struct sal_socket **res)
{
  1074e8:	e92d4800 	push	{fp, lr}
  1074ec:	e28db004 	add	fp, sp, #4
  1074f0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1074f4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1074f8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1074fc:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  107500:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4

    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct netdev *netdv_def = netdev_default;
  107504:	e30f358c 	movw	r3, #62860	; 0xf58c
  107508:	e3403014 	movt	r3, #20
  10750c:	e5933000 	ldr	r3, [r3]
  107510:	e50b300c 	str	r3, [fp, #-12]
    struct netdev *netdev = RT_NULL;
  107514:	e3a03000 	mov	r3, #0
  107518:	e50b3010 	str	r3, [fp, #-16]
    rt_bool_t flag = RT_FALSE;
  10751c:	e3a03000 	mov	r3, #0
  107520:	e50b3008 	str	r3, [fp, #-8]

    if (family < 0 || family > AF_MAX)
  107524:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107528:	e3530000 	cmp	r3, #0
  10752c:	ba000002 	blt	10753c <socket_init+0x54>
  107530:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107534:	e353002f 	cmp	r3, #47	; 0x2f
  107538:	da000001 	ble	107544 <socket_init+0x5c>
    {
        return -1;
  10753c:	e3e03000 	mvn	r3, #0
  107540:	ea000050 	b	107688 <socket_init+0x1a0>
    }

    if (type < 0 || type > SOCK_MAX)
  107544:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107548:	e3530000 	cmp	r3, #0
  10754c:	ba000004 	blt	107564 <socket_init+0x7c>
  107550:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  107554:	e3a03001 	mov	r3, #1
  107558:	e3403008 	movt	r3, #8
  10755c:	e1520003 	cmp	r2, r3
  107560:	da000001 	ble	10756c <socket_init+0x84>
    {
        return -2;
  107564:	e3e03001 	mvn	r3, #1
  107568:	ea000046 	b	107688 <socket_init+0x1a0>
    }

    sock = *res;
  10756c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107570:	e5933000 	ldr	r3, [r3]
  107574:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sock->domain = family;
  107578:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10757c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107580:	e5832008 	str	r2, [r3, #8]
    sock->type = type;
  107584:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107588:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  10758c:	e583200c 	str	r2, [r3, #12]
    sock->protocol = protocol;
  107590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107594:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107598:	e5832010 	str	r2, [r3, #16]

    if (netdv_def && netdev_is_up(netdv_def))
  10759c:	e51b300c 	ldr	r3, [fp, #-12]
  1075a0:	e3530000 	cmp	r3, #0
  1075a4:	0a00001e 	beq	107624 <socket_init+0x13c>
  1075a8:	e51b300c 	ldr	r3, [fp, #-12]
  1075ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1075b0:	e2033001 	and	r3, r3, #1
  1075b4:	e6ef3073 	uxtb	r3, r3
  1075b8:	e3530000 	cmp	r3, #0
  1075bc:	0a000018 	beq	107624 <socket_init+0x13c>
    {
        /* check default network interface device protocol family */
        pf = (struct sal_proto_family *) netdv_def->sal_user_data;
  1075c0:	e51b300c 	ldr	r3, [fp, #-12]
  1075c4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1075c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        if (pf != RT_NULL && pf->skt_ops && (pf->family == family || pf->sec_family == family))
  1075cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075d0:	e3530000 	cmp	r3, #0
  1075d4:	0a000012 	beq	107624 <socket_init+0x13c>
  1075d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075dc:	e5933008 	ldr	r3, [r3, #8]
  1075e0:	e3530000 	cmp	r3, #0
  1075e4:	0a00000e 	beq	107624 <socket_init+0x13c>
  1075e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075ec:	e5933000 	ldr	r3, [r3]
  1075f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1075f4:	e1520003 	cmp	r2, r3
  1075f8:	0a000004 	beq	107610 <socket_init+0x128>
  1075fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107600:	e5933004 	ldr	r3, [r3, #4]
  107604:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107608:	e1520003 	cmp	r2, r3
  10760c:	1a000004 	bne	107624 <socket_init+0x13c>
        {
            sock->netdev = netdv_def;
  107610:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107614:	e51b200c 	ldr	r2, [fp, #-12]
  107618:	e5832014 	str	r2, [r3, #20]
            flag = RT_TRUE;
  10761c:	e3a03001 	mov	r3, #1
  107620:	e50b3008 	str	r3, [fp, #-8]
        }
    }

    if (flag == RT_FALSE)
  107624:	e51b3008 	ldr	r3, [fp, #-8]
  107628:	e3530000 	cmp	r3, #0
  10762c:	1a000014 	bne	107684 <socket_init+0x19c>
    {
        /* get network interface device by protocol family */
        netdev = netdev_get_by_family(family);
  107630:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107634:	ebfff7e1 	bl	1055c0 <netdev_get_by_family>
  107638:	e50b0010 	str	r0, [fp, #-16]
        if (netdev == RT_NULL)
  10763c:	e51b3010 	ldr	r3, [fp, #-16]
  107640:	e3530000 	cmp	r3, #0
  107644:	1a00000b 	bne	107678 <socket_init+0x190>
        {
            LOG_E("not find network interface device by protocol family(%d).", family);
  107648:	e3050f20 	movw	r0, #24352	; 0x5f20
  10764c:	e3400014 	movt	r0, #20
  107650:	ebffeeaf 	bl	103114 <rt_kprintf>
  107654:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  107658:	e3060034 	movw	r0, #24628	; 0x6034
  10765c:	e3400014 	movt	r0, #20
  107660:	ebffeeab 	bl	103114 <rt_kprintf>
  107664:	e3050f54 	movw	r0, #24404	; 0x5f54
  107668:	e3400014 	movt	r0, #20
  10766c:	ebffeea8 	bl	103114 <rt_kprintf>
            return -3;
  107670:	e3e03002 	mvn	r3, #2
  107674:	ea000003 	b	107688 <socket_init+0x1a0>
        }

        sock->netdev = netdev;
  107678:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10767c:	e51b2010 	ldr	r2, [fp, #-16]
  107680:	e5832014 	str	r2, [r3, #20]
    }

    return 0;
  107684:	e3a03000 	mov	r3, #0
}
  107688:	e1a00003 	mov	r0, r3
  10768c:	e24bd004 	sub	sp, fp, #4
  107690:	e8bd8800 	pop	{fp, pc}

00107694 <socket_alloc>:

static int socket_alloc(struct sal_socket_table *st, int f_socket)
{
  107694:	e92d4810 	push	{r4, fp, lr}
  107698:	e28db008 	add	fp, sp, #8
  10769c:	e24dd01c 	sub	sp, sp, #28
  1076a0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1076a4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
    int idx;

    /* find an empty socket entry */
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  1076a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1076ac:	e50b3010 	str	r3, [fp, #-16]
  1076b0:	ea00000a 	b	1076e0 <socket_alloc+0x4c>
    {
        if (st->sockets[idx] == RT_NULL)
  1076b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1076b8:	e5932004 	ldr	r2, [r3, #4]
  1076bc:	e51b3010 	ldr	r3, [fp, #-16]
  1076c0:	e1a03103 	lsl	r3, r3, #2
  1076c4:	e0823003 	add	r3, r2, r3
  1076c8:	e5933000 	ldr	r3, [r3]
  1076cc:	e3530000 	cmp	r3, #0
  1076d0:	0a000009 	beq	1076fc <socket_alloc+0x68>
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  1076d4:	e51b3010 	ldr	r3, [fp, #-16]
  1076d8:	e2833001 	add	r3, r3, #1
  1076dc:	e50b3010 	str	r3, [fp, #-16]
  1076e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1076e4:	e5933000 	ldr	r3, [r3]
  1076e8:	e1a02003 	mov	r2, r3
  1076ec:	e51b3010 	ldr	r3, [fp, #-16]
  1076f0:	e1530002 	cmp	r3, r2
  1076f4:	baffffee 	blt	1076b4 <socket_alloc+0x20>
  1076f8:	ea000000 	b	107700 <socket_alloc+0x6c>
        {
            break;
  1076fc:	e320f000 	nop	{0}
        }
    }

    /* allocate a larger sockte container */
    if (idx == (int) st->max_socket &&  st->max_socket < SAL_SOCKETS_NUM)
  107700:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107704:	e5933000 	ldr	r3, [r3]
  107708:	e1a02003 	mov	r2, r3
  10770c:	e51b3010 	ldr	r3, [fp, #-16]
  107710:	e1530002 	cmp	r3, r2
  107714:	1a00002e 	bne	1077d4 <socket_alloc+0x140>
  107718:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10771c:	e5933000 	ldr	r3, [r3]
  107720:	e353001f 	cmp	r3, #31
  107724:	8a00002a 	bhi	1077d4 <socket_alloc+0x140>
    {
        int cnt, index;
        struct sal_socket **sockets;

        /* increase the number of socket with 4 step length */
        cnt = st->max_socket + SOCKET_TABLE_STEP_LEN;
  107728:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10772c:	e5933000 	ldr	r3, [r3]
  107730:	e2833004 	add	r3, r3, #4
  107734:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        cnt = cnt > SAL_SOCKETS_NUM ? SAL_SOCKETS_NUM : cnt;
  107738:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10773c:	e3530020 	cmp	r3, #32
  107740:	b1a03003 	movlt	r3, r3
  107744:	a3a03020 	movge	r3, #32
  107748:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

        sockets = rt_realloc(st->sockets, cnt * sizeof(struct sal_socket *));
  10774c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107750:	e5932004 	ldr	r2, [r3, #4]
  107754:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107758:	e1a03103 	lsl	r3, r3, #2
  10775c:	e1a01003 	mov	r1, r3
  107760:	e1a00002 	mov	r0, r2
  107764:	ebffee1c 	bl	102fdc <rt_realloc>
  107768:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sockets == RT_NULL)
  10776c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107770:	e3530000 	cmp	r3, #0
  107774:	0a00003a 	beq	107864 <socket_alloc+0x1d0>
            goto __result; /* return st->max_socket */

        /* clean the new allocated fds */
        for (index = st->max_socket; index < cnt; index++)
  107778:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10777c:	e5933000 	ldr	r3, [r3]
  107780:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  107784:	ea000008 	b	1077ac <socket_alloc+0x118>
        {
            sockets[index] = RT_NULL;
  107788:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10778c:	e1a03103 	lsl	r3, r3, #2
  107790:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  107794:	e0823003 	add	r3, r2, r3
  107798:	e3a02000 	mov	r2, #0
  10779c:	e5832000 	str	r2, [r3]
        for (index = st->max_socket; index < cnt; index++)
  1077a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1077a4:	e2833001 	add	r3, r3, #1
  1077a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1077ac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1077b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1077b4:	e1520003 	cmp	r2, r3
  1077b8:	bafffff2 	blt	107788 <socket_alloc+0xf4>
        }

        st->sockets = sockets;
  1077bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077c0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1077c4:	e5832004 	str	r2, [r3, #4]
        st->max_socket = cnt;
  1077c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1077cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077d0:	e5832000 	str	r2, [r3]
    }

    /* allocate  'struct sal_socket' */
    if (idx < (int) st->max_socket && st->sockets[idx] == RT_NULL)
  1077d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077d8:	e5933000 	ldr	r3, [r3]
  1077dc:	e1a02003 	mov	r2, r3
  1077e0:	e51b3010 	ldr	r3, [fp, #-16]
  1077e4:	e1530002 	cmp	r3, r2
  1077e8:	aa00001f 	bge	10786c <socket_alloc+0x1d8>
  1077ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077f0:	e5932004 	ldr	r2, [r3, #4]
  1077f4:	e51b3010 	ldr	r3, [fp, #-16]
  1077f8:	e1a03103 	lsl	r3, r3, #2
  1077fc:	e0823003 	add	r3, r2, r3
  107800:	e5933000 	ldr	r3, [r3]
  107804:	e3530000 	cmp	r3, #0
  107808:	1a000017 	bne	10786c <socket_alloc+0x1d8>
    {
        st->sockets[idx] = rt_calloc(1, sizeof(struct sal_socket));
  10780c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107810:	e5932004 	ldr	r2, [r3, #4]
  107814:	e51b3010 	ldr	r3, [fp, #-16]
  107818:	e1a03103 	lsl	r3, r3, #2
  10781c:	e0824003 	add	r4, r2, r3
  107820:	e3a0101c 	mov	r1, #28
  107824:	e3a00001 	mov	r0, #1
  107828:	ebffedf7 	bl	10300c <rt_calloc>
  10782c:	e1a03000 	mov	r3, r0
  107830:	e5843000 	str	r3, [r4]
        if (st->sockets[idx] == RT_NULL)
  107834:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107838:	e5932004 	ldr	r2, [r3, #4]
  10783c:	e51b3010 	ldr	r3, [fp, #-16]
  107840:	e1a03103 	lsl	r3, r3, #2
  107844:	e0823003 	add	r3, r2, r3
  107848:	e5933000 	ldr	r3, [r3]
  10784c:	e3530000 	cmp	r3, #0
  107850:	1a000005 	bne	10786c <socket_alloc+0x1d8>
        {
            idx = st->max_socket;
  107854:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107858:	e5933000 	ldr	r3, [r3]
  10785c:	e50b3010 	str	r3, [fp, #-16]
  107860:	ea000002 	b	107870 <socket_alloc+0x1dc>
            goto __result; /* return st->max_socket */
  107864:	e320f000 	nop	{0}
  107868:	ea000000 	b	107870 <socket_alloc+0x1dc>
        }
    }

__result:
  10786c:	e320f000 	nop	{0}
    return idx;
  107870:	e51b3010 	ldr	r3, [fp, #-16]
}
  107874:	e1a00003 	mov	r0, r3
  107878:	e24bd008 	sub	sp, fp, #8
  10787c:	e8bd8810 	pop	{r4, fp, pc}

00107880 <socket_free>:

static void socket_free(struct sal_socket_table *st, int idx)
{
  107880:	e92d4800 	push	{fp, lr}
  107884:	e28db004 	add	fp, sp, #4
  107888:	e24dd010 	sub	sp, sp, #16
  10788c:	e50b0010 	str	r0, [fp, #-16]
  107890:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;

    sock = st->sockets[idx];
  107894:	e51b3010 	ldr	r3, [fp, #-16]
  107898:	e5932004 	ldr	r2, [r3, #4]
  10789c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1078a0:	e1a03103 	lsl	r3, r3, #2
  1078a4:	e0823003 	add	r3, r2, r3
  1078a8:	e5933000 	ldr	r3, [r3]
  1078ac:	e50b3008 	str	r3, [fp, #-8]
    st->sockets[idx] = RT_NULL;
  1078b0:	e51b3010 	ldr	r3, [fp, #-16]
  1078b4:	e5932004 	ldr	r2, [r3, #4]
  1078b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1078bc:	e1a03103 	lsl	r3, r3, #2
  1078c0:	e0823003 	add	r3, r2, r3
  1078c4:	e3a02000 	mov	r2, #0
  1078c8:	e5832000 	str	r2, [r3]
    rt_free(sock);
  1078cc:	e51b0008 	ldr	r0, [fp, #-8]
  1078d0:	ebffedb9 	bl	102fbc <rt_free>
}
  1078d4:	e320f000 	nop	{0}
  1078d8:	e24bd004 	sub	sp, fp, #4
  1078dc:	e8bd8800 	pop	{fp, pc}

001078e0 <socket_new>:

static int socket_new(void)
{
  1078e0:	e92d4800 	push	{fp, lr}
  1078e4:	e28db004 	add	fp, sp, #4
  1078e8:	e24dd010 	sub	sp, sp, #16
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  1078ec:	e30d3460 	movw	r3, #54368	; 0xd460
  1078f0:	e3403014 	movt	r3, #20
  1078f4:	e50b300c 	str	r3, [fp, #-12]
    int idx;

    sal_lock();
  1078f8:	ebfffea6 	bl	107398 <sal_lock>

    /* find an empty sal socket entry */
    idx = socket_alloc(st, 0);
  1078fc:	e3a01000 	mov	r1, #0
  107900:	e51b000c 	ldr	r0, [fp, #-12]
  107904:	ebffff62 	bl	107694 <socket_alloc>
  107908:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty sal socket entry */
    if (idx == (int) st->max_socket)
  10790c:	e51b300c 	ldr	r3, [fp, #-12]
  107910:	e5933000 	ldr	r3, [r3]
  107914:	e1a02003 	mov	r2, r3
  107918:	e51b3008 	ldr	r3, [fp, #-8]
  10791c:	e1530002 	cmp	r3, r2
  107920:	1a000002 	bne	107930 <socket_new+0x50>
    {
        idx = -(1 + SAL_SOCKET_OFFSET);
  107924:	e3e03000 	mvn	r3, #0
  107928:	e50b3008 	str	r3, [fp, #-8]
        goto __result;
  10792c:	ea000012 	b	10797c <socket_new+0x9c>
    }

    sock = st->sockets[idx];
  107930:	e51b300c 	ldr	r3, [fp, #-12]
  107934:	e5932004 	ldr	r2, [r3, #4]
  107938:	e51b3008 	ldr	r3, [fp, #-8]
  10793c:	e1a03103 	lsl	r3, r3, #2
  107940:	e0823003 	add	r3, r2, r3
  107944:	e5933000 	ldr	r3, [r3]
  107948:	e50b3010 	str	r3, [fp, #-16]
    sock->socket = idx + SAL_SOCKET_OFFSET;
  10794c:	e51b3010 	ldr	r3, [fp, #-16]
  107950:	e51b2008 	ldr	r2, [fp, #-8]
  107954:	e5832004 	str	r2, [r3, #4]
    sock->magic = SAL_SOCKET_MAGIC;
  107958:	e51b3010 	ldr	r3, [fp, #-16]
  10795c:	e3052a10 	movw	r2, #23056	; 0x5a10
  107960:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  107964:	e51b3010 	ldr	r3, [fp, #-16]
  107968:	e3a02000 	mov	r2, #0
  10796c:	e5832014 	str	r2, [r3, #20]
    sock->user_data = RT_NULL;
  107970:	e51b3010 	ldr	r3, [fp, #-16]
  107974:	e3a02000 	mov	r2, #0
  107978:	e5832018 	str	r2, [r3, #24]
#ifdef SAL_USING_TLS
    sock->user_data_tls = RT_NULL;
#endif

__result:
    sal_unlock();
  10797c:	ebfffe99 	bl	1073e8 <sal_unlock>
    return idx + SAL_SOCKET_OFFSET;
  107980:	e51b3008 	ldr	r3, [fp, #-8]
}
  107984:	e1a00003 	mov	r0, r3
  107988:	e24bd004 	sub	sp, fp, #4
  10798c:	e8bd8800 	pop	{fp, pc}

00107990 <socket_delete>:

static void socket_delete(int socket)
{
  107990:	e92d4800 	push	{fp, lr}
  107994:	e28db004 	add	fp, sp, #4
  107998:	e24dd018 	sub	sp, sp, #24
  10799c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  1079a0:	e30d3460 	movw	r3, #54368	; 0xd460
  1079a4:	e3403014 	movt	r3, #20
  1079a8:	e50b3008 	str	r3, [fp, #-8]
    int idx;

    idx = socket - SAL_SOCKET_OFFSET;
  1079ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1079b0:	e50b300c 	str	r3, [fp, #-12]
    if (idx < 0 || idx >= (int) st->max_socket)
  1079b4:	e51b300c 	ldr	r3, [fp, #-12]
  1079b8:	e3530000 	cmp	r3, #0
  1079bc:	ba00001d 	blt	107a38 <socket_delete+0xa8>
  1079c0:	e51b3008 	ldr	r3, [fp, #-8]
  1079c4:	e5933000 	ldr	r3, [r3]
  1079c8:	e1a02003 	mov	r2, r3
  1079cc:	e51b300c 	ldr	r3, [fp, #-12]
  1079d0:	e1530002 	cmp	r3, r2
  1079d4:	aa000017 	bge	107a38 <socket_delete+0xa8>
    {
        return;
    }
    sal_lock();
  1079d8:	ebfffe6e 	bl	107398 <sal_lock>
    sock = sal_get_socket(socket);
  1079dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1079e0:	ebfffe41 	bl	1072ec <sal_get_socket>
  1079e4:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(sock != RT_NULL);
  1079e8:	e51b3010 	ldr	r3, [fp, #-16]
  1079ec:	e3530000 	cmp	r3, #0
  1079f0:	1a000005 	bne	107a0c <socket_delete+0x7c>
  1079f4:	e3002223 	movw	r2, #547	; 0x223
  1079f8:	e3061110 	movw	r1, #24848	; 0x6110
  1079fc:	e3401014 	movt	r1, #20
  107a00:	e3060070 	movw	r0, #24688	; 0x6070
  107a04:	e3400014 	movt	r0, #20
  107a08:	ebffeee2 	bl	103598 <rt_assert_handler>
    sock->magic = 0;
  107a0c:	e51b3010 	ldr	r3, [fp, #-16]
  107a10:	e3a02000 	mov	r2, #0
  107a14:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  107a18:	e51b3010 	ldr	r3, [fp, #-16]
  107a1c:	e3a02000 	mov	r2, #0
  107a20:	e5832014 	str	r2, [r3, #20]
    socket_free(st, idx);
  107a24:	e51b100c 	ldr	r1, [fp, #-12]
  107a28:	e51b0008 	ldr	r0, [fp, #-8]
  107a2c:	ebffff93 	bl	107880 <socket_free>
    sal_unlock();
  107a30:	ebfffe6c 	bl	1073e8 <sal_unlock>
  107a34:	ea000000 	b	107a3c <socket_delete+0xac>
        return;
  107a38:	e320f000 	nop	{0}
}
  107a3c:	e24bd004 	sub	sp, fp, #4
  107a40:	e8bd8800 	pop	{fp, pc}

00107a44 <sal_accept>:

int sal_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  107a44:	e92d4800 	push	{fp, lr}
  107a48:	e28db004 	add	fp, sp, #4
  107a4c:	e24dd028 	sub	sp, sp, #40	; 0x28
  107a50:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  107a54:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  107a58:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107a5c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107a60:	ebfffe21 	bl	1072ec <sal_get_socket>
  107a64:	e50b0008 	str	r0, [fp, #-8]
  107a68:	e51b3008 	ldr	r3, [fp, #-8]
  107a6c:	e3530000 	cmp	r3, #0
  107a70:	1a000001 	bne	107a7c <sal_accept+0x38>
  107a74:	e3e03000 	mvn	r3, #0
  107a78:	ea000059 	b	107be4 <sal_accept+0x1a0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  107a7c:	e51b3008 	ldr	r3, [fp, #-8]
  107a80:	e5933014 	ldr	r3, [r3, #20]
  107a84:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107a88:	e2033001 	and	r3, r3, #1
  107a8c:	e3530000 	cmp	r3, #0
  107a90:	1a000001 	bne	107a9c <sal_accept+0x58>
  107a94:	e3e03000 	mvn	r3, #0
  107a98:	ea000051 	b	107be4 <sal_accept+0x1a0>

    /* check the network interface socket operations */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, accept);
  107a9c:	e51b3008 	ldr	r3, [fp, #-8]
  107aa0:	e5933014 	ldr	r3, [r3, #20]
  107aa4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107aa8:	e50b300c 	str	r3, [fp, #-12]
  107aac:	e51b300c 	ldr	r3, [fp, #-12]
  107ab0:	e5933008 	ldr	r3, [r3, #8]
  107ab4:	e5933014 	ldr	r3, [r3, #20]
  107ab8:	e3530000 	cmp	r3, #0
  107abc:	1a000001 	bne	107ac8 <sal_accept+0x84>
  107ac0:	e3e03000 	mvn	r3, #0
  107ac4:	ea000046 	b	107be4 <sal_accept+0x1a0>

    new_socket = pf->skt_ops->accept((int)(size_t)sock->user_data, addr, addrlen);
  107ac8:	e51b300c 	ldr	r3, [fp, #-12]
  107acc:	e5933008 	ldr	r3, [r3, #8]
  107ad0:	e5933014 	ldr	r3, [r3, #20]
  107ad4:	e51b2008 	ldr	r2, [fp, #-8]
  107ad8:	e5922018 	ldr	r2, [r2, #24]
  107adc:	e1a00002 	mov	r0, r2
  107ae0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107ae4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  107ae8:	e12fff33 	blx	r3
  107aec:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  107af0:	e51b3010 	ldr	r3, [fp, #-16]
  107af4:	e3730001 	cmn	r3, #1
  107af8:	0a000038 	beq	107be0 <sal_accept+0x19c>
        int retval;
        int new_sal_socket;
        struct sal_socket *new_sock;

        /* allocate a new socket structure and registered socket options */
        new_sal_socket = socket_new();
  107afc:	ebffff77 	bl	1078e0 <socket_new>
  107b00:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        new_sock = sal_get_socket(new_sal_socket);
  107b04:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107b08:	ebfffdf7 	bl	1072ec <sal_get_socket>
  107b0c:	e1a03000 	mov	r3, r0
  107b10:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (new_sock == RT_NULL)
  107b14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107b18:	e3530000 	cmp	r3, #0
  107b1c:	1a000006 	bne	107b3c <sal_accept+0xf8>
        {
            pf->skt_ops->closesocket(new_socket);
  107b20:	e51b300c 	ldr	r3, [fp, #-12]
  107b24:	e5933008 	ldr	r3, [r3, #8]
  107b28:	e5933004 	ldr	r3, [r3, #4]
  107b2c:	e51b0010 	ldr	r0, [fp, #-16]
  107b30:	e12fff33 	blx	r3
            return -1;
  107b34:	e3e03000 	mvn	r3, #0
  107b38:	ea000029 	b	107be4 <sal_accept+0x1a0>
        }

        retval = socket_init(sock->domain, sock->type, sock->protocol, &new_sock);
  107b3c:	e51b3008 	ldr	r3, [fp, #-8]
  107b40:	e5930008 	ldr	r0, [r3, #8]
  107b44:	e51b3008 	ldr	r3, [fp, #-8]
  107b48:	e593100c 	ldr	r1, [r3, #12]
  107b4c:	e51b3008 	ldr	r3, [fp, #-8]
  107b50:	e5932010 	ldr	r2, [r3, #16]
  107b54:	e24b301c 	sub	r3, fp, #28
  107b58:	ebfffe62 	bl	1074e8 <socket_init>
  107b5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (retval < 0)
  107b60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107b64:	e3530000 	cmp	r3, #0
  107b68:	aa000017 	bge	107bcc <sal_accept+0x188>
        {
            pf->skt_ops->closesocket(new_socket);
  107b6c:	e51b300c 	ldr	r3, [fp, #-12]
  107b70:	e5933008 	ldr	r3, [r3, #8]
  107b74:	e5933004 	ldr	r3, [r3, #4]
  107b78:	e51b0010 	ldr	r0, [fp, #-16]
  107b7c:	e12fff33 	blx	r3
            rt_memset(new_sock, 0x00, sizeof(struct sal_socket));
  107b80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107b84:	e3a0201c 	mov	r2, #28
  107b88:	e3a01000 	mov	r1, #0
  107b8c:	e1a00003 	mov	r0, r3
  107b90:	ebffedcc 	bl	1032c8 <rt_memset>
            /* socket init failed, delete socket */
            socket_delete(new_sal_socket);
  107b94:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107b98:	ebffff7c 	bl	107990 <socket_delete>
            LOG_E("New socket registered failed, return error %d.", retval);
  107b9c:	e3050f20 	movw	r0, #24352	; 0x5f20
  107ba0:	e3400014 	movt	r0, #20
  107ba4:	ebffed5a 	bl	103114 <rt_kprintf>
  107ba8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  107bac:	e3060080 	movw	r0, #24704	; 0x6080
  107bb0:	e3400014 	movt	r0, #20
  107bb4:	ebffed56 	bl	103114 <rt_kprintf>
  107bb8:	e3050f54 	movw	r0, #24404	; 0x5f54
  107bbc:	e3400014 	movt	r0, #20
  107bc0:	ebffed53 	bl	103114 <rt_kprintf>
            return -1;
  107bc4:	e3e03000 	mvn	r3, #0
  107bc8:	ea000005 	b	107be4 <sal_accept+0x1a0>
        }

        /* socket structure user_data used to store the acquired new socket */
        new_sock->user_data = (void *)(size_t)new_socket;
  107bcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107bd0:	e51b2010 	ldr	r2, [fp, #-16]
  107bd4:	e5832018 	str	r2, [r3, #24]

        return new_sal_socket;
  107bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107bdc:	ea000000 	b	107be4 <sal_accept+0x1a0>
    }

    return -1;
  107be0:	e3e03000 	mvn	r3, #0
}
  107be4:	e1a00003 	mov	r0, r3
  107be8:	e24bd004 	sub	sp, fp, #4
  107bec:	e8bd8800 	pop	{fp, pc}

00107bf0 <sal_sockaddr_to_ipaddr>:

static void sal_sockaddr_to_ipaddr(const struct sockaddr *name, ip_addr_t *local_ipaddr)
{
  107bf0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  107bf4:	e28db000 	add	fp, sp, #0
  107bf8:	e24dd014 	sub	sp, sp, #20
  107bfc:	e50b0010 	str	r0, [fp, #-16]
  107c00:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    const struct sockaddr_in *svr_addr = (const struct sockaddr_in *) name;
  107c04:	e51b3010 	ldr	r3, [fp, #-16]
  107c08:	e50b3008 	str	r3, [fp, #-8]

#if NETDEV_IPV4 && NETDEV_IPV6
    local_ipaddr->u_addr.ip4.addr = svr_addr->sin_addr.s_addr;
    local_ipaddr->type = IPADDR_TYPE_V4;
#elif NETDEV_IPV4
    local_ipaddr->addr = svr_addr->sin_addr.s_addr;
  107c0c:	e51b3008 	ldr	r3, [fp, #-8]
  107c10:	e5932004 	ldr	r2, [r3, #4]
  107c14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107c18:	e5832000 	str	r2, [r3]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
}
  107c1c:	e320f000 	nop	{0}
  107c20:	e28bd000 	add	sp, fp, #0
  107c24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  107c28:	e12fff1e 	bx	lr

00107c2c <sal_bind>:

int sal_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  107c2c:	e92d4800 	push	{fp, lr}
  107c30:	e28db004 	add	fp, sp, #4
  107c34:	e24dd030 	sub	sp, sp, #48	; 0x30
  107c38:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  107c3c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  107c40:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    ip_addr_t input_ipaddr;

    RT_ASSERT(name);
  107c44:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107c48:	e3530000 	cmp	r3, #0
  107c4c:	1a000005 	bne	107c68 <sal_bind+0x3c>
  107c50:	e3002271 	movw	r2, #625	; 0x271
  107c54:	e3061120 	movw	r1, #24864	; 0x6120
  107c58:	e3401014 	movt	r1, #20
  107c5c:	e30600b0 	movw	r0, #24752	; 0x60b0
  107c60:	e3400014 	movt	r0, #20
  107c64:	ebffee4b 	bl	103598 <rt_assert_handler>

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107c68:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  107c6c:	ebfffd9e 	bl	1072ec <sal_get_socket>
  107c70:	e50b0008 	str	r0, [fp, #-8]
  107c74:	e51b3008 	ldr	r3, [fp, #-8]
  107c78:	e3530000 	cmp	r3, #0
  107c7c:	1a000001 	bne	107c88 <sal_bind+0x5c>
  107c80:	e3e03000 	mvn	r3, #0
  107c84:	ea000062 	b	107e14 <sal_bind+0x1e8>

    /* bind network interface by ip address */
    sal_sockaddr_to_ipaddr(name, &input_ipaddr);
  107c88:	e24b3020 	sub	r3, fp, #32
  107c8c:	e1a01003 	mov	r1, r3
  107c90:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  107c94:	ebffffd5 	bl	107bf0 <sal_sockaddr_to_ipaddr>

    /* check input ipaddr is default netdev ipaddr */
    if (!ip_addr_isany_val(input_ipaddr))
  107c98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107c9c:	e3530000 	cmp	r3, #0
  107ca0:	0a000046 	beq	107dc0 <sal_bind+0x194>
    {
        struct sal_proto_family *input_pf = RT_NULL, *local_pf = RT_NULL;
  107ca4:	e3a03000 	mov	r3, #0
  107ca8:	e50b300c 	str	r3, [fp, #-12]
  107cac:	e3a03000 	mov	r3, #0
  107cb0:	e50b3010 	str	r3, [fp, #-16]
        struct netdev *new_netdev = RT_NULL;
  107cb4:	e3a03000 	mov	r3, #0
  107cb8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

        new_netdev = netdev_get_by_ipaddr(&input_ipaddr);
  107cbc:	e24b3020 	sub	r3, fp, #32
  107cc0:	e1a00003 	mov	r0, r3
  107cc4:	ebfff5df 	bl	105448 <netdev_get_by_ipaddr>
  107cc8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (new_netdev == RT_NULL)
  107ccc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107cd0:	e3530000 	cmp	r3, #0
  107cd4:	1a000001 	bne	107ce0 <sal_bind+0xb4>
        {
            return -1;
  107cd8:	e3e03000 	mvn	r3, #0
  107cdc:	ea00004c 	b	107e14 <sal_bind+0x1e8>
        }

        /* get input and local ip address proto_family */
        SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, local_pf, bind);
  107ce0:	e51b3008 	ldr	r3, [fp, #-8]
  107ce4:	e5933014 	ldr	r3, [r3, #20]
  107ce8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107cec:	e50b3010 	str	r3, [fp, #-16]
  107cf0:	e51b3010 	ldr	r3, [fp, #-16]
  107cf4:	e5933008 	ldr	r3, [r3, #8]
  107cf8:	e5933008 	ldr	r3, [r3, #8]
  107cfc:	e3530000 	cmp	r3, #0
  107d00:	1a000001 	bne	107d0c <sal_bind+0xe0>
  107d04:	e3e03000 	mvn	r3, #0
  107d08:	ea000041 	b	107e14 <sal_bind+0x1e8>
        SAL_NETDEV_SOCKETOPS_VALID(new_netdev, input_pf, bind);
  107d0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107d10:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107d14:	e50b300c 	str	r3, [fp, #-12]
  107d18:	e51b300c 	ldr	r3, [fp, #-12]
  107d1c:	e5933008 	ldr	r3, [r3, #8]
  107d20:	e5933008 	ldr	r3, [r3, #8]
  107d24:	e3530000 	cmp	r3, #0
  107d28:	1a000001 	bne	107d34 <sal_bind+0x108>
  107d2c:	e3e03000 	mvn	r3, #0
  107d30:	ea000037 	b	107e14 <sal_bind+0x1e8>

        /* check the network interface protocol family type */
        if (input_pf->family != local_pf->family)
  107d34:	e51b300c 	ldr	r3, [fp, #-12]
  107d38:	e5932000 	ldr	r2, [r3]
  107d3c:	e51b3010 	ldr	r3, [fp, #-16]
  107d40:	e5933000 	ldr	r3, [r3]
  107d44:	e1520003 	cmp	r2, r3
  107d48:	0a00001c 	beq	107dc0 <sal_bind+0x194>
        {
            int new_socket = -1;
  107d4c:	e3e03000 	mvn	r3, #0
  107d50:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

            /* protocol family is different, close old socket and create new socket by input ip address */
            local_pf->skt_ops->closesocket(socket);
  107d54:	e51b3010 	ldr	r3, [fp, #-16]
  107d58:	e5933008 	ldr	r3, [r3, #8]
  107d5c:	e5933004 	ldr	r3, [r3, #4]
  107d60:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  107d64:	e12fff33 	blx	r3

            new_socket = input_pf->skt_ops->socket(input_pf->family, sock->type, sock->protocol);
  107d68:	e51b300c 	ldr	r3, [fp, #-12]
  107d6c:	e5933008 	ldr	r3, [r3, #8]
  107d70:	e5933000 	ldr	r3, [r3]
  107d74:	e51b200c 	ldr	r2, [fp, #-12]
  107d78:	e5920000 	ldr	r0, [r2]
  107d7c:	e51b2008 	ldr	r2, [fp, #-8]
  107d80:	e592100c 	ldr	r1, [r2, #12]
  107d84:	e51b2008 	ldr	r2, [fp, #-8]
  107d88:	e5922010 	ldr	r2, [r2, #16]
  107d8c:	e12fff33 	blx	r3
  107d90:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
            if (new_socket < 0)
  107d94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107d98:	e3530000 	cmp	r3, #0
  107d9c:	aa000001 	bge	107da8 <sal_bind+0x17c>
            {
                return -1;
  107da0:	e3e03000 	mvn	r3, #0
  107da4:	ea00001a 	b	107e14 <sal_bind+0x1e8>
            }
            sock->netdev = new_netdev;
  107da8:	e51b3008 	ldr	r3, [fp, #-8]
  107dac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  107db0:	e5832014 	str	r2, [r3, #20]
            sock->user_data = (void *)(size_t)new_socket;
  107db4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107db8:	e51b3008 	ldr	r3, [fp, #-8]
  107dbc:	e5832018 	str	r2, [r3, #24]
        }
    }

    /* check and get protocol families by the network interface device */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, bind);
  107dc0:	e51b3008 	ldr	r3, [fp, #-8]
  107dc4:	e5933014 	ldr	r3, [r3, #20]
  107dc8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107dcc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  107dd0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107dd4:	e5933008 	ldr	r3, [r3, #8]
  107dd8:	e5933008 	ldr	r3, [r3, #8]
  107ddc:	e3530000 	cmp	r3, #0
  107de0:	1a000001 	bne	107dec <sal_bind+0x1c0>
  107de4:	e3e03000 	mvn	r3, #0
  107de8:	ea000009 	b	107e14 <sal_bind+0x1e8>
    return pf->skt_ops->bind((int)(size_t)sock->user_data, name, namelen);
  107dec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107df0:	e5933008 	ldr	r3, [r3, #8]
  107df4:	e5933008 	ldr	r3, [r3, #8]
  107df8:	e51b2008 	ldr	r2, [fp, #-8]
  107dfc:	e5922018 	ldr	r2, [r2, #24]
  107e00:	e1a00002 	mov	r0, r2
  107e04:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  107e08:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  107e0c:	e12fff33 	blx	r3
  107e10:	e1a03000 	mov	r3, r0
}
  107e14:	e1a00003 	mov	r0, r3
  107e18:	e24bd004 	sub	sp, fp, #4
  107e1c:	e8bd8800 	pop	{fp, pc}

00107e20 <sal_shutdown>:

int sal_shutdown(int socket, int how)
{
  107e20:	e92d4800 	push	{fp, lr}
  107e24:	e28db004 	add	fp, sp, #4
  107e28:	e24dd018 	sub	sp, sp, #24
  107e2c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  107e30:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  107e34:	e3a03000 	mov	r3, #0
  107e38:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107e3c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  107e40:	ebfffd29 	bl	1072ec <sal_get_socket>
  107e44:	e50b000c 	str	r0, [fp, #-12]
  107e48:	e51b300c 	ldr	r3, [fp, #-12]
  107e4c:	e3530000 	cmp	r3, #0
  107e50:	1a000001 	bne	107e5c <sal_shutdown+0x3c>
  107e54:	e3e03000 	mvn	r3, #0
  107e58:	ea00001b 	b	107ecc <sal_shutdown+0xac>

    /* shutdown operation not need to check network interface status */
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, shutdown);
  107e5c:	e51b300c 	ldr	r3, [fp, #-12]
  107e60:	e5933014 	ldr	r3, [r3, #20]
  107e64:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107e68:	e50b3010 	str	r3, [fp, #-16]
  107e6c:	e51b3010 	ldr	r3, [fp, #-16]
  107e70:	e5933008 	ldr	r3, [r3, #8]
  107e74:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107e78:	e3530000 	cmp	r3, #0
  107e7c:	1a000001 	bne	107e88 <sal_shutdown+0x68>
  107e80:	e3e03000 	mvn	r3, #0
  107e84:	ea000010 	b	107ecc <sal_shutdown+0xac>

    if (pf->skt_ops->shutdown((int)(size_t)sock->user_data, how) == 0)
  107e88:	e51b3010 	ldr	r3, [fp, #-16]
  107e8c:	e5933008 	ldr	r3, [r3, #8]
  107e90:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107e94:	e51b200c 	ldr	r2, [fp, #-12]
  107e98:	e5922018 	ldr	r2, [r2, #24]
  107e9c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  107ea0:	e1a00002 	mov	r0, r2
  107ea4:	e12fff33 	blx	r3
  107ea8:	e1a03000 	mov	r3, r0
  107eac:	e3530000 	cmp	r3, #0
  107eb0:	1a000002 	bne	107ec0 <sal_shutdown+0xa0>
            {
                return -1;
            }
        }
#endif
        error = 0;
  107eb4:	e3a03000 	mov	r3, #0
  107eb8:	e50b3008 	str	r3, [fp, #-8]
  107ebc:	ea000001 	b	107ec8 <sal_shutdown+0xa8>
    }
    else
    {
        error = -1;
  107ec0:	e3e03000 	mvn	r3, #0
  107ec4:	e50b3008 	str	r3, [fp, #-8]
    }


    return error;
  107ec8:	e51b3008 	ldr	r3, [fp, #-8]
}
  107ecc:	e1a00003 	mov	r0, r3
  107ed0:	e24bd004 	sub	sp, fp, #4
  107ed4:	e8bd8800 	pop	{fp, pc}

00107ed8 <sal_getpeername>:

int sal_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  107ed8:	e92d4800 	push	{fp, lr}
  107edc:	e28db004 	add	fp, sp, #4
  107ee0:	e24dd018 	sub	sp, sp, #24
  107ee4:	e50b0010 	str	r0, [fp, #-16]
  107ee8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  107eec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107ef0:	e51b0010 	ldr	r0, [fp, #-16]
  107ef4:	ebfffcfc 	bl	1072ec <sal_get_socket>
  107ef8:	e50b0008 	str	r0, [fp, #-8]
  107efc:	e51b3008 	ldr	r3, [fp, #-8]
  107f00:	e3530000 	cmp	r3, #0
  107f04:	1a000001 	bne	107f10 <sal_getpeername+0x38>
  107f08:	e3e03000 	mvn	r3, #0
  107f0c:	ea000014 	b	107f64 <sal_getpeername+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getpeername);
  107f10:	e51b3008 	ldr	r3, [fp, #-8]
  107f14:	e5933014 	ldr	r3, [r3, #20]
  107f18:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107f1c:	e50b300c 	str	r3, [fp, #-12]
  107f20:	e51b300c 	ldr	r3, [fp, #-12]
  107f24:	e5933008 	ldr	r3, [r3, #8]
  107f28:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  107f2c:	e3530000 	cmp	r3, #0
  107f30:	1a000001 	bne	107f3c <sal_getpeername+0x64>
  107f34:	e3e03000 	mvn	r3, #0
  107f38:	ea000009 	b	107f64 <sal_getpeername+0x8c>

    return pf->skt_ops->getpeername((int)(size_t)sock->user_data, name, namelen);
  107f3c:	e51b300c 	ldr	r3, [fp, #-12]
  107f40:	e5933008 	ldr	r3, [r3, #8]
  107f44:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  107f48:	e51b2008 	ldr	r2, [fp, #-8]
  107f4c:	e5922018 	ldr	r2, [r2, #24]
  107f50:	e1a00002 	mov	r0, r2
  107f54:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107f58:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  107f5c:	e12fff33 	blx	r3
  107f60:	e1a03000 	mov	r3, r0
}
  107f64:	e1a00003 	mov	r0, r3
  107f68:	e24bd004 	sub	sp, fp, #4
  107f6c:	e8bd8800 	pop	{fp, pc}

00107f70 <sal_getsockname>:

int sal_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  107f70:	e92d4800 	push	{fp, lr}
  107f74:	e28db004 	add	fp, sp, #4
  107f78:	e24dd018 	sub	sp, sp, #24
  107f7c:	e50b0010 	str	r0, [fp, #-16]
  107f80:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  107f84:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107f88:	e51b0010 	ldr	r0, [fp, #-16]
  107f8c:	ebfffcd6 	bl	1072ec <sal_get_socket>
  107f90:	e50b0008 	str	r0, [fp, #-8]
  107f94:	e51b3008 	ldr	r3, [fp, #-8]
  107f98:	e3530000 	cmp	r3, #0
  107f9c:	1a000001 	bne	107fa8 <sal_getsockname+0x38>
  107fa0:	e3e03000 	mvn	r3, #0
  107fa4:	ea000014 	b	107ffc <sal_getsockname+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockname);
  107fa8:	e51b3008 	ldr	r3, [fp, #-8]
  107fac:	e5933014 	ldr	r3, [r3, #20]
  107fb0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107fb4:	e50b300c 	str	r3, [fp, #-12]
  107fb8:	e51b300c 	ldr	r3, [fp, #-12]
  107fbc:	e5933008 	ldr	r3, [r3, #8]
  107fc0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  107fc4:	e3530000 	cmp	r3, #0
  107fc8:	1a000001 	bne	107fd4 <sal_getsockname+0x64>
  107fcc:	e3e03000 	mvn	r3, #0
  107fd0:	ea000009 	b	107ffc <sal_getsockname+0x8c>

    return pf->skt_ops->getsockname((int)(size_t)sock->user_data, name, namelen);
  107fd4:	e51b300c 	ldr	r3, [fp, #-12]
  107fd8:	e5933008 	ldr	r3, [r3, #8]
  107fdc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  107fe0:	e51b2008 	ldr	r2, [fp, #-8]
  107fe4:	e5922018 	ldr	r2, [r2, #24]
  107fe8:	e1a00002 	mov	r0, r2
  107fec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107ff0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  107ff4:	e12fff33 	blx	r3
  107ff8:	e1a03000 	mov	r3, r0
}
  107ffc:	e1a00003 	mov	r0, r3
  108000:	e24bd004 	sub	sp, fp, #4
  108004:	e8bd8800 	pop	{fp, pc}

00108008 <sal_getsockopt>:

int sal_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  108008:	e92d4810 	push	{r4, fp, lr}
  10800c:	e28db008 	add	fp, sp, #8
  108010:	e24dd024 	sub	sp, sp, #36	; 0x24
  108014:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108018:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10801c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108020:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108024:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108028:	ebfffcaf 	bl	1072ec <sal_get_socket>
  10802c:	e50b0010 	str	r0, [fp, #-16]
  108030:	e51b3010 	ldr	r3, [fp, #-16]
  108034:	e3530000 	cmp	r3, #0
  108038:	1a000001 	bne	108044 <sal_getsockopt+0x3c>
  10803c:	e3e03000 	mvn	r3, #0
  108040:	ea000017 	b	1080a4 <sal_getsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockopt);
  108044:	e51b3010 	ldr	r3, [fp, #-16]
  108048:	e5933014 	ldr	r3, [r3, #20]
  10804c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108050:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108058:	e5933008 	ldr	r3, [r3, #8]
  10805c:	e5933020 	ldr	r3, [r3, #32]
  108060:	e3530000 	cmp	r3, #0
  108064:	1a000001 	bne	108070 <sal_getsockopt+0x68>
  108068:	e3e03000 	mvn	r3, #0
  10806c:	ea00000c 	b	1080a4 <sal_getsockopt+0x9c>

    return pf->skt_ops->getsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  108070:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108074:	e5933008 	ldr	r3, [r3, #8]
  108078:	e5934020 	ldr	r4, [r3, #32]
  10807c:	e51b3010 	ldr	r3, [fp, #-16]
  108080:	e5933018 	ldr	r3, [r3, #24]
  108084:	e1a00003 	mov	r0, r3
  108088:	e59b3004 	ldr	r3, [fp, #4]
  10808c:	e58d3000 	str	r3, [sp]
  108090:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108094:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108098:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10809c:	e12fff34 	blx	r4
  1080a0:	e1a03000 	mov	r3, r0
}
  1080a4:	e1a00003 	mov	r0, r3
  1080a8:	e24bd008 	sub	sp, fp, #8
  1080ac:	e8bd8810 	pop	{r4, fp, pc}

001080b0 <sal_setsockopt>:

int sal_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  1080b0:	e92d4810 	push	{r4, fp, lr}
  1080b4:	e28db008 	add	fp, sp, #8
  1080b8:	e24dd024 	sub	sp, sp, #36	; 0x24
  1080bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1080c0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1080c4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1080c8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1080cc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1080d0:	ebfffc85 	bl	1072ec <sal_get_socket>
  1080d4:	e50b0010 	str	r0, [fp, #-16]
  1080d8:	e51b3010 	ldr	r3, [fp, #-16]
  1080dc:	e3530000 	cmp	r3, #0
  1080e0:	1a000001 	bne	1080ec <sal_setsockopt+0x3c>
  1080e4:	e3e03000 	mvn	r3, #0
  1080e8:	ea000017 	b	10814c <sal_setsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, setsockopt);
  1080ec:	e51b3010 	ldr	r3, [fp, #-16]
  1080f0:	e5933014 	ldr	r3, [r3, #20]
  1080f4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1080f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1080fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108100:	e5933008 	ldr	r3, [r3, #8]
  108104:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  108108:	e3530000 	cmp	r3, #0
  10810c:	1a000001 	bne	108118 <sal_setsockopt+0x68>
  108110:	e3e03000 	mvn	r3, #0
  108114:	ea00000c 	b	10814c <sal_setsockopt+0x9c>
    else
    {
        return pf->skt_ops->setsockopt((int) sock->user_data, level, optname, optval, optlen);
    }
#else
    return pf->skt_ops->setsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  108118:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10811c:	e5933008 	ldr	r3, [r3, #8]
  108120:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  108124:	e51b3010 	ldr	r3, [fp, #-16]
  108128:	e5933018 	ldr	r3, [r3, #24]
  10812c:	e1a00003 	mov	r0, r3
  108130:	e59b3004 	ldr	r3, [fp, #4]
  108134:	e58d3000 	str	r3, [sp]
  108138:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10813c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108140:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108144:	e12fff34 	blx	r4
  108148:	e1a03000 	mov	r3, r0
#endif /* SAL_USING_TLS */
}
  10814c:	e1a00003 	mov	r0, r3
  108150:	e24bd008 	sub	sp, fp, #8
  108154:	e8bd8810 	pop	{r4, fp, pc}

00108158 <sal_connect>:

int sal_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108158:	e92d4800 	push	{fp, lr}
  10815c:	e28db004 	add	fp, sp, #4
  108160:	e24dd020 	sub	sp, sp, #32
  108164:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108168:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10816c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int ret;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108170:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108174:	ebfffc5c 	bl	1072ec <sal_get_socket>
  108178:	e50b0008 	str	r0, [fp, #-8]
  10817c:	e51b3008 	ldr	r3, [fp, #-8]
  108180:	e3530000 	cmp	r3, #0
  108184:	1a000001 	bne	108190 <sal_connect+0x38>
  108188:	e3e03000 	mvn	r3, #0
  10818c:	ea00001d 	b	108208 <sal_connect+0xb0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  108190:	e51b3008 	ldr	r3, [fp, #-8]
  108194:	e5933014 	ldr	r3, [r3, #20]
  108198:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10819c:	e2033001 	and	r3, r3, #1
  1081a0:	e3530000 	cmp	r3, #0
  1081a4:	1a000001 	bne	1081b0 <sal_connect+0x58>
  1081a8:	e3e03000 	mvn	r3, #0
  1081ac:	ea000015 	b	108208 <sal_connect+0xb0>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, connect);
  1081b0:	e51b3008 	ldr	r3, [fp, #-8]
  1081b4:	e5933014 	ldr	r3, [r3, #20]
  1081b8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1081bc:	e50b300c 	str	r3, [fp, #-12]
  1081c0:	e51b300c 	ldr	r3, [fp, #-12]
  1081c4:	e5933008 	ldr	r3, [r3, #8]
  1081c8:	e5933010 	ldr	r3, [r3, #16]
  1081cc:	e3530000 	cmp	r3, #0
  1081d0:	1a000001 	bne	1081dc <sal_connect+0x84>
  1081d4:	e3e03000 	mvn	r3, #0
  1081d8:	ea00000a 	b	108208 <sal_connect+0xb0>

    ret = pf->skt_ops->connect((int)(size_t)sock->user_data, name, namelen);
  1081dc:	e51b300c 	ldr	r3, [fp, #-12]
  1081e0:	e5933008 	ldr	r3, [r3, #8]
  1081e4:	e5933010 	ldr	r3, [r3, #16]
  1081e8:	e51b2008 	ldr	r2, [fp, #-8]
  1081ec:	e5922018 	ldr	r2, [r2, #24]
  1081f0:	e1a00002 	mov	r0, r2
  1081f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1081f8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1081fc:	e12fff33 	blx	r3
  108200:	e50b0010 	str	r0, [fp, #-16]

        return ret;
    }
#endif

    return ret;
  108204:	e51b3010 	ldr	r3, [fp, #-16]
}
  108208:	e1a00003 	mov	r0, r3
  10820c:	e24bd004 	sub	sp, fp, #4
  108210:	e8bd8800 	pop	{fp, pc}

00108214 <sal_listen>:

int sal_listen(int socket, int backlog)
{
  108214:	e92d4800 	push	{fp, lr}
  108218:	e28db004 	add	fp, sp, #4
  10821c:	e24dd010 	sub	sp, sp, #16
  108220:	e50b0010 	str	r0, [fp, #-16]
  108224:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108228:	e51b0010 	ldr	r0, [fp, #-16]
  10822c:	ebfffc2e 	bl	1072ec <sal_get_socket>
  108230:	e50b0008 	str	r0, [fp, #-8]
  108234:	e51b3008 	ldr	r3, [fp, #-8]
  108238:	e3530000 	cmp	r3, #0
  10823c:	1a000001 	bne	108248 <sal_listen+0x34>
  108240:	e3e03000 	mvn	r3, #0
  108244:	ea000013 	b	108298 <sal_listen+0x84>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, listen);
  108248:	e51b3008 	ldr	r3, [fp, #-8]
  10824c:	e5933014 	ldr	r3, [r3, #20]
  108250:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108254:	e50b300c 	str	r3, [fp, #-12]
  108258:	e51b300c 	ldr	r3, [fp, #-12]
  10825c:	e5933008 	ldr	r3, [r3, #8]
  108260:	e593300c 	ldr	r3, [r3, #12]
  108264:	e3530000 	cmp	r3, #0
  108268:	1a000001 	bne	108274 <sal_listen+0x60>
  10826c:	e3e03000 	mvn	r3, #0
  108270:	ea000008 	b	108298 <sal_listen+0x84>

    return pf->skt_ops->listen((int)(size_t)sock->user_data, backlog);
  108274:	e51b300c 	ldr	r3, [fp, #-12]
  108278:	e5933008 	ldr	r3, [r3, #8]
  10827c:	e593300c 	ldr	r3, [r3, #12]
  108280:	e51b2008 	ldr	r2, [fp, #-8]
  108284:	e5922018 	ldr	r2, [r2, #24]
  108288:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10828c:	e1a00002 	mov	r0, r2
  108290:	e12fff33 	blx	r3
  108294:	e1a03000 	mov	r3, r0
}
  108298:	e1a00003 	mov	r0, r3
  10829c:	e24bd004 	sub	sp, fp, #4
  1082a0:	e8bd8800 	pop	{fp, pc}

001082a4 <sal_recvfrom>:

int sal_recvfrom(int socket, void *mem, size_t len, int flags,
                 struct sockaddr *from, socklen_t *fromlen)
{
  1082a4:	e92d4810 	push	{r4, fp, lr}
  1082a8:	e28db008 	add	fp, sp, #8
  1082ac:	e24dd024 	sub	sp, sp, #36	; 0x24
  1082b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1082b4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1082b8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1082bc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1082c0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1082c4:	ebfffc08 	bl	1072ec <sal_get_socket>
  1082c8:	e50b0010 	str	r0, [fp, #-16]
  1082cc:	e51b3010 	ldr	r3, [fp, #-16]
  1082d0:	e3530000 	cmp	r3, #0
  1082d4:	1a000001 	bne	1082e0 <sal_recvfrom+0x3c>
  1082d8:	e3e03000 	mvn	r3, #0
  1082dc:	ea000021 	b	108368 <sal_recvfrom+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1082e0:	e51b3010 	ldr	r3, [fp, #-16]
  1082e4:	e5933014 	ldr	r3, [r3, #20]
  1082e8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1082ec:	e2033001 	and	r3, r3, #1
  1082f0:	e3530000 	cmp	r3, #0
  1082f4:	1a000001 	bne	108300 <sal_recvfrom+0x5c>
  1082f8:	e3e03000 	mvn	r3, #0
  1082fc:	ea000019 	b	108368 <sal_recvfrom+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, recvfrom);
  108300:	e51b3010 	ldr	r3, [fp, #-16]
  108304:	e5933014 	ldr	r3, [r3, #20]
  108308:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10830c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108310:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108314:	e5933008 	ldr	r3, [r3, #8]
  108318:	e593301c 	ldr	r3, [r3, #28]
  10831c:	e3530000 	cmp	r3, #0
  108320:	1a000001 	bne	10832c <sal_recvfrom+0x88>
  108324:	e3e03000 	mvn	r3, #0
  108328:	ea00000e 	b	108368 <sal_recvfrom+0xc4>
    else
    {
        return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
    }
#else
    return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
  10832c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108330:	e5933008 	ldr	r3, [r3, #8]
  108334:	e593401c 	ldr	r4, [r3, #28]
  108338:	e51b3010 	ldr	r3, [fp, #-16]
  10833c:	e5933018 	ldr	r3, [r3, #24]
  108340:	e1a00003 	mov	r0, r3
  108344:	e59b3008 	ldr	r3, [fp, #8]
  108348:	e58d3004 	str	r3, [sp, #4]
  10834c:	e59b3004 	ldr	r3, [fp, #4]
  108350:	e58d3000 	str	r3, [sp]
  108354:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108358:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10835c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108360:	e12fff34 	blx	r4
  108364:	e1a03000 	mov	r3, r0
#endif
}
  108368:	e1a00003 	mov	r0, r3
  10836c:	e24bd008 	sub	sp, fp, #8
  108370:	e8bd8810 	pop	{r4, fp, pc}

00108374 <sal_sendto>:

int sal_sendto(int socket, const void *dataptr, size_t size, int flags,
               const struct sockaddr *to, socklen_t tolen)
{
  108374:	e92d4810 	push	{r4, fp, lr}
  108378:	e28db008 	add	fp, sp, #8
  10837c:	e24dd024 	sub	sp, sp, #36	; 0x24
  108380:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108384:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108388:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  10838c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108390:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108394:	ebfffbd4 	bl	1072ec <sal_get_socket>
  108398:	e50b0010 	str	r0, [fp, #-16]
  10839c:	e51b3010 	ldr	r3, [fp, #-16]
  1083a0:	e3530000 	cmp	r3, #0
  1083a4:	1a000001 	bne	1083b0 <sal_sendto+0x3c>
  1083a8:	e3e03000 	mvn	r3, #0
  1083ac:	ea000021 	b	108438 <sal_sendto+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1083b0:	e51b3010 	ldr	r3, [fp, #-16]
  1083b4:	e5933014 	ldr	r3, [r3, #20]
  1083b8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1083bc:	e2033001 	and	r3, r3, #1
  1083c0:	e3530000 	cmp	r3, #0
  1083c4:	1a000001 	bne	1083d0 <sal_sendto+0x5c>
  1083c8:	e3e03000 	mvn	r3, #0
  1083cc:	ea000019 	b	108438 <sal_sendto+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, sendto);
  1083d0:	e51b3010 	ldr	r3, [fp, #-16]
  1083d4:	e5933014 	ldr	r3, [r3, #20]
  1083d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1083dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1083e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1083e4:	e5933008 	ldr	r3, [r3, #8]
  1083e8:	e5933018 	ldr	r3, [r3, #24]
  1083ec:	e3530000 	cmp	r3, #0
  1083f0:	1a000001 	bne	1083fc <sal_sendto+0x88>
  1083f4:	e3e03000 	mvn	r3, #0
  1083f8:	ea00000e 	b	108438 <sal_sendto+0xc4>
    else
    {
        return pf->skt_ops->sendto((int) sock->user_data, dataptr, size, flags, to, tolen);
    }
#else
    return pf->skt_ops->sendto((int)(size_t)sock->user_data, dataptr, size, flags, to, tolen);
  1083fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108400:	e5933008 	ldr	r3, [r3, #8]
  108404:	e5934018 	ldr	r4, [r3, #24]
  108408:	e51b3010 	ldr	r3, [fp, #-16]
  10840c:	e5933018 	ldr	r3, [r3, #24]
  108410:	e1a00003 	mov	r0, r3
  108414:	e59b3008 	ldr	r3, [fp, #8]
  108418:	e58d3004 	str	r3, [sp, #4]
  10841c:	e59b3004 	ldr	r3, [fp, #4]
  108420:	e58d3000 	str	r3, [sp]
  108424:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108428:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10842c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108430:	e12fff34 	blx	r4
  108434:	e1a03000 	mov	r3, r0
#endif
}
  108438:	e1a00003 	mov	r0, r3
  10843c:	e24bd008 	sub	sp, fp, #8
  108440:	e8bd8810 	pop	{r4, fp, pc}

00108444 <sal_socket>:

int sal_socket(int domain, int type, int protocol)
{
  108444:	e92d4800 	push	{fp, lr}
  108448:	e28db004 	add	fp, sp, #4
  10844c:	e24dd028 	sub	sp, sp, #40	; 0x28
  108450:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  108454:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  108458:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int socket, proto_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* allocate a new socket and registered socket options */
    socket = socket_new();
  10845c:	ebfffd1f 	bl	1078e0 <socket_new>
  108460:	e50b0008 	str	r0, [fp, #-8]
    if (socket < 0)
  108464:	e51b3008 	ldr	r3, [fp, #-8]
  108468:	e3530000 	cmp	r3, #0
  10846c:	aa000001 	bge	108478 <sal_socket+0x34>
    {
        return -1;
  108470:	e3e03000 	mvn	r3, #0
  108474:	ea000040 	b	10857c <sal_socket+0x138>
    }

    /* get sal socket object by socket descriptor */
    sock = sal_get_socket(socket);
  108478:	e51b0008 	ldr	r0, [fp, #-8]
  10847c:	ebfffb9a 	bl	1072ec <sal_get_socket>
  108480:	e1a03000 	mov	r3, r0
  108484:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (sock == RT_NULL)
  108488:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10848c:	e3530000 	cmp	r3, #0
  108490:	1a000003 	bne	1084a4 <sal_socket+0x60>
    {
        socket_delete(socket);
  108494:	e51b0008 	ldr	r0, [fp, #-8]
  108498:	ebfffd3c 	bl	107990 <socket_delete>
        return -1;
  10849c:	e3e03000 	mvn	r3, #0
  1084a0:	ea000035 	b	10857c <sal_socket+0x138>
    }

    /* Initialize sal socket object */
    retval = socket_init(domain, type, protocol, &sock);
  1084a4:	e24b3018 	sub	r3, fp, #24
  1084a8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1084ac:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1084b0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1084b4:	ebfffc0b 	bl	1074e8 <socket_init>
  1084b8:	e50b000c 	str	r0, [fp, #-12]
    if (retval < 0)
  1084bc:	e51b300c 	ldr	r3, [fp, #-12]
  1084c0:	e3530000 	cmp	r3, #0
  1084c4:	aa00000d 	bge	108500 <sal_socket+0xbc>
    {
        LOG_E("SAL socket protocol family input failed, return error %d.", retval);
  1084c8:	e3050f20 	movw	r0, #24352	; 0x5f20
  1084cc:	e3400014 	movt	r0, #20
  1084d0:	ebffeb0f 	bl	103114 <rt_kprintf>
  1084d4:	e51b100c 	ldr	r1, [fp, #-12]
  1084d8:	e30600b8 	movw	r0, #24760	; 0x60b8
  1084dc:	e3400014 	movt	r0, #20
  1084e0:	ebffeb0b 	bl	103114 <rt_kprintf>
  1084e4:	e3050f54 	movw	r0, #24404	; 0x5f54
  1084e8:	e3400014 	movt	r0, #20
  1084ec:	ebffeb08 	bl	103114 <rt_kprintf>
        socket_delete(socket);
  1084f0:	e51b0008 	ldr	r0, [fp, #-8]
  1084f4:	ebfffd25 	bl	107990 <socket_delete>
        return -1;
  1084f8:	e3e03000 	mvn	r3, #0
  1084fc:	ea00001e 	b	10857c <sal_socket+0x138>
    }

    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  108500:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108504:	e5933014 	ldr	r3, [r3, #20]
  108508:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10850c:	e50b3010 	str	r3, [fp, #-16]
  108510:	e51b3010 	ldr	r3, [fp, #-16]
  108514:	e5933008 	ldr	r3, [r3, #8]
  108518:	e5933000 	ldr	r3, [r3]
  10851c:	e3530000 	cmp	r3, #0
  108520:	1a000001 	bne	10852c <sal_socket+0xe8>
  108524:	e3e03000 	mvn	r3, #0
  108528:	ea000013 	b	10857c <sal_socket+0x138>

    proto_socket = pf->skt_ops->socket(domain, type, protocol);
  10852c:	e51b3010 	ldr	r3, [fp, #-16]
  108530:	e5933008 	ldr	r3, [r3, #8]
  108534:	e5933000 	ldr	r3, [r3]
  108538:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  10853c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  108540:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  108544:	e12fff33 	blx	r3
  108548:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (proto_socket >= 0)
  10854c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108550:	e3530000 	cmp	r3, #0
  108554:	ba000005 	blt	108570 <sal_socket+0x12c>
                socket_delete(socket);
                return -1;
            }
        }
#endif
        sock->user_data = (void *)(size_t)proto_socket;
  108558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10855c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  108560:	e5832018 	str	r2, [r3, #24]
        return sock->socket;
  108564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108568:	e5933004 	ldr	r3, [r3, #4]
  10856c:	ea000002 	b	10857c <sal_socket+0x138>
    }
    socket_delete(socket);
  108570:	e51b0008 	ldr	r0, [fp, #-8]
  108574:	ebfffd05 	bl	107990 <socket_delete>
    return -1;
  108578:	e3e03000 	mvn	r3, #0
}
  10857c:	e1a00003 	mov	r0, r3
  108580:	e24bd004 	sub	sp, fp, #4
  108584:	e8bd8800 	pop	{fp, pc}

00108588 <sal_closesocket>:

int sal_closesocket(int socket)
{
  108588:	e92d4800 	push	{fp, lr}
  10858c:	e28db004 	add	fp, sp, #4
  108590:	e24dd018 	sub	sp, sp, #24
  108594:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  108598:	e3a03000 	mov	r3, #0
  10859c:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1085a0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1085a4:	ebfffb50 	bl	1072ec <sal_get_socket>
  1085a8:	e50b000c 	str	r0, [fp, #-12]
  1085ac:	e51b300c 	ldr	r3, [fp, #-12]
  1085b0:	e3530000 	cmp	r3, #0
  1085b4:	1a000001 	bne	1085c0 <sal_closesocket+0x38>
  1085b8:	e3e03000 	mvn	r3, #0
  1085bc:	ea00001c 	b	108634 <sal_closesocket+0xac>

    /* clsoesocket operation not need to vaild network interface status */
    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  1085c0:	e51b300c 	ldr	r3, [fp, #-12]
  1085c4:	e5933014 	ldr	r3, [r3, #20]
  1085c8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1085cc:	e50b3010 	str	r3, [fp, #-16]
  1085d0:	e51b3010 	ldr	r3, [fp, #-16]
  1085d4:	e5933008 	ldr	r3, [r3, #8]
  1085d8:	e5933000 	ldr	r3, [r3]
  1085dc:	e3530000 	cmp	r3, #0
  1085e0:	1a000001 	bne	1085ec <sal_closesocket+0x64>
  1085e4:	e3e03000 	mvn	r3, #0
  1085e8:	ea000011 	b	108634 <sal_closesocket+0xac>

    if (pf->skt_ops->closesocket((int)(size_t)sock->user_data) == 0)
  1085ec:	e51b3010 	ldr	r3, [fp, #-16]
  1085f0:	e5933008 	ldr	r3, [r3, #8]
  1085f4:	e5933004 	ldr	r3, [r3, #4]
  1085f8:	e51b200c 	ldr	r2, [fp, #-12]
  1085fc:	e5922018 	ldr	r2, [r2, #24]
  108600:	e1a00002 	mov	r0, r2
  108604:	e12fff33 	blx	r3
  108608:	e1a03000 	mov	r3, r0
  10860c:	e3530000 	cmp	r3, #0
  108610:	1a000002 	bne	108620 <sal_closesocket+0x98>
            {
                return -1;
            }
        }
#endif
        error = 0;
  108614:	e3a03000 	mov	r3, #0
  108618:	e50b3008 	str	r3, [fp, #-8]
  10861c:	ea000001 	b	108628 <sal_closesocket+0xa0>
    }
    else
    {
        error = -1;
  108620:	e3e03000 	mvn	r3, #0
  108624:	e50b3008 	str	r3, [fp, #-8]
    }

    /* delete socket */
    socket_delete(socket);
  108628:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10862c:	ebfffcd7 	bl	107990 <socket_delete>

    return error;
  108630:	e51b3008 	ldr	r3, [fp, #-8]
}
  108634:	e1a00003 	mov	r0, r3
  108638:	e24bd004 	sub	sp, fp, #4
  10863c:	e8bd8800 	pop	{fp, pc}

00108640 <sal_ioctlsocket>:

int sal_ioctlsocket(int socket, long cmd, void *arg)
{
  108640:	e92d4800 	push	{fp, lr}
  108644:	e28db004 	add	fp, sp, #4
  108648:	e24dd028 	sub	sp, sp, #40	; 0x28
  10864c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  108650:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  108654:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct sockaddr_in *addr_in = RT_NULL;
  108658:	e3a03000 	mov	r3, #0
  10865c:	e50b3008 	str	r3, [fp, #-8]
    struct sockaddr *addr = RT_NULL;
  108660:	e3a03000 	mov	r3, #0
  108664:	e50b300c 	str	r3, [fp, #-12]
    ip_addr_t input_ipaddr;
    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108668:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10866c:	ebfffb1e 	bl	1072ec <sal_get_socket>
  108670:	e50b0010 	str	r0, [fp, #-16]
  108674:	e51b3010 	ldr	r3, [fp, #-16]
  108678:	e3530000 	cmp	r3, #0
  10867c:	1a000001 	bne	108688 <sal_ioctlsocket+0x48>
  108680:	e3e03000 	mvn	r3, #0
  108684:	ea000086 	b	1088a4 <sal_ioctlsocket+0x264>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, ioctlsocket);
  108688:	e51b3010 	ldr	r3, [fp, #-16]
  10868c:	e5933014 	ldr	r3, [r3, #20]
  108690:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108694:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108698:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10869c:	e5933008 	ldr	r3, [r3, #8]
  1086a0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1086a4:	e3530000 	cmp	r3, #0
  1086a8:	1a000001 	bne	1086b4 <sal_ioctlsocket+0x74>
  1086ac:	e3e03000 	mvn	r3, #0
  1086b0:	ea00007b 	b	1088a4 <sal_ioctlsocket+0x264>

    struct sal_ifreq *ifr = (struct sal_ifreq *)arg;
  1086b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1086b8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if((sock->domain == AF_INET)&&(sock->netdev)&&(ifr != RT_NULL))
  1086bc:	e51b3010 	ldr	r3, [fp, #-16]
  1086c0:	e5933008 	ldr	r3, [r3, #8]
  1086c4:	e3530002 	cmp	r3, #2
  1086c8:	1a000068 	bne	108870 <sal_ioctlsocket+0x230>
  1086cc:	e51b3010 	ldr	r3, [fp, #-16]
  1086d0:	e5933014 	ldr	r3, [r3, #20]
  1086d4:	e3530000 	cmp	r3, #0
  1086d8:	0a000064 	beq	108870 <sal_ioctlsocket+0x230>
  1086dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1086e0:	e3530000 	cmp	r3, #0
  1086e4:	0a000061 	beq	108870 <sal_ioctlsocket+0x230>
    {
        switch (cmd)
  1086e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1086ec:	e2433c89 	sub	r3, r3, #35072	; 0x8900
  1086f0:	e2433015 	sub	r3, r3, #21
  1086f4:	e3530012 	cmp	r3, #18
  1086f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1086fc:	ea00005d 	b	108878 <sal_ioctlsocket+0x238>
  108700:	0010874c 	.word	0x0010874c
  108704:	00108774 	.word	0x00108774
  108708:	00108878 	.word	0x00108878
  10870c:	00108878 	.word	0x00108878
  108710:	00108878 	.word	0x00108878
  108714:	00108878 	.word	0x00108878
  108718:	001087b0 	.word	0x001087b0
  10871c:	001087d8 	.word	0x001087d8
  108720:	00108878 	.word	0x00108878
  108724:	00108878 	.word	0x00108878
  108728:	00108878 	.word	0x00108878
  10872c:	00108878 	.word	0x00108878
  108730:	00108850 	.word	0x00108850
  108734:	00108878 	.word	0x00108878
  108738:	00108878 	.word	0x00108878
  10873c:	00108878 	.word	0x00108878
  108740:	00108878 	.word	0x00108878
  108744:	00108878 	.word	0x00108878
  108748:	00108814 	.word	0x00108814
        {
        case SIOCGIFADDR:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_addr);
  10874c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108750:	e2833010 	add	r3, r3, #16
  108754:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.addr;
  108758:	e51b3010 	ldr	r3, [fp, #-16]
  10875c:	e5933014 	ldr	r3, [r3, #20]
  108760:	e593200c 	ldr	r2, [r3, #12]
  108764:	e51b3008 	ldr	r3, [fp, #-8]
  108768:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  10876c:	e3a03000 	mov	r3, #0
  108770:	ea00004b 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCSIFADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_addr);
  108774:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108778:	e2833010 	add	r3, r3, #16
  10877c:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  108780:	e24b301c 	sub	r3, fp, #28
  108784:	e1a01003 	mov	r1, r3
  108788:	e51b000c 	ldr	r0, [fp, #-12]
  10878c:	ebfffd17 	bl	107bf0 <sal_sockaddr_to_ipaddr>
            netdev_set_ipaddr(sock->netdev,&input_ipaddr);
  108790:	e51b3010 	ldr	r3, [fp, #-16]
  108794:	e5933014 	ldr	r3, [r3, #20]
  108798:	e24b201c 	sub	r2, fp, #28
  10879c:	e1a01002 	mov	r1, r2
  1087a0:	e1a00003 	mov	r0, r3
  1087a4:	ebfff4ae 	bl	105a64 <netdev_set_ipaddr>
            return 0;    
  1087a8:	e3a03000 	mov	r3, #0
  1087ac:	ea00003c 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFNETMASK:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_netmask);
  1087b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1087b4:	e2833010 	add	r3, r3, #16
  1087b8:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->netmask.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->netmask.addr;
  1087bc:	e51b3010 	ldr	r3, [fp, #-16]
  1087c0:	e5933014 	ldr	r3, [r3, #20]
  1087c4:	e5932010 	ldr	r2, [r3, #16]
  1087c8:	e51b3008 	ldr	r3, [fp, #-8]
  1087cc:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  1087d0:	e3a03000 	mov	r3, #0
  1087d4:	ea000032 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCSIFNETMASK:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_netmask);
  1087d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1087dc:	e2833010 	add	r3, r3, #16
  1087e0:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  1087e4:	e24b301c 	sub	r3, fp, #28
  1087e8:	e1a01003 	mov	r1, r3
  1087ec:	e51b000c 	ldr	r0, [fp, #-12]
  1087f0:	ebfffcfe 	bl	107bf0 <sal_sockaddr_to_ipaddr>
            netdev_set_netmask(sock->netdev,&input_ipaddr);
  1087f4:	e51b3010 	ldr	r3, [fp, #-16]
  1087f8:	e5933014 	ldr	r3, [r3, #20]
  1087fc:	e24b201c 	sub	r2, fp, #28
  108800:	e1a01002 	mov	r1, r2
  108804:	e1a00003 	mov	r0, r3
  108808:	ebfff4e4 	bl	105ba0 <netdev_set_netmask>
            return 0;            
  10880c:	e3a03000 	mov	r3, #0
  108810:	ea000023 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFHWADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_hwaddr);
  108814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108818:	e2833010 	add	r3, r3, #16
  10881c:	e50b300c 	str	r3, [fp, #-12]
            rt_memcpy(addr->sa_data,sock->netdev->hwaddr,sock->netdev->hwaddr_len);
  108820:	e51b300c 	ldr	r3, [fp, #-12]
  108824:	e2830002 	add	r0, r3, #2
  108828:	e51b3010 	ldr	r3, [fp, #-16]
  10882c:	e5933014 	ldr	r3, [r3, #20]
  108830:	e2831021 	add	r1, r3, #33	; 0x21
  108834:	e51b3010 	ldr	r3, [fp, #-16]
  108838:	e5933014 	ldr	r3, [r3, #20]
  10883c:	e5d33020 	ldrb	r3, [r3, #32]
  108840:	e1a02003 	mov	r2, r3
  108844:	ebffeaad 	bl	103300 <rt_memcpy>
            return 0;
  108848:	e3a03000 	mov	r3, #0
  10884c:	ea000014 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFMTU:
            ifr->ifr_ifru.ifru_mtu = sock->netdev->mtu;
  108850:	e51b3010 	ldr	r3, [fp, #-16]
  108854:	e5933014 	ldr	r3, [r3, #20]
  108858:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  10885c:	e1a02003 	mov	r2, r3
  108860:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108864:	e5832010 	str	r2, [r3, #16]
            return 0;            
  108868:	e3a03000 	mov	r3, #0
  10886c:	ea00000c 	b	1088a4 <sal_ioctlsocket+0x264>

        default:
            break;
        }
    }
  108870:	e320f000 	nop	{0}
  108874:	ea000000 	b	10887c <sal_ioctlsocket+0x23c>
            break;
  108878:	e320f000 	nop	{0}
    return pf->skt_ops->ioctlsocket((int)(size_t)sock->user_data, cmd, arg);
  10887c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108880:	e5933008 	ldr	r3, [r3, #8]
  108884:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  108888:	e51b2010 	ldr	r2, [fp, #-16]
  10888c:	e5922018 	ldr	r2, [r2, #24]
  108890:	e1a00002 	mov	r0, r2
  108894:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  108898:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  10889c:	e12fff33 	blx	r3
  1088a0:	e1a03000 	mov	r3, r0
}
  1088a4:	e1a00003 	mov	r0, r3
  1088a8:	e24bd004 	sub	sp, fp, #4
  1088ac:	e8bd8800 	pop	{fp, pc}

001088b0 <sal_poll>:

#ifdef SAL_USING_POSIX
int sal_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  1088b0:	e92d4800 	push	{fp, lr}
  1088b4:	e28db004 	add	fp, sp, #4
  1088b8:	e24dd018 	sub	sp, sp, #24
  1088bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1088c0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int socket = (int)(size_t)file->fnode->data;
  1088c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1088c8:	e5933018 	ldr	r3, [r3, #24]
  1088cc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1088d0:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1088d4:	e51b0008 	ldr	r0, [fp, #-8]
  1088d8:	ebfffa83 	bl	1072ec <sal_get_socket>
  1088dc:	e50b000c 	str	r0, [fp, #-12]
  1088e0:	e51b300c 	ldr	r3, [fp, #-12]
  1088e4:	e3530000 	cmp	r3, #0
  1088e8:	1a000001 	bne	1088f4 <sal_poll+0x44>
  1088ec:	e3e03000 	mvn	r3, #0
  1088f0:	ea000019 	b	10895c <sal_poll+0xac>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1088f4:	e51b300c 	ldr	r3, [fp, #-12]
  1088f8:	e5933014 	ldr	r3, [r3, #20]
  1088fc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108900:	e2033001 	and	r3, r3, #1
  108904:	e3530000 	cmp	r3, #0
  108908:	1a000001 	bne	108914 <sal_poll+0x64>
  10890c:	e3e03000 	mvn	r3, #0
  108910:	ea000011 	b	10895c <sal_poll+0xac>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, poll);
  108914:	e51b300c 	ldr	r3, [fp, #-12]
  108918:	e5933014 	ldr	r3, [r3, #20]
  10891c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108920:	e50b3010 	str	r3, [fp, #-16]
  108924:	e51b3010 	ldr	r3, [fp, #-16]
  108928:	e5933008 	ldr	r3, [r3, #8]
  10892c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  108930:	e3530000 	cmp	r3, #0
  108934:	1a000001 	bne	108940 <sal_poll+0x90>
  108938:	e3e03000 	mvn	r3, #0
  10893c:	ea000006 	b	10895c <sal_poll+0xac>

    return pf->skt_ops->poll(file, req);
  108940:	e51b3010 	ldr	r3, [fp, #-16]
  108944:	e5933008 	ldr	r3, [r3, #8]
  108948:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10894c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108950:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108954:	e12fff33 	blx	r3
  108958:	e1a03000 	mov	r3, r0
}
  10895c:	e1a00003 	mov	r0, r3
  108960:	e24bd004 	sub	sp, fp, #4
  108964:	e8bd8800 	pop	{fp, pc}

00108968 <sal_gethostbyname>:
#endif

struct hostent *sal_gethostbyname(const char *name)
{
  108968:	e92d4800 	push	{fp, lr}
  10896c:	e28db004 	add	fp, sp, #4
  108970:	e24dd010 	sub	sp, sp, #16
  108974:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  108978:	e30f358c 	movw	r3, #62860	; 0xf58c
  10897c:	e3403014 	movt	r3, #20
  108980:	e5933000 	ldr	r3, [r3]
  108984:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  108988:	e51b3008 	ldr	r3, [fp, #-8]
  10898c:	e3530000 	cmp	r3, #0
  108990:	0a000017 	beq	1089f4 <sal_gethostbyname+0x8c>
  108994:	e51b3008 	ldr	r3, [fp, #-8]
  108998:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10899c:	e2033001 	and	r3, r3, #1
  1089a0:	e6ef3073 	uxtb	r3, r3
  1089a4:	e3530000 	cmp	r3, #0
  1089a8:	0a000011 	beq	1089f4 <sal_gethostbyname+0x8c>
  1089ac:	e51b3008 	ldr	r3, [fp, #-8]
  1089b0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1089b4:	e50b300c 	str	r3, [fp, #-12]
  1089b8:	e51b300c 	ldr	r3, [fp, #-12]
  1089bc:	e3530000 	cmp	r3, #0
  1089c0:	0a00000b 	beq	1089f4 <sal_gethostbyname+0x8c>
  1089c4:	e51b300c 	ldr	r3, [fp, #-12]
  1089c8:	e593300c 	ldr	r3, [r3, #12]
  1089cc:	e5933000 	ldr	r3, [r3]
  1089d0:	e3530000 	cmp	r3, #0
  1089d4:	0a000006 	beq	1089f4 <sal_gethostbyname+0x8c>
    {
        return pf->netdb_ops->gethostbyname(name);
  1089d8:	e51b300c 	ldr	r3, [fp, #-12]
  1089dc:	e593300c 	ldr	r3, [r3, #12]
  1089e0:	e5933000 	ldr	r3, [r3]
  1089e4:	e51b0010 	ldr	r0, [fp, #-16]
  1089e8:	e12fff33 	blx	r3
  1089ec:	e1a03000 	mov	r3, r0
  1089f0:	ea00001e 	b	108a70 <sal_gethostbyname+0x108>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  1089f4:	e3a00001 	mov	r0, #1
  1089f8:	ebfff265 	bl	105394 <netdev_get_first_by_flags>
  1089fc:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  108a00:	e51b3008 	ldr	r3, [fp, #-8]
  108a04:	e3530000 	cmp	r3, #0
  108a08:	0a000017 	beq	108a6c <sal_gethostbyname+0x104>
  108a0c:	e51b3008 	ldr	r3, [fp, #-8]
  108a10:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108a14:	e2033001 	and	r3, r3, #1
  108a18:	e6ef3073 	uxtb	r3, r3
  108a1c:	e3530000 	cmp	r3, #0
  108a20:	0a000011 	beq	108a6c <sal_gethostbyname+0x104>
  108a24:	e51b3008 	ldr	r3, [fp, #-8]
  108a28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108a2c:	e50b300c 	str	r3, [fp, #-12]
  108a30:	e51b300c 	ldr	r3, [fp, #-12]
  108a34:	e3530000 	cmp	r3, #0
  108a38:	0a00000b 	beq	108a6c <sal_gethostbyname+0x104>
  108a3c:	e51b300c 	ldr	r3, [fp, #-12]
  108a40:	e593300c 	ldr	r3, [r3, #12]
  108a44:	e5933000 	ldr	r3, [r3]
  108a48:	e3530000 	cmp	r3, #0
  108a4c:	0a000006 	beq	108a6c <sal_gethostbyname+0x104>
        {
            return pf->netdb_ops->gethostbyname(name);
  108a50:	e51b300c 	ldr	r3, [fp, #-12]
  108a54:	e593300c 	ldr	r3, [r3, #12]
  108a58:	e5933000 	ldr	r3, [r3]
  108a5c:	e51b0010 	ldr	r0, [fp, #-16]
  108a60:	e12fff33 	blx	r3
  108a64:	e1a03000 	mov	r3, r0
  108a68:	ea000000 	b	108a70 <sal_gethostbyname+0x108>
        }
    }

    return RT_NULL;
  108a6c:	e3a03000 	mov	r3, #0
}
  108a70:	e1a00003 	mov	r0, r3
  108a74:	e24bd004 	sub	sp, fp, #4
  108a78:	e8bd8800 	pop	{fp, pc}

00108a7c <sal_gethostbyname_r>:

int sal_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                        size_t buflen, struct hostent **result, int *h_errnop)
{
  108a7c:	e92d4810 	push	{r4, fp, lr}
  108a80:	e28db008 	add	fp, sp, #8
  108a84:	e24dd024 	sub	sp, sp, #36	; 0x24
  108a88:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108a8c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108a90:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108a94:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  108a98:	e30f358c 	movw	r3, #62860	; 0xf58c
  108a9c:	e3403014 	movt	r3, #20
  108aa0:	e5933000 	ldr	r3, [r3]
  108aa4:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  108aa8:	e51b3010 	ldr	r3, [fp, #-16]
  108aac:	e3530000 	cmp	r3, #0
  108ab0:	0a00001e 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108ab4:	e51b3010 	ldr	r3, [fp, #-16]
  108ab8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108abc:	e2033001 	and	r3, r3, #1
  108ac0:	e6ef3073 	uxtb	r3, r3
  108ac4:	e3530000 	cmp	r3, #0
  108ac8:	0a000018 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108acc:	e51b3010 	ldr	r3, [fp, #-16]
  108ad0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108adc:	e3530000 	cmp	r3, #0
  108ae0:	0a000012 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108ae4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108ae8:	e593300c 	ldr	r3, [r3, #12]
  108aec:	e5933004 	ldr	r3, [r3, #4]
  108af0:	e3530000 	cmp	r3, #0
  108af4:	0a00000d 	beq	108b30 <sal_gethostbyname_r+0xb4>
    {
        return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  108af8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108afc:	e593300c 	ldr	r3, [r3, #12]
  108b00:	e5934004 	ldr	r4, [r3, #4]
  108b04:	e59b3008 	ldr	r3, [fp, #8]
  108b08:	e58d3004 	str	r3, [sp, #4]
  108b0c:	e59b3004 	ldr	r3, [fp, #4]
  108b10:	e58d3000 	str	r3, [sp]
  108b14:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108b18:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108b1c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108b20:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108b24:	e12fff34 	blx	r4
  108b28:	e1a03000 	mov	r3, r0
  108b2c:	ea000025 	b	108bc8 <sal_gethostbyname_r+0x14c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108b30:	e3a00001 	mov	r0, #1
  108b34:	ebfff216 	bl	105394 <netdev_get_first_by_flags>
  108b38:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  108b3c:	e51b3010 	ldr	r3, [fp, #-16]
  108b40:	e3530000 	cmp	r3, #0
  108b44:	0a00001e 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b48:	e51b3010 	ldr	r3, [fp, #-16]
  108b4c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108b50:	e2033001 	and	r3, r3, #1
  108b54:	e6ef3073 	uxtb	r3, r3
  108b58:	e3530000 	cmp	r3, #0
  108b5c:	0a000018 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b60:	e51b3010 	ldr	r3, [fp, #-16]
  108b64:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108b68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108b6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b70:	e3530000 	cmp	r3, #0
  108b74:	0a000012 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b7c:	e593300c 	ldr	r3, [r3, #12]
  108b80:	e5933004 	ldr	r3, [r3, #4]
  108b84:	e3530000 	cmp	r3, #0
  108b88:	0a00000d 	beq	108bc4 <sal_gethostbyname_r+0x148>
        {
            return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  108b8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b90:	e593300c 	ldr	r3, [r3, #12]
  108b94:	e5934004 	ldr	r4, [r3, #4]
  108b98:	e59b3008 	ldr	r3, [fp, #8]
  108b9c:	e58d3004 	str	r3, [sp, #4]
  108ba0:	e59b3004 	ldr	r3, [fp, #4]
  108ba4:	e58d3000 	str	r3, [sp]
  108ba8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108bac:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108bb0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108bb4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108bb8:	e12fff34 	blx	r4
  108bbc:	e1a03000 	mov	r3, r0
  108bc0:	ea000000 	b	108bc8 <sal_gethostbyname_r+0x14c>
        }
    }

    return -1;
  108bc4:	e3e03000 	mvn	r3, #0
}
  108bc8:	e1a00003 	mov	r0, r3
  108bcc:	e24bd008 	sub	sp, fp, #8
  108bd0:	e8bd8810 	pop	{r4, fp, pc}

00108bd4 <sal_getaddrinfo>:

int sal_getaddrinfo(const char *nodename,
                    const char *servname,
                    const struct addrinfo *hints,
                    struct addrinfo **res)
{
  108bd4:	e92d4810 	push	{r4, fp, lr}
  108bd8:	e28db008 	add	fp, sp, #8
  108bdc:	e24dd01c 	sub	sp, sp, #28
  108be0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108be4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108be8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108bec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  108bf0:	e30f358c 	movw	r3, #62860	; 0xf58c
  108bf4:	e3403014 	movt	r3, #20
  108bf8:	e5933000 	ldr	r3, [r3]
  108bfc:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  108c00:	e51b3010 	ldr	r3, [fp, #-16]
  108c04:	e3530000 	cmp	r3, #0
  108c08:	0a00001a 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c0c:	e51b3010 	ldr	r3, [fp, #-16]
  108c10:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108c14:	e2033001 	and	r3, r3, #1
  108c18:	e6ef3073 	uxtb	r3, r3
  108c1c:	e3530000 	cmp	r3, #0
  108c20:	0a000014 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c24:	e51b3010 	ldr	r3, [fp, #-16]
  108c28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108c2c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108c30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c34:	e3530000 	cmp	r3, #0
  108c38:	0a00000e 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c40:	e593300c 	ldr	r3, [r3, #12]
  108c44:	e5933008 	ldr	r3, [r3, #8]
  108c48:	e3530000 	cmp	r3, #0
  108c4c:	0a000009 	beq	108c78 <sal_getaddrinfo+0xa4>
    {
        return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108c50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c54:	e593300c 	ldr	r3, [r3, #12]
  108c58:	e5934008 	ldr	r4, [r3, #8]
  108c5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108c60:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108c64:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108c68:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108c6c:	e12fff34 	blx	r4
  108c70:	e1a03000 	mov	r3, r0
  108c74:	ea000021 	b	108d00 <sal_getaddrinfo+0x12c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108c78:	e3a00001 	mov	r0, #1
  108c7c:	ebfff1c4 	bl	105394 <netdev_get_first_by_flags>
  108c80:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  108c84:	e51b3010 	ldr	r3, [fp, #-16]
  108c88:	e3530000 	cmp	r3, #0
  108c8c:	0a00001a 	beq	108cfc <sal_getaddrinfo+0x128>
  108c90:	e51b3010 	ldr	r3, [fp, #-16]
  108c94:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108c98:	e2033001 	and	r3, r3, #1
  108c9c:	e6ef3073 	uxtb	r3, r3
  108ca0:	e3530000 	cmp	r3, #0
  108ca4:	0a000014 	beq	108cfc <sal_getaddrinfo+0x128>
  108ca8:	e51b3010 	ldr	r3, [fp, #-16]
  108cac:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108cb0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108cb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cb8:	e3530000 	cmp	r3, #0
  108cbc:	0a00000e 	beq	108cfc <sal_getaddrinfo+0x128>
  108cc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cc4:	e593300c 	ldr	r3, [r3, #12]
  108cc8:	e5933008 	ldr	r3, [r3, #8]
  108ccc:	e3530000 	cmp	r3, #0
  108cd0:	0a000009 	beq	108cfc <sal_getaddrinfo+0x128>
        {
            return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108cd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cd8:	e593300c 	ldr	r3, [r3, #12]
  108cdc:	e5934008 	ldr	r4, [r3, #8]
  108ce0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108ce4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108ce8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108cec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108cf0:	e12fff34 	blx	r4
  108cf4:	e1a03000 	mov	r3, r0
  108cf8:	ea000000 	b	108d00 <sal_getaddrinfo+0x12c>
        }
    }

    return -1;
  108cfc:	e3e03000 	mvn	r3, #0
}
  108d00:	e1a00003 	mov	r0, r3
  108d04:	e24bd008 	sub	sp, fp, #8
  108d08:	e8bd8810 	pop	{r4, fp, pc}

00108d0c <sal_freeaddrinfo>:

void sal_freeaddrinfo(struct addrinfo *ai)
{
  108d0c:	e92d4800 	push	{fp, lr}
  108d10:	e28db004 	add	fp, sp, #4
  108d14:	e24dd010 	sub	sp, sp, #16
  108d18:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  108d1c:	e30f358c 	movw	r3, #62860	; 0xf58c
  108d20:	e3403014 	movt	r3, #20
  108d24:	e5933000 	ldr	r3, [r3]
  108d28:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  108d2c:	e51b3008 	ldr	r3, [fp, #-8]
  108d30:	e3530000 	cmp	r3, #0
  108d34:	0a000016 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d38:	e51b3008 	ldr	r3, [fp, #-8]
  108d3c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108d40:	e2033001 	and	r3, r3, #1
  108d44:	e6ef3073 	uxtb	r3, r3
  108d48:	e3530000 	cmp	r3, #0
  108d4c:	0a000010 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d50:	e51b3008 	ldr	r3, [fp, #-8]
  108d54:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108d58:	e50b300c 	str	r3, [fp, #-12]
  108d5c:	e51b300c 	ldr	r3, [fp, #-12]
  108d60:	e3530000 	cmp	r3, #0
  108d64:	0a00000a 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d68:	e51b300c 	ldr	r3, [fp, #-12]
  108d6c:	e593300c 	ldr	r3, [r3, #12]
  108d70:	e593300c 	ldr	r3, [r3, #12]
  108d74:	e3530000 	cmp	r3, #0
  108d78:	0a000005 	beq	108d94 <sal_freeaddrinfo+0x88>
    {
        pf->netdb_ops->freeaddrinfo(ai);
  108d7c:	e51b300c 	ldr	r3, [fp, #-12]
  108d80:	e593300c 	ldr	r3, [r3, #12]
  108d84:	e593300c 	ldr	r3, [r3, #12]
  108d88:	e51b0010 	ldr	r0, [fp, #-16]
  108d8c:	e12fff33 	blx	r3
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
        {
            pf->netdb_ops->freeaddrinfo(ai);
        }
    }
}
  108d90:	ea00001b 	b	108e04 <sal_freeaddrinfo+0xf8>
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108d94:	e3a00001 	mov	r0, #1
  108d98:	ebfff17d 	bl	105394 <netdev_get_first_by_flags>
  108d9c:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  108da0:	e51b3008 	ldr	r3, [fp, #-8]
  108da4:	e3530000 	cmp	r3, #0
  108da8:	0a000015 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108dac:	e51b3008 	ldr	r3, [fp, #-8]
  108db0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108db4:	e2033001 	and	r3, r3, #1
  108db8:	e6ef3073 	uxtb	r3, r3
  108dbc:	e3530000 	cmp	r3, #0
  108dc0:	0a00000f 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108dc4:	e51b3008 	ldr	r3, [fp, #-8]
  108dc8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108dcc:	e50b300c 	str	r3, [fp, #-12]
  108dd0:	e51b300c 	ldr	r3, [fp, #-12]
  108dd4:	e3530000 	cmp	r3, #0
  108dd8:	0a000009 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108ddc:	e51b300c 	ldr	r3, [fp, #-12]
  108de0:	e593300c 	ldr	r3, [r3, #12]
  108de4:	e593300c 	ldr	r3, [r3, #12]
  108de8:	e3530000 	cmp	r3, #0
  108dec:	0a000004 	beq	108e04 <sal_freeaddrinfo+0xf8>
            pf->netdb_ops->freeaddrinfo(ai);
  108df0:	e51b300c 	ldr	r3, [fp, #-12]
  108df4:	e593300c 	ldr	r3, [r3, #12]
  108df8:	e593300c 	ldr	r3, [r3, #12]
  108dfc:	e51b0010 	ldr	r0, [fp, #-16]
  108e00:	e12fff33 	blx	r3
}
  108e04:	e320f000 	nop	{0}
  108e08:	e24bd004 	sub	sp, fp, #4
  108e0c:	e8bd8800 	pop	{fp, pc}

00108e10 <unet_socket>:
 * socket options. To solve the issue, we do it separately in 2 steps.
 */
#define INTF_SOCK_NONBLOCK  04000
#define IMPL_SOCK_NONBLOCK  1
int unet_socket(int domain, int type, int protocol)
{
  108e10:	e92d4800 	push	{fp, lr}
  108e14:	e28db004 	add	fp, sp, #4
  108e18:	e24dd018 	sub	sp, sp, #24
  108e1c:	e50b0010 	str	r0, [fp, #-16]
  108e20:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  108e24:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket;

    /* filter-out socket options: SOCK_NONBLOCK & SOCK_CLOEXEC (not supported) */
    int flag = type & INTF_SOCK_NONBLOCK;
  108e28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108e2c:	e2033b02 	and	r3, r3, #2048	; 0x800
  108e30:	e50b3008 	str	r3, [fp, #-8]
    type &= ~INTF_SOCK_NONBLOCK;
  108e34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108e38:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  108e3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    socket = lwip_socket(domain, type, protocol);
  108e40:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  108e44:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108e48:	e51b0010 	ldr	r0, [fp, #-16]
  108e4c:	eb002795 	bl	112ca8 <lwip_socket>
  108e50:	e50b000c 	str	r0, [fp, #-12]
    // sock_wqueue_add((void*)get_socket(socket));

    /* handle the socket options */
    if (socket >= 0 && flag != 0)
  108e54:	e51b300c 	ldr	r3, [fp, #-12]
  108e58:	e3530000 	cmp	r3, #0
  108e5c:	ba000006 	blt	108e7c <unet_socket+0x6c>
  108e60:	e51b3008 	ldr	r3, [fp, #-8]
  108e64:	e3530000 	cmp	r3, #0
  108e68:	0a000003 	beq	108e7c <unet_socket+0x6c>
        unet_fcntl(socket, F_SETFL, flag);
  108e6c:	e51b2008 	ldr	r2, [fp, #-8]
  108e70:	e3a01004 	mov	r1, #4
  108e74:	e51b000c 	ldr	r0, [fp, #-12]
  108e78:	eb0000e2 	bl	109208 <unet_fcntl>

    return socket;
  108e7c:	e51b300c 	ldr	r3, [fp, #-12]
}
  108e80:	e1a00003 	mov	r0, r3
  108e84:	e24bd004 	sub	sp, fp, #4
  108e88:	e8bd8800 	pop	{fp, pc}

00108e8c <unet_close>:

int unet_close(int socket)
{
  108e8c:	e92d4800 	push	{fp, lr}
  108e90:	e28db004 	add	fp, sp, #4
  108e94:	e24dd010 	sub	sp, sp, #16
  108e98:	e50b0010 	str	r0, [fp, #-16]
    int result = lwip_close(socket);
  108e9c:	e51b0010 	ldr	r0, [fp, #-16]
  108ea0:	eb00226a 	bl	111850 <lwip_close>
  108ea4:	e50b0008 	str	r0, [fp, #-8]
    // sock_wqueue_delete((void*)get_socket(socket));

    return result;
  108ea8:	e51b3008 	ldr	r3, [fp, #-8]
}
  108eac:	e1a00003 	mov	r0, r3
  108eb0:	e24bd004 	sub	sp, fp, #4
  108eb4:	e8bd8800 	pop	{fp, pc}

00108eb8 <unet_bind>:

int unet_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108eb8:	e92d4800 	push	{fp, lr}
  108ebc:	e28db004 	add	fp, sp, #4
  108ec0:	e24dd010 	sub	sp, sp, #16
  108ec4:	e50b0008 	str	r0, [fp, #-8]
  108ec8:	e50b100c 	str	r1, [fp, #-12]
  108ecc:	e50b2010 	str	r2, [fp, #-16]
    return lwip_bind(socket, name, namelen);
  108ed0:	e51b2010 	ldr	r2, [fp, #-16]
  108ed4:	e51b100c 	ldr	r1, [fp, #-12]
  108ed8:	e51b0008 	ldr	r0, [fp, #-8]
  108edc:	eb0021f5 	bl	1116b8 <lwip_bind>
  108ee0:	e1a03000 	mov	r3, r0
}
  108ee4:	e1a00003 	mov	r0, r3
  108ee8:	e24bd004 	sub	sp, fp, #4
  108eec:	e8bd8800 	pop	{fp, pc}

00108ef0 <unet_listen>:

int unet_listen(int socket, int backlog)
{
  108ef0:	e92d4800 	push	{fp, lr}
  108ef4:	e28db004 	add	fp, sp, #4
  108ef8:	e24dd008 	sub	sp, sp, #8
  108efc:	e50b0008 	str	r0, [fp, #-8]
  108f00:	e50b100c 	str	r1, [fp, #-12]
    return lwip_listen(socket, backlog);
  108f04:	e51b100c 	ldr	r1, [fp, #-12]
  108f08:	e51b0008 	ldr	r0, [fp, #-8]
  108f0c:	eb00230e 	bl	111b4c <lwip_listen>
  108f10:	e1a03000 	mov	r3, r0
}
  108f14:	e1a00003 	mov	r0, r3
  108f18:	e24bd004 	sub	sp, fp, #4
  108f1c:	e8bd8800 	pop	{fp, pc}

00108f20 <unet_connect>:

int unet_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108f20:	e92d4800 	push	{fp, lr}
  108f24:	e28db004 	add	fp, sp, #4
  108f28:	e24dd010 	sub	sp, sp, #16
  108f2c:	e50b0008 	str	r0, [fp, #-8]
  108f30:	e50b100c 	str	r1, [fp, #-12]
  108f34:	e50b2010 	str	r2, [fp, #-16]
    return lwip_connect(socket, name, namelen);
  108f38:	e51b2010 	ldr	r2, [fp, #-16]
  108f3c:	e51b100c 	ldr	r1, [fp, #-12]
  108f40:	e51b0008 	ldr	r0, [fp, #-8]
  108f44:	eb00228b 	bl	111978 <lwip_connect>
  108f48:	e1a03000 	mov	r3, r0
}
  108f4c:	e1a00003 	mov	r0, r3
  108f50:	e24bd004 	sub	sp, fp, #4
  108f54:	e8bd8800 	pop	{fp, pc}

00108f58 <unet_accept>:

int unet_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  108f58:	e92d4800 	push	{fp, lr}
  108f5c:	e28db004 	add	fp, sp, #4
  108f60:	e24dd010 	sub	sp, sp, #16
  108f64:	e50b0008 	str	r0, [fp, #-8]
  108f68:	e50b100c 	str	r1, [fp, #-12]
  108f6c:	e50b2010 	str	r2, [fp, #-16]
    socket = lwip_accept(socket, addr, addrlen);
  108f70:	e51b2010 	ldr	r2, [fp, #-16]
  108f74:	e51b100c 	ldr	r1, [fp, #-12]
  108f78:	e51b0008 	ldr	r0, [fp, #-8]
  108f7c:	eb0020bf 	bl	111280 <lwip_accept>
  108f80:	e50b0008 	str	r0, [fp, #-8]
    // sock_wqueue_add((void*)get_socket(socket));

    return socket;
  108f84:	e51b3008 	ldr	r3, [fp, #-8]
}
  108f88:	e1a00003 	mov	r0, r3
  108f8c:	e24bd004 	sub	sp, fp, #4
  108f90:	e8bd8800 	pop	{fp, pc}

00108f94 <unet_sendto>:

int unet_sendto(int socket, const void *data, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)
{
  108f94:	e92d4800 	push	{fp, lr}
  108f98:	e28db004 	add	fp, sp, #4
  108f9c:	e24dd020 	sub	sp, sp, #32
  108fa0:	e50b0010 	str	r0, [fp, #-16]
  108fa4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  108fa8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  108fac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int result;
    if(tolen  == 0)
  108fb0:	e59b3008 	ldr	r3, [fp, #8]
  108fb4:	e3530000 	cmp	r3, #0
  108fb8:	1a00000a 	bne	108fe8 <unet_sendto+0x54>
    {
        result = lwip_sendto(socket, data, size, flags, RT_NULL, RT_NULL);
  108fbc:	e3a03000 	mov	r3, #0
  108fc0:	e58d3004 	str	r3, [sp, #4]
  108fc4:	e3a03000 	mov	r3, #0
  108fc8:	e58d3000 	str	r3, [sp]
  108fcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108fd0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  108fd4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108fd8:	e51b0010 	ldr	r0, [fp, #-16]
  108fdc:	eb00269d 	bl	112a58 <lwip_sendto>
  108fe0:	e50b0008 	str	r0, [fp, #-8]
  108fe4:	ea000009 	b	109010 <unet_sendto+0x7c>
    }
    else
    {
        result = lwip_sendto(socket, data, size, flags, to, tolen);
  108fe8:	e59b3008 	ldr	r3, [fp, #8]
  108fec:	e58d3004 	str	r3, [sp, #4]
  108ff0:	e59b3004 	ldr	r3, [fp, #4]
  108ff4:	e58d3000 	str	r3, [sp]
  108ff8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108ffc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109000:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109004:	e51b0010 	ldr	r0, [fp, #-16]
  109008:	eb002692 	bl	112a58 <lwip_sendto>
  10900c:	e50b0008 	str	r0, [fp, #-8]
    }
    if(result <= 0)
  109010:	e51b3008 	ldr	r3, [fp, #-8]
  109014:	e3530000 	cmp	r3, #0
  109018:	ca000005 	bgt	109034 <unet_sendto+0xa0>
    {
        rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  10901c:	e3a02058 	mov	r2, #88	; 0x58
  109020:	e3061148 	movw	r1, #24904	; 0x6148
  109024:	e3401014 	movt	r1, #20
  109028:	e306012c 	movw	r0, #24876	; 0x612c
  10902c:	e3400014 	movt	r0, #20
  109030:	ebffe837 	bl	103114 <rt_kprintf>
    }
    return result;
  109034:	e51b3008 	ldr	r3, [fp, #-8]
}
  109038:	e1a00003 	mov	r0, r3
  10903c:	e24bd004 	sub	sp, fp, #4
  109040:	e8bd8800 	pop	{fp, pc}

00109044 <unet_recvfrom>:

int unet_recvfrom(int socket, void *mem, size_t size, int flags, struct sockaddr *from, socklen_t *fromlen)
{
  109044:	e92d4800 	push	{fp, lr}
  109048:	e28db004 	add	fp, sp, #4
  10904c:	e24dd018 	sub	sp, sp, #24
  109050:	e50b0008 	str	r0, [fp, #-8]
  109054:	e50b100c 	str	r1, [fp, #-12]
  109058:	e50b2010 	str	r2, [fp, #-16]
  10905c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if(from && fromlen)
  109060:	e59b3004 	ldr	r3, [fp, #4]
  109064:	e3530000 	cmp	r3, #0
  109068:	0a00000d 	beq	1090a4 <unet_recvfrom+0x60>
  10906c:	e59b3008 	ldr	r3, [fp, #8]
  109070:	e3530000 	cmp	r3, #0
  109074:	0a00000a 	beq	1090a4 <unet_recvfrom+0x60>
    {
        return lwip_recvfrom(socket, mem, size, flags, from, fromlen);
  109078:	e59b3008 	ldr	r3, [fp, #8]
  10907c:	e58d3004 	str	r3, [sp, #4]
  109080:	e59b3004 	ldr	r3, [fp, #4]
  109084:	e58d3000 	str	r3, [sp]
  109088:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10908c:	e51b2010 	ldr	r2, [fp, #-16]
  109090:	e51b100c 	ldr	r1, [fp, #-12]
  109094:	e51b0008 	ldr	r0, [fp, #-8]
  109098:	eb002303 	bl	111cac <lwip_recvfrom>
  10909c:	e1a03000 	mov	r3, r0
  1090a0:	ea000009 	b	1090cc <unet_recvfrom+0x88>
    }
    else
    {
        return lwip_recvfrom(socket, mem, size, flags, RT_NULL, RT_NULL);
  1090a4:	e3a03000 	mov	r3, #0
  1090a8:	e58d3004 	str	r3, [sp, #4]
  1090ac:	e3a03000 	mov	r3, #0
  1090b0:	e58d3000 	str	r3, [sp]
  1090b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1090b8:	e51b2010 	ldr	r2, [fp, #-16]
  1090bc:	e51b100c 	ldr	r1, [fp, #-12]
  1090c0:	e51b0008 	ldr	r0, [fp, #-8]
  1090c4:	eb0022f8 	bl	111cac <lwip_recvfrom>
  1090c8:	e1a03000 	mov	r3, r0
    }
}
  1090cc:	e1a00003 	mov	r0, r3
  1090d0:	e24bd004 	sub	sp, fp, #4
  1090d4:	e8bd8800 	pop	{fp, pc}

001090d8 <unet_getsockopt>:

int unet_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  1090d8:	e92d4800 	push	{fp, lr}
  1090dc:	e28db004 	add	fp, sp, #4
  1090e0:	e24dd018 	sub	sp, sp, #24
  1090e4:	e50b0008 	str	r0, [fp, #-8]
  1090e8:	e50b100c 	str	r1, [fp, #-12]
  1090ec:	e50b2010 	str	r2, [fp, #-16]
  1090f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getsockopt(socket, level, optname, optval, optlen);
  1090f4:	e59b3004 	ldr	r3, [fp, #4]
  1090f8:	e58d3000 	str	r3, [sp]
  1090fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109100:	e51b2010 	ldr	r2, [fp, #-16]
  109104:	e51b100c 	ldr	r1, [fp, #-12]
  109108:	e51b0008 	ldr	r0, [fp, #-8]
  10910c:	eb002bfb 	bl	114100 <lwip_getsockopt>
  109110:	e1a03000 	mov	r3, r0
}
  109114:	e1a00003 	mov	r0, r3
  109118:	e24bd004 	sub	sp, fp, #4
  10911c:	e8bd8800 	pop	{fp, pc}

00109120 <unet_setsockopt>:

int unet_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  109120:	e92d4800 	push	{fp, lr}
  109124:	e28db004 	add	fp, sp, #4
  109128:	e24dd018 	sub	sp, sp, #24
  10912c:	e50b0008 	str	r0, [fp, #-8]
  109130:	e50b100c 	str	r1, [fp, #-12]
  109134:	e50b2010 	str	r2, [fp, #-16]
  109138:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_setsockopt(socket, level, optname, optval, optlen);
  10913c:	e59b3004 	ldr	r3, [fp, #4]
  109140:	e58d3000 	str	r3, [sp]
  109144:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109148:	e51b2010 	ldr	r2, [fp, #-16]
  10914c:	e51b100c 	ldr	r1, [fp, #-12]
  109150:	e51b0008 	ldr	r0, [fp, #-8]
  109154:	eb002eb1 	bl	114c20 <lwip_setsockopt>
  109158:	e1a03000 	mov	r3, r0
}
  10915c:	e1a00003 	mov	r0, r3
  109160:	e24bd004 	sub	sp, fp, #4
  109164:	e8bd8800 	pop	{fp, pc}

00109168 <unet_shutdown>:

int unet_shutdown(int socket, int how)
{
  109168:	e92d4800 	push	{fp, lr}
  10916c:	e28db004 	add	fp, sp, #4
  109170:	e24dd008 	sub	sp, sp, #8
  109174:	e50b0008 	str	r0, [fp, #-8]
  109178:	e50b100c 	str	r1, [fp, #-12]
    return lwip_shutdown(socket, how);
  10917c:	e51b100c 	ldr	r1, [fp, #-12]
  109180:	e51b0008 	ldr	r0, [fp, #-8]
  109184:	eb002ae3 	bl	113d18 <lwip_shutdown>
  109188:	e1a03000 	mov	r3, r0
}
  10918c:	e1a00003 	mov	r0, r3
  109190:	e24bd004 	sub	sp, fp, #4
  109194:	e8bd8800 	pop	{fp, pc}

00109198 <unet_getpeername>:

int unet_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  109198:	e92d4800 	push	{fp, lr}
  10919c:	e28db004 	add	fp, sp, #4
  1091a0:	e24dd010 	sub	sp, sp, #16
  1091a4:	e50b0008 	str	r0, [fp, #-8]
  1091a8:	e50b100c 	str	r1, [fp, #-12]
  1091ac:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getpeername(socket, name, namelen);
  1091b0:	e51b2010 	ldr	r2, [fp, #-16]
  1091b4:	e51b100c 	ldr	r1, [fp, #-12]
  1091b8:	e51b0008 	ldr	r0, [fp, #-8]
  1091bc:	eb002bb1 	bl	114088 <lwip_getpeername>
  1091c0:	e1a03000 	mov	r3, r0
}
  1091c4:	e1a00003 	mov	r0, r3
  1091c8:	e24bd004 	sub	sp, fp, #4
  1091cc:	e8bd8800 	pop	{fp, pc}

001091d0 <unet_getsockname>:

int unet_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  1091d0:	e92d4800 	push	{fp, lr}
  1091d4:	e28db004 	add	fp, sp, #4
  1091d8:	e24dd010 	sub	sp, sp, #16
  1091dc:	e50b0008 	str	r0, [fp, #-8]
  1091e0:	e50b100c 	str	r1, [fp, #-12]
  1091e4:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getsockname(socket, name, namelen);
  1091e8:	e51b2010 	ldr	r2, [fp, #-16]
  1091ec:	e51b100c 	ldr	r1, [fp, #-12]
  1091f0:	e51b0008 	ldr	r0, [fp, #-8]
  1091f4:	eb002bb2 	bl	1140c4 <lwip_getsockname>
  1091f8:	e1a03000 	mov	r3, r0
}
  1091fc:	e1a00003 	mov	r0, r3
  109200:	e24bd004 	sub	sp, fp, #4
  109204:	e8bd8800 	pop	{fp, pc}

00109208 <unet_fcntl>:

int unet_fcntl(int socket, int cmd, int val)
{
  109208:	e92d4800 	push	{fp, lr}
  10920c:	e28db004 	add	fp, sp, #4
  109210:	e24dd010 	sub	sp, sp, #16
  109214:	e50b0008 	str	r0, [fp, #-8]
  109218:	e50b100c 	str	r1, [fp, #-12]
  10921c:	e50b2010 	str	r2, [fp, #-16]
    return lwip_fcntl(socket, cmd, val);
  109220:	e51b2010 	ldr	r2, [fp, #-16]
  109224:	e51b100c 	ldr	r1, [fp, #-12]
  109228:	e51b0008 	ldr	r0, [fp, #-8]
  10922c:	eb0031c7 	bl	115950 <lwip_fcntl>
  109230:	e1a03000 	mov	r3, r0
}
  109234:	e1a00003 	mov	r0, r3
  109238:	e24bd004 	sub	sp, fp, #4
  10923c:	e8bd8800 	pop	{fp, pc}

00109240 <unet_ioctl>:

/* Observe the 'real' IOCTL operations in unet 'api/sockets.c' and find that
 * 'argp' is used as an integer pointer. */
int unet_ioctl(int socket, long cmd, void *argp)
{
  109240:	e92d4800 	push	{fp, lr}
  109244:	e28db004 	add	fp, sp, #4
  109248:	e24dd010 	sub	sp, sp, #16
  10924c:	e50b0008 	str	r0, [fp, #-8]
  109250:	e50b100c 	str	r1, [fp, #-12]
  109254:	e50b2010 	str	r2, [fp, #-16]
    return lwip_ioctl(socket, cmd, argp);
  109258:	e51b2010 	ldr	r2, [fp, #-16]
  10925c:	e51b100c 	ldr	r1, [fp, #-12]
  109260:	e51b0008 	ldr	r0, [fp, #-8]
  109264:	eb003112 	bl	1156b4 <lwip_ioctl>
  109268:	e1a03000 	mov	r3, r0
}
  10926c:	e1a00003 	mov	r0, r3
  109270:	e24bd004 	sub	sp, fp, #4
  109274:	e8bd8800 	pop	{fp, pc}

00109278 <unet_gethostbyname>:
#include <stdio.h>
struct hostent* unet_gethostbyname(const char *name)
{
  109278:	e92d4800 	push	{fp, lr}
  10927c:	e28db004 	add	fp, sp, #4
  109280:	e24dd008 	sub	sp, sp, #8
  109284:	e50b0008 	str	r0, [fp, #-8]
    static struct hostent s_hostent, *p_hostent = RT_NULL;
    static char *s_aliases;
    static ip_addr_t s_hostent_addr;
    static ip_addr_t *s_phostent_addr[2];
    static char s_hostname[DNS_MAX_NAME_LENGTH + 1];
    p_hostent = lwip_gethostbyname(name);
  109288:	e51b0008 	ldr	r0, [fp, #-8]
  10928c:	eb001c76 	bl	11046c <lwip_gethostbyname>
  109290:	e1a02000 	mov	r2, r0
  109294:	e30d3494 	movw	r3, #54420	; 0xd494
  109298:	e3403014 	movt	r3, #20
  10929c:	e5832000 	str	r2, [r3]
    memset(&s_hostent, 0, sizeof(s_hostent));
  1092a0:	e3a02014 	mov	r2, #20
  1092a4:	e3a01000 	mov	r1, #0
  1092a8:	e30d0498 	movw	r0, #54424	; 0xd498
  1092ac:	e3400014 	movt	r0, #20
  1092b0:	eb00dfe1 	bl	14123c <memset>
    /* fill hostent */
    s_hostent_addr = *((ip_addr_t *) p_hostent->h_addr);
  1092b4:	e30d3494 	movw	r3, #54420	; 0xd494
  1092b8:	e3403014 	movt	r3, #20
  1092bc:	e5933000 	ldr	r3, [r3]
  1092c0:	e5933010 	ldr	r3, [r3, #16]
  1092c4:	e5932000 	ldr	r2, [r3]
  1092c8:	e30d34ac 	movw	r3, #54444	; 0xd4ac
  1092cc:	e3403014 	movt	r3, #20
  1092d0:	e5922000 	ldr	r2, [r2]
  1092d4:	e5832000 	str	r2, [r3]
    s_phostent_addr[0] = &s_hostent_addr;
  1092d8:	e30d34b0 	movw	r3, #54448	; 0xd4b0
  1092dc:	e3403014 	movt	r3, #20
  1092e0:	e30d24ac 	movw	r2, #54444	; 0xd4ac
  1092e4:	e3402014 	movt	r2, #20
  1092e8:	e5832000 	str	r2, [r3]
    s_phostent_addr[1] = NULL;
  1092ec:	e30d34b0 	movw	r3, #54448	; 0xd4b0
  1092f0:	e3403014 	movt	r3, #20
  1092f4:	e3a02000 	mov	r2, #0
  1092f8:	e5832004 	str	r2, [r3, #4]
    strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  1092fc:	e3a02c01 	mov	r2, #256	; 0x100
  109300:	e51b1008 	ldr	r1, [fp, #-8]
  109304:	e30d04b8 	movw	r0, #54456	; 0xd4b8
  109308:	e3400014 	movt	r0, #20
  10930c:	eb00e0ac 	bl	1415c4 <strncpy>
    s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  109310:	e30d34b8 	movw	r3, #54456	; 0xd4b8
  109314:	e3403014 	movt	r3, #20
  109318:	e3a02000 	mov	r2, #0
  10931c:	e5c32100 	strb	r2, [r3, #256]	; 0x100
    s_hostent.h_name = s_hostname;
  109320:	e30d3498 	movw	r3, #54424	; 0xd498
  109324:	e3403014 	movt	r3, #20
  109328:	e30d24b8 	movw	r2, #54456	; 0xd4b8
  10932c:	e3402014 	movt	r2, #20
  109330:	e5832000 	str	r2, [r3]
    s_aliases = NULL;
  109334:	e30d35bc 	movw	r3, #54716	; 0xd5bc
  109338:	e3403014 	movt	r3, #20
  10933c:	e3a02000 	mov	r2, #0
  109340:	e5832000 	str	r2, [r3]
    s_hostent.h_aliases = &s_aliases;
  109344:	e30d3498 	movw	r3, #54424	; 0xd498
  109348:	e3403014 	movt	r3, #20
  10934c:	e30d25bc 	movw	r2, #54716	; 0xd5bc
  109350:	e3402014 	movt	r2, #20
  109354:	e5832004 	str	r2, [r3, #4]
    s_hostent.h_addrtype = AF_INET;
  109358:	e30d3498 	movw	r3, #54424	; 0xd498
  10935c:	e3403014 	movt	r3, #20
  109360:	e3a02002 	mov	r2, #2
  109364:	e5832008 	str	r2, [r3, #8]
    s_hostent.h_length = sizeof(ip_addr_t);
  109368:	e30d3498 	movw	r3, #54424	; 0xd498
  10936c:	e3403014 	movt	r3, #20
  109370:	e3a02004 	mov	r2, #4
  109374:	e583200c 	str	r2, [r3, #12]
    s_hostent.h_addr_list = (char**)&s_phostent_addr;
  109378:	e30d3498 	movw	r3, #54424	; 0xd498
  10937c:	e3403014 	movt	r3, #20
  109380:	e30d24b0 	movw	r2, #54448	; 0xd4b0
  109384:	e3402014 	movt	r2, #20
  109388:	e5832010 	str	r2, [r3, #16]
    p_hostent = &s_hostent;
  10938c:	e30d3494 	movw	r3, #54420	; 0xd494
  109390:	e3403014 	movt	r3, #20
  109394:	e30d2498 	movw	r2, #54424	; 0xd498
  109398:	e3402014 	movt	r2, #20
  10939c:	e5832000 	str	r2, [r3]

    return p_hostent;
  1093a0:	e30d3494 	movw	r3, #54420	; 0xd494
  1093a4:	e3403014 	movt	r3, #20
  1093a8:	e5933000 	ldr	r3, [r3]
}
  1093ac:	e1a00003 	mov	r0, r3
  1093b0:	e24bd004 	sub	sp, fp, #4
  1093b4:	e8bd8800 	pop	{fp, pc}

001093b8 <unet_gethostbyname_r>:

int unet_gethostbyname_r(const char *name, struct hostent *ret, char *buf, size_t buflen, struct hostent **result, int *h_errnop)
{
  1093b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1093bc:	e28db000 	add	fp, sp, #0
  1093c0:	e24dd014 	sub	sp, sp, #20
  1093c4:	e50b0008 	str	r0, [fp, #-8]
  1093c8:	e50b100c 	str	r1, [fp, #-12]
  1093cc:	e50b2010 	str	r2, [fp, #-16]
  1093d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return 0;
  1093d4:	e3a03000 	mov	r3, #0
}
  1093d8:	e1a00003 	mov	r0, r3
  1093dc:	e28bd000 	add	sp, fp, #0
  1093e0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1093e4:	e12fff1e 	bx	lr

001093e8 <unet_getaddrinfo>:

int unet_getaddrinfo(const char *nodename, const char *servname, const struct addrinfo *hints, struct addrinfo **res)
{
  1093e8:	e92d4800 	push	{fp, lr}
  1093ec:	e28db004 	add	fp, sp, #4
  1093f0:	e24dd010 	sub	sp, sp, #16
  1093f4:	e50b0008 	str	r0, [fp, #-8]
  1093f8:	e50b100c 	str	r1, [fp, #-12]
  1093fc:	e50b2010 	str	r2, [fp, #-16]
  109400:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getaddrinfo(nodename, servname, hints, res);
  109404:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109408:	e51b2010 	ldr	r2, [fp, #-16]
  10940c:	e51b100c 	ldr	r1, [fp, #-12]
  109410:	e51b0008 	ldr	r0, [fp, #-8]
  109414:	eb001ce2 	bl	1107a4 <lwip_getaddrinfo>
  109418:	e1a03000 	mov	r3, r0
}
  10941c:	e1a00003 	mov	r0, r3
  109420:	e24bd004 	sub	sp, fp, #4
  109424:	e8bd8800 	pop	{fp, pc}

00109428 <unet_freeaddrinfo>:

void unet_freeaddrinfo(struct addrinfo *ai)
{
  109428:	e92d4800 	push	{fp, lr}
  10942c:	e28db004 	add	fp, sp, #4
  109430:	e24dd008 	sub	sp, sp, #8
  109434:	e50b0008 	str	r0, [fp, #-8]
    lwip_freeaddrinfo(ai);
  109438:	e51b0008 	ldr	r0, [fp, #-8]
  10943c:	eb001cc5 	bl	110758 <lwip_freeaddrinfo>
}
  109440:	e320f000 	nop	{0}
  109444:	e24bd004 	sub	sp, fp, #4
  109448:	e8bd8800 	pop	{fp, pc}

0010944c <rt_list_init>:
{
  10944c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  109450:	e28db000 	add	fp, sp, #0
  109454:	e24dd00c 	sub	sp, sp, #12
  109458:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  10945c:	e51b3008 	ldr	r3, [fp, #-8]
  109460:	e51b2008 	ldr	r2, [fp, #-8]
  109464:	e5832004 	str	r2, [r3, #4]
  109468:	e51b3008 	ldr	r3, [fp, #-8]
  10946c:	e5932004 	ldr	r2, [r3, #4]
  109470:	e51b3008 	ldr	r3, [fp, #-8]
  109474:	e5832000 	str	r2, [r3]
}
  109478:	e320f000 	nop	{0}
  10947c:	e28bd000 	add	sp, fp, #0
  109480:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  109484:	e12fff1e 	bx	lr

00109488 <accept_internal>:
#include "dfs_net.h"

#include "sal_socket.h"

int accept_internal(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  109488:	e92d4810 	push	{r4, fp, lr}
  10948c:	e28db008 	add	fp, sp, #8
  109490:	e24dd024 	sub	sp, sp, #36	; 0x24
  109494:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  109498:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  10949c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket = -1;
  1094a0:	e3e03000 	mvn	r3, #0
  1094a4:	e50b3010 	str	r3, [fp, #-16]
    int socket = dfs_net_getsocket(s);
  1094a8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1094ac:	eb000352 	bl	10a1fc <dfs_net_getsocket>
  1094b0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec

    new_socket = sal_accept(socket, addr, addrlen);
  1094b4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1094b8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1094bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1094c0:	ebfff95f 	bl	107a44 <sal_accept>
  1094c4:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  1094c8:	e51b3010 	ldr	r3, [fp, #-16]
  1094cc:	e3730001 	cmn	r3, #1
  1094d0:	0a000050 	beq	109618 <accept_internal+0x190>
        /* this is a new socket, create it in file system fd */
        int fd;
        struct dfs_fd *d;

        /* allocate a fd */
        fd = fd_new();
  1094d4:	eb000272 	bl	109ea4 <fd_new>
  1094d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (fd < 0)
  1094dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1094e0:	e3530000 	cmp	r3, #0
  1094e4:	aa000003 	bge	1094f8 <accept_internal+0x70>
        {
            sal_closesocket(new_socket);
  1094e8:	e51b0010 	ldr	r0, [fp, #-16]
  1094ec:	ebfffc25 	bl	108588 <sal_closesocket>
            return -ENOMEM;
  1094f0:	e3e0300b 	mvn	r3, #11
  1094f4:	ea000048 	b	10961c <accept_internal+0x194>
        }

        d = fd_get(fd);
  1094f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1094fc:	eb00029d 	bl	109f78 <fd_get>
  109500:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if(d)
  109504:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109508:	e3530000 	cmp	r3, #0
  10950c:	0a00003d 	beq	109608 <accept_internal+0x180>
        {
            /* this is a socket fd */
            d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  109510:	e3a00028 	mov	r0, #40	; 0x28
  109514:	ebffe69e 	bl	102f94 <rt_malloc>
  109518:	e1a02000 	mov	r2, r0
  10951c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109520:	e5832018 	str	r2, [r3, #24]
            if (!d->fnode)
  109524:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109528:	e5933018 	ldr	r3, [r3, #24]
  10952c:	e3530000 	cmp	r3, #0
  109530:	1a000003 	bne	109544 <accept_internal+0xbc>
            {
                /* release fd */
                fd_release(fd);
  109534:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  109538:	eb0002ed 	bl	10a0f4 <fd_release>
                return -ENOMEM;
  10953c:	e3e0300b 	mvn	r3, #11
  109540:	ea000035 	b	10961c <accept_internal+0x194>
            }
            rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  109544:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109548:	e5933018 	ldr	r3, [r3, #24]
  10954c:	e3a02028 	mov	r2, #40	; 0x28
  109550:	e3a01000 	mov	r1, #0
  109554:	e1a00003 	mov	r0, r3
  109558:	ebffe75a 	bl	1032c8 <rt_memset>
            rt_list_init(&d->fnode->list);
  10955c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109560:	e5933018 	ldr	r3, [r3, #24]
  109564:	e2833010 	add	r3, r3, #16
  109568:	e1a00003 	mov	r0, r3
  10956c:	ebffffb6 	bl	10944c <rt_list_init>

            d->fnode->type = FT_SOCKET;
  109570:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109574:	e5933018 	ldr	r3, [r3, #24]
  109578:	e3a02001 	mov	r2, #1
  10957c:	e1c320b0 	strh	r2, [r3]
            d->fnode->path = NULL;
  109580:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109584:	e5933018 	ldr	r3, [r3, #24]
  109588:	e3a02000 	mov	r2, #0
  10958c:	e5832004 	str	r2, [r3, #4]
            d->fnode->fullpath = NULL;
  109590:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109594:	e5933018 	ldr	r3, [r3, #24]
  109598:	e3a02000 	mov	r2, #0
  10959c:	e5832008 	str	r2, [r3, #8]
            d->fnode->ref_count = 1;
  1095a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095a4:	e5933018 	ldr	r3, [r3, #24]
  1095a8:	e3a02001 	mov	r2, #1
  1095ac:	e583200c 	str	r2, [r3, #12]
            d->fnode->fops = dfs_net_get_fops();
  1095b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095b4:	e5934018 	ldr	r4, [r3, #24]
  1095b8:	eb0003ae 	bl	10a478 <dfs_net_get_fops>
  1095bc:	e1a03000 	mov	r3, r0
  1095c0:	e5843018 	str	r3, [r4, #24]
            d->flags = O_RDWR; /* set flags as read and write */
  1095c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095c8:	e3a02002 	mov	r2, #2
  1095cc:	e5832004 	str	r2, [r3, #4]
            d->fnode->size = 0;
  1095d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095d4:	e5933018 	ldr	r3, [r3, #24]
  1095d8:	e3a02000 	mov	r2, #0
  1095dc:	e5832020 	str	r2, [r3, #32]
            d->pos = 0;
  1095e0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1095e4:	e3a02000 	mov	r2, #0
  1095e8:	e3a03000 	mov	r3, #0
  1095ec:	e1c121f0 	strd	r2, [r1, #16]

            /* set socket to the data of dfs_fd */
            d->fnode->data = (void *)(size_t)new_socket;
  1095f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095f4:	e5933018 	ldr	r3, [r3, #24]
  1095f8:	e51b2010 	ldr	r2, [fp, #-16]
  1095fc:	e5832024 	str	r2, [r3, #36]	; 0x24

            return fd;
  109600:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109604:	ea000004 	b	10961c <accept_internal+0x194>
        }

        sal_closesocket(new_socket);
  109608:	e51b0010 	ldr	r0, [fp, #-16]
  10960c:	ebfffbdd 	bl	108588 <sal_closesocket>
        return -ENOMEM;
  109610:	e3e0300b 	mvn	r3, #11
  109614:	ea000000 	b	10961c <accept_internal+0x194>
    }

    return -1;
  109618:	e3e03000 	mvn	r3, #0
}
  10961c:	e1a00003 	mov	r0, r3
  109620:	e24bd008 	sub	sp, fp, #8
  109624:	e8bd8810 	pop	{r4, fp, pc}

00109628 <bind_internal>:

int bind_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  109628:	e92d4800 	push	{fp, lr}
  10962c:	e28db004 	add	fp, sp, #4
  109630:	e24dd018 	sub	sp, sp, #24
  109634:	e50b0010 	str	r0, [fp, #-16]
  109638:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10963c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  109640:	e51b0010 	ldr	r0, [fp, #-16]
  109644:	eb0002ec 	bl	10a1fc <dfs_net_getsocket>
  109648:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_bind(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_bind(socket, name, namelen);
  10964c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109650:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109654:	e51b0008 	ldr	r0, [fp, #-8]
  109658:	ebfff973 	bl	107c2c <sal_bind>
  10965c:	e1a03000 	mov	r3, r0
}
  109660:	e1a00003 	mov	r0, r3
  109664:	e24bd004 	sub	sp, fp, #4
  109668:	e8bd8800 	pop	{fp, pc}

0010966c <connect_internal>:

int connect_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  10966c:	e92d4800 	push	{fp, lr}
  109670:	e28db004 	add	fp, sp, #4
  109674:	e24dd018 	sub	sp, sp, #24
  109678:	e50b0010 	str	r0, [fp, #-16]
  10967c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109680:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  109684:	e51b0010 	ldr	r0, [fp, #-16]
  109688:	eb0002db 	bl	10a1fc <dfs_net_getsocket>
  10968c:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_connect(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_connect(socket, name, namelen);
  109690:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109694:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109698:	e51b0008 	ldr	r0, [fp, #-8]
  10969c:	ebfffaad 	bl	108158 <sal_connect>
  1096a0:	e1a03000 	mov	r3, r0
}
  1096a4:	e1a00003 	mov	r0, r3
  1096a8:	e24bd004 	sub	sp, fp, #4
  1096ac:	e8bd8800 	pop	{fp, pc}

001096b0 <setsockopt_internal>:

int setsockopt_internal(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  1096b0:	e92d4800 	push	{fp, lr}
  1096b4:	e28db004 	add	fp, sp, #4
  1096b8:	e24dd020 	sub	sp, sp, #32
  1096bc:	e50b0010 	str	r0, [fp, #-16]
  1096c0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1096c4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1096c8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  1096cc:	e51b0010 	ldr	r0, [fp, #-16]
  1096d0:	eb0002c9 	bl	10a1fc <dfs_net_getsocket>
  1096d4:	e50b0008 	str	r0, [fp, #-8]

    return sal_setsockopt(socket, level, optname, optval, optlen);
  1096d8:	e59b3004 	ldr	r3, [fp, #4]
  1096dc:	e58d3000 	str	r3, [sp]
  1096e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1096e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1096e8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1096ec:	e51b0008 	ldr	r0, [fp, #-8]
  1096f0:	ebfffa6e 	bl	1080b0 <sal_setsockopt>
  1096f4:	e1a03000 	mov	r3, r0
}
  1096f8:	e1a00003 	mov	r0, r3
  1096fc:	e24bd004 	sub	sp, fp, #4
  109700:	e8bd8800 	pop	{fp, pc}

00109704 <listen_internal>:

int listen_internal(int s, int backlog)
{
  109704:	e92d4800 	push	{fp, lr}
  109708:	e28db004 	add	fp, sp, #4
  10970c:	e24dd010 	sub	sp, sp, #16
  109710:	e50b0010 	str	r0, [fp, #-16]
  109714:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int socket = dfs_net_getsocket(s);
  109718:	e51b0010 	ldr	r0, [fp, #-16]
  10971c:	eb0002b6 	bl	10a1fc <dfs_net_getsocket>
  109720:	e50b0008 	str	r0, [fp, #-8]

    return sal_listen(socket, backlog);
  109724:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109728:	e51b0008 	ldr	r0, [fp, #-8]
  10972c:	ebfffab8 	bl	108214 <sal_listen>
  109730:	e1a03000 	mov	r3, r0
}
  109734:	e1a00003 	mov	r0, r3
  109738:	e24bd004 	sub	sp, fp, #4
  10973c:	e8bd8800 	pop	{fp, pc}

00109740 <recv_internal>:


int recv_internal(int s, void *mem, size_t len, int flags)
{
  109740:	e92d4800 	push	{fp, lr}
  109744:	e28db004 	add	fp, sp, #4
  109748:	e24dd020 	sub	sp, sp, #32
  10974c:	e50b0010 	str	r0, [fp, #-16]
  109750:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109754:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109758:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  10975c:	e51b0010 	ldr	r0, [fp, #-16]
  109760:	eb0002a5 	bl	10a1fc <dfs_net_getsocket>
  109764:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, NULL, NULL);
  109768:	e3a03000 	mov	r3, #0
  10976c:	e58d3004 	str	r3, [sp, #4]
  109770:	e3a03000 	mov	r3, #0
  109774:	e58d3000 	str	r3, [sp]
  109778:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10977c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109780:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109784:	e51b0008 	ldr	r0, [fp, #-8]
  109788:	ebfffac5 	bl	1082a4 <sal_recvfrom>
  10978c:	e1a03000 	mov	r3, r0
}
  109790:	e1a00003 	mov	r0, r3
  109794:	e24bd004 	sub	sp, fp, #4
  109798:	e8bd8800 	pop	{fp, pc}

0010979c <recvfrom_internal>:

int recvfrom_internal(int s, void *mem, size_t len, int flags,
             struct sockaddr *from, socklen_t *fromlen)
{
  10979c:	e92d4800 	push	{fp, lr}
  1097a0:	e28db004 	add	fp, sp, #4
  1097a4:	e24dd020 	sub	sp, sp, #32
  1097a8:	e50b0010 	str	r0, [fp, #-16]
  1097ac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1097b0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1097b4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  1097b8:	e51b0010 	ldr	r0, [fp, #-16]
  1097bc:	eb00028e 	bl	10a1fc <dfs_net_getsocket>
  1097c0:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, from, fromlen);
  1097c4:	e59b3008 	ldr	r3, [fp, #8]
  1097c8:	e58d3004 	str	r3, [sp, #4]
  1097cc:	e59b3004 	ldr	r3, [fp, #4]
  1097d0:	e58d3000 	str	r3, [sp]
  1097d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1097d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1097dc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1097e0:	e51b0008 	ldr	r0, [fp, #-8]
  1097e4:	ebfffaae 	bl	1082a4 <sal_recvfrom>
  1097e8:	e1a03000 	mov	r3, r0
}
  1097ec:	e1a00003 	mov	r0, r3
  1097f0:	e24bd004 	sub	sp, fp, #4
  1097f4:	e8bd8800 	pop	{fp, pc}

001097f8 <send_internal>:

int send_internal(int s, const void *dataptr, size_t size, int flags)
{
  1097f8:	e92d4800 	push	{fp, lr}
  1097fc:	e28db004 	add	fp, sp, #4
  109800:	e24dd020 	sub	sp, sp, #32
  109804:	e50b0010 	str	r0, [fp, #-16]
  109808:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10980c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109810:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109814:	e51b0010 	ldr	r0, [fp, #-16]
  109818:	eb000277 	bl	10a1fc <dfs_net_getsocket>
  10981c:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, NULL, 0);
  109820:	e3a03000 	mov	r3, #0
  109824:	e58d3004 	str	r3, [sp, #4]
  109828:	e3a03000 	mov	r3, #0
  10982c:	e58d3000 	str	r3, [sp]
  109830:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109834:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109838:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10983c:	e51b0008 	ldr	r0, [fp, #-8]
  109840:	ebfffacb 	bl	108374 <sal_sendto>
  109844:	e1a03000 	mov	r3, r0
}
  109848:	e1a00003 	mov	r0, r3
  10984c:	e24bd004 	sub	sp, fp, #4
  109850:	e8bd8800 	pop	{fp, pc}

00109854 <sendto_internal>:

int sendto_internal(int s, const void *dataptr, size_t size, int flags,
           const struct sockaddr *to, socklen_t tolen)
{
  109854:	e92d4800 	push	{fp, lr}
  109858:	e28db004 	add	fp, sp, #4
  10985c:	e24dd020 	sub	sp, sp, #32
  109860:	e50b0010 	str	r0, [fp, #-16]
  109864:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109868:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10986c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109870:	e51b0010 	ldr	r0, [fp, #-16]
  109874:	eb000260 	bl	10a1fc <dfs_net_getsocket>
  109878:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, to, tolen);
  10987c:	e59b3008 	ldr	r3, [fp, #8]
  109880:	e58d3004 	str	r3, [sp, #4]
  109884:	e59b3004 	ldr	r3, [fp, #4]
  109888:	e58d3000 	str	r3, [sp]
  10988c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109890:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109894:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109898:	e51b0008 	ldr	r0, [fp, #-8]
  10989c:	ebfffab4 	bl	108374 <sal_sendto>
  1098a0:	e1a03000 	mov	r3, r0
}
  1098a4:	e1a00003 	mov	r0, r3
  1098a8:	e24bd004 	sub	sp, fp, #4
  1098ac:	e8bd8800 	pop	{fp, pc}

001098b0 <socket_internal>:

int socket_internal(int domain, int type, int protocol)
{
  1098b0:	e92d4810 	push	{r4, fp, lr}
  1098b4:	e28db008 	add	fp, sp, #8
  1098b8:	e24dd024 	sub	sp, sp, #36	; 0x24
  1098bc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1098c0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1098c4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int fd;
    int socket;
    struct dfs_fd *d;

    /* allocate a fd */
    fd = fd_new();
  1098c8:	eb000175 	bl	109ea4 <fd_new>
  1098cc:	e50b0010 	str	r0, [fp, #-16]
    if (fd < 0)
  1098d0:	e51b3010 	ldr	r3, [fp, #-16]
  1098d4:	e3530000 	cmp	r3, #0
  1098d8:	aa000001 	bge	1098e4 <socket_internal+0x34>
    {
        return -ENOMEM;
  1098dc:	e3e0300b 	mvn	r3, #11
  1098e0:	ea00004f 	b	109a24 <socket_internal+0x174>
    }
    d = fd_get(fd);
  1098e4:	e51b0010 	ldr	r0, [fp, #-16]
  1098e8:	eb0001a2 	bl	109f78 <fd_get>
  1098ec:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  1098f0:	e3a00028 	mov	r0, #40	; 0x28
  1098f4:	ebffe5a6 	bl	102f94 <rt_malloc>
  1098f8:	e1a02000 	mov	r2, r0
  1098fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109900:	e5832018 	str	r2, [r3, #24]
    if (!d->fnode)
  109904:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109908:	e5933018 	ldr	r3, [r3, #24]
  10990c:	e3530000 	cmp	r3, #0
  109910:	1a000003 	bne	109924 <socket_internal+0x74>
    {
        /* release fd */
        fd_release(fd);
  109914:	e51b0010 	ldr	r0, [fp, #-16]
  109918:	eb0001f5 	bl	10a0f4 <fd_release>
        return -ENOMEM;
  10991c:	e3e0300b 	mvn	r3, #11
  109920:	ea00003f 	b	109a24 <socket_internal+0x174>
    {
        domain = AF_INET;
    }
#endif /* SAL_USING_AF_UNIX */
    /* create socket  and then put it to the dfs_fd */
    socket = sal_socket(domain, type, protocol);
  109924:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  109928:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  10992c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  109930:	ebfffac3 	bl	108444 <sal_socket>
  109934:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (socket >= 0)
  109938:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10993c:	e3530000 	cmp	r3, #0
  109940:	ba000030 	blt	109a08 <socket_internal+0x158>
    {
        rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  109944:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109948:	e5933018 	ldr	r3, [r3, #24]
  10994c:	e3a02028 	mov	r2, #40	; 0x28
  109950:	e3a01000 	mov	r1, #0
  109954:	e1a00003 	mov	r0, r3
  109958:	ebffe65a 	bl	1032c8 <rt_memset>
        rt_list_init(&d->fnode->list);
  10995c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109960:	e5933018 	ldr	r3, [r3, #24]
  109964:	e2833010 	add	r3, r3, #16
  109968:	e1a00003 	mov	r0, r3
  10996c:	ebfffeb6 	bl	10944c <rt_list_init>
        /* this is a socket fd */
        d->fnode->type = FT_SOCKET;
  109970:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109974:	e5933018 	ldr	r3, [r3, #24]
  109978:	e3a02001 	mov	r2, #1
  10997c:	e1c320b0 	strh	r2, [r3]
        d->fnode->path = NULL;
  109980:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109984:	e5933018 	ldr	r3, [r3, #24]
  109988:	e3a02000 	mov	r2, #0
  10998c:	e5832004 	str	r2, [r3, #4]
        d->fnode->fullpath = NULL;
  109990:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109994:	e5933018 	ldr	r3, [r3, #24]
  109998:	e3a02000 	mov	r2, #0
  10999c:	e5832008 	str	r2, [r3, #8]
        d->fnode->ref_count = 1;
  1099a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099a4:	e5933018 	ldr	r3, [r3, #24]
  1099a8:	e3a02001 	mov	r2, #1
  1099ac:	e583200c 	str	r2, [r3, #12]
        d->fnode->fops = dfs_net_get_fops();
  1099b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099b4:	e5934018 	ldr	r4, [r3, #24]
  1099b8:	eb0002ae 	bl	10a478 <dfs_net_get_fops>
  1099bc:	e1a03000 	mov	r3, r0
  1099c0:	e5843018 	str	r3, [r4, #24]

        d->flags = O_RDWR; /* set flags as read and write */
  1099c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099c8:	e3a02002 	mov	r2, #2
  1099cc:	e5832004 	str	r2, [r3, #4]
        d->fnode->size = 0;
  1099d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099d4:	e5933018 	ldr	r3, [r3, #24]
  1099d8:	e3a02000 	mov	r2, #0
  1099dc:	e5832020 	str	r2, [r3, #32]
        d->pos = 0;
  1099e0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1099e4:	e3a02000 	mov	r2, #0
  1099e8:	e3a03000 	mov	r3, #0
  1099ec:	e1c121f0 	strd	r2, [r1, #16]

        /* set socket to the data of dfs_fd */
        d->fnode->data = (void *)(size_t)socket;
  1099f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099f4:	e5933018 	ldr	r3, [r3, #24]
  1099f8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1099fc:	e5832024 	str	r2, [r3, #36]	; 0x24
        /* release fd */
        fd_release(fd);
        return -ENOMEM;
    }

    return fd;
  109a00:	e51b3010 	ldr	r3, [fp, #-16]
  109a04:	ea000006 	b	109a24 <socket_internal+0x174>
        rt_free(d->fnode);
  109a08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a0c:	e5933018 	ldr	r3, [r3, #24]
  109a10:	e1a00003 	mov	r0, r3
  109a14:	ebffe568 	bl	102fbc <rt_free>
        fd_release(fd);
  109a18:	e51b0010 	ldr	r0, [fp, #-16]
  109a1c:	eb0001b4 	bl	10a0f4 <fd_release>
        return -ENOMEM;
  109a20:	e3e0300b 	mvn	r3, #11
  109a24:	e1a00003 	mov	r0, r3
  109a28:	e24bd008 	sub	sp, fp, #8
  109a2c:	e8bd8810 	pop	{r4, fp, pc}

00109a30 <dfs_init>:

/**
 * this function will initialize device file system.
 */
int dfs_init(void)
{
  109a30:	e92d4800 	push	{fp, lr}
  109a34:	e28db004 	add	fp, sp, #4
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  109a38:	e30d3618 	movw	r3, #54808	; 0xd618
  109a3c:	e3403014 	movt	r3, #20
  109a40:	e5933000 	ldr	r3, [r3]
  109a44:	e3530000 	cmp	r3, #0
  109a48:	0a000004 	beq	109a60 <dfs_init+0x30>
    {
        rt_kprintf("dfs already init.\n");
  109a4c:	e3060154 	movw	r0, #24916	; 0x6154
  109a50:	e3400014 	movt	r0, #20
  109a54:	ebffe5ae 	bl	103114 <rt_kprintf>
        return 0;
  109a58:	e3a03000 	mov	r3, #0
  109a5c:	ea000016 	b	109abc <dfs_init+0x8c>
    }

    /* init fnode hash table */
    dfs_fnode_mgr_init();
  109a60:	eb0001c6 	bl	10a180 <dfs_fnode_mgr_init>

    /* clean fd table */
    memset(&_fdtab, 0, sizeof(_fdtab));
  109a64:	e3a02008 	mov	r2, #8
  109a68:	e3a01000 	mov	r1, #0
  109a6c:	e30d0610 	movw	r0, #54800	; 0xd610
  109a70:	e3400014 	movt	r0, #20
  109a74:	eb00ddf0 	bl	14123c <memset>

    /* create device filesystem lock */
    rt_mutex_init(&fslock, "fslock", RT_IPC_FLAG_FIFO);
  109a78:	e3a02000 	mov	r2, #0
  109a7c:	e3061168 	movw	r1, #24936	; 0x6168
  109a80:	e3401014 	movt	r1, #20
  109a84:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109a88:	e3400014 	movt	r0, #20
  109a8c:	ebffdcad 	bl	100d48 <rt_mutex_init>
    rt_mutex_init(&fdlock, "fdlock", RT_IPC_FLAG_FIFO);
  109a90:	e3a02000 	mov	r2, #0
  109a94:	e3061170 	movw	r1, #24944	; 0x6170
  109a98:	e3401014 	movt	r1, #20
  109a9c:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109aa0:	e3400014 	movt	r0, #20
  109aa4:	ebffdca7 	bl	100d48 <rt_mutex_init>

    init_ok = RT_TRUE;
  109aa8:	e30d3618 	movw	r3, #54808	; 0xd618
  109aac:	e3403014 	movt	r3, #20
  109ab0:	e3a02001 	mov	r2, #1
  109ab4:	e5832000 	str	r2, [r3]

    return 0;
  109ab8:	e3a03000 	mov	r3, #0
}
  109abc:	e1a00003 	mov	r0, r3
  109ac0:	e8bd8800 	pop	{fp, pc}

00109ac4 <dfs_lock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_lock(void)
{
  109ac4:	e92d4800 	push	{fp, lr}
  109ac8:	e28db004 	add	fp, sp, #4
  109acc:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  109ad0:	e3e03006 	mvn	r3, #6
  109ad4:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  109ad8:	ea000004 	b	109af0 <dfs_lock+0x2c>
    {
        result = rt_mutex_take(&fslock, RT_WAITING_FOREVER);
  109adc:	e3e01000 	mvn	r1, #0
  109ae0:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109ae4:	e3400014 	movt	r0, #20
  109ae8:	ebffdd04 	bl	100f00 <rt_mutex_take>
  109aec:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  109af0:	e51b3008 	ldr	r3, [fp, #-8]
  109af4:	e3730007 	cmn	r3, #7
  109af8:	0afffff7 	beq	109adc <dfs_lock+0x18>
    }

    if (result != RT_EOK)
  109afc:	e51b3008 	ldr	r3, [fp, #-8]
  109b00:	e3530000 	cmp	r3, #0
  109b04:	0a000005 	beq	109b20 <dfs_lock+0x5c>
    {
        RT_ASSERT(0);
  109b08:	e3a0203d 	mov	r2, #61	; 0x3d
  109b0c:	e30611e4 	movw	r1, #25060	; 0x61e4
  109b10:	e3401014 	movt	r1, #20
  109b14:	e3060178 	movw	r0, #24952	; 0x6178
  109b18:	e3400014 	movt	r0, #20
  109b1c:	ebffe69d 	bl	103598 <rt_assert_handler>
    }
}
  109b20:	e320f000 	nop	{0}
  109b24:	e24bd004 	sub	sp, fp, #4
  109b28:	e8bd8800 	pop	{fp, pc}

00109b2c <dfs_fd_lock>:

void dfs_fd_lock(void)
{
  109b2c:	e92d4800 	push	{fp, lr}
  109b30:	e28db004 	add	fp, sp, #4
  109b34:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  109b38:	e3e03006 	mvn	r3, #6
  109b3c:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  109b40:	ea000004 	b	109b58 <dfs_fd_lock+0x2c>
    {
        result = rt_mutex_take(&fdlock, RT_WAITING_FOREVER);
  109b44:	e3e01000 	mvn	r1, #0
  109b48:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109b4c:	e3400014 	movt	r0, #20
  109b50:	ebffdcea 	bl	100f00 <rt_mutex_take>
  109b54:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  109b58:	e51b3008 	ldr	r3, [fp, #-8]
  109b5c:	e3730007 	cmn	r3, #7
  109b60:	0afffff7 	beq	109b44 <dfs_fd_lock+0x18>
    }

    if (result != RT_EOK)
  109b64:	e51b3008 	ldr	r3, [fp, #-8]
  109b68:	e3530000 	cmp	r3, #0
  109b6c:	0a000005 	beq	109b88 <dfs_fd_lock+0x5c>
    {
        RT_ASSERT(0);
  109b70:	e3a0204c 	mov	r2, #76	; 0x4c
  109b74:	e30611f0 	movw	r1, #25072	; 0x61f0
  109b78:	e3401014 	movt	r1, #20
  109b7c:	e3060178 	movw	r0, #24952	; 0x6178
  109b80:	e3400014 	movt	r0, #20
  109b84:	ebffe683 	bl	103598 <rt_assert_handler>
    }
}
  109b88:	e320f000 	nop	{0}
  109b8c:	e24bd004 	sub	sp, fp, #4
  109b90:	e8bd8800 	pop	{fp, pc}

00109b94 <dfs_unlock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_unlock(void)
{
  109b94:	e92d4800 	push	{fp, lr}
  109b98:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fslock);
  109b9c:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109ba0:	e3400014 	movt	r0, #20
  109ba4:	ebffdcf3 	bl	100f78 <rt_mutex_release>
}
  109ba8:	e320f000 	nop	{0}
  109bac:	e8bd8800 	pop	{fp, pc}

00109bb0 <dfs_fd_unlock>:

void dfs_fd_unlock(void)
{
  109bb0:	e92d4800 	push	{fp, lr}
  109bb4:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fdlock);
  109bb8:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109bbc:	e3400014 	movt	r0, #20
  109bc0:	ebffdcec 	bl	100f78 <rt_mutex_release>
}
  109bc4:	e320f000 	nop	{0}
  109bc8:	e8bd8800 	pop	{fp, pc}

00109bcc <fd_slot_expand>:

static int fd_slot_expand(struct dfs_fdtable *fdt, int fd)
{
  109bcc:	e92d4800 	push	{fp, lr}
  109bd0:	e28db004 	add	fp, sp, #4
  109bd4:	e24dd018 	sub	sp, sp, #24
  109bd8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  109bdc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int nr;
    int index;
    struct dfs_fd **fds = NULL;
  109be0:	e3a03000 	mov	r3, #0
  109be4:	e50b3010 	str	r3, [fp, #-16]

    if (fd < fdt->maxfd)
  109be8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109bec:	e5932000 	ldr	r2, [r3]
  109bf0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109bf4:	e1520003 	cmp	r2, r3
  109bf8:	9a000001 	bls	109c04 <fd_slot_expand+0x38>
    {
        return fd;
  109bfc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c00:	ea000032 	b	109cd0 <fd_slot_expand+0x104>
    }
    if (fd >= DFS_FD_MAX)
  109c04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c08:	e353001f 	cmp	r3, #31
  109c0c:	da000001 	ble	109c18 <fd_slot_expand+0x4c>
    {
        return -1;
  109c10:	e3e03000 	mvn	r3, #0
  109c14:	ea00002d 	b	109cd0 <fd_slot_expand+0x104>
    }

    nr = ((fd + 4) & ~3);
  109c18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c1c:	e2833004 	add	r3, r3, #4
  109c20:	e3c33003 	bic	r3, r3, #3
  109c24:	e50b3008 	str	r3, [fp, #-8]
    if (nr > DFS_FD_MAX)
  109c28:	e51b3008 	ldr	r3, [fp, #-8]
  109c2c:	e3530020 	cmp	r3, #32
  109c30:	da000001 	ble	109c3c <fd_slot_expand+0x70>
    {
        nr = DFS_FD_MAX;
  109c34:	e3a03020 	mov	r3, #32
  109c38:	e50b3008 	str	r3, [fp, #-8]
    }
    fds = (struct dfs_fd **)rt_realloc(fdt->fds, nr * sizeof(struct dfs_fd *));
  109c3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109c40:	e5932004 	ldr	r2, [r3, #4]
  109c44:	e51b3008 	ldr	r3, [fp, #-8]
  109c48:	e1a03103 	lsl	r3, r3, #2
  109c4c:	e1a01003 	mov	r1, r3
  109c50:	e1a00002 	mov	r0, r2
  109c54:	ebffe4e0 	bl	102fdc <rt_realloc>
  109c58:	e50b0010 	str	r0, [fp, #-16]
    if (!fds)
  109c5c:	e51b3010 	ldr	r3, [fp, #-16]
  109c60:	e3530000 	cmp	r3, #0
  109c64:	1a000001 	bne	109c70 <fd_slot_expand+0xa4>
    {
        return -1;
  109c68:	e3e03000 	mvn	r3, #0
  109c6c:	ea000017 	b	109cd0 <fd_slot_expand+0x104>
    }

    /* clean the new allocated fds */
    for (index = fdt->maxfd; index < nr; index++)
  109c70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109c74:	e5933000 	ldr	r3, [r3]
  109c78:	e50b300c 	str	r3, [fp, #-12]
  109c7c:	ea000008 	b	109ca4 <fd_slot_expand+0xd8>
    {
        fds[index] = NULL;
  109c80:	e51b300c 	ldr	r3, [fp, #-12]
  109c84:	e1a03103 	lsl	r3, r3, #2
  109c88:	e51b2010 	ldr	r2, [fp, #-16]
  109c8c:	e0823003 	add	r3, r2, r3
  109c90:	e3a02000 	mov	r2, #0
  109c94:	e5832000 	str	r2, [r3]
    for (index = fdt->maxfd; index < nr; index++)
  109c98:	e51b300c 	ldr	r3, [fp, #-12]
  109c9c:	e2833001 	add	r3, r3, #1
  109ca0:	e50b300c 	str	r3, [fp, #-12]
  109ca4:	e51b200c 	ldr	r2, [fp, #-12]
  109ca8:	e51b3008 	ldr	r3, [fp, #-8]
  109cac:	e1520003 	cmp	r2, r3
  109cb0:	bafffff2 	blt	109c80 <fd_slot_expand+0xb4>
    }
    fdt->fds   = fds;
  109cb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109cb8:	e51b2010 	ldr	r2, [fp, #-16]
  109cbc:	e5832004 	str	r2, [r3, #4]
    fdt->maxfd = nr;
  109cc0:	e51b2008 	ldr	r2, [fp, #-8]
  109cc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109cc8:	e5832000 	str	r2, [r3]

    return fd;
  109ccc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  109cd0:	e1a00003 	mov	r0, r3
  109cd4:	e24bd004 	sub	sp, fp, #4
  109cd8:	e8bd8800 	pop	{fp, pc}

00109cdc <fd_slot_alloc>:

static int fd_slot_alloc(struct dfs_fdtable *fdt, int startfd)
{
  109cdc:	e92d4800 	push	{fp, lr}
  109ce0:	e28db004 	add	fp, sp, #4
  109ce4:	e24dd010 	sub	sp, sp, #16
  109ce8:	e50b0010 	str	r0, [fp, #-16]
  109cec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;

    /* find an empty fd slot */
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  109cf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109cf4:	e50b3008 	str	r3, [fp, #-8]
  109cf8:	ea00000c 	b	109d30 <fd_slot_alloc+0x54>
    {
        if (fdt->fds[idx] == RT_NULL)
  109cfc:	e51b3010 	ldr	r3, [fp, #-16]
  109d00:	e5932004 	ldr	r2, [r3, #4]
  109d04:	e51b3008 	ldr	r3, [fp, #-8]
  109d08:	e1a03103 	lsl	r3, r3, #2
  109d0c:	e0823003 	add	r3, r2, r3
  109d10:	e5933000 	ldr	r3, [r3]
  109d14:	e3530000 	cmp	r3, #0
  109d18:	1a000001 	bne	109d24 <fd_slot_alloc+0x48>
        {
            return idx;
  109d1c:	e51b3008 	ldr	r3, [fp, #-8]
  109d20:	ea00001a 	b	109d90 <fd_slot_alloc+0xb4>
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  109d24:	e51b3008 	ldr	r3, [fp, #-8]
  109d28:	e2833001 	add	r3, r3, #1
  109d2c:	e50b3008 	str	r3, [fp, #-8]
  109d30:	e51b3010 	ldr	r3, [fp, #-16]
  109d34:	e5933000 	ldr	r3, [r3]
  109d38:	e1a02003 	mov	r2, r3
  109d3c:	e51b3008 	ldr	r3, [fp, #-8]
  109d40:	e1530002 	cmp	r3, r2
  109d44:	baffffec 	blt	109cfc <fd_slot_alloc+0x20>
        }
    }

    idx = fdt->maxfd;
  109d48:	e51b3010 	ldr	r3, [fp, #-16]
  109d4c:	e5933000 	ldr	r3, [r3]
  109d50:	e50b3008 	str	r3, [fp, #-8]
    if (idx < startfd)
  109d54:	e51b2008 	ldr	r2, [fp, #-8]
  109d58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109d5c:	e1520003 	cmp	r2, r3
  109d60:	aa000001 	bge	109d6c <fd_slot_alloc+0x90>
    {
        idx = startfd;
  109d64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109d68:	e50b3008 	str	r3, [fp, #-8]
    }
    if (fd_slot_expand(fdt, idx) < 0)
  109d6c:	e51b1008 	ldr	r1, [fp, #-8]
  109d70:	e51b0010 	ldr	r0, [fp, #-16]
  109d74:	ebffff94 	bl	109bcc <fd_slot_expand>
  109d78:	e1a03000 	mov	r3, r0
  109d7c:	e3530000 	cmp	r3, #0
  109d80:	aa000001 	bge	109d8c <fd_slot_alloc+0xb0>
    {
        return -1;
  109d84:	e3e03000 	mvn	r3, #0
  109d88:	ea000000 	b	109d90 <fd_slot_alloc+0xb4>
    }
    return idx;
  109d8c:	e51b3008 	ldr	r3, [fp, #-8]
}
  109d90:	e1a00003 	mov	r0, r3
  109d94:	e24bd004 	sub	sp, fp, #4
  109d98:	e8bd8800 	pop	{fp, pc}

00109d9c <fd_alloc>:

static int fd_alloc(struct dfs_fdtable *fdt, int startfd)
{
  109d9c:	e92d4800 	push	{fp, lr}
  109da0:	e28db004 	add	fp, sp, #4
  109da4:	e24dd010 	sub	sp, sp, #16
  109da8:	e50b0010 	str	r0, [fp, #-16]
  109dac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;
    struct dfs_fd *fd = NULL;
  109db0:	e3a03000 	mov	r3, #0
  109db4:	e50b3008 	str	r3, [fp, #-8]

    idx = fd_slot_alloc(fdt, startfd);
  109db8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109dbc:	e51b0010 	ldr	r0, [fp, #-16]
  109dc0:	ebffffc5 	bl	109cdc <fd_slot_alloc>
  109dc4:	e50b000c 	str	r0, [fp, #-12]

    /* allocate  'struct dfs_fd' */
    if (idx < 0)
  109dc8:	e51b300c 	ldr	r3, [fp, #-12]
  109dcc:	e3530000 	cmp	r3, #0
  109dd0:	aa000001 	bge	109ddc <fd_alloc+0x40>
    {
        return -1;
  109dd4:	e3e03000 	mvn	r3, #0
  109dd8:	ea00001a 	b	109e48 <fd_alloc+0xac>
    }
    fd = (struct dfs_fd *)rt_calloc(1, sizeof(struct dfs_fd));
  109ddc:	e3a01020 	mov	r1, #32
  109de0:	e3a00001 	mov	r0, #1
  109de4:	ebffe488 	bl	10300c <rt_calloc>
  109de8:	e50b0008 	str	r0, [fp, #-8]
    if (!fd)
  109dec:	e51b3008 	ldr	r3, [fp, #-8]
  109df0:	e3530000 	cmp	r3, #0
  109df4:	1a000001 	bne	109e00 <fd_alloc+0x64>
    {
        return -1;
  109df8:	e3e03000 	mvn	r3, #0
  109dfc:	ea000011 	b	109e48 <fd_alloc+0xac>
    }
    fd->ref_count = 1;
  109e00:	e51b3008 	ldr	r3, [fp, #-8]
  109e04:	e3a02001 	mov	r2, #1
  109e08:	e5832008 	str	r2, [r3, #8]
    fd->magic = DFS_FD_MAGIC;
  109e0c:	e51b2008 	ldr	r2, [fp, #-8]
  109e10:	e30f3dfd 	movw	r3, #65021	; 0xfdfd
  109e14:	e34f3fff 	movt	r3, #65535	; 0xffff
  109e18:	e1c230b0 	strh	r3, [r2]
    fd->fnode = NULL;
  109e1c:	e51b3008 	ldr	r3, [fp, #-8]
  109e20:	e3a02000 	mov	r2, #0
  109e24:	e5832018 	str	r2, [r3, #24]
    fdt->fds[idx] = fd;
  109e28:	e51b3010 	ldr	r3, [fp, #-16]
  109e2c:	e5932004 	ldr	r2, [r3, #4]
  109e30:	e51b300c 	ldr	r3, [fp, #-12]
  109e34:	e1a03103 	lsl	r3, r3, #2
  109e38:	e0823003 	add	r3, r2, r3
  109e3c:	e51b2008 	ldr	r2, [fp, #-8]
  109e40:	e5832000 	str	r2, [r3]

    return idx;
  109e44:	e51b300c 	ldr	r3, [fp, #-12]
}
  109e48:	e1a00003 	mov	r0, r3
  109e4c:	e24bd004 	sub	sp, fp, #4
  109e50:	e8bd8800 	pop	{fp, pc}

00109e54 <fdt_fd_new>:
 * This function will allocate a file descriptor.
 *
 * @return -1 on failed or the allocated file descriptor.
 */
int fdt_fd_new(struct dfs_fdtable *fdt)
{
  109e54:	e92d4800 	push	{fp, lr}
  109e58:	e28db004 	add	fp, sp, #4
  109e5c:	e24dd010 	sub	sp, sp, #16
  109e60:	e50b0010 	str	r0, [fp, #-16]
    int idx;

    /* lock filesystem */
    dfs_fd_lock();
  109e64:	ebffff30 	bl	109b2c <dfs_fd_lock>

    /* find an empty fd entry */
    idx = fd_alloc(fdt, DFS_STDIO_OFFSET);
  109e68:	e3a01003 	mov	r1, #3
  109e6c:	e51b0010 	ldr	r0, [fp, #-16]
  109e70:	ebffffc9 	bl	109d9c <fd_alloc>
  109e74:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty fd entry */
    if (idx < 0)
  109e78:	e51b3008 	ldr	r3, [fp, #-8]
  109e7c:	e3530000 	cmp	r3, #0
  109e80:	aa000002 	bge	109e90 <fdt_fd_new+0x3c>
    {
        rt_kprintf("DFS fd new is failed! Could not found an empty fd entry.");
  109e84:	e306017c 	movw	r0, #24956	; 0x617c
  109e88:	e3400014 	movt	r0, #20
  109e8c:	ebffe4a0 	bl	103114 <rt_kprintf>
    }

    dfs_fd_unlock();
  109e90:	ebffff46 	bl	109bb0 <dfs_fd_unlock>
    return idx;
  109e94:	e51b3008 	ldr	r3, [fp, #-8]
}
  109e98:	e1a00003 	mov	r0, r3
  109e9c:	e24bd004 	sub	sp, fp, #4
  109ea0:	e8bd8800 	pop	{fp, pc}

00109ea4 <fd_new>:

int fd_new(void)
{
  109ea4:	e92d4800 	push	{fp, lr}
  109ea8:	e28db004 	add	fp, sp, #4
  109eac:	e24dd008 	sub	sp, sp, #8
    struct dfs_fdtable *fdt = NULL;
  109eb0:	e3a03000 	mov	r3, #0
  109eb4:	e50b3008 	str	r3, [fp, #-8]

    fdt = dfs_fdtable_get();
  109eb8:	eb000099 	bl	10a124 <dfs_fdtable_get>
  109ebc:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_new(fdt);
  109ec0:	e51b0008 	ldr	r0, [fp, #-8]
  109ec4:	ebffffe2 	bl	109e54 <fdt_fd_new>
  109ec8:	e1a03000 	mov	r3, r0
}
  109ecc:	e1a00003 	mov	r0, r3
  109ed0:	e24bd004 	sub	sp, fp, #4
  109ed4:	e8bd8800 	pop	{fp, pc}

00109ed8 <fdt_fd_get>:
 * @return NULL on on this file descriptor or the file descriptor structure
 * pointer.
 */

struct dfs_fd *fdt_fd_get(struct dfs_fdtable* fdt, int fd)
{
  109ed8:	e92d4800 	push	{fp, lr}
  109edc:	e28db004 	add	fp, sp, #4
  109ee0:	e24dd010 	sub	sp, sp, #16
  109ee4:	e50b0010 	str	r0, [fp, #-16]
  109ee8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *d;

    if (fd < 0 || fd >= (int)fdt->maxfd)
  109eec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109ef0:	e3530000 	cmp	r3, #0
  109ef4:	ba000005 	blt	109f10 <fdt_fd_get+0x38>
  109ef8:	e51b3010 	ldr	r3, [fp, #-16]
  109efc:	e5933000 	ldr	r3, [r3]
  109f00:	e1a02003 	mov	r2, r3
  109f04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109f08:	e1530002 	cmp	r3, r2
  109f0c:	ba000001 	blt	109f18 <fdt_fd_get+0x40>
    {
        return NULL;
  109f10:	e3a03000 	mov	r3, #0
  109f14:	ea000014 	b	109f6c <fdt_fd_get+0x94>
    }

    dfs_fd_lock();
  109f18:	ebffff03 	bl	109b2c <dfs_fd_lock>
    d = fdt->fds[fd];
  109f1c:	e51b3010 	ldr	r3, [fp, #-16]
  109f20:	e5932004 	ldr	r2, [r3, #4]
  109f24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109f28:	e1a03103 	lsl	r3, r3, #2
  109f2c:	e0823003 	add	r3, r2, r3
  109f30:	e5933000 	ldr	r3, [r3]
  109f34:	e50b3008 	str	r3, [fp, #-8]

    /* check dfs_fd valid or not */
    if ((d == NULL) || (d->magic != DFS_FD_MAGIC))
  109f38:	e51b3008 	ldr	r3, [fp, #-8]
  109f3c:	e3530000 	cmp	r3, #0
  109f40:	0a000004 	beq	109f58 <fdt_fd_get+0x80>
  109f44:	e51b3008 	ldr	r3, [fp, #-8]
  109f48:	e1d330b0 	ldrh	r3, [r3]
  109f4c:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  109f50:	e1530002 	cmp	r3, r2
  109f54:	0a000002 	beq	109f64 <fdt_fd_get+0x8c>
    {
        dfs_fd_unlock();
  109f58:	ebffff14 	bl	109bb0 <dfs_fd_unlock>
        return NULL;
  109f5c:	e3a03000 	mov	r3, #0
  109f60:	ea000001 	b	109f6c <fdt_fd_get+0x94>
    }

    dfs_fd_unlock();
  109f64:	ebffff11 	bl	109bb0 <dfs_fd_unlock>

    return d;
  109f68:	e51b3008 	ldr	r3, [fp, #-8]
}
  109f6c:	e1a00003 	mov	r0, r3
  109f70:	e24bd004 	sub	sp, fp, #4
  109f74:	e8bd8800 	pop	{fp, pc}

00109f78 <fd_get>:

struct dfs_fd *fd_get(int fd)
{
  109f78:	e92d4800 	push	{fp, lr}
  109f7c:	e28db004 	add	fp, sp, #4
  109f80:	e24dd010 	sub	sp, sp, #16
  109f84:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  109f88:	eb000065 	bl	10a124 <dfs_fdtable_get>
  109f8c:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_get(fdt, fd);
  109f90:	e51b1010 	ldr	r1, [fp, #-16]
  109f94:	e51b0008 	ldr	r0, [fp, #-8]
  109f98:	ebffffce 	bl	109ed8 <fdt_fd_get>
  109f9c:	e1a03000 	mov	r3, r0
}
  109fa0:	e1a00003 	mov	r0, r3
  109fa4:	e24bd004 	sub	sp, fp, #4
  109fa8:	e8bd8800 	pop	{fp, pc}

00109fac <fdt_fd_release>:
 * @ingroup Fd
 *
 * This function will put the file descriptor.
 */
void fdt_fd_release(struct dfs_fdtable* fdt, int fd)
{
  109fac:	e92d4800 	push	{fp, lr}
  109fb0:	e28db004 	add	fp, sp, #4
  109fb4:	e24dd010 	sub	sp, sp, #16
  109fb8:	e50b0010 	str	r0, [fp, #-16]
  109fbc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *fd_slot = NULL;
  109fc0:	e3a03000 	mov	r3, #0
  109fc4:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(fdt != NULL);
  109fc8:	e51b3010 	ldr	r3, [fp, #-16]
  109fcc:	e3530000 	cmp	r3, #0
  109fd0:	1a000005 	bne	109fec <fdt_fd_release+0x40>
  109fd4:	e300210b 	movw	r2, #267	; 0x10b
  109fd8:	e30611fc 	movw	r1, #25084	; 0x61fc
  109fdc:	e3401014 	movt	r1, #20
  109fe0:	e30601b8 	movw	r0, #25016	; 0x61b8
  109fe4:	e3400014 	movt	r0, #20
  109fe8:	ebffe56a 	bl	103598 <rt_assert_handler>

    dfs_fd_lock();
  109fec:	ebfffece 	bl	109b2c <dfs_fd_lock>

    if ((fd < 0) || (fd >= fdt->maxfd))
  109ff0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109ff4:	e3530000 	cmp	r3, #0
  109ff8:	ba000004 	blt	10a010 <fdt_fd_release+0x64>
  109ffc:	e51b3010 	ldr	r3, [fp, #-16]
  10a000:	e5932000 	ldr	r2, [r3]
  10a004:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a008:	e1520003 	cmp	r2, r3
  10a00c:	8a000001 	bhi	10a018 <fdt_fd_release+0x6c>
    {
        dfs_fd_unlock();
  10a010:	ebfffee6 	bl	109bb0 <dfs_fd_unlock>
        return;
  10a014:	ea000034 	b	10a0ec <fdt_fd_release+0x140>
    }

    fd_slot = fdt->fds[fd];
  10a018:	e51b3010 	ldr	r3, [fp, #-16]
  10a01c:	e5932004 	ldr	r2, [r3, #4]
  10a020:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a024:	e1a03103 	lsl	r3, r3, #2
  10a028:	e0823003 	add	r3, r2, r3
  10a02c:	e5933000 	ldr	r3, [r3]
  10a030:	e50b3008 	str	r3, [fp, #-8]
    if (fd_slot == NULL)
  10a034:	e51b3008 	ldr	r3, [fp, #-8]
  10a038:	e3530000 	cmp	r3, #0
  10a03c:	1a000001 	bne	10a048 <fdt_fd_release+0x9c>
    {
        dfs_fd_unlock();
  10a040:	ebfffeda 	bl	109bb0 <dfs_fd_unlock>
        return;
  10a044:	ea000028 	b	10a0ec <fdt_fd_release+0x140>
    }
    fdt->fds[fd] = NULL;
  10a048:	e51b3010 	ldr	r3, [fp, #-16]
  10a04c:	e5932004 	ldr	r2, [r3, #4]
  10a050:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a054:	e1a03103 	lsl	r3, r3, #2
  10a058:	e0823003 	add	r3, r2, r3
  10a05c:	e3a02000 	mov	r2, #0
  10a060:	e5832000 	str	r2, [r3]

    /* check fd */
    RT_ASSERT(fd_slot->magic == DFS_FD_MAGIC);
  10a064:	e51b3008 	ldr	r3, [fp, #-8]
  10a068:	e1d330b0 	ldrh	r3, [r3]
  10a06c:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  10a070:	e1530002 	cmp	r3, r2
  10a074:	0a000005 	beq	10a090 <fdt_fd_release+0xe4>
  10a078:	e300211e 	movw	r2, #286	; 0x11e
  10a07c:	e30611fc 	movw	r1, #25084	; 0x61fc
  10a080:	e3401014 	movt	r1, #20
  10a084:	e30601c4 	movw	r0, #25028	; 0x61c4
  10a088:	e3400014 	movt	r0, #20
  10a08c:	ebffe541 	bl	103598 <rt_assert_handler>

    fd_slot->ref_count--;
  10a090:	e51b3008 	ldr	r3, [fp, #-8]
  10a094:	e5933008 	ldr	r3, [r3, #8]
  10a098:	e2432001 	sub	r2, r3, #1
  10a09c:	e51b3008 	ldr	r3, [fp, #-8]
  10a0a0:	e5832008 	str	r2, [r3, #8]

    /* clear this fd entry */
    if (fd_slot->ref_count == 0)
  10a0a4:	e51b3008 	ldr	r3, [fp, #-8]
  10a0a8:	e5933008 	ldr	r3, [r3, #8]
  10a0ac:	e3530000 	cmp	r3, #0
  10a0b0:	1a00000c 	bne	10a0e8 <fdt_fd_release+0x13c>
    {
        struct dfs_fnode *fnode = fd_slot->fnode;
  10a0b4:	e51b3008 	ldr	r3, [fp, #-8]
  10a0b8:	e5933018 	ldr	r3, [r3, #24]
  10a0bc:	e50b300c 	str	r3, [fp, #-12]
        if (fnode)
  10a0c0:	e51b300c 	ldr	r3, [fp, #-12]
  10a0c4:	e3530000 	cmp	r3, #0
  10a0c8:	0a000004 	beq	10a0e0 <fdt_fd_release+0x134>
        {
            fnode->ref_count--;
  10a0cc:	e51b300c 	ldr	r3, [fp, #-12]
  10a0d0:	e593300c 	ldr	r3, [r3, #12]
  10a0d4:	e2432001 	sub	r2, r3, #1
  10a0d8:	e51b300c 	ldr	r3, [fp, #-12]
  10a0dc:	e583200c 	str	r2, [r3, #12]
        }
        rt_free(fd_slot);
  10a0e0:	e51b0008 	ldr	r0, [fp, #-8]
  10a0e4:	ebffe3b4 	bl	102fbc <rt_free>
    }
    dfs_fd_unlock();
  10a0e8:	ebfffeb0 	bl	109bb0 <dfs_fd_unlock>
}
  10a0ec:	e24bd004 	sub	sp, fp, #4
  10a0f0:	e8bd8800 	pop	{fp, pc}

0010a0f4 <fd_release>:

void fd_release(int fd)
{
  10a0f4:	e92d4800 	push	{fp, lr}
  10a0f8:	e28db004 	add	fp, sp, #4
  10a0fc:	e24dd010 	sub	sp, sp, #16
  10a100:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  10a104:	eb000006 	bl	10a124 <dfs_fdtable_get>
  10a108:	e50b0008 	str	r0, [fp, #-8]
    fdt_fd_release(fdt, fd);
  10a10c:	e51b1010 	ldr	r1, [fp, #-16]
  10a110:	e51b0008 	ldr	r0, [fp, #-8]
  10a114:	ebffffa4 	bl	109fac <fdt_fd_release>
}
  10a118:	e320f000 	nop	{0}
  10a11c:	e24bd004 	sub	sp, fp, #4
  10a120:	e8bd8800 	pop	{fp, pc}

0010a124 <dfs_fdtable_get>:

/**
 * This function will get the file descriptor table of current process.
 */
struct dfs_fdtable *dfs_fdtable_get(void)
{
  10a124:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a128:	e28db000 	add	fp, sp, #0
    return &_fdtab;
  10a12c:	e30d3610 	movw	r3, #54800	; 0xd610
  10a130:	e3403014 	movt	r3, #20
}
  10a134:	e1a00003 	mov	r0, r3
  10a138:	e28bd000 	add	sp, fp, #0
  10a13c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a140:	e12fff1e 	bx	lr

0010a144 <rt_list_init>:
{
  10a144:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a148:	e28db000 	add	fp, sp, #0
  10a14c:	e24dd00c 	sub	sp, sp, #12
  10a150:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  10a154:	e51b3008 	ldr	r3, [fp, #-8]
  10a158:	e51b2008 	ldr	r2, [fp, #-8]
  10a15c:	e5832004 	str	r2, [r3, #4]
  10a160:	e51b3008 	ldr	r3, [fp, #-8]
  10a164:	e5932004 	ldr	r2, [r3, #4]
  10a168:	e51b3008 	ldr	r3, [fp, #-8]
  10a16c:	e5832000 	str	r2, [r3]
}
  10a170:	e320f000 	nop	{0}
  10a174:	e28bd000 	add	sp, fp, #0
  10a178:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a17c:	e12fff1e 	bx	lr

0010a180 <dfs_fnode_mgr_init>:
};

static struct dfs_fnode_mgr dfs_fm;

void dfs_fnode_mgr_init(void)
{
  10a180:	e92d4800 	push	{fp, lr}
  10a184:	e28db004 	add	fp, sp, #4
  10a188:	e24dd008 	sub	sp, sp, #8
    int i = 0;
  10a18c:	e3a03000 	mov	r3, #0
  10a190:	e50b3008 	str	r3, [fp, #-8]

    rt_mutex_init(&dfs_fm.lock, "dfs_mgr", RT_IPC_FLAG_PRIO);
  10a194:	e3a02001 	mov	r2, #1
  10a198:	e306120c 	movw	r1, #25100	; 0x620c
  10a19c:	e3401014 	movt	r1, #20
  10a1a0:	e30d061c 	movw	r0, #54812	; 0xd61c
  10a1a4:	e3400014 	movt	r0, #20
  10a1a8:	ebffdae6 	bl	100d48 <rt_mutex_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  10a1ac:	e3a03000 	mov	r3, #0
  10a1b0:	e50b3008 	str	r3, [fp, #-8]
  10a1b4:	ea00000a 	b	10a1e4 <dfs_fnode_mgr_init+0x64>
    {
        rt_list_init(&dfs_fm.head[i]);
  10a1b8:	e51b3008 	ldr	r3, [fp, #-8]
  10a1bc:	e2833005 	add	r3, r3, #5
  10a1c0:	e1a02183 	lsl	r2, r3, #3
  10a1c4:	e30d361c 	movw	r3, #54812	; 0xd61c
  10a1c8:	e3403014 	movt	r3, #20
  10a1cc:	e0823003 	add	r3, r2, r3
  10a1d0:	e1a00003 	mov	r0, r3
  10a1d4:	ebffffda 	bl	10a144 <rt_list_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  10a1d8:	e51b3008 	ldr	r3, [fp, #-8]
  10a1dc:	e2833001 	add	r3, r3, #1
  10a1e0:	e50b3008 	str	r3, [fp, #-8]
  10a1e4:	e51b3008 	ldr	r3, [fp, #-8]
  10a1e8:	e353007f 	cmp	r3, #127	; 0x7f
  10a1ec:	dafffff1 	ble	10a1b8 <dfs_fnode_mgr_init+0x38>
    }
  10a1f0:	e320f000 	nop	{0}
  10a1f4:	e24bd004 	sub	sp, fp, #4
  10a1f8:	e8bd8800 	pop	{fp, pc}

0010a1fc <dfs_net_getsocket>:
#include "dfs.h"
#include "dfs_net.h"
#include "../netdev/sal_socket.h"

int dfs_net_getsocket(int fd)
{
  10a1fc:	e92d4800 	push	{fp, lr}
  10a200:	e28db004 	add	fp, sp, #4
  10a204:	e24dd010 	sub	sp, sp, #16
  10a208:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    struct dfs_fd *_dfs_fd;

    _dfs_fd = fd_get(fd);
  10a20c:	e51b0010 	ldr	r0, [fp, #-16]
  10a210:	ebffff58 	bl	109f78 <fd_get>
  10a214:	e50b000c 	str	r0, [fp, #-12]
    if (_dfs_fd == NULL) return -1;
  10a218:	e51b300c 	ldr	r3, [fp, #-12]
  10a21c:	e3530000 	cmp	r3, #0
  10a220:	1a000001 	bne	10a22c <dfs_net_getsocket+0x30>
  10a224:	e3e03000 	mvn	r3, #0
  10a228:	ea00000c 	b	10a260 <dfs_net_getsocket+0x64>

    if (_dfs_fd->fnode->type != FT_SOCKET) socket = -1;
  10a22c:	e51b300c 	ldr	r3, [fp, #-12]
  10a230:	e5933018 	ldr	r3, [r3, #24]
  10a234:	e1d330b0 	ldrh	r3, [r3]
  10a238:	e3530001 	cmp	r3, #1
  10a23c:	0a000002 	beq	10a24c <dfs_net_getsocket+0x50>
  10a240:	e3e03000 	mvn	r3, #0
  10a244:	e50b3008 	str	r3, [fp, #-8]
  10a248:	ea000003 	b	10a25c <dfs_net_getsocket+0x60>
    else socket = (int)(size_t)_dfs_fd->fnode->data;
  10a24c:	e51b300c 	ldr	r3, [fp, #-12]
  10a250:	e5933018 	ldr	r3, [r3, #24]
  10a254:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a258:	e50b3008 	str	r3, [fp, #-8]

    return socket;
  10a25c:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a260:	e1a00003 	mov	r0, r3
  10a264:	e24bd004 	sub	sp, fp, #4
  10a268:	e8bd8800 	pop	{fp, pc}

0010a26c <dfs_net_ioctl>:

static int dfs_net_ioctl(struct dfs_fd* file, int cmd, void* args)
{
  10a26c:	e92d4800 	push	{fp, lr}
  10a270:	e28db004 	add	fp, sp, #4
  10a274:	e24dd018 	sub	sp, sp, #24
  10a278:	e50b0010 	str	r0, [fp, #-16]
  10a27c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a280:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a284:	e51b3010 	ldr	r3, [fp, #-16]
  10a288:	e5933018 	ldr	r3, [r3, #24]
  10a28c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a290:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_ioctlsocket(socket, cmd, args);
  10a294:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a298:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a29c:	e51b0008 	ldr	r0, [fp, #-8]
  10a2a0:	ebfff8e6 	bl	108640 <sal_ioctlsocket>
  10a2a4:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a2a8:	e51b300c 	ldr	r3, [fp, #-12]
  10a2ac:	e3530000 	cmp	r3, #0
  10a2b0:	aa000006 	bge	10a2d0 <dfs_net_ioctl+0x64>
    {
        ret = rt_get_errno();
  10a2b4:	ebffdf68 	bl	10205c <rt_get_errno>
  10a2b8:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a2bc:	e51b300c 	ldr	r3, [fp, #-12]
  10a2c0:	e3530000 	cmp	r3, #0
  10a2c4:	b2633000 	rsblt	r3, r3, #0
  10a2c8:	e2633000 	rsb	r3, r3, #0
  10a2cc:	ea000000 	b	10a2d4 <dfs_net_ioctl+0x68>
    }
    return ret;
  10a2d0:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a2d4:	e1a00003 	mov	r0, r3
  10a2d8:	e24bd004 	sub	sp, fp, #4
  10a2dc:	e8bd8800 	pop	{fp, pc}

0010a2e0 <dfs_net_read>:

static int dfs_net_read(struct dfs_fd* file, void *buf, size_t count)
{
  10a2e0:	e92d4800 	push	{fp, lr}
  10a2e4:	e28db004 	add	fp, sp, #4
  10a2e8:	e24dd020 	sub	sp, sp, #32
  10a2ec:	e50b0010 	str	r0, [fp, #-16]
  10a2f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a2f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a2f8:	e51b3010 	ldr	r3, [fp, #-16]
  10a2fc:	e5933018 	ldr	r3, [r3, #24]
  10a300:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a304:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_recvfrom(socket, buf, count, 0, NULL, NULL);
  10a308:	e3a03000 	mov	r3, #0
  10a30c:	e58d3004 	str	r3, [sp, #4]
  10a310:	e3a03000 	mov	r3, #0
  10a314:	e58d3000 	str	r3, [sp]
  10a318:	e3a03000 	mov	r3, #0
  10a31c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a320:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a324:	e51b0008 	ldr	r0, [fp, #-8]
  10a328:	ebfff7dd 	bl	1082a4 <sal_recvfrom>
  10a32c:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a330:	e51b300c 	ldr	r3, [fp, #-12]
  10a334:	e3530000 	cmp	r3, #0
  10a338:	aa000006 	bge	10a358 <dfs_net_read+0x78>
    {
        ret = rt_get_errno();
  10a33c:	ebffdf46 	bl	10205c <rt_get_errno>
  10a340:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a344:	e51b300c 	ldr	r3, [fp, #-12]
  10a348:	e3530000 	cmp	r3, #0
  10a34c:	b2633000 	rsblt	r3, r3, #0
  10a350:	e2633000 	rsb	r3, r3, #0
  10a354:	ea000000 	b	10a35c <dfs_net_read+0x7c>
    }
    return ret;
  10a358:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a35c:	e1a00003 	mov	r0, r3
  10a360:	e24bd004 	sub	sp, fp, #4
  10a364:	e8bd8800 	pop	{fp, pc}

0010a368 <dfs_net_write>:

static int dfs_net_write(struct dfs_fd *file, const void *buf, size_t count)
{
  10a368:	e92d4800 	push	{fp, lr}
  10a36c:	e28db004 	add	fp, sp, #4
  10a370:	e24dd020 	sub	sp, sp, #32
  10a374:	e50b0010 	str	r0, [fp, #-16]
  10a378:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a37c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a380:	e51b3010 	ldr	r3, [fp, #-16]
  10a384:	e5933018 	ldr	r3, [r3, #24]
  10a388:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a38c:	e50b3008 	str	r3, [fp, #-8]
    
    ret = sal_sendto(socket, buf, count, 0, NULL, 0);
  10a390:	e3a03000 	mov	r3, #0
  10a394:	e58d3004 	str	r3, [sp, #4]
  10a398:	e3a03000 	mov	r3, #0
  10a39c:	e58d3000 	str	r3, [sp]
  10a3a0:	e3a03000 	mov	r3, #0
  10a3a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a3a8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a3ac:	e51b0008 	ldr	r0, [fp, #-8]
  10a3b0:	ebfff7ef 	bl	108374 <sal_sendto>
  10a3b4:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a3b8:	e51b300c 	ldr	r3, [fp, #-12]
  10a3bc:	e3530000 	cmp	r3, #0
  10a3c0:	aa000006 	bge	10a3e0 <dfs_net_write+0x78>
    {
        ret = rt_get_errno();
  10a3c4:	ebffdf24 	bl	10205c <rt_get_errno>
  10a3c8:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a3cc:	e51b300c 	ldr	r3, [fp, #-12]
  10a3d0:	e3530000 	cmp	r3, #0
  10a3d4:	b2633000 	rsblt	r3, r3, #0
  10a3d8:	e2633000 	rsb	r3, r3, #0
  10a3dc:	ea000000 	b	10a3e4 <dfs_net_write+0x7c>
    }
    return ret;
  10a3e0:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a3e4:	e1a00003 	mov	r0, r3
  10a3e8:	e24bd004 	sub	sp, fp, #4
  10a3ec:	e8bd8800 	pop	{fp, pc}

0010a3f0 <dfs_net_close>:
static int dfs_net_close(struct dfs_fd* file)
{
  10a3f0:	e92d4800 	push	{fp, lr}
  10a3f4:	e28db004 	add	fp, sp, #4
  10a3f8:	e24dd010 	sub	sp, sp, #16
  10a3fc:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    int ret = 0;
  10a400:	e3a03000 	mov	r3, #0
  10a404:	e50b3008 	str	r3, [fp, #-8]

    if (file->fnode->ref_count == 1)
  10a408:	e51b3010 	ldr	r3, [fp, #-16]
  10a40c:	e5933018 	ldr	r3, [r3, #24]
  10a410:	e593300c 	ldr	r3, [r3, #12]
  10a414:	e3530001 	cmp	r3, #1
  10a418:	1a000006 	bne	10a438 <dfs_net_close+0x48>
    {
        socket = (int)(size_t)file->fnode->data;
  10a41c:	e51b3010 	ldr	r3, [fp, #-16]
  10a420:	e5933018 	ldr	r3, [r3, #24]
  10a424:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a428:	e50b300c 	str	r3, [fp, #-12]
        ret = sal_closesocket(socket);
  10a42c:	e51b000c 	ldr	r0, [fp, #-12]
  10a430:	ebfff854 	bl	108588 <sal_closesocket>
  10a434:	e50b0008 	str	r0, [fp, #-8]
    }
    return ret;
  10a438:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a43c:	e1a00003 	mov	r0, r3
  10a440:	e24bd004 	sub	sp, fp, #4
  10a444:	e8bd8800 	pop	{fp, pc}

0010a448 <dfs_net_poll>:

static int dfs_net_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  10a448:	e92d4800 	push	{fp, lr}
  10a44c:	e28db004 	add	fp, sp, #4
  10a450:	e24dd008 	sub	sp, sp, #8
  10a454:	e50b0008 	str	r0, [fp, #-8]
  10a458:	e50b100c 	str	r1, [fp, #-12]
    extern int sal_poll(struct dfs_fd *file, struct rt_pollreq *req);

    return sal_poll(file, req);
  10a45c:	e51b100c 	ldr	r1, [fp, #-12]
  10a460:	e51b0008 	ldr	r0, [fp, #-8]
  10a464:	ebfff911 	bl	1088b0 <sal_poll>
  10a468:	e1a03000 	mov	r3, r0
}
  10a46c:	e1a00003 	mov	r0, r3
  10a470:	e24bd004 	sub	sp, fp, #4
  10a474:	e8bd8800 	pop	{fp, pc}

0010a478 <dfs_net_get_fops>:
    dfs_net_write,
    dfs_net_poll,
};

const struct dfs_file_ops *dfs_net_get_fops(void)
{
  10a478:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a47c:	e28db000 	add	fp, sp, #0
    return &_net_fops;
  10a480:	e3063214 	movw	r3, #25108	; 0x6214
  10a484:	e3403014 	movt	r3, #20
}
  10a488:	e1a00003 	mov	r0, r3
  10a48c:	e28bd000 	add	sp, fp, #0
  10a490:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a494:	e12fff1e 	bx	lr

0010a498 <tcpip_init_done_callback>:

/*
 * Initialize the ethernetif layer and set network interface device up
 */
static void tcpip_init_done_callback(void *arg)
{
  10a498:	e92d4800 	push	{fp, lr}
  10a49c:	e28db004 	add	fp, sp, #4
  10a4a0:	e24dd008 	sub	sp, sp, #8
  10a4a4:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release((rt_sem_t)arg);
  10a4a8:	e51b0008 	ldr	r0, [fp, #-8]
  10a4ac:	ebffdb64 	bl	101244 <rt_sem_release>
}
  10a4b0:	e320f000 	nop	{0}
  10a4b4:	e24bd004 	sub	sp, fp, #4
  10a4b8:	e8bd8800 	pop	{fp, pc}

0010a4bc <buffer_full>:
#define INPUT_BUF_LEN 8
static void* INPUT_buffer[INPUT_BUF_LEN];
static int input_ptr = 0;
static int output_ptr = 0;
static int buffer_full()
{
  10a4bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a4c0:	e28db000 	add	fp, sp, #0
    return output_ptr == ((input_ptr + 1) % INPUT_BUF_LEN);
  10a4c4:	e30d3a68 	movw	r3, #55912	; 0xda68
  10a4c8:	e3403014 	movt	r3, #20
  10a4cc:	e5933000 	ldr	r3, [r3]
  10a4d0:	e2833001 	add	r3, r3, #1
  10a4d4:	e2732000 	rsbs	r2, r3, #0
  10a4d8:	e2033007 	and	r3, r3, #7
  10a4dc:	e2022007 	and	r2, r2, #7
  10a4e0:	52623000 	rsbpl	r3, r2, #0
  10a4e4:	e30d2a6c 	movw	r2, #55916	; 0xda6c
  10a4e8:	e3402014 	movt	r2, #20
  10a4ec:	e5922000 	ldr	r2, [r2]
  10a4f0:	e1530002 	cmp	r3, r2
  10a4f4:	03a03001 	moveq	r3, #1
  10a4f8:	13a03000 	movne	r3, #0
  10a4fc:	e6ef3073 	uxtb	r3, r3
}
  10a500:	e1a00003 	mov	r0, r3
  10a504:	e28bd000 	add	sp, fp, #0
  10a508:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a50c:	e12fff1e 	bx	lr

0010a510 <buffer_empty>:

static int buffer_empty()
{
  10a510:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a514:	e28db000 	add	fp, sp, #0
    return input_ptr == output_ptr;
  10a518:	e30d3a68 	movw	r3, #55912	; 0xda68
  10a51c:	e3403014 	movt	r3, #20
  10a520:	e5932000 	ldr	r2, [r3]
  10a524:	e30d3a6c 	movw	r3, #55916	; 0xda6c
  10a528:	e3403014 	movt	r3, #20
  10a52c:	e5933000 	ldr	r3, [r3]
  10a530:	e1520003 	cmp	r2, r3
  10a534:	03a03001 	moveq	r3, #1
  10a538:	13a03000 	movne	r3, #0
  10a53c:	e6ef3073 	uxtb	r3, r3
}
  10a540:	e1a00003 	mov	r0, r3
  10a544:	e28bd000 	add	sp, fp, #0
  10a548:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a54c:	e12fff1e 	bx	lr

0010a550 <buffer_enqueue>:

static int buffer_enqueue(void *data)
{
  10a550:	e92d4800 	push	{fp, lr}
  10a554:	e28db004 	add	fp, sp, #4
  10a558:	e24dd008 	sub	sp, sp, #8
  10a55c:	e50b0008 	str	r0, [fp, #-8]
    if (buffer_full())
  10a560:	ebffffd5 	bl	10a4bc <buffer_full>
  10a564:	e1a03000 	mov	r3, r0
  10a568:	e3530000 	cmp	r3, #0
  10a56c:	0a000001 	beq	10a578 <buffer_enqueue+0x28>
    {
        return -1;
  10a570:	e3e03000 	mvn	r3, #0
  10a574:	ea000012 	b	10a5c4 <buffer_enqueue+0x74>
    }

    INPUT_buffer[input_ptr] = data;
  10a578:	e30d3a68 	movw	r3, #55912	; 0xda68
  10a57c:	e3403014 	movt	r3, #20
  10a580:	e5932000 	ldr	r2, [r3]
  10a584:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a588:	e3403014 	movt	r3, #20
  10a58c:	e51b1008 	ldr	r1, [fp, #-8]
  10a590:	e7831102 	str	r1, [r3, r2, lsl #2]
    input_ptr = (input_ptr + 1) % INPUT_BUF_LEN;
  10a594:	e30d3a68 	movw	r3, #55912	; 0xda68
  10a598:	e3403014 	movt	r3, #20
  10a59c:	e5933000 	ldr	r3, [r3]
  10a5a0:	e2833001 	add	r3, r3, #1
  10a5a4:	e2732000 	rsbs	r2, r3, #0
  10a5a8:	e2033007 	and	r3, r3, #7
  10a5ac:	e2022007 	and	r2, r2, #7
  10a5b0:	52623000 	rsbpl	r3, r2, #0
  10a5b4:	e30d2a68 	movw	r2, #55912	; 0xda68
  10a5b8:	e3402014 	movt	r2, #20
  10a5bc:	e5823000 	str	r3, [r2]
    // printf("e %d\n", input_ptr);

    return 0;
  10a5c0:	e3a03000 	mov	r3, #0
}
  10a5c4:	e1a00003 	mov	r0, r3
  10a5c8:	e24bd004 	sub	sp, fp, #4
  10a5cc:	e8bd8800 	pop	{fp, pc}

0010a5d0 <buffer_dequeue>:

static void* buffer_dequeue()
{
  10a5d0:	e92d4800 	push	{fp, lr}
  10a5d4:	e28db004 	add	fp, sp, #4
  10a5d8:	e24dd008 	sub	sp, sp, #8
    if (buffer_empty())
  10a5dc:	ebffffcb 	bl	10a510 <buffer_empty>
  10a5e0:	e1a03000 	mov	r3, r0
  10a5e4:	e3530000 	cmp	r3, #0
  10a5e8:	0a000001 	beq	10a5f4 <buffer_dequeue+0x24>
    {
        return RT_NULL;
  10a5ec:	e3a03000 	mov	r3, #0
  10a5f0:	ea000012 	b	10a640 <buffer_dequeue+0x70>
    }

    void *res = INPUT_buffer[output_ptr];
  10a5f4:	e30d3a6c 	movw	r3, #55916	; 0xda6c
  10a5f8:	e3403014 	movt	r3, #20
  10a5fc:	e5932000 	ldr	r2, [r3]
  10a600:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a604:	e3403014 	movt	r3, #20
  10a608:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  10a60c:	e50b3008 	str	r3, [fp, #-8]
    output_ptr = (output_ptr + 1) % INPUT_BUF_LEN;
  10a610:	e30d3a6c 	movw	r3, #55916	; 0xda6c
  10a614:	e3403014 	movt	r3, #20
  10a618:	e5933000 	ldr	r3, [r3]
  10a61c:	e2833001 	add	r3, r3, #1
  10a620:	e2732000 	rsbs	r2, r3, #0
  10a624:	e2033007 	and	r3, r3, #7
  10a628:	e2022007 	and	r2, r2, #7
  10a62c:	52623000 	rsbpl	r3, r2, #0
  10a630:	e30d2a6c 	movw	r2, #55916	; 0xda6c
  10a634:	e3402014 	movt	r2, #20
  10a638:	e5823000 	str	r3, [r2]
    // printf("d %d\n", output_ptr);

    return res;
  10a63c:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a640:	e1a00003 	mov	r0, r3
  10a644:	e24bd004 	sub	sp, fp, #4
  10a648:	e8bd8800 	pop	{fp, pc}

0010a64c <tcpip_input_timer_entry>:

#define INPUT_NOTIFICATION 0x01
sys_mbox_t * mbox_global = 0;
void tcpip_input_timer_entry()
{
  10a64c:	e92d4800 	push	{fp, lr}
  10a650:	e28db004 	add	fp, sp, #4
    while (1)
    {
        rt_thread_mdelay(1);
  10a654:	e3a00001 	mov	r0, #1
  10a658:	ebffde07 	bl	101e7c <rt_thread_mdelay>
        if (mbox_global && !buffer_empty())
  10a65c:	e30d3a44 	movw	r3, #55876	; 0xda44
  10a660:	e3403014 	movt	r3, #20
  10a664:	e5933000 	ldr	r3, [r3]
  10a668:	e3530000 	cmp	r3, #0
  10a66c:	0afffff8 	beq	10a654 <tcpip_input_timer_entry+0x8>
  10a670:	ebffffa6 	bl	10a510 <buffer_empty>
  10a674:	e1a03000 	mov	r3, r0
  10a678:	e3530000 	cmp	r3, #0
  10a67c:	1afffff4 	bne	10a654 <tcpip_input_timer_entry+0x8>
        {
            rt_mb_send(*mbox_global, INPUT_NOTIFICATION);
  10a680:	e30d3a44 	movw	r3, #55876	; 0xda44
  10a684:	e3403014 	movt	r3, #20
  10a688:	e5933000 	ldr	r3, [r3]
  10a68c:	e5933000 	ldr	r3, [r3]
  10a690:	e3a01001 	mov	r1, #1
  10a694:	e1a00003 	mov	r0, r3
  10a698:	ebffdbd9 	bl	101604 <rt_mb_send>
        rt_thread_mdelay(1);
  10a69c:	eaffffec 	b	10a654 <tcpip_input_timer_entry+0x8>

0010a6a0 <lwip_system_init>:
    }
}

extern int eth_system_device_init_private(void);
int lwip_system_init(void)
{
  10a6a0:	e92d4800 	push	{fp, lr}
  10a6a4:	e28db004 	add	fp, sp, #4
  10a6a8:	e24dd010 	sub	sp, sp, #16
    struct rt_semaphore *done_sem;
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  10a6ac:	e30d3a70 	movw	r3, #55920	; 0xda70
  10a6b0:	e3403014 	movt	r3, #20
  10a6b4:	e5933000 	ldr	r3, [r3]
  10a6b8:	e3530000 	cmp	r3, #0
  10a6bc:	0a000004 	beq	10a6d4 <lwip_system_init+0x34>
    {
        rt_kprintf("lwip system already init.\n");
  10a6c0:	e3060228 	movw	r0, #25128	; 0x6228
  10a6c4:	e3400014 	movt	r0, #20
  10a6c8:	ebffe291 	bl	103114 <rt_kprintf>
        return 0;
  10a6cc:	e3a03000 	mov	r3, #0
  10a6d0:	ea00003c 	b	10a7c8 <lwip_system_init+0x128>
    }

    eth_system_device_init_private();
  10a6d4:	eb007d93 	bl	129d28 <eth_system_device_init_private>

    /* set default netif to NULL */
    netif_default = RT_NULL;
  10a6d8:	e30c3a40 	movw	r3, #51776	; 0xca40
  10a6dc:	e3403015 	movt	r3, #21
  10a6e0:	e3a02000 	mov	r2, #0
  10a6e4:	e5832000 	str	r2, [r3]
    done_sem = rt_sem_create("done", 0, RT_IPC_FLAG_FIFO);
  10a6e8:	e3a02000 	mov	r2, #0
  10a6ec:	e3a01000 	mov	r1, #0
  10a6f0:	e3060244 	movw	r0, #25156	; 0x6244
  10a6f4:	e3400014 	movt	r0, #20
  10a6f8:	ebffda3a 	bl	100fe8 <rt_sem_create>
  10a6fc:	e50b0008 	str	r0, [fp, #-8]

    if (done_sem == RT_NULL)
  10a700:	e51b3008 	ldr	r3, [fp, #-8]
  10a704:	e3530000 	cmp	r3, #0
  10a708:	1a000008 	bne	10a730 <lwip_system_init+0x90>
    {
        LWIP_ASSERT("Failed to create semaphore", 0);
  10a70c:	e306024c 	movw	r0, #25164	; 0x624c
  10a710:	e3400014 	movt	r0, #20
  10a714:	ebffe27e 	bl	103114 <rt_kprintf>
  10a718:	e3a01095 	mov	r1, #149	; 0x95
  10a71c:	e3060268 	movw	r0, #25192	; 0x6268
  10a720:	e3400014 	movt	r0, #20
  10a724:	eb000262 	bl	10b0b4 <sys_arch_assert>

        return -1;
  10a728:	e3e03000 	mvn	r3, #0
  10a72c:	ea000025 	b	10a7c8 <lwip_system_init+0x128>
    }

    tcpip_init(tcpip_init_done_callback, (void *)done_sem);
  10a730:	e51b1008 	ldr	r1, [fp, #-8]
  10a734:	e30a0498 	movw	r0, #42136	; 0xa498
  10a738:	e3400010 	movt	r0, #16
  10a73c:	eb002f3b 	bl	116430 <tcpip_init>

    /* waiting for initialization done */
    if (rt_sem_take(done_sem, RT_WAITING_FOREVER) != RT_EOK)
  10a740:	e3e01000 	mvn	r1, #0
  10a744:	e51b0008 	ldr	r0, [fp, #-8]
  10a748:	ebffdad9 	bl	1012b4 <rt_sem_take>
  10a74c:	e1a03000 	mov	r3, r0
  10a750:	e3530000 	cmp	r3, #0
  10a754:	0a000003 	beq	10a768 <lwip_system_init+0xc8>
    {
        rt_sem_delete(done_sem);
  10a758:	e51b0008 	ldr	r0, [fp, #-8]
  10a75c:	ebffda6c 	bl	101114 <rt_sem_delete>

        return -1;
  10a760:	e3e03000 	mvn	r3, #0
  10a764:	ea000017 	b	10a7c8 <lwip_system_init+0x128>
    }
    rt_sem_delete(done_sem);
  10a768:	e51b0008 	ldr	r0, [fp, #-8]
  10a76c:	ebffda68 	bl	101114 <rt_sem_delete>

        netifapi_netif_set_addr(netif_default, &ipaddr, &netmask, &gw);
    }
#endif

    rt_thread_t tid = rt_thread_create("tcpip_input_timer", tcpip_input_timer_entry, NULL, 1024, 25, 10); 
  10a770:	e3a0300a 	mov	r3, #10
  10a774:	e58d3004 	str	r3, [sp, #4]
  10a778:	e3a03019 	mov	r3, #25
  10a77c:	e58d3000 	str	r3, [sp]
  10a780:	e3a03b01 	mov	r3, #1024	; 0x400
  10a784:	e3a02000 	mov	r2, #0
  10a788:	e30a164c 	movw	r1, #42572	; 0xa64c
  10a78c:	e3401010 	movt	r1, #16
  10a790:	e3060298 	movw	r0, #25240	; 0x6298
  10a794:	e3400014 	movt	r0, #20
  10a798:	ebffde55 	bl	1020f4 <rt_thread_create>
  10a79c:	e50b000c 	str	r0, [fp, #-12]
    if (tid) rt_thread_startup(tid);
  10a7a0:	e51b300c 	ldr	r3, [fp, #-12]
  10a7a4:	e3530000 	cmp	r3, #0
  10a7a8:	0a000001 	beq	10a7b4 <lwip_system_init+0x114>
  10a7ac:	e51b000c 	ldr	r0, [fp, #-12]
  10a7b0:	ebffde84 	bl	1021c8 <rt_thread_startup>

    init_ok = RT_TRUE;
  10a7b4:	e30d3a70 	movw	r3, #55920	; 0xda70
  10a7b8:	e3403014 	movt	r3, #20
  10a7bc:	e3a02001 	mov	r2, #1
  10a7c0:	e5832000 	str	r2, [r3]

    return 0;
  10a7c4:	e3a03000 	mov	r3, #0
}
  10a7c8:	e1a00003 	mov	r0, r3
  10a7cc:	e24bd004 	sub	sp, fp, #4
  10a7d0:	e8bd8800 	pop	{fp, pc}

0010a7d4 <sys_init>:

void sys_init(void)
{
  10a7d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a7d8:	e28db000 	add	fp, sp, #0
    /* nothing on RT-Thread porting */
}
  10a7dc:	e320f000 	nop	{0}
  10a7e0:	e28bd000 	add	sp, fp, #0
  10a7e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a7e8:	e12fff1e 	bx	lr

0010a7ec <lwip_sys_init>:

void lwip_sys_init(void)
{
  10a7ec:	e92d4800 	push	{fp, lr}
  10a7f0:	e28db004 	add	fp, sp, #4
    lwip_system_init();
  10a7f4:	ebffffa9 	bl	10a6a0 <lwip_system_init>
}
  10a7f8:	e320f000 	nop	{0}
  10a7fc:	e8bd8800 	pop	{fp, pc}

0010a800 <sys_sem_new>:
 * Create a new semaphore
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
  10a800:	e92d4800 	push	{fp, lr}
  10a804:	e28db004 	add	fp, sp, #4
  10a808:	e24dd020 	sub	sp, sp, #32
  10a80c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a810:	e1a03001 	mov	r3, r1
  10a814:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    char tname[RT_NAME_MAX];
    sys_sem_t tmpsem;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_SEM_NAME, counter);
  10a818:	e30d3a74 	movw	r3, #55924	; 0xda74
  10a81c:	e3403014 	movt	r3, #20
  10a820:	e1d330b0 	ldrh	r3, [r3]
  10a824:	e24b0010 	sub	r0, fp, #16
  10a828:	e58d3000 	str	r3, [sp]
  10a82c:	e30632ac 	movw	r3, #25260	; 0x62ac
  10a830:	e3403014 	movt	r3, #20
  10a834:	e30622b0 	movw	r2, #25264	; 0x62b0
  10a838:	e3402014 	movt	r2, #20
  10a83c:	e3a01008 	mov	r1, #8
  10a840:	ebffe1fd 	bl	10303c <rt_snprintf>
    counter ++;
  10a844:	e30d3a74 	movw	r3, #55924	; 0xda74
  10a848:	e3403014 	movt	r3, #20
  10a84c:	e1d330b0 	ldrh	r3, [r3]
  10a850:	e2833001 	add	r3, r3, #1
  10a854:	e6ff2073 	uxth	r2, r3
  10a858:	e30d3a74 	movw	r3, #55924	; 0xda74
  10a85c:	e3403014 	movt	r3, #20
  10a860:	e1c320b0 	strh	r2, [r3]

    tmpsem = rt_sem_create(tname, count, RT_IPC_FLAG_FIFO);
  10a864:	e55b1019 	ldrb	r1, [fp, #-25]	; 0xffffffe7
  10a868:	e24b3010 	sub	r3, fp, #16
  10a86c:	e3a02000 	mov	r2, #0
  10a870:	e1a00003 	mov	r0, r3
  10a874:	ebffd9db 	bl	100fe8 <rt_sem_create>
  10a878:	e50b0008 	str	r0, [fp, #-8]
    if (tmpsem == RT_NULL)
  10a87c:	e51b3008 	ldr	r3, [fp, #-8]
  10a880:	e3530000 	cmp	r3, #0
  10a884:	1a000001 	bne	10a890 <sys_sem_new+0x90>
        return ERR_MEM;
  10a888:	e3e03000 	mvn	r3, #0
  10a88c:	ea000003 	b	10a8a0 <sys_sem_new+0xa0>
    else
    {
        *sem = tmpsem;
  10a890:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a894:	e51b2008 	ldr	r2, [fp, #-8]
  10a898:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10a89c:	e3a03000 	mov	r3, #0
    }
}
  10a8a0:	e1a00003 	mov	r0, r3
  10a8a4:	e24bd004 	sub	sp, fp, #4
  10a8a8:	e8bd8800 	pop	{fp, pc}

0010a8ac <sys_sem_free>:

/*
 * Deallocate a semaphore
 */
void sys_sem_free(sys_sem_t *sem)
{
  10a8ac:	e92d4800 	push	{fp, lr}
  10a8b0:	e28db004 	add	fp, sp, #4
  10a8b4:	e24dd008 	sub	sp, sp, #8
  10a8b8:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_sem_delete(*sem);
  10a8bc:	e51b3008 	ldr	r3, [fp, #-8]
  10a8c0:	e5933000 	ldr	r3, [r3]
  10a8c4:	e1a00003 	mov	r0, r3
  10a8c8:	ebffda11 	bl	101114 <rt_sem_delete>
}
  10a8cc:	e320f000 	nop	{0}
  10a8d0:	e24bd004 	sub	sp, fp, #4
  10a8d4:	e8bd8800 	pop	{fp, pc}

0010a8d8 <sys_sem_signal>:

/*
 * Signal a semaphore
 */
void sys_sem_signal(sys_sem_t *sem)
{
  10a8d8:	e92d4800 	push	{fp, lr}
  10a8dc:	e28db004 	add	fp, sp, #4
  10a8e0:	e24dd008 	sub	sp, sp, #8
  10a8e4:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release(*sem);
  10a8e8:	e51b3008 	ldr	r3, [fp, #-8]
  10a8ec:	e5933000 	ldr	r3, [r3]
  10a8f0:	e1a00003 	mov	r0, r3
  10a8f4:	ebffda52 	bl	101244 <rt_sem_release>
}
  10a8f8:	e320f000 	nop	{0}
  10a8fc:	e24bd004 	sub	sp, fp, #4
  10a900:	e8bd8800 	pop	{fp, pc}

0010a904 <sys_arch_sem_wait>:
 *         spent waiting for the semaphore to be signaled; If the semaphore isn't signaled
 *         within the specified time, it will return SYS_ARCH_TIMEOUT; If the thread doesn't
 *         wait for the semaphore, it will return zero
 */
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
  10a904:	e92d4800 	push	{fp, lr}
  10a908:	e28db004 	add	fp, sp, #4
  10a90c:	e24dd018 	sub	sp, sp, #24
  10a910:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a914:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10a918:	ebffdd50 	bl	101e60 <rt_tick_get>
  10a91c:	e50b000c 	str	r0, [fp, #-12]
    if (timeout == 0)
  10a920:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a924:	e3530000 	cmp	r3, #0
  10a928:	1a000002 	bne	10a938 <sys_arch_sem_wait+0x34>
        t = RT_WAITING_FOREVER;
  10a92c:	e3e03000 	mvn	r3, #0
  10a930:	e50b3008 	str	r3, [fp, #-8]
  10a934:	ea000007 	b	10a958 <sys_arch_sem_wait+0x54>
    else
    {
        /* convert msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10a938:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a93c:	e3530000 	cmp	r3, #0
  10a940:	1a000002 	bne	10a950 <sys_arch_sem_wait+0x4c>
            t = 1;
  10a944:	e3a03001 	mov	r3, #1
  10a948:	e50b3008 	str	r3, [fp, #-8]
  10a94c:	ea000001 	b	10a958 <sys_arch_sem_wait+0x54>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10a950:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a954:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = rt_sem_take(*sem, t);
  10a958:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a95c:	e5933000 	ldr	r3, [r3]
  10a960:	e51b1008 	ldr	r1, [fp, #-8]
  10a964:	e1a00003 	mov	r0, r3
  10a968:	ebffda51 	bl	1012b4 <rt_sem_take>
  10a96c:	e50b0010 	str	r0, [fp, #-16]

    if (ret == -RT_ETIMEOUT)
  10a970:	e51b3010 	ldr	r3, [fp, #-16]
  10a974:	e3730002 	cmn	r3, #2
  10a978:	1a000001 	bne	10a984 <sys_arch_sem_wait+0x80>
        return SYS_ARCH_TIMEOUT;
  10a97c:	e3e03000 	mvn	r3, #0
  10a980:	ea00000f 	b	10a9c4 <sys_arch_sem_wait+0xc0>
    else
    {
        if (ret == RT_EOK)
  10a984:	e51b3010 	ldr	r3, [fp, #-16]
  10a988:	e3530000 	cmp	r3, #0
  10a98c:	1a000001 	bne	10a998 <sys_arch_sem_wait+0x94>
            ret = 1;
  10a990:	e3a03001 	mov	r3, #1
  10a994:	e50b3010 	str	r3, [fp, #-16]
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10a998:	ebffdd30 	bl	101e60 <rt_tick_get>
  10a99c:	e1a02000 	mov	r2, r0
  10a9a0:	e51b300c 	ldr	r3, [fp, #-12]
  10a9a4:	e0423003 	sub	r3, r2, r3
  10a9a8:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10a9ac:	e51b300c 	ldr	r3, [fp, #-12]
  10a9b0:	e3530000 	cmp	r3, #0
  10a9b4:	1a000001 	bne	10a9c0 <sys_arch_sem_wait+0xbc>
        tick = 1;
  10a9b8:	e3a03001 	mov	r3, #1
  10a9bc:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10a9c0:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a9c4:	e1a00003 	mov	r0, r3
  10a9c8:	e24bd004 	sub	sp, fp, #4
  10a9cc:	e8bd8800 	pop	{fp, pc}

0010a9d0 <sys_sem_valid>:
#ifndef sys_sem_valid
/** Check if a semaphore is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_ubase_t sys_sem_valid(sys_sem_t *sem)
{
  10a9d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a9d4:	e28db000 	add	fp, sp, #0
  10a9d8:	e24dd00c 	sub	sp, sp, #12
  10a9dc:	e50b0008 	str	r0, [fp, #-8]
    return (rt_ubase_t)(*sem);
  10a9e0:	e51b3008 	ldr	r3, [fp, #-8]
  10a9e4:	e5933000 	ldr	r3, [r3]
}
  10a9e8:	e1a00003 	mov	r0, r3
  10a9ec:	e28bd000 	add	sp, fp, #0
  10a9f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a9f4:	e12fff1e 	bx	lr

0010a9f8 <sys_sem_set_invalid>:

#ifndef sys_sem_set_invalid
/** Set a semaphore invalid so that sys_sem_valid returns 0
 */
void sys_sem_set_invalid(sys_sem_t *sem)
{
  10a9f8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a9fc:	e28db000 	add	fp, sp, #0
  10aa00:	e24dd00c 	sub	sp, sp, #12
  10aa04:	e50b0008 	str	r0, [fp, #-8]
    *sem = RT_NULL;
  10aa08:	e51b3008 	ldr	r3, [fp, #-8]
  10aa0c:	e3a02000 	mov	r2, #0
  10aa10:	e5832000 	str	r2, [r3]
}
  10aa14:	e320f000 	nop	{0}
  10aa18:	e28bd000 	add	sp, fp, #0
  10aa1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10aa20:	e12fff1e 	bx	lr

0010aa24 <sys_mutex_new>:
/** Create a new mutex
 * @param mutex pointer to the mutex to create
 * @return a new mutex
 */
err_t sys_mutex_new(sys_mutex_t *mutex)
{
  10aa24:	e92d4800 	push	{fp, lr}
  10aa28:	e28db004 	add	fp, sp, #4
  10aa2c:	e24dd020 	sub	sp, sp, #32
  10aa30:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    char tname[RT_NAME_MAX];
    sys_mutex_t tmpmutex;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MUTEX_NAME, counter);
  10aa34:	e30d3a76 	movw	r3, #55926	; 0xda76
  10aa38:	e3403014 	movt	r3, #20
  10aa3c:	e1d330b0 	ldrh	r3, [r3]
  10aa40:	e24b0010 	sub	r0, fp, #16
  10aa44:	e58d3000 	str	r3, [sp]
  10aa48:	e30632b8 	movw	r3, #25272	; 0x62b8
  10aa4c:	e3403014 	movt	r3, #20
  10aa50:	e30622b0 	movw	r2, #25264	; 0x62b0
  10aa54:	e3402014 	movt	r2, #20
  10aa58:	e3a01008 	mov	r1, #8
  10aa5c:	ebffe176 	bl	10303c <rt_snprintf>
    counter ++;
  10aa60:	e30d3a76 	movw	r3, #55926	; 0xda76
  10aa64:	e3403014 	movt	r3, #20
  10aa68:	e1d330b0 	ldrh	r3, [r3]
  10aa6c:	e2833001 	add	r3, r3, #1
  10aa70:	e6ff2073 	uxth	r2, r3
  10aa74:	e30d3a76 	movw	r3, #55926	; 0xda76
  10aa78:	e3403014 	movt	r3, #20
  10aa7c:	e1c320b0 	strh	r2, [r3]

    tmpmutex = rt_mutex_create(tname, RT_IPC_FLAG_FIFO);
  10aa80:	e24b3010 	sub	r3, fp, #16
  10aa84:	e3a01000 	mov	r1, #0
  10aa88:	e1a00003 	mov	r0, r3
  10aa8c:	ebffd885 	bl	100ca8 <rt_mutex_create>
  10aa90:	e50b0008 	str	r0, [fp, #-8]
    if (tmpmutex == RT_NULL)
  10aa94:	e51b3008 	ldr	r3, [fp, #-8]
  10aa98:	e3530000 	cmp	r3, #0
  10aa9c:	1a000001 	bne	10aaa8 <sys_mutex_new+0x84>
        return ERR_MEM;
  10aaa0:	e3e03000 	mvn	r3, #0
  10aaa4:	ea000003 	b	10aab8 <sys_mutex_new+0x94>
    else
    {
        *mutex = tmpmutex;
  10aaa8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10aaac:	e51b2008 	ldr	r2, [fp, #-8]
  10aab0:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10aab4:	e3a03000 	mov	r3, #0
    }
}
  10aab8:	e1a00003 	mov	r0, r3
  10aabc:	e24bd004 	sub	sp, fp, #4
  10aac0:	e8bd8800 	pop	{fp, pc}

0010aac4 <sys_mutex_lock>:

/** Lock a mutex
 * @param mutex the mutex to lock
 */
void sys_mutex_lock(sys_mutex_t *mutex)
{
  10aac4:	e92d4800 	push	{fp, lr}
  10aac8:	e28db004 	add	fp, sp, #4
  10aacc:	e24dd008 	sub	sp, sp, #8
  10aad0:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_mutex_take(*mutex, RT_WAITING_FOREVER);
  10aad4:	e51b3008 	ldr	r3, [fp, #-8]
  10aad8:	e5933000 	ldr	r3, [r3]
  10aadc:	e3e01000 	mvn	r1, #0
  10aae0:	e1a00003 	mov	r0, r3
  10aae4:	ebffd905 	bl	100f00 <rt_mutex_take>

    return;
  10aae8:	e320f000 	nop	{0}
}
  10aaec:	e24bd004 	sub	sp, fp, #4
  10aaf0:	e8bd8800 	pop	{fp, pc}

0010aaf4 <sys_mutex_unlock>:

/** Unlock a mutex
 * @param mutex the mutex to unlock
 */
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  10aaf4:	e92d4800 	push	{fp, lr}
  10aaf8:	e28db004 	add	fp, sp, #4
  10aafc:	e24dd008 	sub	sp, sp, #8
  10ab00:	e50b0008 	str	r0, [fp, #-8]
    rt_mutex_release(*mutex);
  10ab04:	e51b3008 	ldr	r3, [fp, #-8]
  10ab08:	e5933000 	ldr	r3, [r3]
  10ab0c:	e1a00003 	mov	r0, r3
  10ab10:	ebffd918 	bl	100f78 <rt_mutex_release>
}
  10ab14:	e320f000 	nop	{0}
  10ab18:	e24bd004 	sub	sp, fp, #4
  10ab1c:	e8bd8800 	pop	{fp, pc}

0010ab20 <sys_mutex_free>:

/** Delete a semaphore
 * @param mutex the mutex to delete
 */
void sys_mutex_free(sys_mutex_t *mutex)
{
  10ab20:	e92d4800 	push	{fp, lr}
  10ab24:	e28db004 	add	fp, sp, #4
  10ab28:	e24dd008 	sub	sp, sp, #8
  10ab2c:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mutex_delete(*mutex);
  10ab30:	e51b3008 	ldr	r3, [fp, #-8]
  10ab34:	e5933000 	ldr	r3, [r3]
  10ab38:	e1a00003 	mov	r0, r3
  10ab3c:	ebffd8a3 	bl	100dd0 <rt_mutex_delete>
}
  10ab40:	e320f000 	nop	{0}
  10ab44:	e24bd004 	sub	sp, fp, #4
  10ab48:	e8bd8800 	pop	{fp, pc}

0010ab4c <sys_mutex_valid>:
#ifndef sys_mutex_valid
/** Check if a mutex is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mutex_valid(sys_mutex_t *mutex)
{
  10ab4c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ab50:	e28db000 	add	fp, sp, #0
  10ab54:	e24dd00c 	sub	sp, sp, #12
  10ab58:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mutex);
  10ab5c:	e51b3008 	ldr	r3, [fp, #-8]
  10ab60:	e5933000 	ldr	r3, [r3]
}
  10ab64:	e1a00003 	mov	r0, r3
  10ab68:	e28bd000 	add	sp, fp, #0
  10ab6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ab70:	e12fff1e 	bx	lr

0010ab74 <sys_mutex_set_invalid>:

#ifndef sys_mutex_set_invalid
/** Set a mutex invalid so that sys_mutex_valid returns 0
 */
void sys_mutex_set_invalid(sys_mutex_t *mutex)
{
  10ab74:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ab78:	e28db000 	add	fp, sp, #0
  10ab7c:	e24dd00c 	sub	sp, sp, #12
  10ab80:	e50b0008 	str	r0, [fp, #-8]
    *mutex = RT_NULL;
  10ab84:	e51b3008 	ldr	r3, [fp, #-8]
  10ab88:	e3a02000 	mov	r2, #0
  10ab8c:	e5832000 	str	r2, [r3]
}
  10ab90:	e320f000 	nop	{0}
  10ab94:	e28bd000 	add	sp, fp, #0
  10ab98:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ab9c:	e12fff1e 	bx	lr

0010aba0 <sys_mbox_new>:
 * Create an empty mailbox for maximum "size" elements
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
  10aba0:	e92d4800 	push	{fp, lr}
  10aba4:	e28db004 	add	fp, sp, #4
  10aba8:	e24dd020 	sub	sp, sp, #32
  10abac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10abb0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    if (size == RT_LWIP_TCPTHREAD_MBOX_SIZE)
  10abb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10abb8:	e3002101 	movw	r2, #257	; 0x101
  10abbc:	e1530002 	cmp	r3, r2
  10abc0:	1a000006 	bne	10abe0 <sys_mbox_new+0x40>
    {
        printf("set mbox_global\n");
  10abc4:	e30602bc 	movw	r0, #25276	; 0x62bc
  10abc8:	e3400014 	movt	r0, #20
  10abcc:	eb00ce79 	bl	13e5b8 <puts>
        mbox_global = mbox;
  10abd0:	e30d3a44 	movw	r3, #55876	; 0xda44
  10abd4:	e3403014 	movt	r3, #20
  10abd8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10abdc:	e5832000 	str	r2, [r3]
    char tname[RT_NAME_MAX];
    sys_mbox_t tmpmbox;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MBOX_NAME, counter);
  10abe0:	e30d3a78 	movw	r3, #55928	; 0xda78
  10abe4:	e3403014 	movt	r3, #20
  10abe8:	e1d330b0 	ldrh	r3, [r3]
  10abec:	e24b0010 	sub	r0, fp, #16
  10abf0:	e58d3000 	str	r3, [sp]
  10abf4:	e30632cc 	movw	r3, #25292	; 0x62cc
  10abf8:	e3403014 	movt	r3, #20
  10abfc:	e30622b0 	movw	r2, #25264	; 0x62b0
  10ac00:	e3402014 	movt	r2, #20
  10ac04:	e3a01008 	mov	r1, #8
  10ac08:	ebffe10b 	bl	10303c <rt_snprintf>
    counter ++;
  10ac0c:	e30d3a78 	movw	r3, #55928	; 0xda78
  10ac10:	e3403014 	movt	r3, #20
  10ac14:	e1d330b0 	ldrh	r3, [r3]
  10ac18:	e2833001 	add	r3, r3, #1
  10ac1c:	e6ff2073 	uxth	r2, r3
  10ac20:	e30d3a78 	movw	r3, #55928	; 0xda78
  10ac24:	e3403014 	movt	r3, #20
  10ac28:	e1c320b0 	strh	r2, [r3]

    tmpmbox = rt_mb_create(tname, size, RT_IPC_FLAG_FIFO);
  10ac2c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10ac30:	e24b3010 	sub	r3, fp, #16
  10ac34:	e3a02000 	mov	r2, #0
  10ac38:	e1a00003 	mov	r0, r3
  10ac3c:	ebffd9ba 	bl	10132c <rt_mb_create>
  10ac40:	e50b0008 	str	r0, [fp, #-8]
    if (tmpmbox != RT_NULL)
  10ac44:	e51b3008 	ldr	r3, [fp, #-8]
  10ac48:	e3530000 	cmp	r3, #0
  10ac4c:	0a000004 	beq	10ac64 <sys_mbox_new+0xc4>
    {
        *mbox = tmpmbox;
  10ac50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ac54:	e51b2008 	ldr	r2, [fp, #-8]
  10ac58:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10ac5c:	e3a03000 	mov	r3, #0
  10ac60:	ea000000 	b	10ac68 <sys_mbox_new+0xc8>
    }

    return ERR_MEM;
  10ac64:	e3e03000 	mvn	r3, #0
}
  10ac68:	e1a00003 	mov	r0, r3
  10ac6c:	e24bd004 	sub	sp, fp, #4
  10ac70:	e8bd8800 	pop	{fp, pc}

0010ac74 <sys_mbox_free>:

/*
 * Deallocate a mailbox
 */
void sys_mbox_free(sys_mbox_t *mbox)
{
  10ac74:	e92d4800 	push	{fp, lr}
  10ac78:	e28db004 	add	fp, sp, #4
  10ac7c:	e24dd008 	sub	sp, sp, #8
  10ac80:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mb_delete(*mbox);
  10ac84:	e51b3008 	ldr	r3, [fp, #-8]
  10ac88:	e5933000 	ldr	r3, [r3]
  10ac8c:	e1a00003 	mov	r0, r3
  10ac90:	ebffd9f0 	bl	101458 <rt_mb_delete>

    return;
  10ac94:	e320f000 	nop	{0}
}
  10ac98:	e24bd004 	sub	sp, fp, #4
  10ac9c:	e8bd8800 	pop	{fp, pc}

0010aca0 <post_msg>:

rt_err_t post_msg(sys_mbox_t *mbox, void **msg)
{
  10aca0:	e92d4800 	push	{fp, lr}
  10aca4:	e28db004 	add	fp, sp, #4
  10aca8:	e24dd008 	sub	sp, sp, #8
  10acac:	e50b0008 	str	r0, [fp, #-8]
  10acb0:	e50b100c 	str	r1, [fp, #-12]
    if (mbox == mbox_global)
  10acb4:	e30d3a44 	movw	r3, #55876	; 0xda44
  10acb8:	e3403014 	movt	r3, #20
  10acbc:	e5933000 	ldr	r3, [r3]
  10acc0:	e51b2008 	ldr	r2, [fp, #-8]
  10acc4:	e1520003 	cmp	r2, r3
  10acc8:	1a000010 	bne	10ad10 <post_msg+0x70>
    {
        if (((struct tcpip_msg*)msg)->type == TCPIP_MSG_INPKT)
  10accc:	e51b300c 	ldr	r3, [fp, #-12]
  10acd0:	e5933000 	ldr	r3, [r3]
  10acd4:	e3530002 	cmp	r3, #2
  10acd8:	1a00000c 	bne	10ad10 <post_msg+0x70>
        {
            while (buffer_enqueue(msg) == -1)
  10acdc:	ea000004 	b	10acf4 <post_msg+0x54>
            {
                rt_mb_send(*mbox, INPUT_NOTIFICATION);
  10ace0:	e51b3008 	ldr	r3, [fp, #-8]
  10ace4:	e5933000 	ldr	r3, [r3]
  10ace8:	e3a01001 	mov	r1, #1
  10acec:	e1a00003 	mov	r0, r3
  10acf0:	ebffda43 	bl	101604 <rt_mb_send>
            while (buffer_enqueue(msg) == -1)
  10acf4:	e51b000c 	ldr	r0, [fp, #-12]
  10acf8:	ebfffe14 	bl	10a550 <buffer_enqueue>
  10acfc:	e1a03000 	mov	r3, r0
  10ad00:	e3730001 	cmn	r3, #1
  10ad04:	0afffff5 	beq	10ace0 <post_msg+0x40>
            }

            return ERR_OK;
  10ad08:	e3a03000 	mov	r3, #0
  10ad0c:	ea000006 	b	10ad2c <post_msg+0x8c>
        } 
    }

    return rt_mb_send_wait(*mbox, (rt_ubase_t)msg, RT_WAITING_FOREVER);
  10ad10:	e51b3008 	ldr	r3, [fp, #-8]
  10ad14:	e5933000 	ldr	r3, [r3]
  10ad18:	e51b100c 	ldr	r1, [fp, #-12]
  10ad1c:	e3e02000 	mvn	r2, #0
  10ad20:	e1a00003 	mov	r0, r3
  10ad24:	ebffda17 	bl	101588 <rt_mb_send_wait>
  10ad28:	e1a03000 	mov	r3, r0
}
  10ad2c:	e1a00003 	mov	r0, r3
  10ad30:	e24bd004 	sub	sp, fp, #4
  10ad34:	e8bd8800 	pop	{fp, pc}

0010ad38 <fetch_msg>:

rt_err_t fetch_msg(sys_mbox_t *mbox, void **msg, u32_t t)
{
  10ad38:	e92d4800 	push	{fp, lr}
  10ad3c:	e28db004 	add	fp, sp, #4
  10ad40:	e24dd018 	sub	sp, sp, #24
  10ad44:	e50b0010 	str	r0, [fp, #-16]
  10ad48:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10ad4c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    if (mbox == mbox_global)
  10ad50:	e30d3a44 	movw	r3, #55876	; 0xda44
  10ad54:	e3403014 	movt	r3, #20
  10ad58:	e5933000 	ldr	r3, [r3]
  10ad5c:	e51b2010 	ldr	r2, [fp, #-16]
  10ad60:	e1520003 	cmp	r2, r3
  10ad64:	1a000016 	bne	10adc4 <fetch_msg+0x8c>
    {
        rt_err_t ret;
        do
        {
            *msg = buffer_dequeue();
  10ad68:	ebfffe18 	bl	10a5d0 <buffer_dequeue>
  10ad6c:	e1a02000 	mov	r2, r0
  10ad70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10ad74:	e5832000 	str	r2, [r3]
            if (*msg)
  10ad78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10ad7c:	e5933000 	ldr	r3, [r3]
  10ad80:	e3530000 	cmp	r3, #0
  10ad84:	0a000001 	beq	10ad90 <fetch_msg+0x58>
            {
                return RT_EOK;
  10ad88:	e3a03000 	mov	r3, #0
  10ad8c:	ea000013 	b	10ade0 <fetch_msg+0xa8>
            } 
            ret = rt_mb_recv(*mbox, (rt_ubase_t *)msg, t);
  10ad90:	e51b3010 	ldr	r3, [fp, #-16]
  10ad94:	e5933000 	ldr	r3, [r3]
  10ad98:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10ad9c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10ada0:	e1a00003 	mov	r0, r3
  10ada4:	ebffda34 	bl	10167c <rt_mb_recv>
  10ada8:	e50b0008 	str	r0, [fp, #-8]
        } while (*msg == (void*)INPUT_NOTIFICATION);
  10adac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10adb0:	e5933000 	ldr	r3, [r3]
  10adb4:	e3530001 	cmp	r3, #1
  10adb8:	0affffea 	beq	10ad68 <fetch_msg+0x30>

        return ret;
  10adbc:	e51b3008 	ldr	r3, [fp, #-8]
  10adc0:	ea000006 	b	10ade0 <fetch_msg+0xa8>
    }
    else 
    {
        return rt_mb_recv(*mbox, (rt_ubase_t *)msg, t); 
  10adc4:	e51b3010 	ldr	r3, [fp, #-16]
  10adc8:	e5933000 	ldr	r3, [r3]
  10adcc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10add0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10add4:	e1a00003 	mov	r0, r3
  10add8:	ebffda27 	bl	10167c <rt_mb_recv>
  10addc:	e1a03000 	mov	r3, r0
    }
}
  10ade0:	e1a00003 	mov	r0, r3
  10ade4:	e24bd004 	sub	sp, fp, #4
  10ade8:	e8bd8800 	pop	{fp, pc}

0010adec <sys_mbox_post>:
 * -> blocks if full, only used from tasks not from ISR
 * @param mbox mbox to posts the message
 * @param msg message to post (ATTENTION: can be NULL)
 */
void sys_mbox_post(sys_mbox_t *mbox, void *msg)
{
  10adec:	e92d4800 	push	{fp, lr}
  10adf0:	e28db004 	add	fp, sp, #4
  10adf4:	e24dd008 	sub	sp, sp, #8
  10adf8:	e50b0008 	str	r0, [fp, #-8]
  10adfc:	e50b100c 	str	r1, [fp, #-12]
    RT_DEBUG_NOT_IN_INTERRUPT;

    // rt_mb_send_wait(*mbox, (rt_ubase_t)msg, RT_WAITING_FOREVER);
    post_msg(mbox, msg);
  10ae00:	e51b100c 	ldr	r1, [fp, #-12]
  10ae04:	e51b0008 	ldr	r0, [fp, #-8]
  10ae08:	ebffffa4 	bl	10aca0 <post_msg>

    return;
  10ae0c:	e320f000 	nop	{0}
}
  10ae10:	e24bd004 	sub	sp, fp, #4
  10ae14:	e8bd8800 	pop	{fp, pc}

0010ae18 <sys_mbox_trypost>:
 *
 * @return return ERR_OK if the "msg" is posted, ERR_MEM if the mailbox is full
 */

err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  10ae18:	e92d4800 	push	{fp, lr}
  10ae1c:	e28db004 	add	fp, sp, #4
  10ae20:	e24dd008 	sub	sp, sp, #8
  10ae24:	e50b0008 	str	r0, [fp, #-8]
  10ae28:	e50b100c 	str	r1, [fp, #-12]
    return post_msg(mbox, msg);
  10ae2c:	e51b100c 	ldr	r1, [fp, #-12]
  10ae30:	e51b0008 	ldr	r0, [fp, #-8]
  10ae34:	ebffff99 	bl	10aca0 <post_msg>
  10ae38:	e1a03000 	mov	r3, r0
  10ae3c:	e6af3073 	sxtb	r3, r3
}
  10ae40:	e1a00003 	mov	r0, r3
  10ae44:	e24bd004 	sub	sp, fp, #4
  10ae48:	e8bd8800 	pop	{fp, pc}

0010ae4c <sys_arch_mbox_fetch>:
 * @return time (in milliseconds) waited for a message, may be 0 if not waited
           or SYS_ARCH_TIMEOUT on timeout
 *         The returned time has to be accurate to prevent timer jitter!
 */
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
  10ae4c:	e92d4800 	push	{fp, lr}
  10ae50:	e28db004 	add	fp, sp, #4
  10ae54:	e24dd020 	sub	sp, sp, #32
  10ae58:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10ae5c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10ae60:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10ae64:	ebffdbfd 	bl	101e60 <rt_tick_get>
  10ae68:	e50b000c 	str	r0, [fp, #-12]

    if(timeout == 0)
  10ae6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ae70:	e3530000 	cmp	r3, #0
  10ae74:	1a000002 	bne	10ae84 <sys_arch_mbox_fetch+0x38>
        t = RT_WAITING_FOREVER;
  10ae78:	e3e03000 	mvn	r3, #0
  10ae7c:	e50b3008 	str	r3, [fp, #-8]
  10ae80:	ea000007 	b	10aea4 <sys_arch_mbox_fetch+0x58>
    else
    {
        /* convirt msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10ae84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ae88:	e3530000 	cmp	r3, #0
  10ae8c:	1a000002 	bne	10ae9c <sys_arch_mbox_fetch+0x50>
            t = 1;
  10ae90:	e3a03001 	mov	r3, #1
  10ae94:	e50b3008 	str	r3, [fp, #-8]
  10ae98:	ea000001 	b	10aea4 <sys_arch_mbox_fetch+0x58>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10ae9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10aea0:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = fetch_msg(mbox, msg, t);
  10aea4:	e51b3008 	ldr	r3, [fp, #-8]
  10aea8:	e1a02003 	mov	r2, r3
  10aeac:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10aeb0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10aeb4:	ebffff9f 	bl	10ad38 <fetch_msg>
  10aeb8:	e50b0010 	str	r0, [fp, #-16]

    if(ret == -RT_ETIMEOUT)
  10aebc:	e51b3010 	ldr	r3, [fp, #-16]
  10aec0:	e3730002 	cmn	r3, #2
  10aec4:	1a000001 	bne	10aed0 <sys_arch_mbox_fetch+0x84>
        return SYS_ARCH_TIMEOUT;
  10aec8:	e3e03000 	mvn	r3, #0
  10aecc:	ea000014 	b	10af24 <sys_arch_mbox_fetch+0xd8>
    else
    {
        LWIP_ASSERT("rt_mb_recv returned with error!", ret == RT_EOK);
  10aed0:	e51b3010 	ldr	r3, [fp, #-16]
  10aed4:	e3530000 	cmp	r3, #0
  10aed8:	0a000006 	beq	10aef8 <sys_arch_mbox_fetch+0xac>
  10aedc:	e30602d4 	movw	r0, #25300	; 0x62d4
  10aee0:	e3400014 	movt	r0, #20
  10aee4:	ebffe08a 	bl	103114 <rt_kprintf>
  10aee8:	e3a01f86 	mov	r1, #536	; 0x218
  10aeec:	e3060268 	movw	r0, #25192	; 0x6268
  10aef0:	e3400014 	movt	r0, #20
  10aef4:	eb00006e 	bl	10b0b4 <sys_arch_assert>
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10aef8:	ebffdbd8 	bl	101e60 <rt_tick_get>
  10aefc:	e1a02000 	mov	r2, r0
  10af00:	e51b300c 	ldr	r3, [fp, #-12]
  10af04:	e0423003 	sub	r3, r2, r3
  10af08:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10af0c:	e51b300c 	ldr	r3, [fp, #-12]
  10af10:	e3530000 	cmp	r3, #0
  10af14:	1a000001 	bne	10af20 <sys_arch_mbox_fetch+0xd4>
        tick = 1;
  10af18:	e3a03001 	mov	r3, #1
  10af1c:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10af20:	e51b300c 	ldr	r3, [fp, #-12]
}
  10af24:	e1a00003 	mov	r0, r3
  10af28:	e24bd004 	sub	sp, fp, #4
  10af2c:	e8bd8800 	pop	{fp, pc}

0010af30 <sys_arch_mbox_tryfetch>:
 * @param timeout maximum time (in milliseconds) to wait for a message
 * @return 0 (milliseconds) if a message has been received
 *         or SYS_MBOX_EMPTY if the mailbox is empty
 */
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
  10af30:	e92d4800 	push	{fp, lr}
  10af34:	e28db004 	add	fp, sp, #4
  10af38:	e24dd010 	sub	sp, sp, #16
  10af3c:	e50b0010 	str	r0, [fp, #-16]
  10af40:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;

    ret = fetch_msg(mbox, msg, 0);
  10af44:	e3a02000 	mov	r2, #0
  10af48:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10af4c:	e51b0010 	ldr	r0, [fp, #-16]
  10af50:	ebffff78 	bl	10ad38 <fetch_msg>
  10af54:	e50b0008 	str	r0, [fp, #-8]
       
    if(ret == -RT_ETIMEOUT)
  10af58:	e51b3008 	ldr	r3, [fp, #-8]
  10af5c:	e3730002 	cmn	r3, #2
  10af60:	1a000001 	bne	10af6c <sys_arch_mbox_tryfetch+0x3c>
        return SYS_ARCH_TIMEOUT;
  10af64:	e3e03000 	mvn	r3, #0
  10af68:	ea000005 	b	10af84 <sys_arch_mbox_tryfetch+0x54>
    else
    {
        if (ret == RT_EOK)
  10af6c:	e51b3008 	ldr	r3, [fp, #-8]
  10af70:	e3530000 	cmp	r3, #0
  10af74:	1a000001 	bne	10af80 <sys_arch_mbox_tryfetch+0x50>
            ret = 1;
  10af78:	e3a03001 	mov	r3, #1
  10af7c:	e50b3008 	str	r3, [fp, #-8]
    }

    return ret;
  10af80:	e51b3008 	ldr	r3, [fp, #-8]
}
  10af84:	e1a00003 	mov	r0, r3
  10af88:	e24bd004 	sub	sp, fp, #4
  10af8c:	e8bd8800 	pop	{fp, pc}

0010af90 <sys_mbox_valid>:
#ifndef sys_mbox_valid
/** Check if an mbox is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mbox_valid(sys_mbox_t *mbox)
{
  10af90:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10af94:	e28db000 	add	fp, sp, #0
  10af98:	e24dd00c 	sub	sp, sp, #12
  10af9c:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mbox);
  10afa0:	e51b3008 	ldr	r3, [fp, #-8]
  10afa4:	e5933000 	ldr	r3, [r3]
}
  10afa8:	e1a00003 	mov	r0, r3
  10afac:	e28bd000 	add	sp, fp, #0
  10afb0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10afb4:	e12fff1e 	bx	lr

0010afb8 <sys_mbox_set_invalid>:

#ifndef sys_mbox_set_invalid
/** Set an mbox invalid so that sys_mbox_valid returns 0
 */
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
  10afb8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10afbc:	e28db000 	add	fp, sp, #0
  10afc0:	e24dd00c 	sub	sp, sp, #12
  10afc4:	e50b0008 	str	r0, [fp, #-8]
    *mbox = RT_NULL;
  10afc8:	e51b3008 	ldr	r3, [fp, #-8]
  10afcc:	e3a02000 	mov	r2, #0
  10afd0:	e5832000 	str	r2, [r3]
}
  10afd4:	e320f000 	nop	{0}
  10afd8:	e28bd000 	add	sp, fp, #0
  10afdc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10afe0:	e12fff1e 	bx	lr

0010afe4 <sys_thread_new>:
sys_thread_t sys_thread_new(const char    *name,
                            lwip_thread_fn thread,
                            void          *arg,
                            int            stacksize,
                            int            prio)
{
  10afe4:	e92d4800 	push	{fp, lr}
  10afe8:	e28db004 	add	fp, sp, #4
  10afec:	e24dd020 	sub	sp, sp, #32
  10aff0:	e50b0010 	str	r0, [fp, #-16]
  10aff4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10aff8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10affc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    rt_thread_t t;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* create thread */
    t = rt_thread_create(name, thread, arg, stacksize, prio, 20);
  10b000:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10b004:	e59b3004 	ldr	r3, [fp, #4]
  10b008:	e6ef3073 	uxtb	r3, r3
  10b00c:	e3a02014 	mov	r2, #20
  10b010:	e58d2004 	str	r2, [sp, #4]
  10b014:	e58d3000 	str	r3, [sp]
  10b018:	e1a03001 	mov	r3, r1
  10b01c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10b020:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10b024:	e51b0010 	ldr	r0, [fp, #-16]
  10b028:	ebffdc31 	bl	1020f4 <rt_thread_create>
  10b02c:	e50b0008 	str	r0, [fp, #-8]
    
    RT_ASSERT(t != RT_NULL);
  10b030:	e51b3008 	ldr	r3, [fp, #-8]
  10b034:	e3530000 	cmp	r3, #0
  10b038:	1a000005 	bne	10b054 <sys_thread_new+0x70>
  10b03c:	e3002265 	movw	r2, #613	; 0x265
  10b040:	e3061320 	movw	r1, #25376	; 0x6320
  10b044:	e3401014 	movt	r1, #20
  10b048:	e30602f4 	movw	r0, #25332	; 0x62f4
  10b04c:	e3400014 	movt	r0, #20
  10b050:	ebffe150 	bl	103598 <rt_assert_handler>

    /* startup thread */
    rt_thread_startup(t);
  10b054:	e51b0008 	ldr	r0, [fp, #-8]
  10b058:	ebffdc5a 	bl	1021c8 <rt_thread_startup>

    return t;
  10b05c:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b060:	e1a00003 	mov	r0, r3
  10b064:	e24bd004 	sub	sp, fp, #4
  10b068:	e8bd8800 	pop	{fp, pc}

0010b06c <sys_arch_protect>:

sys_prot_t sys_arch_protect(void)
{
  10b06c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b070:	e28db000 	add	fp, sp, #0
  10b074:	e24dd00c 	sub	sp, sp, #12
    //rt_base_t level;
    rt_base_t level = 0;
  10b078:	e3a03000 	mov	r3, #0
  10b07c:	e50b3008 	str	r3, [fp, #-8]

    /* disable interrupt */
    //level = rt_hw_interrupt_disable();

    return level;
  10b080:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b084:	e1a00003 	mov	r0, r3
  10b088:	e28bd000 	add	sp, fp, #0
  10b08c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b090:	e12fff1e 	bx	lr

0010b094 <sys_arch_unprotect>:

void sys_arch_unprotect(sys_prot_t pval)
{
  10b094:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b098:	e28db000 	add	fp, sp, #0
  10b09c:	e24dd00c 	sub	sp, sp, #12
  10b0a0:	e50b0008 	str	r0, [fp, #-8]
    /* enable interrupt */
    //rt_hw_interrupt_enable(pval);

    return;
  10b0a4:	e320f000 	nop	{0}
}
  10b0a8:	e28bd000 	add	sp, fp, #0
  10b0ac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b0b0:	e12fff1e 	bx	lr

0010b0b4 <sys_arch_assert>:

void sys_arch_assert(const char *file, int line)
{
  10b0b4:	e92d4800 	push	{fp, lr}
  10b0b8:	e28db004 	add	fp, sp, #4
  10b0bc:	e24dd008 	sub	sp, sp, #8
  10b0c0:	e50b0008 	str	r0, [fp, #-8]
  10b0c4:	e50b100c 	str	r1, [fp, #-12]
    rt_kprintf("\nAssertion: %d in %s\n", line, file);
  10b0c8:	e51b2008 	ldr	r2, [fp, #-8]
  10b0cc:	e51b100c 	ldr	r1, [fp, #-12]
  10b0d0:	e3060304 	movw	r0, #25348	; 0x6304
  10b0d4:	e3400014 	movt	r0, #20
  10b0d8:	ebffe00d 	bl	103114 <rt_kprintf>
    RT_ASSERT(0);
  10b0dc:	e3002283 	movw	r2, #643	; 0x283
  10b0e0:	e3061330 	movw	r1, #25392	; 0x6330
  10b0e4:	e3401014 	movt	r1, #20
  10b0e8:	e306031c 	movw	r0, #25372	; 0x631c
  10b0ec:	e3400014 	movt	r0, #20
  10b0f0:	ebffe128 	bl	103598 <rt_assert_handler>
}
  10b0f4:	e320f000 	nop	{0}
  10b0f8:	e24bd004 	sub	sp, fp, #4
  10b0fc:	e8bd8800 	pop	{fp, pc}

0010b100 <sys_jiffies>:

u32_t sys_jiffies(void)
{
  10b100:	e92d4800 	push	{fp, lr}
  10b104:	e28db004 	add	fp, sp, #4
    return rt_tick_get();
  10b108:	ebffdb54 	bl	101e60 <rt_tick_get>
  10b10c:	e1a03000 	mov	r3, r0
}
  10b110:	e1a00003 	mov	r0, r3
  10b114:	e8bd8800 	pop	{fp, pc}

0010b118 <sys_now>:

u32_t sys_now(void)
{
  10b118:	e92d4800 	push	{fp, lr}
  10b11c:	e28db004 	add	fp, sp, #4
    return rt_tick_get() * (1000 / RT_TICK_PER_SECOND);
  10b120:	ebffdb4e 	bl	101e60 <rt_tick_get>
  10b124:	e1a03000 	mov	r3, r0
}
  10b128:	e1a00003 	mov	r0, r3
  10b12c:	e8bd8800 	pop	{fp, pc}

0010b130 <mem_init>:


RT_WEAK
void mem_init(void)
{
  10b130:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b134:	e28db000 	add	fp, sp, #0
}
  10b138:	e320f000 	nop	{0}
  10b13c:	e28bd000 	add	sp, fp, #0
  10b140:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b144:	e12fff1e 	bx	lr

0010b148 <mem_calloc>:

void *mem_calloc(mem_size_t count, mem_size_t size)
{
  10b148:	e92d4800 	push	{fp, lr}
  10b14c:	e28db004 	add	fp, sp, #4
  10b150:	e24dd008 	sub	sp, sp, #8
  10b154:	e1a03000 	mov	r3, r0
  10b158:	e1a02001 	mov	r2, r1
  10b15c:	e14b30b6 	strh	r3, [fp, #-6]
  10b160:	e1a03002 	mov	r3, r2
  10b164:	e14b30b8 	strh	r3, [fp, #-8]
    return rt_calloc(count, size);
  10b168:	e15b30b6 	ldrh	r3, [fp, #-6]
  10b16c:	e15b20b8 	ldrh	r2, [fp, #-8]
  10b170:	e1a01002 	mov	r1, r2
  10b174:	e1a00003 	mov	r0, r3
  10b178:	ebffdfa3 	bl	10300c <rt_calloc>
  10b17c:	e1a03000 	mov	r3, r0
}
  10b180:	e1a00003 	mov	r0, r3
  10b184:	e24bd004 	sub	sp, fp, #4
  10b188:	e8bd8800 	pop	{fp, pc}

0010b18c <mem_trim>:

void *mem_trim(void *mem, mem_size_t size)
{
  10b18c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b190:	e28db000 	add	fp, sp, #0
  10b194:	e24dd00c 	sub	sp, sp, #12
  10b198:	e50b0008 	str	r0, [fp, #-8]
  10b19c:	e1a03001 	mov	r3, r1
  10b1a0:	e14b30ba 	strh	r3, [fp, #-10]
    /* not support trim yet */
    return mem;
  10b1a4:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b1a8:	e1a00003 	mov	r0, r3
  10b1ac:	e28bd000 	add	sp, fp, #0
  10b1b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b1b4:	e12fff1e 	bx	lr

0010b1b8 <mem_malloc>:

void *mem_malloc(mem_size_t size)
{
  10b1b8:	e92d4800 	push	{fp, lr}
  10b1bc:	e28db004 	add	fp, sp, #4
  10b1c0:	e24dd008 	sub	sp, sp, #8
  10b1c4:	e1a03000 	mov	r3, r0
  10b1c8:	e14b30b6 	strh	r3, [fp, #-6]
    return rt_malloc(size);
  10b1cc:	e15b30b6 	ldrh	r3, [fp, #-6]
  10b1d0:	e1a00003 	mov	r0, r3
  10b1d4:	ebffdf6e 	bl	102f94 <rt_malloc>
  10b1d8:	e1a03000 	mov	r3, r0
}
  10b1dc:	e1a00003 	mov	r0, r3
  10b1e0:	e24bd004 	sub	sp, fp, #4
  10b1e4:	e8bd8800 	pop	{fp, pc}

0010b1e8 <mem_free>:

void  mem_free(void *mem)
{
  10b1e8:	e92d4800 	push	{fp, lr}
  10b1ec:	e28db004 	add	fp, sp, #4
  10b1f0:	e24dd008 	sub	sp, sp, #8
  10b1f4:	e50b0008 	str	r0, [fp, #-8]
    rt_free(mem);
  10b1f8:	e51b0008 	ldr	r0, [fp, #-8]
  10b1fc:	ebffdf6e 	bl	102fbc <rt_free>
}
  10b200:	e320f000 	nop	{0}
  10b204:	e24bd004 	sub	sp, fp, #4
  10b208:	e8bd8800 	pop	{fp, pc}

0010b20c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
  10b20c:	e92d4800 	push	{fp, lr}
  10b210:	e28db004 	add	fp, sp, #4
  10b214:	e24dd010 	sub	sp, sp, #16
  10b218:	e50b0010 	str	r0, [fp, #-16]
  10b21c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
  10b220:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b224:	e5933000 	ldr	r3, [r3]
  10b228:	e2833010 	add	r3, r3, #16
  10b22c:	e1a02003 	mov	r2, r3
  10b230:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10b234:	e51b0010 	ldr	r0, [fp, #-16]
  10b238:	eb002c15 	bl	116294 <tcpip_send_msg_wait_sem>
  10b23c:	e1a03000 	mov	r3, r0
  10b240:	e54b3005 	strb	r3, [fp, #-5]
  if (err == ERR_OK) {
  10b244:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b248:	e3530000 	cmp	r3, #0
  10b24c:	1a000002 	bne	10b25c <netconn_apimsg+0x50>
    return apimsg->err;
  10b250:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b254:	e1d330d4 	ldrsb	r3, [r3, #4]
  10b258:	ea000000 	b	10b260 <netconn_apimsg+0x54>
  }
  return err;
  10b25c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b260:	e1a00003 	mov	r0, r3
  10b264:	e24bd004 	sub	sp, fp, #4
  10b268:	e8bd8800 	pop	{fp, pc}

0010b26c <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
  10b26c:	e92d4800 	push	{fp, lr}
  10b270:	e28db004 	add	fp, sp, #4
  10b274:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b278:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b27c:	e1a03001 	mov	r3, r1
  10b280:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10b284:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
  10b288:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  10b28c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b290:	eb000878 	bl	10d478 <netconn_alloc>
  10b294:	e50b0008 	str	r0, [fp, #-8]
  if (conn != NULL) {
  10b298:	e51b3008 	ldr	r3, [fp, #-8]
  10b29c:	e3530000 	cmp	r3, #0
  10b2a0:	0a00004f 	beq	10b3e4 <netconn_new_with_proto_and_callback+0x178>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
  10b2a4:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10b2a8:	e54b301c 	strb	r3, [fp, #-28]	; 0xffffffe4
    API_MSG_VAR_REF(msg).conn = conn;
  10b2ac:	e51b3008 	ldr	r3, [fp, #-8]
  10b2b0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
  10b2b4:	e24b3024 	sub	r3, fp, #36	; 0x24
  10b2b8:	e1a01003 	mov	r1, r3
  10b2bc:	e30d03ec 	movw	r0, #54252	; 0xd3ec
  10b2c0:	e3400010 	movt	r0, #16
  10b2c4:	ebffffd0 	bl	10b20c <netconn_apimsg>
  10b2c8:	e1a03000 	mov	r3, r0
  10b2cc:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10b2d0:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10b2d4:	e3530000 	cmp	r3, #0
  10b2d8:	0a000041 	beq	10b3e4 <netconn_new_with_proto_and_callback+0x178>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
  10b2dc:	e51b3008 	ldr	r3, [fp, #-8]
  10b2e0:	e5933008 	ldr	r3, [r3, #8]
  10b2e4:	e3530000 	cmp	r3, #0
  10b2e8:	0a000006 	beq	10b308 <netconn_new_with_proto_and_callback+0x9c>
  10b2ec:	e3060340 	movw	r0, #25408	; 0x6340
  10b2f0:	e3400014 	movt	r0, #20
  10b2f4:	ebffdf86 	bl	103114 <rt_kprintf>
  10b2f8:	e3a01089 	mov	r1, #137	; 0x89
  10b2fc:	e3060364 	movw	r0, #25444	; 0x6364
  10b300:	e3400014 	movt	r0, #20
  10b304:	ebffff6a 	bl	10b0b4 <sys_arch_assert>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
  10b308:	e51b3008 	ldr	r3, [fp, #-8]
  10b30c:	e2833014 	add	r3, r3, #20
  10b310:	e1a00003 	mov	r0, r3
  10b314:	ebffff1d 	bl	10af90 <sys_mbox_valid>
  10b318:	e1a03000 	mov	r3, r0
  10b31c:	e3530000 	cmp	r3, #0
  10b320:	1a000006 	bne	10b340 <netconn_new_with_proto_and_callback+0xd4>
  10b324:	e3060394 	movw	r0, #25492	; 0x6394
  10b328:	e3400014 	movt	r0, #20
  10b32c:	ebffdf78 	bl	103114 <rt_kprintf>
  10b330:	e3a0108a 	mov	r1, #138	; 0x8a
  10b334:	e3060364 	movw	r0, #25444	; 0x6364
  10b338:	e3400014 	movt	r0, #20
  10b33c:	ebffff5c 	bl	10b0b4 <sys_arch_assert>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
  10b340:	e51b3008 	ldr	r3, [fp, #-8]
  10b344:	e2833018 	add	r3, r3, #24
  10b348:	e1a00003 	mov	r0, r3
  10b34c:	ebffff0f 	bl	10af90 <sys_mbox_valid>
  10b350:	e1a03000 	mov	r3, r0
  10b354:	e3530000 	cmp	r3, #0
  10b358:	0a000006 	beq	10b378 <netconn_new_with_proto_and_callback+0x10c>
  10b35c:	e30603ac 	movw	r0, #25516	; 0x63ac
  10b360:	e3400014 	movt	r0, #20
  10b364:	ebffdf6a 	bl	103114 <rt_kprintf>
  10b368:	e3a0108c 	mov	r1, #140	; 0x8c
  10b36c:	e3060364 	movw	r0, #25444	; 0x6364
  10b370:	e3400014 	movt	r0, #20
  10b374:	ebffff4e 	bl	10b0b4 <sys_arch_assert>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
  10b378:	e51b3008 	ldr	r3, [fp, #-8]
  10b37c:	e2833010 	add	r3, r3, #16
  10b380:	e1a00003 	mov	r0, r3
  10b384:	ebfffd91 	bl	10a9d0 <sys_sem_valid>
  10b388:	e1a03000 	mov	r3, r0
  10b38c:	e3530000 	cmp	r3, #0
  10b390:	1a000006 	bne	10b3b0 <netconn_new_with_proto_and_callback+0x144>
  10b394:	e30603d0 	movw	r0, #25552	; 0x63d0
  10b398:	e3400014 	movt	r0, #20
  10b39c:	ebffdf5c 	bl	103114 <rt_kprintf>
  10b3a0:	e3a0108f 	mov	r1, #143	; 0x8f
  10b3a4:	e3060364 	movw	r0, #25444	; 0x6364
  10b3a8:	e3400014 	movt	r0, #20
  10b3ac:	ebffff40 	bl	10b0b4 <sys_arch_assert>
      sys_sem_free(&conn->op_completed);
  10b3b0:	e51b3008 	ldr	r3, [fp, #-8]
  10b3b4:	e2833010 	add	r3, r3, #16
  10b3b8:	e1a00003 	mov	r0, r3
  10b3bc:	ebfffd3a 	bl	10a8ac <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
  10b3c0:	e51b3008 	ldr	r3, [fp, #-8]
  10b3c4:	e2833014 	add	r3, r3, #20
  10b3c8:	e1a00003 	mov	r0, r3
  10b3cc:	ebfffe28 	bl	10ac74 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
  10b3d0:	e51b1008 	ldr	r1, [fp, #-8]
  10b3d4:	e3a00008 	mov	r0, #8
  10b3d8:	eb003797 	bl	11923c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
  10b3dc:	e3a03000 	mov	r3, #0
  10b3e0:	ea000000 	b	10b3e8 <netconn_new_with_proto_and_callback+0x17c>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
  10b3e4:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b3e8:	e1a00003 	mov	r0, r3
  10b3ec:	e24bd004 	sub	sp, fp, #4
  10b3f0:	e8bd8800 	pop	{fp, pc}

0010b3f4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
  10b3f4:	e92d4800 	push	{fp, lr}
  10b3f8:	e28db004 	add	fp, sp, #4
  10b3fc:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b400:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
  10b404:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b408:	e3530000 	cmp	r3, #0
  10b40c:	1a000001 	bne	10b418 <netconn_delete+0x24>
    return ERR_OK;
  10b410:	e3a03000 	mov	r3, #0
  10b414:	ea000013 	b	10b468 <netconn_delete+0x74>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b418:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b41c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10b420:	ebffff3c 	bl	10b118 <sys_now>
  10b424:	e1a03000 	mov	r3, r0
  10b428:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
  10b42c:	e24b3020 	sub	r3, fp, #32
  10b430:	e1a01003 	mov	r1, r3
  10b434:	e30d0e14 	movw	r0, #56852	; 0xde14
  10b438:	e3400010 	movt	r0, #16
  10b43c:	ebffff72 	bl	10b20c <netconn_apimsg>
  10b440:	e1a03000 	mov	r3, r0
  10b444:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
  10b448:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b44c:	e3530000 	cmp	r3, #0
  10b450:	0a000001 	beq	10b45c <netconn_delete+0x68>
    return err;
  10b454:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b458:	ea000002 	b	10b468 <netconn_delete+0x74>
  }

  netconn_free(conn);
  10b45c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b460:	eb000878 	bl	10d648 <netconn_free>

  return ERR_OK;
  10b464:	e3a03000 	mov	r3, #0
}
  10b468:	e1a00003 	mov	r0, r3
  10b46c:	e24bd004 	sub	sp, fp, #4
  10b470:	e8bd8800 	pop	{fp, pc}

0010b474 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
  10b474:	e92d4800 	push	{fp, lr}
  10b478:	e28db004 	add	fp, sp, #4
  10b47c:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b480:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b484:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b488:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10b48c:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
  10b490:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b494:	e3530000 	cmp	r3, #0
  10b498:	1a000008 	bne	10b4c0 <netconn_getaddr+0x4c>
  10b49c:	e30603ec 	movw	r0, #25580	; 0x63ec
  10b4a0:	e3400014 	movt	r0, #20
  10b4a4:	ebffdf1a 	bl	103114 <rt_kprintf>
  10b4a8:	e3a010d9 	mov	r1, #217	; 0xd9
  10b4ac:	e3060364 	movw	r0, #25444	; 0x6364
  10b4b0:	e3400014 	movt	r0, #20
  10b4b4:	ebfffefe 	bl	10b0b4 <sys_arch_assert>
  10b4b8:	e3e0300f 	mvn	r3, #15
  10b4bc:	ea000027 	b	10b560 <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
  10b4c0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b4c4:	e3530000 	cmp	r3, #0
  10b4c8:	1a000008 	bne	10b4f0 <netconn_getaddr+0x7c>
  10b4cc:	e306040c 	movw	r0, #25612	; 0x640c
  10b4d0:	e3400014 	movt	r0, #20
  10b4d4:	ebffdf0e 	bl	103114 <rt_kprintf>
  10b4d8:	e3a010da 	mov	r1, #218	; 0xda
  10b4dc:	e3060364 	movw	r0, #25444	; 0x6364
  10b4e0:	e3400014 	movt	r0, #20
  10b4e4:	ebfffef2 	bl	10b0b4 <sys_arch_assert>
  10b4e8:	e3e0300f 	mvn	r3, #15
  10b4ec:	ea00001b 	b	10b560 <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
  10b4f0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b4f4:	e3530000 	cmp	r3, #0
  10b4f8:	1a000008 	bne	10b520 <netconn_getaddr+0xac>
  10b4fc:	e306042c 	movw	r0, #25644	; 0x642c
  10b500:	e3400014 	movt	r0, #20
  10b504:	ebffdf02 	bl	103114 <rt_kprintf>
  10b508:	e3a010db 	mov	r1, #219	; 0xdb
  10b50c:	e3060364 	movw	r0, #25444	; 0x6364
  10b510:	e3400014 	movt	r0, #20
  10b514:	ebfffee6 	bl	10b0b4 <sys_arch_assert>
  10b518:	e3e0300f 	mvn	r3, #15
  10b51c:	ea00000f 	b	10b560 <netconn_getaddr+0xec>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b520:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b524:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.ad.local = local;
  10b528:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10b52c:	e54b3010 	strb	r3, [fp, #-16]
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
  10b530:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b534:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg.ad.port = port;
  10b538:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b53c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
  10b540:	e24b3020 	sub	r3, fp, #32
  10b544:	e1a01003 	mov	r1, r3
  10b548:	e30f0734 	movw	r0, #63284	; 0xf734
  10b54c:	e3400010 	movt	r0, #16
  10b550:	ebffff2d 	bl	10b20c <netconn_apimsg>
  10b554:	e1a03000 	mov	r3, r0
  10b558:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
  10b55c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b560:	e1a00003 	mov	r0, r3
  10b564:	e24bd004 	sub	sp, fp, #4
  10b568:	e8bd8800 	pop	{fp, pc}

0010b56c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b56c:	e92d4800 	push	{fp, lr}
  10b570:	e28db004 	add	fp, sp, #4
  10b574:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b578:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b57c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b580:	e1a03002 	mov	r3, r2
  10b584:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
  10b588:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b58c:	e3530000 	cmp	r3, #0
  10b590:	1a000008 	bne	10b5b8 <netconn_bind+0x4c>
  10b594:	e306044c 	movw	r0, #25676	; 0x644c
  10b598:	e3400014 	movt	r0, #20
  10b59c:	ebffdedc 	bl	103114 <rt_kprintf>
  10b5a0:	e3a010ff 	mov	r1, #255	; 0xff
  10b5a4:	e3060364 	movw	r0, #25444	; 0x6364
  10b5a8:	e3400014 	movt	r0, #20
  10b5ac:	ebfffec0 	bl	10b0b4 <sys_arch_assert>
  10b5b0:	e3e0300f 	mvn	r3, #15
  10b5b4:	ea000013 	b	10b608 <netconn_bind+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b5b8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b5bc:	e3530000 	cmp	r3, #0
  10b5c0:	1a000002 	bne	10b5d0 <netconn_bind+0x64>
    addr = IP4_ADDR_ANY;
  10b5c4:	e30938d0 	movw	r3, #39120	; 0x98d0
  10b5c8:	e3403014 	movt	r3, #20
  10b5cc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b5d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b5d4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b5d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b5dc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b5e0:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b5e4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
  10b5e8:	e24b3020 	sub	r3, fp, #32
  10b5ec:	e1a01003 	mov	r1, r3
  10b5f0:	e30e01c0 	movw	r0, #57792	; 0xe1c0
  10b5f4:	e3400010 	movt	r0, #16
  10b5f8:	ebffff03 	bl	10b20c <netconn_apimsg>
  10b5fc:	e1a03000 	mov	r3, r0
  10b600:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b604:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b608:	e1a00003 	mov	r0, r3
  10b60c:	e24bd004 	sub	sp, fp, #4
  10b610:	e8bd8800 	pop	{fp, pc}

0010b614 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b614:	e92d4800 	push	{fp, lr}
  10b618:	e28db004 	add	fp, sp, #4
  10b61c:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b620:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b624:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b628:	e1a03002 	mov	r3, r2
  10b62c:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b630:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b634:	e3530000 	cmp	r3, #0
  10b638:	1a000008 	bne	10b660 <netconn_connect+0x4c>
  10b63c:	e3060468 	movw	r0, #25704	; 0x6468
  10b640:	e3400014 	movt	r0, #20
  10b644:	ebffdeb2 	bl	103114 <rt_kprintf>
  10b648:	e300112b 	movw	r1, #299	; 0x12b
  10b64c:	e3060364 	movw	r0, #25444	; 0x6364
  10b650:	e3400014 	movt	r0, #20
  10b654:	ebfffe96 	bl	10b0b4 <sys_arch_assert>
  10b658:	e3e0300f 	mvn	r3, #15
  10b65c:	ea000013 	b	10b6b0 <netconn_connect+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b660:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b664:	e3530000 	cmp	r3, #0
  10b668:	1a000002 	bne	10b678 <netconn_connect+0x64>
    addr = IP4_ADDR_ANY;
  10b66c:	e30938d0 	movw	r3, #39120	; 0x98d0
  10b670:	e3403014 	movt	r3, #20
  10b674:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b678:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b67c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b680:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b684:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b688:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b68c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
  10b690:	e24b3020 	sub	r3, fp, #32
  10b694:	e1a01003 	mov	r1, r3
  10b698:	e30e0564 	movw	r0, #58724	; 0xe564
  10b69c:	e3400010 	movt	r0, #16
  10b6a0:	ebfffed9 	bl	10b20c <netconn_apimsg>
  10b6a4:	e1a03000 	mov	r3, r0
  10b6a8:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b6ac:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b6b0:	e1a00003 	mov	r0, r3
  10b6b4:	e24bd004 	sub	sp, fp, #4
  10b6b8:	e8bd8800 	pop	{fp, pc}

0010b6bc <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
  10b6bc:	e92d4800 	push	{fp, lr}
  10b6c0:	e28db004 	add	fp, sp, #4
  10b6c4:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b6c8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b6cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b6d0:	e3530000 	cmp	r3, #0
  10b6d4:	1a000008 	bne	10b6fc <netconn_disconnect+0x40>
  10b6d8:	e3060488 	movw	r0, #25736	; 0x6488
  10b6dc:	e3400014 	movt	r0, #20
  10b6e0:	ebffde8b 	bl	103114 <rt_kprintf>
  10b6e4:	e300114b 	movw	r1, #331	; 0x14b
  10b6e8:	e3060364 	movw	r0, #25444	; 0x6364
  10b6ec:	e3400014 	movt	r0, #20
  10b6f0:	ebfffe6f 	bl	10b0b4 <sys_arch_assert>
  10b6f4:	e3e0300f 	mvn	r3, #15
  10b6f8:	ea000009 	b	10b724 <netconn_disconnect+0x68>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b6fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b700:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
  10b704:	e24b3020 	sub	r3, fp, #32
  10b708:	e1a01003 	mov	r1, r3
  10b70c:	e30e089c 	movw	r0, #59548	; 0xe89c
  10b710:	e3400010 	movt	r0, #16
  10b714:	ebfffebc 	bl	10b20c <netconn_apimsg>
  10b718:	e1a03000 	mov	r3, r0
  10b71c:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b720:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b724:	e1a00003 	mov	r0, r3
  10b728:	e24bd004 	sub	sp, fp, #4
  10b72c:	e8bd8800 	pop	{fp, pc}

0010b730 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
  10b730:	e92d4800 	push	{fp, lr}
  10b734:	e28db004 	add	fp, sp, #4
  10b738:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b73c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b740:	e1a03001 	mov	r3, r1
  10b744:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
  10b748:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b74c:	e3530000 	cmp	r3, #0
  10b750:	1a000008 	bne	10b778 <netconn_listen_with_backlog+0x48>
  10b754:	e30604ac 	movw	r0, #25772	; 0x64ac
  10b758:	e3400014 	movt	r0, #20
  10b75c:	ebffde6c 	bl	103114 <rt_kprintf>
  10b760:	e3a01f5a 	mov	r1, #360	; 0x168
  10b764:	e3060364 	movw	r0, #25444	; 0x6364
  10b768:	e3400014 	movt	r0, #20
  10b76c:	ebfffe50 	bl	10b0b4 <sys_arch_assert>
  10b770:	e3e0300f 	mvn	r3, #15
  10b774:	ea000009 	b	10b7a0 <netconn_listen_with_backlog+0x70>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b778:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b77c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
  10b780:	e24b3020 	sub	r3, fp, #32
  10b784:	e1a01003 	mov	r1, r3
  10b788:	e30e0948 	movw	r0, #59720	; 0xe948
  10b78c:	e3400010 	movt	r0, #16
  10b790:	ebfffe9d 	bl	10b20c <netconn_apimsg>
  10b794:	e1a03000 	mov	r3, r0
  10b798:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b79c:	e15b30d5 	ldrsb	r3, [fp, #-5]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10b7a0:	e1a00003 	mov	r0, r3
  10b7a4:	e24bd004 	sub	sp, fp, #4
  10b7a8:	e8bd8800 	pop	{fp, pc}

0010b7ac <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
  10b7ac:	e92d4800 	push	{fp, lr}
  10b7b0:	e28db004 	add	fp, sp, #4
  10b7b4:	e24dd010 	sub	sp, sp, #16
  10b7b8:	e50b0010 	str	r0, [fp, #-16]
  10b7bc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
  10b7c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b7c4:	e3530000 	cmp	r3, #0
  10b7c8:	1a000008 	bne	10b7f0 <netconn_accept+0x44>
  10b7cc:	e30604cc 	movw	r0, #25804	; 0x64cc
  10b7d0:	e3400014 	movt	r0, #20
  10b7d4:	ebffde4e 	bl	103114 <rt_kprintf>
  10b7d8:	e300118d 	movw	r1, #397	; 0x18d
  10b7dc:	e3060364 	movw	r0, #25444	; 0x6364
  10b7e0:	e3400014 	movt	r0, #20
  10b7e4:	ebfffe32 	bl	10b0b4 <sys_arch_assert>
  10b7e8:	e3e0300f 	mvn	r3, #15
  10b7ec:	ea000053 	b	10b940 <netconn_accept+0x194>
  *new_conn = NULL;
  10b7f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b7f4:	e3a02000 	mov	r2, #0
  10b7f8:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
  10b7fc:	e51b3010 	ldr	r3, [fp, #-16]
  10b800:	e3530000 	cmp	r3, #0
  10b804:	1a000008 	bne	10b82c <netconn_accept+0x80>
  10b808:	e30604ec 	movw	r0, #25836	; 0x64ec
  10b80c:	e3400014 	movt	r0, #20
  10b810:	ebffde3f 	bl	103114 <rt_kprintf>
  10b814:	e300118f 	movw	r1, #399	; 0x18f
  10b818:	e3060364 	movw	r0, #25444	; 0x6364
  10b81c:	e3400014 	movt	r0, #20
  10b820:	ebfffe23 	bl	10b0b4 <sys_arch_assert>
  10b824:	e3e0300f 	mvn	r3, #15
  10b828:	ea000044 	b	10b940 <netconn_accept+0x194>

  if (ERR_IS_FATAL(conn->last_err)) {
  10b82c:	e51b3010 	ldr	r3, [fp, #-16]
  10b830:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b834:	e373000c 	cmn	r3, #12
  10b838:	aa000002 	bge	10b848 <netconn_accept+0x9c>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
  10b83c:	e51b3010 	ldr	r3, [fp, #-16]
  10b840:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b844:	ea00003d 	b	10b940 <netconn_accept+0x194>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10b848:	e51b3010 	ldr	r3, [fp, #-16]
  10b84c:	e2833018 	add	r3, r3, #24
  10b850:	e1a00003 	mov	r0, r3
  10b854:	ebfffdcd 	bl	10af90 <sys_mbox_valid>
  10b858:	e1a03000 	mov	r3, r0
  10b85c:	e3530000 	cmp	r3, #0
  10b860:	1a000001 	bne	10b86c <netconn_accept+0xc0>
    return ERR_CLSD;
  10b864:	e3e0300e 	mvn	r3, #14
  10b868:	ea000034 	b	10b940 <netconn_accept+0x194>
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_ALLOC(msg);
#endif /* TCP_LISTEN_BACKLOG */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10b86c:	e51b3010 	ldr	r3, [fp, #-16]
  10b870:	e2830018 	add	r0, r3, #24
  10b874:	e51b3010 	ldr	r3, [fp, #-16]
  10b878:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10b87c:	e1a02003 	mov	r2, r3
  10b880:	e24b300c 	sub	r3, fp, #12
  10b884:	e1a01003 	mov	r1, r3
  10b888:	ebfffd6f 	bl	10ae4c <sys_arch_mbox_fetch>
  10b88c:	e1a03000 	mov	r3, r0
  10b890:	e3730001 	cmn	r3, #1
  10b894:	1a000001 	bne	10b8a0 <netconn_accept+0xf4>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  10b898:	e3e03002 	mvn	r3, #2
  10b89c:	ea000027 	b	10b940 <netconn_accept+0x194>
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
  10b8a0:	e51b300c 	ldr	r3, [fp, #-12]
  10b8a4:	e50b3008 	str	r3, [fp, #-8]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10b8a8:	e51b3010 	ldr	r3, [fp, #-16]
  10b8ac:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b8b0:	e3530000 	cmp	r3, #0
  10b8b4:	0a000005 	beq	10b8d0 <netconn_accept+0x124>
  10b8b8:	e51b3010 	ldr	r3, [fp, #-16]
  10b8bc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b8c0:	e3a02000 	mov	r2, #0
  10b8c4:	e3a01001 	mov	r1, #1
  10b8c8:	e51b0010 	ldr	r0, [fp, #-16]
  10b8cc:	e12fff33 	blx	r3

  if (accept_ptr == &netconn_aborted) {
  10b8d0:	e51b200c 	ldr	r2, [fp, #-12]
  10b8d4:	e30f35a4 	movw	r3, #62884	; 0xf5a4
  10b8d8:	e3403014 	movt	r3, #20
  10b8dc:	e1520003 	cmp	r2, r3
  10b8e0:	1a000001 	bne	10b8ec <netconn_accept+0x140>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
  10b8e4:	e3e0300c 	mvn	r3, #12
  10b8e8:	ea000014 	b	10b940 <netconn_accept+0x194>
  }
  if (newconn == NULL) {
  10b8ec:	e51b3008 	ldr	r3, [fp, #-8]
  10b8f0:	e3530000 	cmp	r3, #0
  10b8f4:	1a00000d 	bne	10b930 <netconn_accept+0x184>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
  10b8f8:	e51b3010 	ldr	r3, [fp, #-16]
  10b8fc:	e3530000 	cmp	r3, #0
  10b900:	0a000008 	beq	10b928 <netconn_accept+0x17c>
  10b904:	ebffda4c 	bl	10223c <rt_enter_critical>
  10b908:	e51b3010 	ldr	r3, [fp, #-16]
  10b90c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b910:	e373000c 	cmn	r3, #12
  10b914:	ba000002 	blt	10b924 <netconn_accept+0x178>
  10b918:	e51b3010 	ldr	r3, [fp, #-16]
  10b91c:	e3e0200e 	mvn	r2, #14
  10b920:	e5c3200c 	strb	r2, [r3, #12]
  10b924:	ebffda4a 	bl	102254 <rt_exit_critical>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
  10b928:	e3e0300e 	mvn	r3, #14
  10b92c:	ea000003 	b	10b940 <netconn_accept+0x194>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
  10b930:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b934:	e51b2008 	ldr	r2, [fp, #-8]
  10b938:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10b93c:	e3a03000 	mov	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10b940:	e1a00003 	mov	r0, r3
  10b944:	e24bd004 	sub	sp, fp, #4
  10b948:	e8bd8800 	pop	{fp, pc}

0010b94c <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
  10b94c:	e92d4800 	push	{fp, lr}
  10b950:	e28db004 	add	fp, sp, #4
  10b954:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b958:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b95c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  void *buf = NULL;
  10b960:	e3a03000 	mov	r3, #0
  10b964:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10b968:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b96c:	e3530000 	cmp	r3, #0
  10b970:	1a000008 	bne	10b998 <netconn_recv_data+0x4c>
  10b974:	e306050c 	movw	r0, #25868	; 0x650c
  10b978:	e3400014 	movt	r0, #20
  10b97c:	ebffdde4 	bl	103114 <rt_kprintf>
  10b980:	e30011e7 	movw	r1, #487	; 0x1e7
  10b984:	e3060364 	movw	r0, #25444	; 0x6364
  10b988:	e3400014 	movt	r0, #20
  10b98c:	ebfffdc8 	bl	10b0b4 <sys_arch_assert>
  10b990:	e3e0300f 	mvn	r3, #15
  10b994:	ea0000a5 	b	10bc30 <netconn_recv_data+0x2e4>
  *new_buf = NULL;
  10b998:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b99c:	e3a02000 	mov	r2, #0
  10b9a0:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10b9a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b9a8:	e3530000 	cmp	r3, #0
  10b9ac:	1a000008 	bne	10b9d4 <netconn_recv_data+0x88>
  10b9b0:	e306052c 	movw	r0, #25900	; 0x652c
  10b9b4:	e3400014 	movt	r0, #20
  10b9b8:	ebffddd5 	bl	103114 <rt_kprintf>
  10b9bc:	e30011e9 	movw	r1, #489	; 0x1e9
  10b9c0:	e3060364 	movw	r0, #25444	; 0x6364
  10b9c4:	e3400014 	movt	r0, #20
  10b9c8:	ebfffdb9 	bl	10b0b4 <sys_arch_assert>
  10b9cc:	e3e0300f 	mvn	r3, #15
  10b9d0:	ea000096 	b	10bc30 <netconn_recv_data+0x2e4>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10b9d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b9d8:	e5933000 	ldr	r3, [r3]
  10b9dc:	e20330f0 	and	r3, r3, #240	; 0xf0
  10b9e0:	e3530010 	cmp	r3, #16
  10b9e4:	1a000011 	bne	10ba30 <netconn_recv_data+0xe4>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
  10b9e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b9ec:	e2833014 	add	r3, r3, #20
  10b9f0:	e1a00003 	mov	r0, r3
  10b9f4:	ebfffd65 	bl	10af90 <sys_mbox_valid>
  10b9f8:	e1a03000 	mov	r3, r0
  10b9fc:	e3530000 	cmp	r3, #0
  10ba00:	1a00000a 	bne	10ba30 <netconn_recv_data+0xe4>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
  10ba04:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba08:	e2833018 	add	r3, r3, #24
  10ba0c:	e1a00003 	mov	r0, r3
  10ba10:	ebfffd5e 	bl	10af90 <sys_mbox_valid>
  10ba14:	e1a03000 	mov	r3, r0
  10ba18:	e3530000 	cmp	r3, #0
  10ba1c:	0a000001 	beq	10ba28 <netconn_recv_data+0xdc>
  10ba20:	e3e0300a 	mvn	r3, #10
  10ba24:	ea000081 	b	10bc30 <netconn_recv_data+0x2e4>
  10ba28:	e3e0300e 	mvn	r3, #14
  10ba2c:	ea00007f 	b	10bc30 <netconn_recv_data+0x2e4>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
  10ba30:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba34:	e2833014 	add	r3, r3, #20
  10ba38:	e1a00003 	mov	r0, r3
  10ba3c:	ebfffd53 	bl	10af90 <sys_mbox_valid>
  10ba40:	e1a03000 	mov	r3, r0
  10ba44:	e3530000 	cmp	r3, #0
  10ba48:	1a000008 	bne	10ba70 <netconn_recv_data+0x124>
  10ba4c:	e3060548 	movw	r0, #25928	; 0x6548
  10ba50:	e3400014 	movt	r0, #20
  10ba54:	ebffddae 	bl	103114 <rt_kprintf>
  10ba58:	e30011f5 	movw	r1, #501	; 0x1f5
  10ba5c:	e3060364 	movw	r0, #25444	; 0x6364
  10ba60:	e3400014 	movt	r0, #20
  10ba64:	ebfffd92 	bl	10b0b4 <sys_arch_assert>
  10ba68:	e3e0300a 	mvn	r3, #10
  10ba6c:	ea00006f 	b	10bc30 <netconn_recv_data+0x2e4>

  if (ERR_IS_FATAL(conn->last_err)) {
  10ba70:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba74:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ba78:	e373000c 	cmn	r3, #12
  10ba7c:	aa000002 	bge	10ba8c <netconn_recv_data+0x140>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
  10ba80:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba84:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ba88:	ea000068 	b	10bc30 <netconn_recv_data+0x2e4>
    API_MSG_VAR_ALLOC(msg);
  }
#endif /* LWIP_TCP */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10ba8c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba90:	e2830014 	add	r0, r3, #20
  10ba94:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba98:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10ba9c:	e1a02003 	mov	r2, r3
  10baa0:	e24b300c 	sub	r3, fp, #12
  10baa4:	e1a01003 	mov	r1, r3
  10baa8:	ebfffce7 	bl	10ae4c <sys_arch_mbox_fetch>
  10baac:	e1a03000 	mov	r3, r0
  10bab0:	e3730001 	cmn	r3, #1
  10bab4:	1a000001 	bne	10bac0 <netconn_recv_data+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
    {
      API_MSG_VAR_FREE(msg);
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  10bab8:	e3e03002 	mvn	r3, #2
  10babc:	ea00005b 	b	10bc30 <netconn_recv_data+0x2e4>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10bac0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bac4:	e5933000 	ldr	r3, [r3]
  10bac8:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bacc:	e3530010 	cmp	r3, #16
  10bad0:	1a000032 	bne	10bba0 <netconn_recv_data+0x254>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
  10bad4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bad8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (buf != NULL) {
  10badc:	e51b300c 	ldr	r3, [fp, #-12]
  10bae0:	e3530000 	cmp	r3, #0
  10bae4:	0a000003 	beq	10baf8 <netconn_recv_data+0x1ac>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
  10bae8:	e51b300c 	ldr	r3, [fp, #-12]
  10baec:	e1d330b8 	ldrh	r3, [r3, #8]
  10baf0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  10baf4:	ea000001 	b	10bb00 <netconn_recv_data+0x1b4>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
  10baf8:	e3a03001 	mov	r3, #1
  10bafc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
  10bb00:	e24b3024 	sub	r3, fp, #36	; 0x24
  10bb04:	e1a01003 	mov	r1, r3
  10bb08:	e30e0df4 	movw	r0, #60916	; 0xedf4
  10bb0c:	e3400010 	movt	r0, #16
  10bb10:	ebfffdbd 	bl	10b20c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
  10bb14:	e51b300c 	ldr	r3, [fp, #-12]
  10bb18:	e3530000 	cmp	r3, #0
  10bb1c:	1a00001b 	bne	10bb90 <netconn_recv_data+0x244>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10bb20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb24:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bb28:	e3530000 	cmp	r3, #0
  10bb2c:	0a000005 	beq	10bb48 <netconn_recv_data+0x1fc>
  10bb30:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb34:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bb38:	e3a02000 	mov	r2, #0
  10bb3c:	e3a01001 	mov	r1, #1
  10bb40:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10bb44:	e12fff33 	blx	r3
      if (conn->pcb.ip == NULL) {
  10bb48:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb4c:	e5933008 	ldr	r3, [r3, #8]
  10bb50:	e3530000 	cmp	r3, #0
  10bb54:	1a000008 	bne	10bb7c <netconn_recv_data+0x230>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
  10bb58:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb5c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bb60:	e3530000 	cmp	r3, #0
  10bb64:	0a000002 	beq	10bb74 <netconn_recv_data+0x228>
  10bb68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb6c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bb70:	ea00002e 	b	10bc30 <netconn_recv_data+0x2e4>
  10bb74:	e3e0300d 	mvn	r3, #13
  10bb78:	ea00002c 	b	10bc30 <netconn_recv_data+0x2e4>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
  10bb7c:	e3a01001 	mov	r1, #1
  10bb80:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10bb84:	eb00015a 	bl	10c0f4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
  10bb88:	e3e0300e 	mvn	r3, #14
  10bb8c:	ea000027 	b	10bc30 <netconn_recv_data+0x2e4>
    }
    len = ((struct pbuf *)buf)->tot_len;
  10bb90:	e51b300c 	ldr	r3, [fp, #-12]
  10bb94:	e1d330b8 	ldrh	r3, [r3, #8]
  10bb98:	e14b30b6 	strh	r3, [fp, #-6]
  10bb9c:	ea00000d 	b	10bbd8 <netconn_recv_data+0x28c>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
  10bba0:	e51b300c 	ldr	r3, [fp, #-12]
  10bba4:	e3530000 	cmp	r3, #0
  10bba8:	1a000006 	bne	10bbc8 <netconn_recv_data+0x27c>
  10bbac:	e3060568 	movw	r0, #25960	; 0x6568
  10bbb0:	e3400014 	movt	r0, #20
  10bbb4:	ebffdd56 	bl	103114 <rt_kprintf>
  10bbb8:	e300123e 	movw	r1, #574	; 0x23e
  10bbbc:	e3060364 	movw	r0, #25444	; 0x6364
  10bbc0:	e3400014 	movt	r0, #20
  10bbc4:	ebfffd3a 	bl	10b0b4 <sys_arch_assert>
    len = netbuf_len((struct netbuf*)buf);
  10bbc8:	e51b300c 	ldr	r3, [fp, #-12]
  10bbcc:	e5933000 	ldr	r3, [r3]
  10bbd0:	e1d330b8 	ldrh	r3, [r3, #8]
  10bbd4:	e14b30b6 	strh	r3, [fp, #-6]
  }
#endif /* (LWIP_UDP || LWIP_RAW) */

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
  10bbd8:	ebffd997 	bl	10223c <rt_enter_critical>
  10bbdc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bbe0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10bbe4:	e15b30b6 	ldrh	r3, [fp, #-6]
  10bbe8:	e0422003 	sub	r2, r2, r3
  10bbec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bbf0:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10bbf4:	ebffd996 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
  10bbf8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bbfc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bc00:	e3530000 	cmp	r3, #0
  10bc04:	0a000005 	beq	10bc20 <netconn_recv_data+0x2d4>
  10bc08:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc0c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bc10:	e15b20b6 	ldrh	r2, [fp, #-6]
  10bc14:	e3a01001 	mov	r1, #1
  10bc18:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10bc1c:	e12fff33 	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  10bc20:	e51b200c 	ldr	r2, [fp, #-12]
  10bc24:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bc28:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10bc2c:	e3a03000 	mov	r3, #0
}
  10bc30:	e1a00003 	mov	r0, r3
  10bc34:	e24bd004 	sub	sp, fp, #4
  10bc38:	e8bd8800 	pop	{fp, pc}

0010bc3c <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
  10bc3c:	e92d4800 	push	{fp, lr}
  10bc40:	e28db004 	add	fp, sp, #4
  10bc44:	e24dd008 	sub	sp, sp, #8
  10bc48:	e50b0008 	str	r0, [fp, #-8]
  10bc4c:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
  10bc50:	e51b3008 	ldr	r3, [fp, #-8]
  10bc54:	e3530000 	cmp	r3, #0
  10bc58:	0a000004 	beq	10bc70 <netconn_recv_tcp_pbuf+0x34>
  10bc5c:	e51b3008 	ldr	r3, [fp, #-8]
  10bc60:	e5933000 	ldr	r3, [r3]
  10bc64:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bc68:	e3530010 	cmp	r3, #16
  10bc6c:	0a000008 	beq	10bc94 <netconn_recv_tcp_pbuf+0x58>
  10bc70:	e306052c 	movw	r0, #25900	; 0x652c
  10bc74:	e3400014 	movt	r0, #20
  10bc78:	ebffdd25 	bl	103114 <rt_kprintf>
  10bc7c:	e300125e 	movw	r1, #606	; 0x25e
  10bc80:	e3060364 	movw	r0, #25444	; 0x6364
  10bc84:	e3400014 	movt	r0, #20
  10bc88:	ebfffd09 	bl	10b0b4 <sys_arch_assert>
  10bc8c:	e3e0300f 	mvn	r3, #15
  10bc90:	ea000003 	b	10bca4 <netconn_recv_tcp_pbuf+0x68>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
  10bc94:	e51b100c 	ldr	r1, [fp, #-12]
  10bc98:	e51b0008 	ldr	r0, [fp, #-8]
  10bc9c:	ebffff2a 	bl	10b94c <netconn_recv_data>
  10bca0:	e1a03000 	mov	r3, r0
}
  10bca4:	e1a00003 	mov	r0, r3
  10bca8:	e24bd004 	sub	sp, fp, #4
  10bcac:	e8bd8800 	pop	{fp, pc}

0010bcb0 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
  10bcb0:	e92d4800 	push	{fp, lr}
  10bcb4:	e28db004 	add	fp, sp, #4
  10bcb8:	e24dd018 	sub	sp, sp, #24
  10bcbc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10bcc0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
#if LWIP_TCP
  struct netbuf *buf = NULL;
  10bcc4:	e3a03000 	mov	r3, #0
  10bcc8:	e50b3008 	str	r3, [fp, #-8]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10bccc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10bcd0:	e3530000 	cmp	r3, #0
  10bcd4:	1a000008 	bne	10bcfc <netconn_recv+0x4c>
  10bcd8:	e306050c 	movw	r0, #25868	; 0x650c
  10bcdc:	e3400014 	movt	r0, #20
  10bce0:	ebffdd0b 	bl	103114 <rt_kprintf>
  10bce4:	e3a01f9d 	mov	r1, #628	; 0x274
  10bce8:	e3060364 	movw	r0, #25444	; 0x6364
  10bcec:	e3400014 	movt	r0, #20
  10bcf0:	ebfffcef 	bl	10b0b4 <sys_arch_assert>
  10bcf4:	e3e0300f 	mvn	r3, #15
  10bcf8:	ea00004d 	b	10be34 <netconn_recv+0x184>
  *new_buf = NULL;
  10bcfc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10bd00:	e3a02000 	mov	r2, #0
  10bd04:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10bd08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10bd0c:	e3530000 	cmp	r3, #0
  10bd10:	1a000008 	bne	10bd38 <netconn_recv+0x88>
  10bd14:	e306052c 	movw	r0, #25900	; 0x652c
  10bd18:	e3400014 	movt	r0, #20
  10bd1c:	ebffdcfc 	bl	103114 <rt_kprintf>
  10bd20:	e3001276 	movw	r1, #630	; 0x276
  10bd24:	e3060364 	movw	r0, #25444	; 0x6364
  10bd28:	e3400014 	movt	r0, #20
  10bd2c:	ebfffce0 	bl	10b0b4 <sys_arch_assert>
  10bd30:	e3e0300f 	mvn	r3, #15
  10bd34:	ea00003e 	b	10be34 <netconn_recv+0x184>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10bd38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10bd3c:	e5933000 	ldr	r3, [r3]
  10bd40:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bd44:	e3530010 	cmp	r3, #16
  10bd48:	1a000035 	bne	10be24 <netconn_recv+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
  10bd4c:	e3a03000 	mov	r3, #0
  10bd50:	e50b3010 	str	r3, [fp, #-16]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10bd54:	e3a02d0a 	mov	r2, #640	; 0x280
  10bd58:	e3061364 	movw	r1, #25444	; 0x6364
  10bd5c:	e3401014 	movt	r1, #20
  10bd60:	e3a00007 	mov	r0, #7
  10bd64:	eb0034cc 	bl	11909c <memp_malloc_fn>
  10bd68:	e50b0008 	str	r0, [fp, #-8]
    if (buf == NULL) {
  10bd6c:	e51b3008 	ldr	r3, [fp, #-8]
  10bd70:	e3530000 	cmp	r3, #0
  10bd74:	1a000001 	bne	10bd80 <netconn_recv+0xd0>
      return ERR_MEM;
  10bd78:	e3e03000 	mvn	r3, #0
  10bd7c:	ea00002c 	b	10be34 <netconn_recv+0x184>
    }

    err = netconn_recv_data(conn, (void **)&p);
  10bd80:	e24b3010 	sub	r3, fp, #16
  10bd84:	e1a01003 	mov	r1, r3
  10bd88:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10bd8c:	ebfffeee 	bl	10b94c <netconn_recv_data>
  10bd90:	e1a03000 	mov	r3, r0
  10bd94:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10bd98:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10bd9c:	e3530000 	cmp	r3, #0
  10bda0:	0a000004 	beq	10bdb8 <netconn_recv+0x108>
      memp_free(MEMP_NETBUF, buf);
  10bda4:	e51b1008 	ldr	r1, [fp, #-8]
  10bda8:	e3a00007 	mov	r0, #7
  10bdac:	eb003522 	bl	11923c <memp_free>
      return err;
  10bdb0:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10bdb4:	ea00001e 	b	10be34 <netconn_recv+0x184>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
  10bdb8:	e51b3010 	ldr	r3, [fp, #-16]
  10bdbc:	e3530000 	cmp	r3, #0
  10bdc0:	1a000006 	bne	10bde0 <netconn_recv+0x130>
  10bdc4:	e3060574 	movw	r0, #25972	; 0x6574
  10bdc8:	e3400014 	movt	r0, #20
  10bdcc:	ebffdcd0 	bl	103114 <rt_kprintf>
  10bdd0:	e300128a 	movw	r1, #650	; 0x28a
  10bdd4:	e3060364 	movw	r0, #25444	; 0x6364
  10bdd8:	e3400014 	movt	r0, #20
  10bddc:	ebfffcb4 	bl	10b0b4 <sys_arch_assert>

    buf->p = p;
  10bde0:	e51b2010 	ldr	r2, [fp, #-16]
  10bde4:	e51b3008 	ldr	r3, [fp, #-8]
  10bde8:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10bdec:	e51b2010 	ldr	r2, [fp, #-16]
  10bdf0:	e51b3008 	ldr	r3, [fp, #-8]
  10bdf4:	e5832004 	str	r2, [r3, #4]
    buf->port = 0;
  10bdf8:	e51b3008 	ldr	r3, [fp, #-8]
  10bdfc:	e3a02000 	mov	r2, #0
  10be00:	e1c320bc 	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
  10be04:	e51b3008 	ldr	r3, [fp, #-8]
  10be08:	e3a02000 	mov	r2, #0
  10be0c:	e5832008 	str	r2, [r3, #8]
    *new_buf = buf;
  10be10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10be14:	e51b2008 	ldr	r2, [fp, #-8]
  10be18:	e5832000 	str	r2, [r3]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
  10be1c:	e3a03000 	mov	r3, #0
  10be20:	ea000003 	b	10be34 <netconn_recv+0x184>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
  10be24:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10be28:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10be2c:	ebfffec6 	bl	10b94c <netconn_recv_data>
  10be30:	e1a03000 	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
  10be34:	e1a00003 	mov	r0, r3
  10be38:	e24bd004 	sub	sp, fp, #4
  10be3c:	e8bd8800 	pop	{fp, pc}

0010be40 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
  10be40:	e92d4800 	push	{fp, lr}
  10be44:	e28db004 	add	fp, sp, #4
  10be48:	e24dd010 	sub	sp, sp, #16
  10be4c:	e50b0008 	str	r0, [fp, #-8]
  10be50:	e50b100c 	str	r1, [fp, #-12]
  10be54:	e50b2010 	str	r2, [fp, #-16]
  10be58:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (buf != NULL) {
  10be5c:	e51b300c 	ldr	r3, [fp, #-12]
  10be60:	e3530000 	cmp	r3, #0
  10be64:	0a000010 	beq	10beac <netconn_sendto+0x6c>
    ip_addr_set(&buf->addr, addr);
  10be68:	e51b3010 	ldr	r3, [fp, #-16]
  10be6c:	e3530000 	cmp	r3, #0
  10be70:	0a000002 	beq	10be80 <netconn_sendto+0x40>
  10be74:	e51b3010 	ldr	r3, [fp, #-16]
  10be78:	e5933000 	ldr	r3, [r3]
  10be7c:	ea000000 	b	10be84 <netconn_sendto+0x44>
  10be80:	e3a03000 	mov	r3, #0
  10be84:	e51b200c 	ldr	r2, [fp, #-12]
  10be88:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10be8c:	e51b300c 	ldr	r3, [fp, #-12]
  10be90:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10be94:	e1c320bc 	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
  10be98:	e51b100c 	ldr	r1, [fp, #-12]
  10be9c:	e51b0008 	ldr	r0, [fp, #-8]
  10bea0:	eb000005 	bl	10bebc <netconn_send>
  10bea4:	e1a03000 	mov	r3, r0
  10bea8:	ea000000 	b	10beb0 <netconn_sendto+0x70>
  }
  return ERR_VAL;
  10beac:	e3e03005 	mvn	r3, #5
}
  10beb0:	e1a00003 	mov	r0, r3
  10beb4:	e24bd004 	sub	sp, fp, #4
  10beb8:	e8bd8800 	pop	{fp, pc}

0010bebc <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
  10bebc:	e92d4800 	push	{fp, lr}
  10bec0:	e28db004 	add	fp, sp, #4
  10bec4:	e24dd028 	sub	sp, sp, #40	; 0x28
  10bec8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10becc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bed0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bed4:	e3530000 	cmp	r3, #0
  10bed8:	1a000008 	bne	10bf00 <netconn_send+0x44>
  10bedc:	e3060580 	movw	r0, #25984	; 0x6580
  10bee0:	e3400014 	movt	r0, #20
  10bee4:	ebffdc8a 	bl	103114 <rt_kprintf>
  10bee8:	e30012c3 	movw	r1, #707	; 0x2c3
  10beec:	e3060364 	movw	r0, #25444	; 0x6364
  10bef0:	e3400014 	movt	r0, #20
  10bef4:	ebfffc6e 	bl	10b0b4 <sys_arch_assert>
  10bef8:	e3e0300f 	mvn	r3, #15
  10befc:	ea00000b 	b	10bf30 <netconn_send+0x74>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10bf00:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf04:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.b = buf;
  10bf08:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bf0c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
  10bf10:	e24b3020 	sub	r3, fp, #32
  10bf14:	e1a01003 	mov	r1, r3
  10bf18:	e30e0be8 	movw	r0, #60392	; 0xebe8
  10bf1c:	e3400010 	movt	r0, #16
  10bf20:	ebfffcb9 	bl	10b20c <netconn_apimsg>
  10bf24:	e1a03000 	mov	r3, r0
  10bf28:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10bf2c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10bf30:	e1a00003 	mov	r0, r3
  10bf34:	e24bd004 	sub	sp, fp, #4
  10bf38:	e8bd8800 	pop	{fp, pc}

0010bf3c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
  10bf3c:	e92d4800 	push	{fp, lr}
  10bf40:	e28db004 	add	fp, sp, #4
  10bf44:	e24dd030 	sub	sp, sp, #48	; 0x30
  10bf48:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bf4c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10bf50:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10bf54:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bf58:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf5c:	e3530000 	cmp	r3, #0
  10bf60:	1a000008 	bne	10bf88 <netconn_write_partly+0x4c>
  10bf64:	e306059c 	movw	r0, #26012	; 0x659c
  10bf68:	e3400014 	movt	r0, #20
  10bf6c:	ebffdc68 	bl	103114 <rt_kprintf>
  10bf70:	e30012e6 	movw	r1, #742	; 0x2e6
  10bf74:	e3060364 	movw	r0, #25444	; 0x6364
  10bf78:	e3400014 	movt	r0, #20
  10bf7c:	ebfffc4c 	bl	10b0b4 <sys_arch_assert>
  10bf80:	e3e0300f 	mvn	r3, #15
  10bf84:	ea000057 	b	10c0e8 <netconn_write_partly+0x1ac>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
  10bf88:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf8c:	e5933000 	ldr	r3, [r3]
  10bf90:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bf94:	e3530010 	cmp	r3, #16
  10bf98:	0a000008 	beq	10bfc0 <netconn_write_partly+0x84>
  10bf9c:	e30605b8 	movw	r0, #26040	; 0x65b8
  10bfa0:	e3400014 	movt	r0, #20
  10bfa4:	ebffdc5a 	bl	103114 <rt_kprintf>
  10bfa8:	e30012e7 	movw	r1, #743	; 0x2e7
  10bfac:	e3060364 	movw	r0, #25444	; 0x6364
  10bfb0:	e3400014 	movt	r0, #20
  10bfb4:	ebfffc3e 	bl	10b0b4 <sys_arch_assert>
  10bfb8:	e3e03005 	mvn	r3, #5
  10bfbc:	ea000049 	b	10c0e8 <netconn_write_partly+0x1ac>
  if (size == 0) {
  10bfc0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10bfc4:	e3530000 	cmp	r3, #0
  10bfc8:	1a000001 	bne	10bfd4 <netconn_write_partly+0x98>
    return ERR_OK;
  10bfcc:	e3a03000 	mov	r3, #0
  10bfd0:	ea000044 	b	10c0e8 <netconn_write_partly+0x1ac>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10bfd4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bfd8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10bfdc:	e2033002 	and	r3, r3, #2
  10bfe0:	e3530000 	cmp	r3, #0
  10bfe4:	1a000003 	bne	10bff8 <netconn_write_partly+0xbc>
  10bfe8:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10bfec:	e2033004 	and	r3, r3, #4
  10bff0:	e3530000 	cmp	r3, #0
  10bff4:	0a000001 	beq	10c000 <netconn_write_partly+0xc4>
  10bff8:	e3a03001 	mov	r3, #1
  10bffc:	ea000000 	b	10c004 <netconn_write_partly+0xc8>
  10c000:	e3a03000 	mov	r3, #0
  10c004:	e54b3005 	strb	r3, [fp, #-5]
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10c008:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c00c:	e5933020 	ldr	r3, [r3, #32]
  10c010:	e3530000 	cmp	r3, #0
  10c014:	0a000001 	beq	10c020 <netconn_write_partly+0xe4>
    dontblock = 1;
  10c018:	e3a03001 	mov	r3, #1
  10c01c:	e54b3005 	strb	r3, [fp, #-5]
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
  10c020:	e55b3005 	ldrb	r3, [fp, #-5]
  10c024:	e3530000 	cmp	r3, #0
  10c028:	0a000004 	beq	10c040 <netconn_write_partly+0x104>
  10c02c:	e59b3004 	ldr	r3, [fp, #4]
  10c030:	e3530000 	cmp	r3, #0
  10c034:	1a000001 	bne	10c040 <netconn_write_partly+0x104>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
  10c038:	e3e03005 	mvn	r3, #5
  10c03c:	ea000029 	b	10c0e8 <netconn_write_partly+0x1ac>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
  10c040:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c044:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
  10c048:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c04c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
  10c050:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10c054:	e54b3010 	strb	r3, [fp, #-16]
  API_MSG_VAR_REF(msg).msg.w.len = size;
  10c058:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c05c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10c060:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c064:	e5933020 	ldr	r3, [r3, #32]
  10c068:	e3530000 	cmp	r3, #0
  10c06c:	0a000003 	beq	10c080 <netconn_write_partly+0x144>
    /* get the time we started, which is later compared to
        sys_now() + conn->send_timeout */
    API_MSG_VAR_REF(msg).msg.w.time_started = sys_now();
  10c070:	ebfffc28 	bl	10b118 <sys_now>
  10c074:	e1a03000 	mov	r3, r0
  10c078:	e50b300c 	str	r3, [fp, #-12]
  10c07c:	ea000001 	b	10c088 <netconn_write_partly+0x14c>
  } else {
    API_MSG_VAR_REF(msg).msg.w.time_started = 0;
  10c080:	e3a03000 	mov	r3, #0
  10c084:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
  10c088:	e24b3020 	sub	r3, fp, #32
  10c08c:	e1a01003 	mov	r1, r3
  10c090:	e30f04e0 	movw	r0, #62688	; 0xf4e0
  10c094:	e3400010 	movt	r0, #16
  10c098:	ebfffc5b 	bl	10b20c <netconn_apimsg>
  10c09c:	e1a03000 	mov	r3, r0
  10c0a0:	e54b3006 	strb	r3, [fp, #-6]
  if ((err == ERR_OK) && (bytes_written != NULL)) {
  10c0a4:	e15b30d6 	ldrsb	r3, [fp, #-6]
  10c0a8:	e3530000 	cmp	r3, #0
  10c0ac:	1a00000c 	bne	10c0e4 <netconn_write_partly+0x1a8>
  10c0b0:	e59b3004 	ldr	r3, [fp, #4]
  10c0b4:	e3530000 	cmp	r3, #0
  10c0b8:	0a000009 	beq	10c0e4 <netconn_write_partly+0x1a8>
    if (dontblock) {
  10c0bc:	e55b3005 	ldrb	r3, [fp, #-5]
  10c0c0:	e3530000 	cmp	r3, #0
  10c0c4:	0a000003 	beq	10c0d8 <netconn_write_partly+0x19c>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
  10c0c8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10c0cc:	e59b3004 	ldr	r3, [fp, #4]
  10c0d0:	e5832000 	str	r2, [r3]
  10c0d4:	ea000002 	b	10c0e4 <netconn_write_partly+0x1a8>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
  10c0d8:	e59b3004 	ldr	r3, [fp, #4]
  10c0dc:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  10c0e0:	e5832000 	str	r2, [r3]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
  10c0e4:	e15b30d6 	ldrsb	r3, [fp, #-6]
}
  10c0e8:	e1a00003 	mov	r0, r3
  10c0ec:	e24bd004 	sub	sp, fp, #4
  10c0f0:	e8bd8800 	pop	{fp, pc}

0010c0f4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
  10c0f4:	e92d4800 	push	{fp, lr}
  10c0f8:	e28db004 	add	fp, sp, #4
  10c0fc:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c100:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c104:	e1a03001 	mov	r3, r1
  10c108:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
  10c10c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c110:	e3530000 	cmp	r3, #0
  10c114:	1a000008 	bne	10c13c <netconn_close_shutdown+0x48>
  10c118:	e30605dc 	movw	r0, #26076	; 0x65dc
  10c11c:	e3400014 	movt	r0, #20
  10c120:	ebffdbfb 	bl	103114 <rt_kprintf>
  10c124:	e3a01fca 	mov	r1, #808	; 0x328
  10c128:	e3060364 	movw	r0, #25444	; 0x6364
  10c12c:	e3400014 	movt	r0, #20
  10c130:	ebfffbdf 	bl	10b0b4 <sys_arch_assert>
  10c134:	e3e0300f 	mvn	r3, #15
  10c138:	ea00000e 	b	10c178 <netconn_close_shutdown+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10c13c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c140:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
  10c144:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10c148:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10c14c:	ebfffbf1 	bl	10b118 <sys_now>
  10c150:	e1a03000 	mov	r3, r0
  10c154:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  10c158:	e24b3020 	sub	r3, fp, #32
  10c15c:	e1a01003 	mov	r1, r3
  10c160:	e30f09b4 	movw	r0, #63924	; 0xf9b4
  10c164:	e3400010 	movt	r0, #16
  10c168:	ebfffc27 	bl	10b20c <netconn_apimsg>
  10c16c:	e1a03000 	mov	r3, r0
  10c170:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10c174:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10c178:	e1a00003 	mov	r0, r3
  10c17c:	e24bd004 	sub	sp, fp, #4
  10c180:	e8bd8800 	pop	{fp, pc}

0010c184 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
  10c184:	e92d4800 	push	{fp, lr}
  10c188:	e28db004 	add	fp, sp, #4
  10c18c:	e24dd008 	sub	sp, sp, #8
  10c190:	e50b0008 	str	r0, [fp, #-8]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
  10c194:	e3a01003 	mov	r1, #3
  10c198:	e51b0008 	ldr	r0, [fp, #-8]
  10c19c:	ebffffd4 	bl	10c0f4 <netconn_close_shutdown>
  10c1a0:	e1a03000 	mov	r3, r0
}
  10c1a4:	e1a00003 	mov	r0, r3
  10c1a8:	e24bd004 	sub	sp, fp, #4
  10c1ac:	e8bd8800 	pop	{fp, pc}

0010c1b0 <netconn_shutdown>:
 * @param shut_tx shut down the TX side (no more write possible after this)
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)
{
  10c1b0:	e92d4800 	push	{fp, lr}
  10c1b4:	e28db004 	add	fp, sp, #4
  10c1b8:	e24dd008 	sub	sp, sp, #8
  10c1bc:	e50b0008 	str	r0, [fp, #-8]
  10c1c0:	e1a03001 	mov	r3, r1
  10c1c4:	e54b3009 	strb	r3, [fp, #-9]
  10c1c8:	e1a03002 	mov	r3, r2
  10c1cc:	e54b300a 	strb	r3, [fp, #-10]
  return netconn_close_shutdown(conn, (shut_rx ? NETCONN_SHUT_RD : 0) | (shut_tx ? NETCONN_SHUT_WR : 0));
  10c1d0:	e55b3009 	ldrb	r3, [fp, #-9]
  10c1d4:	e3530000 	cmp	r3, #0
  10c1d8:	13a03001 	movne	r3, #1
  10c1dc:	03a03000 	moveq	r3, #0
  10c1e0:	e6ef3073 	uxtb	r3, r3
  10c1e4:	e6af3073 	sxtb	r3, r3
  10c1e8:	e55b200a 	ldrb	r2, [fp, #-10]
  10c1ec:	e3520000 	cmp	r2, #0
  10c1f0:	0a000001 	beq	10c1fc <netconn_shutdown+0x4c>
  10c1f4:	e3a02002 	mov	r2, #2
  10c1f8:	ea000000 	b	10c200 <netconn_shutdown+0x50>
  10c1fc:	e3a02000 	mov	r2, #0
  10c200:	e1823003 	orr	r3, r2, r3
  10c204:	e6af3073 	sxtb	r3, r3
  10c208:	e6ef3073 	uxtb	r3, r3
  10c20c:	e1a01003 	mov	r1, r3
  10c210:	e51b0008 	ldr	r0, [fp, #-8]
  10c214:	ebffffb6 	bl	10c0f4 <netconn_close_shutdown>
  10c218:	e1a03000 	mov	r3, r0
}
  10c21c:	e1a00003 	mov	r0, r3
  10c220:	e24bd004 	sub	sp, fp, #4
  10c224:	e8bd8800 	pop	{fp, pc}

0010c228 <netconn_join_leave_group>:
err_t
netconn_join_leave_group(struct netconn *conn,
                         const ip_addr_t *multiaddr,
                         const ip_addr_t *netif_addr,
                         enum netconn_igmp join_or_leave)
{
  10c228:	e92d4800 	push	{fp, lr}
  10c22c:	e28db004 	add	fp, sp, #4
  10c230:	e24dd030 	sub	sp, sp, #48	; 0x30
  10c234:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c238:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10c23c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10c240:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_join_leave_group: invalid conn",  (conn != NULL), return ERR_ARG;);
  10c244:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c248:	e3530000 	cmp	r3, #0
  10c24c:	1a000008 	bne	10c274 <netconn_join_leave_group+0x4c>
  10c250:	e30605f8 	movw	r0, #26104	; 0x65f8
  10c254:	e3400014 	movt	r0, #20
  10c258:	ebffdbad 	bl	103114 <rt_kprintf>
  10c25c:	e3a01e37 	mov	r1, #880	; 0x370
  10c260:	e3060364 	movw	r0, #25444	; 0x6364
  10c264:	e3400014 	movt	r0, #20
  10c268:	ebfffb91 	bl	10b0b4 <sys_arch_assert>
  10c26c:	e3e0300f 	mvn	r3, #15
  10c270:	ea00001b 	b	10c2e4 <netconn_join_leave_group+0xbc>

  API_MSG_VAR_ALLOC(msg);

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (multiaddr == NULL) {
  10c274:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c278:	e3530000 	cmp	r3, #0
  10c27c:	1a000002 	bne	10c28c <netconn_join_leave_group+0x64>
    multiaddr = IP4_ADDR_ANY;
  10c280:	e30938d0 	movw	r3, #39120	; 0x98d0
  10c284:	e3403014 	movt	r3, #20
  10c288:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
  if (netif_addr == NULL) {
  10c28c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c290:	e3530000 	cmp	r3, #0
  10c294:	1a000002 	bne	10c2a4 <netconn_join_leave_group+0x7c>
    netif_addr = IP4_ADDR_ANY;
  10c298:	e30938d0 	movw	r3, #39120	; 0x98d0
  10c29c:	e3403014 	movt	r3, #20
  10c2a0:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_REF(msg).conn = conn;
  10c2a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c2a8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.jl.multiaddr = API_MSG_VAR_REF(multiaddr);
  10c2ac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c2b0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.jl.netif_addr = API_MSG_VAR_REF(netif_addr);
  10c2b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c2b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
  10c2bc:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10c2c0:	e50b3010 	str	r3, [fp, #-16]
  err = netconn_apimsg(lwip_netconn_do_join_leave_group, &API_MSG_VAR_REF(msg));
  10c2c4:	e24b3020 	sub	r3, fp, #32
  10c2c8:	e1a01003 	mov	r1, r3
  10c2cc:	e30f0bf4 	movw	r0, #64500	; 0xfbf4
  10c2d0:	e3400010 	movt	r0, #16
  10c2d4:	ebfffbcc 	bl	10b20c <netconn_apimsg>
  10c2d8:	e1a03000 	mov	r3, r0
  10c2dc:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10c2e0:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10c2e4:	e1a00003 	mov	r0, r3
  10c2e8:	e24bd004 	sub	sp, fp, #4
  10c2ec:	e8bd8800 	pop	{fp, pc}

0010c2f0 <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
  10c2f0:	e92d4800 	push	{fp, lr}
  10c2f4:	e28db004 	add	fp, sp, #4
  10c2f8:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c2fc:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c300:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
  10c304:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c308:	e3530000 	cmp	r3, #0
  10c30c:	1a000008 	bne	10c334 <netconn_gethostbyname+0x44>
  10c310:	e3060620 	movw	r0, #26144	; 0x6620
  10c314:	e3400014 	movt	r0, #20
  10c318:	ebffdb7d 	bl	103114 <rt_kprintf>
  10c31c:	e30013a5 	movw	r1, #933	; 0x3a5
  10c320:	e3060364 	movw	r0, #25444	; 0x6364
  10c324:	e3400014 	movt	r0, #20
  10c328:	ebfffb61 	bl	10b0b4 <sys_arch_assert>
  10c32c:	e3e0300f 	mvn	r3, #15
  10c330:	ea000036 	b	10c410 <netconn_gethostbyname+0x120>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
  10c334:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c338:	e3530000 	cmp	r3, #0
  10c33c:	1a000008 	bne	10c364 <netconn_gethostbyname+0x74>
  10c340:	e3060644 	movw	r0, #26180	; 0x6644
  10c344:	e3400014 	movt	r0, #20
  10c348:	ebffdb71 	bl	103114 <rt_kprintf>
  10c34c:	e30013a6 	movw	r1, #934	; 0x3a6
  10c350:	e3060364 	movw	r0, #25444	; 0x6364
  10c354:	e3400014 	movt	r0, #20
  10c358:	ebfffb55 	bl	10b0b4 <sys_arch_assert>
  10c35c:	e3e0300f 	mvn	r3, #15
  10c360:	ea00002a 	b	10c410 <netconn_gethostbyname+0x120>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH-1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH-1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
  10c364:	e24b301d 	sub	r3, fp, #29
  10c368:	e50b300c 	str	r3, [fp, #-12]
  msg.sem = &sem;
  10c36c:	e24b301c 	sub	r3, fp, #28
  10c370:	e50b3010 	str	r3, [fp, #-16]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
  10c374:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c378:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_VAR_REF(msg).name = name;
  10c37c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c380:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
  10c384:	e51b3010 	ldr	r3, [fp, #-16]
  10c388:	e3a01000 	mov	r1, #0
  10c38c:	e1a00003 	mov	r0, r3
  10c390:	ebfff91a 	bl	10a800 <sys_sem_new>
  10c394:	e1a03000 	mov	r3, r0
  10c398:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (err != ERR_OK) {
  10c39c:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c3a0:	e3530000 	cmp	r3, #0
  10c3a4:	0a000001 	beq	10c3b0 <netconn_gethostbyname+0xc0>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
  10c3a8:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c3ac:	ea000017 	b	10c410 <netconn_gethostbyname+0x120>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_callback(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg));
  10c3b0:	e24b3018 	sub	r3, fp, #24
  10c3b4:	e3a02001 	mov	r2, #1
  10c3b8:	e1a01003 	mov	r1, r3
  10c3bc:	e30f0dbc 	movw	r0, #64956	; 0xfdbc
  10c3c0:	e3400010 	movt	r0, #16
  10c3c4:	eb002772 	bl	116194 <tcpip_callback_with_block>
  10c3c8:	e1a03000 	mov	r3, r0
  10c3cc:	e54b3005 	strb	r3, [fp, #-5]
  if (cberr != ERR_OK) {
  10c3d0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c3d4:	e3530000 	cmp	r3, #0
  10c3d8:	0a000004 	beq	10c3f0 <netconn_gethostbyname+0x100>
#if !LWIP_NETCONN_SEM_PER_THREAD
    sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c3dc:	e51b3010 	ldr	r3, [fp, #-16]
  10c3e0:	e1a00003 	mov	r0, r3
  10c3e4:	ebfff930 	bl	10a8ac <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
  10c3e8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c3ec:	ea000007 	b	10c410 <netconn_gethostbyname+0x120>
  }
  sys_sem_wait(API_EXPR_REF_SEM(API_VAR_REF(msg).sem));
  10c3f0:	e51b3010 	ldr	r3, [fp, #-16]
  10c3f4:	e3a01000 	mov	r1, #0
  10c3f8:	e1a00003 	mov	r0, r3
  10c3fc:	ebfff940 	bl	10a904 <sys_arch_sem_wait>
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c400:	e51b3010 	ldr	r3, [fp, #-16]
  10c404:	e1a00003 	mov	r0, r3
  10c408:	ebfff927 	bl	10a8ac <sys_sem_free>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
  10c40c:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
}
  10c410:	e1a00003 	mov	r0, r3
  10c414:	e24bd004 	sub	sp, fp, #4
  10c418:	e8bd8800 	pop	{fp, pc}

0010c41c <recv_raw>:
 * @see raw.h (struct raw_pcb.recv) for parameters and return value
 */
static u8_t
recv_raw(void *arg, struct raw_pcb *pcb, struct pbuf *p,
    const ip_addr_t *addr)
{
  10c41c:	e92d4800 	push	{fp, lr}
  10c420:	e28db004 	add	fp, sp, #4
  10c424:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c428:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10c42c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  10c430:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  10c434:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct pbuf *q;
  struct netbuf *buf;
  struct netconn *conn;

  LWIP_UNUSED_ARG(addr);
  conn = (struct netconn *)arg;
  10c438:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c43c:	e50b300c 	str	r3, [fp, #-12]

  if ((conn != NULL) && sys_mbox_valid(&conn->recvmbox)) {
  10c440:	e51b300c 	ldr	r3, [fp, #-12]
  10c444:	e3530000 	cmp	r3, #0
  10c448:	0a00006b 	beq	10c5fc <recv_raw+0x1e0>
  10c44c:	e51b300c 	ldr	r3, [fp, #-12]
  10c450:	e2833014 	add	r3, r3, #20
  10c454:	e1a00003 	mov	r0, r3
  10c458:	ebfffacc 	bl	10af90 <sys_mbox_valid>
  10c45c:	e1a03000 	mov	r3, r0
  10c460:	e3530000 	cmp	r3, #0
  10c464:	0a000064 	beq	10c5fc <recv_raw+0x1e0>
#if LWIP_SO_RCVBUF
    int recv_avail;
    SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c468:	ebffd773 	bl	10223c <rt_enter_critical>
  10c46c:	e51b300c 	ldr	r3, [fp, #-12]
  10c470:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c474:	e50b3010 	str	r3, [fp, #-16]
  10c478:	ebffd775 	bl	102254 <rt_exit_critical>
    if ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize) {
  10c47c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c480:	e1d330b8 	ldrh	r3, [r3, #8]
  10c484:	e1a02003 	mov	r2, r3
  10c488:	e51b3010 	ldr	r3, [fp, #-16]
  10c48c:	e0822003 	add	r2, r2, r3
  10c490:	e51b300c 	ldr	r3, [fp, #-12]
  10c494:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  10c498:	e1520003 	cmp	r2, r3
  10c49c:	da000001 	ble	10c4a8 <recv_raw+0x8c>
      return 0;
  10c4a0:	e3a03000 	mov	r3, #0
  10c4a4:	ea000055 	b	10c600 <recv_raw+0x1e4>
    }
#endif /* LWIP_SO_RCVBUF */
    /* copy the whole packet into new pbufs */
    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  10c4a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c4ac:	e1d330b8 	ldrh	r3, [r3, #8]
  10c4b0:	e3a02000 	mov	r2, #0
  10c4b4:	e1a01003 	mov	r1, r3
  10c4b8:	e3a00004 	mov	r0, #4
  10c4bc:	eb003765 	bl	11a258 <pbuf_alloc>
  10c4c0:	e50b0008 	str	r0, [fp, #-8]
    if (q != NULL) {
  10c4c4:	e51b3008 	ldr	r3, [fp, #-8]
  10c4c8:	e3530000 	cmp	r3, #0
  10c4cc:	0a000009 	beq	10c4f8 <recv_raw+0xdc>
      if (pbuf_copy(q, p) != ERR_OK) {
  10c4d0:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  10c4d4:	e51b0008 	ldr	r0, [fp, #-8]
  10c4d8:	eb003bba 	bl	11b3c8 <pbuf_copy>
  10c4dc:	e1a03000 	mov	r3, r0
  10c4e0:	e3530000 	cmp	r3, #0
  10c4e4:	0a000003 	beq	10c4f8 <recv_raw+0xdc>
        pbuf_free(q);
  10c4e8:	e51b0008 	ldr	r0, [fp, #-8]
  10c4ec:	eb003a60 	bl	11ae74 <pbuf_free>
        q = NULL;
  10c4f0:	e3a03000 	mov	r3, #0
  10c4f4:	e50b3008 	str	r3, [fp, #-8]
      }
    }

    if (q != NULL) {
  10c4f8:	e51b3008 	ldr	r3, [fp, #-8]
  10c4fc:	e3530000 	cmp	r3, #0
  10c500:	0a00003d 	beq	10c5fc <recv_raw+0x1e0>
      u16_t len;
      buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c504:	e3a02081 	mov	r2, #129	; 0x81
  10c508:	e3061668 	movw	r1, #26216	; 0x6668
  10c50c:	e3401014 	movt	r1, #20
  10c510:	e3a00007 	mov	r0, #7
  10c514:	eb0032e0 	bl	11909c <memp_malloc_fn>
  10c518:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (buf == NULL) {
  10c51c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c520:	e3530000 	cmp	r3, #0
  10c524:	1a000003 	bne	10c538 <recv_raw+0x11c>
        pbuf_free(q);
  10c528:	e51b0008 	ldr	r0, [fp, #-8]
  10c52c:	eb003a50 	bl	11ae74 <pbuf_free>
        return 0;
  10c530:	e3a03000 	mov	r3, #0
  10c534:	ea000031 	b	10c600 <recv_raw+0x1e4>
      }

      buf->p = q;
  10c538:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c53c:	e51b2008 	ldr	r2, [fp, #-8]
  10c540:	e5832000 	str	r2, [r3]
      buf->ptr = q;
  10c544:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c548:	e51b2008 	ldr	r2, [fp, #-8]
  10c54c:	e5832004 	str	r2, [r3, #4]
      ip_addr_copy(buf->addr, *ip_current_src_addr());
  10c550:	e30f3610 	movw	r3, #62992	; 0xf610
  10c554:	e3403014 	movt	r3, #20
  10c558:	e5932010 	ldr	r2, [r3, #16]
  10c55c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c560:	e5832008 	str	r2, [r3, #8]
      buf->port = pcb->protocol;
  10c564:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c568:	e5d33010 	ldrb	r3, [r3, #16]
  10c56c:	e6ff2073 	uxth	r2, r3
  10c570:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c574:	e1c320bc 	strh	r2, [r3, #12]

      len = q->tot_len;
  10c578:	e51b3008 	ldr	r3, [fp, #-8]
  10c57c:	e1d330b8 	ldrh	r3, [r3, #8]
  10c580:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c584:	e51b300c 	ldr	r3, [fp, #-12]
  10c588:	e2833014 	add	r3, r3, #20
  10c58c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10c590:	e1a00003 	mov	r0, r3
  10c594:	ebfffa1f 	bl	10ae18 <sys_mbox_trypost>
  10c598:	e1a03000 	mov	r3, r0
  10c59c:	e3530000 	cmp	r3, #0
  10c5a0:	0a000003 	beq	10c5b4 <recv_raw+0x198>
        netbuf_delete(buf);
  10c5a4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10c5a8:	eb000e50 	bl	10fef0 <netbuf_delete>
        return 0;
  10c5ac:	e3a03000 	mov	r3, #0
  10c5b0:	ea000012 	b	10c600 <recv_raw+0x1e4>
      } else {
#if LWIP_SO_RCVBUF
        SYS_ARCH_INC(conn->recv_avail, len);
  10c5b4:	ebffd720 	bl	10223c <rt_enter_critical>
  10c5b8:	e51b300c 	ldr	r3, [fp, #-12]
  10c5bc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c5c0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10c5c4:	e0822003 	add	r2, r2, r3
  10c5c8:	e51b300c 	ldr	r3, [fp, #-12]
  10c5cc:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c5d0:	ebffd71f 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
        /* Register event with callback */
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c5d4:	e51b300c 	ldr	r3, [fp, #-12]
  10c5d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c5dc:	e3530000 	cmp	r3, #0
  10c5e0:	0a000005 	beq	10c5fc <recv_raw+0x1e0>
  10c5e4:	e51b300c 	ldr	r3, [fp, #-12]
  10c5e8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c5ec:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10c5f0:	e3a01000 	mov	r1, #0
  10c5f4:	e51b000c 	ldr	r0, [fp, #-12]
  10c5f8:	e12fff33 	blx	r3
      }
    }
  }

  return 0; /* do not eat the packet */
  10c5fc:	e3a03000 	mov	r3, #0
}
  10c600:	e1a00003 	mov	r0, r3
  10c604:	e24bd004 	sub	sp, fp, #4
  10c608:	e8bd8800 	pop	{fp, pc}

0010c60c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
  10c60c:	e92d4800 	push	{fp, lr}
  10c610:	e28db004 	add	fp, sp, #4
  10c614:	e24dd020 	sub	sp, sp, #32
  10c618:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10c61c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10c620:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  10c624:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
  10c628:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10c62c:	e3530000 	cmp	r3, #0
  10c630:	1a000006 	bne	10c650 <recv_udp+0x44>
  10c634:	e3060698 	movw	r0, #26264	; 0x6698
  10c638:	e3400014 	movt	r0, #20
  10c63c:	ebffdab4 	bl	103114 <rt_kprintf>
  10c640:	e3a010b1 	mov	r1, #177	; 0xb1
  10c644:	e3060668 	movw	r0, #26216	; 0x6668
  10c648:	e3400014 	movt	r0, #20
  10c64c:	ebfffa98 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
  10c650:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c654:	e3530000 	cmp	r3, #0
  10c658:	1a000006 	bne	10c678 <recv_udp+0x6c>
  10c65c:	e30606bc 	movw	r0, #26300	; 0x66bc
  10c660:	e3400014 	movt	r0, #20
  10c664:	ebffdaaa 	bl	103114 <rt_kprintf>
  10c668:	e3a010b2 	mov	r1, #178	; 0xb2
  10c66c:	e3060668 	movw	r0, #26216	; 0x6668
  10c670:	e3400014 	movt	r0, #20
  10c674:	ebfffa8e 	bl	10b0b4 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10c678:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c67c:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
  10c680:	e51b3008 	ldr	r3, [fp, #-8]
  10c684:	e5933008 	ldr	r3, [r3, #8]
  10c688:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10c68c:	e1520003 	cmp	r2, r3
  10c690:	0a000006 	beq	10c6b0 <recv_udp+0xa4>
  10c694:	e30606dc 	movw	r0, #26332	; 0x66dc
  10c698:	e3400014 	movt	r0, #20
  10c69c:	ebffda9c 	bl	103114 <rt_kprintf>
  10c6a0:	e3a010b4 	mov	r1, #180	; 0xb4
  10c6a4:	e3060668 	movw	r0, #26216	; 0x6668
  10c6a8:	e3400014 	movt	r0, #20
  10c6ac:	ebfffa80 	bl	10b0b4 <sys_arch_assert>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c6b0:	ebffd6e1 	bl	10223c <rt_enter_critical>
  10c6b4:	e51b3008 	ldr	r3, [fp, #-8]
  10c6b8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c6bc:	e50b300c 	str	r3, [fp, #-12]
  10c6c0:	ebffd6e3 	bl	102254 <rt_exit_critical>
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c6c4:	e51b3008 	ldr	r3, [fp, #-8]
  10c6c8:	e3530000 	cmp	r3, #0
  10c6cc:	0a00000f 	beq	10c710 <recv_udp+0x104>
  10c6d0:	e51b3008 	ldr	r3, [fp, #-8]
  10c6d4:	e2833014 	add	r3, r3, #20
  10c6d8:	e1a00003 	mov	r0, r3
  10c6dc:	ebfffa2b 	bl	10af90 <sys_mbox_valid>
  10c6e0:	e1a03000 	mov	r3, r0
  10c6e4:	e3530000 	cmp	r3, #0
  10c6e8:	0a000008 	beq	10c710 <recv_udp+0x104>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
  10c6ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c6f0:	e1d330b8 	ldrh	r3, [r3, #8]
  10c6f4:	e1a02003 	mov	r2, r3
  10c6f8:	e51b300c 	ldr	r3, [fp, #-12]
  10c6fc:	e0822003 	add	r2, r2, r3
  10c700:	e51b3008 	ldr	r3, [fp, #-8]
  10c704:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c708:	e1520003 	cmp	r2, r3
  10c70c:	da000002 	ble	10c71c <recv_udp+0x110>
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
  10c710:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c714:	eb0039d6 	bl	11ae74 <pbuf_free>
    return;
  10c718:	ea00003d 	b	10c814 <recv_udp+0x208>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c71c:	e3a020c1 	mov	r2, #193	; 0xc1
  10c720:	e3061668 	movw	r1, #26216	; 0x6668
  10c724:	e3401014 	movt	r1, #20
  10c728:	e3a00007 	mov	r0, #7
  10c72c:	eb00325a 	bl	11909c <memp_malloc_fn>
  10c730:	e50b0010 	str	r0, [fp, #-16]
  if (buf == NULL) {
  10c734:	e51b3010 	ldr	r3, [fp, #-16]
  10c738:	e3530000 	cmp	r3, #0
  10c73c:	1a000002 	bne	10c74c <recv_udp+0x140>
    pbuf_free(p);
  10c740:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c744:	eb0039ca 	bl	11ae74 <pbuf_free>
    return;
  10c748:	ea000031 	b	10c814 <recv_udp+0x208>
  } else {
    buf->p = p;
  10c74c:	e51b3010 	ldr	r3, [fp, #-16]
  10c750:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c754:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10c758:	e51b3010 	ldr	r3, [fp, #-16]
  10c75c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c760:	e5832004 	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
  10c764:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c768:	e3530000 	cmp	r3, #0
  10c76c:	0a000002 	beq	10c77c <recv_udp+0x170>
  10c770:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c774:	e5933000 	ldr	r3, [r3]
  10c778:	ea000000 	b	10c780 <recv_udp+0x174>
  10c77c:	e3a03000 	mov	r3, #0
  10c780:	e51b2010 	ldr	r2, [fp, #-16]
  10c784:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10c788:	e51b3010 	ldr	r3, [fp, #-16]
  10c78c:	e1db20b4 	ldrh	r2, [fp, #4]
  10c790:	e1c320bc 	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  10c794:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c798:	e1d330b8 	ldrh	r3, [r3, #8]
  10c79c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c7a0:	e51b3008 	ldr	r3, [fp, #-8]
  10c7a4:	e2833014 	add	r3, r3, #20
  10c7a8:	e51b1010 	ldr	r1, [fp, #-16]
  10c7ac:	e1a00003 	mov	r0, r3
  10c7b0:	ebfff998 	bl	10ae18 <sys_mbox_trypost>
  10c7b4:	e1a03000 	mov	r3, r0
  10c7b8:	e3530000 	cmp	r3, #0
  10c7bc:	0a000002 	beq	10c7cc <recv_udp+0x1c0>
    netbuf_delete(buf);
  10c7c0:	e51b0010 	ldr	r0, [fp, #-16]
  10c7c4:	eb000dc9 	bl	10fef0 <netbuf_delete>
    return;
  10c7c8:	ea000011 	b	10c814 <recv_udp+0x208>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10c7cc:	ebffd69a 	bl	10223c <rt_enter_critical>
  10c7d0:	e51b3008 	ldr	r3, [fp, #-8]
  10c7d4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c7d8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  10c7dc:	e0822003 	add	r2, r2, r3
  10c7e0:	e51b3008 	ldr	r3, [fp, #-8]
  10c7e4:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c7e8:	ebffd699 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c7ec:	e51b3008 	ldr	r3, [fp, #-8]
  10c7f0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c7f4:	e3530000 	cmp	r3, #0
  10c7f8:	0a000005 	beq	10c814 <recv_udp+0x208>
  10c7fc:	e51b3008 	ldr	r3, [fp, #-8]
  10c800:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c804:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10c808:	e3a01000 	mov	r1, #0
  10c80c:	e51b0008 	ldr	r0, [fp, #-8]
  10c810:	e12fff33 	blx	r3
  }
}
  10c814:	e24bd004 	sub	sp, fp, #4
  10c818:	e8bd8800 	pop	{fp, pc}

0010c81c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  10c81c:	e92d4800 	push	{fp, lr}
  10c820:	e28db004 	add	fp, sp, #4
  10c824:	e24dd018 	sub	sp, sp, #24
  10c828:	e50b0010 	str	r0, [fp, #-16]
  10c82c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10c830:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10c834:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
  10c838:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c83c:	e3530000 	cmp	r3, #0
  10c840:	1a000006 	bne	10c860 <recv_tcp+0x44>
  10c844:	e30606fc 	movw	r0, #26364	; 0x66fc
  10c848:	e3400014 	movt	r0, #20
  10c84c:	ebffda30 	bl	103114 <rt_kprintf>
  10c850:	e3a010f3 	mov	r1, #243	; 0xf3
  10c854:	e3060668 	movw	r0, #26216	; 0x6668
  10c858:	e3400014 	movt	r0, #20
  10c85c:	ebfffa14 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  10c860:	e51b3010 	ldr	r3, [fp, #-16]
  10c864:	e3530000 	cmp	r3, #0
  10c868:	1a000006 	bne	10c888 <recv_tcp+0x6c>
  10c86c:	e3060720 	movw	r0, #26400	; 0x6720
  10c870:	e3400014 	movt	r0, #20
  10c874:	ebffda26 	bl	103114 <rt_kprintf>
  10c878:	e3a010f4 	mov	r1, #244	; 0xf4
  10c87c:	e3060668 	movw	r0, #26216	; 0x6668
  10c880:	e3400014 	movt	r0, #20
  10c884:	ebfffa0a 	bl	10b0b4 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10c888:	e51b3010 	ldr	r3, [fp, #-16]
  10c88c:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10c890:	e51b300c 	ldr	r3, [fp, #-12]
  10c894:	e3530000 	cmp	r3, #0
  10c898:	1a000001 	bne	10c8a4 <recv_tcp+0x88>
    return ERR_VAL;
  10c89c:	e3e03005 	mvn	r3, #5
  10c8a0:	ea000053 	b	10c9f4 <recv_tcp+0x1d8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
  10c8a4:	e51b300c 	ldr	r3, [fp, #-12]
  10c8a8:	e5933008 	ldr	r3, [r3, #8]
  10c8ac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10c8b0:	e1520003 	cmp	r2, r3
  10c8b4:	0a000006 	beq	10c8d4 <recv_tcp+0xb8>
  10c8b8:	e3060740 	movw	r0, #26432	; 0x6740
  10c8bc:	e3400014 	movt	r0, #20
  10c8c0:	ebffda13 	bl	103114 <rt_kprintf>
  10c8c4:	e3a010fa 	mov	r1, #250	; 0xfa
  10c8c8:	e3060668 	movw	r0, #26216	; 0x6668
  10c8cc:	e3400014 	movt	r0, #20
  10c8d0:	ebfff9f7 	bl	10b0b4 <sys_arch_assert>

  if (!sys_mbox_valid(&conn->recvmbox)) {
  10c8d4:	e51b300c 	ldr	r3, [fp, #-12]
  10c8d8:	e2833014 	add	r3, r3, #20
  10c8dc:	e1a00003 	mov	r0, r3
  10c8e0:	ebfff9aa 	bl	10af90 <sys_mbox_valid>
  10c8e4:	e1a03000 	mov	r3, r0
  10c8e8:	e3530000 	cmp	r3, #0
  10c8ec:	1a00000b 	bne	10c920 <recv_tcp+0x104>
    /* recvmbox already deleted */
    if (p != NULL) {
  10c8f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c8f4:	e3530000 	cmp	r3, #0
  10c8f8:	0a000006 	beq	10c918 <recv_tcp+0xfc>
      tcp_recved(pcb, p->tot_len);
  10c8fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c900:	e1d330b8 	ldrh	r3, [r3, #8]
  10c904:	e1a01003 	mov	r1, r3
  10c908:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10c90c:	eb0045e0 	bl	11e094 <tcp_recved>
      pbuf_free(p);
  10c910:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10c914:	eb003956 	bl	11ae74 <pbuf_free>
    }
    return ERR_OK;
  10c918:	e3a03000 	mov	r3, #0
  10c91c:	ea000034 	b	10c9f4 <recv_tcp+0x1d8>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
  10c920:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  10c924:	e3530000 	cmp	r3, #0
  10c928:	0a00000b 	beq	10c95c <recv_tcp+0x140>
    NETCONN_SET_SAFE_ERR(conn, err);
  10c92c:	e51b300c 	ldr	r3, [fp, #-12]
  10c930:	e3530000 	cmp	r3, #0
  10c934:	0a000008 	beq	10c95c <recv_tcp+0x140>
  10c938:	ebffd63f 	bl	10223c <rt_enter_critical>
  10c93c:	e51b300c 	ldr	r3, [fp, #-12]
  10c940:	e1d330dc 	ldrsb	r3, [r3, #12]
  10c944:	e373000c 	cmn	r3, #12
  10c948:	ba000002 	blt	10c958 <recv_tcp+0x13c>
  10c94c:	e51b300c 	ldr	r3, [fp, #-12]
  10c950:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10c954:	e5c3200c 	strb	r2, [r3, #12]
  10c958:	ebffd63d 	bl	102254 <rt_exit_critical>
  }

  if (p != NULL) {
  10c95c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c960:	e3530000 	cmp	r3, #0
  10c964:	0a000003 	beq	10c978 <recv_tcp+0x15c>
    len = p->tot_len;
  10c968:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c96c:	e1d330b8 	ldrh	r3, [r3, #8]
  10c970:	e14b30b6 	strh	r3, [fp, #-6]
  10c974:	ea000001 	b	10c980 <recv_tcp+0x164>
  } else {
    len = 0;
  10c978:	e3a03000 	mov	r3, #0
  10c97c:	e14b30b6 	strh	r3, [fp, #-6]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
  10c980:	e51b300c 	ldr	r3, [fp, #-12]
  10c984:	e2833014 	add	r3, r3, #20
  10c988:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10c98c:	e1a00003 	mov	r0, r3
  10c990:	ebfff920 	bl	10ae18 <sys_mbox_trypost>
  10c994:	e1a03000 	mov	r3, r0
  10c998:	e3530000 	cmp	r3, #0
  10c99c:	0a000001 	beq	10c9a8 <recv_tcp+0x18c>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
  10c9a0:	e3e03000 	mvn	r3, #0
  10c9a4:	ea000012 	b	10c9f4 <recv_tcp+0x1d8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10c9a8:	ebffd623 	bl	10223c <rt_enter_critical>
  10c9ac:	e51b300c 	ldr	r3, [fp, #-12]
  10c9b0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c9b4:	e15b30b6 	ldrh	r3, [fp, #-6]
  10c9b8:	e0822003 	add	r2, r2, r3
  10c9bc:	e51b300c 	ldr	r3, [fp, #-12]
  10c9c0:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c9c4:	ebffd622 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c9c8:	e51b300c 	ldr	r3, [fp, #-12]
  10c9cc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c9d0:	e3530000 	cmp	r3, #0
  10c9d4:	0a000005 	beq	10c9f0 <recv_tcp+0x1d4>
  10c9d8:	e51b300c 	ldr	r3, [fp, #-12]
  10c9dc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c9e0:	e15b20b6 	ldrh	r2, [fp, #-6]
  10c9e4:	e3a01000 	mov	r1, #0
  10c9e8:	e51b000c 	ldr	r0, [fp, #-12]
  10c9ec:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10c9f0:	e3a03000 	mov	r3, #0
}
  10c9f4:	e1a00003 	mov	r0, r3
  10c9f8:	e24bd004 	sub	sp, fp, #4
  10c9fc:	e8bd8800 	pop	{fp, pc}

0010ca00 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
  10ca00:	e92d4800 	push	{fp, lr}
  10ca04:	e28db004 	add	fp, sp, #4
  10ca08:	e24dd010 	sub	sp, sp, #16
  10ca0c:	e50b0010 	str	r0, [fp, #-16]
  10ca10:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn = (struct netconn *)arg;
  10ca14:	e51b3010 	ldr	r3, [fp, #-16]
  10ca18:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10ca1c:	e51b3008 	ldr	r3, [fp, #-8]
  10ca20:	e3530000 	cmp	r3, #0
  10ca24:	1a000006 	bne	10ca44 <poll_tcp+0x44>
  10ca28:	e3060760 	movw	r0, #26464	; 0x6760
  10ca2c:	e3400014 	movt	r0, #20
  10ca30:	ebffd9b7 	bl	103114 <rt_kprintf>
  10ca34:	e3001132 	movw	r1, #306	; 0x132
  10ca38:	e3060668 	movw	r0, #26216	; 0x6668
  10ca3c:	e3400014 	movt	r0, #20
  10ca40:	ebfff99b 	bl	10b0b4 <sys_arch_assert>

  if (conn->state == NETCONN_WRITE) {
  10ca44:	e51b3008 	ldr	r3, [fp, #-8]
  10ca48:	e5933004 	ldr	r3, [r3, #4]
  10ca4c:	e3530001 	cmp	r3, #1
  10ca50:	1a000003 	bne	10ca64 <poll_tcp+0x64>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10ca54:	e3a01001 	mov	r1, #1
  10ca58:	e51b0008 	ldr	r0, [fp, #-8]
  10ca5c:	eb000924 	bl	10eef4 <lwip_netconn_do_writemore>
  10ca60:	ea000006 	b	10ca80 <poll_tcp+0x80>
  } else if (conn->state == NETCONN_CLOSE) {
  10ca64:	e51b3008 	ldr	r3, [fp, #-8]
  10ca68:	e5933004 	ldr	r3, [r3, #4]
  10ca6c:	e3530004 	cmp	r3, #4
  10ca70:	1a000002 	bne	10ca80 <poll_tcp+0x80>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
      conn->current_msg->msg.sd.polls_left--;
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10ca74:	e3a01001 	mov	r1, #1
  10ca78:	e51b0008 	ldr	r0, [fp, #-8]
  10ca7c:	eb000394 	bl	10d8d4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
  10ca80:	e51b3008 	ldr	r3, [fp, #-8]
  10ca84:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ca88:	e2033010 	and	r3, r3, #16
  10ca8c:	e3530000 	cmp	r3, #0
  10ca90:	0a00001d 	beq	10cb0c <poll_tcp+0x10c>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10ca94:	e51b3008 	ldr	r3, [fp, #-8]
  10ca98:	e5933008 	ldr	r3, [r3, #8]
  10ca9c:	e3530000 	cmp	r3, #0
  10caa0:	0a000019 	beq	10cb0c <poll_tcp+0x10c>
  10caa4:	e51b3008 	ldr	r3, [fp, #-8]
  10caa8:	e5933008 	ldr	r3, [r3, #8]
  10caac:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10cab0:	e3530a01 	cmp	r3, #4096	; 0x1000
  10cab4:	9a000014 	bls	10cb0c <poll_tcp+0x10c>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10cab8:	e51b3008 	ldr	r3, [fp, #-8]
  10cabc:	e5933008 	ldr	r3, [r3, #8]
  10cac0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10cac4:	e353000a 	cmp	r3, #10
  10cac8:	8a00000f 	bhi	10cb0c <poll_tcp+0x10c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10cacc:	e51b3008 	ldr	r3, [fp, #-8]
  10cad0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cad4:	e3c33010 	bic	r3, r3, #16
  10cad8:	e6ef2073 	uxtb	r2, r3
  10cadc:	e51b3008 	ldr	r3, [fp, #-8]
  10cae0:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10cae4:	e51b3008 	ldr	r3, [fp, #-8]
  10cae8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10caec:	e3530000 	cmp	r3, #0
  10caf0:	0a000005 	beq	10cb0c <poll_tcp+0x10c>
  10caf4:	e51b3008 	ldr	r3, [fp, #-8]
  10caf8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cafc:	e3a02000 	mov	r2, #0
  10cb00:	e3a01002 	mov	r1, #2
  10cb04:	e51b0008 	ldr	r0, [fp, #-8]
  10cb08:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10cb0c:	e3a03000 	mov	r3, #0
}
  10cb10:	e1a00003 	mov	r0, r3
  10cb14:	e24bd004 	sub	sp, fp, #4
  10cb18:	e8bd8800 	pop	{fp, pc}

0010cb1c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
  10cb1c:	e92d4800 	push	{fp, lr}
  10cb20:	e28db004 	add	fp, sp, #4
  10cb24:	e24dd018 	sub	sp, sp, #24
  10cb28:	e50b0010 	str	r0, [fp, #-16]
  10cb2c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10cb30:	e1a03002 	mov	r3, r2
  10cb34:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct netconn *conn = (struct netconn *)arg;
  10cb38:	e51b3010 	ldr	r3, [fp, #-16]
  10cb3c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10cb40:	e51b3008 	ldr	r3, [fp, #-8]
  10cb44:	e3530000 	cmp	r3, #0
  10cb48:	1a000006 	bne	10cb68 <sent_tcp+0x4c>
  10cb4c:	e3060760 	movw	r0, #26464	; 0x6760
  10cb50:	e3400014 	movt	r0, #20
  10cb54:	ebffd96e 	bl	103114 <rt_kprintf>
  10cb58:	e300115b 	movw	r1, #347	; 0x15b
  10cb5c:	e3060668 	movw	r0, #26216	; 0x6668
  10cb60:	e3400014 	movt	r0, #20
  10cb64:	ebfff952 	bl	10b0b4 <sys_arch_assert>

  if (conn) {
  10cb68:	e51b3008 	ldr	r3, [fp, #-8]
  10cb6c:	e3530000 	cmp	r3, #0
  10cb70:	0a00002c 	beq	10cc28 <sent_tcp+0x10c>
    if (conn->state == NETCONN_WRITE) {
  10cb74:	e51b3008 	ldr	r3, [fp, #-8]
  10cb78:	e5933004 	ldr	r3, [r3, #4]
  10cb7c:	e3530001 	cmp	r3, #1
  10cb80:	1a000003 	bne	10cb94 <sent_tcp+0x78>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10cb84:	e3a01001 	mov	r1, #1
  10cb88:	e51b0008 	ldr	r0, [fp, #-8]
  10cb8c:	eb0008d8 	bl	10eef4 <lwip_netconn_do_writemore>
  10cb90:	ea000006 	b	10cbb0 <sent_tcp+0x94>
    } else if (conn->state == NETCONN_CLOSE) {
  10cb94:	e51b3008 	ldr	r3, [fp, #-8]
  10cb98:	e5933004 	ldr	r3, [r3, #4]
  10cb9c:	e3530004 	cmp	r3, #4
  10cba0:	1a000002 	bne	10cbb0 <sent_tcp+0x94>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10cba4:	e3a01001 	mov	r1, #1
  10cba8:	e51b0008 	ldr	r0, [fp, #-8]
  10cbac:	eb000348 	bl	10d8d4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10cbb0:	e51b3008 	ldr	r3, [fp, #-8]
  10cbb4:	e5933008 	ldr	r3, [r3, #8]
  10cbb8:	e3530000 	cmp	r3, #0
  10cbbc:	0a000019 	beq	10cc28 <sent_tcp+0x10c>
  10cbc0:	e51b3008 	ldr	r3, [fp, #-8]
  10cbc4:	e5933008 	ldr	r3, [r3, #8]
  10cbc8:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10cbcc:	e3530a01 	cmp	r3, #4096	; 0x1000
  10cbd0:	9a000014 	bls	10cc28 <sent_tcp+0x10c>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10cbd4:	e51b3008 	ldr	r3, [fp, #-8]
  10cbd8:	e5933008 	ldr	r3, [r3, #8]
  10cbdc:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10cbe0:	e353000a 	cmp	r3, #10
  10cbe4:	8a00000f 	bhi	10cc28 <sent_tcp+0x10c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10cbe8:	e51b3008 	ldr	r3, [fp, #-8]
  10cbec:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cbf0:	e3c33010 	bic	r3, r3, #16
  10cbf4:	e6ef2073 	uxtb	r2, r3
  10cbf8:	e51b3008 	ldr	r3, [fp, #-8]
  10cbfc:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
  10cc00:	e51b3008 	ldr	r3, [fp, #-8]
  10cc04:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cc08:	e3530000 	cmp	r3, #0
  10cc0c:	0a000005 	beq	10cc28 <sent_tcp+0x10c>
  10cc10:	e51b3008 	ldr	r3, [fp, #-8]
  10cc14:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cc18:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10cc1c:	e3a01002 	mov	r1, #2
  10cc20:	e51b0008 	ldr	r0, [fp, #-8]
  10cc24:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10cc28:	e3a03000 	mov	r3, #0
}
  10cc2c:	e1a00003 	mov	r0, r3
  10cc30:	e24bd004 	sub	sp, fp, #4
  10cc34:	e8bd8800 	pop	{fp, pc}

0010cc38 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
  10cc38:	e92d4800 	push	{fp, lr}
  10cc3c:	e28db004 	add	fp, sp, #4
  10cc40:	e24dd018 	sub	sp, sp, #24
  10cc44:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10cc48:	e1a03001 	mov	r3, r1
  10cc4c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
  10cc50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cc54:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10cc58:	e51b3008 	ldr	r3, [fp, #-8]
  10cc5c:	e3530000 	cmp	r3, #0
  10cc60:	1a000006 	bne	10cc80 <err_tcp+0x48>
  10cc64:	e3060760 	movw	r0, #26464	; 0x6760
  10cc68:	e3400014 	movt	r0, #20
  10cc6c:	ebffd928 	bl	103114 <rt_kprintf>
  10cc70:	e300117e 	movw	r1, #382	; 0x17e
  10cc74:	e3060668 	movw	r0, #26216	; 0x6668
  10cc78:	e3400014 	movt	r0, #20
  10cc7c:	ebfff90c 	bl	10b0b4 <sys_arch_assert>

  conn->pcb.tcp = NULL;
  10cc80:	e51b3008 	ldr	r3, [fp, #-8]
  10cc84:	e3a02000 	mov	r2, #0
  10cc88:	e5832008 	str	r2, [r3, #8]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
  10cc8c:	e51b3008 	ldr	r3, [fp, #-8]
  10cc90:	e5933004 	ldr	r3, [r3, #4]
  10cc94:	e50b300c 	str	r3, [fp, #-12]
  conn->state = NETCONN_NONE;
  10cc98:	e51b3008 	ldr	r3, [fp, #-8]
  10cc9c:	e3a02000 	mov	r2, #0
  10cca0:	e5832004 	str	r2, [r3, #4]

  if (old_state == NETCONN_CLOSE) {
  10cca4:	e51b300c 	ldr	r3, [fp, #-12]
  10cca8:	e3530004 	cmp	r3, #4
  10ccac:	1a00000e 	bne	10ccec <err_tcp+0xb4>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
  10ccb0:	e3a03000 	mov	r3, #0
  10ccb4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10ccb8:	e51b3008 	ldr	r3, [fp, #-8]
  10ccbc:	e3530000 	cmp	r3, #0
  10ccc0:	0a00000e 	beq	10cd00 <err_tcp+0xc8>
  10ccc4:	ebffd55c 	bl	10223c <rt_enter_critical>
  10ccc8:	e51b3008 	ldr	r3, [fp, #-8]
  10cccc:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ccd0:	e373000c 	cmn	r3, #12
  10ccd4:	ba000002 	blt	10cce4 <err_tcp+0xac>
  10ccd8:	e51b3008 	ldr	r3, [fp, #-8]
  10ccdc:	e3a02000 	mov	r2, #0
  10cce0:	e5c3200c 	strb	r2, [r3, #12]
  10cce4:	ebffd55a 	bl	102254 <rt_exit_critical>
  10cce8:	ea000004 	b	10cd00 <err_tcp+0xc8>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
  10ccec:	ebffd552 	bl	10223c <rt_enter_critical>
  10ccf0:	e51b3008 	ldr	r3, [fp, #-8]
  10ccf4:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10ccf8:	e5c3200c 	strb	r2, [r3, #12]
  10ccfc:	ebffd554 	bl	102254 <rt_exit_critical>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10cd00:	e51b3008 	ldr	r3, [fp, #-8]
  10cd04:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd08:	e3530000 	cmp	r3, #0
  10cd0c:	0a000005 	beq	10cd28 <err_tcp+0xf0>
  10cd10:	e51b3008 	ldr	r3, [fp, #-8]
  10cd14:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd18:	e3a02000 	mov	r2, #0
  10cd1c:	e3a01004 	mov	r1, #4
  10cd20:	e51b0008 	ldr	r0, [fp, #-8]
  10cd24:	e12fff33 	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10cd28:	e51b3008 	ldr	r3, [fp, #-8]
  10cd2c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd30:	e3530000 	cmp	r3, #0
  10cd34:	0a000005 	beq	10cd50 <err_tcp+0x118>
  10cd38:	e51b3008 	ldr	r3, [fp, #-8]
  10cd3c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd40:	e3a02000 	mov	r2, #0
  10cd44:	e3a01000 	mov	r1, #0
  10cd48:	e51b0008 	ldr	r0, [fp, #-8]
  10cd4c:	e12fff33 	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10cd50:	e51b3008 	ldr	r3, [fp, #-8]
  10cd54:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd58:	e3530000 	cmp	r3, #0
  10cd5c:	0a000005 	beq	10cd78 <err_tcp+0x140>
  10cd60:	e51b3008 	ldr	r3, [fp, #-8]
  10cd64:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd68:	e3a02000 	mov	r2, #0
  10cd6c:	e3a01002 	mov	r1, #2
  10cd70:	e51b0008 	ldr	r0, [fp, #-8]
  10cd74:	e12fff33 	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10cd78:	e51b3008 	ldr	r3, [fp, #-8]
  10cd7c:	e2833014 	add	r3, r3, #20
  10cd80:	e1a00003 	mov	r0, r3
  10cd84:	ebfff881 	bl	10af90 <sys_mbox_valid>
  10cd88:	e1a03000 	mov	r3, r0
  10cd8c:	e3530000 	cmp	r3, #0
  10cd90:	0a000004 	beq	10cda8 <err_tcp+0x170>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
  10cd94:	e51b3008 	ldr	r3, [fp, #-8]
  10cd98:	e2833014 	add	r3, r3, #20
  10cd9c:	e3a01000 	mov	r1, #0
  10cda0:	e1a00003 	mov	r0, r3
  10cda4:	ebfff81b 	bl	10ae18 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10cda8:	e51b3008 	ldr	r3, [fp, #-8]
  10cdac:	e2833018 	add	r3, r3, #24
  10cdb0:	e1a00003 	mov	r0, r3
  10cdb4:	ebfff875 	bl	10af90 <sys_mbox_valid>
  10cdb8:	e1a03000 	mov	r3, r0
  10cdbc:	e3530000 	cmp	r3, #0
  10cdc0:	0a000004 	beq	10cdd8 <err_tcp+0x1a0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
  10cdc4:	e51b3008 	ldr	r3, [fp, #-8]
  10cdc8:	e2833018 	add	r3, r3, #24
  10cdcc:	e3a01000 	mov	r1, #0
  10cdd0:	e1a00003 	mov	r0, r3
  10cdd4:	ebfff80f 	bl	10ae18 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
  10cdd8:	e51b300c 	ldr	r3, [fp, #-12]
  10cddc:	e3530001 	cmp	r3, #1
  10cde0:	0a000005 	beq	10cdfc <err_tcp+0x1c4>
  10cde4:	e51b300c 	ldr	r3, [fp, #-12]
  10cde8:	e3530004 	cmp	r3, #4
  10cdec:	0a000002 	beq	10cdfc <err_tcp+0x1c4>
  10cdf0:	e51b300c 	ldr	r3, [fp, #-12]
  10cdf4:	e3530003 	cmp	r3, #3
  10cdf8:	1a000042 	bne	10cf08 <err_tcp+0x2d0>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
  10cdfc:	e51b3008 	ldr	r3, [fp, #-8]
  10ce00:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ce04:	e2033004 	and	r3, r3, #4
  10ce08:	e3530000 	cmp	r3, #0
  10ce0c:	13a03001 	movne	r3, #1
  10ce10:	03a03000 	moveq	r3, #0
  10ce14:	e6ef3073 	uxtb	r3, r3
  10ce18:	e50b3010 	str	r3, [fp, #-16]
    SET_NONBLOCKING_CONNECT(conn, 0);
  10ce1c:	e51b3008 	ldr	r3, [fp, #-8]
  10ce20:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ce24:	e3c33004 	bic	r3, r3, #4
  10ce28:	e6ef2073 	uxtb	r2, r3
  10ce2c:	e51b3008 	ldr	r3, [fp, #-8]
  10ce30:	e5c32030 	strb	r2, [r3, #48]	; 0x30

    if (!was_nonblocking_connect) {
  10ce34:	e51b3010 	ldr	r3, [fp, #-16]
  10ce38:	e3530000 	cmp	r3, #0
  10ce3c:	1a00003d 	bne	10cf38 <err_tcp+0x300>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10ce40:	e51b3008 	ldr	r3, [fp, #-8]
  10ce44:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ce48:	e3530000 	cmp	r3, #0
  10ce4c:	1a000006 	bne	10ce6c <err_tcp+0x234>
  10ce50:	e3060770 	movw	r0, #26480	; 0x6770
  10ce54:	e3400014 	movt	r0, #20
  10ce58:	ebffd8ad 	bl	103114 <rt_kprintf>
  10ce5c:	e30011ad 	movw	r1, #429	; 0x1ad
  10ce60:	e3060668 	movw	r0, #26216	; 0x6668
  10ce64:	e3400014 	movt	r0, #20
  10ce68:	ebfff891 	bl	10b0b4 <sys_arch_assert>
      conn->current_msg->err = err;
  10ce6c:	e51b3008 	ldr	r3, [fp, #-8]
  10ce70:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ce74:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10ce78:	e5c32004 	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10ce7c:	e51b3008 	ldr	r3, [fp, #-8]
  10ce80:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ce84:	e5933000 	ldr	r3, [r3]
  10ce88:	e2833010 	add	r3, r3, #16
  10ce8c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
  10ce90:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10ce94:	ebfff6cd 	bl	10a9d0 <sys_sem_valid>
  10ce98:	e1a03000 	mov	r3, r0
  10ce9c:	e3530000 	cmp	r3, #0
  10cea0:	1a000006 	bne	10cec0 <err_tcp+0x288>
  10cea4:	e306078c 	movw	r0, #26508	; 0x678c
  10cea8:	e3400014 	movt	r0, #20
  10ceac:	ebffd898 	bl	103114 <rt_kprintf>
  10ceb0:	e3a01e1b 	mov	r1, #432	; 0x1b0
  10ceb4:	e3060668 	movw	r0, #26216	; 0x6668
  10ceb8:	e3400014 	movt	r0, #20
  10cebc:	ebfff87c 	bl	10b0b4 <sys_arch_assert>
      conn->current_msg = NULL;
  10cec0:	e51b3008 	ldr	r3, [fp, #-8]
  10cec4:	e3a02000 	mov	r2, #0
  10cec8:	e5832038 	str	r2, [r3, #56]	; 0x38
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
  10cecc:	e51b3008 	ldr	r3, [fp, #-8]
  10ced0:	e3530000 	cmp	r3, #0
  10ced4:	0a000008 	beq	10cefc <err_tcp+0x2c4>
  10ced8:	ebffd4d7 	bl	10223c <rt_enter_critical>
  10cedc:	e51b3008 	ldr	r3, [fp, #-8]
  10cee0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10cee4:	e373000c 	cmn	r3, #12
  10cee8:	ba000002 	blt	10cef8 <err_tcp+0x2c0>
  10ceec:	e51b3008 	ldr	r3, [fp, #-8]
  10cef0:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cef4:	e5c3200c 	strb	r2, [r3, #12]
  10cef8:	ebffd4d5 	bl	102254 <rt_exit_critical>
      sys_sem_signal(op_completed_sem);
  10cefc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10cf00:	ebfff674 	bl	10a8d8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
  10cf04:	ea00000b 	b	10cf38 <err_tcp+0x300>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
  10cf08:	e51b3008 	ldr	r3, [fp, #-8]
  10cf0c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cf10:	e3530000 	cmp	r3, #0
  10cf14:	0a000008 	beq	10cf3c <err_tcp+0x304>
  10cf18:	e30607a8 	movw	r0, #26536	; 0x67a8
  10cf1c:	e3400014 	movt	r0, #20
  10cf20:	ebffd87b 	bl	103114 <rt_kprintf>
  10cf24:	e30011b7 	movw	r1, #439	; 0x1b7
  10cf28:	e3060668 	movw	r0, #26216	; 0x6668
  10cf2c:	e3400014 	movt	r0, #20
  10cf30:	ebfff85f 	bl	10b0b4 <sys_arch_assert>
  }
}
  10cf34:	ea000000 	b	10cf3c <err_tcp+0x304>
      (old_state == NETCONN_CONNECT)) {
  10cf38:	e320f000 	nop	{0}
}
  10cf3c:	e320f000 	nop	{0}
  10cf40:	e24bd004 	sub	sp, fp, #4
  10cf44:	e8bd8800 	pop	{fp, pc}

0010cf48 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
  10cf48:	e92d4800 	push	{fp, lr}
  10cf4c:	e28db004 	add	fp, sp, #4
  10cf50:	e24dd010 	sub	sp, sp, #16
  10cf54:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
  10cf58:	e51b3010 	ldr	r3, [fp, #-16]
  10cf5c:	e5933008 	ldr	r3, [r3, #8]
  10cf60:	e50b3008 	str	r3, [fp, #-8]
  tcp_arg(pcb, conn);
  10cf64:	e51b1010 	ldr	r1, [fp, #-16]
  10cf68:	e51b0008 	ldr	r0, [fp, #-8]
  10cf6c:	eb004aef 	bl	11fb30 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
  10cf70:	e30c181c 	movw	r1, #51228	; 0xc81c
  10cf74:	e3401010 	movt	r1, #16
  10cf78:	e51b0008 	ldr	r0, [fp, #-8]
  10cf7c:	eb004afa 	bl	11fb6c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
  10cf80:	e30c1b1c 	movw	r1, #51996	; 0xcb1c
  10cf84:	e3401010 	movt	r1, #16
  10cf88:	e51b0008 	ldr	r0, [fp, #-8]
  10cf8c:	eb004b0f 	bl	11fbd0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
  10cf90:	e3a02002 	mov	r2, #2
  10cf94:	e30c1a00 	movw	r1, #51712	; 0xca00
  10cf98:	e3401010 	movt	r1, #16
  10cf9c:	e51b0008 	ldr	r0, [fp, #-8]
  10cfa0:	eb004b51 	bl	11fcec <tcp_poll>
  tcp_err(pcb, err_tcp);
  10cfa4:	e30c1c38 	movw	r1, #52280	; 0xcc38
  10cfa8:	e3401010 	movt	r1, #16
  10cfac:	e51b0008 	ldr	r0, [fp, #-8]
  10cfb0:	eb004b1f 	bl	11fc34 <tcp_err>
}
  10cfb4:	e320f000 	nop	{0}
  10cfb8:	e24bd004 	sub	sp, fp, #4
  10cfbc:	e8bd8800 	pop	{fp, pc}

0010cfc0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  10cfc0:	e92d4800 	push	{fp, lr}
  10cfc4:	e28db004 	add	fp, sp, #4
  10cfc8:	e24dd020 	sub	sp, sp, #32
  10cfcc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10cfd0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10cfd4:	e1a03002 	mov	r3, r2
  10cfd8:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
  10cfdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cfe0:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (conn == NULL) {
  10cfe4:	e51b3008 	ldr	r3, [fp, #-8]
  10cfe8:	e3530000 	cmp	r3, #0
  10cfec:	1a000001 	bne	10cff8 <accept_function+0x38>
    return ERR_VAL;
  10cff0:	e3e03005 	mvn	r3, #5
  10cff4:	ea00007d 	b	10d1f0 <accept_function+0x230>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10cff8:	e51b3008 	ldr	r3, [fp, #-8]
  10cffc:	e2833018 	add	r3, r3, #24
  10d000:	e1a00003 	mov	r0, r3
  10d004:	ebfff7e1 	bl	10af90 <sys_mbox_valid>
  10d008:	e1a03000 	mov	r3, r0
  10d00c:	e3530000 	cmp	r3, #0
  10d010:	1a000001 	bne	10d01c <accept_function+0x5c>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
  10d014:	e3e03005 	mvn	r3, #5
  10d018:	ea000074 	b	10d1f0 <accept_function+0x230>
  }

  if (newpcb == NULL) {
  10d01c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10d020:	e3530000 	cmp	r3, #0
  10d024:	1a000014 	bne	10d07c <accept_function+0xbc>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10d028:	e51b3008 	ldr	r3, [fp, #-8]
  10d02c:	e2833018 	add	r3, r3, #24
  10d030:	e30f15a4 	movw	r1, #62884	; 0xf5a4
  10d034:	e3401014 	movt	r1, #20
  10d038:	e1a00003 	mov	r0, r3
  10d03c:	ebfff775 	bl	10ae18 <sys_mbox_trypost>
  10d040:	e1a03000 	mov	r3, r0
  10d044:	e3530000 	cmp	r3, #0
  10d048:	1a000009 	bne	10d074 <accept_function+0xb4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d04c:	e51b3008 	ldr	r3, [fp, #-8]
  10d050:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d054:	e3530000 	cmp	r3, #0
  10d058:	0a000005 	beq	10d074 <accept_function+0xb4>
  10d05c:	e51b3008 	ldr	r3, [fp, #-8]
  10d060:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d064:	e3a02000 	mov	r2, #0
  10d068:	e3a01000 	mov	r1, #0
  10d06c:	e51b0008 	ldr	r0, [fp, #-8]
  10d070:	e12fff33 	blx	r3
    }
    return ERR_VAL;
  10d074:	e3e03005 	mvn	r3, #5
  10d078:	ea00005c 	b	10d1f0 <accept_function+0x230>
  }

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
  10d07c:	e51b3008 	ldr	r3, [fp, #-8]
  10d080:	e5932000 	ldr	r2, [r3]
  10d084:	e51b3008 	ldr	r3, [fp, #-8]
  10d088:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d08c:	e1a01003 	mov	r1, r3
  10d090:	e1a00002 	mov	r0, r2
  10d094:	eb0000f7 	bl	10d478 <netconn_alloc>
  10d098:	e50b000c 	str	r0, [fp, #-12]
  if (newconn == NULL) {
  10d09c:	e51b300c 	ldr	r3, [fp, #-12]
  10d0a0:	e3530000 	cmp	r3, #0
  10d0a4:	1a000014 	bne	10d0fc <accept_function+0x13c>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10d0a8:	e51b3008 	ldr	r3, [fp, #-8]
  10d0ac:	e2833018 	add	r3, r3, #24
  10d0b0:	e30f15a4 	movw	r1, #62884	; 0xf5a4
  10d0b4:	e3401014 	movt	r1, #20
  10d0b8:	e1a00003 	mov	r0, r3
  10d0bc:	ebfff755 	bl	10ae18 <sys_mbox_trypost>
  10d0c0:	e1a03000 	mov	r3, r0
  10d0c4:	e3530000 	cmp	r3, #0
  10d0c8:	1a000009 	bne	10d0f4 <accept_function+0x134>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d0cc:	e51b3008 	ldr	r3, [fp, #-8]
  10d0d0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d0d4:	e3530000 	cmp	r3, #0
  10d0d8:	0a000005 	beq	10d0f4 <accept_function+0x134>
  10d0dc:	e51b3008 	ldr	r3, [fp, #-8]
  10d0e0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d0e4:	e3a02000 	mov	r2, #0
  10d0e8:	e3a01000 	mov	r1, #0
  10d0ec:	e51b0008 	ldr	r0, [fp, #-8]
  10d0f0:	e12fff33 	blx	r3
    }
    return ERR_MEM;
  10d0f4:	e3e03000 	mvn	r3, #0
  10d0f8:	ea00003c 	b	10d1f0 <accept_function+0x230>
  }
  newconn->pcb.tcp = newpcb;
  10d0fc:	e51b300c 	ldr	r3, [fp, #-12]
  10d100:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10d104:	e5832008 	str	r2, [r3, #8]
  setup_tcp(newconn);
  10d108:	e51b000c 	ldr	r0, [fp, #-12]
  10d10c:	ebffff8d 	bl	10cf48 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
  10d110:	e51b300c 	ldr	r3, [fp, #-12]
  10d114:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10d118:	e5c3200c 	strb	r2, [r3, #12]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
  10d11c:	e51b3008 	ldr	r3, [fp, #-8]
  10d120:	e2833018 	add	r3, r3, #24
  10d124:	e51b100c 	ldr	r1, [fp, #-12]
  10d128:	e1a00003 	mov	r0, r3
  10d12c:	ebfff739 	bl	10ae18 <sys_mbox_trypost>
  10d130:	e1a03000 	mov	r3, r0
  10d134:	e3530000 	cmp	r3, #0
  10d138:	0a000021 	beq	10d1c4 <accept_function+0x204>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
  10d13c:	e51b300c 	ldr	r3, [fp, #-12]
  10d140:	e5933008 	ldr	r3, [r3, #8]
  10d144:	e50b3010 	str	r3, [fp, #-16]
    tcp_arg(pcb, NULL);
  10d148:	e3a01000 	mov	r1, #0
  10d14c:	e51b0010 	ldr	r0, [fp, #-16]
  10d150:	eb004a76 	bl	11fb30 <tcp_arg>
    tcp_recv(pcb, NULL);
  10d154:	e3a01000 	mov	r1, #0
  10d158:	e51b0010 	ldr	r0, [fp, #-16]
  10d15c:	eb004a82 	bl	11fb6c <tcp_recv>
    tcp_sent(pcb, NULL);
  10d160:	e3a01000 	mov	r1, #0
  10d164:	e51b0010 	ldr	r0, [fp, #-16]
  10d168:	eb004a98 	bl	11fbd0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
  10d16c:	e3a02000 	mov	r2, #0
  10d170:	e3a01000 	mov	r1, #0
  10d174:	e51b0010 	ldr	r0, [fp, #-16]
  10d178:	eb004adb 	bl	11fcec <tcp_poll>
    tcp_err(pcb, NULL);
  10d17c:	e3a01000 	mov	r1, #0
  10d180:	e51b0010 	ldr	r0, [fp, #-16]
  10d184:	eb004aaa 	bl	11fc34 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
  10d188:	e51b300c 	ldr	r3, [fp, #-12]
  10d18c:	e3a02000 	mov	r2, #0
  10d190:	e5832008 	str	r2, [r3, #8]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
  10d194:	e51b300c 	ldr	r3, [fp, #-12]
  10d198:	e2833014 	add	r3, r3, #20
  10d19c:	e1a00003 	mov	r0, r3
  10d1a0:	ebfff6b3 	bl	10ac74 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
  10d1a4:	e51b300c 	ldr	r3, [fp, #-12]
  10d1a8:	e2833014 	add	r3, r3, #20
  10d1ac:	e1a00003 	mov	r0, r3
  10d1b0:	ebfff780 	bl	10afb8 <sys_mbox_set_invalid>
    netconn_free(newconn);
  10d1b4:	e51b000c 	ldr	r0, [fp, #-12]
  10d1b8:	eb000122 	bl	10d648 <netconn_free>
    return ERR_MEM;
  10d1bc:	e3e03000 	mvn	r3, #0
  10d1c0:	ea00000a 	b	10d1f0 <accept_function+0x230>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d1c4:	e51b3008 	ldr	r3, [fp, #-8]
  10d1c8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d1cc:	e3530000 	cmp	r3, #0
  10d1d0:	0a000005 	beq	10d1ec <accept_function+0x22c>
  10d1d4:	e51b3008 	ldr	r3, [fp, #-8]
  10d1d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d1dc:	e3a02000 	mov	r2, #0
  10d1e0:	e3a01000 	mov	r1, #0
  10d1e4:	e51b0008 	ldr	r0, [fp, #-8]
  10d1e8:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10d1ec:	e3a03000 	mov	r3, #0
}
  10d1f0:	e1a00003 	mov	r0, r3
  10d1f4:	e24bd004 	sub	sp, fp, #4
  10d1f8:	e8bd8800 	pop	{fp, pc}

0010d1fc <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
  10d1fc:	e92d4810 	push	{r4, fp, lr}
  10d200:	e28db008 	add	fp, sp, #8
  10d204:	e24dd014 	sub	sp, sp, #20
  10d208:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
  10d20c:	e3a03000 	mov	r3, #0
  10d210:	e50b3010 	str	r3, [fp, #-16]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
  10d214:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d218:	e5933000 	ldr	r3, [r3]
  10d21c:	e5933008 	ldr	r3, [r3, #8]
  10d220:	e3530000 	cmp	r3, #0
  10d224:	0a000006 	beq	10d244 <pcb_new+0x48>
  10d228:	e30607c4 	movw	r0, #26564	; 0x67c4
  10d22c:	e3400014 	movt	r0, #20
  10d230:	ebffd7b7 	bl	103114 <rt_kprintf>
  10d234:	e3001226 	movw	r1, #550	; 0x226
  10d238:	e3060668 	movw	r0, #26216	; 0x6668
  10d23c:	e3400014 	movt	r0, #20
  10d240:	ebfff79b 	bl	10b0b4 <sys_arch_assert>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
  10d244:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d248:	e5933000 	ldr	r3, [r3]
  10d24c:	e5933000 	ldr	r3, [r3]
  10d250:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d254:	e3530020 	cmp	r3, #32
  10d258:	0a00001d 	beq	10d2d4 <pcb_new+0xd8>
  10d25c:	e3530040 	cmp	r3, #64	; 0x40
  10d260:	0a000002 	beq	10d270 <pcb_new+0x74>
  10d264:	e3530010 	cmp	r3, #16
  10d268:	0a00003a 	beq	10d358 <pcb_new+0x15c>
  10d26c:	ea00004b 	b	10d3a0 <pcb_new+0x1a4>
#if LWIP_RAW
  case NETCONN_RAW:
    msg->conn->pcb.raw = raw_new_ip_type(iptype, msg->msg.n.proto);
  10d270:	e51b3010 	ldr	r3, [fp, #-16]
  10d274:	e6ef2073 	uxtb	r2, r3
  10d278:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d27c:	e5d31008 	ldrb	r1, [r3, #8]
  10d280:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d284:	e5934000 	ldr	r4, [r3]
  10d288:	e1a00002 	mov	r0, r2
  10d28c:	eb003d6a 	bl	11c83c <raw_new_ip_type>
  10d290:	e1a03000 	mov	r3, r0
  10d294:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.raw != NULL) {
  10d298:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d29c:	e5933000 	ldr	r3, [r3]
  10d2a0:	e5933008 	ldr	r3, [r3, #8]
  10d2a4:	e3530000 	cmp	r3, #0
  10d2a8:	0a000040 	beq	10d3b0 <pcb_new+0x1b4>
      if (NETCONNTYPE_ISIPV6(msg->conn->type) && msg->conn->pcb.raw->protocol == IP6_NEXTH_ICMP6) {
        msg->conn->pcb.raw->chksum_reqd = 1;
        msg->conn->pcb.raw->chksum_offset = 2;
      }
#endif /* LWIP_IPV6 */
      raw_recv(msg->conn->pcb.raw, recv_raw, msg->conn);
  10d2ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2b0:	e5933000 	ldr	r3, [r3]
  10d2b4:	e5930008 	ldr	r0, [r3, #8]
  10d2b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2bc:	e5933000 	ldr	r3, [r3]
  10d2c0:	e1a02003 	mov	r2, r3
  10d2c4:	e30c141c 	movw	r1, #50204	; 0xc41c
  10d2c8:	e3401010 	movt	r1, #16
  10d2cc:	eb003c57 	bl	11c430 <raw_recv>
    }
    break;
  10d2d0:	ea000036 	b	10d3b0 <pcb_new+0x1b4>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
  10d2d4:	e51b3010 	ldr	r3, [fp, #-16]
  10d2d8:	e6ef2073 	uxtb	r2, r3
  10d2dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2e0:	e5934000 	ldr	r4, [r3]
  10d2e4:	e1a00002 	mov	r0, r2
  10d2e8:	eb006dff 	bl	128aec <udp_new_ip_type>
  10d2ec:	e1a03000 	mov	r3, r0
  10d2f0:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.udp != NULL) {
  10d2f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2f8:	e5933000 	ldr	r3, [r3]
  10d2fc:	e5933008 	ldr	r3, [r3, #8]
  10d300:	e3530000 	cmp	r3, #0
  10d304:	0a00002b 	beq	10d3b8 <pcb_new+0x1bc>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
  10d308:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d30c:	e5933000 	ldr	r3, [r3]
  10d310:	e5933000 	ldr	r3, [r3]
  10d314:	e3530022 	cmp	r3, #34	; 0x22
  10d318:	1a000004 	bne	10d330 <pcb_new+0x134>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
  10d31c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d320:	e5933000 	ldr	r3, [r3]
  10d324:	e5933008 	ldr	r3, [r3, #8]
  10d328:	e3a02001 	mov	r2, #1
  10d32c:	e5c32010 	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
  10d330:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d334:	e5933000 	ldr	r3, [r3]
  10d338:	e5930008 	ldr	r0, [r3, #8]
  10d33c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d340:	e5933000 	ldr	r3, [r3]
  10d344:	e1a02003 	mov	r2, r3
  10d348:	e30c160c 	movw	r1, #50700	; 0xc60c
  10d34c:	e3401010 	movt	r1, #16
  10d350:	eb006d8a 	bl	128980 <udp_recv>
    }
    break;
  10d354:	ea000017 	b	10d3b8 <pcb_new+0x1bc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
  10d358:	e51b3010 	ldr	r3, [fp, #-16]
  10d35c:	e6ef2073 	uxtb	r2, r3
  10d360:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d364:	e5934000 	ldr	r4, [r3]
  10d368:	e1a00002 	mov	r0, r2
  10d36c:	eb0049e3 	bl	11fb00 <tcp_new_ip_type>
  10d370:	e1a03000 	mov	r3, r0
  10d374:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.tcp != NULL) {
  10d378:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d37c:	e5933000 	ldr	r3, [r3]
  10d380:	e5933008 	ldr	r3, [r3, #8]
  10d384:	e3530000 	cmp	r3, #0
  10d388:	0a00000c 	beq	10d3c0 <pcb_new+0x1c4>
      setup_tcp(msg->conn);
  10d38c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d390:	e5933000 	ldr	r3, [r3]
  10d394:	e1a00003 	mov	r0, r3
  10d398:	ebfffeea 	bl	10cf48 <setup_tcp>
    }
    break;
  10d39c:	ea000007 	b	10d3c0 <pcb_new+0x1c4>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
  10d3a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d3a4:	e3e02005 	mvn	r2, #5
  10d3a8:	e5c32004 	strb	r2, [r3, #4]
    return;
  10d3ac:	ea00000c 	b	10d3e4 <pcb_new+0x1e8>
    break;
  10d3b0:	e320f000 	nop	{0}
  10d3b4:	ea000002 	b	10d3c4 <pcb_new+0x1c8>
    break;
  10d3b8:	e320f000 	nop	{0}
  10d3bc:	ea000000 	b	10d3c4 <pcb_new+0x1c8>
    break;
  10d3c0:	e320f000 	nop	{0}
  }
  if (msg->conn->pcb.ip == NULL) {
  10d3c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d3c8:	e5933000 	ldr	r3, [r3]
  10d3cc:	e5933008 	ldr	r3, [r3, #8]
  10d3d0:	e3530000 	cmp	r3, #0
  10d3d4:	1a000002 	bne	10d3e4 <pcb_new+0x1e8>
    msg->err = ERR_MEM;
  10d3d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d3dc:	e3e02000 	mvn	r2, #0
  10d3e0:	e5c32004 	strb	r2, [r3, #4]
  }
}
  10d3e4:	e24bd008 	sub	sp, fp, #8
  10d3e8:	e8bd8810 	pop	{r4, fp, pc}

0010d3ec <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
  10d3ec:	e92d4800 	push	{fp, lr}
  10d3f0:	e28db004 	add	fp, sp, #4
  10d3f4:	e24dd010 	sub	sp, sp, #16
  10d3f8:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10d3fc:	e51b3010 	ldr	r3, [fp, #-16]
  10d400:	e50b3008 	str	r3, [fp, #-8]

  msg->err = ERR_OK;
  10d404:	e51b3008 	ldr	r3, [fp, #-8]
  10d408:	e3a02000 	mov	r2, #0
  10d40c:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
  10d410:	e51b3008 	ldr	r3, [fp, #-8]
  10d414:	e5933000 	ldr	r3, [r3]
  10d418:	e5933008 	ldr	r3, [r3, #8]
  10d41c:	e3530000 	cmp	r3, #0
  10d420:	1a000001 	bne	10d42c <lwip_netconn_do_newconn+0x40>
    pcb_new(msg);
  10d424:	e51b0008 	ldr	r0, [fp, #-8]
  10d428:	ebffff73 	bl	10d1fc <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
  10d42c:	e51b3008 	ldr	r3, [fp, #-8]
  10d430:	e5933000 	ldr	r3, [r3]
  10d434:	e3530000 	cmp	r3, #0
  10d438:	0a00000b 	beq	10d46c <lwip_netconn_do_newconn+0x80>
  10d43c:	ebffd37e 	bl	10223c <rt_enter_critical>
  10d440:	e51b3008 	ldr	r3, [fp, #-8]
  10d444:	e5933000 	ldr	r3, [r3]
  10d448:	e1d330dc 	ldrsb	r3, [r3, #12]
  10d44c:	e373000c 	cmn	r3, #12
  10d450:	ba000004 	blt	10d468 <lwip_netconn_do_newconn+0x7c>
  10d454:	e51b3008 	ldr	r3, [fp, #-8]
  10d458:	e5933000 	ldr	r3, [r3]
  10d45c:	e51b2008 	ldr	r2, [fp, #-8]
  10d460:	e1d220d4 	ldrsb	r2, [r2, #4]
  10d464:	e5c3200c 	strb	r2, [r3, #12]
  10d468:	ebffd379 	bl	102254 <rt_exit_critical>
}
  10d46c:	e320f000 	nop	{0}
  10d470:	e24bd004 	sub	sp, fp, #4
  10d474:	e8bd8800 	pop	{fp, pc}

0010d478 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
  10d478:	e92d4800 	push	{fp, lr}
  10d47c:	e28db004 	add	fp, sp, #4
  10d480:	e24dd010 	sub	sp, sp, #16
  10d484:	e50b0010 	str	r0, [fp, #-16]
  10d488:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
  10d48c:	e3002287 	movw	r2, #647	; 0x287
  10d490:	e3061668 	movw	r1, #26216	; 0x6668
  10d494:	e3401014 	movt	r1, #20
  10d498:	e3a00008 	mov	r0, #8
  10d49c:	eb002efe 	bl	11909c <memp_malloc_fn>
  10d4a0:	e50b000c 	str	r0, [fp, #-12]
  if (conn == NULL) {
  10d4a4:	e51b300c 	ldr	r3, [fp, #-12]
  10d4a8:	e3530000 	cmp	r3, #0
  10d4ac:	1a000001 	bne	10d4b8 <netconn_alloc+0x40>
    return NULL;
  10d4b0:	e3a03000 	mov	r3, #0
  10d4b4:	ea000060 	b	10d63c <netconn_alloc+0x1c4>
  }

  conn->last_err = ERR_OK;
  10d4b8:	e51b300c 	ldr	r3, [fp, #-12]
  10d4bc:	e3a02000 	mov	r2, #0
  10d4c0:	e5c3200c 	strb	r2, [r3, #12]
  conn->type = t;
  10d4c4:	e51b300c 	ldr	r3, [fp, #-12]
  10d4c8:	e51b2010 	ldr	r2, [fp, #-16]
  10d4cc:	e5832000 	str	r2, [r3]
  conn->pcb.tcp = NULL;
  10d4d0:	e51b300c 	ldr	r3, [fp, #-12]
  10d4d4:	e3a02000 	mov	r2, #0
  10d4d8:	e5832008 	str	r2, [r3, #8]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
  10d4dc:	e51b3010 	ldr	r3, [fp, #-16]
  10d4e0:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d4e4:	e3530020 	cmp	r3, #32
  10d4e8:	0a000007 	beq	10d50c <netconn_alloc+0x94>
  10d4ec:	e3530040 	cmp	r3, #64	; 0x40
  10d4f0:	0a000002 	beq	10d500 <netconn_alloc+0x88>
  10d4f4:	e3530010 	cmp	r3, #16
  10d4f8:	0a000006 	beq	10d518 <netconn_alloc+0xa0>
  10d4fc:	ea000008 	b	10d524 <netconn_alloc+0xac>
#if LWIP_RAW
  case NETCONN_RAW:
    size = DEFAULT_RAW_RECVMBOX_SIZE;
  10d500:	e3a03001 	mov	r3, #1
  10d504:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d508:	ea00000d 	b	10d544 <netconn_alloc+0xcc>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
  10d50c:	e3a03040 	mov	r3, #64	; 0x40
  10d510:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d514:	ea00000a 	b	10d544 <netconn_alloc+0xcc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
  10d518:	e3a03040 	mov	r3, #64	; 0x40
  10d51c:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d520:	ea000007 	b	10d544 <netconn_alloc+0xcc>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
  10d524:	e30607e4 	movw	r0, #26596	; 0x67e4
  10d528:	e3400014 	movt	r0, #20
  10d52c:	ebffd6f8 	bl	103114 <rt_kprintf>
  10d530:	e30012a2 	movw	r1, #674	; 0x2a2
  10d534:	e3060668 	movw	r0, #26216	; 0x6668
  10d538:	e3400014 	movt	r0, #20
  10d53c:	ebfff6dc 	bl	10b0b4 <sys_arch_assert>
    goto free_and_return;
  10d540:	ea000039 	b	10d62c <netconn_alloc+0x1b4>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
  10d544:	e51b300c 	ldr	r3, [fp, #-12]
  10d548:	e2833014 	add	r3, r3, #20
  10d54c:	e51b1008 	ldr	r1, [fp, #-8]
  10d550:	e1a00003 	mov	r0, r3
  10d554:	ebfff591 	bl	10aba0 <sys_mbox_new>
  10d558:	e1a03000 	mov	r3, r0
  10d55c:	e3530000 	cmp	r3, #0
  10d560:	1a000030 	bne	10d628 <netconn_alloc+0x1b0>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
  10d564:	e51b300c 	ldr	r3, [fp, #-12]
  10d568:	e2833010 	add	r3, r3, #16
  10d56c:	e3a01000 	mov	r1, #0
  10d570:	e1a00003 	mov	r0, r3
  10d574:	ebfff4a1 	bl	10a800 <sys_sem_new>
  10d578:	e1a03000 	mov	r3, r0
  10d57c:	e3530000 	cmp	r3, #0
  10d580:	0a000004 	beq	10d598 <netconn_alloc+0x120>
    sys_mbox_free(&conn->recvmbox);
  10d584:	e51b300c 	ldr	r3, [fp, #-12]
  10d588:	e2833014 	add	r3, r3, #20
  10d58c:	e1a00003 	mov	r0, r3
  10d590:	ebfff5b7 	bl	10ac74 <sys_mbox_free>
    goto free_and_return;
  10d594:	ea000024 	b	10d62c <netconn_alloc+0x1b4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
  10d598:	e51b300c 	ldr	r3, [fp, #-12]
  10d59c:	e2833018 	add	r3, r3, #24
  10d5a0:	e1a00003 	mov	r0, r3
  10d5a4:	ebfff683 	bl	10afb8 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
  10d5a8:	e51b300c 	ldr	r3, [fp, #-12]
  10d5ac:	e3a02000 	mov	r2, #0
  10d5b0:	e5832004 	str	r2, [r3, #4]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
  10d5b4:	e51b300c 	ldr	r3, [fp, #-12]
  10d5b8:	e3e02000 	mvn	r2, #0
  10d5bc:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
  10d5c0:	e51b300c 	ldr	r3, [fp, #-12]
  10d5c4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10d5c8:	e583203c 	str	r2, [r3, #60]	; 0x3c
#if LWIP_TCP
  conn->current_msg  = NULL;
  10d5cc:	e51b300c 	ldr	r3, [fp, #-12]
  10d5d0:	e3a02000 	mov	r2, #0
  10d5d4:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->write_offset = 0;
  10d5d8:	e51b300c 	ldr	r3, [fp, #-12]
  10d5dc:	e3a02000 	mov	r2, #0
  10d5e0:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
  10d5e4:	e51b300c 	ldr	r3, [fp, #-12]
  10d5e8:	e3a02000 	mov	r2, #0
  10d5ec:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
  10d5f0:	e51b300c 	ldr	r3, [fp, #-12]
  10d5f4:	e3a02000 	mov	r2, #0
  10d5f8:	e5832024 	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
  10d5fc:	e51b300c 	ldr	r3, [fp, #-12]
  10d600:	e3a02601 	mov	r2, #1048576	; 0x100000
  10d604:	e5832028 	str	r2, [r3, #40]	; 0x28
  conn->recv_avail   = 0;
  10d608:	e51b300c 	ldr	r3, [fp, #-12]
  10d60c:	e3a02000 	mov	r2, #0
  10d610:	e583202c 	str	r2, [r3, #44]	; 0x2c
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
  10d614:	e51b300c 	ldr	r3, [fp, #-12]
  10d618:	e3a02000 	mov	r2, #0
  10d61c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  return conn;
  10d620:	e51b300c 	ldr	r3, [fp, #-12]
  10d624:	ea000004 	b	10d63c <netconn_alloc+0x1c4>
    goto free_and_return;
  10d628:	e320f000 	nop	{0}
free_and_return:
  memp_free(MEMP_NETCONN, conn);
  10d62c:	e51b100c 	ldr	r1, [fp, #-12]
  10d630:	e3a00008 	mov	r0, #8
  10d634:	eb002f00 	bl	11923c <memp_free>
  return NULL;
  10d638:	e3a03000 	mov	r3, #0
}
  10d63c:	e1a00003 	mov	r0, r3
  10d640:	e24bd004 	sub	sp, fp, #4
  10d644:	e8bd8800 	pop	{fp, pc}

0010d648 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
  10d648:	e92d4800 	push	{fp, lr}
  10d64c:	e28db004 	add	fp, sp, #4
  10d650:	e24dd008 	sub	sp, sp, #8
  10d654:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
  10d658:	e51b3008 	ldr	r3, [fp, #-8]
  10d65c:	e5933008 	ldr	r3, [r3, #8]
  10d660:	e3530000 	cmp	r3, #0
  10d664:	0a000006 	beq	10d684 <netconn_free+0x3c>
  10d668:	e306080c 	movw	r0, #26636	; 0x680c
  10d66c:	e3400014 	movt	r0, #20
  10d670:	ebffd6a7 	bl	103114 <rt_kprintf>
  10d674:	e30012da 	movw	r1, #730	; 0x2da
  10d678:	e3060668 	movw	r0, #26216	; 0x6668
  10d67c:	e3400014 	movt	r0, #20
  10d680:	ebfff68b 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
  10d684:	e51b3008 	ldr	r3, [fp, #-8]
  10d688:	e2833014 	add	r3, r3, #20
  10d68c:	e1a00003 	mov	r0, r3
  10d690:	ebfff63e 	bl	10af90 <sys_mbox_valid>
  10d694:	e1a03000 	mov	r3, r0
  10d698:	e3530000 	cmp	r3, #0
  10d69c:	0a000006 	beq	10d6bc <netconn_free+0x74>
  10d6a0:	e306083c 	movw	r0, #26684	; 0x683c
  10d6a4:	e3400014 	movt	r0, #20
  10d6a8:	ebffd699 	bl	103114 <rt_kprintf>
  10d6ac:	e3a01fb7 	mov	r1, #732	; 0x2dc
  10d6b0:	e3060668 	movw	r0, #26216	; 0x6668
  10d6b4:	e3400014 	movt	r0, #20
  10d6b8:	ebfff67d 	bl	10b0b4 <sys_arch_assert>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
  10d6bc:	e51b3008 	ldr	r3, [fp, #-8]
  10d6c0:	e2833018 	add	r3, r3, #24
  10d6c4:	e1a00003 	mov	r0, r3
  10d6c8:	ebfff630 	bl	10af90 <sys_mbox_valid>
  10d6cc:	e1a03000 	mov	r3, r0
  10d6d0:	e3530000 	cmp	r3, #0
  10d6d4:	0a000006 	beq	10d6f4 <netconn_free+0xac>
  10d6d8:	e3060878 	movw	r0, #26744	; 0x6878
  10d6dc:	e3400014 	movt	r0, #20
  10d6e0:	ebffd68b 	bl	103114 <rt_kprintf>
  10d6e4:	e30012df 	movw	r1, #735	; 0x2df
  10d6e8:	e3060668 	movw	r0, #26216	; 0x6668
  10d6ec:	e3400014 	movt	r0, #20
  10d6f0:	ebfff66f 	bl	10b0b4 <sys_arch_assert>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
  10d6f4:	e51b3008 	ldr	r3, [fp, #-8]
  10d6f8:	e2833010 	add	r3, r3, #16
  10d6fc:	e1a00003 	mov	r0, r3
  10d700:	ebfff469 	bl	10a8ac <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
  10d704:	e51b3008 	ldr	r3, [fp, #-8]
  10d708:	e2833010 	add	r3, r3, #16
  10d70c:	e1a00003 	mov	r0, r3
  10d710:	ebfff4b8 	bl	10a9f8 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
  10d714:	e51b1008 	ldr	r1, [fp, #-8]
  10d718:	e3a00008 	mov	r0, #8
  10d71c:	eb002ec6 	bl	11923c <memp_free>
}
  10d720:	e320f000 	nop	{0}
  10d724:	e24bd004 	sub	sp, fp, #4
  10d728:	e8bd8800 	pop	{fp, pc}

0010d72c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
  10d72c:	e92d4800 	push	{fp, lr}
  10d730:	e28db004 	add	fp, sp, #4
  10d734:	e24dd018 	sub	sp, sp, #24
  10d738:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10d73c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d740:	e2833014 	add	r3, r3, #20
  10d744:	e1a00003 	mov	r0, r3
  10d748:	ebfff610 	bl	10af90 <sys_mbox_valid>
  10d74c:	e1a03000 	mov	r3, r0
  10d750:	e3530000 	cmp	r3, #0
  10d754:	0a00002c 	beq	10d80c <netconn_drain+0xe0>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d758:	ea00001a 	b	10d7c8 <netconn_drain+0x9c>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
  10d75c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d760:	e5933000 	ldr	r3, [r3]
  10d764:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d768:	e3530010 	cmp	r3, #16
  10d76c:	1a000012 	bne	10d7bc <netconn_drain+0x90>
        if (mem != NULL) {
  10d770:	e51b3010 	ldr	r3, [fp, #-16]
  10d774:	e3530000 	cmp	r3, #0
  10d778:	0a000012 	beq	10d7c8 <netconn_drain+0x9c>
          p = (struct pbuf*)mem;
  10d77c:	e51b3010 	ldr	r3, [fp, #-16]
  10d780:	e50b3008 	str	r3, [fp, #-8]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
  10d784:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d788:	e5933008 	ldr	r3, [r3, #8]
  10d78c:	e3530000 	cmp	r3, #0
  10d790:	0a000006 	beq	10d7b0 <netconn_drain+0x84>
            tcp_recved(conn->pcb.tcp, p->tot_len);
  10d794:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d798:	e5932008 	ldr	r2, [r3, #8]
  10d79c:	e51b3008 	ldr	r3, [fp, #-8]
  10d7a0:	e1d330b8 	ldrh	r3, [r3, #8]
  10d7a4:	e1a01003 	mov	r1, r3
  10d7a8:	e1a00002 	mov	r0, r2
  10d7ac:	eb004238 	bl	11e094 <tcp_recved>
          }
          pbuf_free(p);
  10d7b0:	e51b0008 	ldr	r0, [fp, #-8]
  10d7b4:	eb0035ae 	bl	11ae74 <pbuf_free>
  10d7b8:	ea000002 	b	10d7c8 <netconn_drain+0x9c>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
  10d7bc:	e51b3010 	ldr	r3, [fp, #-16]
  10d7c0:	e1a00003 	mov	r0, r3
  10d7c4:	eb0009c9 	bl	10fef0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d7c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d7cc:	e2833014 	add	r3, r3, #20
  10d7d0:	e24b2010 	sub	r2, fp, #16
  10d7d4:	e1a01002 	mov	r1, r2
  10d7d8:	e1a00003 	mov	r0, r3
  10d7dc:	ebfff5d3 	bl	10af30 <sys_arch_mbox_tryfetch>
  10d7e0:	e1a03000 	mov	r3, r0
  10d7e4:	e3730001 	cmn	r3, #1
  10d7e8:	1affffdb 	bne	10d75c <netconn_drain+0x30>
      }
    }
    sys_mbox_free(&conn->recvmbox);
  10d7ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d7f0:	e2833014 	add	r3, r3, #20
  10d7f4:	e1a00003 	mov	r0, r3
  10d7f8:	ebfff51d 	bl	10ac74 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
  10d7fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d800:	e2833014 	add	r3, r3, #20
  10d804:	e1a00003 	mov	r0, r3
  10d808:	ebfff5ea 	bl	10afb8 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10d80c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d810:	e2833018 	add	r3, r3, #24
  10d814:	e1a00003 	mov	r0, r3
  10d818:	ebfff5dc 	bl	10af90 <sys_mbox_valid>
  10d81c:	e1a03000 	mov	r3, r0
  10d820:	e3530000 	cmp	r3, #0
  10d824:	0a000027 	beq	10d8c8 <netconn_drain+0x19c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10d828:	ea000015 	b	10d884 <netconn_drain+0x158>
      if (mem != &netconn_aborted) {
  10d82c:	e51b2010 	ldr	r2, [fp, #-16]
  10d830:	e30f35a4 	movw	r3, #62884	; 0xf5a4
  10d834:	e3403014 	movt	r3, #20
  10d838:	e1520003 	cmp	r2, r3
  10d83c:	0a000010 	beq	10d884 <netconn_drain+0x158>
        struct netconn *newconn = (struct netconn *)mem;
  10d840:	e51b3010 	ldr	r3, [fp, #-16]
  10d844:	e50b300c 	str	r3, [fp, #-12]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
  10d848:	e51b000c 	ldr	r0, [fp, #-12]
  10d84c:	ebffffb6 	bl	10d72c <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
  10d850:	e51b300c 	ldr	r3, [fp, #-12]
  10d854:	e5933008 	ldr	r3, [r3, #8]
  10d858:	e3530000 	cmp	r3, #0
  10d85c:	0a000006 	beq	10d87c <netconn_drain+0x150>
          tcp_abort(newconn->pcb.tcp);
  10d860:	e51b300c 	ldr	r3, [fp, #-12]
  10d864:	e5933008 	ldr	r3, [r3, #8]
  10d868:	e1a00003 	mov	r0, r3
  10d86c:	eb004059 	bl	11d9d8 <tcp_abort>
          newconn->pcb.tcp = NULL;
  10d870:	e51b300c 	ldr	r3, [fp, #-12]
  10d874:	e3a02000 	mov	r2, #0
  10d878:	e5832008 	str	r2, [r3, #8]
        }
        netconn_free(newconn);
  10d87c:	e51b000c 	ldr	r0, [fp, #-12]
  10d880:	ebffff70 	bl	10d648 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10d884:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d888:	e2833018 	add	r3, r3, #24
  10d88c:	e24b2010 	sub	r2, fp, #16
  10d890:	e1a01002 	mov	r1, r2
  10d894:	e1a00003 	mov	r0, r3
  10d898:	ebfff5a4 	bl	10af30 <sys_arch_mbox_tryfetch>
  10d89c:	e1a03000 	mov	r3, r0
  10d8a0:	e3730001 	cmn	r3, #1
  10d8a4:	1affffe0 	bne	10d82c <netconn_drain+0x100>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
  10d8a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d8ac:	e2833018 	add	r3, r3, #24
  10d8b0:	e1a00003 	mov	r0, r3
  10d8b4:	ebfff4ee 	bl	10ac74 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
  10d8b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d8bc:	e2833018 	add	r3, r3, #24
  10d8c0:	e1a00003 	mov	r0, r3
  10d8c4:	ebfff5bb 	bl	10afb8 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
  10d8c8:	e320f000 	nop	{0}
  10d8cc:	e24bd004 	sub	sp, fp, #4
  10d8d0:	e8bd8800 	pop	{fp, pc}

0010d8d4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10d8d4:	e92d4800 	push	{fp, lr}
  10d8d8:	e28db004 	add	fp, sp, #4
  10d8dc:	e24dd020 	sub	sp, sp, #32
  10d8e0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10d8e4:	e1a03001 	mov	r3, r1
  10d8e8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
  10d8ec:	e3a03000 	mov	r3, #0
  10d8f0:	e54b3007 	strb	r3, [fp, #-7]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
  10d8f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d8f8:	e3530000 	cmp	r3, #0
  10d8fc:	1a000006 	bne	10d91c <lwip_netconn_do_close_internal+0x48>
  10d900:	e30608b4 	movw	r0, #26804	; 0x68b4
  10d904:	e3400014 	movt	r0, #20
  10d908:	ebffd601 	bl	103114 <rt_kprintf>
  10d90c:	e300133d 	movw	r1, #829	; 0x33d
  10d910:	e3060668 	movw	r0, #26216	; 0x6668
  10d914:	e3400014 	movt	r0, #20
  10d918:	ebfff5e5 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
  10d91c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d920:	e5933000 	ldr	r3, [r3]
  10d924:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d928:	e3530010 	cmp	r3, #16
  10d92c:	0a000006 	beq	10d94c <lwip_netconn_do_close_internal+0x78>
  10d930:	e30608c4 	movw	r0, #26820	; 0x68c4
  10d934:	e3400014 	movt	r0, #20
  10d938:	ebffd5f5 	bl	103114 <rt_kprintf>
  10d93c:	e300133e 	movw	r1, #830	; 0x33e
  10d940:	e3060668 	movw	r0, #26216	; 0x6668
  10d944:	e3400014 	movt	r0, #20
  10d948:	ebfff5d9 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  10d94c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d950:	e5933004 	ldr	r3, [r3, #4]
  10d954:	e3530004 	cmp	r3, #4
  10d958:	0a000006 	beq	10d978 <lwip_netconn_do_close_internal+0xa4>
  10d95c:	e30608e4 	movw	r0, #26852	; 0x68e4
  10d960:	e3400014 	movt	r0, #20
  10d964:	ebffd5ea 	bl	103114 <rt_kprintf>
  10d968:	e300133f 	movw	r1, #831	; 0x33f
  10d96c:	e3060668 	movw	r0, #26216	; 0x6668
  10d970:	e3400014 	movt	r0, #20
  10d974:	ebfff5ce 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  10d978:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d97c:	e5933008 	ldr	r3, [r3, #8]
  10d980:	e3530000 	cmp	r3, #0
  10d984:	1a000006 	bne	10d9a4 <lwip_netconn_do_close_internal+0xd0>
  10d988:	e3060908 	movw	r0, #26888	; 0x6908
  10d98c:	e3400014 	movt	r0, #20
  10d990:	ebffd5df 	bl	103114 <rt_kprintf>
  10d994:	e3a01d0d 	mov	r1, #832	; 0x340
  10d998:	e3060668 	movw	r0, #26216	; 0x6668
  10d99c:	e3400014 	movt	r0, #20
  10d9a0:	ebfff5c3 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10d9a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9a8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d9ac:	e3530000 	cmp	r3, #0
  10d9b0:	1a000006 	bne	10d9d0 <lwip_netconn_do_close_internal+0xfc>
  10d9b4:	e3060770 	movw	r0, #26480	; 0x6770
  10d9b8:	e3400014 	movt	r0, #20
  10d9bc:	ebffd5d4 	bl	103114 <rt_kprintf>
  10d9c0:	e3001341 	movw	r1, #833	; 0x341
  10d9c4:	e3060668 	movw	r0, #26216	; 0x6668
  10d9c8:	e3400014 	movt	r0, #20
  10d9cc:	ebfff5b8 	bl	10b0b4 <sys_arch_assert>

  tpcb = conn->pcb.tcp;
  10d9d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9d4:	e5933008 	ldr	r3, [r3, #8]
  10d9d8:	e50b3010 	str	r3, [fp, #-16]
  shut = conn->current_msg->msg.sd.shut;
  10d9dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9e0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d9e4:	e5d33008 	ldrb	r3, [r3, #8]
  10d9e8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  shut_rx = shut & NETCONN_SHUT_RD;
  10d9ec:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10d9f0:	e2033001 	and	r3, r3, #1
  10d9f4:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
  shut_tx = shut & NETCONN_SHUT_WR;
  10d9f8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10d9fc:	e2033002 	and	r3, r3, #2
  10da00:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
  10da04:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10da08:	e3530003 	cmp	r3, #3
  10da0c:	1a000002 	bne	10da1c <lwip_netconn_do_close_internal+0x148>
    close = 1;
  10da10:	e3a03001 	mov	r3, #1
  10da14:	e54b3006 	strb	r3, [fp, #-6]
  10da18:	ea00001e 	b	10da98 <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_rx &&
  10da1c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10da20:	e3530000 	cmp	r3, #0
  10da24:	0a00000e 	beq	10da64 <lwip_netconn_do_close_internal+0x190>
             ((tpcb->state == FIN_WAIT_1) ||
  10da28:	e51b3010 	ldr	r3, [fp, #-16]
  10da2c:	e5933014 	ldr	r3, [r3, #20]
  } else if (shut_rx &&
  10da30:	e3530005 	cmp	r3, #5
  10da34:	0a000007 	beq	10da58 <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == FIN_WAIT_2) ||
  10da38:	e51b3010 	ldr	r3, [fp, #-16]
  10da3c:	e5933014 	ldr	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
  10da40:	e3530006 	cmp	r3, #6
  10da44:	0a000003 	beq	10da58 <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == CLOSING))) {
  10da48:	e51b3010 	ldr	r3, [fp, #-16]
  10da4c:	e5933014 	ldr	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
  10da50:	e3530008 	cmp	r3, #8
  10da54:	1a000002 	bne	10da64 <lwip_netconn_do_close_internal+0x190>
    close = 1;
  10da58:	e3a03001 	mov	r3, #1
  10da5c:	e54b3006 	strb	r3, [fp, #-6]
  10da60:	ea00000c 	b	10da98 <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
  10da64:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10da68:	e3530000 	cmp	r3, #0
  10da6c:	0a000007 	beq	10da90 <lwip_netconn_do_close_internal+0x1bc>
  10da70:	e51b3010 	ldr	r3, [fp, #-16]
  10da74:	e5d3301e 	ldrb	r3, [r3, #30]
  10da78:	e2033010 	and	r3, r3, #16
  10da7c:	e3530000 	cmp	r3, #0
  10da80:	0a000002 	beq	10da90 <lwip_netconn_do_close_internal+0x1bc>
    close = 1;
  10da84:	e3a03001 	mov	r3, #1
  10da88:	e54b3006 	strb	r3, [fp, #-6]
  10da8c:	ea000001 	b	10da98 <lwip_netconn_do_close_internal+0x1c4>
  } else {
    close = 0;
  10da90:	e3a03000 	mov	r3, #0
  10da94:	e54b3006 	strb	r3, [fp, #-6]
  }

  /* Set back some callback pointers */
  if (close) {
  10da98:	e55b3006 	ldrb	r3, [fp, #-6]
  10da9c:	e3530000 	cmp	r3, #0
  10daa0:	0a000002 	beq	10dab0 <lwip_netconn_do_close_internal+0x1dc>
    tcp_arg(tpcb, NULL);
  10daa4:	e3a01000 	mov	r1, #0
  10daa8:	e51b0010 	ldr	r0, [fp, #-16]
  10daac:	eb00481f 	bl	11fb30 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
  10dab0:	e51b3010 	ldr	r3, [fp, #-16]
  10dab4:	e5933014 	ldr	r3, [r3, #20]
  10dab8:	e3530001 	cmp	r3, #1
  10dabc:	1a000003 	bne	10dad0 <lwip_netconn_do_close_internal+0x1fc>
    tcp_accept(tpcb, NULL);
  10dac0:	e3a01000 	mov	r1, #0
  10dac4:	e51b0010 	ldr	r0, [fp, #-16]
  10dac8:	eb004872 	bl	11fc98 <tcp_accept>
  10dacc:	ea000018 	b	10db34 <lwip_netconn_do_close_internal+0x260>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
  10dad0:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10dad4:	e3530000 	cmp	r3, #0
  10dad8:	0a000005 	beq	10daf4 <lwip_netconn_do_close_internal+0x220>
      tcp_recv(tpcb, NULL);
  10dadc:	e3a01000 	mov	r1, #0
  10dae0:	e51b0010 	ldr	r0, [fp, #-16]
  10dae4:	eb004820 	bl	11fb6c <tcp_recv>
      tcp_accept(tpcb, NULL);
  10dae8:	e3a01000 	mov	r1, #0
  10daec:	e51b0010 	ldr	r0, [fp, #-16]
  10daf0:	eb004868 	bl	11fc98 <tcp_accept>
    }
    if (shut_tx) {
  10daf4:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10daf8:	e3530000 	cmp	r3, #0
  10dafc:	0a000002 	beq	10db0c <lwip_netconn_do_close_internal+0x238>
      tcp_sent(tpcb, NULL);
  10db00:	e3a01000 	mov	r1, #0
  10db04:	e51b0010 	ldr	r0, [fp, #-16]
  10db08:	eb004830 	bl	11fbd0 <tcp_sent>
    }
    if (close) {
  10db0c:	e55b3006 	ldrb	r3, [fp, #-6]
  10db10:	e3530000 	cmp	r3, #0
  10db14:	0a000006 	beq	10db34 <lwip_netconn_do_close_internal+0x260>
      tcp_poll(tpcb, NULL, 0);
  10db18:	e3a02000 	mov	r2, #0
  10db1c:	e3a01000 	mov	r1, #0
  10db20:	e51b0010 	ldr	r0, [fp, #-16]
  10db24:	eb004870 	bl	11fcec <tcp_poll>
      tcp_err(tpcb, NULL);
  10db28:	e3a01000 	mov	r1, #0
  10db2c:	e51b0010 	ldr	r0, [fp, #-16]
  10db30:	eb00483f 	bl	11fc34 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
  10db34:	e55b3006 	ldrb	r3, [fp, #-6]
  10db38:	e3530000 	cmp	r3, #0
  10db3c:	0a000004 	beq	10db54 <lwip_netconn_do_close_internal+0x280>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
  10db40:	e51b0010 	ldr	r0, [fp, #-16]
  10db44:	eb003eaf 	bl	11d608 <tcp_close>
  10db48:	e1a03000 	mov	r3, r0
  10db4c:	e54b3005 	strb	r3, [fp, #-5]
  10db50:	ea000006 	b	10db70 <lwip_netconn_do_close_internal+0x29c>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
  10db54:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10db58:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  10db5c:	e1a01003 	mov	r1, r3
  10db60:	e51b0010 	ldr	r0, [fp, #-16]
  10db64:	eb003ebc 	bl	11d65c <tcp_shutdown>
  10db68:	e1a03000 	mov	r3, r0
  10db6c:	e54b3005 	strb	r3, [fp, #-5]
  }
  if (err == ERR_OK) {
  10db70:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10db74:	e3530000 	cmp	r3, #0
  10db78:	1a000002 	bne	10db88 <lwip_netconn_do_close_internal+0x2b4>
    close_finished = 1;
  10db7c:	e3a03001 	mov	r3, #1
  10db80:	e54b3007 	strb	r3, [fp, #-7]
  10db84:	ea000021 	b	10dc10 <lwip_netconn_do_close_internal+0x33c>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
  10db88:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10db8c:	e3730001 	cmn	r3, #1
  10db90:	1a00001c 	bne	10dc08 <lwip_netconn_do_close_internal+0x334>
         nonblocking netconns, we have to wait since no standard socket application
         is prepared for close failing because of resource shortage.
         Check the timeout: this is kind of an lwip addition to the standard sockets:
         we wait for some time when failing to allocate a segment for the FIN */
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
      s32_t close_timeout = LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT;
  10db94:	e3043e20 	movw	r3, #20000	; 0x4e20
  10db98:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_SO_SNDTIMEO
      if (conn->send_timeout > 0) {
  10db9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dba0:	e5933020 	ldr	r3, [r3, #32]
  10dba4:	e3530000 	cmp	r3, #0
  10dba8:	da000002 	ble	10dbb8 <lwip_netconn_do_close_internal+0x2e4>
        close_timeout = conn->send_timeout;
  10dbac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dbb0:	e5933020 	ldr	r3, [r3, #32]
  10dbb4:	e50b300c 	str	r3, [fp, #-12]
      if (conn->linger >= 0) {
        /* use linger timeout (seconds) */
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
  10dbb8:	ebfff556 	bl	10b118 <sys_now>
  10dbbc:	e1a02000 	mov	r2, r0
  10dbc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dbc4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dbc8:	e593300c 	ldr	r3, [r3, #12]
  10dbcc:	e0423003 	sub	r3, r2, r3
  10dbd0:	e1a02003 	mov	r2, r3
  10dbd4:	e51b300c 	ldr	r3, [fp, #-12]
  10dbd8:	e1530002 	cmp	r3, r2
  10dbdc:	ca00000b 	bgt	10dc10 <lwip_netconn_do_close_internal+0x33c>
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
  10dbe0:	e3a03001 	mov	r3, #1
  10dbe4:	e54b3007 	strb	r3, [fp, #-7]
        if (close) {
  10dbe8:	e55b3006 	ldrb	r3, [fp, #-6]
  10dbec:	e3530000 	cmp	r3, #0
  10dbf0:	0a000006 	beq	10dc10 <lwip_netconn_do_close_internal+0x33c>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
  10dbf4:	e51b0010 	ldr	r0, [fp, #-16]
  10dbf8:	eb003f76 	bl	11d9d8 <tcp_abort>
          err = ERR_OK;
  10dbfc:	e3a03000 	mov	r3, #0
  10dc00:	e54b3005 	strb	r3, [fp, #-5]
  10dc04:	ea000001 	b	10dc10 <lwip_netconn_do_close_internal+0x33c>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
  10dc08:	e3a03001 	mov	r3, #1
  10dc0c:	e54b3007 	strb	r3, [fp, #-7]
    }
  }
  if (close_finished) {
  10dc10:	e55b3007 	ldrb	r3, [fp, #-7]
  10dc14:	e3530000 	cmp	r3, #0
  10dc18:	0a00004e 	beq	10dd58 <lwip_netconn_do_close_internal+0x484>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10dc1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc20:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dc24:	e5933000 	ldr	r3, [r3]
  10dc28:	e2833010 	add	r3, r3, #16
  10dc2c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    conn->current_msg->err = err;
  10dc30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc34:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dc38:	e55b2005 	ldrb	r2, [fp, #-5]
  10dc3c:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10dc40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc44:	e3a02000 	mov	r2, #0
  10dc48:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->state = NETCONN_NONE;
  10dc4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc50:	e3a02000 	mov	r2, #0
  10dc54:	e5832004 	str	r2, [r3, #4]
    if (err == ERR_OK) {
  10dc58:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10dc5c:	e3530000 	cmp	r3, #0
  10dc60:	1a000029 	bne	10dd0c <lwip_netconn_do_close_internal+0x438>
      if (close) {
  10dc64:	e55b3006 	ldrb	r3, [fp, #-6]
  10dc68:	e3530000 	cmp	r3, #0
  10dc6c:	0a00000c 	beq	10dca4 <lwip_netconn_do_close_internal+0x3d0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
  10dc70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc74:	e3a02000 	mov	r2, #0
  10dc78:	e5832008 	str	r2, [r3, #8]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10dc7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc80:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dc84:	e3530000 	cmp	r3, #0
  10dc88:	0a000005 	beq	10dca4 <lwip_netconn_do_close_internal+0x3d0>
  10dc8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc90:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dc94:	e3a02000 	mov	r2, #0
  10dc98:	e3a01004 	mov	r1, #4
  10dc9c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10dca0:	e12fff33 	blx	r3
      }
      if (shut_rx) {
  10dca4:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10dca8:	e3530000 	cmp	r3, #0
  10dcac:	0a000009 	beq	10dcd8 <lwip_netconn_do_close_internal+0x404>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10dcb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dcb4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dcb8:	e3530000 	cmp	r3, #0
  10dcbc:	0a000005 	beq	10dcd8 <lwip_netconn_do_close_internal+0x404>
  10dcc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dcc4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dcc8:	e3a02000 	mov	r2, #0
  10dccc:	e3a01000 	mov	r1, #0
  10dcd0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10dcd4:	e12fff33 	blx	r3
      }
      if (shut_tx) {
  10dcd8:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10dcdc:	e3530000 	cmp	r3, #0
  10dce0:	0a000009 	beq	10dd0c <lwip_netconn_do_close_internal+0x438>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10dce4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dce8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dcec:	e3530000 	cmp	r3, #0
  10dcf0:	0a000005 	beq	10dd0c <lwip_netconn_do_close_internal+0x438>
  10dcf4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dcf8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dcfc:	e3a02000 	mov	r2, #0
  10dd00:	e3a01002 	mov	r1, #2
  10dd04:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10dd08:	e12fff33 	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
  10dd0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd10:	e3530000 	cmp	r3, #0
  10dd14:	0a000008 	beq	10dd3c <lwip_netconn_do_close_internal+0x468>
  10dd18:	ebffd147 	bl	10223c <rt_enter_critical>
  10dd1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd20:	e1d330dc 	ldrsb	r3, [r3, #12]
  10dd24:	e373000c 	cmn	r3, #12
  10dd28:	ba000002 	blt	10dd38 <lwip_netconn_do_close_internal+0x464>
  10dd2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd30:	e55b2005 	ldrb	r2, [fp, #-5]
  10dd34:	e5c3200c 	strb	r2, [r3, #12]
  10dd38:	ebffd145 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10dd3c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10dd40:	e3530000 	cmp	r3, #0
  10dd44:	0a000001 	beq	10dd50 <lwip_netconn_do_close_internal+0x47c>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
  10dd48:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10dd4c:	ebfff2e1 	bl	10a8d8 <sys_sem_signal>
    }
    return ERR_OK;
  10dd50:	e3a03000 	mov	r3, #0
  10dd54:	ea00002b 	b	10de08 <lwip_netconn_do_close_internal+0x534>
  }
  if (!close_finished) {
  10dd58:	e55b3007 	ldrb	r3, [fp, #-7]
  10dd5c:	e3530000 	cmp	r3, #0
  10dd60:	1a00001d 	bne	10dddc <lwip_netconn_do_close_internal+0x508>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
  10dd64:	e51b3010 	ldr	r3, [fp, #-16]
  10dd68:	e5933014 	ldr	r3, [r3, #20]
  10dd6c:	e3530001 	cmp	r3, #1
  10dd70:	1a000006 	bne	10dd90 <lwip_netconn_do_close_internal+0x4bc>
  10dd74:	e306091c 	movw	r0, #26908	; 0x691c
  10dd78:	e3400014 	movt	r0, #20
  10dd7c:	ebffd4e4 	bl	103114 <rt_kprintf>
  10dd80:	e30013dd 	movw	r1, #989	; 0x3dd
  10dd84:	e3060668 	movw	r0, #26216	; 0x6668
  10dd88:	e3400014 	movt	r0, #20
  10dd8c:	ebfff4c8 	bl	10b0b4 <sys_arch_assert>
    if (shut_tx) {
  10dd90:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10dd94:	e3530000 	cmp	r3, #0
  10dd98:	0a000003 	beq	10ddac <lwip_netconn_do_close_internal+0x4d8>
      tcp_sent(tpcb, sent_tcp);
  10dd9c:	e30c1b1c 	movw	r1, #51996	; 0xcb1c
  10dda0:	e3401010 	movt	r1, #16
  10dda4:	e51b0010 	ldr	r0, [fp, #-16]
  10dda8:	eb004788 	bl	11fbd0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
  10ddac:	e3a02001 	mov	r2, #1
  10ddb0:	e30c1a00 	movw	r1, #51712	; 0xca00
  10ddb4:	e3401010 	movt	r1, #16
  10ddb8:	e51b0010 	ldr	r0, [fp, #-16]
  10ddbc:	eb0047ca 	bl	11fcec <tcp_poll>
    tcp_err(tpcb, err_tcp);
  10ddc0:	e30c1c38 	movw	r1, #52280	; 0xcc38
  10ddc4:	e3401010 	movt	r1, #16
  10ddc8:	e51b0010 	ldr	r0, [fp, #-16]
  10ddcc:	eb004798 	bl	11fc34 <tcp_err>
    tcp_arg(tpcb, conn);
  10ddd0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  10ddd4:	e51b0010 	ldr	r0, [fp, #-16]
  10ddd8:	eb004754 	bl	11fb30 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
  10dddc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10dde0:	e3530000 	cmp	r3, #0
  10dde4:	1a000006 	bne	10de04 <lwip_netconn_do_close_internal+0x530>
  10dde8:	e3060940 	movw	r0, #26944	; 0x6940
  10ddec:	e3400014 	movt	r0, #20
  10ddf0:	ebffd4c7 	bl	103114 <rt_kprintf>
  10ddf4:	e30013e9 	movw	r1, #1001	; 0x3e9
  10ddf8:	e3060668 	movw	r0, #26216	; 0x6668
  10ddfc:	e3400014 	movt	r0, #20
  10de00:	ebfff4ab 	bl	10b0b4 <sys_arch_assert>
  return err;
  10de04:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10de08:	e1a00003 	mov	r0, r3
  10de0c:	e24bd004 	sub	sp, fp, #4
  10de10:	e8bd8800 	pop	{fp, pc}

0010de14 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
  10de14:	e92d4800 	push	{fp, lr}
  10de18:	e28db004 	add	fp, sp, #4
  10de1c:	e24dd010 	sub	sp, sp, #16
  10de20:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10de24:	e51b3010 	ldr	r3, [fp, #-16]
  10de28:	e50b3008 	str	r3, [fp, #-8]

  enum netconn_state state = msg->conn->state;
  10de2c:	e51b3008 	ldr	r3, [fp, #-8]
  10de30:	e5933000 	ldr	r3, [r3]
  10de34:	e5933004 	ldr	r3, [r3, #4]
  10de38:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
  10de3c:	e51b300c 	ldr	r3, [fp, #-12]
  10de40:	e3530000 	cmp	r3, #0
  10de44:	0a00000c 	beq	10de7c <lwip_netconn_do_delconn+0x68>
  10de48:	e51b3008 	ldr	r3, [fp, #-8]
  10de4c:	e5933000 	ldr	r3, [r3]
  10de50:	e5933000 	ldr	r3, [r3]
  10de54:	e20330f0 	and	r3, r3, #240	; 0xf0
  10de58:	e3530010 	cmp	r3, #16
  10de5c:	0a000006 	beq	10de7c <lwip_netconn_do_delconn+0x68>
  10de60:	e3060950 	movw	r0, #26960	; 0x6950
  10de64:	e3400014 	movt	r0, #20
  10de68:	ebffd4a9 	bl	103114 <rt_kprintf>
  10de6c:	e30013fb 	movw	r1, #1019	; 0x3fb
  10de70:	e3060668 	movw	r0, #26216	; 0x6668
  10de74:	e3400014 	movt	r0, #20
  10de78:	ebfff48d 	bl	10b0b4 <sys_arch_assert>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
  10de7c:	e51b300c 	ldr	r3, [fp, #-12]
  10de80:	e3530000 	cmp	r3, #0
  10de84:	0a000005 	beq	10dea0 <lwip_netconn_do_delconn+0x8c>
  10de88:	e51b300c 	ldr	r3, [fp, #-12]
  10de8c:	e3530002 	cmp	r3, #2
  10de90:	0a000002 	beq	10dea0 <lwip_netconn_do_delconn+0x8c>
       (state != NETCONN_LISTEN) &&
  10de94:	e51b300c 	ldr	r3, [fp, #-12]
  10de98:	e3530003 	cmp	r3, #3
  10de9c:	1a000008 	bne	10dec4 <lwip_netconn_do_delconn+0xb0>
       (state != NETCONN_CONNECT)) ||
  10dea0:	e51b300c 	ldr	r3, [fp, #-12]
  10dea4:	e3530003 	cmp	r3, #3
  10dea8:	1a000009 	bne	10ded4 <lwip_netconn_do_delconn+0xc0>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
  10deac:	e51b3008 	ldr	r3, [fp, #-8]
  10deb0:	e5933000 	ldr	r3, [r3]
  10deb4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10deb8:	e2033004 	and	r3, r3, #4
  10debc:	e3530000 	cmp	r3, #0
  10dec0:	1a000003 	bne	10ded4 <lwip_netconn_do_delconn+0xc0>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
  10dec4:	e51b3008 	ldr	r3, [fp, #-8]
  10dec8:	e3e02004 	mvn	r2, #4
  10decc:	e5c32004 	strb	r2, [r3, #4]
  10ded0:	ea00009e 	b	10e150 <lwip_netconn_do_delconn+0x33c>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
  10ded4:	e51b300c 	ldr	r3, [fp, #-12]
  10ded8:	e3530003 	cmp	r3, #3
  10dedc:	1a00000c 	bne	10df14 <lwip_netconn_do_delconn+0x100>
  10dee0:	e51b3008 	ldr	r3, [fp, #-8]
  10dee4:	e5933000 	ldr	r3, [r3]
  10dee8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10deec:	e2033004 	and	r3, r3, #4
  10def0:	e3530000 	cmp	r3, #0
  10def4:	1a000006 	bne	10df14 <lwip_netconn_do_delconn+0x100>
  10def8:	e3060964 	movw	r0, #26980	; 0x6964
  10defc:	e3400014 	movt	r0, #20
  10df00:	ebffd483 	bl	103114 <rt_kprintf>
  10df04:	e3001419 	movw	r1, #1049	; 0x419
  10df08:	e3060668 	movw	r0, #26216	; 0x6668
  10df0c:	e3400014 	movt	r0, #20
  10df10:	ebfff467 	bl	10b0b4 <sys_arch_assert>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
  10df14:	e51b3008 	ldr	r3, [fp, #-8]
  10df18:	e3a02000 	mov	r2, #0
  10df1c:	e5c32004 	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
  10df20:	e51b3008 	ldr	r3, [fp, #-8]
  10df24:	e5933000 	ldr	r3, [r3]
  10df28:	e1a00003 	mov	r0, r3
  10df2c:	ebfffdfe 	bl	10d72c <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
  10df30:	e51b3008 	ldr	r3, [fp, #-8]
  10df34:	e5933000 	ldr	r3, [r3]
  10df38:	e5933008 	ldr	r3, [r3, #8]
  10df3c:	e3530000 	cmp	r3, #0
  10df40:	0a000068 	beq	10e0e8 <lwip_netconn_do_delconn+0x2d4>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10df44:	e51b3008 	ldr	r3, [fp, #-8]
  10df48:	e5933000 	ldr	r3, [r3]
  10df4c:	e5933000 	ldr	r3, [r3]
  10df50:	e20330f0 	and	r3, r3, #240	; 0xf0
  10df54:	e3530020 	cmp	r3, #32
  10df58:	0a00000a 	beq	10df88 <lwip_netconn_do_delconn+0x174>
  10df5c:	e3530040 	cmp	r3, #64	; 0x40
  10df60:	0a000002 	beq	10df70 <lwip_netconn_do_delconn+0x15c>
  10df64:	e3530010 	cmp	r3, #16
  10df68:	0a000011 	beq	10dfb4 <lwip_netconn_do_delconn+0x1a0>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
  10df6c:	ea000059 	b	10e0d8 <lwip_netconn_do_delconn+0x2c4>
        raw_remove(msg->conn->pcb.raw);
  10df70:	e51b3008 	ldr	r3, [fp, #-8]
  10df74:	e5933000 	ldr	r3, [r3]
  10df78:	e5933008 	ldr	r3, [r3, #8]
  10df7c:	e1a00003 	mov	r0, r3
  10df80:	eb0039d7 	bl	11c6e4 <raw_remove>
        break;
  10df84:	ea000053 	b	10e0d8 <lwip_netconn_do_delconn+0x2c4>
        msg->conn->pcb.udp->recv_arg = NULL;
  10df88:	e51b3008 	ldr	r3, [fp, #-8]
  10df8c:	e5933000 	ldr	r3, [r3]
  10df90:	e5933008 	ldr	r3, [r3, #8]
  10df94:	e3a02000 	mov	r2, #0
  10df98:	e5832024 	str	r2, [r3, #36]	; 0x24
        udp_remove(msg->conn->pcb.udp);
  10df9c:	e51b3008 	ldr	r3, [fp, #-8]
  10dfa0:	e5933000 	ldr	r3, [r3]
  10dfa4:	e5933008 	ldr	r3, [r3, #8]
  10dfa8:	e1a00003 	mov	r0, r3
  10dfac:	eb006a83 	bl	1289c0 <udp_remove>
        break;
  10dfb0:	ea000048 	b	10e0d8 <lwip_netconn_do_delconn+0x2c4>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10dfb4:	e51b3008 	ldr	r3, [fp, #-8]
  10dfb8:	e5933000 	ldr	r3, [r3]
  10dfbc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dfc0:	e3530000 	cmp	r3, #0
  10dfc4:	1a000004 	bne	10dfdc <lwip_netconn_do_delconn+0x1c8>
  10dfc8:	e51b3008 	ldr	r3, [fp, #-8]
  10dfcc:	e5933000 	ldr	r3, [r3]
  10dfd0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10dfd4:	e3530000 	cmp	r3, #0
  10dfd8:	0a000006 	beq	10dff8 <lwip_netconn_do_delconn+0x1e4>
  10dfdc:	e3060984 	movw	r0, #27012	; 0x6984
  10dfe0:	e3400014 	movt	r0, #20
  10dfe4:	ebffd44a 	bl	103114 <rt_kprintf>
  10dfe8:	e300142f 	movw	r1, #1071	; 0x42f
  10dfec:	e3060668 	movw	r0, #26216	; 0x6668
  10dff0:	e3400014 	movt	r0, #20
  10dff4:	ebfff42e 	bl	10b0b4 <sys_arch_assert>
        msg->conn->state = NETCONN_CLOSE;
  10dff8:	e51b3008 	ldr	r3, [fp, #-8]
  10dffc:	e5933000 	ldr	r3, [r3]
  10e000:	e3a02004 	mov	r2, #4
  10e004:	e5832004 	str	r2, [r3, #4]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
  10e008:	e51b3008 	ldr	r3, [fp, #-8]
  10e00c:	e3a02003 	mov	r2, #3
  10e010:	e5c32008 	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
  10e014:	e51b3008 	ldr	r3, [fp, #-8]
  10e018:	e5933000 	ldr	r3, [r3]
  10e01c:	e51b2008 	ldr	r2, [fp, #-8]
  10e020:	e5832038 	str	r2, [r3, #56]	; 0x38
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10e024:	e51b3008 	ldr	r3, [fp, #-8]
  10e028:	e5933000 	ldr	r3, [r3]
  10e02c:	e3a01000 	mov	r1, #0
  10e030:	e1a00003 	mov	r0, r3
  10e034:	ebfffe26 	bl	10d8d4 <lwip_netconn_do_close_internal>
  10e038:	e1a03000 	mov	r3, r0
  10e03c:	e3530000 	cmp	r3, #0
  10e040:	0a00005b 	beq	10e1b4 <lwip_netconn_do_delconn+0x3a0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10e044:	e51b3008 	ldr	r3, [fp, #-8]
  10e048:	e5933000 	ldr	r3, [r3]
  10e04c:	e5933004 	ldr	r3, [r3, #4]
  10e050:	e3530004 	cmp	r3, #4
  10e054:	0a000006 	beq	10e074 <lwip_netconn_do_delconn+0x260>
  10e058:	e30609a0 	movw	r0, #27040	; 0x69a0
  10e05c:	e3400014 	movt	r0, #20
  10e060:	ebffd42b 	bl	103114 <rt_kprintf>
  10e064:	e3001435 	movw	r1, #1077	; 0x435
  10e068:	e3060668 	movw	r0, #26216	; 0x6668
  10e06c:	e3400014 	movt	r0, #20
  10e070:	ebfff40f 	bl	10b0b4 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10e074:	e30f060c 	movw	r0, #62988	; 0xf60c
  10e078:	e3400014 	movt	r0, #20
  10e07c:	ebfff29c 	bl	10aaf4 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10e080:	e51b3008 	ldr	r3, [fp, #-8]
  10e084:	e5933000 	ldr	r3, [r3]
  10e088:	e2833010 	add	r3, r3, #16
  10e08c:	e3a01000 	mov	r1, #0
  10e090:	e1a00003 	mov	r0, r3
  10e094:	ebfff21a 	bl	10a904 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10e098:	e30f060c 	movw	r0, #62988	; 0xf60c
  10e09c:	e3400014 	movt	r0, #20
  10e0a0:	ebfff287 	bl	10aac4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10e0a4:	e51b3008 	ldr	r3, [fp, #-8]
  10e0a8:	e5933000 	ldr	r3, [r3]
  10e0ac:	e5933004 	ldr	r3, [r3, #4]
  10e0b0:	e3530000 	cmp	r3, #0
  10e0b4:	0a00003e 	beq	10e1b4 <lwip_netconn_do_delconn+0x3a0>
  10e0b8:	e30609a0 	movw	r0, #27040	; 0x69a0
  10e0bc:	e3400014 	movt	r0, #20
  10e0c0:	ebffd413 	bl	103114 <rt_kprintf>
  10e0c4:	e3001439 	movw	r1, #1081	; 0x439
  10e0c8:	e3060668 	movw	r0, #26216	; 0x6668
  10e0cc:	e3400014 	movt	r0, #20
  10e0d0:	ebfff3f7 	bl	10b0b4 <sys_arch_assert>
        return;
  10e0d4:	ea000036 	b	10e1b4 <lwip_netconn_do_delconn+0x3a0>
      }
      msg->conn->pcb.tcp = NULL;
  10e0d8:	e51b3008 	ldr	r3, [fp, #-8]
  10e0dc:	e5933000 	ldr	r3, [r3]
  10e0e0:	e3a02000 	mov	r2, #0
  10e0e4:	e5832008 	str	r2, [r3, #8]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
  10e0e8:	e51b3008 	ldr	r3, [fp, #-8]
  10e0ec:	e5933000 	ldr	r3, [r3]
  10e0f0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e0f4:	e3530000 	cmp	r3, #0
  10e0f8:	0a000007 	beq	10e11c <lwip_netconn_do_delconn+0x308>
  10e0fc:	e51b3008 	ldr	r3, [fp, #-8]
  10e100:	e5933000 	ldr	r3, [r3]
  10e104:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e108:	e51b2008 	ldr	r2, [fp, #-8]
  10e10c:	e5920000 	ldr	r0, [r2]
  10e110:	e3a02000 	mov	r2, #0
  10e114:	e3a01000 	mov	r1, #0
  10e118:	e12fff33 	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
  10e11c:	e51b3008 	ldr	r3, [fp, #-8]
  10e120:	e5933000 	ldr	r3, [r3]
  10e124:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e128:	e3530000 	cmp	r3, #0
  10e12c:	0a000007 	beq	10e150 <lwip_netconn_do_delconn+0x33c>
  10e130:	e51b3008 	ldr	r3, [fp, #-8]
  10e134:	e5933000 	ldr	r3, [r3]
  10e138:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e13c:	e51b2008 	ldr	r2, [fp, #-8]
  10e140:	e5920000 	ldr	r0, [r2]
  10e144:	e3a02000 	mov	r2, #0
  10e148:	e3a01002 	mov	r1, #2
  10e14c:	e12fff33 	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
  10e150:	e51b3008 	ldr	r3, [fp, #-8]
  10e154:	e5933000 	ldr	r3, [r3]
  10e158:	e2833010 	add	r3, r3, #16
  10e15c:	e1a00003 	mov	r0, r3
  10e160:	ebfff21a 	bl	10a9d0 <sys_sem_valid>
  10e164:	e1a03000 	mov	r3, r0
  10e168:	e3530000 	cmp	r3, #0
  10e16c:	0a000011 	beq	10e1b8 <lwip_netconn_do_delconn+0x3a4>
    TCPIP_APIMSG_ACK(msg);
  10e170:	e51b3008 	ldr	r3, [fp, #-8]
  10e174:	e5933000 	ldr	r3, [r3]
  10e178:	e3530000 	cmp	r3, #0
  10e17c:	0a00000d 	beq	10e1b8 <lwip_netconn_do_delconn+0x3a4>
  10e180:	ebffd02d 	bl	10223c <rt_enter_critical>
  10e184:	e51b3008 	ldr	r3, [fp, #-8]
  10e188:	e5933000 	ldr	r3, [r3]
  10e18c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e190:	e373000c 	cmn	r3, #12
  10e194:	ba000004 	blt	10e1ac <lwip_netconn_do_delconn+0x398>
  10e198:	e51b3008 	ldr	r3, [fp, #-8]
  10e19c:	e5933000 	ldr	r3, [r3]
  10e1a0:	e51b2008 	ldr	r2, [fp, #-8]
  10e1a4:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e1a8:	e5c3200c 	strb	r2, [r3, #12]
  10e1ac:	ebffd028 	bl	102254 <rt_exit_critical>
  10e1b0:	ea000000 	b	10e1b8 <lwip_netconn_do_delconn+0x3a4>
        return;
  10e1b4:	e320f000 	nop	{0}
  }
}
  10e1b8:	e24bd004 	sub	sp, fp, #4
  10e1bc:	e8bd8800 	pop	{fp, pc}

0010e1c0 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
  10e1c0:	e92d4800 	push	{fp, lr}
  10e1c4:	e28db004 	add	fp, sp, #4
  10e1c8:	e24dd010 	sub	sp, sp, #16
  10e1cc:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e1d0:	e51b3010 	ldr	r3, [fp, #-16]
  10e1d4:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10e1d8:	e51b3008 	ldr	r3, [fp, #-8]
  10e1dc:	e5933000 	ldr	r3, [r3]
  10e1e0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e1e4:	e373000c 	cmn	r3, #12
  10e1e8:	aa000005 	bge	10e204 <lwip_netconn_do_bind+0x44>
    msg->err = msg->conn->last_err;
  10e1ec:	e51b3008 	ldr	r3, [fp, #-8]
  10e1f0:	e5933000 	ldr	r3, [r3]
  10e1f4:	e1d320dc 	ldrsb	r2, [r3, #12]
  10e1f8:	e51b3008 	ldr	r3, [fp, #-8]
  10e1fc:	e5c32004 	strb	r2, [r3, #4]
  10e200:	ea00003c 	b	10e2f8 <lwip_netconn_do_bind+0x138>
  } else {
    msg->err = ERR_VAL;
  10e204:	e51b3008 	ldr	r3, [fp, #-8]
  10e208:	e3e02005 	mvn	r2, #5
  10e20c:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10e210:	e51b3008 	ldr	r3, [fp, #-8]
  10e214:	e5933000 	ldr	r3, [r3]
  10e218:	e5933008 	ldr	r3, [r3, #8]
  10e21c:	e3530000 	cmp	r3, #0
  10e220:	0a000033 	beq	10e2f4 <lwip_netconn_do_bind+0x134>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e224:	e51b3008 	ldr	r3, [fp, #-8]
  10e228:	e5933000 	ldr	r3, [r3]
  10e22c:	e5933000 	ldr	r3, [r3]
  10e230:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e234:	e3530020 	cmp	r3, #32
  10e238:	0a000011 	beq	10e284 <lwip_netconn_do_bind+0xc4>
  10e23c:	e3530040 	cmp	r3, #64	; 0x40
  10e240:	0a000002 	beq	10e250 <lwip_netconn_do_bind+0x90>
  10e244:	e3530010 	cmp	r3, #16
  10e248:	0a00001b 	beq	10e2bc <lwip_netconn_do_bind+0xfc>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
  10e24c:	ea000029 	b	10e2f8 <lwip_netconn_do_bind+0x138>
        msg->err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10e250:	e51b3008 	ldr	r3, [fp, #-8]
  10e254:	e5933000 	ldr	r3, [r3]
  10e258:	e5932008 	ldr	r2, [r3, #8]
  10e25c:	e51b3008 	ldr	r3, [fp, #-8]
  10e260:	e5933008 	ldr	r3, [r3, #8]
  10e264:	e1a01003 	mov	r1, r3
  10e268:	e1a00002 	mov	r0, r2
  10e26c:	eb003839 	bl	11c358 <raw_bind>
  10e270:	e1a03000 	mov	r3, r0
  10e274:	e1a02003 	mov	r2, r3
  10e278:	e51b3008 	ldr	r3, [fp, #-8]
  10e27c:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e280:	ea00001c 	b	10e2f8 <lwip_netconn_do_bind+0x138>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e284:	e51b3008 	ldr	r3, [fp, #-8]
  10e288:	e5933000 	ldr	r3, [r3]
  10e28c:	e5930008 	ldr	r0, [r3, #8]
  10e290:	e51b3008 	ldr	r3, [fp, #-8]
  10e294:	e5931008 	ldr	r1, [r3, #8]
  10e298:	e51b3008 	ldr	r3, [fp, #-8]
  10e29c:	e1d330bc 	ldrh	r3, [r3, #12]
  10e2a0:	e1a02003 	mov	r2, r3
  10e2a4:	eb0068db 	bl	128618 <udp_bind>
  10e2a8:	e1a03000 	mov	r3, r0
  10e2ac:	e1a02003 	mov	r2, r3
  10e2b0:	e51b3008 	ldr	r3, [fp, #-8]
  10e2b4:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e2b8:	ea00000e 	b	10e2f8 <lwip_netconn_do_bind+0x138>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e2bc:	e51b3008 	ldr	r3, [fp, #-8]
  10e2c0:	e5933000 	ldr	r3, [r3]
  10e2c4:	e5930008 	ldr	r0, [r3, #8]
  10e2c8:	e51b3008 	ldr	r3, [fp, #-8]
  10e2cc:	e5931008 	ldr	r1, [r3, #8]
  10e2d0:	e51b3008 	ldr	r3, [fp, #-8]
  10e2d4:	e1d330bc 	ldrh	r3, [r3, #12]
  10e2d8:	e1a02003 	mov	r2, r3
  10e2dc:	eb003dc7 	bl	11da00 <tcp_bind>
  10e2e0:	e1a03000 	mov	r3, r0
  10e2e4:	e1a02003 	mov	r2, r3
  10e2e8:	e51b3008 	ldr	r3, [fp, #-8]
  10e2ec:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e2f0:	ea000000 	b	10e2f8 <lwip_netconn_do_bind+0x138>
      }
    }
  10e2f4:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10e2f8:	e51b3008 	ldr	r3, [fp, #-8]
  10e2fc:	e5933000 	ldr	r3, [r3]
  10e300:	e3530000 	cmp	r3, #0
  10e304:	0a00000b 	beq	10e338 <lwip_netconn_do_bind+0x178>
  10e308:	ebffcfcb 	bl	10223c <rt_enter_critical>
  10e30c:	e51b3008 	ldr	r3, [fp, #-8]
  10e310:	e5933000 	ldr	r3, [r3]
  10e314:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e318:	e373000c 	cmn	r3, #12
  10e31c:	ba000004 	blt	10e334 <lwip_netconn_do_bind+0x174>
  10e320:	e51b3008 	ldr	r3, [fp, #-8]
  10e324:	e5933000 	ldr	r3, [r3]
  10e328:	e51b2008 	ldr	r2, [fp, #-8]
  10e32c:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e330:	e5c3200c 	strb	r2, [r3, #12]
  10e334:	ebffcfc6 	bl	102254 <rt_exit_critical>
}
  10e338:	e320f000 	nop	{0}
  10e33c:	e24bd004 	sub	sp, fp, #4
  10e340:	e8bd8800 	pop	{fp, pc}

0010e344 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
  10e344:	e92d4800 	push	{fp, lr}
  10e348:	e28db004 	add	fp, sp, #4
  10e34c:	e24dd020 	sub	sp, sp, #32
  10e350:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10e354:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10e358:	e1a03002 	mov	r3, r2
  10e35c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *conn;
  int was_blocking;
  sys_sem_t* op_completed_sem = NULL;
  10e360:	e3a03000 	mov	r3, #0
  10e364:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
  10e368:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10e36c:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10e370:	e51b300c 	ldr	r3, [fp, #-12]
  10e374:	e3530000 	cmp	r3, #0
  10e378:	1a000001 	bne	10e384 <lwip_netconn_do_connected+0x40>
    return ERR_VAL;
  10e37c:	e3e03005 	mvn	r3, #5
  10e380:	ea000074 	b	10e558 <lwip_netconn_do_connected+0x214>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
  10e384:	e51b300c 	ldr	r3, [fp, #-12]
  10e388:	e5933004 	ldr	r3, [r3, #4]
  10e38c:	e3530003 	cmp	r3, #3
  10e390:	0a000006 	beq	10e3b0 <lwip_netconn_do_connected+0x6c>
  10e394:	e30609a8 	movw	r0, #27048	; 0x69a8
  10e398:	e3400014 	movt	r0, #20
  10e39c:	ebffd35c 	bl	103114 <rt_kprintf>
  10e3a0:	e3001492 	movw	r1, #1170	; 0x492
  10e3a4:	e3060668 	movw	r0, #26216	; 0x6668
  10e3a8:	e3400014 	movt	r0, #20
  10e3ac:	ebfff340 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
  10e3b0:	e51b300c 	ldr	r3, [fp, #-12]
  10e3b4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e3b8:	e3530000 	cmp	r3, #0
  10e3bc:	1a00000b 	bne	10e3f0 <lwip_netconn_do_connected+0xac>
  10e3c0:	e51b300c 	ldr	r3, [fp, #-12]
  10e3c4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e3c8:	e2033004 	and	r3, r3, #4
  10e3cc:	e3530000 	cmp	r3, #0
  10e3d0:	1a000006 	bne	10e3f0 <lwip_netconn_do_connected+0xac>
  10e3d4:	e30609c8 	movw	r0, #27080	; 0x69c8
  10e3d8:	e3400014 	movt	r0, #20
  10e3dc:	ebffd34c 	bl	103114 <rt_kprintf>
  10e3e0:	e3001494 	movw	r1, #1172	; 0x494
  10e3e4:	e3060668 	movw	r0, #26216	; 0x6668
  10e3e8:	e3400014 	movt	r0, #20
  10e3ec:	ebfff330 	bl	10b0b4 <sys_arch_assert>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
  10e3f0:	e51b300c 	ldr	r3, [fp, #-12]
  10e3f4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e3f8:	e3530000 	cmp	r3, #0
  10e3fc:	0a000008 	beq	10e424 <lwip_netconn_do_connected+0xe0>
    conn->current_msg->err = err;
  10e400:	e51b300c 	ldr	r3, [fp, #-12]
  10e404:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e408:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10e40c:	e5c32004 	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10e410:	e51b300c 	ldr	r3, [fp, #-12]
  10e414:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e418:	e5933000 	ldr	r3, [r3]
  10e41c:	e2833010 	add	r3, r3, #16
  10e420:	e50b3008 	str	r3, [fp, #-8]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
  10e424:	e51b300c 	ldr	r3, [fp, #-12]
  10e428:	e5933000 	ldr	r3, [r3]
  10e42c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e430:	e3530010 	cmp	r3, #16
  10e434:	1a000004 	bne	10e44c <lwip_netconn_do_connected+0x108>
  10e438:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10e43c:	e3530000 	cmp	r3, #0
  10e440:	1a000001 	bne	10e44c <lwip_netconn_do_connected+0x108>
    setup_tcp(conn);
  10e444:	e51b000c 	ldr	r0, [fp, #-12]
  10e448:	ebfffabe 	bl	10cf48 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
  10e44c:	e51b300c 	ldr	r3, [fp, #-12]
  10e450:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e454:	e2033004 	and	r3, r3, #4
  10e458:	e3530000 	cmp	r3, #0
  10e45c:	03a03001 	moveq	r3, #1
  10e460:	13a03000 	movne	r3, #0
  10e464:	e6ef3073 	uxtb	r3, r3
  10e468:	e50b3010 	str	r3, [fp, #-16]
  SET_NONBLOCKING_CONNECT(conn, 0);
  10e46c:	e51b300c 	ldr	r3, [fp, #-12]
  10e470:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e474:	e3c33004 	bic	r3, r3, #4
  10e478:	e6ef2073 	uxtb	r2, r3
  10e47c:	e51b300c 	ldr	r3, [fp, #-12]
  10e480:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  LWIP_ASSERT("blocking connect state error",
  10e484:	e51b3010 	ldr	r3, [fp, #-16]
  10e488:	e3530000 	cmp	r3, #0
  10e48c:	0a000002 	beq	10e49c <lwip_netconn_do_connected+0x158>
  10e490:	e51b3008 	ldr	r3, [fp, #-8]
  10e494:	e3530000 	cmp	r3, #0
  10e498:	1a00000c 	bne	10e4d0 <lwip_netconn_do_connected+0x18c>
  10e49c:	e51b3010 	ldr	r3, [fp, #-16]
  10e4a0:	e3530000 	cmp	r3, #0
  10e4a4:	1a000002 	bne	10e4b4 <lwip_netconn_do_connected+0x170>
  10e4a8:	e51b3008 	ldr	r3, [fp, #-8]
  10e4ac:	e3530000 	cmp	r3, #0
  10e4b0:	0a000006 	beq	10e4d0 <lwip_netconn_do_connected+0x18c>
  10e4b4:	e3060a08 	movw	r0, #27144	; 0x6a08
  10e4b8:	e3400014 	movt	r0, #20
  10e4bc:	ebffd314 	bl	103114 <rt_kprintf>
  10e4c0:	e30014a1 	movw	r1, #1185	; 0x4a1
  10e4c4:	e3060668 	movw	r0, #26216	; 0x6668
  10e4c8:	e3400014 	movt	r0, #20
  10e4cc:	ebfff2f8 	bl	10b0b4 <sys_arch_assert>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
  10e4d0:	e51b300c 	ldr	r3, [fp, #-12]
  10e4d4:	e3a02000 	mov	r2, #0
  10e4d8:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->state = NETCONN_NONE;
  10e4dc:	e51b300c 	ldr	r3, [fp, #-12]
  10e4e0:	e3a02000 	mov	r2, #0
  10e4e4:	e5832004 	str	r2, [r3, #4]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10e4e8:	e51b300c 	ldr	r3, [fp, #-12]
  10e4ec:	e3530000 	cmp	r3, #0
  10e4f0:	0a000008 	beq	10e518 <lwip_netconn_do_connected+0x1d4>
  10e4f4:	ebffcf50 	bl	10223c <rt_enter_critical>
  10e4f8:	e51b300c 	ldr	r3, [fp, #-12]
  10e4fc:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e500:	e373000c 	cmn	r3, #12
  10e504:	ba000002 	blt	10e514 <lwip_netconn_do_connected+0x1d0>
  10e508:	e51b300c 	ldr	r3, [fp, #-12]
  10e50c:	e3a02000 	mov	r2, #0
  10e510:	e5c3200c 	strb	r2, [r3, #12]
  10e514:	ebffcf4e 	bl	102254 <rt_exit_critical>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10e518:	e51b300c 	ldr	r3, [fp, #-12]
  10e51c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e520:	e3530000 	cmp	r3, #0
  10e524:	0a000005 	beq	10e540 <lwip_netconn_do_connected+0x1fc>
  10e528:	e51b300c 	ldr	r3, [fp, #-12]
  10e52c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e530:	e3a02000 	mov	r2, #0
  10e534:	e3a01002 	mov	r1, #2
  10e538:	e51b000c 	ldr	r0, [fp, #-12]
  10e53c:	e12fff33 	blx	r3

  if (was_blocking) {
  10e540:	e51b3010 	ldr	r3, [fp, #-16]
  10e544:	e3530000 	cmp	r3, #0
  10e548:	0a000001 	beq	10e554 <lwip_netconn_do_connected+0x210>
    sys_sem_signal(op_completed_sem);
  10e54c:	e51b0008 	ldr	r0, [fp, #-8]
  10e550:	ebfff0e0 	bl	10a8d8 <sys_sem_signal>
  }
  return ERR_OK;
  10e554:	e3a03000 	mov	r3, #0
}
  10e558:	e1a00003 	mov	r0, r3
  10e55c:	e24bd004 	sub	sp, fp, #4
  10e560:	e8bd8800 	pop	{fp, pc}

0010e564 <lwip_netconn_do_connect>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
  10e564:	e92d4800 	push	{fp, lr}
  10e568:	e28db004 	add	fp, sp, #4
  10e56c:	e24dd010 	sub	sp, sp, #16
  10e570:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e574:	e51b3010 	ldr	r3, [fp, #-16]
  10e578:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.tcp == NULL) {
  10e57c:	e51b3008 	ldr	r3, [fp, #-8]
  10e580:	e5933000 	ldr	r3, [r3]
  10e584:	e5933008 	ldr	r3, [r3, #8]
  10e588:	e3530000 	cmp	r3, #0
  10e58c:	1a000003 	bne	10e5a0 <lwip_netconn_do_connect+0x3c>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
  10e590:	e51b3008 	ldr	r3, [fp, #-8]
  10e594:	e3e0200e 	mvn	r2, #14
  10e598:	e5c32004 	strb	r2, [r3, #4]
  10e59c:	ea0000aa 	b	10e84c <lwip_netconn_do_connect+0x2e8>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e5a0:	e51b3008 	ldr	r3, [fp, #-8]
  10e5a4:	e5933000 	ldr	r3, [r3]
  10e5a8:	e5933000 	ldr	r3, [r3]
  10e5ac:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e5b0:	e3530020 	cmp	r3, #32
  10e5b4:	0a000011 	beq	10e600 <lwip_netconn_do_connect+0x9c>
  10e5b8:	e3530040 	cmp	r3, #64	; 0x40
  10e5bc:	0a000002 	beq	10e5cc <lwip_netconn_do_connect+0x68>
  10e5c0:	e3530010 	cmp	r3, #16
  10e5c4:	0a00001b 	beq	10e638 <lwip_netconn_do_connect+0xd4>
  10e5c8:	ea000093 	b	10e81c <lwip_netconn_do_connect+0x2b8>
#if LWIP_RAW
    case NETCONN_RAW:
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10e5cc:	e51b3008 	ldr	r3, [fp, #-8]
  10e5d0:	e5933000 	ldr	r3, [r3]
  10e5d4:	e5932008 	ldr	r2, [r3, #8]
  10e5d8:	e51b3008 	ldr	r3, [fp, #-8]
  10e5dc:	e5933008 	ldr	r3, [r3, #8]
  10e5e0:	e1a01003 	mov	r1, r3
  10e5e4:	e1a00002 	mov	r0, r2
  10e5e8:	eb003775 	bl	11c3c4 <raw_connect>
  10e5ec:	e1a03000 	mov	r3, r0
  10e5f0:	e1a02003 	mov	r2, r3
  10e5f4:	e51b3008 	ldr	r3, [fp, #-8]
  10e5f8:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e5fc:	ea000092 	b	10e84c <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e600:	e51b3008 	ldr	r3, [fp, #-8]
  10e604:	e5933000 	ldr	r3, [r3]
  10e608:	e5930008 	ldr	r0, [r3, #8]
  10e60c:	e51b3008 	ldr	r3, [fp, #-8]
  10e610:	e5931008 	ldr	r1, [r3, #8]
  10e614:	e51b3008 	ldr	r3, [fp, #-8]
  10e618:	e1d330bc 	ldrh	r3, [r3, #12]
  10e61c:	e1a02003 	mov	r2, r3
  10e620:	eb006872 	bl	1287f0 <udp_connect>
  10e624:	e1a03000 	mov	r3, r0
  10e628:	e1a02003 	mov	r2, r3
  10e62c:	e51b3008 	ldr	r3, [fp, #-8]
  10e630:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e634:	ea000084 	b	10e84c <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
  10e638:	e51b3008 	ldr	r3, [fp, #-8]
  10e63c:	e5933000 	ldr	r3, [r3]
  10e640:	e5933004 	ldr	r3, [r3, #4]
  10e644:	e3530003 	cmp	r3, #3
  10e648:	1a000003 	bne	10e65c <lwip_netconn_do_connect+0xf8>
        msg->err = ERR_ALREADY;
  10e64c:	e51b3008 	ldr	r3, [fp, #-8]
  10e650:	e3e02008 	mvn	r2, #8
  10e654:	e5c32004 	strb	r2, [r3, #4]
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
          }
        }
      }
      break;
  10e658:	ea00007a 	b	10e848 <lwip_netconn_do_connect+0x2e4>
      } else if (msg->conn->state != NETCONN_NONE) {
  10e65c:	e51b3008 	ldr	r3, [fp, #-8]
  10e660:	e5933000 	ldr	r3, [r3]
  10e664:	e5933004 	ldr	r3, [r3, #4]
  10e668:	e3530000 	cmp	r3, #0
  10e66c:	0a000003 	beq	10e680 <lwip_netconn_do_connect+0x11c>
        msg->err = ERR_ISCONN;
  10e670:	e51b3008 	ldr	r3, [fp, #-8]
  10e674:	e3e02009 	mvn	r2, #9
  10e678:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e67c:	ea000071 	b	10e848 <lwip_netconn_do_connect+0x2e4>
        setup_tcp(msg->conn);
  10e680:	e51b3008 	ldr	r3, [fp, #-8]
  10e684:	e5933000 	ldr	r3, [r3]
  10e688:	e1a00003 	mov	r0, r3
  10e68c:	ebfffa2d 	bl	10cf48 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
  10e690:	e51b3008 	ldr	r3, [fp, #-8]
  10e694:	e5933000 	ldr	r3, [r3]
  10e698:	e5930008 	ldr	r0, [r3, #8]
  10e69c:	e51b3008 	ldr	r3, [fp, #-8]
  10e6a0:	e5931008 	ldr	r1, [r3, #8]
  10e6a4:	e51b3008 	ldr	r3, [fp, #-8]
  10e6a8:	e1d320bc 	ldrh	r2, [r3, #12]
  10e6ac:	e30e3344 	movw	r3, #58180	; 0xe344
  10e6b0:	e3403010 	movt	r3, #16
  10e6b4:	eb003eff 	bl	11e2b8 <tcp_connect>
  10e6b8:	e1a03000 	mov	r3, r0
  10e6bc:	e1a02003 	mov	r2, r3
  10e6c0:	e51b3008 	ldr	r3, [fp, #-8]
  10e6c4:	e5c32004 	strb	r2, [r3, #4]
        if (msg->err == ERR_OK) {
  10e6c8:	e51b3008 	ldr	r3, [fp, #-8]
  10e6cc:	e1d330d4 	ldrsb	r3, [r3, #4]
  10e6d0:	e3530000 	cmp	r3, #0
  10e6d4:	1a00005b 	bne	10e848 <lwip_netconn_do_connect+0x2e4>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
  10e6d8:	e51b3008 	ldr	r3, [fp, #-8]
  10e6dc:	e5933000 	ldr	r3, [r3]
  10e6e0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e6e4:	e2033002 	and	r3, r3, #2
  10e6e8:	e3530000 	cmp	r3, #0
  10e6ec:	13a03001 	movne	r3, #1
  10e6f0:	03a03000 	moveq	r3, #0
  10e6f4:	e6ef3073 	uxtb	r3, r3
  10e6f8:	e54b3009 	strb	r3, [fp, #-9]
          msg->conn->state = NETCONN_CONNECT;
  10e6fc:	e51b3008 	ldr	r3, [fp, #-8]
  10e700:	e5933000 	ldr	r3, [r3]
  10e704:	e3a02003 	mov	r2, #3
  10e708:	e5832004 	str	r2, [r3, #4]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
  10e70c:	e55b3009 	ldrb	r3, [fp, #-9]
  10e710:	e3530000 	cmp	r3, #0
  10e714:	0a000008 	beq	10e73c <lwip_netconn_do_connect+0x1d8>
  10e718:	e51b3008 	ldr	r3, [fp, #-8]
  10e71c:	e5933000 	ldr	r3, [r3]
  10e720:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e724:	e51b3008 	ldr	r3, [fp, #-8]
  10e728:	e5933000 	ldr	r3, [r3]
  10e72c:	e3822004 	orr	r2, r2, #4
  10e730:	e6ef2072 	uxtb	r2, r2
  10e734:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10e738:	ea000007 	b	10e75c <lwip_netconn_do_connect+0x1f8>
  10e73c:	e51b3008 	ldr	r3, [fp, #-8]
  10e740:	e5933000 	ldr	r3, [r3]
  10e744:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e748:	e51b3008 	ldr	r3, [fp, #-8]
  10e74c:	e5933000 	ldr	r3, [r3]
  10e750:	e3c22004 	bic	r2, r2, #4
  10e754:	e6ef2072 	uxtb	r2, r2
  10e758:	e5c32030 	strb	r2, [r3, #48]	; 0x30
          if (non_blocking) {
  10e75c:	e55b3009 	ldrb	r3, [fp, #-9]
  10e760:	e3530000 	cmp	r3, #0
  10e764:	0a000003 	beq	10e778 <lwip_netconn_do_connect+0x214>
            msg->err = ERR_INPROGRESS;
  10e768:	e51b3008 	ldr	r3, [fp, #-8]
  10e76c:	e3e02004 	mvn	r2, #4
  10e770:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e774:	ea000033 	b	10e848 <lwip_netconn_do_connect+0x2e4>
            msg->conn->current_msg = msg;
  10e778:	e51b3008 	ldr	r3, [fp, #-8]
  10e77c:	e5933000 	ldr	r3, [r3]
  10e780:	e51b2008 	ldr	r2, [fp, #-8]
  10e784:	e5832038 	str	r2, [r3, #56]	; 0x38
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
  10e788:	e51b3008 	ldr	r3, [fp, #-8]
  10e78c:	e5933000 	ldr	r3, [r3]
  10e790:	e5933004 	ldr	r3, [r3, #4]
  10e794:	e3530003 	cmp	r3, #3
  10e798:	0a000006 	beq	10e7b8 <lwip_netconn_do_connect+0x254>
  10e79c:	e30609a0 	movw	r0, #27040	; 0x69a0
  10e7a0:	e3400014 	movt	r0, #20
  10e7a4:	ebffd25a 	bl	103114 <rt_kprintf>
  10e7a8:	e30014df 	movw	r1, #1247	; 0x4df
  10e7ac:	e3060668 	movw	r0, #26216	; 0x6668
  10e7b0:	e3400014 	movt	r0, #20
  10e7b4:	ebfff23e 	bl	10b0b4 <sys_arch_assert>
            UNLOCK_TCPIP_CORE();
  10e7b8:	e30f060c 	movw	r0, #62988	; 0xf60c
  10e7bc:	e3400014 	movt	r0, #20
  10e7c0:	ebfff0cb 	bl	10aaf4 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10e7c4:	e51b3008 	ldr	r3, [fp, #-8]
  10e7c8:	e5933000 	ldr	r3, [r3]
  10e7cc:	e2833010 	add	r3, r3, #16
  10e7d0:	e3a01000 	mov	r1, #0
  10e7d4:	e1a00003 	mov	r0, r3
  10e7d8:	ebfff049 	bl	10a904 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
  10e7dc:	e30f060c 	movw	r0, #62988	; 0xf60c
  10e7e0:	e3400014 	movt	r0, #20
  10e7e4:	ebfff0b6 	bl	10aac4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
  10e7e8:	e51b3008 	ldr	r3, [fp, #-8]
  10e7ec:	e5933000 	ldr	r3, [r3]
  10e7f0:	e5933004 	ldr	r3, [r3, #4]
  10e7f4:	e3530003 	cmp	r3, #3
  10e7f8:	1a000024 	bne	10e890 <lwip_netconn_do_connect+0x32c>
  10e7fc:	e30609a0 	movw	r0, #27040	; 0x69a0
  10e800:	e3400014 	movt	r0, #20
  10e804:	ebffd242 	bl	103114 <rt_kprintf>
  10e808:	e30014e3 	movw	r1, #1251	; 0x4e3
  10e80c:	e3060668 	movw	r0, #26216	; 0x6668
  10e810:	e3400014 	movt	r0, #20
  10e814:	ebfff226 	bl	10b0b4 <sys_arch_assert>
            return;
  10e818:	ea00001c 	b	10e890 <lwip_netconn_do_connect+0x32c>
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
  10e81c:	e3060a28 	movw	r0, #27176	; 0x6a28
  10e820:	e3400014 	movt	r0, #20
  10e824:	ebffd23a 	bl	103114 <rt_kprintf>
  10e828:	e30014ec 	movw	r1, #1260	; 0x4ec
  10e82c:	e3060668 	movw	r0, #26216	; 0x6668
  10e830:	e3400014 	movt	r0, #20
  10e834:	ebfff21e 	bl	10b0b4 <sys_arch_assert>
  10e838:	e51b3008 	ldr	r3, [fp, #-8]
  10e83c:	e3e02005 	mvn	r2, #5
  10e840:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e844:	ea000000 	b	10e84c <lwip_netconn_do_connect+0x2e8>
      break;
  10e848:	e320f000 	nop	{0}
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
  10e84c:	e51b3008 	ldr	r3, [fp, #-8]
  10e850:	e5933000 	ldr	r3, [r3]
  10e854:	e3530000 	cmp	r3, #0
  10e858:	0a00000d 	beq	10e894 <lwip_netconn_do_connect+0x330>
  10e85c:	ebffce76 	bl	10223c <rt_enter_critical>
  10e860:	e51b3008 	ldr	r3, [fp, #-8]
  10e864:	e5933000 	ldr	r3, [r3]
  10e868:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e86c:	e373000c 	cmn	r3, #12
  10e870:	ba000004 	blt	10e888 <lwip_netconn_do_connect+0x324>
  10e874:	e51b3008 	ldr	r3, [fp, #-8]
  10e878:	e5933000 	ldr	r3, [r3]
  10e87c:	e51b2008 	ldr	r2, [fp, #-8]
  10e880:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e884:	e5c3200c 	strb	r2, [r3, #12]
  10e888:	ebffce71 	bl	102254 <rt_exit_critical>
  10e88c:	ea000000 	b	10e894 <lwip_netconn_do_connect+0x330>
            return;
  10e890:	e320f000 	nop	{0}
}
  10e894:	e24bd004 	sub	sp, fp, #4
  10e898:	e8bd8800 	pop	{fp, pc}

0010e89c <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
  10e89c:	e92d4800 	push	{fp, lr}
  10e8a0:	e28db004 	add	fp, sp, #4
  10e8a4:	e24dd010 	sub	sp, sp, #16
  10e8a8:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e8ac:	e51b3010 	ldr	r3, [fp, #-16]
  10e8b0:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10e8b4:	e51b3008 	ldr	r3, [fp, #-8]
  10e8b8:	e5933000 	ldr	r3, [r3]
  10e8bc:	e5933000 	ldr	r3, [r3]
  10e8c0:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e8c4:	e3530020 	cmp	r3, #32
  10e8c8:	1a000008 	bne	10e8f0 <lwip_netconn_do_disconnect+0x54>
    udp_disconnect(msg->conn->pcb.udp);
  10e8cc:	e51b3008 	ldr	r3, [fp, #-8]
  10e8d0:	e5933000 	ldr	r3, [r3]
  10e8d4:	e5933008 	ldr	r3, [r3, #8]
  10e8d8:	e1a00003 	mov	r0, r3
  10e8dc:	eb006813 	bl	128930 <udp_disconnect>
    msg->err = ERR_OK;
  10e8e0:	e51b3008 	ldr	r3, [fp, #-8]
  10e8e4:	e3a02000 	mov	r2, #0
  10e8e8:	e5c32004 	strb	r2, [r3, #4]
  10e8ec:	ea000002 	b	10e8fc <lwip_netconn_do_disconnect+0x60>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  10e8f0:	e51b3008 	ldr	r3, [fp, #-8]
  10e8f4:	e3e02005 	mvn	r2, #5
  10e8f8:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10e8fc:	e51b3008 	ldr	r3, [fp, #-8]
  10e900:	e5933000 	ldr	r3, [r3]
  10e904:	e3530000 	cmp	r3, #0
  10e908:	0a00000b 	beq	10e93c <lwip_netconn_do_disconnect+0xa0>
  10e90c:	ebffce4a 	bl	10223c <rt_enter_critical>
  10e910:	e51b3008 	ldr	r3, [fp, #-8]
  10e914:	e5933000 	ldr	r3, [r3]
  10e918:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e91c:	e373000c 	cmn	r3, #12
  10e920:	ba000004 	blt	10e938 <lwip_netconn_do_disconnect+0x9c>
  10e924:	e51b3008 	ldr	r3, [fp, #-8]
  10e928:	e5933000 	ldr	r3, [r3]
  10e92c:	e51b2008 	ldr	r2, [fp, #-8]
  10e930:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e934:	e5c3200c 	strb	r2, [r3, #12]
  10e938:	ebffce45 	bl	102254 <rt_exit_critical>
}
  10e93c:	e320f000 	nop	{0}
  10e940:	e24bd004 	sub	sp, fp, #4
  10e944:	e8bd8800 	pop	{fp, pc}

0010e948 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
  10e948:	e92d4800 	push	{fp, lr}
  10e94c:	e28db004 	add	fp, sp, #4
  10e950:	e24dd018 	sub	sp, sp, #24
  10e954:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10e958:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10e95c:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10e960:	e51b3008 	ldr	r3, [fp, #-8]
  10e964:	e5933000 	ldr	r3, [r3]
  10e968:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e96c:	e373000c 	cmn	r3, #12
  10e970:	aa000005 	bge	10e98c <lwip_netconn_do_listen+0x44>
    msg->err = msg->conn->last_err;
  10e974:	e51b3008 	ldr	r3, [fp, #-8]
  10e978:	e5933000 	ldr	r3, [r3]
  10e97c:	e1d320dc 	ldrsb	r2, [r3, #12]
  10e980:	e51b3008 	ldr	r3, [fp, #-8]
  10e984:	e5c32004 	strb	r2, [r3, #4]
  10e988:	ea000083 	b	10eb9c <lwip_netconn_do_listen+0x254>
  } else {
    msg->err = ERR_CONN;
  10e98c:	e51b3008 	ldr	r3, [fp, #-8]
  10e990:	e3e0200a 	mvn	r2, #10
  10e994:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10e998:	e51b3008 	ldr	r3, [fp, #-8]
  10e99c:	e5933000 	ldr	r3, [r3]
  10e9a0:	e5933008 	ldr	r3, [r3, #8]
  10e9a4:	e3530000 	cmp	r3, #0
  10e9a8:	0a00007b 	beq	10eb9c <lwip_netconn_do_listen+0x254>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10e9ac:	e51b3008 	ldr	r3, [fp, #-8]
  10e9b0:	e5933000 	ldr	r3, [r3]
  10e9b4:	e5933000 	ldr	r3, [r3]
  10e9b8:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e9bc:	e3530010 	cmp	r3, #16
  10e9c0:	1a000072 	bne	10eb90 <lwip_netconn_do_listen+0x248>
        if (msg->conn->state == NETCONN_NONE) {
  10e9c4:	e51b3008 	ldr	r3, [fp, #-8]
  10e9c8:	e5933000 	ldr	r3, [r3]
  10e9cc:	e5933004 	ldr	r3, [r3, #4]
  10e9d0:	e3530000 	cmp	r3, #0
  10e9d4:	1a000064 	bne	10eb6c <lwip_netconn_do_listen+0x224>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
  10e9d8:	e51b3008 	ldr	r3, [fp, #-8]
  10e9dc:	e5933000 	ldr	r3, [r3]
  10e9e0:	e5933008 	ldr	r3, [r3, #8]
  10e9e4:	e5933014 	ldr	r3, [r3, #20]
  10e9e8:	e3530000 	cmp	r3, #0
  10e9ec:	0a000003 	beq	10ea00 <lwip_netconn_do_listen+0xb8>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
  10e9f0:	e51b3008 	ldr	r3, [fp, #-8]
  10e9f4:	e3e02005 	mvn	r2, #5
  10e9f8:	e5c32004 	strb	r2, [r3, #4]
  10e9fc:	ea000066 	b	10eb9c <lwip_netconn_do_listen+0x254>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
  10ea00:	e3e03000 	mvn	r3, #0
  10ea04:	e54b3009 	strb	r3, [fp, #-9]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
  10ea08:	e51b3008 	ldr	r3, [fp, #-8]
  10ea0c:	e5933000 	ldr	r3, [r3]
  10ea10:	e5933008 	ldr	r3, [r3, #8]
  10ea14:	e24b2011 	sub	r2, fp, #17
  10ea18:	e55b1009 	ldrb	r1, [fp, #-9]
  10ea1c:	e1a00003 	mov	r0, r3
  10ea20:	eb003ca5 	bl	11dcbc <tcp_listen_with_backlog_and_err>
  10ea24:	e50b0010 	str	r0, [fp, #-16]

            if (lpcb == NULL) {
  10ea28:	e51b3010 	ldr	r3, [fp, #-16]
  10ea2c:	e3530000 	cmp	r3, #0
  10ea30:	1a000003 	bne	10ea44 <lwip_netconn_do_listen+0xfc>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
  10ea34:	e15b21d1 	ldrsb	r2, [fp, #-17]	; 0xffffffef
  10ea38:	e51b3008 	ldr	r3, [fp, #-8]
  10ea3c:	e5c32004 	strb	r2, [r3, #4]
  10ea40:	ea000055 	b	10eb9c <lwip_netconn_do_listen+0x254>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
  10ea44:	e51b3008 	ldr	r3, [fp, #-8]
  10ea48:	e5933000 	ldr	r3, [r3]
  10ea4c:	e2833014 	add	r3, r3, #20
  10ea50:	e1a00003 	mov	r0, r3
  10ea54:	ebfff14d 	bl	10af90 <sys_mbox_valid>
  10ea58:	e1a03000 	mov	r3, r0
  10ea5c:	e3530000 	cmp	r3, #0
  10ea60:	0a000009 	beq	10ea8c <lwip_netconn_do_listen+0x144>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
  10ea64:	e51b3008 	ldr	r3, [fp, #-8]
  10ea68:	e5933000 	ldr	r3, [r3]
  10ea6c:	e2833014 	add	r3, r3, #20
  10ea70:	e1a00003 	mov	r0, r3
  10ea74:	ebfff07e 	bl	10ac74 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
  10ea78:	e51b3008 	ldr	r3, [fp, #-8]
  10ea7c:	e5933000 	ldr	r3, [r3]
  10ea80:	e2833014 	add	r3, r3, #20
  10ea84:	e1a00003 	mov	r0, r3
  10ea88:	ebfff14a 	bl	10afb8 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
  10ea8c:	e51b3008 	ldr	r3, [fp, #-8]
  10ea90:	e3a02000 	mov	r2, #0
  10ea94:	e5c32004 	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
  10ea98:	e51b3008 	ldr	r3, [fp, #-8]
  10ea9c:	e5933000 	ldr	r3, [r3]
  10eaa0:	e2833018 	add	r3, r3, #24
  10eaa4:	e1a00003 	mov	r0, r3
  10eaa8:	ebfff138 	bl	10af90 <sys_mbox_valid>
  10eaac:	e1a03000 	mov	r3, r0
  10eab0:	e3530000 	cmp	r3, #0
  10eab4:	1a000009 	bne	10eae0 <lwip_netconn_do_listen+0x198>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
  10eab8:	e51b3008 	ldr	r3, [fp, #-8]
  10eabc:	e5933000 	ldr	r3, [r3]
  10eac0:	e2833018 	add	r3, r3, #24
  10eac4:	e3a0100a 	mov	r1, #10
  10eac8:	e1a00003 	mov	r0, r3
  10eacc:	ebfff033 	bl	10aba0 <sys_mbox_new>
  10ead0:	e1a03000 	mov	r3, r0
  10ead4:	e1a02003 	mov	r2, r3
  10ead8:	e51b3008 	ldr	r3, [fp, #-8]
  10eadc:	e5c32004 	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
  10eae0:	e51b3008 	ldr	r3, [fp, #-8]
  10eae4:	e1d330d4 	ldrsb	r3, [r3, #4]
  10eae8:	e3530000 	cmp	r3, #0
  10eaec:	1a000017 	bne	10eb50 <lwip_netconn_do_listen+0x208>
                msg->conn->state = NETCONN_LISTEN;
  10eaf0:	e51b3008 	ldr	r3, [fp, #-8]
  10eaf4:	e5933000 	ldr	r3, [r3]
  10eaf8:	e3a02002 	mov	r2, #2
  10eafc:	e5832004 	str	r2, [r3, #4]
                msg->conn->pcb.tcp = lpcb;
  10eb00:	e51b3008 	ldr	r3, [fp, #-8]
  10eb04:	e5933000 	ldr	r3, [r3]
  10eb08:	e51b2010 	ldr	r2, [fp, #-16]
  10eb0c:	e5832008 	str	r2, [r3, #8]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
  10eb10:	e51b3008 	ldr	r3, [fp, #-8]
  10eb14:	e5933000 	ldr	r3, [r3]
  10eb18:	e5932008 	ldr	r2, [r3, #8]
  10eb1c:	e51b3008 	ldr	r3, [fp, #-8]
  10eb20:	e5933000 	ldr	r3, [r3]
  10eb24:	e1a01003 	mov	r1, r3
  10eb28:	e1a00002 	mov	r0, r2
  10eb2c:	eb0043ff 	bl	11fb30 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
  10eb30:	e51b3008 	ldr	r3, [fp, #-8]
  10eb34:	e5933000 	ldr	r3, [r3]
  10eb38:	e5933008 	ldr	r3, [r3, #8]
  10eb3c:	e30c1fc0 	movw	r1, #53184	; 0xcfc0
  10eb40:	e3401010 	movt	r1, #16
  10eb44:	e1a00003 	mov	r0, r3
  10eb48:	eb004452 	bl	11fc98 <tcp_accept>
  10eb4c:	ea000012 	b	10eb9c <lwip_netconn_do_listen+0x254>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
  10eb50:	e51b0010 	ldr	r0, [fp, #-16]
  10eb54:	eb003aab 	bl	11d608 <tcp_close>
                msg->conn->pcb.tcp = NULL;
  10eb58:	e51b3008 	ldr	r3, [fp, #-8]
  10eb5c:	e5933000 	ldr	r3, [r3]
  10eb60:	e3a02000 	mov	r2, #0
  10eb64:	e5832008 	str	r2, [r3, #8]
  10eb68:	ea00000b 	b	10eb9c <lwip_netconn_do_listen+0x254>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
  10eb6c:	e51b3008 	ldr	r3, [fp, #-8]
  10eb70:	e5933000 	ldr	r3, [r3]
  10eb74:	e5933004 	ldr	r3, [r3, #4]
  10eb78:	e3530002 	cmp	r3, #2
  10eb7c:	1a000006 	bne	10eb9c <lwip_netconn_do_listen+0x254>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
  10eb80:	e51b3008 	ldr	r3, [fp, #-8]
  10eb84:	e3a02000 	mov	r2, #0
  10eb88:	e5c32004 	strb	r2, [r3, #4]
  10eb8c:	ea000002 	b	10eb9c <lwip_netconn_do_listen+0x254>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
  10eb90:	e51b3008 	ldr	r3, [fp, #-8]
  10eb94:	e3e0200f 	mvn	r2, #15
  10eb98:	e5c32004 	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10eb9c:	e51b3008 	ldr	r3, [fp, #-8]
  10eba0:	e5933000 	ldr	r3, [r3]
  10eba4:	e3530000 	cmp	r3, #0
  10eba8:	0a00000b 	beq	10ebdc <lwip_netconn_do_listen+0x294>
  10ebac:	ebffcda2 	bl	10223c <rt_enter_critical>
  10ebb0:	e51b3008 	ldr	r3, [fp, #-8]
  10ebb4:	e5933000 	ldr	r3, [r3]
  10ebb8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ebbc:	e373000c 	cmn	r3, #12
  10ebc0:	ba000004 	blt	10ebd8 <lwip_netconn_do_listen+0x290>
  10ebc4:	e51b3008 	ldr	r3, [fp, #-8]
  10ebc8:	e5933000 	ldr	r3, [r3]
  10ebcc:	e51b2008 	ldr	r2, [fp, #-8]
  10ebd0:	e1d220d4 	ldrsb	r2, [r2, #4]
  10ebd4:	e5c3200c 	strb	r2, [r3, #12]
  10ebd8:	ebffcd9d 	bl	102254 <rt_exit_critical>
}
  10ebdc:	e320f000 	nop	{0}
  10ebe0:	e24bd004 	sub	sp, fp, #4
  10ebe4:	e8bd8800 	pop	{fp, pc}

0010ebe8 <lwip_netconn_do_send>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
  10ebe8:	e92d4800 	push	{fp, lr}
  10ebec:	e28db004 	add	fp, sp, #4
  10ebf0:	e24dd010 	sub	sp, sp, #16
  10ebf4:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10ebf8:	e51b3010 	ldr	r3, [fp, #-16]
  10ebfc:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10ec00:	e51b3008 	ldr	r3, [fp, #-8]
  10ec04:	e5933000 	ldr	r3, [r3]
  10ec08:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ec0c:	e373000c 	cmn	r3, #12
  10ec10:	aa000005 	bge	10ec2c <lwip_netconn_do_send+0x44>
    msg->err = msg->conn->last_err;
  10ec14:	e51b3008 	ldr	r3, [fp, #-8]
  10ec18:	e5933000 	ldr	r3, [r3]
  10ec1c:	e1d320dc 	ldrsb	r2, [r3, #12]
  10ec20:	e51b3008 	ldr	r3, [fp, #-8]
  10ec24:	e5c32004 	strb	r2, [r3, #4]
  10ec28:	ea00005e 	b	10eda8 <lwip_netconn_do_send+0x1c0>
  } else {
    msg->err = ERR_CONN;
  10ec2c:	e51b3008 	ldr	r3, [fp, #-8]
  10ec30:	e3e0200a 	mvn	r2, #10
  10ec34:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10ec38:	e51b3008 	ldr	r3, [fp, #-8]
  10ec3c:	e5933000 	ldr	r3, [r3]
  10ec40:	e5933008 	ldr	r3, [r3, #8]
  10ec44:	e3530000 	cmp	r3, #0
  10ec48:	0a000055 	beq	10eda4 <lwip_netconn_do_send+0x1bc>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10ec4c:	e51b3008 	ldr	r3, [fp, #-8]
  10ec50:	e5933000 	ldr	r3, [r3]
  10ec54:	e5933000 	ldr	r3, [r3]
  10ec58:	e20330f0 	and	r3, r3, #240	; 0xf0
  10ec5c:	e3530020 	cmp	r3, #32
  10ec60:	0a00002a 	beq	10ed10 <lwip_netconn_do_send+0x128>
  10ec64:	e3530040 	cmp	r3, #64	; 0x40
  10ec68:	0a000000 	beq	10ec70 <lwip_netconn_do_send+0x88>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
  10ec6c:	ea00004d 	b	10eda8 <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany(&msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10ec70:	e51b3008 	ldr	r3, [fp, #-8]
  10ec74:	e5933008 	ldr	r3, [r3, #8]
  10ec78:	e2833008 	add	r3, r3, #8
  10ec7c:	e3530000 	cmp	r3, #0
  10ec80:	0a000004 	beq	10ec98 <lwip_netconn_do_send+0xb0>
  10ec84:	e51b3008 	ldr	r3, [fp, #-8]
  10ec88:	e5933008 	ldr	r3, [r3, #8]
  10ec8c:	e5933008 	ldr	r3, [r3, #8]
  10ec90:	e3530000 	cmp	r3, #0
  10ec94:	1a00000d 	bne	10ecd0 <lwip_netconn_do_send+0xe8>
          msg->err = raw_send(msg->conn->pcb.raw, msg->msg.b->p);
  10ec98:	e51b3008 	ldr	r3, [fp, #-8]
  10ec9c:	e5933000 	ldr	r3, [r3]
  10eca0:	e5932008 	ldr	r2, [r3, #8]
  10eca4:	e51b3008 	ldr	r3, [fp, #-8]
  10eca8:	e5933008 	ldr	r3, [r3, #8]
  10ecac:	e5933000 	ldr	r3, [r3]
  10ecb0:	e1a01003 	mov	r1, r3
  10ecb4:	e1a00002 	mov	r0, r2
  10ecb8:	eb00367a 	bl	11c6a8 <raw_send>
  10ecbc:	e1a03000 	mov	r3, r0
  10ecc0:	e1a02003 	mov	r2, r3
  10ecc4:	e51b3008 	ldr	r3, [fp, #-8]
  10ecc8:	e5c32004 	strb	r2, [r3, #4]
        break;
  10eccc:	ea000035 	b	10eda8 <lwip_netconn_do_send+0x1c0>
          msg->err = raw_sendto(msg->conn->pcb.raw, msg->msg.b->p, &msg->msg.b->addr);
  10ecd0:	e51b3008 	ldr	r3, [fp, #-8]
  10ecd4:	e5933000 	ldr	r3, [r3]
  10ecd8:	e5930008 	ldr	r0, [r3, #8]
  10ecdc:	e51b3008 	ldr	r3, [fp, #-8]
  10ece0:	e5933008 	ldr	r3, [r3, #8]
  10ece4:	e5931000 	ldr	r1, [r3]
  10ece8:	e51b3008 	ldr	r3, [fp, #-8]
  10ecec:	e5933008 	ldr	r3, [r3, #8]
  10ecf0:	e2833008 	add	r3, r3, #8
  10ecf4:	e1a02003 	mov	r2, r3
  10ecf8:	eb0035dc 	bl	11c470 <raw_sendto>
  10ecfc:	e1a03000 	mov	r3, r0
  10ed00:	e1a02003 	mov	r2, r3
  10ed04:	e51b3008 	ldr	r3, [fp, #-8]
  10ed08:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ed0c:	ea000025 	b	10eda8 <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10ed10:	e51b3008 	ldr	r3, [fp, #-8]
  10ed14:	e5933008 	ldr	r3, [r3, #8]
  10ed18:	e5933008 	ldr	r3, [r3, #8]
  10ed1c:	e3530000 	cmp	r3, #0
  10ed20:	1a00000d 	bne	10ed5c <lwip_netconn_do_send+0x174>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
  10ed24:	e51b3008 	ldr	r3, [fp, #-8]
  10ed28:	e5933000 	ldr	r3, [r3]
  10ed2c:	e5932008 	ldr	r2, [r3, #8]
  10ed30:	e51b3008 	ldr	r3, [fp, #-8]
  10ed34:	e5933008 	ldr	r3, [r3, #8]
  10ed38:	e5933000 	ldr	r3, [r3]
  10ed3c:	e1a01003 	mov	r1, r3
  10ed40:	e1a00002 	mov	r0, r2
  10ed44:	eb0064d5 	bl	1280a0 <udp_send>
  10ed48:	e1a03000 	mov	r3, r0
  10ed4c:	e1a02003 	mov	r2, r3
  10ed50:	e51b3008 	ldr	r3, [fp, #-8]
  10ed54:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ed58:	ea000012 	b	10eda8 <lwip_netconn_do_send+0x1c0>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
  10ed5c:	e51b3008 	ldr	r3, [fp, #-8]
  10ed60:	e5933000 	ldr	r3, [r3]
  10ed64:	e5930008 	ldr	r0, [r3, #8]
  10ed68:	e51b3008 	ldr	r3, [fp, #-8]
  10ed6c:	e5933008 	ldr	r3, [r3, #8]
  10ed70:	e5931000 	ldr	r1, [r3]
  10ed74:	e51b3008 	ldr	r3, [fp, #-8]
  10ed78:	e5933008 	ldr	r3, [r3, #8]
  10ed7c:	e2832008 	add	r2, r3, #8
  10ed80:	e51b3008 	ldr	r3, [fp, #-8]
  10ed84:	e5933008 	ldr	r3, [r3, #8]
  10ed88:	e1d330bc 	ldrh	r3, [r3, #12]
  10ed8c:	eb0064d8 	bl	1280f4 <udp_sendto>
  10ed90:	e1a03000 	mov	r3, r0
  10ed94:	e1a02003 	mov	r2, r3
  10ed98:	e51b3008 	ldr	r3, [fp, #-8]
  10ed9c:	e5c32004 	strb	r2, [r3, #4]
        break;
  10eda0:	ea000000 	b	10eda8 <lwip_netconn_do_send+0x1c0>
      }
    }
  10eda4:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10eda8:	e51b3008 	ldr	r3, [fp, #-8]
  10edac:	e5933000 	ldr	r3, [r3]
  10edb0:	e3530000 	cmp	r3, #0
  10edb4:	0a00000b 	beq	10ede8 <lwip_netconn_do_send+0x200>
  10edb8:	ebffcd1f 	bl	10223c <rt_enter_critical>
  10edbc:	e51b3008 	ldr	r3, [fp, #-8]
  10edc0:	e5933000 	ldr	r3, [r3]
  10edc4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10edc8:	e373000c 	cmn	r3, #12
  10edcc:	ba000004 	blt	10ede4 <lwip_netconn_do_send+0x1fc>
  10edd0:	e51b3008 	ldr	r3, [fp, #-8]
  10edd4:	e5933000 	ldr	r3, [r3]
  10edd8:	e51b2008 	ldr	r2, [fp, #-8]
  10eddc:	e1d220d4 	ldrsb	r2, [r2, #4]
  10ede0:	e5c3200c 	strb	r2, [r3, #12]
  10ede4:	ebffcd1a 	bl	102254 <rt_exit_critical>
}
  10ede8:	e320f000 	nop	{0}
  10edec:	e24bd004 	sub	sp, fp, #4
  10edf0:	e8bd8800 	pop	{fp, pc}

0010edf4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
  10edf4:	e92d4800 	push	{fp, lr}
  10edf8:	e28db004 	add	fp, sp, #4
  10edfc:	e24dd018 	sub	sp, sp, #24
  10ee00:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10ee04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ee08:	e50b300c 	str	r3, [fp, #-12]

  msg->err = ERR_OK;
  10ee0c:	e51b300c 	ldr	r3, [fp, #-12]
  10ee10:	e3a02000 	mov	r2, #0
  10ee14:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
  10ee18:	e51b300c 	ldr	r3, [fp, #-12]
  10ee1c:	e5933000 	ldr	r3, [r3]
  10ee20:	e5933008 	ldr	r3, [r3, #8]
  10ee24:	e3530000 	cmp	r3, #0
  10ee28:	0a00001e 	beq	10eea8 <lwip_netconn_do_recv+0xb4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10ee2c:	e51b300c 	ldr	r3, [fp, #-12]
  10ee30:	e5933000 	ldr	r3, [r3]
  10ee34:	e5933000 	ldr	r3, [r3]
  10ee38:	e20330f0 	and	r3, r3, #240	; 0xf0
  10ee3c:	e3530010 	cmp	r3, #16
  10ee40:	1a000018 	bne	10eea8 <lwip_netconn_do_recv+0xb4>
      u32_t remaining = msg->msg.r.len;
  10ee44:	e51b300c 	ldr	r3, [fp, #-12]
  10ee48:	e5933008 	ldr	r3, [r3, #8]
  10ee4c:	e50b3008 	str	r3, [fp, #-8]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
  10ee50:	e51b3008 	ldr	r3, [fp, #-8]
  10ee54:	e3530801 	cmp	r3, #65536	; 0x10000
  10ee58:	2a000002 	bcs	10ee68 <lwip_netconn_do_recv+0x74>
  10ee5c:	e51b3008 	ldr	r3, [fp, #-8]
  10ee60:	e6ff3073 	uxth	r3, r3
  10ee64:	ea000000 	b	10ee6c <lwip_netconn_do_recv+0x78>
  10ee68:	e30f3fff 	movw	r3, #65535	; 0xffff
  10ee6c:	e14b30be 	strh	r3, [fp, #-14]
        tcp_recved(msg->conn->pcb.tcp, recved);
  10ee70:	e51b300c 	ldr	r3, [fp, #-12]
  10ee74:	e5933000 	ldr	r3, [r3]
  10ee78:	e5933008 	ldr	r3, [r3, #8]
  10ee7c:	e15b20be 	ldrh	r2, [fp, #-14]
  10ee80:	e1a01002 	mov	r1, r2
  10ee84:	e1a00003 	mov	r0, r3
  10ee88:	eb003c81 	bl	11e094 <tcp_recved>
        remaining -= recved;
  10ee8c:	e15b30be 	ldrh	r3, [fp, #-14]
  10ee90:	e51b2008 	ldr	r2, [fp, #-8]
  10ee94:	e0423003 	sub	r3, r2, r3
  10ee98:	e50b3008 	str	r3, [fp, #-8]
      } while (remaining != 0);
  10ee9c:	e51b3008 	ldr	r3, [fp, #-8]
  10eea0:	e3530000 	cmp	r3, #0
  10eea4:	1affffe9 	bne	10ee50 <lwip_netconn_do_recv+0x5c>
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10eea8:	e51b300c 	ldr	r3, [fp, #-12]
  10eeac:	e5933000 	ldr	r3, [r3]
  10eeb0:	e3530000 	cmp	r3, #0
  10eeb4:	0a00000b 	beq	10eee8 <lwip_netconn_do_recv+0xf4>
  10eeb8:	ebffccdf 	bl	10223c <rt_enter_critical>
  10eebc:	e51b300c 	ldr	r3, [fp, #-12]
  10eec0:	e5933000 	ldr	r3, [r3]
  10eec4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10eec8:	e373000c 	cmn	r3, #12
  10eecc:	ba000004 	blt	10eee4 <lwip_netconn_do_recv+0xf0>
  10eed0:	e51b300c 	ldr	r3, [fp, #-12]
  10eed4:	e5933000 	ldr	r3, [r3]
  10eed8:	e51b200c 	ldr	r2, [fp, #-12]
  10eedc:	e1d220d4 	ldrsb	r2, [r2, #4]
  10eee0:	e5c3200c 	strb	r2, [r3, #12]
  10eee4:	ebffccda 	bl	102254 <rt_exit_critical>
}
  10eee8:	e320f000 	nop	{0}
  10eeec:	e24bd004 	sub	sp, fp, #4
  10eef0:	e8bd8800 	pop	{fp, pc}

0010eef4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10eef4:	e92d4800 	push	{fp, lr}
  10eef8:	e28db004 	add	fp, sp, #4
  10eefc:	e24dd020 	sub	sp, sp, #32
  10ef00:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10ef04:	e1a03001 	mov	r3, r1
  10ef08:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
  10ef0c:	e3a03000 	mov	r3, #0
  10ef10:	e54b3009 	strb	r3, [fp, #-9]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
  10ef14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef18:	e3530000 	cmp	r3, #0
  10ef1c:	1a000006 	bne	10ef3c <lwip_netconn_do_writemore+0x48>
  10ef20:	e3060760 	movw	r0, #26464	; 0x6760
  10ef24:	e3400014 	movt	r0, #20
  10ef28:	ebffd079 	bl	103114 <rt_kprintf>
  10ef2c:	e30015dd 	movw	r1, #1501	; 0x5dd
  10ef30:	e3060668 	movw	r0, #26216	; 0x6668
  10ef34:	e3400014 	movt	r0, #20
  10ef38:	ebfff05d 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
  10ef3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef40:	e5933004 	ldr	r3, [r3, #4]
  10ef44:	e3530001 	cmp	r3, #1
  10ef48:	0a000006 	beq	10ef68 <lwip_netconn_do_writemore+0x74>
  10ef4c:	e3060a40 	movw	r0, #27200	; 0x6a40
  10ef50:	e3400014 	movt	r0, #20
  10ef54:	ebffd06e 	bl	103114 <rt_kprintf>
  10ef58:	e30015de 	movw	r1, #1502	; 0x5de
  10ef5c:	e3060668 	movw	r0, #26216	; 0x6668
  10ef60:	e3400014 	movt	r0, #20
  10ef64:	ebfff052 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10ef68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef6c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ef70:	e3530000 	cmp	r3, #0
  10ef74:	1a000006 	bne	10ef94 <lwip_netconn_do_writemore+0xa0>
  10ef78:	e3060770 	movw	r0, #26480	; 0x6770
  10ef7c:	e3400014 	movt	r0, #20
  10ef80:	ebffd063 	bl	103114 <rt_kprintf>
  10ef84:	e30015df 	movw	r1, #1503	; 0x5df
  10ef88:	e3060668 	movw	r0, #26216	; 0x6668
  10ef8c:	e3400014 	movt	r0, #20
  10ef90:	ebfff047 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
  10ef94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef98:	e5933008 	ldr	r3, [r3, #8]
  10ef9c:	e3530000 	cmp	r3, #0
  10efa0:	1a000006 	bne	10efc0 <lwip_netconn_do_writemore+0xcc>
  10efa4:	e3060a60 	movw	r0, #27232	; 0x6a60
  10efa8:	e3400014 	movt	r0, #20
  10efac:	ebffd058 	bl	103114 <rt_kprintf>
  10efb0:	e3a01e5e 	mov	r1, #1504	; 0x5e0
  10efb4:	e3060668 	movw	r0, #26216	; 0x6668
  10efb8:	e3400014 	movt	r0, #20
  10efbc:	ebfff03c 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
  10efc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efc4:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10efc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efcc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10efd0:	e593300c 	ldr	r3, [r3, #12]
  10efd4:	e1520003 	cmp	r2, r3
  10efd8:	3a000006 	bcc	10eff8 <lwip_netconn_do_writemore+0x104>
  10efdc:	e3060a78 	movw	r0, #27256	; 0x6a78
  10efe0:	e3400014 	movt	r0, #20
  10efe4:	ebffd04a 	bl	103114 <rt_kprintf>
  10efe8:	e30015e2 	movw	r1, #1506	; 0x5e2
  10efec:	e3060668 	movw	r0, #26216	; 0x6668
  10eff0:	e3400014 	movt	r0, #20
  10eff4:	ebfff02e 	bl	10b0b4 <sys_arch_assert>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
  10eff8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10effc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f000:	e5d33010 	ldrb	r3, [r3, #16]
  10f004:	e54b300a 	strb	r3, [fp, #-10]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10f008:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f00c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10f010:	e2033002 	and	r3, r3, #2
  10f014:	e3530000 	cmp	r3, #0
  10f018:	1a000003 	bne	10f02c <lwip_netconn_do_writemore+0x138>
  10f01c:	e55b300a 	ldrb	r3, [fp, #-10]
  10f020:	e2033004 	and	r3, r3, #4
  10f024:	e3530000 	cmp	r3, #0
  10f028:	0a000001 	beq	10f034 <lwip_netconn_do_writemore+0x140>
  10f02c:	e3a03001 	mov	r3, #1
  10f030:	ea000000 	b	10f038 <lwip_netconn_do_writemore+0x144>
  10f034:	e3a03000 	mov	r3, #0
  10f038:	e54b300b 	strb	r3, [fp, #-11]

#if LWIP_SO_SNDTIMEO
  if ((conn->send_timeout != 0) &&
  10f03c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f040:	e5933020 	ldr	r3, [r3, #32]
  10f044:	e3530000 	cmp	r3, #0
  10f048:	0a000022 	beq	10f0d8 <lwip_netconn_do_writemore+0x1e4>
      ((s32_t)(sys_now() - conn->current_msg->msg.w.time_started) >= conn->send_timeout)) {
  10f04c:	ebfff031 	bl	10b118 <sys_now>
  10f050:	e1a02000 	mov	r2, r0
  10f054:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f058:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f05c:	e5933014 	ldr	r3, [r3, #20]
  10f060:	e0423003 	sub	r3, r2, r3
  10f064:	e1a02003 	mov	r2, r3
  10f068:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f06c:	e5933020 	ldr	r3, [r3, #32]
  if ((conn->send_timeout != 0) &&
  10f070:	e1520003 	cmp	r2, r3
  10f074:	ba000017 	blt	10f0d8 <lwip_netconn_do_writemore+0x1e4>
    write_finished = 1;
  10f078:	e3a03001 	mov	r3, #1
  10f07c:	e54b3009 	strb	r3, [fp, #-9]
    if (conn->write_offset == 0) {
  10f080:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f084:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f088:	e3530000 	cmp	r3, #0
  10f08c:	1a000006 	bne	10f0ac <lwip_netconn_do_writemore+0x1b8>
      /* nothing has been written */
      err = ERR_WOULDBLOCK;
  10f090:	e3e03006 	mvn	r3, #6
  10f094:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = 0;
  10f098:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f09c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0a0:	e3a02000 	mov	r2, #0
  10f0a4:	e583200c 	str	r2, [r3, #12]
    if (conn->write_offset == 0) {
  10f0a8:	ea0000df 	b	10f42c <lwip_netconn_do_writemore+0x538>
    } else {
      /* partial write */
      err = ERR_OK;
  10f0ac:	e3a03000 	mov	r3, #0
  10f0b0:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = conn->write_offset;
  10f0b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0b8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0bc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10f0c0:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10f0c4:	e583200c 	str	r2, [r3, #12]
      conn->write_offset = 0;
  10f0c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0cc:	e3a02000 	mov	r2, #0
  10f0d0:	e5832034 	str	r2, [r3, #52]	; 0x34
    if (conn->write_offset == 0) {
  10f0d4:	ea0000d4 	b	10f42c <lwip_netconn_do_writemore+0x538>
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
  10f0d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0dc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0e0:	e5932008 	ldr	r2, [r3, #8]
  10f0e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0e8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f0ec:	e0823003 	add	r3, r2, r3
  10f0f0:	e50b3010 	str	r3, [fp, #-16]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
  10f0f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0f8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0fc:	e593200c 	ldr	r2, [r3, #12]
  10f100:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f104:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f108:	e0423003 	sub	r3, r2, r3
  10f10c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (diff > 0xffffUL) { /* max_u16_t */
  10f110:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10f114:	e3530801 	cmp	r3, #65536	; 0x10000
  10f118:	3a000005 	bcc	10f134 <lwip_netconn_do_writemore+0x240>
      len = 0xffff;
  10f11c:	e3e03000 	mvn	r3, #0
  10f120:	e14b30b8 	strh	r3, [fp, #-8]
      apiflags |= TCP_WRITE_FLAG_MORE;
  10f124:	e55b300a 	ldrb	r3, [fp, #-10]
  10f128:	e3833002 	orr	r3, r3, #2
  10f12c:	e54b300a 	strb	r3, [fp, #-10]
  10f130:	ea000001 	b	10f13c <lwip_netconn_do_writemore+0x248>
    } else {
      len = (u16_t)diff;
  10f134:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10f138:	e14b30b8 	strh	r3, [fp, #-8]
    }
    available = tcp_sndbuf(conn->pcb.tcp);
  10f13c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f140:	e5933008 	ldr	r3, [r3, #8]
  10f144:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10f148:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (available < len) {
  10f14c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10f150:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f154:	e1520003 	cmp	r2, r3
  10f158:	2a00000d 	bcs	10f194 <lwip_netconn_do_writemore+0x2a0>
      /* don't try to write more than sendbuf */
      len = available;
  10f15c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10f160:	e14b30b8 	strh	r3, [fp, #-8]
      if (dontblock) {
  10f164:	e55b300b 	ldrb	r3, [fp, #-11]
  10f168:	e3530000 	cmp	r3, #0
  10f16c:	0a000005 	beq	10f188 <lwip_netconn_do_writemore+0x294>
        if (!len) {
  10f170:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f174:	e3530000 	cmp	r3, #0
  10f178:	1a000005 	bne	10f194 <lwip_netconn_do_writemore+0x2a0>
          err = ERR_WOULDBLOCK;
  10f17c:	e3e03006 	mvn	r3, #6
  10f180:	e54b3005 	strb	r3, [fp, #-5]
          goto err_mem;
  10f184:	ea000021 	b	10f210 <lwip_netconn_do_writemore+0x31c>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
  10f188:	e55b300a 	ldrb	r3, [fp, #-10]
  10f18c:	e3833002 	orr	r3, r3, #2
  10f190:	e54b300a 	strb	r3, [fp, #-10]
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
  10f194:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f198:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f19c:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f1a0:	e0822003 	add	r2, r2, r3
  10f1a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1a8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f1ac:	e593300c 	ldr	r3, [r3, #12]
  10f1b0:	e1520003 	cmp	r2, r3
  10f1b4:	9a000006 	bls	10f1d4 <lwip_netconn_do_writemore+0x2e0>
  10f1b8:	e3060aac 	movw	r0, #27308	; 0x6aac
  10f1bc:	e3400014 	movt	r0, #20
  10f1c0:	ebffcfd3 	bl	103114 <rt_kprintf>
  10f1c4:	e300160d 	movw	r1, #1549	; 0x60d
  10f1c8:	e3060668 	movw	r0, #26216	; 0x6668
  10f1cc:	e3400014 	movt	r0, #20
  10f1d0:	ebffefb7 	bl	10b0b4 <sys_arch_assert>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
  10f1d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1d8:	e5930008 	ldr	r0, [r3, #8]
  10f1dc:	e55b300a 	ldrb	r3, [fp, #-10]
  10f1e0:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f1e4:	e51b1010 	ldr	r1, [fp, #-16]
  10f1e8:	eb00571b 	bl	124e5c <tcp_write>
  10f1ec:	e1a03000 	mov	r3, r0
  10f1f0:	e54b3005 	strb	r3, [fp, #-5]
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
  10f1f4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f1f8:	e3530000 	cmp	r3, #0
  10f1fc:	0a000002 	beq	10f20c <lwip_netconn_do_writemore+0x318>
  10f200:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f204:	e3730001 	cmn	r3, #1
  10f208:	1a00002e 	bne	10f2c8 <lwip_netconn_do_writemore+0x3d4>
err_mem:
  10f20c:	e320f000 	nop	{0}
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
  10f210:	e55b300b 	ldrb	r3, [fp, #-11]
  10f214:	e3530000 	cmp	r3, #0
  10f218:	0a000016 	beq	10f278 <lwip_netconn_do_writemore+0x384>
  10f21c:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f220:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f224:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f228:	e593300c 	ldr	r3, [r3, #12]
  10f22c:	e1520003 	cmp	r2, r3
  10f230:	2a000010 	bcs	10f278 <lwip_netconn_do_writemore+0x384>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10f234:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f238:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f23c:	e3530000 	cmp	r3, #0
  10f240:	0a000005 	beq	10f25c <lwip_netconn_do_writemore+0x368>
  10f244:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f248:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f24c:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f250:	e3a01003 	mov	r1, #3
  10f254:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10f258:	e12fff33 	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
  10f25c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f260:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10f264:	e3833010 	orr	r3, r3, #16
  10f268:	e6ef2073 	uxtb	r2, r3
  10f26c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f270:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10f274:	ea000013 	b	10f2c8 <lwip_netconn_do_writemore+0x3d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10f278:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f27c:	e5933008 	ldr	r3, [r3, #8]
  10f280:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10f284:	e3530a01 	cmp	r3, #4096	; 0x1000
  10f288:	9a000004 	bls	10f2a0 <lwip_netconn_do_writemore+0x3ac>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
  10f28c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f290:	e5933008 	ldr	r3, [r3, #8]
  10f294:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10f298:	e353000a 	cmp	r3, #10
  10f29c:	9a000009 	bls	10f2c8 <lwip_netconn_do_writemore+0x3d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10f2a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2a4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f2a8:	e3530000 	cmp	r3, #0
  10f2ac:	0a000005 	beq	10f2c8 <lwip_netconn_do_writemore+0x3d4>
  10f2b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2b4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f2b8:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f2bc:	e3a01003 	mov	r1, #3
  10f2c0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10f2c4:	e12fff33 	blx	r3
      }
    }

    if (err == ERR_OK) {
  10f2c8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f2cc:	e3530000 	cmp	r3, #0
  10f2d0:	1a00002b 	bne	10f384 <lwip_netconn_do_writemore+0x490>
      err_t out_err;
      conn->write_offset += len;
  10f2d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2d8:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f2dc:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f2e0:	e0822003 	add	r2, r2, r3
  10f2e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2e8:	e5832034 	str	r2, [r3, #52]	; 0x34
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
  10f2ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2f0:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f2f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2f8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f2fc:	e593300c 	ldr	r3, [r3, #12]
  10f300:	e1520003 	cmp	r2, r3
  10f304:	0a000002 	beq	10f314 <lwip_netconn_do_writemore+0x420>
  10f308:	e55b300b 	ldrb	r3, [fp, #-11]
  10f30c:	e3530000 	cmp	r3, #0
  10f310:	0a000006 	beq	10f330 <lwip_netconn_do_writemore+0x43c>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
  10f314:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f318:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f31c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10f320:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10f324:	e583200c 	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
  10f328:	e3a03001 	mov	r3, #1
  10f32c:	e54b3009 	strb	r3, [fp, #-9]
      }
      out_err = tcp_output(conn->pcb.tcp);
  10f330:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f334:	e5933008 	ldr	r3, [r3, #8]
  10f338:	e1a00003 	mov	r0, r3
  10f33c:	eb005af7 	bl	125f20 <tcp_output>
  10f340:	e1a03000 	mov	r3, r0
  10f344:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10f348:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10f34c:	e373000c 	cmn	r3, #12
  10f350:	ba000002 	blt	10f360 <lwip_netconn_do_writemore+0x46c>
  10f354:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10f358:	e3730004 	cmn	r3, #4
  10f35c:	1a000032 	bne	10f42c <lwip_netconn_do_writemore+0x538>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10f360:	e55b3018 	ldrb	r3, [fp, #-24]	; 0xffffffe8
  10f364:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f368:	e3a03001 	mov	r3, #1
  10f36c:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f370:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f374:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f378:	e3a02000 	mov	r2, #0
  10f37c:	e583200c 	str	r2, [r3, #12]
  10f380:	ea000029 	b	10f42c <lwip_netconn_do_writemore+0x538>
      }
    } else if (err == ERR_MEM) {
  10f384:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f388:	e3730001 	cmn	r3, #1
  10f38c:	1a000020 	bne	10f414 <lwip_netconn_do_writemore+0x520>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
  10f390:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f394:	e5933008 	ldr	r3, [r3, #8]
  10f398:	e1a00003 	mov	r0, r3
  10f39c:	eb005adf 	bl	125f20 <tcp_output>
  10f3a0:	e1a03000 	mov	r3, r0
  10f3a4:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10f3a8:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f3ac:	e373000c 	cmn	r3, #12
  10f3b0:	ba000002 	blt	10f3c0 <lwip_netconn_do_writemore+0x4cc>
  10f3b4:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f3b8:	e3730004 	cmn	r3, #4
  10f3bc:	1a000008 	bne	10f3e4 <lwip_netconn_do_writemore+0x4f0>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10f3c0:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
  10f3c4:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f3c8:	e3a03001 	mov	r3, #1
  10f3cc:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f3d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f3d4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f3d8:	e3a02000 	mov	r2, #0
  10f3dc:	e583200c 	str	r2, [r3, #12]
  10f3e0:	ea000011 	b	10f42c <lwip_netconn_do_writemore+0x538>
      } else if (dontblock) {
  10f3e4:	e55b300b 	ldrb	r3, [fp, #-11]
  10f3e8:	e3530000 	cmp	r3, #0
  10f3ec:	0a00000e 	beq	10f42c <lwip_netconn_do_writemore+0x538>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
  10f3f0:	e3e03006 	mvn	r3, #6
  10f3f4:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f3f8:	e3a03001 	mov	r3, #1
  10f3fc:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f400:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f404:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f408:	e3a02000 	mov	r2, #0
  10f40c:	e583200c 	str	r2, [r3, #12]
  10f410:	ea000005 	b	10f42c <lwip_netconn_do_writemore+0x538>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
  10f414:	e3a03001 	mov	r3, #1
  10f418:	e54b3009 	strb	r3, [fp, #-9]
      conn->current_msg->msg.w.len = 0;
  10f41c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f420:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f424:	e3a02000 	mov	r2, #0
  10f428:	e583200c 	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
  10f42c:	e55b3009 	ldrb	r3, [fp, #-9]
  10f430:	e3530000 	cmp	r3, #0
  10f434:	0a000023 	beq	10f4c8 <lwip_netconn_do_writemore+0x5d4>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10f438:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f43c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f440:	e5933000 	ldr	r3, [r3]
  10f444:	e2833010 	add	r3, r3, #16
  10f448:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    conn->current_msg->err = err;
  10f44c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f450:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f454:	e55b2005 	ldrb	r2, [fp, #-5]
  10f458:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10f45c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f460:	e3a02000 	mov	r2, #0
  10f464:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->write_offset = 0;
  10f468:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f46c:	e3a02000 	mov	r2, #0
  10f470:	e5832034 	str	r2, [r3, #52]	; 0x34
    conn->state = NETCONN_NONE;
  10f474:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f478:	e3a02000 	mov	r2, #0
  10f47c:	e5832004 	str	r2, [r3, #4]
    NETCONN_SET_SAFE_ERR(conn, err);
  10f480:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f484:	e3530000 	cmp	r3, #0
  10f488:	0a000008 	beq	10f4b0 <lwip_netconn_do_writemore+0x5bc>
  10f48c:	ebffcb6a 	bl	10223c <rt_enter_critical>
  10f490:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f494:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f498:	e373000c 	cmn	r3, #12
  10f49c:	ba000002 	blt	10f4ac <lwip_netconn_do_writemore+0x5b8>
  10f4a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4a4:	e55b2005 	ldrb	r2, [fp, #-5]
  10f4a8:	e5c3200c 	strb	r2, [r3, #12]
  10f4ac:	ebffcb68 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10f4b0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10f4b4:	e3530000 	cmp	r3, #0
  10f4b8:	0a000004 	beq	10f4d0 <lwip_netconn_do_writemore+0x5dc>
#endif
    {
      sys_sem_signal(op_completed_sem);
  10f4bc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  10f4c0:	ebffed04 	bl	10a8d8 <sys_sem_signal>
  10f4c4:	ea000001 	b	10f4d0 <lwip_netconn_do_writemore+0x5dc>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  10f4c8:	e3e03000 	mvn	r3, #0
  10f4cc:	ea000000 	b	10f4d4 <lwip_netconn_do_writemore+0x5e0>
  }
#endif
  return ERR_OK;
  10f4d0:	e3a03000 	mov	r3, #0
}
  10f4d4:	e1a00003 	mov	r0, r3
  10f4d8:	e24bd004 	sub	sp, fp, #4
  10f4dc:	e8bd8800 	pop	{fp, pc}

0010f4e0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
  10f4e0:	e92d4800 	push	{fp, lr}
  10f4e4:	e28db004 	add	fp, sp, #4
  10f4e8:	e24dd010 	sub	sp, sp, #16
  10f4ec:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f4f0:	e51b3010 	ldr	r3, [fp, #-16]
  10f4f4:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10f4f8:	e51b3008 	ldr	r3, [fp, #-8]
  10f4fc:	e5933000 	ldr	r3, [r3]
  10f500:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f504:	e373000c 	cmn	r3, #12
  10f508:	aa000005 	bge	10f524 <lwip_netconn_do_write+0x44>
    msg->err = msg->conn->last_err;
  10f50c:	e51b3008 	ldr	r3, [fp, #-8]
  10f510:	e5933000 	ldr	r3, [r3]
  10f514:	e1d320dc 	ldrsb	r2, [r3, #12]
  10f518:	e51b3008 	ldr	r3, [fp, #-8]
  10f51c:	e5c32004 	strb	r2, [r3, #4]
  10f520:	ea00006f 	b	10f6e4 <lwip_netconn_do_write+0x204>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10f524:	e51b3008 	ldr	r3, [fp, #-8]
  10f528:	e5933000 	ldr	r3, [r3]
  10f52c:	e5933000 	ldr	r3, [r3]
  10f530:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f534:	e3530010 	cmp	r3, #16
  10f538:	1a000066 	bne	10f6d8 <lwip_netconn_do_write+0x1f8>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
  10f53c:	e51b3008 	ldr	r3, [fp, #-8]
  10f540:	e5933000 	ldr	r3, [r3]
  10f544:	e5933004 	ldr	r3, [r3, #4]
  10f548:	e3530000 	cmp	r3, #0
  10f54c:	0a000003 	beq	10f560 <lwip_netconn_do_write+0x80>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
  10f550:	e51b3008 	ldr	r3, [fp, #-8]
  10f554:	e3e02004 	mvn	r2, #4
  10f558:	e5c32004 	strb	r2, [r3, #4]
  10f55c:	ea000060 	b	10f6e4 <lwip_netconn_do_write+0x204>
      } else if (msg->conn->pcb.tcp != NULL) {
  10f560:	e51b3008 	ldr	r3, [fp, #-8]
  10f564:	e5933000 	ldr	r3, [r3]
  10f568:	e5933008 	ldr	r3, [r3, #8]
  10f56c:	e3530000 	cmp	r3, #0
  10f570:	0a000054 	beq	10f6c8 <lwip_netconn_do_write+0x1e8>
        msg->conn->state = NETCONN_WRITE;
  10f574:	e51b3008 	ldr	r3, [fp, #-8]
  10f578:	e5933000 	ldr	r3, [r3]
  10f57c:	e3a02001 	mov	r2, #1
  10f580:	e5832004 	str	r2, [r3, #4]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10f584:	e51b3008 	ldr	r3, [fp, #-8]
  10f588:	e5933000 	ldr	r3, [r3]
  10f58c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f590:	e3530000 	cmp	r3, #0
  10f594:	1a000004 	bne	10f5ac <lwip_netconn_do_write+0xcc>
  10f598:	e51b3008 	ldr	r3, [fp, #-8]
  10f59c:	e5933000 	ldr	r3, [r3]
  10f5a0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f5a4:	e3530000 	cmp	r3, #0
  10f5a8:	0a000006 	beq	10f5c8 <lwip_netconn_do_write+0xe8>
  10f5ac:	e3060984 	movw	r0, #27012	; 0x6984
  10f5b0:	e3400014 	movt	r0, #20
  10f5b4:	ebffced6 	bl	103114 <rt_kprintf>
  10f5b8:	e300167d 	movw	r1, #1661	; 0x67d
  10f5bc:	e3060668 	movw	r0, #26216	; 0x6668
  10f5c0:	e3400014 	movt	r0, #20
  10f5c4:	ebffeeba 	bl	10b0b4 <sys_arch_assert>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
  10f5c8:	e51b3008 	ldr	r3, [fp, #-8]
  10f5cc:	e593300c 	ldr	r3, [r3, #12]
  10f5d0:	e3530000 	cmp	r3, #0
  10f5d4:	1a000006 	bne	10f5f4 <lwip_netconn_do_write+0x114>
  10f5d8:	e3060ad8 	movw	r0, #27352	; 0x6ad8
  10f5dc:	e3400014 	movt	r0, #20
  10f5e0:	ebffcecb 	bl	103114 <rt_kprintf>
  10f5e4:	e300167e 	movw	r1, #1662	; 0x67e
  10f5e8:	e3060668 	movw	r0, #26216	; 0x6668
  10f5ec:	e3400014 	movt	r0, #20
  10f5f0:	ebffeeaf 	bl	10b0b4 <sys_arch_assert>
        msg->conn->current_msg = msg;
  10f5f4:	e51b3008 	ldr	r3, [fp, #-8]
  10f5f8:	e5933000 	ldr	r3, [r3]
  10f5fc:	e51b2008 	ldr	r2, [fp, #-8]
  10f600:	e5832038 	str	r2, [r3, #56]	; 0x38
        msg->conn->write_offset = 0;
  10f604:	e51b3008 	ldr	r3, [fp, #-8]
  10f608:	e5933000 	ldr	r3, [r3]
  10f60c:	e3a02000 	mov	r2, #0
  10f610:	e5832034 	str	r2, [r3, #52]	; 0x34
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
  10f614:	e51b3008 	ldr	r3, [fp, #-8]
  10f618:	e5933000 	ldr	r3, [r3]
  10f61c:	e3a01000 	mov	r1, #0
  10f620:	e1a00003 	mov	r0, r3
  10f624:	ebfffe32 	bl	10eef4 <lwip_netconn_do_writemore>
  10f628:	e1a03000 	mov	r3, r0
  10f62c:	e3530000 	cmp	r3, #0
  10f630:	0a00003c 	beq	10f728 <lwip_netconn_do_write+0x248>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
  10f634:	e51b3008 	ldr	r3, [fp, #-8]
  10f638:	e5933000 	ldr	r3, [r3]
  10f63c:	e5933004 	ldr	r3, [r3, #4]
  10f640:	e3530001 	cmp	r3, #1
  10f644:	0a000006 	beq	10f664 <lwip_netconn_do_write+0x184>
  10f648:	e30609a0 	movw	r0, #27040	; 0x69a0
  10f64c:	e3400014 	movt	r0, #20
  10f650:	ebffceaf 	bl	103114 <rt_kprintf>
  10f654:	e3001683 	movw	r1, #1667	; 0x683
  10f658:	e3060668 	movw	r0, #26216	; 0x6668
  10f65c:	e3400014 	movt	r0, #20
  10f660:	ebffee93 	bl	10b0b4 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10f664:	e30f060c 	movw	r0, #62988	; 0xf60c
  10f668:	e3400014 	movt	r0, #20
  10f66c:	ebffed20 	bl	10aaf4 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10f670:	e51b3008 	ldr	r3, [fp, #-8]
  10f674:	e5933000 	ldr	r3, [r3]
  10f678:	e2833010 	add	r3, r3, #16
  10f67c:	e3a01000 	mov	r1, #0
  10f680:	e1a00003 	mov	r0, r3
  10f684:	ebffec9e 	bl	10a904 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10f688:	e30f060c 	movw	r0, #62988	; 0xf60c
  10f68c:	e3400014 	movt	r0, #20
  10f690:	ebffed0b 	bl	10aac4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
  10f694:	e51b3008 	ldr	r3, [fp, #-8]
  10f698:	e5933000 	ldr	r3, [r3]
  10f69c:	e5933004 	ldr	r3, [r3, #4]
  10f6a0:	e3530001 	cmp	r3, #1
  10f6a4:	1a00001f 	bne	10f728 <lwip_netconn_do_write+0x248>
  10f6a8:	e30609a0 	movw	r0, #27040	; 0x69a0
  10f6ac:	e3400014 	movt	r0, #20
  10f6b0:	ebffce97 	bl	103114 <rt_kprintf>
  10f6b4:	e3001687 	movw	r1, #1671	; 0x687
  10f6b8:	e3060668 	movw	r0, #26216	; 0x6668
  10f6bc:	e3400014 	movt	r0, #20
  10f6c0:	ebffee7b 	bl	10b0b4 <sys_arch_assert>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
  10f6c4:	ea000017 	b	10f728 <lwip_netconn_do_write+0x248>
      } else {
        msg->err = ERR_CONN;
  10f6c8:	e51b3008 	ldr	r3, [fp, #-8]
  10f6cc:	e3e0200a 	mvn	r2, #10
  10f6d0:	e5c32004 	strb	r2, [r3, #4]
  10f6d4:	ea000002 	b	10f6e4 <lwip_netconn_do_write+0x204>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
  10f6d8:	e51b3008 	ldr	r3, [fp, #-8]
  10f6dc:	e3e02005 	mvn	r2, #5
  10f6e0:	e5c32004 	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10f6e4:	e51b3008 	ldr	r3, [fp, #-8]
  10f6e8:	e5933000 	ldr	r3, [r3]
  10f6ec:	e3530000 	cmp	r3, #0
  10f6f0:	0a00000d 	beq	10f72c <lwip_netconn_do_write+0x24c>
  10f6f4:	ebffcad0 	bl	10223c <rt_enter_critical>
  10f6f8:	e51b3008 	ldr	r3, [fp, #-8]
  10f6fc:	e5933000 	ldr	r3, [r3]
  10f700:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f704:	e373000c 	cmn	r3, #12
  10f708:	ba000004 	blt	10f720 <lwip_netconn_do_write+0x240>
  10f70c:	e51b3008 	ldr	r3, [fp, #-8]
  10f710:	e5933000 	ldr	r3, [r3]
  10f714:	e51b2008 	ldr	r2, [fp, #-8]
  10f718:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f71c:	e5c3200c 	strb	r2, [r3, #12]
  10f720:	ebffcacb 	bl	102254 <rt_exit_critical>
  10f724:	ea000000 	b	10f72c <lwip_netconn_do_write+0x24c>
        return;
  10f728:	e320f000 	nop	{0}
}
  10f72c:	e24bd004 	sub	sp, fp, #4
  10f730:	e8bd8800 	pop	{fp, pc}

0010f734 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
  10f734:	e92d4800 	push	{fp, lr}
  10f738:	e28db004 	add	fp, sp, #4
  10f73c:	e24dd010 	sub	sp, sp, #16
  10f740:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f744:	e51b3010 	ldr	r3, [fp, #-16]
  10f748:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.ip != NULL) {
  10f74c:	e51b3008 	ldr	r3, [fp, #-8]
  10f750:	e5933000 	ldr	r3, [r3]
  10f754:	e5933008 	ldr	r3, [r3, #8]
  10f758:	e3530000 	cmp	r3, #0
  10f75c:	0a00007e 	beq	10f95c <lwip_netconn_do_getaddr+0x228>
    if (msg->msg.ad.local) {
  10f760:	e51b3008 	ldr	r3, [fp, #-8]
  10f764:	e5d33010 	ldrb	r3, [r3, #16]
  10f768:	e3530000 	cmp	r3, #0
  10f76c:	0a000007 	beq	10f790 <lwip_netconn_do_getaddr+0x5c>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f770:	e51b3008 	ldr	r3, [fp, #-8]
  10f774:	e5933000 	ldr	r3, [r3]
  10f778:	e5932008 	ldr	r2, [r3, #8]
  10f77c:	e51b3008 	ldr	r3, [fp, #-8]
  10f780:	e5933008 	ldr	r3, [r3, #8]
  10f784:	e5922000 	ldr	r2, [r2]
  10f788:	e5832000 	str	r2, [r3]
  10f78c:	ea000006 	b	10f7ac <lwip_netconn_do_getaddr+0x78>
        msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f790:	e51b3008 	ldr	r3, [fp, #-8]
  10f794:	e5933000 	ldr	r3, [r3]
  10f798:	e5932008 	ldr	r2, [r3, #8]
  10f79c:	e51b3008 	ldr	r3, [fp, #-8]
  10f7a0:	e5933008 	ldr	r3, [r3, #8]
  10f7a4:	e5922004 	ldr	r2, [r2, #4]
  10f7a8:	e5832000 	str	r2, [r3]
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
  10f7ac:	e51b3008 	ldr	r3, [fp, #-8]
  10f7b0:	e3a02000 	mov	r2, #0
  10f7b4:	e5c32004 	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10f7b8:	e51b3008 	ldr	r3, [fp, #-8]
  10f7bc:	e5933000 	ldr	r3, [r3]
  10f7c0:	e5933000 	ldr	r3, [r3]
  10f7c4:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f7c8:	e3530020 	cmp	r3, #32
  10f7cc:	0a000015 	beq	10f828 <lwip_netconn_do_getaddr+0xf4>
  10f7d0:	e3530040 	cmp	r3, #64	; 0x40
  10f7d4:	0a000002 	beq	10f7e4 <lwip_netconn_do_getaddr+0xb0>
  10f7d8:	e3530010 	cmp	r3, #16
  10f7dc:	0a000030 	beq	10f8a4 <lwip_netconn_do_getaddr+0x170>
  10f7e0:	ea000054 	b	10f938 <lwip_netconn_do_getaddr+0x204>
#if LWIP_RAW
    case NETCONN_RAW:
      if (msg->msg.ad.local) {
  10f7e4:	e51b3008 	ldr	r3, [fp, #-8]
  10f7e8:	e5d33010 	ldrb	r3, [r3, #16]
  10f7ec:	e3530000 	cmp	r3, #0
  10f7f0:	0a000008 	beq	10f818 <lwip_netconn_do_getaddr+0xe4>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.raw->protocol;
  10f7f4:	e51b3008 	ldr	r3, [fp, #-8]
  10f7f8:	e5933000 	ldr	r3, [r3]
  10f7fc:	e5933008 	ldr	r3, [r3, #8]
  10f800:	e5d32010 	ldrb	r2, [r3, #16]
  10f804:	e51b3008 	ldr	r3, [fp, #-8]
  10f808:	e593300c 	ldr	r3, [r3, #12]
  10f80c:	e6ff2072 	uxth	r2, r2
  10f810:	e1c320b0 	strh	r2, [r3]
      } else {
        /* return an error as connecting is only a helper for upper layers */
        msg->err = ERR_CONN;
      }
      break;
  10f814:	ea000053 	b	10f968 <lwip_netconn_do_getaddr+0x234>
        msg->err = ERR_CONN;
  10f818:	e51b3008 	ldr	r3, [fp, #-8]
  10f81c:	e3e0200a 	mvn	r2, #10
  10f820:	e5c32004 	strb	r2, [r3, #4]
      break;
  10f824:	ea00004f 	b	10f968 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
  10f828:	e51b3008 	ldr	r3, [fp, #-8]
  10f82c:	e5d33010 	ldrb	r3, [r3, #16]
  10f830:	e3530000 	cmp	r3, #0
  10f834:	0a000007 	beq	10f858 <lwip_netconn_do_getaddr+0x124>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
  10f838:	e51b3008 	ldr	r3, [fp, #-8]
  10f83c:	e5933000 	ldr	r3, [r3]
  10f840:	e5932008 	ldr	r2, [r3, #8]
  10f844:	e51b3008 	ldr	r3, [fp, #-8]
  10f848:	e593300c 	ldr	r3, [r3, #12]
  10f84c:	e1d221b2 	ldrh	r2, [r2, #18]
  10f850:	e1c320b0 	strh	r2, [r3]
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
  10f854:	ea000043 	b	10f968 <lwip_netconn_do_getaddr+0x234>
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
  10f858:	e51b3008 	ldr	r3, [fp, #-8]
  10f85c:	e5933000 	ldr	r3, [r3]
  10f860:	e5933008 	ldr	r3, [r3, #8]
  10f864:	e5d33010 	ldrb	r3, [r3, #16]
  10f868:	e2033004 	and	r3, r3, #4
  10f86c:	e3530000 	cmp	r3, #0
  10f870:	1a000003 	bne	10f884 <lwip_netconn_do_getaddr+0x150>
          msg->err = ERR_CONN;
  10f874:	e51b3008 	ldr	r3, [fp, #-8]
  10f878:	e3e0200a 	mvn	r2, #10
  10f87c:	e5c32004 	strb	r2, [r3, #4]
      break;
  10f880:	ea000038 	b	10f968 <lwip_netconn_do_getaddr+0x234>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
  10f884:	e51b3008 	ldr	r3, [fp, #-8]
  10f888:	e5933000 	ldr	r3, [r3]
  10f88c:	e5932008 	ldr	r2, [r3, #8]
  10f890:	e51b3008 	ldr	r3, [fp, #-8]
  10f894:	e593300c 	ldr	r3, [r3, #12]
  10f898:	e1d221b4 	ldrh	r2, [r2, #20]
  10f89c:	e1c320b0 	strh	r2, [r3]
      break;
  10f8a0:	ea000030 	b	10f968 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
  10f8a4:	e51b3008 	ldr	r3, [fp, #-8]
  10f8a8:	e5d33010 	ldrb	r3, [r3, #16]
  10f8ac:	e3530000 	cmp	r3, #0
  10f8b0:	1a00000f 	bne	10f8f4 <lwip_netconn_do_getaddr+0x1c0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10f8b4:	e51b3008 	ldr	r3, [fp, #-8]
  10f8b8:	e5933000 	ldr	r3, [r3]
  10f8bc:	e5933008 	ldr	r3, [r3, #8]
  10f8c0:	e5933014 	ldr	r3, [r3, #20]
      if ((msg->msg.ad.local == 0) &&
  10f8c4:	e3530000 	cmp	r3, #0
  10f8c8:	0a000005 	beq	10f8e4 <lwip_netconn_do_getaddr+0x1b0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10f8cc:	e51b3008 	ldr	r3, [fp, #-8]
  10f8d0:	e5933000 	ldr	r3, [r3]
  10f8d4:	e5933008 	ldr	r3, [r3, #8]
  10f8d8:	e5933014 	ldr	r3, [r3, #20]
  10f8dc:	e3530001 	cmp	r3, #1
  10f8e0:	1a000003 	bne	10f8f4 <lwip_netconn_do_getaddr+0x1c0>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
  10f8e4:	e51b3008 	ldr	r3, [fp, #-8]
  10f8e8:	e3e0200a 	mvn	r2, #10
  10f8ec:	e5c32004 	strb	r2, [r3, #4]
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
      }
      break;
  10f8f0:	ea00001c 	b	10f968 <lwip_netconn_do_getaddr+0x234>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
  10f8f4:	e51b3008 	ldr	r3, [fp, #-8]
  10f8f8:	e5d33010 	ldrb	r3, [r3, #16]
  10f8fc:	e3530000 	cmp	r3, #0
  10f900:	0a000004 	beq	10f918 <lwip_netconn_do_getaddr+0x1e4>
  10f904:	e51b3008 	ldr	r3, [fp, #-8]
  10f908:	e5933000 	ldr	r3, [r3]
  10f90c:	e5933008 	ldr	r3, [r3, #8]
  10f910:	e1d331ba 	ldrh	r3, [r3, #26]
  10f914:	ea000003 	b	10f928 <lwip_netconn_do_getaddr+0x1f4>
  10f918:	e51b3008 	ldr	r3, [fp, #-8]
  10f91c:	e5933000 	ldr	r3, [r3]
  10f920:	e5933008 	ldr	r3, [r3, #8]
  10f924:	e1d331bc 	ldrh	r3, [r3, #28]
  10f928:	e51b2008 	ldr	r2, [fp, #-8]
  10f92c:	e592200c 	ldr	r2, [r2, #12]
  10f930:	e1c230b0 	strh	r3, [r2]
      break;
  10f934:	ea00000b 	b	10f968 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
  10f938:	e3060aec 	movw	r0, #27372	; 0x6aec
  10f93c:	e3400014 	movt	r0, #20
  10f940:	ebffcdf3 	bl	103114 <rt_kprintf>
  10f944:	e30016d7 	movw	r1, #1751	; 0x6d7
  10f948:	e3060668 	movw	r0, #26216	; 0x6668
  10f94c:	e3400014 	movt	r0, #20
  10f950:	ebffedd7 	bl	10b0b4 <sys_arch_assert>
      break;
  10f954:	e320f000 	nop	{0}
  10f958:	ea000002 	b	10f968 <lwip_netconn_do_getaddr+0x234>
    }
  } else {
    msg->err = ERR_CONN;
  10f95c:	e51b3008 	ldr	r3, [fp, #-8]
  10f960:	e3e0200a 	mvn	r2, #10
  10f964:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10f968:	e51b3008 	ldr	r3, [fp, #-8]
  10f96c:	e5933000 	ldr	r3, [r3]
  10f970:	e3530000 	cmp	r3, #0
  10f974:	0a00000b 	beq	10f9a8 <lwip_netconn_do_getaddr+0x274>
  10f978:	ebffca2f 	bl	10223c <rt_enter_critical>
  10f97c:	e51b3008 	ldr	r3, [fp, #-8]
  10f980:	e5933000 	ldr	r3, [r3]
  10f984:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f988:	e373000c 	cmn	r3, #12
  10f98c:	ba000004 	blt	10f9a4 <lwip_netconn_do_getaddr+0x270>
  10f990:	e51b3008 	ldr	r3, [fp, #-8]
  10f994:	e5933000 	ldr	r3, [r3]
  10f998:	e51b2008 	ldr	r2, [fp, #-8]
  10f99c:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f9a0:	e5c3200c 	strb	r2, [r3, #12]
  10f9a4:	ebffca2a 	bl	102254 <rt_exit_critical>
}
  10f9a8:	e320f000 	nop	{0}
  10f9ac:	e24bd004 	sub	sp, fp, #4
  10f9b0:	e8bd8800 	pop	{fp, pc}

0010f9b4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
  10f9b4:	e92d4800 	push	{fp, lr}
  10f9b8:	e28db004 	add	fp, sp, #4
  10f9bc:	e24dd010 	sub	sp, sp, #16
  10f9c0:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f9c4:	e51b3010 	ldr	r3, [fp, #-16]
  10f9c8:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
  10f9cc:	e51b3008 	ldr	r3, [fp, #-8]
  10f9d0:	e5933000 	ldr	r3, [r3]
  10f9d4:	e5933004 	ldr	r3, [r3, #4]
  10f9d8:	e50b300c 	str	r3, [fp, #-12]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
  10f9dc:	e51b3008 	ldr	r3, [fp, #-8]
  10f9e0:	e5933000 	ldr	r3, [r3]
  10f9e4:	e5933008 	ldr	r3, [r3, #8]
  10f9e8:	e3530000 	cmp	r3, #0
  10f9ec:	0a000069 	beq	10fb98 <lwip_netconn_do_close+0x1e4>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10f9f0:	e51b3008 	ldr	r3, [fp, #-8]
  10f9f4:	e5933000 	ldr	r3, [r3]
  10f9f8:	e5933000 	ldr	r3, [r3]
  10f9fc:	e20330f0 	and	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
  10fa00:	e3530010 	cmp	r3, #16
  10fa04:	1a000063 	bne	10fb98 <lwip_netconn_do_close+0x1e4>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10fa08:	e51b3008 	ldr	r3, [fp, #-8]
  10fa0c:	e5d33008 	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10fa10:	e3530003 	cmp	r3, #3
  10fa14:	0a000002 	beq	10fa24 <lwip_netconn_do_close+0x70>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10fa18:	e51b300c 	ldr	r3, [fp, #-12]
  10fa1c:	e3530002 	cmp	r3, #2
  10fa20:	0a00005c 	beq	10fb98 <lwip_netconn_do_close+0x1e4>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
  10fa24:	e51b300c 	ldr	r3, [fp, #-12]
  10fa28:	e3530003 	cmp	r3, #3
  10fa2c:	1a000003 	bne	10fa40 <lwip_netconn_do_close+0x8c>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
  10fa30:	e51b3008 	ldr	r3, [fp, #-8]
  10fa34:	e3e0200a 	mvn	r2, #10
  10fa38:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10fa3c:	ea000058 	b	10fba4 <lwip_netconn_do_close+0x1f0>
    } else if (state == NETCONN_WRITE) {
  10fa40:	e51b300c 	ldr	r3, [fp, #-12]
  10fa44:	e3530001 	cmp	r3, #1
  10fa48:	1a000003 	bne	10fa5c <lwip_netconn_do_close+0xa8>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
  10fa4c:	e51b3008 	ldr	r3, [fp, #-8]
  10fa50:	e3e02004 	mvn	r2, #4
  10fa54:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10fa58:	ea000051 	b	10fba4 <lwip_netconn_do_close+0x1f0>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
  10fa5c:	e51b3008 	ldr	r3, [fp, #-8]
  10fa60:	e5d33008 	ldrb	r3, [r3, #8]
  10fa64:	e2033001 	and	r3, r3, #1
  10fa68:	e3530000 	cmp	r3, #0
  10fa6c:	0a000003 	beq	10fa80 <lwip_netconn_do_close+0xcc>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
  10fa70:	e51b3008 	ldr	r3, [fp, #-8]
  10fa74:	e5933000 	ldr	r3, [r3]
  10fa78:	e1a00003 	mov	r0, r3
  10fa7c:	ebfff72a 	bl	10d72c <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10fa80:	e51b3008 	ldr	r3, [fp, #-8]
  10fa84:	e5933000 	ldr	r3, [r3]
  10fa88:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10fa8c:	e3530000 	cmp	r3, #0
  10fa90:	1a000004 	bne	10faa8 <lwip_netconn_do_close+0xf4>
  10fa94:	e51b3008 	ldr	r3, [fp, #-8]
  10fa98:	e5933000 	ldr	r3, [r3]
  10fa9c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10faa0:	e3530000 	cmp	r3, #0
  10faa4:	0a000006 	beq	10fac4 <lwip_netconn_do_close+0x110>
  10faa8:	e3060984 	movw	r0, #27012	; 0x6984
  10faac:	e3400014 	movt	r0, #20
  10fab0:	ebffcd97 	bl	103114 <rt_kprintf>
  10fab4:	e3001716 	movw	r1, #1814	; 0x716
  10fab8:	e3060668 	movw	r0, #26216	; 0x6668
  10fabc:	e3400014 	movt	r0, #20
  10fac0:	ebffed7b 	bl	10b0b4 <sys_arch_assert>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
  10fac4:	e51b3008 	ldr	r3, [fp, #-8]
  10fac8:	e5933000 	ldr	r3, [r3]
  10facc:	e3a02004 	mov	r2, #4
  10fad0:	e5832004 	str	r2, [r3, #4]
      msg->conn->current_msg = msg;
  10fad4:	e51b3008 	ldr	r3, [fp, #-8]
  10fad8:	e5933000 	ldr	r3, [r3]
  10fadc:	e51b2008 	ldr	r2, [fp, #-8]
  10fae0:	e5832038 	str	r2, [r3, #56]	; 0x38
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10fae4:	e51b3008 	ldr	r3, [fp, #-8]
  10fae8:	e5933000 	ldr	r3, [r3]
  10faec:	e3a01000 	mov	r1, #0
  10faf0:	e1a00003 	mov	r0, r3
  10faf4:	ebfff776 	bl	10d8d4 <lwip_netconn_do_close_internal>
  10faf8:	e1a03000 	mov	r3, r0
  10fafc:	e3530000 	cmp	r3, #0
  10fb00:	0a000038 	beq	10fbe8 <lwip_netconn_do_close+0x234>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10fb04:	e51b3008 	ldr	r3, [fp, #-8]
  10fb08:	e5933000 	ldr	r3, [r3]
  10fb0c:	e5933004 	ldr	r3, [r3, #4]
  10fb10:	e3530004 	cmp	r3, #4
  10fb14:	0a000006 	beq	10fb34 <lwip_netconn_do_close+0x180>
  10fb18:	e30609a0 	movw	r0, #27040	; 0x69a0
  10fb1c:	e3400014 	movt	r0, #20
  10fb20:	ebffcd7b 	bl	103114 <rt_kprintf>
  10fb24:	e300171b 	movw	r1, #1819	; 0x71b
  10fb28:	e3060668 	movw	r0, #26216	; 0x6668
  10fb2c:	e3400014 	movt	r0, #20
  10fb30:	ebffed5f 	bl	10b0b4 <sys_arch_assert>
        UNLOCK_TCPIP_CORE();
  10fb34:	e30f060c 	movw	r0, #62988	; 0xf60c
  10fb38:	e3400014 	movt	r0, #20
  10fb3c:	ebffebec 	bl	10aaf4 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10fb40:	e51b3008 	ldr	r3, [fp, #-8]
  10fb44:	e5933000 	ldr	r3, [r3]
  10fb48:	e2833010 	add	r3, r3, #16
  10fb4c:	e3a01000 	mov	r1, #0
  10fb50:	e1a00003 	mov	r0, r3
  10fb54:	ebffeb6a 	bl	10a904 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
  10fb58:	e30f060c 	movw	r0, #62988	; 0xf60c
  10fb5c:	e3400014 	movt	r0, #20
  10fb60:	ebffebd7 	bl	10aac4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10fb64:	e51b3008 	ldr	r3, [fp, #-8]
  10fb68:	e5933000 	ldr	r3, [r3]
  10fb6c:	e5933004 	ldr	r3, [r3, #4]
  10fb70:	e3530000 	cmp	r3, #0
  10fb74:	0a00001b 	beq	10fbe8 <lwip_netconn_do_close+0x234>
  10fb78:	e30609a0 	movw	r0, #27040	; 0x69a0
  10fb7c:	e3400014 	movt	r0, #20
  10fb80:	ebffcd63 	bl	103114 <rt_kprintf>
  10fb84:	e300171f 	movw	r1, #1823	; 0x71f
  10fb88:	e3060668 	movw	r0, #26216	; 0x6668
  10fb8c:	e3400014 	movt	r0, #20
  10fb90:	ebffed47 	bl	10b0b4 <sys_arch_assert>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
  10fb94:	ea000013 	b	10fbe8 <lwip_netconn_do_close+0x234>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  10fb98:	e51b3008 	ldr	r3, [fp, #-8]
  10fb9c:	e3e0200a 	mvn	r2, #10
  10fba0:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10fba4:	e51b3008 	ldr	r3, [fp, #-8]
  10fba8:	e5933000 	ldr	r3, [r3]
  10fbac:	e3530000 	cmp	r3, #0
  10fbb0:	0a00000d 	beq	10fbec <lwip_netconn_do_close+0x238>
  10fbb4:	ebffc9a0 	bl	10223c <rt_enter_critical>
  10fbb8:	e51b3008 	ldr	r3, [fp, #-8]
  10fbbc:	e5933000 	ldr	r3, [r3]
  10fbc0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10fbc4:	e373000c 	cmn	r3, #12
  10fbc8:	ba000004 	blt	10fbe0 <lwip_netconn_do_close+0x22c>
  10fbcc:	e51b3008 	ldr	r3, [fp, #-8]
  10fbd0:	e5933000 	ldr	r3, [r3]
  10fbd4:	e51b2008 	ldr	r2, [fp, #-8]
  10fbd8:	e1d220d4 	ldrsb	r2, [r2, #4]
  10fbdc:	e5c3200c 	strb	r2, [r3, #12]
  10fbe0:	ebffc99b 	bl	102254 <rt_exit_critical>
  10fbe4:	ea000000 	b	10fbec <lwip_netconn_do_close+0x238>
      return;
  10fbe8:	e320f000 	nop	{0}
}
  10fbec:	e24bd004 	sub	sp, fp, #4
  10fbf0:	e8bd8800 	pop	{fp, pc}

0010fbf4 <lwip_netconn_do_join_leave_group>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_join_leave_group(void *m)
{
  10fbf4:	e92d4800 	push	{fp, lr}
  10fbf8:	e28db004 	add	fp, sp, #4
  10fbfc:	e24dd010 	sub	sp, sp, #16
  10fc00:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10fc04:	e51b3010 	ldr	r3, [fp, #-16]
  10fc08:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10fc0c:	e51b3008 	ldr	r3, [fp, #-8]
  10fc10:	e5933000 	ldr	r3, [r3]
  10fc14:	e1d330dc 	ldrsb	r3, [r3, #12]
  10fc18:	e373000c 	cmn	r3, #12
  10fc1c:	aa000005 	bge	10fc38 <lwip_netconn_do_join_leave_group+0x44>
    msg->err = msg->conn->last_err;
  10fc20:	e51b3008 	ldr	r3, [fp, #-8]
  10fc24:	e5933000 	ldr	r3, [r3]
  10fc28:	e1d320dc 	ldrsb	r2, [r3, #12]
  10fc2c:	e51b3008 	ldr	r3, [fp, #-8]
  10fc30:	e5c32004 	strb	r2, [r3, #4]
  10fc34:	ea00002d 	b	10fcf0 <lwip_netconn_do_join_leave_group+0xfc>
  } else {
    if (msg->conn->pcb.tcp != NULL) {
  10fc38:	e51b3008 	ldr	r3, [fp, #-8]
  10fc3c:	e5933000 	ldr	r3, [r3]
  10fc40:	e5933008 	ldr	r3, [r3, #8]
  10fc44:	e3530000 	cmp	r3, #0
  10fc48:	0a000025 	beq	10fce4 <lwip_netconn_do_join_leave_group+0xf0>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10fc4c:	e51b3008 	ldr	r3, [fp, #-8]
  10fc50:	e5933000 	ldr	r3, [r3]
  10fc54:	e5933000 	ldr	r3, [r3]
  10fc58:	e20330f0 	and	r3, r3, #240	; 0xf0
  10fc5c:	e3530020 	cmp	r3, #32
  10fc60:	1a00001b 	bne	10fcd4 <lwip_netconn_do_join_leave_group+0xe0>
        }
        else
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
        {
#if LWIP_IGMP
          if (msg->msg.jl.join_or_leave == NETCONN_JOIN) {
  10fc64:	e51b3008 	ldr	r3, [fp, #-8]
  10fc68:	e5933010 	ldr	r3, [r3, #16]
  10fc6c:	e3530000 	cmp	r3, #0
  10fc70:	1a00000b 	bne	10fca4 <lwip_netconn_do_join_leave_group+0xb0>
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fc74:	e51b3008 	ldr	r3, [fp, #-8]
  10fc78:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10fc7c:	e51b3008 	ldr	r3, [fp, #-8]
  10fc80:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fc84:	e1a01003 	mov	r1, r3
  10fc88:	e1a00002 	mov	r0, r2
  10fc8c:	eb00828f 	bl	1306d0 <igmp_joingroup>
  10fc90:	e1a03000 	mov	r3, r0
  10fc94:	e1a02003 	mov	r2, r3
  10fc98:	e51b3008 	ldr	r3, [fp, #-8]
  10fc9c:	e5c32004 	strb	r2, [r3, #4]
  10fca0:	ea000012 	b	10fcf0 <lwip_netconn_do_join_leave_group+0xfc>
          } else {
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fca4:	e51b3008 	ldr	r3, [fp, #-8]
  10fca8:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10fcac:	e51b3008 	ldr	r3, [fp, #-8]
  10fcb0:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fcb4:	e1a01003 	mov	r1, r3
  10fcb8:	e1a00002 	mov	r0, r2
  10fcbc:	eb00833c 	bl	1309b4 <igmp_leavegroup>
  10fcc0:	e1a03000 	mov	r3, r0
  10fcc4:	e1a02003 	mov	r2, r3
  10fcc8:	e51b3008 	ldr	r3, [fp, #-8]
  10fccc:	e5c32004 	strb	r2, [r3, #4]
  10fcd0:	ea000006 	b	10fcf0 <lwip_netconn_do_join_leave_group+0xfc>
#endif /* LWIP_IGMP */
        }
#endif /* LWIP_UDP */
#if (LWIP_TCP || LWIP_RAW)
      } else {
        msg->err = ERR_VAL;
  10fcd4:	e51b3008 	ldr	r3, [fp, #-8]
  10fcd8:	e3e02005 	mvn	r2, #5
  10fcdc:	e5c32004 	strb	r2, [r3, #4]
  10fce0:	ea000002 	b	10fcf0 <lwip_netconn_do_join_leave_group+0xfc>
#endif /* (LWIP_TCP || LWIP_RAW) */
      }
    } else {
      msg->err = ERR_CONN;
  10fce4:	e51b3008 	ldr	r3, [fp, #-8]
  10fce8:	e3e0200a 	mvn	r2, #10
  10fcec:	e5c32004 	strb	r2, [r3, #4]
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10fcf0:	e51b3008 	ldr	r3, [fp, #-8]
  10fcf4:	e5933000 	ldr	r3, [r3]
  10fcf8:	e3530000 	cmp	r3, #0
  10fcfc:	0a00000b 	beq	10fd30 <lwip_netconn_do_join_leave_group+0x13c>
  10fd00:	ebffc94d 	bl	10223c <rt_enter_critical>
  10fd04:	e51b3008 	ldr	r3, [fp, #-8]
  10fd08:	e5933000 	ldr	r3, [r3]
  10fd0c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10fd10:	e373000c 	cmn	r3, #12
  10fd14:	ba000004 	blt	10fd2c <lwip_netconn_do_join_leave_group+0x138>
  10fd18:	e51b3008 	ldr	r3, [fp, #-8]
  10fd1c:	e5933000 	ldr	r3, [r3]
  10fd20:	e51b2008 	ldr	r2, [fp, #-8]
  10fd24:	e1d220d4 	ldrsb	r2, [r2, #4]
  10fd28:	e5c3200c 	strb	r2, [r3, #12]
  10fd2c:	ebffc948 	bl	102254 <rt_exit_critical>
}
  10fd30:	e320f000 	nop	{0}
  10fd34:	e24bd004 	sub	sp, fp, #4
  10fd38:	e8bd8800 	pop	{fp, pc}

0010fd3c <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
  10fd3c:	e92d4800 	push	{fp, lr}
  10fd40:	e28db004 	add	fp, sp, #4
  10fd44:	e24dd018 	sub	sp, sp, #24
  10fd48:	e50b0010 	str	r0, [fp, #-16]
  10fd4c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10fd50:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10fd54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10fd58:	e50b3008 	str	r3, [fp, #-8]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
  10fd5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10fd60:	e3530000 	cmp	r3, #0
  10fd64:	1a000004 	bne	10fd7c <lwip_netconn_do_dns_found+0x40>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
  10fd68:	e51b3008 	ldr	r3, [fp, #-8]
  10fd6c:	e593300c 	ldr	r3, [r3, #12]
  10fd70:	e3e02005 	mvn	r2, #5
  10fd74:	e5c32000 	strb	r2, [r3]
  10fd78:	ea000008 	b	10fda0 <lwip_netconn_do_dns_found+0x64>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
  10fd7c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd80:	e593300c 	ldr	r3, [r3, #12]
  10fd84:	e3a02000 	mov	r2, #0
  10fd88:	e5c32000 	strb	r2, [r3]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
  10fd8c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd90:	e5933004 	ldr	r3, [r3, #4]
  10fd94:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10fd98:	e5922000 	ldr	r2, [r2]
  10fd9c:	e5832000 	str	r2, [r3]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  10fda0:	e51b3008 	ldr	r3, [fp, #-8]
  10fda4:	e5933008 	ldr	r3, [r3, #8]
  10fda8:	e1a00003 	mov	r0, r3
  10fdac:	ebffeac9 	bl	10a8d8 <sys_sem_signal>
}
  10fdb0:	e320f000 	nop	{0}
  10fdb4:	e24bd004 	sub	sp, fp, #4
  10fdb8:	e8bd8800 	pop	{fp, pc}

0010fdbc <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
  10fdbc:	e92d4810 	push	{r4, fp, lr}
  10fdc0:	e28db008 	add	fp, sp, #8
  10fdc4:	e24dd01c 	sub	sp, sp, #28
  10fdc8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10fdcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10fdd0:	e50b3010 	str	r3, [fp, #-16]
  u8_t addrtype =
  10fdd4:	e3a03000 	mov	r3, #0
  10fdd8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
  10fddc:	e51b3010 	ldr	r3, [fp, #-16]
  10fde0:	e5930000 	ldr	r0, [r3]
  10fde4:	e51b3010 	ldr	r3, [fp, #-16]
  10fde8:	e5931004 	ldr	r1, [r3, #4]
  10fdec:	e51b3010 	ldr	r3, [fp, #-16]
  10fdf0:	e593400c 	ldr	r4, [r3, #12]
  10fdf4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10fdf8:	e58d3000 	str	r3, [sp]
  10fdfc:	e51b3010 	ldr	r3, [fp, #-16]
  10fe00:	e30f2d3c 	movw	r2, #64828	; 0xfd3c
  10fe04:	e3402010 	movt	r2, #16
  10fe08:	eb0020d2 	bl	118158 <dns_gethostbyname_addrtype>
  10fe0c:	e1a03000 	mov	r3, r0
  10fe10:	e5c43000 	strb	r3, [r4]
    API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
  if (API_EXPR_DEREF(msg->err) != ERR_INPROGRESS) {
  10fe14:	e51b3010 	ldr	r3, [fp, #-16]
  10fe18:	e593300c 	ldr	r3, [r3, #12]
  10fe1c:	e1d330d0 	ldrsb	r3, [r3]
  10fe20:	e3730005 	cmn	r3, #5
  10fe24:	0a000003 	beq	10fe38 <lwip_netconn_do_gethostbyname+0x7c>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  10fe28:	e51b3010 	ldr	r3, [fp, #-16]
  10fe2c:	e5933008 	ldr	r3, [r3, #8]
  10fe30:	e1a00003 	mov	r0, r3
  10fe34:	ebffeaa7 	bl	10a8d8 <sys_sem_signal>
  }
}
  10fe38:	e320f000 	nop	{0}
  10fe3c:	e24bd008 	sub	sp, fp, #8
  10fe40:	e8bd8810 	pop	{r4, fp, pc}

0010fe44 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
  10fe44:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10fe48:	e28db000 	add	fp, sp, #0
  10fe4c:	e24dd00c 	sub	sp, sp, #12
  10fe50:	e1a03000 	mov	r3, r0
  10fe54:	e54b3005 	strb	r3, [fp, #-5]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
  10fe58:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fe5c:	e3530000 	cmp	r3, #0
  10fe60:	ca000003 	bgt	10fe74 <err_to_errno+0x30>
  10fe64:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fe68:	e2633000 	rsb	r3, r3, #0
  10fe6c:	e3530010 	cmp	r3, #16
  10fe70:	da000001 	ble	10fe7c <err_to_errno+0x38>
    return EIO;
  10fe74:	e3a03005 	mov	r3, #5
  10fe78:	ea000004 	b	10fe90 <err_to_errno+0x4c>
  }
  return err_to_errno_table[-err];
  10fe7c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fe80:	e2632000 	rsb	r2, r3, #0
  10fe84:	e3063b04 	movw	r3, #27396	; 0x6b04
  10fe88:	e3403014 	movt	r3, #20
  10fe8c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  10fe90:	e1a00003 	mov	r0, r3
  10fe94:	e28bd000 	add	sp, fp, #0
  10fe98:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10fe9c:	e12fff1e 	bx	lr

0010fea0 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
  10fea0:	e92d4800 	push	{fp, lr}
  10fea4:	e28db004 	add	fp, sp, #4
  10fea8:	e24dd008 	sub	sp, sp, #8
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10feac:	e3a02043 	mov	r2, #67	; 0x43
  10feb0:	e3061b48 	movw	r1, #27464	; 0x6b48
  10feb4:	e3401014 	movt	r1, #20
  10feb8:	e3a00007 	mov	r0, #7
  10febc:	eb002476 	bl	11909c <memp_malloc_fn>
  10fec0:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  10fec4:	e51b3008 	ldr	r3, [fp, #-8]
  10fec8:	e3530000 	cmp	r3, #0
  10fecc:	0a000003 	beq	10fee0 <netbuf_new+0x40>
    memset(buf, 0, sizeof(struct netbuf));
  10fed0:	e3a02010 	mov	r2, #16
  10fed4:	e3a01000 	mov	r1, #0
  10fed8:	e51b0008 	ldr	r0, [fp, #-8]
  10fedc:	eb00c4d6 	bl	14123c <memset>
  }
  return buf;
  10fee0:	e51b3008 	ldr	r3, [fp, #-8]
}
  10fee4:	e1a00003 	mov	r0, r3
  10fee8:	e24bd004 	sub	sp, fp, #4
  10feec:	e8bd8800 	pop	{fp, pc}

0010fef0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  10fef0:	e92d4800 	push	{fp, lr}
  10fef4:	e28db004 	add	fp, sp, #4
  10fef8:	e24dd008 	sub	sp, sp, #8
  10fefc:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  10ff00:	e51b3008 	ldr	r3, [fp, #-8]
  10ff04:	e3530000 	cmp	r3, #0
  10ff08:	0a000011 	beq	10ff54 <netbuf_delete+0x64>
    if (buf->p != NULL) {
  10ff0c:	e51b3008 	ldr	r3, [fp, #-8]
  10ff10:	e5933000 	ldr	r3, [r3]
  10ff14:	e3530000 	cmp	r3, #0
  10ff18:	0a00000a 	beq	10ff48 <netbuf_delete+0x58>
      pbuf_free(buf->p);
  10ff1c:	e51b3008 	ldr	r3, [fp, #-8]
  10ff20:	e5933000 	ldr	r3, [r3]
  10ff24:	e1a00003 	mov	r0, r3
  10ff28:	eb002bd1 	bl	11ae74 <pbuf_free>
      buf->p = buf->ptr = NULL;
  10ff2c:	e51b3008 	ldr	r3, [fp, #-8]
  10ff30:	e3a02000 	mov	r2, #0
  10ff34:	e5832004 	str	r2, [r3, #4]
  10ff38:	e51b3008 	ldr	r3, [fp, #-8]
  10ff3c:	e5932004 	ldr	r2, [r3, #4]
  10ff40:	e51b3008 	ldr	r3, [fp, #-8]
  10ff44:	e5832000 	str	r2, [r3]
    }
    memp_free(MEMP_NETBUF, buf);
  10ff48:	e51b1008 	ldr	r1, [fp, #-8]
  10ff4c:	e3a00007 	mov	r0, #7
  10ff50:	eb0024b9 	bl	11923c <memp_free>
  }
}
  10ff54:	e320f000 	nop	{0}
  10ff58:	e24bd004 	sub	sp, fp, #4
  10ff5c:	e8bd8800 	pop	{fp, pc}

0010ff60 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
  10ff60:	e92d4800 	push	{fp, lr}
  10ff64:	e28db004 	add	fp, sp, #4
  10ff68:	e24dd008 	sub	sp, sp, #8
  10ff6c:	e50b0008 	str	r0, [fp, #-8]
  10ff70:	e1a03001 	mov	r3, r1
  10ff74:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
  10ff78:	e51b3008 	ldr	r3, [fp, #-8]
  10ff7c:	e3530000 	cmp	r3, #0
  10ff80:	1a000008 	bne	10ffa8 <netbuf_alloc+0x48>
  10ff84:	e3060b78 	movw	r0, #27512	; 0x6b78
  10ff88:	e3400014 	movt	r0, #20
  10ff8c:	ebffcc60 	bl	103114 <rt_kprintf>
  10ff90:	e3a01068 	mov	r1, #104	; 0x68
  10ff94:	e3060b48 	movw	r0, #27464	; 0x6b48
  10ff98:	e3400014 	movt	r0, #20
  10ff9c:	ebffec44 	bl	10b0b4 <sys_arch_assert>
  10ffa0:	e3a03000 	mov	r3, #0
  10ffa4:	ea000029 	b	110050 <netbuf_alloc+0xf0>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
  10ffa8:	e51b3008 	ldr	r3, [fp, #-8]
  10ffac:	e5933000 	ldr	r3, [r3]
  10ffb0:	e3530000 	cmp	r3, #0
  10ffb4:	0a000003 	beq	10ffc8 <netbuf_alloc+0x68>
    pbuf_free(buf->p);
  10ffb8:	e51b3008 	ldr	r3, [fp, #-8]
  10ffbc:	e5933000 	ldr	r3, [r3]
  10ffc0:	e1a00003 	mov	r0, r3
  10ffc4:	eb002baa 	bl	11ae74 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
  10ffc8:	e15b30ba 	ldrh	r3, [fp, #-10]
  10ffcc:	e3a02000 	mov	r2, #0
  10ffd0:	e1a01003 	mov	r1, r3
  10ffd4:	e3a00000 	mov	r0, #0
  10ffd8:	eb00289e 	bl	11a258 <pbuf_alloc>
  10ffdc:	e1a02000 	mov	r2, r0
  10ffe0:	e51b3008 	ldr	r3, [fp, #-8]
  10ffe4:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  10ffe8:	e51b3008 	ldr	r3, [fp, #-8]
  10ffec:	e5933000 	ldr	r3, [r3]
  10fff0:	e3530000 	cmp	r3, #0
  10fff4:	1a000001 	bne	110000 <netbuf_alloc+0xa0>
     return NULL;
  10fff8:	e3a03000 	mov	r3, #0
  10fffc:	ea000013 	b	110050 <netbuf_alloc+0xf0>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
  110000:	e51b3008 	ldr	r3, [fp, #-8]
  110004:	e5933000 	ldr	r3, [r3]
  110008:	e1d330ba 	ldrh	r3, [r3, #10]
  11000c:	e15b20ba 	ldrh	r2, [fp, #-10]
  110010:	e1520003 	cmp	r2, r3
  110014:	9a000006 	bls	110034 <netbuf_alloc+0xd4>
  110018:	e3060b94 	movw	r0, #27540	; 0x6b94
  11001c:	e3400014 	movt	r0, #20
  110020:	ebffcc3b 	bl	103114 <rt_kprintf>
  110024:	e3a01073 	mov	r1, #115	; 0x73
  110028:	e3060b48 	movw	r0, #27464	; 0x6b48
  11002c:	e3400014 	movt	r0, #20
  110030:	ebffec1f 	bl	10b0b4 <sys_arch_assert>
             (buf->p->len >= size));
  buf->ptr = buf->p;
  110034:	e51b3008 	ldr	r3, [fp, #-8]
  110038:	e5932000 	ldr	r2, [r3]
  11003c:	e51b3008 	ldr	r3, [fp, #-8]
  110040:	e5832004 	str	r2, [r3, #4]
  return buf->p->payload;
  110044:	e51b3008 	ldr	r3, [fp, #-8]
  110048:	e5933000 	ldr	r3, [r3]
  11004c:	e5933004 	ldr	r3, [r3, #4]
}
  110050:	e1a00003 	mov	r0, r3
  110054:	e24bd004 	sub	sp, fp, #4
  110058:	e8bd8800 	pop	{fp, pc}

0011005c <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
  11005c:	e92d4800 	push	{fp, lr}
  110060:	e28db004 	add	fp, sp, #4
  110064:	e24dd008 	sub	sp, sp, #8
  110068:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
  11006c:	e51b3008 	ldr	r3, [fp, #-8]
  110070:	e3530000 	cmp	r3, #0
  110074:	1a000007 	bne	110098 <netbuf_free+0x3c>
  110078:	e3060bb8 	movw	r0, #27576	; 0x6bb8
  11007c:	e3400014 	movt	r0, #20
  110080:	ebffcc23 	bl	103114 <rt_kprintf>
  110084:	e3a01081 	mov	r1, #129	; 0x81
  110088:	e3060b48 	movw	r0, #27464	; 0x6b48
  11008c:	e3400014 	movt	r0, #20
  110090:	ebffec07 	bl	10b0b4 <sys_arch_assert>
  110094:	ea00000e 	b	1100d4 <netbuf_free+0x78>
  if (buf->p != NULL) {
  110098:	e51b3008 	ldr	r3, [fp, #-8]
  11009c:	e5933000 	ldr	r3, [r3]
  1100a0:	e3530000 	cmp	r3, #0
  1100a4:	0a000003 	beq	1100b8 <netbuf_free+0x5c>
    pbuf_free(buf->p);
  1100a8:	e51b3008 	ldr	r3, [fp, #-8]
  1100ac:	e5933000 	ldr	r3, [r3]
  1100b0:	e1a00003 	mov	r0, r3
  1100b4:	eb002b6e 	bl	11ae74 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
  1100b8:	e51b3008 	ldr	r3, [fp, #-8]
  1100bc:	e3a02000 	mov	r2, #0
  1100c0:	e5832004 	str	r2, [r3, #4]
  1100c4:	e51b3008 	ldr	r3, [fp, #-8]
  1100c8:	e5932004 	ldr	r2, [r3, #4]
  1100cc:	e51b3008 	ldr	r3, [fp, #-8]
  1100d0:	e5832000 	str	r2, [r3]
}
  1100d4:	e24bd004 	sub	sp, fp, #4
  1100d8:	e8bd8800 	pop	{fp, pc}

001100dc <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
  1100dc:	e92d4800 	push	{fp, lr}
  1100e0:	e28db004 	add	fp, sp, #4
  1100e4:	e24dd010 	sub	sp, sp, #16
  1100e8:	e50b0008 	str	r0, [fp, #-8]
  1100ec:	e50b100c 	str	r1, [fp, #-12]
  1100f0:	e1a03002 	mov	r3, r2
  1100f4:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
  1100f8:	e51b3008 	ldr	r3, [fp, #-8]
  1100fc:	e3530000 	cmp	r3, #0
  110100:	1a000008 	bne	110128 <netbuf_ref+0x4c>
  110104:	e3060bd4 	movw	r0, #27604	; 0x6bd4
  110108:	e3400014 	movt	r0, #20
  11010c:	ebffcc00 	bl	103114 <rt_kprintf>
  110110:	e3a01095 	mov	r1, #149	; 0x95
  110114:	e3060b48 	movw	r0, #27464	; 0x6b48
  110118:	e3400014 	movt	r0, #20
  11011c:	ebffebe4 	bl	10b0b4 <sys_arch_assert>
  110120:	e3e0300f 	mvn	r3, #15
  110124:	ea000028 	b	1101cc <netbuf_ref+0xf0>
  if (buf->p != NULL) {
  110128:	e51b3008 	ldr	r3, [fp, #-8]
  11012c:	e5933000 	ldr	r3, [r3]
  110130:	e3530000 	cmp	r3, #0
  110134:	0a000003 	beq	110148 <netbuf_ref+0x6c>
    pbuf_free(buf->p);
  110138:	e51b3008 	ldr	r3, [fp, #-8]
  11013c:	e5933000 	ldr	r3, [r3]
  110140:	e1a00003 	mov	r0, r3
  110144:	eb002b4a 	bl	11ae74 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  110148:	e3a02002 	mov	r2, #2
  11014c:	e3a01000 	mov	r1, #0
  110150:	e3a00000 	mov	r0, #0
  110154:	eb00283f 	bl	11a258 <pbuf_alloc>
  110158:	e1a02000 	mov	r2, r0
  11015c:	e51b3008 	ldr	r3, [fp, #-8]
  110160:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  110164:	e51b3008 	ldr	r3, [fp, #-8]
  110168:	e5933000 	ldr	r3, [r3]
  11016c:	e3530000 	cmp	r3, #0
  110170:	1a000004 	bne	110188 <netbuf_ref+0xac>
    buf->ptr = NULL;
  110174:	e51b3008 	ldr	r3, [fp, #-8]
  110178:	e3a02000 	mov	r2, #0
  11017c:	e5832004 	str	r2, [r3, #4]
    return ERR_MEM;
  110180:	e3e03000 	mvn	r3, #0
  110184:	ea000010 	b	1101cc <netbuf_ref+0xf0>
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
  110188:	e51b3008 	ldr	r3, [fp, #-8]
  11018c:	e5933000 	ldr	r3, [r3]
  110190:	e51b200c 	ldr	r2, [fp, #-12]
  110194:	e5832004 	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
  110198:	e51b3008 	ldr	r3, [fp, #-8]
  11019c:	e5933000 	ldr	r3, [r3]
  1101a0:	e15b20be 	ldrh	r2, [fp, #-14]
  1101a4:	e1c320b8 	strh	r2, [r3, #8]
  1101a8:	e51b2008 	ldr	r2, [fp, #-8]
  1101ac:	e5922000 	ldr	r2, [r2]
  1101b0:	e1d330b8 	ldrh	r3, [r3, #8]
  1101b4:	e1c230ba 	strh	r3, [r2, #10]
  buf->ptr = buf->p;
  1101b8:	e51b3008 	ldr	r3, [fp, #-8]
  1101bc:	e5932000 	ldr	r2, [r3]
  1101c0:	e51b3008 	ldr	r3, [fp, #-8]
  1101c4:	e5832004 	str	r2, [r3, #4]
  return ERR_OK;
  1101c8:	e3a03000 	mov	r3, #0
}
  1101cc:	e1a00003 	mov	r0, r3
  1101d0:	e24bd004 	sub	sp, fp, #4
  1101d4:	e8bd8800 	pop	{fp, pc}

001101d8 <netbuf_chain>:
 * @param head the first netbuf
 * @param tail netbuf to chain after head, freed by this function, may not be reference after returning
 */
void
netbuf_chain(struct netbuf *head, struct netbuf *tail)
{
  1101d8:	e92d4800 	push	{fp, lr}
  1101dc:	e28db004 	add	fp, sp, #4
  1101e0:	e24dd008 	sub	sp, sp, #8
  1101e4:	e50b0008 	str	r0, [fp, #-8]
  1101e8:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netbuf_chain: invalid head", (head != NULL), return;);
  1101ec:	e51b3008 	ldr	r3, [fp, #-8]
  1101f0:	e3530000 	cmp	r3, #0
  1101f4:	1a000007 	bne	110218 <netbuf_chain+0x40>
  1101f8:	e3060bec 	movw	r0, #27628	; 0x6bec
  1101fc:	e3400014 	movt	r0, #20
  110200:	ebffcbc3 	bl	103114 <rt_kprintf>
  110204:	e3a010ae 	mov	r1, #174	; 0xae
  110208:	e3060b48 	movw	r0, #27464	; 0x6b48
  11020c:	e3400014 	movt	r0, #20
  110210:	ebffeba7 	bl	10b0b4 <sys_arch_assert>
  110214:	ea000018 	b	11027c <netbuf_chain+0xa4>
  LWIP_ERROR("netbuf_chain: invalid tail", (tail != NULL), return;);
  110218:	e51b300c 	ldr	r3, [fp, #-12]
  11021c:	e3530000 	cmp	r3, #0
  110220:	1a000007 	bne	110244 <netbuf_chain+0x6c>
  110224:	e3060c08 	movw	r0, #27656	; 0x6c08
  110228:	e3400014 	movt	r0, #20
  11022c:	ebffcbb8 	bl	103114 <rt_kprintf>
  110230:	e3a010af 	mov	r1, #175	; 0xaf
  110234:	e3060b48 	movw	r0, #27464	; 0x6b48
  110238:	e3400014 	movt	r0, #20
  11023c:	ebffeb9c 	bl	10b0b4 <sys_arch_assert>
  110240:	ea00000d 	b	11027c <netbuf_chain+0xa4>
  pbuf_cat(head->p, tail->p);
  110244:	e51b3008 	ldr	r3, [fp, #-8]
  110248:	e5932000 	ldr	r2, [r3]
  11024c:	e51b300c 	ldr	r3, [fp, #-12]
  110250:	e5933000 	ldr	r3, [r3]
  110254:	e1a01003 	mov	r1, r3
  110258:	e1a00002 	mov	r0, r2
  11025c:	eb002bbb 	bl	11b150 <pbuf_cat>
  head->ptr = head->p;
  110260:	e51b3008 	ldr	r3, [fp, #-8]
  110264:	e5932000 	ldr	r2, [r3]
  110268:	e51b3008 	ldr	r3, [fp, #-8]
  11026c:	e5832004 	str	r2, [r3, #4]
  memp_free(MEMP_NETBUF, tail);
  110270:	e51b100c 	ldr	r1, [fp, #-12]
  110274:	e3a00007 	mov	r0, #7
  110278:	eb0023ef 	bl	11923c <memp_free>
}
  11027c:	e24bd004 	sub	sp, fp, #4
  110280:	e8bd8800 	pop	{fp, pc}

00110284 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
  110284:	e92d4800 	push	{fp, lr}
  110288:	e28db004 	add	fp, sp, #4
  11028c:	e24dd010 	sub	sp, sp, #16
  110290:	e50b0008 	str	r0, [fp, #-8]
  110294:	e50b100c 	str	r1, [fp, #-12]
  110298:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
  11029c:	e51b3008 	ldr	r3, [fp, #-8]
  1102a0:	e3530000 	cmp	r3, #0
  1102a4:	1a000008 	bne	1102cc <netbuf_data+0x48>
  1102a8:	e3060c24 	movw	r0, #27684	; 0x6c24
  1102ac:	e3400014 	movt	r0, #20
  1102b0:	ebffcb97 	bl	103114 <rt_kprintf>
  1102b4:	e3a010c2 	mov	r1, #194	; 0xc2
  1102b8:	e3060b48 	movw	r0, #27464	; 0x6b48
  1102bc:	e3400014 	movt	r0, #20
  1102c0:	ebffeb7b 	bl	10b0b4 <sys_arch_assert>
  1102c4:	e3e0300f 	mvn	r3, #15
  1102c8:	ea000028 	b	110370 <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  1102cc:	e51b300c 	ldr	r3, [fp, #-12]
  1102d0:	e3530000 	cmp	r3, #0
  1102d4:	1a000008 	bne	1102fc <netbuf_data+0x78>
  1102d8:	e3060c40 	movw	r0, #27712	; 0x6c40
  1102dc:	e3400014 	movt	r0, #20
  1102e0:	ebffcb8b 	bl	103114 <rt_kprintf>
  1102e4:	e3a010c3 	mov	r1, #195	; 0xc3
  1102e8:	e3060b48 	movw	r0, #27464	; 0x6b48
  1102ec:	e3400014 	movt	r0, #20
  1102f0:	ebffeb6f 	bl	10b0b4 <sys_arch_assert>
  1102f4:	e3e0300f 	mvn	r3, #15
  1102f8:	ea00001c 	b	110370 <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
  1102fc:	e51b3010 	ldr	r3, [fp, #-16]
  110300:	e3530000 	cmp	r3, #0
  110304:	1a000008 	bne	11032c <netbuf_data+0xa8>
  110308:	e3060c60 	movw	r0, #27744	; 0x6c60
  11030c:	e3400014 	movt	r0, #20
  110310:	ebffcb7f 	bl	103114 <rt_kprintf>
  110314:	e3a010c4 	mov	r1, #196	; 0xc4
  110318:	e3060b48 	movw	r0, #27464	; 0x6b48
  11031c:	e3400014 	movt	r0, #20
  110320:	ebffeb63 	bl	10b0b4 <sys_arch_assert>
  110324:	e3e0300f 	mvn	r3, #15
  110328:	ea000010 	b	110370 <netbuf_data+0xec>

  if (buf->ptr == NULL) {
  11032c:	e51b3008 	ldr	r3, [fp, #-8]
  110330:	e5933004 	ldr	r3, [r3, #4]
  110334:	e3530000 	cmp	r3, #0
  110338:	1a000001 	bne	110344 <netbuf_data+0xc0>
    return ERR_BUF;
  11033c:	e3e03001 	mvn	r3, #1
  110340:	ea00000a 	b	110370 <netbuf_data+0xec>
  }
  *dataptr = buf->ptr->payload;
  110344:	e51b3008 	ldr	r3, [fp, #-8]
  110348:	e5933004 	ldr	r3, [r3, #4]
  11034c:	e5932004 	ldr	r2, [r3, #4]
  110350:	e51b300c 	ldr	r3, [fp, #-12]
  110354:	e5832000 	str	r2, [r3]
  *len = buf->ptr->len;
  110358:	e51b3008 	ldr	r3, [fp, #-8]
  11035c:	e5933004 	ldr	r3, [r3, #4]
  110360:	e1d320ba 	ldrh	r2, [r3, #10]
  110364:	e51b3010 	ldr	r3, [fp, #-16]
  110368:	e1c320b0 	strh	r2, [r3]
  return ERR_OK;
  11036c:	e3a03000 	mov	r3, #0
}
  110370:	e1a00003 	mov	r0, r3
  110374:	e24bd004 	sub	sp, fp, #4
  110378:	e8bd8800 	pop	{fp, pc}

0011037c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
  11037c:	e92d4800 	push	{fp, lr}
  110380:	e28db004 	add	fp, sp, #4
  110384:	e24dd008 	sub	sp, sp, #8
  110388:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
  11038c:	e51b3008 	ldr	r3, [fp, #-8]
  110390:	e3530000 	cmp	r3, #0
  110394:	1a000008 	bne	1103bc <netbuf_next+0x40>
  110398:	e3060c7c 	movw	r0, #27772	; 0x6c7c
  11039c:	e3400014 	movt	r0, #20
  1103a0:	ebffcb5b 	bl	103114 <rt_kprintf>
  1103a4:	e3a010dc 	mov	r1, #220	; 0xdc
  1103a8:	e3060b48 	movw	r0, #27464	; 0x6b48
  1103ac:	e3400014 	movt	r0, #20
  1103b0:	ebffeb3f 	bl	10b0b4 <sys_arch_assert>
  1103b4:	e3e03000 	mvn	r3, #0
  1103b8:	ea000013 	b	11040c <netbuf_next+0x90>
  if (buf->ptr->next == NULL) {
  1103bc:	e51b3008 	ldr	r3, [fp, #-8]
  1103c0:	e5933004 	ldr	r3, [r3, #4]
  1103c4:	e5933000 	ldr	r3, [r3]
  1103c8:	e3530000 	cmp	r3, #0
  1103cc:	1a000001 	bne	1103d8 <netbuf_next+0x5c>
    return -1;
  1103d0:	e3e03000 	mvn	r3, #0
  1103d4:	ea00000c 	b	11040c <netbuf_next+0x90>
  }
  buf->ptr = buf->ptr->next;
  1103d8:	e51b3008 	ldr	r3, [fp, #-8]
  1103dc:	e5933004 	ldr	r3, [r3, #4]
  1103e0:	e5932000 	ldr	r2, [r3]
  1103e4:	e51b3008 	ldr	r3, [fp, #-8]
  1103e8:	e5832004 	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
  1103ec:	e51b3008 	ldr	r3, [fp, #-8]
  1103f0:	e5933004 	ldr	r3, [r3, #4]
  1103f4:	e5933000 	ldr	r3, [r3]
  1103f8:	e3530000 	cmp	r3, #0
  1103fc:	1a000001 	bne	110408 <netbuf_next+0x8c>
    return 1;
  110400:	e3a03001 	mov	r3, #1
  110404:	ea000000 	b	11040c <netbuf_next+0x90>
  }
  return 0;
  110408:	e3a03000 	mov	r3, #0
}
  11040c:	e1a00003 	mov	r0, r3
  110410:	e24bd004 	sub	sp, fp, #4
  110414:	e8bd8800 	pop	{fp, pc}

00110418 <netbuf_first>:
 *
 * @param buf the netbuf to modify
 */
void
netbuf_first(struct netbuf *buf)
{
  110418:	e92d4800 	push	{fp, lr}
  11041c:	e28db004 	add	fp, sp, #4
  110420:	e24dd008 	sub	sp, sp, #8
  110424:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_first: invalid buf", (buf != NULL), return;);
  110428:	e51b3008 	ldr	r3, [fp, #-8]
  11042c:	e3530000 	cmp	r3, #0
  110430:	1a000007 	bne	110454 <netbuf_first+0x3c>
  110434:	e3060c98 	movw	r0, #27800	; 0x6c98
  110438:	e3400014 	movt	r0, #20
  11043c:	ebffcb34 	bl	103114 <rt_kprintf>
  110440:	e3a010f2 	mov	r1, #242	; 0xf2
  110444:	e3060b48 	movw	r0, #27464	; 0x6b48
  110448:	e3400014 	movt	r0, #20
  11044c:	ebffeb18 	bl	10b0b4 <sys_arch_assert>
  110450:	ea000003 	b	110464 <netbuf_first+0x4c>
  buf->ptr = buf->p;
  110454:	e51b3008 	ldr	r3, [fp, #-8]
  110458:	e5932000 	ldr	r2, [r3]
  11045c:	e51b3008 	ldr	r3, [fp, #-8]
  110460:	e5832004 	str	r2, [r3, #4]
}
  110464:	e24bd004 	sub	sp, fp, #4
  110468:	e8bd8800 	pop	{fp, pc}

0011046c <lwip_gethostbyname>:
 * @return an entry containing addresses of address family AF_INET
 *         for the host with name name
 */
struct hostent*
lwip_gethostbyname(const char *name)
{
  11046c:	e92d4800 	push	{fp, lr}
  110470:	e28db004 	add	fp, sp, #4
  110474:	e24dd010 	sub	sp, sp, #16
  110478:	e50b0010 	str	r0, [fp, #-16]
  HOSTENT_STORAGE ip_addr_t s_hostent_addr;
  HOSTENT_STORAGE ip_addr_t *s_phostent_addr[2];
  HOSTENT_STORAGE char s_hostname[DNS_MAX_NAME_LENGTH + 1];

  /* query host IP address */
  err = netconn_gethostbyname(name, &addr);
  11047c:	e24b300c 	sub	r3, fp, #12
  110480:	e1a01003 	mov	r1, r3
  110484:	e51b0010 	ldr	r0, [fp, #-16]
  110488:	ebffef98 	bl	10c2f0 <netconn_gethostbyname>
  11048c:	e1a03000 	mov	r3, r0
  110490:	e54b3005 	strb	r3, [fp, #-5]
  if (err != ERR_OK) {
  110494:	e15b30d5 	ldrsb	r3, [fp, #-5]
  110498:	e3530000 	cmp	r3, #0
  11049c:	0a000005 	beq	1104b8 <lwip_gethostbyname+0x4c>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    h_errno = HOST_NOT_FOUND;
  1104a0:	e30f35a8 	movw	r3, #62888	; 0xf5a8
  1104a4:	e3403014 	movt	r3, #20
  1104a8:	e3a020d2 	mov	r2, #210	; 0xd2
  1104ac:	e5832000 	str	r2, [r3]
    return NULL;
  1104b0:	e3a03000 	mov	r3, #0
  1104b4:	ea000032 	b	110584 <lwip_gethostbyname+0x118>
  }

  /* fill hostent */
  s_hostent_addr = addr;
  1104b8:	e30d3a7c 	movw	r3, #55932	; 0xda7c
  1104bc:	e3403014 	movt	r3, #20
  1104c0:	e51b200c 	ldr	r2, [fp, #-12]
  1104c4:	e5832000 	str	r2, [r3]
  s_phostent_addr[0] = &s_hostent_addr;
  1104c8:	e30d3a80 	movw	r3, #55936	; 0xda80
  1104cc:	e3403014 	movt	r3, #20
  1104d0:	e30d2a7c 	movw	r2, #55932	; 0xda7c
  1104d4:	e3402014 	movt	r2, #20
  1104d8:	e5832000 	str	r2, [r3]
  s_phostent_addr[1] = NULL;
  1104dc:	e30d3a80 	movw	r3, #55936	; 0xda80
  1104e0:	e3403014 	movt	r3, #20
  1104e4:	e3a02000 	mov	r2, #0
  1104e8:	e5832004 	str	r2, [r3, #4]
  strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  1104ec:	e3a02c01 	mov	r2, #256	; 0x100
  1104f0:	e51b1010 	ldr	r1, [fp, #-16]
  1104f4:	e30d0a88 	movw	r0, #55944	; 0xda88
  1104f8:	e3400014 	movt	r0, #20
  1104fc:	eb00c430 	bl	1415c4 <strncpy>
  s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  110500:	e30d3a88 	movw	r3, #55944	; 0xda88
  110504:	e3403014 	movt	r3, #20
  110508:	e3a02000 	mov	r2, #0
  11050c:	e5c32100 	strb	r2, [r3, #256]	; 0x100
  s_hostent.h_name = s_hostname;
  110510:	e30d3b8c 	movw	r3, #56204	; 0xdb8c
  110514:	e3403014 	movt	r3, #20
  110518:	e30d2a88 	movw	r2, #55944	; 0xda88
  11051c:	e3402014 	movt	r2, #20
  110520:	e5832000 	str	r2, [r3]
  s_aliases = NULL;
  110524:	e30d3ba0 	movw	r3, #56224	; 0xdba0
  110528:	e3403014 	movt	r3, #20
  11052c:	e3a02000 	mov	r2, #0
  110530:	e5832000 	str	r2, [r3]
  s_hostent.h_aliases = &s_aliases;
  110534:	e30d3b8c 	movw	r3, #56204	; 0xdb8c
  110538:	e3403014 	movt	r3, #20
  11053c:	e30d2ba0 	movw	r2, #56224	; 0xdba0
  110540:	e3402014 	movt	r2, #20
  110544:	e5832004 	str	r2, [r3, #4]
  s_hostent.h_addrtype = AF_INET;
  110548:	e30d3b8c 	movw	r3, #56204	; 0xdb8c
  11054c:	e3403014 	movt	r3, #20
  110550:	e3a02002 	mov	r2, #2
  110554:	e5832008 	str	r2, [r3, #8]
  s_hostent.h_length = sizeof(ip_addr_t);
  110558:	e30d3b8c 	movw	r3, #56204	; 0xdb8c
  11055c:	e3403014 	movt	r3, #20
  110560:	e3a02004 	mov	r2, #4
  110564:	e583200c 	str	r2, [r3, #12]
  s_hostent.h_addr_list = (char**)&s_phostent_addr;
  110568:	e30d3b8c 	movw	r3, #56204	; 0xdb8c
  11056c:	e3403014 	movt	r3, #20
  110570:	e30d2a80 	movw	r2, #55936	; 0xda80
  110574:	e3402014 	movt	r2, #20
  110578:	e5832010 	str	r2, [r3, #16]

#if LWIP_DNS_API_HOSTENT_STORAGE
  /* this function should return the "per-thread" hostent after copy from s_hostent */
  return sys_thread_hostent(&s_hostent);
#else
  return &s_hostent;
  11057c:	e30d3b8c 	movw	r3, #56204	; 0xdb8c
  110580:	e3403014 	movt	r3, #20
#endif /* LWIP_DNS_API_HOSTENT_STORAGE */
}
  110584:	e1a00003 	mov	r0, r3
  110588:	e24bd004 	sub	sp, fp, #4
  11058c:	e8bd8800 	pop	{fp, pc}

00110590 <lwip_gethostbyname_r>:
 *         is stored in *h_errnop instead of h_errno to be thread-safe
 */
int
lwip_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                size_t buflen, struct hostent **result, int *h_errnop)
{
  110590:	e92d4800 	push	{fp, lr}
  110594:	e28db004 	add	fp, sp, #4
  110598:	e24dd028 	sub	sp, sp, #40	; 0x28
  11059c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1105a0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1105a4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  1105a8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct gethostbyname_r_helper *h;
  char *hostname;
  size_t namelen;
  int lh_errno;

  if (h_errnop == NULL) {
  1105ac:	e59b3008 	ldr	r3, [fp, #8]
  1105b0:	e3530000 	cmp	r3, #0
  1105b4:	1a000001 	bne	1105c0 <lwip_gethostbyname_r+0x30>
    /* ensure h_errnop is never NULL */
    h_errnop = &lh_errno;
  1105b8:	e24b3018 	sub	r3, fp, #24
  1105bc:	e58b3008 	str	r3, [fp, #8]
  }

  if (result == NULL) {
  1105c0:	e59b3004 	ldr	r3, [fp, #4]
  1105c4:	e3530000 	cmp	r3, #0
  1105c8:	1a000004 	bne	1105e0 <lwip_gethostbyname_r+0x50>
    /* not all arguments given */
    *h_errnop = EINVAL;
  1105cc:	e59b3008 	ldr	r3, [fp, #8]
  1105d0:	e3a02016 	mov	r2, #22
  1105d4:	e5832000 	str	r2, [r3]
    return -1;
  1105d8:	e3e03000 	mvn	r3, #0
  1105dc:	ea00005a 	b	11074c <lwip_gethostbyname_r+0x1bc>
  }
  /* first thing to do: set *result to nothing */
  *result = NULL;
  1105e0:	e59b3004 	ldr	r3, [fp, #4]
  1105e4:	e3a02000 	mov	r2, #0
  1105e8:	e5832000 	str	r2, [r3]
  if ((name == NULL) || (ret == NULL) || (buf == NULL)) {
  1105ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1105f0:	e3530000 	cmp	r3, #0
  1105f4:	0a000005 	beq	110610 <lwip_gethostbyname_r+0x80>
  1105f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1105fc:	e3530000 	cmp	r3, #0
  110600:	0a000002 	beq	110610 <lwip_gethostbyname_r+0x80>
  110604:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  110608:	e3530000 	cmp	r3, #0
  11060c:	1a000004 	bne	110624 <lwip_gethostbyname_r+0x94>
    /* not all arguments given */
    *h_errnop = EINVAL;
  110610:	e59b3008 	ldr	r3, [fp, #8]
  110614:	e3a02016 	mov	r2, #22
  110618:	e5832000 	str	r2, [r3]
    return -1;
  11061c:	e3e03000 	mvn	r3, #0
  110620:	ea000049 	b	11074c <lwip_gethostbyname_r+0x1bc>
  }

  namelen = strlen(name);
  110624:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110628:	eb00c394 	bl	141480 <strlen>
  11062c:	e50b0008 	str	r0, [fp, #-8]
  if (buflen < (sizeof(struct gethostbyname_r_helper) + namelen + 1 + (MEM_ALIGNMENT - 1))) {
  110630:	e51b3008 	ldr	r3, [fp, #-8]
  110634:	e2833014 	add	r3, r3, #20
  110638:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  11063c:	e1520003 	cmp	r2, r3
  110640:	2a000004 	bcs	110658 <lwip_gethostbyname_r+0xc8>
    /* buf can't hold the data needed + a copy of name */
    *h_errnop = ERANGE;
  110644:	e59b3008 	ldr	r3, [fp, #8]
  110648:	e3a02022 	mov	r2, #34	; 0x22
  11064c:	e5832000 	str	r2, [r3]
    return -1;
  110650:	e3e03000 	mvn	r3, #0
  110654:	ea00003c 	b	11074c <lwip_gethostbyname_r+0x1bc>
  }

  h = (struct gethostbyname_r_helper*)LWIP_MEM_ALIGN(buf);
  110658:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11065c:	e2833003 	add	r3, r3, #3
  110660:	e3c33003 	bic	r3, r3, #3
  110664:	e50b300c 	str	r3, [fp, #-12]
  hostname = ((char*)h) + sizeof(struct gethostbyname_r_helper);
  110668:	e51b300c 	ldr	r3, [fp, #-12]
  11066c:	e2833010 	add	r3, r3, #16
  110670:	e50b3010 	str	r3, [fp, #-16]

  /* query host IP address */
  err = netconn_gethostbyname(name, &h->addr);
  110674:	e51b300c 	ldr	r3, [fp, #-12]
  110678:	e2833008 	add	r3, r3, #8
  11067c:	e1a01003 	mov	r1, r3
  110680:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110684:	ebffef19 	bl	10c2f0 <netconn_gethostbyname>
  110688:	e1a03000 	mov	r3, r0
  11068c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  110690:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  110694:	e3530000 	cmp	r3, #0
  110698:	0a000004 	beq	1106b0 <lwip_gethostbyname_r+0x120>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    *h_errnop = HOST_NOT_FOUND;
  11069c:	e59b3008 	ldr	r3, [fp, #8]
  1106a0:	e3a020d2 	mov	r2, #210	; 0xd2
  1106a4:	e5832000 	str	r2, [r3]
    return -1;
  1106a8:	e3e03000 	mvn	r3, #0
  1106ac:	ea000026 	b	11074c <lwip_gethostbyname_r+0x1bc>
  }

  /* copy the hostname into buf */
  MEMCPY(hostname, name, namelen);
  1106b0:	e51b2008 	ldr	r2, [fp, #-8]
  1106b4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1106b8:	e51b0010 	ldr	r0, [fp, #-16]
  1106bc:	eb00c1a6 	bl	140d5c <memcpy>
  hostname[namelen] = 0;
  1106c0:	e51b2010 	ldr	r2, [fp, #-16]
  1106c4:	e51b3008 	ldr	r3, [fp, #-8]
  1106c8:	e0823003 	add	r3, r2, r3
  1106cc:	e3a02000 	mov	r2, #0
  1106d0:	e5c32000 	strb	r2, [r3]

  /* fill hostent */
  h->addr_list[0] = &h->addr;
  1106d4:	e51b300c 	ldr	r3, [fp, #-12]
  1106d8:	e2832008 	add	r2, r3, #8
  1106dc:	e51b300c 	ldr	r3, [fp, #-12]
  1106e0:	e5832000 	str	r2, [r3]
  h->addr_list[1] = NULL;
  1106e4:	e51b300c 	ldr	r3, [fp, #-12]
  1106e8:	e3a02000 	mov	r2, #0
  1106ec:	e5832004 	str	r2, [r3, #4]
  h->aliases = NULL;
  1106f0:	e51b300c 	ldr	r3, [fp, #-12]
  1106f4:	e3a02000 	mov	r2, #0
  1106f8:	e583200c 	str	r2, [r3, #12]
  ret->h_name = hostname;
  1106fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110700:	e51b2010 	ldr	r2, [fp, #-16]
  110704:	e5832000 	str	r2, [r3]
  ret->h_aliases = &h->aliases;
  110708:	e51b300c 	ldr	r3, [fp, #-12]
  11070c:	e283200c 	add	r2, r3, #12
  110710:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110714:	e5832004 	str	r2, [r3, #4]
  ret->h_addrtype = AF_INET;
  110718:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11071c:	e3a02002 	mov	r2, #2
  110720:	e5832008 	str	r2, [r3, #8]
  ret->h_length = sizeof(ip_addr_t);
  110724:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110728:	e3a02004 	mov	r2, #4
  11072c:	e583200c 	str	r2, [r3, #12]
  ret->h_addr_list = (char**)&h->addr_list;
  110730:	e51b200c 	ldr	r2, [fp, #-12]
  110734:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110738:	e5832010 	str	r2, [r3, #16]

  /* set result != NULL */
  *result = ret;
  11073c:	e59b3004 	ldr	r3, [fp, #4]
  110740:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  110744:	e5832000 	str	r2, [r3]

  /* return success */
  return 0;
  110748:	e3a03000 	mov	r3, #0
}
  11074c:	e1a00003 	mov	r0, r3
  110750:	e24bd004 	sub	sp, fp, #4
  110754:	e8bd8800 	pop	{fp, pc}

00110758 <lwip_freeaddrinfo>:
 *
 * @param ai struct addrinfo to free
 */
void
lwip_freeaddrinfo(struct addrinfo *ai)
{
  110758:	e92d4800 	push	{fp, lr}
  11075c:	e28db004 	add	fp, sp, #4
  110760:	e24dd010 	sub	sp, sp, #16
  110764:	e50b0010 	str	r0, [fp, #-16]
  struct addrinfo *next;

  while (ai != NULL) {
  110768:	ea000007 	b	11078c <lwip_freeaddrinfo+0x34>
    next = ai->ai_next;
  11076c:	e51b3010 	ldr	r3, [fp, #-16]
  110770:	e593301c 	ldr	r3, [r3, #28]
  110774:	e50b3008 	str	r3, [fp, #-8]
    memp_free(MEMP_NETDB, ai);
  110778:	e51b1010 	ldr	r1, [fp, #-16]
  11077c:	e3a0000e 	mov	r0, #14
  110780:	eb0022ad 	bl	11923c <memp_free>
    ai = next;
  110784:	e51b3008 	ldr	r3, [fp, #-8]
  110788:	e50b3010 	str	r3, [fp, #-16]
  while (ai != NULL) {
  11078c:	e51b3010 	ldr	r3, [fp, #-16]
  110790:	e3530000 	cmp	r3, #0
  110794:	1afffff4 	bne	11076c <lwip_freeaddrinfo+0x14>
  }
}
  110798:	e320f000 	nop	{0}
  11079c:	e24bd004 	sub	sp, fp, #4
  1107a0:	e8bd8800 	pop	{fp, pc}

001107a4 <lwip_getaddrinfo>:
 * @todo: implement AI_V4MAPPED, AI_ADDRCONFIG
 */
int
lwip_getaddrinfo(const char *nodename, const char *servname,
       const struct addrinfo *hints, struct addrinfo **res)
{
  1107a4:	e92d4800 	push	{fp, lr}
  1107a8:	e28db004 	add	fp, sp, #4
  1107ac:	e24dd038 	sub	sp, sp, #56	; 0x38
  1107b0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  1107b4:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  1107b8:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  1107bc:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  ip_addr_t addr;
  struct addrinfo *ai;
  struct sockaddr_storage *sa = NULL;
  1107c0:	e3a03000 	mov	r3, #0
  1107c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  int port_nr = 0;
  1107c8:	e3a03000 	mov	r3, #0
  1107cc:	e50b3008 	str	r3, [fp, #-8]
  size_t total_size;
  size_t namelen = 0;
  1107d0:	e3a03000 	mov	r3, #0
  1107d4:	e50b3010 	str	r3, [fp, #-16]
  int ai_family;

  if (res == NULL) {
  1107d8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1107dc:	e3530000 	cmp	r3, #0
  1107e0:	1a000001 	bne	1107ec <lwip_getaddrinfo+0x48>
    return EAI_FAIL;
  1107e4:	e3a030ca 	mov	r3, #202	; 0xca
  1107e8:	ea0000d0 	b	110b30 <lwip_getaddrinfo+0x38c>
  }
  *res = NULL;
  1107ec:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1107f0:	e3a02000 	mov	r2, #0
  1107f4:	e5832000 	str	r2, [r3]
  if ((nodename == NULL) && (servname == NULL)) {
  1107f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1107fc:	e3530000 	cmp	r3, #0
  110800:	1a000004 	bne	110818 <lwip_getaddrinfo+0x74>
  110804:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110808:	e3530000 	cmp	r3, #0
  11080c:	1a000001 	bne	110818 <lwip_getaddrinfo+0x74>
    return EAI_NONAME;
  110810:	e3a030c8 	mov	r3, #200	; 0xc8
  110814:	ea0000c5 	b	110b30 <lwip_getaddrinfo+0x38c>
  }

  if (hints != NULL) {
  110818:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11081c:	e3530000 	cmp	r3, #0
  110820:	0a00000a 	beq	110850 <lwip_getaddrinfo+0xac>
    ai_family = hints->ai_family;
  110824:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110828:	e5933004 	ldr	r3, [r3, #4]
  11082c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((ai_family != AF_UNSPEC)
  110830:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110834:	e3530000 	cmp	r3, #0
  110838:	0a000006 	beq	110858 <lwip_getaddrinfo+0xb4>
#if LWIP_IPV4
      && (ai_family != AF_INET)
  11083c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110840:	e3530002 	cmp	r3, #2
  110844:	0a000003 	beq	110858 <lwip_getaddrinfo+0xb4>
#endif /* LWIP_IPV4 */
#if LWIP_IPV6
      && (ai_family != AF_INET6)
#endif /* LWIP_IPV6 */
      ) {
      return EAI_FAMILY;
  110848:	e3a030cc 	mov	r3, #204	; 0xcc
  11084c:	ea0000b7 	b	110b30 <lwip_getaddrinfo+0x38c>
    }
  } else {
    ai_family = AF_UNSPEC;
  110850:	e3a03000 	mov	r3, #0
  110854:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  if (servname != NULL) {
  110858:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  11085c:	e3530000 	cmp	r3, #0
  110860:	0a00000a 	beq	110890 <lwip_getaddrinfo+0xec>
    /* service name specified: convert to port number
     * @todo?: currently, only ASCII integers (port numbers) are supported (AI_NUMERICSERV)! */
    port_nr = atoi(servname);
  110864:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  110868:	eb00c10f 	bl	140cac <atoi>
  11086c:	e50b0008 	str	r0, [fp, #-8]
    if ((port_nr <= 0) || (port_nr > 0xffff)) {
  110870:	e51b3008 	ldr	r3, [fp, #-8]
  110874:	e3530000 	cmp	r3, #0
  110878:	da000002 	ble	110888 <lwip_getaddrinfo+0xe4>
  11087c:	e51b3008 	ldr	r3, [fp, #-8]
  110880:	e3530801 	cmp	r3, #65536	; 0x10000
  110884:	ba000001 	blt	110890 <lwip_getaddrinfo+0xec>
      return EAI_SERVICE;
  110888:	e3a030c9 	mov	r3, #201	; 0xc9
  11088c:	ea0000a7 	b	110b30 <lwip_getaddrinfo+0x38c>
    }
  }

  if (nodename != NULL) {
  110890:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110894:	e3530000 	cmp	r3, #0
  110898:	0a00001b 	beq	11090c <lwip_getaddrinfo+0x168>
    /* service location specified, try to resolve */
    if ((hints != NULL) && (hints->ai_flags & AI_NUMERICHOST)) {
  11089c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1108a0:	e3530000 	cmp	r3, #0
  1108a4:	0a00000d 	beq	1108e0 <lwip_getaddrinfo+0x13c>
  1108a8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1108ac:	e5933000 	ldr	r3, [r3]
  1108b0:	e2033004 	and	r3, r3, #4
  1108b4:	e3530000 	cmp	r3, #0
  1108b8:	0a000008 	beq	1108e0 <lwip_getaddrinfo+0x13c>
      /* no DNS lookup, just parse for an address string */
      if (!ipaddr_aton(nodename, &addr)) {
  1108bc:	e24b3028 	sub	r3, fp, #40	; 0x28
  1108c0:	e1a01003 	mov	r1, r3
  1108c4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1108c8:	eb008777 	bl	1326ac <ip4addr_aton>
  1108cc:	e1a03000 	mov	r3, r0
  1108d0:	e3530000 	cmp	r3, #0
  1108d4:	1a00001a 	bne	110944 <lwip_getaddrinfo+0x1a0>
        return EAI_NONAME;
  1108d8:	e3a030c8 	mov	r3, #200	; 0xc8
  1108dc:	ea000093 	b	110b30 <lwip_getaddrinfo+0x38c>
        type = NETCONN_DNS_IPV4;
      } else if (ai_family == AF_INET6) {
        type = NETCONN_DNS_IPV6;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      err = netconn_gethostbyname_addrtype(nodename, &addr, type);
  1108e0:	e24b3028 	sub	r3, fp, #40	; 0x28
  1108e4:	e1a01003 	mov	r1, r3
  1108e8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1108ec:	ebffee7f 	bl	10c2f0 <netconn_gethostbyname>
  1108f0:	e1a03000 	mov	r3, r0
  1108f4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
      if (err != ERR_OK) {
  1108f8:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  1108fc:	e3530000 	cmp	r3, #0
  110900:	0a00000f 	beq	110944 <lwip_getaddrinfo+0x1a0>
        return EAI_FAIL;
  110904:	e3a030ca 	mov	r3, #202	; 0xca
  110908:	ea000088 	b	110b30 <lwip_getaddrinfo+0x38c>
      }
    }
  } else {
    /* service location specified, use loopback address */
    if ((hints != NULL) && (hints->ai_flags & AI_PASSIVE)) {
  11090c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110910:	e3530000 	cmp	r3, #0
  110914:	0a000007 	beq	110938 <lwip_getaddrinfo+0x194>
  110918:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11091c:	e5933000 	ldr	r3, [r3]
  110920:	e2033001 	and	r3, r3, #1
  110924:	e3530000 	cmp	r3, #0
  110928:	0a000002 	beq	110938 <lwip_getaddrinfo+0x194>
      ip_addr_set_any(ai_family == AF_INET6, &addr);
  11092c:	e3a03000 	mov	r3, #0
  110930:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  110934:	ea000002 	b	110944 <lwip_getaddrinfo+0x1a0>
    } else {
      ip_addr_set_loopback(ai_family == AF_INET6, &addr);
  110938:	e3a0307f 	mov	r3, #127	; 0x7f
  11093c:	e3403100 	movt	r3, #256	; 0x100
  110940:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
  }

  total_size = sizeof(struct addrinfo) + sizeof(struct sockaddr_storage);
  110944:	e3a03030 	mov	r3, #48	; 0x30
  110948:	e50b300c 	str	r3, [fp, #-12]
  if (nodename != NULL) {
  11094c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110950:	e3530000 	cmp	r3, #0
  110954:	0a00001a 	beq	1109c4 <lwip_getaddrinfo+0x220>
    namelen = strlen(nodename);
  110958:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  11095c:	eb00c2c7 	bl	141480 <strlen>
  110960:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > DNS_MAX_NAME_LENGTH) {
  110964:	e51b3010 	ldr	r3, [fp, #-16]
  110968:	e3530c01 	cmp	r3, #256	; 0x100
  11096c:	9a000001 	bls	110978 <lwip_getaddrinfo+0x1d4>
      /* invalid name length */
      return EAI_FAIL;
  110970:	e3a030ca 	mov	r3, #202	; 0xca
  110974:	ea00006d 	b	110b30 <lwip_getaddrinfo+0x38c>
    }
    LWIP_ASSERT("namelen is too long", total_size + namelen + 1 > total_size);
  110978:	e51b200c 	ldr	r2, [fp, #-12]
  11097c:	e51b3010 	ldr	r3, [fp, #-16]
  110980:	e0823003 	add	r3, r2, r3
  110984:	e2833001 	add	r3, r3, #1
  110988:	e51b200c 	ldr	r2, [fp, #-12]
  11098c:	e1520003 	cmp	r2, r3
  110990:	3a000006 	bcc	1109b0 <lwip_getaddrinfo+0x20c>
  110994:	e3060cb4 	movw	r0, #27828	; 0x6cb4
  110998:	e3400014 	movt	r0, #20
  11099c:	ebffc9dc 	bl	103114 <rt_kprintf>
  1109a0:	e3001166 	movw	r1, #358	; 0x166
  1109a4:	e3060cc8 	movw	r0, #27848	; 0x6cc8
  1109a8:	e3400014 	movt	r0, #20
  1109ac:	ebffe9c0 	bl	10b0b4 <sys_arch_assert>
    total_size += namelen + 1;
  1109b0:	e51b2010 	ldr	r2, [fp, #-16]
  1109b4:	e51b300c 	ldr	r3, [fp, #-12]
  1109b8:	e0823003 	add	r3, r2, r3
  1109bc:	e2833001 	add	r3, r3, #1
  1109c0:	e50b300c 	str	r3, [fp, #-12]
  }
  /* If this fails, please report to lwip-devel! :-) */
  LWIP_ASSERT("total_size <= NETDB_ELEM_SIZE: please report this!",
  1109c4:	e51b300c 	ldr	r3, [fp, #-12]
  1109c8:	e3002131 	movw	r2, #305	; 0x131
  1109cc:	e1530002 	cmp	r3, r2
  1109d0:	9a000006 	bls	1109f0 <lwip_getaddrinfo+0x24c>
  1109d4:	e3060cf4 	movw	r0, #27892	; 0x6cf4
  1109d8:	e3400014 	movt	r0, #20
  1109dc:	ebffc9cc 	bl	103114 <rt_kprintf>
  1109e0:	e300116b 	movw	r1, #363	; 0x16b
  1109e4:	e3060cc8 	movw	r0, #27848	; 0x6cc8
  1109e8:	e3400014 	movt	r0, #20
  1109ec:	ebffe9b0 	bl	10b0b4 <sys_arch_assert>
    total_size <= NETDB_ELEM_SIZE);
  ai = (struct addrinfo *)memp_malloc(MEMP_NETDB);
  1109f0:	e3a02f5b 	mov	r2, #364	; 0x16c
  1109f4:	e3061cc8 	movw	r1, #27848	; 0x6cc8
  1109f8:	e3401014 	movt	r1, #20
  1109fc:	e3a0000e 	mov	r0, #14
  110a00:	eb0021a5 	bl	11909c <memp_malloc_fn>
  110a04:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (ai == NULL) {
  110a08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110a0c:	e3530000 	cmp	r3, #0
  110a10:	1a000001 	bne	110a1c <lwip_getaddrinfo+0x278>
    return EAI_MEMORY;
  110a14:	e3a030cb 	mov	r3, #203	; 0xcb
  110a18:	ea000044 	b	110b30 <lwip_getaddrinfo+0x38c>
  }
  memset(ai, 0, total_size);
  110a1c:	e51b200c 	ldr	r2, [fp, #-12]
  110a20:	e3a01000 	mov	r1, #0
  110a24:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110a28:	eb00c203 	bl	14123c <memset>
  /* cast through void* to get rid of alignment warnings */
  sa = (struct sockaddr_storage *)(void*)((u8_t*)ai + sizeof(struct addrinfo));
  110a2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110a30:	e2833020 	add	r3, r3, #32
  110a34:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sa6->sin6_port = lwip_htons((u16_t)port_nr);
    ai->ai_family = AF_INET6;
#endif /* LWIP_IPV6 */
  } else {
#if LWIP_IPV4
    struct sockaddr_in *sa4 = (struct sockaddr_in*)sa;
  110a38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  110a3c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* set up sockaddr */
    inet_addr_from_ip4addr(&sa4->sin_addr, ip_2_ip4(&addr));
  110a40:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  110a44:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110a48:	e5832004 	str	r2, [r3, #4]
    sa4->sin_family = AF_INET;
  110a4c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110a50:	e3a02002 	mov	r2, #2
  110a54:	e5c32001 	strb	r2, [r3, #1]
    sa4->sin_len = sizeof(struct sockaddr_in);
  110a58:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110a5c:	e3a02010 	mov	r2, #16
  110a60:	e5c32000 	strb	r2, [r3]
    sa4->sin_port = lwip_htons((u16_t)port_nr);
  110a64:	e51b3008 	ldr	r3, [fp, #-8]
  110a68:	e6ff3073 	uxth	r3, r3
  110a6c:	e1a00003 	mov	r0, r3
  110a70:	eb0016c8 	bl	116598 <lwip_htons>
  110a74:	e1a03000 	mov	r3, r0
  110a78:	e1a02003 	mov	r2, r3
  110a7c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110a80:	e1c320b2 	strh	r2, [r3, #2]
    ai->ai_family = AF_INET;
  110a84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110a88:	e3a02002 	mov	r2, #2
  110a8c:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_IPV4 */
  }

  /* set up addrinfo */
  if (hints != NULL) {
  110a90:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110a94:	e3530000 	cmp	r3, #0
  110a98:	0a000007 	beq	110abc <lwip_getaddrinfo+0x318>
    /* copy socktype & protocol from hints if specified */
    ai->ai_socktype = hints->ai_socktype;
  110a9c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110aa0:	e5932008 	ldr	r2, [r3, #8]
  110aa4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110aa8:	e5832008 	str	r2, [r3, #8]
    ai->ai_protocol = hints->ai_protocol;
  110aac:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110ab0:	e593200c 	ldr	r2, [r3, #12]
  110ab4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110ab8:	e583200c 	str	r2, [r3, #12]
  }
  if (nodename != NULL) {
  110abc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110ac0:	e3530000 	cmp	r3, #0
  110ac4:	0a00000f 	beq	110b08 <lwip_getaddrinfo+0x364>
    /* copy nodename to canonname if specified */
    ai->ai_canonname = ((char*)ai + sizeof(struct addrinfo) + sizeof(struct sockaddr_storage));
  110ac8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110acc:	e2832030 	add	r2, r3, #48	; 0x30
  110ad0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110ad4:	e5832018 	str	r2, [r3, #24]
    MEMCPY(ai->ai_canonname, nodename, namelen);
  110ad8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110adc:	e5933018 	ldr	r3, [r3, #24]
  110ae0:	e51b2010 	ldr	r2, [fp, #-16]
  110ae4:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  110ae8:	e1a00003 	mov	r0, r3
  110aec:	eb00c09a 	bl	140d5c <memcpy>
    ai->ai_canonname[namelen] = 0;
  110af0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110af4:	e5932018 	ldr	r2, [r3, #24]
  110af8:	e51b3010 	ldr	r3, [fp, #-16]
  110afc:	e0823003 	add	r3, r2, r3
  110b00:	e3a02000 	mov	r2, #0
  110b04:	e5c32000 	strb	r2, [r3]
  }
  ai->ai_addrlen = sizeof(struct sockaddr_storage);
  110b08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b0c:	e3a02010 	mov	r2, #16
  110b10:	e5832010 	str	r2, [r3, #16]
  ai->ai_addr = (struct sockaddr*)sa;
  110b14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b18:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  110b1c:	e5832014 	str	r2, [r3, #20]

  *res = ai;
  110b20:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110b24:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  110b28:	e5832000 	str	r2, [r3]

  return 0;
  110b2c:	e3a03000 	mov	r3, #0
}
  110b30:	e1a00003 	mov	r0, r3
  110b34:	e24bd004 	sub	sp, fp, #4
  110b38:	e8bd8800 	pop	{fp, pc}

00110b3c <netifapi_do_netif_add>:
/**
 * Call netif_add() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_add(struct tcpip_api_call_data *m)
{
  110b3c:	e92d4810 	push	{r4, fp, lr}
  110b40:	e28db008 	add	fp, sp, #8
  110b44:	e24dd024 	sub	sp, sp, #36	; 0x24
  110b48:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110b4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110b50:	e50b3010 	str	r3, [fp, #-16]
  if (!netif_add( msg->netif,
  110b54:	e51b3010 	ldr	r3, [fp, #-16]
  110b58:	e5930004 	ldr	r0, [r3, #4]
  110b5c:	e51b3010 	ldr	r3, [fp, #-16]
  110b60:	e593c008 	ldr	ip, [r3, #8]
  110b64:	e51b3010 	ldr	r3, [fp, #-16]
  110b68:	e593e00c 	ldr	lr, [r3, #12]
  110b6c:	e51b3010 	ldr	r3, [fp, #-16]
  110b70:	e5934010 	ldr	r4, [r3, #16]
  110b74:	e51b3010 	ldr	r3, [fp, #-16]
  110b78:	e5933014 	ldr	r3, [r3, #20]
  110b7c:	e51b2010 	ldr	r2, [fp, #-16]
  110b80:	e5922018 	ldr	r2, [r2, #24]
  110b84:	e51b1010 	ldr	r1, [fp, #-16]
  110b88:	e591101c 	ldr	r1, [r1, #28]
  110b8c:	e58d1008 	str	r1, [sp, #8]
  110b90:	e58d2004 	str	r2, [sp, #4]
  110b94:	e58d3000 	str	r3, [sp]
  110b98:	e1a03004 	mov	r3, r4
  110b9c:	e1a0200e 	mov	r2, lr
  110ba0:	e1a0100c 	mov	r1, ip
  110ba4:	eb0021de 	bl	119324 <netif_add>
  110ba8:	e1a03000 	mov	r3, r0
  110bac:	e3530000 	cmp	r3, #0
  110bb0:	1a000001 	bne	110bbc <netifapi_do_netif_add+0x80>
                  API_EXPR_REF(msg->msg.add.gw),
#endif /* LWIP_IPV4 */
                  msg->msg.add.state,
                  msg->msg.add.init,
                  msg->msg.add.input)) {
    return ERR_IF;
  110bb4:	e3e0300b 	mvn	r3, #11
  110bb8:	ea000000 	b	110bc0 <netifapi_do_netif_add+0x84>
  } else {
    return ERR_OK;
  110bbc:	e3a03000 	mov	r3, #0
  }
}
  110bc0:	e1a00003 	mov	r0, r3
  110bc4:	e24bd008 	sub	sp, fp, #8
  110bc8:	e8bd8810 	pop	{r4, fp, pc}

00110bcc <netifapi_do_netif_set_addr>:
/**
 * Call netif_set_addr() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_set_addr(struct tcpip_api_call_data *m)
{
  110bcc:	e92d4800 	push	{fp, lr}
  110bd0:	e28db004 	add	fp, sp, #4
  110bd4:	e24dd010 	sub	sp, sp, #16
  110bd8:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110bdc:	e51b3010 	ldr	r3, [fp, #-16]
  110be0:	e50b3008 	str	r3, [fp, #-8]

  netif_set_addr( msg->netif,
  110be4:	e51b3008 	ldr	r3, [fp, #-8]
  110be8:	e5930004 	ldr	r0, [r3, #4]
  110bec:	e51b3008 	ldr	r3, [fp, #-8]
  110bf0:	e5931008 	ldr	r1, [r3, #8]
  110bf4:	e51b3008 	ldr	r3, [fp, #-8]
  110bf8:	e593200c 	ldr	r2, [r3, #12]
  110bfc:	e51b3008 	ldr	r3, [fp, #-8]
  110c00:	e5933010 	ldr	r3, [r3, #16]
  110c04:	eb00222c 	bl	1194bc <netif_set_addr>
                  API_EXPR_REF(msg->msg.add.ipaddr),
                  API_EXPR_REF(msg->msg.add.netmask),
                  API_EXPR_REF(msg->msg.add.gw));
  return ERR_OK;
  110c08:	e3a03000 	mov	r3, #0
}
  110c0c:	e1a00003 	mov	r0, r3
  110c10:	e24bd004 	sub	sp, fp, #4
  110c14:	e8bd8800 	pop	{fp, pc}

00110c18 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
  110c18:	e92d4800 	push	{fp, lr}
  110c1c:	e28db004 	add	fp, sp, #4
  110c20:	e24dd010 	sub	sp, sp, #16
  110c24:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110c28:	e51b3010 	ldr	r3, [fp, #-16]
  110c2c:	e50b3008 	str	r3, [fp, #-8]

  if (msg->msg.common.errtfunc != NULL) {
  110c30:	e51b3008 	ldr	r3, [fp, #-8]
  110c34:	e593300c 	ldr	r3, [r3, #12]
  110c38:	e3530000 	cmp	r3, #0
  110c3c:	0a000007 	beq	110c60 <netifapi_do_netif_common+0x48>
    return msg->msg.common.errtfunc(msg->netif);
  110c40:	e51b3008 	ldr	r3, [fp, #-8]
  110c44:	e593300c 	ldr	r3, [r3, #12]
  110c48:	e51b2008 	ldr	r2, [fp, #-8]
  110c4c:	e5922004 	ldr	r2, [r2, #4]
  110c50:	e1a00002 	mov	r0, r2
  110c54:	e12fff33 	blx	r3
  110c58:	e1a03000 	mov	r3, r0
  110c5c:	ea000006 	b	110c7c <netifapi_do_netif_common+0x64>
  } else {
    msg->msg.common.voidfunc(msg->netif);
  110c60:	e51b3008 	ldr	r3, [fp, #-8]
  110c64:	e5933008 	ldr	r3, [r3, #8]
  110c68:	e51b2008 	ldr	r2, [fp, #-8]
  110c6c:	e5922004 	ldr	r2, [r2, #4]
  110c70:	e1a00002 	mov	r0, r2
  110c74:	e12fff33 	blx	r3
    return ERR_OK;
  110c78:	e3a03000 	mov	r3, #0
  }
}
  110c7c:	e1a00003 	mov	r0, r3
  110c80:	e24bd004 	sub	sp, fp, #4
  110c84:	e8bd8800 	pop	{fp, pc}

00110c88 <netifapi_netif_add>:
netifapi_netif_add(struct netif *netif,
#if LWIP_IPV4
                   const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
                   void *state, netif_init_fn init, netif_input_fn input)
{
  110c88:	e92d4800 	push	{fp, lr}
  110c8c:	e28db004 	add	fp, sp, #4
  110c90:	e24dd038 	sub	sp, sp, #56	; 0x38
  110c94:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110c98:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110c9c:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110ca0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

#if LWIP_IPV4
  if (ipaddr == NULL) {
  110ca4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110ca8:	e3530000 	cmp	r3, #0
  110cac:	1a000002 	bne	110cbc <netifapi_netif_add+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110cb0:	e30938d0 	movw	r3, #39120	; 0x98d0
  110cb4:	e3403014 	movt	r3, #20
  110cb8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  110cbc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110cc0:	e3530000 	cmp	r3, #0
  110cc4:	1a000002 	bne	110cd4 <netifapi_netif_add+0x4c>
    netmask = IP4_ADDR_ANY4;
  110cc8:	e30938d0 	movw	r3, #39120	; 0x98d0
  110ccc:	e3403014 	movt	r3, #20
  110cd0:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  110cd4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110cd8:	e3530000 	cmp	r3, #0
  110cdc:	1a000002 	bne	110cec <netifapi_netif_add+0x64>
    gw = IP4_ADDR_ANY4;
  110ce0:	e30938d0 	movw	r3, #39120	; 0x98d0
  110ce4:	e3403014 	movt	r3, #20
  110ce8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }
#endif /* LWIP_IPV4 */

  NETIFAPI_VAR_REF(msg).netif = netif;
  110cec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110cf0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_IPV4
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  110cf4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110cf8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  110cfc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110d00:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  110d04:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110d08:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_IPV4 */
  NETIFAPI_VAR_REF(msg).msg.add.state   = state;
  110d0c:	e59b3004 	ldr	r3, [fp, #4]
  110d10:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  NETIFAPI_VAR_REF(msg).msg.add.init    = init;
  110d14:	e59b3008 	ldr	r3, [fp, #8]
  110d18:	e50b3010 	str	r3, [fp, #-16]
  NETIFAPI_VAR_REF(msg).msg.add.input   = input;
  110d1c:	e59b300c 	ldr	r3, [fp, #12]
  110d20:	e50b300c 	str	r3, [fp, #-12]
  err = tcpip_api_call(netifapi_do_netif_add, &API_VAR_REF(msg).call);
  110d24:	e24b3028 	sub	r3, fp, #40	; 0x28
  110d28:	e1a01003 	mov	r1, r3
  110d2c:	e3000b3c 	movw	r0, #2876	; 0xb3c
  110d30:	e3400011 	movt	r0, #17
  110d34:	eb001569 	bl	1162e0 <tcpip_api_call>
  110d38:	e1a03000 	mov	r3, r0
  110d3c:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110d40:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110d44:	e1a00003 	mov	r0, r3
  110d48:	e24bd004 	sub	sp, fp, #4
  110d4c:	e8bd8800 	pop	{fp, pc}

00110d50 <netifapi_netif_set_addr>:
err_t
netifapi_netif_set_addr(struct netif *netif,
                        const ip4_addr_t *ipaddr,
                        const ip4_addr_t *netmask,
                        const ip4_addr_t *gw)
{
  110d50:	e92d4800 	push	{fp, lr}
  110d54:	e28db004 	add	fp, sp, #4
  110d58:	e24dd038 	sub	sp, sp, #56	; 0x38
  110d5c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110d60:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110d64:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110d68:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  if (ipaddr == NULL) {
  110d6c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110d70:	e3530000 	cmp	r3, #0
  110d74:	1a000002 	bne	110d84 <netifapi_netif_set_addr+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110d78:	e30938d0 	movw	r3, #39120	; 0x98d0
  110d7c:	e3403014 	movt	r3, #20
  110d80:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  110d84:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110d88:	e3530000 	cmp	r3, #0
  110d8c:	1a000002 	bne	110d9c <netifapi_netif_set_addr+0x4c>
    netmask = IP4_ADDR_ANY4;
  110d90:	e30938d0 	movw	r3, #39120	; 0x98d0
  110d94:	e3403014 	movt	r3, #20
  110d98:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  110d9c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110da0:	e3530000 	cmp	r3, #0
  110da4:	1a000002 	bne	110db4 <netifapi_netif_set_addr+0x64>
    gw = IP4_ADDR_ANY4;
  110da8:	e30938d0 	movw	r3, #39120	; 0x98d0
  110dac:	e3403014 	movt	r3, #20
  110db0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }

  NETIFAPI_VAR_REF(msg).netif = netif;
  110db4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110db8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  110dbc:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110dc0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  110dc4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110dc8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  110dcc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110dd0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = tcpip_api_call(netifapi_do_netif_set_addr, &API_VAR_REF(msg).call);
  110dd4:	e24b3028 	sub	r3, fp, #40	; 0x28
  110dd8:	e1a01003 	mov	r1, r3
  110ddc:	e3000bcc 	movw	r0, #3020	; 0xbcc
  110de0:	e3400011 	movt	r0, #17
  110de4:	eb00153d 	bl	1162e0 <tcpip_api_call>
  110de8:	e1a03000 	mov	r3, r0
  110dec:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110df0:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110df4:	e1a00003 	mov	r0, r3
  110df8:	e24bd004 	sub	sp, fp, #4
  110dfc:	e8bd8800 	pop	{fp, pc}

00110e00 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                       netifapi_errt_fn errtfunc)
{
  110e00:	e92d4800 	push	{fp, lr}
  110e04:	e28db004 	add	fp, sp, #4
  110e08:	e24dd038 	sub	sp, sp, #56	; 0x38
  110e0c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110e10:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110e14:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
  110e18:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110e1c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
  110e20:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110e24:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
  110e28:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110e2c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
  110e30:	e24b3028 	sub	r3, fp, #40	; 0x28
  110e34:	e1a01003 	mov	r1, r3
  110e38:	e3000c18 	movw	r0, #3096	; 0xc18
  110e3c:	e3400011 	movt	r0, #17
  110e40:	eb001526 	bl	1162e0 <tcpip_api_call>
  110e44:	e1a03000 	mov	r3, r0
  110e48:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110e4c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110e50:	e1a00003 	mov	r0, r3
  110e54:	e24bd004 	sub	sp, fp, #4
  110e58:	e8bd8800 	pop	{fp, pc}

00110e5c <access_is_blocking>:
static u8_t lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen);
static u8_t lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen);

/* *RT-Thread* */
int access_is_blocking(u32_t flags, struct lwip_sock *sock)
{
  110e5c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110e60:	e28db000 	add	fp, sp, #0
  110e64:	e24dd00c 	sub	sp, sp, #12
  110e68:	e50b0008 	str	r0, [fp, #-8]
  110e6c:	e50b100c 	str	r1, [fp, #-12]
  return !((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn));
  110e70:	e51b3008 	ldr	r3, [fp, #-8]
  110e74:	e2033008 	and	r3, r3, #8
  110e78:	e3530000 	cmp	r3, #0
  110e7c:	1a000007 	bne	110ea0 <access_is_blocking+0x44>
  110e80:	e51b300c 	ldr	r3, [fp, #-12]
  110e84:	e5933000 	ldr	r3, [r3]
  110e88:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  110e8c:	e2033002 	and	r3, r3, #2
  110e90:	e3530000 	cmp	r3, #0
  110e94:	1a000001 	bne	110ea0 <access_is_blocking+0x44>
  110e98:	e3a03001 	mov	r3, #1
  110e9c:	ea000000 	b	110ea4 <access_is_blocking+0x48>
  110ea0:	e3a03000 	mov	r3, #0
}
  110ea4:	e1a00003 	mov	r0, r3
  110ea8:	e28bd000 	add	sp, fp, #0
  110eac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110eb0:	e12fff1e 	bx	lr

00110eb4 <lwip_socket_thread_init>:
#endif /* LWIP_IPV4 && LWIP_IPV6 */

/** LWIP_NETCONN_SEM_PER_THREAD==1: initialize thread-local semaphore */
void
lwip_socket_thread_init(void)
{
  110eb4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110eb8:	e28db000 	add	fp, sp, #0
   netconn_thread_init();
}
  110ebc:	e320f000 	nop	{0}
  110ec0:	e28bd000 	add	sp, fp, #0
  110ec4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110ec8:	e12fff1e 	bx	lr

00110ecc <lwip_socket_thread_cleanup>:

/** LWIP_NETCONN_SEM_PER_THREAD==1: destroy thread-local semaphore */
void
lwip_socket_thread_cleanup(void)
{
  110ecc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110ed0:	e28db000 	add	fp, sp, #0
   netconn_thread_cleanup();
}
  110ed4:	e320f000 	nop	{0}
  110ed8:	e28bd000 	add	sp, fp, #0
  110edc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110ee0:	e12fff1e 	bx	lr

00110ee4 <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
get_socket(int s)
{
  110ee4:	e92d4800 	push	{fp, lr}
  110ee8:	e28db004 	add	fp, sp, #4
  110eec:	e24dd010 	sub	sp, sp, #16
  110ef0:	e50b0010 	str	r0, [fp, #-16]
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
  110ef4:	e51b3010 	ldr	r3, [fp, #-16]
  110ef8:	e3530000 	cmp	r3, #0
  110efc:	ba000002 	blt	110f0c <get_socket+0x28>
  110f00:	e51b3010 	ldr	r3, [fp, #-16]
  110f04:	e3530007 	cmp	r3, #7
  110f08:	da000005 	ble	110f24 <get_socket+0x40>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  110f0c:	eb009fe3 	bl	138ea0 <__errno_location>
  110f10:	e1a02000 	mov	r2, r0
  110f14:	e3a03009 	mov	r3, #9
  110f18:	e5823000 	str	r3, [r2]
    return NULL;
  110f1c:	e3a03000 	mov	r3, #0
  110f20:	ea000011 	b	110f6c <get_socket+0x88>
  }

  sock = &sockets[s];
  110f24:	e51b3010 	ldr	r3, [fp, #-16]
  110f28:	e3a02014 	mov	r2, #20
  110f2c:	e0020392 	mul	r2, r2, r3
  110f30:	e30d3ba4 	movw	r3, #56228	; 0xdba4
  110f34:	e3403014 	movt	r3, #20
  110f38:	e0823003 	add	r3, r2, r3
  110f3c:	e50b3008 	str	r3, [fp, #-8]

  if (!sock->conn) {
  110f40:	e51b3008 	ldr	r3, [fp, #-8]
  110f44:	e5933000 	ldr	r3, [r3]
  110f48:	e3530000 	cmp	r3, #0
  110f4c:	1a000005 	bne	110f68 <get_socket+0x84>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  110f50:	eb009fd2 	bl	138ea0 <__errno_location>
  110f54:	e1a02000 	mov	r2, r0
  110f58:	e3a03009 	mov	r3, #9
  110f5c:	e5823000 	str	r3, [r2]
    return NULL;
  110f60:	e3a03000 	mov	r3, #0
  110f64:	ea000000 	b	110f6c <get_socket+0x88>
  }

  return sock;
  110f68:	e51b3008 	ldr	r3, [fp, #-8]
}
  110f6c:	e1a00003 	mov	r0, r3
  110f70:	e24bd004 	sub	sp, fp, #4
  110f74:	e8bd8800 	pop	{fp, pc}

00110f78 <tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int s)
{
  110f78:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110f7c:	e28db000 	add	fp, sp, #0
  110f80:	e24dd00c 	sub	sp, sp, #12
  110f84:	e50b0008 	str	r0, [fp, #-8]
  s -= LWIP_SOCKET_OFFSET;
  if ((s < 0) || (s >= NUM_SOCKETS)) {
  110f88:	e51b3008 	ldr	r3, [fp, #-8]
  110f8c:	e3530000 	cmp	r3, #0
  110f90:	ba000002 	blt	110fa0 <tryget_socket+0x28>
  110f94:	e51b3008 	ldr	r3, [fp, #-8]
  110f98:	e3530007 	cmp	r3, #7
  110f9c:	da000001 	ble	110fa8 <tryget_socket+0x30>
    return NULL;
  110fa0:	e3a03000 	mov	r3, #0
  110fa4:	ea000010 	b	110fec <tryget_socket+0x74>
  }
  if (!sockets[s].conn) {
  110fa8:	e30d3ba4 	movw	r3, #56228	; 0xdba4
  110fac:	e3403014 	movt	r3, #20
  110fb0:	e51b2008 	ldr	r2, [fp, #-8]
  110fb4:	e3a01014 	mov	r1, #20
  110fb8:	e0020291 	mul	r2, r1, r2
  110fbc:	e0833002 	add	r3, r3, r2
  110fc0:	e5933000 	ldr	r3, [r3]
  110fc4:	e3530000 	cmp	r3, #0
  110fc8:	1a000001 	bne	110fd4 <tryget_socket+0x5c>
    return NULL;
  110fcc:	e3a03000 	mov	r3, #0
  110fd0:	ea000005 	b	110fec <tryget_socket+0x74>
  }
  return &sockets[s];
  110fd4:	e51b3008 	ldr	r3, [fp, #-8]
  110fd8:	e3a02014 	mov	r2, #20
  110fdc:	e0020392 	mul	r2, r2, r3
  110fe0:	e30d3ba4 	movw	r3, #56228	; 0xdba4
  110fe4:	e3403014 	movt	r3, #20
  110fe8:	e0823003 	add	r3, r2, r3
}
  110fec:	e1a00003 	mov	r0, r3
  110ff0:	e28bd000 	add	sp, fp, #0
  110ff4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110ff8:	e12fff1e 	bx	lr

00110ffc <lwip_tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
lwip_tryget_socket(int s)
{
  110ffc:	e92d4800 	push	{fp, lr}
  111000:	e28db004 	add	fp, sp, #4
  111004:	e24dd008 	sub	sp, sp, #8
  111008:	e50b0008 	str	r0, [fp, #-8]
	return tryget_socket(s);
  11100c:	e51b0008 	ldr	r0, [fp, #-8]
  111010:	ebffffd8 	bl	110f78 <tryget_socket>
  111014:	e1a03000 	mov	r3, r0
}
  111018:	e1a00003 	mov	r0, r3
  11101c:	e24bd004 	sub	sp, fp, #4
  111020:	e8bd8800 	pop	{fp, pc}

00111024 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
  111024:	e92d4800 	push	{fp, lr}
  111028:	e28db004 	add	fp, sp, #4
  11102c:	e24dd010 	sub	sp, sp, #16
  111030:	e50b0010 	str	r0, [fp, #-16]
  111034:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
  111038:	e3a03000 	mov	r3, #0
  11103c:	e50b3008 	str	r3, [fp, #-8]
  111040:	ea000063 	b	1111d4 <alloc_socket+0x1b0>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
  111044:	ebffc47c 	bl	10223c <rt_enter_critical>
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
  111048:	e30d3ba4 	movw	r3, #56228	; 0xdba4
  11104c:	e3403014 	movt	r3, #20
  111050:	e51b2008 	ldr	r2, [fp, #-8]
  111054:	e3a01014 	mov	r1, #20
  111058:	e0020291 	mul	r2, r1, r2
  11105c:	e0833002 	add	r3, r3, r2
  111060:	e5933000 	ldr	r3, [r3]
  111064:	e3530000 	cmp	r3, #0
  111068:	1a000055 	bne	1111c4 <alloc_socket+0x1a0>
  11106c:	e30d3ba4 	movw	r3, #56228	; 0xdba4
  111070:	e3403014 	movt	r3, #20
  111074:	e51b2008 	ldr	r2, [fp, #-8]
  111078:	e3a01014 	mov	r1, #20
  11107c:	e0020291 	mul	r2, r1, r2
  111080:	e0833002 	add	r3, r3, r2
  111084:	e2833011 	add	r3, r3, #17
  111088:	e5d33000 	ldrb	r3, [r3]
  11108c:	e3530000 	cmp	r3, #0
  111090:	1a00004b 	bne	1111c4 <alloc_socket+0x1a0>
      sockets[i].conn       = newconn;
  111094:	e30d3ba4 	movw	r3, #56228	; 0xdba4
  111098:	e3403014 	movt	r3, #20
  11109c:	e51b2008 	ldr	r2, [fp, #-8]
  1110a0:	e3a01014 	mov	r1, #20
  1110a4:	e0020291 	mul	r2, r1, r2
  1110a8:	e0833002 	add	r3, r3, r2
  1110ac:	e51b2010 	ldr	r2, [fp, #-16]
  1110b0:	e5832000 	str	r2, [r3]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
  1110b4:	ebffc466 	bl	102254 <rt_exit_critical>
      sockets[i].lastdata   = NULL;
  1110b8:	e30d3ba4 	movw	r3, #56228	; 0xdba4
  1110bc:	e3403014 	movt	r3, #20
  1110c0:	e51b2008 	ldr	r2, [fp, #-8]
  1110c4:	e3a01014 	mov	r1, #20
  1110c8:	e0020291 	mul	r2, r1, r2
  1110cc:	e0833002 	add	r3, r3, r2
  1110d0:	e2833004 	add	r3, r3, #4
  1110d4:	e3a02000 	mov	r2, #0
  1110d8:	e5832000 	str	r2, [r3]
      sockets[i].lastoffset = 0;
  1110dc:	e30d3ba4 	movw	r3, #56228	; 0xdba4
  1110e0:	e3403014 	movt	r3, #20
  1110e4:	e51b2008 	ldr	r2, [fp, #-8]
  1110e8:	e3a01014 	mov	r1, #20
  1110ec:	e0020291 	mul	r2, r1, r2
  1110f0:	e0833002 	add	r3, r3, r2
  1110f4:	e2833008 	add	r3, r3, #8
  1110f8:	e3a02000 	mov	r2, #0
  1110fc:	e1c320b0 	strh	r2, [r3]
      sockets[i].rcvevent   = 0;
  111100:	e30d3ba4 	movw	r3, #56228	; 0xdba4
  111104:	e3403014 	movt	r3, #20
  111108:	e51b2008 	ldr	r2, [fp, #-8]
  11110c:	e3a01014 	mov	r1, #20
  111110:	e0020291 	mul	r2, r1, r2
  111114:	e0833002 	add	r3, r3, r2
  111118:	e283300a 	add	r3, r3, #10
  11111c:	e3a02000 	mov	r2, #0
  111120:	e1c320b0 	strh	r2, [r3]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
  111124:	e51b3010 	ldr	r3, [fp, #-16]
  111128:	e5933000 	ldr	r3, [r3]
  11112c:	e20330f0 	and	r3, r3, #240	; 0xf0
  111130:	e3530010 	cmp	r3, #16
  111134:	1a000002 	bne	111144 <alloc_socket+0x120>
  111138:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11113c:	e3530000 	cmp	r3, #0
  111140:	0a000001 	beq	11114c <alloc_socket+0x128>
  111144:	e3a03001 	mov	r3, #1
  111148:	ea000000 	b	111150 <alloc_socket+0x12c>
  11114c:	e3a03000 	mov	r3, #0
  111150:	e6ff2073 	uxth	r2, r3
  111154:	e30d3ba4 	movw	r3, #56228	; 0xdba4
  111158:	e3403014 	movt	r3, #20
  11115c:	e51b1008 	ldr	r1, [fp, #-8]
  111160:	e3a00014 	mov	r0, #20
  111164:	e0010190 	mul	r1, r0, r1
  111168:	e0833001 	add	r3, r3, r1
  11116c:	e283300c 	add	r3, r3, #12
  111170:	e1c320b0 	strh	r2, [r3]
      sockets[i].errevent   = 0;
  111174:	e30d3ba4 	movw	r3, #56228	; 0xdba4
  111178:	e3403014 	movt	r3, #20
  11117c:	e51b2008 	ldr	r2, [fp, #-8]
  111180:	e3a01014 	mov	r1, #20
  111184:	e0020291 	mul	r2, r1, r2
  111188:	e0833002 	add	r3, r3, r2
  11118c:	e283300e 	add	r3, r3, #14
  111190:	e3a02000 	mov	r2, #0
  111194:	e1c320b0 	strh	r2, [r3]
      sockets[i].err        = 0;
  111198:	e30d3ba4 	movw	r3, #56228	; 0xdba4
  11119c:	e3403014 	movt	r3, #20
  1111a0:	e51b2008 	ldr	r2, [fp, #-8]
  1111a4:	e3a01014 	mov	r1, #20
  1111a8:	e0020291 	mul	r2, r1, r2
  1111ac:	e0833002 	add	r3, r3, r2
  1111b0:	e2833010 	add	r3, r3, #16
  1111b4:	e3a02000 	mov	r2, #0
  1111b8:	e5c32000 	strb	r2, [r3]
      return i + LWIP_SOCKET_OFFSET;
  1111bc:	e51b3008 	ldr	r3, [fp, #-8]
  1111c0:	ea000007 	b	1111e4 <alloc_socket+0x1c0>
    }
    SYS_ARCH_UNPROTECT(lev);
  1111c4:	ebffc422 	bl	102254 <rt_exit_critical>
  for (i = 0; i < NUM_SOCKETS; ++i) {
  1111c8:	e51b3008 	ldr	r3, [fp, #-8]
  1111cc:	e2833001 	add	r3, r3, #1
  1111d0:	e50b3008 	str	r3, [fp, #-8]
  1111d4:	e51b3008 	ldr	r3, [fp, #-8]
  1111d8:	e3530007 	cmp	r3, #7
  1111dc:	daffff98 	ble	111044 <alloc_socket+0x20>
  }
  return -1;
  1111e0:	e3e03000 	mvn	r3, #0
}
  1111e4:	e1a00003 	mov	r0, r3
  1111e8:	e24bd004 	sub	sp, fp, #4
  1111ec:	e8bd8800 	pop	{fp, pc}

001111f0 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
  1111f0:	e92d4800 	push	{fp, lr}
  1111f4:	e28db004 	add	fp, sp, #4
  1111f8:	e24dd010 	sub	sp, sp, #16
  1111fc:	e50b0010 	str	r0, [fp, #-16]
  111200:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  void *lastdata;

  lastdata         = sock->lastdata;
  111204:	e51b3010 	ldr	r3, [fp, #-16]
  111208:	e5933004 	ldr	r3, [r3, #4]
  11120c:	e50b3008 	str	r3, [fp, #-8]
  sock->lastdata   = NULL;
  111210:	e51b3010 	ldr	r3, [fp, #-16]
  111214:	e3a02000 	mov	r2, #0
  111218:	e5832004 	str	r2, [r3, #4]
  sock->lastoffset = 0;
  11121c:	e51b3010 	ldr	r3, [fp, #-16]
  111220:	e3a02000 	mov	r2, #0
  111224:	e1c320b8 	strh	r2, [r3, #8]
  sock->err        = 0;
  111228:	e51b3010 	ldr	r3, [fp, #-16]
  11122c:	e3a02000 	mov	r2, #0
  111230:	e5c32010 	strb	r2, [r3, #16]

  /* Protect socket array */
  SYS_ARCH_SET(sock->conn, NULL);
  111234:	ebffc400 	bl	10223c <rt_enter_critical>
  111238:	e51b3010 	ldr	r3, [fp, #-16]
  11123c:	e3a02000 	mov	r2, #0
  111240:	e5832000 	str	r2, [r3]
  111244:	ebffc402 	bl	102254 <rt_exit_critical>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (lastdata != NULL) {
  111248:	e51b3008 	ldr	r3, [fp, #-8]
  11124c:	e3530000 	cmp	r3, #0
  111250:	0a000007 	beq	111274 <free_socket+0x84>
    if (is_tcp) {
  111254:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111258:	e3530000 	cmp	r3, #0
  11125c:	0a000002 	beq	11126c <free_socket+0x7c>
      pbuf_free((struct pbuf *)lastdata);
  111260:	e51b0008 	ldr	r0, [fp, #-8]
  111264:	eb002702 	bl	11ae74 <pbuf_free>
    } else {
      netbuf_delete((struct netbuf *)lastdata);
    }
  }
}
  111268:	ea000001 	b	111274 <free_socket+0x84>
      netbuf_delete((struct netbuf *)lastdata);
  11126c:	e51b0008 	ldr	r0, [fp, #-8]
  111270:	ebfffb1e 	bl	10fef0 <netbuf_delete>
}
  111274:	e320f000 	nop	{0}
  111278:	e24bd004 	sub	sp, fp, #4
  11127c:	e8bd8800 	pop	{fp, pc}

00111280 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  111280:	e92d4810 	push	{r4, fp, lr}
  111284:	e28db008 	add	fp, sp, #8
  111288:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  11128c:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  111290:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  111294:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
  111298:	e3a03000 	mov	r3, #0
  11129c:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
  int newsock;
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
  1112a0:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  1112a4:	ebffff0e 	bl	110ee4 <get_socket>
  1112a8:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  1112ac:	e51b3010 	ldr	r3, [fp, #-16]
  1112b0:	e3530000 	cmp	r3, #0
  1112b4:	1a000001 	bne	1112c0 <lwip_accept+0x40>
    return -1;
  1112b8:	e3e03000 	mvn	r3, #0
  1112bc:	ea0000fa 	b	1116ac <lwip_accept+0x42c>
  }

  if (netconn_is_nonblocking(sock->conn) && (sock->rcvevent <= 0)) {
  1112c0:	e51b3010 	ldr	r3, [fp, #-16]
  1112c4:	e5933000 	ldr	r3, [r3]
  1112c8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  1112cc:	e2033002 	and	r3, r3, #2
  1112d0:	e3530000 	cmp	r3, #0
  1112d4:	0a000009 	beq	111300 <lwip_accept+0x80>
  1112d8:	e51b3010 	ldr	r3, [fp, #-16]
  1112dc:	e1d330fa 	ldrsh	r3, [r3, #10]
  1112e0:	e3530000 	cmp	r3, #0
  1112e4:	ca000005 	bgt	111300 <lwip_accept+0x80>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): returning EWOULDBLOCK\n", s));
    set_errno(EWOULDBLOCK);
  1112e8:	eb009eec 	bl	138ea0 <__errno_location>
  1112ec:	e1a02000 	mov	r2, r0
  1112f0:	e3a0300b 	mov	r3, #11
  1112f4:	e5823000 	str	r3, [r2]
    return -1;
  1112f8:	e3e03000 	mvn	r3, #0
  1112fc:	ea0000ea 	b	1116ac <lwip_accept+0x42c>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
  111300:	e51b3010 	ldr	r3, [fp, #-16]
  111304:	e5933000 	ldr	r3, [r3]
  111308:	e24b2038 	sub	r2, fp, #56	; 0x38
  11130c:	e1a01002 	mov	r1, r2
  111310:	e1a00003 	mov	r0, r3
  111314:	ebffe924 	bl	10b7ac <netconn_accept>
  111318:	e1a03000 	mov	r3, r0
  11131c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  111320:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111324:	e3530000 	cmp	r3, #0
  111328:	0a000035 	beq	111404 <lwip_accept+0x184>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  11132c:	e51b3010 	ldr	r3, [fp, #-16]
  111330:	e5933000 	ldr	r3, [r3]
  111334:	e5933000 	ldr	r3, [r3]
  111338:	e20330f0 	and	r3, r3, #240	; 0xf0
  11133c:	e3530010 	cmp	r3, #16
  111340:	0a00000d 	beq	11137c <lwip_accept+0xfc>
      sock_set_errno(sock, EOPNOTSUPP);
  111344:	e3a0305f 	mov	r3, #95	; 0x5f
  111348:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  11134c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  111350:	e6ef2073 	uxtb	r2, r3
  111354:	e51b3010 	ldr	r3, [fp, #-16]
  111358:	e5c32010 	strb	r2, [r3, #16]
  11135c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  111360:	e3530000 	cmp	r3, #0
  111364:	0a000024 	beq	1113fc <lwip_accept+0x17c>
  111368:	eb009ecc 	bl	138ea0 <__errno_location>
  11136c:	e1a02000 	mov	r2, r0
  111370:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  111374:	e5823000 	str	r3, [r2]
  111378:	ea00001f 	b	1113fc <lwip_accept+0x17c>
    } else if (err == ERR_CLSD) {
  11137c:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111380:	e373000f 	cmn	r3, #15
  111384:	1a00000d 	bne	1113c0 <lwip_accept+0x140>
      sock_set_errno(sock, EINVAL);
  111388:	e3a03016 	mov	r3, #22
  11138c:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  111390:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111394:	e6ef2073 	uxtb	r2, r3
  111398:	e51b3010 	ldr	r3, [fp, #-16]
  11139c:	e5c32010 	strb	r2, [r3, #16]
  1113a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1113a4:	e3530000 	cmp	r3, #0
  1113a8:	0a000013 	beq	1113fc <lwip_accept+0x17c>
  1113ac:	eb009ebb 	bl	138ea0 <__errno_location>
  1113b0:	e1a02000 	mov	r2, r0
  1113b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1113b8:	e5823000 	str	r3, [r2]
  1113bc:	ea00000e 	b	1113fc <lwip_accept+0x17c>
    } else {
      sock_set_errno(sock, err_to_errno(err));
  1113c0:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1113c4:	e1a00003 	mov	r0, r3
  1113c8:	ebfffa9d 	bl	10fe44 <err_to_errno>
  1113cc:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  1113d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1113d4:	e6ef2073 	uxtb	r2, r3
  1113d8:	e51b3010 	ldr	r3, [fp, #-16]
  1113dc:	e5c32010 	strb	r2, [r3, #16]
  1113e0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1113e4:	e3530000 	cmp	r3, #0
  1113e8:	0a000003 	beq	1113fc <lwip_accept+0x17c>
  1113ec:	eb009eab 	bl	138ea0 <__errno_location>
  1113f0:	e1a02000 	mov	r2, r0
  1113f4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1113f8:	e5823000 	str	r3, [r2]
    }
    return -1;
  1113fc:	e3e03000 	mvn	r3, #0
  111400:	ea0000a9 	b	1116ac <lwip_accept+0x42c>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
  111404:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111408:	e3530000 	cmp	r3, #0
  11140c:	1a000006 	bne	11142c <lwip_accept+0x1ac>
  111410:	e3060d28 	movw	r0, #27944	; 0x6d28
  111414:	e3400014 	movt	r0, #20
  111418:	ebffc73d 	bl	103114 <rt_kprintf>
  11141c:	e300120a 	movw	r1, #522	; 0x20a
  111420:	e3060d38 	movw	r0, #27960	; 0x6d38
  111424:	e3400014 	movt	r0, #20
  111428:	ebffe721 	bl	10b0b4 <sys_arch_assert>

  newsock = alloc_socket(newconn, 1);
  11142c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111430:	e3a01001 	mov	r1, #1
  111434:	e1a00003 	mov	r0, r3
  111438:	ebfffef9 	bl	111024 <alloc_socket>
  11143c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  if (newsock == -1) {
  111440:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111444:	e3730001 	cmn	r3, #1
  111448:	1a000011 	bne	111494 <lwip_accept+0x214>
    netconn_delete(newconn);
  11144c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111450:	e1a00003 	mov	r0, r3
  111454:	ebffe7e6 	bl	10b3f4 <netconn_delete>
    sock_set_errno(sock, ENFILE);
  111458:	e3a03017 	mov	r3, #23
  11145c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  111460:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111464:	e6ef2073 	uxtb	r2, r3
  111468:	e51b3010 	ldr	r3, [fp, #-16]
  11146c:	e5c32010 	strb	r2, [r3, #16]
  111470:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111474:	e3530000 	cmp	r3, #0
  111478:	0a000003 	beq	11148c <lwip_accept+0x20c>
  11147c:	eb009e87 	bl	138ea0 <__errno_location>
  111480:	e1a02000 	mov	r2, r0
  111484:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111488:	e5823000 	str	r3, [r2]
    return -1;
  11148c:	e3e03000 	mvn	r3, #0
  111490:	ea000085 	b	1116ac <lwip_accept+0x42c>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
  111494:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111498:	e3530000 	cmp	r3, #0
  11149c:	ba000002 	blt	1114ac <lwip_accept+0x22c>
  1114a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1114a4:	e3530007 	cmp	r3, #7
  1114a8:	da000006 	ble	1114c8 <lwip_accept+0x248>
  1114ac:	e3060d68 	movw	r0, #28008	; 0x6d68
  1114b0:	e3400014 	movt	r0, #20
  1114b4:	ebffc716 	bl	103114 <rt_kprintf>
  1114b8:	e3001212 	movw	r1, #530	; 0x212
  1114bc:	e3060d38 	movw	r0, #27960	; 0x6d38
  1114c0:	e3400014 	movt	r0, #20
  1114c4:	ebffe6fa 	bl	10b0b4 <sys_arch_assert>
  // LWIP_ASSERT("newconn->callback == event_callback", newconn->callback == event_callback);
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
  1114c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1114cc:	e3a02014 	mov	r2, #20
  1114d0:	e0020392 	mul	r2, r2, r3
  1114d4:	e30d3ba4 	movw	r3, #56228	; 0xdba4
  1114d8:	e3403014 	movt	r3, #20
  1114dc:	e0823003 	add	r3, r2, r3
  1114e0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
  1114e4:	ebffc354 	bl	10223c <rt_enter_critical>
  nsock->rcvevent += (s16_t)(-1 - newconn->socket);
  1114e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1114ec:	e1d330fa 	ldrsh	r3, [r3, #10]
  1114f0:	e6ff2073 	uxth	r2, r3
  1114f4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1114f8:	e593301c 	ldr	r3, [r3, #28]
  1114fc:	e6ff3073 	uxth	r3, r3
  111500:	e0423003 	sub	r3, r2, r3
  111504:	e6ff3073 	uxth	r3, r3
  111508:	e2433001 	sub	r3, r3, #1
  11150c:	e6ff3073 	uxth	r3, r3
  111510:	e6bf2073 	sxth	r2, r3
  111514:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111518:	e1c320ba 	strh	r2, [r3, #10]
  newconn->socket = newsock;
  11151c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111520:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  111524:	e583201c 	str	r2, [r3, #28]
  SYS_ARCH_UNPROTECT(lev);
  111528:	ebffc349 	bl	102254 <rt_exit_critical>

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if (addr != NULL) {
  11152c:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  111530:	e3530000 	cmp	r3, #0
  111534:	0a00004e 	beq	111674 <lwip_accept+0x3f4>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
  111538:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  11153c:	e24b203e 	sub	r2, fp, #62	; 0x3e
  111540:	e24b103c 	sub	r1, fp, #60	; 0x3c
  111544:	e3a03000 	mov	r3, #0
  111548:	ebffe7c9 	bl	10b474 <netconn_getaddr>
  11154c:	e1a03000 	mov	r3, r0
  111550:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    if (err != ERR_OK) {
  111554:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111558:	e3530000 	cmp	r3, #0
  11155c:	0a000016 	beq	1115bc <lwip_accept+0x33c>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
  111560:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111564:	e1a00003 	mov	r0, r3
  111568:	ebffe7a1 	bl	10b3f4 <netconn_delete>
      free_socket(nsock, 1);
  11156c:	e3a01001 	mov	r1, #1
  111570:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  111574:	ebffff1d 	bl	1111f0 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
  111578:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11157c:	e1a00003 	mov	r0, r3
  111580:	ebfffa2f 	bl	10fe44 <err_to_errno>
  111584:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  111588:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11158c:	e6ef2073 	uxtb	r2, r3
  111590:	e51b3010 	ldr	r3, [fp, #-16]
  111594:	e5c32010 	strb	r2, [r3, #16]
  111598:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11159c:	e3530000 	cmp	r3, #0
  1115a0:	0a000003 	beq	1115b4 <lwip_accept+0x334>
  1115a4:	eb009e3d 	bl	138ea0 <__errno_location>
  1115a8:	e1a02000 	mov	r2, r0
  1115ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1115b0:	e5823000 	str	r3, [r2]
      return -1;
  1115b4:	e3e03000 	mvn	r3, #0
  1115b8:	ea00003b 	b	1116ac <lwip_accept+0x42c>
    }
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
  1115bc:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  1115c0:	e3530000 	cmp	r3, #0
  1115c4:	1a000006 	bne	1115e4 <lwip_accept+0x364>
  1115c8:	e3060d80 	movw	r0, #28032	; 0x6d80
  1115cc:	e3400014 	movt	r0, #20
  1115d0:	ebffc6cf 	bl	103114 <rt_kprintf>
  1115d4:	e300122e 	movw	r1, #558	; 0x22e
  1115d8:	e3060d38 	movw	r0, #27960	; 0x6d38
  1115dc:	e3400014 	movt	r0, #20
  1115e0:	ebffe6b3 	bl	10b0b4 <sys_arch_assert>

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
  1115e4:	e24b3050 	sub	r3, fp, #80	; 0x50
  1115e8:	e3a02010 	mov	r2, #16
  1115ec:	e5c32000 	strb	r2, [r3]
  1115f0:	e24b3050 	sub	r3, fp, #80	; 0x50
  1115f4:	e3a02002 	mov	r2, #2
  1115f8:	e5c32001 	strb	r2, [r3, #1]
  1115fc:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  111600:	e24b4050 	sub	r4, fp, #80	; 0x50
  111604:	e1a00003 	mov	r0, r3
  111608:	eb0013e2 	bl	116598 <lwip_htons>
  11160c:	e1a03000 	mov	r3, r0
  111610:	e1c430b2 	strh	r3, [r4, #2]
  111614:	e24b3050 	sub	r3, fp, #80	; 0x50
  111618:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  11161c:	e5832004 	str	r2, [r3, #4]
  111620:	e24b3050 	sub	r3, fp, #80	; 0x50
  111624:	e2833008 	add	r3, r3, #8
  111628:	e3a02008 	mov	r2, #8
  11162c:	e3a01000 	mov	r1, #0
  111630:	e1a00003 	mov	r0, r3
  111634:	eb00bf00 	bl	14123c <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
  111638:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  11163c:	e5933000 	ldr	r3, [r3]
  111640:	e55b2050 	ldrb	r2, [fp, #-80]	; 0xffffffb0
  111644:	e1530002 	cmp	r3, r2
  111648:	9a000003 	bls	11165c <lwip_accept+0x3dc>
      *addrlen = tempaddr.sa.sa_len;
  11164c:	e55b3050 	ldrb	r3, [fp, #-80]	; 0xffffffb0
  111650:	e1a02003 	mov	r2, r3
  111654:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111658:	e5832000 	str	r2, [r3]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
  11165c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111660:	e5932000 	ldr	r2, [r3]
  111664:	e24b3050 	sub	r3, fp, #80	; 0x50
  111668:	e1a01003 	mov	r1, r3
  11166c:	e51b005c 	ldr	r0, [fp, #-92]	; 0xffffffa4
  111670:	eb00bdb9 	bl	140d5c <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
  111674:	e3a03000 	mov	r3, #0
  111678:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  11167c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111680:	e6ef2073 	uxtb	r2, r3
  111684:	e51b3010 	ldr	r3, [fp, #-16]
  111688:	e5c32010 	strb	r2, [r3, #16]
  11168c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111690:	e3530000 	cmp	r3, #0
  111694:	0a000003 	beq	1116a8 <lwip_accept+0x428>
  111698:	eb009e00 	bl	138ea0 <__errno_location>
  11169c:	e1a02000 	mov	r2, r0
  1116a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1116a4:	e5823000 	str	r3, [r2]
  return newsock;
  1116a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  1116ac:	e1a00003 	mov	r0, r3
  1116b0:	e24bd008 	sub	sp, fp, #8
  1116b4:	e8bd8810 	pop	{r4, fp, pc}

001116b8 <lwip_bind>:
#include <stdio.h>
int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
  1116b8:	e92d4800 	push	{fp, lr}
  1116bc:	e28db004 	add	fp, sp, #4
  1116c0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1116c4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1116c8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1116cc:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
  1116d0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1116d4:	ebfffe02 	bl	110ee4 <get_socket>
  1116d8:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  1116dc:	e51b3008 	ldr	r3, [fp, #-8]
  1116e0:	e3530000 	cmp	r3, #0
  1116e4:	1a000001 	bne	1116f0 <lwip_bind+0x38>
    return -1;
  1116e8:	e3e03000 	mvn	r3, #0
  1116ec:	ea000054 	b	111844 <lwip_bind+0x18c>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
  1116f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1116f4:	e3530010 	cmp	r3, #16
  1116f8:	1a000007 	bne	11171c <lwip_bind+0x64>
  1116fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111700:	e5d33001 	ldrb	r3, [r3, #1]
  111704:	e3530002 	cmp	r3, #2
  111708:	1a000003 	bne	11171c <lwip_bind+0x64>
  11170c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111710:	e2033003 	and	r3, r3, #3
  111714:	e3530000 	cmp	r3, #0
  111718:	0a000016 	beq	111778 <lwip_bind+0xc0>
  11171c:	e3060d9c 	movw	r0, #28060	; 0x6d9c
  111720:	e3400014 	movt	r0, #20
  111724:	ebffc67a 	bl	103114 <rt_kprintf>
  111728:	e3001257 	movw	r1, #599	; 0x257
  11172c:	e3060d38 	movw	r0, #27960	; 0x6d38
  111730:	e3400014 	movt	r0, #20
  111734:	ebffe65e 	bl	10b0b4 <sys_arch_assert>
  111738:	e3e0000f 	mvn	r0, #15
  11173c:	ebfff9c0 	bl	10fe44 <err_to_errno>
  111740:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  111744:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111748:	e6ef2073 	uxtb	r2, r3
  11174c:	e51b3008 	ldr	r3, [fp, #-8]
  111750:	e5c32010 	strb	r2, [r3, #16]
  111754:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111758:	e3530000 	cmp	r3, #0
  11175c:	0a000003 	beq	111770 <lwip_bind+0xb8>
  111760:	eb009dce 	bl	138ea0 <__errno_location>
  111764:	e1a02000 	mov	r2, r0
  111768:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11176c:	e5823000 	str	r3, [r2]
  111770:	e3e03000 	mvn	r3, #0
  111774:	ea000032 	b	111844 <lwip_bind+0x18c>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
  111778:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11177c:	e5933004 	ldr	r3, [r3, #4]
  111780:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  111784:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111788:	e1d330b2 	ldrh	r3, [r3, #2]
  11178c:	e1a00003 	mov	r0, r3
  111790:	eb001380 	bl	116598 <lwip_htons>
  111794:	e1a03000 	mov	r3, r0
  111798:	e14b30ba 	strh	r3, [fp, #-10]
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
  11179c:	e51b3008 	ldr	r3, [fp, #-8]
  1117a0:	e5933000 	ldr	r3, [r3]
  1117a4:	e15b20ba 	ldrh	r2, [fp, #-10]
  1117a8:	e24b101c 	sub	r1, fp, #28
  1117ac:	e1a00003 	mov	r0, r3
  1117b0:	ebffe76d 	bl	10b56c <netconn_bind>
  1117b4:	e1a03000 	mov	r3, r0
  1117b8:	e54b300b 	strb	r3, [fp, #-11]

  if (err != ERR_OK) {
  1117bc:	e15b30db 	ldrsb	r3, [fp, #-11]
  1117c0:	e3530000 	cmp	r3, #0
  1117c4:	0a000010 	beq	11180c <lwip_bind+0x154>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  1117c8:	e15b30db 	ldrsb	r3, [fp, #-11]
  1117cc:	e1a00003 	mov	r0, r3
  1117d0:	ebfff99b 	bl	10fe44 <err_to_errno>
  1117d4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1117d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1117dc:	e6ef2073 	uxtb	r2, r3
  1117e0:	e51b3008 	ldr	r3, [fp, #-8]
  1117e4:	e5c32010 	strb	r2, [r3, #16]
  1117e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1117ec:	e3530000 	cmp	r3, #0
  1117f0:	0a000003 	beq	111804 <lwip_bind+0x14c>
  1117f4:	eb009da9 	bl	138ea0 <__errno_location>
  1117f8:	e1a02000 	mov	r2, r0
  1117fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111800:	e5823000 	str	r3, [r2]
    return -1;
  111804:	e3e03000 	mvn	r3, #0
  111808:	ea00000d 	b	111844 <lwip_bind+0x18c>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  11180c:	e3a03000 	mov	r3, #0
  111810:	e50b3010 	str	r3, [fp, #-16]
  111814:	e51b3010 	ldr	r3, [fp, #-16]
  111818:	e6ef2073 	uxtb	r2, r3
  11181c:	e51b3008 	ldr	r3, [fp, #-8]
  111820:	e5c32010 	strb	r2, [r3, #16]
  111824:	e51b3010 	ldr	r3, [fp, #-16]
  111828:	e3530000 	cmp	r3, #0
  11182c:	0a000003 	beq	111840 <lwip_bind+0x188>
  111830:	eb009d9a 	bl	138ea0 <__errno_location>
  111834:	e1a02000 	mov	r2, r0
  111838:	e51b3010 	ldr	r3, [fp, #-16]
  11183c:	e5823000 	str	r3, [r2]
  return 0;
  111840:	e3a03000 	mov	r3, #0
}
  111844:	e1a00003 	mov	r0, r3
  111848:	e24bd004 	sub	sp, fp, #4
  11184c:	e8bd8800 	pop	{fp, pc}

00111850 <lwip_close>:

int
lwip_close(int s)
{
  111850:	e92d4800 	push	{fp, lr}
  111854:	e28db004 	add	fp, sp, #4
  111858:	e24dd018 	sub	sp, sp, #24
  11185c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock;
  int is_tcp = 0;
  111860:	e3a03000 	mov	r3, #0
  111864:	e50b3008 	str	r3, [fp, #-8]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
  111868:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11186c:	ebfffd9c 	bl	110ee4 <get_socket>
  111870:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  111874:	e51b300c 	ldr	r3, [fp, #-12]
  111878:	e3530000 	cmp	r3, #0
  11187c:	1a000001 	bne	111888 <lwip_close+0x38>
    return -1;
  111880:	e3e03000 	mvn	r3, #0
  111884:	ea000038 	b	11196c <lwip_close+0x11c>
  }

  if (sock->conn != NULL) {
  111888:	e51b300c 	ldr	r3, [fp, #-12]
  11188c:	e5933000 	ldr	r3, [r3]
  111890:	e3530000 	cmp	r3, #0
  111894:	0a000009 	beq	1118c0 <lwip_close+0x70>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
  111898:	e51b300c 	ldr	r3, [fp, #-12]
  11189c:	e5933000 	ldr	r3, [r3]
  1118a0:	e5933000 	ldr	r3, [r3]
  1118a4:	e20330f0 	and	r3, r3, #240	; 0xf0
  1118a8:	e3530010 	cmp	r3, #16
  1118ac:	03a03001 	moveq	r3, #1
  1118b0:	13a03000 	movne	r3, #0
  1118b4:	e6ef3073 	uxtb	r3, r3
  1118b8:	e50b3008 	str	r3, [fp, #-8]
  1118bc:	ea00000a 	b	1118ec <lwip_close+0x9c>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
  1118c0:	e51b300c 	ldr	r3, [fp, #-12]
  1118c4:	e5933004 	ldr	r3, [r3, #4]
  1118c8:	e3530000 	cmp	r3, #0
  1118cc:	0a000006 	beq	1118ec <lwip_close+0x9c>
  1118d0:	e3060db8 	movw	r0, #28088	; 0x6db8
  1118d4:	e3400014 	movt	r0, #20
  1118d8:	ebffc60d 	bl	103114 <rt_kprintf>
  1118dc:	e3001285 	movw	r1, #645	; 0x285
  1118e0:	e3060d38 	movw	r0, #27960	; 0x6d38
  1118e4:	e3400014 	movt	r0, #20
  1118e8:	ebffe5f1 	bl	10b0b4 <sys_arch_assert>
  }

#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
  1118ec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1118f0:	eb001126 	bl	115d90 <lwip_socket_drop_registered_memberships>
#endif /* LWIP_IGMP */

  err = netconn_delete(sock->conn);
  1118f4:	e51b300c 	ldr	r3, [fp, #-12]
  1118f8:	e5933000 	ldr	r3, [r3]
  1118fc:	e1a00003 	mov	r0, r3
  111900:	ebffe6bb 	bl	10b3f4 <netconn_delete>
  111904:	e1a03000 	mov	r3, r0
  111908:	e54b300d 	strb	r3, [fp, #-13]
  if (err != ERR_OK) {
  11190c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  111910:	e3530000 	cmp	r3, #0
  111914:	0a000010 	beq	11195c <lwip_close+0x10c>
    sock_set_errno(sock, err_to_errno(err));
  111918:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11191c:	e1a00003 	mov	r0, r3
  111920:	ebfff947 	bl	10fe44 <err_to_errno>
  111924:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111928:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11192c:	e6ef2073 	uxtb	r2, r3
  111930:	e51b300c 	ldr	r3, [fp, #-12]
  111934:	e5c32010 	strb	r2, [r3, #16]
  111938:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11193c:	e3530000 	cmp	r3, #0
  111940:	0a000003 	beq	111954 <lwip_close+0x104>
  111944:	eb009d55 	bl	138ea0 <__errno_location>
  111948:	e1a02000 	mov	r2, r0
  11194c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111950:	e5823000 	str	r3, [r2]
    return -1;
  111954:	e3e03000 	mvn	r3, #0
  111958:	ea000003 	b	11196c <lwip_close+0x11c>
  }

  free_socket(sock, is_tcp);
  11195c:	e51b1008 	ldr	r1, [fp, #-8]
  111960:	e51b000c 	ldr	r0, [fp, #-12]
  111964:	ebfffe21 	bl	1111f0 <free_socket>
  set_errno(0);
  return 0;
  111968:	e3a03000 	mov	r3, #0
}
  11196c:	e1a00003 	mov	r0, r3
  111970:	e24bd004 	sub	sp, fp, #4
  111974:	e8bd8800 	pop	{fp, pc}

00111978 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
  111978:	e92d4800 	push	{fp, lr}
  11197c:	e28db004 	add	fp, sp, #4
  111980:	e24dd030 	sub	sp, sp, #48	; 0x30
  111984:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  111988:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  11198c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
  111990:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  111994:	ebfffd52 	bl	110ee4 <get_socket>
  111998:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  11199c:	e51b300c 	ldr	r3, [fp, #-12]
  1119a0:	e3530000 	cmp	r3, #0
  1119a4:	1a000001 	bne	1119b0 <lwip_connect+0x38>
    return -1;
  1119a8:	e3e03000 	mvn	r3, #0
  1119ac:	ea000063 	b	111b40 <lwip_connect+0x1c8>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
  1119b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1119b4:	e5d33001 	ldrb	r3, [r3, #1]
  1119b8:	e3530000 	cmp	r3, #0
  1119bc:	1a000006 	bne	1119dc <lwip_connect+0x64>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
  1119c0:	e51b300c 	ldr	r3, [fp, #-12]
  1119c4:	e5933000 	ldr	r3, [r3]
  1119c8:	e1a00003 	mov	r0, r3
  1119cc:	ebffe73a 	bl	10b6bc <netconn_disconnect>
  1119d0:	e1a03000 	mov	r3, r0
  1119d4:	e54b3005 	strb	r3, [fp, #-5]
  1119d8:	ea000036 	b	111ab8 <lwip_connect+0x140>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
  1119dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1119e0:	e3530010 	cmp	r3, #16
  1119e4:	1a00000b 	bne	111a18 <lwip_connect+0xa0>
  1119e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1119ec:	e5d33001 	ldrb	r3, [r3, #1]
  1119f0:	e3530000 	cmp	r3, #0
  1119f4:	0a000003 	beq	111a08 <lwip_connect+0x90>
  1119f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1119fc:	e5d33001 	ldrb	r3, [r3, #1]
  111a00:	e3530002 	cmp	r3, #2
  111a04:	1a000003 	bne	111a18 <lwip_connect+0xa0>
  111a08:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111a0c:	e2033003 	and	r3, r3, #3
  111a10:	e3530000 	cmp	r3, #0
  111a14:	0a000016 	beq	111a74 <lwip_connect+0xfc>
  111a18:	e3060dd0 	movw	r0, #28112	; 0x6dd0
  111a1c:	e3400014 	movt	r0, #20
  111a20:	ebffc5bb 	bl	103114 <rt_kprintf>
  111a24:	e3a01fad 	mov	r1, #692	; 0x2b4
  111a28:	e3060d38 	movw	r0, #27960	; 0x6d38
  111a2c:	e3400014 	movt	r0, #20
  111a30:	ebffe59f 	bl	10b0b4 <sys_arch_assert>
  111a34:	e3e0000f 	mvn	r0, #15
  111a38:	ebfff901 	bl	10fe44 <err_to_errno>
  111a3c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111a40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111a44:	e6ef2073 	uxtb	r2, r3
  111a48:	e51b300c 	ldr	r3, [fp, #-12]
  111a4c:	e5c32010 	strb	r2, [r3, #16]
  111a50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111a54:	e3530000 	cmp	r3, #0
  111a58:	0a000003 	beq	111a6c <lwip_connect+0xf4>
  111a5c:	eb009d0f 	bl	138ea0 <__errno_location>
  111a60:	e1a02000 	mov	r2, r0
  111a64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111a68:	e5823000 	str	r3, [r2]
  111a6c:	e3e03000 	mvn	r3, #0
  111a70:	ea000032 	b	111b40 <lwip_connect+0x1c8>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
  111a74:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111a78:	e5933004 	ldr	r3, [r3, #4]
  111a7c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  111a80:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111a84:	e1d330b2 	ldrh	r3, [r3, #2]
  111a88:	e1a00003 	mov	r0, r3
  111a8c:	eb0012c1 	bl	116598 <lwip_htons>
  111a90:	e1a03000 	mov	r3, r0
  111a94:	e14b30be 	strh	r3, [fp, #-14]
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
  111a98:	e51b300c 	ldr	r3, [fp, #-12]
  111a9c:	e5933000 	ldr	r3, [r3]
  111aa0:	e15b20be 	ldrh	r2, [fp, #-14]
  111aa4:	e24b1020 	sub	r1, fp, #32
  111aa8:	e1a00003 	mov	r0, r3
  111aac:	ebffe6d8 	bl	10b614 <netconn_connect>
  111ab0:	e1a03000 	mov	r3, r0
  111ab4:	e54b3005 	strb	r3, [fp, #-5]
  }

  if (err != ERR_OK) {
  111ab8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  111abc:	e3530000 	cmp	r3, #0
  111ac0:	0a000010 	beq	111b08 <lwip_connect+0x190>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  111ac4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  111ac8:	e1a00003 	mov	r0, r3
  111acc:	ebfff8dc 	bl	10fe44 <err_to_errno>
  111ad0:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  111ad4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111ad8:	e6ef2073 	uxtb	r2, r3
  111adc:	e51b300c 	ldr	r3, [fp, #-12]
  111ae0:	e5c32010 	strb	r2, [r3, #16]
  111ae4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111ae8:	e3530000 	cmp	r3, #0
  111aec:	0a000003 	beq	111b00 <lwip_connect+0x188>
  111af0:	eb009cea 	bl	138ea0 <__errno_location>
  111af4:	e1a02000 	mov	r2, r0
  111af8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111afc:	e5823000 	str	r3, [r2]
    return -1;
  111b00:	e3e03000 	mvn	r3, #0
  111b04:	ea00000d 	b	111b40 <lwip_connect+0x1c8>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  111b08:	e3a03000 	mov	r3, #0
  111b0c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  111b10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111b14:	e6ef2073 	uxtb	r2, r3
  111b18:	e51b300c 	ldr	r3, [fp, #-12]
  111b1c:	e5c32010 	strb	r2, [r3, #16]
  111b20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111b24:	e3530000 	cmp	r3, #0
  111b28:	0a000003 	beq	111b3c <lwip_connect+0x1c4>
  111b2c:	eb009cdb 	bl	138ea0 <__errno_location>
  111b30:	e1a02000 	mov	r2, r0
  111b34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111b38:	e5823000 	str	r3, [r2]
  return 0;
  111b3c:	e3a03000 	mov	r3, #0
}
  111b40:	e1a00003 	mov	r0, r3
  111b44:	e24bd004 	sub	sp, fp, #4
  111b48:	e8bd8800 	pop	{fp, pc}

00111b4c <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
  111b4c:	e92d4800 	push	{fp, lr}
  111b50:	e28db004 	add	fp, sp, #4
  111b54:	e24dd020 	sub	sp, sp, #32
  111b58:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  111b5c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
  111b60:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  111b64:	ebfffcde 	bl	110ee4 <get_socket>
  111b68:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  111b6c:	e51b3008 	ldr	r3, [fp, #-8]
  111b70:	e3530000 	cmp	r3, #0
  111b74:	1a000001 	bne	111b80 <lwip_listen+0x34>
    return -1;
  111b78:	e3e03000 	mvn	r3, #0
  111b7c:	ea000047 	b	111ca0 <lwip_listen+0x154>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
  111b80:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111b84:	e35300fe 	cmp	r3, #254	; 0xfe
  111b88:	ca000002 	bgt	111b98 <lwip_listen+0x4c>
  111b8c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111b90:	e1c33fc3 	bic	r3, r3, r3, asr #31
  111b94:	ea000000 	b	111b9c <lwip_listen+0x50>
  111b98:	e3a030ff 	mov	r3, #255	; 0xff
  111b9c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
  111ba0:	e51b3008 	ldr	r3, [fp, #-8]
  111ba4:	e5933000 	ldr	r3, [r3]
  111ba8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  111bac:	e6ef2072 	uxtb	r2, r2
  111bb0:	e1a01002 	mov	r1, r2
  111bb4:	e1a00003 	mov	r0, r3
  111bb8:	ebffe6dc 	bl	10b730 <netconn_listen_with_backlog>
  111bbc:	e1a03000 	mov	r3, r0
  111bc0:	e54b3009 	strb	r3, [fp, #-9]

  if (err != ERR_OK) {
  111bc4:	e15b30d9 	ldrsb	r3, [fp, #-9]
  111bc8:	e3530000 	cmp	r3, #0
  111bcc:	0a000025 	beq	111c68 <lwip_listen+0x11c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  111bd0:	e51b3008 	ldr	r3, [fp, #-8]
  111bd4:	e5933000 	ldr	r3, [r3]
  111bd8:	e5933000 	ldr	r3, [r3]
  111bdc:	e20330f0 	and	r3, r3, #240	; 0xf0
  111be0:	e3530010 	cmp	r3, #16
  111be4:	0a00000e 	beq	111c24 <lwip_listen+0xd8>
      sock_set_errno(sock, EOPNOTSUPP);
  111be8:	e3a0305f 	mov	r3, #95	; 0x5f
  111bec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  111bf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111bf4:	e6ef2073 	uxtb	r2, r3
  111bf8:	e51b3008 	ldr	r3, [fp, #-8]
  111bfc:	e5c32010 	strb	r2, [r3, #16]
  111c00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111c04:	e3530000 	cmp	r3, #0
  111c08:	0a000003 	beq	111c1c <lwip_listen+0xd0>
  111c0c:	eb009ca3 	bl	138ea0 <__errno_location>
  111c10:	e1a02000 	mov	r2, r0
  111c14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111c18:	e5823000 	str	r3, [r2]
      return -1;
  111c1c:	e3e03000 	mvn	r3, #0
  111c20:	ea00001e 	b	111ca0 <lwip_listen+0x154>
    }
    sock_set_errno(sock, err_to_errno(err));
  111c24:	e15b30d9 	ldrsb	r3, [fp, #-9]
  111c28:	e1a00003 	mov	r0, r3
  111c2c:	ebfff884 	bl	10fe44 <err_to_errno>
  111c30:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111c34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111c38:	e6ef2073 	uxtb	r2, r3
  111c3c:	e51b3008 	ldr	r3, [fp, #-8]
  111c40:	e5c32010 	strb	r2, [r3, #16]
  111c44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111c48:	e3530000 	cmp	r3, #0
  111c4c:	0a000003 	beq	111c60 <lwip_listen+0x114>
  111c50:	eb009c92 	bl	138ea0 <__errno_location>
  111c54:	e1a02000 	mov	r2, r0
  111c58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111c5c:	e5823000 	str	r3, [r2]
    return -1;
  111c60:	e3e03000 	mvn	r3, #0
  111c64:	ea00000d 	b	111ca0 <lwip_listen+0x154>
  }

  sock_set_errno(sock, 0);
  111c68:	e3a03000 	mov	r3, #0
  111c6c:	e50b3010 	str	r3, [fp, #-16]
  111c70:	e51b3010 	ldr	r3, [fp, #-16]
  111c74:	e6ef2073 	uxtb	r2, r3
  111c78:	e51b3008 	ldr	r3, [fp, #-8]
  111c7c:	e5c32010 	strb	r2, [r3, #16]
  111c80:	e51b3010 	ldr	r3, [fp, #-16]
  111c84:	e3530000 	cmp	r3, #0
  111c88:	0a000003 	beq	111c9c <lwip_listen+0x150>
  111c8c:	eb009c83 	bl	138ea0 <__errno_location>
  111c90:	e1a02000 	mov	r2, r0
  111c94:	e51b3010 	ldr	r3, [fp, #-16]
  111c98:	e5823000 	str	r3, [r2]
  return 0;
  111c9c:	e3a03000 	mov	r3, #0
}
  111ca0:	e1a00003 	mov	r0, r3
  111ca4:	e24bd004 	sub	sp, fp, #4
  111ca8:	e8bd8800 	pop	{fp, pc}

00111cac <lwip_recvfrom>:

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
  111cac:	e92d4810 	push	{r4, fp, lr}
  111cb0:	e28db008 	add	fp, sp, #8
  111cb4:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  111cb8:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  111cbc:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  111cc0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  111cc4:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
  struct lwip_sock *sock;
  void             *buf = NULL;
  111cc8:	e3a03000 	mov	r3, #0
  111ccc:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
  111cd0:	e3a03000 	mov	r3, #0
  111cd4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  u8_t             done = 0;
  111cd8:	e3a03000 	mov	r3, #0
  111cdc:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  err_t            err;
  
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
  111ce0:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  111ce4:	ebfffc7e 	bl	110ee4 <get_socket>
  111ce8:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
  if (!sock) {
  111cec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111cf0:	e3530000 	cmp	r3, #0
  111cf4:	1a000001 	bne	111d00 <lwip_recvfrom+0x54>
    return -1;
  111cf8:	e3e03000 	mvn	r3, #0
  111cfc:	ea00015b 	b	112270 <lwip_recvfrom+0x5c4>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
  111d00:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d04:	e5933004 	ldr	r3, [r3, #4]
  111d08:	e3530000 	cmp	r3, #0
  111d0c:	0a000003 	beq	111d20 <lwip_recvfrom+0x74>
      buf = sock->lastdata;
  111d10:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d14:	e5933004 	ldr	r3, [r3, #4]
  111d18:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  111d1c:	ea00007d 	b	111f18 <lwip_recvfrom+0x26c>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  111d20:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  111d24:	e2033008 	and	r3, r3, #8
  111d28:	e3530000 	cmp	r3, #0
  111d2c:	1a000005 	bne	111d48 <lwip_recvfrom+0x9c>
  111d30:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d34:	e5933000 	ldr	r3, [r3]
  111d38:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  111d3c:	e2033002 	and	r3, r3, #2
  111d40:	e3530000 	cmp	r3, #0
  111d44:	0a00001b 	beq	111db8 <lwip_recvfrom+0x10c>
          (sock->rcvevent <= 0)) {
  111d48:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d4c:	e1d330fa 	ldrsh	r3, [r3, #10]
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  111d50:	e3530000 	cmp	r3, #0
  111d54:	ca000017 	bgt	111db8 <lwip_recvfrom+0x10c>
        if (off > 0) {
  111d58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111d5c:	e3530000 	cmp	r3, #0
  111d60:	da00000e 	ble	111da0 <lwip_recvfrom+0xf4>
          /* already received data, return that */
          sock_set_errno(sock, 0);
  111d64:	e3a03000 	mov	r3, #0
  111d68:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  111d6c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111d70:	e6ef2073 	uxtb	r2, r3
  111d74:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d78:	e5c32010 	strb	r2, [r3, #16]
  111d7c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111d80:	e3530000 	cmp	r3, #0
  111d84:	0a000003 	beq	111d98 <lwip_recvfrom+0xec>
  111d88:	eb009c44 	bl	138ea0 <__errno_location>
  111d8c:	e1a02000 	mov	r2, r0
  111d90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111d94:	e5823000 	str	r3, [r2]
          return off;
  111d98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111d9c:	ea000133 	b	112270 <lwip_recvfrom+0x5c4>
        }

        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        set_errno(EWOULDBLOCK);
  111da0:	eb009c3e 	bl	138ea0 <__errno_location>
  111da4:	e1a02000 	mov	r2, r0
  111da8:	e3a0300b 	mov	r3, #11
  111dac:	e5823000 	str	r3, [r2]
        return -1;
  111db0:	e3e03000 	mvn	r3, #0
  111db4:	ea00012d 	b	112270 <lwip_recvfrom+0x5c4>
      }
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111db8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111dbc:	e5933000 	ldr	r3, [r3]
  111dc0:	e5933000 	ldr	r3, [r3]
  111dc4:	e20330f0 	and	r3, r3, #240	; 0xf0
  111dc8:	e3530010 	cmp	r3, #16
  111dcc:	1a000008 	bne	111df4 <lwip_recvfrom+0x148>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
  111dd0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111dd4:	e5933000 	ldr	r3, [r3]
  111dd8:	e24b203c 	sub	r2, fp, #60	; 0x3c
  111ddc:	e1a01002 	mov	r1, r2
  111de0:	e1a00003 	mov	r0, r3
  111de4:	ebffe794 	bl	10bc3c <netconn_recv_tcp_pbuf>
  111de8:	e1a03000 	mov	r3, r0
  111dec:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
  111df0:	ea000007 	b	111e14 <lwip_recvfrom+0x168>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
  111df4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111df8:	e5933000 	ldr	r3, [r3]
  111dfc:	e24b203c 	sub	r2, fp, #60	; 0x3c
  111e00:	e1a01002 	mov	r1, r2
  111e04:	e1a00003 	mov	r0, r3
  111e08:	ebffe7a8 	bl	10bcb0 <netconn_recv>
  111e0c:	e1a03000 	mov	r3, r0
  111e10:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
  111e14:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111e18:	e3530000 	cmp	r3, #0
  111e1c:	0a000030 	beq	111ee4 <lwip_recvfrom+0x238>
        if (off > 0) {
  111e20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111e24:	e3530000 	cmp	r3, #0
  111e28:	da000017 	ble	111e8c <lwip_recvfrom+0x1e0>
          if (err == ERR_CLSD) {
  111e2c:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111e30:	e373000f 	cmn	r3, #15
  111e34:	1a000005 	bne	111e50 <lwip_recvfrom+0x1a4>
            /* closed but already received data, ensure select gets the FIN, too */
            event_callback(sock->conn, NETCONN_EVT_RCVPLUS, 0);
  111e38:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e3c:	e5933000 	ldr	r3, [r3]
  111e40:	e3a02000 	mov	r2, #0
  111e44:	e3a01000 	mov	r1, #0
  111e48:	e1a00003 	mov	r0, r3
  111e4c:	eb0006bc 	bl	113944 <event_callback>
          }
          /* already received data, return that */
          sock_set_errno(sock, 0);
  111e50:	e3a03000 	mov	r3, #0
  111e54:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  111e58:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111e5c:	e6ef2073 	uxtb	r2, r3
  111e60:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e64:	e5c32010 	strb	r2, [r3, #16]
  111e68:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111e6c:	e3530000 	cmp	r3, #0
  111e70:	0a000003 	beq	111e84 <lwip_recvfrom+0x1d8>
  111e74:	eb009c09 	bl	138ea0 <__errno_location>
  111e78:	e1a02000 	mov	r2, r0
  111e7c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111e80:	e5823000 	str	r3, [r2]
          return off;
  111e84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111e88:	ea0000f8 	b	112270 <lwip_recvfrom+0x5c4>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
  111e8c:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111e90:	e1a00003 	mov	r0, r3
  111e94:	ebfff7ea 	bl	10fe44 <err_to_errno>
  111e98:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  111e9c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111ea0:	e6ef2073 	uxtb	r2, r3
  111ea4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ea8:	e5c32010 	strb	r2, [r3, #16]
  111eac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111eb0:	e3530000 	cmp	r3, #0
  111eb4:	0a000003 	beq	111ec8 <lwip_recvfrom+0x21c>
  111eb8:	eb009bf8 	bl	138ea0 <__errno_location>
  111ebc:	e1a02000 	mov	r2, r0
  111ec0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111ec4:	e5823000 	str	r3, [r2]
        if (err == ERR_CLSD) {
  111ec8:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111ecc:	e373000f 	cmn	r3, #15
  111ed0:	1a000001 	bne	111edc <lwip_recvfrom+0x230>
          return 0;
  111ed4:	e3a03000 	mov	r3, #0
  111ed8:	ea0000e4 	b	112270 <lwip_recvfrom+0x5c4>
        } else {
          return -1;
  111edc:	e3e03000 	mvn	r3, #0
  111ee0:	ea0000e2 	b	112270 <lwip_recvfrom+0x5c4>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
  111ee4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111ee8:	e3530000 	cmp	r3, #0
  111eec:	1a000006 	bne	111f0c <lwip_recvfrom+0x260>
  111ef0:	e3060df0 	movw	r0, #28144	; 0x6df0
  111ef4:	e3400014 	movt	r0, #20
  111ef8:	ebffc485 	bl	103114 <rt_kprintf>
  111efc:	e3a01fcf 	mov	r1, #828	; 0x33c
  111f00:	e3060d38 	movw	r0, #27960	; 0x6d38
  111f04:	e3400014 	movt	r0, #20
  111f08:	ebffe469 	bl	10b0b4 <sys_arch_assert>
      sock->lastdata = buf;
  111f0c:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  111f10:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f14:	e5832004 	str	r2, [r3, #4]
    }

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111f18:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f1c:	e5933000 	ldr	r3, [r3]
  111f20:	e5933000 	ldr	r3, [r3]
  111f24:	e20330f0 	and	r3, r3, #240	; 0xf0
  111f28:	e3530010 	cmp	r3, #16
  111f2c:	1a000002 	bne	111f3c <lwip_recvfrom+0x290>
      p = (struct pbuf *)buf;
  111f30:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111f34:	e50b3010 	str	r3, [fp, #-16]
  111f38:	ea000002 	b	111f48 <lwip_recvfrom+0x29c>
    } else {
      p = ((struct netbuf *)buf)->p;
  111f3c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111f40:	e5933000 	ldr	r3, [r3]
  111f44:	e50b3010 	str	r3, [fp, #-16]
    }
    buflen = p->tot_len;
  111f48:	e51b3010 	ldr	r3, [fp, #-16]
  111f4c:	e1d330b8 	ldrh	r3, [r3, #8]
  111f50:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
  111f54:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f58:	e1d330b8 	ldrh	r3, [r3, #8]
  111f5c:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  111f60:	e0423003 	sub	r3, r2, r3
  111f64:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce

    if (len > buflen) {
  111f68:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  111f6c:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  111f70:	e1520003 	cmp	r2, r3
  111f74:	9a000002 	bls	111f84 <lwip_recvfrom+0x2d8>
      copylen = buflen;
  111f78:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  111f7c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  111f80:	ea000001 	b	111f8c <lwip_recvfrom+0x2e0>
    } else {
      copylen = (u16_t)len;
  111f84:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111f88:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
  111f8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111f90:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  111f94:	e0821003 	add	r1, r2, r3
  111f98:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f9c:	e1d330b8 	ldrh	r3, [r3, #8]
  111fa0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  111fa4:	e51b0010 	ldr	r0, [fp, #-16]
  111fa8:	eb0025bc 	bl	11b6a0 <pbuf_copy_partial>

    off += copylen;
  111fac:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111fb0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  111fb4:	e0823003 	add	r3, r2, r3
  111fb8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111fbc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111fc0:	e5933000 	ldr	r3, [r3]
  111fc4:	e5933000 	ldr	r3, [r3]
  111fc8:	e20330f0 	and	r3, r3, #240	; 0xf0
  111fcc:	e3530010 	cmp	r3, #16
  111fd0:	1a000021 	bne	11205c <lwip_recvfrom+0x3b0>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
  111fd4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111fd8:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  111fdc:	e1520003 	cmp	r2, r3
  111fe0:	2a000006 	bcs	112000 <lwip_recvfrom+0x354>
  111fe4:	e3060dfc 	movw	r0, #28156	; 0x6dfc
  111fe8:	e3400014 	movt	r0, #20
  111fec:	ebffc448 	bl	103114 <rt_kprintf>
  111ff0:	e3a01fd6 	mov	r1, #856	; 0x358
  111ff4:	e3060d38 	movw	r0, #27960	; 0x6d38
  111ff8:	e3400014 	movt	r0, #20
  111ffc:	ebffe42c 	bl	10b0b4 <sys_arch_assert>
      len -= copylen;
  112000:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  112004:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  112008:	e0423003 	sub	r3, r2, r3
  11200c:	e50b3060 	str	r3, [fp, #-96]	; 0xffffffa0
      if ((len <= 0) ||
  112010:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  112014:	e3530000 	cmp	r3, #0
  112018:	0a00000c 	beq	112050 <lwip_recvfrom+0x3a4>
          (p->flags & PBUF_FLAG_PUSH) ||
  11201c:	e51b3010 	ldr	r3, [fp, #-16]
  112020:	e5d3300d 	ldrb	r3, [r3, #13]
  112024:	e2033001 	and	r3, r3, #1
      if ((len <= 0) ||
  112028:	e3530000 	cmp	r3, #0
  11202c:	1a000007 	bne	112050 <lwip_recvfrom+0x3a4>
          (sock->rcvevent <= 0) ||
  112030:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112034:	e1d330fa 	ldrsh	r3, [r3, #10]
          (p->flags & PBUF_FLAG_PUSH) ||
  112038:	e3530000 	cmp	r3, #0
  11203c:	da000003 	ble	112050 <lwip_recvfrom+0x3a4>
          ((flags & MSG_PEEK) != 0)) {
  112040:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  112044:	e2033001 	and	r3, r3, #1
          (sock->rcvevent <= 0) ||
  112048:	e3530000 	cmp	r3, #0
  11204c:	0a000004 	beq	112064 <lwip_recvfrom+0x3b8>
        done = 1;
  112050:	e3a03001 	mov	r3, #1
  112054:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  112058:	ea000001 	b	112064 <lwip_recvfrom+0x3b8>
      }
    } else {
      done = 1;
  11205c:	e3a03001 	mov	r3, #1
  112060:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }

    /* Check to see from where the data was.*/
    if (done) {
  112064:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  112068:	e3530000 	cmp	r3, #0
  11206c:	0a00003f 	beq	112170 <lwip_recvfrom+0x4c4>
#if !SOCKETS_DEBUG
      if (from && fromlen)
  112070:	e59b3004 	ldr	r3, [fp, #4]
  112074:	e3530000 	cmp	r3, #0
  112078:	0a00003c 	beq	112170 <lwip_recvfrom+0x4c4>
  11207c:	e59b3008 	ldr	r3, [fp, #8]
  112080:	e3530000 	cmp	r3, #0
  112084:	0a000039 	beq	112170 <lwip_recvfrom+0x4c4>
        u16_t port;
        ip_addr_t tmpaddr;
        ip_addr_t *fromaddr;
        union sockaddr_aligned saddr;
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  112088:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11208c:	e5933000 	ldr	r3, [r3]
  112090:	e5933000 	ldr	r3, [r3]
  112094:	e20330f0 	and	r3, r3, #240	; 0xf0
  112098:	e3530010 	cmp	r3, #16
  11209c:	1a000008 	bne	1120c4 <lwip_recvfrom+0x418>
          fromaddr = &tmpaddr;
  1120a0:	e24b3044 	sub	r3, fp, #68	; 0x44
  1120a4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          netconn_getaddr(sock->conn, fromaddr, &port, 0);
  1120a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1120ac:	e5930000 	ldr	r0, [r3]
  1120b0:	e24b203e 	sub	r2, fp, #62	; 0x3e
  1120b4:	e3a03000 	mov	r3, #0
  1120b8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1120bc:	ebffe4ec 	bl	10b474 <netconn_getaddr>
  1120c0:	ea000005 	b	1120dc <lwip_recvfrom+0x430>
        } else {
          port = netbuf_fromport((struct netbuf *)buf);
  1120c4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1120c8:	e1d330bc 	ldrh	r3, [r3, #12]
  1120cc:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
          fromaddr = netbuf_fromaddr((struct netbuf *)buf);
  1120d0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1120d4:	e2833008 	add	r3, r3, #8
  1120d8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
          IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
        }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

        IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
  1120dc:	e24b3054 	sub	r3, fp, #84	; 0x54
  1120e0:	e3a02010 	mov	r2, #16
  1120e4:	e5c32000 	strb	r2, [r3]
  1120e8:	e24b3054 	sub	r3, fp, #84	; 0x54
  1120ec:	e3a02002 	mov	r2, #2
  1120f0:	e5c32001 	strb	r2, [r3, #1]
  1120f4:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  1120f8:	e24b4054 	sub	r4, fp, #84	; 0x54
  1120fc:	e1a00003 	mov	r0, r3
  112100:	eb001124 	bl	116598 <lwip_htons>
  112104:	e1a03000 	mov	r3, r0
  112108:	e1c430b2 	strh	r3, [r4, #2]
  11210c:	e24b3054 	sub	r3, fp, #84	; 0x54
  112110:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  112114:	e5922000 	ldr	r2, [r2]
  112118:	e5832004 	str	r2, [r3, #4]
  11211c:	e24b3054 	sub	r3, fp, #84	; 0x54
  112120:	e2833008 	add	r3, r3, #8
  112124:	e3a02008 	mov	r2, #8
  112128:	e3a01000 	mov	r1, #0
  11212c:	e1a00003 	mov	r0, r3
  112130:	eb00bc41 	bl	14123c <memset>
        LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, off));
#if SOCKETS_DEBUG
        if (from && fromlen)
#endif /* SOCKETS_DEBUG */
        {
          if (*fromlen > saddr.sa.sa_len) {
  112134:	e59b3008 	ldr	r3, [fp, #8]
  112138:	e5933000 	ldr	r3, [r3]
  11213c:	e55b2054 	ldrb	r2, [fp, #-84]	; 0xffffffac
  112140:	e1530002 	cmp	r3, r2
  112144:	9a000003 	bls	112158 <lwip_recvfrom+0x4ac>
            *fromlen = saddr.sa.sa_len;
  112148:	e55b3054 	ldrb	r3, [fp, #-84]	; 0xffffffac
  11214c:	e1a02003 	mov	r2, r3
  112150:	e59b3008 	ldr	r3, [fp, #8]
  112154:	e5832000 	str	r2, [r3]
          }
          MEMCPY(from, &saddr, *fromlen);
  112158:	e59b3008 	ldr	r3, [fp, #8]
  11215c:	e5932000 	ldr	r2, [r3]
  112160:	e24b3054 	sub	r3, fp, #84	; 0x54
  112164:	e1a01003 	mov	r1, r3
  112168:	e59b0004 	ldr	r0, [fp, #4]
  11216c:	eb00bafa 	bl	140d5c <memcpy>
        }
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
  112170:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  112174:	e2033001 	and	r3, r3, #1
  112178:	e3530000 	cmp	r3, #0
  11217c:	1a00002a 	bne	11222c <lwip_recvfrom+0x580>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
  112180:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112184:	e5933000 	ldr	r3, [r3]
  112188:	e5933000 	ldr	r3, [r3]
  11218c:	e20330f0 	and	r3, r3, #240	; 0xf0
  112190:	e3530010 	cmp	r3, #16
  112194:	1a00000f 	bne	1121d8 <lwip_recvfrom+0x52c>
  112198:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  11219c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1121a0:	e0423003 	sub	r3, r2, r3
  1121a4:	e3530000 	cmp	r3, #0
  1121a8:	da00000a 	ble	1121d8 <lwip_recvfrom+0x52c>
        sock->lastdata = buf;
  1121ac:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  1121b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1121b4:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset += copylen;
  1121b8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1121bc:	e1d320b8 	ldrh	r2, [r3, #8]
  1121c0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1121c4:	e0823003 	add	r3, r2, r3
  1121c8:	e6ff2073 	uxth	r2, r3
  1121cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1121d0:	e1c320b8 	strh	r2, [r3, #8]
  1121d4:	ea000014 	b	11222c <lwip_recvfrom+0x580>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
  1121d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1121dc:	e3a02000 	mov	r2, #0
  1121e0:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset = 0;
  1121e4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1121e8:	e3a02000 	mov	r2, #0
  1121ec:	e1c320b8 	strh	r2, [r3, #8]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  1121f0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1121f4:	e5933000 	ldr	r3, [r3]
  1121f8:	e5933000 	ldr	r3, [r3]
  1121fc:	e20330f0 	and	r3, r3, #240	; 0xf0
  112200:	e3530010 	cmp	r3, #16
  112204:	1a000003 	bne	112218 <lwip_recvfrom+0x56c>
          pbuf_free((struct pbuf *)buf);
  112208:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  11220c:	e1a00003 	mov	r0, r3
  112210:	eb002317 	bl	11ae74 <pbuf_free>
  112214:	ea000002 	b	112224 <lwip_recvfrom+0x578>
        } else {
          netbuf_delete((struct netbuf *)buf);
  112218:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  11221c:	e1a00003 	mov	r0, r3
  112220:	ebfff732 	bl	10fef0 <netbuf_delete>
        }
        buf = NULL;
  112224:	e3a03000 	mov	r3, #0
  112228:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
      }
    }
  } while (!done);
  11222c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  112230:	e3530000 	cmp	r3, #0
  112234:	0afffeb1 	beq	111d00 <lwip_recvfrom+0x54>

  sock_set_errno(sock, 0);
  112238:	e3a03000 	mov	r3, #0
  11223c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  112240:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112244:	e6ef2073 	uxtb	r2, r3
  112248:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11224c:	e5c32010 	strb	r2, [r3, #16]
  112250:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112254:	e3530000 	cmp	r3, #0
  112258:	0a000003 	beq	11226c <lwip_recvfrom+0x5c0>
  11225c:	eb009b0f 	bl	138ea0 <__errno_location>
  112260:	e1a02000 	mov	r2, r0
  112264:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112268:	e5823000 	str	r3, [r2]
  return off;
  11226c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  112270:	e1a00003 	mov	r0, r3
  112274:	e24bd008 	sub	sp, fp, #8
  112278:	e8bd8810 	pop	{r4, fp, pc}

0011227c <lwip_read>:

int
lwip_read(int s, void *mem, size_t len)
{
  11227c:	e92d4800 	push	{fp, lr}
  112280:	e28db004 	add	fp, sp, #4
  112284:	e24dd018 	sub	sp, sp, #24
  112288:	e50b0008 	str	r0, [fp, #-8]
  11228c:	e50b100c 	str	r1, [fp, #-12]
  112290:	e50b2010 	str	r2, [fp, #-16]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
  112294:	e3a03000 	mov	r3, #0
  112298:	e58d3004 	str	r3, [sp, #4]
  11229c:	e3a03000 	mov	r3, #0
  1122a0:	e58d3000 	str	r3, [sp]
  1122a4:	e3a03000 	mov	r3, #0
  1122a8:	e51b2010 	ldr	r2, [fp, #-16]
  1122ac:	e51b100c 	ldr	r1, [fp, #-12]
  1122b0:	e51b0008 	ldr	r0, [fp, #-8]
  1122b4:	ebfffe7c 	bl	111cac <lwip_recvfrom>
  1122b8:	e1a03000 	mov	r3, r0
}
  1122bc:	e1a00003 	mov	r0, r3
  1122c0:	e24bd004 	sub	sp, fp, #4
  1122c4:	e8bd8800 	pop	{fp, pc}

001122c8 <lwip_recv>:

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
  1122c8:	e92d4800 	push	{fp, lr}
  1122cc:	e28db004 	add	fp, sp, #4
  1122d0:	e24dd018 	sub	sp, sp, #24
  1122d4:	e50b0008 	str	r0, [fp, #-8]
  1122d8:	e50b100c 	str	r1, [fp, #-12]
  1122dc:	e50b2010 	str	r2, [fp, #-16]
  1122e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
  1122e4:	e3a03000 	mov	r3, #0
  1122e8:	e58d3004 	str	r3, [sp, #4]
  1122ec:	e3a03000 	mov	r3, #0
  1122f0:	e58d3000 	str	r3, [sp]
  1122f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1122f8:	e51b2010 	ldr	r2, [fp, #-16]
  1122fc:	e51b100c 	ldr	r1, [fp, #-12]
  112300:	e51b0008 	ldr	r0, [fp, #-8]
  112304:	ebfffe68 	bl	111cac <lwip_recvfrom>
  112308:	e1a03000 	mov	r3, r0
}
  11230c:	e1a00003 	mov	r0, r3
  112310:	e24bd004 	sub	sp, fp, #4
  112314:	e8bd8800 	pop	{fp, pc}

00112318 <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
  112318:	e92d4800 	push	{fp, lr}
  11231c:	e28db004 	add	fp, sp, #4
  112320:	e24dd028 	sub	sp, sp, #40	; 0x28
  112324:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  112328:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11232c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  112330:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
  112334:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  112338:	ebfffae9 	bl	110ee4 <get_socket>
  11233c:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  112340:	e51b3008 	ldr	r3, [fp, #-8]
  112344:	e3530000 	cmp	r3, #0
  112348:	1a000001 	bne	112354 <lwip_send+0x3c>
    return -1;
  11234c:	e3e03000 	mvn	r3, #0
  112350:	ea000041 	b	11245c <lwip_send+0x144>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  112354:	e51b3008 	ldr	r3, [fp, #-8]
  112358:	e5933000 	ldr	r3, [r3]
  11235c:	e5933000 	ldr	r3, [r3]
  112360:	e20330f0 	and	r3, r3, #240	; 0xf0
  112364:	e3530010 	cmp	r3, #16
  112368:	0a00000a 	beq	112398 <lwip_send+0x80>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
  11236c:	e3a03000 	mov	r3, #0
  112370:	e58d3004 	str	r3, [sp, #4]
  112374:	e3a03000 	mov	r3, #0
  112378:	e58d3000 	str	r3, [sp]
  11237c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112380:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  112384:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  112388:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11238c:	eb0001b1 	bl	112a58 <lwip_sendto>
  112390:	e1a03000 	mov	r3, r0
  112394:	ea000030 	b	11245c <lwip_send+0x144>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  112398:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11239c:	e1a031c3 	asr	r3, r3, #3
  1123a0:	e6af3073 	sxtb	r3, r3
  1123a4:	e2033002 	and	r3, r3, #2
  1123a8:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  1123ac:	e3833001 	orr	r3, r3, #1
  1123b0:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  1123b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1123b8:	e1a030c3 	asr	r3, r3, #1
  1123bc:	e6af3073 	sxtb	r3, r3
  1123c0:	e2033004 	and	r3, r3, #4
  1123c4:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1123c8:	e1823003 	orr	r3, r2, r3
  1123cc:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  1123d0:	e54b3009 	strb	r3, [fp, #-9]
  written = 0;
  1123d4:	e3a03000 	mov	r3, #0
  1123d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
  1123dc:	e51b3008 	ldr	r3, [fp, #-8]
  1123e0:	e5930000 	ldr	r0, [r3]
  1123e4:	e55b2009 	ldrb	r2, [fp, #-9]
  1123e8:	e24b3014 	sub	r3, fp, #20
  1123ec:	e58d3000 	str	r3, [sp]
  1123f0:	e1a03002 	mov	r3, r2
  1123f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1123f8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1123fc:	ebffe6ce 	bl	10bf3c <netconn_write_partly>
  112400:	e1a03000 	mov	r3, r0
  112404:	e54b300a 	strb	r3, [fp, #-10]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
  112408:	e15b30da 	ldrsb	r3, [fp, #-10]
  11240c:	e1a00003 	mov	r0, r3
  112410:	ebfff68b 	bl	10fe44 <err_to_errno>
  112414:	e50b0010 	str	r0, [fp, #-16]
  112418:	e51b3010 	ldr	r3, [fp, #-16]
  11241c:	e6ef2073 	uxtb	r2, r3
  112420:	e51b3008 	ldr	r3, [fp, #-8]
  112424:	e5c32010 	strb	r2, [r3, #16]
  112428:	e51b3010 	ldr	r3, [fp, #-16]
  11242c:	e3530000 	cmp	r3, #0
  112430:	0a000003 	beq	112444 <lwip_send+0x12c>
  112434:	eb009a99 	bl	138ea0 <__errno_location>
  112438:	e1a02000 	mov	r2, r0
  11243c:	e51b3010 	ldr	r3, [fp, #-16]
  112440:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? (int)written : -1);
  112444:	e15b30da 	ldrsb	r3, [fp, #-10]
  112448:	e3530000 	cmp	r3, #0
  11244c:	1a000001 	bne	112458 <lwip_send+0x140>
  112450:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112454:	ea000000 	b	11245c <lwip_send+0x144>
  112458:	e3e03000 	mvn	r3, #0
}
  11245c:	e1a00003 	mov	r0, r3
  112460:	e24bd004 	sub	sp, fp, #4
  112464:	e8bd8800 	pop	{fp, pc}

00112468 <lwip_sendmsg>:

int
lwip_sendmsg(int s, const struct msghdr *msg, int flags)
{
  112468:	e92d4800 	push	{fp, lr}
  11246c:	e28db004 	add	fp, sp, #4
  112470:	e24dd058 	sub	sp, sp, #88	; 0x58
  112474:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
  112478:	e50b104c 	str	r1, [fp, #-76]	; 0xffffffb4
  11247c:	e50b2050 	str	r2, [fp, #-80]	; 0xffffffb0
  int i;
#if LWIP_TCP
  u8_t write_flags;
  size_t written;
#endif
  int size = 0;
  112480:	e3a03000 	mov	r3, #0
  112484:	e50b300c 	str	r3, [fp, #-12]
  err_t err = ERR_OK;
  112488:	e3a03000 	mov	r3, #0
  11248c:	e54b300d 	strb	r3, [fp, #-13]

  sock = get_socket(s);
  112490:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  112494:	ebfffa92 	bl	110ee4 <get_socket>
  112498:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (!sock) {
  11249c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1124a0:	e3530000 	cmp	r3, #0
  1124a4:	1a000001 	bne	1124b0 <lwip_sendmsg+0x48>
    return -1;
  1124a8:	e3e03000 	mvn	r3, #0
  1124ac:	ea000166 	b	112a4c <lwip_sendmsg+0x5e4>
  }

  LWIP_ERROR("lwip_sendmsg: invalid msghdr", msg != NULL,
  1124b0:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1124b4:	e3530000 	cmp	r3, #0
  1124b8:	1a000016 	bne	112518 <lwip_sendmsg+0xb0>
  1124bc:	e3060e24 	movw	r0, #28196	; 0x6e24
  1124c0:	e3400014 	movt	r0, #20
  1124c4:	ebffc312 	bl	103114 <rt_kprintf>
  1124c8:	e30013eb 	movw	r1, #1003	; 0x3eb
  1124cc:	e3060d38 	movw	r0, #27960	; 0x6d38
  1124d0:	e3400014 	movt	r0, #20
  1124d4:	ebffe2f6 	bl	10b0b4 <sys_arch_assert>
  1124d8:	e3e0000f 	mvn	r0, #15
  1124dc:	ebfff658 	bl	10fe44 <err_to_errno>
  1124e0:	e50b003c 	str	r0, [fp, #-60]	; 0xffffffc4
  1124e4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1124e8:	e6ef2073 	uxtb	r2, r3
  1124ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1124f0:	e5c32010 	strb	r2, [r3, #16]
  1124f4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1124f8:	e3530000 	cmp	r3, #0
  1124fc:	0a000003 	beq	112510 <lwip_sendmsg+0xa8>
  112500:	eb009a66 	bl	138ea0 <__errno_location>
  112504:	e1a02000 	mov	r2, r0
  112508:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  11250c:	e5823000 	str	r3, [r2]
  112510:	e3e03000 	mvn	r3, #0
  112514:	ea00014c 	b	112a4c <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  LWIP_UNUSED_ARG(msg->msg_control);
  LWIP_UNUSED_ARG(msg->msg_controllen);
  LWIP_UNUSED_ARG(msg->msg_flags);
  LWIP_ERROR("lwip_sendmsg: invalid msghdr iov", (msg->msg_iov != NULL && msg->msg_iovlen != 0),
  112518:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11251c:	e5933008 	ldr	r3, [r3, #8]
  112520:	e3530000 	cmp	r3, #0
  112524:	0a000003 	beq	112538 <lwip_sendmsg+0xd0>
  112528:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11252c:	e593300c 	ldr	r3, [r3, #12]
  112530:	e3530000 	cmp	r3, #0
  112534:	1a000016 	bne	112594 <lwip_sendmsg+0x12c>
  112538:	e3060e44 	movw	r0, #28228	; 0x6e44
  11253c:	e3400014 	movt	r0, #20
  112540:	ebffc2f3 	bl	103114 <rt_kprintf>
  112544:	e30013f1 	movw	r1, #1009	; 0x3f1
  112548:	e3060d38 	movw	r0, #27960	; 0x6d38
  11254c:	e3400014 	movt	r0, #20
  112550:	ebffe2d7 	bl	10b0b4 <sys_arch_assert>
  112554:	e3e0000f 	mvn	r0, #15
  112558:	ebfff639 	bl	10fe44 <err_to_errno>
  11255c:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  112560:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112564:	e6ef2073 	uxtb	r2, r3
  112568:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11256c:	e5c32010 	strb	r2, [r3, #16]
  112570:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112574:	e3530000 	cmp	r3, #0
  112578:	0a000003 	beq	11258c <lwip_sendmsg+0x124>
  11257c:	eb009a47 	bl	138ea0 <__errno_location>
  112580:	e1a02000 	mov	r2, r0
  112584:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112588:	e5823000 	str	r3, [r2]
  11258c:	e3e03000 	mvn	r3, #0
  112590:	ea00012d 	b	112a4c <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  112594:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112598:	e5933000 	ldr	r3, [r3]
  11259c:	e5933000 	ldr	r3, [r3]
  1125a0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1125a4:	e3530010 	cmp	r3, #16
  1125a8:	1a000069 	bne	112754 <lwip_sendmsg+0x2ec>
#if LWIP_TCP
    write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1125ac:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1125b0:	e1a031c3 	asr	r3, r3, #3
  1125b4:	e6af3073 	sxtb	r3, r3
  1125b8:	e2033002 	and	r3, r3, #2
  1125bc:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  1125c0:	e3833001 	orr	r3, r3, #1
  1125c4:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  1125c8:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1125cc:	e1a030c3 	asr	r3, r3, #1
  1125d0:	e6af3073 	sxtb	r3, r3
  1125d4:	e2033004 	and	r3, r3, #4
  1125d8:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1125dc:	e1823003 	orr	r3, r2, r3
  1125e0:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  1125e4:	e54b302d 	strb	r3, [fp, #-45]	; 0xffffffd3

    for (i = 0; i < msg->msg_iovlen; i++) {
  1125e8:	e3a03000 	mov	r3, #0
  1125ec:	e50b3008 	str	r3, [fp, #-8]
  1125f0:	ea000041 	b	1126fc <lwip_sendmsg+0x294>
      u8_t apiflags = write_flags;
  1125f4:	e55b302d 	ldrb	r3, [fp, #-45]	; 0xffffffd3
  1125f8:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      if (i + 1 < msg->msg_iovlen) {
  1125fc:	e51b3008 	ldr	r3, [fp, #-8]
  112600:	e2832001 	add	r2, r3, #1
  112604:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112608:	e593300c 	ldr	r3, [r3, #12]
  11260c:	e1520003 	cmp	r2, r3
  112610:	aa000002 	bge	112620 <lwip_sendmsg+0x1b8>
        apiflags |= NETCONN_MORE;
  112614:	e55b302e 	ldrb	r3, [fp, #-46]	; 0xffffffd2
  112618:	e3833002 	orr	r3, r3, #2
  11261c:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      }
      written = 0;
  112620:	e3a03000 	mov	r3, #0
  112624:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0
      err = netconn_write_partly(sock->conn, msg->msg_iov[i].iov_base, msg->msg_iov[i].iov_len, write_flags, &written);
  112628:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11262c:	e5930000 	ldr	r0, [r3]
  112630:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112634:	e5932008 	ldr	r2, [r3, #8]
  112638:	e51b3008 	ldr	r3, [fp, #-8]
  11263c:	e1a03183 	lsl	r3, r3, #3
  112640:	e0823003 	add	r3, r2, r3
  112644:	e5931000 	ldr	r1, [r3]
  112648:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11264c:	e5932008 	ldr	r2, [r3, #8]
  112650:	e51b3008 	ldr	r3, [fp, #-8]
  112654:	e1a03183 	lsl	r3, r3, #3
  112658:	e0823003 	add	r3, r2, r3
  11265c:	e5932004 	ldr	r2, [r3, #4]
  112660:	e55bc02d 	ldrb	ip, [fp, #-45]	; 0xffffffd3
  112664:	e24b3040 	sub	r3, fp, #64	; 0x40
  112668:	e58d3000 	str	r3, [sp]
  11266c:	e1a0300c 	mov	r3, ip
  112670:	ebffe631 	bl	10bf3c <netconn_write_partly>
  112674:	e1a03000 	mov	r3, r0
  112678:	e54b300d 	strb	r3, [fp, #-13]
      if (err == ERR_OK) {
  11267c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112680:	e3530000 	cmp	r3, #0
  112684:	1a00000d 	bne	1126c0 <lwip_sendmsg+0x258>
        size += written;
  112688:	e51b200c 	ldr	r2, [fp, #-12]
  11268c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  112690:	e0823003 	add	r3, r2, r3
  112694:	e50b300c 	str	r3, [fp, #-12]
        /* check that the entire IO vector was accepected, if not return a partial write */
        if (written != msg->msg_iov[i].iov_len)
  112698:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11269c:	e5932008 	ldr	r2, [r3, #8]
  1126a0:	e51b3008 	ldr	r3, [fp, #-8]
  1126a4:	e1a03183 	lsl	r3, r3, #3
  1126a8:	e0823003 	add	r3, r2, r3
  1126ac:	e5932004 	ldr	r2, [r3, #4]
  1126b0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1126b4:	e1520003 	cmp	r2, r3
  1126b8:	0a00000c 	beq	1126f0 <lwip_sendmsg+0x288>
          break;
  1126bc:	ea000013 	b	112710 <lwip_sendmsg+0x2a8>
      }
      /* none of this IO vector was accepted, but previous was, return partial write and conceal ERR_WOULDBLOCK */
      else if (err == ERR_WOULDBLOCK && size > 0) {
  1126c0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1126c4:	e3730007 	cmn	r3, #7
  1126c8:	1a000005 	bne	1126e4 <lwip_sendmsg+0x27c>
  1126cc:	e51b300c 	ldr	r3, [fp, #-12]
  1126d0:	e3530000 	cmp	r3, #0
  1126d4:	da000002 	ble	1126e4 <lwip_sendmsg+0x27c>
        err = ERR_OK;
  1126d8:	e3a03000 	mov	r3, #0
  1126dc:	e54b300d 	strb	r3, [fp, #-13]
        /* let ERR_WOULDBLOCK persist on the netconn since we are returning ERR_OK */
        break;
  1126e0:	ea00000a 	b	112710 <lwip_sendmsg+0x2a8>
      } else {
        size = -1;
  1126e4:	e3e03000 	mvn	r3, #0
  1126e8:	e50b300c 	str	r3, [fp, #-12]
        break;
  1126ec:	ea000007 	b	112710 <lwip_sendmsg+0x2a8>
    for (i = 0; i < msg->msg_iovlen; i++) {
  1126f0:	e51b3008 	ldr	r3, [fp, #-8]
  1126f4:	e2833001 	add	r3, r3, #1
  1126f8:	e50b3008 	str	r3, [fp, #-8]
  1126fc:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112700:	e593300c 	ldr	r3, [r3, #12]
  112704:	e51b2008 	ldr	r2, [fp, #-8]
  112708:	e1520003 	cmp	r2, r3
  11270c:	baffffb8 	blt	1125f4 <lwip_sendmsg+0x18c>
      }
    }
    sock_set_errno(sock, err_to_errno(err));
  112710:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112714:	e1a00003 	mov	r0, r3
  112718:	ebfff5c9 	bl	10fe44 <err_to_errno>
  11271c:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  112720:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  112724:	e6ef2073 	uxtb	r2, r3
  112728:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11272c:	e5c32010 	strb	r2, [r3, #16]
  112730:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  112734:	e3530000 	cmp	r3, #0
  112738:	0a000003 	beq	11274c <lwip_sendmsg+0x2e4>
  11273c:	eb0099d7 	bl	138ea0 <__errno_location>
  112740:	e1a02000 	mov	r2, r0
  112744:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  112748:	e5823000 	str	r3, [r2]
    return size;
  11274c:	e51b300c 	ldr	r3, [fp, #-12]
  112750:	ea0000bd 	b	112a4c <lwip_sendmsg+0x5e4>
#if LWIP_UDP || LWIP_RAW
  {
    struct netbuf *chain_buf;

    LWIP_UNUSED_ARG(flags);
    LWIP_ERROR("lwip_sendmsg: invalid msghdr name", (((msg->msg_name == NULL) && (msg->msg_namelen == 0)) ||
  112754:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112758:	e5933000 	ldr	r3, [r3]
  11275c:	e3530000 	cmp	r3, #0
  112760:	1a000003 	bne	112774 <lwip_sendmsg+0x30c>
  112764:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112768:	e5933004 	ldr	r3, [r3, #4]
  11276c:	e3530000 	cmp	r3, #0
  112770:	0a00001a 	beq	1127e0 <lwip_sendmsg+0x378>
  112774:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112778:	e5933004 	ldr	r3, [r3, #4]
  11277c:	e3530010 	cmp	r3, #16
  112780:	0a000016 	beq	1127e0 <lwip_sendmsg+0x378>
  112784:	e3060e68 	movw	r0, #28264	; 0x6e68
  112788:	e3400014 	movt	r0, #20
  11278c:	ebffc260 	bl	103114 <rt_kprintf>
  112790:	e300141f 	movw	r1, #1055	; 0x41f
  112794:	e3060d38 	movw	r0, #27960	; 0x6d38
  112798:	e3400014 	movt	r0, #20
  11279c:	ebffe244 	bl	10b0b4 <sys_arch_assert>
  1127a0:	e3e0000f 	mvn	r0, #15
  1127a4:	ebfff5a6 	bl	10fe44 <err_to_errno>
  1127a8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1127ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1127b0:	e6ef2073 	uxtb	r2, r3
  1127b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1127b8:	e5c32010 	strb	r2, [r3, #16]
  1127bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1127c0:	e3530000 	cmp	r3, #0
  1127c4:	0a000003 	beq	1127d8 <lwip_sendmsg+0x370>
  1127c8:	eb0099b4 	bl	138ea0 <__errno_location>
  1127cc:	e1a02000 	mov	r2, r0
  1127d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1127d4:	e5823000 	str	r3, [r2]
  1127d8:	e3e03000 	mvn	r3, #0
  1127dc:	ea00009a 	b	112a4c <lwip_sendmsg+0x5e4>
               IS_SOCK_ADDR_LEN_VALID(msg->msg_namelen)) ,
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    /* initialize chain buffer with destination */
    chain_buf = netbuf_new();
  1127e0:	ebfff5ae 	bl	10fea0 <netbuf_new>
  1127e4:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
    if (!chain_buf) {
  1127e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1127ec:	e3530000 	cmp	r3, #0
  1127f0:	1a00000f 	bne	112834 <lwip_sendmsg+0x3cc>
      sock_set_errno(sock, err_to_errno(ERR_MEM));
  1127f4:	e3e00000 	mvn	r0, #0
  1127f8:	ebfff591 	bl	10fe44 <err_to_errno>
  1127fc:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  112800:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112804:	e6ef2073 	uxtb	r2, r3
  112808:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11280c:	e5c32010 	strb	r2, [r3, #16]
  112810:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112814:	e3530000 	cmp	r3, #0
  112818:	0a000003 	beq	11282c <lwip_sendmsg+0x3c4>
  11281c:	eb00999f 	bl	138ea0 <__errno_location>
  112820:	e1a02000 	mov	r2, r0
  112824:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112828:	e5823000 	str	r3, [r2]
      return -1;
  11282c:	e3e03000 	mvn	r3, #0
  112830:	ea000085 	b	112a4c <lwip_sendmsg+0x5e4>
    }
    if (msg->msg_name) {
  112834:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112838:	e5933000 	ldr	r3, [r3]
  11283c:	e3530000 	cmp	r3, #0
  112840:	0a00000e 	beq	112880 <lwip_sendmsg+0x418>
      u16_t remote_port;
      SOCKADDR_TO_IPADDR_PORT((const struct sockaddr *)msg->msg_name, &chain_buf->addr, remote_port);
  112844:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112848:	e5933000 	ldr	r3, [r3]
  11284c:	e5932004 	ldr	r2, [r3, #4]
  112850:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112854:	e5832008 	str	r2, [r3, #8]
  112858:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11285c:	e5933000 	ldr	r3, [r3]
  112860:	e1d330b2 	ldrh	r3, [r3, #2]
  112864:	e1a00003 	mov	r0, r3
  112868:	eb000f4a 	bl	116598 <lwip_htons>
  11286c:	e1a03000 	mov	r3, r0
  112870:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      netbuf_fromport(chain_buf) = remote_port;
  112874:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112878:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11287c:	e1c320bc 	strh	r2, [r3, #12]
      err = ERR_OK;
    }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
    /* create a chained netbuf from the IO vectors. NOTE: we assemble a pbuf chain
       manually to avoid having to allocate, chain, and delete a netbuf for each iov */
    for (i = 0; i < msg->msg_iovlen; i++) {
  112880:	e3a03000 	mov	r3, #0
  112884:	e50b3008 	str	r3, [fp, #-8]
  112888:	ea000042 	b	112998 <lwip_sendmsg+0x530>
      struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  11288c:	e3a02002 	mov	r2, #2
  112890:	e3a01000 	mov	r1, #0
  112894:	e3a00000 	mov	r0, #0
  112898:	eb001e6e 	bl	11a258 <pbuf_alloc>
  11289c:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
      if (p == NULL) {
  1128a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1128a4:	e3530000 	cmp	r3, #0
  1128a8:	1a000002 	bne	1128b8 <lwip_sendmsg+0x450>
        err = ERR_MEM; /* let netbuf_delete() cleanup chain_buf */
  1128ac:	e3e03000 	mvn	r3, #0
  1128b0:	e54b300d 	strb	r3, [fp, #-13]
        break;
  1128b4:	ea00003c 	b	1129ac <lwip_sendmsg+0x544>
      }
      p->payload = msg->msg_iov[i].iov_base;
  1128b8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1128bc:	e5932008 	ldr	r2, [r3, #8]
  1128c0:	e51b3008 	ldr	r3, [fp, #-8]
  1128c4:	e1a03183 	lsl	r3, r3, #3
  1128c8:	e0823003 	add	r3, r2, r3
  1128cc:	e5932000 	ldr	r2, [r3]
  1128d0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1128d4:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("iov_len < u16_t", msg->msg_iov[i].iov_len <= 0xFFFF);
  1128d8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1128dc:	e5932008 	ldr	r2, [r3, #8]
  1128e0:	e51b3008 	ldr	r3, [fp, #-8]
  1128e4:	e1a03183 	lsl	r3, r3, #3
  1128e8:	e0823003 	add	r3, r2, r3
  1128ec:	e5933004 	ldr	r3, [r3, #4]
  1128f0:	e3530801 	cmp	r3, #65536	; 0x10000
  1128f4:	3a000006 	bcc	112914 <lwip_sendmsg+0x4ac>
  1128f8:	e3060e8c 	movw	r0, #28300	; 0x6e8c
  1128fc:	e3400014 	movt	r0, #20
  112900:	ebffc203 	bl	103114 <rt_kprintf>
  112904:	e300144d 	movw	r1, #1101	; 0x44d
  112908:	e3060d38 	movw	r0, #27960	; 0x6d38
  11290c:	e3400014 	movt	r0, #20
  112910:	ebffe1e7 	bl	10b0b4 <sys_arch_assert>
      p->len = p->tot_len = (u16_t)msg->msg_iov[i].iov_len;
  112914:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112918:	e5932008 	ldr	r2, [r3, #8]
  11291c:	e51b3008 	ldr	r3, [fp, #-8]
  112920:	e1a03183 	lsl	r3, r3, #3
  112924:	e0823003 	add	r3, r2, r3
  112928:	e5933004 	ldr	r3, [r3, #4]
  11292c:	e6ff2073 	uxth	r2, r3
  112930:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112934:	e1c320b8 	strh	r2, [r3, #8]
  112938:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11293c:	e1d320b8 	ldrh	r2, [r3, #8]
  112940:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112944:	e1c320ba 	strh	r2, [r3, #10]
      /* netbuf empty, add new pbuf */
      if (chain_buf->p == NULL) {
  112948:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11294c:	e5933000 	ldr	r3, [r3]
  112950:	e3530000 	cmp	r3, #0
  112954:	1a000007 	bne	112978 <lwip_sendmsg+0x510>
        chain_buf->p = chain_buf->ptr = p;
  112958:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11295c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  112960:	e5832004 	str	r2, [r3, #4]
  112964:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112968:	e5932004 	ldr	r2, [r3, #4]
  11296c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112970:	e5832000 	str	r2, [r3]
  112974:	ea000004 	b	11298c <lwip_sendmsg+0x524>
        /* add pbuf to existing pbuf chain */
      } else {
        pbuf_cat(chain_buf->p, p);
  112978:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11297c:	e5933000 	ldr	r3, [r3]
  112980:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  112984:	e1a00003 	mov	r0, r3
  112988:	eb0021f0 	bl	11b150 <pbuf_cat>
    for (i = 0; i < msg->msg_iovlen; i++) {
  11298c:	e51b3008 	ldr	r3, [fp, #-8]
  112990:	e2833001 	add	r3, r3, #1
  112994:	e50b3008 	str	r3, [fp, #-8]
  112998:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11299c:	e593300c 	ldr	r3, [r3, #12]
  1129a0:	e51b2008 	ldr	r2, [fp, #-8]
  1129a4:	e1520003 	cmp	r2, r3
  1129a8:	baffffb7 	blt	11288c <lwip_sendmsg+0x424>
      }
    }
    /* save size of total chain */
    if (err == ERR_OK) {
  1129ac:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1129b0:	e3530000 	cmp	r3, #0
  1129b4:	1a000003 	bne	1129c8 <lwip_sendmsg+0x560>
      size = netbuf_len(chain_buf);
  1129b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1129bc:	e5933000 	ldr	r3, [r3]
  1129c0:	e1d330b8 	ldrh	r3, [r3, #8]
  1129c4:	e50b300c 	str	r3, [fp, #-12]
    }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    if (err == ERR_OK) {
  1129c8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1129cc:	e3530000 	cmp	r3, #0
  1129d0:	1a000006 	bne	1129f0 <lwip_sendmsg+0x588>
        IP_SET_TYPE_VAL(chain_buf->addr, IPADDR_TYPE_V4);
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

      /* send the data */
      err = netconn_send(sock->conn, chain_buf);
  1129d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1129d8:	e5933000 	ldr	r3, [r3]
  1129dc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1129e0:	e1a00003 	mov	r0, r3
  1129e4:	ebffe534 	bl	10bebc <netconn_send>
  1129e8:	e1a03000 	mov	r3, r0
  1129ec:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* deallocated the buffer */
    netbuf_delete(chain_buf);
  1129f0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1129f4:	ebfff53d 	bl	10fef0 <netbuf_delete>

    sock_set_errno(sock, err_to_errno(err));
  1129f8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1129fc:	e1a00003 	mov	r0, r3
  112a00:	ebfff50f 	bl	10fe44 <err_to_errno>
  112a04:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  112a08:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112a0c:	e6ef2073 	uxtb	r2, r3
  112a10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112a14:	e5c32010 	strb	r2, [r3, #16]
  112a18:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112a1c:	e3530000 	cmp	r3, #0
  112a20:	0a000003 	beq	112a34 <lwip_sendmsg+0x5cc>
  112a24:	eb00991d 	bl	138ea0 <__errno_location>
  112a28:	e1a02000 	mov	r2, r0
  112a2c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112a30:	e5823000 	str	r3, [r2]
    return (err == ERR_OK ? size : -1);
  112a34:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112a38:	e3530000 	cmp	r3, #0
  112a3c:	1a000001 	bne	112a48 <lwip_sendmsg+0x5e0>
  112a40:	e51b300c 	ldr	r3, [fp, #-12]
  112a44:	ea000000 	b	112a4c <lwip_sendmsg+0x5e4>
  112a48:	e3e03000 	mvn	r3, #0
  }
#else /* LWIP_UDP || LWIP_RAW */
  sock_set_errno(sock, err_to_errno(ERR_ARG));
  return -1;
#endif /* LWIP_UDP || LWIP_RAW */
}
  112a4c:	e1a00003 	mov	r0, r3
  112a50:	e24bd004 	sub	sp, fp, #4
  112a54:	e8bd8800 	pop	{fp, pc}

00112a58 <lwip_sendto>:

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
  112a58:	e92d4800 	push	{fp, lr}
  112a5c:	e28db004 	add	fp, sp, #4
  112a60:	e24dd038 	sub	sp, sp, #56	; 0x38
  112a64:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  112a68:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  112a6c:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  112a70:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct lwip_sock *sock;
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;
  sock = get_socket(s);
  112a74:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  112a78:	ebfff919 	bl	110ee4 <get_socket>
  112a7c:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  112a80:	e51b300c 	ldr	r3, [fp, #-12]
  112a84:	e3530000 	cmp	r3, #0
  112a88:	1a000001 	bne	112a94 <lwip_sendto+0x3c>
    return -1;
  112a8c:	e3e03000 	mvn	r3, #0
  112a90:	ea000081 	b	112c9c <lwip_sendto+0x244>
  }
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  112a94:	e51b300c 	ldr	r3, [fp, #-12]
  112a98:	e5933000 	ldr	r3, [r3]
  112a9c:	e5933000 	ldr	r3, [r3]
  112aa0:	e20330f0 	and	r3, r3, #240	; 0xf0
  112aa4:	e3530010 	cmp	r3, #16
  112aa8:	1a000006 	bne	112ac8 <lwip_sendto+0x70>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
  112aac:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112ab0:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  112ab4:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  112ab8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  112abc:	ebfffe15 	bl	112318 <lwip_send>
  112ac0:	e1a03000 	mov	r3, r0
  112ac4:	ea000074 	b	112c9c <lwip_sendto+0x244>
    return -1;
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
  112ac8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112acc:	e3530801 	cmp	r3, #65536	; 0x10000
  112ad0:	3a000006 	bcc	112af0 <lwip_sendto+0x98>
  112ad4:	e3060e9c 	movw	r0, #28316	; 0x6e9c
  112ad8:	e3400014 	movt	r0, #20
  112adc:	ebffc18c 	bl	103114 <rt_kprintf>
  112ae0:	e300148e 	movw	r1, #1166	; 0x48e
  112ae4:	e3060d38 	movw	r0, #27960	; 0x6d38
  112ae8:	e3400014 	movt	r0, #20
  112aec:	ebffe170 	bl	10b0b4 <sys_arch_assert>
  short_size = (u16_t)size;
  112af0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112af4:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
  112af8:	e59b3004 	ldr	r3, [fp, #4]
  112afc:	e3530000 	cmp	r3, #0
  112b00:	1a000002 	bne	112b10 <lwip_sendto+0xb8>
  112b04:	e59b3008 	ldr	r3, [fp, #8]
  112b08:	e3530000 	cmp	r3, #0
  112b0c:	0a000021 	beq	112b98 <lwip_sendto+0x140>
  112b10:	e59b3008 	ldr	r3, [fp, #8]
  112b14:	e3530010 	cmp	r3, #16
  112b18:	1a000007 	bne	112b3c <lwip_sendto+0xe4>
  112b1c:	e59b3004 	ldr	r3, [fp, #4]
  112b20:	e5d33001 	ldrb	r3, [r3, #1]
  112b24:	e3530002 	cmp	r3, #2
  112b28:	1a000003 	bne	112b3c <lwip_sendto+0xe4>
  112b2c:	e59b3004 	ldr	r3, [fp, #4]
  112b30:	e2033003 	and	r3, r3, #3
  112b34:	e3530000 	cmp	r3, #0
  112b38:	0a000016 	beq	112b98 <lwip_sendto+0x140>
  112b3c:	e3060ec0 	movw	r0, #28352	; 0x6ec0
  112b40:	e3400014 	movt	r0, #20
  112b44:	ebffc172 	bl	103114 <rt_kprintf>
  112b48:	e3001493 	movw	r1, #1171	; 0x493
  112b4c:	e3060d38 	movw	r0, #27960	; 0x6d38
  112b50:	e3400014 	movt	r0, #20
  112b54:	ebffe156 	bl	10b0b4 <sys_arch_assert>
  112b58:	e3e0000f 	mvn	r0, #15
  112b5c:	ebfff4b8 	bl	10fe44 <err_to_errno>
  112b60:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  112b64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112b68:	e6ef2073 	uxtb	r2, r3
  112b6c:	e51b300c 	ldr	r3, [fp, #-12]
  112b70:	e5c32010 	strb	r2, [r3, #16]
  112b74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112b78:	e3530000 	cmp	r3, #0
  112b7c:	0a000003 	beq	112b90 <lwip_sendto+0x138>
  112b80:	eb0098c6 	bl	138ea0 <__errno_location>
  112b84:	e1a02000 	mov	r2, r0
  112b88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112b8c:	e5823000 	str	r3, [r2]
  112b90:	e3e03000 	mvn	r3, #0
  112b94:	ea000040 	b	112c9c <lwip_sendto+0x244>
             IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
  112b98:	e3a03000 	mov	r3, #0
  112b9c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  112ba0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112ba4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
  112ba8:	e59b3004 	ldr	r3, [fp, #4]
  112bac:	e3530000 	cmp	r3, #0
  112bb0:	0a000009 	beq	112bdc <lwip_sendto+0x184>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
  112bb4:	e59b3004 	ldr	r3, [fp, #4]
  112bb8:	e5933004 	ldr	r3, [r3, #4]
  112bbc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112bc0:	e59b3004 	ldr	r3, [fp, #4]
  112bc4:	e1d330b2 	ldrh	r3, [r3, #2]
  112bc8:	e1a00003 	mov	r0, r3
  112bcc:	eb000e71 	bl	116598 <lwip_htons>
  112bd0:	e1a03000 	mov	r3, r0
  112bd4:	e14b30b8 	strh	r3, [fp, #-8]
  112bd8:	ea000003 	b	112bec <lwip_sendto+0x194>
  } else {
    remote_port = 0;
  112bdc:	e3a03000 	mov	r3, #0
  112be0:	e14b30b8 	strh	r3, [fp, #-8]
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
  112be4:	e3a03000 	mov	r3, #0
  112be8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  }
  netbuf_fromport(&buf) = remote_port;
  112bec:	e15b30b8 	ldrh	r3, [fp, #-8]
  112bf0:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
  112bf4:	e15b20be 	ldrh	r2, [fp, #-14]
  112bf8:	e24b3028 	sub	r3, fp, #40	; 0x28
  112bfc:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  112c00:	e1a00003 	mov	r0, r3
  112c04:	ebfff534 	bl	1100dc <netbuf_ref>
  112c08:	e1a03000 	mov	r3, r0
  112c0c:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
  112c10:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112c14:	e3530000 	cmp	r3, #0
  112c18:	1a000007 	bne	112c3c <lwip_sendto+0x1e4>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
  112c1c:	e51b300c 	ldr	r3, [fp, #-12]
  112c20:	e5933000 	ldr	r3, [r3]
  112c24:	e24b2028 	sub	r2, fp, #40	; 0x28
  112c28:	e1a01002 	mov	r1, r2
  112c2c:	e1a00003 	mov	r0, r3
  112c30:	ebffe4a1 	bl	10bebc <netconn_send>
  112c34:	e1a03000 	mov	r3, r0
  112c38:	e54b3005 	strb	r3, [fp, #-5]
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
  112c3c:	e24b3028 	sub	r3, fp, #40	; 0x28
  112c40:	e1a00003 	mov	r0, r3
  112c44:	ebfff504 	bl	11005c <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
  112c48:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112c4c:	e1a00003 	mov	r0, r3
  112c50:	ebfff47b 	bl	10fe44 <err_to_errno>
  112c54:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  112c58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112c5c:	e6ef2073 	uxtb	r2, r3
  112c60:	e51b300c 	ldr	r3, [fp, #-12]
  112c64:	e5c32010 	strb	r2, [r3, #16]
  112c68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112c6c:	e3530000 	cmp	r3, #0
  112c70:	0a000003 	beq	112c84 <lwip_sendto+0x22c>
  112c74:	eb009889 	bl	138ea0 <__errno_location>
  112c78:	e1a02000 	mov	r2, r0
  112c7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112c80:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? short_size : -1);
  112c84:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112c88:	e3530000 	cmp	r3, #0
  112c8c:	1a000001 	bne	112c98 <lwip_sendto+0x240>
  112c90:	e15b30be 	ldrh	r3, [fp, #-14]
  112c94:	ea000000 	b	112c9c <lwip_sendto+0x244>
  112c98:	e3e03000 	mvn	r3, #0
}
  112c9c:	e1a00003 	mov	r0, r3
  112ca0:	e24bd004 	sub	sp, fp, #4
  112ca4:	e8bd8800 	pop	{fp, pc}

00112ca8 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
  112ca8:	e92d4800 	push	{fp, lr}
  112cac:	e28db004 	add	fp, sp, #4
  112cb0:	e24dd018 	sub	sp, sp, #24
  112cb4:	e50b0010 	str	r0, [fp, #-16]
  112cb8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  112cbc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
  112cc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112cc4:	e3530002 	cmp	r3, #2
  112cc8:	0a00000d 	beq	112d04 <lwip_socket+0x5c>
  112ccc:	e3530003 	cmp	r3, #3
  112cd0:	0a000002 	beq	112ce0 <lwip_socket+0x38>
  112cd4:	e3530001 	cmp	r3, #1
  112cd8:	0a000016 	beq	112d38 <lwip_socket+0x90>
  112cdc:	ea00001c 	b	112d54 <lwip_socket+0xac>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
  112ce0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112ce4:	e6ef3073 	uxtb	r3, r3
  112ce8:	e3032944 	movw	r2, #14660	; 0x3944
  112cec:	e3402011 	movt	r2, #17
  112cf0:	e1a01003 	mov	r1, r3
  112cf4:	e3a00040 	mov	r0, #64	; 0x40
  112cf8:	ebffe15b 	bl	10b26c <netconn_new_with_proto_and_callback>
  112cfc:	e50b0008 	str	r0, [fp, #-8]
                                               (u8_t)protocol, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112d00:	ea000019 	b	112d6c <lwip_socket+0xc4>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
  112d04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112d08:	e3530088 	cmp	r3, #136	; 0x88
  112d0c:	1a000001 	bne	112d18 <lwip_socket+0x70>
  112d10:	e3a03021 	mov	r3, #33	; 0x21
  112d14:	ea000000 	b	112d1c <lwip_socket+0x74>
  112d18:	e3a03020 	mov	r3, #32
  112d1c:	e3032944 	movw	r2, #14660	; 0x3944
  112d20:	e3402011 	movt	r2, #17
  112d24:	e3a01000 	mov	r1, #0
  112d28:	e1a00003 	mov	r0, r3
  112d2c:	ebffe14e 	bl	10b26c <netconn_new_with_proto_and_callback>
  112d30:	e50b0008 	str	r0, [fp, #-8]
                 ((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP)) ,
                 event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112d34:	ea00000c 	b	112d6c <lwip_socket+0xc4>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
  112d38:	e3032944 	movw	r2, #14660	; 0x3944
  112d3c:	e3402011 	movt	r2, #17
  112d40:	e3a01000 	mov	r1, #0
  112d44:	e3a00010 	mov	r0, #16
  112d48:	ebffe147 	bl	10b26c <netconn_new_with_proto_and_callback>
  112d4c:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112d50:	ea000005 	b	112d6c <lwip_socket+0xc4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
  112d54:	eb009851 	bl	138ea0 <__errno_location>
  112d58:	e1a02000 	mov	r2, r0
  112d5c:	e3a03016 	mov	r3, #22
  112d60:	e5823000 	str	r3, [r2]
    return -1;
  112d64:	e3e03000 	mvn	r3, #0
  112d68:	ea00001b 	b	112ddc <lwip_socket+0x134>
  }

  if (!conn) {
  112d6c:	e51b3008 	ldr	r3, [fp, #-8]
  112d70:	e3530000 	cmp	r3, #0
  112d74:	1a000005 	bne	112d90 <lwip_socket+0xe8>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
  112d78:	eb009848 	bl	138ea0 <__errno_location>
  112d7c:	e1a02000 	mov	r2, r0
  112d80:	e3a03069 	mov	r3, #105	; 0x69
  112d84:	e5823000 	str	r3, [r2]
    return -1;
  112d88:	e3e03000 	mvn	r3, #0
  112d8c:	ea000012 	b	112ddc <lwip_socket+0x134>
  }

  i = alloc_socket(conn, 0);
  112d90:	e3a01000 	mov	r1, #0
  112d94:	e51b0008 	ldr	r0, [fp, #-8]
  112d98:	ebfff8a1 	bl	111024 <alloc_socket>
  112d9c:	e50b000c 	str	r0, [fp, #-12]

  if (i == -1) {
  112da0:	e51b300c 	ldr	r3, [fp, #-12]
  112da4:	e3730001 	cmn	r3, #1
  112da8:	1a000007 	bne	112dcc <lwip_socket+0x124>
    netconn_delete(conn);
  112dac:	e51b0008 	ldr	r0, [fp, #-8]
  112db0:	ebffe18f 	bl	10b3f4 <netconn_delete>
    set_errno(ENFILE);
  112db4:	eb009839 	bl	138ea0 <__errno_location>
  112db8:	e1a02000 	mov	r2, r0
  112dbc:	e3a03017 	mov	r3, #23
  112dc0:	e5823000 	str	r3, [r2]
    return -1;
  112dc4:	e3e03000 	mvn	r3, #0
  112dc8:	ea000003 	b	112ddc <lwip_socket+0x134>
  }
  conn->socket = i;
  112dcc:	e51b3008 	ldr	r3, [fp, #-8]
  112dd0:	e51b200c 	ldr	r2, [fp, #-12]
  112dd4:	e583201c 	str	r2, [r3, #28]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
  112dd8:	e51b300c 	ldr	r3, [fp, #-12]
}
  112ddc:	e1a00003 	mov	r0, r3
  112de0:	e24bd004 	sub	sp, fp, #4
  112de4:	e8bd8800 	pop	{fp, pc}

00112de8 <lwip_write>:

int
lwip_write(int s, const void *data, size_t size)
{
  112de8:	e92d4800 	push	{fp, lr}
  112dec:	e28db004 	add	fp, sp, #4
  112df0:	e24dd010 	sub	sp, sp, #16
  112df4:	e50b0008 	str	r0, [fp, #-8]
  112df8:	e50b100c 	str	r1, [fp, #-12]
  112dfc:	e50b2010 	str	r2, [fp, #-16]
  return lwip_send(s, data, size, 0);
  112e00:	e3a03000 	mov	r3, #0
  112e04:	e51b2010 	ldr	r2, [fp, #-16]
  112e08:	e51b100c 	ldr	r1, [fp, #-12]
  112e0c:	e51b0008 	ldr	r0, [fp, #-8]
  112e10:	ebfffd40 	bl	112318 <lwip_send>
  112e14:	e1a03000 	mov	r3, r0
}
  112e18:	e1a00003 	mov	r0, r3
  112e1c:	e24bd004 	sub	sp, fp, #4
  112e20:	e8bd8800 	pop	{fp, pc}

00112e24 <lwip_writev>:

int
lwip_writev(int s, const struct iovec *iov, int iovcnt)
{
  112e24:	e92d4800 	push	{fp, lr}
  112e28:	e28db004 	add	fp, sp, #4
  112e2c:	e24dd030 	sub	sp, sp, #48	; 0x30
  112e30:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  112e34:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  112e38:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct msghdr msg;

  msg.msg_name = NULL;
  112e3c:	e3a03000 	mov	r3, #0
  112e40:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  msg.msg_namelen = 0;
  112e44:	e3a03000 	mov	r3, #0
  112e48:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* Hack: we have to cast via number to cast from 'const' pointer to non-const.
     Blame the opengroup standard for this inconsistency. */
  msg.msg_iov = LWIP_CONST_CAST(struct iovec *, iov);
  112e4c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112e50:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg_iovlen = iovcnt;
  112e54:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  112e58:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  msg.msg_control = NULL;
  112e5c:	e3a03000 	mov	r3, #0
  112e60:	e50b3010 	str	r3, [fp, #-16]
  msg.msg_controllen = 0;
  112e64:	e3a03000 	mov	r3, #0
  112e68:	e50b300c 	str	r3, [fp, #-12]
  msg.msg_flags = 0;
  112e6c:	e3a03000 	mov	r3, #0
  112e70:	e50b3008 	str	r3, [fp, #-8]
  return lwip_sendmsg(s, &msg, 0);
  112e74:	e24b3020 	sub	r3, fp, #32
  112e78:	e3a02000 	mov	r2, #0
  112e7c:	e1a01003 	mov	r1, r3
  112e80:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  112e84:	ebfffd77 	bl	112468 <lwip_sendmsg>
  112e88:	e1a03000 	mov	r3, r0
}
  112e8c:	e1a00003 	mov	r0, r3
  112e90:	e24bd004 	sub	sp, fp, #4
  112e94:	e8bd8800 	pop	{fp, pc}

00112e98 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
  112e98:	e92d4800 	push	{fp, lr}
  112e9c:	e28db004 	add	fp, sp, #4
  112ea0:	e24ddd07 	sub	sp, sp, #448	; 0x1c0
  112ea4:	e50b01b8 	str	r0, [fp, #-440]	; 0xfffffe48
  112ea8:	e50b11bc 	str	r1, [fp, #-444]	; 0xfffffe44
  112eac:	e50b21c0 	str	r2, [fp, #-448]	; 0xfffffe40
  112eb0:	e50b31c4 	str	r3, [fp, #-452]	; 0xfffffe3c
  int i, nready = 0;
  112eb4:	e3a03000 	mov	r3, #0
  112eb8:	e50b300c 	str	r3, [fp, #-12]
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
  112ebc:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  112ec0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  112ec4:	e3a03020 	mov	r3, #32
  112ec8:	e50b3010 	str	r3, [fp, #-16]
  112ecc:	ea000007 	b	112ef0 <lwip_selscan+0x58>
  112ed0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112ed4:	e2832004 	add	r2, r3, #4
  112ed8:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  112edc:	e3a02000 	mov	r2, #0
  112ee0:	e5832000 	str	r2, [r3]
  112ee4:	e51b3010 	ldr	r3, [fp, #-16]
  112ee8:	e2433001 	sub	r3, r3, #1
  112eec:	e50b3010 	str	r3, [fp, #-16]
  112ef0:	e51b3010 	ldr	r3, [fp, #-16]
  112ef4:	e3530000 	cmp	r3, #0
  112ef8:	1afffff4 	bne	112ed0 <lwip_selscan+0x38>
  FD_ZERO(&lwriteset);
  112efc:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  112f00:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  112f04:	e3a03020 	mov	r3, #32
  112f08:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  112f0c:	ea000007 	b	112f30 <lwip_selscan+0x98>
  112f10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112f14:	e2832004 	add	r2, r3, #4
  112f18:	e50b201c 	str	r2, [fp, #-28]	; 0xffffffe4
  112f1c:	e3a02000 	mov	r2, #0
  112f20:	e5832000 	str	r2, [r3]
  112f24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112f28:	e2433001 	sub	r3, r3, #1
  112f2c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  112f30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112f34:	e3530000 	cmp	r3, #0
  112f38:	1afffff4 	bne	112f10 <lwip_selscan+0x78>
  FD_ZERO(&lexceptset);
  112f3c:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  112f40:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  112f44:	e3a03020 	mov	r3, #32
  112f48:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112f4c:	ea000007 	b	112f70 <lwip_selscan+0xd8>
  112f50:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112f54:	e2832004 	add	r2, r3, #4
  112f58:	e50b2024 	str	r2, [fp, #-36]	; 0xffffffdc
  112f5c:	e3a02000 	mov	r2, #0
  112f60:	e5832000 	str	r2, [r3]
  112f64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  112f68:	e2433001 	sub	r3, r3, #1
  112f6c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112f70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  112f74:	e3530000 	cmp	r3, #0
  112f78:	1afffff4 	bne	112f50 <lwip_selscan+0xb8>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  112f7c:	e3a03000 	mov	r3, #0
  112f80:	e50b3008 	str	r3, [fp, #-8]
  112f84:	ea0000aa 	b	113234 <lwip_selscan+0x39c>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
  112f88:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112f8c:	e3530000 	cmp	r3, #0
  112f90:	0a000009 	beq	112fbc <lwip_selscan+0x124>
  112f94:	e51b3008 	ldr	r3, [fp, #-8]
  112f98:	e1a022a3 	lsr	r2, r3, #5
  112f9c:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112fa0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112fa4:	e51b3008 	ldr	r3, [fp, #-8]
  112fa8:	e203301f 	and	r3, r3, #31
  112fac:	e1a03332 	lsr	r3, r2, r3
  112fb0:	e2033001 	and	r3, r3, #1
  112fb4:	e3530000 	cmp	r3, #0
  112fb8:	1a000019 	bne	113024 <lwip_selscan+0x18c>
  112fbc:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112fc0:	e3530000 	cmp	r3, #0
  112fc4:	0a000009 	beq	112ff0 <lwip_selscan+0x158>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
  112fc8:	e51b3008 	ldr	r3, [fp, #-8]
  112fcc:	e1a022a3 	lsr	r2, r3, #5
  112fd0:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112fd4:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112fd8:	e51b3008 	ldr	r3, [fp, #-8]
  112fdc:	e203301f 	and	r3, r3, #31
  112fe0:	e1a03332 	lsr	r3, r2, r3
  112fe4:	e2033001 	and	r3, r3, #1
  112fe8:	e3530000 	cmp	r3, #0
  112fec:	1a00000c 	bne	113024 <lwip_selscan+0x18c>
  112ff0:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112ff4:	e3530000 	cmp	r3, #0
  112ff8:	0a000089 	beq	113224 <lwip_selscan+0x38c>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
  112ffc:	e51b3008 	ldr	r3, [fp, #-8]
  113000:	e1a022a3 	lsr	r2, r3, #5
  113004:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113008:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  11300c:	e51b3008 	ldr	r3, [fp, #-8]
  113010:	e203301f 	and	r3, r3, #31
  113014:	e1a03332 	lsr	r3, r2, r3
  113018:	e2033001 	and	r3, r3, #1
  11301c:	e3530000 	cmp	r3, #0
  113020:	0a00007f 	beq	113224 <lwip_selscan+0x38c>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
  113024:	ebffbc84 	bl	10223c <rt_enter_critical>
    sock = tryget_socket(i);
  113028:	e51b0008 	ldr	r0, [fp, #-8]
  11302c:	ebfff7d1 	bl	110f78 <tryget_socket>
  113030:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if (sock != NULL) {
  113034:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113038:	e3530000 	cmp	r3, #0
  11303c:	0a000076 	beq	11321c <lwip_selscan+0x384>
      void* lastdata = sock->lastdata;
  113040:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113044:	e5933004 	ldr	r3, [r3, #4]
  113048:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      s16_t rcvevent = sock->rcvevent;
  11304c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113050:	e1d330ba 	ldrh	r3, [r3, #10]
  113054:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
      u16_t sendevent = sock->sendevent;
  113058:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11305c:	e1d330bc 	ldrh	r3, [r3, #12]
  113060:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
      u16_t errevent = sock->errevent;
  113064:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113068:	e1d330be 	ldrh	r3, [r3, #14]
  11306c:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
      SYS_ARCH_UNPROTECT(lev);
  113070:	ebffbc77 	bl	102254 <rt_exit_critical>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
  113074:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  113078:	e3530000 	cmp	r3, #0
  11307c:	0a000021 	beq	113108 <lwip_selscan+0x270>
  113080:	e51b3008 	ldr	r3, [fp, #-8]
  113084:	e1a022a3 	lsr	r2, r3, #5
  113088:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  11308c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113090:	e51b3008 	ldr	r3, [fp, #-8]
  113094:	e203301f 	and	r3, r3, #31
  113098:	e1a03332 	lsr	r3, r2, r3
  11309c:	e2033001 	and	r3, r3, #1
  1130a0:	e3530000 	cmp	r3, #0
  1130a4:	0a000017 	beq	113108 <lwip_selscan+0x270>
  1130a8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1130ac:	e3530000 	cmp	r3, #0
  1130b0:	1a000002 	bne	1130c0 <lwip_selscan+0x228>
  1130b4:	e15b32fe 	ldrsh	r3, [fp, #-46]	; 0xffffffd2
  1130b8:	e3530000 	cmp	r3, #0
  1130bc:	da000011 	ble	113108 <lwip_selscan+0x270>
        FD_SET(i, &lreadset);
  1130c0:	e51b3008 	ldr	r3, [fp, #-8]
  1130c4:	e1a022a3 	lsr	r2, r3, #5
  1130c8:	e1a03102 	lsl	r3, r2, #2
  1130cc:	e24b1004 	sub	r1, fp, #4
  1130d0:	e0813003 	add	r3, r1, r3
  1130d4:	e51310b0 	ldr	r1, [r3, #-176]	; 0xffffff50
  1130d8:	e51b3008 	ldr	r3, [fp, #-8]
  1130dc:	e203301f 	and	r3, r3, #31
  1130e0:	e3a00001 	mov	r0, #1
  1130e4:	e1a03310 	lsl	r3, r0, r3
  1130e8:	e1811003 	orr	r1, r1, r3
  1130ec:	e1a03102 	lsl	r3, r2, #2
  1130f0:	e24b2004 	sub	r2, fp, #4
  1130f4:	e0823003 	add	r3, r2, r3
  1130f8:	e50310b0 	str	r1, [r3, #-176]	; 0xffffff50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
  1130fc:	e51b300c 	ldr	r3, [fp, #-12]
  113100:	e2833001 	add	r3, r3, #1
  113104:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
  113108:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  11310c:	e3530000 	cmp	r3, #0
  113110:	0a00001e 	beq	113190 <lwip_selscan+0x2f8>
  113114:	e51b3008 	ldr	r3, [fp, #-8]
  113118:	e1a022a3 	lsr	r2, r3, #5
  11311c:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113120:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113124:	e51b3008 	ldr	r3, [fp, #-8]
  113128:	e203301f 	and	r3, r3, #31
  11312c:	e1a03332 	lsr	r3, r2, r3
  113130:	e2033001 	and	r3, r3, #1
  113134:	e3530000 	cmp	r3, #0
  113138:	0a000014 	beq	113190 <lwip_selscan+0x2f8>
  11313c:	e15b33b0 	ldrh	r3, [fp, #-48]	; 0xffffffd0
  113140:	e3530000 	cmp	r3, #0
  113144:	0a000011 	beq	113190 <lwip_selscan+0x2f8>
        FD_SET(i, &lwriteset);
  113148:	e51b3008 	ldr	r3, [fp, #-8]
  11314c:	e1a022a3 	lsr	r2, r3, #5
  113150:	e1a03102 	lsl	r3, r2, #2
  113154:	e24b1004 	sub	r1, fp, #4
  113158:	e0813003 	add	r3, r1, r3
  11315c:	e5131130 	ldr	r1, [r3, #-304]	; 0xfffffed0
  113160:	e51b3008 	ldr	r3, [fp, #-8]
  113164:	e203301f 	and	r3, r3, #31
  113168:	e3a00001 	mov	r0, #1
  11316c:	e1a03310 	lsl	r3, r0, r3
  113170:	e1811003 	orr	r1, r1, r3
  113174:	e1a03102 	lsl	r3, r2, #2
  113178:	e24b2004 	sub	r2, fp, #4
  11317c:	e0823003 	add	r3, r2, r3
  113180:	e5031130 	str	r1, [r3, #-304]	; 0xfffffed0
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
  113184:	e51b300c 	ldr	r3, [fp, #-12]
  113188:	e2833001 	add	r3, r3, #1
  11318c:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
  113190:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113194:	e3530000 	cmp	r3, #0
  113198:	0a000022 	beq	113228 <lwip_selscan+0x390>
  11319c:	e51b3008 	ldr	r3, [fp, #-8]
  1131a0:	e1a022a3 	lsr	r2, r3, #5
  1131a4:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1131a8:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1131ac:	e51b3008 	ldr	r3, [fp, #-8]
  1131b0:	e203301f 	and	r3, r3, #31
  1131b4:	e1a03332 	lsr	r3, r2, r3
  1131b8:	e2033001 	and	r3, r3, #1
  1131bc:	e3530000 	cmp	r3, #0
  1131c0:	0a000018 	beq	113228 <lwip_selscan+0x390>
  1131c4:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  1131c8:	e3530000 	cmp	r3, #0
  1131cc:	0a000015 	beq	113228 <lwip_selscan+0x390>
        FD_SET(i, &lexceptset);
  1131d0:	e51b3008 	ldr	r3, [fp, #-8]
  1131d4:	e1a022a3 	lsr	r2, r3, #5
  1131d8:	e1a03102 	lsl	r3, r2, #2
  1131dc:	e24b1004 	sub	r1, fp, #4
  1131e0:	e0813003 	add	r3, r1, r3
  1131e4:	e51311b0 	ldr	r1, [r3, #-432]	; 0xfffffe50
  1131e8:	e51b3008 	ldr	r3, [fp, #-8]
  1131ec:	e203301f 	and	r3, r3, #31
  1131f0:	e3a00001 	mov	r0, #1
  1131f4:	e1a03310 	lsl	r3, r0, r3
  1131f8:	e1811003 	orr	r1, r1, r3
  1131fc:	e1a03102 	lsl	r3, r2, #2
  113200:	e24b2004 	sub	r2, fp, #4
  113204:	e0823003 	add	r3, r2, r3
  113208:	e50311b0 	str	r1, [r3, #-432]	; 0xfffffe50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
  11320c:	e51b300c 	ldr	r3, [fp, #-12]
  113210:	e2833001 	add	r3, r3, #1
  113214:	e50b300c 	str	r3, [fp, #-12]
  113218:	ea000002 	b	113228 <lwip_selscan+0x390>
      }
    } else {
      SYS_ARCH_UNPROTECT(lev);
  11321c:	ebffbc0c 	bl	102254 <rt_exit_critical>
  113220:	ea000000 	b	113228 <lwip_selscan+0x390>
      continue;
  113224:	e320f000 	nop	{0}
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  113228:	e51b3008 	ldr	r3, [fp, #-8]
  11322c:	e2833001 	add	r3, r3, #1
  113230:	e50b3008 	str	r3, [fp, #-8]
  113234:	e51b2008 	ldr	r2, [fp, #-8]
  113238:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  11323c:	e1520003 	cmp	r2, r3
  113240:	baffff50 	blt	112f88 <lwip_selscan+0xf0>
      /* continue on to next FD in list */
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
  113244:	e59b3004 	ldr	r3, [fp, #4]
  113248:	e1a00003 	mov	r0, r3
  11324c:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  113250:	e3a02080 	mov	r2, #128	; 0x80
  113254:	e1a01003 	mov	r1, r3
  113258:	eb00b6bf 	bl	140d5c <memcpy>
  *writeset_out = lwriteset;
  11325c:	e59b3008 	ldr	r3, [fp, #8]
  113260:	e1a00003 	mov	r0, r3
  113264:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  113268:	e3a02080 	mov	r2, #128	; 0x80
  11326c:	e1a01003 	mov	r1, r3
  113270:	eb00b6b9 	bl	140d5c <memcpy>
  *exceptset_out = lexceptset;
  113274:	e59b300c 	ldr	r3, [fp, #12]
  113278:	e1a00003 	mov	r0, r3
  11327c:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  113280:	e3a02080 	mov	r2, #128	; 0x80
  113284:	e1a01003 	mov	r1, r3
  113288:	eb00b6b3 	bl	140d5c <memcpy>

  LWIP_ASSERT("nready >= 0", nready >= 0);
  11328c:	e51b300c 	ldr	r3, [fp, #-12]
  113290:	e3530000 	cmp	r3, #0
  113294:	aa000006 	bge	1132b4 <lwip_selscan+0x41c>
  113298:	e3060ee0 	movw	r0, #28384	; 0x6ee0
  11329c:	e3400014 	movt	r0, #20
  1132a0:	ebffbf9b 	bl	103114 <rt_kprintf>
  1132a4:	e3001569 	movw	r1, #1385	; 0x569
  1132a8:	e3060d38 	movw	r0, #27960	; 0x6d38
  1132ac:	e3400014 	movt	r0, #20
  1132b0:	ebffdf7f 	bl	10b0b4 <sys_arch_assert>
  return nready;
  1132b4:	e51b300c 	ldr	r3, [fp, #-12]
}
  1132b8:	e1a00003 	mov	r0, r3
  1132bc:	e24bd004 	sub	sp, fp, #4
  1132c0:	e8bd8800 	pop	{fp, pc}

001132c4 <lwip_select>:

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
  1132c4:	e92d4800 	push	{fp, lr}
  1132c8:	e28db004 	add	fp, sp, #4
  1132cc:	e24ddf76 	sub	sp, sp, #472	; 0x1d8
  1132d0:	e50b01c0 	str	r0, [fp, #-448]	; 0xfffffe40
  1132d4:	e50b11c4 	str	r1, [fp, #-452]	; 0xfffffe3c
  1132d8:	e50b21c8 	str	r2, [fp, #-456]	; 0xfffffe38
  1132dc:	e50b31cc 	str	r3, [fp, #-460]	; 0xfffffe34
  u32_t waitres = 0;
  1132e0:	e3a03000 	mov	r3, #0
  1132e4:	e50b3008 	str	r3, [fp, #-8]
                  timeout ? (s32_t)timeout->tv_sec : (s32_t)-1,
                  timeout ? (s32_t)timeout->tv_usec : (s32_t)-1));

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  1132e8:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  1132ec:	e58d3008 	str	r3, [sp, #8]
  1132f0:	e24b3e12 	sub	r3, fp, #288	; 0x120
  1132f4:	e58d3004 	str	r3, [sp, #4]
  1132f8:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1132fc:	e58d3000 	str	r3, [sp]
  113300:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113304:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  113308:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  11330c:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  113310:	ebfffee0 	bl	112e98 <lwip_selscan>
  113314:	e50b000c 	str	r0, [fp, #-12]

  /* If we don't have any current events, then suspend if we are supposed to */
  if (!nready) {
  113318:	e51b300c 	ldr	r3, [fp, #-12]
  11331c:	e3530000 	cmp	r3, #0
  113320:	1a000163 	bne	1138b4 <lwip_select+0x5f0>
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
  113324:	e59b3004 	ldr	r3, [fp, #4]
  113328:	e3530000 	cmp	r3, #0
  11332c:	0a000007 	beq	113350 <lwip_select+0x8c>
  113330:	e59b3004 	ldr	r3, [fp, #4]
  113334:	e1c320d0 	ldrd	r2, [r3]
  113338:	e1923003 	orrs	r3, r2, r3
  11333c:	1a000003 	bne	113350 <lwip_select+0x8c>
  113340:	e59b3004 	ldr	r3, [fp, #4]
  113344:	e5933008 	ldr	r3, [r3, #8]
  113348:	e3530000 	cmp	r3, #0
  11334c:	0a00015a 	beq	1138bc <lwip_select+0x5f8>
    /* None ready: add our semaphore to list:
       We don't actually need any dynamic memory. Our entry on the
       list is only valid while we are in this function, so it's ok
       to use local variables. */

    select_cb.next = NULL;
  113350:	e3a03000 	mov	r3, #0
  113354:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    select_cb.prev = NULL;
  113358:	e3a03000 	mov	r3, #0
  11335c:	e50b31b8 	str	r3, [fp, #-440]	; 0xfffffe48
    select_cb.readset = readset;
  113360:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113364:	e50b31b4 	str	r3, [fp, #-436]	; 0xfffffe4c
    select_cb.writeset = writeset;
  113368:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  11336c:	e50b31b0 	str	r3, [fp, #-432]	; 0xfffffe50
    select_cb.exceptset = exceptset;
  113370:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113374:	e50b31ac 	str	r3, [fp, #-428]	; 0xfffffe54
    select_cb.sem_signalled = 0;
  113378:	e3a03000 	mov	r3, #0
  11337c:	e50b31a8 	str	r3, [fp, #-424]	; 0xfffffe58
#if LWIP_NETCONN_SEM_PER_THREAD
    select_cb.sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    if (sys_sem_new(&select_cb.sem, 0) != ERR_OK) {
  113380:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  113384:	e2833018 	add	r3, r3, #24
  113388:	e3a01000 	mov	r1, #0
  11338c:	e1a00003 	mov	r0, r3
  113390:	ebffdd1a 	bl	10a800 <sys_sem_new>
  113394:	e1a03000 	mov	r3, r0
  113398:	e3530000 	cmp	r3, #0
  11339c:	0a000005 	beq	1133b8 <lwip_select+0xf4>
      /* failed to create semaphore */
      set_errno(ENOMEM);
  1133a0:	eb0096be 	bl	138ea0 <__errno_location>
  1133a4:	e1a02000 	mov	r2, r0
  1133a8:	e3a0300c 	mov	r3, #12
  1133ac:	e5823000 	str	r3, [r2]
      return -1;
  1133b0:	e3e03000 	mvn	r3, #0
  1133b4:	ea00015f 	b	113938 <lwip_select+0x674>
    }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    /* Protect the select_cb_list */
    SYS_ARCH_PROTECT(lev);
  1133b8:	ebffbb9f 	bl	10223c <rt_enter_critical>

    /* Put this select_cb on top of list */
    select_cb.next = select_cb_list;
  1133bc:	e30d3c44 	movw	r3, #56388	; 0xdc44
  1133c0:	e3403014 	movt	r3, #20
  1133c4:	e5933000 	ldr	r3, [r3]
  1133c8:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    if (select_cb_list != NULL) {
  1133cc:	e30d3c44 	movw	r3, #56388	; 0xdc44
  1133d0:	e3403014 	movt	r3, #20
  1133d4:	e5933000 	ldr	r3, [r3]
  1133d8:	e3530000 	cmp	r3, #0
  1133dc:	0a000004 	beq	1133f4 <lwip_select+0x130>
      select_cb_list->prev = &select_cb;
  1133e0:	e30d3c44 	movw	r3, #56388	; 0xdc44
  1133e4:	e3403014 	movt	r3, #20
  1133e8:	e5933000 	ldr	r3, [r3]
  1133ec:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  1133f0:	e5832004 	str	r2, [r3, #4]
    }
    select_cb_list = &select_cb;
  1133f4:	e30d3c44 	movw	r3, #56388	; 0xdc44
  1133f8:	e3403014 	movt	r3, #20
  1133fc:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  113400:	e5832000 	str	r2, [r3]
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  113404:	e30d3c48 	movw	r3, #56392	; 0xdc48
  113408:	e3403014 	movt	r3, #20
  11340c:	e5933000 	ldr	r3, [r3]
  113410:	e2832001 	add	r2, r3, #1
  113414:	e30d3c48 	movw	r3, #56392	; 0xdc48
  113418:	e3403014 	movt	r3, #20
  11341c:	e5832000 	str	r2, [r3]

    /* Now we can safely unprotect */
    SYS_ARCH_UNPROTECT(lev);
  113420:	ebffbb8b 	bl	102254 <rt_exit_critical>

    /* Increase select_waiting for each socket we are interested in */
    maxfdp2 = maxfdp1;
  113424:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113428:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  11342c:	e3a03000 	mov	r3, #0
  113430:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113434:	ea000049 	b	113560 <lwip_select+0x29c>
      if ((readset && FD_ISSET(i, readset)) ||
  113438:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  11343c:	e3530000 	cmp	r3, #0
  113440:	0a000009 	beq	11346c <lwip_select+0x1a8>
  113444:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113448:	e1a022a3 	lsr	r2, r3, #5
  11344c:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113450:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113454:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113458:	e203301f 	and	r3, r3, #31
  11345c:	e1a03332 	lsr	r3, r2, r3
  113460:	e2033001 	and	r3, r3, #1
  113464:	e3530000 	cmp	r3, #0
  113468:	1a000019 	bne	1134d4 <lwip_select+0x210>
  11346c:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113470:	e3530000 	cmp	r3, #0
  113474:	0a000009 	beq	1134a0 <lwip_select+0x1dc>
          (writeset && FD_ISSET(i, writeset)) ||
  113478:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11347c:	e1a022a3 	lsr	r2, r3, #5
  113480:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113484:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113488:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11348c:	e203301f 	and	r3, r3, #31
  113490:	e1a03332 	lsr	r3, r2, r3
  113494:	e2033001 	and	r3, r3, #1
  113498:	e3530000 	cmp	r3, #0
  11349c:	1a00000c 	bne	1134d4 <lwip_select+0x210>
  1134a0:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1134a4:	e3530000 	cmp	r3, #0
  1134a8:	0a000029 	beq	113554 <lwip_select+0x290>
          (exceptset && FD_ISSET(i, exceptset))) {
  1134ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1134b0:	e1a022a3 	lsr	r2, r3, #5
  1134b4:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1134b8:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1134bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1134c0:	e203301f 	and	r3, r3, #31
  1134c4:	e1a03332 	lsr	r3, r2, r3
  1134c8:	e2033001 	and	r3, r3, #1
  1134cc:	e3530000 	cmp	r3, #0
  1134d0:	0a00001f 	beq	113554 <lwip_select+0x290>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  1134d4:	ebffbb58 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  1134d8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1134dc:	ebfff6a5 	bl	110f78 <tryget_socket>
  1134e0:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sock != NULL) {
  1134e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1134e8:	e3530000 	cmp	r3, #0
  1134ec:	0a000011 	beq	113538 <lwip_select+0x274>
          sock->select_waiting++;
  1134f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1134f4:	e5d33011 	ldrb	r3, [r3, #17]
  1134f8:	e2833001 	add	r3, r3, #1
  1134fc:	e6ef2073 	uxtb	r2, r3
  113500:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113504:	e5c32011 	strb	r2, [r3, #17]
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  113508:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11350c:	e5d33011 	ldrb	r3, [r3, #17]
  113510:	e3530000 	cmp	r3, #0
  113514:	1a00000d 	bne	113550 <lwip_select+0x28c>
  113518:	e3060eec 	movw	r0, #28396	; 0x6eec
  11351c:	e3400014 	movt	r0, #20
  113520:	ebffbefb 	bl	103114 <rt_kprintf>
  113524:	e30015be 	movw	r1, #1470	; 0x5be
  113528:	e3060d38 	movw	r0, #27960	; 0x6d38
  11352c:	e3400014 	movt	r0, #20
  113530:	ebffdedf 	bl	10b0b4 <sys_arch_assert>
  113534:	ea000005 	b	113550 <lwip_select+0x28c>
        } else {
          /* Not a valid socket */
          nready = -1;
  113538:	e3e03000 	mvn	r3, #0
  11353c:	e50b300c 	str	r3, [fp, #-12]
          maxfdp2 = i;
  113540:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113544:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          SYS_ARCH_UNPROTECT(lev);
  113548:	ebffbb41 	bl	102254 <rt_exit_critical>
          break;
  11354c:	ea000007 	b	113570 <lwip_select+0x2ac>
        }
        SYS_ARCH_UNPROTECT(lev);
  113550:	ebffbb3f 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  113554:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113558:	e2833001 	add	r3, r3, #1
  11355c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113560:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  113564:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113568:	e1520003 	cmp	r2, r3
  11356c:	baffffb1 	blt	113438 <lwip_select+0x174>
      }
    }

    if (nready >= 0) {
  113570:	e51b300c 	ldr	r3, [fp, #-12]
  113574:	e3530000 	cmp	r3, #0
  113578:	ba00002e 	blt	113638 <lwip_select+0x374>
      /* Call lwip_selscan again: there could have been events between
         the last scan (without us on the list) and putting us on the list! */
      nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  11357c:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113580:	e58d3008 	str	r3, [sp, #8]
  113584:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113588:	e58d3004 	str	r3, [sp, #4]
  11358c:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  113590:	e58d3000 	str	r3, [sp]
  113594:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113598:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  11359c:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  1135a0:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  1135a4:	ebfffe3b 	bl	112e98 <lwip_selscan>
  1135a8:	e50b000c 	str	r0, [fp, #-12]
      if (!nready) {
  1135ac:	e51b300c 	ldr	r3, [fp, #-12]
  1135b0:	e3530000 	cmp	r3, #0
  1135b4:	1a00001f 	bne	113638 <lwip_select+0x374>
        /* Still none ready, just wait to be woken */
        if (timeout == 0) {
  1135b8:	e59b3004 	ldr	r3, [fp, #4]
  1135bc:	e3530000 	cmp	r3, #0
  1135c0:	1a000002 	bne	1135d0 <lwip_select+0x30c>
          /* Wait forever */
          msectimeout = 0;
  1135c4:	e3a03000 	mov	r3, #0
  1135c8:	e50b3010 	str	r3, [fp, #-16]
  1135cc:	ea000013 	b	113620 <lwip_select+0x35c>
        } else {
          msectimeout =  ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
  1135d0:	e59b3004 	ldr	r3, [fp, #4]
  1135d4:	e1c320d0 	ldrd	r2, [r3]
  1135d8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  1135dc:	e0000293 	mul	r0, r3, r2
  1135e0:	e59b3004 	ldr	r3, [fp, #4]
  1135e4:	e5933008 	ldr	r3, [r3, #8]
  1135e8:	e2831f7d 	add	r1, r3, #500	; 0x1f4
  1135ec:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1135f0:	e3413062 	movt	r3, #4194	; 0x1062
  1135f4:	e0c32391 	smull	r2, r3, r1, r3
  1135f8:	e1a02343 	asr	r2, r3, #6
  1135fc:	e1a03fc1 	asr	r3, r1, #31
  113600:	e0423003 	sub	r3, r2, r3
  113604:	e0803003 	add	r3, r0, r3
  113608:	e50b3010 	str	r3, [fp, #-16]
          if (msectimeout == 0) {
  11360c:	e51b3010 	ldr	r3, [fp, #-16]
  113610:	e3530000 	cmp	r3, #0
  113614:	1a000001 	bne	113620 <lwip_select+0x35c>
            /* Wait 1ms at least (0 means wait forever) */
            msectimeout = 1;
  113618:	e3a03001 	mov	r3, #1
  11361c:	e50b3010 	str	r3, [fp, #-16]
          }
        }

        waitres = sys_arch_sem_wait(SELECT_SEM_PTR(select_cb.sem), msectimeout);
  113620:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  113624:	e2833018 	add	r3, r3, #24
  113628:	e51b1010 	ldr	r1, [fp, #-16]
  11362c:	e1a00003 	mov	r0, r3
  113630:	ebffdcb3 	bl	10a904 <sys_arch_sem_wait>
  113634:	e50b0008 	str	r0, [fp, #-8]
#endif
      }
    }

    /* Decrease select_waiting for each socket we are interested in */
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  113638:	e3a03000 	mov	r3, #0
  11363c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113640:	ea000049 	b	11376c <lwip_select+0x4a8>
      if ((readset && FD_ISSET(i, readset)) ||
  113644:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113648:	e3530000 	cmp	r3, #0
  11364c:	0a000009 	beq	113678 <lwip_select+0x3b4>
  113650:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113654:	e1a022a3 	lsr	r2, r3, #5
  113658:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  11365c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113660:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113664:	e203301f 	and	r3, r3, #31
  113668:	e1a03332 	lsr	r3, r2, r3
  11366c:	e2033001 	and	r3, r3, #1
  113670:	e3530000 	cmp	r3, #0
  113674:	1a000019 	bne	1136e0 <lwip_select+0x41c>
  113678:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  11367c:	e3530000 	cmp	r3, #0
  113680:	0a000009 	beq	1136ac <lwip_select+0x3e8>
          (writeset && FD_ISSET(i, writeset)) ||
  113684:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113688:	e1a022a3 	lsr	r2, r3, #5
  11368c:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113690:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113694:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113698:	e203301f 	and	r3, r3, #31
  11369c:	e1a03332 	lsr	r3, r2, r3
  1136a0:	e2033001 	and	r3, r3, #1
  1136a4:	e3530000 	cmp	r3, #0
  1136a8:	1a00000c 	bne	1136e0 <lwip_select+0x41c>
  1136ac:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1136b0:	e3530000 	cmp	r3, #0
  1136b4:	0a000029 	beq	113760 <lwip_select+0x49c>
          (exceptset && FD_ISSET(i, exceptset))) {
  1136b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1136bc:	e1a022a3 	lsr	r2, r3, #5
  1136c0:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1136c4:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1136c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1136cc:	e203301f 	and	r3, r3, #31
  1136d0:	e1a03332 	lsr	r3, r2, r3
  1136d4:	e2033001 	and	r3, r3, #1
  1136d8:	e3530000 	cmp	r3, #0
  1136dc:	0a00001f 	beq	113760 <lwip_select+0x49c>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  1136e0:	ebffbad5 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  1136e4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1136e8:	ebfff622 	bl	110f78 <tryget_socket>
  1136ec:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
        if (sock != NULL) {
  1136f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1136f4:	e3530000 	cmp	r3, #0
  1136f8:	0a000015 	beq	113754 <lwip_select+0x490>
          /* for now, handle select_waiting==0... */
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  1136fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113700:	e5d33011 	ldrb	r3, [r3, #17]
  113704:	e3530000 	cmp	r3, #0
  113708:	1a000006 	bne	113728 <lwip_select+0x464>
  11370c:	e3060eec 	movw	r0, #28396	; 0x6eec
  113710:	e3400014 	movt	r0, #20
  113714:	ebffbe7e 	bl	103114 <rt_kprintf>
  113718:	e30015ec 	movw	r1, #1516	; 0x5ec
  11371c:	e3060d38 	movw	r0, #27960	; 0x6d38
  113720:	e3400014 	movt	r0, #20
  113724:	ebffde62 	bl	10b0b4 <sys_arch_assert>
          if (sock->select_waiting > 0) {
  113728:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11372c:	e5d33011 	ldrb	r3, [r3, #17]
  113730:	e3530000 	cmp	r3, #0
  113734:	0a000008 	beq	11375c <lwip_select+0x498>
            sock->select_waiting--;
  113738:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11373c:	e5d33011 	ldrb	r3, [r3, #17]
  113740:	e2433001 	sub	r3, r3, #1
  113744:	e6ef2073 	uxtb	r2, r3
  113748:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11374c:	e5c32011 	strb	r2, [r3, #17]
  113750:	ea000001 	b	11375c <lwip_select+0x498>
          }
        } else {
          /* Not a valid socket */
          nready = -1;
  113754:	e3e03000 	mvn	r3, #0
  113758:	e50b300c 	str	r3, [fp, #-12]
        }
        SYS_ARCH_UNPROTECT(lev);
  11375c:	ebffbabc 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  113760:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113764:	e2833001 	add	r3, r3, #1
  113768:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  11376c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  113770:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113774:	e1520003 	cmp	r2, r3
  113778:	baffffb1 	blt	113644 <lwip_select+0x380>
      }
    }
    /* Take us off the list */
    SYS_ARCH_PROTECT(lev);
  11377c:	ebffbaae 	bl	10223c <rt_enter_critical>
    if (select_cb.next != NULL) {
  113780:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  113784:	e3530000 	cmp	r3, #0
  113788:	0a000002 	beq	113798 <lwip_select+0x4d4>
      select_cb.next->prev = select_cb.prev;
  11378c:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  113790:	e51b21b8 	ldr	r2, [fp, #-440]	; 0xfffffe48
  113794:	e5832004 	str	r2, [r3, #4]
    }
    if (select_cb_list == &select_cb) {
  113798:	e30d3c44 	movw	r3, #56388	; 0xdc44
  11379c:	e3403014 	movt	r3, #20
  1137a0:	e5932000 	ldr	r2, [r3]
  1137a4:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  1137a8:	e1520003 	cmp	r2, r3
  1137ac:	1a00000e 	bne	1137ec <lwip_select+0x528>
      LWIP_ASSERT("select_cb.prev == NULL", select_cb.prev == NULL);
  1137b0:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  1137b4:	e3530000 	cmp	r3, #0
  1137b8:	0a000006 	beq	1137d8 <lwip_select+0x514>
  1137bc:	e3060f08 	movw	r0, #28424	; 0x6f08
  1137c0:	e3400014 	movt	r0, #20
  1137c4:	ebffbe52 	bl	103114 <rt_kprintf>
  1137c8:	e30015fd 	movw	r1, #1533	; 0x5fd
  1137cc:	e3060d38 	movw	r0, #27960	; 0x6d38
  1137d0:	e3400014 	movt	r0, #20
  1137d4:	ebffde36 	bl	10b0b4 <sys_arch_assert>
      select_cb_list = select_cb.next;
  1137d8:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  1137dc:	e30d3c44 	movw	r3, #56388	; 0xdc44
  1137e0:	e3403014 	movt	r3, #20
  1137e4:	e5832000 	str	r2, [r3]
  1137e8:	ea00000c 	b	113820 <lwip_select+0x55c>
    } else {
      LWIP_ASSERT("select_cb.prev != NULL", select_cb.prev != NULL);
  1137ec:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  1137f0:	e3530000 	cmp	r3, #0
  1137f4:	1a000006 	bne	113814 <lwip_select+0x550>
  1137f8:	e3060f20 	movw	r0, #28448	; 0x6f20
  1137fc:	e3400014 	movt	r0, #20
  113800:	ebffbe43 	bl	103114 <rt_kprintf>
  113804:	e3a01c06 	mov	r1, #1536	; 0x600
  113808:	e3060d38 	movw	r0, #27960	; 0x6d38
  11380c:	e3400014 	movt	r0, #20
  113810:	ebffde27 	bl	10b0b4 <sys_arch_assert>
      select_cb.prev->next = select_cb.next;
  113814:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113818:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  11381c:	e5832000 	str	r2, [r3]
    }
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  113820:	e30d3c48 	movw	r3, #56392	; 0xdc48
  113824:	e3403014 	movt	r3, #20
  113828:	e5933000 	ldr	r3, [r3]
  11382c:	e2832001 	add	r2, r3, #1
  113830:	e30d3c48 	movw	r3, #56392	; 0xdc48
  113834:	e3403014 	movt	r3, #20
  113838:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  11383c:	ebffba84 	bl	102254 <rt_exit_critical>
    if (select_cb.sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
      /* don't leave the thread-local semaphore signalled */
      sys_arch_sem_wait(select_cb.sem, 1);
    }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    sys_sem_free(&select_cb.sem);
  113840:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  113844:	e2833018 	add	r3, r3, #24
  113848:	e1a00003 	mov	r0, r3
  11384c:	ebffdc16 	bl	10a8ac <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    if (nready < 0) {
  113850:	e51b300c 	ldr	r3, [fp, #-12]
  113854:	e3530000 	cmp	r3, #0
  113858:	aa000005 	bge	113874 <lwip_select+0x5b0>
      /* This happens when a socket got closed while waiting */
      set_errno(EBADF);
  11385c:	eb00958f 	bl	138ea0 <__errno_location>
  113860:	e1a02000 	mov	r2, r0
  113864:	e3a03009 	mov	r3, #9
  113868:	e5823000 	str	r3, [r2]
      return -1;
  11386c:	e3e03000 	mvn	r3, #0
  113870:	ea000030 	b	113938 <lwip_select+0x674>
    }

    if (waitres == SYS_ARCH_TIMEOUT) {
  113874:	e51b3008 	ldr	r3, [fp, #-8]
  113878:	e3730001 	cmn	r3, #1
  11387c:	0a000010 	beq	1138c4 <lwip_select+0x600>
         or we would have returned earlier. */
      goto return_copy_fdsets;
    }

    /* See what's set */
    nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  113880:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113884:	e58d3008 	str	r3, [sp, #8]
  113888:	e24b3e12 	sub	r3, fp, #288	; 0x120
  11388c:	e58d3004 	str	r3, [sp, #4]
  113890:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  113894:	e58d3000 	str	r3, [sp]
  113898:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  11389c:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  1138a0:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  1138a4:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  1138a8:	ebfffd7a 	bl	112e98 <lwip_selscan>
  1138ac:	e50b000c 	str	r0, [fp, #-12]
  1138b0:	ea000004 	b	1138c8 <lwip_select+0x604>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
return_copy_fdsets:
  1138b4:	e320f000 	nop	{0}
  1138b8:	ea000002 	b	1138c8 <lwip_select+0x604>
      goto return_copy_fdsets;
  1138bc:	e320f000 	nop	{0}
  1138c0:	ea000000 	b	1138c8 <lwip_select+0x604>
      goto return_copy_fdsets;
  1138c4:	e320f000 	nop	{0}
  set_errno(0);
  if (readset) {
  1138c8:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1138cc:	e3530000 	cmp	r3, #0
  1138d0:	0a000005 	beq	1138ec <lwip_select+0x628>
    *readset = lreadset;
  1138d4:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1138d8:	e1a00003 	mov	r0, r3
  1138dc:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1138e0:	e3a02080 	mov	r2, #128	; 0x80
  1138e4:	e1a01003 	mov	r1, r3
  1138e8:	eb00b51b 	bl	140d5c <memcpy>
  }
  if (writeset) {
  1138ec:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1138f0:	e3530000 	cmp	r3, #0
  1138f4:	0a000005 	beq	113910 <lwip_select+0x64c>
    *writeset = lwriteset;
  1138f8:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1138fc:	e1a00003 	mov	r0, r3
  113900:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113904:	e3a02080 	mov	r2, #128	; 0x80
  113908:	e1a01003 	mov	r1, r3
  11390c:	eb00b512 	bl	140d5c <memcpy>
  }
  if (exceptset) {
  113910:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113914:	e3530000 	cmp	r3, #0
  113918:	0a000005 	beq	113934 <lwip_select+0x670>
    *exceptset = lexceptset;
  11391c:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113920:	e1a00003 	mov	r0, r3
  113924:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113928:	e3a02080 	mov	r2, #128	; 0x80
  11392c:	e1a01003 	mov	r1, r3
  113930:	eb00b509 	bl	140d5c <memcpy>
  }
  return nready;
  113934:	e51b300c 	ldr	r3, [fp, #-12]
}
  113938:	e1a00003 	mov	r0, r3
  11393c:	e24bd004 	sub	sp, fp, #4
  113940:	e8bd8800 	pop	{fp, pc}

00113944 <event_callback>:
#define POLLOUT    0x2
#define POLLERR    0x4
#define UNET_WAKEUP_REQUEST         45
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
  113944:	e92d4800 	push	{fp, lr}
  113948:	e28db004 	add	fp, sp, #4
  11394c:	e24dd028 	sub	sp, sp, #40	; 0x28
  113950:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  113954:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  113958:	e1a03002 	mov	r3, r2
  11395c:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
  113960:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113964:	e3530000 	cmp	r3, #0
  113968:	0a0000e5 	beq	113d04 <event_callback+0x3c0>
    s = conn->socket;
  11396c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113970:	e593301c 	ldr	r3, [r3, #28]
  113974:	e50b3008 	str	r3, [fp, #-8]
    if (s < 0) {
  113978:	e51b3008 	ldr	r3, [fp, #-8]
  11397c:	e3530000 	cmp	r3, #0
  113980:	aa000012 	bge	1139d0 <event_callback+0x8c>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
  113984:	ebffba2c 	bl	10223c <rt_enter_critical>
      if (conn->socket < 0) {
  113988:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11398c:	e593301c 	ldr	r3, [r3, #28]
  113990:	e3530000 	cmp	r3, #0
  113994:	aa000009 	bge	1139c0 <event_callback+0x7c>
        if (evt == NETCONN_EVT_RCVPLUS) {
  113998:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11399c:	e3530000 	cmp	r3, #0
  1139a0:	1a000004 	bne	1139b8 <event_callback+0x74>
          conn->socket--;
  1139a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1139a8:	e593301c 	ldr	r3, [r3, #28]
  1139ac:	e2432001 	sub	r2, r3, #1
  1139b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1139b4:	e583201c 	str	r2, [r3, #28]
        }
        SYS_ARCH_UNPROTECT(lev);
  1139b8:	ebffba25 	bl	102254 <rt_exit_critical>
        return;
  1139bc:	ea0000d3 	b	113d10 <event_callback+0x3cc>
      }
      s = conn->socket;
  1139c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1139c4:	e593301c 	ldr	r3, [r3, #28]
  1139c8:	e50b3008 	str	r3, [fp, #-8]
      SYS_ARCH_UNPROTECT(lev);
  1139cc:	ebffba20 	bl	102254 <rt_exit_critical>
    }

    sock = get_socket(s);
  1139d0:	e51b0008 	ldr	r0, [fp, #-8]
  1139d4:	ebfff542 	bl	110ee4 <get_socket>
  1139d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (!sock) {
  1139dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1139e0:	e3530000 	cmp	r3, #0
  1139e4:	0a0000c8 	beq	113d0c <event_callback+0x3c8>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
  1139e8:	ebffba13 	bl	10223c <rt_enter_critical>
  /* Set event as required */
  switch (evt) {
  1139ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1139f0:	e3530004 	cmp	r3, #4
  1139f4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1139f8:	ea000022 	b	113a88 <event_callback+0x144>
  1139fc:	00113a10 	.word	0x00113a10
  113a00:	00113a34 	.word	0x00113a34
  113a04:	00113a58 	.word	0x00113a58
  113a08:	00113a68 	.word	0x00113a68
  113a0c:	00113a78 	.word	0x00113a78
    case NETCONN_EVT_RCVPLUS:
      /* *RT-Thread* need to be notified in kernel */
      sock->rcvevent++;
  113a10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a14:	e1d330fa 	ldrsh	r3, [r3, #10]
  113a18:	e6ff3073 	uxth	r3, r3
  113a1c:	e2833001 	add	r3, r3, #1
  113a20:	e6ff3073 	uxth	r3, r3
  113a24:	e6bf2073 	sxth	r2, r3
  113a28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a2c:	e1c320ba 	strh	r2, [r3, #10]
      break;
  113a30:	ea00001c 	b	113aa8 <event_callback+0x164>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
  113a34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a38:	e1d330fa 	ldrsh	r3, [r3, #10]
  113a3c:	e6ff3073 	uxth	r3, r3
  113a40:	e2433001 	sub	r3, r3, #1
  113a44:	e6ff3073 	uxth	r3, r3
  113a48:	e6bf2073 	sxth	r2, r3
  113a4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a50:	e1c320ba 	strh	r2, [r3, #10]
      break;
  113a54:	ea000013 	b	113aa8 <event_callback+0x164>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
  113a58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a5c:	e3a02001 	mov	r2, #1
  113a60:	e1c320bc 	strh	r2, [r3, #12]
      break;
  113a64:	ea00000f 	b	113aa8 <event_callback+0x164>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
  113a68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a6c:	e3a02000 	mov	r2, #0
  113a70:	e1c320bc 	strh	r2, [r3, #12]
      break;
  113a74:	ea00000b 	b	113aa8 <event_callback+0x164>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
  113a78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a7c:	e3a02001 	mov	r2, #1
  113a80:	e1c320be 	strh	r2, [r3, #14]
      break;
  113a84:	ea000007 	b	113aa8 <event_callback+0x164>
    default:
      LWIP_ASSERT("unknown event", 0);
  113a88:	e3060f38 	movw	r0, #28472	; 0x6f38
  113a8c:	e3400014 	movt	r0, #20
  113a90:	ebffbd9f 	bl	103114 <rt_kprintf>
  113a94:	e3001679 	movw	r1, #1657	; 0x679
  113a98:	e3060d38 	movw	r0, #27960	; 0x6d38
  113a9c:	e3400014 	movt	r0, #20
  113aa0:	ebffdd83 	bl	10b0b4 <sys_arch_assert>
      break;
  113aa4:	e320f000 	nop	{0}
  }

  int mask = 0;
  113aa8:	e3a03000 	mov	r3, #0
  113aac:	e50b3010 	str	r3, [fp, #-16]
  if (sock != NULL)
  113ab0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113ab4:	e3530000 	cmp	r3, #0
  113ab8:	0a00001b 	beq	113b2c <event_callback+0x1e8>
  {
#if LWIP_VERSION >= 0x20100ff
      if ((void*)(sock->lastdata.pbuf) || sock->rcvevent)
#else
      if ((void *)(sock->lastdata) || sock->rcvevent)
  113abc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113ac0:	e5933004 	ldr	r3, [r3, #4]
  113ac4:	e3530000 	cmp	r3, #0
  113ac8:	1a000003 	bne	113adc <event_callback+0x198>
  113acc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113ad0:	e1d330fa 	ldrsh	r3, [r3, #10]
  113ad4:	e3530000 	cmp	r3, #0
  113ad8:	0a000002 	beq	113ae8 <event_callback+0x1a4>
#endif
      {
          mask |= POLLIN;
  113adc:	e51b3010 	ldr	r3, [fp, #-16]
  113ae0:	e3833001 	orr	r3, r3, #1
  113ae4:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->sendevent)
  113ae8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113aec:	e1d330bc 	ldrh	r3, [r3, #12]
  113af0:	e3530000 	cmp	r3, #0
  113af4:	0a000002 	beq	113b04 <event_callback+0x1c0>
      {
          mask |= POLLOUT;
  113af8:	e51b3010 	ldr	r3, [fp, #-16]
  113afc:	e3833002 	orr	r3, r3, #2
  113b00:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->errevent)
  113b04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b08:	e1d330be 	ldrh	r3, [r3, #14]
  113b0c:	e3530000 	cmp	r3, #0
  113b10:	0a000005 	beq	113b2c <event_callback+0x1e8>
      {
          mask |= POLLERR;
  113b14:	e51b3010 	ldr	r3, [fp, #-16]
  113b18:	e3833004 	orr	r3, r3, #4
  113b1c:	e50b3010 	str	r3, [fp, #-16]
          /* clean error event */
          sock->errevent = 0;
  113b20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b24:	e3a02000 	mov	r2, #0
  113b28:	e1c320be 	strh	r2, [r3, #14]
  //     {
  //       rt_kprintf("create msg error\n");
  //     }
  // }

  if (sock->select_waiting == 0) {
  113b2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b30:	e5d33011 	ldrb	r3, [r3, #17]
  113b34:	e3530000 	cmp	r3, #0
  113b38:	1a000001 	bne	113b44 <event_callback+0x200>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
  113b3c:	ebffb9c4 	bl	102254 <rt_exit_critical>
    return;
  113b40:	ea000072 	b	113d10 <event_callback+0x3cc>
  /* NOTE: This code goes through the select_cb_list list multiple times
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  113b44:	e320f000 	nop	{0}
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  113b48:	e30d3c44 	movw	r3, #56388	; 0xdc44
  113b4c:	e3403014 	movt	r3, #20
  113b50:	e5933000 	ldr	r3, [r3]
  113b54:	e50b300c 	str	r3, [fp, #-12]
  113b58:	ea000064 	b	113cf0 <event_callback+0x3ac>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  113b5c:	e30d3c48 	movw	r3, #56392	; 0xdc48
  113b60:	e3403014 	movt	r3, #20
  113b64:	e5933000 	ldr	r3, [r3]
  113b68:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    if (scb->sem_signalled == 0) {
  113b6c:	e51b300c 	ldr	r3, [fp, #-12]
  113b70:	e5933014 	ldr	r3, [r3, #20]
  113b74:	e3530000 	cmp	r3, #0
  113b78:	1a000050 	bne	113cc0 <event_callback+0x37c>
      /* semaphore not signalled yet */
      int do_signal = 0;
  113b7c:	e3a03000 	mov	r3, #0
  113b80:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
  113b84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b88:	e1d330fa 	ldrsh	r3, [r3, #10]
  113b8c:	e3530000 	cmp	r3, #0
  113b90:	da000010 	ble	113bd8 <event_callback+0x294>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
  113b94:	e51b300c 	ldr	r3, [fp, #-12]
  113b98:	e5933008 	ldr	r3, [r3, #8]
  113b9c:	e3530000 	cmp	r3, #0
  113ba0:	0a00000c 	beq	113bd8 <event_callback+0x294>
  113ba4:	e51b300c 	ldr	r3, [fp, #-12]
  113ba8:	e5933008 	ldr	r3, [r3, #8]
  113bac:	e51b2008 	ldr	r2, [fp, #-8]
  113bb0:	e1a022a2 	lsr	r2, r2, #5
  113bb4:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113bb8:	e51b3008 	ldr	r3, [fp, #-8]
  113bbc:	e203301f 	and	r3, r3, #31
  113bc0:	e1a03332 	lsr	r3, r2, r3
  113bc4:	e2033001 	and	r3, r3, #1
  113bc8:	e3530000 	cmp	r3, #0
  113bcc:	0a000001 	beq	113bd8 <event_callback+0x294>
          do_signal = 1;
  113bd0:	e3a03001 	mov	r3, #1
  113bd4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->sendevent != 0) {
  113bd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113bdc:	e1d330bc 	ldrh	r3, [r3, #12]
  113be0:	e3530000 	cmp	r3, #0
  113be4:	0a000013 	beq	113c38 <event_callback+0x2f4>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
  113be8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113bec:	e3530000 	cmp	r3, #0
  113bf0:	1a000010 	bne	113c38 <event_callback+0x2f4>
  113bf4:	e51b300c 	ldr	r3, [fp, #-12]
  113bf8:	e593300c 	ldr	r3, [r3, #12]
  113bfc:	e3530000 	cmp	r3, #0
  113c00:	0a00000c 	beq	113c38 <event_callback+0x2f4>
  113c04:	e51b300c 	ldr	r3, [fp, #-12]
  113c08:	e593300c 	ldr	r3, [r3, #12]
  113c0c:	e51b2008 	ldr	r2, [fp, #-8]
  113c10:	e1a022a2 	lsr	r2, r2, #5
  113c14:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113c18:	e51b3008 	ldr	r3, [fp, #-8]
  113c1c:	e203301f 	and	r3, r3, #31
  113c20:	e1a03332 	lsr	r3, r2, r3
  113c24:	e2033001 	and	r3, r3, #1
  113c28:	e3530000 	cmp	r3, #0
  113c2c:	0a000001 	beq	113c38 <event_callback+0x2f4>
          do_signal = 1;
  113c30:	e3a03001 	mov	r3, #1
  113c34:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->errevent != 0) {
  113c38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113c3c:	e1d330be 	ldrh	r3, [r3, #14]
  113c40:	e3530000 	cmp	r3, #0
  113c44:	0a000013 	beq	113c98 <event_callback+0x354>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
  113c48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113c4c:	e3530000 	cmp	r3, #0
  113c50:	1a000010 	bne	113c98 <event_callback+0x354>
  113c54:	e51b300c 	ldr	r3, [fp, #-12]
  113c58:	e5933010 	ldr	r3, [r3, #16]
  113c5c:	e3530000 	cmp	r3, #0
  113c60:	0a00000c 	beq	113c98 <event_callback+0x354>
  113c64:	e51b300c 	ldr	r3, [fp, #-12]
  113c68:	e5933010 	ldr	r3, [r3, #16]
  113c6c:	e51b2008 	ldr	r2, [fp, #-8]
  113c70:	e1a022a2 	lsr	r2, r2, #5
  113c74:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113c78:	e51b3008 	ldr	r3, [fp, #-8]
  113c7c:	e203301f 	and	r3, r3, #31
  113c80:	e1a03332 	lsr	r3, r2, r3
  113c84:	e2033001 	and	r3, r3, #1
  113c88:	e3530000 	cmp	r3, #0
  113c8c:	0a000001 	beq	113c98 <event_callback+0x354>
          do_signal = 1;
  113c90:	e3a03001 	mov	r3, #1
  113c94:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (do_signal) {
  113c98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113c9c:	e3530000 	cmp	r3, #0
  113ca0:	0a000006 	beq	113cc0 <event_callback+0x37c>
        scb->sem_signalled = 1;
  113ca4:	e51b300c 	ldr	r3, [fp, #-12]
  113ca8:	e3a02001 	mov	r2, #1
  113cac:	e5832014 	str	r2, [r3, #20]
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
  113cb0:	e51b300c 	ldr	r3, [fp, #-12]
  113cb4:	e2833018 	add	r3, r3, #24
  113cb8:	e1a00003 	mov	r0, r3
  113cbc:	ebffdb05 	bl	10a8d8 <sys_sem_signal>
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
  113cc0:	ebffb963 	bl	102254 <rt_exit_critical>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
  113cc4:	ebffb95c 	bl	10223c <rt_enter_critical>
    if (last_select_cb_ctr != select_cb_ctr) {
  113cc8:	e30d3c48 	movw	r3, #56392	; 0xdc48
  113ccc:	e3403014 	movt	r3, #20
  113cd0:	e5933000 	ldr	r3, [r3]
  113cd4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  113cd8:	e1520003 	cmp	r2, r3
  113cdc:	0a000000 	beq	113ce4 <event_callback+0x3a0>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
  113ce0:	eaffff98 	b	113b48 <event_callback+0x204>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  113ce4:	e51b300c 	ldr	r3, [fp, #-12]
  113ce8:	e5933000 	ldr	r3, [r3]
  113cec:	e50b300c 	str	r3, [fp, #-12]
  113cf0:	e51b300c 	ldr	r3, [fp, #-12]
  113cf4:	e3530000 	cmp	r3, #0
  113cf8:	1affff97 	bne	113b5c <event_callback+0x218>
    }
  }
  SYS_ARCH_UNPROTECT(lev);
  113cfc:	ebffb954 	bl	102254 <rt_exit_critical>
  113d00:	ea000002 	b	113d10 <event_callback+0x3cc>
    return;
  113d04:	e320f000 	nop	{0}
  113d08:	ea000000 	b	113d10 <event_callback+0x3cc>
      return;
  113d0c:	e320f000 	nop	{0}
}
  113d10:	e24bd004 	sub	sp, fp, #4
  113d14:	e8bd8800 	pop	{fp, pc}

00113d18 <lwip_shutdown>:
/**
 * Close one end of a full-duplex connection.
 */
int
lwip_shutdown(int s, int how)
{
  113d18:	e92d4800 	push	{fp, lr}
  113d1c:	e28db004 	add	fp, sp, #4
  113d20:	e24dd028 	sub	sp, sp, #40	; 0x28
  113d24:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  113d28:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct lwip_sock *sock;
  err_t err;
  u8_t shut_rx = 0, shut_tx = 0;
  113d2c:	e3a03000 	mov	r3, #0
  113d30:	e54b3005 	strb	r3, [fp, #-5]
  113d34:	e3a03000 	mov	r3, #0
  113d38:	e54b3006 	strb	r3, [fp, #-6]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));

  sock = get_socket(s);
  113d3c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  113d40:	ebfff467 	bl	110ee4 <get_socket>
  113d44:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  113d48:	e51b300c 	ldr	r3, [fp, #-12]
  113d4c:	e3530000 	cmp	r3, #0
  113d50:	1a000001 	bne	113d5c <lwip_shutdown+0x44>
    return -1;
  113d54:	e3e03000 	mvn	r3, #0
  113d58:	ea000067 	b	113efc <lwip_shutdown+0x1e4>
  }

  if (sock->conn != NULL) {
  113d5c:	e51b300c 	ldr	r3, [fp, #-12]
  113d60:	e5933000 	ldr	r3, [r3]
  113d64:	e3530000 	cmp	r3, #0
  113d68:	0a000014 	beq	113dc0 <lwip_shutdown+0xa8>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  113d6c:	e51b300c 	ldr	r3, [fp, #-12]
  113d70:	e5933000 	ldr	r3, [r3]
  113d74:	e5933000 	ldr	r3, [r3]
  113d78:	e20330f0 	and	r3, r3, #240	; 0xf0
  113d7c:	e3530010 	cmp	r3, #16
  113d80:	0a00001d 	beq	113dfc <lwip_shutdown+0xe4>
      sock_set_errno(sock, EOPNOTSUPP);
  113d84:	e3a0305f 	mov	r3, #95	; 0x5f
  113d88:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  113d8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113d90:	e6ef2073 	uxtb	r2, r3
  113d94:	e51b300c 	ldr	r3, [fp, #-12]
  113d98:	e5c32010 	strb	r2, [r3, #16]
  113d9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113da0:	e3530000 	cmp	r3, #0
  113da4:	0a000003 	beq	113db8 <lwip_shutdown+0xa0>
  113da8:	eb00943c 	bl	138ea0 <__errno_location>
  113dac:	e1a02000 	mov	r2, r0
  113db0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113db4:	e5823000 	str	r3, [r2]
      return -1;
  113db8:	e3e03000 	mvn	r3, #0
  113dbc:	ea00004e 	b	113efc <lwip_shutdown+0x1e4>
    }
  } else {
    sock_set_errno(sock, ENOTCONN);
  113dc0:	e3a0306b 	mov	r3, #107	; 0x6b
  113dc4:	e50b3010 	str	r3, [fp, #-16]
  113dc8:	e51b3010 	ldr	r3, [fp, #-16]
  113dcc:	e6ef2073 	uxtb	r2, r3
  113dd0:	e51b300c 	ldr	r3, [fp, #-12]
  113dd4:	e5c32010 	strb	r2, [r3, #16]
  113dd8:	e51b3010 	ldr	r3, [fp, #-16]
  113ddc:	e3530000 	cmp	r3, #0
  113de0:	0a000003 	beq	113df4 <lwip_shutdown+0xdc>
  113de4:	eb00942d 	bl	138ea0 <__errno_location>
  113de8:	e1a02000 	mov	r2, r0
  113dec:	e51b3010 	ldr	r3, [fp, #-16]
  113df0:	e5823000 	str	r3, [r2]
    return -1;
  113df4:	e3e03000 	mvn	r3, #0
  113df8:	ea00003f 	b	113efc <lwip_shutdown+0x1e4>
  }

  if (how == SHUT_RD) {
  113dfc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113e00:	e3530000 	cmp	r3, #0
  113e04:	1a000002 	bne	113e14 <lwip_shutdown+0xfc>
    shut_rx = 1;
  113e08:	e3a03001 	mov	r3, #1
  113e0c:	e54b3005 	strb	r3, [fp, #-5]
  113e10:	ea00001c 	b	113e88 <lwip_shutdown+0x170>
  } else if (how == SHUT_WR) {
  113e14:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113e18:	e3530001 	cmp	r3, #1
  113e1c:	1a000002 	bne	113e2c <lwip_shutdown+0x114>
    shut_tx = 1;
  113e20:	e3a03001 	mov	r3, #1
  113e24:	e54b3006 	strb	r3, [fp, #-6]
  113e28:	ea000016 	b	113e88 <lwip_shutdown+0x170>
  } else if (how == SHUT_RDWR) {
  113e2c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113e30:	e3530002 	cmp	r3, #2
  113e34:	1a000004 	bne	113e4c <lwip_shutdown+0x134>
    shut_rx = 1;
  113e38:	e3a03001 	mov	r3, #1
  113e3c:	e54b3005 	strb	r3, [fp, #-5]
    shut_tx = 1;
  113e40:	e3a03001 	mov	r3, #1
  113e44:	e54b3006 	strb	r3, [fp, #-6]
  113e48:	ea00000e 	b	113e88 <lwip_shutdown+0x170>
  } else {
    sock_set_errno(sock, EINVAL);
  113e4c:	e3a03016 	mov	r3, #22
  113e50:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113e54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113e58:	e6ef2073 	uxtb	r2, r3
  113e5c:	e51b300c 	ldr	r3, [fp, #-12]
  113e60:	e5c32010 	strb	r2, [r3, #16]
  113e64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113e68:	e3530000 	cmp	r3, #0
  113e6c:	0a000003 	beq	113e80 <lwip_shutdown+0x168>
  113e70:	eb00940a 	bl	138ea0 <__errno_location>
  113e74:	e1a02000 	mov	r2, r0
  113e78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113e7c:	e5823000 	str	r3, [r2]
    return -1;
  113e80:	e3e03000 	mvn	r3, #0
  113e84:	ea00001c 	b	113efc <lwip_shutdown+0x1e4>
  }
  err = netconn_shutdown(sock->conn, shut_rx, shut_tx);
  113e88:	e51b300c 	ldr	r3, [fp, #-12]
  113e8c:	e5933000 	ldr	r3, [r3]
  113e90:	e55b2006 	ldrb	r2, [fp, #-6]
  113e94:	e55b1005 	ldrb	r1, [fp, #-5]
  113e98:	e1a00003 	mov	r0, r3
  113e9c:	ebffe0c3 	bl	10c1b0 <netconn_shutdown>
  113ea0:	e1a03000 	mov	r3, r0
  113ea4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb

  sock_set_errno(sock, err_to_errno(err));
  113ea8:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  113eac:	e1a00003 	mov	r0, r3
  113eb0:	ebffefe3 	bl	10fe44 <err_to_errno>
  113eb4:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  113eb8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113ebc:	e6ef2073 	uxtb	r2, r3
  113ec0:	e51b300c 	ldr	r3, [fp, #-12]
  113ec4:	e5c32010 	strb	r2, [r3, #16]
  113ec8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113ecc:	e3530000 	cmp	r3, #0
  113ed0:	0a000003 	beq	113ee4 <lwip_shutdown+0x1cc>
  113ed4:	eb0093f1 	bl	138ea0 <__errno_location>
  113ed8:	e1a02000 	mov	r2, r0
  113edc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113ee0:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? 0 : -1);
  113ee4:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  113ee8:	e3530000 	cmp	r3, #0
  113eec:	1a000001 	bne	113ef8 <lwip_shutdown+0x1e0>
  113ef0:	e3a03000 	mov	r3, #0
  113ef4:	ea000000 	b	113efc <lwip_shutdown+0x1e4>
  113ef8:	e3e03000 	mvn	r3, #0
}
  113efc:	e1a00003 	mov	r0, r3
  113f00:	e24bd004 	sub	sp, fp, #4
  113f04:	e8bd8800 	pop	{fp, pc}

00113f08 <lwip_getaddrname>:

static int
lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)
{
  113f08:	e92d4810 	push	{r4, fp, lr}
  113f0c:	e28db008 	add	fp, sp, #8
  113f10:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  113f14:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  113f18:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  113f1c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  113f20:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  union sockaddr_aligned saddr;
  ip_addr_t naddr;
  u16_t port;
  err_t err;

  sock = get_socket(s);
  113f24:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  113f28:	ebfff3ed 	bl	110ee4 <get_socket>
  113f2c:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  113f30:	e51b3010 	ldr	r3, [fp, #-16]
  113f34:	e3530000 	cmp	r3, #0
  113f38:	1a000001 	bne	113f44 <lwip_getaddrname+0x3c>
    return -1;
  113f3c:	e3e03000 	mvn	r3, #0
  113f40:	ea00004d 	b	11407c <lwip_getaddrname+0x174>
  }

  /* get the IP address and port */
  err = netconn_getaddr(sock->conn, &naddr, &port, local);
  113f44:	e51b3010 	ldr	r3, [fp, #-16]
  113f48:	e5930000 	ldr	r0, [r3]
  113f4c:	e55b3041 	ldrb	r3, [fp, #-65]	; 0xffffffbf
  113f50:	e24b2032 	sub	r2, fp, #50	; 0x32
  113f54:	e24b1030 	sub	r1, fp, #48	; 0x30
  113f58:	ebffdd45 	bl	10b474 <netconn_getaddr>
  113f5c:	e1a03000 	mov	r3, r0
  113f60:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  113f64:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  113f68:	e3530000 	cmp	r3, #0
  113f6c:	0a000010 	beq	113fb4 <lwip_getaddrname+0xac>
    sock_set_errno(sock, err_to_errno(err));
  113f70:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  113f74:	e1a00003 	mov	r0, r3
  113f78:	ebffefb1 	bl	10fe44 <err_to_errno>
  113f7c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  113f80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113f84:	e6ef2073 	uxtb	r2, r3
  113f88:	e51b3010 	ldr	r3, [fp, #-16]
  113f8c:	e5c32010 	strb	r2, [r3, #16]
  113f90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113f94:	e3530000 	cmp	r3, #0
  113f98:	0a000003 	beq	113fac <lwip_getaddrname+0xa4>
  113f9c:	eb0093bf 	bl	138ea0 <__errno_location>
  113fa0:	e1a02000 	mov	r2, r0
  113fa4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113fa8:	e5823000 	str	r3, [r2]
    return -1;
  113fac:	e3e03000 	mvn	r3, #0
  113fb0:	ea000031 	b	11407c <lwip_getaddrname+0x174>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(&naddr), ip_2_ip4(&naddr));
    IP_SET_TYPE_VAL(naddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, &naddr, port);
  113fb4:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113fb8:	e3a02010 	mov	r2, #16
  113fbc:	e5c32000 	strb	r2, [r3]
  113fc0:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113fc4:	e3a02002 	mov	r2, #2
  113fc8:	e5c32001 	strb	r2, [r3, #1]
  113fcc:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  113fd0:	e24b402c 	sub	r4, fp, #44	; 0x2c
  113fd4:	e1a00003 	mov	r0, r3
  113fd8:	eb00096e 	bl	116598 <lwip_htons>
  113fdc:	e1a03000 	mov	r3, r0
  113fe0:	e1c430b2 	strh	r3, [r4, #2]
  113fe4:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113fe8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  113fec:	e5832004 	str	r2, [r3, #4]
  113ff0:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113ff4:	e2833008 	add	r3, r3, #8
  113ff8:	e3a02008 	mov	r2, #8
  113ffc:	e3a01000 	mov	r1, #0
  114000:	e1a00003 	mov	r0, r3
  114004:	eb00b48c 	bl	14123c <memset>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getaddrname(%d, addr=", s));
  ip_addr_debug_print_val(SOCKETS_DEBUG, naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", port));

  if (*namelen > saddr.sa.sa_len) {
  114008:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  11400c:	e5933000 	ldr	r3, [r3]
  114010:	e55b202c 	ldrb	r2, [fp, #-44]	; 0xffffffd4
  114014:	e1530002 	cmp	r3, r2
  114018:	9a000003 	bls	11402c <lwip_getaddrname+0x124>
    *namelen = saddr.sa.sa_len;
  11401c:	e55b302c 	ldrb	r3, [fp, #-44]	; 0xffffffd4
  114020:	e1a02003 	mov	r2, r3
  114024:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  114028:	e5832000 	str	r2, [r3]
  }
  MEMCPY(name, &saddr, *namelen);
  11402c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  114030:	e5932000 	ldr	r2, [r3]
  114034:	e24b302c 	sub	r3, fp, #44	; 0x2c
  114038:	e1a01003 	mov	r1, r3
  11403c:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  114040:	eb00b345 	bl	140d5c <memcpy>

  sock_set_errno(sock, 0);
  114044:	e3a03000 	mov	r3, #0
  114048:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  11404c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  114050:	e6ef2073 	uxtb	r2, r3
  114054:	e51b3010 	ldr	r3, [fp, #-16]
  114058:	e5c32010 	strb	r2, [r3, #16]
  11405c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  114060:	e3530000 	cmp	r3, #0
  114064:	0a000003 	beq	114078 <lwip_getaddrname+0x170>
  114068:	eb00938c 	bl	138ea0 <__errno_location>
  11406c:	e1a02000 	mov	r2, r0
  114070:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  114074:	e5823000 	str	r3, [r2]
  return 0;
  114078:	e3a03000 	mov	r3, #0
}
  11407c:	e1a00003 	mov	r0, r3
  114080:	e24bd008 	sub	sp, fp, #8
  114084:	e8bd8810 	pop	{r4, fp, pc}

00114088 <lwip_getpeername>:

int
lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)
{
  114088:	e92d4800 	push	{fp, lr}
  11408c:	e28db004 	add	fp, sp, #4
  114090:	e24dd010 	sub	sp, sp, #16
  114094:	e50b0008 	str	r0, [fp, #-8]
  114098:	e50b100c 	str	r1, [fp, #-12]
  11409c:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 0);
  1140a0:	e3a03000 	mov	r3, #0
  1140a4:	e51b2010 	ldr	r2, [fp, #-16]
  1140a8:	e51b100c 	ldr	r1, [fp, #-12]
  1140ac:	e51b0008 	ldr	r0, [fp, #-8]
  1140b0:	ebffff94 	bl	113f08 <lwip_getaddrname>
  1140b4:	e1a03000 	mov	r3, r0
}
  1140b8:	e1a00003 	mov	r0, r3
  1140bc:	e24bd004 	sub	sp, fp, #4
  1140c0:	e8bd8800 	pop	{fp, pc}

001140c4 <lwip_getsockname>:

int
lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)
{
  1140c4:	e92d4800 	push	{fp, lr}
  1140c8:	e28db004 	add	fp, sp, #4
  1140cc:	e24dd010 	sub	sp, sp, #16
  1140d0:	e50b0008 	str	r0, [fp, #-8]
  1140d4:	e50b100c 	str	r1, [fp, #-12]
  1140d8:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 1);
  1140dc:	e3a03001 	mov	r3, #1
  1140e0:	e51b2010 	ldr	r2, [fp, #-16]
  1140e4:	e51b100c 	ldr	r1, [fp, #-12]
  1140e8:	e51b0008 	ldr	r0, [fp, #-8]
  1140ec:	ebffff85 	bl	113f08 <lwip_getaddrname>
  1140f0:	e1a03000 	mov	r3, r0
}
  1140f4:	e1a00003 	mov	r0, r3
  1140f8:	e24bd004 	sub	sp, fp, #4
  1140fc:	e8bd8800 	pop	{fp, pc}

00114100 <lwip_getsockopt>:

int
lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  114100:	e92d4800 	push	{fp, lr}
  114104:	e28db004 	add	fp, sp, #4
  114108:	e24dd028 	sub	sp, sp, #40	; 0x28
  11410c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  114110:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  114114:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  114118:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err;
  struct lwip_sock *sock = get_socket(s);
  11411c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  114120:	ebfff36f 	bl	110ee4 <get_socket>
  114124:	e50b0008 	str	r0, [fp, #-8]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  114128:	e51b3008 	ldr	r3, [fp, #-8]
  11412c:	e3530000 	cmp	r3, #0
  114130:	1a000001 	bne	11413c <lwip_getsockopt+0x3c>
    return -1;
  114134:	e3e03000 	mvn	r3, #0
  114138:	ea000036 	b	114218 <lwip_getsockopt+0x118>
  }

  if ((NULL == optval) || (NULL == optlen)) {
  11413c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114140:	e3530000 	cmp	r3, #0
  114144:	0a000002 	beq	114154 <lwip_getsockopt+0x54>
  114148:	e59b3004 	ldr	r3, [fp, #4]
  11414c:	e3530000 	cmp	r3, #0
  114150:	1a00000e 	bne	114190 <lwip_getsockopt+0x90>
    sock_set_errno(sock, EFAULT);
  114154:	e3a0300e 	mov	r3, #14
  114158:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  11415c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114160:	e6ef2073 	uxtb	r2, r3
  114164:	e51b3008 	ldr	r3, [fp, #-8]
  114168:	e5c32010 	strb	r2, [r3, #16]
  11416c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114170:	e3530000 	cmp	r3, #0
  114174:	0a000003 	beq	114188 <lwip_getsockopt+0x88>
  114178:	eb009348 	bl	138ea0 <__errno_location>
  11417c:	e1a02000 	mov	r2, r0
  114180:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114184:	e5823000 	str	r3, [r2]
    return -1;
  114188:	e3e03000 	mvn	r3, #0
  11418c:	ea000021 	b	114218 <lwip_getsockopt+0x118>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  114190:	e30f060c 	movw	r0, #62988	; 0xf60c
  114194:	e3400014 	movt	r0, #20
  114198:	ebffda49 	bl	10aac4 <sys_mutex_lock>
  err = lwip_getsockopt_impl(s, level, optname, optval, optlen);
  11419c:	e59b3004 	ldr	r3, [fp, #4]
  1141a0:	e58d3000 	str	r3, [sp]
  1141a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1141a8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1141ac:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1141b0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1141b4:	eb00001a 	bl	114224 <lwip_getsockopt_impl>
  1141b8:	e1a03000 	mov	r3, r0
  1141bc:	e54b3009 	strb	r3, [fp, #-9]
  UNLOCK_TCPIP_CORE();
  1141c0:	e30f060c 	movw	r0, #62988	; 0xf60c
  1141c4:	e3400014 	movt	r0, #20
  1141c8:	ebffda49 	bl	10aaf4 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  1141cc:	e55b3009 	ldrb	r3, [fp, #-9]
  1141d0:	e50b3010 	str	r3, [fp, #-16]
  1141d4:	e51b3010 	ldr	r3, [fp, #-16]
  1141d8:	e6ef2073 	uxtb	r2, r3
  1141dc:	e51b3008 	ldr	r3, [fp, #-8]
  1141e0:	e5c32010 	strb	r2, [r3, #16]
  1141e4:	e51b3010 	ldr	r3, [fp, #-16]
  1141e8:	e3530000 	cmp	r3, #0
  1141ec:	0a000003 	beq	114200 <lwip_getsockopt+0x100>
  1141f0:	eb00932a 	bl	138ea0 <__errno_location>
  1141f4:	e1a02000 	mov	r2, r0
  1141f8:	e51b3010 	ldr	r3, [fp, #-16]
  1141fc:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  114200:	e55b3009 	ldrb	r3, [fp, #-9]
  114204:	e3530000 	cmp	r3, #0
  114208:	0a000001 	beq	114214 <lwip_getsockopt+0x114>
  11420c:	e3e03000 	mvn	r3, #0
  114210:	ea000000 	b	114218 <lwip_getsockopt+0x118>
  114214:	e3a03000 	mov	r3, #0
}
  114218:	e1a00003 	mov	r0, r3
  11421c:	e24bd004 	sub	sp, fp, #4
  114220:	e8bd8800 	pop	{fp, pc}

00114224 <lwip_getsockopt_impl>:
/** lwip_getsockopt_impl: the actual implementation of getsockopt:
 * same argument as lwip_getsockopt, either called directly or through callback
 */
static u8_t
lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  114224:	e92d4800 	push	{fp, lr}
  114228:	e28db004 	add	fp, sp, #4
  11422c:	e24dd028 	sub	sp, sp, #40	; 0x28
  114230:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  114234:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  114238:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  11423c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  114240:	e3a03000 	mov	r3, #0
  114244:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  114248:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  11424c:	ebfff349 	bl	110f78 <tryget_socket>
  114250:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  114254:	e51b300c 	ldr	r3, [fp, #-12]
  114258:	e3530000 	cmp	r3, #0
  11425c:	1a000001 	bne	114268 <lwip_getsockopt_impl+0x44>
    return EBADF;
  114260:	e3a03009 	mov	r3, #9
  114264:	ea00026a 	b	114c14 <lwip_getsockopt_impl+0x9f0>
  }

  switch (level) {
  114268:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11426c:	e3530006 	cmp	r3, #6
  114270:	0a0001fb 	beq	114a64 <lwip_getsockopt_impl+0x840>
  114274:	e3530006 	cmp	r3, #6
  114278:	ca000002 	bgt	114288 <lwip_getsockopt_impl+0x64>
  11427c:	e3530000 	cmp	r3, #0
  114280:	0a000155 	beq	1147dc <lwip_getsockopt_impl+0x5b8>
  114284:	ea00025e 	b	114c04 <lwip_getsockopt_impl+0x9e0>
  114288:	e35300ff 	cmp	r3, #255	; 0xff
  11428c:	0a000258 	beq	114bf4 <lwip_getsockopt_impl+0x9d0>
  114290:	e3002fff 	movw	r2, #4095	; 0xfff
  114294:	e1530002 	cmp	r3, r2
  114298:	1a000259 	bne	114c04 <lwip_getsockopt_impl+0x9e0>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  11429c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1142a0:	e3012002 	movw	r2, #4098	; 0x1002
  1142a4:	e1530002 	cmp	r3, r2
  1142a8:	0a000114 	beq	114700 <lwip_getsockopt_impl+0x4dc>
  1142ac:	e3012002 	movw	r2, #4098	; 0x1002
  1142b0:	e1530002 	cmp	r3, r2
  1142b4:	ca00000b 	bgt	1142e8 <lwip_getsockopt_impl+0xc4>
  1142b8:	e3530004 	cmp	r3, #4
  1142bc:	0a000049 	beq	1143e8 <lwip_getsockopt_impl+0x1c4>
  1142c0:	e3530004 	cmp	r3, #4
  1142c4:	ca000002 	bgt	1142d4 <lwip_getsockopt_impl+0xb0>
  1142c8:	e3530002 	cmp	r3, #2
  1142cc:	0a000019 	beq	114338 <lwip_getsockopt_impl+0x114>
  1142d0:	ea00013d 	b	1147cc <lwip_getsockopt_impl+0x5a8>
  1142d4:	e3530008 	cmp	r3, #8
  1142d8:	0a000042 	beq	1143e8 <lwip_getsockopt_impl+0x1c4>
  1142dc:	e3530020 	cmp	r3, #32
  1142e0:	0a000040 	beq	1143e8 <lwip_getsockopt_impl+0x1c4>
  1142e4:	ea000138 	b	1147cc <lwip_getsockopt_impl+0x5a8>
  1142e8:	e3012007 	movw	r2, #4103	; 0x1007
  1142ec:	e1530002 	cmp	r3, r2
  1142f0:	0a000082 	beq	114500 <lwip_getsockopt_impl+0x2dc>
  1142f4:	e3012007 	movw	r2, #4103	; 0x1007
  1142f8:	e1530002 	cmp	r3, r2
  1142fc:	ca000006 	bgt	11431c <lwip_getsockopt_impl+0xf8>
  114300:	e3012005 	movw	r2, #4101	; 0x1005
  114304:	e1530002 	cmp	r3, r2
  114308:	0a0000ae 	beq	1145c8 <lwip_getsockopt_impl+0x3a4>
  11430c:	e3012006 	movw	r2, #4102	; 0x1006
  114310:	e1530002 	cmp	r3, r2
  114314:	0a0000d2 	beq	114664 <lwip_getsockopt_impl+0x440>
  114318:	ea00012b 	b	1147cc <lwip_getsockopt_impl+0x5a8>
  11431c:	e3012008 	movw	r2, #4104	; 0x1008
  114320:	e1530002 	cmp	r3, r2
  114324:	0a00004a 	beq	114454 <lwip_getsockopt_impl+0x230>
  114328:	e301200a 	movw	r2, #4106	; 0x100a
  11432c:	e1530002 	cmp	r3, r2
  114330:	0a000104 	beq	114748 <lwip_getsockopt_impl+0x524>
  114334:	ea000124 	b	1147cc <lwip_getsockopt_impl+0x5a8>

#if LWIP_TCP
    case SO_ACCEPTCONN:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114338:	e59b3004 	ldr	r3, [fp, #4]
  11433c:	e5933000 	ldr	r3, [r3]
  114340:	e3530003 	cmp	r3, #3
  114344:	8a000001 	bhi	114350 <lwip_getsockopt_impl+0x12c>
  114348:	e3a03016 	mov	r3, #22
  11434c:	ea000230 	b	114c14 <lwip_getsockopt_impl+0x9f0>
  114350:	e51b300c 	ldr	r3, [fp, #-12]
  114354:	e5933000 	ldr	r3, [r3]
  114358:	e3530000 	cmp	r3, #0
  11435c:	0a000004 	beq	114374 <lwip_getsockopt_impl+0x150>
  114360:	e51b300c 	ldr	r3, [fp, #-12]
  114364:	e5933000 	ldr	r3, [r3]
  114368:	e5933008 	ldr	r3, [r3, #8]
  11436c:	e3530000 	cmp	r3, #0
  114370:	1a000001 	bne	11437c <lwip_getsockopt_impl+0x158>
  114374:	e3a03016 	mov	r3, #22
  114378:	ea000225 	b	114c14 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_TCP) {
  11437c:	e51b300c 	ldr	r3, [fp, #-12]
  114380:	e5933000 	ldr	r3, [r3]
  114384:	e5933000 	ldr	r3, [r3]
  114388:	e20330f0 	and	r3, r3, #240	; 0xf0
  11438c:	e3530010 	cmp	r3, #16
  114390:	0a000001 	beq	11439c <lwip_getsockopt_impl+0x178>
        return ENOPROTOOPT;
  114394:	e3a0305c 	mov	r3, #92	; 0x5c
  114398:	ea00021d 	b	114c14 <lwip_getsockopt_impl+0x9f0>
      }
      if ((sock->conn->pcb.tcp != NULL) && (sock->conn->pcb.tcp->state == LISTEN)) {
  11439c:	e51b300c 	ldr	r3, [fp, #-12]
  1143a0:	e5933000 	ldr	r3, [r3]
  1143a4:	e5933008 	ldr	r3, [r3, #8]
  1143a8:	e3530000 	cmp	r3, #0
  1143ac:	0a000009 	beq	1143d8 <lwip_getsockopt_impl+0x1b4>
  1143b0:	e51b300c 	ldr	r3, [fp, #-12]
  1143b4:	e5933000 	ldr	r3, [r3]
  1143b8:	e5933008 	ldr	r3, [r3, #8]
  1143bc:	e5933014 	ldr	r3, [r3, #20]
  1143c0:	e3530001 	cmp	r3, #1
  1143c4:	1a000003 	bne	1143d8 <lwip_getsockopt_impl+0x1b4>
        *(int*)optval = 1;
  1143c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1143cc:	e3a02001 	mov	r2, #1
  1143d0:	e5832000 	str	r2, [r3]
      } else {
        *(int*)optval = 0;
      }
      break;
  1143d4:	ea0000ff 	b	1147d8 <lwip_getsockopt_impl+0x5b4>
        *(int*)optval = 0;
  1143d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1143dc:	e3a02000 	mov	r2, #0
  1143e0:	e5832000 	str	r2, [r3]
      break;
  1143e4:	ea0000fb 	b	1147d8 <lwip_getsockopt_impl+0x5b4>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  1143e8:	e59b3004 	ldr	r3, [fp, #4]
  1143ec:	e5933000 	ldr	r3, [r3]
  1143f0:	e3530003 	cmp	r3, #3
  1143f4:	8a000001 	bhi	114400 <lwip_getsockopt_impl+0x1dc>
  1143f8:	e3a03016 	mov	r3, #22
  1143fc:	ea000204 	b	114c14 <lwip_getsockopt_impl+0x9f0>
  114400:	e51b300c 	ldr	r3, [fp, #-12]
  114404:	e5933000 	ldr	r3, [r3]
  114408:	e3530000 	cmp	r3, #0
  11440c:	0a000004 	beq	114424 <lwip_getsockopt_impl+0x200>
  114410:	e51b300c 	ldr	r3, [fp, #-12]
  114414:	e5933000 	ldr	r3, [r3]
  114418:	e5933008 	ldr	r3, [r3, #8]
  11441c:	e3530000 	cmp	r3, #0
  114420:	1a000001 	bne	11442c <lwip_getsockopt_impl+0x208>
  114424:	e3a03016 	mov	r3, #22
  114428:	ea0001f9 	b	114c14 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = ip_get_option(sock->conn->pcb.ip, optname);
  11442c:	e51b300c 	ldr	r3, [fp, #-12]
  114430:	e5933000 	ldr	r3, [r3]
  114434:	e5933008 	ldr	r3, [r3, #8]
  114438:	e5d33008 	ldrb	r3, [r3, #8]
  11443c:	e1a02003 	mov	r2, r3
  114440:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114444:	e0022003 	and	r2, r2, r3
  114448:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11444c:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",
                                  s, optname, (*(int*)optval?"on":"off")));
      break;
  114450:	ea0000e0 	b	1147d8 <lwip_getsockopt_impl+0x5b4>

    case SO_TYPE:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  114454:	e59b3004 	ldr	r3, [fp, #4]
  114458:	e5933000 	ldr	r3, [r3]
  11445c:	e3530003 	cmp	r3, #3
  114460:	8a000001 	bhi	11446c <lwip_getsockopt_impl+0x248>
  114464:	e3a03016 	mov	r3, #22
  114468:	ea0001e9 	b	114c14 <lwip_getsockopt_impl+0x9f0>
  11446c:	e51b300c 	ldr	r3, [fp, #-12]
  114470:	e5933000 	ldr	r3, [r3]
  114474:	e3530000 	cmp	r3, #0
  114478:	1a000001 	bne	114484 <lwip_getsockopt_impl+0x260>
  11447c:	e3a03016 	mov	r3, #22
  114480:	ea0001e3 	b	114c14 <lwip_getsockopt_impl+0x9f0>
      switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
  114484:	e51b300c 	ldr	r3, [fp, #-12]
  114488:	e5933000 	ldr	r3, [r3]
  11448c:	e5933000 	ldr	r3, [r3]
  114490:	e20330f0 	and	r3, r3, #240	; 0xf0
  114494:	e3530020 	cmp	r3, #32
  114498:	0a00000c 	beq	1144d0 <lwip_getsockopt_impl+0x2ac>
  11449c:	e3530040 	cmp	r3, #64	; 0x40
  1144a0:	0a000002 	beq	1144b0 <lwip_getsockopt_impl+0x28c>
  1144a4:	e3530010 	cmp	r3, #16
  1144a8:	0a000004 	beq	1144c0 <lwip_getsockopt_impl+0x29c>
  1144ac:	ea00000b 	b	1144e0 <lwip_getsockopt_impl+0x2bc>
      case NETCONN_RAW:
        *(int*)optval = SOCK_RAW;
  1144b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1144b4:	e3a02003 	mov	r2, #3
  1144b8:	e5832000 	str	r2, [r3]
        break;
  1144bc:	ea00000e 	b	1144fc <lwip_getsockopt_impl+0x2d8>
      case NETCONN_TCP:
        *(int*)optval = SOCK_STREAM;
  1144c0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1144c4:	e3a02001 	mov	r2, #1
  1144c8:	e5832000 	str	r2, [r3]
        break;
  1144cc:	ea00000a 	b	1144fc <lwip_getsockopt_impl+0x2d8>
      case NETCONN_UDP:
        *(int*)optval = SOCK_DGRAM;
  1144d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1144d4:	e3a02002 	mov	r2, #2
  1144d8:	e5832000 	str	r2, [r3]
        break;
  1144dc:	ea000006 	b	1144fc <lwip_getsockopt_impl+0x2d8>
      default: /* unrecognized socket type */
        *(int*)optval = netconn_type(sock->conn);
  1144e0:	e51b300c 	ldr	r3, [fp, #-12]
  1144e4:	e5933000 	ldr	r3, [r3]
  1144e8:	e5933000 	ldr	r3, [r3]
  1144ec:	e1a02003 	mov	r2, r3
  1144f0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1144f4:	e5832000 	str	r2, [r3]
                    ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE): unrecognized socket type %d\n",
                    s, *(int *)optval));
      }  /* switch (netconn_type(sock->conn)) */
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",
                  s, *(int *)optval));
      break;
  1144f8:	ea0000b6 	b	1147d8 <lwip_getsockopt_impl+0x5b4>
  1144fc:	ea0000b5 	b	1147d8 <lwip_getsockopt_impl+0x5b4>

    case SO_ERROR:
      LWIP_SOCKOPT_CHECK_OPTLEN(*optlen, int);
  114500:	e59b3004 	ldr	r3, [fp, #4]
  114504:	e5933000 	ldr	r3, [r3]
  114508:	e3530003 	cmp	r3, #3
  11450c:	8a000001 	bhi	114518 <lwip_getsockopt_impl+0x2f4>
  114510:	e3a03016 	mov	r3, #22
  114514:	ea0001be 	b	114c14 <lwip_getsockopt_impl+0x9f0>
      /* only overwrite ERR_OK or temporary errors */
      if (((sock->err == 0) || (sock->err == EINPROGRESS)) && (sock->conn != NULL)) {
  114518:	e51b300c 	ldr	r3, [fp, #-12]
  11451c:	e5d33010 	ldrb	r3, [r3, #16]
  114520:	e3530000 	cmp	r3, #0
  114524:	0a000003 	beq	114538 <lwip_getsockopt_impl+0x314>
  114528:	e51b300c 	ldr	r3, [fp, #-12]
  11452c:	e5d33010 	ldrb	r3, [r3, #16]
  114530:	e3530073 	cmp	r3, #115	; 0x73
  114534:	1a000014 	bne	11458c <lwip_getsockopt_impl+0x368>
  114538:	e51b300c 	ldr	r3, [fp, #-12]
  11453c:	e5933000 	ldr	r3, [r3]
  114540:	e3530000 	cmp	r3, #0
  114544:	0a000010 	beq	11458c <lwip_getsockopt_impl+0x368>
        sock_set_errno(sock, err_to_errno(sock->conn->last_err));
  114548:	e51b300c 	ldr	r3, [fp, #-12]
  11454c:	e5933000 	ldr	r3, [r3]
  114550:	e1d330dc 	ldrsb	r3, [r3, #12]
  114554:	e1a00003 	mov	r0, r3
  114558:	ebffee39 	bl	10fe44 <err_to_errno>
  11455c:	e50b0010 	str	r0, [fp, #-16]
  114560:	e51b3010 	ldr	r3, [fp, #-16]
  114564:	e6ef2073 	uxtb	r2, r3
  114568:	e51b300c 	ldr	r3, [fp, #-12]
  11456c:	e5c32010 	strb	r2, [r3, #16]
  114570:	e51b3010 	ldr	r3, [fp, #-16]
  114574:	e3530000 	cmp	r3, #0
  114578:	0a000003 	beq	11458c <lwip_getsockopt_impl+0x368>
  11457c:	eb009247 	bl	138ea0 <__errno_location>
  114580:	e1a02000 	mov	r2, r0
  114584:	e51b3010 	ldr	r3, [fp, #-16]
  114588:	e5823000 	str	r3, [r2]
      }
      *(int *)optval = (sock->err == 0xFF ? (int)-1 : (int)sock->err);
  11458c:	e51b300c 	ldr	r3, [fp, #-12]
  114590:	e5d33010 	ldrb	r3, [r3, #16]
  114594:	e35300ff 	cmp	r3, #255	; 0xff
  114598:	0a000003 	beq	1145ac <lwip_getsockopt_impl+0x388>
  11459c:	e51b300c 	ldr	r3, [fp, #-12]
  1145a0:	e5d33010 	ldrb	r3, [r3, #16]
  1145a4:	e1a02003 	mov	r2, r3
  1145a8:	ea000000 	b	1145b0 <lwip_getsockopt_impl+0x38c>
  1145ac:	e3e02000 	mvn	r2, #0
  1145b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1145b4:	e5832000 	str	r2, [r3]
      sock->err = 0;
  1145b8:	e51b300c 	ldr	r3, [fp, #-12]
  1145bc:	e3a02000 	mov	r2, #0
  1145c0:	e5c32010 	strb	r2, [r3, #16]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",
                  s, *(int *)optval));
      break;
  1145c4:	ea000083 	b	1147d8 <lwip_getsockopt_impl+0x5b4>

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  1145c8:	e59b3004 	ldr	r3, [fp, #4]
  1145cc:	e5933000 	ldr	r3, [r3]
  1145d0:	e353000f 	cmp	r3, #15
  1145d4:	8a000001 	bhi	1145e0 <lwip_getsockopt_impl+0x3bc>
  1145d8:	e3a03016 	mov	r3, #22
  1145dc:	ea00018c 	b	114c14 <lwip_getsockopt_impl+0x9f0>
  1145e0:	e51b300c 	ldr	r3, [fp, #-12]
  1145e4:	e5933000 	ldr	r3, [r3]
  1145e8:	e3530000 	cmp	r3, #0
  1145ec:	1a000001 	bne	1145f8 <lwip_getsockopt_impl+0x3d4>
  1145f0:	e3a03016 	mov	r3, #22
  1145f4:	ea000186 	b	114c14 <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_sendtimeout(sock->conn));
  1145f8:	e51b300c 	ldr	r3, [fp, #-12]
  1145fc:	e5933000 	ldr	r3, [r3]
  114600:	e5933020 	ldr	r3, [r3, #32]
  114604:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  114608:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11460c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114610:	e3413062 	movt	r3, #4194	; 0x1062
  114614:	e0832392 	umull	r2, r3, r2, r3
  114618:	e1a03323 	lsr	r3, r3, #6
  11461c:	e1a02003 	mov	r2, r3
  114620:	e3a03000 	mov	r3, #0
  114624:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  114628:	e1c120f0 	strd	r2, [r1]
  11462c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  114630:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114634:	e3413062 	movt	r3, #4194	; 0x1062
  114638:	e0832391 	umull	r2, r3, r1, r3
  11463c:	e1a03323 	lsr	r3, r3, #6
  114640:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114644:	e0030392 	mul	r3, r2, r3
  114648:	e0413003 	sub	r3, r1, r3
  11464c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114650:	e0030392 	mul	r3, r2, r3
  114654:	e1a02003 	mov	r2, r3
  114658:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11465c:	e5832008 	str	r2, [r3, #8]
      break;
  114660:	ea00005c 	b	1147d8 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114664:	e59b3004 	ldr	r3, [fp, #4]
  114668:	e5933000 	ldr	r3, [r3]
  11466c:	e353000f 	cmp	r3, #15
  114670:	8a000001 	bhi	11467c <lwip_getsockopt_impl+0x458>
  114674:	e3a03016 	mov	r3, #22
  114678:	ea000165 	b	114c14 <lwip_getsockopt_impl+0x9f0>
  11467c:	e51b300c 	ldr	r3, [fp, #-12]
  114680:	e5933000 	ldr	r3, [r3]
  114684:	e3530000 	cmp	r3, #0
  114688:	1a000001 	bne	114694 <lwip_getsockopt_impl+0x470>
  11468c:	e3a03016 	mov	r3, #22
  114690:	ea00015f 	b	114c14 <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_recvtimeout(sock->conn));
  114694:	e51b300c 	ldr	r3, [fp, #-12]
  114698:	e5933000 	ldr	r3, [r3]
  11469c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1146a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1146a4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1146a8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1146ac:	e3413062 	movt	r3, #4194	; 0x1062
  1146b0:	e0832392 	umull	r2, r3, r2, r3
  1146b4:	e1a03323 	lsr	r3, r3, #6
  1146b8:	e1a02003 	mov	r2, r3
  1146bc:	e3a03000 	mov	r3, #0
  1146c0:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1146c4:	e1c120f0 	strd	r2, [r1]
  1146c8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1146cc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1146d0:	e3413062 	movt	r3, #4194	; 0x1062
  1146d4:	e0832391 	umull	r2, r3, r1, r3
  1146d8:	e1a03323 	lsr	r3, r3, #6
  1146dc:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1146e0:	e0030392 	mul	r3, r2, r3
  1146e4:	e0413003 	sub	r3, r1, r3
  1146e8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1146ec:	e0030392 	mul	r3, r2, r3
  1146f0:	e1a02003 	mov	r2, r3
  1146f4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1146f8:	e5832008 	str	r2, [r3, #8]
      break;
  1146fc:	ea000035 	b	1147d8 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  114700:	e59b3004 	ldr	r3, [fp, #4]
  114704:	e5933000 	ldr	r3, [r3]
  114708:	e3530003 	cmp	r3, #3
  11470c:	8a000001 	bhi	114718 <lwip_getsockopt_impl+0x4f4>
  114710:	e3a03016 	mov	r3, #22
  114714:	ea00013e 	b	114c14 <lwip_getsockopt_impl+0x9f0>
  114718:	e51b300c 	ldr	r3, [fp, #-12]
  11471c:	e5933000 	ldr	r3, [r3]
  114720:	e3530000 	cmp	r3, #0
  114724:	1a000001 	bne	114730 <lwip_getsockopt_impl+0x50c>
  114728:	e3a03016 	mov	r3, #22
  11472c:	ea000138 	b	114c14 <lwip_getsockopt_impl+0x9f0>
      *(int *)optval = netconn_get_recvbufsize(sock->conn);
  114730:	e51b300c 	ldr	r3, [fp, #-12]
  114734:	e5933000 	ldr	r3, [r3]
  114738:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11473c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114740:	e5832000 	str	r2, [r3]
      break;
  114744:	ea000023 	b	1147d8 <lwip_getsockopt_impl+0x5b4>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_UDP);
  114748:	e59b3004 	ldr	r3, [fp, #4]
  11474c:	e5933000 	ldr	r3, [r3]
  114750:	e3530003 	cmp	r3, #3
  114754:	8a000001 	bhi	114760 <lwip_getsockopt_impl+0x53c>
  114758:	e3a03016 	mov	r3, #22
  11475c:	ea00012c 	b	114c14 <lwip_getsockopt_impl+0x9f0>
  114760:	e51b300c 	ldr	r3, [fp, #-12]
  114764:	e5933000 	ldr	r3, [r3]
  114768:	e3530000 	cmp	r3, #0
  11476c:	0a000004 	beq	114784 <lwip_getsockopt_impl+0x560>
  114770:	e51b300c 	ldr	r3, [fp, #-12]
  114774:	e5933000 	ldr	r3, [r3]
  114778:	e5933008 	ldr	r3, [r3, #8]
  11477c:	e3530000 	cmp	r3, #0
  114780:	1a000001 	bne	11478c <lwip_getsockopt_impl+0x568>
  114784:	e3a03016 	mov	r3, #22
  114788:	ea000121 	b	114c14 <lwip_getsockopt_impl+0x9f0>
  11478c:	e51b300c 	ldr	r3, [fp, #-12]
  114790:	e5933000 	ldr	r3, [r3]
  114794:	e5933000 	ldr	r3, [r3]
  114798:	e20330f0 	and	r3, r3, #240	; 0xf0
  11479c:	e3530020 	cmp	r3, #32
  1147a0:	0a000001 	beq	1147ac <lwip_getsockopt_impl+0x588>
  1147a4:	e3a0305c 	mov	r3, #92	; 0x5c
  1147a8:	ea000119 	b	114c14 <lwip_getsockopt_impl+0x9f0>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
  1147ac:	e51b300c 	ldr	r3, [fp, #-12]
  1147b0:	e5933000 	ldr	r3, [r3]
  1147b4:	e5933008 	ldr	r3, [r3, #8]
  1147b8:	e5d33010 	ldrb	r3, [r3, #16]
  1147bc:	e2032001 	and	r2, r3, #1
  1147c0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1147c4:	e5832000 	str	r2, [r3]
      break;
  1147c8:	ea000002 	b	1147d8 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_UDP*/
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1147cc:	e3a0305c 	mov	r3, #92	; 0x5c
  1147d0:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1147d4:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1147d8:	ea00010c 	b	114c10 <lwip_getsockopt_impl+0x9ec>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  1147dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1147e0:	e2433001 	sub	r3, r3, #1
  1147e4:	e3530006 	cmp	r3, #6
  1147e8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1147ec:	ea000098 	b	114a54 <lwip_getsockopt_impl+0x830>
  1147f0:	00114870 	.word	0x00114870
  1147f4:	0011480c 	.word	0x0011480c
  1147f8:	00114a54 	.word	0x00114a54
  1147fc:	00114a54 	.word	0x00114a54
  114800:	001148d4 	.word	0x001148d4
  114804:	00114954 	.word	0x00114954
  114808:	001149d4 	.word	0x001149d4
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  11480c:	e59b3004 	ldr	r3, [fp, #4]
  114810:	e5933000 	ldr	r3, [r3]
  114814:	e3530003 	cmp	r3, #3
  114818:	8a000001 	bhi	114824 <lwip_getsockopt_impl+0x600>
  11481c:	e3a03016 	mov	r3, #22
  114820:	ea0000fb 	b	114c14 <lwip_getsockopt_impl+0x9f0>
  114824:	e51b300c 	ldr	r3, [fp, #-12]
  114828:	e5933000 	ldr	r3, [r3]
  11482c:	e3530000 	cmp	r3, #0
  114830:	0a000004 	beq	114848 <lwip_getsockopt_impl+0x624>
  114834:	e51b300c 	ldr	r3, [fp, #-12]
  114838:	e5933000 	ldr	r3, [r3]
  11483c:	e5933008 	ldr	r3, [r3, #8]
  114840:	e3530000 	cmp	r3, #0
  114844:	1a000001 	bne	114850 <lwip_getsockopt_impl+0x62c>
  114848:	e3a03016 	mov	r3, #22
  11484c:	ea0000f0 	b	114c14 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->ttl;
  114850:	e51b300c 	ldr	r3, [fp, #-12]
  114854:	e5933000 	ldr	r3, [r3]
  114858:	e5933008 	ldr	r3, [r3, #8]
  11485c:	e5d3300a 	ldrb	r3, [r3, #10]
  114860:	e1a02003 	mov	r2, r3
  114864:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114868:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  11486c:	ea00007b 	b	114a60 <lwip_getsockopt_impl+0x83c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114870:	e59b3004 	ldr	r3, [fp, #4]
  114874:	e5933000 	ldr	r3, [r3]
  114878:	e3530003 	cmp	r3, #3
  11487c:	8a000001 	bhi	114888 <lwip_getsockopt_impl+0x664>
  114880:	e3a03016 	mov	r3, #22
  114884:	ea0000e2 	b	114c14 <lwip_getsockopt_impl+0x9f0>
  114888:	e51b300c 	ldr	r3, [fp, #-12]
  11488c:	e5933000 	ldr	r3, [r3]
  114890:	e3530000 	cmp	r3, #0
  114894:	0a000004 	beq	1148ac <lwip_getsockopt_impl+0x688>
  114898:	e51b300c 	ldr	r3, [fp, #-12]
  11489c:	e5933000 	ldr	r3, [r3]
  1148a0:	e5933008 	ldr	r3, [r3, #8]
  1148a4:	e3530000 	cmp	r3, #0
  1148a8:	1a000001 	bne	1148b4 <lwip_getsockopt_impl+0x690>
  1148ac:	e3a03016 	mov	r3, #22
  1148b0:	ea0000d7 	b	114c14 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->tos;
  1148b4:	e51b300c 	ldr	r3, [fp, #-12]
  1148b8:	e5933000 	ldr	r3, [r3]
  1148bc:	e5933008 	ldr	r3, [r3, #8]
  1148c0:	e5d33009 	ldrb	r3, [r3, #9]
  1148c4:	e1a02003 	mov	r2, r3
  1148c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1148cc:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",
                  s, *(int *)optval));
      break;
  1148d0:	ea000062 	b	114a60 <lwip_getsockopt_impl+0x83c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  1148d4:	e59b3004 	ldr	r3, [fp, #4]
  1148d8:	e5933000 	ldr	r3, [r3]
  1148dc:	e3530000 	cmp	r3, #0
  1148e0:	1a000001 	bne	1148ec <lwip_getsockopt_impl+0x6c8>
  1148e4:	e3a03016 	mov	r3, #22
  1148e8:	ea0000c9 	b	114c14 <lwip_getsockopt_impl+0x9f0>
  1148ec:	e51b300c 	ldr	r3, [fp, #-12]
  1148f0:	e5933000 	ldr	r3, [r3]
  1148f4:	e3530000 	cmp	r3, #0
  1148f8:	0a000004 	beq	114910 <lwip_getsockopt_impl+0x6ec>
  1148fc:	e51b300c 	ldr	r3, [fp, #-12]
  114900:	e5933000 	ldr	r3, [r3]
  114904:	e5933008 	ldr	r3, [r3, #8]
  114908:	e3530000 	cmp	r3, #0
  11490c:	1a000001 	bne	114918 <lwip_getsockopt_impl+0x6f4>
  114910:	e3a03016 	mov	r3, #22
  114914:	ea0000be 	b	114c14 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  114918:	e51b300c 	ldr	r3, [fp, #-12]
  11491c:	e5933000 	ldr	r3, [r3]
  114920:	e5933000 	ldr	r3, [r3]
  114924:	e20330f0 	and	r3, r3, #240	; 0xf0
  114928:	e3530020 	cmp	r3, #32
  11492c:	0a000001 	beq	114938 <lwip_getsockopt_impl+0x714>
        return ENOPROTOOPT;
  114930:	e3a0305c 	mov	r3, #92	; 0x5c
  114934:	ea0000b6 	b	114c14 <lwip_getsockopt_impl+0x9f0>
      }
      *(u8_t*)optval = udp_get_multicast_ttl(sock->conn->pcb.udp);
  114938:	e51b300c 	ldr	r3, [fp, #-12]
  11493c:	e5933000 	ldr	r3, [r3]
  114940:	e5933008 	ldr	r3, [r3, #8]
  114944:	e5d3201c 	ldrb	r2, [r3, #28]
  114948:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11494c:	e5c32000 	strb	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  114950:	ea000042 	b	114a60 <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_IF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, struct in_addr);
  114954:	e59b3004 	ldr	r3, [fp, #4]
  114958:	e5933000 	ldr	r3, [r3]
  11495c:	e3530003 	cmp	r3, #3
  114960:	8a000001 	bhi	11496c <lwip_getsockopt_impl+0x748>
  114964:	e3a03016 	mov	r3, #22
  114968:	ea0000a9 	b	114c14 <lwip_getsockopt_impl+0x9f0>
  11496c:	e51b300c 	ldr	r3, [fp, #-12]
  114970:	e5933000 	ldr	r3, [r3]
  114974:	e3530000 	cmp	r3, #0
  114978:	0a000004 	beq	114990 <lwip_getsockopt_impl+0x76c>
  11497c:	e51b300c 	ldr	r3, [fp, #-12]
  114980:	e5933000 	ldr	r3, [r3]
  114984:	e5933008 	ldr	r3, [r3, #8]
  114988:	e3530000 	cmp	r3, #0
  11498c:	1a000001 	bne	114998 <lwip_getsockopt_impl+0x774>
  114990:	e3a03016 	mov	r3, #22
  114994:	ea00009e 	b	114c14 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  114998:	e51b300c 	ldr	r3, [fp, #-12]
  11499c:	e5933000 	ldr	r3, [r3]
  1149a0:	e5933000 	ldr	r3, [r3]
  1149a4:	e20330f0 	and	r3, r3, #240	; 0xf0
  1149a8:	e3530020 	cmp	r3, #32
  1149ac:	0a000001 	beq	1149b8 <lwip_getsockopt_impl+0x794>
        return ENOPROTOOPT;
  1149b0:	e3a0305c 	mov	r3, #92	; 0x5c
  1149b4:	ea000096 	b	114c14 <lwip_getsockopt_impl+0x9f0>
      }
      inet_addr_from_ip4addr((struct in_addr*)optval, udp_get_multicast_netif_addr(sock->conn->pcb.udp));
  1149b8:	e51b300c 	ldr	r3, [fp, #-12]
  1149bc:	e5933000 	ldr	r3, [r3]
  1149c0:	e5933008 	ldr	r3, [r3, #8]
  1149c4:	e5932018 	ldr	r2, [r3, #24]
  1149c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1149cc:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_IF) = 0x%"X32_F"\n",
                  s, *(u32_t *)optval));
      break;
  1149d0:	ea000022 	b	114a60 <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  1149d4:	e59b3004 	ldr	r3, [fp, #4]
  1149d8:	e5933000 	ldr	r3, [r3]
  1149dc:	e3530000 	cmp	r3, #0
  1149e0:	1a000001 	bne	1149ec <lwip_getsockopt_impl+0x7c8>
  1149e4:	e3a03016 	mov	r3, #22
  1149e8:	ea000089 	b	114c14 <lwip_getsockopt_impl+0x9f0>
  1149ec:	e51b300c 	ldr	r3, [fp, #-12]
  1149f0:	e5933000 	ldr	r3, [r3]
  1149f4:	e3530000 	cmp	r3, #0
  1149f8:	0a000004 	beq	114a10 <lwip_getsockopt_impl+0x7ec>
  1149fc:	e51b300c 	ldr	r3, [fp, #-12]
  114a00:	e5933000 	ldr	r3, [r3]
  114a04:	e5933008 	ldr	r3, [r3, #8]
  114a08:	e3530000 	cmp	r3, #0
  114a0c:	1a000001 	bne	114a18 <lwip_getsockopt_impl+0x7f4>
  114a10:	e3a03016 	mov	r3, #22
  114a14:	ea00007e 	b	114c14 <lwip_getsockopt_impl+0x9f0>
      if ((sock->conn->pcb.udp->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) {
  114a18:	e51b300c 	ldr	r3, [fp, #-12]
  114a1c:	e5933000 	ldr	r3, [r3]
  114a20:	e5933008 	ldr	r3, [r3, #8]
  114a24:	e5d33010 	ldrb	r3, [r3, #16]
  114a28:	e2033008 	and	r3, r3, #8
  114a2c:	e3530000 	cmp	r3, #0
  114a30:	0a000003 	beq	114a44 <lwip_getsockopt_impl+0x820>
        *(u8_t*)optval = 1;
  114a34:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114a38:	e3a02001 	mov	r2, #1
  114a3c:	e5c32000 	strb	r2, [r3]
      } else {
        *(u8_t*)optval = 0;
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_LOOP) = %d\n",
                  s, *(int *)optval));
      break;
  114a40:	ea000006 	b	114a60 <lwip_getsockopt_impl+0x83c>
        *(u8_t*)optval = 0;
  114a44:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114a48:	e3a02000 	mov	r2, #0
  114a4c:	e5c32000 	strb	r2, [r3]
      break;
  114a50:	ea000002 	b	114a60 <lwip_getsockopt_impl+0x83c>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114a54:	e3a0305c 	mov	r3, #92	; 0x5c
  114a58:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114a5c:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114a60:	ea00006a 	b	114c10 <lwip_getsockopt_impl+0x9ec>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_TCP);
  114a64:	e59b3004 	ldr	r3, [fp, #4]
  114a68:	e5933000 	ldr	r3, [r3]
  114a6c:	e3530003 	cmp	r3, #3
  114a70:	8a000001 	bhi	114a7c <lwip_getsockopt_impl+0x858>
  114a74:	e3a03016 	mov	r3, #22
  114a78:	ea000065 	b	114c14 <lwip_getsockopt_impl+0x9f0>
  114a7c:	e51b300c 	ldr	r3, [fp, #-12]
  114a80:	e5933000 	ldr	r3, [r3]
  114a84:	e3530000 	cmp	r3, #0
  114a88:	0a000004 	beq	114aa0 <lwip_getsockopt_impl+0x87c>
  114a8c:	e51b300c 	ldr	r3, [fp, #-12]
  114a90:	e5933000 	ldr	r3, [r3]
  114a94:	e5933008 	ldr	r3, [r3, #8]
  114a98:	e3530000 	cmp	r3, #0
  114a9c:	1a000001 	bne	114aa8 <lwip_getsockopt_impl+0x884>
  114aa0:	e3a03016 	mov	r3, #22
  114aa4:	ea00005a 	b	114c14 <lwip_getsockopt_impl+0x9f0>
  114aa8:	e51b300c 	ldr	r3, [fp, #-12]
  114aac:	e5933000 	ldr	r3, [r3]
  114ab0:	e5933000 	ldr	r3, [r3]
  114ab4:	e20330f0 	and	r3, r3, #240	; 0xf0
  114ab8:	e3530010 	cmp	r3, #16
  114abc:	0a000001 	beq	114ac8 <lwip_getsockopt_impl+0x8a4>
  114ac0:	e3a0305c 	mov	r3, #92	; 0x5c
  114ac4:	ea000052 	b	114c14 <lwip_getsockopt_impl+0x9f0>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  114ac8:	e51b300c 	ldr	r3, [fp, #-12]
  114acc:	e5933000 	ldr	r3, [r3]
  114ad0:	e5933008 	ldr	r3, [r3, #8]
  114ad4:	e5933014 	ldr	r3, [r3, #20]
  114ad8:	e3530001 	cmp	r3, #1
  114adc:	1a000001 	bne	114ae8 <lwip_getsockopt_impl+0x8c4>
      return EINVAL;
  114ae0:	e3a03016 	mov	r3, #22
  114ae4:	ea00004a 	b	114c14 <lwip_getsockopt_impl+0x9f0>
    }
    switch (optname) {
  114ae8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114aec:	e2433001 	sub	r3, r3, #1
  114af0:	e3530004 	cmp	r3, #4
  114af4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  114af8:	ea000039 	b	114be4 <lwip_getsockopt_impl+0x9c0>
  114afc:	00114b10 	.word	0x00114b10
  114b00:	00114b44 	.word	0x00114b44
  114b04:	00114b64 	.word	0x00114b64
  114b08:	00114b94 	.word	0x00114b94
  114b0c:	00114bc4 	.word	0x00114bc4
    case TCP_NODELAY:
      *(int*)optval = tcp_nagle_disabled(sock->conn->pcb.tcp);
  114b10:	e51b300c 	ldr	r3, [fp, #-12]
  114b14:	e5933000 	ldr	r3, [r3]
  114b18:	e5933008 	ldr	r3, [r3, #8]
  114b1c:	e5d3301e 	ldrb	r3, [r3, #30]
  114b20:	e2033040 	and	r3, r3, #64	; 0x40
  114b24:	e3530000 	cmp	r3, #0
  114b28:	13a03001 	movne	r3, #1
  114b2c:	03a03000 	moveq	r3, #0
  114b30:	e6ef3073 	uxtb	r3, r3
  114b34:	e1a02003 	mov	r2, r3
  114b38:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114b3c:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",
                  s, (*(int*)optval)?"on":"off") );
      break;
  114b40:	ea00002a 	b	114bf0 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPALIVE:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_idle;
  114b44:	e51b300c 	ldr	r3, [fp, #-12]
  114b48:	e5933000 	ldr	r3, [r3]
  114b4c:	e5933008 	ldr	r3, [r3, #8]
  114b50:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  114b54:	e1a02003 	mov	r2, r3
  114b58:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114b5c:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) = %d\n",
                  s, *(int *)optval));
      break;
  114b60:	ea000022 	b	114bf0 <lwip_getsockopt_impl+0x9cc>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_idle/1000);
  114b64:	e51b300c 	ldr	r3, [fp, #-12]
  114b68:	e5933000 	ldr	r3, [r3]
  114b6c:	e5933008 	ldr	r3, [r3, #8]
  114b70:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  114b74:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114b78:	e3413062 	movt	r3, #4194	; 0x1062
  114b7c:	e0832392 	umull	r2, r3, r2, r3
  114b80:	e1a03323 	lsr	r3, r3, #6
  114b84:	e1a02003 	mov	r2, r3
  114b88:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114b8c:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) = %d\n",
                  s, *(int *)optval));
      break;
  114b90:	ea000016 	b	114bf0 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPINTVL:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_intvl/1000);
  114b94:	e51b300c 	ldr	r3, [fp, #-12]
  114b98:	e5933000 	ldr	r3, [r3]
  114b9c:	e5933008 	ldr	r3, [r3, #8]
  114ba0:	e5932098 	ldr	r2, [r3, #152]	; 0x98
  114ba4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114ba8:	e3413062 	movt	r3, #4194	; 0x1062
  114bac:	e0832392 	umull	r2, r3, r2, r3
  114bb0:	e1a03323 	lsr	r3, r3, #6
  114bb4:	e1a02003 	mov	r2, r3
  114bb8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114bbc:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) = %d\n",
                  s, *(int *)optval));
      break;
  114bc0:	ea00000a 	b	114bf0 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPCNT:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_cnt;
  114bc4:	e51b300c 	ldr	r3, [fp, #-12]
  114bc8:	e5933000 	ldr	r3, [r3]
  114bcc:	e5933008 	ldr	r3, [r3, #8]
  114bd0:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  114bd4:	e1a02003 	mov	r2, r3
  114bd8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114bdc:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) = %d\n",
                  s, *(int *)optval));
      break;
  114be0:	ea000002 	b	114bf0 <lwip_getsockopt_impl+0x9cc>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114be4:	e3a0305c 	mov	r3, #92	; 0x5c
  114be8:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114bec:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114bf0:	ea000006 	b	114c10 <lwip_getsockopt_impl+0x9ec>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114bf4:	e3a0305c 	mov	r3, #92	; 0x5c
  114bf8:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114bfc:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114c00:	ea000002 	b	114c10 <lwip_getsockopt_impl+0x9ec>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                s, level, optname));
    err = ENOPROTOOPT;
  114c04:	e3a0305c 	mov	r3, #92	; 0x5c
  114c08:	e54b3005 	strb	r3, [fp, #-5]
    break;
  114c0c:	e320f000 	nop	{0}
  } /* switch (level) */

  return err;
  114c10:	e55b3005 	ldrb	r3, [fp, #-5]
}
  114c14:	e1a00003 	mov	r0, r3
  114c18:	e24bd004 	sub	sp, fp, #4
  114c1c:	e8bd8800 	pop	{fp, pc}

00114c20 <lwip_setsockopt>:

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  114c20:	e92d4800 	push	{fp, lr}
  114c24:	e28db004 	add	fp, sp, #4
  114c28:	e24dd028 	sub	sp, sp, #40	; 0x28
  114c2c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  114c30:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  114c34:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  114c38:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err = 0;
  114c3c:	e3a03000 	mov	r3, #0
  114c40:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = get_socket(s);
  114c44:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  114c48:	ebfff0a5 	bl	110ee4 <get_socket>
  114c4c:	e50b000c 	str	r0, [fp, #-12]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  114c50:	e51b300c 	ldr	r3, [fp, #-12]
  114c54:	e3530000 	cmp	r3, #0
  114c58:	1a000001 	bne	114c64 <lwip_setsockopt+0x44>
    return -1;
  114c5c:	e3e03000 	mvn	r3, #0
  114c60:	ea000033 	b	114d34 <lwip_setsockopt+0x114>
  }

  if (NULL == optval) {
  114c64:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114c68:	e3530000 	cmp	r3, #0
  114c6c:	1a00000e 	bne	114cac <lwip_setsockopt+0x8c>
    sock_set_errno(sock, EFAULT);
  114c70:	e3a0300e 	mov	r3, #14
  114c74:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  114c78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114c7c:	e6ef2073 	uxtb	r2, r3
  114c80:	e51b300c 	ldr	r3, [fp, #-12]
  114c84:	e5c32010 	strb	r2, [r3, #16]
  114c88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114c8c:	e3530000 	cmp	r3, #0
  114c90:	0a000003 	beq	114ca4 <lwip_setsockopt+0x84>
  114c94:	eb009081 	bl	138ea0 <__errno_location>
  114c98:	e1a02000 	mov	r2, r0
  114c9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114ca0:	e5823000 	str	r3, [r2]
    return -1;
  114ca4:	e3e03000 	mvn	r3, #0
  114ca8:	ea000021 	b	114d34 <lwip_setsockopt+0x114>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  114cac:	e30f060c 	movw	r0, #62988	; 0xf60c
  114cb0:	e3400014 	movt	r0, #20
  114cb4:	ebffd782 	bl	10aac4 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
  114cb8:	e59b3004 	ldr	r3, [fp, #4]
  114cbc:	e58d3000 	str	r3, [sp]
  114cc0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114cc4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  114cc8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  114ccc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  114cd0:	eb00001a 	bl	114d40 <lwip_setsockopt_impl>
  114cd4:	e1a03000 	mov	r3, r0
  114cd8:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  114cdc:	e30f060c 	movw	r0, #62988	; 0xf60c
  114ce0:	e3400014 	movt	r0, #20
  114ce4:	ebffd782 	bl	10aaf4 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  114ce8:	e55b3005 	ldrb	r3, [fp, #-5]
  114cec:	e50b3010 	str	r3, [fp, #-16]
  114cf0:	e51b3010 	ldr	r3, [fp, #-16]
  114cf4:	e6ef2073 	uxtb	r2, r3
  114cf8:	e51b300c 	ldr	r3, [fp, #-12]
  114cfc:	e5c32010 	strb	r2, [r3, #16]
  114d00:	e51b3010 	ldr	r3, [fp, #-16]
  114d04:	e3530000 	cmp	r3, #0
  114d08:	0a000003 	beq	114d1c <lwip_setsockopt+0xfc>
  114d0c:	eb009063 	bl	138ea0 <__errno_location>
  114d10:	e1a02000 	mov	r2, r0
  114d14:	e51b3010 	ldr	r3, [fp, #-16]
  114d18:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  114d1c:	e55b3005 	ldrb	r3, [fp, #-5]
  114d20:	e3530000 	cmp	r3, #0
  114d24:	0a000001 	beq	114d30 <lwip_setsockopt+0x110>
  114d28:	e3e03000 	mvn	r3, #0
  114d2c:	ea000000 	b	114d34 <lwip_setsockopt+0x114>
  114d30:	e3a03000 	mov	r3, #0
}
  114d34:	e1a00003 	mov	r0, r3
  114d38:	e24bd004 	sub	sp, fp, #4
  114d3c:	e8bd8800 	pop	{fp, pc}

00114d40 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static u8_t
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  114d40:	e92d4800 	push	{fp, lr}
  114d44:	e28db004 	add	fp, sp, #4
  114d48:	e24dd028 	sub	sp, sp, #40	; 0x28
  114d4c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  114d50:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  114d54:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  114d58:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  114d5c:	e3a03000 	mov	r3, #0
  114d60:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  114d64:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  114d68:	ebfff082 	bl	110f78 <tryget_socket>
  114d6c:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  114d70:	e51b300c 	ldr	r3, [fp, #-12]
  114d74:	e3530000 	cmp	r3, #0
  114d78:	1a000001 	bne	114d84 <lwip_setsockopt_impl+0x44>
    return EBADF;
  114d7c:	e3a03009 	mov	r3, #9
  114d80:	ea000248 	b	1156a8 <lwip_setsockopt_impl+0x968>
  }

  switch (level) {
  114d84:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114d88:	e3530006 	cmp	r3, #6
  114d8c:	0a0001d3 	beq	1154e0 <lwip_setsockopt_impl+0x7a0>
  114d90:	e3530006 	cmp	r3, #6
  114d94:	ca000002 	bgt	114da4 <lwip_setsockopt_impl+0x64>
  114d98:	e3530000 	cmp	r3, #0
  114d9c:	0a0000d2 	beq	1150ec <lwip_setsockopt_impl+0x3ac>
  114da0:	ea00023c 	b	115698 <lwip_setsockopt_impl+0x958>
  114da4:	e35300ff 	cmp	r3, #255	; 0xff
  114da8:	0a000236 	beq	115688 <lwip_setsockopt_impl+0x948>
  114dac:	e3002fff 	movw	r2, #4095	; 0xfff
  114db0:	e1530002 	cmp	r3, r2
  114db4:	1a000237 	bne	115698 <lwip_setsockopt_impl+0x958>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  114db8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114dbc:	e3012002 	movw	r2, #4098	; 0x1002
  114dc0:	e1530002 	cmp	r3, r2
  114dc4:	0a000081 	beq	114fd0 <lwip_setsockopt_impl+0x290>
  114dc8:	e3012002 	movw	r2, #4098	; 0x1002
  114dcc:	e1530002 	cmp	r3, r2
  114dd0:	ca000006 	bgt	114df0 <lwip_setsockopt_impl+0xb0>
  114dd4:	e3530008 	cmp	r3, #8
  114dd8:	0a00000e 	beq	114e18 <lwip_setsockopt_impl+0xd8>
  114ddc:	e3530020 	cmp	r3, #32
  114de0:	0a00000c 	beq	114e18 <lwip_setsockopt_impl+0xd8>
  114de4:	e3530004 	cmp	r3, #4
  114de8:	0a00000a 	beq	114e18 <lwip_setsockopt_impl+0xd8>
  114dec:	ea0000ba 	b	1150dc <lwip_setsockopt_impl+0x39c>
  114df0:	e3012006 	movw	r2, #4102	; 0x1006
  114df4:	e1530002 	cmp	r3, r2
  114df8:	0a000057 	beq	114f5c <lwip_setsockopt_impl+0x21c>
  114dfc:	e301200a 	movw	r2, #4106	; 0x100a
  114e00:	e1530002 	cmp	r3, r2
  114e04:	0a000082 	beq	115014 <lwip_setsockopt_impl+0x2d4>
  114e08:	e3012005 	movw	r2, #4101	; 0x1005
  114e0c:	e1530002 	cmp	r3, r2
  114e10:	0a000034 	beq	114ee8 <lwip_setsockopt_impl+0x1a8>
  114e14:	ea0000b0 	b	1150dc <lwip_setsockopt_impl+0x39c>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  114e18:	e59b3004 	ldr	r3, [fp, #4]
  114e1c:	e3530003 	cmp	r3, #3
  114e20:	8a000001 	bhi	114e2c <lwip_setsockopt_impl+0xec>
  114e24:	e3a03016 	mov	r3, #22
  114e28:	ea00021e 	b	1156a8 <lwip_setsockopt_impl+0x968>
  114e2c:	e51b300c 	ldr	r3, [fp, #-12]
  114e30:	e5933000 	ldr	r3, [r3]
  114e34:	e3530000 	cmp	r3, #0
  114e38:	0a000004 	beq	114e50 <lwip_setsockopt_impl+0x110>
  114e3c:	e51b300c 	ldr	r3, [fp, #-12]
  114e40:	e5933000 	ldr	r3, [r3]
  114e44:	e5933008 	ldr	r3, [r3, #8]
  114e48:	e3530000 	cmp	r3, #0
  114e4c:	1a000001 	bne	114e58 <lwip_setsockopt_impl+0x118>
  114e50:	e3a03016 	mov	r3, #22
  114e54:	ea000213 	b	1156a8 <lwip_setsockopt_impl+0x968>
      if (*(const int*)optval) {
  114e58:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114e5c:	e5933000 	ldr	r3, [r3]
  114e60:	e3530000 	cmp	r3, #0
  114e64:	0a00000e 	beq	114ea4 <lwip_setsockopt_impl+0x164>
        ip_set_option(sock->conn->pcb.ip, optname);
  114e68:	e51b300c 	ldr	r3, [fp, #-12]
  114e6c:	e5933000 	ldr	r3, [r3]
  114e70:	e5933008 	ldr	r3, [r3, #8]
  114e74:	e5d33008 	ldrb	r3, [r3, #8]
  114e78:	e6af2073 	sxtb	r2, r3
  114e7c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114e80:	e6af3073 	sxtb	r3, r3
  114e84:	e1823003 	orr	r3, r2, r3
  114e88:	e6af2073 	sxtb	r2, r3
  114e8c:	e51b300c 	ldr	r3, [fp, #-12]
  114e90:	e5933000 	ldr	r3, [r3]
  114e94:	e5933008 	ldr	r3, [r3, #8]
  114e98:	e6ef2072 	uxtb	r2, r2
  114e9c:	e5c32008 	strb	r2, [r3, #8]
      } else {
        ip_reset_option(sock->conn->pcb.ip, optname);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                  s, optname, (*(const int*)optval?"on":"off")));
      break;
  114ea0:	ea000090 	b	1150e8 <lwip_setsockopt_impl+0x3a8>
        ip_reset_option(sock->conn->pcb.ip, optname);
  114ea4:	e51b300c 	ldr	r3, [fp, #-12]
  114ea8:	e5933000 	ldr	r3, [r3]
  114eac:	e5933008 	ldr	r3, [r3, #8]
  114eb0:	e5d33008 	ldrb	r3, [r3, #8]
  114eb4:	e6af2073 	sxtb	r2, r3
  114eb8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114ebc:	e6af3073 	sxtb	r3, r3
  114ec0:	e1e03003 	mvn	r3, r3
  114ec4:	e6af3073 	sxtb	r3, r3
  114ec8:	e0033002 	and	r3, r3, r2
  114ecc:	e6af2073 	sxtb	r2, r3
  114ed0:	e51b300c 	ldr	r3, [fp, #-12]
  114ed4:	e5933000 	ldr	r3, [r3]
  114ed8:	e5933008 	ldr	r3, [r3, #8]
  114edc:	e6ef2072 	uxtb	r2, r2
  114ee0:	e5c32008 	strb	r2, [r3, #8]
      break;
  114ee4:	ea00007f 	b	1150e8 <lwip_setsockopt_impl+0x3a8>
    /* SO_TYPE is get-only */
    /* SO_ERROR is get-only */

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114ee8:	e59b3004 	ldr	r3, [fp, #4]
  114eec:	e353000f 	cmp	r3, #15
  114ef0:	8a000001 	bhi	114efc <lwip_setsockopt_impl+0x1bc>
  114ef4:	e3a03016 	mov	r3, #22
  114ef8:	ea0001ea 	b	1156a8 <lwip_setsockopt_impl+0x968>
  114efc:	e51b300c 	ldr	r3, [fp, #-12]
  114f00:	e5933000 	ldr	r3, [r3]
  114f04:	e3530000 	cmp	r3, #0
  114f08:	1a000001 	bne	114f14 <lwip_setsockopt_impl+0x1d4>
  114f0c:	e3a03016 	mov	r3, #22
  114f10:	ea0001e4 	b	1156a8 <lwip_setsockopt_impl+0x968>
      netconn_set_sendtimeout(sock->conn, LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  114f14:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114f18:	e1c320d0 	ldrd	r2, [r3]
  114f1c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  114f20:	e0010293 	mul	r1, r3, r2
  114f24:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114f28:	e5933008 	ldr	r3, [r3, #8]
  114f2c:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  114f30:	e2833003 	add	r3, r3, #3
  114f34:	e1a02003 	mov	r2, r3
  114f38:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114f3c:	e3413062 	movt	r3, #4194	; 0x1062
  114f40:	e0832392 	umull	r2, r3, r2, r3
  114f44:	e1a03323 	lsr	r3, r3, #6
  114f48:	e0812003 	add	r2, r1, r3
  114f4c:	e51b300c 	ldr	r3, [fp, #-12]
  114f50:	e5933000 	ldr	r3, [r3]
  114f54:	e5832020 	str	r2, [r3, #32]
      break;
  114f58:	ea000062 	b	1150e8 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114f5c:	e59b3004 	ldr	r3, [fp, #4]
  114f60:	e353000f 	cmp	r3, #15
  114f64:	8a000001 	bhi	114f70 <lwip_setsockopt_impl+0x230>
  114f68:	e3a03016 	mov	r3, #22
  114f6c:	ea0001cd 	b	1156a8 <lwip_setsockopt_impl+0x968>
  114f70:	e51b300c 	ldr	r3, [fp, #-12]
  114f74:	e5933000 	ldr	r3, [r3]
  114f78:	e3530000 	cmp	r3, #0
  114f7c:	1a000001 	bne	114f88 <lwip_setsockopt_impl+0x248>
  114f80:	e3a03016 	mov	r3, #22
  114f84:	ea0001c7 	b	1156a8 <lwip_setsockopt_impl+0x968>
      netconn_set_recvtimeout(sock->conn, (int)LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  114f88:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114f8c:	e1c320d0 	ldrd	r2, [r3]
  114f90:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  114f94:	e0010293 	mul	r1, r3, r2
  114f98:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114f9c:	e5933008 	ldr	r3, [r3, #8]
  114fa0:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  114fa4:	e2833003 	add	r3, r3, #3
  114fa8:	e1a02003 	mov	r2, r3
  114fac:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114fb0:	e3413062 	movt	r3, #4194	; 0x1062
  114fb4:	e0832392 	umull	r2, r3, r2, r3
  114fb8:	e1a03323 	lsr	r3, r3, #6
  114fbc:	e0812003 	add	r2, r1, r3
  114fc0:	e51b300c 	ldr	r3, [fp, #-12]
  114fc4:	e5933000 	ldr	r3, [r3]
  114fc8:	e5832024 	str	r2, [r3, #36]	; 0x24
      break;
  114fcc:	ea000045 	b	1150e8 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, int);
  114fd0:	e59b3004 	ldr	r3, [fp, #4]
  114fd4:	e3530003 	cmp	r3, #3
  114fd8:	8a000001 	bhi	114fe4 <lwip_setsockopt_impl+0x2a4>
  114fdc:	e3a03016 	mov	r3, #22
  114fe0:	ea0001b0 	b	1156a8 <lwip_setsockopt_impl+0x968>
  114fe4:	e51b300c 	ldr	r3, [fp, #-12]
  114fe8:	e5933000 	ldr	r3, [r3]
  114fec:	e3530000 	cmp	r3, #0
  114ff0:	1a000001 	bne	114ffc <lwip_setsockopt_impl+0x2bc>
  114ff4:	e3a03016 	mov	r3, #22
  114ff8:	ea0001aa 	b	1156a8 <lwip_setsockopt_impl+0x968>
      netconn_set_recvbufsize(sock->conn, *(const int*)optval);
  114ffc:	e51b300c 	ldr	r3, [fp, #-12]
  115000:	e5933000 	ldr	r3, [r3]
  115004:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  115008:	e5922000 	ldr	r2, [r2]
  11500c:	e5832028 	str	r2, [r3, #40]	; 0x28
      break;
  115010:	ea000034 	b	1150e8 <lwip_setsockopt_impl+0x3a8>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
  115014:	e59b3004 	ldr	r3, [fp, #4]
  115018:	e3530003 	cmp	r3, #3
  11501c:	8a000001 	bhi	115028 <lwip_setsockopt_impl+0x2e8>
  115020:	e3a03016 	mov	r3, #22
  115024:	ea00019f 	b	1156a8 <lwip_setsockopt_impl+0x968>
  115028:	e51b300c 	ldr	r3, [fp, #-12]
  11502c:	e5933000 	ldr	r3, [r3]
  115030:	e3530000 	cmp	r3, #0
  115034:	0a000004 	beq	11504c <lwip_setsockopt_impl+0x30c>
  115038:	e51b300c 	ldr	r3, [fp, #-12]
  11503c:	e5933000 	ldr	r3, [r3]
  115040:	e5933008 	ldr	r3, [r3, #8]
  115044:	e3530000 	cmp	r3, #0
  115048:	1a000001 	bne	115054 <lwip_setsockopt_impl+0x314>
  11504c:	e3a03016 	mov	r3, #22
  115050:	ea000194 	b	1156a8 <lwip_setsockopt_impl+0x968>
  115054:	e51b300c 	ldr	r3, [fp, #-12]
  115058:	e5933000 	ldr	r3, [r3]
  11505c:	e5933000 	ldr	r3, [r3]
  115060:	e20330f0 	and	r3, r3, #240	; 0xf0
  115064:	e3530020 	cmp	r3, #32
  115068:	0a000001 	beq	115074 <lwip_setsockopt_impl+0x334>
  11506c:	e3a0305c 	mov	r3, #92	; 0x5c
  115070:	ea00018c 	b	1156a8 <lwip_setsockopt_impl+0x968>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      if (*(const int*)optval) {
  115074:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115078:	e5933000 	ldr	r3, [r3]
  11507c:	e3530000 	cmp	r3, #0
  115080:	0a00000a 	beq	1150b0 <lwip_setsockopt_impl+0x370>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
  115084:	e51b300c 	ldr	r3, [fp, #-12]
  115088:	e5933000 	ldr	r3, [r3]
  11508c:	e5933008 	ldr	r3, [r3, #8]
  115090:	e5d32010 	ldrb	r2, [r3, #16]
  115094:	e51b300c 	ldr	r3, [fp, #-12]
  115098:	e5933000 	ldr	r3, [r3]
  11509c:	e5933008 	ldr	r3, [r3, #8]
  1150a0:	e3822001 	orr	r2, r2, #1
  1150a4:	e6ef2072 	uxtb	r2, r2
  1150a8:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
      }
      break;
  1150ac:	ea00000d 	b	1150e8 <lwip_setsockopt_impl+0x3a8>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
  1150b0:	e51b300c 	ldr	r3, [fp, #-12]
  1150b4:	e5933000 	ldr	r3, [r3]
  1150b8:	e5933008 	ldr	r3, [r3, #8]
  1150bc:	e5d32010 	ldrb	r2, [r3, #16]
  1150c0:	e51b300c 	ldr	r3, [fp, #-12]
  1150c4:	e5933000 	ldr	r3, [r3]
  1150c8:	e5933008 	ldr	r3, [r3, #8]
  1150cc:	e3c22001 	bic	r2, r2, #1
  1150d0:	e6ef2072 	uxtb	r2, r2
  1150d4:	e5c32010 	strb	r2, [r3, #16]
      break;
  1150d8:	ea000002 	b	1150e8 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_UDP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1150dc:	e3a0305c 	mov	r3, #92	; 0x5c
  1150e0:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1150e4:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1150e8:	ea00016d 	b	1156a4 <lwip_setsockopt_impl+0x964>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  1150ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1150f0:	e2433001 	sub	r3, r3, #1
  1150f4:	e3530006 	cmp	r3, #6
  1150f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1150fc:	ea0000f2 	b	1154cc <lwip_setsockopt_impl+0x78c>
  115100:	0011517c 	.word	0x0011517c
  115104:	0011511c 	.word	0x0011511c
  115108:	001153a4 	.word	0x001153a4
  11510c:	001153a4 	.word	0x001153a4
  115110:	001151dc 	.word	0x001151dc
  115114:	00115258 	.word	0x00115258
  115118:	001152dc 	.word	0x001152dc
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  11511c:	e59b3004 	ldr	r3, [fp, #4]
  115120:	e3530003 	cmp	r3, #3
  115124:	8a000001 	bhi	115130 <lwip_setsockopt_impl+0x3f0>
  115128:	e3a03016 	mov	r3, #22
  11512c:	ea00015d 	b	1156a8 <lwip_setsockopt_impl+0x968>
  115130:	e51b300c 	ldr	r3, [fp, #-12]
  115134:	e5933000 	ldr	r3, [r3]
  115138:	e3530000 	cmp	r3, #0
  11513c:	0a000004 	beq	115154 <lwip_setsockopt_impl+0x414>
  115140:	e51b300c 	ldr	r3, [fp, #-12]
  115144:	e5933000 	ldr	r3, [r3]
  115148:	e5933008 	ldr	r3, [r3, #8]
  11514c:	e3530000 	cmp	r3, #0
  115150:	1a000001 	bne	11515c <lwip_setsockopt_impl+0x41c>
  115154:	e3a03016 	mov	r3, #22
  115158:	ea000152 	b	1156a8 <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->ttl = (u8_t)(*(const int*)optval);
  11515c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115160:	e5932000 	ldr	r2, [r3]
  115164:	e51b300c 	ldr	r3, [fp, #-12]
  115168:	e5933000 	ldr	r3, [r3]
  11516c:	e5933008 	ldr	r3, [r3, #8]
  115170:	e6ef2072 	uxtb	r2, r2
  115174:	e5c3200a 	strb	r2, [r3, #10]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                  s, sock->conn->pcb.ip->ttl));
      break;
  115178:	ea0000d7 	b	1154dc <lwip_setsockopt_impl+0x79c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  11517c:	e59b3004 	ldr	r3, [fp, #4]
  115180:	e3530003 	cmp	r3, #3
  115184:	8a000001 	bhi	115190 <lwip_setsockopt_impl+0x450>
  115188:	e3a03016 	mov	r3, #22
  11518c:	ea000145 	b	1156a8 <lwip_setsockopt_impl+0x968>
  115190:	e51b300c 	ldr	r3, [fp, #-12]
  115194:	e5933000 	ldr	r3, [r3]
  115198:	e3530000 	cmp	r3, #0
  11519c:	0a000004 	beq	1151b4 <lwip_setsockopt_impl+0x474>
  1151a0:	e51b300c 	ldr	r3, [fp, #-12]
  1151a4:	e5933000 	ldr	r3, [r3]
  1151a8:	e5933008 	ldr	r3, [r3, #8]
  1151ac:	e3530000 	cmp	r3, #0
  1151b0:	1a000001 	bne	1151bc <lwip_setsockopt_impl+0x47c>
  1151b4:	e3a03016 	mov	r3, #22
  1151b8:	ea00013a 	b	1156a8 <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->tos = (u8_t)(*(const int*)optval);
  1151bc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1151c0:	e5932000 	ldr	r2, [r3]
  1151c4:	e51b300c 	ldr	r3, [fp, #-12]
  1151c8:	e5933000 	ldr	r3, [r3]
  1151cc:	e5933008 	ldr	r3, [r3, #8]
  1151d0:	e6ef2072 	uxtb	r2, r2
  1151d4:	e5c32009 	strb	r2, [r3, #9]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                  s, sock->conn->pcb.ip->tos));
      break;
  1151d8:	ea0000bf 	b	1154dc <lwip_setsockopt_impl+0x79c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  1151dc:	e59b3004 	ldr	r3, [fp, #4]
  1151e0:	e3530000 	cmp	r3, #0
  1151e4:	1a000001 	bne	1151f0 <lwip_setsockopt_impl+0x4b0>
  1151e8:	e3a03016 	mov	r3, #22
  1151ec:	ea00012d 	b	1156a8 <lwip_setsockopt_impl+0x968>
  1151f0:	e51b300c 	ldr	r3, [fp, #-12]
  1151f4:	e5933000 	ldr	r3, [r3]
  1151f8:	e3530000 	cmp	r3, #0
  1151fc:	0a000004 	beq	115214 <lwip_setsockopt_impl+0x4d4>
  115200:	e51b300c 	ldr	r3, [fp, #-12]
  115204:	e5933000 	ldr	r3, [r3]
  115208:	e5933008 	ldr	r3, [r3, #8]
  11520c:	e3530000 	cmp	r3, #0
  115210:	1a000001 	bne	11521c <lwip_setsockopt_impl+0x4dc>
  115214:	e3a03016 	mov	r3, #22
  115218:	ea000122 	b	1156a8 <lwip_setsockopt_impl+0x968>
  11521c:	e51b300c 	ldr	r3, [fp, #-12]
  115220:	e5933000 	ldr	r3, [r3]
  115224:	e5933000 	ldr	r3, [r3]
  115228:	e20330f0 	and	r3, r3, #240	; 0xf0
  11522c:	e3530020 	cmp	r3, #32
  115230:	0a000001 	beq	11523c <lwip_setsockopt_impl+0x4fc>
  115234:	e3a0305c 	mov	r3, #92	; 0x5c
  115238:	ea00011a 	b	1156a8 <lwip_setsockopt_impl+0x968>
      udp_set_multicast_ttl(sock->conn->pcb.udp, (u8_t)(*(const u8_t*)optval));
  11523c:	e51b300c 	ldr	r3, [fp, #-12]
  115240:	e5933000 	ldr	r3, [r3]
  115244:	e5933008 	ldr	r3, [r3, #8]
  115248:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  11524c:	e5d22000 	ldrb	r2, [r2]
  115250:	e5c3201c 	strb	r2, [r3, #28]
      break;
  115254:	ea0000a0 	b	1154dc <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_IF:
      {
        ip4_addr_t if_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct in_addr, NETCONN_UDP);
  115258:	e59b3004 	ldr	r3, [fp, #4]
  11525c:	e3530003 	cmp	r3, #3
  115260:	8a000001 	bhi	11526c <lwip_setsockopt_impl+0x52c>
  115264:	e3a03016 	mov	r3, #22
  115268:	ea00010e 	b	1156a8 <lwip_setsockopt_impl+0x968>
  11526c:	e51b300c 	ldr	r3, [fp, #-12]
  115270:	e5933000 	ldr	r3, [r3]
  115274:	e3530000 	cmp	r3, #0
  115278:	0a000004 	beq	115290 <lwip_setsockopt_impl+0x550>
  11527c:	e51b300c 	ldr	r3, [fp, #-12]
  115280:	e5933000 	ldr	r3, [r3]
  115284:	e5933008 	ldr	r3, [r3, #8]
  115288:	e3530000 	cmp	r3, #0
  11528c:	1a000001 	bne	115298 <lwip_setsockopt_impl+0x558>
  115290:	e3a03016 	mov	r3, #22
  115294:	ea000103 	b	1156a8 <lwip_setsockopt_impl+0x968>
  115298:	e51b300c 	ldr	r3, [fp, #-12]
  11529c:	e5933000 	ldr	r3, [r3]
  1152a0:	e5933000 	ldr	r3, [r3]
  1152a4:	e20330f0 	and	r3, r3, #240	; 0xf0
  1152a8:	e3530020 	cmp	r3, #32
  1152ac:	0a000001 	beq	1152b8 <lwip_setsockopt_impl+0x578>
  1152b0:	e3a0305c 	mov	r3, #92	; 0x5c
  1152b4:	ea0000fb 	b	1156a8 <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, (const struct in_addr*)optval);
  1152b8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1152bc:	e5933000 	ldr	r3, [r3]
  1152c0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        udp_set_multicast_netif_addr(sock->conn->pcb.udp, &if_addr);
  1152c4:	e51b300c 	ldr	r3, [fp, #-12]
  1152c8:	e5933000 	ldr	r3, [r3]
  1152cc:	e5933008 	ldr	r3, [r3, #8]
  1152d0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1152d4:	e5832018 	str	r2, [r3, #24]
      }
      break;
  1152d8:	ea00007f 	b	1154dc <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  1152dc:	e59b3004 	ldr	r3, [fp, #4]
  1152e0:	e3530000 	cmp	r3, #0
  1152e4:	1a000001 	bne	1152f0 <lwip_setsockopt_impl+0x5b0>
  1152e8:	e3a03016 	mov	r3, #22
  1152ec:	ea0000ed 	b	1156a8 <lwip_setsockopt_impl+0x968>
  1152f0:	e51b300c 	ldr	r3, [fp, #-12]
  1152f4:	e5933000 	ldr	r3, [r3]
  1152f8:	e3530000 	cmp	r3, #0
  1152fc:	0a000004 	beq	115314 <lwip_setsockopt_impl+0x5d4>
  115300:	e51b300c 	ldr	r3, [fp, #-12]
  115304:	e5933000 	ldr	r3, [r3]
  115308:	e5933008 	ldr	r3, [r3, #8]
  11530c:	e3530000 	cmp	r3, #0
  115310:	1a000001 	bne	11531c <lwip_setsockopt_impl+0x5dc>
  115314:	e3a03016 	mov	r3, #22
  115318:	ea0000e2 	b	1156a8 <lwip_setsockopt_impl+0x968>
  11531c:	e51b300c 	ldr	r3, [fp, #-12]
  115320:	e5933000 	ldr	r3, [r3]
  115324:	e5933000 	ldr	r3, [r3]
  115328:	e20330f0 	and	r3, r3, #240	; 0xf0
  11532c:	e3530020 	cmp	r3, #32
  115330:	0a000001 	beq	11533c <lwip_setsockopt_impl+0x5fc>
  115334:	e3a0305c 	mov	r3, #92	; 0x5c
  115338:	ea0000da 	b	1156a8 <lwip_setsockopt_impl+0x968>
      if (*(const u8_t*)optval) {
  11533c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115340:	e5d33000 	ldrb	r3, [r3]
  115344:	e3530000 	cmp	r3, #0
  115348:	0a00000a 	beq	115378 <lwip_setsockopt_impl+0x638>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_MULTICAST_LOOP);
  11534c:	e51b300c 	ldr	r3, [fp, #-12]
  115350:	e5933000 	ldr	r3, [r3]
  115354:	e5933008 	ldr	r3, [r3, #8]
  115358:	e5d32010 	ldrb	r2, [r3, #16]
  11535c:	e51b300c 	ldr	r3, [fp, #-12]
  115360:	e5933000 	ldr	r3, [r3]
  115364:	e5933008 	ldr	r3, [r3, #8]
  115368:	e3822008 	orr	r2, r2, #8
  11536c:	e6ef2072 	uxtb	r2, r2
  115370:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
      }
      break;
  115374:	ea000058 	b	1154dc <lwip_setsockopt_impl+0x79c>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
  115378:	e51b300c 	ldr	r3, [fp, #-12]
  11537c:	e5933000 	ldr	r3, [r3]
  115380:	e5933008 	ldr	r3, [r3, #8]
  115384:	e5d32010 	ldrb	r2, [r3, #16]
  115388:	e51b300c 	ldr	r3, [fp, #-12]
  11538c:	e5933000 	ldr	r3, [r3]
  115390:	e5933008 	ldr	r3, [r3, #8]
  115394:	e3c22008 	bic	r2, r2, #8
  115398:	e6ef2072 	uxtb	r2, r2
  11539c:	e5c32010 	strb	r2, [r3, #16]
      break;
  1153a0:	ea00004d 	b	1154dc <lwip_setsockopt_impl+0x79c>
    case IP_DROP_MEMBERSHIP:
      {
        /* If this is a TCP or a RAW socket, ignore these options. */
        /* @todo: assign membership to this socket so that it is dropped when closing the socket */
        err_t igmp_err;
        const struct ip_mreq *imr = (const struct ip_mreq *)optval;
  1153a4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1153a8:	e50b3010 	str	r3, [fp, #-16]
        ip4_addr_t if_addr;
        ip4_addr_t multi_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct ip_mreq, NETCONN_UDP);
  1153ac:	e59b3004 	ldr	r3, [fp, #4]
  1153b0:	e3530007 	cmp	r3, #7
  1153b4:	8a000001 	bhi	1153c0 <lwip_setsockopt_impl+0x680>
  1153b8:	e3a03016 	mov	r3, #22
  1153bc:	ea0000b9 	b	1156a8 <lwip_setsockopt_impl+0x968>
  1153c0:	e51b300c 	ldr	r3, [fp, #-12]
  1153c4:	e5933000 	ldr	r3, [r3]
  1153c8:	e3530000 	cmp	r3, #0
  1153cc:	0a000004 	beq	1153e4 <lwip_setsockopt_impl+0x6a4>
  1153d0:	e51b300c 	ldr	r3, [fp, #-12]
  1153d4:	e5933000 	ldr	r3, [r3]
  1153d8:	e5933008 	ldr	r3, [r3, #8]
  1153dc:	e3530000 	cmp	r3, #0
  1153e0:	1a000001 	bne	1153ec <lwip_setsockopt_impl+0x6ac>
  1153e4:	e3a03016 	mov	r3, #22
  1153e8:	ea0000ae 	b	1156a8 <lwip_setsockopt_impl+0x968>
  1153ec:	e51b300c 	ldr	r3, [fp, #-12]
  1153f0:	e5933000 	ldr	r3, [r3]
  1153f4:	e5933000 	ldr	r3, [r3]
  1153f8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1153fc:	e3530020 	cmp	r3, #32
  115400:	0a000001 	beq	11540c <lwip_setsockopt_impl+0x6cc>
  115404:	e3a0305c 	mov	r3, #92	; 0x5c
  115408:	ea0000a6 	b	1156a8 <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, &imr->imr_interface);
  11540c:	e51b3010 	ldr	r3, [fp, #-16]
  115410:	e5933004 	ldr	r3, [r3, #4]
  115414:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        inet_addr_to_ip4addr(&multi_addr, &imr->imr_multiaddr);
  115418:	e51b3010 	ldr	r3, [fp, #-16]
  11541c:	e5933000 	ldr	r3, [r3]
  115420:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (optname == IP_ADD_MEMBERSHIP) {
  115424:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115428:	e3530003 	cmp	r3, #3
  11542c:	1a000014 	bne	115484 <lwip_setsockopt_impl+0x744>
          if (!lwip_socket_register_membership(s, &if_addr, &multi_addr)) {
  115430:	e24b201c 	sub	r2, fp, #28
  115434:	e24b3018 	sub	r3, fp, #24
  115438:	e1a01003 	mov	r1, r3
  11543c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  115440:	eb0001ba 	bl	115b30 <lwip_socket_register_membership>
  115444:	e1a03000 	mov	r3, r0
  115448:	e3530000 	cmp	r3, #0
  11544c:	1a000004 	bne	115464 <lwip_setsockopt_impl+0x724>
            /* cannot track membership (out of memory) */
            err = ENOMEM;
  115450:	e3a0300c 	mov	r3, #12
  115454:	e54b3005 	strb	r3, [fp, #-5]
            igmp_err = ERR_OK;
  115458:	e3a03000 	mov	r3, #0
  11545c:	e54b3006 	strb	r3, [fp, #-6]
  115460:	ea000013 	b	1154b4 <lwip_setsockopt_impl+0x774>
          } else {
            igmp_err = igmp_joingroup(&if_addr, &multi_addr);
  115464:	e24b201c 	sub	r2, fp, #28
  115468:	e24b3018 	sub	r3, fp, #24
  11546c:	e1a01002 	mov	r1, r2
  115470:	e1a00003 	mov	r0, r3
  115474:	eb006c95 	bl	1306d0 <igmp_joingroup>
  115478:	e1a03000 	mov	r3, r0
  11547c:	e54b3006 	strb	r3, [fp, #-6]
  115480:	ea00000b 	b	1154b4 <lwip_setsockopt_impl+0x774>
          }
        } else {
          igmp_err = igmp_leavegroup(&if_addr, &multi_addr);
  115484:	e24b201c 	sub	r2, fp, #28
  115488:	e24b3018 	sub	r3, fp, #24
  11548c:	e1a01002 	mov	r1, r2
  115490:	e1a00003 	mov	r0, r3
  115494:	eb006d46 	bl	1309b4 <igmp_leavegroup>
  115498:	e1a03000 	mov	r3, r0
  11549c:	e54b3006 	strb	r3, [fp, #-6]
          lwip_socket_unregister_membership(s, &if_addr, &multi_addr);
  1154a0:	e24b201c 	sub	r2, fp, #28
  1154a4:	e24b3018 	sub	r3, fp, #24
  1154a8:	e1a01003 	mov	r1, r3
  1154ac:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1154b0:	eb0001e0 	bl	115c38 <lwip_socket_unregister_membership>
        }
        if (igmp_err != ERR_OK) {
  1154b4:	e15b30d6 	ldrsb	r3, [fp, #-6]
  1154b8:	e3530000 	cmp	r3, #0
  1154bc:	0a000005 	beq	1154d8 <lwip_setsockopt_impl+0x798>
          err = EADDRNOTAVAIL;
  1154c0:	e3a03063 	mov	r3, #99	; 0x63
  1154c4:	e54b3005 	strb	r3, [fp, #-5]
        }
      }
      break;
  1154c8:	ea000002 	b	1154d8 <lwip_setsockopt_impl+0x798>
#endif /* LWIP_IGMP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1154cc:	e3a0305c 	mov	r3, #92	; 0x5c
  1154d0:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1154d4:	ea000000 	b	1154dc <lwip_setsockopt_impl+0x79c>
      break;
  1154d8:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1154dc:	ea000070 	b	1156a4 <lwip_setsockopt_impl+0x964>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
  1154e0:	e59b3004 	ldr	r3, [fp, #4]
  1154e4:	e3530003 	cmp	r3, #3
  1154e8:	8a000001 	bhi	1154f4 <lwip_setsockopt_impl+0x7b4>
  1154ec:	e3a03016 	mov	r3, #22
  1154f0:	ea00006c 	b	1156a8 <lwip_setsockopt_impl+0x968>
  1154f4:	e51b300c 	ldr	r3, [fp, #-12]
  1154f8:	e5933000 	ldr	r3, [r3]
  1154fc:	e3530000 	cmp	r3, #0
  115500:	0a000004 	beq	115518 <lwip_setsockopt_impl+0x7d8>
  115504:	e51b300c 	ldr	r3, [fp, #-12]
  115508:	e5933000 	ldr	r3, [r3]
  11550c:	e5933008 	ldr	r3, [r3, #8]
  115510:	e3530000 	cmp	r3, #0
  115514:	1a000001 	bne	115520 <lwip_setsockopt_impl+0x7e0>
  115518:	e3a03016 	mov	r3, #22
  11551c:	ea000061 	b	1156a8 <lwip_setsockopt_impl+0x968>
  115520:	e51b300c 	ldr	r3, [fp, #-12]
  115524:	e5933000 	ldr	r3, [r3]
  115528:	e5933000 	ldr	r3, [r3]
  11552c:	e20330f0 	and	r3, r3, #240	; 0xf0
  115530:	e3530010 	cmp	r3, #16
  115534:	0a000001 	beq	115540 <lwip_setsockopt_impl+0x800>
  115538:	e3a0305c 	mov	r3, #92	; 0x5c
  11553c:	ea000059 	b	1156a8 <lwip_setsockopt_impl+0x968>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  115540:	e51b300c 	ldr	r3, [fp, #-12]
  115544:	e5933000 	ldr	r3, [r3]
  115548:	e5933008 	ldr	r3, [r3, #8]
  11554c:	e5933014 	ldr	r3, [r3, #20]
  115550:	e3530001 	cmp	r3, #1
  115554:	1a000001 	bne	115560 <lwip_setsockopt_impl+0x820>
      return EINVAL;
  115558:	e3a03016 	mov	r3, #22
  11555c:	ea000051 	b	1156a8 <lwip_setsockopt_impl+0x968>
    }
    switch (optname) {
  115560:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115564:	e2433001 	sub	r3, r3, #1
  115568:	e3530004 	cmp	r3, #4
  11556c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  115570:	ea000040 	b	115678 <lwip_setsockopt_impl+0x938>
  115574:	00115588 	.word	0x00115588
  115578:	001155f0 	.word	0x001155f0
  11557c:	0011560c 	.word	0x0011560c
  115580:	00115634 	.word	0x00115634
  115584:	0011565c 	.word	0x0011565c
    case TCP_NODELAY:
      if (*(const int*)optval) {
  115588:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11558c:	e5933000 	ldr	r3, [r3]
  115590:	e3530000 	cmp	r3, #0
  115594:	0a00000a 	beq	1155c4 <lwip_setsockopt_impl+0x884>
        tcp_nagle_disable(sock->conn->pcb.tcp);
  115598:	e51b300c 	ldr	r3, [fp, #-12]
  11559c:	e5933000 	ldr	r3, [r3]
  1155a0:	e5933008 	ldr	r3, [r3, #8]
  1155a4:	e5d3201e 	ldrb	r2, [r3, #30]
  1155a8:	e51b300c 	ldr	r3, [fp, #-12]
  1155ac:	e5933000 	ldr	r3, [r3]
  1155b0:	e5933008 	ldr	r3, [r3, #8]
  1155b4:	e3822040 	orr	r2, r2, #64	; 0x40
  1155b8:	e6ef2072 	uxtb	r2, r2
  1155bc:	e5c3201e 	strb	r2, [r3, #30]
      } else {
        tcp_nagle_enable(sock->conn->pcb.tcp);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(const int *)optval)?"on":"off") );
      break;
  1155c0:	ea00002f 	b	115684 <lwip_setsockopt_impl+0x944>
        tcp_nagle_enable(sock->conn->pcb.tcp);
  1155c4:	e51b300c 	ldr	r3, [fp, #-12]
  1155c8:	e5933000 	ldr	r3, [r3]
  1155cc:	e5933008 	ldr	r3, [r3, #8]
  1155d0:	e5d3201e 	ldrb	r2, [r3, #30]
  1155d4:	e51b300c 	ldr	r3, [fp, #-12]
  1155d8:	e5933000 	ldr	r3, [r3]
  1155dc:	e5933008 	ldr	r3, [r3, #8]
  1155e0:	e3c22040 	bic	r2, r2, #64	; 0x40
  1155e4:	e6ef2072 	uxtb	r2, r2
  1155e8:	e5c3201e 	strb	r2, [r3, #30]
      break;
  1155ec:	ea000024 	b	115684 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPALIVE:
      sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int*)optval);
  1155f0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1155f4:	e5932000 	ldr	r2, [r3]
  1155f8:	e51b300c 	ldr	r3, [fp, #-12]
  1155fc:	e5933000 	ldr	r3, [r3]
  115600:	e5933008 	ldr	r3, [r3, #8]
  115604:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  115608:	ea00001d 	b	115684 <lwip_setsockopt_impl+0x944>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      sock->conn->pcb.tcp->keep_idle = 1000*(u32_t)(*(const int*)optval);
  11560c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115610:	e5933000 	ldr	r3, [r3]
  115614:	e1a01003 	mov	r1, r3
  115618:	e51b300c 	ldr	r3, [fp, #-12]
  11561c:	e5933000 	ldr	r3, [r3]
  115620:	e5933008 	ldr	r3, [r3, #8]
  115624:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  115628:	e0020192 	mul	r2, r2, r1
  11562c:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  115630:	ea000013 	b	115684 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPINTVL:
      sock->conn->pcb.tcp->keep_intvl = 1000*(u32_t)(*(const int*)optval);
  115634:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115638:	e5933000 	ldr	r3, [r3]
  11563c:	e1a01003 	mov	r1, r3
  115640:	e51b300c 	ldr	r3, [fp, #-12]
  115644:	e5933000 	ldr	r3, [r3]
  115648:	e5933008 	ldr	r3, [r3, #8]
  11564c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  115650:	e0020192 	mul	r2, r2, r1
  115654:	e5832098 	str	r2, [r3, #152]	; 0x98
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_intvl));
      break;
  115658:	ea000009 	b	115684 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPCNT:
      sock->conn->pcb.tcp->keep_cnt = (u32_t)(*(const int*)optval);
  11565c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115660:	e5932000 	ldr	r2, [r3]
  115664:	e51b300c 	ldr	r3, [fp, #-12]
  115668:	e5933000 	ldr	r3, [r3]
  11566c:	e5933008 	ldr	r3, [r3, #8]
  115670:	e583209c 	str	r2, [r3, #156]	; 0x9c
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_cnt));
      break;
  115674:	ea000002 	b	115684 <lwip_setsockopt_impl+0x944>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  115678:	e3a0305c 	mov	r3, #92	; 0x5c
  11567c:	e54b3005 	strb	r3, [fp, #-5]
      break;
  115680:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  115684:	ea000006 	b	1156a4 <lwip_setsockopt_impl+0x964>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
  115688:	e3a0305c 	mov	r3, #92	; 0x5c
  11568c:	e54b3005 	strb	r3, [fp, #-5]
      break;
  115690:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  115694:	ea000002 	b	1156a4 <lwip_setsockopt_impl+0x964>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                s, level, optname));
    err = ENOPROTOOPT;
  115698:	e3a0305c 	mov	r3, #92	; 0x5c
  11569c:	e54b3005 	strb	r3, [fp, #-5]
    break;
  1156a0:	e320f000 	nop	{0}
  }  /* switch (level) */

  return err;
  1156a4:	e55b3005 	ldrb	r3, [fp, #-5]
}
  1156a8:	e1a00003 	mov	r0, r3
  1156ac:	e24bd004 	sub	sp, fp, #4
  1156b0:	e8bd8800 	pop	{fp, pc}

001156b4 <lwip_ioctl>:

int
lwip_ioctl(int s, long cmd, void *argp)
{
  1156b4:	e92d4800 	push	{fp, lr}
  1156b8:	e28db004 	add	fp, sp, #4
  1156bc:	e24dd038 	sub	sp, sp, #56	; 0x38
  1156c0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  1156c4:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  1156c8:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct lwip_sock *sock = get_socket(s);
  1156cc:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1156d0:	ebffee03 	bl	110ee4 <get_socket>
  1156d4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  u8_t val;
#if LWIP_SO_RCVBUF
  u16_t buflen = 0;
  1156d8:	e3a03000 	mov	r3, #0
  1156dc:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  if (!sock) {
  1156e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1156e4:	e3530000 	cmp	r3, #0
  1156e8:	1a000001 	bne	1156f4 <lwip_ioctl+0x40>
    return -1;
  1156ec:	e3e03000 	mvn	r3, #0
  1156f0:	ea000093 	b	115944 <lwip_ioctl+0x290>
  }

  switch (cmd) {
  1156f4:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  1156f8:	e306367f 	movw	r3, #26239	; 0x667f
  1156fc:	e3483004 	movt	r3, #32772	; 0x8004
  115700:	e1520003 	cmp	r2, r3
  115704:	0a00000e 	beq	115744 <lwip_ioctl+0x90>
  115708:	e306367e 	movw	r3, #26238	; 0x667e
  11570c:	e3443004 	movt	r3, #16388	; 0x4004
  115710:	e1520003 	cmp	r2, r3
  115714:	0a000057 	beq	115878 <lwip_ioctl+0x1c4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, val));
    sock_set_errno(sock, 0);
    return 0;

  default:
    break;
  115718:	e320f000 	nop	{0}
  } /* switch (cmd) */
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  11571c:	e3a03026 	mov	r3, #38	; 0x26
  115720:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  115724:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115728:	e6ef2073 	uxtb	r2, r3
  11572c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115730:	e5c32010 	strb	r2, [r3, #16]
  115734:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115738:	e3530000 	cmp	r3, #0
  11573c:	0a00007f 	beq	115940 <lwip_ioctl+0x28c>
  115740:	ea00007a 	b	115930 <lwip_ioctl+0x27c>
    if (!argp) {
  115744:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115748:	e3530000 	cmp	r3, #0
  11574c:	1a00000e 	bne	11578c <lwip_ioctl+0xd8>
      sock_set_errno(sock, EINVAL);
  115750:	e3a03016 	mov	r3, #22
  115754:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  115758:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11575c:	e6ef2073 	uxtb	r2, r3
  115760:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115764:	e5c32010 	strb	r2, [r3, #16]
  115768:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11576c:	e3530000 	cmp	r3, #0
  115770:	0a000003 	beq	115784 <lwip_ioctl+0xd0>
  115774:	eb008dc9 	bl	138ea0 <__errno_location>
  115778:	e1a02000 	mov	r2, r0
  11577c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  115780:	e5823000 	str	r3, [r2]
      return -1;
  115784:	e3e03000 	mvn	r3, #0
  115788:	ea00006d 	b	115944 <lwip_ioctl+0x290>
    SYS_ARCH_GET(sock->conn->recv_avail, recv_avail);
  11578c:	ebffb2aa 	bl	10223c <rt_enter_critical>
  115790:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115794:	e5933000 	ldr	r3, [r3]
  115798:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  11579c:	e50b300c 	str	r3, [fp, #-12]
  1157a0:	ebffb2ab 	bl	102254 <rt_exit_critical>
    if (recv_avail < 0) {
  1157a4:	e51b300c 	ldr	r3, [fp, #-12]
  1157a8:	e3530000 	cmp	r3, #0
  1157ac:	aa000001 	bge	1157b8 <lwip_ioctl+0x104>
      recv_avail = 0;
  1157b0:	e3a03000 	mov	r3, #0
  1157b4:	e50b300c 	str	r3, [fp, #-12]
    *((int*)argp) = recv_avail;
  1157b8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1157bc:	e51b200c 	ldr	r2, [fp, #-12]
  1157c0:	e5832000 	str	r2, [r3]
    if (sock->lastdata) {
  1157c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1157c8:	e5933004 	ldr	r3, [r3, #4]
  1157cc:	e3530000 	cmp	r3, #0
  1157d0:	0a000019 	beq	11583c <lwip_ioctl+0x188>
      struct pbuf *p = (struct pbuf *)sock->lastdata;
  1157d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1157d8:	e5933004 	ldr	r3, [r3, #4]
  1157dc:	e50b3010 	str	r3, [fp, #-16]
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  1157e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1157e4:	e5933000 	ldr	r3, [r3]
  1157e8:	e5933000 	ldr	r3, [r3]
  1157ec:	e20330f0 	and	r3, r3, #240	; 0xf0
  1157f0:	e3530010 	cmp	r3, #16
  1157f4:	0a000002 	beq	115804 <lwip_ioctl+0x150>
        p = ((struct netbuf *)p)->p;
  1157f8:	e51b3010 	ldr	r3, [fp, #-16]
  1157fc:	e5933000 	ldr	r3, [r3]
  115800:	e50b3010 	str	r3, [fp, #-16]
      buflen = p->tot_len;
  115804:	e51b3010 	ldr	r3, [fp, #-16]
  115808:	e1d330b8 	ldrh	r3, [r3, #8]
  11580c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      buflen -= sock->lastoffset;
  115810:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115814:	e1d330b8 	ldrh	r3, [r3, #8]
  115818:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  11581c:	e0423003 	sub	r3, r2, r3
  115820:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      *((int*)argp) += buflen;
  115824:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115828:	e5932000 	ldr	r2, [r3]
  11582c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  115830:	e0822003 	add	r2, r2, r3
  115834:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115838:	e5832000 	str	r2, [r3]
    sock_set_errno(sock, 0);
  11583c:	e3a03000 	mov	r3, #0
  115840:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  115844:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  115848:	e6ef2073 	uxtb	r2, r3
  11584c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115850:	e5c32010 	strb	r2, [r3, #16]
  115854:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  115858:	e3530000 	cmp	r3, #0
  11585c:	0a000003 	beq	115870 <lwip_ioctl+0x1bc>
  115860:	eb008d8e 	bl	138ea0 <__errno_location>
  115864:	e1a02000 	mov	r2, r0
  115868:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11586c:	e5823000 	str	r3, [r2]
    return 0;
  115870:	e3a03000 	mov	r3, #0
  115874:	ea000032 	b	115944 <lwip_ioctl+0x290>
    val = 0;
  115878:	e3a03000 	mov	r3, #0
  11587c:	e54b3005 	strb	r3, [fp, #-5]
    if (argp && *(u32_t*)argp) {
  115880:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115884:	e3530000 	cmp	r3, #0
  115888:	0a000005 	beq	1158a4 <lwip_ioctl+0x1f0>
  11588c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115890:	e5933000 	ldr	r3, [r3]
  115894:	e3530000 	cmp	r3, #0
  115898:	0a000001 	beq	1158a4 <lwip_ioctl+0x1f0>
      val = 1;
  11589c:	e3a03001 	mov	r3, #1
  1158a0:	e54b3005 	strb	r3, [fp, #-5]
    netconn_set_nonblocking(sock->conn, val);
  1158a4:	e55b3005 	ldrb	r3, [fp, #-5]
  1158a8:	e3530000 	cmp	r3, #0
  1158ac:	0a000008 	beq	1158d4 <lwip_ioctl+0x220>
  1158b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1158b4:	e5933000 	ldr	r3, [r3]
  1158b8:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  1158bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1158c0:	e5933000 	ldr	r3, [r3]
  1158c4:	e3822002 	orr	r2, r2, #2
  1158c8:	e6ef2072 	uxtb	r2, r2
  1158cc:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  1158d0:	ea000007 	b	1158f4 <lwip_ioctl+0x240>
  1158d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1158d8:	e5933000 	ldr	r3, [r3]
  1158dc:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  1158e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1158e4:	e5933000 	ldr	r3, [r3]
  1158e8:	e3c22002 	bic	r2, r2, #2
  1158ec:	e6ef2072 	uxtb	r2, r2
  1158f0:	e5c32030 	strb	r2, [r3, #48]	; 0x30
    sock_set_errno(sock, 0);
  1158f4:	e3a03000 	mov	r3, #0
  1158f8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1158fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115900:	e6ef2073 	uxtb	r2, r3
  115904:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115908:	e5c32010 	strb	r2, [r3, #16]
  11590c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115910:	e3530000 	cmp	r3, #0
  115914:	0a000003 	beq	115928 <lwip_ioctl+0x274>
  115918:	eb008d60 	bl	138ea0 <__errno_location>
  11591c:	e1a02000 	mov	r2, r0
  115920:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115924:	e5823000 	str	r3, [r2]
    return 0;
  115928:	e3a03000 	mov	r3, #0
  11592c:	ea000004 	b	115944 <lwip_ioctl+0x290>
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115930:	eb008d5a 	bl	138ea0 <__errno_location>
  115934:	e1a02000 	mov	r2, r0
  115938:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11593c:	e5823000 	str	r3, [r2]
  return -1;
  115940:	e3e03000 	mvn	r3, #0
}
  115944:	e1a00003 	mov	r0, r3
  115948:	e24bd004 	sub	sp, fp, #4
  11594c:	e8bd8800 	pop	{fp, pc}

00115950 <lwip_fcntl>:
 * Currently only the commands F_GETFL and F_SETFL are implemented.
 * Only the flag O_NONBLOCK is implemented.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
  115950:	e92d4800 	push	{fp, lr}
  115954:	e28db004 	add	fp, sp, #4
  115958:	e24dd028 	sub	sp, sp, #40	; 0x28
  11595c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  115960:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  115964:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock = get_socket(s);
  115968:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  11596c:	ebffed5c 	bl	110ee4 <get_socket>
  115970:	e50b000c 	str	r0, [fp, #-12]
  int ret = -1;
  115974:	e3e03000 	mvn	r3, #0
  115978:	e50b3008 	str	r3, [fp, #-8]

  if (!sock) {
  11597c:	e51b300c 	ldr	r3, [fp, #-12]
  115980:	e3530000 	cmp	r3, #0
  115984:	1a000001 	bne	115990 <lwip_fcntl+0x40>
    return -1;
  115988:	e3e03000 	mvn	r3, #0
  11598c:	ea000064 	b	115b24 <lwip_fcntl+0x1d4>
  }

  switch (cmd) {
  115990:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  115994:	e3530003 	cmp	r3, #3
  115998:	0a000002 	beq	1159a8 <lwip_fcntl+0x58>
  11599c:	e3530004 	cmp	r3, #4
  1159a0:	0a000014 	beq	1159f8 <lwip_fcntl+0xa8>
  1159a4:	ea00004a 	b	115ad4 <lwip_fcntl+0x184>
  case F_GETFL:
    ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
  1159a8:	e51b300c 	ldr	r3, [fp, #-12]
  1159ac:	e5933000 	ldr	r3, [r3]
  1159b0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  1159b4:	e1a03503 	lsl	r3, r3, #10
  1159b8:	e2033b02 	and	r3, r3, #2048	; 0x800
  1159bc:	e50b3008 	str	r3, [fp, #-8]
    sock_set_errno(sock, 0);
  1159c0:	e3a03000 	mov	r3, #0
  1159c4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1159c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1159cc:	e6ef2073 	uxtb	r2, r3
  1159d0:	e51b300c 	ldr	r3, [fp, #-12]
  1159d4:	e5c32010 	strb	r2, [r3, #16]
  1159d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1159dc:	e3530000 	cmp	r3, #0
  1159e0:	0a000049 	beq	115b0c <lwip_fcntl+0x1bc>
  1159e4:	eb008d2d 	bl	138ea0 <__errno_location>
  1159e8:	e1a02000 	mov	r2, r0
  1159ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1159f0:	e5823000 	str	r3, [r2]
    break;
  1159f4:	ea000044 	b	115b0c <lwip_fcntl+0x1bc>
  case F_SETFL:
    if ((val & ~O_NONBLOCK) == 0) {
  1159f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1159fc:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  115a00:	e3530000 	cmp	r3, #0
  115a04:	1a000024 	bne	115a9c <lwip_fcntl+0x14c>
      /* only O_NONBLOCK, all other bits are zero */
      netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
  115a08:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115a0c:	e2033b02 	and	r3, r3, #2048	; 0x800
  115a10:	e3530000 	cmp	r3, #0
  115a14:	0a000008 	beq	115a3c <lwip_fcntl+0xec>
  115a18:	e51b300c 	ldr	r3, [fp, #-12]
  115a1c:	e5933000 	ldr	r3, [r3]
  115a20:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115a24:	e51b300c 	ldr	r3, [fp, #-12]
  115a28:	e5933000 	ldr	r3, [r3]
  115a2c:	e3822002 	orr	r2, r2, #2
  115a30:	e6ef2072 	uxtb	r2, r2
  115a34:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  115a38:	ea000007 	b	115a5c <lwip_fcntl+0x10c>
  115a3c:	e51b300c 	ldr	r3, [fp, #-12]
  115a40:	e5933000 	ldr	r3, [r3]
  115a44:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115a48:	e51b300c 	ldr	r3, [fp, #-12]
  115a4c:	e5933000 	ldr	r3, [r3]
  115a50:	e3c22002 	bic	r2, r2, #2
  115a54:	e6ef2072 	uxtb	r2, r2
  115a58:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      ret = 0;
  115a5c:	e3a03000 	mov	r3, #0
  115a60:	e50b3008 	str	r3, [fp, #-8]
      sock_set_errno(sock, 0);
  115a64:	e3a03000 	mov	r3, #0
  115a68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  115a6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115a70:	e6ef2073 	uxtb	r2, r3
  115a74:	e51b300c 	ldr	r3, [fp, #-12]
  115a78:	e5c32010 	strb	r2, [r3, #16]
  115a7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115a80:	e3530000 	cmp	r3, #0
  115a84:	0a000022 	beq	115b14 <lwip_fcntl+0x1c4>
  115a88:	eb008d04 	bl	138ea0 <__errno_location>
  115a8c:	e1a02000 	mov	r2, r0
  115a90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115a94:	e5823000 	str	r3, [r2]
    } else {
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
    }
    break;
  115a98:	ea00001d 	b	115b14 <lwip_fcntl+0x1c4>
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115a9c:	e3a03026 	mov	r3, #38	; 0x26
  115aa0:	e50b3010 	str	r3, [fp, #-16]
  115aa4:	e51b3010 	ldr	r3, [fp, #-16]
  115aa8:	e6ef2073 	uxtb	r2, r3
  115aac:	e51b300c 	ldr	r3, [fp, #-12]
  115ab0:	e5c32010 	strb	r2, [r3, #16]
  115ab4:	e51b3010 	ldr	r3, [fp, #-16]
  115ab8:	e3530000 	cmp	r3, #0
  115abc:	0a000014 	beq	115b14 <lwip_fcntl+0x1c4>
  115ac0:	eb008cf6 	bl	138ea0 <__errno_location>
  115ac4:	e1a02000 	mov	r2, r0
  115ac8:	e51b3010 	ldr	r3, [fp, #-16]
  115acc:	e5823000 	str	r3, [r2]
    break;
  115ad0:	ea00000f 	b	115b14 <lwip_fcntl+0x1c4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
    sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115ad4:	e3a03026 	mov	r3, #38	; 0x26
  115ad8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  115adc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115ae0:	e6ef2073 	uxtb	r2, r3
  115ae4:	e51b300c 	ldr	r3, [fp, #-12]
  115ae8:	e5c32010 	strb	r2, [r3, #16]
  115aec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115af0:	e3530000 	cmp	r3, #0
  115af4:	0a000008 	beq	115b1c <lwip_fcntl+0x1cc>
  115af8:	eb008ce8 	bl	138ea0 <__errno_location>
  115afc:	e1a02000 	mov	r2, r0
  115b00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115b04:	e5823000 	str	r3, [r2]
    break;
  115b08:	ea000003 	b	115b1c <lwip_fcntl+0x1cc>
    break;
  115b0c:	e320f000 	nop	{0}
  115b10:	ea000002 	b	115b20 <lwip_fcntl+0x1d0>
    break;
  115b14:	e320f000 	nop	{0}
  115b18:	ea000000 	b	115b20 <lwip_fcntl+0x1d0>
    break;
  115b1c:	e320f000 	nop	{0}
  }
  return ret;
  115b20:	e51b3008 	ldr	r3, [fp, #-8]
}
  115b24:	e1a00003 	mov	r0, r3
  115b28:	e24bd004 	sub	sp, fp, #4
  115b2c:	e8bd8800 	pop	{fp, pc}

00115b30 <lwip_socket_register_membership>:
 *
 * @return 1 on success, 0 on failure
 */
static int
lwip_socket_register_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  115b30:	e92d4800 	push	{fp, lr}
  115b34:	e28db004 	add	fp, sp, #4
  115b38:	e24dd018 	sub	sp, sp, #24
  115b3c:	e50b0010 	str	r0, [fp, #-16]
  115b40:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115b44:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115b48:	e51b0010 	ldr	r0, [fp, #-16]
  115b4c:	ebffece4 	bl	110ee4 <get_socket>
  115b50:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115b54:	e51b300c 	ldr	r3, [fp, #-12]
  115b58:	e3530000 	cmp	r3, #0
  115b5c:	1a000001 	bne	115b68 <lwip_socket_register_membership+0x38>
    return 0;
  115b60:	e3a03000 	mov	r3, #0
  115b64:	ea000030 	b	115c2c <lwip_socket_register_membership+0xfc>
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115b68:	e3a03000 	mov	r3, #0
  115b6c:	e50b3008 	str	r3, [fp, #-8]
  115b70:	ea000029 	b	115c1c <lwip_socket_register_membership+0xec>
    if (socket_ipv4_multicast_memberships[i].sock == NULL) {
  115b74:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  115b78:	e3403014 	movt	r3, #20
  115b7c:	e51b2008 	ldr	r2, [fp, #-8]
  115b80:	e3a0100c 	mov	r1, #12
  115b84:	e0020291 	mul	r2, r1, r2
  115b88:	e0833002 	add	r3, r3, r2
  115b8c:	e5933000 	ldr	r3, [r3]
  115b90:	e3530000 	cmp	r3, #0
  115b94:	1a00001d 	bne	115c10 <lwip_socket_register_membership+0xe0>
      socket_ipv4_multicast_memberships[i].sock = sock;
  115b98:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  115b9c:	e3403014 	movt	r3, #20
  115ba0:	e51b2008 	ldr	r2, [fp, #-8]
  115ba4:	e3a0100c 	mov	r1, #12
  115ba8:	e0020291 	mul	r2, r1, r2
  115bac:	e0833002 	add	r3, r3, r2
  115bb0:	e51b200c 	ldr	r2, [fp, #-12]
  115bb4:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].if_addr, *if_addr);
  115bb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115bbc:	e5932000 	ldr	r2, [r3]
  115bc0:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  115bc4:	e3403014 	movt	r3, #20
  115bc8:	e51b1008 	ldr	r1, [fp, #-8]
  115bcc:	e3a0000c 	mov	r0, #12
  115bd0:	e0010190 	mul	r1, r0, r1
  115bd4:	e0833001 	add	r3, r3, r1
  115bd8:	e2833004 	add	r3, r3, #4
  115bdc:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].multi_addr, *multi_addr);
  115be0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115be4:	e5932000 	ldr	r2, [r3]
  115be8:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  115bec:	e3403014 	movt	r3, #20
  115bf0:	e51b1008 	ldr	r1, [fp, #-8]
  115bf4:	e3a0000c 	mov	r0, #12
  115bf8:	e0010190 	mul	r1, r0, r1
  115bfc:	e0833001 	add	r3, r3, r1
  115c00:	e2833008 	add	r3, r3, #8
  115c04:	e5832000 	str	r2, [r3]
      return 1;
  115c08:	e3a03001 	mov	r3, #1
  115c0c:	ea000006 	b	115c2c <lwip_socket_register_membership+0xfc>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115c10:	e51b3008 	ldr	r3, [fp, #-8]
  115c14:	e2833001 	add	r3, r3, #1
  115c18:	e50b3008 	str	r3, [fp, #-8]
  115c1c:	e51b3008 	ldr	r3, [fp, #-8]
  115c20:	e3530007 	cmp	r3, #7
  115c24:	daffffd2 	ble	115b74 <lwip_socket_register_membership+0x44>
    }
  }
  return 0;
  115c28:	e3a03000 	mov	r3, #0
}
  115c2c:	e1a00003 	mov	r0, r3
  115c30:	e24bd004 	sub	sp, fp, #4
  115c34:	e8bd8800 	pop	{fp, pc}

00115c38 <lwip_socket_unregister_membership>:
 *
 * ATTENTION: this function is called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_unregister_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  115c38:	e92d4800 	push	{fp, lr}
  115c3c:	e28db004 	add	fp, sp, #4
  115c40:	e24dd018 	sub	sp, sp, #24
  115c44:	e50b0010 	str	r0, [fp, #-16]
  115c48:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115c4c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115c50:	e51b0010 	ldr	r0, [fp, #-16]
  115c54:	ebffeca2 	bl	110ee4 <get_socket>
  115c58:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115c5c:	e51b300c 	ldr	r3, [fp, #-12]
  115c60:	e3530000 	cmp	r3, #0
  115c64:	0a000046 	beq	115d84 <lwip_socket_unregister_membership+0x14c>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115c68:	e3a03000 	mov	r3, #0
  115c6c:	e50b3008 	str	r3, [fp, #-8]
  115c70:	ea00003f 	b	115d74 <lwip_socket_unregister_membership+0x13c>
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  115c74:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  115c78:	e3403014 	movt	r3, #20
  115c7c:	e51b2008 	ldr	r2, [fp, #-8]
  115c80:	e3a0100c 	mov	r1, #12
  115c84:	e0020291 	mul	r2, r1, r2
  115c88:	e0833002 	add	r3, r3, r2
  115c8c:	e5933000 	ldr	r3, [r3]
  115c90:	e51b200c 	ldr	r2, [fp, #-12]
  115c94:	e1520003 	cmp	r2, r3
  115c98:	1a000032 	bne	115d68 <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  115c9c:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  115ca0:	e3403014 	movt	r3, #20
  115ca4:	e51b2008 	ldr	r2, [fp, #-8]
  115ca8:	e3a0100c 	mov	r1, #12
  115cac:	e0020291 	mul	r2, r1, r2
  115cb0:	e0833002 	add	r3, r3, r2
  115cb4:	e2833004 	add	r3, r3, #4
  115cb8:	e5932000 	ldr	r2, [r3]
  115cbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115cc0:	e5933000 	ldr	r3, [r3]
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  115cc4:	e1520003 	cmp	r2, r3
  115cc8:	1a000026 	bne	115d68 <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].multi_addr, multi_addr)) {
  115ccc:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  115cd0:	e3403014 	movt	r3, #20
  115cd4:	e51b2008 	ldr	r2, [fp, #-8]
  115cd8:	e3a0100c 	mov	r1, #12
  115cdc:	e0020291 	mul	r2, r1, r2
  115ce0:	e0833002 	add	r3, r3, r2
  115ce4:	e2833008 	add	r3, r3, #8
  115ce8:	e5932000 	ldr	r2, [r3]
  115cec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115cf0:	e5933000 	ldr	r3, [r3]
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  115cf4:	e1520003 	cmp	r2, r3
  115cf8:	1a00001a 	bne	115d68 <lwip_socket_unregister_membership+0x130>
      socket_ipv4_multicast_memberships[i].sock = NULL;
  115cfc:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  115d00:	e3403014 	movt	r3, #20
  115d04:	e51b2008 	ldr	r2, [fp, #-8]
  115d08:	e3a0100c 	mov	r1, #12
  115d0c:	e0020291 	mul	r2, r1, r2
  115d10:	e0833002 	add	r3, r3, r2
  115d14:	e3a02000 	mov	r2, #0
  115d18:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  115d1c:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  115d20:	e3403014 	movt	r3, #20
  115d24:	e51b2008 	ldr	r2, [fp, #-8]
  115d28:	e3a0100c 	mov	r1, #12
  115d2c:	e0020291 	mul	r2, r1, r2
  115d30:	e0833002 	add	r3, r3, r2
  115d34:	e2833004 	add	r3, r3, #4
  115d38:	e3a02000 	mov	r2, #0
  115d3c:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  115d40:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  115d44:	e3403014 	movt	r3, #20
  115d48:	e51b2008 	ldr	r2, [fp, #-8]
  115d4c:	e3a0100c 	mov	r1, #12
  115d50:	e0020291 	mul	r2, r1, r2
  115d54:	e0833002 	add	r3, r3, r2
  115d58:	e2833008 	add	r3, r3, #8
  115d5c:	e3a02000 	mov	r2, #0
  115d60:	e5832000 	str	r2, [r3]
      return;
  115d64:	ea000007 	b	115d88 <lwip_socket_unregister_membership+0x150>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115d68:	e51b3008 	ldr	r3, [fp, #-8]
  115d6c:	e2833001 	add	r3, r3, #1
  115d70:	e50b3008 	str	r3, [fp, #-8]
  115d74:	e51b3008 	ldr	r3, [fp, #-8]
  115d78:	e3530007 	cmp	r3, #7
  115d7c:	daffffbc 	ble	115c74 <lwip_socket_unregister_membership+0x3c>
  115d80:	ea000000 	b	115d88 <lwip_socket_unregister_membership+0x150>
    return;
  115d84:	e320f000 	nop	{0}
    }
  }
}
  115d88:	e24bd004 	sub	sp, fp, #4
  115d8c:	e8bd8800 	pop	{fp, pc}

00115d90 <lwip_socket_drop_registered_memberships>:
 *
 * ATTENTION: this function is NOT called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_drop_registered_memberships(int s)
{
  115d90:	e92d4800 	push	{fp, lr}
  115d94:	e28db004 	add	fp, sp, #4
  115d98:	e24dd018 	sub	sp, sp, #24
  115d9c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115da0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  115da4:	ebffec4e 	bl	110ee4 <get_socket>
  115da8:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115dac:	e51b300c 	ldr	r3, [fp, #-12]
  115db0:	e3530000 	cmp	r3, #0
  115db4:	0a000045 	beq	115ed0 <lwip_socket_drop_registered_memberships+0x140>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115db8:	e3a03000 	mov	r3, #0
  115dbc:	e50b3008 	str	r3, [fp, #-8]
  115dc0:	ea00003e 	b	115ec0 <lwip_socket_drop_registered_memberships+0x130>
    if (socket_ipv4_multicast_memberships[i].sock == sock) {
  115dc4:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  115dc8:	e3403014 	movt	r3, #20
  115dcc:	e51b2008 	ldr	r2, [fp, #-8]
  115dd0:	e3a0100c 	mov	r1, #12
  115dd4:	e0020291 	mul	r2, r1, r2
  115dd8:	e0833002 	add	r3, r3, r2
  115ddc:	e5933000 	ldr	r3, [r3]
  115de0:	e51b200c 	ldr	r2, [fp, #-12]
  115de4:	e1520003 	cmp	r2, r3
  115de8:	1a000031 	bne	115eb4 <lwip_socket_drop_registered_memberships+0x124>
      ip_addr_t multi_addr, if_addr;
      ip_addr_copy_from_ip4(multi_addr, socket_ipv4_multicast_memberships[i].multi_addr);
  115dec:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  115df0:	e3403014 	movt	r3, #20
  115df4:	e51b2008 	ldr	r2, [fp, #-8]
  115df8:	e3a0100c 	mov	r1, #12
  115dfc:	e0020291 	mul	r2, r1, r2
  115e00:	e0833002 	add	r3, r3, r2
  115e04:	e2833008 	add	r3, r3, #8
  115e08:	e5933000 	ldr	r3, [r3]
  115e0c:	e50b3010 	str	r3, [fp, #-16]
      ip_addr_copy_from_ip4(if_addr, socket_ipv4_multicast_memberships[i].if_addr);
  115e10:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  115e14:	e3403014 	movt	r3, #20
  115e18:	e51b2008 	ldr	r2, [fp, #-8]
  115e1c:	e3a0100c 	mov	r1, #12
  115e20:	e0020291 	mul	r2, r1, r2
  115e24:	e0833002 	add	r3, r3, r2
  115e28:	e2833004 	add	r3, r3, #4
  115e2c:	e5933000 	ldr	r3, [r3]
  115e30:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      socket_ipv4_multicast_memberships[i].sock = NULL;
  115e34:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  115e38:	e3403014 	movt	r3, #20
  115e3c:	e51b2008 	ldr	r2, [fp, #-8]
  115e40:	e3a0100c 	mov	r1, #12
  115e44:	e0020291 	mul	r2, r1, r2
  115e48:	e0833002 	add	r3, r3, r2
  115e4c:	e3a02000 	mov	r2, #0
  115e50:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  115e54:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  115e58:	e3403014 	movt	r3, #20
  115e5c:	e51b2008 	ldr	r2, [fp, #-8]
  115e60:	e3a0100c 	mov	r1, #12
  115e64:	e0020291 	mul	r2, r1, r2
  115e68:	e0833002 	add	r3, r3, r2
  115e6c:	e2833004 	add	r3, r3, #4
  115e70:	e3a02000 	mov	r2, #0
  115e74:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  115e78:	e30f35ac 	movw	r3, #62892	; 0xf5ac
  115e7c:	e3403014 	movt	r3, #20
  115e80:	e51b2008 	ldr	r2, [fp, #-8]
  115e84:	e3a0100c 	mov	r1, #12
  115e88:	e0020291 	mul	r2, r1, r2
  115e8c:	e0833002 	add	r3, r3, r2
  115e90:	e2833008 	add	r3, r3, #8
  115e94:	e3a02000 	mov	r2, #0
  115e98:	e5832000 	str	r2, [r3]

      netconn_join_leave_group(sock->conn, &multi_addr, &if_addr, NETCONN_LEAVE);
  115e9c:	e51b300c 	ldr	r3, [fp, #-12]
  115ea0:	e5930000 	ldr	r0, [r3]
  115ea4:	e24b2014 	sub	r2, fp, #20
  115ea8:	e24b1010 	sub	r1, fp, #16
  115eac:	e3a03001 	mov	r3, #1
  115eb0:	ebffd8dc 	bl	10c228 <netconn_join_leave_group>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115eb4:	e51b3008 	ldr	r3, [fp, #-8]
  115eb8:	e2833001 	add	r3, r3, #1
  115ebc:	e50b3008 	str	r3, [fp, #-8]
  115ec0:	e51b3008 	ldr	r3, [fp, #-8]
  115ec4:	e3530007 	cmp	r3, #7
  115ec8:	daffffbd 	ble	115dc4 <lwip_socket_drop_registered_memberships+0x34>
  115ecc:	ea000000 	b	115ed4 <lwip_socket_drop_registered_memberships+0x144>
    return;
  115ed0:	e320f000 	nop	{0}
    }
  }
}
  115ed4:	e24bd004 	sub	sp, fp, #4
  115ed8:	e8bd8800 	pop	{fp, pc}

00115edc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
  115edc:	e92d4800 	push	{fp, lr}
  115ee0:	e28db004 	add	fp, sp, #4
  115ee4:	e24dd010 	sub	sp, sp, #16
  115ee8:	e50b0010 	str	r0, [fp, #-16]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
  115eec:	e30d3c4c 	movw	r3, #56396	; 0xdc4c
  115ef0:	e3403014 	movt	r3, #20
  115ef4:	e5933000 	ldr	r3, [r3]
  115ef8:	e3530000 	cmp	r3, #0
  115efc:	0a000007 	beq	115f20 <tcpip_thread+0x44>
    tcpip_init_done(tcpip_init_done_arg);
  115f00:	e30d3c4c 	movw	r3, #56396	; 0xdc4c
  115f04:	e3403014 	movt	r3, #20
  115f08:	e5932000 	ldr	r2, [r3]
  115f0c:	e30d3c50 	movw	r3, #56400	; 0xdc50
  115f10:	e3403014 	movt	r3, #20
  115f14:	e5933000 	ldr	r3, [r3]
  115f18:	e1a00003 	mov	r0, r3
  115f1c:	e12fff32 	blx	r2
  }

  LOCK_TCPIP_CORE();
  115f20:	e30f060c 	movw	r0, #62988	; 0xf60c
  115f24:	e3400014 	movt	r0, #20
  115f28:	ebffd2e5 	bl	10aac4 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
  115f2c:	e30f060c 	movw	r0, #62988	; 0xf60c
  115f30:	e3400014 	movt	r0, #20
  115f34:	ebffd2ee 	bl	10aaf4 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
  115f38:	e24b3008 	sub	r3, fp, #8
  115f3c:	e1a01003 	mov	r1, r3
  115f40:	e30d0c54 	movw	r0, #56404	; 0xdc54
  115f44:	e3400014 	movt	r0, #20
  115f48:	eb004663 	bl	1278dc <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
  115f4c:	e30f060c 	movw	r0, #62988	; 0xf60c
  115f50:	e3400014 	movt	r0, #20
  115f54:	ebffd2da 	bl	10aac4 <sys_mutex_lock>
    if (msg == NULL) {
  115f58:	e51b3008 	ldr	r3, [fp, #-8]
  115f5c:	e3530000 	cmp	r3, #0
  115f60:	1a000007 	bne	115f84 <tcpip_thread+0xa8>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  115f64:	e3060f48 	movw	r0, #28488	; 0x6f48
  115f68:	e3400014 	movt	r0, #20
  115f6c:	ebffb468 	bl	103114 <rt_kprintf>
  115f70:	e3a01069 	mov	r1, #105	; 0x69
  115f74:	e3060f68 	movw	r0, #28520	; 0x6f68
  115f78:	e3400014 	movt	r0, #20
  115f7c:	ebffd44c 	bl	10b0b4 <sys_arch_assert>
      continue;
  115f80:	ea00002e 	b	116040 <tcpip_thread+0x164>
    }
    switch (msg->type) {
  115f84:	e51b3008 	ldr	r3, [fp, #-8]
  115f88:	e5933000 	ldr	r3, [r3]
  115f8c:	e3530003 	cmp	r3, #3
  115f90:	0a000010 	beq	115fd8 <tcpip_thread+0xfc>
  115f94:	e3530004 	cmp	r3, #4
  115f98:	0a000019 	beq	116004 <tcpip_thread+0x128>
  115f9c:	e3530002 	cmp	r3, #2
  115fa0:	1a00001e 	bne	116020 <tcpip_thread+0x144>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
  115fa4:	e51b3008 	ldr	r3, [fp, #-8]
  115fa8:	e593300c 	ldr	r3, [r3, #12]
  115fac:	e51b2008 	ldr	r2, [fp, #-8]
  115fb0:	e5920004 	ldr	r0, [r2, #4]
  115fb4:	e51b2008 	ldr	r2, [fp, #-8]
  115fb8:	e5922008 	ldr	r2, [r2, #8]
  115fbc:	e1a01002 	mov	r1, r2
  115fc0:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  115fc4:	e51b3008 	ldr	r3, [fp, #-8]
  115fc8:	e1a01003 	mov	r1, r3
  115fcc:	e3a0000a 	mov	r0, #10
  115fd0:	eb000c99 	bl	11923c <memp_free>
      break;
  115fd4:	ea000019 	b	116040 <tcpip_thread+0x164>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  115fd8:	e51b3008 	ldr	r3, [fp, #-8]
  115fdc:	e5933004 	ldr	r3, [r3, #4]
  115fe0:	e51b2008 	ldr	r2, [fp, #-8]
  115fe4:	e5922008 	ldr	r2, [r2, #8]
  115fe8:	e1a00002 	mov	r0, r2
  115fec:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
  115ff0:	e51b3008 	ldr	r3, [fp, #-8]
  115ff4:	e1a01003 	mov	r1, r3
  115ff8:	e3a00009 	mov	r0, #9
  115ffc:	eb000c8e 	bl	11923c <memp_free>
      break;
  116000:	ea00000e 	b	116040 <tcpip_thread+0x164>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  116004:	e51b3008 	ldr	r3, [fp, #-8]
  116008:	e5933004 	ldr	r3, [r3, #4]
  11600c:	e51b2008 	ldr	r2, [fp, #-8]
  116010:	e5922008 	ldr	r2, [r2, #8]
  116014:	e1a00002 	mov	r0, r2
  116018:	e12fff33 	blx	r3
      break;
  11601c:	ea000007 	b	116040 <tcpip_thread+0x164>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  116020:	e3060f48 	movw	r0, #28488	; 0x6f48
  116024:	e3400014 	movt	r0, #20
  116028:	ebffb439 	bl	103114 <rt_kprintf>
  11602c:	e3a0109b 	mov	r1, #155	; 0x9b
  116030:	e3060f68 	movw	r0, #28520	; 0x6f68
  116034:	e3400014 	movt	r0, #20
  116038:	ebffd41d 	bl	10b0b4 <sys_arch_assert>
      break;
  11603c:	e320f000 	nop	{0}
    UNLOCK_TCPIP_CORE();
  116040:	eaffffb9 	b	115f2c <tcpip_thread+0x50>

00116044 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
  116044:	e92d4800 	push	{fp, lr}
  116048:	e28db004 	add	fp, sp, #4
  11604c:	e24dd018 	sub	sp, sp, #24
  116050:	e50b0010 	str	r0, [fp, #-16]
  116054:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  116058:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  11605c:	e30d0c54 	movw	r0, #56404	; 0xdc54
  116060:	e3400014 	movt	r0, #20
  116064:	ebffd3c9 	bl	10af90 <sys_mbox_valid>
  116068:	e1a03000 	mov	r3, r0
  11606c:	e3530000 	cmp	r3, #0
  116070:	1a000006 	bne	116090 <tcpip_inpkt+0x4c>
  116074:	e3060f94 	movw	r0, #28564	; 0x6f94
  116078:	e3400014 	movt	r0, #20
  11607c:	ebffb424 	bl	103114 <rt_kprintf>
  116080:	e3a010b5 	mov	r1, #181	; 0xb5
  116084:	e3060f68 	movw	r0, #28520	; 0x6f68
  116088:	e3400014 	movt	r0, #20
  11608c:	ebffd408 	bl	10b0b4 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
  116090:	e3a020b7 	mov	r2, #183	; 0xb7
  116094:	e3061f68 	movw	r1, #28520	; 0x6f68
  116098:	e3401014 	movt	r1, #20
  11609c:	e3a0000a 	mov	r0, #10
  1160a0:	eb000bfd 	bl	11909c <memp_malloc_fn>
  1160a4:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  1160a8:	e51b3008 	ldr	r3, [fp, #-8]
  1160ac:	e3530000 	cmp	r3, #0
  1160b0:	1a000001 	bne	1160bc <tcpip_inpkt+0x78>
    return ERR_MEM;
  1160b4:	e3e03000 	mvn	r3, #0
  1160b8:	ea000018 	b	116120 <tcpip_inpkt+0xdc>
  }

  msg->type = TCPIP_MSG_INPKT;
  1160bc:	e51b3008 	ldr	r3, [fp, #-8]
  1160c0:	e3a02002 	mov	r2, #2
  1160c4:	e5832000 	str	r2, [r3]
  msg->msg.inp.p = p;
  1160c8:	e51b3008 	ldr	r3, [fp, #-8]
  1160cc:	e51b2010 	ldr	r2, [fp, #-16]
  1160d0:	e5832004 	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
  1160d4:	e51b3008 	ldr	r3, [fp, #-8]
  1160d8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1160dc:	e5832008 	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
  1160e0:	e51b3008 	ldr	r3, [fp, #-8]
  1160e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1160e8:	e583200c 	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  1160ec:	e51b1008 	ldr	r1, [fp, #-8]
  1160f0:	e30d0c54 	movw	r0, #56404	; 0xdc54
  1160f4:	e3400014 	movt	r0, #20
  1160f8:	ebffd346 	bl	10ae18 <sys_mbox_trypost>
  1160fc:	e1a03000 	mov	r3, r0
  116100:	e3530000 	cmp	r3, #0
  116104:	0a000004 	beq	11611c <tcpip_inpkt+0xd8>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  116108:	e51b1008 	ldr	r1, [fp, #-8]
  11610c:	e3a0000a 	mov	r0, #10
  116110:	eb000c49 	bl	11923c <memp_free>
    return ERR_MEM;
  116114:	e3e03000 	mvn	r3, #0
  116118:	ea000000 	b	116120 <tcpip_inpkt+0xdc>
  }
  return ERR_OK;
  11611c:	e3a03000 	mov	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
  116120:	e1a00003 	mov	r0, r3
  116124:	e24bd004 	sub	sp, fp, #4
  116128:	e8bd8800 	pop	{fp, pc}

0011612c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
  11612c:	e92d4800 	push	{fp, lr}
  116130:	e28db004 	add	fp, sp, #4
  116134:	e24dd008 	sub	sp, sp, #8
  116138:	e50b0008 	str	r0, [fp, #-8]
  11613c:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  116140:	e51b300c 	ldr	r3, [fp, #-12]
  116144:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  116148:	e2033018 	and	r3, r3, #24
  11614c:	e3530000 	cmp	r3, #0
  116150:	0a000006 	beq	116170 <tcpip_input+0x44>
    return tcpip_inpkt(p, inp, ethernet_input);
  116154:	e3082bc8 	movw	r2, #35784	; 0x8bc8
  116158:	e3402012 	movt	r2, #18
  11615c:	e51b100c 	ldr	r1, [fp, #-12]
  116160:	e51b0008 	ldr	r0, [fp, #-8]
  116164:	ebffffb6 	bl	116044 <tcpip_inpkt>
  116168:	e1a03000 	mov	r3, r0
  11616c:	ea000005 	b	116188 <tcpip_input+0x5c>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
  116170:	e30123f8 	movw	r2, #5112	; 0x13f8
  116174:	e3402013 	movt	r2, #19
  116178:	e51b100c 	ldr	r1, [fp, #-12]
  11617c:	e51b0008 	ldr	r0, [fp, #-8]
  116180:	ebffffaf 	bl	116044 <tcpip_inpkt>
  116184:	e1a03000 	mov	r3, r0
}
  116188:	e1a00003 	mov	r0, r3
  11618c:	e24bd004 	sub	sp, fp, #4
  116190:	e8bd8800 	pop	{fp, pc}

00116194 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
  116194:	e92d4800 	push	{fp, lr}
  116198:	e28db004 	add	fp, sp, #4
  11619c:	e24dd018 	sub	sp, sp, #24
  1161a0:	e50b0010 	str	r0, [fp, #-16]
  1161a4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1161a8:	e1a03002 	mov	r3, r2
  1161ac:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  1161b0:	e30d0c54 	movw	r0, #56404	; 0xdc54
  1161b4:	e3400014 	movt	r0, #20
  1161b8:	ebffd374 	bl	10af90 <sys_mbox_valid>
  1161bc:	e1a03000 	mov	r3, r0
  1161c0:	e3530000 	cmp	r3, #0
  1161c4:	1a000006 	bne	1161e4 <tcpip_callback_with_block+0x50>
  1161c8:	e3060f94 	movw	r0, #28564	; 0x6f94
  1161cc:	e3400014 	movt	r0, #20
  1161d0:	ebffb3cf 	bl	103114 <rt_kprintf>
  1161d4:	e3a010ee 	mov	r1, #238	; 0xee
  1161d8:	e3060f68 	movw	r0, #28520	; 0x6f68
  1161dc:	e3400014 	movt	r0, #20
  1161e0:	ebffd3b3 	bl	10b0b4 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  1161e4:	e3a020f0 	mov	r2, #240	; 0xf0
  1161e8:	e3061f68 	movw	r1, #28520	; 0x6f68
  1161ec:	e3401014 	movt	r1, #20
  1161f0:	e3a00009 	mov	r0, #9
  1161f4:	eb000ba8 	bl	11909c <memp_malloc_fn>
  1161f8:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  1161fc:	e51b3008 	ldr	r3, [fp, #-8]
  116200:	e3530000 	cmp	r3, #0
  116204:	1a000001 	bne	116210 <tcpip_callback_with_block+0x7c>
    return ERR_MEM;
  116208:	e3e03000 	mvn	r3, #0
  11620c:	ea00001d 	b	116288 <tcpip_callback_with_block+0xf4>
  }

  msg->type = TCPIP_MSG_CALLBACK;
  116210:	e51b3008 	ldr	r3, [fp, #-8]
  116214:	e3a02003 	mov	r2, #3
  116218:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  11621c:	e51b3008 	ldr	r3, [fp, #-8]
  116220:	e51b2010 	ldr	r2, [fp, #-16]
  116224:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  116228:	e51b3008 	ldr	r3, [fp, #-8]
  11622c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  116230:	e5832008 	str	r2, [r3, #8]
  if (block) {
  116234:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  116238:	e3530000 	cmp	r3, #0
  11623c:	0a000004 	beq	116254 <tcpip_callback_with_block+0xc0>
    sys_mbox_post(&mbox, msg);
  116240:	e51b1008 	ldr	r1, [fp, #-8]
  116244:	e30d0c54 	movw	r0, #56404	; 0xdc54
  116248:	e3400014 	movt	r0, #20
  11624c:	ebffd2e6 	bl	10adec <sys_mbox_post>
  116250:	ea00000b 	b	116284 <tcpip_callback_with_block+0xf0>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  116254:	e51b1008 	ldr	r1, [fp, #-8]
  116258:	e30d0c54 	movw	r0, #56404	; 0xdc54
  11625c:	e3400014 	movt	r0, #20
  116260:	ebffd2ec 	bl	10ae18 <sys_mbox_trypost>
  116264:	e1a03000 	mov	r3, r0
  116268:	e3530000 	cmp	r3, #0
  11626c:	0a000004 	beq	116284 <tcpip_callback_with_block+0xf0>
      memp_free(MEMP_TCPIP_MSG_API, msg);
  116270:	e51b1008 	ldr	r1, [fp, #-8]
  116274:	e3a00009 	mov	r0, #9
  116278:	eb000bef 	bl	11923c <memp_free>
      return ERR_MEM;
  11627c:	e3e03000 	mvn	r3, #0
  116280:	ea000000 	b	116288 <tcpip_callback_with_block+0xf4>
    }
  }
  return ERR_OK;
  116284:	e3a03000 	mov	r3, #0
}
  116288:	e1a00003 	mov	r0, r3
  11628c:	e24bd004 	sub	sp, fp, #4
  116290:	e8bd8800 	pop	{fp, pc}

00116294 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
  116294:	e92d4800 	push	{fp, lr}
  116298:	e28db004 	add	fp, sp, #4
  11629c:	e24dd010 	sub	sp, sp, #16
  1162a0:	e50b0008 	str	r0, [fp, #-8]
  1162a4:	e50b100c 	str	r1, [fp, #-12]
  1162a8:	e50b2010 	str	r2, [fp, #-16]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
  1162ac:	e30f060c 	movw	r0, #62988	; 0xf60c
  1162b0:	e3400014 	movt	r0, #20
  1162b4:	ebffd202 	bl	10aac4 <sys_mutex_lock>
  fn(apimsg);
  1162b8:	e51b3008 	ldr	r3, [fp, #-8]
  1162bc:	e51b000c 	ldr	r0, [fp, #-12]
  1162c0:	e12fff33 	blx	r3
  UNLOCK_TCPIP_CORE();
  1162c4:	e30f060c 	movw	r0, #62988	; 0xf60c
  1162c8:	e3400014 	movt	r0, #20
  1162cc:	ebffd208 	bl	10aaf4 <sys_mutex_unlock>
  return ERR_OK;
  1162d0:	e3a03000 	mov	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  1162d4:	e1a00003 	mov	r0, r3
  1162d8:	e24bd004 	sub	sp, fp, #4
  1162dc:	e8bd8800 	pop	{fp, pc}

001162e0 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
  1162e0:	e92d4800 	push	{fp, lr}
  1162e4:	e28db004 	add	fp, sp, #4
  1162e8:	e24dd010 	sub	sp, sp, #16
  1162ec:	e50b0010 	str	r0, [fp, #-16]
  1162f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
  1162f4:	e30f060c 	movw	r0, #62988	; 0xf60c
  1162f8:	e3400014 	movt	r0, #20
  1162fc:	ebffd1f0 	bl	10aac4 <sys_mutex_lock>
  err = fn(call);
  116300:	e51b3010 	ldr	r3, [fp, #-16]
  116304:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  116308:	e12fff33 	blx	r3
  11630c:	e1a03000 	mov	r3, r0
  116310:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  116314:	e30f060c 	movw	r0, #62988	; 0xf60c
  116318:	e3400014 	movt	r0, #20
  11631c:	ebffd1f4 	bl	10aaf4 <sys_mutex_unlock>
  return err;
  116320:	e15b30d5 	ldrsb	r3, [fp, #-5]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  116324:	e1a00003 	mov	r0, r3
  116328:	e24bd004 	sub	sp, fp, #4
  11632c:	e8bd8800 	pop	{fp, pc}

00116330 <tcpip_callbackmsg_new>:
 * @param ctx parameter passed to function
 * @return a struct pointer to pass to tcpip_trycallback().
 */
struct tcpip_callback_msg*
tcpip_callbackmsg_new(tcpip_callback_fn function, void *ctx)
{
  116330:	e92d4800 	push	{fp, lr}
  116334:	e28db004 	add	fp, sp, #4
  116338:	e24dd010 	sub	sp, sp, #16
  11633c:	e50b0010 	str	r0, [fp, #-16]
  116340:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcpip_msg *msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  116344:	e30021a1 	movw	r2, #417	; 0x1a1
  116348:	e3061f68 	movw	r1, #28520	; 0x6f68
  11634c:	e3401014 	movt	r1, #20
  116350:	e3a00009 	mov	r0, #9
  116354:	eb000b50 	bl	11909c <memp_malloc_fn>
  116358:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  11635c:	e51b3008 	ldr	r3, [fp, #-8]
  116360:	e3530000 	cmp	r3, #0
  116364:	1a000001 	bne	116370 <tcpip_callbackmsg_new+0x40>
    return NULL;
  116368:	e3a03000 	mov	r3, #0
  11636c:	ea000009 	b	116398 <tcpip_callbackmsg_new+0x68>
  }
  msg->type = TCPIP_MSG_CALLBACK_STATIC;
  116370:	e51b3008 	ldr	r3, [fp, #-8]
  116374:	e3a02004 	mov	r2, #4
  116378:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  11637c:	e51b3008 	ldr	r3, [fp, #-8]
  116380:	e51b2010 	ldr	r2, [fp, #-16]
  116384:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  116388:	e51b3008 	ldr	r3, [fp, #-8]
  11638c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  116390:	e5832008 	str	r2, [r3, #8]
  return (struct tcpip_callback_msg*)msg;
  116394:	e51b3008 	ldr	r3, [fp, #-8]
}
  116398:	e1a00003 	mov	r0, r3
  11639c:	e24bd004 	sub	sp, fp, #4
  1163a0:	e8bd8800 	pop	{fp, pc}

001163a4 <tcpip_callbackmsg_delete>:
 *
 * @param msg the message to free
 */
void
tcpip_callbackmsg_delete(struct tcpip_callback_msg* msg)
{
  1163a4:	e92d4800 	push	{fp, lr}
  1163a8:	e28db004 	add	fp, sp, #4
  1163ac:	e24dd008 	sub	sp, sp, #8
  1163b0:	e50b0008 	str	r0, [fp, #-8]
  memp_free(MEMP_TCPIP_MSG_API, msg);
  1163b4:	e51b1008 	ldr	r1, [fp, #-8]
  1163b8:	e3a00009 	mov	r0, #9
  1163bc:	eb000b9e 	bl	11923c <memp_free>
}
  1163c0:	e320f000 	nop	{0}
  1163c4:	e24bd004 	sub	sp, fp, #4
  1163c8:	e8bd8800 	pop	{fp, pc}

001163cc <tcpip_trycallback>:
 * @param msg pointer to the message to post
 * @return sys_mbox_trypost() return code
 */
err_t
tcpip_trycallback(struct tcpip_callback_msg* msg)
{
  1163cc:	e92d4800 	push	{fp, lr}
  1163d0:	e28db004 	add	fp, sp, #4
  1163d4:	e24dd008 	sub	sp, sp, #8
  1163d8:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  1163dc:	e30d0c54 	movw	r0, #56404	; 0xdc54
  1163e0:	e3400014 	movt	r0, #20
  1163e4:	ebffd2e9 	bl	10af90 <sys_mbox_valid>
  1163e8:	e1a03000 	mov	r3, r0
  1163ec:	e3530000 	cmp	r3, #0
  1163f0:	1a000006 	bne	116410 <tcpip_trycallback+0x44>
  1163f4:	e3060f94 	movw	r0, #28564	; 0x6f94
  1163f8:	e3400014 	movt	r0, #20
  1163fc:	ebffb344 	bl	103114 <rt_kprintf>
  116400:	e3a01d07 	mov	r1, #448	; 0x1c0
  116404:	e3060f68 	movw	r0, #28520	; 0x6f68
  116408:	e3400014 	movt	r0, #20
  11640c:	ebffd328 	bl	10b0b4 <sys_arch_assert>
  return sys_mbox_trypost(&mbox, msg);
  116410:	e51b1008 	ldr	r1, [fp, #-8]
  116414:	e30d0c54 	movw	r0, #56404	; 0xdc54
  116418:	e3400014 	movt	r0, #20
  11641c:	ebffd27d 	bl	10ae18 <sys_mbox_trypost>
  116420:	e1a03000 	mov	r3, r0
}
  116424:	e1a00003 	mov	r0, r3
  116428:	e24bd004 	sub	sp, fp, #4
  11642c:	e8bd8800 	pop	{fp, pc}

00116430 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
  116430:	e92d4800 	push	{fp, lr}
  116434:	e28db004 	add	fp, sp, #4
  116438:	e24dd010 	sub	sp, sp, #16
  11643c:	e50b0008 	str	r0, [fp, #-8]
  116440:	e50b100c 	str	r1, [fp, #-12]
  lwip_init();
  116444:	eb0009b8 	bl	118b2c <lwip_init>

  tcpip_init_done = initfunc;
  116448:	e30d3c4c 	movw	r3, #56396	; 0xdc4c
  11644c:	e3403014 	movt	r3, #20
  116450:	e51b2008 	ldr	r2, [fp, #-8]
  116454:	e5832000 	str	r2, [r3]
  tcpip_init_done_arg = arg;
  116458:	e30d3c50 	movw	r3, #56400	; 0xdc50
  11645c:	e3403014 	movt	r3, #20
  116460:	e51b200c 	ldr	r2, [fp, #-12]
  116464:	e5832000 	str	r2, [r3]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
  116468:	e3001101 	movw	r1, #257	; 0x101
  11646c:	e30d0c54 	movw	r0, #56404	; 0xdc54
  116470:	e3400014 	movt	r0, #20
  116474:	ebffd1c9 	bl	10aba0 <sys_mbox_new>
  116478:	e1a03000 	mov	r3, r0
  11647c:	e3530000 	cmp	r3, #0
  116480:	0a000006 	beq	1164a0 <tcpip_init+0x70>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  116484:	e3060fa4 	movw	r0, #28580	; 0x6fa4
  116488:	e3400014 	movt	r0, #20
  11648c:	ebffb320 	bl	103114 <rt_kprintf>
  116490:	e30011d5 	movw	r1, #469	; 0x1d5
  116494:	e3060f68 	movw	r0, #28520	; 0x6f68
  116498:	e3400014 	movt	r0, #20
  11649c:	ebffd304 	bl	10b0b4 <sys_arch_assert>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
  1164a0:	e30f060c 	movw	r0, #62988	; 0xf60c
  1164a4:	e3400014 	movt	r0, #20
  1164a8:	ebffd15d 	bl	10aa24 <sys_mutex_new>
  1164ac:	e1a03000 	mov	r3, r0
  1164b0:	e3530000 	cmp	r3, #0
  1164b4:	0a000006 	beq	1164d4 <tcpip_init+0xa4>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  1164b8:	e3060fc8 	movw	r0, #28616	; 0x6fc8
  1164bc:	e3400014 	movt	r0, #20
  1164c0:	ebffb313 	bl	103114 <rt_kprintf>
  1164c4:	e30011d9 	movw	r1, #473	; 0x1d9
  1164c8:	e3060f68 	movw	r0, #28520	; 0x6f68
  1164cc:	e3400014 	movt	r0, #20
  1164d0:	ebffd2f7 	bl	10b0b4 <sys_arch_assert>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
  1164d4:	e3a03017 	mov	r3, #23
  1164d8:	e58d3000 	str	r3, [sp]
  1164dc:	e3a03a02 	mov	r3, #8192	; 0x2000
  1164e0:	e3a02000 	mov	r2, #0
  1164e4:	e3051edc 	movw	r1, #24284	; 0x5edc
  1164e8:	e3401011 	movt	r1, #17
  1164ec:	e3060fec 	movw	r0, #28652	; 0x6fec
  1164f0:	e3400014 	movt	r0, #20
  1164f4:	ebffd2ba 	bl	10afe4 <sys_thread_new>
}
  1164f8:	e320f000 	nop	{0}
  1164fc:	e24bd004 	sub	sp, fp, #4
  116500:	e8bd8800 	pop	{fp, pc}

00116504 <pbuf_free_int>:
 *
 * @param p The pbuf (chain) to be dereferenced.
 */
static void
pbuf_free_int(void *p)
{
  116504:	e92d4800 	push	{fp, lr}
  116508:	e28db004 	add	fp, sp, #4
  11650c:	e24dd010 	sub	sp, sp, #16
  116510:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q = (struct pbuf *)p;
  116514:	e51b3010 	ldr	r3, [fp, #-16]
  116518:	e50b3008 	str	r3, [fp, #-8]
  pbuf_free(q);
  11651c:	e51b0008 	ldr	r0, [fp, #-8]
  116520:	eb001253 	bl	11ae74 <pbuf_free>
}
  116524:	e320f000 	nop	{0}
  116528:	e24bd004 	sub	sp, fp, #4
  11652c:	e8bd8800 	pop	{fp, pc}

00116530 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
  116530:	e92d4800 	push	{fp, lr}
  116534:	e28db004 	add	fp, sp, #4
  116538:	e24dd008 	sub	sp, sp, #8
  11653c:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(pbuf_free_int, p, 0);
  116540:	e3a02000 	mov	r2, #0
  116544:	e51b1008 	ldr	r1, [fp, #-8]
  116548:	e3060504 	movw	r0, #25860	; 0x6504
  11654c:	e3400011 	movt	r0, #17
  116550:	ebffff0f 	bl	116194 <tcpip_callback_with_block>
  116554:	e1a03000 	mov	r3, r0
}
  116558:	e1a00003 	mov	r0, r3
  11655c:	e24bd004 	sub	sp, fp, #4
  116560:	e8bd8800 	pop	{fp, pc}

00116564 <mem_free_callback>:
 * @param m the heap memory to free
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
mem_free_callback(void *m)
{
  116564:	e92d4800 	push	{fp, lr}
  116568:	e28db004 	add	fp, sp, #4
  11656c:	e24dd008 	sub	sp, sp, #8
  116570:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(mem_free, m, 0);
  116574:	e3a02000 	mov	r2, #0
  116578:	e51b1008 	ldr	r1, [fp, #-8]
  11657c:	e30b01e8 	movw	r0, #45544	; 0xb1e8
  116580:	e3400010 	movt	r0, #16
  116584:	ebffff02 	bl	116194 <tcpip_callback_with_block>
  116588:	e1a03000 	mov	r3, r0
}
  11658c:	e1a00003 	mov	r0, r3
  116590:	e24bd004 	sub	sp, fp, #4
  116594:	e8bd8800 	pop	{fp, pc}

00116598 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  116598:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11659c:	e28db000 	add	fp, sp, #0
  1165a0:	e24dd00c 	sub	sp, sp, #12
  1165a4:	e1a03000 	mov	r3, r0
  1165a8:	e14b30b6 	strh	r3, [fp, #-6]
  return (u16_t)PP_HTONS(n);
  1165ac:	e15b30b6 	ldrh	r3, [fp, #-6]
  1165b0:	e6bf3fb3 	rev16	r3, r3
  1165b4:	e6ff3073 	uxth	r3, r3
}
  1165b8:	e1a00003 	mov	r0, r3
  1165bc:	e28bd000 	add	sp, fp, #0
  1165c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1165c4:	e12fff1e 	bx	lr

001165c8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  1165c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1165cc:	e28db000 	add	fp, sp, #0
  1165d0:	e24dd00c 	sub	sp, sp, #12
  1165d4:	e50b0008 	str	r0, [fp, #-8]
  return (u32_t)PP_HTONL(n);
  1165d8:	e51b3008 	ldr	r3, [fp, #-8]
  1165dc:	e1a02c03 	lsl	r2, r3, #24
  1165e0:	e51b3008 	ldr	r3, [fp, #-8]
  1165e4:	e1a03403 	lsl	r3, r3, #8
  1165e8:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  1165ec:	e1822003 	orr	r2, r2, r3
  1165f0:	e51b3008 	ldr	r3, [fp, #-8]
  1165f4:	e1a03423 	lsr	r3, r3, #8
  1165f8:	e2033cff 	and	r3, r3, #65280	; 0xff00
  1165fc:	e1822003 	orr	r2, r2, r3
  116600:	e51b3008 	ldr	r3, [fp, #-8]
  116604:	e1a03c23 	lsr	r3, r3, #24
  116608:	e1823003 	orr	r3, r2, r3
}
  11660c:	e1a00003 	mov	r0, r3
  116610:	e28bd000 	add	sp, fp, #0
  116614:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116618:	e12fff1e 	bx	lr

0011661c <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
  11661c:	e92d4800 	push	{fp, lr}
  116620:	e28db004 	add	fp, sp, #4
  116624:	e24dd018 	sub	sp, sp, #24
  116628:	e50b0010 	str	r0, [fp, #-16]
  11662c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  116630:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  const char* p;
  size_t tokenlen = strlen(token);
  116634:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  116638:	eb00ab90 	bl	141480 <strlen>
  11663c:	e50b000c 	str	r0, [fp, #-12]
  if (tokenlen == 0) {
  116640:	e51b300c 	ldr	r3, [fp, #-12]
  116644:	e3530000 	cmp	r3, #0
  116648:	1a000001 	bne	116654 <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  11664c:	e51b3010 	ldr	r3, [fp, #-16]
  116650:	ea000021 	b	1166dc <lwip_strnstr+0xc0>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  116654:	e51b3010 	ldr	r3, [fp, #-16]
  116658:	e50b3008 	str	r3, [fp, #-8]
  11665c:	ea000011 	b	1166a8 <lwip_strnstr+0x8c>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
  116660:	e51b3008 	ldr	r3, [fp, #-8]
  116664:	e5d32000 	ldrb	r2, [r3]
  116668:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11666c:	e5d33000 	ldrb	r3, [r3]
  116670:	e1520003 	cmp	r2, r3
  116674:	1a000008 	bne	11669c <lwip_strnstr+0x80>
  116678:	e51b200c 	ldr	r2, [fp, #-12]
  11667c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  116680:	e51b0008 	ldr	r0, [fp, #-8]
  116684:	eb00aba9 	bl	141530 <strncmp>
  116688:	e1a03000 	mov	r3, r0
  11668c:	e3530000 	cmp	r3, #0
  116690:	1a000001 	bne	11669c <lwip_strnstr+0x80>
      return LWIP_CONST_CAST(char *, p);
  116694:	e51b3008 	ldr	r3, [fp, #-8]
  116698:	ea00000f 	b	1166dc <lwip_strnstr+0xc0>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  11669c:	e51b3008 	ldr	r3, [fp, #-8]
  1166a0:	e2833001 	add	r3, r3, #1
  1166a4:	e50b3008 	str	r3, [fp, #-8]
  1166a8:	e51b3008 	ldr	r3, [fp, #-8]
  1166ac:	e5d33000 	ldrb	r3, [r3]
  1166b0:	e3530000 	cmp	r3, #0
  1166b4:	0a000007 	beq	1166d8 <lwip_strnstr+0xbc>
  1166b8:	e51b2008 	ldr	r2, [fp, #-8]
  1166bc:	e51b300c 	ldr	r3, [fp, #-12]
  1166c0:	e0822003 	add	r2, r2, r3
  1166c4:	e51b1010 	ldr	r1, [fp, #-16]
  1166c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1166cc:	e0813003 	add	r3, r1, r3
  1166d0:	e1520003 	cmp	r2, r3
  1166d4:	9affffe1 	bls	116660 <lwip_strnstr+0x44>
    }
  }
  return NULL;
  1166d8:	e3a03000 	mov	r3, #0
}
  1166dc:	e1a00003 	mov	r0, r3
  1166e0:	e24bd004 	sub	sp, fp, #4
  1166e4:	e8bd8800 	pop	{fp, pc}

001166e8 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
  1166e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1166ec:	e28db000 	add	fp, sp, #0
  1166f0:	e24dd014 	sub	sp, sp, #20
  1166f4:	e50b0010 	str	r0, [fp, #-16]
  1166f8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  char c1, c2;

  do {
    c1 = *str1++;
  1166fc:	e51b3010 	ldr	r3, [fp, #-16]
  116700:	e2832001 	add	r2, r3, #1
  116704:	e50b2010 	str	r2, [fp, #-16]
  116708:	e5d33000 	ldrb	r3, [r3]
  11670c:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  116710:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116714:	e2832001 	add	r2, r3, #1
  116718:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  11671c:	e5d33000 	ldrb	r3, [r3]
  116720:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  116724:	e55b2005 	ldrb	r2, [fp, #-5]
  116728:	e55b3006 	ldrb	r3, [fp, #-6]
  11672c:	e1520003 	cmp	r2, r3
  116730:	0a000014 	beq	116788 <lwip_stricmp+0xa0>
      char c1_upc = c1 | 0x20;
  116734:	e55b3005 	ldrb	r3, [fp, #-5]
  116738:	e3833020 	orr	r3, r3, #32
  11673c:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116740:	e55b3007 	ldrb	r3, [fp, #-7]
  116744:	e3530060 	cmp	r3, #96	; 0x60
  116748:	9a00000b 	bls	11677c <lwip_stricmp+0x94>
  11674c:	e55b3007 	ldrb	r3, [fp, #-7]
  116750:	e353007a 	cmp	r3, #122	; 0x7a
  116754:	8a000008 	bhi	11677c <lwip_stricmp+0x94>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  116758:	e55b3006 	ldrb	r3, [fp, #-6]
  11675c:	e3833020 	orr	r3, r3, #32
  116760:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  116764:	e55b2007 	ldrb	r2, [fp, #-7]
  116768:	e55b3008 	ldrb	r3, [fp, #-8]
  11676c:	e1520003 	cmp	r2, r3
  116770:	0a000003 	beq	116784 <lwip_stricmp+0x9c>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  116774:	e3a03001 	mov	r3, #1
  116778:	ea000006 	b	116798 <lwip_stricmp+0xb0>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  11677c:	e3a03001 	mov	r3, #1
  116780:	ea000004 	b	116798 <lwip_stricmp+0xb0>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116784:	e320f000 	nop	{0}
      }
    }
  } while (c1 != 0);
  116788:	e55b3005 	ldrb	r3, [fp, #-5]
  11678c:	e3530000 	cmp	r3, #0
  116790:	1affffd9 	bne	1166fc <lwip_stricmp+0x14>
  return 0;
  116794:	e3a03000 	mov	r3, #0
}
  116798:	e1a00003 	mov	r0, r3
  11679c:	e28bd000 	add	sp, fp, #0
  1167a0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1167a4:	e12fff1e 	bx	lr

001167a8 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char* str1, const char* str2, size_t len)
{
  1167a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1167ac:	e28db000 	add	fp, sp, #0
  1167b0:	e24dd01c 	sub	sp, sp, #28
  1167b4:	e50b0010 	str	r0, [fp, #-16]
  1167b8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1167bc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  char c1, c2;

  do {
    c1 = *str1++;
  1167c0:	e51b3010 	ldr	r3, [fp, #-16]
  1167c4:	e2832001 	add	r2, r3, #1
  1167c8:	e50b2010 	str	r2, [fp, #-16]
  1167cc:	e5d33000 	ldrb	r3, [r3]
  1167d0:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  1167d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1167d8:	e2832001 	add	r2, r3, #1
  1167dc:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  1167e0:	e5d33000 	ldrb	r3, [r3]
  1167e4:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  1167e8:	e55b2005 	ldrb	r2, [fp, #-5]
  1167ec:	e55b3006 	ldrb	r3, [fp, #-6]
  1167f0:	e1520003 	cmp	r2, r3
  1167f4:	0a000014 	beq	11684c <lwip_strnicmp+0xa4>
      char c1_upc = c1 | 0x20;
  1167f8:	e55b3005 	ldrb	r3, [fp, #-5]
  1167fc:	e3833020 	orr	r3, r3, #32
  116800:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116804:	e55b3007 	ldrb	r3, [fp, #-7]
  116808:	e3530060 	cmp	r3, #96	; 0x60
  11680c:	9a00000b 	bls	116840 <lwip_strnicmp+0x98>
  116810:	e55b3007 	ldrb	r3, [fp, #-7]
  116814:	e353007a 	cmp	r3, #122	; 0x7a
  116818:	8a000008 	bhi	116840 <lwip_strnicmp+0x98>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  11681c:	e55b3006 	ldrb	r3, [fp, #-6]
  116820:	e3833020 	orr	r3, r3, #32
  116824:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  116828:	e55b2007 	ldrb	r2, [fp, #-7]
  11682c:	e55b3008 	ldrb	r3, [fp, #-8]
  116830:	e1520003 	cmp	r2, r3
  116834:	0a000003 	beq	116848 <lwip_strnicmp+0xa0>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  116838:	e3a03001 	mov	r3, #1
  11683c:	ea00000b 	b	116870 <lwip_strnicmp+0xc8>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  116840:	e3a03001 	mov	r3, #1
  116844:	ea000009 	b	116870 <lwip_strnicmp+0xc8>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116848:	e320f000 	nop	{0}
      }
    }
  } while (len-- && c1 != 0);
  11684c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116850:	e2432001 	sub	r2, r3, #1
  116854:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  116858:	e3530000 	cmp	r3, #0
  11685c:	0a000002 	beq	11686c <lwip_strnicmp+0xc4>
  116860:	e55b3005 	ldrb	r3, [fp, #-5]
  116864:	e3530000 	cmp	r3, #0
  116868:	1affffd4 	bne	1167c0 <lwip_strnicmp+0x18>
  return 0;
  11686c:	e3a03000 	mov	r3, #0
}
  116870:	e1a00003 	mov	r0, r3
  116874:	e28bd000 	add	sp, fp, #0
  116878:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11687c:	e12fff1e 	bx	lr

00116880 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char* result, size_t bufsize, int number)
{
  116880:	e92d4800 	push	{fp, lr}
  116884:	e28db004 	add	fp, sp, #4
  116888:	e24dd028 	sub	sp, sp, #40	; 0x28
  11688c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  116890:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  116894:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  const int base = 10;
  116898:	e3a0300a 	mov	r3, #10
  11689c:	e50b3010 	str	r3, [fp, #-16]
  char* ptr = result, *ptr1 = result, tmp_char;
  1168a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1168a4:	e50b3008 	str	r3, [fp, #-8]
  1168a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1168ac:	e50b300c 	str	r3, [fp, #-12]
  int tmp_value;
  LWIP_UNUSED_ARG(bufsize);

  do {
    tmp_value = number;
  1168b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1168b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    number /= base;
  1168b8:	e51b1010 	ldr	r1, [fp, #-16]
  1168bc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1168c0:	eb008860 	bl	138a48 <__divsi3>
  1168c4:	e1a03000 	mov	r3, r0
  1168c8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
  1168cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1168d0:	e51b2010 	ldr	r2, [fp, #-16]
  1168d4:	e0030392 	mul	r3, r2, r3
  1168d8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1168dc:	e0423003 	sub	r3, r2, r3
  1168e0:	e2831023 	add	r1, r3, #35	; 0x23
  1168e4:	e51b2008 	ldr	r2, [fp, #-8]
  1168e8:	e2823001 	add	r3, r2, #1
  1168ec:	e50b3008 	str	r3, [fp, #-8]
  1168f0:	e3063ff4 	movw	r3, #28660	; 0x6ff4
  1168f4:	e3403014 	movt	r3, #20
  1168f8:	e7d33001 	ldrb	r3, [r3, r1]
  1168fc:	e5c23000 	strb	r3, [r2]
  } while(number);
  116900:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  116904:	e3530000 	cmp	r3, #0
  116908:	1affffe8 	bne	1168b0 <lwip_itoa+0x30>

   /* Apply negative sign */
  if (tmp_value < 0) {
  11690c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116910:	e3530000 	cmp	r3, #0
  116914:	aa000004 	bge	11692c <lwip_itoa+0xac>
     *ptr++ = '-';
  116918:	e51b3008 	ldr	r3, [fp, #-8]
  11691c:	e2832001 	add	r2, r3, #1
  116920:	e50b2008 	str	r2, [fp, #-8]
  116924:	e3a0202d 	mov	r2, #45	; 0x2d
  116928:	e5c32000 	strb	r2, [r3]
  }
  *ptr-- = '\0';
  11692c:	e51b3008 	ldr	r3, [fp, #-8]
  116930:	e2432001 	sub	r2, r3, #1
  116934:	e50b2008 	str	r2, [fp, #-8]
  116938:	e3a02000 	mov	r2, #0
  11693c:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  116940:	ea00000d 	b	11697c <lwip_itoa+0xfc>
    tmp_char = *ptr;
  116944:	e51b3008 	ldr	r3, [fp, #-8]
  116948:	e5d33000 	ldrb	r3, [r3]
  11694c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    *ptr--= *ptr1;
  116950:	e51b3008 	ldr	r3, [fp, #-8]
  116954:	e2432001 	sub	r2, r3, #1
  116958:	e50b2008 	str	r2, [fp, #-8]
  11695c:	e51b200c 	ldr	r2, [fp, #-12]
  116960:	e5d22000 	ldrb	r2, [r2]
  116964:	e5c32000 	strb	r2, [r3]
    *ptr1++ = tmp_char;
  116968:	e51b300c 	ldr	r3, [fp, #-12]
  11696c:	e2832001 	add	r2, r3, #1
  116970:	e50b200c 	str	r2, [fp, #-12]
  116974:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  116978:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  11697c:	e51b200c 	ldr	r2, [fp, #-12]
  116980:	e51b3008 	ldr	r3, [fp, #-8]
  116984:	e1520003 	cmp	r2, r3
  116988:	3affffed 	bcc	116944 <lwip_itoa+0xc4>
  }
}
  11698c:	e320f000 	nop	{0}
  116990:	e24bd004 	sub	sp, fp, #4
  116994:	e8bd8800 	pop	{fp, pc}

00116998 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
  116998:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11699c:	e28db000 	add	fp, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
  1169a0:	e320f000 	nop	{0}
  1169a4:	e28bd000 	add	sp, fp, #0
  1169a8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1169ac:	e12fff1e 	bx	lr

001169b0 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
  1169b0:	e92d4800 	push	{fp, lr}
  1169b4:	e28db004 	add	fp, sp, #4
  1169b8:	e24dd008 	sub	sp, sp, #8
  1169bc:	e1a03000 	mov	r3, r0
  1169c0:	e50b100c 	str	r1, [fp, #-12]
  1169c4:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  1169c8:	e55b3005 	ldrb	r3, [fp, #-5]
  1169cc:	e3530001 	cmp	r3, #1
  1169d0:	8a00001f 	bhi	116a54 <dns_setserver+0xa4>
    if (dnsserver != NULL) {
  1169d4:	e51b300c 	ldr	r3, [fp, #-12]
  1169d8:	e3530000 	cmp	r3, #0
  1169dc:	0a000015 	beq	116a38 <dns_setserver+0x88>
      dns_servers[numdns] = (*dnsserver);
  1169e0:	e55b2005 	ldrb	r2, [fp, #-5]
  1169e4:	e30e30dc 	movw	r3, #57564	; 0xe0dc
  1169e8:	e3403014 	movt	r3, #20
  1169ec:	e51b100c 	ldr	r1, [fp, #-12]
  1169f0:	e5911000 	ldr	r1, [r1]
  1169f4:	e7831102 	str	r1, [r3, r2, lsl #2]
      extern struct netif *netif_default;
      extern struct netdev *netdev_get_by_name(const char *name);
      extern void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server);

      /* set network interface device DNS server address */
      if (netif_default) {
  1169f8:	e30c3a40 	movw	r3, #51776	; 0xca40
  1169fc:	e3403015 	movt	r3, #21
  116a00:	e5933000 	ldr	r3, [r3]
  116a04:	e3530000 	cmp	r3, #0
  116a08:	0a000011 	beq	116a54 <dns_setserver+0xa4>
        netdev_low_level_set_dns_server(netdev_get_by_name(netif_default->name), numdns, dnsserver);
  116a0c:	e30c3a40 	movw	r3, #51776	; 0xca40
  116a10:	e3403015 	movt	r3, #21
  116a14:	e5933000 	ldr	r3, [r3]
  116a18:	e2833042 	add	r3, r3, #66	; 0x42
  116a1c:	e1a00003 	mov	r0, r3
  116a20:	ebffbab3 	bl	1054f4 <netdev_get_by_name>
  116a24:	e55b3005 	ldrb	r3, [fp, #-5]
  116a28:	e51b200c 	ldr	r2, [fp, #-12]
  116a2c:	e1a01003 	mov	r1, r3
  116a30:	ebffbe3d 	bl	10632c <netdev_low_level_set_dns_server>
#endif /* RT_USING_NETDEV */
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
  116a34:	ea000006 	b	116a54 <dns_setserver+0xa4>
      dns_servers[numdns] = *IP_ADDR_ANY;
  116a38:	e55b1005 	ldrb	r1, [fp, #-5]
  116a3c:	e30e30dc 	movw	r3, #57564	; 0xe0dc
  116a40:	e3403014 	movt	r3, #20
  116a44:	e30928d0 	movw	r2, #39120	; 0x98d0
  116a48:	e3402014 	movt	r2, #20
  116a4c:	e5922000 	ldr	r2, [r2]
  116a50:	e7832101 	str	r2, [r3, r1, lsl #2]
}
  116a54:	e320f000 	nop	{0}
  116a58:	e24bd004 	sub	sp, fp, #4
  116a5c:	e8bd8800 	pop	{fp, pc}

00116a60 <dns_getserver>:
 * @return IP address of the indexed DNS server or "ip_addr_any" if the DNS
 *         server has not been configured.
 */
const ip_addr_t*
dns_getserver(u8_t numdns)
{
  116a60:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116a64:	e28db000 	add	fp, sp, #0
  116a68:	e24dd00c 	sub	sp, sp, #12
  116a6c:	e1a03000 	mov	r3, r0
  116a70:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  116a74:	e55b3005 	ldrb	r3, [fp, #-5]
  116a78:	e3530001 	cmp	r3, #1
  116a7c:	8a000005 	bhi	116a98 <dns_getserver+0x38>
    return &dns_servers[numdns];
  116a80:	e55b3005 	ldrb	r3, [fp, #-5]
  116a84:	e1a02103 	lsl	r2, r3, #2
  116a88:	e30e30dc 	movw	r3, #57564	; 0xe0dc
  116a8c:	e3403014 	movt	r3, #20
  116a90:	e0823003 	add	r3, r2, r3
  116a94:	ea000001 	b	116aa0 <dns_getserver+0x40>
  } else {
    return IP_ADDR_ANY;
  116a98:	e30938d0 	movw	r3, #39120	; 0x98d0
  116a9c:	e3403014 	movt	r3, #20
  }
}
  116aa0:	e1a00003 	mov	r0, r3
  116aa4:	e28bd000 	add	sp, fp, #0
  116aa8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116aac:	e12fff1e 	bx	lr

00116ab0 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
  116ab0:	e92d4800 	push	{fp, lr}
  116ab4:	e28db004 	add	fp, sp, #4
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
  116ab8:	eb000360 	bl	117840 <dns_check_entries>
}
  116abc:	e320f000 	nop	{0}
  116ac0:	e8bd8800 	pop	{fp, pc}

00116ac4 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
  116ac4:	e92d4800 	push	{fp, lr}
  116ac8:	e28db004 	add	fp, sp, #4
  116acc:	e24dd010 	sub	sp, sp, #16
  116ad0:	e50b0010 	str	r0, [fp, #-16]
  116ad4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  116ad8:	e3a03000 	mov	r3, #0
  116adc:	e54b3005 	strb	r3, [fp, #-5]
  116ae0:	ea000029 	b	116b8c <dns_lookup+0xc8>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  116ae4:	e55b2005 	ldrb	r2, [fp, #-5]
  116ae8:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  116aec:	e3403014 	movt	r3, #20
  116af0:	e3a01e11 	mov	r1, #272	; 0x110
  116af4:	e0020291 	mul	r2, r1, r2
  116af8:	e0833002 	add	r3, r3, r2
  116afc:	e283300a 	add	r3, r3, #10
  116b00:	e5d33000 	ldrb	r3, [r3]
  116b04:	e3530003 	cmp	r3, #3
  116b08:	1a00001c 	bne	116b80 <dns_lookup+0xbc>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
  116b0c:	e55b3005 	ldrb	r3, [fp, #-5]
  116b10:	e3a02e11 	mov	r2, #272	; 0x110
  116b14:	e0030392 	mul	r3, r2, r3
  116b18:	e2832010 	add	r2, r3, #16
  116b1c:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  116b20:	e3403014 	movt	r3, #20
  116b24:	e0823003 	add	r3, r2, r3
  116b28:	e3a02c01 	mov	r2, #256	; 0x100
  116b2c:	e1a01003 	mov	r1, r3
  116b30:	e51b0010 	ldr	r0, [fp, #-16]
  116b34:	ebffff1b 	bl	1167a8 <lwip_strnicmp>
  116b38:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  116b3c:	e3530000 	cmp	r3, #0
  116b40:	1a00000e 	bne	116b80 <dns_lookup+0xbc>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print(DNS_DEBUG, &(dns_table[i].ipaddr));
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
  116b44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116b48:	e3530000 	cmp	r3, #0
  116b4c:	0a000009 	beq	116b78 <dns_lookup+0xb4>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
  116b50:	e55b2005 	ldrb	r2, [fp, #-5]
  116b54:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  116b58:	e3403014 	movt	r3, #20
  116b5c:	e3a01e11 	mov	r1, #272	; 0x110
  116b60:	e0020291 	mul	r2, r1, r2
  116b64:	e0833002 	add	r3, r3, r2
  116b68:	e2833004 	add	r3, r3, #4
  116b6c:	e5932000 	ldr	r2, [r3]
  116b70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116b74:	e5832000 	str	r2, [r3]
      }
      return ERR_OK;
  116b78:	e3a03000 	mov	r3, #0
  116b7c:	ea000006 	b	116b9c <dns_lookup+0xd8>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  116b80:	e55b3005 	ldrb	r3, [fp, #-5]
  116b84:	e2833001 	add	r3, r3, #1
  116b88:	e54b3005 	strb	r3, [fp, #-5]
  116b8c:	e55b3005 	ldrb	r3, [fp, #-5]
  116b90:	e3530003 	cmp	r3, #3
  116b94:	9affffd2 	bls	116ae4 <dns_lookup+0x20>
    }
  }

  return ERR_ARG;
  116b98:	e3e0300f 	mvn	r3, #15
}
  116b9c:	e1a00003 	mov	r0, r3
  116ba0:	e24bd004 	sub	sp, fp, #4
  116ba4:	e8bd8800 	pop	{fp, pc}

00116ba8 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf* p, u16_t start_offset)
{
  116ba8:	e92d4800 	push	{fp, lr}
  116bac:	e28db004 	add	fp, sp, #4
  116bb0:	e24dd020 	sub	sp, sp, #32
  116bb4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  116bb8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  116bbc:	e1a03002 	mov	r3, r2
  116bc0:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int n;
  u16_t response_offset = start_offset;
  116bc4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  116bc8:	e14b30ba 	strh	r3, [fp, #-10]

  do {
    n = pbuf_try_get_at(p, response_offset++);
  116bcc:	e15b30ba 	ldrh	r3, [fp, #-10]
  116bd0:	e2832001 	add	r2, r3, #1
  116bd4:	e14b20ba 	strh	r2, [fp, #-10]
  116bd8:	e1a01003 	mov	r1, r3
  116bdc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116be0:	eb001460 	bl	11bd68 <pbuf_try_get_at>
  116be4:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  116be8:	e51b3008 	ldr	r3, [fp, #-8]
  116bec:	e3530000 	cmp	r3, #0
  116bf0:	aa000001 	bge	116bfc <dns_compare_name+0x54>
      return 0xFFFF;
  116bf4:	e30f3fff 	movw	r3, #65535	; 0xffff
  116bf8:	ea000036 	b	116cd8 <dns_compare_name+0x130>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  116bfc:	e51b3008 	ldr	r3, [fp, #-8]
  116c00:	e20330c0 	and	r3, r3, #192	; 0xc0
  116c04:	e35300c0 	cmp	r3, #192	; 0xc0
  116c08:	1a00001c 	bne	116c80 <dns_compare_name+0xd8>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
  116c0c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116c10:	ea000030 	b	116cd8 <dns_compare_name+0x130>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
  116c14:	e15b30ba 	ldrh	r3, [fp, #-10]
  116c18:	e1a01003 	mov	r1, r3
  116c1c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116c20:	eb001450 	bl	11bd68 <pbuf_try_get_at>
  116c24:	e50b0010 	str	r0, [fp, #-16]
        if (c < 0) {
  116c28:	e51b3010 	ldr	r3, [fp, #-16]
  116c2c:	e3530000 	cmp	r3, #0
  116c30:	aa000001 	bge	116c3c <dns_compare_name+0x94>
          return 0xFFFF;
  116c34:	e30f3fff 	movw	r3, #65535	; 0xffff
  116c38:	ea000026 	b	116cd8 <dns_compare_name+0x130>
        }
        if ((*query) != (u8_t)c) {
  116c3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116c40:	e5d32000 	ldrb	r2, [r3]
  116c44:	e51b3010 	ldr	r3, [fp, #-16]
  116c48:	e6ef3073 	uxtb	r3, r3
  116c4c:	e1520003 	cmp	r2, r3
  116c50:	0a000001 	beq	116c5c <dns_compare_name+0xb4>
          return 0xFFFF;
  116c54:	e30f3fff 	movw	r3, #65535	; 0xffff
  116c58:	ea00001e 	b	116cd8 <dns_compare_name+0x130>
        }
        ++response_offset;
  116c5c:	e15b30ba 	ldrh	r3, [fp, #-10]
  116c60:	e2833001 	add	r3, r3, #1
  116c64:	e14b30ba 	strh	r3, [fp, #-10]
        ++query;
  116c68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116c6c:	e2833001 	add	r3, r3, #1
  116c70:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        --n;
  116c74:	e51b3008 	ldr	r3, [fp, #-8]
  116c78:	e2433001 	sub	r3, r3, #1
  116c7c:	e50b3008 	str	r3, [fp, #-8]
      while (n > 0) {
  116c80:	e51b3008 	ldr	r3, [fp, #-8]
  116c84:	e3530000 	cmp	r3, #0
  116c88:	caffffe1 	bgt	116c14 <dns_compare_name+0x6c>
      }
      ++query;
  116c8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116c90:	e2833001 	add	r3, r3, #1
  116c94:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
    n = pbuf_try_get_at(p, response_offset);
  116c98:	e15b30ba 	ldrh	r3, [fp, #-10]
  116c9c:	e1a01003 	mov	r1, r3
  116ca0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116ca4:	eb00142f 	bl	11bd68 <pbuf_try_get_at>
  116ca8:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  116cac:	e51b3008 	ldr	r3, [fp, #-8]
  116cb0:	e3530000 	cmp	r3, #0
  116cb4:	aa000001 	bge	116cc0 <dns_compare_name+0x118>
      return 0xFFFF;
  116cb8:	e30f3fff 	movw	r3, #65535	; 0xffff
  116cbc:	ea000005 	b	116cd8 <dns_compare_name+0x130>
    }
  } while (n != 0);
  116cc0:	e51b3008 	ldr	r3, [fp, #-8]
  116cc4:	e3530000 	cmp	r3, #0
  116cc8:	1affffbf 	bne	116bcc <dns_compare_name+0x24>

  return response_offset + 1;
  116ccc:	e15b30ba 	ldrh	r3, [fp, #-10]
  116cd0:	e2833001 	add	r3, r3, #1
  116cd4:	e6ff3073 	uxth	r3, r3
}
  116cd8:	e1a00003 	mov	r0, r3
  116cdc:	e24bd004 	sub	sp, fp, #4
  116ce0:	e8bd8800 	pop	{fp, pc}

00116ce4 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf* p, u16_t query_idx)
{
  116ce4:	e92d4800 	push	{fp, lr}
  116ce8:	e28db004 	add	fp, sp, #4
  116cec:	e24dd010 	sub	sp, sp, #16
  116cf0:	e50b0010 	str	r0, [fp, #-16]
  116cf4:	e1a03001 	mov	r3, r1
  116cf8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int n;
  u16_t offset = query_idx;
  116cfc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  116d00:	e14b30b6 	strh	r3, [fp, #-6]

  do {
    n = pbuf_try_get_at(p, offset++);
  116d04:	e15b30b6 	ldrh	r3, [fp, #-6]
  116d08:	e2832001 	add	r2, r3, #1
  116d0c:	e14b20b6 	strh	r2, [fp, #-6]
  116d10:	e1a01003 	mov	r1, r3
  116d14:	e51b0010 	ldr	r0, [fp, #-16]
  116d18:	eb001412 	bl	11bd68 <pbuf_try_get_at>
  116d1c:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  116d20:	e51b300c 	ldr	r3, [fp, #-12]
  116d24:	e3530000 	cmp	r3, #0
  116d28:	aa000001 	bge	116d34 <dns_skip_name+0x50>
      return 0xFFFF;
  116d2c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116d30:	ea000023 	b	116dc4 <dns_skip_name+0xe0>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  116d34:	e51b300c 	ldr	r3, [fp, #-12]
  116d38:	e20330c0 	and	r3, r3, #192	; 0xc0
  116d3c:	e35300c0 	cmp	r3, #192	; 0xc0
  116d40:	0a00001b 	beq	116db4 <dns_skip_name+0xd0>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
  116d44:	e15b20b6 	ldrh	r2, [fp, #-6]
  116d48:	e51b300c 	ldr	r3, [fp, #-12]
  116d4c:	e0823003 	add	r3, r2, r3
  116d50:	e51b2010 	ldr	r2, [fp, #-16]
  116d54:	e1d220b8 	ldrh	r2, [r2, #8]
  116d58:	e1530002 	cmp	r3, r2
  116d5c:	ba000001 	blt	116d68 <dns_skip_name+0x84>
        return 0xFFFF;
  116d60:	e30f3fff 	movw	r3, #65535	; 0xffff
  116d64:	ea000016 	b	116dc4 <dns_skip_name+0xe0>
      }
      offset = (u16_t)(offset + n);
  116d68:	e51b300c 	ldr	r3, [fp, #-12]
  116d6c:	e6ff2073 	uxth	r2, r3
  116d70:	e15b30b6 	ldrh	r3, [fp, #-6]
  116d74:	e0823003 	add	r3, r2, r3
  116d78:	e14b30b6 	strh	r3, [fp, #-6]
    }
    n = pbuf_try_get_at(p, offset);
  116d7c:	e15b30b6 	ldrh	r3, [fp, #-6]
  116d80:	e1a01003 	mov	r1, r3
  116d84:	e51b0010 	ldr	r0, [fp, #-16]
  116d88:	eb0013f6 	bl	11bd68 <pbuf_try_get_at>
  116d8c:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  116d90:	e51b300c 	ldr	r3, [fp, #-12]
  116d94:	e3530000 	cmp	r3, #0
  116d98:	aa000001 	bge	116da4 <dns_skip_name+0xc0>
      return 0xFFFF;
  116d9c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116da0:	ea000007 	b	116dc4 <dns_skip_name+0xe0>
    }
  } while (n != 0);
  116da4:	e51b300c 	ldr	r3, [fp, #-12]
  116da8:	e3530000 	cmp	r3, #0
  116dac:	1affffd4 	bne	116d04 <dns_skip_name+0x20>
  116db0:	ea000000 	b	116db8 <dns_skip_name+0xd4>
      break;
  116db4:	e320f000 	nop	{0}

  return offset + 1;
  116db8:	e15b30b6 	ldrh	r3, [fp, #-6]
  116dbc:	e2833001 	add	r3, r3, #1
  116dc0:	e6ff3073 	uxth	r3, r3
}
  116dc4:	e1a00003 	mov	r0, r3
  116dc8:	e24bd004 	sub	sp, fp, #4
  116dcc:	e8bd8800 	pop	{fp, pc}

00116dd0 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
  116dd0:	e92d4800 	push	{fp, lr}
  116dd4:	e28db004 	add	fp, sp, #4
  116dd8:	e24dd040 	sub	sp, sp, #64	; 0x40
  116ddc:	e1a03000 	mov	r3, r0
  116de0:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry* entry = &dns_table[idx];
  116de4:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  116de8:	e3a02e11 	mov	r2, #272	; 0x110
  116dec:	e0020392 	mul	r2, r2, r3
  116df0:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  116df4:	e3403014 	movt	r3, #20
  116df8:	e0823003 	add	r3, r2, r3
  116dfc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
              (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
  116e00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116e04:	e5d3300b 	ldrb	r3, [r3, #11]
  116e08:	e3530001 	cmp	r3, #1
  116e0c:	9a000006 	bls	116e2c <dns_send+0x5c>
  116e10:	e3070040 	movw	r0, #28736	; 0x7040
  116e14:	e3400014 	movt	r0, #20
  116e18:	ebffb0bd 	bl	103114 <rt_kprintf>
  116e1c:	e30012fa 	movw	r1, #762	; 0x2fa
  116e20:	e3070058 	movw	r0, #28760	; 0x7058
  116e24:	e3400014 	movt	r0, #20
  116e28:	ebffd0a1 	bl	10b0b4 <sys_arch_assert>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
  116e2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116e30:	e5d3300b 	ldrb	r3, [r3, #11]
  116e34:	e1a02003 	mov	r2, r3
  116e38:	e30e30dc 	movw	r3, #57564	; 0xe0dc
  116e3c:	e3403014 	movt	r3, #20
  116e40:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116e44:	e3530000 	cmp	r3, #0
  116e48:	1a000008 	bne	116e70 <dns_send+0xa0>
      && !entry->is_mdns
#endif
    ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
  116e4c:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  116e50:	e3a01000 	mov	r1, #0
  116e54:	e1a00003 	mov	r0, r3
  116e58:	eb00010f 	bl	11729c <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
  116e5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116e60:	e3a02000 	mov	r2, #0
  116e64:	e5c3200a 	strb	r2, [r3, #10]
    return ERR_OK;
  116e68:	e3a03000 	mov	r3, #0
  116e6c:	ea000089 	b	117098 <dns_send+0x2c8>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
  116e70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116e74:	e2833010 	add	r3, r3, #16
  116e78:	e1a00003 	mov	r0, r3
  116e7c:	eb00a97f 	bl	141480 <strlen>
  116e80:	e1a03000 	mov	r3, r0
  116e84:	e6ff3073 	uxth	r3, r3
  116e88:	e2833012 	add	r3, r3, #18
  116e8c:	e6ff3073 	uxth	r3, r3
  116e90:	e3a02000 	mov	r2, #0
  116e94:	e1a01003 	mov	r1, r3
  116e98:	e3a00000 	mov	r0, #0
  116e9c:	eb000ced 	bl	11a258 <pbuf_alloc>
  116ea0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
                 SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
  116ea4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116ea8:	e3530000 	cmp	r3, #0
  116eac:	0a000076 	beq	11708c <dns_send+0x2bc>
    const ip_addr_t* dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
  116eb0:	e24b3034 	sub	r3, fp, #52	; 0x34
  116eb4:	e3a0200c 	mov	r2, #12
  116eb8:	e3a01000 	mov	r1, #0
  116ebc:	e1a00003 	mov	r0, r3
  116ec0:	eb00a8dd 	bl	14123c <memset>
    hdr.id = lwip_htons(entry->txid);
  116ec4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116ec8:	e1d330b8 	ldrh	r3, [r3, #8]
  116ecc:	e1a00003 	mov	r0, r3
  116ed0:	ebfffdb0 	bl	116598 <lwip_htons>
  116ed4:	e1a03000 	mov	r3, r0
  116ed8:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
    hdr.flags1 = DNS_FLAG1_RD;
  116edc:	e3a03001 	mov	r3, #1
  116ee0:	e54b3032 	strb	r3, [fp, #-50]	; 0xffffffce
    hdr.numquestions = PP_HTONS(1);
  116ee4:	e3a03c01 	mov	r3, #256	; 0x100
  116ee8:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
  116eec:	e24b3034 	sub	r3, fp, #52	; 0x34
  116ef0:	e3a0200c 	mov	r2, #12
  116ef4:	e1a01003 	mov	r1, r3
  116ef8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116efc:	eb00128f 	bl	11b940 <pbuf_take>
    hostname = entry->name;
  116f00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116f04:	e2833010 	add	r3, r3, #16
  116f08:	e50b300c 	str	r3, [fp, #-12]
    --hostname;
  116f0c:	e51b300c 	ldr	r3, [fp, #-12]
  116f10:	e2433001 	sub	r3, r3, #1
  116f14:	e50b300c 	str	r3, [fp, #-12]

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
  116f18:	e3a0300c 	mov	r3, #12
  116f1c:	e14b30b8 	strh	r3, [fp, #-8]
    do {
      ++hostname;
  116f20:	e51b300c 	ldr	r3, [fp, #-12]
  116f24:	e2833001 	add	r3, r3, #1
  116f28:	e50b300c 	str	r3, [fp, #-12]
      hostname_part = hostname;
  116f2c:	e51b300c 	ldr	r3, [fp, #-12]
  116f30:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  116f34:	e3a03000 	mov	r3, #0
  116f38:	e54b300d 	strb	r3, [fp, #-13]
  116f3c:	ea000005 	b	116f58 <dns_send+0x188>
        ++n;
  116f40:	e55b300d 	ldrb	r3, [fp, #-13]
  116f44:	e2833001 	add	r3, r3, #1
  116f48:	e54b300d 	strb	r3, [fp, #-13]
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  116f4c:	e51b300c 	ldr	r3, [fp, #-12]
  116f50:	e2833001 	add	r3, r3, #1
  116f54:	e50b300c 	str	r3, [fp, #-12]
  116f58:	e51b300c 	ldr	r3, [fp, #-12]
  116f5c:	e5d33000 	ldrb	r3, [r3]
  116f60:	e353002e 	cmp	r3, #46	; 0x2e
  116f64:	0a000003 	beq	116f78 <dns_send+0x1a8>
  116f68:	e51b300c 	ldr	r3, [fp, #-12]
  116f6c:	e5d33000 	ldrb	r3, [r3]
  116f70:	e3530000 	cmp	r3, #0
  116f74:	1afffff1 	bne	116f40 <dns_send+0x170>
      }
      copy_len = (u16_t)(hostname - hostname_part);
  116f78:	e51b200c 	ldr	r2, [fp, #-12]
  116f7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  116f80:	e0423003 	sub	r3, r2, r3
  116f84:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      pbuf_put_at(p, query_idx, n);
  116f88:	e55b200d 	ldrb	r2, [fp, #-13]
  116f8c:	e15b30b8 	ldrh	r3, [fp, #-8]
  116f90:	e1a01003 	mov	r1, r3
  116f94:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116f98:	eb001390 	bl	11bde0 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
  116f9c:	e15b30b8 	ldrh	r3, [fp, #-8]
  116fa0:	e2833001 	add	r3, r3, #1
  116fa4:	e6ff3073 	uxth	r3, r3
  116fa8:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  116fac:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  116fb0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116fb4:	eb0012de 	bl	11bb34 <pbuf_take_at>
      query_idx += n + 1;
  116fb8:	e55b300d 	ldrb	r3, [fp, #-13]
  116fbc:	e6ff2073 	uxth	r2, r3
  116fc0:	e15b30b8 	ldrh	r3, [fp, #-8]
  116fc4:	e0823003 	add	r3, r2, r3
  116fc8:	e6ff3073 	uxth	r3, r3
  116fcc:	e2833001 	add	r3, r3, #1
  116fd0:	e14b30b8 	strh	r3, [fp, #-8]
    } while (*hostname != 0);
  116fd4:	e51b300c 	ldr	r3, [fp, #-12]
  116fd8:	e5d33000 	ldrb	r3, [r3]
  116fdc:	e3530000 	cmp	r3, #0
  116fe0:	1affffce 	bne	116f20 <dns_send+0x150>
    pbuf_put_at(p, query_idx, 0);
  116fe4:	e15b30b8 	ldrh	r3, [fp, #-8]
  116fe8:	e3a02000 	mov	r2, #0
  116fec:	e1a01003 	mov	r1, r3
  116ff0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116ff4:	eb001379 	bl	11bde0 <pbuf_put_at>
    query_idx++;
  116ff8:	e15b30b8 	ldrh	r3, [fp, #-8]
  116ffc:	e2833001 	add	r3, r3, #1
  117000:	e14b30b8 	strh	r3, [fp, #-8]

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
  117004:	e3a03c01 	mov	r3, #256	; 0x100
  117008:	e14b33b8 	strh	r3, [fp, #-56]	; 0xffffffc8
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
  11700c:	e3a03c01 	mov	r3, #256	; 0x100
  117010:	e14b33b6 	strh	r3, [fp, #-54]	; 0xffffffca
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
  117014:	e15b30b8 	ldrh	r3, [fp, #-8]
  117018:	e24b1038 	sub	r1, fp, #56	; 0x38
  11701c:	e3a02004 	mov	r2, #4
  117020:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  117024:	eb0012c2 	bl	11bb34 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
  117028:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11702c:	e5d3300f 	ldrb	r3, [r3, #15]
  117030:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
  117034:	e3a03035 	mov	r3, #53	; 0x35
  117038:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      dst = &dns_servers[entry->server_idx];
  11703c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117040:	e5d3300b 	ldrb	r3, [r3, #11]
  117044:	e1a02103 	lsl	r2, r3, #2
  117048:	e30e30dc 	movw	r3, #57564	; 0xe0dc
  11704c:	e3403014 	movt	r3, #20
  117050:	e0823003 	add	r3, r2, r3
  117054:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
  117058:	e55b201f 	ldrb	r2, [fp, #-31]	; 0xffffffe1
  11705c:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117060:	e3403014 	movt	r3, #20
  117064:	e7930102 	ldr	r0, [r3, r2, lsl #2]
  117068:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11706c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  117070:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  117074:	eb00441e 	bl	1280f4 <udp_sendto>
  117078:	e1a03000 	mov	r3, r0
  11707c:	e54b3005 	strb	r3, [fp, #-5]

    /* free pbuf */
    pbuf_free(p);
  117080:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  117084:	eb000f7a 	bl	11ae74 <pbuf_free>
  117088:	ea000001 	b	117094 <dns_send+0x2c4>
  } else {
    err = ERR_MEM;
  11708c:	e3e03000 	mvn	r3, #0
  117090:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  117094:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  117098:	e1a00003 	mov	r0, r3
  11709c:	e24bd004 	sub	sp, fp, #4
  1170a0:	e8bd8800 	pop	{fp, pc}

001170a4 <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb*
dns_alloc_random_port(void)
{
  1170a4:	e92d4800 	push	{fp, lr}
  1170a8:	e28db004 	add	fp, sp, #4
  1170ac:	e24dd010 	sub	sp, sp, #16
  err_t err;
  struct udp_pcb* ret;

  ret = udp_new_ip_type(IPADDR_TYPE_ANY);
  1170b0:	e3a0002e 	mov	r0, #46	; 0x2e
  1170b4:	eb00468c 	bl	128aec <udp_new_ip_type>
  1170b8:	e50b000c 	str	r0, [fp, #-12]
  if (ret == NULL) {
  1170bc:	e51b300c 	ldr	r3, [fp, #-12]
  1170c0:	e3530000 	cmp	r3, #0
  1170c4:	1a000001 	bne	1170d0 <dns_alloc_random_port+0x2c>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
  1170c8:	e3a03000 	mov	r3, #0
  1170cc:	ea000020 	b	117154 <dns_alloc_random_port+0xb0>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
  1170d0:	eb009c1f 	bl	13e154 <rand>
  1170d4:	e1a03000 	mov	r3, r0
  1170d8:	e14b30be 	strh	r3, [fp, #-14]
    if (!DNS_PORT_ALLOWED(port)) {
  1170dc:	e15b30be 	ldrh	r3, [fp, #-14]
  1170e0:	e3530b01 	cmp	r3, #1024	; 0x400
  1170e4:	2a000002 	bcs	1170f4 <dns_alloc_random_port+0x50>
      /* this port is not allowed, try again */
      err = ERR_USE;
  1170e8:	e3e03007 	mvn	r3, #7
  1170ec:	e54b3005 	strb	r3, [fp, #-5]
      continue;
  1170f0:	ea000007 	b	117114 <dns_alloc_random_port+0x70>
    }
    err = udp_bind(ret, IP_ANY_TYPE, port);
  1170f4:	e15b30be 	ldrh	r3, [fp, #-14]
  1170f8:	e1a02003 	mov	r2, r3
  1170fc:	e30918d0 	movw	r1, #39120	; 0x98d0
  117100:	e3401014 	movt	r1, #20
  117104:	e51b000c 	ldr	r0, [fp, #-12]
  117108:	eb004542 	bl	128618 <udp_bind>
  11710c:	e1a03000 	mov	r3, r0
  117110:	e54b3005 	strb	r3, [fp, #-5]
  } while (err == ERR_USE);
  117114:	e15b30d5 	ldrsb	r3, [fp, #-5]
  117118:	e3730008 	cmn	r3, #8
  11711c:	0affffeb 	beq	1170d0 <dns_alloc_random_port+0x2c>
  if (err != ERR_OK) {
  117120:	e15b30d5 	ldrsb	r3, [fp, #-5]
  117124:	e3530000 	cmp	r3, #0
  117128:	0a000003 	beq	11713c <dns_alloc_random_port+0x98>
    udp_remove(ret);
  11712c:	e51b000c 	ldr	r0, [fp, #-12]
  117130:	eb004622 	bl	1289c0 <udp_remove>
    return NULL;
  117134:	e3a03000 	mov	r3, #0
  117138:	ea000005 	b	117154 <dns_alloc_random_port+0xb0>
  }
  udp_recv(ret, dns_recv, NULL);
  11713c:	e3a02000 	mov	r2, #0
  117140:	e307194c 	movw	r1, #31052	; 0x794c
  117144:	e3401011 	movt	r1, #17
  117148:	e51b000c 	ldr	r0, [fp, #-12]
  11714c:	eb00460b 	bl	128980 <udp_recv>
  return ret;
  117150:	e51b300c 	ldr	r3, [fp, #-12]
}
  117154:	e1a00003 	mov	r0, r3
  117158:	e24bd004 	sub	sp, fp, #4
  11715c:	e8bd8800 	pop	{fp, pc}

00117160 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
  117160:	e92d4810 	push	{r4, fp, lr}
  117164:	e28db008 	add	fp, sp, #8
  117168:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  11716c:	e3a03000 	mov	r3, #0
  117170:	e54b300d 	strb	r3, [fp, #-13]
  117174:	ea000008 	b	11719c <dns_alloc_pcb+0x3c>
    if (dns_pcbs[i] == NULL) {
  117178:	e55b200d 	ldrb	r2, [fp, #-13]
  11717c:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117180:	e3403014 	movt	r3, #20
  117184:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117188:	e3530000 	cmp	r3, #0
  11718c:	0a000006 	beq	1171ac <dns_alloc_pcb+0x4c>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  117190:	e55b300d 	ldrb	r3, [fp, #-13]
  117194:	e2833001 	add	r3, r3, #1
  117198:	e54b300d 	strb	r3, [fp, #-13]
  11719c:	e55b300d 	ldrb	r3, [fp, #-13]
  1171a0:	e3530003 	cmp	r3, #3
  1171a4:	9afffff3 	bls	117178 <dns_alloc_pcb+0x18>
  1171a8:	ea000000 	b	1171b0 <dns_alloc_pcb+0x50>
      break;
  1171ac:	e320f000 	nop	{0}
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
  1171b0:	e55b300d 	ldrb	r3, [fp, #-13]
  1171b4:	e3530003 	cmp	r3, #3
  1171b8:	8a000011 	bhi	117204 <dns_alloc_pcb+0xa4>
    dns_pcbs[i] = dns_alloc_random_port();
  1171bc:	e55b400d 	ldrb	r4, [fp, #-13]
  1171c0:	ebffffb7 	bl	1170a4 <dns_alloc_random_port>
  1171c4:	e1a02000 	mov	r2, r0
  1171c8:	e30d3c58 	movw	r3, #56408	; 0xdc58
  1171cc:	e3403014 	movt	r3, #20
  1171d0:	e7832104 	str	r2, [r3, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
  1171d4:	e55b200d 	ldrb	r2, [fp, #-13]
  1171d8:	e30d3c58 	movw	r3, #56408	; 0xdc58
  1171dc:	e3403014 	movt	r3, #20
  1171e0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1171e4:	e3530000 	cmp	r3, #0
  1171e8:	0a000005 	beq	117204 <dns_alloc_pcb+0xa4>
      /* succeeded */
      dns_last_pcb_idx = i;
  1171ec:	e30d3c68 	movw	r3, #56424	; 0xdc68
  1171f0:	e3403014 	movt	r3, #20
  1171f4:	e55b200d 	ldrb	r2, [fp, #-13]
  1171f8:	e5c32000 	strb	r2, [r3]
      return i;
  1171fc:	e55b300d 	ldrb	r3, [fp, #-13]
  117200:	ea000022 	b	117290 <dns_alloc_pcb+0x130>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one */
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  117204:	e3a03000 	mov	r3, #0
  117208:	e54b300d 	strb	r3, [fp, #-13]
  11720c:	e30d3c68 	movw	r3, #56424	; 0xdc68
  117210:	e3403014 	movt	r3, #20
  117214:	e5d33000 	ldrb	r3, [r3]
  117218:	e2833001 	add	r3, r3, #1
  11721c:	e54b300e 	strb	r3, [fp, #-14]
  117220:	ea000016 	b	117280 <dns_alloc_pcb+0x120>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
  117224:	e55b300e 	ldrb	r3, [fp, #-14]
  117228:	e3530003 	cmp	r3, #3
  11722c:	9a000001 	bls	117238 <dns_alloc_pcb+0xd8>
      idx = 0;
  117230:	e3a03000 	mov	r3, #0
  117234:	e54b300e 	strb	r3, [fp, #-14]
    }
    if (dns_pcbs[idx] != NULL) {
  117238:	e55b200e 	ldrb	r2, [fp, #-14]
  11723c:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117240:	e3403014 	movt	r3, #20
  117244:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117248:	e3530000 	cmp	r3, #0
  11724c:	0a000005 	beq	117268 <dns_alloc_pcb+0x108>
      dns_last_pcb_idx = idx;
  117250:	e30d3c68 	movw	r3, #56424	; 0xdc68
  117254:	e3403014 	movt	r3, #20
  117258:	e55b200e 	ldrb	r2, [fp, #-14]
  11725c:	e5c32000 	strb	r2, [r3]
      return idx;
  117260:	e55b300e 	ldrb	r3, [fp, #-14]
  117264:	ea000009 	b	117290 <dns_alloc_pcb+0x130>
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  117268:	e55b300d 	ldrb	r3, [fp, #-13]
  11726c:	e2833001 	add	r3, r3, #1
  117270:	e54b300d 	strb	r3, [fp, #-13]
  117274:	e55b300e 	ldrb	r3, [fp, #-14]
  117278:	e2833001 	add	r3, r3, #1
  11727c:	e54b300e 	strb	r3, [fp, #-14]
  117280:	e55b300d 	ldrb	r3, [fp, #-13]
  117284:	e3530003 	cmp	r3, #3
  117288:	9affffe5 	bls	117224 <dns_alloc_pcb+0xc4>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
  11728c:	e3a03004 	mov	r3, #4
}
  117290:	e1a00003 	mov	r0, r3
  117294:	e24bd008 	sub	sp, fp, #8
  117298:	e8bd8810 	pop	{r4, fp, pc}

0011729c <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t* addr)
{
  11729c:	e92d4810 	push	{r4, fp, lr}
  1172a0:	e28db008 	add	fp, sp, #8
  1172a4:	e24dd014 	sub	sp, sp, #20
  1172a8:	e1a03000 	mov	r3, r0
  1172ac:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1172b0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1172b4:	e3a03000 	mov	r3, #0
  1172b8:	e54b300d 	strb	r3, [fp, #-13]
  1172bc:	ea000037 	b	1173a0 <dns_call_found+0x104>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
  1172c0:	e55b200d 	ldrb	r2, [fp, #-13]
  1172c4:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  1172c8:	e3403014 	movt	r3, #20
  1172cc:	e3a0100c 	mov	r1, #12
  1172d0:	e0020291 	mul	r2, r1, r2
  1172d4:	e0833002 	add	r3, r3, r2
  1172d8:	e5933000 	ldr	r3, [r3]
  1172dc:	e3530000 	cmp	r3, #0
  1172e0:	0a00002b 	beq	117394 <dns_call_found+0xf8>
  1172e4:	e55b200d 	ldrb	r2, [fp, #-13]
  1172e8:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  1172ec:	e3403014 	movt	r3, #20
  1172f0:	e3a0100c 	mov	r1, #12
  1172f4:	e0020291 	mul	r2, r1, r2
  1172f8:	e0833002 	add	r3, r3, r2
  1172fc:	e2833008 	add	r3, r3, #8
  117300:	e5d33000 	ldrb	r3, [r3]
  117304:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117308:	e1520003 	cmp	r2, r3
  11730c:	1a000020 	bne	117394 <dns_call_found+0xf8>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
  117310:	e55b200d 	ldrb	r2, [fp, #-13]
  117314:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  117318:	e3403014 	movt	r3, #20
  11731c:	e3a0100c 	mov	r1, #12
  117320:	e0020291 	mul	r2, r1, r2
  117324:	e0833002 	add	r3, r3, r2
  117328:	e5934000 	ldr	r4, [r3]
  11732c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  117330:	e3a02e11 	mov	r2, #272	; 0x110
  117334:	e0030392 	mul	r3, r2, r3
  117338:	e2832010 	add	r2, r3, #16
  11733c:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  117340:	e3403014 	movt	r3, #20
  117344:	e0820003 	add	r0, r2, r3
  117348:	e55b200d 	ldrb	r2, [fp, #-13]
  11734c:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  117350:	e3403014 	movt	r3, #20
  117354:	e3a0100c 	mov	r1, #12
  117358:	e0020291 	mul	r2, r1, r2
  11735c:	e0833002 	add	r3, r3, r2
  117360:	e2833004 	add	r3, r3, #4
  117364:	e5933000 	ldr	r3, [r3]
  117368:	e1a02003 	mov	r2, r3
  11736c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  117370:	e12fff34 	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
  117374:	e55b200d 	ldrb	r2, [fp, #-13]
  117378:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  11737c:	e3403014 	movt	r3, #20
  117380:	e3a0100c 	mov	r1, #12
  117384:	e0020291 	mul	r2, r1, r2
  117388:	e0833002 	add	r3, r3, r2
  11738c:	e3a02000 	mov	r2, #0
  117390:	e5832000 	str	r2, [r3]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  117394:	e55b300d 	ldrb	r3, [fp, #-13]
  117398:	e2833001 	add	r3, r3, #1
  11739c:	e54b300d 	strb	r3, [fp, #-13]
  1173a0:	e55b300d 	ldrb	r3, [fp, #-13]
  1173a4:	e3530003 	cmp	r3, #3
  1173a8:	9affffc4 	bls	1172c0 <dns_call_found+0x24>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1173ac:	e3a03000 	mov	r3, #0
  1173b0:	e54b300d 	strb	r3, [fp, #-13]
  1173b4:	ea00002d 	b	117470 <dns_call_found+0x1d4>
    if (i == idx) {
  1173b8:	e55b200d 	ldrb	r2, [fp, #-13]
  1173bc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  1173c0:	e1520003 	cmp	r2, r3
  1173c4:	0a000025 	beq	117460 <dns_call_found+0x1c4>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
  1173c8:	e55b200d 	ldrb	r2, [fp, #-13]
  1173cc:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  1173d0:	e3403014 	movt	r3, #20
  1173d4:	e3a01e11 	mov	r1, #272	; 0x110
  1173d8:	e0020291 	mul	r2, r1, r2
  1173dc:	e0833002 	add	r3, r3, r2
  1173e0:	e283300a 	add	r3, r3, #10
  1173e4:	e5d33000 	ldrb	r3, [r3]
  1173e8:	e3530002 	cmp	r3, #2
  1173ec:	1a00001c 	bne	117464 <dns_call_found+0x1c8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
  1173f0:	e55b200d 	ldrb	r2, [fp, #-13]
  1173f4:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  1173f8:	e3403014 	movt	r3, #20
  1173fc:	e3a01e11 	mov	r1, #272	; 0x110
  117400:	e0020291 	mul	r2, r1, r2
  117404:	e0833002 	add	r3, r3, r2
  117408:	e283300f 	add	r3, r3, #15
  11740c:	e5d32000 	ldrb	r2, [r3]
  117410:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  117414:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  117418:	e3403014 	movt	r3, #20
  11741c:	e3a00e11 	mov	r0, #272	; 0x110
  117420:	e0010190 	mul	r1, r0, r1
  117424:	e0833001 	add	r3, r3, r1
  117428:	e283300f 	add	r3, r3, #15
  11742c:	e5d33000 	ldrb	r3, [r3]
  117430:	e1520003 	cmp	r2, r3
  117434:	1a00000a 	bne	117464 <dns_call_found+0x1c8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  117438:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  11743c:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  117440:	e3403014 	movt	r3, #20
  117444:	e3a01e11 	mov	r1, #272	; 0x110
  117448:	e0020291 	mul	r2, r1, r2
  11744c:	e0833002 	add	r3, r3, r2
  117450:	e283300f 	add	r3, r3, #15
  117454:	e3a02004 	mov	r2, #4
  117458:	e5c32000 	strb	r2, [r3]
        break;
  11745c:	ea000006 	b	11747c <dns_call_found+0x1e0>
      continue; /* only check other requests */
  117460:	e320f000 	nop	{0}
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  117464:	e55b300d 	ldrb	r3, [fp, #-13]
  117468:	e2833001 	add	r3, r3, #1
  11746c:	e54b300d 	strb	r3, [fp, #-13]
  117470:	e55b300d 	ldrb	r3, [fp, #-13]
  117474:	e3530003 	cmp	r3, #3
  117478:	9affffce 	bls	1173b8 <dns_call_found+0x11c>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
  11747c:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117480:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  117484:	e3403014 	movt	r3, #20
  117488:	e3a01e11 	mov	r1, #272	; 0x110
  11748c:	e0020291 	mul	r2, r1, r2
  117490:	e0833002 	add	r3, r3, r2
  117494:	e283300f 	add	r3, r3, #15
  117498:	e5d33000 	ldrb	r3, [r3]
  11749c:	e3530003 	cmp	r3, #3
  1174a0:	8a000023 	bhi	117534 <dns_call_found+0x298>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
  1174a4:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1174a8:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  1174ac:	e3403014 	movt	r3, #20
  1174b0:	e3a01e11 	mov	r1, #272	; 0x110
  1174b4:	e0020291 	mul	r2, r1, r2
  1174b8:	e0833002 	add	r3, r3, r2
  1174bc:	e283300f 	add	r3, r3, #15
  1174c0:	e5d33000 	ldrb	r3, [r3]
  1174c4:	e1a02003 	mov	r2, r3
  1174c8:	e30d3c58 	movw	r3, #56408	; 0xdc58
  1174cc:	e3403014 	movt	r3, #20
  1174d0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1174d4:	e1a00003 	mov	r0, r3
  1174d8:	eb004538 	bl	1289c0 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
  1174dc:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1174e0:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  1174e4:	e3403014 	movt	r3, #20
  1174e8:	e3a01e11 	mov	r1, #272	; 0x110
  1174ec:	e0020291 	mul	r2, r1, r2
  1174f0:	e0833002 	add	r3, r3, r2
  1174f4:	e283300f 	add	r3, r3, #15
  1174f8:	e5d33000 	ldrb	r3, [r3]
  1174fc:	e1a01003 	mov	r1, r3
  117500:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117504:	e3403014 	movt	r3, #20
  117508:	e3a02000 	mov	r2, #0
  11750c:	e7832101 	str	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  117510:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117514:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  117518:	e3403014 	movt	r3, #20
  11751c:	e3a01e11 	mov	r1, #272	; 0x110
  117520:	e0020291 	mul	r2, r1, r2
  117524:	e0833002 	add	r3, r3, r2
  117528:	e283300f 	add	r3, r3, #15
  11752c:	e3a02004 	mov	r2, #4
  117530:	e5c32000 	strb	r2, [r3]
  }
#endif
}
  117534:	e320f000 	nop	{0}
  117538:	e24bd008 	sub	sp, fp, #8
  11753c:	e8bd8810 	pop	{r4, fp, pc}

00117540 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
  117540:	e92d4800 	push	{fp, lr}
  117544:	e28db004 	add	fp, sp, #4
  117548:	e24dd008 	sub	sp, sp, #8
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
  11754c:	eb009b00 	bl	13e154 <rand>
  117550:	e1a03000 	mov	r3, r0
  117554:	e14b30b8 	strh	r3, [fp, #-8]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117558:	e3a03000 	mov	r3, #0
  11755c:	e54b3005 	strb	r3, [fp, #-5]
  117560:	ea000018 	b	1175c8 <dns_create_txid+0x88>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117564:	e55b2005 	ldrb	r2, [fp, #-5]
  117568:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  11756c:	e3403014 	movt	r3, #20
  117570:	e3a01e11 	mov	r1, #272	; 0x110
  117574:	e0020291 	mul	r2, r1, r2
  117578:	e0833002 	add	r3, r3, r2
  11757c:	e283300a 	add	r3, r3, #10
  117580:	e5d33000 	ldrb	r3, [r3]
  117584:	e3530002 	cmp	r3, #2
  117588:	1a00000b 	bne	1175bc <dns_create_txid+0x7c>
        (dns_table[i].txid == txid)) {
  11758c:	e55b2005 	ldrb	r2, [fp, #-5]
  117590:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  117594:	e3403014 	movt	r3, #20
  117598:	e3a01e11 	mov	r1, #272	; 0x110
  11759c:	e0020291 	mul	r2, r1, r2
  1175a0:	e0833002 	add	r3, r3, r2
  1175a4:	e2833008 	add	r3, r3, #8
  1175a8:	e1d330b0 	ldrh	r3, [r3]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  1175ac:	e15b20b8 	ldrh	r2, [fp, #-8]
  1175b0:	e1520003 	cmp	r2, r3
  1175b4:	1a000000 	bne	1175bc <dns_create_txid+0x7c>
      /* ID already used by another pending query */
      goto again;
  1175b8:	eaffffe3 	b	11754c <dns_create_txid+0xc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  1175bc:	e55b3005 	ldrb	r3, [fp, #-5]
  1175c0:	e2833001 	add	r3, r3, #1
  1175c4:	e54b3005 	strb	r3, [fp, #-5]
  1175c8:	e55b3005 	ldrb	r3, [fp, #-5]
  1175cc:	e3530003 	cmp	r3, #3
  1175d0:	9affffe3 	bls	117564 <dns_create_txid+0x24>
    }
  }

  return txid;
  1175d4:	e15b30b8 	ldrh	r3, [fp, #-8]
}
  1175d8:	e1a00003 	mov	r0, r3
  1175dc:	e24bd004 	sub	sp, fp, #4
  1175e0:	e8bd8800 	pop	{fp, pc}

001175e4 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
  1175e4:	e92d4800 	push	{fp, lr}
  1175e8:	e28db004 	add	fp, sp, #4
  1175ec:	e24dd010 	sub	sp, sp, #16
  1175f0:	e1a03000 	mov	r3, r0
  1175f4:	e54b300d 	strb	r3, [fp, #-13]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
  1175f8:	e55b300d 	ldrb	r3, [fp, #-13]
  1175fc:	e3a02e11 	mov	r2, #272	; 0x110
  117600:	e0020392 	mul	r2, r2, r3
  117604:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  117608:	e3403014 	movt	r3, #20
  11760c:	e0823003 	add	r3, r2, r3
  117610:	e50b3008 	str	r3, [fp, #-8]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
  117614:	e55b300d 	ldrb	r3, [fp, #-13]
  117618:	e3530003 	cmp	r3, #3
  11761c:	9a000006 	bls	11763c <dns_check_entry+0x58>
  117620:	e3070084 	movw	r0, #28804	; 0x7084
  117624:	e3400014 	movt	r0, #20
  117628:	ebffaeb9 	bl	103114 <rt_kprintf>
  11762c:	e3001405 	movw	r1, #1029	; 0x405
  117630:	e3070058 	movw	r0, #28760	; 0x7058
  117634:	e3400014 	movt	r0, #20
  117638:	ebffce9d 	bl	10b0b4 <sys_arch_assert>

  switch (entry->state) {
  11763c:	e51b3008 	ldr	r3, [fp, #-8]
  117640:	e5d3300a 	ldrb	r3, [r3, #10]
  117644:	e3530003 	cmp	r3, #3
  117648:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11764c:	ea00006b 	b	117800 <dns_check_entry+0x21c>
  117650:	00117820 	.word	0x00117820
  117654:	00117660 	.word	0x00117660
  117658:	001176bc 	.word	0x001176bc
  11765c:	001177bc 	.word	0x001177bc
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
  117660:	ebffffb6 	bl	117540 <dns_create_txid>
  117664:	e1a03000 	mov	r3, r0
  117668:	e1a02003 	mov	r2, r3
  11766c:	e51b3008 	ldr	r3, [fp, #-8]
  117670:	e1c320b8 	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
  117674:	e51b3008 	ldr	r3, [fp, #-8]
  117678:	e3a02002 	mov	r2, #2
  11767c:	e5c3200a 	strb	r2, [r3, #10]
      entry->server_idx = 0;
  117680:	e51b3008 	ldr	r3, [fp, #-8]
  117684:	e3a02000 	mov	r2, #0
  117688:	e5c3200b 	strb	r2, [r3, #11]
      entry->tmr = 1;
  11768c:	e51b3008 	ldr	r3, [fp, #-8]
  117690:	e3a02001 	mov	r2, #1
  117694:	e5c3200c 	strb	r2, [r3, #12]
      entry->retries = 0;
  117698:	e51b3008 	ldr	r3, [fp, #-8]
  11769c:	e3a02000 	mov	r2, #0
  1176a0:	e5c3200d 	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
  1176a4:	e55b300d 	ldrb	r3, [fp, #-13]
  1176a8:	e1a00003 	mov	r0, r3
  1176ac:	ebfffdc7 	bl	116dd0 <dns_send>
  1176b0:	e1a03000 	mov	r3, r0
  1176b4:	e54b3009 	strb	r3, [fp, #-9]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
  1176b8:	ea00005d 	b	117834 <dns_check_entry+0x250>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
  1176bc:	e51b3008 	ldr	r3, [fp, #-8]
  1176c0:	e5d3300c 	ldrb	r3, [r3, #12]
  1176c4:	e2433001 	sub	r3, r3, #1
  1176c8:	e6ef2073 	uxtb	r2, r3
  1176cc:	e51b3008 	ldr	r3, [fp, #-8]
  1176d0:	e5c3200c 	strb	r2, [r3, #12]
  1176d4:	e51b3008 	ldr	r3, [fp, #-8]
  1176d8:	e5d3300c 	ldrb	r3, [r3, #12]
  1176dc:	e3530000 	cmp	r3, #0
  1176e0:	1a000050 	bne	117828 <dns_check_entry+0x244>
        if (++entry->retries == DNS_MAX_RETRIES) {
  1176e4:	e51b3008 	ldr	r3, [fp, #-8]
  1176e8:	e5d3300d 	ldrb	r3, [r3, #13]
  1176ec:	e2833001 	add	r3, r3, #1
  1176f0:	e6ef2073 	uxtb	r2, r3
  1176f4:	e51b3008 	ldr	r3, [fp, #-8]
  1176f8:	e5c3200d 	strb	r2, [r3, #13]
  1176fc:	e51b3008 	ldr	r3, [fp, #-8]
  117700:	e5d3300d 	ldrb	r3, [r3, #13]
  117704:	e3530004 	cmp	r3, #4
  117708:	1a000021 	bne	117794 <dns_check_entry+0x1b0>
          if ((entry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[entry->server_idx + 1])
  11770c:	e51b3008 	ldr	r3, [fp, #-8]
  117710:	e5d3300b 	ldrb	r3, [r3, #11]
  117714:	e2833001 	add	r3, r3, #1
  117718:	e3530001 	cmp	r3, #1
  11771c:	ca000014 	bgt	117774 <dns_check_entry+0x190>
  117720:	e51b3008 	ldr	r3, [fp, #-8]
  117724:	e5d3300b 	ldrb	r3, [r3, #11]
  117728:	e2832001 	add	r2, r3, #1
  11772c:	e30e30dc 	movw	r3, #57564	; 0xe0dc
  117730:	e3403014 	movt	r3, #20
  117734:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117738:	e3530000 	cmp	r3, #0
  11773c:	0a00000c 	beq	117774 <dns_check_entry+0x190>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
            && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
            ) {
            /* change of server */
            entry->server_idx++;
  117740:	e51b3008 	ldr	r3, [fp, #-8]
  117744:	e5d3300b 	ldrb	r3, [r3, #11]
  117748:	e2833001 	add	r3, r3, #1
  11774c:	e6ef2073 	uxtb	r2, r3
  117750:	e51b3008 	ldr	r3, [fp, #-8]
  117754:	e5c3200b 	strb	r2, [r3, #11]
            entry->tmr = 1;
  117758:	e51b3008 	ldr	r3, [fp, #-8]
  11775c:	e3a02001 	mov	r2, #1
  117760:	e5c3200c 	strb	r2, [r3, #12]
            entry->retries = 0;
  117764:	e51b3008 	ldr	r3, [fp, #-8]
  117768:	e3a02000 	mov	r2, #0
  11776c:	e5c3200d 	strb	r2, [r3, #13]
  117770:	ea00000b 	b	1177a4 <dns_check_entry+0x1c0>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
  117774:	e55b300d 	ldrb	r3, [fp, #-13]
  117778:	e3a01000 	mov	r1, #0
  11777c:	e1a00003 	mov	r0, r3
  117780:	ebfffec5 	bl	11729c <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
  117784:	e51b3008 	ldr	r3, [fp, #-8]
  117788:	e3a02000 	mov	r2, #0
  11778c:	e5c3200a 	strb	r2, [r3, #10]
            break;
  117790:	ea000027 	b	117834 <dns_check_entry+0x250>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
  117794:	e51b3008 	ldr	r3, [fp, #-8]
  117798:	e5d3200d 	ldrb	r2, [r3, #13]
  11779c:	e51b3008 	ldr	r3, [fp, #-8]
  1177a0:	e5c3200c 	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
  1177a4:	e55b300d 	ldrb	r3, [fp, #-13]
  1177a8:	e1a00003 	mov	r0, r3
  1177ac:	ebfffd87 	bl	116dd0 <dns_send>
  1177b0:	e1a03000 	mov	r3, r0
  1177b4:	e54b3009 	strb	r3, [fp, #-9]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
  1177b8:	ea00001a 	b	117828 <dns_check_entry+0x244>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
  1177bc:	e51b3008 	ldr	r3, [fp, #-8]
  1177c0:	e5933000 	ldr	r3, [r3]
  1177c4:	e3530000 	cmp	r3, #0
  1177c8:	0a000008 	beq	1177f0 <dns_check_entry+0x20c>
  1177cc:	e51b3008 	ldr	r3, [fp, #-8]
  1177d0:	e5933000 	ldr	r3, [r3]
  1177d4:	e2432001 	sub	r2, r3, #1
  1177d8:	e51b3008 	ldr	r3, [fp, #-8]
  1177dc:	e5832000 	str	r2, [r3]
  1177e0:	e51b3008 	ldr	r3, [fp, #-8]
  1177e4:	e5933000 	ldr	r3, [r3]
  1177e8:	e3530000 	cmp	r3, #0
  1177ec:	1a00000f 	bne	117830 <dns_check_entry+0x24c>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
  1177f0:	e51b3008 	ldr	r3, [fp, #-8]
  1177f4:	e3a02000 	mov	r2, #0
  1177f8:	e5c3200a 	strb	r2, [r3, #10]
      }
      break;
  1177fc:	ea00000b 	b	117830 <dns_check_entry+0x24c>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
  117800:	e30700a0 	movw	r0, #28832	; 0x70a0
  117804:	e3400014 	movt	r0, #20
  117808:	ebffae41 	bl	103114 <rt_kprintf>
  11780c:	e3001444 	movw	r1, #1092	; 0x444
  117810:	e3070058 	movw	r0, #28760	; 0x7058
  117814:	e3400014 	movt	r0, #20
  117818:	ebffce25 	bl	10b0b4 <sys_arch_assert>
      break;
  11781c:	ea000004 	b	117834 <dns_check_entry+0x250>
      break;
  117820:	e320f000 	nop	{0}
  117824:	ea000002 	b	117834 <dns_check_entry+0x250>
      break;
  117828:	e320f000 	nop	{0}
  11782c:	ea000000 	b	117834 <dns_check_entry+0x250>
      break;
  117830:	e320f000 	nop	{0}
  }
}
  117834:	e320f000 	nop	{0}
  117838:	e24bd004 	sub	sp, fp, #4
  11783c:	e8bd8800 	pop	{fp, pc}

00117840 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
  117840:	e92d4800 	push	{fp, lr}
  117844:	e28db004 	add	fp, sp, #4
  117848:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  11784c:	e3a03000 	mov	r3, #0
  117850:	e54b3005 	strb	r3, [fp, #-5]
  117854:	ea000005 	b	117870 <dns_check_entries+0x30>
    dns_check_entry(i);
  117858:	e55b3005 	ldrb	r3, [fp, #-5]
  11785c:	e1a00003 	mov	r0, r3
  117860:	ebffff5f 	bl	1175e4 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117864:	e55b3005 	ldrb	r3, [fp, #-5]
  117868:	e2833001 	add	r3, r3, #1
  11786c:	e54b3005 	strb	r3, [fp, #-5]
  117870:	e55b3005 	ldrb	r3, [fp, #-5]
  117874:	e3530003 	cmp	r3, #3
  117878:	9afffff6 	bls	117858 <dns_check_entries+0x18>
  }
}
  11787c:	e320f000 	nop	{0}
  117880:	e24bd004 	sub	sp, fp, #4
  117884:	e8bd8800 	pop	{fp, pc}

00117888 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
  117888:	e92d4800 	push	{fp, lr}
  11788c:	e28db004 	add	fp, sp, #4
  117890:	e24dd010 	sub	sp, sp, #16
  117894:	e1a03000 	mov	r3, r0
  117898:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11789c:	e54b300d 	strb	r3, [fp, #-13]
  struct dns_table_entry *entry = &dns_table[idx];
  1178a0:	e55b300d 	ldrb	r3, [fp, #-13]
  1178a4:	e3a02e11 	mov	r2, #272	; 0x110
  1178a8:	e0020392 	mul	r2, r2, r3
  1178ac:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  1178b0:	e3403014 	movt	r3, #20
  1178b4:	e0823003 	add	r3, r2, r3
  1178b8:	e50b3008 	str	r3, [fp, #-8]

  entry->state = DNS_STATE_DONE;
  1178bc:	e51b3008 	ldr	r3, [fp, #-8]
  1178c0:	e3a02003 	mov	r2, #3
  1178c4:	e5c3200a 	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print(DNS_DEBUG, (&(entry->ipaddr)));
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
  1178c8:	e51b3008 	ldr	r3, [fp, #-8]
  1178cc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1178d0:	e5832000 	str	r2, [r3]
  if (entry->ttl > DNS_MAX_TTL) {
  1178d4:	e51b3008 	ldr	r3, [fp, #-8]
  1178d8:	e5932000 	ldr	r2, [r3]
  1178dc:	e3a03dea 	mov	r3, #14976	; 0x3a80
  1178e0:	e3403009 	movt	r3, #9
  1178e4:	e1520003 	cmp	r2, r3
  1178e8:	9a000003 	bls	1178fc <dns_correct_response+0x74>
    entry->ttl = DNS_MAX_TTL;
  1178ec:	e51b2008 	ldr	r2, [fp, #-8]
  1178f0:	e3a03dea 	mov	r3, #14976	; 0x3a80
  1178f4:	e3403009 	movt	r3, #9
  1178f8:	e5823000 	str	r3, [r2]
  }
  dns_call_found(idx, &entry->ipaddr);
  1178fc:	e51b3008 	ldr	r3, [fp, #-8]
  117900:	e2832004 	add	r2, r3, #4
  117904:	e55b300d 	ldrb	r3, [fp, #-13]
  117908:	e1a01002 	mov	r1, r2
  11790c:	e1a00003 	mov	r0, r3
  117910:	ebfffe61 	bl	11729c <dns_call_found>

  if (entry->ttl == 0) {
  117914:	e51b3008 	ldr	r3, [fp, #-8]
  117918:	e5933000 	ldr	r3, [r3]
  11791c:	e3530000 	cmp	r3, #0
  117920:	1a000006 	bne	117940 <dns_correct_response+0xb8>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
  117924:	e51b3008 	ldr	r3, [fp, #-8]
  117928:	e5d3300a 	ldrb	r3, [r3, #10]
  11792c:	e3530003 	cmp	r3, #3
  117930:	1a000002 	bne	117940 <dns_correct_response+0xb8>
      entry->state = DNS_STATE_UNUSED;
  117934:	e51b3008 	ldr	r3, [fp, #-8]
  117938:	e3a02000 	mov	r2, #0
  11793c:	e5c3200a 	strb	r2, [r3, #10]
    }
  }
}
  117940:	e320f000 	nop	{0}
  117944:	e24bd004 	sub	sp, fp, #4
  117948:	e8bd8800 	pop	{fp, pc}

0011794c <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  11794c:	e92d4810 	push	{r4, fp, lr}
  117950:	e28db008 	add	fp, sp, #8
  117954:	e24dd044 	sub	sp, sp, #68	; 0x44
  117958:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
  11795c:	e50b1044 	str	r1, [fp, #-68]	; 0xffffffbc
  117960:	e50b2048 	str	r2, [fp, #-72]	; 0xffffffb8
  117964:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
  117968:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  11796c:	e1d330b8 	ldrh	r3, [r3, #8]
  117970:	e353000f 	cmp	r3, #15
  117974:	9a0000c8 	bls	117c9c <dns_recv+0x350>
    /* free pbuf and return */
    goto memerr;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
  117978:	e24b1028 	sub	r1, fp, #40	; 0x28
  11797c:	e3a03000 	mov	r3, #0
  117980:	e3a0200c 	mov	r2, #12
  117984:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117988:	eb000f44 	bl	11b6a0 <pbuf_copy_partial>
  11798c:	e1a03000 	mov	r3, r0
  117990:	e353000c 	cmp	r3, #12
  117994:	1a0000c2 	bne	117ca4 <dns_recv+0x358>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
  117998:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  11799c:	e1a00003 	mov	r0, r3
  1179a0:	ebfffafc 	bl	116598 <lwip_htons>
  1179a4:	e1a03000 	mov	r3, r0
  1179a8:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  1179ac:	e3a03000 	mov	r3, #0
  1179b0:	e54b300d 	strb	r3, [fp, #-13]
  1179b4:	ea0000b4 	b	117c8c <dns_recv+0x340>
      const struct dns_table_entry *entry = &dns_table[i];
  1179b8:	e55b300d 	ldrb	r3, [fp, #-13]
  1179bc:	e3a02e11 	mov	r2, #272	; 0x110
  1179c0:	e0020392 	mul	r2, r2, r3
  1179c4:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  1179c8:	e3403014 	movt	r3, #20
  1179cc:	e0823003 	add	r3, r2, r3
  1179d0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      if ((entry->state == DNS_STATE_ASKING) &&
  1179d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1179d8:	e5d3300a 	ldrb	r3, [r3, #10]
  1179dc:	e3530002 	cmp	r3, #2
  1179e0:	1a0000a6 	bne	117c80 <dns_recv+0x334>
          (entry->txid == txid)) {
  1179e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1179e8:	e1d330b8 	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
  1179ec:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  1179f0:	e1520003 	cmp	r2, r3
  1179f4:	1a0000a1 	bne	117c80 <dns_recv+0x334>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
  1179f8:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  1179fc:	e1a00003 	mov	r0, r3
  117a00:	ebfffae4 	bl	116598 <lwip_htons>
  117a04:	e1a03000 	mov	r3, r0
  117a08:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
        nanswers   = lwip_htons(hdr.numanswers);
  117a0c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  117a10:	e1a00003 	mov	r0, r3
  117a14:	ebfffadf 	bl	116598 <lwip_htons>
  117a18:	e1a03000 	mov	r3, r0
  117a1c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
  117a20:	e55b3026 	ldrb	r3, [fp, #-38]	; 0xffffffda
  117a24:	e6af3073 	sxtb	r3, r3
  117a28:	e3530000 	cmp	r3, #0
  117a2c:	aa00009e 	bge	117cac <dns_recv+0x360>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        if (nquestions != 1) {
  117a30:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  117a34:	e3530001 	cmp	r3, #1
  117a38:	1a00009d 	bne	117cb4 <dns_recv+0x368>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
  117a3c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  117a40:	e5932000 	ldr	r2, [r3]
  117a44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117a48:	e5d3300b 	ldrb	r3, [r3, #11]
  117a4c:	e1a01003 	mov	r1, r3
  117a50:	e30e30dc 	movw	r3, #57564	; 0xe0dc
  117a54:	e3403014 	movt	r3, #20
  117a58:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  117a5c:	e1520003 	cmp	r2, r3
  117a60:	1a000095 	bne	117cbc <dns_recv+0x370>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
  117a64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117a68:	e2833010 	add	r3, r3, #16
  117a6c:	e3a0200c 	mov	r2, #12
  117a70:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  117a74:	e1a00003 	mov	r0, r3
  117a78:	ebfffc4a 	bl	116ba8 <dns_compare_name>
  117a7c:	e1a03000 	mov	r3, r0
  117a80:	e14b31b0 	strh	r3, [fp, #-16]
        if (res_idx == 0xFFFF) {
  117a84:	e15b31b0 	ldrh	r3, [fp, #-16]
  117a88:	e30f2fff 	movw	r2, #65535	; 0xffff
  117a8c:	e1530002 	cmp	r3, r2
  117a90:	0a00008b 	beq	117cc4 <dns_recv+0x378>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
  117a94:	e15b31b0 	ldrh	r3, [fp, #-16]
  117a98:	e24b1038 	sub	r1, fp, #56	; 0x38
  117a9c:	e3a02004 	mov	r2, #4
  117aa0:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117aa4:	eb000efd 	bl	11b6a0 <pbuf_copy_partial>
  117aa8:	e1a03000 	mov	r3, r0
  117aac:	e3530004 	cmp	r3, #4
  117ab0:	1a000085 	bne	117ccc <dns_recv+0x380>
          goto memerr; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
  117ab4:	e15b33b6 	ldrh	r3, [fp, #-54]	; 0xffffffca
  117ab8:	e3530c01 	cmp	r3, #256	; 0x100
  117abc:	1a000078 	bne	117ca4 <dns_recv+0x358>
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
          (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
  117ac0:	e15b33b8 	ldrh	r3, [fp, #-56]	; 0xffffffc8
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
  117ac4:	e3530c01 	cmp	r3, #256	; 0x100
  117ac8:	1a000075 	bne	117ca4 <dns_recv+0x358>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        res_idx += SIZEOF_DNS_QUERY;
  117acc:	e15b31b0 	ldrh	r3, [fp, #-16]
  117ad0:	e2833004 	add	r3, r3, #4
  117ad4:	e14b31b0 	strh	r3, [fp, #-16]

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
  117ad8:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  117adc:	e203300f 	and	r3, r3, #15
  117ae0:	e3530000 	cmp	r3, #0
  117ae4:	1a000055 	bne	117c40 <dns_recv+0x2f4>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  117ae8:	ea00004c 	b	117c20 <dns_recv+0x2d4>
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
  117aec:	e15b31b0 	ldrh	r3, [fp, #-16]
  117af0:	e1a01003 	mov	r1, r3
  117af4:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117af8:	ebfffc79 	bl	116ce4 <dns_skip_name>
  117afc:	e1a03000 	mov	r3, r0
  117b00:	e14b31b0 	strh	r3, [fp, #-16]
            if (res_idx == 0xFFFF) {
  117b04:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b08:	e30f2fff 	movw	r2, #65535	; 0xffff
  117b0c:	e1530002 	cmp	r3, r2
  117b10:	0a00006f 	beq	117cd4 <dns_recv+0x388>
              goto memerr; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
  117b14:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b18:	e24b1034 	sub	r1, fp, #52	; 0x34
  117b1c:	e3a0200a 	mov	r2, #10
  117b20:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117b24:	eb000edd 	bl	11b6a0 <pbuf_copy_partial>
  117b28:	e1a03000 	mov	r3, r0
  117b2c:	e353000a 	cmp	r3, #10
  117b30:	1a000069 	bne	117cdc <dns_recv+0x390>
              goto memerr; /* ignore this packet */
            }
            res_idx += SIZEOF_DNS_ANSWER;
  117b34:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b38:	e283300a 	add	r3, r3, #10
  117b3c:	e14b31b0 	strh	r3, [fp, #-16]

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
  117b40:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  117b44:	e3530c01 	cmp	r3, #256	; 0x100
  117b48:	1a000021 	bne	117bd4 <dns_recv+0x288>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
  117b4c:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  117b50:	e3530c01 	cmp	r3, #256	; 0x100
  117b54:	1a00001e 	bne	117bd4 <dns_recv+0x288>
  117b58:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117b5c:	e3530b01 	cmp	r3, #1024	; 0x400
  117b60:	1a00001b 	bne	117bd4 <dns_recv+0x288>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
  117b64:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b68:	e24b103c 	sub	r1, fp, #60	; 0x3c
  117b6c:	e3a02004 	mov	r2, #4
  117b70:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117b74:	eb000ec9 	bl	11b6a0 <pbuf_copy_partial>
  117b78:	e1a03000 	mov	r3, r0
  117b7c:	e3530004 	cmp	r3, #4
  117b80:	1a000057 	bne	117ce4 <dns_recv+0x398>
                    goto memerr; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
  117b84:	e55b100d 	ldrb	r1, [fp, #-13]
  117b88:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  117b8c:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  117b90:	e3403014 	movt	r3, #20
  117b94:	e3a00e11 	mov	r0, #272	; 0x110
  117b98:	e0010190 	mul	r1, r0, r1
  117b9c:	e0833001 	add	r3, r3, r1
  117ba0:	e2833004 	add	r3, r3, #4
  117ba4:	e5832000 	str	r2, [r3]
                  pbuf_free(p);
  117ba8:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117bac:	eb000cb0 	bl	11ae74 <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
  117bb0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  117bb4:	e1a00003 	mov	r0, r3
  117bb8:	ebfffa82 	bl	1165c8 <lwip_htonl>
  117bbc:	e1a02000 	mov	r2, r0
  117bc0:	e55b300d 	ldrb	r3, [fp, #-13]
  117bc4:	e1a01002 	mov	r1, r2
  117bc8:	e1a00003 	mov	r0, r3
  117bcc:	ebffff2d 	bl	117888 <dns_correct_response>
  117bd0:	ea000049 	b	117cfc <dns_recv+0x3b0>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
  117bd4:	e15b41b0 	ldrh	r4, [fp, #-16]
  117bd8:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117bdc:	e1a00003 	mov	r0, r3
  117be0:	ebfffa6c 	bl	116598 <lwip_htons>
  117be4:	e1a03000 	mov	r3, r0
  117be8:	e0843003 	add	r3, r4, r3
  117bec:	e3530801 	cmp	r3, #65536	; 0x10000
  117bf0:	aa00003d 	bge	117cec <dns_recv+0x3a0>
              goto memerr; /* ignore this packet */
            }
            res_idx += lwip_htons(ans.len);
  117bf4:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117bf8:	e1a00003 	mov	r0, r3
  117bfc:	ebfffa65 	bl	116598 <lwip_htons>
  117c00:	e1a03000 	mov	r3, r0
  117c04:	e1a02003 	mov	r2, r3
  117c08:	e15b31b0 	ldrh	r3, [fp, #-16]
  117c0c:	e0823003 	add	r3, r2, r3
  117c10:	e14b31b0 	strh	r3, [fp, #-16]
            --nanswers;
  117c14:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  117c18:	e2433001 	sub	r3, r3, #1
  117c1c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  117c20:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  117c24:	e3530000 	cmp	r3, #0
  117c28:	0a000004 	beq	117c40 <dns_recv+0x2f4>
  117c2c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  117c30:	e1d330b8 	ldrh	r3, [r3, #8]
  117c34:	e15b21b0 	ldrh	r2, [fp, #-16]
  117c38:	e1520003 	cmp	r2, r3
  117c3c:	3affffaa 	bcc	117aec <dns_recv+0x1a0>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
  117c40:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117c44:	eb000c8a 	bl	11ae74 <pbuf_free>
        dns_call_found(i, NULL);
  117c48:	e55b300d 	ldrb	r3, [fp, #-13]
  117c4c:	e3a01000 	mov	r1, #0
  117c50:	e1a00003 	mov	r0, r3
  117c54:	ebfffd90 	bl	11729c <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
  117c58:	e55b200d 	ldrb	r2, [fp, #-13]
  117c5c:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  117c60:	e3403014 	movt	r3, #20
  117c64:	e3a01e11 	mov	r1, #272	; 0x110
  117c68:	e0020291 	mul	r2, r1, r2
  117c6c:	e0833002 	add	r3, r3, r2
  117c70:	e283300a 	add	r3, r3, #10
  117c74:	e3a02000 	mov	r2, #0
  117c78:	e5c32000 	strb	r2, [r3]
        return;
  117c7c:	ea00001e 	b	117cfc <dns_recv+0x3b0>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117c80:	e55b300d 	ldrb	r3, [fp, #-13]
  117c84:	e2833001 	add	r3, r3, #1
  117c88:	e54b300d 	strb	r3, [fp, #-13]
  117c8c:	e55b300d 	ldrb	r3, [fp, #-13]
  117c90:	e3530003 	cmp	r3, #3
  117c94:	9affff47 	bls	1179b8 <dns_recv+0x6c>
      }
    }
  }

memerr:
  117c98:	ea000001 	b	117ca4 <dns_recv+0x358>
    goto memerr;
  117c9c:	e320f000 	nop	{0}
  117ca0:	ea000012 	b	117cf0 <dns_recv+0x3a4>
memerr:
  117ca4:	e320f000 	nop	{0}
  117ca8:	ea000010 	b	117cf0 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117cac:	e320f000 	nop	{0}
  117cb0:	ea00000e 	b	117cf0 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117cb4:	e320f000 	nop	{0}
  117cb8:	ea00000c 	b	117cf0 <dns_recv+0x3a4>
            goto memerr; /* ignore this packet */
  117cbc:	e320f000 	nop	{0}
  117cc0:	ea00000a 	b	117cf0 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117cc4:	e320f000 	nop	{0}
  117cc8:	ea000008 	b	117cf0 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117ccc:	e320f000 	nop	{0}
  117cd0:	ea000006 	b	117cf0 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117cd4:	e320f000 	nop	{0}
  117cd8:	ea000004 	b	117cf0 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117cdc:	e320f000 	nop	{0}
  117ce0:	ea000002 	b	117cf0 <dns_recv+0x3a4>
                    goto memerr; /* ignore this packet */
  117ce4:	e320f000 	nop	{0}
  117ce8:	ea000000 	b	117cf0 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117cec:	e320f000 	nop	{0}
  /* deallocate memory and return */
  pbuf_free(p);
  117cf0:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117cf4:	eb000c5e 	bl	11ae74 <pbuf_free>
  return;
  117cf8:	e320f000 	nop	{0}
}
  117cfc:	e24bd008 	sub	sp, fp, #8
  117d00:	e8bd8810 	pop	{r4, fp, pc}

00117d04 <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
  117d04:	e92d4800 	push	{fp, lr}
  117d08:	e28db004 	add	fp, sp, #4
  117d0c:	e24dd028 	sub	sp, sp, #40	; 0x28
  117d10:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  117d14:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  117d18:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  117d1c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
  117d20:	e3a03000 	mov	r3, #0
  117d24:	e50b300c 	str	r3, [fp, #-12]
  struct dns_req_entry* req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117d28:	e3a03000 	mov	r3, #0
  117d2c:	e54b3005 	strb	r3, [fp, #-5]
  117d30:	ea000048 	b	117e58 <dns_enqueue+0x154>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117d34:	e55b2005 	ldrb	r2, [fp, #-5]
  117d38:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  117d3c:	e3403014 	movt	r3, #20
  117d40:	e3a01e11 	mov	r1, #272	; 0x110
  117d44:	e0020291 	mul	r2, r1, r2
  117d48:	e0833002 	add	r3, r3, r2
  117d4c:	e283300a 	add	r3, r3, #10
  117d50:	e5d33000 	ldrb	r3, [r3]
  117d54:	e3530002 	cmp	r3, #2
  117d58:	1a00003b 	bne	117e4c <dns_enqueue+0x148>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
  117d5c:	e55b3005 	ldrb	r3, [fp, #-5]
  117d60:	e3a02e11 	mov	r2, #272	; 0x110
  117d64:	e0030392 	mul	r3, r2, r3
  117d68:	e2832010 	add	r2, r3, #16
  117d6c:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  117d70:	e3403014 	movt	r3, #20
  117d74:	e0823003 	add	r3, r2, r3
  117d78:	e3a02c01 	mov	r2, #256	; 0x100
  117d7c:	e1a01003 	mov	r1, r3
  117d80:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  117d84:	ebfffa87 	bl	1167a8 <lwip_strnicmp>
  117d88:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117d8c:	e3530000 	cmp	r3, #0
  117d90:	1a00002d 	bne	117e4c <dns_enqueue+0x148>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117d94:	e3a03000 	mov	r3, #0
  117d98:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117d9c:	ea000027 	b	117e40 <dns_enqueue+0x13c>
        if (dns_requests[r].found == 0) {
  117da0:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117da4:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  117da8:	e3403014 	movt	r3, #20
  117dac:	e3a0100c 	mov	r1, #12
  117db0:	e0020291 	mul	r2, r1, r2
  117db4:	e0833002 	add	r3, r3, r2
  117db8:	e5933000 	ldr	r3, [r3]
  117dbc:	e3530000 	cmp	r3, #0
  117dc0:	1a00001b 	bne	117e34 <dns_enqueue+0x130>
          dns_requests[r].found = found;
  117dc4:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117dc8:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  117dcc:	e3403014 	movt	r3, #20
  117dd0:	e3a0100c 	mov	r1, #12
  117dd4:	e0020291 	mul	r2, r1, r2
  117dd8:	e0833002 	add	r3, r3, r2
  117ddc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  117de0:	e5832000 	str	r2, [r3]
          dns_requests[r].arg = callback_arg;
  117de4:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117de8:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  117dec:	e3403014 	movt	r3, #20
  117df0:	e3a0100c 	mov	r1, #12
  117df4:	e0020291 	mul	r2, r1, r2
  117df8:	e0833002 	add	r3, r3, r2
  117dfc:	e2833004 	add	r3, r3, #4
  117e00:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  117e04:	e5832000 	str	r2, [r3]
          dns_requests[r].dns_table_idx = i;
  117e08:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117e0c:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  117e10:	e3403014 	movt	r3, #20
  117e14:	e3a0100c 	mov	r1, #12
  117e18:	e0020291 	mul	r2, r1, r2
  117e1c:	e0833002 	add	r3, r3, r2
  117e20:	e2833008 	add	r3, r3, #8
  117e24:	e55b2005 	ldrb	r2, [fp, #-5]
  117e28:	e5c32000 	strb	r2, [r3]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
  117e2c:	e3e03004 	mvn	r3, #4
  117e30:	ea0000b3 	b	118104 <dns_enqueue+0x400>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117e34:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117e38:	e2833001 	add	r3, r3, #1
  117e3c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117e40:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117e44:	e3530003 	cmp	r3, #3
  117e48:	9affffd4 	bls	117da0 <dns_enqueue+0x9c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117e4c:	e55b3005 	ldrb	r3, [fp, #-5]
  117e50:	e2833001 	add	r3, r3, #1
  117e54:	e54b3005 	strb	r3, [fp, #-5]
  117e58:	e55b3005 	ldrb	r3, [fp, #-5]
  117e5c:	e3530003 	cmp	r3, #3
  117e60:	9affffb3 	bls	117d34 <dns_enqueue+0x30>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
  117e64:	e3a03000 	mov	r3, #0
  117e68:	e54b3006 	strb	r3, [fp, #-6]
  lseqi = DNS_TABLE_SIZE;
  117e6c:	e3a03004 	mov	r3, #4
  117e70:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117e74:	e3a03000 	mov	r3, #0
  117e78:	e54b3005 	strb	r3, [fp, #-5]
  117e7c:	ea000020 	b	117f04 <dns_enqueue+0x200>
    entry = &dns_table[i];
  117e80:	e55b3005 	ldrb	r3, [fp, #-5]
  117e84:	e3a02e11 	mov	r2, #272	; 0x110
  117e88:	e0020392 	mul	r2, r2, r3
  117e8c:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  117e90:	e3403014 	movt	r3, #20
  117e94:	e0823003 	add	r3, r2, r3
  117e98:	e50b300c 	str	r3, [fp, #-12]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
  117e9c:	e51b300c 	ldr	r3, [fp, #-12]
  117ea0:	e5d3300a 	ldrb	r3, [r3, #10]
  117ea4:	e3530000 	cmp	r3, #0
  117ea8:	0a000019 	beq	117f14 <dns_enqueue+0x210>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
  117eac:	e51b300c 	ldr	r3, [fp, #-12]
  117eb0:	e5d3300a 	ldrb	r3, [r3, #10]
  117eb4:	e3530003 	cmp	r3, #3
  117eb8:	1a00000e 	bne	117ef8 <dns_enqueue+0x1f4>
      u8_t age = dns_seqno - entry->seqno;
  117ebc:	e30d3c69 	movw	r3, #56425	; 0xdc69
  117ec0:	e3403014 	movt	r3, #20
  117ec4:	e5d32000 	ldrb	r2, [r3]
  117ec8:	e51b300c 	ldr	r3, [fp, #-12]
  117ecc:	e5d3300e 	ldrb	r3, [r3, #14]
  117ed0:	e0423003 	sub	r3, r2, r3
  117ed4:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
      if (age > lseq) {
  117ed8:	e55b2012 	ldrb	r2, [fp, #-18]	; 0xffffffee
  117edc:	e55b3006 	ldrb	r3, [fp, #-6]
  117ee0:	e1520003 	cmp	r2, r3
  117ee4:	9a000003 	bls	117ef8 <dns_enqueue+0x1f4>
        lseq = age;
  117ee8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  117eec:	e54b3006 	strb	r3, [fp, #-6]
        lseqi = i;
  117ef0:	e55b3005 	ldrb	r3, [fp, #-5]
  117ef4:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117ef8:	e55b3005 	ldrb	r3, [fp, #-5]
  117efc:	e2833001 	add	r3, r3, #1
  117f00:	e54b3005 	strb	r3, [fp, #-5]
  117f04:	e55b3005 	ldrb	r3, [fp, #-5]
  117f08:	e3530003 	cmp	r3, #3
  117f0c:	9affffdb 	bls	117e80 <dns_enqueue+0x17c>
  117f10:	ea000000 	b	117f18 <dns_enqueue+0x214>
      break;
  117f14:	e320f000 	nop	{0}
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
  117f18:	e55b3005 	ldrb	r3, [fp, #-5]
  117f1c:	e3530004 	cmp	r3, #4
  117f20:	1a000017 	bne	117f84 <dns_enqueue+0x280>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
  117f24:	e55b3007 	ldrb	r3, [fp, #-7]
  117f28:	e3530003 	cmp	r3, #3
  117f2c:	8a000009 	bhi	117f58 <dns_enqueue+0x254>
  117f30:	e55b2007 	ldrb	r2, [fp, #-7]
  117f34:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  117f38:	e3403014 	movt	r3, #20
  117f3c:	e3a01e11 	mov	r1, #272	; 0x110
  117f40:	e0020291 	mul	r2, r1, r2
  117f44:	e0833002 	add	r3, r3, r2
  117f48:	e283300a 	add	r3, r3, #10
  117f4c:	e5d33000 	ldrb	r3, [r3]
  117f50:	e3530003 	cmp	r3, #3
  117f54:	0a000001 	beq	117f60 <dns_enqueue+0x25c>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
  117f58:	e3e03000 	mvn	r3, #0
  117f5c:	ea000068 	b	118104 <dns_enqueue+0x400>
    } else {
      /* use the oldest completed one */
      i = lseqi;
  117f60:	e55b3007 	ldrb	r3, [fp, #-7]
  117f64:	e54b3005 	strb	r3, [fp, #-5]
      entry = &dns_table[i];
  117f68:	e55b3005 	ldrb	r3, [fp, #-5]
  117f6c:	e3a02e11 	mov	r2, #272	; 0x110
  117f70:	e0020392 	mul	r2, r2, r3
  117f74:	e30d3c6c 	movw	r3, #56428	; 0xdc6c
  117f78:	e3403014 	movt	r3, #20
  117f7c:	e0823003 	add	r3, r2, r3
  117f80:	e50b300c 	str	r3, [fp, #-12]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
  117f84:	e3a03000 	mov	r3, #0
  117f88:	e50b3010 	str	r3, [fp, #-16]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117f8c:	e3a03000 	mov	r3, #0
  117f90:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117f94:	ea000013 	b	117fe8 <dns_enqueue+0x2e4>
    if (dns_requests[r].found == NULL) {
  117f98:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117f9c:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  117fa0:	e3403014 	movt	r3, #20
  117fa4:	e3a0100c 	mov	r1, #12
  117fa8:	e0020291 	mul	r2, r1, r2
  117fac:	e0833002 	add	r3, r3, r2
  117fb0:	e5933000 	ldr	r3, [r3]
  117fb4:	e3530000 	cmp	r3, #0
  117fb8:	1a000007 	bne	117fdc <dns_enqueue+0x2d8>
      req = &dns_requests[r];
  117fbc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117fc0:	e3a0200c 	mov	r2, #12
  117fc4:	e0020392 	mul	r2, r2, r3
  117fc8:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  117fcc:	e3403014 	movt	r3, #20
  117fd0:	e0823003 	add	r3, r2, r3
  117fd4:	e50b3010 	str	r3, [fp, #-16]
      break;
  117fd8:	ea000005 	b	117ff4 <dns_enqueue+0x2f0>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117fdc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117fe0:	e2833001 	add	r3, r3, #1
  117fe4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117fe8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117fec:	e3530003 	cmp	r3, #3
  117ff0:	9affffe8 	bls	117f98 <dns_enqueue+0x294>
    }
  }
  if (req == NULL) {
  117ff4:	e51b3010 	ldr	r3, [fp, #-16]
  117ff8:	e3530000 	cmp	r3, #0
  117ffc:	1a000001 	bne	118008 <dns_enqueue+0x304>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
  118000:	e3e03000 	mvn	r3, #0
  118004:	ea00003e 	b	118104 <dns_enqueue+0x400>
  }
  req->dns_table_idx = i;
  118008:	e51b3010 	ldr	r3, [fp, #-16]
  11800c:	e55b2005 	ldrb	r2, [fp, #-5]
  118010:	e5c32008 	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
  118014:	e51b300c 	ldr	r3, [fp, #-12]
  118018:	e3a02001 	mov	r2, #1
  11801c:	e5c3200a 	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
  118020:	e30d3c69 	movw	r3, #56425	; 0xdc69
  118024:	e3403014 	movt	r3, #20
  118028:	e5d32000 	ldrb	r2, [r3]
  11802c:	e51b300c 	ldr	r3, [fp, #-12]
  118030:	e5c3200e 	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
  118034:	e51b3010 	ldr	r3, [fp, #-16]
  118038:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11803c:	e5832000 	str	r2, [r3]
  req->arg   = callback_arg;
  118040:	e51b3010 	ldr	r3, [fp, #-16]
  118044:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  118048:	e5832004 	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH-1);
  11804c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118050:	e35300ff 	cmp	r3, #255	; 0xff
  118054:	31a03003 	movcc	r3, r3
  118058:	23a030ff 	movcs	r3, #255	; 0xff
  11805c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  MEMCPY(entry->name, name, namelen);
  118060:	e51b300c 	ldr	r3, [fp, #-12]
  118064:	e2833010 	add	r3, r3, #16
  118068:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11806c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  118070:	e1a00003 	mov	r0, r3
  118074:	eb00a338 	bl	140d5c <memcpy>
  entry->name[namelen] = 0;
  118078:	e51b200c 	ldr	r2, [fp, #-12]
  11807c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118080:	e0823003 	add	r3, r2, r3
  118084:	e2833010 	add	r3, r3, #16
  118088:	e3a02000 	mov	r2, #0
  11808c:	e5c32000 	strb	r2, [r3]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
  118090:	ebfffc32 	bl	117160 <dns_alloc_pcb>
  118094:	e1a03000 	mov	r3, r0
  118098:	e1a02003 	mov	r2, r3
  11809c:	e51b300c 	ldr	r3, [fp, #-12]
  1180a0:	e5c3200f 	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
  1180a4:	e51b300c 	ldr	r3, [fp, #-12]
  1180a8:	e5d3300f 	ldrb	r3, [r3, #15]
  1180ac:	e3530003 	cmp	r3, #3
  1180b0:	9a000007 	bls	1180d4 <dns_enqueue+0x3d0>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
  1180b4:	e51b300c 	ldr	r3, [fp, #-12]
  1180b8:	e3a02000 	mov	r2, #0
  1180bc:	e5c3200a 	strb	r2, [r3, #10]
    req->found = NULL;
  1180c0:	e51b3010 	ldr	r3, [fp, #-16]
  1180c4:	e3a02000 	mov	r2, #0
  1180c8:	e5832000 	str	r2, [r3]
    return ERR_MEM;
  1180cc:	e3e03000 	mvn	r3, #0
  1180d0:	ea00000b 	b	118104 <dns_enqueue+0x400>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
  1180d4:	e30d3c69 	movw	r3, #56425	; 0xdc69
  1180d8:	e3403014 	movt	r3, #20
  1180dc:	e5d33000 	ldrb	r3, [r3]
  1180e0:	e2833001 	add	r3, r3, #1
  1180e4:	e6ef2073 	uxtb	r2, r3
  1180e8:	e30d3c69 	movw	r3, #56425	; 0xdc69
  1180ec:	e3403014 	movt	r3, #20
  1180f0:	e5c32000 	strb	r2, [r3]

  /* force to send query without waiting timer */
  dns_check_entry(i);
  1180f4:	e55b3005 	ldrb	r3, [fp, #-5]
  1180f8:	e1a00003 	mov	r0, r3
  1180fc:	ebfffd38 	bl	1175e4 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
  118100:	e3e03004 	mvn	r3, #4
}
  118104:	e1a00003 	mov	r0, r3
  118108:	e24bd004 	sub	sp, fp, #4
  11810c:	e8bd8800 	pop	{fp, pc}

00118110 <dns_gethostbyname>:
 * @return a err_t return code.
 */
err_t
dns_gethostbyname(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                  void *callback_arg)
{
  118110:	e92d4800 	push	{fp, lr}
  118114:	e28db004 	add	fp, sp, #4
  118118:	e24dd018 	sub	sp, sp, #24
  11811c:	e50b0008 	str	r0, [fp, #-8]
  118120:	e50b100c 	str	r1, [fp, #-12]
  118124:	e50b2010 	str	r2, [fp, #-16]
  118128:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
  11812c:	e3a03000 	mov	r3, #0
  118130:	e58d3000 	str	r3, [sp]
  118134:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118138:	e51b2010 	ldr	r2, [fp, #-16]
  11813c:	e51b100c 	ldr	r1, [fp, #-12]
  118140:	e51b0008 	ldr	r0, [fp, #-8]
  118144:	eb000003 	bl	118158 <dns_gethostbyname_addrtype>
  118148:	e1a03000 	mov	r3, r0
}
  11814c:	e1a00003 	mov	r0, r3
  118150:	e24bd004 	sub	sp, fp, #4
  118154:	e8bd8800 	pop	{fp, pc}

00118158 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
  118158:	e92d4800 	push	{fp, lr}
  11815c:	e28db004 	add	fp, sp, #4
  118160:	e24dd018 	sub	sp, sp, #24
  118164:	e50b0010 	str	r0, [fp, #-16]
  118168:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11816c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  118170:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
  118174:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118178:	e3530000 	cmp	r3, #0
  11817c:	0a000006 	beq	11819c <dns_gethostbyname_addrtype+0x44>
  118180:	e51b3010 	ldr	r3, [fp, #-16]
  118184:	e3530000 	cmp	r3, #0
  118188:	0a000003 	beq	11819c <dns_gethostbyname_addrtype+0x44>
      (!hostname) || (!hostname[0])) {
  11818c:	e51b3010 	ldr	r3, [fp, #-16]
  118190:	e5d33000 	ldrb	r3, [r3]
  118194:	e3530000 	cmp	r3, #0
  118198:	1a000001 	bne	1181a4 <dns_gethostbyname_addrtype+0x4c>
    return ERR_ARG;
  11819c:	e3e0300f 	mvn	r3, #15
  1181a0:	ea000024 	b	118238 <dns_gethostbyname_addrtype+0xe0>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
  1181a4:	e51b0010 	ldr	r0, [fp, #-16]
  1181a8:	eb00a4b4 	bl	141480 <strlen>
  1181ac:	e50b0008 	str	r0, [fp, #-8]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
  1181b0:	e51b3008 	ldr	r3, [fp, #-8]
  1181b4:	e35300ff 	cmp	r3, #255	; 0xff
  1181b8:	9a000001 	bls	1181c4 <dns_gethostbyname_addrtype+0x6c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
  1181bc:	e3e0300f 	mvn	r3, #15
  1181c0:	ea00001c 	b	118238 <dns_gethostbyname_addrtype+0xe0>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
  1181c4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1181c8:	e51b0010 	ldr	r0, [fp, #-16]
  1181cc:	eb006936 	bl	1326ac <ip4addr_aton>
  1181d0:	e1a03000 	mov	r3, r0
  1181d4:	e3530000 	cmp	r3, #0
  1181d8:	0a000001 	beq	1181e4 <dns_gethostbyname_addrtype+0x8c>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
  1181dc:	e3a03000 	mov	r3, #0
  1181e0:	ea000014 	b	118238 <dns_gethostbyname_addrtype+0xe0>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
  1181e4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1181e8:	e51b0010 	ldr	r0, [fp, #-16]
  1181ec:	ebfffa34 	bl	116ac4 <dns_lookup>
  1181f0:	e1a03000 	mov	r3, r0
  1181f4:	e3530000 	cmp	r3, #0
  1181f8:	1a000001 	bne	118204 <dns_gethostbyname_addrtype+0xac>
    return ERR_OK;
  1181fc:	e3a03000 	mov	r3, #0
  118200:	ea00000c 	b	118238 <dns_gethostbyname_addrtype+0xe0>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
  118204:	e30e30dc 	movw	r3, #57564	; 0xe0dc
  118208:	e3403014 	movt	r3, #20
  11820c:	e5933000 	ldr	r3, [r3]
  118210:	e3530000 	cmp	r3, #0
  118214:	1a000001 	bne	118220 <dns_gethostbyname_addrtype+0xc8>
      return ERR_VAL;
  118218:	e3e03005 	mvn	r3, #5
  11821c:	ea000005 	b	118238 <dns_gethostbyname_addrtype+0xe0>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
  118220:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  118224:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118228:	e51b1008 	ldr	r1, [fp, #-8]
  11822c:	e51b0010 	ldr	r0, [fp, #-16]
  118230:	ebfffeb3 	bl	117d04 <dns_enqueue>
  118234:	e1a03000 	mov	r3, r0
     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
  118238:	e1a00003 	mov	r0, r3
  11823c:	e24bd004 	sub	sp, fp, #4
  118240:	e8bd8800 	pop	{fp, pc}

00118244 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  118244:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  118248:	e28db000 	add	fp, sp, #0
  11824c:	e24dd024 	sub	sp, sp, #36	; 0x24
  118250:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  118254:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  const u8_t *pb = (const u8_t *)dataptr;
  118258:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11825c:	e50b3008 	str	r3, [fp, #-8]
  const u16_t *ps;
  u16_t t = 0;
  118260:	e3a03000 	mov	r3, #0
  118264:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t sum = 0;
  118268:	e3a03000 	mov	r3, #0
  11826c:	e50b3010 	str	r3, [fp, #-16]
  int odd = ((mem_ptr_t)pb & 1);
  118270:	e51b3008 	ldr	r3, [fp, #-8]
  118274:	e2033001 	and	r3, r3, #1
  118278:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  11827c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118280:	e3530000 	cmp	r3, #0
  118284:	0a00000c 	beq	1182bc <lwip_standard_chksum+0x78>
  118288:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11828c:	e3530000 	cmp	r3, #0
  118290:	da000009 	ble	1182bc <lwip_standard_chksum+0x78>
    ((u8_t *)&t)[1] = *pb++;
  118294:	e51b2008 	ldr	r2, [fp, #-8]
  118298:	e2823001 	add	r3, r2, #1
  11829c:	e50b3008 	str	r3, [fp, #-8]
  1182a0:	e24b3016 	sub	r3, fp, #22
  1182a4:	e2833001 	add	r3, r3, #1
  1182a8:	e5d22000 	ldrb	r2, [r2]
  1182ac:	e5c32000 	strb	r2, [r3]
    len--;
  1182b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1182b4:	e2433001 	sub	r3, r3, #1
  1182b8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  1182bc:	e51b3008 	ldr	r3, [fp, #-8]
  1182c0:	e50b300c 	str	r3, [fp, #-12]
  while (len > 1) {
  1182c4:	ea00000a 	b	1182f4 <lwip_standard_chksum+0xb0>
    sum += *ps++;
  1182c8:	e51b300c 	ldr	r3, [fp, #-12]
  1182cc:	e2832002 	add	r2, r3, #2
  1182d0:	e50b200c 	str	r2, [fp, #-12]
  1182d4:	e1d330b0 	ldrh	r3, [r3]
  1182d8:	e1a02003 	mov	r2, r3
  1182dc:	e51b3010 	ldr	r3, [fp, #-16]
  1182e0:	e0833002 	add	r3, r3, r2
  1182e4:	e50b3010 	str	r3, [fp, #-16]
    len -= 2;
  1182e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1182ec:	e2433002 	sub	r3, r3, #2
  1182f0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  while (len > 1) {
  1182f4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1182f8:	e3530001 	cmp	r3, #1
  1182fc:	cafffff1 	bgt	1182c8 <lwip_standard_chksum+0x84>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  118300:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118304:	e3530000 	cmp	r3, #0
  118308:	da000003 	ble	11831c <lwip_standard_chksum+0xd8>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
  11830c:	e24b3016 	sub	r3, fp, #22
  118310:	e51b200c 	ldr	r2, [fp, #-12]
  118314:	e5d22000 	ldrb	r2, [r2]
  118318:	e5c32000 	strb	r2, [r3]
  }

  /* Add end bytes */
  sum += t;
  11831c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118320:	e1a02003 	mov	r2, r3
  118324:	e51b3010 	ldr	r3, [fp, #-16]
  118328:	e0833002 	add	r3, r3, r2
  11832c:	e50b3010 	str	r3, [fp, #-16]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
  118330:	e51b3010 	ldr	r3, [fp, #-16]
  118334:	e1a02823 	lsr	r2, r3, #16
  118338:	e51b3010 	ldr	r3, [fp, #-16]
  11833c:	e6ff3073 	uxth	r3, r3
  118340:	e0823003 	add	r3, r2, r3
  118344:	e50b3010 	str	r3, [fp, #-16]
  sum = FOLD_U32T(sum);
  118348:	e51b3010 	ldr	r3, [fp, #-16]
  11834c:	e1a02823 	lsr	r2, r3, #16
  118350:	e51b3010 	ldr	r3, [fp, #-16]
  118354:	e6ff3073 	uxth	r3, r3
  118358:	e0823003 	add	r3, r2, r3
  11835c:	e50b3010 	str	r3, [fp, #-16]

  /* Swap if alignment was odd */
  if (odd) {
  118360:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118364:	e3530000 	cmp	r3, #0
  118368:	0a000007 	beq	11838c <lwip_standard_chksum+0x148>
    sum = SWAP_BYTES_IN_WORD(sum);
  11836c:	e51b3010 	ldr	r3, [fp, #-16]
  118370:	e1a03403 	lsl	r3, r3, #8
  118374:	e6ff2073 	uxth	r2, r3
  118378:	e51b3010 	ldr	r3, [fp, #-16]
  11837c:	e1a03423 	lsr	r3, r3, #8
  118380:	e6ef3073 	uxtb	r3, r3
  118384:	e1823003 	orr	r3, r2, r3
  118388:	e50b3010 	str	r3, [fp, #-16]
  }

  return (u16_t)sum;
  11838c:	e51b3010 	ldr	r3, [fp, #-16]
  118390:	e6ff3073 	uxth	r3, r3
}
  118394:	e1a00003 	mov	r0, r3
  118398:	e28bd000 	add	sp, fp, #0
  11839c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1183a0:	e12fff1e 	bx	lr

001183a4 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
  1183a4:	e92d4800 	push	{fp, lr}
  1183a8:	e28db004 	add	fp, sp, #4
  1183ac:	e24dd018 	sub	sp, sp, #24
  1183b0:	e50b0010 	str	r0, [fp, #-16]
  1183b4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1183b8:	e1a03001 	mov	r3, r1
  1183bc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  1183c0:	e1a03002 	mov	r3, r2
  1183c4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  u8_t swapped = 0;
  1183c8:	e3a03000 	mov	r3, #0
  1183cc:	e54b3009 	strb	r3, [fp, #-9]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
  1183d0:	e51b3010 	ldr	r3, [fp, #-16]
  1183d4:	e50b3008 	str	r3, [fp, #-8]
  1183d8:	ea000025 	b	118474 <inet_cksum_pseudo_base+0xd0>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  1183dc:	e51b3008 	ldr	r3, [fp, #-8]
  1183e0:	e5932004 	ldr	r2, [r3, #4]
  1183e4:	e51b3008 	ldr	r3, [fp, #-8]
  1183e8:	e1d330ba 	ldrh	r3, [r3, #10]
  1183ec:	e1a01003 	mov	r1, r3
  1183f0:	e1a00002 	mov	r0, r2
  1183f4:	ebffff92 	bl	118244 <lwip_standard_chksum>
  1183f8:	e1a03000 	mov	r3, r0
  1183fc:	e1a02003 	mov	r2, r3
  118400:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118404:	e0833002 	add	r3, r3, r2
  118408:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  11840c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118410:	e1a02823 	lsr	r2, r3, #16
  118414:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118418:	e6ff3073 	uxth	r3, r3
  11841c:	e0823003 	add	r3, r2, r3
  118420:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (q->len % 2 != 0) {
  118424:	e51b3008 	ldr	r3, [fp, #-8]
  118428:	e1d330ba 	ldrh	r3, [r3, #10]
  11842c:	e2033001 	and	r3, r3, #1
  118430:	e6ff3073 	uxth	r3, r3
  118434:	e3530000 	cmp	r3, #0
  118438:	0a00000a 	beq	118468 <inet_cksum_pseudo_base+0xc4>
      swapped = 1 - swapped;
  11843c:	e55b3009 	ldrb	r3, [fp, #-9]
  118440:	e2633001 	rsb	r3, r3, #1
  118444:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  118448:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11844c:	e1a03403 	lsl	r3, r3, #8
  118450:	e6ff2073 	uxth	r2, r3
  118454:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118458:	e1a03423 	lsr	r3, r3, #8
  11845c:	e6ef3073 	uxtb	r3, r3
  118460:	e1823003 	orr	r3, r2, r3
  118464:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  for (q = p; q != NULL; q = q->next) {
  118468:	e51b3008 	ldr	r3, [fp, #-8]
  11846c:	e5933000 	ldr	r3, [r3]
  118470:	e50b3008 	str	r3, [fp, #-8]
  118474:	e51b3008 	ldr	r3, [fp, #-8]
  118478:	e3530000 	cmp	r3, #0
  11847c:	1affffd6 	bne	1183dc <inet_cksum_pseudo_base+0x38>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  118480:	e55b3009 	ldrb	r3, [fp, #-9]
  118484:	e3530000 	cmp	r3, #0
  118488:	0a000007 	beq	1184ac <inet_cksum_pseudo_base+0x108>
    acc = SWAP_BYTES_IN_WORD(acc);
  11848c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118490:	e1a03403 	lsl	r3, r3, #8
  118494:	e6ff2073 	uxth	r2, r3
  118498:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11849c:	e1a03423 	lsr	r3, r3, #8
  1184a0:	e6ef3073 	uxtb	r3, r3
  1184a4:	e1823003 	orr	r3, r2, r3
  1184a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  1184ac:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1184b0:	e6ff3073 	uxth	r3, r3
  1184b4:	e1a00003 	mov	r0, r3
  1184b8:	ebfff836 	bl	116598 <lwip_htons>
  1184bc:	e1a03000 	mov	r3, r0
  1184c0:	e1a02003 	mov	r2, r3
  1184c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1184c8:	e0833002 	add	r3, r3, r2
  1184cc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc += (u32_t)lwip_htons(proto_len);
  1184d0:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  1184d4:	e1a00003 	mov	r0, r3
  1184d8:	ebfff82e 	bl	116598 <lwip_htons>
  1184dc:	e1a03000 	mov	r3, r0
  1184e0:	e1a02003 	mov	r2, r3
  1184e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1184e8:	e0833002 	add	r3, r3, r2
  1184ec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  1184f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1184f4:	e1a02823 	lsr	r2, r3, #16
  1184f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1184fc:	e6ff3073 	uxth	r3, r3
  118500:	e0823003 	add	r3, r2, r3
  118504:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc = FOLD_U32T(acc);
  118508:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11850c:	e1a02823 	lsr	r2, r3, #16
  118510:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118514:	e6ff3073 	uxth	r3, r3
  118518:	e0823003 	add	r3, r2, r3
  11851c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  118520:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118524:	e6ff3073 	uxth	r3, r3
  118528:	e1e03003 	mvn	r3, r3
  11852c:	e6ff3073 	uxth	r3, r3
}
  118530:	e1a00003 	mov	r0, r3
  118534:	e24bd004 	sub	sp, fp, #4
  118538:	e8bd8800 	pop	{fp, pc}

0011853c <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip4_addr_t *src, const ip4_addr_t *dest)
{
  11853c:	e92d4800 	push	{fp, lr}
  118540:	e28db004 	add	fp, sp, #4
  118544:	e24dd018 	sub	sp, sp, #24
  118548:	e50b0010 	str	r0, [fp, #-16]
  11854c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  118550:	e1a03001 	mov	r3, r1
  118554:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118558:	e1a03002 	mov	r3, r2
  11855c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  118560:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118564:	e5933000 	ldr	r3, [r3]
  118568:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  11856c:	e51b3008 	ldr	r3, [fp, #-8]
  118570:	e6ff3073 	uxth	r3, r3
  118574:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  118578:	e51b3008 	ldr	r3, [fp, #-8]
  11857c:	e1a03823 	lsr	r3, r3, #16
  118580:	e51b200c 	ldr	r2, [fp, #-12]
  118584:	e0823003 	add	r3, r2, r3
  118588:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  11858c:	e59b3004 	ldr	r3, [fp, #4]
  118590:	e5933000 	ldr	r3, [r3]
  118594:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  118598:	e51b3008 	ldr	r3, [fp, #-8]
  11859c:	e6ff3073 	uxth	r3, r3
  1185a0:	e51b200c 	ldr	r2, [fp, #-12]
  1185a4:	e0823003 	add	r3, r2, r3
  1185a8:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  1185ac:	e51b3008 	ldr	r3, [fp, #-8]
  1185b0:	e1a03823 	lsr	r3, r3, #16
  1185b4:	e51b200c 	ldr	r2, [fp, #-12]
  1185b8:	e0823003 	add	r3, r2, r3
  1185bc:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  1185c0:	e51b300c 	ldr	r3, [fp, #-12]
  1185c4:	e1a02823 	lsr	r2, r3, #16
  1185c8:	e51b300c 	ldr	r3, [fp, #-12]
  1185cc:	e6ff3073 	uxth	r3, r3
  1185d0:	e0823003 	add	r3, r2, r3
  1185d4:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  1185d8:	e51b300c 	ldr	r3, [fp, #-12]
  1185dc:	e1a02823 	lsr	r2, r3, #16
  1185e0:	e51b300c 	ldr	r3, [fp, #-12]
  1185e4:	e6ff3073 	uxth	r3, r3
  1185e8:	e0823003 	add	r3, r2, r3
  1185ec:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
  1185f0:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  1185f4:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  1185f8:	e51b300c 	ldr	r3, [fp, #-12]
  1185fc:	e51b0010 	ldr	r0, [fp, #-16]
  118600:	ebffff67 	bl	1183a4 <inet_cksum_pseudo_base>
  118604:	e1a03000 	mov	r3, r0
}
  118608:	e1a00003 	mov	r0, r3
  11860c:	e24bd004 	sub	sp, fp, #4
  118610:	e8bd8800 	pop	{fp, pc}

00118614 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip_addr_t *src, const ip_addr_t *dest)
{
  118614:	e92d4800 	push	{fp, lr}
  118618:	e28db004 	add	fp, sp, #4
  11861c:	e24dd018 	sub	sp, sp, #24
  118620:	e50b0008 	str	r0, [fp, #-8]
  118624:	e50b3010 	str	r3, [fp, #-16]
  118628:	e1a03001 	mov	r3, r1
  11862c:	e54b3009 	strb	r3, [fp, #-9]
  118630:	e1a03002 	mov	r3, r2
  118634:	e14b30bc 	strh	r3, [fp, #-12]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  118638:	e15b20bc 	ldrh	r2, [fp, #-12]
  11863c:	e55b1009 	ldrb	r1, [fp, #-9]
  118640:	e59b3004 	ldr	r3, [fp, #4]
  118644:	e58d3000 	str	r3, [sp]
  118648:	e51b3010 	ldr	r3, [fp, #-16]
  11864c:	e51b0008 	ldr	r0, [fp, #-8]
  118650:	ebffffb9 	bl	11853c <inet_chksum_pseudo>
  118654:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  118658:	e1a00003 	mov	r0, r3
  11865c:	e24bd004 	sub	sp, fp, #4
  118660:	e8bd8800 	pop	{fp, pc}

00118664 <inet_cksum_pseudo_partial_base>:

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_partial_base(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, u32_t acc)
{
  118664:	e92d4800 	push	{fp, lr}
  118668:	e28db004 	add	fp, sp, #4
  11866c:	e24dd018 	sub	sp, sp, #24
  118670:	e50b0010 	str	r0, [fp, #-16]
  118674:	e1a00001 	mov	r0, r1
  118678:	e1a01002 	mov	r1, r2
  11867c:	e1a02003 	mov	r2, r3
  118680:	e1a03000 	mov	r3, r0
  118684:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118688:	e1a03001 	mov	r3, r1
  11868c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  118690:	e1a03002 	mov	r3, r2
  118694:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct pbuf *q;
  u8_t swapped = 0;
  118698:	e3a03000 	mov	r3, #0
  11869c:	e54b3009 	strb	r3, [fp, #-9]
  u16_t chklen;

  /* iterate through all pbuf in chain */
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  1186a0:	e51b3010 	ldr	r3, [fp, #-16]
  1186a4:	e50b3008 	str	r3, [fp, #-8]
  1186a8:	ea00003c 	b	1187a0 <inet_cksum_pseudo_partial_base+0x13c>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    chklen = q->len;
  1186ac:	e51b3008 	ldr	r3, [fp, #-8]
  1186b0:	e1d330ba 	ldrh	r3, [r3, #10]
  1186b4:	e14b30bc 	strh	r3, [fp, #-12]
    if (chklen > chksum_len) {
  1186b8:	e15b20bc 	ldrh	r2, [fp, #-12]
  1186bc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1186c0:	e1520003 	cmp	r2, r3
  1186c4:	9a000001 	bls	1186d0 <inet_cksum_pseudo_partial_base+0x6c>
      chklen = chksum_len;
  1186c8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1186cc:	e14b30bc 	strh	r3, [fp, #-12]
    }
    acc += LWIP_CHKSUM(q->payload, chklen);
  1186d0:	e51b3008 	ldr	r3, [fp, #-8]
  1186d4:	e5933004 	ldr	r3, [r3, #4]
  1186d8:	e15b20bc 	ldrh	r2, [fp, #-12]
  1186dc:	e1a01002 	mov	r1, r2
  1186e0:	e1a00003 	mov	r0, r3
  1186e4:	ebfffed6 	bl	118244 <lwip_standard_chksum>
  1186e8:	e1a03000 	mov	r3, r0
  1186ec:	e1a02003 	mov	r2, r3
  1186f0:	e59b3004 	ldr	r3, [fp, #4]
  1186f4:	e0833002 	add	r3, r3, r2
  1186f8:	e58b3004 	str	r3, [fp, #4]
    chksum_len -= chklen;
  1186fc:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  118700:	e15b30bc 	ldrh	r3, [fp, #-12]
  118704:	e0423003 	sub	r3, r2, r3
  118708:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
  11870c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118710:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  118714:	e1530002 	cmp	r3, r2
  118718:	9a000006 	bls	118738 <inet_cksum_pseudo_partial_base+0xd4>
  11871c:	e30700c0 	movw	r0, #28864	; 0x70c0
  118720:	e3400014 	movt	r0, #20
  118724:	ebffaa7a 	bl	103114 <rt_kprintf>
  118728:	e3a01e1a 	mov	r1, #416	; 0x1a0
  11872c:	e30700cc 	movw	r0, #28876	; 0x70cc
  118730:	e3400014 	movt	r0, #20
  118734:	ebffca5e 	bl	10b0b4 <sys_arch_assert>
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* fold the upper bit down */
    acc = FOLD_U32T(acc);
  118738:	e59b3004 	ldr	r3, [fp, #4]
  11873c:	e1a02823 	lsr	r2, r3, #16
  118740:	e59b3004 	ldr	r3, [fp, #4]
  118744:	e6ff3073 	uxth	r3, r3
  118748:	e0823003 	add	r3, r2, r3
  11874c:	e58b3004 	str	r3, [fp, #4]
    if (q->len % 2 != 0) {
  118750:	e51b3008 	ldr	r3, [fp, #-8]
  118754:	e1d330ba 	ldrh	r3, [r3, #10]
  118758:	e2033001 	and	r3, r3, #1
  11875c:	e6ff3073 	uxth	r3, r3
  118760:	e3530000 	cmp	r3, #0
  118764:	0a00000a 	beq	118794 <inet_cksum_pseudo_partial_base+0x130>
      swapped = 1 - swapped;
  118768:	e55b3009 	ldrb	r3, [fp, #-9]
  11876c:	e2633001 	rsb	r3, r3, #1
  118770:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  118774:	e59b3004 	ldr	r3, [fp, #4]
  118778:	e1a03403 	lsl	r3, r3, #8
  11877c:	e6ff2073 	uxth	r2, r3
  118780:	e59b3004 	ldr	r3, [fp, #4]
  118784:	e1a03423 	lsr	r3, r3, #8
  118788:	e6ef3073 	uxtb	r3, r3
  11878c:	e1823003 	orr	r3, r2, r3
  118790:	e58b3004 	str	r3, [fp, #4]
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  118794:	e51b3008 	ldr	r3, [fp, #-8]
  118798:	e5933000 	ldr	r3, [r3]
  11879c:	e50b3008 	str	r3, [fp, #-8]
  1187a0:	e51b3008 	ldr	r3, [fp, #-8]
  1187a4:	e3530000 	cmp	r3, #0
  1187a8:	0a000002 	beq	1187b8 <inet_cksum_pseudo_partial_base+0x154>
  1187ac:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1187b0:	e3530000 	cmp	r3, #0
  1187b4:	1affffbc 	bne	1186ac <inet_cksum_pseudo_partial_base+0x48>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  1187b8:	e55b3009 	ldrb	r3, [fp, #-9]
  1187bc:	e3530000 	cmp	r3, #0
  1187c0:	0a000007 	beq	1187e4 <inet_cksum_pseudo_partial_base+0x180>
    acc = SWAP_BYTES_IN_WORD(acc);
  1187c4:	e59b3004 	ldr	r3, [fp, #4]
  1187c8:	e1a03403 	lsl	r3, r3, #8
  1187cc:	e6ff2073 	uxth	r2, r3
  1187d0:	e59b3004 	ldr	r3, [fp, #4]
  1187d4:	e1a03423 	lsr	r3, r3, #8
  1187d8:	e6ef3073 	uxtb	r3, r3
  1187dc:	e1823003 	orr	r3, r2, r3
  1187e0:	e58b3004 	str	r3, [fp, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  1187e4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1187e8:	e6ff3073 	uxth	r3, r3
  1187ec:	e1a00003 	mov	r0, r3
  1187f0:	ebfff768 	bl	116598 <lwip_htons>
  1187f4:	e1a03000 	mov	r3, r0
  1187f8:	e1a02003 	mov	r2, r3
  1187fc:	e59b3004 	ldr	r3, [fp, #4]
  118800:	e0833002 	add	r3, r3, r2
  118804:	e58b3004 	str	r3, [fp, #4]
  acc += (u32_t)lwip_htons(proto_len);
  118808:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11880c:	e1a00003 	mov	r0, r3
  118810:	ebfff760 	bl	116598 <lwip_htons>
  118814:	e1a03000 	mov	r3, r0
  118818:	e1a02003 	mov	r2, r3
  11881c:	e59b3004 	ldr	r3, [fp, #4]
  118820:	e0833002 	add	r3, r3, r2
  118824:	e58b3004 	str	r3, [fp, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  118828:	e59b3004 	ldr	r3, [fp, #4]
  11882c:	e1a02823 	lsr	r2, r3, #16
  118830:	e59b3004 	ldr	r3, [fp, #4]
  118834:	e6ff3073 	uxth	r3, r3
  118838:	e0823003 	add	r3, r2, r3
  11883c:	e58b3004 	str	r3, [fp, #4]
  acc = FOLD_U32T(acc);
  118840:	e59b3004 	ldr	r3, [fp, #4]
  118844:	e1a02823 	lsr	r2, r3, #16
  118848:	e59b3004 	ldr	r3, [fp, #4]
  11884c:	e6ff3073 	uxth	r3, r3
  118850:	e0823003 	add	r3, r2, r3
  118854:	e58b3004 	str	r3, [fp, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  118858:	e59b3004 	ldr	r3, [fp, #4]
  11885c:	e6ff3073 	uxth	r3, r3
  118860:	e1e03003 	mvn	r3, r3
  118864:	e6ff3073 	uxth	r3, r3
}
  118868:	e1a00003 	mov	r0, r3
  11886c:	e24bd004 	sub	sp, fp, #4
  118870:	e8bd8800 	pop	{fp, pc}

00118874 <inet_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip4_addr_t *src, const ip4_addr_t *dest)
{
  118874:	e92d4800 	push	{fp, lr}
  118878:	e28db004 	add	fp, sp, #4
  11887c:	e24dd020 	sub	sp, sp, #32
  118880:	e50b0010 	str	r0, [fp, #-16]
  118884:	e1a00001 	mov	r0, r1
  118888:	e1a01002 	mov	r1, r2
  11888c:	e1a02003 	mov	r2, r3
  118890:	e1a03000 	mov	r3, r0
  118894:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118898:	e1a03001 	mov	r3, r1
  11889c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  1188a0:	e1a03002 	mov	r3, r2
  1188a4:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  1188a8:	e59b3004 	ldr	r3, [fp, #4]
  1188ac:	e5933000 	ldr	r3, [r3]
  1188b0:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  1188b4:	e51b3008 	ldr	r3, [fp, #-8]
  1188b8:	e6ff3073 	uxth	r3, r3
  1188bc:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  1188c0:	e51b3008 	ldr	r3, [fp, #-8]
  1188c4:	e1a03823 	lsr	r3, r3, #16
  1188c8:	e51b200c 	ldr	r2, [fp, #-12]
  1188cc:	e0823003 	add	r3, r2, r3
  1188d0:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  1188d4:	e59b3008 	ldr	r3, [fp, #8]
  1188d8:	e5933000 	ldr	r3, [r3]
  1188dc:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  1188e0:	e51b3008 	ldr	r3, [fp, #-8]
  1188e4:	e6ff3073 	uxth	r3, r3
  1188e8:	e51b200c 	ldr	r2, [fp, #-12]
  1188ec:	e0823003 	add	r3, r2, r3
  1188f0:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  1188f4:	e51b3008 	ldr	r3, [fp, #-8]
  1188f8:	e1a03823 	lsr	r3, r3, #16
  1188fc:	e51b200c 	ldr	r2, [fp, #-12]
  118900:	e0823003 	add	r3, r2, r3
  118904:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  118908:	e51b300c 	ldr	r3, [fp, #-12]
  11890c:	e1a02823 	lsr	r2, r3, #16
  118910:	e51b300c 	ldr	r3, [fp, #-12]
  118914:	e6ff3073 	uxth	r3, r3
  118918:	e0823003 	add	r3, r2, r3
  11891c:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  118920:	e51b300c 	ldr	r3, [fp, #-12]
  118924:	e1a02823 	lsr	r2, r3, #16
  118928:	e51b300c 	ldr	r3, [fp, #-12]
  11892c:	e6ff3073 	uxth	r3, r3
  118930:	e0823003 	add	r3, r2, r3
  118934:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_partial_base(p, proto, proto_len, chksum_len, acc);
  118938:	e15b01b6 	ldrh	r0, [fp, #-22]	; 0xffffffea
  11893c:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  118940:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  118944:	e51b300c 	ldr	r3, [fp, #-12]
  118948:	e58d3000 	str	r3, [sp]
  11894c:	e1a03000 	mov	r3, r0
  118950:	e51b0010 	ldr	r0, [fp, #-16]
  118954:	ebffff42 	bl	118664 <inet_cksum_pseudo_partial_base>
  118958:	e1a03000 	mov	r3, r0
}
  11895c:	e1a00003 	mov	r0, r3
  118960:	e24bd004 	sub	sp, fp, #4
  118964:	e8bd8800 	pop	{fp, pc}

00118968 <ip_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip_addr_t *src, const ip_addr_t *dest)
{
  118968:	e92d4800 	push	{fp, lr}
  11896c:	e28db004 	add	fp, sp, #4
  118970:	e24dd018 	sub	sp, sp, #24
  118974:	e50b0008 	str	r0, [fp, #-8]
  118978:	e1a00001 	mov	r0, r1
  11897c:	e1a01002 	mov	r1, r2
  118980:	e1a02003 	mov	r2, r3
  118984:	e1a03000 	mov	r3, r0
  118988:	e54b3009 	strb	r3, [fp, #-9]
  11898c:	e1a03001 	mov	r3, r1
  118990:	e14b30bc 	strh	r3, [fp, #-12]
  118994:	e1a03002 	mov	r3, r2
  118998:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo_partial(p, proto, proto_len, chksum_len, ip_2_ip4(src), ip_2_ip4(dest));
  11899c:	e15b00be 	ldrh	r0, [fp, #-14]
  1189a0:	e15b20bc 	ldrh	r2, [fp, #-12]
  1189a4:	e55b1009 	ldrb	r1, [fp, #-9]
  1189a8:	e59b3008 	ldr	r3, [fp, #8]
  1189ac:	e58d3004 	str	r3, [sp, #4]
  1189b0:	e59b3004 	ldr	r3, [fp, #4]
  1189b4:	e58d3000 	str	r3, [sp]
  1189b8:	e1a03000 	mov	r3, r0
  1189bc:	e51b0008 	ldr	r0, [fp, #-8]
  1189c0:	ebffffab 	bl	118874 <inet_chksum_pseudo_partial>
  1189c4:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  1189c8:	e1a00003 	mov	r0, r3
  1189cc:	e24bd004 	sub	sp, fp, #4
  1189d0:	e8bd8800 	pop	{fp, pc}

001189d4 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
  1189d4:	e92d4800 	push	{fp, lr}
  1189d8:	e28db004 	add	fp, sp, #4
  1189dc:	e24dd008 	sub	sp, sp, #8
  1189e0:	e50b0008 	str	r0, [fp, #-8]
  1189e4:	e1a03001 	mov	r3, r1
  1189e8:	e14b30ba 	strh	r3, [fp, #-10]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
  1189ec:	e15b30ba 	ldrh	r3, [fp, #-10]
  1189f0:	e1a01003 	mov	r1, r3
  1189f4:	e51b0008 	ldr	r0, [fp, #-8]
  1189f8:	ebfffe11 	bl	118244 <lwip_standard_chksum>
  1189fc:	e1a03000 	mov	r3, r0
  118a00:	e1e03003 	mvn	r3, r3
  118a04:	e6ff3073 	uxth	r3, r3
}
  118a08:	e1a00003 	mov	r0, r3
  118a0c:	e24bd004 	sub	sp, fp, #4
  118a10:	e8bd8800 	pop	{fp, pc}

00118a14 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  118a14:	e92d4800 	push	{fp, lr}
  118a18:	e28db004 	add	fp, sp, #4
  118a1c:	e24dd018 	sub	sp, sp, #24
  118a20:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  118a24:	e3a03000 	mov	r3, #0
  118a28:	e50b3008 	str	r3, [fp, #-8]
  swapped = 0;
  118a2c:	e3a03000 	mov	r3, #0
  118a30:	e54b300d 	strb	r3, [fp, #-13]
  for (q = p; q != NULL; q = q->next) {
  118a34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118a38:	e50b300c 	str	r3, [fp, #-12]
  118a3c:	ea000025 	b	118ad8 <inet_chksum_pbuf+0xc4>
    acc += LWIP_CHKSUM(q->payload, q->len);
  118a40:	e51b300c 	ldr	r3, [fp, #-12]
  118a44:	e5932004 	ldr	r2, [r3, #4]
  118a48:	e51b300c 	ldr	r3, [fp, #-12]
  118a4c:	e1d330ba 	ldrh	r3, [r3, #10]
  118a50:	e1a01003 	mov	r1, r3
  118a54:	e1a00002 	mov	r0, r2
  118a58:	ebfffdf9 	bl	118244 <lwip_standard_chksum>
  118a5c:	e1a03000 	mov	r3, r0
  118a60:	e1a02003 	mov	r2, r3
  118a64:	e51b3008 	ldr	r3, [fp, #-8]
  118a68:	e0833002 	add	r3, r3, r2
  118a6c:	e50b3008 	str	r3, [fp, #-8]
    acc = FOLD_U32T(acc);
  118a70:	e51b3008 	ldr	r3, [fp, #-8]
  118a74:	e1a02823 	lsr	r2, r3, #16
  118a78:	e51b3008 	ldr	r3, [fp, #-8]
  118a7c:	e6ff3073 	uxth	r3, r3
  118a80:	e0823003 	add	r3, r2, r3
  118a84:	e50b3008 	str	r3, [fp, #-8]
    if (q->len % 2 != 0) {
  118a88:	e51b300c 	ldr	r3, [fp, #-12]
  118a8c:	e1d330ba 	ldrh	r3, [r3, #10]
  118a90:	e2033001 	and	r3, r3, #1
  118a94:	e6ff3073 	uxth	r3, r3
  118a98:	e3530000 	cmp	r3, #0
  118a9c:	0a00000a 	beq	118acc <inet_chksum_pbuf+0xb8>
      swapped = 1 - swapped;
  118aa0:	e55b300d 	ldrb	r3, [fp, #-13]
  118aa4:	e2633001 	rsb	r3, r3, #1
  118aa8:	e54b300d 	strb	r3, [fp, #-13]
      acc = SWAP_BYTES_IN_WORD(acc);
  118aac:	e51b3008 	ldr	r3, [fp, #-8]
  118ab0:	e1a03403 	lsl	r3, r3, #8
  118ab4:	e6ff2073 	uxth	r2, r3
  118ab8:	e51b3008 	ldr	r3, [fp, #-8]
  118abc:	e1a03423 	lsr	r3, r3, #8
  118ac0:	e6ef3073 	uxtb	r3, r3
  118ac4:	e1823003 	orr	r3, r2, r3
  118ac8:	e50b3008 	str	r3, [fp, #-8]
  for (q = p; q != NULL; q = q->next) {
  118acc:	e51b300c 	ldr	r3, [fp, #-12]
  118ad0:	e5933000 	ldr	r3, [r3]
  118ad4:	e50b300c 	str	r3, [fp, #-12]
  118ad8:	e51b300c 	ldr	r3, [fp, #-12]
  118adc:	e3530000 	cmp	r3, #0
  118ae0:	1affffd6 	bne	118a40 <inet_chksum_pbuf+0x2c>
    }
  }

  if (swapped) {
  118ae4:	e55b300d 	ldrb	r3, [fp, #-13]
  118ae8:	e3530000 	cmp	r3, #0
  118aec:	0a000007 	beq	118b10 <inet_chksum_pbuf+0xfc>
    acc = SWAP_BYTES_IN_WORD(acc);
  118af0:	e51b3008 	ldr	r3, [fp, #-8]
  118af4:	e1a03403 	lsl	r3, r3, #8
  118af8:	e6ff2073 	uxth	r2, r3
  118afc:	e51b3008 	ldr	r3, [fp, #-8]
  118b00:	e1a03423 	lsr	r3, r3, #8
  118b04:	e6ef3073 	uxtb	r3, r3
  118b08:	e1823003 	orr	r3, r2, r3
  118b0c:	e50b3008 	str	r3, [fp, #-8]
  }
  return (u16_t)~(acc & 0xffffUL);
  118b10:	e51b3008 	ldr	r3, [fp, #-8]
  118b14:	e6ff3073 	uxth	r3, r3
  118b18:	e1e03003 	mvn	r3, r3
  118b1c:	e6ff3073 	uxth	r3, r3
}
  118b20:	e1a00003 	mov	r0, r3
  118b24:	e24bd004 	sub	sp, fp, #4
  118b28:	e8bd8800 	pop	{fp, pc}

00118b2c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
  118b2c:	e92d4800 	push	{fp, lr}
  118b30:	e28db004 	add	fp, sp, #4
  118b34:	e24dd008 	sub	sp, sp, #8
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
  118b38:	eb000f7b 	bl	11c92c <stats_init>
#if !NO_SYS
  sys_init();
  118b3c:	ebffc724 	bl	10a7d4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
  118b40:	ebffc97a 	bl	10b130 <mem_init>
  memp_init();
  118b44:	eb0000c6 	bl	118e64 <memp_init>
  pbuf_init();
  netif_init();
  118b48:	eb0001d9 	bl	1192b4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  118b4c:	eb003b81 	bl	127958 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  118b50:	eb001109 	bl	11cf7c <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
  118b54:	eb005cde 	bl	12fed4 <igmp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
  118b58:	ebfff78e 	bl	116998 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
  118b5c:	eb0039d8 	bl	1272c4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
  118b60:	e320f000 	nop	{0}
  118b64:	e24bd004 	sub	sp, fp, #4
  118b68:	e8bd8800 	pop	{fp, pc}

00118b6c <memp_overflow_check_element_overflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_overflow(struct memp *p, const struct memp_desc *desc)
{
  118b6c:	e92d4800 	push	{fp, lr}
  118b70:	e28db004 	add	fp, sp, #4
  118b74:	e24dd090 	sub	sp, sp, #144	; 0x90
  118b78:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  118b7c:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  118b80:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118b84:	e1d330b8 	ldrh	r3, [r3, #8]
  118b88:	e283301c 	add	r3, r3, #28
  118b8c:	e51b2090 	ldr	r2, [fp, #-144]	; 0xffffff70
  118b90:	e0823003 	add	r3, r2, r3
  118b94:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  118b98:	e3a03000 	mov	r3, #0
  118b9c:	e14b30b6 	strh	r3, [fp, #-6]
  118ba0:	ea000022 	b	118c30 <memp_overflow_check_element_overflow+0xc4>
    if (m[k] != 0xcd) {
  118ba4:	e15b30b6 	ldrh	r3, [fp, #-6]
  118ba8:	e51b200c 	ldr	r2, [fp, #-12]
  118bac:	e0823003 	add	r3, r2, r3
  118bb0:	e5d33000 	ldrb	r3, [r3]
  118bb4:	e35300cd 	cmp	r3, #205	; 0xcd
  118bb8:	0a000019 	beq	118c24 <memp_overflow_check_element_overflow+0xb8>
      char errstr[128] = "detected memp overflow in pool ";
  118bbc:	e3073384 	movw	r3, #29572	; 0x7384
  118bc0:	e3403014 	movt	r3, #20
  118bc4:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  118bc8:	e1a0e003 	mov	lr, r3
  118bcc:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118bd0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118bd4:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  118bd8:	e88c000f 	stm	ip, {r0, r1, r2, r3}
  118bdc:	e24b306c 	sub	r3, fp, #108	; 0x6c
  118be0:	e3a02060 	mov	r2, #96	; 0x60
  118be4:	e3a01000 	mov	r1, #0
  118be8:	e1a00003 	mov	r0, r3
  118bec:	eb00a192 	bl	14123c <memset>
      strcat(errstr, desc->desc);
  118bf0:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118bf4:	e5932000 	ldr	r2, [r3]
  118bf8:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118bfc:	e1a01002 	mov	r1, r2
  118c00:	e1a00003 	mov	r0, r3
  118c04:	eb00a1f2 	bl	1413d4 <strcat>
      LWIP_ASSERT(errstr, 0);
  118c08:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118c0c:	e1a00003 	mov	r0, r3
  118c10:	ebffa93f 	bl	103114 <rt_kprintf>
  118c14:	e3a0108a 	mov	r1, #138	; 0x8a
  118c18:	e3070358 	movw	r0, #29528	; 0x7358
  118c1c:	e3400014 	movt	r0, #20
  118c20:	ebffc923 	bl	10b0b4 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  118c24:	e15b30b6 	ldrh	r3, [fp, #-6]
  118c28:	e2833001 	add	r3, r3, #1
  118c2c:	e14b30b6 	strh	r3, [fp, #-6]
  118c30:	e15b30b6 	ldrh	r3, [fp, #-6]
  118c34:	e353000f 	cmp	r3, #15
  118c38:	9affffd9 	bls	118ba4 <memp_overflow_check_element_overflow+0x38>
  }
#else /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  118c3c:	e320f000 	nop	{0}
  118c40:	e24bd004 	sub	sp, fp, #4
  118c44:	e8bd8800 	pop	{fp, pc}

00118c48 <memp_overflow_check_element_underflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_underflow(struct memp *p, const struct memp_desc *desc)
{
  118c48:	e92d4800 	push	{fp, lr}
  118c4c:	e28db004 	add	fp, sp, #4
  118c50:	e24dd090 	sub	sp, sp, #144	; 0x90
  118c54:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  118c58:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  118c5c:	e51b3090 	ldr	r3, [fp, #-144]	; 0xffffff70
  118c60:	e283300c 	add	r3, r3, #12
  118c64:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  118c68:	e3a03000 	mov	r3, #0
  118c6c:	e14b30b6 	strh	r3, [fp, #-6]
  118c70:	ea000024 	b	118d08 <memp_overflow_check_element_underflow+0xc0>
    if (m[k] != 0xcd) {
  118c74:	e15b30b6 	ldrh	r3, [fp, #-6]
  118c78:	e51b200c 	ldr	r2, [fp, #-12]
  118c7c:	e0823003 	add	r3, r2, r3
  118c80:	e5d33000 	ldrb	r3, [r3]
  118c84:	e35300cd 	cmp	r3, #205	; 0xcd
  118c88:	0a00001b 	beq	118cfc <memp_overflow_check_element_underflow+0xb4>
      char errstr[128] = "detected memp underflow in pool ";
  118c8c:	e3073404 	movw	r3, #29700	; 0x7404
  118c90:	e3403014 	movt	r3, #20
  118c94:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  118c98:	e1a0e003 	mov	lr, r3
  118c9c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118ca0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118ca4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118ca8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118cac:	e59e3000 	ldr	r3, [lr]
  118cb0:	e5cc3000 	strb	r3, [ip]
  118cb4:	e24b306b 	sub	r3, fp, #107	; 0x6b
  118cb8:	e3a0205f 	mov	r2, #95	; 0x5f
  118cbc:	e3a01000 	mov	r1, #0
  118cc0:	e1a00003 	mov	r0, r3
  118cc4:	eb00a15c 	bl	14123c <memset>
      strcat(errstr, desc->desc);
  118cc8:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118ccc:	e5932000 	ldr	r2, [r3]
  118cd0:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118cd4:	e1a01002 	mov	r1, r2
  118cd8:	e1a00003 	mov	r0, r3
  118cdc:	eb00a1bc 	bl	1413d4 <strcat>
      LWIP_ASSERT(errstr, 0);
  118ce0:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118ce4:	e1a00003 	mov	r0, r3
  118ce8:	ebffa909 	bl	103114 <rt_kprintf>
  118cec:	e3a010a5 	mov	r1, #165	; 0xa5
  118cf0:	e3070358 	movw	r0, #29528	; 0x7358
  118cf4:	e3400014 	movt	r0, #20
  118cf8:	ebffc8ed 	bl	10b0b4 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  118cfc:	e15b30b6 	ldrh	r3, [fp, #-6]
  118d00:	e2833001 	add	r3, r3, #1
  118d04:	e14b30b6 	strh	r3, [fp, #-6]
  118d08:	e15b30b6 	ldrh	r3, [fp, #-6]
  118d0c:	e353000f 	cmp	r3, #15
  118d10:	9affffd7 	bls	118c74 <memp_overflow_check_element_underflow+0x2c>
  }
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
}
  118d14:	e320f000 	nop	{0}
  118d18:	e24bd004 	sub	sp, fp, #4
  118d1c:	e8bd8800 	pop	{fp, pc}

00118d20 <memp_overflow_init_element>:
/**
 * Initialize the restricted area of on memp element.
 */
static void
memp_overflow_init_element(struct memp *p, const struct memp_desc *desc)
{
  118d20:	e92d4800 	push	{fp, lr}
  118d24:	e28db004 	add	fp, sp, #4
  118d28:	e24dd010 	sub	sp, sp, #16
  118d2c:	e50b0010 	str	r0, [fp, #-16]
  118d30:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u8_t *m;
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  118d34:	e51b3010 	ldr	r3, [fp, #-16]
  118d38:	e283300c 	add	r3, r3, #12
  118d3c:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_BEFORE_ALIGNED);
  118d40:	e3a02010 	mov	r2, #16
  118d44:	e3a010cd 	mov	r1, #205	; 0xcd
  118d48:	e51b0008 	ldr	r0, [fp, #-8]
  118d4c:	eb00a13a 	bl	14123c <memset>
#endif
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  118d50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118d54:	e1d330b8 	ldrh	r3, [r3, #8]
  118d58:	e283301c 	add	r3, r3, #28
  118d5c:	e51b2010 	ldr	r2, [fp, #-16]
  118d60:	e0823003 	add	r3, r2, r3
  118d64:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_AFTER_ALIGNED);
  118d68:	e3a02010 	mov	r2, #16
  118d6c:	e3a010cd 	mov	r1, #205	; 0xcd
  118d70:	e51b0008 	ldr	r0, [fp, #-8]
  118d74:	eb00a130 	bl	14123c <memset>
#endif
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  118d78:	e320f000 	nop	{0}
  118d7c:	e24bd004 	sub	sp, fp, #4
  118d80:	e8bd8800 	pop	{fp, pc}

00118d84 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
  118d84:	e92d4800 	push	{fp, lr}
  118d88:	e28db004 	add	fp, sp, #4
  118d8c:	e24dd010 	sub	sp, sp, #16
  118d90:	e50b0010 	str	r0, [fp, #-16]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
  118d94:	e51b3010 	ldr	r3, [fp, #-16]
  118d98:	e5933010 	ldr	r3, [r3, #16]
  118d9c:	e3a02000 	mov	r2, #0
  118da0:	e5832000 	str	r2, [r3]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
  118da4:	e51b3010 	ldr	r3, [fp, #-16]
  118da8:	e593300c 	ldr	r3, [r3, #12]
  118dac:	e2833003 	add	r3, r3, #3
  118db0:	e3c33003 	bic	r3, r3, #3
  118db4:	e50b300c 	str	r3, [fp, #-12]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
  118db8:	e3a03000 	mov	r3, #0
  118dbc:	e50b3008 	str	r3, [fp, #-8]
  118dc0:	ea000014 	b	118e18 <memp_init_pool+0x94>
    memp->next = *desc->tab;
  118dc4:	e51b3010 	ldr	r3, [fp, #-16]
  118dc8:	e5933010 	ldr	r3, [r3, #16]
  118dcc:	e5932000 	ldr	r2, [r3]
  118dd0:	e51b300c 	ldr	r3, [fp, #-12]
  118dd4:	e5832000 	str	r2, [r3]
    *desc->tab = memp;
  118dd8:	e51b3010 	ldr	r3, [fp, #-16]
  118ddc:	e5933010 	ldr	r3, [r3, #16]
  118de0:	e51b200c 	ldr	r2, [fp, #-12]
  118de4:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
  118de8:	e51b1010 	ldr	r1, [fp, #-16]
  118dec:	e51b000c 	ldr	r0, [fp, #-12]
  118df0:	ebffffca 	bl	118d20 <memp_overflow_init_element>
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  118df4:	e51b3010 	ldr	r3, [fp, #-16]
  118df8:	e1d330b8 	ldrh	r3, [r3, #8]
#if MEMP_OVERFLOW_CHECK
      + MEMP_SANITY_REGION_AFTER_ALIGNED
  118dfc:	e283302c 	add	r3, r3, #44	; 0x2c
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  118e00:	e51b200c 	ldr	r2, [fp, #-12]
  118e04:	e0823003 	add	r3, r2, r3
  118e08:	e50b300c 	str	r3, [fp, #-12]
  for (i = 0; i < desc->num; ++i) {
  118e0c:	e51b3008 	ldr	r3, [fp, #-8]
  118e10:	e2833001 	add	r3, r3, #1
  118e14:	e50b3008 	str	r3, [fp, #-8]
  118e18:	e51b3010 	ldr	r3, [fp, #-16]
  118e1c:	e1d330ba 	ldrh	r3, [r3, #10]
  118e20:	e1a02003 	mov	r2, r3
  118e24:	e51b3008 	ldr	r3, [fp, #-8]
  118e28:	e1530002 	cmp	r3, r2
  118e2c:	baffffe4 	blt	118dc4 <memp_init_pool+0x40>
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
  118e30:	e51b3010 	ldr	r3, [fp, #-16]
  118e34:	e5933004 	ldr	r3, [r3, #4]
  118e38:	e51b2010 	ldr	r2, [fp, #-16]
  118e3c:	e1d220ba 	ldrh	r2, [r2, #10]
  118e40:	e1c320b6 	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
  118e44:	e51b3010 	ldr	r3, [fp, #-16]
  118e48:	e5933004 	ldr	r3, [r3, #4]
  118e4c:	e51b2010 	ldr	r2, [fp, #-16]
  118e50:	e5922000 	ldr	r2, [r2]
  118e54:	e5832000 	str	r2, [r3]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
  118e58:	e320f000 	nop	{0}
  118e5c:	e24bd004 	sub	sp, fp, #4
  118e60:	e8bd8800 	pop	{fp, pc}

00118e64 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  118e64:	e92d4800 	push	{fp, lr}
  118e68:	e28db004 	add	fp, sp, #4
  118e6c:	e24dd008 	sub	sp, sp, #8
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  118e70:	e3a03000 	mov	r3, #0
  118e74:	e14b30b6 	strh	r3, [fp, #-6]
  118e78:	ea000014 	b	118ed0 <memp_init+0x6c>
    memp_init_pool(memp_pools[i]);
  118e7c:	e15b20b6 	ldrh	r2, [fp, #-6]
  118e80:	e3073314 	movw	r3, #29460	; 0x7314
  118e84:	e3403014 	movt	r3, #20
  118e88:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  118e8c:	e1a00003 	mov	r0, r3
  118e90:	ebffffbb 	bl	118d84 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
  118e94:	e15b20b6 	ldrh	r2, [fp, #-6]
  118e98:	e3073314 	movw	r3, #29460	; 0x7314
  118e9c:	e3403014 	movt	r3, #20
  118ea0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  118ea4:	e15b30b6 	ldrh	r3, [fp, #-6]
  118ea8:	e5921004 	ldr	r1, [r2, #4]
  118eac:	e30c2a48 	movw	r2, #51784	; 0xca48
  118eb0:	e3402015 	movt	r2, #21
  118eb4:	e2833034 	add	r3, r3, #52	; 0x34
  118eb8:	e1a03103 	lsl	r3, r3, #2
  118ebc:	e0823003 	add	r3, r2, r3
  118ec0:	e5831004 	str	r1, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  118ec4:	e15b30b6 	ldrh	r3, [fp, #-6]
  118ec8:	e2833001 	add	r3, r3, #1
  118ecc:	e14b30b6 	strh	r3, [fp, #-6]
  118ed0:	e15b30b6 	ldrh	r3, [fp, #-6]
  118ed4:	e3530010 	cmp	r3, #16
  118ed8:	9affffe7 	bls	118e7c <memp_init+0x18>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
  118edc:	e320f000 	nop	{0}
  118ee0:	e24bd004 	sub	sp, fp, #4
  118ee4:	e8bd8800 	pop	{fp, pc}

00118ee8 <do_memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  118ee8:	e92d4800 	push	{fp, lr}
  118eec:	e28db004 	add	fp, sp, #4
  118ef0:	e24dd018 	sub	sp, sp, #24
  118ef4:	e50b0010 	str	r0, [fp, #-16]
  118ef8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  118efc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
  118f00:	ebffa4cd 	bl	10223c <rt_enter_critical>

  memp = *desc->tab;
  118f04:	e51b3010 	ldr	r3, [fp, #-16]
  118f08:	e5933010 	ldr	r3, [r3, #16]
  118f0c:	e5933000 	ldr	r3, [r3]
  118f10:	e50b3008 	str	r3, [fp, #-8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
  118f14:	e51b3008 	ldr	r3, [fp, #-8]
  118f18:	e3530000 	cmp	r3, #0
  118f1c:	0a000036 	beq	118ffc <do_memp_malloc_pool_fn+0x114>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
  118f20:	e51b1010 	ldr	r1, [fp, #-16]
  118f24:	e51b0008 	ldr	r0, [fp, #-8]
  118f28:	ebffff0f 	bl	118b6c <memp_overflow_check_element_overflow>
    memp_overflow_check_element_underflow(memp, desc);
  118f2c:	e51b1010 	ldr	r1, [fp, #-16]
  118f30:	e51b0008 	ldr	r0, [fp, #-8]
  118f34:	ebffff43 	bl	118c48 <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
  118f38:	e51b3010 	ldr	r3, [fp, #-16]
  118f3c:	e5933010 	ldr	r3, [r3, #16]
  118f40:	e51b2008 	ldr	r2, [fp, #-8]
  118f44:	e5922000 	ldr	r2, [r2]
  118f48:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
  118f4c:	e51b3008 	ldr	r3, [fp, #-8]
  118f50:	e3a02000 	mov	r2, #0
  118f54:	e5832000 	str	r2, [r3]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
  118f58:	e51b3008 	ldr	r3, [fp, #-8]
  118f5c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  118f60:	e5832004 	str	r2, [r3, #4]
    memp->line = line;
  118f64:	e51b3008 	ldr	r3, [fp, #-8]
  118f68:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118f6c:	e5832008 	str	r2, [r3, #8]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
  118f70:	e51b3008 	ldr	r3, [fp, #-8]
  118f74:	e2033003 	and	r3, r3, #3
  118f78:	e3530000 	cmp	r3, #0
  118f7c:	0a000006 	beq	118f9c <do_memp_malloc_pool_fn+0xb4>
  118f80:	e3070484 	movw	r0, #29828	; 0x7484
  118f84:	e3400014 	movt	r0, #20
  118f88:	ebffa861 	bl	103114 <rt_kprintf>
  118f8c:	e3001149 	movw	r1, #329	; 0x149
  118f90:	e3070358 	movw	r0, #29528	; 0x7358
  118f94:	e3400014 	movt	r0, #20
  118f98:	ebffc845 	bl	10b0b4 <sys_arch_assert>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
  118f9c:	e51b3010 	ldr	r3, [fp, #-16]
  118fa0:	e5933004 	ldr	r3, [r3, #4]
  118fa4:	e1d320b8 	ldrh	r2, [r3, #8]
  118fa8:	e2822001 	add	r2, r2, #1
  118fac:	e6ff2072 	uxth	r2, r2
  118fb0:	e1c320b8 	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
  118fb4:	e51b3010 	ldr	r3, [fp, #-16]
  118fb8:	e5933004 	ldr	r3, [r3, #4]
  118fbc:	e1d320b8 	ldrh	r2, [r3, #8]
  118fc0:	e51b3010 	ldr	r3, [fp, #-16]
  118fc4:	e5933004 	ldr	r3, [r3, #4]
  118fc8:	e1d330ba 	ldrh	r3, [r3, #10]
  118fcc:	e1520003 	cmp	r2, r3
  118fd0:	9a000005 	bls	118fec <do_memp_malloc_pool_fn+0x104>
      desc->stats->max = desc->stats->used;
  118fd4:	e51b3010 	ldr	r3, [fp, #-16]
  118fd8:	e5932004 	ldr	r2, [r3, #4]
  118fdc:	e51b3010 	ldr	r3, [fp, #-16]
  118fe0:	e5933004 	ldr	r3, [r3, #4]
  118fe4:	e1d220b8 	ldrh	r2, [r2, #8]
  118fe8:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
  118fec:	ebffa498 	bl	102254 <rt_exit_critical>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
  118ff0:	e51b3008 	ldr	r3, [fp, #-8]
  118ff4:	e283301c 	add	r3, r3, #28
  118ff8:	ea000007 	b	11901c <do_memp_malloc_pool_fn+0x134>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
  118ffc:	e51b3010 	ldr	r3, [fp, #-16]
  119000:	e5933004 	ldr	r3, [r3, #4]
  119004:	e1d320b4 	ldrh	r2, [r3, #4]
  119008:	e2822001 	add	r2, r2, #1
  11900c:	e6ff2072 	uxth	r2, r2
  119010:	e1c320b4 	strh	r2, [r3, #4]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  119014:	ebffa48e 	bl	102254 <rt_exit_critical>
  return NULL;
  119018:	e3a03000 	mov	r3, #0
}
  11901c:	e1a00003 	mov	r0, r3
  119020:	e24bd004 	sub	sp, fp, #4
  119024:	e8bd8800 	pop	{fp, pc}

00119028 <memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  119028:	e92d4800 	push	{fp, lr}
  11902c:	e28db004 	add	fp, sp, #4
  119030:	e24dd010 	sub	sp, sp, #16
  119034:	e50b0008 	str	r0, [fp, #-8]
  119038:	e50b100c 	str	r1, [fp, #-12]
  11903c:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  119040:	e51b3008 	ldr	r3, [fp, #-8]
  119044:	e3530000 	cmp	r3, #0
  119048:	1a000006 	bne	119068 <memp_malloc_pool_fn+0x40>
  11904c:	e30704a8 	movw	r0, #29864	; 0x74a8
  119050:	e3400014 	movt	r0, #20
  119054:	ebffa82e 	bl	103114 <rt_kprintf>
  119058:	e3a01f5b 	mov	r1, #364	; 0x16c
  11905c:	e3070358 	movw	r0, #29528	; 0x7358
  119060:	e3400014 	movt	r0, #20
  119064:	ebffc812 	bl	10b0b4 <sys_arch_assert>
  if (desc == NULL) {
  119068:	e51b3008 	ldr	r3, [fp, #-8]
  11906c:	e3530000 	cmp	r3, #0
  119070:	1a000001 	bne	11907c <memp_malloc_pool_fn+0x54>
    return NULL;
  119074:	e3a03000 	mov	r3, #0
  119078:	ea000004 	b	119090 <memp_malloc_pool_fn+0x68>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
#else
  return do_memp_malloc_pool_fn(desc, file, line);
  11907c:	e51b2010 	ldr	r2, [fp, #-16]
  119080:	e51b100c 	ldr	r1, [fp, #-12]
  119084:	e51b0008 	ldr	r0, [fp, #-8]
  119088:	ebffff96 	bl	118ee8 <do_memp_malloc_pool_fn>
  11908c:	e1a03000 	mov	r3, r0
#endif
}
  119090:	e1a00003 	mov	r0, r3
  119094:	e24bd004 	sub	sp, fp, #4
  119098:	e8bd8800 	pop	{fp, pc}

0011909c <memp_malloc_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  11909c:	e92d4800 	push	{fp, lr}
  1190a0:	e28db004 	add	fp, sp, #4
  1190a4:	e24dd018 	sub	sp, sp, #24
  1190a8:	e50b0010 	str	r0, [fp, #-16]
  1190ac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1190b0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  1190b4:	e51b3010 	ldr	r3, [fp, #-16]
  1190b8:	e3530010 	cmp	r3, #16
  1190bc:	9a000008 	bls	1190e4 <memp_malloc_fn+0x48>
  1190c0:	e30704bc 	movw	r0, #29884	; 0x74bc
  1190c4:	e3400014 	movt	r0, #20
  1190c8:	ebffa811 	bl	103114 <rt_kprintf>
  1190cc:	e3001187 	movw	r1, #391	; 0x187
  1190d0:	e3070358 	movw	r0, #29528	; 0x7358
  1190d4:	e3400014 	movt	r0, #20
  1190d8:	ebffc7f5 	bl	10b0b4 <sys_arch_assert>
  1190dc:	e3a03000 	mov	r3, #0
  1190e0:	ea000009 	b	11910c <memp_malloc_fn+0x70>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
  1190e4:	e3073314 	movw	r3, #29460	; 0x7314
  1190e8:	e3403014 	movt	r3, #20
  1190ec:	e51b2010 	ldr	r2, [fp, #-16]
  1190f0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1190f4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1190f8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1190fc:	e1a00003 	mov	r0, r3
  119100:	ebffff78 	bl	118ee8 <do_memp_malloc_pool_fn>
  119104:	e50b0008 	str	r0, [fp, #-8]
#endif

  return memp;
  119108:	e51b3008 	ldr	r3, [fp, #-8]
}
  11910c:	e1a00003 	mov	r0, r3
  119110:	e24bd004 	sub	sp, fp, #4
  119114:	e8bd8800 	pop	{fp, pc}

00119118 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
  119118:	e92d4800 	push	{fp, lr}
  11911c:	e28db004 	add	fp, sp, #4
  119120:	e24dd010 	sub	sp, sp, #16
  119124:	e50b0010 	str	r0, [fp, #-16]
  119128:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
  11912c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119130:	e2033003 	and	r3, r3, #3
  119134:	e3530000 	cmp	r3, #0
  119138:	0a000006 	beq	119158 <do_memp_free_pool+0x40>
  11913c:	e30704dc 	movw	r0, #29916	; 0x74dc
  119140:	e3400014 	movt	r0, #20
  119144:	ebffa7f2 	bl	103114 <rt_kprintf>
  119148:	e300119d 	movw	r1, #413	; 0x19d
  11914c:	e3070358 	movw	r0, #29528	; 0x7358
  119150:	e3400014 	movt	r0, #20
  119154:	ebffc7d6 	bl	10b0b4 <sys_arch_assert>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
  119158:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11915c:	e243301c 	sub	r3, r3, #28
  119160:	e50b3008 	str	r3, [fp, #-8]

  SYS_ARCH_PROTECT(old_level);
  119164:	ebffa434 	bl	10223c <rt_enter_critical>

#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element_overflow(memp, desc);
  119168:	e51b1010 	ldr	r1, [fp, #-16]
  11916c:	e51b0008 	ldr	r0, [fp, #-8]
  119170:	ebfffe7d 	bl	118b6c <memp_overflow_check_element_overflow>
  memp_overflow_check_element_underflow(memp, desc);
  119174:	e51b1010 	ldr	r1, [fp, #-16]
  119178:	e51b0008 	ldr	r0, [fp, #-8]
  11917c:	ebfffeb1 	bl	118c48 <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
  119180:	e51b3010 	ldr	r3, [fp, #-16]
  119184:	e5933004 	ldr	r3, [r3, #4]
  119188:	e1d320b8 	ldrh	r2, [r3, #8]
  11918c:	e2422001 	sub	r2, r2, #1
  119190:	e6ff2072 	uxth	r2, r2
  119194:	e1c320b8 	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
  119198:	e51b3010 	ldr	r3, [fp, #-16]
  11919c:	e5933010 	ldr	r3, [r3, #16]
  1191a0:	e5932000 	ldr	r2, [r3]
  1191a4:	e51b3008 	ldr	r3, [fp, #-8]
  1191a8:	e5832000 	str	r2, [r3]
  *desc->tab = memp;
  1191ac:	e51b3010 	ldr	r3, [fp, #-16]
  1191b0:	e5933010 	ldr	r3, [r3, #16]
  1191b4:	e51b2008 	ldr	r2, [fp, #-8]
  1191b8:	e5832000 	str	r2, [r3]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
  1191bc:	ebffa424 	bl	102254 <rt_exit_critical>
#endif /* !MEMP_MEM_MALLOC */
}
  1191c0:	e320f000 	nop	{0}
  1191c4:	e24bd004 	sub	sp, fp, #4
  1191c8:	e8bd8800 	pop	{fp, pc}

001191cc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
  1191cc:	e92d4800 	push	{fp, lr}
  1191d0:	e28db004 	add	fp, sp, #4
  1191d4:	e24dd008 	sub	sp, sp, #8
  1191d8:	e50b0008 	str	r0, [fp, #-8]
  1191dc:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  1191e0:	e51b3008 	ldr	r3, [fp, #-8]
  1191e4:	e3530000 	cmp	r3, #0
  1191e8:	1a000006 	bne	119208 <memp_free_pool+0x3c>
  1191ec:	e30704a8 	movw	r0, #29864	; 0x74a8
  1191f0:	e3400014 	movt	r0, #20
  1191f4:	ebffa7c6 	bl	103114 <rt_kprintf>
  1191f8:	e30011c6 	movw	r1, #454	; 0x1c6
  1191fc:	e3070358 	movw	r0, #29528	; 0x7358
  119200:	e3400014 	movt	r0, #20
  119204:	ebffc7aa 	bl	10b0b4 <sys_arch_assert>
  if ((desc == NULL) || (mem == NULL)) {
  119208:	e51b3008 	ldr	r3, [fp, #-8]
  11920c:	e3530000 	cmp	r3, #0
  119210:	0a000006 	beq	119230 <memp_free_pool+0x64>
  119214:	e51b300c 	ldr	r3, [fp, #-12]
  119218:	e3530000 	cmp	r3, #0
  11921c:	0a000003 	beq	119230 <memp_free_pool+0x64>
    return;
  }

  do_memp_free_pool(desc, mem);
  119220:	e51b100c 	ldr	r1, [fp, #-12]
  119224:	e51b0008 	ldr	r0, [fp, #-8]
  119228:	ebffffba 	bl	119118 <do_memp_free_pool>
  11922c:	ea000000 	b	119234 <memp_free_pool+0x68>
    return;
  119230:	e320f000 	nop	{0}
}
  119234:	e24bd004 	sub	sp, fp, #4
  119238:	e8bd8800 	pop	{fp, pc}

0011923c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
  11923c:	e92d4800 	push	{fp, lr}
  119240:	e28db004 	add	fp, sp, #4
  119244:	e24dd008 	sub	sp, sp, #8
  119248:	e50b0008 	str	r0, [fp, #-8]
  11924c:	e50b100c 	str	r1, [fp, #-12]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
  119250:	e51b3008 	ldr	r3, [fp, #-8]
  119254:	e3530010 	cmp	r3, #16
  119258:	9a000007 	bls	11927c <memp_free+0x40>
  11925c:	e30704fc 	movw	r0, #29948	; 0x74fc
  119260:	e3400014 	movt	r0, #20
  119264:	ebffa7aa 	bl	103114 <rt_kprintf>
  119268:	e30011db 	movw	r1, #475	; 0x1db
  11926c:	e3070358 	movw	r0, #29528	; 0x7358
  119270:	e3400014 	movt	r0, #20
  119274:	ebffc78e 	bl	10b0b4 <sys_arch_assert>
  119278:	ea00000b 	b	1192ac <memp_free+0x70>

  if (mem == NULL) {
  11927c:	e51b300c 	ldr	r3, [fp, #-12]
  119280:	e3530000 	cmp	r3, #0
  119284:	0a000007 	beq	1192a8 <memp_free+0x6c>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
  119288:	e3073314 	movw	r3, #29460	; 0x7314
  11928c:	e3403014 	movt	r3, #20
  119290:	e51b2008 	ldr	r2, [fp, #-8]
  119294:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  119298:	e51b100c 	ldr	r1, [fp, #-12]
  11929c:	e1a00003 	mov	r0, r3
  1192a0:	ebffff9c 	bl	119118 <do_memp_free_pool>
  1192a4:	ea000000 	b	1192ac <memp_free+0x70>
    return;
  1192a8:	e320f000 	nop	{0}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
  1192ac:	e24bd004 	sub	sp, fp, #4
  1192b0:	e8bd8800 	pop	{fp, pc}

001192b4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
  1192b4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1192b8:	e28db000 	add	fp, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
  1192bc:	e320f000 	nop	{0}
  1192c0:	e28bd000 	add	sp, fp, #0
  1192c4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1192c8:	e12fff1e 	bx	lr

001192cc <netif_input>:
 * Only works if the netif driver correctly sets
 * NETIF_FLAG_ETHARP and/or NETIF_FLAG_ETHERNET flag!
 */
err_t
netif_input(struct pbuf *p, struct netif *inp)
{
  1192cc:	e92d4800 	push	{fp, lr}
  1192d0:	e28db004 	add	fp, sp, #4
  1192d4:	e24dd008 	sub	sp, sp, #8
  1192d8:	e50b0008 	str	r0, [fp, #-8]
  1192dc:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  1192e0:	e51b300c 	ldr	r3, [fp, #-12]
  1192e4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1192e8:	e2033018 	and	r3, r3, #24
  1192ec:	e3530000 	cmp	r3, #0
  1192f0:	0a000004 	beq	119308 <netif_input+0x3c>
    return ethernet_input(p, inp);
  1192f4:	e51b100c 	ldr	r1, [fp, #-12]
  1192f8:	e51b0008 	ldr	r0, [fp, #-8]
  1192fc:	eb003e31 	bl	128bc8 <ethernet_input>
  119300:	e1a03000 	mov	r3, r0
  119304:	ea000003 	b	119318 <netif_input+0x4c>
  } else
#endif /* LWIP_ETHERNET */
  return ip_input(p, inp);
  119308:	e51b100c 	ldr	r1, [fp, #-12]
  11930c:	e51b0008 	ldr	r0, [fp, #-8]
  119310:	eb006038 	bl	1313f8 <ip4_input>
  119314:	e1a03000 	mov	r3, r0
}
  119318:	e1a00003 	mov	r0, r3
  11931c:	e24bd004 	sub	sp, fp, #4
  119320:	e8bd8800 	pop	{fp, pc}

00119324 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
  119324:	e92d4800 	push	{fp, lr}
  119328:	e28db004 	add	fp, sp, #4
  11932c:	e24dd010 	sub	sp, sp, #16
  119330:	e50b0008 	str	r0, [fp, #-8]
  119334:	e50b100c 	str	r1, [fp, #-12]
  119338:	e50b2010 	str	r2, [fp, #-16]
  11933c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_IPV6
  s8_t i;
#endif
  LWIP_ASSERT("No init function given", init != NULL);
  119340:	e59b3008 	ldr	r3, [fp, #8]
  119344:	e3530000 	cmp	r3, #0
  119348:	1a000006 	bne	119368 <netif_add+0x44>
  11934c:	e3070518 	movw	r0, #29976	; 0x7518
  119350:	e3400014 	movt	r0, #20
  119354:	ebffa76e 	bl	103114 <rt_kprintf>
  119358:	e3001105 	movw	r1, #261	; 0x105
  11935c:	e3070530 	movw	r0, #30000	; 0x7530
  119360:	e3400014 	movt	r0, #20
  119364:	ebffc752 	bl	10b0b4 <sys_arch_assert>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
  119368:	e51b3008 	ldr	r3, [fp, #-8]
  11936c:	e3a02000 	mov	r2, #0
  119370:	e5832004 	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
  119374:	e51b3008 	ldr	r3, [fp, #-8]
  119378:	e3a02000 	mov	r2, #0
  11937c:	e5832008 	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
  119380:	e51b3008 	ldr	r3, [fp, #-8]
  119384:	e3a02000 	mov	r2, #0
  119388:	e583200c 	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
  11938c:	e51b3008 	ldr	r3, [fp, #-8]
  119390:	e3a02000 	mov	r2, #0
  119394:	e5c32041 	strb	r2, [r3, #65]	; 0x41
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
  119398:	e51b3008 	ldr	r3, [fp, #-8]
  11939c:	e2833028 	add	r3, r3, #40	; 0x28
  1193a0:	e3a02008 	mov	r2, #8
  1193a4:	e3a01000 	mov	r1, #0
  1193a8:	e1a00003 	mov	r0, r3
  1193ac:	eb009fa2 	bl	14123c <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
  1193b0:	e51b3008 	ldr	r3, [fp, #-8]
  1193b4:	e3a02003 	mov	r2, #3
  1193b8:	e5c32030 	strb	r2, [r3, #48]	; 0x30
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
  1193bc:	e51b3008 	ldr	r3, [fp, #-8]
  1193c0:	e3a02000 	mov	r2, #0
  1193c4:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
  1193c8:	e51b3008 	ldr	r3, [fp, #-8]
  1193cc:	e3a02000 	mov	r2, #0
  1193d0:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
  1193d4:	e51b3008 	ldr	r3, [fp, #-8]
  1193d8:	e3a02000 	mov	r2, #0
  1193dc:	e583207c 	str	r2, [r3, #124]	; 0x7c
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
  1193e0:	e51b3008 	ldr	r3, [fp, #-8]
  1193e4:	e3a02000 	mov	r2, #0
  1193e8:	e5832080 	str	r2, [r3, #128]	; 0x80
  netif->loop_last = NULL;
  1193ec:	e51b3008 	ldr	r3, [fp, #-8]
  1193f0:	e3a02000 	mov	r2, #0
  1193f4:	e5832084 	str	r2, [r3, #132]	; 0x84
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  1193f8:	e51b3008 	ldr	r3, [fp, #-8]
  1193fc:	e59b2004 	ldr	r2, [fp, #4]
  119400:	e5832024 	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num++;
  119404:	e30e3238 	movw	r3, #57912	; 0xe238
  119408:	e3403014 	movt	r3, #20
  11940c:	e5d32000 	ldrb	r2, [r3]
  119410:	e2823001 	add	r3, r2, #1
  119414:	e6ef1073 	uxtb	r1, r3
  119418:	e30e3238 	movw	r3, #57912	; 0xe238
  11941c:	e3403014 	movt	r3, #20
  119420:	e5c31000 	strb	r1, [r3]
  119424:	e51b3008 	ldr	r3, [fp, #-8]
  119428:	e5c32044 	strb	r2, [r3, #68]	; 0x44
  netif->input = input;
  11942c:	e51b3008 	ldr	r3, [fp, #-8]
  119430:	e59b200c 	ldr	r2, [fp, #12]
  119434:	e5832010 	str	r2, [r3, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */
#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
  119438:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11943c:	e51b2010 	ldr	r2, [fp, #-16]
  119440:	e51b100c 	ldr	r1, [fp, #-12]
  119444:	e51b0008 	ldr	r0, [fp, #-8]
  119448:	eb00001b 	bl	1194bc <netif_set_addr>
#endif /* LWIP_IPV4 */
  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
  11944c:	e59b3008 	ldr	r3, [fp, #8]
  119450:	e51b0008 	ldr	r0, [fp, #-8]
  119454:	e12fff33 	blx	r3
  119458:	e1a03000 	mov	r3, r0
  11945c:	e3530000 	cmp	r3, #0
  119460:	0a000001 	beq	11946c <netif_add+0x148>
    return NULL;
  119464:	e3a03000 	mov	r3, #0
  119468:	ea000010 	b	1194b0 <netif_add+0x18c>
  }
  /* add this netif to the list */
  netif->next = netif_list;
  11946c:	e30c3a3c 	movw	r3, #51772	; 0xca3c
  119470:	e3403015 	movt	r3, #21
  119474:	e5932000 	ldr	r2, [r3]
  119478:	e51b3008 	ldr	r3, [fp, #-8]
  11947c:	e5832000 	str	r2, [r3]
  netif_list = netif;
  119480:	e30c3a3c 	movw	r3, #51772	; 0xca3c
  119484:	e3403015 	movt	r3, #21
  119488:	e51b2008 	ldr	r2, [fp, #-8]
  11948c:	e5832000 	str	r2, [r3]
  mib2_netif_added(netif);
#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  119490:	e51b3008 	ldr	r3, [fp, #-8]
  119494:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119498:	e2033020 	and	r3, r3, #32
  11949c:	e3530000 	cmp	r3, #0
  1194a0:	0a000001 	beq	1194ac <netif_add+0x188>
    igmp_start(netif);
  1194a4:	e51b0008 	ldr	r0, [fp, #-8]
  1194a8:	eb005a99 	bl	12ff14 <igmp_start>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
  1194ac:	e51b3008 	ldr	r3, [fp, #-8]
}
  1194b0:	e1a00003 	mov	r0, r3
  1194b4:	e24bd004 	sub	sp, fp, #4
  1194b8:	e8bd8800 	pop	{fp, pc}

001194bc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
  1194bc:	e92d4800 	push	{fp, lr}
  1194c0:	e28db004 	add	fp, sp, #4
  1194c4:	e24dd010 	sub	sp, sp, #16
  1194c8:	e50b0008 	str	r0, [fp, #-8]
  1194cc:	e50b100c 	str	r1, [fp, #-12]
  1194d0:	e50b2010 	str	r2, [fp, #-16]
  1194d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (ip4_addr_isany(ipaddr)) {
  1194d8:	e51b300c 	ldr	r3, [fp, #-12]
  1194dc:	e3530000 	cmp	r3, #0
  1194e0:	0a000003 	beq	1194f4 <netif_set_addr+0x38>
  1194e4:	e51b300c 	ldr	r3, [fp, #-12]
  1194e8:	e5933000 	ldr	r3, [r3]
  1194ec:	e3530000 	cmp	r3, #0
  1194f0:	1a000009 	bne	11951c <netif_set_addr+0x60>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
  1194f4:	e51b100c 	ldr	r1, [fp, #-12]
  1194f8:	e51b0008 	ldr	r0, [fp, #-8]
  1194fc:	eb00009d 	bl	119778 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
  119500:	e51b1010 	ldr	r1, [fp, #-16]
  119504:	e51b0008 	ldr	r0, [fp, #-8]
  119508:	eb0000fa 	bl	1198f8 <netif_set_netmask>
    netif_set_gw(netif, gw);
  11950c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119510:	e51b0008 	ldr	r0, [fp, #-8]
  119514:	eb0000de 	bl	119894 <netif_set_gw>
  119518:	ea000008 	b	119540 <netif_set_addr+0x84>
  } else {
    netif_set_netmask(netif, netmask);
  11951c:	e51b1010 	ldr	r1, [fp, #-16]
  119520:	e51b0008 	ldr	r0, [fp, #-8]
  119524:	eb0000f3 	bl	1198f8 <netif_set_netmask>
    netif_set_gw(netif, gw);
  119528:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11952c:	e51b0008 	ldr	r0, [fp, #-8]
  119530:	eb0000d7 	bl	119894 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
  119534:	e51b100c 	ldr	r1, [fp, #-12]
  119538:	e51b0008 	ldr	r0, [fp, #-8]
  11953c:	eb00008d 	bl	119778 <netif_set_ipaddr>
  }
}
  119540:	e320f000 	nop	{0}
  119544:	e24bd004 	sub	sp, fp, #4
  119548:	e8bd8800 	pop	{fp, pc}

0011954c <netif_remove>:
 *
 * @param netif the network interface to remove
 */
void
netif_remove(struct netif *netif)
{
  11954c:	e92d4800 	push	{fp, lr}
  119550:	e28db004 	add	fp, sp, #4
  119554:	e24dd010 	sub	sp, sp, #16
  119558:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_IPV6
  int i;
#endif

  if (netif == NULL) {
  11955c:	e51b3010 	ldr	r3, [fp, #-16]
  119560:	e3530000 	cmp	r3, #0
  119564:	0a00004e 	beq	1196a4 <netif_remove+0x158>
    return;
  }

#if LWIP_IPV4
  if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  119568:	e51b3010 	ldr	r3, [fp, #-16]
  11956c:	e2833004 	add	r3, r3, #4
  119570:	e5933000 	ldr	r3, [r3]
  119574:	e3530000 	cmp	r3, #0
  119578:	0a00000e 	beq	1195b8 <netif_remove+0x6c>
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  11957c:	e51b3010 	ldr	r3, [fp, #-16]
  119580:	e2833004 	add	r3, r3, #4
  119584:	e3a01000 	mov	r1, #0
  119588:	e1a00003 	mov	r0, r3
  11958c:	eb001aec 	bl	120144 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  119590:	e51b3010 	ldr	r3, [fp, #-16]
  119594:	e2833004 	add	r3, r3, #4
  119598:	e3a01000 	mov	r1, #0
  11959c:	e1a00003 	mov	r0, r3
  1195a0:	eb003d5c 	bl	128b18 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  1195a4:	e51b3010 	ldr	r3, [fp, #-16]
  1195a8:	e2833004 	add	r3, r3, #4
  1195ac:	e3a01000 	mov	r1, #0
  1195b0:	e1a00003 	mov	r0, r3
  1195b4:	eb000cb0 	bl	11c87c <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
  }

#if LWIP_IGMP
  /* stop IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  1195b8:	e51b3010 	ldr	r3, [fp, #-16]
  1195bc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1195c0:	e2033020 	and	r3, r3, #32
  1195c4:	e3530000 	cmp	r3, #0
  1195c8:	0a000001 	beq	1195d4 <netif_remove+0x88>
    igmp_stop(netif);
  1195cc:	e51b0010 	ldr	r0, [fp, #-16]
  1195d0:	eb005a75 	bl	12ffac <igmp_stop>
#if LWIP_IPV6_MLD
  /* stop MLD processing */
  mld6_stop(netif);
#endif /* LWIP_IPV6_MLD */
#endif /* LWIP_IPV6 */
  if (netif_is_up(netif)) {
  1195d4:	e51b3010 	ldr	r3, [fp, #-16]
  1195d8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1195dc:	e2033001 	and	r3, r3, #1
  1195e0:	e6ef3073 	uxtb	r3, r3
  1195e4:	e3530000 	cmp	r3, #0
  1195e8:	0a000001 	beq	1195f4 <netif_remove+0xa8>
    /* set netif down before removing (call callback function) */
    netif_set_down(netif);
  1195ec:	e51b0010 	ldr	r0, [fp, #-16]
  1195f0:	eb00013a 	bl	119ae0 <netif_set_down>
  }

  mib2_remove_ip4(netif);

  /* this netif is default? */
  if (netif_default == netif) {
  1195f4:	e30c3a40 	movw	r3, #51776	; 0xca40
  1195f8:	e3403015 	movt	r3, #21
  1195fc:	e5933000 	ldr	r3, [r3]
  119600:	e51b2010 	ldr	r2, [fp, #-16]
  119604:	e1520003 	cmp	r2, r3
  119608:	1a000001 	bne	119614 <netif_remove+0xc8>
    /* reset default netif */
    netif_set_default(NULL);
  11960c:	e3a00000 	mov	r0, #0
  119610:	eb0000d1 	bl	11995c <netif_set_default>
  }
  /*  is it the first netif? */
  if (netif_list == netif) {
  119614:	e30c3a3c 	movw	r3, #51772	; 0xca3c
  119618:	e3403015 	movt	r3, #21
  11961c:	e5933000 	ldr	r3, [r3]
  119620:	e51b2010 	ldr	r2, [fp, #-16]
  119624:	e1520003 	cmp	r2, r3
  119628:	1a000005 	bne	119644 <netif_remove+0xf8>
    netif_list = netif->next;
  11962c:	e51b3010 	ldr	r3, [fp, #-16]
  119630:	e5932000 	ldr	r2, [r3]
  119634:	e30c3a3c 	movw	r3, #51772	; 0xca3c
  119638:	e3403015 	movt	r3, #21
  11963c:	e5832000 	str	r2, [r3]
  119640:	ea000018 	b	1196a8 <netif_remove+0x15c>
  } else {
    /*  look for netif further down the list */
    struct netif * tmp_netif;
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  119644:	e30c3a3c 	movw	r3, #51772	; 0xca3c
  119648:	e3403015 	movt	r3, #21
  11964c:	e5933000 	ldr	r3, [r3]
  119650:	e50b3008 	str	r3, [fp, #-8]
  119654:	ea00000c 	b	11968c <netif_remove+0x140>
      if (tmp_netif->next == netif) {
  119658:	e51b3008 	ldr	r3, [fp, #-8]
  11965c:	e5933000 	ldr	r3, [r3]
  119660:	e51b2010 	ldr	r2, [fp, #-16]
  119664:	e1520003 	cmp	r2, r3
  119668:	1a000004 	bne	119680 <netif_remove+0x134>
        tmp_netif->next = netif->next;
  11966c:	e51b3010 	ldr	r3, [fp, #-16]
  119670:	e5932000 	ldr	r2, [r3]
  119674:	e51b3008 	ldr	r3, [fp, #-8]
  119678:	e5832000 	str	r2, [r3]
        break;
  11967c:	ea000005 	b	119698 <netif_remove+0x14c>
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  119680:	e51b3008 	ldr	r3, [fp, #-8]
  119684:	e5933000 	ldr	r3, [r3]
  119688:	e50b3008 	str	r3, [fp, #-8]
  11968c:	e51b3008 	ldr	r3, [fp, #-8]
  119690:	e3530000 	cmp	r3, #0
  119694:	1affffef 	bne	119658 <netif_remove+0x10c>
      }
    }
    if (tmp_netif == NULL) {
  119698:	e51b3008 	ldr	r3, [fp, #-8]
  11969c:	e3530000 	cmp	r3, #0
  1196a0:	ea000000 	b	1196a8 <netif_remove+0x15c>
    return;
  1196a4:	e320f000 	nop	{0}
  if (netif->remove_callback) {
    netif->remove_callback(netif);
  }
#endif /* LWIP_NETIF_REMOVE_CALLBACK */
  LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
}
  1196a8:	e24bd004 	sub	sp, fp, #4
  1196ac:	e8bd8800 	pop	{fp, pc}

001196b0 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
  1196b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1196b4:	e28db000 	add	fp, sp, #0
  1196b8:	e24dd014 	sub	sp, sp, #20
  1196bc:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;
  u8_t num;

  if (name == NULL) {
  1196c0:	e51b3010 	ldr	r3, [fp, #-16]
  1196c4:	e3530000 	cmp	r3, #0
  1196c8:	1a000001 	bne	1196d4 <netif_find+0x24>
    return NULL;
  1196cc:	e3a03000 	mov	r3, #0
  1196d0:	ea000024 	b	119768 <netif_find+0xb8>
  }

  num = (u8_t)(name[2] - '0');
  1196d4:	e51b3010 	ldr	r3, [fp, #-16]
  1196d8:	e2833002 	add	r3, r3, #2
  1196dc:	e5d33000 	ldrb	r3, [r3]
  1196e0:	e2433030 	sub	r3, r3, #48	; 0x30
  1196e4:	e54b3009 	strb	r3, [fp, #-9]

  for (netif = netif_list; netif != NULL; netif = netif->next) {
  1196e8:	e30c3a3c 	movw	r3, #51772	; 0xca3c
  1196ec:	e3403015 	movt	r3, #21
  1196f0:	e5933000 	ldr	r3, [r3]
  1196f4:	e50b3008 	str	r3, [fp, #-8]
  1196f8:	ea000016 	b	119758 <netif_find+0xa8>
    if (num == netif->num &&
  1196fc:	e51b3008 	ldr	r3, [fp, #-8]
  119700:	e5d33044 	ldrb	r3, [r3, #68]	; 0x44
  119704:	e55b2009 	ldrb	r2, [fp, #-9]
  119708:	e1520003 	cmp	r2, r3
  11970c:	1a00000e 	bne	11974c <netif_find+0x9c>
       name[0] == netif->name[0] &&
  119710:	e51b3010 	ldr	r3, [fp, #-16]
  119714:	e5d32000 	ldrb	r2, [r3]
  119718:	e51b3008 	ldr	r3, [fp, #-8]
  11971c:	e5d33042 	ldrb	r3, [r3, #66]	; 0x42
    if (num == netif->num &&
  119720:	e1520003 	cmp	r2, r3
  119724:	1a000008 	bne	11974c <netif_find+0x9c>
       name[1] == netif->name[1]) {
  119728:	e51b3010 	ldr	r3, [fp, #-16]
  11972c:	e2833001 	add	r3, r3, #1
  119730:	e5d32000 	ldrb	r2, [r3]
  119734:	e51b3008 	ldr	r3, [fp, #-8]
  119738:	e5d33043 	ldrb	r3, [r3, #67]	; 0x43
       name[0] == netif->name[0] &&
  11973c:	e1520003 	cmp	r2, r3
  119740:	1a000001 	bne	11974c <netif_find+0x9c>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
  119744:	e51b3008 	ldr	r3, [fp, #-8]
  119748:	ea000006 	b	119768 <netif_find+0xb8>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  11974c:	e51b3008 	ldr	r3, [fp, #-8]
  119750:	e5933000 	ldr	r3, [r3]
  119754:	e50b3008 	str	r3, [fp, #-8]
  119758:	e51b3008 	ldr	r3, [fp, #-8]
  11975c:	e3530000 	cmp	r3, #0
  119760:	1affffe5 	bne	1196fc <netif_find+0x4c>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
  119764:	e3a03000 	mov	r3, #0
}
  119768:	e1a00003 	mov	r0, r3
  11976c:	e28bd000 	add	sp, fp, #0
  119770:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119774:	e12fff1e 	bx	lr

00119778 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
  119778:	e92d4800 	push	{fp, lr}
  11977c:	e28db004 	add	fp, sp, #4
  119780:	e24dd010 	sub	sp, sp, #16
  119784:	e50b0010 	str	r0, [fp, #-16]
  119788:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
  11978c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119790:	e3530000 	cmp	r3, #0
  119794:	0a000003 	beq	1197a8 <netif_set_ipaddr+0x30>
  119798:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11979c:	e5933000 	ldr	r3, [r3]
  1197a0:	e50b3008 	str	r3, [fp, #-8]
  1197a4:	ea000003 	b	1197b8 <netif_set_ipaddr+0x40>
  1197a8:	e30938d0 	movw	r3, #39120	; 0x98d0
  1197ac:	e3403014 	movt	r3, #20
  1197b0:	e5933000 	ldr	r3, [r3]
  1197b4:	e50b3008 	str	r3, [fp, #-8]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
  1197b8:	e51b2008 	ldr	r2, [fp, #-8]
  1197bc:	e51b3010 	ldr	r3, [fp, #-16]
  1197c0:	e2833004 	add	r3, r3, #4
  1197c4:	e5933000 	ldr	r3, [r3]
  1197c8:	e1520003 	cmp	r2, r3
  1197cc:	0a00002d 	beq	119888 <netif_set_ipaddr+0x110>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  1197d0:	e51b3010 	ldr	r3, [fp, #-16]
  1197d4:	e2833004 	add	r3, r3, #4
  1197d8:	e24b2008 	sub	r2, fp, #8
  1197dc:	e1a01002 	mov	r1, r2
  1197e0:	e1a00003 	mov	r0, r3
  1197e4:	eb001a56 	bl	120144 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  1197e8:	e51b3010 	ldr	r3, [fp, #-16]
  1197ec:	e2833004 	add	r3, r3, #4
  1197f0:	e24b2008 	sub	r2, fp, #8
  1197f4:	e1a01002 	mov	r1, r2
  1197f8:	e1a00003 	mov	r0, r3
  1197fc:	eb003cc5 	bl	128b18 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  119800:	e51b3010 	ldr	r3, [fp, #-16]
  119804:	e2833004 	add	r3, r3, #4
  119808:	e24b2008 	sub	r2, fp, #8
  11980c:	e1a01002 	mov	r1, r2
  119810:	e1a00003 	mov	r0, r3
  119814:	eb000c18 	bl	11c87c <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
  119818:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11981c:	e3530000 	cmp	r3, #0
  119820:	0a000002 	beq	119830 <netif_set_ipaddr+0xb8>
  119824:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119828:	e5933000 	ldr	r3, [r3]
  11982c:	ea000000 	b	119834 <netif_set_ipaddr+0xbc>
  119830:	e3a03000 	mov	r3, #0
  119834:	e51b2010 	ldr	r2, [fp, #-16]
  119838:	e5823004 	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
  11983c:	e3a01001 	mov	r1, #1
  119840:	e51b0010 	ldr	r0, [fp, #-16]
  119844:	eb000082 	bl	119a54 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
  119848:	e51b3010 	ldr	r3, [fp, #-16]
  11984c:	e593301c 	ldr	r3, [r3, #28]
  119850:	e3530000 	cmp	r3, #0
  119854:	0a000003 	beq	119868 <netif_set_ipaddr+0xf0>
  119858:	e51b3010 	ldr	r3, [fp, #-16]
  11985c:	e593301c 	ldr	r3, [r3, #28]
  119860:	e51b0010 	ldr	r0, [fp, #-16]
  119864:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread sal network interface device set IP address operations */
    netdev_low_level_set_ipaddr(netdev_get_by_name(netif->name), (ip_addr_t *)ipaddr);
  119868:	e51b3010 	ldr	r3, [fp, #-16]
  11986c:	e2833042 	add	r3, r3, #66	; 0x42
  119870:	e1a00003 	mov	r0, r3
  119874:	ebffaf1e 	bl	1054f4 <netdev_get_by_name>
  119878:	e1a03000 	mov	r3, r0
  11987c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119880:	e1a00003 	mov	r0, r3
  119884:	ebffb1ea 	bl	106034 <netdev_low_level_set_ipaddr>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
  119888:	e320f000 	nop	{0}
  11988c:	e24bd004 	sub	sp, fp, #4
  119890:	e8bd8800 	pop	{fp, pc}

00119894 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
  119894:	e92d4800 	push	{fp, lr}
  119898:	e28db004 	add	fp, sp, #4
  11989c:	e24dd008 	sub	sp, sp, #8
  1198a0:	e50b0008 	str	r0, [fp, #-8]
  1198a4:	e50b100c 	str	r1, [fp, #-12]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
  1198a8:	e51b300c 	ldr	r3, [fp, #-12]
  1198ac:	e3530000 	cmp	r3, #0
  1198b0:	0a000002 	beq	1198c0 <netif_set_gw+0x2c>
  1198b4:	e51b300c 	ldr	r3, [fp, #-12]
  1198b8:	e5933000 	ldr	r3, [r3]
  1198bc:	ea000000 	b	1198c4 <netif_set_gw+0x30>
  1198c0:	e3a03000 	mov	r3, #0
  1198c4:	e51b2008 	ldr	r2, [fp, #-8]
  1198c8:	e582300c 	str	r3, [r2, #12]
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));

#ifdef RT_USING_NETDEV
  /* rt_thread network interface device set gateway address */
  netdev_low_level_set_gw(netdev_get_by_name(netif->name), (ip_addr_t *)gw);
  1198cc:	e51b3008 	ldr	r3, [fp, #-8]
  1198d0:	e2833042 	add	r3, r3, #66	; 0x42
  1198d4:	e1a00003 	mov	r0, r3
  1198d8:	ebffaf05 	bl	1054f4 <netdev_get_by_name>
  1198dc:	e1a03000 	mov	r3, r0
  1198e0:	e51b100c 	ldr	r1, [fp, #-12]
  1198e4:	e1a00003 	mov	r0, r3
  1198e8:	ebffb24d 	bl	106224 <netdev_low_level_set_gw>
#endif /* RT_USING_NETDEV */
}
  1198ec:	e320f000 	nop	{0}
  1198f0:	e24bd004 	sub	sp, fp, #4
  1198f4:	e8bd8800 	pop	{fp, pc}

001198f8 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
  1198f8:	e92d4800 	push	{fp, lr}
  1198fc:	e28db004 	add	fp, sp, #4
  119900:	e24dd008 	sub	sp, sp, #8
  119904:	e50b0008 	str	r0, [fp, #-8]
  119908:	e50b100c 	str	r1, [fp, #-12]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
  11990c:	e51b300c 	ldr	r3, [fp, #-12]
  119910:	e3530000 	cmp	r3, #0
  119914:	0a000002 	beq	119924 <netif_set_netmask+0x2c>
  119918:	e51b300c 	ldr	r3, [fp, #-12]
  11991c:	e5933000 	ldr	r3, [r3]
  119920:	ea000000 	b	119928 <netif_set_netmask+0x30>
  119924:	e3a03000 	mov	r3, #0
  119928:	e51b2008 	ldr	r2, [fp, #-8]
  11992c:	e5823008 	str	r3, [r2, #8]
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));

#ifdef RT_USING_NETDEV
  /* rt-thread network interface device set netmask address */
  netdev_low_level_set_netmask(netdev_get_by_name(netif->name), (ip_addr_t *)netmask);
  119930:	e51b3008 	ldr	r3, [fp, #-8]
  119934:	e2833042 	add	r3, r3, #66	; 0x42
  119938:	e1a00003 	mov	r0, r3
  11993c:	ebffaeec 	bl	1054f4 <netdev_get_by_name>
  119940:	e1a03000 	mov	r3, r0
  119944:	e51b100c 	ldr	r1, [fp, #-12]
  119948:	e1a00003 	mov	r0, r3
  11994c:	ebffb1f2 	bl	10611c <netdev_low_level_set_netmask>
#endif /* RT_USING_NETDEV */
}
  119950:	e320f000 	nop	{0}
  119954:	e24bd004 	sub	sp, fp, #4
  119958:	e8bd8800 	pop	{fp, pc}

0011995c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
  11995c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119960:	e28db000 	add	fp, sp, #0
  119964:	e24dd00c 	sub	sp, sp, #12
  119968:	e50b0008 	str	r0, [fp, #-8]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
  11996c:	e30c3a40 	movw	r3, #51776	; 0xca40
  119970:	e3403015 	movt	r3, #21
  119974:	e51b2008 	ldr	r2, [fp, #-8]
  119978:	e5832000 	str	r2, [r3]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
  11997c:	e320f000 	nop	{0}
  119980:	e28bd000 	add	sp, fp, #0
  119984:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119988:	e12fff1e 	bx	lr

0011998c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
  11998c:	e92d4800 	push	{fp, lr}
  119990:	e28db004 	add	fp, sp, #4
  119994:	e24dd008 	sub	sp, sp, #8
  119998:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_UP)) {
  11999c:	e51b3008 	ldr	r3, [fp, #-8]
  1199a0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1199a4:	e2033001 	and	r3, r3, #1
  1199a8:	e3530000 	cmp	r3, #0
  1199ac:	1a000025 	bne	119a48 <netif_set_up+0xbc>
    netif->flags |= NETIF_FLAG_UP;
  1199b0:	e51b3008 	ldr	r3, [fp, #-8]
  1199b4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1199b8:	e3833001 	orr	r3, r3, #1
  1199bc:	e6ef2073 	uxtb	r2, r3
  1199c0:	e51b3008 	ldr	r3, [fp, #-8]
  1199c4:	e5c32041 	strb	r2, [r3, #65]	; 0x41

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  1199c8:	ebffc5d2 	bl	10b118 <sys_now>
  1199cc:	e1a02000 	mov	r2, r0
  1199d0:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  1199d4:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  1199d8:	e0832392 	umull	r2, r3, r2, r3
  1199dc:	e1a021a3 	lsr	r2, r3, #3
  1199e0:	e51b3008 	ldr	r3, [fp, #-8]
  1199e4:	e583204c 	str	r2, [r3, #76]	; 0x4c

    NETIF_STATUS_CALLBACK(netif);
  1199e8:	e51b3008 	ldr	r3, [fp, #-8]
  1199ec:	e593301c 	ldr	r3, [r3, #28]
  1199f0:	e3530000 	cmp	r3, #0
  1199f4:	0a000003 	beq	119a08 <netif_set_up+0x7c>
  1199f8:	e51b3008 	ldr	r3, [fp, #-8]
  1199fc:	e593301c 	ldr	r3, [r3, #28]
  119a00:	e51b0008 	ldr	r0, [fp, #-8]
  119a04:	e12fff33 	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
  119a08:	e51b3008 	ldr	r3, [fp, #-8]
  119a0c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119a10:	e2033004 	and	r3, r3, #4
  119a14:	e3530000 	cmp	r3, #0
  119a18:	0a000002 	beq	119a28 <netif_set_up+0x9c>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  119a1c:	e3a01003 	mov	r1, #3
  119a20:	e51b0008 	ldr	r0, [fp, #-8]
  119a24:	eb00000a 	bl	119a54 <netif_issue_reports>
    }

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set up status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_TRUE);
  119a28:	e51b3008 	ldr	r3, [fp, #-8]
  119a2c:	e2833042 	add	r3, r3, #66	; 0x42
  119a30:	e1a00003 	mov	r0, r3
  119a34:	ebffaeae 	bl	1054f4 <netdev_get_by_name>
  119a38:	e1a03000 	mov	r3, r0
  119a3c:	e3a01001 	mov	r1, #1
  119a40:	e1a00003 	mov	r0, r3
  119a44:	ebffb274 	bl	10641c <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  119a48:	e320f000 	nop	{0}
  119a4c:	e24bd004 	sub	sp, fp, #4
  119a50:	e8bd8800 	pop	{fp, pc}

00119a54 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
  119a54:	e92d4800 	push	{fp, lr}
  119a58:	e28db004 	add	fp, sp, #4
  119a5c:	e24dd008 	sub	sp, sp, #8
  119a60:	e50b0008 	str	r0, [fp, #-8]
  119a64:	e1a03001 	mov	r3, r1
  119a68:	e54b3009 	strb	r3, [fp, #-9]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  119a6c:	e55b3009 	ldrb	r3, [fp, #-9]
  119a70:	e2033001 	and	r3, r3, #1
  119a74:	e3530000 	cmp	r3, #0
  119a78:	0a000015 	beq	119ad4 <netif_issue_reports+0x80>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  119a7c:	e51b3008 	ldr	r3, [fp, #-8]
  119a80:	e2833004 	add	r3, r3, #4
  119a84:	e5933000 	ldr	r3, [r3]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  119a88:	e3530000 	cmp	r3, #0
  119a8c:	0a000010 	beq	119ad4 <netif_issue_reports+0x80>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
  119a90:	e51b3008 	ldr	r3, [fp, #-8]
  119a94:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119a98:	e2033008 	and	r3, r3, #8
  119a9c:	e3530000 	cmp	r3, #0
  119aa0:	0a000004 	beq	119ab8 <netif_issue_reports+0x64>
      etharp_gratuitous(netif);
  119aa4:	e51b3008 	ldr	r3, [fp, #-8]
  119aa8:	e2833004 	add	r3, r3, #4
  119aac:	e1a01003 	mov	r1, r3
  119ab0:	e51b0008 	ldr	r0, [fp, #-8]
  119ab4:	eb005681 	bl	12f4c0 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
  119ab8:	e51b3008 	ldr	r3, [fp, #-8]
  119abc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119ac0:	e2033020 	and	r3, r3, #32
  119ac4:	e3530000 	cmp	r3, #0
  119ac8:	0a000001 	beq	119ad4 <netif_issue_reports+0x80>
      igmp_report_groups(netif);
  119acc:	e51b0008 	ldr	r0, [fp, #-8]
  119ad0:	eb00595a 	bl	130040 <igmp_report_groups>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
  119ad4:	e320f000 	nop	{0}
  119ad8:	e24bd004 	sub	sp, fp, #4
  119adc:	e8bd8800 	pop	{fp, pc}

00119ae0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  119ae0:	e92d4800 	push	{fp, lr}
  119ae4:	e28db004 	add	fp, sp, #4
  119ae8:	e24dd008 	sub	sp, sp, #8
  119aec:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_UP) {
  119af0:	e51b3008 	ldr	r3, [fp, #-8]
  119af4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119af8:	e2033001 	and	r3, r3, #1
  119afc:	e3530000 	cmp	r3, #0
  119b00:	0a000024 	beq	119b98 <netif_set_down+0xb8>
    netif->flags &= ~NETIF_FLAG_UP;
  119b04:	e51b3008 	ldr	r3, [fp, #-8]
  119b08:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119b0c:	e3c33001 	bic	r3, r3, #1
  119b10:	e6ef2073 	uxtb	r2, r3
  119b14:	e51b3008 	ldr	r3, [fp, #-8]
  119b18:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  119b1c:	ebffc57d 	bl	10b118 <sys_now>
  119b20:	e1a02000 	mov	r2, r0
  119b24:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  119b28:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  119b2c:	e0832392 	umull	r2, r3, r2, r3
  119b30:	e1a021a3 	lsr	r2, r3, #3
  119b34:	e51b3008 	ldr	r3, [fp, #-8]
  119b38:	e583204c 	str	r2, [r3, #76]	; 0x4c

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
  119b3c:	e51b3008 	ldr	r3, [fp, #-8]
  119b40:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119b44:	e2033008 	and	r3, r3, #8
  119b48:	e3530000 	cmp	r3, #0
  119b4c:	0a000001 	beq	119b58 <netif_set_down+0x78>
      etharp_cleanup_netif(netif);
  119b50:	e51b0008 	ldr	r0, [fp, #-8]
  119b54:	eb00519f 	bl	12e1d8 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  119b58:	e51b3008 	ldr	r3, [fp, #-8]
  119b5c:	e593301c 	ldr	r3, [r3, #28]
  119b60:	e3530000 	cmp	r3, #0
  119b64:	0a000003 	beq	119b78 <netif_set_down+0x98>
  119b68:	e51b3008 	ldr	r3, [fp, #-8]
  119b6c:	e593301c 	ldr	r3, [r3, #28]
  119b70:	e51b0008 	ldr	r0, [fp, #-8]
  119b74:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set down status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_FALSE);
  119b78:	e51b3008 	ldr	r3, [fp, #-8]
  119b7c:	e2833042 	add	r3, r3, #66	; 0x42
  119b80:	e1a00003 	mov	r0, r3
  119b84:	ebffae5a 	bl	1054f4 <netdev_get_by_name>
  119b88:	e1a03000 	mov	r3, r0
  119b8c:	e3a01000 	mov	r1, #0
  119b90:	e1a00003 	mov	r0, r3
  119b94:	ebffb220 	bl	10641c <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  119b98:	e320f000 	nop	{0}
  119b9c:	e24bd004 	sub	sp, fp, #4
  119ba0:	e8bd8800 	pop	{fp, pc}

00119ba4 <netif_set_status_callback>:
 * @ingroup netif
 * Set callback to be called when interface is brought up/down or address is changed while up
 */
void
netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  119ba4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119ba8:	e28db000 	add	fp, sp, #0
  119bac:	e24dd00c 	sub	sp, sp, #12
  119bb0:	e50b0008 	str	r0, [fp, #-8]
  119bb4:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  119bb8:	e51b3008 	ldr	r3, [fp, #-8]
  119bbc:	e3530000 	cmp	r3, #0
  119bc0:	0a000002 	beq	119bd0 <netif_set_status_callback+0x2c>
    netif->status_callback = status_callback;
  119bc4:	e51b3008 	ldr	r3, [fp, #-8]
  119bc8:	e51b200c 	ldr	r2, [fp, #-12]
  119bcc:	e583201c 	str	r2, [r3, #28]
  }
}
  119bd0:	e320f000 	nop	{0}
  119bd4:	e28bd000 	add	sp, fp, #0
  119bd8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119bdc:	e12fff1e 	bx	lr

00119be0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
  119be0:	e92d4800 	push	{fp, lr}
  119be4:	e28db004 	add	fp, sp, #4
  119be8:	e24dd008 	sub	sp, sp, #8
  119bec:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
  119bf0:	e51b3008 	ldr	r3, [fp, #-8]
  119bf4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119bf8:	e2033004 	and	r3, r3, #4
  119bfc:	e3530000 	cmp	r3, #0
  119c00:	1a00001f 	bne	119c84 <netif_set_link_up+0xa4>
    netif->flags |= NETIF_FLAG_LINK_UP;
  119c04:	e51b3008 	ldr	r3, [fp, #-8]
  119c08:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119c0c:	e3833004 	orr	r3, r3, #4
  119c10:	e6ef2073 	uxtb	r2, r3
  119c14:	e51b3008 	ldr	r3, [fp, #-8]
  119c18:	e5c32041 	strb	r2, [r3, #65]	; 0x41

#if LWIP_DHCP
    dhcp_network_changed(netif);
  119c1c:	e51b0008 	ldr	r0, [fp, #-8]
  119c20:	eb0044e0 	bl	12afa8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
  119c24:	e51b3008 	ldr	r3, [fp, #-8]
  119c28:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119c2c:	e2033001 	and	r3, r3, #1
  119c30:	e3530000 	cmp	r3, #0
  119c34:	0a000002 	beq	119c44 <netif_set_link_up+0x64>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  119c38:	e3a01003 	mov	r1, #3
  119c3c:	e51b0008 	ldr	r0, [fp, #-8]
  119c40:	ebffff83 	bl	119a54 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  119c44:	e51b3008 	ldr	r3, [fp, #-8]
  119c48:	e5933020 	ldr	r3, [r3, #32]
  119c4c:	e3530000 	cmp	r3, #0
  119c50:	0a000003 	beq	119c64 <netif_set_link_up+0x84>
  119c54:	e51b3008 	ldr	r3, [fp, #-8]
  119c58:	e5933020 	ldr	r3, [r3, #32]
  119c5c:	e51b0008 	ldr	r0, [fp, #-8]
  119c60:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link up status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_TRUE);
  119c64:	e51b3008 	ldr	r3, [fp, #-8]
  119c68:	e2833042 	add	r3, r3, #66	; 0x42
  119c6c:	e1a00003 	mov	r0, r3
  119c70:	ebffae1f 	bl	1054f4 <netdev_get_by_name>
  119c74:	e1a03000 	mov	r3, r0
  119c78:	e3a01001 	mov	r1, #1
  119c7c:	e1a00003 	mov	r0, r3
  119c80:	ebffb215 	bl	1064dc <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  119c84:	e320f000 	nop	{0}
  119c88:	e24bd004 	sub	sp, fp, #4
  119c8c:	e8bd8800 	pop	{fp, pc}

00119c90 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
  119c90:	e92d4800 	push	{fp, lr}
  119c94:	e28db004 	add	fp, sp, #4
  119c98:	e24dd008 	sub	sp, sp, #8
  119c9c:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
  119ca0:	e51b3008 	ldr	r3, [fp, #-8]
  119ca4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119ca8:	e2033004 	and	r3, r3, #4
  119cac:	e3530000 	cmp	r3, #0
  119cb0:	0a000015 	beq	119d0c <netif_set_link_down+0x7c>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
  119cb4:	e51b3008 	ldr	r3, [fp, #-8]
  119cb8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119cbc:	e3c33004 	bic	r3, r3, #4
  119cc0:	e6ef2073 	uxtb	r2, r3
  119cc4:	e51b3008 	ldr	r3, [fp, #-8]
  119cc8:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    NETIF_LINK_CALLBACK(netif);
  119ccc:	e51b3008 	ldr	r3, [fp, #-8]
  119cd0:	e5933020 	ldr	r3, [r3, #32]
  119cd4:	e3530000 	cmp	r3, #0
  119cd8:	0a000003 	beq	119cec <netif_set_link_down+0x5c>
  119cdc:	e51b3008 	ldr	r3, [fp, #-8]
  119ce0:	e5933020 	ldr	r3, [r3, #32]
  119ce4:	e51b0008 	ldr	r0, [fp, #-8]
  119ce8:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link down status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_FALSE);
  119cec:	e51b3008 	ldr	r3, [fp, #-8]
  119cf0:	e2833042 	add	r3, r3, #66	; 0x42
  119cf4:	e1a00003 	mov	r0, r3
  119cf8:	ebffadfd 	bl	1054f4 <netdev_get_by_name>
  119cfc:	e1a03000 	mov	r3, r0
  119d00:	e3a01000 	mov	r1, #0
  119d04:	e1a00003 	mov	r0, r3
  119d08:	ebffb1f3 	bl	1064dc <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  119d0c:	e320f000 	nop	{0}
  119d10:	e24bd004 	sub	sp, fp, #4
  119d14:	e8bd8800 	pop	{fp, pc}

00119d18 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
  119d18:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119d1c:	e28db000 	add	fp, sp, #0
  119d20:	e24dd00c 	sub	sp, sp, #12
  119d24:	e50b0008 	str	r0, [fp, #-8]
  119d28:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  119d2c:	e51b3008 	ldr	r3, [fp, #-8]
  119d30:	e3530000 	cmp	r3, #0
  119d34:	0a000002 	beq	119d44 <netif_set_link_callback+0x2c>
    netif->link_callback = link_callback;
  119d38:	e51b3008 	ldr	r3, [fp, #-8]
  119d3c:	e51b200c 	ldr	r2, [fp, #-12]
  119d40:	e5832020 	str	r2, [r3, #32]
  }
}
  119d44:	e320f000 	nop	{0}
  119d48:	e28bd000 	add	sp, fp, #0
  119d4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119d50:	e12fff1e 	bx	lr

00119d54 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
  119d54:	e92d4800 	push	{fp, lr}
  119d58:	e28db004 	add	fp, sp, #4
  119d5c:	e24dd018 	sub	sp, sp, #24
  119d60:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  119d64:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  119d68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119d6c:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  119d70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  119d74:	e1d330b8 	ldrh	r3, [r3, #8]
  119d78:	e3a02000 	mov	r2, #0
  119d7c:	e1a01003 	mov	r1, r3
  119d80:	e3a00002 	mov	r0, #2
  119d84:	eb000133 	bl	11a258 <pbuf_alloc>
  119d88:	e50b0010 	str	r0, [fp, #-16]
  if (r == NULL) {
  119d8c:	e51b3010 	ldr	r3, [fp, #-16]
  119d90:	e3530000 	cmp	r3, #0
  119d94:	1a000016 	bne	119df4 <netif_loop_output+0xa0>
    LINK_STATS_INC(link.memerr);
  119d98:	e30c3a48 	movw	r3, #51784	; 0xca48
  119d9c:	e3403015 	movt	r3, #21
  119da0:	e1d330bc 	ldrh	r3, [r3, #12]
  119da4:	e2833001 	add	r3, r3, #1
  119da8:	e6ff2073 	uxth	r2, r3
  119dac:	e30c3a48 	movw	r3, #51784	; 0xca48
  119db0:	e3403015 	movt	r3, #21
  119db4:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  119db8:	e30c3a48 	movw	r3, #51784	; 0xca48
  119dbc:	e3403015 	movt	r3, #21
  119dc0:	e1d330b6 	ldrh	r3, [r3, #6]
  119dc4:	e2833001 	add	r3, r3, #1
  119dc8:	e6ff2073 	uxth	r2, r3
  119dcc:	e30c3a48 	movw	r3, #51784	; 0xca48
  119dd0:	e3403015 	movt	r3, #21
  119dd4:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  119dd8:	e51b300c 	ldr	r3, [fp, #-12]
  119ddc:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119de0:	e2832001 	add	r2, r3, #1
  119de4:	e51b300c 	ldr	r3, [fp, #-12]
  119de8:	e5832074 	str	r2, [r3, #116]	; 0x74
    return ERR_MEM;
  119dec:	e3e03000 	mvn	r3, #0
  119df0:	ea000063 	b	119f84 <netif_loop_output+0x230>
  }
  netif->loop_cnt_current += clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
  119df4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  119df8:	e51b0010 	ldr	r0, [fp, #-16]
  119dfc:	eb000571 	bl	11b3c8 <pbuf_copy>
  119e00:	e1a03000 	mov	r3, r0
  119e04:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  119e08:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  119e0c:	e3530000 	cmp	r3, #0
  119e10:	0a000018 	beq	119e78 <netif_loop_output+0x124>
    pbuf_free(r);
  119e14:	e51b0010 	ldr	r0, [fp, #-16]
  119e18:	eb000415 	bl	11ae74 <pbuf_free>
    LINK_STATS_INC(link.memerr);
  119e1c:	e30c3a48 	movw	r3, #51784	; 0xca48
  119e20:	e3403015 	movt	r3, #21
  119e24:	e1d330bc 	ldrh	r3, [r3, #12]
  119e28:	e2833001 	add	r3, r3, #1
  119e2c:	e6ff2073 	uxth	r2, r3
  119e30:	e30c3a48 	movw	r3, #51784	; 0xca48
  119e34:	e3403015 	movt	r3, #21
  119e38:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  119e3c:	e30c3a48 	movw	r3, #51784	; 0xca48
  119e40:	e3403015 	movt	r3, #21
  119e44:	e1d330b6 	ldrh	r3, [r3, #6]
  119e48:	e2833001 	add	r3, r3, #1
  119e4c:	e6ff2073 	uxth	r2, r3
  119e50:	e30c3a48 	movw	r3, #51784	; 0xca48
  119e54:	e3403015 	movt	r3, #21
  119e58:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  119e5c:	e51b300c 	ldr	r3, [fp, #-12]
  119e60:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119e64:	e2832001 	add	r2, r3, #1
  119e68:	e51b300c 	ldr	r3, [fp, #-12]
  119e6c:	e5832074 	str	r2, [r3, #116]	; 0x74
    return err;
  119e70:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  119e74:	ea000042 	b	119f84 <netif_loop_output+0x230>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next);
  119e78:	e51b3010 	ldr	r3, [fp, #-16]
  119e7c:	e50b3008 	str	r3, [fp, #-8]
  119e80:	ea000002 	b	119e90 <netif_loop_output+0x13c>
  119e84:	e51b3008 	ldr	r3, [fp, #-8]
  119e88:	e5933000 	ldr	r3, [r3]
  119e8c:	e50b3008 	str	r3, [fp, #-8]
  119e90:	e51b3008 	ldr	r3, [fp, #-8]
  119e94:	e5933000 	ldr	r3, [r3]
  119e98:	e3530000 	cmp	r3, #0
  119e9c:	1afffff8 	bne	119e84 <netif_loop_output+0x130>

  SYS_ARCH_PROTECT(lev);
  119ea0:	ebffa0e5 	bl	10223c <rt_enter_critical>
  if (netif->loop_first != NULL) {
  119ea4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119ea8:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119eac:	e3530000 	cmp	r3, #0
  119eb0:	0a000012 	beq	119f00 <netif_loop_output+0x1ac>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
  119eb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119eb8:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119ebc:	e3530000 	cmp	r3, #0
  119ec0:	1a000006 	bne	119ee0 <netif_loop_output+0x18c>
  119ec4:	e3070560 	movw	r0, #30048	; 0x7560
  119ec8:	e3400014 	movt	r0, #20
  119ecc:	ebffa490 	bl	103114 <rt_kprintf>
  119ed0:	e3001382 	movw	r1, #898	; 0x382
  119ed4:	e3070530 	movw	r0, #30000	; 0x7530
  119ed8:	e3400014 	movt	r0, #20
  119edc:	ebffc474 	bl	10b0b4 <sys_arch_assert>
    netif->loop_last->next = r;
  119ee0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119ee4:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119ee8:	e51b2010 	ldr	r2, [fp, #-16]
  119eec:	e5832000 	str	r2, [r3]
    netif->loop_last = last;
  119ef0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119ef4:	e51b2008 	ldr	r2, [fp, #-8]
  119ef8:	e5832084 	str	r2, [r3, #132]	; 0x84
  119efc:	ea000005 	b	119f18 <netif_loop_output+0x1c4>
  } else {
    netif->loop_first = r;
  119f00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119f04:	e51b2010 	ldr	r2, [fp, #-16]
  119f08:	e5832080 	str	r2, [r3, #128]	; 0x80
    netif->loop_last = last;
  119f0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119f10:	e51b2008 	ldr	r2, [fp, #-8]
  119f14:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
  SYS_ARCH_UNPROTECT(lev);
  119f18:	ebffa0cd 	bl	102254 <rt_exit_critical>

  LINK_STATS_INC(link.xmit);
  119f1c:	e30c3a48 	movw	r3, #51784	; 0xca48
  119f20:	e3403015 	movt	r3, #21
  119f24:	e1d330b0 	ldrh	r3, [r3]
  119f28:	e2833001 	add	r3, r3, #1
  119f2c:	e6ff2073 	uxth	r2, r3
  119f30:	e30c3a48 	movw	r3, #51784	; 0xca48
  119f34:	e3403015 	movt	r3, #21
  119f38:	e1c320b0 	strh	r2, [r3]
  MIB2_STATS_NETIF_ADD(stats_if, ifoutoctets, p->tot_len);
  119f3c:	e51b300c 	ldr	r3, [fp, #-12]
  119f40:	e5933068 	ldr	r3, [r3, #104]	; 0x68
  119f44:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  119f48:	e1d220b8 	ldrh	r2, [r2, #8]
  119f4c:	e0832002 	add	r2, r3, r2
  119f50:	e51b300c 	ldr	r3, [fp, #-12]
  119f54:	e5832068 	str	r2, [r3, #104]	; 0x68
  MIB2_STATS_NETIF_INC(stats_if, ifoutucastpkts);
  119f58:	e51b300c 	ldr	r3, [fp, #-12]
  119f5c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  119f60:	e2832001 	add	r2, r3, #1
  119f64:	e51b300c 	ldr	r3, [fp, #-12]
  119f68:	e583206c 	str	r2, [r3, #108]	; 0x6c

#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  /* For multithreading environment, schedule a call to netif_poll */
  tcpip_callback_with_block((tcpip_callback_fn)netif_poll, netif, 0);
  119f6c:	e3a02000 	mov	r2, #0
  119f70:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  119f74:	e3090f90 	movw	r0, #40848	; 0x9f90
  119f78:	e3400011 	movt	r0, #17
  119f7c:	ebfff084 	bl	116194 <tcpip_callback_with_block>
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
  119f80:	e3a03000 	mov	r3, #0
}
  119f84:	e1a00003 	mov	r0, r3
  119f88:	e24bd004 	sub	sp, fp, #4
  119f8c:	e8bd8800 	pop	{fp, pc}

00119f90 <netif_poll>:
 * netif_loop_output() are put on a list that is passed to netif->input() by
 * netif_poll().
 */
void
netif_poll(struct netif *netif)
{
  119f90:	e92d4800 	push	{fp, lr}
  119f94:	e28db004 	add	fp, sp, #4
  119f98:	e24dd018 	sub	sp, sp, #24
  119f9c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  119fa0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119fa4:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Get a packet from the list. With SYS_LIGHTWEIGHT_PROT=1, this is protected */
  SYS_ARCH_PROTECT(lev);
  119fa8:	ebffa0a3 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  119fac:	ea000056 	b	11a10c <netif_poll+0x17c>
    struct pbuf *in, *in_end;
#if LWIP_LOOPBACK_MAX_PBUFS
    u8_t clen = 1;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    in = in_end = netif->loop_first;
  119fb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119fb4:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119fb8:	e50b3008 	str	r3, [fp, #-8]
  119fbc:	e51b3008 	ldr	r3, [fp, #-8]
  119fc0:	e50b3010 	str	r3, [fp, #-16]
    while (in_end->len != in_end->tot_len) {
  119fc4:	ea00000d 	b	11a000 <netif_poll+0x70>
      LWIP_ASSERT("bogus pbuf: len != tot_len but next == NULL!", in_end->next != NULL);
  119fc8:	e51b3008 	ldr	r3, [fp, #-8]
  119fcc:	e5933000 	ldr	r3, [r3]
  119fd0:	e3530000 	cmp	r3, #0
  119fd4:	1a000006 	bne	119ff4 <netif_poll+0x64>
  119fd8:	e307058c 	movw	r0, #30092	; 0x758c
  119fdc:	e3400014 	movt	r0, #20
  119fe0:	ebffa44b 	bl	103114 <rt_kprintf>
  119fe4:	e30013ca 	movw	r1, #970	; 0x3ca
  119fe8:	e3070530 	movw	r0, #30000	; 0x7530
  119fec:	e3400014 	movt	r0, #20
  119ff0:	ebffc42f 	bl	10b0b4 <sys_arch_assert>
      in_end = in_end->next;
  119ff4:	e51b3008 	ldr	r3, [fp, #-8]
  119ff8:	e5933000 	ldr	r3, [r3]
  119ffc:	e50b3008 	str	r3, [fp, #-8]
    while (in_end->len != in_end->tot_len) {
  11a000:	e51b3008 	ldr	r3, [fp, #-8]
  11a004:	e1d320ba 	ldrh	r2, [r3, #10]
  11a008:	e51b3008 	ldr	r3, [fp, #-8]
  11a00c:	e1d330b8 	ldrh	r3, [r3, #8]
  11a010:	e1520003 	cmp	r2, r3
  11a014:	1affffeb 	bne	119fc8 <netif_poll+0x38>
      ((netif->loop_cnt_current - clen) < netif->loop_cnt_current));
    netif->loop_cnt_current -= clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    /* 'in_end' now points to the last pbuf from 'in' */
    if (in_end == netif->loop_last) {
  11a018:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a01c:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11a020:	e51b2008 	ldr	r2, [fp, #-8]
  11a024:	e1520003 	cmp	r2, r3
  11a028:	1a000007 	bne	11a04c <netif_poll+0xbc>
      /* this was the last pbuf in the list */
      netif->loop_first = netif->loop_last = NULL;
  11a02c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a030:	e3a02000 	mov	r2, #0
  11a034:	e5832084 	str	r2, [r3, #132]	; 0x84
  11a038:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a03c:	e5932084 	ldr	r2, [r3, #132]	; 0x84
  11a040:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a044:	e5832080 	str	r2, [r3, #128]	; 0x80
  11a048:	ea00000e 	b	11a088 <netif_poll+0xf8>
    } else {
      /* pop the pbuf off the list */
      netif->loop_first = in_end->next;
  11a04c:	e51b3008 	ldr	r3, [fp, #-8]
  11a050:	e5932000 	ldr	r2, [r3]
  11a054:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a058:	e5832080 	str	r2, [r3, #128]	; 0x80
      LWIP_ASSERT("should not be null since first != last!", netif->loop_first != NULL);
  11a05c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a060:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  11a064:	e3530000 	cmp	r3, #0
  11a068:	1a000006 	bne	11a088 <netif_poll+0xf8>
  11a06c:	e30705bc 	movw	r0, #30140	; 0x75bc
  11a070:	e3400014 	movt	r0, #20
  11a074:	ebffa426 	bl	103114 <rt_kprintf>
  11a078:	e30013de 	movw	r1, #990	; 0x3de
  11a07c:	e3070530 	movw	r0, #30000	; 0x7530
  11a080:	e3400014 	movt	r0, #20
  11a084:	ebffc40a 	bl	10b0b4 <sys_arch_assert>
    }
    /* De-queue the pbuf from its successors on the 'loop_' list. */
    in_end->next = NULL;
  11a088:	e51b3008 	ldr	r3, [fp, #-8]
  11a08c:	e3a02000 	mov	r2, #0
  11a090:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  11a094:	ebffa06e 	bl	102254 <rt_exit_critical>

    LINK_STATS_INC(link.recv);
  11a098:	e30c3a48 	movw	r3, #51784	; 0xca48
  11a09c:	e3403015 	movt	r3, #21
  11a0a0:	e1d330b2 	ldrh	r3, [r3, #2]
  11a0a4:	e2833001 	add	r3, r3, #1
  11a0a8:	e6ff2073 	uxth	r2, r3
  11a0ac:	e30c3a48 	movw	r3, #51784	; 0xca48
  11a0b0:	e3403015 	movt	r3, #21
  11a0b4:	e1c320b2 	strh	r2, [r3, #2]
    MIB2_STATS_NETIF_ADD(stats_if, ifinoctets, in->tot_len);
  11a0b8:	e51b300c 	ldr	r3, [fp, #-12]
  11a0bc:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  11a0c0:	e51b2010 	ldr	r2, [fp, #-16]
  11a0c4:	e1d220b8 	ldrh	r2, [r2, #8]
  11a0c8:	e0832002 	add	r2, r3, r2
  11a0cc:	e51b300c 	ldr	r3, [fp, #-12]
  11a0d0:	e5832050 	str	r2, [r3, #80]	; 0x50
    MIB2_STATS_NETIF_INC(stats_if, ifinucastpkts);
  11a0d4:	e51b300c 	ldr	r3, [fp, #-12]
  11a0d8:	e5933054 	ldr	r3, [r3, #84]	; 0x54
  11a0dc:	e2832001 	add	r2, r3, #1
  11a0e0:	e51b300c 	ldr	r3, [fp, #-12]
  11a0e4:	e5832054 	str	r2, [r3, #84]	; 0x54
    /* loopback packets are always IP packets! */
    if (ip_input(in, netif) != ERR_OK) {
  11a0e8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11a0ec:	e51b0010 	ldr	r0, [fp, #-16]
  11a0f0:	eb005cc0 	bl	1313f8 <ip4_input>
  11a0f4:	e1a03000 	mov	r3, r0
  11a0f8:	e3530000 	cmp	r3, #0
  11a0fc:	0a000001 	beq	11a108 <netif_poll+0x178>
      pbuf_free(in);
  11a100:	e51b0010 	ldr	r0, [fp, #-16]
  11a104:	eb00035a 	bl	11ae74 <pbuf_free>
    }
    SYS_ARCH_PROTECT(lev);
  11a108:	ebffa04b 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  11a10c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a110:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  11a114:	e3530000 	cmp	r3, #0
  11a118:	1affffa4 	bne	119fb0 <netif_poll+0x20>
  }
  SYS_ARCH_UNPROTECT(lev);
  11a11c:	ebffa04c 	bl	102254 <rt_exit_critical>
}
  11a120:	e320f000 	nop	{0}
  11a124:	e24bd004 	sub	sp, fp, #4
  11a128:	e8bd8800 	pop	{fp, pc}

0011a12c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
  11a12c:	e92d4800 	push	{fp, lr}
  11a130:	e28db004 	add	fp, sp, #4
  11a134:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
  11a138:	ebffa03f 	bl	10223c <rt_enter_critical>
  11a13c:	e30c3a44 	movw	r3, #51780	; 0xca44
  11a140:	e3403015 	movt	r3, #21
  11a144:	e3a02000 	mov	r2, #0
  11a148:	e5c32000 	strb	r2, [r3]
  11a14c:	ebffa040 	bl	102254 <rt_exit_critical>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  11a150:	e30c3c38 	movw	r3, #52280	; 0xcc38
  11a154:	e3403015 	movt	r3, #21
  11a158:	e5933000 	ldr	r3, [r3]
  11a15c:	e50b3008 	str	r3, [fp, #-8]
  11a160:	ea00000e 	b	11a1a0 <pbuf_free_ooseq+0x74>
    if (NULL != pcb->ooseq) {
  11a164:	e51b3008 	ldr	r3, [fp, #-8]
  11a168:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11a16c:	e3530000 	cmp	r3, #0
  11a170:	0a000007 	beq	11a194 <pbuf_free_ooseq+0x68>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
  11a174:	e51b3008 	ldr	r3, [fp, #-8]
  11a178:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11a17c:	e1a00003 	mov	r0, r3
  11a180:	eb00149d 	bl	11f3fc <tcp_segs_free>
      pcb->ooseq = NULL;
  11a184:	e51b3008 	ldr	r3, [fp, #-8]
  11a188:	e3a02000 	mov	r2, #0
  11a18c:	e5832074 	str	r2, [r3, #116]	; 0x74
      return;
  11a190:	ea000005 	b	11a1ac <pbuf_free_ooseq+0x80>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  11a194:	e51b3008 	ldr	r3, [fp, #-8]
  11a198:	e593300c 	ldr	r3, [r3, #12]
  11a19c:	e50b3008 	str	r3, [fp, #-8]
  11a1a0:	e51b3008 	ldr	r3, [fp, #-8]
  11a1a4:	e3530000 	cmp	r3, #0
  11a1a8:	1affffed 	bne	11a164 <pbuf_free_ooseq+0x38>
    }
  }
}
  11a1ac:	e24bd004 	sub	sp, fp, #4
  11a1b0:	e8bd8800 	pop	{fp, pc}

0011a1b4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
  11a1b4:	e92d4800 	push	{fp, lr}
  11a1b8:	e28db004 	add	fp, sp, #4
  11a1bc:	e24dd008 	sub	sp, sp, #8
  11a1c0:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
  11a1c4:	ebffffd8 	bl	11a12c <pbuf_free_ooseq>
}
  11a1c8:	e320f000 	nop	{0}
  11a1cc:	e24bd004 	sub	sp, fp, #4
  11a1d0:	e8bd8800 	pop	{fp, pc}

0011a1d4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
  11a1d4:	e92d4800 	push	{fp, lr}
  11a1d8:	e28db004 	add	fp, sp, #4
  11a1dc:	e24dd008 	sub	sp, sp, #8
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  11a1e0:	ebffa015 	bl	10223c <rt_enter_critical>
  queued = pbuf_free_ooseq_pending;
  11a1e4:	e30c3a44 	movw	r3, #51780	; 0xca44
  11a1e8:	e3403015 	movt	r3, #21
  11a1ec:	e5d33000 	ldrb	r3, [r3]
  11a1f0:	e54b3005 	strb	r3, [fp, #-5]
  pbuf_free_ooseq_pending = 1;
  11a1f4:	e30c3a44 	movw	r3, #51780	; 0xca44
  11a1f8:	e3403015 	movt	r3, #21
  11a1fc:	e3a02001 	mov	r2, #1
  11a200:	e5c32000 	strb	r2, [r3]
  SYS_ARCH_UNPROTECT(old_level);
  11a204:	ebffa012 	bl	102254 <rt_exit_critical>

  if (!queued) {
  11a208:	e55b3005 	ldrb	r3, [fp, #-5]
  11a20c:	e3530000 	cmp	r3, #0
  11a210:	1a00000d 	bne	11a24c <pbuf_pool_is_empty+0x78>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  11a214:	e3a02000 	mov	r2, #0
  11a218:	e3a01000 	mov	r1, #0
  11a21c:	e30a01b4 	movw	r0, #41396	; 0xa1b4
  11a220:	e3400011 	movt	r0, #17
  11a224:	ebffefda 	bl	116194 <tcpip_callback_with_block>
  11a228:	e1a03000 	mov	r3, r0
  11a22c:	e3530000 	cmp	r3, #0
  11a230:	0a000005 	beq	11a24c <pbuf_pool_is_empty+0x78>
  11a234:	ebffa000 	bl	10223c <rt_enter_critical>
  11a238:	e30c3a44 	movw	r3, #51780	; 0xca44
  11a23c:	e3403015 	movt	r3, #21
  11a240:	e3a02000 	mov	r2, #0
  11a244:	e5c32000 	strb	r2, [r3]
  11a248:	ebffa001 	bl	102254 <rt_exit_critical>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
  11a24c:	e320f000 	nop	{0}
  11a250:	e24bd004 	sub	sp, fp, #4
  11a254:	e8bd8800 	pop	{fp, pc}

0011a258 <pbuf_alloc>:
 * is the first pbuf of a pbuf chain.
 */
#include <stdio.h>
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
  11a258:	e92d4800 	push	{fp, lr}
  11a25c:	e28db004 	add	fp, sp, #4
  11a260:	e24dd028 	sub	sp, sp, #40	; 0x28
  11a264:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11a268:	e1a03001 	mov	r3, r1
  11a26c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  11a270:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
  11a274:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11a278:	e3530004 	cmp	r3, #4
  11a27c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a280:	ea000013 	b	11a2d4 <pbuf_alloc+0x7c>
  11a284:	0011a298 	.word	0x0011a298
  11a288:	0011a2a4 	.word	0x0011a2a4
  11a28c:	0011a2b0 	.word	0x0011a2b0
  11a290:	0011a2bc 	.word	0x0011a2bc
  11a294:	0011a2c8 	.word	0x0011a2c8
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  11a298:	e3a03038 	mov	r3, #56	; 0x38
  11a29c:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a2a0:	ea000014 	b	11a2f8 <pbuf_alloc+0xa0>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  11a2a4:	e3a03024 	mov	r3, #36	; 0x24
  11a2a8:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a2ac:	ea000011 	b	11a2f8 <pbuf_alloc+0xa0>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  11a2b0:	e3a03010 	mov	r3, #16
  11a2b4:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a2b8:	ea00000e 	b	11a2f8 <pbuf_alloc+0xa0>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  11a2bc:	e3a03000 	mov	r3, #0
  11a2c0:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a2c4:	ea00000b 	b	11a2f8 <pbuf_alloc+0xa0>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
  11a2c8:	e3a03000 	mov	r3, #0
  11a2cc:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a2d0:	ea000008 	b	11a2f8 <pbuf_alloc+0xa0>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
  11a2d4:	e30705e4 	movw	r0, #30180	; 0x75e4
  11a2d8:	e3400014 	movt	r0, #20
  11a2dc:	ebffa38c 	bl	103114 <rt_kprintf>
  11a2e0:	e3001117 	movw	r1, #279	; 0x117
  11a2e4:	e3070600 	movw	r0, #30208	; 0x7600
  11a2e8:	e3400014 	movt	r0, #20
  11a2ec:	ebffc370 	bl	10b0b4 <sys_arch_assert>
    return NULL;
  11a2f0:	e3a03000 	mov	r3, #0
  11a2f4:	ea000139 	b	11a7e0 <pbuf_alloc+0x588>
  }

  switch (type) {
  11a2f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a2fc:	e3530003 	cmp	r3, #3
  11a300:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a304:	ea000124 	b	11a79c <pbuf_alloc+0x544>
  11a308:	0011a624 	.word	0x0011a624
  11a30c:	0011a728 	.word	0x0011a728
  11a310:	0011a728 	.word	0x0011a728
  11a314:	0011a318 	.word	0x0011a318
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  11a318:	e300211e 	movw	r2, #286	; 0x11e
  11a31c:	e3071600 	movw	r1, #30208	; 0x7600
  11a320:	e3401014 	movt	r1, #20
  11a324:	e3a00010 	mov	r0, #16
  11a328:	ebfffb5b 	bl	11909c <memp_malloc_fn>
  11a32c:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
  11a330:	e51b3008 	ldr	r3, [fp, #-8]
  11a334:	e3530000 	cmp	r3, #0
  11a338:	1a000002 	bne	11a348 <pbuf_alloc+0xf0>
      PBUF_POOL_IS_EMPTY();
  11a33c:	ebffffa4 	bl	11a1d4 <pbuf_pool_is_empty>
      return NULL;
  11a340:	e3a03000 	mov	r3, #0
  11a344:	ea000125 	b	11a7e0 <pbuf_alloc+0x588>
    }
    p->type = type;
  11a348:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a34c:	e6ef2073 	uxtb	r2, r3
  11a350:	e51b3008 	ldr	r3, [fp, #-8]
  11a354:	e5c3200c 	strb	r2, [r3, #12]
    p->next = NULL;
  11a358:	e51b3008 	ldr	r3, [fp, #-8]
  11a35c:	e3a02000 	mov	r2, #0
  11a360:	e5832000 	str	r2, [r3]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  11a364:	e15b30be 	ldrh	r3, [fp, #-14]
  11a368:	e2833010 	add	r3, r3, #16
  11a36c:	e51b2008 	ldr	r2, [fp, #-8]
  11a370:	e0823003 	add	r3, r2, r3
  11a374:	e2833003 	add	r3, r3, #3
  11a378:	e3c33003 	bic	r3, r3, #3
  11a37c:	e1a02003 	mov	r2, r3
  11a380:	e51b3008 	ldr	r3, [fp, #-8]
  11a384:	e5832004 	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
  11a388:	e51b3008 	ldr	r3, [fp, #-8]
  11a38c:	e5933004 	ldr	r3, [r3, #4]
  11a390:	e2033003 	and	r3, r3, #3
  11a394:	e3530000 	cmp	r3, #0
  11a398:	0a000006 	beq	11a3b8 <pbuf_alloc+0x160>
  11a39c:	e307062c 	movw	r0, #30252	; 0x762c
  11a3a0:	e3400014 	movt	r0, #20
  11a3a4:	ebffa35a 	bl	103114 <rt_kprintf>
  11a3a8:	e300112a 	movw	r1, #298	; 0x12a
  11a3ac:	e3070600 	movw	r0, #30208	; 0x7600
  11a3b0:	e3400014 	movt	r0, #20
  11a3b4:	ebffc33e 	bl	10b0b4 <sys_arch_assert>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
  11a3b8:	e51b3008 	ldr	r3, [fp, #-8]
  11a3bc:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a3c0:	e1c320b8 	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  11a3c4:	e15b30be 	ldrh	r3, [fp, #-14]
  11a3c8:	e2833003 	add	r3, r3, #3
  11a3cc:	e3c33003 	bic	r3, r3, #3
  11a3d0:	e2633e5e 	rsb	r3, r3, #1504	; 0x5e0
  11a3d4:	e283300c 	add	r3, r3, #12
  11a3d8:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a3dc:	e1530002 	cmp	r3, r2
  11a3e0:	31a03003 	movcc	r3, r3
  11a3e4:	21a03002 	movcs	r3, r2
  11a3e8:	e6ff2073 	uxth	r2, r3
  11a3ec:	e51b3008 	ldr	r3, [fp, #-8]
  11a3f0:	e1c320ba 	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a3f4:	e51b3008 	ldr	r3, [fp, #-8]
  11a3f8:	e5933004 	ldr	r3, [r3, #4]
  11a3fc:	e51b2008 	ldr	r2, [fp, #-8]
  11a400:	e1d220ba 	ldrh	r2, [r2, #10]
  11a404:	e0832002 	add	r2, r3, r2
  11a408:	e51b3008 	ldr	r3, [fp, #-8]
  11a40c:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a410:	e283300c 	add	r3, r3, #12
  11a414:	e1520003 	cmp	r2, r3
  11a418:	9a000006 	bls	11a438 <pbuf_alloc+0x1e0>
  11a41c:	e307065c 	movw	r0, #30300	; 0x765c
  11a420:	e3400014 	movt	r0, #20
  11a424:	ebffa33a 	bl	103114 <rt_kprintf>
  11a428:	e3001131 	movw	r1, #305	; 0x131
  11a42c:	e3070600 	movw	r0, #30208	; 0x7600
  11a430:	e3400014 	movt	r0, #20
  11a434:	ebffc31e 	bl	10b0b4 <sys_arch_assert>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
  11a438:	e15b30be 	ldrh	r3, [fp, #-14]
  11a43c:	e2833003 	add	r3, r3, #3
  11a440:	e3c33003 	bic	r3, r3, #3
  11a444:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a448:	e1530002 	cmp	r3, r2
  11a44c:	1a000006 	bne	11a46c <pbuf_alloc+0x214>
  11a450:	e3070690 	movw	r0, #30352	; 0x7690
  11a454:	e3400014 	movt	r0, #20
  11a458:	ebffa32d 	bl	103114 <rt_kprintf>
  11a45c:	e3001133 	movw	r1, #307	; 0x133
  11a460:	e3070600 	movw	r0, #30208	; 0x7600
  11a464:	e3400014 	movt	r0, #20
  11a468:	ebffc311 	bl	10b0b4 <sys_arch_assert>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
  11a46c:	e51b3008 	ldr	r3, [fp, #-8]
  11a470:	e3a02001 	mov	r2, #1
  11a474:	e1c320be 	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
  11a478:	e51b3008 	ldr	r3, [fp, #-8]
  11a47c:	e50b300c 	str	r3, [fp, #-12]
    /* remaining length to be allocated */
    rem_len = length - p->len;
  11a480:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a484:	e51b2008 	ldr	r2, [fp, #-8]
  11a488:	e1d220ba 	ldrh	r2, [r2, #10]
  11a48c:	e0433002 	sub	r3, r3, r2
  11a490:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  11a494:	ea00005e 	b	11a614 <pbuf_alloc+0x3bc>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  11a498:	e300213f 	movw	r2, #319	; 0x13f
  11a49c:	e3071600 	movw	r1, #30208	; 0x7600
  11a4a0:	e3401014 	movt	r1, #20
  11a4a4:	e3a00010 	mov	r0, #16
  11a4a8:	ebfffafb 	bl	11909c <memp_malloc_fn>
  11a4ac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
      if (q == NULL) {
  11a4b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a4b4:	e3530000 	cmp	r3, #0
  11a4b8:	1a000004 	bne	11a4d0 <pbuf_alloc+0x278>
        PBUF_POOL_IS_EMPTY();
  11a4bc:	ebffff44 	bl	11a1d4 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
  11a4c0:	e51b0008 	ldr	r0, [fp, #-8]
  11a4c4:	eb00026a 	bl	11ae74 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
  11a4c8:	e3a03000 	mov	r3, #0
  11a4cc:	ea0000c3 	b	11a7e0 <pbuf_alloc+0x588>
      }
      q->type = type;
  11a4d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a4d4:	e6ef2073 	uxtb	r2, r3
  11a4d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a4dc:	e5c3200c 	strb	r2, [r3, #12]
      q->flags = 0;
  11a4e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a4e4:	e3a02000 	mov	r2, #0
  11a4e8:	e5c3200d 	strb	r2, [r3, #13]
      q->next = NULL;
  11a4ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a4f0:	e3a02000 	mov	r2, #0
  11a4f4:	e5832000 	str	r2, [r3]
      /* make previous pbuf point to this pbuf */
      r->next = q;
  11a4f8:	e51b300c 	ldr	r3, [fp, #-12]
  11a4fc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11a500:	e5832000 	str	r2, [r3]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
  11a504:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a508:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11a50c:	e1530002 	cmp	r3, r2
  11a510:	da000006 	ble	11a530 <pbuf_alloc+0x2d8>
  11a514:	e30706c4 	movw	r0, #30404	; 0x76c4
  11a518:	e3400014 	movt	r0, #20
  11a51c:	ebffa2fc 	bl	103114 <rt_kprintf>
  11a520:	e300114d 	movw	r1, #333	; 0x14d
  11a524:	e3070600 	movw	r0, #30208	; 0x7600
  11a528:	e3400014 	movt	r0, #20
  11a52c:	ebffc2e0 	bl	10b0b4 <sys_arch_assert>
      q->tot_len = (u16_t)rem_len;
  11a530:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a534:	e6ff2073 	uxth	r2, r3
  11a538:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a53c:	e1c320b8 	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  11a540:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a544:	e6ff3073 	uxth	r3, r3
  11a548:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a54c:	e1530002 	cmp	r3, r2
  11a550:	31a03003 	movcc	r3, r3
  11a554:	21a03002 	movcs	r3, r2
  11a558:	e6ff2073 	uxth	r2, r3
  11a55c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a560:	e1c320ba 	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  11a564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a568:	e2832010 	add	r2, r3, #16
  11a56c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a570:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
  11a574:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a578:	e5933004 	ldr	r3, [r3, #4]
  11a57c:	e2033003 	and	r3, r3, #3
  11a580:	e3530000 	cmp	r3, #0
  11a584:	0a000006 	beq	11a5a4 <pbuf_alloc+0x34c>
  11a588:	e30706d8 	movw	r0, #30424	; 0x76d8
  11a58c:	e3400014 	movt	r0, #20
  11a590:	ebffa2df 	bl	103114 <rt_kprintf>
  11a594:	e3001153 	movw	r1, #339	; 0x153
  11a598:	e3070600 	movw	r0, #30208	; 0x7600
  11a59c:	e3400014 	movt	r0, #20
  11a5a0:	ebffc2c3 	bl	10b0b4 <sys_arch_assert>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a5a4:	e51b3008 	ldr	r3, [fp, #-8]
  11a5a8:	e5933004 	ldr	r3, [r3, #4]
  11a5ac:	e51b2008 	ldr	r2, [fp, #-8]
  11a5b0:	e1d220ba 	ldrh	r2, [r2, #10]
  11a5b4:	e0832002 	add	r2, r3, r2
  11a5b8:	e51b3008 	ldr	r3, [fp, #-8]
  11a5bc:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a5c0:	e283300c 	add	r3, r3, #12
  11a5c4:	e1520003 	cmp	r2, r3
  11a5c8:	9a000006 	bls	11a5e8 <pbuf_alloc+0x390>
  11a5cc:	e307065c 	movw	r0, #30300	; 0x765c
  11a5d0:	e3400014 	movt	r0, #20
  11a5d4:	ebffa2ce 	bl	103114 <rt_kprintf>
  11a5d8:	e3001156 	movw	r1, #342	; 0x156
  11a5dc:	e3070600 	movw	r0, #30208	; 0x7600
  11a5e0:	e3400014 	movt	r0, #20
  11a5e4:	ebffc2b2 	bl	10b0b4 <sys_arch_assert>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
  11a5e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a5ec:	e3a02001 	mov	r2, #1
  11a5f0:	e1c320be 	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
  11a5f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a5f8:	e1d330ba 	ldrh	r3, [r3, #10]
  11a5fc:	e1a02003 	mov	r2, r3
  11a600:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a604:	e0433002 	sub	r3, r3, r2
  11a608:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* remember this pbuf for linkage in next iteration */
      r = q;
  11a60c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a610:	e50b300c 	str	r3, [fp, #-12]
    while (rem_len > 0) {
  11a614:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a618:	e3530000 	cmp	r3, #0
  11a61c:	caffff9d 	bgt	11a498 <pbuf_alloc+0x240>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
  11a620:	ea000067 	b	11a7c4 <pbuf_alloc+0x56c>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
  11a624:	e15b30be 	ldrh	r3, [fp, #-14]
  11a628:	e2833013 	add	r3, r3, #19
  11a62c:	e6ff3073 	uxth	r3, r3
  11a630:	e3c33003 	bic	r3, r3, #3
  11a634:	e6ff2073 	uxth	r2, r3
  11a638:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a63c:	e2833003 	add	r3, r3, #3
  11a640:	e6ff3073 	uxth	r3, r3
  11a644:	e3c33003 	bic	r3, r3, #3
  11a648:	e6ff3073 	uxth	r3, r3
  11a64c:	e0823003 	add	r3, r2, r3
  11a650:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
  11a654:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11a658:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a65c:	e2833003 	add	r3, r3, #3
  11a660:	e3c33003 	bic	r3, r3, #3
  11a664:	e1520003 	cmp	r2, r3
  11a668:	2a000001 	bcs	11a674 <pbuf_alloc+0x41c>
        return NULL;
  11a66c:	e3a03000 	mov	r3, #0
  11a670:	ea00005a 	b	11a7e0 <pbuf_alloc+0x588>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
  11a674:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11a678:	e1a00003 	mov	r0, r3
  11a67c:	ebffc2cd 	bl	10b1b8 <mem_malloc>
  11a680:	e50b0008 	str	r0, [fp, #-8]
    }

    if (p == NULL) {
  11a684:	e51b3008 	ldr	r3, [fp, #-8]
  11a688:	e3530000 	cmp	r3, #0
  11a68c:	1a000001 	bne	11a698 <pbuf_alloc+0x440>
      return NULL;
  11a690:	e3a03000 	mov	r3, #0
  11a694:	ea000051 	b	11a7e0 <pbuf_alloc+0x588>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  11a698:	e15b30be 	ldrh	r3, [fp, #-14]
  11a69c:	e2833010 	add	r3, r3, #16
  11a6a0:	e51b2008 	ldr	r2, [fp, #-8]
  11a6a4:	e0823003 	add	r3, r2, r3
  11a6a8:	e2833003 	add	r3, r3, #3
  11a6ac:	e3c33003 	bic	r3, r3, #3
  11a6b0:	e1a02003 	mov	r2, r3
  11a6b4:	e51b3008 	ldr	r3, [fp, #-8]
  11a6b8:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a6bc:	e51b3008 	ldr	r3, [fp, #-8]
  11a6c0:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a6c4:	e1c320b8 	strh	r2, [r3, #8]
  11a6c8:	e51b3008 	ldr	r3, [fp, #-8]
  11a6cc:	e1d320b8 	ldrh	r2, [r3, #8]
  11a6d0:	e51b3008 	ldr	r3, [fp, #-8]
  11a6d4:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a6d8:	e51b3008 	ldr	r3, [fp, #-8]
  11a6dc:	e3a02000 	mov	r2, #0
  11a6e0:	e5832000 	str	r2, [r3]
    p->type = type;
  11a6e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a6e8:	e6ef2073 	uxtb	r2, r3
  11a6ec:	e51b3008 	ldr	r3, [fp, #-8]
  11a6f0:	e5c3200c 	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
  11a6f4:	e51b3008 	ldr	r3, [fp, #-8]
  11a6f8:	e5933004 	ldr	r3, [r3, #4]
  11a6fc:	e2033003 	and	r3, r3, #3
  11a700:	e3530000 	cmp	r3, #0
  11a704:	0a00002d 	beq	11a7c0 <pbuf_alloc+0x568>
  11a708:	e3070708 	movw	r0, #30472	; 0x7708
  11a70c:	e3400014 	movt	r0, #20
  11a710:	ebffa27f 	bl	103114 <rt_kprintf>
  11a714:	e3a01f5e 	mov	r1, #376	; 0x178
  11a718:	e3070600 	movw	r0, #30208	; 0x7600
  11a71c:	e3400014 	movt	r0, #20
  11a720:	ebffc263 	bl	10b0b4 <sys_arch_assert>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
  11a724:	ea000025 	b	11a7c0 <pbuf_alloc+0x568>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  11a728:	e300217f 	movw	r2, #383	; 0x17f
  11a72c:	e3071600 	movw	r1, #30208	; 0x7600
  11a730:	e3401014 	movt	r1, #20
  11a734:	e3a0000f 	mov	r0, #15
  11a738:	ebfffa57 	bl	11909c <memp_malloc_fn>
  11a73c:	e50b0008 	str	r0, [fp, #-8]
    if (p == NULL) {
  11a740:	e51b3008 	ldr	r3, [fp, #-8]
  11a744:	e3530000 	cmp	r3, #0
  11a748:	1a000001 	bne	11a754 <pbuf_alloc+0x4fc>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
  11a74c:	e3a03000 	mov	r3, #0
  11a750:	ea000022 	b	11a7e0 <pbuf_alloc+0x588>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
  11a754:	e51b3008 	ldr	r3, [fp, #-8]
  11a758:	e3a02000 	mov	r2, #0
  11a75c:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a760:	e51b3008 	ldr	r3, [fp, #-8]
  11a764:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a768:	e1c320b8 	strh	r2, [r3, #8]
  11a76c:	e51b3008 	ldr	r3, [fp, #-8]
  11a770:	e1d320b8 	ldrh	r2, [r3, #8]
  11a774:	e51b3008 	ldr	r3, [fp, #-8]
  11a778:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a77c:	e51b3008 	ldr	r3, [fp, #-8]
  11a780:	e3a02000 	mov	r2, #0
  11a784:	e5832000 	str	r2, [r3]
    p->type = type;
  11a788:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a78c:	e6ef2073 	uxtb	r2, r3
  11a790:	e51b3008 	ldr	r3, [fp, #-8]
  11a794:	e5c3200c 	strb	r2, [r3, #12]
    break;
  11a798:	ea000009 	b	11a7c4 <pbuf_alloc+0x56c>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
  11a79c:	e3070734 	movw	r0, #30516	; 0x7734
  11a7a0:	e3400014 	movt	r0, #20
  11a7a4:	ebffa25a 	bl	103114 <rt_kprintf>
  11a7a8:	e300118d 	movw	r1, #397	; 0x18d
  11a7ac:	e3070600 	movw	r0, #30208	; 0x7600
  11a7b0:	e3400014 	movt	r0, #20
  11a7b4:	ebffc23e 	bl	10b0b4 <sys_arch_assert>
    return NULL;
  11a7b8:	e3a03000 	mov	r3, #0
  11a7bc:	ea000007 	b	11a7e0 <pbuf_alloc+0x588>
    break;
  11a7c0:	e320f000 	nop	{0}
  }
  /* set reference count */
  p->ref = 1;
  11a7c4:	e51b3008 	ldr	r3, [fp, #-8]
  11a7c8:	e3a02001 	mov	r2, #1
  11a7cc:	e1c320be 	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
  11a7d0:	e51b3008 	ldr	r3, [fp, #-8]
  11a7d4:	e3a02000 	mov	r2, #0
  11a7d8:	e5c3200d 	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
  11a7dc:	e51b3008 	ldr	r3, [fp, #-8]
}
  11a7e0:	e1a00003 	mov	r0, r3
  11a7e4:	e24bd004 	sub	sp, fp, #4
  11a7e8:	e8bd8800 	pop	{fp, pc}

0011a7ec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
  11a7ec:	e92d4800 	push	{fp, lr}
  11a7f0:	e28db004 	add	fp, sp, #4
  11a7f4:	e24dd018 	sub	sp, sp, #24
  11a7f8:	e50b0010 	str	r0, [fp, #-16]
  11a7fc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11a800:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  11a804:	e1a03001 	mov	r3, r1
  11a808:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
  11a80c:	e51b3010 	ldr	r3, [fp, #-16]
  11a810:	e3530004 	cmp	r3, #4
  11a814:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a818:	ea000013 	b	11a86c <pbuf_alloced_custom+0x80>
  11a81c:	0011a830 	.word	0x0011a830
  11a820:	0011a83c 	.word	0x0011a83c
  11a824:	0011a848 	.word	0x0011a848
  11a828:	0011a854 	.word	0x0011a854
  11a82c:	0011a860 	.word	0x0011a860
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  11a830:	e3a03038 	mov	r3, #56	; 0x38
  11a834:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a838:	ea000014 	b	11a890 <pbuf_alloced_custom+0xa4>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  11a83c:	e3a03024 	mov	r3, #36	; 0x24
  11a840:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a844:	ea000011 	b	11a890 <pbuf_alloced_custom+0xa4>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  11a848:	e3a03010 	mov	r3, #16
  11a84c:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a850:	ea00000e 	b	11a890 <pbuf_alloced_custom+0xa4>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  11a854:	e3a03000 	mov	r3, #0
  11a858:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a85c:	ea00000b 	b	11a890 <pbuf_alloced_custom+0xa4>
  case PBUF_RAW:
    offset = 0;
  11a860:	e3a03000 	mov	r3, #0
  11a864:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a868:	ea000008 	b	11a890 <pbuf_alloced_custom+0xa4>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
  11a86c:	e3070750 	movw	r0, #30544	; 0x7750
  11a870:	e3400014 	movt	r0, #20
  11a874:	ebffa226 	bl	103114 <rt_kprintf>
  11a878:	e30011c6 	movw	r1, #454	; 0x1c6
  11a87c:	e3070600 	movw	r0, #30208	; 0x7600
  11a880:	e3400014 	movt	r0, #20
  11a884:	ebffc20a 	bl	10b0b4 <sys_arch_assert>
    return NULL;
  11a888:	e3a03000 	mov	r3, #0
  11a88c:	ea00002c 	b	11a944 <pbuf_alloced_custom+0x158>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
  11a890:	e15b30b6 	ldrh	r3, [fp, #-6]
  11a894:	e2833003 	add	r3, r3, #3
  11a898:	e3c32003 	bic	r2, r3, #3
  11a89c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11a8a0:	e0822003 	add	r2, r2, r3
  11a8a4:	e1db30b8 	ldrh	r3, [fp, #8]
  11a8a8:	e1520003 	cmp	r2, r3
  11a8ac:	9a000001 	bls	11a8b8 <pbuf_alloced_custom+0xcc>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  11a8b0:	e3a03000 	mov	r3, #0
  11a8b4:	ea000022 	b	11a944 <pbuf_alloced_custom+0x158>
  }

  p->pbuf.next = NULL;
  11a8b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a8bc:	e3a02000 	mov	r2, #0
  11a8c0:	e5832000 	str	r2, [r3]
  if (payload_mem != NULL) {
  11a8c4:	e59b3004 	ldr	r3, [fp, #4]
  11a8c8:	e3530000 	cmp	r3, #0
  11a8cc:	0a000007 	beq	11a8f0 <pbuf_alloced_custom+0x104>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
  11a8d0:	e15b30b6 	ldrh	r3, [fp, #-6]
  11a8d4:	e2833003 	add	r3, r3, #3
  11a8d8:	e3c33003 	bic	r3, r3, #3
  11a8dc:	e59b2004 	ldr	r2, [fp, #4]
  11a8e0:	e0822003 	add	r2, r2, r3
  11a8e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a8e8:	e5832004 	str	r2, [r3, #4]
  11a8ec:	ea000002 	b	11a8fc <pbuf_alloced_custom+0x110>
  } else {
    p->pbuf.payload = NULL;
  11a8f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a8f4:	e3a02000 	mov	r2, #0
  11a8f8:	e5832004 	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
  11a8fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a900:	e3a02002 	mov	r2, #2
  11a904:	e5c3200d 	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
  11a908:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a90c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11a910:	e1c320b8 	strh	r2, [r3, #8]
  11a914:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a918:	e1d320b8 	ldrh	r2, [r3, #8]
  11a91c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a920:	e1c320ba 	strh	r2, [r3, #10]
  p->pbuf.type = type;
  11a924:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a928:	e6ef2073 	uxtb	r2, r3
  11a92c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a930:	e5c3200c 	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
  11a934:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a938:	e3a02001 	mov	r2, #1
  11a93c:	e1c320be 	strh	r2, [r3, #14]
  return &p->pbuf;
  11a940:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  11a944:	e1a00003 	mov	r0, r3
  11a948:	e24bd004 	sub	sp, fp, #4
  11a94c:	e8bd8800 	pop	{fp, pc}

0011a950 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
  11a950:	e92d4800 	push	{fp, lr}
  11a954:	e28db004 	add	fp, sp, #4
  11a958:	e24dd018 	sub	sp, sp, #24
  11a95c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11a960:	e1a03001 	mov	r3, r1
  11a964:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
  11a968:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a96c:	e3530000 	cmp	r3, #0
  11a970:	1a000006 	bne	11a990 <pbuf_realloc+0x40>
  11a974:	e3070774 	movw	r0, #30580	; 0x7774
  11a978:	e3400014 	movt	r0, #20
  11a97c:	ebffa1e4 	bl	103114 <rt_kprintf>
  11a980:	e3a01f7d 	mov	r1, #500	; 0x1f4
  11a984:	e3070600 	movw	r0, #30208	; 0x7600
  11a988:	e3400014 	movt	r0, #20
  11a98c:	ebffc1c8 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
  11a990:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a994:	e5d3300c 	ldrb	r3, [r3, #12]
  11a998:	e3530003 	cmp	r3, #3
  11a99c:	0a000012 	beq	11a9ec <pbuf_realloc+0x9c>
  11a9a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a9a4:	e5d3300c 	ldrb	r3, [r3, #12]
  11a9a8:	e3530001 	cmp	r3, #1
  11a9ac:	0a00000e 	beq	11a9ec <pbuf_realloc+0x9c>
  11a9b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a9b4:	e5d3300c 	ldrb	r3, [r3, #12]
  11a9b8:	e3530000 	cmp	r3, #0
  11a9bc:	0a00000a 	beq	11a9ec <pbuf_realloc+0x9c>
  11a9c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a9c4:	e5d3300c 	ldrb	r3, [r3, #12]
  11a9c8:	e3530002 	cmp	r3, #2
  11a9cc:	0a000006 	beq	11a9ec <pbuf_realloc+0x9c>
  11a9d0:	e307078c 	movw	r0, #30604	; 0x778c
  11a9d4:	e3400014 	movt	r0, #20
  11a9d8:	ebffa1cd 	bl	103114 <rt_kprintf>
  11a9dc:	e3a01f7e 	mov	r1, #504	; 0x1f8
  11a9e0:	e3070600 	movw	r0, #30208	; 0x7600
  11a9e4:	e3400014 	movt	r0, #20
  11a9e8:	ebffc1b1 	bl	10b0b4 <sys_arch_assert>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
  11a9ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a9f0:	e1d330b8 	ldrh	r3, [r3, #8]
  11a9f4:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11a9f8:	e1520003 	cmp	r2, r3
  11a9fc:	2a00006b 	bcs	11abb0 <pbuf_realloc+0x260>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
  11aa00:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11aa04:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11aa08:	e1d220b8 	ldrh	r2, [r2, #8]
  11aa0c:	e0433002 	sub	r3, r3, r2
  11aa10:	e50b3010 	str	r3, [fp, #-16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  11aa14:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11aa18:	e14b30ba 	strh	r3, [fp, #-10]
  q = p;
  11aa1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aa20:	e50b3008 	str	r3, [fp, #-8]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  11aa24:	ea000024 	b	11aabc <pbuf_realloc+0x16c>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
  11aa28:	e51b3008 	ldr	r3, [fp, #-8]
  11aa2c:	e1d330ba 	ldrh	r3, [r3, #10]
  11aa30:	e15b20ba 	ldrh	r2, [fp, #-10]
  11aa34:	e0423003 	sub	r3, r2, r3
  11aa38:	e14b30ba 	strh	r3, [fp, #-10]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
  11aa3c:	e51b3010 	ldr	r3, [fp, #-16]
  11aa40:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11aa44:	e1530002 	cmp	r3, r2
  11aa48:	da000006 	ble	11aa68 <pbuf_realloc+0x118>
  11aa4c:	e30707a8 	movw	r0, #30632	; 0x77a8
  11aa50:	e3400014 	movt	r0, #20
  11aa54:	ebffa1ae 	bl	103114 <rt_kprintf>
  11aa58:	e3a01f83 	mov	r1, #524	; 0x20c
  11aa5c:	e3070600 	movw	r0, #30208	; 0x7600
  11aa60:	e3400014 	movt	r0, #20
  11aa64:	ebffc192 	bl	10b0b4 <sys_arch_assert>
    q->tot_len += (u16_t)grow;
  11aa68:	e51b3008 	ldr	r3, [fp, #-8]
  11aa6c:	e1d320b8 	ldrh	r2, [r3, #8]
  11aa70:	e51b3010 	ldr	r3, [fp, #-16]
  11aa74:	e6ff3073 	uxth	r3, r3
  11aa78:	e0823003 	add	r3, r2, r3
  11aa7c:	e6ff2073 	uxth	r2, r3
  11aa80:	e51b3008 	ldr	r3, [fp, #-8]
  11aa84:	e1c320b8 	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
  11aa88:	e51b3008 	ldr	r3, [fp, #-8]
  11aa8c:	e5933000 	ldr	r3, [r3]
  11aa90:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
  11aa94:	e51b3008 	ldr	r3, [fp, #-8]
  11aa98:	e3530000 	cmp	r3, #0
  11aa9c:	1a000006 	bne	11aabc <pbuf_realloc+0x16c>
  11aaa0:	e30707bc 	movw	r0, #30652	; 0x77bc
  11aaa4:	e3400014 	movt	r0, #20
  11aaa8:	ebffa199 	bl	103114 <rt_kprintf>
  11aaac:	e3a01e21 	mov	r1, #528	; 0x210
  11aab0:	e3070600 	movw	r0, #30208	; 0x7600
  11aab4:	e3400014 	movt	r0, #20
  11aab8:	ebffc17d 	bl	10b0b4 <sys_arch_assert>
  while (rem_len > q->len) {
  11aabc:	e51b3008 	ldr	r3, [fp, #-8]
  11aac0:	e1d330ba 	ldrh	r3, [r3, #10]
  11aac4:	e15b20ba 	ldrh	r2, [fp, #-10]
  11aac8:	e1520003 	cmp	r2, r3
  11aacc:	8affffd5 	bhi	11aa28 <pbuf_realloc+0xd8>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
  11aad0:	e51b3008 	ldr	r3, [fp, #-8]
  11aad4:	e5d3300c 	ldrb	r3, [r3, #12]
  11aad8:	e3530000 	cmp	r3, #0
  11aadc:	1a000020 	bne	11ab64 <pbuf_realloc+0x214>
  11aae0:	e51b3008 	ldr	r3, [fp, #-8]
  11aae4:	e1d330ba 	ldrh	r3, [r3, #10]
  11aae8:	e15b20ba 	ldrh	r2, [fp, #-10]
  11aaec:	e1520003 	cmp	r2, r3
  11aaf0:	0a00001b 	beq	11ab64 <pbuf_realloc+0x214>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
  11aaf4:	e51b3008 	ldr	r3, [fp, #-8]
  11aaf8:	e5d3300d 	ldrb	r3, [r3, #13]
  11aafc:	e2033002 	and	r3, r3, #2
  11ab00:	e3530000 	cmp	r3, #0
  11ab04:	1a000016 	bne	11ab64 <pbuf_realloc+0x214>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  11ab08:	e51b3008 	ldr	r3, [fp, #-8]
  11ab0c:	e5933004 	ldr	r3, [r3, #4]
  11ab10:	e1a02003 	mov	r2, r3
  11ab14:	e51b3008 	ldr	r3, [fp, #-8]
  11ab18:	e0423003 	sub	r3, r2, r3
  11ab1c:	e6ff2073 	uxth	r2, r3
  11ab20:	e15b30ba 	ldrh	r3, [fp, #-10]
  11ab24:	e0823003 	add	r3, r2, r3
  11ab28:	e6ff3073 	uxth	r3, r3
  11ab2c:	e1a01003 	mov	r1, r3
  11ab30:	e51b0008 	ldr	r0, [fp, #-8]
  11ab34:	ebffc194 	bl	10b18c <mem_trim>
  11ab38:	e50b0008 	str	r0, [fp, #-8]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  11ab3c:	e51b3008 	ldr	r3, [fp, #-8]
  11ab40:	e3530000 	cmp	r3, #0
  11ab44:	1a000006 	bne	11ab64 <pbuf_realloc+0x214>
  11ab48:	e30707d4 	movw	r0, #30676	; 0x77d4
  11ab4c:	e3400014 	movt	r0, #20
  11ab50:	ebffa16f 	bl	103114 <rt_kprintf>
  11ab54:	e300121e 	movw	r1, #542	; 0x21e
  11ab58:	e3070600 	movw	r0, #30208	; 0x7600
  11ab5c:	e3400014 	movt	r0, #20
  11ab60:	ebffc153 	bl	10b0b4 <sys_arch_assert>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  11ab64:	e51b3008 	ldr	r3, [fp, #-8]
  11ab68:	e15b20ba 	ldrh	r2, [fp, #-10]
  11ab6c:	e1c320ba 	strh	r2, [r3, #10]
  q->tot_len = q->len;
  11ab70:	e51b3008 	ldr	r3, [fp, #-8]
  11ab74:	e1d320ba 	ldrh	r2, [r3, #10]
  11ab78:	e51b3008 	ldr	r3, [fp, #-8]
  11ab7c:	e1c320b8 	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
  11ab80:	e51b3008 	ldr	r3, [fp, #-8]
  11ab84:	e5933000 	ldr	r3, [r3]
  11ab88:	e3530000 	cmp	r3, #0
  11ab8c:	0a000003 	beq	11aba0 <pbuf_realloc+0x250>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
  11ab90:	e51b3008 	ldr	r3, [fp, #-8]
  11ab94:	e5933000 	ldr	r3, [r3]
  11ab98:	e1a00003 	mov	r0, r3
  11ab9c:	eb0000b4 	bl	11ae74 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
  11aba0:	e51b3008 	ldr	r3, [fp, #-8]
  11aba4:	e3a02000 	mov	r2, #0
  11aba8:	e5832000 	str	r2, [r3]
  11abac:	ea000000 	b	11abb4 <pbuf_realloc+0x264>
    return;
  11abb0:	e320f000 	nop	{0}

}
  11abb4:	e24bd004 	sub	sp, fp, #4
  11abb8:	e8bd8800 	pop	{fp, pc}

0011abbc <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  11abbc:	e92d4800 	push	{fp, lr}
  11abc0:	e28db004 	add	fp, sp, #4
  11abc4:	e24dd010 	sub	sp, sp, #16
  11abc8:	e50b0010 	str	r0, [fp, #-16]
  11abcc:	e1a03001 	mov	r3, r1
  11abd0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11abd4:	e1a03002 	mov	r3, r2
  11abd8:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  11abdc:	e51b3010 	ldr	r3, [fp, #-16]
  11abe0:	e3530000 	cmp	r3, #0
  11abe4:	1a000006 	bne	11ac04 <pbuf_header_impl+0x48>
  11abe8:	e30707f0 	movw	r0, #30704	; 0x77f0
  11abec:	e3400014 	movt	r0, #20
  11abf0:	ebffa147 	bl	103114 <rt_kprintf>
  11abf4:	e3a01d09 	mov	r1, #576	; 0x240
  11abf8:	e3070600 	movw	r0, #30208	; 0x7600
  11abfc:	e3400014 	movt	r0, #20
  11ac00:	ebffc12b 	bl	10b0b4 <sys_arch_assert>
  if ((header_size_increment == 0) || (p == NULL)) {
  11ac04:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ac08:	e3530000 	cmp	r3, #0
  11ac0c:	0a000002 	beq	11ac1c <pbuf_header_impl+0x60>
  11ac10:	e51b3010 	ldr	r3, [fp, #-16]
  11ac14:	e3530000 	cmp	r3, #0
  11ac18:	1a000001 	bne	11ac24 <pbuf_header_impl+0x68>
    return 0;
  11ac1c:	e3a03000 	mov	r3, #0
  11ac20:	ea000072 	b	11adf0 <pbuf_header_impl+0x234>
  }

  if (header_size_increment < 0) {
  11ac24:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ac28:	e3530000 	cmp	r3, #0
  11ac2c:	aa000010 	bge	11ac74 <pbuf_header_impl+0xb8>
    increment_magnitude = (u16_t)-header_size_increment;
  11ac30:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ac34:	e2633000 	rsb	r3, r3, #0
  11ac38:	e14b30b6 	strh	r3, [fp, #-6]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  11ac3c:	e51b3010 	ldr	r3, [fp, #-16]
  11ac40:	e1d330ba 	ldrh	r3, [r3, #10]
  11ac44:	e15b20b6 	ldrh	r2, [fp, #-6]
  11ac48:	e1520003 	cmp	r2, r3
  11ac4c:	9a00000a 	bls	11ac7c <pbuf_header_impl+0xc0>
  11ac50:	e30707fc 	movw	r0, #30716	; 0x77fc
  11ac54:	e3400014 	movt	r0, #20
  11ac58:	ebffa12d 	bl	103114 <rt_kprintf>
  11ac5c:	e3a01f92 	mov	r1, #584	; 0x248
  11ac60:	e3070600 	movw	r0, #30208	; 0x7600
  11ac64:	e3400014 	movt	r0, #20
  11ac68:	ebffc111 	bl	10b0b4 <sys_arch_assert>
  11ac6c:	e3a03001 	mov	r3, #1
  11ac70:	ea00005e 	b	11adf0 <pbuf_header_impl+0x234>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
  11ac74:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ac78:	e14b30b6 	strh	r3, [fp, #-6]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  11ac7c:	e51b3010 	ldr	r3, [fp, #-16]
  11ac80:	e5d3300c 	ldrb	r3, [r3, #12]
  11ac84:	e14b30b8 	strh	r3, [fp, #-8]
  /* remember current payload pointer */
  payload = p->payload;
  11ac88:	e51b3010 	ldr	r3, [fp, #-16]
  11ac8c:	e5933004 	ldr	r3, [r3, #4]
  11ac90:	e50b300c 	str	r3, [fp, #-12]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  11ac94:	e15b30b8 	ldrh	r3, [fp, #-8]
  11ac98:	e3530000 	cmp	r3, #0
  11ac9c:	0a000002 	beq	11acac <pbuf_header_impl+0xf0>
  11aca0:	e15b30b8 	ldrh	r3, [fp, #-8]
  11aca4:	e3530003 	cmp	r3, #3
  11aca8:	1a000011 	bne	11acf4 <pbuf_header_impl+0x138>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  11acac:	e51b3010 	ldr	r3, [fp, #-16]
  11acb0:	e5932004 	ldr	r2, [r3, #4]
  11acb4:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11acb8:	e2633000 	rsb	r3, r3, #0
  11acbc:	e0822003 	add	r2, r2, r3
  11acc0:	e51b3010 	ldr	r3, [fp, #-16]
  11acc4:	e5832004 	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  11acc8:	e51b3010 	ldr	r3, [fp, #-16]
  11accc:	e5932004 	ldr	r2, [r3, #4]
  11acd0:	e51b3010 	ldr	r3, [fp, #-16]
  11acd4:	e2833010 	add	r3, r3, #16
  11acd8:	e1520003 	cmp	r2, r3
  11acdc:	2a000034 	bcs	11adb4 <pbuf_header_impl+0x1f8>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
  11ace0:	e51b3010 	ldr	r3, [fp, #-16]
  11ace4:	e51b200c 	ldr	r2, [fp, #-12]
  11ace8:	e5832004 	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
  11acec:	e3a03001 	mov	r3, #1
  11acf0:	ea00003e 	b	11adf0 <pbuf_header_impl+0x234>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  11acf4:	e15b30b8 	ldrh	r3, [fp, #-8]
  11acf8:	e3530002 	cmp	r3, #2
  11acfc:	0a000002 	beq	11ad0c <pbuf_header_impl+0x150>
  11ad00:	e15b30b8 	ldrh	r3, [fp, #-8]
  11ad04:	e3530001 	cmp	r3, #1
  11ad08:	1a000020 	bne	11ad90 <pbuf_header_impl+0x1d4>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11ad0c:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ad10:	e3530000 	cmp	r3, #0
  11ad14:	aa00000c 	bge	11ad4c <pbuf_header_impl+0x190>
  11ad18:	e51b3010 	ldr	r3, [fp, #-16]
  11ad1c:	e1d330ba 	ldrh	r3, [r3, #10]
  11ad20:	e15b20b6 	ldrh	r2, [fp, #-6]
  11ad24:	e1520003 	cmp	r2, r3
  11ad28:	8a000007 	bhi	11ad4c <pbuf_header_impl+0x190>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  11ad2c:	e51b3010 	ldr	r3, [fp, #-16]
  11ad30:	e5932004 	ldr	r2, [r3, #4]
  11ad34:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ad38:	e2633000 	rsb	r3, r3, #0
  11ad3c:	e0822003 	add	r2, r2, r3
  11ad40:	e51b3010 	ldr	r3, [fp, #-16]
  11ad44:	e5832004 	str	r2, [r3, #4]
  11ad48:	ea00000f 	b	11ad8c <pbuf_header_impl+0x1d0>
    } else if ((header_size_increment > 0) && force) {
  11ad4c:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ad50:	e3530000 	cmp	r3, #0
  11ad54:	da00000a 	ble	11ad84 <pbuf_header_impl+0x1c8>
  11ad58:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  11ad5c:	e3530000 	cmp	r3, #0
  11ad60:	0a000007 	beq	11ad84 <pbuf_header_impl+0x1c8>
      p->payload = (u8_t *)p->payload - header_size_increment;
  11ad64:	e51b3010 	ldr	r3, [fp, #-16]
  11ad68:	e5932004 	ldr	r2, [r3, #4]
  11ad6c:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ad70:	e2633000 	rsb	r3, r3, #0
  11ad74:	e0822003 	add	r2, r2, r3
  11ad78:	e51b3010 	ldr	r3, [fp, #-16]
  11ad7c:	e5832004 	str	r2, [r3, #4]
  11ad80:	ea000001 	b	11ad8c <pbuf_header_impl+0x1d0>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
  11ad84:	e3a03001 	mov	r3, #1
  11ad88:	ea000018 	b	11adf0 <pbuf_header_impl+0x234>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11ad8c:	ea000008 	b	11adb4 <pbuf_header_impl+0x1f8>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
  11ad90:	e307081c 	movw	r0, #30748	; 0x781c
  11ad94:	e3400014 	movt	r0, #20
  11ad98:	ebffa0dd 	bl	103114 <rt_kprintf>
  11ad9c:	e3a01f9e 	mov	r1, #632	; 0x278
  11ada0:	e3070600 	movw	r0, #30208	; 0x7600
  11ada4:	e3400014 	movt	r0, #20
  11ada8:	ebffc0c1 	bl	10b0b4 <sys_arch_assert>
    return 1;
  11adac:	e3a03001 	mov	r3, #1
  11adb0:	ea00000e 	b	11adf0 <pbuf_header_impl+0x234>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  11adb4:	e51b3010 	ldr	r3, [fp, #-16]
  11adb8:	e1d320ba 	ldrh	r2, [r3, #10]
  11adbc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11adc0:	e0823003 	add	r3, r2, r3
  11adc4:	e6ff2073 	uxth	r2, r3
  11adc8:	e51b3010 	ldr	r3, [fp, #-16]
  11adcc:	e1c320ba 	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
  11add0:	e51b3010 	ldr	r3, [fp, #-16]
  11add4:	e1d320b8 	ldrh	r2, [r3, #8]
  11add8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11addc:	e0823003 	add	r3, r2, r3
  11ade0:	e6ff2073 	uxth	r2, r3
  11ade4:	e51b3010 	ldr	r3, [fp, #-16]
  11ade8:	e1c320b8 	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  11adec:	e3a03000 	mov	r3, #0
}
  11adf0:	e1a00003 	mov	r0, r3
  11adf4:	e24bd004 	sub	sp, fp, #4
  11adf8:	e8bd8800 	pop	{fp, pc}

0011adfc <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
  11adfc:	e92d4800 	push	{fp, lr}
  11ae00:	e28db004 	add	fp, sp, #4
  11ae04:	e24dd008 	sub	sp, sp, #8
  11ae08:	e50b0008 	str	r0, [fp, #-8]
  11ae0c:	e1a03001 	mov	r3, r1
  11ae10:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 0);
  11ae14:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11ae18:	e3a02000 	mov	r2, #0
  11ae1c:	e1a01003 	mov	r1, r3
  11ae20:	e51b0008 	ldr	r0, [fp, #-8]
  11ae24:	ebffff64 	bl	11abbc <pbuf_header_impl>
  11ae28:	e1a03000 	mov	r3, r0
}
  11ae2c:	e1a00003 	mov	r0, r3
  11ae30:	e24bd004 	sub	sp, fp, #4
  11ae34:	e8bd8800 	pop	{fp, pc}

0011ae38 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
  11ae38:	e92d4800 	push	{fp, lr}
  11ae3c:	e28db004 	add	fp, sp, #4
  11ae40:	e24dd008 	sub	sp, sp, #8
  11ae44:	e50b0008 	str	r0, [fp, #-8]
  11ae48:	e1a03001 	mov	r3, r1
  11ae4c:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 1);
  11ae50:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11ae54:	e3a02001 	mov	r2, #1
  11ae58:	e1a01003 	mov	r1, r3
  11ae5c:	e51b0008 	ldr	r0, [fp, #-8]
  11ae60:	ebffff55 	bl	11abbc <pbuf_header_impl>
  11ae64:	e1a03000 	mov	r3, r0
}
  11ae68:	e1a00003 	mov	r0, r3
  11ae6c:	e24bd004 	sub	sp, fp, #4
  11ae70:	e8bd8800 	pop	{fp, pc}

0011ae74 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  11ae74:	e92d4800 	push	{fp, lr}
  11ae78:	e28db004 	add	fp, sp, #4
  11ae7c:	e24dd018 	sub	sp, sp, #24
  11ae80:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  11ae84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ae88:	e3530000 	cmp	r3, #0
  11ae8c:	1a00000b 	bne	11aec0 <pbuf_free+0x4c>
    LWIP_ASSERT("p != NULL", p != NULL);
  11ae90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ae94:	e3530000 	cmp	r3, #0
  11ae98:	1a000006 	bne	11aeb8 <pbuf_free+0x44>
  11ae9c:	e30707f0 	movw	r0, #30704	; 0x77f0
  11aea0:	e3400014 	movt	r0, #20
  11aea4:	ebffa09a 	bl	103114 <rt_kprintf>
  11aea8:	e30012d3 	movw	r1, #723	; 0x2d3
  11aeac:	e3070600 	movw	r0, #30208	; 0x7600
  11aeb0:	e3400014 	movt	r0, #20
  11aeb4:	ebffc07e 	bl	10b0b4 <sys_arch_assert>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
  11aeb8:	e3a03000 	mov	r3, #0
  11aebc:	ea00006e 	b	11b07c <pbuf_free+0x208>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
  11aec0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aec4:	e5d3300c 	ldrb	r3, [r3, #12]
  11aec8:	e3530000 	cmp	r3, #0
  11aecc:	0a000012 	beq	11af1c <pbuf_free+0xa8>
  11aed0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aed4:	e5d3300c 	ldrb	r3, [r3, #12]
  11aed8:	e3530001 	cmp	r3, #1
  11aedc:	0a00000e 	beq	11af1c <pbuf_free+0xa8>
  11aee0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aee4:	e5d3300c 	ldrb	r3, [r3, #12]
  11aee8:	e3530002 	cmp	r3, #2
  11aeec:	0a00000a 	beq	11af1c <pbuf_free+0xa8>
  11aef0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aef4:	e5d3300c 	ldrb	r3, [r3, #12]
  11aef8:	e3530003 	cmp	r3, #3
  11aefc:	0a000006 	beq	11af1c <pbuf_free+0xa8>
  11af00:	e307082c 	movw	r0, #30764	; 0x782c
  11af04:	e3400014 	movt	r0, #20
  11af08:	ebffa081 	bl	103114 <rt_kprintf>
  11af0c:	e30012df 	movw	r1, #735	; 0x2df
  11af10:	e3070600 	movw	r0, #30208	; 0x7600
  11af14:	e3400014 	movt	r0, #20
  11af18:	ebffc065 	bl	10b0b4 <sys_arch_assert>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  11af1c:	e3a03000 	mov	r3, #0
  11af20:	e54b3005 	strb	r3, [fp, #-5]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
  11af24:	ea000050 	b	11b06c <pbuf_free+0x1f8>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
  11af28:	ebff9cc3 	bl	10223c <rt_enter_critical>
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
  11af2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af30:	e1d330be 	ldrh	r3, [r3, #14]
  11af34:	e3530000 	cmp	r3, #0
  11af38:	1a000006 	bne	11af58 <pbuf_free+0xe4>
  11af3c:	e3070844 	movw	r0, #30788	; 0x7844
  11af40:	e3400014 	movt	r0, #20
  11af44:	ebffa072 	bl	103114 <rt_kprintf>
  11af48:	e3a01fbb 	mov	r1, #748	; 0x2ec
  11af4c:	e3070600 	movw	r0, #30208	; 0x7600
  11af50:	e3400014 	movt	r0, #20
  11af54:	ebffc056 	bl	10b0b4 <sys_arch_assert>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
  11af58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af5c:	e1d330be 	ldrh	r3, [r3, #14]
  11af60:	e2433001 	sub	r3, r3, #1
  11af64:	e6ff2073 	uxth	r2, r3
  11af68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af6c:	e1c320be 	strh	r2, [r3, #14]
  11af70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af74:	e1d330be 	ldrh	r3, [r3, #14]
  11af78:	e14b30b8 	strh	r3, [fp, #-8]
    SYS_ARCH_UNPROTECT(old_level);
  11af7c:	ebff9cb4 	bl	102254 <rt_exit_critical>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
  11af80:	e15b30b8 	ldrh	r3, [fp, #-8]
  11af84:	e3530000 	cmp	r3, #0
  11af88:	1a000035 	bne	11b064 <pbuf_free+0x1f0>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
  11af8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af90:	e5933000 	ldr	r3, [r3]
  11af94:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
  11af98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af9c:	e5d3300c 	ldrb	r3, [r3, #12]
  11afa0:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
  11afa4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11afa8:	e5d3300d 	ldrb	r3, [r3, #13]
  11afac:	e2033002 	and	r3, r3, #2
  11afb0:	e3530000 	cmp	r3, #0
  11afb4:	0a000011 	beq	11b000 <pbuf_free+0x18c>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
  11afb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11afbc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
  11afc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11afc4:	e5933010 	ldr	r3, [r3, #16]
  11afc8:	e3530000 	cmp	r3, #0
  11afcc:	1a000006 	bne	11afec <pbuf_free+0x178>
  11afd0:	e307085c 	movw	r0, #30812	; 0x785c
  11afd4:	e3400014 	movt	r0, #20
  11afd8:	ebffa04d 	bl	103114 <rt_kprintf>
  11afdc:	e30012fa 	movw	r1, #762	; 0x2fa
  11afe0:	e3070600 	movw	r0, #30208	; 0x7600
  11afe4:	e3400014 	movt	r0, #20
  11afe8:	ebffc031 	bl	10b0b4 <sys_arch_assert>
        pc->custom_free_function(p);
  11afec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11aff0:	e5933010 	ldr	r3, [r3, #16]
  11aff4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11aff8:	e12fff33 	blx	r3
  11affc:	ea000012 	b	11b04c <pbuf_free+0x1d8>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
  11b000:	e15b30be 	ldrh	r3, [fp, #-14]
  11b004:	e3530003 	cmp	r3, #3
  11b008:	1a000003 	bne	11b01c <pbuf_free+0x1a8>
          memp_free(MEMP_PBUF_POOL, p);
  11b00c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11b010:	e3a00010 	mov	r0, #16
  11b014:	ebfff888 	bl	11923c <memp_free>
  11b018:	ea00000b 	b	11b04c <pbuf_free+0x1d8>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  11b01c:	e15b30be 	ldrh	r3, [fp, #-14]
  11b020:	e3530001 	cmp	r3, #1
  11b024:	0a000002 	beq	11b034 <pbuf_free+0x1c0>
  11b028:	e15b30be 	ldrh	r3, [fp, #-14]
  11b02c:	e3530002 	cmp	r3, #2
  11b030:	1a000003 	bne	11b044 <pbuf_free+0x1d0>
          memp_free(MEMP_PBUF, p);
  11b034:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11b038:	e3a0000f 	mov	r0, #15
  11b03c:	ebfff87e 	bl	11923c <memp_free>
  11b040:	ea000001 	b	11b04c <pbuf_free+0x1d8>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  11b044:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11b048:	ebffc066 	bl	10b1e8 <mem_free>
        }
      }
      count++;
  11b04c:	e55b3005 	ldrb	r3, [fp, #-5]
  11b050:	e2833001 	add	r3, r3, #1
  11b054:	e54b3005 	strb	r3, [fp, #-5]
      /* proceed to next pbuf */
      p = q;
  11b058:	e51b300c 	ldr	r3, [fp, #-12]
  11b05c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  11b060:	ea000001 	b	11b06c <pbuf_free+0x1f8>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
  11b064:	e3a03000 	mov	r3, #0
  11b068:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  while (p != NULL) {
  11b06c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b070:	e3530000 	cmp	r3, #0
  11b074:	1affffab 	bne	11af28 <pbuf_free+0xb4>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
  11b078:	e55b3005 	ldrb	r3, [fp, #-5]
}
  11b07c:	e1a00003 	mov	r0, r3
  11b080:	e24bd004 	sub	sp, fp, #4
  11b084:	e8bd8800 	pop	{fp, pc}

0011b088 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
  11b088:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11b08c:	e28db000 	add	fp, sp, #0
  11b090:	e24dd014 	sub	sp, sp, #20
  11b094:	e50b0010 	str	r0, [fp, #-16]
  u16_t len;

  len = 0;
  11b098:	e3a03000 	mov	r3, #0
  11b09c:	e14b30b6 	strh	r3, [fp, #-6]
  while (p != NULL) {
  11b0a0:	ea000005 	b	11b0bc <pbuf_clen+0x34>
    ++len;
  11b0a4:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b0a8:	e2833001 	add	r3, r3, #1
  11b0ac:	e14b30b6 	strh	r3, [fp, #-6]
    p = p->next;
  11b0b0:	e51b3010 	ldr	r3, [fp, #-16]
  11b0b4:	e5933000 	ldr	r3, [r3]
  11b0b8:	e50b3010 	str	r3, [fp, #-16]
  while (p != NULL) {
  11b0bc:	e51b3010 	ldr	r3, [fp, #-16]
  11b0c0:	e3530000 	cmp	r3, #0
  11b0c4:	1afffff6 	bne	11b0a4 <pbuf_clen+0x1c>
  }
  return len;
  11b0c8:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  11b0cc:	e1a00003 	mov	r0, r3
  11b0d0:	e28bd000 	add	sp, fp, #0
  11b0d4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11b0d8:	e12fff1e 	bx	lr

0011b0dc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
  11b0dc:	e92d4800 	push	{fp, lr}
  11b0e0:	e28db004 	add	fp, sp, #4
  11b0e4:	e24dd008 	sub	sp, sp, #8
  11b0e8:	e50b0008 	str	r0, [fp, #-8]
  /* pbuf given? */
  if (p != NULL) {
  11b0ec:	e51b3008 	ldr	r3, [fp, #-8]
  11b0f0:	e3530000 	cmp	r3, #0
  11b0f4:	0a000012 	beq	11b144 <pbuf_ref+0x68>
    SYS_ARCH_INC(p->ref, 1);
  11b0f8:	ebff9c4f 	bl	10223c <rt_enter_critical>
  11b0fc:	e51b3008 	ldr	r3, [fp, #-8]
  11b100:	e1d330be 	ldrh	r3, [r3, #14]
  11b104:	e2833001 	add	r3, r3, #1
  11b108:	e6ff2073 	uxth	r2, r3
  11b10c:	e51b3008 	ldr	r3, [fp, #-8]
  11b110:	e1c320be 	strh	r2, [r3, #14]
  11b114:	ebff9c4e 	bl	102254 <rt_exit_critical>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
  11b118:	e51b3008 	ldr	r3, [fp, #-8]
  11b11c:	e1d330be 	ldrh	r3, [r3, #14]
  11b120:	e3530000 	cmp	r3, #0
  11b124:	1a000006 	bne	11b144 <pbuf_ref+0x68>
  11b128:	e3070880 	movw	r0, #30848	; 0x7880
  11b12c:	e3400014 	movt	r0, #20
  11b130:	ebff9ff7 	bl	103114 <rt_kprintf>
  11b134:	e300133a 	movw	r1, #826	; 0x33a
  11b138:	e3070600 	movw	r0, #30208	; 0x7600
  11b13c:	e3400014 	movt	r0, #20
  11b140:	ebffbfdb 	bl	10b0b4 <sys_arch_assert>
  }
}
  11b144:	e320f000 	nop	{0}
  11b148:	e24bd004 	sub	sp, fp, #4
  11b14c:	e8bd8800 	pop	{fp, pc}

0011b150 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  11b150:	e92d4800 	push	{fp, lr}
  11b154:	e28db004 	add	fp, sp, #4
  11b158:	e24dd010 	sub	sp, sp, #16
  11b15c:	e50b0010 	str	r0, [fp, #-16]
  11b160:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  11b164:	e51b3010 	ldr	r3, [fp, #-16]
  11b168:	e3530000 	cmp	r3, #0
  11b16c:	0a000002 	beq	11b17c <pbuf_cat+0x2c>
  11b170:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b174:	e3530000 	cmp	r3, #0
  11b178:	1a000007 	bne	11b19c <pbuf_cat+0x4c>
  11b17c:	e3070894 	movw	r0, #30868	; 0x7894
  11b180:	e3400014 	movt	r0, #20
  11b184:	ebff9fe2 	bl	103114 <rt_kprintf>
  11b188:	e300134e 	movw	r1, #846	; 0x34e
  11b18c:	e3070600 	movw	r0, #30208	; 0x7600
  11b190:	e3400014 	movt	r0, #20
  11b194:	ebffbfc6 	bl	10b0b4 <sys_arch_assert>
  11b198:	ea000034 	b	11b270 <pbuf_cat+0x120>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  11b19c:	e51b3010 	ldr	r3, [fp, #-16]
  11b1a0:	e50b3008 	str	r3, [fp, #-8]
  11b1a4:	ea00000a 	b	11b1d4 <pbuf_cat+0x84>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  11b1a8:	e51b3008 	ldr	r3, [fp, #-8]
  11b1ac:	e1d320b8 	ldrh	r2, [r3, #8]
  11b1b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b1b4:	e1d330b8 	ldrh	r3, [r3, #8]
  11b1b8:	e0823003 	add	r3, r2, r3
  11b1bc:	e6ff2073 	uxth	r2, r3
  11b1c0:	e51b3008 	ldr	r3, [fp, #-8]
  11b1c4:	e1c320b8 	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
  11b1c8:	e51b3008 	ldr	r3, [fp, #-8]
  11b1cc:	e5933000 	ldr	r3, [r3]
  11b1d0:	e50b3008 	str	r3, [fp, #-8]
  11b1d4:	e51b3008 	ldr	r3, [fp, #-8]
  11b1d8:	e5933000 	ldr	r3, [r3]
  11b1dc:	e3530000 	cmp	r3, #0
  11b1e0:	1afffff0 	bne	11b1a8 <pbuf_cat+0x58>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  11b1e4:	e51b3008 	ldr	r3, [fp, #-8]
  11b1e8:	e1d320b8 	ldrh	r2, [r3, #8]
  11b1ec:	e51b3008 	ldr	r3, [fp, #-8]
  11b1f0:	e1d330ba 	ldrh	r3, [r3, #10]
  11b1f4:	e1520003 	cmp	r2, r3
  11b1f8:	0a000006 	beq	11b218 <pbuf_cat+0xc8>
  11b1fc:	e30708cc 	movw	r0, #30924	; 0x78cc
  11b200:	e3400014 	movt	r0, #20
  11b204:	ebff9fc2 	bl	103114 <rt_kprintf>
  11b208:	e3001356 	movw	r1, #854	; 0x356
  11b20c:	e3070600 	movw	r0, #30208	; 0x7600
  11b210:	e3400014 	movt	r0, #20
  11b214:	ebffbfa6 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  11b218:	e51b3008 	ldr	r3, [fp, #-8]
  11b21c:	e5933000 	ldr	r3, [r3]
  11b220:	e3530000 	cmp	r3, #0
  11b224:	0a000006 	beq	11b244 <pbuf_cat+0xf4>
  11b228:	e30708fc 	movw	r0, #30972	; 0x78fc
  11b22c:	e3400014 	movt	r0, #20
  11b230:	ebff9fb7 	bl	103114 <rt_kprintf>
  11b234:	e3001357 	movw	r1, #855	; 0x357
  11b238:	e3070600 	movw	r0, #30208	; 0x7600
  11b23c:	e3400014 	movt	r0, #20
  11b240:	ebffbf9b 	bl	10b0b4 <sys_arch_assert>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  11b244:	e51b3008 	ldr	r3, [fp, #-8]
  11b248:	e1d320b8 	ldrh	r2, [r3, #8]
  11b24c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b250:	e1d330b8 	ldrh	r3, [r3, #8]
  11b254:	e0823003 	add	r3, r2, r3
  11b258:	e6ff2073 	uxth	r2, r3
  11b25c:	e51b3008 	ldr	r3, [fp, #-8]
  11b260:	e1c320b8 	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  11b264:	e51b3008 	ldr	r3, [fp, #-8]
  11b268:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11b26c:	e5832000 	str	r2, [r3]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  11b270:	e24bd004 	sub	sp, fp, #4
  11b274:	e8bd8800 	pop	{fp, pc}

0011b278 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  11b278:	e92d4800 	push	{fp, lr}
  11b27c:	e28db004 	add	fp, sp, #4
  11b280:	e24dd008 	sub	sp, sp, #8
  11b284:	e50b0008 	str	r0, [fp, #-8]
  11b288:	e50b100c 	str	r1, [fp, #-12]
  pbuf_cat(h, t);
  11b28c:	e51b100c 	ldr	r1, [fp, #-12]
  11b290:	e51b0008 	ldr	r0, [fp, #-8]
  11b294:	ebffffad 	bl	11b150 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
  11b298:	e51b000c 	ldr	r0, [fp, #-12]
  11b29c:	ebffff8e 	bl	11b0dc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
  11b2a0:	e320f000 	nop	{0}
  11b2a4:	e24bd004 	sub	sp, fp, #4
  11b2a8:	e8bd8800 	pop	{fp, pc}

0011b2ac <pbuf_dechain>:
 * @return remainder of the pbuf chain, or NULL if it was de-allocated.
 * @note May not be called on a packet queue.
 */
struct pbuf *
pbuf_dechain(struct pbuf *p)
{
  11b2ac:	e92d4800 	push	{fp, lr}
  11b2b0:	e28db004 	add	fp, sp, #4
  11b2b4:	e24dd010 	sub	sp, sp, #16
  11b2b8:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q;
  u8_t tail_gone = 1;
  11b2bc:	e3a03001 	mov	r3, #1
  11b2c0:	e54b3005 	strb	r3, [fp, #-5]
  /* tail */
  q = p->next;
  11b2c4:	e51b3010 	ldr	r3, [fp, #-16]
  11b2c8:	e5933000 	ldr	r3, [r3]
  11b2cc:	e50b300c 	str	r3, [fp, #-12]
  /* pbuf has successor in chain? */
  if (q != NULL) {
  11b2d0:	e51b300c 	ldr	r3, [fp, #-12]
  11b2d4:	e3530000 	cmp	r3, #0
  11b2d8:	0a000024 	beq	11b370 <pbuf_dechain+0xc4>
    /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
  11b2dc:	e51b300c 	ldr	r3, [fp, #-12]
  11b2e0:	e1d330b8 	ldrh	r3, [r3, #8]
  11b2e4:	e1a02003 	mov	r2, r3
  11b2e8:	e51b3010 	ldr	r3, [fp, #-16]
  11b2ec:	e1d330b8 	ldrh	r3, [r3, #8]
  11b2f0:	e1a01003 	mov	r1, r3
  11b2f4:	e51b3010 	ldr	r3, [fp, #-16]
  11b2f8:	e1d330ba 	ldrh	r3, [r3, #10]
  11b2fc:	e0413003 	sub	r3, r1, r3
  11b300:	e1520003 	cmp	r2, r3
  11b304:	0a000006 	beq	11b324 <pbuf_dechain+0x78>
  11b308:	e307090c 	movw	r0, #30988	; 0x790c
  11b30c:	e3400014 	movt	r0, #20
  11b310:	ebff9f7f 	bl	103114 <rt_kprintf>
  11b314:	e300138d 	movw	r1, #909	; 0x38d
  11b318:	e3070600 	movw	r0, #30208	; 0x7600
  11b31c:	e3400014 	movt	r0, #20
  11b320:	ebffbf63 	bl	10b0b4 <sys_arch_assert>
    /* enforce invariant if assertion is disabled */
    q->tot_len = p->tot_len - p->len;
  11b324:	e51b3010 	ldr	r3, [fp, #-16]
  11b328:	e1d320b8 	ldrh	r2, [r3, #8]
  11b32c:	e51b3010 	ldr	r3, [fp, #-16]
  11b330:	e1d330ba 	ldrh	r3, [r3, #10]
  11b334:	e0423003 	sub	r3, r2, r3
  11b338:	e6ff2073 	uxth	r2, r3
  11b33c:	e51b300c 	ldr	r3, [fp, #-12]
  11b340:	e1c320b8 	strh	r2, [r3, #8]
    /* decouple pbuf from remainder */
    p->next = NULL;
  11b344:	e51b3010 	ldr	r3, [fp, #-16]
  11b348:	e3a02000 	mov	r2, #0
  11b34c:	e5832000 	str	r2, [r3]
    /* total length of pbuf p is its own length only */
    p->tot_len = p->len;
  11b350:	e51b3010 	ldr	r3, [fp, #-16]
  11b354:	e1d320ba 	ldrh	r2, [r3, #10]
  11b358:	e51b3010 	ldr	r3, [fp, #-16]
  11b35c:	e1c320b8 	strh	r2, [r3, #8]
    /* q is no longer referenced by p, free it */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_dechain: unreferencing %p\n", (void *)q));
    tail_gone = pbuf_free(q);
  11b360:	e51b000c 	ldr	r0, [fp, #-12]
  11b364:	ebfffec2 	bl	11ae74 <pbuf_free>
  11b368:	e1a03000 	mov	r3, r0
  11b36c:	e54b3005 	strb	r3, [fp, #-5]
                  ("pbuf_dechain: deallocated %p (as it is no longer referenced)\n", (void *)q));
    }
    /* return remaining tail or NULL if deallocated */
  }
  /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
  11b370:	e51b3010 	ldr	r3, [fp, #-16]
  11b374:	e1d320b8 	ldrh	r2, [r3, #8]
  11b378:	e51b3010 	ldr	r3, [fp, #-16]
  11b37c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b380:	e1520003 	cmp	r2, r3
  11b384:	0a000006 	beq	11b3a4 <pbuf_dechain+0xf8>
  11b388:	e3070930 	movw	r0, #31024	; 0x7930
  11b38c:	e3400014 	movt	r0, #20
  11b390:	ebff9f5f 	bl	103114 <rt_kprintf>
  11b394:	e300139e 	movw	r1, #926	; 0x39e
  11b398:	e3070600 	movw	r0, #30208	; 0x7600
  11b39c:	e3400014 	movt	r0, #20
  11b3a0:	ebffbf43 	bl	10b0b4 <sys_arch_assert>
  return ((tail_gone > 0) ? NULL : q);
  11b3a4:	e55b3005 	ldrb	r3, [fp, #-5]
  11b3a8:	e3530000 	cmp	r3, #0
  11b3ac:	1a000001 	bne	11b3b8 <pbuf_dechain+0x10c>
  11b3b0:	e51b300c 	ldr	r3, [fp, #-12]
  11b3b4:	ea000000 	b	11b3bc <pbuf_dechain+0x110>
  11b3b8:	e3a03000 	mov	r3, #0
}
  11b3bc:	e1a00003 	mov	r0, r3
  11b3c0:	e24bd004 	sub	sp, fp, #4
  11b3c4:	e8bd8800 	pop	{fp, pc}

0011b3c8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
  11b3c8:	e92d4800 	push	{fp, lr}
  11b3cc:	e28db004 	add	fp, sp, #4
  11b3d0:	e24dd010 	sub	sp, sp, #16
  11b3d4:	e50b0010 	str	r0, [fp, #-16]
  11b3d8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u16_t offset_to=0, offset_from=0, len;
  11b3dc:	e3a03000 	mov	r3, #0
  11b3e0:	e14b30b6 	strh	r3, [fp, #-6]
  11b3e4:	e3a03000 	mov	r3, #0
  11b3e8:	e14b30b8 	strh	r3, [fp, #-8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  11b3ec:	e51b3010 	ldr	r3, [fp, #-16]
  11b3f0:	e3530000 	cmp	r3, #0
  11b3f4:	0a000008 	beq	11b41c <pbuf_copy+0x54>
  11b3f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b3fc:	e3530000 	cmp	r3, #0
  11b400:	0a000005 	beq	11b41c <pbuf_copy+0x54>
  11b404:	e51b3010 	ldr	r3, [fp, #-16]
  11b408:	e1d320b8 	ldrh	r2, [r3, #8]
  11b40c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b410:	e1d330b8 	ldrh	r3, [r3, #8]
  11b414:	e1520003 	cmp	r2, r3
  11b418:	2a000008 	bcs	11b440 <pbuf_copy+0x78>
  11b41c:	e3070948 	movw	r0, #31048	; 0x7948
  11b420:	e3400014 	movt	r0, #20
  11b424:	ebff9f3a 	bl	103114 <rt_kprintf>
  11b428:	e30013be 	movw	r1, #958	; 0x3be
  11b42c:	e3070600 	movw	r0, #30208	; 0x7600
  11b430:	e3400014 	movt	r0, #20
  11b434:	ebffbf1e 	bl	10b0b4 <sys_arch_assert>
  11b438:	e3e0300f 	mvn	r3, #15
  11b43c:	ea000094 	b	11b694 <pbuf_copy+0x2cc>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  11b440:	e51b3010 	ldr	r3, [fp, #-16]
  11b444:	e1d330ba 	ldrh	r3, [r3, #10]
  11b448:	e1a02003 	mov	r2, r3
  11b44c:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b450:	e0422003 	sub	r2, r2, r3
  11b454:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b458:	e1d330ba 	ldrh	r3, [r3, #10]
  11b45c:	e1a01003 	mov	r1, r3
  11b460:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b464:	e0413003 	sub	r3, r1, r3
  11b468:	e1520003 	cmp	r2, r3
  11b46c:	ba000005 	blt	11b488 <pbuf_copy+0xc0>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
  11b470:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b474:	e1d320ba 	ldrh	r2, [r3, #10]
  11b478:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b47c:	e0423003 	sub	r3, r2, r3
  11b480:	e14b30ba 	strh	r3, [fp, #-10]
  11b484:	ea000004 	b	11b49c <pbuf_copy+0xd4>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
  11b488:	e51b3010 	ldr	r3, [fp, #-16]
  11b48c:	e1d320ba 	ldrh	r2, [r3, #10]
  11b490:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b494:	e0423003 	sub	r3, r2, r3
  11b498:	e14b30ba 	strh	r3, [fp, #-10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  11b49c:	e51b3010 	ldr	r3, [fp, #-16]
  11b4a0:	e5932004 	ldr	r2, [r3, #4]
  11b4a4:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b4a8:	e0820003 	add	r0, r2, r3
  11b4ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b4b0:	e5932004 	ldr	r2, [r3, #4]
  11b4b4:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b4b8:	e0823003 	add	r3, r2, r3
  11b4bc:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b4c0:	e1a01003 	mov	r1, r3
  11b4c4:	eb009624 	bl	140d5c <memcpy>
    offset_to += len;
  11b4c8:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b4cc:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b4d0:	e0823003 	add	r3, r2, r3
  11b4d4:	e14b30b6 	strh	r3, [fp, #-6]
    offset_from += len;
  11b4d8:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b4dc:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b4e0:	e0823003 	add	r3, r2, r3
  11b4e4:	e14b30b8 	strh	r3, [fp, #-8]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
  11b4e8:	e51b3010 	ldr	r3, [fp, #-16]
  11b4ec:	e1d330ba 	ldrh	r3, [r3, #10]
  11b4f0:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b4f4:	e1520003 	cmp	r2, r3
  11b4f8:	9a000006 	bls	11b518 <pbuf_copy+0x150>
  11b4fc:	e3070978 	movw	r0, #31096	; 0x7978
  11b500:	e3400014 	movt	r0, #20
  11b504:	ebff9f02 	bl	103114 <rt_kprintf>
  11b508:	e30013ce 	movw	r1, #974	; 0x3ce
  11b50c:	e3070600 	movw	r0, #30208	; 0x7600
  11b510:	e3400014 	movt	r0, #20
  11b514:	ebffbee6 	bl	10b0b4 <sys_arch_assert>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
  11b518:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b51c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b520:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b524:	e1520003 	cmp	r2, r3
  11b528:	9a000006 	bls	11b548 <pbuf_copy+0x180>
  11b52c:	e3070990 	movw	r0, #31120	; 0x7990
  11b530:	e3400014 	movt	r0, #20
  11b534:	ebff9ef6 	bl	103114 <rt_kprintf>
  11b538:	e30013cf 	movw	r1, #975	; 0x3cf
  11b53c:	e3070600 	movw	r0, #30208	; 0x7600
  11b540:	e3400014 	movt	r0, #20
  11b544:	ebffbeda 	bl	10b0b4 <sys_arch_assert>
    if (offset_from >= p_from->len) {
  11b548:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b54c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b550:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b554:	e1520003 	cmp	r2, r3
  11b558:	3a000004 	bcc	11b570 <pbuf_copy+0x1a8>
      /* on to next p_from (if any) */
      offset_from = 0;
  11b55c:	e3a03000 	mov	r3, #0
  11b560:	e14b30b8 	strh	r3, [fp, #-8]
      p_from = p_from->next;
  11b564:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b568:	e5933000 	ldr	r3, [r3]
  11b56c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
    if (offset_to == p_to->len) {
  11b570:	e51b3010 	ldr	r3, [fp, #-16]
  11b574:	e1d330ba 	ldrh	r3, [r3, #10]
  11b578:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b57c:	e1520003 	cmp	r2, r3
  11b580:	1a000013 	bne	11b5d4 <pbuf_copy+0x20c>
      /* on to next p_to (if any) */
      offset_to = 0;
  11b584:	e3a03000 	mov	r3, #0
  11b588:	e14b30b6 	strh	r3, [fp, #-6]
      p_to = p_to->next;
  11b58c:	e51b3010 	ldr	r3, [fp, #-16]
  11b590:	e5933000 	ldr	r3, [r3]
  11b594:	e50b3010 	str	r3, [fp, #-16]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  11b598:	e51b3010 	ldr	r3, [fp, #-16]
  11b59c:	e3530000 	cmp	r3, #0
  11b5a0:	1a00000b 	bne	11b5d4 <pbuf_copy+0x20c>
  11b5a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b5a8:	e3530000 	cmp	r3, #0
  11b5ac:	0a000008 	beq	11b5d4 <pbuf_copy+0x20c>
  11b5b0:	e30709ac 	movw	r0, #31148	; 0x79ac
  11b5b4:	e3400014 	movt	r0, #20
  11b5b8:	ebff9ed5 	bl	103114 <rt_kprintf>
  11b5bc:	e30013d9 	movw	r1, #985	; 0x3d9
  11b5c0:	e3070600 	movw	r0, #30208	; 0x7600
  11b5c4:	e3400014 	movt	r0, #20
  11b5c8:	ebffbeb9 	bl	10b0b4 <sys_arch_assert>
  11b5cc:	e3e0300f 	mvn	r3, #15
  11b5d0:	ea00002f 	b	11b694 <pbuf_copy+0x2cc>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  11b5d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b5d8:	e3530000 	cmp	r3, #0
  11b5dc:	0a000012 	beq	11b62c <pbuf_copy+0x264>
  11b5e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b5e4:	e1d320ba 	ldrh	r2, [r3, #10]
  11b5e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b5ec:	e1d330b8 	ldrh	r3, [r3, #8]
  11b5f0:	e1520003 	cmp	r2, r3
  11b5f4:	1a00000c 	bne	11b62c <pbuf_copy+0x264>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b5f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b5fc:	e5933000 	ldr	r3, [r3]
  11b600:	e3530000 	cmp	r3, #0
  11b604:	0a000008 	beq	11b62c <pbuf_copy+0x264>
  11b608:	e30709bc 	movw	r0, #31164	; 0x79bc
  11b60c:	e3400014 	movt	r0, #20
  11b610:	ebff9ebf 	bl	103114 <rt_kprintf>
  11b614:	e30013df 	movw	r1, #991	; 0x3df
  11b618:	e3070600 	movw	r0, #30208	; 0x7600
  11b61c:	e3400014 	movt	r0, #20
  11b620:	ebffbea3 	bl	10b0b4 <sys_arch_assert>
  11b624:	e3e03005 	mvn	r3, #5
  11b628:	ea000019 	b	11b694 <pbuf_copy+0x2cc>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  11b62c:	e51b3010 	ldr	r3, [fp, #-16]
  11b630:	e3530000 	cmp	r3, #0
  11b634:	0a000012 	beq	11b684 <pbuf_copy+0x2bc>
  11b638:	e51b3010 	ldr	r3, [fp, #-16]
  11b63c:	e1d320ba 	ldrh	r2, [r3, #10]
  11b640:	e51b3010 	ldr	r3, [fp, #-16]
  11b644:	e1d330b8 	ldrh	r3, [r3, #8]
  11b648:	e1520003 	cmp	r2, r3
  11b64c:	1a00000c 	bne	11b684 <pbuf_copy+0x2bc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b650:	e51b3010 	ldr	r3, [fp, #-16]
  11b654:	e5933000 	ldr	r3, [r3]
  11b658:	e3530000 	cmp	r3, #0
  11b65c:	0a000008 	beq	11b684 <pbuf_copy+0x2bc>
  11b660:	e30709bc 	movw	r0, #31164	; 0x79bc
  11b664:	e3400014 	movt	r0, #20
  11b668:	ebff9ea9 	bl	103114 <rt_kprintf>
  11b66c:	e3a01ff9 	mov	r1, #996	; 0x3e4
  11b670:	e3070600 	movw	r0, #30208	; 0x7600
  11b674:	e3400014 	movt	r0, #20
  11b678:	ebffbe8d 	bl	10b0b4 <sys_arch_assert>
  11b67c:	e3e03005 	mvn	r3, #5
  11b680:	ea000003 	b	11b694 <pbuf_copy+0x2cc>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  11b684:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b688:	e3530000 	cmp	r3, #0
  11b68c:	1affff6b 	bne	11b440 <pbuf_copy+0x78>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
  11b690:	e3a03000 	mov	r3, #0
}
  11b694:	e1a00003 	mov	r0, r3
  11b698:	e24bd004 	sub	sp, fp, #4
  11b69c:	e8bd8800 	pop	{fp, pc}

0011b6a0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  11b6a0:	e92d4800 	push	{fp, lr}
  11b6a4:	e28db004 	add	fp, sp, #4
  11b6a8:	e24dd020 	sub	sp, sp, #32
  11b6ac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b6b0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b6b4:	e1a01002 	mov	r1, r2
  11b6b8:	e1a02003 	mov	r2, r3
  11b6bc:	e1a03001 	mov	r3, r1
  11b6c0:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11b6c4:	e1a03002 	mov	r3, r2
  11b6c8:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
  11b6cc:	e3a03000 	mov	r3, #0
  11b6d0:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  11b6d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b6d8:	e3530000 	cmp	r3, #0
  11b6dc:	1a000008 	bne	11b704 <pbuf_copy_partial+0x64>
  11b6e0:	e30709e8 	movw	r0, #31208	; 0x79e8
  11b6e4:	e3400014 	movt	r0, #20
  11b6e8:	ebff9e89 	bl	103114 <rt_kprintf>
  11b6ec:	e30013ff 	movw	r1, #1023	; 0x3ff
  11b6f0:	e3070600 	movw	r0, #30208	; 0x7600
  11b6f4:	e3400014 	movt	r0, #20
  11b6f8:	ebffbe6d 	bl	10b0b4 <sys_arch_assert>
  11b6fc:	e3a03000 	mov	r3, #0
  11b700:	ea000053 	b	11b854 <pbuf_copy_partial+0x1b4>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  11b704:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b708:	e3530000 	cmp	r3, #0
  11b70c:	1a000008 	bne	11b734 <pbuf_copy_partial+0x94>
  11b710:	e3070a08 	movw	r0, #31240	; 0x7a08
  11b714:	e3400014 	movt	r0, #20
  11b718:	ebff9e7d 	bl	103114 <rt_kprintf>
  11b71c:	e3a01b01 	mov	r1, #1024	; 0x400
  11b720:	e3070600 	movw	r0, #30208	; 0x7600
  11b724:	e3400014 	movt	r0, #20
  11b728:	ebffbe61 	bl	10b0b4 <sys_arch_assert>
  11b72c:	e3a03000 	mov	r3, #0
  11b730:	ea000047 	b	11b854 <pbuf_copy_partial+0x1b4>

  left = 0;
  11b734:	e3a03000 	mov	r3, #0
  11b738:	e14b30ba 	strh	r3, [fp, #-10]

  if ((buf == NULL) || (dataptr == NULL)) {
  11b73c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b740:	e3530000 	cmp	r3, #0
  11b744:	0a000002 	beq	11b754 <pbuf_copy_partial+0xb4>
  11b748:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b74c:	e3530000 	cmp	r3, #0
  11b750:	1a000001 	bne	11b75c <pbuf_copy_partial+0xbc>
    return 0;
  11b754:	e3a03000 	mov	r3, #0
  11b758:	ea00003d 	b	11b854 <pbuf_copy_partial+0x1b4>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11b75c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b760:	e50b3008 	str	r3, [fp, #-8]
  11b764:	ea000033 	b	11b838 <pbuf_copy_partial+0x198>
    if ((offset != 0) && (offset >= p->len)) {
  11b768:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b76c:	e3530000 	cmp	r3, #0
  11b770:	0a00000a 	beq	11b7a0 <pbuf_copy_partial+0x100>
  11b774:	e51b3008 	ldr	r3, [fp, #-8]
  11b778:	e1d330ba 	ldrh	r3, [r3, #10]
  11b77c:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b780:	e1520003 	cmp	r2, r3
  11b784:	3a000005 	bcc	11b7a0 <pbuf_copy_partial+0x100>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
  11b788:	e51b3008 	ldr	r3, [fp, #-8]
  11b78c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b790:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b794:	e0423003 	sub	r3, r2, r3
  11b798:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  11b79c:	ea000022 	b	11b82c <pbuf_copy_partial+0x18c>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
  11b7a0:	e51b3008 	ldr	r3, [fp, #-8]
  11b7a4:	e1d320ba 	ldrh	r2, [r3, #10]
  11b7a8:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b7ac:	e0423003 	sub	r3, r2, r3
  11b7b0:	e14b30bc 	strh	r3, [fp, #-12]
      if (buf_copy_len > len) {
  11b7b4:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b7b8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b7bc:	e1520003 	cmp	r2, r3
  11b7c0:	9a000001 	bls	11b7cc <pbuf_copy_partial+0x12c>
        buf_copy_len = len;
  11b7c4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b7c8:	e14b30bc 	strh	r3, [fp, #-12]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  11b7cc:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b7d0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11b7d4:	e0820003 	add	r0, r2, r3
  11b7d8:	e51b3008 	ldr	r3, [fp, #-8]
  11b7dc:	e5932004 	ldr	r2, [r3, #4]
  11b7e0:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b7e4:	e0823003 	add	r3, r2, r3
  11b7e8:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b7ec:	e1a01003 	mov	r1, r3
  11b7f0:	eb009559 	bl	140d5c <memcpy>
      copied_total += buf_copy_len;
  11b7f4:	e15b20be 	ldrh	r2, [fp, #-14]
  11b7f8:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b7fc:	e0823003 	add	r3, r2, r3
  11b800:	e14b30be 	strh	r3, [fp, #-14]
      left += buf_copy_len;
  11b804:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b808:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b80c:	e0823003 	add	r3, r2, r3
  11b810:	e14b30ba 	strh	r3, [fp, #-10]
      len -= buf_copy_len;
  11b814:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b818:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b81c:	e0423003 	sub	r3, r2, r3
  11b820:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      offset = 0;
  11b824:	e3a03000 	mov	r3, #0
  11b828:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11b82c:	e51b3008 	ldr	r3, [fp, #-8]
  11b830:	e5933000 	ldr	r3, [r3]
  11b834:	e50b3008 	str	r3, [fp, #-8]
  11b838:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b83c:	e3530000 	cmp	r3, #0
  11b840:	0a000002 	beq	11b850 <pbuf_copy_partial+0x1b0>
  11b844:	e51b3008 	ldr	r3, [fp, #-8]
  11b848:	e3530000 	cmp	r3, #0
  11b84c:	1affffc5 	bne	11b768 <pbuf_copy_partial+0xc8>
    }
  }
  return copied_total;
  11b850:	e15b30be 	ldrh	r3, [fp, #-14]
}
  11b854:	e1a00003 	mov	r0, r3
  11b858:	e24bd004 	sub	sp, fp, #4
  11b85c:	e8bd8800 	pop	{fp, pc}

0011b860 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11b860:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11b864:	e28db000 	add	fp, sp, #0
  11b868:	e24dd01c 	sub	sp, sp, #28
  11b86c:	e50b0010 	str	r0, [fp, #-16]
  11b870:	e1a03001 	mov	r3, r1
  11b874:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11b878:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset_left = in_offset;
  11b87c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b880:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = in;
  11b884:	e51b3010 	ldr	r3, [fp, #-16]
  11b888:	e50b300c 	str	r3, [fp, #-12]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
  11b88c:	ea000007 	b	11b8b0 <pbuf_skip_const+0x50>
    offset_left -= q->len;
  11b890:	e51b300c 	ldr	r3, [fp, #-12]
  11b894:	e1d330ba 	ldrh	r3, [r3, #10]
  11b898:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b89c:	e0423003 	sub	r3, r2, r3
  11b8a0:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11b8a4:	e51b300c 	ldr	r3, [fp, #-12]
  11b8a8:	e5933000 	ldr	r3, [r3]
  11b8ac:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= offset_left)) {
  11b8b0:	e51b300c 	ldr	r3, [fp, #-12]
  11b8b4:	e3530000 	cmp	r3, #0
  11b8b8:	0a000004 	beq	11b8d0 <pbuf_skip_const+0x70>
  11b8bc:	e51b300c 	ldr	r3, [fp, #-12]
  11b8c0:	e1d330ba 	ldrh	r3, [r3, #10]
  11b8c4:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b8c8:	e1520003 	cmp	r2, r3
  11b8cc:	2affffef 	bcs	11b890 <pbuf_skip_const+0x30>
  }
  if (out_offset != NULL) {
  11b8d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b8d4:	e3530000 	cmp	r3, #0
  11b8d8:	0a000002 	beq	11b8e8 <pbuf_skip_const+0x88>
    *out_offset = offset_left;
  11b8dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b8e0:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b8e4:	e1c320b0 	strh	r2, [r3]
  }
  return q;
  11b8e8:	e51b300c 	ldr	r3, [fp, #-12]
}
  11b8ec:	e1a00003 	mov	r0, r3
  11b8f0:	e28bd000 	add	sp, fp, #0
  11b8f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11b8f8:	e12fff1e 	bx	lr

0011b8fc <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11b8fc:	e92d4800 	push	{fp, lr}
  11b900:	e28db004 	add	fp, sp, #4
  11b904:	e24dd018 	sub	sp, sp, #24
  11b908:	e50b0010 	str	r0, [fp, #-16]
  11b90c:	e1a03001 	mov	r3, r1
  11b910:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11b914:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
  11b918:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b91c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11b920:	e1a01003 	mov	r1, r3
  11b924:	e51b0010 	ldr	r0, [fp, #-16]
  11b928:	ebffffcc 	bl	11b860 <pbuf_skip_const>
  11b92c:	e50b0008 	str	r0, [fp, #-8]
  return LWIP_CONST_CAST(struct pbuf*, out);
  11b930:	e51b3008 	ldr	r3, [fp, #-8]
}
  11b934:	e1a00003 	mov	r0, r3
  11b938:	e24bd004 	sub	sp, fp, #4
  11b93c:	e8bd8800 	pop	{fp, pc}

0011b940 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
  11b940:	e92d4800 	push	{fp, lr}
  11b944:	e28db004 	add	fp, sp, #4
  11b948:	e24dd020 	sub	sp, sp, #32
  11b94c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b950:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b954:	e1a03002 	mov	r3, r2
  11b958:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
  11b95c:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b960:	e14b30bc 	strh	r3, [fp, #-12]
  u16_t copied_total = 0;
  11b964:	e3a03000 	mov	r3, #0
  11b968:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
  11b96c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b970:	e3530000 	cmp	r3, #0
  11b974:	1a000008 	bne	11b99c <pbuf_take+0x5c>
  11b978:	e3070a2c 	movw	r0, #31276	; 0x7a2c
  11b97c:	e3400014 	movt	r0, #20
  11b980:	ebff9de3 	bl	103114 <rt_kprintf>
  11b984:	e3001485 	movw	r1, #1157	; 0x485
  11b988:	e3070600 	movw	r0, #30208	; 0x7600
  11b98c:	e3400014 	movt	r0, #20
  11b990:	ebffbdc7 	bl	10b0b4 <sys_arch_assert>
  11b994:	e3e0300f 	mvn	r3, #15
  11b998:	ea000062 	b	11bb28 <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  11b99c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b9a0:	e3530000 	cmp	r3, #0
  11b9a4:	1a000008 	bne	11b9cc <pbuf_take+0x8c>
  11b9a8:	e3070a44 	movw	r0, #31300	; 0x7a44
  11b9ac:	e3400014 	movt	r0, #20
  11b9b0:	ebff9dd7 	bl	103114 <rt_kprintf>
  11b9b4:	e3001486 	movw	r1, #1158	; 0x486
  11b9b8:	e3070600 	movw	r0, #30208	; 0x7600
  11b9bc:	e3400014 	movt	r0, #20
  11b9c0:	ebffbdbb 	bl	10b0b4 <sys_arch_assert>
  11b9c4:	e3e0300f 	mvn	r3, #15
  11b9c8:	ea000056 	b	11bb28 <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
  11b9cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b9d0:	e1d330b8 	ldrh	r3, [r3, #8]
  11b9d4:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b9d8:	e1520003 	cmp	r2, r3
  11b9dc:	9a000008 	bls	11ba04 <pbuf_take+0xc4>
  11b9e0:	e3070a60 	movw	r0, #31328	; 0x7a60
  11b9e4:	e3400014 	movt	r0, #20
  11b9e8:	ebff9dc9 	bl	103114 <rt_kprintf>
  11b9ec:	e3001487 	movw	r1, #1159	; 0x487
  11b9f0:	e3070600 	movw	r0, #30208	; 0x7600
  11b9f4:	e3400014 	movt	r0, #20
  11b9f8:	ebffbdad 	bl	10b0b4 <sys_arch_assert>
  11b9fc:	e3e03000 	mvn	r3, #0
  11ba00:	ea000048 	b	11bb28 <pbuf_take+0x1e8>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
  11ba04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ba08:	e3530000 	cmp	r3, #0
  11ba0c:	0a000007 	beq	11ba30 <pbuf_take+0xf0>
  11ba10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11ba14:	e3530000 	cmp	r3, #0
  11ba18:	0a000004 	beq	11ba30 <pbuf_take+0xf0>
  11ba1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ba20:	e1d330b8 	ldrh	r3, [r3, #8]
  11ba24:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11ba28:	e1520003 	cmp	r2, r3
  11ba2c:	9a000001 	bls	11ba38 <pbuf_take+0xf8>
    return ERR_ARG;
  11ba30:	e3e0300f 	mvn	r3, #15
  11ba34:	ea00003b 	b	11bb28 <pbuf_take+0x1e8>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
  11ba38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ba3c:	e50b3008 	str	r3, [fp, #-8]
  11ba40:	ea000026 	b	11bae0 <pbuf_take+0x1a0>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
  11ba44:	e51b3008 	ldr	r3, [fp, #-8]
  11ba48:	e3530000 	cmp	r3, #0
  11ba4c:	1a000006 	bne	11ba6c <pbuf_take+0x12c>
  11ba50:	e3070a80 	movw	r0, #31360	; 0x7a80
  11ba54:	e3400014 	movt	r0, #20
  11ba58:	ebff9dad 	bl	103114 <rt_kprintf>
  11ba5c:	e300148f 	movw	r1, #1167	; 0x48f
  11ba60:	e3070600 	movw	r0, #30208	; 0x7600
  11ba64:	e3400014 	movt	r0, #20
  11ba68:	ebffbd91 	bl	10b0b4 <sys_arch_assert>
    buf_copy_len = total_copy_len;
  11ba6c:	e15b30bc 	ldrh	r3, [fp, #-12]
  11ba70:	e14b30ba 	strh	r3, [fp, #-10]
    if (buf_copy_len > p->len) {
  11ba74:	e51b3008 	ldr	r3, [fp, #-8]
  11ba78:	e1d330ba 	ldrh	r3, [r3, #10]
  11ba7c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11ba80:	e1520003 	cmp	r2, r3
  11ba84:	9a000002 	bls	11ba94 <pbuf_take+0x154>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
  11ba88:	e51b3008 	ldr	r3, [fp, #-8]
  11ba8c:	e1d330ba 	ldrh	r3, [r3, #10]
  11ba90:	e14b30ba 	strh	r3, [fp, #-10]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
  11ba94:	e51b3008 	ldr	r3, [fp, #-8]
  11ba98:	e5930004 	ldr	r0, [r3, #4]
  11ba9c:	e15b30be 	ldrh	r3, [fp, #-14]
  11baa0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11baa4:	e0823003 	add	r3, r2, r3
  11baa8:	e15b20ba 	ldrh	r2, [fp, #-10]
  11baac:	e1a01003 	mov	r1, r3
  11bab0:	eb0094a9 	bl	140d5c <memcpy>
    total_copy_len -= buf_copy_len;
  11bab4:	e15b20bc 	ldrh	r2, [fp, #-12]
  11bab8:	e15b30ba 	ldrh	r3, [fp, #-10]
  11babc:	e0423003 	sub	r3, r2, r3
  11bac0:	e14b30bc 	strh	r3, [fp, #-12]
    copied_total += buf_copy_len;
  11bac4:	e15b20be 	ldrh	r2, [fp, #-14]
  11bac8:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bacc:	e0823003 	add	r3, r2, r3
  11bad0:	e14b30be 	strh	r3, [fp, #-14]
  for (p = buf; total_copy_len != 0; p = p->next) {
  11bad4:	e51b3008 	ldr	r3, [fp, #-8]
  11bad8:	e5933000 	ldr	r3, [r3]
  11badc:	e50b3008 	str	r3, [fp, #-8]
  11bae0:	e15b30bc 	ldrh	r3, [fp, #-12]
  11bae4:	e3530000 	cmp	r3, #0
  11bae8:	1affffd5 	bne	11ba44 <pbuf_take+0x104>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  11baec:	e15b30bc 	ldrh	r3, [fp, #-12]
  11baf0:	e3530000 	cmp	r3, #0
  11baf4:	1a000003 	bne	11bb08 <pbuf_take+0x1c8>
  11baf8:	e15b20be 	ldrh	r2, [fp, #-14]
  11bafc:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11bb00:	e1520003 	cmp	r2, r3
  11bb04:	0a000006 	beq	11bb24 <pbuf_take+0x1e4>
  11bb08:	e3070a98 	movw	r0, #31384	; 0x7a98
  11bb0c:	e3400014 	movt	r0, #20
  11bb10:	ebff9d7f 	bl	103114 <rt_kprintf>
  11bb14:	e300149a 	movw	r1, #1178	; 0x49a
  11bb18:	e3070600 	movw	r0, #30208	; 0x7600
  11bb1c:	e3400014 	movt	r0, #20
  11bb20:	ebffbd63 	bl	10b0b4 <sys_arch_assert>
  return ERR_OK;
  11bb24:	e3a03000 	mov	r3, #0
}
  11bb28:	e1a00003 	mov	r0, r3
  11bb2c:	e24bd004 	sub	sp, fp, #4
  11bb30:	e8bd8800 	pop	{fp, pc}

0011bb34 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
  11bb34:	e92d4800 	push	{fp, lr}
  11bb38:	e28db004 	add	fp, sp, #4
  11bb3c:	e24dd020 	sub	sp, sp, #32
  11bb40:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11bb44:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11bb48:	e1a01002 	mov	r1, r2
  11bb4c:	e1a02003 	mov	r2, r3
  11bb50:	e1a03001 	mov	r3, r1
  11bb54:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11bb58:	e1a03002 	mov	r3, r2
  11bb5c:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
  11bb60:	e24b2014 	sub	r2, fp, #20
  11bb64:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11bb68:	e1a01003 	mov	r1, r3
  11bb6c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11bb70:	ebffff61 	bl	11b8fc <pbuf_skip>
  11bb74:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
  11bb78:	e51b3008 	ldr	r3, [fp, #-8]
  11bb7c:	e3530000 	cmp	r3, #0
  11bb80:	0a000033 	beq	11bc54 <pbuf_take_at+0x120>
  11bb84:	e51b3008 	ldr	r3, [fp, #-8]
  11bb88:	e1d330b8 	ldrh	r3, [r3, #8]
  11bb8c:	e1a02003 	mov	r2, r3
  11bb90:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11bb94:	e1a01003 	mov	r1, r3
  11bb98:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11bb9c:	e0813003 	add	r3, r1, r3
  11bba0:	e1520003 	cmp	r2, r3
  11bba4:	ba00002a 	blt	11bc54 <pbuf_take_at+0x120>
    u16_t remaining_len = len;
  11bba8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11bbac:	e14b30ba 	strh	r3, [fp, #-10]
    const u8_t* src_ptr = (const u8_t*)dataptr;
  11bbb0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11bbb4:	e50b3010 	str	r3, [fp, #-16]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
  11bbb8:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11bbbc:	e51b3008 	ldr	r3, [fp, #-8]
  11bbc0:	e1d330ba 	ldrh	r3, [r3, #10]
  11bbc4:	e1a01003 	mov	r1, r3
  11bbc8:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11bbcc:	e0413003 	sub	r3, r1, r3
  11bbd0:	e1520003 	cmp	r2, r3
  11bbd4:	b1a03002 	movlt	r3, r2
  11bbd8:	a1a03003 	movge	r3, r3
  11bbdc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
  11bbe0:	e51b3008 	ldr	r3, [fp, #-8]
  11bbe4:	e5933004 	ldr	r3, [r3, #4]
  11bbe8:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  11bbec:	e0833002 	add	r3, r3, r2
  11bbf0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11bbf4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  11bbf8:	e1a00003 	mov	r0, r3
  11bbfc:	eb009456 	bl	140d5c <memcpy>
    remaining_len -= first_copy_len;
  11bc00:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bc04:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bc08:	e0423003 	sub	r3, r2, r3
  11bc0c:	e14b30ba 	strh	r3, [fp, #-10]
    src_ptr += first_copy_len;
  11bc10:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bc14:	e51b2010 	ldr	r2, [fp, #-16]
  11bc18:	e0823003 	add	r3, r2, r3
  11bc1c:	e50b3010 	str	r3, [fp, #-16]
    if (remaining_len > 0) {
  11bc20:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bc24:	e3530000 	cmp	r3, #0
  11bc28:	0a000007 	beq	11bc4c <pbuf_take_at+0x118>
      return pbuf_take(q->next, src_ptr, remaining_len);
  11bc2c:	e51b3008 	ldr	r3, [fp, #-8]
  11bc30:	e5933000 	ldr	r3, [r3]
  11bc34:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bc38:	e51b1010 	ldr	r1, [fp, #-16]
  11bc3c:	e1a00003 	mov	r0, r3
  11bc40:	ebffff3e 	bl	11b940 <pbuf_take>
  11bc44:	e1a03000 	mov	r3, r0
  11bc48:	ea000002 	b	11bc58 <pbuf_take_at+0x124>
    }
    return ERR_OK;
  11bc4c:	e3a03000 	mov	r3, #0
  11bc50:	ea000000 	b	11bc58 <pbuf_take_at+0x124>
  }
  return ERR_MEM;
  11bc54:	e3e03000 	mvn	r3, #0
}
  11bc58:	e1a00003 	mov	r0, r3
  11bc5c:	e24bd004 	sub	sp, fp, #4
  11bc60:	e8bd8800 	pop	{fp, pc}

0011bc64 <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf*
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
  11bc64:	e92d4800 	push	{fp, lr}
  11bc68:	e28db004 	add	fp, sp, #4
  11bc6c:	e24dd010 	sub	sp, sp, #16
  11bc70:	e50b0010 	str	r0, [fp, #-16]
  11bc74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  err_t err;
  if (p->next == NULL) {
  11bc78:	e51b3010 	ldr	r3, [fp, #-16]
  11bc7c:	e5933000 	ldr	r3, [r3]
  11bc80:	e3530000 	cmp	r3, #0
  11bc84:	1a000001 	bne	11bc90 <pbuf_coalesce+0x2c>
    return p;
  11bc88:	e51b3010 	ldr	r3, [fp, #-16]
  11bc8c:	ea00001d 	b	11bd08 <pbuf_coalesce+0xa4>
  }
  q = pbuf_alloc(layer, p->tot_len, PBUF_RAM);
  11bc90:	e51b3010 	ldr	r3, [fp, #-16]
  11bc94:	e1d330b8 	ldrh	r3, [r3, #8]
  11bc98:	e3a02000 	mov	r2, #0
  11bc9c:	e1a01003 	mov	r1, r3
  11bca0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11bca4:	ebfff96b 	bl	11a258 <pbuf_alloc>
  11bca8:	e50b0008 	str	r0, [fp, #-8]
  if (q == NULL) {
  11bcac:	e51b3008 	ldr	r3, [fp, #-8]
  11bcb0:	e3530000 	cmp	r3, #0
  11bcb4:	1a000001 	bne	11bcc0 <pbuf_coalesce+0x5c>
    /* @todo: what do we do now? */
    return p;
  11bcb8:	e51b3010 	ldr	r3, [fp, #-16]
  11bcbc:	ea000011 	b	11bd08 <pbuf_coalesce+0xa4>
  }
  err = pbuf_copy(q, p);
  11bcc0:	e51b1010 	ldr	r1, [fp, #-16]
  11bcc4:	e51b0008 	ldr	r0, [fp, #-8]
  11bcc8:	ebfffdbe 	bl	11b3c8 <pbuf_copy>
  11bccc:	e1a03000 	mov	r3, r0
  11bcd0:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  11bcd4:	e15b30d9 	ldrsb	r3, [fp, #-9]
  11bcd8:	e3530000 	cmp	r3, #0
  11bcdc:	0a000006 	beq	11bcfc <pbuf_coalesce+0x98>
  11bce0:	e3070ab0 	movw	r0, #31408	; 0x7ab0
  11bce4:	e3400014 	movt	r0, #20
  11bce8:	ebff9d09 	bl	103114 <rt_kprintf>
  11bcec:	e30014dc 	movw	r1, #1244	; 0x4dc
  11bcf0:	e3070600 	movw	r0, #30208	; 0x7600
  11bcf4:	e3400014 	movt	r0, #20
  11bcf8:	ebffbced 	bl	10b0b4 <sys_arch_assert>
  pbuf_free(p);
  11bcfc:	e51b0010 	ldr	r0, [fp, #-16]
  11bd00:	ebfffc5b 	bl	11ae74 <pbuf_free>
  return q;
  11bd04:	e51b3008 	ldr	r3, [fp, #-8]
}
  11bd08:	e1a00003 	mov	r0, r3
  11bd0c:	e24bd004 	sub	sp, fp, #4
  11bd10:	e8bd8800 	pop	{fp, pc}

0011bd14 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf* p, u16_t offset)
{
  11bd14:	e92d4800 	push	{fp, lr}
  11bd18:	e28db004 	add	fp, sp, #4
  11bd1c:	e24dd010 	sub	sp, sp, #16
  11bd20:	e50b0010 	str	r0, [fp, #-16]
  11bd24:	e1a03001 	mov	r3, r1
  11bd28:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int ret = pbuf_try_get_at(p, offset);
  11bd2c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bd30:	e1a01003 	mov	r1, r3
  11bd34:	e51b0010 	ldr	r0, [fp, #-16]
  11bd38:	eb00000a 	bl	11bd68 <pbuf_try_get_at>
  11bd3c:	e50b0008 	str	r0, [fp, #-8]
  if (ret >= 0) {
  11bd40:	e51b3008 	ldr	r3, [fp, #-8]
  11bd44:	e3530000 	cmp	r3, #0
  11bd48:	ba000002 	blt	11bd58 <pbuf_get_at+0x44>
    return (u8_t)ret;
  11bd4c:	e51b3008 	ldr	r3, [fp, #-8]
  11bd50:	e6ef3073 	uxtb	r3, r3
  11bd54:	ea000000 	b	11bd5c <pbuf_get_at+0x48>
  }
  return 0;
  11bd58:	e3a03000 	mov	r3, #0
}
  11bd5c:	e1a00003 	mov	r0, r3
  11bd60:	e24bd004 	sub	sp, fp, #4
  11bd64:	e8bd8800 	pop	{fp, pc}

0011bd68 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf* p, u16_t offset)
{
  11bd68:	e92d4800 	push	{fp, lr}
  11bd6c:	e28db004 	add	fp, sp, #4
  11bd70:	e24dd010 	sub	sp, sp, #16
  11bd74:	e50b0010 	str	r0, [fp, #-16]
  11bd78:	e1a03001 	mov	r3, r1
  11bd7c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t q_idx;
  const struct pbuf* q = pbuf_skip_const(p, offset, &q_idx);
  11bd80:	e24b200a 	sub	r2, fp, #10
  11bd84:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bd88:	e1a01003 	mov	r1, r3
  11bd8c:	e51b0010 	ldr	r0, [fp, #-16]
  11bd90:	ebfffeb2 	bl	11b860 <pbuf_skip_const>
  11bd94:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11bd98:	e51b3008 	ldr	r3, [fp, #-8]
  11bd9c:	e3530000 	cmp	r3, #0
  11bda0:	0a00000a 	beq	11bdd0 <pbuf_try_get_at+0x68>
  11bda4:	e51b3008 	ldr	r3, [fp, #-8]
  11bda8:	e1d320ba 	ldrh	r2, [r3, #10]
  11bdac:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bdb0:	e1520003 	cmp	r2, r3
  11bdb4:	9a000005 	bls	11bdd0 <pbuf_try_get_at+0x68>
    return ((u8_t*)q->payload)[q_idx];
  11bdb8:	e51b3008 	ldr	r3, [fp, #-8]
  11bdbc:	e5933004 	ldr	r3, [r3, #4]
  11bdc0:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bdc4:	e0833002 	add	r3, r3, r2
  11bdc8:	e5d33000 	ldrb	r3, [r3]
  11bdcc:	ea000000 	b	11bdd4 <pbuf_try_get_at+0x6c>
  }
  return -1;
  11bdd0:	e3e03000 	mvn	r3, #0
}
  11bdd4:	e1a00003 	mov	r0, r3
  11bdd8:	e24bd004 	sub	sp, fp, #4
  11bddc:	e8bd8800 	pop	{fp, pc}

0011bde0 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf* p, u16_t offset, u8_t data)
{
  11bde0:	e92d4800 	push	{fp, lr}
  11bde4:	e28db004 	add	fp, sp, #4
  11bde8:	e24dd010 	sub	sp, sp, #16
  11bdec:	e50b0010 	str	r0, [fp, #-16]
  11bdf0:	e1a03001 	mov	r3, r1
  11bdf4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11bdf8:	e1a03002 	mov	r3, r2
  11bdfc:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t q_idx;
  struct pbuf* q = pbuf_skip(p, offset, &q_idx);
  11be00:	e24b200a 	sub	r2, fp, #10
  11be04:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11be08:	e1a01003 	mov	r1, r3
  11be0c:	e51b0010 	ldr	r0, [fp, #-16]
  11be10:	ebfffeb9 	bl	11b8fc <pbuf_skip>
  11be14:	e50b0008 	str	r0, [fp, #-8]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11be18:	e51b3008 	ldr	r3, [fp, #-8]
  11be1c:	e3530000 	cmp	r3, #0
  11be20:	0a00000a 	beq	11be50 <pbuf_put_at+0x70>
  11be24:	e51b3008 	ldr	r3, [fp, #-8]
  11be28:	e1d320ba 	ldrh	r2, [r3, #10]
  11be2c:	e15b30ba 	ldrh	r3, [fp, #-10]
  11be30:	e1520003 	cmp	r2, r3
  11be34:	9a000005 	bls	11be50 <pbuf_put_at+0x70>
    ((u8_t*)q->payload)[q_idx] = data;
  11be38:	e51b3008 	ldr	r3, [fp, #-8]
  11be3c:	e5933004 	ldr	r3, [r3, #4]
  11be40:	e15b20ba 	ldrh	r2, [fp, #-10]
  11be44:	e0833002 	add	r3, r3, r2
  11be48:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  11be4c:	e5c32000 	strb	r2, [r3]
  }
}
  11be50:	e320f000 	nop	{0}
  11be54:	e24bd004 	sub	sp, fp, #4
  11be58:	e8bd8800 	pop	{fp, pc}

0011be5c <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf* p, u16_t offset, const void* s2, u16_t n)
{
  11be5c:	e92d4800 	push	{fp, lr}
  11be60:	e28db004 	add	fp, sp, #4
  11be64:	e24dd020 	sub	sp, sp, #32
  11be68:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11be6c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11be70:	e1a02003 	mov	r2, r3
  11be74:	e1a03001 	mov	r3, r1
  11be78:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  11be7c:	e1a03002 	mov	r3, r2
  11be80:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  u16_t start = offset;
  11be84:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11be88:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = p;
  11be8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11be90:	e50b300c 	str	r3, [fp, #-12]
  u16_t i;
 
  /* pbuf long enough to perform check? */
  if(p->tot_len < (offset + n)) {
  11be94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11be98:	e1d330b8 	ldrh	r3, [r3, #8]
  11be9c:	e1a01003 	mov	r1, r3
  11bea0:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11bea4:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11bea8:	e0823003 	add	r3, r2, r3
  11beac:	e1510003 	cmp	r1, r3
  11beb0:	aa000009 	bge	11bedc <pbuf_memcmp+0x80>
    return 0xffff;
  11beb4:	e30f3fff 	movw	r3, #65535	; 0xffff
  11beb8:	ea000030 	b	11bf80 <pbuf_memcmp+0x124>
  }
 
  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start -= q->len;
  11bebc:	e51b300c 	ldr	r3, [fp, #-12]
  11bec0:	e1d330ba 	ldrh	r3, [r3, #10]
  11bec4:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bec8:	e0423003 	sub	r3, r2, r3
  11becc:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11bed0:	e51b300c 	ldr	r3, [fp, #-12]
  11bed4:	e5933000 	ldr	r3, [r3]
  11bed8:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= start)) {
  11bedc:	e51b300c 	ldr	r3, [fp, #-12]
  11bee0:	e3530000 	cmp	r3, #0
  11bee4:	0a000004 	beq	11befc <pbuf_memcmp+0xa0>
  11bee8:	e51b300c 	ldr	r3, [fp, #-12]
  11beec:	e1d330ba 	ldrh	r3, [r3, #10]
  11bef0:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bef4:	e1520003 	cmp	r2, r3
  11bef8:	2affffef 	bcs	11bebc <pbuf_memcmp+0x60>
  }
 
  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
  11befc:	e3a03000 	mov	r3, #0
  11bf00:	e14b30be 	strh	r3, [fp, #-14]
  11bf04:	ea000018 	b	11bf6c <pbuf_memcmp+0x110>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, start + i);
  11bf08:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bf0c:	e15b30be 	ldrh	r3, [fp, #-14]
  11bf10:	e0823003 	add	r3, r2, r3
  11bf14:	e6ff3073 	uxth	r3, r3
  11bf18:	e1a01003 	mov	r1, r3
  11bf1c:	e51b000c 	ldr	r0, [fp, #-12]
  11bf20:	ebffff7b 	bl	11bd14 <pbuf_get_at>
  11bf24:	e1a03000 	mov	r3, r0
  11bf28:	e54b300f 	strb	r3, [fp, #-15]
    u8_t b = ((const u8_t*)s2)[i];
  11bf2c:	e15b30be 	ldrh	r3, [fp, #-14]
  11bf30:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11bf34:	e0823003 	add	r3, r2, r3
  11bf38:	e5d33000 	ldrb	r3, [r3]
  11bf3c:	e54b3010 	strb	r3, [fp, #-16]
    if (a != b) {
  11bf40:	e55b200f 	ldrb	r2, [fp, #-15]
  11bf44:	e55b3010 	ldrb	r3, [fp, #-16]
  11bf48:	e1520003 	cmp	r2, r3
  11bf4c:	0a000003 	beq	11bf60 <pbuf_memcmp+0x104>
      return i+1;
  11bf50:	e15b30be 	ldrh	r3, [fp, #-14]
  11bf54:	e2833001 	add	r3, r3, #1
  11bf58:	e6ff3073 	uxth	r3, r3
  11bf5c:	ea000007 	b	11bf80 <pbuf_memcmp+0x124>
  for (i = 0; i < n; i++) {
  11bf60:	e15b30be 	ldrh	r3, [fp, #-14]
  11bf64:	e2833001 	add	r3, r3, #1
  11bf68:	e14b30be 	strh	r3, [fp, #-14]
  11bf6c:	e15b20be 	ldrh	r2, [fp, #-14]
  11bf70:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11bf74:	e1520003 	cmp	r2, r3
  11bf78:	3affffe2 	bcc	11bf08 <pbuf_memcmp+0xac>
    }
  }
  return 0;
  11bf7c:	e3a03000 	mov	r3, #0
}
  11bf80:	e1a00003 	mov	r0, r3
  11bf84:	e24bd004 	sub	sp, fp, #4
  11bf88:	e8bd8800 	pop	{fp, pc}

0011bf8c <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
  11bf8c:	e92d4800 	push	{fp, lr}
  11bf90:	e28db004 	add	fp, sp, #4
  11bf94:	e24dd018 	sub	sp, sp, #24
  11bf98:	e50b0010 	str	r0, [fp, #-16]
  11bf9c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11bfa0:	e1a01002 	mov	r1, r2
  11bfa4:	e1a02003 	mov	r2, r3
  11bfa8:	e1a03001 	mov	r3, r1
  11bfac:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  11bfb0:	e1a03002 	mov	r3, r2
  11bfb4:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  u16_t i;
  u16_t max = p->tot_len - mem_len;
  11bfb8:	e51b3010 	ldr	r3, [fp, #-16]
  11bfbc:	e1d320b8 	ldrh	r2, [r3, #8]
  11bfc0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11bfc4:	e0423003 	sub	r3, r2, r3
  11bfc8:	e14b30b8 	strh	r3, [fp, #-8]
  if (p->tot_len >= mem_len + start_offset) {
  11bfcc:	e51b3010 	ldr	r3, [fp, #-16]
  11bfd0:	e1d330b8 	ldrh	r3, [r3, #8]
  11bfd4:	e1a01003 	mov	r1, r3
  11bfd8:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  11bfdc:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11bfe0:	e0823003 	add	r3, r2, r3
  11bfe4:	e1510003 	cmp	r1, r3
  11bfe8:	ba000015 	blt	11c044 <pbuf_memfind+0xb8>
    for (i = start_offset; i <= max; i++) {
  11bfec:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11bff0:	e14b30b6 	strh	r3, [fp, #-6]
  11bff4:	ea00000e 	b	11c034 <pbuf_memfind+0xa8>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
  11bff8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11bffc:	e15b10b6 	ldrh	r1, [fp, #-6]
  11c000:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11c004:	e51b0010 	ldr	r0, [fp, #-16]
  11c008:	ebffff93 	bl	11be5c <pbuf_memcmp>
  11c00c:	e1a03000 	mov	r3, r0
  11c010:	e14b30ba 	strh	r3, [fp, #-10]
      if (plus == 0) {
  11c014:	e15b30ba 	ldrh	r3, [fp, #-10]
  11c018:	e3530000 	cmp	r3, #0
  11c01c:	1a000001 	bne	11c028 <pbuf_memfind+0x9c>
        return i;
  11c020:	e15b30b6 	ldrh	r3, [fp, #-6]
  11c024:	ea000007 	b	11c048 <pbuf_memfind+0xbc>
    for (i = start_offset; i <= max; i++) {
  11c028:	e15b30b6 	ldrh	r3, [fp, #-6]
  11c02c:	e2833001 	add	r3, r3, #1
  11c030:	e14b30b6 	strh	r3, [fp, #-6]
  11c034:	e15b20b6 	ldrh	r2, [fp, #-6]
  11c038:	e15b30b8 	ldrh	r3, [fp, #-8]
  11c03c:	e1520003 	cmp	r2, r3
  11c040:	9affffec 	bls	11bff8 <pbuf_memfind+0x6c>
      }
    }
  }
  return 0xFFFF;
  11c044:	e30f3fff 	movw	r3, #65535	; 0xffff
}
  11c048:	e1a00003 	mov	r0, r3
  11c04c:	e24bd004 	sub	sp, fp, #4
  11c050:	e8bd8800 	pop	{fp, pc}

0011c054 <pbuf_strstr>:
 * @param substr string to search for in p, maximum length is 0xFFFE
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_strstr(const struct pbuf* p, const char* substr)
{
  11c054:	e92d4800 	push	{fp, lr}
  11c058:	e28db004 	add	fp, sp, #4
  11c05c:	e24dd010 	sub	sp, sp, #16
  11c060:	e50b0010 	str	r0, [fp, #-16]
  11c064:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  size_t substr_len;
  if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
  11c068:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c06c:	e3530000 	cmp	r3, #0
  11c070:	0a000008 	beq	11c098 <pbuf_strstr+0x44>
  11c074:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c078:	e5d33000 	ldrb	r3, [r3]
  11c07c:	e3530000 	cmp	r3, #0
  11c080:	0a000004 	beq	11c098 <pbuf_strstr+0x44>
  11c084:	e51b3010 	ldr	r3, [fp, #-16]
  11c088:	e1d330b8 	ldrh	r3, [r3, #8]
  11c08c:	e30f2fff 	movw	r2, #65535	; 0xffff
  11c090:	e1530002 	cmp	r3, r2
  11c094:	1a000001 	bne	11c0a0 <pbuf_strstr+0x4c>
    return 0xFFFF;
  11c098:	e30f3fff 	movw	r3, #65535	; 0xffff
  11c09c:	ea00000f 	b	11c0e0 <pbuf_strstr+0x8c>
  }
  substr_len = strlen(substr);
  11c0a0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11c0a4:	eb0094f5 	bl	141480 <strlen>
  11c0a8:	e50b0008 	str	r0, [fp, #-8]
  if (substr_len >= 0xFFFF) {
  11c0ac:	e51b3008 	ldr	r3, [fp, #-8]
  11c0b0:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11c0b4:	e1530002 	cmp	r3, r2
  11c0b8:	9a000001 	bls	11c0c4 <pbuf_strstr+0x70>
    return 0xFFFF;
  11c0bc:	e30f3fff 	movw	r3, #65535	; 0xffff
  11c0c0:	ea000006 	b	11c0e0 <pbuf_strstr+0x8c>
  }
  return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
  11c0c4:	e51b3008 	ldr	r3, [fp, #-8]
  11c0c8:	e6ff2073 	uxth	r2, r3
  11c0cc:	e3a03000 	mov	r3, #0
  11c0d0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c0d4:	e51b0010 	ldr	r0, [fp, #-16]
  11c0d8:	ebffffab 	bl	11bf8c <pbuf_memfind>
  11c0dc:	e1a03000 	mov	r3, r0
}
  11c0e0:	e1a00003 	mov	r0, r3
  11c0e4:	e24bd004 	sub	sp, fp, #4
  11c0e8:	e8bd8800 	pop	{fp, pc}

0011c0ec <raw_input_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_match(struct raw_pcb *pcb, u8_t broadcast)
{
  11c0ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c0f0:	e28db000 	add	fp, sp, #0
  11c0f4:	e24dd00c 	sub	sp, sp, #12
  11c0f8:	e50b0008 	str	r0, [fp, #-8]
  11c0fc:	e1a03001 	mov	r3, r1
  11c100:	e54b3009 	strb	r3, [fp, #-9]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  11c104:	e55b3009 	ldrb	r3, [fp, #-9]
  11c108:	e3530000 	cmp	r3, #0
  11c10c:	0a00000d 	beq	11c148 <raw_input_match+0x5c>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  11c110:	e51b3008 	ldr	r3, [fp, #-8]
  11c114:	e5d33008 	ldrb	r3, [r3, #8]
  11c118:	e2033020 	and	r3, r3, #32
  11c11c:	e3530000 	cmp	r3, #0
  11c120:	0a000018 	beq	11c188 <raw_input_match+0x9c>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
  11c124:	e51b3008 	ldr	r3, [fp, #-8]
  11c128:	e3530000 	cmp	r3, #0
  11c12c:	0a000003 	beq	11c140 <raw_input_match+0x54>
  11c130:	e51b3008 	ldr	r3, [fp, #-8]
  11c134:	e5933000 	ldr	r3, [r3]
  11c138:	e3530000 	cmp	r3, #0
  11c13c:	1a000011 	bne	11c188 <raw_input_match+0x9c>
          return 1;
  11c140:	e3a03001 	mov	r3, #1
  11c144:	ea000010 	b	11c18c <raw_input_match+0xa0>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: catch all or exact match */
    if (ip_addr_isany(&pcb->local_ip) ||
  11c148:	e51b3008 	ldr	r3, [fp, #-8]
  11c14c:	e3530000 	cmp	r3, #0
  11c150:	0a00000a 	beq	11c180 <raw_input_match+0x94>
  11c154:	e51b3008 	ldr	r3, [fp, #-8]
  11c158:	e5933000 	ldr	r3, [r3]
  11c15c:	e3530000 	cmp	r3, #0
  11c160:	0a000006 	beq	11c180 <raw_input_match+0x94>
       ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  11c164:	e51b3008 	ldr	r3, [fp, #-8]
  11c168:	e5932000 	ldr	r2, [r3]
  11c16c:	e30f3610 	movw	r3, #62992	; 0xf610
  11c170:	e3403014 	movt	r3, #20
  11c174:	e5933014 	ldr	r3, [r3, #20]
    if (ip_addr_isany(&pcb->local_ip) ||
  11c178:	e1520003 	cmp	r2, r3
  11c17c:	1a000001 	bne	11c188 <raw_input_match+0x9c>
      return 1;
  11c180:	e3a03001 	mov	r3, #1
  11c184:	ea000000 	b	11c18c <raw_input_match+0xa0>
    }
  }

  return 0;
  11c188:	e3a03000 	mov	r3, #0
}
  11c18c:	e1a00003 	mov	r0, r3
  11c190:	e28bd000 	add	sp, fp, #0
  11c194:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c198:	e12fff1e 	bx	lr

0011c19c <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
  11c19c:	e92d4810 	push	{r4, fp, lr}
  11c1a0:	e28db008 	add	fp, sp, #8
  11c1a4:	e24dd01c 	sub	sp, sp, #28
  11c1a8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11c1ac:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  u8_t eaten = 0;
  11c1b0:	e3a03000 	mov	r3, #0
  11c1b4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  11c1b8:	e30f3610 	movw	r3, #62992	; 0xf610
  11c1bc:	e3403014 	movt	r3, #20
  11c1c0:	e5932014 	ldr	r2, [r3, #20]
  11c1c4:	e30f3610 	movw	r3, #62992	; 0xf610
  11c1c8:	e3403014 	movt	r3, #20
  11c1cc:	e5933000 	ldr	r3, [r3]
  11c1d0:	e1a01003 	mov	r1, r3
  11c1d4:	e1a00002 	mov	r0, r2
  11c1d8:	eb0058bd 	bl	1324d4 <ip4_addr_isbroadcast_u32>
  11c1dc:	e1a03000 	mov	r3, r0
  11c1e0:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  11c1e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c1e8:	e5933004 	ldr	r3, [r3, #4]
  11c1ec:	e5d33009 	ldrb	r3, [r3, #9]
  11c1f0:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  11c1f4:	e3a03000 	mov	r3, #0
  11c1f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb = raw_pcbs;
  11c1fc:	e30e323c 	movw	r3, #57916	; 0xe23c
  11c200:	e3403014 	movt	r3, #20
  11c204:	e5933000 	ldr	r3, [r3]
  11c208:	e50b3010 	str	r3, [fp, #-16]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
  11c20c:	ea000046 	b	11c32c <raw_input+0x190>
    if ((pcb->protocol == proto) && raw_input_match(pcb, broadcast)) {
  11c210:	e51b3010 	ldr	r3, [fp, #-16]
  11c214:	e5d33010 	ldrb	r3, [r3, #16]
  11c218:	e1a02003 	mov	r2, r3
  11c21c:	e15b31f8 	ldrsh	r3, [fp, #-24]	; 0xffffffe8
  11c220:	e1520003 	cmp	r2, r3
  11c224:	1a00003b 	bne	11c318 <raw_input+0x17c>
  11c228:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
  11c22c:	e1a01003 	mov	r1, r3
  11c230:	e51b0010 	ldr	r0, [fp, #-16]
  11c234:	ebffffac 	bl	11c0ec <raw_input_match>
  11c238:	e1a03000 	mov	r3, r0
  11c23c:	e3530000 	cmp	r3, #0
  11c240:	0a000034 	beq	11c318 <raw_input+0x17c>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
  11c244:	e51b3010 	ldr	r3, [fp, #-16]
  11c248:	e5933014 	ldr	r3, [r3, #20]
  11c24c:	e3530000 	cmp	r3, #0
  11c250:	0a000030 	beq	11c318 <raw_input+0x17c>
#ifndef LWIP_NOASSERT
        void* old_payload = p->payload;
  11c254:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c258:	e5933004 	ldr	r3, [r3, #4]
  11c25c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#endif
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
  11c260:	e51b3010 	ldr	r3, [fp, #-16]
  11c264:	e5934014 	ldr	r4, [r3, #20]
  11c268:	e51b3010 	ldr	r3, [fp, #-16]
  11c26c:	e5930018 	ldr	r0, [r3, #24]
  11c270:	e59f30dc 	ldr	r3, [pc, #220]	; 11c354 <raw_input+0x1b8>
  11c274:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11c278:	e51b1010 	ldr	r1, [fp, #-16]
  11c27c:	e12fff34 	blx	r4
  11c280:	e1a03000 	mov	r3, r0
  11c284:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
        if (eaten != 0) {
  11c288:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11c28c:	e3530000 	cmp	r3, #0
  11c290:	0a000014 	beq	11c2e8 <raw_input+0x14c>
          /* receive function ate the packet */
          p = NULL;
  11c294:	e3a03000 	mov	r3, #0
  11c298:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          eaten = 1;
  11c29c:	e3a03001 	mov	r3, #1
  11c2a0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
          if (prev != NULL) {
  11c2a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c2a8:	e3530000 	cmp	r3, #0
  11c2ac:	0a000019 	beq	11c318 <raw_input+0x17c>
          /* move the pcb to the front of raw_pcbs so that is
             found faster next time */
            prev->next = pcb->next;
  11c2b0:	e51b3010 	ldr	r3, [fp, #-16]
  11c2b4:	e593200c 	ldr	r2, [r3, #12]
  11c2b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c2bc:	e583200c 	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
  11c2c0:	e30e323c 	movw	r3, #57916	; 0xe23c
  11c2c4:	e3403014 	movt	r3, #20
  11c2c8:	e5932000 	ldr	r2, [r3]
  11c2cc:	e51b3010 	ldr	r3, [fp, #-16]
  11c2d0:	e583200c 	str	r2, [r3, #12]
            raw_pcbs = pcb;
  11c2d4:	e30e323c 	movw	r3, #57916	; 0xe23c
  11c2d8:	e3403014 	movt	r3, #20
  11c2dc:	e51b2010 	ldr	r2, [fp, #-16]
  11c2e0:	e5832000 	str	r2, [r3]
  11c2e4:	ea00000b 	b	11c318 <raw_input+0x17c>
          }
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
  11c2e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c2ec:	e5933004 	ldr	r3, [r3, #4]
  11c2f0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11c2f4:	e1520003 	cmp	r2, r3
  11c2f8:	0a000006 	beq	11c318 <raw_input+0x17c>
  11c2fc:	e3070ac4 	movw	r0, #31428	; 0x7ac4
  11c300:	e3400014 	movt	r0, #20
  11c304:	ebff9b82 	bl	103114 <rt_kprintf>
  11c308:	e3a010b6 	mov	r1, #182	; 0xb6
  11c30c:	e3070b10 	movw	r0, #31504	; 0x7b10
  11c310:	e3400014 	movt	r0, #20
  11c314:	ebffbb66 	bl	10b0b4 <sys_arch_assert>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
  11c318:	e51b3010 	ldr	r3, [fp, #-16]
  11c31c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    pcb = pcb->next;
  11c320:	e51b3010 	ldr	r3, [fp, #-16]
  11c324:	e593300c 	ldr	r3, [r3, #12]
  11c328:	e50b3010 	str	r3, [fp, #-16]
  while ((eaten == 0) && (pcb != NULL)) {
  11c32c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11c330:	e3530000 	cmp	r3, #0
  11c334:	1a000002 	bne	11c344 <raw_input+0x1a8>
  11c338:	e51b3010 	ldr	r3, [fp, #-16]
  11c33c:	e3530000 	cmp	r3, #0
  11c340:	1affffb2 	bne	11c210 <raw_input+0x74>
  }
  return eaten;
  11c344:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
}
  11c348:	e1a00003 	mov	r0, r3
  11c34c:	e24bd008 	sub	sp, fp, #8
  11c350:	e8bd8810 	pop	{r4, fp, pc}
  11c354:	0014f620 	.word	0x0014f620

0011c358 <raw_bind>:
 *
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11c358:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c35c:	e28db000 	add	fp, sp, #0
  11c360:	e24dd00c 	sub	sp, sp, #12
  11c364:	e50b0008 	str	r0, [fp, #-8]
  11c368:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c36c:	e51b3008 	ldr	r3, [fp, #-8]
  11c370:	e3530000 	cmp	r3, #0
  11c374:	0a000002 	beq	11c384 <raw_bind+0x2c>
  11c378:	e51b300c 	ldr	r3, [fp, #-12]
  11c37c:	e3530000 	cmp	r3, #0
  11c380:	1a000001 	bne	11c38c <raw_bind+0x34>
    return ERR_VAL;
  11c384:	e3e03005 	mvn	r3, #5
  11c388:	ea000009 	b	11c3b4 <raw_bind+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  11c38c:	e51b300c 	ldr	r3, [fp, #-12]
  11c390:	e3530000 	cmp	r3, #0
  11c394:	0a000002 	beq	11c3a4 <raw_bind+0x4c>
  11c398:	e51b300c 	ldr	r3, [fp, #-12]
  11c39c:	e5933000 	ldr	r3, [r3]
  11c3a0:	ea000000 	b	11c3a8 <raw_bind+0x50>
  11c3a4:	e3a03000 	mov	r3, #0
  11c3a8:	e51b2008 	ldr	r2, [fp, #-8]
  11c3ac:	e5823000 	str	r3, [r2]
  return ERR_OK;
  11c3b0:	e3a03000 	mov	r3, #0
}
  11c3b4:	e1a00003 	mov	r0, r3
  11c3b8:	e28bd000 	add	sp, fp, #0
  11c3bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c3c0:	e12fff1e 	bx	lr

0011c3c4 <raw_connect>:
 *
 * @see raw_disconnect() and raw_sendto()
 */
err_t
raw_connect(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11c3c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c3c8:	e28db000 	add	fp, sp, #0
  11c3cc:	e24dd00c 	sub	sp, sp, #12
  11c3d0:	e50b0008 	str	r0, [fp, #-8]
  11c3d4:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c3d8:	e51b3008 	ldr	r3, [fp, #-8]
  11c3dc:	e3530000 	cmp	r3, #0
  11c3e0:	0a000002 	beq	11c3f0 <raw_connect+0x2c>
  11c3e4:	e51b300c 	ldr	r3, [fp, #-12]
  11c3e8:	e3530000 	cmp	r3, #0
  11c3ec:	1a000001 	bne	11c3f8 <raw_connect+0x34>
    return ERR_VAL;
  11c3f0:	e3e03005 	mvn	r3, #5
  11c3f4:	ea000009 	b	11c420 <raw_connect+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  11c3f8:	e51b300c 	ldr	r3, [fp, #-12]
  11c3fc:	e3530000 	cmp	r3, #0
  11c400:	0a000002 	beq	11c410 <raw_connect+0x4c>
  11c404:	e51b300c 	ldr	r3, [fp, #-12]
  11c408:	e5933000 	ldr	r3, [r3]
  11c40c:	ea000000 	b	11c414 <raw_connect+0x50>
  11c410:	e3a03000 	mov	r3, #0
  11c414:	e51b2008 	ldr	r2, [fp, #-8]
  11c418:	e5823004 	str	r3, [r2, #4]
  return ERR_OK;
  11c41c:	e3a03000 	mov	r3, #0
}
  11c420:	e1a00003 	mov	r0, r3
  11c424:	e28bd000 	add	sp, fp, #0
  11c428:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c42c:	e12fff1e 	bx	lr

0011c430 <raw_recv>:
 * - not free the packet, and return zero. The packet will be matched
 *   against further PCBs and/or forwarded to another protocol layers.
 */
void
raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)
{
  11c430:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c434:	e28db000 	add	fp, sp, #0
  11c438:	e24dd014 	sub	sp, sp, #20
  11c43c:	e50b0008 	str	r0, [fp, #-8]
  11c440:	e50b100c 	str	r1, [fp, #-12]
  11c444:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  11c448:	e51b3008 	ldr	r3, [fp, #-8]
  11c44c:	e51b200c 	ldr	r2, [fp, #-12]
  11c450:	e5832014 	str	r2, [r3, #20]
  pcb->recv_arg = recv_arg;
  11c454:	e51b3008 	ldr	r3, [fp, #-8]
  11c458:	e51b2010 	ldr	r2, [fp, #-16]
  11c45c:	e5832018 	str	r2, [r3, #24]
}
  11c460:	e320f000 	nop	{0}
  11c464:	e28bd000 	add	sp, fp, #0
  11c468:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c46c:	e12fff1e 	bx	lr

0011c470 <raw_sendto>:
 * @param ipaddr the destination address of the IP packet
 *
 */
err_t
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, const ip_addr_t *ipaddr)
{
  11c470:	e92d4800 	push	{fp, lr}
  11c474:	e28db004 	add	fp, sp, #4
  11c478:	e24dd038 	sub	sp, sp, #56	; 0x38
  11c47c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11c480:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  11c484:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct netif *netif;
  const ip_addr_t *src_ip;
  struct pbuf *q; /* q will be sent down the stack */
  s16_t header_size;

  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
  11c488:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c48c:	e3530000 	cmp	r3, #0
  11c490:	0a000002 	beq	11c4a0 <raw_sendto+0x30>
  11c494:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c498:	e3530000 	cmp	r3, #0
  11c49c:	1a000001 	bne	11c4a8 <raw_sendto+0x38>
    return ERR_VAL;
  11c4a0:	e3e03005 	mvn	r3, #5
  11c4a4:	ea00007c 	b	11c69c <raw_sendto+0x22c>
  }

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_sendto\n"));

  header_size = (
  11c4a8:	e3a03014 	mov	r3, #20
  11c4ac:	e14b30be 	strh	r3, [fp, #-14]
#else
    IP6_HLEN);
#endif

  /* not enough space to add an IP header to first pbuf in given p chain? */
  if (pbuf_header(p, header_size)) {
  11c4b0:	e15b30fe 	ldrsh	r3, [fp, #-14]
  11c4b4:	e1a01003 	mov	r1, r3
  11c4b8:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11c4bc:	ebfffa4e 	bl	11adfc <pbuf_header>
  11c4c0:	e1a03000 	mov	r3, r0
  11c4c4:	e3530000 	cmp	r3, #0
  11c4c8:	0a000011 	beq	11c514 <raw_sendto+0xa4>
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
  11c4cc:	e3a02000 	mov	r2, #0
  11c4d0:	e3a01000 	mov	r1, #0
  11c4d4:	e3a00001 	mov	r0, #1
  11c4d8:	ebfff75e 	bl	11a258 <pbuf_alloc>
  11c4dc:	e50b000c 	str	r0, [fp, #-12]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  11c4e0:	e51b300c 	ldr	r3, [fp, #-12]
  11c4e4:	e3530000 	cmp	r3, #0
  11c4e8:	1a000001 	bne	11c4f4 <raw_sendto+0x84>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
  11c4ec:	e3e03000 	mvn	r3, #0
  11c4f0:	ea000069 	b	11c69c <raw_sendto+0x22c>
    }
    if (p->tot_len != 0) {
  11c4f4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c4f8:	e1d330b8 	ldrh	r3, [r3, #8]
  11c4fc:	e3530000 	cmp	r3, #0
  11c500:	0a000018 	beq	11c568 <raw_sendto+0xf8>
      /* chain header q in front of given pbuf p */
      pbuf_chain(q, p);
  11c504:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  11c508:	e51b000c 	ldr	r0, [fp, #-12]
  11c50c:	ebfffb59 	bl	11b278 <pbuf_chain>
  11c510:	ea000014 	b	11c568 <raw_sendto+0xf8>
    }
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* first pbuf q equals given pbuf */
    q = p;
  11c514:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c518:	e50b300c 	str	r3, [fp, #-12]
    if (pbuf_header(q, -header_size)) {
  11c51c:	e15b30be 	ldrh	r3, [fp, #-14]
  11c520:	e2633000 	rsb	r3, r3, #0
  11c524:	e6ff3073 	uxth	r3, r3
  11c528:	e6bf3073 	sxth	r3, r3
  11c52c:	e1a01003 	mov	r1, r3
  11c530:	e51b000c 	ldr	r0, [fp, #-12]
  11c534:	ebfffa30 	bl	11adfc <pbuf_header>
  11c538:	e1a03000 	mov	r3, r0
  11c53c:	e3530000 	cmp	r3, #0
  11c540:	0a000008 	beq	11c568 <raw_sendto+0xf8>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
  11c544:	e3070b3c 	movw	r0, #31548	; 0x7b3c
  11c548:	e3400014 	movt	r0, #20
  11c54c:	ebff9af0 	bl	103114 <rt_kprintf>
  11c550:	e300113e 	movw	r1, #318	; 0x13e
  11c554:	e3070b10 	movw	r0, #31504	; 0x7b10
  11c558:	e3400014 	movt	r0, #20
  11c55c:	ebffbad4 	bl	10b0b4 <sys_arch_assert>
      return ERR_MEM;
  11c560:	e3e03000 	mvn	r3, #0
  11c564:	ea00004c 	b	11c69c <raw_sendto+0x22c>

  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(ipaddr)), ipaddr);
  } else {
    netif = ip_route(&pcb->local_ip, ipaddr);
  11c568:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11c56c:	eb0052f9 	bl	131158 <ip4_route>
  11c570:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  }

  if (netif == NULL) {
  11c574:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c578:	e3530000 	cmp	r3, #0
  11c57c:	1a000007 	bne	11c5a0 <raw_sendto+0x130>
    LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: No route to "));
    ip_addr_debug_print(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ipaddr);
    /* free any temporary header pbuf allocated by pbuf_header() */
    if (q != p) {
  11c580:	e51b200c 	ldr	r2, [fp, #-12]
  11c584:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c588:	e1520003 	cmp	r2, r3
  11c58c:	0a000001 	beq	11c598 <raw_sendto+0x128>
      pbuf_free(q);
  11c590:	e51b000c 	ldr	r0, [fp, #-12]
  11c594:	ebfffa36 	bl	11ae74 <pbuf_free>
    }
    return ERR_RTE;
  11c598:	e3e03003 	mvn	r3, #3
  11c59c:	ea00003e 	b	11c69c <raw_sendto+0x22c>

#if IP_SOF_BROADCAST
  if (IP_IS_V4(ipaddr))
  {
    /* broadcast filter? */
    if (!ip_get_option(pcb, SOF_BROADCAST) && ip_addr_isbroadcast(ipaddr, netif)) {
  11c5a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c5a4:	e5d33008 	ldrb	r3, [r3, #8]
  11c5a8:	e2033020 	and	r3, r3, #32
  11c5ac:	e3530000 	cmp	r3, #0
  11c5b0:	1a00000f 	bne	11c5f4 <raw_sendto+0x184>
  11c5b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c5b8:	e5933000 	ldr	r3, [r3]
  11c5bc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c5c0:	e1a00003 	mov	r0, r3
  11c5c4:	eb0057c2 	bl	1324d4 <ip4_addr_isbroadcast_u32>
  11c5c8:	e1a03000 	mov	r3, r0
  11c5cc:	e3530000 	cmp	r3, #0
  11c5d0:	0a000007 	beq	11c5f4 <raw_sendto+0x184>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
      /* free any temporary header pbuf allocated by pbuf_header() */
      if (q != p) {
  11c5d4:	e51b200c 	ldr	r2, [fp, #-12]
  11c5d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c5dc:	e1520003 	cmp	r2, r3
  11c5e0:	0a000001 	beq	11c5ec <raw_sendto+0x17c>
        pbuf_free(q);
  11c5e4:	e51b000c 	ldr	r0, [fp, #-12]
  11c5e8:	ebfffa21 	bl	11ae74 <pbuf_free>
      }
      return ERR_VAL;
  11c5ec:	e3e03005 	mvn	r3, #5
  11c5f0:	ea000029 	b	11c69c <raw_sendto+0x22c>
    }
  }
#endif /* IP_SOF_BROADCAST */

  if (ip_addr_isany(&pcb->local_ip)) {
  11c5f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c5f8:	e3530000 	cmp	r3, #0
  11c5fc:	0a000003 	beq	11c610 <raw_sendto+0x1a0>
  11c600:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c604:	e5933000 	ldr	r3, [r3]
  11c608:	e3530000 	cmp	r3, #0
  11c60c:	1a000008 	bne	11c634 <raw_sendto+0x1c4>
    /* use outgoing network interface IP address as source address */
    src_ip = ip_netif_get_local_ip(netif, ipaddr);
  11c610:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c614:	e3530000 	cmp	r3, #0
  11c618:	0a000002 	beq	11c628 <raw_sendto+0x1b8>
  11c61c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c620:	e2833004 	add	r3, r3, #4
  11c624:	ea000000 	b	11c62c <raw_sendto+0x1bc>
  11c628:	e3a03000 	mov	r3, #0
  11c62c:	e50b3008 	str	r3, [fp, #-8]
  11c630:	ea000001 	b	11c63c <raw_sendto+0x1cc>
      return ERR_RTE;
    }
#endif /* LWIP_IPV6 */
  } else {
    /* use RAW PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  11c634:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c638:	e50b3008 	str	r3, [fp, #-8]
    SMEMCPY(((u8_t *)p->payload) + pcb->chksum_offset, &chksum, sizeof(u16_t));
  }
#endif

  NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
  err = ip_output_if(q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
  11c63c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c640:	e5d3000a 	ldrb	r0, [r3, #10]
  11c644:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c648:	e5d33009 	ldrb	r3, [r3, #9]
  11c64c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11c650:	e5d22010 	ldrb	r2, [r2, #16]
  11c654:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c658:	e58d1008 	str	r1, [sp, #8]
  11c65c:	e58d2004 	str	r2, [sp, #4]
  11c660:	e58d3000 	str	r3, [sp]
  11c664:	e1a03000 	mov	r3, r0
  11c668:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11c66c:	e51b1008 	ldr	r1, [fp, #-8]
  11c670:	e51b000c 	ldr	r0, [fp, #-12]
  11c674:	eb005590 	bl	131cbc <ip4_output_if>
  11c678:	e1a03000 	mov	r3, r0
  11c67c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* did we chain a header earlier? */
  if (q != p) {
  11c680:	e51b200c 	ldr	r2, [fp, #-12]
  11c684:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c688:	e1520003 	cmp	r2, r3
  11c68c:	0a000001 	beq	11c698 <raw_sendto+0x228>
    /* free the header */
    pbuf_free(q);
  11c690:	e51b000c 	ldr	r0, [fp, #-12]
  11c694:	ebfff9f6 	bl	11ae74 <pbuf_free>
  }
  return err;
  11c698:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  11c69c:	e1a00003 	mov	r0, r3
  11c6a0:	e24bd004 	sub	sp, fp, #4
  11c6a4:	e8bd8800 	pop	{fp, pc}

0011c6a8 <raw_send>:
 * @param p the IP payload to send
 *
 */
err_t
raw_send(struct raw_pcb *pcb, struct pbuf *p)
{
  11c6a8:	e92d4800 	push	{fp, lr}
  11c6ac:	e28db004 	add	fp, sp, #4
  11c6b0:	e24dd008 	sub	sp, sp, #8
  11c6b4:	e50b0008 	str	r0, [fp, #-8]
  11c6b8:	e50b100c 	str	r1, [fp, #-12]
  return raw_sendto(pcb, p, &pcb->remote_ip);
  11c6bc:	e51b3008 	ldr	r3, [fp, #-8]
  11c6c0:	e2833004 	add	r3, r3, #4
  11c6c4:	e1a02003 	mov	r2, r3
  11c6c8:	e51b100c 	ldr	r1, [fp, #-12]
  11c6cc:	e51b0008 	ldr	r0, [fp, #-8]
  11c6d0:	ebffff66 	bl	11c470 <raw_sendto>
  11c6d4:	e1a03000 	mov	r3, r0
}
  11c6d8:	e1a00003 	mov	r0, r3
  11c6dc:	e24bd004 	sub	sp, fp, #4
  11c6e0:	e8bd8800 	pop	{fp, pc}

0011c6e4 <raw_remove>:
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
  11c6e4:	e92d4800 	push	{fp, lr}
  11c6e8:	e28db004 	add	fp, sp, #4
  11c6ec:	e24dd010 	sub	sp, sp, #16
  11c6f0:	e50b0010 	str	r0, [fp, #-16]
  struct raw_pcb *pcb2;
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
  11c6f4:	e30e323c 	movw	r3, #57916	; 0xe23c
  11c6f8:	e3403014 	movt	r3, #20
  11c6fc:	e5933000 	ldr	r3, [r3]
  11c700:	e51b2010 	ldr	r2, [fp, #-16]
  11c704:	e1520003 	cmp	r2, r3
  11c708:	1a000007 	bne	11c72c <raw_remove+0x48>
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
  11c70c:	e30e323c 	movw	r3, #57916	; 0xe23c
  11c710:	e3403014 	movt	r3, #20
  11c714:	e5933000 	ldr	r3, [r3]
  11c718:	e593200c 	ldr	r2, [r3, #12]
  11c71c:	e30e323c 	movw	r3, #57916	; 0xe23c
  11c720:	e3403014 	movt	r3, #20
  11c724:	e5832000 	str	r2, [r3]
  11c728:	ea000018 	b	11c790 <raw_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c72c:	e30e323c 	movw	r3, #57916	; 0xe23c
  11c730:	e3403014 	movt	r3, #20
  11c734:	e5933000 	ldr	r3, [r3]
  11c738:	e50b3008 	str	r3, [fp, #-8]
  11c73c:	ea000010 	b	11c784 <raw_remove+0xa0>
      /* find pcb in raw_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  11c740:	e51b3008 	ldr	r3, [fp, #-8]
  11c744:	e593300c 	ldr	r3, [r3, #12]
  11c748:	e3530000 	cmp	r3, #0
  11c74c:	0a000009 	beq	11c778 <raw_remove+0x94>
  11c750:	e51b3008 	ldr	r3, [fp, #-8]
  11c754:	e593300c 	ldr	r3, [r3, #12]
  11c758:	e51b2010 	ldr	r2, [fp, #-16]
  11c75c:	e1520003 	cmp	r2, r3
  11c760:	1a000004 	bne	11c778 <raw_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  11c764:	e51b3010 	ldr	r3, [fp, #-16]
  11c768:	e593200c 	ldr	r2, [r3, #12]
  11c76c:	e51b3008 	ldr	r3, [fp, #-8]
  11c770:	e583200c 	str	r2, [r3, #12]
        break;
  11c774:	ea000005 	b	11c790 <raw_remove+0xac>
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c778:	e51b3008 	ldr	r3, [fp, #-8]
  11c77c:	e593300c 	ldr	r3, [r3, #12]
  11c780:	e50b3008 	str	r3, [fp, #-8]
  11c784:	e51b3008 	ldr	r3, [fp, #-8]
  11c788:	e3530000 	cmp	r3, #0
  11c78c:	1affffeb 	bne	11c740 <raw_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_RAW_PCB, pcb);
  11c790:	e51b1010 	ldr	r1, [fp, #-16]
  11c794:	e3a00000 	mov	r0, #0
  11c798:	ebfff2a7 	bl	11923c <memp_free>
}
  11c79c:	e320f000 	nop	{0}
  11c7a0:	e24bd004 	sub	sp, fp, #4
  11c7a4:	e8bd8800 	pop	{fp, pc}

0011c7a8 <raw_new>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto)
{
  11c7a8:	e92d4800 	push	{fp, lr}
  11c7ac:	e28db004 	add	fp, sp, #4
  11c7b0:	e24dd010 	sub	sp, sp, #16
  11c7b4:	e1a03000 	mov	r3, r0
  11c7b8:	e54b300d 	strb	r3, [fp, #-13]
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_new\n"));

  pcb = (struct raw_pcb *)memp_malloc(MEMP_RAW_PCB);
  11c7bc:	e3a02f72 	mov	r2, #456	; 0x1c8
  11c7c0:	e3071b10 	movw	r1, #31504	; 0x7b10
  11c7c4:	e3401014 	movt	r1, #20
  11c7c8:	e3a00000 	mov	r0, #0
  11c7cc:	ebfff232 	bl	11909c <memp_malloc_fn>
  11c7d0:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
  11c7d4:	e51b3008 	ldr	r3, [fp, #-8]
  11c7d8:	e3530000 	cmp	r3, #0
  11c7dc:	0a000012 	beq	11c82c <raw_new+0x84>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
  11c7e0:	e3a0201c 	mov	r2, #28
  11c7e4:	e3a01000 	mov	r1, #0
  11c7e8:	e51b0008 	ldr	r0, [fp, #-8]
  11c7ec:	eb009292 	bl	14123c <memset>
    pcb->protocol = proto;
  11c7f0:	e51b3008 	ldr	r3, [fp, #-8]
  11c7f4:	e55b200d 	ldrb	r2, [fp, #-13]
  11c7f8:	e5c32010 	strb	r2, [r3, #16]
    pcb->ttl = RAW_TTL;
  11c7fc:	e51b3008 	ldr	r3, [fp, #-8]
  11c800:	e3e02000 	mvn	r2, #0
  11c804:	e5c3200a 	strb	r2, [r3, #10]
    pcb->next = raw_pcbs;
  11c808:	e30e323c 	movw	r3, #57916	; 0xe23c
  11c80c:	e3403014 	movt	r3, #20
  11c810:	e5932000 	ldr	r2, [r3]
  11c814:	e51b3008 	ldr	r3, [fp, #-8]
  11c818:	e583200c 	str	r2, [r3, #12]
    raw_pcbs = pcb;
  11c81c:	e30e323c 	movw	r3, #57916	; 0xe23c
  11c820:	e3403014 	movt	r3, #20
  11c824:	e51b2008 	ldr	r2, [fp, #-8]
  11c828:	e5832000 	str	r2, [r3]
  }
  return pcb;
  11c82c:	e51b3008 	ldr	r3, [fp, #-8]
}
  11c830:	e1a00003 	mov	r0, r3
  11c834:	e24bd004 	sub	sp, fp, #4
  11c838:	e8bd8800 	pop	{fp, pc}

0011c83c <raw_new_ip_type>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new_ip_type(u8_t type, u8_t proto)
{
  11c83c:	e92d4800 	push	{fp, lr}
  11c840:	e28db004 	add	fp, sp, #4
  11c844:	e24dd010 	sub	sp, sp, #16
  11c848:	e1a03000 	mov	r3, r0
  11c84c:	e1a02001 	mov	r2, r1
  11c850:	e54b300d 	strb	r3, [fp, #-13]
  11c854:	e1a03002 	mov	r3, r2
  11c858:	e54b300e 	strb	r3, [fp, #-14]
  struct raw_pcb *pcb;
  pcb = raw_new(proto);
  11c85c:	e55b300e 	ldrb	r3, [fp, #-14]
  11c860:	e1a00003 	mov	r0, r3
  11c864:	ebffffcf 	bl	11c7a8 <raw_new>
  11c868:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else /* LWIP_IPV4 && LWIP_IPV6 */
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11c86c:	e51b3008 	ldr	r3, [fp, #-8]
}
  11c870:	e1a00003 	mov	r0, r3
  11c874:	e24bd004 	sub	sp, fp, #4
  11c878:	e8bd8800 	pop	{fp, pc}

0011c87c <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  11c87c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c880:	e28db000 	add	fp, sp, #0
  11c884:	e24dd014 	sub	sp, sp, #20
  11c888:	e50b0010 	str	r0, [fp, #-16]
  11c88c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct raw_pcb* rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  11c890:	e51b3010 	ldr	r3, [fp, #-16]
  11c894:	e3530000 	cmp	r3, #0
  11c898:	0a00001f 	beq	11c91c <raw_netif_ip_addr_changed+0xa0>
  11c89c:	e51b3010 	ldr	r3, [fp, #-16]
  11c8a0:	e5933000 	ldr	r3, [r3]
  11c8a4:	e3530000 	cmp	r3, #0
  11c8a8:	0a00001b 	beq	11c91c <raw_netif_ip_addr_changed+0xa0>
  11c8ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c8b0:	e3530000 	cmp	r3, #0
  11c8b4:	0a000018 	beq	11c91c <raw_netif_ip_addr_changed+0xa0>
  11c8b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c8bc:	e5933000 	ldr	r3, [r3]
  11c8c0:	e3530000 	cmp	r3, #0
  11c8c4:	0a000014 	beq	11c91c <raw_netif_ip_addr_changed+0xa0>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11c8c8:	e30e323c 	movw	r3, #57916	; 0xe23c
  11c8cc:	e3403014 	movt	r3, #20
  11c8d0:	e5933000 	ldr	r3, [r3]
  11c8d4:	e50b3008 	str	r3, [fp, #-8]
  11c8d8:	ea00000c 	b	11c910 <raw_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
  11c8dc:	e51b3008 	ldr	r3, [fp, #-8]
  11c8e0:	e5932000 	ldr	r2, [r3]
  11c8e4:	e51b3010 	ldr	r3, [fp, #-16]
  11c8e8:	e5933000 	ldr	r3, [r3]
  11c8ec:	e1520003 	cmp	r2, r3
  11c8f0:	1a000003 	bne	11c904 <raw_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
  11c8f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c8f8:	e5932000 	ldr	r2, [r3]
  11c8fc:	e51b3008 	ldr	r3, [fp, #-8]
  11c900:	e5832000 	str	r2, [r3]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11c904:	e51b3008 	ldr	r3, [fp, #-8]
  11c908:	e593300c 	ldr	r3, [r3, #12]
  11c90c:	e50b3008 	str	r3, [fp, #-8]
  11c910:	e51b3008 	ldr	r3, [fp, #-8]
  11c914:	e3530000 	cmp	r3, #0
  11c918:	1affffef 	bne	11c8dc <raw_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  11c91c:	e320f000 	nop	{0}
  11c920:	e28bd000 	add	sp, fp, #0
  11c924:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c928:	e12fff1e 	bx	lr

0011c92c <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
  11c92c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c930:	e28db000 	add	fp, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
  11c934:	e320f000 	nop	{0}
  11c938:	e28bd000 	add	sp, fp, #0
  11c93c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c940:	e12fff1e 	bx	lr

0011c944 <stats_display_proto>:

#if LWIP_STATS_DISPLAY
void
stats_display_proto(struct stats_proto *proto, const char *name)
{
  11c944:	e92d4800 	push	{fp, lr}
  11c948:	e28db004 	add	fp, sp, #4
  11c94c:	e24dd008 	sub	sp, sp, #8
  11c950:	e50b0008 	str	r0, [fp, #-8]
  11c954:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11c958:	e51b100c 	ldr	r1, [fp, #-12]
  11c95c:	e3070b64 	movw	r0, #31588	; 0x7b64
  11c960:	e3400014 	movt	r0, #20
  11c964:	ebff99ea 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", proto->xmit));
  11c968:	e51b3008 	ldr	r3, [fp, #-8]
  11c96c:	e1d330b0 	ldrh	r3, [r3]
  11c970:	e1a01003 	mov	r1, r3
  11c974:	e3070b6c 	movw	r0, #31596	; 0x7b6c
  11c978:	e3400014 	movt	r0, #20
  11c97c:	ebff99e4 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", proto->recv));
  11c980:	e51b3008 	ldr	r3, [fp, #-8]
  11c984:	e1d330b2 	ldrh	r3, [r3, #2]
  11c988:	e1a01003 	mov	r1, r3
  11c98c:	e3070b78 	movw	r0, #31608	; 0x7b78
  11c990:	e3400014 	movt	r0, #20
  11c994:	ebff99de 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("fw: %"STAT_COUNTER_F"\n\t", proto->fw));
  11c998:	e51b3008 	ldr	r3, [fp, #-8]
  11c99c:	e1d330b4 	ldrh	r3, [r3, #4]
  11c9a0:	e1a01003 	mov	r1, r3
  11c9a4:	e3070b84 	movw	r0, #31620	; 0x7b84
  11c9a8:	e3400014 	movt	r0, #20
  11c9ac:	ebff99d8 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", proto->drop));
  11c9b0:	e51b3008 	ldr	r3, [fp, #-8]
  11c9b4:	e1d330b6 	ldrh	r3, [r3, #6]
  11c9b8:	e1a01003 	mov	r1, r3
  11c9bc:	e3070b90 	movw	r0, #31632	; 0x7b90
  11c9c0:	e3400014 	movt	r0, #20
  11c9c4:	ebff99d2 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", proto->chkerr));
  11c9c8:	e51b3008 	ldr	r3, [fp, #-8]
  11c9cc:	e1d330b8 	ldrh	r3, [r3, #8]
  11c9d0:	e1a01003 	mov	r1, r3
  11c9d4:	e3070b9c 	movw	r0, #31644	; 0x7b9c
  11c9d8:	e3400014 	movt	r0, #20
  11c9dc:	ebff99cc 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", proto->lenerr));
  11c9e0:	e51b3008 	ldr	r3, [fp, #-8]
  11c9e4:	e1d330ba 	ldrh	r3, [r3, #10]
  11c9e8:	e1a01003 	mov	r1, r3
  11c9ec:	e3070bac 	movw	r0, #31660	; 0x7bac
  11c9f0:	e3400014 	movt	r0, #20
  11c9f4:	ebff99c6 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", proto->memerr));
  11c9f8:	e51b3008 	ldr	r3, [fp, #-8]
  11c9fc:	e1d330bc 	ldrh	r3, [r3, #12]
  11ca00:	e1a01003 	mov	r1, r3
  11ca04:	e3070bbc 	movw	r0, #31676	; 0x7bbc
  11ca08:	e3400014 	movt	r0, #20
  11ca0c:	ebff99c0 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rterr: %"STAT_COUNTER_F"\n\t", proto->rterr));
  11ca10:	e51b3008 	ldr	r3, [fp, #-8]
  11ca14:	e1d330be 	ldrh	r3, [r3, #14]
  11ca18:	e1a01003 	mov	r1, r3
  11ca1c:	e3070bcc 	movw	r0, #31692	; 0x7bcc
  11ca20:	e3400014 	movt	r0, #20
  11ca24:	ebff99ba 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", proto->proterr));
  11ca28:	e51b3008 	ldr	r3, [fp, #-8]
  11ca2c:	e1d331b0 	ldrh	r3, [r3, #16]
  11ca30:	e1a01003 	mov	r1, r3
  11ca34:	e3070bdc 	movw	r0, #31708	; 0x7bdc
  11ca38:	e3400014 	movt	r0, #20
  11ca3c:	ebff99b4 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("opterr: %"STAT_COUNTER_F"\n\t", proto->opterr));
  11ca40:	e51b3008 	ldr	r3, [fp, #-8]
  11ca44:	e1d331b2 	ldrh	r3, [r3, #18]
  11ca48:	e1a01003 	mov	r1, r3
  11ca4c:	e3070bec 	movw	r0, #31724	; 0x7bec
  11ca50:	e3400014 	movt	r0, #20
  11ca54:	ebff99ae 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n\t", proto->err));
  11ca58:	e51b3008 	ldr	r3, [fp, #-8]
  11ca5c:	e1d331b4 	ldrh	r3, [r3, #20]
  11ca60:	e1a01003 	mov	r1, r3
  11ca64:	e3070bfc 	movw	r0, #31740	; 0x7bfc
  11ca68:	e3400014 	movt	r0, #20
  11ca6c:	ebff99a8 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("cachehit: %"STAT_COUNTER_F"\n", proto->cachehit));
  11ca70:	e51b3008 	ldr	r3, [fp, #-8]
  11ca74:	e1d331b6 	ldrh	r3, [r3, #22]
  11ca78:	e1a01003 	mov	r1, r3
  11ca7c:	e3070c08 	movw	r0, #31752	; 0x7c08
  11ca80:	e3400014 	movt	r0, #20
  11ca84:	ebff99a2 	bl	103114 <rt_kprintf>
}
  11ca88:	e320f000 	nop	{0}
  11ca8c:	e24bd004 	sub	sp, fp, #4
  11ca90:	e8bd8800 	pop	{fp, pc}

0011ca94 <stats_display_igmp>:

#if IGMP_STATS || MLD6_STATS
void
stats_display_igmp(struct stats_igmp *igmp, const char *name)
{
  11ca94:	e92d4800 	push	{fp, lr}
  11ca98:	e28db004 	add	fp, sp, #4
  11ca9c:	e24dd008 	sub	sp, sp, #8
  11caa0:	e50b0008 	str	r0, [fp, #-8]
  11caa4:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11caa8:	e51b100c 	ldr	r1, [fp, #-12]
  11caac:	e3070b64 	movw	r0, #31588	; 0x7b64
  11cab0:	e3400014 	movt	r0, #20
  11cab4:	ebff9996 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", igmp->xmit));
  11cab8:	e51b3008 	ldr	r3, [fp, #-8]
  11cabc:	e1d330b0 	ldrh	r3, [r3]
  11cac0:	e1a01003 	mov	r1, r3
  11cac4:	e3070b6c 	movw	r0, #31596	; 0x7b6c
  11cac8:	e3400014 	movt	r0, #20
  11cacc:	ebff9990 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", igmp->recv));
  11cad0:	e51b3008 	ldr	r3, [fp, #-8]
  11cad4:	e1d330b2 	ldrh	r3, [r3, #2]
  11cad8:	e1a01003 	mov	r1, r3
  11cadc:	e3070b78 	movw	r0, #31608	; 0x7b78
  11cae0:	e3400014 	movt	r0, #20
  11cae4:	ebff998a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", igmp->drop));
  11cae8:	e51b3008 	ldr	r3, [fp, #-8]
  11caec:	e1d330b4 	ldrh	r3, [r3, #4]
  11caf0:	e1a01003 	mov	r1, r3
  11caf4:	e3070b90 	movw	r0, #31632	; 0x7b90
  11caf8:	e3400014 	movt	r0, #20
  11cafc:	ebff9984 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", igmp->chkerr));
  11cb00:	e51b3008 	ldr	r3, [fp, #-8]
  11cb04:	e1d330b6 	ldrh	r3, [r3, #6]
  11cb08:	e1a01003 	mov	r1, r3
  11cb0c:	e3070b9c 	movw	r0, #31644	; 0x7b9c
  11cb10:	e3400014 	movt	r0, #20
  11cb14:	ebff997e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", igmp->lenerr));
  11cb18:	e51b3008 	ldr	r3, [fp, #-8]
  11cb1c:	e1d330b8 	ldrh	r3, [r3, #8]
  11cb20:	e1a01003 	mov	r1, r3
  11cb24:	e3070bac 	movw	r0, #31660	; 0x7bac
  11cb28:	e3400014 	movt	r0, #20
  11cb2c:	ebff9978 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", igmp->memerr));
  11cb30:	e51b3008 	ldr	r3, [fp, #-8]
  11cb34:	e1d330ba 	ldrh	r3, [r3, #10]
  11cb38:	e1a01003 	mov	r1, r3
  11cb3c:	e3070bbc 	movw	r0, #31676	; 0x7bbc
  11cb40:	e3400014 	movt	r0, #20
  11cb44:	ebff9972 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", igmp->proterr));
  11cb48:	e51b3008 	ldr	r3, [fp, #-8]
  11cb4c:	e1d330bc 	ldrh	r3, [r3, #12]
  11cb50:	e1a01003 	mov	r1, r3
  11cb54:	e3070bdc 	movw	r0, #31708	; 0x7bdc
  11cb58:	e3400014 	movt	r0, #20
  11cb5c:	ebff996c 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_v1: %"STAT_COUNTER_F"\n\t", igmp->rx_v1));
  11cb60:	e51b3008 	ldr	r3, [fp, #-8]
  11cb64:	e1d330be 	ldrh	r3, [r3, #14]
  11cb68:	e1a01003 	mov	r1, r3
  11cb6c:	e3070c18 	movw	r0, #31768	; 0x7c18
  11cb70:	e3400014 	movt	r0, #20
  11cb74:	ebff9966 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_group: %"STAT_COUNTER_F"\n\t", igmp->rx_group));
  11cb78:	e51b3008 	ldr	r3, [fp, #-8]
  11cb7c:	e1d331b0 	ldrh	r3, [r3, #16]
  11cb80:	e1a01003 	mov	r1, r3
  11cb84:	e3070c28 	movw	r0, #31784	; 0x7c28
  11cb88:	e3400014 	movt	r0, #20
  11cb8c:	ebff9960 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_general: %"STAT_COUNTER_F"\n\t", igmp->rx_general));
  11cb90:	e51b3008 	ldr	r3, [fp, #-8]
  11cb94:	e1d331b2 	ldrh	r3, [r3, #18]
  11cb98:	e1a01003 	mov	r1, r3
  11cb9c:	e3070c38 	movw	r0, #31800	; 0x7c38
  11cba0:	e3400014 	movt	r0, #20
  11cba4:	ebff995a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_report: %"STAT_COUNTER_F"\n\t", igmp->rx_report));
  11cba8:	e51b3008 	ldr	r3, [fp, #-8]
  11cbac:	e1d331b4 	ldrh	r3, [r3, #20]
  11cbb0:	e1a01003 	mov	r1, r3
  11cbb4:	e3070c4c 	movw	r0, #31820	; 0x7c4c
  11cbb8:	e3400014 	movt	r0, #20
  11cbbc:	ebff9954 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_join: %"STAT_COUNTER_F"\n\t", igmp->tx_join));
  11cbc0:	e51b3008 	ldr	r3, [fp, #-8]
  11cbc4:	e1d331b6 	ldrh	r3, [r3, #22]
  11cbc8:	e1a01003 	mov	r1, r3
  11cbcc:	e3070c60 	movw	r0, #31840	; 0x7c60
  11cbd0:	e3400014 	movt	r0, #20
  11cbd4:	ebff994e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_leave: %"STAT_COUNTER_F"\n\t", igmp->tx_leave));
  11cbd8:	e51b3008 	ldr	r3, [fp, #-8]
  11cbdc:	e1d331b8 	ldrh	r3, [r3, #24]
  11cbe0:	e1a01003 	mov	r1, r3
  11cbe4:	e3070c70 	movw	r0, #31856	; 0x7c70
  11cbe8:	e3400014 	movt	r0, #20
  11cbec:	ebff9948 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_report: %"STAT_COUNTER_F"\n", igmp->tx_report));
  11cbf0:	e51b3008 	ldr	r3, [fp, #-8]
  11cbf4:	e1d331ba 	ldrh	r3, [r3, #26]
  11cbf8:	e1a01003 	mov	r1, r3
  11cbfc:	e3070c80 	movw	r0, #31872	; 0x7c80
  11cc00:	e3400014 	movt	r0, #20
  11cc04:	ebff9942 	bl	103114 <rt_kprintf>
}
  11cc08:	e320f000 	nop	{0}
  11cc0c:	e24bd004 	sub	sp, fp, #4
  11cc10:	e8bd8800 	pop	{fp, pc}

0011cc14 <stats_display_mem>:
#endif /* IGMP_STATS || MLD6_STATS */

#if MEM_STATS || MEMP_STATS
void
stats_display_mem(struct stats_mem *mem, const char *name)
{
  11cc14:	e92d4800 	push	{fp, lr}
  11cc18:	e28db004 	add	fp, sp, #4
  11cc1c:	e24dd008 	sub	sp, sp, #8
  11cc20:	e50b0008 	str	r0, [fp, #-8]
  11cc24:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\nMEM %s\n\t", name));
  11cc28:	e51b100c 	ldr	r1, [fp, #-12]
  11cc2c:	e3070c90 	movw	r0, #31888	; 0x7c90
  11cc30:	e3400014 	movt	r0, #20
  11cc34:	ebff9936 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("avail: %"U32_F"\n\t", (u32_t)mem->avail));
  11cc38:	e51b3008 	ldr	r3, [fp, #-8]
  11cc3c:	e1d330b6 	ldrh	r3, [r3, #6]
  11cc40:	e1a01003 	mov	r1, r3
  11cc44:	e3070c9c 	movw	r0, #31900	; 0x7c9c
  11cc48:	e3400014 	movt	r0, #20
  11cc4c:	ebff9930 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("used: %"U32_F"\n\t", (u32_t)mem->used));
  11cc50:	e51b3008 	ldr	r3, [fp, #-8]
  11cc54:	e1d330b8 	ldrh	r3, [r3, #8]
  11cc58:	e1a01003 	mov	r1, r3
  11cc5c:	e3070cac 	movw	r0, #31916	; 0x7cac
  11cc60:	e3400014 	movt	r0, #20
  11cc64:	ebff992a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("max: %"U32_F"\n\t", (u32_t)mem->max));
  11cc68:	e51b3008 	ldr	r3, [fp, #-8]
  11cc6c:	e1d330ba 	ldrh	r3, [r3, #10]
  11cc70:	e1a01003 	mov	r1, r3
  11cc74:	e3070cb8 	movw	r0, #31928	; 0x7cb8
  11cc78:	e3400014 	movt	r0, #20
  11cc7c:	ebff9924 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"U32_F"\n", (u32_t)mem->err));
  11cc80:	e51b3008 	ldr	r3, [fp, #-8]
  11cc84:	e1d330b4 	ldrh	r3, [r3, #4]
  11cc88:	e1a01003 	mov	r1, r3
  11cc8c:	e3070cc4 	movw	r0, #31940	; 0x7cc4
  11cc90:	e3400014 	movt	r0, #20
  11cc94:	ebff991e 	bl	103114 <rt_kprintf>
}
  11cc98:	e320f000 	nop	{0}
  11cc9c:	e24bd004 	sub	sp, fp, #4
  11cca0:	e8bd8800 	pop	{fp, pc}

0011cca4 <stats_display_memp>:

#if MEMP_STATS
void
stats_display_memp(struct stats_mem *mem, int index)
{
  11cca4:	e92d4800 	push	{fp, lr}
  11cca8:	e28db004 	add	fp, sp, #4
  11ccac:	e24dd008 	sub	sp, sp, #8
  11ccb0:	e50b0008 	str	r0, [fp, #-8]
  11ccb4:	e50b100c 	str	r1, [fp, #-12]
  if (index < MEMP_MAX) {
  11ccb8:	e51b300c 	ldr	r3, [fp, #-12]
  11ccbc:	e3530010 	cmp	r3, #16
  11ccc0:	ca000004 	bgt	11ccd8 <stats_display_memp+0x34>
    stats_display_mem(mem, mem->name);
  11ccc4:	e51b3008 	ldr	r3, [fp, #-8]
  11ccc8:	e5933000 	ldr	r3, [r3]
  11cccc:	e1a01003 	mov	r1, r3
  11ccd0:	e51b0008 	ldr	r0, [fp, #-8]
  11ccd4:	ebffffce 	bl	11cc14 <stats_display_mem>
  }
}
  11ccd8:	e320f000 	nop	{0}
  11ccdc:	e24bd004 	sub	sp, fp, #4
  11cce0:	e8bd8800 	pop	{fp, pc}

0011cce4 <stats_display_sys>:
#endif /* MEM_STATS || MEMP_STATS */

#if SYS_STATS
void
stats_display_sys(struct stats_sys *sys)
{
  11cce4:	e92d4800 	push	{fp, lr}
  11cce8:	e28db004 	add	fp, sp, #4
  11ccec:	e24dd008 	sub	sp, sp, #8
  11ccf0:	e50b0008 	str	r0, [fp, #-8]
  LWIP_PLATFORM_DIAG(("\nSYS\n\t"));
  11ccf4:	e3070cd0 	movw	r0, #31952	; 0x7cd0
  11ccf8:	e3400014 	movt	r0, #20
  11ccfc:	ebff9904 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.used:  %"U32_F"\n\t", (u32_t)sys->sem.used));
  11cd00:	e51b3008 	ldr	r3, [fp, #-8]
  11cd04:	e1d330b0 	ldrh	r3, [r3]
  11cd08:	e1a01003 	mov	r1, r3
  11cd0c:	e3070cd8 	movw	r0, #31960	; 0x7cd8
  11cd10:	e3400014 	movt	r0, #20
  11cd14:	ebff98fe 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.max:   %"U32_F"\n\t", (u32_t)sys->sem.max));
  11cd18:	e51b3008 	ldr	r3, [fp, #-8]
  11cd1c:	e1d330b2 	ldrh	r3, [r3, #2]
  11cd20:	e1a01003 	mov	r1, r3
  11cd24:	e3070cec 	movw	r0, #31980	; 0x7cec
  11cd28:	e3400014 	movt	r0, #20
  11cd2c:	ebff98f8 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.err:   %"U32_F"\n\t", (u32_t)sys->sem.err));
  11cd30:	e51b3008 	ldr	r3, [fp, #-8]
  11cd34:	e1d330b4 	ldrh	r3, [r3, #4]
  11cd38:	e1a01003 	mov	r1, r3
  11cd3c:	e3070d00 	movw	r0, #32000	; 0x7d00
  11cd40:	e3400014 	movt	r0, #20
  11cd44:	ebff98f2 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.used: %"U32_F"\n\t", (u32_t)sys->mutex.used));
  11cd48:	e51b3008 	ldr	r3, [fp, #-8]
  11cd4c:	e1d330b6 	ldrh	r3, [r3, #6]
  11cd50:	e1a01003 	mov	r1, r3
  11cd54:	e3070d14 	movw	r0, #32020	; 0x7d14
  11cd58:	e3400014 	movt	r0, #20
  11cd5c:	ebff98ec 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.max:  %"U32_F"\n\t", (u32_t)sys->mutex.max));
  11cd60:	e51b3008 	ldr	r3, [fp, #-8]
  11cd64:	e1d330b8 	ldrh	r3, [r3, #8]
  11cd68:	e1a01003 	mov	r1, r3
  11cd6c:	e3070d28 	movw	r0, #32040	; 0x7d28
  11cd70:	e3400014 	movt	r0, #20
  11cd74:	ebff98e6 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.err:  %"U32_F"\n\t", (u32_t)sys->mutex.err));
  11cd78:	e51b3008 	ldr	r3, [fp, #-8]
  11cd7c:	e1d330ba 	ldrh	r3, [r3, #10]
  11cd80:	e1a01003 	mov	r1, r3
  11cd84:	e3070d3c 	movw	r0, #32060	; 0x7d3c
  11cd88:	e3400014 	movt	r0, #20
  11cd8c:	ebff98e0 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.used:  %"U32_F"\n\t", (u32_t)sys->mbox.used));
  11cd90:	e51b3008 	ldr	r3, [fp, #-8]
  11cd94:	e1d330bc 	ldrh	r3, [r3, #12]
  11cd98:	e1a01003 	mov	r1, r3
  11cd9c:	e3070d50 	movw	r0, #32080	; 0x7d50
  11cda0:	e3400014 	movt	r0, #20
  11cda4:	ebff98da 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.max:   %"U32_F"\n\t", (u32_t)sys->mbox.max));
  11cda8:	e51b3008 	ldr	r3, [fp, #-8]
  11cdac:	e1d330be 	ldrh	r3, [r3, #14]
  11cdb0:	e1a01003 	mov	r1, r3
  11cdb4:	e3070d64 	movw	r0, #32100	; 0x7d64
  11cdb8:	e3400014 	movt	r0, #20
  11cdbc:	ebff98d4 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.err:   %"U32_F"\n", (u32_t)sys->mbox.err));
  11cdc0:	e51b3008 	ldr	r3, [fp, #-8]
  11cdc4:	e1d331b0 	ldrh	r3, [r3, #16]
  11cdc8:	e1a01003 	mov	r1, r3
  11cdcc:	e3070d78 	movw	r0, #32120	; 0x7d78
  11cdd0:	e3400014 	movt	r0, #20
  11cdd4:	ebff98ce 	bl	103114 <rt_kprintf>
}
  11cdd8:	e320f000 	nop	{0}
  11cddc:	e24bd004 	sub	sp, fp, #4
  11cde0:	e8bd8800 	pop	{fp, pc}

0011cde4 <stats_display>:
#endif /* SYS_STATS */

void
stats_display(void)
{
  11cde4:	e92d4800 	push	{fp, lr}
  11cde8:	e28db004 	add	fp, sp, #4
  11cdec:	e24dd008 	sub	sp, sp, #8
  s16_t i;

  LINK_STATS_DISPLAY();
  11cdf0:	e3071d8c 	movw	r1, #32140	; 0x7d8c
  11cdf4:	e3401014 	movt	r1, #20
  11cdf8:	e30c0a48 	movw	r0, #51784	; 0xca48
  11cdfc:	e3400015 	movt	r0, #21
  11ce00:	ebfffecf 	bl	11c944 <stats_display_proto>
  ETHARP_STATS_DISPLAY();
  11ce04:	e3071d94 	movw	r1, #32148	; 0x7d94
  11ce08:	e3401014 	movt	r1, #20
  11ce0c:	e59f00dc 	ldr	r0, [pc, #220]	; 11cef0 <stats_display+0x10c>
  11ce10:	ebfffecb 	bl	11c944 <stats_display_proto>
  IPFRAG_STATS_DISPLAY();
  11ce14:	e3071d9c 	movw	r1, #32156	; 0x7d9c
  11ce18:	e3401014 	movt	r1, #20
  11ce1c:	e59f00d0 	ldr	r0, [pc, #208]	; 11cef4 <stats_display+0x110>
  11ce20:	ebfffec7 	bl	11c944 <stats_display_proto>
  IP6_FRAG_STATS_DISPLAY();
  IP_STATS_DISPLAY();
  11ce24:	e3071da4 	movw	r1, #32164	; 0x7da4
  11ce28:	e3401014 	movt	r1, #20
  11ce2c:	e59f00c4 	ldr	r0, [pc, #196]	; 11cef8 <stats_display+0x114>
  11ce30:	ebfffec3 	bl	11c944 <stats_display_proto>
  ND6_STATS_DISPLAY();
  IP6_STATS_DISPLAY();
  IGMP_STATS_DISPLAY();
  11ce34:	e3071da8 	movw	r1, #32168	; 0x7da8
  11ce38:	e3401014 	movt	r1, #20
  11ce3c:	e59f00b8 	ldr	r0, [pc, #184]	; 11cefc <stats_display+0x118>
  11ce40:	ebffff13 	bl	11ca94 <stats_display_igmp>
  MLD6_STATS_DISPLAY();
  ICMP_STATS_DISPLAY();
  11ce44:	e3071db0 	movw	r1, #32176	; 0x7db0
  11ce48:	e3401014 	movt	r1, #20
  11ce4c:	e59f00ac 	ldr	r0, [pc, #172]	; 11cf00 <stats_display+0x11c>
  11ce50:	ebfffebb 	bl	11c944 <stats_display_proto>
  ICMP6_STATS_DISPLAY();
  UDP_STATS_DISPLAY();
  11ce54:	e3071db8 	movw	r1, #32184	; 0x7db8
  11ce58:	e3401014 	movt	r1, #20
  11ce5c:	e59f00a0 	ldr	r0, [pc, #160]	; 11cf04 <stats_display+0x120>
  11ce60:	ebfffeb7 	bl	11c944 <stats_display_proto>
  TCP_STATS_DISPLAY();
  11ce64:	e3071dbc 	movw	r1, #32188	; 0x7dbc
  11ce68:	e3401014 	movt	r1, #20
  11ce6c:	e59f0094 	ldr	r0, [pc, #148]	; 11cf08 <stats_display+0x124>
  11ce70:	ebfffeb3 	bl	11c944 <stats_display_proto>
  MEM_STATS_DISPLAY();
  11ce74:	e3071dc0 	movw	r1, #32192	; 0x7dc0
  11ce78:	e3401014 	movt	r1, #20
  11ce7c:	e59f0088 	ldr	r0, [pc, #136]	; 11cf0c <stats_display+0x128>
  11ce80:	ebffff63 	bl	11cc14 <stats_display_mem>
  for (i = 0; i < MEMP_MAX; i++) {
  11ce84:	e3a03000 	mov	r3, #0
  11ce88:	e14b30b6 	strh	r3, [fp, #-6]
  11ce8c:	ea00000f 	b	11ced0 <stats_display+0xec>
    MEMP_STATS_DISPLAY(i);
  11ce90:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11ce94:	e30c2a48 	movw	r2, #51784	; 0xca48
  11ce98:	e3402015 	movt	r2, #21
  11ce9c:	e2833034 	add	r3, r3, #52	; 0x34
  11cea0:	e1a03103 	lsl	r3, r3, #2
  11cea4:	e0823003 	add	r3, r2, r3
  11cea8:	e5933004 	ldr	r3, [r3, #4]
  11ceac:	e15b20f6 	ldrsh	r2, [fp, #-6]
  11ceb0:	e1a01002 	mov	r1, r2
  11ceb4:	e1a00003 	mov	r0, r3
  11ceb8:	ebffff79 	bl	11cca4 <stats_display_memp>
  for (i = 0; i < MEMP_MAX; i++) {
  11cebc:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cec0:	e6ff3073 	uxth	r3, r3
  11cec4:	e2833001 	add	r3, r3, #1
  11cec8:	e6ff3073 	uxth	r3, r3
  11cecc:	e14b30b6 	strh	r3, [fp, #-6]
  11ced0:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11ced4:	e3530010 	cmp	r3, #16
  11ced8:	daffffec 	ble	11ce90 <stats_display+0xac>
  }
  SYS_STATS_DISPLAY();
  11cedc:	e59f002c 	ldr	r0, [pc, #44]	; 11cf10 <stats_display+0x12c>
  11cee0:	ebffff7f 	bl	11cce4 <stats_display_sys>
}
  11cee4:	e320f000 	nop	{0}
  11cee8:	e24bd004 	sub	sp, fp, #4
  11ceec:	e8bd8800 	pop	{fp, pc}
  11cef0:	0015ca60 	.word	0x0015ca60
  11cef4:	0015ca78 	.word	0x0015ca78
  11cef8:	0015ca90 	.word	0x0015ca90
  11cefc:	0015cac0 	.word	0x0015cac0
  11cf00:	0015caa8 	.word	0x0015caa8
  11cf04:	0015cadc 	.word	0x0015cadc
  11cf08:	0015caf4 	.word	0x0015caf4
  11cf0c:	0015cb0c 	.word	0x0015cb0c
  11cf10:	0015cb60 	.word	0x0015cb60

0011cf14 <sys_msleep>:
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
  11cf14:	e92d4800 	push	{fp, lr}
  11cf18:	e28db004 	add	fp, sp, #4
  11cf1c:	e24dd010 	sub	sp, sp, #16
  11cf20:	e50b0010 	str	r0, [fp, #-16]
  if (ms > 0) {
  11cf24:	e51b3010 	ldr	r3, [fp, #-16]
  11cf28:	e3530000 	cmp	r3, #0
  11cf2c:	0a00000f 	beq	11cf70 <sys_msleep+0x5c>
    sys_sem_t delaysem;
    err_t err = sys_sem_new(&delaysem, 0);
  11cf30:	e24b300c 	sub	r3, fp, #12
  11cf34:	e3a01000 	mov	r1, #0
  11cf38:	e1a00003 	mov	r0, r3
  11cf3c:	ebffb62f 	bl	10a800 <sys_sem_new>
  11cf40:	e1a03000 	mov	r3, r0
  11cf44:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11cf48:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11cf4c:	e3530000 	cmp	r3, #0
  11cf50:	1a000006 	bne	11cf70 <sys_msleep+0x5c>
      sys_arch_sem_wait(&delaysem, ms);
  11cf54:	e24b300c 	sub	r3, fp, #12
  11cf58:	e51b1010 	ldr	r1, [fp, #-16]
  11cf5c:	e1a00003 	mov	r0, r3
  11cf60:	ebffb667 	bl	10a904 <sys_arch_sem_wait>
      sys_sem_free(&delaysem);
  11cf64:	e24b300c 	sub	r3, fp, #12
  11cf68:	e1a00003 	mov	r0, r3
  11cf6c:	ebffb64e 	bl	10a8ac <sys_sem_free>
    }
  }
}
  11cf70:	e320f000 	nop	{0}
  11cf74:	e24bd004 	sub	sp, fp, #4
  11cf78:	e8bd8800 	pop	{fp, pc}

0011cf7c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
  11cf7c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11cf80:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  11cf84:	e320f000 	nop	{0}
  11cf88:	e28bd000 	add	sp, fp, #0
  11cf8c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11cf90:	e12fff1e 	bx	lr

0011cf94 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
  11cf94:	e92d4800 	push	{fp, lr}
  11cf98:	e28db004 	add	fp, sp, #4
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
  11cf9c:	eb00084a 	bl	11f0cc <tcp_fasttmr>

  if (++tcp_timer & 1) {
  11cfa0:	e30e3240 	movw	r3, #57920	; 0xe240
  11cfa4:	e3403014 	movt	r3, #20
  11cfa8:	e5d33000 	ldrb	r3, [r3]
  11cfac:	e2833001 	add	r3, r3, #1
  11cfb0:	e6ef2073 	uxtb	r2, r3
  11cfb4:	e30e3240 	movw	r3, #57920	; 0xe240
  11cfb8:	e3403014 	movt	r3, #20
  11cfbc:	e5c32000 	strb	r2, [r3]
  11cfc0:	e30e3240 	movw	r3, #57920	; 0xe240
  11cfc4:	e3403014 	movt	r3, #20
  11cfc8:	e5d33000 	ldrb	r3, [r3]
  11cfcc:	e2033001 	and	r3, r3, #1
  11cfd0:	e3530000 	cmp	r3, #0
  11cfd4:	0a000000 	beq	11cfdc <tcp_tmr+0x48>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  11cfd8:	eb0005cb 	bl	11e70c <tcp_slowtmr>
  }
}
  11cfdc:	e320f000 	nop	{0}
  11cfe0:	e8bd8800 	pop	{fp, pc}

0011cfe4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
  11cfe4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11cfe8:	e28db000 	add	fp, sp, #0
  11cfec:	e24dd014 	sub	sp, sp, #20
  11cff0:	e50b0010 	str	r0, [fp, #-16]
  11cff4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11cff8:	e51b3010 	ldr	r3, [fp, #-16]
  11cffc:	e50b3008 	str	r3, [fp, #-8]
  11d000:	ea00000a 	b	11d030 <tcp_remove_listener+0x4c>
      if (pcb->listener == lpcb) {
  11d004:	e51b3008 	ldr	r3, [fp, #-8]
  11d008:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  11d00c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11d010:	e1520003 	cmp	r2, r3
  11d014:	1a000002 	bne	11d024 <tcp_remove_listener+0x40>
         pcb->listener = NULL;
  11d018:	e51b3008 	ldr	r3, [fp, #-8]
  11d01c:	e3a02000 	mov	r2, #0
  11d020:	e583207c 	str	r2, [r3, #124]	; 0x7c
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11d024:	e51b3008 	ldr	r3, [fp, #-8]
  11d028:	e593300c 	ldr	r3, [r3, #12]
  11d02c:	e50b3008 	str	r3, [fp, #-8]
  11d030:	e51b3008 	ldr	r3, [fp, #-8]
  11d034:	e3530000 	cmp	r3, #0
  11d038:	1afffff1 	bne	11d004 <tcp_remove_listener+0x20>
      }
   }
}
  11d03c:	e320f000 	nop	{0}
  11d040:	e28bd000 	add	sp, fp, #0
  11d044:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11d048:	e12fff1e 	bx	lr

0011d04c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
  11d04c:	e92d4800 	push	{fp, lr}
  11d050:	e28db004 	add	fp, sp, #4
  11d054:	e24dd010 	sub	sp, sp, #16
  11d058:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11d05c:	e51b3010 	ldr	r3, [fp, #-16]
  11d060:	e3530000 	cmp	r3, #0
  11d064:	1a000006 	bne	11d084 <tcp_listen_closed+0x38>
  11d068:	e3070e94 	movw	r0, #32404	; 0x7e94
  11d06c:	e3400014 	movt	r0, #20
  11d070:	ebff9827 	bl	103114 <rt_kprintf>
  11d074:	e3a010c0 	mov	r1, #192	; 0xc0
  11d078:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11d07c:	e3400014 	movt	r0, #20
  11d080:	ebffb80b 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
  11d084:	e51b3010 	ldr	r3, [fp, #-16]
  11d088:	e5933014 	ldr	r3, [r3, #20]
  11d08c:	e3530001 	cmp	r3, #1
  11d090:	0a000006 	beq	11d0b0 <tcp_listen_closed+0x64>
  11d094:	e3070ecc 	movw	r0, #32460	; 0x7ecc
  11d098:	e3400014 	movt	r0, #20
  11d09c:	ebff981c 	bl	103114 <rt_kprintf>
  11d0a0:	e3a010c1 	mov	r1, #193	; 0xc1
  11d0a4:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11d0a8:	e3400014 	movt	r0, #20
  11d0ac:	ebffb800 	bl	10b0b4 <sys_arch_assert>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11d0b0:	e3a03001 	mov	r3, #1
  11d0b4:	e50b3008 	str	r3, [fp, #-8]
  11d0b8:	ea00000a 	b	11d0e8 <tcp_listen_closed+0x9c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
  11d0bc:	e3073e84 	movw	r3, #32388	; 0x7e84
  11d0c0:	e3403014 	movt	r3, #20
  11d0c4:	e51b2008 	ldr	r2, [fp, #-8]
  11d0c8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11d0cc:	e5933000 	ldr	r3, [r3]
  11d0d0:	e51b1010 	ldr	r1, [fp, #-16]
  11d0d4:	e1a00003 	mov	r0, r3
  11d0d8:	ebffffc1 	bl	11cfe4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11d0dc:	e51b3008 	ldr	r3, [fp, #-8]
  11d0e0:	e2833001 	add	r3, r3, #1
  11d0e4:	e50b3008 	str	r3, [fp, #-8]
  11d0e8:	e51b3008 	ldr	r3, [fp, #-8]
  11d0ec:	e3530003 	cmp	r3, #3
  11d0f0:	9afffff1 	bls	11d0bc <tcp_listen_closed+0x70>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
  11d0f4:	e320f000 	nop	{0}
  11d0f8:	e24bd004 	sub	sp, fp, #4
  11d0fc:	e8bd8800 	pop	{fp, pc}

0011d100 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
  11d100:	e92d4800 	push	{fp, lr}
  11d104:	e28db004 	add	fp, sp, #4
  11d108:	e24dd018 	sub	sp, sp, #24
  11d10c:	e50b0010 	str	r0, [fp, #-16]
  11d110:	e1a03001 	mov	r3, r1
  11d114:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  11d118:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  11d11c:	e3530000 	cmp	r3, #0
  11d120:	0a000076 	beq	11d300 <tcp_close_shutdown+0x200>
  11d124:	e51b3010 	ldr	r3, [fp, #-16]
  11d128:	e5933014 	ldr	r3, [r3, #20]
  11d12c:	e3530004 	cmp	r3, #4
  11d130:	0a000003 	beq	11d144 <tcp_close_shutdown+0x44>
  11d134:	e51b3010 	ldr	r3, [fp, #-16]
  11d138:	e5933014 	ldr	r3, [r3, #20]
  11d13c:	e3530007 	cmp	r3, #7
  11d140:	1a00006e 	bne	11d300 <tcp_close_shutdown+0x200>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
  11d144:	e51b3010 	ldr	r3, [fp, #-16]
  11d148:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d14c:	e3530000 	cmp	r3, #0
  11d150:	1a000003 	bne	11d164 <tcp_close_shutdown+0x64>
  11d154:	e51b3010 	ldr	r3, [fp, #-16]
  11d158:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11d15c:	e3530a02 	cmp	r3, #8192	; 0x2000
  11d160:	0a000066 	beq	11d300 <tcp_close_shutdown+0x200>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
  11d164:	e51b3010 	ldr	r3, [fp, #-16]
  11d168:	e5d3301e 	ldrb	r3, [r3, #30]
  11d16c:	e2033010 	and	r3, r3, #16
  11d170:	e3530000 	cmp	r3, #0
  11d174:	1a000006 	bne	11d194 <tcp_close_shutdown+0x94>
  11d178:	e3070ee4 	movw	r0, #32484	; 0x7ee4
  11d17c:	e3400014 	movt	r0, #20
  11d180:	ebff97e3 	bl	103114 <rt_kprintf>
  11d184:	e300110f 	movw	r1, #271	; 0x10f
  11d188:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11d18c:	e3400014 	movt	r0, #20
  11d190:	ebffb7c7 	bl	10b0b4 <sys_arch_assert>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11d194:	e51b3010 	ldr	r3, [fp, #-16]
  11d198:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11d19c:	e51b3010 	ldr	r3, [fp, #-16]
  11d1a0:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11d1a4:	e51bc010 	ldr	ip, [fp, #-16]
  11d1a8:	e51b3010 	ldr	r3, [fp, #-16]
  11d1ac:	e283e004 	add	lr, r3, #4
  11d1b0:	e51b3010 	ldr	r3, [fp, #-16]
  11d1b4:	e1d331ba 	ldrh	r3, [r3, #26]
  11d1b8:	e51b2010 	ldr	r2, [fp, #-16]
  11d1bc:	e1d221bc 	ldrh	r2, [r2, #28]
  11d1c0:	e58d2004 	str	r2, [sp, #4]
  11d1c4:	e58d3000 	str	r3, [sp]
  11d1c8:	e1a0300e 	mov	r3, lr
  11d1cc:	e1a0200c 	mov	r2, ip
  11d1d0:	eb0025b8 	bl	1268b8 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
  11d1d4:	e51b0010 	ldr	r0, [fp, #-16]
  11d1d8:	eb000ade 	bl	11fd58 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  11d1dc:	e30c3c38 	movw	r3, #52280	; 0xcc38
  11d1e0:	e3403015 	movt	r3, #21
  11d1e4:	e5933000 	ldr	r3, [r3]
  11d1e8:	e51b2010 	ldr	r2, [fp, #-16]
  11d1ec:	e1520003 	cmp	r2, r3
  11d1f0:	1a000007 	bne	11d214 <tcp_close_shutdown+0x114>
  11d1f4:	e30c3c38 	movw	r3, #52280	; 0xcc38
  11d1f8:	e3403015 	movt	r3, #21
  11d1fc:	e5933000 	ldr	r3, [r3]
  11d200:	e593200c 	ldr	r2, [r3, #12]
  11d204:	e30c3c38 	movw	r3, #52280	; 0xcc38
  11d208:	e3403015 	movt	r3, #21
  11d20c:	e5832000 	str	r2, [r3]
  11d210:	ea000014 	b	11d268 <tcp_close_shutdown+0x168>
  11d214:	e30c3c38 	movw	r3, #52280	; 0xcc38
  11d218:	e3403015 	movt	r3, #21
  11d21c:	e5933000 	ldr	r3, [r3]
  11d220:	e50b3008 	str	r3, [fp, #-8]
  11d224:	ea00000c 	b	11d25c <tcp_close_shutdown+0x15c>
  11d228:	e51b3008 	ldr	r3, [fp, #-8]
  11d22c:	e593300c 	ldr	r3, [r3, #12]
  11d230:	e51b2010 	ldr	r2, [fp, #-16]
  11d234:	e1520003 	cmp	r2, r3
  11d238:	1a000004 	bne	11d250 <tcp_close_shutdown+0x150>
  11d23c:	e51b3010 	ldr	r3, [fp, #-16]
  11d240:	e593200c 	ldr	r2, [r3, #12]
  11d244:	e51b3008 	ldr	r3, [fp, #-8]
  11d248:	e583200c 	str	r2, [r3, #12]
  11d24c:	ea000005 	b	11d268 <tcp_close_shutdown+0x168>
  11d250:	e51b3008 	ldr	r3, [fp, #-8]
  11d254:	e593300c 	ldr	r3, [r3, #12]
  11d258:	e50b3008 	str	r3, [fp, #-8]
  11d25c:	e51b3008 	ldr	r3, [fp, #-8]
  11d260:	e3530000 	cmp	r3, #0
  11d264:	1affffef 	bne	11d228 <tcp_close_shutdown+0x128>
  11d268:	e51b3010 	ldr	r3, [fp, #-16]
  11d26c:	e3a02000 	mov	r2, #0
  11d270:	e583200c 	str	r2, [r3, #12]
  11d274:	e30c3c34 	movw	r3, #52276	; 0xcc34
  11d278:	e3403015 	movt	r3, #21
  11d27c:	e3a02001 	mov	r2, #1
  11d280:	e5c32000 	strb	r2, [r3]
      if (pcb->state == ESTABLISHED) {
  11d284:	e51b3010 	ldr	r3, [fp, #-16]
  11d288:	e5933014 	ldr	r3, [r3, #20]
  11d28c:	e3530004 	cmp	r3, #4
  11d290:	1a00000d 	bne	11d2cc <tcp_close_shutdown+0x1cc>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
  11d294:	e51b3010 	ldr	r3, [fp, #-16]
  11d298:	e3a0200a 	mov	r2, #10
  11d29c:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  11d2a0:	e30c3c48 	movw	r3, #52296	; 0xcc48
  11d2a4:	e3403015 	movt	r3, #21
  11d2a8:	e5932000 	ldr	r2, [r3]
  11d2ac:	e51b3010 	ldr	r3, [fp, #-16]
  11d2b0:	e583200c 	str	r2, [r3, #12]
  11d2b4:	e30c3c48 	movw	r3, #52296	; 0xcc48
  11d2b8:	e3403015 	movt	r3, #21
  11d2bc:	e51b2010 	ldr	r2, [fp, #-16]
  11d2c0:	e5832000 	str	r2, [r3]
  11d2c4:	eb0027cf 	bl	127208 <tcp_timer_needed>
  11d2c8:	ea00000a 	b	11d2f8 <tcp_close_shutdown+0x1f8>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
  11d2cc:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  11d2d0:	e3403015 	movt	r3, #21
  11d2d4:	e5933000 	ldr	r3, [r3]
  11d2d8:	e51b2010 	ldr	r2, [fp, #-16]
  11d2dc:	e1520003 	cmp	r2, r3
  11d2e0:	1a000001 	bne	11d2ec <tcp_close_shutdown+0x1ec>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
  11d2e4:	eb001ce6 	bl	124684 <tcp_trigger_input_pcb_close>
  11d2e8:	ea000002 	b	11d2f8 <tcp_close_shutdown+0x1f8>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
  11d2ec:	e51b1010 	ldr	r1, [fp, #-16]
  11d2f0:	e3a00002 	mov	r0, #2
  11d2f4:	ebffefd0 	bl	11923c <memp_free>
        }
      }
      return ERR_OK;
  11d2f8:	e3a03000 	mov	r3, #0
  11d2fc:	ea000058 	b	11d464 <tcp_close_shutdown+0x364>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
  11d300:	e51b3010 	ldr	r3, [fp, #-16]
  11d304:	e5933014 	ldr	r3, [r3, #20]
  11d308:	e3530001 	cmp	r3, #1
  11d30c:	0a000032 	beq	11d3dc <tcp_close_shutdown+0x2dc>
  11d310:	e3530001 	cmp	r3, #1
  11d314:	3a000002 	bcc	11d324 <tcp_close_shutdown+0x224>
  11d318:	e3530002 	cmp	r3, #2
  11d31c:	0a000038 	beq	11d404 <tcp_close_shutdown+0x304>
  11d320:	ea00004a 	b	11d450 <tcp_close_shutdown+0x350>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
  11d324:	e51b3010 	ldr	r3, [fp, #-16]
  11d328:	e1d331ba 	ldrh	r3, [r3, #26]
  11d32c:	e3530000 	cmp	r3, #0
  11d330:	0a000025 	beq	11d3cc <tcp_close_shutdown+0x2cc>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11d334:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11d338:	e3403015 	movt	r3, #21
  11d33c:	e5933000 	ldr	r3, [r3]
  11d340:	e51b2010 	ldr	r2, [fp, #-16]
  11d344:	e1520003 	cmp	r2, r3
  11d348:	1a000007 	bne	11d36c <tcp_close_shutdown+0x26c>
  11d34c:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11d350:	e3403015 	movt	r3, #21
  11d354:	e5933000 	ldr	r3, [r3]
  11d358:	e593200c 	ldr	r2, [r3, #12]
  11d35c:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11d360:	e3403015 	movt	r3, #21
  11d364:	e5832000 	str	r2, [r3]
  11d368:	ea000014 	b	11d3c0 <tcp_close_shutdown+0x2c0>
  11d36c:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11d370:	e3403015 	movt	r3, #21
  11d374:	e5933000 	ldr	r3, [r3]
  11d378:	e50b300c 	str	r3, [fp, #-12]
  11d37c:	ea00000c 	b	11d3b4 <tcp_close_shutdown+0x2b4>
  11d380:	e51b300c 	ldr	r3, [fp, #-12]
  11d384:	e593300c 	ldr	r3, [r3, #12]
  11d388:	e51b2010 	ldr	r2, [fp, #-16]
  11d38c:	e1520003 	cmp	r2, r3
  11d390:	1a000004 	bne	11d3a8 <tcp_close_shutdown+0x2a8>
  11d394:	e51b3010 	ldr	r3, [fp, #-16]
  11d398:	e593200c 	ldr	r2, [r3, #12]
  11d39c:	e51b300c 	ldr	r3, [fp, #-12]
  11d3a0:	e583200c 	str	r2, [r3, #12]
  11d3a4:	ea000005 	b	11d3c0 <tcp_close_shutdown+0x2c0>
  11d3a8:	e51b300c 	ldr	r3, [fp, #-12]
  11d3ac:	e593300c 	ldr	r3, [r3, #12]
  11d3b0:	e50b300c 	str	r3, [fp, #-12]
  11d3b4:	e51b300c 	ldr	r3, [fp, #-12]
  11d3b8:	e3530000 	cmp	r3, #0
  11d3bc:	1affffef 	bne	11d380 <tcp_close_shutdown+0x280>
  11d3c0:	e51b3010 	ldr	r3, [fp, #-16]
  11d3c4:	e3a02000 	mov	r2, #0
  11d3c8:	e583200c 	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
  11d3cc:	e51b1010 	ldr	r1, [fp, #-16]
  11d3d0:	e3a00002 	mov	r0, #2
  11d3d4:	ebffef98 	bl	11923c <memp_free>
    break;
  11d3d8:	ea000020 	b	11d460 <tcp_close_shutdown+0x360>
  case LISTEN:
    tcp_listen_closed(pcb);
  11d3dc:	e51b0010 	ldr	r0, [fp, #-16]
  11d3e0:	ebffff19 	bl	11d04c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  11d3e4:	e51b1010 	ldr	r1, [fp, #-16]
  11d3e8:	e30c0c40 	movw	r0, #52288	; 0xcc40
  11d3ec:	e3400015 	movt	r0, #21
  11d3f0:	eb000a92 	bl	11fe40 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  11d3f4:	e51b1010 	ldr	r1, [fp, #-16]
  11d3f8:	e3a00003 	mov	r0, #3
  11d3fc:	ebffef8e 	bl	11923c <memp_free>
    break;
  11d400:	ea000016 	b	11d460 <tcp_close_shutdown+0x360>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
  11d404:	e51b1010 	ldr	r1, [fp, #-16]
  11d408:	e30c0c38 	movw	r0, #52280	; 0xcc38
  11d40c:	e3400015 	movt	r0, #21
  11d410:	eb000a8a 	bl	11fe40 <tcp_pcb_remove>
  11d414:	e30c3c34 	movw	r3, #52276	; 0xcc34
  11d418:	e3403015 	movt	r3, #21
  11d41c:	e3a02001 	mov	r2, #1
  11d420:	e5c32000 	strb	r2, [r3]
    memp_free(MEMP_TCP_PCB, pcb);
  11d424:	e51b1010 	ldr	r1, [fp, #-16]
  11d428:	e3a00002 	mov	r0, #2
  11d42c:	ebffef82 	bl	11923c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
  11d430:	e30c3a48 	movw	r3, #51784	; 0xca48
  11d434:	e3403015 	movt	r3, #21
  11d438:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d43c:	e2832001 	add	r2, r3, #1
  11d440:	e30c3a48 	movw	r3, #51784	; 0xca48
  11d444:	e3403015 	movt	r3, #21
  11d448:	e5832174 	str	r2, [r3, #372]	; 0x174
    break;
  11d44c:	ea000003 	b	11d460 <tcp_close_shutdown+0x360>
  default:
    return tcp_close_shutdown_fin(pcb);
  11d450:	e51b0010 	ldr	r0, [fp, #-16]
  11d454:	eb000005 	bl	11d470 <tcp_close_shutdown_fin>
  11d458:	e1a03000 	mov	r3, r0
  11d45c:	ea000000 	b	11d464 <tcp_close_shutdown+0x364>
  }
  return ERR_OK;
  11d460:	e3a03000 	mov	r3, #0
}
  11d464:	e1a00003 	mov	r0, r3
  11d468:	e24bd004 	sub	sp, fp, #4
  11d46c:	e8bd8800 	pop	{fp, pc}

0011d470 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
  11d470:	e92d4800 	push	{fp, lr}
  11d474:	e28db004 	add	fp, sp, #4
  11d478:	e24dd010 	sub	sp, sp, #16
  11d47c:	e50b0010 	str	r0, [fp, #-16]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11d480:	e51b3010 	ldr	r3, [fp, #-16]
  11d484:	e3530000 	cmp	r3, #0
  11d488:	1a000006 	bne	11d4a8 <tcp_close_shutdown_fin+0x38>
  11d48c:	e3070e94 	movw	r0, #32404	; 0x7e94
  11d490:	e3400014 	movt	r0, #20
  11d494:	ebff971e 	bl	103114 <rt_kprintf>
  11d498:	e300114d 	movw	r1, #333	; 0x14d
  11d49c:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11d4a0:	e3400014 	movt	r0, #20
  11d4a4:	ebffb702 	bl	10b0b4 <sys_arch_assert>

  switch (pcb->state) {
  11d4a8:	e51b3010 	ldr	r3, [fp, #-16]
  11d4ac:	e5933014 	ldr	r3, [r3, #20]
  11d4b0:	e3530004 	cmp	r3, #4
  11d4b4:	0a000015 	beq	11d510 <tcp_close_shutdown_fin+0xa0>
  11d4b8:	e3530007 	cmp	r3, #7
  11d4bc:	0a000025 	beq	11d558 <tcp_close_shutdown_fin+0xe8>
  11d4c0:	e3530003 	cmp	r3, #3
  11d4c4:	1a000035 	bne	11d5a0 <tcp_close_shutdown_fin+0x130>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
  11d4c8:	e51b0010 	ldr	r0, [fp, #-16]
  11d4cc:	eb001ce8 	bl	124874 <tcp_send_fin>
  11d4d0:	e1a03000 	mov	r3, r0
  11d4d4:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d4d8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d4dc:	e3530000 	cmp	r3, #0
  11d4e0:	1a000030 	bne	11d5a8 <tcp_close_shutdown_fin+0x138>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
  11d4e4:	e30c3a48 	movw	r3, #51784	; 0xca48
  11d4e8:	e3403015 	movt	r3, #21
  11d4ec:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d4f0:	e2832001 	add	r2, r3, #1
  11d4f4:	e30c3a48 	movw	r3, #51784	; 0xca48
  11d4f8:	e3403015 	movt	r3, #21
  11d4fc:	e5832174 	str	r2, [r3, #372]	; 0x174
      pcb->state = FIN_WAIT_1;
  11d500:	e51b3010 	ldr	r3, [fp, #-16]
  11d504:	e3a02005 	mov	r2, #5
  11d508:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d50c:	ea000025 	b	11d5a8 <tcp_close_shutdown_fin+0x138>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
  11d510:	e51b0010 	ldr	r0, [fp, #-16]
  11d514:	eb001cd6 	bl	124874 <tcp_send_fin>
  11d518:	e1a03000 	mov	r3, r0
  11d51c:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d520:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d524:	e3530000 	cmp	r3, #0
  11d528:	1a000020 	bne	11d5b0 <tcp_close_shutdown_fin+0x140>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d52c:	e30c3a48 	movw	r3, #51784	; 0xca48
  11d530:	e3403015 	movt	r3, #21
  11d534:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d538:	e2832001 	add	r2, r3, #1
  11d53c:	e30c3a48 	movw	r3, #51784	; 0xca48
  11d540:	e3403015 	movt	r3, #21
  11d544:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = FIN_WAIT_1;
  11d548:	e51b3010 	ldr	r3, [fp, #-16]
  11d54c:	e3a02005 	mov	r2, #5
  11d550:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d554:	ea000015 	b	11d5b0 <tcp_close_shutdown_fin+0x140>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
  11d558:	e51b0010 	ldr	r0, [fp, #-16]
  11d55c:	eb001cc4 	bl	124874 <tcp_send_fin>
  11d560:	e1a03000 	mov	r3, r0
  11d564:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d568:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d56c:	e3530000 	cmp	r3, #0
  11d570:	1a000010 	bne	11d5b8 <tcp_close_shutdown_fin+0x148>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d574:	e30c3a48 	movw	r3, #51784	; 0xca48
  11d578:	e3403015 	movt	r3, #21
  11d57c:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d580:	e2832001 	add	r2, r3, #1
  11d584:	e30c3a48 	movw	r3, #51784	; 0xca48
  11d588:	e3403015 	movt	r3, #21
  11d58c:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = LAST_ACK;
  11d590:	e51b3010 	ldr	r3, [fp, #-16]
  11d594:	e3a02009 	mov	r2, #9
  11d598:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d59c:	ea000005 	b	11d5b8 <tcp_close_shutdown_fin+0x148>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
  11d5a0:	e3a03000 	mov	r3, #0
  11d5a4:	ea000014 	b	11d5fc <tcp_close_shutdown_fin+0x18c>
    break;
  11d5a8:	e320f000 	nop	{0}
  11d5ac:	ea000002 	b	11d5bc <tcp_close_shutdown_fin+0x14c>
    break;
  11d5b0:	e320f000 	nop	{0}
  11d5b4:	ea000000 	b	11d5bc <tcp_close_shutdown_fin+0x14c>
    break;
  11d5b8:	e320f000 	nop	{0}
    break;
  }

  if (err == ERR_OK) {
  11d5bc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d5c0:	e3530000 	cmp	r3, #0
  11d5c4:	1a000002 	bne	11d5d4 <tcp_close_shutdown_fin+0x164>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
  11d5c8:	e51b0010 	ldr	r0, [fp, #-16]
  11d5cc:	eb002253 	bl	125f20 <tcp_output>
  11d5d0:	ea000008 	b	11d5f8 <tcp_close_shutdown_fin+0x188>
  } else if (err == ERR_MEM) {
  11d5d4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d5d8:	e3730001 	cmn	r3, #1
  11d5dc:	1a000005 	bne	11d5f8 <tcp_close_shutdown_fin+0x188>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
  11d5e0:	e51b3010 	ldr	r3, [fp, #-16]
  11d5e4:	e5d3301e 	ldrb	r3, [r3, #30]
  11d5e8:	e3833008 	orr	r3, r3, #8
  11d5ec:	e6ef2073 	uxtb	r2, r3
  11d5f0:	e51b3010 	ldr	r3, [fp, #-16]
  11d5f4:	e5c3201e 	strb	r2, [r3, #30]
  }
  return err;
  11d5f8:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  11d5fc:	e1a00003 	mov	r0, r3
  11d600:	e24bd004 	sub	sp, fp, #4
  11d604:	e8bd8800 	pop	{fp, pc}

0011d608 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
  11d608:	e92d4800 	push	{fp, lr}
  11d60c:	e28db004 	add	fp, sp, #4
  11d610:	e24dd008 	sub	sp, sp, #8
  11d614:	e50b0008 	str	r0, [fp, #-8]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
  11d618:	e51b3008 	ldr	r3, [fp, #-8]
  11d61c:	e5933014 	ldr	r3, [r3, #20]
  11d620:	e3530001 	cmp	r3, #1
  11d624:	0a000005 	beq	11d640 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d628:	e51b3008 	ldr	r3, [fp, #-8]
  11d62c:	e5d3301e 	ldrb	r3, [r3, #30]
  11d630:	e3833010 	orr	r3, r3, #16
  11d634:	e6ef2073 	uxtb	r2, r3
  11d638:	e51b3008 	ldr	r3, [fp, #-8]
  11d63c:	e5c3201e 	strb	r2, [r3, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
  11d640:	e3a01001 	mov	r1, #1
  11d644:	e51b0008 	ldr	r0, [fp, #-8]
  11d648:	ebfffeac 	bl	11d100 <tcp_close_shutdown>
  11d64c:	e1a03000 	mov	r3, r0
}
  11d650:	e1a00003 	mov	r0, r3
  11d654:	e24bd004 	sub	sp, fp, #4
  11d658:	e8bd8800 	pop	{fp, pc}

0011d65c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
  11d65c:	e92d4800 	push	{fp, lr}
  11d660:	e28db004 	add	fp, sp, #4
  11d664:	e24dd010 	sub	sp, sp, #16
  11d668:	e50b0008 	str	r0, [fp, #-8]
  11d66c:	e50b100c 	str	r1, [fp, #-12]
  11d670:	e50b2010 	str	r2, [fp, #-16]
  if (pcb->state == LISTEN) {
  11d674:	e51b3008 	ldr	r3, [fp, #-8]
  11d678:	e5933014 	ldr	r3, [r3, #20]
  11d67c:	e3530001 	cmp	r3, #1
  11d680:	1a000001 	bne	11d68c <tcp_shutdown+0x30>
    return ERR_CONN;
  11d684:	e3e0300a 	mvn	r3, #10
  11d688:	ea000030 	b	11d750 <tcp_shutdown+0xf4>
  }
  if (shut_rx) {
  11d68c:	e51b300c 	ldr	r3, [fp, #-12]
  11d690:	e3530000 	cmp	r3, #0
  11d694:	0a000018 	beq	11d6fc <tcp_shutdown+0xa0>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d698:	e51b3008 	ldr	r3, [fp, #-8]
  11d69c:	e5d3301e 	ldrb	r3, [r3, #30]
  11d6a0:	e3833010 	orr	r3, r3, #16
  11d6a4:	e6ef2073 	uxtb	r2, r3
  11d6a8:	e51b3008 	ldr	r3, [fp, #-8]
  11d6ac:	e5c3201e 	strb	r2, [r3, #30]
    if (shut_tx) {
  11d6b0:	e51b3010 	ldr	r3, [fp, #-16]
  11d6b4:	e3530000 	cmp	r3, #0
  11d6b8:	0a000004 	beq	11d6d0 <tcp_shutdown+0x74>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
  11d6bc:	e3a01001 	mov	r1, #1
  11d6c0:	e51b0008 	ldr	r0, [fp, #-8]
  11d6c4:	ebfffe8d 	bl	11d100 <tcp_close_shutdown>
  11d6c8:	e1a03000 	mov	r3, r0
  11d6cc:	ea00001f 	b	11d750 <tcp_shutdown+0xf4>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
  11d6d0:	e51b3008 	ldr	r3, [fp, #-8]
  11d6d4:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d6d8:	e3530000 	cmp	r3, #0
  11d6dc:	0a000006 	beq	11d6fc <tcp_shutdown+0xa0>
      pbuf_free(pcb->refused_data);
  11d6e0:	e51b3008 	ldr	r3, [fp, #-8]
  11d6e4:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d6e8:	e1a00003 	mov	r0, r3
  11d6ec:	ebfff5e0 	bl	11ae74 <pbuf_free>
      pcb->refused_data = NULL;
  11d6f0:	e51b3008 	ldr	r3, [fp, #-8]
  11d6f4:	e3a02000 	mov	r2, #0
  11d6f8:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
  11d6fc:	e51b3010 	ldr	r3, [fp, #-16]
  11d700:	e3530000 	cmp	r3, #0
  11d704:	0a000010 	beq	11d74c <tcp_shutdown+0xf0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
  11d708:	e51b3008 	ldr	r3, [fp, #-8]
  11d70c:	e5933014 	ldr	r3, [r3, #20]
  11d710:	e3530003 	cmp	r3, #3
  11d714:	3a00000a 	bcc	11d744 <tcp_shutdown+0xe8>
  11d718:	e3530004 	cmp	r3, #4
  11d71c:	9a000001 	bls	11d728 <tcp_shutdown+0xcc>
  11d720:	e3530007 	cmp	r3, #7
  11d724:	1a000006 	bne	11d744 <tcp_shutdown+0xe8>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
  11d728:	e51b300c 	ldr	r3, [fp, #-12]
  11d72c:	e6ef3073 	uxtb	r3, r3
  11d730:	e1a01003 	mov	r1, r3
  11d734:	e51b0008 	ldr	r0, [fp, #-8]
  11d738:	ebfffe70 	bl	11d100 <tcp_close_shutdown>
  11d73c:	e1a03000 	mov	r3, r0
  11d740:	ea000002 	b	11d750 <tcp_shutdown+0xf4>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
  11d744:	e3e0300a 	mvn	r3, #10
  11d748:	ea000000 	b	11d750 <tcp_shutdown+0xf4>
    }
  }
  return ERR_OK;
  11d74c:	e3a03000 	mov	r3, #0
}
  11d750:	e1a00003 	mov	r0, r3
  11d754:	e24bd004 	sub	sp, fp, #4
  11d758:	e8bd8800 	pop	{fp, pc}

0011d75c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
  11d75c:	e92d4800 	push	{fp, lr}
  11d760:	e28db004 	add	fp, sp, #4
  11d764:	e24dd030 	sub	sp, sp, #48	; 0x30
  11d768:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11d76c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
  11d770:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d774:	e5933014 	ldr	r3, [r3, #20]
  11d778:	e3530001 	cmp	r3, #1
  11d77c:	1a000006 	bne	11d79c <tcp_abandon+0x40>
  11d780:	e3070f00 	movw	r0, #32512	; 0x7f00
  11d784:	e3400014 	movt	r0, #20
  11d788:	ebff9661 	bl	103114 <rt_kprintf>
  11d78c:	e30011db 	movw	r1, #475	; 0x1db
  11d790:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11d794:	e3400014 	movt	r0, #20
  11d798:	ebffb645 	bl	10b0b4 <sys_arch_assert>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
  11d79c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d7a0:	e5933014 	ldr	r3, [r3, #20]
  11d7a4:	e353000a 	cmp	r3, #10
  11d7a8:	1a000007 	bne	11d7cc <tcp_abandon+0x70>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  11d7ac:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d7b0:	e30c0c48 	movw	r0, #52296	; 0xcc48
  11d7b4:	e3400015 	movt	r0, #21
  11d7b8:	eb0009a0 	bl	11fe40 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
  11d7bc:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d7c0:	e3a00002 	mov	r0, #2
  11d7c4:	ebffee9c 	bl	11923c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
  11d7c8:	ea00007f 	b	11d9cc <tcp_abandon+0x270>
    int send_rst = 0;
  11d7cc:	e3a03000 	mov	r3, #0
  11d7d0:	e50b3008 	str	r3, [fp, #-8]
    u16_t local_port = 0;
  11d7d4:	e3a03000 	mov	r3, #0
  11d7d8:	e14b30ba 	strh	r3, [fp, #-10]
    seqno = pcb->snd_nxt;
  11d7dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d7e0:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  11d7e4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ackno = pcb->rcv_nxt;
  11d7e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d7ec:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11d7f0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    errf = pcb->errf;
  11d7f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d7f8:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11d7fc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    errf_arg = pcb->callback_arg;
  11d800:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d804:	e5933010 	ldr	r3, [r3, #16]
  11d808:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (pcb->state == CLOSED) {
  11d80c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d810:	e5933014 	ldr	r3, [r3, #20]
  11d814:	e3530000 	cmp	r3, #0
  11d818:	1a00002a 	bne	11d8c8 <tcp_abandon+0x16c>
      if (pcb->local_port != 0) {
  11d81c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d820:	e1d331ba 	ldrh	r3, [r3, #26]
  11d824:	e3530000 	cmp	r3, #0
  11d828:	0a000033 	beq	11d8fc <tcp_abandon+0x1a0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
  11d82c:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11d830:	e3403015 	movt	r3, #21
  11d834:	e5933000 	ldr	r3, [r3]
  11d838:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d83c:	e1520003 	cmp	r2, r3
  11d840:	1a000007 	bne	11d864 <tcp_abandon+0x108>
  11d844:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11d848:	e3403015 	movt	r3, #21
  11d84c:	e5933000 	ldr	r3, [r3]
  11d850:	e593200c 	ldr	r2, [r3, #12]
  11d854:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11d858:	e3403015 	movt	r3, #21
  11d85c:	e5832000 	str	r2, [r3]
  11d860:	ea000014 	b	11d8b8 <tcp_abandon+0x15c>
  11d864:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11d868:	e3403015 	movt	r3, #21
  11d86c:	e5933000 	ldr	r3, [r3]
  11d870:	e50b3010 	str	r3, [fp, #-16]
  11d874:	ea00000c 	b	11d8ac <tcp_abandon+0x150>
  11d878:	e51b3010 	ldr	r3, [fp, #-16]
  11d87c:	e593300c 	ldr	r3, [r3, #12]
  11d880:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d884:	e1520003 	cmp	r2, r3
  11d888:	1a000004 	bne	11d8a0 <tcp_abandon+0x144>
  11d88c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d890:	e593200c 	ldr	r2, [r3, #12]
  11d894:	e51b3010 	ldr	r3, [fp, #-16]
  11d898:	e583200c 	str	r2, [r3, #12]
  11d89c:	ea000005 	b	11d8b8 <tcp_abandon+0x15c>
  11d8a0:	e51b3010 	ldr	r3, [fp, #-16]
  11d8a4:	e593300c 	ldr	r3, [r3, #12]
  11d8a8:	e50b3010 	str	r3, [fp, #-16]
  11d8ac:	e51b3010 	ldr	r3, [fp, #-16]
  11d8b0:	e3530000 	cmp	r3, #0
  11d8b4:	1affffef 	bne	11d878 <tcp_abandon+0x11c>
  11d8b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d8bc:	e3a02000 	mov	r2, #0
  11d8c0:	e583200c 	str	r2, [r3, #12]
  11d8c4:	ea00000c 	b	11d8fc <tcp_abandon+0x1a0>
      send_rst = reset;
  11d8c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11d8cc:	e50b3008 	str	r3, [fp, #-8]
      local_port = pcb->local_port;
  11d8d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d8d4:	e1d331ba 	ldrh	r3, [r3, #26]
  11d8d8:	e14b30ba 	strh	r3, [fp, #-10]
      TCP_PCB_REMOVE_ACTIVE(pcb);
  11d8dc:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d8e0:	e30c0c38 	movw	r0, #52280	; 0xcc38
  11d8e4:	e3400015 	movt	r0, #21
  11d8e8:	eb000954 	bl	11fe40 <tcp_pcb_remove>
  11d8ec:	e30c3c34 	movw	r3, #52276	; 0xcc34
  11d8f0:	e3403015 	movt	r3, #21
  11d8f4:	e3a02001 	mov	r2, #1
  11d8f8:	e5c32000 	strb	r2, [r3]
    if (pcb->unacked != NULL) {
  11d8fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d900:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11d904:	e3530000 	cmp	r3, #0
  11d908:	0a000003 	beq	11d91c <tcp_abandon+0x1c0>
      tcp_segs_free(pcb->unacked);
  11d90c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d910:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11d914:	e1a00003 	mov	r0, r3
  11d918:	eb0006b7 	bl	11f3fc <tcp_segs_free>
    if (pcb->unsent != NULL) {
  11d91c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d920:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11d924:	e3530000 	cmp	r3, #0
  11d928:	0a000003 	beq	11d93c <tcp_abandon+0x1e0>
      tcp_segs_free(pcb->unsent);
  11d92c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d930:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11d934:	e1a00003 	mov	r0, r3
  11d938:	eb0006af 	bl	11f3fc <tcp_segs_free>
    if (pcb->ooseq != NULL) {
  11d93c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d940:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11d944:	e3530000 	cmp	r3, #0
  11d948:	0a000003 	beq	11d95c <tcp_abandon+0x200>
      tcp_segs_free(pcb->ooseq);
  11d94c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d950:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11d954:	e1a00003 	mov	r0, r3
  11d958:	eb0006a7 	bl	11f3fc <tcp_segs_free>
    if (send_rst) {
  11d95c:	e51b3008 	ldr	r3, [fp, #-8]
  11d960:	e3530000 	cmp	r3, #0
  11d964:	0a00000b 	beq	11d998 <tcp_abandon+0x23c>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
  11d968:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d96c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d970:	e2831004 	add	r1, r3, #4
  11d974:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d978:	e1d331bc 	ldrh	r3, [r3, #28]
  11d97c:	e58d3004 	str	r3, [sp, #4]
  11d980:	e15b30ba 	ldrh	r3, [fp, #-10]
  11d984:	e58d3000 	str	r3, [sp]
  11d988:	e1a03001 	mov	r3, r1
  11d98c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11d990:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11d994:	eb0023c7 	bl	1268b8 <tcp_rst>
    last_state = pcb->state;
  11d998:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d99c:	e5933014 	ldr	r3, [r3, #20]
  11d9a0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    memp_free(MEMP_TCP_PCB, pcb);
  11d9a4:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d9a8:	e3a00002 	mov	r0, #2
  11d9ac:	ebffee22 	bl	11923c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  11d9b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d9b4:	e3530000 	cmp	r3, #0
  11d9b8:	0a000003 	beq	11d9cc <tcp_abandon+0x270>
  11d9bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d9c0:	e3e0100c 	mvn	r1, #12
  11d9c4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  11d9c8:	e12fff33 	blx	r3
}
  11d9cc:	e320f000 	nop	{0}
  11d9d0:	e24bd004 	sub	sp, fp, #4
  11d9d4:	e8bd8800 	pop	{fp, pc}

0011d9d8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  11d9d8:	e92d4800 	push	{fp, lr}
  11d9dc:	e28db004 	add	fp, sp, #4
  11d9e0:	e24dd008 	sub	sp, sp, #8
  11d9e4:	e50b0008 	str	r0, [fp, #-8]
  tcp_abandon(pcb, 1);
  11d9e8:	e3a01001 	mov	r1, #1
  11d9ec:	e51b0008 	ldr	r0, [fp, #-8]
  11d9f0:	ebffff59 	bl	11d75c <tcp_abandon>
}
  11d9f4:	e320f000 	nop	{0}
  11d9f8:	e24bd004 	sub	sp, fp, #4
  11d9fc:	e8bd8800 	pop	{fp, pc}

0011da00 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  11da00:	e92d4800 	push	{fp, lr}
  11da04:	e28db004 	add	fp, sp, #4
  11da08:	e24dd020 	sub	sp, sp, #32
  11da0c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11da10:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11da14:	e1a03002 	mov	r3, r2
  11da18:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  11da1c:	e3a03004 	mov	r3, #4
  11da20:	e50b300c 	str	r3, [fp, #-12]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  11da24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11da28:	e3530000 	cmp	r3, #0
  11da2c:	1a000002 	bne	11da3c <tcp_bind+0x3c>
    ipaddr = IP4_ADDR_ANY;
  11da30:	e30938d0 	movw	r3, #39120	; 0x98d0
  11da34:	e3403014 	movt	r3, #20
  11da38:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11da3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da40:	e3530000 	cmp	r3, #0
  11da44:	0a000002 	beq	11da54 <tcp_bind+0x54>
  11da48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11da4c:	e3530000 	cmp	r3, #0
  11da50:	1a000001 	bne	11da5c <tcp_bind+0x5c>
    return ERR_VAL;
  11da54:	e3e03005 	mvn	r3, #5
  11da58:	ea000078 	b	11dc40 <tcp_bind+0x240>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
  11da5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da60:	e5933014 	ldr	r3, [r3, #20]
  11da64:	e3530000 	cmp	r3, #0
  11da68:	0a000008 	beq	11da90 <tcp_bind+0x90>
  11da6c:	e3070f34 	movw	r0, #32564	; 0x7f34
  11da70:	e3400014 	movt	r0, #20
  11da74:	ebff95a6 	bl	103114 <rt_kprintf>
  11da78:	e300123f 	movw	r1, #575	; 0x23f
  11da7c:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11da80:	e3400014 	movt	r0, #20
  11da84:	ebffb58a 	bl	10b0b4 <sys_arch_assert>
  11da88:	e3e03005 	mvn	r3, #5
  11da8c:	ea00006b 	b	11dc40 <tcp_bind+0x240>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11da90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da94:	e5d33008 	ldrb	r3, [r3, #8]
  11da98:	e2033004 	and	r3, r3, #4
  11da9c:	e3530000 	cmp	r3, #0
  11daa0:	0a000001 	beq	11daac <tcp_bind+0xac>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  11daa4:	e3a03003 	mov	r3, #3
  11daa8:	e50b300c 	str	r3, [fp, #-12]
  }
#endif /* SO_REUSE */

  if (port == 0) {
  11daac:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11dab0:	e3530000 	cmp	r3, #0
  11dab4:	1a000007 	bne	11dad8 <tcp_bind+0xd8>
    port = tcp_new_port();
  11dab8:	eb0001be 	bl	11e1b8 <tcp_new_port>
  11dabc:	e1a03000 	mov	r3, r0
  11dac0:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    if (port == 0) {
  11dac4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11dac8:	e3530000 	cmp	r3, #0
  11dacc:	1a00003d 	bne	11dbc8 <tcp_bind+0x1c8>
      return ERR_BUF;
  11dad0:	e3e03001 	mvn	r3, #1
  11dad4:	ea000059 	b	11dc40 <tcp_bind+0x240>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
  11dad8:	e3a03000 	mov	r3, #0
  11dadc:	e50b3008 	str	r3, [fp, #-8]
  11dae0:	ea000034 	b	11dbb8 <tcp_bind+0x1b8>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11dae4:	e3073e84 	movw	r3, #32388	; 0x7e84
  11dae8:	e3403014 	movt	r3, #20
  11daec:	e51b2008 	ldr	r2, [fp, #-8]
  11daf0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11daf4:	e5933000 	ldr	r3, [r3]
  11daf8:	e50b3010 	str	r3, [fp, #-16]
  11dafc:	ea000027 	b	11dba0 <tcp_bind+0x1a0>
        if (cpcb->local_port == port) {
  11db00:	e51b3010 	ldr	r3, [fp, #-16]
  11db04:	e1d331ba 	ldrh	r3, [r3, #26]
  11db08:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11db0c:	e1520003 	cmp	r2, r3
  11db10:	1a00001f 	bne	11db94 <tcp_bind+0x194>
#if SO_REUSE
          /* Omit checking for the same port if both pcbs have REUSEADDR set.
             For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
             tcp_connect. */
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11db14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db18:	e5d33008 	ldrb	r3, [r3, #8]
  11db1c:	e2033004 	and	r3, r3, #4
  11db20:	e3530000 	cmp	r3, #0
  11db24:	0a000004 	beq	11db3c <tcp_bind+0x13c>
              !ip_get_option(cpcb, SOF_REUSEADDR))
  11db28:	e51b3010 	ldr	r3, [fp, #-16]
  11db2c:	e5d33008 	ldrb	r3, [r3, #8]
  11db30:	e2033004 	and	r3, r3, #4
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11db34:	e3530000 	cmp	r3, #0
  11db38:	1a000015 	bne	11db94 <tcp_bind+0x194>
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
  11db3c:	e51b3010 	ldr	r3, [fp, #-16]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11db40:	e3530000 	cmp	r3, #0
  11db44:	0a000010 	beq	11db8c <tcp_bind+0x18c>
                (ip_addr_isany(&cpcb->local_ip) ||
  11db48:	e51b3010 	ldr	r3, [fp, #-16]
  11db4c:	e5933000 	ldr	r3, [r3]
  11db50:	e3530000 	cmp	r3, #0
  11db54:	0a00000c 	beq	11db8c <tcp_bind+0x18c>
  11db58:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11db5c:	e3530000 	cmp	r3, #0
  11db60:	0a000009 	beq	11db8c <tcp_bind+0x18c>
                ip_addr_isany(ipaddr) ||
  11db64:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11db68:	e5933000 	ldr	r3, [r3]
  11db6c:	e3530000 	cmp	r3, #0
  11db70:	0a000005 	beq	11db8c <tcp_bind+0x18c>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
  11db74:	e51b3010 	ldr	r3, [fp, #-16]
  11db78:	e5932000 	ldr	r2, [r3]
  11db7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11db80:	e5933000 	ldr	r3, [r3]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11db84:	e1520003 	cmp	r2, r3
  11db88:	1a000001 	bne	11db94 <tcp_bind+0x194>
              return ERR_USE;
  11db8c:	e3e03007 	mvn	r3, #7
  11db90:	ea00002a 	b	11dc40 <tcp_bind+0x240>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11db94:	e51b3010 	ldr	r3, [fp, #-16]
  11db98:	e593300c 	ldr	r3, [r3, #12]
  11db9c:	e50b3010 	str	r3, [fp, #-16]
  11dba0:	e51b3010 	ldr	r3, [fp, #-16]
  11dba4:	e3530000 	cmp	r3, #0
  11dba8:	1affffd4 	bne	11db00 <tcp_bind+0x100>
    for (i = 0; i < max_pcb_list; i++) {
  11dbac:	e51b3008 	ldr	r3, [fp, #-8]
  11dbb0:	e2833001 	add	r3, r3, #1
  11dbb4:	e50b3008 	str	r3, [fp, #-8]
  11dbb8:	e51b2008 	ldr	r2, [fp, #-8]
  11dbbc:	e51b300c 	ldr	r3, [fp, #-12]
  11dbc0:	e1520003 	cmp	r2, r3
  11dbc4:	baffffc6 	blt	11dae4 <tcp_bind+0xe4>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
  11dbc8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dbcc:	e3530000 	cmp	r3, #0
  11dbd0:	0a00000c 	beq	11dc08 <tcp_bind+0x208>
  11dbd4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dbd8:	e5933000 	ldr	r3, [r3]
  11dbdc:	e3530000 	cmp	r3, #0
  11dbe0:	0a000008 	beq	11dc08 <tcp_bind+0x208>
    ip_addr_set(&pcb->local_ip, ipaddr);
  11dbe4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dbe8:	e3530000 	cmp	r3, #0
  11dbec:	0a000002 	beq	11dbfc <tcp_bind+0x1fc>
  11dbf0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dbf4:	e5933000 	ldr	r3, [r3]
  11dbf8:	ea000000 	b	11dc00 <tcp_bind+0x200>
  11dbfc:	e3a03000 	mov	r3, #0
  11dc00:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11dc04:	e5823000 	str	r3, [r2]
  }
  pcb->local_port = port;
  11dc08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dc0c:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11dc10:	e1c321ba 	strh	r2, [r3, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
  11dc14:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11dc18:	e3403015 	movt	r3, #21
  11dc1c:	e5932000 	ldr	r2, [r3]
  11dc20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dc24:	e583200c 	str	r2, [r3, #12]
  11dc28:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11dc2c:	e3403015 	movt	r3, #21
  11dc30:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11dc34:	e5832000 	str	r2, [r3]
  11dc38:	eb002572 	bl	127208 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
  11dc3c:	e3a03000 	mov	r3, #0
}
  11dc40:	e1a00003 	mov	r0, r3
  11dc44:	e24bd004 	sub	sp, fp, #4
  11dc48:	e8bd8800 	pop	{fp, pc}

0011dc4c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
  11dc4c:	e92d4800 	push	{fp, lr}
  11dc50:	e28db004 	add	fp, sp, #4
  11dc54:	e24dd010 	sub	sp, sp, #16
  11dc58:	e50b0008 	str	r0, [fp, #-8]
  11dc5c:	e50b100c 	str	r1, [fp, #-12]
  11dc60:	e1a03002 	mov	r3, r2
  11dc64:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
  11dc68:	e51b000c 	ldr	r0, [fp, #-12]
  11dc6c:	ebffff59 	bl	11d9d8 <tcp_abort>

  return ERR_ABRT;
  11dc70:	e3e0300c 	mvn	r3, #12
}
  11dc74:	e1a00003 	mov	r0, r3
  11dc78:	e24bd004 	sub	sp, fp, #4
  11dc7c:	e8bd8800 	pop	{fp, pc}

0011dc80 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
  11dc80:	e92d4800 	push	{fp, lr}
  11dc84:	e28db004 	add	fp, sp, #4
  11dc88:	e24dd008 	sub	sp, sp, #8
  11dc8c:	e50b0008 	str	r0, [fp, #-8]
  11dc90:	e1a03001 	mov	r3, r1
  11dc94:	e54b3009 	strb	r3, [fp, #-9]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
  11dc98:	e55b3009 	ldrb	r3, [fp, #-9]
  11dc9c:	e3a02000 	mov	r2, #0
  11dca0:	e1a01003 	mov	r1, r3
  11dca4:	e51b0008 	ldr	r0, [fp, #-8]
  11dca8:	eb000003 	bl	11dcbc <tcp_listen_with_backlog_and_err>
  11dcac:	e1a03000 	mov	r3, r0
}
  11dcb0:	e1a00003 	mov	r0, r3
  11dcb4:	e24bd004 	sub	sp, fp, #4
  11dcb8:	e8bd8800 	pop	{fp, pc}

0011dcbc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
  11dcbc:	e92d4800 	push	{fp, lr}
  11dcc0:	e28db004 	add	fp, sp, #4
  11dcc4:	e24dd020 	sub	sp, sp, #32
  11dcc8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11dccc:	e1a03001 	mov	r3, r1
  11dcd0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11dcd4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct tcp_pcb_listen *lpcb = NULL;
  11dcd8:	e3a03000 	mov	r3, #0
  11dcdc:	e50b3008 	str	r3, [fp, #-8]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
  11dce0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dce4:	e5933014 	ldr	r3, [r3, #20]
  11dce8:	e3530000 	cmp	r3, #0
  11dcec:	0a000009 	beq	11dd18 <tcp_listen_with_backlog_and_err+0x5c>
  11dcf0:	e3070f5c 	movw	r0, #32604	; 0x7f5c
  11dcf4:	e3400014 	movt	r0, #20
  11dcf8:	ebff9505 	bl	103114 <rt_kprintf>
  11dcfc:	e30012af 	movw	r1, #687	; 0x2af
  11dd00:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11dd04:	e3400014 	movt	r0, #20
  11dd08:	ebffb4e9 	bl	10b0b4 <sys_arch_assert>
  11dd0c:	e3e0300e 	mvn	r3, #14
  11dd10:	e54b3009 	strb	r3, [fp, #-9]
  11dd14:	ea000091 	b	11df60 <tcp_listen_with_backlog_and_err+0x2a4>

  /* already listening? */
  if (pcb->state == LISTEN) {
  11dd18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd1c:	e5933014 	ldr	r3, [r3, #20]
  11dd20:	e3530001 	cmp	r3, #1
  11dd24:	1a000004 	bne	11dd3c <tcp_listen_with_backlog_and_err+0x80>
    lpcb = (struct tcp_pcb_listen*)pcb;
  11dd28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd2c:	e50b3008 	str	r3, [fp, #-8]
    res = ERR_ALREADY;
  11dd30:	e3e03008 	mvn	r3, #8
  11dd34:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11dd38:	ea000088 	b	11df60 <tcp_listen_with_backlog_and_err+0x2a4>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11dd3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd40:	e5d33008 	ldrb	r3, [r3, #8]
  11dd44:	e2033004 	and	r3, r3, #4
  11dd48:	e3530000 	cmp	r3, #0
  11dd4c:	0a00001b 	beq	11ddc0 <tcp_listen_with_backlog_and_err+0x104>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11dd50:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11dd54:	e3403015 	movt	r3, #21
  11dd58:	e5933000 	ldr	r3, [r3]
  11dd5c:	e50b3008 	str	r3, [fp, #-8]
  11dd60:	ea000013 	b	11ddb4 <tcp_listen_with_backlog_and_err+0xf8>
      if ((lpcb->local_port == pcb->local_port) &&
  11dd64:	e51b3008 	ldr	r3, [fp, #-8]
  11dd68:	e1d321ba 	ldrh	r2, [r3, #26]
  11dd6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd70:	e1d331ba 	ldrh	r3, [r3, #26]
  11dd74:	e1520003 	cmp	r2, r3
  11dd78:	1a00000a 	bne	11dda8 <tcp_listen_with_backlog_and_err+0xec>
          ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
  11dd7c:	e51b3008 	ldr	r3, [fp, #-8]
  11dd80:	e5932000 	ldr	r2, [r3]
  11dd84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd88:	e5933000 	ldr	r3, [r3]
      if ((lpcb->local_port == pcb->local_port) &&
  11dd8c:	e1520003 	cmp	r2, r3
  11dd90:	1a000004 	bne	11dda8 <tcp_listen_with_backlog_and_err+0xec>
        /* this address/port is already used */
        lpcb = NULL;
  11dd94:	e3a03000 	mov	r3, #0
  11dd98:	e50b3008 	str	r3, [fp, #-8]
        res = ERR_USE;
  11dd9c:	e3e03007 	mvn	r3, #7
  11dda0:	e54b3009 	strb	r3, [fp, #-9]
        goto done;
  11dda4:	ea00006d 	b	11df60 <tcp_listen_with_backlog_and_err+0x2a4>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11dda8:	e51b3008 	ldr	r3, [fp, #-8]
  11ddac:	e593300c 	ldr	r3, [r3, #12]
  11ddb0:	e50b3008 	str	r3, [fp, #-8]
  11ddb4:	e51b3008 	ldr	r3, [fp, #-8]
  11ddb8:	e3530000 	cmp	r3, #0
  11ddbc:	1affffe8 	bne	11dd64 <tcp_listen_with_backlog_and_err+0xa8>
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
  11ddc0:	e30022c7 	movw	r2, #711	; 0x2c7
  11ddc4:	e3071ea0 	movw	r1, #32416	; 0x7ea0
  11ddc8:	e3401014 	movt	r1, #20
  11ddcc:	e3a00003 	mov	r0, #3
  11ddd0:	ebffecb1 	bl	11909c <memp_malloc_fn>
  11ddd4:	e50b0008 	str	r0, [fp, #-8]
  if (lpcb == NULL) {
  11ddd8:	e51b3008 	ldr	r3, [fp, #-8]
  11dddc:	e3530000 	cmp	r3, #0
  11dde0:	1a000002 	bne	11ddf0 <tcp_listen_with_backlog_and_err+0x134>
    res = ERR_MEM;
  11dde4:	e3e03000 	mvn	r3, #0
  11dde8:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11ddec:	ea00005b 	b	11df60 <tcp_listen_with_backlog_and_err+0x2a4>
  }
  lpcb->callback_arg = pcb->callback_arg;
  11ddf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ddf4:	e5932010 	ldr	r2, [r3, #16]
  11ddf8:	e51b3008 	ldr	r3, [fp, #-8]
  11ddfc:	e5832010 	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
  11de00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de04:	e1d321ba 	ldrh	r2, [r3, #26]
  11de08:	e51b3008 	ldr	r3, [fp, #-8]
  11de0c:	e1c321ba 	strh	r2, [r3, #26]
  lpcb->state = LISTEN;
  11de10:	e51b3008 	ldr	r3, [fp, #-8]
  11de14:	e3a02001 	mov	r2, #1
  11de18:	e5832014 	str	r2, [r3, #20]
  lpcb->prio = pcb->prio;
  11de1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de20:	e5d32018 	ldrb	r2, [r3, #24]
  11de24:	e51b3008 	ldr	r3, [fp, #-8]
  11de28:	e5c32018 	strb	r2, [r3, #24]
  lpcb->so_options = pcb->so_options;
  11de2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de30:	e5d32008 	ldrb	r2, [r3, #8]
  11de34:	e51b3008 	ldr	r3, [fp, #-8]
  11de38:	e5c32008 	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
  11de3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de40:	e5d3200a 	ldrb	r2, [r3, #10]
  11de44:	e51b3008 	ldr	r3, [fp, #-8]
  11de48:	e5c3200a 	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
  11de4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de50:	e5d32009 	ldrb	r2, [r3, #9]
  11de54:	e51b3008 	ldr	r3, [fp, #-8]
  11de58:	e5c32009 	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
  11de5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de60:	e5932000 	ldr	r2, [r3]
  11de64:	e51b3008 	ldr	r3, [fp, #-8]
  11de68:	e5832000 	str	r2, [r3]
  if (pcb->local_port != 0) {
  11de6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de70:	e1d331ba 	ldrh	r3, [r3, #26]
  11de74:	e3530000 	cmp	r3, #0
  11de78:	0a000025 	beq	11df14 <tcp_listen_with_backlog_and_err+0x258>
    TCP_RMV(&tcp_bound_pcbs, pcb);
  11de7c:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11de80:	e3403015 	movt	r3, #21
  11de84:	e5933000 	ldr	r3, [r3]
  11de88:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11de8c:	e1520003 	cmp	r2, r3
  11de90:	1a000007 	bne	11deb4 <tcp_listen_with_backlog_and_err+0x1f8>
  11de94:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11de98:	e3403015 	movt	r3, #21
  11de9c:	e5933000 	ldr	r3, [r3]
  11dea0:	e593200c 	ldr	r2, [r3, #12]
  11dea4:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11dea8:	e3403015 	movt	r3, #21
  11deac:	e5832000 	str	r2, [r3]
  11deb0:	ea000014 	b	11df08 <tcp_listen_with_backlog_and_err+0x24c>
  11deb4:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11deb8:	e3403015 	movt	r3, #21
  11debc:	e5933000 	ldr	r3, [r3]
  11dec0:	e50b3010 	str	r3, [fp, #-16]
  11dec4:	ea00000c 	b	11defc <tcp_listen_with_backlog_and_err+0x240>
  11dec8:	e51b3010 	ldr	r3, [fp, #-16]
  11decc:	e593300c 	ldr	r3, [r3, #12]
  11ded0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11ded4:	e1520003 	cmp	r2, r3
  11ded8:	1a000004 	bne	11def0 <tcp_listen_with_backlog_and_err+0x234>
  11dedc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dee0:	e593200c 	ldr	r2, [r3, #12]
  11dee4:	e51b3010 	ldr	r3, [fp, #-16]
  11dee8:	e583200c 	str	r2, [r3, #12]
  11deec:	ea000005 	b	11df08 <tcp_listen_with_backlog_and_err+0x24c>
  11def0:	e51b3010 	ldr	r3, [fp, #-16]
  11def4:	e593300c 	ldr	r3, [r3, #12]
  11def8:	e50b3010 	str	r3, [fp, #-16]
  11defc:	e51b3010 	ldr	r3, [fp, #-16]
  11df00:	e3530000 	cmp	r3, #0
  11df04:	1affffef 	bne	11dec8 <tcp_listen_with_backlog_and_err+0x20c>
  11df08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11df0c:	e3a02000 	mov	r2, #0
  11df10:	e583200c 	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
  11df14:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11df18:	e3a00002 	mov	r0, #2
  11df1c:	ebffecc6 	bl	11923c <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
  11df20:	e51b2008 	ldr	r2, [fp, #-8]
  11df24:	e30d3c4c 	movw	r3, #56396	; 0xdc4c
  11df28:	e3403011 	movt	r3, #17
  11df2c:	e582301c 	str	r3, [r2, #28]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
  11df30:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11df34:	e3403015 	movt	r3, #21
  11df38:	e5932000 	ldr	r2, [r3]
  11df3c:	e51b3008 	ldr	r3, [fp, #-8]
  11df40:	e583200c 	str	r2, [r3, #12]
  11df44:	e30c3c40 	movw	r3, #52288	; 0xcc40
  11df48:	e3403015 	movt	r3, #21
  11df4c:	e51b2008 	ldr	r2, [fp, #-8]
  11df50:	e5832000 	str	r2, [r3]
  11df54:	eb0024ab 	bl	127208 <tcp_timer_needed>
  res = ERR_OK;
  11df58:	e3a03000 	mov	r3, #0
  11df5c:	e54b3009 	strb	r3, [fp, #-9]
done:
  if (err != NULL) {
  11df60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11df64:	e3530000 	cmp	r3, #0
  11df68:	0a000002 	beq	11df78 <tcp_listen_with_backlog_and_err+0x2bc>
    *err = res;
  11df6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11df70:	e55b2009 	ldrb	r2, [fp, #-9]
  11df74:	e5c32000 	strb	r2, [r3]
  }
  return (struct tcp_pcb *)lpcb;
  11df78:	e51b3008 	ldr	r3, [fp, #-8]
}
  11df7c:	e1a00003 	mov	r0, r3
  11df80:	e24bd004 	sub	sp, fp, #4
  11df84:	e8bd8800 	pop	{fp, pc}

0011df88 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
  11df88:	e92d4800 	push	{fp, lr}
  11df8c:	e28db004 	add	fp, sp, #4
  11df90:	e24dd010 	sub	sp, sp, #16
  11df94:	e50b0010 	str	r0, [fp, #-16]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  11df98:	e51b3010 	ldr	r3, [fp, #-16]
  11df9c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11dfa0:	e51b2010 	ldr	r2, [fp, #-16]
  11dfa4:	e1d222bc 	ldrh	r2, [r2, #44]	; 0x2c
  11dfa8:	e0833002 	add	r3, r3, r2
  11dfac:	e50b3008 	str	r3, [fp, #-8]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  11dfb0:	e51b3010 	ldr	r3, [fp, #-16]
  11dfb4:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  11dfb8:	e51b3010 	ldr	r3, [fp, #-16]
  11dfbc:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11dfc0:	e3530a01 	cmp	r3, #4096	; 0x1000
  11dfc4:	31a03003 	movcc	r3, r3
  11dfc8:	23a03a01 	movcs	r3, #4096	; 0x1000
  11dfcc:	e6ff3073 	uxth	r3, r3
  11dfd0:	e0823003 	add	r3, r2, r3
  11dfd4:	e51b2008 	ldr	r2, [fp, #-8]
  11dfd8:	e0423003 	sub	r3, r2, r3
  11dfdc:	e3530000 	cmp	r3, #0
  11dfe0:	ba000008 	blt	11e008 <tcp_update_rcv_ann_wnd+0x80>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  11dfe4:	e51b3010 	ldr	r3, [fp, #-16]
  11dfe8:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11dfec:	e51b3010 	ldr	r3, [fp, #-16]
  11dff0:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
  11dff4:	e51b3010 	ldr	r3, [fp, #-16]
  11dff8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11dffc:	e51b2008 	ldr	r2, [fp, #-8]
  11e000:	e0423003 	sub	r3, r2, r3
  11e004:	ea00001f 	b	11e088 <tcp_update_rcv_ann_wnd+0x100>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  11e008:	e51b3010 	ldr	r3, [fp, #-16]
  11e00c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11e010:	e51b3010 	ldr	r3, [fp, #-16]
  11e014:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11e018:	e0423003 	sub	r3, r2, r3
  11e01c:	e3530000 	cmp	r3, #0
  11e020:	da000003 	ble	11e034 <tcp_update_rcv_ann_wnd+0xac>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
  11e024:	e51b3010 	ldr	r3, [fp, #-16]
  11e028:	e3a02000 	mov	r2, #0
  11e02c:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11e030:	ea000013 	b	11e084 <tcp_update_rcv_ann_wnd+0xfc>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
  11e034:	e51b3010 	ldr	r3, [fp, #-16]
  11e038:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  11e03c:	e51b3010 	ldr	r3, [fp, #-16]
  11e040:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11e044:	e0423003 	sub	r3, r2, r3
  11e048:	e50b300c 	str	r3, [fp, #-12]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
  11e04c:	e51b300c 	ldr	r3, [fp, #-12]
  11e050:	e3530801 	cmp	r3, #65536	; 0x10000
  11e054:	3a000006 	bcc	11e074 <tcp_update_rcv_ann_wnd+0xec>
  11e058:	e3070f80 	movw	r0, #32640	; 0x7f80
  11e05c:	e3400014 	movt	r0, #20
  11e060:	ebff942b 	bl	103114 <rt_kprintf>
  11e064:	e3001303 	movw	r1, #771	; 0x303
  11e068:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11e06c:	e3400014 	movt	r0, #20
  11e070:	ebffb40f 	bl	10b0b4 <sys_arch_assert>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
  11e074:	e51b300c 	ldr	r3, [fp, #-12]
  11e078:	e6ff2073 	uxth	r2, r3
  11e07c:	e51b3010 	ldr	r3, [fp, #-16]
  11e080:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    }
    return 0;
  11e084:	e3a03000 	mov	r3, #0
  }
}
  11e088:	e1a00003 	mov	r0, r3
  11e08c:	e24bd004 	sub	sp, fp, #4
  11e090:	e8bd8800 	pop	{fp, pc}

0011e094 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
  11e094:	e92d4800 	push	{fp, lr}
  11e098:	e28db004 	add	fp, sp, #4
  11e09c:	e24dd010 	sub	sp, sp, #16
  11e0a0:	e50b0010 	str	r0, [fp, #-16]
  11e0a4:	e1a03001 	mov	r3, r1
  11e0a8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
  11e0ac:	e51b3010 	ldr	r3, [fp, #-16]
  11e0b0:	e5933014 	ldr	r3, [r3, #20]
  11e0b4:	e3530001 	cmp	r3, #1
  11e0b8:	1a000006 	bne	11e0d8 <tcp_recved+0x44>
  11e0bc:	e3070f9c 	movw	r0, #32668	; 0x7f9c
  11e0c0:	e3400014 	movt	r0, #20
  11e0c4:	ebff9412 	bl	103114 <rt_kprintf>
  11e0c8:	e300131b 	movw	r1, #795	; 0x31b
  11e0cc:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11e0d0:	e3400014 	movt	r0, #20
  11e0d4:	ebffb3f6 	bl	10b0b4 <sys_arch_assert>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
  11e0d8:	e51b3010 	ldr	r3, [fp, #-16]
  11e0dc:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11e0e0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11e0e4:	e0823003 	add	r3, r2, r3
  11e0e8:	e6ff2073 	uxth	r2, r3
  11e0ec:	e51b3010 	ldr	r3, [fp, #-16]
  11e0f0:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
  11e0f4:	e51b3010 	ldr	r3, [fp, #-16]
  11e0f8:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11e0fc:	e3530a02 	cmp	r3, #8192	; 0x2000
  11e100:	9a000003 	bls	11e114 <tcp_recved+0x80>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
  11e104:	e51b3010 	ldr	r3, [fp, #-16]
  11e108:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e10c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  11e110:	ea000016 	b	11e170 <tcp_recved+0xdc>
  } else if (pcb->rcv_wnd == 0) {
  11e114:	e51b3010 	ldr	r3, [fp, #-16]
  11e118:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11e11c:	e3530000 	cmp	r3, #0
  11e120:	1a000012 	bne	11e170 <tcp_recved+0xdc>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
  11e124:	e51b3010 	ldr	r3, [fp, #-16]
  11e128:	e5933014 	ldr	r3, [r3, #20]
  11e12c:	e3530007 	cmp	r3, #7
  11e130:	0a000003 	beq	11e144 <tcp_recved+0xb0>
  11e134:	e51b3010 	ldr	r3, [fp, #-16]
  11e138:	e5933014 	ldr	r3, [r3, #20]
  11e13c:	e3530009 	cmp	r3, #9
  11e140:	1a000003 	bne	11e154 <tcp_recved+0xc0>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
  11e144:	e51b3010 	ldr	r3, [fp, #-16]
  11e148:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e14c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  11e150:	ea000006 	b	11e170 <tcp_recved+0xdc>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
  11e154:	e3070fc4 	movw	r0, #32708	; 0x7fc4
  11e158:	e3400014 	movt	r0, #20
  11e15c:	ebff93ec 	bl	103114 <rt_kprintf>
  11e160:	e3a01fca 	mov	r1, #808	; 0x328
  11e164:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11e168:	e3400014 	movt	r0, #20
  11e16c:	ebffb3d0 	bl	10b0b4 <sys_arch_assert>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  11e170:	e51b0010 	ldr	r0, [fp, #-16]
  11e174:	ebffff83 	bl	11df88 <tcp_update_rcv_ann_wnd>
  11e178:	e1a03000 	mov	r3, r0
  11e17c:	e50b3008 	str	r3, [fp, #-8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  11e180:	e51b3008 	ldr	r3, [fp, #-8]
  11e184:	e3530b02 	cmp	r3, #2048	; 0x800
  11e188:	ba000007 	blt	11e1ac <tcp_recved+0x118>
    tcp_ack_now(pcb);
  11e18c:	e51b3010 	ldr	r3, [fp, #-16]
  11e190:	e5d3301e 	ldrb	r3, [r3, #30]
  11e194:	e3833002 	orr	r3, r3, #2
  11e198:	e6ef2073 	uxtb	r2, r3
  11e19c:	e51b3010 	ldr	r3, [fp, #-16]
  11e1a0:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  11e1a4:	e51b0010 	ldr	r0, [fp, #-16]
  11e1a8:	eb001f5c 	bl	125f20 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
  11e1ac:	e320f000 	nop	{0}
  11e1b0:	e24bd004 	sub	sp, fp, #4
  11e1b4:	e8bd8800 	pop	{fp, pc}

0011e1b8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  11e1b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11e1bc:	e28db000 	add	fp, sp, #0
  11e1c0:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u16_t n = 0;
  11e1c4:	e3a03000 	mov	r3, #0
  11e1c8:	e14b30b8 	strh	r3, [fp, #-8]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  11e1cc:	e30d3030 	movw	r3, #53296	; 0xd030
  11e1d0:	e3403014 	movt	r3, #20
  11e1d4:	e1d320b0 	ldrh	r2, [r3]
  11e1d8:	e2823001 	add	r3, r2, #1
  11e1dc:	e6ff1073 	uxth	r1, r3
  11e1e0:	e30d3030 	movw	r3, #53296	; 0xd030
  11e1e4:	e3403014 	movt	r3, #20
  11e1e8:	e1c310b0 	strh	r1, [r3]
  11e1ec:	e30f3fff 	movw	r3, #65535	; 0xffff
  11e1f0:	e1520003 	cmp	r2, r3
  11e1f4:	1a000003 	bne	11e208 <tcp_new_port+0x50>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  11e1f8:	e30d3030 	movw	r3, #53296	; 0xd030
  11e1fc:	e3403014 	movt	r3, #20
  11e200:	e3a02903 	mov	r2, #49152	; 0xc000
  11e204:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11e208:	e3a03000 	mov	r3, #0
  11e20c:	e54b3005 	strb	r3, [fp, #-5]
  11e210:	ea00001e 	b	11e290 <tcp_new_port+0xd8>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11e214:	e55b2005 	ldrb	r2, [fp, #-5]
  11e218:	e3073e84 	movw	r3, #32388	; 0x7e84
  11e21c:	e3403014 	movt	r3, #20
  11e220:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11e224:	e5933000 	ldr	r3, [r3]
  11e228:	e50b300c 	str	r3, [fp, #-12]
  11e22c:	ea000011 	b	11e278 <tcp_new_port+0xc0>
      if (pcb->local_port == tcp_port) {
  11e230:	e51b300c 	ldr	r3, [fp, #-12]
  11e234:	e1d321ba 	ldrh	r2, [r3, #26]
  11e238:	e30d3030 	movw	r3, #53296	; 0xd030
  11e23c:	e3403014 	movt	r3, #20
  11e240:	e1d330b0 	ldrh	r3, [r3]
  11e244:	e1520003 	cmp	r2, r3
  11e248:	1a000007 	bne	11e26c <tcp_new_port+0xb4>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
  11e24c:	e15b30b8 	ldrh	r3, [fp, #-8]
  11e250:	e2833001 	add	r3, r3, #1
  11e254:	e14b30b8 	strh	r3, [fp, #-8]
  11e258:	e15b30b8 	ldrh	r3, [fp, #-8]
  11e25c:	e3530901 	cmp	r3, #16384	; 0x4000
  11e260:	3affffd9 	bcc	11e1cc <tcp_new_port+0x14>
          return 0;
  11e264:	e3a03000 	mov	r3, #0
  11e268:	ea00000e 	b	11e2a8 <tcp_new_port+0xf0>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11e26c:	e51b300c 	ldr	r3, [fp, #-12]
  11e270:	e593300c 	ldr	r3, [r3, #12]
  11e274:	e50b300c 	str	r3, [fp, #-12]
  11e278:	e51b300c 	ldr	r3, [fp, #-12]
  11e27c:	e3530000 	cmp	r3, #0
  11e280:	1affffea 	bne	11e230 <tcp_new_port+0x78>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11e284:	e55b3005 	ldrb	r3, [fp, #-5]
  11e288:	e2833001 	add	r3, r3, #1
  11e28c:	e54b3005 	strb	r3, [fp, #-5]
  11e290:	e55b3005 	ldrb	r3, [fp, #-5]
  11e294:	e3530003 	cmp	r3, #3
  11e298:	9affffdd 	bls	11e214 <tcp_new_port+0x5c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
  11e29c:	e30d3030 	movw	r3, #53296	; 0xd030
  11e2a0:	e3403014 	movt	r3, #20
  11e2a4:	e1d330b0 	ldrh	r3, [r3]
}
  11e2a8:	e1a00003 	mov	r0, r3
  11e2ac:	e28bd000 	add	sp, fp, #0
  11e2b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11e2b4:	e12fff1e 	bx	lr

0011e2b8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
  11e2b8:	e92d4800 	push	{fp, lr}
  11e2bc:	e28db004 	add	fp, sp, #4
  11e2c0:	e24dd030 	sub	sp, sp, #48	; 0x30
  11e2c4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11e2c8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  11e2cc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  11e2d0:	e1a03002 	mov	r3, r2
  11e2d4:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  11e2d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e2dc:	e3530000 	cmp	r3, #0
  11e2e0:	0a000002 	beq	11e2f0 <tcp_connect+0x38>
  11e2e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e2e8:	e3530000 	cmp	r3, #0
  11e2ec:	1a000001 	bne	11e2f8 <tcp_connect+0x40>
    return ERR_VAL;
  11e2f0:	e3e03005 	mvn	r3, #5
  11e2f4:	ea000101 	b	11e700 <tcp_connect+0x448>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
  11e2f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e2fc:	e5933014 	ldr	r3, [r3, #20]
  11e300:	e3530000 	cmp	r3, #0
  11e304:	0a000008 	beq	11e32c <tcp_connect+0x74>
  11e308:	e3070fe8 	movw	r0, #32744	; 0x7fe8
  11e30c:	e3400014 	movt	r0, #20
  11e310:	ebff937f 	bl	103114 <rt_kprintf>
  11e314:	e3001373 	movw	r1, #883	; 0x373
  11e318:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11e31c:	e3400014 	movt	r0, #20
  11e320:	ebffb363 	bl	10b0b4 <sys_arch_assert>
  11e324:	e3e03009 	mvn	r3, #9
  11e328:	ea0000f4 	b	11e700 <tcp_connect+0x448>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
  11e32c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e330:	e3530000 	cmp	r3, #0
  11e334:	0a000002 	beq	11e344 <tcp_connect+0x8c>
  11e338:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e33c:	e5933000 	ldr	r3, [r3]
  11e340:	ea000000 	b	11e348 <tcp_connect+0x90>
  11e344:	e3a03000 	mov	r3, #0
  11e348:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e34c:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  11e350:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e354:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11e358:	e1c321bc 	strh	r2, [r3, #28]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
  11e35c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e360:	e3530000 	cmp	r3, #0
  11e364:	0a000003 	beq	11e378 <tcp_connect+0xc0>
  11e368:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e36c:	e5933000 	ldr	r3, [r3]
  11e370:	e3530000 	cmp	r3, #0
  11e374:	1a000018 	bne	11e3dc <tcp_connect+0x124>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
  11e378:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e37c:	e2833004 	add	r3, r3, #4
  11e380:	e1a00003 	mov	r0, r3
  11e384:	eb004b73 	bl	131158 <ip4_route>
  11e388:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  11e38c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e390:	e3530000 	cmp	r3, #0
  11e394:	0a000002 	beq	11e3a4 <tcp_connect+0xec>
  11e398:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e39c:	e2833004 	add	r3, r3, #4
  11e3a0:	ea000000 	b	11e3a8 <tcp_connect+0xf0>
  11e3a4:	e3a03000 	mov	r3, #0
  11e3a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((netif == NULL) || (local_ip == NULL)) {
  11e3ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e3b0:	e3530000 	cmp	r3, #0
  11e3b4:	0a000002 	beq	11e3c4 <tcp_connect+0x10c>
  11e3b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e3bc:	e3530000 	cmp	r3, #0
  11e3c0:	1a000001 	bne	11e3cc <tcp_connect+0x114>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
  11e3c4:	e3e03003 	mvn	r3, #3
  11e3c8:	ea0000cc 	b	11e700 <tcp_connect+0x448>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
  11e3cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e3d0:	e5932000 	ldr	r2, [r3]
  11e3d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e3d8:	e5832000 	str	r2, [r3]
  }

  old_local_port = pcb->local_port;
  11e3dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e3e0:	e1d331ba 	ldrh	r3, [r3, #26]
  11e3e4:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if (pcb->local_port == 0) {
  11e3e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e3ec:	e1d331ba 	ldrh	r3, [r3, #26]
  11e3f0:	e3530000 	cmp	r3, #0
  11e3f4:	1a00000a 	bne	11e424 <tcp_connect+0x16c>
    pcb->local_port = tcp_new_port();
  11e3f8:	ebffff6e 	bl	11e1b8 <tcp_new_port>
  11e3fc:	e1a03000 	mov	r3, r0
  11e400:	e1a02003 	mov	r2, r3
  11e404:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e408:	e1c321ba 	strh	r2, [r3, #26]
    if (pcb->local_port == 0) {
  11e40c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e410:	e1d331ba 	ldrh	r3, [r3, #26]
  11e414:	e3530000 	cmp	r3, #0
  11e418:	1a000035 	bne	11e4f4 <tcp_connect+0x23c>
      return ERR_BUF;
  11e41c:	e3e03001 	mvn	r3, #1
  11e420:	ea0000b6 	b	11e700 <tcp_connect+0x448>
    }
  } else {
#if SO_REUSE
    if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11e424:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e428:	e5d33008 	ldrb	r3, [r3, #8]
  11e42c:	e2033004 	and	r3, r3, #4
  11e430:	e3530000 	cmp	r3, #0
  11e434:	0a00002e 	beq	11e4f4 <tcp_connect+0x23c>
      /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
         now that the 5-tuple is unique. */
      struct tcp_pcb *cpcb;
      int i;
      /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e438:	e3a03002 	mov	r3, #2
  11e43c:	e50b300c 	str	r3, [fp, #-12]
  11e440:	ea000028 	b	11e4e8 <tcp_connect+0x230>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e444:	e3073e84 	movw	r3, #32388	; 0x7e84
  11e448:	e3403014 	movt	r3, #20
  11e44c:	e51b200c 	ldr	r2, [fp, #-12]
  11e450:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11e454:	e5933000 	ldr	r3, [r3]
  11e458:	e50b3008 	str	r3, [fp, #-8]
  11e45c:	ea00001b 	b	11e4d0 <tcp_connect+0x218>
          if ((cpcb->local_port == pcb->local_port) &&
  11e460:	e51b3008 	ldr	r3, [fp, #-8]
  11e464:	e1d321ba 	ldrh	r2, [r3, #26]
  11e468:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e46c:	e1d331ba 	ldrh	r3, [r3, #26]
  11e470:	e1520003 	cmp	r2, r3
  11e474:	1a000012 	bne	11e4c4 <tcp_connect+0x20c>
              (cpcb->remote_port == port) &&
  11e478:	e51b3008 	ldr	r3, [fp, #-8]
  11e47c:	e1d331bc 	ldrh	r3, [r3, #28]
          if ((cpcb->local_port == pcb->local_port) &&
  11e480:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11e484:	e1520003 	cmp	r2, r3
  11e488:	1a00000d 	bne	11e4c4 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e48c:	e51b3008 	ldr	r3, [fp, #-8]
  11e490:	e5932000 	ldr	r2, [r3]
  11e494:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e498:	e5933000 	ldr	r3, [r3]
              (cpcb->remote_port == port) &&
  11e49c:	e1520003 	cmp	r2, r3
  11e4a0:	1a000007 	bne	11e4c4 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
  11e4a4:	e51b3008 	ldr	r3, [fp, #-8]
  11e4a8:	e5932004 	ldr	r2, [r3, #4]
  11e4ac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e4b0:	e5933000 	ldr	r3, [r3]
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e4b4:	e1520003 	cmp	r2, r3
  11e4b8:	1a000001 	bne	11e4c4 <tcp_connect+0x20c>
            /* linux returns EISCONN here, but ERR_USE should be OK for us */
            return ERR_USE;
  11e4bc:	e3e03007 	mvn	r3, #7
  11e4c0:	ea00008e 	b	11e700 <tcp_connect+0x448>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e4c4:	e51b3008 	ldr	r3, [fp, #-8]
  11e4c8:	e593300c 	ldr	r3, [r3, #12]
  11e4cc:	e50b3008 	str	r3, [fp, #-8]
  11e4d0:	e51b3008 	ldr	r3, [fp, #-8]
  11e4d4:	e3530000 	cmp	r3, #0
  11e4d8:	1affffe0 	bne	11e460 <tcp_connect+0x1a8>
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e4dc:	e51b300c 	ldr	r3, [fp, #-12]
  11e4e0:	e2833001 	add	r3, r3, #1
  11e4e4:	e50b300c 	str	r3, [fp, #-12]
  11e4e8:	e51b300c 	ldr	r3, [fp, #-12]
  11e4ec:	e3530003 	cmp	r3, #3
  11e4f0:	daffffd3 	ble	11e444 <tcp_connect+0x18c>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
  11e4f4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e4f8:	eb0006bc 	bl	11fff0 <tcp_next_iss>
  11e4fc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  pcb->rcv_nxt = 0;
  11e500:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e504:	e3a02000 	mov	r2, #0
  11e508:	e5832028 	str	r2, [r3, #40]	; 0x28
  pcb->snd_nxt = iss;
  11e50c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e510:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11e514:	e5832050 	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
  11e518:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e51c:	e2432001 	sub	r2, r3, #1
  11e520:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e524:	e5832048 	str	r2, [r3, #72]	; 0x48
  pcb->snd_wl2 = iss - 1;
  11e528:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e52c:	e2432001 	sub	r2, r3, #1
  11e530:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e534:	e5832058 	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
  11e538:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e53c:	e2432001 	sub	r2, r3, #1
  11e540:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e544:	e583205c 	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11e548:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e54c:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e550:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11e554:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e558:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11e55c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e560:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  11e564:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e568:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11e56c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e570:	e5832030 	str	r2, [r3, #48]	; 0x30
  pcb->snd_wnd = TCP_WND;
  11e574:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e578:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e57c:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
  11e580:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e584:	e3a02f86 	mov	r2, #536	; 0x218
  11e588:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  11e58c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e590:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11e594:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e598:	e2833004 	add	r3, r3, #4
  11e59c:	e1a01003 	mov	r1, r3
  11e5a0:	e1a00002 	mov	r0, r2
  11e5a4:	eb0006a6 	bl	120044 <tcp_eff_send_mss_impl>
  11e5a8:	e1a03000 	mov	r3, r0
  11e5ac:	e1a02003 	mov	r2, r3
  11e5b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5b4:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
  11e5b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5bc:	e3a02001 	mov	r2, #1
  11e5c0:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
#if LWIP_CALLBACK_API
  pcb->connected = connected;
  11e5c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5c8:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  11e5cc:	e5832088 	str	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
  11e5d0:	e3a01002 	mov	r1, #2
  11e5d4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e5d8:	eb001d01 	bl	1259e4 <tcp_enqueue_flags>
  11e5dc:	e1a03000 	mov	r3, r0
  11e5e0:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  if (ret == ERR_OK) {
  11e5e4:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  11e5e8:	e3530000 	cmp	r3, #0
  11e5ec:	1a000042 	bne	11e6fc <tcp_connect+0x444>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
  11e5f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5f4:	e3a02002 	mov	r2, #2
  11e5f8:	e5832014 	str	r2, [r3, #20]
    if (old_local_port != 0) {
  11e5fc:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11e600:	e3530000 	cmp	r3, #0
  11e604:	0a000025 	beq	11e6a0 <tcp_connect+0x3e8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11e608:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11e60c:	e3403015 	movt	r3, #21
  11e610:	e5933000 	ldr	r3, [r3]
  11e614:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e618:	e1520003 	cmp	r2, r3
  11e61c:	1a000007 	bne	11e640 <tcp_connect+0x388>
  11e620:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11e624:	e3403015 	movt	r3, #21
  11e628:	e5933000 	ldr	r3, [r3]
  11e62c:	e593200c 	ldr	r2, [r3, #12]
  11e630:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11e634:	e3403015 	movt	r3, #21
  11e638:	e5832000 	str	r2, [r3]
  11e63c:	ea000014 	b	11e694 <tcp_connect+0x3dc>
  11e640:	e30c3c44 	movw	r3, #52292	; 0xcc44
  11e644:	e3403015 	movt	r3, #21
  11e648:	e5933000 	ldr	r3, [r3]
  11e64c:	e50b3010 	str	r3, [fp, #-16]
  11e650:	ea00000c 	b	11e688 <tcp_connect+0x3d0>
  11e654:	e51b3010 	ldr	r3, [fp, #-16]
  11e658:	e593300c 	ldr	r3, [r3, #12]
  11e65c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e660:	e1520003 	cmp	r2, r3
  11e664:	1a000004 	bne	11e67c <tcp_connect+0x3c4>
  11e668:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e66c:	e593200c 	ldr	r2, [r3, #12]
  11e670:	e51b3010 	ldr	r3, [fp, #-16]
  11e674:	e583200c 	str	r2, [r3, #12]
  11e678:	ea000005 	b	11e694 <tcp_connect+0x3dc>
  11e67c:	e51b3010 	ldr	r3, [fp, #-16]
  11e680:	e593300c 	ldr	r3, [r3, #12]
  11e684:	e50b3010 	str	r3, [fp, #-16]
  11e688:	e51b3010 	ldr	r3, [fp, #-16]
  11e68c:	e3530000 	cmp	r3, #0
  11e690:	1affffef 	bne	11e654 <tcp_connect+0x39c>
  11e694:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e698:	e3a02000 	mov	r2, #0
  11e69c:	e583200c 	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
  11e6a0:	e30c3c38 	movw	r3, #52280	; 0xcc38
  11e6a4:	e3403015 	movt	r3, #21
  11e6a8:	e5932000 	ldr	r2, [r3]
  11e6ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e6b0:	e583200c 	str	r2, [r3, #12]
  11e6b4:	e30c3c38 	movw	r3, #52280	; 0xcc38
  11e6b8:	e3403015 	movt	r3, #21
  11e6bc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e6c0:	e5832000 	str	r2, [r3]
  11e6c4:	eb0022cf 	bl	127208 <tcp_timer_needed>
  11e6c8:	e30c3c34 	movw	r3, #52276	; 0xcc34
  11e6cc:	e3403015 	movt	r3, #21
  11e6d0:	e3a02001 	mov	r2, #1
  11e6d4:	e5c32000 	strb	r2, [r3]
    MIB2_STATS_INC(mib2.tcpactiveopens);
  11e6d8:	e30c3a48 	movw	r3, #51784	; 0xca48
  11e6dc:	e3403015 	movt	r3, #21
  11e6e0:	e593316c 	ldr	r3, [r3, #364]	; 0x16c
  11e6e4:	e2832001 	add	r2, r3, #1
  11e6e8:	e30c3a48 	movw	r3, #51784	; 0xca48
  11e6ec:	e3403015 	movt	r3, #21
  11e6f0:	e583216c 	str	r2, [r3, #364]	; 0x16c

    tcp_output(pcb);
  11e6f4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e6f8:	eb001e08 	bl	125f20 <tcp_output>
  }
  return ret;
  11e6fc:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
}
  11e700:	e1a00003 	mov	r0, r3
  11e704:	e24bd004 	sub	sp, fp, #4
  11e708:	e8bd8800 	pop	{fp, pc}

0011e70c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
  11e70c:	e92d4800 	push	{fp, lr}
  11e710:	e28db004 	add	fp, sp, #4
  11e714:	e24dd030 	sub	sp, sp, #48	; 0x30
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
  11e718:	e3a03000 	mov	r3, #0
  11e71c:	e54b300f 	strb	r3, [fp, #-15]

  ++tcp_ticks;
  11e720:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11e724:	e3403015 	movt	r3, #21
  11e728:	e5933000 	ldr	r3, [r3]
  11e72c:	e2832001 	add	r2, r3, #1
  11e730:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11e734:	e3403015 	movt	r3, #21
  11e738:	e5832000 	str	r2, [r3]
  ++tcp_timer_ctr;
  11e73c:	e30e3241 	movw	r3, #57921	; 0xe241
  11e740:	e3403014 	movt	r3, #20
  11e744:	e5d33000 	ldrb	r3, [r3]
  11e748:	e2833001 	add	r3, r3, #1
  11e74c:	e6ef2073 	uxtb	r2, r3
  11e750:	e30e3241 	movw	r3, #57921	; 0xe241
  11e754:	e3403014 	movt	r3, #20
  11e758:	e5c32000 	strb	r2, [r3]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
  11e75c:	e3a03000 	mov	r3, #0
  11e760:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_active_pcbs;
  11e764:	e30c3c38 	movw	r3, #52280	; 0xcc38
  11e768:	e3403015 	movt	r3, #21
  11e76c:	e5933000 	ldr	r3, [r3]
  11e770:	e50b3008 	str	r3, [fp, #-8]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  11e774:	ea0001f2 	b	11ef44 <tcp_slowtmr+0x838>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
  11e778:	e51b3008 	ldr	r3, [fp, #-8]
  11e77c:	e5933014 	ldr	r3, [r3, #20]
  11e780:	e3530000 	cmp	r3, #0
  11e784:	1a000006 	bne	11e7a4 <tcp_slowtmr+0x98>
  11e788:	e3080018 	movw	r0, #32792	; 0x8018
  11e78c:	e3400014 	movt	r0, #20
  11e790:	ebff925f 	bl	103114 <rt_kprintf>
  11e794:	e30013eb 	movw	r1, #1003	; 0x3eb
  11e798:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11e79c:	e3400014 	movt	r0, #20
  11e7a0:	ebffb243 	bl	10b0b4 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
  11e7a4:	e51b3008 	ldr	r3, [fp, #-8]
  11e7a8:	e5933014 	ldr	r3, [r3, #20]
  11e7ac:	e3530001 	cmp	r3, #1
  11e7b0:	1a000006 	bne	11e7d0 <tcp_slowtmr+0xc4>
  11e7b4:	e3080044 	movw	r0, #32836	; 0x8044
  11e7b8:	e3400014 	movt	r0, #20
  11e7bc:	ebff9254 	bl	103114 <rt_kprintf>
  11e7c0:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  11e7c4:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11e7c8:	e3400014 	movt	r0, #20
  11e7cc:	ebffb238 	bl	10b0b4 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
  11e7d0:	e51b3008 	ldr	r3, [fp, #-8]
  11e7d4:	e5933014 	ldr	r3, [r3, #20]
  11e7d8:	e353000a 	cmp	r3, #10
  11e7dc:	1a000006 	bne	11e7fc <tcp_slowtmr+0xf0>
  11e7e0:	e3080070 	movw	r0, #32880	; 0x8070
  11e7e4:	e3400014 	movt	r0, #20
  11e7e8:	ebff9249 	bl	103114 <rt_kprintf>
  11e7ec:	e30013ed 	movw	r1, #1005	; 0x3ed
  11e7f0:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11e7f4:	e3400014 	movt	r0, #20
  11e7f8:	ebffb22d 	bl	10b0b4 <sys_arch_assert>
    if (pcb->last_timer == tcp_timer_ctr) {
  11e7fc:	e51b3008 	ldr	r3, [fp, #-8]
  11e800:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11e804:	e30e3241 	movw	r3, #57921	; 0xe241
  11e808:	e3403014 	movt	r3, #20
  11e80c:	e5d33000 	ldrb	r3, [r3]
  11e810:	e1520003 	cmp	r2, r3
  11e814:	1a000003 	bne	11e828 <tcp_slowtmr+0x11c>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
  11e818:	e51b3008 	ldr	r3, [fp, #-8]
  11e81c:	e593300c 	ldr	r3, [r3, #12]
  11e820:	e50b3008 	str	r3, [fp, #-8]
      continue;
  11e824:	ea0001c6 	b	11ef44 <tcp_slowtmr+0x838>
    }
    pcb->last_timer = tcp_timer_ctr;
  11e828:	e30e3241 	movw	r3, #57921	; 0xe241
  11e82c:	e3403014 	movt	r3, #20
  11e830:	e5d32000 	ldrb	r2, [r3]
  11e834:	e51b3008 	ldr	r3, [fp, #-8]
  11e838:	e5c32021 	strb	r2, [r3, #33]	; 0x21

    pcb_remove = 0;
  11e83c:	e3a03000 	mov	r3, #0
  11e840:	e54b300d 	strb	r3, [fp, #-13]
    pcb_reset = 0;
  11e844:	e3a03000 	mov	r3, #0
  11e848:	e54b300e 	strb	r3, [fp, #-14]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
  11e84c:	e51b3008 	ldr	r3, [fp, #-8]
  11e850:	e5933014 	ldr	r3, [r3, #20]
  11e854:	e3530002 	cmp	r3, #2
  11e858:	1a000007 	bne	11e87c <tcp_slowtmr+0x170>
  11e85c:	e51b3008 	ldr	r3, [fp, #-8]
  11e860:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e864:	e3530003 	cmp	r3, #3
  11e868:	9a000003 	bls	11e87c <tcp_slowtmr+0x170>
      ++pcb_remove;
  11e86c:	e55b300d 	ldrb	r3, [fp, #-13]
  11e870:	e2833001 	add	r3, r3, #1
  11e874:	e54b300d 	strb	r3, [fp, #-13]
  11e878:	ea000089 	b	11eaa4 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
  11e87c:	e51b3008 	ldr	r3, [fp, #-8]
  11e880:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e884:	e353000b 	cmp	r3, #11
  11e888:	9a000003 	bls	11e89c <tcp_slowtmr+0x190>
      ++pcb_remove;
  11e88c:	e55b300d 	ldrb	r3, [fp, #-13]
  11e890:	e2833001 	add	r3, r3, #1
  11e894:	e54b300d 	strb	r3, [fp, #-13]
  11e898:	ea000081 	b	11eaa4 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
  11e89c:	e51b3008 	ldr	r3, [fp, #-8]
  11e8a0:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e8a4:	e3530000 	cmp	r3, #0
  11e8a8:	0a000029 	beq	11e954 <tcp_slowtmr+0x248>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
  11e8ac:	e51b3008 	ldr	r3, [fp, #-8]
  11e8b0:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e8b4:	e2432001 	sub	r2, r3, #1
  11e8b8:	e3073e7c 	movw	r3, #32380	; 0x7e7c
  11e8bc:	e3403014 	movt	r3, #20
  11e8c0:	e7d33002 	ldrb	r3, [r3, r2]
  11e8c4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
        if (pcb->persist_cnt < backoff_cnt) {
  11e8c8:	e51b3008 	ldr	r3, [fp, #-8]
  11e8cc:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e8d0:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11e8d4:	e1520003 	cmp	r2, r3
  11e8d8:	9a000005 	bls	11e8f4 <tcp_slowtmr+0x1e8>
          pcb->persist_cnt++;
  11e8dc:	e51b3008 	ldr	r3, [fp, #-8]
  11e8e0:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e8e4:	e2833001 	add	r3, r3, #1
  11e8e8:	e6ef2073 	uxtb	r2, r3
  11e8ec:	e51b3008 	ldr	r3, [fp, #-8]
  11e8f0:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
        }
        if (pcb->persist_cnt >= backoff_cnt) {
  11e8f4:	e51b3008 	ldr	r3, [fp, #-8]
  11e8f8:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e8fc:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11e900:	e1520003 	cmp	r2, r3
  11e904:	8a000066 	bhi	11eaa4 <tcp_slowtmr+0x398>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
  11e908:	e51b0008 	ldr	r0, [fp, #-8]
  11e90c:	eb00217f 	bl	126f10 <tcp_zero_window_probe>
  11e910:	e1a03000 	mov	r3, r0
  11e914:	e3530000 	cmp	r3, #0
  11e918:	1a000061 	bne	11eaa4 <tcp_slowtmr+0x398>
            pcb->persist_cnt = 0;
  11e91c:	e51b3008 	ldr	r3, [fp, #-8]
  11e920:	e3a02000 	mov	r2, #0
  11e924:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  11e928:	e51b3008 	ldr	r3, [fp, #-8]
  11e92c:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e930:	e3530006 	cmp	r3, #6
  11e934:	8a00005a 	bhi	11eaa4 <tcp_slowtmr+0x398>
              pcb->persist_backoff++;
  11e938:	e51b3008 	ldr	r3, [fp, #-8]
  11e93c:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e940:	e2833001 	add	r3, r3, #1
  11e944:	e6ef2073 	uxtb	r2, r3
  11e948:	e51b3008 	ldr	r3, [fp, #-8]
  11e94c:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  11e950:	ea000053 	b	11eaa4 <tcp_slowtmr+0x398>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
  11e954:	e51b3008 	ldr	r3, [fp, #-8]
  11e958:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11e95c:	e3530000 	cmp	r3, #0
  11e960:	ba000007 	blt	11e984 <tcp_slowtmr+0x278>
          ++pcb->rtime;
  11e964:	e51b3008 	ldr	r3, [fp, #-8]
  11e968:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11e96c:	e6ff3073 	uxth	r3, r3
  11e970:	e2833001 	add	r3, r3, #1
  11e974:	e6ff3073 	uxth	r3, r3
  11e978:	e6bf2073 	sxth	r2, r3
  11e97c:	e51b3008 	ldr	r3, [fp, #-8]
  11e980:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  11e984:	e51b3008 	ldr	r3, [fp, #-8]
  11e988:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11e98c:	e3530000 	cmp	r3, #0
  11e990:	0a000043 	beq	11eaa4 <tcp_slowtmr+0x398>
  11e994:	e51b3008 	ldr	r3, [fp, #-8]
  11e998:	e1d323f4 	ldrsh	r2, [r3, #52]	; 0x34
  11e99c:	e51b3008 	ldr	r3, [fp, #-8]
  11e9a0:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11e9a4:	e1520003 	cmp	r2, r3
  11e9a8:	ba00003d 	blt	11eaa4 <tcp_slowtmr+0x398>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
  11e9ac:	e51b3008 	ldr	r3, [fp, #-8]
  11e9b0:	e5933014 	ldr	r3, [r3, #20]
  11e9b4:	e3530002 	cmp	r3, #2
  11e9b8:	0a000015 	beq	11ea14 <tcp_slowtmr+0x308>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
  11e9bc:	e51b3008 	ldr	r3, [fp, #-8]
  11e9c0:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e9c4:	e353000c 	cmp	r3, #12
  11e9c8:	31a03003 	movcc	r3, r3
  11e9cc:	23a0300c 	movcs	r3, #12
  11e9d0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
  11e9d4:	e51b3008 	ldr	r3, [fp, #-8]
  11e9d8:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  11e9dc:	e1a031c3 	asr	r3, r3, #3
  11e9e0:	e6bf3073 	sxth	r3, r3
  11e9e4:	e1a02003 	mov	r2, r3
  11e9e8:	e51b3008 	ldr	r3, [fp, #-8]
  11e9ec:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  11e9f0:	e0822003 	add	r2, r2, r3
  11e9f4:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  11e9f8:	e3073e6c 	movw	r3, #32364	; 0x7e6c
  11e9fc:	e3403014 	movt	r3, #20
  11ea00:	e7d33001 	ldrb	r3, [r3, r1]
  11ea04:	e1a03312 	lsl	r3, r2, r3
  11ea08:	e6bf2073 	sxth	r2, r3
  11ea0c:	e51b3008 	ldr	r3, [fp, #-8]
  11ea10:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
  11ea14:	e51b3008 	ldr	r3, [fp, #-8]
  11ea18:	e3a02000 	mov	r2, #0
  11ea1c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
  11ea20:	e51b3008 	ldr	r3, [fp, #-8]
  11ea24:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  11ea28:	e51b3008 	ldr	r3, [fp, #-8]
  11ea2c:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  11ea30:	e1520003 	cmp	r2, r3
  11ea34:	31a03002 	movcc	r3, r2
  11ea38:	21a03003 	movcs	r3, r3
  11ea3c:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
          pcb->ssthresh = eff_wnd >> 1;
  11ea40:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11ea44:	e1a030a3 	lsr	r3, r3, #1
  11ea48:	e6ff2073 	uxth	r2, r3
  11ea4c:	e51b3008 	ldr	r3, [fp, #-8]
  11ea50:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
  11ea54:	e51b3008 	ldr	r3, [fp, #-8]
  11ea58:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  11ea5c:	e51b3008 	ldr	r3, [fp, #-8]
  11ea60:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11ea64:	e1a03083 	lsl	r3, r3, #1
  11ea68:	e6ff3073 	uxth	r3, r3
  11ea6c:	e1520003 	cmp	r2, r3
  11ea70:	2a000005 	bcs	11ea8c <tcp_slowtmr+0x380>
            pcb->ssthresh = (pcb->mss << 1);
  11ea74:	e51b3008 	ldr	r3, [fp, #-8]
  11ea78:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11ea7c:	e1a03083 	lsl	r3, r3, #1
  11ea80:	e6ff2073 	uxth	r2, r3
  11ea84:	e51b3008 	ldr	r3, [fp, #-8]
  11ea88:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          }
          pcb->cwnd = pcb->mss;
  11ea8c:	e51b3008 	ldr	r3, [fp, #-8]
  11ea90:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11ea94:	e51b3008 	ldr	r3, [fp, #-8]
  11ea98:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
  11ea9c:	e51b0008 	ldr	r0, [fp, #-8]
  11eaa0:	eb002001 	bl	126aac <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
  11eaa4:	e51b3008 	ldr	r3, [fp, #-8]
  11eaa8:	e5933014 	ldr	r3, [r3, #20]
  11eaac:	e3530006 	cmp	r3, #6
  11eab0:	1a00000f 	bne	11eaf4 <tcp_slowtmr+0x3e8>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
  11eab4:	e51b3008 	ldr	r3, [fp, #-8]
  11eab8:	e5d3301e 	ldrb	r3, [r3, #30]
  11eabc:	e2033010 	and	r3, r3, #16
  11eac0:	e3530000 	cmp	r3, #0
  11eac4:	0a00000a 	beq	11eaf4 <tcp_slowtmr+0x3e8>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  11eac8:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11eacc:	e3403015 	movt	r3, #21
  11ead0:	e5932000 	ldr	r2, [r3]
  11ead4:	e51b3008 	ldr	r3, [fp, #-8]
  11ead8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11eadc:	e0423003 	sub	r3, r2, r3
  11eae0:	e3530028 	cmp	r3, #40	; 0x28
  11eae4:	9a000002 	bls	11eaf4 <tcp_slowtmr+0x3e8>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
  11eae8:	e55b300d 	ldrb	r3, [fp, #-13]
  11eaec:	e2833001 	add	r3, r3, #1
  11eaf0:	e54b300d 	strb	r3, [fp, #-13]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11eaf4:	e51b3008 	ldr	r3, [fp, #-8]
  11eaf8:	e5d33008 	ldrb	r3, [r3, #8]
  11eafc:	e2033008 	and	r3, r3, #8
  11eb00:	e3530000 	cmp	r3, #0
  11eb04:	0a000044 	beq	11ec1c <tcp_slowtmr+0x510>
       ((pcb->state == ESTABLISHED) ||
  11eb08:	e51b3008 	ldr	r3, [fp, #-8]
  11eb0c:	e5933014 	ldr	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11eb10:	e3530004 	cmp	r3, #4
  11eb14:	0a000003 	beq	11eb28 <tcp_slowtmr+0x41c>
        (pcb->state == CLOSE_WAIT))) {
  11eb18:	e51b3008 	ldr	r3, [fp, #-8]
  11eb1c:	e5933014 	ldr	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
  11eb20:	e3530007 	cmp	r3, #7
  11eb24:	1a00003c 	bne	11ec1c <tcp_slowtmr+0x510>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11eb28:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11eb2c:	e3403015 	movt	r3, #21
  11eb30:	e5932000 	ldr	r2, [r3]
  11eb34:	e51b3008 	ldr	r3, [fp, #-8]
  11eb38:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11eb3c:	e0421003 	sub	r1, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  11eb40:	e51b3008 	ldr	r3, [fp, #-8]
  11eb44:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11eb48:	e51b3008 	ldr	r3, [fp, #-8]
  11eb4c:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  11eb50:	e51b0008 	ldr	r0, [fp, #-8]
  11eb54:	e5900098 	ldr	r0, [r0, #152]	; 0x98
  11eb58:	e0030390 	mul	r3, r0, r3
  11eb5c:	e0822003 	add	r2, r2, r3
  11eb60:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11eb64:	e3413062 	movt	r3, #4194	; 0x1062
  11eb68:	e0832392 	umull	r2, r3, r2, r3
  11eb6c:	e1a032a3 	lsr	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11eb70:	e1510003 	cmp	r1, r3
  11eb74:	9a000006 	bls	11eb94 <tcp_slowtmr+0x488>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
  11eb78:	e55b300d 	ldrb	r3, [fp, #-13]
  11eb7c:	e2833001 	add	r3, r3, #1
  11eb80:	e54b300d 	strb	r3, [fp, #-13]
        ++pcb_reset;
  11eb84:	e55b300e 	ldrb	r3, [fp, #-14]
  11eb88:	e2833001 	add	r3, r3, #1
  11eb8c:	e54b300e 	strb	r3, [fp, #-14]
  11eb90:	ea000021 	b	11ec1c <tcp_slowtmr+0x510>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11eb94:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11eb98:	e3403015 	movt	r3, #21
  11eb9c:	e5932000 	ldr	r2, [r3]
  11eba0:	e51b3008 	ldr	r3, [fp, #-8]
  11eba4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11eba8:	e0421003 	sub	r1, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
  11ebac:	e51b3008 	ldr	r3, [fp, #-8]
  11ebb0:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11ebb4:	e51b3008 	ldr	r3, [fp, #-8]
  11ebb8:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11ebbc:	e1a00003 	mov	r0, r3
  11ebc0:	e51b3008 	ldr	r3, [fp, #-8]
  11ebc4:	e5933098 	ldr	r3, [r3, #152]	; 0x98
  11ebc8:	e0030093 	mul	r3, r3, r0
  11ebcc:	e0822003 	add	r2, r2, r3
                / TCP_SLOW_INTERVAL)
  11ebd0:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11ebd4:	e3413062 	movt	r3, #4194	; 0x1062
  11ebd8:	e0832392 	umull	r2, r3, r2, r3
  11ebdc:	e1a032a3 	lsr	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11ebe0:	e1510003 	cmp	r1, r3
  11ebe4:	9a00000c 	bls	11ec1c <tcp_slowtmr+0x510>
      {
        err = tcp_keepalive(pcb);
  11ebe8:	e51b0008 	ldr	r0, [fp, #-8]
  11ebec:	eb002079 	bl	126dd8 <tcp_keepalive>
  11ebf0:	e1a03000 	mov	r3, r0
  11ebf4:	e54b300f 	strb	r3, [fp, #-15]
        if (err == ERR_OK) {
  11ebf8:	e15b30df 	ldrsb	r3, [fp, #-15]
  11ebfc:	e3530000 	cmp	r3, #0
  11ec00:	1a000005 	bne	11ec1c <tcp_slowtmr+0x510>
          pcb->keep_cnt_sent++;
  11ec04:	e51b3008 	ldr	r3, [fp, #-8]
  11ec08:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11ec0c:	e2833001 	add	r3, r3, #1
  11ec10:	e6ef2073 	uxtb	r2, r3
  11ec14:	e51b3008 	ldr	r3, [fp, #-8]
  11ec18:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  11ec1c:	e51b3008 	ldr	r3, [fp, #-8]
  11ec20:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11ec24:	e3530000 	cmp	r3, #0
  11ec28:	0a000013 	beq	11ec7c <tcp_slowtmr+0x570>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  11ec2c:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11ec30:	e3403015 	movt	r3, #21
  11ec34:	e5932000 	ldr	r2, [r3]
  11ec38:	e51b3008 	ldr	r3, [fp, #-8]
  11ec3c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ec40:	e0422003 	sub	r2, r2, r3
  11ec44:	e51b3008 	ldr	r3, [fp, #-8]
  11ec48:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11ec4c:	e1a01003 	mov	r1, r3
  11ec50:	e3a03006 	mov	r3, #6
  11ec54:	e0030193 	mul	r3, r3, r1
    if (pcb->ooseq != NULL &&
  11ec58:	e1520003 	cmp	r2, r3
  11ec5c:	3a000006 	bcc	11ec7c <tcp_slowtmr+0x570>
      tcp_segs_free(pcb->ooseq);
  11ec60:	e51b3008 	ldr	r3, [fp, #-8]
  11ec64:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11ec68:	e1a00003 	mov	r0, r3
  11ec6c:	eb0001e2 	bl	11f3fc <tcp_segs_free>
      pcb->ooseq = NULL;
  11ec70:	e51b3008 	ldr	r3, [fp, #-8]
  11ec74:	e3a02000 	mov	r2, #0
  11ec78:	e5832074 	str	r2, [r3, #116]	; 0x74
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
  11ec7c:	e51b3008 	ldr	r3, [fp, #-8]
  11ec80:	e5933014 	ldr	r3, [r3, #20]
  11ec84:	e3530003 	cmp	r3, #3
  11ec88:	1a00000a 	bne	11ecb8 <tcp_slowtmr+0x5ac>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11ec8c:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11ec90:	e3403015 	movt	r3, #21
  11ec94:	e5932000 	ldr	r2, [r3]
  11ec98:	e51b3008 	ldr	r3, [fp, #-8]
  11ec9c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11eca0:	e0423003 	sub	r3, r2, r3
  11eca4:	e3530028 	cmp	r3, #40	; 0x28
  11eca8:	9a000002 	bls	11ecb8 <tcp_slowtmr+0x5ac>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
  11ecac:	e55b300d 	ldrb	r3, [fp, #-13]
  11ecb0:	e2833001 	add	r3, r3, #1
  11ecb4:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
  11ecb8:	e51b3008 	ldr	r3, [fp, #-8]
  11ecbc:	e5933014 	ldr	r3, [r3, #20]
  11ecc0:	e3530009 	cmp	r3, #9
  11ecc4:	1a00000a 	bne	11ecf4 <tcp_slowtmr+0x5e8>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11ecc8:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11eccc:	e3403015 	movt	r3, #21
  11ecd0:	e5932000 	ldr	r2, [r3]
  11ecd4:	e51b3008 	ldr	r3, [fp, #-8]
  11ecd8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ecdc:	e0423003 	sub	r3, r2, r3
  11ece0:	e35300f0 	cmp	r3, #240	; 0xf0
  11ece4:	9a000002 	bls	11ecf4 <tcp_slowtmr+0x5e8>
        ++pcb_remove;
  11ece8:	e55b300d 	ldrb	r3, [fp, #-13]
  11ecec:	e2833001 	add	r3, r3, #1
  11ecf0:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11ecf4:	e55b300d 	ldrb	r3, [fp, #-13]
  11ecf8:	e3530000 	cmp	r3, #0
  11ecfc:	0a00005d 	beq	11ee78 <tcp_slowtmr+0x76c>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
  11ed00:	e51b3008 	ldr	r3, [fp, #-8]
  11ed04:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11ed08:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
  11ed0c:	e51b0008 	ldr	r0, [fp, #-8]
  11ed10:	eb000410 	bl	11fd58 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
  11ed14:	e51b300c 	ldr	r3, [fp, #-12]
  11ed18:	e3530000 	cmp	r3, #0
  11ed1c:	0a000011 	beq	11ed68 <tcp_slowtmr+0x65c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
  11ed20:	e30c3c38 	movw	r3, #52280	; 0xcc38
  11ed24:	e3403015 	movt	r3, #21
  11ed28:	e5933000 	ldr	r3, [r3]
  11ed2c:	e51b2008 	ldr	r2, [fp, #-8]
  11ed30:	e1520003 	cmp	r2, r3
  11ed34:	1a000006 	bne	11ed54 <tcp_slowtmr+0x648>
  11ed38:	e30800a0 	movw	r0, #32928	; 0x80a0
  11ed3c:	e3400014 	movt	r0, #20
  11ed40:	ebff90f3 	bl	103114 <rt_kprintf>
  11ed44:	e3001484 	movw	r1, #1156	; 0x484
  11ed48:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11ed4c:	e3400014 	movt	r0, #20
  11ed50:	ebffb0d7 	bl	10b0b4 <sys_arch_assert>
        prev->next = pcb->next;
  11ed54:	e51b3008 	ldr	r3, [fp, #-8]
  11ed58:	e593200c 	ldr	r2, [r3, #12]
  11ed5c:	e51b300c 	ldr	r3, [fp, #-12]
  11ed60:	e583200c 	str	r2, [r3, #12]
  11ed64:	ea000011 	b	11edb0 <tcp_slowtmr+0x6a4>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
  11ed68:	e30c3c38 	movw	r3, #52280	; 0xcc38
  11ed6c:	e3403015 	movt	r3, #21
  11ed70:	e5933000 	ldr	r3, [r3]
  11ed74:	e51b2008 	ldr	r2, [fp, #-8]
  11ed78:	e1520003 	cmp	r2, r3
  11ed7c:	0a000006 	beq	11ed9c <tcp_slowtmr+0x690>
  11ed80:	e30800cc 	movw	r0, #32972	; 0x80cc
  11ed84:	e3400014 	movt	r0, #20
  11ed88:	ebff90e1 	bl	103114 <rt_kprintf>
  11ed8c:	e3001488 	movw	r1, #1160	; 0x488
  11ed90:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11ed94:	e3400014 	movt	r0, #20
  11ed98:	ebffb0c5 	bl	10b0b4 <sys_arch_assert>
        tcp_active_pcbs = pcb->next;
  11ed9c:	e51b3008 	ldr	r3, [fp, #-8]
  11eda0:	e593200c 	ldr	r2, [r3, #12]
  11eda4:	e30c3c38 	movw	r3, #52280	; 0xcc38
  11eda8:	e3403015 	movt	r3, #21
  11edac:	e5832000 	str	r2, [r3]
      }

      if (pcb_reset) {
  11edb0:	e55b300e 	ldrb	r3, [fp, #-14]
  11edb4:	e3530000 	cmp	r3, #0
  11edb8:	0a00000f 	beq	11edfc <tcp_slowtmr+0x6f0>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11edbc:	e51b3008 	ldr	r3, [fp, #-8]
  11edc0:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11edc4:	e51b3008 	ldr	r3, [fp, #-8]
  11edc8:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11edcc:	e51bc008 	ldr	ip, [fp, #-8]
  11edd0:	e51b3008 	ldr	r3, [fp, #-8]
  11edd4:	e283e004 	add	lr, r3, #4
  11edd8:	e51b3008 	ldr	r3, [fp, #-8]
  11eddc:	e1d331ba 	ldrh	r3, [r3, #26]
  11ede0:	e51b2008 	ldr	r2, [fp, #-8]
  11ede4:	e1d221bc 	ldrh	r2, [r2, #28]
  11ede8:	e58d2004 	str	r2, [sp, #4]
  11edec:	e58d3000 	str	r3, [sp]
  11edf0:	e1a0300e 	mov	r3, lr
  11edf4:	e1a0200c 	mov	r2, ip
  11edf8:	eb001eae 	bl	1268b8 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
  11edfc:	e51b3008 	ldr	r3, [fp, #-8]
  11ee00:	e5933010 	ldr	r3, [r3, #16]
  11ee04:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
      last_state = pcb->state;
  11ee08:	e51b3008 	ldr	r3, [fp, #-8]
  11ee0c:	e5933014 	ldr	r3, [r3, #20]
  11ee10:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
      pcb2 = pcb;
  11ee14:	e51b3008 	ldr	r3, [fp, #-8]
  11ee18:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      pcb = pcb->next;
  11ee1c:	e51b3008 	ldr	r3, [fp, #-8]
  11ee20:	e593300c 	ldr	r3, [r3, #12]
  11ee24:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11ee28:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  11ee2c:	e3a00002 	mov	r0, #2
  11ee30:	ebffe901 	bl	11923c <memp_free>

      tcp_active_pcbs_changed = 0;
  11ee34:	e30c3c34 	movw	r3, #52276	; 0xcc34
  11ee38:	e3403015 	movt	r3, #21
  11ee3c:	e3a02000 	mov	r2, #0
  11ee40:	e5c32000 	strb	r2, [r3]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
  11ee44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11ee48:	e3530000 	cmp	r3, #0
  11ee4c:	0a000003 	beq	11ee60 <tcp_slowtmr+0x754>
  11ee50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11ee54:	e3e0100c 	mvn	r1, #12
  11ee58:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11ee5c:	e12fff33 	blx	r3
      if (tcp_active_pcbs_changed) {
  11ee60:	e30c3c34 	movw	r3, #52276	; 0xcc34
  11ee64:	e3403015 	movt	r3, #21
  11ee68:	e5d33000 	ldrb	r3, [r3]
  11ee6c:	e3530000 	cmp	r3, #0
  11ee70:	0a000033 	beq	11ef44 <tcp_slowtmr+0x838>
        goto tcp_slowtmr_start;
  11ee74:	eafffe38 	b	11e75c <tcp_slowtmr+0x50>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
  11ee78:	e51b3008 	ldr	r3, [fp, #-8]
  11ee7c:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11ee80:	e51b3008 	ldr	r3, [fp, #-8]
  11ee84:	e593300c 	ldr	r3, [r3, #12]
  11ee88:	e50b3008 	str	r3, [fp, #-8]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
  11ee8c:	e51b300c 	ldr	r3, [fp, #-12]
  11ee90:	e5d3301f 	ldrb	r3, [r3, #31]
  11ee94:	e2833001 	add	r3, r3, #1
  11ee98:	e6ef2073 	uxtb	r2, r3
  11ee9c:	e51b300c 	ldr	r3, [fp, #-12]
  11eea0:	e5c3201f 	strb	r2, [r3, #31]
      if (prev->polltmr >= prev->pollinterval) {
  11eea4:	e51b300c 	ldr	r3, [fp, #-12]
  11eea8:	e5d3201f 	ldrb	r2, [r3, #31]
  11eeac:	e51b300c 	ldr	r3, [fp, #-12]
  11eeb0:	e5d33020 	ldrb	r3, [r3, #32]
  11eeb4:	e1520003 	cmp	r2, r3
  11eeb8:	3a000021 	bcc	11ef44 <tcp_slowtmr+0x838>
        prev->polltmr = 0;
  11eebc:	e51b300c 	ldr	r3, [fp, #-12]
  11eec0:	e3a02000 	mov	r2, #0
  11eec4:	e5c3201f 	strb	r2, [r3, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
  11eec8:	e30c3c34 	movw	r3, #52276	; 0xcc34
  11eecc:	e3403015 	movt	r3, #21
  11eed0:	e3a02000 	mov	r2, #0
  11eed4:	e5c32000 	strb	r2, [r3]
        TCP_EVENT_POLL(prev, err);
  11eed8:	e51b300c 	ldr	r3, [fp, #-12]
  11eedc:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11eee0:	e3530000 	cmp	r3, #0
  11eee4:	0a000009 	beq	11ef10 <tcp_slowtmr+0x804>
  11eee8:	e51b300c 	ldr	r3, [fp, #-12]
  11eeec:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11eef0:	e51b200c 	ldr	r2, [fp, #-12]
  11eef4:	e5922010 	ldr	r2, [r2, #16]
  11eef8:	e51b100c 	ldr	r1, [fp, #-12]
  11eefc:	e1a00002 	mov	r0, r2
  11ef00:	e12fff33 	blx	r3
  11ef04:	e1a03000 	mov	r3, r0
  11ef08:	e54b300f 	strb	r3, [fp, #-15]
  11ef0c:	ea000001 	b	11ef18 <tcp_slowtmr+0x80c>
  11ef10:	e3a03000 	mov	r3, #0
  11ef14:	e54b300f 	strb	r3, [fp, #-15]
        if (tcp_active_pcbs_changed) {
  11ef18:	e30c3c34 	movw	r3, #52276	; 0xcc34
  11ef1c:	e3403015 	movt	r3, #21
  11ef20:	e5d33000 	ldrb	r3, [r3]
  11ef24:	e3530000 	cmp	r3, #0
  11ef28:	0a000000 	beq	11ef30 <tcp_slowtmr+0x824>
          goto tcp_slowtmr_start;
  11ef2c:	eafffe0a 	b	11e75c <tcp_slowtmr+0x50>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
  11ef30:	e15b30df 	ldrsb	r3, [fp, #-15]
  11ef34:	e3530000 	cmp	r3, #0
  11ef38:	1a000001 	bne	11ef44 <tcp_slowtmr+0x838>
          tcp_output(prev);
  11ef3c:	e51b000c 	ldr	r0, [fp, #-12]
  11ef40:	eb001bf6 	bl	125f20 <tcp_output>
  while (pcb != NULL) {
  11ef44:	e51b3008 	ldr	r3, [fp, #-8]
  11ef48:	e3530000 	cmp	r3, #0
  11ef4c:	1afffe09 	bne	11e778 <tcp_slowtmr+0x6c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  11ef50:	e3a03000 	mov	r3, #0
  11ef54:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_tw_pcbs;
  11ef58:	e30c3c48 	movw	r3, #52296	; 0xcc48
  11ef5c:	e3403015 	movt	r3, #21
  11ef60:	e5933000 	ldr	r3, [r3]
  11ef64:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11ef68:	ea000051 	b	11f0b4 <tcp_slowtmr+0x9a8>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  11ef6c:	e51b3008 	ldr	r3, [fp, #-8]
  11ef70:	e5933014 	ldr	r3, [r3, #20]
  11ef74:	e353000a 	cmp	r3, #10
  11ef78:	0a000006 	beq	11ef98 <tcp_slowtmr+0x88c>
  11ef7c:	e30800f8 	movw	r0, #33016	; 0x80f8
  11ef80:	e3400014 	movt	r0, #20
  11ef84:	ebff9062 	bl	103114 <rt_kprintf>
  11ef88:	e30014b8 	movw	r1, #1208	; 0x4b8
  11ef8c:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11ef90:	e3400014 	movt	r0, #20
  11ef94:	ebffb046 	bl	10b0b4 <sys_arch_assert>
    pcb_remove = 0;
  11ef98:	e3a03000 	mov	r3, #0
  11ef9c:	e54b300d 	strb	r3, [fp, #-13]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11efa0:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11efa4:	e3403015 	movt	r3, #21
  11efa8:	e5932000 	ldr	r2, [r3]
  11efac:	e51b3008 	ldr	r3, [fp, #-8]
  11efb0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11efb4:	e0423003 	sub	r3, r2, r3
  11efb8:	e35300f0 	cmp	r3, #240	; 0xf0
  11efbc:	9a000002 	bls	11efcc <tcp_slowtmr+0x8c0>
      ++pcb_remove;
  11efc0:	e55b300d 	ldrb	r3, [fp, #-13]
  11efc4:	e2833001 	add	r3, r3, #1
  11efc8:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11efcc:	e55b300d 	ldrb	r3, [fp, #-13]
  11efd0:	e3530000 	cmp	r3, #0
  11efd4:	0a000031 	beq	11f0a0 <tcp_slowtmr+0x994>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
  11efd8:	e51b0008 	ldr	r0, [fp, #-8]
  11efdc:	eb00035d 	bl	11fd58 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
  11efe0:	e51b300c 	ldr	r3, [fp, #-12]
  11efe4:	e3530000 	cmp	r3, #0
  11efe8:	0a000011 	beq	11f034 <tcp_slowtmr+0x928>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
  11efec:	e30c3c48 	movw	r3, #52296	; 0xcc48
  11eff0:	e3403015 	movt	r3, #21
  11eff4:	e5933000 	ldr	r3, [r3]
  11eff8:	e51b2008 	ldr	r2, [fp, #-8]
  11effc:	e1520003 	cmp	r2, r3
  11f000:	1a000006 	bne	11f020 <tcp_slowtmr+0x914>
  11f004:	e3080128 	movw	r0, #33064	; 0x8128
  11f008:	e3400014 	movt	r0, #20
  11f00c:	ebff9040 	bl	103114 <rt_kprintf>
  11f010:	e30014c6 	movw	r1, #1222	; 0x4c6
  11f014:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11f018:	e3400014 	movt	r0, #20
  11f01c:	ebffb024 	bl	10b0b4 <sys_arch_assert>
        prev->next = pcb->next;
  11f020:	e51b3008 	ldr	r3, [fp, #-8]
  11f024:	e593200c 	ldr	r2, [r3, #12]
  11f028:	e51b300c 	ldr	r3, [fp, #-12]
  11f02c:	e583200c 	str	r2, [r3, #12]
  11f030:	ea000011 	b	11f07c <tcp_slowtmr+0x970>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
  11f034:	e30c3c48 	movw	r3, #52296	; 0xcc48
  11f038:	e3403015 	movt	r3, #21
  11f03c:	e5933000 	ldr	r3, [r3]
  11f040:	e51b2008 	ldr	r2, [fp, #-8]
  11f044:	e1520003 	cmp	r2, r3
  11f048:	0a000006 	beq	11f068 <tcp_slowtmr+0x95c>
  11f04c:	e3080150 	movw	r0, #33104	; 0x8150
  11f050:	e3400014 	movt	r0, #20
  11f054:	ebff902e 	bl	103114 <rt_kprintf>
  11f058:	e30014ca 	movw	r1, #1226	; 0x4ca
  11f05c:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11f060:	e3400014 	movt	r0, #20
  11f064:	ebffb012 	bl	10b0b4 <sys_arch_assert>
        tcp_tw_pcbs = pcb->next;
  11f068:	e51b3008 	ldr	r3, [fp, #-8]
  11f06c:	e593200c 	ldr	r2, [r3, #12]
  11f070:	e30c3c48 	movw	r3, #52296	; 0xcc48
  11f074:	e3403015 	movt	r3, #21
  11f078:	e5832000 	str	r2, [r3]
      }
      pcb2 = pcb;
  11f07c:	e51b3008 	ldr	r3, [fp, #-8]
  11f080:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      pcb = pcb->next;
  11f084:	e51b3008 	ldr	r3, [fp, #-8]
  11f088:	e593300c 	ldr	r3, [r3, #12]
  11f08c:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11f090:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11f094:	e3a00002 	mov	r0, #2
  11f098:	ebffe867 	bl	11923c <memp_free>
  11f09c:	ea000004 	b	11f0b4 <tcp_slowtmr+0x9a8>
    } else {
      prev = pcb;
  11f0a0:	e51b3008 	ldr	r3, [fp, #-8]
  11f0a4:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11f0a8:	e51b3008 	ldr	r3, [fp, #-8]
  11f0ac:	e593300c 	ldr	r3, [r3, #12]
  11f0b0:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11f0b4:	e51b3008 	ldr	r3, [fp, #-8]
  11f0b8:	e3530000 	cmp	r3, #0
  11f0bc:	1affffaa 	bne	11ef6c <tcp_slowtmr+0x860>
    }
  }
}
  11f0c0:	e320f000 	nop	{0}
  11f0c4:	e24bd004 	sub	sp, fp, #4
  11f0c8:	e8bd8800 	pop	{fp, pc}

0011f0cc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  11f0cc:	e92d4800 	push	{fp, lr}
  11f0d0:	e28db004 	add	fp, sp, #4
  11f0d4:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
  11f0d8:	e30e3241 	movw	r3, #57921	; 0xe241
  11f0dc:	e3403014 	movt	r3, #20
  11f0e0:	e5d33000 	ldrb	r3, [r3]
  11f0e4:	e2833001 	add	r3, r3, #1
  11f0e8:	e6ef2073 	uxtb	r2, r3
  11f0ec:	e30e3241 	movw	r3, #57921	; 0xe241
  11f0f0:	e3403014 	movt	r3, #20
  11f0f4:	e5c32000 	strb	r2, [r3]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
  11f0f8:	e30c3c38 	movw	r3, #52280	; 0xcc38
  11f0fc:	e3403015 	movt	r3, #21
  11f100:	e5933000 	ldr	r3, [r3]
  11f104:	e50b3008 	str	r3, [fp, #-8]

  while (pcb != NULL) {
  11f108:	ea000044 	b	11f220 <tcp_fasttmr+0x154>
    if (pcb->last_timer != tcp_timer_ctr) {
  11f10c:	e51b3008 	ldr	r3, [fp, #-8]
  11f110:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11f114:	e30e3241 	movw	r3, #57921	; 0xe241
  11f118:	e3403014 	movt	r3, #20
  11f11c:	e5d33000 	ldrb	r3, [r3]
  11f120:	e1520003 	cmp	r2, r3
  11f124:	0a00003a 	beq	11f214 <tcp_fasttmr+0x148>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
  11f128:	e30e3241 	movw	r3, #57921	; 0xe241
  11f12c:	e3403014 	movt	r3, #20
  11f130:	e5d32000 	ldrb	r2, [r3]
  11f134:	e51b3008 	ldr	r3, [fp, #-8]
  11f138:	e5c32021 	strb	r2, [r3, #33]	; 0x21
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
  11f13c:	e51b3008 	ldr	r3, [fp, #-8]
  11f140:	e5d3301e 	ldrb	r3, [r3, #30]
  11f144:	e2033001 	and	r3, r3, #1
  11f148:	e3530000 	cmp	r3, #0
  11f14c:	0a00000d 	beq	11f188 <tcp_fasttmr+0xbc>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
  11f150:	e51b3008 	ldr	r3, [fp, #-8]
  11f154:	e5d3301e 	ldrb	r3, [r3, #30]
  11f158:	e3833002 	orr	r3, r3, #2
  11f15c:	e6ef2073 	uxtb	r2, r3
  11f160:	e51b3008 	ldr	r3, [fp, #-8]
  11f164:	e5c3201e 	strb	r2, [r3, #30]
        tcp_output(pcb);
  11f168:	e51b0008 	ldr	r0, [fp, #-8]
  11f16c:	eb001b6b 	bl	125f20 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  11f170:	e51b3008 	ldr	r3, [fp, #-8]
  11f174:	e5d3301e 	ldrb	r3, [r3, #30]
  11f178:	e3c33003 	bic	r3, r3, #3
  11f17c:	e6ef2073 	uxtb	r2, r3
  11f180:	e51b3008 	ldr	r3, [fp, #-8]
  11f184:	e5c3201e 	strb	r2, [r3, #30]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
  11f188:	e51b3008 	ldr	r3, [fp, #-8]
  11f18c:	e5d3301e 	ldrb	r3, [r3, #30]
  11f190:	e2033008 	and	r3, r3, #8
  11f194:	e3530000 	cmp	r3, #0
  11f198:	0a000007 	beq	11f1bc <tcp_fasttmr+0xf0>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
  11f19c:	e51b3008 	ldr	r3, [fp, #-8]
  11f1a0:	e5d3301e 	ldrb	r3, [r3, #30]
  11f1a4:	e3c33008 	bic	r3, r3, #8
  11f1a8:	e6ef2073 	uxtb	r2, r3
  11f1ac:	e51b3008 	ldr	r3, [fp, #-8]
  11f1b0:	e5c3201e 	strb	r2, [r3, #30]
        tcp_close_shutdown_fin(pcb);
  11f1b4:	e51b0008 	ldr	r0, [fp, #-8]
  11f1b8:	ebfff8ac 	bl	11d470 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
  11f1bc:	e51b3008 	ldr	r3, [fp, #-8]
  11f1c0:	e593300c 	ldr	r3, [r3, #12]
  11f1c4:	e50b300c 	str	r3, [fp, #-12]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
  11f1c8:	e51b3008 	ldr	r3, [fp, #-8]
  11f1cc:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11f1d0:	e3530000 	cmp	r3, #0
  11f1d4:	0a00000b 	beq	11f208 <tcp_fasttmr+0x13c>
        tcp_active_pcbs_changed = 0;
  11f1d8:	e30c3c34 	movw	r3, #52276	; 0xcc34
  11f1dc:	e3403015 	movt	r3, #21
  11f1e0:	e3a02000 	mov	r2, #0
  11f1e4:	e5c32000 	strb	r2, [r3]
        tcp_process_refused_data(pcb);
  11f1e8:	e51b0008 	ldr	r0, [fp, #-8]
  11f1ec:	eb000029 	bl	11f298 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
  11f1f0:	e30c3c34 	movw	r3, #52276	; 0xcc34
  11f1f4:	e3403015 	movt	r3, #21
  11f1f8:	e5d33000 	ldrb	r3, [r3]
  11f1fc:	e3530000 	cmp	r3, #0
  11f200:	0a000000 	beq	11f208 <tcp_fasttmr+0x13c>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
  11f204:	eaffffbb 	b	11f0f8 <tcp_fasttmr+0x2c>
        }
      }
      pcb = next;
  11f208:	e51b300c 	ldr	r3, [fp, #-12]
  11f20c:	e50b3008 	str	r3, [fp, #-8]
  11f210:	ea000002 	b	11f220 <tcp_fasttmr+0x154>
    } else {
      pcb = pcb->next;
  11f214:	e51b3008 	ldr	r3, [fp, #-8]
  11f218:	e593300c 	ldr	r3, [r3, #12]
  11f21c:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11f220:	e51b3008 	ldr	r3, [fp, #-8]
  11f224:	e3530000 	cmp	r3, #0
  11f228:	1affffb7 	bne	11f10c <tcp_fasttmr+0x40>
    }
  }
}
  11f22c:	e320f000 	nop	{0}
  11f230:	e24bd004 	sub	sp, fp, #4
  11f234:	e8bd8800 	pop	{fp, pc}

0011f238 <tcp_txnow>:

/** Call tcp_output for all active pcbs that have TF_NAGLEMEMERR set */
void
tcp_txnow(void)
{
  11f238:	e92d4800 	push	{fp, lr}
  11f23c:	e28db004 	add	fp, sp, #4
  11f240:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f244:	e30c3c38 	movw	r3, #52280	; 0xcc38
  11f248:	e3403015 	movt	r3, #21
  11f24c:	e5933000 	ldr	r3, [r3]
  11f250:	e50b3008 	str	r3, [fp, #-8]
  11f254:	ea000009 	b	11f280 <tcp_txnow+0x48>
    if (pcb->flags & TF_NAGLEMEMERR) {
  11f258:	e51b3008 	ldr	r3, [fp, #-8]
  11f25c:	e5d3301e 	ldrb	r3, [r3, #30]
  11f260:	e6af3073 	sxtb	r3, r3
  11f264:	e3530000 	cmp	r3, #0
  11f268:	aa000001 	bge	11f274 <tcp_txnow+0x3c>
      tcp_output(pcb);
  11f26c:	e51b0008 	ldr	r0, [fp, #-8]
  11f270:	eb001b2a 	bl	125f20 <tcp_output>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f274:	e51b3008 	ldr	r3, [fp, #-8]
  11f278:	e593300c 	ldr	r3, [r3, #12]
  11f27c:	e50b3008 	str	r3, [fp, #-8]
  11f280:	e51b3008 	ldr	r3, [fp, #-8]
  11f284:	e3530000 	cmp	r3, #0
  11f288:	1afffff2 	bne	11f258 <tcp_txnow+0x20>
    }
  }
}
  11f28c:	e320f000 	nop	{0}
  11f290:	e24bd004 	sub	sp, fp, #4
  11f294:	e8bd8800 	pop	{fp, pc}

0011f298 <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
  11f298:	e92d4810 	push	{r4, fp, lr}
  11f29c:	e28db008 	add	fp, sp, #8
  11f2a0:	e24dd014 	sub	sp, sp, #20
  11f2a4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
  11f2a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f2ac:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11f2b0:	e5d3300d 	ldrb	r3, [r3, #13]
  11f2b4:	e54b300e 	strb	r3, [fp, #-14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
  11f2b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f2bc:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11f2c0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
  11f2c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f2c8:	e3a02000 	mov	r2, #0
  11f2cc:	e5832078 	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  11f2d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f2d4:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11f2d8:	e3530000 	cmp	r3, #0
  11f2dc:	0a00000a 	beq	11f30c <tcp_process_refused_data+0x74>
  11f2e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f2e4:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11f2e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f2ec:	e5930010 	ldr	r0, [r3, #16]
  11f2f0:	e3a03000 	mov	r3, #0
  11f2f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f2f8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f2fc:	e12fff34 	blx	r4
  11f300:	e1a03000 	mov	r3, r0
  11f304:	e54b300d 	strb	r3, [fp, #-13]
  11f308:	ea000006 	b	11f328 <tcp_process_refused_data+0x90>
  11f30c:	e3a03000 	mov	r3, #0
  11f310:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f314:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f318:	e3a00000 	mov	r0, #0
  11f31c:	eb000085 	bl	11f538 <tcp_recv_null>
  11f320:	e1a03000 	mov	r3, r0
  11f324:	e54b300d 	strb	r3, [fp, #-13]
    if (err == ERR_OK) {
  11f328:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f32c:	e3530000 	cmp	r3, #0
  11f330:	1a000023 	bne	11f3c4 <tcp_process_refused_data+0x12c>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
  11f334:	e55b300e 	ldrb	r3, [fp, #-14]
  11f338:	e2033020 	and	r3, r3, #32
  11f33c:	e3530000 	cmp	r3, #0
  11f340:	0a000029 	beq	11f3ec <tcp_process_refused_data+0x154>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  11f344:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f348:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11f34c:	e3530a02 	cmp	r3, #8192	; 0x2000
  11f350:	0a000005 	beq	11f36c <tcp_process_refused_data+0xd4>
          pcb->rcv_wnd++;
  11f354:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f358:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11f35c:	e2833001 	add	r3, r3, #1
  11f360:	e6ff2073 	uxth	r2, r3
  11f364:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f368:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
        }
        TCP_EVENT_CLOSED(pcb, err);
  11f36c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f370:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11f374:	e3530000 	cmp	r3, #0
  11f378:	0a00000a 	beq	11f3a8 <tcp_process_refused_data+0x110>
  11f37c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f380:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11f384:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f388:	e5930010 	ldr	r0, [r3, #16]
  11f38c:	e3a03000 	mov	r3, #0
  11f390:	e3a02000 	mov	r2, #0
  11f394:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f398:	e12fff34 	blx	r4
  11f39c:	e1a03000 	mov	r3, r0
  11f3a0:	e54b300d 	strb	r3, [fp, #-13]
  11f3a4:	ea000001 	b	11f3b0 <tcp_process_refused_data+0x118>
  11f3a8:	e3a03000 	mov	r3, #0
  11f3ac:	e54b300d 	strb	r3, [fp, #-13]
        if (err == ERR_ABRT) {
  11f3b0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f3b4:	e373000d 	cmn	r3, #13
  11f3b8:	1a00000b 	bne	11f3ec <tcp_process_refused_data+0x154>
          return ERR_ABRT;
  11f3bc:	e3e0300c 	mvn	r3, #12
  11f3c0:	ea00000a 	b	11f3f0 <tcp_process_refused_data+0x158>
        }
      }
    } else if (err == ERR_ABRT) {
  11f3c4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f3c8:	e373000d 	cmn	r3, #13
  11f3cc:	1a000001 	bne	11f3d8 <tcp_process_refused_data+0x140>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
  11f3d0:	e3e0300c 	mvn	r3, #12
  11f3d4:	ea000005 	b	11f3f0 <tcp_process_refused_data+0x158>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
  11f3d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f3dc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f3e0:	e5832078 	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
  11f3e4:	e3e03004 	mvn	r3, #4
  11f3e8:	ea000000 	b	11f3f0 <tcp_process_refused_data+0x158>
    }
  }
  return ERR_OK;
  11f3ec:	e3a03000 	mov	r3, #0
}
  11f3f0:	e1a00003 	mov	r0, r3
  11f3f4:	e24bd008 	sub	sp, fp, #8
  11f3f8:	e8bd8810 	pop	{r4, fp, pc}

0011f3fc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  11f3fc:	e92d4800 	push	{fp, lr}
  11f400:	e28db004 	add	fp, sp, #4
  11f404:	e24dd010 	sub	sp, sp, #16
  11f408:	e50b0010 	str	r0, [fp, #-16]
  while (seg != NULL) {
  11f40c:	ea000006 	b	11f42c <tcp_segs_free+0x30>
    struct tcp_seg *next = seg->next;
  11f410:	e51b3010 	ldr	r3, [fp, #-16]
  11f414:	e5933000 	ldr	r3, [r3]
  11f418:	e50b3008 	str	r3, [fp, #-8]
    tcp_seg_free(seg);
  11f41c:	e51b0010 	ldr	r0, [fp, #-16]
  11f420:	eb000007 	bl	11f444 <tcp_seg_free>
    seg = next;
  11f424:	e51b3008 	ldr	r3, [fp, #-8]
  11f428:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL) {
  11f42c:	e51b3010 	ldr	r3, [fp, #-16]
  11f430:	e3530000 	cmp	r3, #0
  11f434:	1afffff5 	bne	11f410 <tcp_segs_free+0x14>
  }
}
  11f438:	e320f000 	nop	{0}
  11f43c:	e24bd004 	sub	sp, fp, #4
  11f440:	e8bd8800 	pop	{fp, pc}

0011f444 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  11f444:	e92d4800 	push	{fp, lr}
  11f448:	e28db004 	add	fp, sp, #4
  11f44c:	e24dd008 	sub	sp, sp, #8
  11f450:	e50b0008 	str	r0, [fp, #-8]
  if (seg != NULL) {
  11f454:	e51b3008 	ldr	r3, [fp, #-8]
  11f458:	e3530000 	cmp	r3, #0
  11f45c:	0a00000a 	beq	11f48c <tcp_seg_free+0x48>
    if (seg->p != NULL) {
  11f460:	e51b3008 	ldr	r3, [fp, #-8]
  11f464:	e5933004 	ldr	r3, [r3, #4]
  11f468:	e3530000 	cmp	r3, #0
  11f46c:	0a000003 	beq	11f480 <tcp_seg_free+0x3c>
      pbuf_free(seg->p);
  11f470:	e51b3008 	ldr	r3, [fp, #-8]
  11f474:	e5933004 	ldr	r3, [r3, #4]
  11f478:	e1a00003 	mov	r0, r3
  11f47c:	ebffee7c 	bl	11ae74 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  11f480:	e51b1008 	ldr	r1, [fp, #-8]
  11f484:	e3a00004 	mov	r0, #4
  11f488:	ebffe76b 	bl	11923c <memp_free>
  }
}
  11f48c:	e320f000 	nop	{0}
  11f490:	e24bd004 	sub	sp, fp, #4
  11f494:	e8bd8800 	pop	{fp, pc}

0011f498 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  11f498:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11f49c:	e28db000 	add	fp, sp, #0
  11f4a0:	e24dd00c 	sub	sp, sp, #12
  11f4a4:	e50b0008 	str	r0, [fp, #-8]
  11f4a8:	e1a03001 	mov	r3, r1
  11f4ac:	e54b3009 	strb	r3, [fp, #-9]
  pcb->prio = prio;
  11f4b0:	e51b3008 	ldr	r3, [fp, #-8]
  11f4b4:	e55b2009 	ldrb	r2, [fp, #-9]
  11f4b8:	e5c32018 	strb	r2, [r3, #24]
}
  11f4bc:	e320f000 	nop	{0}
  11f4c0:	e28bd000 	add	sp, fp, #0
  11f4c4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11f4c8:	e12fff1e 	bx	lr

0011f4cc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  11f4cc:	e92d4800 	push	{fp, lr}
  11f4d0:	e28db004 	add	fp, sp, #4
  11f4d4:	e24dd010 	sub	sp, sp, #16
  11f4d8:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  11f4dc:	e300258f 	movw	r2, #1423	; 0x58f
  11f4e0:	e3071ea0 	movw	r1, #32416	; 0x7ea0
  11f4e4:	e3401014 	movt	r1, #20
  11f4e8:	e3a00004 	mov	r0, #4
  11f4ec:	ebffe6ea 	bl	11909c <memp_malloc_fn>
  11f4f0:	e50b0008 	str	r0, [fp, #-8]
  if (cseg == NULL) {
  11f4f4:	e51b3008 	ldr	r3, [fp, #-8]
  11f4f8:	e3530000 	cmp	r3, #0
  11f4fc:	1a000001 	bne	11f508 <tcp_seg_copy+0x3c>
    return NULL;
  11f500:	e3a03000 	mov	r3, #0
  11f504:	ea000008 	b	11f52c <tcp_seg_copy+0x60>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
  11f508:	e3a02010 	mov	r2, #16
  11f50c:	e51b1010 	ldr	r1, [fp, #-16]
  11f510:	e51b0008 	ldr	r0, [fp, #-8]
  11f514:	eb008610 	bl	140d5c <memcpy>
  pbuf_ref(cseg->p);
  11f518:	e51b3008 	ldr	r3, [fp, #-8]
  11f51c:	e5933004 	ldr	r3, [r3, #4]
  11f520:	e1a00003 	mov	r0, r3
  11f524:	ebffeeec 	bl	11b0dc <pbuf_ref>
  return cseg;
  11f528:	e51b3008 	ldr	r3, [fp, #-8]
}
  11f52c:	e1a00003 	mov	r0, r3
  11f530:	e24bd004 	sub	sp, fp, #4
  11f534:	e8bd8800 	pop	{fp, pc}

0011f538 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  11f538:	e92d4800 	push	{fp, lr}
  11f53c:	e28db004 	add	fp, sp, #4
  11f540:	e24dd010 	sub	sp, sp, #16
  11f544:	e50b0008 	str	r0, [fp, #-8]
  11f548:	e50b100c 	str	r1, [fp, #-12]
  11f54c:	e50b2010 	str	r2, [fp, #-16]
  11f550:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
  11f554:	e51b3010 	ldr	r3, [fp, #-16]
  11f558:	e3530000 	cmp	r3, #0
  11f55c:	0a000007 	beq	11f580 <tcp_recv_null+0x48>
    tcp_recved(pcb, p->tot_len);
  11f560:	e51b3010 	ldr	r3, [fp, #-16]
  11f564:	e1d330b8 	ldrh	r3, [r3, #8]
  11f568:	e1a01003 	mov	r1, r3
  11f56c:	e51b000c 	ldr	r0, [fp, #-12]
  11f570:	ebfffac7 	bl	11e094 <tcp_recved>
    pbuf_free(p);
  11f574:	e51b0010 	ldr	r0, [fp, #-16]
  11f578:	ebffee3d 	bl	11ae74 <pbuf_free>
  11f57c:	ea000006 	b	11f59c <tcp_recv_null+0x64>
  } else if (err == ERR_OK) {
  11f580:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11f584:	e3530000 	cmp	r3, #0
  11f588:	1a000003 	bne	11f59c <tcp_recv_null+0x64>
    return tcp_close(pcb);
  11f58c:	e51b000c 	ldr	r0, [fp, #-12]
  11f590:	ebfff81c 	bl	11d608 <tcp_close>
  11f594:	e1a03000 	mov	r3, r0
  11f598:	ea000000 	b	11f5a0 <tcp_recv_null+0x68>
  }
  return ERR_OK;
  11f59c:	e3a03000 	mov	r3, #0
}
  11f5a0:	e1a00003 	mov	r0, r3
  11f5a4:	e24bd004 	sub	sp, fp, #4
  11f5a8:	e8bd8800 	pop	{fp, pc}

0011f5ac <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
  11f5ac:	e92d4800 	push	{fp, lr}
  11f5b0:	e28db004 	add	fp, sp, #4
  11f5b4:	e24dd018 	sub	sp, sp, #24
  11f5b8:	e1a03000 	mov	r3, r0
  11f5bc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
  11f5c0:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  11f5c4:	e3530000 	cmp	r3, #0
  11f5c8:	ba000001 	blt	11f5d4 <tcp_kill_prio+0x28>
  11f5cc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11f5d0:	ea000000 	b	11f5d8 <tcp_kill_prio+0x2c>
  11f5d4:	e3a0307f 	mov	r3, #127	; 0x7f
  11f5d8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  11f5dc:	e3a03000 	mov	r3, #0
  11f5e0:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f5e4:	e3a03000 	mov	r3, #0
  11f5e8:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f5ec:	e30c3c38 	movw	r3, #52280	; 0xcc38
  11f5f0:	e3403015 	movt	r3, #21
  11f5f4:	e5933000 	ldr	r3, [r3]
  11f5f8:	e50b3008 	str	r3, [fp, #-8]
  11f5fc:	ea00001c 	b	11f674 <tcp_kill_prio+0xc8>
    if (pcb->prio <= mprio &&
  11f600:	e51b3008 	ldr	r3, [fp, #-8]
  11f604:	e5d33018 	ldrb	r3, [r3, #24]
  11f608:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  11f60c:	e1520003 	cmp	r2, r3
  11f610:	3a000014 	bcc	11f668 <tcp_kill_prio+0xbc>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f614:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11f618:	e3403015 	movt	r3, #21
  11f61c:	e5932000 	ldr	r2, [r3]
  11f620:	e51b3008 	ldr	r3, [fp, #-8]
  11f624:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f628:	e0423003 	sub	r3, r2, r3
    if (pcb->prio <= mprio &&
  11f62c:	e51b2010 	ldr	r2, [fp, #-16]
  11f630:	e1520003 	cmp	r2, r3
  11f634:	8a00000b 	bhi	11f668 <tcp_kill_prio+0xbc>
      inactivity = tcp_ticks - pcb->tmr;
  11f638:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11f63c:	e3403015 	movt	r3, #21
  11f640:	e5932000 	ldr	r2, [r3]
  11f644:	e51b3008 	ldr	r3, [fp, #-8]
  11f648:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f64c:	e0423003 	sub	r3, r2, r3
  11f650:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11f654:	e51b3008 	ldr	r3, [fp, #-8]
  11f658:	e50b300c 	str	r3, [fp, #-12]
      mprio = pcb->prio;
  11f65c:	e51b3008 	ldr	r3, [fp, #-8]
  11f660:	e5d33018 	ldrb	r3, [r3, #24]
  11f664:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f668:	e51b3008 	ldr	r3, [fp, #-8]
  11f66c:	e593300c 	ldr	r3, [r3, #12]
  11f670:	e50b3008 	str	r3, [fp, #-8]
  11f674:	e51b3008 	ldr	r3, [fp, #-8]
  11f678:	e3530000 	cmp	r3, #0
  11f67c:	1affffdf 	bne	11f600 <tcp_kill_prio+0x54>
    }
  }
  if (inactive != NULL) {
  11f680:	e51b300c 	ldr	r3, [fp, #-12]
  11f684:	e3530000 	cmp	r3, #0
  11f688:	0a000001 	beq	11f694 <tcp_kill_prio+0xe8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11f68c:	e51b000c 	ldr	r0, [fp, #-12]
  11f690:	ebfff8d0 	bl	11d9d8 <tcp_abort>
  }
}
  11f694:	e320f000 	nop	{0}
  11f698:	e24bd004 	sub	sp, fp, #4
  11f69c:	e8bd8800 	pop	{fp, pc}

0011f6a0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
  11f6a0:	e92d4800 	push	{fp, lr}
  11f6a4:	e28db004 	add	fp, sp, #4
  11f6a8:	e24dd018 	sub	sp, sp, #24
  11f6ac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
  11f6b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f6b4:	e3530008 	cmp	r3, #8
  11f6b8:	0a000009 	beq	11f6e4 <tcp_kill_state+0x44>
  11f6bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f6c0:	e3530009 	cmp	r3, #9
  11f6c4:	0a000006 	beq	11f6e4 <tcp_kill_state+0x44>
  11f6c8:	e3080178 	movw	r0, #33144	; 0x8178
  11f6cc:	e3400014 	movt	r0, #20
  11f6d0:	ebff8e8f 	bl	103114 <rt_kprintf>
  11f6d4:	e30015d7 	movw	r1, #1495	; 0x5d7
  11f6d8:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11f6dc:	e3400014 	movt	r0, #20
  11f6e0:	ebffae73 	bl	10b0b4 <sys_arch_assert>

  inactivity = 0;
  11f6e4:	e3a03000 	mov	r3, #0
  11f6e8:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f6ec:	e3a03000 	mov	r3, #0
  11f6f0:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f6f4:	e30c3c38 	movw	r3, #52280	; 0xcc38
  11f6f8:	e3403015 	movt	r3, #21
  11f6fc:	e5933000 	ldr	r3, [r3]
  11f700:	e50b3008 	str	r3, [fp, #-8]
  11f704:	ea000019 	b	11f770 <tcp_kill_state+0xd0>
    if (pcb->state == state) {
  11f708:	e51b3008 	ldr	r3, [fp, #-8]
  11f70c:	e5933014 	ldr	r3, [r3, #20]
  11f710:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11f714:	e1520003 	cmp	r2, r3
  11f718:	1a000011 	bne	11f764 <tcp_kill_state+0xc4>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f71c:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11f720:	e3403015 	movt	r3, #21
  11f724:	e5932000 	ldr	r2, [r3]
  11f728:	e51b3008 	ldr	r3, [fp, #-8]
  11f72c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f730:	e0423003 	sub	r3, r2, r3
  11f734:	e51b2010 	ldr	r2, [fp, #-16]
  11f738:	e1520003 	cmp	r2, r3
  11f73c:	8a000008 	bhi	11f764 <tcp_kill_state+0xc4>
        inactivity = tcp_ticks - pcb->tmr;
  11f740:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11f744:	e3403015 	movt	r3, #21
  11f748:	e5932000 	ldr	r2, [r3]
  11f74c:	e51b3008 	ldr	r3, [fp, #-8]
  11f750:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f754:	e0423003 	sub	r3, r2, r3
  11f758:	e50b3010 	str	r3, [fp, #-16]
        inactive = pcb;
  11f75c:	e51b3008 	ldr	r3, [fp, #-8]
  11f760:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f764:	e51b3008 	ldr	r3, [fp, #-8]
  11f768:	e593300c 	ldr	r3, [r3, #12]
  11f76c:	e50b3008 	str	r3, [fp, #-8]
  11f770:	e51b3008 	ldr	r3, [fp, #-8]
  11f774:	e3530000 	cmp	r3, #0
  11f778:	1affffe2 	bne	11f708 <tcp_kill_state+0x68>
      }
    }
  }
  if (inactive != NULL) {
  11f77c:	e51b300c 	ldr	r3, [fp, #-12]
  11f780:	e3530000 	cmp	r3, #0
  11f784:	0a000002 	beq	11f794 <tcp_kill_state+0xf4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
  11f788:	e3a01000 	mov	r1, #0
  11f78c:	e51b000c 	ldr	r0, [fp, #-12]
  11f790:	ebfff7f1 	bl	11d75c <tcp_abandon>
  }
}
  11f794:	e320f000 	nop	{0}
  11f798:	e24bd004 	sub	sp, fp, #4
  11f79c:	e8bd8800 	pop	{fp, pc}

0011f7a0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
  11f7a0:	e92d4800 	push	{fp, lr}
  11f7a4:	e28db004 	add	fp, sp, #4
  11f7a8:	e24dd010 	sub	sp, sp, #16
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
  11f7ac:	e3a03000 	mov	r3, #0
  11f7b0:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f7b4:	e3a03000 	mov	r3, #0
  11f7b8:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11f7bc:	e30c3c48 	movw	r3, #52296	; 0xcc48
  11f7c0:	e3403015 	movt	r3, #21
  11f7c4:	e5933000 	ldr	r3, [r3]
  11f7c8:	e50b3008 	str	r3, [fp, #-8]
  11f7cc:	ea000014 	b	11f824 <tcp_kill_timewait+0x84>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f7d0:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11f7d4:	e3403015 	movt	r3, #21
  11f7d8:	e5932000 	ldr	r2, [r3]
  11f7dc:	e51b3008 	ldr	r3, [fp, #-8]
  11f7e0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f7e4:	e0423003 	sub	r3, r2, r3
  11f7e8:	e51b2010 	ldr	r2, [fp, #-16]
  11f7ec:	e1520003 	cmp	r2, r3
  11f7f0:	8a000008 	bhi	11f818 <tcp_kill_timewait+0x78>
      inactivity = tcp_ticks - pcb->tmr;
  11f7f4:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11f7f8:	e3403015 	movt	r3, #21
  11f7fc:	e5932000 	ldr	r2, [r3]
  11f800:	e51b3008 	ldr	r3, [fp, #-8]
  11f804:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f808:	e0423003 	sub	r3, r2, r3
  11f80c:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11f810:	e51b3008 	ldr	r3, [fp, #-8]
  11f814:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11f818:	e51b3008 	ldr	r3, [fp, #-8]
  11f81c:	e593300c 	ldr	r3, [r3, #12]
  11f820:	e50b3008 	str	r3, [fp, #-8]
  11f824:	e51b3008 	ldr	r3, [fp, #-8]
  11f828:	e3530000 	cmp	r3, #0
  11f82c:	1affffe7 	bne	11f7d0 <tcp_kill_timewait+0x30>
    }
  }
  if (inactive != NULL) {
  11f830:	e51b300c 	ldr	r3, [fp, #-12]
  11f834:	e3530000 	cmp	r3, #0
  11f838:	0a000001 	beq	11f844 <tcp_kill_timewait+0xa4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11f83c:	e51b000c 	ldr	r0, [fp, #-12]
  11f840:	ebfff864 	bl	11d9d8 <tcp_abort>
  }
}
  11f844:	e320f000 	nop	{0}
  11f848:	e24bd004 	sub	sp, fp, #4
  11f84c:	e8bd8800 	pop	{fp, pc}

0011f850 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
  11f850:	e92d4800 	push	{fp, lr}
  11f854:	e28db004 	add	fp, sp, #4
  11f858:	e24dd010 	sub	sp, sp, #16
  11f85c:	e1a03000 	mov	r3, r0
  11f860:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f864:	e3002612 	movw	r2, #1554	; 0x612
  11f868:	e3071ea0 	movw	r1, #32416	; 0x7ea0
  11f86c:	e3401014 	movt	r1, #20
  11f870:	e3a00002 	mov	r0, #2
  11f874:	ebffe608 	bl	11909c <memp_malloc_fn>
  11f878:	e50b0008 	str	r0, [fp, #-8]
  if (pcb == NULL) {
  11f87c:	e51b3008 	ldr	r3, [fp, #-8]
  11f880:	e3530000 	cmp	r3, #0
  11f884:	1a000050 	bne	11f9cc <tcp_alloc+0x17c>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
  11f888:	ebffffc4 	bl	11f7a0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f88c:	e3002618 	movw	r2, #1560	; 0x618
  11f890:	e3071ea0 	movw	r1, #32416	; 0x7ea0
  11f894:	e3401014 	movt	r1, #20
  11f898:	e3a00002 	mov	r0, #2
  11f89c:	ebffe5fe 	bl	11909c <memp_malloc_fn>
  11f8a0:	e50b0008 	str	r0, [fp, #-8]
    if (pcb == NULL) {
  11f8a4:	e51b3008 	ldr	r3, [fp, #-8]
  11f8a8:	e3530000 	cmp	r3, #0
  11f8ac:	1a00003c 	bne	11f9a4 <tcp_alloc+0x154>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
  11f8b0:	e3a00009 	mov	r0, #9
  11f8b4:	ebffff79 	bl	11f6a0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f8b8:	e300261e 	movw	r2, #1566	; 0x61e
  11f8bc:	e3071ea0 	movw	r1, #32416	; 0x7ea0
  11f8c0:	e3401014 	movt	r1, #20
  11f8c4:	e3a00002 	mov	r0, #2
  11f8c8:	ebffe5f3 	bl	11909c <memp_malloc_fn>
  11f8cc:	e50b0008 	str	r0, [fp, #-8]
      if (pcb == NULL) {
  11f8d0:	e51b3008 	ldr	r3, [fp, #-8]
  11f8d4:	e3530000 	cmp	r3, #0
  11f8d8:	1a000027 	bne	11f97c <tcp_alloc+0x12c>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
  11f8dc:	e3a00008 	mov	r0, #8
  11f8e0:	ebffff6e 	bl	11f6a0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f8e4:	e3002624 	movw	r2, #1572	; 0x624
  11f8e8:	e3071ea0 	movw	r1, #32416	; 0x7ea0
  11f8ec:	e3401014 	movt	r1, #20
  11f8f0:	e3a00002 	mov	r0, #2
  11f8f4:	ebffe5e8 	bl	11909c <memp_malloc_fn>
  11f8f8:	e50b0008 	str	r0, [fp, #-8]
        if (pcb == NULL) {
  11f8fc:	e51b3008 	ldr	r3, [fp, #-8]
  11f900:	e3530000 	cmp	r3, #0
  11f904:	1a000012 	bne	11f954 <tcp_alloc+0x104>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
  11f908:	e55b300d 	ldrb	r3, [fp, #-13]
  11f90c:	e1a00003 	mov	r0, r3
  11f910:	ebffff25 	bl	11f5ac <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f914:	e300262a 	movw	r2, #1578	; 0x62a
  11f918:	e3071ea0 	movw	r1, #32416	; 0x7ea0
  11f91c:	e3401014 	movt	r1, #20
  11f920:	e3a00002 	mov	r0, #2
  11f924:	ebffe5dc 	bl	11909c <memp_malloc_fn>
  11f928:	e50b0008 	str	r0, [fp, #-8]
          if (pcb != NULL) {
  11f92c:	e51b3008 	ldr	r3, [fp, #-8]
  11f930:	e3530000 	cmp	r3, #0
  11f934:	0a000006 	beq	11f954 <tcp_alloc+0x104>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f938:	e30c3a48 	movw	r3, #51784	; 0xca48
  11f93c:	e3403015 	movt	r3, #21
  11f940:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f944:	e1d320b4 	ldrh	r2, [r3, #4]
  11f948:	e2422001 	sub	r2, r2, #1
  11f94c:	e6ff2072 	uxth	r2, r2
  11f950:	e1c320b4 	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
  11f954:	e51b3008 	ldr	r3, [fp, #-8]
  11f958:	e3530000 	cmp	r3, #0
  11f95c:	0a000006 	beq	11f97c <tcp_alloc+0x12c>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f960:	e30c3a48 	movw	r3, #51784	; 0xca48
  11f964:	e3403015 	movt	r3, #21
  11f968:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f96c:	e1d320b4 	ldrh	r2, [r3, #4]
  11f970:	e2422001 	sub	r2, r2, #1
  11f974:	e6ff2072 	uxth	r2, r2
  11f978:	e1c320b4 	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
  11f97c:	e51b3008 	ldr	r3, [fp, #-8]
  11f980:	e3530000 	cmp	r3, #0
  11f984:	0a000006 	beq	11f9a4 <tcp_alloc+0x154>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f988:	e30c3a48 	movw	r3, #51784	; 0xca48
  11f98c:	e3403015 	movt	r3, #21
  11f990:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f994:	e1d320b4 	ldrh	r2, [r3, #4]
  11f998:	e2422001 	sub	r2, r2, #1
  11f99c:	e6ff2072 	uxth	r2, r2
  11f9a0:	e1c320b4 	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
  11f9a4:	e51b3008 	ldr	r3, [fp, #-8]
  11f9a8:	e3530000 	cmp	r3, #0
  11f9ac:	0a000006 	beq	11f9cc <tcp_alloc+0x17c>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f9b0:	e30c3a48 	movw	r3, #51784	; 0xca48
  11f9b4:	e3403015 	movt	r3, #21
  11f9b8:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f9bc:	e1d320b4 	ldrh	r2, [r3, #4]
  11f9c0:	e2422001 	sub	r2, r2, #1
  11f9c4:	e6ff2072 	uxth	r2, r2
  11f9c8:	e1c320b4 	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
  11f9cc:	e51b3008 	ldr	r3, [fp, #-8]
  11f9d0:	e3530000 	cmp	r3, #0
  11f9d4:	0a00003e 	beq	11fad4 <tcp_alloc+0x284>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
  11f9d8:	e3a020a4 	mov	r2, #164	; 0xa4
  11f9dc:	e3a01000 	mov	r1, #0
  11f9e0:	e51b0008 	ldr	r0, [fp, #-8]
  11f9e4:	eb008614 	bl	14123c <memset>
    pcb->prio = prio;
  11f9e8:	e51b3008 	ldr	r3, [fp, #-8]
  11f9ec:	e55b200d 	ldrb	r2, [fp, #-13]
  11f9f0:	e5c32018 	strb	r2, [r3, #24]
    pcb->snd_buf = TCP_SND_BUF;
  11f9f4:	e51b3008 	ldr	r3, [fp, #-8]
  11f9f8:	e3a02a02 	mov	r2, #8192	; 0x2000
  11f9fc:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11fa00:	e51b3008 	ldr	r3, [fp, #-8]
  11fa04:	e3a02a02 	mov	r2, #8192	; 0x2000
  11fa08:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11fa0c:	e51b3008 	ldr	r3, [fp, #-8]
  11fa10:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11fa14:	e51b3008 	ldr	r3, [fp, #-8]
  11fa18:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    pcb->ttl = TCP_TTL;
  11fa1c:	e51b3008 	ldr	r3, [fp, #-8]
  11fa20:	e3e02000 	mvn	r2, #0
  11fa24:	e5c3200a 	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
  11fa28:	e51b3008 	ldr	r3, [fp, #-8]
  11fa2c:	e3a02f86 	mov	r2, #536	; 0x218
  11fa30:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  11fa34:	e51b3008 	ldr	r3, [fp, #-8]
  11fa38:	e3a02006 	mov	r2, #6
  11fa3c:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  11fa40:	e51b3008 	ldr	r3, [fp, #-8]
  11fa44:	e3a02006 	mov	r2, #6
  11fa48:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
    pcb->rtime = -1;
  11fa4c:	e51b3008 	ldr	r3, [fp, #-8]
  11fa50:	e3e02000 	mvn	r2, #0
  11fa54:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
    pcb->cwnd = 1;
  11fa58:	e51b3008 	ldr	r3, [fp, #-8]
  11fa5c:	e3a02001 	mov	r2, #1
  11fa60:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->tmr = tcp_ticks;
  11fa64:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  11fa68:	e3403015 	movt	r3, #21
  11fa6c:	e5932000 	ldr	r2, [r3]
  11fa70:	e51b3008 	ldr	r3, [fp, #-8]
  11fa74:	e5832024 	str	r2, [r3, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
  11fa78:	e30e3241 	movw	r3, #57921	; 0xe241
  11fa7c:	e3403014 	movt	r3, #20
  11fa80:	e5d32000 	ldrb	r2, [r3]
  11fa84:	e51b3008 	ldr	r3, [fp, #-8]
  11fa88:	e5c32021 	strb	r2, [r3, #33]	; 0x21
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
  11fa8c:	e51b3008 	ldr	r3, [fp, #-8]
  11fa90:	e3a02a02 	mov	r2, #8192	; 0x2000
  11fa94:	e1c324be 	strh	r2, [r3, #78]	; 0x4e

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
  11fa98:	e51b2008 	ldr	r2, [fp, #-8]
  11fa9c:	e30f3538 	movw	r3, #62776	; 0xf538
  11faa0:	e3403011 	movt	r3, #17
  11faa4:	e5823084 	str	r3, [r2, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  11faa8:	e51b2008 	ldr	r2, [fp, #-8]
  11faac:	e3a03cdd 	mov	r3, #56576	; 0xdd00
  11fab0:	e340306d 	movt	r3, #109	; 0x6d
  11fab4:	e5823094 	str	r3, [r2, #148]	; 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
  11fab8:	e51b2008 	ldr	r2, [fp, #-8]
  11fabc:	e30234f8 	movw	r3, #9464	; 0x24f8
  11fac0:	e3403001 	movt	r3, #1
  11fac4:	e5823098 	str	r3, [r2, #152]	; 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
  11fac8:	e51b3008 	ldr	r3, [fp, #-8]
  11facc:	e3a02009 	mov	r2, #9
  11fad0:	e583209c 	str	r2, [r3, #156]	; 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
  11fad4:	e51b3008 	ldr	r3, [fp, #-8]
}
  11fad8:	e1a00003 	mov	r0, r3
  11fadc:	e24bd004 	sub	sp, fp, #4
  11fae0:	e8bd8800 	pop	{fp, pc}

0011fae4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  11fae4:	e92d4800 	push	{fp, lr}
  11fae8:	e28db004 	add	fp, sp, #4
  return tcp_alloc(TCP_PRIO_NORMAL);
  11faec:	e3a00040 	mov	r0, #64	; 0x40
  11faf0:	ebffff56 	bl	11f850 <tcp_alloc>
  11faf4:	e1a03000 	mov	r3, r0
}
  11faf8:	e1a00003 	mov	r0, r3
  11fafc:	e8bd8800 	pop	{fp, pc}

0011fb00 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
  11fb00:	e92d4800 	push	{fp, lr}
  11fb04:	e28db004 	add	fp, sp, #4
  11fb08:	e24dd010 	sub	sp, sp, #16
  11fb0c:	e1a03000 	mov	r3, r0
  11fb10:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
  11fb14:	e3a00040 	mov	r0, #64	; 0x40
  11fb18:	ebffff4c 	bl	11f850 <tcp_alloc>
  11fb1c:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11fb20:	e51b3008 	ldr	r3, [fp, #-8]
}
  11fb24:	e1a00003 	mov	r0, r3
  11fb28:	e24bd004 	sub	sp, fp, #4
  11fb2c:	e8bd8800 	pop	{fp, pc}

0011fb30 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  11fb30:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11fb34:	e28db000 	add	fp, sp, #0
  11fb38:	e24dd00c 	sub	sp, sp, #12
  11fb3c:	e50b0008 	str	r0, [fp, #-8]
  11fb40:	e50b100c 	str	r1, [fp, #-12]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
  11fb44:	e51b3008 	ldr	r3, [fp, #-8]
  11fb48:	e3530000 	cmp	r3, #0
  11fb4c:	0a000002 	beq	11fb5c <tcp_arg+0x2c>
    pcb->callback_arg = arg;
  11fb50:	e51b3008 	ldr	r3, [fp, #-8]
  11fb54:	e51b200c 	ldr	r2, [fp, #-12]
  11fb58:	e5832010 	str	r2, [r3, #16]
  }
}
  11fb5c:	e320f000 	nop	{0}
  11fb60:	e28bd000 	add	sp, fp, #0
  11fb64:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11fb68:	e12fff1e 	bx	lr

0011fb6c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  11fb6c:	e92d4800 	push	{fp, lr}
  11fb70:	e28db004 	add	fp, sp, #4
  11fb74:	e24dd008 	sub	sp, sp, #8
  11fb78:	e50b0008 	str	r0, [fp, #-8]
  11fb7c:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11fb80:	e51b3008 	ldr	r3, [fp, #-8]
  11fb84:	e3530000 	cmp	r3, #0
  11fb88:	0a00000d 	beq	11fbc4 <tcp_recv+0x58>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  11fb8c:	e51b3008 	ldr	r3, [fp, #-8]
  11fb90:	e5933014 	ldr	r3, [r3, #20]
  11fb94:	e3530001 	cmp	r3, #1
  11fb98:	1a000006 	bne	11fbb8 <tcp_recv+0x4c>
  11fb9c:	e3080188 	movw	r0, #33160	; 0x8188
  11fba0:	e3400014 	movt	r0, #20
  11fba4:	ebff8d5a 	bl	103114 <rt_kprintf>
  11fba8:	e30016b6 	movw	r1, #1718	; 0x6b6
  11fbac:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11fbb0:	e3400014 	movt	r0, #20
  11fbb4:	ebffad3e 	bl	10b0b4 <sys_arch_assert>
    pcb->recv = recv;
  11fbb8:	e51b3008 	ldr	r3, [fp, #-8]
  11fbbc:	e51b200c 	ldr	r2, [fp, #-12]
  11fbc0:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
}
  11fbc4:	e320f000 	nop	{0}
  11fbc8:	e24bd004 	sub	sp, fp, #4
  11fbcc:	e8bd8800 	pop	{fp, pc}

0011fbd0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  11fbd0:	e92d4800 	push	{fp, lr}
  11fbd4:	e28db004 	add	fp, sp, #4
  11fbd8:	e24dd008 	sub	sp, sp, #8
  11fbdc:	e50b0008 	str	r0, [fp, #-8]
  11fbe0:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11fbe4:	e51b3008 	ldr	r3, [fp, #-8]
  11fbe8:	e3530000 	cmp	r3, #0
  11fbec:	0a00000d 	beq	11fc28 <tcp_sent+0x58>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  11fbf0:	e51b3008 	ldr	r3, [fp, #-8]
  11fbf4:	e5933014 	ldr	r3, [r3, #20]
  11fbf8:	e3530001 	cmp	r3, #1
  11fbfc:	1a000006 	bne	11fc1c <tcp_sent+0x4c>
  11fc00:	e30801b0 	movw	r0, #33200	; 0x81b0
  11fc04:	e3400014 	movt	r0, #20
  11fc08:	ebff8d41 	bl	103114 <rt_kprintf>
  11fc0c:	e30016c7 	movw	r1, #1735	; 0x6c7
  11fc10:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11fc14:	e3400014 	movt	r0, #20
  11fc18:	ebffad25 	bl	10b0b4 <sys_arch_assert>
    pcb->sent = sent;
  11fc1c:	e51b3008 	ldr	r3, [fp, #-8]
  11fc20:	e51b200c 	ldr	r2, [fp, #-12]
  11fc24:	e5832080 	str	r2, [r3, #128]	; 0x80
  }
}
  11fc28:	e320f000 	nop	{0}
  11fc2c:	e24bd004 	sub	sp, fp, #4
  11fc30:	e8bd8800 	pop	{fp, pc}

0011fc34 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  11fc34:	e92d4800 	push	{fp, lr}
  11fc38:	e28db004 	add	fp, sp, #4
  11fc3c:	e24dd008 	sub	sp, sp, #8
  11fc40:	e50b0008 	str	r0, [fp, #-8]
  11fc44:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11fc48:	e51b3008 	ldr	r3, [fp, #-8]
  11fc4c:	e3530000 	cmp	r3, #0
  11fc50:	0a00000d 	beq	11fc8c <tcp_err+0x58>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  11fc54:	e51b3008 	ldr	r3, [fp, #-8]
  11fc58:	e5933014 	ldr	r3, [r3, #20]
  11fc5c:	e3530001 	cmp	r3, #1
  11fc60:	1a000006 	bne	11fc80 <tcp_err+0x4c>
  11fc64:	e30801d8 	movw	r0, #33240	; 0x81d8
  11fc68:	e3400014 	movt	r0, #20
  11fc6c:	ebff8d28 	bl	103114 <rt_kprintf>
  11fc70:	e30016db 	movw	r1, #1755	; 0x6db
  11fc74:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11fc78:	e3400014 	movt	r0, #20
  11fc7c:	ebffad0c 	bl	10b0b4 <sys_arch_assert>
    pcb->errf = err;
  11fc80:	e51b3008 	ldr	r3, [fp, #-8]
  11fc84:	e51b200c 	ldr	r2, [fp, #-12]
  11fc88:	e5832090 	str	r2, [r3, #144]	; 0x90
  }
}
  11fc8c:	e320f000 	nop	{0}
  11fc90:	e24bd004 	sub	sp, fp, #4
  11fc94:	e8bd8800 	pop	{fp, pc}

0011fc98 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  11fc98:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11fc9c:	e28db000 	add	fp, sp, #0
  11fca0:	e24dd014 	sub	sp, sp, #20
  11fca4:	e50b0010 	str	r0, [fp, #-16]
  11fca8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
  11fcac:	e51b3010 	ldr	r3, [fp, #-16]
  11fcb0:	e3530000 	cmp	r3, #0
  11fcb4:	0a000008 	beq	11fcdc <tcp_accept+0x44>
  11fcb8:	e51b3010 	ldr	r3, [fp, #-16]
  11fcbc:	e5933014 	ldr	r3, [r3, #20]
  11fcc0:	e3530001 	cmp	r3, #1
  11fcc4:	1a000004 	bne	11fcdc <tcp_accept+0x44>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
  11fcc8:	e51b3010 	ldr	r3, [fp, #-16]
  11fccc:	e50b3008 	str	r3, [fp, #-8]
    lpcb->accept = accept;
  11fcd0:	e51b3008 	ldr	r3, [fp, #-8]
  11fcd4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fcd8:	e583201c 	str	r2, [r3, #28]
  }
}
  11fcdc:	e320f000 	nop	{0}
  11fce0:	e28bd000 	add	sp, fp, #0
  11fce4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11fce8:	e12fff1e 	bx	lr

0011fcec <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  11fcec:	e92d4800 	push	{fp, lr}
  11fcf0:	e28db004 	add	fp, sp, #4
  11fcf4:	e24dd010 	sub	sp, sp, #16
  11fcf8:	e50b0008 	str	r0, [fp, #-8]
  11fcfc:	e50b100c 	str	r1, [fp, #-12]
  11fd00:	e1a03002 	mov	r3, r2
  11fd04:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
  11fd08:	e51b3008 	ldr	r3, [fp, #-8]
  11fd0c:	e5933014 	ldr	r3, [r3, #20]
  11fd10:	e3530001 	cmp	r3, #1
  11fd14:	1a000006 	bne	11fd34 <tcp_poll+0x48>
  11fd18:	e3080200 	movw	r0, #33280	; 0x8200
  11fd1c:	e3400014 	movt	r0, #20
  11fd20:	ebff8cfb 	bl	103114 <rt_kprintf>
  11fd24:	e30016fe 	movw	r1, #1790	; 0x6fe
  11fd28:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11fd2c:	e3400014 	movt	r0, #20
  11fd30:	ebffacdf 	bl	10b0b4 <sys_arch_assert>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  11fd34:	e51b3008 	ldr	r3, [fp, #-8]
  11fd38:	e51b200c 	ldr	r2, [fp, #-12]
  11fd3c:	e583208c 	str	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
  11fd40:	e51b3008 	ldr	r3, [fp, #-8]
  11fd44:	e55b200d 	ldrb	r2, [fp, #-13]
  11fd48:	e5c32020 	strb	r2, [r3, #32]
}
  11fd4c:	e320f000 	nop	{0}
  11fd50:	e24bd004 	sub	sp, fp, #4
  11fd54:	e8bd8800 	pop	{fp, pc}

0011fd58 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  11fd58:	e92d4800 	push	{fp, lr}
  11fd5c:	e28db004 	add	fp, sp, #4
  11fd60:	e24dd008 	sub	sp, sp, #8
  11fd64:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->state != CLOSED &&
  11fd68:	e51b3008 	ldr	r3, [fp, #-8]
  11fd6c:	e5933014 	ldr	r3, [r3, #20]
  11fd70:	e3530000 	cmp	r3, #0
  11fd74:	0a00002e 	beq	11fe34 <tcp_pcb_purge+0xdc>
     pcb->state != TIME_WAIT &&
  11fd78:	e51b3008 	ldr	r3, [fp, #-8]
  11fd7c:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != CLOSED &&
  11fd80:	e353000a 	cmp	r3, #10
  11fd84:	0a00002a 	beq	11fe34 <tcp_pcb_purge+0xdc>
     pcb->state != LISTEN) {
  11fd88:	e51b3008 	ldr	r3, [fp, #-8]
  11fd8c:	e5933014 	ldr	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
  11fd90:	e3530001 	cmp	r3, #1
  11fd94:	0a000026 	beq	11fe34 <tcp_pcb_purge+0xdc>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
  11fd98:	e51b3008 	ldr	r3, [fp, #-8]
  11fd9c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11fda0:	e3530000 	cmp	r3, #0
  11fda4:	0a000006 	beq	11fdc4 <tcp_pcb_purge+0x6c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  11fda8:	e51b3008 	ldr	r3, [fp, #-8]
  11fdac:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11fdb0:	e1a00003 	mov	r0, r3
  11fdb4:	ebffec2e 	bl	11ae74 <pbuf_free>
      pcb->refused_data = NULL;
  11fdb8:	e51b3008 	ldr	r3, [fp, #-8]
  11fdbc:	e3a02000 	mov	r2, #0
  11fdc0:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
  11fdc4:	e51b3008 	ldr	r3, [fp, #-8]
  11fdc8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11fdcc:	e1a00003 	mov	r0, r3
  11fdd0:	ebfffd89 	bl	11f3fc <tcp_segs_free>
    pcb->ooseq = NULL;
  11fdd4:	e51b3008 	ldr	r3, [fp, #-8]
  11fdd8:	e3a02000 	mov	r2, #0
  11fddc:	e5832074 	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  11fde0:	e51b3008 	ldr	r3, [fp, #-8]
  11fde4:	e3e02000 	mvn	r2, #0
  11fde8:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
  11fdec:	e51b3008 	ldr	r3, [fp, #-8]
  11fdf0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11fdf4:	e1a00003 	mov	r0, r3
  11fdf8:	ebfffd7f 	bl	11f3fc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
  11fdfc:	e51b3008 	ldr	r3, [fp, #-8]
  11fe00:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11fe04:	e1a00003 	mov	r0, r3
  11fe08:	ebfffd7b 	bl	11f3fc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
  11fe0c:	e51b3008 	ldr	r3, [fp, #-8]
  11fe10:	e3a02000 	mov	r2, #0
  11fe14:	e583206c 	str	r2, [r3, #108]	; 0x6c
  11fe18:	e51b3008 	ldr	r3, [fp, #-8]
  11fe1c:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  11fe20:	e51b3008 	ldr	r3, [fp, #-8]
  11fe24:	e5832070 	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  11fe28:	e51b3008 	ldr	r3, [fp, #-8]
  11fe2c:	e3a02000 	mov	r2, #0
  11fe30:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
  11fe34:	e320f000 	nop	{0}
  11fe38:	e24bd004 	sub	sp, fp, #4
  11fe3c:	e8bd8800 	pop	{fp, pc}

0011fe40 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  11fe40:	e92d4800 	push	{fp, lr}
  11fe44:	e28db004 	add	fp, sp, #4
  11fe48:	e24dd010 	sub	sp, sp, #16
  11fe4c:	e50b0010 	str	r0, [fp, #-16]
  11fe50:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  TCP_RMV(pcblist, pcb);
  11fe54:	e51b3010 	ldr	r3, [fp, #-16]
  11fe58:	e5933000 	ldr	r3, [r3]
  11fe5c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fe60:	e1520003 	cmp	r2, r3
  11fe64:	1a000005 	bne	11fe80 <tcp_pcb_remove+0x40>
  11fe68:	e51b3010 	ldr	r3, [fp, #-16]
  11fe6c:	e5933000 	ldr	r3, [r3]
  11fe70:	e593200c 	ldr	r2, [r3, #12]
  11fe74:	e51b3010 	ldr	r3, [fp, #-16]
  11fe78:	e5832000 	str	r2, [r3]
  11fe7c:	ea000013 	b	11fed0 <tcp_pcb_remove+0x90>
  11fe80:	e51b3010 	ldr	r3, [fp, #-16]
  11fe84:	e5933000 	ldr	r3, [r3]
  11fe88:	e50b3008 	str	r3, [fp, #-8]
  11fe8c:	ea00000c 	b	11fec4 <tcp_pcb_remove+0x84>
  11fe90:	e51b3008 	ldr	r3, [fp, #-8]
  11fe94:	e593300c 	ldr	r3, [r3, #12]
  11fe98:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fe9c:	e1520003 	cmp	r2, r3
  11fea0:	1a000004 	bne	11feb8 <tcp_pcb_remove+0x78>
  11fea4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fea8:	e593200c 	ldr	r2, [r3, #12]
  11feac:	e51b3008 	ldr	r3, [fp, #-8]
  11feb0:	e583200c 	str	r2, [r3, #12]
  11feb4:	ea000005 	b	11fed0 <tcp_pcb_remove+0x90>
  11feb8:	e51b3008 	ldr	r3, [fp, #-8]
  11febc:	e593300c 	ldr	r3, [r3, #12]
  11fec0:	e50b3008 	str	r3, [fp, #-8]
  11fec4:	e51b3008 	ldr	r3, [fp, #-8]
  11fec8:	e3530000 	cmp	r3, #0
  11fecc:	1affffef 	bne	11fe90 <tcp_pcb_remove+0x50>
  11fed0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fed4:	e3a02000 	mov	r2, #0
  11fed8:	e583200c 	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
  11fedc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11fee0:	ebffff9c 	bl	11fd58 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  11fee4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fee8:	e5933014 	ldr	r3, [r3, #20]
  11feec:	e353000a 	cmp	r3, #10
  11fef0:	0a000010 	beq	11ff38 <tcp_pcb_remove+0xf8>
     pcb->state != LISTEN &&
  11fef4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fef8:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
  11fefc:	e3530001 	cmp	r3, #1
  11ff00:	0a00000c 	beq	11ff38 <tcp_pcb_remove+0xf8>
     pcb->flags & TF_ACK_DELAY) {
  11ff04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff08:	e5d3301e 	ldrb	r3, [r3, #30]
  11ff0c:	e2033001 	and	r3, r3, #1
     pcb->state != LISTEN &&
  11ff10:	e3530000 	cmp	r3, #0
  11ff14:	0a000007 	beq	11ff38 <tcp_pcb_remove+0xf8>
    pcb->flags |= TF_ACK_NOW;
  11ff18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff1c:	e5d3301e 	ldrb	r3, [r3, #30]
  11ff20:	e3833002 	orr	r3, r3, #2
  11ff24:	e6ef2073 	uxtb	r2, r3
  11ff28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff2c:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  11ff30:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11ff34:	eb0017f9 	bl	125f20 <tcp_output>
  }

  if (pcb->state != LISTEN) {
  11ff38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff3c:	e5933014 	ldr	r3, [r3, #20]
  11ff40:	e3530001 	cmp	r3, #1
  11ff44:	0a000020 	beq	11ffcc <tcp_pcb_remove+0x18c>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
  11ff48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff4c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11ff50:	e3530000 	cmp	r3, #0
  11ff54:	0a000006 	beq	11ff74 <tcp_pcb_remove+0x134>
  11ff58:	e3080220 	movw	r0, #33312	; 0x8220
  11ff5c:	e3400014 	movt	r0, #20
  11ff60:	ebff8c6b 	bl	103114 <rt_kprintf>
  11ff64:	e300174e 	movw	r1, #1870	; 0x74e
  11ff68:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11ff6c:	e3400014 	movt	r0, #20
  11ff70:	ebffac4f 	bl	10b0b4 <sys_arch_assert>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
  11ff74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff78:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11ff7c:	e3530000 	cmp	r3, #0
  11ff80:	0a000006 	beq	11ffa0 <tcp_pcb_remove+0x160>
  11ff84:	e3080238 	movw	r0, #33336	; 0x8238
  11ff88:	e3400014 	movt	r0, #20
  11ff8c:	ebff8c60 	bl	103114 <rt_kprintf>
  11ff90:	e300174f 	movw	r1, #1871	; 0x74f
  11ff94:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11ff98:	e3400014 	movt	r0, #20
  11ff9c:	ebffac44 	bl	10b0b4 <sys_arch_assert>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
  11ffa0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ffa4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11ffa8:	e3530000 	cmp	r3, #0
  11ffac:	0a000006 	beq	11ffcc <tcp_pcb_remove+0x18c>
  11ffb0:	e3080254 	movw	r0, #33364	; 0x8254
  11ffb4:	e3400014 	movt	r0, #20
  11ffb8:	ebff8c55 	bl	103114 <rt_kprintf>
  11ffbc:	e3001751 	movw	r1, #1873	; 0x751
  11ffc0:	e3070ea0 	movw	r0, #32416	; 0x7ea0
  11ffc4:	e3400014 	movt	r0, #20
  11ffc8:	ebffac39 	bl	10b0b4 <sys_arch_assert>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  11ffcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ffd0:	e3a02000 	mov	r2, #0
  11ffd4:	e5832014 	str	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
  11ffd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ffdc:	e3a02000 	mov	r2, #0
  11ffe0:	e1c321ba 	strh	r2, [r3, #26]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
  11ffe4:	e320f000 	nop	{0}
  11ffe8:	e24bd004 	sub	sp, fp, #4
  11ffec:	e8bd8800 	pop	{fp, pc}

0011fff0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
  11fff0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11fff4:	e28db000 	add	fp, sp, #0
  11fff8:	e24dd00c 	sub	sp, sp, #12
  11fffc:	e50b0008 	str	r0, [fp, #-8]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
  120000:	e30d3034 	movw	r3, #53300	; 0xd034
  120004:	e3403014 	movt	r3, #20
  120008:	e5932000 	ldr	r2, [r3]
  12000c:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  120010:	e3403015 	movt	r3, #21
  120014:	e5933000 	ldr	r3, [r3]
  120018:	e0822003 	add	r2, r2, r3
  12001c:	e30d3034 	movw	r3, #53300	; 0xd034
  120020:	e3403014 	movt	r3, #20
  120024:	e5832000 	str	r2, [r3]
  return iss;
  120028:	e30d3034 	movw	r3, #53300	; 0xd034
  12002c:	e3403014 	movt	r3, #20
  120030:	e5933000 	ldr	r3, [r3]
#endif /* LWIP_HOOK_TCP_ISN */
}
  120034:	e1a00003 	mov	r0, r3
  120038:	e28bd000 	add	sp, fp, #0
  12003c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  120040:	e12fff1e 	bx	lr

00120044 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
  120044:	e92d4800 	push	{fp, lr}
  120048:	e28db004 	add	fp, sp, #4
  12004c:	e24dd010 	sub	sp, sp, #16
  120050:	e1a03000 	mov	r3, r0
  120054:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  120058:	e14b30be 	strh	r3, [fp, #-14]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
  12005c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  120060:	eb00443c 	bl	131158 <ip4_route>
  120064:	e50b0008 	str	r0, [fp, #-8]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
  120068:	e51b3008 	ldr	r3, [fp, #-8]
  12006c:	e3530000 	cmp	r3, #0
  120070:	1a000001 	bne	12007c <tcp_eff_send_mss_impl+0x38>
      return sendmss;
  120074:	e15b30be 	ldrh	r3, [fp, #-14]
  120078:	ea00000f 	b	1200bc <tcp_eff_send_mss_impl+0x78>
    }
    mtu = outif->mtu;
  12007c:	e51b3008 	ldr	r3, [fp, #-8]
  120080:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  120084:	e14b30ba 	strh	r3, [fp, #-10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
  120088:	e15b30fa 	ldrsh	r3, [fp, #-10]
  12008c:	e3530000 	cmp	r3, #0
  120090:	0a000008 	beq	1200b8 <tcp_eff_send_mss_impl+0x74>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
  120094:	e15b30ba 	ldrh	r3, [fp, #-10]
  120098:	e2433028 	sub	r3, r3, #40	; 0x28
  12009c:	e14b30bc 	strh	r3, [fp, #-12]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
  1200a0:	e15b20bc 	ldrh	r2, [fp, #-12]
  1200a4:	e15b30be 	ldrh	r3, [fp, #-14]
  1200a8:	e1520003 	cmp	r2, r3
  1200ac:	31a03002 	movcc	r3, r2
  1200b0:	21a03003 	movcs	r3, r3
  1200b4:	e14b30be 	strh	r3, [fp, #-14]
  }
  return sendmss;
  1200b8:	e15b30be 	ldrh	r3, [fp, #-14]
}
  1200bc:	e1a00003 	mov	r0, r3
  1200c0:	e24bd004 	sub	sp, fp, #4
  1200c4:	e8bd8800 	pop	{fp, pc}

001200c8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
  1200c8:	e92d4800 	push	{fp, lr}
  1200cc:	e28db004 	add	fp, sp, #4
  1200d0:	e24dd010 	sub	sp, sp, #16
  1200d4:	e50b0010 	str	r0, [fp, #-16]
  1200d8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  1200dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1200e0:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  1200e4:	ea000010 	b	12012c <tcp_netif_ip_addr_changed_pcblist+0x64>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
  1200e8:	e51b3008 	ldr	r3, [fp, #-8]
  1200ec:	e5932000 	ldr	r2, [r3]
  1200f0:	e51b3010 	ldr	r3, [fp, #-16]
  1200f4:	e5933000 	ldr	r3, [r3]
  1200f8:	e1520003 	cmp	r2, r3
  1200fc:	1a000007 	bne	120120 <tcp_netif_ip_addr_changed_pcblist+0x58>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
  120100:	e51b3008 	ldr	r3, [fp, #-8]
  120104:	e593300c 	ldr	r3, [r3, #12]
  120108:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
  12010c:	e51b0008 	ldr	r0, [fp, #-8]
  120110:	ebfff630 	bl	11d9d8 <tcp_abort>
      pcb = next;
  120114:	e51b300c 	ldr	r3, [fp, #-12]
  120118:	e50b3008 	str	r3, [fp, #-8]
  12011c:	ea000002 	b	12012c <tcp_netif_ip_addr_changed_pcblist+0x64>
    } else {
      pcb = pcb->next;
  120120:	e51b3008 	ldr	r3, [fp, #-8]
  120124:	e593300c 	ldr	r3, [r3, #12]
  120128:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  12012c:	e51b3008 	ldr	r3, [fp, #-8]
  120130:	e3530000 	cmp	r3, #0
  120134:	1affffeb 	bne	1200e8 <tcp_netif_ip_addr_changed_pcblist+0x20>
    }
  }
}
  120138:	e320f000 	nop	{0}
  12013c:	e24bd004 	sub	sp, fp, #4
  120140:	e8bd8800 	pop	{fp, pc}

00120144 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  120144:	e92d4800 	push	{fp, lr}
  120148:	e28db004 	add	fp, sp, #4
  12014c:	e24dd010 	sub	sp, sp, #16
  120150:	e50b0010 	str	r0, [fp, #-16]
  120154:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
  120158:	e51b3010 	ldr	r3, [fp, #-16]
  12015c:	e3530000 	cmp	r3, #0
  120160:	0a00002d 	beq	12021c <tcp_netif_ip_addr_changed+0xd8>
  120164:	e51b3010 	ldr	r3, [fp, #-16]
  120168:	e5933000 	ldr	r3, [r3]
  12016c:	e3530000 	cmp	r3, #0
  120170:	0a000029 	beq	12021c <tcp_netif_ip_addr_changed+0xd8>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
  120174:	e30c3c38 	movw	r3, #52280	; 0xcc38
  120178:	e3403015 	movt	r3, #21
  12017c:	e5933000 	ldr	r3, [r3]
  120180:	e1a01003 	mov	r1, r3
  120184:	e51b0010 	ldr	r0, [fp, #-16]
  120188:	ebffffce 	bl	1200c8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
  12018c:	e30c3c44 	movw	r3, #52292	; 0xcc44
  120190:	e3403015 	movt	r3, #21
  120194:	e5933000 	ldr	r3, [r3]
  120198:	e1a01003 	mov	r1, r3
  12019c:	e51b0010 	ldr	r0, [fp, #-16]
  1201a0:	ebffffc8 	bl	1200c8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
  1201a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1201a8:	e3530000 	cmp	r3, #0
  1201ac:	0a00001a 	beq	12021c <tcp_netif_ip_addr_changed+0xd8>
  1201b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1201b4:	e5933000 	ldr	r3, [r3]
  1201b8:	e3530000 	cmp	r3, #0
  1201bc:	0a000016 	beq	12021c <tcp_netif_ip_addr_changed+0xd8>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  1201c0:	e30c3c40 	movw	r3, #52288	; 0xcc40
  1201c4:	e3403015 	movt	r3, #21
  1201c8:	e5933000 	ldr	r3, [r3]
  1201cc:	e50b3008 	str	r3, [fp, #-8]
  1201d0:	ea00000e 	b	120210 <tcp_netif_ip_addr_changed+0xcc>
        next = lpcb->next;
  1201d4:	e51b3008 	ldr	r3, [fp, #-8]
  1201d8:	e593300c 	ldr	r3, [r3, #12]
  1201dc:	e50b300c 	str	r3, [fp, #-12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
  1201e0:	e51b3008 	ldr	r3, [fp, #-8]
  1201e4:	e5932000 	ldr	r2, [r3]
  1201e8:	e51b3010 	ldr	r3, [fp, #-16]
  1201ec:	e5933000 	ldr	r3, [r3]
  1201f0:	e1520003 	cmp	r2, r3
  1201f4:	1a000003 	bne	120208 <tcp_netif_ip_addr_changed+0xc4>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
  1201f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1201fc:	e5932000 	ldr	r2, [r3]
  120200:	e51b3008 	ldr	r3, [fp, #-8]
  120204:	e5832000 	str	r2, [r3]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  120208:	e51b300c 	ldr	r3, [fp, #-12]
  12020c:	e50b3008 	str	r3, [fp, #-8]
  120210:	e51b3008 	ldr	r3, [fp, #-8]
  120214:	e3530000 	cmp	r3, #0
  120218:	1affffed 	bne	1201d4 <tcp_netif_ip_addr_changed+0x90>
        }
      }
    }
  }
}
  12021c:	e320f000 	nop	{0}
  120220:	e24bd004 	sub	sp, fp, #4
  120224:	e8bd8800 	pop	{fp, pc}

00120228 <tcp_debug_state_str>:

const char*
tcp_debug_state_str(enum tcp_state s)
{
  120228:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12022c:	e28db000 	add	fp, sp, #0
  120230:	e24dd00c 	sub	sp, sp, #12
  120234:	e50b0008 	str	r0, [fp, #-8]
  return tcp_state_str[s];
  120238:	e3073e40 	movw	r3, #32320	; 0x7e40
  12023c:	e3403014 	movt	r3, #20
  120240:	e51b2008 	ldr	r2, [fp, #-8]
  120244:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  120248:	e1a00003 	mov	r0, r3
  12024c:	e28bd000 	add	sp, fp, #0
  120250:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  120254:	e12fff1e 	bx	lr

00120258 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
  120258:	e92d4810 	push	{r4, fp, lr}
  12025c:	e28db008 	add	fp, sp, #8
  120260:	e24dd034 	sub	sp, sp, #52	; 0x34
  120264:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  120268:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
  12026c:	e3a03000 	mov	r3, #0
  120270:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct tcp_pcb_listen *lpcb_any = NULL;
  120274:	e3a03000 	mov	r3, #0
  120278:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
  12027c:	e30c3a48 	movw	r3, #51784	; 0xca48
  120280:	e3403015 	movt	r3, #21
  120284:	e1d33abe 	ldrh	r3, [r3, #174]	; 0xae
  120288:	e2833001 	add	r3, r3, #1
  12028c:	e6ff2073 	uxth	r2, r3
  120290:	e30c3a48 	movw	r3, #51784	; 0xca48
  120294:	e3403015 	movt	r3, #21
  120298:	e1c32abe 	strh	r2, [r3, #174]	; 0xae
  MIB2_STATS_INC(mib2.tcpinsegs);
  12029c:	e30c3a48 	movw	r3, #51784	; 0xca48
  1202a0:	e3403015 	movt	r3, #21
  1202a4:	e5933184 	ldr	r3, [r3, #388]	; 0x184
  1202a8:	e2832001 	add	r2, r3, #1
  1202ac:	e30c3a48 	movw	r3, #51784	; 0xca48
  1202b0:	e3403015 	movt	r3, #21
  1202b4:	e5832184 	str	r2, [r3, #388]	; 0x184

  tcphdr = (struct tcp_hdr *)p->payload;
  1202b8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202bc:	e5932004 	ldr	r2, [r3, #4]
  1202c0:	e30e3254 	movw	r3, #57940	; 0xe254
  1202c4:	e3403014 	movt	r3, #20
  1202c8:	e5832000 	str	r2, [r3]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
  1202cc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202d0:	e1d330ba 	ldrh	r3, [r3, #10]
  1202d4:	e3530013 	cmp	r3, #19
  1202d8:	8a000008 	bhi	120300 <tcp_input+0xa8>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
  1202dc:	e30c3a48 	movw	r3, #51784	; 0xca48
  1202e0:	e3403015 	movt	r3, #21
  1202e4:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  1202e8:	e2833001 	add	r3, r3, #1
  1202ec:	e6ff2073 	uxth	r2, r3
  1202f0:	e30c3a48 	movw	r3, #51784	; 0xca48
  1202f4:	e3403015 	movt	r3, #21
  1202f8:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  1202fc:	ea0003d1 	b	121248 <tcp_input+0xff0>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  120300:	e30f3610 	movw	r3, #62992	; 0xf610
  120304:	e3403014 	movt	r3, #20
  120308:	e5932014 	ldr	r2, [r3, #20]
  12030c:	e30f3610 	movw	r3, #62992	; 0xf610
  120310:	e3403014 	movt	r3, #20
  120314:	e5933000 	ldr	r3, [r3]
  120318:	e1a01003 	mov	r1, r3
  12031c:	e1a00002 	mov	r0, r2
  120320:	eb00486b 	bl	1324d4 <ip4_addr_isbroadcast_u32>
  120324:	e1a03000 	mov	r3, r0
  120328:	e3530000 	cmp	r3, #0
  12032c:	1a000005 	bne	120348 <tcp_input+0xf0>
      ip_addr_ismulticast(ip_current_dest_addr())) {
  120330:	e30f3610 	movw	r3, #62992	; 0xf610
  120334:	e3403014 	movt	r3, #20
  120338:	e5933014 	ldr	r3, [r3, #20]
  12033c:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  120340:	e35300e0 	cmp	r3, #224	; 0xe0
  120344:	1a000008 	bne	12036c <tcp_input+0x114>
    TCP_STATS_INC(tcp.proterr);
  120348:	e30c3a48 	movw	r3, #51784	; 0xca48
  12034c:	e3403015 	movt	r3, #21
  120350:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  120354:	e2833001 	add	r3, r3, #1
  120358:	e6ff2073 	uxth	r2, r3
  12035c:	e30c3a48 	movw	r3, #51784	; 0xca48
  120360:	e3403015 	movt	r3, #21
  120364:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
    goto dropped;
  120368:	ea0003b6 	b	121248 <tcp_input+0xff0>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  12036c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120370:	e1d320b8 	ldrh	r2, [r3, #8]
  120374:	e59f3f20 	ldr	r3, [pc, #3872]	; 12129c <tcp_input+0x1044>
  120378:	e58d3000 	str	r3, [sp]
  12037c:	e59f3f1c 	ldr	r3, [pc, #3868]	; 1212a0 <tcp_input+0x1048>
  120380:	e3a01006 	mov	r1, #6
  120384:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120388:	ebffe0a1 	bl	118614 <ip_chksum_pseudo>
  12038c:	e1a03000 	mov	r3, r0
  120390:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
                               ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
  120394:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  120398:	e3530000 	cmp	r3, #0
  12039c:	0a000008 	beq	1203c4 <tcp_input+0x16c>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
          chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
  1203a0:	e30c3a48 	movw	r3, #51784	; 0xca48
  1203a4:	e3403015 	movt	r3, #21
  1203a8:	e1d33bb4 	ldrh	r3, [r3, #180]	; 0xb4
  1203ac:	e2833001 	add	r3, r3, #1
  1203b0:	e6ff2073 	uxth	r2, r3
  1203b4:	e30c3a48 	movw	r3, #51784	; 0xca48
  1203b8:	e3403015 	movt	r3, #21
  1203bc:	e1c32bb4 	strh	r2, [r3, #180]	; 0xb4
      goto dropped;
  1203c0:	ea0003a0 	b	121248 <tcp_input+0xff0>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
  1203c4:	e30e3254 	movw	r3, #57940	; 0xe254
  1203c8:	e3403014 	movt	r3, #20
  1203cc:	e5933000 	ldr	r3, [r3]
  1203d0:	e1d330bc 	ldrh	r3, [r3, #12]
  1203d4:	e6ff3073 	uxth	r3, r3
  1203d8:	e1a00003 	mov	r0, r3
  1203dc:	ebffd86d 	bl	116598 <lwip_htons>
  1203e0:	e1a03000 	mov	r3, r0
  1203e4:	e1a03623 	lsr	r3, r3, #12
  1203e8:	e6ff3073 	uxth	r3, r3
  1203ec:	e6ef3073 	uxtb	r3, r3
  1203f0:	e1a03103 	lsl	r3, r3, #2
  1203f4:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
  1203f8:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1203fc:	e3530013 	cmp	r3, #19
  120400:	9a000005 	bls	12041c <tcp_input+0x1c4>
  120404:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120408:	e6ff2073 	uxth	r2, r3
  12040c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120410:	e1d330b8 	ldrh	r3, [r3, #8]
  120414:	e1520003 	cmp	r2, r3
  120418:	9a000008 	bls	120440 <tcp_input+0x1e8>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
  12041c:	e30c3a48 	movw	r3, #51784	; 0xca48
  120420:	e3403015 	movt	r3, #21
  120424:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  120428:	e2833001 	add	r3, r3, #1
  12042c:	e6ff2073 	uxth	r2, r3
  120430:	e30c3a48 	movw	r3, #51784	; 0xca48
  120434:	e3403015 	movt	r3, #21
  120438:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  12043c:	ea000381 	b	121248 <tcp_input+0xff0>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
  120440:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120444:	e6ff3073 	uxth	r3, r3
  120448:	e2433014 	sub	r3, r3, #20
  12044c:	e6ff2073 	uxth	r2, r3
  120450:	e30e3258 	movw	r3, #57944	; 0xe258
  120454:	e3403014 	movt	r3, #20
  120458:	e1c320b0 	strh	r2, [r3]
  tcphdr_opt2 = NULL;
  12045c:	e30e325c 	movw	r3, #57948	; 0xe25c
  120460:	e3403014 	movt	r3, #20
  120464:	e3a02000 	mov	r2, #0
  120468:	e5832000 	str	r2, [r3]
  if (p->len >= hdrlen_bytes) {
  12046c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120470:	e1d320ba 	ldrh	r2, [r3, #10]
  120474:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120478:	e6ff3073 	uxth	r3, r3
  12047c:	e1520003 	cmp	r2, r3
  120480:	3a00000e 	bcc	1204c0 <tcp_input+0x268>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
  120484:	e30e3258 	movw	r3, #57944	; 0xe258
  120488:	e3403014 	movt	r3, #20
  12048c:	e1d320b0 	ldrh	r2, [r3]
  120490:	e30e325a 	movw	r3, #57946	; 0xe25a
  120494:	e3403014 	movt	r3, #20
  120498:	e1c320b0 	strh	r2, [r3]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
  12049c:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1204a0:	e6ff3073 	uxth	r3, r3
  1204a4:	e2633000 	rsb	r3, r3, #0
  1204a8:	e6ff3073 	uxth	r3, r3
  1204ac:	e6bf3073 	sxth	r3, r3
  1204b0:	e1a01003 	mov	r1, r3
  1204b4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1204b8:	ebffea4f 	bl	11adfc <pbuf_header>
  1204bc:	ea000061 	b	120648 <tcp_input+0x3f0>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
  1204c0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1204c4:	e5933000 	ldr	r3, [r3]
  1204c8:	e3530000 	cmp	r3, #0
  1204cc:	1a000006 	bne	1204ec <tcp_input+0x294>
  1204d0:	e308026c 	movw	r0, #33388	; 0x826c
  1204d4:	e3400014 	movt	r0, #20
  1204d8:	ebff8b0d 	bl	103114 <rt_kprintf>
  1204dc:	e3a010b0 	mov	r1, #176	; 0xb0
  1204e0:	e308027c 	movw	r0, #33404	; 0x827c
  1204e4:	e3400014 	movt	r0, #20
  1204e8:	ebffaaf1 	bl	10b0b4 <sys_arch_assert>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
  1204ec:	e3e01013 	mvn	r1, #19
  1204f0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1204f4:	ebffea40 	bl	11adfc <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
  1204f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1204fc:	e1d320ba 	ldrh	r2, [r3, #10]
  120500:	e30e325a 	movw	r3, #57946	; 0xe25a
  120504:	e3403014 	movt	r3, #20
  120508:	e1c320b0 	strh	r2, [r3]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
  12050c:	e30e3258 	movw	r3, #57944	; 0xe258
  120510:	e3403014 	movt	r3, #20
  120514:	e1d320b0 	ldrh	r2, [r3]
  120518:	e30e325a 	movw	r3, #57946	; 0xe25a
  12051c:	e3403014 	movt	r3, #20
  120520:	e1d330b0 	ldrh	r3, [r3]
  120524:	e0423003 	sub	r3, r2, r3
  120528:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
  12052c:	e30e325a 	movw	r3, #57946	; 0xe25a
  120530:	e3403014 	movt	r3, #20
  120534:	e1d330b0 	ldrh	r3, [r3]
  120538:	e2633000 	rsb	r3, r3, #0
  12053c:	e6ff3073 	uxth	r3, r3
  120540:	e6bf3073 	sxth	r3, r3
  120544:	e1a01003 	mov	r1, r3
  120548:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12054c:	ebffea2a 	bl	11adfc <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
  120550:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120554:	e5933000 	ldr	r3, [r3]
  120558:	e1d330ba 	ldrh	r3, [r3, #10]
  12055c:	e15b22b8 	ldrh	r2, [fp, #-40]	; 0xffffffd8
  120560:	e1520003 	cmp	r2, r3
  120564:	9a000008 	bls	12058c <tcp_input+0x334>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
  120568:	e30c3a48 	movw	r3, #51784	; 0xca48
  12056c:	e3403015 	movt	r3, #21
  120570:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  120574:	e2833001 	add	r3, r3, #1
  120578:	e6ff2073 	uxth	r2, r3
  12057c:	e30c3a48 	movw	r3, #51784	; 0xca48
  120580:	e3403015 	movt	r3, #21
  120584:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
      goto dropped;
  120588:	ea00032e 	b	121248 <tcp_input+0xff0>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
  12058c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120590:	e5933000 	ldr	r3, [r3]
  120594:	e5932004 	ldr	r2, [r3, #4]
  120598:	e30e325c 	movw	r3, #57948	; 0xe25c
  12059c:	e3403014 	movt	r3, #20
  1205a0:	e5832000 	str	r2, [r3]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
  1205a4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1205a8:	e5932000 	ldr	r2, [r3]
  1205ac:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1205b0:	e2633000 	rsb	r3, r3, #0
  1205b4:	e6ff3073 	uxth	r3, r3
  1205b8:	e6bf3073 	sxth	r3, r3
  1205bc:	e1a01003 	mov	r1, r3
  1205c0:	e1a00002 	mov	r0, r2
  1205c4:	ebffea0c 	bl	11adfc <pbuf_header>
    p->tot_len -= opt2len;
  1205c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1205cc:	e1d320b8 	ldrh	r2, [r3, #8]
  1205d0:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1205d4:	e0423003 	sub	r3, r2, r3
  1205d8:	e6ff2073 	uxth	r2, r3
  1205dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1205e0:	e1c320b8 	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
  1205e4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1205e8:	e1d330ba 	ldrh	r3, [r3, #10]
  1205ec:	e3530000 	cmp	r3, #0
  1205f0:	0a000006 	beq	120610 <tcp_input+0x3b8>
  1205f4:	e30802ac 	movw	r0, #33452	; 0x82ac
  1205f8:	e3400014 	movt	r0, #20
  1205fc:	ebff8ac4 	bl	103114 <rt_kprintf>
  120600:	e3a010cd 	mov	r1, #205	; 0xcd
  120604:	e308027c 	movw	r0, #33404	; 0x827c
  120608:	e3400014 	movt	r0, #20
  12060c:	ebffaaa8 	bl	10b0b4 <sys_arch_assert>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
  120610:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120614:	e1d320b8 	ldrh	r2, [r3, #8]
  120618:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12061c:	e5933000 	ldr	r3, [r3]
  120620:	e1d330b8 	ldrh	r3, [r3, #8]
  120624:	e1520003 	cmp	r2, r3
  120628:	0a000006 	beq	120648 <tcp_input+0x3f0>
  12062c:	e30802b8 	movw	r0, #33464	; 0x82b8
  120630:	e3400014 	movt	r0, #20
  120634:	ebff8ab6 	bl	103114 <rt_kprintf>
  120638:	e3a010ce 	mov	r1, #206	; 0xce
  12063c:	e308027c 	movw	r0, #33404	; 0x827c
  120640:	e3400014 	movt	r0, #20
  120644:	ebffaa9a 	bl	10b0b4 <sys_arch_assert>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
  120648:	e30e3254 	movw	r3, #57940	; 0xe254
  12064c:	e3403014 	movt	r3, #20
  120650:	e5933000 	ldr	r3, [r3]
  120654:	e1d330b0 	ldrh	r3, [r3]
  120658:	e6ff2073 	uxth	r2, r3
  12065c:	e30e3254 	movw	r3, #57940	; 0xe254
  120660:	e3403014 	movt	r3, #20
  120664:	e5934000 	ldr	r4, [r3]
  120668:	e1a00002 	mov	r0, r2
  12066c:	ebffd7c9 	bl	116598 <lwip_htons>
  120670:	e1a03000 	mov	r3, r0
  120674:	e1c430b0 	strh	r3, [r4]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
  120678:	e30e3254 	movw	r3, #57940	; 0xe254
  12067c:	e3403014 	movt	r3, #20
  120680:	e5933000 	ldr	r3, [r3]
  120684:	e1d330b2 	ldrh	r3, [r3, #2]
  120688:	e6ff2073 	uxth	r2, r3
  12068c:	e30e3254 	movw	r3, #57940	; 0xe254
  120690:	e3403014 	movt	r3, #20
  120694:	e5934000 	ldr	r4, [r3]
  120698:	e1a00002 	mov	r0, r2
  12069c:	ebffd7bd 	bl	116598 <lwip_htons>
  1206a0:	e1a03000 	mov	r3, r0
  1206a4:	e1c430b2 	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
  1206a8:	e30e3254 	movw	r3, #57940	; 0xe254
  1206ac:	e3403014 	movt	r3, #20
  1206b0:	e5933000 	ldr	r3, [r3]
  1206b4:	e5932004 	ldr	r2, [r3, #4]
  1206b8:	e30e3254 	movw	r3, #57940	; 0xe254
  1206bc:	e3403014 	movt	r3, #20
  1206c0:	e5934000 	ldr	r4, [r3]
  1206c4:	e1a00002 	mov	r0, r2
  1206c8:	ebffd7be 	bl	1165c8 <lwip_htonl>
  1206cc:	e1a03000 	mov	r3, r0
  1206d0:	e5843004 	str	r3, [r4, #4]
  1206d4:	e5942004 	ldr	r2, [r4, #4]
  1206d8:	e30e3264 	movw	r3, #57956	; 0xe264
  1206dc:	e3403014 	movt	r3, #20
  1206e0:	e5832000 	str	r2, [r3]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
  1206e4:	e30e3254 	movw	r3, #57940	; 0xe254
  1206e8:	e3403014 	movt	r3, #20
  1206ec:	e5933000 	ldr	r3, [r3]
  1206f0:	e5932008 	ldr	r2, [r3, #8]
  1206f4:	e30e3254 	movw	r3, #57940	; 0xe254
  1206f8:	e3403014 	movt	r3, #20
  1206fc:	e5934000 	ldr	r4, [r3]
  120700:	e1a00002 	mov	r0, r2
  120704:	ebffd7af 	bl	1165c8 <lwip_htonl>
  120708:	e1a03000 	mov	r3, r0
  12070c:	e5843008 	str	r3, [r4, #8]
  120710:	e5942008 	ldr	r2, [r4, #8]
  120714:	e30e3268 	movw	r3, #57960	; 0xe268
  120718:	e3403014 	movt	r3, #20
  12071c:	e5832000 	str	r2, [r3]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
  120720:	e30e3254 	movw	r3, #57940	; 0xe254
  120724:	e3403014 	movt	r3, #20
  120728:	e5933000 	ldr	r3, [r3]
  12072c:	e1d330be 	ldrh	r3, [r3, #14]
  120730:	e6ff2073 	uxth	r2, r3
  120734:	e30e3254 	movw	r3, #57940	; 0xe254
  120738:	e3403014 	movt	r3, #20
  12073c:	e5934000 	ldr	r4, [r3]
  120740:	e1a00002 	mov	r0, r2
  120744:	ebffd793 	bl	116598 <lwip_htons>
  120748:	e1a03000 	mov	r3, r0
  12074c:	e1c430be 	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
  120750:	e30e3254 	movw	r3, #57940	; 0xe254
  120754:	e3403014 	movt	r3, #20
  120758:	e5933000 	ldr	r3, [r3]
  12075c:	e1d330bc 	ldrh	r3, [r3, #12]
  120760:	e6ff3073 	uxth	r3, r3
  120764:	e1a00003 	mov	r0, r3
  120768:	ebffd78a 	bl	116598 <lwip_htons>
  12076c:	e1a03000 	mov	r3, r0
  120770:	e6ef3073 	uxtb	r3, r3
  120774:	e203303f 	and	r3, r3, #63	; 0x3f
  120778:	e6ef2073 	uxtb	r2, r3
  12077c:	e30e3270 	movw	r3, #57968	; 0xe270
  120780:	e3403014 	movt	r3, #20
  120784:	e5c32000 	strb	r2, [r3]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  120788:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12078c:	e1d320b8 	ldrh	r2, [r3, #8]
  120790:	e30e3270 	movw	r3, #57968	; 0xe270
  120794:	e3403014 	movt	r3, #20
  120798:	e5d33000 	ldrb	r3, [r3]
  12079c:	e2033003 	and	r3, r3, #3
  1207a0:	e3530000 	cmp	r3, #0
  1207a4:	13a03001 	movne	r3, #1
  1207a8:	03a03000 	moveq	r3, #0
  1207ac:	e6ef3073 	uxtb	r3, r3
  1207b0:	e6ff3073 	uxth	r3, r3
  1207b4:	e0823003 	add	r3, r2, r3
  1207b8:	e6ff2073 	uxth	r2, r3
  1207bc:	e30e326e 	movw	r3, #57966	; 0xe26e
  1207c0:	e3403014 	movt	r3, #20
  1207c4:	e1c320b0 	strh	r2, [r3]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
  1207c8:	e3a03000 	mov	r3, #0
  1207cc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  1207d0:	e30c3c38 	movw	r3, #52280	; 0xcc38
  1207d4:	e3403015 	movt	r3, #21
  1207d8:	e5933000 	ldr	r3, [r3]
  1207dc:	e50b3010 	str	r3, [fp, #-16]
  1207e0:	ea000077 	b	1209c4 <tcp_input+0x76c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
  1207e4:	e51b3010 	ldr	r3, [fp, #-16]
  1207e8:	e5933014 	ldr	r3, [r3, #20]
  1207ec:	e3530000 	cmp	r3, #0
  1207f0:	1a000006 	bne	120810 <tcp_input+0x5b8>
  1207f4:	e30802d8 	movw	r0, #33496	; 0x82d8
  1207f8:	e3400014 	movt	r0, #20
  1207fc:	ebff8a44 	bl	103114 <rt_kprintf>
  120800:	e3a010e0 	mov	r1, #224	; 0xe0
  120804:	e308027c 	movw	r0, #33404	; 0x827c
  120808:	e3400014 	movt	r0, #20
  12080c:	ebffaa28 	bl	10b0b4 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
  120810:	e51b3010 	ldr	r3, [fp, #-16]
  120814:	e5933014 	ldr	r3, [r3, #20]
  120818:	e353000a 	cmp	r3, #10
  12081c:	1a000006 	bne	12083c <tcp_input+0x5e4>
  120820:	e3080300 	movw	r0, #33536	; 0x8300
  120824:	e3400014 	movt	r0, #20
  120828:	ebff8a39 	bl	103114 <rt_kprintf>
  12082c:	e3a010e1 	mov	r1, #225	; 0xe1
  120830:	e308027c 	movw	r0, #33404	; 0x827c
  120834:	e3400014 	movt	r0, #20
  120838:	ebffaa1d 	bl	10b0b4 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
  12083c:	e51b3010 	ldr	r3, [fp, #-16]
  120840:	e5933014 	ldr	r3, [r3, #20]
  120844:	e3530001 	cmp	r3, #1
  120848:	1a000006 	bne	120868 <tcp_input+0x610>
  12084c:	e308032c 	movw	r0, #33580	; 0x832c
  120850:	e3400014 	movt	r0, #20
  120854:	ebff8a2e 	bl	103114 <rt_kprintf>
  120858:	e3a010e2 	mov	r1, #226	; 0xe2
  12085c:	e308027c 	movw	r0, #33404	; 0x827c
  120860:	e3400014 	movt	r0, #20
  120864:	ebffaa12 	bl	10b0b4 <sys_arch_assert>
    if (pcb->remote_port == tcphdr->src &&
  120868:	e51b3010 	ldr	r3, [fp, #-16]
  12086c:	e1d321bc 	ldrh	r2, [r3, #28]
  120870:	e30e3254 	movw	r3, #57940	; 0xe254
  120874:	e3403014 	movt	r3, #20
  120878:	e5933000 	ldr	r3, [r3]
  12087c:	e1d330b0 	ldrh	r3, [r3]
  120880:	e6ff3073 	uxth	r3, r3
  120884:	e1520003 	cmp	r2, r3
  120888:	1a000048 	bne	1209b0 <tcp_input+0x758>
        pcb->local_port == tcphdr->dest &&
  12088c:	e51b3010 	ldr	r3, [fp, #-16]
  120890:	e1d321ba 	ldrh	r2, [r3, #26]
  120894:	e30e3254 	movw	r3, #57940	; 0xe254
  120898:	e3403014 	movt	r3, #20
  12089c:	e5933000 	ldr	r3, [r3]
  1208a0:	e1d330b2 	ldrh	r3, [r3, #2]
  1208a4:	e6ff3073 	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
  1208a8:	e1520003 	cmp	r2, r3
  1208ac:	1a00003f 	bne	1209b0 <tcp_input+0x758>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  1208b0:	e51b3010 	ldr	r3, [fp, #-16]
  1208b4:	e5932004 	ldr	r2, [r3, #4]
  1208b8:	e30f3610 	movw	r3, #62992	; 0xf610
  1208bc:	e3403014 	movt	r3, #20
  1208c0:	e5933010 	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
  1208c4:	e1520003 	cmp	r2, r3
  1208c8:	1a000038 	bne	1209b0 <tcp_input+0x758>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  1208cc:	e51b3010 	ldr	r3, [fp, #-16]
  1208d0:	e5932000 	ldr	r2, [r3]
  1208d4:	e30f3610 	movw	r3, #62992	; 0xf610
  1208d8:	e3403014 	movt	r3, #20
  1208dc:	e5933014 	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  1208e0:	e1520003 	cmp	r2, r3
  1208e4:	1a000031 	bne	1209b0 <tcp_input+0x758>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
  1208e8:	e51b3010 	ldr	r3, [fp, #-16]
  1208ec:	e593300c 	ldr	r3, [r3, #12]
  1208f0:	e51b2010 	ldr	r2, [fp, #-16]
  1208f4:	e1520003 	cmp	r2, r3
  1208f8:	1a000006 	bne	120918 <tcp_input+0x6c0>
  1208fc:	e3080354 	movw	r0, #33620	; 0x8354
  120900:	e3400014 	movt	r0, #20
  120904:	ebff8a02 	bl	103114 <rt_kprintf>
  120908:	e3a010ea 	mov	r1, #234	; 0xea
  12090c:	e308027c 	movw	r0, #33404	; 0x827c
  120910:	e3400014 	movt	r0, #20
  120914:	ebffa9e6 	bl	10b0b4 <sys_arch_assert>
      if (prev != NULL) {
  120918:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12091c:	e3530000 	cmp	r3, #0
  120920:	0a00000d 	beq	12095c <tcp_input+0x704>
        prev->next = pcb->next;
  120924:	e51b3010 	ldr	r3, [fp, #-16]
  120928:	e593200c 	ldr	r2, [r3, #12]
  12092c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120930:	e583200c 	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
  120934:	e30c3c38 	movw	r3, #52280	; 0xcc38
  120938:	e3403015 	movt	r3, #21
  12093c:	e5932000 	ldr	r2, [r3]
  120940:	e51b3010 	ldr	r3, [fp, #-16]
  120944:	e583200c 	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
  120948:	e30c3c38 	movw	r3, #52280	; 0xcc38
  12094c:	e3403015 	movt	r3, #21
  120950:	e51b2010 	ldr	r2, [fp, #-16]
  120954:	e5832000 	str	r2, [r3]
  120958:	ea000007 	b	12097c <tcp_input+0x724>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  12095c:	e30c3a48 	movw	r3, #51784	; 0xca48
  120960:	e3403015 	movt	r3, #21
  120964:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  120968:	e2833001 	add	r3, r3, #1
  12096c:	e6ff2073 	uxth	r2, r3
  120970:	e30c3a48 	movw	r3, #51784	; 0xca48
  120974:	e3403015 	movt	r3, #21
  120978:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
  12097c:	e51b3010 	ldr	r3, [fp, #-16]
  120980:	e593300c 	ldr	r3, [r3, #12]
  120984:	e51b2010 	ldr	r2, [fp, #-16]
  120988:	e1520003 	cmp	r2, r3
  12098c:	1a000010 	bne	1209d4 <tcp_input+0x77c>
  120990:	e3080380 	movw	r0, #33664	; 0x8380
  120994:	e3400014 	movt	r0, #20
  120998:	ebff89dd 	bl	103114 <rt_kprintf>
  12099c:	e3a010f2 	mov	r1, #242	; 0xf2
  1209a0:	e308027c 	movw	r0, #33404	; 0x827c
  1209a4:	e3400014 	movt	r0, #20
  1209a8:	ebffa9c1 	bl	10b0b4 <sys_arch_assert>
      break;
  1209ac:	ea000008 	b	1209d4 <tcp_input+0x77c>
    }
    prev = pcb;
  1209b0:	e51b3010 	ldr	r3, [fp, #-16]
  1209b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  1209b8:	e51b3010 	ldr	r3, [fp, #-16]
  1209bc:	e593300c 	ldr	r3, [r3, #12]
  1209c0:	e50b3010 	str	r3, [fp, #-16]
  1209c4:	e51b3010 	ldr	r3, [fp, #-16]
  1209c8:	e3530000 	cmp	r3, #0
  1209cc:	1affff84 	bne	1207e4 <tcp_input+0x58c>
  1209d0:	ea000000 	b	1209d8 <tcp_input+0x780>
      break;
  1209d4:	e320f000 	nop	{0}
  }

  if (pcb == NULL) {
  1209d8:	e51b3010 	ldr	r3, [fp, #-16]
  1209dc:	e3530000 	cmp	r3, #0
  1209e0:	1a00008e 	bne	120c20 <tcp_input+0x9c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  1209e4:	e30c3c48 	movw	r3, #52296	; 0xcc48
  1209e8:	e3403015 	movt	r3, #21
  1209ec:	e5933000 	ldr	r3, [r3]
  1209f0:	e50b3010 	str	r3, [fp, #-16]
  1209f4:	ea000032 	b	120ac4 <tcp_input+0x86c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  1209f8:	e51b3010 	ldr	r3, [fp, #-16]
  1209fc:	e5933014 	ldr	r3, [r3, #20]
  120a00:	e353000a 	cmp	r3, #10
  120a04:	0a000006 	beq	120a24 <tcp_input+0x7cc>
  120a08:	e30803ac 	movw	r0, #33708	; 0x83ac
  120a0c:	e3400014 	movt	r0, #20
  120a10:	ebff89bf 	bl	103114 <rt_kprintf>
  120a14:	e3a010fc 	mov	r1, #252	; 0xfc
  120a18:	e308027c 	movw	r0, #33404	; 0x827c
  120a1c:	e3400014 	movt	r0, #20
  120a20:	ebffa9a3 	bl	10b0b4 <sys_arch_assert>
      if (pcb->remote_port == tcphdr->src &&
  120a24:	e51b3010 	ldr	r3, [fp, #-16]
  120a28:	e1d321bc 	ldrh	r2, [r3, #28]
  120a2c:	e30e3254 	movw	r3, #57940	; 0xe254
  120a30:	e3403014 	movt	r3, #20
  120a34:	e5933000 	ldr	r3, [r3]
  120a38:	e1d330b0 	ldrh	r3, [r3]
  120a3c:	e6ff3073 	uxth	r3, r3
  120a40:	e1520003 	cmp	r2, r3
  120a44:	1a00001b 	bne	120ab8 <tcp_input+0x860>
          pcb->local_port == tcphdr->dest &&
  120a48:	e51b3010 	ldr	r3, [fp, #-16]
  120a4c:	e1d321ba 	ldrh	r2, [r3, #26]
  120a50:	e30e3254 	movw	r3, #57940	; 0xe254
  120a54:	e3403014 	movt	r3, #20
  120a58:	e5933000 	ldr	r3, [r3]
  120a5c:	e1d330b2 	ldrh	r3, [r3, #2]
  120a60:	e6ff3073 	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
  120a64:	e1520003 	cmp	r2, r3
  120a68:	1a000012 	bne	120ab8 <tcp_input+0x860>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120a6c:	e51b3010 	ldr	r3, [fp, #-16]
  120a70:	e5932004 	ldr	r2, [r3, #4]
  120a74:	e30f3610 	movw	r3, #62992	; 0xf610
  120a78:	e3403014 	movt	r3, #20
  120a7c:	e5933010 	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
  120a80:	e1520003 	cmp	r2, r3
  120a84:	1a00000b 	bne	120ab8 <tcp_input+0x860>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  120a88:	e51b3010 	ldr	r3, [fp, #-16]
  120a8c:	e5932000 	ldr	r2, [r3]
  120a90:	e30f3610 	movw	r3, #62992	; 0xf610
  120a94:	e3403014 	movt	r3, #20
  120a98:	e5933014 	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120a9c:	e1520003 	cmp	r2, r3
  120aa0:	1a000004 	bne	120ab8 <tcp_input+0x860>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
  120aa4:	e51b0010 	ldr	r0, [fp, #-16]
  120aa8:	eb0002d7 	bl	12160c <tcp_timewait_input>
        pbuf_free(p);
  120aac:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120ab0:	ebffe8ef 	bl	11ae74 <pbuf_free>
        return;
  120ab4:	ea0001f6 	b	121294 <tcp_input+0x103c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  120ab8:	e51b3010 	ldr	r3, [fp, #-16]
  120abc:	e593300c 	ldr	r3, [r3, #12]
  120ac0:	e50b3010 	str	r3, [fp, #-16]
  120ac4:	e51b3010 	ldr	r3, [fp, #-16]
  120ac8:	e3530000 	cmp	r3, #0
  120acc:	1affffc9 	bne	1209f8 <tcp_input+0x7a0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
  120ad0:	e3a03000 	mov	r3, #0
  120ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  120ad8:	e30c3c40 	movw	r3, #52288	; 0xcc40
  120adc:	e3403015 	movt	r3, #21
  120ae0:	e5933000 	ldr	r3, [r3]
  120ae4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  120ae8:	ea00001f 	b	120b6c <tcp_input+0x914>
      if (lpcb->local_port == tcphdr->dest) {
  120aec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120af0:	e1d321ba 	ldrh	r2, [r3, #26]
  120af4:	e30e3254 	movw	r3, #57940	; 0xe254
  120af8:	e3403014 	movt	r3, #20
  120afc:	e5933000 	ldr	r3, [r3]
  120b00:	e1d330b2 	ldrh	r3, [r3, #2]
  120b04:	e6ff3073 	uxth	r3, r3
  120b08:	e1520003 	cmp	r2, r3
  120b0c:	1a000011 	bne	120b58 <tcp_input+0x900>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
  120b10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b14:	e5932000 	ldr	r2, [r3]
  120b18:	e30f3610 	movw	r3, #62992	; 0xf610
  120b1c:	e3403014 	movt	r3, #20
  120b20:	e5933014 	ldr	r3, [r3, #20]
  120b24:	e1520003 	cmp	r2, r3
  120b28:	0a000013 	beq	120b7c <tcp_input+0x924>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
  120b2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b30:	e3530000 	cmp	r3, #0
  120b34:	0a000003 	beq	120b48 <tcp_input+0x8f0>
  120b38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b3c:	e5933000 	ldr	r3, [r3]
  120b40:	e3530000 	cmp	r3, #0
  120b44:	1a000003 	bne	120b58 <tcp_input+0x900>
            /* found an ANY-match */
#if SO_REUSE
            lpcb_any = lpcb;
  120b48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b4c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            lpcb_prev = prev;
  120b50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120b54:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
  120b58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b5c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  120b60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b64:	e593300c 	ldr	r3, [r3, #12]
  120b68:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  120b6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b70:	e3530000 	cmp	r3, #0
  120b74:	1affffdc 	bne	120aec <tcp_input+0x894>
  120b78:	ea000000 	b	120b80 <tcp_input+0x928>
            break;
  120b7c:	e320f000 	nop	{0}
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
  120b80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b84:	e3530000 	cmp	r3, #0
  120b88:	1a000003 	bne	120b9c <tcp_input+0x944>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
  120b8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  120b90:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      prev = lpcb_prev;
  120b94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  120b98:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
  120b9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120ba0:	e3530000 	cmp	r3, #0
  120ba4:	0a00001d 	beq	120c20 <tcp_input+0x9c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
  120ba8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120bac:	e3530000 	cmp	r3, #0
  120bb0:	0a00000d 	beq	120bec <tcp_input+0x994>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  120bb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120bb8:	e593200c 	ldr	r2, [r3, #12]
  120bbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120bc0:	e583200c 	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  120bc4:	e30c3c40 	movw	r3, #52288	; 0xcc40
  120bc8:	e3403015 	movt	r3, #21
  120bcc:	e5932000 	ldr	r2, [r3]
  120bd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120bd4:	e583200c 	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
  120bd8:	e30c3c40 	movw	r3, #52288	; 0xcc40
  120bdc:	e3403015 	movt	r3, #21
  120be0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  120be4:	e5832000 	str	r2, [r3]
  120be8:	ea000007 	b	120c0c <tcp_input+0x9b4>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  120bec:	e30c3a48 	movw	r3, #51784	; 0xca48
  120bf0:	e3403015 	movt	r3, #21
  120bf4:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  120bf8:	e2833001 	add	r3, r3, #1
  120bfc:	e6ff2073 	uxth	r2, r3
  120c00:	e30c3a48 	movw	r3, #51784	; 0xca48
  120c04:	e3403015 	movt	r3, #21
  120c08:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
  120c0c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  120c10:	eb0001a3 	bl	1212a4 <tcp_listen_input>
      pbuf_free(p);
  120c14:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120c18:	ebffe895 	bl	11ae74 <pbuf_free>
      return;
  120c1c:	ea00019c 	b	121294 <tcp_input+0x103c>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
  120c20:	e51b3010 	ldr	r3, [fp, #-16]
  120c24:	e3530000 	cmp	r3, #0
  120c28:	0a00014e 	beq	121168 <tcp_input+0xf10>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
  120c2c:	e30e3244 	movw	r3, #57924	; 0xe244
  120c30:	e3403014 	movt	r3, #20
  120c34:	e3a02000 	mov	r2, #0
  120c38:	e5832000 	str	r2, [r3]
    inseg.len = p->tot_len;
  120c3c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120c40:	e1d320b8 	ldrh	r2, [r3, #8]
  120c44:	e30e3244 	movw	r3, #57924	; 0xe244
  120c48:	e3403014 	movt	r3, #20
  120c4c:	e1c320b8 	strh	r2, [r3, #8]
    inseg.p = p;
  120c50:	e30e3244 	movw	r3, #57924	; 0xe244
  120c54:	e3403014 	movt	r3, #20
  120c58:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  120c5c:	e5832004 	str	r2, [r3, #4]
    inseg.tcphdr = tcphdr;
  120c60:	e30e3254 	movw	r3, #57940	; 0xe254
  120c64:	e3403014 	movt	r3, #20
  120c68:	e5932000 	ldr	r2, [r3]
  120c6c:	e30e3244 	movw	r3, #57924	; 0xe244
  120c70:	e3403014 	movt	r3, #20
  120c74:	e583200c 	str	r2, [r3, #12]

    recv_data = NULL;
  120c78:	e30e3274 	movw	r3, #57972	; 0xe274
  120c7c:	e3403014 	movt	r3, #20
  120c80:	e3a02000 	mov	r2, #0
  120c84:	e5832000 	str	r2, [r3]
    recv_flags = 0;
  120c88:	e30e3271 	movw	r3, #57969	; 0xe271
  120c8c:	e3403014 	movt	r3, #20
  120c90:	e3a02000 	mov	r2, #0
  120c94:	e5c32000 	strb	r2, [r3]
    recv_acked = 0;
  120c98:	e30e326c 	movw	r3, #57964	; 0xe26c
  120c9c:	e3403014 	movt	r3, #20
  120ca0:	e3a02000 	mov	r2, #0
  120ca4:	e1c320b0 	strh	r2, [r3]

    if (flags & TCP_PSH) {
  120ca8:	e30e3270 	movw	r3, #57968	; 0xe270
  120cac:	e3403014 	movt	r3, #20
  120cb0:	e5d33000 	ldrb	r3, [r3]
  120cb4:	e2033008 	and	r3, r3, #8
  120cb8:	e3530000 	cmp	r3, #0
  120cbc:	0a000005 	beq	120cd8 <tcp_input+0xa80>
      p->flags |= PBUF_FLAG_PUSH;
  120cc0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120cc4:	e5d3300d 	ldrb	r3, [r3, #13]
  120cc8:	e3833001 	orr	r3, r3, #1
  120ccc:	e6ef2073 	uxtb	r2, r3
  120cd0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120cd4:	e5c3200d 	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
  120cd8:	e51b3010 	ldr	r3, [fp, #-16]
  120cdc:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120ce0:	e3530000 	cmp	r3, #0
  120ce4:	0a000023 	beq	120d78 <tcp_input+0xb20>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  120ce8:	e51b0010 	ldr	r0, [fp, #-16]
  120cec:	ebfff969 	bl	11f298 <tcp_process_refused_data>
  120cf0:	e1a03000 	mov	r3, r0
  120cf4:	e373000d 	cmn	r3, #13
  120cf8:	0a000008 	beq	120d20 <tcp_input+0xac8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  120cfc:	e51b3010 	ldr	r3, [fp, #-16]
  120d00:	e5933078 	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  120d04:	e3530000 	cmp	r3, #0
  120d08:	0a00001a 	beq	120d78 <tcp_input+0xb20>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  120d0c:	e30e326e 	movw	r3, #57966	; 0xe26e
  120d10:	e3403014 	movt	r3, #20
  120d14:	e1d330b0 	ldrh	r3, [r3]
  120d18:	e3530000 	cmp	r3, #0
  120d1c:	0a000015 	beq	120d78 <tcp_input+0xb20>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
  120d20:	e51b3010 	ldr	r3, [fp, #-16]
  120d24:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  120d28:	e3530000 	cmp	r3, #0
  120d2c:	1a000001 	bne	120d38 <tcp_input+0xae0>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
  120d30:	e51b0010 	ldr	r0, [fp, #-16]
  120d34:	eb001418 	bl	125d9c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
  120d38:	e30c3a48 	movw	r3, #51784	; 0xca48
  120d3c:	e3403015 	movt	r3, #21
  120d40:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  120d44:	e2833001 	add	r3, r3, #1
  120d48:	e6ff2073 	uxth	r2, r3
  120d4c:	e30c3a48 	movw	r3, #51784	; 0xca48
  120d50:	e3403015 	movt	r3, #21
  120d54:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
        MIB2_STATS_INC(mib2.tcpinerrs);
  120d58:	e30c3a48 	movw	r3, #51784	; 0xca48
  120d5c:	e3403015 	movt	r3, #21
  120d60:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  120d64:	e2832001 	add	r2, r3, #1
  120d68:	e30c3a48 	movw	r3, #51784	; 0xca48
  120d6c:	e3403015 	movt	r3, #21
  120d70:	e5832188 	str	r2, [r3, #392]	; 0x188
        goto aborted;
  120d74:	ea0000e4 	b	12110c <tcp_input+0xeb4>
      }
    }
    tcp_input_pcb = pcb;
  120d78:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  120d7c:	e3403015 	movt	r3, #21
  120d80:	e51b2010 	ldr	r2, [fp, #-16]
  120d84:	e5832000 	str	r2, [r3]
    err = tcp_process(pcb);
  120d88:	e51b0010 	ldr	r0, [fp, #-16]
  120d8c:	eb00027d 	bl	121788 <tcp_process>
  120d90:	e1a03000 	mov	r3, r0
  120d94:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
  120d98:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120d9c:	e373000d 	cmn	r3, #13
  120da0:	0a0000d2 	beq	1210f0 <tcp_input+0xe98>
      if (recv_flags & TF_RESET) {
  120da4:	e30e3271 	movw	r3, #57969	; 0xe271
  120da8:	e3403014 	movt	r3, #20
  120dac:	e5d33000 	ldrb	r3, [r3]
  120db0:	e2033008 	and	r3, r3, #8
  120db4:	e3530000 	cmp	r3, #0
  120db8:	0a000012 	beq	120e08 <tcp_input+0xbb0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
  120dbc:	e51b3010 	ldr	r3, [fp, #-16]
  120dc0:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120dc4:	e3530000 	cmp	r3, #0
  120dc8:	0a000006 	beq	120de8 <tcp_input+0xb90>
  120dcc:	e51b3010 	ldr	r3, [fp, #-16]
  120dd0:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120dd4:	e51b2010 	ldr	r2, [fp, #-16]
  120dd8:	e5922010 	ldr	r2, [r2, #16]
  120ddc:	e3e0100d 	mvn	r1, #13
  120de0:	e1a00002 	mov	r0, r2
  120de4:	e12fff33 	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  120de8:	e51b1010 	ldr	r1, [fp, #-16]
  120dec:	e30c0c38 	movw	r0, #52280	; 0xcc38
  120df0:	e3400015 	movt	r0, #21
  120df4:	ebfffc11 	bl	11fe40 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
  120df8:	e51b1010 	ldr	r1, [fp, #-16]
  120dfc:	e3a00002 	mov	r0, #2
  120e00:	ebffe10d 	bl	11923c <memp_free>
  120e04:	ea0000c0 	b	12110c <tcp_input+0xeb4>
      } else {
        err = ERR_OK;
  120e08:	e3a03000 	mov	r3, #0
  120e0c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
  120e10:	e30e326c 	movw	r3, #57964	; 0xe26c
  120e14:	e3403014 	movt	r3, #20
  120e18:	e1d330b0 	ldrh	r3, [r3]
  120e1c:	e3530000 	cmp	r3, #0
  120e20:	0a00001a 	beq	120e90 <tcp_input+0xc38>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
  120e24:	e30e326c 	movw	r3, #57964	; 0xe26c
  120e28:	e3403014 	movt	r3, #20
  120e2c:	e1d330b0 	ldrh	r3, [r3]
  120e30:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
  120e34:	e51b3010 	ldr	r3, [fp, #-16]
  120e38:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  120e3c:	e3530000 	cmp	r3, #0
  120e40:	0a000009 	beq	120e6c <tcp_input+0xc14>
  120e44:	e51b3010 	ldr	r3, [fp, #-16]
  120e48:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  120e4c:	e51b2010 	ldr	r2, [fp, #-16]
  120e50:	e5920010 	ldr	r0, [r2, #16]
  120e54:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  120e58:	e51b1010 	ldr	r1, [fp, #-16]
  120e5c:	e12fff33 	blx	r3
  120e60:	e1a03000 	mov	r3, r0
  120e64:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120e68:	ea000001 	b	120e74 <tcp_input+0xc1c>
  120e6c:	e3a03000 	mov	r3, #0
  120e70:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  120e74:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120e78:	e373000d 	cmn	r3, #13
  120e7c:	0a00009d 	beq	1210f8 <tcp_input+0xea0>
              goto aborted;
            }
          }
          recv_acked = 0;
  120e80:	e30e326c 	movw	r3, #57964	; 0xe26c
  120e84:	e3403014 	movt	r3, #20
  120e88:	e3a02000 	mov	r2, #0
  120e8c:	e1c320b0 	strh	r2, [r3]
        }
        if (recv_flags & TF_CLOSED) {
  120e90:	e30e3271 	movw	r3, #57969	; 0xe271
  120e94:	e3403014 	movt	r3, #20
  120e98:	e5d33000 	ldrb	r3, [r3]
  120e9c:	e2033010 	and	r3, r3, #16
  120ea0:	e3530000 	cmp	r3, #0
  120ea4:	0a000017 	beq	120f08 <tcp_input+0xcb0>
          /* The connection has been closed and we will deallocate the
             PCB. */
          if (!(pcb->flags & TF_RXCLOSED)) {
  120ea8:	e51b3010 	ldr	r3, [fp, #-16]
  120eac:	e5d3301e 	ldrb	r3, [r3, #30]
  120eb0:	e2033010 	and	r3, r3, #16
  120eb4:	e3530000 	cmp	r3, #0
  120eb8:	1a00000a 	bne	120ee8 <tcp_input+0xc90>
            /* Connection closed although the application has only shut down the
               tx side: call the PCB's err callback and indicate the closure to
               ensure the application doesn't continue using the PCB. */
            TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
  120ebc:	e51b3010 	ldr	r3, [fp, #-16]
  120ec0:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120ec4:	e3530000 	cmp	r3, #0
  120ec8:	0a000006 	beq	120ee8 <tcp_input+0xc90>
  120ecc:	e51b3010 	ldr	r3, [fp, #-16]
  120ed0:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120ed4:	e51b2010 	ldr	r2, [fp, #-16]
  120ed8:	e5922010 	ldr	r2, [r2, #16]
  120edc:	e3e0100e 	mvn	r1, #14
  120ee0:	e1a00002 	mov	r0, r2
  120ee4:	e12fff33 	blx	r3
          }
          tcp_pcb_remove(&tcp_active_pcbs, pcb);
  120ee8:	e51b1010 	ldr	r1, [fp, #-16]
  120eec:	e30c0c38 	movw	r0, #52280	; 0xcc38
  120ef0:	e3400015 	movt	r0, #21
  120ef4:	ebfffbd1 	bl	11fe40 <tcp_pcb_remove>
          memp_free(MEMP_TCP_PCB, pcb);
  120ef8:	e51b1010 	ldr	r1, [fp, #-16]
  120efc:	e3a00002 	mov	r0, #2
  120f00:	ebffe0cd 	bl	11923c <memp_free>
          goto aborted;
  120f04:	ea000080 	b	12110c <tcp_input+0xeb4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
  120f08:	e30e3274 	movw	r3, #57972	; 0xe274
  120f0c:	e3403014 	movt	r3, #20
  120f10:	e5933000 	ldr	r3, [r3]
  120f14:	e3530000 	cmp	r3, #0
  120f18:	0a00003c 	beq	121010 <tcp_input+0xdb8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
  120f1c:	e51b3010 	ldr	r3, [fp, #-16]
  120f20:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120f24:	e3530000 	cmp	r3, #0
  120f28:	0a000006 	beq	120f48 <tcp_input+0xcf0>
  120f2c:	e30803dc 	movw	r0, #33756	; 0x83dc
  120f30:	e3400014 	movt	r0, #20
  120f34:	ebff8876 	bl	103114 <rt_kprintf>
  120f38:	e3a01f6b 	mov	r1, #428	; 0x1ac
  120f3c:	e308027c 	movw	r0, #33404	; 0x827c
  120f40:	e3400014 	movt	r0, #20
  120f44:	ebffa85a 	bl	10b0b4 <sys_arch_assert>
          if (pcb->flags & TF_RXCLOSED) {
  120f48:	e51b3010 	ldr	r3, [fp, #-16]
  120f4c:	e5d3301e 	ldrb	r3, [r3, #30]
  120f50:	e2033010 	and	r3, r3, #16
  120f54:	e3530000 	cmp	r3, #0
  120f58:	0a000007 	beq	120f7c <tcp_input+0xd24>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
  120f5c:	e30e3274 	movw	r3, #57972	; 0xe274
  120f60:	e3403014 	movt	r3, #20
  120f64:	e5933000 	ldr	r3, [r3]
  120f68:	e1a00003 	mov	r0, r3
  120f6c:	ebffe7c0 	bl	11ae74 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
  120f70:	e51b0010 	ldr	r0, [fp, #-16]
  120f74:	ebfff297 	bl	11d9d8 <tcp_abort>
            goto aborted;
  120f78:	ea000063 	b	12110c <tcp_input+0xeb4>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  120f7c:	e51b3010 	ldr	r3, [fp, #-16]
  120f80:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  120f84:	e3530000 	cmp	r3, #0
  120f88:	0a00000c 	beq	120fc0 <tcp_input+0xd68>
  120f8c:	e51b3010 	ldr	r3, [fp, #-16]
  120f90:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  120f94:	e51b3010 	ldr	r3, [fp, #-16]
  120f98:	e5930010 	ldr	r0, [r3, #16]
  120f9c:	e30e3274 	movw	r3, #57972	; 0xe274
  120fa0:	e3403014 	movt	r3, #20
  120fa4:	e5932000 	ldr	r2, [r3]
  120fa8:	e3a03000 	mov	r3, #0
  120fac:	e51b1010 	ldr	r1, [fp, #-16]
  120fb0:	e12fff34 	blx	r4
  120fb4:	e1a03000 	mov	r3, r0
  120fb8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120fbc:	ea000008 	b	120fe4 <tcp_input+0xd8c>
  120fc0:	e30e3274 	movw	r3, #57972	; 0xe274
  120fc4:	e3403014 	movt	r3, #20
  120fc8:	e5932000 	ldr	r2, [r3]
  120fcc:	e3a03000 	mov	r3, #0
  120fd0:	e51b1010 	ldr	r1, [fp, #-16]
  120fd4:	e3a00000 	mov	r0, #0
  120fd8:	ebfff956 	bl	11f538 <tcp_recv_null>
  120fdc:	e1a03000 	mov	r3, r0
  120fe0:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
          if (err == ERR_ABRT) {
  120fe4:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120fe8:	e373000d 	cmn	r3, #13
  120fec:	0a000043 	beq	121100 <tcp_input+0xea8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
  120ff0:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120ff4:	e3530000 	cmp	r3, #0
  120ff8:	0a000004 	beq	121010 <tcp_input+0xdb8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
  120ffc:	e30e3274 	movw	r3, #57972	; 0xe274
  121000:	e3403014 	movt	r3, #20
  121004:	e5932000 	ldr	r2, [r3]
  121008:	e51b3010 	ldr	r3, [fp, #-16]
  12100c:	e5832078 	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
  121010:	e30e3271 	movw	r3, #57969	; 0xe271
  121014:	e3403014 	movt	r3, #20
  121018:	e5d33000 	ldrb	r3, [r3]
  12101c:	e2033020 	and	r3, r3, #32
  121020:	e3530000 	cmp	r3, #0
  121024:	0a00002a 	beq	1210d4 <tcp_input+0xe7c>
          if (pcb->refused_data != NULL) {
  121028:	e51b3010 	ldr	r3, [fp, #-16]
  12102c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  121030:	e3530000 	cmp	r3, #0
  121034:	0a000008 	beq	12105c <tcp_input+0xe04>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  121038:	e51b3010 	ldr	r3, [fp, #-16]
  12103c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  121040:	e5d3200d 	ldrb	r2, [r3, #13]
  121044:	e51b3010 	ldr	r3, [fp, #-16]
  121048:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  12104c:	e3822020 	orr	r2, r2, #32
  121050:	e6ef2072 	uxtb	r2, r2
  121054:	e5c3200d 	strb	r2, [r3, #13]
  121058:	ea00001d 	b	1210d4 <tcp_input+0xe7c>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  12105c:	e51b3010 	ldr	r3, [fp, #-16]
  121060:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  121064:	e3530a02 	cmp	r3, #8192	; 0x2000
  121068:	0a000005 	beq	121084 <tcp_input+0xe2c>
              pcb->rcv_wnd++;
  12106c:	e51b3010 	ldr	r3, [fp, #-16]
  121070:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  121074:	e2833001 	add	r3, r3, #1
  121078:	e6ff2073 	uxth	r2, r3
  12107c:	e51b3010 	ldr	r3, [fp, #-16]
  121080:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
  121084:	e51b3010 	ldr	r3, [fp, #-16]
  121088:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  12108c:	e3530000 	cmp	r3, #0
  121090:	0a00000a 	beq	1210c0 <tcp_input+0xe68>
  121094:	e51b3010 	ldr	r3, [fp, #-16]
  121098:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  12109c:	e51b3010 	ldr	r3, [fp, #-16]
  1210a0:	e5930010 	ldr	r0, [r3, #16]
  1210a4:	e3a03000 	mov	r3, #0
  1210a8:	e3a02000 	mov	r2, #0
  1210ac:	e51b1010 	ldr	r1, [fp, #-16]
  1210b0:	e12fff34 	blx	r4
  1210b4:	e1a03000 	mov	r3, r0
  1210b8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  1210bc:	ea000001 	b	1210c8 <tcp_input+0xe70>
  1210c0:	e3a03000 	mov	r3, #0
  1210c4:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  1210c8:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  1210cc:	e373000d 	cmn	r3, #13
  1210d0:	0a00000c 	beq	121108 <tcp_input+0xeb0>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
  1210d4:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  1210d8:	e3403015 	movt	r3, #21
  1210dc:	e3a02000 	mov	r2, #0
  1210e0:	e5832000 	str	r2, [r3]
        /* Try to send something out. */
        tcp_output(pcb);
  1210e4:	e51b0010 	ldr	r0, [fp, #-16]
  1210e8:	eb00138c 	bl	125f20 <tcp_output>
  1210ec:	ea000006 	b	12110c <tcp_input+0xeb4>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
  1210f0:	e320f000 	nop	{0}
  1210f4:	ea000004 	b	12110c <tcp_input+0xeb4>
              goto aborted;
  1210f8:	e320f000 	nop	{0}
  1210fc:	ea000002 	b	12110c <tcp_input+0xeb4>
            goto aborted;
  121100:	e320f000 	nop	{0}
  121104:	ea000000 	b	12110c <tcp_input+0xeb4>
              goto aborted;
  121108:	e320f000 	nop	{0}
    tcp_input_pcb = NULL;
  12110c:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  121110:	e3403015 	movt	r3, #21
  121114:	e3a02000 	mov	r2, #0
  121118:	e5832000 	str	r2, [r3]
    recv_data = NULL;
  12111c:	e30e3274 	movw	r3, #57972	; 0xe274
  121120:	e3403014 	movt	r3, #20
  121124:	e3a02000 	mov	r2, #0
  121128:	e5832000 	str	r2, [r3]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
  12112c:	e30e3244 	movw	r3, #57924	; 0xe244
  121130:	e3403014 	movt	r3, #20
  121134:	e5933004 	ldr	r3, [r3, #4]
  121138:	e3530000 	cmp	r3, #0
  12113c:	0a000053 	beq	121290 <tcp_input+0x1038>
    {
      pbuf_free(inseg.p);
  121140:	e30e3244 	movw	r3, #57924	; 0xe244
  121144:	e3403014 	movt	r3, #20
  121148:	e5933004 	ldr	r3, [r3, #4]
  12114c:	e1a00003 	mov	r0, r3
  121150:	ebffe747 	bl	11ae74 <pbuf_free>
      inseg.p = NULL;
  121154:	e30e3244 	movw	r3, #57924	; 0xe244
  121158:	e3403014 	movt	r3, #20
  12115c:	e3a02000 	mov	r2, #0
  121160:	e5832004 	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
  121164:	ea000049 	b	121290 <tcp_input+0x1038>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  121168:	e30e3254 	movw	r3, #57940	; 0xe254
  12116c:	e3403014 	movt	r3, #20
  121170:	e5933000 	ldr	r3, [r3]
  121174:	e1d330bc 	ldrh	r3, [r3, #12]
  121178:	e6ff3073 	uxth	r3, r3
  12117c:	e1a00003 	mov	r0, r3
  121180:	ebffd504 	bl	116598 <lwip_htons>
  121184:	e1a03000 	mov	r3, r0
  121188:	e2033004 	and	r3, r3, #4
  12118c:	e3530000 	cmp	r3, #0
  121190:	1a000029 	bne	12123c <tcp_input+0xfe4>
      TCP_STATS_INC(tcp.proterr);
  121194:	e30c3a48 	movw	r3, #51784	; 0xca48
  121198:	e3403015 	movt	r3, #21
  12119c:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  1211a0:	e2833001 	add	r3, r3, #1
  1211a4:	e6ff2073 	uxth	r2, r3
  1211a8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1211ac:	e3403015 	movt	r3, #21
  1211b0:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
      TCP_STATS_INC(tcp.drop);
  1211b4:	e30c3a48 	movw	r3, #51784	; 0xca48
  1211b8:	e3403015 	movt	r3, #21
  1211bc:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  1211c0:	e2833001 	add	r3, r3, #1
  1211c4:	e6ff2073 	uxth	r2, r3
  1211c8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1211cc:	e3403015 	movt	r3, #21
  1211d0:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1211d4:	e30e3268 	movw	r3, #57960	; 0xe268
  1211d8:	e3403014 	movt	r3, #20
  1211dc:	e5930000 	ldr	r0, [r3]
  1211e0:	e30e326e 	movw	r3, #57966	; 0xe26e
  1211e4:	e3403014 	movt	r3, #20
  1211e8:	e1d330b0 	ldrh	r3, [r3]
  1211ec:	e1a02003 	mov	r2, r3
  1211f0:	e30e3264 	movw	r3, #57956	; 0xe264
  1211f4:	e3403014 	movt	r3, #20
  1211f8:	e5933000 	ldr	r3, [r3]
  1211fc:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121200:	e30e3254 	movw	r3, #57940	; 0xe254
  121204:	e3403014 	movt	r3, #20
  121208:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  12120c:	e1d330b2 	ldrh	r3, [r3, #2]
  121210:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121214:	e30e3254 	movw	r3, #57940	; 0xe254
  121218:	e3403014 	movt	r3, #20
  12121c:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121220:	e1d330b0 	ldrh	r3, [r3]
  121224:	e6ff3073 	uxth	r3, r3
  121228:	e58d3004 	str	r3, [sp, #4]
  12122c:	e58d2000 	str	r2, [sp]
  121230:	e59f3068 	ldr	r3, [pc, #104]	; 1212a0 <tcp_input+0x1048>
  121234:	e59f2060 	ldr	r2, [pc, #96]	; 12129c <tcp_input+0x1044>
  121238:	eb00159e 	bl	1268b8 <tcp_rst>
    pbuf_free(p);
  12123c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  121240:	ebffe70b 	bl	11ae74 <pbuf_free>
  return;
  121244:	ea000011 	b	121290 <tcp_input+0x1038>
dropped:
  TCP_STATS_INC(tcp.drop);
  121248:	e30c3a48 	movw	r3, #51784	; 0xca48
  12124c:	e3403015 	movt	r3, #21
  121250:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  121254:	e2833001 	add	r3, r3, #1
  121258:	e6ff2073 	uxth	r2, r3
  12125c:	e30c3a48 	movw	r3, #51784	; 0xca48
  121260:	e3403015 	movt	r3, #21
  121264:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
  MIB2_STATS_INC(mib2.tcpinerrs);
  121268:	e30c3a48 	movw	r3, #51784	; 0xca48
  12126c:	e3403015 	movt	r3, #21
  121270:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  121274:	e2832001 	add	r2, r3, #1
  121278:	e30c3a48 	movw	r3, #51784	; 0xca48
  12127c:	e3403015 	movt	r3, #21
  121280:	e5832188 	str	r2, [r3, #392]	; 0x188
  pbuf_free(p);
  121284:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  121288:	ebffe6f9 	bl	11ae74 <pbuf_free>
  12128c:	ea000000 	b	121294 <tcp_input+0x103c>
  return;
  121290:	e320f000 	nop	{0}
}
  121294:	e24bd008 	sub	sp, fp, #8
  121298:	e8bd8810 	pop	{r4, fp, pc}
  12129c:	0014f624 	.word	0x0014f624
  1212a0:	0014f620 	.word	0x0014f620

001212a4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
  1212a4:	e92d4800 	push	{fp, lr}
  1212a8:	e28db004 	add	fp, sp, #4
  1212ac:	e24dd020 	sub	sp, sp, #32
  1212b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
  1212b4:	e30e3270 	movw	r3, #57968	; 0xe270
  1212b8:	e3403014 	movt	r3, #20
  1212bc:	e5d33000 	ldrb	r3, [r3]
  1212c0:	e2033004 	and	r3, r3, #4
  1212c4:	e3530000 	cmp	r3, #0
  1212c8:	1a0000c8 	bne	1215f0 <tcp_listen_input+0x34c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
  1212cc:	e30e3270 	movw	r3, #57968	; 0xe270
  1212d0:	e3403014 	movt	r3, #20
  1212d4:	e5d33000 	ldrb	r3, [r3]
  1212d8:	e2033010 	and	r3, r3, #16
  1212dc:	e3530000 	cmp	r3, #0
  1212e0:	0a00001a 	beq	121350 <tcp_listen_input+0xac>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1212e4:	e30e3268 	movw	r3, #57960	; 0xe268
  1212e8:	e3403014 	movt	r3, #20
  1212ec:	e5930000 	ldr	r0, [r3]
  1212f0:	e30e326e 	movw	r3, #57966	; 0xe26e
  1212f4:	e3403014 	movt	r3, #20
  1212f8:	e1d330b0 	ldrh	r3, [r3]
  1212fc:	e1a02003 	mov	r2, r3
  121300:	e30e3264 	movw	r3, #57956	; 0xe264
  121304:	e3403014 	movt	r3, #20
  121308:	e5933000 	ldr	r3, [r3]
  12130c:	e0821003 	add	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121310:	e30e3254 	movw	r3, #57940	; 0xe254
  121314:	e3403014 	movt	r3, #20
  121318:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  12131c:	e1d330b2 	ldrh	r3, [r3, #2]
  121320:	e6ff2073 	uxth	r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121324:	e30e3254 	movw	r3, #57940	; 0xe254
  121328:	e3403014 	movt	r3, #20
  12132c:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121330:	e1d330b0 	ldrh	r3, [r3]
  121334:	e6ff3073 	uxth	r3, r3
  121338:	e58d3004 	str	r3, [sp, #4]
  12133c:	e58d2000 	str	r2, [sp]
  121340:	e59f32bc 	ldr	r3, [pc, #700]	; 121604 <tcp_listen_input+0x360>
  121344:	e59f22bc 	ldr	r2, [pc, #700]	; 121608 <tcp_listen_input+0x364>
  121348:	eb00155a 	bl	1268b8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
  12134c:	ea0000a9 	b	1215f8 <tcp_listen_input+0x354>
  } else if (flags & TCP_SYN) {
  121350:	e30e3270 	movw	r3, #57968	; 0xe270
  121354:	e3403014 	movt	r3, #20
  121358:	e5d33000 	ldrb	r3, [r3]
  12135c:	e2033002 	and	r3, r3, #2
  121360:	e3530000 	cmp	r3, #0
  121364:	0a0000a3 	beq	1215f8 <tcp_listen_input+0x354>
    npcb = tcp_alloc(pcb->prio);
  121368:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12136c:	e5d33018 	ldrb	r3, [r3, #24]
  121370:	e1a00003 	mov	r0, r3
  121374:	ebfff935 	bl	11f850 <tcp_alloc>
  121378:	e50b0008 	str	r0, [fp, #-8]
    if (npcb == NULL) {
  12137c:	e51b3008 	ldr	r3, [fp, #-8]
  121380:	e3530000 	cmp	r3, #0
  121384:	1a000018 	bne	1213ec <tcp_listen_input+0x148>
      TCP_STATS_INC(tcp.memerr);
  121388:	e30c3a48 	movw	r3, #51784	; 0xca48
  12138c:	e3403015 	movt	r3, #21
  121390:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  121394:	e2833001 	add	r3, r3, #1
  121398:	e6ff2073 	uxth	r2, r3
  12139c:	e30c3a48 	movw	r3, #51784	; 0xca48
  1213a0:	e3403015 	movt	r3, #21
  1213a4:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  1213a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1213ac:	e593301c 	ldr	r3, [r3, #28]
  1213b0:	e3530000 	cmp	r3, #0
  1213b4:	0a000009 	beq	1213e0 <tcp_listen_input+0x13c>
  1213b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1213bc:	e593301c 	ldr	r3, [r3, #28]
  1213c0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1213c4:	e5920010 	ldr	r0, [r2, #16]
  1213c8:	e3e02000 	mvn	r2, #0
  1213cc:	e3a01000 	mov	r1, #0
  1213d0:	e12fff33 	blx	r3
  1213d4:	e1a03000 	mov	r3, r0
  1213d8:	e54b300e 	strb	r3, [fp, #-14]
      return;
  1213dc:	ea000086 	b	1215fc <tcp_listen_input+0x358>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  1213e0:	e3e0300f 	mvn	r3, #15
  1213e4:	e54b300e 	strb	r3, [fp, #-14]
      return;
  1213e8:	ea000083 	b	1215fc <tcp_listen_input+0x358>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
  1213ec:	e30f3610 	movw	r3, #62992	; 0xf610
  1213f0:	e3403014 	movt	r3, #20
  1213f4:	e5932014 	ldr	r2, [r3, #20]
  1213f8:	e51b3008 	ldr	r3, [fp, #-8]
  1213fc:	e5832000 	str	r2, [r3]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
  121400:	e30f3610 	movw	r3, #62992	; 0xf610
  121404:	e3403014 	movt	r3, #20
  121408:	e5932010 	ldr	r2, [r3, #16]
  12140c:	e51b3008 	ldr	r3, [fp, #-8]
  121410:	e5832004 	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
  121414:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121418:	e1d321ba 	ldrh	r2, [r3, #26]
  12141c:	e51b3008 	ldr	r3, [fp, #-8]
  121420:	e1c321ba 	strh	r2, [r3, #26]
    npcb->remote_port = tcphdr->src;
  121424:	e30e3254 	movw	r3, #57940	; 0xe254
  121428:	e3403014 	movt	r3, #20
  12142c:	e5933000 	ldr	r3, [r3]
  121430:	e1d330b0 	ldrh	r3, [r3]
  121434:	e6ff2073 	uxth	r2, r3
  121438:	e51b3008 	ldr	r3, [fp, #-8]
  12143c:	e1c321bc 	strh	r2, [r3, #28]
    npcb->state = SYN_RCVD;
  121440:	e51b3008 	ldr	r3, [fp, #-8]
  121444:	e3a02003 	mov	r2, #3
  121448:	e5832014 	str	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
  12144c:	e30e3264 	movw	r3, #57956	; 0xe264
  121450:	e3403014 	movt	r3, #20
  121454:	e5933000 	ldr	r3, [r3]
  121458:	e2832001 	add	r2, r3, #1
  12145c:	e51b3008 	ldr	r3, [fp, #-8]
  121460:	e5832028 	str	r2, [r3, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  121464:	e51b3008 	ldr	r3, [fp, #-8]
  121468:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12146c:	e51b3008 	ldr	r3, [fp, #-8]
  121470:	e5832030 	str	r2, [r3, #48]	; 0x30
    iss = tcp_next_iss(npcb);
  121474:	e51b0008 	ldr	r0, [fp, #-8]
  121478:	ebfffadc 	bl	11fff0 <tcp_next_iss>
  12147c:	e50b000c 	str	r0, [fp, #-12]
    npcb->snd_wl2 = iss;
  121480:	e51b3008 	ldr	r3, [fp, #-8]
  121484:	e51b200c 	ldr	r2, [fp, #-12]
  121488:	e5832058 	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
  12148c:	e51b3008 	ldr	r3, [fp, #-8]
  121490:	e51b200c 	ldr	r2, [fp, #-12]
  121494:	e5832050 	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
  121498:	e51b3008 	ldr	r3, [fp, #-8]
  12149c:	e51b200c 	ldr	r2, [fp, #-12]
  1214a0:	e5832048 	str	r2, [r3, #72]	; 0x48
    npcb->snd_lbb = iss;
  1214a4:	e51b3008 	ldr	r3, [fp, #-8]
  1214a8:	e51b200c 	ldr	r2, [fp, #-12]
  1214ac:	e583205c 	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  1214b0:	e30e3264 	movw	r3, #57956	; 0xe264
  1214b4:	e3403014 	movt	r3, #20
  1214b8:	e5933000 	ldr	r3, [r3]
  1214bc:	e2432001 	sub	r2, r3, #1
  1214c0:	e51b3008 	ldr	r3, [fp, #-8]
  1214c4:	e5832054 	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
  1214c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1214cc:	e5932010 	ldr	r2, [r3, #16]
  1214d0:	e51b3008 	ldr	r3, [fp, #-8]
  1214d4:	e5832010 	str	r2, [r3, #16]
    npcb->listener = pcb;
  1214d8:	e51b3008 	ldr	r3, [fp, #-8]
  1214dc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1214e0:	e583207c 	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  1214e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1214e8:	e5d33008 	ldrb	r3, [r3, #8]
  1214ec:	e203300c 	and	r3, r3, #12
  1214f0:	e6ef2073 	uxtb	r2, r3
  1214f4:	e51b3008 	ldr	r3, [fp, #-8]
  1214f8:	e5c32008 	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
  1214fc:	e30c3c38 	movw	r3, #52280	; 0xcc38
  121500:	e3403015 	movt	r3, #21
  121504:	e5932000 	ldr	r2, [r3]
  121508:	e51b3008 	ldr	r3, [fp, #-8]
  12150c:	e583200c 	str	r2, [r3, #12]
  121510:	e30c3c38 	movw	r3, #52280	; 0xcc38
  121514:	e3403015 	movt	r3, #21
  121518:	e51b2008 	ldr	r2, [fp, #-8]
  12151c:	e5832000 	str	r2, [r3]
  121520:	eb001738 	bl	127208 <tcp_timer_needed>
  121524:	e30c3c34 	movw	r3, #52276	; 0xcc34
  121528:	e3403015 	movt	r3, #21
  12152c:	e3a02001 	mov	r2, #1
  121530:	e5c32000 	strb	r2, [r3]
    tcp_parseopt(npcb);
  121534:	e51b0008 	ldr	r0, [fp, #-8]
  121538:	eb000bf1 	bl	124504 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
  12153c:	e30e3254 	movw	r3, #57940	; 0xe254
  121540:	e3403014 	movt	r3, #20
  121544:	e5933000 	ldr	r3, [r3]
  121548:	e1d330be 	ldrh	r3, [r3, #14]
  12154c:	e6ff2073 	uxth	r2, r3
  121550:	e51b3008 	ldr	r3, [fp, #-8]
  121554:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
  121558:	e51b3008 	ldr	r3, [fp, #-8]
  12155c:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  121560:	e51b3008 	ldr	r3, [fp, #-8]
  121564:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
  121568:	e51b3008 	ldr	r3, [fp, #-8]
  12156c:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  121570:	e51b3008 	ldr	r3, [fp, #-8]
  121574:	e2833004 	add	r3, r3, #4
  121578:	e1a01003 	mov	r1, r3
  12157c:	e1a00002 	mov	r0, r2
  121580:	ebfffaaf 	bl	120044 <tcp_eff_send_mss_impl>
  121584:	e1a03000 	mov	r3, r0
  121588:	e1a02003 	mov	r2, r3
  12158c:	e51b3008 	ldr	r3, [fp, #-8]
  121590:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    MIB2_STATS_INC(mib2.tcppassiveopens);
  121594:	e30c3a48 	movw	r3, #51784	; 0xca48
  121598:	e3403015 	movt	r3, #21
  12159c:	e5933170 	ldr	r3, [r3, #368]	; 0x170
  1215a0:	e2832001 	add	r2, r3, #1
  1215a4:	e30c3a48 	movw	r3, #51784	; 0xca48
  1215a8:	e3403015 	movt	r3, #21
  1215ac:	e5832170 	str	r2, [r3, #368]	; 0x170
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  1215b0:	e3a01012 	mov	r1, #18
  1215b4:	e51b0008 	ldr	r0, [fp, #-8]
  1215b8:	eb001109 	bl	1259e4 <tcp_enqueue_flags>
  1215bc:	e1a03000 	mov	r3, r0
  1215c0:	e54b300d 	strb	r3, [fp, #-13]
    if (rc != ERR_OK) {
  1215c4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1215c8:	e3530000 	cmp	r3, #0
  1215cc:	0a000003 	beq	1215e0 <tcp_listen_input+0x33c>
      tcp_abandon(npcb, 0);
  1215d0:	e3a01000 	mov	r1, #0
  1215d4:	e51b0008 	ldr	r0, [fp, #-8]
  1215d8:	ebfff05f 	bl	11d75c <tcp_abandon>
      return;
  1215dc:	ea000006 	b	1215fc <tcp_listen_input+0x358>
    tcp_output(npcb);
  1215e0:	e51b0008 	ldr	r0, [fp, #-8]
  1215e4:	eb00124d 	bl	125f20 <tcp_output>
  return;
  1215e8:	e320f000 	nop	{0}
  1215ec:	ea000001 	b	1215f8 <tcp_listen_input+0x354>
    return;
  1215f0:	e320f000 	nop	{0}
  1215f4:	ea000000 	b	1215fc <tcp_listen_input+0x358>
  return;
  1215f8:	e320f000 	nop	{0}
}
  1215fc:	e24bd004 	sub	sp, fp, #4
  121600:	e8bd8800 	pop	{fp, pc}
  121604:	0014f620 	.word	0x0014f620
  121608:	0014f624 	.word	0x0014f624

0012160c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
  12160c:	e92d4800 	push	{fp, lr}
  121610:	e28db004 	add	fp, sp, #4
  121614:	e24dd010 	sub	sp, sp, #16
  121618:	e50b0008 	str	r0, [fp, #-8]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
  12161c:	e30e3270 	movw	r3, #57968	; 0xe270
  121620:	e3403014 	movt	r3, #20
  121624:	e5d33000 	ldrb	r3, [r3]
  121628:	e2033004 	and	r3, r3, #4
  12162c:	e3530000 	cmp	r3, #0
  121630:	1a00004d 	bne	12176c <tcp_timewait_input+0x160>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
  121634:	e30e3270 	movw	r3, #57968	; 0xe270
  121638:	e3403014 	movt	r3, #20
  12163c:	e5d33000 	ldrb	r3, [r3]
  121640:	e2033002 	and	r3, r3, #2
  121644:	e3530000 	cmp	r3, #0
  121648:	0a00002d 	beq	121704 <tcp_timewait_input+0xf8>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
  12164c:	e30e3264 	movw	r3, #57956	; 0xe264
  121650:	e3403014 	movt	r3, #20
  121654:	e5932000 	ldr	r2, [r3]
  121658:	e51b3008 	ldr	r3, [fp, #-8]
  12165c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121660:	e0423003 	sub	r3, r2, r3
  121664:	e3530000 	cmp	r3, #0
  121668:	ba000030 	blt	121730 <tcp_timewait_input+0x124>
  12166c:	e30e3264 	movw	r3, #57956	; 0xe264
  121670:	e3403014 	movt	r3, #20
  121674:	e5932000 	ldr	r2, [r3]
  121678:	e51b3008 	ldr	r3, [fp, #-8]
  12167c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121680:	e51b1008 	ldr	r1, [fp, #-8]
  121684:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  121688:	e0833001 	add	r3, r3, r1
  12168c:	e0423003 	sub	r3, r2, r3
  121690:	e3530000 	cmp	r3, #0
  121694:	ca000025 	bgt	121730 <tcp_timewait_input+0x124>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121698:	e30e3268 	movw	r3, #57960	; 0xe268
  12169c:	e3403014 	movt	r3, #20
  1216a0:	e5930000 	ldr	r0, [r3]
  1216a4:	e30e326e 	movw	r3, #57966	; 0xe26e
  1216a8:	e3403014 	movt	r3, #20
  1216ac:	e1d330b0 	ldrh	r3, [r3]
  1216b0:	e1a02003 	mov	r2, r3
  1216b4:	e30e3264 	movw	r3, #57956	; 0xe264
  1216b8:	e3403014 	movt	r3, #20
  1216bc:	e5933000 	ldr	r3, [r3]
  1216c0:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  1216c4:	e30e3254 	movw	r3, #57940	; 0xe254
  1216c8:	e3403014 	movt	r3, #20
  1216cc:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1216d0:	e1d330b2 	ldrh	r3, [r3, #2]
  1216d4:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  1216d8:	e30e3254 	movw	r3, #57940	; 0xe254
  1216dc:	e3403014 	movt	r3, #20
  1216e0:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1216e4:	e1d330b0 	ldrh	r3, [r3]
  1216e8:	e6ff3073 	uxth	r3, r3
  1216ec:	e58d3004 	str	r3, [sp, #4]
  1216f0:	e58d2000 	str	r2, [sp]
  1216f4:	e59f3084 	ldr	r3, [pc, #132]	; 121780 <tcp_timewait_input+0x174>
  1216f8:	e59f2084 	ldr	r2, [pc, #132]	; 121784 <tcp_timewait_input+0x178>
  1216fc:	eb00146d 	bl	1268b8 <tcp_rst>
      return;
  121700:	ea00001c 	b	121778 <tcp_timewait_input+0x16c>
    }
  } else if (flags & TCP_FIN) {
  121704:	e30e3270 	movw	r3, #57968	; 0xe270
  121708:	e3403014 	movt	r3, #20
  12170c:	e5d33000 	ldrb	r3, [r3]
  121710:	e2033001 	and	r3, r3, #1
  121714:	e3530000 	cmp	r3, #0
  121718:	0a000004 	beq	121730 <tcp_timewait_input+0x124>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
  12171c:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  121720:	e3403015 	movt	r3, #21
  121724:	e5932000 	ldr	r2, [r3]
  121728:	e51b3008 	ldr	r3, [fp, #-8]
  12172c:	e5832024 	str	r2, [r3, #36]	; 0x24
  }

  if ((tcplen > 0)) {
  121730:	e30e326e 	movw	r3, #57966	; 0xe26e
  121734:	e3403014 	movt	r3, #20
  121738:	e1d330b0 	ldrh	r3, [r3]
  12173c:	e3530000 	cmp	r3, #0
  121740:	0a00000b 	beq	121774 <tcp_timewait_input+0x168>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
  121744:	e51b3008 	ldr	r3, [fp, #-8]
  121748:	e5d3301e 	ldrb	r3, [r3, #30]
  12174c:	e3833002 	orr	r3, r3, #2
  121750:	e6ef2073 	uxtb	r2, r3
  121754:	e51b3008 	ldr	r3, [fp, #-8]
  121758:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  12175c:	e51b0008 	ldr	r0, [fp, #-8]
  121760:	eb0011ee 	bl	125f20 <tcp_output>
  }
  return;
  121764:	e320f000 	nop	{0}
  121768:	ea000001 	b	121774 <tcp_timewait_input+0x168>
    return;
  12176c:	e320f000 	nop	{0}
  121770:	ea000000 	b	121778 <tcp_timewait_input+0x16c>
  return;
  121774:	e320f000 	nop	{0}
}
  121778:	e24bd004 	sub	sp, fp, #4
  12177c:	e8bd8800 	pop	{fp, pc}
  121780:	0014f620 	.word	0x0014f620
  121784:	0014f624 	.word	0x0014f624

00121788 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
  121788:	e92d4800 	push	{fp, lr}
  12178c:	e28db004 	add	fp, sp, #4
  121790:	e24dd028 	sub	sp, sp, #40	; 0x28
  121794:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
  121798:	e3a03000 	mov	r3, #0
  12179c:	e54b3009 	strb	r3, [fp, #-9]
  err_t err;

  err = ERR_OK;
  1217a0:	e3a03000 	mov	r3, #0
  1217a4:	e54b300a 	strb	r3, [fp, #-10]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
  1217a8:	e30e3270 	movw	r3, #57968	; 0xe270
  1217ac:	e3403014 	movt	r3, #20
  1217b0:	e5d33000 	ldrb	r3, [r3]
  1217b4:	e2033004 	and	r3, r3, #4
  1217b8:	e3530000 	cmp	r3, #0
  1217bc:	0a000050 	beq	121904 <tcp_process+0x17c>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
  1217c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217c4:	e5933014 	ldr	r3, [r3, #20]
  1217c8:	e3530002 	cmp	r3, #2
  1217cc:	1a000009 	bne	1217f8 <tcp_process+0x70>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
  1217d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217d4:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1217d8:	e30e3268 	movw	r3, #57960	; 0xe268
  1217dc:	e3403014 	movt	r3, #20
  1217e0:	e5933000 	ldr	r3, [r3]
  1217e4:	e1520003 	cmp	r2, r3
  1217e8:	1a000025 	bne	121884 <tcp_process+0xfc>
        acceptable = 1;
  1217ec:	e3a03001 	mov	r3, #1
  1217f0:	e54b3009 	strb	r3, [fp, #-9]
  1217f4:	ea000022 	b	121884 <tcp_process+0xfc>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
  1217f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217fc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  121800:	e30e3264 	movw	r3, #57956	; 0xe264
  121804:	e3403014 	movt	r3, #20
  121808:	e5933000 	ldr	r3, [r3]
  12180c:	e1520003 	cmp	r2, r3
  121810:	1a000002 	bne	121820 <tcp_process+0x98>
        acceptable = 1;
  121814:	e3a03001 	mov	r3, #1
  121818:	e54b3009 	strb	r3, [fp, #-9]
  12181c:	ea000018 	b	121884 <tcp_process+0xfc>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  121820:	e30e3264 	movw	r3, #57956	; 0xe264
  121824:	e3403014 	movt	r3, #20
  121828:	e5932000 	ldr	r2, [r3]
  12182c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121830:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121834:	e0423003 	sub	r3, r2, r3
  121838:	e3530000 	cmp	r3, #0
  12183c:	ba000010 	blt	121884 <tcp_process+0xfc>
  121840:	e30e3264 	movw	r3, #57956	; 0xe264
  121844:	e3403014 	movt	r3, #20
  121848:	e5932000 	ldr	r2, [r3]
  12184c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121850:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121854:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121858:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  12185c:	e0833001 	add	r3, r3, r1
  121860:	e0423003 	sub	r3, r2, r3
  121864:	e3530000 	cmp	r3, #0
  121868:	ca000005 	bgt	121884 <tcp_process+0xfc>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
  12186c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121870:	e5d3301e 	ldrb	r3, [r3, #30]
  121874:	e3833002 	orr	r3, r3, #2
  121878:	e6ef2073 	uxtb	r2, r3
  12187c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121880:	e5c3201e 	strb	r2, [r3, #30]
      }
    }

    if (acceptable) {
  121884:	e55b3009 	ldrb	r3, [fp, #-9]
  121888:	e3530000 	cmp	r3, #0
  12188c:	0a00001a 	beq	1218fc <tcp_process+0x174>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
  121890:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121894:	e5933014 	ldr	r3, [r3, #20]
  121898:	e3530000 	cmp	r3, #0
  12189c:	1a000006 	bne	1218bc <tcp_process+0x134>
  1218a0:	e30803f8 	movw	r0, #33784	; 0x83f8
  1218a4:	e3400014 	movt	r0, #20
  1218a8:	ebff8619 	bl	103114 <rt_kprintf>
  1218ac:	e3a01fb5 	mov	r1, #724	; 0x2d4
  1218b0:	e308027c 	movw	r0, #33404	; 0x827c
  1218b4:	e3400014 	movt	r0, #20
  1218b8:	ebffa5fd 	bl	10b0b4 <sys_arch_assert>
      recv_flags |= TF_RESET;
  1218bc:	e30e3271 	movw	r3, #57969	; 0xe271
  1218c0:	e3403014 	movt	r3, #20
  1218c4:	e5d33000 	ldrb	r3, [r3]
  1218c8:	e3833008 	orr	r3, r3, #8
  1218cc:	e6ef2073 	uxtb	r2, r3
  1218d0:	e30e3271 	movw	r3, #57969	; 0xe271
  1218d4:	e3403014 	movt	r3, #20
  1218d8:	e5c32000 	strb	r2, [r3]
      pcb->flags &= ~TF_ACK_DELAY;
  1218dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218e0:	e5d3301e 	ldrb	r3, [r3, #30]
  1218e4:	e3c33001 	bic	r3, r3, #1
  1218e8:	e6ef2073 	uxtb	r2, r3
  1218ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218f0:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_RST;
  1218f4:	e3e0300d 	mvn	r3, #13
  1218f8:	ea0002fd 	b	1224f4 <tcp_process+0xd6c>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
  1218fc:	e3a03000 	mov	r3, #0
  121900:	ea0002fb 	b	1224f4 <tcp_process+0xd6c>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
  121904:	e30e3270 	movw	r3, #57968	; 0xe270
  121908:	e3403014 	movt	r3, #20
  12190c:	e5d33000 	ldrb	r3, [r3]
  121910:	e2033002 	and	r3, r3, #2
  121914:	e3530000 	cmp	r3, #0
  121918:	0a00000f 	beq	12195c <tcp_process+0x1d4>
  12191c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121920:	e5933014 	ldr	r3, [r3, #20]
  121924:	e3530002 	cmp	r3, #2
  121928:	0a00000b 	beq	12195c <tcp_process+0x1d4>
  12192c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121930:	e5933014 	ldr	r3, [r3, #20]
  121934:	e3530003 	cmp	r3, #3
  121938:	0a000007 	beq	12195c <tcp_process+0x1d4>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
  12193c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121940:	e5d3301e 	ldrb	r3, [r3, #30]
  121944:	e3833002 	orr	r3, r3, #2
  121948:	e6ef2073 	uxtb	r2, r3
  12194c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121950:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_OK;
  121954:	e3a03000 	mov	r3, #0
  121958:	ea0002e5 	b	1224f4 <tcp_process+0xd6c>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
  12195c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121960:	e5d3301e 	ldrb	r3, [r3, #30]
  121964:	e2033010 	and	r3, r3, #16
  121968:	e3530000 	cmp	r3, #0
  12196c:	1a000004 	bne	121984 <tcp_process+0x1fc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  121970:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  121974:	e3403015 	movt	r3, #21
  121978:	e5932000 	ldr	r2, [r3]
  12197c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121980:	e5832024 	str	r2, [r3, #36]	; 0x24
  }
  pcb->keep_cnt_sent = 0;
  121984:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121988:	e3a02000 	mov	r2, #0
  12198c:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

  tcp_parseopt(pcb);
  121990:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121994:	eb000ada 	bl	124504 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
  121998:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12199c:	e5933014 	ldr	r3, [r3, #20]
  1219a0:	e2433002 	sub	r3, r3, #2
  1219a4:	e3530007 	cmp	r3, #7
  1219a8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1219ac:	ea0002c0 	b	1224b4 <tcp_process+0xd2c>
  1219b0:	001219d0 	.word	0x001219d0
  1219b4:	00121d24 	.word	0x00121d24
  1219b8:	00121fc8 	.word	0x00121fc8
  1219bc:	00122010 	.word	0x00122010
  1219c0:	001221f0 	.word	0x001221f0
  1219c4:	00121fc8 	.word	0x00121fc8
  1219c8:	00122310 	.word	0x00122310
  1219cc:	00122444 	.word	0x00122444
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  1219d0:	e30e3270 	movw	r3, #57968	; 0xe270
  1219d4:	e3403014 	movt	r3, #20
  1219d8:	e5d33000 	ldrb	r3, [r3]
  1219dc:	e2033010 	and	r3, r3, #16
  1219e0:	e3530000 	cmp	r3, #0
  1219e4:	0a0000a4 	beq	121c7c <tcp_process+0x4f4>
  1219e8:	e30e3270 	movw	r3, #57968	; 0xe270
  1219ec:	e3403014 	movt	r3, #20
  1219f0:	e5d33000 	ldrb	r3, [r3]
  1219f4:	e2033002 	and	r3, r3, #2
  1219f8:	e3530000 	cmp	r3, #0
  1219fc:	0a00009e 	beq	121c7c <tcp_process+0x4f4>
        && (ackno == pcb->lastack + 1)) {
  121a00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a04:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  121a08:	e2832001 	add	r2, r3, #1
  121a0c:	e30e3268 	movw	r3, #57960	; 0xe268
  121a10:	e3403014 	movt	r3, #20
  121a14:	e5933000 	ldr	r3, [r3]
  121a18:	e1520003 	cmp	r2, r3
  121a1c:	1a000096 	bne	121c7c <tcp_process+0x4f4>
      pcb->rcv_nxt = seqno + 1;
  121a20:	e30e3264 	movw	r3, #57956	; 0xe264
  121a24:	e3403014 	movt	r3, #20
  121a28:	e5933000 	ldr	r3, [r3]
  121a2c:	e2832001 	add	r2, r3, #1
  121a30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a34:	e5832028 	str	r2, [r3, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  121a38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a3c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  121a40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a44:	e5832030 	str	r2, [r3, #48]	; 0x30
      pcb->lastack = ackno;
  121a48:	e30e3268 	movw	r3, #57960	; 0xe268
  121a4c:	e3403014 	movt	r3, #20
  121a50:	e5932000 	ldr	r2, [r3]
  121a54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a58:	e5832048 	str	r2, [r3, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
  121a5c:	e30e3254 	movw	r3, #57940	; 0xe254
  121a60:	e3403014 	movt	r3, #20
  121a64:	e5933000 	ldr	r3, [r3]
  121a68:	e1d330be 	ldrh	r3, [r3, #14]
  121a6c:	e6ff2073 	uxth	r2, r3
  121a70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a74:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      pcb->snd_wnd_max = pcb->snd_wnd;
  121a78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a7c:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  121a80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a84:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  121a88:	e30e3264 	movw	r3, #57956	; 0xe264
  121a8c:	e3403014 	movt	r3, #20
  121a90:	e5933000 	ldr	r3, [r3]
  121a94:	e2432001 	sub	r2, r3, #1
  121a98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a9c:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->state = ESTABLISHED;
  121aa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121aa4:	e3a02004 	mov	r2, #4
  121aa8:	e5832014 	str	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  121aac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ab0:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  121ab4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ab8:	e2833004 	add	r3, r3, #4
  121abc:	e1a01003 	mov	r1, r3
  121ac0:	e1a00002 	mov	r0, r2
  121ac4:	ebfff95e 	bl	120044 <tcp_eff_send_mss_impl>
  121ac8:	e1a03000 	mov	r3, r0
  121acc:	e1a02003 	mov	r2, r3
  121ad0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ad4:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  121ad8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121adc:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121ae0:	e1a03083 	lsl	r3, r3, #1
  121ae4:	e301211c 	movw	r2, #4380	; 0x111c
  121ae8:	e1530002 	cmp	r3, r2
  121aec:	21a02003 	movcs	r2, r3
  121af0:	31a02002 	movcc	r2, r2
  121af4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121af8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121afc:	e1a03103 	lsl	r3, r3, #2
  121b00:	e1520003 	cmp	r2, r3
  121b04:	31a03002 	movcc	r3, r2
  121b08:	21a03003 	movcs	r3, r3
  121b0c:	e6ff2073 	uxth	r2, r3
  121b10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b14:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
  121b18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b1c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  121b20:	e3530000 	cmp	r3, #0
  121b24:	1a000006 	bne	121b44 <tcp_process+0x3bc>
  121b28:	e3080418 	movw	r0, #33816	; 0x8418
  121b2c:	e3400014 	movt	r0, #20
  121b30:	ebff8577 	bl	103114 <rt_kprintf>
  121b34:	e3001307 	movw	r1, #775	; 0x307
  121b38:	e308027c 	movw	r0, #33404	; 0x827c
  121b3c:	e3400014 	movt	r0, #20
  121b40:	ebffa55b 	bl	10b0b4 <sys_arch_assert>
      --pcb->snd_queuelen;
  121b44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b48:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  121b4c:	e2433001 	sub	r3, r3, #1
  121b50:	e6ff2073 	uxth	r2, r3
  121b54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b58:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
  121b5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b60:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  121b64:	e50b3008 	str	r3, [fp, #-8]
      if (rseg == NULL) {
  121b68:	e51b3008 	ldr	r3, [fp, #-8]
  121b6c:	e3530000 	cmp	r3, #0
  121b70:	1a000011 	bne	121bbc <tcp_process+0x434>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
  121b74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b78:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  121b7c:	e50b3008 	str	r3, [fp, #-8]
        LWIP_ASSERT("no segment to free", rseg != NULL);
  121b80:	e51b3008 	ldr	r3, [fp, #-8]
  121b84:	e3530000 	cmp	r3, #0
  121b88:	1a000006 	bne	121ba8 <tcp_process+0x420>
  121b8c:	e3080430 	movw	r0, #33840	; 0x8430
  121b90:	e3400014 	movt	r0, #20
  121b94:	ebff855e 	bl	103114 <rt_kprintf>
  121b98:	e300130f 	movw	r1, #783	; 0x30f
  121b9c:	e308027c 	movw	r0, #33404	; 0x827c
  121ba0:	e3400014 	movt	r0, #20
  121ba4:	ebffa542 	bl	10b0b4 <sys_arch_assert>
        pcb->unsent = rseg->next;
  121ba8:	e51b3008 	ldr	r3, [fp, #-8]
  121bac:	e5932000 	ldr	r2, [r3]
  121bb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121bb4:	e583206c 	str	r2, [r3, #108]	; 0x6c
  121bb8:	ea000003 	b	121bcc <tcp_process+0x444>
      } else {
        pcb->unacked = rseg->next;
  121bbc:	e51b3008 	ldr	r3, [fp, #-8]
  121bc0:	e5932000 	ldr	r2, [r3]
  121bc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121bc8:	e5832070 	str	r2, [r3, #112]	; 0x70
      }
      tcp_seg_free(rseg);
  121bcc:	e51b0008 	ldr	r0, [fp, #-8]
  121bd0:	ebfff61b 	bl	11f444 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  121bd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121bd8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  121bdc:	e3530000 	cmp	r3, #0
  121be0:	1a000003 	bne	121bf4 <tcp_process+0x46c>
        pcb->rtime = -1;
  121be4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121be8:	e3e02000 	mvn	r2, #0
  121bec:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  121bf0:	ea000005 	b	121c0c <tcp_process+0x484>
      } else {
        pcb->rtime = 0;
  121bf4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121bf8:	e3a02000 	mov	r2, #0
  121bfc:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        pcb->nrtx = 0;
  121c00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c04:	e3a02000 	mov	r2, #0
  121c08:	e5c32046 	strb	r2, [r3, #70]	; 0x46
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  121c0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c10:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  121c14:	e3530000 	cmp	r3, #0
  121c18:	0a000009 	beq	121c44 <tcp_process+0x4bc>
  121c1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c20:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  121c24:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121c28:	e5920010 	ldr	r0, [r2, #16]
  121c2c:	e3a02000 	mov	r2, #0
  121c30:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121c34:	e12fff33 	blx	r3
  121c38:	e1a03000 	mov	r3, r0
  121c3c:	e54b300a 	strb	r3, [fp, #-10]
  121c40:	ea000001 	b	121c4c <tcp_process+0x4c4>
  121c44:	e3a03000 	mov	r3, #0
  121c48:	e54b300a 	strb	r3, [fp, #-10]
      if (err == ERR_ABRT) {
  121c4c:	e15b30da 	ldrsb	r3, [fp, #-10]
  121c50:	e373000d 	cmn	r3, #13
  121c54:	1a000001 	bne	121c60 <tcp_process+0x4d8>
        return ERR_ABRT;
  121c58:	e3e0300c 	mvn	r3, #12
  121c5c:	ea000224 	b	1224f4 <tcp_process+0xd6c>
      }
      tcp_ack_now(pcb);
  121c60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c64:	e5d3301e 	ldrb	r3, [r3, #30]
  121c68:	e3833002 	orr	r3, r3, #2
  121c6c:	e6ef2073 	uxtb	r2, r3
  121c70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c74:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
  121c78:	ea00020f 	b	1224bc <tcp_process+0xd34>
    else if (flags & TCP_ACK) {
  121c7c:	e30e3270 	movw	r3, #57968	; 0xe270
  121c80:	e3403014 	movt	r3, #20
  121c84:	e5d33000 	ldrb	r3, [r3]
  121c88:	e2033010 	and	r3, r3, #16
  121c8c:	e3530000 	cmp	r3, #0
  121c90:	0a000209 	beq	1224bc <tcp_process+0xd34>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121c94:	e30e3268 	movw	r3, #57960	; 0xe268
  121c98:	e3403014 	movt	r3, #20
  121c9c:	e5930000 	ldr	r0, [r3]
  121ca0:	e30e326e 	movw	r3, #57966	; 0xe26e
  121ca4:	e3403014 	movt	r3, #20
  121ca8:	e1d330b0 	ldrh	r3, [r3]
  121cac:	e1a02003 	mov	r2, r3
  121cb0:	e30e3264 	movw	r3, #57956	; 0xe264
  121cb4:	e3403014 	movt	r3, #20
  121cb8:	e5933000 	ldr	r3, [r3]
  121cbc:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121cc0:	e30e3254 	movw	r3, #57940	; 0xe254
  121cc4:	e3403014 	movt	r3, #20
  121cc8:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121ccc:	e1d330b2 	ldrh	r3, [r3, #2]
  121cd0:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121cd4:	e30e3254 	movw	r3, #57940	; 0xe254
  121cd8:	e3403014 	movt	r3, #20
  121cdc:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121ce0:	e1d330b0 	ldrh	r3, [r3]
  121ce4:	e6ff3073 	uxth	r3, r3
  121ce8:	e58d3004 	str	r3, [sp, #4]
  121cec:	e58d2000 	str	r2, [sp]
  121cf0:	e59f3808 	ldr	r3, [pc, #2056]	; 122500 <tcp_process+0xd78>
  121cf4:	e59f2808 	ldr	r2, [pc, #2056]	; 122504 <tcp_process+0xd7c>
  121cf8:	eb0012ee 	bl	1268b8 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
  121cfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d00:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  121d04:	e3530003 	cmp	r3, #3
  121d08:	8a0001eb 	bhi	1224bc <tcp_process+0xd34>
        pcb->rtime = 0;
  121d0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d10:	e3a02000 	mov	r2, #0
  121d14:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        tcp_rexmit_rto(pcb);
  121d18:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121d1c:	eb001362 	bl	126aac <tcp_rexmit_rto>
    break;
  121d20:	ea0001e5 	b	1224bc <tcp_process+0xd34>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
  121d24:	e30e3270 	movw	r3, #57968	; 0xe270
  121d28:	e3403014 	movt	r3, #20
  121d2c:	e5d33000 	ldrb	r3, [r3]
  121d30:	e2033010 	and	r3, r3, #16
  121d34:	e3530000 	cmp	r3, #0
  121d38:	0a000090 	beq	121f80 <tcp_process+0x7f8>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  121d3c:	e30e3268 	movw	r3, #57960	; 0xe268
  121d40:	e3403014 	movt	r3, #20
  121d44:	e5932000 	ldr	r2, [r3]
  121d48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d4c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  121d50:	e0423003 	sub	r3, r2, r3
  121d54:	e2433001 	sub	r3, r3, #1
  121d58:	e3530000 	cmp	r3, #0
  121d5c:	ba00006c 	blt	121f14 <tcp_process+0x78c>
  121d60:	e30e3268 	movw	r3, #57960	; 0xe268
  121d64:	e3403014 	movt	r3, #20
  121d68:	e5932000 	ldr	r2, [r3]
  121d6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d70:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  121d74:	e0423003 	sub	r3, r2, r3
  121d78:	e3530000 	cmp	r3, #0
  121d7c:	ca000064 	bgt	121f14 <tcp_process+0x78c>
        pcb->state = ESTABLISHED;
  121d80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d84:	e3a02004 	mov	r2, #4
  121d88:	e5832014 	str	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
  121d8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d90:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121d94:	e3530000 	cmp	r3, #0
  121d98:	0a00000b 	beq	121dcc <tcp_process+0x644>
  121d9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121da0:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121da4:	e593301c 	ldr	r3, [r3, #28]
  121da8:	e3530000 	cmp	r3, #0
  121dac:	1a000006 	bne	121dcc <tcp_process+0x644>
  121db0:	e3080444 	movw	r0, #33860	; 0x8444
  121db4:	e3400014 	movt	r0, #20
  121db8:	ebff84d5 	bl	103114 <rt_kprintf>
  121dbc:	e300133e 	movw	r1, #830	; 0x33e
  121dc0:	e308027c 	movw	r0, #33404	; 0x827c
  121dc4:	e3400014 	movt	r0, #20
  121dc8:	ebffa4b9 	bl	10b0b4 <sys_arch_assert>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
  121dcc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121dd0:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121dd4:	e3530000 	cmp	r3, #0
  121dd8:	1a000002 	bne	121de8 <tcp_process+0x660>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
  121ddc:	e3e03005 	mvn	r3, #5
  121de0:	e54b300a 	strb	r3, [fp, #-10]
  121de4:	ea000011 	b	121e30 <tcp_process+0x6a8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
  121de8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121dec:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121df0:	e593301c 	ldr	r3, [r3, #28]
  121df4:	e3530000 	cmp	r3, #0
  121df8:	0a00000a 	beq	121e28 <tcp_process+0x6a0>
  121dfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e00:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121e04:	e593301c 	ldr	r3, [r3, #28]
  121e08:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121e0c:	e5920010 	ldr	r0, [r2, #16]
  121e10:	e3a02000 	mov	r2, #0
  121e14:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121e18:	e12fff33 	blx	r3
  121e1c:	e1a03000 	mov	r3, r0
  121e20:	e54b300a 	strb	r3, [fp, #-10]
  121e24:	ea000001 	b	121e30 <tcp_process+0x6a8>
  121e28:	e3e0300f 	mvn	r3, #15
  121e2c:	e54b300a 	strb	r3, [fp, #-10]
        }
        if (err != ERR_OK) {
  121e30:	e15b30da 	ldrsb	r3, [fp, #-10]
  121e34:	e3530000 	cmp	r3, #0
  121e38:	0a000006 	beq	121e58 <tcp_process+0x6d0>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
  121e3c:	e15b30da 	ldrsb	r3, [fp, #-10]
  121e40:	e373000d 	cmn	r3, #13
  121e44:	0a000001 	beq	121e50 <tcp_process+0x6c8>
            tcp_abort(pcb);
  121e48:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121e4c:	ebffeee1 	bl	11d9d8 <tcp_abort>
          }
          return ERR_ABRT;
  121e50:	e3e0300c 	mvn	r3, #12
  121e54:	ea0001a6 	b	1224f4 <tcp_process+0xd6c>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
  121e58:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121e5c:	eb000217 	bl	1226c0 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
  121e60:	e30e326c 	movw	r3, #57964	; 0xe26c
  121e64:	e3403014 	movt	r3, #20
  121e68:	e1d330b0 	ldrh	r3, [r3]
  121e6c:	e3530000 	cmp	r3, #0
  121e70:	0a000007 	beq	121e94 <tcp_process+0x70c>
          recv_acked--;
  121e74:	e30e326c 	movw	r3, #57964	; 0xe26c
  121e78:	e3403014 	movt	r3, #20
  121e7c:	e1d330b0 	ldrh	r3, [r3]
  121e80:	e2433001 	sub	r3, r3, #1
  121e84:	e6ff2073 	uxth	r2, r3
  121e88:	e30e326c 	movw	r3, #57964	; 0xe26c
  121e8c:	e3403014 	movt	r3, #20
  121e90:	e1c320b0 	strh	r2, [r3]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  121e94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e98:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121e9c:	e1a03083 	lsl	r3, r3, #1
  121ea0:	e301211c 	movw	r2, #4380	; 0x111c
  121ea4:	e1530002 	cmp	r3, r2
  121ea8:	21a02003 	movcs	r2, r3
  121eac:	31a02002 	movcc	r2, r2
  121eb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121eb4:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121eb8:	e1a03103 	lsl	r3, r3, #2
  121ebc:	e1520003 	cmp	r2, r3
  121ec0:	31a03002 	movcc	r3, r2
  121ec4:	21a03003 	movcs	r3, r3
  121ec8:	e6ff2073 	uxth	r2, r3
  121ecc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ed0:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
  121ed4:	e30e3271 	movw	r3, #57969	; 0xe271
  121ed8:	e3403014 	movt	r3, #20
  121edc:	e5d33000 	ldrb	r3, [r3]
  121ee0:	e2033020 	and	r3, r3, #32
  121ee4:	e3530000 	cmp	r3, #0
  121ee8:	0a000035 	beq	121fc4 <tcp_process+0x83c>
          tcp_ack_now(pcb);
  121eec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ef0:	e5d3301e 	ldrb	r3, [r3, #30]
  121ef4:	e3833002 	orr	r3, r3, #2
  121ef8:	e6ef2073 	uxtb	r2, r3
  121efc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f00:	e5c3201e 	strb	r2, [r3, #30]
          pcb->state = CLOSE_WAIT;
  121f04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f08:	e3a02007 	mov	r2, #7
  121f0c:	e5832014 	str	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
  121f10:	ea00002b 	b	121fc4 <tcp_process+0x83c>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121f14:	e30e3268 	movw	r3, #57960	; 0xe268
  121f18:	e3403014 	movt	r3, #20
  121f1c:	e5930000 	ldr	r0, [r3]
  121f20:	e30e326e 	movw	r3, #57966	; 0xe26e
  121f24:	e3403014 	movt	r3, #20
  121f28:	e1d330b0 	ldrh	r3, [r3]
  121f2c:	e1a02003 	mov	r2, r3
  121f30:	e30e3264 	movw	r3, #57956	; 0xe264
  121f34:	e3403014 	movt	r3, #20
  121f38:	e5933000 	ldr	r3, [r3]
  121f3c:	e0821003 	add	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121f40:	e30e3254 	movw	r3, #57940	; 0xe254
  121f44:	e3403014 	movt	r3, #20
  121f48:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121f4c:	e1d330b2 	ldrh	r3, [r3, #2]
  121f50:	e6ff2073 	uxth	r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121f54:	e30e3254 	movw	r3, #57940	; 0xe254
  121f58:	e3403014 	movt	r3, #20
  121f5c:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121f60:	e1d330b0 	ldrh	r3, [r3]
  121f64:	e6ff3073 	uxth	r3, r3
  121f68:	e58d3004 	str	r3, [sp, #4]
  121f6c:	e58d2000 	str	r2, [sp]
  121f70:	e59f3588 	ldr	r3, [pc, #1416]	; 122500 <tcp_process+0xd78>
  121f74:	e59f2588 	ldr	r2, [pc, #1416]	; 122504 <tcp_process+0xd7c>
  121f78:	eb00124e 	bl	1268b8 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
  121f7c:	ea000150 	b	1224c4 <tcp_process+0xd3c>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  121f80:	e30e3270 	movw	r3, #57968	; 0xe270
  121f84:	e3403014 	movt	r3, #20
  121f88:	e5d33000 	ldrb	r3, [r3]
  121f8c:	e2033002 	and	r3, r3, #2
  121f90:	e3530000 	cmp	r3, #0
  121f94:	0a00014a 	beq	1224c4 <tcp_process+0xd3c>
  121f98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f9c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121fa0:	e2432001 	sub	r2, r3, #1
  121fa4:	e30e3264 	movw	r3, #57956	; 0xe264
  121fa8:	e3403014 	movt	r3, #20
  121fac:	e5933000 	ldr	r3, [r3]
  121fb0:	e1520003 	cmp	r2, r3
  121fb4:	1a000142 	bne	1224c4 <tcp_process+0xd3c>
      tcp_rexmit(pcb);
  121fb8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121fbc:	eb0012eb 	bl	126b70 <tcp_rexmit>
    break;
  121fc0:	ea00013f 	b	1224c4 <tcp_process+0xd3c>
  121fc4:	ea00013e 	b	1224c4 <tcp_process+0xd3c>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
  121fc8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121fcc:	eb0001bb 	bl	1226c0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  121fd0:	e30e3271 	movw	r3, #57969	; 0xe271
  121fd4:	e3403014 	movt	r3, #20
  121fd8:	e5d33000 	ldrb	r3, [r3]
  121fdc:	e2033020 	and	r3, r3, #32
  121fe0:	e3530000 	cmp	r3, #0
  121fe4:	0a000138 	beq	1224cc <tcp_process+0xd44>
      tcp_ack_now(pcb);
  121fe8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121fec:	e5d3301e 	ldrb	r3, [r3, #30]
  121ff0:	e3833002 	orr	r3, r3, #2
  121ff4:	e6ef2073 	uxtb	r2, r3
  121ff8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ffc:	e5c3201e 	strb	r2, [r3, #30]
      pcb->state = CLOSE_WAIT;
  122000:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122004:	e3a02007 	mov	r2, #7
  122008:	e5832014 	str	r2, [r3, #20]
    }
    break;
  12200c:	ea00012e 	b	1224cc <tcp_process+0xd44>
  case FIN_WAIT_1:
    tcp_receive(pcb);
  122010:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122014:	eb0001a9 	bl	1226c0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  122018:	e30e3271 	movw	r3, #57969	; 0xe271
  12201c:	e3403014 	movt	r3, #20
  122020:	e5d33000 	ldrb	r3, [r3]
  122024:	e2033020 	and	r3, r3, #32
  122028:	e3530000 	cmp	r3, #0
  12202c:	0a00005a 	beq	12219c <tcp_process+0xa14>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  122030:	e30e3270 	movw	r3, #57968	; 0xe270
  122034:	e3403014 	movt	r3, #20
  122038:	e5d33000 	ldrb	r3, [r3]
  12203c:	e2033010 	and	r3, r3, #16
  122040:	e3530000 	cmp	r3, #0
  122044:	0a00004a 	beq	122174 <tcp_process+0x9ec>
  122048:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12204c:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  122050:	e30e3268 	movw	r3, #57960	; 0xe268
  122054:	e3403014 	movt	r3, #20
  122058:	e5933000 	ldr	r3, [r3]
  12205c:	e1520003 	cmp	r2, r3
  122060:	1a000043 	bne	122174 <tcp_process+0x9ec>
          pcb->unsent == NULL) {
  122064:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122068:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  12206c:	e3530000 	cmp	r3, #0
  122070:	1a00003f 	bne	122174 <tcp_process+0x9ec>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
  122074:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122078:	e5d3301e 	ldrb	r3, [r3, #30]
  12207c:	e3833002 	orr	r3, r3, #2
  122080:	e6ef2073 	uxtb	r2, r3
  122084:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122088:	e5c3201e 	strb	r2, [r3, #30]
        tcp_pcb_purge(pcb);
  12208c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122090:	ebfff730 	bl	11fd58 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
  122094:	e30c3c38 	movw	r3, #52280	; 0xcc38
  122098:	e3403015 	movt	r3, #21
  12209c:	e5933000 	ldr	r3, [r3]
  1220a0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1220a4:	e1520003 	cmp	r2, r3
  1220a8:	1a000007 	bne	1220cc <tcp_process+0x944>
  1220ac:	e30c3c38 	movw	r3, #52280	; 0xcc38
  1220b0:	e3403015 	movt	r3, #21
  1220b4:	e5933000 	ldr	r3, [r3]
  1220b8:	e593200c 	ldr	r2, [r3, #12]
  1220bc:	e30c3c38 	movw	r3, #52280	; 0xcc38
  1220c0:	e3403015 	movt	r3, #21
  1220c4:	e5832000 	str	r2, [r3]
  1220c8:	ea000014 	b	122120 <tcp_process+0x998>
  1220cc:	e30c3c38 	movw	r3, #52280	; 0xcc38
  1220d0:	e3403015 	movt	r3, #21
  1220d4:	e5933000 	ldr	r3, [r3]
  1220d8:	e50b3010 	str	r3, [fp, #-16]
  1220dc:	ea00000c 	b	122114 <tcp_process+0x98c>
  1220e0:	e51b3010 	ldr	r3, [fp, #-16]
  1220e4:	e593300c 	ldr	r3, [r3, #12]
  1220e8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1220ec:	e1520003 	cmp	r2, r3
  1220f0:	1a000004 	bne	122108 <tcp_process+0x980>
  1220f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220f8:	e593200c 	ldr	r2, [r3, #12]
  1220fc:	e51b3010 	ldr	r3, [fp, #-16]
  122100:	e583200c 	str	r2, [r3, #12]
  122104:	ea000005 	b	122120 <tcp_process+0x998>
  122108:	e51b3010 	ldr	r3, [fp, #-16]
  12210c:	e593300c 	ldr	r3, [r3, #12]
  122110:	e50b3010 	str	r3, [fp, #-16]
  122114:	e51b3010 	ldr	r3, [fp, #-16]
  122118:	e3530000 	cmp	r3, #0
  12211c:	1affffef 	bne	1220e0 <tcp_process+0x958>
  122120:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122124:	e3a02000 	mov	r2, #0
  122128:	e583200c 	str	r2, [r3, #12]
  12212c:	e30c3c34 	movw	r3, #52276	; 0xcc34
  122130:	e3403015 	movt	r3, #21
  122134:	e3a02001 	mov	r2, #1
  122138:	e5c32000 	strb	r2, [r3]
        pcb->state = TIME_WAIT;
  12213c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122140:	e3a0200a 	mov	r2, #10
  122144:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  122148:	e30c3c48 	movw	r3, #52296	; 0xcc48
  12214c:	e3403015 	movt	r3, #21
  122150:	e5932000 	ldr	r2, [r3]
  122154:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122158:	e583200c 	str	r2, [r3, #12]
  12215c:	e30c3c48 	movw	r3, #52296	; 0xcc48
  122160:	e3403015 	movt	r3, #21
  122164:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122168:	e5832000 	str	r2, [r3]
  12216c:	eb001425 	bl	127208 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
  122170:	ea0000d7 	b	1224d4 <tcp_process+0xd4c>
        tcp_ack_now(pcb);
  122174:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122178:	e5d3301e 	ldrb	r3, [r3, #30]
  12217c:	e3833002 	orr	r3, r3, #2
  122180:	e6ef2073 	uxtb	r2, r3
  122184:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122188:	e5c3201e 	strb	r2, [r3, #30]
        pcb->state = CLOSING;
  12218c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122190:	e3a02008 	mov	r2, #8
  122194:	e5832014 	str	r2, [r3, #20]
    break;
  122198:	ea0000cd 	b	1224d4 <tcp_process+0xd4c>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  12219c:	e30e3270 	movw	r3, #57968	; 0xe270
  1221a0:	e3403014 	movt	r3, #20
  1221a4:	e5d33000 	ldrb	r3, [r3]
  1221a8:	e2033010 	and	r3, r3, #16
  1221ac:	e3530000 	cmp	r3, #0
  1221b0:	0a0000c7 	beq	1224d4 <tcp_process+0xd4c>
  1221b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221b8:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1221bc:	e30e3268 	movw	r3, #57960	; 0xe268
  1221c0:	e3403014 	movt	r3, #20
  1221c4:	e5933000 	ldr	r3, [r3]
  1221c8:	e1520003 	cmp	r2, r3
  1221cc:	1a0000c0 	bne	1224d4 <tcp_process+0xd4c>
               pcb->unsent == NULL) {
  1221d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221d4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  1221d8:	e3530000 	cmp	r3, #0
  1221dc:	1a0000bc 	bne	1224d4 <tcp_process+0xd4c>
      pcb->state = FIN_WAIT_2;
  1221e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221e4:	e3a02006 	mov	r2, #6
  1221e8:	e5832014 	str	r2, [r3, #20]
    break;
  1221ec:	ea0000b8 	b	1224d4 <tcp_process+0xd4c>
  case FIN_WAIT_2:
    tcp_receive(pcb);
  1221f0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1221f4:	eb000131 	bl	1226c0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  1221f8:	e30e3271 	movw	r3, #57969	; 0xe271
  1221fc:	e3403014 	movt	r3, #20
  122200:	e5d33000 	ldrb	r3, [r3]
  122204:	e2033020 	and	r3, r3, #32
  122208:	e3530000 	cmp	r3, #0
  12220c:	0a0000b2 	beq	1224dc <tcp_process+0xd54>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
  122210:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122214:	e5d3301e 	ldrb	r3, [r3, #30]
  122218:	e3833002 	orr	r3, r3, #2
  12221c:	e6ef2073 	uxtb	r2, r3
  122220:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122224:	e5c3201e 	strb	r2, [r3, #30]
      tcp_pcb_purge(pcb);
  122228:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  12222c:	ebfff6c9 	bl	11fd58 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  122230:	e30c3c38 	movw	r3, #52280	; 0xcc38
  122234:	e3403015 	movt	r3, #21
  122238:	e5933000 	ldr	r3, [r3]
  12223c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122240:	e1520003 	cmp	r2, r3
  122244:	1a000007 	bne	122268 <tcp_process+0xae0>
  122248:	e30c3c38 	movw	r3, #52280	; 0xcc38
  12224c:	e3403015 	movt	r3, #21
  122250:	e5933000 	ldr	r3, [r3]
  122254:	e593200c 	ldr	r2, [r3, #12]
  122258:	e30c3c38 	movw	r3, #52280	; 0xcc38
  12225c:	e3403015 	movt	r3, #21
  122260:	e5832000 	str	r2, [r3]
  122264:	ea000014 	b	1222bc <tcp_process+0xb34>
  122268:	e30c3c38 	movw	r3, #52280	; 0xcc38
  12226c:	e3403015 	movt	r3, #21
  122270:	e5933000 	ldr	r3, [r3]
  122274:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  122278:	ea00000c 	b	1222b0 <tcp_process+0xb28>
  12227c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  122280:	e593300c 	ldr	r3, [r3, #12]
  122284:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122288:	e1520003 	cmp	r2, r3
  12228c:	1a000004 	bne	1222a4 <tcp_process+0xb1c>
  122290:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122294:	e593200c 	ldr	r2, [r3, #12]
  122298:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12229c:	e583200c 	str	r2, [r3, #12]
  1222a0:	ea000005 	b	1222bc <tcp_process+0xb34>
  1222a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1222a8:	e593300c 	ldr	r3, [r3, #12]
  1222ac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1222b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1222b4:	e3530000 	cmp	r3, #0
  1222b8:	1affffef 	bne	12227c <tcp_process+0xaf4>
  1222bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1222c0:	e3a02000 	mov	r2, #0
  1222c4:	e583200c 	str	r2, [r3, #12]
  1222c8:	e30c3c34 	movw	r3, #52276	; 0xcc34
  1222cc:	e3403015 	movt	r3, #21
  1222d0:	e3a02001 	mov	r2, #1
  1222d4:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  1222d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1222dc:	e3a0200a 	mov	r2, #10
  1222e0:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  1222e4:	e30c3c48 	movw	r3, #52296	; 0xcc48
  1222e8:	e3403015 	movt	r3, #21
  1222ec:	e5932000 	ldr	r2, [r3]
  1222f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1222f4:	e583200c 	str	r2, [r3, #12]
  1222f8:	e30c3c48 	movw	r3, #52296	; 0xcc48
  1222fc:	e3403015 	movt	r3, #21
  122300:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122304:	e5832000 	str	r2, [r3]
  122308:	eb0013be 	bl	127208 <tcp_timer_needed>
    }
    break;
  12230c:	ea000072 	b	1224dc <tcp_process+0xd54>
  case CLOSING:
    tcp_receive(pcb);
  122310:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122314:	eb0000e9 	bl	1226c0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  122318:	e30e3270 	movw	r3, #57968	; 0xe270
  12231c:	e3403014 	movt	r3, #20
  122320:	e5d33000 	ldrb	r3, [r3]
  122324:	e2033010 	and	r3, r3, #16
  122328:	e3530000 	cmp	r3, #0
  12232c:	0a00006c 	beq	1224e4 <tcp_process+0xd5c>
  122330:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122334:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  122338:	e30e3268 	movw	r3, #57960	; 0xe268
  12233c:	e3403014 	movt	r3, #20
  122340:	e5933000 	ldr	r3, [r3]
  122344:	e1520003 	cmp	r2, r3
  122348:	1a000065 	bne	1224e4 <tcp_process+0xd5c>
  12234c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122350:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122354:	e3530000 	cmp	r3, #0
  122358:	1a000061 	bne	1224e4 <tcp_process+0xd5c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
  12235c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122360:	ebfff67c 	bl	11fd58 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  122364:	e30c3c38 	movw	r3, #52280	; 0xcc38
  122368:	e3403015 	movt	r3, #21
  12236c:	e5933000 	ldr	r3, [r3]
  122370:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122374:	e1520003 	cmp	r2, r3
  122378:	1a000007 	bne	12239c <tcp_process+0xc14>
  12237c:	e30c3c38 	movw	r3, #52280	; 0xcc38
  122380:	e3403015 	movt	r3, #21
  122384:	e5933000 	ldr	r3, [r3]
  122388:	e593200c 	ldr	r2, [r3, #12]
  12238c:	e30c3c38 	movw	r3, #52280	; 0xcc38
  122390:	e3403015 	movt	r3, #21
  122394:	e5832000 	str	r2, [r3]
  122398:	ea000014 	b	1223f0 <tcp_process+0xc68>
  12239c:	e30c3c38 	movw	r3, #52280	; 0xcc38
  1223a0:	e3403015 	movt	r3, #21
  1223a4:	e5933000 	ldr	r3, [r3]
  1223a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1223ac:	ea00000c 	b	1223e4 <tcp_process+0xc5c>
  1223b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1223b4:	e593300c 	ldr	r3, [r3, #12]
  1223b8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1223bc:	e1520003 	cmp	r2, r3
  1223c0:	1a000004 	bne	1223d8 <tcp_process+0xc50>
  1223c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1223c8:	e593200c 	ldr	r2, [r3, #12]
  1223cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1223d0:	e583200c 	str	r2, [r3, #12]
  1223d4:	ea000005 	b	1223f0 <tcp_process+0xc68>
  1223d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1223dc:	e593300c 	ldr	r3, [r3, #12]
  1223e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1223e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1223e8:	e3530000 	cmp	r3, #0
  1223ec:	1affffef 	bne	1223b0 <tcp_process+0xc28>
  1223f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1223f4:	e3a02000 	mov	r2, #0
  1223f8:	e583200c 	str	r2, [r3, #12]
  1223fc:	e30c3c34 	movw	r3, #52276	; 0xcc34
  122400:	e3403015 	movt	r3, #21
  122404:	e3a02001 	mov	r2, #1
  122408:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  12240c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122410:	e3a0200a 	mov	r2, #10
  122414:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  122418:	e30c3c48 	movw	r3, #52296	; 0xcc48
  12241c:	e3403015 	movt	r3, #21
  122420:	e5932000 	ldr	r2, [r3]
  122424:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122428:	e583200c 	str	r2, [r3, #12]
  12242c:	e30c3c48 	movw	r3, #52296	; 0xcc48
  122430:	e3403015 	movt	r3, #21
  122434:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122438:	e5832000 	str	r2, [r3]
  12243c:	eb001371 	bl	127208 <tcp_timer_needed>
    }
    break;
  122440:	ea000027 	b	1224e4 <tcp_process+0xd5c>
  case LAST_ACK:
    tcp_receive(pcb);
  122444:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122448:	eb00009c 	bl	1226c0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  12244c:	e30e3270 	movw	r3, #57968	; 0xe270
  122450:	e3403014 	movt	r3, #20
  122454:	e5d33000 	ldrb	r3, [r3]
  122458:	e2033010 	and	r3, r3, #16
  12245c:	e3530000 	cmp	r3, #0
  122460:	0a000021 	beq	1224ec <tcp_process+0xd64>
  122464:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122468:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  12246c:	e30e3268 	movw	r3, #57960	; 0xe268
  122470:	e3403014 	movt	r3, #20
  122474:	e5933000 	ldr	r3, [r3]
  122478:	e1520003 	cmp	r2, r3
  12247c:	1a00001a 	bne	1224ec <tcp_process+0xd64>
  122480:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122484:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122488:	e3530000 	cmp	r3, #0
  12248c:	1a000016 	bne	1224ec <tcp_process+0xd64>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
  122490:	e30e3271 	movw	r3, #57969	; 0xe271
  122494:	e3403014 	movt	r3, #20
  122498:	e5d33000 	ldrb	r3, [r3]
  12249c:	e3833010 	orr	r3, r3, #16
  1224a0:	e6ef2073 	uxtb	r2, r3
  1224a4:	e30e3271 	movw	r3, #57969	; 0xe271
  1224a8:	e3403014 	movt	r3, #20
  1224ac:	e5c32000 	strb	r2, [r3]
    }
    break;
  1224b0:	ea00000d 	b	1224ec <tcp_process+0xd64>
  default:
    break;
  1224b4:	e320f000 	nop	{0}
  1224b8:	ea00000c 	b	1224f0 <tcp_process+0xd68>
    break;
  1224bc:	e320f000 	nop	{0}
  1224c0:	ea00000a 	b	1224f0 <tcp_process+0xd68>
    break;
  1224c4:	e320f000 	nop	{0}
  1224c8:	ea000008 	b	1224f0 <tcp_process+0xd68>
    break;
  1224cc:	e320f000 	nop	{0}
  1224d0:	ea000006 	b	1224f0 <tcp_process+0xd68>
    break;
  1224d4:	e320f000 	nop	{0}
  1224d8:	ea000004 	b	1224f0 <tcp_process+0xd68>
    break;
  1224dc:	e320f000 	nop	{0}
  1224e0:	ea000002 	b	1224f0 <tcp_process+0xd68>
    break;
  1224e4:	e320f000 	nop	{0}
  1224e8:	ea000000 	b	1224f0 <tcp_process+0xd68>
    break;
  1224ec:	e320f000 	nop	{0}
  }
  return ERR_OK;
  1224f0:	e3a03000 	mov	r3, #0
}
  1224f4:	e1a00003 	mov	r0, r3
  1224f8:	e24bd004 	sub	sp, fp, #4
  1224fc:	e8bd8800 	pop	{fp, pc}
  122500:	0014f620 	.word	0x0014f620
  122504:	0014f624 	.word	0x0014f624

00122508 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  122508:	e92d4810 	push	{r4, fp, lr}
  12250c:	e28db008 	add	fp, sp, #8
  122510:	e24dd014 	sub	sp, sp, #20
  122514:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  122518:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  12251c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122520:	e593300c 	ldr	r3, [r3, #12]
  122524:	e1d330bc 	ldrh	r3, [r3, #12]
  122528:	e6ff3073 	uxth	r3, r3
  12252c:	e1a00003 	mov	r0, r3
  122530:	ebffd018 	bl	116598 <lwip_htons>
  122534:	e1a03000 	mov	r3, r0
  122538:	e2033001 	and	r3, r3, #1
  12253c:	e3530000 	cmp	r3, #0
  122540:	0a000022 	beq	1225d0 <tcp_oos_insert_segment+0xc8>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
  122544:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  122548:	ebfff3ab 	bl	11f3fc <tcp_segs_free>
    next = NULL;
  12254c:	e3a03000 	mov	r3, #0
  122550:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  122554:	ea000053 	b	1226a8 <tcp_oos_insert_segment+0x1a0>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  122558:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12255c:	e593300c 	ldr	r3, [r3, #12]
  122560:	e1d330bc 	ldrh	r3, [r3, #12]
  122564:	e6ff3073 	uxth	r3, r3
  122568:	e1a00003 	mov	r0, r3
  12256c:	ebffd009 	bl	116598 <lwip_htons>
  122570:	e1a03000 	mov	r3, r0
  122574:	e2033001 	and	r3, r3, #1
  122578:	e3530000 	cmp	r3, #0
  12257c:	0a00000c 	beq	1225b4 <tcp_oos_insert_segment+0xac>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  122580:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122584:	e593300c 	ldr	r3, [r3, #12]
  122588:	e1d330bc 	ldrh	r3, [r3, #12]
  12258c:	e6ff4073 	uxth	r4, r3
  122590:	e3a00001 	mov	r0, #1
  122594:	ebffcfff 	bl	116598 <lwip_htons>
  122598:	e1a03000 	mov	r3, r0
  12259c:	e1a02003 	mov	r2, r3
  1225a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1225a4:	e593300c 	ldr	r3, [r3, #12]
  1225a8:	e1842002 	orr	r2, r4, r2
  1225ac:	e6ff2072 	uxth	r2, r2
  1225b0:	e1c320bc 	strh	r2, [r3, #12]
      }
      old_seg = next;
  1225b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1225b8:	e50b3010 	str	r3, [fp, #-16]
      next = next->next;
  1225bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1225c0:	e5933000 	ldr	r3, [r3]
  1225c4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      tcp_seg_free(old_seg);
  1225c8:	e51b0010 	ldr	r0, [fp, #-16]
  1225cc:	ebfff39c 	bl	11f444 <tcp_seg_free>
    while (next &&
  1225d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1225d4:	e3530000 	cmp	r3, #0
  1225d8:	0a00000f 	beq	12261c <tcp_oos_insert_segment+0x114>
           TCP_SEQ_GEQ((seqno + cseg->len),
  1225dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1225e0:	e1d330b8 	ldrh	r3, [r3, #8]
  1225e4:	e1a02003 	mov	r2, r3
  1225e8:	e30e3264 	movw	r3, #57956	; 0xe264
  1225ec:	e3403014 	movt	r3, #20
  1225f0:	e5933000 	ldr	r3, [r3]
  1225f4:	e0822003 	add	r2, r2, r3
  1225f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1225fc:	e593300c 	ldr	r3, [r3, #12]
  122600:	e5933004 	ldr	r3, [r3, #4]
  122604:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  122608:	e1d110b8 	ldrh	r1, [r1, #8]
  12260c:	e0833001 	add	r3, r3, r1
  122610:	e0423003 	sub	r3, r2, r3
    while (next &&
  122614:	e3530000 	cmp	r3, #0
  122618:	aaffffce 	bge	122558 <tcp_oos_insert_segment+0x50>
    }
    if (next &&
  12261c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122620:	e3530000 	cmp	r3, #0
  122624:	0a00001f 	beq	1226a8 <tcp_oos_insert_segment+0x1a0>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  122628:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12262c:	e1d330b8 	ldrh	r3, [r3, #8]
  122630:	e1a02003 	mov	r2, r3
  122634:	e30e3264 	movw	r3, #57956	; 0xe264
  122638:	e3403014 	movt	r3, #20
  12263c:	e5933000 	ldr	r3, [r3]
  122640:	e0822003 	add	r2, r2, r3
  122644:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122648:	e593300c 	ldr	r3, [r3, #12]
  12264c:	e5933004 	ldr	r3, [r3, #4]
  122650:	e0423003 	sub	r3, r2, r3
    if (next &&
  122654:	e3530000 	cmp	r3, #0
  122658:	da000012 	ble	1226a8 <tcp_oos_insert_segment+0x1a0>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  12265c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122660:	e593300c 	ldr	r3, [r3, #12]
  122664:	e5933004 	ldr	r3, [r3, #4]
  122668:	e6ff2073 	uxth	r2, r3
  12266c:	e30e3264 	movw	r3, #57956	; 0xe264
  122670:	e3403014 	movt	r3, #20
  122674:	e5933000 	ldr	r3, [r3]
  122678:	e6ff3073 	uxth	r3, r3
  12267c:	e0423003 	sub	r3, r2, r3
  122680:	e6ff2073 	uxth	r2, r3
  122684:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122688:	e1c320b8 	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
  12268c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122690:	e5932004 	ldr	r2, [r3, #4]
  122694:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122698:	e1d330b8 	ldrh	r3, [r3, #8]
  12269c:	e1a01003 	mov	r1, r3
  1226a0:	e1a00002 	mov	r0, r2
  1226a4:	ebffe0a9 	bl	11a950 <pbuf_realloc>
    }
  }
  cseg->next = next;
  1226a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1226ac:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1226b0:	e5832000 	str	r2, [r3]
}
  1226b4:	e320f000 	nop	{0}
  1226b8:	e24bd008 	sub	sp, fp, #8
  1226bc:	e8bd8810 	pop	{r4, fp, pc}

001226c0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
  1226c0:	e92d4870 	push	{r4, r5, r6, fp, lr}
  1226c4:	e28db010 	add	fp, sp, #16
  1226c8:	e24dd034 	sub	sp, sp, #52	; 0x34
  1226cc:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
  1226d0:	e3a03000 	mov	r3, #0
  1226d4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
  1226d8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226dc:	e5933014 	ldr	r3, [r3, #20]
  1226e0:	e3530003 	cmp	r3, #3
  1226e4:	8a000006 	bhi	122704 <tcp_receive+0x44>
  1226e8:	e3080464 	movw	r0, #33892	; 0x8464
  1226ec:	e3400014 	movt	r0, #20
  1226f0:	ebff8287 	bl	103114 <rt_kprintf>
  1226f4:	e30013f5 	movw	r1, #1013	; 0x3f5
  1226f8:	e308027c 	movw	r0, #33404	; 0x827c
  1226fc:	e3400014 	movt	r0, #20
  122700:	ebffa26b 	bl	10b0b4 <sys_arch_assert>

  if (flags & TCP_ACK) {
  122704:	e30e3270 	movw	r3, #57968	; 0xe270
  122708:	e3403014 	movt	r3, #20
  12270c:	e5d33000 	ldrb	r3, [r3]
  122710:	e2033010 	and	r3, r3, #16
  122714:	e3530000 	cmp	r3, #0
  122718:	0a000268 	beq	1230c0 <tcp_receive+0xa00>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  12271c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122720:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122724:	e1a02003 	mov	r2, r3
  122728:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12272c:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  122730:	e0823003 	add	r3, r2, r3
  122734:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  122738:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12273c:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  122740:	e30e3264 	movw	r3, #57956	; 0xe264
  122744:	e3403014 	movt	r3, #20
  122748:	e5933000 	ldr	r3, [r3]
  12274c:	e0423003 	sub	r3, r2, r3
  122750:	e3530000 	cmp	r3, #0
  122754:	ba00001e 	blt	1227d4 <tcp_receive+0x114>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  122758:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12275c:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  122760:	e30e3264 	movw	r3, #57956	; 0xe264
  122764:	e3403014 	movt	r3, #20
  122768:	e5933000 	ldr	r3, [r3]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  12276c:	e1520003 	cmp	r2, r3
  122770:	1a000007 	bne	122794 <tcp_receive+0xd4>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  122774:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122778:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  12277c:	e30e3268 	movw	r3, #57960	; 0xe268
  122780:	e3403014 	movt	r3, #20
  122784:	e5933000 	ldr	r3, [r3]
  122788:	e0423003 	sub	r3, r2, r3
  12278c:	e3530000 	cmp	r3, #0
  122790:	ba00000f 	blt	1227d4 <tcp_receive+0x114>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  122794:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122798:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  12279c:	e30e3268 	movw	r3, #57960	; 0xe268
  1227a0:	e3403014 	movt	r3, #20
  1227a4:	e5933000 	ldr	r3, [r3]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  1227a8:	e1520003 	cmp	r2, r3
  1227ac:	1a000039 	bne	122898 <tcp_receive+0x1d8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  1227b0:	e30e3254 	movw	r3, #57940	; 0xe254
  1227b4:	e3403014 	movt	r3, #20
  1227b8:	e5933000 	ldr	r3, [r3]
  1227bc:	e1d330be 	ldrh	r3, [r3, #14]
  1227c0:	e6ff2073 	uxth	r2, r3
  1227c4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227c8:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  1227cc:	e1520003 	cmp	r2, r3
  1227d0:	9a000030 	bls	122898 <tcp_receive+0x1d8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
  1227d4:	e30e3254 	movw	r3, #57940	; 0xe254
  1227d8:	e3403014 	movt	r3, #20
  1227dc:	e5933000 	ldr	r3, [r3]
  1227e0:	e1d330be 	ldrh	r3, [r3, #14]
  1227e4:	e6ff2073 	uxth	r2, r3
  1227e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227ec:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
  1227f0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227f4:	e1d326b2 	ldrh	r2, [r3, #98]	; 0x62
  1227f8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227fc:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122800:	e1520003 	cmp	r2, r3
  122804:	2a000003 	bcs	122818 <tcp_receive+0x158>
        pcb->snd_wnd_max = pcb->snd_wnd;
  122808:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12280c:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  122810:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122814:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
  122818:	e30e3264 	movw	r3, #57956	; 0xe264
  12281c:	e3403014 	movt	r3, #20
  122820:	e5932000 	ldr	r2, [r3]
  122824:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122828:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
  12282c:	e30e3268 	movw	r3, #57960	; 0xe268
  122830:	e3403014 	movt	r3, #20
  122834:	e5932000 	ldr	r2, [r3]
  122838:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12283c:	e5832058 	str	r2, [r3, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
  122840:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122844:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122848:	e3530000 	cmp	r3, #0
  12284c:	1a00000a 	bne	12287c <tcp_receive+0x1bc>
        if (pcb->persist_backoff == 0) {
  122850:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122854:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  122858:	e3530000 	cmp	r3, #0
  12285c:	1a00000d 	bne	122898 <tcp_receive+0x1d8>
          /* start persist timer */
          pcb->persist_cnt = 0;
  122860:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122864:	e3a02000 	mov	r2, #0
  122868:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
          pcb->persist_backoff = 1;
  12286c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122870:	e3a02001 	mov	r2, #1
  122874:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  122878:	ea000006 	b	122898 <tcp_receive+0x1d8>
        }
      } else if (pcb->persist_backoff > 0) {
  12287c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122880:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  122884:	e3530000 	cmp	r3, #0
  122888:	0a000002 	beq	122898 <tcp_receive+0x1d8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
  12288c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122890:	e3a02000 	mov	r2, #0
  122894:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  122898:	e30e3268 	movw	r3, #57960	; 0xe268
  12289c:	e3403014 	movt	r3, #20
  1228a0:	e5932000 	ldr	r2, [r3]
  1228a4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228a8:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  1228ac:	e0423003 	sub	r3, r2, r3
  1228b0:	e3530000 	cmp	r3, #0
  1228b4:	ca000047 	bgt	1229d8 <tcp_receive+0x318>
      /* Clause 2 */
      if (tcplen == 0) {
  1228b8:	e30e326e 	movw	r3, #57966	; 0xe26e
  1228bc:	e3403014 	movt	r3, #20
  1228c0:	e1d330b0 	ldrh	r3, [r3]
  1228c4:	e3530000 	cmp	r3, #0
  1228c8:	1a00003b 	bne	1229bc <tcp_receive+0x2fc>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
  1228cc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228d0:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  1228d4:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  1228d8:	e1d226b0 	ldrh	r2, [r2, #96]	; 0x60
  1228dc:	e0833002 	add	r3, r3, r2
  1228e0:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  1228e4:	e1520003 	cmp	r2, r3
  1228e8:	1a000033 	bne	1229bc <tcp_receive+0x2fc>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
  1228ec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228f0:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  1228f4:	e3530000 	cmp	r3, #0
  1228f8:	ba00002f 	blt	1229bc <tcp_receive+0x2fc>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
  1228fc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122900:	e5932048 	ldr	r2, [r3, #72]	; 0x48
  122904:	e30e3268 	movw	r3, #57960	; 0xe268
  122908:	e3403014 	movt	r3, #20
  12290c:	e5933000 	ldr	r3, [r3]
  122910:	e1520003 	cmp	r2, r3
  122914:	1a000028 	bne	1229bc <tcp_receive+0x2fc>
              found_dupack = 1;
  122918:	e3a03001 	mov	r3, #1
  12291c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  122920:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122924:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122928:	e35300ff 	cmp	r3, #255	; 0xff
  12292c:	0a000005 	beq	122948 <tcp_receive+0x288>
                ++pcb->dupacks;
  122930:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122934:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122938:	e2833001 	add	r3, r3, #1
  12293c:	e6ef2073 	uxtb	r2, r3
  122940:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122944:	e5c32047 	strb	r2, [r3, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
  122948:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12294c:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122950:	e3530003 	cmp	r3, #3
  122954:	9a000012 	bls	1229a4 <tcp_receive+0x2e4>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  122958:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12295c:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122960:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122964:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122968:	e0823003 	add	r3, r2, r3
  12296c:	e6ff2073 	uxth	r2, r3
  122970:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122974:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122978:	e1520003 	cmp	r2, r3
  12297c:	9a00000e 	bls	1229bc <tcp_receive+0x2fc>
                  pcb->cwnd += pcb->mss;
  122980:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122984:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122988:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12298c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122990:	e0823003 	add	r3, r2, r3
  122994:	e6ff2073 	uxth	r2, r3
  122998:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12299c:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  1229a0:	ea000005 	b	1229bc <tcp_receive+0x2fc>
                }
              } else if (pcb->dupacks == 3) {
  1229a4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229a8:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  1229ac:	e3530003 	cmp	r3, #3
  1229b0:	1a000001 	bne	1229bc <tcp_receive+0x2fc>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
  1229b4:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  1229b8:	eb0010bc 	bl	126cb0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
  1229bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1229c0:	e3530000 	cmp	r3, #0
  1229c4:	1a000136 	bne	122ea4 <tcp_receive+0x7e4>
        pcb->dupacks = 0;
  1229c8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229cc:	e3a02000 	mov	r2, #0
  1229d0:	e5c32047 	strb	r2, [r3, #71]	; 0x47
  1229d4:	ea000132 	b	122ea4 <tcp_receive+0x7e4>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  1229d8:	e30e3268 	movw	r3, #57960	; 0xe268
  1229dc:	e3403014 	movt	r3, #20
  1229e0:	e5932000 	ldr	r2, [r3]
  1229e4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229e8:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  1229ec:	e0423003 	sub	r3, r2, r3
  1229f0:	e2433001 	sub	r3, r3, #1
  1229f4:	e3530000 	cmp	r3, #0
  1229f8:	ba0000dc 	blt	122d70 <tcp_receive+0x6b0>
  1229fc:	e30e3268 	movw	r3, #57960	; 0xe268
  122a00:	e3403014 	movt	r3, #20
  122a04:	e5932000 	ldr	r2, [r3]
  122a08:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a0c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  122a10:	e0423003 	sub	r3, r2, r3
  122a14:	e3530000 	cmp	r3, #0
  122a18:	ca0000d4 	bgt	122d70 <tcp_receive+0x6b0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
  122a1c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a20:	e5d3301e 	ldrb	r3, [r3, #30]
  122a24:	e2033004 	and	r3, r3, #4
  122a28:	e3530000 	cmp	r3, #0
  122a2c:	0a000009 	beq	122a58 <tcp_receive+0x398>
        pcb->flags &= ~TF_INFR;
  122a30:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a34:	e5d3301e 	ldrb	r3, [r3, #30]
  122a38:	e3c33004 	bic	r3, r3, #4
  122a3c:	e6ef2073 	uxtb	r2, r3
  122a40:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a44:	e5c3201e 	strb	r2, [r3, #30]
        pcb->cwnd = pcb->ssthresh;
  122a48:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a4c:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  122a50:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a54:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
  122a58:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a5c:	e3a02000 	mov	r2, #0
  122a60:	e5c32046 	strb	r2, [r3, #70]	; 0x46

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  122a64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a68:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122a6c:	e1a031c3 	asr	r3, r3, #3
  122a70:	e6bf3073 	sxth	r3, r3
  122a74:	e6ff2073 	uxth	r2, r3
  122a78:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a7c:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122a80:	e6ff3073 	uxth	r3, r3
  122a84:	e0823003 	add	r3, r2, r3
  122a88:	e6ff3073 	uxth	r3, r3
  122a8c:	e6bf2073 	sxth	r2, r3
  122a90:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a94:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
  122a98:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a9c:	e3a02000 	mov	r2, #0
  122aa0:	e5c32047 	strb	r2, [r3, #71]	; 0x47
      pcb->lastack = ackno;
  122aa4:	e30e3268 	movw	r3, #57960	; 0xe268
  122aa8:	e3403014 	movt	r3, #20
  122aac:	e5932000 	ldr	r2, [r3]
  122ab0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ab4:	e5832048 	str	r2, [r3, #72]	; 0x48

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
  122ab8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122abc:	e5933014 	ldr	r3, [r3, #20]
  122ac0:	e3530003 	cmp	r3, #3
  122ac4:	9a000075 	bls	122ca0 <tcp_receive+0x5e0>
        if (pcb->cwnd < pcb->ssthresh) {
  122ac8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122acc:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122ad0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ad4:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  122ad8:	e1520003 	cmp	r2, r3
  122adc:	2a000012 	bcs	122b2c <tcp_receive+0x46c>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  122ae0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ae4:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122ae8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122aec:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122af0:	e0823003 	add	r3, r2, r3
  122af4:	e6ff2073 	uxth	r2, r3
  122af8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122afc:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122b00:	e1520003 	cmp	r2, r3
  122b04:	9a000065 	bls	122ca0 <tcp_receive+0x5e0>
            pcb->cwnd += pcb->mss;
  122b08:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b0c:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122b10:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b14:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122b18:	e0823003 	add	r3, r2, r3
  122b1c:	e6ff2073 	uxth	r2, r3
  122b20:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b24:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  122b28:	ea00005c 	b	122ca0 <tcp_receive+0x5e0>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  122b2c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b30:	e1d344bc 	ldrh	r4, [r3, #76]	; 0x4c
  122b34:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b38:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122b3c:	e1a02003 	mov	r2, r3
  122b40:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b44:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122b48:	e0020293 	mul	r2, r3, r2
  122b4c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b50:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122b54:	e1a01003 	mov	r1, r3
  122b58:	e1a00002 	mov	r0, r2
  122b5c:	eb0057b9 	bl	138a48 <__divsi3>
  122b60:	e1a03000 	mov	r3, r0
  122b64:	e6ff3073 	uxth	r3, r3
  122b68:	e0843003 	add	r3, r4, r3
  122b6c:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
          if (new_cwnd > pcb->cwnd) {
  122b70:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b74:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122b78:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  122b7c:	e1520003 	cmp	r2, r3
  122b80:	9a000046 	bls	122ca0 <tcp_receive+0x5e0>
            pcb->cwnd = new_cwnd;
  122b84:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b88:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  122b8c:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
  122b90:	ea000042 	b	122ca0 <tcp_receive+0x5e0>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
  122b94:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b98:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122b9c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        pcb->unacked = pcb->unacked->next;
  122ba0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ba4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122ba8:	e5932000 	ldr	r2, [r3]
  122bac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bb0:	e5832070 	str	r2, [r3, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  122bb4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bb8:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  122bbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122bc0:	e5933004 	ldr	r3, [r3, #4]
  122bc4:	e1a00003 	mov	r0, r3
  122bc8:	ebffe12e 	bl	11b088 <pbuf_clen>
  122bcc:	e1a03000 	mov	r3, r0
  122bd0:	e1540003 	cmp	r4, r3
  122bd4:	2a000006 	bcs	122bf4 <tcp_receive+0x534>
  122bd8:	e3080480 	movw	r0, #33920	; 0x8480
  122bdc:	e3400014 	movt	r0, #20
  122be0:	ebff814b 	bl	103114 <rt_kprintf>
  122be4:	e300148b 	movw	r1, #1163	; 0x48b
  122be8:	e308027c 	movw	r0, #33404	; 0x827c
  122bec:	e3400014 	movt	r0, #20
  122bf0:	ebffa12f 	bl	10b0b4 <sys_arch_assert>

        pcb->snd_queuelen -= pbuf_clen(next->p);
  122bf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122bf8:	e5933004 	ldr	r3, [r3, #4]
  122bfc:	e1a00003 	mov	r0, r3
  122c00:	ebffe120 	bl	11b088 <pbuf_clen>
  122c04:	e1a03000 	mov	r3, r0
  122c08:	e1a02003 	mov	r2, r3
  122c0c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c10:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122c14:	e0433002 	sub	r3, r3, r2
  122c18:	e6ff2073 	uxth	r2, r3
  122c1c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c20:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
        recv_acked += next->len;
  122c24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122c28:	e1d320b8 	ldrh	r2, [r3, #8]
  122c2c:	e30e326c 	movw	r3, #57964	; 0xe26c
  122c30:	e3403014 	movt	r3, #20
  122c34:	e1d330b0 	ldrh	r3, [r3]
  122c38:	e0823003 	add	r3, r2, r3
  122c3c:	e6ff2073 	uxth	r2, r3
  122c40:	e30e326c 	movw	r3, #57964	; 0xe26c
  122c44:	e3403014 	movt	r3, #20
  122c48:	e1c320b0 	strh	r2, [r3]
        tcp_seg_free(next);
  122c4c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  122c50:	ebfff1fb 	bl	11f444 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
  122c54:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c58:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122c5c:	e3530000 	cmp	r3, #0
  122c60:	0a00000e 	beq	122ca0 <tcp_receive+0x5e0>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
  122c64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c68:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122c6c:	e3530000 	cmp	r3, #0
  122c70:	1a00000a 	bne	122ca0 <tcp_receive+0x5e0>
  122c74:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c78:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122c7c:	e3530000 	cmp	r3, #0
  122c80:	1a000006 	bne	122ca0 <tcp_receive+0x5e0>
  122c84:	e30804a8 	movw	r0, #33960	; 0x84a8
  122c88:	e3400014 	movt	r0, #20
  122c8c:	ebff8120 	bl	103114 <rt_kprintf>
  122c90:	e3001494 	movw	r1, #1172	; 0x494
  122c94:	e308027c 	movw	r0, #33404	; 0x827c
  122c98:	e3400014 	movt	r0, #20
  122c9c:	ebffa104 	bl	10b0b4 <sys_arch_assert>
      while (pcb->unacked != NULL &&
  122ca0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ca4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122ca8:	e3530000 	cmp	r3, #0
  122cac:	0a000020 	beq	122d34 <tcp_receive+0x674>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
  122cb0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cb4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122cb8:	e593300c 	ldr	r3, [r3, #12]
  122cbc:	e5933004 	ldr	r3, [r3, #4]
  122cc0:	e1a00003 	mov	r0, r3
  122cc4:	ebffce3f 	bl	1165c8 <lwip_htonl>
  122cc8:	e1a04000 	mov	r4, r0
  122ccc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cd0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122cd4:	e1d330b8 	ldrh	r3, [r3, #8]
  122cd8:	e1a05003 	mov	r5, r3
  122cdc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ce0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122ce4:	e593300c 	ldr	r3, [r3, #12]
  122ce8:	e1d330bc 	ldrh	r3, [r3, #12]
  122cec:	e6ff3073 	uxth	r3, r3
  122cf0:	e1a00003 	mov	r0, r3
  122cf4:	ebffce27 	bl	116598 <lwip_htons>
  122cf8:	e1a03000 	mov	r3, r0
  122cfc:	e2033003 	and	r3, r3, #3
  122d00:	e3530000 	cmp	r3, #0
  122d04:	0a000001 	beq	122d10 <tcp_receive+0x650>
  122d08:	e3a03001 	mov	r3, #1
  122d0c:	ea000000 	b	122d14 <tcp_receive+0x654>
  122d10:	e3a03000 	mov	r3, #0
  122d14:	e0833005 	add	r3, r3, r5
  122d18:	e0842003 	add	r2, r4, r3
  122d1c:	e30e3268 	movw	r3, #57960	; 0xe268
  122d20:	e3403014 	movt	r3, #20
  122d24:	e5933000 	ldr	r3, [r3]
  122d28:	e0423003 	sub	r3, r2, r3
      while (pcb->unacked != NULL &&
  122d2c:	e3530000 	cmp	r3, #0
  122d30:	daffff97 	ble	122b94 <tcp_receive+0x4d4>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  122d34:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d38:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122d3c:	e3530000 	cmp	r3, #0
  122d40:	1a000003 	bne	122d54 <tcp_receive+0x694>
        pcb->rtime = -1;
  122d44:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d48:	e3e02000 	mvn	r2, #0
  122d4c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  122d50:	ea000002 	b	122d60 <tcp_receive+0x6a0>
      } else {
        pcb->rtime = 0;
  122d54:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d58:	e3a02000 	mov	r2, #0
  122d5c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
      }

      pcb->polltmr = 0;
  122d60:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d64:	e3a02000 	mov	r2, #0
  122d68:	e5c3201f 	strb	r2, [r3, #31]
  122d6c:	ea000001 	b	122d78 <tcp_receive+0x6b8>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
  122d70:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  122d74:	eb000c08 	bl	125d9c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  122d78:	ea000049 	b	122ea4 <tcp_receive+0x7e4>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
  122d7c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d80:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122d84:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      pcb->unsent = pcb->unsent->next;
  122d88:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d8c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122d90:	e5932000 	ldr	r2, [r3]
  122d94:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d98:	e583206c 	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
  122d9c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122da0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122da4:	e3530000 	cmp	r3, #0
  122da8:	1a000002 	bne	122db8 <tcp_receive+0x6f8>
        pcb->unsent_oversize = 0;
  122dac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122db0:	e3a02000 	mov	r2, #0
  122db4:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  122db8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dbc:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  122dc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122dc4:	e5933004 	ldr	r3, [r3, #4]
  122dc8:	e1a00003 	mov	r0, r3
  122dcc:	ebffe0ad 	bl	11b088 <pbuf_clen>
  122dd0:	e1a03000 	mov	r3, r0
  122dd4:	e1540003 	cmp	r4, r3
  122dd8:	2a000006 	bcs	122df8 <tcp_receive+0x738>
  122ddc:	e3080480 	movw	r0, #33920	; 0x8480
  122de0:	e3400014 	movt	r0, #20
  122de4:	ebff80ca 	bl	103114 <rt_kprintf>
  122de8:	e30014c2 	movw	r1, #1218	; 0x4c2
  122dec:	e308027c 	movw	r0, #33404	; 0x827c
  122df0:	e3400014 	movt	r0, #20
  122df4:	ebffa0ae 	bl	10b0b4 <sys_arch_assert>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
  122df8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122dfc:	e5933004 	ldr	r3, [r3, #4]
  122e00:	e1a00003 	mov	r0, r3
  122e04:	ebffe09f 	bl	11b088 <pbuf_clen>
  122e08:	e1a03000 	mov	r3, r0
  122e0c:	e1a02003 	mov	r2, r3
  122e10:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e14:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122e18:	e0433002 	sub	r3, r3, r2
  122e1c:	e6ff2073 	uxth	r2, r3
  122e20:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e24:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      recv_acked += next->len;
  122e28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122e2c:	e1d320b8 	ldrh	r2, [r3, #8]
  122e30:	e30e326c 	movw	r3, #57964	; 0xe26c
  122e34:	e3403014 	movt	r3, #20
  122e38:	e1d330b0 	ldrh	r3, [r3]
  122e3c:	e0823003 	add	r3, r2, r3
  122e40:	e6ff2073 	uxth	r2, r3
  122e44:	e30e326c 	movw	r3, #57964	; 0xe26c
  122e48:	e3403014 	movt	r3, #20
  122e4c:	e1c320b0 	strh	r2, [r3]
      tcp_seg_free(next);
  122e50:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  122e54:	ebfff17a 	bl	11f444 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
  122e58:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e5c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122e60:	e3530000 	cmp	r3, #0
  122e64:	0a00000e 	beq	122ea4 <tcp_receive+0x7e4>
        LWIP_ASSERT("tcp_receive: valid queue length",
  122e68:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e6c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122e70:	e3530000 	cmp	r3, #0
  122e74:	1a00000a 	bne	122ea4 <tcp_receive+0x7e4>
  122e78:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e7c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122e80:	e3530000 	cmp	r3, #0
  122e84:	1a000006 	bne	122ea4 <tcp_receive+0x7e4>
  122e88:	e30804a8 	movw	r0, #33960	; 0x84a8
  122e8c:	e3400014 	movt	r0, #20
  122e90:	ebff809f 	bl	103114 <rt_kprintf>
  122e94:	e30014ca 	movw	r1, #1226	; 0x4ca
  122e98:	e308027c 	movw	r0, #33404	; 0x827c
  122e9c:	e3400014 	movt	r0, #20
  122ea0:	ebffa083 	bl	10b0b4 <sys_arch_assert>
    while (pcb->unsent != NULL &&
  122ea4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ea8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122eac:	e3530000 	cmp	r3, #0
  122eb0:	0a000028 	beq	122f58 <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  122eb4:	e30e3268 	movw	r3, #57960	; 0xe268
  122eb8:	e3403014 	movt	r3, #20
  122ebc:	e5934000 	ldr	r4, [r3]
  122ec0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ec4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122ec8:	e593300c 	ldr	r3, [r3, #12]
  122ecc:	e5933004 	ldr	r3, [r3, #4]
  122ed0:	e1a00003 	mov	r0, r3
  122ed4:	ebffcdbb 	bl	1165c8 <lwip_htonl>
  122ed8:	e1a05000 	mov	r5, r0
  122edc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ee0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122ee4:	e1d330b8 	ldrh	r3, [r3, #8]
  122ee8:	e1a06003 	mov	r6, r3
  122eec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ef0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122ef4:	e593300c 	ldr	r3, [r3, #12]
  122ef8:	e1d330bc 	ldrh	r3, [r3, #12]
  122efc:	e6ff3073 	uxth	r3, r3
  122f00:	e1a00003 	mov	r0, r3
  122f04:	ebffcda3 	bl	116598 <lwip_htons>
  122f08:	e1a03000 	mov	r3, r0
  122f0c:	e2033003 	and	r3, r3, #3
  122f10:	e3530000 	cmp	r3, #0
  122f14:	0a000001 	beq	122f20 <tcp_receive+0x860>
  122f18:	e3a03001 	mov	r3, #1
  122f1c:	ea000000 	b	122f24 <tcp_receive+0x864>
  122f20:	e3a03000 	mov	r3, #0
  122f24:	e0833006 	add	r3, r3, r6
  122f28:	e0853003 	add	r3, r5, r3
  122f2c:	e0443003 	sub	r3, r4, r3
    while (pcb->unsent != NULL &&
  122f30:	e3530000 	cmp	r3, #0
  122f34:	ba000007 	blt	122f58 <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  122f38:	e30e3268 	movw	r3, #57960	; 0xe268
  122f3c:	e3403014 	movt	r3, #20
  122f40:	e5932000 	ldr	r2, [r3]
  122f44:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f48:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  122f4c:	e0423003 	sub	r3, r2, r3
  122f50:	e3530000 	cmp	r3, #0
  122f54:	daffff88 	ble	122d7c <tcp_receive+0x6bc>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
  122f58:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f5c:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  122f60:	e30e326c 	movw	r3, #57964	; 0xe26c
  122f64:	e3403014 	movt	r3, #20
  122f68:	e1d330b0 	ldrh	r3, [r3]
  122f6c:	e0823003 	add	r3, r2, r3
  122f70:	e6ff2073 	uxth	r2, r3
  122f74:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f78:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  122f7c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f80:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  122f84:	e3530000 	cmp	r3, #0
  122f88:	0a00004c 	beq	1230c0 <tcp_receive+0xa00>
  122f8c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f90:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  122f94:	e30e3268 	movw	r3, #57960	; 0xe268
  122f98:	e3403014 	movt	r3, #20
  122f9c:	e5933000 	ldr	r3, [r3]
  122fa0:	e0423003 	sub	r3, r2, r3
  122fa4:	e3530000 	cmp	r3, #0
  122fa8:	aa000044 	bge	1230c0 <tcp_receive+0xa00>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
  122fac:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  122fb0:	e3403015 	movt	r3, #21
  122fb4:	e5933000 	ldr	r3, [r3]
  122fb8:	e6ff2073 	uxth	r2, r3
  122fbc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fc0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  122fc4:	e6ff3073 	uxth	r3, r3
  122fc8:	e0423003 	sub	r3, r2, r3
  122fcc:	e6ff3073 	uxth	r3, r3
  122fd0:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  122fd4:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  122fd8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fdc:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122fe0:	e1a031c3 	asr	r3, r3, #3
  122fe4:	e6bf3073 	sxth	r3, r3
  122fe8:	e6ff3073 	uxth	r3, r3
  122fec:	e0423003 	sub	r3, r2, r3
  122ff0:	e6ff3073 	uxth	r3, r3
  122ff4:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sa += m;
  122ff8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ffc:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  123000:	e6ff2073 	uxth	r2, r3
  123004:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  123008:	e0823003 	add	r3, r2, r3
  12300c:	e6ff3073 	uxth	r3, r3
  123010:	e6bf2073 	sxth	r2, r3
  123014:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123018:	e1c324b0 	strh	r2, [r3, #64]	; 0x40
      if (m < 0) {
  12301c:	e15b32f2 	ldrsh	r3, [fp, #-34]	; 0xffffffde
  123020:	e3530000 	cmp	r3, #0
  123024:	aa000003 	bge	123038 <tcp_receive+0x978>
        m = -m;
  123028:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  12302c:	e2633000 	rsb	r3, r3, #0
  123030:	e6ff3073 	uxth	r3, r3
  123034:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      }
      m = m - (pcb->sv >> 2);
  123038:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  12303c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123040:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  123044:	e1a03143 	asr	r3, r3, #2
  123048:	e6bf3073 	sxth	r3, r3
  12304c:	e6ff3073 	uxth	r3, r3
  123050:	e0423003 	sub	r3, r2, r3
  123054:	e6ff3073 	uxth	r3, r3
  123058:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sv += m;
  12305c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123060:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  123064:	e6ff2073 	uxth	r2, r3
  123068:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  12306c:	e0823003 	add	r3, r2, r3
  123070:	e6ff3073 	uxth	r3, r3
  123074:	e6bf2073 	sxth	r2, r3
  123078:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12307c:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  123080:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123084:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  123088:	e1a031c3 	asr	r3, r3, #3
  12308c:	e6bf3073 	sxth	r3, r3
  123090:	e6ff2073 	uxth	r2, r3
  123094:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123098:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  12309c:	e6ff3073 	uxth	r3, r3
  1230a0:	e0823003 	add	r3, r2, r3
  1230a4:	e6ff3073 	uxth	r3, r3
  1230a8:	e6bf2073 	sxth	r2, r3
  1230ac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230b0:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
  1230b4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230b8:	e3a02000 	mov	r2, #0
  1230bc:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  1230c0:	e30e326e 	movw	r3, #57966	; 0xe26e
  1230c4:	e3403014 	movt	r3, #20
  1230c8:	e1d330b0 	ldrh	r3, [r3]
  1230cc:	e3530000 	cmp	r3, #0
  1230d0:	0a0004b3 	beq	1243a4 <tcp_receive+0x1ce4>
  1230d4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230d8:	e5933014 	ldr	r3, [r3, #20]
  1230dc:	e3530006 	cmp	r3, #6
  1230e0:	8a0004af 	bhi	1243a4 <tcp_receive+0x1ce4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  1230e4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230e8:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1230ec:	e30e3264 	movw	r3, #57956	; 0xe264
  1230f0:	e3403014 	movt	r3, #20
  1230f4:	e5933000 	ldr	r3, [r3]
  1230f8:	e0423003 	sub	r3, r2, r3
  1230fc:	e2433001 	sub	r3, r3, #1
  123100:	e3530000 	cmp	r3, #0
  123104:	ba0000aa 	blt	1233b4 <tcp_receive+0xcf4>
  123108:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12310c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123110:	e30e326e 	movw	r3, #57966	; 0xe26e
  123114:	e3403014 	movt	r3, #20
  123118:	e1d330b0 	ldrh	r3, [r3]
  12311c:	e1a01003 	mov	r1, r3
  123120:	e30e3264 	movw	r3, #57956	; 0xe264
  123124:	e3403014 	movt	r3, #20
  123128:	e5933000 	ldr	r3, [r3]
  12312c:	e0813003 	add	r3, r1, r3
  123130:	e0423003 	sub	r3, r2, r3
  123134:	e2833001 	add	r3, r3, #1
  123138:	e3530000 	cmp	r3, #0
  12313c:	ca00009c 	bgt	1233b4 <tcp_receive+0xcf4>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
  123140:	e30e3244 	movw	r3, #57924	; 0xe244
  123144:	e3403014 	movt	r3, #20
  123148:	e5933004 	ldr	r3, [r3, #4]
  12314c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      off = pcb->rcv_nxt - seqno;
  123150:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123154:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123158:	e30e3264 	movw	r3, #57956	; 0xe264
  12315c:	e3403014 	movt	r3, #20
  123160:	e5933000 	ldr	r3, [r3]
  123164:	e0423003 	sub	r3, r2, r3
  123168:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
  12316c:	e30e3244 	movw	r3, #57924	; 0xe244
  123170:	e3403014 	movt	r3, #20
  123174:	e5933004 	ldr	r3, [r3, #4]
  123178:	e3530000 	cmp	r3, #0
  12317c:	1a000006 	bne	12319c <tcp_receive+0xadc>
  123180:	e30804c8 	movw	r0, #33992	; 0x84c8
  123184:	e3400014 	movt	r0, #20
  123188:	ebff7fe1 	bl	103114 <rt_kprintf>
  12318c:	e3001529 	movw	r1, #1321	; 0x529
  123190:	e308027c 	movw	r0, #33404	; 0x827c
  123194:	e3400014 	movt	r0, #20
  123198:	ebff9fc5 	bl	10b0b4 <sys_arch_assert>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
  12319c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1231a0:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  1231a4:	e1530002 	cmp	r3, r2
  1231a8:	da000006 	ble	1231c8 <tcp_receive+0xb08>
  1231ac:	e30804d8 	movw	r0, #34008	; 0x84d8
  1231b0:	e3400014 	movt	r0, #20
  1231b4:	ebff7fd6 	bl	103114 <rt_kprintf>
  1231b8:	e300152a 	movw	r1, #1322	; 0x52a
  1231bc:	e308027c 	movw	r0, #33404	; 0x827c
  1231c0:	e3400014 	movt	r0, #20
  1231c4:	ebff9fba 	bl	10b0b4 <sys_arch_assert>
      if (inseg.p->len < off) {
  1231c8:	e30e3244 	movw	r3, #57924	; 0xe244
  1231cc:	e3403014 	movt	r3, #20
  1231d0:	e5933004 	ldr	r3, [r3, #4]
  1231d4:	e1d330ba 	ldrh	r3, [r3, #10]
  1231d8:	e1a02003 	mov	r2, r3
  1231dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1231e0:	e1530002 	cmp	r3, r2
  1231e4:	da00003f 	ble	1232e8 <tcp_receive+0xc28>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
  1231e8:	e30e3244 	movw	r3, #57924	; 0xe244
  1231ec:	e3403014 	movt	r3, #20
  1231f0:	e5933004 	ldr	r3, [r3, #4]
  1231f4:	e1d330b8 	ldrh	r3, [r3, #8]
  1231f8:	e1a02003 	mov	r2, r3
  1231fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  123200:	e1530002 	cmp	r3, r2
  123204:	da000006 	ble	123224 <tcp_receive+0xb64>
  123208:	e30804e8 	movw	r0, #34024	; 0x84e8
  12320c:	e3400014 	movt	r0, #20
  123210:	ebff7fbf 	bl	103114 <rt_kprintf>
  123214:	e300152c 	movw	r1, #1324	; 0x52c
  123218:	e308027c 	movw	r0, #33404	; 0x827c
  12321c:	e3400014 	movt	r0, #20
  123220:	ebff9fa3 	bl	10b0b4 <sys_arch_assert>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  123224:	e30e3244 	movw	r3, #57924	; 0xe244
  123228:	e3403014 	movt	r3, #20
  12322c:	e5933004 	ldr	r3, [r3, #4]
  123230:	e1d320b8 	ldrh	r2, [r3, #8]
  123234:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  123238:	e6ff3073 	uxth	r3, r3
  12323c:	e0423003 	sub	r3, r2, r3
  123240:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
        while (p->len < off) {
  123244:	ea00000e 	b	123284 <tcp_receive+0xbc4>
          off -= p->len;
  123248:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12324c:	e1d330ba 	ldrh	r3, [r3, #10]
  123250:	e1a02003 	mov	r2, r3
  123254:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  123258:	e0433002 	sub	r3, r3, r2
  12325c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
  123260:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  123264:	e15b23b4 	ldrh	r2, [fp, #-52]	; 0xffffffcc
  123268:	e1c320b8 	strh	r2, [r3, #8]
          p->len = 0;
  12326c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  123270:	e3a02000 	mov	r2, #0
  123274:	e1c320ba 	strh	r2, [r3, #10]
          p = p->next;
  123278:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12327c:	e5933000 	ldr	r3, [r3]
  123280:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
        while (p->len < off) {
  123284:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  123288:	e1d330ba 	ldrh	r3, [r3, #10]
  12328c:	e1a02003 	mov	r2, r3
  123290:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  123294:	e1530002 	cmp	r3, r2
  123298:	caffffea 	bgt	123248 <tcp_receive+0xb88>
        }
        if (pbuf_header(p, (s16_t)-off)) {
  12329c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1232a0:	e6ff3073 	uxth	r3, r3
  1232a4:	e2633000 	rsb	r3, r3, #0
  1232a8:	e6ff3073 	uxth	r3, r3
  1232ac:	e6bf3073 	sxth	r3, r3
  1232b0:	e1a01003 	mov	r1, r3
  1232b4:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1232b8:	ebffdecf 	bl	11adfc <pbuf_header>
  1232bc:	e1a03000 	mov	r3, r0
  1232c0:	e3530000 	cmp	r3, #0
  1232c4:	0a00001c 	beq	12333c <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  1232c8:	e30804f8 	movw	r0, #34040	; 0x84f8
  1232cc:	e3400014 	movt	r0, #20
  1232d0:	ebff7f8f 	bl	103114 <rt_kprintf>
  1232d4:	e3001539 	movw	r1, #1337	; 0x539
  1232d8:	e308027c 	movw	r0, #33404	; 0x827c
  1232dc:	e3400014 	movt	r0, #20
  1232e0:	ebff9f73 	bl	10b0b4 <sys_arch_assert>
  1232e4:	ea000014 	b	12333c <tcp_receive+0xc7c>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
  1232e8:	e30e3244 	movw	r3, #57924	; 0xe244
  1232ec:	e3403014 	movt	r3, #20
  1232f0:	e5933004 	ldr	r3, [r3, #4]
  1232f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1232f8:	e6ff2072 	uxth	r2, r2
  1232fc:	e2622000 	rsb	r2, r2, #0
  123300:	e6ff2072 	uxth	r2, r2
  123304:	e6bf2072 	sxth	r2, r2
  123308:	e1a01002 	mov	r1, r2
  12330c:	e1a00003 	mov	r0, r3
  123310:	ebffdeb9 	bl	11adfc <pbuf_header>
  123314:	e1a03000 	mov	r3, r0
  123318:	e3530000 	cmp	r3, #0
  12331c:	0a000006 	beq	12333c <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  123320:	e30804f8 	movw	r0, #34040	; 0x84f8
  123324:	e3400014 	movt	r0, #20
  123328:	ebff7f79 	bl	103114 <rt_kprintf>
  12332c:	e300153e 	movw	r1, #1342	; 0x53e
  123330:	e308027c 	movw	r0, #33404	; 0x827c
  123334:	e3400014 	movt	r0, #20
  123338:	ebff9f5d 	bl	10b0b4 <sys_arch_assert>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  12333c:	e30e3244 	movw	r3, #57924	; 0xe244
  123340:	e3403014 	movt	r3, #20
  123344:	e1d320b8 	ldrh	r2, [r3, #8]
  123348:	e30e3264 	movw	r3, #57956	; 0xe264
  12334c:	e3403014 	movt	r3, #20
  123350:	e5933000 	ldr	r3, [r3]
  123354:	e6ff1073 	uxth	r1, r3
  123358:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12335c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123360:	e6ff3073 	uxth	r3, r3
  123364:	e0413003 	sub	r3, r1, r3
  123368:	e6ff3073 	uxth	r3, r3
  12336c:	e0823003 	add	r3, r2, r3
  123370:	e6ff2073 	uxth	r2, r3
  123374:	e30e3244 	movw	r3, #57924	; 0xe244
  123378:	e3403014 	movt	r3, #20
  12337c:	e1c320b8 	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  123380:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123384:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123388:	e30e3264 	movw	r3, #57956	; 0xe264
  12338c:	e3403014 	movt	r3, #20
  123390:	e5832000 	str	r2, [r3]
  123394:	e30e3244 	movw	r3, #57924	; 0xe244
  123398:	e3403014 	movt	r3, #20
  12339c:	e593200c 	ldr	r2, [r3, #12]
  1233a0:	e30e3264 	movw	r3, #57956	; 0xe264
  1233a4:	e3403014 	movt	r3, #20
  1233a8:	e5933000 	ldr	r3, [r3]
  1233ac:	e5823004 	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  1233b0:	ea00000d 	b	1233ec <tcp_receive+0xd2c>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
  1233b4:	e30e3264 	movw	r3, #57956	; 0xe264
  1233b8:	e3403014 	movt	r3, #20
  1233bc:	e5932000 	ldr	r2, [r3]
  1233c0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233c4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1233c8:	e0423003 	sub	r3, r2, r3
  1233cc:	e3530000 	cmp	r3, #0
  1233d0:	aa000005 	bge	1233ec <tcp_receive+0xd2c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
  1233d4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233d8:	e5d3301e 	ldrb	r3, [r3, #30]
  1233dc:	e3833002 	orr	r3, r3, #2
  1233e0:	e6ef2073 	uxtb	r2, r3
  1233e4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233e8:	e5c3201e 	strb	r2, [r3, #30]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  1233ec:	e30e3264 	movw	r3, #57956	; 0xe264
  1233f0:	e3403014 	movt	r3, #20
  1233f4:	e5932000 	ldr	r2, [r3]
  1233f8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233fc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123400:	e0423003 	sub	r3, r2, r3
  123404:	e3530000 	cmp	r3, #0
  123408:	ba0003e1 	blt	124394 <tcp_receive+0x1cd4>
  12340c:	e30e3264 	movw	r3, #57956	; 0xe264
  123410:	e3403014 	movt	r3, #20
  123414:	e5932000 	ldr	r2, [r3]
  123418:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12341c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123420:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  123424:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  123428:	e0833001 	add	r3, r3, r1
  12342c:	e0423003 	sub	r3, r2, r3
  123430:	e2833001 	add	r3, r3, #1
  123434:	e3530000 	cmp	r3, #0
  123438:	ca0003d5 	bgt	124394 <tcp_receive+0x1cd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
  12343c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123440:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123444:	e30e3264 	movw	r3, #57956	; 0xe264
  123448:	e3403014 	movt	r3, #20
  12344c:	e5933000 	ldr	r3, [r3]
  123450:	e1520003 	cmp	r2, r3
  123454:	1a00026b 	bne	123e08 <tcp_receive+0x1748>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
  123458:	e30e3244 	movw	r3, #57924	; 0xe244
  12345c:	e3403014 	movt	r3, #20
  123460:	e1d340b8 	ldrh	r4, [r3, #8]
  123464:	e30e3244 	movw	r3, #57924	; 0xe244
  123468:	e3403014 	movt	r3, #20
  12346c:	e593300c 	ldr	r3, [r3, #12]
  123470:	e1d330bc 	ldrh	r3, [r3, #12]
  123474:	e6ff3073 	uxth	r3, r3
  123478:	e1a00003 	mov	r0, r3
  12347c:	ebffcc45 	bl	116598 <lwip_htons>
  123480:	e1a03000 	mov	r3, r0
  123484:	e2033003 	and	r3, r3, #3
  123488:	e3530000 	cmp	r3, #0
  12348c:	0a000001 	beq	123498 <tcp_receive+0xdd8>
  123490:	e3a03001 	mov	r3, #1
  123494:	ea000000 	b	12349c <tcp_receive+0xddc>
  123498:	e3a03000 	mov	r3, #0
  12349c:	e0833004 	add	r3, r3, r4
  1234a0:	e6ff2073 	uxth	r2, r3
  1234a4:	e30e326e 	movw	r3, #57966	; 0xe26e
  1234a8:	e3403014 	movt	r3, #20
  1234ac:	e1c320b0 	strh	r2, [r3]

        if (tcplen > pcb->rcv_wnd) {
  1234b0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1234b4:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  1234b8:	e30e326e 	movw	r3, #57966	; 0xe26e
  1234bc:	e3403014 	movt	r3, #20
  1234c0:	e1d330b0 	ldrh	r3, [r3]
  1234c4:	e1520003 	cmp	r2, r3
  1234c8:	2a000072 	bcs	123698 <tcp_receive+0xfd8>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  1234cc:	e30e3244 	movw	r3, #57924	; 0xe244
  1234d0:	e3403014 	movt	r3, #20
  1234d4:	e593300c 	ldr	r3, [r3, #12]
  1234d8:	e1d330bc 	ldrh	r3, [r3, #12]
  1234dc:	e6ff3073 	uxth	r3, r3
  1234e0:	e1a00003 	mov	r0, r3
  1234e4:	ebffcc2b 	bl	116598 <lwip_htons>
  1234e8:	e1a03000 	mov	r3, r0
  1234ec:	e2033001 	and	r3, r3, #1
  1234f0:	e3530000 	cmp	r3, #0
  1234f4:	0a00001a 	beq	123564 <tcp_receive+0xea4>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
  1234f8:	e30e3244 	movw	r3, #57924	; 0xe244
  1234fc:	e3403014 	movt	r3, #20
  123500:	e593300c 	ldr	r3, [r3, #12]
  123504:	e1d330bc 	ldrh	r3, [r3, #12]
  123508:	e6ff3073 	uxth	r3, r3
  12350c:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  123510:	e6ff4073 	uxth	r4, r3
  123514:	e30e3244 	movw	r3, #57924	; 0xe244
  123518:	e3403014 	movt	r3, #20
  12351c:	e593300c 	ldr	r3, [r3, #12]
  123520:	e1d330bc 	ldrh	r3, [r3, #12]
  123524:	e6ff3073 	uxth	r3, r3
  123528:	e1a00003 	mov	r0, r3
  12352c:	ebffcc19 	bl	116598 <lwip_htons>
  123530:	e1a03000 	mov	r3, r0
  123534:	e203303e 	and	r3, r3, #62	; 0x3e
  123538:	e6ff3073 	uxth	r3, r3
  12353c:	e1a00003 	mov	r0, r3
  123540:	ebffcc14 	bl	116598 <lwip_htons>
  123544:	e1a03000 	mov	r3, r0
  123548:	e1a02003 	mov	r2, r3
  12354c:	e30e3244 	movw	r3, #57924	; 0xe244
  123550:	e3403014 	movt	r3, #20
  123554:	e593300c 	ldr	r3, [r3, #12]
  123558:	e1842002 	orr	r2, r4, r2
  12355c:	e6ff2072 	uxth	r2, r2
  123560:	e1c320bc 	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
  123564:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123568:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  12356c:	e30e3244 	movw	r3, #57924	; 0xe244
  123570:	e3403014 	movt	r3, #20
  123574:	e1c320b8 	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  123578:	e30e3244 	movw	r3, #57924	; 0xe244
  12357c:	e3403014 	movt	r3, #20
  123580:	e593300c 	ldr	r3, [r3, #12]
  123584:	e1d330bc 	ldrh	r3, [r3, #12]
  123588:	e6ff3073 	uxth	r3, r3
  12358c:	e1a00003 	mov	r0, r3
  123590:	ebffcc00 	bl	116598 <lwip_htons>
  123594:	e1a03000 	mov	r3, r0
  123598:	e2033002 	and	r3, r3, #2
  12359c:	e3530000 	cmp	r3, #0
  1235a0:	0a000007 	beq	1235c4 <tcp_receive+0xf04>
            inseg.len -= 1;
  1235a4:	e30e3244 	movw	r3, #57924	; 0xe244
  1235a8:	e3403014 	movt	r3, #20
  1235ac:	e1d330b8 	ldrh	r3, [r3, #8]
  1235b0:	e2433001 	sub	r3, r3, #1
  1235b4:	e6ff2073 	uxth	r2, r3
  1235b8:	e30e3244 	movw	r3, #57924	; 0xe244
  1235bc:	e3403014 	movt	r3, #20
  1235c0:	e1c320b8 	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
  1235c4:	e30e3244 	movw	r3, #57924	; 0xe244
  1235c8:	e3403014 	movt	r3, #20
  1235cc:	e5932004 	ldr	r2, [r3, #4]
  1235d0:	e30e3244 	movw	r3, #57924	; 0xe244
  1235d4:	e3403014 	movt	r3, #20
  1235d8:	e1d330b8 	ldrh	r3, [r3, #8]
  1235dc:	e1a01003 	mov	r1, r3
  1235e0:	e1a00002 	mov	r0, r2
  1235e4:	ebffdcd9 	bl	11a950 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
  1235e8:	e30e3244 	movw	r3, #57924	; 0xe244
  1235ec:	e3403014 	movt	r3, #20
  1235f0:	e1d340b8 	ldrh	r4, [r3, #8]
  1235f4:	e30e3244 	movw	r3, #57924	; 0xe244
  1235f8:	e3403014 	movt	r3, #20
  1235fc:	e593300c 	ldr	r3, [r3, #12]
  123600:	e1d330bc 	ldrh	r3, [r3, #12]
  123604:	e6ff3073 	uxth	r3, r3
  123608:	e1a00003 	mov	r0, r3
  12360c:	ebffcbe1 	bl	116598 <lwip_htons>
  123610:	e1a03000 	mov	r3, r0
  123614:	e2033003 	and	r3, r3, #3
  123618:	e3530000 	cmp	r3, #0
  12361c:	0a000001 	beq	123628 <tcp_receive+0xf68>
  123620:	e3a03001 	mov	r3, #1
  123624:	ea000000 	b	12362c <tcp_receive+0xf6c>
  123628:	e3a03000 	mov	r3, #0
  12362c:	e0833004 	add	r3, r3, r4
  123630:	e6ff2073 	uxth	r2, r3
  123634:	e30e326e 	movw	r3, #57966	; 0xe26e
  123638:	e3403014 	movt	r3, #20
  12363c:	e1c320b0 	strh	r2, [r3]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  123640:	e30e326e 	movw	r3, #57966	; 0xe26e
  123644:	e3403014 	movt	r3, #20
  123648:	e1d330b0 	ldrh	r3, [r3]
  12364c:	e1a02003 	mov	r2, r3
  123650:	e30e3264 	movw	r3, #57956	; 0xe264
  123654:	e3403014 	movt	r3, #20
  123658:	e5933000 	ldr	r3, [r3]
  12365c:	e0822003 	add	r2, r2, r3
  123660:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123664:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123668:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  12366c:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  123670:	e0833001 	add	r3, r3, r1
  123674:	e1520003 	cmp	r2, r3
  123678:	0a000006 	beq	123698 <tcp_receive+0xfd8>
  12367c:	e308050c 	movw	r0, #34060	; 0x850c
  123680:	e3400014 	movt	r0, #20
  123684:	ebff7ea2 	bl	103114 <rt_kprintf>
  123688:	e300156c 	movw	r1, #1388	; 0x56c
  12368c:	e308027c 	movw	r0, #33404	; 0x827c
  123690:	e3400014 	movt	r0, #20
  123694:	ebff9e86 	bl	10b0b4 <sys_arch_assert>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
  123698:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12369c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1236a0:	e3530000 	cmp	r3, #0
  1236a4:	0a0000da 	beq	123a14 <tcp_receive+0x1354>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  1236a8:	e30e3244 	movw	r3, #57924	; 0xe244
  1236ac:	e3403014 	movt	r3, #20
  1236b0:	e593300c 	ldr	r3, [r3, #12]
  1236b4:	e1d330bc 	ldrh	r3, [r3, #12]
  1236b8:	e6ff3073 	uxth	r3, r3
  1236bc:	e1a00003 	mov	r0, r3
  1236c0:	ebffcbb4 	bl	116598 <lwip_htons>
  1236c4:	e1a03000 	mov	r3, r0
  1236c8:	e2033001 	and	r3, r3, #1
  1236cc:	e3530000 	cmp	r3, #0
  1236d0:	0a00000f 	beq	123714 <tcp_receive+0x1054>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
  1236d4:	ea000009 	b	123700 <tcp_receive+0x1040>
              struct tcp_seg *old_ooseq = pcb->ooseq;
  1236d8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1236dc:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1236e0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
              pcb->ooseq = pcb->ooseq->next;
  1236e4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1236e8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1236ec:	e5932000 	ldr	r2, [r3]
  1236f0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1236f4:	e5832074 	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
  1236f8:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  1236fc:	ebffef50 	bl	11f444 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
  123700:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123704:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123708:	e3530000 	cmp	r3, #0
  12370c:	1afffff1 	bne	1236d8 <tcp_receive+0x1018>
  123710:	ea0000bf 	b	123a14 <tcp_receive+0x1354>
            }
          } else {
            next = pcb->ooseq;
  123714:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123718:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  12371c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  123720:	ea000040 	b	123828 <tcp_receive+0x1168>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  123724:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123728:	e593300c 	ldr	r3, [r3, #12]
  12372c:	e1d330bc 	ldrh	r3, [r3, #12]
  123730:	e6ff3073 	uxth	r3, r3
  123734:	e1a00003 	mov	r0, r3
  123738:	ebffcb96 	bl	116598 <lwip_htons>
  12373c:	e1a03000 	mov	r3, r0
  123740:	e2033001 	and	r3, r3, #1
  123744:	e3530000 	cmp	r3, #0
  123748:	0a00002f 	beq	12380c <tcp_receive+0x114c>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  12374c:	e30e3244 	movw	r3, #57924	; 0xe244
  123750:	e3403014 	movt	r3, #20
  123754:	e593300c 	ldr	r3, [r3, #12]
  123758:	e1d330bc 	ldrh	r3, [r3, #12]
  12375c:	e6ff3073 	uxth	r3, r3
  123760:	e1a00003 	mov	r0, r3
  123764:	ebffcb8b 	bl	116598 <lwip_htons>
  123768:	e1a03000 	mov	r3, r0
  12376c:	e2033002 	and	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  123770:	e3530000 	cmp	r3, #0
  123774:	1a000024 	bne	12380c <tcp_receive+0x114c>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  123778:	e30e3244 	movw	r3, #57924	; 0xe244
  12377c:	e3403014 	movt	r3, #20
  123780:	e593300c 	ldr	r3, [r3, #12]
  123784:	e1d330bc 	ldrh	r3, [r3, #12]
  123788:	e6ff4073 	uxth	r4, r3
  12378c:	e3a00001 	mov	r0, #1
  123790:	ebffcb80 	bl	116598 <lwip_htons>
  123794:	e1a03000 	mov	r3, r0
  123798:	e1a02003 	mov	r2, r3
  12379c:	e30e3244 	movw	r3, #57924	; 0xe244
  1237a0:	e3403014 	movt	r3, #20
  1237a4:	e593300c 	ldr	r3, [r3, #12]
  1237a8:	e1842002 	orr	r2, r4, r2
  1237ac:	e6ff2072 	uxth	r2, r2
  1237b0:	e1c320bc 	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
  1237b4:	e30e3244 	movw	r3, #57924	; 0xe244
  1237b8:	e3403014 	movt	r3, #20
  1237bc:	e1d340b8 	ldrh	r4, [r3, #8]
  1237c0:	e30e3244 	movw	r3, #57924	; 0xe244
  1237c4:	e3403014 	movt	r3, #20
  1237c8:	e593300c 	ldr	r3, [r3, #12]
  1237cc:	e1d330bc 	ldrh	r3, [r3, #12]
  1237d0:	e6ff3073 	uxth	r3, r3
  1237d4:	e1a00003 	mov	r0, r3
  1237d8:	ebffcb6e 	bl	116598 <lwip_htons>
  1237dc:	e1a03000 	mov	r3, r0
  1237e0:	e2033003 	and	r3, r3, #3
  1237e4:	e3530000 	cmp	r3, #0
  1237e8:	0a000001 	beq	1237f4 <tcp_receive+0x1134>
  1237ec:	e3a03001 	mov	r3, #1
  1237f0:	ea000000 	b	1237f8 <tcp_receive+0x1138>
  1237f4:	e3a03000 	mov	r3, #0
  1237f8:	e0833004 	add	r3, r3, r4
  1237fc:	e6ff2073 	uxth	r2, r3
  123800:	e30e326e 	movw	r3, #57966	; 0xe26e
  123804:	e3403014 	movt	r3, #20
  123808:	e1c320b0 	strh	r2, [r3]
              }
              prev = next;
  12380c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123810:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
              next = next->next;
  123814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123818:	e5933000 	ldr	r3, [r3]
  12381c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
              tcp_seg_free(prev);
  123820:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  123824:	ebffef06 	bl	11f444 <tcp_seg_free>
            while (next &&
  123828:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12382c:	e3530000 	cmp	r3, #0
  123830:	0a000010 	beq	123878 <tcp_receive+0x11b8>
                   TCP_SEQ_GEQ(seqno + tcplen,
  123834:	e30e326e 	movw	r3, #57966	; 0xe26e
  123838:	e3403014 	movt	r3, #20
  12383c:	e1d330b0 	ldrh	r3, [r3]
  123840:	e1a02003 	mov	r2, r3
  123844:	e30e3264 	movw	r3, #57956	; 0xe264
  123848:	e3403014 	movt	r3, #20
  12384c:	e5933000 	ldr	r3, [r3]
  123850:	e0822003 	add	r2, r2, r3
  123854:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123858:	e593300c 	ldr	r3, [r3, #12]
  12385c:	e5933004 	ldr	r3, [r3, #4]
  123860:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123864:	e1d110b8 	ldrh	r1, [r1, #8]
  123868:	e0833001 	add	r3, r3, r1
  12386c:	e0423003 	sub	r3, r2, r3
            while (next &&
  123870:	e3530000 	cmp	r3, #0
  123874:	aaffffaa 	bge	123724 <tcp_receive+0x1064>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
  123878:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12387c:	e3530000 	cmp	r3, #0
  123880:	0a000060 	beq	123a08 <tcp_receive+0x1348>
                TCP_SEQ_GT(seqno + tcplen,
  123884:	e30e326e 	movw	r3, #57966	; 0xe26e
  123888:	e3403014 	movt	r3, #20
  12388c:	e1d330b0 	ldrh	r3, [r3]
  123890:	e1a02003 	mov	r2, r3
  123894:	e30e3264 	movw	r3, #57956	; 0xe264
  123898:	e3403014 	movt	r3, #20
  12389c:	e5933000 	ldr	r3, [r3]
  1238a0:	e0822003 	add	r2, r2, r3
  1238a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1238a8:	e593300c 	ldr	r3, [r3, #12]
  1238ac:	e5933004 	ldr	r3, [r3, #4]
  1238b0:	e0423003 	sub	r3, r2, r3
            if (next &&
  1238b4:	e3530000 	cmp	r3, #0
  1238b8:	da000052 	ble	123a08 <tcp_receive+0x1348>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  1238bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1238c0:	e593300c 	ldr	r3, [r3, #12]
  1238c4:	e5933004 	ldr	r3, [r3, #4]
  1238c8:	e6ff2073 	uxth	r2, r3
  1238cc:	e30e3264 	movw	r3, #57956	; 0xe264
  1238d0:	e3403014 	movt	r3, #20
  1238d4:	e5933000 	ldr	r3, [r3]
  1238d8:	e6ff3073 	uxth	r3, r3
  1238dc:	e0423003 	sub	r3, r2, r3
  1238e0:	e6ff2073 	uxth	r2, r3
  1238e4:	e30e3244 	movw	r3, #57924	; 0xe244
  1238e8:	e3403014 	movt	r3, #20
  1238ec:	e1c320b8 	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  1238f0:	e30e3244 	movw	r3, #57924	; 0xe244
  1238f4:	e3403014 	movt	r3, #20
  1238f8:	e593300c 	ldr	r3, [r3, #12]
  1238fc:	e1d330bc 	ldrh	r3, [r3, #12]
  123900:	e6ff3073 	uxth	r3, r3
  123904:	e1a00003 	mov	r0, r3
  123908:	ebffcb22 	bl	116598 <lwip_htons>
  12390c:	e1a03000 	mov	r3, r0
  123910:	e2033002 	and	r3, r3, #2
  123914:	e3530000 	cmp	r3, #0
  123918:	0a000007 	beq	12393c <tcp_receive+0x127c>
                inseg.len -= 1;
  12391c:	e30e3244 	movw	r3, #57924	; 0xe244
  123920:	e3403014 	movt	r3, #20
  123924:	e1d330b8 	ldrh	r3, [r3, #8]
  123928:	e2433001 	sub	r3, r3, #1
  12392c:	e6ff2073 	uxth	r2, r3
  123930:	e30e3244 	movw	r3, #57924	; 0xe244
  123934:	e3403014 	movt	r3, #20
  123938:	e1c320b8 	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
  12393c:	e30e3244 	movw	r3, #57924	; 0xe244
  123940:	e3403014 	movt	r3, #20
  123944:	e5932004 	ldr	r2, [r3, #4]
  123948:	e30e3244 	movw	r3, #57924	; 0xe244
  12394c:	e3403014 	movt	r3, #20
  123950:	e1d330b8 	ldrh	r3, [r3, #8]
  123954:	e1a01003 	mov	r1, r3
  123958:	e1a00002 	mov	r0, r2
  12395c:	ebffdbfb 	bl	11a950 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
  123960:	e30e3244 	movw	r3, #57924	; 0xe244
  123964:	e3403014 	movt	r3, #20
  123968:	e1d340b8 	ldrh	r4, [r3, #8]
  12396c:	e30e3244 	movw	r3, #57924	; 0xe244
  123970:	e3403014 	movt	r3, #20
  123974:	e593300c 	ldr	r3, [r3, #12]
  123978:	e1d330bc 	ldrh	r3, [r3, #12]
  12397c:	e6ff3073 	uxth	r3, r3
  123980:	e1a00003 	mov	r0, r3
  123984:	ebffcb03 	bl	116598 <lwip_htons>
  123988:	e1a03000 	mov	r3, r0
  12398c:	e2033003 	and	r3, r3, #3
  123990:	e3530000 	cmp	r3, #0
  123994:	0a000001 	beq	1239a0 <tcp_receive+0x12e0>
  123998:	e3a03001 	mov	r3, #1
  12399c:	ea000000 	b	1239a4 <tcp_receive+0x12e4>
  1239a0:	e3a03000 	mov	r3, #0
  1239a4:	e0833004 	add	r3, r3, r4
  1239a8:	e6ff2073 	uxth	r2, r3
  1239ac:	e30e326e 	movw	r3, #57966	; 0xe26e
  1239b0:	e3403014 	movt	r3, #20
  1239b4:	e1c320b0 	strh	r2, [r3]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
  1239b8:	e30e326e 	movw	r3, #57966	; 0xe26e
  1239bc:	e3403014 	movt	r3, #20
  1239c0:	e1d330b0 	ldrh	r3, [r3]
  1239c4:	e1a02003 	mov	r2, r3
  1239c8:	e30e3264 	movw	r3, #57956	; 0xe264
  1239cc:	e3403014 	movt	r3, #20
  1239d0:	e5933000 	ldr	r3, [r3]
  1239d4:	e0822003 	add	r2, r2, r3
  1239d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1239dc:	e593300c 	ldr	r3, [r3, #12]
  1239e0:	e5933004 	ldr	r3, [r3, #4]
  1239e4:	e1520003 	cmp	r2, r3
  1239e8:	0a000006 	beq	123a08 <tcp_receive+0x1348>
  1239ec:	e3080544 	movw	r0, #34116	; 0x8544
  1239f0:	e3400014 	movt	r0, #20
  1239f4:	ebff7dc6 	bl	103114 <rt_kprintf>
  1239f8:	e300159c 	movw	r1, #1436	; 0x59c
  1239fc:	e308027c 	movw	r0, #33404	; 0x827c
  123a00:	e3400014 	movt	r0, #20
  123a04:	ebff9daa 	bl	10b0b4 <sys_arch_assert>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
  123a08:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a0c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  123a10:	e5832074 	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
  123a14:	e30e326e 	movw	r3, #57966	; 0xe26e
  123a18:	e3403014 	movt	r3, #20
  123a1c:	e1d330b0 	ldrh	r3, [r3]
  123a20:	e1a02003 	mov	r2, r3
  123a24:	e30e3264 	movw	r3, #57956	; 0xe264
  123a28:	e3403014 	movt	r3, #20
  123a2c:	e5933000 	ldr	r3, [r3]
  123a30:	e0822003 	add	r2, r2, r3
  123a34:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a38:	e5832028 	str	r2, [r3, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
  123a3c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a40:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123a44:	e30e326e 	movw	r3, #57966	; 0xe26e
  123a48:	e3403014 	movt	r3, #20
  123a4c:	e1d330b0 	ldrh	r3, [r3]
  123a50:	e1520003 	cmp	r2, r3
  123a54:	2a000006 	bcs	123a74 <tcp_receive+0x13b4>
  123a58:	e3080580 	movw	r0, #34176	; 0x8580
  123a5c:	e3400014 	movt	r0, #20
  123a60:	ebff7dab 	bl	103114 <rt_kprintf>
  123a64:	e30015a6 	movw	r1, #1446	; 0x5a6
  123a68:	e308027c 	movw	r0, #33404	; 0x827c
  123a6c:	e3400014 	movt	r0, #20
  123a70:	ebff9d8f 	bl	10b0b4 <sys_arch_assert>
        pcb->rcv_wnd -= tcplen;
  123a74:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a78:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123a7c:	e30e326e 	movw	r3, #57966	; 0xe26e
  123a80:	e3403014 	movt	r3, #20
  123a84:	e1d330b0 	ldrh	r3, [r3]
  123a88:	e0423003 	sub	r3, r2, r3
  123a8c:	e6ff2073 	uxth	r2, r3
  123a90:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a94:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
  123a98:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123a9c:	ebffe939 	bl	11df88 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
  123aa0:	e30e3244 	movw	r3, #57924	; 0xe244
  123aa4:	e3403014 	movt	r3, #20
  123aa8:	e5933004 	ldr	r3, [r3, #4]
  123aac:	e1d330b8 	ldrh	r3, [r3, #8]
  123ab0:	e3530000 	cmp	r3, #0
  123ab4:	0a000009 	beq	123ae0 <tcp_receive+0x1420>
          recv_data = inseg.p;
  123ab8:	e30e3244 	movw	r3, #57924	; 0xe244
  123abc:	e3403014 	movt	r3, #20
  123ac0:	e5932004 	ldr	r2, [r3, #4]
  123ac4:	e30e3274 	movw	r3, #57972	; 0xe274
  123ac8:	e3403014 	movt	r3, #20
  123acc:	e5832000 	str	r2, [r3]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
  123ad0:	e30e3244 	movw	r3, #57924	; 0xe244
  123ad4:	e3403014 	movt	r3, #20
  123ad8:	e3a02000 	mov	r2, #0
  123adc:	e5832004 	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  123ae0:	e30e3244 	movw	r3, #57924	; 0xe244
  123ae4:	e3403014 	movt	r3, #20
  123ae8:	e593300c 	ldr	r3, [r3, #12]
  123aec:	e1d330bc 	ldrh	r3, [r3, #12]
  123af0:	e6ff3073 	uxth	r3, r3
  123af4:	e1a00003 	mov	r0, r3
  123af8:	ebffcaa6 	bl	116598 <lwip_htons>
  123afc:	e1a03000 	mov	r3, r0
  123b00:	e2033001 	and	r3, r3, #1
  123b04:	e3530000 	cmp	r3, #0
  123b08:	0a000099 	beq	123d74 <tcp_receive+0x16b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
  123b0c:	e30e3271 	movw	r3, #57969	; 0xe271
  123b10:	e3403014 	movt	r3, #20
  123b14:	e5d33000 	ldrb	r3, [r3]
  123b18:	e3833020 	orr	r3, r3, #32
  123b1c:	e6ef2073 	uxtb	r2, r3
  123b20:	e30e3271 	movw	r3, #57969	; 0xe271
  123b24:	e3403014 	movt	r3, #20
  123b28:	e5c32000 	strb	r2, [r3]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  123b2c:	ea000090 	b	123d74 <tcp_receive+0x16b4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
  123b30:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b34:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123b38:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
          seqno = pcb->ooseq->tcphdr->seqno;
  123b3c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b40:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123b44:	e593300c 	ldr	r3, [r3, #12]
  123b48:	e5932004 	ldr	r2, [r3, #4]
  123b4c:	e30e3264 	movw	r3, #57956	; 0xe264
  123b50:	e3403014 	movt	r3, #20
  123b54:	e5832000 	str	r2, [r3]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  123b58:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123b5c:	e1d330b8 	ldrh	r3, [r3, #8]
  123b60:	e1a04003 	mov	r4, r3
  123b64:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123b68:	e593300c 	ldr	r3, [r3, #12]
  123b6c:	e1d330bc 	ldrh	r3, [r3, #12]
  123b70:	e6ff3073 	uxth	r3, r3
  123b74:	e1a00003 	mov	r0, r3
  123b78:	ebffca86 	bl	116598 <lwip_htons>
  123b7c:	e1a03000 	mov	r3, r0
  123b80:	e2033003 	and	r3, r3, #3
  123b84:	e3530000 	cmp	r3, #0
  123b88:	0a000001 	beq	123b94 <tcp_receive+0x14d4>
  123b8c:	e3a03001 	mov	r3, #1
  123b90:	ea000000 	b	123b98 <tcp_receive+0x14d8>
  123b94:	e3a03000 	mov	r3, #0
  123b98:	e0832004 	add	r2, r3, r4
  123b9c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ba0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123ba4:	e0822003 	add	r2, r2, r3
  123ba8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123bac:	e5832028 	str	r2, [r3, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
  123bb0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123bb4:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  123bb8:	e1a04003 	mov	r4, r3
  123bbc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123bc0:	e1d330b8 	ldrh	r3, [r3, #8]
  123bc4:	e1a05003 	mov	r5, r3
  123bc8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123bcc:	e593300c 	ldr	r3, [r3, #12]
  123bd0:	e1d330bc 	ldrh	r3, [r3, #12]
  123bd4:	e6ff3073 	uxth	r3, r3
  123bd8:	e1a00003 	mov	r0, r3
  123bdc:	ebffca6d 	bl	116598 <lwip_htons>
  123be0:	e1a03000 	mov	r3, r0
  123be4:	e2033003 	and	r3, r3, #3
  123be8:	e3530000 	cmp	r3, #0
  123bec:	0a000001 	beq	123bf8 <tcp_receive+0x1538>
  123bf0:	e3a03001 	mov	r3, #1
  123bf4:	ea000000 	b	123bfc <tcp_receive+0x153c>
  123bf8:	e3a03000 	mov	r3, #0
  123bfc:	e0833005 	add	r3, r3, r5
  123c00:	e1540003 	cmp	r4, r3
  123c04:	2a000006 	bcs	123c24 <tcp_receive+0x1564>
  123c08:	e30805a0 	movw	r0, #34208	; 0x85a0
  123c0c:	e3400014 	movt	r0, #20
  123c10:	ebff7d3f 	bl	103114 <rt_kprintf>
  123c14:	e30015cb 	movw	r1, #1483	; 0x5cb
  123c18:	e308027c 	movw	r0, #33404	; 0x827c
  123c1c:	e3400014 	movt	r0, #20
  123c20:	ebff9d23 	bl	10b0b4 <sys_arch_assert>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  123c24:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123c28:	e1d330b8 	ldrh	r3, [r3, #8]
  123c2c:	e1a04003 	mov	r4, r3
  123c30:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123c34:	e593300c 	ldr	r3, [r3, #12]
  123c38:	e1d330bc 	ldrh	r3, [r3, #12]
  123c3c:	e6ff3073 	uxth	r3, r3
  123c40:	e1a00003 	mov	r0, r3
  123c44:	ebffca53 	bl	116598 <lwip_htons>
  123c48:	e1a03000 	mov	r3, r0
  123c4c:	e2033003 	and	r3, r3, #3
  123c50:	e3530000 	cmp	r3, #0
  123c54:	0a000001 	beq	123c60 <tcp_receive+0x15a0>
  123c58:	e3a03001 	mov	r3, #1
  123c5c:	ea000000 	b	123c64 <tcp_receive+0x15a4>
  123c60:	e3a03000 	mov	r3, #0
  123c64:	e0831004 	add	r1, r3, r4
  123c68:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123c6c:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123c70:	e6ff3071 	uxth	r3, r1
  123c74:	e0423003 	sub	r3, r2, r3
  123c78:	e6ff2073 	uxth	r2, r3
  123c7c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123c80:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

          tcp_update_rcv_ann_wnd(pcb);
  123c84:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123c88:	ebffe8be 	bl	11df88 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
  123c8c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123c90:	e5933004 	ldr	r3, [r3, #4]
  123c94:	e1d330b8 	ldrh	r3, [r3, #8]
  123c98:	e3530000 	cmp	r3, #0
  123c9c:	0a000015 	beq	123cf8 <tcp_receive+0x1638>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
  123ca0:	e30e3274 	movw	r3, #57972	; 0xe274
  123ca4:	e3403014 	movt	r3, #20
  123ca8:	e5933000 	ldr	r3, [r3]
  123cac:	e3530000 	cmp	r3, #0
  123cb0:	0a000008 	beq	123cd8 <tcp_receive+0x1618>
              pbuf_cat(recv_data, cseg->p);
  123cb4:	e30e3274 	movw	r3, #57972	; 0xe274
  123cb8:	e3403014 	movt	r3, #20
  123cbc:	e5932000 	ldr	r2, [r3]
  123cc0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123cc4:	e5933004 	ldr	r3, [r3, #4]
  123cc8:	e1a01003 	mov	r1, r3
  123ccc:	e1a00002 	mov	r0, r2
  123cd0:	ebffdd1e 	bl	11b150 <pbuf_cat>
  123cd4:	ea000004 	b	123cec <tcp_receive+0x162c>
            } else {
              recv_data = cseg->p;
  123cd8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123cdc:	e5932004 	ldr	r2, [r3, #4]
  123ce0:	e30e3274 	movw	r3, #57972	; 0xe274
  123ce4:	e3403014 	movt	r3, #20
  123ce8:	e5832000 	str	r2, [r3]
            }
            cseg->p = NULL;
  123cec:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123cf0:	e3a02000 	mov	r2, #0
  123cf4:	e5832004 	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  123cf8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123cfc:	e593300c 	ldr	r3, [r3, #12]
  123d00:	e1d330bc 	ldrh	r3, [r3, #12]
  123d04:	e6ff3073 	uxth	r3, r3
  123d08:	e1a00003 	mov	r0, r3
  123d0c:	ebffca21 	bl	116598 <lwip_htons>
  123d10:	e1a03000 	mov	r3, r0
  123d14:	e2033001 	and	r3, r3, #1
  123d18:	e3530000 	cmp	r3, #0
  123d1c:	0a00000e 	beq	123d5c <tcp_receive+0x169c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
  123d20:	e30e3271 	movw	r3, #57969	; 0xe271
  123d24:	e3403014 	movt	r3, #20
  123d28:	e5d33000 	ldrb	r3, [r3]
  123d2c:	e3833020 	orr	r3, r3, #32
  123d30:	e6ef2073 	uxtb	r2, r3
  123d34:	e30e3271 	movw	r3, #57969	; 0xe271
  123d38:	e3403014 	movt	r3, #20
  123d3c:	e5c32000 	strb	r2, [r3]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  123d40:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123d44:	e5933014 	ldr	r3, [r3, #20]
  123d48:	e3530004 	cmp	r3, #4
  123d4c:	1a000002 	bne	123d5c <tcp_receive+0x169c>
              pcb->state = CLOSE_WAIT;
  123d50:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123d54:	e3a02007 	mov	r2, #7
  123d58:	e5832014 	str	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
  123d5c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123d60:	e5932000 	ldr	r2, [r3]
  123d64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123d68:	e5832074 	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
  123d6c:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123d70:	ebffedb3 	bl	11f444 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
  123d74:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123d78:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123d7c:	e3530000 	cmp	r3, #0
  123d80:	0a000007 	beq	123da4 <tcp_receive+0x16e4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  123d84:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123d88:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123d8c:	e593300c 	ldr	r3, [r3, #12]
  123d90:	e5932004 	ldr	r2, [r3, #4]
  123d94:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123d98:	e5933028 	ldr	r3, [r3, #40]	; 0x28
        while (pcb->ooseq != NULL &&
  123d9c:	e1520003 	cmp	r2, r3
  123da0:	0affff62 	beq	123b30 <tcp_receive+0x1470>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
  123da4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123da8:	e5d3301e 	ldrb	r3, [r3, #30]
  123dac:	e2033001 	and	r3, r3, #1
  123db0:	e3530000 	cmp	r3, #0
  123db4:	0a00000c 	beq	123dec <tcp_receive+0x172c>
  123db8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123dbc:	e5d3301e 	ldrb	r3, [r3, #30]
  123dc0:	e3c33001 	bic	r3, r3, #1
  123dc4:	e6ef2073 	uxtb	r2, r3
  123dc8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123dcc:	e5c3201e 	strb	r2, [r3, #30]
  123dd0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123dd4:	e5d3301e 	ldrb	r3, [r3, #30]
  123dd8:	e3833002 	orr	r3, r3, #2
  123ddc:	e6ef2073 	uxtb	r2, r3
  123de0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123de4:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  123de8:	ea00016c 	b	1243a0 <tcp_receive+0x1ce0>
        tcp_ack(pcb);
  123dec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123df0:	e5d3301e 	ldrb	r3, [r3, #30]
  123df4:	e3833001 	orr	r3, r3, #1
  123df8:	e6ef2073 	uxtb	r2, r3
  123dfc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e00:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  123e04:	ea000165 	b	1243a0 <tcp_receive+0x1ce0>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
  123e08:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123e0c:	eb0007e2 	bl	125d9c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
  123e10:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e14:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123e18:	e3530000 	cmp	r3, #0
  123e1c:	1a000006 	bne	123e3c <tcp_receive+0x177c>
          pcb->ooseq = tcp_seg_copy(&inseg);
  123e20:	e30e0244 	movw	r0, #57924	; 0xe244
  123e24:	e3400014 	movt	r0, #20
  123e28:	ebffeda7 	bl	11f4cc <tcp_seg_copy>
  123e2c:	e1a02000 	mov	r2, r0
  123e30:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e34:	e5832074 	str	r2, [r3, #116]	; 0x74
      if (pcb->rcv_nxt == seqno) {
  123e38:	ea000158 	b	1243a0 <tcp_receive+0x1ce0>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
  123e3c:	e3a03000 	mov	r3, #0
  123e40:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  123e44:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e48:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123e4c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  123e50:	ea00013f 	b	124354 <tcp_receive+0x1c94>
            if (seqno == next->tcphdr->seqno) {
  123e54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e58:	e593300c 	ldr	r3, [r3, #12]
  123e5c:	e5932004 	ldr	r2, [r3, #4]
  123e60:	e30e3264 	movw	r3, #57956	; 0xe264
  123e64:	e3403014 	movt	r3, #20
  123e68:	e5933000 	ldr	r3, [r3]
  123e6c:	e1520003 	cmp	r2, r3
  123e70:	1a00001b 	bne	123ee4 <tcp_receive+0x1824>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
  123e74:	e30e3244 	movw	r3, #57924	; 0xe244
  123e78:	e3403014 	movt	r3, #20
  123e7c:	e1d320b8 	ldrh	r2, [r3, #8]
  123e80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e84:	e1d330b8 	ldrh	r3, [r3, #8]
  123e88:	e1520003 	cmp	r2, r3
  123e8c:	9a000134 	bls	124364 <tcp_receive+0x1ca4>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
  123e90:	e30e0244 	movw	r0, #57924	; 0xe244
  123e94:	e3400014 	movt	r0, #20
  123e98:	ebffed8b 	bl	11f4cc <tcp_seg_copy>
  123e9c:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                if (cseg != NULL) {
  123ea0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123ea4:	e3530000 	cmp	r3, #0
  123ea8:	0a00012f 	beq	12436c <tcp_receive+0x1cac>
                  if (prev != NULL) {
  123eac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123eb0:	e3530000 	cmp	r3, #0
  123eb4:	0a000003 	beq	123ec8 <tcp_receive+0x1808>
                    prev->next = cseg;
  123eb8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123ebc:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123ec0:	e5832000 	str	r2, [r3]
  123ec4:	ea000002 	b	123ed4 <tcp_receive+0x1814>
                  } else {
                    pcb->ooseq = cseg;
  123ec8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ecc:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123ed0:	e5832074 	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
  123ed4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123ed8:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123edc:	ebfff989 	bl	122508 <tcp_oos_insert_segment>
                }
                break;
  123ee0:	ea000121 	b	12436c <tcp_receive+0x1cac>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
  123ee4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123ee8:	e3530000 	cmp	r3, #0
  123eec:	1a000016 	bne	123f4c <tcp_receive+0x188c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  123ef0:	e30e3264 	movw	r3, #57956	; 0xe264
  123ef4:	e3403014 	movt	r3, #20
  123ef8:	e5932000 	ldr	r2, [r3]
  123efc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f00:	e593300c 	ldr	r3, [r3, #12]
  123f04:	e5933004 	ldr	r3, [r3, #4]
  123f08:	e0423003 	sub	r3, r2, r3
  123f0c:	e3530000 	cmp	r3, #0
  123f10:	aa00004e 	bge	124050 <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
  123f14:	e30e0244 	movw	r0, #57924	; 0xe244
  123f18:	e3400014 	movt	r0, #20
  123f1c:	ebffed6a 	bl	11f4cc <tcp_seg_copy>
  123f20:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  123f24:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123f28:	e3530000 	cmp	r3, #0
  123f2c:	0a000110 	beq	124374 <tcp_receive+0x1cb4>
                    pcb->ooseq = cseg;
  123f30:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123f34:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123f38:	e5832074 	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
  123f3c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123f40:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123f44:	ebfff96f 	bl	122508 <tcp_oos_insert_segment>
                  }
                  break;
  123f48:	ea000109 	b	124374 <tcp_receive+0x1cb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  123f4c:	e30e3264 	movw	r3, #57956	; 0xe264
  123f50:	e3403014 	movt	r3, #20
  123f54:	e5932000 	ldr	r2, [r3]
  123f58:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123f5c:	e593300c 	ldr	r3, [r3, #12]
  123f60:	e5933004 	ldr	r3, [r3, #4]
  123f64:	e0423003 	sub	r3, r2, r3
  123f68:	e2433001 	sub	r3, r3, #1
  123f6c:	e3530000 	cmp	r3, #0
  123f70:	ba000036 	blt	124050 <tcp_receive+0x1990>
  123f74:	e30e3264 	movw	r3, #57956	; 0xe264
  123f78:	e3403014 	movt	r3, #20
  123f7c:	e5932000 	ldr	r2, [r3]
  123f80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f84:	e593300c 	ldr	r3, [r3, #12]
  123f88:	e5933004 	ldr	r3, [r3, #4]
  123f8c:	e0423003 	sub	r3, r2, r3
  123f90:	e2833001 	add	r3, r3, #1
  123f94:	e3530000 	cmp	r3, #0
  123f98:	ca00002c 	bgt	124050 <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
  123f9c:	e30e0244 	movw	r0, #57924	; 0xe244
  123fa0:	e3400014 	movt	r0, #20
  123fa4:	ebffed48 	bl	11f4cc <tcp_seg_copy>
  123fa8:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  123fac:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123fb0:	e3530000 	cmp	r3, #0
  123fb4:	0a0000f0 	beq	12437c <tcp_receive+0x1cbc>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  123fb8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123fbc:	e593300c 	ldr	r3, [r3, #12]
  123fc0:	e5933004 	ldr	r3, [r3, #4]
  123fc4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  123fc8:	e1d220b8 	ldrh	r2, [r2, #8]
  123fcc:	e0832002 	add	r2, r3, r2
  123fd0:	e30e3264 	movw	r3, #57956	; 0xe264
  123fd4:	e3403014 	movt	r3, #20
  123fd8:	e5933000 	ldr	r3, [r3]
  123fdc:	e0423003 	sub	r3, r2, r3
  123fe0:	e3530000 	cmp	r3, #0
  123fe4:	da000012 	ble	124034 <tcp_receive+0x1974>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  123fe8:	e30e3264 	movw	r3, #57956	; 0xe264
  123fec:	e3403014 	movt	r3, #20
  123ff0:	e5933000 	ldr	r3, [r3]
  123ff4:	e6ff2073 	uxth	r2, r3
  123ff8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123ffc:	e593300c 	ldr	r3, [r3, #12]
  124000:	e5933004 	ldr	r3, [r3, #4]
  124004:	e6ff3073 	uxth	r3, r3
  124008:	e0423003 	sub	r3, r2, r3
  12400c:	e6ff2073 	uxth	r2, r3
  124010:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124014:	e1c320b8 	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
  124018:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12401c:	e5932004 	ldr	r2, [r3, #4]
  124020:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124024:	e1d330b8 	ldrh	r3, [r3, #8]
  124028:	e1a01003 	mov	r1, r3
  12402c:	e1a00002 	mov	r0, r2
  124030:	ebffda46 	bl	11a950 <pbuf_realloc>
                    }
                    prev->next = cseg;
  124034:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124038:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  12403c:	e5832000 	str	r2, [r3]
                    tcp_oos_insert_segment(cseg, next);
  124040:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  124044:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  124048:	ebfff92e 	bl	122508 <tcp_oos_insert_segment>
                  }
                  break;
  12404c:	ea0000ca 	b	12437c <tcp_receive+0x1cbc>
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  124050:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124054:	e5933000 	ldr	r3, [r3]
  124058:	e3530000 	cmp	r3, #0
  12405c:	1a0000b7 	bne	124340 <tcp_receive+0x1c80>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
  124060:	e30e3264 	movw	r3, #57956	; 0xe264
  124064:	e3403014 	movt	r3, #20
  124068:	e5932000 	ldr	r2, [r3]
  12406c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124070:	e593300c 	ldr	r3, [r3, #12]
  124074:	e5933004 	ldr	r3, [r3, #4]
  124078:	e0423003 	sub	r3, r2, r3
              if (next->next == NULL &&
  12407c:	e3530000 	cmp	r3, #0
  124080:	da0000ae 	ble	124340 <tcp_receive+0x1c80>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  124084:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124088:	e593300c 	ldr	r3, [r3, #12]
  12408c:	e1d330bc 	ldrh	r3, [r3, #12]
  124090:	e6ff3073 	uxth	r3, r3
  124094:	e1a00003 	mov	r0, r3
  124098:	ebffc93e 	bl	116598 <lwip_htons>
  12409c:	e1a03000 	mov	r3, r0
  1240a0:	e2033001 	and	r3, r3, #1
  1240a4:	e3530000 	cmp	r3, #0
  1240a8:	1a0000b5 	bne	124384 <tcp_receive+0x1cc4>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
  1240ac:	e30e0244 	movw	r0, #57924	; 0xe244
  1240b0:	e3400014 	movt	r0, #20
  1240b4:	ebffed04 	bl	11f4cc <tcp_seg_copy>
  1240b8:	e1a02000 	mov	r2, r0
  1240bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1240c0:	e5832000 	str	r2, [r3]
                if (next->next != NULL) {
  1240c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1240c8:	e5933000 	ldr	r3, [r3]
  1240cc:	e3530000 	cmp	r3, #0
  1240d0:	0a0000ad 	beq	12438c <tcp_receive+0x1ccc>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  1240d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1240d8:	e593300c 	ldr	r3, [r3, #12]
  1240dc:	e5933004 	ldr	r3, [r3, #4]
  1240e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1240e4:	e1d220b8 	ldrh	r2, [r2, #8]
  1240e8:	e0832002 	add	r2, r3, r2
  1240ec:	e30e3264 	movw	r3, #57956	; 0xe264
  1240f0:	e3403014 	movt	r3, #20
  1240f4:	e5933000 	ldr	r3, [r3]
  1240f8:	e0423003 	sub	r3, r2, r3
  1240fc:	e3530000 	cmp	r3, #0
  124100:	da000012 	ble	124150 <tcp_receive+0x1a90>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  124104:	e30e3264 	movw	r3, #57956	; 0xe264
  124108:	e3403014 	movt	r3, #20
  12410c:	e5933000 	ldr	r3, [r3]
  124110:	e6ff2073 	uxth	r2, r3
  124114:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124118:	e593300c 	ldr	r3, [r3, #12]
  12411c:	e5933004 	ldr	r3, [r3, #4]
  124120:	e6ff3073 	uxth	r3, r3
  124124:	e0423003 	sub	r3, r2, r3
  124128:	e6ff2073 	uxth	r2, r3
  12412c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124130:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
  124134:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124138:	e5932004 	ldr	r2, [r3, #4]
  12413c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124140:	e1d330b8 	ldrh	r3, [r3, #8]
  124144:	e1a01003 	mov	r1, r3
  124148:	e1a00002 	mov	r0, r2
  12414c:	ebffd9ff 	bl	11a950 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
  124150:	e30e326e 	movw	r3, #57966	; 0xe26e
  124154:	e3403014 	movt	r3, #20
  124158:	e1d330b0 	ldrh	r3, [r3]
  12415c:	e1a02003 	mov	r2, r3
  124160:	e30e3264 	movw	r3, #57956	; 0xe264
  124164:	e3403014 	movt	r3, #20
  124168:	e5933000 	ldr	r3, [r3]
  12416c:	e0822003 	add	r2, r2, r3
  124170:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124174:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124178:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  12417c:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  124180:	e0833001 	add	r3, r3, r1
  124184:	e0423003 	sub	r3, r2, r3
  124188:	e3530000 	cmp	r3, #0
  12418c:	da00007e 	ble	12438c <tcp_receive+0x1ccc>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  124190:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124194:	e5933000 	ldr	r3, [r3]
  124198:	e593300c 	ldr	r3, [r3, #12]
  12419c:	e1d330bc 	ldrh	r3, [r3, #12]
  1241a0:	e6ff3073 	uxth	r3, r3
  1241a4:	e1a00003 	mov	r0, r3
  1241a8:	ebffc8fa 	bl	116598 <lwip_htons>
  1241ac:	e1a03000 	mov	r3, r0
  1241b0:	e2033001 	and	r3, r3, #1
  1241b4:	e3530000 	cmp	r3, #0
  1241b8:	0a00001a 	beq	124228 <tcp_receive+0x1b68>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
  1241bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1241c0:	e5933000 	ldr	r3, [r3]
  1241c4:	e593300c 	ldr	r3, [r3, #12]
  1241c8:	e1d330bc 	ldrh	r3, [r3, #12]
  1241cc:	e6ff3073 	uxth	r3, r3
  1241d0:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  1241d4:	e6ff4073 	uxth	r4, r3
  1241d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1241dc:	e5933000 	ldr	r3, [r3]
  1241e0:	e593300c 	ldr	r3, [r3, #12]
  1241e4:	e1d330bc 	ldrh	r3, [r3, #12]
  1241e8:	e6ff3073 	uxth	r3, r3
  1241ec:	e1a00003 	mov	r0, r3
  1241f0:	ebffc8e8 	bl	116598 <lwip_htons>
  1241f4:	e1a03000 	mov	r3, r0
  1241f8:	e203303e 	and	r3, r3, #62	; 0x3e
  1241fc:	e6ff3073 	uxth	r3, r3
  124200:	e1a00003 	mov	r0, r3
  124204:	ebffc8e3 	bl	116598 <lwip_htons>
  124208:	e1a03000 	mov	r3, r0
  12420c:	e1a02003 	mov	r2, r3
  124210:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124214:	e5933000 	ldr	r3, [r3]
  124218:	e593300c 	ldr	r3, [r3, #12]
  12421c:	e1842002 	orr	r2, r4, r2
  124220:	e6ff2072 	uxth	r2, r2
  124224:	e1c320bc 	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
  124228:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12422c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124230:	e6ff2073 	uxth	r2, r3
  124234:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124238:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  12423c:	e0823003 	add	r3, r2, r3
  124240:	e6ff1073 	uxth	r1, r3
  124244:	e30e3264 	movw	r3, #57956	; 0xe264
  124248:	e3403014 	movt	r3, #20
  12424c:	e5933000 	ldr	r3, [r3]
  124250:	e6ff2073 	uxth	r2, r3
  124254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124258:	e5933000 	ldr	r3, [r3]
  12425c:	e0412002 	sub	r2, r1, r2
  124260:	e6ff2072 	uxth	r2, r2
  124264:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  124268:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12426c:	e5933000 	ldr	r3, [r3]
  124270:	e5932004 	ldr	r2, [r3, #4]
  124274:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124278:	e5933000 	ldr	r3, [r3]
  12427c:	e1d330b8 	ldrh	r3, [r3, #8]
  124280:	e1a01003 	mov	r1, r3
  124284:	e1a00002 	mov	r0, r2
  124288:	ebffd9b0 	bl	11a950 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
  12428c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124290:	e5933000 	ldr	r3, [r3]
  124294:	e1d340b8 	ldrh	r4, [r3, #8]
  124298:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12429c:	e5933000 	ldr	r3, [r3]
  1242a0:	e593300c 	ldr	r3, [r3, #12]
  1242a4:	e1d330bc 	ldrh	r3, [r3, #12]
  1242a8:	e6ff3073 	uxth	r3, r3
  1242ac:	e1a00003 	mov	r0, r3
  1242b0:	ebffc8b8 	bl	116598 <lwip_htons>
  1242b4:	e1a03000 	mov	r3, r0
  1242b8:	e2033003 	and	r3, r3, #3
  1242bc:	e3530000 	cmp	r3, #0
  1242c0:	0a000001 	beq	1242cc <tcp_receive+0x1c0c>
  1242c4:	e3a03001 	mov	r3, #1
  1242c8:	ea000000 	b	1242d0 <tcp_receive+0x1c10>
  1242cc:	e3a03000 	mov	r3, #0
  1242d0:	e0833004 	add	r3, r3, r4
  1242d4:	e6ff2073 	uxth	r2, r3
  1242d8:	e30e326e 	movw	r3, #57966	; 0xe26e
  1242dc:	e3403014 	movt	r3, #20
  1242e0:	e1c320b0 	strh	r2, [r3]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  1242e4:	e30e326e 	movw	r3, #57966	; 0xe26e
  1242e8:	e3403014 	movt	r3, #20
  1242ec:	e1d330b0 	ldrh	r3, [r3]
  1242f0:	e1a02003 	mov	r2, r3
  1242f4:	e30e3264 	movw	r3, #57956	; 0xe264
  1242f8:	e3403014 	movt	r3, #20
  1242fc:	e5933000 	ldr	r3, [r3]
  124300:	e0822003 	add	r2, r2, r3
  124304:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124308:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12430c:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  124310:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  124314:	e0833001 	add	r3, r3, r1
  124318:	e1520003 	cmp	r2, r3
  12431c:	0a00001a 	beq	12438c <tcp_receive+0x1ccc>
  124320:	e308050c 	movw	r0, #34060	; 0x850c
  124324:	e3400014 	movt	r0, #20
  124328:	ebff7b79 	bl	103114 <rt_kprintf>
  12432c:	e3001668 	movw	r1, #1640	; 0x668
  124330:	e308027c 	movw	r0, #33404	; 0x827c
  124334:	e3400014 	movt	r0, #20
  124338:	ebff9b5d 	bl	10b0b4 <sys_arch_assert>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
  12433c:	ea000012 	b	12438c <tcp_receive+0x1ccc>
              }
            }
            prev = next;
  124340:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124344:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  124348:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12434c:	e5933000 	ldr	r3, [r3]
  124350:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124354:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124358:	e3530000 	cmp	r3, #0
  12435c:	1afffebc 	bne	123e54 <tcp_receive+0x1794>
      if (pcb->rcv_nxt == seqno) {
  124360:	ea00000e 	b	1243a0 <tcp_receive+0x1ce0>
                break;
  124364:	e320f000 	nop	{0}
  124368:	ea00000c 	b	1243a0 <tcp_receive+0x1ce0>
                break;
  12436c:	e320f000 	nop	{0}
  124370:	ea00000a 	b	1243a0 <tcp_receive+0x1ce0>
                  break;
  124374:	e320f000 	nop	{0}
  124378:	ea000008 	b	1243a0 <tcp_receive+0x1ce0>
                  break;
  12437c:	e320f000 	nop	{0}
  124380:	ea000006 	b	1243a0 <tcp_receive+0x1ce0>
                  break;
  124384:	e320f000 	nop	{0}
  124388:	ea000004 	b	1243a0 <tcp_receive+0x1ce0>
                break;
  12438c:	e320f000 	nop	{0}
      if (pcb->rcv_nxt == seqno) {
  124390:	ea000002 	b	1243a0 <tcp_receive+0x1ce0>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
  124394:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  124398:	eb00067f 	bl	125d9c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  12439c:	ea00001b 	b	124410 <tcp_receive+0x1d50>
  1243a0:	ea00001a 	b	124410 <tcp_receive+0x1d50>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
  1243a4:	e30e3264 	movw	r3, #57956	; 0xe264
  1243a8:	e3403014 	movt	r3, #20
  1243ac:	e5932000 	ldr	r2, [r3]
  1243b0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1243b4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1243b8:	e0423003 	sub	r3, r2, r3
  1243bc:	e3530000 	cmp	r3, #0
  1243c0:	ba00000b 	blt	1243f4 <tcp_receive+0x1d34>
  1243c4:	e30e3264 	movw	r3, #57956	; 0xe264
  1243c8:	e3403014 	movt	r3, #20
  1243cc:	e5932000 	ldr	r2, [r3]
  1243d0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1243d4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1243d8:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  1243dc:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1243e0:	e0833001 	add	r3, r3, r1
  1243e4:	e0423003 	sub	r3, r2, r3
  1243e8:	e2833001 	add	r3, r3, #1
  1243ec:	e3530000 	cmp	r3, #0
  1243f0:	da000006 	ble	124410 <tcp_receive+0x1d50>
      tcp_ack_now(pcb);
  1243f4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1243f8:	e5d3301e 	ldrb	r3, [r3, #30]
  1243fc:	e3833002 	orr	r3, r3, #2
  124400:	e6ef2073 	uxtb	r2, r3
  124404:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124408:	e5c3201e 	strb	r2, [r3, #30]
    }
  }
}
  12440c:	eaffffff 	b	124410 <tcp_receive+0x1d50>
  124410:	e320f000 	nop	{0}
  124414:	e24bd010 	sub	sp, fp, #16
  124418:	e8bd8870 	pop	{r4, r5, r6, fp, pc}

0012441c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  12441c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  124420:	e28db000 	add	fp, sp, #0
  124424:	e24dd00c 	sub	sp, sp, #12
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
  124428:	e30e325c 	movw	r3, #57948	; 0xe25c
  12442c:	e3403014 	movt	r3, #20
  124430:	e5933000 	ldr	r3, [r3]
  124434:	e3530000 	cmp	r3, #0
  124438:	0a000007 	beq	12445c <tcp_getoptbyte+0x40>
  12443c:	e30e3260 	movw	r3, #57952	; 0xe260
  124440:	e3403014 	movt	r3, #20
  124444:	e1d320b0 	ldrh	r2, [r3]
  124448:	e30e325a 	movw	r3, #57946	; 0xe25a
  12444c:	e3403014 	movt	r3, #20
  124450:	e1d330b0 	ldrh	r3, [r3]
  124454:	e1520003 	cmp	r2, r3
  124458:	2a000010 	bcs	1244a0 <tcp_getoptbyte+0x84>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
  12445c:	e30e3254 	movw	r3, #57940	; 0xe254
  124460:	e3403014 	movt	r3, #20
  124464:	e5933000 	ldr	r3, [r3]
  124468:	e2833014 	add	r3, r3, #20
  12446c:	e50b300c 	str	r3, [fp, #-12]
    return opts[tcp_optidx++];
  124470:	e30e3260 	movw	r3, #57952	; 0xe260
  124474:	e3403014 	movt	r3, #20
  124478:	e1d320b0 	ldrh	r2, [r3]
  12447c:	e2823001 	add	r3, r2, #1
  124480:	e6ff1073 	uxth	r1, r3
  124484:	e30e3260 	movw	r3, #57952	; 0xe260
  124488:	e3403014 	movt	r3, #20
  12448c:	e1c310b0 	strh	r1, [r3]
  124490:	e51b300c 	ldr	r3, [fp, #-12]
  124494:	e0833002 	add	r3, r3, r2
  124498:	e5d33000 	ldrb	r3, [r3]
  12449c:	ea000014 	b	1244f4 <tcp_getoptbyte+0xd8>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
  1244a0:	e30e3260 	movw	r3, #57952	; 0xe260
  1244a4:	e3403014 	movt	r3, #20
  1244a8:	e1d320b0 	ldrh	r2, [r3]
  1244ac:	e2823001 	add	r3, r2, #1
  1244b0:	e6ff1073 	uxth	r1, r3
  1244b4:	e30e3260 	movw	r3, #57952	; 0xe260
  1244b8:	e3403014 	movt	r3, #20
  1244bc:	e1c310b0 	strh	r1, [r3]
  1244c0:	e6ef2072 	uxtb	r2, r2
  1244c4:	e30e325a 	movw	r3, #57946	; 0xe25a
  1244c8:	e3403014 	movt	r3, #20
  1244cc:	e1d330b0 	ldrh	r3, [r3]
  1244d0:	e6ef3073 	uxtb	r3, r3
  1244d4:	e0423003 	sub	r3, r2, r3
  1244d8:	e54b3005 	strb	r3, [fp, #-5]
    return tcphdr_opt2[idx];
  1244dc:	e30e325c 	movw	r3, #57948	; 0xe25c
  1244e0:	e3403014 	movt	r3, #20
  1244e4:	e5932000 	ldr	r2, [r3]
  1244e8:	e55b3005 	ldrb	r3, [fp, #-5]
  1244ec:	e0823003 	add	r3, r2, r3
  1244f0:	e5d33000 	ldrb	r3, [r3]
  }
}
  1244f4:	e1a00003 	mov	r0, r3
  1244f8:	e28bd000 	add	sp, fp, #0
  1244fc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  124500:	e12fff1e 	bx	lr

00124504 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  124504:	e92d4800 	push	{fp, lr}
  124508:	e28db004 	add	fp, sp, #4
  12450c:	e24dd010 	sub	sp, sp, #16
  124510:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
  124514:	e30e3258 	movw	r3, #57944	; 0xe258
  124518:	e3403014 	movt	r3, #20
  12451c:	e1d330b0 	ldrh	r3, [r3]
  124520:	e3530000 	cmp	r3, #0
  124524:	0a000054 	beq	12467c <tcp_parseopt+0x178>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  124528:	e30e3260 	movw	r3, #57952	; 0xe260
  12452c:	e3403014 	movt	r3, #20
  124530:	e3a02000 	mov	r2, #0
  124534:	e1c320b0 	strh	r2, [r3]
  124538:	ea000041 	b	124644 <tcp_parseopt+0x140>
      u8_t opt = tcp_getoptbyte();
  12453c:	ebffffb6 	bl	12441c <tcp_getoptbyte>
  124540:	e1a03000 	mov	r3, r0
  124544:	e54b3005 	strb	r3, [fp, #-5]
      switch (opt) {
  124548:	e55b3005 	ldrb	r3, [fp, #-5]
  12454c:	e3530001 	cmp	r3, #1
  124550:	0a00003b 	beq	124644 <tcp_parseopt+0x140>
  124554:	e3530002 	cmp	r3, #2
  124558:	0a000002 	beq	124568 <tcp_parseopt+0x64>
  12455c:	e3530000 	cmp	r3, #0
  124560:	0a000040 	beq	124668 <tcp_parseopt+0x164>
  124564:	ea000024 	b	1245fc <tcp_parseopt+0xf8>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
  124568:	ebffffab 	bl	12441c <tcp_getoptbyte>
  12456c:	e1a03000 	mov	r3, r0
  124570:	e3530004 	cmp	r3, #4
  124574:	1a00003d 	bne	124670 <tcp_parseopt+0x16c>
  124578:	e30e3260 	movw	r3, #57952	; 0xe260
  12457c:	e3403014 	movt	r3, #20
  124580:	e1d330b0 	ldrh	r3, [r3]
  124584:	e2832002 	add	r2, r3, #2
  124588:	e30e3258 	movw	r3, #57944	; 0xe258
  12458c:	e3403014 	movt	r3, #20
  124590:	e1d330b0 	ldrh	r3, [r3]
  124594:	e1520003 	cmp	r2, r3
  124598:	ca000034 	bgt	124670 <tcp_parseopt+0x16c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
  12459c:	ebffff9e 	bl	12441c <tcp_getoptbyte>
  1245a0:	e1a03000 	mov	r3, r0
  1245a4:	e6ff3073 	uxth	r3, r3
  1245a8:	e1a03403 	lsl	r3, r3, #8
  1245ac:	e14b30b8 	strh	r3, [fp, #-8]
        mss |= tcp_getoptbyte();
  1245b0:	ebffff99 	bl	12441c <tcp_getoptbyte>
  1245b4:	e1a03000 	mov	r3, r0
  1245b8:	e6ff2073 	uxth	r2, r3
  1245bc:	e15b30b8 	ldrh	r3, [fp, #-8]
  1245c0:	e1823003 	orr	r3, r2, r3
  1245c4:	e14b30b8 	strh	r3, [fp, #-8]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  1245c8:	e15b30b8 	ldrh	r3, [fp, #-8]
  1245cc:	e30025b4 	movw	r2, #1460	; 0x5b4
  1245d0:	e1530002 	cmp	r3, r2
  1245d4:	8a000004 	bhi	1245ec <tcp_parseopt+0xe8>
  1245d8:	e15b30b8 	ldrh	r3, [fp, #-8]
  1245dc:	e3530000 	cmp	r3, #0
  1245e0:	0a000001 	beq	1245ec <tcp_parseopt+0xe8>
  1245e4:	e15b30b8 	ldrh	r3, [fp, #-8]
  1245e8:	ea000000 	b	1245f0 <tcp_parseopt+0xec>
  1245ec:	e30035b4 	movw	r3, #1460	; 0x5b4
  1245f0:	e51b2010 	ldr	r2, [fp, #-16]
  1245f4:	e1c233b6 	strh	r3, [r2, #54]	; 0x36
        break;
  1245f8:	ea000011 	b	124644 <tcp_parseopt+0x140>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
  1245fc:	ebffff86 	bl	12441c <tcp_getoptbyte>
  124600:	e1a03000 	mov	r3, r0
  124604:	e54b3009 	strb	r3, [fp, #-9]
        if (data < 2) {
  124608:	e55b3009 	ldrb	r3, [fp, #-9]
  12460c:	e3530001 	cmp	r3, #1
  124610:	9a000018 	bls	124678 <tcp_parseopt+0x174>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
  124614:	e55b3009 	ldrb	r3, [fp, #-9]
  124618:	e6ff2073 	uxth	r2, r3
  12461c:	e30e3260 	movw	r3, #57952	; 0xe260
  124620:	e3403014 	movt	r3, #20
  124624:	e1d330b0 	ldrh	r3, [r3]
  124628:	e0823003 	add	r3, r2, r3
  12462c:	e6ff3073 	uxth	r3, r3
  124630:	e2433002 	sub	r3, r3, #2
  124634:	e6ff2073 	uxth	r2, r3
  124638:	e30e3260 	movw	r3, #57952	; 0xe260
  12463c:	e3403014 	movt	r3, #20
  124640:	e1c320b0 	strh	r2, [r3]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  124644:	e30e3260 	movw	r3, #57952	; 0xe260
  124648:	e3403014 	movt	r3, #20
  12464c:	e1d320b0 	ldrh	r2, [r3]
  124650:	e30e3258 	movw	r3, #57944	; 0xe258
  124654:	e3403014 	movt	r3, #20
  124658:	e1d330b0 	ldrh	r3, [r3]
  12465c:	e1520003 	cmp	r2, r3
  124660:	3affffb5 	bcc	12453c <tcp_parseopt+0x38>
  124664:	ea000004 	b	12467c <tcp_parseopt+0x178>
        return;
  124668:	e320f000 	nop	{0}
  12466c:	ea000002 	b	12467c <tcp_parseopt+0x178>
          return;
  124670:	e320f000 	nop	{0}
  124674:	ea000000 	b	12467c <tcp_parseopt+0x178>
          return;
  124678:	e320f000 	nop	{0}
      }
    }
  }
}
  12467c:	e24bd004 	sub	sp, fp, #4
  124680:	e8bd8800 	pop	{fp, pc}

00124684 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  124684:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  124688:	e28db000 	add	fp, sp, #0
  recv_flags |= TF_CLOSED;
  12468c:	e30e3271 	movw	r3, #57969	; 0xe271
  124690:	e3403014 	movt	r3, #20
  124694:	e5d33000 	ldrb	r3, [r3]
  124698:	e3833010 	orr	r3, r3, #16
  12469c:	e6ef2073 	uxtb	r2, r3
  1246a0:	e30e3271 	movw	r3, #57969	; 0xe271
  1246a4:	e3403014 	movt	r3, #20
  1246a8:	e5c32000 	strb	r2, [r3]
}
  1246ac:	e320f000 	nop	{0}
  1246b0:	e28bd000 	add	sp, fp, #0
  1246b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1246b8:	e12fff1e 	bx	lr

001246bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
  1246bc:	e92d4800 	push	{fp, lr}
  1246c0:	e28db004 	add	fp, sp, #4
  1246c4:	e24dd018 	sub	sp, sp, #24
  1246c8:	e50b0010 	str	r0, [fp, #-16]
  1246cc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1246d0:	e1a03001 	mov	r3, r1
  1246d4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  1246d8:	e1a03002 	mov	r3, r2
  1246dc:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  1246e0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  1246e4:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  1246e8:	e0823003 	add	r3, r2, r3
  1246ec:	e6ff3073 	uxth	r3, r3
  1246f0:	e2833014 	add	r3, r3, #20
  1246f4:	e6ff3073 	uxth	r3, r3
  1246f8:	e3a02000 	mov	r2, #0
  1246fc:	e1a01003 	mov	r1, r3
  124700:	e3a00001 	mov	r0, #1
  124704:	ebffd6d3 	bl	11a258 <pbuf_alloc>
  124708:	e50b0008 	str	r0, [fp, #-8]
  if (p != NULL) {
  12470c:	e51b3008 	ldr	r3, [fp, #-8]
  124710:	e3530000 	cmp	r3, #0
  124714:	0a000052 	beq	124864 <tcp_output_alloc_header+0x1a8>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  124718:	e51b3008 	ldr	r3, [fp, #-8]
  12471c:	e1d330ba 	ldrh	r3, [r3, #10]
  124720:	e1a02003 	mov	r2, r3
  124724:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124728:	e2833014 	add	r3, r3, #20
  12472c:	e1520003 	cmp	r2, r3
  124730:	aa000006 	bge	124750 <tcp_output_alloc_header+0x94>
  124734:	e30805c8 	movw	r0, #34248	; 0x85c8
  124738:	e3400014 	movt	r0, #20
  12473c:	ebff7a74 	bl	103114 <rt_kprintf>
  124740:	e3a01073 	mov	r1, #115	; 0x73
  124744:	e30805f8 	movw	r0, #34296	; 0x85f8
  124748:	e3400014 	movt	r0, #20
  12474c:	ebff9a58 	bl	10b0b4 <sys_arch_assert>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
  124750:	e51b3008 	ldr	r3, [fp, #-8]
  124754:	e5933004 	ldr	r3, [r3, #4]
  124758:	e50b300c 	str	r3, [fp, #-12]
    tcphdr->src = lwip_htons(pcb->local_port);
  12475c:	e51b3010 	ldr	r3, [fp, #-16]
  124760:	e1d331ba 	ldrh	r3, [r3, #26]
  124764:	e1a00003 	mov	r0, r3
  124768:	ebffc78a 	bl	116598 <lwip_htons>
  12476c:	e1a03000 	mov	r3, r0
  124770:	e1a02003 	mov	r2, r3
  124774:	e51b300c 	ldr	r3, [fp, #-12]
  124778:	e1c320b0 	strh	r2, [r3]
    tcphdr->dest = lwip_htons(pcb->remote_port);
  12477c:	e51b3010 	ldr	r3, [fp, #-16]
  124780:	e1d331bc 	ldrh	r3, [r3, #28]
  124784:	e1a00003 	mov	r0, r3
  124788:	ebffc782 	bl	116598 <lwip_htons>
  12478c:	e1a03000 	mov	r3, r0
  124790:	e1a02003 	mov	r2, r3
  124794:	e51b300c 	ldr	r3, [fp, #-12]
  124798:	e1c320b2 	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
  12479c:	e51b300c 	ldr	r3, [fp, #-12]
  1247a0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1247a4:	e5832004 	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  1247a8:	e51b3010 	ldr	r3, [fp, #-16]
  1247ac:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1247b0:	e1a00003 	mov	r0, r3
  1247b4:	ebffc783 	bl	1165c8 <lwip_htonl>
  1247b8:	e1a02000 	mov	r2, r0
  1247bc:	e51b300c 	ldr	r3, [fp, #-12]
  1247c0:	e5832008 	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  1247c4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1247c8:	e1a03123 	lsr	r3, r3, #2
  1247cc:	e6ff3073 	uxth	r3, r3
  1247d0:	e2833005 	add	r3, r3, #5
  1247d4:	e6ff3073 	uxth	r3, r3
  1247d8:	e1a03603 	lsl	r3, r3, #12
  1247dc:	e6ff3073 	uxth	r3, r3
  1247e0:	e3833010 	orr	r3, r3, #16
  1247e4:	e6ff3073 	uxth	r3, r3
  1247e8:	e1a00003 	mov	r0, r3
  1247ec:	ebffc769 	bl	116598 <lwip_htons>
  1247f0:	e1a03000 	mov	r3, r0
  1247f4:	e1a02003 	mov	r2, r3
  1247f8:	e51b300c 	ldr	r3, [fp, #-12]
  1247fc:	e1c320bc 	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  124800:	e51b3010 	ldr	r3, [fp, #-16]
  124804:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  124808:	e1a00003 	mov	r0, r3
  12480c:	ebffc761 	bl	116598 <lwip_htons>
  124810:	e1a03000 	mov	r3, r0
  124814:	e1a02003 	mov	r2, r3
  124818:	e51b300c 	ldr	r3, [fp, #-12]
  12481c:	e1c320be 	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
  124820:	e51b300c 	ldr	r3, [fp, #-12]
  124824:	e3a02000 	mov	r2, #0
  124828:	e5c32010 	strb	r2, [r3, #16]
  12482c:	e3a02000 	mov	r2, #0
  124830:	e5c32011 	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
  124834:	e51b300c 	ldr	r3, [fp, #-12]
  124838:	e3a02000 	mov	r2, #0
  12483c:	e5c32012 	strb	r2, [r3, #18]
  124840:	e3a02000 	mov	r2, #0
  124844:	e5c32013 	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  124848:	e51b3010 	ldr	r3, [fp, #-16]
  12484c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124850:	e51b2010 	ldr	r2, [fp, #-16]
  124854:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  124858:	e0832002 	add	r2, r3, r2
  12485c:	e51b3010 	ldr	r3, [fp, #-16]
  124860:	e5832030 	str	r2, [r3, #48]	; 0x30
  }
  return p;
  124864:	e51b3008 	ldr	r3, [fp, #-8]
}
  124868:	e1a00003 	mov	r0, r3
  12486c:	e24bd004 	sub	sp, fp, #4
  124870:	e8bd8800 	pop	{fp, pc}

00124874 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
  124874:	e92d4810 	push	{r4, fp, lr}
  124878:	e28db008 	add	fp, sp, #8
  12487c:	e24dd014 	sub	sp, sp, #20
  124880:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
  124884:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124888:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12488c:	e3530000 	cmp	r3, #0
  124890:	0a000029 	beq	12493c <tcp_send_fin+0xc8>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124894:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124898:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12489c:	e50b3010 	str	r3, [fp, #-16]
  1248a0:	ea000002 	b	1248b0 <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
  1248a4:	e51b3010 	ldr	r3, [fp, #-16]
  1248a8:	e5933000 	ldr	r3, [r3]
  1248ac:	e50b3010 	str	r3, [fp, #-16]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  1248b0:	e51b3010 	ldr	r3, [fp, #-16]
  1248b4:	e5933000 	ldr	r3, [r3]
  1248b8:	e3530000 	cmp	r3, #0
  1248bc:	1afffff8 	bne	1248a4 <tcp_send_fin+0x30>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  1248c0:	e51b3010 	ldr	r3, [fp, #-16]
  1248c4:	e593300c 	ldr	r3, [r3, #12]
  1248c8:	e1d330bc 	ldrh	r3, [r3, #12]
  1248cc:	e6ff3073 	uxth	r3, r3
  1248d0:	e1a00003 	mov	r0, r3
  1248d4:	ebffc72f 	bl	116598 <lwip_htons>
  1248d8:	e1a03000 	mov	r3, r0
  1248dc:	e2033007 	and	r3, r3, #7
  1248e0:	e3530000 	cmp	r3, #0
  1248e4:	1a000014 	bne	12493c <tcp_send_fin+0xc8>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  1248e8:	e51b3010 	ldr	r3, [fp, #-16]
  1248ec:	e593300c 	ldr	r3, [r3, #12]
  1248f0:	e1d330bc 	ldrh	r3, [r3, #12]
  1248f4:	e6ff4073 	uxth	r4, r3
  1248f8:	e3a00001 	mov	r0, #1
  1248fc:	ebffc725 	bl	116598 <lwip_htons>
  124900:	e1a03000 	mov	r3, r0
  124904:	e1a02003 	mov	r2, r3
  124908:	e51b3010 	ldr	r3, [fp, #-16]
  12490c:	e593300c 	ldr	r3, [r3, #12]
  124910:	e1842002 	orr	r2, r4, r2
  124914:	e6ff2072 	uxth	r2, r2
  124918:	e1c320bc 	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
  12491c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124920:	e5d3301e 	ldrb	r3, [r3, #30]
  124924:	e3833020 	orr	r3, r3, #32
  124928:	e6ef2073 	uxtb	r2, r3
  12492c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124930:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_OK;
  124934:	e3a03000 	mov	r3, #0
  124938:	ea000003 	b	12494c <tcp_send_fin+0xd8>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
  12493c:	e3a01001 	mov	r1, #1
  124940:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  124944:	eb000426 	bl	1259e4 <tcp_enqueue_flags>
  124948:	e1a03000 	mov	r3, r0
}
  12494c:	e1a00003 	mov	r0, r3
  124950:	e24bd008 	sub	sp, fp, #8
  124954:	e8bd8810 	pop	{r4, fp, pc}

00124958 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  124958:	e92d4810 	push	{r4, fp, lr}
  12495c:	e28db008 	add	fp, sp, #8
  124960:	e24dd01c 	sub	sp, sp, #28
  124964:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  124968:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12496c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  124970:	e1a03002 	mov	r3, r2
  124974:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
  124978:	e5db3004 	ldrb	r3, [fp, #4]
  12497c:	e1a03103 	lsl	r3, r3, #2
  124980:	e6ef3073 	uxtb	r3, r3
  124984:	e2033004 	and	r3, r3, #4
  124988:	e54b300d 	strb	r3, [fp, #-13]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  12498c:	e3a020b2 	mov	r2, #178	; 0xb2
  124990:	e30815f8 	movw	r1, #34296	; 0x85f8
  124994:	e3401014 	movt	r1, #20
  124998:	e3a00004 	mov	r0, #4
  12499c:	ebffd1be 	bl	11909c <memp_malloc_fn>
  1249a0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1249a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1249a8:	e3530000 	cmp	r3, #0
  1249ac:	1a000003 	bne	1249c0 <tcp_create_segment+0x68>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
  1249b0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1249b4:	ebffd92e 	bl	11ae74 <pbuf_free>
    return NULL;
  1249b8:	e3a03000 	mov	r3, #0
  1249bc:	ea000063 	b	124b50 <tcp_create_segment+0x1f8>
  }
  seg->flags = optflags;
  1249c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1249c4:	e5db2004 	ldrb	r2, [fp, #4]
  1249c8:	e5c3200a 	strb	r2, [r3, #10]
  seg->next = NULL;
  1249cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1249d0:	e3a02000 	mov	r2, #0
  1249d4:	e5832000 	str	r2, [r3]
  seg->p = p;
  1249d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1249dc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1249e0:	e5832004 	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  1249e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1249e8:	e1d320b8 	ldrh	r2, [r3, #8]
  1249ec:	e55b300d 	ldrb	r3, [fp, #-13]
  1249f0:	e6ff3073 	uxth	r3, r3
  1249f4:	e1520003 	cmp	r2, r3
  1249f8:	2a000006 	bcs	124a18 <tcp_create_segment+0xc0>
  1249fc:	e3080628 	movw	r0, #34344	; 0x8628
  124a00:	e3400014 	movt	r0, #20
  124a04:	ebff79c2 	bl	103114 <rt_kprintf>
  124a08:	e3a010ba 	mov	r1, #186	; 0xba
  124a0c:	e30805f8 	movw	r0, #34296	; 0x85f8
  124a10:	e3400014 	movt	r0, #20
  124a14:	ebff99a6 	bl	10b0b4 <sys_arch_assert>
  seg->len = p->tot_len - optlen;
  124a18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124a1c:	e1d320b8 	ldrh	r2, [r3, #8]
  124a20:	e55b300d 	ldrb	r3, [fp, #-13]
  124a24:	e6ff3073 	uxth	r3, r3
  124a28:	e0423003 	sub	r3, r2, r3
  124a2c:	e6ff2073 	uxth	r2, r3
  124a30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124a34:	e1c320b8 	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  124a38:	e3a01014 	mov	r1, #20
  124a3c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  124a40:	ebffd8ed 	bl	11adfc <pbuf_header>
  124a44:	e1a03000 	mov	r3, r0
  124a48:	e3530000 	cmp	r3, #0
  124a4c:	0a00000b 	beq	124a80 <tcp_create_segment+0x128>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
  124a50:	e30c3a48 	movw	r3, #51784	; 0xca48
  124a54:	e3403015 	movt	r3, #21
  124a58:	e1d33cb0 	ldrh	r3, [r3, #192]	; 0xc0
  124a5c:	e2833001 	add	r3, r3, #1
  124a60:	e6ff2073 	uxth	r2, r3
  124a64:	e30c3a48 	movw	r3, #51784	; 0xca48
  124a68:	e3403015 	movt	r3, #21
  124a6c:	e1c32cb0 	strh	r2, [r3, #192]	; 0xc0
    tcp_seg_free(seg);
  124a70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  124a74:	ebffea72 	bl	11f444 <tcp_seg_free>
    return NULL;
  124a78:	e3a03000 	mov	r3, #0
  124a7c:	ea000033 	b	124b50 <tcp_create_segment+0x1f8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  124a80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124a84:	e5933004 	ldr	r3, [r3, #4]
  124a88:	e5932004 	ldr	r2, [r3, #4]
  124a8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124a90:	e583200c 	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
  124a94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124a98:	e1d321ba 	ldrh	r2, [r3, #26]
  124a9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124aa0:	e593400c 	ldr	r4, [r3, #12]
  124aa4:	e1a00002 	mov	r0, r2
  124aa8:	ebffc6ba 	bl	116598 <lwip_htons>
  124aac:	e1a03000 	mov	r3, r0
  124ab0:	e1c430b0 	strh	r3, [r4]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
  124ab4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124ab8:	e1d321bc 	ldrh	r2, [r3, #28]
  124abc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ac0:	e593400c 	ldr	r4, [r3, #12]
  124ac4:	e1a00002 	mov	r0, r2
  124ac8:	ebffc6b2 	bl	116598 <lwip_htons>
  124acc:	e1a03000 	mov	r3, r0
  124ad0:	e1c430b2 	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
  124ad4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ad8:	e593400c 	ldr	r4, [r3, #12]
  124adc:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  124ae0:	ebffc6b8 	bl	1165c8 <lwip_htonl>
  124ae4:	e1a03000 	mov	r3, r0
  124ae8:	e5843004 	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  124aec:	e55b300d 	ldrb	r3, [fp, #-13]
  124af0:	e1a03123 	lsr	r3, r3, #2
  124af4:	e6ef3073 	uxtb	r3, r3
  124af8:	e6ff3073 	uxth	r3, r3
  124afc:	e2833005 	add	r3, r3, #5
  124b00:	e6ff3073 	uxth	r3, r3
  124b04:	e1a03603 	lsl	r3, r3, #12
  124b08:	e6ff2073 	uxth	r2, r3
  124b0c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  124b10:	e6ff3073 	uxth	r3, r3
  124b14:	e1823003 	orr	r3, r2, r3
  124b18:	e6ff2073 	uxth	r2, r3
  124b1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124b20:	e593400c 	ldr	r4, [r3, #12]
  124b24:	e1a00002 	mov	r0, r2
  124b28:	ebffc69a 	bl	116598 <lwip_htons>
  124b2c:	e1a03000 	mov	r3, r0
  124b30:	e1c430bc 	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  124b34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124b38:	e593300c 	ldr	r3, [r3, #12]
  124b3c:	e3a02000 	mov	r2, #0
  124b40:	e5c32012 	strb	r2, [r3, #18]
  124b44:	e3a02000 	mov	r2, #0
  124b48:	e5c32013 	strb	r2, [r3, #19]
  return seg;
  124b4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  124b50:	e1a00003 	mov	r0, r3
  124b54:	e24bd008 	sub	sp, fp, #8
  124b58:	e8bd8810 	pop	{r4, fp, pc}

00124b5c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
  124b5c:	e92d4800 	push	{fp, lr}
  124b60:	e28db004 	add	fp, sp, #4
  124b64:	e24dd018 	sub	sp, sp, #24
  124b68:	e50b0010 	str	r0, [fp, #-16]
  124b6c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124b70:	e1a03001 	mov	r3, r1
  124b74:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  124b78:	e1a03002 	mov	r3, r2
  124b7c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *p;
  u16_t alloc = length;
  124b80:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124b84:	e14b30b6 	strh	r3, [fp, #-6]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
  124b88:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124b8c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  124b90:	e1520003 	cmp	r2, r3
  124b94:	2a00001c 	bcs	124c0c <tcp_pbuf_prealloc+0xb0>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  124b98:	e5db3008 	ldrb	r3, [fp, #8]
  124b9c:	e2033002 	and	r3, r3, #2
  124ba0:	e3530000 	cmp	r3, #0
  124ba4:	1a00000f 	bne	124be8 <tcp_pbuf_prealloc+0x8c>
        (!(pcb->flags & TF_NODELAY) &&
  124ba8:	e59b3004 	ldr	r3, [fp, #4]
  124bac:	e5d3301e 	ldrb	r3, [r3, #30]
  124bb0:	e2033040 	and	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  124bb4:	e3530000 	cmp	r3, #0
  124bb8:	1a000013 	bne	124c0c <tcp_pbuf_prealloc+0xb0>
        (!(pcb->flags & TF_NODELAY) &&
  124bbc:	e5db300c 	ldrb	r3, [fp, #12]
  124bc0:	e3530000 	cmp	r3, #0
  124bc4:	0a000007 	beq	124be8 <tcp_pbuf_prealloc+0x8c>
         (!first_seg ||
          pcb->unsent != NULL ||
  124bc8:	e59b3004 	ldr	r3, [fp, #4]
  124bcc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
  124bd0:	e3530000 	cmp	r3, #0
  124bd4:	1a000003 	bne	124be8 <tcp_pbuf_prealloc+0x8c>
          pcb->unacked != NULL))) {
  124bd8:	e59b3004 	ldr	r3, [fp, #4]
  124bdc:	e5933070 	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
  124be0:	e3530000 	cmp	r3, #0
  124be4:	0a000008 	beq	124c0c <tcp_pbuf_prealloc+0xb0>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
  124be8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124bec:	e2833e5b 	add	r3, r3, #1456	; 0x5b0
  124bf0:	e2833007 	add	r3, r3, #7
  124bf4:	e3c32003 	bic	r2, r3, #3
  124bf8:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  124bfc:	e1520003 	cmp	r2, r3
  124c00:	31a03002 	movcc	r3, r2
  124c04:	21a03003 	movcs	r3, r3
  124c08:	e14b30b6 	strh	r3, [fp, #-6]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  124c0c:	e15b30b6 	ldrh	r3, [fp, #-6]
  124c10:	e3a02000 	mov	r2, #0
  124c14:	e1a01003 	mov	r1, r3
  124c18:	e51b0010 	ldr	r0, [fp, #-16]
  124c1c:	ebffd58d 	bl	11a258 <pbuf_alloc>
  124c20:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  124c24:	e51b300c 	ldr	r3, [fp, #-12]
  124c28:	e3530000 	cmp	r3, #0
  124c2c:	1a000001 	bne	124c38 <tcp_pbuf_prealloc+0xdc>
    return NULL;
  124c30:	e3a03000 	mov	r3, #0
  124c34:	ea000019 	b	124ca0 <tcp_pbuf_prealloc+0x144>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  124c38:	e51b300c 	ldr	r3, [fp, #-12]
  124c3c:	e5933000 	ldr	r3, [r3]
  124c40:	e3530000 	cmp	r3, #0
  124c44:	0a000006 	beq	124c64 <tcp_pbuf_prealloc+0x108>
  124c48:	e3080640 	movw	r0, #34368	; 0x8640
  124c4c:	e3400014 	movt	r0, #20
  124c50:	ebff792f 	bl	103114 <rt_kprintf>
  124c54:	e3a01e11 	mov	r1, #272	; 0x110
  124c58:	e30805f8 	movw	r0, #34296	; 0x85f8
  124c5c:	e3400014 	movt	r0, #20
  124c60:	ebff9913 	bl	10b0b4 <sys_arch_assert>
  *oversize = p->len - length;
  124c64:	e51b300c 	ldr	r3, [fp, #-12]
  124c68:	e1d320ba 	ldrh	r2, [r3, #10]
  124c6c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124c70:	e0423003 	sub	r3, r2, r3
  124c74:	e6ff2073 	uxth	r2, r3
  124c78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124c7c:	e1c320b0 	strh	r2, [r3]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
  124c80:	e51b300c 	ldr	r3, [fp, #-12]
  124c84:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124c88:	e1c320b8 	strh	r2, [r3, #8]
  124c8c:	e51b300c 	ldr	r3, [fp, #-12]
  124c90:	e1d320b8 	ldrh	r2, [r3, #8]
  124c94:	e51b300c 	ldr	r3, [fp, #-12]
  124c98:	e1c320ba 	strh	r2, [r3, #10]
  return p;
  124c9c:	e51b300c 	ldr	r3, [fp, #-12]
}
  124ca0:	e1a00003 	mov	r0, r3
  124ca4:	e24bd004 	sub	sp, fp, #4
  124ca8:	e8bd8800 	pop	{fp, pc}

00124cac <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  124cac:	e92d4800 	push	{fp, lr}
  124cb0:	e28db004 	add	fp, sp, #4
  124cb4:	e24dd008 	sub	sp, sp, #8
  124cb8:	e50b0008 	str	r0, [fp, #-8]
  124cbc:	e1a03001 	mov	r3, r1
  124cc0:	e14b30ba 	strh	r3, [fp, #-10]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
  124cc4:	e51b3008 	ldr	r3, [fp, #-8]
  124cc8:	e5933014 	ldr	r3, [r3, #20]
  124ccc:	e3530004 	cmp	r3, #4
  124cd0:	0a00000d 	beq	124d0c <tcp_write_checks+0x60>
      (pcb->state != CLOSE_WAIT) &&
  124cd4:	e51b3008 	ldr	r3, [fp, #-8]
  124cd8:	e5933014 	ldr	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
  124cdc:	e3530007 	cmp	r3, #7
  124ce0:	0a000009 	beq	124d0c <tcp_write_checks+0x60>
      (pcb->state != SYN_SENT) &&
  124ce4:	e51b3008 	ldr	r3, [fp, #-8]
  124ce8:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
  124cec:	e3530002 	cmp	r3, #2
  124cf0:	0a000005 	beq	124d0c <tcp_write_checks+0x60>
      (pcb->state != SYN_RCVD)) {
  124cf4:	e51b3008 	ldr	r3, [fp, #-8]
  124cf8:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
  124cfc:	e3530003 	cmp	r3, #3
  124d00:	0a000001 	beq	124d0c <tcp_write_checks+0x60>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  124d04:	e3e0300a 	mvn	r3, #10
  124d08:	ea000050 	b	124e50 <tcp_write_checks+0x1a4>
  } else if (len == 0) {
  124d0c:	e15b30ba 	ldrh	r3, [fp, #-10]
  124d10:	e3530000 	cmp	r3, #0
  124d14:	1a000001 	bne	124d20 <tcp_write_checks+0x74>
    return ERR_OK;
  124d18:	e3a03000 	mov	r3, #0
  124d1c:	ea00004b 	b	124e50 <tcp_write_checks+0x1a4>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
  124d20:	e51b3008 	ldr	r3, [fp, #-8]
  124d24:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  124d28:	e15b20ba 	ldrh	r2, [fp, #-10]
  124d2c:	e1520003 	cmp	r2, r3
  124d30:	9a000008 	bls	124d58 <tcp_write_checks+0xac>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
  124d34:	e51b3008 	ldr	r3, [fp, #-8]
  124d38:	e5d3301e 	ldrb	r3, [r3, #30]
  124d3c:	e1e03c83 	mvn	r3, r3, lsl #25
  124d40:	e1e03ca3 	mvn	r3, r3, lsr #25
  124d44:	e6ef2073 	uxtb	r2, r3
  124d48:	e51b3008 	ldr	r3, [fp, #-8]
  124d4c:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  124d50:	e3e03000 	mvn	r3, #0
  124d54:	ea00003d 	b	124e50 <tcp_write_checks+0x1a4>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  124d58:	e51b3008 	ldr	r3, [fp, #-8]
  124d5c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124d60:	e3530015 	cmp	r3, #21
  124d64:	8a000004 	bhi	124d7c <tcp_write_checks+0xd0>
  124d68:	e51b3008 	ldr	r3, [fp, #-8]
  124d6c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124d70:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  124d74:	e1530002 	cmp	r3, r2
  124d78:	9a000010 	bls	124dc0 <tcp_write_checks+0x114>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  124d7c:	e30c3a48 	movw	r3, #51784	; 0xca48
  124d80:	e3403015 	movt	r3, #21
  124d84:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  124d88:	e2833001 	add	r3, r3, #1
  124d8c:	e6ff2073 	uxth	r2, r3
  124d90:	e30c3a48 	movw	r3, #51784	; 0xca48
  124d94:	e3403015 	movt	r3, #21
  124d98:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  124d9c:	e51b3008 	ldr	r3, [fp, #-8]
  124da0:	e5d3301e 	ldrb	r3, [r3, #30]
  124da4:	e1e03c83 	mvn	r3, r3, lsl #25
  124da8:	e1e03ca3 	mvn	r3, r3, lsr #25
  124dac:	e6ef2073 	uxtb	r2, r3
  124db0:	e51b3008 	ldr	r3, [fp, #-8]
  124db4:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  124db8:	e3e03000 	mvn	r3, #0
  124dbc:	ea000023 	b	124e50 <tcp_write_checks+0x1a4>
  }
  if (pcb->snd_queuelen != 0) {
  124dc0:	e51b3008 	ldr	r3, [fp, #-8]
  124dc4:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124dc8:	e3530000 	cmp	r3, #0
  124dcc:	0a00000f 	beq	124e10 <tcp_write_checks+0x164>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
  124dd0:	e51b3008 	ldr	r3, [fp, #-8]
  124dd4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  124dd8:	e3530000 	cmp	r3, #0
  124ddc:	1a00001a 	bne	124e4c <tcp_write_checks+0x1a0>
  124de0:	e51b3008 	ldr	r3, [fp, #-8]
  124de4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124de8:	e3530000 	cmp	r3, #0
  124dec:	1a000016 	bne	124e4c <tcp_write_checks+0x1a0>
  124df0:	e3080654 	movw	r0, #34388	; 0x8654
  124df4:	e3400014 	movt	r0, #20
  124df8:	ebff78c5 	bl	103114 <rt_kprintf>
  124dfc:	e3001156 	movw	r1, #342	; 0x156
  124e00:	e30805f8 	movw	r0, #34296	; 0x85f8
  124e04:	e3400014 	movt	r0, #20
  124e08:	ebff98a9 	bl	10b0b4 <sys_arch_assert>
  124e0c:	ea00000e 	b	124e4c <tcp_write_checks+0x1a0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
  124e10:	e51b3008 	ldr	r3, [fp, #-8]
  124e14:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  124e18:	e3530000 	cmp	r3, #0
  124e1c:	1a000003 	bne	124e30 <tcp_write_checks+0x184>
  124e20:	e51b3008 	ldr	r3, [fp, #-8]
  124e24:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124e28:	e3530000 	cmp	r3, #0
  124e2c:	0a000006 	beq	124e4c <tcp_write_checks+0x1a0>
  124e30:	e3080690 	movw	r0, #34448	; 0x8690
  124e34:	e3400014 	movt	r0, #20
  124e38:	ebff78b5 	bl	103114 <rt_kprintf>
  124e3c:	e3001159 	movw	r1, #345	; 0x159
  124e40:	e30805f8 	movw	r0, #34296	; 0x85f8
  124e44:	e3400014 	movt	r0, #20
  124e48:	ebff9899 	bl	10b0b4 <sys_arch_assert>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
  124e4c:	e3a03000 	mov	r3, #0
}
  124e50:	e1a00003 	mov	r0, r3
  124e54:	e24bd004 	sub	sp, fp, #4
  124e58:	e8bd8800 	pop	{fp, pc}

00124e5c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  124e5c:	e92d4810 	push	{r4, fp, lr}
  124e60:	e28db008 	add	fp, sp, #8
  124e64:	e24dd06c 	sub	sp, sp, #108	; 0x6c
  124e68:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  124e6c:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  124e70:	e1a01002 	mov	r1, r2
  124e74:	e1a02003 	mov	r2, r3
  124e78:	e1a03001 	mov	r3, r1
  124e7c:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
  124e80:	e1a03002 	mov	r3, r2
  124e84:	e54b305f 	strb	r3, [fp, #-95]	; 0xffffffa1
  struct pbuf *concat_p = NULL;
  124e88:	e3a03000 	mov	r3, #0
  124e8c:	e50b3010 	str	r3, [fp, #-16]
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  124e90:	e3a03000 	mov	r3, #0
  124e94:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  124e98:	e3a03000 	mov	r3, #0
  124e9c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124ea0:	e3a03000 	mov	r3, #0
  124ea4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  124ea8:	e3a03000 	mov	r3, #0
  124eac:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  u16_t pos = 0; /* position in 'arg' data */
  124eb0:	e3a03000 	mov	r3, #0
  124eb4:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t queuelen;
  u8_t optlen = 0;
  124eb8:	e3a03000 	mov	r3, #0
  124ebc:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  u8_t optflags = 0;
  124ec0:	e3a03000 	mov	r3, #0
  124ec4:	e54b303e 	strb	r3, [fp, #-62]	; 0xffffffc2
#if TCP_OVERSIZE
  u16_t oversize = 0;
  124ec8:	e3a03000 	mov	r3, #0
  124ecc:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
  u16_t oversize_used = 0;
  124ed0:	e3a03000 	mov	r3, #0
  124ed4:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
  124ed8:	e3a03000 	mov	r3, #0
  124edc:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
  124ee0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124ee4:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  124ee8:	e1a030a3 	lsr	r3, r3, #1
  124eec:	e6ff2073 	uxth	r2, r3
  124ef0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124ef4:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  124ef8:	e1520003 	cmp	r2, r3
  124efc:	31a03002 	movcc	r3, r2
  124f00:	21a03003 	movcs	r3, r3
  124f04:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  mss_local = mss_local ? mss_local : pcb->mss;
  124f08:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  124f0c:	e3530000 	cmp	r3, #0
  124f10:	1a000002 	bne	124f20 <tcp_write+0xc4>
  124f14:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124f18:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  124f1c:	ea000000 	b	124f24 <tcp_write+0xc8>
  124f20:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  124f24:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
  124f28:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  124f2c:	e3530000 	cmp	r3, #0
  124f30:	1a000008 	bne	124f58 <tcp_write+0xfc>
  124f34:	e30806c4 	movw	r0, #34500	; 0x86c4
  124f38:	e3400014 	movt	r0, #20
  124f3c:	ebff7874 	bl	103114 <rt_kprintf>
  124f40:	e3001192 	movw	r1, #402	; 0x192
  124f44:	e30805f8 	movw	r0, #34296	; 0x85f8
  124f48:	e3400014 	movt	r0, #20
  124f4c:	ebff9858 	bl	10b0b4 <sys_arch_assert>
  124f50:	e3e0300f 	mvn	r3, #15
  124f54:	ea00029f 	b	1259d8 <tcp_write+0xb7c>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
  124f58:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124f5c:	e1a01003 	mov	r1, r3
  124f60:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  124f64:	ebffff50 	bl	124cac <tcp_write_checks>
  124f68:	e1a03000 	mov	r3, r0
  124f6c:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  if (err != ERR_OK) {
  124f70:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  124f74:	e3530000 	cmp	r3, #0
  124f78:	0a000001 	beq	124f84 <tcp_write+0x128>
    return err;
  124f7c:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  124f80:	ea000294 	b	1259d8 <tcp_write+0xb7c>
  }
  queuelen = pcb->snd_queuelen;
  124f84:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124f88:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124f8c:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
  124f90:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124f94:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124f98:	e3530000 	cmp	r3, #0
  124f9c:	0a0000d8 	beq	125304 <tcp_write+0x4a8>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124fa0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124fa4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124fa8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  124fac:	ea000002 	b	124fbc <tcp_write+0x160>
         last_unsent = last_unsent->next);
  124fb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124fb4:	e5933000 	ldr	r3, [r3]
  124fb8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124fbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124fc0:	e5933000 	ldr	r3, [r3]
  124fc4:	e3530000 	cmp	r3, #0
  124fc8:	1afffff8 	bne	124fb0 <tcp_write+0x154>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
  124fcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124fd0:	e5d3300a 	ldrb	r3, [r3, #10]
  124fd4:	e1a03103 	lsl	r3, r3, #2
  124fd8:	e6ff3073 	uxth	r3, r3
  124fdc:	e2033004 	and	r3, r3, #4
  124fe0:	e14b34b4 	strh	r3, [fp, #-68]	; 0xffffffbc
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
  124fe4:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  124fe8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124fec:	e1d330b8 	ldrh	r3, [r3, #8]
  124ff0:	e1a01003 	mov	r1, r3
  124ff4:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  124ff8:	e0813003 	add	r3, r1, r3
  124ffc:	e1520003 	cmp	r2, r3
  125000:	aa000006 	bge	125020 <tcp_write+0x1c4>
  125004:	e30806f8 	movw	r0, #34552	; 0x86f8
  125008:	e3400014 	movt	r0, #20
  12500c:	ebff7840 	bl	103114 <rt_kprintf>
  125010:	e30011c7 	movw	r1, #455	; 0x1c7
  125014:	e30805f8 	movw	r0, #34296	; 0x85f8
  125018:	e3400014 	movt	r0, #20
  12501c:	ebff9824 	bl	10b0b4 <sys_arch_assert>
    space = mss_local - (last_unsent->len + unsent_optlen);
  125020:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125024:	e1d320b8 	ldrh	r2, [r3, #8]
  125028:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  12502c:	e0823003 	add	r3, r2, r3
  125030:	e6ff3073 	uxth	r3, r3
  125034:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  125038:	e0423003 	sub	r3, r2, r3
  12503c:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
  125040:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125044:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  125048:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
    if (oversize > 0) {
  12504c:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  125050:	e3530000 	cmp	r3, #0
  125054:	0a000025 	beq	1250f0 <tcp_write+0x294>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
  125058:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  12505c:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  125060:	e1520003 	cmp	r2, r3
  125064:	2a000006 	bcs	125084 <tcp_write+0x228>
  125068:	e3080710 	movw	r0, #34576	; 0x8710
  12506c:	e3400014 	movt	r0, #20
  125070:	ebff7827 	bl	103114 <rt_kprintf>
  125074:	e30011d9 	movw	r1, #473	; 0x1d9
  125078:	e30805f8 	movw	r0, #34296	; 0x85f8
  12507c:	e3400014 	movt	r0, #20
  125080:	ebff980b 	bl	10b0b4 <sys_arch_assert>
      seg = last_unsent;
  125084:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125088:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
  12508c:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  125090:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  125094:	e1520003 	cmp	r2, r3
  125098:	9a000001 	bls	1250a4 <tcp_write+0x248>
  12509c:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  1250a0:	ea000000 	b	1250a8 <tcp_write+0x24c>
  1250a4:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  1250a8:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  1250ac:	e1530002 	cmp	r3, r2
  1250b0:	b1a03003 	movlt	r3, r3
  1250b4:	a1a03002 	movge	r3, r2
  1250b8:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
      pos += oversize_used;
  1250bc:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  1250c0:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1250c4:	e0823003 	add	r3, r2, r3
  1250c8:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      oversize -= oversize_used;
  1250cc:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  1250d0:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1250d4:	e0423003 	sub	r3, r2, r3
  1250d8:	e6ff3073 	uxth	r3, r3
  1250dc:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
      space -= oversize_used;
  1250e0:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  1250e4:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1250e8:	e0423003 	sub	r3, r2, r3
  1250ec:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
  1250f0:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  1250f4:	e3530000 	cmp	r3, #0
  1250f8:	0a00000a 	beq	125128 <tcp_write+0x2cc>
  1250fc:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125100:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125104:	e1520003 	cmp	r2, r3
  125108:	0a000006 	beq	125128 <tcp_write+0x2cc>
  12510c:	e3080730 	movw	r0, #34608	; 0x8730
  125110:	e3400014 	movt	r0, #20
  125114:	ebff77fe 	bl	103114 <rt_kprintf>
  125118:	e30011e1 	movw	r1, #481	; 0x1e1
  12511c:	e30805f8 	movw	r0, #34296	; 0x85f8
  125120:	e3400014 	movt	r0, #20
  125124:	ebff97e2 	bl	10b0b4 <sys_arch_assert>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
  125128:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  12512c:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125130:	e1520003 	cmp	r2, r3
  125134:	2a000121 	bcs	1255c0 <tcp_write+0x764>
  125138:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  12513c:	e3530000 	cmp	r3, #0
  125140:	0a00011e 	beq	1255c0 <tcp_write+0x764>
  125144:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125148:	e1d330b8 	ldrh	r3, [r3, #8]
  12514c:	e3530000 	cmp	r3, #0
  125150:	0a00011a 	beq	1255c0 <tcp_write+0x764>
      u16_t seglen = LWIP_MIN(space, len - pos);
  125154:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  125158:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  12515c:	e0422003 	sub	r2, r2, r3
  125160:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  125164:	e1520003 	cmp	r2, r3
  125168:	b1a03002 	movlt	r3, r2
  12516c:	a1a03003 	movge	r3, r3
  125170:	e14b34b6 	strh	r3, [fp, #-70]	; 0xffffffba
      seg = last_unsent;
  125174:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125178:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
  12517c:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  125180:	e2033001 	and	r3, r3, #1
  125184:	e3530000 	cmp	r3, #0
  125188:	0a00001f 	beq	12520c <tcp_write+0x3b0>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
  12518c:	e24b0052 	sub	r0, fp, #82	; 0x52
  125190:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  125194:	e15b14b6 	ldrh	r1, [fp, #-70]	; 0xffffffba
  125198:	e3a03001 	mov	r3, #1
  12519c:	e58d3008 	str	r3, [sp, #8]
  1251a0:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1251a4:	e58d3004 	str	r3, [sp, #4]
  1251a8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1251ac:	e58d3000 	str	r3, [sp]
  1251b0:	e1a03000 	mov	r3, r0
  1251b4:	e3a00004 	mov	r0, #4
  1251b8:	ebfffe67 	bl	124b5c <tcp_pbuf_prealloc>
  1251bc:	e50b0010 	str	r0, [fp, #-16]
  1251c0:	e51b3010 	ldr	r3, [fp, #-16]
  1251c4:	e3530000 	cmp	r3, #0
  1251c8:	0a0001cc 	beq	125900 <tcp_write+0xaa4>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
  1251cc:	e51b3010 	ldr	r3, [fp, #-16]
  1251d0:	e5930004 	ldr	r0, [r3, #4]
  1251d4:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1251d8:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  1251dc:	e0823003 	add	r3, r2, r3
  1251e0:	e15b24b6 	ldrh	r2, [fp, #-70]	; 0xffffffba
  1251e4:	e1a01003 	mov	r1, r3
  1251e8:	eb006edb 	bl	140d5c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
  1251ec:	e51b0010 	ldr	r0, [fp, #-16]
  1251f0:	ebffd7a4 	bl	11b088 <pbuf_clen>
  1251f4:	e1a03000 	mov	r3, r0
  1251f8:	e1a02003 	mov	r2, r3
  1251fc:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125200:	e0823003 	add	r3, r2, r3
  125204:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  125208:	ea000038 	b	1252f0 <tcp_write+0x494>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
  12520c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125210:	e5933004 	ldr	r3, [r3, #4]
  125214:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  125218:	ea000002 	b	125228 <tcp_write+0x3cc>
  12521c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125220:	e5933000 	ldr	r3, [r3]
  125224:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  125228:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12522c:	e5933000 	ldr	r3, [r3]
  125230:	e3530000 	cmp	r3, #0
  125234:	1afffff8 	bne	12521c <tcp_write+0x3c0>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
  125238:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12523c:	e5d3300c 	ldrb	r3, [r3, #12]
  125240:	e3530001 	cmp	r3, #1
  125244:	1a000014 	bne	12529c <tcp_write+0x440>
  125248:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12524c:	e5933004 	ldr	r3, [r3, #4]
  125250:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  125254:	e1d220ba 	ldrh	r2, [r2, #10]
  125258:	e0833002 	add	r3, r3, r2
  12525c:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  125260:	e1520003 	cmp	r2, r3
  125264:	1a00000c 	bne	12529c <tcp_write+0x440>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
  125268:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  12526c:	e3530000 	cmp	r3, #0
  125270:	0a000006 	beq	125290 <tcp_write+0x434>
  125274:	e3080750 	movw	r0, #34640	; 0x8750
  125278:	e3400014 	movt	r0, #20
  12527c:	ebff77a4 	bl	103114 <rt_kprintf>
  125280:	e3a01f83 	mov	r1, #524	; 0x20c
  125284:	e30805f8 	movw	r0, #34296	; 0x85f8
  125288:	e3400014 	movt	r0, #20
  12528c:	ebff9788 	bl	10b0b4 <sys_arch_assert>
          extendlen = seglen;
  125290:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  125294:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  125298:	ea000014 	b	1252f0 <tcp_write+0x494>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
  12529c:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  1252a0:	e3a02001 	mov	r2, #1
  1252a4:	e1a01003 	mov	r1, r3
  1252a8:	e3a00004 	mov	r0, #4
  1252ac:	ebffd3e9 	bl	11a258 <pbuf_alloc>
  1252b0:	e50b0010 	str	r0, [fp, #-16]
  1252b4:	e51b3010 	ldr	r3, [fp, #-16]
  1252b8:	e3530000 	cmp	r3, #0
  1252bc:	0a000191 	beq	125908 <tcp_write+0xaac>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
  1252c0:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1252c4:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  1252c8:	e0822003 	add	r2, r2, r3
  1252cc:	e51b3010 	ldr	r3, [fp, #-16]
  1252d0:	e5832004 	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
  1252d4:	e51b0010 	ldr	r0, [fp, #-16]
  1252d8:	ebffd76a 	bl	11b088 <pbuf_clen>
  1252dc:	e1a03000 	mov	r3, r0
  1252e0:	e1a02003 	mov	r2, r3
  1252e4:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  1252e8:	e0823003 	add	r3, r2, r3
  1252ec:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
  1252f0:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  1252f4:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  1252f8:	e0823003 	add	r3, r2, r3
  1252fc:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  125300:	ea0000ae 	b	1255c0 <tcp_write+0x764>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
  125304:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125308:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  12530c:	e3530000 	cmp	r3, #0
  125310:	0a0000aa 	beq	1255c0 <tcp_write+0x764>
  125314:	e308077c 	movw	r0, #34684	; 0x877c
  125318:	e3400014 	movt	r0, #20
  12531c:	ebff777c 	bl	103114 <rt_kprintf>
  125320:	e3001225 	movw	r1, #549	; 0x225
  125324:	e30805f8 	movw	r0, #34296	; 0x85f8
  125328:	e3400014 	movt	r0, #20
  12532c:	ebff9760 	bl	10b0b4 <sys_arch_assert>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  125330:	ea0000a2 	b	1255c0 <tcp_write+0x764>
    struct pbuf *p;
    u16_t left = len - pos;
  125334:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  125338:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  12533c:	e0423003 	sub	r3, r2, r3
  125340:	e14b34b8 	strh	r3, [fp, #-72]	; 0xffffffb8
    u16_t max_len = mss_local - optlen;
  125344:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  125348:	e6ff3073 	uxth	r3, r3
  12534c:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  125350:	e0423003 	sub	r3, r2, r3
  125354:	e14b34ba 	strh	r3, [fp, #-74]	; 0xffffffb6
    u16_t seglen = LWIP_MIN(left, max_len);
  125358:	e15b24ba 	ldrh	r2, [fp, #-74]	; 0xffffffb6
  12535c:	e15b34b8 	ldrh	r3, [fp, #-72]	; 0xffffffb8
  125360:	e1520003 	cmp	r2, r3
  125364:	31a03002 	movcc	r3, r2
  125368:	21a03003 	movcs	r3, r3
  12536c:	e14b34bc 	strh	r3, [fp, #-76]	; 0xffffffb4
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
  125370:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  125374:	e2033001 	and	r3, r3, #1
  125378:	e3530000 	cmp	r3, #0
  12537c:	0a00002e 	beq	12543c <tcp_write+0x5e0>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
  125380:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  125384:	e6ff2073 	uxth	r2, r3
  125388:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  12538c:	e0823003 	add	r3, r2, r3
  125390:	e6ff1073 	uxth	r1, r3
  125394:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125398:	e3530000 	cmp	r3, #0
  12539c:	03a03001 	moveq	r3, #1
  1253a0:	13a03000 	movne	r3, #0
  1253a4:	e6ef3073 	uxtb	r3, r3
  1253a8:	e24b0052 	sub	r0, fp, #82	; 0x52
  1253ac:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  1253b0:	e58d3008 	str	r3, [sp, #8]
  1253b4:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1253b8:	e58d3004 	str	r3, [sp, #4]
  1253bc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1253c0:	e58d3000 	str	r3, [sp]
  1253c4:	e1a03000 	mov	r3, r0
  1253c8:	e3a00000 	mov	r0, #0
  1253cc:	ebfffde2 	bl	124b5c <tcp_pbuf_prealloc>
  1253d0:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  1253d4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1253d8:	e3530000 	cmp	r3, #0
  1253dc:	0a00014b 	beq	125910 <tcp_write+0xab4>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
  1253e0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1253e4:	e1d330ba 	ldrh	r3, [r3, #10]
  1253e8:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  1253ec:	e1520003 	cmp	r2, r3
  1253f0:	9a000006 	bls	125410 <tcp_write+0x5b4>
  1253f4:	e30807ac 	movw	r0, #34732	; 0x87ac
  1253f8:	e3400014 	movt	r0, #20
  1253fc:	ebff7744 	bl	103114 <rt_kprintf>
  125400:	e3001241 	movw	r1, #577	; 0x241
  125404:	e30805f8 	movw	r0, #34296	; 0x85f8
  125408:	e3400014 	movt	r0, #20
  12540c:	ebff9728 	bl	10b0b4 <sys_arch_assert>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
  125410:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125414:	e5932004 	ldr	r2, [r3, #4]
  125418:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  12541c:	e0820003 	add	r0, r2, r3
  125420:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125424:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  125428:	e0823003 	add	r3, r2, r3
  12542c:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  125430:	e1a01003 	mov	r1, r3
  125434:	eb006e48 	bl	140d5c <memcpy>
  125438:	ea000027 	b	1254dc <tcp_write+0x680>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
  12543c:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  125440:	e3530000 	cmp	r3, #0
  125444:	0a000006 	beq	125464 <tcp_write+0x608>
  125448:	e30807ec 	movw	r0, #34796	; 0x87ec
  12544c:	e3400014 	movt	r0, #20
  125450:	ebff772f 	bl	103114 <rt_kprintf>
  125454:	e300124b 	movw	r1, #587	; 0x24b
  125458:	e30805f8 	movw	r0, #34296	; 0x85f8
  12545c:	e3400014 	movt	r0, #20
  125460:	ebff9713 	bl	10b0b4 <sys_arch_assert>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
  125464:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  125468:	e3a02001 	mov	r2, #1
  12546c:	e1a01003 	mov	r1, r3
  125470:	e3a00000 	mov	r0, #0
  125474:	ebffd377 	bl	11a258 <pbuf_alloc>
  125478:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  12547c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  125480:	e3530000 	cmp	r3, #0
  125484:	0a000123 	beq	125918 <tcp_write+0xabc>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
  125488:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  12548c:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  125490:	e0822003 	add	r2, r2, r3
  125494:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  125498:	e5832004 	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  12549c:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  1254a0:	e6ff3073 	uxth	r3, r3
  1254a4:	e3a02000 	mov	r2, #0
  1254a8:	e1a01003 	mov	r1, r3
  1254ac:	e3a00000 	mov	r0, #0
  1254b0:	ebffd368 	bl	11a258 <pbuf_alloc>
  1254b4:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  1254b8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1254bc:	e3530000 	cmp	r3, #0
  1254c0:	1a000002 	bne	1254d0 <tcp_write+0x674>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
  1254c4:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  1254c8:	ebffd669 	bl	11ae74 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
  1254cc:	ea000114 	b	125924 <tcp_write+0xac8>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
  1254d0:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
  1254d4:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  1254d8:	ebffd71c 	bl	11b150 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
  1254dc:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  1254e0:	ebffd6e8 	bl	11b088 <pbuf_clen>
  1254e4:	e1a03000 	mov	r3, r0
  1254e8:	e1a02003 	mov	r2, r3
  1254ec:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  1254f0:	e0823003 	add	r3, r2, r3
  1254f4:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  1254f8:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  1254fc:	e3530016 	cmp	r3, #22
  125500:	8a000003 	bhi	125514 <tcp_write+0x6b8>
  125504:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125508:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  12550c:	e1530002 	cmp	r3, r2
  125510:	9a000002 	bls	125520 <tcp_write+0x6c4>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
  125514:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  125518:	ebffd655 	bl	11ae74 <pbuf_free>
      goto memerr;
  12551c:	ea000100 	b	125924 <tcp_write+0xac8>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  125520:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125524:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  125528:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  12552c:	e0822003 	add	r2, r2, r3
  125530:	e55b303e 	ldrb	r3, [fp, #-62]	; 0xffffffc2
  125534:	e58d3000 	str	r3, [sp]
  125538:	e1a03002 	mov	r3, r2
  12553c:	e3a02000 	mov	r2, #0
  125540:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  125544:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  125548:	ebfffd02 	bl	124958 <tcp_create_segment>
  12554c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  125550:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125554:	e3530000 	cmp	r3, #0
  125558:	0a0000f0 	beq	125920 <tcp_write+0xac4>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
  12555c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125560:	e3530000 	cmp	r3, #0
  125564:	1a000002 	bne	125574 <tcp_write+0x718>
      queue = seg;
  125568:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12556c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  125570:	ea00000c 	b	1255a8 <tcp_write+0x74c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
  125574:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125578:	e3530000 	cmp	r3, #0
  12557c:	1a000006 	bne	12559c <tcp_write+0x740>
  125580:	e30807fc 	movw	r0, #34812	; 0x87fc
  125584:	e3400014 	movt	r0, #20
  125588:	ebff76e1 	bl	103114 <rt_kprintf>
  12558c:	e3001285 	movw	r1, #645	; 0x285
  125590:	e30805f8 	movw	r0, #34296	; 0x85f8
  125594:	e3400014 	movt	r0, #20
  125598:	ebff96c5 	bl	10b0b4 <sys_arch_assert>
      prev_seg->next = seg;
  12559c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1255a0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1255a4:	e5832000 	str	r2, [r3]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
  1255a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1255ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
  1255b0:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  1255b4:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  1255b8:	e0823003 	add	r3, r2, r3
  1255bc:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  while (pos < len) {
  1255c0:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  1255c4:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  1255c8:	e1520003 	cmp	r2, r3
  1255cc:	3affff58 	bcc	125334 <tcp_write+0x4d8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
  1255d0:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1255d4:	e3530000 	cmp	r3, #0
  1255d8:	0a00002b 	beq	12568c <tcp_write+0x830>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
  1255dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1255e0:	e5933004 	ldr	r3, [r3, #4]
  1255e4:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  1255e8:	ea00001d 	b	125664 <tcp_write+0x808>
      p->tot_len += oversize_used;
  1255ec:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1255f0:	e1d320b8 	ldrh	r2, [r3, #8]
  1255f4:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1255f8:	e0823003 	add	r3, r2, r3
  1255fc:	e6ff2073 	uxth	r2, r3
  125600:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125604:	e1c320b8 	strh	r2, [r3, #8]
      if (p->next == NULL) {
  125608:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12560c:	e5933000 	ldr	r3, [r3]
  125610:	e3530000 	cmp	r3, #0
  125614:	1a00000f 	bne	125658 <tcp_write+0x7fc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  125618:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12561c:	e5933004 	ldr	r3, [r3, #4]
  125620:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  125624:	e1d220ba 	ldrh	r2, [r2, #10]
  125628:	e0833002 	add	r3, r3, r2
  12562c:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  125630:	e51b105c 	ldr	r1, [fp, #-92]	; 0xffffffa4
  125634:	e1a00003 	mov	r0, r3
  125638:	eb006dc7 	bl	140d5c <memcpy>
        p->len += oversize_used;
  12563c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125640:	e1d320ba 	ldrh	r2, [r3, #10]
  125644:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125648:	e0823003 	add	r3, r2, r3
  12564c:	e6ff2073 	uxth	r2, r3
  125650:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125654:	e1c320ba 	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
  125658:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12565c:	e5933000 	ldr	r3, [r3]
  125660:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  125664:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125668:	e3530000 	cmp	r3, #0
  12566c:	1affffde 	bne	1255ec <tcp_write+0x790>
      }
    }
    last_unsent->len += oversize_used;
  125670:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125674:	e1d320b8 	ldrh	r2, [r3, #8]
  125678:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12567c:	e0823003 	add	r3, r2, r3
  125680:	e6ff2073 	uxth	r2, r3
  125684:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125688:	e1c320b8 	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
  12568c:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  125690:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125694:	e1c326b8 	strh	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
  125698:	e51b3010 	ldr	r3, [fp, #-16]
  12569c:	e3530000 	cmp	r3, #0
  1256a0:	0a000017 	beq	125704 <tcp_write+0x8a8>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
  1256a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1256a8:	e3530000 	cmp	r3, #0
  1256ac:	1a000006 	bne	1256cc <tcp_write+0x870>
  1256b0:	e3080810 	movw	r0, #34832	; 0x8810
  1256b4:	e3400014 	movt	r0, #20
  1256b8:	ebff7695 	bl	103114 <rt_kprintf>
  1256bc:	e30012bb 	movw	r1, #699	; 0x2bb
  1256c0:	e30805f8 	movw	r0, #34296	; 0x85f8
  1256c4:	e3400014 	movt	r0, #20
  1256c8:	ebff9679 	bl	10b0b4 <sys_arch_assert>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
  1256cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1256d0:	e5933004 	ldr	r3, [r3, #4]
  1256d4:	e51b1010 	ldr	r1, [fp, #-16]
  1256d8:	e1a00003 	mov	r0, r3
  1256dc:	ebffd69b 	bl	11b150 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
  1256e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1256e4:	e1d320b8 	ldrh	r2, [r3, #8]
  1256e8:	e51b3010 	ldr	r3, [fp, #-16]
  1256ec:	e1d330b8 	ldrh	r3, [r3, #8]
  1256f0:	e0823003 	add	r3, r2, r3
  1256f4:	e6ff2073 	uxth	r2, r3
  1256f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1256fc:	e1c320b8 	strh	r2, [r3, #8]
  125700:	ea000037 	b	1257e4 <tcp_write+0x988>
  } else if (extendlen > 0) {
  125704:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125708:	e3530000 	cmp	r3, #0
  12570c:	0a000034 	beq	1257e4 <tcp_write+0x988>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
  125710:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125714:	e3530000 	cmp	r3, #0
  125718:	0a000003 	beq	12572c <tcp_write+0x8d0>
  12571c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125720:	e5933004 	ldr	r3, [r3, #4]
  125724:	e3530000 	cmp	r3, #0
  125728:	1a000006 	bne	125748 <tcp_write+0x8ec>
  12572c:	e3080848 	movw	r0, #34888	; 0x8848
  125730:	e3400014 	movt	r0, #20
  125734:	ebff7676 	bl	103114 <rt_kprintf>
  125738:	e30012c1 	movw	r1, #705	; 0x2c1
  12573c:	e30805f8 	movw	r0, #34296	; 0x85f8
  125740:	e3400014 	movt	r0, #20
  125744:	ebff965a 	bl	10b0b4 <sys_arch_assert>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  125748:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12574c:	e5933004 	ldr	r3, [r3, #4]
  125750:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  125754:	ea000009 	b	125780 <tcp_write+0x924>
      p->tot_len += extendlen;
  125758:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12575c:	e1d320b8 	ldrh	r2, [r3, #8]
  125760:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125764:	e0823003 	add	r3, r2, r3
  125768:	e6ff2073 	uxth	r2, r3
  12576c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125770:	e1c320b8 	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  125774:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125778:	e5933000 	ldr	r3, [r3]
  12577c:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  125780:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125784:	e5933000 	ldr	r3, [r3]
  125788:	e3530000 	cmp	r3, #0
  12578c:	1afffff1 	bne	125758 <tcp_write+0x8fc>
    }
    p->tot_len += extendlen;
  125790:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125794:	e1d320b8 	ldrh	r2, [r3, #8]
  125798:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  12579c:	e0823003 	add	r3, r2, r3
  1257a0:	e6ff2073 	uxth	r2, r3
  1257a4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257a8:	e1c320b8 	strh	r2, [r3, #8]
    p->len += extendlen;
  1257ac:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257b0:	e1d320ba 	ldrh	r2, [r3, #10]
  1257b4:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1257b8:	e0823003 	add	r3, r2, r3
  1257bc:	e6ff2073 	uxth	r2, r3
  1257c0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257c4:	e1c320ba 	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
  1257c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1257cc:	e1d320b8 	ldrh	r2, [r3, #8]
  1257d0:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1257d4:	e0823003 	add	r3, r2, r3
  1257d8:	e6ff2073 	uxth	r2, r3
  1257dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1257e0:	e1c320b8 	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
  1257e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1257e8:	e3530000 	cmp	r3, #0
  1257ec:	1a000003 	bne	125800 <tcp_write+0x9a4>
    pcb->unsent = queue;
  1257f0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1257f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1257f8:	e583206c 	str	r2, [r3, #108]	; 0x6c
  1257fc:	ea000002 	b	12580c <tcp_write+0x9b0>
  } else {
    last_unsent->next = queue;
  125800:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125804:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  125808:	e5832000 	str	r2, [r3]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
  12580c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125810:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  125814:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125818:	e0822003 	add	r2, r2, r3
  12581c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125820:	e583205c 	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
  125824:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125828:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  12582c:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125830:	e0423003 	sub	r3, r2, r3
  125834:	e6ff2073 	uxth	r2, r3
  125838:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12583c:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
  125840:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125844:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  125848:	e1c326b6 	strh	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  12584c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125850:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125854:	e3530000 	cmp	r3, #0
  125858:	0a00000e 	beq	125898 <tcp_write+0xa3c>
    LWIP_ASSERT("tcp_write: valid queue length",
  12585c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125860:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125864:	e3530000 	cmp	r3, #0
  125868:	1a00000a 	bne	125898 <tcp_write+0xa3c>
  12586c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125870:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125874:	e3530000 	cmp	r3, #0
  125878:	1a000006 	bne	125898 <tcp_write+0xa3c>
  12587c:	e3080880 	movw	r0, #34944	; 0x8880
  125880:	e3400014 	movt	r0, #20
  125884:	ebff7622 	bl	103114 <rt_kprintf>
  125888:	e30012ed 	movw	r1, #749	; 0x2ed
  12588c:	e30805f8 	movw	r0, #34296	; 0x85f8
  125890:	e3400014 	movt	r0, #20
  125894:	ebff9606 	bl	10b0b4 <sys_arch_assert>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  125898:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12589c:	e3530000 	cmp	r3, #0
  1258a0:	0a000014 	beq	1258f8 <tcp_write+0xa9c>
  1258a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1258a8:	e593300c 	ldr	r3, [r3, #12]
  1258ac:	e3530000 	cmp	r3, #0
  1258b0:	0a000010 	beq	1258f8 <tcp_write+0xa9c>
  1258b4:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1258b8:	e2033002 	and	r3, r3, #2
  1258bc:	e3530000 	cmp	r3, #0
  1258c0:	1a00000c 	bne	1258f8 <tcp_write+0xa9c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  1258c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1258c8:	e593300c 	ldr	r3, [r3, #12]
  1258cc:	e1d330bc 	ldrh	r3, [r3, #12]
  1258d0:	e6ff4073 	uxth	r4, r3
  1258d4:	e3a00008 	mov	r0, #8
  1258d8:	ebffc32e 	bl	116598 <lwip_htons>
  1258dc:	e1a03000 	mov	r3, r0
  1258e0:	e1a02003 	mov	r2, r3
  1258e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1258e8:	e593300c 	ldr	r3, [r3, #12]
  1258ec:	e1842002 	orr	r2, r4, r2
  1258f0:	e6ff2072 	uxth	r2, r2
  1258f4:	e1c320bc 	strh	r2, [r3, #12]
  }

  return ERR_OK;
  1258f8:	e3a03000 	mov	r3, #0
  1258fc:	ea000035 	b	1259d8 <tcp_write+0xb7c>
          goto memerr;
  125900:	e320f000 	nop	{0}
  125904:	ea000006 	b	125924 <tcp_write+0xac8>
            goto memerr;
  125908:	e320f000 	nop	{0}
  12590c:	ea000004 	b	125924 <tcp_write+0xac8>
        goto memerr;
  125910:	e320f000 	nop	{0}
  125914:	ea000002 	b	125924 <tcp_write+0xac8>
        goto memerr;
  125918:	e320f000 	nop	{0}
  12591c:	ea000000 	b	125924 <tcp_write+0xac8>
      goto memerr;
  125920:	e320f000 	nop	{0}
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  125924:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125928:	e5d3301e 	ldrb	r3, [r3, #30]
  12592c:	e1e03c83 	mvn	r3, r3, lsl #25
  125930:	e1e03ca3 	mvn	r3, r3, lsr #25
  125934:	e6ef2073 	uxtb	r2, r3
  125938:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12593c:	e5c3201e 	strb	r2, [r3, #30]
  TCP_STATS_INC(tcp.memerr);
  125940:	e30c3a48 	movw	r3, #51784	; 0xca48
  125944:	e3403015 	movt	r3, #21
  125948:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  12594c:	e2833001 	add	r3, r3, #1
  125950:	e6ff2073 	uxth	r2, r3
  125954:	e30c3a48 	movw	r3, #51784	; 0xca48
  125958:	e3403015 	movt	r3, #21
  12595c:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8

  if (concat_p != NULL) {
  125960:	e51b3010 	ldr	r3, [fp, #-16]
  125964:	e3530000 	cmp	r3, #0
  125968:	0a000001 	beq	125974 <tcp_write+0xb18>
    pbuf_free(concat_p);
  12596c:	e51b0010 	ldr	r0, [fp, #-16]
  125970:	ebffd53f 	bl	11ae74 <pbuf_free>
  }
  if (queue != NULL) {
  125974:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125978:	e3530000 	cmp	r3, #0
  12597c:	0a000001 	beq	125988 <tcp_write+0xb2c>
    tcp_segs_free(queue);
  125980:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125984:	ebffe69c 	bl	11f3fc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
  125988:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12598c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125990:	e3530000 	cmp	r3, #0
  125994:	0a00000e 	beq	1259d4 <tcp_write+0xb78>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
  125998:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12599c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1259a0:	e3530000 	cmp	r3, #0
  1259a4:	1a00000a 	bne	1259d4 <tcp_write+0xb78>
  1259a8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1259ac:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1259b0:	e3530000 	cmp	r3, #0
  1259b4:	1a000006 	bne	1259d4 <tcp_write+0xb78>
  1259b8:	e3080880 	movw	r0, #34944	; 0x8880
  1259bc:	e3400014 	movt	r0, #20
  1259c0:	ebff75d3 	bl	103114 <rt_kprintf>
  1259c4:	e3001302 	movw	r1, #770	; 0x302
  1259c8:	e30805f8 	movw	r0, #34296	; 0x85f8
  1259cc:	e3400014 	movt	r0, #20
  1259d0:	ebff95b7 	bl	10b0b4 <sys_arch_assert>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  1259d4:	e3e03000 	mvn	r3, #0
}
  1259d8:	e1a00003 	mov	r0, r3
  1259dc:	e24bd008 	sub	sp, fp, #8
  1259e0:	e8bd8810 	pop	{r4, fp, pc}

001259e4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  1259e4:	e92d4800 	push	{fp, lr}
  1259e8:	e28db004 	add	fp, sp, #4
  1259ec:	e24dd028 	sub	sp, sp, #40	; 0x28
  1259f0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1259f4:	e1a03001 	mov	r3, r1
  1259f8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
  1259fc:	e3a03000 	mov	r3, #0
  125a00:	e54b3005 	strb	r3, [fp, #-5]
  u8_t optlen = 0;
  125a04:	e3a03000 	mov	r3, #0
  125a08:	e54b300d 	strb	r3, [fp, #-13]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
  125a0c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125a10:	e2033003 	and	r3, r3, #3
  125a14:	e3530000 	cmp	r3, #0
  125a18:	1a000006 	bne	125a38 <tcp_enqueue_flags+0x54>
  125a1c:	e30808a0 	movw	r0, #34976	; 0x88a0
  125a20:	e3400014 	movt	r0, #20
  125a24:	ebff75ba 	bl	103114 <rt_kprintf>
  125a28:	e300131b 	movw	r1, #795	; 0x31b
  125a2c:	e30805f8 	movw	r0, #34296	; 0x85f8
  125a30:	e3400014 	movt	r0, #20
  125a34:	ebff959e 	bl	10b0b4 <sys_arch_assert>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  125a38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a3c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125a40:	e3530015 	cmp	r3, #21
  125a44:	8a000004 	bhi	125a5c <tcp_enqueue_flags+0x78>
  125a48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a4c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125a50:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  125a54:	e1530002 	cmp	r3, r2
  125a58:	9a000014 	bls	125ab0 <tcp_enqueue_flags+0xcc>
      ((flags & TCP_FIN) == 0)) {
  125a5c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125a60:	e2033001 	and	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  125a64:	e3530000 	cmp	r3, #0
  125a68:	1a000010 	bne	125ab0 <tcp_enqueue_flags+0xcc>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  125a6c:	e30c3a48 	movw	r3, #51784	; 0xca48
  125a70:	e3403015 	movt	r3, #21
  125a74:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125a78:	e2833001 	add	r3, r3, #1
  125a7c:	e6ff2073 	uxth	r2, r3
  125a80:	e30c3a48 	movw	r3, #51784	; 0xca48
  125a84:	e3403015 	movt	r3, #21
  125a88:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  125a8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a90:	e5d3301e 	ldrb	r3, [r3, #30]
  125a94:	e1e03c83 	mvn	r3, r3, lsl #25
  125a98:	e1e03ca3 	mvn	r3, r3, lsr #25
  125a9c:	e6ef2073 	uxtb	r2, r3
  125aa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125aa4:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  125aa8:	e3e03000 	mvn	r3, #0
  125aac:	ea0000b7 	b	125d90 <tcp_enqueue_flags+0x3ac>
  }

  if (flags & TCP_SYN) {
  125ab0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125ab4:	e2033002 	and	r3, r3, #2
  125ab8:	e3530000 	cmp	r3, #0
  125abc:	0a000001 	beq	125ac8 <tcp_enqueue_flags+0xe4>
    optflags = TF_SEG_OPTS_MSS;
  125ac0:	e3a03001 	mov	r3, #1
  125ac4:	e54b3005 	strb	r3, [fp, #-5]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  125ac8:	e55b3005 	ldrb	r3, [fp, #-5]
  125acc:	e1a03103 	lsl	r3, r3, #2
  125ad0:	e6ef3073 	uxtb	r3, r3
  125ad4:	e2033004 	and	r3, r3, #4
  125ad8:	e54b300d 	strb	r3, [fp, #-13]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  125adc:	e55b300d 	ldrb	r3, [fp, #-13]
  125ae0:	e6ff3073 	uxth	r3, r3
  125ae4:	e3a02000 	mov	r2, #0
  125ae8:	e1a01003 	mov	r1, r3
  125aec:	e3a00000 	mov	r0, #0
  125af0:	ebffd1d8 	bl	11a258 <pbuf_alloc>
  125af4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  125af8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125afc:	e3530000 	cmp	r3, #0
  125b00:	1a000010 	bne	125b48 <tcp_enqueue_flags+0x164>
    pcb->flags |= TF_NAGLEMEMERR;
  125b04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b08:	e5d3301e 	ldrb	r3, [r3, #30]
  125b0c:	e1e03c83 	mvn	r3, r3, lsl #25
  125b10:	e1e03ca3 	mvn	r3, r3, lsr #25
  125b14:	e6ef2073 	uxtb	r2, r3
  125b18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b1c:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  125b20:	e30c3a48 	movw	r3, #51784	; 0xca48
  125b24:	e3403015 	movt	r3, #21
  125b28:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125b2c:	e2833001 	add	r3, r3, #1
  125b30:	e6ff2073 	uxth	r2, r3
  125b34:	e30c3a48 	movw	r3, #51784	; 0xca48
  125b38:	e3403015 	movt	r3, #21
  125b3c:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  125b40:	e3e03000 	mvn	r3, #0
  125b44:	ea000091 	b	125d90 <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
  125b48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125b4c:	e1d320ba 	ldrh	r2, [r3, #10]
  125b50:	e55b300d 	ldrb	r3, [fp, #-13]
  125b54:	e6ff3073 	uxth	r3, r3
  125b58:	e1520003 	cmp	r2, r3
  125b5c:	2a000006 	bcs	125b7c <tcp_enqueue_flags+0x198>
  125b60:	e30808f8 	movw	r0, #35064	; 0x88f8
  125b64:	e3400014 	movt	r0, #20
  125b68:	ebff7569 	bl	103114 <rt_kprintf>
  125b6c:	e3001341 	movw	r1, #833	; 0x341
  125b70:	e30805f8 	movw	r0, #34296	; 0x85f8
  125b74:	e3400014 	movt	r0, #20
  125b78:	ebff954d 	bl	10b0b4 <sys_arch_assert>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  125b7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b80:	e593105c 	ldr	r1, [r3, #92]	; 0x5c
  125b84:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  125b88:	e55b3005 	ldrb	r3, [fp, #-5]
  125b8c:	e58d3000 	str	r3, [sp]
  125b90:	e1a03001 	mov	r3, r1
  125b94:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  125b98:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125b9c:	ebfffb6d 	bl	124958 <tcp_create_segment>
  125ba0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  125ba4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125ba8:	e3530000 	cmp	r3, #0
  125bac:	1a000010 	bne	125bf4 <tcp_enqueue_flags+0x210>
    pcb->flags |= TF_NAGLEMEMERR;
  125bb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125bb4:	e5d3301e 	ldrb	r3, [r3, #30]
  125bb8:	e1e03c83 	mvn	r3, r3, lsl #25
  125bbc:	e1e03ca3 	mvn	r3, r3, lsr #25
  125bc0:	e6ef2073 	uxtb	r2, r3
  125bc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125bc8:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  125bcc:	e30c3a48 	movw	r3, #51784	; 0xca48
  125bd0:	e3403015 	movt	r3, #21
  125bd4:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125bd8:	e2833001 	add	r3, r3, #1
  125bdc:	e6ff2073 	uxth	r2, r3
  125be0:	e30c3a48 	movw	r3, #51784	; 0xca48
  125be4:	e3403015 	movt	r3, #21
  125be8:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  125bec:	e3e03000 	mvn	r3, #0
  125bf0:	ea000066 	b	125d90 <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  125bf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125bf8:	e593300c 	ldr	r3, [r3, #12]
  125bfc:	e2033003 	and	r3, r3, #3
  125c00:	e3530000 	cmp	r3, #0
  125c04:	0a000006 	beq	125c24 <tcp_enqueue_flags+0x240>
  125c08:	e3080934 	movw	r0, #35124	; 0x8934
  125c0c:	e3400014 	movt	r0, #20
  125c10:	ebff753f 	bl	103114 <rt_kprintf>
  125c14:	e3001349 	movw	r1, #841	; 0x349
  125c18:	e30805f8 	movw	r0, #34296	; 0x85f8
  125c1c:	e3400014 	movt	r0, #20
  125c20:	ebff9523 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
  125c24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125c28:	e1d330b8 	ldrh	r3, [r3, #8]
  125c2c:	e3530000 	cmp	r3, #0
  125c30:	0a000006 	beq	125c50 <tcp_enqueue_flags+0x26c>
  125c34:	e308094c 	movw	r0, #35148	; 0x894c
  125c38:	e3400014 	movt	r0, #20
  125c3c:	ebff7534 	bl	103114 <rt_kprintf>
  125c40:	e300134a 	movw	r1, #842	; 0x34a
  125c44:	e30805f8 	movw	r0, #34296	; 0x85f8
  125c48:	e3400014 	movt	r0, #20
  125c4c:	ebff9518 	bl	10b0b4 <sys_arch_assert>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  125c50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c54:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125c58:	e3530000 	cmp	r3, #0
  125c5c:	1a000003 	bne	125c70 <tcp_enqueue_flags+0x28c>
    pcb->unsent = seg;
  125c60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c64:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  125c68:	e583206c 	str	r2, [r3, #108]	; 0x6c
  125c6c:	ea00000d 	b	125ca8 <tcp_enqueue_flags+0x2c4>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  125c70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c74:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125c78:	e50b300c 	str	r3, [fp, #-12]
  125c7c:	ea000002 	b	125c8c <tcp_enqueue_flags+0x2a8>
  125c80:	e51b300c 	ldr	r3, [fp, #-12]
  125c84:	e5933000 	ldr	r3, [r3]
  125c88:	e50b300c 	str	r3, [fp, #-12]
  125c8c:	e51b300c 	ldr	r3, [fp, #-12]
  125c90:	e5933000 	ldr	r3, [r3]
  125c94:	e3530000 	cmp	r3, #0
  125c98:	1afffff8 	bne	125c80 <tcp_enqueue_flags+0x29c>
    useg->next = seg;
  125c9c:	e51b300c 	ldr	r3, [fp, #-12]
  125ca0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  125ca4:	e5832000 	str	r2, [r3]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  125ca8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125cac:	e3a02000 	mov	r2, #0
  125cb0:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  125cb4:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125cb8:	e2033002 	and	r3, r3, #2
  125cbc:	e3530000 	cmp	r3, #0
  125cc0:	1a000003 	bne	125cd4 <tcp_enqueue_flags+0x2f0>
  125cc4:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125cc8:	e2033001 	and	r3, r3, #1
  125ccc:	e3530000 	cmp	r3, #0
  125cd0:	0a000004 	beq	125ce8 <tcp_enqueue_flags+0x304>
    pcb->snd_lbb++;
  125cd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125cd8:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
  125cdc:	e2832001 	add	r2, r3, #1
  125ce0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ce4:	e583205c 	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
  125ce8:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125cec:	e2033001 	and	r3, r3, #1
  125cf0:	e3530000 	cmp	r3, #0
  125cf4:	0a000005 	beq	125d10 <tcp_enqueue_flags+0x32c>
    pcb->flags |= TF_FIN;
  125cf8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125cfc:	e5d3301e 	ldrb	r3, [r3, #30]
  125d00:	e3833020 	orr	r3, r3, #32
  125d04:	e6ef2073 	uxtb	r2, r3
  125d08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d0c:	e5c3201e 	strb	r2, [r3, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  125d10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125d14:	e5933004 	ldr	r3, [r3, #4]
  125d18:	e1a00003 	mov	r0, r3
  125d1c:	ebffd4d9 	bl	11b088 <pbuf_clen>
  125d20:	e1a03000 	mov	r3, r0
  125d24:	e1a02003 	mov	r2, r3
  125d28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d2c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125d30:	e0823003 	add	r3, r2, r3
  125d34:	e6ff2073 	uxth	r2, r3
  125d38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d3c:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  125d40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d44:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125d48:	e3530000 	cmp	r3, #0
  125d4c:	0a00000e 	beq	125d8c <tcp_enqueue_flags+0x3a8>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
  125d50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d54:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125d58:	e3530000 	cmp	r3, #0
  125d5c:	1a00000a 	bne	125d8c <tcp_enqueue_flags+0x3a8>
  125d60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d64:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125d68:	e3530000 	cmp	r3, #0
  125d6c:	1a000006 	bne	125d8c <tcp_enqueue_flags+0x3a8>
  125d70:	e3080978 	movw	r0, #35192	; 0x8978
  125d74:	e3400014 	movt	r0, #20
  125d78:	ebff74e5 	bl	103114 <rt_kprintf>
  125d7c:	e300136d 	movw	r1, #877	; 0x36d
  125d80:	e30805f8 	movw	r0, #34296	; 0x85f8
  125d84:	e3400014 	movt	r0, #20
  125d88:	ebff94c9 	bl	10b0b4 <sys_arch_assert>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  125d8c:	e3a03000 	mov	r3, #0
}
  125d90:	e1a00003 	mov	r0, r3
  125d94:	e24bd004 	sub	sp, fp, #4
  125d98:	e8bd8800 	pop	{fp, pc}

00125d9c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  125d9c:	e92d4810 	push	{r4, fp, lr}
  125da0:	e28db008 	add	fp, sp, #8
  125da4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  125da8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
  125dac:	e3a03000 	mov	r3, #0
  125db0:	e54b300e 	strb	r3, [fp, #-14]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
  125db4:	e55b300e 	ldrb	r3, [fp, #-14]
  125db8:	e6ff4073 	uxth	r4, r3
  125dbc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125dc0:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  125dc4:	e1a00003 	mov	r0, r3
  125dc8:	ebffc1fe 	bl	1165c8 <lwip_htonl>
  125dcc:	e1a03000 	mov	r3, r0
  125dd0:	e3a02000 	mov	r2, #0
  125dd4:	e1a01004 	mov	r1, r4
  125dd8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125ddc:	ebfffa36 	bl	1246bc <tcp_output_alloc_header>
  125de0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (p == NULL) {
  125de4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125de8:	e3530000 	cmp	r3, #0
  125dec:	1a000007 	bne	125e10 <tcp_send_empty_ack+0x74>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  125df0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125df4:	e5d3301e 	ldrb	r3, [r3, #30]
  125df8:	e3833003 	orr	r3, r3, #3
  125dfc:	e6ef2073 	uxtb	r2, r3
  125e00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e04:	e5c3201e 	strb	r2, [r3, #30]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  125e08:	e3e03001 	mvn	r3, #1
  125e0c:	ea000040 	b	125f14 <tcp_send_empty_ack+0x178>
  }
#if LWIP_TCP_TIMESTAMPS || CHECKSUM_GEN_TCP
  tcphdr = (struct tcp_hdr *)p->payload;
  125e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125e14:	e5933004 	ldr	r3, [r3, #4]
  125e18:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  125e1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e20:	e2833004 	add	r3, r3, #4
  125e24:	e1a00003 	mov	r0, r3
  125e28:	eb002cca 	bl	131158 <ip4_route>
  125e2c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (netif == NULL) {
  125e30:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125e34:	e3530000 	cmp	r3, #0
  125e38:	1a000002 	bne	125e48 <tcp_send_empty_ack+0xac>
    err = ERR_RTE;
  125e3c:	e3e03003 	mvn	r3, #3
  125e40:	e54b300d 	strb	r3, [fp, #-13]
  125e44:	ea00001f 	b	125ec8 <tcp_send_empty_ack+0x12c>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  125e48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125e4c:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  125e50:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  125e54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e58:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  125e5c:	e58d3000 	str	r3, [sp]
  125e60:	e1a03001 	mov	r3, r1
  125e64:	e3a01006 	mov	r1, #6
  125e68:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125e6c:	ebffc9e8 	bl	118614 <ip_chksum_pseudo>
  125e70:	e1a03000 	mov	r3, r0
  125e74:	e1a02003 	mov	r2, r3
  125e78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125e7c:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
  125e80:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  125e84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e88:	e2830004 	add	r0, r3, #4
  125e8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e90:	e5d3c00a 	ldrb	ip, [r3, #10]
  125e94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e98:	e5d33009 	ldrb	r3, [r3, #9]
  125e9c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  125ea0:	e58d2008 	str	r2, [sp, #8]
  125ea4:	e3a02006 	mov	r2, #6
  125ea8:	e58d2004 	str	r2, [sp, #4]
  125eac:	e58d3000 	str	r3, [sp]
  125eb0:	e1a0300c 	mov	r3, ip
  125eb4:	e1a02000 	mov	r2, r0
  125eb8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125ebc:	eb002f7e 	bl	131cbc <ip4_output_if>
  125ec0:	e1a03000 	mov	r3, r0
  125ec4:	e54b300d 	strb	r3, [fp, #-13]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  125ec8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125ecc:	ebffd3e8 	bl	11ae74 <pbuf_free>

  if (err != ERR_OK) {
  125ed0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  125ed4:	e3530000 	cmp	r3, #0
  125ed8:	0a000006 	beq	125ef8 <tcp_send_empty_ack+0x15c>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  125edc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ee0:	e5d3301e 	ldrb	r3, [r3, #30]
  125ee4:	e3833003 	orr	r3, r3, #3
  125ee8:	e6ef2073 	uxtb	r2, r3
  125eec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ef0:	e5c3201e 	strb	r2, [r3, #30]
  125ef4:	ea000005 	b	125f10 <tcp_send_empty_ack+0x174>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  125ef8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125efc:	e5d3301e 	ldrb	r3, [r3, #30]
  125f00:	e3c33003 	bic	r3, r3, #3
  125f04:	e6ef2073 	uxtb	r2, r3
  125f08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f0c:	e5c3201e 	strb	r2, [r3, #30]
  }

  return err;
  125f10:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  125f14:	e1a00003 	mov	r0, r3
  125f18:	e24bd008 	sub	sp, fp, #8
  125f1c:	e8bd8810 	pop	{r4, fp, pc}

00125f20 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
  125f20:	e92d4830 	push	{r4, r5, fp, lr}
  125f24:	e28db00c 	add	fp, sp, #12
  125f28:	e24dd028 	sub	sp, sp, #40	; 0x28
  125f2c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
  125f30:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f34:	e5933014 	ldr	r3, [r3, #20]
  125f38:	e3530001 	cmp	r3, #1
  125f3c:	1a000006 	bne	125f5c <tcp_output+0x3c>
  125f40:	e30809a0 	movw	r0, #35232	; 0x89a0
  125f44:	e3400014 	movt	r0, #20
  125f48:	ebff7471 	bl	103114 <rt_kprintf>
  125f4c:	e30013ed 	movw	r1, #1005	; 0x3ed
  125f50:	e30805f8 	movw	r0, #34296	; 0x85f8
  125f54:	e3400014 	movt	r0, #20
  125f58:	ebff9455 	bl	10b0b4 <sys_arch_assert>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  125f5c:	e30c3c4c 	movw	r3, #52300	; 0xcc4c
  125f60:	e3403015 	movt	r3, #21
  125f64:	e5933000 	ldr	r3, [r3]
  125f68:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  125f6c:	e1520003 	cmp	r2, r3
  125f70:	1a000001 	bne	125f7c <tcp_output+0x5c>
    return ERR_OK;
  125f74:	e3a03000 	mov	r3, #0
  125f78:	ea000196 	b	1265d8 <tcp_output+0x6b8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  125f7c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f80:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  125f84:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f88:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  125f8c:	e1520003 	cmp	r2, r3
  125f90:	2a000002 	bcs	125fa0 <tcp_output+0x80>
  125f94:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f98:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  125f9c:	ea000001 	b	125fa8 <tcp_output+0x88>
  125fa0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fa4:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  125fa8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  seg = pcb->unsent;
  125fac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fb0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125fb4:	e50b3010 	str	r3, [fp, #-16]
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  125fb8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fbc:	e5d3301e 	ldrb	r3, [r3, #30]
  125fc0:	e2033002 	and	r3, r3, #2
  125fc4:	e3530000 	cmp	r3, #0
  125fc8:	0a000015 	beq	126024 <tcp_output+0x104>
  125fcc:	e51b3010 	ldr	r3, [fp, #-16]
  125fd0:	e3530000 	cmp	r3, #0
  125fd4:	0a00000e 	beq	126014 <tcp_output+0xf4>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  125fd8:	e51b3010 	ldr	r3, [fp, #-16]
  125fdc:	e593300c 	ldr	r3, [r3, #12]
  125fe0:	e5933004 	ldr	r3, [r3, #4]
  125fe4:	e1a00003 	mov	r0, r3
  125fe8:	ebffc176 	bl	1165c8 <lwip_htonl>
  125fec:	e1a02000 	mov	r2, r0
  125ff0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ff4:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  125ff8:	e0423003 	sub	r3, r2, r3
  125ffc:	e51b2010 	ldr	r2, [fp, #-16]
  126000:	e1d220b8 	ldrh	r2, [r2, #8]
  126004:	e0833002 	add	r3, r3, r2
     (seg == NULL ||
  126008:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12600c:	e1520003 	cmp	r2, r3
  126010:	2a000003 	bcs	126024 <tcp_output+0x104>
     return tcp_send_empty_ack(pcb);
  126014:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  126018:	ebffff5f 	bl	125d9c <tcp_send_empty_ack>
  12601c:	e1a03000 	mov	r3, r0
  126020:	ea00016c 	b	1265d8 <tcp_output+0x6b8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  126024:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126028:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12602c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (useg != NULL) {
  126030:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126034:	e3530000 	cmp	r3, #0
  126038:	0a000007 	beq	12605c <tcp_output+0x13c>
    for (; useg->next != NULL; useg = useg->next);
  12603c:	ea000002 	b	12604c <tcp_output+0x12c>
  126040:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126044:	e5933000 	ldr	r3, [r3]
  126048:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12604c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126050:	e5933000 	ldr	r3, [r3]
  126054:	e3530000 	cmp	r3, #0
  126058:	1afffff8 	bne	126040 <tcp_output+0x120>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  12605c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126060:	e2833004 	add	r3, r3, #4
  126064:	e1a00003 	mov	r0, r3
  126068:	eb002c3a 	bl	131158 <ip4_route>
  12606c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (netif == NULL) {
  126070:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126074:	e3530000 	cmp	r3, #0
  126078:	1a000001 	bne	126084 <tcp_output+0x164>
    return ERR_RTE;
  12607c:	e3e03003 	mvn	r3, #3
  126080:	ea000154 	b	1265d8 <tcp_output+0x6b8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
  126084:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126088:	e3530000 	cmp	r3, #0
  12608c:	0a000003 	beq	1260a0 <tcp_output+0x180>
  126090:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126094:	e5933000 	ldr	r3, [r3]
  126098:	e3530000 	cmp	r3, #0
  12609c:	1a000010 	bne	1260e4 <tcp_output+0x1c4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
  1260a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1260a4:	e3530000 	cmp	r3, #0
  1260a8:	0a000002 	beq	1260b8 <tcp_output+0x198>
  1260ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1260b0:	e2833004 	add	r3, r3, #4
  1260b4:	ea000000 	b	1260bc <tcp_output+0x19c>
  1260b8:	e3a03000 	mov	r3, #0
  1260bc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (local_ip == NULL) {
  1260c0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1260c4:	e3530000 	cmp	r3, #0
  1260c8:	1a000001 	bne	1260d4 <tcp_output+0x1b4>
      return ERR_RTE;
  1260cc:	e3e03003 	mvn	r3, #3
  1260d0:	ea000140 	b	1265d8 <tcp_output+0x6b8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
  1260d4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1260d8:	e5932000 	ldr	r2, [r3]
  1260dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1260e0:	e5832000 	str	r2, [r3]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
  1260e4:	e51b3010 	ldr	r3, [fp, #-16]
  1260e8:	e3530000 	cmp	r3, #0
  1260ec:	0a000113 	beq	126540 <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  1260f0:	e51b3010 	ldr	r3, [fp, #-16]
  1260f4:	e593300c 	ldr	r3, [r3, #12]
  1260f8:	e5933004 	ldr	r3, [r3, #4]
  1260fc:	e1a00003 	mov	r0, r3
  126100:	ebffc130 	bl	1165c8 <lwip_htonl>
  126104:	e1a02000 	mov	r2, r0
  126108:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12610c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  126110:	e0423003 	sub	r3, r2, r3
  126114:	e51b2010 	ldr	r2, [fp, #-16]
  126118:	e1d220b8 	ldrh	r2, [r2, #8]
  12611c:	e0833002 	add	r3, r3, r2
  if (seg != NULL &&
  126120:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  126124:	e1520003 	cmp	r2, r3
  126128:	2a000104 	bcs	126540 <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  12612c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126130:	e3530000 	cmp	r3, #0
  126134:	0a000101 	beq	126540 <tcp_output+0x620>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
  126138:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12613c:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126140:	e1a02003 	mov	r2, r3
  126144:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126148:	e1530002 	cmp	r3, r2
  12614c:	1a0000fb 	bne	126540 <tcp_output+0x620>
  126150:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126154:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126158:	e3530000 	cmp	r3, #0
  12615c:	1a0000f7 	bne	126540 <tcp_output+0x620>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
  126160:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126164:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  126168:	e3530000 	cmp	r3, #0
  12616c:	1a000106 	bne	12658c <tcp_output+0x66c>
      pcb->persist_cnt = 0;
  126170:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126174:	e3a02000 	mov	r2, #0
  126178:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
      pcb->persist_backoff = 1;
  12617c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126180:	e3a02001 	mov	r2, #1
  126184:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
    }
    goto output_done;
  126188:	ea0000ff 	b	12658c <tcp_output+0x66c>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
  12618c:	e51b3010 	ldr	r3, [fp, #-16]
  126190:	e593300c 	ldr	r3, [r3, #12]
  126194:	e1d330bc 	ldrh	r3, [r3, #12]
  126198:	e6ff3073 	uxth	r3, r3
  12619c:	e1a00003 	mov	r0, r3
  1261a0:	ebffc0fc 	bl	116598 <lwip_htons>
  1261a4:	e1a03000 	mov	r3, r0
  1261a8:	e2033004 	and	r3, r3, #4
  1261ac:	e3530000 	cmp	r3, #0
  1261b0:	0a000006 	beq	1261d0 <tcp_output+0x2b0>
  1261b4:	e30809c8 	movw	r0, #35272	; 0x89c8
  1261b8:	e3400014 	movt	r0, #20
  1261bc:	ebff73d4 	bl	103114 <rt_kprintf>
  1261c0:	e3001446 	movw	r1, #1094	; 0x446
  1261c4:	e30805f8 	movw	r0, #34296	; 0x85f8
  1261c8:	e3400014 	movt	r0, #20
  1261cc:	ebff93b8 	bl	10b0b4 <sys_arch_assert>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
  1261d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261d4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1261d8:	e3530000 	cmp	r3, #0
  1261dc:	0a00001c 	beq	126254 <tcp_output+0x334>
  1261e0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261e4:	e5d3301e 	ldrb	r3, [r3, #30]
  1261e8:	e2033044 	and	r3, r3, #68	; 0x44
  1261ec:	e3530000 	cmp	r3, #0
  1261f0:	1a000017 	bne	126254 <tcp_output+0x334>
  1261f4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261f8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1261fc:	e3530000 	cmp	r3, #0
  126200:	0a00000b 	beq	126234 <tcp_output+0x314>
  126204:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126208:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12620c:	e5933000 	ldr	r3, [r3]
  126210:	e3530000 	cmp	r3, #0
  126214:	1a00000e 	bne	126254 <tcp_output+0x334>
  126218:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12621c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126220:	e1d320b8 	ldrh	r2, [r3, #8]
  126224:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126228:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  12622c:	e1520003 	cmp	r2, r3
  126230:	2a000007 	bcs	126254 <tcp_output+0x334>
  126234:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126238:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  12623c:	e3530000 	cmp	r3, #0
  126240:	0a000003 	beq	126254 <tcp_output+0x334>
  126244:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126248:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  12624c:	e3530015 	cmp	r3, #21
  126250:	9a000001 	bls	12625c <tcp_output+0x33c>
  126254:	e3a03001 	mov	r3, #1
  126258:	ea000000 	b	126260 <tcp_output+0x340>
  12625c:	e3a03000 	mov	r3, #0
  126260:	e3530000 	cmp	r3, #0
  126264:	1a000004 	bne	12627c <tcp_output+0x35c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
  126268:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12626c:	e5d3301e 	ldrb	r3, [r3, #30]
  126270:	e20330a0 	and	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
  126274:	e3530000 	cmp	r3, #0
  126278:	0a0000c5 	beq	126594 <tcp_output+0x674>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
  12627c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126280:	e5933014 	ldr	r3, [r3, #20]
  126284:	e3530002 	cmp	r3, #2
  126288:	0a00000c 	beq	1262c0 <tcp_output+0x3a0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  12628c:	e51b3010 	ldr	r3, [fp, #-16]
  126290:	e593300c 	ldr	r3, [r3, #12]
  126294:	e1d330bc 	ldrh	r3, [r3, #12]
  126298:	e6ff4073 	uxth	r4, r3
  12629c:	e3a00010 	mov	r0, #16
  1262a0:	ebffc0bc 	bl	116598 <lwip_htons>
  1262a4:	e1a03000 	mov	r3, r0
  1262a8:	e1a02003 	mov	r2, r3
  1262ac:	e51b3010 	ldr	r3, [fp, #-16]
  1262b0:	e593300c 	ldr	r3, [r3, #12]
  1262b4:	e1842002 	orr	r2, r4, r2
  1262b8:	e6ff2072 	uxth	r2, r2
  1262bc:	e1c320bc 	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
  1262c0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1262c4:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  1262c8:	e51b0010 	ldr	r0, [fp, #-16]
  1262cc:	eb0000c4 	bl	1265e4 <tcp_output_segment>
  1262d0:	e1a03000 	mov	r3, r0
  1262d4:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    if (err != ERR_OK) {
  1262d8:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  1262dc:	e3530000 	cmp	r3, #0
  1262e0:	0a000008 	beq	126308 <tcp_output+0x3e8>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
  1262e4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1262e8:	e5d3301e 	ldrb	r3, [r3, #30]
  1262ec:	e1e03c83 	mvn	r3, r3, lsl #25
  1262f0:	e1e03ca3 	mvn	r3, r3, lsr #25
  1262f4:	e6ef2073 	uxtb	r2, r3
  1262f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1262fc:	e5c3201e 	strb	r2, [r3, #30]
      return err;
  126300:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  126304:	ea0000b3 	b	1265d8 <tcp_output+0x6b8>
    }
    pcb->unsent = seg->next;
  126308:	e51b3010 	ldr	r3, [fp, #-16]
  12630c:	e5932000 	ldr	r2, [r3]
  126310:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126314:	e583206c 	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
  126318:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12631c:	e5933014 	ldr	r3, [r3, #20]
  126320:	e3530002 	cmp	r3, #2
  126324:	0a000005 	beq	126340 <tcp_output+0x420>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  126328:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12632c:	e5d3301e 	ldrb	r3, [r3, #30]
  126330:	e3c33003 	bic	r3, r3, #3
  126334:	e6ef2073 	uxtb	r2, r3
  126338:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12633c:	e5c3201e 	strb	r2, [r3, #30]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  126340:	e51b3010 	ldr	r3, [fp, #-16]
  126344:	e593300c 	ldr	r3, [r3, #12]
  126348:	e5933004 	ldr	r3, [r3, #4]
  12634c:	e1a00003 	mov	r0, r3
  126350:	ebffc09c 	bl	1165c8 <lwip_htonl>
  126354:	e1a04000 	mov	r4, r0
  126358:	e51b3010 	ldr	r3, [fp, #-16]
  12635c:	e1d330b8 	ldrh	r3, [r3, #8]
  126360:	e1a05003 	mov	r5, r3
  126364:	e51b3010 	ldr	r3, [fp, #-16]
  126368:	e593300c 	ldr	r3, [r3, #12]
  12636c:	e1d330bc 	ldrh	r3, [r3, #12]
  126370:	e6ff3073 	uxth	r3, r3
  126374:	e1a00003 	mov	r0, r3
  126378:	ebffc086 	bl	116598 <lwip_htons>
  12637c:	e1a03000 	mov	r3, r0
  126380:	e2033003 	and	r3, r3, #3
  126384:	e3530000 	cmp	r3, #0
  126388:	0a000001 	beq	126394 <tcp_output+0x474>
  12638c:	e3a03001 	mov	r3, #1
  126390:	ea000000 	b	126398 <tcp_output+0x478>
  126394:	e3a03000 	mov	r3, #0
  126398:	e0833005 	add	r3, r3, r5
  12639c:	e0843003 	add	r3, r4, r3
  1263a0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  1263a4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1263a8:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1263ac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1263b0:	e0423003 	sub	r3, r2, r3
  1263b4:	e3530000 	cmp	r3, #0
  1263b8:	aa000002 	bge	1263c8 <tcp_output+0x4a8>
      pcb->snd_nxt = snd_nxt;
  1263bc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1263c0:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1263c4:	e5832050 	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
  1263c8:	e51b3010 	ldr	r3, [fp, #-16]
  1263cc:	e1d330b8 	ldrh	r3, [r3, #8]
  1263d0:	e1a04003 	mov	r4, r3
  1263d4:	e51b3010 	ldr	r3, [fp, #-16]
  1263d8:	e593300c 	ldr	r3, [r3, #12]
  1263dc:	e1d330bc 	ldrh	r3, [r3, #12]
  1263e0:	e6ff3073 	uxth	r3, r3
  1263e4:	e1a00003 	mov	r0, r3
  1263e8:	ebffc06a 	bl	116598 <lwip_htons>
  1263ec:	e1a03000 	mov	r3, r0
  1263f0:	e2033003 	and	r3, r3, #3
  1263f4:	e3530000 	cmp	r3, #0
  1263f8:	0a000001 	beq	126404 <tcp_output+0x4e4>
  1263fc:	e3a03001 	mov	r3, #1
  126400:	ea000000 	b	126408 <tcp_output+0x4e8>
  126404:	e3a03000 	mov	r3, #0
  126408:	e0833004 	add	r3, r3, r4
  12640c:	e3530000 	cmp	r3, #0
  126410:	0a000045 	beq	12652c <tcp_output+0x60c>
      seg->next = NULL;
  126414:	e51b3010 	ldr	r3, [fp, #-16]
  126418:	e3a02000 	mov	r2, #0
  12641c:	e5832000 	str	r2, [r3]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
  126420:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126424:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126428:	e3530000 	cmp	r3, #0
  12642c:	1a000005 	bne	126448 <tcp_output+0x528>
        pcb->unacked = seg;
  126430:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126434:	e51b2010 	ldr	r2, [fp, #-16]
  126438:	e5832070 	str	r2, [r3, #112]	; 0x70
        useg = seg;
  12643c:	e51b3010 	ldr	r3, [fp, #-16]
  126440:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  126444:	ea00003a 	b	126534 <tcp_output+0x614>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
  126448:	e51b3010 	ldr	r3, [fp, #-16]
  12644c:	e593300c 	ldr	r3, [r3, #12]
  126450:	e5933004 	ldr	r3, [r3, #4]
  126454:	e1a00003 	mov	r0, r3
  126458:	ebffc05a 	bl	1165c8 <lwip_htonl>
  12645c:	e1a04000 	mov	r4, r0
  126460:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126464:	e593300c 	ldr	r3, [r3, #12]
  126468:	e5933004 	ldr	r3, [r3, #4]
  12646c:	e1a00003 	mov	r0, r3
  126470:	ebffc054 	bl	1165c8 <lwip_htonl>
  126474:	e1a03000 	mov	r3, r0
  126478:	e0443003 	sub	r3, r4, r3
  12647c:	e3530000 	cmp	r3, #0
  126480:	aa000022 	bge	126510 <tcp_output+0x5f0>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
  126484:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126488:	e2833070 	add	r3, r3, #112	; 0x70
  12648c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  126490:	ea000002 	b	1264a0 <tcp_output+0x580>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
  126494:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126498:	e5933000 	ldr	r3, [r3]
  12649c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  1264a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1264a4:	e5933000 	ldr	r3, [r3]
  1264a8:	e3530000 	cmp	r3, #0
  1264ac:	0a00000f 	beq	1264f0 <tcp_output+0x5d0>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  1264b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1264b4:	e5933000 	ldr	r3, [r3]
  1264b8:	e593300c 	ldr	r3, [r3, #12]
  1264bc:	e5933004 	ldr	r3, [r3, #4]
  1264c0:	e1a00003 	mov	r0, r3
  1264c4:	ebffc03f 	bl	1165c8 <lwip_htonl>
  1264c8:	e1a04000 	mov	r4, r0
  1264cc:	e51b3010 	ldr	r3, [fp, #-16]
  1264d0:	e593300c 	ldr	r3, [r3, #12]
  1264d4:	e5933004 	ldr	r3, [r3, #4]
  1264d8:	e1a00003 	mov	r0, r3
  1264dc:	ebffc039 	bl	1165c8 <lwip_htonl>
  1264e0:	e1a03000 	mov	r3, r0
  1264e4:	e0443003 	sub	r3, r4, r3
          while (*cur_seg &&
  1264e8:	e3530000 	cmp	r3, #0
  1264ec:	baffffe8 	blt	126494 <tcp_output+0x574>
          }
          seg->next = (*cur_seg);
  1264f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1264f4:	e5932000 	ldr	r2, [r3]
  1264f8:	e51b3010 	ldr	r3, [fp, #-16]
  1264fc:	e5832000 	str	r2, [r3]
          (*cur_seg) = seg;
  126500:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126504:	e51b2010 	ldr	r2, [fp, #-16]
  126508:	e5832000 	str	r2, [r3]
  12650c:	ea000008 	b	126534 <tcp_output+0x614>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
  126510:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126514:	e51b2010 	ldr	r2, [fp, #-16]
  126518:	e5832000 	str	r2, [r3]
          useg = useg->next;
  12651c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126520:	e5933000 	ldr	r3, [r3]
  126524:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  126528:	ea000001 	b	126534 <tcp_output+0x614>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
  12652c:	e51b0010 	ldr	r0, [fp, #-16]
  126530:	ebffe3c3 	bl	11f444 <tcp_seg_free>
    }
    seg = pcb->unsent;
  126534:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126538:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12653c:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL &&
  126540:	e51b3010 	ldr	r3, [fp, #-16]
  126544:	e3530000 	cmp	r3, #0
  126548:	0a000013 	beq	12659c <tcp_output+0x67c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  12654c:	e51b3010 	ldr	r3, [fp, #-16]
  126550:	e593300c 	ldr	r3, [r3, #12]
  126554:	e5933004 	ldr	r3, [r3, #4]
  126558:	e1a00003 	mov	r0, r3
  12655c:	ebffc019 	bl	1165c8 <lwip_htonl>
  126560:	e1a02000 	mov	r2, r0
  126564:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126568:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  12656c:	e0423003 	sub	r3, r2, r3
  126570:	e51b2010 	ldr	r2, [fp, #-16]
  126574:	e1d220b8 	ldrh	r2, [r2, #8]
  126578:	e0833002 	add	r3, r3, r2
  while (seg != NULL &&
  12657c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  126580:	e1520003 	cmp	r2, r3
  126584:	2affff00 	bcs	12618c <tcp_output+0x26c>
  }
output_done:
  126588:	ea000003 	b	12659c <tcp_output+0x67c>
    goto output_done;
  12658c:	e320f000 	nop	{0}
  126590:	ea000002 	b	1265a0 <tcp_output+0x680>
      break;
  126594:	e320f000 	nop	{0}
  126598:	ea000000 	b	1265a0 <tcp_output+0x680>
output_done:
  12659c:	e320f000 	nop	{0}
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
  1265a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1265a4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1265a8:	e3530000 	cmp	r3, #0
  1265ac:	1a000002 	bne	1265bc <tcp_output+0x69c>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  1265b0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1265b4:	e3a02000 	mov	r2, #0
  1265b8:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  1265bc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1265c0:	e5d3301e 	ldrb	r3, [r3, #30]
  1265c4:	e203307f 	and	r3, r3, #127	; 0x7f
  1265c8:	e6ef2073 	uxtb	r2, r3
  1265cc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1265d0:	e5c3201e 	strb	r2, [r3, #30]
  return ERR_OK;
  1265d4:	e3a03000 	mov	r3, #0
}
  1265d8:	e1a00003 	mov	r0, r3
  1265dc:	e24bd00c 	sub	sp, fp, #12
  1265e0:	e8bd8830 	pop	{r4, r5, fp, pc}

001265e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
  1265e4:	e92d4810 	push	{r4, fp, lr}
  1265e8:	e28db008 	add	fp, sp, #8
  1265ec:	e24dd034 	sub	sp, sp, #52	; 0x34
  1265f0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1265f4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1265f8:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
  1265fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126600:	e5933004 	ldr	r3, [r3, #4]
  126604:	e1d330be 	ldrh	r3, [r3, #14]
  126608:	e3530001 	cmp	r3, #1
  12660c:	0a000001 	beq	126618 <tcp_output_segment+0x34>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
  126610:	e3a03000 	mov	r3, #0
  126614:	ea0000a4 	b	1268ac <tcp_output_segment+0x2c8>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  126618:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12661c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  126620:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126624:	e593400c 	ldr	r4, [r3, #12]
  126628:	e1a00002 	mov	r0, r2
  12662c:	ebffbfe5 	bl	1165c8 <lwip_htonl>
  126630:	e1a03000 	mov	r3, r0
  126634:	e5843008 	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  126638:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12663c:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  126640:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126644:	e593400c 	ldr	r4, [r3, #12]
  126648:	e1a00002 	mov	r0, r2
  12664c:	ebffbfd1 	bl	116598 <lwip_htons>
  126650:	e1a03000 	mov	r3, r0
  126654:	e1c430be 	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  126658:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12665c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  126660:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  126664:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  126668:	e0832002 	add	r2, r3, r2
  12666c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126670:	e5832030 	str	r2, [r3, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  126674:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126678:	e593300c 	ldr	r3, [r3, #12]
  12667c:	e2833014 	add	r3, r3, #20
  126680:	e50b3010 	str	r3, [fp, #-16]
  if (seg->flags & TF_SEG_OPTS_MSS) {
  126684:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126688:	e5d3300a 	ldrb	r3, [r3, #10]
  12668c:	e2033001 	and	r3, r3, #1
  126690:	e3530000 	cmp	r3, #0
  126694:	0a000010 	beq	1266dc <tcp_output_segment+0xf8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
  126698:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12669c:	e2833004 	add	r3, r3, #4
  1266a0:	e1a01003 	mov	r1, r3
  1266a4:	e30005b4 	movw	r0, #1460	; 0x5b4
  1266a8:	ebffe665 	bl	120044 <tcp_eff_send_mss_impl>
  1266ac:	e1a03000 	mov	r3, r0
  1266b0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
  1266b4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1266b8:	e3833781 	orr	r3, r3, #33816576	; 0x2040000
  1266bc:	e1a00003 	mov	r0, r3
  1266c0:	ebffbfc0 	bl	1165c8 <lwip_htonl>
  1266c4:	e1a02000 	mov	r2, r0
  1266c8:	e51b3010 	ldr	r3, [fp, #-16]
  1266cc:	e5832000 	str	r2, [r3]
    opts += 1;
  1266d0:	e51b3010 	ldr	r3, [fp, #-16]
  1266d4:	e2833004 	add	r3, r3, #4
  1266d8:	e50b3010 	str	r3, [fp, #-16]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
  1266dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1266e0:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  1266e4:	e3530000 	cmp	r3, #0
  1266e8:	aa000002 	bge	1266f8 <tcp_output_segment+0x114>
    pcb->rtime = 0;
  1266ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1266f0:	e3a02000 	mov	r2, #0
  1266f4:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }

  if (pcb->rttest == 0) {
  1266f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1266fc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  126700:	e3530000 	cmp	r3, #0
  126704:	1a00000c 	bne	12673c <tcp_output_segment+0x158>
    pcb->rttest = tcp_ticks;
  126708:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  12670c:	e3403015 	movt	r3, #21
  126710:	e5932000 	ldr	r2, [r3]
  126714:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126718:	e5832038 	str	r2, [r3, #56]	; 0x38
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
  12671c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126720:	e593300c 	ldr	r3, [r3, #12]
  126724:	e5933004 	ldr	r3, [r3, #4]
  126728:	e1a00003 	mov	r0, r3
  12672c:	ebffbfa5 	bl	1165c8 <lwip_htonl>
  126730:	e1a02000 	mov	r2, r0
  126734:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126738:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  12673c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126740:	e593300c 	ldr	r3, [r3, #12]
  126744:	e1a02003 	mov	r2, r3
  126748:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12674c:	e5933004 	ldr	r3, [r3, #4]
  126750:	e5933004 	ldr	r3, [r3, #4]
  126754:	e0423003 	sub	r3, r2, r3
  126758:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  if (len == 0) {
  12675c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  126760:	e3530000 	cmp	r3, #0
  126764:	1a000006 	bne	126784 <tcp_output_segment+0x1a0>
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  126768:	e30c3a48 	movw	r3, #51784	; 0xca48
  12676c:	e3403015 	movt	r3, #21
  126770:	e593317c 	ldr	r3, [r3, #380]	; 0x17c
  126774:	e2832001 	add	r2, r3, #1
  126778:	e30c3a48 	movw	r3, #51784	; 0xca48
  12677c:	e3403015 	movt	r3, #21
  126780:	e583217c 	str	r2, [r3, #380]	; 0x17c
  }

  seg->p->len -= len;
  126784:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126788:	e5933004 	ldr	r3, [r3, #4]
  12678c:	e1d310ba 	ldrh	r1, [r3, #10]
  126790:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126794:	e5933004 	ldr	r3, [r3, #4]
  126798:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  12679c:	e0412002 	sub	r2, r1, r2
  1267a0:	e6ff2072 	uxth	r2, r2
  1267a4:	e1c320ba 	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
  1267a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267ac:	e5933004 	ldr	r3, [r3, #4]
  1267b0:	e1d310b8 	ldrh	r1, [r3, #8]
  1267b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267b8:	e5933004 	ldr	r3, [r3, #4]
  1267bc:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  1267c0:	e0412002 	sub	r2, r1, r2
  1267c4:	e6ff2072 	uxth	r2, r2
  1267c8:	e1c320b8 	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
  1267cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267d0:	e5933004 	ldr	r3, [r3, #4]
  1267d4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1267d8:	e592200c 	ldr	r2, [r2, #12]
  1267dc:	e5832004 	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  1267e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267e4:	e593300c 	ldr	r3, [r3, #12]
  1267e8:	e3a02000 	mov	r2, #0
  1267ec:	e5c32010 	strb	r2, [r3, #16]
  1267f0:	e3a02000 	mov	r2, #0
  1267f4:	e5c32011 	strb	r2, [r3, #17]
                  seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  1267f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267fc:	e5930004 	ldr	r0, [r3, #4]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  126800:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126804:	e5933004 	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  126808:	e1d310b8 	ldrh	r1, [r3, #8]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  12680c:	e51bc024 	ldr	ip, [fp, #-36]	; 0xffffffdc
  126810:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126814:	e2833004 	add	r3, r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  126818:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12681c:	e592400c 	ldr	r4, [r2, #12]
  126820:	e58d3000 	str	r3, [sp]
  126824:	e1a0300c 	mov	r3, ip
  126828:	e1a02001 	mov	r2, r1
  12682c:	e3a01006 	mov	r1, #6
  126830:	ebffc777 	bl	118614 <ip_chksum_pseudo>
  126834:	e1a03000 	mov	r3, r0
  126838:	e1c431b0 	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
  12683c:	e30c3a48 	movw	r3, #51784	; 0xca48
  126840:	e3403015 	movt	r3, #21
  126844:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126848:	e2833001 	add	r3, r3, #1
  12684c:	e6ff2073 	uxth	r2, r3
  126850:	e30c3a48 	movw	r3, #51784	; 0xca48
  126854:	e3403015 	movt	r3, #21
  126858:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  12685c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126860:	e5930004 	ldr	r0, [r3, #4]
  126864:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  126868:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12686c:	e283c004 	add	ip, r3, #4
  126870:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126874:	e5d3e00a 	ldrb	lr, [r3, #10]
  126878:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12687c:	e5d33009 	ldrb	r3, [r3, #9]
  126880:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  126884:	e58d2008 	str	r2, [sp, #8]
  126888:	e3a02006 	mov	r2, #6
  12688c:	e58d2004 	str	r2, [sp, #4]
  126890:	e58d3000 	str	r3, [sp]
  126894:	e1a0300e 	mov	r3, lr
  126898:	e1a0200c 	mov	r2, ip
  12689c:	eb002d06 	bl	131cbc <ip4_output_if>
  1268a0:	e1a03000 	mov	r3, r0
  1268a4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
  1268a8:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  1268ac:	e1a00003 	mov	r0, r3
  1268b0:	e24bd008 	sub	sp, fp, #8
  1268b4:	e8bd8810 	pop	{r4, fp, pc}

001268b8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  1268b8:	e92d4800 	push	{fp, lr}
  1268bc:	e28db004 	add	fp, sp, #4
  1268c0:	e24dd030 	sub	sp, sp, #48	; 0x30
  1268c4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1268c8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1268cc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1268d0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  1268d4:	e3a02000 	mov	r2, #0
  1268d8:	e3a01014 	mov	r1, #20
  1268dc:	e3a00001 	mov	r0, #1
  1268e0:	ebffce5c 	bl	11a258 <pbuf_alloc>
  1268e4:	e50b0008 	str	r0, [fp, #-8]
  if (p == NULL) {
  1268e8:	e51b3008 	ldr	r3, [fp, #-8]
  1268ec:	e3530000 	cmp	r3, #0
  1268f0:	0a00006a 	beq	126aa0 <tcp_rst+0x1e8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  1268f4:	e51b3008 	ldr	r3, [fp, #-8]
  1268f8:	e1d330ba 	ldrh	r3, [r3, #10]
  1268fc:	e3530013 	cmp	r3, #19
  126900:	8a000006 	bhi	126920 <tcp_rst+0x68>
  126904:	e30805c8 	movw	r0, #34248	; 0x85c8
  126908:	e3400014 	movt	r0, #20
  12690c:	ebff7200 	bl	103114 <rt_kprintf>
  126910:	e300154d 	movw	r1, #1357	; 0x54d
  126914:	e30805f8 	movw	r0, #34296	; 0x85f8
  126918:	e3400014 	movt	r0, #20
  12691c:	ebff91e4 	bl	10b0b4 <sys_arch_assert>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  126920:	e51b3008 	ldr	r3, [fp, #-8]
  126924:	e5933004 	ldr	r3, [r3, #4]
  126928:	e50b300c 	str	r3, [fp, #-12]
  tcphdr->src = lwip_htons(local_port);
  12692c:	e1db30b4 	ldrh	r3, [fp, #4]
  126930:	e1a00003 	mov	r0, r3
  126934:	ebffbf17 	bl	116598 <lwip_htons>
  126938:	e1a03000 	mov	r3, r0
  12693c:	e1a02003 	mov	r2, r3
  126940:	e51b300c 	ldr	r3, [fp, #-12]
  126944:	e1c320b0 	strh	r2, [r3]
  tcphdr->dest = lwip_htons(remote_port);
  126948:	e1db30b8 	ldrh	r3, [fp, #8]
  12694c:	e1a00003 	mov	r0, r3
  126950:	ebffbf10 	bl	116598 <lwip_htons>
  126954:	e1a03000 	mov	r3, r0
  126958:	e1a02003 	mov	r2, r3
  12695c:	e51b300c 	ldr	r3, [fp, #-12]
  126960:	e1c320b2 	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
  126964:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  126968:	ebffbf16 	bl	1165c8 <lwip_htonl>
  12696c:	e1a02000 	mov	r2, r0
  126970:	e51b300c 	ldr	r3, [fp, #-12]
  126974:	e5832004 	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
  126978:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12697c:	ebffbf11 	bl	1165c8 <lwip_htonl>
  126980:	e1a02000 	mov	r2, r0
  126984:	e51b300c 	ldr	r3, [fp, #-12]
  126988:	e5832008 	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  12698c:	e3050014 	movw	r0, #20500	; 0x5014
  126990:	ebffbf00 	bl	116598 <lwip_htons>
  126994:	e1a03000 	mov	r3, r0
  126998:	e1a02003 	mov	r2, r3
  12699c:	e51b300c 	ldr	r3, [fp, #-12]
  1269a0:	e1c320bc 	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
  1269a4:	e51b300c 	ldr	r3, [fp, #-12]
  1269a8:	e3a02000 	mov	r2, #0
  1269ac:	e3822020 	orr	r2, r2, #32
  1269b0:	e5c3200e 	strb	r2, [r3, #14]
  1269b4:	e3a02000 	mov	r2, #0
  1269b8:	e5c3200f 	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
  1269bc:	e51b300c 	ldr	r3, [fp, #-12]
  1269c0:	e3a02000 	mov	r2, #0
  1269c4:	e5c32010 	strb	r2, [r3, #16]
  1269c8:	e3a02000 	mov	r2, #0
  1269cc:	e5c32011 	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
  1269d0:	e51b300c 	ldr	r3, [fp, #-12]
  1269d4:	e3a02000 	mov	r2, #0
  1269d8:	e5c32012 	strb	r2, [r3, #18]
  1269dc:	e3a02000 	mov	r2, #0
  1269e0:	e5c32013 	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  1269e4:	e30c3a48 	movw	r3, #51784	; 0xca48
  1269e8:	e3403015 	movt	r3, #21
  1269ec:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  1269f0:	e2833001 	add	r3, r3, #1
  1269f4:	e6ff2073 	uxth	r2, r3
  1269f8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1269fc:	e3403015 	movt	r3, #21
  126a00:	e1c32abc 	strh	r2, [r3, #172]	; 0xac
  MIB2_STATS_INC(mib2.tcpoutrsts);
  126a04:	e30c3a48 	movw	r3, #51784	; 0xca48
  126a08:	e3403015 	movt	r3, #21
  126a0c:	e593318c 	ldr	r3, [r3, #396]	; 0x18c
  126a10:	e2832001 	add	r2, r3, #1
  126a14:	e30c3a48 	movw	r3, #51784	; 0xca48
  126a18:	e3403015 	movt	r3, #21
  126a1c:	e583218c 	str	r2, [r3, #396]	; 0x18c

  netif = ip_route(local_ip, remote_ip);
  126a20:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  126a24:	eb0029cb 	bl	131158 <ip4_route>
  126a28:	e50b0010 	str	r0, [fp, #-16]
  if (netif != NULL) {
  126a2c:	e51b3010 	ldr	r3, [fp, #-16]
  126a30:	e3530000 	cmp	r3, #0
  126a34:	0a000016 	beq	126a94 <tcp_rst+0x1dc>
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126a38:	e51b3008 	ldr	r3, [fp, #-8]
  126a3c:	e1d320b8 	ldrh	r2, [r3, #8]
  126a40:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126a44:	e58d3000 	str	r3, [sp]
  126a48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126a4c:	e3a01006 	mov	r1, #6
  126a50:	e51b0008 	ldr	r0, [fp, #-8]
  126a54:	ebffc6ee 	bl	118614 <ip_chksum_pseudo>
  126a58:	e1a03000 	mov	r3, r0
  126a5c:	e1a02003 	mov	r2, r3
  126a60:	e51b300c 	ldr	r3, [fp, #-12]
  126a64:	e1c321b0 	strh	r2, [r3, #16]
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
  126a68:	e51b3010 	ldr	r3, [fp, #-16]
  126a6c:	e58d3008 	str	r3, [sp, #8]
  126a70:	e3a03006 	mov	r3, #6
  126a74:	e58d3004 	str	r3, [sp, #4]
  126a78:	e3a03000 	mov	r3, #0
  126a7c:	e58d3000 	str	r3, [sp]
  126a80:	e3a030ff 	mov	r3, #255	; 0xff
  126a84:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  126a88:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  126a8c:	e51b0008 	ldr	r0, [fp, #-8]
  126a90:	eb002c89 	bl	131cbc <ip4_output_if>
  }
  pbuf_free(p);
  126a94:	e51b0008 	ldr	r0, [fp, #-8]
  126a98:	ebffd0f5 	bl	11ae74 <pbuf_free>
  126a9c:	ea000000 	b	126aa4 <tcp_rst+0x1ec>
    return;
  126aa0:	e320f000 	nop	{0}
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  126aa4:	e24bd004 	sub	sp, fp, #4
  126aa8:	e8bd8800 	pop	{fp, pc}

00126aac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  126aac:	e92d4800 	push	{fp, lr}
  126ab0:	e28db004 	add	fp, sp, #4
  126ab4:	e24dd010 	sub	sp, sp, #16
  126ab8:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  126abc:	e51b3010 	ldr	r3, [fp, #-16]
  126ac0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126ac4:	e3530000 	cmp	r3, #0
  126ac8:	0a000025 	beq	126b64 <tcp_rexmit_rto+0xb8>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  126acc:	e51b3010 	ldr	r3, [fp, #-16]
  126ad0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126ad4:	e50b3008 	str	r3, [fp, #-8]
  126ad8:	ea000002 	b	126ae8 <tcp_rexmit_rto+0x3c>
  126adc:	e51b3008 	ldr	r3, [fp, #-8]
  126ae0:	e5933000 	ldr	r3, [r3]
  126ae4:	e50b3008 	str	r3, [fp, #-8]
  126ae8:	e51b3008 	ldr	r3, [fp, #-8]
  126aec:	e5933000 	ldr	r3, [r3]
  126af0:	e3530000 	cmp	r3, #0
  126af4:	1afffff8 	bne	126adc <tcp_rexmit_rto+0x30>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  126af8:	e51b3010 	ldr	r3, [fp, #-16]
  126afc:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  126b00:	e51b3008 	ldr	r3, [fp, #-8]
  126b04:	e5832000 	str	r2, [r3]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  126b08:	e51b3010 	ldr	r3, [fp, #-16]
  126b0c:	e5932070 	ldr	r2, [r3, #112]	; 0x70
  126b10:	e51b3010 	ldr	r3, [fp, #-16]
  126b14:	e583206c 	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  126b18:	e51b3010 	ldr	r3, [fp, #-16]
  126b1c:	e3a02000 	mov	r2, #0
  126b20:	e5832070 	str	r2, [r3, #112]	; 0x70

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
  126b24:	e51b3010 	ldr	r3, [fp, #-16]
  126b28:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126b2c:	e35300ff 	cmp	r3, #255	; 0xff
  126b30:	0a000005 	beq	126b4c <tcp_rexmit_rto+0xa0>
    ++pcb->nrtx;
  126b34:	e51b3010 	ldr	r3, [fp, #-16]
  126b38:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126b3c:	e2833001 	add	r3, r3, #1
  126b40:	e6ef2073 	uxtb	r2, r3
  126b44:	e51b3010 	ldr	r3, [fp, #-16]
  126b48:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  126b4c:	e51b3010 	ldr	r3, [fp, #-16]
  126b50:	e3a02000 	mov	r2, #0
  126b54:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
  126b58:	e51b0010 	ldr	r0, [fp, #-16]
  126b5c:	ebfffcef 	bl	125f20 <tcp_output>
  126b60:	ea000000 	b	126b68 <tcp_rexmit_rto+0xbc>
    return;
  126b64:	e320f000 	nop	{0}
}
  126b68:	e24bd004 	sub	sp, fp, #4
  126b6c:	e8bd8800 	pop	{fp, pc}

00126b70 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  126b70:	e92d4810 	push	{r4, fp, lr}
  126b74:	e28db008 	add	fp, sp, #8
  126b78:	e24dd014 	sub	sp, sp, #20
  126b7c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  126b80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126b84:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126b88:	e3530000 	cmp	r3, #0
  126b8c:	0a000044 	beq	126ca4 <tcp_rexmit+0x134>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  126b90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126b94:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126b98:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb->unacked = seg->next;
  126b9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126ba0:	e5932000 	ldr	r2, [r3]
  126ba4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126ba8:	e5832070 	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  126bac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126bb0:	e283306c 	add	r3, r3, #108	; 0x6c
  126bb4:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  126bb8:	ea000002 	b	126bc8 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  126bbc:	e51b3010 	ldr	r3, [fp, #-16]
  126bc0:	e5933000 	ldr	r3, [r3]
  126bc4:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  126bc8:	e51b3010 	ldr	r3, [fp, #-16]
  126bcc:	e5933000 	ldr	r3, [r3]
  126bd0:	e3530000 	cmp	r3, #0
  126bd4:	0a00000f 	beq	126c18 <tcp_rexmit+0xa8>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  126bd8:	e51b3010 	ldr	r3, [fp, #-16]
  126bdc:	e5933000 	ldr	r3, [r3]
  126be0:	e593300c 	ldr	r3, [r3, #12]
  126be4:	e5933004 	ldr	r3, [r3, #4]
  126be8:	e1a00003 	mov	r0, r3
  126bec:	ebffbe75 	bl	1165c8 <lwip_htonl>
  126bf0:	e1a04000 	mov	r4, r0
  126bf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126bf8:	e593300c 	ldr	r3, [r3, #12]
  126bfc:	e5933004 	ldr	r3, [r3, #4]
  126c00:	e1a00003 	mov	r0, r3
  126c04:	ebffbe6f 	bl	1165c8 <lwip_htonl>
  126c08:	e1a03000 	mov	r3, r0
  126c0c:	e0443003 	sub	r3, r4, r3
  while (*cur_seg &&
  126c10:	e3530000 	cmp	r3, #0
  126c14:	baffffe8 	blt	126bbc <tcp_rexmit+0x4c>
  }
  seg->next = *cur_seg;
  126c18:	e51b3010 	ldr	r3, [fp, #-16]
  126c1c:	e5932000 	ldr	r2, [r3]
  126c20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c24:	e5832000 	str	r2, [r3]
  *cur_seg = seg;
  126c28:	e51b3010 	ldr	r3, [fp, #-16]
  126c2c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  126c30:	e5832000 	str	r2, [r3]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  126c34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c38:	e5933000 	ldr	r3, [r3]
  126c3c:	e3530000 	cmp	r3, #0
  126c40:	1a000002 	bne	126c50 <tcp_rexmit+0xe0>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  126c44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126c48:	e3a02000 	mov	r2, #0
  126c4c:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
  126c50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126c54:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126c58:	e35300ff 	cmp	r3, #255	; 0xff
  126c5c:	0a000005 	beq	126c78 <tcp_rexmit+0x108>
    ++pcb->nrtx;
  126c60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126c64:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126c68:	e2833001 	add	r3, r3, #1
  126c6c:	e6ef2073 	uxtb	r2, r3
  126c70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126c74:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  126c78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126c7c:	e3a02000 	mov	r2, #0
  126c80:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  126c84:	e30c3a48 	movw	r3, #51784	; 0xca48
  126c88:	e3403015 	movt	r3, #21
  126c8c:	e5933180 	ldr	r3, [r3, #384]	; 0x180
  126c90:	e2832001 	add	r2, r3, #1
  126c94:	e30c3a48 	movw	r3, #51784	; 0xca48
  126c98:	e3403015 	movt	r3, #21
  126c9c:	e5832180 	str	r2, [r3, #384]	; 0x180
  126ca0:	ea000000 	b	126ca8 <tcp_rexmit+0x138>
    return;
  126ca4:	e320f000 	nop	{0}
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
  126ca8:	e24bd008 	sub	sp, fp, #8
  126cac:	e8bd8810 	pop	{r4, fp, pc}

00126cb0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  126cb0:	e92d4800 	push	{fp, lr}
  126cb4:	e28db004 	add	fp, sp, #4
  126cb8:	e24dd008 	sub	sp, sp, #8
  126cbc:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  126cc0:	e51b3008 	ldr	r3, [fp, #-8]
  126cc4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126cc8:	e3530000 	cmp	r3, #0
  126ccc:	0a00003e 	beq	126dcc <tcp_rexmit_fast+0x11c>
  126cd0:	e51b3008 	ldr	r3, [fp, #-8]
  126cd4:	e5d3301e 	ldrb	r3, [r3, #30]
  126cd8:	e2033004 	and	r3, r3, #4
  126cdc:	e3530000 	cmp	r3, #0
  126ce0:	1a000039 	bne	126dcc <tcp_rexmit_fast+0x11c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  126ce4:	e51b0008 	ldr	r0, [fp, #-8]
  126ce8:	ebffffa0 	bl	126b70 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
  126cec:	e51b3008 	ldr	r3, [fp, #-8]
  126cf0:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  126cf4:	e51b3008 	ldr	r3, [fp, #-8]
  126cf8:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126cfc:	e1520003 	cmp	r2, r3
  126d00:	2a000006 	bcs	126d20 <tcp_rexmit_fast+0x70>
  126d04:	e51b3008 	ldr	r3, [fp, #-8]
  126d08:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  126d0c:	e1a02fa3 	lsr	r2, r3, #31
  126d10:	e0823003 	add	r3, r2, r3
  126d14:	e1a030c3 	asr	r3, r3, #1
  126d18:	e6ff3073 	uxth	r3, r3
  126d1c:	ea000005 	b	126d38 <tcp_rexmit_fast+0x88>
  126d20:	e51b3008 	ldr	r3, [fp, #-8]
  126d24:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126d28:	e1a02fa3 	lsr	r2, r3, #31
  126d2c:	e0823003 	add	r3, r2, r3
  126d30:	e1a030c3 	asr	r3, r3, #1
  126d34:	e6ff3073 	uxth	r3, r3
  126d38:	e51b2008 	ldr	r2, [fp, #-8]
  126d3c:	e1c234be 	strh	r3, [r2, #78]	; 0x4e

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
  126d40:	e51b3008 	ldr	r3, [fp, #-8]
  126d44:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  126d48:	e1a02003 	mov	r2, r3
  126d4c:	e51b3008 	ldr	r3, [fp, #-8]
  126d50:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126d54:	e1a03083 	lsl	r3, r3, #1
  126d58:	e1520003 	cmp	r2, r3
  126d5c:	2a000005 	bcs	126d78 <tcp_rexmit_fast+0xc8>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
  126d60:	e51b3008 	ldr	r3, [fp, #-8]
  126d64:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126d68:	e1a03083 	lsl	r3, r3, #1
  126d6c:	e6ff2073 	uxth	r2, r3
  126d70:	e51b3008 	ldr	r3, [fp, #-8]
  126d74:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  126d78:	e51b3008 	ldr	r3, [fp, #-8]
  126d7c:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  126d80:	e51b3008 	ldr	r3, [fp, #-8]
  126d84:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126d88:	e1a01003 	mov	r1, r3
  126d8c:	e1a01081 	lsl	r1, r1, #1
  126d90:	e0813003 	add	r3, r1, r3
  126d94:	e6ff3073 	uxth	r3, r3
  126d98:	e0823003 	add	r3, r2, r3
  126d9c:	e6ff2073 	uxth	r2, r3
  126da0:	e51b3008 	ldr	r3, [fp, #-8]
  126da4:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->flags |= TF_INFR;
  126da8:	e51b3008 	ldr	r3, [fp, #-8]
  126dac:	e5d3301e 	ldrb	r3, [r3, #30]
  126db0:	e3833004 	orr	r3, r3, #4
  126db4:	e6ef2073 	uxtb	r2, r3
  126db8:	e51b3008 	ldr	r3, [fp, #-8]
  126dbc:	e5c3201e 	strb	r2, [r3, #30]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
  126dc0:	e51b3008 	ldr	r3, [fp, #-8]
  126dc4:	e3a02000 	mov	r2, #0
  126dc8:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }
}
  126dcc:	e320f000 	nop	{0}
  126dd0:	e24bd004 	sub	sp, fp, #4
  126dd4:	e8bd8800 	pop	{fp, pc}

00126dd8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
  126dd8:	e92d4800 	push	{fp, lr}
  126ddc:	e28db004 	add	fp, sp, #4
  126de0:	e24dd028 	sub	sp, sp, #40	; 0x28
  126de4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
  126de8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126dec:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  126df0:	e2433001 	sub	r3, r3, #1
  126df4:	e1a00003 	mov	r0, r3
  126df8:	ebffbdf2 	bl	1165c8 <lwip_htonl>
  126dfc:	e1a03000 	mov	r3, r0
  126e00:	e3a02000 	mov	r2, #0
  126e04:	e3a01000 	mov	r1, #0
  126e08:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  126e0c:	ebfff62a 	bl	1246bc <tcp_output_alloc_header>
  126e10:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  126e14:	e51b300c 	ldr	r3, [fp, #-12]
  126e18:	e3530000 	cmp	r3, #0
  126e1c:	1a000001 	bne	126e28 <tcp_keepalive+0x50>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  126e20:	e3e03000 	mvn	r3, #0
  126e24:	ea000036 	b	126f04 <tcp_keepalive+0x12c>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  126e28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126e2c:	e2833004 	add	r3, r3, #4
  126e30:	e1a00003 	mov	r0, r3
  126e34:	eb0028c7 	bl	131158 <ip4_route>
  126e38:	e50b0010 	str	r0, [fp, #-16]
  if (netif == NULL) {
  126e3c:	e51b3010 	ldr	r3, [fp, #-16]
  126e40:	e3530000 	cmp	r3, #0
  126e44:	1a000002 	bne	126e54 <tcp_keepalive+0x7c>
    err = ERR_RTE;
  126e48:	e3e03003 	mvn	r3, #3
  126e4c:	e54b3005 	strb	r3, [fp, #-5]
  126e50:	ea000028 	b	126ef8 <tcp_keepalive+0x120>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
  126e54:	e51b300c 	ldr	r3, [fp, #-12]
  126e58:	e5933004 	ldr	r3, [r3, #4]
  126e5c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126e60:	e51b300c 	ldr	r3, [fp, #-12]
  126e64:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  126e68:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  126e6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126e70:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126e74:	e58d3000 	str	r3, [sp]
  126e78:	e1a03001 	mov	r3, r1
  126e7c:	e3a01006 	mov	r1, #6
  126e80:	e51b000c 	ldr	r0, [fp, #-12]
  126e84:	ebffc5e2 	bl	118614 <ip_chksum_pseudo>
  126e88:	e1a03000 	mov	r3, r0
  126e8c:	e1a02003 	mov	r2, r3
  126e90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126e94:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
  126e98:	e30c3a48 	movw	r3, #51784	; 0xca48
  126e9c:	e3403015 	movt	r3, #21
  126ea0:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126ea4:	e2833001 	add	r3, r3, #1
  126ea8:	e6ff2073 	uxth	r2, r3
  126eac:	e30c3a48 	movw	r3, #51784	; 0xca48
  126eb0:	e3403015 	movt	r3, #21
  126eb4:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
  126eb8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  126ebc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126ec0:	e2832004 	add	r2, r3, #4
  126ec4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126ec8:	e5d3000a 	ldrb	r0, [r3, #10]
  126ecc:	e51b3010 	ldr	r3, [fp, #-16]
  126ed0:	e58d3008 	str	r3, [sp, #8]
  126ed4:	e3a03006 	mov	r3, #6
  126ed8:	e58d3004 	str	r3, [sp, #4]
  126edc:	e3a03000 	mov	r3, #0
  126ee0:	e58d3000 	str	r3, [sp]
  126ee4:	e1a03000 	mov	r3, r0
  126ee8:	e51b000c 	ldr	r0, [fp, #-12]
  126eec:	eb002b72 	bl	131cbc <ip4_output_if>
  126ef0:	e1a03000 	mov	r3, r0
  126ef4:	e54b3005 	strb	r3, [fp, #-5]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  126ef8:	e51b000c 	ldr	r0, [fp, #-12]
  126efc:	ebffcfdc 	bl	11ae74 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  126f00:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  126f04:	e1a00003 	mov	r0, r3
  126f08:	e24bd004 	sub	sp, fp, #4
  126f0c:	e8bd8800 	pop	{fp, pc}

00126f10 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  126f10:	e92d4810 	push	{r4, fp, lr}
  126f14:	e28db008 	add	fp, sp, #8
  126f18:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  126f1c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
  126f20:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126f24:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126f28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if (seg == NULL) {
  126f2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126f30:	e3530000 	cmp	r3, #0
  126f34:	1a000002 	bne	126f44 <tcp_zero_window_probe+0x34>
    seg = pcb->unsent;
  126f38:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126f3c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126f40:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
  if (seg == NULL) {
  126f44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126f48:	e3530000 	cmp	r3, #0
  126f4c:	1a000001 	bne	126f58 <tcp_zero_window_probe+0x48>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  126f50:	e3a03000 	mov	r3, #0
  126f54:	ea00008c 	b	12718c <tcp_zero_window_probe+0x27c>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  126f58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126f5c:	e593300c 	ldr	r3, [r3, #12]
  126f60:	e1d330bc 	ldrh	r3, [r3, #12]
  126f64:	e6ff3073 	uxth	r3, r3
  126f68:	e1a00003 	mov	r0, r3
  126f6c:	ebffbd89 	bl	116598 <lwip_htons>
  126f70:	e1a03000 	mov	r3, r0
  126f74:	e2033001 	and	r3, r3, #1
  126f78:	e3530000 	cmp	r3, #0
  126f7c:	0a000005 	beq	126f98 <tcp_zero_window_probe+0x88>
  126f80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126f84:	e1d330b8 	ldrh	r3, [r3, #8]
  126f88:	e3530000 	cmp	r3, #0
  126f8c:	1a000001 	bne	126f98 <tcp_zero_window_probe+0x88>
  126f90:	e3a03001 	mov	r3, #1
  126f94:	ea000000 	b	126f9c <tcp_zero_window_probe+0x8c>
  126f98:	e3a03000 	mov	r3, #0
  126f9c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
  126fa0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  126fa4:	e3530000 	cmp	r3, #0
  126fa8:	03a03001 	moveq	r3, #1
  126fac:	13a03000 	movne	r3, #0
  126fb0:	e6ef3073 	uxtb	r3, r3
  126fb4:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  126fb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126fbc:	e593300c 	ldr	r3, [r3, #12]
  126fc0:	e5933004 	ldr	r3, [r3, #4]
  126fc4:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  126fc8:	e3a01000 	mov	r1, #0
  126fcc:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  126fd0:	ebfff5b9 	bl	1246bc <tcp_output_alloc_header>
  126fd4:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (p == NULL) {
  126fd8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126fdc:	e3530000 	cmp	r3, #0
  126fe0:	1a000001 	bne	126fec <tcp_zero_window_probe+0xdc>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  126fe4:	e3e03000 	mvn	r3, #0
  126fe8:	ea000067 	b	12718c <tcp_zero_window_probe+0x27c>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  126fec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126ff0:	e5933004 	ldr	r3, [r3, #4]
  126ff4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  if (is_fin) {
  126ff8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  126ffc:	e3530000 	cmp	r3, #0
  127000:	0a00000c 	beq	127038 <tcp_zero_window_probe+0x128>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  127004:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127008:	e1d330bc 	ldrh	r3, [r3, #12]
  12700c:	e6ff3073 	uxth	r3, r3
  127010:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  127014:	e6ff4073 	uxth	r4, r3
  127018:	e3a00011 	mov	r0, #17
  12701c:	ebffbd5d 	bl	116598 <lwip_htons>
  127020:	e1a03000 	mov	r3, r0
  127024:	e1843003 	orr	r3, r4, r3
  127028:	e6ff2073 	uxth	r2, r3
  12702c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127030:	e1c320bc 	strh	r2, [r3, #12]
  127034:	ea00000f 	b	127078 <tcp_zero_window_probe+0x168>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
  127038:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12703c:	e5933004 	ldr	r3, [r3, #4]
  127040:	e2833014 	add	r3, r3, #20
  127044:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  127048:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12704c:	e5930004 	ldr	r0, [r3, #4]
  127050:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127054:	e5933004 	ldr	r3, [r3, #4]
  127058:	e1d320b8 	ldrh	r2, [r3, #8]
  12705c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127060:	e1d330b8 	ldrh	r3, [r3, #8]
  127064:	e0423003 	sub	r3, r2, r3
  127068:	e6ff3073 	uxth	r3, r3
  12706c:	e3a02001 	mov	r2, #1
  127070:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  127074:	ebffd189 	bl	11b6a0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
  127078:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12707c:	e593300c 	ldr	r3, [r3, #12]
  127080:	e5933004 	ldr	r3, [r3, #4]
  127084:	e1a00003 	mov	r0, r3
  127088:	ebffbd4e 	bl	1165c8 <lwip_htonl>
  12708c:	e1a03000 	mov	r3, r0
  127090:	e2833001 	add	r3, r3, #1
  127094:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  127098:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12709c:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1270a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1270a4:	e0423003 	sub	r3, r2, r3
  1270a8:	e3530000 	cmp	r3, #0
  1270ac:	aa000002 	bge	1270bc <tcp_zero_window_probe+0x1ac>
    pcb->snd_nxt = snd_nxt;
  1270b0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1270b4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1270b8:	e5832050 	str	r2, [r3, #80]	; 0x50
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  1270bc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1270c0:	e2833004 	add	r3, r3, #4
  1270c4:	e1a00003 	mov	r0, r3
  1270c8:	eb002822 	bl	131158 <ip4_route>
  1270cc:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  if (netif == NULL) {
  1270d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1270d4:	e3530000 	cmp	r3, #0
  1270d8:	1a000002 	bne	1270e8 <tcp_zero_window_probe+0x1d8>
    err = ERR_RTE;
  1270dc:	e3e03003 	mvn	r3, #3
  1270e0:	e54b300d 	strb	r3, [fp, #-13]
  1270e4:	ea000025 	b	127180 <tcp_zero_window_probe+0x270>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  1270e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1270ec:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  1270f0:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  1270f4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1270f8:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  1270fc:	e58d3000 	str	r3, [sp]
  127100:	e1a03001 	mov	r3, r1
  127104:	e3a01006 	mov	r1, #6
  127108:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12710c:	ebffc540 	bl	118614 <ip_chksum_pseudo>
  127110:	e1a03000 	mov	r3, r0
  127114:	e1a02003 	mov	r2, r3
  127118:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12711c:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    TCP_STATS_INC(tcp.xmit);
  127120:	e30c3a48 	movw	r3, #51784	; 0xca48
  127124:	e3403015 	movt	r3, #21
  127128:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  12712c:	e2833001 	add	r3, r3, #1
  127130:	e6ff2073 	uxth	r2, r3
  127134:	e30c3a48 	movw	r3, #51784	; 0xca48
  127138:	e3403015 	movt	r3, #21
  12713c:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  127140:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  127144:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127148:	e2832004 	add	r2, r3, #4
  12714c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127150:	e5d3000a 	ldrb	r0, [r3, #10]
  127154:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  127158:	e58d3008 	str	r3, [sp, #8]
  12715c:	e3a03006 	mov	r3, #6
  127160:	e58d3004 	str	r3, [sp, #4]
  127164:	e3a03000 	mov	r3, #0
  127168:	e58d3000 	str	r3, [sp]
  12716c:	e1a03000 	mov	r3, r0
  127170:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  127174:	eb002ad0 	bl	131cbc <ip4_output_if>
  127178:	e1a03000 	mov	r3, r0
  12717c:	e54b300d 	strb	r3, [fp, #-13]
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
  127180:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  127184:	ebffcf3a 	bl	11ae74 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  127188:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12718c:	e1a00003 	mov	r0, r3
  127190:	e24bd008 	sub	sp, fp, #8
  127194:	e8bd8810 	pop	{r4, fp, pc}

00127198 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
  127198:	e92d4800 	push	{fp, lr}
  12719c:	e28db004 	add	fp, sp, #4
  1271a0:	e24dd008 	sub	sp, sp, #8
  1271a4:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
  1271a8:	ebffd779 	bl	11cf94 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  1271ac:	e30c3c38 	movw	r3, #52280	; 0xcc38
  1271b0:	e3403015 	movt	r3, #21
  1271b4:	e5933000 	ldr	r3, [r3]
  1271b8:	e3530000 	cmp	r3, #0
  1271bc:	1a000004 	bne	1271d4 <tcpip_tcp_timer+0x3c>
  1271c0:	e30c3c48 	movw	r3, #52296	; 0xcc48
  1271c4:	e3403015 	movt	r3, #21
  1271c8:	e5933000 	ldr	r3, [r3]
  1271cc:	e3530000 	cmp	r3, #0
  1271d0:	0a000005 	beq	1271ec <tcpip_tcp_timer+0x54>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  1271d4:	e3a02000 	mov	r2, #0
  1271d8:	e3071198 	movw	r1, #29080	; 0x7198
  1271dc:	e3401012 	movt	r1, #18
  1271e0:	e3a000fa 	mov	r0, #250	; 0xfa
  1271e4:	eb000057 	bl	127348 <sys_timeout>
  1271e8:	ea000003 	b	1271fc <tcpip_tcp_timer+0x64>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
  1271ec:	e30e3280 	movw	r3, #57984	; 0xe280
  1271f0:	e3403014 	movt	r3, #20
  1271f4:	e3a02000 	mov	r2, #0
  1271f8:	e5832000 	str	r2, [r3]
  }
}
  1271fc:	e320f000 	nop	{0}
  127200:	e24bd004 	sub	sp, fp, #4
  127204:	e8bd8800 	pop	{fp, pc}

00127208 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
  127208:	e92d4800 	push	{fp, lr}
  12720c:	e28db004 	add	fp, sp, #4
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  127210:	e30e3280 	movw	r3, #57984	; 0xe280
  127214:	e3403014 	movt	r3, #20
  127218:	e5933000 	ldr	r3, [r3]
  12721c:	e3530000 	cmp	r3, #0
  127220:	1a000012 	bne	127270 <tcp_timer_needed+0x68>
  127224:	e30c3c38 	movw	r3, #52280	; 0xcc38
  127228:	e3403015 	movt	r3, #21
  12722c:	e5933000 	ldr	r3, [r3]
  127230:	e3530000 	cmp	r3, #0
  127234:	1a000004 	bne	12724c <tcp_timer_needed+0x44>
  127238:	e30c3c48 	movw	r3, #52296	; 0xcc48
  12723c:	e3403015 	movt	r3, #21
  127240:	e5933000 	ldr	r3, [r3]
  127244:	e3530000 	cmp	r3, #0
  127248:	0a000008 	beq	127270 <tcp_timer_needed+0x68>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
  12724c:	e30e3280 	movw	r3, #57984	; 0xe280
  127250:	e3403014 	movt	r3, #20
  127254:	e3a02001 	mov	r2, #1
  127258:	e5832000 	str	r2, [r3]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  12725c:	e3a02000 	mov	r2, #0
  127260:	e3071198 	movw	r1, #29080	; 0x7198
  127264:	e3401012 	movt	r1, #18
  127268:	e3a000fa 	mov	r0, #250	; 0xfa
  12726c:	eb000035 	bl	127348 <sys_timeout>
  }
}
  127270:	e320f000 	nop	{0}
  127274:	e8bd8800 	pop	{fp, pc}

00127278 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
  127278:	e92d4800 	push	{fp, lr}
  12727c:	e28db004 	add	fp, sp, #4
  127280:	e24dd010 	sub	sp, sp, #16
  127284:	e50b0010 	str	r0, [fp, #-16]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
  127288:	e51b3010 	ldr	r3, [fp, #-16]
  12728c:	e50b3008 	str	r3, [fp, #-8]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
  127290:	e51b3008 	ldr	r3, [fp, #-8]
  127294:	e5933004 	ldr	r3, [r3, #4]
  127298:	e12fff33 	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
  12729c:	e51b3008 	ldr	r3, [fp, #-8]
  1272a0:	e5933000 	ldr	r3, [r3]
  1272a4:	e51b2010 	ldr	r2, [fp, #-16]
  1272a8:	e3071278 	movw	r1, #29304	; 0x7278
  1272ac:	e3401012 	movt	r1, #18
  1272b0:	e1a00003 	mov	r0, r3
  1272b4:	eb000023 	bl	127348 <sys_timeout>
}
  1272b8:	e320f000 	nop	{0}
  1272bc:	e24bd004 	sub	sp, fp, #4
  1272c0:	e8bd8800 	pop	{fp, pc}

001272c4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
  1272c4:	e92d4800 	push	{fp, lr}
  1272c8:	e28db004 	add	fp, sp, #4
  1272cc:	e24dd008 	sub	sp, sp, #8
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  1272d0:	e3a03001 	mov	r3, #1
  1272d4:	e50b3008 	str	r3, [fp, #-8]
  1272d8:	ea00000f 	b	12731c <sys_timeouts_init+0x58>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
  1272dc:	e30839e0 	movw	r3, #35296	; 0x89e0
  1272e0:	e3403014 	movt	r3, #20
  1272e4:	e51b2008 	ldr	r2, [fp, #-8]
  1272e8:	e7930182 	ldr	r0, [r3, r2, lsl #3]
  1272ec:	e51b3008 	ldr	r3, [fp, #-8]
  1272f0:	e1a02183 	lsl	r2, r3, #3
  1272f4:	e30839e0 	movw	r3, #35296	; 0x89e0
  1272f8:	e3403014 	movt	r3, #20
  1272fc:	e0823003 	add	r3, r2, r3
  127300:	e1a02003 	mov	r2, r3
  127304:	e3071278 	movw	r1, #29304	; 0x7278
  127308:	e3401012 	movt	r1, #18
  12730c:	eb00000d 	bl	127348 <sys_timeout>
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  127310:	e51b3008 	ldr	r3, [fp, #-8]
  127314:	e2833001 	add	r3, r3, #1
  127318:	e50b3008 	str	r3, [fp, #-8]
  12731c:	e51b3008 	ldr	r3, [fp, #-8]
  127320:	e3530006 	cmp	r3, #6
  127324:	9affffec 	bls	1272dc <sys_timeouts_init+0x18>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
  127328:	ebff8f7a 	bl	10b118 <sys_now>
  12732c:	e1a02000 	mov	r2, r0
  127330:	e30e327c 	movw	r3, #57980	; 0xe27c
  127334:	e3403014 	movt	r3, #20
  127338:	e5832000 	str	r2, [r3]
}
  12733c:	e320f000 	nop	{0}
  127340:	e24bd004 	sub	sp, fp, #4
  127344:	e8bd8800 	pop	{fp, pc}

00127348 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  127348:	e92d4800 	push	{fp, lr}
  12734c:	e28db004 	add	fp, sp, #4
  127350:	e24dd020 	sub	sp, sp, #32
  127354:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  127358:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12735c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  127360:	e3a020d2 	mov	r2, #210	; 0xd2
  127364:	e3081a18 	movw	r1, #35352	; 0x8a18
  127368:	e3401014 	movt	r1, #20
  12736c:	e3a0000d 	mov	r0, #13
  127370:	ebffc749 	bl	11909c <memp_malloc_fn>
  127374:	e50b0010 	str	r0, [fp, #-16]
  if (timeout == NULL) {
  127378:	e51b3010 	ldr	r3, [fp, #-16]
  12737c:	e3530000 	cmp	r3, #0
  127380:	1a00000a 	bne	1273b0 <sys_timeout+0x68>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
  127384:	e51b3010 	ldr	r3, [fp, #-16]
  127388:	e3530000 	cmp	r3, #0
  12738c:	1a00008f 	bne	1275d0 <sys_timeout+0x288>
  127390:	e3080a48 	movw	r0, #35400	; 0x8a48
  127394:	e3400014 	movt	r0, #20
  127398:	ebff6f5d 	bl	103114 <rt_kprintf>
  12739c:	e3a010d4 	mov	r1, #212	; 0xd4
  1273a0:	e3080a18 	movw	r0, #35352	; 0x8a18
  1273a4:	e3400014 	movt	r0, #20
  1273a8:	ebff8f41 	bl	10b0b4 <sys_arch_assert>
    return;
  1273ac:	ea000087 	b	1275d0 <sys_timeout+0x288>
  }

  now = sys_now();
  1273b0:	ebff8f58 	bl	10b118 <sys_now>
  1273b4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (next_timeout == NULL) {
  1273b8:	e30e3278 	movw	r3, #57976	; 0xe278
  1273bc:	e3403014 	movt	r3, #20
  1273c0:	e5933000 	ldr	r3, [r3]
  1273c4:	e3530000 	cmp	r3, #0
  1273c8:	1a000006 	bne	1273e8 <sys_timeout+0xa0>
    diff = 0;
  1273cc:	e3a03000 	mov	r3, #0
  1273d0:	e50b300c 	str	r3, [fp, #-12]
    timeouts_last_time = now;
  1273d4:	e30e327c 	movw	r3, #57980	; 0xe27c
  1273d8:	e3403014 	movt	r3, #20
  1273dc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1273e0:	e5832000 	str	r2, [r3]
  1273e4:	ea000005 	b	127400 <sys_timeout+0xb8>
  } else {
    diff = now - timeouts_last_time;
  1273e8:	e30e327c 	movw	r3, #57980	; 0xe27c
  1273ec:	e3403014 	movt	r3, #20
  1273f0:	e5933000 	ldr	r3, [r3]
  1273f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1273f8:	e0423003 	sub	r3, r2, r3
  1273fc:	e50b300c 	str	r3, [fp, #-12]
  }

  timeout->next = NULL;
  127400:	e51b3010 	ldr	r3, [fp, #-16]
  127404:	e3a02000 	mov	r2, #0
  127408:	e5832000 	str	r2, [r3]
  timeout->h = handler;
  12740c:	e51b3010 	ldr	r3, [fp, #-16]
  127410:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  127414:	e5832008 	str	r2, [r3, #8]
  timeout->arg = arg;
  127418:	e51b3010 	ldr	r3, [fp, #-16]
  12741c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  127420:	e583200c 	str	r2, [r3, #12]
  timeout->time = msecs + diff;
  127424:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127428:	e51b300c 	ldr	r3, [fp, #-12]
  12742c:	e0822003 	add	r2, r2, r3
  127430:	e51b3010 	ldr	r3, [fp, #-16]
  127434:	e5832004 	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
  127438:	e30e3278 	movw	r3, #57976	; 0xe278
  12743c:	e3403014 	movt	r3, #20
  127440:	e5933000 	ldr	r3, [r3]
  127444:	e3530000 	cmp	r3, #0
  127448:	1a000004 	bne	127460 <sys_timeout+0x118>
    next_timeout = timeout;
  12744c:	e30e3278 	movw	r3, #57976	; 0xe278
  127450:	e3403014 	movt	r3, #20
  127454:	e51b2010 	ldr	r2, [fp, #-16]
  127458:	e5832000 	str	r2, [r3]
    return;
  12745c:	ea00005c 	b	1275d4 <sys_timeout+0x28c>
  }

  if (next_timeout->time > msecs) {
  127460:	e30e3278 	movw	r3, #57976	; 0xe278
  127464:	e3403014 	movt	r3, #20
  127468:	e5933000 	ldr	r3, [r3]
  12746c:	e5933004 	ldr	r3, [r3, #4]
  127470:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127474:	e1520003 	cmp	r2, r3
  127478:	2a000013 	bcs	1274cc <sys_timeout+0x184>
    next_timeout->time -= msecs;
  12747c:	e30e3278 	movw	r3, #57976	; 0xe278
  127480:	e3403014 	movt	r3, #20
  127484:	e5933000 	ldr	r3, [r3]
  127488:	e5931004 	ldr	r1, [r3, #4]
  12748c:	e30e3278 	movw	r3, #57976	; 0xe278
  127490:	e3403014 	movt	r3, #20
  127494:	e5933000 	ldr	r3, [r3]
  127498:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12749c:	e0412002 	sub	r2, r1, r2
  1274a0:	e5832004 	str	r2, [r3, #4]
    timeout->next = next_timeout;
  1274a4:	e30e3278 	movw	r3, #57976	; 0xe278
  1274a8:	e3403014 	movt	r3, #20
  1274ac:	e5932000 	ldr	r2, [r3]
  1274b0:	e51b3010 	ldr	r3, [fp, #-16]
  1274b4:	e5832000 	str	r2, [r3]
    next_timeout = timeout;
  1274b8:	e30e3278 	movw	r3, #57976	; 0xe278
  1274bc:	e3403014 	movt	r3, #20
  1274c0:	e51b2010 	ldr	r2, [fp, #-16]
  1274c4:	e5832000 	str	r2, [r3]
  1274c8:	ea000041 	b	1275d4 <sys_timeout+0x28c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
  1274cc:	e30e3278 	movw	r3, #57976	; 0xe278
  1274d0:	e3403014 	movt	r3, #20
  1274d4:	e5933000 	ldr	r3, [r3]
  1274d8:	e50b3008 	str	r3, [fp, #-8]
  1274dc:	ea000037 	b	1275c0 <sys_timeout+0x278>
      timeout->time -= t->time;
  1274e0:	e51b3010 	ldr	r3, [fp, #-16]
  1274e4:	e5932004 	ldr	r2, [r3, #4]
  1274e8:	e51b3008 	ldr	r3, [fp, #-8]
  1274ec:	e5933004 	ldr	r3, [r3, #4]
  1274f0:	e0422003 	sub	r2, r2, r3
  1274f4:	e51b3010 	ldr	r3, [fp, #-16]
  1274f8:	e5832004 	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  1274fc:	e51b3008 	ldr	r3, [fp, #-8]
  127500:	e5933000 	ldr	r3, [r3]
  127504:	e3530000 	cmp	r3, #0
  127508:	0a000006 	beq	127528 <sys_timeout+0x1e0>
  12750c:	e51b3008 	ldr	r3, [fp, #-8]
  127510:	e5933000 	ldr	r3, [r3]
  127514:	e5932004 	ldr	r2, [r3, #4]
  127518:	e51b3010 	ldr	r3, [fp, #-16]
  12751c:	e5933004 	ldr	r3, [r3, #4]
  127520:	e1520003 	cmp	r2, r3
  127524:	9a000022 	bls	1275b4 <sys_timeout+0x26c>
        if (t->next != NULL) {
  127528:	e51b3008 	ldr	r3, [fp, #-8]
  12752c:	e5933000 	ldr	r3, [r3]
  127530:	e3530000 	cmp	r3, #0
  127534:	0a000009 	beq	127560 <sys_timeout+0x218>
          t->next->time -= timeout->time;
  127538:	e51b3008 	ldr	r3, [fp, #-8]
  12753c:	e5933000 	ldr	r3, [r3]
  127540:	e5931004 	ldr	r1, [r3, #4]
  127544:	e51b3010 	ldr	r3, [fp, #-16]
  127548:	e5932004 	ldr	r2, [r3, #4]
  12754c:	e51b3008 	ldr	r3, [fp, #-8]
  127550:	e5933000 	ldr	r3, [r3]
  127554:	e0412002 	sub	r2, r1, r2
  127558:	e5832004 	str	r2, [r3, #4]
  12755c:	ea00000c 	b	127594 <sys_timeout+0x24c>
        } else if (timeout->time > msecs) {
  127560:	e51b3010 	ldr	r3, [fp, #-16]
  127564:	e5933004 	ldr	r3, [r3, #4]
  127568:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12756c:	e1520003 	cmp	r2, r3
  127570:	2a000007 	bcs	127594 <sys_timeout+0x24c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
  127574:	e30e3278 	movw	r3, #57976	; 0xe278
  127578:	e3403014 	movt	r3, #20
  12757c:	e5933000 	ldr	r3, [r3]
  127580:	e5932004 	ldr	r2, [r3, #4]
  127584:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127588:	e0822003 	add	r2, r2, r3
  12758c:	e51b3010 	ldr	r3, [fp, #-16]
  127590:	e5832004 	str	r2, [r3, #4]
        }
        timeout->next = t->next;
  127594:	e51b3008 	ldr	r3, [fp, #-8]
  127598:	e5932000 	ldr	r2, [r3]
  12759c:	e51b3010 	ldr	r3, [fp, #-16]
  1275a0:	e5832000 	str	r2, [r3]
        t->next = timeout;
  1275a4:	e51b3008 	ldr	r3, [fp, #-8]
  1275a8:	e51b2010 	ldr	r2, [fp, #-16]
  1275ac:	e5832000 	str	r2, [r3]
        break;
  1275b0:	ea000007 	b	1275d4 <sys_timeout+0x28c>
    for (t = next_timeout; t != NULL; t = t->next) {
  1275b4:	e51b3008 	ldr	r3, [fp, #-8]
  1275b8:	e5933000 	ldr	r3, [r3]
  1275bc:	e50b3008 	str	r3, [fp, #-8]
  1275c0:	e51b3008 	ldr	r3, [fp, #-8]
  1275c4:	e3530000 	cmp	r3, #0
  1275c8:	1affffc4 	bne	1274e0 <sys_timeout+0x198>
  1275cc:	ea000000 	b	1275d4 <sys_timeout+0x28c>
    return;
  1275d0:	e320f000 	nop	{0}
      }
    }
  }
}
  1275d4:	e24bd004 	sub	sp, fp, #4
  1275d8:	e8bd8800 	pop	{fp, pc}

001275dc <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
  1275dc:	e92d4800 	push	{fp, lr}
  1275e0:	e28db004 	add	fp, sp, #4
  1275e4:	e24dd010 	sub	sp, sp, #16
  1275e8:	e50b0010 	str	r0, [fp, #-16]
  1275ec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
  1275f0:	e30e3278 	movw	r3, #57976	; 0xe278
  1275f4:	e3403014 	movt	r3, #20
  1275f8:	e5933000 	ldr	r3, [r3]
  1275fc:	e3530000 	cmp	r3, #0
  127600:	0a000038 	beq	1276e8 <sys_untimeout+0x10c>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  127604:	e30e3278 	movw	r3, #57976	; 0xe278
  127608:	e3403014 	movt	r3, #20
  12760c:	e5933000 	ldr	r3, [r3]
  127610:	e50b300c 	str	r3, [fp, #-12]
  127614:	e3a03000 	mov	r3, #0
  127618:	e50b3008 	str	r3, [fp, #-8]
  12761c:	ea00002c 	b	1276d4 <sys_untimeout+0xf8>
    if ((t->h == handler) && (t->arg == arg)) {
  127620:	e51b300c 	ldr	r3, [fp, #-12]
  127624:	e5933008 	ldr	r3, [r3, #8]
  127628:	e51b2010 	ldr	r2, [fp, #-16]
  12762c:	e1520003 	cmp	r2, r3
  127630:	1a000022 	bne	1276c0 <sys_untimeout+0xe4>
  127634:	e51b300c 	ldr	r3, [fp, #-12]
  127638:	e593300c 	ldr	r3, [r3, #12]
  12763c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  127640:	e1520003 	cmp	r2, r3
  127644:	1a00001d 	bne	1276c0 <sys_untimeout+0xe4>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
  127648:	e51b3008 	ldr	r3, [fp, #-8]
  12764c:	e3530000 	cmp	r3, #0
  127650:	1a000005 	bne	12766c <sys_untimeout+0x90>
        next_timeout = t->next;
  127654:	e51b300c 	ldr	r3, [fp, #-12]
  127658:	e5932000 	ldr	r2, [r3]
  12765c:	e30e3278 	movw	r3, #57976	; 0xe278
  127660:	e3403014 	movt	r3, #20
  127664:	e5832000 	str	r2, [r3]
  127668:	ea000003 	b	12767c <sys_untimeout+0xa0>
      } else {
        prev_t->next = t->next;
  12766c:	e51b300c 	ldr	r3, [fp, #-12]
  127670:	e5932000 	ldr	r2, [r3]
  127674:	e51b3008 	ldr	r3, [fp, #-8]
  127678:	e5832000 	str	r2, [r3]
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
  12767c:	e51b300c 	ldr	r3, [fp, #-12]
  127680:	e5933000 	ldr	r3, [r3]
  127684:	e3530000 	cmp	r3, #0
  127688:	0a000008 	beq	1276b0 <sys_untimeout+0xd4>
        t->next->time += t->time;
  12768c:	e51b300c 	ldr	r3, [fp, #-12]
  127690:	e5933000 	ldr	r3, [r3]
  127694:	e5931004 	ldr	r1, [r3, #4]
  127698:	e51b300c 	ldr	r3, [fp, #-12]
  12769c:	e5932004 	ldr	r2, [r3, #4]
  1276a0:	e51b300c 	ldr	r3, [fp, #-12]
  1276a4:	e5933000 	ldr	r3, [r3]
  1276a8:	e0812002 	add	r2, r1, r2
  1276ac:	e5832004 	str	r2, [r3, #4]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
  1276b0:	e51b100c 	ldr	r1, [fp, #-12]
  1276b4:	e3a0000d 	mov	r0, #13
  1276b8:	ebffc6df 	bl	11923c <memp_free>
      return;
  1276bc:	ea00000a 	b	1276ec <sys_untimeout+0x110>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  1276c0:	e51b300c 	ldr	r3, [fp, #-12]
  1276c4:	e50b3008 	str	r3, [fp, #-8]
  1276c8:	e51b300c 	ldr	r3, [fp, #-12]
  1276cc:	e5933000 	ldr	r3, [r3]
  1276d0:	e50b300c 	str	r3, [fp, #-12]
  1276d4:	e51b300c 	ldr	r3, [fp, #-12]
  1276d8:	e3530000 	cmp	r3, #0
  1276dc:	1affffcf 	bne	127620 <sys_untimeout+0x44>
    }
  }
  return;
  1276e0:	e320f000 	nop	{0}
  1276e4:	ea000000 	b	1276ec <sys_untimeout+0x110>
    return;
  1276e8:	e320f000 	nop	{0}
}
  1276ec:	e24bd004 	sub	sp, fp, #4
  1276f0:	e8bd8800 	pop	{fp, pc}

001276f4 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
  1276f4:	e92d4800 	push	{fp, lr}
  1276f8:	e28db004 	add	fp, sp, #4
  1276fc:	e24dd018 	sub	sp, sp, #24
  if (next_timeout) {
  127700:	e30e3278 	movw	r3, #57976	; 0xe278
  127704:	e3403014 	movt	r3, #20
  127708:	e5933000 	ldr	r3, [r3]
  12770c:	e3530000 	cmp	r3, #0
  127710:	0a000042 	beq	127820 <sys_check_timeouts+0x12c>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
  127714:	ebff8e7f 	bl	10b118 <sys_now>
  127718:	e50b0010 	str	r0, [fp, #-16]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
  12771c:	e30e327c 	movw	r3, #57980	; 0xe27c
  127720:	e3403014 	movt	r3, #20
  127724:	e5933000 	ldr	r3, [r3]
  127728:	e51b2010 	ldr	r2, [fp, #-16]
  12772c:	e0423003 	sub	r3, r2, r3
  127730:	e50b3008 	str	r3, [fp, #-8]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
  127734:	e3a03000 	mov	r3, #0
  127738:	e54b3009 	strb	r3, [fp, #-9]
      tmptimeout = next_timeout;
  12773c:	e30e3278 	movw	r3, #57976	; 0xe278
  127740:	e3403014 	movt	r3, #20
  127744:	e5933000 	ldr	r3, [r3]
  127748:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      if (tmptimeout && (tmptimeout->time <= diff)) {
  12774c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127750:	e3530000 	cmp	r3, #0
  127754:	0a00002e 	beq	127814 <sys_check_timeouts+0x120>
  127758:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12775c:	e5933004 	ldr	r3, [r3, #4]
  127760:	e51b2008 	ldr	r2, [fp, #-8]
  127764:	e1520003 	cmp	r2, r3
  127768:	3a000029 	bcc	127814 <sys_check_timeouts+0x120>
        /* timeout has expired */
        had_one = 1;
  12776c:	e3a03001 	mov	r3, #1
  127770:	e54b3009 	strb	r3, [fp, #-9]
        timeouts_last_time += tmptimeout->time;
  127774:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127778:	e5932004 	ldr	r2, [r3, #4]
  12777c:	e30e327c 	movw	r3, #57980	; 0xe27c
  127780:	e3403014 	movt	r3, #20
  127784:	e5933000 	ldr	r3, [r3]
  127788:	e0822003 	add	r2, r2, r3
  12778c:	e30e327c 	movw	r3, #57980	; 0xe27c
  127790:	e3403014 	movt	r3, #20
  127794:	e5832000 	str	r2, [r3]
        diff -= tmptimeout->time;
  127798:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12779c:	e5933004 	ldr	r3, [r3, #4]
  1277a0:	e51b2008 	ldr	r2, [fp, #-8]
  1277a4:	e0423003 	sub	r3, r2, r3
  1277a8:	e50b3008 	str	r3, [fp, #-8]
        next_timeout = tmptimeout->next;
  1277ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1277b0:	e5932000 	ldr	r2, [r3]
  1277b4:	e30e3278 	movw	r3, #57976	; 0xe278
  1277b8:	e3403014 	movt	r3, #20
  1277bc:	e5832000 	str	r2, [r3]
        handler = tmptimeout->h;
  1277c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1277c4:	e5933008 	ldr	r3, [r3, #8]
  1277c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        arg = tmptimeout->arg;
  1277cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1277d0:	e593300c 	ldr	r3, [r3, #12]
  1277d4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
  1277d8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1277dc:	e3a0000d 	mov	r0, #13
  1277e0:	ebffc695 	bl	11923c <memp_free>
        if (handler != NULL) {
  1277e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1277e8:	e3530000 	cmp	r3, #0
  1277ec:	0a000008 	beq	127814 <sys_check_timeouts+0x120>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
  1277f0:	e30f060c 	movw	r0, #62988	; 0xf60c
  1277f4:	e3400014 	movt	r0, #20
  1277f8:	ebff8cb1 	bl	10aac4 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
  1277fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127800:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  127804:	e12fff33 	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
  127808:	e30f060c 	movw	r0, #62988	; 0xf60c
  12780c:	e3400014 	movt	r0, #20
  127810:	ebff8cb7 	bl	10aaf4 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
  127814:	e55b3009 	ldrb	r3, [fp, #-9]
  127818:	e3530000 	cmp	r3, #0
  12781c:	1affffc4 	bne	127734 <sys_check_timeouts+0x40>
  }
}
  127820:	e320f000 	nop	{0}
  127824:	e24bd004 	sub	sp, fp, #4
  127828:	e8bd8800 	pop	{fp, pc}

0012782c <sys_restart_timeouts>:
 * time (e.g. while saving energy) to prevent all timer functions of that
 * period being called.
 */
void
sys_restart_timeouts(void)
{
  12782c:	e92d4800 	push	{fp, lr}
  127830:	e28db004 	add	fp, sp, #4
  timeouts_last_time = sys_now();
  127834:	ebff8e37 	bl	10b118 <sys_now>
  127838:	e1a02000 	mov	r2, r0
  12783c:	e30e327c 	movw	r3, #57980	; 0xe27c
  127840:	e3403014 	movt	r3, #20
  127844:	e5832000 	str	r2, [r3]
}
  127848:	e320f000 	nop	{0}
  12784c:	e8bd8800 	pop	{fp, pc}

00127850 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
  127850:	e92d4800 	push	{fp, lr}
  127854:	e28db004 	add	fp, sp, #4
  127858:	e24dd008 	sub	sp, sp, #8
  u32_t diff;
  if (next_timeout == NULL) {
  12785c:	e30e3278 	movw	r3, #57976	; 0xe278
  127860:	e3403014 	movt	r3, #20
  127864:	e5933000 	ldr	r3, [r3]
  127868:	e3530000 	cmp	r3, #0
  12786c:	1a000001 	bne	127878 <sys_timeouts_sleeptime+0x28>
    return 0xffffffff;
  127870:	e3e03000 	mvn	r3, #0
  127874:	ea000015 	b	1278d0 <sys_timeouts_sleeptime+0x80>
  }
  diff = sys_now() - timeouts_last_time;
  127878:	ebff8e26 	bl	10b118 <sys_now>
  12787c:	e1a02000 	mov	r2, r0
  127880:	e30e327c 	movw	r3, #57980	; 0xe27c
  127884:	e3403014 	movt	r3, #20
  127888:	e5933000 	ldr	r3, [r3]
  12788c:	e0423003 	sub	r3, r2, r3
  127890:	e50b3008 	str	r3, [fp, #-8]
  if (diff > next_timeout->time) {
  127894:	e30e3278 	movw	r3, #57976	; 0xe278
  127898:	e3403014 	movt	r3, #20
  12789c:	e5933000 	ldr	r3, [r3]
  1278a0:	e5933004 	ldr	r3, [r3, #4]
  1278a4:	e51b2008 	ldr	r2, [fp, #-8]
  1278a8:	e1520003 	cmp	r2, r3
  1278ac:	9a000001 	bls	1278b8 <sys_timeouts_sleeptime+0x68>
    return 0;
  1278b0:	e3a03000 	mov	r3, #0
  1278b4:	ea000005 	b	1278d0 <sys_timeouts_sleeptime+0x80>
  } else {
    return next_timeout->time - diff;
  1278b8:	e30e3278 	movw	r3, #57976	; 0xe278
  1278bc:	e3403014 	movt	r3, #20
  1278c0:	e5933000 	ldr	r3, [r3]
  1278c4:	e5932004 	ldr	r2, [r3, #4]
  1278c8:	e51b3008 	ldr	r3, [fp, #-8]
  1278cc:	e0423003 	sub	r3, r2, r3
  }
}
  1278d0:	e1a00003 	mov	r0, r3
  1278d4:	e24bd004 	sub	sp, fp, #4
  1278d8:	e8bd8800 	pop	{fp, pc}

001278dc <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
  1278dc:	e92d4800 	push	{fp, lr}
  1278e0:	e28db004 	add	fp, sp, #4
  1278e4:	e24dd010 	sub	sp, sp, #16
  1278e8:	e50b0010 	str	r0, [fp, #-16]
  1278ec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u32_t sleeptime;

again:
  if (!next_timeout) {
  1278f0:	e30e3278 	movw	r3, #57976	; 0xe278
  1278f4:	e3403014 	movt	r3, #20
  1278f8:	e5933000 	ldr	r3, [r3]
  1278fc:	e3530000 	cmp	r3, #0
  127900:	1a000004 	bne	127918 <sys_timeouts_mbox_fetch+0x3c>
    sys_arch_mbox_fetch(mbox, msg, 0);
  127904:	e3a02000 	mov	r2, #0
  127908:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12790c:	e51b0010 	ldr	r0, [fp, #-16]
  127910:	ebff8d4d 	bl	10ae4c <sys_arch_mbox_fetch>
    return;
  127914:	ea00000d 	b	127950 <sys_timeouts_mbox_fetch+0x74>
  }

  sleeptime = sys_timeouts_sleeptime();
  127918:	ebffffcc 	bl	127850 <sys_timeouts_sleeptime>
  12791c:	e50b0008 	str	r0, [fp, #-8]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
  127920:	e51b3008 	ldr	r3, [fp, #-8]
  127924:	e3530000 	cmp	r3, #0
  127928:	0a000006 	beq	127948 <sys_timeouts_mbox_fetch+0x6c>
  12792c:	e51b2008 	ldr	r2, [fp, #-8]
  127930:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127934:	e51b0010 	ldr	r0, [fp, #-16]
  127938:	ebff8d43 	bl	10ae4c <sys_arch_mbox_fetch>
  12793c:	e1a03000 	mov	r3, r0
  127940:	e3730001 	cmn	r3, #1
  127944:	1a000001 	bne	127950 <sys_timeouts_mbox_fetch+0x74>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
  127948:	ebffff69 	bl	1276f4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
  12794c:	eaffffe7 	b	1278f0 <sys_timeouts_mbox_fetch+0x14>
  }
}
  127950:	e24bd004 	sub	sp, fp, #4
  127954:	e8bd8800 	pop	{fp, pc}

00127958 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  127958:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12795c:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  127960:	e320f000 	nop	{0}
  127964:	e28bd000 	add	sp, fp, #0
  127968:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12796c:	e12fff1e 	bx	lr

00127970 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  127970:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  127974:	e28db000 	add	fp, sp, #0
  127978:	e24dd00c 	sub	sp, sp, #12
  u16_t n = 0;
  12797c:	e3a03000 	mov	r3, #0
  127980:	e14b30b6 	strh	r3, [fp, #-6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
  127984:	e30d3038 	movw	r3, #53304	; 0xd038
  127988:	e3403014 	movt	r3, #20
  12798c:	e1d320b0 	ldrh	r2, [r3]
  127990:	e2823001 	add	r3, r2, #1
  127994:	e6ff1073 	uxth	r1, r3
  127998:	e30d3038 	movw	r3, #53304	; 0xd038
  12799c:	e3403014 	movt	r3, #20
  1279a0:	e1c310b0 	strh	r1, [r3]
  1279a4:	e30f3fff 	movw	r3, #65535	; 0xffff
  1279a8:	e1520003 	cmp	r2, r3
  1279ac:	1a000003 	bne	1279c0 <udp_new_port+0x50>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  1279b0:	e30d3038 	movw	r3, #53304	; 0xd038
  1279b4:	e3403014 	movt	r3, #20
  1279b8:	e3a02903 	mov	r2, #49152	; 0xc000
  1279bc:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  1279c0:	e30c3c50 	movw	r3, #52304	; 0xcc50
  1279c4:	e3403015 	movt	r3, #21
  1279c8:	e5933000 	ldr	r3, [r3]
  1279cc:	e50b300c 	str	r3, [fp, #-12]
  1279d0:	ea000011 	b	127a1c <udp_new_port+0xac>
    if (pcb->local_port == udp_port) {
  1279d4:	e51b300c 	ldr	r3, [fp, #-12]
  1279d8:	e1d321b2 	ldrh	r2, [r3, #18]
  1279dc:	e30d3038 	movw	r3, #53304	; 0xd038
  1279e0:	e3403014 	movt	r3, #20
  1279e4:	e1d330b0 	ldrh	r3, [r3]
  1279e8:	e1520003 	cmp	r2, r3
  1279ec:	1a000007 	bne	127a10 <udp_new_port+0xa0>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
  1279f0:	e15b30b6 	ldrh	r3, [fp, #-6]
  1279f4:	e2833001 	add	r3, r3, #1
  1279f8:	e14b30b6 	strh	r3, [fp, #-6]
  1279fc:	e15b30b6 	ldrh	r3, [fp, #-6]
  127a00:	e3530901 	cmp	r3, #16384	; 0x4000
  127a04:	3affffde 	bcc	127984 <udp_new_port+0x14>
        return 0;
  127a08:	e3a03000 	mov	r3, #0
  127a0c:	ea000008 	b	127a34 <udp_new_port+0xc4>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127a10:	e51b300c 	ldr	r3, [fp, #-12]
  127a14:	e593300c 	ldr	r3, [r3, #12]
  127a18:	e50b300c 	str	r3, [fp, #-12]
  127a1c:	e51b300c 	ldr	r3, [fp, #-12]
  127a20:	e3530000 	cmp	r3, #0
  127a24:	1affffea 	bne	1279d4 <udp_new_port+0x64>
      }
      goto again;
    }
  }
  return udp_port;
  127a28:	e30d3038 	movw	r3, #53304	; 0xd038
  127a2c:	e3403014 	movt	r3, #20
  127a30:	e1d330b0 	ldrh	r3, [r3]
}
  127a34:	e1a00003 	mov	r0, r3
  127a38:	e28bd000 	add	sp, fp, #0
  127a3c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  127a40:	e12fff1e 	bx	lr

00127a44 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
  127a44:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  127a48:	e28db000 	add	fp, sp, #0
  127a4c:	e24dd014 	sub	sp, sp, #20
  127a50:	e50b0008 	str	r0, [fp, #-8]
  127a54:	e50b100c 	str	r1, [fp, #-12]
  127a58:	e1a03002 	mov	r3, r2
  127a5c:	e54b300d 	strb	r3, [fp, #-13]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  127a60:	e55b300d 	ldrb	r3, [fp, #-13]
  127a64:	e3530000 	cmp	r3, #0
  127a68:	0a00001e 	beq	127ae8 <udp_input_local_match+0xa4>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  127a6c:	e51b3008 	ldr	r3, [fp, #-8]
  127a70:	e5d33008 	ldrb	r3, [r3, #8]
  127a74:	e2033020 	and	r3, r3, #32
  127a78:	e3530000 	cmp	r3, #0
  127a7c:	0a000029 	beq	127b28 <udp_input_local_match+0xe4>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127a80:	e51b3008 	ldr	r3, [fp, #-8]
  127a84:	e3530000 	cmp	r3, #0
  127a88:	0a000014 	beq	127ae0 <udp_input_local_match+0x9c>
  127a8c:	e51b3008 	ldr	r3, [fp, #-8]
  127a90:	e5933000 	ldr	r3, [r3]
  127a94:	e3530000 	cmp	r3, #0
  127a98:	0a000010 	beq	127ae0 <udp_input_local_match+0x9c>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  127a9c:	e30f3610 	movw	r3, #62992	; 0xf610
  127aa0:	e3403014 	movt	r3, #20
  127aa4:	e5933014 	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127aa8:	e3730001 	cmn	r3, #1
  127aac:	0a00000b 	beq	127ae0 <udp_input_local_match+0x9c>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
  127ab0:	e51b3008 	ldr	r3, [fp, #-8]
  127ab4:	e5932000 	ldr	r2, [r3]
  127ab8:	e30f3610 	movw	r3, #62992	; 0xf610
  127abc:	e3403014 	movt	r3, #20
  127ac0:	e5933014 	ldr	r3, [r3, #20]
  127ac4:	e0222003 	eor	r2, r2, r3
  127ac8:	e51b300c 	ldr	r3, [fp, #-12]
  127acc:	e2833008 	add	r3, r3, #8
  127ad0:	e5933000 	ldr	r3, [r3]
  127ad4:	e0033002 	and	r3, r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  127ad8:	e3530000 	cmp	r3, #0
  127adc:	1a000011 	bne	127b28 <udp_input_local_match+0xe4>
          return 1;
  127ae0:	e3a03001 	mov	r3, #1
  127ae4:	ea000010 	b	127b2c <udp_input_local_match+0xe8>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  127ae8:	e51b3008 	ldr	r3, [fp, #-8]
  127aec:	e3530000 	cmp	r3, #0
  127af0:	0a00000a 	beq	127b20 <udp_input_local_match+0xdc>
  127af4:	e51b3008 	ldr	r3, [fp, #-8]
  127af8:	e5933000 	ldr	r3, [r3]
  127afc:	e3530000 	cmp	r3, #0
  127b00:	0a000006 	beq	127b20 <udp_input_local_match+0xdc>
  127b04:	e51b3008 	ldr	r3, [fp, #-8]
  127b08:	e5932000 	ldr	r2, [r3]
  127b0c:	e30f3610 	movw	r3, #62992	; 0xf610
  127b10:	e3403014 	movt	r3, #20
  127b14:	e5933014 	ldr	r3, [r3, #20]
  127b18:	e1520003 	cmp	r2, r3
  127b1c:	1a000001 	bne	127b28 <udp_input_local_match+0xe4>
      return 1;
  127b20:	e3a03001 	mov	r3, #1
  127b24:	ea000000 	b	127b2c <udp_input_local_match+0xe8>
    }
  }

  return 0;
  127b28:	e3a03000 	mov	r3, #0
}
  127b2c:	e1a00003 	mov	r0, r3
  127b30:	e28bd000 	add	sp, fp, #0
  127b34:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  127b38:	e12fff1e 	bx	lr

00127b3c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  127b3c:	e92d4810 	push	{r4, fp, lr}
  127b40:	e28db008 	add	fp, sp, #8
  127b44:	e24dd034 	sub	sp, sp, #52	; 0x34
  127b48:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  127b4c:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
  127b50:	e3a03000 	mov	r3, #0
  127b54:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
  127b58:	e30c3a48 	movw	r3, #51784	; 0xca48
  127b5c:	e3403015 	movt	r3, #21
  127b60:	e1d339b6 	ldrh	r3, [r3, #150]	; 0x96
  127b64:	e2833001 	add	r3, r3, #1
  127b68:	e6ff2073 	uxth	r2, r3
  127b6c:	e30c3a48 	movw	r3, #51784	; 0xca48
  127b70:	e3403015 	movt	r3, #21
  127b74:	e1c329b6 	strh	r2, [r3, #150]	; 0x96

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
  127b78:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127b7c:	e1d330ba 	ldrh	r3, [r3, #10]
  127b80:	e3530007 	cmp	r3, #7
  127b84:	8a000019 	bhi	127bf0 <udp_input+0xb4>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
  127b88:	e30c3a48 	movw	r3, #51784	; 0xca48
  127b8c:	e3403015 	movt	r3, #21
  127b90:	e1d339be 	ldrh	r3, [r3, #158]	; 0x9e
  127b94:	e2833001 	add	r3, r3, #1
  127b98:	e6ff2073 	uxth	r2, r3
  127b9c:	e30c3a48 	movw	r3, #51784	; 0xca48
  127ba0:	e3403015 	movt	r3, #21
  127ba4:	e1c329be 	strh	r2, [r3, #158]	; 0x9e
    UDP_STATS_INC(udp.drop);
  127ba8:	e30c3a48 	movw	r3, #51784	; 0xca48
  127bac:	e3403015 	movt	r3, #21
  127bb0:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127bb4:	e2833001 	add	r3, r3, #1
  127bb8:	e6ff2073 	uxth	r2, r3
  127bbc:	e30c3a48 	movw	r3, #51784	; 0xca48
  127bc0:	e3403015 	movt	r3, #21
  127bc4:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
    MIB2_STATS_INC(mib2.udpinerrors);
  127bc8:	e30c3a48 	movw	r3, #51784	; 0xca48
  127bcc:	e3403015 	movt	r3, #21
  127bd0:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127bd4:	e2832001 	add	r2, r3, #1
  127bd8:	e30c3a48 	movw	r3, #51784	; 0xca48
  127bdc:	e3403015 	movt	r3, #21
  127be0:	e5832198 	str	r2, [r3, #408]	; 0x198
    pbuf_free(p);
  127be4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127be8:	ebffcca1 	bl	11ae74 <pbuf_free>
    goto end;
  127bec:	ea00010c 	b	128024 <udp_input+0x4e8>
  }

  udphdr = (struct udp_hdr *)p->payload;
  127bf0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127bf4:	e5933004 	ldr	r3, [r3, #4]
  127bf8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  127bfc:	e30f3610 	movw	r3, #62992	; 0xf610
  127c00:	e3403014 	movt	r3, #20
  127c04:	e5932014 	ldr	r2, [r3, #20]
  127c08:	e30f3610 	movw	r3, #62992	; 0xf610
  127c0c:	e3403014 	movt	r3, #20
  127c10:	e5933000 	ldr	r3, [r3]
  127c14:	e1a01003 	mov	r1, r3
  127c18:	e1a00002 	mov	r0, r2
  127c1c:	eb002a2c 	bl	1324d4 <ip4_addr_isbroadcast_u32>
  127c20:	e1a03000 	mov	r3, r0
  127c24:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
  127c28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127c2c:	e1d330b0 	ldrh	r3, [r3]
  127c30:	e6ff3073 	uxth	r3, r3
  127c34:	e1a00003 	mov	r0, r3
  127c38:	ebffba56 	bl	116598 <lwip_htons>
  127c3c:	e1a03000 	mov	r3, r0
  127c40:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  dest = lwip_ntohs(udphdr->dest);
  127c44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127c48:	e1d330b2 	ldrh	r3, [r3, #2]
  127c4c:	e6ff3073 	uxth	r3, r3
  127c50:	e1a00003 	mov	r0, r3
  127c54:	ebffba4f 	bl	116598 <lwip_htons>
  127c58:	e1a03000 	mov	r3, r0
  127c5c:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
  127c60:	e3a03000 	mov	r3, #0
  127c64:	e50b3010 	str	r3, [fp, #-16]
  prev = NULL;
  127c68:	e3a03000 	mov	r3, #0
  127c6c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  uncon_pcb = NULL;
  127c70:	e3a03000 	mov	r3, #0
  127c74:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127c78:	e30c3c50 	movw	r3, #52304	; 0xcc50
  127c7c:	e3403015 	movt	r3, #21
  127c80:	e5933000 	ldr	r3, [r3]
  127c84:	e50b3010 	str	r3, [fp, #-16]
  127c88:	ea00004c 	b	127dc0 <udp_input+0x284>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
  127c8c:	e51b3010 	ldr	r3, [fp, #-16]
  127c90:	e1d331b2 	ldrh	r3, [r3, #18]
  127c94:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  127c98:	e1520003 	cmp	r2, r3
  127c9c:	1a000042 	bne	127dac <udp_input+0x270>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
  127ca0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  127ca4:	e1a02003 	mov	r2, r3
  127ca8:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  127cac:	e51b0010 	ldr	r0, [fp, #-16]
  127cb0:	ebffff63 	bl	127a44 <udp_input_local_match>
  127cb4:	e1a03000 	mov	r3, r0
    if ((pcb->local_port == dest) &&
  127cb8:	e3530000 	cmp	r3, #0
  127cbc:	0a00003a 	beq	127dac <udp_input+0x270>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
  127cc0:	e51b3010 	ldr	r3, [fp, #-16]
  127cc4:	e5d33010 	ldrb	r3, [r3, #16]
  127cc8:	e2033004 	and	r3, r3, #4
  127ccc:	e3530000 	cmp	r3, #0
  127cd0:	1a00000b 	bne	127d04 <udp_input+0x1c8>
  127cd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127cd8:	e3530000 	cmp	r3, #0
  127cdc:	0a000006 	beq	127cfc <udp_input+0x1c0>
          ((uncon_pcb == NULL)
#if SO_REUSE
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
  127ce0:	e51b3010 	ldr	r3, [fp, #-16]
  127ce4:	e3530000 	cmp	r3, #0
  127ce8:	0a000005 	beq	127d04 <udp_input+0x1c8>
  127cec:	e51b3010 	ldr	r3, [fp, #-16]
  127cf0:	e5933000 	ldr	r3, [r3]
  127cf4:	e3530000 	cmp	r3, #0
  127cf8:	0a000001 	beq	127d04 <udp_input+0x1c8>
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
  127cfc:	e51b3010 	ldr	r3, [fp, #-16]
  127d00:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
  127d04:	e51b3010 	ldr	r3, [fp, #-16]
  127d08:	e1d331b4 	ldrh	r3, [r3, #20]
  127d0c:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  127d10:	e1520003 	cmp	r2, r3
  127d14:	1a000024 	bne	127dac <udp_input+0x270>
          (ip_addr_isany_val(pcb->remote_ip) ||
  127d18:	e51b3010 	ldr	r3, [fp, #-16]
  127d1c:	e5933004 	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
  127d20:	e3530000 	cmp	r3, #0
  127d24:	0a000006 	beq	127d44 <udp_input+0x208>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
  127d28:	e51b3010 	ldr	r3, [fp, #-16]
  127d2c:	e5932004 	ldr	r2, [r3, #4]
  127d30:	e30f3610 	movw	r3, #62992	; 0xf610
  127d34:	e3403014 	movt	r3, #20
  127d38:	e5933010 	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
  127d3c:	e1520003 	cmp	r2, r3
  127d40:	1a000019 	bne	127dac <udp_input+0x270>
        /* the first fully matching PCB */
        if (prev != NULL) {
  127d44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127d48:	e3530000 	cmp	r3, #0
  127d4c:	0a00000d 	beq	127d88 <udp_input+0x24c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
  127d50:	e51b3010 	ldr	r3, [fp, #-16]
  127d54:	e593200c 	ldr	r2, [r3, #12]
  127d58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127d5c:	e583200c 	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
  127d60:	e30c3c50 	movw	r3, #52304	; 0xcc50
  127d64:	e3403015 	movt	r3, #21
  127d68:	e5932000 	ldr	r2, [r3]
  127d6c:	e51b3010 	ldr	r3, [fp, #-16]
  127d70:	e583200c 	str	r2, [r3, #12]
          udp_pcbs = pcb;
  127d74:	e30c3c50 	movw	r3, #52304	; 0xcc50
  127d78:	e3403015 	movt	r3, #21
  127d7c:	e51b2010 	ldr	r2, [fp, #-16]
  127d80:	e5832000 	str	r2, [r3]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
  127d84:	ea000010 	b	127dcc <udp_input+0x290>
          UDP_STATS_INC(udp.cachehit);
  127d88:	e30c3a48 	movw	r3, #51784	; 0xca48
  127d8c:	e3403015 	movt	r3, #21
  127d90:	e1d33aba 	ldrh	r3, [r3, #170]	; 0xaa
  127d94:	e2833001 	add	r3, r3, #1
  127d98:	e6ff2073 	uxth	r2, r3
  127d9c:	e30c3a48 	movw	r3, #51784	; 0xca48
  127da0:	e3403015 	movt	r3, #21
  127da4:	e1c32aba 	strh	r2, [r3, #170]	; 0xaa
        break;
  127da8:	ea000007 	b	127dcc <udp_input+0x290>
      }
    }

    prev = pcb;
  127dac:	e51b3010 	ldr	r3, [fp, #-16]
  127db0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127db4:	e51b3010 	ldr	r3, [fp, #-16]
  127db8:	e593300c 	ldr	r3, [r3, #12]
  127dbc:	e50b3010 	str	r3, [fp, #-16]
  127dc0:	e51b3010 	ldr	r3, [fp, #-16]
  127dc4:	e3530000 	cmp	r3, #0
  127dc8:	1affffaf 	bne	127c8c <udp_input+0x150>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
  127dcc:	e51b3010 	ldr	r3, [fp, #-16]
  127dd0:	e3530000 	cmp	r3, #0
  127dd4:	1a000001 	bne	127de0 <udp_input+0x2a4>
    pcb = uncon_pcb;
  127dd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127ddc:	e50b3010 	str	r3, [fp, #-16]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
  127de0:	e51b3010 	ldr	r3, [fp, #-16]
  127de4:	e3530000 	cmp	r3, #0
  127de8:	0a000002 	beq	127df8 <udp_input+0x2bc>
    for_us = 1;
  127dec:	e3a03001 	mov	r3, #1
  127df0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  127df4:	ea00000a 	b	127e24 <udp_input+0x2e8>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
  127df8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  127dfc:	e2833004 	add	r3, r3, #4
  127e00:	e5932000 	ldr	r2, [r3]
  127e04:	e30f3610 	movw	r3, #62992	; 0xf610
  127e08:	e3403014 	movt	r3, #20
  127e0c:	e5933014 	ldr	r3, [r3, #20]
  127e10:	e1520003 	cmp	r2, r3
  127e14:	03a03001 	moveq	r3, #1
  127e18:	13a03000 	movne	r3, #0
  127e1c:	e6ef3073 	uxtb	r3, r3
  127e20:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
  127e24:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  127e28:	e3530000 	cmp	r3, #0
  127e2c:	0a000079 	beq	128018 <udp_input+0x4dc>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
  127e30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127e34:	e1d330b6 	ldrh	r3, [r3, #6]
  127e38:	e6ff3073 	uxth	r3, r3
  127e3c:	e3530000 	cmp	r3, #0
  127e40:	0a00000a 	beq	127e70 <udp_input+0x334>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
  127e44:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127e48:	e1d320b8 	ldrh	r2, [r3, #8]
  127e4c:	e59f3244 	ldr	r3, [pc, #580]	; 128098 <udp_input+0x55c>
  127e50:	e58d3000 	str	r3, [sp]
  127e54:	e59f3240 	ldr	r3, [pc, #576]	; 12809c <udp_input+0x560>
  127e58:	e3a01011 	mov	r1, #17
  127e5c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127e60:	ebffc1eb 	bl	118614 <ip_chksum_pseudo>
  127e64:	e1a03000 	mov	r3, r0
  127e68:	e3530000 	cmp	r3, #0
  127e6c:	1a00006d 	bne	128028 <udp_input+0x4ec>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
  127e70:	e3e01007 	mvn	r1, #7
  127e74:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127e78:	ebffcbdf 	bl	11adfc <pbuf_header>
  127e7c:	e1a03000 	mov	r3, r0
  127e80:	e3530000 	cmp	r3, #0
  127e84:	0a000018 	beq	127eec <udp_input+0x3b0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
  127e88:	e3080a88 	movw	r0, #35464	; 0x8a88
  127e8c:	e3400014 	movt	r0, #20
  127e90:	ebff6c9f 	bl	103114 <rt_kprintf>
  127e94:	e3001155 	movw	r1, #341	; 0x155
  127e98:	e3080a9c 	movw	r0, #35484	; 0x8a9c
  127e9c:	e3400014 	movt	r0, #20
  127ea0:	ebff8c83 	bl	10b0b4 <sys_arch_assert>
      UDP_STATS_INC(udp.drop);
  127ea4:	e30c3a48 	movw	r3, #51784	; 0xca48
  127ea8:	e3403015 	movt	r3, #21
  127eac:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127eb0:	e2833001 	add	r3, r3, #1
  127eb4:	e6ff2073 	uxth	r2, r3
  127eb8:	e30c3a48 	movw	r3, #51784	; 0xca48
  127ebc:	e3403015 	movt	r3, #21
  127ec0:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpinerrors);
  127ec4:	e30c3a48 	movw	r3, #51784	; 0xca48
  127ec8:	e3403015 	movt	r3, #21
  127ecc:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127ed0:	e2832001 	add	r2, r3, #1
  127ed4:	e30c3a48 	movw	r3, #51784	; 0xca48
  127ed8:	e3403015 	movt	r3, #21
  127edc:	e5832198 	str	r2, [r3, #408]	; 0x198
      pbuf_free(p);
  127ee0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127ee4:	ebffcbe2 	bl	11ae74 <pbuf_free>
      goto end;
  127ee8:	ea00004d 	b	128024 <udp_input+0x4e8>
    }

    if (pcb != NULL) {
  127eec:	e51b3010 	ldr	r3, [fp, #-16]
  127ef0:	e3530000 	cmp	r3, #0
  127ef4:	0a000018 	beq	127f5c <udp_input+0x420>
      MIB2_STATS_INC(mib2.udpindatagrams);
  127ef8:	e30c3a48 	movw	r3, #51784	; 0xca48
  127efc:	e3403015 	movt	r3, #21
  127f00:	e5933190 	ldr	r3, [r3, #400]	; 0x190
  127f04:	e2832001 	add	r2, r3, #1
  127f08:	e30c3a48 	movw	r3, #51784	; 0xca48
  127f0c:	e3403015 	movt	r3, #21
  127f10:	e5832190 	str	r2, [r3, #400]	; 0x190
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
  127f14:	e51b3010 	ldr	r3, [fp, #-16]
  127f18:	e5933020 	ldr	r3, [r3, #32]
  127f1c:	e3530000 	cmp	r3, #0
  127f20:	0a00000a 	beq	127f50 <udp_input+0x414>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  127f24:	e51b3010 	ldr	r3, [fp, #-16]
  127f28:	e5934020 	ldr	r4, [r3, #32]
  127f2c:	e51b3010 	ldr	r3, [fp, #-16]
  127f30:	e5930024 	ldr	r0, [r3, #36]	; 0x24
  127f34:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  127f38:	e58d3000 	str	r3, [sp]
  127f3c:	e59f3158 	ldr	r3, [pc, #344]	; 12809c <udp_input+0x560>
  127f40:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  127f44:	e51b1010 	ldr	r1, [fp, #-16]
  127f48:	e12fff34 	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
  127f4c:	ea00004f 	b	128090 <udp_input+0x554>
        pbuf_free(p);
  127f50:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127f54:	ebffcbc6 	bl	11ae74 <pbuf_free>
        goto end;
  127f58:	ea000031 	b	128024 <udp_input+0x4e8>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
  127f5c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  127f60:	e3530000 	cmp	r3, #0
  127f64:	1a000011 	bne	127fb0 <udp_input+0x474>
  127f68:	e30f3610 	movw	r3, #62992	; 0xf610
  127f6c:	e3403014 	movt	r3, #20
  127f70:	e5933014 	ldr	r3, [r3, #20]
  127f74:	e20330f0 	and	r3, r3, #240	; 0xf0
  127f78:	e35300e0 	cmp	r3, #224	; 0xe0
  127f7c:	0a00000b 	beq	127fb0 <udp_input+0x474>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
  127f80:	e30f3610 	movw	r3, #62992	; 0xf610
  127f84:	e3403014 	movt	r3, #20
  127f88:	e1d330bc 	ldrh	r3, [r3, #12]
  127f8c:	e2833008 	add	r3, r3, #8
  127f90:	e6ff3073 	uxth	r3, r3
  127f94:	e6bf3073 	sxth	r3, r3
  127f98:	e1a01003 	mov	r1, r3
  127f9c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127fa0:	ebffcba4 	bl	11ae38 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
  127fa4:	e3a01003 	mov	r1, #3
  127fa8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127fac:	eb001f27 	bl	12fc50 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
  127fb0:	e30c3a48 	movw	r3, #51784	; 0xca48
  127fb4:	e3403015 	movt	r3, #21
  127fb8:	e1d33ab4 	ldrh	r3, [r3, #164]	; 0xa4
  127fbc:	e2833001 	add	r3, r3, #1
  127fc0:	e6ff2073 	uxth	r2, r3
  127fc4:	e30c3a48 	movw	r3, #51784	; 0xca48
  127fc8:	e3403015 	movt	r3, #21
  127fcc:	e1c32ab4 	strh	r2, [r3, #164]	; 0xa4
      UDP_STATS_INC(udp.drop);
  127fd0:	e30c3a48 	movw	r3, #51784	; 0xca48
  127fd4:	e3403015 	movt	r3, #21
  127fd8:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127fdc:	e2833001 	add	r3, r3, #1
  127fe0:	e6ff2073 	uxth	r2, r3
  127fe4:	e30c3a48 	movw	r3, #51784	; 0xca48
  127fe8:	e3403015 	movt	r3, #21
  127fec:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpnoports);
  127ff0:	e30c3a48 	movw	r3, #51784	; 0xca48
  127ff4:	e3403015 	movt	r3, #21
  127ff8:	e5933194 	ldr	r3, [r3, #404]	; 0x194
  127ffc:	e2832001 	add	r2, r3, #1
  128000:	e30c3a48 	movw	r3, #51784	; 0xca48
  128004:	e3403015 	movt	r3, #21
  128008:	e5832194 	str	r2, [r3, #404]	; 0x194
      pbuf_free(p);
  12800c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  128010:	ebffcb97 	bl	11ae74 <pbuf_free>
  return;
  128014:	ea00001d 	b	128090 <udp_input+0x554>
    pbuf_free(p);
  128018:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12801c:	ebffcb94 	bl	11ae74 <pbuf_free>
  return;
  128020:	ea00001a 	b	128090 <udp_input+0x554>
  128024:	ea000019 	b	128090 <udp_input+0x554>
            goto chkerr;
  128028:	e320f000 	nop	{0}
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  12802c:	e30c3a48 	movw	r3, #51784	; 0xca48
  128030:	e3403015 	movt	r3, #21
  128034:	e1d339bc 	ldrh	r3, [r3, #156]	; 0x9c
  128038:	e2833001 	add	r3, r3, #1
  12803c:	e6ff2073 	uxth	r2, r3
  128040:	e30c3a48 	movw	r3, #51784	; 0xca48
  128044:	e3403015 	movt	r3, #21
  128048:	e1c329bc 	strh	r2, [r3, #156]	; 0x9c
  UDP_STATS_INC(udp.drop);
  12804c:	e30c3a48 	movw	r3, #51784	; 0xca48
  128050:	e3403015 	movt	r3, #21
  128054:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  128058:	e2833001 	add	r3, r3, #1
  12805c:	e6ff2073 	uxth	r2, r3
  128060:	e30c3a48 	movw	r3, #51784	; 0xca48
  128064:	e3403015 	movt	r3, #21
  128068:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
  MIB2_STATS_INC(mib2.udpinerrors);
  12806c:	e30c3a48 	movw	r3, #51784	; 0xca48
  128070:	e3403015 	movt	r3, #21
  128074:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  128078:	e2832001 	add	r2, r3, #1
  12807c:	e30c3a48 	movw	r3, #51784	; 0xca48
  128080:	e3403015 	movt	r3, #21
  128084:	e5832198 	str	r2, [r3, #408]	; 0x198
  pbuf_free(p);
  128088:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12808c:	ebffcb78 	bl	11ae74 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
  128090:	e24bd008 	sub	sp, fp, #8
  128094:	e8bd8810 	pop	{r4, fp, pc}
  128098:	0014f624 	.word	0x0014f624
  12809c:	0014f620 	.word	0x0014f620

001280a0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
  1280a0:	e92d4800 	push	{fp, lr}
  1280a4:	e28db004 	add	fp, sp, #4
  1280a8:	e24dd008 	sub	sp, sp, #8
  1280ac:	e50b0008 	str	r0, [fp, #-8]
  1280b0:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
  1280b4:	e51b3008 	ldr	r3, [fp, #-8]
  1280b8:	e3530000 	cmp	r3, #0
  1280bc:	1a000001 	bne	1280c8 <udp_send+0x28>
    return ERR_VAL;
  1280c0:	e3e03005 	mvn	r3, #5
  1280c4:	ea000007 	b	1280e8 <udp_send+0x48>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
  1280c8:	e51b3008 	ldr	r3, [fp, #-8]
  1280cc:	e2832004 	add	r2, r3, #4
  1280d0:	e51b3008 	ldr	r3, [fp, #-8]
  1280d4:	e1d331b4 	ldrh	r3, [r3, #20]
  1280d8:	e51b100c 	ldr	r1, [fp, #-12]
  1280dc:	e51b0008 	ldr	r0, [fp, #-8]
  1280e0:	eb000003 	bl	1280f4 <udp_sendto>
  1280e4:	e1a03000 	mov	r3, r0
}
  1280e8:	e1a00003 	mov	r0, r3
  1280ec:	e24bd004 	sub	sp, fp, #4
  1280f0:	e8bd8800 	pop	{fp, pc}

001280f4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
  1280f4:	e92d4800 	push	{fp, lr}
  1280f8:	e28db004 	add	fp, sp, #4
  1280fc:	e24dd020 	sub	sp, sp, #32
  128100:	e50b0010 	str	r0, [fp, #-16]
  128104:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128108:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  12810c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
  128110:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128114:	e50b3008 	str	r3, [fp, #-8]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  128118:	e51b3010 	ldr	r3, [fp, #-16]
  12811c:	e3530000 	cmp	r3, #0
  128120:	0a000002 	beq	128130 <udp_sendto+0x3c>
  128124:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128128:	e3530000 	cmp	r3, #0
  12812c:	1a000001 	bne	128138 <udp_sendto+0x44>
    return ERR_VAL;
  128130:	e3e03005 	mvn	r3, #5
  128134:	ea00002b 	b	1281e8 <udp_sendto+0xf4>
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

#if LWIP_IPV6 || (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS)
  if (ip_addr_ismulticast(dst_ip_route)) {
  128138:	e51b3008 	ldr	r3, [fp, #-8]
  12813c:	e5933000 	ldr	r3, [r3]
  128140:	e20330f0 	and	r3, r3, #240	; 0xf0
  128144:	e35300e0 	cmp	r3, #224	; 0xe0
  128148:	1a00000d 	bne	128184 <udp_sendto+0x90>
#if LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS
      /* IPv4 does not use source-based routing by default, so we use an
         administratively selected interface for multicast by default.
         However, this can be overridden by setting an interface address
         in pcb->multicast_ip that is used for routing. */
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  12814c:	e51b3010 	ldr	r3, [fp, #-16]
  128150:	e5933018 	ldr	r3, [r3, #24]
  128154:	e3530000 	cmp	r3, #0
  128158:	0a000009 	beq	128184 <udp_sendto+0x90>
          !ip4_addr_cmp(ip_2_ip4(&pcb->multicast_ip), IP4_ADDR_BROADCAST)) {
  12815c:	e51b3010 	ldr	r3, [fp, #-16]
  128160:	e5932018 	ldr	r2, [r3, #24]
  128164:	e30938d4 	movw	r3, #39124	; 0x98d4
  128168:	e3403014 	movt	r3, #20
  12816c:	e5933000 	ldr	r3, [r3]
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  128170:	e1520003 	cmp	r2, r3
  128174:	0a000002 	beq	128184 <udp_sendto+0x90>
        dst_ip_route = &pcb->multicast_ip;
  128178:	e51b3010 	ldr	r3, [fp, #-16]
  12817c:	e2833018 	add	r3, r3, #24
  128180:	e50b3008 	str	r3, [fp, #-8]
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
  128184:	e51b0008 	ldr	r0, [fp, #-8]
  128188:	eb0023f2 	bl	131158 <ip4_route>
  12818c:	e50b000c 	str	r0, [fp, #-12]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
  128190:	e51b300c 	ldr	r3, [fp, #-12]
  128194:	e3530000 	cmp	r3, #0
  128198:	1a000009 	bne	1281c4 <udp_sendto+0xd0>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
  12819c:	e30c3a48 	movw	r3, #51784	; 0xca48
  1281a0:	e3403015 	movt	r3, #21
  1281a4:	e1d33ab2 	ldrh	r3, [r3, #162]	; 0xa2
  1281a8:	e2833001 	add	r3, r3, #1
  1281ac:	e6ff2073 	uxth	r2, r3
  1281b0:	e30c3a48 	movw	r3, #51784	; 0xca48
  1281b4:	e3403015 	movt	r3, #21
  1281b8:	e1c32ab2 	strh	r2, [r3, #162]	; 0xa2
    return ERR_RTE;
  1281bc:	e3e03003 	mvn	r3, #3
  1281c0:	ea000008 	b	1281e8 <udp_sendto+0xf4>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
  1281c4:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  1281c8:	e51b300c 	ldr	r3, [fp, #-12]
  1281cc:	e58d3000 	str	r3, [sp]
  1281d0:	e1a03002 	mov	r3, r2
  1281d4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1281d8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1281dc:	e51b0010 	ldr	r0, [fp, #-16]
  1281e0:	eb000003 	bl	1281f4 <udp_sendto_if>
  1281e4:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  1281e8:	e1a00003 	mov	r0, r3
  1281ec:	e24bd004 	sub	sp, fp, #4
  1281f0:	e8bd8800 	pop	{fp, pc}

001281f4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
  1281f4:	e92d4800 	push	{fp, lr}
  1281f8:	e28db004 	add	fp, sp, #4
  1281fc:	e24dd020 	sub	sp, sp, #32
  128200:	e50b0010 	str	r0, [fp, #-16]
  128204:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128208:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  12820c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  128210:	e51b3010 	ldr	r3, [fp, #-16]
  128214:	e3530000 	cmp	r3, #0
  128218:	0a000002 	beq	128228 <udp_sendto_if+0x34>
  12821c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128220:	e3530000 	cmp	r3, #0
  128224:	1a000001 	bne	128230 <udp_sendto_if+0x3c>
    return ERR_VAL;
  128228:	e3e03005 	mvn	r3, #5
  12822c:	ea000025 	b	1282c8 <udp_sendto_if+0xd4>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  128230:	e51b3010 	ldr	r3, [fp, #-16]
  128234:	e3530000 	cmp	r3, #0
  128238:	0a000008 	beq	128260 <udp_sendto_if+0x6c>
  12823c:	e51b3010 	ldr	r3, [fp, #-16]
  128240:	e5933000 	ldr	r3, [r3]
  128244:	e3530000 	cmp	r3, #0
  128248:	0a000004 	beq	128260 <udp_sendto_if+0x6c>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
  12824c:	e51b3010 	ldr	r3, [fp, #-16]
  128250:	e5933000 	ldr	r3, [r3]
  128254:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  128258:	e35300e0 	cmp	r3, #224	; 0xe0
  12825c:	1a000003 	bne	128270 <udp_sendto_if+0x7c>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
  128260:	e59b3004 	ldr	r3, [fp, #4]
  128264:	e2833004 	add	r3, r3, #4
  128268:	e50b3008 	str	r3, [fp, #-8]
  12826c:	ea00000a 	b	12829c <udp_sendto_if+0xa8>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
  128270:	e51b3010 	ldr	r3, [fp, #-16]
  128274:	e5932000 	ldr	r2, [r3]
  128278:	e59b3004 	ldr	r3, [fp, #4]
  12827c:	e2833004 	add	r3, r3, #4
  128280:	e5933000 	ldr	r3, [r3]
  128284:	e1520003 	cmp	r2, r3
  128288:	0a000001 	beq	128294 <udp_sendto_if+0xa0>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
  12828c:	e3e03003 	mvn	r3, #3
  128290:	ea00000c 	b	1282c8 <udp_sendto_if+0xd4>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  128294:	e51b3010 	ldr	r3, [fp, #-16]
  128298:	e50b3008 	str	r3, [fp, #-8]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
  12829c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  1282a0:	e51b3008 	ldr	r3, [fp, #-8]
  1282a4:	e58d3004 	str	r3, [sp, #4]
  1282a8:	e59b3004 	ldr	r3, [fp, #4]
  1282ac:	e58d3000 	str	r3, [sp]
  1282b0:	e1a03002 	mov	r3, r2
  1282b4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1282b8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1282bc:	e51b0010 	ldr	r0, [fp, #-16]
  1282c0:	eb000003 	bl	1282d4 <udp_sendto_if_src>
  1282c4:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  1282c8:	e1a00003 	mov	r0, r3
  1282cc:	e24bd004 	sub	sp, fp, #4
  1282d0:	e8bd8800 	pop	{fp, pc}

001282d4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
  1282d4:	e92d4800 	push	{fp, lr}
  1282d8:	e28db004 	add	fp, sp, #4
  1282dc:	e24dd030 	sub	sp, sp, #48	; 0x30
  1282e0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1282e4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1282e8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1282ec:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
  1282f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1282f4:	e3530000 	cmp	r3, #0
  1282f8:	0a000002 	beq	128308 <udp_sendto_if_src+0x34>
  1282fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128300:	e3530000 	cmp	r3, #0
  128304:	1a000001 	bne	128310 <udp_sendto_if_src+0x3c>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  128308:	e3e03005 	mvn	r3, #5
  12830c:	ea0000be 	b	12860c <udp_sendto_if_src+0x338>
  }

#if LWIP_IPV4 && IP_SOF_BROADCAST
  /* broadcast filter? */
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  128310:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128314:	e5d33008 	ldrb	r3, [r3, #8]
  128318:	e2033020 	and	r3, r3, #32
  12831c:	e3530000 	cmp	r3, #0
  128320:	1a000009 	bne	12834c <udp_sendto_if_src+0x78>
#if LWIP_IPV6
      IP_IS_V4(dst_ip) &&
#endif /* LWIP_IPV6 */
      ip_addr_isbroadcast(dst_ip, netif)) {
  128324:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128328:	e5933000 	ldr	r3, [r3]
  12832c:	e59b1004 	ldr	r1, [fp, #4]
  128330:	e1a00003 	mov	r0, r3
  128334:	eb002866 	bl	1324d4 <ip4_addr_isbroadcast_u32>
  128338:	e1a03000 	mov	r3, r0
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  12833c:	e3530000 	cmp	r3, #0
  128340:	0a000001 	beq	12834c <udp_sendto_if_src+0x78>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("udp_sendto_if: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
    return ERR_VAL;
  128344:	e3e03005 	mvn	r3, #5
  128348:	ea0000af 	b	12860c <udp_sendto_if_src+0x338>
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
  12834c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128350:	e1d331b2 	ldrh	r3, [r3, #18]
  128354:	e3530000 	cmp	r3, #0
  128358:	1a00000c 	bne	128390 <udp_sendto_if_src+0xbc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  12835c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  128360:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128364:	e1d331b2 	ldrh	r3, [r3, #18]
  128368:	e1a02003 	mov	r2, r3
  12836c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128370:	eb0000a8 	bl	128618 <udp_bind>
  128374:	e1a03000 	mov	r3, r0
  128378:	e54b300b 	strb	r3, [fp, #-11]
    if (err != ERR_OK) {
  12837c:	e15b30db 	ldrsb	r3, [fp, #-11]
  128380:	e3530000 	cmp	r3, #0
  128384:	0a000001 	beq	128390 <udp_sendto_if_src+0xbc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
  128388:	e15b30db 	ldrsb	r3, [fp, #-11]
  12838c:	ea00009e 	b	12860c <udp_sendto_if_src+0x338>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
  128390:	e3a01008 	mov	r1, #8
  128394:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  128398:	ebffca97 	bl	11adfc <pbuf_header>
  12839c:	e1a03000 	mov	r3, r0
  1283a0:	e3530000 	cmp	r3, #0
  1283a4:	0a000011 	beq	1283f0 <udp_sendto_if_src+0x11c>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
  1283a8:	e3a02000 	mov	r2, #0
  1283ac:	e3a01008 	mov	r1, #8
  1283b0:	e3a00001 	mov	r0, #1
  1283b4:	ebffc7a7 	bl	11a258 <pbuf_alloc>
  1283b8:	e50b0008 	str	r0, [fp, #-8]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  1283bc:	e51b3008 	ldr	r3, [fp, #-8]
  1283c0:	e3530000 	cmp	r3, #0
  1283c4:	1a000001 	bne	1283d0 <udp_sendto_if_src+0xfc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
  1283c8:	e3e03000 	mvn	r3, #0
  1283cc:	ea00008e 	b	12860c <udp_sendto_if_src+0x338>
    }
    if (p->tot_len != 0) {
  1283d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1283d4:	e1d330b8 	ldrh	r3, [r3, #8]
  1283d8:	e3530000 	cmp	r3, #0
  1283dc:	0a000005 	beq	1283f8 <udp_sendto_if_src+0x124>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
  1283e0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1283e4:	e51b0008 	ldr	r0, [fp, #-8]
  1283e8:	ebffcba2 	bl	11b278 <pbuf_chain>
  1283ec:	ea000001 	b	1283f8 <udp_sendto_if_src+0x124>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
  1283f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1283f4:	e50b3008 	str	r3, [fp, #-8]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
  1283f8:	e51b3008 	ldr	r3, [fp, #-8]
  1283fc:	e1d330ba 	ldrh	r3, [r3, #10]
  128400:	e3530007 	cmp	r3, #7
  128404:	8a000006 	bhi	128424 <udp_sendto_if_src+0x150>
  128408:	e3080ac8 	movw	r0, #35528	; 0x8ac8
  12840c:	e3400014 	movt	r0, #20
  128410:	ebff6b3f 	bl	103114 <rt_kprintf>
  128414:	e3a01fb7 	mov	r1, #732	; 0x2dc
  128418:	e3080a9c 	movw	r0, #35484	; 0x8a9c
  12841c:	e3400014 	movt	r0, #20
  128420:	ebff8b23 	bl	10b0b4 <sys_arch_assert>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  128424:	e51b3008 	ldr	r3, [fp, #-8]
  128428:	e5933004 	ldr	r3, [r3, #4]
  12842c:	e50b3010 	str	r3, [fp, #-16]
  udphdr->src = lwip_htons(pcb->local_port);
  128430:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128434:	e1d331b2 	ldrh	r3, [r3, #18]
  128438:	e1a00003 	mov	r0, r3
  12843c:	ebffb855 	bl	116598 <lwip_htons>
  128440:	e1a03000 	mov	r3, r0
  128444:	e1a02003 	mov	r2, r3
  128448:	e51b3010 	ldr	r3, [fp, #-16]
  12844c:	e1c320b0 	strh	r2, [r3]
  udphdr->dest = lwip_htons(dst_port);
  128450:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  128454:	e1a00003 	mov	r0, r3
  128458:	ebffb84e 	bl	116598 <lwip_htons>
  12845c:	e1a03000 	mov	r3, r0
  128460:	e1a02003 	mov	r2, r3
  128464:	e51b3010 	ldr	r3, [fp, #-16]
  128468:	e1c320b2 	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
  12846c:	e51b3010 	ldr	r3, [fp, #-16]
  128470:	e3a02000 	mov	r2, #0
  128474:	e5c32006 	strb	r2, [r3, #6]
  128478:	e3a02000 	mov	r2, #0
  12847c:	e5c32007 	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS) || (LWIP_IPV6 && LWIP_IPV6_MLD)
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
  128480:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128484:	e5d33010 	ldrb	r3, [r3, #16]
  128488:	e2033008 	and	r3, r3, #8
  12848c:	e3530000 	cmp	r3, #0
  128490:	0a00000a 	beq	1284c0 <udp_sendto_if_src+0x1ec>
  128494:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128498:	e5933000 	ldr	r3, [r3]
  12849c:	e20330f0 	and	r3, r3, #240	; 0xf0
  1284a0:	e35300e0 	cmp	r3, #224	; 0xe0
  1284a4:	1a000005 	bne	1284c0 <udp_sendto_if_src+0x1ec>
    q->flags |= PBUF_FLAG_MCASTLOOP;
  1284a8:	e51b3008 	ldr	r3, [fp, #-8]
  1284ac:	e5d3300d 	ldrb	r3, [r3, #13]
  1284b0:	e3833004 	orr	r3, r3, #4
  1284b4:	e6ef2073 	uxtb	r2, r3
  1284b8:	e51b3008 	ldr	r3, [fp, #-8]
  1284bc:	e5c3200d 	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
  1284c0:	e51b3008 	ldr	r3, [fp, #-8]
  1284c4:	e1d330b8 	ldrh	r3, [r3, #8]
  1284c8:	e1a00003 	mov	r0, r3
  1284cc:	ebffb831 	bl	116598 <lwip_htons>
  1284d0:	e1a03000 	mov	r3, r0
  1284d4:	e1a02003 	mov	r2, r3
  1284d8:	e51b3010 	ldr	r3, [fp, #-16]
  1284dc:	e1c320b4 	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
  1284e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1284e4:	e5d33010 	ldrb	r3, [r3, #16]
  1284e8:	e2033001 	and	r3, r3, #1
  1284ec:	e3530000 	cmp	r3, #0
  1284f0:	1a000011 	bne	12853c <udp_sendto_if_src+0x268>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
  1284f4:	e51b3008 	ldr	r3, [fp, #-8]
  1284f8:	e1d320b8 	ldrh	r2, [r3, #8]
  1284fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128500:	e58d3000 	str	r3, [sp]
  128504:	e59b3008 	ldr	r3, [fp, #8]
  128508:	e3a01011 	mov	r1, #17
  12850c:	e51b0008 	ldr	r0, [fp, #-8]
  128510:	ebffc03f 	bl	118614 <ip_chksum_pseudo>
  128514:	e1a03000 	mov	r3, r0
  128518:	e14b30ba 	strh	r3, [fp, #-10]
            src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
  12851c:	e15b30ba 	ldrh	r3, [fp, #-10]
  128520:	e3530000 	cmp	r3, #0
  128524:	1a000001 	bne	128530 <udp_sendto_if_src+0x25c>
          udpchksum = 0xffff;
  128528:	e3e03000 	mvn	r3, #0
  12852c:	e14b30ba 	strh	r3, [fp, #-10]
        }
        udphdr->chksum = udpchksum;
  128530:	e51b3010 	ldr	r3, [fp, #-16]
  128534:	e15b20ba 	ldrh	r2, [fp, #-10]
  128538:	e1c320b6 	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
  12853c:	e3a03011 	mov	r3, #17
  128540:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
  128544:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128548:	e5933000 	ldr	r3, [r3]
  12854c:	e20330f0 	and	r3, r3, #240	; 0xf0
  128550:	e35300e0 	cmp	r3, #224	; 0xe0
  128554:	1a000002 	bne	128564 <udp_sendto_if_src+0x290>
  128558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12855c:	e5d3301c 	ldrb	r3, [r3, #28]
  128560:	ea000001 	b	12856c <udp_sendto_if_src+0x298>
  128564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128568:	e5d3300a 	ldrb	r3, [r3, #10]
  12856c:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
  128570:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128574:	e5d33009 	ldrb	r3, [r3, #9]
  128578:	e55b1012 	ldrb	r1, [fp, #-18]	; 0xffffffee
  12857c:	e59b2004 	ldr	r2, [fp, #4]
  128580:	e58d2008 	str	r2, [sp, #8]
  128584:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  128588:	e58d2004 	str	r2, [sp, #4]
  12858c:	e58d3000 	str	r3, [sp]
  128590:	e1a03001 	mov	r3, r1
  128594:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  128598:	e59b1008 	ldr	r1, [fp, #8]
  12859c:	e51b0008 	ldr	r0, [fp, #-8]
  1285a0:	eb00260a 	bl	131dd0 <ip4_output_if_src>
  1285a4:	e1a03000 	mov	r3, r0
  1285a8:	e54b300b 	strb	r3, [fp, #-11]
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);
  1285ac:	e30c3a48 	movw	r3, #51784	; 0xca48
  1285b0:	e3403015 	movt	r3, #21
  1285b4:	e593319c 	ldr	r3, [r3, #412]	; 0x19c
  1285b8:	e2832001 	add	r2, r3, #1
  1285bc:	e30c3a48 	movw	r3, #51784	; 0xca48
  1285c0:	e3403015 	movt	r3, #21
  1285c4:	e583219c 	str	r2, [r3, #412]	; 0x19c

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
  1285c8:	e51b2008 	ldr	r2, [fp, #-8]
  1285cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1285d0:	e1520003 	cmp	r2, r3
  1285d4:	0a000003 	beq	1285e8 <udp_sendto_if_src+0x314>
    /* free the header pbuf */
    pbuf_free(q);
  1285d8:	e51b0008 	ldr	r0, [fp, #-8]
  1285dc:	ebffca24 	bl	11ae74 <pbuf_free>
    q = NULL;
  1285e0:	e3a03000 	mov	r3, #0
  1285e4:	e50b3008 	str	r3, [fp, #-8]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  1285e8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1285ec:	e3403015 	movt	r3, #21
  1285f0:	e1d339b4 	ldrh	r3, [r3, #148]	; 0x94
  1285f4:	e2833001 	add	r3, r3, #1
  1285f8:	e6ff2073 	uxth	r2, r3
  1285fc:	e30c3a48 	movw	r3, #51784	; 0xca48
  128600:	e3403015 	movt	r3, #21
  128604:	e1c329b4 	strh	r2, [r3, #148]	; 0x94
  return err;
  128608:	e15b30db 	ldrsb	r3, [fp, #-11]
}
  12860c:	e1a00003 	mov	r0, r3
  128610:	e24bd004 	sub	sp, fp, #4
  128614:	e8bd8800 	pop	{fp, pc}

00128618 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  128618:	e92d4800 	push	{fp, lr}
  12861c:	e28db004 	add	fp, sp, #4
  128620:	e24dd018 	sub	sp, sp, #24
  128624:	e50b0010 	str	r0, [fp, #-16]
  128628:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  12862c:	e1a03002 	mov	r3, r2
  128630:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  128634:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128638:	e3530000 	cmp	r3, #0
  12863c:	1a000002 	bne	12864c <udp_bind+0x34>
    ipaddr = IP4_ADDR_ANY;
  128640:	e30938d0 	movw	r3, #39120	; 0x98d0
  128644:	e3403014 	movt	r3, #20
  128648:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  12864c:	e51b3010 	ldr	r3, [fp, #-16]
  128650:	e3530000 	cmp	r3, #0
  128654:	0a000002 	beq	128664 <udp_bind+0x4c>
  128658:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12865c:	e3530000 	cmp	r3, #0
  128660:	1a000001 	bne	12866c <udp_bind+0x54>
    return ERR_VAL;
  128664:	e3e03005 	mvn	r3, #5
  128668:	ea00005d 	b	1287e4 <udp_bind+0x1cc>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  12866c:	e3a03000 	mov	r3, #0
  128670:	e54b3009 	strb	r3, [fp, #-9]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128674:	e30c3c50 	movw	r3, #52304	; 0xcc50
  128678:	e3403015 	movt	r3, #21
  12867c:	e5933000 	ldr	r3, [r3]
  128680:	e50b3008 	str	r3, [fp, #-8]
  128684:	ea000009 	b	1286b0 <udp_bind+0x98>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
  128688:	e51b2010 	ldr	r2, [fp, #-16]
  12868c:	e51b3008 	ldr	r3, [fp, #-8]
  128690:	e1520003 	cmp	r2, r3
  128694:	1a000002 	bne	1286a4 <udp_bind+0x8c>
      rebind = 1;
  128698:	e3a03001 	mov	r3, #1
  12869c:	e54b3009 	strb	r3, [fp, #-9]
      break;
  1286a0:	ea000005 	b	1286bc <udp_bind+0xa4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1286a4:	e51b3008 	ldr	r3, [fp, #-8]
  1286a8:	e593300c 	ldr	r3, [r3, #12]
  1286ac:	e50b3008 	str	r3, [fp, #-8]
  1286b0:	e51b3008 	ldr	r3, [fp, #-8]
  1286b4:	e3530000 	cmp	r3, #0
  1286b8:	1afffff2 	bne	128688 <udp_bind+0x70>
    }
  }

  /* no port specified? */
  if (port == 0) {
  1286bc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1286c0:	e3530000 	cmp	r3, #0
  1286c4:	1a000007 	bne	1286e8 <udp_bind+0xd0>
    port = udp_new_port();
  1286c8:	ebfffca8 	bl	127970 <udp_new_port>
  1286cc:	e1a03000 	mov	r3, r0
  1286d0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (port == 0) {
  1286d4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1286d8:	e3530000 	cmp	r3, #0
  1286dc:	1a000027 	bne	128780 <udp_bind+0x168>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
  1286e0:	e3e03007 	mvn	r3, #7
  1286e4:	ea00003e 	b	1287e4 <udp_bind+0x1cc>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1286e8:	e30c3c50 	movw	r3, #52304	; 0xcc50
  1286ec:	e3403015 	movt	r3, #21
  1286f0:	e5933000 	ldr	r3, [r3]
  1286f4:	e50b3008 	str	r3, [fp, #-8]
  1286f8:	ea00001d 	b	128774 <udp_bind+0x15c>
      if (pcb != ipcb) {
  1286fc:	e51b2010 	ldr	r2, [fp, #-16]
  128700:	e51b3008 	ldr	r3, [fp, #-8]
  128704:	e1520003 	cmp	r2, r3
  128708:	0a000016 	beq	128768 <udp_bind+0x150>
      /* By default, we don't allow to bind to a port that any other udp
         PCB is already bound to, unless *all* PCBs with that port have tha
         REUSEADDR flag set. */
#if SO_REUSE
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  12870c:	e51b3010 	ldr	r3, [fp, #-16]
  128710:	e5d33008 	ldrb	r3, [r3, #8]
  128714:	e2033004 	and	r3, r3, #4
  128718:	e3530000 	cmp	r3, #0
  12871c:	0a000004 	beq	128734 <udp_bind+0x11c>
            !ip_get_option(ipcb, SOF_REUSEADDR))
  128720:	e51b3008 	ldr	r3, [fp, #-8]
  128724:	e5d33008 	ldrb	r3, [r3, #8]
  128728:	e2033004 	and	r3, r3, #4
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  12872c:	e3530000 	cmp	r3, #0
  128730:	1a00000c 	bne	128768 <udp_bind+0x150>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
  128734:	e51b3008 	ldr	r3, [fp, #-8]
  128738:	e1d331b2 	ldrh	r3, [r3, #18]
  12873c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  128740:	e1520003 	cmp	r2, r3
  128744:	1a000007 	bne	128768 <udp_bind+0x150>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
  128748:	e51b3008 	ldr	r3, [fp, #-8]
  12874c:	e5932000 	ldr	r2, [r3]
  128750:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128754:	e5933000 	ldr	r3, [r3]
          if ((ipcb->local_port == port) &&
  128758:	e1520003 	cmp	r2, r3
  12875c:	1a000001 	bne	128768 <udp_bind+0x150>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
  128760:	e3e03007 	mvn	r3, #7
  128764:	ea00001e 	b	1287e4 <udp_bind+0x1cc>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128768:	e51b3008 	ldr	r3, [fp, #-8]
  12876c:	e593300c 	ldr	r3, [r3, #12]
  128770:	e50b3008 	str	r3, [fp, #-8]
  128774:	e51b3008 	ldr	r3, [fp, #-8]
  128778:	e3530000 	cmp	r3, #0
  12877c:	1affffde 	bne	1286fc <udp_bind+0xe4>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  128780:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128784:	e3530000 	cmp	r3, #0
  128788:	0a000002 	beq	128798 <udp_bind+0x180>
  12878c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128790:	e5933000 	ldr	r3, [r3]
  128794:	ea000000 	b	12879c <udp_bind+0x184>
  128798:	e3a03000 	mov	r3, #0
  12879c:	e51b2010 	ldr	r2, [fp, #-16]
  1287a0:	e5823000 	str	r3, [r2]

  pcb->local_port = port;
  1287a4:	e51b3010 	ldr	r3, [fp, #-16]
  1287a8:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1287ac:	e1c321b2 	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
  1287b0:	e55b3009 	ldrb	r3, [fp, #-9]
  1287b4:	e3530000 	cmp	r3, #0
  1287b8:	1a000008 	bne	1287e0 <udp_bind+0x1c8>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
  1287bc:	e30c3c50 	movw	r3, #52304	; 0xcc50
  1287c0:	e3403015 	movt	r3, #21
  1287c4:	e5932000 	ldr	r2, [r3]
  1287c8:	e51b3010 	ldr	r3, [fp, #-16]
  1287cc:	e583200c 	str	r2, [r3, #12]
    udp_pcbs = pcb;
  1287d0:	e30c3c50 	movw	r3, #52304	; 0xcc50
  1287d4:	e3403015 	movt	r3, #21
  1287d8:	e51b2010 	ldr	r2, [fp, #-16]
  1287dc:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
  1287e0:	e3a03000 	mov	r3, #0
}
  1287e4:	e1a00003 	mov	r0, r3
  1287e8:	e24bd004 	sub	sp, fp, #4
  1287ec:	e8bd8800 	pop	{fp, pc}

001287f0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  1287f0:	e92d4800 	push	{fp, lr}
  1287f4:	e28db004 	add	fp, sp, #4
  1287f8:	e24dd018 	sub	sp, sp, #24
  1287fc:	e50b0010 	str	r0, [fp, #-16]
  128800:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128804:	e1a03002 	mov	r3, r2
  128808:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  12880c:	e51b3010 	ldr	r3, [fp, #-16]
  128810:	e3530000 	cmp	r3, #0
  128814:	0a000002 	beq	128824 <udp_connect+0x34>
  128818:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12881c:	e3530000 	cmp	r3, #0
  128820:	1a000001 	bne	12882c <udp_connect+0x3c>
    return ERR_VAL;
  128824:	e3e03005 	mvn	r3, #5
  128828:	ea00003d 	b	128924 <udp_connect+0x134>
  }

  if (pcb->local_port == 0) {
  12882c:	e51b3010 	ldr	r3, [fp, #-16]
  128830:	e1d331b2 	ldrh	r3, [r3, #18]
  128834:	e3530000 	cmp	r3, #0
  128838:	1a00000c 	bne	128870 <udp_connect+0x80>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  12883c:	e51b1010 	ldr	r1, [fp, #-16]
  128840:	e51b3010 	ldr	r3, [fp, #-16]
  128844:	e1d331b2 	ldrh	r3, [r3, #18]
  128848:	e1a02003 	mov	r2, r3
  12884c:	e51b0010 	ldr	r0, [fp, #-16]
  128850:	ebffff70 	bl	128618 <udp_bind>
  128854:	e1a03000 	mov	r3, r0
  128858:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  12885c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  128860:	e3530000 	cmp	r3, #0
  128864:	0a000001 	beq	128870 <udp_connect+0x80>
      return err;
  128868:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12886c:	ea00002c 	b	128924 <udp_connect+0x134>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  128870:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128874:	e3530000 	cmp	r3, #0
  128878:	0a000002 	beq	128888 <udp_connect+0x98>
  12887c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128880:	e5933000 	ldr	r3, [r3]
  128884:	ea000000 	b	12888c <udp_connect+0x9c>
  128888:	e3a03000 	mov	r3, #0
  12888c:	e51b2010 	ldr	r2, [fp, #-16]
  128890:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  128894:	e51b3010 	ldr	r3, [fp, #-16]
  128898:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  12889c:	e1c321b4 	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
  1288a0:	e51b3010 	ldr	r3, [fp, #-16]
  1288a4:	e5d33010 	ldrb	r3, [r3, #16]
  1288a8:	e3833004 	orr	r3, r3, #4
  1288ac:	e6ef2073 	uxtb	r2, r3
  1288b0:	e51b3010 	ldr	r3, [fp, #-16]
  1288b4:	e5c32010 	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1288b8:	e30c3c50 	movw	r3, #52304	; 0xcc50
  1288bc:	e3403015 	movt	r3, #21
  1288c0:	e5933000 	ldr	r3, [r3]
  1288c4:	e50b3008 	str	r3, [fp, #-8]
  1288c8:	ea000008 	b	1288f0 <udp_connect+0x100>
    if (pcb == ipcb) {
  1288cc:	e51b2010 	ldr	r2, [fp, #-16]
  1288d0:	e51b3008 	ldr	r3, [fp, #-8]
  1288d4:	e1520003 	cmp	r2, r3
  1288d8:	1a000001 	bne	1288e4 <udp_connect+0xf4>
      /* already on the list, just return */
      return ERR_OK;
  1288dc:	e3a03000 	mov	r3, #0
  1288e0:	ea00000f 	b	128924 <udp_connect+0x134>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1288e4:	e51b3008 	ldr	r3, [fp, #-8]
  1288e8:	e593300c 	ldr	r3, [r3, #12]
  1288ec:	e50b3008 	str	r3, [fp, #-8]
  1288f0:	e51b3008 	ldr	r3, [fp, #-8]
  1288f4:	e3530000 	cmp	r3, #0
  1288f8:	1afffff3 	bne	1288cc <udp_connect+0xdc>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  1288fc:	e30c3c50 	movw	r3, #52304	; 0xcc50
  128900:	e3403015 	movt	r3, #21
  128904:	e5932000 	ldr	r2, [r3]
  128908:	e51b3010 	ldr	r3, [fp, #-16]
  12890c:	e583200c 	str	r2, [r3, #12]
  udp_pcbs = pcb;
  128910:	e30c3c50 	movw	r3, #52304	; 0xcc50
  128914:	e3403015 	movt	r3, #21
  128918:	e51b2010 	ldr	r2, [fp, #-16]
  12891c:	e5832000 	str	r2, [r3]
  return ERR_OK;
  128920:	e3a03000 	mov	r3, #0
}
  128924:	e1a00003 	mov	r0, r3
  128928:	e24bd004 	sub	sp, fp, #4
  12892c:	e8bd8800 	pop	{fp, pc}

00128930 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
  128930:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128934:	e28db000 	add	fp, sp, #0
  128938:	e24dd00c 	sub	sp, sp, #12
  12893c:	e50b0008 	str	r0, [fp, #-8]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
  128940:	e51b3008 	ldr	r3, [fp, #-8]
  128944:	e3a02000 	mov	r2, #0
  128948:	e5832004 	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
  12894c:	e51b3008 	ldr	r3, [fp, #-8]
  128950:	e3a02000 	mov	r2, #0
  128954:	e1c321b4 	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
  128958:	e51b3008 	ldr	r3, [fp, #-8]
  12895c:	e5d33010 	ldrb	r3, [r3, #16]
  128960:	e3c33004 	bic	r3, r3, #4
  128964:	e6ef2073 	uxtb	r2, r3
  128968:	e51b3008 	ldr	r3, [fp, #-8]
  12896c:	e5c32010 	strb	r2, [r3, #16]
}
  128970:	e320f000 	nop	{0}
  128974:	e28bd000 	add	sp, fp, #0
  128978:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12897c:	e12fff1e 	bx	lr

00128980 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  128980:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128984:	e28db000 	add	fp, sp, #0
  128988:	e24dd014 	sub	sp, sp, #20
  12898c:	e50b0008 	str	r0, [fp, #-8]
  128990:	e50b100c 	str	r1, [fp, #-12]
  128994:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  128998:	e51b3008 	ldr	r3, [fp, #-8]
  12899c:	e51b200c 	ldr	r2, [fp, #-12]
  1289a0:	e5832020 	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
  1289a4:	e51b3008 	ldr	r3, [fp, #-8]
  1289a8:	e51b2010 	ldr	r2, [fp, #-16]
  1289ac:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  1289b0:	e320f000 	nop	{0}
  1289b4:	e28bd000 	add	sp, fp, #0
  1289b8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1289bc:	e12fff1e 	bx	lr

001289c0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
  1289c0:	e92d4800 	push	{fp, lr}
  1289c4:	e28db004 	add	fp, sp, #4
  1289c8:	e24dd010 	sub	sp, sp, #16
  1289cc:	e50b0010 	str	r0, [fp, #-16]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
  1289d0:	e30c3c50 	movw	r3, #52304	; 0xcc50
  1289d4:	e3403015 	movt	r3, #21
  1289d8:	e5933000 	ldr	r3, [r3]
  1289dc:	e51b2010 	ldr	r2, [fp, #-16]
  1289e0:	e1520003 	cmp	r2, r3
  1289e4:	1a000007 	bne	128a08 <udp_remove+0x48>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
  1289e8:	e30c3c50 	movw	r3, #52304	; 0xcc50
  1289ec:	e3403015 	movt	r3, #21
  1289f0:	e5933000 	ldr	r3, [r3]
  1289f4:	e593200c 	ldr	r2, [r3, #12]
  1289f8:	e30c3c50 	movw	r3, #52304	; 0xcc50
  1289fc:	e3403015 	movt	r3, #21
  128a00:	e5832000 	str	r2, [r3]
  128a04:	ea000018 	b	128a6c <udp_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  128a08:	e30c3c50 	movw	r3, #52304	; 0xcc50
  128a0c:	e3403015 	movt	r3, #21
  128a10:	e5933000 	ldr	r3, [r3]
  128a14:	e50b3008 	str	r3, [fp, #-8]
  128a18:	ea000010 	b	128a60 <udp_remove+0xa0>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  128a1c:	e51b3008 	ldr	r3, [fp, #-8]
  128a20:	e593300c 	ldr	r3, [r3, #12]
  128a24:	e3530000 	cmp	r3, #0
  128a28:	0a000009 	beq	128a54 <udp_remove+0x94>
  128a2c:	e51b3008 	ldr	r3, [fp, #-8]
  128a30:	e593300c 	ldr	r3, [r3, #12]
  128a34:	e51b2010 	ldr	r2, [fp, #-16]
  128a38:	e1520003 	cmp	r2, r3
  128a3c:	1a000004 	bne	128a54 <udp_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  128a40:	e51b3010 	ldr	r3, [fp, #-16]
  128a44:	e593200c 	ldr	r2, [r3, #12]
  128a48:	e51b3008 	ldr	r3, [fp, #-8]
  128a4c:	e583200c 	str	r2, [r3, #12]
        break;
  128a50:	ea000005 	b	128a6c <udp_remove+0xac>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  128a54:	e51b3008 	ldr	r3, [fp, #-8]
  128a58:	e593300c 	ldr	r3, [r3, #12]
  128a5c:	e50b3008 	str	r3, [fp, #-8]
  128a60:	e51b3008 	ldr	r3, [fp, #-8]
  128a64:	e3530000 	cmp	r3, #0
  128a68:	1affffeb 	bne	128a1c <udp_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
  128a6c:	e51b1010 	ldr	r1, [fp, #-16]
  128a70:	e3a00001 	mov	r0, #1
  128a74:	ebffc1f0 	bl	11923c <memp_free>
}
  128a78:	e320f000 	nop	{0}
  128a7c:	e24bd004 	sub	sp, fp, #4
  128a80:	e8bd8800 	pop	{fp, pc}

00128a84 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
  128a84:	e92d4800 	push	{fp, lr}
  128a88:	e28db004 	add	fp, sp, #4
  128a8c:	e24dd008 	sub	sp, sp, #8
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
  128a90:	e3002452 	movw	r2, #1106	; 0x452
  128a94:	e3081a9c 	movw	r1, #35484	; 0x8a9c
  128a98:	e3401014 	movt	r1, #20
  128a9c:	e3a00001 	mov	r0, #1
  128aa0:	ebffc17d 	bl	11909c <memp_malloc_fn>
  128aa4:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
  128aa8:	e51b3008 	ldr	r3, [fp, #-8]
  128aac:	e3530000 	cmp	r3, #0
  128ab0:	0a000009 	beq	128adc <udp_new+0x58>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
  128ab4:	e3a02028 	mov	r2, #40	; 0x28
  128ab8:	e3a01000 	mov	r1, #0
  128abc:	e51b0008 	ldr	r0, [fp, #-8]
  128ac0:	eb0061dd 	bl	14123c <memset>
    pcb->ttl = UDP_TTL;
  128ac4:	e51b3008 	ldr	r3, [fp, #-8]
  128ac8:	e3e02000 	mvn	r2, #0
  128acc:	e5c3200a 	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
  128ad0:	e51b3008 	ldr	r3, [fp, #-8]
  128ad4:	e3e02000 	mvn	r2, #0
  128ad8:	e5c3201c 	strb	r2, [r3, #28]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
  128adc:	e51b3008 	ldr	r3, [fp, #-8]
}
  128ae0:	e1a00003 	mov	r0, r3
  128ae4:	e24bd004 	sub	sp, fp, #4
  128ae8:	e8bd8800 	pop	{fp, pc}

00128aec <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
  128aec:	e92d4800 	push	{fp, lr}
  128af0:	e28db004 	add	fp, sp, #4
  128af4:	e24dd010 	sub	sp, sp, #16
  128af8:	e1a03000 	mov	r3, r0
  128afc:	e54b300d 	strb	r3, [fp, #-13]
  struct udp_pcb *pcb;
  pcb = udp_new();
  128b00:	ebffffdf 	bl	128a84 <udp_new>
  128b04:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  128b08:	e51b3008 	ldr	r3, [fp, #-8]
}
  128b0c:	e1a00003 	mov	r0, r3
  128b10:	e24bd004 	sub	sp, fp, #4
  128b14:	e8bd8800 	pop	{fp, pc}

00128b18 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  128b18:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128b1c:	e28db000 	add	fp, sp, #0
  128b20:	e24dd014 	sub	sp, sp, #20
  128b24:	e50b0010 	str	r0, [fp, #-16]
  128b28:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  128b2c:	e51b3010 	ldr	r3, [fp, #-16]
  128b30:	e3530000 	cmp	r3, #0
  128b34:	0a00001f 	beq	128bb8 <udp_netif_ip_addr_changed+0xa0>
  128b38:	e51b3010 	ldr	r3, [fp, #-16]
  128b3c:	e5933000 	ldr	r3, [r3]
  128b40:	e3530000 	cmp	r3, #0
  128b44:	0a00001b 	beq	128bb8 <udp_netif_ip_addr_changed+0xa0>
  128b48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128b4c:	e3530000 	cmp	r3, #0
  128b50:	0a000018 	beq	128bb8 <udp_netif_ip_addr_changed+0xa0>
  128b54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128b58:	e5933000 	ldr	r3, [r3]
  128b5c:	e3530000 	cmp	r3, #0
  128b60:	0a000014 	beq	128bb8 <udp_netif_ip_addr_changed+0xa0>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  128b64:	e30c3c50 	movw	r3, #52304	; 0xcc50
  128b68:	e3403015 	movt	r3, #21
  128b6c:	e5933000 	ldr	r3, [r3]
  128b70:	e50b3008 	str	r3, [fp, #-8]
  128b74:	ea00000c 	b	128bac <udp_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
  128b78:	e51b3008 	ldr	r3, [fp, #-8]
  128b7c:	e5932000 	ldr	r2, [r3]
  128b80:	e51b3010 	ldr	r3, [fp, #-16]
  128b84:	e5933000 	ldr	r3, [r3]
  128b88:	e1520003 	cmp	r2, r3
  128b8c:	1a000003 	bne	128ba0 <udp_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
  128b90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128b94:	e5932000 	ldr	r2, [r3]
  128b98:	e51b3008 	ldr	r3, [fp, #-8]
  128b9c:	e5832000 	str	r2, [r3]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  128ba0:	e51b3008 	ldr	r3, [fp, #-8]
  128ba4:	e593300c 	ldr	r3, [r3, #12]
  128ba8:	e50b3008 	str	r3, [fp, #-8]
  128bac:	e51b3008 	ldr	r3, [fp, #-8]
  128bb0:	e3530000 	cmp	r3, #0
  128bb4:	1affffef 	bne	128b78 <udp_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  128bb8:	e320f000 	nop	{0}
  128bbc:	e28bd000 	add	sp, fp, #0
  128bc0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  128bc4:	e12fff1e 	bx	lr

00128bc8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  128bc8:	e92d4800 	push	{fp, lr}
  128bcc:	e28db004 	add	fp, sp, #4
  128bd0:	e24dd018 	sub	sp, sp, #24
  128bd4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  128bd8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
  128bdc:	e3a0300e 	mov	r3, #14
  128be0:	e14b30b6 	strh	r3, [fp, #-6]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  128be4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128be8:	e1d330ba 	ldrh	r3, [r3, #10]
  128bec:	e353000e 	cmp	r3, #14
  128bf0:	8a000015 	bhi	128c4c <ethernet_input+0x84>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
  128bf4:	e30c3a48 	movw	r3, #51784	; 0xca48
  128bf8:	e3403015 	movt	r3, #21
  128bfc:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  128c00:	e2833001 	add	r3, r3, #1
  128c04:	e6ff2073 	uxth	r2, r3
  128c08:	e30c3a48 	movw	r3, #51784	; 0xca48
  128c0c:	e3403015 	movt	r3, #21
  128c10:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  128c14:	e30c3a48 	movw	r3, #51784	; 0xca48
  128c18:	e3403015 	movt	r3, #21
  128c1c:	e1d331be 	ldrh	r3, [r3, #30]
  128c20:	e2833001 	add	r3, r3, #1
  128c24:	e6ff2073 	uxth	r2, r3
  128c28:	e30c3a48 	movw	r3, #51784	; 0xca48
  128c2c:	e3403015 	movt	r3, #21
  128c30:	e1c321be 	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
  128c34:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128c38:	e5933060 	ldr	r3, [r3, #96]	; 0x60
  128c3c:	e2832001 	add	r2, r3, #1
  128c40:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128c44:	e5832060 	str	r2, [r3, #96]	; 0x60
    goto free_and_return;
  128c48:	ea000096 	b	128ea8 <ethernet_input+0x2e0>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  128c4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128c50:	e5933004 	ldr	r3, [r3, #4]
  128c54:	e50b300c 	str	r3, [fp, #-12]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
  128c58:	e51b300c 	ldr	r3, [fp, #-12]
  128c5c:	e5d3200c 	ldrb	r2, [r3, #12]
  128c60:	e5d3300d 	ldrb	r3, [r3, #13]
  128c64:	e1a03403 	lsl	r3, r3, #8
  128c68:	e1833002 	orr	r3, r3, r2
  128c6c:	e14b30be 	strh	r3, [fp, #-14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  128c70:	e51b300c 	ldr	r3, [fp, #-12]
  128c74:	e5d33000 	ldrb	r3, [r3]
  128c78:	e2033001 	and	r3, r3, #1
  128c7c:	e3530000 	cmp	r3, #0
  128c80:	0a000021 	beq	128d0c <ethernet_input+0x144>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
  128c84:	e51b300c 	ldr	r3, [fp, #-12]
  128c88:	e5d33000 	ldrb	r3, [r3]
  128c8c:	e3530001 	cmp	r3, #1
  128c90:	1a00000e 	bne	128cd0 <ethernet_input+0x108>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  128c94:	e51b300c 	ldr	r3, [fp, #-12]
  128c98:	e5d33001 	ldrb	r3, [r3, #1]
  128c9c:	e3530000 	cmp	r3, #0
  128ca0:	1a000019 	bne	128d0c <ethernet_input+0x144>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
  128ca4:	e51b300c 	ldr	r3, [fp, #-12]
  128ca8:	e5d33002 	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  128cac:	e353005e 	cmp	r3, #94	; 0x5e
  128cb0:	1a000015 	bne	128d0c <ethernet_input+0x144>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
  128cb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128cb8:	e5d3300d 	ldrb	r3, [r3, #13]
  128cbc:	e3833010 	orr	r3, r3, #16
  128cc0:	e6ef2073 	uxtb	r2, r3
  128cc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128cc8:	e5c3200d 	strb	r2, [r3, #13]
  128ccc:	ea00000e 	b	128d0c <ethernet_input+0x144>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  128cd0:	e51b300c 	ldr	r3, [fp, #-12]
  128cd4:	e3a02006 	mov	r2, #6
  128cd8:	e3081af8 	movw	r1, #35576	; 0x8af8
  128cdc:	e3401014 	movt	r1, #20
  128ce0:	e1a00003 	mov	r0, r3
  128ce4:	eb0060db 	bl	141058 <memcmp>
  128ce8:	e1a03000 	mov	r3, r0
  128cec:	e3530000 	cmp	r3, #0
  128cf0:	1a000005 	bne	128d0c <ethernet_input+0x144>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  128cf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128cf8:	e5d3300d 	ldrb	r3, [r3, #13]
  128cfc:	e3833008 	orr	r3, r3, #8
  128d00:	e6ef2073 	uxtb	r2, r3
  128d04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128d08:	e5c3200d 	strb	r2, [r3, #13]
    }
  }

  switch (type) {
  128d0c:	e15b30be 	ldrh	r3, [fp, #-14]
  128d10:	e3530008 	cmp	r3, #8
  128d14:	0a000003 	beq	128d28 <ethernet_input+0x160>
  128d18:	e3002608 	movw	r2, #1544	; 0x608
  128d1c:	e1530002 	cmp	r3, r2
  128d20:	0a000019 	beq	128d8c <ethernet_input+0x1c4>
  128d24:	ea000042 	b	128e34 <ethernet_input+0x26c>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  128d28:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128d2c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  128d30:	e2033008 	and	r3, r3, #8
  128d34:	e3530000 	cmp	r3, #0
  128d38:	0a000055 	beq	128e94 <ethernet_input+0x2cc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  128d3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128d40:	e1d330ba 	ldrh	r3, [r3, #10]
  128d44:	e1a02003 	mov	r2, r3
  128d48:	e15b30f6 	ldrsh	r3, [fp, #-6]
  128d4c:	e1520003 	cmp	r2, r3
  128d50:	ba000051 	blt	128e9c <ethernet_input+0x2d4>
  128d54:	e15b30b6 	ldrh	r3, [fp, #-6]
  128d58:	e2633000 	rsb	r3, r3, #0
  128d5c:	e6ff3073 	uxth	r3, r3
  128d60:	e6bf3073 	sxth	r3, r3
  128d64:	e1a01003 	mov	r1, r3
  128d68:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128d6c:	ebffc822 	bl	11adfc <pbuf_header>
  128d70:	e1a03000 	mov	r3, r0
  128d74:	e3530000 	cmp	r3, #0
  128d78:	1a000047 	bne	128e9c <ethernet_input+0x2d4>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
  128d7c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128d80:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128d84:	eb00219b 	bl	1313f8 <ip4_input>
      }
      break;
  128d88:	ea00003f 	b	128e8c <ethernet_input+0x2c4>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  128d8c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128d90:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  128d94:	e2033008 	and	r3, r3, #8
  128d98:	e3530000 	cmp	r3, #0
  128d9c:	0a000040 	beq	128ea4 <ethernet_input+0x2dc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  128da0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128da4:	e1d330ba 	ldrh	r3, [r3, #10]
  128da8:	e1a02003 	mov	r2, r3
  128dac:	e15b30f6 	ldrsh	r3, [fp, #-6]
  128db0:	e1520003 	cmp	r2, r3
  128db4:	ba000009 	blt	128de0 <ethernet_input+0x218>
  128db8:	e15b30b6 	ldrh	r3, [fp, #-6]
  128dbc:	e2633000 	rsb	r3, r3, #0
  128dc0:	e6ff3073 	uxth	r3, r3
  128dc4:	e6bf3073 	sxth	r3, r3
  128dc8:	e1a01003 	mov	r1, r3
  128dcc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128dd0:	ebffc809 	bl	11adfc <pbuf_header>
  128dd4:	e1a03000 	mov	r3, r0
  128dd8:	e3530000 	cmp	r3, #0
  128ddc:	0a000010 	beq	128e24 <ethernet_input+0x25c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
  128de0:	e30c3a48 	movw	r3, #51784	; 0xca48
  128de4:	e3403015 	movt	r3, #21
  128de8:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  128dec:	e2833001 	add	r3, r3, #1
  128df0:	e6ff2073 	uxth	r2, r3
  128df4:	e30c3a48 	movw	r3, #51784	; 0xca48
  128df8:	e3403015 	movt	r3, #21
  128dfc:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
  128e00:	e30c3a48 	movw	r3, #51784	; 0xca48
  128e04:	e3403015 	movt	r3, #21
  128e08:	e1d331be 	ldrh	r3, [r3, #30]
  128e0c:	e2833001 	add	r3, r3, #1
  128e10:	e6ff2073 	uxth	r2, r3
  128e14:	e30c3a48 	movw	r3, #51784	; 0xca48
  128e18:	e3403015 	movt	r3, #21
  128e1c:	e1c321be 	strh	r2, [r3, #30]
        goto free_and_return;
  128e20:	ea000020 	b	128ea8 <ethernet_input+0x2e0>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
  128e24:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128e28:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128e2c:	eb0015a9 	bl	12e4d8 <etharp_input>
      }
      break;
  128e30:	ea000015 	b	128e8c <ethernet_input+0x2c4>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
  128e34:	e30c3a48 	movw	r3, #51784	; 0xca48
  128e38:	e3403015 	movt	r3, #21
  128e3c:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  128e40:	e2833001 	add	r3, r3, #1
  128e44:	e6ff2073 	uxth	r2, r3
  128e48:	e30c3a48 	movw	r3, #51784	; 0xca48
  128e4c:	e3403015 	movt	r3, #21
  128e50:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
  128e54:	e30c3a48 	movw	r3, #51784	; 0xca48
  128e58:	e3403015 	movt	r3, #21
  128e5c:	e1d331be 	ldrh	r3, [r3, #30]
  128e60:	e2833001 	add	r3, r3, #1
  128e64:	e6ff2073 	uxth	r2, r3
  128e68:	e30c3a48 	movw	r3, #51784	; 0xca48
  128e6c:	e3403015 	movt	r3, #21
  128e70:	e1c321be 	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
  128e74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128e78:	e5933064 	ldr	r3, [r3, #100]	; 0x64
  128e7c:	e2832001 	add	r2, r3, #1
  128e80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128e84:	e5832064 	str	r2, [r3, #100]	; 0x64
      goto free_and_return;
  128e88:	ea000006 	b	128ea8 <ethernet_input+0x2e0>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
  128e8c:	e3a03000 	mov	r3, #0
  128e90:	ea000007 	b	128eb4 <ethernet_input+0x2ec>
        goto free_and_return;
  128e94:	e320f000 	nop	{0}
  128e98:	ea000002 	b	128ea8 <ethernet_input+0x2e0>

free_and_return:
  128e9c:	e320f000 	nop	{0}
  128ea0:	ea000000 	b	128ea8 <ethernet_input+0x2e0>
        goto free_and_return;
  128ea4:	e320f000 	nop	{0}
  pbuf_free(p);
  128ea8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128eac:	ebffc7f0 	bl	11ae74 <pbuf_free>
  return ERR_OK;
  128eb0:	e3a03000 	mov	r3, #0
}
  128eb4:	e1a00003 	mov	r0, r3
  128eb8:	e24bd004 	sub	sp, fp, #4
  128ebc:	e8bd8800 	pop	{fp, pc}

00128ec0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
  128ec0:	e92d4800 	push	{fp, lr}
  128ec4:	e28db004 	add	fp, sp, #4
  128ec8:	e24dd018 	sub	sp, sp, #24
  128ecc:	e50b0010 	str	r0, [fp, #-16]
  128ed0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128ed4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  128ed8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
  128edc:	e1db30b4 	ldrh	r3, [fp, #4]
  128ee0:	e1a00003 	mov	r0, r3
  128ee4:	ebffb5ab 	bl	116598 <lwip_htons>
  128ee8:	e1a03000 	mov	r3, r0
  128eec:	e14b30b6 	strh	r3, [fp, #-6]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
  128ef0:	e3a0100e 	mov	r1, #14
  128ef4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  128ef8:	ebffc7bf 	bl	11adfc <pbuf_header>
  128efc:	e1a03000 	mov	r3, r0
  128f00:	e3530000 	cmp	r3, #0
  128f04:	1a000022 	bne	128f94 <ethernet_output+0xd4>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
  128f08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128f0c:	e5933004 	ldr	r3, [r3, #4]
  128f10:	e50b300c 	str	r3, [fp, #-12]
  ethhdr->type = eth_type_be;
  128f14:	e51b300c 	ldr	r3, [fp, #-12]
  128f18:	e15b20b6 	ldrh	r2, [fp, #-6]
  128f1c:	e1c320bc 	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
  128f20:	e51b300c 	ldr	r3, [fp, #-12]
  128f24:	e3a02006 	mov	r2, #6
  128f28:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128f2c:	e1a00003 	mov	r0, r3
  128f30:	eb005f89 	bl	140d5c <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
  128f34:	e51b300c 	ldr	r3, [fp, #-12]
  128f38:	e2833006 	add	r3, r3, #6
  128f3c:	e3a02006 	mov	r2, #6
  128f40:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  128f44:	e1a00003 	mov	r0, r3
  128f48:	eb005f83 	bl	140d5c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
  128f4c:	e51b3010 	ldr	r3, [fp, #-16]
  128f50:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  128f54:	e3530006 	cmp	r3, #6
  128f58:	0a000006 	beq	128f78 <ethernet_output+0xb8>
  128f5c:	e3080b08 	movw	r0, #35592	; 0x8b08
  128f60:	e3400014 	movt	r0, #20
  128f64:	ebff686a 	bl	103114 <rt_kprintf>
  128f68:	e300112e 	movw	r1, #302	; 0x12e
  128f6c:	e3080b3c 	movw	r0, #35644	; 0x8b3c
  128f70:	e3400014 	movt	r0, #20
  128f74:	ebff884e 	bl	10b0b4 <sys_arch_assert>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
  128f78:	e51b3010 	ldr	r3, [fp, #-16]
  128f7c:	e5933018 	ldr	r3, [r3, #24]
  128f80:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  128f84:	e51b0010 	ldr	r0, [fp, #-16]
  128f88:	e12fff33 	blx	r3
  128f8c:	e1a03000 	mov	r3, r0
  128f90:	ea000009 	b	128fbc <ethernet_output+0xfc>
      goto pbuf_header_failed;
  128f94:	e320f000 	nop	{0}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  128f98:	e30c3a48 	movw	r3, #51784	; 0xca48
  128f9c:	e3403015 	movt	r3, #21
  128fa0:	e1d330ba 	ldrh	r3, [r3, #10]
  128fa4:	e2833001 	add	r3, r3, #1
  128fa8:	e6ff2073 	uxth	r2, r3
  128fac:	e30c3a48 	movw	r3, #51784	; 0xca48
  128fb0:	e3403015 	movt	r3, #21
  128fb4:	e1c320ba 	strh	r2, [r3, #10]
  return ERR_BUF;
  128fb8:	e3e03001 	mvn	r3, #1
}
  128fbc:	e1a00003 	mov	r0, r3
  128fc0:	e24bd004 	sub	sp, fp, #4
  128fc4:	e8bd8800 	pop	{fp, pc}

00128fc8 <lwip_netdev_set_up>:
#include "lwip/netdb.h"
#include "../../../netdev/netdev.h"
#include "../../../netdev/eth_device_manager.h"

static int lwip_netdev_set_up(struct netdev *netif)
{
  128fc8:	e92d4800 	push	{fp, lr}
  128fcc:	e28db004 	add	fp, sp, #4
  128fd0:	e24dd008 	sub	sp, sp, #8
  128fd4:	e50b0008 	str	r0, [fp, #-8]
    netif_set_up((struct netif *)netif->user_data);
  128fd8:	e51b3008 	ldr	r3, [fp, #-8]
  128fdc:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128fe0:	e1a00003 	mov	r0, r3
  128fe4:	ebffc268 	bl	11998c <netif_set_up>
    return ERR_OK;
  128fe8:	e3a03000 	mov	r3, #0
}
  128fec:	e1a00003 	mov	r0, r3
  128ff0:	e24bd004 	sub	sp, fp, #4
  128ff4:	e8bd8800 	pop	{fp, pc}

00128ff8 <lwip_netdev_set_down>:

static int lwip_netdev_set_down(struct netdev *netif)
{
  128ff8:	e92d4800 	push	{fp, lr}
  128ffc:	e28db004 	add	fp, sp, #4
  129000:	e24dd008 	sub	sp, sp, #8
  129004:	e50b0008 	str	r0, [fp, #-8]
    netif_set_down((struct netif *)netif->user_data);
  129008:	e51b3008 	ldr	r3, [fp, #-8]
  12900c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129010:	e1a00003 	mov	r0, r3
  129014:	ebffc2b1 	bl	119ae0 <netif_set_down>
    return ERR_OK;
  129018:	e3a03000 	mov	r3, #0
}
  12901c:	e1a00003 	mov	r0, r3
  129020:	e24bd004 	sub	sp, fp, #4
  129024:	e8bd8800 	pop	{fp, pc}

00129028 <lwip_netdev_set_addr_info>:

static int lwip_netdev_set_addr_info(struct netdev *netif, ip_addr_t *ip_addr, ip_addr_t *netmask, ip_addr_t *gw)
{
  129028:	e92d4800 	push	{fp, lr}
  12902c:	e28db004 	add	fp, sp, #4
  129030:	e24dd010 	sub	sp, sp, #16
  129034:	e50b0008 	str	r0, [fp, #-8]
  129038:	e50b100c 	str	r1, [fp, #-12]
  12903c:	e50b2010 	str	r2, [fp, #-16]
  129040:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (ip_addr && netmask && gw)
  129044:	e51b300c 	ldr	r3, [fp, #-12]
  129048:	e3530000 	cmp	r3, #0
  12904c:	0a00000c 	beq	129084 <lwip_netdev_set_addr_info+0x5c>
  129050:	e51b3010 	ldr	r3, [fp, #-16]
  129054:	e3530000 	cmp	r3, #0
  129058:	0a000009 	beq	129084 <lwip_netdev_set_addr_info+0x5c>
  12905c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129060:	e3530000 	cmp	r3, #0
  129064:	0a000006 	beq	129084 <lwip_netdev_set_addr_info+0x5c>
    {
        netif_set_addr((struct netif *)netif->user_data, ip_2_ip4(ip_addr), ip_2_ip4(netmask), ip_2_ip4(gw));
  129068:	e51b3008 	ldr	r3, [fp, #-8]
  12906c:	e5930040 	ldr	r0, [r3, #64]	; 0x40
  129070:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129074:	e51b2010 	ldr	r2, [fp, #-16]
  129078:	e51b100c 	ldr	r1, [fp, #-12]
  12907c:	ebffc10e 	bl	1194bc <netif_set_addr>
  129080:	ea000017 	b	1290e4 <lwip_netdev_set_addr_info+0xbc>
    }
    else
    {
        if (ip_addr)
  129084:	e51b300c 	ldr	r3, [fp, #-12]
  129088:	e3530000 	cmp	r3, #0
  12908c:	0a000004 	beq	1290a4 <lwip_netdev_set_addr_info+0x7c>
        {
            netif_set_ipaddr((struct netif *)netif->user_data, ip_2_ip4(ip_addr));
  129090:	e51b3008 	ldr	r3, [fp, #-8]
  129094:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129098:	e51b100c 	ldr	r1, [fp, #-12]
  12909c:	e1a00003 	mov	r0, r3
  1290a0:	ebffc1b4 	bl	119778 <netif_set_ipaddr>
        }

        if (netmask)
  1290a4:	e51b3010 	ldr	r3, [fp, #-16]
  1290a8:	e3530000 	cmp	r3, #0
  1290ac:	0a000004 	beq	1290c4 <lwip_netdev_set_addr_info+0x9c>
        {
            netif_set_netmask((struct netif *)netif->user_data, ip_2_ip4(netmask));
  1290b0:	e51b3008 	ldr	r3, [fp, #-8]
  1290b4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  1290b8:	e51b1010 	ldr	r1, [fp, #-16]
  1290bc:	e1a00003 	mov	r0, r3
  1290c0:	ebffc20c 	bl	1198f8 <netif_set_netmask>
        }

        if (gw)
  1290c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1290c8:	e3530000 	cmp	r3, #0
  1290cc:	0a000004 	beq	1290e4 <lwip_netdev_set_addr_info+0xbc>
        {
            netif_set_gw((struct netif *)netif->user_data, ip_2_ip4(gw));
  1290d0:	e51b3008 	ldr	r3, [fp, #-8]
  1290d4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  1290d8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1290dc:	e1a00003 	mov	r0, r3
  1290e0:	ebffc1eb 	bl	119894 <netif_set_gw>
        }
    }

    return ERR_OK;
  1290e4:	e3a03000 	mov	r3, #0
}
  1290e8:	e1a00003 	mov	r0, r3
  1290ec:	e24bd004 	sub	sp, fp, #4
  1290f0:	e8bd8800 	pop	{fp, pc}

001290f4 <lwip_netdev_set_dns_server>:

#ifdef RT_LWIP_DNS
static int lwip_netdev_set_dns_server(struct netdev *netif, uint8_t dns_num, ip_addr_t *dns_server)
{
  1290f4:	e92d4800 	push	{fp, lr}
  1290f8:	e28db004 	add	fp, sp, #4
  1290fc:	e24dd010 	sub	sp, sp, #16
  129100:	e50b0008 	str	r0, [fp, #-8]
  129104:	e1a03001 	mov	r3, r1
  129108:	e50b2010 	str	r2, [fp, #-16]
  12910c:	e54b3009 	strb	r3, [fp, #-9]
    extern void dns_setserver(uint8_t dns_num, const ip_addr_t *dns_server);
    dns_setserver(dns_num, dns_server);
  129110:	e55b3009 	ldrb	r3, [fp, #-9]
  129114:	e51b1010 	ldr	r1, [fp, #-16]
  129118:	e1a00003 	mov	r0, r3
  12911c:	ebffb623 	bl	1169b0 <dns_setserver>
    return ERR_OK;
  129120:	e3a03000 	mov	r3, #0
}
  129124:	e1a00003 	mov	r0, r3
  129128:	e24bd004 	sub	sp, fp, #4
  12912c:	e8bd8800 	pop	{fp, pc}

00129130 <lwip_netdev_set_dhcp>:
#endif /* RT_LWIP_DNS */

#ifdef RT_LWIP_DHCP
static int lwip_netdev_set_dhcp(struct netdev *netif, rt_bool_t is_enabled)
{
  129130:	e92d4800 	push	{fp, lr}
  129134:	e28db004 	add	fp, sp, #4
  129138:	e24dd008 	sub	sp, sp, #8
  12913c:	e50b0008 	str	r0, [fp, #-8]
  129140:	e50b100c 	str	r1, [fp, #-12]
    if(RT_TRUE == is_enabled)
  129144:	e51b300c 	ldr	r3, [fp, #-12]
  129148:	e3530001 	cmp	r3, #1
  12914c:	1a000004 	bne	129164 <lwip_netdev_set_dhcp+0x34>
    {
        dhcp_start((struct netif *)netif->user_data);
  129150:	e51b3008 	ldr	r3, [fp, #-8]
  129154:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129158:	e1a00003 	mov	r0, r3
  12915c:	eb0006d5 	bl	12acb8 <dhcp_start>
  129160:	ea000003 	b	129174 <lwip_netdev_set_dhcp+0x44>
    }
    else
    {
        dhcp_stop((struct netif *)netif->user_data);
  129164:	e51b3008 	ldr	r3, [fp, #-8]
  129168:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  12916c:	e1a00003 	mov	r0, r3
  129170:	eb000b48 	bl	12be98 <dhcp_stop>
    }
    netdev_low_level_set_dhcp_status(netif, is_enabled);
  129174:	e51b100c 	ldr	r1, [fp, #-12]
  129178:	e51b0008 	ldr	r0, [fp, #-8]
  12917c:	ebff7521 	bl	106608 <netdev_low_level_set_dhcp_status>
    return ERR_OK;
  129180:	e3a03000 	mov	r3, #0
}
  129184:	e1a00003 	mov	r0, r3
  129188:	e24bd004 	sub	sp, fp, #4
  12918c:	e8bd8800 	pop	{fp, pc}

00129190 <lwip_netdev_ping>:
extern int lwip_ping_recv(int s, int *ttl);
extern err_t lwip_ping_send(int s, ip_addr_t *addr, int size);

int lwip_netdev_ping(struct netdev *netif, const char *host, size_t data_len, 
                        uint32_t timeout, struct netdev_ping_resp *ping_resp)
{
  129190:	e92d4800 	push	{fp, lr}
  129194:	e28db004 	add	fp, sp, #4
  129198:	e24dd070 	sub	sp, sp, #112	; 0x70
  12919c:	e50b0060 	str	r0, [fp, #-96]	; 0xffffffa0
  1291a0:	e50b1064 	str	r1, [fp, #-100]	; 0xffffff9c
  1291a4:	e50b2068 	str	r2, [fp, #-104]	; 0xffffff98
  1291a8:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
    int s, ttl, recv_len, result = 0;
  1291ac:	e3a03000 	mov	r3, #0
  1291b0:	e50b3008 	str	r3, [fp, #-8]
    int elapsed_time;
    rt_tick_t recv_start_tick;
#if LWIP_VERSION_MAJOR >= 2U
    struct timeval recv_timeout = { timeout / RT_TICK_PER_SECOND, timeout % RT_TICK_PER_SECOND };
  1291b4:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
  1291b8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1291bc:	e3413062 	movt	r3, #4194	; 0x1062
  1291c0:	e0832392 	umull	r2, r3, r2, r3
  1291c4:	e1a03323 	lsr	r3, r3, #6
  1291c8:	e1a02003 	mov	r2, r3
  1291cc:	e3a03000 	mov	r3, #0
  1291d0:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
  1291d4:	e51b106c 	ldr	r1, [fp, #-108]	; 0xffffff94
  1291d8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1291dc:	e3413062 	movt	r3, #4194	; 0x1062
  1291e0:	e0832391 	umull	r2, r3, r1, r3
  1291e4:	e1a03323 	lsr	r3, r3, #6
  1291e8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1291ec:	e0030392 	mul	r3, r2, r3
  1291f0:	e0413003 	sub	r3, r1, r3
  1291f4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#else
    int recv_timeout = timeout * 1000UL / RT_TICK_PER_SECOND;
#endif
    ip_addr_t target_addr;
    struct addrinfo hint, *res = RT_NULL;
  1291f8:	e3a03000 	mov	r3, #0
  1291fc:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac
    struct sockaddr_in *h = RT_NULL;
  129200:	e3a03000 	mov	r3, #0
  129204:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
    struct in_addr ina;
    
    RT_ASSERT(netif);
  129208:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  12920c:	e3530000 	cmp	r3, #0
  129210:	1a000005 	bne	12922c <lwip_netdev_ping+0x9c>
  129214:	e3a020ca 	mov	r2, #202	; 0xca
  129218:	e3081c80 	movw	r1, #35968	; 0x8c80
  12921c:	e3401014 	movt	r1, #20
  129220:	e3080b70 	movw	r0, #35696	; 0x8b70
  129224:	e3400014 	movt	r0, #20
  129228:	ebff68da 	bl	103598 <rt_assert_handler>
    RT_ASSERT(host);
  12922c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  129230:	e3530000 	cmp	r3, #0
  129234:	1a000005 	bne	129250 <lwip_netdev_ping+0xc0>
  129238:	e3a020cb 	mov	r2, #203	; 0xcb
  12923c:	e3081c80 	movw	r1, #35968	; 0x8c80
  129240:	e3401014 	movt	r1, #20
  129244:	e3080b78 	movw	r0, #35704	; 0x8b78
  129248:	e3400014 	movt	r0, #20
  12924c:	ebff68d1 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ping_resp);
  129250:	e59b3004 	ldr	r3, [fp, #4]
  129254:	e3530000 	cmp	r3, #0
  129258:	1a000005 	bne	129274 <lwip_netdev_ping+0xe4>
  12925c:	e3a020cc 	mov	r2, #204	; 0xcc
  129260:	e3081c80 	movw	r1, #35968	; 0x8c80
  129264:	e3401014 	movt	r1, #20
  129268:	e3080b80 	movw	r0, #35712	; 0x8b80
  12926c:	e3400014 	movt	r0, #20
  129270:	ebff68c8 	bl	103598 <rt_assert_handler>

    rt_memset(&hint, 0x00, sizeof(hint));
  129274:	e24b3050 	sub	r3, fp, #80	; 0x50
  129278:	e3a02020 	mov	r2, #32
  12927c:	e3a01000 	mov	r1, #0
  129280:	e1a00003 	mov	r0, r3
  129284:	ebff680f 	bl	1032c8 <rt_memset>
    /* convert URL to IP */
    if (lwip_getaddrinfo(host, RT_NULL, &hint, &res) != 0)
  129288:	e24b3054 	sub	r3, fp, #84	; 0x54
  12928c:	e24b2050 	sub	r2, fp, #80	; 0x50
  129290:	e3a01000 	mov	r1, #0
  129294:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
  129298:	ebff9d41 	bl	1107a4 <lwip_getaddrinfo>
  12929c:	e1a03000 	mov	r3, r0
  1292a0:	e3530000 	cmp	r3, #0
  1292a4:	0a000001 	beq	1292b0 <lwip_netdev_ping+0x120>
    {
        return -RT_ERROR;
  1292a8:	e3e03000 	mvn	r3, #0
  1292ac:	ea000064 	b	129444 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&h, &res->ai_addr, sizeof(struct sockaddr_in *));
  1292b0:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  1292b4:	e2831014 	add	r1, r3, #20
  1292b8:	e24b3058 	sub	r3, fp, #88	; 0x58
  1292bc:	e3a02004 	mov	r2, #4
  1292c0:	e1a00003 	mov	r0, r3
  1292c4:	ebff680d 	bl	103300 <rt_memcpy>
    rt_memcpy(&ina, &h->sin_addr, sizeof(ina));
  1292c8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1292cc:	e2831004 	add	r1, r3, #4
  1292d0:	e24b305c 	sub	r3, fp, #92	; 0x5c
  1292d4:	e3a02004 	mov	r2, #4
  1292d8:	e1a00003 	mov	r0, r3
  1292dc:	ebff6807 	bl	103300 <rt_memcpy>
    lwip_freeaddrinfo(res);
  1292e0:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  1292e4:	e1a00003 	mov	r0, r3
  1292e8:	ebff9d1a 	bl	110758 <lwip_freeaddrinfo>
    if (inet_aton(inet_ntoa(ina), &target_addr) == 0)
  1292ec:	e24b305c 	sub	r3, fp, #92	; 0x5c
  1292f0:	e1a00003 	mov	r0, r3
  1292f4:	eb0025f0 	bl	132abc <ip4addr_ntoa>
  1292f8:	e1a02000 	mov	r2, r0
  1292fc:	e24b3030 	sub	r3, fp, #48	; 0x30
  129300:	e1a01003 	mov	r1, r3
  129304:	e1a00002 	mov	r0, r2
  129308:	eb0024e7 	bl	1326ac <ip4addr_aton>
  12930c:	e1a03000 	mov	r3, r0
  129310:	e3530000 	cmp	r3, #0
  129314:	1a000001 	bne	129320 <lwip_netdev_ping+0x190>
    {
        return -RT_ERROR;
  129318:	e3e03000 	mvn	r3, #0
  12931c:	ea000048 	b	129444 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&(ping_resp->ip_addr), &target_addr, sizeof(ip_addr_t));
  129320:	e59b3004 	ldr	r3, [fp, #4]
  129324:	e24b1030 	sub	r1, fp, #48	; 0x30
  129328:	e3a02004 	mov	r2, #4
  12932c:	e1a00003 	mov	r0, r3
  129330:	ebff67f2 	bl	103300 <rt_memcpy>
    
    /* new a socket */
    if ((s = lwip_socket(AF_INET, SOCK_RAW, IP_PROTO_ICMP)) < 0)
  129334:	e3a02001 	mov	r2, #1
  129338:	e3a01003 	mov	r1, #3
  12933c:	e3a00002 	mov	r0, #2
  129340:	ebffa658 	bl	112ca8 <lwip_socket>
  129344:	e50b000c 	str	r0, [fp, #-12]
  129348:	e51b300c 	ldr	r3, [fp, #-12]
  12934c:	e3530000 	cmp	r3, #0
  129350:	aa000001 	bge	12935c <lwip_netdev_ping+0x1cc>
    {
        return -RT_ERROR;
  129354:	e3e03000 	mvn	r3, #0
  129358:	ea000039 	b	129444 <lwip_netdev_ping+0x2b4>
    }

    lwip_setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &recv_timeout, sizeof(recv_timeout));
  12935c:	e24b202c 	sub	r2, fp, #44	; 0x2c
  129360:	e3a03010 	mov	r3, #16
  129364:	e58d3000 	str	r3, [sp]
  129368:	e1a03002 	mov	r3, r2
  12936c:	e3012006 	movw	r2, #4102	; 0x1006
  129370:	e3001fff 	movw	r1, #4095	; 0xfff
  129374:	e51b000c 	ldr	r0, [fp, #-12]
  129378:	ebffae28 	bl	114c20 <lwip_setsockopt>

    if (lwip_ping_send(s, &target_addr, data_len) == ERR_OK)
  12937c:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
  129380:	e24b3030 	sub	r3, fp, #48	; 0x30
  129384:	e1a01003 	mov	r1, r3
  129388:	e51b000c 	ldr	r0, [fp, #-12]
  12938c:	eb002c05 	bl	1343a8 <lwip_ping_send>
  129390:	e1a03000 	mov	r3, r0
  129394:	e3530000 	cmp	r3, #0
  129398:	1a000023 	bne	12942c <lwip_netdev_ping+0x29c>
    {
        recv_start_tick = rt_tick_get();
  12939c:	ebff62af 	bl	101e60 <rt_tick_get>
  1293a0:	e50b0010 	str	r0, [fp, #-16]
        if ((recv_len = lwip_ping_recv(s, &ttl)) >= 0)
  1293a4:	e24b301c 	sub	r3, fp, #28
  1293a8:	e1a01003 	mov	r1, r3
  1293ac:	e51b000c 	ldr	r0, [fp, #-12]
  1293b0:	eb002c3a 	bl	1344a0 <lwip_ping_recv>
  1293b4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1293b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1293bc:	e3530000 	cmp	r3, #0
  1293c0:	ba000016 	blt	129420 <lwip_netdev_ping+0x290>
        {
            elapsed_time = (rt_tick_get() - recv_start_tick) * 1000UL / RT_TICK_PER_SECOND;
  1293c4:	ebff62a5 	bl	101e60 <rt_tick_get>
  1293c8:	e1a02000 	mov	r2, r0
  1293cc:	e51b3010 	ldr	r3, [fp, #-16]
  1293d0:	e0423003 	sub	r3, r2, r3
  1293d4:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1293d8:	e0020392 	mul	r2, r2, r3
  1293dc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1293e0:	e3413062 	movt	r3, #4194	; 0x1062
  1293e4:	e0832392 	umull	r2, r3, r2, r3
  1293e8:	e1a03323 	lsr	r3, r3, #6
  1293ec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            ping_resp->data_len = recv_len;
  1293f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1293f4:	e6ff2073 	uxth	r2, r3
  1293f8:	e59b3004 	ldr	r3, [fp, #4]
  1293fc:	e1c320b4 	strh	r2, [r3, #4]
            ping_resp->ttl = ttl;
  129400:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  129404:	e6ff2073 	uxth	r2, r3
  129408:	e59b3004 	ldr	r3, [fp, #4]
  12940c:	e1c320b6 	strh	r2, [r3, #6]
            ping_resp->ticks = elapsed_time;
  129410:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  129414:	e59b3004 	ldr	r3, [fp, #4]
  129418:	e5832008 	str	r2, [r3, #8]
  12941c:	ea000005 	b	129438 <lwip_netdev_ping+0x2a8>
        }
        else
        {
            result = -RT_ETIMEOUT;
  129420:	e3e03001 	mvn	r3, #1
  129424:	e50b3008 	str	r3, [fp, #-8]
            goto __exit;
  129428:	ea000002 	b	129438 <lwip_netdev_ping+0x2a8>
        }
    }
    else
    {
        result = -RT_ETIMEOUT;
  12942c:	e3e03001 	mvn	r3, #1
  129430:	e50b3008 	str	r3, [fp, #-8]
        goto __exit;
  129434:	e320f000 	nop	{0}
    }

__exit:
    lwip_close(s);
  129438:	e51b000c 	ldr	r0, [fp, #-12]
  12943c:	ebffa103 	bl	111850 <lwip_close>

    return result;
  129440:	e51b3008 	ldr	r3, [fp, #-8]
}
  129444:	e1a00003 	mov	r0, r3
  129448:	e24bd004 	sub	sp, fp, #4
  12944c:	e8bd8800 	pop	{fp, pc}

00129450 <lwip_netdev_set_default>:
// }
// #endif /* RT_LWIP_TCP || RT_LWIP_UDP */
#endif /* RT_USING_FINSH */

static int lwip_netdev_set_default(struct netdev *netif)
{
  129450:	e92d4800 	push	{fp, lr}
  129454:	e28db004 	add	fp, sp, #4
  129458:	e24dd008 	sub	sp, sp, #8
  12945c:	e50b0008 	str	r0, [fp, #-8]
    netif_set_default((struct netif *)netif->user_data);
  129460:	e51b3008 	ldr	r3, [fp, #-8]
  129464:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129468:	e1a00003 	mov	r0, r3
  12946c:	ebffc13a 	bl	11995c <netif_set_default>
    return ERR_OK;
  129470:	e3a03000 	mov	r3, #0
}
  129474:	e1a00003 	mov	r0, r3
  129478:	e24bd004 	sub	sp, fp, #4
  12947c:	e8bd8800 	pop	{fp, pc}

00129480 <netdev_add>:

    lwip_netdev_set_default,
};

static int netdev_add(struct netif *lwip_netif)
{
  129480:	e92d4800 	push	{fp, lr}
  129484:	e28db004 	add	fp, sp, #4
  129488:	e24dd018 	sub	sp, sp, #24
  12948c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#define LWIP_NETIF_NAME_LEN 2
    int result = 0;
  129490:	e3a03000 	mov	r3, #0
  129494:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  129498:	e3a03000 	mov	r3, #0
  12949c:	e50b300c 	str	r3, [fp, #-12]
    char name[LWIP_NETIF_NAME_LEN + 1] = {0};
  1294a0:	e24b3010 	sub	r3, fp, #16
  1294a4:	e3a02000 	mov	r2, #0
  1294a8:	e1c320b0 	strh	r2, [r3]
  1294ac:	e5c32002 	strb	r2, [r3, #2]

    RT_ASSERT(lwip_netif);
  1294b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1294b4:	e3530000 	cmp	r3, #0
  1294b8:	1a000005 	bne	1294d4 <netdev_add+0x54>
  1294bc:	e3002141 	movw	r2, #321	; 0x141
  1294c0:	e3081c94 	movw	r1, #35988	; 0x8c94
  1294c4:	e3401014 	movt	r1, #20
  1294c8:	e3080bac 	movw	r0, #35756	; 0x8bac
  1294cc:	e3400014 	movt	r0, #20
  1294d0:	ebff6830 	bl	103598 <rt_assert_handler>

    netdev = (struct netdev *)rt_calloc(1, sizeof(struct netdev));
  1294d4:	e3a01044 	mov	r1, #68	; 0x44
  1294d8:	e3a00001 	mov	r0, #1
  1294dc:	ebff66ca 	bl	10300c <rt_calloc>
  1294e0:	e50b000c 	str	r0, [fp, #-12]
    if (netdev == RT_NULL)
  1294e4:	e51b300c 	ldr	r3, [fp, #-12]
  1294e8:	e3530000 	cmp	r3, #0
  1294ec:	1a000001 	bne	1294f8 <netdev_add+0x78>
    {
        return -ERR_IF;
  1294f0:	e3a0300c 	mov	r3, #12
  1294f4:	ea000036 	b	1295d4 <netdev_add+0x154>
//     extern int sal_lwip_netdev_set_pf_info(struct netdev *netdev);
//     /* set the lwIP network interface device protocol family information */
//     sal_lwip_netdev_set_pf_info(netdev);
// #endif /* SAL_USING_LWIP */
    extern int sal_unet_netdev_set_pf_info(struct netdev *netdev);
    sal_unet_netdev_set_pf_info(netdev);
  1294f8:	e51b000c 	ldr	r0, [fp, #-12]
  1294fc:	ebff6d0d 	bl	104938 <sal_unet_netdev_set_pf_info>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  129500:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129504:	e2831042 	add	r1, r3, #66	; 0x42
  129508:	e24b3010 	sub	r3, fp, #16
  12950c:	e3a02002 	mov	r2, #2
  129510:	e1a00003 	mov	r0, r3
  129514:	ebff6751 	bl	103260 <rt_strncpy>
    result = netdev_register(netdev, name, (void *)lwip_netif);
  129518:	e24b3010 	sub	r3, fp, #16
  12951c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  129520:	e1a01003 	mov	r1, r3
  129524:	e51b000c 	ldr	r0, [fp, #-12]
  129528:	ebff6ecd 	bl	105064 <netdev_register>
  12952c:	e50b0008 	str	r0, [fp, #-8]
    // result = ueth_netdev_register(netdev, name, (void *)lwip_netif);
	
    /* Update netdev info after registered */
    netdev->flags = lwip_netif->flags;
  129530:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129534:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  129538:	e6ff2073 	uxth	r2, r3
  12953c:	e51b300c 	ldr	r3, [fp, #-12]
  129540:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    netdev->mtu = lwip_netif->mtu;
  129544:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129548:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  12954c:	e51b300c 	ldr	r3, [fp, #-12]
  129550:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->ops = &lwip_netdev_ops;
  129554:	e51b200c 	ldr	r2, [fp, #-12]
  129558:	e3083b8c 	movw	r3, #35724	; 0x8b8c
  12955c:	e3403014 	movt	r3, #20
  129560:	e5823030 	str	r3, [r2, #48]	; 0x30
    netdev->hwaddr_len =  lwip_netif->hwaddr_len;
  129564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129568:	e5d3203a 	ldrb	r2, [r3, #58]	; 0x3a
  12956c:	e51b300c 	ldr	r3, [fp, #-12]
  129570:	e5c32020 	strb	r2, [r3, #32]
    rt_memcpy(netdev->hwaddr, lwip_netif->hwaddr, lwip_netif->hwaddr_len);
  129574:	e51b300c 	ldr	r3, [fp, #-12]
  129578:	e2830021 	add	r0, r3, #33	; 0x21
  12957c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129580:	e283103b 	add	r1, r3, #59	; 0x3b
  129584:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129588:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12958c:	e1a02003 	mov	r2, r3
  129590:	ebff675a 	bl	103300 <rt_memcpy>
    netdev->ip_addr = lwip_netif->ip_addr;
  129594:	e51b300c 	ldr	r3, [fp, #-12]
  129598:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12959c:	e5922004 	ldr	r2, [r2, #4]
  1295a0:	e583200c 	str	r2, [r3, #12]
    netdev->gw = lwip_netif->gw;
  1295a4:	e51b300c 	ldr	r3, [fp, #-12]
  1295a8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1295ac:	e592200c 	ldr	r2, [r2, #12]
  1295b0:	e5832014 	str	r2, [r3, #20]
    netdev->netmask = lwip_netif->netmask;
  1295b4:	e51b300c 	ldr	r3, [fp, #-12]
  1295b8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1295bc:	e5922008 	ldr	r2, [r2, #8]
  1295c0:	e5832010 	str	r2, [r3, #16]

#ifdef RT_LWIP_DHCP
    netdev_low_level_set_dhcp_status(netdev, RT_TRUE);
  1295c4:	e3a01001 	mov	r1, #1
  1295c8:	e51b000c 	ldr	r0, [fp, #-12]
  1295cc:	ebff740d 	bl	106608 <netdev_low_level_set_dhcp_status>
#endif

    return result;
  1295d0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1295d4:	e1a00003 	mov	r0, r3
  1295d8:	e24bd004 	sub	sp, fp, #4
  1295dc:	e8bd8800 	pop	{fp, pc}

001295e0 <netdev_del>:

static void netdev_del(struct netif *lwip_netif)
{
  1295e0:	e92d4800 	push	{fp, lr}
  1295e4:	e28db004 	add	fp, sp, #4
  1295e8:	e24dd010 	sub	sp, sp, #16
  1295ec:	e50b0010 	str	r0, [fp, #-16]
    char name[LWIP_NETIF_NAME_LEN + 1];
    struct netdev *netdev;

    RT_ASSERT(lwip_netif);
  1295f0:	e51b3010 	ldr	r3, [fp, #-16]
  1295f4:	e3530000 	cmp	r3, #0
  1295f8:	1a000005 	bne	129614 <netdev_del+0x34>
  1295fc:	e300216b 	movw	r2, #363	; 0x16b
  129600:	e3081ca0 	movw	r1, #36000	; 0x8ca0
  129604:	e3401014 	movt	r1, #20
  129608:	e3080bac 	movw	r0, #35756	; 0x8bac
  12960c:	e3400014 	movt	r0, #20
  129610:	ebff67e0 	bl	103598 <rt_assert_handler>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  129614:	e51b3010 	ldr	r3, [fp, #-16]
  129618:	e2831042 	add	r1, r3, #66	; 0x42
  12961c:	e24b300c 	sub	r3, fp, #12
  129620:	e3a02002 	mov	r2, #2
  129624:	e1a00003 	mov	r0, r3
  129628:	ebff670c 	bl	103260 <rt_strncpy>
    netdev = netdev_get_by_name(name);
  12962c:	e24b300c 	sub	r3, fp, #12
  129630:	e1a00003 	mov	r0, r3
  129634:	ebff6fae 	bl	1054f4 <netdev_get_by_name>
  129638:	e50b0008 	str	r0, [fp, #-8]
    netdev_unregister(netdev);
  12963c:	e51b0008 	ldr	r0, [fp, #-8]
  129640:	ebff6ef2 	bl	105210 <netdev_unregister>
    rt_free(netdev);
  129644:	e51b0008 	ldr	r0, [fp, #-8]
  129648:	ebff665b 	bl	102fbc <rt_free>
}
  12964c:	e320f000 	nop	{0}
  129650:	e24bd004 	sub	sp, fp, #4
  129654:	e8bd8800 	pop	{fp, pc}

00129658 <netdev_flags_sync>:

/* synchronize lwIP network interface device and network interface device flags */
static int netdev_flags_sync(struct netif *lwip_netif)
{
  129658:	e92d4800 	push	{fp, lr}
  12965c:	e28db004 	add	fp, sp, #4
  129660:	e24dd010 	sub	sp, sp, #16
  129664:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = NULL;
  129668:	e3a03000 	mov	r3, #0
  12966c:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(lwip_netif);
  129670:	e51b3010 	ldr	r3, [fp, #-16]
  129674:	e3530000 	cmp	r3, #0
  129678:	1a000005 	bne	129694 <netdev_flags_sync+0x3c>
  12967c:	e3a02f5e 	mov	r2, #376	; 0x178
  129680:	e3081cac 	movw	r1, #36012	; 0x8cac
  129684:	e3401014 	movt	r1, #20
  129688:	e3080bac 	movw	r0, #35756	; 0x8bac
  12968c:	e3400014 	movt	r0, #20
  129690:	ebff67c0 	bl	103598 <rt_assert_handler>

    netdev = netdev_get_by_name(lwip_netif->name);
  129694:	e51b3010 	ldr	r3, [fp, #-16]
  129698:	e2833042 	add	r3, r3, #66	; 0x42
  12969c:	e1a00003 	mov	r0, r3
  1296a0:	ebff6f93 	bl	1054f4 <netdev_get_by_name>
  1296a4:	e50b0008 	str	r0, [fp, #-8]
    if (netdev == RT_NULL)
  1296a8:	e51b3008 	ldr	r3, [fp, #-8]
  1296ac:	e3530000 	cmp	r3, #0
  1296b0:	1a000001 	bne	1296bc <netdev_flags_sync+0x64>
    {
        return -ERR_IF;
  1296b4:	e3a0300c 	mov	r3, #12
  1296b8:	ea00000d 	b	1296f4 <netdev_flags_sync+0x9c>
    }
    
    netdev->mtu = lwip_netif->mtu;
  1296bc:	e51b3010 	ldr	r3, [fp, #-16]
  1296c0:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  1296c4:	e51b3008 	ldr	r3, [fp, #-8]
  1296c8:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->flags |= lwip_netif->flags;
  1296cc:	e51b3008 	ldr	r3, [fp, #-8]
  1296d0:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  1296d4:	e51b3010 	ldr	r3, [fp, #-16]
  1296d8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1296dc:	e6ff3073 	uxth	r3, r3
  1296e0:	e1823003 	orr	r3, r2, r3
  1296e4:	e6ff2073 	uxth	r2, r3
  1296e8:	e51b3008 	ldr	r3, [fp, #-8]
  1296ec:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    return ERR_OK;
  1296f0:	e3a03000 	mov	r3, #0
}
  1296f4:	e1a00003 	mov	r0, r3
  1296f8:	e24bd004 	sub	sp, fp, #4
  1296fc:	e8bd8800 	pop	{fp, pc}

00129700 <ethernetif_linkoutput>:
// #endif /* RT_USING_NETDEV */

static err_t ethernetif_linkoutput(struct netif *netif, struct pbuf *p)
{
  129700:	e92d4800 	push	{fp, lr}
  129704:	e28db004 	add	fp, sp, #4
  129708:	e24dd010 	sub	sp, sp, #16
  12970c:	e50b0010 	str	r0, [fp, #-16]
  129710:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
//         return ERR_IF;
//     }
// #endif
    struct eth_device* enetif;

    RT_ASSERT(netif != RT_NULL);
  129714:	e51b3010 	ldr	r3, [fp, #-16]
  129718:	e3530000 	cmp	r3, #0
  12971c:	1a000005 	bne	129738 <ethernetif_linkoutput+0x38>
  129720:	e30021a5 	movw	r2, #421	; 0x1a5
  129724:	e3081cc0 	movw	r1, #36032	; 0x8cc0
  129728:	e3401014 	movt	r1, #20
  12972c:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  129730:	e3400014 	movt	r0, #20
  129734:	ebff6797 	bl	103598 <rt_assert_handler>
    enetif = (struct eth_device*)netif->state;
  129738:	e51b3010 	ldr	r3, [fp, #-16]
  12973c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  129740:	e50b3008 	str	r3, [fp, #-8]

    if (enetif->eth_tx(&(enetif->parent), p) != RT_EOK)
  129744:	e51b3008 	ldr	r3, [fp, #-8]
  129748:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  12974c:	e51b2008 	ldr	r2, [fp, #-8]
  129750:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  129754:	e1a00002 	mov	r0, r2
  129758:	e12fff33 	blx	r3
  12975c:	e1a03000 	mov	r3, r0
  129760:	e3530000 	cmp	r3, #0
  129764:	0a000001 	beq	129770 <ethernetif_linkoutput+0x70>
    {
        return ERR_IF;
  129768:	e3e0300b 	mvn	r3, #11
  12976c:	ea000000 	b	129774 <ethernetif_linkoutput+0x74>
    }
    return ERR_OK;
  129770:	e3a03000 	mov	r3, #0
}
  129774:	e1a00003 	mov	r0, r3
  129778:	e24bd004 	sub	sp, fp, #4
  12977c:	e8bd8800 	pop	{fp, pc}

00129780 <eth_netif_device_init>:

static err_t eth_netif_device_init(struct netif *netif)
{
  129780:	e92d4800 	push	{fp, lr}
  129784:	e28db004 	add	fp, sp, #4
  129788:	e24dd010 	sub	sp, sp, #16
  12978c:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device *ethif;

    ethif = (struct eth_device*)netif->state;
  129790:	e51b3010 	ldr	r3, [fp, #-16]
  129794:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  129798:	e50b3008 	str	r3, [fp, #-8]
    if (ethif != RT_NULL)
  12979c:	e51b3008 	ldr	r3, [fp, #-8]
  1297a0:	e3530000 	cmp	r3, #0
  1297a4:	0a000032 	beq	129874 <eth_netif_device_init+0xf4>
    {
        rt_device_t device;

#ifdef RT_USING_NETDEV
    /* network interface device register */
    netdev_add(netif);
  1297a8:	e51b0010 	ldr	r0, [fp, #-16]
  1297ac:	ebffff33 	bl	129480 <netdev_add>
#endif /* RT_USING_NETDEV */

        /* get device object */
        device = (rt_device_t) ethif;
  1297b0:	e51b3008 	ldr	r3, [fp, #-8]
  1297b4:	e50b300c 	str	r3, [fp, #-12]
        if (ueth_device_init(device) != RT_EOK)
  1297b8:	e51b000c 	ldr	r0, [fp, #-12]
  1297bc:	ebff6d2d 	bl	104c78 <ueth_device_init>
  1297c0:	e1a03000 	mov	r3, r0
  1297c4:	e3530000 	cmp	r3, #0
  1297c8:	0a000001 	beq	1297d4 <eth_netif_device_init+0x54>
        // if (rt_device_init(device) != RT_EOK)
        {
            return ERR_IF;
  1297cc:	e3e0300b 	mvn	r3, #11
  1297d0:	ea000028 	b	129878 <eth_netif_device_init+0xf8>
        }

        /* copy device flags to netif flags */
        netif->flags = (ethif->flags & 0xff);
  1297d4:	e51b3008 	ldr	r3, [fp, #-8]
  1297d8:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  1297dc:	e6ef2073 	uxtb	r2, r3
  1297e0:	e51b3010 	ldr	r3, [fp, #-16]
  1297e4:	e5c32041 	strb	r2, [r3, #65]	; 0x41
        netif->mtu = ETHERNET_MTU;
  1297e8:	e51b3010 	ldr	r3, [fp, #-16]
  1297ec:	e30025dc 	movw	r2, #1500	; 0x5dc
  1297f0:	e1c323b8 	strh	r2, [r3, #56]	; 0x38
        
        /* set output */
        netif->output       = etharp_output;
  1297f4:	e51b2010 	ldr	r2, [fp, #-16]
  1297f8:	e30e393c 	movw	r3, #59708	; 0xe93c
  1297fc:	e3403012 	movt	r3, #18
  129800:	e5823014 	str	r3, [r2, #20]
#endif /* LWIP_IPV6_MLD */

#endif /* LWIP_IPV6 */

        /* set default netif */
        if (netif_default == RT_NULL)
  129804:	e30c3a40 	movw	r3, #51776	; 0xca40
  129808:	e3403015 	movt	r3, #21
  12980c:	e5933000 	ldr	r3, [r3]
  129810:	e3530000 	cmp	r3, #0
  129814:	1a000003 	bne	129828 <eth_netif_device_init+0xa8>
            netif_set_default(ethif->netif);
  129818:	e51b3008 	ldr	r3, [fp, #-8]
  12981c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129820:	e1a00003 	mov	r0, r3
  129824:	ebffc04c 	bl	11995c <netif_set_default>
#if LWIP_DHCP
        /* set interface up */
        netif_set_up(ethif->netif);
  129828:	e51b3008 	ldr	r3, [fp, #-8]
  12982c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129830:	e1a00003 	mov	r0, r3
  129834:	ebffc054 	bl	11998c <netif_set_up>
        /* if this interface uses DHCP, start the DHCP client */
        dhcp_start(ethif->netif);
  129838:	e51b3008 	ldr	r3, [fp, #-8]
  12983c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129840:	e1a00003 	mov	r0, r3
  129844:	eb00051b 	bl	12acb8 <dhcp_start>
#else
        /* set interface up */
        netif_set_up(ethif->netif);
#endif
        if (ethif->flags & ETHIF_LINK_PHYUP)
  129848:	e51b3008 	ldr	r3, [fp, #-8]
  12984c:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  129850:	e2033c01 	and	r3, r3, #256	; 0x100
  129854:	e3530000 	cmp	r3, #0
  129858:	0a000003 	beq	12986c <eth_netif_device_init+0xec>
        {
            /* set link_up for this netif */
            netif_set_link_up(ethif->netif);
  12985c:	e51b3008 	ldr	r3, [fp, #-8]
  129860:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129864:	e1a00003 	mov	r0, r3
  129868:	ebffc0dc 	bl	119be0 <netif_set_link_up>
        }
        return ERR_OK;
  12986c:	e3a03000 	mov	r3, #0
  129870:	ea000000 	b	129878 <eth_netif_device_init+0xf8>
    }

    return ERR_IF;
  129874:	e3e0300b 	mvn	r3, #11
}
  129878:	e1a00003 	mov	r0, r3
  12987c:	e24bd004 	sub	sp, fp, #4
  129880:	e8bd8800 	pop	{fp, pc}

00129884 <eth_device_init_with_flag>:

/* Keep old drivers compatible in RT-Thread */
rt_err_t eth_device_init_with_flag(struct eth_device *dev, const char *name, rt_uint16_t flags)
{
  129884:	e92d4800 	push	{fp, lr}
  129888:	e28db004 	add	fp, sp, #4
  12988c:	e24dd038 	sub	sp, sp, #56	; 0x38
  129890:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  129894:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  129898:	e1a03002 	mov	r3, r2
  12989c:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    struct netif* netif;
#if LWIP_NETIF_HOSTNAME
#define LWIP_HOSTNAME_LEN 16
    char *hostname = RT_NULL;
  1298a0:	e3a03000 	mov	r3, #0
  1298a4:	e50b3008 	str	r3, [fp, #-8]
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif) + LWIP_HOSTNAME_LEN);
  1298a8:	e3a01098 	mov	r1, #152	; 0x98
  1298ac:	e3a00001 	mov	r0, #1
  1298b0:	ebff65d5 	bl	10300c <rt_calloc>
  1298b4:	e50b000c 	str	r0, [fp, #-12]
#else
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif));
#endif
    if (netif == RT_NULL)
  1298b8:	e51b300c 	ldr	r3, [fp, #-12]
  1298bc:	e3530000 	cmp	r3, #0
  1298c0:	1a000004 	bne	1298d8 <eth_device_init_with_flag+0x54>
    {
        rt_kprintf("malloc netif failed\n");
  1298c4:	e3080bcc 	movw	r0, #35788	; 0x8bcc
  1298c8:	e3400014 	movt	r0, #20
  1298cc:	ebff6610 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  1298d0:	e3e03000 	mvn	r3, #0
  1298d4:	ea00005b 	b	129a48 <eth_device_init_with_flag+0x1c4>
    }

    /* set netif */
    dev->netif = netif;
  1298d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1298dc:	e51b200c 	ldr	r2, [fp, #-12]
  1298e0:	e5832044 	str	r2, [r3, #68]	; 0x44
    /* device flags, which will be set to netif flags when initializing */
    dev->flags = flags;
  1298e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1298e8:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  1298ec:	e1c326bc 	strh	r2, [r3, #108]	; 0x6c
    /* link changed status of device */
    dev->link_changed = 0x00;
  1298f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1298f4:	e3a02000 	mov	r2, #0
  1298f8:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    dev->parent.type = RT_Device_Class_NetIf;
  1298fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129900:	e3a02002 	mov	r2, #2
  129904:	e5832018 	str	r2, [r3, #24]
    /* register to RT-Thread device manager */
   // rt_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
    ueth_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
  129908:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12990c:	e3a02003 	mov	r2, #3
  129910:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  129914:	e1a00003 	mov	r0, r3
  129918:	ebff6c49 	bl	104a44 <ueth_device_register>
    rt_sem_init(&(dev->tx_ack), name, 0, RT_IPC_FLAG_FIFO);
  12991c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129920:	e2830048 	add	r0, r3, #72	; 0x48
  129924:	e3a03000 	mov	r3, #0
  129928:	e3a02000 	mov	r2, #0
  12992c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  129930:	ebff5dd5 	bl	10108c <rt_sem_init>

    /* set name */
    netif->name[0] = name[0];
  129934:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129938:	e5d32000 	ldrb	r2, [r3]
  12993c:	e51b300c 	ldr	r3, [fp, #-12]
  129940:	e5c32042 	strb	r2, [r3, #66]	; 0x42
    netif->name[1] = name[1];
  129944:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129948:	e5d32001 	ldrb	r2, [r3, #1]
  12994c:	e51b300c 	ldr	r3, [fp, #-12]
  129950:	e5c32043 	strb	r2, [r3, #67]	; 0x43

    /* set hw address to 6 */
    netif->hwaddr_len   = 6;
  129954:	e51b300c 	ldr	r3, [fp, #-12]
  129958:	e3a02006 	mov	r2, #6
  12995c:	e5c3203a 	strb	r2, [r3, #58]	; 0x3a
    /* maximum transfer unit */
    netif->mtu          = ETHERNET_MTU;
  129960:	e51b300c 	ldr	r3, [fp, #-12]
  129964:	e30025dc 	movw	r2, #1500	; 0x5dc
  129968:	e1c323b8 	strh	r2, [r3, #56]	; 0x38

    /* set linkoutput */
    netif->linkoutput   = ethernetif_linkoutput;
  12996c:	e51b200c 	ldr	r2, [fp, #-12]
  129970:	e3093700 	movw	r3, #38656	; 0x9700
  129974:	e3403012 	movt	r3, #18
  129978:	e5823018 	str	r3, [r2, #24]
        
    /* get hardware MAC address */
    ueth_device_control(&(dev->parent), NIOCTL_GADDR, netif->hwaddr);
  12997c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  129980:	e51b300c 	ldr	r3, [fp, #-12]
  129984:	e283303b 	add	r3, r3, #59	; 0x3b
  129988:	e1a02003 	mov	r2, r3
  12998c:	e3a01001 	mov	r1, #1
  129990:	ebff6d38 	bl	104e78 <ueth_device_control>
    

#if LWIP_NETIF_HOSTNAME
    /* Initialize interface hostname */
    hostname = (char *)netif + sizeof(struct netif);
  129994:	e51b300c 	ldr	r3, [fp, #-12]
  129998:	e2833088 	add	r3, r3, #136	; 0x88
  12999c:	e50b3008 	str	r3, [fp, #-8]
    rt_sprintf(hostname, "rtthread_%02x%02x", name[0], name[1]);
  1299a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1299a4:	e5d33000 	ldrb	r3, [r3]
  1299a8:	e1a02003 	mov	r2, r3
  1299ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1299b0:	e2833001 	add	r3, r3, #1
  1299b4:	e5d33000 	ldrb	r3, [r3]
  1299b8:	e3081be4 	movw	r1, #35812	; 0x8be4
  1299bc:	e3401014 	movt	r1, #20
  1299c0:	e51b0008 	ldr	r0, [fp, #-8]
  1299c4:	ebff65b0 	bl	10308c <rt_sprintf>
    netif->hostname = hostname;
  1299c8:	e51b300c 	ldr	r3, [fp, #-12]
  1299cc:	e51b2008 	ldr	r2, [fp, #-8]
  1299d0:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_NETIF_HOSTNAME */
    /* if tcp thread has been started up, we add this netif to the system */
    if (rt_thread_find("tcpip") != RT_NULL)
  1299d4:	e3080bf8 	movw	r0, #35832	; 0x8bf8
  1299d8:	e3400014 	movt	r0, #20
  1299dc:	ebff61a5 	bl	102078 <rt_thread_find>
  1299e0:	e1a03000 	mov	r3, r0
  1299e4:	e3530000 	cmp	r3, #0
  1299e8:	0a000013 	beq	129a3c <eth_device_init_with_flag+0x1b8>
#if !LWIP_DHCP
        ipaddr.addr = inet_addr(RT_LWIP_IPADDR);
        gw.addr = inet_addr(RT_LWIP_GWADDR);
        netmask.addr = inet_addr(RT_LWIP_MSKADDR);
#else        
        IP4_ADDR(&ipaddr, 0, 0, 0, 0);
  1299ec:	e3a03000 	mov	r3, #0
  1299f0:	e50b3010 	str	r3, [fp, #-16]
        IP4_ADDR(&gw, 0, 0, 0, 0);
  1299f4:	e3a03000 	mov	r3, #0
  1299f8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        IP4_ADDR(&netmask, 0, 0, 0, 0);
  1299fc:	e3a03000 	mov	r3, #0
  129a00:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#endif
        netifapi_netif_add(netif, &ipaddr, &netmask, &gw, dev, eth_netif_device_init, tcpip_input);
  129a04:	e24b0018 	sub	r0, fp, #24
  129a08:	e24b2014 	sub	r2, fp, #20
  129a0c:	e24b1010 	sub	r1, fp, #16
  129a10:	e306312c 	movw	r3, #24876	; 0x612c
  129a14:	e3403011 	movt	r3, #17
  129a18:	e58d3008 	str	r3, [sp, #8]
  129a1c:	e3093780 	movw	r3, #38784	; 0x9780
  129a20:	e3403012 	movt	r3, #18
  129a24:	e58d3004 	str	r3, [sp, #4]
  129a28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129a2c:	e58d3000 	str	r3, [sp]
  129a30:	e1a03000 	mov	r3, r0
  129a34:	e51b000c 	ldr	r0, [fp, #-12]
  129a38:	ebff9c92 	bl	110c88 <netifapi_netif_add>
    }
#ifdef RT_USING_NETDEV
    /* network interface device flags synchronize */
    netdev_flags_sync(netif);
  129a3c:	e51b000c 	ldr	r0, [fp, #-12]
  129a40:	ebffff04 	bl	129658 <netdev_flags_sync>
#endif /* RT_USING_NETDEV */
    return RT_EOK;
  129a44:	e3a03000 	mov	r3, #0
}
  129a48:	e1a00003 	mov	r0, r3
  129a4c:	e24bd004 	sub	sp, fp, #4
  129a50:	e8bd8800 	pop	{fp, pc}

00129a54 <eth_device_init>:

rt_err_t eth_device_init(struct eth_device * dev, const char *name)
{
  129a54:	e92d4800 	push	{fp, lr}
  129a58:	e28db004 	add	fp, sp, #4
  129a5c:	e24dd010 	sub	sp, sp, #16
  129a60:	e50b0010 	str	r0, [fp, #-16]
  129a64:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_uint16_t flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
  129a68:	e3a0300a 	mov	r3, #10
  129a6c:	e14b30b6 	strh	r3, [fp, #-6]

#if LWIP_IGMP
    /* IGMP support */
    flags |= NETIF_FLAG_IGMP;
  129a70:	e15b30b6 	ldrh	r3, [fp, #-6]
  129a74:	e3833020 	orr	r3, r3, #32
  129a78:	e14b30b6 	strh	r3, [fp, #-6]
#endif
    return eth_device_init_with_flag(dev, name, flags);
  129a7c:	e15b30b6 	ldrh	r3, [fp, #-6]
  129a80:	e1a02003 	mov	r2, r3
  129a84:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  129a88:	e51b0010 	ldr	r0, [fp, #-16]
  129a8c:	ebffff7c 	bl	129884 <eth_device_init_with_flag>
  129a90:	e1a03000 	mov	r3, r0
}
  129a94:	e1a00003 	mov	r0, r3
  129a98:	e24bd004 	sub	sp, fp, #4
  129a9c:	e8bd8800 	pop	{fp, pc}

00129aa0 <eth_device_deinit>:

void eth_device_deinit(struct eth_device *dev)
{
  129aa0:	e92d4800 	push	{fp, lr}
  129aa4:	e28db004 	add	fp, sp, #4
  129aa8:	e24dd010 	sub	sp, sp, #16
  129aac:	e50b0010 	str	r0, [fp, #-16]
    struct netif* netif = dev->netif;
  129ab0:	e51b3010 	ldr	r3, [fp, #-16]
  129ab4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129ab8:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_DHCP
    dhcp_stop(netif);
  129abc:	e51b0008 	ldr	r0, [fp, #-8]
  129ac0:	eb0008f4 	bl	12be98 <dhcp_stop>
    dhcp_cleanup(netif);
  129ac4:	e51b0008 	ldr	r0, [fp, #-8]
  129ac8:	eb00045e 	bl	12ac48 <dhcp_cleanup>
#endif
    netif_set_down(netif);
  129acc:	e51b0008 	ldr	r0, [fp, #-8]
  129ad0:	ebffc002 	bl	119ae0 <netif_set_down>
    netif_remove(netif);
  129ad4:	e51b0008 	ldr	r0, [fp, #-8]
  129ad8:	ebffbe9b 	bl	11954c <netif_remove>
// #ifdef RT_USING_NETDEV
    netdev_del(netif);
  129adc:	e51b0008 	ldr	r0, [fp, #-8]
  129ae0:	ebfffebe 	bl	1295e0 <netdev_del>
// #endif
    ueth_device_close(&(dev->parent));
  129ae4:	e51b3010 	ldr	r3, [fp, #-16]
  129ae8:	e1a00003 	mov	r0, r3
  129aec:	ebff6c9e 	bl	104d6c <ueth_device_close>
    ueth_device_unregister(&(dev->parent));
  129af0:	e51b3010 	ldr	r3, [fp, #-16]
  129af4:	e1a00003 	mov	r0, r3
  129af8:	ebff6c23 	bl	104b8c <ueth_device_unregister>
    rt_sem_detach(&(dev->tx_ack));
  129afc:	e51b3010 	ldr	r3, [fp, #-16]
  129b00:	e2833048 	add	r3, r3, #72	; 0x48
  129b04:	e1a00003 	mov	r0, r3
  129b08:	ebff5da5 	bl	1011a4 <rt_sem_detach>
    rt_free(netif);
  129b0c:	e51b0008 	ldr	r0, [fp, #-8]
  129b10:	ebff6529 	bl	102fbc <rt_free>
}
  129b14:	e320f000 	nop	{0}
  129b18:	e24bd004 	sub	sp, fp, #4
  129b1c:	e8bd8800 	pop	{fp, pc}

00129b20 <eth_device_ready>:
}
#endif /* SAL_USING_AF_UNIX */

#ifndef LWIP_NO_RX_THREAD
rt_err_t eth_device_ready(struct eth_device* dev)
{
  129b20:	e92d4800 	push	{fp, lr}
  129b24:	e28db004 	add	fp, sp, #4
  129b28:	e24dd008 	sub	sp, sp, #8
  129b2c:	e50b0008 	str	r0, [fp, #-8]
    if (dev->netif)
  129b30:	e51b3008 	ldr	r3, [fp, #-8]
  129b34:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129b38:	e3530000 	cmp	r3, #0
  129b3c:	0a000006 	beq	129b5c <eth_device_ready+0x3c>
    {
        /* post message to Ethernet thread */
        return rt_mb_send(&eth_rx_thread_mb, (rt_ubase_t)dev);        
  129b40:	e51b3008 	ldr	r3, [fp, #-8]
  129b44:	e1a01003 	mov	r1, r3
  129b48:	e30e06b8 	movw	r0, #59064	; 0xe6b8
  129b4c:	e3400014 	movt	r0, #20
  129b50:	ebff5eab 	bl	101604 <rt_mb_send>
  129b54:	e1a03000 	mov	r3, r0
  129b58:	ea000000 	b	129b60 <eth_device_ready+0x40>
    }
    else
        return ERR_OK; /* netif is not initialized yet, just return. */
  129b5c:	e3a03000 	mov	r3, #0
}
  129b60:	e1a00003 	mov	r0, r3
  129b64:	e24bd004 	sub	sp, fp, #4
  129b68:	e8bd8800 	pop	{fp, pc}

00129b6c <eth_device_linkchange>:

rt_err_t eth_device_linkchange(struct eth_device* dev, rt_bool_t up)
{
  129b6c:	e92d4800 	push	{fp, lr}
  129b70:	e28db004 	add	fp, sp, #4
  129b74:	e24dd010 	sub	sp, sp, #16
  129b78:	e50b0010 	str	r0, [fp, #-16]
  129b7c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    // rt_uint32_t level;

    RT_ASSERT(dev != RT_NULL);
  129b80:	e51b3010 	ldr	r3, [fp, #-16]
  129b84:	e3530000 	cmp	r3, #0
  129b88:	1a000005 	bne	129ba4 <eth_device_linkchange+0x38>
  129b8c:	e3a02fc3 	mov	r2, #780	; 0x30c
  129b90:	e3081cd8 	movw	r1, #36056	; 0x8cd8
  129b94:	e3401014 	movt	r1, #20
  129b98:	e3080c00 	movw	r0, #35840	; 0x8c00
  129b9c:	e3400014 	movt	r0, #20
  129ba0:	ebff667c 	bl	103598 <rt_assert_handler>

    // level = rt_hw_interrupt_disable();
    dev->link_changed = 0x01;
  129ba4:	e51b3010 	ldr	r3, [fp, #-16]
  129ba8:	e3a02001 	mov	r2, #1
  129bac:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    if (up == RT_TRUE)
  129bb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129bb4:	e3530001 	cmp	r3, #1
  129bb8:	1a000003 	bne	129bcc <eth_device_linkchange+0x60>
        dev->link_status = 0x01;
  129bbc:	e51b3010 	ldr	r3, [fp, #-16]
  129bc0:	e3a02001 	mov	r2, #1
  129bc4:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
  129bc8:	ea000002 	b	129bd8 <eth_device_linkchange+0x6c>
    else
        dev->link_status = 0x00;
  129bcc:	e51b3010 	ldr	r3, [fp, #-16]
  129bd0:	e3a02000 	mov	r2, #0
  129bd4:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
    // rt_hw_interrupt_enable(level);
    
    // rt_uint32_t level;
    // level = rt_hw_interrupt_disable();
    int status = dev->link_status;
  129bd8:	e51b3010 	ldr	r3, [fp, #-16]
  129bdc:	e5d3306f 	ldrb	r3, [r3, #111]	; 0x6f
  129be0:	e50b3008 	str	r3, [fp, #-8]
    dev->link_changed = 0x00;
  129be4:	e51b3010 	ldr	r3, [fp, #-16]
  129be8:	e3a02000 	mov	r2, #0
  129bec:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    // rt_hw_interrupt_enable(level);

    if (status)
  129bf0:	e51b3008 	ldr	r3, [fp, #-8]
  129bf4:	e3530000 	cmp	r3, #0
  129bf8:	0a000007 	beq	129c1c <eth_device_linkchange+0xb0>
        netifapi_netif_set_link_up(dev->netif);
  129bfc:	e51b3010 	ldr	r3, [fp, #-16]
  129c00:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129c04:	e3a02000 	mov	r2, #0
  129c08:	e3091be0 	movw	r1, #39904	; 0x9be0
  129c0c:	e3401011 	movt	r1, #17
  129c10:	e1a00003 	mov	r0, r3
  129c14:	ebff9c79 	bl	110e00 <netifapi_netif_common>
  129c18:	ea000006 	b	129c38 <eth_device_linkchange+0xcc>
    else
        netifapi_netif_set_link_down(dev->netif);
  129c1c:	e51b3010 	ldr	r3, [fp, #-16]
  129c20:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129c24:	e3a02000 	mov	r2, #0
  129c28:	e3091c90 	movw	r1, #40080	; 0x9c90
  129c2c:	e3401011 	movt	r1, #17
  129c30:	e1a00003 	mov	r0, r3
  129c34:	ebff9c71 	bl	110e00 <netifapi_netif_common>

    return RT_EOK;
  129c38:	e3a03000 	mov	r3, #0
}
  129c3c:	e1a00003 	mov	r0, r3
  129c40:	e24bd004 	sub	sp, fp, #4
  129c44:	e8bd8800 	pop	{fp, pc}

00129c48 <eth_rx_thread_entry>:
#ifndef LWIP_NO_RX_THREAD

/* Ethernet Rx Thread */
extern void* ueth_rx_interrupt_detect(void);
static void eth_rx_thread_entry(void* parameter)
{
  129c48:	e92d4800 	push	{fp, lr}
  129c4c:	e28db004 	add	fp, sp, #4
  129c50:	e24dd010 	sub	sp, sp, #16
  129c54:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device* device;
    struct pbuf *p;

    while (!eth_init_done)
  129c58:	ea000001 	b	129c64 <eth_rx_thread_entry+0x1c>
    {
        rt_thread_mdelay(10);
  129c5c:	e3a0000a 	mov	r0, #10
  129c60:	ebff6085 	bl	101e7c <rt_thread_mdelay>
    while (!eth_init_done)
  129c64:	e30e3c14 	movw	r3, #60436	; 0xec14
  129c68:	e3403014 	movt	r3, #20
  129c6c:	e5933000 	ldr	r3, [r3]
  129c70:	e3530000 	cmp	r3, #0
  129c74:	0afffff8 	beq	129c5c <eth_rx_thread_entry+0x14>
    }

    while (1)
    {
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  129c78:	eb002e61 	bl	135604 <ueth_rx_interrupt_detect>
  129c7c:	e50b0008 	str	r0, [fp, #-8]
        if(device->eth_rx == RT_NULL) break;
  129c80:	e51b3008 	ldr	r3, [fp, #-8]
  129c84:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  129c88:	e3530000 	cmp	r3, #0
  129c8c:	0a00001a 	beq	129cfc <eth_rx_thread_entry+0xb4>

        /* receive all of buffer */
        while (1)
        {
            p = device->eth_rx(&(device->parent));
  129c90:	e51b3008 	ldr	r3, [fp, #-8]
  129c94:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  129c98:	e51b2008 	ldr	r2, [fp, #-8]
  129c9c:	e1a00002 	mov	r0, r2
  129ca0:	e12fff33 	blx	r3
  129ca4:	e50b000c 	str	r0, [fp, #-12]
            if (p != RT_NULL)
  129ca8:	e51b300c 	ldr	r3, [fp, #-12]
  129cac:	e3530000 	cmp	r3, #0
  129cb0:	0a00000f 	beq	129cf4 <eth_rx_thread_entry+0xac>
            {
                /* notify to upper layer */
                if(device->netif->input(p, device->netif) != ERR_OK)
  129cb4:	e51b3008 	ldr	r3, [fp, #-8]
  129cb8:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129cbc:	e5933010 	ldr	r3, [r3, #16]
  129cc0:	e51b2008 	ldr	r2, [fp, #-8]
  129cc4:	e5922044 	ldr	r2, [r2, #68]	; 0x44
  129cc8:	e1a01002 	mov	r1, r2
  129ccc:	e51b000c 	ldr	r0, [fp, #-12]
  129cd0:	e12fff33 	blx	r3
  129cd4:	e1a03000 	mov	r3, r0
  129cd8:	e3530000 	cmp	r3, #0
  129cdc:	0affffeb 	beq	129c90 <eth_rx_thread_entry+0x48>
                {
                    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: Input error\n"));
                    pbuf_free(p);
  129ce0:	e51b000c 	ldr	r0, [fp, #-12]
  129ce4:	ebffc462 	bl	11ae74 <pbuf_free>
                    p = NULL;
  129ce8:	e3a03000 	mov	r3, #0
  129cec:	e50b300c 	str	r3, [fp, #-12]
            p = device->eth_rx(&(device->parent));
  129cf0:	eaffffe6 	b	129c90 <eth_rx_thread_entry+0x48>
                }
            }
            else break;
  129cf4:	e320f000 	nop	{0}
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  129cf8:	eaffffde 	b	129c78 <eth_rx_thread_entry+0x30>
        if(device->eth_rx == RT_NULL) break;
  129cfc:	e320f000 	nop	{0}
        }
    }
}
  129d00:	e320f000 	nop	{0}
  129d04:	e24bd004 	sub	sp, fp, #4
  129d08:	e8bd8800 	pop	{fp, pc}

00129d0c <eth_system_device_init>:
/* this function does not need, 
 * use eth_system_device_init_private() 
 * call by lwip_system_init(). 
 */
int eth_system_device_init(void)
{
  129d0c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  129d10:	e28db000 	add	fp, sp, #0
    return 0;
  129d14:	e3a03000 	mov	r3, #0
}
  129d18:	e1a00003 	mov	r0, r3
  129d1c:	e28bd000 	add	sp, fp, #0
  129d20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  129d24:	e12fff1e 	bx	lr

00129d28 <eth_system_device_init_private>:
int eth_system_device_init_private(void)
{
  129d28:	e92d4800 	push	{fp, lr}
  129d2c:	e28db004 	add	fp, sp, #4
  129d30:	e24dd010 	sub	sp, sp, #16
    rt_err_t result = RT_EOK;
  129d34:	e3a03000 	mov	r3, #0
  129d38:	e50b3008 	str	r3, [fp, #-8]

    /* initialize Rx thread. */
#ifndef LWIP_NO_RX_THREAD
    /* initialize mailbox and create Ethernet Rx thread */
    result = rt_mb_init(&eth_rx_thread_mb, "erxmb",
  129d3c:	e3a03000 	mov	r3, #0
  129d40:	e58d3000 	str	r3, [sp]
  129d44:	e3a03c01 	mov	r3, #256	; 0x100
  129d48:	e30e26ec 	movw	r2, #59116	; 0xe6ec
  129d4c:	e3402014 	movt	r2, #20
  129d50:	e3081c10 	movw	r1, #35856	; 0x8c10
  129d54:	e3401014 	movt	r1, #20
  129d58:	e30e06b8 	movw	r0, #59064	; 0xe6b8
  129d5c:	e3400014 	movt	r0, #20
  129d60:	ebff5d9a 	bl	1013d0 <rt_mb_init>
  129d64:	e50b0008 	str	r0, [fp, #-8]
                        &eth_rx_thread_mb_pool[0], sizeof(eth_rx_thread_mb_pool)/sizeof(void *),
                        RT_IPC_FLAG_FIFO);
    RT_ASSERT(result == RT_EOK);
  129d68:	e51b3008 	ldr	r3, [fp, #-8]
  129d6c:	e3530000 	cmp	r3, #0
  129d70:	0a000005 	beq	129d8c <eth_system_device_init_private+0x64>
  129d74:	e300238e 	movw	r2, #910	; 0x38e
  129d78:	e3081cf0 	movw	r1, #36080	; 0x8cf0
  129d7c:	e3401014 	movt	r1, #20
  129d80:	e3080c18 	movw	r0, #35864	; 0x8c18
  129d84:	e3400014 	movt	r0, #20
  129d88:	ebff6602 	bl	103598 <rt_assert_handler>

    rt_thread_t erx_tid = rt_thread_create("erx", eth_rx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, 25, 16);
  129d8c:	e3a03010 	mov	r3, #16
  129d90:	e58d3004 	str	r3, [sp, #4]
  129d94:	e3a03019 	mov	r3, #25
  129d98:	e58d3000 	str	r3, [sp]
  129d9c:	e3a03a02 	mov	r3, #8192	; 0x2000
  129da0:	e3a02000 	mov	r2, #0
  129da4:	e3091c48 	movw	r1, #40008	; 0x9c48
  129da8:	e3401012 	movt	r1, #18
  129dac:	e3080c2c 	movw	r0, #35884	; 0x8c2c
  129db0:	e3400014 	movt	r0, #20
  129db4:	ebff60ce 	bl	1020f4 <rt_thread_create>
  129db8:	e50b000c 	str	r0, [fp, #-12]
    // rt_thread_t erx_tid = rt_thread_create("erx", eth_rx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, 30, 16);
    result = rt_thread_startup(erx_tid);
  129dbc:	e51b000c 	ldr	r0, [fp, #-12]
  129dc0:	ebff6100 	bl	1021c8 <rt_thread_startup>
  129dc4:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(result == RT_EOK);
  129dc8:	e51b3008 	ldr	r3, [fp, #-8]
  129dcc:	e3530000 	cmp	r3, #0
  129dd0:	0a000005 	beq	129dec <eth_system_device_init_private+0xc4>
  129dd4:	e3002393 	movw	r2, #915	; 0x393
  129dd8:	e3081cf0 	movw	r1, #36080	; 0x8cf0
  129ddc:	e3401014 	movt	r1, #20
  129de0:	e3080c18 	movw	r0, #35864	; 0x8c18
  129de4:	e3400014 	movt	r0, #20
  129de8:	ebff65ea 	bl	103598 <rt_assert_handler>
#endif

    /* initialize Tx thread */
#ifndef LWIP_NO_TX_THREAD
    /* initialize mailbox and create Ethernet Tx thread */
    result = rt_mb_init(&eth_tx_thread_mb, "etxmb",
  129dec:	e3a03000 	mov	r3, #0
  129df0:	e58d3000 	str	r3, [sp]
  129df4:	e3a03c01 	mov	r3, #256	; 0x100
  129df8:	e30e22b8 	movw	r2, #58040	; 0xe2b8
  129dfc:	e3402014 	movt	r2, #20
  129e00:	e3081c30 	movw	r1, #35888	; 0x8c30
  129e04:	e3401014 	movt	r1, #20
  129e08:	e30e0284 	movw	r0, #57988	; 0xe284
  129e0c:	e3400014 	movt	r0, #20
  129e10:	ebff5d6e 	bl	1013d0 <rt_mb_init>
  129e14:	e50b0008 	str	r0, [fp, #-8]
                        &eth_tx_thread_mb_pool[0], sizeof(eth_tx_thread_mb_pool)/sizeof(void *),
                        RT_IPC_FLAG_FIFO);
    RT_ASSERT(result == RT_EOK);
  129e18:	e51b3008 	ldr	r3, [fp, #-8]
  129e1c:	e3530000 	cmp	r3, #0
  129e20:	0a000005 	beq	129e3c <eth_system_device_init_private+0x114>
  129e24:	e30023a3 	movw	r2, #931	; 0x3a3
  129e28:	e3081cf0 	movw	r1, #36080	; 0x8cf0
  129e2c:	e3401014 	movt	r1, #20
  129e30:	e3080c18 	movw	r0, #35864	; 0x8c18
  129e34:	e3400014 	movt	r0, #20
  129e38:	ebff65d6 	bl	103598 <rt_assert_handler>

    // rt_thread_t etx_tid = rt_thread_create("etx", eth_tx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, RT_ETHERNETIF_THREAD_PREORITY, 16);
    // result = rt_thread_startup(etx_tid);
    // RT_ASSERT(result == RT_EOK);
#endif
    return (int)result;
  129e3c:	e51b3008 	ldr	r3, [fp, #-8]
}
  129e40:	e1a00003 	mov	r0, r3
  129e44:	e24bd004 	sub	sp, fp, #4
  129e48:	e8bd8800 	pop	{fp, pc}

00129e4c <set_if>:

void set_if(char* netif_name, char* ip_addr, char* gw_addr, char* nm_addr)
{
  129e4c:	e92d4800 	push	{fp, lr}
  129e50:	e28db004 	add	fp, sp, #4
  129e54:	e24dd020 	sub	sp, sp, #32
  129e58:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  129e5c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  129e60:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  129e64:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    ip4_addr_t *ip;
    ip4_addr_t addr;
    struct netif * netif = netif_list;
  129e68:	e30c3a3c 	movw	r3, #51772	; 0xca3c
  129e6c:	e3403015 	movt	r3, #21
  129e70:	e5933000 	ldr	r3, [r3]
  129e74:	e50b3008 	str	r3, [fp, #-8]

    if(strlen(netif_name) > sizeof(netif->name))
  129e78:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129e7c:	eb005d7f 	bl	141480 <strlen>
  129e80:	e1a03000 	mov	r3, r0
  129e84:	e3530002 	cmp	r3, #2
  129e88:	9a000017 	bls	129eec <set_if+0xa0>
    {
        rt_kprintf("network interface name too long!\r\n");
  129e8c:	e3080c38 	movw	r0, #35896	; 0x8c38
  129e90:	e3400014 	movt	r0, #20
  129e94:	ebff649e 	bl	103114 <rt_kprintf>
        return;
  129e98:	ea000041 	b	129fa4 <set_if+0x158>
    }

    while(netif != RT_NULL)
    {
        if(strncmp(netif_name, netif->name, sizeof(netif->name)) == 0)
  129e9c:	e51b3008 	ldr	r3, [fp, #-8]
  129ea0:	e2833042 	add	r3, r3, #66	; 0x42
  129ea4:	e3a02002 	mov	r2, #2
  129ea8:	e1a01003 	mov	r1, r3
  129eac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129eb0:	eb005d9e 	bl	141530 <strncmp>
  129eb4:	e1a03000 	mov	r3, r0
  129eb8:	e3530000 	cmp	r3, #0
  129ebc:	0a00000e 	beq	129efc <set_if+0xb0>
            break;

        netif = netif->next;
  129ec0:	e51b3008 	ldr	r3, [fp, #-8]
  129ec4:	e5933000 	ldr	r3, [r3]
  129ec8:	e50b3008 	str	r3, [fp, #-8]
        if( netif == RT_NULL )
  129ecc:	e51b3008 	ldr	r3, [fp, #-8]
  129ed0:	e3530000 	cmp	r3, #0
  129ed4:	1a000004 	bne	129eec <set_if+0xa0>
        {
            rt_kprintf("network interface: %s not found!\r\n", netif_name);
  129ed8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  129edc:	e3080c5c 	movw	r0, #35932	; 0x8c5c
  129ee0:	e3400014 	movt	r0, #20
  129ee4:	ebff648a 	bl	103114 <rt_kprintf>
            return;
  129ee8:	ea00002d 	b	129fa4 <set_if+0x158>
    while(netif != RT_NULL)
  129eec:	e51b3008 	ldr	r3, [fp, #-8]
  129ef0:	e3530000 	cmp	r3, #0
  129ef4:	1affffe8 	bne	129e9c <set_if+0x50>
  129ef8:	ea000000 	b	129f00 <set_if+0xb4>
            break;
  129efc:	e320f000 	nop	{0}
        }
    }

    ip = (ip4_addr_t *)&addr;
  129f00:	e24b3010 	sub	r3, fp, #16
  129f04:	e50b300c 	str	r3, [fp, #-12]

    /* set ip address */
    if ((ip_addr != RT_NULL) && ip4addr_aton(ip_addr, &addr))
  129f08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  129f0c:	e3530000 	cmp	r3, #0
  129f10:	0a000009 	beq	129f3c <set_if+0xf0>
  129f14:	e24b3010 	sub	r3, fp, #16
  129f18:	e1a01003 	mov	r1, r3
  129f1c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  129f20:	eb0021e1 	bl	1326ac <ip4addr_aton>
  129f24:	e1a03000 	mov	r3, r0
  129f28:	e3530000 	cmp	r3, #0
  129f2c:	0a000002 	beq	129f3c <set_if+0xf0>
    {
        netif_set_ipaddr(netif, ip);
  129f30:	e51b100c 	ldr	r1, [fp, #-12]
  129f34:	e51b0008 	ldr	r0, [fp, #-8]
  129f38:	ebffbe0e 	bl	119778 <netif_set_ipaddr>
    }

    /* set gateway address */
    if ((gw_addr != RT_NULL) && ip4addr_aton(gw_addr, &addr))
  129f3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129f40:	e3530000 	cmp	r3, #0
  129f44:	0a000009 	beq	129f70 <set_if+0x124>
  129f48:	e24b3010 	sub	r3, fp, #16
  129f4c:	e1a01003 	mov	r1, r3
  129f50:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  129f54:	eb0021d4 	bl	1326ac <ip4addr_aton>
  129f58:	e1a03000 	mov	r3, r0
  129f5c:	e3530000 	cmp	r3, #0
  129f60:	0a000002 	beq	129f70 <set_if+0x124>
    {
        netif_set_gw(netif, ip);
  129f64:	e51b100c 	ldr	r1, [fp, #-12]
  129f68:	e51b0008 	ldr	r0, [fp, #-8]
  129f6c:	ebffbe48 	bl	119894 <netif_set_gw>
    }

    /* set netmask address */
    if ((nm_addr != RT_NULL) && ip4addr_aton(nm_addr, &addr))
  129f70:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129f74:	e3530000 	cmp	r3, #0
  129f78:	0a000009 	beq	129fa4 <set_if+0x158>
  129f7c:	e24b3010 	sub	r3, fp, #16
  129f80:	e1a01003 	mov	r1, r3
  129f84:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  129f88:	eb0021c7 	bl	1326ac <ip4addr_aton>
  129f8c:	e1a03000 	mov	r3, r0
  129f90:	e3530000 	cmp	r3, #0
  129f94:	0a000002 	beq	129fa4 <set_if+0x158>
    {
        netif_set_netmask(netif, ip);
  129f98:	e51b100c 	ldr	r1, [fp, #-12]
  129f9c:	e51b0008 	ldr	r0, [fp, #-8]
  129fa0:	ebffbe54 	bl	1198f8 <netif_set_netmask>
    }
}
  129fa4:	e24bd004 	sub	sp, fp, #4
  129fa8:	e8bd8800 	pop	{fp, pc}

00129fac <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
  129fac:	e92d4800 	push	{fp, lr}
  129fb0:	e28db004 	add	fp, sp, #4
  if (dhcp_pcb_refcount == 0) {
  129fb4:	e30e3af0 	movw	r3, #60144	; 0xeaf0
  129fb8:	e3403014 	movt	r3, #20
  129fbc:	e5d33000 	ldrb	r3, [r3]
  129fc0:	e3530000 	cmp	r3, #0
  129fc4:	1a000039 	bne	12a0b0 <dhcp_inc_pcb_refcount+0x104>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
  129fc8:	e30e3aec 	movw	r3, #60140	; 0xeaec
  129fcc:	e3403014 	movt	r3, #20
  129fd0:	e5933000 	ldr	r3, [r3]
  129fd4:	e3530000 	cmp	r3, #0
  129fd8:	0a000006 	beq	129ff8 <dhcp_inc_pcb_refcount+0x4c>
  129fdc:	e3080d10 	movw	r0, #36112	; 0x8d10
  129fe0:	e3400014 	movt	r0, #20
  129fe4:	ebff644a 	bl	103114 <rt_kprintf>
  129fe8:	e3a010db 	mov	r1, #219	; 0xdb
  129fec:	e3080d38 	movw	r0, #36152	; 0x8d38
  129ff0:	e3400014 	movt	r0, #20
  129ff4:	ebff842e 	bl	10b0b4 <sys_arch_assert>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
  129ff8:	ebfffaa1 	bl	128a84 <udp_new>
  129ffc:	e1a02000 	mov	r2, r0
  12a000:	e30e3aec 	movw	r3, #60140	; 0xeaec
  12a004:	e3403014 	movt	r3, #20
  12a008:	e5832000 	str	r2, [r3]

    if (dhcp_pcb == NULL) {
  12a00c:	e30e3aec 	movw	r3, #60140	; 0xeaec
  12a010:	e3403014 	movt	r3, #20
  12a014:	e5933000 	ldr	r3, [r3]
  12a018:	e3530000 	cmp	r3, #0
  12a01c:	1a000001 	bne	12a028 <dhcp_inc_pcb_refcount+0x7c>
      return ERR_MEM;
  12a020:	e3e03000 	mvn	r3, #0
  12a024:	ea00002a 	b	12a0d4 <dhcp_inc_pcb_refcount+0x128>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
  12a028:	e30e3aec 	movw	r3, #60140	; 0xeaec
  12a02c:	e3403014 	movt	r3, #20
  12a030:	e5933000 	ldr	r3, [r3]
  12a034:	e5d32008 	ldrb	r2, [r3, #8]
  12a038:	e30e3aec 	movw	r3, #60140	; 0xeaec
  12a03c:	e3403014 	movt	r3, #20
  12a040:	e5933000 	ldr	r3, [r3]
  12a044:	e3822020 	orr	r2, r2, #32
  12a048:	e6ef2072 	uxtb	r2, r2
  12a04c:	e5c32008 	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
  12a050:	e30e3aec 	movw	r3, #60140	; 0xeaec
  12a054:	e3403014 	movt	r3, #20
  12a058:	e5933000 	ldr	r3, [r3]
  12a05c:	e3a02044 	mov	r2, #68	; 0x44
  12a060:	e30918d0 	movw	r1, #39120	; 0x98d0
  12a064:	e3401014 	movt	r1, #20
  12a068:	e1a00003 	mov	r0, r3
  12a06c:	ebfff969 	bl	128618 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
  12a070:	e30e3aec 	movw	r3, #60140	; 0xeaec
  12a074:	e3403014 	movt	r3, #20
  12a078:	e5933000 	ldr	r3, [r3]
  12a07c:	e3a02043 	mov	r2, #67	; 0x43
  12a080:	e30918d0 	movw	r1, #39120	; 0x98d0
  12a084:	e3401014 	movt	r1, #20
  12a088:	e1a00003 	mov	r0, r3
  12a08c:	ebfff9d7 	bl	1287f0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
  12a090:	e30e3aec 	movw	r3, #60140	; 0xeaec
  12a094:	e3403014 	movt	r3, #20
  12a098:	e5933000 	ldr	r3, [r3]
  12a09c:	e3a02000 	mov	r2, #0
  12a0a0:	e30c1d14 	movw	r1, #52500	; 0xcd14
  12a0a4:	e3401012 	movt	r1, #18
  12a0a8:	e1a00003 	mov	r0, r3
  12a0ac:	ebfffa33 	bl	128980 <udp_recv>
  }

  dhcp_pcb_refcount++;
  12a0b0:	e30e3af0 	movw	r3, #60144	; 0xeaf0
  12a0b4:	e3403014 	movt	r3, #20
  12a0b8:	e5d33000 	ldrb	r3, [r3]
  12a0bc:	e2833001 	add	r3, r3, #1
  12a0c0:	e6ef2073 	uxtb	r2, r3
  12a0c4:	e30e3af0 	movw	r3, #60144	; 0xeaf0
  12a0c8:	e3403014 	movt	r3, #20
  12a0cc:	e5c32000 	strb	r2, [r3]

  return ERR_OK;
  12a0d0:	e3a03000 	mov	r3, #0
}
  12a0d4:	e1a00003 	mov	r0, r3
  12a0d8:	e8bd8800 	pop	{fp, pc}

0012a0dc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
  12a0dc:	e92d4800 	push	{fp, lr}
  12a0e0:	e28db004 	add	fp, sp, #4
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
  12a0e4:	e30e3af0 	movw	r3, #60144	; 0xeaf0
  12a0e8:	e3403014 	movt	r3, #20
  12a0ec:	e5d33000 	ldrb	r3, [r3]
  12a0f0:	e3530000 	cmp	r3, #0
  12a0f4:	1a000006 	bne	12a114 <dhcp_dec_pcb_refcount+0x38>
  12a0f8:	e3080d6c 	movw	r0, #36204	; 0x8d6c
  12a0fc:	e3400014 	movt	r0, #20
  12a100:	ebff6403 	bl	103114 <rt_kprintf>
  12a104:	e3a010f5 	mov	r1, #245	; 0xf5
  12a108:	e3080d38 	movw	r0, #36152	; 0x8d38
  12a10c:	e3400014 	movt	r0, #20
  12a110:	ebff83e7 	bl	10b0b4 <sys_arch_assert>
  dhcp_pcb_refcount--;
  12a114:	e30e3af0 	movw	r3, #60144	; 0xeaf0
  12a118:	e3403014 	movt	r3, #20
  12a11c:	e5d33000 	ldrb	r3, [r3]
  12a120:	e2433001 	sub	r3, r3, #1
  12a124:	e6ef2073 	uxtb	r2, r3
  12a128:	e30e3af0 	movw	r3, #60144	; 0xeaf0
  12a12c:	e3403014 	movt	r3, #20
  12a130:	e5c32000 	strb	r2, [r3]

  if (dhcp_pcb_refcount == 0) {
  12a134:	e30e3af0 	movw	r3, #60144	; 0xeaf0
  12a138:	e3403014 	movt	r3, #20
  12a13c:	e5d33000 	ldrb	r3, [r3]
  12a140:	e3530000 	cmp	r3, #0
  12a144:	1a000008 	bne	12a16c <dhcp_dec_pcb_refcount+0x90>
    udp_remove(dhcp_pcb);
  12a148:	e30e3aec 	movw	r3, #60140	; 0xeaec
  12a14c:	e3403014 	movt	r3, #20
  12a150:	e5933000 	ldr	r3, [r3]
  12a154:	e1a00003 	mov	r0, r3
  12a158:	ebfffa18 	bl	1289c0 <udp_remove>
    dhcp_pcb = NULL;
  12a15c:	e30e3aec 	movw	r3, #60140	; 0xeaec
  12a160:	e3403014 	movt	r3, #20
  12a164:	e3a02000 	mov	r2, #0
  12a168:	e5832000 	str	r2, [r3]
  }
}
  12a16c:	e320f000 	nop	{0}
  12a170:	e8bd8800 	pop	{fp, pc}

0012a174 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
  12a174:	e92d4800 	push	{fp, lr}
  12a178:	e28db004 	add	fp, sp, #4
  12a17c:	e24dd010 	sub	sp, sp, #16
  12a180:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a184:	e51b3010 	ldr	r3, [fp, #-16]
  12a188:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a18c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  12a190:	e3a0100c 	mov	r1, #12
  12a194:	e51b0008 	ldr	r0, [fp, #-8]
  12a198:	eb00076b 	bl	12bf4c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  12a19c:	e30938d0 	movw	r3, #39120	; 0x98d0
  12a1a0:	e3403014 	movt	r3, #20
  12a1a4:	e30928d0 	movw	r2, #39120	; 0x98d0
  12a1a8:	e3402014 	movt	r2, #20
  12a1ac:	e30918d0 	movw	r1, #39120	; 0x98d0
  12a1b0:	e3401014 	movt	r1, #20
  12a1b4:	e51b0010 	ldr	r0, [fp, #-16]
  12a1b8:	ebffbcbf 	bl	1194bc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
  12a1bc:	e51b0010 	ldr	r0, [fp, #-16]
  12a1c0:	eb000420 	bl	12b248 <dhcp_discover>
}
  12a1c4:	e320f000 	nop	{0}
  12a1c8:	e24bd004 	sub	sp, fp, #4
  12a1cc:	e8bd8800 	pop	{fp, pc}

0012a1d0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
  12a1d0:	e92d4800 	push	{fp, lr}
  12a1d4:	e28db004 	add	fp, sp, #4
  12a1d8:	e24dd010 	sub	sp, sp, #16
  12a1dc:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a1e0:	e51b3010 	ldr	r3, [fp, #-16]
  12a1e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a1e8:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
  12a1ec:	e3a01008 	mov	r1, #8
  12a1f0:	e51b0008 	ldr	r0, [fp, #-8]
  12a1f4:	eb000754 	bl	12bf4c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
  12a1f8:	e51b3008 	ldr	r3, [fp, #-8]
  12a1fc:	e2833028 	add	r3, r3, #40	; 0x28
  12a200:	e3a02000 	mov	r2, #0
  12a204:	e1a01003 	mov	r1, r3
  12a208:	e51b0010 	ldr	r0, [fp, #-16]
  12a20c:	eb0012a0 	bl	12ec94 <etharp_query>
  12a210:	e1a03000 	mov	r3, r0
  12a214:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
  12a218:	e51b3008 	ldr	r3, [fp, #-8]
  12a21c:	e5d3300a 	ldrb	r3, [r3, #10]
  12a220:	e35300ff 	cmp	r3, #255	; 0xff
  12a224:	0a000005 	beq	12a240 <dhcp_check+0x70>
    dhcp->tries++;
  12a228:	e51b3008 	ldr	r3, [fp, #-8]
  12a22c:	e5d3300a 	ldrb	r3, [r3, #10]
  12a230:	e2833001 	add	r3, r3, #1
  12a234:	e6ef2073 	uxtb	r2, r3
  12a238:	e51b3008 	ldr	r3, [fp, #-8]
  12a23c:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 500;
  12a240:	e3a03f7d 	mov	r3, #500	; 0x1f4
  12a244:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12a248:	e15b30bc 	ldrh	r3, [fp, #-12]
  12a24c:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12a250:	e2833003 	add	r3, r3, #3
  12a254:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12a258:	e3412062 	movt	r2, #4194	; 0x1062
  12a25c:	e0c10293 	smull	r0, r1, r3, r2
  12a260:	e1a022c1 	asr	r2, r1, #5
  12a264:	e1a03fc3 	asr	r3, r3, #31
  12a268:	e0423003 	sub	r3, r2, r3
  12a26c:	e6ff2073 	uxth	r2, r3
  12a270:	e51b3008 	ldr	r3, [fp, #-8]
  12a274:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
  12a278:	e320f000 	nop	{0}
  12a27c:	e24bd004 	sub	sp, fp, #4
  12a280:	e8bd8800 	pop	{fp, pc}

0012a284 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
  12a284:	e92d4800 	push	{fp, lr}
  12a288:	e28db004 	add	fp, sp, #4
  12a28c:	e24dd010 	sub	sp, sp, #16
  12a290:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a294:	e51b3010 	ldr	r3, [fp, #-16]
  12a298:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a29c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
  12a2a0:	e30c3c54 	movw	r3, #52308	; 0xcc54
  12a2a4:	e3403015 	movt	r3, #21
  12a2a8:	e5d33002 	ldrb	r3, [r3, #2]
  12a2ac:	e3530000 	cmp	r3, #0
  12a2b0:	0a00000e 	beq	12a2f0 <dhcp_handle_offer+0x6c>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
  12a2b4:	e30c3c60 	movw	r3, #52320	; 0xcc60
  12a2b8:	e3403015 	movt	r3, #21
  12a2bc:	e5933008 	ldr	r3, [r3, #8]
  12a2c0:	e1a00003 	mov	r0, r3
  12a2c4:	ebffb0bf 	bl	1165c8 <lwip_htonl>
  12a2c8:	e1a02000 	mov	r2, r0
  12a2cc:	e51b3008 	ldr	r3, [fp, #-8]
  12a2d0:	e5832024 	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  12a2d4:	e51b3008 	ldr	r3, [fp, #-8]
  12a2d8:	e5933004 	ldr	r3, [r3, #4]
  12a2dc:	e5932010 	ldr	r2, [r3, #16]
  12a2e0:	e51b3008 	ldr	r3, [fp, #-8]
  12a2e4:	e5832028 	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
  12a2e8:	e51b0010 	ldr	r0, [fp, #-16]
  12a2ec:	eb000002 	bl	12a2fc <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
  12a2f0:	e320f000 	nop	{0}
  12a2f4:	e24bd004 	sub	sp, fp, #4
  12a2f8:	e8bd8800 	pop	{fp, pc}

0012a2fc <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
  12a2fc:	e92d4800 	push	{fp, lr}
  12a300:	e28db004 	add	fp, sp, #4
  12a304:	e24dd020 	sub	sp, sp, #32
  12a308:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a30c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a310:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a314:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
  12a318:	e3a01001 	mov	r1, #1
  12a31c:	e51b000c 	ldr	r0, [fp, #-12]
  12a320:	eb000709 	bl	12bf4c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12a324:	e3a02003 	mov	r2, #3
  12a328:	e51b100c 	ldr	r1, [fp, #-12]
  12a32c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12a330:	eb000b35 	bl	12d00c <dhcp_create_msg>
  12a334:	e1a03000 	mov	r3, r0
  12a338:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12a33c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12a340:	e3530000 	cmp	r3, #0
  12a344:	1a000052 	bne	12a494 <dhcp_select+0x198>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12a348:	e3a02002 	mov	r2, #2
  12a34c:	e3a01039 	mov	r1, #57	; 0x39
  12a350:	e51b000c 	ldr	r0, [fp, #-12]
  12a354:	eb000714 	bl	12bfac <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12a358:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a35c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12a360:	e1a01003 	mov	r1, r3
  12a364:	e51b000c 	ldr	r0, [fp, #-12]
  12a368:	eb00075e 	bl	12c0e8 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12a36c:	e3a02004 	mov	r2, #4
  12a370:	e3a01032 	mov	r1, #50	; 0x32
  12a374:	e51b000c 	ldr	r0, [fp, #-12]
  12a378:	eb00070b 	bl	12bfac <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12a37c:	e51b300c 	ldr	r3, [fp, #-12]
  12a380:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a384:	e1a00003 	mov	r0, r3
  12a388:	ebffb08e 	bl	1165c8 <lwip_htonl>
  12a38c:	e1a03000 	mov	r3, r0
  12a390:	e1a01003 	mov	r1, r3
  12a394:	e51b000c 	ldr	r0, [fp, #-12]
  12a398:	eb000783 	bl	12c1ac <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  12a39c:	e3a02004 	mov	r2, #4
  12a3a0:	e3a01036 	mov	r1, #54	; 0x36
  12a3a4:	e51b000c 	ldr	r0, [fp, #-12]
  12a3a8:	eb0006ff 	bl	12bfac <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
  12a3ac:	e51b300c 	ldr	r3, [fp, #-12]
  12a3b0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12a3b4:	e1a00003 	mov	r0, r3
  12a3b8:	ebffb082 	bl	1165c8 <lwip_htonl>
  12a3bc:	e1a03000 	mov	r3, r0
  12a3c0:	e1a01003 	mov	r1, r3
  12a3c4:	e51b000c 	ldr	r0, [fp, #-12]
  12a3c8:	eb000777 	bl	12c1ac <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12a3cc:	e3a02004 	mov	r2, #4
  12a3d0:	e3a01037 	mov	r1, #55	; 0x37
  12a3d4:	e51b000c 	ldr	r0, [fp, #-12]
  12a3d8:	eb0006f3 	bl	12bfac <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12a3dc:	e3a03000 	mov	r3, #0
  12a3e0:	e54b3005 	strb	r3, [fp, #-5]
  12a3e4:	ea000009 	b	12a410 <dhcp_select+0x114>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12a3e8:	e55b2005 	ldrb	r2, [fp, #-5]
  12a3ec:	e30d303c 	movw	r3, #53308	; 0xd03c
  12a3f0:	e3403014 	movt	r3, #20
  12a3f4:	e7d33002 	ldrb	r3, [r3, r2]
  12a3f8:	e1a01003 	mov	r1, r3
  12a3fc:	e51b000c 	ldr	r0, [fp, #-12]
  12a400:	eb000719 	bl	12c06c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12a404:	e55b3005 	ldrb	r3, [fp, #-5]
  12a408:	e2833001 	add	r3, r3, #1
  12a40c:	e54b3005 	strb	r3, [fp, #-5]
  12a410:	e55b3005 	ldrb	r3, [fp, #-5]
  12a414:	e3530003 	cmp	r3, #3
  12a418:	9afffff2 	bls	12a3e8 <dhcp_select+0xec>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12a41c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12a420:	e51b000c 	ldr	r0, [fp, #-12]
  12a424:	eb0007ab 	bl	12c2d8 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12a428:	e51b000c 	ldr	r0, [fp, #-12]
  12a42c:	eb000c63 	bl	12d5c0 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12a430:	e51b300c 	ldr	r3, [fp, #-12]
  12a434:	e593200c 	ldr	r2, [r3, #12]
  12a438:	e51b300c 	ldr	r3, [fp, #-12]
  12a43c:	e1d331b4 	ldrh	r3, [r3, #20]
  12a440:	e28330f0 	add	r3, r3, #240	; 0xf0
  12a444:	e6ff3073 	uxth	r3, r3
  12a448:	e1a01003 	mov	r1, r3
  12a44c:	e1a00002 	mov	r0, r2
  12a450:	ebffc13e 	bl	11a950 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12a454:	e30e3aec 	movw	r3, #60140	; 0xeaec
  12a458:	e3403014 	movt	r3, #20
  12a45c:	e5930000 	ldr	r0, [r3]
  12a460:	e51b300c 	ldr	r3, [fp, #-12]
  12a464:	e593100c 	ldr	r1, [r3, #12]
  12a468:	e30938d0 	movw	r3, #39120	; 0x98d0
  12a46c:	e3403014 	movt	r3, #20
  12a470:	e58d3004 	str	r3, [sp, #4]
  12a474:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a478:	e58d3000 	str	r3, [sp]
  12a47c:	e3a03043 	mov	r3, #67	; 0x43
  12a480:	e30928d4 	movw	r2, #39124	; 0x98d4
  12a484:	e3402014 	movt	r2, #20
  12a488:	ebfff791 	bl	1282d4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12a48c:	e51b000c 	ldr	r0, [fp, #-12]
  12a490:	eb000c15 	bl	12d4ec <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12a494:	e51b300c 	ldr	r3, [fp, #-12]
  12a498:	e5d3300a 	ldrb	r3, [r3, #10]
  12a49c:	e35300ff 	cmp	r3, #255	; 0xff
  12a4a0:	0a000005 	beq	12a4bc <dhcp_select+0x1c0>
    dhcp->tries++;
  12a4a4:	e51b300c 	ldr	r3, [fp, #-12]
  12a4a8:	e5d3300a 	ldrb	r3, [r3, #10]
  12a4ac:	e2833001 	add	r3, r3, #1
  12a4b0:	e6ef2073 	uxtb	r2, r3
  12a4b4:	e51b300c 	ldr	r3, [fp, #-12]
  12a4b8:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12a4bc:	e51b300c 	ldr	r3, [fp, #-12]
  12a4c0:	e5d3300a 	ldrb	r3, [r3, #10]
  12a4c4:	e3530005 	cmp	r3, #5
  12a4c8:	8a000006 	bhi	12a4e8 <dhcp_select+0x1ec>
  12a4cc:	e51b300c 	ldr	r3, [fp, #-12]
  12a4d0:	e5d3300a 	ldrb	r3, [r3, #10]
  12a4d4:	e1a02003 	mov	r2, r3
  12a4d8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12a4dc:	e1a03213 	lsl	r3, r3, r2
  12a4e0:	e6ff3073 	uxth	r3, r3
  12a4e4:	ea000000 	b	12a4ec <dhcp_select+0x1f0>
  12a4e8:	e30e3a60 	movw	r3, #60000	; 0xea60
  12a4ec:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12a4f0:	e15b31b0 	ldrh	r3, [fp, #-16]
  12a4f4:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12a4f8:	e2833003 	add	r3, r3, #3
  12a4fc:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12a500:	e3412062 	movt	r2, #4194	; 0x1062
  12a504:	e0c10293 	smull	r0, r1, r3, r2
  12a508:	e1a022c1 	asr	r2, r1, #5
  12a50c:	e1a03fc3 	asr	r3, r3, #31
  12a510:	e0423003 	sub	r3, r2, r3
  12a514:	e6ff2073 	uxth	r2, r3
  12a518:	e51b300c 	ldr	r3, [fp, #-12]
  12a51c:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12a520:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12a524:	e1a00003 	mov	r0, r3
  12a528:	e24bd004 	sub	sp, fp, #4
  12a52c:	e8bd8800 	pop	{fp, pc}

0012a530 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
  12a530:	e92d4800 	push	{fp, lr}
  12a534:	e28db004 	add	fp, sp, #4
  12a538:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a53c:	e30c3a3c 	movw	r3, #51772	; 0xca3c
  12a540:	e3403015 	movt	r3, #21
  12a544:	e5933000 	ldr	r3, [r3]
  12a548:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
  12a54c:	ea00003e 	b	12a64c <dhcp_coarse_tmr+0x11c>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a550:	e51b3008 	ldr	r3, [fp, #-8]
  12a554:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a558:	e50b300c 	str	r3, [fp, #-12]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
  12a55c:	e51b300c 	ldr	r3, [fp, #-12]
  12a560:	e3530000 	cmp	r3, #0
  12a564:	0a000035 	beq	12a640 <dhcp_coarse_tmr+0x110>
  12a568:	e51b300c 	ldr	r3, [fp, #-12]
  12a56c:	e5d33009 	ldrb	r3, [r3, #9]
  12a570:	e3530000 	cmp	r3, #0
  12a574:	0a000031 	beq	12a640 <dhcp_coarse_tmr+0x110>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
  12a578:	e51b300c 	ldr	r3, [fp, #-12]
  12a57c:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a580:	e3530000 	cmp	r3, #0
  12a584:	0a000010 	beq	12a5cc <dhcp_coarse_tmr+0x9c>
  12a588:	e51b300c 	ldr	r3, [fp, #-12]
  12a58c:	e1d332b0 	ldrh	r3, [r3, #32]
  12a590:	e2833001 	add	r3, r3, #1
  12a594:	e6ff2073 	uxth	r2, r3
  12a598:	e51b300c 	ldr	r3, [fp, #-12]
  12a59c:	e1c322b0 	strh	r2, [r3, #32]
  12a5a0:	e51b300c 	ldr	r3, [fp, #-12]
  12a5a4:	e1d322b0 	ldrh	r2, [r3, #32]
  12a5a8:	e51b300c 	ldr	r3, [fp, #-12]
  12a5ac:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a5b0:	e1520003 	cmp	r2, r3
  12a5b4:	1a000004 	bne	12a5cc <dhcp_coarse_tmr+0x9c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
  12a5b8:	e51b0008 	ldr	r0, [fp, #-8]
  12a5bc:	eb0005bd 	bl	12bcb8 <dhcp_release>
        dhcp_discover(netif);
  12a5c0:	e51b0008 	ldr	r0, [fp, #-8]
  12a5c4:	eb00031f 	bl	12b248 <dhcp_discover>
  12a5c8:	ea00001c 	b	12a640 <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
  12a5cc:	e51b300c 	ldr	r3, [fp, #-12]
  12a5d0:	e1d331be 	ldrh	r3, [r3, #30]
  12a5d4:	e3530000 	cmp	r3, #0
  12a5d8:	0a00000a 	beq	12a608 <dhcp_coarse_tmr+0xd8>
  12a5dc:	e51b300c 	ldr	r3, [fp, #-12]
  12a5e0:	e1d331be 	ldrh	r3, [r3, #30]
  12a5e4:	e2432001 	sub	r2, r3, #1
  12a5e8:	e6ff1072 	uxth	r1, r2
  12a5ec:	e51b200c 	ldr	r2, [fp, #-12]
  12a5f0:	e1c211be 	strh	r1, [r2, #30]
  12a5f4:	e3530001 	cmp	r3, #1
  12a5f8:	1a000002 	bne	12a608 <dhcp_coarse_tmr+0xd8>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
  12a5fc:	e51b0008 	ldr	r0, [fp, #-8]
  12a600:	eb0000b1 	bl	12a8cc <dhcp_t2_timeout>
  12a604:	ea00000d 	b	12a640 <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
  12a608:	e51b300c 	ldr	r3, [fp, #-12]
  12a60c:	e1d331bc 	ldrh	r3, [r3, #28]
  12a610:	e3530000 	cmp	r3, #0
  12a614:	0a000009 	beq	12a640 <dhcp_coarse_tmr+0x110>
  12a618:	e51b300c 	ldr	r3, [fp, #-12]
  12a61c:	e1d331bc 	ldrh	r3, [r3, #28]
  12a620:	e2432001 	sub	r2, r3, #1
  12a624:	e6ff1072 	uxth	r1, r2
  12a628:	e51b200c 	ldr	r2, [fp, #-12]
  12a62c:	e1c211bc 	strh	r1, [r2, #28]
  12a630:	e3530001 	cmp	r3, #1
  12a634:	1a000001 	bne	12a640 <dhcp_coarse_tmr+0x110>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
  12a638:	e51b0008 	ldr	r0, [fp, #-8]
  12a63c:	eb000076 	bl	12a81c <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  12a640:	e51b3008 	ldr	r3, [fp, #-8]
  12a644:	e5933000 	ldr	r3, [r3]
  12a648:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a64c:	e51b3008 	ldr	r3, [fp, #-8]
  12a650:	e3530000 	cmp	r3, #0
  12a654:	1affffbd 	bne	12a550 <dhcp_coarse_tmr+0x20>
  }
}
  12a658:	e320f000 	nop	{0}
  12a65c:	e24bd004 	sub	sp, fp, #4
  12a660:	e8bd8800 	pop	{fp, pc}

0012a664 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
  12a664:	e92d4800 	push	{fp, lr}
  12a668:	e28db004 	add	fp, sp, #4
  12a66c:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a670:	e30c3a3c 	movw	r3, #51772	; 0xca3c
  12a674:	e3403015 	movt	r3, #21
  12a678:	e5933000 	ldr	r3, [r3]
  12a67c:	e50b3008 	str	r3, [fp, #-8]
  /* loop through netif's */
  while (netif != NULL) {
  12a680:	ea00001f 	b	12a704 <dhcp_fine_tmr+0xa0>
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a684:	e51b3008 	ldr	r3, [fp, #-8]
  12a688:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a68c:	e50b300c 	str	r3, [fp, #-12]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
  12a690:	e51b300c 	ldr	r3, [fp, #-12]
  12a694:	e3530000 	cmp	r3, #0
  12a698:	0a000016 	beq	12a6f8 <dhcp_fine_tmr+0x94>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
  12a69c:	e51b300c 	ldr	r3, [fp, #-12]
  12a6a0:	e1d331b6 	ldrh	r3, [r3, #22]
  12a6a4:	e3530001 	cmp	r3, #1
  12a6a8:	9a000006 	bls	12a6c8 <dhcp_fine_tmr+0x64>
        dhcp->request_timeout--;
  12a6ac:	e51b300c 	ldr	r3, [fp, #-12]
  12a6b0:	e1d331b6 	ldrh	r3, [r3, #22]
  12a6b4:	e2433001 	sub	r3, r3, #1
  12a6b8:	e6ff2073 	uxth	r2, r3
  12a6bc:	e51b300c 	ldr	r3, [fp, #-12]
  12a6c0:	e1c321b6 	strh	r2, [r3, #22]
  12a6c4:	ea00000b 	b	12a6f8 <dhcp_fine_tmr+0x94>
      }
      else if (dhcp->request_timeout == 1) {
  12a6c8:	e51b300c 	ldr	r3, [fp, #-12]
  12a6cc:	e1d331b6 	ldrh	r3, [r3, #22]
  12a6d0:	e3530001 	cmp	r3, #1
  12a6d4:	1a000007 	bne	12a6f8 <dhcp_fine_tmr+0x94>
        dhcp->request_timeout--;
  12a6d8:	e51b300c 	ldr	r3, [fp, #-12]
  12a6dc:	e1d331b6 	ldrh	r3, [r3, #22]
  12a6e0:	e2433001 	sub	r3, r3, #1
  12a6e4:	e6ff2073 	uxth	r2, r3
  12a6e8:	e51b300c 	ldr	r3, [fp, #-12]
  12a6ec:	e1c321b6 	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
  12a6f0:	e51b0008 	ldr	r0, [fp, #-8]
  12a6f4:	eb000008 	bl	12a71c <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  12a6f8:	e51b3008 	ldr	r3, [fp, #-8]
  12a6fc:	e5933000 	ldr	r3, [r3]
  12a700:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a704:	e51b3008 	ldr	r3, [fp, #-8]
  12a708:	e3530000 	cmp	r3, #0
  12a70c:	1affffdc 	bne	12a684 <dhcp_fine_tmr+0x20>
  }
}
  12a710:	e320f000 	nop	{0}
  12a714:	e24bd004 	sub	sp, fp, #4
  12a718:	e8bd8800 	pop	{fp, pc}

0012a71c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
  12a71c:	e92d4800 	push	{fp, lr}
  12a720:	e28db004 	add	fp, sp, #4
  12a724:	e24dd010 	sub	sp, sp, #16
  12a728:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a72c:	e51b3010 	ldr	r3, [fp, #-16]
  12a730:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a734:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
  12a738:	e51b3008 	ldr	r3, [fp, #-8]
  12a73c:	e5d33009 	ldrb	r3, [r3, #9]
  12a740:	e353000c 	cmp	r3, #12
  12a744:	0a000003 	beq	12a758 <dhcp_timeout+0x3c>
  12a748:	e51b3008 	ldr	r3, [fp, #-8]
  12a74c:	e5d33009 	ldrb	r3, [r3, #9]
  12a750:	e3530006 	cmp	r3, #6
  12a754:	1a000002 	bne	12a764 <dhcp_timeout+0x48>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  12a758:	e51b0010 	ldr	r0, [fp, #-16]
  12a75c:	eb0002b9 	bl	12b248 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  12a760:	ea00002a 	b	12a810 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
  12a764:	e51b3008 	ldr	r3, [fp, #-8]
  12a768:	e5d33009 	ldrb	r3, [r3, #9]
  12a76c:	e3530001 	cmp	r3, #1
  12a770:	1a00000b 	bne	12a7a4 <dhcp_timeout+0x88>
    if (dhcp->tries <= 5) {
  12a774:	e51b3008 	ldr	r3, [fp, #-8]
  12a778:	e5d3300a 	ldrb	r3, [r3, #10]
  12a77c:	e3530005 	cmp	r3, #5
  12a780:	8a000002 	bhi	12a790 <dhcp_timeout+0x74>
      dhcp_select(netif);
  12a784:	e51b0010 	ldr	r0, [fp, #-16]
  12a788:	ebfffedb 	bl	12a2fc <dhcp_select>
}
  12a78c:	ea00001f 	b	12a810 <dhcp_timeout+0xf4>
      dhcp_release(netif);
  12a790:	e51b0010 	ldr	r0, [fp, #-16]
  12a794:	eb000547 	bl	12bcb8 <dhcp_release>
      dhcp_discover(netif);
  12a798:	e51b0010 	ldr	r0, [fp, #-16]
  12a79c:	eb0002a9 	bl	12b248 <dhcp_discover>
}
  12a7a0:	ea00001a 	b	12a810 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
  12a7a4:	e51b3008 	ldr	r3, [fp, #-8]
  12a7a8:	e5d33009 	ldrb	r3, [r3, #9]
  12a7ac:	e3530008 	cmp	r3, #8
  12a7b0:	1a000009 	bne	12a7dc <dhcp_timeout+0xc0>
    if (dhcp->tries <= 1) {
  12a7b4:	e51b3008 	ldr	r3, [fp, #-8]
  12a7b8:	e5d3300a 	ldrb	r3, [r3, #10]
  12a7bc:	e3530001 	cmp	r3, #1
  12a7c0:	8a000002 	bhi	12a7d0 <dhcp_timeout+0xb4>
      dhcp_check(netif);
  12a7c4:	e51b0010 	ldr	r0, [fp, #-16]
  12a7c8:	ebfffe80 	bl	12a1d0 <dhcp_check>
}
  12a7cc:	ea00000f 	b	12a810 <dhcp_timeout+0xf4>
      dhcp_bind(netif);
  12a7d0:	e51b0010 	ldr	r0, [fp, #-16]
  12a7d4:	eb000312 	bl	12b424 <dhcp_bind>
}
  12a7d8:	ea00000c 	b	12a810 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
  12a7dc:	e51b3008 	ldr	r3, [fp, #-8]
  12a7e0:	e5d33009 	ldrb	r3, [r3, #9]
  12a7e4:	e3530003 	cmp	r3, #3
  12a7e8:	1a000008 	bne	12a810 <dhcp_timeout+0xf4>
    if (dhcp->tries < REBOOT_TRIES) {
  12a7ec:	e51b3008 	ldr	r3, [fp, #-8]
  12a7f0:	e5d3300a 	ldrb	r3, [r3, #10]
  12a7f4:	e3530001 	cmp	r3, #1
  12a7f8:	8a000002 	bhi	12a808 <dhcp_timeout+0xec>
      dhcp_reboot(netif);
  12a7fc:	e51b0010 	ldr	r0, [fp, #-16]
  12a800:	eb0004af 	bl	12bac4 <dhcp_reboot>
}
  12a804:	ea000001 	b	12a810 <dhcp_timeout+0xf4>
      dhcp_discover(netif);
  12a808:	e51b0010 	ldr	r0, [fp, #-16]
  12a80c:	eb00028d 	bl	12b248 <dhcp_discover>
}
  12a810:	e320f000 	nop	{0}
  12a814:	e24bd004 	sub	sp, fp, #4
  12a818:	e8bd8800 	pop	{fp, pc}

0012a81c <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
  12a81c:	e92d4800 	push	{fp, lr}
  12a820:	e28db004 	add	fp, sp, #4
  12a824:	e24dd010 	sub	sp, sp, #16
  12a828:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a82c:	e51b3010 	ldr	r3, [fp, #-16]
  12a830:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a834:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a838:	e51b3008 	ldr	r3, [fp, #-8]
  12a83c:	e5d33009 	ldrb	r3, [r3, #9]
  12a840:	e3530001 	cmp	r3, #1
  12a844:	0a000007 	beq	12a868 <dhcp_t1_timeout+0x4c>
  12a848:	e51b3008 	ldr	r3, [fp, #-8]
  12a84c:	e5d33009 	ldrb	r3, [r3, #9]
  12a850:	e353000a 	cmp	r3, #10
  12a854:	0a000003 	beq	12a868 <dhcp_t1_timeout+0x4c>
      (dhcp->state == DHCP_STATE_RENEWING)) {
  12a858:	e51b3008 	ldr	r3, [fp, #-8]
  12a85c:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a860:	e3530005 	cmp	r3, #5
  12a864:	1a000015 	bne	12a8c0 <dhcp_t1_timeout+0xa4>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
  12a868:	e51b0010 	ldr	r0, [fp, #-16]
  12a86c:	eb0003a8 	bl	12b714 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12a870:	e51b3008 	ldr	r3, [fp, #-8]
  12a874:	e1d331ba 	ldrh	r3, [r3, #26]
  12a878:	e1a02003 	mov	r2, r3
  12a87c:	e51b3008 	ldr	r3, [fp, #-8]
  12a880:	e1d332b0 	ldrh	r3, [r3, #32]
  12a884:	e0423003 	sub	r3, r2, r3
  12a888:	e3530001 	cmp	r3, #1
  12a88c:	da00000b 	ble	12a8c0 <dhcp_t1_timeout+0xa4>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
  12a890:	e51b3008 	ldr	r3, [fp, #-8]
  12a894:	e1d331ba 	ldrh	r3, [r3, #26]
  12a898:	e1a02003 	mov	r2, r3
  12a89c:	e51b3008 	ldr	r3, [fp, #-8]
  12a8a0:	e1d332b0 	ldrh	r3, [r3, #32]
  12a8a4:	e0423003 	sub	r3, r2, r3
  12a8a8:	e1a02fa3 	lsr	r2, r3, #31
  12a8ac:	e0823003 	add	r3, r2, r3
  12a8b0:	e1a030c3 	asr	r3, r3, #1
  12a8b4:	e6ff2073 	uxth	r2, r3
  12a8b8:	e51b3008 	ldr	r3, [fp, #-8]
  12a8bc:	e1c321bc 	strh	r2, [r3, #28]
    }
  }
}
  12a8c0:	e320f000 	nop	{0}
  12a8c4:	e24bd004 	sub	sp, fp, #4
  12a8c8:	e8bd8800 	pop	{fp, pc}

0012a8cc <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
  12a8cc:	e92d4800 	push	{fp, lr}
  12a8d0:	e28db004 	add	fp, sp, #4
  12a8d4:	e24dd010 	sub	sp, sp, #16
  12a8d8:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a8dc:	e51b3010 	ldr	r3, [fp, #-16]
  12a8e0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a8e4:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a8e8:	e51b3008 	ldr	r3, [fp, #-8]
  12a8ec:	e5d33009 	ldrb	r3, [r3, #9]
  12a8f0:	e3530001 	cmp	r3, #1
  12a8f4:	0a00000b 	beq	12a928 <dhcp_t2_timeout+0x5c>
  12a8f8:	e51b3008 	ldr	r3, [fp, #-8]
  12a8fc:	e5d33009 	ldrb	r3, [r3, #9]
  12a900:	e353000a 	cmp	r3, #10
  12a904:	0a000007 	beq	12a928 <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12a908:	e51b3008 	ldr	r3, [fp, #-8]
  12a90c:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a910:	e3530005 	cmp	r3, #5
  12a914:	0a000003 	beq	12a928 <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12a918:	e51b3008 	ldr	r3, [fp, #-8]
  12a91c:	e5d33009 	ldrb	r3, [r3, #9]
  12a920:	e3530004 	cmp	r3, #4
  12a924:	1a000015 	bne	12a980 <dhcp_t2_timeout+0xb4>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
  12a928:	e51b0010 	ldr	r0, [fp, #-16]
  12a92c:	eb0003ee 	bl	12b8ec <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12a930:	e51b3008 	ldr	r3, [fp, #-8]
  12a934:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a938:	e1a02003 	mov	r2, r3
  12a93c:	e51b3008 	ldr	r3, [fp, #-8]
  12a940:	e1d332b0 	ldrh	r3, [r3, #32]
  12a944:	e0423003 	sub	r3, r2, r3
  12a948:	e3530001 	cmp	r3, #1
  12a94c:	da00000b 	ble	12a980 <dhcp_t2_timeout+0xb4>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
  12a950:	e51b3008 	ldr	r3, [fp, #-8]
  12a954:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a958:	e1a02003 	mov	r2, r3
  12a95c:	e51b3008 	ldr	r3, [fp, #-8]
  12a960:	e1d332b0 	ldrh	r3, [r3, #32]
  12a964:	e0423003 	sub	r3, r2, r3
  12a968:	e1a02fa3 	lsr	r2, r3, #31
  12a96c:	e0823003 	add	r3, r2, r3
  12a970:	e1a030c3 	asr	r3, r3, #1
  12a974:	e6ff2073 	uxth	r2, r3
  12a978:	e51b3008 	ldr	r3, [fp, #-8]
  12a97c:	e1c321be 	strh	r2, [r3, #30]
    }
  }
}
  12a980:	e320f000 	nop	{0}
  12a984:	e24bd004 	sub	sp, fp, #4
  12a988:	e8bd8800 	pop	{fp, pc}

0012a98c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
  12a98c:	e92d4800 	push	{fp, lr}
  12a990:	e28db004 	add	fp, sp, #4
  12a994:	e24dd018 	sub	sp, sp, #24
  12a998:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a99c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a9a0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a9a4:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12a9a8:	e51b300c 	ldr	r3, [fp, #-12]
  12a9ac:	e3a02000 	mov	r2, #0
  12a9b0:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12a9b4:	e51b300c 	ldr	r3, [fp, #-12]
  12a9b8:	e3a02000 	mov	r2, #0
  12a9bc:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
  12a9c0:	e30c3c54 	movw	r3, #52308	; 0xcc54
  12a9c4:	e3403015 	movt	r3, #21
  12a9c8:	e5d33003 	ldrb	r3, [r3, #3]
  12a9cc:	e3530000 	cmp	r3, #0
  12a9d0:	0a000004 	beq	12a9e8 <dhcp_handle_ack+0x5c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
  12a9d4:	e30c3c60 	movw	r3, #52320	; 0xcc60
  12a9d8:	e3403015 	movt	r3, #21
  12a9dc:	e593200c 	ldr	r2, [r3, #12]
  12a9e0:	e51b300c 	ldr	r3, [fp, #-12]
  12a9e4:	e5832034 	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
  12a9e8:	e30c3c54 	movw	r3, #52308	; 0xcc54
  12a9ec:	e3403015 	movt	r3, #21
  12a9f0:	e5d33004 	ldrb	r3, [r3, #4]
  12a9f4:	e3530000 	cmp	r3, #0
  12a9f8:	0a000005 	beq	12aa14 <dhcp_handle_ack+0x88>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
  12a9fc:	e30c3c60 	movw	r3, #52320	; 0xcc60
  12aa00:	e3403015 	movt	r3, #21
  12aa04:	e5932010 	ldr	r2, [r3, #16]
  12aa08:	e51b300c 	ldr	r3, [fp, #-12]
  12aa0c:	e5832038 	str	r2, [r3, #56]	; 0x38
  12aa10:	ea000004 	b	12aa28 <dhcp_handle_ack+0x9c>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
  12aa14:	e51b300c 	ldr	r3, [fp, #-12]
  12aa18:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12aa1c:	e1a020a3 	lsr	r2, r3, #1
  12aa20:	e51b300c 	ldr	r3, [fp, #-12]
  12aa24:	e5832038 	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
  12aa28:	e30c3c54 	movw	r3, #52308	; 0xcc54
  12aa2c:	e3403015 	movt	r3, #21
  12aa30:	e5d33005 	ldrb	r3, [r3, #5]
  12aa34:	e3530000 	cmp	r3, #0
  12aa38:	0a000005 	beq	12aa54 <dhcp_handle_ack+0xc8>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
  12aa3c:	e30c3c60 	movw	r3, #52320	; 0xcc60
  12aa40:	e3403015 	movt	r3, #21
  12aa44:	e5932014 	ldr	r2, [r3, #20]
  12aa48:	e51b300c 	ldr	r3, [fp, #-12]
  12aa4c:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12aa50:	ea000007 	b	12aa74 <dhcp_handle_ack+0xe8>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
  12aa54:	e51b300c 	ldr	r3, [fp, #-12]
  12aa58:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  12aa5c:	e1a03002 	mov	r3, r2
  12aa60:	e1a03183 	lsl	r3, r3, #3
  12aa64:	e0433002 	sub	r3, r3, r2
  12aa68:	e1a021a3 	lsr	r2, r3, #3
  12aa6c:	e51b300c 	ldr	r3, [fp, #-12]
  12aa70:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  12aa74:	e51b300c 	ldr	r3, [fp, #-12]
  12aa78:	e5933004 	ldr	r3, [r3, #4]
  12aa7c:	e5932010 	ldr	r2, [r3, #16]
  12aa80:	e51b300c 	ldr	r3, [fp, #-12]
  12aa84:	e5832028 	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
  12aa88:	e30c3c54 	movw	r3, #52308	; 0xcc54
  12aa8c:	e3403015 	movt	r3, #21
  12aa90:	e5d33006 	ldrb	r3, [r3, #6]
  12aa94:	e3530000 	cmp	r3, #0
  12aa98:	0a00000b 	beq	12aacc <dhcp_handle_ack+0x140>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
  12aa9c:	e30c3c60 	movw	r3, #52320	; 0xcc60
  12aaa0:	e3403015 	movt	r3, #21
  12aaa4:	e5933018 	ldr	r3, [r3, #24]
  12aaa8:	e1a00003 	mov	r0, r3
  12aaac:	ebffaec5 	bl	1165c8 <lwip_htonl>
  12aab0:	e1a02000 	mov	r2, r0
  12aab4:	e51b300c 	ldr	r3, [fp, #-12]
  12aab8:	e583202c 	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
  12aabc:	e51b300c 	ldr	r3, [fp, #-12]
  12aac0:	e3a02001 	mov	r2, #1
  12aac4:	e5c3200b 	strb	r2, [r3, #11]
  12aac8:	ea000002 	b	12aad8 <dhcp_handle_ack+0x14c>
  } else {
    dhcp->subnet_mask_given = 0;
  12aacc:	e51b300c 	ldr	r3, [fp, #-12]
  12aad0:	e3a02000 	mov	r2, #0
  12aad4:	e5c3200b 	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
  12aad8:	e30c3c54 	movw	r3, #52308	; 0xcc54
  12aadc:	e3403015 	movt	r3, #21
  12aae0:	e5d33007 	ldrb	r3, [r3, #7]
  12aae4:	e3530000 	cmp	r3, #0
  12aae8:	0a000007 	beq	12ab0c <dhcp_handle_ack+0x180>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
  12aaec:	e30c3c60 	movw	r3, #52320	; 0xcc60
  12aaf0:	e3403015 	movt	r3, #21
  12aaf4:	e593301c 	ldr	r3, [r3, #28]
  12aaf8:	e1a00003 	mov	r0, r3
  12aafc:	ebffaeb1 	bl	1165c8 <lwip_htonl>
  12ab00:	e1a02000 	mov	r2, r0
  12ab04:	e51b300c 	ldr	r3, [fp, #-12]
  12ab08:	e5832030 	str	r2, [r3, #48]	; 0x30
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12ab0c:	e3a03000 	mov	r3, #0
  12ab10:	e54b3005 	strb	r3, [fp, #-5]
  12ab14:	ea000010 	b	12ab5c <dhcp_handle_ack+0x1d0>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
  12ab18:	e55b3005 	ldrb	r3, [fp, #-5]
  12ab1c:	e2832008 	add	r2, r3, #8
  12ab20:	e30c3c60 	movw	r3, #52320	; 0xcc60
  12ab24:	e3403015 	movt	r3, #21
  12ab28:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  12ab2c:	e1a00003 	mov	r0, r3
  12ab30:	ebffaea4 	bl	1165c8 <lwip_htonl>
  12ab34:	e1a03000 	mov	r3, r0
  12ab38:	e50b3010 	str	r3, [fp, #-16]
    dns_setserver(n, &dns_addr);
  12ab3c:	e24b2010 	sub	r2, fp, #16
  12ab40:	e55b3005 	ldrb	r3, [fp, #-5]
  12ab44:	e1a01002 	mov	r1, r2
  12ab48:	e1a00003 	mov	r0, r3
  12ab4c:	ebffaf97 	bl	1169b0 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12ab50:	e55b3005 	ldrb	r3, [fp, #-5]
  12ab54:	e2833001 	add	r3, r3, #1
  12ab58:	e54b3005 	strb	r3, [fp, #-5]
  12ab5c:	e55b3005 	ldrb	r3, [fp, #-5]
  12ab60:	e3530001 	cmp	r3, #1
  12ab64:	8a000006 	bhi	12ab84 <dhcp_handle_ack+0x1f8>
  12ab68:	e55b3005 	ldrb	r3, [fp, #-5]
  12ab6c:	e2832008 	add	r2, r3, #8
  12ab70:	e30c3c54 	movw	r3, #52308	; 0xcc54
  12ab74:	e3403015 	movt	r3, #21
  12ab78:	e7d33002 	ldrb	r3, [r3, r2]
  12ab7c:	e3530000 	cmp	r3, #0
  12ab80:	1affffe4 	bne	12ab18 <dhcp_handle_ack+0x18c>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
  12ab84:	e320f000 	nop	{0}
  12ab88:	e24bd004 	sub	sp, fp, #4
  12ab8c:	e8bd8800 	pop	{fp, pc}

0012ab90 <dhcp_set_struct>:
 * @param netif the netif for which to set the struct dhcp
 * @param dhcp (uninitialised) dhcp struct allocated by the application
 */
void
dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
{
  12ab90:	e92d4800 	push	{fp, lr}
  12ab94:	e28db004 	add	fp, sp, #4
  12ab98:	e24dd008 	sub	sp, sp, #8
  12ab9c:	e50b0008 	str	r0, [fp, #-8]
  12aba0:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12aba4:	e51b3008 	ldr	r3, [fp, #-8]
  12aba8:	e3530000 	cmp	r3, #0
  12abac:	1a000006 	bne	12abcc <dhcp_set_struct+0x3c>
  12abb0:	e3080d90 	movw	r0, #36240	; 0x8d90
  12abb4:	e3400014 	movt	r0, #20
  12abb8:	ebff6155 	bl	103114 <rt_kprintf>
  12abbc:	e3a01faa 	mov	r1, #680	; 0x2a8
  12abc0:	e3080d38 	movw	r0, #36152	; 0x8d38
  12abc4:	e3400014 	movt	r0, #20
  12abc8:	ebff8139 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
  12abcc:	e51b300c 	ldr	r3, [fp, #-12]
  12abd0:	e3530000 	cmp	r3, #0
  12abd4:	1a000006 	bne	12abf4 <dhcp_set_struct+0x64>
  12abd8:	e3080da0 	movw	r0, #36256	; 0x8da0
  12abdc:	e3400014 	movt	r0, #20
  12abe0:	ebff614b 	bl	103114 <rt_kprintf>
  12abe4:	e30012a9 	movw	r1, #681	; 0x2a9
  12abe8:	e3080d38 	movw	r0, #36152	; 0x8d38
  12abec:	e3400014 	movt	r0, #20
  12abf0:	ebff812f 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("netif already has a struct dhcp set", netif_dhcp_data(netif) == NULL);
  12abf4:	e51b3008 	ldr	r3, [fp, #-8]
  12abf8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12abfc:	e3530000 	cmp	r3, #0
  12ac00:	0a000006 	beq	12ac20 <dhcp_set_struct+0x90>
  12ac04:	e3080db0 	movw	r0, #36272	; 0x8db0
  12ac08:	e3400014 	movt	r0, #20
  12ac0c:	ebff6140 	bl	103114 <rt_kprintf>
  12ac10:	e30012aa 	movw	r1, #682	; 0x2aa
  12ac14:	e3080d38 	movw	r0, #36152	; 0x8d38
  12ac18:	e3400014 	movt	r0, #20
  12ac1c:	ebff8124 	bl	10b0b4 <sys_arch_assert>

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12ac20:	e3a02040 	mov	r2, #64	; 0x40
  12ac24:	e3a01000 	mov	r1, #0
  12ac28:	e51b000c 	ldr	r0, [fp, #-12]
  12ac2c:	eb005982 	bl	14123c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */
  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12ac30:	e51b3008 	ldr	r3, [fp, #-8]
  12ac34:	e51b200c 	ldr	r2, [fp, #-12]
  12ac38:	e5832028 	str	r2, [r3, #40]	; 0x28
}
  12ac3c:	e320f000 	nop	{0}
  12ac40:	e24bd004 	sub	sp, fp, #4
  12ac44:	e8bd8800 	pop	{fp, pc}

0012ac48 <dhcp_cleanup>:
 *            struct dhcp since the memory is passed back to the heap.
 *
 * @param netif the netif from which to remove the struct dhcp
 */
void dhcp_cleanup(struct netif *netif)
{
  12ac48:	e92d4800 	push	{fp, lr}
  12ac4c:	e28db004 	add	fp, sp, #4
  12ac50:	e24dd008 	sub	sp, sp, #8
  12ac54:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12ac58:	e51b3008 	ldr	r3, [fp, #-8]
  12ac5c:	e3530000 	cmp	r3, #0
  12ac60:	1a000006 	bne	12ac80 <dhcp_cleanup+0x38>
  12ac64:	e3080d90 	movw	r0, #36240	; 0x8d90
  12ac68:	e3400014 	movt	r0, #20
  12ac6c:	ebff6128 	bl	103114 <rt_kprintf>
  12ac70:	e30012bd 	movw	r1, #701	; 0x2bd
  12ac74:	e3080d38 	movw	r0, #36152	; 0x8d38
  12ac78:	e3400014 	movt	r0, #20
  12ac7c:	ebff810c 	bl	10b0b4 <sys_arch_assert>

  if (netif_dhcp_data(netif) != NULL) {
  12ac80:	e51b3008 	ldr	r3, [fp, #-8]
  12ac84:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ac88:	e3530000 	cmp	r3, #0
  12ac8c:	0a000006 	beq	12acac <dhcp_cleanup+0x64>
    mem_free(netif_dhcp_data(netif));
  12ac90:	e51b3008 	ldr	r3, [fp, #-8]
  12ac94:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ac98:	e1a00003 	mov	r0, r3
  12ac9c:	ebff8151 	bl	10b1e8 <mem_free>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, NULL);
  12aca0:	e51b3008 	ldr	r3, [fp, #-8]
  12aca4:	e3a02000 	mov	r2, #0
  12aca8:	e5832028 	str	r2, [r3, #40]	; 0x28
  }
}
  12acac:	e320f000 	nop	{0}
  12acb0:	e24bd004 	sub	sp, fp, #4
  12acb4:	e8bd8800 	pop	{fp, pc}

0012acb8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
  12acb8:	e92d4800 	push	{fp, lr}
  12acbc:	e28db004 	add	fp, sp, #4
  12acc0:	e24dd010 	sub	sp, sp, #16
  12acc4:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
  12acc8:	e51b3010 	ldr	r3, [fp, #-16]
  12accc:	e3530000 	cmp	r3, #0
  12acd0:	1a000008 	bne	12acf8 <dhcp_start+0x40>
  12acd4:	e3080d90 	movw	r0, #36240	; 0x8d90
  12acd8:	e3400014 	movt	r0, #20
  12acdc:	ebff610c 	bl	103114 <rt_kprintf>
  12ace0:	e3a01fb6 	mov	r1, #728	; 0x2d8
  12ace4:	e3080d38 	movw	r0, #36152	; 0x8d38
  12ace8:	e3400014 	movt	r0, #20
  12acec:	ebff80f0 	bl	10b0b4 <sys_arch_assert>
  12acf0:	e3e0300f 	mvn	r3, #15
  12acf4:	ea000059 	b	12ae60 <dhcp_start+0x1a8>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
  12acf8:	e51b3010 	ldr	r3, [fp, #-16]
  12acfc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12ad00:	e2033001 	and	r3, r3, #1
  12ad04:	e3530000 	cmp	r3, #0
  12ad08:	1a000008 	bne	12ad30 <dhcp_start+0x78>
  12ad0c:	e3080dd4 	movw	r0, #36308	; 0x8dd4
  12ad10:	e3400014 	movt	r0, #20
  12ad14:	ebff60fe 	bl	103114 <rt_kprintf>
  12ad18:	e30012d9 	movw	r1, #729	; 0x2d9
  12ad1c:	e3080d38 	movw	r0, #36152	; 0x8d38
  12ad20:	e3400014 	movt	r0, #20
  12ad24:	ebff80e2 	bl	10b0b4 <sys_arch_assert>
  12ad28:	e3e0300f 	mvn	r3, #15
  12ad2c:	ea00004b 	b	12ae60 <dhcp_start+0x1a8>
  dhcp = netif_dhcp_data(netif);
  12ad30:	e51b3010 	ldr	r3, [fp, #-16]
  12ad34:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ad38:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
  12ad3c:	e51b3010 	ldr	r3, [fp, #-16]
  12ad40:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12ad44:	e3530d09 	cmp	r3, #576	; 0x240
  12ad48:	2a000001 	bcs	12ad54 <dhcp_start+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
  12ad4c:	e3e03000 	mvn	r3, #0
  12ad50:	ea000042 	b	12ae60 <dhcp_start+0x1a8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
  12ad54:	e51b3008 	ldr	r3, [fp, #-8]
  12ad58:	e3530000 	cmp	r3, #0
  12ad5c:	1a00000b 	bne	12ad90 <dhcp_start+0xd8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
  12ad60:	e3a00040 	mov	r0, #64	; 0x40
  12ad64:	ebff8113 	bl	10b1b8 <mem_malloc>
  12ad68:	e50b0008 	str	r0, [fp, #-8]
    if (dhcp == NULL) {
  12ad6c:	e51b3008 	ldr	r3, [fp, #-8]
  12ad70:	e3530000 	cmp	r3, #0
  12ad74:	1a000001 	bne	12ad80 <dhcp_start+0xc8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
  12ad78:	e3e03000 	mvn	r3, #0
  12ad7c:	ea000037 	b	12ae60 <dhcp_start+0x1a8>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12ad80:	e51b3010 	ldr	r3, [fp, #-16]
  12ad84:	e51b2008 	ldr	r2, [fp, #-8]
  12ad88:	e5832028 	str	r2, [r3, #40]	; 0x28
  12ad8c:	ea00001a 	b	12adfc <dhcp_start+0x144>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
  12ad90:	e51b3008 	ldr	r3, [fp, #-8]
  12ad94:	e593300c 	ldr	r3, [r3, #12]
  12ad98:	e3530000 	cmp	r3, #0
  12ad9c:	0a000006 	beq	12adbc <dhcp_start+0x104>
  12ada0:	e3080df8 	movw	r0, #36344	; 0x8df8
  12ada4:	e3400014 	movt	r0, #20
  12ada8:	ebff60d9 	bl	103114 <rt_kprintf>
  12adac:	e30012f2 	movw	r1, #754	; 0x2f2
  12adb0:	e3080d38 	movw	r0, #36152	; 0x8d38
  12adb4:	e3400014 	movt	r0, #20
  12adb8:	ebff80bd 	bl	10b0b4 <sys_arch_assert>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  12adbc:	e51b3008 	ldr	r3, [fp, #-8]
  12adc0:	e5933004 	ldr	r3, [r3, #4]
  12adc4:	e3530000 	cmp	r3, #0
  12adc8:	0a000006 	beq	12ade8 <dhcp_start+0x130>
  12adcc:	e3080e10 	movw	r0, #36368	; 0x8e10
  12add0:	e3400014 	movt	r0, #20
  12add4:	ebff60ce 	bl	103114 <rt_kprintf>
  12add8:	e30012f3 	movw	r1, #755	; 0x2f3
  12addc:	e3080d38 	movw	r0, #36152	; 0x8d38
  12ade0:	e3400014 	movt	r0, #20
  12ade4:	ebff80b2 	bl	10b0b4 <sys_arch_assert>

    if (dhcp->pcb_allocated != 0) {
  12ade8:	e51b3008 	ldr	r3, [fp, #-8]
  12adec:	e5d33008 	ldrb	r3, [r3, #8]
  12adf0:	e3530000 	cmp	r3, #0
  12adf4:	0a000000 	beq	12adfc <dhcp_start+0x144>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12adf8:	ebfffcb7 	bl	12a0dc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12adfc:	e3a02040 	mov	r2, #64	; 0x40
  12ae00:	e3a01000 	mov	r1, #0
  12ae04:	e51b0008 	ldr	r0, [fp, #-8]
  12ae08:	eb00590b 	bl	14123c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12ae0c:	ebfffc66 	bl	129fac <dhcp_inc_pcb_refcount>
  12ae10:	e1a03000 	mov	r3, r0
  12ae14:	e3530000 	cmp	r3, #0
  12ae18:	0a000001 	beq	12ae24 <dhcp_start+0x16c>
    return ERR_MEM;
  12ae1c:	e3e03000 	mvn	r3, #0
  12ae20:	ea00000e 	b	12ae60 <dhcp_start+0x1a8>
  }
  dhcp->pcb_allocated = 1;
  12ae24:	e51b3008 	ldr	r3, [fp, #-8]
  12ae28:	e3a02001 	mov	r2, #1
  12ae2c:	e5c32008 	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
  12ae30:	e51b0010 	ldr	r0, [fp, #-16]
  12ae34:	eb000103 	bl	12b248 <dhcp_discover>
  12ae38:	e1a03000 	mov	r3, r0
  12ae3c:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
  12ae40:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12ae44:	e3530000 	cmp	r3, #0
  12ae48:	0a000003 	beq	12ae5c <dhcp_start+0x1a4>
    /* free resources allocated above */
    dhcp_stop(netif);
  12ae4c:	e51b0010 	ldr	r0, [fp, #-16]
  12ae50:	eb000410 	bl	12be98 <dhcp_stop>
    return ERR_MEM;
  12ae54:	e3e03000 	mvn	r3, #0
  12ae58:	ea000000 	b	12ae60 <dhcp_start+0x1a8>
  }
  return result;
  12ae5c:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12ae60:	e1a00003 	mov	r0, r3
  12ae64:	e24bd004 	sub	sp, fp, #4
  12ae68:	e8bd8800 	pop	{fp, pc}

0012ae6c <dhcp_inform>:
 *
 * @param netif The lwIP network interface
 */
void
dhcp_inform(struct netif *netif)
{
  12ae6c:	e92d4800 	push	{fp, lr}
  12ae70:	e28db004 	add	fp, sp, #4
  12ae74:	e24dd058 	sub	sp, sp, #88	; 0x58
  12ae78:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  struct dhcp dhcp;
  err_t result = ERR_OK;
  12ae7c:	e3a03000 	mov	r3, #0
  12ae80:	e54b3005 	strb	r3, [fp, #-5]

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12ae84:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12ae88:	e3530000 	cmp	r3, #0
  12ae8c:	1a000007 	bne	12aeb0 <dhcp_inform+0x44>
  12ae90:	e3080d90 	movw	r0, #36240	; 0x8d90
  12ae94:	e3400014 	movt	r0, #20
  12ae98:	ebff609d 	bl	103114 <rt_kprintf>
  12ae9c:	e3001329 	movw	r1, #809	; 0x329
  12aea0:	e3080d38 	movw	r0, #36152	; 0x8d38
  12aea4:	e3400014 	movt	r0, #20
  12aea8:	ebff8081 	bl	10b0b4 <sys_arch_assert>
  12aeac:	ea00003b 	b	12afa0 <dhcp_inform+0x134>

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12aeb0:	ebfffc3d 	bl	129fac <dhcp_inc_pcb_refcount>
  12aeb4:	e1a03000 	mov	r3, r0
  12aeb8:	e3530000 	cmp	r3, #0
  12aebc:	1a000036 	bne	12af9c <dhcp_inform+0x130>
    return;
  }

  memset(&dhcp, 0, sizeof(struct dhcp));
  12aec0:	e24b3048 	sub	r3, fp, #72	; 0x48
  12aec4:	e3a02040 	mov	r2, #64	; 0x40
  12aec8:	e3a01000 	mov	r1, #0
  12aecc:	e1a00003 	mov	r0, r3
  12aed0:	eb0058d9 	bl	14123c <memset>
  dhcp_set_state(&dhcp, DHCP_STATE_INFORMING);
  12aed4:	e24b3048 	sub	r3, fp, #72	; 0x48
  12aed8:	e3a01007 	mov	r1, #7
  12aedc:	e1a00003 	mov	r0, r3
  12aee0:	eb000419 	bl	12bf4c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
  12aee4:	e24b3048 	sub	r3, fp, #72	; 0x48
  12aee8:	e3a02008 	mov	r2, #8
  12aeec:	e1a01003 	mov	r1, r3
  12aef0:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  12aef4:	eb000844 	bl	12d00c <dhcp_create_msg>
  12aef8:	e1a03000 	mov	r3, r0
  12aefc:	e54b3005 	strb	r3, [fp, #-5]
  if (result == ERR_OK) {
  12af00:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12af04:	e3530000 	cmp	r3, #0
  12af08:	1a000021 	bne	12af94 <dhcp_inform+0x128>
    dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12af0c:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af10:	e3a02002 	mov	r2, #2
  12af14:	e3a01039 	mov	r1, #57	; 0x39
  12af18:	e1a00003 	mov	r0, r3
  12af1c:	eb000422 	bl	12bfac <dhcp_option>
    dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
  12af20:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12af24:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  12af28:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af2c:	e1a01002 	mov	r1, r2
  12af30:	e1a00003 	mov	r0, r3
  12af34:	eb00046b 	bl	12c0e8 <dhcp_option_short>

    dhcp_option_trailer(&dhcp);
  12af38:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af3c:	e1a00003 	mov	r0, r3
  12af40:	eb00099e 	bl	12d5c0 <dhcp_option_trailer>

    pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
  12af44:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  12af48:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  12af4c:	e28330f0 	add	r3, r3, #240	; 0xf0
  12af50:	e6ff3073 	uxth	r3, r3
  12af54:	e1a01003 	mov	r1, r3
  12af58:	e1a00002 	mov	r0, r2
  12af5c:	ebffbe7b 	bl	11a950 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));

    udp_sendto_if(dhcp_pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12af60:	e30e3aec 	movw	r3, #60140	; 0xeaec
  12af64:	e3403014 	movt	r3, #20
  12af68:	e5930000 	ldr	r0, [r3]
  12af6c:	e51b103c 	ldr	r1, [fp, #-60]	; 0xffffffc4
  12af70:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12af74:	e58d3000 	str	r3, [sp]
  12af78:	e3a03043 	mov	r3, #67	; 0x43
  12af7c:	e30928d4 	movw	r2, #39124	; 0x98d4
  12af80:	e3402014 	movt	r2, #20
  12af84:	ebfff49a 	bl	1281f4 <udp_sendto_if>

    dhcp_delete_msg(&dhcp);
  12af88:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af8c:	e1a00003 	mov	r0, r3
  12af90:	eb000955 	bl	12d4ec <dhcp_delete_msg>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
  }

  dhcp_dec_pcb_refcount(); /* delete DHCP PCB if not needed any more */
  12af94:	ebfffc50 	bl	12a0dc <dhcp_dec_pcb_refcount>
  12af98:	ea000000 	b	12afa0 <dhcp_inform+0x134>
    return;
  12af9c:	e320f000 	nop	{0}
}
  12afa0:	e24bd004 	sub	sp, fp, #4
  12afa4:	e8bd8800 	pop	{fp, pc}

0012afa8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
  12afa8:	e92d4800 	push	{fp, lr}
  12afac:	e28db004 	add	fp, sp, #4
  12afb0:	e24dd010 	sub	sp, sp, #16
  12afb4:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12afb8:	e51b3010 	ldr	r3, [fp, #-16]
  12afbc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12afc0:	e50b3008 	str	r3, [fp, #-8]

  if (!dhcp)
  12afc4:	e51b3008 	ldr	r3, [fp, #-8]
  12afc8:	e3530000 	cmp	r3, #0
  12afcc:	0a00001c 	beq	12b044 <dhcp_network_changed+0x9c>
    return;
  switch (dhcp->state) {
  12afd0:	e51b3008 	ldr	r3, [fp, #-8]
  12afd4:	e5d33009 	ldrb	r3, [r3, #9]
  12afd8:	e353000a 	cmp	r3, #10
  12afdc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12afe0:	ea000010 	b	12b028 <dhcp_network_changed+0x80>
  12afe4:	0012b04c 	.word	0x0012b04c
  12afe8:	0012b028 	.word	0x0012b028
  12afec:	0012b028 	.word	0x0012b028
  12aff0:	0012b010 	.word	0x0012b010
  12aff4:	0012b010 	.word	0x0012b010
  12aff8:	0012b010 	.word	0x0012b010
  12affc:	0012b028 	.word	0x0012b028
  12b000:	0012b028 	.word	0x0012b028
  12b004:	0012b028 	.word	0x0012b028
  12b008:	0012b028 	.word	0x0012b028
  12b00c:	0012b010 	.word	0x0012b010
  case DHCP_STATE_REBINDING:
  case DHCP_STATE_RENEWING:
  case DHCP_STATE_BOUND:
  case DHCP_STATE_REBOOTING:
    dhcp->tries = 0;
  12b010:	e51b3008 	ldr	r3, [fp, #-8]
  12b014:	e3a02000 	mov	r2, #0
  12b018:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_reboot(netif);
  12b01c:	e51b0010 	ldr	r0, [fp, #-16]
  12b020:	eb0002a7 	bl	12bac4 <dhcp_reboot>
    break;
  12b024:	ea000009 	b	12b050 <dhcp_network_changed+0xa8>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    /* ensure we start with short timeouts, even if already discovering */
    dhcp->tries = 0;
  12b028:	e51b3008 	ldr	r3, [fp, #-8]
  12b02c:	e3a02000 	mov	r2, #0
  12b030:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_discover(netif);
  12b034:	e51b0010 	ldr	r0, [fp, #-16]
  12b038:	eb000082 	bl	12b248 <dhcp_discover>
    break;
  12b03c:	e320f000 	nop	{0}
  12b040:	ea000002 	b	12b050 <dhcp_network_changed+0xa8>
    return;
  12b044:	e320f000 	nop	{0}
  12b048:	ea000000 	b	12b050 <dhcp_network_changed+0xa8>
    break;
  12b04c:	e320f000 	nop	{0}
  }
}
  12b050:	e24bd004 	sub	sp, fp, #4
  12b054:	e8bd8800 	pop	{fp, pc}

0012b058 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
  12b058:	e92d4800 	push	{fp, lr}
  12b05c:	e28db004 	add	fp, sp, #4
  12b060:	e24dd010 	sub	sp, sp, #16
  12b064:	e50b0010 	str	r0, [fp, #-16]
  12b068:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12b06c:	e51b3010 	ldr	r3, [fp, #-16]
  12b070:	e3530000 	cmp	r3, #0
  12b074:	1a000007 	bne	12b098 <dhcp_arp_reply+0x40>
  12b078:	e3080d90 	movw	r0, #36240	; 0x8d90
  12b07c:	e3400014 	movt	r0, #20
  12b080:	ebff6023 	bl	103114 <rt_kprintf>
  12b084:	e300137d 	movw	r1, #893	; 0x37d
  12b088:	e3080d38 	movw	r0, #36152	; 0x8d38
  12b08c:	e3400014 	movt	r0, #20
  12b090:	ebff8007 	bl	10b0b4 <sys_arch_assert>
  12b094:	ea000011 	b	12b0e0 <dhcp_arp_reply+0x88>
  dhcp = netif_dhcp_data(netif);
  12b098:	e51b3010 	ldr	r3, [fp, #-16]
  12b09c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b0a0:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
  12b0a4:	e51b3008 	ldr	r3, [fp, #-8]
  12b0a8:	e3530000 	cmp	r3, #0
  12b0ac:	0a00000b 	beq	12b0e0 <dhcp_arp_reply+0x88>
  12b0b0:	e51b3008 	ldr	r3, [fp, #-8]
  12b0b4:	e5d33009 	ldrb	r3, [r3, #9]
  12b0b8:	e3530008 	cmp	r3, #8
  12b0bc:	1a000007 	bne	12b0e0 <dhcp_arp_reply+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
  12b0c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12b0c4:	e5932000 	ldr	r2, [r3]
  12b0c8:	e51b3008 	ldr	r3, [fp, #-8]
  12b0cc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b0d0:	e1520003 	cmp	r2, r3
  12b0d4:	1a000001 	bne	12b0e0 <dhcp_arp_reply+0x88>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
  12b0d8:	e51b0010 	ldr	r0, [fp, #-16]
  12b0dc:	eb000001 	bl	12b0e8 <dhcp_decline>
    }
  }
}
  12b0e0:	e24bd004 	sub	sp, fp, #4
  12b0e4:	e8bd8800 	pop	{fp, pc}

0012b0e8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
  12b0e8:	e92d4800 	push	{fp, lr}
  12b0ec:	e28db004 	add	fp, sp, #4
  12b0f0:	e24dd018 	sub	sp, sp, #24
  12b0f4:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b0f8:	e51b3010 	ldr	r3, [fp, #-16]
  12b0fc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b100:	e50b3008 	str	r3, [fp, #-8]
  err_t result = ERR_OK;
  12b104:	e3a03000 	mov	r3, #0
  12b108:	e54b3009 	strb	r3, [fp, #-9]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  12b10c:	e3a0100c 	mov	r1, #12
  12b110:	e51b0008 	ldr	r0, [fp, #-8]
  12b114:	eb00038c 	bl	12bf4c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
  12b118:	e3a02004 	mov	r2, #4
  12b11c:	e51b1008 	ldr	r1, [fp, #-8]
  12b120:	e51b0010 	ldr	r0, [fp, #-16]
  12b124:	eb0007b8 	bl	12d00c <dhcp_create_msg>
  12b128:	e1a03000 	mov	r3, r0
  12b12c:	e54b3009 	strb	r3, [fp, #-9]
  if (result == ERR_OK) {
  12b130:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12b134:	e3530000 	cmp	r3, #0
  12b138:	1a000026 	bne	12b1d8 <dhcp_decline+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12b13c:	e3a02004 	mov	r2, #4
  12b140:	e3a01032 	mov	r1, #50	; 0x32
  12b144:	e51b0008 	ldr	r0, [fp, #-8]
  12b148:	eb000397 	bl	12bfac <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12b14c:	e51b3008 	ldr	r3, [fp, #-8]
  12b150:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b154:	e1a00003 	mov	r0, r3
  12b158:	ebffad1a 	bl	1165c8 <lwip_htonl>
  12b15c:	e1a03000 	mov	r3, r0
  12b160:	e1a01003 	mov	r1, r3
  12b164:	e51b0008 	ldr	r0, [fp, #-8]
  12b168:	eb00040f 	bl	12c1ac <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12b16c:	e51b0008 	ldr	r0, [fp, #-8]
  12b170:	eb000912 	bl	12d5c0 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b174:	e51b3008 	ldr	r3, [fp, #-8]
  12b178:	e593200c 	ldr	r2, [r3, #12]
  12b17c:	e51b3008 	ldr	r3, [fp, #-8]
  12b180:	e1d331b4 	ldrh	r3, [r3, #20]
  12b184:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b188:	e6ff3073 	uxth	r3, r3
  12b18c:	e1a01003 	mov	r1, r3
  12b190:	e1a00002 	mov	r0, r2
  12b194:	ebffbded 	bl	11a950 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12b198:	e30e3aec 	movw	r3, #60140	; 0xeaec
  12b19c:	e3403014 	movt	r3, #20
  12b1a0:	e5930000 	ldr	r0, [r3]
  12b1a4:	e51b3008 	ldr	r3, [fp, #-8]
  12b1a8:	e593100c 	ldr	r1, [r3, #12]
  12b1ac:	e30938d0 	movw	r3, #39120	; 0x98d0
  12b1b0:	e3403014 	movt	r3, #20
  12b1b4:	e58d3004 	str	r3, [sp, #4]
  12b1b8:	e51b3010 	ldr	r3, [fp, #-16]
  12b1bc:	e58d3000 	str	r3, [sp]
  12b1c0:	e3a03043 	mov	r3, #67	; 0x43
  12b1c4:	e30928d4 	movw	r2, #39124	; 0x98d4
  12b1c8:	e3402014 	movt	r2, #20
  12b1cc:	ebfff440 	bl	1282d4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12b1d0:	e51b0008 	ldr	r0, [fp, #-8]
  12b1d4:	eb0008c4 	bl	12d4ec <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b1d8:	e51b3008 	ldr	r3, [fp, #-8]
  12b1dc:	e5d3300a 	ldrb	r3, [r3, #10]
  12b1e0:	e35300ff 	cmp	r3, #255	; 0xff
  12b1e4:	0a000005 	beq	12b200 <dhcp_decline+0x118>
    dhcp->tries++;
  12b1e8:	e51b3008 	ldr	r3, [fp, #-8]
  12b1ec:	e5d3300a 	ldrb	r3, [r3, #10]
  12b1f0:	e2833001 	add	r3, r3, #1
  12b1f4:	e6ef2073 	uxtb	r2, r3
  12b1f8:	e51b3008 	ldr	r3, [fp, #-8]
  12b1fc:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
  12b200:	e3023710 	movw	r3, #10000	; 0x2710
  12b204:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b208:	e15b30bc 	ldrh	r3, [fp, #-12]
  12b20c:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b210:	e2833003 	add	r3, r3, #3
  12b214:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b218:	e3412062 	movt	r2, #4194	; 0x1062
  12b21c:	e0c10293 	smull	r0, r1, r3, r2
  12b220:	e1a022c1 	asr	r2, r1, #5
  12b224:	e1a03fc3 	asr	r3, r3, #31
  12b228:	e0423003 	sub	r3, r2, r3
  12b22c:	e6ff2073 	uxth	r2, r3
  12b230:	e51b3008 	ldr	r3, [fp, #-8]
  12b234:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b238:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12b23c:	e1a00003 	mov	r0, r3
  12b240:	e24bd004 	sub	sp, fp, #4
  12b244:	e8bd8800 	pop	{fp, pc}

0012b248 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
  12b248:	e92d4800 	push	{fp, lr}
  12b24c:	e28db004 	add	fp, sp, #4
  12b250:	e24dd020 	sub	sp, sp, #32
  12b254:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b258:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b25c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b260:	e50b300c 	str	r3, [fp, #-12]
  err_t result = ERR_OK;
  12b264:	e3a03000 	mov	r3, #0
  12b268:	e54b300d 	strb	r3, [fp, #-13]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
  12b26c:	e51b300c 	ldr	r3, [fp, #-12]
  12b270:	e3a02000 	mov	r2, #0
  12b274:	e5832028 	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
  12b278:	e3a01006 	mov	r1, #6
  12b27c:	e51b000c 	ldr	r0, [fp, #-12]
  12b280:	eb000331 	bl	12bf4c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
  12b284:	e3a02001 	mov	r2, #1
  12b288:	e51b100c 	ldr	r1, [fp, #-12]
  12b28c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b290:	eb00075d 	bl	12d00c <dhcp_create_msg>
  12b294:	e1a03000 	mov	r3, r0
  12b298:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b29c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b2a0:	e3530000 	cmp	r3, #0
  12b2a4:	1a000037 	bne	12b388 <dhcp_discover+0x140>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b2a8:	e3a02002 	mov	r2, #2
  12b2ac:	e3a01039 	mov	r1, #57	; 0x39
  12b2b0:	e51b000c 	ldr	r0, [fp, #-12]
  12b2b4:	eb00033c 	bl	12bfac <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b2b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b2bc:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b2c0:	e1a01003 	mov	r1, r3
  12b2c4:	e51b000c 	ldr	r0, [fp, #-12]
  12b2c8:	eb000386 	bl	12c0e8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b2cc:	e3a02004 	mov	r2, #4
  12b2d0:	e3a01037 	mov	r1, #55	; 0x37
  12b2d4:	e51b000c 	ldr	r0, [fp, #-12]
  12b2d8:	eb000333 	bl	12bfac <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b2dc:	e3a03000 	mov	r3, #0
  12b2e0:	e54b3005 	strb	r3, [fp, #-5]
  12b2e4:	ea000009 	b	12b310 <dhcp_discover+0xc8>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b2e8:	e55b2005 	ldrb	r2, [fp, #-5]
  12b2ec:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b2f0:	e3403014 	movt	r3, #20
  12b2f4:	e7d33002 	ldrb	r3, [r3, r2]
  12b2f8:	e1a01003 	mov	r1, r3
  12b2fc:	e51b000c 	ldr	r0, [fp, #-12]
  12b300:	eb000359 	bl	12c06c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b304:	e55b3005 	ldrb	r3, [fp, #-5]
  12b308:	e2833001 	add	r3, r3, #1
  12b30c:	e54b3005 	strb	r3, [fp, #-5]
  12b310:	e55b3005 	ldrb	r3, [fp, #-5]
  12b314:	e3530003 	cmp	r3, #3
  12b318:	9afffff2 	bls	12b2e8 <dhcp_discover+0xa0>
    }
    dhcp_option_trailer(dhcp);
  12b31c:	e51b000c 	ldr	r0, [fp, #-12]
  12b320:	eb0008a6 	bl	12d5c0 <dhcp_option_trailer>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b324:	e51b300c 	ldr	r3, [fp, #-12]
  12b328:	e593200c 	ldr	r2, [r3, #12]
  12b32c:	e51b300c 	ldr	r3, [fp, #-12]
  12b330:	e1d331b4 	ldrh	r3, [r3, #20]
  12b334:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b338:	e6ff3073 	uxth	r3, r3
  12b33c:	e1a01003 	mov	r1, r3
  12b340:	e1a00002 	mov	r0, r2
  12b344:	ebffbd81 	bl	11a950 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12b348:	e30e3aec 	movw	r3, #60140	; 0xeaec
  12b34c:	e3403014 	movt	r3, #20
  12b350:	e5930000 	ldr	r0, [r3]
  12b354:	e51b300c 	ldr	r3, [fp, #-12]
  12b358:	e593100c 	ldr	r1, [r3, #12]
  12b35c:	e30938d0 	movw	r3, #39120	; 0x98d0
  12b360:	e3403014 	movt	r3, #20
  12b364:	e58d3004 	str	r3, [sp, #4]
  12b368:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b36c:	e58d3000 	str	r3, [sp]
  12b370:	e3a03043 	mov	r3, #67	; 0x43
  12b374:	e30928d4 	movw	r2, #39124	; 0x98d4
  12b378:	e3402014 	movt	r2, #20
  12b37c:	ebfff3d4 	bl	1282d4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
  12b380:	e51b000c 	ldr	r0, [fp, #-12]
  12b384:	eb000858 	bl	12d4ec <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b388:	e51b300c 	ldr	r3, [fp, #-12]
  12b38c:	e5d3300a 	ldrb	r3, [r3, #10]
  12b390:	e35300ff 	cmp	r3, #255	; 0xff
  12b394:	0a000005 	beq	12b3b0 <dhcp_discover+0x168>
    dhcp->tries++;
  12b398:	e51b300c 	ldr	r3, [fp, #-12]
  12b39c:	e5d3300a 	ldrb	r3, [r3, #10]
  12b3a0:	e2833001 	add	r3, r3, #1
  12b3a4:	e6ef2073 	uxtb	r2, r3
  12b3a8:	e51b300c 	ldr	r3, [fp, #-12]
  12b3ac:	e5c3200a 	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12b3b0:	e51b300c 	ldr	r3, [fp, #-12]
  12b3b4:	e5d3300a 	ldrb	r3, [r3, #10]
  12b3b8:	e3530005 	cmp	r3, #5
  12b3bc:	8a000006 	bhi	12b3dc <dhcp_discover+0x194>
  12b3c0:	e51b300c 	ldr	r3, [fp, #-12]
  12b3c4:	e5d3300a 	ldrb	r3, [r3, #10]
  12b3c8:	e1a02003 	mov	r2, r3
  12b3cc:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12b3d0:	e1a03213 	lsl	r3, r3, r2
  12b3d4:	e6ff3073 	uxth	r3, r3
  12b3d8:	ea000000 	b	12b3e0 <dhcp_discover+0x198>
  12b3dc:	e30e3a60 	movw	r3, #60000	; 0xea60
  12b3e0:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b3e4:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b3e8:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b3ec:	e2833003 	add	r3, r3, #3
  12b3f0:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b3f4:	e3412062 	movt	r2, #4194	; 0x1062
  12b3f8:	e0c10293 	smull	r0, r1, r3, r2
  12b3fc:	e1a022c1 	asr	r2, r1, #5
  12b400:	e1a03fc3 	asr	r3, r3, #31
  12b404:	e0423003 	sub	r3, r2, r3
  12b408:	e6ff2073 	uxth	r2, r3
  12b40c:	e51b300c 	ldr	r3, [fp, #-12]
  12b410:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b414:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b418:	e1a00003 	mov	r0, r3
  12b41c:	e24bd004 	sub	sp, fp, #4
  12b420:	e8bd8800 	pop	{fp, pc}

0012b424 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
  12b424:	e92d4800 	push	{fp, lr}
  12b428:	e28db004 	add	fp, sp, #4
  12b42c:	e24dd020 	sub	sp, sp, #32
  12b430:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
  12b434:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b438:	e3530000 	cmp	r3, #0
  12b43c:	1a000007 	bne	12b460 <dhcp_bind+0x3c>
  12b440:	e3080e24 	movw	r0, #36388	; 0x8e24
  12b444:	e3400014 	movt	r0, #20
  12b448:	ebff5f31 	bl	103114 <rt_kprintf>
  12b44c:	e30013ff 	movw	r1, #1023	; 0x3ff
  12b450:	e3080d38 	movw	r0, #36152	; 0x8d38
  12b454:	e3400014 	movt	r0, #20
  12b458:	ebff7f15 	bl	10b0b4 <sys_arch_assert>
  12b45c:	ea0000aa 	b	12b70c <dhcp_bind+0x2e8>
  dhcp = netif_dhcp_data(netif);
  12b460:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b464:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b468:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
  12b46c:	e51b300c 	ldr	r3, [fp, #-12]
  12b470:	e3530000 	cmp	r3, #0
  12b474:	1a000007 	bne	12b498 <dhcp_bind+0x74>
  12b478:	e3080e40 	movw	r0, #36416	; 0x8e40
  12b47c:	e3400014 	movt	r0, #20
  12b480:	ebff5f23 	bl	103114 <rt_kprintf>
  12b484:	e3001401 	movw	r1, #1025	; 0x401
  12b488:	e3080d38 	movw	r0, #36152	; 0x8d38
  12b48c:	e3400014 	movt	r0, #20
  12b490:	ebff7f07 	bl	10b0b4 <sys_arch_assert>
  12b494:	ea00009c 	b	12b70c <dhcp_bind+0x2e8>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
  12b498:	e51b300c 	ldr	r3, [fp, #-12]
  12b49c:	e3a02000 	mov	r2, #0
  12b4a0:	e1c322b0 	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
  12b4a4:	e51b300c 	ldr	r3, [fp, #-12]
  12b4a8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b4ac:	e3730001 	cmn	r3, #1
  12b4b0:	0a000017 	beq	12b514 <dhcp_bind+0xf0>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b4b4:	e51b300c 	ldr	r3, [fp, #-12]
  12b4b8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b4bc:	e283201e 	add	r2, r3, #30
  12b4c0:	e3083889 	movw	r3, #34953	; 0x8889
  12b4c4:	e3483888 	movt	r3, #34952	; 0x8888
  12b4c8:	e0832392 	umull	r2, r3, r2, r3
  12b4cc:	e1a032a3 	lsr	r3, r3, #5
  12b4d0:	e50b3008 	str	r3, [fp, #-8]
     if (timeout > 0xffff) {
  12b4d4:	e51b3008 	ldr	r3, [fp, #-8]
  12b4d8:	e3530801 	cmp	r3, #65536	; 0x10000
  12b4dc:	3a000001 	bcc	12b4e8 <dhcp_bind+0xc4>
       timeout = 0xffff;
  12b4e0:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b4e4:	e50b3008 	str	r3, [fp, #-8]
     }
     dhcp->t0_timeout = (u16_t)timeout;
  12b4e8:	e51b3008 	ldr	r3, [fp, #-8]
  12b4ec:	e6ff2073 	uxth	r2, r3
  12b4f0:	e51b300c 	ldr	r3, [fp, #-12]
  12b4f4:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
  12b4f8:	e51b300c 	ldr	r3, [fp, #-12]
  12b4fc:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12b500:	e3530000 	cmp	r3, #0
  12b504:	1a000002 	bne	12b514 <dhcp_bind+0xf0>
       dhcp->t0_timeout = 1;
  12b508:	e51b300c 	ldr	r3, [fp, #-12]
  12b50c:	e3a02001 	mov	r2, #1
  12b510:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
  12b514:	e51b300c 	ldr	r3, [fp, #-12]
  12b518:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b51c:	e3730001 	cmn	r3, #1
  12b520:	0a00001b 	beq	12b594 <dhcp_bind+0x170>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b524:	e51b300c 	ldr	r3, [fp, #-12]
  12b528:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b52c:	e283201e 	add	r2, r3, #30
  12b530:	e3083889 	movw	r3, #34953	; 0x8889
  12b534:	e3483888 	movt	r3, #34952	; 0x8888
  12b538:	e0832392 	umull	r2, r3, r2, r3
  12b53c:	e1a032a3 	lsr	r3, r3, #5
  12b540:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b544:	e51b3008 	ldr	r3, [fp, #-8]
  12b548:	e3530801 	cmp	r3, #65536	; 0x10000
  12b54c:	3a000001 	bcc	12b558 <dhcp_bind+0x134>
      timeout = 0xffff;
  12b550:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b554:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t1_timeout = (u16_t)timeout;
  12b558:	e51b3008 	ldr	r3, [fp, #-8]
  12b55c:	e6ff2073 	uxth	r2, r3
  12b560:	e51b300c 	ldr	r3, [fp, #-12]
  12b564:	e1c321b8 	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
  12b568:	e51b300c 	ldr	r3, [fp, #-12]
  12b56c:	e1d331b8 	ldrh	r3, [r3, #24]
  12b570:	e3530000 	cmp	r3, #0
  12b574:	1a000002 	bne	12b584 <dhcp_bind+0x160>
      dhcp->t1_timeout = 1;
  12b578:	e51b300c 	ldr	r3, [fp, #-12]
  12b57c:	e3a02001 	mov	r2, #1
  12b580:	e1c321b8 	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
  12b584:	e51b300c 	ldr	r3, [fp, #-12]
  12b588:	e1d321b8 	ldrh	r2, [r3, #24]
  12b58c:	e51b300c 	ldr	r3, [fp, #-12]
  12b590:	e1c321bc 	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
  12b594:	e51b300c 	ldr	r3, [fp, #-12]
  12b598:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b59c:	e3730001 	cmn	r3, #1
  12b5a0:	0a00001b 	beq	12b614 <dhcp_bind+0x1f0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b5a4:	e51b300c 	ldr	r3, [fp, #-12]
  12b5a8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b5ac:	e283201e 	add	r2, r3, #30
  12b5b0:	e3083889 	movw	r3, #34953	; 0x8889
  12b5b4:	e3483888 	movt	r3, #34952	; 0x8888
  12b5b8:	e0832392 	umull	r2, r3, r2, r3
  12b5bc:	e1a032a3 	lsr	r3, r3, #5
  12b5c0:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b5c4:	e51b3008 	ldr	r3, [fp, #-8]
  12b5c8:	e3530801 	cmp	r3, #65536	; 0x10000
  12b5cc:	3a000001 	bcc	12b5d8 <dhcp_bind+0x1b4>
      timeout = 0xffff;
  12b5d0:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b5d4:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t2_timeout = (u16_t)timeout;
  12b5d8:	e51b3008 	ldr	r3, [fp, #-8]
  12b5dc:	e6ff2073 	uxth	r2, r3
  12b5e0:	e51b300c 	ldr	r3, [fp, #-12]
  12b5e4:	e1c321ba 	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
  12b5e8:	e51b300c 	ldr	r3, [fp, #-12]
  12b5ec:	e1d331ba 	ldrh	r3, [r3, #26]
  12b5f0:	e3530000 	cmp	r3, #0
  12b5f4:	1a000002 	bne	12b604 <dhcp_bind+0x1e0>
      dhcp->t2_timeout = 1;
  12b5f8:	e51b300c 	ldr	r3, [fp, #-12]
  12b5fc:	e3a02001 	mov	r2, #1
  12b600:	e1c321ba 	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
  12b604:	e51b300c 	ldr	r3, [fp, #-12]
  12b608:	e1d321ba 	ldrh	r2, [r3, #26]
  12b60c:	e51b300c 	ldr	r3, [fp, #-12]
  12b610:	e1c321be 	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
  12b614:	e51b300c 	ldr	r3, [fp, #-12]
  12b618:	e1d321b8 	ldrh	r2, [r3, #24]
  12b61c:	e51b300c 	ldr	r3, [fp, #-12]
  12b620:	e1d331ba 	ldrh	r3, [r3, #26]
  12b624:	e1520003 	cmp	r2, r3
  12b628:	3a000006 	bcc	12b648 <dhcp_bind+0x224>
  12b62c:	e51b300c 	ldr	r3, [fp, #-12]
  12b630:	e1d331ba 	ldrh	r3, [r3, #26]
  12b634:	e3530000 	cmp	r3, #0
  12b638:	0a000002 	beq	12b648 <dhcp_bind+0x224>
    dhcp->t1_timeout = 0;
  12b63c:	e51b300c 	ldr	r3, [fp, #-12]
  12b640:	e3a02000 	mov	r2, #0
  12b644:	e1c321b8 	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
  12b648:	e51b300c 	ldr	r3, [fp, #-12]
  12b64c:	e5d3300b 	ldrb	r3, [r3, #11]
  12b650:	e3530000 	cmp	r3, #0
  12b654:	0a000003 	beq	12b668 <dhcp_bind+0x244>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
  12b658:	e51b300c 	ldr	r3, [fp, #-12]
  12b65c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12b660:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b664:	ea000011 	b	12b6b0 <dhcp_bind+0x28c>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
  12b668:	e51b300c 	ldr	r3, [fp, #-12]
  12b66c:	e2833028 	add	r3, r3, #40	; 0x28
  12b670:	e5d33000 	ldrb	r3, [r3]
  12b674:	e54b300d 	strb	r3, [fp, #-13]
    if (first_octet <= 127) {
  12b678:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b67c:	e3530000 	cmp	r3, #0
  12b680:	ba000002 	blt	12b690 <dhcp_bind+0x26c>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
  12b684:	e3a030ff 	mov	r3, #255	; 0xff
  12b688:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b68c:	ea000007 	b	12b6b0 <dhcp_bind+0x28c>
    } else if (first_octet >= 192) {
  12b690:	e55b300d 	ldrb	r3, [fp, #-13]
  12b694:	e35300bf 	cmp	r3, #191	; 0xbf
  12b698:	9a000002 	bls	12b6a8 <dhcp_bind+0x284>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
  12b69c:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
  12b6a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b6a4:	ea000001 	b	12b6b0 <dhcp_bind+0x28c>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
  12b6a8:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b6ac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
  12b6b0:	e51b300c 	ldr	r3, [fp, #-12]
  12b6b4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  12b6b8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
  12b6bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b6c0:	e3530000 	cmp	r3, #0
  12b6c4:	1a000007 	bne	12b6e8 <dhcp_bind+0x2c4>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
  12b6c8:	e51b300c 	ldr	r3, [fp, #-12]
  12b6cc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12b6d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12b6d4:	e0033002 	and	r3, r3, r2
  12b6d8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
  12b6dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b6e0:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
  12b6e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
  12b6e8:	e3a0100a 	mov	r1, #10
  12b6ec:	e51b000c 	ldr	r0, [fp, #-12]
  12b6f0:	eb000215 	bl	12bf4c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
  12b6f4:	e51b300c 	ldr	r3, [fp, #-12]
  12b6f8:	e2831028 	add	r1, r3, #40	; 0x28
  12b6fc:	e24b3018 	sub	r3, fp, #24
  12b700:	e24b2014 	sub	r2, fp, #20
  12b704:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  12b708:	ebffb76b 	bl	1194bc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
  12b70c:	e24bd004 	sub	sp, fp, #4
  12b710:	e8bd8800 	pop	{fp, pc}

0012b714 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
  12b714:	e92d4800 	push	{fp, lr}
  12b718:	e28db004 	add	fp, sp, #4
  12b71c:	e24dd020 	sub	sp, sp, #32
  12b720:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b724:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b728:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b72c:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
  12b730:	e3a01005 	mov	r1, #5
  12b734:	e51b000c 	ldr	r0, [fp, #-12]
  12b738:	eb000203 	bl	12bf4c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b73c:	e3a02003 	mov	r2, #3
  12b740:	e51b100c 	ldr	r1, [fp, #-12]
  12b744:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b748:	eb00062f 	bl	12d00c <dhcp_create_msg>
  12b74c:	e1a03000 	mov	r3, r0
  12b750:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b754:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b758:	e3530000 	cmp	r3, #0
  12b75c:	1a000037 	bne	12b840 <dhcp_renew+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b760:	e3a02002 	mov	r2, #2
  12b764:	e3a01039 	mov	r1, #57	; 0x39
  12b768:	e51b000c 	ldr	r0, [fp, #-12]
  12b76c:	eb00020e 	bl	12bfac <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b770:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b774:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b778:	e1a01003 	mov	r1, r3
  12b77c:	e51b000c 	ldr	r0, [fp, #-12]
  12b780:	eb000258 	bl	12c0e8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b784:	e3a02004 	mov	r2, #4
  12b788:	e3a01037 	mov	r1, #55	; 0x37
  12b78c:	e51b000c 	ldr	r0, [fp, #-12]
  12b790:	eb000205 	bl	12bfac <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b794:	e3a03000 	mov	r3, #0
  12b798:	e54b3005 	strb	r3, [fp, #-5]
  12b79c:	ea000009 	b	12b7c8 <dhcp_renew+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b7a0:	e55b2005 	ldrb	r2, [fp, #-5]
  12b7a4:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b7a8:	e3403014 	movt	r3, #20
  12b7ac:	e7d33002 	ldrb	r3, [r3, r2]
  12b7b0:	e1a01003 	mov	r1, r3
  12b7b4:	e51b000c 	ldr	r0, [fp, #-12]
  12b7b8:	eb00022b 	bl	12c06c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b7bc:	e55b3005 	ldrb	r3, [fp, #-5]
  12b7c0:	e2833001 	add	r3, r3, #1
  12b7c4:	e54b3005 	strb	r3, [fp, #-5]
  12b7c8:	e55b3005 	ldrb	r3, [fp, #-5]
  12b7cc:	e3530003 	cmp	r3, #3
  12b7d0:	9afffff2 	bls	12b7a0 <dhcp_renew+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12b7d4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12b7d8:	e51b000c 	ldr	r0, [fp, #-12]
  12b7dc:	eb0002bd 	bl	12c2d8 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
  12b7e0:	e51b000c 	ldr	r0, [fp, #-12]
  12b7e4:	eb000775 	bl	12d5c0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b7e8:	e51b300c 	ldr	r3, [fp, #-12]
  12b7ec:	e593200c 	ldr	r2, [r3, #12]
  12b7f0:	e51b300c 	ldr	r3, [fp, #-12]
  12b7f4:	e1d331b4 	ldrh	r3, [r3, #20]
  12b7f8:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b7fc:	e6ff3073 	uxth	r3, r3
  12b800:	e1a01003 	mov	r1, r3
  12b804:	e1a00002 	mov	r0, r2
  12b808:	ebffbc50 	bl	11a950 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  12b80c:	e30e3aec 	movw	r3, #60140	; 0xeaec
  12b810:	e3403014 	movt	r3, #20
  12b814:	e5930000 	ldr	r0, [r3]
  12b818:	e51b300c 	ldr	r3, [fp, #-12]
  12b81c:	e593100c 	ldr	r1, [r3, #12]
  12b820:	e51b300c 	ldr	r3, [fp, #-12]
  12b824:	e2832024 	add	r2, r3, #36	; 0x24
  12b828:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b82c:	e58d3000 	str	r3, [sp]
  12b830:	e3a03043 	mov	r3, #67	; 0x43
  12b834:	ebfff26e 	bl	1281f4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12b838:	e51b000c 	ldr	r0, [fp, #-12]
  12b83c:	eb00072a 	bl	12d4ec <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b840:	e51b300c 	ldr	r3, [fp, #-12]
  12b844:	e5d3300a 	ldrb	r3, [r3, #10]
  12b848:	e35300ff 	cmp	r3, #255	; 0xff
  12b84c:	0a000005 	beq	12b868 <dhcp_renew+0x154>
    dhcp->tries++;
  12b850:	e51b300c 	ldr	r3, [fp, #-12]
  12b854:	e5d3300a 	ldrb	r3, [r3, #10]
  12b858:	e2833001 	add	r3, r3, #1
  12b85c:	e6ef2073 	uxtb	r2, r3
  12b860:	e51b300c 	ldr	r3, [fp, #-12]
  12b864:	e5c3200a 	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
  12b868:	e51b300c 	ldr	r3, [fp, #-12]
  12b86c:	e5d3300a 	ldrb	r3, [r3, #10]
  12b870:	e3530009 	cmp	r3, #9
  12b874:	8a00000a 	bhi	12b8a4 <dhcp_renew+0x190>
  12b878:	e51b300c 	ldr	r3, [fp, #-12]
  12b87c:	e5d3300a 	ldrb	r3, [r3, #10]
  12b880:	e6ff3073 	uxth	r3, r3
  12b884:	e1a02003 	mov	r2, r3
  12b888:	e1a02282 	lsl	r2, r2, #5
  12b88c:	e0422003 	sub	r2, r2, r3
  12b890:	e1a02102 	lsl	r2, r2, #2
  12b894:	e0823003 	add	r3, r2, r3
  12b898:	e1a03203 	lsl	r3, r3, #4
  12b89c:	e6ff3073 	uxth	r3, r3
  12b8a0:	ea000000 	b	12b8a8 <dhcp_renew+0x194>
  12b8a4:	e3043e20 	movw	r3, #20000	; 0x4e20
  12b8a8:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b8ac:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b8b0:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b8b4:	e2833003 	add	r3, r3, #3
  12b8b8:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b8bc:	e3412062 	movt	r2, #4194	; 0x1062
  12b8c0:	e0c10293 	smull	r0, r1, r3, r2
  12b8c4:	e1a022c1 	asr	r2, r1, #5
  12b8c8:	e1a03fc3 	asr	r3, r3, #31
  12b8cc:	e0423003 	sub	r3, r2, r3
  12b8d0:	e6ff2073 	uxth	r2, r3
  12b8d4:	e51b300c 	ldr	r3, [fp, #-12]
  12b8d8:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b8dc:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b8e0:	e1a00003 	mov	r0, r3
  12b8e4:	e24bd004 	sub	sp, fp, #4
  12b8e8:	e8bd8800 	pop	{fp, pc}

0012b8ec <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
  12b8ec:	e92d4800 	push	{fp, lr}
  12b8f0:	e28db004 	add	fp, sp, #4
  12b8f4:	e24dd020 	sub	sp, sp, #32
  12b8f8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b8fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b900:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b904:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
  12b908:	e3a01004 	mov	r1, #4
  12b90c:	e51b000c 	ldr	r0, [fp, #-12]
  12b910:	eb00018d 	bl	12bf4c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b914:	e3a02003 	mov	r2, #3
  12b918:	e51b100c 	ldr	r1, [fp, #-12]
  12b91c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b920:	eb0005b9 	bl	12d00c <dhcp_create_msg>
  12b924:	e1a03000 	mov	r3, r0
  12b928:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b92c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b930:	e3530000 	cmp	r3, #0
  12b934:	1a000037 	bne	12ba18 <dhcp_rebind+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b938:	e3a02002 	mov	r2, #2
  12b93c:	e3a01039 	mov	r1, #57	; 0x39
  12b940:	e51b000c 	ldr	r0, [fp, #-12]
  12b944:	eb000198 	bl	12bfac <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b948:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b94c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b950:	e1a01003 	mov	r1, r3
  12b954:	e51b000c 	ldr	r0, [fp, #-12]
  12b958:	eb0001e2 	bl	12c0e8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b95c:	e3a02004 	mov	r2, #4
  12b960:	e3a01037 	mov	r1, #55	; 0x37
  12b964:	e51b000c 	ldr	r0, [fp, #-12]
  12b968:	eb00018f 	bl	12bfac <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b96c:	e3a03000 	mov	r3, #0
  12b970:	e54b3005 	strb	r3, [fp, #-5]
  12b974:	ea000009 	b	12b9a0 <dhcp_rebind+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b978:	e55b2005 	ldrb	r2, [fp, #-5]
  12b97c:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b980:	e3403014 	movt	r3, #20
  12b984:	e7d33002 	ldrb	r3, [r3, r2]
  12b988:	e1a01003 	mov	r1, r3
  12b98c:	e51b000c 	ldr	r0, [fp, #-12]
  12b990:	eb0001b5 	bl	12c06c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b994:	e55b3005 	ldrb	r3, [fp, #-5]
  12b998:	e2833001 	add	r3, r3, #1
  12b99c:	e54b3005 	strb	r3, [fp, #-5]
  12b9a0:	e55b3005 	ldrb	r3, [fp, #-5]
  12b9a4:	e3530003 	cmp	r3, #3
  12b9a8:	9afffff2 	bls	12b978 <dhcp_rebind+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12b9ac:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12b9b0:	e51b000c 	ldr	r0, [fp, #-12]
  12b9b4:	eb000247 	bl	12c2d8 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12b9b8:	e51b000c 	ldr	r0, [fp, #-12]
  12b9bc:	eb0006ff 	bl	12d5c0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b9c0:	e51b300c 	ldr	r3, [fp, #-12]
  12b9c4:	e593200c 	ldr	r2, [r3, #12]
  12b9c8:	e51b300c 	ldr	r3, [fp, #-12]
  12b9cc:	e1d331b4 	ldrh	r3, [r3, #20]
  12b9d0:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b9d4:	e6ff3073 	uxth	r3, r3
  12b9d8:	e1a01003 	mov	r1, r3
  12b9dc:	e1a00002 	mov	r0, r2
  12b9e0:	ebffbbda 	bl	11a950 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12b9e4:	e30e3aec 	movw	r3, #60140	; 0xeaec
  12b9e8:	e3403014 	movt	r3, #20
  12b9ec:	e5930000 	ldr	r0, [r3]
  12b9f0:	e51b300c 	ldr	r3, [fp, #-12]
  12b9f4:	e593100c 	ldr	r1, [r3, #12]
  12b9f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b9fc:	e58d3000 	str	r3, [sp]
  12ba00:	e3a03043 	mov	r3, #67	; 0x43
  12ba04:	e30928d4 	movw	r2, #39124	; 0x98d4
  12ba08:	e3402014 	movt	r2, #20
  12ba0c:	ebfff1f8 	bl	1281f4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12ba10:	e51b000c 	ldr	r0, [fp, #-12]
  12ba14:	eb0006b4 	bl	12d4ec <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12ba18:	e51b300c 	ldr	r3, [fp, #-12]
  12ba1c:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba20:	e35300ff 	cmp	r3, #255	; 0xff
  12ba24:	0a000005 	beq	12ba40 <dhcp_rebind+0x154>
    dhcp->tries++;
  12ba28:	e51b300c 	ldr	r3, [fp, #-12]
  12ba2c:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba30:	e2833001 	add	r3, r3, #1
  12ba34:	e6ef2073 	uxtb	r2, r3
  12ba38:	e51b300c 	ldr	r3, [fp, #-12]
  12ba3c:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12ba40:	e51b300c 	ldr	r3, [fp, #-12]
  12ba44:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba48:	e3530009 	cmp	r3, #9
  12ba4c:	8a00000a 	bhi	12ba7c <dhcp_rebind+0x190>
  12ba50:	e51b300c 	ldr	r3, [fp, #-12]
  12ba54:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba58:	e6ff3073 	uxth	r3, r3
  12ba5c:	e1a02003 	mov	r2, r3
  12ba60:	e1a02282 	lsl	r2, r2, #5
  12ba64:	e0422003 	sub	r2, r2, r3
  12ba68:	e1a02102 	lsl	r2, r2, #2
  12ba6c:	e0823003 	add	r3, r2, r3
  12ba70:	e1a03183 	lsl	r3, r3, #3
  12ba74:	e6ff3073 	uxth	r3, r3
  12ba78:	ea000000 	b	12ba80 <dhcp_rebind+0x194>
  12ba7c:	e3023710 	movw	r3, #10000	; 0x2710
  12ba80:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12ba84:	e15b31b0 	ldrh	r3, [fp, #-16]
  12ba88:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12ba8c:	e2833003 	add	r3, r3, #3
  12ba90:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12ba94:	e3412062 	movt	r2, #4194	; 0x1062
  12ba98:	e0c10293 	smull	r0, r1, r3, r2
  12ba9c:	e1a022c1 	asr	r2, r1, #5
  12baa0:	e1a03fc3 	asr	r3, r3, #31
  12baa4:	e0423003 	sub	r3, r2, r3
  12baa8:	e6ff2073 	uxth	r2, r3
  12baac:	e51b300c 	ldr	r3, [fp, #-12]
  12bab0:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12bab4:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12bab8:	e1a00003 	mov	r0, r3
  12babc:	e24bd004 	sub	sp, fp, #4
  12bac0:	e8bd8800 	pop	{fp, pc}

0012bac4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
  12bac4:	e92d4800 	push	{fp, lr}
  12bac8:	e28db004 	add	fp, sp, #4
  12bacc:	e24dd020 	sub	sp, sp, #32
  12bad0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12bad4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bad8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12badc:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
  12bae0:	e3a01003 	mov	r1, #3
  12bae4:	e51b000c 	ldr	r0, [fp, #-12]
  12bae8:	eb000117 	bl	12bf4c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12baec:	e3a02003 	mov	r2, #3
  12baf0:	e51b100c 	ldr	r1, [fp, #-12]
  12baf4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12baf8:	eb000543 	bl	12d00c <dhcp_create_msg>
  12bafc:	e1a03000 	mov	r3, r0
  12bb00:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12bb04:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12bb08:	e3530000 	cmp	r3, #0
  12bb0c:	1a00003e 	bne	12bc0c <dhcp_reboot+0x148>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12bb10:	e3a02002 	mov	r2, #2
  12bb14:	e3a01039 	mov	r1, #57	; 0x39
  12bb18:	e51b000c 	ldr	r0, [fp, #-12]
  12bb1c:	eb000122 	bl	12bfac <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
  12bb20:	e3a01d09 	mov	r1, #576	; 0x240
  12bb24:	e51b000c 	ldr	r0, [fp, #-12]
  12bb28:	eb00016e 	bl	12c0e8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12bb2c:	e3a02004 	mov	r2, #4
  12bb30:	e3a01032 	mov	r1, #50	; 0x32
  12bb34:	e51b000c 	ldr	r0, [fp, #-12]
  12bb38:	eb00011b 	bl	12bfac <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12bb3c:	e51b300c 	ldr	r3, [fp, #-12]
  12bb40:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bb44:	e1a00003 	mov	r0, r3
  12bb48:	ebffaa9e 	bl	1165c8 <lwip_htonl>
  12bb4c:	e1a03000 	mov	r3, r0
  12bb50:	e1a01003 	mov	r1, r3
  12bb54:	e51b000c 	ldr	r0, [fp, #-12]
  12bb58:	eb000193 	bl	12c1ac <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12bb5c:	e3a02004 	mov	r2, #4
  12bb60:	e3a01037 	mov	r1, #55	; 0x37
  12bb64:	e51b000c 	ldr	r0, [fp, #-12]
  12bb68:	eb00010f 	bl	12bfac <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12bb6c:	e3a03000 	mov	r3, #0
  12bb70:	e54b3005 	strb	r3, [fp, #-5]
  12bb74:	ea000009 	b	12bba0 <dhcp_reboot+0xdc>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12bb78:	e55b2005 	ldrb	r2, [fp, #-5]
  12bb7c:	e30d303c 	movw	r3, #53308	; 0xd03c
  12bb80:	e3403014 	movt	r3, #20
  12bb84:	e7d33002 	ldrb	r3, [r3, r2]
  12bb88:	e1a01003 	mov	r1, r3
  12bb8c:	e51b000c 	ldr	r0, [fp, #-12]
  12bb90:	eb000135 	bl	12c06c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12bb94:	e55b3005 	ldrb	r3, [fp, #-5]
  12bb98:	e2833001 	add	r3, r3, #1
  12bb9c:	e54b3005 	strb	r3, [fp, #-5]
  12bba0:	e55b3005 	ldrb	r3, [fp, #-5]
  12bba4:	e3530003 	cmp	r3, #3
  12bba8:	9afffff2 	bls	12bb78 <dhcp_reboot+0xb4>
    }

    dhcp_option_trailer(dhcp);
  12bbac:	e51b000c 	ldr	r0, [fp, #-12]
  12bbb0:	eb000682 	bl	12d5c0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12bbb4:	e51b300c 	ldr	r3, [fp, #-12]
  12bbb8:	e593200c 	ldr	r2, [r3, #12]
  12bbbc:	e51b300c 	ldr	r3, [fp, #-12]
  12bbc0:	e1d331b4 	ldrh	r3, [r3, #20]
  12bbc4:	e28330f0 	add	r3, r3, #240	; 0xf0
  12bbc8:	e6ff3073 	uxth	r3, r3
  12bbcc:	e1a01003 	mov	r1, r3
  12bbd0:	e1a00002 	mov	r0, r2
  12bbd4:	ebffbb5d 	bl	11a950 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12bbd8:	e30e3aec 	movw	r3, #60140	; 0xeaec
  12bbdc:	e3403014 	movt	r3, #20
  12bbe0:	e5930000 	ldr	r0, [r3]
  12bbe4:	e51b300c 	ldr	r3, [fp, #-12]
  12bbe8:	e593100c 	ldr	r1, [r3, #12]
  12bbec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bbf0:	e58d3000 	str	r3, [sp]
  12bbf4:	e3a03043 	mov	r3, #67	; 0x43
  12bbf8:	e30928d4 	movw	r2, #39124	; 0x98d4
  12bbfc:	e3402014 	movt	r2, #20
  12bc00:	ebfff17b 	bl	1281f4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12bc04:	e51b000c 	ldr	r0, [fp, #-12]
  12bc08:	eb000637 	bl	12d4ec <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12bc0c:	e51b300c 	ldr	r3, [fp, #-12]
  12bc10:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc14:	e35300ff 	cmp	r3, #255	; 0xff
  12bc18:	0a000005 	beq	12bc34 <dhcp_reboot+0x170>
    dhcp->tries++;
  12bc1c:	e51b300c 	ldr	r3, [fp, #-12]
  12bc20:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc24:	e2833001 	add	r3, r3, #1
  12bc28:	e6ef2073 	uxtb	r2, r3
  12bc2c:	e51b300c 	ldr	r3, [fp, #-12]
  12bc30:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12bc34:	e51b300c 	ldr	r3, [fp, #-12]
  12bc38:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc3c:	e3530009 	cmp	r3, #9
  12bc40:	8a00000a 	bhi	12bc70 <dhcp_reboot+0x1ac>
  12bc44:	e51b300c 	ldr	r3, [fp, #-12]
  12bc48:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc4c:	e6ff3073 	uxth	r3, r3
  12bc50:	e1a02003 	mov	r2, r3
  12bc54:	e1a02282 	lsl	r2, r2, #5
  12bc58:	e0422003 	sub	r2, r2, r3
  12bc5c:	e1a02102 	lsl	r2, r2, #2
  12bc60:	e0823003 	add	r3, r2, r3
  12bc64:	e1a03183 	lsl	r3, r3, #3
  12bc68:	e6ff3073 	uxth	r3, r3
  12bc6c:	ea000000 	b	12bc74 <dhcp_reboot+0x1b0>
  12bc70:	e3023710 	movw	r3, #10000	; 0x2710
  12bc74:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12bc78:	e15b31b0 	ldrh	r3, [fp, #-16]
  12bc7c:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12bc80:	e2833003 	add	r3, r3, #3
  12bc84:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12bc88:	e3412062 	movt	r2, #4194	; 0x1062
  12bc8c:	e0c10293 	smull	r0, r1, r3, r2
  12bc90:	e1a022c1 	asr	r2, r1, #5
  12bc94:	e1a03fc3 	asr	r3, r3, #31
  12bc98:	e0423003 	sub	r3, r2, r3
  12bc9c:	e6ff2073 	uxth	r2, r3
  12bca0:	e51b300c 	ldr	r3, [fp, #-12]
  12bca4:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12bca8:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12bcac:	e1a00003 	mov	r0, r3
  12bcb0:	e24bd004 	sub	sp, fp, #4
  12bcb4:	e8bd8800 	pop	{fp, pc}

0012bcb8 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
  12bcb8:	e92d4800 	push	{fp, lr}
  12bcbc:	e28db004 	add	fp, sp, #4
  12bcc0:	e24dd020 	sub	sp, sp, #32
  12bcc4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12bcc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bccc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bcd0:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
  12bcd4:	e51b3008 	ldr	r3, [fp, #-8]
  12bcd8:	e3530000 	cmp	r3, #0
  12bcdc:	1a000001 	bne	12bce8 <dhcp_release+0x30>
    return ERR_ARG;
  12bce0:	e3e0300f 	mvn	r3, #15
  12bce4:	ea000068 	b	12be8c <dhcp_release+0x1d4>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
  12bce8:	e51b3008 	ldr	r3, [fp, #-8]
  12bcec:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12bcf0:	e50b3010 	str	r3, [fp, #-16]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
  12bcf4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bcf8:	eb00067b 	bl	12d6ec <dhcp_supplied_address>
  12bcfc:	e1a03000 	mov	r3, r0
  12bd00:	e54b3009 	strb	r3, [fp, #-9]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12bd04:	e3a01000 	mov	r1, #0
  12bd08:	e51b0008 	ldr	r0, [fp, #-8]
  12bd0c:	eb00008e 	bl	12bf4c <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
  12bd10:	e51b3008 	ldr	r3, [fp, #-8]
  12bd14:	e3a02000 	mov	r2, #0
  12bd18:	e5832024 	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
  12bd1c:	e51b3008 	ldr	r3, [fp, #-8]
  12bd20:	e3a02000 	mov	r2, #0
  12bd24:	e5832028 	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12bd28:	e51b3008 	ldr	r3, [fp, #-8]
  12bd2c:	e3a02000 	mov	r2, #0
  12bd30:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12bd34:	e51b3008 	ldr	r3, [fp, #-8]
  12bd38:	e3a02000 	mov	r2, #0
  12bd3c:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
  12bd40:	e51b3008 	ldr	r3, [fp, #-8]
  12bd44:	e3a02000 	mov	r2, #0
  12bd48:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12bd4c:	e51b3008 	ldr	r3, [fp, #-8]
  12bd50:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  12bd54:	e51b3008 	ldr	r3, [fp, #-8]
  12bd58:	e5832038 	str	r2, [r3, #56]	; 0x38
  12bd5c:	e51b3008 	ldr	r3, [fp, #-8]
  12bd60:	e5932038 	ldr	r2, [r3, #56]	; 0x38
  12bd64:	e51b3008 	ldr	r3, [fp, #-8]
  12bd68:	e5832034 	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
  12bd6c:	e51b3008 	ldr	r3, [fp, #-8]
  12bd70:	e3a02000 	mov	r2, #0
  12bd74:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
  12bd78:	e51b3008 	ldr	r3, [fp, #-8]
  12bd7c:	e1d322b2 	ldrh	r2, [r3, #34]	; 0x22
  12bd80:	e51b3008 	ldr	r3, [fp, #-8]
  12bd84:	e1c322b0 	strh	r2, [r3, #32]
  12bd88:	e51b3008 	ldr	r3, [fp, #-8]
  12bd8c:	e1d322b0 	ldrh	r2, [r3, #32]
  12bd90:	e51b3008 	ldr	r3, [fp, #-8]
  12bd94:	e1c321be 	strh	r2, [r3, #30]
  12bd98:	e51b3008 	ldr	r3, [fp, #-8]
  12bd9c:	e1d321be 	ldrh	r2, [r3, #30]
  12bda0:	e51b3008 	ldr	r3, [fp, #-8]
  12bda4:	e1c321bc 	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
  12bda8:	e55b3009 	ldrb	r3, [fp, #-9]
  12bdac:	e3530000 	cmp	r3, #0
  12bdb0:	1a000001 	bne	12bdbc <dhcp_release+0x104>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
  12bdb4:	e3a03000 	mov	r3, #0
  12bdb8:	ea000033 	b	12be8c <dhcp_release+0x1d4>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
  12bdbc:	e3a02007 	mov	r2, #7
  12bdc0:	e51b1008 	ldr	r1, [fp, #-8]
  12bdc4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bdc8:	eb00048f 	bl	12d00c <dhcp_create_msg>
  12bdcc:	e1a03000 	mov	r3, r0
  12bdd0:	e54b300a 	strb	r3, [fp, #-10]
  if (result == ERR_OK) {
  12bdd4:	e15b30da 	ldrsb	r3, [fp, #-10]
  12bdd8:	e3530000 	cmp	r3, #0
  12bddc:	1a000021 	bne	12be68 <dhcp_release+0x1b0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  12bde0:	e3a02004 	mov	r2, #4
  12bde4:	e3a01036 	mov	r1, #54	; 0x36
  12bde8:	e51b0008 	ldr	r0, [fp, #-8]
  12bdec:	eb00006e 	bl	12bfac <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
  12bdf0:	e51b3010 	ldr	r3, [fp, #-16]
  12bdf4:	e1a00003 	mov	r0, r3
  12bdf8:	ebffa9f2 	bl	1165c8 <lwip_htonl>
  12bdfc:	e1a03000 	mov	r3, r0
  12be00:	e1a01003 	mov	r1, r3
  12be04:	e51b0008 	ldr	r0, [fp, #-8]
  12be08:	eb0000e7 	bl	12c1ac <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12be0c:	e51b0008 	ldr	r0, [fp, #-8]
  12be10:	eb0005ea 	bl	12d5c0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12be14:	e51b3008 	ldr	r3, [fp, #-8]
  12be18:	e593200c 	ldr	r2, [r3, #12]
  12be1c:	e51b3008 	ldr	r3, [fp, #-8]
  12be20:	e1d331b4 	ldrh	r3, [r3, #20]
  12be24:	e28330f0 	add	r3, r3, #240	; 0xf0
  12be28:	e6ff3073 	uxth	r3, r3
  12be2c:	e1a01003 	mov	r1, r3
  12be30:	e1a00002 	mov	r0, r2
  12be34:	ebffbac5 	bl	11a950 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
  12be38:	e30e3aec 	movw	r3, #60140	; 0xeaec
  12be3c:	e3403014 	movt	r3, #20
  12be40:	e5930000 	ldr	r0, [r3]
  12be44:	e51b3008 	ldr	r3, [fp, #-8]
  12be48:	e593100c 	ldr	r1, [r3, #12]
  12be4c:	e24b2010 	sub	r2, fp, #16
  12be50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12be54:	e58d3000 	str	r3, [sp]
  12be58:	e3a03043 	mov	r3, #67	; 0x43
  12be5c:	ebfff0e4 	bl	1281f4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12be60:	e51b0008 	ldr	r0, [fp, #-8]
  12be64:	eb0005a0 	bl	12d4ec <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  12be68:	e30938d0 	movw	r3, #39120	; 0x98d0
  12be6c:	e3403014 	movt	r3, #20
  12be70:	e30928d0 	movw	r2, #39120	; 0x98d0
  12be74:	e3402014 	movt	r2, #20
  12be78:	e30918d0 	movw	r1, #39120	; 0x98d0
  12be7c:	e3401014 	movt	r1, #20
  12be80:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12be84:	ebffb58c 	bl	1194bc <netif_set_addr>

  return result;
  12be88:	e15b30da 	ldrsb	r3, [fp, #-10]
}
  12be8c:	e1a00003 	mov	r0, r3
  12be90:	e24bd004 	sub	sp, fp, #4
  12be94:	e8bd8800 	pop	{fp, pc}

0012be98 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
  12be98:	e92d4800 	push	{fp, lr}
  12be9c:	e28db004 	add	fp, sp, #4
  12bea0:	e24dd010 	sub	sp, sp, #16
  12bea4:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
  12bea8:	e51b3010 	ldr	r3, [fp, #-16]
  12beac:	e3530000 	cmp	r3, #0
  12beb0:	1a000007 	bne	12bed4 <dhcp_stop+0x3c>
  12beb4:	e3080e58 	movw	r0, #36440	; 0x8e58
  12beb8:	e3400014 	movt	r0, #20
  12bebc:	ebff5c94 	bl	103114 <rt_kprintf>
  12bec0:	e3001543 	movw	r1, #1347	; 0x543
  12bec4:	e3080d38 	movw	r0, #36152	; 0x8d38
  12bec8:	e3400014 	movt	r0, #20
  12becc:	ebff7c78 	bl	10b0b4 <sys_arch_assert>
  12bed0:	ea00001b 	b	12bf44 <dhcp_stop+0xac>
  dhcp = netif_dhcp_data(netif);
  12bed4:	e51b3010 	ldr	r3, [fp, #-16]
  12bed8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bedc:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
  12bee0:	e51b3008 	ldr	r3, [fp, #-8]
  12bee4:	e3530000 	cmp	r3, #0
  12bee8:	0a000015 	beq	12bf44 <dhcp_stop+0xac>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12beec:	e51b3008 	ldr	r3, [fp, #-8]
  12bef0:	e5933004 	ldr	r3, [r3, #4]
  12bef4:	e3530000 	cmp	r3, #0
  12bef8:	0a000006 	beq	12bf18 <dhcp_stop+0x80>
  12befc:	e3080e10 	movw	r0, #36368	; 0x8e10
  12bf00:	e3400014 	movt	r0, #20
  12bf04:	ebff5c82 	bl	103114 <rt_kprintf>
  12bf08:	e3a01e55 	mov	r1, #1360	; 0x550
  12bf0c:	e3080d38 	movw	r0, #36152	; 0x8d38
  12bf10:	e3400014 	movt	r0, #20
  12bf14:	ebff7c66 	bl	10b0b4 <sys_arch_assert>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12bf18:	e3a01000 	mov	r1, #0
  12bf1c:	e51b0008 	ldr	r0, [fp, #-8]
  12bf20:	eb000009 	bl	12bf4c <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
  12bf24:	e51b3008 	ldr	r3, [fp, #-8]
  12bf28:	e5d33008 	ldrb	r3, [r3, #8]
  12bf2c:	e3530000 	cmp	r3, #0
  12bf30:	0a000003 	beq	12bf44 <dhcp_stop+0xac>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12bf34:	ebfff868 	bl	12a0dc <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
  12bf38:	e51b3008 	ldr	r3, [fp, #-8]
  12bf3c:	e3a02000 	mov	r2, #0
  12bf40:	e5c32008 	strb	r2, [r3, #8]
    }
  }
}
  12bf44:	e24bd004 	sub	sp, fp, #4
  12bf48:	e8bd8800 	pop	{fp, pc}

0012bf4c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  12bf4c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12bf50:	e28db000 	add	fp, sp, #0
  12bf54:	e24dd00c 	sub	sp, sp, #12
  12bf58:	e50b0008 	str	r0, [fp, #-8]
  12bf5c:	e1a03001 	mov	r3, r1
  12bf60:	e54b3009 	strb	r3, [fp, #-9]
  if (new_state != dhcp->state) {
  12bf64:	e51b3008 	ldr	r3, [fp, #-8]
  12bf68:	e5d33009 	ldrb	r3, [r3, #9]
  12bf6c:	e55b2009 	ldrb	r2, [fp, #-9]
  12bf70:	e1520003 	cmp	r2, r3
  12bf74:	0a000008 	beq	12bf9c <dhcp_set_state+0x50>
    dhcp->state = new_state;
  12bf78:	e51b3008 	ldr	r3, [fp, #-8]
  12bf7c:	e55b2009 	ldrb	r2, [fp, #-9]
  12bf80:	e5c32009 	strb	r2, [r3, #9]
    dhcp->tries = 0;
  12bf84:	e51b3008 	ldr	r3, [fp, #-8]
  12bf88:	e3a02000 	mov	r2, #0
  12bf8c:	e5c3200a 	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
  12bf90:	e51b3008 	ldr	r3, [fp, #-8]
  12bf94:	e3a02000 	mov	r2, #0
  12bf98:	e1c321b6 	strh	r2, [r3, #22]
  }
}
  12bf9c:	e320f000 	nop	{0}
  12bfa0:	e28bd000 	add	sp, fp, #0
  12bfa4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12bfa8:	e12fff1e 	bx	lr

0012bfac <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  12bfac:	e92d4800 	push	{fp, lr}
  12bfb0:	e28db004 	add	fp, sp, #4
  12bfb4:	e24dd008 	sub	sp, sp, #8
  12bfb8:	e50b0008 	str	r0, [fp, #-8]
  12bfbc:	e1a03001 	mov	r3, r1
  12bfc0:	e54b3009 	strb	r3, [fp, #-9]
  12bfc4:	e1a03002 	mov	r3, r2
  12bfc8:	e54b300a 	strb	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  12bfcc:	e51b3008 	ldr	r3, [fp, #-8]
  12bfd0:	e1d331b4 	ldrh	r3, [r3, #20]
  12bfd4:	e1a02003 	mov	r2, r3
  12bfd8:	e55b300a 	ldrb	r3, [fp, #-10]
  12bfdc:	e0823003 	add	r3, r2, r3
  12bfe0:	e2833002 	add	r3, r3, #2
  12bfe4:	e3530044 	cmp	r3, #68	; 0x44
  12bfe8:	9a000006 	bls	12c008 <dhcp_option+0x5c>
  12bfec:	e3080e74 	movw	r0, #36468	; 0x8e74
  12bff0:	e3400014 	movt	r0, #20
  12bff4:	ebff5c46 	bl	103114 <rt_kprintf>
  12bff8:	e3001571 	movw	r1, #1393	; 0x571
  12bffc:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c000:	e3400014 	movt	r0, #20
  12c004:	ebff7c2a 	bl	10b0b4 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
  12c008:	e51b3008 	ldr	r3, [fp, #-8]
  12c00c:	e5932010 	ldr	r2, [r3, #16]
  12c010:	e51b3008 	ldr	r3, [fp, #-8]
  12c014:	e1d331b4 	ldrh	r3, [r3, #20]
  12c018:	e2831001 	add	r1, r3, #1
  12c01c:	e6ff0071 	uxth	r0, r1
  12c020:	e51b1008 	ldr	r1, [fp, #-8]
  12c024:	e1c101b4 	strh	r0, [r1, #20]
  12c028:	e0823003 	add	r3, r2, r3
  12c02c:	e55b2009 	ldrb	r2, [fp, #-9]
  12c030:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
  12c034:	e51b3008 	ldr	r3, [fp, #-8]
  12c038:	e5932010 	ldr	r2, [r3, #16]
  12c03c:	e51b3008 	ldr	r3, [fp, #-8]
  12c040:	e1d331b4 	ldrh	r3, [r3, #20]
  12c044:	e2831001 	add	r1, r3, #1
  12c048:	e6ff0071 	uxth	r0, r1
  12c04c:	e51b1008 	ldr	r1, [fp, #-8]
  12c050:	e1c101b4 	strh	r0, [r1, #20]
  12c054:	e0823003 	add	r3, r2, r3
  12c058:	e55b200a 	ldrb	r2, [fp, #-10]
  12c05c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c060:	e320f000 	nop	{0}
  12c064:	e24bd004 	sub	sp, fp, #4
  12c068:	e8bd8800 	pop	{fp, pc}

0012c06c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  12c06c:	e92d4800 	push	{fp, lr}
  12c070:	e28db004 	add	fp, sp, #4
  12c074:	e24dd008 	sub	sp, sp, #8
  12c078:	e50b0008 	str	r0, [fp, #-8]
  12c07c:	e1a03001 	mov	r3, r1
  12c080:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12c084:	e51b3008 	ldr	r3, [fp, #-8]
  12c088:	e1d331b4 	ldrh	r3, [r3, #20]
  12c08c:	e3530043 	cmp	r3, #67	; 0x43
  12c090:	9a000006 	bls	12c0b0 <dhcp_option_byte+0x44>
  12c094:	e3080ebc 	movw	r0, #36540	; 0x8ebc
  12c098:	e3400014 	movt	r0, #20
  12c09c:	ebff5c1c 	bl	103114 <rt_kprintf>
  12c0a0:	e300157c 	movw	r1, #1404	; 0x57c
  12c0a4:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c0a8:	e3400014 	movt	r0, #20
  12c0ac:	ebff7c00 	bl	10b0b4 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
  12c0b0:	e51b3008 	ldr	r3, [fp, #-8]
  12c0b4:	e5932010 	ldr	r2, [r3, #16]
  12c0b8:	e51b3008 	ldr	r3, [fp, #-8]
  12c0bc:	e1d331b4 	ldrh	r3, [r3, #20]
  12c0c0:	e2831001 	add	r1, r3, #1
  12c0c4:	e6ff0071 	uxth	r0, r1
  12c0c8:	e51b1008 	ldr	r1, [fp, #-8]
  12c0cc:	e1c101b4 	strh	r0, [r1, #20]
  12c0d0:	e0823003 	add	r3, r2, r3
  12c0d4:	e55b2009 	ldrb	r2, [fp, #-9]
  12c0d8:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c0dc:	e320f000 	nop	{0}
  12c0e0:	e24bd004 	sub	sp, fp, #4
  12c0e4:	e8bd8800 	pop	{fp, pc}

0012c0e8 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  12c0e8:	e92d4800 	push	{fp, lr}
  12c0ec:	e28db004 	add	fp, sp, #4
  12c0f0:	e24dd008 	sub	sp, sp, #8
  12c0f4:	e50b0008 	str	r0, [fp, #-8]
  12c0f8:	e1a03001 	mov	r3, r1
  12c0fc:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  12c100:	e51b3008 	ldr	r3, [fp, #-8]
  12c104:	e1d331b4 	ldrh	r3, [r3, #20]
  12c108:	e2833002 	add	r3, r3, #2
  12c10c:	e3530044 	cmp	r3, #68	; 0x44
  12c110:	9a000006 	bls	12c130 <dhcp_option_short+0x48>
  12c114:	e3080ef8 	movw	r0, #36600	; 0x8ef8
  12c118:	e3400014 	movt	r0, #20
  12c11c:	ebff5bfc 	bl	103114 <rt_kprintf>
  12c120:	e3001583 	movw	r1, #1411	; 0x583
  12c124:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c128:	e3400014 	movt	r0, #20
  12c12c:	ebff7be0 	bl	10b0b4 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
  12c130:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c134:	e1a03423 	lsr	r3, r3, #8
  12c138:	e6ffc073 	uxth	ip, r3
  12c13c:	e51b3008 	ldr	r3, [fp, #-8]
  12c140:	e5932010 	ldr	r2, [r3, #16]
  12c144:	e51b3008 	ldr	r3, [fp, #-8]
  12c148:	e1d331b4 	ldrh	r3, [r3, #20]
  12c14c:	e2831001 	add	r1, r3, #1
  12c150:	e6ff0071 	uxth	r0, r1
  12c154:	e51b1008 	ldr	r1, [fp, #-8]
  12c158:	e1c101b4 	strh	r0, [r1, #20]
  12c15c:	e6ef107c 	uxtb	r1, ip
  12c160:	e0823003 	add	r3, r2, r3
  12c164:	e1a02001 	mov	r2, r1
  12c168:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
  12c16c:	e51b3008 	ldr	r3, [fp, #-8]
  12c170:	e5932010 	ldr	r2, [r3, #16]
  12c174:	e51b3008 	ldr	r3, [fp, #-8]
  12c178:	e1d331b4 	ldrh	r3, [r3, #20]
  12c17c:	e2831001 	add	r1, r3, #1
  12c180:	e6ff0071 	uxth	r0, r1
  12c184:	e51b1008 	ldr	r1, [fp, #-8]
  12c188:	e1c101b4 	strh	r0, [r1, #20]
  12c18c:	e15b10ba 	ldrh	r1, [fp, #-10]
  12c190:	e6ef1071 	uxtb	r1, r1
  12c194:	e0823003 	add	r3, r2, r3
  12c198:	e1a02001 	mov	r2, r1
  12c19c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c1a0:	e320f000 	nop	{0}
  12c1a4:	e24bd004 	sub	sp, fp, #4
  12c1a8:	e8bd8800 	pop	{fp, pc}

0012c1ac <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  12c1ac:	e92d4800 	push	{fp, lr}
  12c1b0:	e28db004 	add	fp, sp, #4
  12c1b4:	e24dd008 	sub	sp, sp, #8
  12c1b8:	e50b0008 	str	r0, [fp, #-8]
  12c1bc:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  12c1c0:	e51b3008 	ldr	r3, [fp, #-8]
  12c1c4:	e1d331b4 	ldrh	r3, [r3, #20]
  12c1c8:	e2833004 	add	r3, r3, #4
  12c1cc:	e3530044 	cmp	r3, #68	; 0x44
  12c1d0:	9a000006 	bls	12c1f0 <dhcp_option_long+0x44>
  12c1d4:	e3080f3c 	movw	r0, #36668	; 0x8f3c
  12c1d8:	e3400014 	movt	r0, #20
  12c1dc:	ebff5bcc 	bl	103114 <rt_kprintf>
  12c1e0:	e300158b 	movw	r1, #1419	; 0x58b
  12c1e4:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c1e8:	e3400014 	movt	r0, #20
  12c1ec:	ebff7bb0 	bl	10b0b4 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
  12c1f0:	e51b300c 	ldr	r3, [fp, #-12]
  12c1f4:	e1a0cc23 	lsr	ip, r3, #24
  12c1f8:	e51b3008 	ldr	r3, [fp, #-8]
  12c1fc:	e5932010 	ldr	r2, [r3, #16]
  12c200:	e51b3008 	ldr	r3, [fp, #-8]
  12c204:	e1d331b4 	ldrh	r3, [r3, #20]
  12c208:	e2831001 	add	r1, r3, #1
  12c20c:	e6ff0071 	uxth	r0, r1
  12c210:	e51b1008 	ldr	r1, [fp, #-8]
  12c214:	e1c101b4 	strh	r0, [r1, #20]
  12c218:	e6ef107c 	uxtb	r1, ip
  12c21c:	e0823003 	add	r3, r2, r3
  12c220:	e1a02001 	mov	r2, r1
  12c224:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
  12c228:	e51b300c 	ldr	r3, [fp, #-12]
  12c22c:	e1a0c823 	lsr	ip, r3, #16
  12c230:	e51b3008 	ldr	r3, [fp, #-8]
  12c234:	e5932010 	ldr	r2, [r3, #16]
  12c238:	e51b3008 	ldr	r3, [fp, #-8]
  12c23c:	e1d331b4 	ldrh	r3, [r3, #20]
  12c240:	e2831001 	add	r1, r3, #1
  12c244:	e6ff0071 	uxth	r0, r1
  12c248:	e51b1008 	ldr	r1, [fp, #-8]
  12c24c:	e1c101b4 	strh	r0, [r1, #20]
  12c250:	e6ef107c 	uxtb	r1, ip
  12c254:	e0823003 	add	r3, r2, r3
  12c258:	e1a02001 	mov	r2, r1
  12c25c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  12c260:	e51b300c 	ldr	r3, [fp, #-12]
  12c264:	e1a0c423 	lsr	ip, r3, #8
  12c268:	e51b3008 	ldr	r3, [fp, #-8]
  12c26c:	e5932010 	ldr	r2, [r3, #16]
  12c270:	e51b3008 	ldr	r3, [fp, #-8]
  12c274:	e1d331b4 	ldrh	r3, [r3, #20]
  12c278:	e2831001 	add	r1, r3, #1
  12c27c:	e6ff0071 	uxth	r0, r1
  12c280:	e51b1008 	ldr	r1, [fp, #-8]
  12c284:	e1c101b4 	strh	r0, [r1, #20]
  12c288:	e6ef107c 	uxtb	r1, ip
  12c28c:	e0823003 	add	r3, r2, r3
  12c290:	e1a02001 	mov	r2, r1
  12c294:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
  12c298:	e51b3008 	ldr	r3, [fp, #-8]
  12c29c:	e5932010 	ldr	r2, [r3, #16]
  12c2a0:	e51b3008 	ldr	r3, [fp, #-8]
  12c2a4:	e1d331b4 	ldrh	r3, [r3, #20]
  12c2a8:	e2831001 	add	r1, r3, #1
  12c2ac:	e6ff0071 	uxth	r0, r1
  12c2b0:	e51b1008 	ldr	r1, [fp, #-8]
  12c2b4:	e1c101b4 	strh	r0, [r1, #20]
  12c2b8:	e51b100c 	ldr	r1, [fp, #-12]
  12c2bc:	e6ef1071 	uxtb	r1, r1
  12c2c0:	e0823003 	add	r3, r2, r3
  12c2c4:	e1a02001 	mov	r2, r1
  12c2c8:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c2cc:	e320f000 	nop	{0}
  12c2d0:	e24bd004 	sub	sp, fp, #4
  12c2d4:	e8bd8800 	pop	{fp, pc}

0012c2d8 <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static void
dhcp_option_hostname(struct dhcp *dhcp, struct netif *netif)
{
  12c2d8:	e92d4800 	push	{fp, lr}
  12c2dc:	e28db004 	add	fp, sp, #4
  12c2e0:	e24dd018 	sub	sp, sp, #24
  12c2e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12c2e8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  if (netif->hostname != NULL) {
  12c2ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c2f0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c2f4:	e3530000 	cmp	r3, #0
  12c2f8:	0a00003c 	beq	12c3f0 <dhcp_option_hostname+0x118>
    size_t namelen = strlen(netif->hostname);
  12c2fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c300:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c304:	e1a00003 	mov	r0, r3
  12c308:	eb00545c 	bl	141480 <strlen>
  12c30c:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > 0) {
  12c310:	e51b3010 	ldr	r3, [fp, #-16]
  12c314:	e3530000 	cmp	r3, #0
  12c318:	0a000034 	beq	12c3f0 <dhcp_option_hostname+0x118>
      size_t len;
      const char *p = netif->hostname;
  12c31c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c320:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c324:	e50b300c 	str	r3, [fp, #-12]
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - dhcp->options_out_len - 3;
  12c328:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12c32c:	e1d331b4 	ldrh	r3, [r3, #20]
  12c330:	e2633041 	rsb	r3, r3, #65	; 0x41
  12c334:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
  12c338:	e51b2010 	ldr	r2, [fp, #-16]
  12c33c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c340:	e1520003 	cmp	r2, r3
  12c344:	9a000006 	bls	12c364 <dhcp_option_hostname+0x8c>
  12c348:	e3080f7c 	movw	r0, #36732	; 0x8f7c
  12c34c:	e3400014 	movt	r0, #20
  12c350:	ebff5b6f 	bl	103114 <rt_kprintf>
  12c354:	e300159e 	movw	r1, #1438	; 0x59e
  12c358:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c35c:	e3400014 	movt	r0, #20
  12c360:	ebff7b53 	bl	10b0b4 <sys_arch_assert>
      len = LWIP_MIN(namelen, available);
  12c364:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12c368:	e51b3010 	ldr	r3, [fp, #-16]
  12c36c:	e1520003 	cmp	r2, r3
  12c370:	31a03002 	movcc	r3, r2
  12c374:	21a03003 	movcs	r3, r3
  12c378:	e50b3008 	str	r3, [fp, #-8]
      LWIP_ASSERT("DHCP: hostname is too long!", len <= 0xFF);
  12c37c:	e51b3008 	ldr	r3, [fp, #-8]
  12c380:	e35300ff 	cmp	r3, #255	; 0xff
  12c384:	9a000006 	bls	12c3a4 <dhcp_option_hostname+0xcc>
  12c388:	e3080f7c 	movw	r0, #36732	; 0x8f7c
  12c38c:	e3400014 	movt	r0, #20
  12c390:	ebff5b5f 	bl	103114 <rt_kprintf>
  12c394:	e3a01e5a 	mov	r1, #1440	; 0x5a0
  12c398:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c39c:	e3400014 	movt	r0, #20
  12c3a0:	ebff7b43 	bl	10b0b4 <sys_arch_assert>
      dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, (u8_t)len);
  12c3a4:	e51b3008 	ldr	r3, [fp, #-8]
  12c3a8:	e6ef3073 	uxtb	r3, r3
  12c3ac:	e1a02003 	mov	r2, r3
  12c3b0:	e3a0100c 	mov	r1, #12
  12c3b4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12c3b8:	ebfffefb 	bl	12bfac <dhcp_option>
      while (len--) {
  12c3bc:	ea000006 	b	12c3dc <dhcp_option_hostname+0x104>
        dhcp_option_byte(dhcp, *p++);
  12c3c0:	e51b300c 	ldr	r3, [fp, #-12]
  12c3c4:	e2832001 	add	r2, r3, #1
  12c3c8:	e50b200c 	str	r2, [fp, #-12]
  12c3cc:	e5d33000 	ldrb	r3, [r3]
  12c3d0:	e1a01003 	mov	r1, r3
  12c3d4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12c3d8:	ebffff23 	bl	12c06c <dhcp_option_byte>
      while (len--) {
  12c3dc:	e51b3008 	ldr	r3, [fp, #-8]
  12c3e0:	e2432001 	sub	r2, r3, #1
  12c3e4:	e50b2008 	str	r2, [fp, #-8]
  12c3e8:	e3530000 	cmp	r3, #0
  12c3ec:	1afffff3 	bne	12c3c0 <dhcp_option_hostname+0xe8>
      }
    }
  }
}
  12c3f0:	e320f000 	nop	{0}
  12c3f4:	e24bd004 	sub	sp, fp, #4
  12c3f8:	e8bd8800 	pop	{fp, pc}

0012c3fc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
  12c3fc:	e92d4800 	push	{fp, lr}
  12c400:	e28db004 	add	fp, sp, #4
  12c404:	e24dd038 	sub	sp, sp, #56	; 0x38
  12c408:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  12c40c:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
  12c410:	e3a03000 	mov	r3, #0
  12c414:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int parse_sname_as_options = 0;
  12c418:	e3a03000 	mov	r3, #0
  12c41c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  /* clear received options */
  dhcp_clear_all_options(dhcp);
  12c420:	e3a0200a 	mov	r2, #10
  12c424:	e3a01000 	mov	r1, #0
  12c428:	e30c0c54 	movw	r0, #52308	; 0xcc54
  12c42c:	e3400015 	movt	r0, #21
  12c430:	eb005381 	bl	14123c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
  12c434:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c438:	e1d330ba 	ldrh	r3, [r3, #10]
  12c43c:	e353002b 	cmp	r3, #43	; 0x2b
  12c440:	8a000001 	bhi	12c44c <dhcp_parse_reply+0x50>
    return ERR_BUF;
  12c444:	e3e03001 	mvn	r3, #1
  12c448:	ea00022e 	b	12cd08 <dhcp_parse_reply+0x90c>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
  12c44c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c450:	e5932004 	ldr	r2, [r3, #4]
  12c454:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12c458:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
  12c45c:	e3a030f0 	mov	r3, #240	; 0xf0
  12c460:	e14b30be 	strh	r3, [fp, #-14]
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
  12c464:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c468:	e1d330b8 	ldrh	r3, [r3, #8]
  12c46c:	e14b31b0 	strh	r3, [fp, #-16]
again:
  q = p;
  12c470:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c474:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c478:	ea00000c 	b	12c4b0 <dhcp_parse_reply+0xb4>
    options_idx -= q->len;
  12c47c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c480:	e1d330ba 	ldrh	r3, [r3, #10]
  12c484:	e15b20be 	ldrh	r2, [fp, #-14]
  12c488:	e0423003 	sub	r3, r2, r3
  12c48c:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max -= q->len;
  12c490:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c494:	e1d330ba 	ldrh	r3, [r3, #10]
  12c498:	e15b21b0 	ldrh	r2, [fp, #-16]
  12c49c:	e0423003 	sub	r3, r2, r3
  12c4a0:	e14b31b0 	strh	r3, [fp, #-16]
    q = q->next;
  12c4a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4a8:	e5933000 	ldr	r3, [r3]
  12c4ac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c4b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4b4:	e3530000 	cmp	r3, #0
  12c4b8:	0a000004 	beq	12c4d0 <dhcp_parse_reply+0xd4>
  12c4bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4c0:	e1d330ba 	ldrh	r3, [r3, #10]
  12c4c4:	e15b20be 	ldrh	r2, [fp, #-14]
  12c4c8:	e1520003 	cmp	r2, r3
  12c4cc:	2affffea 	bcs	12c47c <dhcp_parse_reply+0x80>
  }
  if (q == NULL) {
  12c4d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4d4:	e3530000 	cmp	r3, #0
  12c4d8:	1a000001 	bne	12c4e4 <dhcp_parse_reply+0xe8>
    return ERR_BUF;
  12c4dc:	e3e03001 	mvn	r3, #1
  12c4e0:	ea000208 	b	12cd08 <dhcp_parse_reply+0x90c>
  }
  offset = options_idx;
  12c4e4:	e15b30be 	ldrh	r3, [fp, #-14]
  12c4e8:	e14b30ba 	strh	r3, [fp, #-10]
  offset_max = options_idx_max;
  12c4ec:	e15b31b0 	ldrh	r3, [fp, #-16]
  12c4f0:	e14b30bc 	strh	r3, [fp, #-12]
  options = (u8_t*)q->payload;
  12c4f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4f8:	e5933004 	ldr	r3, [r3, #4]
  12c4fc:	e50b3008 	str	r3, [fp, #-8]
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12c500:	ea0001be 	b	12cc00 <dhcp_parse_reply+0x804>
    u8_t op = options[offset];
  12c504:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c508:	e51b2008 	ldr	r2, [fp, #-8]
  12c50c:	e0823003 	add	r3, r2, r3
  12c510:	e5d33000 	ldrb	r3, [r3]
  12c514:	e54b3027 	strb	r3, [fp, #-39]	; 0xffffffd9
    u8_t len;
    u8_t decode_len = 0;
  12c518:	e3a03000 	mov	r3, #0
  12c51c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    int decode_idx = -1;
  12c520:	e3e03000 	mvn	r3, #0
  12c524:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    u16_t val_offset = offset + 2;
  12c528:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c52c:	e2833002 	add	r3, r3, #2
  12c530:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
  12c534:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c538:	e2833001 	add	r3, r3, #1
  12c53c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12c540:	e1d220ba 	ldrh	r2, [r2, #10]
  12c544:	e1530002 	cmp	r3, r2
  12c548:	aa000006 	bge	12c568 <dhcp_parse_reply+0x16c>
      len = options[offset + 1];
  12c54c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c550:	e2833001 	add	r3, r3, #1
  12c554:	e51b2008 	ldr	r2, [fp, #-8]
  12c558:	e0823003 	add	r3, r2, r3
  12c55c:	e5d33000 	ldrb	r3, [r3]
  12c560:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c564:	ea00000a 	b	12c594 <dhcp_parse_reply+0x198>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
  12c568:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c56c:	e5933000 	ldr	r3, [r3]
  12c570:	e3530000 	cmp	r3, #0
  12c574:	0a000004 	beq	12c58c <dhcp_parse_reply+0x190>
  12c578:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c57c:	e5933000 	ldr	r3, [r3]
  12c580:	e5933004 	ldr	r3, [r3, #4]
  12c584:	e5d33000 	ldrb	r3, [r3]
  12c588:	ea000000 	b	12c590 <dhcp_parse_reply+0x194>
  12c58c:	e3a03000 	mov	r3, #0
  12c590:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  12c594:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c598:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    switch(op) {
  12c59c:	e55b3027 	ldrb	r3, [fp, #-39]	; 0xffffffd9
  12c5a0:	e353003b 	cmp	r3, #59	; 0x3b
  12c5a4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12c5a8:	ea0000ed 	b	12c964 <dhcp_parse_reply+0x568>
  12c5ac:	0012c69c 	.word	0x0012c69c
  12c5b0:	0012c6bc 	.word	0x0012c6bc
  12c5b4:	0012c964 	.word	0x0012c964
  12c5b8:	0012c6f8 	.word	0x0012c6f8
  12c5bc:	0012c964 	.word	0x0012c964
  12c5c0:	0012c964 	.word	0x0012c964
  12c5c4:	0012c740 	.word	0x0012c740
  12c5c8:	0012c964 	.word	0x0012c964
  12c5cc:	0012c964 	.word	0x0012c964
  12c5d0:	0012c964 	.word	0x0012c964
  12c5d4:	0012c964 	.word	0x0012c964
  12c5d8:	0012c964 	.word	0x0012c964
  12c5dc:	0012c964 	.word	0x0012c964
  12c5e0:	0012c964 	.word	0x0012c964
  12c5e4:	0012c964 	.word	0x0012c964
  12c5e8:	0012c964 	.word	0x0012c964
  12c5ec:	0012c964 	.word	0x0012c964
  12c5f0:	0012c964 	.word	0x0012c964
  12c5f4:	0012c964 	.word	0x0012c964
  12c5f8:	0012c964 	.word	0x0012c964
  12c5fc:	0012c964 	.word	0x0012c964
  12c600:	0012c964 	.word	0x0012c964
  12c604:	0012c964 	.word	0x0012c964
  12c608:	0012c964 	.word	0x0012c964
  12c60c:	0012c964 	.word	0x0012c964
  12c610:	0012c964 	.word	0x0012c964
  12c614:	0012c964 	.word	0x0012c964
  12c618:	0012c964 	.word	0x0012c964
  12c61c:	0012c964 	.word	0x0012c964
  12c620:	0012c964 	.word	0x0012c964
  12c624:	0012c964 	.word	0x0012c964
  12c628:	0012c964 	.word	0x0012c964
  12c62c:	0012c964 	.word	0x0012c964
  12c630:	0012c964 	.word	0x0012c964
  12c634:	0012c964 	.word	0x0012c964
  12c638:	0012c964 	.word	0x0012c964
  12c63c:	0012c964 	.word	0x0012c964
  12c640:	0012c964 	.word	0x0012c964
  12c644:	0012c964 	.word	0x0012c964
  12c648:	0012c964 	.word	0x0012c964
  12c64c:	0012c964 	.word	0x0012c964
  12c650:	0012c964 	.word	0x0012c964
  12c654:	0012c964 	.word	0x0012c964
  12c658:	0012c964 	.word	0x0012c964
  12c65c:	0012c964 	.word	0x0012c964
  12c660:	0012c964 	.word	0x0012c964
  12c664:	0012c964 	.word	0x0012c964
  12c668:	0012c964 	.word	0x0012c964
  12c66c:	0012c964 	.word	0x0012c964
  12c670:	0012c964 	.word	0x0012c964
  12c674:	0012c964 	.word	0x0012c964
  12c678:	0012c7cc 	.word	0x0012c7cc
  12c67c:	0012c808 	.word	0x0012c808
  12c680:	0012c874 	.word	0x0012c874
  12c684:	0012c8b0 	.word	0x0012c8b0
  12c688:	0012c964 	.word	0x0012c964
  12c68c:	0012c964 	.word	0x0012c964
  12c690:	0012c964 	.word	0x0012c964
  12c694:	0012c8ec 	.word	0x0012c8ec
  12c698:	0012c928 	.word	0x0012c928
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
  12c69c:	e3a03000 	mov	r3, #0
  12c6a0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c6a4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c6a8:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        /* will be increased below */
        offset--;
  12c6ac:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c6b0:	e2433001 	sub	r3, r3, #1
  12c6b4:	e14b30ba 	strh	r3, [fp, #-10]
        break;
  12c6b8:	ea0000ac 	b	12c970 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c6bc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c6c0:	e3530004 	cmp	r3, #4
  12c6c4:	0a000008 	beq	12c6ec <dhcp_parse_reply+0x2f0>
  12c6c8:	e3080f98 	movw	r0, #36760	; 0x8f98
  12c6cc:	e3400014 	movt	r0, #20
  12c6d0:	ebff5a8f 	bl	103114 <rt_kprintf>
  12c6d4:	e30015f7 	movw	r1, #1527	; 0x5f7
  12c6d8:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c6dc:	e3400014 	movt	r0, #20
  12c6e0:	ebff7a73 	bl	10b0b4 <sys_arch_assert>
  12c6e4:	e3e03005 	mvn	r3, #5
  12c6e8:	ea000186 	b	12cd08 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
  12c6ec:	e3a03006 	mov	r3, #6
  12c6f0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c6f4:	ea00009d 	b	12c970 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
  12c6f8:	e3a03004 	mov	r3, #4
  12c6fc:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c700:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c704:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c708:	e1520003 	cmp	r2, r3
  12c70c:	2a000008 	bcs	12c734 <dhcp_parse_reply+0x338>
  12c710:	e3080fa4 	movw	r0, #36772	; 0x8fa4
  12c714:	e3400014 	movt	r0, #20
  12c718:	ebff5a7d 	bl	103114 <rt_kprintf>
  12c71c:	e30015fc 	movw	r1, #1532	; 0x5fc
  12c720:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c724:	e3400014 	movt	r0, #20
  12c728:	ebff7a61 	bl	10b0b4 <sys_arch_assert>
  12c72c:	e3e03005 	mvn	r3, #5
  12c730:	ea000174 	b	12cd08 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
  12c734:	e3a03007 	mov	r3, #7
  12c738:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c73c:	ea00008b 	b	12c970 <dhcp_parse_reply+0x574>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
  12c740:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c744:	e2033003 	and	r3, r3, #3
  12c748:	e6ef3073 	uxtb	r3, r3
  12c74c:	e3530000 	cmp	r3, #0
  12c750:	0a000008 	beq	12c778 <dhcp_parse_reply+0x37c>
  12c754:	e3080fb8 	movw	r0, #36792	; 0x8fb8
  12c758:	e3400014 	movt	r0, #20
  12c75c:	ebff5a6c 	bl	103114 <rt_kprintf>
  12c760:	e3001602 	movw	r1, #1538	; 0x602
  12c764:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c768:	e3400014 	movt	r0, #20
  12c76c:	ebff7a50 	bl	10b0b4 <sys_arch_assert>
  12c770:	e3e03005 	mvn	r3, #5
  12c774:	ea000163 	b	12cd08 <dhcp_parse_reply+0x90c>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
  12c778:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c77c:	e3530008 	cmp	r3, #8
  12c780:	31a03003 	movcc	r3, r3
  12c784:	23a03008 	movcs	r3, #8
  12c788:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c78c:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c790:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c794:	e1520003 	cmp	r2, r3
  12c798:	2a000008 	bcs	12c7c0 <dhcp_parse_reply+0x3c4>
  12c79c:	e3080fa4 	movw	r0, #36772	; 0x8fa4
  12c7a0:	e3400014 	movt	r0, #20
  12c7a4:	ebff5a5a 	bl	103114 <rt_kprintf>
  12c7a8:	e3001605 	movw	r1, #1541	; 0x605
  12c7ac:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c7b0:	e3400014 	movt	r0, #20
  12c7b4:	ebff7a3e 	bl	10b0b4 <sys_arch_assert>
  12c7b8:	e3e03005 	mvn	r3, #5
  12c7bc:	ea000151 	b	12cd08 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
  12c7c0:	e3a03008 	mov	r3, #8
  12c7c4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c7c8:	ea000068 	b	12c970 <dhcp_parse_reply+0x574>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c7cc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c7d0:	e3530004 	cmp	r3, #4
  12c7d4:	0a000008 	beq	12c7fc <dhcp_parse_reply+0x400>
  12c7d8:	e3080f98 	movw	r0, #36760	; 0x8f98
  12c7dc:	e3400014 	movt	r0, #20
  12c7e0:	ebff5a4b 	bl	103114 <rt_kprintf>
  12c7e4:	e300160a 	movw	r1, #1546	; 0x60a
  12c7e8:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c7ec:	e3400014 	movt	r0, #20
  12c7f0:	ebff7a2f 	bl	10b0b4 <sys_arch_assert>
  12c7f4:	e3e03005 	mvn	r3, #5
  12c7f8:	ea000142 	b	12cd08 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
  12c7fc:	e3a03003 	mov	r3, #3
  12c800:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c804:	ea000059 	b	12c970 <dhcp_parse_reply+0x574>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12c808:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c80c:	e3530001 	cmp	r3, #1
  12c810:	0a000008 	beq	12c838 <dhcp_parse_reply+0x43c>
  12c814:	e3080fc8 	movw	r0, #36808	; 0x8fc8
  12c818:	e3400014 	movt	r0, #20
  12c81c:	ebff5a3c 	bl	103114 <rt_kprintf>
  12c820:	e3001618 	movw	r1, #1560	; 0x618
  12c824:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c828:	e3400014 	movt	r0, #20
  12c82c:	ebff7a20 	bl	10b0b4 <sys_arch_assert>
  12c830:	e3e03005 	mvn	r3, #5
  12c834:	ea000133 	b	12cd08 <dhcp_parse_reply+0x90c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
  12c838:	e15b30be 	ldrh	r3, [fp, #-14]
  12c83c:	e35300f0 	cmp	r3, #240	; 0xf0
  12c840:	0a000008 	beq	12c868 <dhcp_parse_reply+0x46c>
  12c844:	e3080fd4 	movw	r0, #36820	; 0x8fd4
  12c848:	e3400014 	movt	r0, #20
  12c84c:	ebff5a30 	bl	103114 <rt_kprintf>
  12c850:	e300161a 	movw	r1, #1562	; 0x61a
  12c854:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c858:	e3400014 	movt	r0, #20
  12c85c:	ebff7a14 	bl	10b0b4 <sys_arch_assert>
  12c860:	e3e03005 	mvn	r3, #5
  12c864:	ea000127 	b	12cd08 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
  12c868:	e3a03000 	mov	r3, #0
  12c86c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c870:	ea00003e 	b	12c970 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12c874:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c878:	e3530001 	cmp	r3, #1
  12c87c:	0a000008 	beq	12c8a4 <dhcp_parse_reply+0x4a8>
  12c880:	e3080fc8 	movw	r0, #36808	; 0x8fc8
  12c884:	e3400014 	movt	r0, #20
  12c888:	ebff5a21 	bl	103114 <rt_kprintf>
  12c88c:	e300161e 	movw	r1, #1566	; 0x61e
  12c890:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c894:	e3400014 	movt	r0, #20
  12c898:	ebff7a05 	bl	10b0b4 <sys_arch_assert>
  12c89c:	e3e03005 	mvn	r3, #5
  12c8a0:	ea000118 	b	12cd08 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
  12c8a4:	e3a03001 	mov	r3, #1
  12c8a8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c8ac:	ea00002f 	b	12c970 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c8b0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c8b4:	e3530004 	cmp	r3, #4
  12c8b8:	0a000008 	beq	12c8e0 <dhcp_parse_reply+0x4e4>
  12c8bc:	e3080f98 	movw	r0, #36760	; 0x8f98
  12c8c0:	e3400014 	movt	r0, #20
  12c8c4:	ebff5a12 	bl	103114 <rt_kprintf>
  12c8c8:	e3001622 	movw	r1, #1570	; 0x622
  12c8cc:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c8d0:	e3400014 	movt	r0, #20
  12c8d4:	ebff79f6 	bl	10b0b4 <sys_arch_assert>
  12c8d8:	e3e03005 	mvn	r3, #5
  12c8dc:	ea000109 	b	12cd08 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
  12c8e0:	e3a03002 	mov	r3, #2
  12c8e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c8e8:	ea000020 	b	12c970 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c8ec:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c8f0:	e3530004 	cmp	r3, #4
  12c8f4:	0a000008 	beq	12c91c <dhcp_parse_reply+0x520>
  12c8f8:	e3080f98 	movw	r0, #36760	; 0x8f98
  12c8fc:	e3400014 	movt	r0, #20
  12c900:	ebff5a03 	bl	103114 <rt_kprintf>
  12c904:	e3001626 	movw	r1, #1574	; 0x626
  12c908:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c90c:	e3400014 	movt	r0, #20
  12c910:	ebff79e7 	bl	10b0b4 <sys_arch_assert>
  12c914:	e3e03005 	mvn	r3, #5
  12c918:	ea0000fa 	b	12cd08 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T1;
  12c91c:	e3a03004 	mov	r3, #4
  12c920:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c924:	ea000011 	b	12c970 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c928:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c92c:	e3530004 	cmp	r3, #4
  12c930:	0a000008 	beq	12c958 <dhcp_parse_reply+0x55c>
  12c934:	e3080f98 	movw	r0, #36760	; 0x8f98
  12c938:	e3400014 	movt	r0, #20
  12c93c:	ebff59f4 	bl	103114 <rt_kprintf>
  12c940:	e300162a 	movw	r1, #1578	; 0x62a
  12c944:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c948:	e3400014 	movt	r0, #20
  12c94c:	ebff79d8 	bl	10b0b4 <sys_arch_assert>
  12c950:	e3e03005 	mvn	r3, #5
  12c954:	ea0000eb 	b	12cd08 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T2;
  12c958:	e3a03005 	mov	r3, #5
  12c95c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c960:	ea000002 	b	12c970 <dhcp_parse_reply+0x574>
      default:
        decode_len = 0;
  12c964:	e3a03000 	mov	r3, #0
  12c968:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
  12c96c:	e320f000 	nop	{0}
    }
    offset += len + 2;
  12c970:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c974:	e6ff2073 	uxth	r2, r3
  12c978:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c97c:	e0823003 	add	r3, r2, r3
  12c980:	e6ff3073 	uxth	r3, r3
  12c984:	e2833002 	add	r3, r3, #2
  12c988:	e14b30ba 	strh	r3, [fp, #-10]
    if (decode_len > 0) {
  12c98c:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c990:	e3530000 	cmp	r3, #0
  12c994:	0a000073 	beq	12cb68 <dhcp_parse_reply+0x76c>
      u32_t value = 0;
  12c998:	e3a03000 	mov	r3, #0
  12c99c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
  12c9a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c9a4:	e3530000 	cmp	r3, #0
  12c9a8:	ba000002 	blt	12c9b8 <dhcp_parse_reply+0x5bc>
  12c9ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c9b0:	e3530009 	cmp	r3, #9
  12c9b4:	da000006 	ble	12c9d4 <dhcp_parse_reply+0x5d8>
  12c9b8:	e3080fec 	movw	r0, #36844	; 0x8fec
  12c9bc:	e3400014 	movt	r0, #20
  12c9c0:	ebff59d3 	bl	103114 <rt_kprintf>
  12c9c4:	e3001637 	movw	r1, #1591	; 0x637
  12c9c8:	e3080d38 	movw	r0, #36152	; 0x8d38
  12c9cc:	e3400014 	movt	r0, #20
  12c9d0:	ebff79b7 	bl	10b0b4 <sys_arch_assert>
      if (!dhcp_option_given(dhcp, decode_idx)) {
  12c9d4:	e30c3c54 	movw	r3, #52308	; 0xcc54
  12c9d8:	e3403015 	movt	r3, #21
  12c9dc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c9e0:	e0833002 	add	r3, r3, r2
  12c9e4:	e5d33000 	ldrb	r3, [r3]
  12c9e8:	e3530000 	cmp	r3, #0
  12c9ec:	1a00005d 	bne	12cb68 <dhcp_parse_reply+0x76c>
        copy_len = LWIP_MIN(decode_len, 4);
  12c9f0:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c9f4:	e3530004 	cmp	r3, #4
  12c9f8:	31a03003 	movcc	r3, r3
  12c9fc:	23a03004 	movcs	r3, #4
  12ca00:	e6ef3073 	uxtb	r3, r3
  12ca04:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
  12ca08:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12ca0c:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  12ca10:	e24b1034 	sub	r1, fp, #52	; 0x34
  12ca14:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12ca18:	ebffbb20 	bl	11b6a0 <pbuf_copy_partial>
  12ca1c:	e1a03000 	mov	r3, r0
  12ca20:	e1a02003 	mov	r2, r3
  12ca24:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  12ca28:	e1530002 	cmp	r3, r2
  12ca2c:	0a000001 	beq	12ca38 <dhcp_parse_reply+0x63c>
          return ERR_BUF;
  12ca30:	e3e03001 	mvn	r3, #1
  12ca34:	ea0000b3 	b	12cd08 <dhcp_parse_reply+0x90c>
        }
        if (decode_len > 4) {
  12ca38:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12ca3c:	e3530004 	cmp	r3, #4
  12ca40:	9a000025 	bls	12cadc <dhcp_parse_reply+0x6e0>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
  12ca44:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12ca48:	e2033003 	and	r3, r3, #3
  12ca4c:	e6ef3073 	uxtb	r3, r3
  12ca50:	e3530000 	cmp	r3, #0
  12ca54:	0a000008 	beq	12ca7c <dhcp_parse_reply+0x680>
  12ca58:	e3090000 	movw	r0, #36864	; 0x9000
  12ca5c:	e3400014 	movt	r0, #20
  12ca60:	ebff59ab 	bl	103114 <rt_kprintf>
  12ca64:	e300163f 	movw	r1, #1599	; 0x63f
  12ca68:	e3080d38 	movw	r0, #36152	; 0x8d38
  12ca6c:	e3400014 	movt	r0, #20
  12ca70:	ebff798f 	bl	10b0b4 <sys_arch_assert>
  12ca74:	e3e03005 	mvn	r3, #5
  12ca78:	ea0000a2 	b	12cd08 <dhcp_parse_reply+0x90c>
          dhcp_got_option(dhcp, decode_idx);
  12ca7c:	e30c3c54 	movw	r3, #52308	; 0xcc54
  12ca80:	e3403015 	movt	r3, #21
  12ca84:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12ca88:	e0833002 	add	r3, r3, r2
  12ca8c:	e3a02001 	mov	r2, #1
  12ca90:	e5c32000 	strb	r2, [r3]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
  12ca94:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ca98:	e1a00003 	mov	r0, r3
  12ca9c:	ebffa6c9 	bl	1165c8 <lwip_htonl>
  12caa0:	e1a01000 	mov	r1, r0
  12caa4:	e30c3c60 	movw	r3, #52320	; 0xcc60
  12caa8:	e3403015 	movt	r3, #21
  12caac:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12cab0:	e7831102 	str	r1, [r3, r2, lsl #2]
          decode_len -= 4;
  12cab4:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12cab8:	e2433004 	sub	r3, r3, #4
  12cabc:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
          val_offset += 4;
  12cac0:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12cac4:	e2833004 	add	r3, r3, #4
  12cac8:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
          decode_idx++;
  12cacc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12cad0:	e2833001 	add	r3, r3, #1
  12cad4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
          goto decode_next;
  12cad8:	eaffffb0 	b	12c9a0 <dhcp_parse_reply+0x5a4>
        } else if (decode_len == 4) {
  12cadc:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12cae0:	e3530004 	cmp	r3, #4
  12cae4:	1a000005 	bne	12cb00 <dhcp_parse_reply+0x704>
          value = lwip_ntohl(value);
  12cae8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12caec:	e1a00003 	mov	r0, r3
  12caf0:	ebffa6b4 	bl	1165c8 <lwip_htonl>
  12caf4:	e1a03000 	mov	r3, r0
  12caf8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  12cafc:	ea00000e 	b	12cb3c <dhcp_parse_reply+0x740>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
  12cb00:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12cb04:	e3530001 	cmp	r3, #1
  12cb08:	0a000008 	beq	12cb30 <dhcp_parse_reply+0x734>
  12cb0c:	e3090018 	movw	r0, #36888	; 0x9018
  12cb10:	e3400014 	movt	r0, #20
  12cb14:	ebff597e 	bl	103114 <rt_kprintf>
  12cb18:	e3001649 	movw	r1, #1609	; 0x649
  12cb1c:	e3080d38 	movw	r0, #36152	; 0x8d38
  12cb20:	e3400014 	movt	r0, #20
  12cb24:	ebff7962 	bl	10b0b4 <sys_arch_assert>
  12cb28:	e3e03005 	mvn	r3, #5
  12cb2c:	ea000075 	b	12cd08 <dhcp_parse_reply+0x90c>
          value = ((u8_t*)&value)[0];
  12cb30:	e24b3034 	sub	r3, fp, #52	; 0x34
  12cb34:	e5d33000 	ldrb	r3, [r3]
  12cb38:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
        }
        dhcp_got_option(dhcp, decode_idx);
  12cb3c:	e30c3c54 	movw	r3, #52308	; 0xcc54
  12cb40:	e3403015 	movt	r3, #21
  12cb44:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12cb48:	e0833002 	add	r3, r3, r2
  12cb4c:	e3a02001 	mov	r2, #1
  12cb50:	e5c32000 	strb	r2, [r3]
        dhcp_set_option_value(dhcp, decode_idx, value);
  12cb54:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12cb58:	e30c3c60 	movw	r3, #52320	; 0xcc60
  12cb5c:	e3403015 	movt	r3, #21
  12cb60:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12cb64:	e7831102 	str	r1, [r3, r2, lsl #2]
      }
    }
    if (offset >= q->len) {
  12cb68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cb6c:	e1d330ba 	ldrh	r3, [r3, #10]
  12cb70:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cb74:	e1520003 	cmp	r2, r3
  12cb78:	3a000020 	bcc	12cc00 <dhcp_parse_reply+0x804>
      offset -= q->len;
  12cb7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cb80:	e1d330ba 	ldrh	r3, [r3, #10]
  12cb84:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cb88:	e0423003 	sub	r3, r2, r3
  12cb8c:	e14b30ba 	strh	r3, [fp, #-10]
      offset_max -= q->len;
  12cb90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cb94:	e1d330ba 	ldrh	r3, [r3, #10]
  12cb98:	e15b20bc 	ldrh	r2, [fp, #-12]
  12cb9c:	e0423003 	sub	r3, r2, r3
  12cba0:	e14b30bc 	strh	r3, [fp, #-12]
      if ((offset < offset_max) && offset_max) {
  12cba4:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cba8:	e15b30bc 	ldrh	r3, [fp, #-12]
  12cbac:	e1520003 	cmp	r2, r3
  12cbb0:	2a00001f 	bcs	12cc34 <dhcp_parse_reply+0x838>
  12cbb4:	e15b30bc 	ldrh	r3, [fp, #-12]
  12cbb8:	e3530000 	cmp	r3, #0
  12cbbc:	0a00001c 	beq	12cc34 <dhcp_parse_reply+0x838>
        q = q->next;
  12cbc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cbc4:	e5933000 	ldr	r3, [r3]
  12cbc8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("next pbuf was null", q);
  12cbcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cbd0:	e3530000 	cmp	r3, #0
  12cbd4:	1a000006 	bne	12cbf4 <dhcp_parse_reply+0x7f8>
  12cbd8:	e309002c 	movw	r0, #36908	; 0x902c
  12cbdc:	e3400014 	movt	r0, #20
  12cbe0:	ebff594b 	bl	103114 <rt_kprintf>
  12cbe4:	e3001655 	movw	r1, #1621	; 0x655
  12cbe8:	e3080d38 	movw	r0, #36152	; 0x8d38
  12cbec:	e3400014 	movt	r0, #20
  12cbf0:	ebff792f 	bl	10b0b4 <sys_arch_assert>
        options = (u8_t*)q->payload;
  12cbf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cbf8:	e5933004 	ldr	r3, [r3, #4]
  12cbfc:	e50b3008 	str	r3, [fp, #-8]
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12cc00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cc04:	e3530000 	cmp	r3, #0
  12cc08:	0a000009 	beq	12cc34 <dhcp_parse_reply+0x838>
  12cc0c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12cc10:	e51b2008 	ldr	r2, [fp, #-8]
  12cc14:	e0823003 	add	r3, r2, r3
  12cc18:	e5d33000 	ldrb	r3, [r3]
  12cc1c:	e35300ff 	cmp	r3, #255	; 0xff
  12cc20:	0a000003 	beq	12cc34 <dhcp_parse_reply+0x838>
  12cc24:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cc28:	e15b30bc 	ldrh	r3, [fp, #-12]
  12cc2c:	e1520003 	cmp	r2, r3
  12cc30:	3afffe33 	bcc	12c504 <dhcp_parse_reply+0x108>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
  12cc34:	e30c3c54 	movw	r3, #52308	; 0xcc54
  12cc38:	e3403015 	movt	r3, #21
  12cc3c:	e5d33000 	ldrb	r3, [r3]
  12cc40:	e3530000 	cmp	r3, #0
  12cc44:	0a00001a 	beq	12ccb4 <dhcp_parse_reply+0x8b8>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12cc48:	e30c3c60 	movw	r3, #52320	; 0xcc60
  12cc4c:	e3403015 	movt	r3, #21
  12cc50:	e5933000 	ldr	r3, [r3]
  12cc54:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12cc58:	e30c3c54 	movw	r3, #52308	; 0xcc54
  12cc5c:	e3403015 	movt	r3, #21
  12cc60:	e3a02000 	mov	r2, #0
  12cc64:	e5c32000 	strb	r2, [r3]
    if (overload == DHCP_OVERLOAD_FILE) {
  12cc68:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12cc6c:	e3530001 	cmp	r3, #1
  12cc70:	1a000002 	bne	12cc80 <dhcp_parse_reply+0x884>
      parse_file_as_options = 1;
  12cc74:	e3a03001 	mov	r3, #1
  12cc78:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  12cc7c:	ea00000c 	b	12ccb4 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
  12cc80:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12cc84:	e3530002 	cmp	r3, #2
  12cc88:	1a000002 	bne	12cc98 <dhcp_parse_reply+0x89c>
      parse_sname_as_options = 1;
  12cc8c:	e3a03001 	mov	r3, #1
  12cc90:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  12cc94:	ea000006 	b	12ccb4 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
  12cc98:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12cc9c:	e3530003 	cmp	r3, #3
  12cca0:	1a000003 	bne	12ccb4 <dhcp_parse_reply+0x8b8>
      parse_sname_as_options = 1;
  12cca4:	e3a03001 	mov	r3, #1
  12cca8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      parse_file_as_options = 1;
  12ccac:	e3a03001 	mov	r3, #1
  12ccb0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
  12ccb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ccb8:	e3530000 	cmp	r3, #0
  12ccbc:	0a000006 	beq	12ccdc <dhcp_parse_reply+0x8e0>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
  12ccc0:	e3a03000 	mov	r3, #0
  12ccc4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    options_idx = DHCP_FILE_OFS;
  12ccc8:	e3a0306c 	mov	r3, #108	; 0x6c
  12cccc:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
  12ccd0:	e3a030ec 	mov	r3, #236	; 0xec
  12ccd4:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12ccd8:	eafffde4 	b	12c470 <dhcp_parse_reply+0x74>
  } else if (parse_sname_as_options) {
  12ccdc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cce0:	e3530000 	cmp	r3, #0
  12cce4:	0a000006 	beq	12cd04 <dhcp_parse_reply+0x908>
    parse_sname_as_options = 0;
  12cce8:	e3a03000 	mov	r3, #0
  12ccec:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    options_idx = DHCP_SNAME_OFS;
  12ccf0:	e3a0302c 	mov	r3, #44	; 0x2c
  12ccf4:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
  12ccf8:	e3a0306c 	mov	r3, #108	; 0x6c
  12ccfc:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12cd00:	eafffdda 	b	12c470 <dhcp_parse_reply+0x74>
  }
  return ERR_OK;
  12cd04:	e3a03000 	mov	r3, #0
}
  12cd08:	e1a00003 	mov	r0, r3
  12cd0c:	e24bd004 	sub	sp, fp, #4
  12cd10:	e8bd8800 	pop	{fp, pc}

0012cd14 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  12cd14:	e92d4800 	push	{fp, lr}
  12cd18:	e28db004 	add	fp, sp, #4
  12cd1c:	e24dd028 	sub	sp, sp, #40	; 0x28
  12cd20:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12cd24:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  12cd28:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  12cd2c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct netif *netif = ip_current_input_netif();
  12cd30:	e30f3610 	movw	r3, #62992	; 0xf610
  12cd34:	e3403014 	movt	r3, #20
  12cd38:	e5933004 	ldr	r3, [r3, #4]
  12cd3c:	e50b300c 	str	r3, [fp, #-12]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12cd40:	e51b300c 	ldr	r3, [fp, #-12]
  12cd44:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12cd48:	e50b3010 	str	r3, [fp, #-16]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
  12cd4c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12cd50:	e5933004 	ldr	r3, [r3, #4]
  12cd54:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
  12cd58:	e51b3010 	ldr	r3, [fp, #-16]
  12cd5c:	e3530000 	cmp	r3, #0
  12cd60:	0a000091 	beq	12cfac <dhcp_recv+0x298>
  12cd64:	e51b3010 	ldr	r3, [fp, #-16]
  12cd68:	e5d33008 	ldrb	r3, [r3, #8]
  12cd6c:	e3530000 	cmp	r3, #0
  12cd70:	0a00008d 	beq	12cfac <dhcp_recv+0x298>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12cd74:	e51b3010 	ldr	r3, [fp, #-16]
  12cd78:	e5933004 	ldr	r3, [r3, #4]
  12cd7c:	e3530000 	cmp	r3, #0
  12cd80:	0a000006 	beq	12cda0 <dhcp_recv+0x8c>
  12cd84:	e3080e10 	movw	r0, #36368	; 0x8e10
  12cd88:	e3400014 	movt	r0, #20
  12cd8c:	ebff58e0 	bl	103114 <rt_kprintf>
  12cd90:	e30016a9 	movw	r1, #1705	; 0x6a9
  12cd94:	e3080d38 	movw	r0, #36152	; 0x8d38
  12cd98:	e3400014 	movt	r0, #20
  12cd9c:	ebff78c4 	bl	10b0b4 <sys_arch_assert>

  if (p->len < DHCP_MIN_REPLY_LEN) {
  12cda0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12cda4:	e1d330ba 	ldrh	r3, [r3, #10]
  12cda8:	e353002b 	cmp	r3, #43	; 0x2b
  12cdac:	9a000080 	bls	12cfb4 <dhcp_recv+0x2a0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
  12cdb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cdb4:	e5d33000 	ldrb	r3, [r3]
  12cdb8:	e3530002 	cmp	r3, #2
  12cdbc:	1a00007e 	bne	12cfbc <dhcp_recv+0x2a8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12cdc0:	e3a03000 	mov	r3, #0
  12cdc4:	e54b3005 	strb	r3, [fp, #-5]
  12cdc8:	ea00000c 	b	12ce00 <dhcp_recv+0xec>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
  12cdcc:	e55b3005 	ldrb	r3, [fp, #-5]
  12cdd0:	e51b200c 	ldr	r2, [fp, #-12]
  12cdd4:	e0823003 	add	r3, r2, r3
  12cdd8:	e5d3203b 	ldrb	r2, [r3, #59]	; 0x3b
  12cddc:	e55b3005 	ldrb	r3, [fp, #-5]
  12cde0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12cde4:	e0813003 	add	r3, r1, r3
  12cde8:	e5d3301c 	ldrb	r3, [r3, #28]
  12cdec:	e1520003 	cmp	r2, r3
  12cdf0:	1a000073 	bne	12cfc4 <dhcp_recv+0x2b0>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12cdf4:	e55b3005 	ldrb	r3, [fp, #-5]
  12cdf8:	e2833001 	add	r3, r3, #1
  12cdfc:	e54b3005 	strb	r3, [fp, #-5]
  12ce00:	e51b300c 	ldr	r3, [fp, #-12]
  12ce04:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12ce08:	e55b2005 	ldrb	r2, [fp, #-5]
  12ce0c:	e1520003 	cmp	r2, r3
  12ce10:	2a000005 	bcs	12ce2c <dhcp_recv+0x118>
  12ce14:	e55b3005 	ldrb	r3, [fp, #-5]
  12ce18:	e3530005 	cmp	r3, #5
  12ce1c:	8a000002 	bhi	12ce2c <dhcp_recv+0x118>
  12ce20:	e55b3005 	ldrb	r3, [fp, #-5]
  12ce24:	e353000f 	cmp	r3, #15
  12ce28:	9affffe7 	bls	12cdcc <dhcp_recv+0xb8>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
  12ce2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ce30:	e5933004 	ldr	r3, [r3, #4]
  12ce34:	e1a00003 	mov	r0, r3
  12ce38:	ebffa5e2 	bl	1165c8 <lwip_htonl>
  12ce3c:	e1a02000 	mov	r2, r0
  12ce40:	e51b3010 	ldr	r3, [fp, #-16]
  12ce44:	e5933000 	ldr	r3, [r3]
  12ce48:	e1520003 	cmp	r2, r3
  12ce4c:	1a00005e 	bne	12cfcc <dhcp_recv+0x2b8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
  12ce50:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12ce54:	e51b0010 	ldr	r0, [fp, #-16]
  12ce58:	ebfffd67 	bl	12c3fc <dhcp_parse_reply>
  12ce5c:	e1a03000 	mov	r3, r0
  12ce60:	e3530000 	cmp	r3, #0
  12ce64:	1a00005a 	bne	12cfd4 <dhcp_recv+0x2c0>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
  12ce68:	e30c3c54 	movw	r3, #52308	; 0xcc54
  12ce6c:	e3403015 	movt	r3, #21
  12ce70:	e5d33001 	ldrb	r3, [r3, #1]
  12ce74:	e3530000 	cmp	r3, #0
  12ce78:	0a000057 	beq	12cfdc <dhcp_recv+0x2c8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
  12ce7c:	e30c3c60 	movw	r3, #52320	; 0xcc60
  12ce80:	e3403015 	movt	r3, #21
  12ce84:	e5933004 	ldr	r3, [r3, #4]
  12ce88:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
  12ce8c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12ce90:	e3530005 	cmp	r3, #5
  12ce94:	1a000021 	bne	12cf20 <dhcp_recv+0x20c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
  12ce98:	e51b3010 	ldr	r3, [fp, #-16]
  12ce9c:	e5d33009 	ldrb	r3, [r3, #9]
  12cea0:	e3530001 	cmp	r3, #1
  12cea4:	1a00000c 	bne	12cedc <dhcp_recv+0x1c8>
      dhcp_handle_ack(netif);
  12cea8:	e51b000c 	ldr	r0, [fp, #-12]
  12ceac:	ebfff6b6 	bl	12a98c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
  12ceb0:	e51b300c 	ldr	r3, [fp, #-12]
  12ceb4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12ceb8:	e2033008 	and	r3, r3, #8
  12cebc:	e3530000 	cmp	r3, #0
  12cec0:	0a000002 	beq	12ced0 <dhcp_recv+0x1bc>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
  12cec4:	e51b000c 	ldr	r0, [fp, #-12]
  12cec8:	ebfff4c0 	bl	12a1d0 <dhcp_check>
  12cecc:	ea000043 	b	12cfe0 <dhcp_recv+0x2cc>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
  12ced0:	e51b000c 	ldr	r0, [fp, #-12]
  12ced4:	ebfff952 	bl	12b424 <dhcp_bind>
  12ced8:	ea000040 	b	12cfe0 <dhcp_recv+0x2cc>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12cedc:	e51b3010 	ldr	r3, [fp, #-16]
  12cee0:	e5d33009 	ldrb	r3, [r3, #9]
  12cee4:	e3530003 	cmp	r3, #3
  12cee8:	0a000007 	beq	12cf0c <dhcp_recv+0x1f8>
  12ceec:	e51b3010 	ldr	r3, [fp, #-16]
  12cef0:	e5d33009 	ldrb	r3, [r3, #9]
  12cef4:	e3530004 	cmp	r3, #4
  12cef8:	0a000003 	beq	12cf0c <dhcp_recv+0x1f8>
             (dhcp->state == DHCP_STATE_RENEWING)) {
  12cefc:	e51b3010 	ldr	r3, [fp, #-16]
  12cf00:	e5d33009 	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12cf04:	e3530005 	cmp	r3, #5
  12cf08:	1a000034 	bne	12cfe0 <dhcp_recv+0x2cc>
      dhcp_handle_ack(netif);
  12cf0c:	e51b000c 	ldr	r0, [fp, #-12]
  12cf10:	ebfff69d 	bl	12a98c <dhcp_handle_ack>
      dhcp_bind(netif);
  12cf14:	e51b000c 	ldr	r0, [fp, #-12]
  12cf18:	ebfff941 	bl	12b424 <dhcp_bind>
  12cf1c:	ea00002f 	b	12cfe0 <dhcp_recv+0x2cc>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
  12cf20:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cf24:	e3530006 	cmp	r3, #6
  12cf28:	1a000012 	bne	12cf78 <dhcp_recv+0x264>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cf2c:	e51b3010 	ldr	r3, [fp, #-16]
  12cf30:	e5d33009 	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
  12cf34:	e3530003 	cmp	r3, #3
  12cf38:	0a00000b 	beq	12cf6c <dhcp_recv+0x258>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cf3c:	e51b3010 	ldr	r3, [fp, #-16]
  12cf40:	e5d33009 	ldrb	r3, [r3, #9]
  12cf44:	e3530001 	cmp	r3, #1
  12cf48:	0a000007 	beq	12cf6c <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12cf4c:	e51b3010 	ldr	r3, [fp, #-16]
  12cf50:	e5d33009 	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cf54:	e3530004 	cmp	r3, #4
  12cf58:	0a000003 	beq	12cf6c <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12cf5c:	e51b3010 	ldr	r3, [fp, #-16]
  12cf60:	e5d33009 	ldrb	r3, [r3, #9]
  12cf64:	e3530005 	cmp	r3, #5
  12cf68:	1a000002 	bne	12cf78 <dhcp_recv+0x264>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
  12cf6c:	e51b000c 	ldr	r0, [fp, #-12]
  12cf70:	ebfff47f 	bl	12a174 <dhcp_handle_nak>
  12cf74:	ea000019 	b	12cfe0 <dhcp_recv+0x2cc>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
  12cf78:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cf7c:	e3530002 	cmp	r3, #2
  12cf80:	1a000009 	bne	12cfac <dhcp_recv+0x298>
  12cf84:	e51b3010 	ldr	r3, [fp, #-16]
  12cf88:	e5d33009 	ldrb	r3, [r3, #9]
  12cf8c:	e3530006 	cmp	r3, #6
  12cf90:	1a000005 	bne	12cfac <dhcp_recv+0x298>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
  12cf94:	e51b3010 	ldr	r3, [fp, #-16]
  12cf98:	e3a02000 	mov	r2, #0
  12cf9c:	e1c321b6 	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
  12cfa0:	e51b000c 	ldr	r0, [fp, #-12]
  12cfa4:	ebfff4b6 	bl	12a284 <dhcp_handle_offer>
  12cfa8:	ea00000c 	b	12cfe0 <dhcp_recv+0x2cc>
  }

free_pbuf_and_return:
  12cfac:	e320f000 	nop	{0}
  12cfb0:	ea00000a 	b	12cfe0 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cfb4:	e320f000 	nop	{0}
  12cfb8:	ea000008 	b	12cfe0 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cfbc:	e320f000 	nop	{0}
  12cfc0:	ea000006 	b	12cfe0 <dhcp_recv+0x2cc>
      goto free_pbuf_and_return;
  12cfc4:	e320f000 	nop	{0}
  12cfc8:	ea000004 	b	12cfe0 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cfcc:	e320f000 	nop	{0}
  12cfd0:	ea000002 	b	12cfe0 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cfd4:	e320f000 	nop	{0}
  12cfd8:	ea000000 	b	12cfe0 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cfdc:	e320f000 	nop	{0}
  if (dhcp != NULL) {
  12cfe0:	e51b3010 	ldr	r3, [fp, #-16]
  12cfe4:	e3530000 	cmp	r3, #0
  12cfe8:	0a000002 	beq	12cff8 <dhcp_recv+0x2e4>
    dhcp->msg_in = NULL;
  12cfec:	e51b3010 	ldr	r3, [fp, #-16]
  12cff0:	e3a02000 	mov	r2, #0
  12cff4:	e5832004 	str	r2, [r3, #4]
  }
  pbuf_free(p);
  12cff8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12cffc:	ebffb79c 	bl	11ae74 <pbuf_free>
}
  12d000:	e320f000 	nop	{0}
  12d004:	e24bd004 	sub	sp, fp, #4
  12d008:	e8bd8800 	pop	{fp, pc}

0012d00c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
  12d00c:	e92d4810 	push	{r4, fp, lr}
  12d010:	e28db008 	add	fp, sp, #8
  12d014:	e24dd01c 	sub	sp, sp, #28
  12d018:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12d01c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12d020:	e1a03002 	mov	r3, r2
  12d024:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
  12d028:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d02c:	e3530000 	cmp	r3, #0
  12d030:	1a000008 	bne	12d058 <dhcp_create_msg+0x4c>
  12d034:	e3090040 	movw	r0, #36928	; 0x9040
  12d038:	e3400014 	movt	r0, #20
  12d03c:	ebff5834 	bl	103114 <rt_kprintf>
  12d040:	e300171e 	movw	r1, #1822	; 0x71e
  12d044:	e3080d38 	movw	r0, #36152	; 0x8d38
  12d048:	e3400014 	movt	r0, #20
  12d04c:	ebff7818 	bl	10b0b4 <sys_arch_assert>
  12d050:	e3e0300f 	mvn	r3, #15
  12d054:	ea000121 	b	12d4e0 <dhcp_create_msg+0x4d4>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
  12d058:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d05c:	e3530000 	cmp	r3, #0
  12d060:	1a000008 	bne	12d088 <dhcp_create_msg+0x7c>
  12d064:	e3090060 	movw	r0, #36960	; 0x9060
  12d068:	e3400014 	movt	r0, #20
  12d06c:	ebff5828 	bl	103114 <rt_kprintf>
  12d070:	e300171f 	movw	r1, #1823	; 0x71f
  12d074:	e3080d38 	movw	r0, #36152	; 0x8d38
  12d078:	e3400014 	movt	r0, #20
  12d07c:	ebff780c 	bl	10b0b4 <sys_arch_assert>
  12d080:	e3e03005 	mvn	r3, #5
  12d084:	ea000115 	b	12d4e0 <dhcp_create_msg+0x4d4>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  12d088:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d08c:	e593300c 	ldr	r3, [r3, #12]
  12d090:	e3530000 	cmp	r3, #0
  12d094:	0a000006 	beq	12d0b4 <dhcp_create_msg+0xa8>
  12d098:	e3090080 	movw	r0, #36992	; 0x9080
  12d09c:	e3400014 	movt	r0, #20
  12d0a0:	ebff581b 	bl	103114 <rt_kprintf>
  12d0a4:	e3a01e72 	mov	r1, #1824	; 0x720
  12d0a8:	e3080d38 	movw	r0, #36152	; 0x8d38
  12d0ac:	e3400014 	movt	r0, #20
  12d0b0:	ebff77ff 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  12d0b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d0b8:	e5933010 	ldr	r3, [r3, #16]
  12d0bc:	e3530000 	cmp	r3, #0
  12d0c0:	0a000006 	beq	12d0e0 <dhcp_create_msg+0xd4>
  12d0c4:	e30900a8 	movw	r0, #37032	; 0x90a8
  12d0c8:	e3400014 	movt	r0, #20
  12d0cc:	ebff5810 	bl	103114 <rt_kprintf>
  12d0d0:	e3001721 	movw	r1, #1825	; 0x721
  12d0d4:	e3080d38 	movw	r0, #36152	; 0x8d38
  12d0d8:	e3400014 	movt	r0, #20
  12d0dc:	ebff77f4 	bl	10b0b4 <sys_arch_assert>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  12d0e0:	e3a02000 	mov	r2, #0
  12d0e4:	e3a01f4d 	mov	r1, #308	; 0x134
  12d0e8:	e3a00000 	mov	r0, #0
  12d0ec:	ebffb459 	bl	11a258 <pbuf_alloc>
  12d0f0:	e1a02000 	mov	r2, r0
  12d0f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d0f8:	e583200c 	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
  12d0fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d100:	e593300c 	ldr	r3, [r3, #12]
  12d104:	e3530000 	cmp	r3, #0
  12d108:	1a000001 	bne	12d114 <dhcp_create_msg+0x108>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  12d10c:	e3e03000 	mvn	r3, #0
  12d110:	ea0000f2 	b	12d4e0 <dhcp_create_msg+0x4d4>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
  12d114:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d118:	e593300c 	ldr	r3, [r3, #12]
  12d11c:	e1d330ba 	ldrh	r3, [r3, #10]
  12d120:	e3530f4d 	cmp	r3, #308	; 0x134
  12d124:	2a000006 	bcs	12d144 <dhcp_create_msg+0x138>
  12d128:	e30900d0 	movw	r0, #37072	; 0x90d0
  12d12c:	e3400014 	movt	r0, #20
  12d130:	ebff57f7 	bl	103114 <rt_kprintf>
  12d134:	e3001729 	movw	r1, #1833	; 0x729
  12d138:	e3080d38 	movw	r0, #36152	; 0x8d38
  12d13c:	e3400014 	movt	r0, #20
  12d140:	ebff77db 	bl	10b0b4 <sys_arch_assert>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if (message_type != DHCP_REQUEST) {
  12d144:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d148:	e3530003 	cmp	r3, #3
  12d14c:	0a00000e 	beq	12d18c <dhcp_create_msg+0x180>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
  12d150:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d154:	e5d3300a 	ldrb	r3, [r3, #10]
  12d158:	e3530000 	cmp	r3, #0
  12d15c:	1a000005 	bne	12d178 <dhcp_create_msg+0x16c>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
  12d160:	eb0043fb 	bl	13e154 <rand>
  12d164:	e1a03000 	mov	r3, r0
  12d168:	e1a02003 	mov	r2, r3
  12d16c:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12d170:	e3403014 	movt	r3, #20
  12d174:	e5832000 	str	r2, [r3]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
  12d178:	e30e3af4 	movw	r3, #60148	; 0xeaf4
  12d17c:	e3403014 	movt	r3, #20
  12d180:	e5932000 	ldr	r2, [r3]
  12d184:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d188:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
  12d18c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d190:	e593300c 	ldr	r3, [r3, #12]
  12d194:	e5932004 	ldr	r2, [r3, #4]
  12d198:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d19c:	e5832010 	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  12d1a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1a4:	e5933010 	ldr	r3, [r3, #16]
  12d1a8:	e3a02001 	mov	r2, #1
  12d1ac:	e5c32000 	strb	r2, [r3]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  12d1b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1b4:	e5933010 	ldr	r3, [r3, #16]
  12d1b8:	e3a02001 	mov	r2, #1
  12d1bc:	e5c32001 	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
  12d1c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1c4:	e5933010 	ldr	r3, [r3, #16]
  12d1c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12d1cc:	e5d2203a 	ldrb	r2, [r2, #58]	; 0x3a
  12d1d0:	e5c32002 	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
  12d1d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1d8:	e5933010 	ldr	r3, [r3, #16]
  12d1dc:	e3a02000 	mov	r2, #0
  12d1e0:	e5c32003 	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
  12d1e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1e8:	e5932000 	ldr	r2, [r3]
  12d1ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1f0:	e5934010 	ldr	r4, [r3, #16]
  12d1f4:	e1a00002 	mov	r0, r2
  12d1f8:	ebffa4f2 	bl	1165c8 <lwip_htonl>
  12d1fc:	e1a03000 	mov	r3, r0
  12d200:	e5843004 	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
  12d204:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d208:	e5933010 	ldr	r3, [r3, #16]
  12d20c:	e3a02000 	mov	r2, #0
  12d210:	e5c32008 	strb	r2, [r3, #8]
  12d214:	e3a02000 	mov	r2, #0
  12d218:	e5c32009 	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  12d21c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d220:	e5933010 	ldr	r3, [r3, #16]
  12d224:	e3a02000 	mov	r2, #0
  12d228:	e5c3200a 	strb	r2, [r3, #10]
  12d22c:	e3a02000 	mov	r2, #0
  12d230:	e5c3200b 	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
  12d234:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d238:	e5933010 	ldr	r3, [r3, #16]
  12d23c:	e3a02000 	mov	r2, #0
  12d240:	e5c3200c 	strb	r2, [r3, #12]
  12d244:	e3a02000 	mov	r2, #0
  12d248:	e5c3200d 	strb	r2, [r3, #13]
  12d24c:	e3a02000 	mov	r2, #0
  12d250:	e5c3200e 	strb	r2, [r3, #14]
  12d254:	e3a02000 	mov	r2, #0
  12d258:	e5c3200f 	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
  12d25c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d260:	e3530008 	cmp	r3, #8
  12d264:	0a000010 	beq	12d2ac <dhcp_create_msg+0x2a0>
  12d268:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d26c:	e3530004 	cmp	r3, #4
  12d270:	0a00000d 	beq	12d2ac <dhcp_create_msg+0x2a0>
  12d274:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d278:	e3530007 	cmp	r3, #7
  12d27c:	0a00000a 	beq	12d2ac <dhcp_create_msg+0x2a0>
  12d280:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d284:	e3530003 	cmp	r3, #3
  12d288:	1a00000d 	bne	12d2c4 <dhcp_create_msg+0x2b8>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12d28c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d290:	e5d33009 	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
  12d294:	e3530005 	cmp	r3, #5
  12d298:	0a000003 	beq	12d2ac <dhcp_create_msg+0x2a0>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12d29c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d2a0:	e5d33009 	ldrb	r3, [r3, #9]
  12d2a4:	e3530004 	cmp	r3, #4
  12d2a8:	1a000005 	bne	12d2c4 <dhcp_create_msg+0x2b8>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
  12d2ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d2b0:	e2832004 	add	r2, r3, #4
  12d2b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d2b8:	e5933010 	ldr	r3, [r3, #16]
  12d2bc:	e5922000 	ldr	r2, [r2]
  12d2c0:	e583200c 	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
  12d2c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d2c8:	e5933010 	ldr	r3, [r3, #16]
  12d2cc:	e3a02000 	mov	r2, #0
  12d2d0:	e5c32010 	strb	r2, [r3, #16]
  12d2d4:	e3a02000 	mov	r2, #0
  12d2d8:	e5c32011 	strb	r2, [r3, #17]
  12d2dc:	e3a02000 	mov	r2, #0
  12d2e0:	e5c32012 	strb	r2, [r3, #18]
  12d2e4:	e3a02000 	mov	r2, #0
  12d2e8:	e5c32013 	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
  12d2ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d2f0:	e5933010 	ldr	r3, [r3, #16]
  12d2f4:	e3a02000 	mov	r2, #0
  12d2f8:	e5c32014 	strb	r2, [r3, #20]
  12d2fc:	e3a02000 	mov	r2, #0
  12d300:	e5c32015 	strb	r2, [r3, #21]
  12d304:	e3a02000 	mov	r2, #0
  12d308:	e5c32016 	strb	r2, [r3, #22]
  12d30c:	e3a02000 	mov	r2, #0
  12d310:	e5c32017 	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
  12d314:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d318:	e5933010 	ldr	r3, [r3, #16]
  12d31c:	e3a02000 	mov	r2, #0
  12d320:	e5c32018 	strb	r2, [r3, #24]
  12d324:	e3a02000 	mov	r2, #0
  12d328:	e5c32019 	strb	r2, [r3, #25]
  12d32c:	e3a02000 	mov	r2, #0
  12d330:	e5c3201a 	strb	r2, [r3, #26]
  12d334:	e3a02000 	mov	r2, #0
  12d338:	e5c3201b 	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12d33c:	e3a03000 	mov	r3, #0
  12d340:	e14b30be 	strh	r3, [fp, #-14]
  12d344:	ea000017 	b	12d3a8 <dhcp_create_msg+0x39c>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  12d348:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d34c:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12d350:	e6ff3073 	uxth	r3, r3
  12d354:	e15b20be 	ldrh	r2, [fp, #-14]
  12d358:	e1520003 	cmp	r2, r3
  12d35c:	2a000007 	bcs	12d380 <dhcp_create_msg+0x374>
  12d360:	e15b30be 	ldrh	r3, [fp, #-14]
  12d364:	e3530005 	cmp	r3, #5
  12d368:	8a000004 	bhi	12d380 <dhcp_create_msg+0x374>
  12d36c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d370:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12d374:	e0823003 	add	r3, r2, r3
  12d378:	e5d3103b 	ldrb	r1, [r3, #59]	; 0x3b
  12d37c:	ea000000 	b	12d384 <dhcp_create_msg+0x378>
  12d380:	e3a01000 	mov	r1, #0
  12d384:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d388:	e5932010 	ldr	r2, [r3, #16]
  12d38c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d390:	e0823003 	add	r3, r2, r3
  12d394:	e1a02001 	mov	r2, r1
  12d398:	e5c3201c 	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12d39c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3a0:	e2833001 	add	r3, r3, #1
  12d3a4:	e14b30be 	strh	r3, [fp, #-14]
  12d3a8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3ac:	e353000f 	cmp	r3, #15
  12d3b0:	9affffe4 	bls	12d348 <dhcp_create_msg+0x33c>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12d3b4:	e3a03000 	mov	r3, #0
  12d3b8:	e14b30be 	strh	r3, [fp, #-14]
  12d3bc:	ea000008 	b	12d3e4 <dhcp_create_msg+0x3d8>
    dhcp->msg_out->sname[i] = 0;
  12d3c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d3c4:	e5932010 	ldr	r2, [r3, #16]
  12d3c8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3cc:	e0823003 	add	r3, r2, r3
  12d3d0:	e3a02000 	mov	r2, #0
  12d3d4:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12d3d8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3dc:	e2833001 	add	r3, r3, #1
  12d3e0:	e14b30be 	strh	r3, [fp, #-14]
  12d3e4:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3e8:	e353003f 	cmp	r3, #63	; 0x3f
  12d3ec:	9afffff3 	bls	12d3c0 <dhcp_create_msg+0x3b4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12d3f0:	e3a03000 	mov	r3, #0
  12d3f4:	e14b30be 	strh	r3, [fp, #-14]
  12d3f8:	ea000008 	b	12d420 <dhcp_create_msg+0x414>
    dhcp->msg_out->file[i] = 0;
  12d3fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d400:	e5932010 	ldr	r2, [r3, #16]
  12d404:	e15b30be 	ldrh	r3, [fp, #-14]
  12d408:	e0823003 	add	r3, r2, r3
  12d40c:	e3a02000 	mov	r2, #0
  12d410:	e5c3206c 	strb	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12d414:	e15b30be 	ldrh	r3, [fp, #-14]
  12d418:	e2833001 	add	r3, r3, #1
  12d41c:	e14b30be 	strh	r3, [fp, #-14]
  12d420:	e15b30be 	ldrh	r3, [fp, #-14]
  12d424:	e353007f 	cmp	r3, #127	; 0x7f
  12d428:	9afffff3 	bls	12d3fc <dhcp_create_msg+0x3f0>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  12d42c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d430:	e5932010 	ldr	r2, [r3, #16]
  12d434:	e3a03000 	mov	r3, #0
  12d438:	e3833063 	orr	r3, r3, #99	; 0x63
  12d43c:	e5c230ec 	strb	r3, [r2, #236]	; 0xec
  12d440:	e3a03000 	mov	r3, #0
  12d444:	e1e03003 	mvn	r3, r3
  12d448:	e203307d 	and	r3, r3, #125	; 0x7d
  12d44c:	e1e03003 	mvn	r3, r3
  12d450:	e5c230ed 	strb	r3, [r2, #237]	; 0xed
  12d454:	e3a03000 	mov	r3, #0
  12d458:	e3833053 	orr	r3, r3, #83	; 0x53
  12d45c:	e5c230ee 	strb	r3, [r2, #238]	; 0xee
  12d460:	e3a03000 	mov	r3, #0
  12d464:	e3833063 	orr	r3, r3, #99	; 0x63
  12d468:	e5c230ef 	strb	r3, [r2, #239]	; 0xef
  dhcp->options_out_len = 0;
  12d46c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d470:	e3a02000 	mov	r2, #0
  12d474:	e1c321b4 	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d478:	e3a03000 	mov	r3, #0
  12d47c:	e14b30be 	strh	r3, [fp, #-14]
  12d480:	ea00000a 	b	12d4b0 <dhcp_create_msg+0x4a4>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  12d484:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d488:	e5932010 	ldr	r2, [r3, #16]
  12d48c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d490:	e15b10be 	ldrh	r1, [fp, #-14]
  12d494:	e6ef1071 	uxtb	r1, r1
  12d498:	e0823003 	add	r3, r2, r3
  12d49c:	e1a02001 	mov	r2, r1
  12d4a0:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d4a4:	e15b30be 	ldrh	r3, [fp, #-14]
  12d4a8:	e2833001 	add	r3, r3, #1
  12d4ac:	e14b30be 	strh	r3, [fp, #-14]
  12d4b0:	e15b30be 	ldrh	r3, [fp, #-14]
  12d4b4:	e3530043 	cmp	r3, #67	; 0x43
  12d4b8:	9afffff1 	bls	12d484 <dhcp_create_msg+0x478>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  12d4bc:	e3a02001 	mov	r2, #1
  12d4c0:	e3a01035 	mov	r1, #53	; 0x35
  12d4c4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d4c8:	ebfffab7 	bl	12bfac <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
  12d4cc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d4d0:	e1a01003 	mov	r1, r3
  12d4d4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d4d8:	ebfffae3 	bl	12c06c <dhcp_option_byte>
  return ERR_OK;
  12d4dc:	e3a03000 	mov	r3, #0
}
  12d4e0:	e1a00003 	mov	r0, r3
  12d4e4:	e24bd008 	sub	sp, fp, #8
  12d4e8:	e8bd8810 	pop	{r4, fp, pc}

0012d4ec <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
  12d4ec:	e92d4800 	push	{fp, lr}
  12d4f0:	e28db004 	add	fp, sp, #4
  12d4f4:	e24dd008 	sub	sp, sp, #8
  12d4f8:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
  12d4fc:	e51b3008 	ldr	r3, [fp, #-8]
  12d500:	e3530000 	cmp	r3, #0
  12d504:	1a000007 	bne	12d528 <dhcp_delete_msg+0x3c>
  12d508:	e3090110 	movw	r0, #37136	; 0x9110
  12d50c:	e3400014 	movt	r0, #20
  12d510:	ebff56ff 	bl	103114 <rt_kprintf>
  12d514:	e300176e 	movw	r1, #1902	; 0x76e
  12d518:	e3080d38 	movw	r0, #36152	; 0x8d38
  12d51c:	e3400014 	movt	r0, #20
  12d520:	ebff76e3 	bl	10b0b4 <sys_arch_assert>
  12d524:	ea000023 	b	12d5b8 <dhcp_delete_msg+0xcc>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  12d528:	e51b3008 	ldr	r3, [fp, #-8]
  12d52c:	e593300c 	ldr	r3, [r3, #12]
  12d530:	e3530000 	cmp	r3, #0
  12d534:	1a000006 	bne	12d554 <dhcp_delete_msg+0x68>
  12d538:	e3090130 	movw	r0, #37168	; 0x9130
  12d53c:	e3400014 	movt	r0, #20
  12d540:	ebff56f3 	bl	103114 <rt_kprintf>
  12d544:	e300176f 	movw	r1, #1903	; 0x76f
  12d548:	e3080d38 	movw	r0, #36152	; 0x8d38
  12d54c:	e3400014 	movt	r0, #20
  12d550:	ebff76d7 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  12d554:	e51b3008 	ldr	r3, [fp, #-8]
  12d558:	e5933010 	ldr	r3, [r3, #16]
  12d55c:	e3530000 	cmp	r3, #0
  12d560:	1a000006 	bne	12d580 <dhcp_delete_msg+0x94>
  12d564:	e3090158 	movw	r0, #37208	; 0x9158
  12d568:	e3400014 	movt	r0, #20
  12d56c:	ebff56e8 	bl	103114 <rt_kprintf>
  12d570:	e3a01e77 	mov	r1, #1904	; 0x770
  12d574:	e3080d38 	movw	r0, #36152	; 0x8d38
  12d578:	e3400014 	movt	r0, #20
  12d57c:	ebff76cc 	bl	10b0b4 <sys_arch_assert>
  if (dhcp->p_out != NULL) {
  12d580:	e51b3008 	ldr	r3, [fp, #-8]
  12d584:	e593300c 	ldr	r3, [r3, #12]
  12d588:	e3530000 	cmp	r3, #0
  12d58c:	0a000003 	beq	12d5a0 <dhcp_delete_msg+0xb4>
    pbuf_free(dhcp->p_out);
  12d590:	e51b3008 	ldr	r3, [fp, #-8]
  12d594:	e593300c 	ldr	r3, [r3, #12]
  12d598:	e1a00003 	mov	r0, r3
  12d59c:	ebffb634 	bl	11ae74 <pbuf_free>
  }
  dhcp->p_out = NULL;
  12d5a0:	e51b3008 	ldr	r3, [fp, #-8]
  12d5a4:	e3a02000 	mov	r2, #0
  12d5a8:	e583200c 	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
  12d5ac:	e51b3008 	ldr	r3, [fp, #-8]
  12d5b0:	e3a02000 	mov	r2, #0
  12d5b4:	e5832010 	str	r2, [r3, #16]
}
  12d5b8:	e24bd004 	sub	sp, fp, #4
  12d5bc:	e8bd8800 	pop	{fp, pc}

0012d5c0 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  12d5c0:	e92d4800 	push	{fp, lr}
  12d5c4:	e28db004 	add	fp, sp, #4
  12d5c8:	e24dd008 	sub	sp, sp, #8
  12d5cc:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  12d5d0:	e51b3008 	ldr	r3, [fp, #-8]
  12d5d4:	e3530000 	cmp	r3, #0
  12d5d8:	1a000007 	bne	12d5fc <dhcp_option_trailer+0x3c>
  12d5dc:	e3090180 	movw	r0, #37248	; 0x9180
  12d5e0:	e3400014 	movt	r0, #20
  12d5e4:	ebff56ca 	bl	103114 <rt_kprintf>
  12d5e8:	e3001783 	movw	r1, #1923	; 0x783
  12d5ec:	e3080d38 	movw	r0, #36152	; 0x8d38
  12d5f0:	e3400014 	movt	r0, #20
  12d5f4:	ebff76ae 	bl	10b0b4 <sys_arch_assert>
  12d5f8:	ea000039 	b	12d6e4 <dhcp_option_trailer+0x124>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  12d5fc:	e51b3008 	ldr	r3, [fp, #-8]
  12d600:	e5933010 	ldr	r3, [r3, #16]
  12d604:	e3530000 	cmp	r3, #0
  12d608:	1a000006 	bne	12d628 <dhcp_option_trailer+0x68>
  12d60c:	e30901a4 	movw	r0, #37284	; 0x91a4
  12d610:	e3400014 	movt	r0, #20
  12d614:	ebff56be 	bl	103114 <rt_kprintf>
  12d618:	e3001784 	movw	r1, #1924	; 0x784
  12d61c:	e3080d38 	movw	r0, #36152	; 0x8d38
  12d620:	e3400014 	movt	r0, #20
  12d624:	ebff76a2 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12d628:	e51b3008 	ldr	r3, [fp, #-8]
  12d62c:	e1d331b4 	ldrh	r3, [r3, #20]
  12d630:	e3530043 	cmp	r3, #67	; 0x43
  12d634:	9a000006 	bls	12d654 <dhcp_option_trailer+0x94>
  12d638:	e30901d0 	movw	r0, #37328	; 0x91d0
  12d63c:	e3400014 	movt	r0, #20
  12d640:	ebff56b3 	bl	103114 <rt_kprintf>
  12d644:	e3001785 	movw	r1, #1925	; 0x785
  12d648:	e3080d38 	movw	r0, #36152	; 0x8d38
  12d64c:	e3400014 	movt	r0, #20
  12d650:	ebff7697 	bl	10b0b4 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  12d654:	e51b3008 	ldr	r3, [fp, #-8]
  12d658:	e5932010 	ldr	r2, [r3, #16]
  12d65c:	e51b3008 	ldr	r3, [fp, #-8]
  12d660:	e1d331b4 	ldrh	r3, [r3, #20]
  12d664:	e2831001 	add	r1, r3, #1
  12d668:	e6ff0071 	uxth	r0, r1
  12d66c:	e51b1008 	ldr	r1, [fp, #-8]
  12d670:	e1c101b4 	strh	r0, [r1, #20]
  12d674:	e0823003 	add	r3, r2, r3
  12d678:	e3e02000 	mvn	r2, #0
  12d67c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d680:	ea00000a 	b	12d6b0 <dhcp_option_trailer+0xf0>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  12d684:	e51b3008 	ldr	r3, [fp, #-8]
  12d688:	e5932010 	ldr	r2, [r3, #16]
  12d68c:	e51b3008 	ldr	r3, [fp, #-8]
  12d690:	e1d331b4 	ldrh	r3, [r3, #20]
  12d694:	e2831001 	add	r1, r3, #1
  12d698:	e6ff0071 	uxth	r0, r1
  12d69c:	e51b1008 	ldr	r1, [fp, #-8]
  12d6a0:	e1c101b4 	strh	r0, [r1, #20]
  12d6a4:	e0823003 	add	r3, r2, r3
  12d6a8:	e3a02000 	mov	r2, #0
  12d6ac:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d6b0:	e51b3008 	ldr	r3, [fp, #-8]
  12d6b4:	e1d331b4 	ldrh	r3, [r3, #20]
  12d6b8:	e3530043 	cmp	r3, #67	; 0x43
  12d6bc:	9a000004 	bls	12d6d4 <dhcp_option_trailer+0x114>
  12d6c0:	e51b3008 	ldr	r3, [fp, #-8]
  12d6c4:	e1d331b4 	ldrh	r3, [r3, #20]
  12d6c8:	e2033003 	and	r3, r3, #3
  12d6cc:	e3530000 	cmp	r3, #0
  12d6d0:	0a000003 	beq	12d6e4 <dhcp_option_trailer+0x124>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
  12d6d4:	e51b3008 	ldr	r3, [fp, #-8]
  12d6d8:	e1d331b4 	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d6dc:	e3530043 	cmp	r3, #67	; 0x43
  12d6e0:	9affffe7 	bls	12d684 <dhcp_option_trailer+0xc4>
  }
}
  12d6e4:	e24bd004 	sub	sp, fp, #4
  12d6e8:	e8bd8800 	pop	{fp, pc}

0012d6ec <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  12d6ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12d6f0:	e28db000 	add	fp, sp, #0
  12d6f4:	e24dd014 	sub	sp, sp, #20
  12d6f8:	e50b0010 	str	r0, [fp, #-16]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
  12d6fc:	e51b3010 	ldr	r3, [fp, #-16]
  12d700:	e3530000 	cmp	r3, #0
  12d704:	0a000013 	beq	12d758 <dhcp_supplied_address+0x6c>
  12d708:	e51b3010 	ldr	r3, [fp, #-16]
  12d70c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d710:	e3530000 	cmp	r3, #0
  12d714:	0a00000f 	beq	12d758 <dhcp_supplied_address+0x6c>
    struct dhcp* dhcp = netif_dhcp_data(netif);
  12d718:	e51b3010 	ldr	r3, [fp, #-16]
  12d71c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d720:	e50b3008 	str	r3, [fp, #-8]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING);
  12d724:	e51b3008 	ldr	r3, [fp, #-8]
  12d728:	e5d33009 	ldrb	r3, [r3, #9]
  12d72c:	e353000a 	cmp	r3, #10
  12d730:	0a000003 	beq	12d744 <dhcp_supplied_address+0x58>
  12d734:	e51b3008 	ldr	r3, [fp, #-8]
  12d738:	e5d33009 	ldrb	r3, [r3, #9]
  12d73c:	e3530005 	cmp	r3, #5
  12d740:	1a000001 	bne	12d74c <dhcp_supplied_address+0x60>
  12d744:	e3a03001 	mov	r3, #1
  12d748:	ea000000 	b	12d750 <dhcp_supplied_address+0x64>
  12d74c:	e3a03000 	mov	r3, #0
  12d750:	e6ef3073 	uxtb	r3, r3
  12d754:	ea000000 	b	12d75c <dhcp_supplied_address+0x70>
  }
  return 0;
  12d758:	e3a03000 	mov	r3, #0
}
  12d75c:	e1a00003 	mov	r0, r3
  12d760:	e28bd000 	add	sp, fp, #0
  12d764:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12d768:	e12fff1e 	bx	lr

0012d76c <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
  12d76c:	e92d4800 	push	{fp, lr}
  12d770:	e28db004 	add	fp, sp, #4
  12d774:	e24dd010 	sub	sp, sp, #16
  12d778:	e50b0010 	str	r0, [fp, #-16]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  12d77c:	e51b3010 	ldr	r3, [fp, #-16]
  12d780:	e3530000 	cmp	r3, #0
  12d784:	1a000006 	bne	12d7a4 <free_etharp_q+0x38>
  12d788:	e3090210 	movw	r0, #37392	; 0x9210
  12d78c:	e3400014 	movt	r0, #20
  12d790:	ebff565f 	bl	103114 <rt_kprintf>
  12d794:	e3a01097 	mov	r1, #151	; 0x97
  12d798:	e309021c 	movw	r0, #37404	; 0x921c
  12d79c:	e3400014 	movt	r0, #20
  12d7a0:	ebff7643 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  12d7a4:	e51b3010 	ldr	r3, [fp, #-16]
  12d7a8:	e5933004 	ldr	r3, [r3, #4]
  12d7ac:	e3530000 	cmp	r3, #0
  12d7b0:	1a00001e 	bne	12d830 <free_etharp_q+0xc4>
  12d7b4:	e3090250 	movw	r0, #37456	; 0x9250
  12d7b8:	e3400014 	movt	r0, #20
  12d7bc:	ebff5654 	bl	103114 <rt_kprintf>
  12d7c0:	e3a01098 	mov	r1, #152	; 0x98
  12d7c4:	e309021c 	movw	r0, #37404	; 0x921c
  12d7c8:	e3400014 	movt	r0, #20
  12d7cc:	ebff7638 	bl	10b0b4 <sys_arch_assert>
  while (q) {
  12d7d0:	ea000016 	b	12d830 <free_etharp_q+0xc4>
    r = q;
  12d7d4:	e51b3010 	ldr	r3, [fp, #-16]
  12d7d8:	e50b3008 	str	r3, [fp, #-8]
    q = q->next;
  12d7dc:	e51b3010 	ldr	r3, [fp, #-16]
  12d7e0:	e5933000 	ldr	r3, [r3]
  12d7e4:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
  12d7e8:	e51b3008 	ldr	r3, [fp, #-8]
  12d7ec:	e5933004 	ldr	r3, [r3, #4]
  12d7f0:	e3530000 	cmp	r3, #0
  12d7f4:	1a000006 	bne	12d814 <free_etharp_q+0xa8>
  12d7f8:	e3090260 	movw	r0, #37472	; 0x9260
  12d7fc:	e3400014 	movt	r0, #20
  12d800:	ebff5643 	bl	103114 <rt_kprintf>
  12d804:	e3a0109c 	mov	r1, #156	; 0x9c
  12d808:	e309021c 	movw	r0, #37404	; 0x921c
  12d80c:	e3400014 	movt	r0, #20
  12d810:	ebff7627 	bl	10b0b4 <sys_arch_assert>
    pbuf_free(r->p);
  12d814:	e51b3008 	ldr	r3, [fp, #-8]
  12d818:	e5933004 	ldr	r3, [r3, #4]
  12d81c:	e1a00003 	mov	r0, r3
  12d820:	ebffb593 	bl	11ae74 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
  12d824:	e51b1008 	ldr	r1, [fp, #-8]
  12d828:	e3a0000b 	mov	r0, #11
  12d82c:	ebffae82 	bl	11923c <memp_free>
  while (q) {
  12d830:	e51b3010 	ldr	r3, [fp, #-16]
  12d834:	e3530000 	cmp	r3, #0
  12d838:	1affffe5 	bne	12d7d4 <free_etharp_q+0x68>
  }
}
  12d83c:	e320f000 	nop	{0}
  12d840:	e24bd004 	sub	sp, fp, #4
  12d844:	e8bd8800 	pop	{fp, pc}

0012d848 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  12d848:	e92d4800 	push	{fp, lr}
  12d84c:	e28db004 	add	fp, sp, #4
  12d850:	e24dd008 	sub	sp, sp, #8
  12d854:	e50b0008 	str	r0, [fp, #-8]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  12d858:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12d85c:	e3403014 	movt	r3, #20
  12d860:	e51b2008 	ldr	r2, [fp, #-8]
  12d864:	e3a01018 	mov	r1, #24
  12d868:	e0020291 	mul	r2, r1, r2
  12d86c:	e0833002 	add	r3, r3, r2
  12d870:	e5933000 	ldr	r3, [r3]
  12d874:	e3530000 	cmp	r3, #0
  12d878:	0a000010 	beq	12d8c0 <etharp_free_entry+0x78>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  12d87c:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12d880:	e3403014 	movt	r3, #20
  12d884:	e51b2008 	ldr	r2, [fp, #-8]
  12d888:	e3a01018 	mov	r1, #24
  12d88c:	e0020291 	mul	r2, r1, r2
  12d890:	e0833002 	add	r3, r3, r2
  12d894:	e5933000 	ldr	r3, [r3]
  12d898:	e1a00003 	mov	r0, r3
  12d89c:	ebffffb2 	bl	12d76c <free_etharp_q>
    arp_table[i].q = NULL;
  12d8a0:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12d8a4:	e3403014 	movt	r3, #20
  12d8a8:	e51b2008 	ldr	r2, [fp, #-8]
  12d8ac:	e3a01018 	mov	r1, #24
  12d8b0:	e0020291 	mul	r2, r1, r2
  12d8b4:	e0833002 	add	r3, r3, r2
  12d8b8:	e3a02000 	mov	r2, #0
  12d8bc:	e5832000 	str	r2, [r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  12d8c0:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12d8c4:	e3403014 	movt	r3, #20
  12d8c8:	e51b2008 	ldr	r2, [fp, #-8]
  12d8cc:	e3a01018 	mov	r1, #24
  12d8d0:	e0020291 	mul	r2, r1, r2
  12d8d4:	e0833002 	add	r3, r3, r2
  12d8d8:	e2833014 	add	r3, r3, #20
  12d8dc:	e3a02000 	mov	r2, #0
  12d8e0:	e5c32000 	strb	r2, [r3]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
  12d8e4:	e320f000 	nop	{0}
  12d8e8:	e24bd004 	sub	sp, fp, #4
  12d8ec:	e8bd8800 	pop	{fp, pc}

0012d8f0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
  12d8f0:	e92d4800 	push	{fp, lr}
  12d8f4:	e28db004 	add	fp, sp, #4
  12d8f8:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12d8fc:	e3a03000 	mov	r3, #0
  12d900:	e54b3005 	strb	r3, [fp, #-5]
  12d904:	ea000084 	b	12db1c <etharp_tmr+0x22c>
    u8_t state = arp_table[i].state;
  12d908:	e55b2005 	ldrb	r2, [fp, #-5]
  12d90c:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12d910:	e3403014 	movt	r3, #20
  12d914:	e3a01018 	mov	r1, #24
  12d918:	e0020291 	mul	r2, r1, r2
  12d91c:	e0833002 	add	r3, r3, r2
  12d920:	e2833014 	add	r3, r3, #20
  12d924:	e5d33000 	ldrb	r3, [r3]
  12d928:	e54b3006 	strb	r3, [fp, #-6]
    if (state != ETHARP_STATE_EMPTY
  12d92c:	e55b3006 	ldrb	r3, [fp, #-6]
  12d930:	e3530000 	cmp	r3, #0
  12d934:	0a000075 	beq	12db10 <etharp_tmr+0x220>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
  12d938:	e55b2005 	ldrb	r2, [fp, #-5]
  12d93c:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12d940:	e3403014 	movt	r3, #20
  12d944:	e3a01018 	mov	r1, #24
  12d948:	e0010291 	mul	r1, r1, r2
  12d94c:	e0833001 	add	r3, r3, r1
  12d950:	e2833012 	add	r3, r3, #18
  12d954:	e1d330b0 	ldrh	r3, [r3]
  12d958:	e2833001 	add	r3, r3, #1
  12d95c:	e6ff1073 	uxth	r1, r3
  12d960:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12d964:	e3403014 	movt	r3, #20
  12d968:	e3a00018 	mov	r0, #24
  12d96c:	e0020290 	mul	r2, r0, r2
  12d970:	e0833002 	add	r3, r3, r2
  12d974:	e2833012 	add	r3, r3, #18
  12d978:	e1c310b0 	strh	r1, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12d97c:	e55b2005 	ldrb	r2, [fp, #-5]
  12d980:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12d984:	e3403014 	movt	r3, #20
  12d988:	e3a01018 	mov	r1, #24
  12d98c:	e0020291 	mul	r2, r1, r2
  12d990:	e0833002 	add	r3, r3, r2
  12d994:	e2833012 	add	r3, r3, #18
  12d998:	e1d330b0 	ldrh	r3, [r3]
  12d99c:	e3530f4b 	cmp	r3, #300	; 0x12c
  12d9a0:	2a000013 	bcs	12d9f4 <etharp_tmr+0x104>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12d9a4:	e55b2005 	ldrb	r2, [fp, #-5]
  12d9a8:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12d9ac:	e3403014 	movt	r3, #20
  12d9b0:	e3a01018 	mov	r1, #24
  12d9b4:	e0020291 	mul	r2, r1, r2
  12d9b8:	e0833002 	add	r3, r3, r2
  12d9bc:	e2833014 	add	r3, r3, #20
  12d9c0:	e5d33000 	ldrb	r3, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12d9c4:	e3530001 	cmp	r3, #1
  12d9c8:	1a00000d 	bne	12da04 <etharp_tmr+0x114>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
  12d9cc:	e55b2005 	ldrb	r2, [fp, #-5]
  12d9d0:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12d9d4:	e3403014 	movt	r3, #20
  12d9d8:	e3a01018 	mov	r1, #24
  12d9dc:	e0020291 	mul	r2, r1, r2
  12d9e0:	e0833002 	add	r3, r3, r2
  12d9e4:	e2833012 	add	r3, r3, #18
  12d9e8:	e1d330b0 	ldrh	r3, [r3]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12d9ec:	e3530004 	cmp	r3, #4
  12d9f0:	9a000003 	bls	12da04 <etharp_tmr+0x114>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
  12d9f4:	e55b3005 	ldrb	r3, [fp, #-5]
  12d9f8:	e1a00003 	mov	r0, r3
  12d9fc:	ebffff91 	bl	12d848 <etharp_free_entry>
  12da00:	ea000042 	b	12db10 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
  12da04:	e55b2005 	ldrb	r2, [fp, #-5]
  12da08:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12da0c:	e3403014 	movt	r3, #20
  12da10:	e3a01018 	mov	r1, #24
  12da14:	e0020291 	mul	r2, r1, r2
  12da18:	e0833002 	add	r3, r3, r2
  12da1c:	e2833014 	add	r3, r3, #20
  12da20:	e5d33000 	ldrb	r3, [r3]
  12da24:	e3530003 	cmp	r3, #3
  12da28:	1a000009 	bne	12da54 <etharp_tmr+0x164>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
  12da2c:	e55b2005 	ldrb	r2, [fp, #-5]
  12da30:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12da34:	e3403014 	movt	r3, #20
  12da38:	e3a01018 	mov	r1, #24
  12da3c:	e0020291 	mul	r2, r1, r2
  12da40:	e0833002 	add	r3, r3, r2
  12da44:	e2833014 	add	r3, r3, #20
  12da48:	e3a02004 	mov	r2, #4
  12da4c:	e5c32000 	strb	r2, [r3]
  12da50:	ea00002e 	b	12db10 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
  12da54:	e55b2005 	ldrb	r2, [fp, #-5]
  12da58:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12da5c:	e3403014 	movt	r3, #20
  12da60:	e3a01018 	mov	r1, #24
  12da64:	e0020291 	mul	r2, r1, r2
  12da68:	e0833002 	add	r3, r3, r2
  12da6c:	e2833014 	add	r3, r3, #20
  12da70:	e5d33000 	ldrb	r3, [r3]
  12da74:	e3530004 	cmp	r3, #4
  12da78:	1a000009 	bne	12daa4 <etharp_tmr+0x1b4>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
  12da7c:	e55b2005 	ldrb	r2, [fp, #-5]
  12da80:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12da84:	e3403014 	movt	r3, #20
  12da88:	e3a01018 	mov	r1, #24
  12da8c:	e0020291 	mul	r2, r1, r2
  12da90:	e0833002 	add	r3, r3, r2
  12da94:	e2833014 	add	r3, r3, #20
  12da98:	e3a02002 	mov	r2, #2
  12da9c:	e5c32000 	strb	r2, [r3]
  12daa0:	ea00001a 	b	12db10 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12daa4:	e55b2005 	ldrb	r2, [fp, #-5]
  12daa8:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12daac:	e3403014 	movt	r3, #20
  12dab0:	e3a01018 	mov	r1, #24
  12dab4:	e0020291 	mul	r2, r1, r2
  12dab8:	e0833002 	add	r3, r3, r2
  12dabc:	e2833014 	add	r3, r3, #20
  12dac0:	e5d33000 	ldrb	r3, [r3]
  12dac4:	e3530001 	cmp	r3, #1
  12dac8:	1a000010 	bne	12db10 <etharp_tmr+0x220>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
  12dacc:	e55b2005 	ldrb	r2, [fp, #-5]
  12dad0:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12dad4:	e3403014 	movt	r3, #20
  12dad8:	e3a01018 	mov	r1, #24
  12dadc:	e0020291 	mul	r2, r1, r2
  12dae0:	e0833002 	add	r3, r3, r2
  12dae4:	e2833008 	add	r3, r3, #8
  12dae8:	e5930000 	ldr	r0, [r3]
  12daec:	e55b3005 	ldrb	r3, [fp, #-5]
  12daf0:	e3a02018 	mov	r2, #24
  12daf4:	e0020392 	mul	r2, r2, r3
  12daf8:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12dafc:	e3403014 	movt	r3, #20
  12db00:	e0823003 	add	r3, r2, r3
  12db04:	e2833004 	add	r3, r3, #4
  12db08:	e1a01003 	mov	r1, r3
  12db0c:	eb00066b 	bl	12f4c0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12db10:	e55b3005 	ldrb	r3, [fp, #-5]
  12db14:	e2833001 	add	r3, r3, #1
  12db18:	e54b3005 	strb	r3, [fp, #-5]
  12db1c:	e55b3005 	ldrb	r3, [fp, #-5]
  12db20:	e3530009 	cmp	r3, #9
  12db24:	9affff77 	bls	12d908 <etharp_tmr+0x18>
      }
    }
  }
}
  12db28:	e320f000 	nop	{0}
  12db2c:	e24bd004 	sub	sp, fp, #4
  12db30:	e8bd8800 	pop	{fp, pc}

0012db34 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
  12db34:	e92d4800 	push	{fp, lr}
  12db38:	e28db004 	add	fp, sp, #4
  12db3c:	e24dd020 	sub	sp, sp, #32
  12db40:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12db44:	e1a03001 	mov	r3, r1
  12db48:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12db4c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  12db50:	e3a0300a 	mov	r3, #10
  12db54:	e54b3005 	strb	r3, [fp, #-5]
  12db58:	e3a0300a 	mov	r3, #10
  12db5c:	e54b3006 	strb	r3, [fp, #-6]
  s8_t empty = ARP_TABLE_SIZE;
  12db60:	e3a0300a 	mov	r3, #10
  12db64:	e54b3007 	strb	r3, [fp, #-7]
  u8_t i = 0;
  12db68:	e3a03000 	mov	r3, #0
  12db6c:	e54b3008 	strb	r3, [fp, #-8]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  12db70:	e3a0300a 	mov	r3, #10
  12db74:	e54b3009 	strb	r3, [fp, #-9]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
  12db78:	e3a03000 	mov	r3, #0
  12db7c:	e14b30bc 	strh	r3, [fp, #-12]
  12db80:	e3a03000 	mov	r3, #0
  12db84:	e14b30be 	strh	r3, [fp, #-14]
  12db88:	e3a03000 	mov	r3, #0
  12db8c:	e14b31b0 	strh	r3, [fp, #-16]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12db90:	e3a03000 	mov	r3, #0
  12db94:	e54b3008 	strb	r3, [fp, #-8]
  12db98:	ea000088 	b	12ddc0 <etharp_find_entry+0x28c>
    u8_t state = arp_table[i].state;
  12db9c:	e55b2008 	ldrb	r2, [fp, #-8]
  12dba0:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12dba4:	e3403014 	movt	r3, #20
  12dba8:	e3a01018 	mov	r1, #24
  12dbac:	e0020291 	mul	r2, r1, r2
  12dbb0:	e0833002 	add	r3, r3, r2
  12dbb4:	e2833014 	add	r3, r3, #20
  12dbb8:	e5d33000 	ldrb	r3, [r3]
  12dbbc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  12dbc0:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12dbc4:	e353000a 	cmp	r3, #10
  12dbc8:	1a000005 	bne	12dbe4 <etharp_find_entry+0xb0>
  12dbcc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dbd0:	e3530000 	cmp	r3, #0
  12dbd4:	1a000002 	bne	12dbe4 <etharp_find_entry+0xb0>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
  12dbd8:	e55b3008 	ldrb	r3, [fp, #-8]
  12dbdc:	e54b3007 	strb	r3, [fp, #-7]
  12dbe0:	ea000073 	b	12ddb4 <etharp_find_entry+0x280>
    } else if (state != ETHARP_STATE_EMPTY) {
  12dbe4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dbe8:	e3530000 	cmp	r3, #0
  12dbec:	0a000070 	beq	12ddb4 <etharp_find_entry+0x280>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
  12dbf0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dbf4:	e3530001 	cmp	r3, #1
  12dbf8:	0a000009 	beq	12dc24 <etharp_find_entry+0xf0>
  12dbfc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dc00:	e3530001 	cmp	r3, #1
  12dc04:	8a000006 	bhi	12dc24 <etharp_find_entry+0xf0>
  12dc08:	e3090270 	movw	r0, #37488	; 0x9270
  12dc0c:	e3400014 	movt	r0, #20
  12dc10:	ebff553f 	bl	103114 <rt_kprintf>
  12dc14:	e3001126 	movw	r1, #294	; 0x126
  12dc18:	e309021c 	movw	r0, #37404	; 0x921c
  12dc1c:	e3400014 	movt	r0, #20
  12dc20:	ebff7523 	bl	10b0b4 <sys_arch_assert>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
  12dc24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dc28:	e3530000 	cmp	r3, #0
  12dc2c:	0a00000d 	beq	12dc68 <etharp_find_entry+0x134>
  12dc30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dc34:	e5932000 	ldr	r2, [r3]
  12dc38:	e55b1008 	ldrb	r1, [fp, #-8]
  12dc3c:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12dc40:	e3403014 	movt	r3, #20
  12dc44:	e3a00018 	mov	r0, #24
  12dc48:	e0010190 	mul	r1, r0, r1
  12dc4c:	e0833001 	add	r3, r3, r1
  12dc50:	e2833004 	add	r3, r3, #4
  12dc54:	e5933000 	ldr	r3, [r3]
  12dc58:	e1520003 	cmp	r2, r3
  12dc5c:	1a000001 	bne	12dc68 <etharp_find_entry+0x134>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
  12dc60:	e15b30d8 	ldrsb	r3, [fp, #-8]
  12dc64:	ea0000ce 	b	12dfa4 <etharp_find_entry+0x470>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  12dc68:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dc6c:	e3530001 	cmp	r3, #1
  12dc70:	1a000036 	bne	12dd50 <etharp_find_entry+0x21c>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
  12dc74:	e55b2008 	ldrb	r2, [fp, #-8]
  12dc78:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12dc7c:	e3403014 	movt	r3, #20
  12dc80:	e3a01018 	mov	r1, #24
  12dc84:	e0020291 	mul	r2, r1, r2
  12dc88:	e0833002 	add	r3, r3, r2
  12dc8c:	e5933000 	ldr	r3, [r3]
  12dc90:	e3530000 	cmp	r3, #0
  12dc94:	0a000016 	beq	12dcf4 <etharp_find_entry+0x1c0>
          if (arp_table[i].ctime >= age_queue) {
  12dc98:	e55b2008 	ldrb	r2, [fp, #-8]
  12dc9c:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12dca0:	e3403014 	movt	r3, #20
  12dca4:	e3a01018 	mov	r1, #24
  12dca8:	e0020291 	mul	r2, r1, r2
  12dcac:	e0833002 	add	r3, r3, r2
  12dcb0:	e2833012 	add	r3, r3, #18
  12dcb4:	e1d330b0 	ldrh	r3, [r3]
  12dcb8:	e15b20bc 	ldrh	r2, [fp, #-12]
  12dcbc:	e1520003 	cmp	r2, r3
  12dcc0:	8a00003b 	bhi	12ddb4 <etharp_find_entry+0x280>
            old_queue = i;
  12dcc4:	e55b3008 	ldrb	r3, [fp, #-8]
  12dcc8:	e54b3009 	strb	r3, [fp, #-9]
            age_queue = arp_table[i].ctime;
  12dccc:	e55b2008 	ldrb	r2, [fp, #-8]
  12dcd0:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12dcd4:	e3403014 	movt	r3, #20
  12dcd8:	e3a01018 	mov	r1, #24
  12dcdc:	e0020291 	mul	r2, r1, r2
  12dce0:	e0833002 	add	r3, r3, r2
  12dce4:	e2833012 	add	r3, r3, #18
  12dce8:	e1d330b0 	ldrh	r3, [r3]
  12dcec:	e14b30bc 	strh	r3, [fp, #-12]
  12dcf0:	ea00002f 	b	12ddb4 <etharp_find_entry+0x280>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
  12dcf4:	e55b2008 	ldrb	r2, [fp, #-8]
  12dcf8:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12dcfc:	e3403014 	movt	r3, #20
  12dd00:	e3a01018 	mov	r1, #24
  12dd04:	e0020291 	mul	r2, r1, r2
  12dd08:	e0833002 	add	r3, r3, r2
  12dd0c:	e2833012 	add	r3, r3, #18
  12dd10:	e1d330b0 	ldrh	r3, [r3]
  12dd14:	e15b20be 	ldrh	r2, [fp, #-14]
  12dd18:	e1520003 	cmp	r2, r3
  12dd1c:	8a000024 	bhi	12ddb4 <etharp_find_entry+0x280>
            old_pending = i;
  12dd20:	e55b3008 	ldrb	r3, [fp, #-8]
  12dd24:	e54b3005 	strb	r3, [fp, #-5]
            age_pending = arp_table[i].ctime;
  12dd28:	e55b2008 	ldrb	r2, [fp, #-8]
  12dd2c:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12dd30:	e3403014 	movt	r3, #20
  12dd34:	e3a01018 	mov	r1, #24
  12dd38:	e0020291 	mul	r2, r1, r2
  12dd3c:	e0833002 	add	r3, r3, r2
  12dd40:	e2833012 	add	r3, r3, #18
  12dd44:	e1d330b0 	ldrh	r3, [r3]
  12dd48:	e14b30be 	strh	r3, [fp, #-14]
  12dd4c:	ea000018 	b	12ddb4 <etharp_find_entry+0x280>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  12dd50:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dd54:	e3530001 	cmp	r3, #1
  12dd58:	9a000015 	bls	12ddb4 <etharp_find_entry+0x280>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  12dd5c:	e55b2008 	ldrb	r2, [fp, #-8]
  12dd60:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12dd64:	e3403014 	movt	r3, #20
  12dd68:	e3a01018 	mov	r1, #24
  12dd6c:	e0020291 	mul	r2, r1, r2
  12dd70:	e0833002 	add	r3, r3, r2
  12dd74:	e2833012 	add	r3, r3, #18
  12dd78:	e1d330b0 	ldrh	r3, [r3]
  12dd7c:	e15b21b0 	ldrh	r2, [fp, #-16]
  12dd80:	e1520003 	cmp	r2, r3
  12dd84:	8a00000a 	bhi	12ddb4 <etharp_find_entry+0x280>
            old_stable = i;
  12dd88:	e55b3008 	ldrb	r3, [fp, #-8]
  12dd8c:	e54b3006 	strb	r3, [fp, #-6]
            age_stable = arp_table[i].ctime;
  12dd90:	e55b2008 	ldrb	r2, [fp, #-8]
  12dd94:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12dd98:	e3403014 	movt	r3, #20
  12dd9c:	e3a01018 	mov	r1, #24
  12dda0:	e0020291 	mul	r2, r1, r2
  12dda4:	e0833002 	add	r3, r3, r2
  12dda8:	e2833012 	add	r3, r3, #18
  12ddac:	e1d330b0 	ldrh	r3, [r3]
  12ddb0:	e14b31b0 	strh	r3, [fp, #-16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12ddb4:	e55b3008 	ldrb	r3, [fp, #-8]
  12ddb8:	e2833001 	add	r3, r3, #1
  12ddbc:	e54b3008 	strb	r3, [fp, #-8]
  12ddc0:	e55b3008 	ldrb	r3, [fp, #-8]
  12ddc4:	e3530009 	cmp	r3, #9
  12ddc8:	9affff73 	bls	12db9c <etharp_find_entry+0x68>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  12ddcc:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12ddd0:	e2033002 	and	r3, r3, #2
  12ddd4:	e3530000 	cmp	r3, #0
  12ddd8:	1a000006 	bne	12ddf8 <etharp_find_entry+0x2c4>
  12dddc:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12dde0:	e353000a 	cmp	r3, #10
  12dde4:	1a000005 	bne	12de00 <etharp_find_entry+0x2cc>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  12dde8:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12ddec:	e2033001 	and	r3, r3, #1
  12ddf0:	e3530000 	cmp	r3, #0
  12ddf4:	1a000001 	bne	12de00 <etharp_find_entry+0x2cc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
  12ddf8:	e3e03000 	mvn	r3, #0
  12ddfc:	ea000068 	b	12dfa4 <etharp_find_entry+0x470>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  12de00:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12de04:	e3530009 	cmp	r3, #9
  12de08:	ca000002 	bgt	12de18 <etharp_find_entry+0x2e4>
    i = empty;
  12de0c:	e55b3007 	ldrb	r3, [fp, #-7]
  12de10:	e54b3008 	strb	r3, [fp, #-8]
  12de14:	ea000030 	b	12dedc <etharp_find_entry+0x3a8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
  12de18:	e15b30d6 	ldrsb	r3, [fp, #-6]
  12de1c:	e3530009 	cmp	r3, #9
  12de20:	ca000012 	bgt	12de70 <etharp_find_entry+0x33c>
      /* recycle oldest stable*/
      i = old_stable;
  12de24:	e55b3006 	ldrb	r3, [fp, #-6]
  12de28:	e54b3008 	strb	r3, [fp, #-8]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
  12de2c:	e55b2008 	ldrb	r2, [fp, #-8]
  12de30:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12de34:	e3403014 	movt	r3, #20
  12de38:	e3a01018 	mov	r1, #24
  12de3c:	e0020291 	mul	r2, r1, r2
  12de40:	e0833002 	add	r3, r3, r2
  12de44:	e5933000 	ldr	r3, [r3]
  12de48:	e3530000 	cmp	r3, #0
  12de4c:	0a000015 	beq	12dea8 <etharp_find_entry+0x374>
  12de50:	e30902b0 	movw	r0, #37552	; 0x92b0
  12de54:	e3400014 	movt	r0, #20
  12de58:	ebff54ad 	bl	103114 <rt_kprintf>
  12de5c:	e300116f 	movw	r1, #367	; 0x16f
  12de60:	e309021c 	movw	r0, #37404	; 0x921c
  12de64:	e3400014 	movt	r0, #20
  12de68:	ebff7491 	bl	10b0b4 <sys_arch_assert>
  12de6c:	ea00000d 	b	12dea8 <etharp_find_entry+0x374>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
  12de70:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12de74:	e3530009 	cmp	r3, #9
  12de78:	ca000002 	bgt	12de88 <etharp_find_entry+0x354>
      /* recycle oldest pending */
      i = old_pending;
  12de7c:	e55b3005 	ldrb	r3, [fp, #-5]
  12de80:	e54b3008 	strb	r3, [fp, #-8]
  12de84:	ea000007 	b	12dea8 <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
  12de88:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12de8c:	e3530009 	cmp	r3, #9
  12de90:	ca000002 	bgt	12dea0 <etharp_find_entry+0x36c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
  12de94:	e55b3009 	ldrb	r3, [fp, #-9]
  12de98:	e54b3008 	strb	r3, [fp, #-8]
  12de9c:	ea000001 	b	12dea8 <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
  12dea0:	e3e03000 	mvn	r3, #0
  12dea4:	ea00003e 	b	12dfa4 <etharp_find_entry+0x470>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12dea8:	e55b3008 	ldrb	r3, [fp, #-8]
  12deac:	e3530009 	cmp	r3, #9
  12deb0:	9a000006 	bls	12ded0 <etharp_find_entry+0x39c>
  12deb4:	e30902c8 	movw	r0, #37576	; 0x92c8
  12deb8:	e3400014 	movt	r0, #20
  12debc:	ebff5494 	bl	103114 <rt_kprintf>
  12dec0:	e3001181 	movw	r1, #385	; 0x181
  12dec4:	e309021c 	movw	r0, #37404	; 0x921c
  12dec8:	e3400014 	movt	r0, #20
  12decc:	ebff7478 	bl	10b0b4 <sys_arch_assert>
    etharp_free_entry(i);
  12ded0:	e55b3008 	ldrb	r3, [fp, #-8]
  12ded4:	e1a00003 	mov	r0, r3
  12ded8:	ebfffe5a 	bl	12d848 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12dedc:	e55b3008 	ldrb	r3, [fp, #-8]
  12dee0:	e3530009 	cmp	r3, #9
  12dee4:	9a000006 	bls	12df04 <etharp_find_entry+0x3d0>
  12dee8:	e30902c8 	movw	r0, #37576	; 0x92c8
  12deec:	e3400014 	movt	r0, #20
  12def0:	ebff5487 	bl	103114 <rt_kprintf>
  12def4:	e3001185 	movw	r1, #389	; 0x185
  12def8:	e309021c 	movw	r0, #37404	; 0x921c
  12defc:	e3400014 	movt	r0, #20
  12df00:	ebff746b 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
  12df04:	e55b2008 	ldrb	r2, [fp, #-8]
  12df08:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12df0c:	e3403014 	movt	r3, #20
  12df10:	e3a01018 	mov	r1, #24
  12df14:	e0020291 	mul	r2, r1, r2
  12df18:	e0833002 	add	r3, r3, r2
  12df1c:	e2833014 	add	r3, r3, #20
  12df20:	e5d33000 	ldrb	r3, [r3]
  12df24:	e3530000 	cmp	r3, #0
  12df28:	0a000006 	beq	12df48 <etharp_find_entry+0x414>
  12df2c:	e30902dc 	movw	r0, #37596	; 0x92dc
  12df30:	e3400014 	movt	r0, #20
  12df34:	ebff5476 	bl	103114 <rt_kprintf>
  12df38:	e3001187 	movw	r1, #391	; 0x187
  12df3c:	e309021c 	movw	r0, #37404	; 0x921c
  12df40:	e3400014 	movt	r0, #20
  12df44:	ebff745a 	bl	10b0b4 <sys_arch_assert>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  12df48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12df4c:	e3530000 	cmp	r3, #0
  12df50:	0a000009 	beq	12df7c <etharp_find_entry+0x448>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
  12df54:	e55b1008 	ldrb	r1, [fp, #-8]
  12df58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12df5c:	e5932000 	ldr	r2, [r3]
  12df60:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12df64:	e3403014 	movt	r3, #20
  12df68:	e3a00018 	mov	r0, #24
  12df6c:	e0010190 	mul	r1, r0, r1
  12df70:	e0833001 	add	r3, r3, r1
  12df74:	e2833004 	add	r3, r3, #4
  12df78:	e5832000 	str	r2, [r3]
  }
  arp_table[i].ctime = 0;
  12df7c:	e55b2008 	ldrb	r2, [fp, #-8]
  12df80:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12df84:	e3403014 	movt	r3, #20
  12df88:	e3a01018 	mov	r1, #24
  12df8c:	e0020291 	mul	r2, r1, r2
  12df90:	e0833002 	add	r3, r3, r2
  12df94:	e2833012 	add	r3, r3, #18
  12df98:	e3a02000 	mov	r2, #0
  12df9c:	e1c320b0 	strh	r2, [r3]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
  12dfa0:	e15b30d8 	ldrsb	r3, [fp, #-8]
}
  12dfa4:	e1a00003 	mov	r0, r3
  12dfa8:	e24bd004 	sub	sp, fp, #4
  12dfac:	e8bd8800 	pop	{fp, pc}

0012dfb0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
  12dfb0:	e92d4800 	push	{fp, lr}
  12dfb4:	e28db004 	add	fp, sp, #4
  12dfb8:	e24dd028 	sub	sp, sp, #40	; 0x28
  12dfbc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12dfc0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12dfc4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12dfc8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
  12dfcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dfd0:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12dfd4:	e3530006 	cmp	r3, #6
  12dfd8:	0a000006 	beq	12dff8 <etharp_update_arp_entry+0x48>
  12dfdc:	e3090308 	movw	r0, #37640	; 0x9308
  12dfe0:	e3400014 	movt	r0, #20
  12dfe4:	ebff544a 	bl	103114 <rt_kprintf>
  12dfe8:	e30011ab 	movw	r1, #427	; 0x1ab
  12dfec:	e309021c 	movw	r0, #37404	; 0x921c
  12dff0:	e3400014 	movt	r0, #20
  12dff4:	ebff742e 	bl	10b0b4 <sys_arch_assert>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
  12dff8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dffc:	e3530000 	cmp	r3, #0
  12e000:	0a000010 	beq	12e048 <etharp_update_arp_entry+0x98>
  12e004:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e008:	e5933000 	ldr	r3, [r3]
  12e00c:	e3530000 	cmp	r3, #0
  12e010:	0a00000c 	beq	12e048 <etharp_update_arp_entry+0x98>
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12e014:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e018:	e5933000 	ldr	r3, [r3]
  12e01c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12e020:	e1a00003 	mov	r0, r3
  12e024:	eb00112a 	bl	1324d4 <ip4_addr_isbroadcast_u32>
  12e028:	e1a03000 	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
  12e02c:	e3530000 	cmp	r3, #0
  12e030:	1a000004 	bne	12e048 <etharp_update_arp_entry+0x98>
      ip4_addr_ismulticast(ipaddr)) {
  12e034:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e038:	e5933000 	ldr	r3, [r3]
  12e03c:	e20330f0 	and	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12e040:	e35300e0 	cmp	r3, #224	; 0xe0
  12e044:	1a000001 	bne	12e050 <etharp_update_arp_entry+0xa0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12e048:	e3e0300f 	mvn	r3, #15
  12e04c:	ea00005e 	b	12e1cc <etharp_update_arp_entry+0x21c>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
  12e050:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  12e054:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12e058:	e1a01003 	mov	r1, r3
  12e05c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e060:	ebfffeb3 	bl	12db34 <etharp_find_entry>
  12e064:	e1a03000 	mov	r3, r0
  12e068:	e54b3005 	strb	r3, [fp, #-5]
  /* bail out if no entry could be found */
  if (i < 0) {
  12e06c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e070:	e3530000 	cmp	r3, #0
  12e074:	aa000001 	bge	12e080 <etharp_update_arp_entry+0xd0>
    return (err_t)i;
  12e078:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e07c:	ea000052 	b	12e1cc <etharp_update_arp_entry+0x21c>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
  12e080:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e084:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e088:	e3403014 	movt	r3, #20
  12e08c:	e3a01018 	mov	r1, #24
  12e090:	e0020291 	mul	r2, r1, r2
  12e094:	e0833002 	add	r3, r3, r2
  12e098:	e2833014 	add	r3, r3, #20
  12e09c:	e3a02002 	mov	r2, #2
  12e0a0:	e5c32000 	strb	r2, [r3]
  }

  /* record network interface */
  arp_table[i].netif = netif;
  12e0a4:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e0a8:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e0ac:	e3403014 	movt	r3, #20
  12e0b0:	e3a01018 	mov	r1, #24
  12e0b4:	e0020291 	mul	r2, r1, r2
  12e0b8:	e0833002 	add	r3, r3, r2
  12e0bc:	e2833008 	add	r3, r3, #8
  12e0c0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12e0c4:	e5832000 	str	r2, [r3]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  12e0c8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e0cc:	e3a02018 	mov	r2, #24
  12e0d0:	e0030392 	mul	r3, r2, r3
  12e0d4:	e2832008 	add	r2, r3, #8
  12e0d8:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e0dc:	e3403014 	movt	r3, #20
  12e0e0:	e0823003 	add	r3, r2, r3
  12e0e4:	e2833004 	add	r3, r3, #4
  12e0e8:	e3a02006 	mov	r2, #6
  12e0ec:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  12e0f0:	e1a00003 	mov	r0, r3
  12e0f4:	eb004b18 	bl	140d5c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
  12e0f8:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e0fc:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e100:	e3403014 	movt	r3, #20
  12e104:	e3a01018 	mov	r1, #24
  12e108:	e0020291 	mul	r2, r1, r2
  12e10c:	e0833002 	add	r3, r3, r2
  12e110:	e2833012 	add	r3, r3, #18
  12e114:	e3a02000 	mov	r2, #0
  12e118:	e1c320b0 	strh	r2, [r3]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
  12e11c:	ea000020 	b	12e1a4 <etharp_update_arp_entry+0x1f4>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
  12e120:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e124:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e128:	e3403014 	movt	r3, #20
  12e12c:	e3a01018 	mov	r1, #24
  12e130:	e0020291 	mul	r2, r1, r2
  12e134:	e0833002 	add	r3, r3, r2
  12e138:	e5933000 	ldr	r3, [r3]
  12e13c:	e50b300c 	str	r3, [fp, #-12]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
  12e140:	e15b10d5 	ldrsb	r1, [fp, #-5]
  12e144:	e51b300c 	ldr	r3, [fp, #-12]
  12e148:	e5932000 	ldr	r2, [r3]
  12e14c:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e150:	e3403014 	movt	r3, #20
  12e154:	e3a00018 	mov	r0, #24
  12e158:	e0010190 	mul	r1, r0, r1
  12e15c:	e0833001 	add	r3, r3, r1
  12e160:	e5832000 	str	r2, [r3]
    /* get the packet pointer */
    p = q->p;
  12e164:	e51b300c 	ldr	r3, [fp, #-12]
  12e168:	e5933004 	ldr	r3, [r3, #4]
  12e16c:	e50b3010 	str	r3, [fp, #-16]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
  12e170:	e51b100c 	ldr	r1, [fp, #-12]
  12e174:	e3a0000b 	mov	r0, #11
  12e178:	ebffac2f 	bl	11923c <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
  12e17c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e180:	e283203b 	add	r2, r3, #59	; 0x3b
  12e184:	e3a03b02 	mov	r3, #2048	; 0x800
  12e188:	e58d3000 	str	r3, [sp]
  12e18c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e190:	e51b1010 	ldr	r1, [fp, #-16]
  12e194:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e198:	ebffeb48 	bl	128ec0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
  12e19c:	e51b0010 	ldr	r0, [fp, #-16]
  12e1a0:	ebffb333 	bl	11ae74 <pbuf_free>
  while (arp_table[i].q != NULL) {
  12e1a4:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e1a8:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e1ac:	e3403014 	movt	r3, #20
  12e1b0:	e3a01018 	mov	r1, #24
  12e1b4:	e0020291 	mul	r2, r1, r2
  12e1b8:	e0833002 	add	r3, r3, r2
  12e1bc:	e5933000 	ldr	r3, [r3]
  12e1c0:	e3530000 	cmp	r3, #0
  12e1c4:	1affffd5 	bne	12e120 <etharp_update_arp_entry+0x170>
  }
  return ERR_OK;
  12e1c8:	e3a03000 	mov	r3, #0
}
  12e1cc:	e1a00003 	mov	r0, r3
  12e1d0:	e24bd004 	sub	sp, fp, #4
  12e1d4:	e8bd8800 	pop	{fp, pc}

0012e1d8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
  12e1d8:	e92d4800 	push	{fp, lr}
  12e1dc:	e28db004 	add	fp, sp, #4
  12e1e0:	e24dd010 	sub	sp, sp, #16
  12e1e4:	e50b0010 	str	r0, [fp, #-16]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12e1e8:	e3a03000 	mov	r3, #0
  12e1ec:	e54b3005 	strb	r3, [fp, #-5]
  12e1f0:	ea00001c 	b	12e268 <etharp_cleanup_netif+0x90>
    u8_t state = arp_table[i].state;
  12e1f4:	e55b2005 	ldrb	r2, [fp, #-5]
  12e1f8:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e1fc:	e3403014 	movt	r3, #20
  12e200:	e3a01018 	mov	r1, #24
  12e204:	e0020291 	mul	r2, r1, r2
  12e208:	e0833002 	add	r3, r3, r2
  12e20c:	e2833014 	add	r3, r3, #20
  12e210:	e5d33000 	ldrb	r3, [r3]
  12e214:	e54b3006 	strb	r3, [fp, #-6]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
  12e218:	e55b3006 	ldrb	r3, [fp, #-6]
  12e21c:	e3530000 	cmp	r3, #0
  12e220:	0a00000d 	beq	12e25c <etharp_cleanup_netif+0x84>
  12e224:	e55b2005 	ldrb	r2, [fp, #-5]
  12e228:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e22c:	e3403014 	movt	r3, #20
  12e230:	e3a01018 	mov	r1, #24
  12e234:	e0020291 	mul	r2, r1, r2
  12e238:	e0833002 	add	r3, r3, r2
  12e23c:	e2833008 	add	r3, r3, #8
  12e240:	e5933000 	ldr	r3, [r3]
  12e244:	e51b2010 	ldr	r2, [fp, #-16]
  12e248:	e1520003 	cmp	r2, r3
  12e24c:	1a000002 	bne	12e25c <etharp_cleanup_netif+0x84>
      etharp_free_entry(i);
  12e250:	e55b3005 	ldrb	r3, [fp, #-5]
  12e254:	e1a00003 	mov	r0, r3
  12e258:	ebfffd7a 	bl	12d848 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12e25c:	e55b3005 	ldrb	r3, [fp, #-5]
  12e260:	e2833001 	add	r3, r3, #1
  12e264:	e54b3005 	strb	r3, [fp, #-5]
  12e268:	e55b3005 	ldrb	r3, [fp, #-5]
  12e26c:	e3530009 	cmp	r3, #9
  12e270:	9affffdf 	bls	12e1f4 <etharp_cleanup_netif+0x1c>
    }
  }
}
  12e274:	e320f000 	nop	{0}
  12e278:	e24bd004 	sub	sp, fp, #4
  12e27c:	e8bd8800 	pop	{fp, pc}

0012e280 <etharp_find_addr>:
 * @return table index if found, -1 otherwise
 */
s8_t
etharp_find_addr(struct netif *netif, const ip4_addr_t *ipaddr,
         struct eth_addr **eth_ret, const ip4_addr_t **ip_ret)
{
  12e280:	e92d4800 	push	{fp, lr}
  12e284:	e28db004 	add	fp, sp, #4
  12e288:	e24dd018 	sub	sp, sp, #24
  12e28c:	e50b0010 	str	r0, [fp, #-16]
  12e290:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  12e294:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  12e298:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  s8_t i;

  LWIP_ASSERT("eth_ret != NULL && ip_ret != NULL",
  12e29c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e2a0:	e3530000 	cmp	r3, #0
  12e2a4:	0a000002 	beq	12e2b4 <etharp_find_addr+0x34>
  12e2a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e2ac:	e3530000 	cmp	r3, #0
  12e2b0:	1a000006 	bne	12e2d0 <etharp_find_addr+0x50>
  12e2b4:	e309032c 	movw	r0, #37676	; 0x932c
  12e2b8:	e3400014 	movt	r0, #20
  12e2bc:	ebff5394 	bl	103114 <rt_kprintf>
  12e2c0:	e300124d 	movw	r1, #589	; 0x24d
  12e2c4:	e309021c 	movw	r0, #37404	; 0x921c
  12e2c8:	e3400014 	movt	r0, #20
  12e2cc:	ebff7378 	bl	10b0b4 <sys_arch_assert>
    eth_ret != NULL && ip_ret != NULL);

  LWIP_UNUSED_ARG(netif);

  i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY, netif);
  12e2d0:	e51b2010 	ldr	r2, [fp, #-16]
  12e2d4:	e3a01002 	mov	r1, #2
  12e2d8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12e2dc:	ebfffe14 	bl	12db34 <etharp_find_entry>
  12e2e0:	e1a03000 	mov	r3, r0
  12e2e4:	e54b3005 	strb	r3, [fp, #-5]
  if ((i >= 0) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12e2e8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e2ec:	e3530000 	cmp	r3, #0
  12e2f0:	ba00001e 	blt	12e370 <etharp_find_addr+0xf0>
  12e2f4:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e2f8:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e2fc:	e3403014 	movt	r3, #20
  12e300:	e3a01018 	mov	r1, #24
  12e304:	e0020291 	mul	r2, r1, r2
  12e308:	e0833002 	add	r3, r3, r2
  12e30c:	e2833014 	add	r3, r3, #20
  12e310:	e5d33000 	ldrb	r3, [r3]
  12e314:	e3530001 	cmp	r3, #1
  12e318:	9a000014 	bls	12e370 <etharp_find_addr+0xf0>
      *eth_ret = &arp_table[i].ethaddr;
  12e31c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e320:	e3a02018 	mov	r2, #24
  12e324:	e0030392 	mul	r3, r2, r3
  12e328:	e2832008 	add	r2, r3, #8
  12e32c:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e330:	e3403014 	movt	r3, #20
  12e334:	e0823003 	add	r3, r2, r3
  12e338:	e2832004 	add	r2, r3, #4
  12e33c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e340:	e5832000 	str	r2, [r3]
      *ip_ret = &arp_table[i].ipaddr;
  12e344:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e348:	e3a02018 	mov	r2, #24
  12e34c:	e0020392 	mul	r2, r2, r3
  12e350:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e354:	e3403014 	movt	r3, #20
  12e358:	e0823003 	add	r3, r2, r3
  12e35c:	e2832004 	add	r2, r3, #4
  12e360:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e364:	e5832000 	str	r2, [r3]
      return i;
  12e368:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e36c:	ea000000 	b	12e374 <etharp_find_addr+0xf4>
  }
  return -1;
  12e370:	e3e03000 	mvn	r3, #0
}
  12e374:	e1a00003 	mov	r0, r3
  12e378:	e24bd004 	sub	sp, fp, #4
  12e37c:	e8bd8800 	pop	{fp, pc}

0012e380 <etharp_get_entry>:
 * @param eth_ret return value: ETH address
 * @return 1 on valid index, 0 otherwise
 */
u8_t
etharp_get_entry(u8_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)
{
  12e380:	e92d4800 	push	{fp, lr}
  12e384:	e28db004 	add	fp, sp, #4
  12e388:	e24dd010 	sub	sp, sp, #16
  12e38c:	e50b100c 	str	r1, [fp, #-12]
  12e390:	e50b2010 	str	r2, [fp, #-16]
  12e394:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12e398:	e1a03000 	mov	r3, r0
  12e39c:	e54b3005 	strb	r3, [fp, #-5]
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12e3a0:	e51b300c 	ldr	r3, [fp, #-12]
  12e3a4:	e3530000 	cmp	r3, #0
  12e3a8:	1a000006 	bne	12e3c8 <etharp_get_entry+0x48>
  12e3ac:	e3090350 	movw	r0, #37712	; 0x9350
  12e3b0:	e3400014 	movt	r0, #20
  12e3b4:	ebff5356 	bl	103114 <rt_kprintf>
  12e3b8:	e3001266 	movw	r1, #614	; 0x266
  12e3bc:	e309021c 	movw	r0, #37404	; 0x921c
  12e3c0:	e3400014 	movt	r0, #20
  12e3c4:	ebff733a 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12e3c8:	e51b3010 	ldr	r3, [fp, #-16]
  12e3cc:	e3530000 	cmp	r3, #0
  12e3d0:	1a000006 	bne	12e3f0 <etharp_get_entry+0x70>
  12e3d4:	e3090360 	movw	r0, #37728	; 0x9360
  12e3d8:	e3400014 	movt	r0, #20
  12e3dc:	ebff534c 	bl	103114 <rt_kprintf>
  12e3e0:	e3001267 	movw	r1, #615	; 0x267
  12e3e4:	e309021c 	movw	r0, #37404	; 0x921c
  12e3e8:	e3400014 	movt	r0, #20
  12e3ec:	ebff7330 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
  12e3f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12e3f4:	e3530000 	cmp	r3, #0
  12e3f8:	1a000006 	bne	12e418 <etharp_get_entry+0x98>
  12e3fc:	e3090370 	movw	r0, #37744	; 0x9370
  12e400:	e3400014 	movt	r0, #20
  12e404:	ebff5342 	bl	103114 <rt_kprintf>
  12e408:	e3a01f9a 	mov	r1, #616	; 0x268
  12e40c:	e309021c 	movw	r0, #37404	; 0x921c
  12e410:	e3400014 	movt	r0, #20
  12e414:	ebff7326 	bl	10b0b4 <sys_arch_assert>

  if((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12e418:	e55b3005 	ldrb	r3, [fp, #-5]
  12e41c:	e3530009 	cmp	r3, #9
  12e420:	8a000028 	bhi	12e4c8 <etharp_get_entry+0x148>
  12e424:	e55b2005 	ldrb	r2, [fp, #-5]
  12e428:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e42c:	e3403014 	movt	r3, #20
  12e430:	e3a01018 	mov	r1, #24
  12e434:	e0020291 	mul	r2, r1, r2
  12e438:	e0833002 	add	r3, r3, r2
  12e43c:	e2833014 	add	r3, r3, #20
  12e440:	e5d33000 	ldrb	r3, [r3]
  12e444:	e3530001 	cmp	r3, #1
  12e448:	9a00001e 	bls	12e4c8 <etharp_get_entry+0x148>
    *ipaddr  = &arp_table[i].ipaddr;
  12e44c:	e55b3005 	ldrb	r3, [fp, #-5]
  12e450:	e3a02018 	mov	r2, #24
  12e454:	e0020392 	mul	r2, r2, r3
  12e458:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e45c:	e3403014 	movt	r3, #20
  12e460:	e0823003 	add	r3, r2, r3
  12e464:	e2832004 	add	r2, r3, #4
  12e468:	e51b300c 	ldr	r3, [fp, #-12]
  12e46c:	e5832000 	str	r2, [r3]
    *netif   = arp_table[i].netif;
  12e470:	e55b2005 	ldrb	r2, [fp, #-5]
  12e474:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e478:	e3403014 	movt	r3, #20
  12e47c:	e3a01018 	mov	r1, #24
  12e480:	e0020291 	mul	r2, r1, r2
  12e484:	e0833002 	add	r3, r3, r2
  12e488:	e2833008 	add	r3, r3, #8
  12e48c:	e5932000 	ldr	r2, [r3]
  12e490:	e51b3010 	ldr	r3, [fp, #-16]
  12e494:	e5832000 	str	r2, [r3]
    *eth_ret = &arp_table[i].ethaddr;
  12e498:	e55b3005 	ldrb	r3, [fp, #-5]
  12e49c:	e3a02018 	mov	r2, #24
  12e4a0:	e0030392 	mul	r3, r2, r3
  12e4a4:	e2832008 	add	r2, r3, #8
  12e4a8:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e4ac:	e3403014 	movt	r3, #20
  12e4b0:	e0823003 	add	r3, r2, r3
  12e4b4:	e2832004 	add	r2, r3, #4
  12e4b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12e4bc:	e5832000 	str	r2, [r3]
    return 1;
  12e4c0:	e3a03001 	mov	r3, #1
  12e4c4:	ea000000 	b	12e4cc <etharp_get_entry+0x14c>
  } else {
    return 0;
  12e4c8:	e3a03000 	mov	r3, #0
  }
}
  12e4cc:	e1a00003 	mov	r0, r3
  12e4d0:	e24bd004 	sub	sp, fp, #4
  12e4d4:	e8bd8800 	pop	{fp, pc}

0012e4d8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
  12e4d8:	e92d4800 	push	{fp, lr}
  12e4dc:	e28db004 	add	fp, sp, #4
  12e4e0:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e4e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e4e8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12e4ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e4f0:	e3530000 	cmp	r3, #0
  12e4f4:	1a000007 	bne	12e518 <etharp_input+0x40>
  12e4f8:	e3090360 	movw	r0, #37728	; 0x9360
  12e4fc:	e3400014 	movt	r0, #20
  12e500:	ebff5303 	bl	103114 <rt_kprintf>
  12e504:	e3a01fa2 	mov	r1, #648	; 0x288
  12e508:	e309021c 	movw	r0, #37404	; 0x921c
  12e50c:	e3400014 	movt	r0, #20
  12e510:	ebff72e7 	bl	10b0b4 <sys_arch_assert>
  12e514:	ea000085 	b	12e730 <etharp_input+0x258>

  hdr = (struct etharp_hdr *)p->payload;
  12e518:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e51c:	e5933004 	ldr	r3, [r3, #4]
  12e520:	e50b300c 	str	r3, [fp, #-12]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e524:	e51b300c 	ldr	r3, [fp, #-12]
  12e528:	e1d330b0 	ldrh	r3, [r3]
  12e52c:	e6ff3073 	uxth	r3, r3
  12e530:	e3530c01 	cmp	r3, #256	; 0x100
  12e534:	1a00000c 	bne	12e56c <etharp_input+0x94>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e538:	e51b300c 	ldr	r3, [fp, #-12]
  12e53c:	e5d33004 	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e540:	e3530006 	cmp	r3, #6
  12e544:	1a000008 	bne	12e56c <etharp_input+0x94>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e548:	e51b300c 	ldr	r3, [fp, #-12]
  12e54c:	e5d33005 	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e550:	e3530004 	cmp	r3, #4
  12e554:	1a000004 	bne	12e56c <etharp_input+0x94>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
  12e558:	e51b300c 	ldr	r3, [fp, #-12]
  12e55c:	e1d330b2 	ldrh	r3, [r3, #2]
  12e560:	e6ff3073 	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e564:	e3530008 	cmp	r3, #8
  12e568:	0a000012 	beq	12e5b8 <etharp_input+0xe0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
  12e56c:	e30c3a48 	movw	r3, #51784	; 0xca48
  12e570:	e3403015 	movt	r3, #21
  12e574:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  12e578:	e2833001 	add	r3, r3, #1
  12e57c:	e6ff2073 	uxth	r2, r3
  12e580:	e30c3a48 	movw	r3, #51784	; 0xca48
  12e584:	e3403015 	movt	r3, #21
  12e588:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  12e58c:	e30c3a48 	movw	r3, #51784	; 0xca48
  12e590:	e3403015 	movt	r3, #21
  12e594:	e1d331be 	ldrh	r3, [r3, #30]
  12e598:	e2833001 	add	r3, r3, #1
  12e59c:	e6ff2073 	uxth	r2, r3
  12e5a0:	e30c3a48 	movw	r3, #51784	; 0xca48
  12e5a4:	e3403015 	movt	r3, #21
  12e5a8:	e1c321be 	strh	r2, [r3, #30]
    pbuf_free(p);
  12e5ac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e5b0:	ebffb22f 	bl	11ae74 <pbuf_free>
    return;
  12e5b4:	ea00005d 	b	12e730 <etharp_input+0x258>
  }
  ETHARP_STATS_INC(etharp.recv);
  12e5b8:	e30c3a48 	movw	r3, #51784	; 0xca48
  12e5bc:	e3403015 	movt	r3, #21
  12e5c0:	e1d331ba 	ldrh	r3, [r3, #26]
  12e5c4:	e2833001 	add	r3, r3, #1
  12e5c8:	e6ff2073 	uxth	r2, r3
  12e5cc:	e30c3a48 	movw	r3, #51784	; 0xca48
  12e5d0:	e3403015 	movt	r3, #21
  12e5d4:	e1c321ba 	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  12e5d8:	e51b300c 	ldr	r3, [fp, #-12]
  12e5dc:	e283300e 	add	r3, r3, #14
  12e5e0:	e5933000 	ldr	r3, [r3]
  12e5e4:	e50b3010 	str	r3, [fp, #-16]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  12e5e8:	e51b300c 	ldr	r3, [fp, #-12]
  12e5ec:	e2833018 	add	r3, r3, #24
  12e5f0:	e5933000 	ldr	r3, [r3]
  12e5f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  12e5f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e5fc:	e2833004 	add	r3, r3, #4
  12e600:	e5933000 	ldr	r3, [r3]
  12e604:	e3530000 	cmp	r3, #0
  12e608:	1a000002 	bne	12e618 <etharp_input+0x140>
    for_us = 0;
  12e60c:	e3a03000 	mov	r3, #0
  12e610:	e54b3005 	strb	r3, [fp, #-5]
  12e614:	ea000008 	b	12e63c <etharp_input+0x164>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
  12e618:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12e61c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e620:	e2833004 	add	r3, r3, #4
  12e624:	e5933000 	ldr	r3, [r3]
  12e628:	e1520003 	cmp	r2, r3
  12e62c:	03a03001 	moveq	r3, #1
  12e630:	13a03000 	movne	r3, #0
  12e634:	e6ef3073 	uxtb	r3, r3
  12e638:	e54b3005 	strb	r3, [fp, #-5]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  12e63c:	e51b300c 	ldr	r3, [fp, #-12]
  12e640:	e2832008 	add	r2, r3, #8
  12e644:	e55b3005 	ldrb	r3, [fp, #-5]
  12e648:	e3530000 	cmp	r3, #0
  12e64c:	0a000001 	beq	12e658 <etharp_input+0x180>
  12e650:	e3a03001 	mov	r3, #1
  12e654:	ea000000 	b	12e65c <etharp_input+0x184>
  12e658:	e3a03002 	mov	r3, #2
  12e65c:	e24b1010 	sub	r1, fp, #16
  12e660:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e664:	ebfffe51 	bl	12dfb0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
  12e668:	e51b300c 	ldr	r3, [fp, #-12]
  12e66c:	e1d330b6 	ldrh	r3, [r3, #6]
  12e670:	e6ff3073 	uxth	r3, r3
  12e674:	e3530c01 	cmp	r3, #256	; 0x100
  12e678:	0a000002 	beq	12e688 <etharp_input+0x1b0>
  12e67c:	e3530c02 	cmp	r3, #512	; 0x200
  12e680:	0a000019 	beq	12e6ec <etharp_input+0x214>
  12e684:	ea00001d 	b	12e700 <etharp_input+0x228>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
  12e688:	e55b3005 	ldrb	r3, [fp, #-5]
  12e68c:	e3530000 	cmp	r3, #0
  12e690:	0a000023 	beq	12e724 <etharp_input+0x24c>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
  12e694:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e698:	e283003b 	add	r0, r3, #59	; 0x3b
  12e69c:	e51b300c 	ldr	r3, [fp, #-12]
  12e6a0:	e283c008 	add	ip, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
  12e6a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e6a8:	e283e03b 	add	lr, r3, #59	; 0x3b
  12e6ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e6b0:	e2833004 	add	r3, r3, #4
                 &hdr->shwaddr, &sipaddr,
  12e6b4:	e51b200c 	ldr	r2, [fp, #-12]
  12e6b8:	e2822008 	add	r2, r2, #8
      etharp_raw(netif,
  12e6bc:	e3a01002 	mov	r1, #2
  12e6c0:	e58d100c 	str	r1, [sp, #12]
  12e6c4:	e24b1010 	sub	r1, fp, #16
  12e6c8:	e58d1008 	str	r1, [sp, #8]
  12e6cc:	e58d2004 	str	r2, [sp, #4]
  12e6d0:	e58d3000 	str	r3, [sp]
  12e6d4:	e1a0300e 	mov	r3, lr
  12e6d8:	e1a0200c 	mov	r2, ip
  12e6dc:	e1a01000 	mov	r1, r0
  12e6e0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e6e4:	eb0002d5 	bl	12f240 <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
  12e6e8:	ea00000d 	b	12e724 <etharp_input+0x24c>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
  12e6ec:	e24b3010 	sub	r3, fp, #16
  12e6f0:	e1a01003 	mov	r1, r3
  12e6f4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e6f8:	ebfff256 	bl	12b058 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  12e6fc:	ea000009 	b	12e728 <etharp_input+0x250>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
  12e700:	e30c3a48 	movw	r3, #51784	; 0xca48
  12e704:	e3403015 	movt	r3, #21
  12e708:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  12e70c:	e2833001 	add	r3, r3, #1
  12e710:	e6ff2073 	uxth	r2, r3
  12e714:	e30c3a48 	movw	r3, #51784	; 0xca48
  12e718:	e3403015 	movt	r3, #21
  12e71c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    break;
  12e720:	ea000000 	b	12e728 <etharp_input+0x250>
    break;
  12e724:	e320f000 	nop	{0}
  }
  /* free ARP packet */
  pbuf_free(p);
  12e728:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e72c:	ebffb1d0 	bl	11ae74 <pbuf_free>
}
  12e730:	e24bd004 	sub	sp, fp, #4
  12e734:	e8bd8800 	pop	{fp, pc}

0012e738 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
  12e738:	e92d4800 	push	{fp, lr}
  12e73c:	e28db004 	add	fp, sp, #4
  12e740:	e24dd018 	sub	sp, sp, #24
  12e744:	e50b0008 	str	r0, [fp, #-8]
  12e748:	e50b100c 	str	r1, [fp, #-12]
  12e74c:	e1a03002 	mov	r3, r2
  12e750:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
  12e754:	e55b200d 	ldrb	r2, [fp, #-13]
  12e758:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e75c:	e3403014 	movt	r3, #20
  12e760:	e3a01018 	mov	r1, #24
  12e764:	e0020291 	mul	r2, r1, r2
  12e768:	e0833002 	add	r3, r3, r2
  12e76c:	e2833014 	add	r3, r3, #20
  12e770:	e5d33000 	ldrb	r3, [r3]
  12e774:	e3530001 	cmp	r3, #1
  12e778:	8a000006 	bhi	12e798 <etharp_output_to_arp_index+0x60>
  12e77c:	e3090380 	movw	r0, #37760	; 0x9380
  12e780:	e3400014 	movt	r0, #20
  12e784:	ebff5262 	bl	103114 <rt_kprintf>
  12e788:	e30012ed 	movw	r1, #749	; 0x2ed
  12e78c:	e309021c 	movw	r0, #37404	; 0x921c
  12e790:	e3400014 	movt	r0, #20
  12e794:	ebff7246 	bl	10b0b4 <sys_arch_assert>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
  12e798:	e55b200d 	ldrb	r2, [fp, #-13]
  12e79c:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e7a0:	e3403014 	movt	r3, #20
  12e7a4:	e3a01018 	mov	r1, #24
  12e7a8:	e0020291 	mul	r2, r1, r2
  12e7ac:	e0833002 	add	r3, r3, r2
  12e7b0:	e2833014 	add	r3, r3, #20
  12e7b4:	e5d33000 	ldrb	r3, [r3]
  12e7b8:	e3530002 	cmp	r3, #2
  12e7bc:	1a000049 	bne	12e8e8 <etharp_output_to_arp_index+0x1b0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
  12e7c0:	e55b200d 	ldrb	r2, [fp, #-13]
  12e7c4:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e7c8:	e3403014 	movt	r3, #20
  12e7cc:	e3a01018 	mov	r1, #24
  12e7d0:	e0020291 	mul	r2, r1, r2
  12e7d4:	e0833002 	add	r3, r3, r2
  12e7d8:	e2833012 	add	r3, r3, #18
  12e7dc:	e1d330b0 	ldrh	r3, [r3]
  12e7e0:	e3530f47 	cmp	r3, #284	; 0x11c
  12e7e4:	9a000016 	bls	12e844 <etharp_output_to_arp_index+0x10c>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  12e7e8:	e55b300d 	ldrb	r3, [fp, #-13]
  12e7ec:	e3a02018 	mov	r2, #24
  12e7f0:	e0020392 	mul	r2, r2, r3
  12e7f4:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e7f8:	e3403014 	movt	r3, #20
  12e7fc:	e0823003 	add	r3, r2, r3
  12e800:	e2833004 	add	r3, r3, #4
  12e804:	e1a01003 	mov	r1, r3
  12e808:	e51b0008 	ldr	r0, [fp, #-8]
  12e80c:	eb00032b 	bl	12f4c0 <etharp_request>
  12e810:	e1a03000 	mov	r3, r0
  12e814:	e3530000 	cmp	r3, #0
  12e818:	1a000032 	bne	12e8e8 <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12e81c:	e55b200d 	ldrb	r2, [fp, #-13]
  12e820:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e824:	e3403014 	movt	r3, #20
  12e828:	e3a01018 	mov	r1, #24
  12e82c:	e0020291 	mul	r2, r1, r2
  12e830:	e0833002 	add	r3, r3, r2
  12e834:	e2833014 	add	r3, r3, #20
  12e838:	e3a02003 	mov	r2, #3
  12e83c:	e5c32000 	strb	r2, [r3]
  12e840:	ea000028 	b	12e8e8 <etharp_output_to_arp_index+0x1b0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
  12e844:	e55b200d 	ldrb	r2, [fp, #-13]
  12e848:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e84c:	e3403014 	movt	r3, #20
  12e850:	e3a01018 	mov	r1, #24
  12e854:	e0020291 	mul	r2, r1, r2
  12e858:	e0833002 	add	r3, r3, r2
  12e85c:	e2833012 	add	r3, r3, #18
  12e860:	e1d330b0 	ldrh	r3, [r3]
  12e864:	e300210d 	movw	r2, #269	; 0x10d
  12e868:	e1530002 	cmp	r3, r2
  12e86c:	9a00001d 	bls	12e8e8 <etharp_output_to_arp_index+0x1b0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
  12e870:	e55b300d 	ldrb	r3, [fp, #-13]
  12e874:	e3a02018 	mov	r2, #24
  12e878:	e0020392 	mul	r2, r2, r3
  12e87c:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e880:	e3403014 	movt	r3, #20
  12e884:	e0823003 	add	r3, r2, r3
  12e888:	e2831004 	add	r1, r3, #4
  12e88c:	e55b300d 	ldrb	r3, [fp, #-13]
  12e890:	e3a02018 	mov	r2, #24
  12e894:	e0030392 	mul	r3, r2, r3
  12e898:	e2832008 	add	r2, r3, #8
  12e89c:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e8a0:	e3403014 	movt	r3, #20
  12e8a4:	e0823003 	add	r3, r2, r3
  12e8a8:	e2833004 	add	r3, r3, #4
  12e8ac:	e1a02003 	mov	r2, r3
  12e8b0:	e51b0008 	ldr	r0, [fp, #-8]
  12e8b4:	eb0002e5 	bl	12f450 <etharp_request_dst>
  12e8b8:	e1a03000 	mov	r3, r0
  12e8bc:	e3530000 	cmp	r3, #0
  12e8c0:	1a000008 	bne	12e8e8 <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12e8c4:	e55b200d 	ldrb	r2, [fp, #-13]
  12e8c8:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e8cc:	e3403014 	movt	r3, #20
  12e8d0:	e3a01018 	mov	r1, #24
  12e8d4:	e0020291 	mul	r2, r1, r2
  12e8d8:	e0833002 	add	r3, r3, r2
  12e8dc:	e2833014 	add	r3, r3, #20
  12e8e0:	e3a02003 	mov	r2, #3
  12e8e4:	e5c32000 	strb	r2, [r3]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
  12e8e8:	e51b3008 	ldr	r3, [fp, #-8]
  12e8ec:	e283103b 	add	r1, r3, #59	; 0x3b
  12e8f0:	e55b300d 	ldrb	r3, [fp, #-13]
  12e8f4:	e3a02018 	mov	r2, #24
  12e8f8:	e0030392 	mul	r3, r2, r3
  12e8fc:	e2832008 	add	r2, r3, #8
  12e900:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12e904:	e3403014 	movt	r3, #20
  12e908:	e0823003 	add	r3, r2, r3
  12e90c:	e2832004 	add	r2, r3, #4
  12e910:	e3a03b02 	mov	r3, #2048	; 0x800
  12e914:	e58d3000 	str	r3, [sp]
  12e918:	e1a03002 	mov	r3, r2
  12e91c:	e1a02001 	mov	r2, r1
  12e920:	e51b100c 	ldr	r1, [fp, #-12]
  12e924:	e51b0008 	ldr	r0, [fp, #-8]
  12e928:	ebffe964 	bl	128ec0 <ethernet_output>
  12e92c:	e1a03000 	mov	r3, r0
}
  12e930:	e1a00003 	mov	r0, r3
  12e934:	e24bd004 	sub	sp, fp, #4
  12e938:	e8bd8800 	pop	{fp, pc}

0012e93c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
  12e93c:	e92d4800 	push	{fp, lr}
  12e940:	e28db004 	add	fp, sp, #4
  12e944:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e948:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e94c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12e950:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
  12e954:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e958:	e50b300c 	str	r3, [fp, #-12]

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12e95c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e960:	e3530000 	cmp	r3, #0
  12e964:	1a000006 	bne	12e984 <etharp_output+0x48>
  12e968:	e3090360 	movw	r0, #37728	; 0x9360
  12e96c:	e3400014 	movt	r0, #20
  12e970:	ebff51e7 	bl	103114 <rt_kprintf>
  12e974:	e300131b 	movw	r1, #795	; 0x31b
  12e978:	e309021c 	movw	r0, #37404	; 0x921c
  12e97c:	e3400014 	movt	r0, #20
  12e980:	ebff71cb 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("q != NULL", q != NULL);
  12e984:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e988:	e3530000 	cmp	r3, #0
  12e98c:	1a000006 	bne	12e9ac <etharp_output+0x70>
  12e990:	e3090210 	movw	r0, #37392	; 0x9210
  12e994:	e3400014 	movt	r0, #20
  12e998:	ebff51dd 	bl	103114 <rt_kprintf>
  12e99c:	e3a01fc7 	mov	r1, #796	; 0x31c
  12e9a0:	e309021c 	movw	r0, #37404	; 0x921c
  12e9a4:	e3400014 	movt	r0, #20
  12e9a8:	ebff71c1 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12e9ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e9b0:	e3530000 	cmp	r3, #0
  12e9b4:	1a000006 	bne	12e9d4 <etharp_output+0x98>
  12e9b8:	e3090350 	movw	r0, #37712	; 0x9350
  12e9bc:	e3400014 	movt	r0, #20
  12e9c0:	ebff51d3 	bl	103114 <rt_kprintf>
  12e9c4:	e300131d 	movw	r1, #797	; 0x31d
  12e9c8:	e309021c 	movw	r0, #37404	; 0x921c
  12e9cc:	e3400014 	movt	r0, #20
  12e9d0:	ebff71b7 	bl	10b0b4 <sys_arch_assert>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
  12e9d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e9d8:	e5933000 	ldr	r3, [r3]
  12e9dc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12e9e0:	e1a00003 	mov	r0, r3
  12e9e4:	eb000eba 	bl	1324d4 <ip4_addr_isbroadcast_u32>
  12e9e8:	e1a03000 	mov	r3, r0
  12e9ec:	e3530000 	cmp	r3, #0
  12e9f0:	0a000003 	beq	12ea04 <etharp_output+0xc8>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
  12e9f4:	e3083af8 	movw	r3, #35576	; 0x8af8
  12e9f8:	e3403014 	movt	r3, #20
  12e9fc:	e50b3008 	str	r3, [fp, #-8]
  12ea00:	ea000097 	b	12ec64 <etharp_output+0x328>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
  12ea04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea08:	e5933000 	ldr	r3, [r3]
  12ea0c:	e20330f0 	and	r3, r3, #240	; 0xf0
  12ea10:	e35300e0 	cmp	r3, #224	; 0xe0
  12ea14:	1a000016 	bne	12ea74 <etharp_output+0x138>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
  12ea18:	e3a03001 	mov	r3, #1
  12ea1c:	e54b3014 	strb	r3, [fp, #-20]	; 0xffffffec
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
  12ea20:	e3a03000 	mov	r3, #0
  12ea24:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
  12ea28:	e3a0305e 	mov	r3, #94	; 0x5e
  12ea2c:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  12ea30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea34:	e2833001 	add	r3, r3, #1
  12ea38:	e5d33000 	ldrb	r3, [r3]
  12ea3c:	e203307f 	and	r3, r3, #127	; 0x7f
  12ea40:	e6ef3073 	uxtb	r3, r3
  12ea44:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  12ea48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea4c:	e2833002 	add	r3, r3, #2
  12ea50:	e5d33000 	ldrb	r3, [r3]
  12ea54:	e54b3010 	strb	r3, [fp, #-16]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  12ea58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea5c:	e2833003 	add	r3, r3, #3
  12ea60:	e5d33000 	ldrb	r3, [r3]
  12ea64:	e54b300f 	strb	r3, [fp, #-15]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  12ea68:	e24b3014 	sub	r3, fp, #20
  12ea6c:	e50b3008 	str	r3, [fp, #-8]
  12ea70:	ea00007b 	b	12ec64 <etharp_output+0x328>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12ea74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea78:	e5932000 	ldr	r2, [r3]
  12ea7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ea80:	e2833004 	add	r3, r3, #4
  12ea84:	e5933000 	ldr	r3, [r3]
  12ea88:	e0222003 	eor	r2, r2, r3
  12ea8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ea90:	e2833008 	add	r3, r3, #8
  12ea94:	e5933000 	ldr	r3, [r3]
  12ea98:	e0033002 	and	r3, r3, r2
  12ea9c:	e3530000 	cmp	r3, #0
  12eaa0:	0a000010 	beq	12eae8 <etharp_output+0x1ac>
        !ip4_addr_islinklocal(ipaddr)) {
  12eaa4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12eaa8:	e5933000 	ldr	r3, [r3]
  12eaac:	e6ff3073 	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12eab0:	e30f2ea9 	movw	r2, #65193	; 0xfea9
  12eab4:	e1530002 	cmp	r3, r2
  12eab8:	0a00000a 	beq	12eae8 <etharp_output+0x1ac>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
  12eabc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eac0:	e283300c 	add	r3, r3, #12
  12eac4:	e5933000 	ldr	r3, [r3]
  12eac8:	e3530000 	cmp	r3, #0
  12eacc:	0a000003 	beq	12eae0 <etharp_output+0x1a4>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
  12ead0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ead4:	e283300c 	add	r3, r3, #12
  12ead8:	e50b300c 	str	r3, [fp, #-12]
  12eadc:	ea000001 	b	12eae8 <etharp_output+0x1ac>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
  12eae0:	e3e03003 	mvn	r3, #3
  12eae4:	ea000067 	b	12ec88 <etharp_output+0x34c>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12eae8:	e30e3be8 	movw	r3, #60392	; 0xebe8
  12eaec:	e3403014 	movt	r3, #20
  12eaf0:	e5d33000 	ldrb	r3, [r3]
  12eaf4:	e1a01003 	mov	r1, r3
  12eaf8:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12eafc:	e3403014 	movt	r3, #20
  12eb00:	e3a02018 	mov	r2, #24
  12eb04:	e0020192 	mul	r2, r2, r1
  12eb08:	e0833002 	add	r3, r3, r2
  12eb0c:	e2833014 	add	r3, r3, #20
  12eb10:	e5d33000 	ldrb	r3, [r3]
  12eb14:	e3530001 	cmp	r3, #1
  12eb18:	9a00001f 	bls	12eb9c <etharp_output+0x260>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  12eb1c:	e51b300c 	ldr	r3, [fp, #-12]
  12eb20:	e5932000 	ldr	r2, [r3]
  12eb24:	e30e3be8 	movw	r3, #60392	; 0xebe8
  12eb28:	e3403014 	movt	r3, #20
  12eb2c:	e5d33000 	ldrb	r3, [r3]
  12eb30:	e1a00003 	mov	r0, r3
  12eb34:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12eb38:	e3403014 	movt	r3, #20
  12eb3c:	e3a01018 	mov	r1, #24
  12eb40:	e0010091 	mul	r1, r1, r0
  12eb44:	e0833001 	add	r3, r3, r1
  12eb48:	e2833004 	add	r3, r3, #4
  12eb4c:	e5933000 	ldr	r3, [r3]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12eb50:	e1520003 	cmp	r2, r3
  12eb54:	1a000010 	bne	12eb9c <etharp_output+0x260>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
  12eb58:	e30c3a48 	movw	r3, #51784	; 0xca48
  12eb5c:	e3403015 	movt	r3, #21
  12eb60:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  12eb64:	e2833001 	add	r3, r3, #1
  12eb68:	e6ff2073 	uxth	r2, r3
  12eb6c:	e30c3a48 	movw	r3, #51784	; 0xca48
  12eb70:	e3403015 	movt	r3, #21
  12eb74:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  12eb78:	e30e3be8 	movw	r3, #60392	; 0xebe8
  12eb7c:	e3403014 	movt	r3, #20
  12eb80:	e5d33000 	ldrb	r3, [r3]
  12eb84:	e1a02003 	mov	r2, r3
  12eb88:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12eb8c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12eb90:	ebfffee8 	bl	12e738 <etharp_output_to_arp_index>
  12eb94:	e1a03000 	mov	r3, r0
  12eb98:	ea00003a 	b	12ec88 <etharp_output+0x34c>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12eb9c:	e3a03000 	mov	r3, #0
  12eba0:	e54b300d 	strb	r3, [fp, #-13]
  12eba4:	ea000025 	b	12ec40 <etharp_output+0x304>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12eba8:	e15b20dd 	ldrsb	r2, [fp, #-13]
  12ebac:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12ebb0:	e3403014 	movt	r3, #20
  12ebb4:	e3a01018 	mov	r1, #24
  12ebb8:	e0020291 	mul	r2, r1, r2
  12ebbc:	e0833002 	add	r3, r3, r2
  12ebc0:	e2833014 	add	r3, r3, #20
  12ebc4:	e5d33000 	ldrb	r3, [r3]
  12ebc8:	e3530001 	cmp	r3, #1
  12ebcc:	9a000016 	bls	12ec2c <etharp_output+0x2f0>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
  12ebd0:	e51b300c 	ldr	r3, [fp, #-12]
  12ebd4:	e5932000 	ldr	r2, [r3]
  12ebd8:	e15b10dd 	ldrsb	r1, [fp, #-13]
  12ebdc:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12ebe0:	e3403014 	movt	r3, #20
  12ebe4:	e3a00018 	mov	r0, #24
  12ebe8:	e0010190 	mul	r1, r0, r1
  12ebec:	e0833001 	add	r3, r3, r1
  12ebf0:	e2833004 	add	r3, r3, #4
  12ebf4:	e5933000 	ldr	r3, [r3]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12ebf8:	e1520003 	cmp	r2, r3
  12ebfc:	1a00000a 	bne	12ec2c <etharp_output+0x2f0>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
  12ec00:	e55b200d 	ldrb	r2, [fp, #-13]
  12ec04:	e30e3be8 	movw	r3, #60392	; 0xebe8
  12ec08:	e3403014 	movt	r3, #20
  12ec0c:	e5c32000 	strb	r2, [r3]
        return etharp_output_to_arp_index(netif, q, i);
  12ec10:	e55b300d 	ldrb	r3, [fp, #-13]
  12ec14:	e1a02003 	mov	r2, r3
  12ec18:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12ec1c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ec20:	ebfffec4 	bl	12e738 <etharp_output_to_arp_index>
  12ec24:	e1a03000 	mov	r3, r0
  12ec28:	ea000016 	b	12ec88 <etharp_output+0x34c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12ec2c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12ec30:	e6ef3073 	uxtb	r3, r3
  12ec34:	e2833001 	add	r3, r3, #1
  12ec38:	e6ef3073 	uxtb	r3, r3
  12ec3c:	e54b300d 	strb	r3, [fp, #-13]
  12ec40:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12ec44:	e3530009 	cmp	r3, #9
  12ec48:	daffffd6 	ble	12eba8 <etharp_output+0x26c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
  12ec4c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12ec50:	e51b100c 	ldr	r1, [fp, #-12]
  12ec54:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ec58:	eb00000d 	bl	12ec94 <etharp_query>
  12ec5c:	e1a03000 	mov	r3, r0
  12ec60:	ea000008 	b	12ec88 <etharp_output+0x34c>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
  12ec64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ec68:	e283203b 	add	r2, r3, #59	; 0x3b
  12ec6c:	e3a03b02 	mov	r3, #2048	; 0x800
  12ec70:	e58d3000 	str	r3, [sp]
  12ec74:	e51b3008 	ldr	r3, [fp, #-8]
  12ec78:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12ec7c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ec80:	ebffe88e 	bl	128ec0 <ethernet_output>
  12ec84:	e1a03000 	mov	r3, r0
}
  12ec88:	e1a00003 	mov	r0, r3
  12ec8c:	e24bd004 	sub	sp, fp, #4
  12ec90:	e8bd8800 	pop	{fp, pc}

0012ec94 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
  12ec94:	e92d4800 	push	{fp, lr}
  12ec98:	e28db004 	add	fp, sp, #4
  12ec9c:	e24dd040 	sub	sp, sp, #64	; 0x40
  12eca0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  12eca4:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  12eca8:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  12ecac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12ecb0:	e283303b 	add	r3, r3, #59	; 0x3b
  12ecb4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err_t result = ERR_MEM;
  12ecb8:	e3e03000 	mvn	r3, #0
  12ecbc:	e54b3005 	strb	r3, [fp, #-5]
  int is_new_entry = 0;
  12ecc0:	e3a03000 	mov	r3, #0
  12ecc4:	e50b300c 	str	r3, [fp, #-12]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12ecc8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12eccc:	e5933000 	ldr	r3, [r3]
  12ecd0:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  12ecd4:	e1a00003 	mov	r0, r3
  12ecd8:	eb000dfd 	bl	1324d4 <ip4_addr_isbroadcast_u32>
  12ecdc:	e1a03000 	mov	r3, r0
  12ece0:	e3530000 	cmp	r3, #0
  12ece4:	1a00000b 	bne	12ed18 <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12ece8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ecec:	e5933000 	ldr	r3, [r3]
  12ecf0:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12ecf4:	e35300e0 	cmp	r3, #224	; 0xe0
  12ecf8:	0a000006 	beq	12ed18 <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12ecfc:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ed00:	e3530000 	cmp	r3, #0
  12ed04:	0a000003 	beq	12ed18 <etharp_query+0x84>
      ip4_addr_isany(ipaddr)) {
  12ed08:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ed0c:	e5933000 	ldr	r3, [r3]
  12ed10:	e3530000 	cmp	r3, #0
  12ed14:	1a000001 	bne	12ed20 <etharp_query+0x8c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12ed18:	e3e0300f 	mvn	r3, #15
  12ed1c:	ea000144 	b	12f234 <etharp_query+0x5a0>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
  12ed20:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12ed24:	e3a01001 	mov	r1, #1
  12ed28:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  12ed2c:	ebfffb80 	bl	12db34 <etharp_find_entry>
  12ed30:	e1a03000 	mov	r3, r0
  12ed34:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  /* could not find or create entry? */
  if (i < 0) {
  12ed38:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12ed3c:	e3530000 	cmp	r3, #0
  12ed40:	aa00000c 	bge	12ed78 <etharp_query+0xe4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
  12ed44:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ed48:	e3530000 	cmp	r3, #0
  12ed4c:	0a000007 	beq	12ed70 <etharp_query+0xdc>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
  12ed50:	e30c3a48 	movw	r3, #51784	; 0xca48
  12ed54:	e3403015 	movt	r3, #21
  12ed58:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12ed5c:	e2833001 	add	r3, r3, #1
  12ed60:	e6ff2073 	uxth	r2, r3
  12ed64:	e30c3a48 	movw	r3, #51784	; 0xca48
  12ed68:	e3403015 	movt	r3, #21
  12ed6c:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i;
  12ed70:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12ed74:	ea00012e 	b	12f234 <etharp_query+0x5a0>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  12ed78:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ed7c:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12ed80:	e3403014 	movt	r3, #20
  12ed84:	e3a01018 	mov	r1, #24
  12ed88:	e0020291 	mul	r2, r1, r2
  12ed8c:	e0833002 	add	r3, r3, r2
  12ed90:	e2833014 	add	r3, r3, #20
  12ed94:	e5d33000 	ldrb	r3, [r3]
  12ed98:	e3530000 	cmp	r3, #0
  12ed9c:	1a000013 	bne	12edf0 <etharp_query+0x15c>
    is_new_entry = 1;
  12eda0:	e3a03001 	mov	r3, #1
  12eda4:	e50b300c 	str	r3, [fp, #-12]
    arp_table[i].state = ETHARP_STATE_PENDING;
  12eda8:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12edac:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12edb0:	e3403014 	movt	r3, #20
  12edb4:	e3a01018 	mov	r1, #24
  12edb8:	e0020291 	mul	r2, r1, r2
  12edbc:	e0833002 	add	r3, r3, r2
  12edc0:	e2833014 	add	r3, r3, #20
  12edc4:	e3a02001 	mov	r2, #1
  12edc8:	e5c32000 	strb	r2, [r3]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
  12edcc:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12edd0:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12edd4:	e3403014 	movt	r3, #20
  12edd8:	e3a01018 	mov	r1, #24
  12eddc:	e0020291 	mul	r2, r1, r2
  12ede0:	e0833002 	add	r3, r3, r2
  12ede4:	e2833008 	add	r3, r3, #8
  12ede8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12edec:	e5832000 	str	r2, [r3]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  12edf0:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12edf4:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12edf8:	e3403014 	movt	r3, #20
  12edfc:	e3a01018 	mov	r1, #24
  12ee00:	e0020291 	mul	r2, r1, r2
  12ee04:	e0833002 	add	r3, r3, r2
  12ee08:	e2833014 	add	r3, r3, #20
  12ee0c:	e5d33000 	ldrb	r3, [r3]
  12ee10:	e3530001 	cmp	r3, #1
  12ee14:	0a000010 	beq	12ee5c <etharp_query+0x1c8>
  12ee18:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ee1c:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12ee20:	e3403014 	movt	r3, #20
  12ee24:	e3a01018 	mov	r1, #24
  12ee28:	e0020291 	mul	r2, r1, r2
  12ee2c:	e0833002 	add	r3, r3, r2
  12ee30:	e2833014 	add	r3, r3, #20
  12ee34:	e5d33000 	ldrb	r3, [r3]
  12ee38:	e3530001 	cmp	r3, #1
  12ee3c:	8a000006 	bhi	12ee5c <etharp_query+0x1c8>
  12ee40:	e30903b0 	movw	r0, #37808	; 0x93b0
  12ee44:	e3400014 	movt	r0, #20
  12ee48:	ebff50b1 	bl	103114 <rt_kprintf>
  12ee4c:	e30013c9 	movw	r1, #969	; 0x3c9
  12ee50:	e309021c 	movw	r0, #37404	; 0x921c
  12ee54:	e3400014 	movt	r0, #20
  12ee58:	ebff7095 	bl	10b0b4 <sys_arch_assert>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
  12ee5c:	e51b300c 	ldr	r3, [fp, #-12]
  12ee60:	e3530000 	cmp	r3, #0
  12ee64:	1a000002 	bne	12ee74 <etharp_query+0x1e0>
  12ee68:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ee6c:	e3530000 	cmp	r3, #0
  12ee70:	1a000009 	bne	12ee9c <etharp_query+0x208>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  12ee74:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12ee78:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12ee7c:	eb00018f 	bl	12f4c0 <etharp_request>
  12ee80:	e1a03000 	mov	r3, r0
  12ee84:	e54b3005 	strb	r3, [fp, #-5]
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
  12ee88:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ee8c:	e3530000 	cmp	r3, #0
  12ee90:	1a000001 	bne	12ee9c <etharp_query+0x208>
      return result;
  12ee94:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12ee98:	ea0000e5 	b	12f234 <etharp_query+0x5a0>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  12ee9c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12eea0:	e3530000 	cmp	r3, #0
  12eea4:	1a000006 	bne	12eec4 <etharp_query+0x230>
  12eea8:	e3090210 	movw	r0, #37392	; 0x9210
  12eeac:	e3400014 	movt	r0, #20
  12eeb0:	ebff5097 	bl	103114 <rt_kprintf>
  12eeb4:	e30013db 	movw	r1, #987	; 0x3db
  12eeb8:	e309021c 	movw	r0, #37404	; 0x921c
  12eebc:	e3400014 	movt	r0, #20
  12eec0:	ebff707b 	bl	10b0b4 <sys_arch_assert>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  12eec4:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eec8:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12eecc:	e3403014 	movt	r3, #20
  12eed0:	e3a01018 	mov	r1, #24
  12eed4:	e0020291 	mul	r2, r1, r2
  12eed8:	e0833002 	add	r3, r3, r2
  12eedc:	e2833014 	add	r3, r3, #20
  12eee0:	e5d33000 	ldrb	r3, [r3]
  12eee4:	e3530001 	cmp	r3, #1
  12eee8:	9a000015 	bls	12ef44 <etharp_query+0x2b0>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
  12eeec:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12eef0:	e30e3be8 	movw	r3, #60392	; 0xebe8
  12eef4:	e3403014 	movt	r3, #20
  12eef8:	e5c32000 	strb	r2, [r3]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
  12eefc:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12ef00:	e3a02018 	mov	r2, #24
  12ef04:	e0030392 	mul	r3, r2, r3
  12ef08:	e2832008 	add	r2, r3, #8
  12ef0c:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12ef10:	e3403014 	movt	r3, #20
  12ef14:	e0823003 	add	r3, r2, r3
  12ef18:	e2832004 	add	r2, r3, #4
  12ef1c:	e3a03b02 	mov	r3, #2048	; 0x800
  12ef20:	e58d3000 	str	r3, [sp]
  12ef24:	e1a03002 	mov	r3, r2
  12ef28:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12ef2c:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12ef30:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12ef34:	ebffe7e1 	bl	128ec0 <ethernet_output>
  12ef38:	e1a03000 	mov	r3, r0
  12ef3c:	e54b3005 	strb	r3, [fp, #-5]
  12ef40:	ea0000ba 	b	12f230 <etharp_query+0x59c>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12ef44:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ef48:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12ef4c:	e3403014 	movt	r3, #20
  12ef50:	e3a01018 	mov	r1, #24
  12ef54:	e0020291 	mul	r2, r1, r2
  12ef58:	e0833002 	add	r3, r3, r2
  12ef5c:	e2833014 	add	r3, r3, #20
  12ef60:	e5d33000 	ldrb	r3, [r3]
  12ef64:	e3530001 	cmp	r3, #1
  12ef68:	1a0000b0 	bne	12f230 <etharp_query+0x59c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
  12ef6c:	e3a03000 	mov	r3, #0
  12ef70:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
  12ef74:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ef78:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12ef7c:	ea00001a 	b	12efec <etharp_query+0x358>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
  12ef80:	e51b3010 	ldr	r3, [fp, #-16]
  12ef84:	e1d320ba 	ldrh	r2, [r3, #10]
  12ef88:	e51b3010 	ldr	r3, [fp, #-16]
  12ef8c:	e1d330b8 	ldrh	r3, [r3, #8]
  12ef90:	e1520003 	cmp	r2, r3
  12ef94:	1a00000a 	bne	12efc4 <etharp_query+0x330>
  12ef98:	e51b3010 	ldr	r3, [fp, #-16]
  12ef9c:	e5933000 	ldr	r3, [r3]
  12efa0:	e3530000 	cmp	r3, #0
  12efa4:	0a000006 	beq	12efc4 <etharp_query+0x330>
  12efa8:	e30903d8 	movw	r0, #37848	; 0x93d8
  12efac:	e3400014 	movt	r0, #20
  12efb0:	ebff5057 	bl	103114 <rt_kprintf>
  12efb4:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  12efb8:	e309021c 	movw	r0, #37404	; 0x921c
  12efbc:	e3400014 	movt	r0, #20
  12efc0:	ebff703b 	bl	10b0b4 <sys_arch_assert>
      if (p->type != PBUF_ROM) {
  12efc4:	e51b3010 	ldr	r3, [fp, #-16]
  12efc8:	e5d3300c 	ldrb	r3, [r3, #12]
  12efcc:	e3530001 	cmp	r3, #1
  12efd0:	0a000002 	beq	12efe0 <etharp_query+0x34c>
        copy_needed = 1;
  12efd4:	e3a03001 	mov	r3, #1
  12efd8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        break;
  12efdc:	ea000005 	b	12eff8 <etharp_query+0x364>
      }
      p = p->next;
  12efe0:	e51b3010 	ldr	r3, [fp, #-16]
  12efe4:	e5933000 	ldr	r3, [r3]
  12efe8:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12efec:	e51b3010 	ldr	r3, [fp, #-16]
  12eff0:	e3530000 	cmp	r3, #0
  12eff4:	1affffe1 	bne	12ef80 <etharp_query+0x2ec>
    }
    if (copy_needed) {
  12eff8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12effc:	e3530000 	cmp	r3, #0
  12f000:	0a000014 	beq	12f058 <etharp_query+0x3c4>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  12f004:	e51b3010 	ldr	r3, [fp, #-16]
  12f008:	e1d330b8 	ldrh	r3, [r3, #8]
  12f00c:	e3a02000 	mov	r2, #0
  12f010:	e1a01003 	mov	r1, r3
  12f014:	e3a00002 	mov	r0, #2
  12f018:	ebffac8e 	bl	11a258 <pbuf_alloc>
  12f01c:	e50b0010 	str	r0, [fp, #-16]
      if (p != NULL) {
  12f020:	e51b3010 	ldr	r3, [fp, #-16]
  12f024:	e3530000 	cmp	r3, #0
  12f028:	0a00000e 	beq	12f068 <etharp_query+0x3d4>
        if (pbuf_copy(p, q) != ERR_OK) {
  12f02c:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12f030:	e51b0010 	ldr	r0, [fp, #-16]
  12f034:	ebffb0e3 	bl	11b3c8 <pbuf_copy>
  12f038:	e1a03000 	mov	r3, r0
  12f03c:	e3530000 	cmp	r3, #0
  12f040:	0a000008 	beq	12f068 <etharp_query+0x3d4>
          pbuf_free(p);
  12f044:	e51b0010 	ldr	r0, [fp, #-16]
  12f048:	ebffaf89 	bl	11ae74 <pbuf_free>
          p = NULL;
  12f04c:	e3a03000 	mov	r3, #0
  12f050:	e50b3010 	str	r3, [fp, #-16]
  12f054:	ea000003 	b	12f068 <etharp_query+0x3d4>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
  12f058:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12f05c:	e50b3010 	str	r3, [fp, #-16]
      pbuf_ref(p);
  12f060:	e51b0010 	ldr	r0, [fp, #-16]
  12f064:	ebffb01c 	bl	11b0dc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
  12f068:	e51b3010 	ldr	r3, [fp, #-16]
  12f06c:	e3530000 	cmp	r3, #0
  12f070:	0a000064 	beq	12f208 <etharp_query+0x574>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
  12f074:	e3002407 	movw	r2, #1031	; 0x407
  12f078:	e309121c 	movw	r1, #37404	; 0x921c
  12f07c:	e3401014 	movt	r1, #20
  12f080:	e3a0000b 	mov	r0, #11
  12f084:	ebffa804 	bl	11909c <memp_malloc_fn>
  12f088:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
      if (new_entry != NULL) {
  12f08c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f090:	e3530000 	cmp	r3, #0
  12f094:	0a000056 	beq	12f1f4 <etharp_query+0x560>
        unsigned int qlen = 0;
  12f098:	e3a03000 	mov	r3, #0
  12f09c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        new_entry->next = 0;
  12f0a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f0a4:	e3a02000 	mov	r2, #0
  12f0a8:	e5832000 	str	r2, [r3]
        new_entry->p = p;
  12f0ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f0b0:	e51b2010 	ldr	r2, [fp, #-16]
  12f0b4:	e5832004 	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
  12f0b8:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f0bc:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12f0c0:	e3403014 	movt	r3, #20
  12f0c4:	e3a01018 	mov	r1, #24
  12f0c8:	e0020291 	mul	r2, r1, r2
  12f0cc:	e0833002 	add	r3, r3, r2
  12f0d0:	e5933000 	ldr	r3, [r3]
  12f0d4:	e3530000 	cmp	r3, #0
  12f0d8:	0a000019 	beq	12f144 <etharp_query+0x4b0>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
  12f0dc:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f0e0:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12f0e4:	e3403014 	movt	r3, #20
  12f0e8:	e3a01018 	mov	r1, #24
  12f0ec:	e0020291 	mul	r2, r1, r2
  12f0f0:	e0833002 	add	r3, r3, r2
  12f0f4:	e5933000 	ldr	r3, [r3]
  12f0f8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          qlen++;
  12f0fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f100:	e2833001 	add	r3, r3, #1
  12f104:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12f108:	ea000005 	b	12f124 <etharp_query+0x490>
            r = r->next;
  12f10c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f110:	e5933000 	ldr	r3, [r3]
  12f114:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            qlen++;
  12f118:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f11c:	e2833001 	add	r3, r3, #1
  12f120:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12f124:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f128:	e5933000 	ldr	r3, [r3]
  12f12c:	e3530000 	cmp	r3, #0
  12f130:	1afffff5 	bne	12f10c <etharp_query+0x478>
          }
          r->next = new_entry;
  12f134:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f138:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12f13c:	e5832000 	str	r2, [r3]
  12f140:	ea000007 	b	12f164 <etharp_query+0x4d0>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
  12f144:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f148:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12f14c:	e3403014 	movt	r3, #20
  12f150:	e3a01018 	mov	r1, #24
  12f154:	e0020291 	mul	r2, r1, r2
  12f158:	e0833002 	add	r3, r3, r2
  12f15c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12f160:	e5832000 	str	r2, [r3]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
  12f164:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f168:	e3530002 	cmp	r3, #2
  12f16c:	9a00001d 	bls	12f1e8 <etharp_query+0x554>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
  12f170:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f174:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12f178:	e3403014 	movt	r3, #20
  12f17c:	e3a01018 	mov	r1, #24
  12f180:	e0020291 	mul	r2, r1, r2
  12f184:	e0833002 	add	r3, r3, r2
  12f188:	e5933000 	ldr	r3, [r3]
  12f18c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
          arp_table[i].q = arp_table[i].q->next;
  12f190:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f194:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12f198:	e3403014 	movt	r3, #20
  12f19c:	e3a01018 	mov	r1, #24
  12f1a0:	e0020291 	mul	r2, r1, r2
  12f1a4:	e0833002 	add	r3, r3, r2
  12f1a8:	e5933000 	ldr	r3, [r3]
  12f1ac:	e15b12d1 	ldrsb	r1, [fp, #-33]	; 0xffffffdf
  12f1b0:	e5932000 	ldr	r2, [r3]
  12f1b4:	e30e3af8 	movw	r3, #60152	; 0xeaf8
  12f1b8:	e3403014 	movt	r3, #20
  12f1bc:	e3a00018 	mov	r0, #24
  12f1c0:	e0010190 	mul	r1, r0, r1
  12f1c4:	e0833001 	add	r3, r3, r1
  12f1c8:	e5832000 	str	r2, [r3]
          pbuf_free(old->p);
  12f1cc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12f1d0:	e5933004 	ldr	r3, [r3, #4]
  12f1d4:	e1a00003 	mov	r0, r3
  12f1d8:	ebffaf25 	bl	11ae74 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
  12f1dc:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  12f1e0:	e3a0000b 	mov	r0, #11
  12f1e4:	ebffa814 	bl	11923c <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
  12f1e8:	e3a03000 	mov	r3, #0
  12f1ec:	e54b3005 	strb	r3, [fp, #-5]
  12f1f0:	ea00000e 	b	12f230 <etharp_query+0x59c>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
  12f1f4:	e51b0010 	ldr	r0, [fp, #-16]
  12f1f8:	ebffaf1d 	bl	11ae74 <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
  12f1fc:	e3e03000 	mvn	r3, #0
  12f200:	e54b3005 	strb	r3, [fp, #-5]
  12f204:	ea000009 	b	12f230 <etharp_query+0x59c>
      arp_table[i].q = p;
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
  12f208:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f20c:	e3403015 	movt	r3, #21
  12f210:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12f214:	e2833001 	add	r3, r3, #1
  12f218:	e6ff2073 	uxth	r2, r3
  12f21c:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f220:	e3403015 	movt	r3, #21
  12f224:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
  12f228:	e3e03000 	mvn	r3, #0
  12f22c:	e54b3005 	strb	r3, [fp, #-5]
    }
  }
  return result;
  12f230:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12f234:	e1a00003 	mov	r0, r3
  12f238:	e24bd004 	sub	sp, fp, #4
  12f23c:	e8bd8800 	pop	{fp, pc}

0012f240 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
  12f240:	e92d4800 	push	{fp, lr}
  12f244:	e28db004 	add	fp, sp, #4
  12f248:	e24dd028 	sub	sp, sp, #40	; 0x28
  12f24c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12f250:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12f254:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12f258:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  err_t result = ERR_OK;
  12f25c:	e3a03000 	mov	r3, #0
  12f260:	e54b3005 	strb	r3, [fp, #-5]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12f264:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f268:	e3530000 	cmp	r3, #0
  12f26c:	1a000006 	bne	12f28c <etharp_raw+0x4c>
  12f270:	e3090360 	movw	r0, #37728	; 0x9360
  12f274:	e3400014 	movt	r0, #20
  12f278:	ebff4fa5 	bl	103114 <rt_kprintf>
  12f27c:	e3001458 	movw	r1, #1112	; 0x458
  12f280:	e309021c 	movw	r0, #37404	; 0x921c
  12f284:	e3400014 	movt	r0, #20
  12f288:	ebff6f89 	bl	10b0b4 <sys_arch_assert>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
  12f28c:	e3a02000 	mov	r2, #0
  12f290:	e3a0101c 	mov	r1, #28
  12f294:	e3a00002 	mov	r0, #2
  12f298:	ebffabee 	bl	11a258 <pbuf_alloc>
  12f29c:	e50b000c 	str	r0, [fp, #-12]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
  12f2a0:	e51b300c 	ldr	r3, [fp, #-12]
  12f2a4:	e3530000 	cmp	r3, #0
  12f2a8:	1a000009 	bne	12f2d4 <etharp_raw+0x94>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
  12f2ac:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f2b0:	e3403015 	movt	r3, #21
  12f2b4:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12f2b8:	e2833001 	add	r3, r3, #1
  12f2bc:	e6ff2073 	uxth	r2, r3
  12f2c0:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f2c4:	e3403015 	movt	r3, #21
  12f2c8:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
  12f2cc:	e3e03000 	mvn	r3, #0
  12f2d0:	ea00005b 	b	12f444 <etharp_raw+0x204>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
  12f2d4:	e51b300c 	ldr	r3, [fp, #-12]
  12f2d8:	e1d330ba 	ldrh	r3, [r3, #10]
  12f2dc:	e353001b 	cmp	r3, #27
  12f2e0:	8a000006 	bhi	12f300 <etharp_raw+0xc0>
  12f2e4:	e30903f4 	movw	r0, #37876	; 0x93f4
  12f2e8:	e3400014 	movt	r0, #20
  12f2ec:	ebff4f88 	bl	103114 <rt_kprintf>
  12f2f0:	e3001464 	movw	r1, #1124	; 0x464
  12f2f4:	e309021c 	movw	r0, #37404	; 0x921c
  12f2f8:	e3400014 	movt	r0, #20
  12f2fc:	ebff6f6c 	bl	10b0b4 <sys_arch_assert>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  12f300:	e51b300c 	ldr	r3, [fp, #-12]
  12f304:	e5933004 	ldr	r3, [r3, #4]
  12f308:	e50b3010 	str	r3, [fp, #-16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
  12f30c:	e1db31b0 	ldrh	r3, [fp, #16]
  12f310:	e1a00003 	mov	r0, r3
  12f314:	ebff9c9f 	bl	116598 <lwip_htons>
  12f318:	e1a03000 	mov	r3, r0
  12f31c:	e1a02003 	mov	r2, r3
  12f320:	e51b3010 	ldr	r3, [fp, #-16]
  12f324:	e1c320b6 	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
  12f328:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f32c:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12f330:	e3530006 	cmp	r3, #6
  12f334:	0a000006 	beq	12f354 <etharp_raw+0x114>
  12f338:	e3090428 	movw	r0, #37928	; 0x9428
  12f33c:	e3400014 	movt	r0, #20
  12f340:	ebff4f73 	bl	103114 <rt_kprintf>
  12f344:	e300146b 	movw	r1, #1131	; 0x46b
  12f348:	e309021c 	movw	r0, #37404	; 0x921c
  12f34c:	e3400014 	movt	r0, #20
  12f350:	ebff6f57 	bl	10b0b4 <sys_arch_assert>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  12f354:	e51b3010 	ldr	r3, [fp, #-16]
  12f358:	e2833008 	add	r3, r3, #8
  12f35c:	e3a02006 	mov	r2, #6
  12f360:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  12f364:	e1a00003 	mov	r0, r3
  12f368:	eb00467b 	bl	140d5c <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  12f36c:	e51b3010 	ldr	r3, [fp, #-16]
  12f370:	e2833012 	add	r3, r3, #18
  12f374:	e3a02006 	mov	r2, #6
  12f378:	e59b1008 	ldr	r1, [fp, #8]
  12f37c:	e1a00003 	mov	r0, r3
  12f380:	eb004675 	bl	140d5c <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  12f384:	e51b3010 	ldr	r3, [fp, #-16]
  12f388:	e283300e 	add	r3, r3, #14
  12f38c:	e59b2004 	ldr	r2, [fp, #4]
  12f390:	e5922000 	ldr	r2, [r2]
  12f394:	e5832000 	str	r2, [r3]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  12f398:	e51b3010 	ldr	r3, [fp, #-16]
  12f39c:	e2833018 	add	r3, r3, #24
  12f3a0:	e59b200c 	ldr	r2, [fp, #12]
  12f3a4:	e5922000 	ldr	r2, [r2]
  12f3a8:	e5832000 	str	r2, [r3]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  12f3ac:	e51b3010 	ldr	r3, [fp, #-16]
  12f3b0:	e3a02000 	mov	r2, #0
  12f3b4:	e5c32000 	strb	r2, [r3]
  12f3b8:	e3a02000 	mov	r2, #0
  12f3bc:	e3822001 	orr	r2, r2, #1
  12f3c0:	e5c32001 	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  12f3c4:	e51b3010 	ldr	r3, [fp, #-16]
  12f3c8:	e3a02000 	mov	r2, #0
  12f3cc:	e3822008 	orr	r2, r2, #8
  12f3d0:	e5c32002 	strb	r2, [r3, #2]
  12f3d4:	e3a02000 	mov	r2, #0
  12f3d8:	e5c32003 	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
  12f3dc:	e51b3010 	ldr	r3, [fp, #-16]
  12f3e0:	e3a02006 	mov	r2, #6
  12f3e4:	e5c32004 	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
  12f3e8:	e51b3010 	ldr	r3, [fp, #-16]
  12f3ec:	e3a02004 	mov	r2, #4
  12f3f0:	e5c32005 	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
  12f3f4:	e3003806 	movw	r3, #2054	; 0x806
  12f3f8:	e58d3000 	str	r3, [sp]
  12f3fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12f400:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12f404:	e51b100c 	ldr	r1, [fp, #-12]
  12f408:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12f40c:	ebffe6ab 	bl	128ec0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  12f410:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f414:	e3403015 	movt	r3, #21
  12f418:	e1d331b8 	ldrh	r3, [r3, #24]
  12f41c:	e2833001 	add	r3, r3, #1
  12f420:	e6ff2073 	uxth	r2, r3
  12f424:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f428:	e3403015 	movt	r3, #21
  12f42c:	e1c321b8 	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
  12f430:	e51b000c 	ldr	r0, [fp, #-12]
  12f434:	ebffae8e 	bl	11ae74 <pbuf_free>
  p = NULL;
  12f438:	e3a03000 	mov	r3, #0
  12f43c:	e50b300c 	str	r3, [fp, #-12]
  /* could not allocate pbuf for ARP request */

  return result;
  12f440:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12f444:	e1a00003 	mov	r0, r3
  12f448:	e24bd004 	sub	sp, fp, #4
  12f44c:	e8bd8800 	pop	{fp, pc}

0012f450 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  12f450:	e92d4800 	push	{fp, lr}
  12f454:	e28db004 	add	fp, sp, #4
  12f458:	e24dd020 	sub	sp, sp, #32
  12f45c:	e50b0008 	str	r0, [fp, #-8]
  12f460:	e50b100c 	str	r1, [fp, #-12]
  12f464:	e50b2010 	str	r2, [fp, #-16]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f468:	e51b3008 	ldr	r3, [fp, #-8]
  12f46c:	e283103b 	add	r1, r3, #59	; 0x3b
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
  12f470:	e51b3008 	ldr	r3, [fp, #-8]
  12f474:	e283003b 	add	r0, r3, #59	; 0x3b
  12f478:	e51b3008 	ldr	r3, [fp, #-8]
  12f47c:	e2832004 	add	r2, r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f480:	e3a03001 	mov	r3, #1
  12f484:	e58d300c 	str	r3, [sp, #12]
  12f488:	e51b300c 	ldr	r3, [fp, #-12]
  12f48c:	e58d3008 	str	r3, [sp, #8]
  12f490:	e3083b00 	movw	r3, #35584	; 0x8b00
  12f494:	e3403014 	movt	r3, #20
  12f498:	e58d3004 	str	r3, [sp, #4]
  12f49c:	e58d2000 	str	r2, [sp]
  12f4a0:	e1a03000 	mov	r3, r0
  12f4a4:	e51b2010 	ldr	r2, [fp, #-16]
  12f4a8:	e51b0008 	ldr	r0, [fp, #-8]
  12f4ac:	ebffff63 	bl	12f240 <etharp_raw>
  12f4b0:	e1a03000 	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
  12f4b4:	e1a00003 	mov	r0, r3
  12f4b8:	e24bd004 	sub	sp, fp, #4
  12f4bc:	e8bd8800 	pop	{fp, pc}

0012f4c0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
  12f4c0:	e92d4800 	push	{fp, lr}
  12f4c4:	e28db004 	add	fp, sp, #4
  12f4c8:	e24dd008 	sub	sp, sp, #8
  12f4cc:	e50b0008 	str	r0, [fp, #-8]
  12f4d0:	e50b100c 	str	r1, [fp, #-12]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
  12f4d4:	e3082af8 	movw	r2, #35576	; 0x8af8
  12f4d8:	e3402014 	movt	r2, #20
  12f4dc:	e51b100c 	ldr	r1, [fp, #-12]
  12f4e0:	e51b0008 	ldr	r0, [fp, #-8]
  12f4e4:	ebffffd9 	bl	12f450 <etharp_request_dst>
  12f4e8:	e1a03000 	mov	r3, r0
}
  12f4ec:	e1a00003 	mov	r0, r3
  12f4f0:	e24bd004 	sub	sp, fp, #4
  12f4f4:	e8bd8800 	pop	{fp, pc}

0012f4f8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
  12f4f8:	e92d4800 	push	{fp, lr}
  12f4fc:	e28db004 	add	fp, sp, #4
  12f500:	e24dd038 	sub	sp, sp, #56	; 0x38
  12f504:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  12f508:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  12f50c:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f510:	e3403015 	movt	r3, #21
  12f514:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  12f518:	e2833001 	add	r3, r3, #1
  12f51c:	e6ff2073 	uxth	r2, r3
  12f520:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f524:	e3403015 	movt	r3, #21
  12f528:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);
  12f52c:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f530:	e3403015 	movt	r3, #21
  12f534:	e59331a0 	ldr	r3, [r3, #416]	; 0x1a0
  12f538:	e2832001 	add	r2, r3, #1
  12f53c:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f540:	e3403015 	movt	r3, #21
  12f544:	e58321a0 	str	r2, [r3, #416]	; 0x1a0

  iphdr_in = ip4_current_header();
  12f548:	e30f3610 	movw	r3, #62992	; 0xf610
  12f54c:	e3403014 	movt	r3, #20
  12f550:	e5933008 	ldr	r3, [r3, #8]
  12f554:	e50b3008 	str	r3, [fp, #-8]
  hlen = IPH_HL(iphdr_in) * 4;
  12f558:	e51b3008 	ldr	r3, [fp, #-8]
  12f55c:	e5d33000 	ldrb	r3, [r3]
  12f560:	e6ff3073 	uxth	r3, r3
  12f564:	e203300f 	and	r3, r3, #15
  12f568:	e6ff3073 	uxth	r3, r3
  12f56c:	e1a03103 	lsl	r3, r3, #2
  12f570:	e14b30ba 	strh	r3, [fp, #-10]
  if (hlen < IP_HLEN) {
  12f574:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f578:	e3530013 	cmp	r3, #19
  12f57c:	9a000182 	bls	12fb8c <icmp_input+0x694>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
  12f580:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f584:	e1d330ba 	ldrh	r3, [r3, #10]
  12f588:	e3530003 	cmp	r3, #3
  12f58c:	9a000180 	bls	12fb94 <icmp_input+0x69c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
  12f590:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f594:	e5933004 	ldr	r3, [r3, #4]
  12f598:	e5d33000 	ldrb	r3, [r3]
  12f59c:	e54b300b 	strb	r3, [fp, #-11]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
  12f5a0:	e55b300b 	ldrb	r3, [fp, #-11]
  12f5a4:	e3530000 	cmp	r3, #0
  12f5a8:	0a000002 	beq	12f5b8 <icmp_input+0xc0>
  12f5ac:	e3530008 	cmp	r3, #8
  12f5b0:	0a000008 	beq	12f5d8 <icmp_input+0xe0>
  12f5b4:	ea0000fd 	b	12f9b0 <icmp_input+0x4b8>
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
  12f5b8:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f5bc:	e3403015 	movt	r3, #21
  12f5c0:	e59331c0 	ldr	r3, [r3, #448]	; 0x1c0
  12f5c4:	e2832001 	add	r2, r3, #1
  12f5c8:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f5cc:	e3403015 	movt	r3, #21
  12f5d0:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    break;
  12f5d4:	ea000169 	b	12fb80 <icmp_input+0x688>
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
  12f5d8:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f5dc:	e3403015 	movt	r3, #21
  12f5e0:	e59331bc 	ldr	r3, [r3, #444]	; 0x1bc
  12f5e4:	e2832001 	add	r2, r3, #1
  12f5e8:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f5ec:	e3403015 	movt	r3, #21
  12f5f0:	e58321bc 	str	r2, [r3, #444]	; 0x1bc
    src = ip4_current_dest_addr();
  12f5f4:	e59f3650 	ldr	r3, [pc, #1616]	; 12fc4c <icmp_input+0x754>
  12f5f8:	e50b3010 	str	r3, [fp, #-16]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  12f5fc:	e30f3610 	movw	r3, #62992	; 0xf610
  12f600:	e3403014 	movt	r3, #20
  12f604:	e5933014 	ldr	r3, [r3, #20]
  12f608:	e20330f0 	and	r3, r3, #240	; 0xf0
  12f60c:	e35300e0 	cmp	r3, #224	; 0xe0
  12f610:	0a000174 	beq	12fbe8 <icmp_input+0x6f0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
  12f614:	e30f3610 	movw	r3, #62992	; 0xf610
  12f618:	e3403014 	movt	r3, #20
  12f61c:	e5932014 	ldr	r2, [r3, #20]
  12f620:	e30f3610 	movw	r3, #62992	; 0xf610
  12f624:	e3403014 	movt	r3, #20
  12f628:	e5933000 	ldr	r3, [r3]
  12f62c:	e1a01003 	mov	r1, r3
  12f630:	e1a00002 	mov	r0, r2
  12f634:	eb000ba6 	bl	1324d4 <ip4_addr_isbroadcast_u32>
  12f638:	e1a03000 	mov	r3, r0
  12f63c:	e3530000 	cmp	r3, #0
  12f640:	1a00016a 	bne	12fbf0 <icmp_input+0x6f8>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  12f644:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f648:	e1d330b8 	ldrh	r3, [r3, #8]
  12f64c:	e3530007 	cmp	r3, #7
  12f650:	9a000151 	bls	12fb9c <icmp_input+0x6a4>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
#if CHECKSUM_CHECK_ICMP
    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
      if (inet_chksum_pbuf(p) != 0) {
  12f654:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f658:	ebffa4ed 	bl	118a14 <inet_chksum_pbuf>
  12f65c:	e1a03000 	mov	r3, r0
  12f660:	e3530000 	cmp	r3, #0
  12f664:	0a000011 	beq	12f6b0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
        pbuf_free(p);
  12f668:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f66c:	ebffae00 	bl	11ae74 <pbuf_free>
        ICMP_STATS_INC(icmp.chkerr);
  12f670:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f674:	e3403015 	movt	r3, #21
  12f678:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  12f67c:	e2833001 	add	r3, r3, #1
  12f680:	e6ff2073 	uxth	r2, r3
  12f684:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f688:	e3403015 	movt	r3, #21
  12f68c:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
        MIB2_STATS_INC(mib2.icmpinerrors);
  12f690:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f694:	e3403015 	movt	r3, #21
  12f698:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12f69c:	e2832001 	add	r2, r3, #1
  12f6a0:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f6a4:	e3403015 	movt	r3, #21
  12f6a8:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
        return;
  12f6ac:	ea000164 	b	12fc44 <icmp_input+0x74c>
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f6b0:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f6b4:	e2833010 	add	r3, r3, #16
  12f6b8:	e6ff3073 	uxth	r3, r3
  12f6bc:	e6bf3073 	sxth	r3, r3
  12f6c0:	e1a01003 	mov	r1, r3
  12f6c4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f6c8:	ebffadcb 	bl	11adfc <pbuf_header>
  12f6cc:	e1a03000 	mov	r3, r0
  12f6d0:	e3530000 	cmp	r3, #0
  12f6d4:	0a00003e 	beq	12f7d4 <icmp_input+0x2dc>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
  12f6d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f6dc:	e1d320b8 	ldrh	r2, [r3, #8]
  12f6e0:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f6e4:	e0823003 	add	r3, r2, r3
  12f6e8:	e6ff3073 	uxth	r3, r3
  12f6ec:	e3a02000 	mov	r2, #0
  12f6f0:	e1a01003 	mov	r1, r3
  12f6f4:	e3a00002 	mov	r0, #2
  12f6f8:	ebffaad6 	bl	11a258 <pbuf_alloc>
  12f6fc:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (r == NULL) {
  12f700:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f704:	e3530000 	cmp	r3, #0
  12f708:	0a00013a 	beq	12fbf8 <icmp_input+0x700>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
  12f70c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f710:	e1d330ba 	ldrh	r3, [r3, #10]
  12f714:	e1a02003 	mov	r2, r3
  12f718:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f71c:	e2833008 	add	r3, r3, #8
  12f720:	e1520003 	cmp	r2, r3
  12f724:	2a000002 	bcs	12f734 <icmp_input+0x23c>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
  12f728:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f72c:	ebffadd0 	bl	11ae74 <pbuf_free>
        goto icmperr;
  12f730:	ea000131 	b	12fbfc <icmp_input+0x704>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
  12f734:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f738:	e5933004 	ldr	r3, [r3, #4]
  12f73c:	e15b20ba 	ldrh	r2, [fp, #-10]
  12f740:	e51b1008 	ldr	r1, [fp, #-8]
  12f744:	e1a00003 	mov	r0, r3
  12f748:	eb004583 	bl	140d5c <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
  12f74c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f750:	e2633000 	rsb	r3, r3, #0
  12f754:	e6ff3073 	uxth	r3, r3
  12f758:	e6bf3073 	sxth	r3, r3
  12f75c:	e1a01003 	mov	r1, r3
  12f760:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f764:	ebffada4 	bl	11adfc <pbuf_header>
  12f768:	e1a03000 	mov	r3, r0
  12f76c:	e3530000 	cmp	r3, #0
  12f770:	0a000009 	beq	12f79c <icmp_input+0x2a4>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
  12f774:	e309046c 	movw	r0, #37996	; 0x946c
  12f778:	e3400014 	movt	r0, #20
  12f77c:	ebff4e64 	bl	103114 <rt_kprintf>
  12f780:	e3a010af 	mov	r1, #175	; 0xaf
  12f784:	e30904a4 	movw	r0, #38052	; 0x94a4
  12f788:	e3400014 	movt	r0, #20
  12f78c:	ebff6e48 	bl	10b0b4 <sys_arch_assert>
        pbuf_free(r);
  12f790:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f794:	ebffadb6 	bl	11ae74 <pbuf_free>
        goto icmperr;
  12f798:	ea000117 	b	12fbfc <icmp_input+0x704>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
  12f79c:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12f7a0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f7a4:	ebffaf07 	bl	11b3c8 <pbuf_copy>
  12f7a8:	e1a03000 	mov	r3, r0
  12f7ac:	e3530000 	cmp	r3, #0
  12f7b0:	0a000002 	beq	12f7c0 <icmp_input+0x2c8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
  12f7b4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f7b8:	ebffadad 	bl	11ae74 <pbuf_free>
        goto icmperr;
  12f7bc:	ea00010e 	b	12fbfc <icmp_input+0x704>
      }
      /* free the original p */
      pbuf_free(p);
  12f7c0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f7c4:	ebffadaa 	bl	11ae74 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
  12f7c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f7cc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  12f7d0:	ea000014 	b	12f828 <icmp_input+0x330>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f7d4:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f7d8:	e26334ff 	rsb	r3, r3, #-16777216	; 0xff000000
  12f7dc:	e28338ff 	add	r3, r3, #16711680	; 0xff0000
  12f7e0:	e2833cff 	add	r3, r3, #65280	; 0xff00
  12f7e4:	e28330f0 	add	r3, r3, #240	; 0xf0
  12f7e8:	e6ff3073 	uxth	r3, r3
  12f7ec:	e6bf3073 	sxth	r3, r3
  12f7f0:	e1a01003 	mov	r1, r3
  12f7f4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f7f8:	ebffad7f 	bl	11adfc <pbuf_header>
  12f7fc:	e1a03000 	mov	r3, r0
  12f800:	e3530000 	cmp	r3, #0
  12f804:	0a000007 	beq	12f828 <icmp_input+0x330>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
  12f808:	e30904d8 	movw	r0, #38104	; 0x94d8
  12f80c:	e3400014 	movt	r0, #20
  12f810:	ebff4e3f 	bl	103114 <rt_kprintf>
  12f814:	e3a010c0 	mov	r1, #192	; 0xc0
  12f818:	e30904a4 	movw	r0, #38052	; 0x94a4
  12f81c:	e3400014 	movt	r0, #20
  12f820:	ebff6e23 	bl	10b0b4 <sys_arch_assert>
        goto icmperr;
  12f824:	ea0000f4 	b	12fbfc <icmp_input+0x704>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
  12f828:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f82c:	e5933004 	ldr	r3, [r3, #4]
  12f830:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (pbuf_header(p, (s16_t)hlen)) {
  12f834:	e15b30fa 	ldrsh	r3, [fp, #-10]
  12f838:	e1a01003 	mov	r1, r3
  12f83c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f840:	ebffad6d 	bl	11adfc <pbuf_header>
  12f844:	e1a03000 	mov	r3, r0
  12f848:	e3530000 	cmp	r3, #0
  12f84c:	1a0000ca 	bne	12fb7c <icmp_input+0x684>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
  12f850:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f854:	e5933004 	ldr	r3, [r3, #4]
  12f858:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      ip4_addr_copy(iphdr->src, *src);
  12f85c:	e51b3010 	ldr	r3, [fp, #-16]
  12f860:	e5932000 	ldr	r2, [r3]
  12f864:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f868:	e583200c 	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
  12f86c:	e30f3610 	movw	r3, #62992	; 0xf610
  12f870:	e3403014 	movt	r3, #20
  12f874:	e5932010 	ldr	r2, [r3, #16]
  12f878:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f87c:	e5832010 	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
  12f880:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f884:	e3a02000 	mov	r2, #0
  12f888:	e5c32000 	strb	r2, [r3]
#if CHECKSUM_GEN_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
        /* adjust the checksum */
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  12f88c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f890:	e1d330b2 	ldrh	r3, [r3, #2]
  12f894:	e6ff3073 	uxth	r3, r3
  12f898:	e30f2ff7 	movw	r2, #65527	; 0xfff7
  12f89c:	e1530002 	cmp	r3, r2
  12f8a0:	9a000007 	bls	12f8c4 <icmp_input+0x3cc>
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  12f8a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f8a8:	e1d330b2 	ldrh	r3, [r3, #2]
  12f8ac:	e6ff3073 	uxth	r3, r3
  12f8b0:	e2833009 	add	r3, r3, #9
  12f8b4:	e6ff2073 	uxth	r2, r3
  12f8b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f8bc:	e1c320b2 	strh	r2, [r3, #2]
  12f8c0:	ea000006 	b	12f8e0 <icmp_input+0x3e8>
        } else {
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  12f8c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f8c8:	e1d330b2 	ldrh	r3, [r3, #2]
  12f8cc:	e6ff3073 	uxth	r3, r3
  12f8d0:	e2833008 	add	r3, r3, #8
  12f8d4:	e6ff2073 	uxth	r2, r3
  12f8d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f8dc:	e1c320b2 	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
  12f8e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f8e4:	e3e02000 	mvn	r2, #0
  12f8e8:	e5c32008 	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
  12f8ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f8f0:	e3a02000 	mov	r2, #0
  12f8f4:	e5c3200a 	strb	r2, [r3, #10]
  12f8f8:	e3a02000 	mov	r2, #0
  12f8fc:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
  12f900:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f904:	e1a01003 	mov	r1, r3
  12f908:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12f90c:	ebffa430 	bl	1189d4 <inet_chksum>
  12f910:	e1a03000 	mov	r3, r0
  12f914:	e1a02003 	mov	r2, r3
  12f918:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f91c:	e1c320ba 	strh	r2, [r3, #10]
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
  12f920:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f924:	e3403015 	movt	r3, #21
  12f928:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12f92c:	e2833001 	add	r3, r3, #1
  12f930:	e6ff2073 	uxth	r2, r3
  12f934:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f938:	e3403015 	movt	r3, #21
  12f93c:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* increase number of messages attempted to send */
      MIB2_STATS_INC(mib2.icmpoutmsgs);
  12f940:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f944:	e3403015 	movt	r3, #21
  12f948:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12f94c:	e2832001 	add	r2, r3, #1
  12f950:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f954:	e3403015 	movt	r3, #21
  12f958:	e58321d4 	str	r2, [r3, #468]	; 0x1d4
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);
  12f95c:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f960:	e3403015 	movt	r3, #21
  12f964:	e59331e8 	ldr	r3, [r3, #488]	; 0x1e8
  12f968:	e2832001 	add	r2, r3, #1
  12f96c:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f970:	e3403015 	movt	r3, #21
  12f974:	e58321e8 	str	r2, [r3, #488]	; 0x1e8

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
  12f978:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12f97c:	e58d3008 	str	r3, [sp, #8]
  12f980:	e3a03001 	mov	r3, #1
  12f984:	e58d3004 	str	r3, [sp, #4]
  12f988:	e3a03000 	mov	r3, #0
  12f98c:	e58d3000 	str	r3, [sp]
  12f990:	e3a030ff 	mov	r3, #255	; 0xff
  12f994:	e3a02000 	mov	r2, #0
  12f998:	e51b1010 	ldr	r1, [fp, #-16]
  12f99c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f9a0:	eb0008c5 	bl	131cbc <ip4_output_if>
  12f9a4:	e1a03000 	mov	r3, r0
  12f9a8:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
  12f9ac:	ea000072 	b	12fb7c <icmp_input+0x684>
  default:
    if (type == ICMP_DUR) {
  12f9b0:	e55b300b 	ldrb	r3, [fp, #-11]
  12f9b4:	e3530003 	cmp	r3, #3
  12f9b8:	1a000007 	bne	12f9dc <icmp_input+0x4e4>
      MIB2_STATS_INC(mib2.icmpindestunreachs);
  12f9bc:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f9c0:	e3403015 	movt	r3, #21
  12f9c4:	e59331a8 	ldr	r3, [r3, #424]	; 0x1a8
  12f9c8:	e2832001 	add	r2, r3, #1
  12f9cc:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f9d0:	e3403015 	movt	r3, #21
  12f9d4:	e58321a8 	str	r2, [r3, #424]	; 0x1a8
  12f9d8:	ea000056 	b	12fb38 <icmp_input+0x640>
    } else if (type == ICMP_TE) {
  12f9dc:	e55b300b 	ldrb	r3, [fp, #-11]
  12f9e0:	e353000b 	cmp	r3, #11
  12f9e4:	1a000007 	bne	12fa08 <icmp_input+0x510>
      MIB2_STATS_INC(mib2.icmpintimeexcds);
  12f9e8:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f9ec:	e3403015 	movt	r3, #21
  12f9f0:	e59331ac 	ldr	r3, [r3, #428]	; 0x1ac
  12f9f4:	e2832001 	add	r2, r3, #1
  12f9f8:	e30c3a48 	movw	r3, #51784	; 0xca48
  12f9fc:	e3403015 	movt	r3, #21
  12fa00:	e58321ac 	str	r2, [r3, #428]	; 0x1ac
  12fa04:	ea00004b 	b	12fb38 <icmp_input+0x640>
    } else if (type == ICMP_PP) {
  12fa08:	e55b300b 	ldrb	r3, [fp, #-11]
  12fa0c:	e353000c 	cmp	r3, #12
  12fa10:	1a000007 	bne	12fa34 <icmp_input+0x53c>
      MIB2_STATS_INC(mib2.icmpinparmprobs);
  12fa14:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fa18:	e3403015 	movt	r3, #21
  12fa1c:	e59331b0 	ldr	r3, [r3, #432]	; 0x1b0
  12fa20:	e2832001 	add	r2, r3, #1
  12fa24:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fa28:	e3403015 	movt	r3, #21
  12fa2c:	e58321b0 	str	r2, [r3, #432]	; 0x1b0
  12fa30:	ea000040 	b	12fb38 <icmp_input+0x640>
    } else if (type == ICMP_SQ) {
  12fa34:	e55b300b 	ldrb	r3, [fp, #-11]
  12fa38:	e3530004 	cmp	r3, #4
  12fa3c:	1a000007 	bne	12fa60 <icmp_input+0x568>
      MIB2_STATS_INC(mib2.icmpinsrcquenchs);
  12fa40:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fa44:	e3403015 	movt	r3, #21
  12fa48:	e59331b4 	ldr	r3, [r3, #436]	; 0x1b4
  12fa4c:	e2832001 	add	r2, r3, #1
  12fa50:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fa54:	e3403015 	movt	r3, #21
  12fa58:	e58321b4 	str	r2, [r3, #436]	; 0x1b4
  12fa5c:	ea000035 	b	12fb38 <icmp_input+0x640>
    } else if (type == ICMP_RD) {
  12fa60:	e55b300b 	ldrb	r3, [fp, #-11]
  12fa64:	e3530005 	cmp	r3, #5
  12fa68:	1a000007 	bne	12fa8c <icmp_input+0x594>
      MIB2_STATS_INC(mib2.icmpinredirects);
  12fa6c:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fa70:	e3403015 	movt	r3, #21
  12fa74:	e59331b8 	ldr	r3, [r3, #440]	; 0x1b8
  12fa78:	e2832001 	add	r2, r3, #1
  12fa7c:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fa80:	e3403015 	movt	r3, #21
  12fa84:	e58321b8 	str	r2, [r3, #440]	; 0x1b8
  12fa88:	ea00002a 	b	12fb38 <icmp_input+0x640>
    } else if (type == ICMP_TS) {
  12fa8c:	e55b300b 	ldrb	r3, [fp, #-11]
  12fa90:	e353000d 	cmp	r3, #13
  12fa94:	1a000007 	bne	12fab8 <icmp_input+0x5c0>
      MIB2_STATS_INC(mib2.icmpintimestamps);
  12fa98:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fa9c:	e3403015 	movt	r3, #21
  12faa0:	e59331c4 	ldr	r3, [r3, #452]	; 0x1c4
  12faa4:	e2832001 	add	r2, r3, #1
  12faa8:	e30c3a48 	movw	r3, #51784	; 0xca48
  12faac:	e3403015 	movt	r3, #21
  12fab0:	e58321c4 	str	r2, [r3, #452]	; 0x1c4
  12fab4:	ea00001f 	b	12fb38 <icmp_input+0x640>
    } else if (type == ICMP_TSR) {
  12fab8:	e55b300b 	ldrb	r3, [fp, #-11]
  12fabc:	e353000e 	cmp	r3, #14
  12fac0:	1a000007 	bne	12fae4 <icmp_input+0x5ec>
      MIB2_STATS_INC(mib2.icmpintimestampreps);
  12fac4:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fac8:	e3403015 	movt	r3, #21
  12facc:	e59331c8 	ldr	r3, [r3, #456]	; 0x1c8
  12fad0:	e2832001 	add	r2, r3, #1
  12fad4:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fad8:	e3403015 	movt	r3, #21
  12fadc:	e58321c8 	str	r2, [r3, #456]	; 0x1c8
  12fae0:	ea000014 	b	12fb38 <icmp_input+0x640>
    } else if (type == ICMP_AM) {
  12fae4:	e55b300b 	ldrb	r3, [fp, #-11]
  12fae8:	e3530011 	cmp	r3, #17
  12faec:	1a000007 	bne	12fb10 <icmp_input+0x618>
      MIB2_STATS_INC(mib2.icmpinaddrmasks);
  12faf0:	e30c3a48 	movw	r3, #51784	; 0xca48
  12faf4:	e3403015 	movt	r3, #21
  12faf8:	e59331cc 	ldr	r3, [r3, #460]	; 0x1cc
  12fafc:	e2832001 	add	r2, r3, #1
  12fb00:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fb04:	e3403015 	movt	r3, #21
  12fb08:	e58321cc 	str	r2, [r3, #460]	; 0x1cc
  12fb0c:	ea000009 	b	12fb38 <icmp_input+0x640>
    } else if (type == ICMP_AMR) {
  12fb10:	e55b300b 	ldrb	r3, [fp, #-11]
  12fb14:	e3530012 	cmp	r3, #18
  12fb18:	1a000006 	bne	12fb38 <icmp_input+0x640>
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
  12fb1c:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fb20:	e3403015 	movt	r3, #21
  12fb24:	e59331d0 	ldr	r3, [r3, #464]	; 0x1d0
  12fb28:	e2832001 	add	r2, r3, #1
  12fb2c:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fb30:	e3403015 	movt	r3, #21
  12fb34:	e58321d0 	str	r2, [r3, #464]	; 0x1d0
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
  12fb38:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fb3c:	e3403015 	movt	r3, #21
  12fb40:	e1d337b0 	ldrh	r3, [r3, #112]	; 0x70
  12fb44:	e2833001 	add	r3, r3, #1
  12fb48:	e6ff2073 	uxth	r2, r3
  12fb4c:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fb50:	e3403015 	movt	r3, #21
  12fb54:	e1c327b0 	strh	r2, [r3, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
  12fb58:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fb5c:	e3403015 	movt	r3, #21
  12fb60:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  12fb64:	e2833001 	add	r3, r3, #1
  12fb68:	e6ff2073 	uxth	r2, r3
  12fb6c:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fb70:	e3403015 	movt	r3, #21
  12fb74:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  12fb78:	ea000000 	b	12fb80 <icmp_input+0x688>
    break;
  12fb7c:	e320f000 	nop	{0}
  }
  pbuf_free(p);
  12fb80:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fb84:	ebffacba 	bl	11ae74 <pbuf_free>
  return;
  12fb88:	ea00002d 	b	12fc44 <icmp_input+0x74c>
    goto lenerr;
  12fb8c:	e320f000 	nop	{0}
  12fb90:	ea000002 	b	12fba0 <icmp_input+0x6a8>
    goto lenerr;
  12fb94:	e320f000 	nop	{0}
  12fb98:	ea000000 	b	12fba0 <icmp_input+0x6a8>
      goto lenerr;
  12fb9c:	e320f000 	nop	{0}
lenerr:
  pbuf_free(p);
  12fba0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fba4:	ebffacb2 	bl	11ae74 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  12fba8:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fbac:	e3403015 	movt	r3, #21
  12fbb0:	e1d336ba 	ldrh	r3, [r3, #106]	; 0x6a
  12fbb4:	e2833001 	add	r3, r3, #1
  12fbb8:	e6ff2073 	uxth	r2, r3
  12fbbc:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fbc0:	e3403015 	movt	r3, #21
  12fbc4:	e1c326ba 	strh	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  12fbc8:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fbcc:	e3403015 	movt	r3, #21
  12fbd0:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12fbd4:	e2832001 	add	r2, r3, #1
  12fbd8:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fbdc:	e3403015 	movt	r3, #21
  12fbe0:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12fbe4:	ea000016 	b	12fc44 <icmp_input+0x74c>
      goto icmperr;
  12fbe8:	e320f000 	nop	{0}
  12fbec:	ea000002 	b	12fbfc <icmp_input+0x704>
      goto icmperr;
  12fbf0:	e320f000 	nop	{0}
  12fbf4:	ea000000 	b	12fbfc <icmp_input+0x704>
        goto icmperr;
  12fbf8:	e320f000 	nop	{0}
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
  12fbfc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fc00:	ebffac9b 	bl	11ae74 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  12fc04:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fc08:	e3403015 	movt	r3, #21
  12fc0c:	e1d337b4 	ldrh	r3, [r3, #116]	; 0x74
  12fc10:	e2833001 	add	r3, r3, #1
  12fc14:	e6ff2073 	uxth	r2, r3
  12fc18:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fc1c:	e3403015 	movt	r3, #21
  12fc20:	e1c327b4 	strh	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  12fc24:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fc28:	e3403015 	movt	r3, #21
  12fc2c:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12fc30:	e2832001 	add	r2, r3, #1
  12fc34:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fc38:	e3403015 	movt	r3, #21
  12fc3c:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12fc40:	e320f000 	nop	{0}
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
  12fc44:	e24bd004 	sub	sp, fp, #4
  12fc48:	e8bd8800 	pop	{fp, pc}
  12fc4c:	0014f624 	.word	0x0014f624

0012fc50 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  12fc50:	e92d4800 	push	{fp, lr}
  12fc54:	e28db004 	add	fp, sp, #4
  12fc58:	e24dd008 	sub	sp, sp, #8
  12fc5c:	e50b0008 	str	r0, [fp, #-8]
  12fc60:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  12fc64:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fc68:	e3403015 	movt	r3, #21
  12fc6c:	e59331dc 	ldr	r3, [r3, #476]	; 0x1dc
  12fc70:	e2832001 	add	r2, r3, #1
  12fc74:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fc78:	e3403015 	movt	r3, #21
  12fc7c:	e58321dc 	str	r2, [r3, #476]	; 0x1dc
  icmp_send_response(p, ICMP_DUR, t);
  12fc80:	e51b300c 	ldr	r3, [fp, #-12]
  12fc84:	e6ef3073 	uxtb	r3, r3
  12fc88:	e1a02003 	mov	r2, r3
  12fc8c:	e3a01003 	mov	r1, #3
  12fc90:	e51b0008 	ldr	r0, [fp, #-8]
  12fc94:	eb000017 	bl	12fcf8 <icmp_send_response>
}
  12fc98:	e320f000 	nop	{0}
  12fc9c:	e24bd004 	sub	sp, fp, #4
  12fca0:	e8bd8800 	pop	{fp, pc}

0012fca4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
  12fca4:	e92d4800 	push	{fp, lr}
  12fca8:	e28db004 	add	fp, sp, #4
  12fcac:	e24dd008 	sub	sp, sp, #8
  12fcb0:	e50b0008 	str	r0, [fp, #-8]
  12fcb4:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  12fcb8:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fcbc:	e3403015 	movt	r3, #21
  12fcc0:	e59331e0 	ldr	r3, [r3, #480]	; 0x1e0
  12fcc4:	e2832001 	add	r2, r3, #1
  12fcc8:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fccc:	e3403015 	movt	r3, #21
  12fcd0:	e58321e0 	str	r2, [r3, #480]	; 0x1e0
  icmp_send_response(p, ICMP_TE, t);
  12fcd4:	e51b300c 	ldr	r3, [fp, #-12]
  12fcd8:	e6ef3073 	uxtb	r3, r3
  12fcdc:	e1a02003 	mov	r2, r3
  12fce0:	e3a0100b 	mov	r1, #11
  12fce4:	e51b0008 	ldr	r0, [fp, #-8]
  12fce8:	eb000002 	bl	12fcf8 <icmp_send_response>
}
  12fcec:	e320f000 	nop	{0}
  12fcf0:	e24bd004 	sub	sp, fp, #4
  12fcf4:	e8bd8800 	pop	{fp, pc}

0012fcf8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  12fcf8:	e92d4800 	push	{fp, lr}
  12fcfc:	e28db004 	add	fp, sp, #4
  12fd00:	e24dd030 	sub	sp, sp, #48	; 0x30
  12fd04:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12fd08:	e1a03001 	mov	r3, r1
  12fd0c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  12fd10:	e1a03002 	mov	r3, r2
  12fd14:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
  struct icmp_echo_hdr *icmphdr;
  ip4_addr_t iphdr_src;
  struct netif *netif;

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);
  12fd18:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fd1c:	e3403015 	movt	r3, #21
  12fd20:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12fd24:	e2832001 	add	r2, r3, #1
  12fd28:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fd2c:	e3403015 	movt	r3, #21
  12fd30:	e58321d4 	str	r2, [r3, #468]	; 0x1d4

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  12fd34:	e3a02000 	mov	r2, #0
  12fd38:	e3a01024 	mov	r1, #36	; 0x24
  12fd3c:	e3a00001 	mov	r0, #1
  12fd40:	ebffa944 	bl	11a258 <pbuf_alloc>
  12fd44:	e50b0008 	str	r0, [fp, #-8]
                 PBUF_RAM);
  if (q == NULL) {
  12fd48:	e51b3008 	ldr	r3, [fp, #-8]
  12fd4c:	e3530000 	cmp	r3, #0
  12fd50:	1a000007 	bne	12fd74 <icmp_send_response+0x7c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
  12fd54:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fd58:	e3403015 	movt	r3, #21
  12fd5c:	e59331d8 	ldr	r3, [r3, #472]	; 0x1d8
  12fd60:	e2832001 	add	r2, r3, #1
  12fd64:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fd68:	e3403015 	movt	r3, #21
  12fd6c:	e58321d8 	str	r2, [r3, #472]	; 0x1d8
  12fd70:	ea000055 	b	12fecc <icmp_send_response+0x1d4>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
  12fd74:	e51b3008 	ldr	r3, [fp, #-8]
  12fd78:	e1d330ba 	ldrh	r3, [r3, #10]
  12fd7c:	e3530023 	cmp	r3, #35	; 0x23
  12fd80:	8a000006 	bhi	12fda0 <icmp_send_response+0xa8>
  12fd84:	e309050c 	movw	r0, #38156	; 0x950c
  12fd88:	e3400014 	movt	r0, #20
  12fd8c:	ebff4ce0 	bl	103114 <rt_kprintf>
  12fd90:	e3001162 	movw	r1, #354	; 0x162
  12fd94:	e30904a4 	movw	r0, #38052	; 0x94a4
  12fd98:	e3400014 	movt	r0, #20
  12fd9c:	ebff6cc4 	bl	10b0b4 <sys_arch_assert>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  12fda0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12fda4:	e5933004 	ldr	r3, [r3, #4]
  12fda8:	e50b300c 	str	r3, [fp, #-12]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  12fdac:	e51b3008 	ldr	r3, [fp, #-8]
  12fdb0:	e5933004 	ldr	r3, [r3, #4]
  12fdb4:	e50b3010 	str	r3, [fp, #-16]
  icmphdr->type = type;
  12fdb8:	e51b3010 	ldr	r3, [fp, #-16]
  12fdbc:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12fdc0:	e5c32000 	strb	r2, [r3]
  icmphdr->code = code;
  12fdc4:	e51b3010 	ldr	r3, [fp, #-16]
  12fdc8:	e55b2022 	ldrb	r2, [fp, #-34]	; 0xffffffde
  12fdcc:	e5c32001 	strb	r2, [r3, #1]
  icmphdr->id = 0;
  12fdd0:	e51b3010 	ldr	r3, [fp, #-16]
  12fdd4:	e3a02000 	mov	r2, #0
  12fdd8:	e5c32004 	strb	r2, [r3, #4]
  12fddc:	e3a02000 	mov	r2, #0
  12fde0:	e5c32005 	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
  12fde4:	e51b3010 	ldr	r3, [fp, #-16]
  12fde8:	e3a02000 	mov	r2, #0
  12fdec:	e5c32006 	strb	r2, [r3, #6]
  12fdf0:	e3a02000 	mov	r2, #0
  12fdf4:	e5c32007 	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  12fdf8:	e51b3008 	ldr	r3, [fp, #-8]
  12fdfc:	e5933004 	ldr	r3, [r3, #4]
  12fe00:	e2830008 	add	r0, r3, #8
  12fe04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12fe08:	e5933004 	ldr	r3, [r3, #4]
  12fe0c:	e3a0201c 	mov	r2, #28
  12fe10:	e1a01003 	mov	r1, r3
  12fe14:	eb0043d0 	bl	140d5c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
  12fe18:	e51b300c 	ldr	r3, [fp, #-12]
  12fe1c:	e593300c 	ldr	r3, [r3, #12]
  12fe20:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
  12fe24:	e24b3018 	sub	r3, fp, #24
  12fe28:	e1a00003 	mov	r0, r3
  12fe2c:	eb0004c9 	bl	131158 <ip4_route>
  12fe30:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
#endif
  if (netif != NULL) {
  12fe34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fe38:	e3530000 	cmp	r3, #0
  12fe3c:	0a000020 	beq	12fec4 <icmp_send_response+0x1cc>
    /* calculate checksum */
    icmphdr->chksum = 0;
  12fe40:	e51b3010 	ldr	r3, [fp, #-16]
  12fe44:	e3a02000 	mov	r2, #0
  12fe48:	e5c32002 	strb	r2, [r3, #2]
  12fe4c:	e3a02000 	mov	r2, #0
  12fe50:	e5c32003 	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
  12fe54:	e51b3008 	ldr	r3, [fp, #-8]
  12fe58:	e1d330ba 	ldrh	r3, [r3, #10]
  12fe5c:	e1a01003 	mov	r1, r3
  12fe60:	e51b0010 	ldr	r0, [fp, #-16]
  12fe64:	ebffa2da 	bl	1189d4 <inet_chksum>
  12fe68:	e1a03000 	mov	r3, r0
  12fe6c:	e1a02003 	mov	r2, r3
  12fe70:	e51b3010 	ldr	r3, [fp, #-16]
  12fe74:	e1c320b2 	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
  12fe78:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fe7c:	e3403015 	movt	r3, #21
  12fe80:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12fe84:	e2833001 	add	r3, r3, #1
  12fe88:	e6ff2073 	uxth	r2, r3
  12fe8c:	e30c3a48 	movw	r3, #51784	; 0xca48
  12fe90:	e3403015 	movt	r3, #21
  12fe94:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
  12fe98:	e24b2018 	sub	r2, fp, #24
  12fe9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fea0:	e58d3008 	str	r3, [sp, #8]
  12fea4:	e3a03001 	mov	r3, #1
  12fea8:	e58d3004 	str	r3, [sp, #4]
  12feac:	e3a03000 	mov	r3, #0
  12feb0:	e58d3000 	str	r3, [sp]
  12feb4:	e3a030ff 	mov	r3, #255	; 0xff
  12feb8:	e3a01000 	mov	r1, #0
  12febc:	e51b0008 	ldr	r0, [fp, #-8]
  12fec0:	eb00077d 	bl	131cbc <ip4_output_if>
  }
  pbuf_free(q);
  12fec4:	e51b0008 	ldr	r0, [fp, #-8]
  12fec8:	ebffabe9 	bl	11ae74 <pbuf_free>
}
  12fecc:	e24bd004 	sub	sp, fp, #4
  12fed0:	e8bd8800 	pop	{fp, pc}

0012fed4 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
  12fed4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12fed8:	e28db000 	add	fp, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
  12fedc:	e30e2bec 	movw	r2, #60396	; 0xebec
  12fee0:	e3402014 	movt	r2, #20
  12fee4:	e3a030e0 	mov	r3, #224	; 0xe0
  12fee8:	e3403100 	movt	r3, #256	; 0x100
  12feec:	e5823000 	str	r3, [r2]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
  12fef0:	e30e2bf0 	movw	r2, #60400	; 0xebf0
  12fef4:	e3402014 	movt	r2, #20
  12fef8:	e3a030e0 	mov	r3, #224	; 0xe0
  12fefc:	e3403200 	movt	r3, #512	; 0x200
  12ff00:	e5823000 	str	r3, [r2]
}
  12ff04:	e320f000 	nop	{0}
  12ff08:	e28bd000 	add	sp, fp, #0
  12ff0c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12ff10:	e12fff1e 	bx	lr

0012ff14 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
  12ff14:	e92d4800 	push	{fp, lr}
  12ff18:	e28db004 	add	fp, sp, #4
  12ff1c:	e24dd010 	sub	sp, sp, #16
  12ff20:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group* group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void*)netif));

  group = igmp_lookup_group(netif, &allsystems);
  12ff24:	e30e1bec 	movw	r1, #60396	; 0xebec
  12ff28:	e3401014 	movt	r1, #20
  12ff2c:	e51b0010 	ldr	r0, [fp, #-16]
  12ff30:	eb000078 	bl	130118 <igmp_lookup_group>
  12ff34:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  12ff38:	e51b3008 	ldr	r3, [fp, #-8]
  12ff3c:	e3530000 	cmp	r3, #0
  12ff40:	0a000015 	beq	12ff9c <igmp_start+0x88>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  12ff44:	e51b3008 	ldr	r3, [fp, #-8]
  12ff48:	e3a02002 	mov	r2, #2
  12ff4c:	e5c32009 	strb	r2, [r3, #9]
    group->use++;
  12ff50:	e51b3008 	ldr	r3, [fp, #-8]
  12ff54:	e5d3300c 	ldrb	r3, [r3, #12]
  12ff58:	e2833001 	add	r3, r3, #1
  12ff5c:	e6ef2073 	uxtb	r2, r3
  12ff60:	e51b3008 	ldr	r3, [fp, #-8]
  12ff64:	e5c3200c 	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  12ff68:	e51b3010 	ldr	r3, [fp, #-16]
  12ff6c:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12ff70:	e3530000 	cmp	r3, #0
  12ff74:	0a000006 	beq	12ff94 <igmp_start+0x80>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
  12ff78:	e51b3010 	ldr	r3, [fp, #-16]
  12ff7c:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12ff80:	e3a02001 	mov	r2, #1
  12ff84:	e30e1bec 	movw	r1, #60396	; 0xebec
  12ff88:	e3401014 	movt	r1, #20
  12ff8c:	e51b0010 	ldr	r0, [fp, #-16]
  12ff90:	e12fff33 	blx	r3
    }

    return ERR_OK;
  12ff94:	e3a03000 	mov	r3, #0
  12ff98:	ea000000 	b	12ffa0 <igmp_start+0x8c>
  }

  return ERR_MEM;
  12ff9c:	e3e03000 	mvn	r3, #0
}
  12ffa0:	e1a00003 	mov	r0, r3
  12ffa4:	e24bd004 	sub	sp, fp, #4
  12ffa8:	e8bd8800 	pop	{fp, pc}

0012ffac <igmp_stop>:
 *
 * @param netif network interface on which stop IGMP processing
 */
err_t
igmp_stop(struct netif *netif)
{
  12ffac:	e92d4800 	push	{fp, lr}
  12ffb0:	e28db004 	add	fp, sp, #4
  12ffb4:	e24dd010 	sub	sp, sp, #16
  12ffb8:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  12ffbc:	e51b3010 	ldr	r3, [fp, #-16]
  12ffc0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12ffc4:	e50b3008 	str	r3, [fp, #-8]

  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, NULL);
  12ffc8:	e51b3010 	ldr	r3, [fp, #-16]
  12ffcc:	e3a02000 	mov	r2, #0
  12ffd0:	e583202c 	str	r2, [r3, #44]	; 0x2c

  while (group != NULL) {
  12ffd4:	ea000012 	b	130024 <igmp_stop+0x78>
    struct igmp_group *next = group->next; /* avoid use-after-free below */
  12ffd8:	e51b3008 	ldr	r3, [fp, #-8]
  12ffdc:	e5933000 	ldr	r3, [r3]
  12ffe0:	e50b300c 	str	r3, [fp, #-12]

    /* disable the group at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  12ffe4:	e51b3010 	ldr	r3, [fp, #-16]
  12ffe8:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12ffec:	e3530000 	cmp	r3, #0
  12fff0:	0a000006 	beq	130010 <igmp_stop+0x64>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_stop: igmp_mac_filter(DEL "));
      ip4_addr_debug_print(IGMP_DEBUG, &group->group_address);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &(group->group_address), NETIF_DEL_MAC_FILTER);
  12fff4:	e51b3010 	ldr	r3, [fp, #-16]
  12fff8:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12fffc:	e51b2008 	ldr	r2, [fp, #-8]
  130000:	e2821004 	add	r1, r2, #4
  130004:	e3a02000 	mov	r2, #0
  130008:	e51b0010 	ldr	r0, [fp, #-16]
  13000c:	e12fff33 	blx	r3
    }

    /* free group */
    memp_free(MEMP_IGMP_GROUP, group);
  130010:	e51b1008 	ldr	r1, [fp, #-8]
  130014:	e3a0000c 	mov	r0, #12
  130018:	ebffa487 	bl	11923c <memp_free>

    /* move to "next" */
    group = next;
  13001c:	e51b300c 	ldr	r3, [fp, #-12]
  130020:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  130024:	e51b3008 	ldr	r3, [fp, #-8]
  130028:	e3530000 	cmp	r3, #0
  13002c:	1affffe9 	bne	12ffd8 <igmp_stop+0x2c>
  }
  return ERR_OK;
  130030:	e3a03000 	mov	r3, #0
}
  130034:	e1a00003 	mov	r0, r3
  130038:	e24bd004 	sub	sp, fp, #4
  13003c:	e8bd8800 	pop	{fp, pc}

00130040 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
  130040:	e92d4800 	push	{fp, lr}
  130044:	e28db004 	add	fp, sp, #4
  130048:	e24dd010 	sub	sp, sp, #16
  13004c:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  130050:	e51b3010 	ldr	r3, [fp, #-16]
  130054:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130058:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void*)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if(group != NULL) {
  13005c:	e51b3008 	ldr	r3, [fp, #-8]
  130060:	e3530000 	cmp	r3, #0
  130064:	0a000009 	beq	130090 <igmp_report_groups+0x50>
    group = group->next;
  130068:	e51b3008 	ldr	r3, [fp, #-8]
  13006c:	e5933000 	ldr	r3, [r3]
  130070:	e50b3008 	str	r3, [fp, #-8]
  }
  
  while (group != NULL) {
  130074:	ea000005 	b	130090 <igmp_report_groups+0x50>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  130078:	e3a01005 	mov	r1, #5
  13007c:	e51b0008 	ldr	r0, [fp, #-8]
  130080:	eb000372 	bl	130e50 <igmp_delaying_member>
    group = group->next;
  130084:	e51b3008 	ldr	r3, [fp, #-8]
  130088:	e5933000 	ldr	r3, [r3]
  13008c:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  130090:	e51b3008 	ldr	r3, [fp, #-8]
  130094:	e3530000 	cmp	r3, #0
  130098:	1afffff6 	bne	130078 <igmp_report_groups+0x38>
  }
}
  13009c:	e320f000 	nop	{0}
  1300a0:	e24bd004 	sub	sp, fp, #4
  1300a4:	e8bd8800 	pop	{fp, pc}

001300a8 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
  1300a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1300ac:	e28db000 	add	fp, sp, #0
  1300b0:	e24dd014 	sub	sp, sp, #20
  1300b4:	e50b0010 	str	r0, [fp, #-16]
  1300b8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group = netif_igmp_data(ifp);
  1300bc:	e51b3010 	ldr	r3, [fp, #-16]
  1300c0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1300c4:	e50b3008 	str	r3, [fp, #-8]

  while (group != NULL) {
  1300c8:	ea00000a 	b	1300f8 <igmp_lookfor_group+0x50>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
  1300cc:	e51b3008 	ldr	r3, [fp, #-8]
  1300d0:	e5932004 	ldr	r2, [r3, #4]
  1300d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1300d8:	e5933000 	ldr	r3, [r3]
  1300dc:	e1520003 	cmp	r2, r3
  1300e0:	1a000001 	bne	1300ec <igmp_lookfor_group+0x44>
      return group;
  1300e4:	e51b3008 	ldr	r3, [fp, #-8]
  1300e8:	ea000006 	b	130108 <igmp_lookfor_group+0x60>
    }
    group = group->next;
  1300ec:	e51b3008 	ldr	r3, [fp, #-8]
  1300f0:	e5933000 	ldr	r3, [r3]
  1300f4:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  1300f8:	e51b3008 	ldr	r3, [fp, #-8]
  1300fc:	e3530000 	cmp	r3, #0
  130100:	1afffff1 	bne	1300cc <igmp_lookfor_group+0x24>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
  130104:	e3a03000 	mov	r3, #0
}
  130108:	e1a00003 	mov	r0, r3
  13010c:	e28bd000 	add	sp, fp, #0
  130110:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  130114:	e12fff1e 	bx	lr

00130118 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
  130118:	e92d4800 	push	{fp, lr}
  13011c:	e28db004 	add	fp, sp, #4
  130120:	e24dd010 	sub	sp, sp, #16
  130124:	e50b0010 	str	r0, [fp, #-16]
  130128:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
  13012c:	e51b3010 	ldr	r3, [fp, #-16]
  130130:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130134:	e50b3008 	str	r3, [fp, #-8]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
  130138:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13013c:	e51b0010 	ldr	r0, [fp, #-16]
  130140:	ebffffd8 	bl	1300a8 <igmp_lookfor_group>
  130144:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  130148:	e51b300c 	ldr	r3, [fp, #-12]
  13014c:	e3530000 	cmp	r3, #0
  130150:	0a000001 	beq	13015c <igmp_lookup_group+0x44>
    /* Group already exists. */
    return group;
  130154:	e51b300c 	ldr	r3, [fp, #-12]
  130158:	ea00004b 	b	13028c <igmp_lookup_group+0x174>
  }
  
  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
  13015c:	e3002101 	movw	r2, #257	; 0x101
  130160:	e3091538 	movw	r1, #38200	; 0x9538
  130164:	e3401014 	movt	r1, #20
  130168:	e3a0000c 	mov	r0, #12
  13016c:	ebffa3ca 	bl	11909c <memp_malloc_fn>
  130170:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  130174:	e51b300c 	ldr	r3, [fp, #-12]
  130178:	e3530000 	cmp	r3, #0
  13017c:	0a000041 	beq	130288 <igmp_lookup_group+0x170>
    ip4_addr_set(&(group->group_address), addr);
  130180:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130184:	e3530000 	cmp	r3, #0
  130188:	0a000002 	beq	130198 <igmp_lookup_group+0x80>
  13018c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130190:	e5933000 	ldr	r3, [r3]
  130194:	ea000000 	b	13019c <igmp_lookup_group+0x84>
  130198:	e3a03000 	mov	r3, #0
  13019c:	e51b200c 	ldr	r2, [fp, #-12]
  1301a0:	e5823004 	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
  1301a4:	e51b300c 	ldr	r3, [fp, #-12]
  1301a8:	e3a02000 	mov	r2, #0
  1301ac:	e1c320ba 	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
  1301b0:	e51b300c 	ldr	r3, [fp, #-12]
  1301b4:	e3a02000 	mov	r2, #0
  1301b8:	e5c32009 	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
  1301bc:	e51b300c 	ldr	r3, [fp, #-12]
  1301c0:	e3a02000 	mov	r2, #0
  1301c4:	e5c32008 	strb	r2, [r3, #8]
    group->use                = 0;
  1301c8:	e51b300c 	ldr	r3, [fp, #-12]
  1301cc:	e3a02000 	mov	r2, #0
  1301d0:	e5c3200c 	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */    
    if (list_head == NULL) {
  1301d4:	e51b3008 	ldr	r3, [fp, #-8]
  1301d8:	e3530000 	cmp	r3, #0
  1301dc:	1a000014 	bne	130234 <igmp_lookup_group+0x11c>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
  1301e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1301e4:	e5932000 	ldr	r2, [r3]
  1301e8:	e30e3bec 	movw	r3, #60396	; 0xebec
  1301ec:	e3403014 	movt	r3, #20
  1301f0:	e5933000 	ldr	r3, [r3]
  1301f4:	e1520003 	cmp	r2, r3
  1301f8:	0a000006 	beq	130218 <igmp_lookup_group+0x100>
  1301fc:	e309056c 	movw	r0, #38252	; 0x956c
  130200:	e3400014 	movt	r0, #20
  130204:	ebff4bc2 	bl	103114 <rt_kprintf>
  130208:	e300110d 	movw	r1, #269	; 0x10d
  13020c:	e3090538 	movw	r0, #38200	; 0x9538
  130210:	e3400014 	movt	r0, #20
  130214:	ebff6ba6 	bl	10b0b4 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
  130218:	e51b300c 	ldr	r3, [fp, #-12]
  13021c:	e3a02000 	mov	r2, #0
  130220:	e5832000 	str	r2, [r3]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
  130224:	e51b3010 	ldr	r3, [fp, #-16]
  130228:	e51b200c 	ldr	r2, [fp, #-12]
  13022c:	e583202c 	str	r2, [r3, #44]	; 0x2c
  130230:	ea000014 	b	130288 <igmp_lookup_group+0x170>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
  130234:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130238:	e5932000 	ldr	r2, [r3]
  13023c:	e30e3bec 	movw	r3, #60396	; 0xebec
  130240:	e3403014 	movt	r3, #20
  130244:	e5933000 	ldr	r3, [r3]
  130248:	e1520003 	cmp	r2, r3
  13024c:	1a000006 	bne	13026c <igmp_lookup_group+0x154>
  130250:	e30905a0 	movw	r0, #38304	; 0x95a0
  130254:	e3400014 	movt	r0, #20
  130258:	ebff4bad 	bl	103114 <rt_kprintf>
  13025c:	e3001113 	movw	r1, #275	; 0x113
  130260:	e3090538 	movw	r0, #38200	; 0x9538
  130264:	e3400014 	movt	r0, #20
  130268:	ebff6b91 	bl	10b0b4 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
  13026c:	e51b3008 	ldr	r3, [fp, #-8]
  130270:	e5932000 	ldr	r2, [r3]
  130274:	e51b300c 	ldr	r3, [fp, #-12]
  130278:	e5832000 	str	r2, [r3]
      list_head->next = group;
  13027c:	e51b3008 	ldr	r3, [fp, #-8]
  130280:	e51b200c 	ldr	r2, [fp, #-12]
  130284:	e5832000 	str	r2, [r3]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group?"":"impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)ifp));

  return group;
  130288:	e51b300c 	ldr	r3, [fp, #-12]
}
  13028c:	e1a00003 	mov	r0, r3
  130290:	e24bd004 	sub	sp, fp, #4
  130294:	e8bd8800 	pop	{fp, pc}

00130298 <igmp_remove_group>:
 * @param group the group to remove from the global igmp_group_list
 * @return ERR_OK if group was removed from the list, an err_t otherwise
 */
static err_t
igmp_remove_group(struct netif* netif, struct igmp_group *group)
{
  130298:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13029c:	e28db000 	add	fp, sp, #0
  1302a0:	e24dd014 	sub	sp, sp, #20
  1302a4:	e50b0010 	str	r0, [fp, #-16]
  1302a8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_OK;
  1302ac:	e3a03000 	mov	r3, #0
  1302b0:	e54b3005 	strb	r3, [fp, #-5]
  struct igmp_group *tmp_group;

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  1302b4:	e51b3010 	ldr	r3, [fp, #-16]
  1302b8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1302bc:	e50b300c 	str	r3, [fp, #-12]
  1302c0:	ea00000c 	b	1302f8 <igmp_remove_group+0x60>
    if (tmp_group->next == group) {
  1302c4:	e51b300c 	ldr	r3, [fp, #-12]
  1302c8:	e5933000 	ldr	r3, [r3]
  1302cc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1302d0:	e1520003 	cmp	r2, r3
  1302d4:	1a000004 	bne	1302ec <igmp_remove_group+0x54>
      tmp_group->next = group->next;
  1302d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1302dc:	e5932000 	ldr	r2, [r3]
  1302e0:	e51b300c 	ldr	r3, [fp, #-12]
  1302e4:	e5832000 	str	r2, [r3]
      break;
  1302e8:	ea000005 	b	130304 <igmp_remove_group+0x6c>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  1302ec:	e51b300c 	ldr	r3, [fp, #-12]
  1302f0:	e5933000 	ldr	r3, [r3]
  1302f4:	e50b300c 	str	r3, [fp, #-12]
  1302f8:	e51b300c 	ldr	r3, [fp, #-12]
  1302fc:	e3530000 	cmp	r3, #0
  130300:	1affffef 	bne	1302c4 <igmp_remove_group+0x2c>
    }
  }
  /* Group not found in the global igmp_group_list */
  if (tmp_group == NULL) {
  130304:	e51b300c 	ldr	r3, [fp, #-12]
  130308:	e3530000 	cmp	r3, #0
  13030c:	1a000001 	bne	130318 <igmp_remove_group+0x80>
    err = ERR_ARG;
  130310:	e3e0300f 	mvn	r3, #15
  130314:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  130318:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  13031c:	e1a00003 	mov	r0, r3
  130320:	e28bd000 	add	sp, fp, #0
  130324:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  130328:	e12fff1e 	bx	lr

0013032c <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
  13032c:	e92d4800 	push	{fp, lr}
  130330:	e28db004 	add	fp, sp, #4
  130334:	e24dd020 	sub	sp, sp, #32
  130338:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  13033c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  130340:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct igmp_msg*   igmp;
  struct igmp_group* group;
  struct igmp_group* groupref;

  IGMP_STATS_INC(igmp.recv);
  130344:	e30c3a48 	movw	r3, #51784	; 0xca48
  130348:	e3403015 	movt	r3, #21
  13034c:	e1d337ba 	ldrh	r3, [r3, #122]	; 0x7a
  130350:	e2833001 	add	r3, r3, #1
  130354:	e6ff2073 	uxth	r2, r3
  130358:	e30c3a48 	movw	r3, #51784	; 0xca48
  13035c:	e3403015 	movt	r3, #21
  130360:	e1c327ba 	strh	r2, [r3, #122]	; 0x7a

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
  130364:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130368:	e1d330ba 	ldrh	r3, [r3, #10]
  13036c:	e3530007 	cmp	r3, #7
  130370:	8a00000a 	bhi	1303a0 <igmp_input+0x74>
    pbuf_free(p);
  130374:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  130378:	ebffaabd 	bl	11ae74 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
  13037c:	e30c3a48 	movw	r3, #51784	; 0xca48
  130380:	e3403015 	movt	r3, #21
  130384:	e1d338b0 	ldrh	r3, [r3, #128]	; 0x80
  130388:	e2833001 	add	r3, r3, #1
  13038c:	e6ff2073 	uxth	r2, r3
  130390:	e30c3a48 	movw	r3, #51784	; 0xca48
  130394:	e3403015 	movt	r3, #21
  130398:	e1c328b0 	strh	r2, [r3, #128]	; 0x80
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
  13039c:	ea0000c9 	b	1306c8 <igmp_input+0x39c>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print(IGMP_DEBUG, &(ip4_current_header()->dest));
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
  1303a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1303a4:	e5933004 	ldr	r3, [r3, #4]
  1303a8:	e50b3010 	str	r3, [fp, #-16]
  if (inet_chksum(igmp, p->len)) {
  1303ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1303b0:	e1d330ba 	ldrh	r3, [r3, #10]
  1303b4:	e1a01003 	mov	r1, r3
  1303b8:	e51b0010 	ldr	r0, [fp, #-16]
  1303bc:	ebffa184 	bl	1189d4 <inet_chksum>
  1303c0:	e1a03000 	mov	r3, r0
  1303c4:	e3530000 	cmp	r3, #0
  1303c8:	0a00000a 	beq	1303f8 <igmp_input+0xcc>
    pbuf_free(p);
  1303cc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1303d0:	ebffaaa7 	bl	11ae74 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
  1303d4:	e30c3a48 	movw	r3, #51784	; 0xca48
  1303d8:	e3403015 	movt	r3, #21
  1303dc:	e1d337be 	ldrh	r3, [r3, #126]	; 0x7e
  1303e0:	e2833001 	add	r3, r3, #1
  1303e4:	e6ff2073 	uxth	r2, r3
  1303e8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1303ec:	e3403015 	movt	r3, #21
  1303f0:	e1c327be 	strh	r2, [r3, #126]	; 0x7e
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
  1303f4:	ea0000b3 	b	1306c8 <igmp_input+0x39c>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
  1303f8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1303fc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  130400:	ebffff28 	bl	1300a8 <igmp_lookfor_group>
  130404:	e50b0008 	str	r0, [fp, #-8]

  /* If group can be found or create... */
  if (!group) {
  130408:	e51b3008 	ldr	r3, [fp, #-8]
  13040c:	e3530000 	cmp	r3, #0
  130410:	1a00000a 	bne	130440 <igmp_input+0x114>
    pbuf_free(p);
  130414:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  130418:	ebffaa95 	bl	11ae74 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
  13041c:	e30c3a48 	movw	r3, #51784	; 0xca48
  130420:	e3403015 	movt	r3, #21
  130424:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  130428:	e2833001 	add	r3, r3, #1
  13042c:	e6ff2073 	uxth	r2, r3
  130430:	e30c3a48 	movw	r3, #51784	; 0xca48
  130434:	e3403015 	movt	r3, #21
  130438:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
  13043c:	ea0000a1 	b	1306c8 <igmp_input+0x39c>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
  130440:	e51b3010 	ldr	r3, [fp, #-16]
  130444:	e5d33000 	ldrb	r3, [r3]
  130448:	e3530011 	cmp	r3, #17
  13044c:	0a000002 	beq	13045c <igmp_input+0x130>
  130450:	e3530016 	cmp	r3, #22
  130454:	0a000078 	beq	13063c <igmp_input+0x310>
  130458:	ea00008d 	b	130694 <igmp_input+0x368>
  case IGMP_MEMB_QUERY:
    /* IGMP_MEMB_QUERY to the "all systems" address ? */
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  13045c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  130460:	e5932000 	ldr	r2, [r3]
  130464:	e30e3bec 	movw	r3, #60396	; 0xebec
  130468:	e3403014 	movt	r3, #20
  13046c:	e5933000 	ldr	r3, [r3]
  130470:	e1520003 	cmp	r2, r3
  130474:	1a000035 	bne	130550 <igmp_input+0x224>
  130478:	e51b3010 	ldr	r3, [fp, #-16]
  13047c:	e2833004 	add	r3, r3, #4
  130480:	e3530000 	cmp	r3, #0
  130484:	0a000003 	beq	130498 <igmp_input+0x16c>
  130488:	e51b3010 	ldr	r3, [fp, #-16]
  13048c:	e5933004 	ldr	r3, [r3, #4]
  130490:	e3530000 	cmp	r3, #0
  130494:	1a00002d 	bne	130550 <igmp_input+0x224>
      /* THIS IS THE GENERAL QUERY */
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));

      if (igmp->igmp_maxresp == 0) {
  130498:	e51b3010 	ldr	r3, [fp, #-16]
  13049c:	e5d33001 	ldrb	r3, [r3, #1]
  1304a0:	e3530000 	cmp	r3, #0
  1304a4:	1a00000b 	bne	1304d8 <igmp_input+0x1ac>
        IGMP_STATS_INC(igmp.rx_v1);
  1304a8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1304ac:	e3403015 	movt	r3, #21
  1304b0:	e1d338b6 	ldrh	r3, [r3, #134]	; 0x86
  1304b4:	e2833001 	add	r3, r3, #1
  1304b8:	e6ff2073 	uxth	r2, r3
  1304bc:	e30c3a48 	movw	r3, #51784	; 0xca48
  1304c0:	e3403015 	movt	r3, #21
  1304c4:	e1c328b6 	strh	r2, [r3, #134]	; 0x86
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: got an all hosts query with time== 0 - this is V1 and not implemented - treat as v2\n"));
        igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
  1304c8:	e51b3010 	ldr	r3, [fp, #-16]
  1304cc:	e3a0200a 	mov	r2, #10
  1304d0:	e5c32001 	strb	r2, [r3, #1]
  1304d4:	ea000007 	b	1304f8 <igmp_input+0x1cc>
      } else {
        IGMP_STATS_INC(igmp.rx_general);
  1304d8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1304dc:	e3403015 	movt	r3, #21
  1304e0:	e1d338ba 	ldrh	r3, [r3, #138]	; 0x8a
  1304e4:	e2833001 	add	r3, r3, #1
  1304e8:	e6ff2073 	uxth	r2, r3
  1304ec:	e30c3a48 	movw	r3, #51784	; 0xca48
  1304f0:	e3403015 	movt	r3, #21
  1304f4:	e1c328ba 	strh	r2, [r3, #138]	; 0x8a
      }

      groupref = netif_igmp_data(inp);
  1304f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1304fc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130500:	e50b300c 	str	r3, [fp, #-12]
      
      /* Do not send messages on the all systems group address! */
      /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
      if(groupref != NULL) {
  130504:	e51b300c 	ldr	r3, [fp, #-12]
  130508:	e3530000 	cmp	r3, #0
  13050c:	0a00000b 	beq	130540 <igmp_input+0x214>
        groupref = groupref->next;
  130510:	e51b300c 	ldr	r3, [fp, #-12]
  130514:	e5933000 	ldr	r3, [r3]
  130518:	e50b300c 	str	r3, [fp, #-12]
      }

      while (groupref) {
  13051c:	ea000007 	b	130540 <igmp_input+0x214>
        igmp_delaying_member(groupref, igmp->igmp_maxresp);
  130520:	e51b3010 	ldr	r3, [fp, #-16]
  130524:	e5d33001 	ldrb	r3, [r3, #1]
  130528:	e1a01003 	mov	r1, r3
  13052c:	e51b000c 	ldr	r0, [fp, #-12]
  130530:	eb000246 	bl	130e50 <igmp_delaying_member>
        groupref = groupref->next;
  130534:	e51b300c 	ldr	r3, [fp, #-12]
  130538:	e5933000 	ldr	r3, [r3]
  13053c:	e50b300c 	str	r3, [fp, #-12]
      while (groupref) {
  130540:	e51b300c 	ldr	r3, [fp, #-12]
  130544:	e3530000 	cmp	r3, #0
  130548:	1afffff4 	bne	130520 <igmp_input+0x1f4>
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  13054c:	ea000039 	b	130638 <igmp_input+0x30c>
      }
    } else {
      /* IGMP_MEMB_QUERY to a specific group ? */
      if (!ip4_addr_isany(&igmp->igmp_group_address)) {
  130550:	e51b3010 	ldr	r3, [fp, #-16]
  130554:	e2833004 	add	r3, r3, #4
  130558:	e3530000 	cmp	r3, #0
  13055c:	0a00002c 	beq	130614 <igmp_input+0x2e8>
  130560:	e51b3010 	ldr	r3, [fp, #-16]
  130564:	e5933004 	ldr	r3, [r3, #4]
  130568:	e3530000 	cmp	r3, #0
  13056c:	0a000028 	beq	130614 <igmp_input+0x2e8>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_MEMB_QUERY to a specific group "));
        ip4_addr_debug_print(IGMP_DEBUG, &igmp->igmp_group_address);
        if (ip4_addr_cmp(dest, &allsystems)) {
  130570:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  130574:	e5932000 	ldr	r2, [r3]
  130578:	e30e3bec 	movw	r3, #60396	; 0xebec
  13057c:	e3403014 	movt	r3, #20
  130580:	e5933000 	ldr	r3, [r3]
  130584:	e1520003 	cmp	r2, r3
  130588:	1a000007 	bne	1305ac <igmp_input+0x280>
          ip4_addr_t groupaddr;
          LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
          /* we first need to re-look for the group since we used dest last time */
          ip4_addr_copy(groupaddr, igmp->igmp_group_address);
  13058c:	e51b3010 	ldr	r3, [fp, #-16]
  130590:	e5933004 	ldr	r3, [r3, #4]
  130594:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
          group = igmp_lookfor_group(inp, &groupaddr);
  130598:	e24b3014 	sub	r3, fp, #20
  13059c:	e1a01003 	mov	r1, r3
  1305a0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1305a4:	ebfffebf 	bl	1300a8 <igmp_lookfor_group>
  1305a8:	e50b0008 	str	r0, [fp, #-8]
        } else {
          LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
        }

        if (group != NULL) {
  1305ac:	e51b3008 	ldr	r3, [fp, #-8]
  1305b0:	e3530000 	cmp	r3, #0
  1305b4:	0a00000d 	beq	1305f0 <igmp_input+0x2c4>
          IGMP_STATS_INC(igmp.rx_group);
  1305b8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1305bc:	e3403015 	movt	r3, #21
  1305c0:	e1d338b8 	ldrh	r3, [r3, #136]	; 0x88
  1305c4:	e2833001 	add	r3, r3, #1
  1305c8:	e6ff2073 	uxth	r2, r3
  1305cc:	e30c3a48 	movw	r3, #51784	; 0xca48
  1305d0:	e3403015 	movt	r3, #21
  1305d4:	e1c328b8 	strh	r2, [r3, #136]	; 0x88
          igmp_delaying_member(group, igmp->igmp_maxresp);
  1305d8:	e51b3010 	ldr	r3, [fp, #-16]
  1305dc:	e5d33001 	ldrb	r3, [r3, #1]
  1305e0:	e1a01003 	mov	r1, r3
  1305e4:	e51b0008 	ldr	r0, [fp, #-8]
  1305e8:	eb000218 	bl	130e50 <igmp_delaying_member>
        if (group != NULL) {
  1305ec:	ea000011 	b	130638 <igmp_input+0x30c>
        } else {
          IGMP_STATS_INC(igmp.drop);
  1305f0:	e30c3a48 	movw	r3, #51784	; 0xca48
  1305f4:	e3403015 	movt	r3, #21
  1305f8:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  1305fc:	e2833001 	add	r3, r3, #1
  130600:	e6ff2073 	uxth	r2, r3
  130604:	e30c3a48 	movw	r3, #51784	; 0xca48
  130608:	e3403015 	movt	r3, #21
  13060c:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
        if (group != NULL) {
  130610:	ea000008 	b	130638 <igmp_input+0x30c>
        }
      } else {
        IGMP_STATS_INC(igmp.proterr);
  130614:	e30c3a48 	movw	r3, #51784	; 0xca48
  130618:	e3403015 	movt	r3, #21
  13061c:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  130620:	e2833001 	add	r3, r3, #1
  130624:	e6ff2073 	uxth	r2, r3
  130628:	e30c3a48 	movw	r3, #51784	; 0xca48
  13062c:	e3403015 	movt	r3, #21
  130630:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
      }
    }
    break;
  130634:	ea000020 	b	1306bc <igmp_input+0x390>
  130638:	ea00001f 	b	1306bc <igmp_input+0x390>
  case IGMP_V2_MEMB_REPORT:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));
    IGMP_STATS_INC(igmp.rx_report);
  13063c:	e30c3a48 	movw	r3, #51784	; 0xca48
  130640:	e3403015 	movt	r3, #21
  130644:	e1d338bc 	ldrh	r3, [r3, #140]	; 0x8c
  130648:	e2833001 	add	r3, r3, #1
  13064c:	e6ff2073 	uxth	r2, r3
  130650:	e30c3a48 	movw	r3, #51784	; 0xca48
  130654:	e3403015 	movt	r3, #21
  130658:	e1c328bc 	strh	r2, [r3, #140]	; 0x8c
    if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
  13065c:	e51b3008 	ldr	r3, [fp, #-8]
  130660:	e5d33009 	ldrb	r3, [r3, #9]
  130664:	e3530001 	cmp	r3, #1
  130668:	1a000012 	bne	1306b8 <igmp_input+0x38c>
      /* This is on a specific group we have already looked up */
      group->timer = 0; /* stopped */
  13066c:	e51b3008 	ldr	r3, [fp, #-8]
  130670:	e3a02000 	mov	r2, #0
  130674:	e1c320ba 	strh	r2, [r3, #10]
      group->group_state = IGMP_GROUP_IDLE_MEMBER;
  130678:	e51b3008 	ldr	r3, [fp, #-8]
  13067c:	e3a02002 	mov	r2, #2
  130680:	e5c32009 	strb	r2, [r3, #9]
      group->last_reporter_flag = 0;
  130684:	e51b3008 	ldr	r3, [fp, #-8]
  130688:	e3a02000 	mov	r2, #0
  13068c:	e5c32008 	strb	r2, [r3, #8]
    }
    break;
  130690:	ea000008 	b	1306b8 <igmp_input+0x38c>
  default:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
      igmp->igmp_msgtype, group->group_state, (void*)&group, (void*)inp));
    IGMP_STATS_INC(igmp.proterr);
  130694:	e30c3a48 	movw	r3, #51784	; 0xca48
  130698:	e3403015 	movt	r3, #21
  13069c:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  1306a0:	e2833001 	add	r3, r3, #1
  1306a4:	e6ff2073 	uxth	r2, r3
  1306a8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1306ac:	e3403015 	movt	r3, #21
  1306b0:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
    break;
  1306b4:	ea000000 	b	1306bc <igmp_input+0x390>
    break;
  1306b8:	e320f000 	nop	{0}
  }

  pbuf_free(p);
  1306bc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1306c0:	ebffa9eb 	bl	11ae74 <pbuf_free>
  return;
  1306c4:	e320f000 	nop	{0}
}
  1306c8:	e24bd004 	sub	sp, fp, #4
  1306cc:	e8bd8800 	pop	{fp, pc}

001306d0 <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  1306d0:	e92d4800 	push	{fp, lr}
  1306d4:	e28db004 	add	fp, sp, #4
  1306d8:	e24dd010 	sub	sp, sp, #16
  1306dc:	e50b0010 	str	r0, [fp, #-16]
  1306e0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_VAL; /* no matching interface */
  1306e4:	e3e03005 	mvn	r3, #5
  1306e8:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  1306ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1306f0:	e5933000 	ldr	r3, [r3]
  1306f4:	e20330f0 	and	r3, r3, #240	; 0xf0
  1306f8:	e35300e0 	cmp	r3, #224	; 0xe0
  1306fc:	0a000008 	beq	130724 <igmp_joingroup+0x54>
  130700:	e30905e4 	movw	r0, #38372	; 0x95e4
  130704:	e3400014 	movt	r0, #20
  130708:	ebff4a81 	bl	103114 <rt_kprintf>
  13070c:	e30011c7 	movw	r1, #455	; 0x1c7
  130710:	e3090538 	movw	r0, #38200	; 0x9538
  130714:	e3400014 	movt	r0, #20
  130718:	ebff6a65 	bl	10b0b4 <sys_arch_assert>
  13071c:	e3e03005 	mvn	r3, #5
  130720:	ea000038 	b	130808 <igmp_joingroup+0x138>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130724:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130728:	e5932000 	ldr	r2, [r3]
  13072c:	e30e3bec 	movw	r3, #60396	; 0xebec
  130730:	e3403014 	movt	r3, #20
  130734:	e5933000 	ldr	r3, [r3]
  130738:	e1520003 	cmp	r2, r3
  13073c:	1a000008 	bne	130764 <igmp_joingroup+0x94>
  130740:	e309061c 	movw	r0, #38428	; 0x961c
  130744:	e3400014 	movt	r0, #20
  130748:	ebff4a71 	bl	103114 <rt_kprintf>
  13074c:	e3a01f72 	mov	r1, #456	; 0x1c8
  130750:	e3090538 	movw	r0, #38200	; 0x9538
  130754:	e3400014 	movt	r0, #20
  130758:	ebff6a55 	bl	10b0b4 <sys_arch_assert>
  13075c:	e3e03005 	mvn	r3, #5
  130760:	ea000028 	b	130808 <igmp_joingroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  130764:	e30c3a3c 	movw	r3, #51772	; 0xca3c
  130768:	e3403015 	movt	r3, #21
  13076c:	e5933000 	ldr	r3, [r3]
  130770:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130774:	ea00001f 	b	1307f8 <igmp_joingroup+0x128>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  130778:	e51b300c 	ldr	r3, [fp, #-12]
  13077c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130780:	e2033020 	and	r3, r3, #32
  130784:	e3530000 	cmp	r3, #0
  130788:	0a000017 	beq	1307ec <igmp_joingroup+0x11c>
  13078c:	e51b3010 	ldr	r3, [fp, #-16]
  130790:	e3530000 	cmp	r3, #0
  130794:	0a00000a 	beq	1307c4 <igmp_joingroup+0xf4>
  130798:	e51b3010 	ldr	r3, [fp, #-16]
  13079c:	e5933000 	ldr	r3, [r3]
  1307a0:	e3530000 	cmp	r3, #0
  1307a4:	0a000006 	beq	1307c4 <igmp_joingroup+0xf4>
  1307a8:	e51b300c 	ldr	r3, [fp, #-12]
  1307ac:	e2833004 	add	r3, r3, #4
  1307b0:	e5932000 	ldr	r2, [r3]
  1307b4:	e51b3010 	ldr	r3, [fp, #-16]
  1307b8:	e5933000 	ldr	r3, [r3]
  1307bc:	e1520003 	cmp	r2, r3
  1307c0:	1a000009 	bne	1307ec <igmp_joingroup+0x11c>
      err = igmp_joingroup_netif(netif, groupaddr);
  1307c4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1307c8:	e51b000c 	ldr	r0, [fp, #-12]
  1307cc:	eb000010 	bl	130814 <igmp_joingroup_netif>
  1307d0:	e1a03000 	mov	r3, r0
  1307d4:	e54b3005 	strb	r3, [fp, #-5]
      if (err != ERR_OK) {
  1307d8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1307dc:	e3530000 	cmp	r3, #0
  1307e0:	0a000001 	beq	1307ec <igmp_joingroup+0x11c>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
  1307e4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1307e8:	ea000006 	b	130808 <igmp_joingroup+0x138>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  1307ec:	e51b300c 	ldr	r3, [fp, #-12]
  1307f0:	e5933000 	ldr	r3, [r3]
  1307f4:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  1307f8:	e51b300c 	ldr	r3, [fp, #-12]
  1307fc:	e3530000 	cmp	r3, #0
  130800:	1affffdc 	bne	130778 <igmp_joingroup+0xa8>
  }

  return err;
  130804:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  130808:	e1a00003 	mov	r0, r3
  13080c:	e24bd004 	sub	sp, fp, #4
  130810:	e8bd8800 	pop	{fp, pc}

00130814 <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  130814:	e92d4800 	push	{fp, lr}
  130818:	e28db004 	add	fp, sp, #4
  13081c:	e24dd010 	sub	sp, sp, #16
  130820:	e50b0010 	str	r0, [fp, #-16]
  130824:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130828:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13082c:	e5933000 	ldr	r3, [r3]
  130830:	e20330f0 	and	r3, r3, #240	; 0xf0
  130834:	e35300e0 	cmp	r3, #224	; 0xe0
  130838:	0a000008 	beq	130860 <igmp_joingroup_netif+0x4c>
  13083c:	e3090650 	movw	r0, #38480	; 0x9650
  130840:	e3400014 	movt	r0, #20
  130844:	ebff4a32 	bl	103114 <rt_kprintf>
  130848:	e30011eb 	movw	r1, #491	; 0x1eb
  13084c:	e3090538 	movw	r0, #38200	; 0x9538
  130850:	e3400014 	movt	r0, #20
  130854:	ebff6a16 	bl	10b0b4 <sys_arch_assert>
  130858:	e3e03005 	mvn	r3, #5
  13085c:	ea000051 	b	1309a8 <igmp_joingroup_netif+0x194>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130860:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130864:	e5932000 	ldr	r2, [r3]
  130868:	e30e3bec 	movw	r3, #60396	; 0xebec
  13086c:	e3403014 	movt	r3, #20
  130870:	e5933000 	ldr	r3, [r3]
  130874:	e1520003 	cmp	r2, r3
  130878:	1a000008 	bne	1308a0 <igmp_joingroup_netif+0x8c>
  13087c:	e309068c 	movw	r0, #38540	; 0x968c
  130880:	e3400014 	movt	r0, #20
  130884:	ebff4a22 	bl	103114 <rt_kprintf>
  130888:	e3a01f7b 	mov	r1, #492	; 0x1ec
  13088c:	e3090538 	movw	r0, #38200	; 0x9538
  130890:	e3400014 	movt	r0, #20
  130894:	ebff6a06 	bl	10b0b4 <sys_arch_assert>
  130898:	e3e03005 	mvn	r3, #5
  13089c:	ea000041 	b	1309a8 <igmp_joingroup_netif+0x194>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  1308a0:	e51b3010 	ldr	r3, [fp, #-16]
  1308a4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1308a8:	e2033020 	and	r3, r3, #32
  1308ac:	e3530000 	cmp	r3, #0
  1308b0:	1a000008 	bne	1308d8 <igmp_joingroup_netif+0xc4>
  1308b4:	e30906c8 	movw	r0, #38600	; 0x96c8
  1308b8:	e3400014 	movt	r0, #20
  1308bc:	ebff4a14 	bl	103114 <rt_kprintf>
  1308c0:	e30011ef 	movw	r1, #495	; 0x1ef
  1308c4:	e3090538 	movw	r0, #38200	; 0x9538
  1308c8:	e3400014 	movt	r0, #20
  1308cc:	ebff69f8 	bl	10b0b4 <sys_arch_assert>
  1308d0:	e3e03005 	mvn	r3, #5
  1308d4:	ea000033 	b	1309a8 <igmp_joingroup_netif+0x194>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
  1308d8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1308dc:	e51b0010 	ldr	r0, [fp, #-16]
  1308e0:	ebfffe0c 	bl	130118 <igmp_lookup_group>
  1308e4:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  1308e8:	e51b3008 	ldr	r3, [fp, #-8]
  1308ec:	e3530000 	cmp	r3, #0
  1308f0:	0a00002b 	beq	1309a4 <igmp_joingroup_netif+0x190>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
  1308f4:	e51b3008 	ldr	r3, [fp, #-8]
  1308f8:	e5d33009 	ldrb	r3, [r3, #9]
  1308fc:	e3530000 	cmp	r3, #0
  130900:	1a00001f 	bne	130984 <igmp_joingroup_netif+0x170>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use==0) && (netif->igmp_mac_filter != NULL)) {
  130904:	e51b3008 	ldr	r3, [fp, #-8]
  130908:	e5d3300c 	ldrb	r3, [r3, #12]
  13090c:	e3530000 	cmp	r3, #0
  130910:	1a000009 	bne	13093c <igmp_joingroup_netif+0x128>
  130914:	e51b3010 	ldr	r3, [fp, #-16]
  130918:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  13091c:	e3530000 	cmp	r3, #0
  130920:	0a000005 	beq	13093c <igmp_joingroup_netif+0x128>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
  130924:	e51b3010 	ldr	r3, [fp, #-16]
  130928:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  13092c:	e3a02001 	mov	r2, #1
  130930:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130934:	e51b0010 	ldr	r0, [fp, #-16]
  130938:	e12fff33 	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
  13093c:	e30c3a48 	movw	r3, #51784	; 0xca48
  130940:	e3403015 	movt	r3, #21
  130944:	e1d338be 	ldrh	r3, [r3, #142]	; 0x8e
  130948:	e2833001 	add	r3, r3, #1
  13094c:	e6ff2073 	uxth	r2, r3
  130950:	e30c3a48 	movw	r3, #51784	; 0xca48
  130954:	e3403015 	movt	r3, #21
  130958:	e1c328be 	strh	r2, [r3, #142]	; 0x8e
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  13095c:	e3a02016 	mov	r2, #22
  130960:	e51b1008 	ldr	r1, [fp, #-8]
  130964:	e51b0010 	ldr	r0, [fp, #-16]
  130968:	eb000180 	bl	130f70 <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  13096c:	e3a01005 	mov	r1, #5
  130970:	e51b0008 	ldr	r0, [fp, #-8]
  130974:	eb000116 	bl	130dd4 <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  130978:	e51b3008 	ldr	r3, [fp, #-8]
  13097c:	e3a02001 	mov	r2, #1
  130980:	e5c32009 	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
  130984:	e51b3008 	ldr	r3, [fp, #-8]
  130988:	e5d3300c 	ldrb	r3, [r3, #12]
  13098c:	e2833001 	add	r3, r3, #1
  130990:	e6ef2073 	uxtb	r2, r3
  130994:	e51b3008 	ldr	r3, [fp, #-8]
  130998:	e5c3200c 	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
  13099c:	e3a03000 	mov	r3, #0
  1309a0:	ea000000 	b	1309a8 <igmp_joingroup_netif+0x194>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
  1309a4:	e3e03000 	mvn	r3, #0
  }
}
  1309a8:	e1a00003 	mov	r0, r3
  1309ac:	e24bd004 	sub	sp, fp, #4
  1309b0:	e8bd8800 	pop	{fp, pc}

001309b4 <igmp_leavegroup>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif(s), an err_t otherwise
 */
err_t
igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  1309b4:	e92d4800 	push	{fp, lr}
  1309b8:	e28db004 	add	fp, sp, #4
  1309bc:	e24dd018 	sub	sp, sp, #24
  1309c0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1309c4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  err_t err = ERR_VAL; /* no matching interface */
  1309c8:	e3e03005 	mvn	r3, #5
  1309cc:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  1309d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1309d4:	e5933000 	ldr	r3, [r3]
  1309d8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1309dc:	e35300e0 	cmp	r3, #224	; 0xe0
  1309e0:	0a000008 	beq	130a08 <igmp_leavegroup+0x54>
  1309e4:	e3090700 	movw	r0, #38656	; 0x9700
  1309e8:	e3400014 	movt	r0, #20
  1309ec:	ebff49c8 	bl	103114 <rt_kprintf>
  1309f0:	e3001227 	movw	r1, #551	; 0x227
  1309f4:	e3090538 	movw	r0, #38200	; 0x9538
  1309f8:	e3400014 	movt	r0, #20
  1309fc:	ebff69ac 	bl	10b0b4 <sys_arch_assert>
  130a00:	e3e03005 	mvn	r3, #5
  130a04:	ea000038 	b	130aec <igmp_leavegroup+0x138>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130a08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130a0c:	e5932000 	ldr	r2, [r3]
  130a10:	e30e3bec 	movw	r3, #60396	; 0xebec
  130a14:	e3403014 	movt	r3, #20
  130a18:	e5933000 	ldr	r3, [r3]
  130a1c:	e1520003 	cmp	r2, r3
  130a20:	1a000008 	bne	130a48 <igmp_leavegroup+0x94>
  130a24:	e3090738 	movw	r0, #38712	; 0x9738
  130a28:	e3400014 	movt	r0, #20
  130a2c:	ebff49b8 	bl	103114 <rt_kprintf>
  130a30:	e3a01f8a 	mov	r1, #552	; 0x228
  130a34:	e3090538 	movw	r0, #38200	; 0x9538
  130a38:	e3400014 	movt	r0, #20
  130a3c:	ebff699c 	bl	10b0b4 <sys_arch_assert>
  130a40:	e3e03005 	mvn	r3, #5
  130a44:	ea000028 	b	130aec <igmp_leavegroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  130a48:	e30c3a3c 	movw	r3, #51772	; 0xca3c
  130a4c:	e3403015 	movt	r3, #21
  130a50:	e5933000 	ldr	r3, [r3]
  130a54:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130a58:	ea00001f 	b	130adc <igmp_leavegroup+0x128>
    /* Should we leave this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  130a5c:	e51b300c 	ldr	r3, [fp, #-12]
  130a60:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130a64:	e2033020 	and	r3, r3, #32
  130a68:	e3530000 	cmp	r3, #0
  130a6c:	0a000017 	beq	130ad0 <igmp_leavegroup+0x11c>
  130a70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130a74:	e3530000 	cmp	r3, #0
  130a78:	0a00000a 	beq	130aa8 <igmp_leavegroup+0xf4>
  130a7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130a80:	e5933000 	ldr	r3, [r3]
  130a84:	e3530000 	cmp	r3, #0
  130a88:	0a000006 	beq	130aa8 <igmp_leavegroup+0xf4>
  130a8c:	e51b300c 	ldr	r3, [fp, #-12]
  130a90:	e2833004 	add	r3, r3, #4
  130a94:	e5932000 	ldr	r2, [r3]
  130a98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130a9c:	e5933000 	ldr	r3, [r3]
  130aa0:	e1520003 	cmp	r2, r3
  130aa4:	1a000009 	bne	130ad0 <igmp_leavegroup+0x11c>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
  130aa8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  130aac:	e51b000c 	ldr	r0, [fp, #-12]
  130ab0:	eb000010 	bl	130af8 <igmp_leavegroup_netif>
  130ab4:	e1a03000 	mov	r3, r0
  130ab8:	e54b300d 	strb	r3, [fp, #-13]
      if (err != ERR_OK) {
  130abc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  130ac0:	e3530000 	cmp	r3, #0
  130ac4:	0a000001 	beq	130ad0 <igmp_leavegroup+0x11c>
        /* Store this result if we have not yet gotten a success */
        err = res;
  130ac8:	e55b300d 	ldrb	r3, [fp, #-13]
  130acc:	e54b3005 	strb	r3, [fp, #-5]
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  130ad0:	e51b300c 	ldr	r3, [fp, #-12]
  130ad4:	e5933000 	ldr	r3, [r3]
  130ad8:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130adc:	e51b300c 	ldr	r3, [fp, #-12]
  130ae0:	e3530000 	cmp	r3, #0
  130ae4:	1affffdc 	bne	130a5c <igmp_leavegroup+0xa8>
  }

  return err;
  130ae8:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  130aec:	e1a00003 	mov	r0, r3
  130af0:	e24bd004 	sub	sp, fp, #4
  130af4:	e8bd8800 	pop	{fp, pc}

00130af8 <igmp_leavegroup_netif>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif, an err_t otherwise
 */
err_t
igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  130af8:	e92d4800 	push	{fp, lr}
  130afc:	e28db004 	add	fp, sp, #4
  130b00:	e24dd010 	sub	sp, sp, #16
  130b04:	e50b0010 	str	r0, [fp, #-16]
  130b08:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130b0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130b10:	e5933000 	ldr	r3, [r3]
  130b14:	e20330f0 	and	r3, r3, #240	; 0xf0
  130b18:	e35300e0 	cmp	r3, #224	; 0xe0
  130b1c:	0a000008 	beq	130b44 <igmp_leavegroup_netif+0x4c>
  130b20:	e3090770 	movw	r0, #38768	; 0x9770
  130b24:	e3400014 	movt	r0, #20
  130b28:	ebff4979 	bl	103114 <rt_kprintf>
  130b2c:	e300124a 	movw	r1, #586	; 0x24a
  130b30:	e3090538 	movw	r0, #38200	; 0x9538
  130b34:	e3400014 	movt	r0, #20
  130b38:	ebff695d 	bl	10b0b4 <sys_arch_assert>
  130b3c:	e3e03005 	mvn	r3, #5
  130b40:	ea000052 	b	130c90 <igmp_leavegroup_netif+0x198>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130b44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130b48:	e5932000 	ldr	r2, [r3]
  130b4c:	e30e3bec 	movw	r3, #60396	; 0xebec
  130b50:	e3403014 	movt	r3, #20
  130b54:	e5933000 	ldr	r3, [r3]
  130b58:	e1520003 	cmp	r2, r3
  130b5c:	1a000008 	bne	130b84 <igmp_leavegroup_netif+0x8c>
  130b60:	e30907b0 	movw	r0, #38832	; 0x97b0
  130b64:	e3400014 	movt	r0, #20
  130b68:	ebff4969 	bl	103114 <rt_kprintf>
  130b6c:	e300124b 	movw	r1, #587	; 0x24b
  130b70:	e3090538 	movw	r0, #38200	; 0x9538
  130b74:	e3400014 	movt	r0, #20
  130b78:	ebff694d 	bl	10b0b4 <sys_arch_assert>
  130b7c:	e3e03005 	mvn	r3, #5
  130b80:	ea000042 	b	130c90 <igmp_leavegroup_netif+0x198>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  130b84:	e51b3010 	ldr	r3, [fp, #-16]
  130b88:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130b8c:	e2033020 	and	r3, r3, #32
  130b90:	e3530000 	cmp	r3, #0
  130b94:	1a000008 	bne	130bbc <igmp_leavegroup_netif+0xc4>
  130b98:	e30907ec 	movw	r0, #38892	; 0x97ec
  130b9c:	e3400014 	movt	r0, #20
  130ba0:	ebff495b 	bl	103114 <rt_kprintf>
  130ba4:	e300124e 	movw	r1, #590	; 0x24e
  130ba8:	e3090538 	movw	r0, #38200	; 0x9538
  130bac:	e3400014 	movt	r0, #20
  130bb0:	ebff693f 	bl	10b0b4 <sys_arch_assert>
  130bb4:	e3e03005 	mvn	r3, #5
  130bb8:	ea000034 	b	130c90 <igmp_leavegroup_netif+0x198>

  /* find group */
  group = igmp_lookfor_group(netif, groupaddr);
  130bbc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130bc0:	e51b0010 	ldr	r0, [fp, #-16]
  130bc4:	ebfffd37 	bl	1300a8 <igmp_lookfor_group>
  130bc8:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  130bcc:	e51b3008 	ldr	r3, [fp, #-8]
  130bd0:	e3530000 	cmp	r3, #0
  130bd4:	0a00002c 	beq	130c8c <igmp_leavegroup_netif+0x194>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: Leaving group: "));
    ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
    LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

    /* If there is no other use of the group */
    if (group->use <= 1) {
  130bd8:	e51b3008 	ldr	r3, [fp, #-8]
  130bdc:	e5d3300c 	ldrb	r3, [r3, #12]
  130be0:	e3530001 	cmp	r3, #1
  130be4:	8a000020 	bhi	130c6c <igmp_leavegroup_netif+0x174>
      /* Remove the group from the list */
      igmp_remove_group(netif, group);
  130be8:	e51b1008 	ldr	r1, [fp, #-8]
  130bec:	e51b0010 	ldr	r0, [fp, #-16]
  130bf0:	ebfffda8 	bl	130298 <igmp_remove_group>

      /* If we are the last reporter for this group */
      if (group->last_reporter_flag) {
  130bf4:	e51b3008 	ldr	r3, [fp, #-8]
  130bf8:	e5d33008 	ldrb	r3, [r3, #8]
  130bfc:	e3530000 	cmp	r3, #0
  130c00:	0a00000b 	beq	130c34 <igmp_leavegroup_netif+0x13c>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: sending leaving group\n"));
        IGMP_STATS_INC(igmp.tx_leave);
  130c04:	e30c3a48 	movw	r3, #51784	; 0xca48
  130c08:	e3403015 	movt	r3, #21
  130c0c:	e1d339b0 	ldrh	r3, [r3, #144]	; 0x90
  130c10:	e2833001 	add	r3, r3, #1
  130c14:	e6ff2073 	uxth	r2, r3
  130c18:	e30c3a48 	movw	r3, #51784	; 0xca48
  130c1c:	e3403015 	movt	r3, #21
  130c20:	e1c329b0 	strh	r2, [r3, #144]	; 0x90
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
  130c24:	e3a02017 	mov	r2, #23
  130c28:	e51b1008 	ldr	r1, [fp, #-8]
  130c2c:	e51b0010 	ldr	r0, [fp, #-16]
  130c30:	eb0000ce 	bl	130f70 <igmp_send>
      }

      /* Disable the group at the MAC level */
      if (netif->igmp_mac_filter != NULL) {
  130c34:	e51b3010 	ldr	r3, [fp, #-16]
  130c38:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130c3c:	e3530000 	cmp	r3, #0
  130c40:	0a000005 	beq	130c5c <igmp_leavegroup_netif+0x164>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: igmp_mac_filter(DEL "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
  130c44:	e51b3010 	ldr	r3, [fp, #-16]
  130c48:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130c4c:	e3a02000 	mov	r2, #0
  130c50:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130c54:	e51b0010 	ldr	r0, [fp, #-16]
  130c58:	e12fff33 	blx	r3
      }

      /* Free group struct */
      memp_free(MEMP_IGMP_GROUP, group);
  130c5c:	e51b1008 	ldr	r1, [fp, #-8]
  130c60:	e3a0000c 	mov	r0, #12
  130c64:	ebffa174 	bl	11923c <memp_free>
  130c68:	ea000005 	b	130c84 <igmp_leavegroup_netif+0x18c>
    } else {
      /* Decrement group use */
      group->use--;
  130c6c:	e51b3008 	ldr	r3, [fp, #-8]
  130c70:	e5d3300c 	ldrb	r3, [r3, #12]
  130c74:	e2433001 	sub	r3, r3, #1
  130c78:	e6ef2073 	uxtb	r2, r3
  130c7c:	e51b3008 	ldr	r3, [fp, #-8]
  130c80:	e5c3200c 	strb	r2, [r3, #12]
    }
    return ERR_OK;
  130c84:	e3a03000 	mov	r3, #0
  130c88:	ea000000 	b	130c90 <igmp_leavegroup_netif+0x198>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: not member of group\n"));
    return ERR_VAL;
  130c8c:	e3e03005 	mvn	r3, #5
  }
}
  130c90:	e1a00003 	mov	r0, r3
  130c94:	e24bd004 	sub	sp, fp, #4
  130c98:	e8bd8800 	pop	{fp, pc}

00130c9c <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
  130c9c:	e92d4800 	push	{fp, lr}
  130ca0:	e28db004 	add	fp, sp, #4
  130ca4:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  130ca8:	e30c3a3c 	movw	r3, #51772	; 0xca3c
  130cac:	e3403015 	movt	r3, #21
  130cb0:	e5933000 	ldr	r3, [r3]
  130cb4:	e50b3008 	str	r3, [fp, #-8]

  while (netif != NULL) {
  130cb8:	ea00001d 	b	130d34 <igmp_tmr+0x98>
    struct igmp_group *group = netif_igmp_data(netif);
  130cbc:	e51b3008 	ldr	r3, [fp, #-8]
  130cc0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130cc4:	e50b300c 	str	r3, [fp, #-12]

    while (group != NULL) {
  130cc8:	ea000013 	b	130d1c <igmp_tmr+0x80>
      if (group->timer > 0) {
  130ccc:	e51b300c 	ldr	r3, [fp, #-12]
  130cd0:	e1d330ba 	ldrh	r3, [r3, #10]
  130cd4:	e3530000 	cmp	r3, #0
  130cd8:	0a00000c 	beq	130d10 <igmp_tmr+0x74>
        group->timer--;
  130cdc:	e51b300c 	ldr	r3, [fp, #-12]
  130ce0:	e1d330ba 	ldrh	r3, [r3, #10]
  130ce4:	e2433001 	sub	r3, r3, #1
  130ce8:	e6ff2073 	uxth	r2, r3
  130cec:	e51b300c 	ldr	r3, [fp, #-12]
  130cf0:	e1c320ba 	strh	r2, [r3, #10]
        if (group->timer == 0) {
  130cf4:	e51b300c 	ldr	r3, [fp, #-12]
  130cf8:	e1d330ba 	ldrh	r3, [r3, #10]
  130cfc:	e3530000 	cmp	r3, #0
  130d00:	1a000002 	bne	130d10 <igmp_tmr+0x74>
          igmp_timeout(netif, group);
  130d04:	e51b100c 	ldr	r1, [fp, #-12]
  130d08:	e51b0008 	ldr	r0, [fp, #-8]
  130d0c:	eb00000e 	bl	130d4c <igmp_timeout>
        }
      }
      group = group->next;
  130d10:	e51b300c 	ldr	r3, [fp, #-12]
  130d14:	e5933000 	ldr	r3, [r3]
  130d18:	e50b300c 	str	r3, [fp, #-12]
    while (group != NULL) {
  130d1c:	e51b300c 	ldr	r3, [fp, #-12]
  130d20:	e3530000 	cmp	r3, #0
  130d24:	1affffe8 	bne	130ccc <igmp_tmr+0x30>
    }
    netif = netif->next;
  130d28:	e51b3008 	ldr	r3, [fp, #-8]
  130d2c:	e5933000 	ldr	r3, [r3]
  130d30:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  130d34:	e51b3008 	ldr	r3, [fp, #-8]
  130d38:	e3530000 	cmp	r3, #0
  130d3c:	1affffde 	bne	130cbc <igmp_tmr+0x20>
  }
}
  130d40:	e320f000 	nop	{0}
  130d44:	e24bd004 	sub	sp, fp, #4
  130d48:	e8bd8800 	pop	{fp, pc}

00130d4c <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
  130d4c:	e92d4800 	push	{fp, lr}
  130d50:	e28db004 	add	fp, sp, #4
  130d54:	e24dd008 	sub	sp, sp, #8
  130d58:	e50b0008 	str	r0, [fp, #-8]
  130d5c:	e50b100c 	str	r1, [fp, #-12]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130d60:	e51b300c 	ldr	r3, [fp, #-12]
  130d64:	e5d33009 	ldrb	r3, [r3, #9]
  130d68:	e3530001 	cmp	r3, #1
  130d6c:	1a000015 	bne	130dc8 <igmp_timeout+0x7c>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
  130d70:	e51b300c 	ldr	r3, [fp, #-12]
  130d74:	e5932004 	ldr	r2, [r3, #4]
  130d78:	e30e3bec 	movw	r3, #60396	; 0xebec
  130d7c:	e3403014 	movt	r3, #20
  130d80:	e5933000 	ldr	r3, [r3]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130d84:	e1520003 	cmp	r2, r3
  130d88:	0a00000e 	beq	130dc8 <igmp_timeout+0x7c>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print(IGMP_DEBUG, &(group->group_address));
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  130d8c:	e51b300c 	ldr	r3, [fp, #-12]
  130d90:	e3a02002 	mov	r2, #2
  130d94:	e5c32009 	strb	r2, [r3, #9]
    
    IGMP_STATS_INC(igmp.tx_report);
  130d98:	e30c3a48 	movw	r3, #51784	; 0xca48
  130d9c:	e3403015 	movt	r3, #21
  130da0:	e1d339b2 	ldrh	r3, [r3, #146]	; 0x92
  130da4:	e2833001 	add	r3, r3, #1
  130da8:	e6ff2073 	uxth	r2, r3
  130dac:	e30c3a48 	movw	r3, #51784	; 0xca48
  130db0:	e3403015 	movt	r3, #21
  130db4:	e1c329b2 	strh	r2, [r3, #146]	; 0x92
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  130db8:	e3a02016 	mov	r2, #22
  130dbc:	e51b100c 	ldr	r1, [fp, #-12]
  130dc0:	e51b0008 	ldr	r0, [fp, #-8]
  130dc4:	eb000069 	bl	130f70 <igmp_send>
  }
}
  130dc8:	e320f000 	nop	{0}
  130dcc:	e24bd004 	sub	sp, fp, #4
  130dd0:	e8bd8800 	pop	{fp, pc}

00130dd4 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
  130dd4:	e92d4800 	push	{fp, lr}
  130dd8:	e28db004 	add	fp, sp, #4
  130ddc:	e24dd008 	sub	sp, sp, #8
  130de0:	e50b0008 	str	r0, [fp, #-8]
  130de4:	e1a03001 	mov	r3, r1
  130de8:	e54b3009 	strb	r3, [fp, #-9]
#ifdef LWIP_RAND
  group->timer = max_time > 2 ? (LWIP_RAND() % max_time) : 1;
  130dec:	e55b3009 	ldrb	r3, [fp, #-9]
  130df0:	e3530002 	cmp	r3, #2
  130df4:	9a000008 	bls	130e1c <igmp_start_timer+0x48>
  130df8:	eb0034d5 	bl	13e154 <rand>
  130dfc:	e1a02000 	mov	r2, r0
  130e00:	e55b3009 	ldrb	r3, [fp, #-9]
  130e04:	e1a01003 	mov	r1, r3
  130e08:	e1a00002 	mov	r0, r2
  130e0c:	eb001f95 	bl	138c68 <__aeabi_idivmod>
  130e10:	e1a03001 	mov	r3, r1
  130e14:	e6ff3073 	uxth	r3, r3
  130e18:	ea000000 	b	130e20 <igmp_start_timer+0x4c>
  130e1c:	e3a03001 	mov	r3, #1
  130e20:	e51b2008 	ldr	r2, [fp, #-8]
  130e24:	e1c230ba 	strh	r3, [r2, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
  130e28:	e51b3008 	ldr	r3, [fp, #-8]
  130e2c:	e1d330ba 	ldrh	r3, [r3, #10]
  130e30:	e3530000 	cmp	r3, #0
  130e34:	1a000002 	bne	130e44 <igmp_start_timer+0x70>
    group->timer = 1;
  130e38:	e51b3008 	ldr	r3, [fp, #-8]
  130e3c:	e3a02001 	mov	r2, #1
  130e40:	e1c320ba 	strh	r2, [r3, #10]
  }
}
  130e44:	e320f000 	nop	{0}
  130e48:	e24bd004 	sub	sp, fp, #4
  130e4c:	e8bd8800 	pop	{fp, pc}

00130e50 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
  130e50:	e92d4800 	push	{fp, lr}
  130e54:	e28db004 	add	fp, sp, #4
  130e58:	e24dd008 	sub	sp, sp, #8
  130e5c:	e50b0008 	str	r0, [fp, #-8]
  130e60:	e1a03001 	mov	r3, r1
  130e64:	e54b3009 	strb	r3, [fp, #-9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  130e68:	e51b3008 	ldr	r3, [fp, #-8]
  130e6c:	e5d33009 	ldrb	r3, [r3, #9]
  130e70:	e3530002 	cmp	r3, #2
  130e74:	0a00000d 	beq	130eb0 <igmp_delaying_member+0x60>
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130e78:	e51b3008 	ldr	r3, [fp, #-8]
  130e7c:	e5d33009 	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  130e80:	e3530001 	cmp	r3, #1
  130e84:	1a000010 	bne	130ecc <igmp_delaying_member+0x7c>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  130e88:	e51b3008 	ldr	r3, [fp, #-8]
  130e8c:	e1d330ba 	ldrh	r3, [r3, #10]
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130e90:	e3530000 	cmp	r3, #0
  130e94:	0a000005 	beq	130eb0 <igmp_delaying_member+0x60>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  130e98:	e55b3009 	ldrb	r3, [fp, #-9]
  130e9c:	e6ff2073 	uxth	r2, r3
  130ea0:	e51b3008 	ldr	r3, [fp, #-8]
  130ea4:	e1d330ba 	ldrh	r3, [r3, #10]
  130ea8:	e1520003 	cmp	r2, r3
  130eac:	2a000006 	bcs	130ecc <igmp_delaying_member+0x7c>
    igmp_start_timer(group, maxresp);
  130eb0:	e55b3009 	ldrb	r3, [fp, #-9]
  130eb4:	e1a01003 	mov	r1, r3
  130eb8:	e51b0008 	ldr	r0, [fp, #-8]
  130ebc:	ebffffc4 	bl	130dd4 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  130ec0:	e51b3008 	ldr	r3, [fp, #-8]
  130ec4:	e3a02001 	mov	r2, #1
  130ec8:	e5c32009 	strb	r2, [r3, #9]
  }
}
  130ecc:	e320f000 	nop	{0}
  130ed0:	e24bd004 	sub	sp, fp, #4
  130ed4:	e8bd8800 	pop	{fp, pc}

00130ed8 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
  130ed8:	e92d4800 	push	{fp, lr}
  130edc:	e28db004 	add	fp, sp, #4
  130ee0:	e24dd030 	sub	sp, sp, #48	; 0x30
  130ee4:	e50b0010 	str	r0, [fp, #-16]
  130ee8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  130eec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  130ef0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
  130ef4:	e3003494 	movw	r3, #1172	; 0x494
  130ef8:	e14b30b8 	strh	r3, [fp, #-8]
  ra[1] = 0x0000; /* Router shall examine packet */
  130efc:	e3a03000 	mov	r3, #0
  130f00:	e14b30b6 	strh	r3, [fp, #-6]
  IGMP_STATS_INC(igmp.xmit);
  130f04:	e30c3a48 	movw	r3, #51784	; 0xca48
  130f08:	e3403015 	movt	r3, #21
  130f0c:	e1d337b8 	ldrh	r3, [r3, #120]	; 0x78
  130f10:	e2833001 	add	r3, r3, #1
  130f14:	e6ff2073 	uxth	r2, r3
  130f18:	e30c3a48 	movw	r3, #51784	; 0xca48
  130f1c:	e3403015 	movt	r3, #21
  130f20:	e1c327b8 	strh	r2, [r3, #120]	; 0x78
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
  130f24:	e3a03004 	mov	r3, #4
  130f28:	e58d3010 	str	r3, [sp, #16]
  130f2c:	e24b3008 	sub	r3, fp, #8
  130f30:	e58d300c 	str	r3, [sp, #12]
  130f34:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130f38:	e58d3008 	str	r3, [sp, #8]
  130f3c:	e3a03002 	mov	r3, #2
  130f40:	e58d3004 	str	r3, [sp, #4]
  130f44:	e3a03000 	mov	r3, #0
  130f48:	e58d3000 	str	r3, [sp]
  130f4c:	e3a03001 	mov	r3, #1
  130f50:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  130f54:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130f58:	e51b0010 	ldr	r0, [fp, #-16]
  130f5c:	eb000371 	bl	131d28 <ip4_output_if_opt>
  130f60:	e1a03000 	mov	r3, r0
}
  130f64:	e1a00003 	mov	r0, r3
  130f68:	e24bd004 	sub	sp, fp, #4
  130f6c:	e8bd8800 	pop	{fp, pc}

00130f70 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
  130f70:	e92d4800 	push	{fp, lr}
  130f74:	e28db004 	add	fp, sp, #4
  130f78:	e24dd020 	sub	sp, sp, #32
  130f7c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  130f80:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  130f84:	e1a03002 	mov	r3, r2
  130f88:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct pbuf*     p    = NULL;
  130f8c:	e3a03000 	mov	r3, #0
  130f90:	e50b300c 	str	r3, [fp, #-12]
  struct igmp_msg* igmp = NULL;
  130f94:	e3a03000 	mov	r3, #0
  130f98:	e50b3010 	str	r3, [fp, #-16]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
  130f9c:	e30938d0 	movw	r3, #39120	; 0x98d0
  130fa0:	e3403014 	movt	r3, #20
  130fa4:	e5933000 	ldr	r3, [r3]
  130fa8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  ip4_addr_t*  dest = NULL;
  130fac:	e3a03000 	mov	r3, #0
  130fb0:	e50b3008 	str	r3, [fp, #-8]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
  130fb4:	e3a02000 	mov	r2, #0
  130fb8:	e3a01008 	mov	r1, #8
  130fbc:	e3a00000 	mov	r0, #0
  130fc0:	ebffa4a4 	bl	11a258 <pbuf_alloc>
  130fc4:	e50b000c 	str	r0, [fp, #-12]

  if (p) {
  130fc8:	e51b300c 	ldr	r3, [fp, #-12]
  130fcc:	e3530000 	cmp	r3, #0
  130fd0:	0a000049 	beq	1310fc <igmp_send+0x18c>
    igmp = (struct igmp_msg *)p->payload;
  130fd4:	e51b300c 	ldr	r3, [fp, #-12]
  130fd8:	e5933004 	ldr	r3, [r3, #4]
  130fdc:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
  130fe0:	e51b300c 	ldr	r3, [fp, #-12]
  130fe4:	e1d330ba 	ldrh	r3, [r3, #10]
  130fe8:	e3530007 	cmp	r3, #7
  130fec:	8a000006 	bhi	13100c <igmp_send+0x9c>
  130ff0:	e3090828 	movw	r0, #38952	; 0x9828
  130ff4:	e3400014 	movt	r0, #20
  130ff8:	ebff4845 	bl	103114 <rt_kprintf>
  130ffc:	e3001302 	movw	r1, #770	; 0x302
  131000:	e3090538 	movw	r0, #38200	; 0x9538
  131004:	e3400014 	movt	r0, #20
  131008:	ebff6829 	bl	10b0b4 <sys_arch_assert>
               (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
  13100c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  131010:	e2833004 	add	r3, r3, #4
  131014:	e5933000 	ldr	r3, [r3]
  131018:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (type == IGMP_V2_MEMB_REPORT) {
  13101c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  131020:	e3530016 	cmp	r3, #22
  131024:	1a00000a 	bne	131054 <igmp_send+0xe4>
      dest = &(group->group_address);
  131028:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13102c:	e2833004 	add	r3, r3, #4
  131030:	e50b3008 	str	r3, [fp, #-8]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  131034:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131038:	e5932004 	ldr	r2, [r3, #4]
  13103c:	e51b3010 	ldr	r3, [fp, #-16]
  131040:	e5832004 	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
  131044:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131048:	e3a02001 	mov	r2, #1
  13104c:	e5c32008 	strb	r2, [r3, #8]
  131050:	ea000009 	b	13107c <igmp_send+0x10c>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
  131054:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  131058:	e3530017 	cmp	r3, #23
  13105c:	1a000006 	bne	13107c <igmp_send+0x10c>
        dest = &allrouters;
  131060:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  131064:	e3403014 	movt	r3, #20
  131068:	e50b3008 	str	r3, [fp, #-8]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  13106c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131070:	e5932004 	ldr	r2, [r3, #4]
  131074:	e51b3010 	ldr	r3, [fp, #-16]
  131078:	e5832004 	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
  13107c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  131080:	e3530016 	cmp	r3, #22
  131084:	0a000002 	beq	131094 <igmp_send+0x124>
  131088:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  13108c:	e3530017 	cmp	r3, #23
  131090:	1a000016 	bne	1310f0 <igmp_send+0x180>
      igmp->igmp_msgtype  = type;
  131094:	e51b3010 	ldr	r3, [fp, #-16]
  131098:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  13109c:	e5c32000 	strb	r2, [r3]
      igmp->igmp_maxresp  = 0;
  1310a0:	e51b3010 	ldr	r3, [fp, #-16]
  1310a4:	e3a02000 	mov	r2, #0
  1310a8:	e5c32001 	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
  1310ac:	e51b3010 	ldr	r3, [fp, #-16]
  1310b0:	e3a02000 	mov	r2, #0
  1310b4:	e5c32002 	strb	r2, [r3, #2]
  1310b8:	e3a02000 	mov	r2, #0
  1310bc:	e5c32003 	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
  1310c0:	e3a01008 	mov	r1, #8
  1310c4:	e51b0010 	ldr	r0, [fp, #-16]
  1310c8:	ebff9e41 	bl	1189d4 <inet_chksum>
  1310cc:	e1a03000 	mov	r3, r0
  1310d0:	e1a02003 	mov	r2, r3
  1310d4:	e51b3010 	ldr	r3, [fp, #-16]
  1310d8:	e1c320b2 	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
  1310dc:	e24b1014 	sub	r1, fp, #20
  1310e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1310e4:	e51b2008 	ldr	r2, [fp, #-8]
  1310e8:	e51b000c 	ldr	r0, [fp, #-12]
  1310ec:	ebffff79 	bl	130ed8 <igmp_ip_output_if>
    }

    pbuf_free(p);
  1310f0:	e51b000c 	ldr	r0, [fp, #-12]
  1310f4:	ebffa75e 	bl	11ae74 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
  1310f8:	ea000007 	b	13111c <igmp_send+0x1ac>
    IGMP_STATS_INC(igmp.memerr);
  1310fc:	e30c3a48 	movw	r3, #51784	; 0xca48
  131100:	e3403015 	movt	r3, #21
  131104:	e1d338b2 	ldrh	r3, [r3, #130]	; 0x82
  131108:	e2833001 	add	r3, r3, #1
  13110c:	e6ff2073 	uxth	r2, r3
  131110:	e30c3a48 	movw	r3, #51784	; 0xca48
  131114:	e3403015 	movt	r3, #21
  131118:	e1c328b2 	strh	r2, [r3, #130]	; 0x82
}
  13111c:	e320f000 	nop	{0}
  131120:	e24bd004 	sub	sp, fp, #4
  131124:	e8bd8800 	pop	{fp, pc}

00131128 <ip4_set_default_multicast_netif>:
/**
 * @ingroup ip4
 * Set a default netif for IPv4 multicast. */
void
ip4_set_default_multicast_netif(struct netif* default_multicast_netif)
{
  131128:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13112c:	e28db000 	add	fp, sp, #0
  131130:	e24dd00c 	sub	sp, sp, #12
  131134:	e50b0008 	str	r0, [fp, #-8]
  ip4_default_multicast_netif = default_multicast_netif;
  131138:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  13113c:	e3403014 	movt	r3, #20
  131140:	e51b2008 	ldr	r2, [fp, #-8]
  131144:	e5832000 	str	r2, [r3]
}
  131148:	e320f000 	nop	{0}
  13114c:	e28bd000 	add	sp, fp, #0
  131150:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  131154:	e12fff1e 	bx	lr

00131158 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
  131158:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13115c:	e28db000 	add	fp, sp, #0
  131160:	e24dd014 	sub	sp, sp, #20
  131164:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
  131168:	e51b3010 	ldr	r3, [fp, #-16]
  13116c:	e5933000 	ldr	r3, [r3]
  131170:	e20330f0 	and	r3, r3, #240	; 0xf0
  131174:	e35300e0 	cmp	r3, #224	; 0xe0
  131178:	1a000008 	bne	1311a0 <ip4_route+0x48>
  13117c:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  131180:	e3403014 	movt	r3, #20
  131184:	e5933000 	ldr	r3, [r3]
  131188:	e3530000 	cmp	r3, #0
  13118c:	0a000003 	beq	1311a0 <ip4_route+0x48>
    return ip4_default_multicast_netif;
  131190:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  131194:	e3403014 	movt	r3, #20
  131198:	e5933000 	ldr	r3, [r3]
  13119c:	ea000091 	b	1313e8 <ip4_route+0x290>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  1311a0:	e30c3a3c 	movw	r3, #51772	; 0xca3c
  1311a4:	e3403015 	movt	r3, #21
  1311a8:	e5933000 	ldr	r3, [r3]
  1311ac:	e50b3008 	str	r3, [fp, #-8]
  1311b0:	ea000030 	b	131278 <ip4_route+0x120>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  1311b4:	e51b3008 	ldr	r3, [fp, #-8]
  1311b8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1311bc:	e2033001 	and	r3, r3, #1
  1311c0:	e6ef3073 	uxtb	r3, r3
  1311c4:	e3530000 	cmp	r3, #0
  1311c8:	0a000027 	beq	13126c <ip4_route+0x114>
  1311cc:	e51b3008 	ldr	r3, [fp, #-8]
  1311d0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1311d4:	e1a03123 	lsr	r3, r3, #2
  1311d8:	e2033001 	and	r3, r3, #1
  1311dc:	e6ef3073 	uxtb	r3, r3
  1311e0:	e3530000 	cmp	r3, #0
  1311e4:	0a000020 	beq	13126c <ip4_route+0x114>
  1311e8:	e51b3008 	ldr	r3, [fp, #-8]
  1311ec:	e2833004 	add	r3, r3, #4
  1311f0:	e5933000 	ldr	r3, [r3]
  1311f4:	e3530000 	cmp	r3, #0
  1311f8:	0a00001b 	beq	13126c <ip4_route+0x114>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
  1311fc:	e51b3010 	ldr	r3, [fp, #-16]
  131200:	e5932000 	ldr	r2, [r3]
  131204:	e51b3008 	ldr	r3, [fp, #-8]
  131208:	e2833004 	add	r3, r3, #4
  13120c:	e5933000 	ldr	r3, [r3]
  131210:	e0222003 	eor	r2, r2, r3
  131214:	e51b3008 	ldr	r3, [fp, #-8]
  131218:	e2833008 	add	r3, r3, #8
  13121c:	e5933000 	ldr	r3, [r3]
  131220:	e0033002 	and	r3, r3, r2
  131224:	e3530000 	cmp	r3, #0
  131228:	1a000001 	bne	131234 <ip4_route+0xdc>
        /* return netif on which to forward IP packet */
        return netif;
  13122c:	e51b3008 	ldr	r3, [fp, #-8]
  131230:	ea00006c 	b	1313e8 <ip4_route+0x290>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
  131234:	e51b3008 	ldr	r3, [fp, #-8]
  131238:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  13123c:	e2033002 	and	r3, r3, #2
  131240:	e3530000 	cmp	r3, #0
  131244:	1a000008 	bne	13126c <ip4_route+0x114>
  131248:	e51b3010 	ldr	r3, [fp, #-16]
  13124c:	e5932000 	ldr	r2, [r3]
  131250:	e51b3008 	ldr	r3, [fp, #-8]
  131254:	e283300c 	add	r3, r3, #12
  131258:	e5933000 	ldr	r3, [r3]
  13125c:	e1520003 	cmp	r2, r3
  131260:	1a000001 	bne	13126c <ip4_route+0x114>
        /* return netif on which to forward IP packet */
        return netif;
  131264:	e51b3008 	ldr	r3, [fp, #-8]
  131268:	ea00005e 	b	1313e8 <ip4_route+0x290>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  13126c:	e51b3008 	ldr	r3, [fp, #-8]
  131270:	e5933000 	ldr	r3, [r3]
  131274:	e50b3008 	str	r3, [fp, #-8]
  131278:	e51b3008 	ldr	r3, [fp, #-8]
  13127c:	e3530000 	cmp	r3, #0
  131280:	1affffcb 	bne	1311b4 <ip4_route+0x5c>
    }
  }

#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
  /* loopif is disabled, looopback traffic is passed through any netif */
  if (ip4_addr_isloopback(dest)) {
  131284:	e51b3010 	ldr	r3, [fp, #-16]
  131288:	e5933000 	ldr	r3, [r3]
  13128c:	e6ef3073 	uxtb	r3, r3
  131290:	e353007f 	cmp	r3, #127	; 0x7f
  131294:	1a000025 	bne	131330 <ip4_route+0x1d8>
    /* don't check for link on loopback traffic */
    if (netif_default != NULL && netif_is_up(netif_default)) {
  131298:	e30c3a40 	movw	r3, #51776	; 0xca40
  13129c:	e3403015 	movt	r3, #21
  1312a0:	e5933000 	ldr	r3, [r3]
  1312a4:	e3530000 	cmp	r3, #0
  1312a8:	0a00000b 	beq	1312dc <ip4_route+0x184>
  1312ac:	e30c3a40 	movw	r3, #51776	; 0xca40
  1312b0:	e3403015 	movt	r3, #21
  1312b4:	e5933000 	ldr	r3, [r3]
  1312b8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1312bc:	e2033001 	and	r3, r3, #1
  1312c0:	e6ef3073 	uxtb	r3, r3
  1312c4:	e3530000 	cmp	r3, #0
  1312c8:	0a000003 	beq	1312dc <ip4_route+0x184>
      return netif_default;
  1312cc:	e30c3a40 	movw	r3, #51776	; 0xca40
  1312d0:	e3403015 	movt	r3, #21
  1312d4:	e5933000 	ldr	r3, [r3]
  1312d8:	ea000042 	b	1313e8 <ip4_route+0x290>
    }
    /* default netif is not up, just use any netif for loopback traffic */
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  1312dc:	e30c3a3c 	movw	r3, #51772	; 0xca3c
  1312e0:	e3403015 	movt	r3, #21
  1312e4:	e5933000 	ldr	r3, [r3]
  1312e8:	e50b3008 	str	r3, [fp, #-8]
  1312ec:	ea00000a 	b	13131c <ip4_route+0x1c4>
      if (netif_is_up(netif)) {
  1312f0:	e51b3008 	ldr	r3, [fp, #-8]
  1312f4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1312f8:	e2033001 	and	r3, r3, #1
  1312fc:	e6ef3073 	uxtb	r3, r3
  131300:	e3530000 	cmp	r3, #0
  131304:	0a000001 	beq	131310 <ip4_route+0x1b8>
        return netif;
  131308:	e51b3008 	ldr	r3, [fp, #-8]
  13130c:	ea000035 	b	1313e8 <ip4_route+0x290>
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  131310:	e51b3008 	ldr	r3, [fp, #-8]
  131314:	e5933000 	ldr	r3, [r3]
  131318:	e50b3008 	str	r3, [fp, #-8]
  13131c:	e51b3008 	ldr	r3, [fp, #-8]
  131320:	e3530000 	cmp	r3, #0
  131324:	1afffff1 	bne	1312f0 <ip4_route+0x198>
      }
    }
    return NULL;
  131328:	e3a03000 	mov	r3, #0
  13132c:	ea00002d 	b	1313e8 <ip4_route+0x290>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  131330:	e30c3a40 	movw	r3, #51776	; 0xca40
  131334:	e3403015 	movt	r3, #21
  131338:	e5933000 	ldr	r3, [r3]
  13133c:	e3530000 	cmp	r3, #0
  131340:	0a000014 	beq	131398 <ip4_route+0x240>
  131344:	e30c3a40 	movw	r3, #51776	; 0xca40
  131348:	e3403015 	movt	r3, #21
  13134c:	e5933000 	ldr	r3, [r3]
  131350:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131354:	e2033001 	and	r3, r3, #1
  131358:	e3530000 	cmp	r3, #0
  13135c:	0a00000d 	beq	131398 <ip4_route+0x240>
  131360:	e30c3a40 	movw	r3, #51776	; 0xca40
  131364:	e3403015 	movt	r3, #21
  131368:	e5933000 	ldr	r3, [r3]
  13136c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131370:	e2033004 	and	r3, r3, #4
  131374:	e3530000 	cmp	r3, #0
  131378:	0a000006 	beq	131398 <ip4_route+0x240>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
  13137c:	e30c3a40 	movw	r3, #51776	; 0xca40
  131380:	e3403015 	movt	r3, #21
  131384:	e5933000 	ldr	r3, [r3]
  131388:	e2833004 	add	r3, r3, #4
  13138c:	e5933000 	ldr	r3, [r3]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  131390:	e3530000 	cmp	r3, #0
  131394:	1a000010 	bne	1313dc <ip4_route+0x284>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  131398:	e30c3a48 	movw	r3, #51784	; 0xca48
  13139c:	e3403015 	movt	r3, #21
  1313a0:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  1313a4:	e2833001 	add	r3, r3, #1
  1313a8:	e6ff2073 	uxth	r2, r3
  1313ac:	e30c3a48 	movw	r3, #51784	; 0xca48
  1313b0:	e3403015 	movt	r3, #21
  1313b4:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
  1313b8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1313bc:	e3403015 	movt	r3, #21
  1313c0:	e5933148 	ldr	r3, [r3, #328]	; 0x148
  1313c4:	e2832001 	add	r2, r3, #1
  1313c8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1313cc:	e3403015 	movt	r3, #21
  1313d0:	e5832148 	str	r2, [r3, #328]	; 0x148
    return NULL;
  1313d4:	e3a03000 	mov	r3, #0
  1313d8:	ea000002 	b	1313e8 <ip4_route+0x290>
  }

  return netif_default;
  1313dc:	e30c3a40 	movw	r3, #51776	; 0xca40
  1313e0:	e3403015 	movt	r3, #21
  1313e4:	e5933000 	ldr	r3, [r3]
}
  1313e8:	e1a00003 	mov	r0, r3
  1313ec:	e28bd000 	add	sp, fp, #0
  1313f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1313f4:	e12fff1e 	bx	lr

001313f8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
  1313f8:	e92d4800 	push	{fp, lr}
  1313fc:	e28db004 	add	fp, sp, #4
  131400:	e24dd028 	sub	sp, sp, #40	; 0x28
  131404:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  131408:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
  13140c:	e3a03001 	mov	r3, #1
  131410:	e50b3010 	str	r3, [fp, #-16]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
  131414:	e30c3a48 	movw	r3, #51784	; 0xca48
  131418:	e3403015 	movt	r3, #21
  13141c:	e1d334ba 	ldrh	r3, [r3, #74]	; 0x4a
  131420:	e2833001 	add	r3, r3, #1
  131424:	e6ff2073 	uxth	r2, r3
  131428:	e30c3a48 	movw	r3, #51784	; 0xca48
  13142c:	e3403015 	movt	r3, #21
  131430:	e1c324ba 	strh	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);
  131434:	e30c3a48 	movw	r3, #51784	; 0xca48
  131438:	e3403015 	movt	r3, #21
  13143c:	e5933168 	ldr	r3, [r3, #360]	; 0x168
  131440:	e2832001 	add	r2, r3, #1
  131444:	e30c3a48 	movw	r3, #51784	; 0xca48
  131448:	e3403015 	movt	r3, #21
  13144c:	e5832168 	str	r2, [r3, #360]	; 0x168

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  131450:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131454:	e5933004 	ldr	r3, [r3, #4]
  131458:	e50b3008 	str	r3, [fp, #-8]
  if (IPH_V(iphdr) != 4) {
  13145c:	e51b3008 	ldr	r3, [fp, #-8]
  131460:	e5d33000 	ldrb	r3, [r3]
  131464:	e1a03223 	lsr	r3, r3, #4
  131468:	e6ef3073 	uxtb	r3, r3
  13146c:	e3530004 	cmp	r3, #4
  131470:	0a00001a 	beq	1314e0 <ip4_input+0xe8>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
  131474:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131478:	ebffa67d 	bl	11ae74 <pbuf_free>
    IP_STATS_INC(ip.err);
  13147c:	e30c3a48 	movw	r3, #51784	; 0xca48
  131480:	e3403015 	movt	r3, #21
  131484:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  131488:	e2833001 	add	r3, r3, #1
  13148c:	e6ff2073 	uxth	r2, r3
  131490:	e30c3a48 	movw	r3, #51784	; 0xca48
  131494:	e3403015 	movt	r3, #21
  131498:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
  13149c:	e30c3a48 	movw	r3, #51784	; 0xca48
  1314a0:	e3403015 	movt	r3, #21
  1314a4:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1314a8:	e2833001 	add	r3, r3, #1
  1314ac:	e6ff2073 	uxth	r2, r3
  1314b0:	e30c3a48 	movw	r3, #51784	; 0xca48
  1314b4:	e3403015 	movt	r3, #21
  1314b8:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
  1314bc:	e30c3a48 	movw	r3, #51784	; 0xca48
  1314c0:	e3403015 	movt	r3, #21
  1314c4:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  1314c8:	e2832001 	add	r2, r3, #1
  1314cc:	e30c3a48 	movw	r3, #51784	; 0xca48
  1314d0:	e3403015 	movt	r3, #21
  1314d4:	e583212c 	str	r2, [r3, #300]	; 0x12c
    return ERR_OK;
  1314d8:	e3a03000 	mov	r3, #0
  1314dc:	ea0001f2 	b	131cac <ip4_input+0x8b4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  1314e0:	e51b3008 	ldr	r3, [fp, #-8]
  1314e4:	e5d33000 	ldrb	r3, [r3]
  1314e8:	e6ff3073 	uxth	r3, r3
  1314ec:	e203300f 	and	r3, r3, #15
  1314f0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  1314f4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1314f8:	e1a03103 	lsl	r3, r3, #2
  1314fc:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
  131500:	e51b3008 	ldr	r3, [fp, #-8]
  131504:	e1d330b2 	ldrh	r3, [r3, #2]
  131508:	e6ff3073 	uxth	r3, r3
  13150c:	e1a00003 	mov	r0, r3
  131510:	ebff9420 	bl	116598 <lwip_htons>
  131514:	e1a03000 	mov	r3, r0
  131518:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
  13151c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131520:	e1d330b8 	ldrh	r3, [r3, #8]
  131524:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  131528:	e1520003 	cmp	r2, r3
  13152c:	2a000003 	bcs	131540 <ip4_input+0x148>
    pbuf_realloc(p, iphdr_len);
  131530:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  131534:	e1a01003 	mov	r1, r3
  131538:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13153c:	ebffa503 	bl	11a950 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
  131540:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131544:	e1d330ba 	ldrh	r3, [r3, #10]
  131548:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  13154c:	e1520003 	cmp	r2, r3
  131550:	8a000007 	bhi	131574 <ip4_input+0x17c>
  131554:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131558:	e1d330b8 	ldrh	r3, [r3, #8]
  13155c:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  131560:	e1520003 	cmp	r2, r3
  131564:	8a000002 	bhi	131574 <ip4_input+0x17c>
  131568:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  13156c:	e3530013 	cmp	r3, #19
  131570:	8a00001a 	bhi	1315e0 <ip4_input+0x1e8>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
  131574:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131578:	ebffa63d 	bl	11ae74 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
  13157c:	e30c3a48 	movw	r3, #51784	; 0xca48
  131580:	e3403015 	movt	r3, #21
  131584:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
  131588:	e2833001 	add	r3, r3, #1
  13158c:	e6ff2073 	uxth	r2, r3
  131590:	e30c3a48 	movw	r3, #51784	; 0xca48
  131594:	e3403015 	movt	r3, #21
  131598:	e1c325b2 	strh	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
  13159c:	e30c3a48 	movw	r3, #51784	; 0xca48
  1315a0:	e3403015 	movt	r3, #21
  1315a4:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1315a8:	e2833001 	add	r3, r3, #1
  1315ac:	e6ff2073 	uxth	r2, r3
  1315b0:	e30c3a48 	movw	r3, #51784	; 0xca48
  1315b4:	e3403015 	movt	r3, #21
  1315b8:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
  1315bc:	e30c3a48 	movw	r3, #51784	; 0xca48
  1315c0:	e3403015 	movt	r3, #21
  1315c4:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  1315c8:	e2832001 	add	r2, r3, #1
  1315cc:	e30c3a48 	movw	r3, #51784	; 0xca48
  1315d0:	e3403015 	movt	r3, #21
  1315d4:	e5832138 	str	r2, [r3, #312]	; 0x138
    return ERR_OK;
  1315d8:	e3a03000 	mov	r3, #0
  1315dc:	ea0001b2 	b	131cac <ip4_input+0x8b4>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  1315e0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1315e4:	e1a01003 	mov	r1, r3
  1315e8:	e51b0008 	ldr	r0, [fp, #-8]
  1315ec:	ebff9cf8 	bl	1189d4 <inet_chksum>
  1315f0:	e1a03000 	mov	r3, r0
  1315f4:	e3530000 	cmp	r3, #0
  1315f8:	0a00001a 	beq	131668 <ip4_input+0x270>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
  1315fc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131600:	ebffa61b 	bl	11ae74 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
  131604:	e30c3a48 	movw	r3, #51784	; 0xca48
  131608:	e3403015 	movt	r3, #21
  13160c:	e1d335b0 	ldrh	r3, [r3, #80]	; 0x50
  131610:	e2833001 	add	r3, r3, #1
  131614:	e6ff2073 	uxth	r2, r3
  131618:	e30c3a48 	movw	r3, #51784	; 0xca48
  13161c:	e3403015 	movt	r3, #21
  131620:	e1c325b0 	strh	r2, [r3, #80]	; 0x50
      IP_STATS_INC(ip.drop);
  131624:	e30c3a48 	movw	r3, #51784	; 0xca48
  131628:	e3403015 	movt	r3, #21
  13162c:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131630:	e2833001 	add	r3, r3, #1
  131634:	e6ff2073 	uxth	r2, r3
  131638:	e30c3a48 	movw	r3, #51784	; 0xca48
  13163c:	e3403015 	movt	r3, #21
  131640:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
  131644:	e30c3a48 	movw	r3, #51784	; 0xca48
  131648:	e3403015 	movt	r3, #21
  13164c:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  131650:	e2832001 	add	r2, r3, #1
  131654:	e30c3a48 	movw	r3, #51784	; 0xca48
  131658:	e3403015 	movt	r3, #21
  13165c:	e583212c 	str	r2, [r3, #300]	; 0x12c
      return ERR_OK;
  131660:	e3a03000 	mov	r3, #0
  131664:	ea000190 	b	131cac <ip4_input+0x8b4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
  131668:	e51b3008 	ldr	r3, [fp, #-8]
  13166c:	e5932010 	ldr	r2, [r3, #16]
  131670:	e30f3610 	movw	r3, #62992	; 0xf610
  131674:	e3403014 	movt	r3, #20
  131678:	e5832014 	str	r2, [r3, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
  13167c:	e51b3008 	ldr	r3, [fp, #-8]
  131680:	e593200c 	ldr	r2, [r3, #12]
  131684:	e30f3610 	movw	r3, #62992	; 0xf610
  131688:	e3403014 	movt	r3, #20
  13168c:	e5832010 	str	r2, [r3, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  131690:	e30f3610 	movw	r3, #62992	; 0xf610
  131694:	e3403014 	movt	r3, #20
  131698:	e5933014 	ldr	r3, [r3, #20]
  13169c:	e20330f0 	and	r3, r3, #240	; 0xf0
  1316a0:	e35300e0 	cmp	r3, #224	; 0xe0
  1316a4:	1a000020 	bne	13172c <ip4_input+0x334>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  1316a8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1316ac:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1316b0:	e2033020 	and	r3, r3, #32
  1316b4:	e3530000 	cmp	r3, #0
  1316b8:	0a000018 	beq	131720 <ip4_input+0x328>
  1316bc:	e59f15f4 	ldr	r1, [pc, #1524]	; 131cb8 <ip4_input+0x8c0>
  1316c0:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1316c4:	ebfffa77 	bl	1300a8 <igmp_lookfor_group>
  1316c8:	e1a03000 	mov	r3, r0
  1316cc:	e3530000 	cmp	r3, #0
  1316d0:	0a000012 	beq	131720 <ip4_input+0x328>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
  1316d4:	e3a030e0 	mov	r3, #224	; 0xe0
  1316d8:	e3403100 	movt	r3, #256	; 0x100
  1316dc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  1316e0:	e30f3610 	movw	r3, #62992	; 0xf610
  1316e4:	e3403014 	movt	r3, #20
  1316e8:	e5932014 	ldr	r2, [r3, #20]
  1316ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1316f0:	e1520003 	cmp	r2, r3
  1316f4:	1a000006 	bne	131714 <ip4_input+0x31c>
          ip4_addr_isany(ip4_current_src_addr())) {
  1316f8:	e30f3610 	movw	r3, #62992	; 0xf610
  1316fc:	e3403014 	movt	r3, #20
  131700:	e5933010 	ldr	r3, [r3, #16]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  131704:	e3530000 	cmp	r3, #0
  131708:	1a000001 	bne	131714 <ip4_input+0x31c>
        check_ip_src = 0;
  13170c:	e3a03000 	mov	r3, #0
  131710:	e50b3010 	str	r3, [fp, #-16]
      }
      netif = inp;
  131714:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131718:	e50b300c 	str	r3, [fp, #-12]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  13171c:	ea000040 	b	131824 <ip4_input+0x42c>
    } else {
      netif = NULL;
  131720:	e3a03000 	mov	r3, #0
  131724:	e50b300c 	str	r3, [fp, #-12]
  131728:	ea00003d 	b	131824 <ip4_input+0x42c>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
  13172c:	e3a03001 	mov	r3, #1
  131730:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    netif = inp;
  131734:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131738:	e50b300c 	str	r3, [fp, #-12]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
  13173c:	e51b300c 	ldr	r3, [fp, #-12]
  131740:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131744:	e2033001 	and	r3, r3, #1
  131748:	e6ef3073 	uxtb	r3, r3
  13174c:	e3530000 	cmp	r3, #0
  131750:	0a00001c 	beq	1317c8 <ip4_input+0x3d0>
  131754:	e51b300c 	ldr	r3, [fp, #-12]
  131758:	e2833004 	add	r3, r3, #4
  13175c:	e5933000 	ldr	r3, [r3]
  131760:	e3530000 	cmp	r3, #0
  131764:	0a000017 	beq	1317c8 <ip4_input+0x3d0>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  131768:	e30f3610 	movw	r3, #62992	; 0xf610
  13176c:	e3403014 	movt	r3, #20
  131770:	e5932014 	ldr	r2, [r3, #20]
  131774:	e51b300c 	ldr	r3, [fp, #-12]
  131778:	e2833004 	add	r3, r3, #4
  13177c:	e5933000 	ldr	r3, [r3]
  131780:	e1520003 	cmp	r2, r3
  131784:	0a000026 	beq	131824 <ip4_input+0x42c>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
  131788:	e30f3610 	movw	r3, #62992	; 0xf610
  13178c:	e3403014 	movt	r3, #20
  131790:	e5933014 	ldr	r3, [r3, #20]
  131794:	e51b100c 	ldr	r1, [fp, #-12]
  131798:	e1a00003 	mov	r0, r3
  13179c:	eb00034c 	bl	1324d4 <ip4_addr_isbroadcast_u32>
  1317a0:	e1a03000 	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  1317a4:	e3530000 	cmp	r3, #0
  1317a8:	1a00001d 	bne	131824 <ip4_input+0x42c>
#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
            || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
  1317ac:	e30f3610 	movw	r3, #62992	; 0xf610
  1317b0:	e3403014 	movt	r3, #20
  1317b4:	e5932014 	ldr	r2, [r3, #20]
  1317b8:	e3a0307f 	mov	r3, #127	; 0x7f
  1317bc:	e3403100 	movt	r3, #256	; 0x100
  1317c0:	e1520003 	cmp	r2, r3
  1317c4:	0a000016 	beq	131824 <ip4_input+0x42c>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
  1317c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1317cc:	e3530000 	cmp	r3, #0
  1317d0:	0a000006 	beq	1317f0 <ip4_input+0x3f8>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
          netif = NULL;
          break;
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
  1317d4:	e3a03000 	mov	r3, #0
  1317d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        netif = netif_list;
  1317dc:	e30c3a3c 	movw	r3, #51772	; 0xca3c
  1317e0:	e3403015 	movt	r3, #21
  1317e4:	e5933000 	ldr	r3, [r3]
  1317e8:	e50b300c 	str	r3, [fp, #-12]
  1317ec:	ea000002 	b	1317fc <ip4_input+0x404>
      } else {
        netif = netif->next;
  1317f0:	e51b300c 	ldr	r3, [fp, #-12]
  1317f4:	e5933000 	ldr	r3, [r3]
  1317f8:	e50b300c 	str	r3, [fp, #-12]
      }
      if (netif == inp) {
  1317fc:	e51b200c 	ldr	r2, [fp, #-12]
  131800:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131804:	e1520003 	cmp	r2, r3
  131808:	1a000002 	bne	131818 <ip4_input+0x420>
        netif = netif->next;
  13180c:	e51b300c 	ldr	r3, [fp, #-12]
  131810:	e5933000 	ldr	r3, [r3]
  131814:	e50b300c 	str	r3, [fp, #-12]
      }
    } while (netif != NULL);
  131818:	e51b300c 	ldr	r3, [fp, #-12]
  13181c:	e3530000 	cmp	r3, #0
  131820:	1affffc5 	bne	13173c <ip4_input+0x344>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
  131824:	e51b300c 	ldr	r3, [fp, #-12]
  131828:	e3530000 	cmp	r3, #0
  13182c:	1a000010 	bne	131874 <ip4_input+0x47c>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
  131830:	e51b3008 	ldr	r3, [fp, #-8]
  131834:	e5d33009 	ldrb	r3, [r3, #9]
  131838:	e3530011 	cmp	r3, #17
  13183c:	1a00000c 	bne	131874 <ip4_input+0x47c>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
  131840:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131844:	e51b2008 	ldr	r2, [fp, #-8]
  131848:	e0823003 	add	r3, r2, r3
  13184c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
  131850:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131854:	e1d330b2 	ldrh	r3, [r3, #2]
  131858:	e6ff3073 	uxth	r3, r3
  13185c:	e3530b11 	cmp	r3, #17408	; 0x4400
  131860:	1a000003 	bne	131874 <ip4_input+0x47c>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
  131864:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131868:	e50b300c 	str	r3, [fp, #-12]
        check_ip_src = 0;
  13186c:	e3a03000 	mov	r3, #0
  131870:	e50b3010 	str	r3, [fp, #-16]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
  131874:	e51b3010 	ldr	r3, [fp, #-16]
  131878:	e3530000 	cmp	r3, #0
  13187c:	0a00002d 	beq	131938 <ip4_input+0x540>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
  131880:	e30f3610 	movw	r3, #62992	; 0xf610
  131884:	e3403014 	movt	r3, #20
  131888:	e5933010 	ldr	r3, [r3, #16]
  13188c:	e3530000 	cmp	r3, #0
  131890:	0a000028 	beq	131938 <ip4_input+0x540>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  131894:	e30f3610 	movw	r3, #62992	; 0xf610
  131898:	e3403014 	movt	r3, #20
  13189c:	e5933010 	ldr	r3, [r3, #16]
  1318a0:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1318a4:	e1a00003 	mov	r0, r3
  1318a8:	eb000309 	bl	1324d4 <ip4_addr_isbroadcast_u32>
  1318ac:	e1a03000 	mov	r3, r0
  1318b0:	e3530000 	cmp	r3, #0
  1318b4:	1a000005 	bne	1318d0 <ip4_input+0x4d8>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
  1318b8:	e30f3610 	movw	r3, #62992	; 0xf610
  1318bc:	e3403014 	movt	r3, #20
  1318c0:	e5933010 	ldr	r3, [r3, #16]
  1318c4:	e20330f0 	and	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  1318c8:	e35300e0 	cmp	r3, #224	; 0xe0
  1318cc:	1a000019 	bne	131938 <ip4_input+0x540>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
  1318d0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1318d4:	ebffa566 	bl	11ae74 <pbuf_free>
      IP_STATS_INC(ip.drop);
  1318d8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1318dc:	e3403015 	movt	r3, #21
  1318e0:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1318e4:	e2833001 	add	r3, r3, #1
  1318e8:	e6ff2073 	uxth	r2, r3
  1318ec:	e30c3a48 	movw	r3, #51784	; 0xca48
  1318f0:	e3403015 	movt	r3, #21
  1318f4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  1318f8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1318fc:	e3403015 	movt	r3, #21
  131900:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  131904:	e2832001 	add	r2, r3, #1
  131908:	e30c3a48 	movw	r3, #51784	; 0xca48
  13190c:	e3403015 	movt	r3, #21
  131910:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  131914:	e30c3a48 	movw	r3, #51784	; 0xca48
  131918:	e3403015 	movt	r3, #21
  13191c:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  131920:	e2832001 	add	r2, r3, #1
  131924:	e30c3a48 	movw	r3, #51784	; 0xca48
  131928:	e3403015 	movt	r3, #21
  13192c:	e5832138 	str	r2, [r3, #312]	; 0x138
      return ERR_OK;
  131930:	e3a03000 	mov	r3, #0
  131934:	ea0000dc 	b	131cac <ip4_input+0x8b4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
  131938:	e51b300c 	ldr	r3, [fp, #-12]
  13193c:	e3530000 	cmp	r3, #0
  131940:	1a000019 	bne	1319ac <ip4_input+0x5b4>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
  131944:	e30c3a48 	movw	r3, #51784	; 0xca48
  131948:	e3403015 	movt	r3, #21
  13194c:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131950:	e2833001 	add	r3, r3, #1
  131954:	e6ff2073 	uxth	r2, r3
  131958:	e30c3a48 	movw	r3, #51784	; 0xca48
  13195c:	e3403015 	movt	r3, #21
  131960:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  131964:	e30c3a48 	movw	r3, #51784	; 0xca48
  131968:	e3403015 	movt	r3, #21
  13196c:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  131970:	e2832001 	add	r2, r3, #1
  131974:	e30c3a48 	movw	r3, #51784	; 0xca48
  131978:	e3403015 	movt	r3, #21
  13197c:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  131980:	e30c3a48 	movw	r3, #51784	; 0xca48
  131984:	e3403015 	movt	r3, #21
  131988:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  13198c:	e2832001 	add	r2, r3, #1
  131990:	e30c3a48 	movw	r3, #51784	; 0xca48
  131994:	e3403015 	movt	r3, #21
  131998:	e5832138 	str	r2, [r3, #312]	; 0x138
    }
    pbuf_free(p);
  13199c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1319a0:	ebffa533 	bl	11ae74 <pbuf_free>
    return ERR_OK;
  1319a4:	e3a03000 	mov	r3, #0
  1319a8:	ea0000bf 	b	131cac <ip4_input+0x8b4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  1319ac:	e51b3008 	ldr	r3, [fp, #-8]
  1319b0:	e1d330b6 	ldrh	r3, [r3, #6]
  1319b4:	e6ff3073 	uxth	r3, r3
  1319b8:	e1a02003 	mov	r2, r3
  1319bc:	e30f3f3f 	movw	r3, #65343	; 0xff3f
  1319c0:	e0033002 	and	r3, r3, r2
  1319c4:	e3530000 	cmp	r3, #0
  1319c8:	0a00000a 	beq	1319f8 <ip4_input+0x600>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
  1319cc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1319d0:	eb000778 	bl	1337b8 <ip4_reass>
  1319d4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    /* packet not fully reassembled yet? */
    if (p == NULL) {
  1319d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1319dc:	e3530000 	cmp	r3, #0
  1319e0:	1a000001 	bne	1319ec <ip4_input+0x5f4>
      return ERR_OK;
  1319e4:	e3a03000 	mov	r3, #0
  1319e8:	ea0000af 	b	131cac <ip4_input+0x8b4>
    }
    iphdr = (struct ip_hdr *)p->payload;
  1319ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1319f0:	e5933004 	ldr	r3, [r3, #4]
  1319f4:	e50b3008 	str	r3, [fp, #-8]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  1319f8:	e30f3610 	movw	r3, #62992	; 0xf610
  1319fc:	e3403014 	movt	r3, #20
  131a00:	e51b200c 	ldr	r2, [fp, #-12]
  131a04:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = inp;
  131a08:	e30f3610 	movw	r3, #62992	; 0xf610
  131a0c:	e3403014 	movt	r3, #20
  131a10:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  131a14:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = iphdr;
  131a18:	e30f3610 	movw	r3, #62992	; 0xf610
  131a1c:	e3403014 	movt	r3, #20
  131a20:	e51b2008 	ldr	r2, [fp, #-8]
  131a24:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
  131a28:	e51b3008 	ldr	r3, [fp, #-8]
  131a2c:	e5d33000 	ldrb	r3, [r3]
  131a30:	e6ff3073 	uxth	r3, r3
  131a34:	e203300f 	and	r3, r3, #15
  131a38:	e6ff3073 	uxth	r3, r3
  131a3c:	e1a03103 	lsl	r3, r3, #2
  131a40:	e6ff2073 	uxth	r2, r3
  131a44:	e30f3610 	movw	r3, #62992	; 0xf610
  131a48:	e3403014 	movt	r3, #20
  131a4c:	e1c320bc 	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
  131a50:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131a54:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131a58:	ebffa9cf 	bl	11c19c <raw_input>
  131a5c:	e1a03000 	mov	r3, r0
  131a60:	e3530000 	cmp	r3, #0
  131a64:	1a000076 	bne	131c44 <ip4_input+0x84c>
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
  131a68:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131a6c:	e2633000 	rsb	r3, r3, #0
  131a70:	e6ff3073 	uxth	r3, r3
  131a74:	e6bf3073 	sxth	r3, r3
  131a78:	e1a01003 	mov	r1, r3
  131a7c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131a80:	ebffa4dd 	bl	11adfc <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
  131a84:	e51b3008 	ldr	r3, [fp, #-8]
  131a88:	e5d33009 	ldrb	r3, [r3, #9]
  131a8c:	e2433001 	sub	r3, r3, #1
  131a90:	e3530010 	cmp	r3, #16
  131a94:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  131a98:	ea000036 	b	131b78 <ip4_input+0x780>
  131a9c:	00131b38 	.word	0x00131b38
  131aa0:	00131b64 	.word	0x00131b64
  131aa4:	00131b78 	.word	0x00131b78
  131aa8:	00131b78 	.word	0x00131b78
  131aac:	00131b78 	.word	0x00131b78
  131ab0:	00131b0c 	.word	0x00131b0c
  131ab4:	00131b78 	.word	0x00131b78
  131ab8:	00131b78 	.word	0x00131b78
  131abc:	00131b78 	.word	0x00131b78
  131ac0:	00131b78 	.word	0x00131b78
  131ac4:	00131b78 	.word	0x00131b78
  131ac8:	00131b78 	.word	0x00131b78
  131acc:	00131b78 	.word	0x00131b78
  131ad0:	00131b78 	.word	0x00131b78
  131ad4:	00131b78 	.word	0x00131b78
  131ad8:	00131b78 	.word	0x00131b78
  131adc:	00131ae0 	.word	0x00131ae0
#if LWIP_UDP
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
  131ae0:	e30c3a48 	movw	r3, #51784	; 0xca48
  131ae4:	e3403015 	movt	r3, #21
  131ae8:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131aec:	e2832001 	add	r2, r3, #1
  131af0:	e30c3a48 	movw	r3, #51784	; 0xca48
  131af4:	e3403015 	movt	r3, #21
  131af8:	e583213c 	str	r2, [r3, #316]	; 0x13c
      udp_input(p, inp);
  131afc:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131b00:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131b04:	ebffd80c 	bl	127b3c <udp_input>
      break;
  131b08:	ea00004e 	b	131c48 <ip4_input+0x850>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
  131b0c:	e30c3a48 	movw	r3, #51784	; 0xca48
  131b10:	e3403015 	movt	r3, #21
  131b14:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131b18:	e2832001 	add	r2, r3, #1
  131b1c:	e30c3a48 	movw	r3, #51784	; 0xca48
  131b20:	e3403015 	movt	r3, #21
  131b24:	e583213c 	str	r2, [r3, #316]	; 0x13c
      tcp_input(p, inp);
  131b28:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131b2c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131b30:	ebffb9c8 	bl	120258 <tcp_input>
      break;
  131b34:	ea000043 	b	131c48 <ip4_input+0x850>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
  131b38:	e30c3a48 	movw	r3, #51784	; 0xca48
  131b3c:	e3403015 	movt	r3, #21
  131b40:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131b44:	e2832001 	add	r2, r3, #1
  131b48:	e30c3a48 	movw	r3, #51784	; 0xca48
  131b4c:	e3403015 	movt	r3, #21
  131b50:	e583213c 	str	r2, [r3, #316]	; 0x13c
      icmp_input(p, inp);
  131b54:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131b58:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131b5c:	ebfff665 	bl	12f4f8 <icmp_input>
      break;
  131b60:	ea000038 	b	131c48 <ip4_input+0x850>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
    case IP_PROTO_IGMP:
      igmp_input(p, inp, ip4_current_dest_addr());
  131b64:	e59f214c 	ldr	r2, [pc, #332]	; 131cb8 <ip4_input+0x8c0>
  131b68:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131b6c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131b70:	ebfff9ed 	bl	13032c <igmp_input>
      break;
  131b74:	ea000033 	b	131c48 <ip4_input+0x850>
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  131b78:	e30f3610 	movw	r3, #62992	; 0xf610
  131b7c:	e3403014 	movt	r3, #20
  131b80:	e5933014 	ldr	r3, [r3, #20]
  131b84:	e51b100c 	ldr	r1, [fp, #-12]
  131b88:	e1a00003 	mov	r0, r3
  131b8c:	eb000250 	bl	1324d4 <ip4_addr_isbroadcast_u32>
  131b90:	e1a03000 	mov	r3, r0
  131b94:	e3530000 	cmp	r3, #0
  131b98:	1a00000f 	bne	131bdc <ip4_input+0x7e4>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
  131b9c:	e30f3610 	movw	r3, #62992	; 0xf610
  131ba0:	e3403014 	movt	r3, #20
  131ba4:	e5933014 	ldr	r3, [r3, #20]
  131ba8:	e20330f0 	and	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  131bac:	e35300e0 	cmp	r3, #224	; 0xe0
  131bb0:	0a000009 	beq	131bdc <ip4_input+0x7e4>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
  131bb4:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  131bb8:	e1a01003 	mov	r1, r3
  131bbc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131bc0:	ebffa49c 	bl	11ae38 <pbuf_header_force>
        p->payload = iphdr;
  131bc4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131bc8:	e51b2008 	ldr	r2, [fp, #-8]
  131bcc:	e5832004 	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  131bd0:	e3a01002 	mov	r1, #2
  131bd4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131bd8:	ebfff81c 	bl	12fc50 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
  131bdc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131be0:	ebffa4a3 	bl	11ae74 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
  131be4:	e30c3a48 	movw	r3, #51784	; 0xca48
  131be8:	e3403015 	movt	r3, #21
  131bec:	e1d335b8 	ldrh	r3, [r3, #88]	; 0x58
  131bf0:	e2833001 	add	r3, r3, #1
  131bf4:	e6ff2073 	uxth	r2, r3
  131bf8:	e30c3a48 	movw	r3, #51784	; 0xca48
  131bfc:	e3403015 	movt	r3, #21
  131c00:	e1c325b8 	strh	r2, [r3, #88]	; 0x58
      IP_STATS_INC(ip.drop);
  131c04:	e30c3a48 	movw	r3, #51784	; 0xca48
  131c08:	e3403015 	movt	r3, #21
  131c0c:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131c10:	e2833001 	add	r3, r3, #1
  131c14:	e6ff2073 	uxth	r2, r3
  131c18:	e30c3a48 	movw	r3, #51784	; 0xca48
  131c1c:	e3403015 	movt	r3, #21
  131c20:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
  131c24:	e30c3a48 	movw	r3, #51784	; 0xca48
  131c28:	e3403015 	movt	r3, #21
  131c2c:	e5933134 	ldr	r3, [r3, #308]	; 0x134
  131c30:	e2832001 	add	r2, r3, #1
  131c34:	e30c3a48 	movw	r3, #51784	; 0xca48
  131c38:	e3403015 	movt	r3, #21
  131c3c:	e5832134 	str	r2, [r3, #308]	; 0x134
  131c40:	ea000000 	b	131c48 <ip4_input+0x850>
    }
  }
  131c44:	e320f000 	nop	{0}

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
  131c48:	e30f3610 	movw	r3, #62992	; 0xf610
  131c4c:	e3403014 	movt	r3, #20
  131c50:	e3a02000 	mov	r2, #0
  131c54:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = NULL;
  131c58:	e30f3610 	movw	r3, #62992	; 0xf610
  131c5c:	e3403014 	movt	r3, #20
  131c60:	e3a02000 	mov	r2, #0
  131c64:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
  131c68:	e30f3610 	movw	r3, #62992	; 0xf610
  131c6c:	e3403014 	movt	r3, #20
  131c70:	e3a02000 	mov	r2, #0
  131c74:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
  131c78:	e30f3610 	movw	r3, #62992	; 0xf610
  131c7c:	e3403014 	movt	r3, #20
  131c80:	e3a02000 	mov	r2, #0
  131c84:	e1c320bc 	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  131c88:	e30f3610 	movw	r3, #62992	; 0xf610
  131c8c:	e3403014 	movt	r3, #20
  131c90:	e3a02000 	mov	r2, #0
  131c94:	e5832010 	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
  131c98:	e30f3610 	movw	r3, #62992	; 0xf610
  131c9c:	e3403014 	movt	r3, #20
  131ca0:	e3a02000 	mov	r2, #0
  131ca4:	e5832014 	str	r2, [r3, #20]

  return ERR_OK;
  131ca8:	e3a03000 	mov	r3, #0
}
  131cac:	e1a00003 	mov	r0, r3
  131cb0:	e24bd004 	sub	sp, fp, #4
  131cb4:	e8bd8800 	pop	{fp, pc}
  131cb8:	0014f624 	.word	0x0014f624

00131cbc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  131cbc:	e92d4800 	push	{fp, lr}
  131cc0:	e28db004 	add	fp, sp, #4
  131cc4:	e24dd028 	sub	sp, sp, #40	; 0x28
  131cc8:	e50b0008 	str	r0, [fp, #-8]
  131ccc:	e50b100c 	str	r1, [fp, #-12]
  131cd0:	e50b2010 	str	r2, [fp, #-16]
  131cd4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  131cd8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  131cdc:	e3a03000 	mov	r3, #0
  131ce0:	e58d3010 	str	r3, [sp, #16]
  131ce4:	e3a03000 	mov	r3, #0
  131ce8:	e58d300c 	str	r3, [sp, #12]
  131cec:	e59b300c 	ldr	r3, [fp, #12]
  131cf0:	e58d3008 	str	r3, [sp, #8]
  131cf4:	e5db3008 	ldrb	r3, [fp, #8]
  131cf8:	e58d3004 	str	r3, [sp, #4]
  131cfc:	e5db3004 	ldrb	r3, [fp, #4]
  131d00:	e58d3000 	str	r3, [sp]
  131d04:	e1a03002 	mov	r3, r2
  131d08:	e51b2010 	ldr	r2, [fp, #-16]
  131d0c:	e51b100c 	ldr	r1, [fp, #-12]
  131d10:	e51b0008 	ldr	r0, [fp, #-8]
  131d14:	eb000003 	bl	131d28 <ip4_output_if_opt>
  131d18:	e1a03000 	mov	r3, r0
}
  131d1c:	e1a00003 	mov	r0, r3
  131d20:	e24bd004 	sub	sp, fp, #4
  131d24:	e8bd8800 	pop	{fp, pc}

00131d28 <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  131d28:	e92d4800 	push	{fp, lr}
  131d2c:	e28db004 	add	fp, sp, #4
  131d30:	e24dd030 	sub	sp, sp, #48	; 0x30
  131d34:	e50b0010 	str	r0, [fp, #-16]
  131d38:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  131d3c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  131d40:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
  131d44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d48:	e50b3008 	str	r3, [fp, #-8]
  if (dest != LWIP_IP_HDRINCL) {
  131d4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  131d50:	e3530000 	cmp	r3, #0
  131d54:	0a000009 	beq	131d80 <ip4_output_if_opt+0x58>
    if (ip4_addr_isany(src)) {
  131d58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d5c:	e3530000 	cmp	r3, #0
  131d60:	0a000003 	beq	131d74 <ip4_output_if_opt+0x4c>
  131d64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d68:	e5933000 	ldr	r3, [r3]
  131d6c:	e3530000 	cmp	r3, #0
  131d70:	1a000002 	bne	131d80 <ip4_output_if_opt+0x58>
      src_used = netif_ip4_addr(netif);
  131d74:	e59b300c 	ldr	r3, [fp, #12]
  131d78:	e2833004 	add	r3, r3, #4
  131d7c:	e50b3008 	str	r3, [fp, #-8]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
  131d80:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  131d84:	e1db31b4 	ldrh	r3, [fp, #20]
  131d88:	e58d3010 	str	r3, [sp, #16]
  131d8c:	e59b3010 	ldr	r3, [fp, #16]
  131d90:	e58d300c 	str	r3, [sp, #12]
  131d94:	e59b300c 	ldr	r3, [fp, #12]
  131d98:	e58d3008 	str	r3, [sp, #8]
  131d9c:	e5db3008 	ldrb	r3, [fp, #8]
  131da0:	e58d3004 	str	r3, [sp, #4]
  131da4:	e5db3004 	ldrb	r3, [fp, #4]
  131da8:	e58d3000 	str	r3, [sp]
  131dac:	e1a03002 	mov	r3, r2
  131db0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  131db4:	e51b1008 	ldr	r1, [fp, #-8]
  131db8:	e51b0010 	ldr	r0, [fp, #-16]
  131dbc:	eb00001e 	bl	131e3c <ip4_output_if_opt_src>
  131dc0:	e1a03000 	mov	r3, r0
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
  131dc4:	e1a00003 	mov	r0, r3
  131dc8:	e24bd004 	sub	sp, fp, #4
  131dcc:	e8bd8800 	pop	{fp, pc}

00131dd0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  131dd0:	e92d4800 	push	{fp, lr}
  131dd4:	e28db004 	add	fp, sp, #4
  131dd8:	e24dd028 	sub	sp, sp, #40	; 0x28
  131ddc:	e50b0008 	str	r0, [fp, #-8]
  131de0:	e50b100c 	str	r1, [fp, #-12]
  131de4:	e50b2010 	str	r2, [fp, #-16]
  131de8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  131dec:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  131df0:	e3a03000 	mov	r3, #0
  131df4:	e58d3010 	str	r3, [sp, #16]
  131df8:	e3a03000 	mov	r3, #0
  131dfc:	e58d300c 	str	r3, [sp, #12]
  131e00:	e59b300c 	ldr	r3, [fp, #12]
  131e04:	e58d3008 	str	r3, [sp, #8]
  131e08:	e5db3008 	ldrb	r3, [fp, #8]
  131e0c:	e58d3004 	str	r3, [sp, #4]
  131e10:	e5db3004 	ldrb	r3, [fp, #4]
  131e14:	e58d3000 	str	r3, [sp]
  131e18:	e1a03002 	mov	r3, r2
  131e1c:	e51b2010 	ldr	r2, [fp, #-16]
  131e20:	e51b100c 	ldr	r1, [fp, #-12]
  131e24:	e51b0008 	ldr	r0, [fp, #-8]
  131e28:	eb000003 	bl	131e3c <ip4_output_if_opt_src>
  131e2c:	e1a03000 	mov	r3, r0
}
  131e30:	e1a00003 	mov	r0, r3
  131e34:	e24bd004 	sub	sp, fp, #4
  131e38:	e8bd8800 	pop	{fp, pc}

00131e3c <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  131e3c:	e92d4800 	push	{fp, lr}
  131e40:	e28db004 	add	fp, sp, #4
  131e44:	e24dd028 	sub	sp, sp, #40	; 0x28
  131e48:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  131e4c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  131e50:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  131e54:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
  131e58:	e3a03000 	mov	r3, #0
  131e5c:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  131e60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131e64:	e1d330be 	ldrh	r3, [r3, #14]
  131e68:	e3530001 	cmp	r3, #1
  131e6c:	0a000006 	beq	131e8c <ip4_output_if_opt_src+0x50>
  131e70:	e3090864 	movw	r0, #39012	; 0x9864
  131e74:	e3400014 	movt	r0, #20
  131e78:	ebff44a5 	bl	103114 <rt_kprintf>
  131e7c:	e3001333 	movw	r1, #819	; 0x333
  131e80:	e3090870 	movw	r0, #39024	; 0x9870
  131e84:	e3400014 	movt	r0, #20
  131e88:	ebff6489 	bl	10b0b4 <sys_arch_assert>

  MIB2_STATS_INC(mib2.ipoutrequests);
  131e8c:	e30c3a48 	movw	r3, #51784	; 0xca48
  131e90:	e3403015 	movt	r3, #21
  131e94:	e5933140 	ldr	r3, [r3, #320]	; 0x140
  131e98:	e2832001 	add	r2, r3, #1
  131e9c:	e30c3a48 	movw	r3, #51784	; 0xca48
  131ea0:	e3403015 	movt	r3, #21
  131ea4:	e5832140 	str	r2, [r3, #320]	; 0x140

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
  131ea8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131eac:	e3530000 	cmp	r3, #0
  131eb0:	0a000112 	beq	132300 <ip4_output_if_opt_src+0x4c4>
    u16_t ip_hlen = IP_HLEN;
  131eb4:	e3a03014 	mov	r3, #20
  131eb8:	e14b30ba 	strh	r3, [fp, #-10]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
  131ebc:	e3a03000 	mov	r3, #0
  131ec0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (optlen != 0) {
  131ec4:	e1db31b4 	ldrh	r3, [fp, #20]
  131ec8:	e3530000 	cmp	r3, #0
  131ecc:	0a00004b 	beq	132000 <ip4_output_if_opt_src+0x1c4>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      /* round up to a multiple of 4 */
      optlen_aligned = ((optlen + 3) & ~3);
  131ed0:	e1db31b4 	ldrh	r3, [fp, #20]
  131ed4:	e2833003 	add	r3, r3, #3
  131ed8:	e6ff3073 	uxth	r3, r3
  131edc:	e3c33003 	bic	r3, r3, #3
  131ee0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      ip_hlen += optlen_aligned;
  131ee4:	e15b20ba 	ldrh	r2, [fp, #-10]
  131ee8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131eec:	e0823003 	add	r3, r2, r3
  131ef0:	e14b30ba 	strh	r3, [fp, #-10]
      /* First write in the IP options */
      if (pbuf_header(p, optlen_aligned)) {
  131ef4:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  131ef8:	e1a01003 	mov	r1, r3
  131efc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  131f00:	ebffa3bd 	bl	11adfc <pbuf_header>
  131f04:	e1a03000 	mov	r3, r0
  131f08:	e3530000 	cmp	r3, #0
  131f0c:	0a000010 	beq	131f54 <ip4_output_if_opt_src+0x118>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
  131f10:	e30c3a48 	movw	r3, #51784	; 0xca48
  131f14:	e3403015 	movt	r3, #21
  131f18:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  131f1c:	e2833001 	add	r3, r3, #1
  131f20:	e6ff2073 	uxth	r2, r3
  131f24:	e30c3a48 	movw	r3, #51784	; 0xca48
  131f28:	e3403015 	movt	r3, #21
  131f2c:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
        MIB2_STATS_INC(mib2.ipoutdiscards);
  131f30:	e30c3a48 	movw	r3, #51784	; 0xca48
  131f34:	e3403015 	movt	r3, #21
  131f38:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  131f3c:	e2832001 	add	r2, r3, #1
  131f40:	e30c3a48 	movw	r3, #51784	; 0xca48
  131f44:	e3403015 	movt	r3, #21
  131f48:	e5832144 	str	r2, [r3, #324]	; 0x144
        return ERR_BUF;
  131f4c:	e3e03001 	mvn	r3, #1
  131f50:	ea00012a 	b	132400 <ip4_output_if_opt_src+0x5c4>
      }
      MEMCPY(p->payload, ip_options, optlen);
  131f54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131f58:	e5933004 	ldr	r3, [r3, #4]
  131f5c:	e1db21b4 	ldrh	r2, [fp, #20]
  131f60:	e59b1010 	ldr	r1, [fp, #16]
  131f64:	e1a00003 	mov	r0, r3
  131f68:	eb003b7b 	bl	140d5c <memcpy>
      if (optlen < optlen_aligned) {
  131f6c:	e1db21b4 	ldrh	r2, [fp, #20]
  131f70:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131f74:	e1520003 	cmp	r2, r3
  131f78:	2a000009 	bcs	131fa4 <ip4_output_if_opt_src+0x168>
        /* zero the remaining bytes */
        memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
  131f7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131f80:	e5932004 	ldr	r2, [r3, #4]
  131f84:	e1db31b4 	ldrh	r3, [fp, #20]
  131f88:	e0820003 	add	r0, r2, r3
  131f8c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  131f90:	e1db31b4 	ldrh	r3, [fp, #20]
  131f94:	e0423003 	sub	r3, r2, r3
  131f98:	e1a02003 	mov	r2, r3
  131f9c:	e3a01000 	mov	r1, #0
  131fa0:	eb003ca5 	bl	14123c <memset>
      }
#if CHECKSUM_GEN_IP_INLINE
      for (i = 0; i < optlen_aligned/2; i++) {
  131fa4:	e3a03000 	mov	r3, #0
  131fa8:	e50b3010 	str	r3, [fp, #-16]
  131fac:	ea00000c 	b	131fe4 <ip4_output_if_opt_src+0x1a8>
        chk_sum += ((u16_t*)p->payload)[i];
  131fb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131fb4:	e5932004 	ldr	r2, [r3, #4]
  131fb8:	e51b3010 	ldr	r3, [fp, #-16]
  131fbc:	e1a03083 	lsl	r3, r3, #1
  131fc0:	e0823003 	add	r3, r2, r3
  131fc4:	e1d330b0 	ldrh	r3, [r3]
  131fc8:	e1a02003 	mov	r2, r3
  131fcc:	e51b3008 	ldr	r3, [fp, #-8]
  131fd0:	e0833002 	add	r3, r3, r2
  131fd4:	e50b3008 	str	r3, [fp, #-8]
      for (i = 0; i < optlen_aligned/2; i++) {
  131fd8:	e51b3010 	ldr	r3, [fp, #-16]
  131fdc:	e2833001 	add	r3, r3, #1
  131fe0:	e50b3010 	str	r3, [fp, #-16]
  131fe4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131fe8:	e1a030a3 	lsr	r3, r3, #1
  131fec:	e6ff3073 	uxth	r3, r3
  131ff0:	e1a02003 	mov	r2, r3
  131ff4:	e51b3010 	ldr	r3, [fp, #-16]
  131ff8:	e1530002 	cmp	r3, r2
  131ffc:	baffffeb 	blt	131fb0 <ip4_output_if_opt_src+0x174>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  132000:	e3a01014 	mov	r1, #20
  132004:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132008:	ebffa37b 	bl	11adfc <pbuf_header>
  13200c:	e1a03000 	mov	r3, r0
  132010:	e3530000 	cmp	r3, #0
  132014:	0a000010 	beq	13205c <ip4_output_if_opt_src+0x220>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
  132018:	e30c3a48 	movw	r3, #51784	; 0xca48
  13201c:	e3403015 	movt	r3, #21
  132020:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  132024:	e2833001 	add	r3, r3, #1
  132028:	e6ff2073 	uxth	r2, r3
  13202c:	e30c3a48 	movw	r3, #51784	; 0xca48
  132030:	e3403015 	movt	r3, #21
  132034:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
  132038:	e30c3a48 	movw	r3, #51784	; 0xca48
  13203c:	e3403015 	movt	r3, #21
  132040:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  132044:	e2832001 	add	r2, r3, #1
  132048:	e30c3a48 	movw	r3, #51784	; 0xca48
  13204c:	e3403015 	movt	r3, #21
  132050:	e5832144 	str	r2, [r3, #324]	; 0x144
      return ERR_BUF;
  132054:	e3e03001 	mvn	r3, #1
  132058:	ea0000e8 	b	132400 <ip4_output_if_opt_src+0x5c4>
    }

    iphdr = (struct ip_hdr *)p->payload;
  13205c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132060:	e5933004 	ldr	r3, [r3, #4]
  132064:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
  132068:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13206c:	e1d330ba 	ldrh	r3, [r3, #10]
  132070:	e3530013 	cmp	r3, #19
  132074:	8a000006 	bhi	132094 <ip4_output_if_opt_src+0x258>
  132078:	e30908a0 	movw	r0, #39072	; 0x98a0
  13207c:	e3400014 	movt	r0, #20
  132080:	ebff4423 	bl	103114 <rt_kprintf>
  132084:	e3001361 	movw	r1, #865	; 0x361
  132088:	e3090870 	movw	r0, #39024	; 0x9870
  13208c:	e3400014 	movt	r0, #20
  132090:	ebff6407 	bl	10b0b4 <sys_arch_assert>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  132094:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132098:	e55b2029 	ldrb	r2, [fp, #-41]	; 0xffffffd7
  13209c:	e5c32008 	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
  1320a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1320a4:	e5db2008 	ldrb	r2, [fp, #8]
  1320a8:	e5c32009 	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
  1320ac:	e5db2008 	ldrb	r2, [fp, #8]
  1320b0:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  1320b4:	e1a03403 	lsl	r3, r3, #8
  1320b8:	e1823003 	orr	r3, r2, r3
  1320bc:	e1a03403 	lsl	r3, r3, #8
  1320c0:	e6ff2073 	uxth	r2, r3
  1320c4:	e5db1008 	ldrb	r1, [fp, #8]
  1320c8:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  1320cc:	e1a03403 	lsl	r3, r3, #8
  1320d0:	e1813003 	orr	r3, r1, r3
  1320d4:	e1a03423 	lsr	r3, r3, #8
  1320d8:	e6ef3073 	uxtb	r3, r3
  1320dc:	e1823003 	orr	r3, r2, r3
  1320e0:	e51b2008 	ldr	r2, [fp, #-8]
  1320e4:	e0823003 	add	r3, r2, r3
  1320e8:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
  1320ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1320f0:	e5932000 	ldr	r2, [r3]
  1320f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1320f8:	e5832010 	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
  1320fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132100:	e5933010 	ldr	r3, [r3, #16]
  132104:	e6ff3073 	uxth	r3, r3
  132108:	e51b2008 	ldr	r2, [fp, #-8]
  13210c:	e0823003 	add	r3, r2, r3
  132110:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
  132114:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132118:	e5933010 	ldr	r3, [r3, #16]
  13211c:	e1a03823 	lsr	r3, r3, #16
  132120:	e51b2008 	ldr	r2, [fp, #-8]
  132124:	e0823003 	add	r3, r2, r3
  132128:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  13212c:	e15b30ba 	ldrh	r3, [fp, #-10]
  132130:	e1a03123 	lsr	r3, r3, #2
  132134:	e6ff3073 	uxth	r3, r3
  132138:	e6ef3073 	uxtb	r3, r3
  13213c:	e3833040 	orr	r3, r3, #64	; 0x40
  132140:	e6ef2073 	uxtb	r2, r3
  132144:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132148:	e5c32000 	strb	r2, [r3]
    IPH_TOS_SET(iphdr, tos);
  13214c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132150:	e5db2004 	ldrb	r2, [fp, #4]
  132154:	e5c32001 	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
  132158:	e5db2004 	ldrb	r2, [fp, #4]
  13215c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132160:	e5d33000 	ldrb	r3, [r3]
  132164:	e1a03403 	lsl	r3, r3, #8
  132168:	e1823003 	orr	r3, r2, r3
  13216c:	e1a03403 	lsl	r3, r3, #8
  132170:	e6ff2073 	uxth	r2, r3
  132174:	e5db1004 	ldrb	r1, [fp, #4]
  132178:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13217c:	e5d33000 	ldrb	r3, [r3]
  132180:	e1a03403 	lsl	r3, r3, #8
  132184:	e1813003 	orr	r3, r1, r3
  132188:	e1a03423 	lsr	r3, r3, #8
  13218c:	e6ef3073 	uxtb	r3, r3
  132190:	e1823003 	orr	r3, r2, r3
  132194:	e51b2008 	ldr	r2, [fp, #-8]
  132198:	e0823003 	add	r3, r2, r3
  13219c:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
  1321a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1321a4:	e1d330b8 	ldrh	r3, [r3, #8]
  1321a8:	e1a00003 	mov	r0, r3
  1321ac:	ebff90f9 	bl	116598 <lwip_htons>
  1321b0:	e1a03000 	mov	r3, r0
  1321b4:	e1a02003 	mov	r2, r3
  1321b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1321bc:	e1c320b2 	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
  1321c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1321c4:	e1d330b2 	ldrh	r3, [r3, #2]
  1321c8:	e6ff3073 	uxth	r3, r3
  1321cc:	e1a02003 	mov	r2, r3
  1321d0:	e51b3008 	ldr	r3, [fp, #-8]
  1321d4:	e0833002 	add	r3, r3, r2
  1321d8:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  1321dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1321e0:	e3a02000 	mov	r2, #0
  1321e4:	e5c32006 	strb	r2, [r3, #6]
  1321e8:	e3a02000 	mov	r2, #0
  1321ec:	e5c32007 	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
  1321f0:	e30e3bf4 	movw	r3, #60404	; 0xebf4
  1321f4:	e3403014 	movt	r3, #20
  1321f8:	e1d330b0 	ldrh	r3, [r3]
  1321fc:	e1a00003 	mov	r0, r3
  132200:	ebff90e4 	bl	116598 <lwip_htons>
  132204:	e1a03000 	mov	r3, r0
  132208:	e1a02003 	mov	r2, r3
  13220c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132210:	e1c320b4 	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
  132214:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132218:	e1d330b4 	ldrh	r3, [r3, #4]
  13221c:	e6ff3073 	uxth	r3, r3
  132220:	e1a02003 	mov	r2, r3
  132224:	e51b3008 	ldr	r3, [fp, #-8]
  132228:	e0833002 	add	r3, r3, r2
  13222c:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  132230:	e30e3bf4 	movw	r3, #60404	; 0xebf4
  132234:	e3403014 	movt	r3, #20
  132238:	e1d330b0 	ldrh	r3, [r3]
  13223c:	e2833001 	add	r3, r3, #1
  132240:	e6ff2073 	uxth	r2, r3
  132244:	e30e3bf4 	movw	r3, #60404	; 0xebf4
  132248:	e3403014 	movt	r3, #20
  13224c:	e1c320b0 	strh	r2, [r3]

    if (src == NULL) {
  132250:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132254:	e3530000 	cmp	r3, #0
  132258:	1a000005 	bne	132274 <ip4_output_if_opt_src+0x438>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
  13225c:	e30938d0 	movw	r3, #39120	; 0x98d0
  132260:	e3403014 	movt	r3, #20
  132264:	e5932000 	ldr	r2, [r3]
  132268:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13226c:	e583200c 	str	r2, [r3, #12]
  132270:	ea000003 	b	132284 <ip4_output_if_opt_src+0x448>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
  132274:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132278:	e5932000 	ldr	r2, [r3]
  13227c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132280:	e583200c 	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  132284:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132288:	e593300c 	ldr	r3, [r3, #12]
  13228c:	e6ff3073 	uxth	r3, r3
  132290:	e51b2008 	ldr	r2, [fp, #-8]
  132294:	e0823003 	add	r3, r2, r3
  132298:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  13229c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322a0:	e593300c 	ldr	r3, [r3, #12]
  1322a4:	e1a03823 	lsr	r3, r3, #16
  1322a8:	e51b2008 	ldr	r2, [fp, #-8]
  1322ac:	e0823003 	add	r3, r2, r3
  1322b0:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  1322b4:	e51b3008 	ldr	r3, [fp, #-8]
  1322b8:	e1a02823 	lsr	r2, r3, #16
  1322bc:	e51b3008 	ldr	r3, [fp, #-8]
  1322c0:	e6ff3073 	uxth	r3, r3
  1322c4:	e0823003 	add	r3, r2, r3
  1322c8:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + chk_sum;
  1322cc:	e51b3008 	ldr	r3, [fp, #-8]
  1322d0:	e1a03823 	lsr	r3, r3, #16
  1322d4:	e51b2008 	ldr	r2, [fp, #-8]
  1322d8:	e0823003 	add	r3, r2, r3
  1322dc:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = ~chk_sum;
  1322e0:	e51b3008 	ldr	r3, [fp, #-8]
  1322e4:	e1e03003 	mvn	r3, r3
  1322e8:	e50b3008 	str	r3, [fp, #-8]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
  1322ec:	e51b3008 	ldr	r3, [fp, #-8]
  1322f0:	e6ff2073 	uxth	r2, r3
  1322f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322f8:	e1c320ba 	strh	r2, [r3, #10]
  1322fc:	ea000007 	b	132320 <ip4_output_if_opt_src+0x4e4>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
  132300:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132304:	e5933004 	ldr	r3, [r3, #4]
  132308:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ip4_addr_copy(dest_addr, iphdr->dest);
  13230c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132310:	e5933010 	ldr	r3, [r3, #16]
  132314:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    dest = &dest_addr;
  132318:	e24b301c 	sub	r3, fp, #28
  13231c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  }

  IP_STATS_INC(ip.xmit);
  132320:	e30c3a48 	movw	r3, #51784	; 0xca48
  132324:	e3403015 	movt	r3, #21
  132328:	e1d334b8 	ldrh	r3, [r3, #72]	; 0x48
  13232c:	e2833001 	add	r3, r3, #1
  132330:	e6ff2073 	uxth	r2, r3
  132334:	e30c3a48 	movw	r3, #51784	; 0xca48
  132338:	e3403015 	movt	r3, #21
  13233c:	e1c324b8 	strh	r2, [r3, #72]	; 0x48

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
  132340:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132344:	e5932000 	ldr	r2, [r3]
  132348:	e59b300c 	ldr	r3, [fp, #12]
  13234c:	e2833004 	add	r3, r3, #4
  132350:	e5933000 	ldr	r3, [r3]
  132354:	e1520003 	cmp	r2, r3
  132358:	0a000004 	beq	132370 <ip4_output_if_opt_src+0x534>
#if !LWIP_HAVE_LOOPIF
      || ip4_addr_isloopback(dest)
  13235c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132360:	e5933000 	ldr	r3, [r3]
  132364:	e6ef3073 	uxtb	r3, r3
  132368:	e353007f 	cmp	r3, #127	; 0x7f
  13236c:	1a000004 	bne	132384 <ip4_output_if_opt_src+0x548>
#endif /* !LWIP_HAVE_LOOPIF */
      ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
  132370:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  132374:	e59b000c 	ldr	r0, [fp, #12]
  132378:	ebff9e75 	bl	119d54 <netif_loop_output>
  13237c:	e1a03000 	mov	r3, r0
  132380:	ea00001e 	b	132400 <ip4_output_if_opt_src+0x5c4>
  }
#if LWIP_MULTICAST_TX_OPTIONS
  if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
  132384:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132388:	e5d3300d 	ldrb	r3, [r3, #13]
  13238c:	e2033004 	and	r3, r3, #4
  132390:	e3530000 	cmp	r3, #0
  132394:	0a000002 	beq	1323a4 <ip4_output_if_opt_src+0x568>
    netif_loop_output(netif, p);
  132398:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  13239c:	e59b000c 	ldr	r0, [fp, #12]
  1323a0:	ebff9e6b 	bl	119d54 <netif_loop_output>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  1323a4:	e59b300c 	ldr	r3, [fp, #12]
  1323a8:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  1323ac:	e3530000 	cmp	r3, #0
  1323b0:	0a00000b 	beq	1323e4 <ip4_output_if_opt_src+0x5a8>
  1323b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1323b8:	e1d320b8 	ldrh	r2, [r3, #8]
  1323bc:	e59b300c 	ldr	r3, [fp, #12]
  1323c0:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  1323c4:	e1520003 	cmp	r2, r3
  1323c8:	9a000005 	bls	1323e4 <ip4_output_if_opt_src+0x5a8>
    return ip4_frag(p, netif, dest);
  1323cc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1323d0:	e59b100c 	ldr	r1, [fp, #12]
  1323d4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1323d8:	eb00068e 	bl	133e18 <ip4_frag>
  1323dc:	e1a03000 	mov	r3, r0
  1323e0:	ea000006 	b	132400 <ip4_output_if_opt_src+0x5c4>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
  1323e4:	e59b300c 	ldr	r3, [fp, #12]
  1323e8:	e5933014 	ldr	r3, [r3, #20]
  1323ec:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1323f0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1323f4:	e59b000c 	ldr	r0, [fp, #12]
  1323f8:	e12fff33 	blx	r3
  1323fc:	e1a03000 	mov	r3, r0
}
  132400:	e1a00003 	mov	r0, r3
  132404:	e24bd004 	sub	sp, fp, #4
  132408:	e8bd8800 	pop	{fp, pc}

0013240c <ip4_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip4_output(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  13240c:	e92d4800 	push	{fp, lr}
  132410:	e28db004 	add	fp, sp, #4
  132414:	e24dd028 	sub	sp, sp, #40	; 0x28
  132418:	e50b0010 	str	r0, [fp, #-16]
  13241c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  132420:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  132424:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netif *netif;

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  132428:	e51b3010 	ldr	r3, [fp, #-16]
  13242c:	e1d330be 	ldrh	r3, [r3, #14]
  132430:	e3530001 	cmp	r3, #1
  132434:	0a000006 	beq	132454 <ip4_output+0x48>
  132438:	e3090864 	movw	r0, #39012	; 0x9864
  13243c:	e3400014 	movt	r0, #20
  132440:	ebff4333 	bl	103114 <rt_kprintf>
  132444:	e30013db 	movw	r1, #987	; 0x3db
  132448:	e3090870 	movw	r0, #39024	; 0x9870
  13244c:	e3400014 	movt	r0, #20
  132450:	ebff6317 	bl	10b0b4 <sys_arch_assert>

  if ((netif = ip4_route_src(dest, src)) == NULL) {
  132454:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132458:	ebfffb3e 	bl	131158 <ip4_route>
  13245c:	e50b0008 	str	r0, [fp, #-8]
  132460:	e51b3008 	ldr	r3, [fp, #-8]
  132464:	e3530000 	cmp	r3, #0
  132468:	1a000009 	bne	132494 <ip4_output+0x88>
    LWIP_DEBUGF(IP_DEBUG, ("ip4_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  13246c:	e30c3a48 	movw	r3, #51784	; 0xca48
  132470:	e3403015 	movt	r3, #21
  132474:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  132478:	e2833001 	add	r3, r3, #1
  13247c:	e6ff2073 	uxth	r2, r3
  132480:	e30c3a48 	movw	r3, #51784	; 0xca48
  132484:	e3403015 	movt	r3, #21
  132488:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    return ERR_RTE;
  13248c:	e3e03003 	mvn	r3, #3
  132490:	ea00000c 	b	1324c8 <ip4_output+0xbc>
  }

  return ip4_output_if(p, src, dest, ttl, tos, proto, netif);
  132494:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  132498:	e51b3008 	ldr	r3, [fp, #-8]
  13249c:	e58d3008 	str	r3, [sp, #8]
  1324a0:	e5db3008 	ldrb	r3, [fp, #8]
  1324a4:	e58d3004 	str	r3, [sp, #4]
  1324a8:	e5db3004 	ldrb	r3, [fp, #4]
  1324ac:	e58d3000 	str	r3, [sp]
  1324b0:	e1a03002 	mov	r3, r2
  1324b4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1324b8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1324bc:	e51b0010 	ldr	r0, [fp, #-16]
  1324c0:	ebfffdfd 	bl	131cbc <ip4_output_if>
  1324c4:	e1a03000 	mov	r3, r0
}
  1324c8:	e1a00003 	mov	r0, r3
  1324cc:	e24bd004 	sub	sp, fp, #4
  1324d0:	e8bd8800 	pop	{fp, pc}

001324d4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
  1324d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1324d8:	e28db000 	add	fp, sp, #0
  1324dc:	e24dd014 	sub	sp, sp, #20
  1324e0:	e50b0010 	str	r0, [fp, #-16]
  1324e4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
  1324e8:	e51b3010 	ldr	r3, [fp, #-16]
  1324ec:	e50b3008 	str	r3, [fp, #-8]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  1324f0:	e51b3010 	ldr	r3, [fp, #-16]
  1324f4:	e3730001 	cmn	r3, #1
  1324f8:	0a000002 	beq	132508 <ip4_addr_isbroadcast_u32+0x34>
  1324fc:	e51b3010 	ldr	r3, [fp, #-16]
  132500:	e3530000 	cmp	r3, #0
  132504:	1a000001 	bne	132510 <ip4_addr_isbroadcast_u32+0x3c>
      (addr == IPADDR_ANY)) {
    return 1;
  132508:	e3a03001 	mov	r3, #1
  13250c:	ea000028 	b	1325b4 <ip4_addr_isbroadcast_u32+0xe0>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  132510:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132514:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  132518:	e2033002 	and	r3, r3, #2
  13251c:	e3530000 	cmp	r3, #0
  132520:	1a000001 	bne	13252c <ip4_addr_isbroadcast_u32+0x58>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  132524:	e3a03000 	mov	r3, #0
  132528:	ea000021 	b	1325b4 <ip4_addr_isbroadcast_u32+0xe0>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
  13252c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132530:	e2833004 	add	r3, r3, #4
  132534:	e5933000 	ldr	r3, [r3]
  132538:	e51b2010 	ldr	r2, [fp, #-16]
  13253c:	e1520003 	cmp	r2, r3
  132540:	1a000001 	bne	13254c <ip4_addr_isbroadcast_u32+0x78>
    return 0;
  132544:	e3a03000 	mov	r3, #0
  132548:	ea000019 	b	1325b4 <ip4_addr_isbroadcast_u32+0xe0>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
  13254c:	e51b2008 	ldr	r2, [fp, #-8]
  132550:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132554:	e2833004 	add	r3, r3, #4
  132558:	e5933000 	ldr	r3, [r3]
  13255c:	e0222003 	eor	r2, r2, r3
  132560:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132564:	e2833008 	add	r3, r3, #8
  132568:	e5933000 	ldr	r3, [r3]
  13256c:	e0033002 	and	r3, r3, r2
  132570:	e3530000 	cmp	r3, #0
  132574:	1a00000d 	bne	1325b0 <ip4_addr_isbroadcast_u32+0xdc>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  132578:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13257c:	e2833008 	add	r3, r3, #8
  132580:	e5933000 	ldr	r3, [r3]
  132584:	e1e02003 	mvn	r2, r3
  132588:	e51b3010 	ldr	r3, [fp, #-16]
  13258c:	e0022003 	and	r2, r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
  132590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132594:	e2833008 	add	r3, r3, #8
  132598:	e5933000 	ldr	r3, [r3]
  13259c:	e1e03003 	mvn	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  1325a0:	e1520003 	cmp	r2, r3
  1325a4:	1a000001 	bne	1325b0 <ip4_addr_isbroadcast_u32+0xdc>
    /* => network broadcast address */
    return 1;
  1325a8:	e3a03001 	mov	r3, #1
  1325ac:	ea000000 	b	1325b4 <ip4_addr_isbroadcast_u32+0xe0>
  } else {
    return 0;
  1325b0:	e3a03000 	mov	r3, #0
  }
}
  1325b4:	e1a00003 	mov	r0, r3
  1325b8:	e28bd000 	add	sp, fp, #0
  1325bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1325c0:	e12fff1e 	bx	lr

001325c4 <ip4_addr_netmask_valid>:
 * @param netmask the IPv4 netmask to check (in network byte order!)
 * @return 1 if the netmask is valid, 0 if it is not
 */
u8_t
ip4_addr_netmask_valid(u32_t netmask)
{
  1325c4:	e92d4800 	push	{fp, lr}
  1325c8:	e28db004 	add	fp, sp, #4
  1325cc:	e24dd010 	sub	sp, sp, #16
  1325d0:	e50b0010 	str	r0, [fp, #-16]
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);
  1325d4:	e51b0010 	ldr	r0, [fp, #-16]
  1325d8:	ebff8ffa 	bl	1165c8 <lwip_htonl>
  1325dc:	e50b000c 	str	r0, [fp, #-12]

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  1325e0:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
  1325e4:	e50b3008 	str	r3, [fp, #-8]
  1325e8:	ea000007 	b	13260c <ip4_addr_netmask_valid+0x48>
    if ((nm_hostorder & mask) == 0) {
  1325ec:	e51b200c 	ldr	r2, [fp, #-12]
  1325f0:	e51b3008 	ldr	r3, [fp, #-8]
  1325f4:	e0033002 	and	r3, r3, r2
  1325f8:	e3530000 	cmp	r3, #0
  1325fc:	0a000006 	beq	13261c <ip4_addr_netmask_valid+0x58>
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  132600:	e51b3008 	ldr	r3, [fp, #-8]
  132604:	e1a030a3 	lsr	r3, r3, #1
  132608:	e50b3008 	str	r3, [fp, #-8]
  13260c:	e51b3008 	ldr	r3, [fp, #-8]
  132610:	e3530000 	cmp	r3, #0
  132614:	1afffff4 	bne	1325ec <ip4_addr_netmask_valid+0x28>
  132618:	ea00000b 	b	13264c <ip4_addr_netmask_valid+0x88>
      break;
  13261c:	e320f000 	nop	{0}
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
  132620:	ea000009 	b	13264c <ip4_addr_netmask_valid+0x88>
    if ((nm_hostorder & mask) != 0) {
  132624:	e51b200c 	ldr	r2, [fp, #-12]
  132628:	e51b3008 	ldr	r3, [fp, #-8]
  13262c:	e0033002 	and	r3, r3, r2
  132630:	e3530000 	cmp	r3, #0
  132634:	0a000001 	beq	132640 <ip4_addr_netmask_valid+0x7c>
      /* there is a one after the first zero -> invalid */
      return 0;
  132638:	e3a03000 	mov	r3, #0
  13263c:	ea000006 	b	13265c <ip4_addr_netmask_valid+0x98>
  for (; mask != 0; mask >>= 1) {
  132640:	e51b3008 	ldr	r3, [fp, #-8]
  132644:	e1a030a3 	lsr	r3, r3, #1
  132648:	e50b3008 	str	r3, [fp, #-8]
  13264c:	e51b3008 	ldr	r3, [fp, #-8]
  132650:	e3530000 	cmp	r3, #0
  132654:	1afffff2 	bne	132624 <ip4_addr_netmask_valid+0x60>
    }
  }
  /* no one after the first zero -> valid */
  return 1;
  132658:	e3a03001 	mov	r3, #1
}
  13265c:	e1a00003 	mov	r0, r3
  132660:	e24bd004 	sub	sp, fp, #4
  132664:	e8bd8800 	pop	{fp, pc}

00132668 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
  132668:	e92d4800 	push	{fp, lr}
  13266c:	e28db004 	add	fp, sp, #4
  132670:	e24dd010 	sub	sp, sp, #16
  132674:	e50b0010 	str	r0, [fp, #-16]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
  132678:	e24b3008 	sub	r3, fp, #8
  13267c:	e1a01003 	mov	r1, r3
  132680:	e51b0010 	ldr	r0, [fp, #-16]
  132684:	eb000008 	bl	1326ac <ip4addr_aton>
  132688:	e1a03000 	mov	r3, r0
  13268c:	e3530000 	cmp	r3, #0
  132690:	0a000001 	beq	13269c <ipaddr_addr+0x34>
    return ip4_addr_get_u32(&val);
  132694:	e51b3008 	ldr	r3, [fp, #-8]
  132698:	ea000000 	b	1326a0 <ipaddr_addr+0x38>
  }
  return (IPADDR_NONE);
  13269c:	e3e03000 	mvn	r3, #0
}
  1326a0:	e1a00003 	mov	r0, r3
  1326a4:	e24bd004 	sub	sp, fp, #4
  1326a8:	e8bd8800 	pop	{fp, pc}

001326ac <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  1326ac:	e92d4800 	push	{fp, lr}
  1326b0:	e28db004 	add	fp, sp, #4
  1326b4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1326b8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1326bc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
  1326c0:	e24b3020 	sub	r3, fp, #32
  1326c4:	e50b3010 	str	r3, [fp, #-16]

  c = *cp;
  1326c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1326cc:	e5d33000 	ldrb	r3, [r3]
  1326d0:	e54b300a 	strb	r3, [fp, #-10]
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
  1326d4:	e55b300a 	ldrb	r3, [fp, #-10]
  1326d8:	e353002f 	cmp	r3, #47	; 0x2f
  1326dc:	9a000002 	bls	1326ec <ip4addr_aton+0x40>
  1326e0:	e55b300a 	ldrb	r3, [fp, #-10]
  1326e4:	e3530039 	cmp	r3, #57	; 0x39
  1326e8:	9a000001 	bls	1326f4 <ip4addr_aton+0x48>
      return 0;
  1326ec:	e3a03000 	mov	r3, #0
  1326f0:	ea0000ee 	b	132ab0 <ip4addr_aton+0x404>
    }
    val = 0;
  1326f4:	e3a03000 	mov	r3, #0
  1326f8:	e50b3008 	str	r3, [fp, #-8]
    base = 10;
  1326fc:	e3a0300a 	mov	r3, #10
  132700:	e54b3009 	strb	r3, [fp, #-9]
    if (c == '0') {
  132704:	e55b300a 	ldrb	r3, [fp, #-10]
  132708:	e3530030 	cmp	r3, #48	; 0x30
  13270c:	1a000016 	bne	13276c <ip4addr_aton+0xc0>
      c = *++cp;
  132710:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132714:	e2833001 	add	r3, r3, #1
  132718:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  13271c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132720:	e5d33000 	ldrb	r3, [r3]
  132724:	e54b300a 	strb	r3, [fp, #-10]
      if (c == 'x' || c == 'X') {
  132728:	e55b300a 	ldrb	r3, [fp, #-10]
  13272c:	e3530078 	cmp	r3, #120	; 0x78
  132730:	0a000002 	beq	132740 <ip4addr_aton+0x94>
  132734:	e55b300a 	ldrb	r3, [fp, #-10]
  132738:	e3530058 	cmp	r3, #88	; 0x58
  13273c:	1a000008 	bne	132764 <ip4addr_aton+0xb8>
        base = 16;
  132740:	e3a03010 	mov	r3, #16
  132744:	e54b3009 	strb	r3, [fp, #-9]
        c = *++cp;
  132748:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13274c:	e2833001 	add	r3, r3, #1
  132750:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132754:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132758:	e5d33000 	ldrb	r3, [r3]
  13275c:	e54b300a 	strb	r3, [fp, #-10]
  132760:	ea000001 	b	13276c <ip4addr_aton+0xc0>
      } else {
        base = 8;
  132764:	e3a03008 	mov	r3, #8
  132768:	e54b3009 	strb	r3, [fp, #-9]
      }
    }
    for (;;) {
      if (isdigit(c)) {
  13276c:	e55b300a 	ldrb	r3, [fp, #-10]
  132770:	e353002f 	cmp	r3, #47	; 0x2f
  132774:	9a000010 	bls	1327bc <ip4addr_aton+0x110>
  132778:	e55b300a 	ldrb	r3, [fp, #-10]
  13277c:	e3530039 	cmp	r3, #57	; 0x39
  132780:	8a00000d 	bhi	1327bc <ip4addr_aton+0x110>
        val = (val * base) + (u32_t)(c - '0');
  132784:	e55b3009 	ldrb	r3, [fp, #-9]
  132788:	e51b2008 	ldr	r2, [fp, #-8]
  13278c:	e0020392 	mul	r2, r2, r3
  132790:	e55b300a 	ldrb	r3, [fp, #-10]
  132794:	e0823003 	add	r3, r2, r3
  132798:	e2433030 	sub	r3, r3, #48	; 0x30
  13279c:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  1327a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1327a4:	e2833001 	add	r3, r3, #1
  1327a8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1327ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1327b0:	e5d33000 	ldrb	r3, [r3]
  1327b4:	e54b300a 	strb	r3, [fp, #-10]
  1327b8:	ea00002a 	b	132868 <ip4addr_aton+0x1bc>
      } else if (base == 16 && isxdigit(c)) {
  1327bc:	e55b3009 	ldrb	r3, [fp, #-9]
  1327c0:	e3530010 	cmp	r3, #16
  1327c4:	1a000028 	bne	13286c <ip4addr_aton+0x1c0>
  1327c8:	e55b300a 	ldrb	r3, [fp, #-10]
  1327cc:	e353002f 	cmp	r3, #47	; 0x2f
  1327d0:	9a000002 	bls	1327e0 <ip4addr_aton+0x134>
  1327d4:	e55b300a 	ldrb	r3, [fp, #-10]
  1327d8:	e3530039 	cmp	r3, #57	; 0x39
  1327dc:	9a00000b 	bls	132810 <ip4addr_aton+0x164>
  1327e0:	e55b300a 	ldrb	r3, [fp, #-10]
  1327e4:	e3530060 	cmp	r3, #96	; 0x60
  1327e8:	9a000002 	bls	1327f8 <ip4addr_aton+0x14c>
  1327ec:	e55b300a 	ldrb	r3, [fp, #-10]
  1327f0:	e3530066 	cmp	r3, #102	; 0x66
  1327f4:	9a000005 	bls	132810 <ip4addr_aton+0x164>
  1327f8:	e55b300a 	ldrb	r3, [fp, #-10]
  1327fc:	e3530040 	cmp	r3, #64	; 0x40
  132800:	9a000019 	bls	13286c <ip4addr_aton+0x1c0>
  132804:	e55b300a 	ldrb	r3, [fp, #-10]
  132808:	e3530046 	cmp	r3, #70	; 0x46
  13280c:	8a000016 	bhi	13286c <ip4addr_aton+0x1c0>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
  132810:	e51b3008 	ldr	r3, [fp, #-8]
  132814:	e1a03203 	lsl	r3, r3, #4
  132818:	e55b200a 	ldrb	r2, [fp, #-10]
  13281c:	e282100a 	add	r1, r2, #10
  132820:	e55b200a 	ldrb	r2, [fp, #-10]
  132824:	e3520060 	cmp	r2, #96	; 0x60
  132828:	9a000004 	bls	132840 <ip4addr_aton+0x194>
  13282c:	e55b200a 	ldrb	r2, [fp, #-10]
  132830:	e352007a 	cmp	r2, #122	; 0x7a
  132834:	8a000001 	bhi	132840 <ip4addr_aton+0x194>
  132838:	e3a02061 	mov	r2, #97	; 0x61
  13283c:	ea000000 	b	132844 <ip4addr_aton+0x198>
  132840:	e3a02041 	mov	r2, #65	; 0x41
  132844:	e0412002 	sub	r2, r1, r2
  132848:	e1833002 	orr	r3, r3, r2
  13284c:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  132850:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132854:	e2833001 	add	r3, r3, #1
  132858:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  13285c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132860:	e5d33000 	ldrb	r3, [r3]
  132864:	e54b300a 	strb	r3, [fp, #-10]
      if (isdigit(c)) {
  132868:	eaffffbf 	b	13276c <ip4addr_aton+0xc0>
      } else {
        break;
      }
    }
    if (c == '.') {
  13286c:	e55b300a 	ldrb	r3, [fp, #-10]
  132870:	e353002e 	cmp	r3, #46	; 0x2e
  132874:	1a000012 	bne	1328c4 <ip4addr_aton+0x218>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
  132878:	e24b3020 	sub	r3, fp, #32
  13287c:	e283300c 	add	r3, r3, #12
  132880:	e51b2010 	ldr	r2, [fp, #-16]
  132884:	e1520003 	cmp	r2, r3
  132888:	3a000001 	bcc	132894 <ip4addr_aton+0x1e8>
        return 0;
  13288c:	e3a03000 	mov	r3, #0
  132890:	ea000086 	b	132ab0 <ip4addr_aton+0x404>
      }
      *pp++ = val;
  132894:	e51b3010 	ldr	r3, [fp, #-16]
  132898:	e2832004 	add	r2, r3, #4
  13289c:	e50b2010 	str	r2, [fp, #-16]
  1328a0:	e51b2008 	ldr	r2, [fp, #-8]
  1328a4:	e5832000 	str	r2, [r3]
      c = *++cp;
  1328a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1328ac:	e2833001 	add	r3, r3, #1
  1328b0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1328b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1328b8:	e5d33000 	ldrb	r3, [r3]
  1328bc:	e54b300a 	strb	r3, [fp, #-10]
    if (!isdigit(c)) {
  1328c0:	eaffff83 	b	1326d4 <ip4addr_aton+0x28>
    } else {
      break;
  1328c4:	e320f000 	nop	{0}
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
  1328c8:	e55b300a 	ldrb	r3, [fp, #-10]
  1328cc:	e3530000 	cmp	r3, #0
  1328d0:	0a000013 	beq	132924 <ip4addr_aton+0x278>
  1328d4:	e55b300a 	ldrb	r3, [fp, #-10]
  1328d8:	e3530020 	cmp	r3, #32
  1328dc:	0a000010 	beq	132924 <ip4addr_aton+0x278>
  1328e0:	e55b300a 	ldrb	r3, [fp, #-10]
  1328e4:	e353000c 	cmp	r3, #12
  1328e8:	0a00000d 	beq	132924 <ip4addr_aton+0x278>
  1328ec:	e55b300a 	ldrb	r3, [fp, #-10]
  1328f0:	e353000a 	cmp	r3, #10
  1328f4:	0a00000a 	beq	132924 <ip4addr_aton+0x278>
  1328f8:	e55b300a 	ldrb	r3, [fp, #-10]
  1328fc:	e353000d 	cmp	r3, #13
  132900:	0a000007 	beq	132924 <ip4addr_aton+0x278>
  132904:	e55b300a 	ldrb	r3, [fp, #-10]
  132908:	e3530009 	cmp	r3, #9
  13290c:	0a000004 	beq	132924 <ip4addr_aton+0x278>
  132910:	e55b300a 	ldrb	r3, [fp, #-10]
  132914:	e353000b 	cmp	r3, #11
  132918:	0a000001 	beq	132924 <ip4addr_aton+0x278>
    return 0;
  13291c:	e3a03000 	mov	r3, #0
  132920:	ea000062 	b	132ab0 <ip4addr_aton+0x404>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
  132924:	e51b2010 	ldr	r2, [fp, #-16]
  132928:	e24b3020 	sub	r3, fp, #32
  13292c:	e0423003 	sub	r3, r2, r3
  132930:	e1a03143 	asr	r3, r3, #2
  132934:	e2833001 	add	r3, r3, #1
  132938:	e3530004 	cmp	r3, #4
  13293c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  132940:	ea000048 	b	132a68 <ip4addr_aton+0x3bc>
  132944:	00132958 	.word	0x00132958
  132948:	00132a88 	.word	0x00132a88
  13294c:	00132960 	.word	0x00132960
  132950:	001329a0 	.word	0x001329a0
  132954:	001329f8 	.word	0x001329f8

  case 0:
    return 0;       /* initial nondigit */
  132958:	e3a03000 	mov	r3, #0
  13295c:	ea000053 	b	132ab0 <ip4addr_aton+0x404>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
  132960:	e51b3008 	ldr	r3, [fp, #-8]
  132964:	e3530401 	cmp	r3, #16777216	; 0x1000000
  132968:	3a000001 	bcc	132974 <ip4addr_aton+0x2c8>
      return 0;
  13296c:	e3a03000 	mov	r3, #0
  132970:	ea00004e 	b	132ab0 <ip4addr_aton+0x404>
    }
    if (parts[0] > 0xff) {
  132974:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132978:	e35300ff 	cmp	r3, #255	; 0xff
  13297c:	9a000001 	bls	132988 <ip4addr_aton+0x2dc>
      return 0;
  132980:	e3a03000 	mov	r3, #0
  132984:	ea000049 	b	132ab0 <ip4addr_aton+0x404>
    }
    val |= parts[0] << 24;
  132988:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13298c:	e1a03c03 	lsl	r3, r3, #24
  132990:	e51b2008 	ldr	r2, [fp, #-8]
  132994:	e1823003 	orr	r3, r2, r3
  132998:	e50b3008 	str	r3, [fp, #-8]
    break;
  13299c:	ea00003a 	b	132a8c <ip4addr_aton+0x3e0>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
  1329a0:	e51b3008 	ldr	r3, [fp, #-8]
  1329a4:	e3530801 	cmp	r3, #65536	; 0x10000
  1329a8:	3a000001 	bcc	1329b4 <ip4addr_aton+0x308>
      return 0;
  1329ac:	e3a03000 	mov	r3, #0
  1329b0:	ea00003e 	b	132ab0 <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
  1329b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1329b8:	e35300ff 	cmp	r3, #255	; 0xff
  1329bc:	8a000002 	bhi	1329cc <ip4addr_aton+0x320>
  1329c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1329c4:	e35300ff 	cmp	r3, #255	; 0xff
  1329c8:	9a000001 	bls	1329d4 <ip4addr_aton+0x328>
      return 0;
  1329cc:	e3a03000 	mov	r3, #0
  1329d0:	ea000036 	b	132ab0 <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
  1329d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1329d8:	e1a02c03 	lsl	r2, r3, #24
  1329dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1329e0:	e1a03803 	lsl	r3, r3, #16
  1329e4:	e1823003 	orr	r3, r2, r3
  1329e8:	e51b2008 	ldr	r2, [fp, #-8]
  1329ec:	e1823003 	orr	r3, r2, r3
  1329f0:	e50b3008 	str	r3, [fp, #-8]
    break;
  1329f4:	ea000024 	b	132a8c <ip4addr_aton+0x3e0>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
  1329f8:	e51b3008 	ldr	r3, [fp, #-8]
  1329fc:	e35300ff 	cmp	r3, #255	; 0xff
  132a00:	9a000001 	bls	132a0c <ip4addr_aton+0x360>
      return 0;
  132a04:	e3a03000 	mov	r3, #0
  132a08:	ea000028 	b	132ab0 <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
  132a0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132a10:	e35300ff 	cmp	r3, #255	; 0xff
  132a14:	8a000005 	bhi	132a30 <ip4addr_aton+0x384>
  132a18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132a1c:	e35300ff 	cmp	r3, #255	; 0xff
  132a20:	8a000002 	bhi	132a30 <ip4addr_aton+0x384>
  132a24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132a28:	e35300ff 	cmp	r3, #255	; 0xff
  132a2c:	9a000001 	bls	132a38 <ip4addr_aton+0x38c>
      return 0;
  132a30:	e3a03000 	mov	r3, #0
  132a34:	ea00001d 	b	132ab0 <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  132a38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132a3c:	e1a02c03 	lsl	r2, r3, #24
  132a40:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132a44:	e1a03803 	lsl	r3, r3, #16
  132a48:	e1822003 	orr	r2, r2, r3
  132a4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132a50:	e1a03403 	lsl	r3, r3, #8
  132a54:	e1823003 	orr	r3, r2, r3
  132a58:	e51b2008 	ldr	r2, [fp, #-8]
  132a5c:	e1823003 	orr	r3, r2, r3
  132a60:	e50b3008 	str	r3, [fp, #-8]
    break;
  132a64:	ea000008 	b	132a8c <ip4addr_aton+0x3e0>
  default:
    LWIP_ASSERT("unhandled", 0);
  132a68:	e30908d8 	movw	r0, #39128	; 0x98d8
  132a6c:	e3400014 	movt	r0, #20
  132a70:	ebff41a7 	bl	103114 <rt_kprintf>
  132a74:	e3001103 	movw	r1, #259	; 0x103
  132a78:	e30908e4 	movw	r0, #39140	; 0x98e4
  132a7c:	e3400014 	movt	r0, #20
  132a80:	ebff618b 	bl	10b0b4 <sys_arch_assert>
    break;
  132a84:	ea000000 	b	132a8c <ip4addr_aton+0x3e0>
    break;
  132a88:	e320f000 	nop	{0}
  }
  if (addr) {
  132a8c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132a90:	e3530000 	cmp	r3, #0
  132a94:	0a000004 	beq	132aac <ip4addr_aton+0x400>
    ip4_addr_set_u32(addr, lwip_htonl(val));
  132a98:	e51b0008 	ldr	r0, [fp, #-8]
  132a9c:	ebff8ec9 	bl	1165c8 <lwip_htonl>
  132aa0:	e1a02000 	mov	r2, r0
  132aa4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132aa8:	e5832000 	str	r2, [r3]
  }
  return 1;
  132aac:	e3a03001 	mov	r3, #1
}
  132ab0:	e1a00003 	mov	r0, r3
  132ab4:	e24bd004 	sub	sp, fp, #4
  132ab8:	e8bd8800 	pop	{fp, pc}

00132abc <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
  132abc:	e92d4800 	push	{fp, lr}
  132ac0:	e28db004 	add	fp, sp, #4
  132ac4:	e24dd008 	sub	sp, sp, #8
  132ac8:	e50b0008 	str	r0, [fp, #-8]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  132acc:	e3a02010 	mov	r2, #16
  132ad0:	e30e1bfc 	movw	r1, #60412	; 0xebfc
  132ad4:	e3401014 	movt	r1, #20
  132ad8:	e51b0008 	ldr	r0, [fp, #-8]
  132adc:	eb000003 	bl	132af0 <ip4addr_ntoa_r>
  132ae0:	e1a03000 	mov	r3, r0
}
  132ae4:	e1a00003 	mov	r0, r3
  132ae8:	e24bd004 	sub	sp, fp, #4
  132aec:	e8bd8800 	pop	{fp, pc}

00132af0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  132af0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  132af4:	e28db000 	add	fp, sp, #0
  132af8:	e24dd034 	sub	sp, sp, #52	; 0x34
  132afc:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132b00:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  132b04:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
  132b08:	e3a03000 	mov	r3, #0
  132b0c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  s_addr = ip4_addr_get_u32(addr);
  132b10:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132b14:	e5933000 	ldr	r3, [r3]
  132b18:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  rp = buf;
  132b1c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132b20:	e50b3008 	str	r3, [fp, #-8]
  ap = (u8_t *)&s_addr;
  132b24:	e24b301c 	sub	r3, fp, #28
  132b28:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  132b2c:	e3a03000 	mov	r3, #0
  132b30:	e54b300d 	strb	r3, [fp, #-13]
  132b34:	ea00004b 	b	132c68 <ip4addr_ntoa_r+0x178>
    i = 0;
  132b38:	e3a03000 	mov	r3, #0
  132b3c:	e54b300e 	strb	r3, [fp, #-14]
    do {
      rem = *ap % (u8_t)10;
  132b40:	e51b300c 	ldr	r3, [fp, #-12]
  132b44:	e5d31000 	ldrb	r1, [r3]
  132b48:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  132b4c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  132b50:	e0832391 	umull	r2, r3, r1, r3
  132b54:	e1a031a3 	lsr	r3, r3, #3
  132b58:	e3a0200a 	mov	r2, #10
  132b5c:	e0030392 	mul	r3, r2, r3
  132b60:	e0413003 	sub	r3, r1, r3
  132b64:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
      *ap /= (u8_t)10;
  132b68:	e51b300c 	ldr	r3, [fp, #-12]
  132b6c:	e5d32000 	ldrb	r2, [r3]
  132b70:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  132b74:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  132b78:	e0832392 	umull	r2, r3, r2, r3
  132b7c:	e1a031a3 	lsr	r3, r3, #3
  132b80:	e6ef2073 	uxtb	r2, r3
  132b84:	e51b300c 	ldr	r3, [fp, #-12]
  132b88:	e5c32000 	strb	r2, [r3]
      inv[i++] = (char)('0' + rem);
  132b8c:	e55b300e 	ldrb	r3, [fp, #-14]
  132b90:	e2832001 	add	r2, r3, #1
  132b94:	e54b200e 	strb	r2, [fp, #-14]
  132b98:	e1a01003 	mov	r1, r3
  132b9c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  132ba0:	e2833030 	add	r3, r3, #48	; 0x30
  132ba4:	e6ef2073 	uxtb	r2, r3
  132ba8:	e24b3004 	sub	r3, fp, #4
  132bac:	e0833001 	add	r3, r3, r1
  132bb0:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
    } while (*ap);
  132bb4:	e51b300c 	ldr	r3, [fp, #-12]
  132bb8:	e5d33000 	ldrb	r3, [r3]
  132bbc:	e3530000 	cmp	r3, #0
  132bc0:	1affffde 	bne	132b40 <ip4addr_ntoa_r+0x50>
    while (i--) {
  132bc4:	ea00000f 	b	132c08 <ip4addr_ntoa_r+0x118>
      if (len++ >= buflen) {
  132bc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132bcc:	e2832001 	add	r2, r3, #1
  132bd0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  132bd4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  132bd8:	e1520003 	cmp	r2, r3
  132bdc:	ca000001 	bgt	132be8 <ip4addr_ntoa_r+0xf8>
        return NULL;
  132be0:	e3a03000 	mov	r3, #0
  132be4:	ea000029 	b	132c90 <ip4addr_ntoa_r+0x1a0>
      }
      *rp++ = inv[i];
  132be8:	e55b200e 	ldrb	r2, [fp, #-14]
  132bec:	e51b3008 	ldr	r3, [fp, #-8]
  132bf0:	e2831001 	add	r1, r3, #1
  132bf4:	e50b1008 	str	r1, [fp, #-8]
  132bf8:	e24b1004 	sub	r1, fp, #4
  132bfc:	e0812002 	add	r2, r1, r2
  132c00:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  132c04:	e5c32000 	strb	r2, [r3]
    while (i--) {
  132c08:	e55b300e 	ldrb	r3, [fp, #-14]
  132c0c:	e2432001 	sub	r2, r3, #1
  132c10:	e54b200e 	strb	r2, [fp, #-14]
  132c14:	e3530000 	cmp	r3, #0
  132c18:	1affffea 	bne	132bc8 <ip4addr_ntoa_r+0xd8>
    }
    if (len++ >= buflen) {
  132c1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132c20:	e2832001 	add	r2, r3, #1
  132c24:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  132c28:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  132c2c:	e1520003 	cmp	r2, r3
  132c30:	ca000001 	bgt	132c3c <ip4addr_ntoa_r+0x14c>
      return NULL;
  132c34:	e3a03000 	mov	r3, #0
  132c38:	ea000014 	b	132c90 <ip4addr_ntoa_r+0x1a0>
    }
    *rp++ = '.';
  132c3c:	e51b3008 	ldr	r3, [fp, #-8]
  132c40:	e2832001 	add	r2, r3, #1
  132c44:	e50b2008 	str	r2, [fp, #-8]
  132c48:	e3a0202e 	mov	r2, #46	; 0x2e
  132c4c:	e5c32000 	strb	r2, [r3]
    ap++;
  132c50:	e51b300c 	ldr	r3, [fp, #-12]
  132c54:	e2833001 	add	r3, r3, #1
  132c58:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  132c5c:	e55b300d 	ldrb	r3, [fp, #-13]
  132c60:	e2833001 	add	r3, r3, #1
  132c64:	e54b300d 	strb	r3, [fp, #-13]
  132c68:	e55b300d 	ldrb	r3, [fp, #-13]
  132c6c:	e3530003 	cmp	r3, #3
  132c70:	9affffb0 	bls	132b38 <ip4addr_ntoa_r+0x48>
  }
  *--rp = 0;
  132c74:	e51b3008 	ldr	r3, [fp, #-8]
  132c78:	e2433001 	sub	r3, r3, #1
  132c7c:	e50b3008 	str	r3, [fp, #-8]
  132c80:	e51b3008 	ldr	r3, [fp, #-8]
  132c84:	e3a02000 	mov	r2, #0
  132c88:	e5c32000 	strb	r2, [r3]
  return buf;
  132c8c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  132c90:	e1a00003 	mov	r0, r3
  132c94:	e28bd000 	add	sp, fp, #0
  132c98:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  132c9c:	e12fff1e 	bx	lr

00132ca0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
  132ca0:	e92d4800 	push	{fp, lr}
  132ca4:	e28db004 	add	fp, sp, #4
  132ca8:	e24dd010 	sub	sp, sp, #16
  struct ip_reassdata *r, *prev = NULL;
  132cac:	e3a03000 	mov	r3, #0
  132cb0:	e50b300c 	str	r3, [fp, #-12]

  r = reassdatagrams;
  132cb4:	e30e3c0c 	movw	r3, #60428	; 0xec0c
  132cb8:	e3403014 	movt	r3, #20
  132cbc:	e5933000 	ldr	r3, [r3]
  132cc0:	e50b3008 	str	r3, [fp, #-8]
  while (r != NULL) {
  132cc4:	ea000017 	b	132d28 <ip_reass_tmr+0x88>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
  132cc8:	e51b3008 	ldr	r3, [fp, #-8]
  132ccc:	e5d3301f 	ldrb	r3, [r3, #31]
  132cd0:	e3530000 	cmp	r3, #0
  132cd4:	0a00000b 	beq	132d08 <ip_reass_tmr+0x68>
      r->timer--;
  132cd8:	e51b3008 	ldr	r3, [fp, #-8]
  132cdc:	e5d3301f 	ldrb	r3, [r3, #31]
  132ce0:	e2433001 	sub	r3, r3, #1
  132ce4:	e6ef2073 	uxtb	r2, r3
  132ce8:	e51b3008 	ldr	r3, [fp, #-8]
  132cec:	e5c3201f 	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
  132cf0:	e51b3008 	ldr	r3, [fp, #-8]
  132cf4:	e50b300c 	str	r3, [fp, #-12]
      r = r->next;
  132cf8:	e51b3008 	ldr	r3, [fp, #-8]
  132cfc:	e5933000 	ldr	r3, [r3]
  132d00:	e50b3008 	str	r3, [fp, #-8]
  132d04:	ea000007 	b	132d28 <ip_reass_tmr+0x88>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
  132d08:	e51b3008 	ldr	r3, [fp, #-8]
  132d0c:	e50b3010 	str	r3, [fp, #-16]
      /* get the next pointer before freeing */
      r = r->next;
  132d10:	e51b3008 	ldr	r3, [fp, #-8]
  132d14:	e5933000 	ldr	r3, [r3]
  132d18:	e50b3008 	str	r3, [fp, #-8]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
  132d1c:	e51b100c 	ldr	r1, [fp, #-12]
  132d20:	e51b0010 	ldr	r0, [fp, #-16]
  132d24:	eb000005 	bl	132d40 <ip_reass_free_complete_datagram>
  while (r != NULL) {
  132d28:	e51b3008 	ldr	r3, [fp, #-8]
  132d2c:	e3530000 	cmp	r3, #0
  132d30:	1affffe4 	bne	132cc8 <ip_reass_tmr+0x28>
     }
   }
}
  132d34:	e320f000 	nop	{0}
  132d38:	e24bd004 	sub	sp, fp, #4
  132d3c:	e8bd8800 	pop	{fp, pc}

00132d40 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  132d40:	e92d4800 	push	{fp, lr}
  132d44:	e28db004 	add	fp, sp, #4
  132d48:	e24dd020 	sub	sp, sp, #32
  132d4c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  132d50:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  u16_t pbufs_freed = 0;
  132d54:	e3a03000 	mov	r3, #0
  132d58:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
  132d5c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  132d60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132d64:	e1520003 	cmp	r2, r3
  132d68:	1a000006 	bne	132d88 <ip_reass_free_complete_datagram+0x48>
  132d6c:	e309091c 	movw	r0, #39196	; 0x991c
  132d70:	e3400014 	movt	r0, #20
  132d74:	ebff40e6 	bl	103114 <rt_kprintf>
  132d78:	e3a010a7 	mov	r1, #167	; 0xa7
  132d7c:	e3090928 	movw	r0, #39208	; 0x9928
  132d80:	e3400014 	movt	r0, #20
  132d84:	ebff60ca 	bl	10b0b4 <sys_arch_assert>
  if (prev != NULL) {
  132d88:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132d8c:	e3530000 	cmp	r3, #0
  132d90:	0a00000b 	beq	132dc4 <ip_reass_free_complete_datagram+0x84>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  132d94:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132d98:	e5933000 	ldr	r3, [r3]
  132d9c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  132da0:	e1520003 	cmp	r2, r3
  132da4:	0a000006 	beq	132dc4 <ip_reass_free_complete_datagram+0x84>
  132da8:	e3090960 	movw	r0, #39264	; 0x9960
  132dac:	e3400014 	movt	r0, #20
  132db0:	ebff40d7 	bl	103114 <rt_kprintf>
  132db4:	e3a010a9 	mov	r1, #169	; 0xa9
  132db8:	e3090928 	movw	r0, #39208	; 0x9928
  132dbc:	e3400014 	movt	r0, #20
  132dc0:	ebff60bb 	bl	10b0b4 <sys_arch_assert>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
  132dc4:	e30c3a48 	movw	r3, #51784	; 0xca48
  132dc8:	e3403015 	movt	r3, #21
  132dcc:	e5933150 	ldr	r3, [r3, #336]	; 0x150
  132dd0:	e2832001 	add	r2, r3, #1
  132dd4:	e30c3a48 	movw	r3, #51784	; 0xca48
  132dd8:	e3403015 	movt	r3, #21
  132ddc:	e5832150 	str	r2, [r3, #336]	; 0x150
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  132de0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132de4:	e5933004 	ldr	r3, [r3, #4]
  132de8:	e5933004 	ldr	r3, [r3, #4]
  132dec:	e50b3010 	str	r3, [fp, #-16]
  if (iprh->start == 0) {
  132df0:	e51b3010 	ldr	r3, [fp, #-16]
  132df4:	e1d330b4 	ldrh	r3, [r3, #4]
  132df8:	e6ff3073 	uxth	r3, r3
  132dfc:	e3530000 	cmp	r3, #0
  132e00:	1a000026 	bne	132ea0 <ip_reass_free_complete_datagram+0x160>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
  132e04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132e08:	e5933004 	ldr	r3, [r3, #4]
  132e0c:	e50b300c 	str	r3, [fp, #-12]
    ipr->p = iprh->next_pbuf;
  132e10:	e51b3010 	ldr	r3, [fp, #-16]
  132e14:	e5932000 	ldr	r2, [r3]
  132e18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132e1c:	e5832004 	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  132e20:	e51b300c 	ldr	r3, [fp, #-12]
  132e24:	e5930004 	ldr	r0, [r3, #4]
  132e28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132e2c:	e2833008 	add	r3, r3, #8
  132e30:	e3a02014 	mov	r2, #20
  132e34:	e1a01003 	mov	r1, r3
  132e38:	eb0037c7 	bl	140d5c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  132e3c:	e3a01001 	mov	r1, #1
  132e40:	e51b000c 	ldr	r0, [fp, #-12]
  132e44:	ebfff396 	bl	12fca4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
  132e48:	e51b000c 	ldr	r0, [fp, #-12]
  132e4c:	ebffa08d 	bl	11b088 <pbuf_clen>
  132e50:	e1a03000 	mov	r3, r0
  132e54:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  132e58:	e15b20b6 	ldrh	r2, [fp, #-6]
  132e5c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132e60:	e0823003 	add	r3, r2, r3
  132e64:	e3530801 	cmp	r3, #65536	; 0x10000
  132e68:	ba000006 	blt	132e88 <ip_reass_free_complete_datagram+0x148>
  132e6c:	e3090974 	movw	r0, #39284	; 0x9974
  132e70:	e3400014 	movt	r0, #20
  132e74:	ebff40a6 	bl	103114 <rt_kprintf>
  132e78:	e3a010b8 	mov	r1, #184	; 0xb8
  132e7c:	e3090928 	movw	r0, #39208	; 0x9928
  132e80:	e3400014 	movt	r0, #20
  132e84:	ebff608a 	bl	10b0b4 <sys_arch_assert>
    pbufs_freed += clen;
  132e88:	e15b20b6 	ldrh	r2, [fp, #-6]
  132e8c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132e90:	e0823003 	add	r3, r2, r3
  132e94:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(p);
  132e98:	e51b000c 	ldr	r0, [fp, #-12]
  132e9c:	ebff9ff4 	bl	11ae74 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
  132ea0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132ea4:	e5933004 	ldr	r3, [r3, #4]
  132ea8:	e50b300c 	str	r3, [fp, #-12]
  while (p != NULL) {
  132eac:	ea00001d 	b	132f28 <ip_reass_free_complete_datagram+0x1e8>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
  132eb0:	e51b300c 	ldr	r3, [fp, #-12]
  132eb4:	e5933004 	ldr	r3, [r3, #4]
  132eb8:	e50b3010 	str	r3, [fp, #-16]
    pcur = p;
  132ebc:	e51b300c 	ldr	r3, [fp, #-12]
  132ec0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  132ec4:	e51b3010 	ldr	r3, [fp, #-16]
  132ec8:	e5933000 	ldr	r3, [r3]
  132ecc:	e50b300c 	str	r3, [fp, #-12]
    clen = pbuf_clen(pcur);
  132ed0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132ed4:	ebffa06b 	bl	11b088 <pbuf_clen>
  132ed8:	e1a03000 	mov	r3, r0
  132edc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  132ee0:	e15b20b6 	ldrh	r2, [fp, #-6]
  132ee4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132ee8:	e0823003 	add	r3, r2, r3
  132eec:	e3530801 	cmp	r3, #65536	; 0x10000
  132ef0:	ba000006 	blt	132f10 <ip_reass_free_complete_datagram+0x1d0>
  132ef4:	e3090974 	movw	r0, #39284	; 0x9974
  132ef8:	e3400014 	movt	r0, #20
  132efc:	ebff4084 	bl	103114 <rt_kprintf>
  132f00:	e3a010c8 	mov	r1, #200	; 0xc8
  132f04:	e3090928 	movw	r0, #39208	; 0x9928
  132f08:	e3400014 	movt	r0, #20
  132f0c:	ebff6068 	bl	10b0b4 <sys_arch_assert>
    pbufs_freed += clen;
  132f10:	e15b20b6 	ldrh	r2, [fp, #-6]
  132f14:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132f18:	e0823003 	add	r3, r2, r3
  132f1c:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(pcur);
  132f20:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132f24:	ebff9fd2 	bl	11ae74 <pbuf_free>
  while (p != NULL) {
  132f28:	e51b300c 	ldr	r3, [fp, #-12]
  132f2c:	e3530000 	cmp	r3, #0
  132f30:	1affffde 	bne	132eb0 <ip_reass_free_complete_datagram+0x170>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
  132f34:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  132f38:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132f3c:	eb0000b9 	bl	133228 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  132f40:	e30e3c10 	movw	r3, #60432	; 0xec10
  132f44:	e3403014 	movt	r3, #20
  132f48:	e1d330b0 	ldrh	r3, [r3]
  132f4c:	e15b20b6 	ldrh	r2, [fp, #-6]
  132f50:	e1520003 	cmp	r2, r3
  132f54:	9a000006 	bls	132f74 <ip_reass_free_complete_datagram+0x234>
  132f58:	e3090994 	movw	r0, #39316	; 0x9994
  132f5c:	e3400014 	movt	r0, #20
  132f60:	ebff406b 	bl	103114 <rt_kprintf>
  132f64:	e3a010ce 	mov	r1, #206	; 0xce
  132f68:	e3090928 	movw	r0, #39208	; 0x9928
  132f6c:	e3400014 	movt	r0, #20
  132f70:	ebff604f 	bl	10b0b4 <sys_arch_assert>
  ip_reass_pbufcount -= pbufs_freed;
  132f74:	e30e3c10 	movw	r3, #60432	; 0xec10
  132f78:	e3403014 	movt	r3, #20
  132f7c:	e1d320b0 	ldrh	r2, [r3]
  132f80:	e15b30b6 	ldrh	r3, [fp, #-6]
  132f84:	e0423003 	sub	r3, r2, r3
  132f88:	e6ff2073 	uxth	r2, r3
  132f8c:	e30e3c10 	movw	r3, #60432	; 0xec10
  132f90:	e3403014 	movt	r3, #20
  132f94:	e1c320b0 	strh	r2, [r3]

  return pbufs_freed;
  132f98:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  132f9c:	e1a00003 	mov	r0, r3
  132fa0:	e24bd004 	sub	sp, fp, #4
  132fa4:	e8bd8800 	pop	{fp, pc}

00132fa8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
  132fa8:	e92d4800 	push	{fp, lr}
  132fac:	e28db004 	add	fp, sp, #4
  132fb0:	e24dd028 	sub	sp, sp, #40	; 0x28
  132fb4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132fb8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
  132fbc:	e3a03000 	mov	r3, #0
  132fc0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
  132fc4:	e3a03000 	mov	r3, #0
  132fc8:	e50b300c 	str	r3, [fp, #-12]
    prev = NULL;
  132fcc:	e3a03000 	mov	r3, #0
  132fd0:	e50b3010 	str	r3, [fp, #-16]
    oldest_prev = NULL;
  132fd4:	e3a03000 	mov	r3, #0
  132fd8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    other_datagrams = 0;
  132fdc:	e3a03000 	mov	r3, #0
  132fe0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    r = reassdatagrams;
  132fe4:	e30e3c0c 	movw	r3, #60428	; 0xec0c
  132fe8:	e3403014 	movt	r3, #20
  132fec:	e5933000 	ldr	r3, [r3]
  132ff0:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  132ff4:	ea000030 	b	1330bc <ip_reass_remove_oldest_datagram+0x114>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  132ff8:	e51b3008 	ldr	r3, [fp, #-8]
  132ffc:	e5932014 	ldr	r2, [r3, #20]
  133000:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133004:	e593300c 	ldr	r3, [r3, #12]
  133008:	e1520003 	cmp	r2, r3
  13300c:	1a00000c 	bne	133044 <ip_reass_remove_oldest_datagram+0x9c>
  133010:	e51b3008 	ldr	r3, [fp, #-8]
  133014:	e5932018 	ldr	r2, [r3, #24]
  133018:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13301c:	e5933010 	ldr	r3, [r3, #16]
  133020:	e1520003 	cmp	r2, r3
  133024:	1a000006 	bne	133044 <ip_reass_remove_oldest_datagram+0x9c>
  133028:	e51b3008 	ldr	r3, [fp, #-8]
  13302c:	e1d320bc 	ldrh	r2, [r3, #12]
  133030:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133034:	e1d330b4 	ldrh	r3, [r3, #4]
  133038:	e6ff3073 	uxth	r3, r3
  13303c:	e1520003 	cmp	r2, r3
  133040:	0a000014 	beq	133098 <ip_reass_remove_oldest_datagram+0xf0>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
  133044:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133048:	e2833001 	add	r3, r3, #1
  13304c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (oldest == NULL) {
  133050:	e51b300c 	ldr	r3, [fp, #-12]
  133054:	e3530000 	cmp	r3, #0
  133058:	1a000004 	bne	133070 <ip_reass_remove_oldest_datagram+0xc8>
          oldest = r;
  13305c:	e51b3008 	ldr	r3, [fp, #-8]
  133060:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  133064:	e51b3010 	ldr	r3, [fp, #-16]
  133068:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  13306c:	ea000009 	b	133098 <ip_reass_remove_oldest_datagram+0xf0>
        } else if (r->timer <= oldest->timer) {
  133070:	e51b3008 	ldr	r3, [fp, #-8]
  133074:	e5d3201f 	ldrb	r2, [r3, #31]
  133078:	e51b300c 	ldr	r3, [fp, #-12]
  13307c:	e5d3301f 	ldrb	r3, [r3, #31]
  133080:	e1520003 	cmp	r2, r3
  133084:	8a000003 	bhi	133098 <ip_reass_remove_oldest_datagram+0xf0>
          /* older than the previous oldest */
          oldest = r;
  133088:	e51b3008 	ldr	r3, [fp, #-8]
  13308c:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  133090:	e51b3010 	ldr	r3, [fp, #-16]
  133094:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (r->next != NULL) {
  133098:	e51b3008 	ldr	r3, [fp, #-8]
  13309c:	e5933000 	ldr	r3, [r3]
  1330a0:	e3530000 	cmp	r3, #0
  1330a4:	0a000001 	beq	1330b0 <ip_reass_remove_oldest_datagram+0x108>
        prev = r;
  1330a8:	e51b3008 	ldr	r3, [fp, #-8]
  1330ac:	e50b3010 	str	r3, [fp, #-16]
      }
      r = r->next;
  1330b0:	e51b3008 	ldr	r3, [fp, #-8]
  1330b4:	e5933000 	ldr	r3, [r3]
  1330b8:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  1330bc:	e51b3008 	ldr	r3, [fp, #-8]
  1330c0:	e3530000 	cmp	r3, #0
  1330c4:	1affffcb 	bne	132ff8 <ip_reass_remove_oldest_datagram+0x50>
    }
    if (oldest != NULL) {
  1330c8:	e51b300c 	ldr	r3, [fp, #-12]
  1330cc:	e3530000 	cmp	r3, #0
  1330d0:	0a000007 	beq	1330f4 <ip_reass_remove_oldest_datagram+0x14c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
  1330d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1330d8:	e51b000c 	ldr	r0, [fp, #-12]
  1330dc:	ebffff17 	bl	132d40 <ip_reass_free_complete_datagram>
  1330e0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
      pbufs_freed += pbufs_freed_current;
  1330e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1330e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1330ec:	e0823003 	add	r3, r2, r3
  1330f0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  1330f4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1330f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1330fc:	e1520003 	cmp	r2, r3
  133100:	aa000002 	bge	133110 <ip_reass_remove_oldest_datagram+0x168>
  133104:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133108:	e3530001 	cmp	r3, #1
  13310c:	caffffac 	bgt	132fc4 <ip_reass_remove_oldest_datagram+0x1c>
  return pbufs_freed;
  133110:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  133114:	e1a00003 	mov	r0, r3
  133118:	e24bd004 	sub	sp, fp, #4
  13311c:	e8bd8800 	pop	{fp, pc}

00133120 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
  133120:	e92d4800 	push	{fp, lr}
  133124:	e28db004 	add	fp, sp, #4
  133128:	e24dd010 	sub	sp, sp, #16
  13312c:	e50b0010 	str	r0, [fp, #-16]
  133130:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  133134:	e300211a 	movw	r2, #282	; 0x11a
  133138:	e3091928 	movw	r1, #39208	; 0x9928
  13313c:	e3401014 	movt	r1, #20
  133140:	e3a00005 	mov	r0, #5
  133144:	ebff97d4 	bl	11909c <memp_malloc_fn>
  133148:	e50b0008 	str	r0, [fp, #-8]
  if (ipr == NULL) {
  13314c:	e51b3008 	ldr	r3, [fp, #-8]
  133150:	e3530000 	cmp	r3, #0
  133154:	1a000019 	bne	1331c0 <ip_reass_enqueue_new_datagram+0xa0>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  133158:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13315c:	e51b0010 	ldr	r0, [fp, #-16]
  133160:	ebffff90 	bl	132fa8 <ip_reass_remove_oldest_datagram>
  133164:	e1a02000 	mov	r2, r0
  133168:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13316c:	e1530002 	cmp	r3, r2
  133170:	ca000005 	bgt	13318c <ip_reass_enqueue_new_datagram+0x6c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  133174:	e300211e 	movw	r2, #286	; 0x11e
  133178:	e3091928 	movw	r1, #39208	; 0x9928
  13317c:	e3401014 	movt	r1, #20
  133180:	e3a00005 	mov	r0, #5
  133184:	ebff97c4 	bl	11909c <memp_malloc_fn>
  133188:	e50b0008 	str	r0, [fp, #-8]
    }
    if (ipr == NULL)
  13318c:	e51b3008 	ldr	r3, [fp, #-8]
  133190:	e3530000 	cmp	r3, #0
  133194:	1a000009 	bne	1331c0 <ip_reass_enqueue_new_datagram+0xa0>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
  133198:	e30c3a48 	movw	r3, #51784	; 0xca48
  13319c:	e3403015 	movt	r3, #21
  1331a0:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  1331a4:	e2833001 	add	r3, r3, #1
  1331a8:	e6ff2073 	uxth	r2, r3
  1331ac:	e30c3a48 	movw	r3, #51784	; 0xca48
  1331b0:	e3403015 	movt	r3, #21
  1331b4:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
  1331b8:	e3a03000 	mov	r3, #0
  1331bc:	ea000016 	b	13321c <ip_reass_enqueue_new_datagram+0xfc>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
  1331c0:	e3a02020 	mov	r2, #32
  1331c4:	e3a01000 	mov	r1, #0
  1331c8:	e51b0008 	ldr	r0, [fp, #-8]
  1331cc:	eb00381a 	bl	14123c <memset>
  ipr->timer = IP_REASS_MAXAGE;
  1331d0:	e51b3008 	ldr	r3, [fp, #-8]
  1331d4:	e3a02003 	mov	r2, #3
  1331d8:	e5c3201f 	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
  1331dc:	e30e3c0c 	movw	r3, #60428	; 0xec0c
  1331e0:	e3403014 	movt	r3, #20
  1331e4:	e5932000 	ldr	r2, [r3]
  1331e8:	e51b3008 	ldr	r3, [fp, #-8]
  1331ec:	e5832000 	str	r2, [r3]
  reassdatagrams = ipr;
  1331f0:	e30e3c0c 	movw	r3, #60428	; 0xec0c
  1331f4:	e3403014 	movt	r3, #20
  1331f8:	e51b2008 	ldr	r2, [fp, #-8]
  1331fc:	e5832000 	str	r2, [r3]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  133200:	e51b3008 	ldr	r3, [fp, #-8]
  133204:	e2833008 	add	r3, r3, #8
  133208:	e3a02014 	mov	r2, #20
  13320c:	e51b1010 	ldr	r1, [fp, #-16]
  133210:	e1a00003 	mov	r0, r3
  133214:	eb0036d0 	bl	140d5c <memcpy>
  return ipr;
  133218:	e51b3008 	ldr	r3, [fp, #-8]
}
  13321c:	e1a00003 	mov	r0, r3
  133220:	e24bd004 	sub	sp, fp, #4
  133224:	e8bd8800 	pop	{fp, pc}

00133228 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  133228:	e92d4800 	push	{fp, lr}
  13322c:	e28db004 	add	fp, sp, #4
  133230:	e24dd008 	sub	sp, sp, #8
  133234:	e50b0008 	str	r0, [fp, #-8]
  133238:	e50b100c 	str	r1, [fp, #-12]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  13323c:	e30e3c0c 	movw	r3, #60428	; 0xec0c
  133240:	e3403014 	movt	r3, #20
  133244:	e5933000 	ldr	r3, [r3]
  133248:	e51b2008 	ldr	r2, [fp, #-8]
  13324c:	e1520003 	cmp	r2, r3
  133250:	1a000005 	bne	13326c <ip_reass_dequeue_datagram+0x44>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  133254:	e51b3008 	ldr	r3, [fp, #-8]
  133258:	e5932000 	ldr	r2, [r3]
  13325c:	e30e3c0c 	movw	r3, #60428	; 0xec0c
  133260:	e3403014 	movt	r3, #20
  133264:	e5832000 	str	r2, [r3]
  133268:	ea00000d 	b	1332a4 <ip_reass_dequeue_datagram+0x7c>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
  13326c:	e51b300c 	ldr	r3, [fp, #-12]
  133270:	e3530000 	cmp	r3, #0
  133274:	1a000006 	bne	133294 <ip_reass_dequeue_datagram+0x6c>
  133278:	e30909b0 	movw	r0, #39344	; 0x99b0
  13327c:	e3400014 	movt	r0, #20
  133280:	ebff3fa3 	bl	103114 <rt_kprintf>
  133284:	e3001141 	movw	r1, #321	; 0x141
  133288:	e3090928 	movw	r0, #39208	; 0x9928
  13328c:	e3400014 	movt	r0, #20
  133290:	ebff5f87 	bl	10b0b4 <sys_arch_assert>
    prev->next = ipr->next;
  133294:	e51b3008 	ldr	r3, [fp, #-8]
  133298:	e5932000 	ldr	r2, [r3]
  13329c:	e51b300c 	ldr	r3, [fp, #-12]
  1332a0:	e5832000 	str	r2, [r3]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
  1332a4:	e51b1008 	ldr	r1, [fp, #-8]
  1332a8:	e3a00005 	mov	r0, #5
  1332ac:	ebff97e2 	bl	11923c <memp_free>
}
  1332b0:	e320f000 	nop	{0}
  1332b4:	e24bd004 	sub	sp, fp, #4
  1332b8:	e8bd8800 	pop	{fp, pc}

001332bc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
  1332bc:	e92d4800 	push	{fp, lr}
  1332c0:	e28db004 	add	fp, sp, #4
  1332c4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1332c8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1332cc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  1332d0:	e3a03000 	mov	r3, #0
  1332d4:	e50b300c 	str	r3, [fp, #-12]
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
  1332d8:	e3a03001 	mov	r3, #1
  1332dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
  1332e0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1332e4:	e5933004 	ldr	r3, [r3, #4]
  1332e8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  1332ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1332f0:	e1d330b2 	ldrh	r3, [r3, #2]
  1332f4:	e6ff3073 	uxth	r3, r3
  1332f8:	e1a00003 	mov	r0, r3
  1332fc:	ebff8ca5 	bl	116598 <lwip_htons>
  133300:	e1a03000 	mov	r3, r0
  133304:	e1a02003 	mov	r2, r3
  133308:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13330c:	e5d33000 	ldrb	r3, [r3]
  133310:	e6ff3073 	uxth	r3, r3
  133314:	e203300f 	and	r3, r3, #15
  133318:	e6ff3073 	uxth	r3, r3
  13331c:	e1a03103 	lsl	r3, r3, #2
  133320:	e6ff3073 	uxth	r3, r3
  133324:	e0423003 	sub	r3, r2, r3
  133328:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  13332c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133330:	e1d330b6 	ldrh	r3, [r3, #6]
  133334:	e6ff3073 	uxth	r3, r3
  133338:	e1a00003 	mov	r0, r3
  13333c:	ebff8c95 	bl	116598 <lwip_htons>
  133340:	e1a03000 	mov	r3, r0
  133344:	e7ec3053 	ubfx	r3, r3, #0, #13
  133348:	e6ff3073 	uxth	r3, r3
  13334c:	e1a03183 	lsl	r3, r3, #3
  133350:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  133354:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  133358:	e5933004 	ldr	r3, [r3, #4]
  13335c:	e50b3008 	str	r3, [fp, #-8]
  iprh->next_pbuf = NULL;
  133360:	e51b3008 	ldr	r3, [fp, #-8]
  133364:	e3a02000 	mov	r2, #0
  133368:	e5c32000 	strb	r2, [r3]
  13336c:	e3a02000 	mov	r2, #0
  133370:	e5c32001 	strb	r2, [r3, #1]
  133374:	e3a02000 	mov	r2, #0
  133378:	e5c32002 	strb	r2, [r3, #2]
  13337c:	e3a02000 	mov	r2, #0
  133380:	e5c32003 	strb	r2, [r3, #3]
  iprh->start = offset;
  133384:	e51b3008 	ldr	r3, [fp, #-8]
  133388:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  13338c:	e1c320b4 	strh	r2, [r3, #4]
  iprh->end = offset + len;
  133390:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  133394:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133398:	e0823003 	add	r3, r2, r3
  13339c:	e6ff2073 	uxth	r2, r3
  1333a0:	e51b3008 	ldr	r3, [fp, #-8]
  1333a4:	e1c320b6 	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  1333a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1333ac:	e5933004 	ldr	r3, [r3, #4]
  1333b0:	e50b3010 	str	r3, [fp, #-16]
  1333b4:	ea00004a 	b	1334e4 <ip_reass_chain_frag_into_datagram_and_validate+0x228>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  1333b8:	e51b3010 	ldr	r3, [fp, #-16]
  1333bc:	e5933004 	ldr	r3, [r3, #4]
  1333c0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (iprh->start < iprh_tmp->start) {
  1333c4:	e51b3008 	ldr	r3, [fp, #-8]
  1333c8:	e1d330b4 	ldrh	r3, [r3, #4]
  1333cc:	e6ff2073 	uxth	r2, r3
  1333d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1333d4:	e1d330b4 	ldrh	r3, [r3, #4]
  1333d8:	e6ff3073 	uxth	r3, r3
  1333dc:	e1520003 	cmp	r2, r3
  1333e0:	2a00001d 	bcs	13345c <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
  1333e4:	e51b3008 	ldr	r3, [fp, #-8]
  1333e8:	e51b2010 	ldr	r2, [fp, #-16]
  1333ec:	e5832000 	str	r2, [r3]
      if (iprh_prev != NULL) {
  1333f0:	e51b300c 	ldr	r3, [fp, #-12]
  1333f4:	e3530000 	cmp	r3, #0
  1333f8:	0a000013 	beq	13344c <ip_reass_chain_frag_into_datagram_and_validate+0x190>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  1333fc:	e51b3008 	ldr	r3, [fp, #-8]
  133400:	e1d330b4 	ldrh	r3, [r3, #4]
  133404:	e6ff2073 	uxth	r2, r3
  133408:	e51b300c 	ldr	r3, [fp, #-12]
  13340c:	e1d330b6 	ldrh	r3, [r3, #6]
  133410:	e6ff3073 	uxth	r3, r3
  133414:	e1520003 	cmp	r2, r3
  133418:	3a0000cf 	bcc	13375c <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
  13341c:	e51b3008 	ldr	r3, [fp, #-8]
  133420:	e1d330b6 	ldrh	r3, [r3, #6]
  133424:	e6ff2073 	uxth	r2, r3
  133428:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13342c:	e1d330b4 	ldrh	r3, [r3, #4]
  133430:	e6ff3073 	uxth	r3, r3
  133434:	e1520003 	cmp	r2, r3
  133438:	8a0000c7 	bhi	13375c <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
  13343c:	e51b300c 	ldr	r3, [fp, #-12]
  133440:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133444:	e5832000 	str	r2, [r3]
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
  133448:	ea000028 	b	1334f0 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
        ipr->p = new_p;
  13344c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133450:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133454:	e5832004 	str	r2, [r3, #4]
      break;
  133458:	ea000024 	b	1334f0 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
    } else if (iprh->start == iprh_tmp->start) {
  13345c:	e51b3008 	ldr	r3, [fp, #-8]
  133460:	e1d330b4 	ldrh	r3, [r3, #4]
  133464:	e6ff2073 	uxth	r2, r3
  133468:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13346c:	e1d330b4 	ldrh	r3, [r3, #4]
  133470:	e6ff3073 	uxth	r3, r3
  133474:	e1520003 	cmp	r2, r3
  133478:	0a0000b9 	beq	133764 <ip_reass_chain_frag_into_datagram_and_validate+0x4a8>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
  13347c:	e51b3008 	ldr	r3, [fp, #-8]
  133480:	e1d330b4 	ldrh	r3, [r3, #4]
  133484:	e6ff2073 	uxth	r2, r3
  133488:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13348c:	e1d330b6 	ldrh	r3, [r3, #6]
  133490:	e6ff3073 	uxth	r3, r3
  133494:	e1520003 	cmp	r2, r3
  133498:	3a0000b3 	bcc	13376c <ip_reass_chain_frag_into_datagram_and_validate+0x4b0>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
  13349c:	e51b300c 	ldr	r3, [fp, #-12]
  1334a0:	e3530000 	cmp	r3, #0
  1334a4:	0a000009 	beq	1334d0 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
        if (iprh_prev->end != iprh_tmp->start) {
  1334a8:	e51b300c 	ldr	r3, [fp, #-12]
  1334ac:	e1d330b6 	ldrh	r3, [r3, #6]
  1334b0:	e6ff2073 	uxth	r2, r3
  1334b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1334b8:	e1d330b4 	ldrh	r3, [r3, #4]
  1334bc:	e6ff3073 	uxth	r3, r3
  1334c0:	e1520003 	cmp	r2, r3
  1334c4:	0a000001 	beq	1334d0 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
  1334c8:	e3a03000 	mov	r3, #0
  1334cc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
    }
    q = iprh_tmp->next_pbuf;
  1334d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1334d4:	e5933000 	ldr	r3, [r3]
  1334d8:	e50b3010 	str	r3, [fp, #-16]
    iprh_prev = iprh_tmp;
  1334dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1334e0:	e50b300c 	str	r3, [fp, #-12]
  for (q = ipr->p; q != NULL;) {
  1334e4:	e51b3010 	ldr	r3, [fp, #-16]
  1334e8:	e3530000 	cmp	r3, #0
  1334ec:	1affffb1 	bne	1333b8 <ip_reass_chain_frag_into_datagram_and_validate+0xfc>
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
  1334f0:	e51b3010 	ldr	r3, [fp, #-16]
  1334f4:	e3530000 	cmp	r3, #0
  1334f8:	1a00002d 	bne	1335b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
    if (iprh_prev != NULL) {
  1334fc:	e51b300c 	ldr	r3, [fp, #-12]
  133500:	e3530000 	cmp	r3, #0
  133504:	0a00001c 	beq	13357c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
  133508:	e51b300c 	ldr	r3, [fp, #-12]
  13350c:	e1d330b6 	ldrh	r3, [r3, #6]
  133510:	e6ff2073 	uxth	r2, r3
  133514:	e51b3008 	ldr	r3, [fp, #-8]
  133518:	e1d330b4 	ldrh	r3, [r3, #4]
  13351c:	e6ff3073 	uxth	r3, r3
  133520:	e1520003 	cmp	r2, r3
  133524:	9a000006 	bls	133544 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
  133528:	e30909cc 	movw	r0, #39372	; 0x99cc
  13352c:	e3400014 	movt	r0, #20
  133530:	ebff3ef7 	bl	103114 <rt_kprintf>
  133534:	e300119b 	movw	r1, #411	; 0x19b
  133538:	e3090928 	movw	r0, #39208	; 0x9928
  13353c:	e3400014 	movt	r0, #20
  133540:	ebff5edb 	bl	10b0b4 <sys_arch_assert>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
  133544:	e51b300c 	ldr	r3, [fp, #-12]
  133548:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  13354c:	e5832000 	str	r2, [r3]
      if (iprh_prev->end != iprh->start) {
  133550:	e51b300c 	ldr	r3, [fp, #-12]
  133554:	e1d330b6 	ldrh	r3, [r3, #6]
  133558:	e6ff2073 	uxth	r2, r3
  13355c:	e51b3008 	ldr	r3, [fp, #-8]
  133560:	e1d330b4 	ldrh	r3, [r3, #4]
  133564:	e6ff3073 	uxth	r3, r3
  133568:	e1520003 	cmp	r2, r3
  13356c:	0a000010 	beq	1335b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
        valid = 0;
  133570:	e3a03000 	mov	r3, #0
  133574:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  133578:	ea00000d 	b	1335b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
  13357c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133580:	e5933004 	ldr	r3, [r3, #4]
  133584:	e3530000 	cmp	r3, #0
  133588:	0a000006 	beq	1335a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2ec>
  13358c:	e30909ec 	movw	r0, #39404	; 0x99ec
  133590:	e3400014 	movt	r0, #20
  133594:	ebff3ede 	bl	103114 <rt_kprintf>
  133598:	e3a01f69 	mov	r1, #420	; 0x1a4
  13359c:	e3090928 	movw	r0, #39208	; 0x9928
  1335a0:	e3400014 	movt	r0, #20
  1335a4:	ebff5ec2 	bl	10b0b4 <sys_arch_assert>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
  1335a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1335ac:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1335b0:	e5832004 	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  1335b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1335b8:	e5d3301e 	ldrb	r3, [r3, #30]
  1335bc:	e2033001 	and	r3, r3, #1
  1335c0:	e3530000 	cmp	r3, #0
  1335c4:	0a000062 	beq	133754 <ip_reass_chain_frag_into_datagram_and_validate+0x498>
    /* and had no holes so far */
    if (valid) {
  1335c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1335cc:	e3530000 	cmp	r3, #0
  1335d0:	0a00005d 	beq	13374c <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
  1335d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1335d8:	e5933004 	ldr	r3, [r3, #4]
  1335dc:	e3530000 	cmp	r3, #0
  1335e0:	0a000006 	beq	133600 <ip_reass_chain_frag_into_datagram_and_validate+0x344>
  1335e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1335e8:	e5933004 	ldr	r3, [r3, #4]
  1335ec:	e5933004 	ldr	r3, [r3, #4]
  1335f0:	e1d330b4 	ldrh	r3, [r3, #4]
  1335f4:	e6ff3073 	uxth	r3, r3
  1335f8:	e3530000 	cmp	r3, #0
  1335fc:	0a000002 	beq	13360c <ip_reass_chain_frag_into_datagram_and_validate+0x350>
        valid = 0;
  133600:	e3a03000 	mov	r3, #0
  133604:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  133608:	ea00004f 	b	13374c <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
  13360c:	e51b3008 	ldr	r3, [fp, #-8]
  133610:	e50b300c 	str	r3, [fp, #-12]
        q = iprh->next_pbuf;
  133614:	e51b3008 	ldr	r3, [fp, #-8]
  133618:	e5933000 	ldr	r3, [r3]
  13361c:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  133620:	ea000012 	b	133670 <ip_reass_chain_frag_into_datagram_and_validate+0x3b4>
          iprh = (struct ip_reass_helper*)q->payload;
  133624:	e51b3010 	ldr	r3, [fp, #-16]
  133628:	e5933004 	ldr	r3, [r3, #4]
  13362c:	e50b3008 	str	r3, [fp, #-8]
          if (iprh_prev->end != iprh->start) {
  133630:	e51b300c 	ldr	r3, [fp, #-12]
  133634:	e1d330b6 	ldrh	r3, [r3, #6]
  133638:	e6ff2073 	uxth	r2, r3
  13363c:	e51b3008 	ldr	r3, [fp, #-8]
  133640:	e1d330b4 	ldrh	r3, [r3, #4]
  133644:	e6ff3073 	uxth	r3, r3
  133648:	e1520003 	cmp	r2, r3
  13364c:	0a000002 	beq	13365c <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
            valid = 0;
  133650:	e3a03000 	mov	r3, #0
  133654:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            break;
  133658:	ea000007 	b	13367c <ip_reass_chain_frag_into_datagram_and_validate+0x3c0>
          }
          iprh_prev = iprh;
  13365c:	e51b3008 	ldr	r3, [fp, #-8]
  133660:	e50b300c 	str	r3, [fp, #-12]
          q = iprh->next_pbuf;
  133664:	e51b3008 	ldr	r3, [fp, #-8]
  133668:	e5933000 	ldr	r3, [r3]
  13366c:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  133670:	e51b3010 	ldr	r3, [fp, #-16]
  133674:	e3530000 	cmp	r3, #0
  133678:	1affffe9 	bne	133624 <ip_reass_chain_frag_into_datagram_and_validate+0x368>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
  13367c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133680:	e3530000 	cmp	r3, #0
  133684:	0a000030 	beq	13374c <ip_reass_chain_frag_into_datagram_and_validate+0x490>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
  133688:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13368c:	e5933004 	ldr	r3, [r3, #4]
  133690:	e3530000 	cmp	r3, #0
  133694:	1a000006 	bne	1336b4 <ip_reass_chain_frag_into_datagram_and_validate+0x3f8>
  133698:	e3090a24 	movw	r0, #39460	; 0x9a24
  13369c:	e3400014 	movt	r0, #20
  1336a0:	ebff3e9b 	bl	103114 <rt_kprintf>
  1336a4:	e3a01f71 	mov	r1, #452	; 0x1c4
  1336a8:	e3090928 	movw	r0, #39208	; 0x9928
  1336ac:	e3400014 	movt	r0, #20
  1336b0:	ebff5e7f 	bl	10b0b4 <sys_arch_assert>
          LWIP_ASSERT("sanity check",
  1336b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1336b8:	e5933004 	ldr	r3, [r3, #4]
  1336bc:	e5933004 	ldr	r3, [r3, #4]
  1336c0:	e51b2008 	ldr	r2, [fp, #-8]
  1336c4:	e1520003 	cmp	r2, r3
  1336c8:	1a000006 	bne	1336e8 <ip_reass_chain_frag_into_datagram_and_validate+0x42c>
  1336cc:	e3090a24 	movw	r0, #39460	; 0x9a24
  1336d0:	e3400014 	movt	r0, #20
  1336d4:	ebff3e8e 	bl	103114 <rt_kprintf>
  1336d8:	e30011c6 	movw	r1, #454	; 0x1c6
  1336dc:	e3090928 	movw	r0, #39208	; 0x9928
  1336e0:	e3400014 	movt	r0, #20
  1336e4:	ebff5e72 	bl	10b0b4 <sys_arch_assert>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
  1336e8:	e51b3008 	ldr	r3, [fp, #-8]
  1336ec:	e5933000 	ldr	r3, [r3]
  1336f0:	e3530000 	cmp	r3, #0
  1336f4:	0a000006 	beq	133714 <ip_reass_chain_frag_into_datagram_and_validate+0x458>
  1336f8:	e3090a34 	movw	r0, #39476	; 0x9a34
  1336fc:	e3400014 	movt	r0, #20
  133700:	ebff3e83 	bl	103114 <rt_kprintf>
  133704:	e3a01f72 	mov	r1, #456	; 0x1c8
  133708:	e3090928 	movw	r0, #39208	; 0x9928
  13370c:	e3400014 	movt	r0, #20
  133710:	ebff5e67 	bl	10b0b4 <sys_arch_assert>
            iprh->next_pbuf == NULL);
          LWIP_ASSERT("validate_datagram:datagram end!=datagram len",
  133714:	e51b3008 	ldr	r3, [fp, #-8]
  133718:	e1d330b6 	ldrh	r3, [r3, #6]
  13371c:	e6ff2073 	uxth	r2, r3
  133720:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133724:	e1d331bc 	ldrh	r3, [r3, #28]
  133728:	e1520003 	cmp	r2, r3
  13372c:	0a000006 	beq	13374c <ip_reass_chain_frag_into_datagram_and_validate+0x490>
  133730:	e3090a58 	movw	r0, #39512	; 0x9a58
  133734:	e3400014 	movt	r0, #20
  133738:	ebff3e75 	bl	103114 <rt_kprintf>
  13373c:	e30011ca 	movw	r1, #458	; 0x1ca
  133740:	e3090928 	movw	r0, #39208	; 0x9928
  133744:	e3400014 	movt	r0, #20
  133748:	ebff5e59 	bl	10b0b4 <sys_arch_assert>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
  13374c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133750:	ea000015 	b	1337ac <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
  133754:	e3a03000 	mov	r3, #0
  133758:	ea000013 	b	1337ac <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  13375c:	e320f000 	nop	{0}
  133760:	ea000002 	b	133770 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  133764:	e320f000 	nop	{0}
  133768:	ea000000 	b	133770 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  13376c:	e320f000 	nop	{0}
  ip_reass_pbufcount -= pbuf_clen(new_p);
  133770:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  133774:	ebff9e43 	bl	11b088 <pbuf_clen>
  133778:	e1a03000 	mov	r3, r0
  13377c:	e1a02003 	mov	r2, r3
  133780:	e30e3c10 	movw	r3, #60432	; 0xec10
  133784:	e3403014 	movt	r3, #20
  133788:	e1d330b0 	ldrh	r3, [r3]
  13378c:	e0433002 	sub	r3, r3, r2
  133790:	e6ff2073 	uxth	r2, r3
  133794:	e30e3c10 	movw	r3, #60432	; 0xec10
  133798:	e3403014 	movt	r3, #20
  13379c:	e1c320b0 	strh	r2, [r3]
  pbuf_free(new_p);
  1337a0:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1337a4:	ebff9db2 	bl	11ae74 <pbuf_free>
  return 0;
  1337a8:	e3a03000 	mov	r3, #0
#endif /* IP_REASS_CHECK_OVERLAP */
}
  1337ac:	e1a00003 	mov	r0, r3
  1337b0:	e24bd004 	sub	sp, fp, #4
  1337b4:	e8bd8800 	pop	{fp, pc}

001337b8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
  1337b8:	e92d4800 	push	{fp, lr}
  1337bc:	e28db004 	add	fp, sp, #4
  1337c0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1337c4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;

  IPFRAG_STATS_INC(ip_frag.recv);
  1337c8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1337cc:	e3403015 	movt	r3, #21
  1337d0:	e1d333b2 	ldrh	r3, [r3, #50]	; 0x32
  1337d4:	e2833001 	add	r3, r3, #1
  1337d8:	e6ff2073 	uxth	r2, r3
  1337dc:	e30c3a48 	movw	r3, #51784	; 0xca48
  1337e0:	e3403015 	movt	r3, #21
  1337e4:	e1c323b2 	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);
  1337e8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1337ec:	e3403015 	movt	r3, #21
  1337f0:	e5933160 	ldr	r3, [r3, #352]	; 0x160
  1337f4:	e2832001 	add	r2, r3, #1
  1337f8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1337fc:	e3403015 	movt	r3, #21
  133800:	e5832160 	str	r2, [r3, #352]	; 0x160

  fraghdr = (struct ip_hdr*)p->payload;
  133804:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133808:	e5933004 	ldr	r3, [r3, #4]
  13380c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  133810:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133814:	e5d33000 	ldrb	r3, [r3]
  133818:	e203300f 	and	r3, r3, #15
  13381c:	e1a03103 	lsl	r3, r3, #2
  133820:	e3530014 	cmp	r3, #20
  133824:	0a000008 	beq	13384c <ip4_reass+0x94>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
  133828:	e30c3a48 	movw	r3, #51784	; 0xca48
  13382c:	e3403015 	movt	r3, #21
  133830:	e1d334b4 	ldrh	r3, [r3, #68]	; 0x44
  133834:	e2833001 	add	r3, r3, #1
  133838:	e6ff2073 	uxth	r2, r3
  13383c:	e30c3a48 	movw	r3, #51784	; 0xca48
  133840:	e3403015 	movt	r3, #21
  133844:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    goto nullreturn;
  133848:	ea00011e 	b	133cc8 <ip4_reass+0x510>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  13384c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133850:	e1d330b6 	ldrh	r3, [r3, #6]
  133854:	e6ff3073 	uxth	r3, r3
  133858:	e1a00003 	mov	r0, r3
  13385c:	ebff8b4d 	bl	116598 <lwip_htons>
  133860:	e1a03000 	mov	r3, r0
  133864:	e7ec3053 	ubfx	r3, r3, #0, #13
  133868:	e6ff3073 	uxth	r3, r3
  13386c:	e1a03183 	lsl	r3, r3, #3
  133870:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  133874:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133878:	e1d330b2 	ldrh	r3, [r3, #2]
  13387c:	e6ff3073 	uxth	r3, r3
  133880:	e1a00003 	mov	r0, r3
  133884:	ebff8b43 	bl	116598 <lwip_htons>
  133888:	e1a03000 	mov	r3, r0
  13388c:	e1a02003 	mov	r2, r3
  133890:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133894:	e5d33000 	ldrb	r3, [r3]
  133898:	e6ff3073 	uxth	r3, r3
  13389c:	e203300f 	and	r3, r3, #15
  1338a0:	e6ff3073 	uxth	r3, r3
  1338a4:	e1a03103 	lsl	r3, r3, #2
  1338a8:	e6ff3073 	uxth	r3, r3
  1338ac:	e0423003 	sub	r3, r2, r3
  1338b0:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  1338b4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1338b8:	ebff9df2 	bl	11b088 <pbuf_clen>
  1338bc:	e1a03000 	mov	r3, r0
  1338c0:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  1338c4:	e30e3c10 	movw	r3, #60432	; 0xec10
  1338c8:	e3403014 	movt	r3, #20
  1338cc:	e1d330b0 	ldrh	r3, [r3]
  1338d0:	e1a02003 	mov	r2, r3
  1338d4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1338d8:	e0823003 	add	r3, r2, r3
  1338dc:	e353000a 	cmp	r3, #10
  1338e0:	da000017 	ble	133944 <ip4_reass+0x18c>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  1338e4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1338e8:	e1a01003 	mov	r1, r3
  1338ec:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1338f0:	ebfffdac 	bl	132fa8 <ip_reass_remove_oldest_datagram>
  1338f4:	e1a03000 	mov	r3, r0
  1338f8:	e3530000 	cmp	r3, #0
  1338fc:	0a000007 	beq	133920 <ip4_reass+0x168>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  133900:	e30e3c10 	movw	r3, #60432	; 0xec10
  133904:	e3403014 	movt	r3, #20
  133908:	e1d330b0 	ldrh	r3, [r3]
  13390c:	e1a02003 	mov	r2, r3
  133910:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133914:	e0823003 	add	r3, r2, r3
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  133918:	e353000a 	cmp	r3, #10
  13391c:	da000008 	ble	133944 <ip4_reass+0x18c>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
  133920:	e30c3a48 	movw	r3, #51784	; 0xca48
  133924:	e3403015 	movt	r3, #21
  133928:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  13392c:	e2833001 	add	r3, r3, #1
  133930:	e6ff2073 	uxth	r2, r3
  133934:	e30c3a48 	movw	r3, #51784	; 0xca48
  133938:	e3403015 	movt	r3, #21
  13393c:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
  133940:	ea0000e0 	b	133cc8 <ip4_reass+0x510>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  133944:	e30e3c0c 	movw	r3, #60428	; 0xec0c
  133948:	e3403014 	movt	r3, #20
  13394c:	e5933000 	ldr	r3, [r3]
  133950:	e50b300c 	str	r3, [fp, #-12]
  133954:	ea00001e 	b	1339d4 <ip4_reass+0x21c>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  133958:	e51b300c 	ldr	r3, [fp, #-12]
  13395c:	e5932014 	ldr	r2, [r3, #20]
  133960:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133964:	e593300c 	ldr	r3, [r3, #12]
  133968:	e1520003 	cmp	r2, r3
  13396c:	1a000015 	bne	1339c8 <ip4_reass+0x210>
  133970:	e51b300c 	ldr	r3, [fp, #-12]
  133974:	e5932018 	ldr	r2, [r3, #24]
  133978:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13397c:	e5933010 	ldr	r3, [r3, #16]
  133980:	e1520003 	cmp	r2, r3
  133984:	1a00000f 	bne	1339c8 <ip4_reass+0x210>
  133988:	e51b300c 	ldr	r3, [fp, #-12]
  13398c:	e1d320bc 	ldrh	r2, [r3, #12]
  133990:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133994:	e1d330b4 	ldrh	r3, [r3, #4]
  133998:	e6ff3073 	uxth	r3, r3
  13399c:	e1520003 	cmp	r2, r3
  1339a0:	1a000008 	bne	1339c8 <ip4_reass+0x210>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
  1339a4:	e30c3a48 	movw	r3, #51784	; 0xca48
  1339a8:	e3403015 	movt	r3, #21
  1339ac:	e1d334b6 	ldrh	r3, [r3, #70]	; 0x46
  1339b0:	e2833001 	add	r3, r3, #1
  1339b4:	e6ff2073 	uxth	r2, r3
  1339b8:	e30c3a48 	movw	r3, #51784	; 0xca48
  1339bc:	e3403015 	movt	r3, #21
  1339c0:	e1c324b6 	strh	r2, [r3, #70]	; 0x46
      break;
  1339c4:	ea000005 	b	1339e0 <ip4_reass+0x228>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  1339c8:	e51b300c 	ldr	r3, [fp, #-12]
  1339cc:	e5933000 	ldr	r3, [r3]
  1339d0:	e50b300c 	str	r3, [fp, #-12]
  1339d4:	e51b300c 	ldr	r3, [fp, #-12]
  1339d8:	e3530000 	cmp	r3, #0
  1339dc:	1affffdd 	bne	133958 <ip4_reass+0x1a0>
    }
  }

  if (ipr == NULL) {
  1339e0:	e51b300c 	ldr	r3, [fp, #-12]
  1339e4:	e3530000 	cmp	r3, #0
  1339e8:	1a000008 	bne	133a10 <ip4_reass+0x258>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
  1339ec:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1339f0:	e1a01003 	mov	r1, r3
  1339f4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1339f8:	ebfffdc8 	bl	133120 <ip_reass_enqueue_new_datagram>
  1339fc:	e50b000c 	str	r0, [fp, #-12]
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
  133a00:	e51b300c 	ldr	r3, [fp, #-12]
  133a04:	e3530000 	cmp	r3, #0
  133a08:	1a000017 	bne	133a6c <ip4_reass+0x2b4>
      goto nullreturn;
  133a0c:	ea0000ad 	b	133cc8 <ip4_reass+0x510>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  133a10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133a14:	e1d330b6 	ldrh	r3, [r3, #6]
  133a18:	e6ff3073 	uxth	r3, r3
  133a1c:	e1a00003 	mov	r0, r3
  133a20:	ebff8adc 	bl	116598 <lwip_htons>
  133a24:	e1a03000 	mov	r3, r0
  133a28:	e7ec3053 	ubfx	r3, r3, #0, #13
  133a2c:	e3530000 	cmp	r3, #0
  133a30:	1a00000d 	bne	133a6c <ip4_reass+0x2b4>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  133a34:	e51b300c 	ldr	r3, [fp, #-12]
  133a38:	e1d330be 	ldrh	r3, [r3, #14]
  133a3c:	e1a00003 	mov	r0, r3
  133a40:	ebff8ad4 	bl	116598 <lwip_htons>
  133a44:	e1a03000 	mov	r3, r0
  133a48:	e7ec3053 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  133a4c:	e3530000 	cmp	r3, #0
  133a50:	0a000005 	beq	133a6c <ip4_reass+0x2b4>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  133a54:	e51b300c 	ldr	r3, [fp, #-12]
  133a58:	e2833008 	add	r3, r3, #8
  133a5c:	e3a02014 	mov	r2, #20
  133a60:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  133a64:	e1a00003 	mov	r0, r3
  133a68:	eb0034bb 	bl	140d5c <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
  133a6c:	e30e3c10 	movw	r3, #60432	; 0xec10
  133a70:	e3403014 	movt	r3, #20
  133a74:	e1d320b0 	ldrh	r2, [r3]
  133a78:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133a7c:	e0823003 	add	r3, r2, r3
  133a80:	e6ff2073 	uxth	r2, r3
  133a84:	e30e3c10 	movw	r3, #60432	; 0xec10
  133a88:	e3403014 	movt	r3, #20
  133a8c:	e1c320b0 	strh	r2, [r3]

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
  133a90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133a94:	e1d330b6 	ldrh	r3, [r3, #6]
  133a98:	e6ff3073 	uxth	r3, r3
  133a9c:	e2033020 	and	r3, r3, #32
  133aa0:	e3530000 	cmp	r3, #0
  133aa4:	1a00000b 	bne	133ad8 <ip4_reass+0x320>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  133aa8:	e51b300c 	ldr	r3, [fp, #-12]
  133aac:	e5d3301e 	ldrb	r3, [r3, #30]
  133ab0:	e3833001 	orr	r3, r3, #1
  133ab4:	e6ef2073 	uxtb	r2, r3
  133ab8:	e51b300c 	ldr	r3, [fp, #-12]
  133abc:	e5c3201e 	strb	r2, [r3, #30]
    ipr->datagram_len = offset + len;
  133ac0:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  133ac4:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  133ac8:	e0823003 	add	r3, r2, r3
  133acc:	e6ff2073 	uxth	r2, r3
  133ad0:	e51b300c 	ldr	r3, [fp, #-12]
  133ad4:	e1c321bc 	strh	r2, [r3, #28]
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
  133ad8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  133adc:	e51b000c 	ldr	r0, [fp, #-12]
  133ae0:	ebfffdf5 	bl	1332bc <ip_reass_chain_frag_into_datagram_and_validate>
  133ae4:	e1a03000 	mov	r3, r0
  133ae8:	e3530000 	cmp	r3, #0
  133aec:	0a000073 	beq	133cc0 <ip4_reass+0x508>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
  133af0:	e51b300c 	ldr	r3, [fp, #-12]
  133af4:	e1d331bc 	ldrh	r3, [r3, #28]
  133af8:	e2833014 	add	r3, r3, #20
  133afc:	e6ff2073 	uxth	r2, r3
  133b00:	e51b300c 	ldr	r3, [fp, #-12]
  133b04:	e1c321bc 	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  133b08:	e51b300c 	ldr	r3, [fp, #-12]
  133b0c:	e5933004 	ldr	r3, [r3, #4]
  133b10:	e5933004 	ldr	r3, [r3, #4]
  133b14:	e5933000 	ldr	r3, [r3]
  133b18:	e50b3008 	str	r3, [fp, #-8]

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
  133b1c:	e51b300c 	ldr	r3, [fp, #-12]
  133b20:	e5933004 	ldr	r3, [r3, #4]
  133b24:	e5933004 	ldr	r3, [r3, #4]
  133b28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  133b2c:	e51b300c 	ldr	r3, [fp, #-12]
  133b30:	e2833008 	add	r3, r3, #8
  133b34:	e3a02014 	mov	r2, #20
  133b38:	e1a01003 	mov	r1, r3
  133b3c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133b40:	eb003485 	bl	140d5c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
  133b44:	e51b300c 	ldr	r3, [fp, #-12]
  133b48:	e1d331bc 	ldrh	r3, [r3, #28]
  133b4c:	e1a00003 	mov	r0, r3
  133b50:	ebff8a90 	bl	116598 <lwip_htons>
  133b54:	e1a03000 	mov	r3, r0
  133b58:	e1a02003 	mov	r2, r3
  133b5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133b60:	e1c320b2 	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  133b64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133b68:	e3a02000 	mov	r2, #0
  133b6c:	e5c32006 	strb	r2, [r3, #6]
  133b70:	e3a02000 	mov	r2, #0
  133b74:	e5c32007 	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  133b78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133b7c:	e3a02000 	mov	r2, #0
  133b80:	e5c3200a 	strb	r2, [r3, #10]
  133b84:	e3a02000 	mov	r2, #0
  133b88:	e5c3200b 	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  133b8c:	e3a01014 	mov	r1, #20
  133b90:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133b94:	ebff938e 	bl	1189d4 <inet_chksum>
  133b98:	e1a03000 	mov	r3, r0
  133b9c:	e1a02003 	mov	r2, r3
  133ba0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133ba4:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
  133ba8:	e51b300c 	ldr	r3, [fp, #-12]
  133bac:	e5933004 	ldr	r3, [r3, #4]
  133bb0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
  133bb4:	ea00000b 	b	133be8 <ip4_reass+0x430>
      iprh = (struct ip_reass_helper*)r->payload;
  133bb8:	e51b3008 	ldr	r3, [fp, #-8]
  133bbc:	e5933004 	ldr	r3, [r3, #4]
  133bc0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
  133bc4:	e3e01013 	mvn	r1, #19
  133bc8:	e51b0008 	ldr	r0, [fp, #-8]
  133bcc:	ebff9c8a 	bl	11adfc <pbuf_header>
      pbuf_cat(p, r);
  133bd0:	e51b1008 	ldr	r1, [fp, #-8]
  133bd4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133bd8:	ebff9d5c 	bl	11b150 <pbuf_cat>
      r = iprh->next_pbuf;
  133bdc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133be0:	e5933000 	ldr	r3, [r3]
  133be4:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  133be8:	e51b3008 	ldr	r3, [fp, #-8]
  133bec:	e3530000 	cmp	r3, #0
  133bf0:	1afffff0 	bne	133bb8 <ip4_reass+0x400>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
  133bf4:	e30e3c0c 	movw	r3, #60428	; 0xec0c
  133bf8:	e3403014 	movt	r3, #20
  133bfc:	e5933000 	ldr	r3, [r3]
  133c00:	e51b200c 	ldr	r2, [fp, #-12]
  133c04:	e1520003 	cmp	r2, r3
  133c08:	1a000002 	bne	133c18 <ip4_reass+0x460>
      ipr_prev = NULL;
  133c0c:	e3a03000 	mov	r3, #0
  133c10:	e50b3010 	str	r3, [fp, #-16]
  133c14:	ea000011 	b	133c60 <ip4_reass+0x4a8>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  133c18:	e30e3c0c 	movw	r3, #60428	; 0xec0c
  133c1c:	e3403014 	movt	r3, #20
  133c20:	e5933000 	ldr	r3, [r3]
  133c24:	e50b3010 	str	r3, [fp, #-16]
  133c28:	ea000007 	b	133c4c <ip4_reass+0x494>
        if (ipr_prev->next == ipr) {
  133c2c:	e51b3010 	ldr	r3, [fp, #-16]
  133c30:	e5933000 	ldr	r3, [r3]
  133c34:	e51b200c 	ldr	r2, [fp, #-12]
  133c38:	e1520003 	cmp	r2, r3
  133c3c:	0a000006 	beq	133c5c <ip4_reass+0x4a4>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  133c40:	e51b3010 	ldr	r3, [fp, #-16]
  133c44:	e5933000 	ldr	r3, [r3]
  133c48:	e50b3010 	str	r3, [fp, #-16]
  133c4c:	e51b3010 	ldr	r3, [fp, #-16]
  133c50:	e3530000 	cmp	r3, #0
  133c54:	1afffff4 	bne	133c2c <ip4_reass+0x474>
  133c58:	ea000000 	b	133c60 <ip4_reass+0x4a8>
          break;
  133c5c:	e320f000 	nop	{0}
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
  133c60:	e51b1010 	ldr	r1, [fp, #-16]
  133c64:	e51b000c 	ldr	r0, [fp, #-12]
  133c68:	ebfffd6e 	bl	133228 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
  133c6c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133c70:	ebff9d04 	bl	11b088 <pbuf_clen>
  133c74:	e1a03000 	mov	r3, r0
  133c78:	e1a02003 	mov	r2, r3
  133c7c:	e30e3c10 	movw	r3, #60432	; 0xec10
  133c80:	e3403014 	movt	r3, #20
  133c84:	e1d330b0 	ldrh	r3, [r3]
  133c88:	e0433002 	sub	r3, r3, r2
  133c8c:	e6ff2073 	uxth	r2, r3
  133c90:	e30e3c10 	movw	r3, #60432	; 0xec10
  133c94:	e3403014 	movt	r3, #20
  133c98:	e1c320b0 	strh	r2, [r3]

    MIB2_STATS_INC(mib2.ipreasmoks);
  133c9c:	e30c3a48 	movw	r3, #51784	; 0xca48
  133ca0:	e3403015 	movt	r3, #21
  133ca4:	e593314c 	ldr	r3, [r3, #332]	; 0x14c
  133ca8:	e2832001 	add	r2, r3, #1
  133cac:	e30c3a48 	movw	r3, #51784	; 0xca48
  133cb0:	e3403015 	movt	r3, #21
  133cb4:	e583214c 	str	r2, [r3, #332]	; 0x14c

    /* Return the pbuf chain */
    return p;
  133cb8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133cbc:	ea00000c 	b	133cf4 <ip4_reass+0x53c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
  133cc0:	e3a03000 	mov	r3, #0
  133cc4:	ea00000a 	b	133cf4 <ip4_reass+0x53c>

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  133cc8:	e30c3a48 	movw	r3, #51784	; 0xca48
  133ccc:	e3403015 	movt	r3, #21
  133cd0:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  133cd4:	e2833001 	add	r3, r3, #1
  133cd8:	e6ff2073 	uxth	r2, r3
  133cdc:	e30c3a48 	movw	r3, #51784	; 0xca48
  133ce0:	e3403015 	movt	r3, #21
  133ce4:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
  133ce8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133cec:	ebff9c60 	bl	11ae74 <pbuf_free>
  return NULL;
  133cf0:	e3a03000 	mov	r3, #0
}
  133cf4:	e1a00003 	mov	r0, r3
  133cf8:	e24bd004 	sub	sp, fp, #4
  133cfc:	e8bd8800 	pop	{fp, pc}

00133d00 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
  133d00:	e92d4800 	push	{fp, lr}
  133d04:	e28db004 	add	fp, sp, #4
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
  133d08:	e3002286 	movw	r2, #646	; 0x286
  133d0c:	e3091928 	movw	r1, #39208	; 0x9928
  133d10:	e3401014 	movt	r1, #20
  133d14:	e3a00006 	mov	r0, #6
  133d18:	ebff94df 	bl	11909c <memp_malloc_fn>
  133d1c:	e1a03000 	mov	r3, r0
}
  133d20:	e1a00003 	mov	r0, r3
  133d24:	e8bd8800 	pop	{fp, pc}

00133d28 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
  133d28:	e92d4800 	push	{fp, lr}
  133d2c:	e28db004 	add	fp, sp, #4
  133d30:	e24dd008 	sub	sp, sp, #8
  133d34:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("p != NULL", p != NULL);
  133d38:	e51b3008 	ldr	r3, [fp, #-8]
  133d3c:	e3530000 	cmp	r3, #0
  133d40:	1a000006 	bne	133d60 <ip_frag_free_pbuf_custom_ref+0x38>
  133d44:	e3090a88 	movw	r0, #39560	; 0x9a88
  133d48:	e3400014 	movt	r0, #20
  133d4c:	ebff3cf0 	bl	103114 <rt_kprintf>
  133d50:	e300128d 	movw	r1, #653	; 0x28d
  133d54:	e3090928 	movw	r0, #39208	; 0x9928
  133d58:	e3400014 	movt	r0, #20
  133d5c:	ebff5cd4 	bl	10b0b4 <sys_arch_assert>
  memp_free(MEMP_FRAG_PBUF, p);
  133d60:	e51b1008 	ldr	r1, [fp, #-8]
  133d64:	e3a00006 	mov	r0, #6
  133d68:	ebff9533 	bl	11923c <memp_free>
}
  133d6c:	e320f000 	nop	{0}
  133d70:	e24bd004 	sub	sp, fp, #4
  133d74:	e8bd8800 	pop	{fp, pc}

00133d78 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
  133d78:	e92d4800 	push	{fp, lr}
  133d7c:	e28db004 	add	fp, sp, #4
  133d80:	e24dd010 	sub	sp, sp, #16
  133d84:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  133d88:	e51b3010 	ldr	r3, [fp, #-16]
  133d8c:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  133d90:	e51b3008 	ldr	r3, [fp, #-8]
  133d94:	e3530000 	cmp	r3, #0
  133d98:	1a000006 	bne	133db8 <ipfrag_free_pbuf_custom+0x40>
  133d9c:	e3090a94 	movw	r0, #39572	; 0x9a94
  133da0:	e3400014 	movt	r0, #20
  133da4:	ebff3cda 	bl	103114 <rt_kprintf>
  133da8:	e3001297 	movw	r1, #663	; 0x297
  133dac:	e3090928 	movw	r0, #39208	; 0x9928
  133db0:	e3400014 	movt	r0, #20
  133db4:	ebff5cbe 	bl	10b0b4 <sys_arch_assert>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  133db8:	e51b2008 	ldr	r2, [fp, #-8]
  133dbc:	e51b3010 	ldr	r3, [fp, #-16]
  133dc0:	e1520003 	cmp	r2, r3
  133dc4:	0a000006 	beq	133de4 <ipfrag_free_pbuf_custom+0x6c>
  133dc8:	e3090aa0 	movw	r0, #39584	; 0x9aa0
  133dcc:	e3400014 	movt	r0, #20
  133dd0:	ebff3ccf 	bl	103114 <rt_kprintf>
  133dd4:	e3a01fa6 	mov	r1, #664	; 0x298
  133dd8:	e3090928 	movw	r0, #39208	; 0x9928
  133ddc:	e3400014 	movt	r0, #20
  133de0:	ebff5cb3 	bl	10b0b4 <sys_arch_assert>
  if (pcr->original != NULL) {
  133de4:	e51b3008 	ldr	r3, [fp, #-8]
  133de8:	e5933014 	ldr	r3, [r3, #20]
  133dec:	e3530000 	cmp	r3, #0
  133df0:	0a000003 	beq	133e04 <ipfrag_free_pbuf_custom+0x8c>
    pbuf_free(pcr->original);
  133df4:	e51b3008 	ldr	r3, [fp, #-8]
  133df8:	e5933014 	ldr	r3, [r3, #20]
  133dfc:	e1a00003 	mov	r0, r3
  133e00:	ebff9c1b 	bl	11ae74 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
  133e04:	e51b0008 	ldr	r0, [fp, #-8]
  133e08:	ebffffc6 	bl	133d28 <ip_frag_free_pbuf_custom_ref>
}
  133e0c:	e320f000 	nop	{0}
  133e10:	e24bd004 	sub	sp, fp, #4
  133e14:	e8bd8800 	pop	{fp, pc}

00133e18 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
  133e18:	e92d4800 	push	{fp, lr}
  133e1c:	e28db004 	add	fp, sp, #4
  133e20:	e24dd048 	sub	sp, sp, #72	; 0x48
  133e24:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  133e28:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  133e2c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
  133e30:	e3a03000 	mov	r3, #0
  133e34:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
  133e38:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  133e3c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  133e40:	e2433014 	sub	r3, r3, #20
  133e44:	e2832007 	add	r2, r3, #7
  133e48:	e3530000 	cmp	r3, #0
  133e4c:	b1a03002 	movlt	r3, r2
  133e50:	a1a03003 	movge	r3, r3
  133e54:	e1a031c3 	asr	r3, r3, #3
  133e58:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  133e5c:	e3a03014 	mov	r3, #20
  133e60:	e14b30be 	strh	r3, [fp, #-14]
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
  133e64:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133e68:	e5933004 	ldr	r3, [r3, #4]
  133e6c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  iphdr = original_iphdr;
  133e70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133e74:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
  133e78:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133e7c:	e5d33000 	ldrb	r3, [r3]
  133e80:	e203300f 	and	r3, r3, #15
  133e84:	e1a03103 	lsl	r3, r3, #2
  133e88:	e3530014 	cmp	r3, #20
  133e8c:	0a000008 	beq	133eb4 <ip4_frag+0x9c>
  133e90:	e3090aac 	movw	r0, #39596	; 0x9aac
  133e94:	e3400014 	movt	r0, #20
  133e98:	ebff3c9d 	bl	103114 <rt_kprintf>
  133e9c:	e3a01d0b 	mov	r1, #704	; 0x2c0
  133ea0:	e3090928 	movw	r0, #39208	; 0x9928
  133ea4:	e3400014 	movt	r0, #20
  133ea8:	ebff5c81 	bl	10b0b4 <sys_arch_assert>
  133eac:	e3e03005 	mvn	r3, #5
  133eb0:	ea0000ed 	b	13426c <ip4_frag+0x454>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  133eb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133eb8:	e1d330b6 	ldrh	r3, [r3, #6]
  133ebc:	e6ff3073 	uxth	r3, r3
  133ec0:	e1a00003 	mov	r0, r3
  133ec4:	ebff89b3 	bl	116598 <lwip_htons>
  133ec8:	e1a03000 	mov	r3, r0
  133ecc:	e14b31b0 	strh	r3, [fp, #-16]
  ofo = tmp & IP_OFFMASK;
  133ed0:	e15b31b0 	ldrh	r3, [fp, #-16]
  133ed4:	e7ec3053 	ubfx	r3, r3, #0, #13
  133ed8:	e14b30bc 	strh	r3, [fp, #-12]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
  133edc:	e15b31b0 	ldrh	r3, [fp, #-16]
  133ee0:	e2033a02 	and	r3, r3, #8192	; 0x2000
  133ee4:	e3530000 	cmp	r3, #0
  133ee8:	0a000008 	beq	133f10 <ip4_frag+0xf8>
  133eec:	e3090ad4 	movw	r0, #39636	; 0x9ad4
  133ef0:	e3400014 	movt	r0, #20
  133ef4:	ebff3c86 	bl	103114 <rt_kprintf>
  133ef8:	e30012c5 	movw	r1, #709	; 0x2c5
  133efc:	e3090928 	movw	r0, #39208	; 0x9928
  133f00:	e3400014 	movt	r0, #20
  133f04:	ebff5c6a 	bl	10b0b4 <sys_arch_assert>
  133f08:	e3e03005 	mvn	r3, #5
  133f0c:	ea0000d6 	b	13426c <ip4_frag+0x454>

  left = p->tot_len - IP_HLEN;
  133f10:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133f14:	e1d330b8 	ldrh	r3, [r3, #8]
  133f18:	e2433014 	sub	r3, r3, #20
  133f1c:	e14b30ba 	strh	r3, [fp, #-10]

  while (left) {
  133f20:	ea0000bc 	b	134218 <ip4_frag+0x400>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
  133f24:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133f28:	e1a02183 	lsl	r2, r3, #3
  133f2c:	e15b30ba 	ldrh	r3, [fp, #-10]
  133f30:	e1520003 	cmp	r2, r3
  133f34:	b1a03002 	movlt	r3, r2
  133f38:	a1a03003 	movge	r3, r3
  133f3c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
  133f40:	e3a02000 	mov	r2, #0
  133f44:	e3a01014 	mov	r1, #20
  133f48:	e3a00002 	mov	r0, #2
  133f4c:	ebff98c1 	bl	11a258 <pbuf_alloc>
  133f50:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
    if (rambuf == NULL) {
  133f54:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133f58:	e3530000 	cmp	r3, #0
  133f5c:	0a0000b9 	beq	134248 <ip4_frag+0x430>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
  133f60:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133f64:	e1d330ba 	ldrh	r3, [r3, #10]
  133f68:	e3530013 	cmp	r3, #19
  133f6c:	8a000006 	bhi	133f8c <ip4_frag+0x174>
  133f70:	e3090af0 	movw	r0, #39664	; 0x9af0
  133f74:	e3400014 	movt	r0, #20
  133f78:	ebff3c65 	bl	103114 <rt_kprintf>
  133f7c:	e3a01fba 	mov	r1, #744	; 0x2e8
  133f80:	e3090928 	movw	r0, #39208	; 0x9928
  133f84:	e3400014 	movt	r0, #20
  133f88:	ebff5c49 	bl	10b0b4 <sys_arch_assert>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  133f8c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133f90:	e5933004 	ldr	r3, [r3, #4]
  133f94:	e3a02014 	mov	r2, #20
  133f98:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  133f9c:	e1a00003 	mov	r0, r3
  133fa0:	eb00336d 	bl	140d5c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
  133fa4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133fa8:	e5933004 	ldr	r3, [r3, #4]
  133fac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    left_to_copy = fragsize;
  133fb0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  133fb4:	e14b30b8 	strh	r3, [fp, #-8]
    while (left_to_copy) {
  133fb8:	ea000049 	b	1340e4 <ip4_frag+0x2cc>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
  133fbc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133fc0:	e1d320ba 	ldrh	r2, [r3, #10]
  133fc4:	e15b30be 	ldrh	r3, [fp, #-14]
  133fc8:	e0423003 	sub	r3, r2, r3
  133fcc:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
  133fd0:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  133fd4:	e15b30b8 	ldrh	r3, [fp, #-8]
  133fd8:	e1520003 	cmp	r2, r3
  133fdc:	31a03002 	movcc	r3, r2
  133fe0:	21a03003 	movcs	r3, r3
  133fe4:	e14b30b6 	strh	r3, [fp, #-6]
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
  133fe8:	e15b30b6 	ldrh	r3, [fp, #-6]
  133fec:	e3530000 	cmp	r3, #0
  133ff0:	1a000005 	bne	13400c <ip4_frag+0x1f4>
        poff = 0;
  133ff4:	e3a03000 	mov	r3, #0
  133ff8:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  133ffc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  134000:	e5933000 	ldr	r3, [r3]
  134004:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
        continue;
  134008:	ea000035 	b	1340e4 <ip4_frag+0x2cc>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
  13400c:	ebffff3b 	bl	133d00 <ip_frag_alloc_pbuf_custom_ref>
  134010:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
      if (pcr == NULL) {
  134014:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134018:	e3530000 	cmp	r3, #0
  13401c:	1a000002 	bne	13402c <ip4_frag+0x214>
        pbuf_free(rambuf);
  134020:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  134024:	ebff9b92 	bl	11ae74 <pbuf_free>
        goto memerr;
  134028:	ea000087 	b	13424c <ip4_frag+0x434>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  13402c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
        (u8_t*)p->payload + poff, newpbuflen);
  134030:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  134034:	e5932004 	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  134038:	e15b30be 	ldrh	r3, [fp, #-14]
  13403c:	e0823003 	add	r3, r2, r3
  134040:	e15b10b6 	ldrh	r1, [fp, #-6]
  134044:	e15b20b6 	ldrh	r2, [fp, #-6]
  134048:	e58d2004 	str	r2, [sp, #4]
  13404c:	e58d3000 	str	r3, [sp]
  134050:	e1a03000 	mov	r3, r0
  134054:	e3a02002 	mov	r2, #2
  134058:	e3a00004 	mov	r0, #4
  13405c:	ebff99e2 	bl	11a7ec <pbuf_alloced_custom>
  134060:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
      if (newpbuf == NULL) {
  134064:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  134068:	e3530000 	cmp	r3, #0
  13406c:	1a000004 	bne	134084 <ip4_frag+0x26c>
        ip_frag_free_pbuf_custom_ref(pcr);
  134070:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  134074:	ebffff2b 	bl	133d28 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
  134078:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  13407c:	ebff9b7c 	bl	11ae74 <pbuf_free>
        goto memerr;
  134080:	ea000071 	b	13424c <ip4_frag+0x434>
      }
      pbuf_ref(p);
  134084:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  134088:	ebff9c13 	bl	11b0dc <pbuf_ref>
      pcr->original = p;
  13408c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134090:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  134094:	e5832014 	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
  134098:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  13409c:	e3033d78 	movw	r3, #15736	; 0x3d78
  1340a0:	e3403013 	movt	r3, #19
  1340a4:	e5823010 	str	r3, [r2, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
  1340a8:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1340ac:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  1340b0:	ebff9c26 	bl	11b150 <pbuf_cat>
      left_to_copy -= newpbuflen;
  1340b4:	e15b20b8 	ldrh	r2, [fp, #-8]
  1340b8:	e15b30b6 	ldrh	r3, [fp, #-6]
  1340bc:	e0423003 	sub	r3, r2, r3
  1340c0:	e14b30b8 	strh	r3, [fp, #-8]
      if (left_to_copy) {
  1340c4:	e15b30b8 	ldrh	r3, [fp, #-8]
  1340c8:	e3530000 	cmp	r3, #0
  1340cc:	0a000004 	beq	1340e4 <ip4_frag+0x2cc>
        poff = 0;
  1340d0:	e3a03000 	mov	r3, #0
  1340d4:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  1340d8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1340dc:	e5933000 	ldr	r3, [r3]
  1340e0:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    while (left_to_copy) {
  1340e4:	e15b30b8 	ldrh	r3, [fp, #-8]
  1340e8:	e3530000 	cmp	r3, #0
  1340ec:	1affffb2 	bne	133fbc <ip4_frag+0x1a4>
      }
    }
    poff += newpbuflen;
  1340f0:	e15b20be 	ldrh	r2, [fp, #-14]
  1340f4:	e15b30b6 	ldrh	r3, [fp, #-6]
  1340f8:	e0823003 	add	r3, r2, r3
  1340fc:	e14b30be 	strh	r3, [fp, #-14]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
  134100:	e15b20ba 	ldrh	r2, [fp, #-10]
  134104:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  134108:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  13410c:	e2433014 	sub	r3, r3, #20
  134110:	e1520003 	cmp	r2, r3
  134114:	d3a03001 	movle	r3, #1
  134118:	c3a03000 	movgt	r3, #0
  13411c:	e6ef3073 	uxtb	r3, r3
  134120:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
  134124:	e15b30bc 	ldrh	r3, [fp, #-12]
  134128:	e7ec3053 	ubfx	r3, r3, #0, #13
  13412c:	e14b31b0 	strh	r3, [fp, #-16]
    if (!last) {
  134130:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134134:	e3530000 	cmp	r3, #0
  134138:	1a000002 	bne	134148 <ip4_frag+0x330>
      tmp = tmp | IP_MF;
  13413c:	e15b31b0 	ldrh	r3, [fp, #-16]
  134140:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  134144:	e14b31b0 	strh	r3, [fp, #-16]
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
  134148:	e15b31b0 	ldrh	r3, [fp, #-16]
  13414c:	e1a00003 	mov	r0, r3
  134150:	ebff8910 	bl	116598 <lwip_htons>
  134154:	e1a03000 	mov	r3, r0
  134158:	e1a02003 	mov	r2, r3
  13415c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134160:	e1c320b6 	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
  134164:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  134168:	e2833014 	add	r3, r3, #20
  13416c:	e6ff3073 	uxth	r3, r3
  134170:	e1a00003 	mov	r0, r3
  134174:	ebff8907 	bl	116598 <lwip_htons>
  134178:	e1a03000 	mov	r3, r0
  13417c:	e1a02003 	mov	r2, r3
  134180:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134184:	e1c320b2 	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  134188:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13418c:	e3a02000 	mov	r2, #0
  134190:	e5c3200a 	strb	r2, [r3, #10]
  134194:	e3a02000 	mov	r2, #0
  134198:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  13419c:	e3a01014 	mov	r1, #20
  1341a0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1341a4:	ebff920a 	bl	1189d4 <inet_chksum>
  1341a8:	e1a03000 	mov	r3, r0
  1341ac:	e1a02003 	mov	r2, r3
  1341b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1341b4:	e1c320ba 	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  1341b8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1341bc:	e5933014 	ldr	r3, [r3, #20]
  1341c0:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  1341c4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1341c8:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  1341cc:	e12fff33 	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
  1341d0:	e30c3a48 	movw	r3, #51784	; 0xca48
  1341d4:	e3403015 	movt	r3, #21
  1341d8:	e1d333b0 	ldrh	r3, [r3, #48]	; 0x30
  1341dc:	e2833001 	add	r3, r3, #1
  1341e0:	e6ff2073 	uxth	r2, r3
  1341e4:	e30c3a48 	movw	r3, #51784	; 0xca48
  1341e8:	e3403015 	movt	r3, #21
  1341ec:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
  1341f0:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  1341f4:	ebff9b1e 	bl	11ae74 <pbuf_free>
    left -= fragsize;
  1341f8:	e15b20ba 	ldrh	r2, [fp, #-10]
  1341fc:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  134200:	e0423003 	sub	r3, r2, r3
  134204:	e14b30ba 	strh	r3, [fp, #-10]
    ofo += nfb;
  134208:	e15b20bc 	ldrh	r2, [fp, #-12]
  13420c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  134210:	e0823003 	add	r3, r2, r3
  134214:	e14b30bc 	strh	r3, [fp, #-12]
  while (left) {
  134218:	e15b30ba 	ldrh	r3, [fp, #-10]
  13421c:	e3530000 	cmp	r3, #0
  134220:	1affff3f 	bne	133f24 <ip4_frag+0x10c>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  134224:	e30c3a48 	movw	r3, #51784	; 0xca48
  134228:	e3403015 	movt	r3, #21
  13422c:	e5933154 	ldr	r3, [r3, #340]	; 0x154
  134230:	e2832001 	add	r2, r3, #1
  134234:	e30c3a48 	movw	r3, #51784	; 0xca48
  134238:	e3403015 	movt	r3, #21
  13423c:	e5832154 	str	r2, [r3, #340]	; 0x154
  return ERR_OK;
  134240:	e3a03000 	mov	r3, #0
  134244:	ea000008 	b	13426c <ip4_frag+0x454>
      goto memerr;
  134248:	e320f000 	nop	{0}
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  13424c:	e30c3a48 	movw	r3, #51784	; 0xca48
  134250:	e3403015 	movt	r3, #21
  134254:	e5933158 	ldr	r3, [r3, #344]	; 0x158
  134258:	e2832001 	add	r2, r3, #1
  13425c:	e30c3a48 	movw	r3, #51784	; 0xca48
  134260:	e3403015 	movt	r3, #21
  134264:	e5832158 	str	r2, [r3, #344]	; 0x158
  return ERR_MEM;
  134268:	e3e03000 	mvn	r3, #0
}
  13426c:	e1a00003 	mov	r0, r3
  134270:	e24bd004 	sub	sp, fp, #4
  134274:	e8bd8800 	pop	{fp, pc}

00134278 <ping_prepare_echo>:
    rt_uint8_t addr0, addr1, addr2, addr3;
};

/** Prepare a echo ICMP request */
static void ping_prepare_echo( struct icmp_echo_hdr *iecho, u16_t len)
{
  134278:	e92d4800 	push	{fp, lr}
  13427c:	e28db004 	add	fp, sp, #4
  134280:	e24dd010 	sub	sp, sp, #16
  134284:	e50b0010 	str	r0, [fp, #-16]
  134288:	e1a03001 	mov	r3, r1
  13428c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    size_t i;
    size_t data_len = len - sizeof(struct icmp_echo_hdr);
  134290:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  134294:	e2433008 	sub	r3, r3, #8
  134298:	e50b300c 	str	r3, [fp, #-12]

    ICMPH_TYPE_SET(iecho, ICMP_ECHO);
  13429c:	e51b3010 	ldr	r3, [fp, #-16]
  1342a0:	e3a02008 	mov	r2, #8
  1342a4:	e5c32000 	strb	r2, [r3]
    ICMPH_CODE_SET(iecho, 0);
  1342a8:	e51b3010 	ldr	r3, [fp, #-16]
  1342ac:	e3a02000 	mov	r2, #0
  1342b0:	e5c32001 	strb	r2, [r3, #1]
    iecho->chksum = 0;
  1342b4:	e51b3010 	ldr	r3, [fp, #-16]
  1342b8:	e3a02000 	mov	r2, #0
  1342bc:	e5c32002 	strb	r2, [r3, #2]
  1342c0:	e3a02000 	mov	r2, #0
  1342c4:	e5c32003 	strb	r2, [r3, #3]
    iecho->id     = PING_ID;
  1342c8:	e51b2010 	ldr	r2, [fp, #-16]
  1342cc:	e3a03000 	mov	r3, #0
  1342d0:	e1e03003 	mvn	r3, r3
  1342d4:	e2033050 	and	r3, r3, #80	; 0x50
  1342d8:	e1e03003 	mvn	r3, r3
  1342dc:	e5c23004 	strb	r3, [r2, #4]
  1342e0:	e3a03000 	mov	r3, #0
  1342e4:	e1e03003 	mvn	r3, r3
  1342e8:	e2033050 	and	r3, r3, #80	; 0x50
  1342ec:	e1e03003 	mvn	r3, r3
  1342f0:	e5c23005 	strb	r3, [r2, #5]
    iecho->seqno  = htons(++ping_seq_num);
  1342f4:	e30e3c12 	movw	r3, #60434	; 0xec12
  1342f8:	e3403014 	movt	r3, #20
  1342fc:	e1d330b0 	ldrh	r3, [r3]
  134300:	e2833001 	add	r3, r3, #1
  134304:	e6ff2073 	uxth	r2, r3
  134308:	e30e3c12 	movw	r3, #60434	; 0xec12
  13430c:	e3403014 	movt	r3, #20
  134310:	e1c320b0 	strh	r2, [r3]
  134314:	e30e3c12 	movw	r3, #60434	; 0xec12
  134318:	e3403014 	movt	r3, #20
  13431c:	e1d330b0 	ldrh	r3, [r3]
  134320:	e1a00003 	mov	r0, r3
  134324:	ebff889b 	bl	116598 <lwip_htons>
  134328:	e1a03000 	mov	r3, r0
  13432c:	e1a02003 	mov	r2, r3
  134330:	e51b3010 	ldr	r3, [fp, #-16]
  134334:	e1c320b6 	strh	r2, [r3, #6]

    /* fill the additional data buffer with some data */
    for (i = 0; i < data_len; i++)
  134338:	e3a03000 	mov	r3, #0
  13433c:	e50b3008 	str	r3, [fp, #-8]
  134340:	ea000009 	b	13436c <ping_prepare_echo+0xf4>
    {
        ((char*) iecho)[sizeof(struct icmp_echo_hdr) + i] = (char) i;
  134344:	e51b3008 	ldr	r3, [fp, #-8]
  134348:	e2833008 	add	r3, r3, #8
  13434c:	e51b2010 	ldr	r2, [fp, #-16]
  134350:	e0823003 	add	r3, r2, r3
  134354:	e51b2008 	ldr	r2, [fp, #-8]
  134358:	e6ef2072 	uxtb	r2, r2
  13435c:	e5c32000 	strb	r2, [r3]
    for (i = 0; i < data_len; i++)
  134360:	e51b3008 	ldr	r3, [fp, #-8]
  134364:	e2833001 	add	r3, r3, #1
  134368:	e50b3008 	str	r3, [fp, #-8]
  13436c:	e51b2008 	ldr	r2, [fp, #-8]
  134370:	e51b300c 	ldr	r3, [fp, #-12]
  134374:	e1520003 	cmp	r2, r3
  134378:	3afffff1 	bcc	134344 <ping_prepare_echo+0xcc>
    }

#ifdef RT_LWIP_USING_HW_CHECKSUM
      iecho->chksum = 0;
#else
      iecho->chksum = inet_chksum(iecho, len);
  13437c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  134380:	e1a01003 	mov	r1, r3
  134384:	e51b0010 	ldr	r0, [fp, #-16]
  134388:	ebff9191 	bl	1189d4 <inet_chksum>
  13438c:	e1a03000 	mov	r3, r0
  134390:	e1a02003 	mov	r2, r3
  134394:	e51b3010 	ldr	r3, [fp, #-16]
  134398:	e1c320b2 	strh	r2, [r3, #2]
#endif

}
  13439c:	e320f000 	nop	{0}
  1343a0:	e24bd004 	sub	sp, fp, #4
  1343a4:	e8bd8800 	pop	{fp, pc}

001343a8 <lwip_ping_send>:

#include <stdio.h>

/* Ping using the socket ip */
err_t lwip_ping_send(int s, ip_addr_t *addr, int size)
{
  1343a8:	e92d4800 	push	{fp, lr}
  1343ac:	e28db004 	add	fp, sp, #4
  1343b0:	e24dd038 	sub	sp, sp, #56	; 0x38
  1343b4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1343b8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1343bc:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    int err;
    struct icmp_echo_hdr *iecho;
    struct sockaddr_in to;
    int ping_size = sizeof(struct icmp_echo_hdr) + size;
  1343c0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1343c4:	e2833008 	add	r3, r3, #8
  1343c8:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("ping_size is too big", ping_size <= 0xffff);
  1343cc:	e51b3008 	ldr	r3, [fp, #-8]
  1343d0:	e3530801 	cmp	r3, #65536	; 0x10000
  1343d4:	ba000006 	blt	1343f4 <lwip_ping_send+0x4c>
  1343d8:	e3090b10 	movw	r0, #39696	; 0x9b10
  1343dc:	e3400014 	movt	r0, #20
  1343e0:	ebff3b4b 	bl	103114 <rt_kprintf>
  1343e4:	e3a01054 	mov	r1, #84	; 0x54
  1343e8:	e3090b28 	movw	r0, #39720	; 0x9b28
  1343ec:	e3400014 	movt	r0, #20
  1343f0:	ebff5b2f 	bl	10b0b4 <sys_arch_assert>

    iecho = rt_malloc(ping_size);
  1343f4:	e51b3008 	ldr	r3, [fp, #-8]
  1343f8:	e1a00003 	mov	r0, r3
  1343fc:	ebff3ae4 	bl	102f94 <rt_malloc>
  134400:	e50b000c 	str	r0, [fp, #-12]
    if (iecho == RT_NULL)
  134404:	e51b300c 	ldr	r3, [fp, #-12]
  134408:	e3530000 	cmp	r3, #0
  13440c:	1a000001 	bne	134418 <lwip_ping_send+0x70>
    {
        return ERR_MEM;
  134410:	e3e03000 	mvn	r3, #0
  134414:	ea00001e 	b	134494 <lwip_ping_send+0xec>
    }

    ping_prepare_echo(iecho, (u16_t) ping_size);
  134418:	e51b3008 	ldr	r3, [fp, #-8]
  13441c:	e6ff3073 	uxth	r3, r3
  134420:	e1a01003 	mov	r1, r3
  134424:	e51b000c 	ldr	r0, [fp, #-12]
  134428:	ebffff92 	bl	134278 <ping_prepare_echo>

    to.sin_len = sizeof(to);
  13442c:	e3a03010 	mov	r3, #16
  134430:	e54b3020 	strb	r3, [fp, #-32]	; 0xffffffe0
    to.sin_family = AF_INET;
  134434:	e3a03002 	mov	r3, #2
  134438:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
#if LWIP_IPV4 && LWIP_IPV6
    to.sin_addr.s_addr = addr->u_addr.ip4.addr;
#elif LWIP_IPV4
    to.sin_addr.s_addr = addr->addr;
  13443c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134440:	e5933000 	ldr	r3, [r3]
  134444:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#elif LWIP_IPV6
#error Not supported IPv6.
#endif

    err = lwip_sendto(s, iecho, ping_size, 0, (struct sockaddr*) &to, sizeof(to));
  134448:	e51b2008 	ldr	r2, [fp, #-8]
  13444c:	e3a03010 	mov	r3, #16
  134450:	e58d3004 	str	r3, [sp, #4]
  134454:	e24b3020 	sub	r3, fp, #32
  134458:	e58d3000 	str	r3, [sp]
  13445c:	e3a03000 	mov	r3, #0
  134460:	e51b100c 	ldr	r1, [fp, #-12]
  134464:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  134468:	ebff797a 	bl	112a58 <lwip_sendto>
  13446c:	e50b0010 	str	r0, [fp, #-16]
    rt_free(iecho);
  134470:	e51b000c 	ldr	r0, [fp, #-12]
  134474:	ebff3ad0 	bl	102fbc <rt_free>

    return (err == ping_size ? ERR_OK : ERR_VAL);
  134478:	e51b2010 	ldr	r2, [fp, #-16]
  13447c:	e51b3008 	ldr	r3, [fp, #-8]
  134480:	e1520003 	cmp	r2, r3
  134484:	1a000001 	bne	134490 <lwip_ping_send+0xe8>
  134488:	e3a03000 	mov	r3, #0
  13448c:	ea000000 	b	134494 <lwip_ping_send+0xec>
  134490:	e3e03005 	mvn	r3, #5
}
  134494:	e1a00003 	mov	r0, r3
  134498:	e24bd004 	sub	sp, fp, #4
  13449c:	e8bd8800 	pop	{fp, pc}

001344a0 <lwip_ping_recv>:

int lwip_ping_recv(int s, int *ttl)
{
  1344a0:	e92d4810 	push	{r4, fp, lr}
  1344a4:	e28db008 	add	fp, sp, #8
  1344a8:	e24dd074 	sub	sp, sp, #116	; 0x74
  1344ac:	e50b0070 	str	r0, [fp, #-112]	; 0xffffff90
  1344b0:	e50b1074 	str	r1, [fp, #-116]	; 0xffffff8c
    char buf[64];
    int fromlen = sizeof(struct sockaddr_in), len;
  1344b4:	e3a03010 	mov	r3, #16
  1344b8:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    struct sockaddr_in from;
    struct ip_hdr *iphdr;
    struct icmp_echo_hdr *iecho;

    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  1344bc:	ea000024 	b	134554 <lwip_ping_recv+0xb4>
    {
        if (len >= (int)(sizeof(struct ip_hdr) + sizeof(struct icmp_echo_hdr)))
  1344c0:	e51b3010 	ldr	r3, [fp, #-16]
  1344c4:	e353001b 	cmp	r3, #27
  1344c8:	da000021 	ble	134554 <lwip_ping_recv+0xb4>
        {
            iphdr = (struct ip_hdr *) buf;
  1344cc:	e24b3058 	sub	r3, fp, #88	; 0x58
  1344d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            iecho = (struct icmp_echo_hdr *) (buf + (IPH_HL(iphdr) * 4));
  1344d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1344d8:	e5d33000 	ldrb	r3, [r3]
  1344dc:	e203300f 	and	r3, r3, #15
  1344e0:	e1a03103 	lsl	r3, r3, #2
  1344e4:	e1a02003 	mov	r2, r3
  1344e8:	e24b3058 	sub	r3, fp, #88	; 0x58
  1344ec:	e0833002 	add	r3, r3, r2
  1344f0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            if ((iecho->id == PING_ID) && (iecho->seqno == htons(ping_seq_num)))
  1344f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1344f8:	e1d330b4 	ldrh	r3, [r3, #4]
  1344fc:	e6ff3073 	uxth	r3, r3
  134500:	e30a2faf 	movw	r2, #44975	; 0xafaf
  134504:	e1530002 	cmp	r3, r2
  134508:	1a000011 	bne	134554 <lwip_ping_recv+0xb4>
  13450c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134510:	e1d330b6 	ldrh	r3, [r3, #6]
  134514:	e6ff4073 	uxth	r4, r3
  134518:	e30e3c12 	movw	r3, #60434	; 0xec12
  13451c:	e3403014 	movt	r3, #20
  134520:	e1d330b0 	ldrh	r3, [r3]
  134524:	e1a00003 	mov	r0, r3
  134528:	ebff881a 	bl	116598 <lwip_htons>
  13452c:	e1a03000 	mov	r3, r0
  134530:	e1540003 	cmp	r4, r3
  134534:	1a000006 	bne	134554 <lwip_ping_recv+0xb4>
            {
                *ttl = iphdr->_ttl;
  134538:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13453c:	e5d33008 	ldrb	r3, [r3, #8]
  134540:	e1a02003 	mov	r2, r3
  134544:	e51b3074 	ldr	r3, [fp, #-116]	; 0xffffff8c
  134548:	e5832000 	str	r2, [r3]
                return len;
  13454c:	e51b3010 	ldr	r3, [fp, #-16]
  134550:	ea00000d 	b	13458c <lwip_ping_recv+0xec>
    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  134554:	e24b1058 	sub	r1, fp, #88	; 0x58
  134558:	e24b305c 	sub	r3, fp, #92	; 0x5c
  13455c:	e58d3004 	str	r3, [sp, #4]
  134560:	e24b306c 	sub	r3, fp, #108	; 0x6c
  134564:	e58d3000 	str	r3, [sp]
  134568:	e3a03000 	mov	r3, #0
  13456c:	e3a02040 	mov	r2, #64	; 0x40
  134570:	e51b0070 	ldr	r0, [fp, #-112]	; 0xffffff90
  134574:	ebff75cc 	bl	111cac <lwip_recvfrom>
  134578:	e50b0010 	str	r0, [fp, #-16]
  13457c:	e51b3010 	ldr	r3, [fp, #-16]
  134580:	e3530000 	cmp	r3, #0
  134584:	caffffcd 	bgt	1344c0 <lwip_ping_recv+0x20>
            }
        }
    }

    return len;
  134588:	e51b3010 	ldr	r3, [fp, #-16]
}
  13458c:	e1a00003 	mov	r0, r3
  134590:	e24bd008 	sub	sp, fp, #8
  134594:	e8bd8810 	pop	{r4, fp, pc}

00134598 <ENET_ActiveRead>:
 * @note This must be called after the MAC configuration and
 * state are ready. It must be called after the ENET_Init() and
 * ENET_Ptp1588Configure(). This should be called when the ENET receive required.
 */
static inline void ENET_ActiveRead(ENET_Type *base)
{
  134598:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13459c:	e28db000 	add	fp, sp, #0
  1345a0:	e24dd00c 	sub	sp, sp, #12
  1345a4:	e50b0008 	str	r0, [fp, #-8]
    base->RDAR = ENET_RDAR_RDAR_MASK;
  1345a8:	e51b3008 	ldr	r3, [fp, #-8]
  1345ac:	e3a02401 	mov	r2, #16777216	; 0x1000000
  1345b0:	e5832010 	str	r2, [r3, #16]
}
  1345b4:	e320f000 	nop	{0}
  1345b8:	e28bd000 	add	sp, fp, #0
  1345bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1345c0:	e12fff1e 	bx	lr

001345c4 <ENET_EnableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to enable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_EnableInterrupts(ENET_Type *base, uint32_t mask)
{
  1345c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1345c8:	e28db000 	add	fp, sp, #0
  1345cc:	e24dd00c 	sub	sp, sp, #12
  1345d0:	e50b0008 	str	r0, [fp, #-8]
  1345d4:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  1345d8:	e51b3008 	ldr	r3, [fp, #-8]
  1345dc:	e5932008 	ldr	r2, [r3, #8]
  1345e0:	e51b300c 	ldr	r3, [fp, #-12]
  1345e4:	e1822003 	orr	r2, r2, r3
  1345e8:	e51b3008 	ldr	r3, [fp, #-8]
  1345ec:	e5832008 	str	r2, [r3, #8]
}
  1345f0:	e320f000 	nop	{0}
  1345f4:	e28bd000 	add	sp, fp, #0
  1345f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1345fc:	e12fff1e 	bx	lr

00134600 <ENET_DisableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to disable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_DisableInterrupts(ENET_Type *base, uint32_t mask)
{
  134600:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  134604:	e28db000 	add	fp, sp, #0
  134608:	e24dd00c 	sub	sp, sp, #12
  13460c:	e50b0008 	str	r0, [fp, #-8]
  134610:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR &= ~mask;
  134614:	e51b3008 	ldr	r3, [fp, #-8]
  134618:	e5932008 	ldr	r2, [r3, #8]
  13461c:	e51b300c 	ldr	r3, [fp, #-12]
  134620:	e1e03003 	mvn	r3, r3
  134624:	e0022003 	and	r2, r2, r3
  134628:	e51b3008 	ldr	r3, [fp, #-8]
  13462c:	e5832008 	str	r2, [r3, #8]
}
  134630:	e320f000 	nop	{0}
  134634:	e28bd000 	add	sp, fp, #0
  134638:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  13463c:	e12fff1e 	bx	lr

00134640 <imx6ul_eth_link_change>:
#else
#define eth_device_linkchange(x, y)
#endif

void imx6ul_eth_link_change(struct rt_imx6ul_ethps *imx6ul_device,rt_bool_t up)
{
  134640:	e92d4800 	push	{fp, lr}
  134644:	e28db004 	add	fp, sp, #4
  134648:	e24dd008 	sub	sp, sp, #8
  13464c:	e50b0008 	str	r0, [fp, #-8]
  134650:	e50b100c 	str	r1, [fp, #-12]
    if(up)
  134654:	e51b300c 	ldr	r3, [fp, #-12]
  134658:	e3530000 	cmp	r3, #0
  13465c:	0a000013 	beq	1346b0 <imx6ul_eth_link_change+0x70>
    {
        LOG_D("enet%d link up",imx6ul_device->mac_num);
  134660:	e3090b6c 	movw	r0, #39788	; 0x9b6c
  134664:	e3400014 	movt	r0, #20
  134668:	ebff3aa9 	bl	103114 <rt_kprintf>
  13466c:	e51b3008 	ldr	r3, [fp, #-8]
  134670:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134674:	e1a01003 	mov	r1, r3
  134678:	e3090b80 	movw	r0, #39808	; 0x9b80
  13467c:	e3400014 	movt	r0, #20
  134680:	ebff3aa3 	bl	103114 <rt_kprintf>
  134684:	e3090b90 	movw	r0, #39824	; 0x9b90
  134688:	e3400014 	movt	r0, #20
  13468c:	ebff3aa0 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_TRUE);
  134690:	e51b3008 	ldr	r3, [fp, #-8]
  134694:	e3a01001 	mov	r1, #1
  134698:	e1a00003 	mov	r0, r3
  13469c:	ebffd532 	bl	129b6c <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_TRUE;
  1346a0:	e51b3008 	ldr	r3, [fp, #-8]
  1346a4:	e3a02001 	mov	r2, #1
  1346a8:	e5832088 	str	r2, [r3, #136]	; 0x88
    {
        LOG_D("enet%d link down",imx6ul_device->mac_num);
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
        imx6ul_device->phy_link_status = RT_FALSE;
    }
}
  1346ac:	ea000012 	b	1346fc <imx6ul_eth_link_change+0xbc>
        LOG_D("enet%d link down",imx6ul_device->mac_num);
  1346b0:	e3090b6c 	movw	r0, #39788	; 0x9b6c
  1346b4:	e3400014 	movt	r0, #20
  1346b8:	ebff3a95 	bl	103114 <rt_kprintf>
  1346bc:	e51b3008 	ldr	r3, [fp, #-8]
  1346c0:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  1346c4:	e1a01003 	mov	r1, r3
  1346c8:	e3090b98 	movw	r0, #39832	; 0x9b98
  1346cc:	e3400014 	movt	r0, #20
  1346d0:	ebff3a8f 	bl	103114 <rt_kprintf>
  1346d4:	e3090b90 	movw	r0, #39824	; 0x9b90
  1346d8:	e3400014 	movt	r0, #20
  1346dc:	ebff3a8c 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
  1346e0:	e51b3008 	ldr	r3, [fp, #-8]
  1346e4:	e3a01000 	mov	r1, #0
  1346e8:	e1a00003 	mov	r0, r3
  1346ec:	ebffd51e 	bl	129b6c <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_FALSE;
  1346f0:	e51b3008 	ldr	r3, [fp, #-8]
  1346f4:	e3a02000 	mov	r2, #0
  1346f8:	e5832088 	str	r2, [r3, #136]	; 0x88
}
  1346fc:	e320f000 	nop	{0}
  134700:	e24bd004 	sub	sp, fp, #4
  134704:	e8bd8800 	pop	{fp, pc}

00134708 <page_alloc>:

void page_alloc(size_t memsize, void **addr)
{
  134708:	e92d4800 	push	{fp, lr}
  13470c:	e28db004 	add	fp, sp, #4
  134710:	e24dd018 	sub	sp, sp, #24
  134714:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  134718:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    size_t alloc_size = memsize + SYS_PAGE_SIZE * 2;
  13471c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134720:	e2833a02 	add	r3, r3, #8192	; 0x2000
  134724:	e50b3008 	str	r3, [fp, #-8]
    void * addr_start = malloc(alloc_size);
  134728:	e51b0008 	ldr	r0, [fp, #-8]
  13472c:	eb0022f9 	bl	13d318 <malloc>
  134730:	e1a03000 	mov	r3, r0
  134734:	e50b300c 	str	r3, [fp, #-12]
    rt_memset(addr_start, 0, alloc_size);
  134738:	e51b2008 	ldr	r2, [fp, #-8]
  13473c:	e3a01000 	mov	r1, #0
  134740:	e51b000c 	ldr	r0, [fp, #-12]
  134744:	ebff3adf 	bl	1032c8 <rt_memset>

    long mask = SYS_PAGE_SIZE - 1;
  134748:	e3003fff 	movw	r3, #4095	; 0xfff
  13474c:	e50b3010 	str	r3, [fp, #-16]
    *addr = (void*)((long)(addr_start + SYS_PAGE_SIZE) & ~mask);
  134750:	e51b300c 	ldr	r3, [fp, #-12]
  134754:	e2833a01 	add	r3, r3, #4096	; 0x1000
  134758:	e1a02003 	mov	r2, r3
  13475c:	e51b3010 	ldr	r3, [fp, #-16]
  134760:	e1e03003 	mvn	r3, r3
  134764:	e0033002 	and	r3, r3, r2
  134768:	e1a02003 	mov	r2, r3
  13476c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134770:	e5832000 	str	r2, [r3]

    return;
  134774:	e320f000 	nop	{0}
}
  134778:	e24bd004 	sub	sp, fp, #4
  13477c:	e8bd8800 	pop	{fp, pc}

00134780 <enet_buffer_init>:

rt_err_t enet_buffer_init(enet_buffer_config_t *buffConfig)
{
  134780:	e92d4800 	push	{fp, lr}
  134784:	e28db004 	add	fp, sp, #4
  134788:	e24dd030 	sub	sp, sp, #48	; 0x30
  13478c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    void *tx_buff_addr = RT_NULL;
  134790:	e3a03000 	mov	r3, #0
  134794:	e50b3008 	str	r3, [fp, #-8]
    void *rx_buff_addr = RT_NULL;
  134798:	e3a03000 	mov	r3, #0
  13479c:	e50b300c 	str	r3, [fp, #-12]
    void *tx_bd_addr = RT_NULL;
  1347a0:	e3a03000 	mov	r3, #0
  1347a4:	e50b3010 	str	r3, [fp, #-16]
    void *rx_bd_addr = RT_NULL;
  1347a8:	e3a03000 	mov	r3, #0
  1347ac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  1347b0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1347b4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1347b8:	e3530701 	cmp	r3, #262144	; 0x40000
  1347bc:	8a000003 	bhi	1347d0 <enet_buffer_init+0x50>
       ((SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM)<buffConfig->txBufferTotalSize))
  1347c0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1347c4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  1347c8:	e3530701 	cmp	r3, #262144	; 0x40000
  1347cc:	9a00000a 	bls	1347fc <enet_buffer_init+0x7c>
    {
        LOG_E("ERROR: alloc mem not enough for enet driver");
  1347d0:	e3090bac 	movw	r0, #39852	; 0x9bac
  1347d4:	e3400014 	movt	r0, #20
  1347d8:	ebff3a4d 	bl	103114 <rt_kprintf>
  1347dc:	e3090bc0 	movw	r0, #39872	; 0x9bc0
  1347e0:	e3400014 	movt	r0, #20
  1347e4:	ebff3a4a 	bl	103114 <rt_kprintf>
  1347e8:	e3090b90 	movw	r0, #39824	; 0x9b90
  1347ec:	e3400014 	movt	r0, #20
  1347f0:	ebff3a47 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  1347f4:	e3a03001 	mov	r3, #1
  1347f8:	ea000093 	b	134a4c <enet_buffer_init+0x2cc>
    }

    size_t rx_buff_memsize = SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM;
  1347fc:	e3a03701 	mov	r3, #262144	; 0x40000
  134800:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    size_t tx_buff_memsize = SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM;
  134804:	e3a03701 	mov	r3, #262144	; 0x40000
  134808:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    size_t rx_bd_memsize = SYS_PAGE_SIZE<<RX_BD_INDEX_NUM;
  13480c:	e3a03a01 	mov	r3, #4096	; 0x1000
  134810:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    size_t tx_bd_memsize = SYS_PAGE_SIZE<<TX_BD_INDEX_NUM;
  134814:	e3a03a01 	mov	r3, #4096	; 0x1000
  134818:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    size_t total_memsize = rx_buff_memsize + tx_buff_memsize + rx_bd_memsize + tx_bd_memsize;
  13481c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  134820:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134824:	e0822003 	add	r2, r2, r3
  134828:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13482c:	e0823003 	add	r3, r2, r3
  134830:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134834:	e0823003 	add	r3, r2, r3
  134838:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    void *mem_align= RT_NULL;
  13483c:	e3a03000 	mov	r3, #0
  134840:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    page_alloc(total_memsize, &mem_align);
  134844:	e24b302c 	sub	r3, fp, #44	; 0x2c
  134848:	e1a01003 	mov	r1, r3
  13484c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  134850:	ebffffac 	bl	134708 <page_alloc>
    if (!mem_align)
  134854:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134858:	e3530000 	cmp	r3, #0
  13485c:	1a000001 	bne	134868 <enet_buffer_init+0xe8>
    {
        return RT_ERROR;
  134860:	e3a03001 	mov	r3, #1
  134864:	ea000078 	b	134a4c <enet_buffer_init+0x2cc>
    }
    
    rx_buff_addr = mem_align;
  134868:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13486c:	e50b300c 	str	r3, [fp, #-12]
    mem_align += rx_buff_memsize;
  134870:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134874:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134878:	e0823003 	add	r3, r2, r3
  13487c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_buff_addr)
  134880:	e51b300c 	ldr	r3, [fp, #-12]
  134884:	e3530000 	cmp	r3, #0
  134888:	1a00000a 	bne	1348b8 <enet_buffer_init+0x138>
    {
        LOG_E("ERROR: rx buff page alloc failed");
  13488c:	e3090bac 	movw	r0, #39852	; 0x9bac
  134890:	e3400014 	movt	r0, #20
  134894:	ebff3a1e 	bl	103114 <rt_kprintf>
  134898:	e3090bec 	movw	r0, #39916	; 0x9bec
  13489c:	e3400014 	movt	r0, #20
  1348a0:	ebff3a1b 	bl	103114 <rt_kprintf>
  1348a4:	e3090b90 	movw	r0, #39824	; 0x9b90
  1348a8:	e3400014 	movt	r0, #20
  1348ac:	ebff3a18 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  1348b0:	e3a03001 	mov	r3, #1
  1348b4:	ea000064 	b	134a4c <enet_buffer_init+0x2cc>
    }
    // buffConfig->rxBufferAlign = (void *)rt_ioremap_nocache(virtual_to_physical(rx_buff_addr), (SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM));
    // buffConfig->rxBufferAlign = ueth_remap(ueth_v2p(rx_buff_addr), UETH_REMAP_NOCACHE, rx_buff_memsize);
    buffConfig->rxBufferAlign = rx_buff_addr;
  1348b8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1348bc:	e51b200c 	ldr	r2, [fp, #-12]
  1348c0:	e5832014 	str	r2, [r3, #20]
    buffConfig->rxPhyBufferAlign = ueth_v2p(rx_buff_addr);
  1348c4:	e51b000c 	ldr	r0, [fp, #-12]
  1348c8:	ebff3ecc 	bl	104400 <ueth_v2p>
  1348cc:	e1a02000 	mov	r2, r0
  1348d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1348d4:	e5832024 	str	r2, [r3, #36]	; 0x24
    
    // tx_buff_addr = (void*)rt_pages_alloc(TX_BUFFER_INDEX_NUM);
    tx_buff_addr = mem_align;
  1348d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1348dc:	e50b3008 	str	r3, [fp, #-8]
    mem_align += tx_buff_memsize;
  1348e0:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1348e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1348e8:	e0823003 	add	r3, r2, r3
  1348ec:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!tx_buff_addr)
  1348f0:	e51b3008 	ldr	r3, [fp, #-8]
  1348f4:	e3530000 	cmp	r3, #0
  1348f8:	1a00000a 	bne	134928 <enet_buffer_init+0x1a8>
    {
        LOG_E("ERROR: tx buff page alloc failed");
  1348fc:	e3090bac 	movw	r0, #39852	; 0x9bac
  134900:	e3400014 	movt	r0, #20
  134904:	ebff3a02 	bl	103114 <rt_kprintf>
  134908:	e3090c10 	movw	r0, #39952	; 0x9c10
  13490c:	e3400014 	movt	r0, #20
  134910:	ebff39ff 	bl	103114 <rt_kprintf>
  134914:	e3090b90 	movw	r0, #39824	; 0x9b90
  134918:	e3400014 	movt	r0, #20
  13491c:	ebff39fc 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134920:	e3a03001 	mov	r3, #1
  134924:	ea000048 	b	134a4c <enet_buffer_init+0x2cc>
    }
    // buffConfig->txBufferAlign = (void *)rt_ioremap_nocache(virtual_to_physical(tx_buff_addr), (SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM));
    // buffConfig->txBufferAlign = ueth_remap(ueth_v2p(tx_buff_addr), UETH_REMAP_NOCACHE, tx_buff_memsize);
    buffConfig->txBufferAlign = tx_buff_addr;
  134928:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  13492c:	e51b2008 	ldr	r2, [fp, #-8]
  134930:	e5832018 	str	r2, [r3, #24]
    buffConfig->txPhyBufferAlign = ueth_v2p(tx_buff_addr);
  134934:	e51b0008 	ldr	r0, [fp, #-8]
  134938:	ebff3eb0 	bl	104400 <ueth_v2p>
  13493c:	e1a02000 	mov	r2, r0
  134940:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134944:	e5832028 	str	r2, [r3, #40]	; 0x28
    
    // rx_bd_addr = (void*)rt_pages_alloc(RX_BD_INDEX_NUM);
    rx_bd_addr = mem_align;
  134948:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13494c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    mem_align += rx_bd_memsize;
  134950:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134954:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134958:	e0823003 	add	r3, r2, r3
  13495c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_bd_addr)
  134960:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134964:	e3530000 	cmp	r3, #0
  134968:	1a00000a 	bne	134998 <enet_buffer_init+0x218>
    {
        LOG_E("ERROR: rx bd page alloc failed");
  13496c:	e3090bac 	movw	r0, #39852	; 0x9bac
  134970:	e3400014 	movt	r0, #20
  134974:	ebff39e6 	bl	103114 <rt_kprintf>
  134978:	e3090c34 	movw	r0, #39988	; 0x9c34
  13497c:	e3400014 	movt	r0, #20
  134980:	ebff39e3 	bl	103114 <rt_kprintf>
  134984:	e3090b90 	movw	r0, #39824	; 0x9b90
  134988:	e3400014 	movt	r0, #20
  13498c:	ebff39e0 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134990:	e3a03001 	mov	r3, #1
  134994:	ea00002c 	b	134a4c <enet_buffer_init+0x2cc>
    }
    buffConfig->rxPhyBdStartAddrAlign = ueth_v2p(rx_bd_addr);
  134998:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  13499c:	ebff3e97 	bl	104400 <ueth_v2p>
  1349a0:	e1a02000 	mov	r2, r0
  1349a4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1349a8:	e583201c 	str	r2, [r3, #28]
    buffConfig->rxBdStartAddrAlign = ueth_remap(buffConfig->rxPhyBdStartAddrAlign, UETH_REMAP_NOCACHE, rx_bd_memsize);
  1349ac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1349b0:	e593301c 	ldr	r3, [r3, #28]
  1349b4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1349b8:	e3a01003 	mov	r1, #3
  1349bc:	e1a00003 	mov	r0, r3
  1349c0:	ebff3ebb 	bl	1044b4 <ueth_remap>
  1349c4:	e1a02000 	mov	r2, r0
  1349c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1349cc:	e583200c 	str	r2, [r3, #12]
    // buffConfig->rxBdStartAddrAlign = (void *)rt_ioremap_nocache(virtual_to_physical(rx_bd_addr), (SYS_PAGE_SIZE<<RX_BD_INDEX_NUM));
    // buffConfig->rxBdStartAddrAlign = rx_bd_addr;
   
    // tx_bd_addr = (void*)rt_pages_alloc(TX_BD_INDEX_NUM);
    tx_bd_addr = mem_align;
  1349d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1349d4:	e50b3010 	str	r3, [fp, #-16]
    if(!tx_bd_addr)
  1349d8:	e51b3010 	ldr	r3, [fp, #-16]
  1349dc:	e3530000 	cmp	r3, #0
  1349e0:	1a00000a 	bne	134a10 <enet_buffer_init+0x290>
    {
        LOG_E("ERROR: tx bd page alloc failed");
  1349e4:	e3090bac 	movw	r0, #39852	; 0x9bac
  1349e8:	e3400014 	movt	r0, #20
  1349ec:	ebff39c8 	bl	103114 <rt_kprintf>
  1349f0:	e3090c54 	movw	r0, #40020	; 0x9c54
  1349f4:	e3400014 	movt	r0, #20
  1349f8:	ebff39c5 	bl	103114 <rt_kprintf>
  1349fc:	e3090b90 	movw	r0, #39824	; 0x9b90
  134a00:	e3400014 	movt	r0, #20
  134a04:	ebff39c2 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134a08:	e3a03001 	mov	r3, #1
  134a0c:	ea00000e 	b	134a4c <enet_buffer_init+0x2cc>
    }
    // buffConfig->txBdStartAddrAlign = (void *)rt_ioremap_nocache(virtual_to_physical(tx_bd_addr), (SYS_PAGE_SIZE<<TX_BD_INDEX_NUM));
    buffConfig->txPhyBdStartAddrAlign = ueth_v2p(tx_bd_addr);
  134a10:	e51b0010 	ldr	r0, [fp, #-16]
  134a14:	ebff3e79 	bl	104400 <ueth_v2p>
  134a18:	e1a02000 	mov	r2, r0
  134a1c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134a20:	e5832020 	str	r2, [r3, #32]
    buffConfig->txBdStartAddrAlign = ueth_remap(buffConfig->txPhyBdStartAddrAlign, UETH_REMAP_NOCACHE, tx_bd_memsize);
  134a24:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134a28:	e5933020 	ldr	r3, [r3, #32]
  134a2c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134a30:	e3a01003 	mov	r1, #3
  134a34:	e1a00003 	mov	r0, r3
  134a38:	ebff3e9d 	bl	1044b4 <ueth_remap>
  134a3c:	e1a02000 	mov	r2, r0
  134a40:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134a44:	e5832010 	str	r2, [r3, #16]
    // buffConfig->txBdStartAddrAlign = tx_bd_addr;
    
    return RT_EOK;
  134a48:	e3a03000 	mov	r3, #0
}
  134a4c:	e1a00003 	mov	r0, r3
  134a50:	e24bd004 	sub	sp, fp, #4
  134a54:	e8bd8800 	pop	{fp, pc}

00134a58 <rt_imx6ul_eth_init>:

/* EMAC initialization function */
static rt_err_t rt_imx6ul_eth_init(rt_device_t dev)
{
  134a58:	e92d4800 	push	{fp, lr}
  134a5c:	e28db004 	add	fp, sp, #4
  134a60:	e24dd038 	sub	sp, sp, #56	; 0x38
  134a64:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    rt_err_t state;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134a68:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134a6c:	e50b300c 	str	r3, [fp, #-12]
    ENET_Type *base_addr = RT_NULL;
  134a70:	e3a03000 	mov	r3, #0
  134a74:	e50b3010 	str	r3, [fp, #-16]
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    rt_uint32_t reg_value;

    // imx6ul_device->enet_virtual_base_addr = (ENET_Type *)rt_ioremap((void *)imx6ul_device->enet_phy_base_addr, SYS_PAGE_SIZE);
    imx6ul_device->enet_virtual_base_addr = (ENET_Type *)ueth_remap((void *)imx6ul_device->enet_phy_base_addr, UETH_REMAP, SYS_PAGE_SIZE);
  134a78:	e51b300c 	ldr	r3, [fp, #-12]
  134a7c:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  134a80:	e3a02a01 	mov	r2, #4096	; 0x1000
  134a84:	e3a01001 	mov	r1, #1
  134a88:	e1a00003 	mov	r0, r3
  134a8c:	ebff3e88 	bl	1044b4 <ueth_remap>
  134a90:	e1a02000 	mov	r2, r0
  134a94:	e51b300c 	ldr	r3, [fp, #-12]
  134a98:	e58320a0 	str	r2, [r3, #160]	; 0xa0
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134a9c:	e51b300c 	ldr	r3, [fp, #-12]
  134aa0:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134aa4:	e50b3010 	str	r3, [fp, #-16]
    config = &imx6ul_device->config;
  134aa8:	e51b300c 	ldr	r3, [fp, #-12]
  134aac:	e28330dc 	add	r3, r3, #220	; 0xdc
  134ab0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134ab4:	e51b300c 	ldr	r3, [fp, #-12]
  134ab8:	e2833c01 	add	r3, r3, #256	; 0x100
  134abc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  134ac0:	e51b300c 	ldr	r3, [fp, #-12]
  134ac4:	e28330a8 	add	r3, r3, #168	; 0xa8
  134ac8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  134acc:	e3a03000 	mov	r3, #0
  134ad0:	e50b3008 	str	r3, [fp, #-8]
  134ad4:	ea00000b 	b	134b08 <rt_imx6ul_eth_init+0xb0>
    {
        ueth_gpioinit((void *)&imx6ul_device->gpio[i], sizeof(imx6ul_device->gpio[i]));
  134ad8:	e51b3008 	ldr	r3, [fp, #-8]
  134adc:	e3a0201c 	mov	r2, #28
  134ae0:	e0030392 	mul	r3, r2, r3
  134ae4:	e2833e12 	add	r3, r3, #288	; 0x120
  134ae8:	e51b200c 	ldr	r2, [fp, #-12]
  134aec:	e0823003 	add	r3, r2, r3
  134af0:	e3a0101c 	mov	r1, #28
  134af4:	e1a00003 	mov	r0, r3
  134af8:	ebff3ea1 	bl	104584 <ueth_gpioinit>
    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  134afc:	e51b3008 	ldr	r3, [fp, #-8]
  134b00:	e2833001 	add	r3, r3, #1
  134b04:	e50b3008 	str	r3, [fp, #-8]
  134b08:	e51b3008 	ldr	r3, [fp, #-8]
  134b0c:	e3530008 	cmp	r3, #8
  134b10:	9afffff0 	bls	134ad8 <rt_imx6ul_eth_init+0x80>
    }
    
    IOMUXC_GPR_Type *GPR1 = (IOMUXC_GPR_Type *)ueth_remap((void *)IOMUXC_GPR, UETH_REMAP, 0x1000);
  134b14:	e3a02a01 	mov	r2, #4096	; 0x1000
  134b18:	e3a01001 	mov	r1, #1
  134b1c:	e3a00901 	mov	r0, #16384	; 0x4000
  134b20:	e340020e 	movt	r0, #526	; 0x20e
  134b24:	ebff3e62 	bl	1044b4 <ueth_remap>
  134b28:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    if(imx6ul_device->mac_num == 1)
  134b2c:	e51b300c 	ldr	r3, [fp, #-12]
  134b30:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134b34:	e3530001 	cmp	r3, #1
  134b38:	1a00000c 	bne	134b70 <rt_imx6ul_eth_init+0x118>
    {
        reg_value = GPR1->GPR1;
  134b3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134b40:	e5933004 	ldr	r3, [r3, #4]
  134b44:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK
  134b48:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134b4c:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
  134b50:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_TX_CLK_DIR(1);
  134b54:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134b58:	e3833802 	orr	r3, r3, #131072	; 0x20000
  134b5c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  134b60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134b64:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134b68:	e5832004 	str	r2, [r3, #4]
  134b6c:	ea00000f 	b	134bb0 <rt_imx6ul_eth_init+0x158>
    }
    else if(imx6ul_device->mac_num == 2)
  134b70:	e51b300c 	ldr	r3, [fp, #-12]
  134b74:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134b78:	e3530002 	cmp	r3, #2
  134b7c:	1a00000b 	bne	134bb0 <rt_imx6ul_eth_init+0x158>
    {
        reg_value = GPR1->GPR1;
  134b80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134b84:	e5933004 	ldr	r3, [r3, #4]
  134b88:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK
  134b8c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134b90:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  134b94:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_TX_CLK_DIR(1);
  134b98:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134b9c:	e3833701 	orr	r3, r3, #262144	; 0x40000
  134ba0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  134ba4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134ba8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134bac:	e5832004 	str	r2, [r3, #4]
    } 

    // ENET_InitModuleClock();
    ueth_init_clock();
  134bb0:	ebff3ea1 	bl	10463c <ueth_init_clock>
    ENET_GetDefaultConfig(config);
  134bb4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  134bb8:	eb00047c 	bl	135db0 <ENET_GetDefaultConfig>
    config->interrupt |= (ENET_RX_INTERRUPT);
  134bbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134bc0:	e5933004 	ldr	r3, [r3, #4]
  134bc4:	e3832403 	orr	r2, r3, #50331648	; 0x3000000
  134bc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134bcc:	e5832004 	str	r2, [r3, #4]
    state = enet_buffer_init(buffConfig);
  134bd0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  134bd4:	ebfffee9 	bl	134780 <enet_buffer_init>
  134bd8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if(state != RT_EOK)
  134bdc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134be0:	e3530000 	cmp	r3, #0
  134be4:	0a000001 	beq	134bf0 <rt_imx6ul_eth_init+0x198>
    {
        return state;
  134be8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134bec:	ea000015 	b	134c48 <rt_imx6ul_eth_init+0x1f0>
    }
    ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  134bf0:	e51b300c 	ldr	r3, [fp, #-12]
  134bf4:	e2832078 	add	r2, r3, #120	; 0x78
  134bf8:	e3a03d52 	mov	r3, #5248	; 0x1480
  134bfc:	e34033ef 	movt	r3, #1007	; 0x3ef
  134c00:	e58d3004 	str	r3, [sp, #4]
  134c04:	e58d2000 	str	r2, [sp]
  134c08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134c0c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134c10:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134c14:	e51b0010 	ldr	r0, [fp, #-16]
  134c18:	eb000488 	bl	135e40 <ENET_Init>
    ENET_ActiveRead(base_addr);
  134c1c:	e51b0010 	ldr	r0, [fp, #-16]
  134c20:	ebfffe5c 	bl	134598 <ENET_ActiveRead>

    // ENET_DisableInterrupts(base_addr,ENET_RX_INTERRUPT);
    // rt_hw_interrupt_install(imx6ul_device->irq_num, (rt_isr_handler_t)ENET_DriverIRQHandler, (void *)base_addr,imx6ul_device->irq_name);     
    // rt_hw_interrupt_umask(imx6ul_device->irq_num);
#ifndef POLL_INT
    ueth_hw_interrupt_install(imx6ul_device->irq_num, (void *)imx6ul_device->enet_phy_base_addr);
  134c24:	e51b300c 	ldr	r3, [fp, #-12]
  134c28:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  134c2c:	e1a02003 	mov	r2, r3
  134c30:	e51b300c 	ldr	r3, [fp, #-12]
  134c34:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  134c38:	e1a01003 	mov	r1, r3
  134c3c:	e1a00002 	mov	r0, r2
  134c40:	ebff3efb 	bl	104834 <ueth_hw_interrupt_install>
#endif

    return RT_EOK;
  134c44:	e3a03000 	mov	r3, #0
}
  134c48:	e1a00003 	mov	r0, r3
  134c4c:	e24bd004 	sub	sp, fp, #4
  134c50:	e8bd8800 	pop	{fp, pc}

00134c54 <rt_imx6ul_eth_control>:

static rt_err_t rt_imx6ul_eth_control(rt_device_t dev, int cmd, void *args)
{
  134c54:	e92d4800 	push	{fp, lr}
  134c58:	e28db004 	add	fp, sp, #4
  134c5c:	e24dd028 	sub	sp, sp, #40	; 0x28
  134c60:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  134c64:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  134c68:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134c6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134c70:	e50b3008 	str	r3, [fp, #-8]

    
    switch (cmd)
  134c74:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134c78:	e3530001 	cmp	r3, #1
  134c7c:	0a000000 	beq	134c84 <rt_imx6ul_eth_control+0x30>
            return -RT_ERROR;
        }
        break;

    default :
        break;
  134c80:	ea000070 	b	134e48 <rt_imx6ul_eth_control+0x1f4>
        if (args)
  134c84:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134c88:	e3530000 	cmp	r3, #0
  134c8c:	0a00006b 	beq	134e40 <rt_imx6ul_eth_control+0x1ec>
            rt_uint32_t uid_crc = 0;
  134c90:	e3a03000 	mov	r3, #0
  134c94:	e50b300c 	str	r3, [fp, #-12]
            ocotp_base = (OCOTP_Type *)ueth_remap((void*)OCOTP_BASE, UETH_REMAP, 0x1000);
  134c98:	e3a02a01 	mov	r2, #4096	; 0x1000
  134c9c:	e3a01001 	mov	r1, #1
  134ca0:	e3a00903 	mov	r0, #49152	; 0xc000
  134ca4:	e340021b 	movt	r0, #539	; 0x21b
  134ca8:	ebff3e01 	bl	1044b4 <ueth_remap>
  134cac:	e50b0010 	str	r0, [fp, #-16]
            uid[0] = ocotp_base->CFG0;
  134cb0:	e51b3010 	ldr	r3, [fp, #-16]
  134cb4:	e5933410 	ldr	r3, [r3, #1040]	; 0x410
  134cb8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            uid[1] = ocotp_base->CFG1;
  134cbc:	e51b3010 	ldr	r3, [fp, #-16]
  134cc0:	e5933420 	ldr	r3, [r3, #1056]	; 0x420
  134cc4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            ueth_remap(ocotp_base, UETH_UNMAP, 0);
  134cc8:	e3a02000 	mov	r2, #0
  134ccc:	e3a01002 	mov	r1, #2
  134cd0:	e51b0010 	ldr	r0, [fp, #-16]
  134cd4:	ebff3df6 	bl	1044b4 <ueth_remap>
            LOG_D("UNIQUE_ID is %x%x",uid[0], uid[1]);
  134cd8:	e3090b6c 	movw	r0, #39788	; 0x9b6c
  134cdc:	e3400014 	movt	r0, #20
  134ce0:	ebff390b 	bl	103114 <rt_kprintf>
  134ce4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134ce8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134cec:	e1a01003 	mov	r1, r3
  134cf0:	e3090c74 	movw	r0, #40052	; 0x9c74
  134cf4:	e3400014 	movt	r0, #20
  134cf8:	ebff3905 	bl	103114 <rt_kprintf>
  134cfc:	e3090b90 	movw	r0, #39824	; 0x9b90
  134d00:	e3400014 	movt	r0, #20
  134d04:	ebff3902 	bl	103114 <rt_kprintf>
            uid_crc = uid[0] - uid[1];
  134d08:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  134d0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134d10:	e0423003 	sub	r3, r2, r3
  134d14:	e50b300c 	str	r3, [fp, #-12]
            LOG_D("UNIQUE_ID change to 32 bits %x", uid_crc);
  134d18:	e3090b6c 	movw	r0, #39788	; 0x9b6c
  134d1c:	e3400014 	movt	r0, #20
  134d20:	ebff38fb 	bl	103114 <rt_kprintf>
  134d24:	e51b100c 	ldr	r1, [fp, #-12]
  134d28:	e3090c88 	movw	r0, #40072	; 0x9c88
  134d2c:	e3400014 	movt	r0, #20
  134d30:	ebff38f7 	bl	103114 <rt_kprintf>
  134d34:	e3090b90 	movw	r0, #39824	; 0x9b90
  134d38:	e3400014 	movt	r0, #20
  134d3c:	ebff38f4 	bl	103114 <rt_kprintf>
            if (imx6ul_device->enet_phy_base_addr == ENET1)
  134d40:	e51b3008 	ldr	r3, [fp, #-8]
  134d44:	e593209c 	ldr	r2, [r3, #156]	; 0x9c
  134d48:	e3a03902 	mov	r3, #32768	; 0x8000
  134d4c:	e3403218 	movt	r3, #536	; 0x218
  134d50:	e1520003 	cmp	r2, r3
  134d54:	1a000019 	bne	134dc0 <rt_imx6ul_eth_control+0x16c>
                imx6ul_device->dev_addr[0] = 0xa8;
  134d58:	e51b3008 	ldr	r3, [fp, #-8]
  134d5c:	e3e02057 	mvn	r2, #87	; 0x57
  134d60:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  134d64:	e51b3008 	ldr	r3, [fp, #-8]
  134d68:	e3a0205e 	mov	r2, #94	; 0x5e
  134d6c:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x45;
  134d70:	e51b3008 	ldr	r3, [fp, #-8]
  134d74:	e3a02045 	mov	r2, #69	; 0x45
  134d78:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc>>16) & 0x7f;
  134d7c:	e51b300c 	ldr	r3, [fp, #-12]
  134d80:	e1a03823 	lsr	r3, r3, #16
  134d84:	e6ef3073 	uxtb	r3, r3
  134d88:	e203307f 	and	r3, r3, #127	; 0x7f
  134d8c:	e6ef2073 	uxtb	r2, r3
  134d90:	e51b3008 	ldr	r3, [fp, #-8]
  134d94:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc>>8) & 0xff;
  134d98:	e51b300c 	ldr	r3, [fp, #-12]
  134d9c:	e1a03423 	lsr	r3, r3, #8
  134da0:	e6ef2073 	uxtb	r2, r3
  134da4:	e51b3008 	ldr	r3, [fp, #-8]
  134da8:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  134dac:	e51b300c 	ldr	r3, [fp, #-12]
  134db0:	e6ef2073 	uxtb	r2, r3
  134db4:	e51b3008 	ldr	r3, [fp, #-8]
  134db8:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
  134dbc:	ea000018 	b	134e24 <rt_imx6ul_eth_control+0x1d0>
                imx6ul_device->dev_addr[0] = 0xa8;
  134dc0:	e51b3008 	ldr	r3, [fp, #-8]
  134dc4:	e3e02057 	mvn	r2, #87	; 0x57
  134dc8:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  134dcc:	e51b3008 	ldr	r3, [fp, #-8]
  134dd0:	e3a0205e 	mov	r2, #94	; 0x5e
  134dd4:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x46;
  134dd8:	e51b3008 	ldr	r3, [fp, #-8]
  134ddc:	e3a02046 	mov	r2, #70	; 0x46
  134de0:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc >> 16) & 0x7f;
  134de4:	e51b300c 	ldr	r3, [fp, #-12]
  134de8:	e1a03823 	lsr	r3, r3, #16
  134dec:	e6ef3073 	uxtb	r3, r3
  134df0:	e203307f 	and	r3, r3, #127	; 0x7f
  134df4:	e6ef2073 	uxtb	r2, r3
  134df8:	e51b3008 	ldr	r3, [fp, #-8]
  134dfc:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc >> 8) & 0xff;
  134e00:	e51b300c 	ldr	r3, [fp, #-12]
  134e04:	e1a03423 	lsr	r3, r3, #8
  134e08:	e6ef2073 	uxtb	r2, r3
  134e0c:	e51b3008 	ldr	r3, [fp, #-8]
  134e10:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  134e14:	e51b300c 	ldr	r3, [fp, #-12]
  134e18:	e6ef2073 	uxtb	r2, r3
  134e1c:	e51b3008 	ldr	r3, [fp, #-8]
  134e20:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
            memcpy(args, imx6ul_device->dev_addr, MAX_ADDR_LEN);
  134e24:	e51b3008 	ldr	r3, [fp, #-8]
  134e28:	e2833078 	add	r3, r3, #120	; 0x78
  134e2c:	e3a02006 	mov	r2, #6
  134e30:	e1a01003 	mov	r1, r3
  134e34:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  134e38:	eb002fc7 	bl	140d5c <memcpy>
        break;
  134e3c:	ea000001 	b	134e48 <rt_imx6ul_eth_control+0x1f4>
            return -RT_ERROR;
  134e40:	e3e03000 	mvn	r3, #0
  134e44:	ea000000 	b	134e4c <rt_imx6ul_eth_control+0x1f8>
    }
    return RT_EOK;
  134e48:	e3a03000 	mov	r3, #0
}
  134e4c:	e1a00003 	mov	r0, r3
  134e50:	e24bd004 	sub	sp, fp, #4
  134e54:	e8bd8800 	pop	{fp, pc}

00134e58 <read_data_from_eth>:

static status_t read_data_from_eth(rt_device_t dev,void *read_data,uint16_t *read_length)
{
  134e58:	e92d4800 	push	{fp, lr}
  134e5c:	e28db004 	add	fp, sp, #4
  134e60:	e24dd038 	sub	sp, sp, #56	; 0x38
  134e64:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  134e68:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  134e6c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    status_t status = 0;
  134e70:	e3a03000 	mov	r3, #0
  134e74:	e50b3008 	str	r3, [fp, #-8]
    uint16_t length = 0;
  134e78:	e3a03000 	mov	r3, #0
  134e7c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    ENET_Type *base_addr = RT_NULL;
  134e80:	e3a03000 	mov	r3, #0
  134e84:	e50b300c 	str	r3, [fp, #-12]
    enet_config_t *config;
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134e88:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134e8c:	e50b3010 	str	r3, [fp, #-16]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134e90:	e51b3010 	ldr	r3, [fp, #-16]
  134e94:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134e98:	e50b300c 	str	r3, [fp, #-12]
    config = &imx6ul_device->config;
  134e9c:	e51b3010 	ldr	r3, [fp, #-16]
  134ea0:	e28330dc 	add	r3, r3, #220	; 0xdc
  134ea4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134ea8:	e51b3010 	ldr	r3, [fp, #-16]
  134eac:	e2833c01 	add	r3, r3, #256	; 0x100
  134eb0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  134eb4:	e51b3010 	ldr	r3, [fp, #-16]
  134eb8:	e28330a8 	add	r3, r3, #168	; 0xa8
  134ebc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    /* Get the Frame size */
    status = ENET_ReadFrame(base_addr,handle,config,read_data,&length);
  134ec0:	e24b301e 	sub	r3, fp, #30
  134ec4:	e58d3000 	str	r3, [sp]
  134ec8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134ecc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134ed0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134ed4:	e51b000c 	ldr	r0, [fp, #-12]
  134ed8:	eb00088e 	bl	137118 <ENET_ReadFrame>
  134edc:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty)||(status == kStatus_ENET_RxFrameError))
  134ee0:	e51b3008 	ldr	r3, [fp, #-8]
  134ee4:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134ee8:	e1530002 	cmp	r3, r2
  134eec:	0a000002 	beq	134efc <read_data_from_eth+0xa4>
  134ef0:	e51b3008 	ldr	r3, [fp, #-8]
  134ef4:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134ef8:	1a00001a 	bne	134f68 <read_data_from_eth+0x110>
    {
        ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  134efc:	e3a01403 	mov	r1, #50331648	; 0x3000000
  134f00:	e51b000c 	ldr	r0, [fp, #-12]
  134f04:	ebfffdae 	bl	1345c4 <ENET_EnableInterrupts>
        if(status == kStatus_ENET_RxFrameError)
  134f08:	e51b3008 	ldr	r3, [fp, #-8]
  134f0c:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134f10:	1a00000e 	bne	134f50 <read_data_from_eth+0xf8>
        {
            /*recv error happend reinitialize mac*/
            ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  134f14:	e51b3010 	ldr	r3, [fp, #-16]
  134f18:	e2832078 	add	r2, r3, #120	; 0x78
  134f1c:	e3a03d52 	mov	r3, #5248	; 0x1480
  134f20:	e34033ef 	movt	r3, #1007	; 0x3ef
  134f24:	e58d3004 	str	r3, [sp, #4]
  134f28:	e58d2000 	str	r2, [sp]
  134f2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134f30:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134f34:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134f38:	e51b000c 	ldr	r0, [fp, #-12]
  134f3c:	eb0003bf 	bl	135e40 <ENET_Init>
            ENET_ActiveRead(base_addr);
  134f40:	e51b000c 	ldr	r0, [fp, #-12]
  134f44:	ebfffd93 	bl	134598 <ENET_ActiveRead>
            return kStatus_ENET_RxFrameError;
  134f48:	e3a03efa 	mov	r3, #4000	; 0xfa0
  134f4c:	ea000009 	b	134f78 <read_data_from_eth+0x120>
        }
        else if(status == kStatus_ENET_RxFrameEmpty)
  134f50:	e51b3008 	ldr	r3, [fp, #-8]
  134f54:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134f58:	e1530002 	cmp	r3, r2
  134f5c:	1a000001 	bne	134f68 <read_data_from_eth+0x110>
        {
            return kStatus_ENET_RxFrameEmpty;
  134f60:	e3003fa2 	movw	r3, #4002	; 0xfa2
  134f64:	ea000003 	b	134f78 <read_data_from_eth+0x120>
        }
    }
    *read_length = length;
  134f68:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  134f6c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134f70:	e1c320b0 	strh	r2, [r3]
    return status;
  134f74:	e51b3008 	ldr	r3, [fp, #-8]
}
  134f78:	e1a00003 	mov	r0, r3
  134f7c:	e24bd004 	sub	sp, fp, #4
  134f80:	e8bd8800 	pop	{fp, pc}

00134f84 <rt_imx6ul_eth_tx>:

#ifdef RT_USING_LWIP
/* transmit data*/
rt_err_t rt_imx6ul_eth_tx(rt_device_t dev, struct pbuf *p)
{
  134f84:	e92d4800 	push	{fp, lr}
  134f88:	e28db004 	add	fp, sp, #4
  134f8c:	e24dd030 	sub	sp, sp, #48	; 0x30
  134f90:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  134f94:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    struct pbuf *q = RT_NULL;
  134f98:	e3a03000 	mov	r3, #0
  134f9c:	e50b3008 	str	r3, [fp, #-8]
    uint16_t offset = 0;
  134fa0:	e3a03000 	mov	r3, #0
  134fa4:	e14b30ba 	strh	r3, [fp, #-10]
    uint32_t last_flag = 0;
  134fa8:	e3a03000 	mov	r3, #0
  134fac:	e50b3010 	str	r3, [fp, #-16]
    status_t status;
    ENET_Type *base_addr = RT_NULL;
  134fb0:	e3a03000 	mov	r3, #0
  134fb4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    enet_handle_t *handle;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134fb8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134fbc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134fc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134fc4:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134fc8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134fcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134fd0:	e2833c01 	add	r3, r3, #256	; 0x100
  134fd4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(p);
  134fd8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134fdc:	e3530000 	cmp	r3, #0
  134fe0:	1a000005 	bne	134ffc <rt_imx6ul_eth_tx+0x78>
  134fe4:	e3a02e1b 	mov	r2, #432	; 0x1b0
  134fe8:	e3091e54 	movw	r1, #40532	; 0x9e54
  134fec:	e3401014 	movt	r1, #20
  134ff0:	e3090ca8 	movw	r0, #40104	; 0x9ca8
  134ff4:	e3400014 	movt	r0, #20
  134ff8:	ebff3966 	bl	103598 <rt_assert_handler>

    for(q = p;q != RT_NULL;q=q->next)
  134ffc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135000:	e50b3008 	str	r3, [fp, #-8]
  135004:	ea000020 	b	13508c <rt_imx6ul_eth_tx+0x108>
    {
        if(q->next == RT_NULL)
  135008:	e51b3008 	ldr	r3, [fp, #-8]
  13500c:	e5933000 	ldr	r3, [r3]
  135010:	e3530000 	cmp	r3, #0
  135014:	1a000002 	bne	135024 <rt_imx6ul_eth_tx+0xa0>
        {
            last_flag = 1;
  135018:	e3a03001 	mov	r3, #1
  13501c:	e50b3010 	str	r3, [fp, #-16]
  135020:	ea000001 	b	13502c <rt_imx6ul_eth_tx+0xa8>
        }
        else
        {
            last_flag = 0;
  135024:	e3a03000 	mov	r3, #0
  135028:	e50b3010 	str	r3, [fp, #-16]
        }
        status = ENET_SendFrame(base_addr, handle, q->payload, q->len,last_flag);
  13502c:	e51b3008 	ldr	r3, [fp, #-8]
  135030:	e5932004 	ldr	r2, [r3, #4]
  135034:	e51b3008 	ldr	r3, [fp, #-8]
  135038:	e1d310ba 	ldrh	r1, [r3, #10]
  13503c:	e51b3010 	ldr	r3, [fp, #-16]
  135040:	e58d3000 	str	r3, [sp]
  135044:	e1a03001 	mov	r3, r1
  135048:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13504c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  135050:	eb0008fb 	bl	137444 <ENET_SendFrame>
  135054:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0

        offset = offset + q->len;
  135058:	e51b3008 	ldr	r3, [fp, #-8]
  13505c:	e1d320ba 	ldrh	r2, [r3, #10]
  135060:	e15b30ba 	ldrh	r3, [fp, #-10]
  135064:	e0823003 	add	r3, r2, r3
  135068:	e14b30ba 	strh	r3, [fp, #-10]
        if(status == kStatus_Success)
  13506c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  135070:	e3530000 	cmp	r3, #0
  135074:	0a000001 	beq	135080 <rt_imx6ul_eth_tx+0xfc>
        {
        }
        else
        {
            return RT_ERROR;
  135078:	e3a03001 	mov	r3, #1
  13507c:	ea000015 	b	1350d8 <rt_imx6ul_eth_tx+0x154>
    for(q = p;q != RT_NULL;q=q->next)
  135080:	e51b3008 	ldr	r3, [fp, #-8]
  135084:	e5933000 	ldr	r3, [r3]
  135088:	e50b3008 	str	r3, [fp, #-8]
  13508c:	e51b3008 	ldr	r3, [fp, #-8]
  135090:	e3530000 	cmp	r3, #0
  135094:	1affffdb 	bne	135008 <rt_imx6ul_eth_tx+0x84>
        }
    }
    if(offset > ENET_FRAME_MAX_FRAMELEN)
  135098:	e15b30ba 	ldrh	r3, [fp, #-10]
  13509c:	e30025ee 	movw	r2, #1518	; 0x5ee
  1350a0:	e1530002 	cmp	r3, r2
  1350a4:	9a00000a 	bls	1350d4 <rt_imx6ul_eth_tx+0x150>
    {
        LOG_E("net error send length %d exceed max length",offset);
  1350a8:	e3090bac 	movw	r0, #39852	; 0x9bac
  1350ac:	e3400014 	movt	r0, #20
  1350b0:	ebff3817 	bl	103114 <rt_kprintf>
  1350b4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1350b8:	e1a01003 	mov	r1, r3
  1350bc:	e3090cac 	movw	r0, #40108	; 0x9cac
  1350c0:	e3400014 	movt	r0, #20
  1350c4:	ebff3812 	bl	103114 <rt_kprintf>
  1350c8:	e3090b90 	movw	r0, #39824	; 0x9b90
  1350cc:	e3400014 	movt	r0, #20
  1350d0:	ebff380f 	bl	103114 <rt_kprintf>
    }
    return RT_EOK;
  1350d4:	e3a03000 	mov	r3, #0
}
  1350d8:	e1a00003 	mov	r0, r3
  1350dc:	e24bd004 	sub	sp, fp, #4
  1350e0:	e8bd8800 	pop	{fp, pc}

001350e4 <rt_imx6ul_eth_rx>:

struct pbuf *rt_imx6ul_eth_rx(rt_device_t dev)
{
  1350e4:	e92d4800 	push	{fp, lr}
  1350e8:	e28db004 	add	fp, sp, #4
  1350ec:	e24dd018 	sub	sp, sp, #24
  1350f0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    static struct pbuf *p_s = RT_NULL;
    struct pbuf *p = RT_NULL;
  1350f4:	e3a03000 	mov	r3, #0
  1350f8:	e50b3008 	str	r3, [fp, #-8]
    status_t status;
    uint16_t length = 0;
  1350fc:	e3a03000 	mov	r3, #0
  135100:	e14b30be 	strh	r3, [fp, #-14]

    if(p_s == RT_NULL)
  135104:	e30e3c18 	movw	r3, #60440	; 0xec18
  135108:	e3403014 	movt	r3, #20
  13510c:	e5933000 	ldr	r3, [r3]
  135110:	e3530000 	cmp	r3, #0
  135114:	1a00000e 	bne	135154 <rt_imx6ul_eth_rx+0x70>
    {
        p_s = pbuf_alloc(PBUF_RAW, ENET_FRAME_MAX_FRAMELEN, PBUF_POOL);
  135118:	e3a02003 	mov	r2, #3
  13511c:	e30015ee 	movw	r1, #1518	; 0x5ee
  135120:	e3a00004 	mov	r0, #4
  135124:	ebff944b 	bl	11a258 <pbuf_alloc>
  135128:	e1a02000 	mov	r2, r0
  13512c:	e30e3c18 	movw	r3, #60440	; 0xec18
  135130:	e3403014 	movt	r3, #20
  135134:	e5832000 	str	r2, [r3]
        if(p_s == RT_NULL)
  135138:	e30e3c18 	movw	r3, #60440	; 0xec18
  13513c:	e3403014 	movt	r3, #20
  135140:	e5933000 	ldr	r3, [r3]
  135144:	e3530000 	cmp	r3, #0
  135148:	1a000001 	bne	135154 <rt_imx6ul_eth_rx+0x70>
        {
            return RT_NULL;
  13514c:	e3a03000 	mov	r3, #0
  135150:	ea00002f 	b	135214 <rt_imx6ul_eth_rx+0x130>
        }
    }
    p = p_s;
  135154:	e30e3c18 	movw	r3, #60440	; 0xec18
  135158:	e3403014 	movt	r3, #20
  13515c:	e5933000 	ldr	r3, [r3]
  135160:	e50b3008 	str	r3, [fp, #-8]
    status = read_data_from_eth(dev,p->payload,&length);
  135164:	e51b3008 	ldr	r3, [fp, #-8]
  135168:	e5933004 	ldr	r3, [r3, #4]
  13516c:	e24b200e 	sub	r2, fp, #14
  135170:	e1a01003 	mov	r1, r3
  135174:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  135178:	ebffff36 	bl	134e58 <read_data_from_eth>
  13517c:	e50b000c 	str	r0, [fp, #-12]
    if(status == kStatus_ENET_RxFrameEmpty)
  135180:	e51b300c 	ldr	r3, [fp, #-12]
  135184:	e3002fa2 	movw	r2, #4002	; 0xfa2
  135188:	e1530002 	cmp	r3, r2
  13518c:	1a000001 	bne	135198 <rt_imx6ul_eth_rx+0xb4>
    {
        return RT_NULL;
  135190:	e3a03000 	mov	r3, #0
  135194:	ea00001e 	b	135214 <rt_imx6ul_eth_rx+0x130>
    }
    else if(status == kStatus_ENET_RxFrameError)
  135198:	e51b300c 	ldr	r3, [fp, #-12]
  13519c:	e3530efa 	cmp	r3, #4000	; 0xfa0
  1351a0:	1a000001 	bne	1351ac <rt_imx6ul_eth_rx+0xc8>
    {
        return RT_NULL;
  1351a4:	e3a03000 	mov	r3, #0
  1351a8:	ea000019 	b	135214 <rt_imx6ul_eth_rx+0x130>
    }
    if(length > ENET_FRAME_MAX_FRAMELEN)
  1351ac:	e15b30be 	ldrh	r3, [fp, #-14]
  1351b0:	e30025ee 	movw	r2, #1518	; 0x5ee
  1351b4:	e1530002 	cmp	r3, r2
  1351b8:	9a00000c 	bls	1351f0 <rt_imx6ul_eth_rx+0x10c>
    {
        LOG_E("net error recv length %d exceed max length",length);
  1351bc:	e3090bac 	movw	r0, #39852	; 0x9bac
  1351c0:	e3400014 	movt	r0, #20
  1351c4:	ebff37d2 	bl	103114 <rt_kprintf>
  1351c8:	e15b30be 	ldrh	r3, [fp, #-14]
  1351cc:	e1a01003 	mov	r1, r3
  1351d0:	e3090cd8 	movw	r0, #40152	; 0x9cd8
  1351d4:	e3400014 	movt	r0, #20
  1351d8:	ebff37cd 	bl	103114 <rt_kprintf>
  1351dc:	e3090b90 	movw	r0, #39824	; 0x9b90
  1351e0:	e3400014 	movt	r0, #20
  1351e4:	ebff37ca 	bl	103114 <rt_kprintf>
        return RT_NULL;
  1351e8:	e3a03000 	mov	r3, #0
  1351ec:	ea000008 	b	135214 <rt_imx6ul_eth_rx+0x130>
    }
    pbuf_realloc(p, length);
  1351f0:	e15b30be 	ldrh	r3, [fp, #-14]
  1351f4:	e1a01003 	mov	r1, r3
  1351f8:	e51b0008 	ldr	r0, [fp, #-8]
  1351fc:	ebff95d3 	bl	11a950 <pbuf_realloc>
    p_s = RT_NULL;
  135200:	e30e3c18 	movw	r3, #60440	; 0xec18
  135204:	e3403014 	movt	r3, #20
  135208:	e3a02000 	mov	r2, #0
  13520c:	e5832000 	str	r2, [r3]
    return p;
  135210:	e51b3008 	ldr	r3, [fp, #-8]
}
  135214:	e1a00003 	mov	r0, r3
  135218:	e24bd004 	sub	sp, fp, #4
  13521c:	e8bd8800 	pop	{fp, pc}

00135220 <rt_imx6ul_eth_open>:
#endif

static rt_err_t rt_imx6ul_eth_open(rt_device_t dev, rt_uint16_t oflag)
{
  135220:	e92d4800 	push	{fp, lr}
  135224:	e28db004 	add	fp, sp, #4
  135228:	e24dd010 	sub	sp, sp, #16
  13522c:	e50b0010 	str	r0, [fp, #-16]
  135230:	e1a03001 	mov	r3, r1
  135234:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  135238:	e51b3010 	ldr	r3, [fp, #-16]
  13523c:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  135240:	e51b3008 	ldr	r3, [fp, #-8]
  135244:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135248:	e50b300c 	str	r3, [fp, #-12]
    ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  13524c:	e3a01403 	mov	r1, #50331648	; 0x3000000
  135250:	e51b000c 	ldr	r0, [fp, #-12]
  135254:	ebfffcda 	bl	1345c4 <ENET_EnableInterrupts>

    return RT_EOK;
  135258:	e3a03000 	mov	r3, #0
}
  13525c:	e1a00003 	mov	r0, r3
  135260:	e24bd004 	sub	sp, fp, #4
  135264:	e8bd8800 	pop	{fp, pc}

00135268 <rt_imx6ul_eth_close>:

static rt_err_t rt_imx6ul_eth_close(rt_device_t dev)
{
  135268:	e92d4800 	push	{fp, lr}
  13526c:	e28db004 	add	fp, sp, #4
  135270:	e24dd010 	sub	sp, sp, #16
  135274:	e50b0010 	str	r0, [fp, #-16]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  135278:	e51b3010 	ldr	r3, [fp, #-16]
  13527c:	e50b3008 	str	r3, [fp, #-8]
    ENET_DisableInterrupts(imx6ul_device->enet_virtual_base_addr,ENET_RX_INTERRUPT);
  135280:	e51b3008 	ldr	r3, [fp, #-8]
  135284:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135288:	e3a01403 	mov	r1, #50331648	; 0x3000000
  13528c:	e1a00003 	mov	r0, r3
  135290:	ebfffcda 	bl	134600 <ENET_DisableInterrupts>
    return RT_EOK;
  135294:	e3a03000 	mov	r3, #0
}
  135298:	e1a00003 	mov	r0, r3
  13529c:	e24bd004 	sub	sp, fp, #4
  1352a0:	e8bd8800 	pop	{fp, pc}

001352a4 <rt_imx6ul_eth_read>:

static rt_size_t rt_imx6ul_eth_read(rt_device_t dev, rt_off_t pos, void *buffer, rt_size_t size)
{
  1352a4:	e92d4800 	push	{fp, lr}
  1352a8:	e28db004 	add	fp, sp, #4
  1352ac:	e24dd018 	sub	sp, sp, #24
  1352b0:	e50b0010 	str	r0, [fp, #-16]
  1352b4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1352b8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1352bc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint16_t length = 0;
  1352c0:	e3a03000 	mov	r3, #0
  1352c4:	e14b30ba 	strh	r3, [fp, #-10]
    status_t status;
    if(!buffer) 
  1352c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1352cc:	e3530000 	cmp	r3, #0
  1352d0:	1a00000c 	bne	135308 <rt_imx6ul_eth_read+0x64>
    {
        LOG_E("eth read invalid parameter buffer %p size %d",buffer,size);
  1352d4:	e3090bac 	movw	r0, #39852	; 0x9bac
  1352d8:	e3400014 	movt	r0, #20
  1352dc:	ebff378c 	bl	103114 <rt_kprintf>
  1352e0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1352e4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1352e8:	e3090d04 	movw	r0, #40196	; 0x9d04
  1352ec:	e3400014 	movt	r0, #20
  1352f0:	ebff3787 	bl	103114 <rt_kprintf>
  1352f4:	e3090b90 	movw	r0, #39824	; 0x9b90
  1352f8:	e3400014 	movt	r0, #20
  1352fc:	ebff3784 	bl	103114 <rt_kprintf>
        return 0;
  135300:	e3a03000 	mov	r3, #0
  135304:	ea00000f 	b	135348 <rt_imx6ul_eth_read+0xa4>
    }
    status = read_data_from_eth(dev,buffer,&length);
  135308:	e24b300a 	sub	r3, fp, #10
  13530c:	e1a02003 	mov	r2, r3
  135310:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  135314:	e51b0010 	ldr	r0, [fp, #-16]
  135318:	ebfffece 	bl	134e58 <read_data_from_eth>
  13531c:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty) || (status == kStatus_ENET_RxFrameError))
  135320:	e51b3008 	ldr	r3, [fp, #-8]
  135324:	e3002fa2 	movw	r2, #4002	; 0xfa2
  135328:	e1530002 	cmp	r3, r2
  13532c:	0a000002 	beq	13533c <rt_imx6ul_eth_read+0x98>
  135330:	e51b3008 	ldr	r3, [fp, #-8]
  135334:	e3530efa 	cmp	r3, #4000	; 0xfa0
  135338:	1a000001 	bne	135344 <rt_imx6ul_eth_read+0xa0>
    {
        return 0;
  13533c:	e3a03000 	mov	r3, #0
  135340:	ea000000 	b	135348 <rt_imx6ul_eth_read+0xa4>
    }
    return (rt_size_t)length;
  135344:	e15b30ba 	ldrh	r3, [fp, #-10]
}
  135348:	e1a00003 	mov	r0, r3
  13534c:	e24bd004 	sub	sp, fp, #4
  135350:	e8bd8800 	pop	{fp, pc}

00135354 <rt_imx6ul_eth_write>:

static rt_size_t rt_imx6ul_eth_write(rt_device_t dev, rt_off_t pos, const void *buffer, rt_size_t size)
{
  135354:	e92d4800 	push	{fp, lr}
  135358:	e28db004 	add	fp, sp, #4
  13535c:	e24dd028 	sub	sp, sp, #40	; 0x28
  135360:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  135364:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  135368:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  13536c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    status_t status;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  135370:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135374:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  135378:	e51b3008 	ldr	r3, [fp, #-8]
  13537c:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135380:	e50b300c 	str	r3, [fp, #-12]
    enet_handle_t *handle = &imx6ul_device->handle;
  135384:	e51b3008 	ldr	r3, [fp, #-8]
  135388:	e2833c01 	add	r3, r3, #256	; 0x100
  13538c:	e50b3010 	str	r3, [fp, #-16]

    if((!buffer) || (size > ENET_FRAME_MAX_FRAMELEN))
  135390:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  135394:	e3530000 	cmp	r3, #0
  135398:	0a000003 	beq	1353ac <rt_imx6ul_eth_write+0x58>
  13539c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1353a0:	e30025ee 	movw	r2, #1518	; 0x5ee
  1353a4:	e1530002 	cmp	r3, r2
  1353a8:	9a00000a 	bls	1353d8 <rt_imx6ul_eth_write+0x84>
    {
        LOG_E("eth write invalid parameter buffer %p size %d",buffer,size);
  1353ac:	e3090bac 	movw	r0, #39852	; 0x9bac
  1353b0:	e3400014 	movt	r0, #20
  1353b4:	ebff3756 	bl	103114 <rt_kprintf>
  1353b8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1353bc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1353c0:	e3090d34 	movw	r0, #40244	; 0x9d34
  1353c4:	e3400014 	movt	r0, #20
  1353c8:	ebff3751 	bl	103114 <rt_kprintf>
  1353cc:	e3090b90 	movw	r0, #39824	; 0x9b90
  1353d0:	e3400014 	movt	r0, #20
  1353d4:	ebff374e 	bl	103114 <rt_kprintf>
    }
    status = ENET_SendFrame(base_addr, handle, buffer, size,1);
  1353d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1353dc:	e6ff2073 	uxth	r2, r3
  1353e0:	e3a03001 	mov	r3, #1
  1353e4:	e58d3000 	str	r3, [sp]
  1353e8:	e1a03002 	mov	r3, r2
  1353ec:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1353f0:	e51b1010 	ldr	r1, [fp, #-16]
  1353f4:	e51b000c 	ldr	r0, [fp, #-12]
  1353f8:	eb000811 	bl	137444 <ENET_SendFrame>
  1353fc:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if(status != kStatus_Success)
  135400:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135404:	e3530000 	cmp	r3, #0
  135408:	0a000001 	beq	135414 <rt_imx6ul_eth_write+0xc0>
    {
        return RT_ERROR;
  13540c:	e3a03001 	mov	r3, #1
  135410:	ea000000 	b	135418 <rt_imx6ul_eth_write+0xc4>
    }

    return RT_EOK;
  135414:	e3a03000 	mov	r3, #0
}
  135418:	e1a00003 	mov	r0, r3
  13541c:	e24bd004 	sub	sp, fp, #4
  135420:	e8bd8800 	pop	{fp, pc}

00135424 <get_instance_by_base>:

int32_t get_instance_by_base(void *base)
{
  135424:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135428:	e28db000 	add	fp, sp, #0
  13542c:	e24dd014 	sub	sp, sp, #20
  135430:	e50b0010 	str	r0, [fp, #-16]
    int32_t i = 0;
  135434:	e3a03000 	mov	r3, #0
  135438:	e50b3008 	str	r3, [fp, #-8]
    int32_t instance = 0;
  13543c:	e3a03000 	mov	r3, #0
  135440:	e50b300c 	str	r3, [fp, #-12]
    for(i = 0; i < DEV_ENET_MAX; i ++)
  135444:	e3a03000 	mov	r3, #0
  135448:	e50b3008 	str	r3, [fp, #-8]
  13544c:	ea00000d 	b	135488 <get_instance_by_base+0x64>
    {
        if((void *)_imx6ul_eth_device[i].enet_virtual_base_addr == base)
  135450:	e30d3078 	movw	r3, #53368	; 0xd078
  135454:	e3403014 	movt	r3, #20
  135458:	e51b2008 	ldr	r2, [fp, #-8]
  13545c:	e3a01f8a 	mov	r1, #552	; 0x228
  135460:	e0020291 	mul	r2, r1, r2
  135464:	e0833002 	add	r3, r3, r2
  135468:	e28330a0 	add	r3, r3, #160	; 0xa0
  13546c:	e5933000 	ldr	r3, [r3]
  135470:	e51b2010 	ldr	r2, [fp, #-16]
  135474:	e1520003 	cmp	r2, r3
  135478:	0a000006 	beq	135498 <get_instance_by_base+0x74>
    for(i = 0; i < DEV_ENET_MAX; i ++)
  13547c:	e51b3008 	ldr	r3, [fp, #-8]
  135480:	e2833001 	add	r3, r3, #1
  135484:	e50b3008 	str	r3, [fp, #-8]
  135488:	e51b3008 	ldr	r3, [fp, #-8]
  13548c:	e3530000 	cmp	r3, #0
  135490:	daffffee 	ble	135450 <get_instance_by_base+0x2c>
  135494:	ea000000 	b	13549c <get_instance_by_base+0x78>
        {
            break;
  135498:	e320f000 	nop	{0}
        }
    }
    if(i == DEV_ENET_MAX)
  13549c:	e51b3008 	ldr	r3, [fp, #-8]
  1354a0:	e3530001 	cmp	r3, #1
  1354a4:	1a000001 	bne	1354b0 <get_instance_by_base+0x8c>
    {
        return -1;
  1354a8:	e3e03000 	mvn	r3, #0
  1354ac:	ea000000 	b	1354b4 <get_instance_by_base+0x90>
    }
    return instance;
  1354b0:	e51b300c 	ldr	r3, [fp, #-12]
    
}
  1354b4:	e1a00003 	mov	r0, r3
  1354b8:	e28bd000 	add	sp, fp, #0
  1354bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1354c0:	e12fff1e 	bx	lr

001354c4 <rx_enet_callback>:

void rx_enet_callback(void *base)
{
  1354c4:	e92d4800 	push	{fp, lr}
  1354c8:	e28db004 	add	fp, sp, #4
  1354cc:	e24dd010 	sub	sp, sp, #16
  1354d0:	e50b0010 	str	r0, [fp, #-16]
    int32_t instance = 0;
  1354d4:	e3a03000 	mov	r3, #0
  1354d8:	e50b3008 	str	r3, [fp, #-8]
    instance = get_instance_by_base(base);
  1354dc:	e51b0010 	ldr	r0, [fp, #-16]
  1354e0:	ebffffcf 	bl	135424 <get_instance_by_base>
  1354e4:	e50b0008 	str	r0, [fp, #-8]
    if(instance == -1)
  1354e8:	e51b3008 	ldr	r3, [fp, #-8]
  1354ec:	e3730001 	cmn	r3, #1
  1354f0:	1a000009 	bne	13551c <rx_enet_callback+0x58>
    {
        LOG_E("interrput match base addr error");
  1354f4:	e3090bac 	movw	r0, #39852	; 0x9bac
  1354f8:	e3400014 	movt	r0, #20
  1354fc:	ebff3704 	bl	103114 <rt_kprintf>
  135500:	e3090d64 	movw	r0, #40292	; 0x9d64
  135504:	e3400014 	movt	r0, #20
  135508:	ebff3701 	bl	103114 <rt_kprintf>
  13550c:	e3090b90 	movw	r0, #39824	; 0x9b90
  135510:	e3400014 	movt	r0, #20
  135514:	ebff36fe 	bl	103114 <rt_kprintf>
        return;
  135518:	ea00000a 	b	135548 <rx_enet_callback+0x84>
    }
    ENET_DisableInterrupts(base,ENET_RX_INTERRUPT);
  13551c:	e3a01403 	mov	r1, #50331648	; 0x3000000
  135520:	e51b0010 	ldr	r0, [fp, #-16]
  135524:	ebfffc35 	bl	134600 <ENET_DisableInterrupts>
    eth_device_ready(&(_imx6ul_eth_device[instance].parent));
  135528:	e51b3008 	ldr	r3, [fp, #-8]
  13552c:	e3a02f8a 	mov	r2, #552	; 0x228
  135530:	e0020392 	mul	r2, r2, r3
  135534:	e30d3078 	movw	r3, #53368	; 0xd078
  135538:	e3403014 	movt	r3, #20
  13553c:	e0823003 	add	r3, r2, r3
  135540:	e1a00003 	mov	r0, r3
  135544:	ebffd175 	bl	129b20 <eth_device_ready>
}
  135548:	e24bd004 	sub	sp, fp, #4
  13554c:	e8bd8800 	pop	{fp, pc}

00135550 <tx_enet_callback>:

void tx_enet_callback(void *base)
{
  135550:	e92d4800 	push	{fp, lr}
  135554:	e28db004 	add	fp, sp, #4
  135558:	e24dd008 	sub	sp, sp, #8
  13555c:	e50b0008 	str	r0, [fp, #-8]
    ENET_DisableInterrupts(base,ENET_TX_INTERRUPT);
  135560:	e3a01303 	mov	r1, #201326592	; 0xc000000
  135564:	e51b0008 	ldr	r0, [fp, #-8]
  135568:	ebfffc24 	bl	134600 <ENET_DisableInterrupts>
}
  13556c:	e320f000 	nop	{0}
  135570:	e24bd004 	sub	sp, fp, #4
  135574:	e8bd8800 	pop	{fp, pc}

00135578 <ueth_rx_interrupt_handle>:

static void* ueth_rx_interrupt_handle(ENET_Type *base)
{
  135578:	e92d4800 	push	{fp, lr}
  13557c:	e28db004 	add	fp, sp, #4
  135580:	e24dd010 	sub	sp, sp, #16
  135584:	e50b0010 	str	r0, [fp, #-16]
    /* Clear the transmit interrupt event. */
    base->EIR = ENET_RX_INTERRUPT;
  135588:	e51b3010 	ldr	r3, [fp, #-16]
  13558c:	e3a02403 	mov	r2, #50331648	; 0x3000000
  135590:	e5832004 	str	r2, [r3, #4]
    int32_t instance = 0;
  135594:	e3a03000 	mov	r3, #0
  135598:	e50b3008 	str	r3, [fp, #-8]
    instance = get_instance_by_base(base);
  13559c:	e51b0010 	ldr	r0, [fp, #-16]
  1355a0:	ebffff9f 	bl	135424 <get_instance_by_base>
  1355a4:	e50b0008 	str	r0, [fp, #-8]
    if(instance == -1)
  1355a8:	e51b3008 	ldr	r3, [fp, #-8]
  1355ac:	e3730001 	cmn	r3, #1
  1355b0:	1a00000a 	bne	1355e0 <ueth_rx_interrupt_handle+0x68>
    {
        LOG_E("interrput match base addr error");
  1355b4:	e3090bac 	movw	r0, #39852	; 0x9bac
  1355b8:	e3400014 	movt	r0, #20
  1355bc:	ebff36d4 	bl	103114 <rt_kprintf>
  1355c0:	e3090d64 	movw	r0, #40292	; 0x9d64
  1355c4:	e3400014 	movt	r0, #20
  1355c8:	ebff36d1 	bl	103114 <rt_kprintf>
  1355cc:	e3090b90 	movw	r0, #39824	; 0x9b90
  1355d0:	e3400014 	movt	r0, #20
  1355d4:	ebff36ce 	bl	103114 <rt_kprintf>
        return RT_NULL;
  1355d8:	e3a03000 	mov	r3, #0
  1355dc:	ea000005 	b	1355f8 <ueth_rx_interrupt_handle+0x80>
    }
    return (void*)&(_imx6ul_eth_device[instance].parent);
  1355e0:	e51b3008 	ldr	r3, [fp, #-8]
  1355e4:	e3a02f8a 	mov	r2, #552	; 0x228
  1355e8:	e0020392 	mul	r2, r2, r3
  1355ec:	e30d3078 	movw	r3, #53368	; 0xd078
  1355f0:	e3403014 	movt	r3, #20
  1355f4:	e0823003 	add	r3, r2, r3
}
  1355f8:	e1a00003 	mov	r0, r3
  1355fc:	e24bd004 	sub	sp, fp, #4
  135600:	e8bd8800 	pop	{fp, pc}

00135604 <ueth_rx_interrupt_detect>:

int eth_init_done = 0;
void* ueth_rx_interrupt_detect(void) {
  135604:	e92d4800 	push	{fp, lr}
  135608:	e28db004 	add	fp, sp, #4
  13560c:	e24dd008 	sub	sp, sp, #8
    ENET_Type *base = _imx6ul_eth_device[0].enet_virtual_base_addr;
  135610:	e30d3078 	movw	r3, #53368	; 0xd078
  135614:	e3403014 	movt	r3, #20
  135618:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  13561c:	e50b3008 	str	r3, [fp, #-8]
            ENET_DisableInterrupts(base, ENET_RX_INTERRUPT);
            return ueth_rx_interrupt_handle(base);
        }
    }
#else
    ueth_int_recv();
  135620:	ebff3b6d 	bl	1043dc <ueth_int_recv>
    return ueth_rx_interrupt_handle(base);
  135624:	e51b0008 	ldr	r0, [fp, #-8]
  135628:	ebffffd2 	bl	135578 <ueth_rx_interrupt_handle>
  13562c:	e1a03000 	mov	r3, r0
#endif
}
  135630:	e1a00003 	mov	r0, r3
  135634:	e24bd004 	sub	sp, fp, #4
  135638:	e8bd8800 	pop	{fp, pc}

0013563c <phy_detect_thread_entry>:

/*phy link detect thread*/
static void phy_detect_thread_entry(void *param)
{
  13563c:	e92d4800 	push	{fp, lr}
  135640:	e28db004 	add	fp, sp, #4
  135644:	e24dd020 	sub	sp, sp, #32
  135648:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    bool link = false;
  13564c:	e3a03000 	mov	r3, #0
  135650:	e54b300d 	strb	r3, [fp, #-13]
    phy_speed_t speed;
    phy_duplex_t duplex;
    ENET_Type *base_addr = RT_NULL;
  135654:	e3a03000 	mov	r3, #0
  135658:	e50b3008 	str	r3, [fp, #-8]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)param;
  13565c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  135660:	e50b300c 	str	r3, [fp, #-12]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  135664:	e51b300c 	ldr	r3, [fp, #-12]
  135668:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  13566c:	e50b3008 	str	r3, [fp, #-8]

    phy_reset(imx6ul_device->phy_base_addr,imx6ul_device->phy_gpio_pin);
  135670:	e51b300c 	ldr	r3, [fp, #-12]
  135674:	e593221c 	ldr	r2, [r3, #540]	; 0x21c
  135678:	e51b300c 	ldr	r3, [fp, #-12]
  13567c:	e5933220 	ldr	r3, [r3, #544]	; 0x220
  135680:	e1a01003 	mov	r1, r3
  135684:	e1a00002 	mov	r0, r2
  135688:	eb000a8e 	bl	1380c8 <phy_reset>
    PHY_Init(base_addr, imx6ul_device->phy_num, SYS_CLOCK_HZ,imx6ul_device->phy_id);
  13568c:	e51b300c 	ldr	r3, [fp, #-12]
  135690:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  135694:	e1a01003 	mov	r1, r3
  135698:	e51b300c 	ldr	r3, [fp, #-12]
  13569c:	e5933224 	ldr	r3, [r3, #548]	; 0x224
  1356a0:	e3a02d52 	mov	r2, #5248	; 0x1480
  1356a4:	e34023ef 	movt	r2, #1007	; 0x3ef
  1356a8:	e51b0008 	ldr	r0, [fp, #-8]
  1356ac:	eb000af9 	bl	138298 <PHY_Init>
    PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  1356b0:	e51b300c 	ldr	r3, [fp, #-12]
  1356b4:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1356b8:	e1a01003 	mov	r1, r3
  1356bc:	e24b300d 	sub	r3, fp, #13
  1356c0:	e1a02003 	mov	r2, r3
  1356c4:	e51b0008 	ldr	r0, [fp, #-8]
  1356c8:	eb000be5 	bl	138664 <PHY_GetLinkStatus>
    if (link)
  1356cc:	e55b300d 	ldrb	r3, [fp, #-13]
  1356d0:	e3530000 	cmp	r3, #0
  1356d4:	0a00000d 	beq	135710 <phy_detect_thread_entry+0xd4>
    {
        /* Get the actual PHY link speed. */
        PHY_GetLinkSpeedDuplex(base_addr, imx6ul_device->phy_num, &speed, &duplex);
  1356d8:	e51b300c 	ldr	r3, [fp, #-12]
  1356dc:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1356e0:	e1a01003 	mov	r1, r3
  1356e4:	e24b3018 	sub	r3, fp, #24
  1356e8:	e24b2014 	sub	r2, fp, #20
  1356ec:	e51b0008 	ldr	r0, [fp, #-8]
  1356f0:	eb000c04 	bl	138708 <PHY_GetLinkSpeedDuplex>
        /* Change the MII speed and duplex for actual link status. */
        imx6ul_device->config.miiSpeed = (enet_mii_speed_t)speed;
  1356f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1356f8:	e51b300c 	ldr	r3, [fp, #-12]
  1356fc:	e58320ec 	str	r2, [r3, #236]	; 0xec
        imx6ul_device->config.miiDuplex = (enet_mii_duplex_t)duplex;
  135700:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  135704:	e51b300c 	ldr	r3, [fp, #-12]
  135708:	e58320f0 	str	r2, [r3, #240]	; 0xf0
  13570c:	ea000008 	b	135734 <phy_detect_thread_entry+0xf8>
    }
    else
    {
        LOG_W("PHY Link down, please check the cable connection and link partner setting.");
  135710:	e3090d84 	movw	r0, #40324	; 0x9d84
  135714:	e3400014 	movt	r0, #20
  135718:	ebff367d 	bl	103114 <rt_kprintf>
  13571c:	e3090d98 	movw	r0, #40344	; 0x9d98
  135720:	e3400014 	movt	r0, #20
  135724:	ebff367a 	bl	103114 <rt_kprintf>
  135728:	e3090b90 	movw	r0, #39824	; 0x9b90
  13572c:	e3400014 	movt	r0, #20
  135730:	ebff3677 	bl	103114 <rt_kprintf>
    }

    while(1)
    {
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  135734:	e51b300c 	ldr	r3, [fp, #-12]
  135738:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  13573c:	e1a01003 	mov	r1, r3
  135740:	e24b300d 	sub	r3, fp, #13
  135744:	e1a02003 	mov	r2, r3
  135748:	e51b0008 	ldr	r0, [fp, #-8]
  13574c:	eb000bc4 	bl	138664 <PHY_GetLinkStatus>
        if(link != imx6ul_device->phy_link_status)
  135750:	e55b300d 	ldrb	r3, [fp, #-13]
  135754:	e1a02003 	mov	r2, r3
  135758:	e51b300c 	ldr	r3, [fp, #-12]
  13575c:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  135760:	e1520003 	cmp	r2, r3
  135764:	0a00000b 	beq	135798 <phy_detect_thread_entry+0x15c>
        {
            if(link == true)
  135768:	e55b300d 	ldrb	r3, [fp, #-13]
  13576c:	e3530000 	cmp	r3, #0
  135770:	0a000004 	beq	135788 <phy_detect_thread_entry+0x14c>
            {
                PHY_StartNegotiation(base_addr,imx6ul_device->phy_num);
  135774:	e51b300c 	ldr	r3, [fp, #-12]
  135778:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  13577c:	e1a01003 	mov	r1, r3
  135780:	e51b0008 	ldr	r0, [fp, #-8]
  135784:	eb000a74 	bl	13815c <PHY_StartNegotiation>
                
            }            
            imx6ul_eth_link_change(imx6ul_device,link);
  135788:	e55b300d 	ldrb	r3, [fp, #-13]
  13578c:	e1a01003 	mov	r1, r3
  135790:	e51b000c 	ldr	r0, [fp, #-12]
  135794:	ebfffba9 	bl	134640 <imx6ul_eth_link_change>
        }
        rt_thread_mdelay(DETECT_DELAY_ONE_SECOND);
  135798:	e3a00ffa 	mov	r0, #1000	; 0x3e8
  13579c:	ebff31b6 	bl	101e7c <rt_thread_mdelay>
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  1357a0:	eaffffe3 	b	135734 <phy_detect_thread_entry+0xf8>

001357a4 <imx6ul_eth_init>:
    rt_imx6ul_eth_write,
    rt_imx6ul_eth_control,
};

int imx6ul_eth_init(int eth_select, const char ** eth_name)
{
  1357a4:	e92d4800 	push	{fp, lr}
  1357a8:	e28db004 	add	fp, sp, #4
  1357ac:	e24dd030 	sub	sp, sp, #48	; 0x30
  1357b0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1357b4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    rt_err_t state = RT_EOK;
  1357b8:	e3a03000 	mov	r3, #0
  1357bc:	e50b3008 	str	r3, [fp, #-8]
    char link_detect[10];
    char mac_addr[MAX_ADDR_LEN];

    if (ipc_service_init() == RT_ERROR)
  1357c0:	ebff3ad0 	bl	104308 <ipc_service_init>
  1357c4:	e1a03000 	mov	r3, r0
  1357c8:	e3530001 	cmp	r3, #1
  1357cc:	1a000001 	bne	1357d8 <imx6ul_eth_init+0x34>
    {
        return -RT_ERROR;
  1357d0:	e3e03000 	mvn	r3, #0
  1357d4:	ea0000b1 	b	135aa0 <imx6ul_eth_init+0x2fc>
    }


    ueth_gpioinit((void *)&mdio_gpio[0], sizeof(mdio_gpio[0]));
  1357d8:	e3a0101c 	mov	r1, #28
  1357dc:	e30d0040 	movw	r0, #53312	; 0xd040
  1357e0:	e3400014 	movt	r0, #20
  1357e4:	ebff3b66 	bl	104584 <ueth_gpioinit>
    ueth_gpioinit((void *)&mdio_gpio[1], sizeof(mdio_gpio[1]));
  1357e8:	e3a0101c 	mov	r1, #28
  1357ec:	e59f02b8 	ldr	r0, [pc, #696]	; 135aac <imx6ul_eth_init+0x308>
  1357f0:	ebff3b63 	bl	104584 <ueth_gpioinit>

    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  1357f4:	e3a03000 	mov	r3, #0
  1357f8:	e50b300c 	str	r3, [fp, #-12]
  1357fc:	ea000090 	b	135a44 <imx6ul_eth_init+0x2a0>
    {
        _imx6ul_eth_device[idx].parent.parent.ops = &_k_enet_ops;
  135800:	e30d3078 	movw	r3, #53368	; 0xd078
  135804:	e3403014 	movt	r3, #20
  135808:	e51b200c 	ldr	r2, [fp, #-12]
  13580c:	e3a01f8a 	mov	r1, #552	; 0x228
  135810:	e0020291 	mul	r2, r1, r2
  135814:	e0833002 	add	r3, r3, r2
  135818:	e283202c 	add	r2, r3, #44	; 0x2c
  13581c:	e3093de4 	movw	r3, #40420	; 0x9de4
  135820:	e3403014 	movt	r3, #20
  135824:	e5823000 	str	r3, [r2]
#ifdef RT_USING_LWIP        
        _imx6ul_eth_device[idx].parent.eth_rx     = rt_imx6ul_eth_rx;
  135828:	e30d3078 	movw	r3, #53368	; 0xd078
  13582c:	e3403014 	movt	r3, #20
  135830:	e51b200c 	ldr	r2, [fp, #-12]
  135834:	e3a01f8a 	mov	r1, #552	; 0x228
  135838:	e0020291 	mul	r2, r1, r2
  13583c:	e0833002 	add	r3, r3, r2
  135840:	e2832070 	add	r2, r3, #112	; 0x70
  135844:	e30530e4 	movw	r3, #20708	; 0x50e4
  135848:	e3403013 	movt	r3, #19
  13584c:	e5823000 	str	r3, [r2]
        _imx6ul_eth_device[idx].parent.eth_tx     = rt_imx6ul_eth_tx;
  135850:	e30d3078 	movw	r3, #53368	; 0xd078
  135854:	e3403014 	movt	r3, #20
  135858:	e51b200c 	ldr	r2, [fp, #-12]
  13585c:	e3a01f8a 	mov	r1, #552	; 0x228
  135860:	e0020291 	mul	r2, r1, r2
  135864:	e0833002 	add	r3, r3, r2
  135868:	e2832074 	add	r2, r3, #116	; 0x74
  13586c:	e3043f84 	movw	r3, #20356	; 0x4f84
  135870:	e3403013 	movt	r3, #19
  135874:	e5823000 	str	r3, [r2]
#endif        
        _imx6ul_eth_device[idx].phy_link_status   = RT_FALSE;
  135878:	e30d3078 	movw	r3, #53368	; 0xd078
  13587c:	e3403014 	movt	r3, #20
  135880:	e51b200c 	ldr	r2, [fp, #-12]
  135884:	e3a01f8a 	mov	r1, #552	; 0x228
  135888:	e0020291 	mul	r2, r1, r2
  13588c:	e0833002 	add	r3, r3, r2
  135890:	e2833088 	add	r3, r3, #136	; 0x88
  135894:	e3a02000 	mov	r2, #0
  135898:	e5832000 	str	r2, [r3]

#ifdef SAL_USING_UNET
        rt_imx6ul_eth_control((rt_device_t)(&_imx6ul_eth_device[idx]),NIOCTL_GADDR,mac_addr);
  13589c:	e51b300c 	ldr	r3, [fp, #-12]
  1358a0:	e3a02f8a 	mov	r2, #552	; 0x228
  1358a4:	e0020392 	mul	r2, r2, r3
  1358a8:	e30d3078 	movw	r3, #53368	; 0xd078
  1358ac:	e3403014 	movt	r3, #20
  1358b0:	e0823003 	add	r3, r2, r3
  1358b4:	e24b2024 	sub	r2, fp, #36	; 0x24
  1358b8:	e3a01001 	mov	r1, #1
  1358bc:	e1a00003 	mov	r0, r3
  1358c0:	ebfffce3 	bl	134c54 <rt_imx6ul_eth_control>
        
        rt_imx6ul_eth_init((rt_device_t)(&(_imx6ul_eth_device[idx].parent)));
  1358c4:	e51b300c 	ldr	r3, [fp, #-12]
  1358c8:	e3a02f8a 	mov	r2, #552	; 0x228
  1358cc:	e0020392 	mul	r2, r2, r3
  1358d0:	e30d3078 	movw	r3, #53368	; 0xd078
  1358d4:	e3403014 	movt	r3, #20
  1358d8:	e0823003 	add	r3, r2, r3
  1358dc:	e1a00003 	mov	r0, r3
  1358e0:	ebfffc5c 	bl	134a58 <rt_imx6ul_eth_init>
#endif
        eth_init_done = 1;
  1358e4:	e30e3c14 	movw	r3, #60436	; 0xec14
  1358e8:	e3403014 	movt	r3, #20
  1358ec:	e3a02001 	mov	r2, #1
  1358f0:	e5832000 	str	r2, [r3]
        /* register eth device */
        state = eth_device_init(&(_imx6ul_eth_device[idx].parent), _imx6ul_eth_device[idx].mac_name);
  1358f4:	e51b300c 	ldr	r3, [fp, #-12]
  1358f8:	e3a02f8a 	mov	r2, #552	; 0x228
  1358fc:	e0020392 	mul	r2, r2, r3
  135900:	e30d3078 	movw	r3, #53368	; 0xd078
  135904:	e3403014 	movt	r3, #20
  135908:	e0820003 	add	r0, r2, r3
  13590c:	e30d3078 	movw	r3, #53368	; 0xd078
  135910:	e3403014 	movt	r3, #20
  135914:	e51b200c 	ldr	r2, [fp, #-12]
  135918:	e3a01f8a 	mov	r1, #552	; 0x228
  13591c:	e0020291 	mul	r2, r1, r2
  135920:	e0833002 	add	r3, r3, r2
  135924:	e283308c 	add	r3, r3, #140	; 0x8c
  135928:	e5933000 	ldr	r3, [r3]
  13592c:	e1a01003 	mov	r1, r3
  135930:	ebffd047 	bl	129a54 <eth_device_init>
  135934:	e50b0008 	str	r0, [fp, #-8]
        if (RT_EOK == state)
  135938:	e51b3008 	ldr	r3, [fp, #-8]
  13593c:	e3530000 	cmp	r3, #0
  135940:	1a000009 	bne	13596c <imx6ul_eth_init+0x1c8>
        {
            LOG_I("emac device init success");
  135944:	e3090dfc 	movw	r0, #40444	; 0x9dfc
  135948:	e3400014 	movt	r0, #20
  13594c:	ebff35f0 	bl	103114 <rt_kprintf>
  135950:	e3090e10 	movw	r0, #40464	; 0x9e10
  135954:	e3400014 	movt	r0, #20
  135958:	ebff35ed 	bl	103114 <rt_kprintf>
  13595c:	e3090b90 	movw	r0, #39824	; 0x9b90
  135960:	e3400014 	movt	r0, #20
  135964:	ebff35ea 	bl	103114 <rt_kprintf>
  135968:	ea00000b 	b	13599c <imx6ul_eth_init+0x1f8>
        }
        else
        {
            LOG_E("emac device init faild: %d", state);
  13596c:	e3090bac 	movw	r0, #39852	; 0x9bac
  135970:	e3400014 	movt	r0, #20
  135974:	ebff35e6 	bl	103114 <rt_kprintf>
  135978:	e51b1008 	ldr	r1, [fp, #-8]
  13597c:	e3090e2c 	movw	r0, #40492	; 0x9e2c
  135980:	e3400014 	movt	r0, #20
  135984:	ebff35e2 	bl	103114 <rt_kprintf>
  135988:	e3090b90 	movw	r0, #39824	; 0x9b90
  13598c:	e3400014 	movt	r0, #20
  135990:	ebff35df 	bl	103114 <rt_kprintf>
            state = -RT_ERROR;
  135994:	e3e03000 	mvn	r3, #0
  135998:	e50b3008 	str	r3, [fp, #-8]
        }

        rt_sprintf(link_detect,"link_d%d",_imx6ul_eth_device[idx].mac_num);
  13599c:	e30d3078 	movw	r3, #53368	; 0xd078
  1359a0:	e3403014 	movt	r3, #20
  1359a4:	e51b200c 	ldr	r2, [fp, #-12]
  1359a8:	e3a01f8a 	mov	r1, #552	; 0x228
  1359ac:	e0020291 	mul	r2, r1, r2
  1359b0:	e0833002 	add	r3, r3, r2
  1359b4:	e28330a4 	add	r3, r3, #164	; 0xa4
  1359b8:	e5932000 	ldr	r2, [r3]
  1359bc:	e24b301c 	sub	r3, fp, #28
  1359c0:	e3091e48 	movw	r1, #40520	; 0x9e48
  1359c4:	e3401014 	movt	r1, #20
  1359c8:	e1a00003 	mov	r0, r3
  1359cc:	ebff35ae 	bl	10308c <rt_sprintf>
        /* start phy link detect */
        rt_thread_t phy_link_tid;
        phy_link_tid = rt_thread_create(link_detect,
                                phy_detect_thread_entry,
                                &_imx6ul_eth_device[idx],
  1359d0:	e51b300c 	ldr	r3, [fp, #-12]
  1359d4:	e3a02f8a 	mov	r2, #552	; 0x228
  1359d8:	e0020392 	mul	r2, r2, r3
  1359dc:	e30d3078 	movw	r3, #53368	; 0xd078
  1359e0:	e3403014 	movt	r3, #20
  1359e4:	e0822003 	add	r2, r2, r3
        phy_link_tid = rt_thread_create(link_detect,
  1359e8:	e24b001c 	sub	r0, fp, #28
  1359ec:	e3a03002 	mov	r3, #2
  1359f0:	e58d3004 	str	r3, [sp, #4]
  1359f4:	e3a03019 	mov	r3, #25
  1359f8:	e58d3000 	str	r3, [sp]
  1359fc:	e3a03a01 	mov	r3, #4096	; 0x1000
  135a00:	e305163c 	movw	r1, #22076	; 0x563c
  135a04:	e3401013 	movt	r1, #19
  135a08:	ebff31b9 	bl	1020f4 <rt_thread_create>
  135a0c:	e50b0010 	str	r0, [fp, #-16]
                                4096,
                                25,
                                2);
        if (phy_link_tid != RT_NULL)
  135a10:	e51b3010 	ldr	r3, [fp, #-16]
  135a14:	e3530000 	cmp	r3, #0
  135a18:	0a000001 	beq	135a24 <imx6ul_eth_init+0x280>
        {
            rt_thread_startup(phy_link_tid);
  135a1c:	e51b0010 	ldr	r0, [fp, #-16]
  135a20:	ebff31e8 	bl	1021c8 <rt_thread_startup>
        }
        memset(link_detect,0,sizeof(link_detect));
  135a24:	e24b301c 	sub	r3, fp, #28
  135a28:	e3a0200a 	mov	r2, #10
  135a2c:	e3a01000 	mov	r1, #0
  135a30:	e1a00003 	mov	r0, r3
  135a34:	eb002e00 	bl	14123c <memset>
    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  135a38:	e51b300c 	ldr	r3, [fp, #-12]
  135a3c:	e2833001 	add	r3, r3, #1
  135a40:	e50b300c 	str	r3, [fp, #-12]
  135a44:	e51b300c 	ldr	r3, [fp, #-12]
  135a48:	e3530000 	cmp	r3, #0
  135a4c:	0affff6b 	beq	135800 <imx6ul_eth_init+0x5c>
    }

    if (eth_select > GET_ARRAY_NUM(_imx6ul_eth_device)) 
  135a50:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135a54:	e3530001 	cmp	r3, #1
  135a58:	9a000005 	bls	135a74 <imx6ul_eth_init+0x2d0>
    {
        *eth_name = RT_NULL;
  135a5c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135a60:	e3a02000 	mov	r2, #0
  135a64:	e5832000 	str	r2, [r3]
        state = -RT_ERROR;
  135a68:	e3e03000 	mvn	r3, #0
  135a6c:	e50b3008 	str	r3, [fp, #-8]
  135a70:	ea000009 	b	135a9c <imx6ul_eth_init+0x2f8>
    } 
    else 
    {
        *eth_name = _imx6ul_eth_device[eth_select].mac_name;
  135a74:	e30d3078 	movw	r3, #53368	; 0xd078
  135a78:	e3403014 	movt	r3, #20
  135a7c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  135a80:	e3a01f8a 	mov	r1, #552	; 0x228
  135a84:	e0020291 	mul	r2, r1, r2
  135a88:	e0833002 	add	r3, r3, r2
  135a8c:	e283308c 	add	r3, r3, #140	; 0x8c
  135a90:	e5932000 	ldr	r2, [r3]
  135a94:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135a98:	e5832000 	str	r2, [r3]
    }

    return state;
  135a9c:	e51b3008 	ldr	r3, [fp, #-8]
}
  135aa0:	e1a00003 	mov	r0, r3
  135aa4:	e24bd004 	sub	sp, fp, #4
  135aa8:	e8bd8800 	pop	{fp, pc}
  135aac:	0014d05c 	.word	0x0014d05c

00135ab0 <__assert_func>:
        __BKPT(0);
    }
}
#elif(defined(__GNUC__))
void __assert_func(const char *file, int line, const char *func, const char *failedExpr)
{
  135ab0:	e92d4800 	push	{fp, lr}
  135ab4:	e28db004 	add	fp, sp, #4
  135ab8:	e24dd018 	sub	sp, sp, #24
  135abc:	e50b0008 	str	r0, [fp, #-8]
  135ac0:	e50b100c 	str	r1, [fp, #-12]
  135ac4:	e50b2010 	str	r2, [fp, #-16]
  135ac8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    PRINTF("ASSERT ERROR \" %s \": file \"%s\" Line \"%d\" function name \"%s\" \n", failedExpr, file, line, func);
  135acc:	e51b3010 	ldr	r3, [fp, #-16]
  135ad0:	e58d3000 	str	r3, [sp]
  135ad4:	e51b300c 	ldr	r3, [fp, #-12]
  135ad8:	e51b2008 	ldr	r2, [fp, #-8]
  135adc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  135ae0:	e3090e68 	movw	r0, #40552	; 0x9e68
  135ae4:	e3400014 	movt	r0, #20
  135ae8:	ebff3589 	bl	103114 <rt_kprintf>
    for (;;)
    {
        __BKPT(0);
  135aec:	e1200070 	bkpt	0x0000
  135af0:	eafffffd 	b	135aec <__assert_func+0x3c>

00135af4 <SDK_Malloc>:
                           /*   SYSCON->STARTERCLR[index] = 1u << intNumber; */
}
#endif /*CPU_QN908X */

void *SDK_Malloc(size_t size, size_t alignbytes)
{
  135af4:	e92d4800 	push	{fp, lr}
  135af8:	e28db004 	add	fp, sp, #4
  135afc:	e24dd018 	sub	sp, sp, #24
  135b00:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  135b04:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    mem_align_cb_t *p_cb = NULL;
  135b08:	e3a03000 	mov	r3, #0
  135b0c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t alignedsize = SDK_SIZEALIGN(size, alignbytes) + alignbytes + sizeof(mem_align_cb_t);
  135b10:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  135b14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135b18:	e0823003 	add	r3, r2, r3
  135b1c:	e2432001 	sub	r2, r3, #1
  135b20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135b24:	e2633000 	rsb	r3, r3, #0
  135b28:	e0022003 	and	r2, r2, r3
  135b2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135b30:	e0823003 	add	r3, r2, r3
  135b34:	e2833004 	add	r3, r3, #4
  135b38:	e50b300c 	str	r3, [fp, #-12]
    void *p_align_addr, *p_addr = malloc(alignedsize);
  135b3c:	e51b000c 	ldr	r0, [fp, #-12]
  135b40:	eb001df4 	bl	13d318 <malloc>
  135b44:	e1a03000 	mov	r3, r0
  135b48:	e50b3010 	str	r3, [fp, #-16]

    if (!p_addr)
  135b4c:	e51b3010 	ldr	r3, [fp, #-16]
  135b50:	e3530000 	cmp	r3, #0
  135b54:	1a000001 	bne	135b60 <SDK_Malloc+0x6c>
    {
        return NULL;
  135b58:	e3a03000 	mov	r3, #0
  135b5c:	ea000014 	b	135bb4 <SDK_Malloc+0xc0>
    }

    p_align_addr = (void *)SDK_SIZEALIGN((uint32_t)p_addr + sizeof(mem_align_cb_t), alignbytes);
  135b60:	e51b2010 	ldr	r2, [fp, #-16]
  135b64:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135b68:	e0823003 	add	r3, r2, r3
  135b6c:	e2832003 	add	r2, r3, #3
  135b70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135b74:	e2633000 	rsb	r3, r3, #0
  135b78:	e0033002 	and	r3, r3, r2
  135b7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    p_cb = (mem_align_cb_t *)((uint32_t)p_align_addr - 4);
  135b80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135b84:	e2433004 	sub	r3, r3, #4
  135b88:	e50b3008 	str	r3, [fp, #-8]
    p_cb->identifier = SDK_MEM_MAGIC_NUMBER;
  135b8c:	e51b3008 	ldr	r3, [fp, #-8]
  135b90:	e3032039 	movw	r2, #12345	; 0x3039
  135b94:	e1c320b0 	strh	r2, [r3]
    p_cb->offset = (uint32_t)p_align_addr - (uint32_t)p_addr;
  135b98:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135b9c:	e51b3010 	ldr	r3, [fp, #-16]
  135ba0:	e0423003 	sub	r3, r2, r3
  135ba4:	e6ff2073 	uxth	r2, r3
  135ba8:	e51b3008 	ldr	r3, [fp, #-8]
  135bac:	e1c320b2 	strh	r2, [r3, #2]

    return (void *)p_align_addr;
  135bb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  135bb4:	e1a00003 	mov	r0, r3
  135bb8:	e24bd004 	sub	sp, fp, #4
  135bbc:	e8bd8800 	pop	{fp, pc}

00135bc0 <SDK_Free>:

void SDK_Free(void *ptr)
{
  135bc0:	e92d4800 	push	{fp, lr}
  135bc4:	e28db004 	add	fp, sp, #4
  135bc8:	e24dd010 	sub	sp, sp, #16
  135bcc:	e50b0010 	str	r0, [fp, #-16]
    mem_align_cb_t *p_cb = (mem_align_cb_t *)((uint32_t)ptr - 4);
  135bd0:	e51b3010 	ldr	r3, [fp, #-16]
  135bd4:	e2433004 	sub	r3, r3, #4
  135bd8:	e50b3008 	str	r3, [fp, #-8]

    if (p_cb->identifier != SDK_MEM_MAGIC_NUMBER)
  135bdc:	e51b3008 	ldr	r3, [fp, #-8]
  135be0:	e1d330b0 	ldrh	r3, [r3]
  135be4:	e3032039 	movw	r2, #12345	; 0x3039
  135be8:	e1530002 	cmp	r3, r2
  135bec:	1a000006 	bne	135c0c <SDK_Free+0x4c>
    {
        return;
    }

    free((void *)((uint32_t)ptr - p_cb->offset));
  135bf0:	e51b3010 	ldr	r3, [fp, #-16]
  135bf4:	e51b2008 	ldr	r2, [fp, #-8]
  135bf8:	e1d220b2 	ldrh	r2, [r2, #2]
  135bfc:	e0433002 	sub	r3, r3, r2
  135c00:	e1a00003 	mov	r0, r3
  135c04:	eb001f7f 	bl	13da08 <free>
  135c08:	ea000000 	b	135c10 <SDK_Free+0x50>
        return;
  135c0c:	e320f000 	nop	{0}
}
  135c10:	e24bd004 	sub	sp, fp, #4
  135c14:	e8bd8800 	pop	{fp, pc}

00135c18 <ENET_Reset>:
{
  135c18:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135c1c:	e28db000 	add	fp, sp, #0
  135c20:	e24dd00c 	sub	sp, sp, #12
  135c24:	e50b0008 	str	r0, [fp, #-8]
    base->ECR |= ENET_ECR_RESET_MASK;
  135c28:	e51b3008 	ldr	r3, [fp, #-8]
  135c2c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135c30:	e3832001 	orr	r2, r3, #1
  135c34:	e51b3008 	ldr	r3, [fp, #-8]
  135c38:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135c3c:	e320f000 	nop	{0}
  135c40:	e28bd000 	add	sp, fp, #0
  135c44:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135c48:	e12fff1e 	bx	lr

00135c4c <ENET_GetSMI>:
{
  135c4c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135c50:	e28db000 	add	fp, sp, #0
  135c54:	e24dd00c 	sub	sp, sp, #12
  135c58:	e50b0008 	str	r0, [fp, #-8]
    return (0 != (base->MSCR & 0x7E));
  135c5c:	e51b3008 	ldr	r3, [fp, #-8]
  135c60:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  135c64:	e203307e 	and	r3, r3, #126	; 0x7e
  135c68:	e3530000 	cmp	r3, #0
  135c6c:	13a03001 	movne	r3, #1
  135c70:	03a03000 	moveq	r3, #0
  135c74:	e6ef3073 	uxtb	r3, r3
}
  135c78:	e1a00003 	mov	r0, r3
  135c7c:	e28bd000 	add	sp, fp, #0
  135c80:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135c84:	e12fff1e 	bx	lr

00135c88 <ENET_EnableSleepMode>:
{
  135c88:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135c8c:	e28db000 	add	fp, sp, #0
  135c90:	e24dd00c 	sub	sp, sp, #12
  135c94:	e50b0008 	str	r0, [fp, #-8]
  135c98:	e1a03001 	mov	r3, r1
  135c9c:	e54b3009 	strb	r3, [fp, #-9]
    if (enable)
  135ca0:	e55b3009 	ldrb	r3, [fp, #-9]
  135ca4:	e3530000 	cmp	r3, #0
  135ca8:	0a000005 	beq	135cc4 <ENET_EnableSleepMode+0x3c>
        base->ECR |= ENET_ECR_SLEEP_MASK | ENET_ECR_MAGICEN_MASK;
  135cac:	e51b3008 	ldr	r3, [fp, #-8]
  135cb0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135cb4:	e383200c 	orr	r2, r3, #12
  135cb8:	e51b3008 	ldr	r3, [fp, #-8]
  135cbc:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135cc0:	ea000004 	b	135cd8 <ENET_EnableSleepMode+0x50>
        base->ECR &= ~(ENET_ECR_SLEEP_MASK | ENET_ECR_MAGICEN_MASK);
  135cc4:	e51b3008 	ldr	r3, [fp, #-8]
  135cc8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135ccc:	e3c3200c 	bic	r2, r3, #12
  135cd0:	e51b3008 	ldr	r3, [fp, #-8]
  135cd4:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135cd8:	e320f000 	nop	{0}
  135cdc:	e28bd000 	add	sp, fp, #0
  135ce0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135ce4:	e12fff1e 	bx	lr

00135ce8 <ENET_EnableInterrupts>:
{
  135ce8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135cec:	e28db000 	add	fp, sp, #0
  135cf0:	e24dd00c 	sub	sp, sp, #12
  135cf4:	e50b0008 	str	r0, [fp, #-8]
  135cf8:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  135cfc:	e51b3008 	ldr	r3, [fp, #-8]
  135d00:	e5932008 	ldr	r2, [r3, #8]
  135d04:	e51b300c 	ldr	r3, [fp, #-12]
  135d08:	e1822003 	orr	r2, r2, r3
  135d0c:	e51b3008 	ldr	r3, [fp, #-8]
  135d10:	e5832008 	str	r2, [r3, #8]
}
  135d14:	e320f000 	nop	{0}
  135d18:	e28bd000 	add	sp, fp, #0
  135d1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135d20:	e12fff1e 	bx	lr

00135d24 <ENET_GetInstance>:

/*******************************************************************************
 * Code
 ******************************************************************************/
uint32_t ENET_GetInstance(ENET_Type *base)
{
  135d24:	e92d4800 	push	{fp, lr}
  135d28:	e28db004 	add	fp, sp, #4
  135d2c:	e24dd010 	sub	sp, sp, #16
  135d30:	e50b0010 	str	r0, [fp, #-16]
    uint32_t instance;
    /* Find the instance index from base address mappings. */
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  135d34:	e3a03000 	mov	r3, #0
  135d38:	e50b3008 	str	r3, [fp, #-8]
  135d3c:	ea000009 	b	135d68 <ENET_GetInstance+0x44>
    {
        if (s_enetBases[instance] == base)
  135d40:	e3093ea8 	movw	r3, #40616	; 0x9ea8
  135d44:	e3403014 	movt	r3, #20
  135d48:	e51b2008 	ldr	r2, [fp, #-8]
  135d4c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  135d50:	e51b2010 	ldr	r2, [fp, #-16]
  135d54:	e1520003 	cmp	r2, r3
  135d58:	0a000006 	beq	135d78 <ENET_GetInstance+0x54>
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  135d5c:	e51b3008 	ldr	r3, [fp, #-8]
  135d60:	e2833001 	add	r3, r3, #1
  135d64:	e50b3008 	str	r3, [fp, #-8]
  135d68:	e51b3008 	ldr	r3, [fp, #-8]
  135d6c:	e3530002 	cmp	r3, #2
  135d70:	9afffff2 	bls	135d40 <ENET_GetInstance+0x1c>
  135d74:	ea000000 	b	135d7c <ENET_GetInstance+0x58>
        {
            break;
  135d78:	e320f000 	nop	{0}
        }
    }
    RT_ASSERT(instance < ARRAY_SIZE(s_enetBases));
  135d7c:	e51b3008 	ldr	r3, [fp, #-8]
  135d80:	e3530002 	cmp	r3, #2
  135d84:	9a000005 	bls	135da0 <ENET_GetInstance+0x7c>
  135d88:	e3a020d7 	mov	r2, #215	; 0xd7
  135d8c:	e30a1224 	movw	r1, #41508	; 0xa224
  135d90:	e3401014 	movt	r1, #20
  135d94:	e3090eb4 	movw	r0, #40628	; 0x9eb4
  135d98:	e3400014 	movt	r0, #20
  135d9c:	ebff35fd 	bl	103598 <rt_assert_handler>

    return instance;
  135da0:	e51b3008 	ldr	r3, [fp, #-8]
}
  135da4:	e1a00003 	mov	r0, r3
  135da8:	e24bd004 	sub	sp, fp, #4
  135dac:	e8bd8800 	pop	{fp, pc}

00135db0 <ENET_GetDefaultConfig>:
};

#endif

void ENET_GetDefaultConfig(enet_config_t *config)
{
  135db0:	e92d4800 	push	{fp, lr}
  135db4:	e28db004 	add	fp, sp, #4
  135db8:	e24dd008 	sub	sp, sp, #8
  135dbc:	e50b0008 	str	r0, [fp, #-8]
    /* Checks input parameter. */
    RT_ASSERT(config);
  135dc0:	e51b3008 	ldr	r3, [fp, #-8]
  135dc4:	e3530000 	cmp	r3, #0
  135dc8:	1a000005 	bne	135de4 <ENET_GetDefaultConfig+0x34>
  135dcc:	e3a020e9 	mov	r2, #233	; 0xe9
  135dd0:	e30a1238 	movw	r1, #41528	; 0xa238
  135dd4:	e3401014 	movt	r1, #20
  135dd8:	e3090ed8 	movw	r0, #40664	; 0x9ed8
  135ddc:	e3400014 	movt	r0, #20
  135de0:	ebff35ec 	bl	103598 <rt_assert_handler>

    /* Initializes the MAC configure structure to zero. */
    memset(config, 0, sizeof(enet_config_t));
  135de4:	e3a02024 	mov	r2, #36	; 0x24
  135de8:	e3a01000 	mov	r1, #0
  135dec:	e51b0008 	ldr	r0, [fp, #-8]
  135df0:	eb002d11 	bl	14123c <memset>

    #if defined (FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    config->intCoalesceCfg = &intcoalesce_config;
  135df4:	e51b2008 	ldr	r2, [fp, #-8]
  135df8:	e30d32a0 	movw	r3, #53920	; 0xd2a0
  135dfc:	e3403014 	movt	r3, #20
  135e00:	e5823020 	str	r3, [r2, #32]
    #endif

    /* Sets MII mode, full duplex, 100Mbps for MAC and PHY data interface. */
    config->miiMode = kENET_RmiiMode;
  135e04:	e51b3008 	ldr	r3, [fp, #-8]
  135e08:	e3a02001 	mov	r2, #1
  135e0c:	e583200c 	str	r2, [r3, #12]
    config->miiSpeed = kENET_MiiSpeed100M;
  135e10:	e51b3008 	ldr	r3, [fp, #-8]
  135e14:	e3a02001 	mov	r2, #1
  135e18:	e5832010 	str	r2, [r3, #16]
    config->miiDuplex = kENET_MiiFullDuplex;
  135e1c:	e51b3008 	ldr	r3, [fp, #-8]
  135e20:	e3a02001 	mov	r2, #1
  135e24:	e5832014 	str	r2, [r3, #20]

    /* Sets the maximum receive frame length. */
    config->rxMaxFrameLen = ENET_FRAME_MAX_FRAMELEN;
  135e28:	e51b3008 	ldr	r3, [fp, #-8]
  135e2c:	e30025ee 	movw	r2, #1518	; 0x5ee
  135e30:	e1c320b8 	strh	r2, [r3, #8]
}
  135e34:	e320f000 	nop	{0}
  135e38:	e24bd004 	sub	sp, fp, #4
  135e3c:	e8bd8800 	pop	{fp, pc}

00135e40 <ENET_Init>:
               enet_handle_t *handle,
               const enet_config_t *config,
               const enet_buffer_config_t *bufferConfig,
               uint8_t *macAddr,
               uint32_t srcClock_Hz)
{
  135e40:	e92d4800 	push	{fp, lr}
  135e44:	e28db004 	add	fp, sp, #4
  135e48:	e24dd018 	sub	sp, sp, #24
  135e4c:	e50b0008 	str	r0, [fp, #-8]
  135e50:	e50b100c 	str	r1, [fp, #-12]
  135e54:	e50b2010 	str	r2, [fp, #-16]
  135e58:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Checks input parameters. */
    RT_ASSERT(handle);
  135e5c:	e51b300c 	ldr	r3, [fp, #-12]
  135e60:	e3530000 	cmp	r3, #0
  135e64:	1a000005 	bne	135e80 <ENET_Init+0x40>
  135e68:	e3002103 	movw	r2, #259	; 0x103
  135e6c:	e30a1250 	movw	r1, #41552	; 0xa250
  135e70:	e3401014 	movt	r1, #20
  135e74:	e3090ee0 	movw	r0, #40672	; 0x9ee0
  135e78:	e3400014 	movt	r0, #20
  135e7c:	ebff35c5 	bl	103598 <rt_assert_handler>
    RT_ASSERT(config);
  135e80:	e51b3010 	ldr	r3, [fp, #-16]
  135e84:	e3530000 	cmp	r3, #0
  135e88:	1a000005 	bne	135ea4 <ENET_Init+0x64>
  135e8c:	e3a02f41 	mov	r2, #260	; 0x104
  135e90:	e30a1250 	movw	r1, #41552	; 0xa250
  135e94:	e3401014 	movt	r1, #20
  135e98:	e3090ed8 	movw	r0, #40664	; 0x9ed8
  135e9c:	e3400014 	movt	r0, #20
  135ea0:	ebff35bc 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig);
  135ea4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135ea8:	e3530000 	cmp	r3, #0
  135eac:	1a000005 	bne	135ec8 <ENET_Init+0x88>
  135eb0:	e3002105 	movw	r2, #261	; 0x105
  135eb4:	e30a1250 	movw	r1, #41552	; 0xa250
  135eb8:	e3401014 	movt	r1, #20
  135ebc:	e3090ee8 	movw	r0, #40680	; 0x9ee8
  135ec0:	e3400014 	movt	r0, #20
  135ec4:	ebff35b3 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBdStartAddrAlign);
  135ec8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135ecc:	e593300c 	ldr	r3, [r3, #12]
  135ed0:	e3530000 	cmp	r3, #0
  135ed4:	1a000005 	bne	135ef0 <ENET_Init+0xb0>
  135ed8:	e3002106 	movw	r2, #262	; 0x106
  135edc:	e30a1250 	movw	r1, #41552	; 0xa250
  135ee0:	e3401014 	movt	r1, #20
  135ee4:	e3090ef8 	movw	r0, #40696	; 0x9ef8
  135ee8:	e3400014 	movt	r0, #20
  135eec:	ebff35a9 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBdStartAddrAlign);
  135ef0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135ef4:	e5933010 	ldr	r3, [r3, #16]
  135ef8:	e3530000 	cmp	r3, #0
  135efc:	1a000005 	bne	135f18 <ENET_Init+0xd8>
  135f00:	e3002107 	movw	r2, #263	; 0x107
  135f04:	e30a1250 	movw	r1, #41552	; 0xa250
  135f08:	e3401014 	movt	r1, #20
  135f0c:	e3090f1c 	movw	r0, #40732	; 0x9f1c
  135f10:	e3400014 	movt	r0, #20
  135f14:	ebff359f 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBufferAlign);
  135f18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f1c:	e5933014 	ldr	r3, [r3, #20]
  135f20:	e3530000 	cmp	r3, #0
  135f24:	1a000005 	bne	135f40 <ENET_Init+0x100>
  135f28:	e3a02f42 	mov	r2, #264	; 0x108
  135f2c:	e30a1250 	movw	r1, #41552	; 0xa250
  135f30:	e3401014 	movt	r1, #20
  135f34:	e3090f40 	movw	r0, #40768	; 0x9f40
  135f38:	e3400014 	movt	r0, #20
  135f3c:	ebff3595 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBufferAlign);
  135f40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f44:	e5933018 	ldr	r3, [r3, #24]
  135f48:	e3530000 	cmp	r3, #0
  135f4c:	1a000005 	bne	135f68 <ENET_Init+0x128>
  135f50:	e3002109 	movw	r2, #265	; 0x109
  135f54:	e30a1250 	movw	r1, #41552	; 0xa250
  135f58:	e3401014 	movt	r1, #20
  135f5c:	e3090f5c 	movw	r0, #40796	; 0x9f5c
  135f60:	e3400014 	movt	r0, #20
  135f64:	ebff358b 	bl	103598 <rt_assert_handler>
    RT_ASSERT(macAddr);
  135f68:	e59b3004 	ldr	r3, [fp, #4]
  135f6c:	e3530000 	cmp	r3, #0
  135f70:	1a000005 	bne	135f8c <ENET_Init+0x14c>
  135f74:	e300210a 	movw	r2, #266	; 0x10a
  135f78:	e30a1250 	movw	r1, #41552	; 0xa250
  135f7c:	e3401014 	movt	r1, #20
  135f80:	e3090f78 	movw	r0, #40824	; 0x9f78
  135f84:	e3400014 	movt	r0, #20
  135f88:	ebff3582 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBuffSizeAlign >= ENET_RX_MIN_BUFFERSIZE);
  135f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f90:	e5933004 	ldr	r3, [r3, #4]
  135f94:	e35300ff 	cmp	r3, #255	; 0xff
  135f98:	8a000005 	bhi	135fb4 <ENET_Init+0x174>
  135f9c:	e300210b 	movw	r2, #267	; 0x10b
  135fa0:	e30a1250 	movw	r1, #41552	; 0xa250
  135fa4:	e3401014 	movt	r1, #20
  135fa8:	e3090f80 	movw	r0, #40832	; 0x9f80
  135fac:	e3400014 	movt	r0, #20
  135fb0:	ebff3578 	bl	103598 <rt_assert_handler>
    /* Make sure the buffers should be have the capability of process at least one maximum frame. */
    if (config->macSpecialConfig & kENET_ControlVLANTagEnable)
  135fb4:	e51b3010 	ldr	r3, [fp, #-16]
  135fb8:	e5933000 	ldr	r3, [r3]
  135fbc:	e2033c02 	and	r3, r3, #512	; 0x200
  135fc0:	e3530000 	cmp	r3, #0
  135fc4:	0a00000e 	beq	136004 <ENET_Init+0x1c4>
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN));
  135fc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135fcc:	e5933008 	ldr	r3, [r3, #8]
  135fd0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135fd4:	e1d220b2 	ldrh	r2, [r2, #2]
  135fd8:	e0030392 	mul	r3, r2, r3
  135fdc:	e30025f2 	movw	r2, #1522	; 0x5f2
  135fe0:	e1530002 	cmp	r3, r2
  135fe4:	8a000023 	bhi	136078 <ENET_Init+0x238>
  135fe8:	e300210f 	movw	r2, #271	; 0x10f
  135fec:	e30a1250 	movw	r1, #41552	; 0xa250
  135ff0:	e3401014 	movt	r1, #20
  135ff4:	e3090fb8 	movw	r0, #40888	; 0x9fb8
  135ff8:	e3400014 	movt	r0, #20
  135ffc:	ebff3565 	bl	103598 <rt_assert_handler>
  136000:	ea00001c 	b	136078 <ENET_Init+0x238>
    }
    else
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > ENET_FRAME_MAX_FRAMELEN);
  136004:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136008:	e5933008 	ldr	r3, [r3, #8]
  13600c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136010:	e1d220b2 	ldrh	r2, [r2, #2]
  136014:	e0030392 	mul	r3, r2, r3
  136018:	e30025ee 	movw	r2, #1518	; 0x5ee
  13601c:	e1530002 	cmp	r3, r2
  136020:	8a000005 	bhi	13603c <ENET_Init+0x1fc>
  136024:	e3002113 	movw	r2, #275	; 0x113
  136028:	e30a1250 	movw	r1, #41552	; 0xa250
  13602c:	e3401014 	movt	r1, #20
  136030:	e30a0028 	movw	r0, #41000	; 0xa028
  136034:	e3400014 	movt	r0, #20
  136038:	ebff3556 	bl	103598 <rt_assert_handler>
        RT_ASSERT(bufferConfig->rxBuffSizeAlign * bufferConfig->rxBdNumber > config->rxMaxFrameLen);
  13603c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136040:	e5933004 	ldr	r3, [r3, #4]
  136044:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136048:	e1d220b0 	ldrh	r2, [r2]
  13604c:	e0030392 	mul	r3, r2, r3
  136050:	e51b2010 	ldr	r2, [fp, #-16]
  136054:	e1d220b8 	ldrh	r2, [r2, #8]
  136058:	e1530002 	cmp	r3, r2
  13605c:	8a000005 	bhi	136078 <ENET_Init+0x238>
  136060:	e3a02f45 	mov	r2, #276	; 0x114
  136064:	e30a1250 	movw	r1, #41552	; 0xa250
  136068:	e3401014 	movt	r1, #20
  13606c:	e30a007c 	movw	r0, #41084	; 0xa07c
  136070:	e3400014 	movt	r0, #20
  136074:	ebff3547 	bl	103598 <rt_assert_handler>
    }

    /* Reset ENET module. */
    ENET_Reset(base);
  136078:	e51b0008 	ldr	r0, [fp, #-8]
  13607c:	ebfffee5 	bl	135c18 <ENET_Reset>
    /* Initializes the ENET transmit buffer descriptors. */
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  136080:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136084:	e5930010 	ldr	r0, [r3, #16]
  136088:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13608c:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  136090:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136094:	e5932018 	ldr	r2, [r3, #24]
  136098:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13609c:	e593c008 	ldr	ip, [r3, #8]
                                bufferConfig->txBuffSizeAlign, bufferConfig->txBdNumber);
  1360a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360a4:	e1d330b2 	ldrh	r3, [r3, #2]
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  1360a8:	e58d3000 	str	r3, [sp]
  1360ac:	e1a0300c 	mov	r3, ip
  1360b0:	eb00018b 	bl	1366e4 <ENET_SetTxBufferDescriptors>
    /* Initializes the ENET receive buffer descriptors. */
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  1360b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360b8:	e593000c 	ldr	r0, [r3, #12]
  1360bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360c0:	e5931024 	ldr	r1, [r3, #36]	; 0x24
  1360c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360c8:	e5932014 	ldr	r2, [r3, #20]
  1360cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360d0:	e593c004 	ldr	ip, [r3, #4]
                                bufferConfig->rxBuffSizeAlign, bufferConfig->rxBdNumber,
  1360d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360d8:	e1d330b0 	ldrh	r3, [r3]
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  1360dc:	e1a0e003 	mov	lr, r3
                                !!(config->interrupt & (kENET_RxFrameInterrupt | kENET_RxBufferInterrupt)));
  1360e0:	e51b3010 	ldr	r3, [fp, #-16]
  1360e4:	e5933004 	ldr	r3, [r3, #4]
  1360e8:	e2033403 	and	r3, r3, #50331648	; 0x3000000
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  1360ec:	e3530000 	cmp	r3, #0
  1360f0:	13a03001 	movne	r3, #1
  1360f4:	03a03000 	moveq	r3, #0
  1360f8:	e6ef3073 	uxtb	r3, r3
  1360fc:	e58d3004 	str	r3, [sp, #4]
  136100:	e58de000 	str	lr, [sp]
  136104:	e1a0300c 	mov	r3, ip
  136108:	eb0001c7 	bl	13682c <ENET_SetRxBufferDescriptors>
    /* Initializes the ENET MAC controller. */
    ENET_SetMacController(base, config, bufferConfig, macAddr, srcClock_Hz);
  13610c:	e59b3008 	ldr	r3, [fp, #8]
  136110:	e58d3000 	str	r3, [sp]
  136114:	e59b3004 	ldr	r3, [fp, #4]
  136118:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  13611c:	e51b1010 	ldr	r1, [fp, #-16]
  136120:	e51b0008 	ldr	r0, [fp, #-8]
  136124:	eb00005e 	bl	1362a4 <ENET_SetMacController>
    /* Set all buffers or data in handler for data transmit/receive process. */
    ENET_SetHandler(base, handle, config, bufferConfig);
  136128:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13612c:	e51b2010 	ldr	r2, [fp, #-16]
  136130:	e51b100c 	ldr	r1, [fp, #-12]
  136134:	e51b0008 	ldr	r0, [fp, #-8]
  136138:	eb00002a 	bl	1361e8 <ENET_SetHandler>
}
  13613c:	e320f000 	nop	{0}
  136140:	e24bd004 	sub	sp, fp, #4
  136144:	e8bd8800 	pop	{fp, pc}

00136148 <ENET_Deinit>:

void ENET_Deinit(ENET_Type *base)
{
  136148:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13614c:	e28db000 	add	fp, sp, #0
  136150:	e24dd00c 	sub	sp, sp, #12
  136154:	e50b0008 	str	r0, [fp, #-8]
    /* Disable interrupt. */
    base->EIMR = 0;
  136158:	e51b3008 	ldr	r3, [fp, #-8]
  13615c:	e3a02000 	mov	r2, #0
  136160:	e5832008 	str	r2, [r3, #8]

    /* Disable ENET. */
    base->ECR &= ~ENET_ECR_ETHEREN_MASK;
  136164:	e51b3008 	ldr	r3, [fp, #-8]
  136168:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  13616c:	e3c32002 	bic	r2, r3, #2
  136170:	e51b3008 	ldr	r3, [fp, #-8]
  136174:	e5832024 	str	r2, [r3, #36]	; 0x24

}
  136178:	e320f000 	nop	{0}
  13617c:	e28bd000 	add	sp, fp, #0
  136180:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136184:	e12fff1e 	bx	lr

00136188 <ENET_SetCallback>:

void ENET_SetCallback(enet_handle_t *handle, enet_callback_t callback, void *userData)
{
  136188:	e92d4800 	push	{fp, lr}
  13618c:	e28db004 	add	fp, sp, #4
  136190:	e24dd010 	sub	sp, sp, #16
  136194:	e50b0008 	str	r0, [fp, #-8]
  136198:	e50b100c 	str	r1, [fp, #-12]
  13619c:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(handle);
  1361a0:	e51b3008 	ldr	r3, [fp, #-8]
  1361a4:	e3530000 	cmp	r3, #0
  1361a8:	1a000005 	bne	1361c4 <ENET_SetCallback+0x3c>
  1361ac:	e3002132 	movw	r2, #306	; 0x132
  1361b0:	e30a125c 	movw	r1, #41564	; 0xa25c
  1361b4:	e3401014 	movt	r1, #20
  1361b8:	e3090ee0 	movw	r0, #40672	; 0x9ee0
  1361bc:	e3400014 	movt	r0, #20
  1361c0:	ebff34f4 	bl	103598 <rt_assert_handler>

    /* Set callback and userData. */
    handle->callback = callback;
  1361c4:	e51b3008 	ldr	r3, [fp, #-8]
  1361c8:	e51b200c 	ldr	r2, [fp, #-12]
  1361cc:	e5832018 	str	r2, [r3, #24]
    handle->userData = userData;
  1361d0:	e51b3008 	ldr	r3, [fp, #-8]
  1361d4:	e51b2010 	ldr	r2, [fp, #-16]
  1361d8:	e583201c 	str	r2, [r3, #28]
}
  1361dc:	e320f000 	nop	{0}
  1361e0:	e24bd004 	sub	sp, fp, #4
  1361e4:	e8bd8800 	pop	{fp, pc}

001361e8 <ENET_SetHandler>:

static void ENET_SetHandler(ENET_Type *base,
                            enet_handle_t *handle,
                            const enet_config_t *config,
                            const enet_buffer_config_t *bufferConfig)
{
  1361e8:	e92d4800 	push	{fp, lr}
  1361ec:	e28db004 	add	fp, sp, #4
  1361f0:	e24dd018 	sub	sp, sp, #24
  1361f4:	e50b0010 	str	r0, [fp, #-16]
  1361f8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1361fc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136200:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    // struct rt_imx6ul_ethps *imx6ul_device = rt_container_of(config,struct rt_imx6ul_ethps,config);
    uint32_t instance = get_instance_by_base(base);
  136204:	e51b0010 	ldr	r0, [fp, #-16]
  136208:	ebfffc85 	bl	135424 <get_instance_by_base>
  13620c:	e1a03000 	mov	r3, r0
  136210:	e50b3008 	str	r3, [fp, #-8]
    memset(handle, 0, sizeof(enet_handle_t));
  136214:	e3a02020 	mov	r2, #32
  136218:	e3a01000 	mov	r1, #0
  13621c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  136220:	eb002c05 	bl	14123c <memset>
    handle->rxBdBase = bufferConfig->rxBdStartAddrAlign;
  136224:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136228:	e593200c 	ldr	r2, [r3, #12]
  13622c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136230:	e5832000 	str	r2, [r3]
    handle->rxBdCurrent = bufferConfig->rxBdStartAddrAlign;
  136234:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136238:	e593200c 	ldr	r2, [r3, #12]
  13623c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136240:	e5832004 	str	r2, [r3, #4]
    handle->txBdBase = bufferConfig->txBdStartAddrAlign;
  136244:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136248:	e5932010 	ldr	r2, [r3, #16]
  13624c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136250:	e5832008 	str	r2, [r3, #8]
    handle->txBdCurrent = bufferConfig->txBdStartAddrAlign;
  136254:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136258:	e5932010 	ldr	r2, [r3, #16]
  13625c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136260:	e583200c 	str	r2, [r3, #12]
    handle->rxBuffSizeAlign = bufferConfig->rxBuffSizeAlign;
  136264:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136268:	e5932004 	ldr	r2, [r3, #4]
  13626c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136270:	e5832010 	str	r2, [r3, #16]
    handle->txBuffSizeAlign = bufferConfig->txBuffSizeAlign;
  136274:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136278:	e5932008 	ldr	r2, [r3, #8]
  13627c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136280:	e5832014 	str	r2, [r3, #20]

    /* Save the handle pointer in the global variables. */
    s_ENETHandle[instance] = handle;
  136284:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  136288:	e3403014 	movt	r3, #20
  13628c:	e51b2008 	ldr	r2, [fp, #-8]
  136290:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  136294:	e7831102 	str	r1, [r3, r2, lsl #2]
    // if (config->interrupt & ENET_ERR_INTERRUPT)
    // {
    //     s_enetErrIsr = ENET_ErrorIRQHandler;
    //     EnableIRQ(imx6ul_device->irq_num);
    // }
}
  136298:	e320f000 	nop	{0}
  13629c:	e24bd004 	sub	sp, fp, #4
  1362a0:	e8bd8800 	pop	{fp, pc}

001362a4 <ENET_SetMacController>:
static void ENET_SetMacController(ENET_Type *base,
                                  const enet_config_t *config,
                                  const enet_buffer_config_t *bufferConfig,
                                  uint8_t *macAddr,
                                  uint32_t srcClock_Hz)
{
  1362a4:	e92d4800 	push	{fp, lr}
  1362a8:	e28db004 	add	fp, sp, #4
  1362ac:	e24dd030 	sub	sp, sp, #48	; 0x30
  1362b0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1362b4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1362b8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  1362bc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    uint32_t rcr = 0;
  1362c0:	e3a03000 	mov	r3, #0
  1362c4:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = 0;
  1362c8:	e3a03000 	mov	r3, #0
  1362cc:	e50b3010 	str	r3, [fp, #-16]
    uint32_t ecr = 0;
  1362d0:	e3a03000 	mov	r3, #0
  1362d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t macSpecialConfig = config->macSpecialConfig;
  1362d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1362dc:	e5933000 	ldr	r3, [r3]
  1362e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    uint32_t maxFrameLen = config->rxMaxFrameLen;
  1362e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1362e8:	e1d330b8 	ldrh	r3, [r3, #8]
  1362ec:	e50b300c 	str	r3, [fp, #-12]

    /* Maximum frame length check. */
    if ((macSpecialConfig & kENET_ControlVLANTagEnable) && (maxFrameLen <= ENET_FRAME_MAX_FRAMELEN))
  1362f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1362f4:	e2033c02 	and	r3, r3, #512	; 0x200
  1362f8:	e3530000 	cmp	r3, #0
  1362fc:	0a000005 	beq	136318 <ENET_SetMacController+0x74>
  136300:	e51b300c 	ldr	r3, [fp, #-12]
  136304:	e30025ee 	movw	r2, #1518	; 0x5ee
  136308:	e1530002 	cmp	r3, r2
  13630c:	8a000001 	bhi	136318 <ENET_SetMacController+0x74>
    {
        maxFrameLen = (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN);
  136310:	e30035f2 	movw	r3, #1522	; 0x5f2
  136314:	e50b300c 	str	r3, [fp, #-12]
    }

    /* Configures MAC receive controller with user configure structure. */
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  136318:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13631c:	e1a03e83 	lsl	r3, r3, #29
  136320:	e2032101 	and	r2, r3, #1073741824	; 0x40000000
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136324:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136328:	e1a03783 	lsl	r3, r3, #15
  13632c:	e6ff3073 	uxth	r3, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  136330:	e1822003 	orr	r2, r2, r3
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136334:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136338:	e1a03283 	lsl	r3, r3, #5
  13633c:	e2033020 	and	r3, r3, #32
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136340:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  136344:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136348:	e1a03503 	lsl	r3, r3, #10
  13634c:	e2033a01 	and	r3, r3, #4096	; 0x1000
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136350:	e1822003 	orr	r2, r2, r3
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  136354:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136358:	e1a03083 	lsl	r3, r3, #1
  13635c:	e2033010 	and	r3, r3, #16
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  136360:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  136364:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136368:	e1a03223 	lsr	r3, r3, #4
  13636c:	e2033008 	and	r3, r3, #8
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  136370:	e1822003 	orr	r2, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  136374:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136378:	e593300c 	ldr	r3, [r3, #12]
  13637c:	e1a03403 	lsl	r3, r3, #8
  136380:	e2033c01 	and	r3, r3, #256	; 0x100
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  136384:	e1823003 	orr	r3, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  136388:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  13638c:	e5922010 	ldr	r2, [r2, #16]
  136390:	e3520000 	cmp	r2, #0
  136394:	1a000001 	bne	1363a0 <ENET_SetMacController+0xfc>
  136398:	e3a02c02 	mov	r2, #512	; 0x200
  13639c:	ea000000 	b	1363a4 <ENET_SetMacController+0x100>
  1363a0:	e3a02000 	mov	r2, #0
  1363a4:	e1822003 	orr	r2, r2, r3
          ENET_RCR_MAX_FL(maxFrameLen) | ENET_RCR_CRCFWD(1);
  1363a8:	e51b300c 	ldr	r3, [fp, #-12]
  1363ac:	e1a01803 	lsl	r1, r3, #16
  1363b0:	e3a03000 	mov	r3, #0
  1363b4:	e3433fff 	movt	r3, #16383	; 0x3fff
  1363b8:	e0033001 	and	r3, r3, r1
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  1363bc:	e1823003 	orr	r3, r2, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  1363c0:	e3833901 	orr	r3, r3, #16384	; 0x4000
  1363c4:	e3833004 	orr	r3, r3, #4
  1363c8:	e50b3008 	str	r3, [fp, #-8]
    /* Receive setting for half duplex. */
    if (config->miiDuplex == kENET_MiiHalfDuplex)
  1363cc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1363d0:	e5933014 	ldr	r3, [r3, #20]
  1363d4:	e3530000 	cmp	r3, #0
  1363d8:	1a000002 	bne	1363e8 <ENET_SetMacController+0x144>
    {
        rcr |= ENET_RCR_DRT_MASK;
  1363dc:	e51b3008 	ldr	r3, [fp, #-8]
  1363e0:	e3833002 	orr	r3, r3, #2
  1363e4:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Sets internal loop only for MII mode. */
    if ((config->macSpecialConfig & kENET_ControlMIILoopEnable) && (config->miiMode == kENET_MiiMode))
  1363e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1363ec:	e5933000 	ldr	r3, [r3]
  1363f0:	e2033c01 	and	r3, r3, #256	; 0x100
  1363f4:	e3530000 	cmp	r3, #0
  1363f8:	0a000009 	beq	136424 <ENET_SetMacController+0x180>
  1363fc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136400:	e593300c 	ldr	r3, [r3, #12]
  136404:	e3530000 	cmp	r3, #0
  136408:	1a000005 	bne	136424 <ENET_SetMacController+0x180>
    {
        rcr |= ENET_RCR_LOOP_MASK;
  13640c:	e51b3008 	ldr	r3, [fp, #-8]
  136410:	e3833001 	orr	r3, r3, #1
  136414:	e50b3008 	str	r3, [fp, #-8]
        rcr &= ~ENET_RCR_DRT_MASK;
  136418:	e51b3008 	ldr	r3, [fp, #-8]
  13641c:	e3c33002 	bic	r3, r3, #2
  136420:	e50b3008 	str	r3, [fp, #-8]
    }
    base->RCR = rcr;
  136424:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136428:	e51b2008 	ldr	r2, [fp, #-8]
  13642c:	e5832084 	str	r2, [r3, #132]	; 0x84

    /* Configures MAC transmit controller: duplex mode, mac address insertion. */
    tcr = base->TCR & ~(ENET_TCR_FDEN_MASK | ENET_TCR_ADDINS_MASK);
  136430:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136434:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  136438:	e3c33f41 	bic	r3, r3, #260	; 0x104
  13643c:	e50b3010 	str	r3, [fp, #-16]
    tcr |= ENET_TCR_FDEN(config->miiDuplex) | ENET_TCR_ADDINS(!!(macSpecialConfig & kENET_ControlMacAddrInsert));
  136440:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136444:	e5933014 	ldr	r3, [r3, #20]
  136448:	e1a03103 	lsl	r3, r3, #2
  13644c:	e2032004 	and	r2, r3, #4
  136450:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136454:	e1a03203 	lsl	r3, r3, #4
  136458:	e2033c01 	and	r3, r3, #256	; 0x100
  13645c:	e1823003 	orr	r3, r2, r3
  136460:	e51b2010 	ldr	r2, [fp, #-16]
  136464:	e1823003 	orr	r3, r2, r3
  136468:	e50b3010 	str	r3, [fp, #-16]
    base->TCR = tcr;
  13646c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136470:	e51b2010 	ldr	r2, [fp, #-16]
  136474:	e58320c4 	str	r2, [r3, #196]	; 0xc4

    /* Configures receive and transmit accelerator. */
    base->TACC = config->txAccelerConfig;
  136478:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13647c:	e5d33019 	ldrb	r3, [r3, #25]
  136480:	e1a02003 	mov	r2, r3
  136484:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136488:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    base->RACC = config->rxAccelerConfig;
  13648c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136490:	e5d33018 	ldrb	r3, [r3, #24]
  136494:	e1a02003 	mov	r2, r3
  136498:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13649c:	e58321c4 	str	r2, [r3, #452]	; 0x1c4

    /* Sets the pause duration and FIFO threshold for the flow control enabled case. */
    if (macSpecialConfig & kENET_ControlFlowControlEnable)
  1364a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1364a4:	e2033001 	and	r3, r3, #1
  1364a8:	e3530000 	cmp	r3, #0
  1364ac:	0a00000a 	beq	1364dc <ENET_SetMacController+0x238>
    {
        uint32_t reemReg;
        base->OPD = config->pauseDuration;
  1364b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1364b4:	e1d331ba 	ldrh	r3, [r3, #26]
  1364b8:	e1a02003 	mov	r2, r3
  1364bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1364c0:	e58320ec 	str	r2, [r3, #236]	; 0xec
        reemReg = ENET_RSEM_RX_SECTION_EMPTY(config->rxFifoEmptyThreshold);
  1364c4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1364c8:	e5d3301c 	ldrb	r3, [r3, #28]
  1364cc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if defined (FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD) && FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD
        reemReg |= ENET_RSEM_STAT_SECTION_EMPTY(config->rxFifoStatEmptyThreshold);
#endif /* FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD */
        base->RSEM = reemReg;
  1364d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1364d4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1364d8:	e5832194 	str	r2, [r3, #404]	; 0x194
    }

    /* FIFO threshold setting for store and forward enable/disable case. */
    if (macSpecialConfig & kENET_ControlStoreAndFwdDisable)
  1364dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1364e0:	e2033020 	and	r3, r3, #32
  1364e4:	e3530000 	cmp	r3, #0
  1364e8:	0a00000a 	beq	136518 <ENET_SetMacController+0x274>
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = config->txFifoWatermark & ENET_TFWR_TFWR_MASK;
  1364ec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1364f0:	e5d3301e 	ldrb	r3, [r3, #30]
  1364f4:	e203203f 	and	r2, r3, #63	; 0x3f
  1364f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1364fc:	e5832144 	str	r2, [r3, #324]	; 0x144
        /* Receive fifo full threshold settings. */
        base->RSFL = config->rxFifoFullThreshold & ENET_RSFL_RX_SECTION_FULL_MASK;
  136500:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136504:	e5d3301d 	ldrb	r3, [r3, #29]
  136508:	e1a02003 	mov	r2, r3
  13650c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136510:	e5832190 	str	r2, [r3, #400]	; 0x190
  136514:	ea000005 	b	136530 <ENET_SetMacController+0x28c>
    }
    else
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  136518:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13651c:	e3a02c01 	mov	r2, #256	; 0x100
  136520:	e5832144 	str	r2, [r3, #324]	; 0x144
        base->RSFL = 0;
  136524:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136528:	e3a02000 	mov	r2, #0
  13652c:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Enable store and forward when accelerator is enabled */
    if (config->txAccelerConfig & (kENET_TxAccelIpCheckEnabled | kENET_TxAccelProtoCheckEnabled))
  136530:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136534:	e5d33019 	ldrb	r3, [r3, #25]
  136538:	e2033018 	and	r3, r3, #24
  13653c:	e3530000 	cmp	r3, #0
  136540:	0a000002 	beq	136550 <ENET_SetMacController+0x2ac>
    {
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  136544:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136548:	e3a02c01 	mov	r2, #256	; 0x100
  13654c:	e5832144 	str	r2, [r3, #324]	; 0x144
    }
    if (config->rxAccelerConfig & (kENET_RxAccelIpCheckEnabled | kENET_RxAccelProtoCheckEnabled))
  136550:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136554:	e5d33018 	ldrb	r3, [r3, #24]
  136558:	e2033006 	and	r3, r3, #6
  13655c:	e3530000 	cmp	r3, #0
  136560:	0a000002 	beq	136570 <ENET_SetMacController+0x2cc>
    {
        base->RSFL = 0;
  136564:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136568:	e3a02000 	mov	r2, #0
  13656c:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Initializes transmit buffer descriptor rings start address, two start address should be aligned. */
    base->TDSR = (uint32_t)bufferConfig->txPhyBdStartAddrAlign;
  136570:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  136574:	e5933020 	ldr	r3, [r3, #32]
  136578:	e1a02003 	mov	r2, r3
  13657c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136580:	e5832184 	str	r2, [r3, #388]	; 0x184
    base->RDSR = (uint32_t)bufferConfig->rxPhyBdStartAddrAlign;
  136584:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  136588:	e593301c 	ldr	r3, [r3, #28]
  13658c:	e1a02003 	mov	r2, r3
  136590:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136594:	e5832180 	str	r2, [r3, #384]	; 0x180

    /* Initializes the maximum buffer size, the buffer size should be aligned. */

    base->MRBR = ENET_MRBR_R_BUF_SIZE(bufferConfig->rxBuffSizeAlign);
  136598:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  13659c:	e5933004 	ldr	r3, [r3, #4]
  1365a0:	e1a02203 	lsl	r2, r3, #4
  1365a4:	e3033ff0 	movw	r3, #16368	; 0x3ff0
  1365a8:	e0033002 	and	r3, r3, r2
  1365ac:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1365b0:	e5823188 	str	r3, [r2, #392]	; 0x188

    /* Configures the Mac address. */
    ENET_SetMacAddr(base, macAddr);
  1365b4:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1365b8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1365bc:	eb00011e 	bl	136a3c <ENET_SetMacAddr>

    /* Initialize the SMI if uninitialized. */
    if (!ENET_GetSMI(base))
  1365c0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1365c4:	ebfffda0 	bl	135c4c <ENET_GetSMI>
  1365c8:	e1a03000 	mov	r3, r0
  1365cc:	e2233001 	eor	r3, r3, #1
  1365d0:	e6ef3073 	uxtb	r3, r3
  1365d4:	e3530000 	cmp	r3, #0
  1365d8:	0a00000a 	beq	136608 <ENET_SetMacController+0x364>
    {
        ENET_SetSMI(base, srcClock_Hz, !!(config->macSpecialConfig & kENET_ControlSMIPreambleDisable));
  1365dc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1365e0:	e5933000 	ldr	r3, [r3]
  1365e4:	e2033040 	and	r3, r3, #64	; 0x40
  1365e8:	e3530000 	cmp	r3, #0
  1365ec:	13a03001 	movne	r3, #1
  1365f0:	03a03000 	moveq	r3, #0
  1365f4:	e6ef3073 	uxtb	r3, r3
  1365f8:	e1a02003 	mov	r2, r3
  1365fc:	e59b1004 	ldr	r1, [fp, #4]
  136600:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  136604:	eb000171 	bl	136bd0 <ENET_SetSMI>
    }
/* Enables Ethernet interrupt and NVIC. */
#if defined(FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    if (config->intCoalesceCfg)
  136608:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13660c:	e5933020 	ldr	r3, [r3, #32]
  136610:	e3530000 	cmp	r3, #0
  136614:	0a000020 	beq	13669c <ENET_SetMacController+0x3f8>
    {
        uint32_t intMask = (ENET_EIMR_TXB_MASK | ENET_EIMR_RXB_MASK);
  136618:	e3a03405 	mov	r3, #83886080	; 0x5000000
  13661c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

        /* Clear all buffer interrupts. */
        base->EIMR &= ~intMask;
  136620:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136624:	e5932008 	ldr	r2, [r3, #8]
  136628:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13662c:	e1e03003 	mvn	r3, r3
  136630:	e0022003 	and	r2, r2, r3
  136634:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136638:	e5832008 	str	r2, [r3, #8]
        /* Set the interrupt coalescence. */
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  13663c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136640:	e5933020 	ldr	r3, [r3, #32]
  136644:	e5d33000 	ldrb	r3, [r3]
  136648:	e1a03a03 	lsl	r3, r3, #20
  13664c:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  136650:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  136654:	e5922020 	ldr	r2, [r2, #32]
  136658:	e1d220b2 	ldrh	r2, [r2, #2]
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  13665c:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  136660:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  136664:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136668:	e58320f0 	str	r2, [r3, #240]	; 0xf0
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  13666c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136670:	e5933020 	ldr	r3, [r3, #32]
  136674:	e5d33004 	ldrb	r3, [r3, #4]
  136678:	e1a03a03 	lsl	r3, r3, #20
  13667c:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  136680:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  136684:	e5922020 	ldr	r2, [r2, #32]
  136688:	e1d220b6 	ldrh	r2, [r2, #6]
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  13668c:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  136690:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  136694:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136698:	e5832100 	str	r2, [r3, #256]	; 0x100
    }
#endif /* FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE */
    ENET_EnableInterrupts(base, config->interrupt);
  13669c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1366a0:	e5933004 	ldr	r3, [r3, #4]
  1366a4:	e1a01003 	mov	r1, r3
  1366a8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1366ac:	ebfffd8d 	bl	135ce8 <ENET_EnableInterrupts>

    /* ENET control register setting. */
    ecr = base->ECR;
  1366b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1366b4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1366b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    /* Enables Ethernet module after all configuration except the buffer descriptor active. */
    ecr |= ENET_ECR_ETHEREN_MASK | ENET_ECR_DBSWP_MASK;
  1366bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1366c0:	e3833c01 	orr	r3, r3, #256	; 0x100
  1366c4:	e3833002 	orr	r3, r3, #2
  1366c8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    base->ECR = ecr;
  1366cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1366d0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1366d4:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  1366d8:	e320f000 	nop	{0}
  1366dc:	e24bd004 	sub	sp, fp, #4
  1366e0:	e8bd8800 	pop	{fp, pc}

001366e4 <ENET_SetTxBufferDescriptors>:
static void ENET_SetTxBufferDescriptors(volatile enet_tx_bd_struct_t *txBdStartAlign,
                                        uint8_t *txBuffStartAlign,
                                        uint8_t *txBuffStartAlign_vaddr,
                                        uint32_t txBuffSizeAlign,
                                        uint32_t txBdNumber)
{
  1366e4:	e92d4800 	push	{fp, lr}
  1366e8:	e28db004 	add	fp, sp, #4
  1366ec:	e24dd018 	sub	sp, sp, #24
  1366f0:	e50b0010 	str	r0, [fp, #-16]
  1366f4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1366f8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1366fc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(txBdStartAlign);
  136700:	e51b3010 	ldr	r3, [fp, #-16]
  136704:	e3530000 	cmp	r3, #0
  136708:	1a000005 	bne	136724 <ENET_SetTxBufferDescriptors+0x40>
  13670c:	e30021e2 	movw	r2, #482	; 0x1e2
  136710:	e30a1270 	movw	r1, #41584	; 0xa270
  136714:	e3401014 	movt	r1, #20
  136718:	e30a00d0 	movw	r0, #41168	; 0xa0d0
  13671c:	e3400014 	movt	r0, #20
  136720:	ebff339c 	bl	103598 <rt_assert_handler>
    RT_ASSERT(txBuffStartAlign);
  136724:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136728:	e3530000 	cmp	r3, #0
  13672c:	1a000005 	bne	136748 <ENET_SetTxBufferDescriptors+0x64>
  136730:	e30021e3 	movw	r2, #483	; 0x1e3
  136734:	e30a1270 	movw	r1, #41584	; 0xa270
  136738:	e3401014 	movt	r1, #20
  13673c:	e30a00e0 	movw	r0, #41184	; 0xa0e0
  136740:	e3400014 	movt	r0, #20
  136744:	ebff3393 	bl	103598 <rt_assert_handler>
    uint32_t count;
    volatile enet_tx_bd_struct_t *curBuffDescrip = txBdStartAlign;
  136748:	e51b3010 	ldr	r3, [fp, #-16]
  13674c:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  136750:	e3a03000 	mov	r3, #0
  136754:	e50b3008 	str	r3, [fp, #-8]
  136758:	ea00002c 	b	136810 <ENET_SetTxBufferDescriptors+0x12c>
        /* Set data buffer address. */
        // curBuffDescrip->buffer = (uint8_t *)((uint32_t)&txBuffStartAlign[(-1) * count * txBuffSizeAlign]);
        // curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        // curBuffDescrip->buffer_vaddr = (uint8_t *)((uint32_t)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        // buffer_vaddr_tx[count] = (uint8_t *)((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
  13675c:	e51b3008 	ldr	r3, [fp, #-8]
  136760:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136764:	e0030392 	mul	r3, r2, r3
  136768:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  13676c:	e0823003 	add	r3, r2, r3
  136770:	e1a00003 	mov	r0, r3
  136774:	ebff3721 	bl	104400 <ueth_v2p>
  136778:	e1a02000 	mov	r2, r0
  13677c:	e51b300c 	ldr	r3, [fp, #-12]
  136780:	e5832004 	str	r2, [r3, #4]
        buffer_vaddr_tx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, txBuffSizeAlign);
  136784:	e51b300c 	ldr	r3, [fp, #-12]
  136788:	e5933004 	ldr	r3, [r3, #4]
  13678c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136790:	e3a01003 	mov	r1, #3
  136794:	e1a00003 	mov	r0, r3
  136798:	ebff3745 	bl	1044b4 <ueth_remap>
  13679c:	e1a01000 	mov	r1, r0
  1367a0:	e30c3e88 	movw	r3, #52872	; 0xce88
  1367a4:	e3403015 	movt	r3, #21
  1367a8:	e51b2008 	ldr	r2, [fp, #-8]
  1367ac:	e7831102 	str	r1, [r3, r2, lsl #2]
        /* Initializes data length. */
        curBuffDescrip->length = 0;
  1367b0:	e51b300c 	ldr	r3, [fp, #-12]
  1367b4:	e3a02000 	mov	r2, #0
  1367b8:	e1c320b0 	strh	r2, [r3]
        /* Sets the crc. */
        curBuffDescrip->control = (ENET_BUFFDESCRIPTOR_TX_TRANMITCRC_MASK);
  1367bc:	e51b300c 	ldr	r3, [fp, #-12]
  1367c0:	e3a02b01 	mov	r2, #1024	; 0x400
  1367c4:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == txBdNumber - 1)
  1367c8:	e59b3004 	ldr	r3, [fp, #4]
  1367cc:	e2433001 	sub	r3, r3, #1
  1367d0:	e51b2008 	ldr	r2, [fp, #-8]
  1367d4:	e1520003 	cmp	r2, r3
  1367d8:	1a000006 	bne	1367f8 <ENET_SetTxBufferDescriptors+0x114>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_WRAP_MASK;
  1367dc:	e51b300c 	ldr	r3, [fp, #-12]
  1367e0:	e1d330b2 	ldrh	r3, [r3, #2]
  1367e4:	e6ff3073 	uxth	r3, r3
  1367e8:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  1367ec:	e6ff2073 	uxth	r2, r3
  1367f0:	e51b300c 	ldr	r3, [fp, #-12]
  1367f4:	e1c320b2 	strh	r2, [r3, #2]

        /* Add cache clean operation. */
        // rt_hw_cpu_dcache_clean((void *)curBuffDescrip, sizeof(enet_tx_bd_struct_t));
        // ueth_dcache_clean((void *)curBuffDescrip, sizeof(enet_tx_bd_struct_t));
        /* Increase the index. */
        curBuffDescrip++;
  1367f8:	e51b300c 	ldr	r3, [fp, #-12]
  1367fc:	e2833008 	add	r3, r3, #8
  136800:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  136804:	e51b3008 	ldr	r3, [fp, #-8]
  136808:	e2833001 	add	r3, r3, #1
  13680c:	e50b3008 	str	r3, [fp, #-8]
  136810:	e51b2008 	ldr	r2, [fp, #-8]
  136814:	e59b3004 	ldr	r3, [fp, #4]
  136818:	e1520003 	cmp	r2, r3
  13681c:	3affffce 	bcc	13675c <ENET_SetTxBufferDescriptors+0x78>
    }
}
  136820:	e320f000 	nop	{0}
  136824:	e24bd004 	sub	sp, fp, #4
  136828:	e8bd8800 	pop	{fp, pc}

0013682c <ENET_SetRxBufferDescriptors>:
                                        uint8_t *rxBuffStartAlign,
                                        uint8_t *rxBuffStartAlign_vaddr,
                                        uint32_t rxBuffSizeAlign,
                                        uint32_t rxBdNumber,
                                        bool enableInterrupt)
{
  13682c:	e92d4800 	push	{fp, lr}
  136830:	e28db004 	add	fp, sp, #4
  136834:	e24dd018 	sub	sp, sp, #24
  136838:	e50b0010 	str	r0, [fp, #-16]
  13683c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136840:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136844:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(rxBdStartAlign);
  136848:	e51b3010 	ldr	r3, [fp, #-16]
  13684c:	e3530000 	cmp	r3, #0
  136850:	1a000005 	bne	13686c <ENET_SetRxBufferDescriptors+0x40>
  136854:	e3002209 	movw	r2, #521	; 0x209
  136858:	e30a128c 	movw	r1, #41612	; 0xa28c
  13685c:	e3401014 	movt	r1, #20
  136860:	e30a00f4 	movw	r0, #41204	; 0xa0f4
  136864:	e3400014 	movt	r0, #20
  136868:	ebff334a 	bl	103598 <rt_assert_handler>
    RT_ASSERT(rxBuffStartAlign);
  13686c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136870:	e3530000 	cmp	r3, #0
  136874:	1a000005 	bne	136890 <ENET_SetRxBufferDescriptors+0x64>
  136878:	e300220a 	movw	r2, #522	; 0x20a
  13687c:	e30a128c 	movw	r1, #41612	; 0xa28c
  136880:	e3401014 	movt	r1, #20
  136884:	e30a0104 	movw	r0, #41220	; 0xa104
  136888:	e3400014 	movt	r0, #20
  13688c:	ebff3341 	bl	103598 <rt_assert_handler>

    volatile enet_rx_bd_struct_t *curBuffDescrip = rxBdStartAlign;
  136890:	e51b3010 	ldr	r3, [fp, #-16]
  136894:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count = 0;
  136898:	e3a03000 	mov	r3, #0
  13689c:	e50b300c 	str	r3, [fp, #-12]

    /* Initializes receive buffer descriptors. */
    for (count = 0; count < rxBdNumber; count++)
  1368a0:	e3a03000 	mov	r3, #0
  1368a4:	e50b300c 	str	r3, [fp, #-12]
  1368a8:	ea00002c 	b	136960 <ENET_SetRxBufferDescriptors+0x134>
    {
        /* Set data buffer and the length. */
        // curBuffDescrip->buffer = (uint8_t *)((void *)&rxBuffStartAlign[(-1) * count * rxBuffSizeAlign]);
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&rxBuffStartAlign_vaddr[count * rxBuffSizeAlign]);
  1368ac:	e51b300c 	ldr	r3, [fp, #-12]
  1368b0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1368b4:	e0030392 	mul	r3, r2, r3
  1368b8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1368bc:	e0823003 	add	r3, r2, r3
  1368c0:	e1a00003 	mov	r0, r3
  1368c4:	ebff36cd 	bl	104400 <ueth_v2p>
  1368c8:	e1a02000 	mov	r2, r0
  1368cc:	e51b3008 	ldr	r3, [fp, #-8]
  1368d0:	e5832004 	str	r2, [r3, #4]
        // curBuffDescrip->buffer_vaddr = (uint8_t *)((void *)&rxBuffStartAlign_vaddr[count * rxBuffSizeAlign]);
        buffer_vaddr_rx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, rxBuffSizeAlign);
  1368d4:	e51b3008 	ldr	r3, [fp, #-8]
  1368d8:	e5933004 	ldr	r3, [r3, #4]
  1368dc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1368e0:	e3a01003 	mov	r1, #3
  1368e4:	e1a00003 	mov	r0, r3
  1368e8:	ebff36f1 	bl	1044b4 <ueth_remap>
  1368ec:	e1a01000 	mov	r1, r0
  1368f0:	e30c3c88 	movw	r3, #52360	; 0xcc88
  1368f4:	e3403015 	movt	r3, #21
  1368f8:	e51b200c 	ldr	r2, [fp, #-12]
  1368fc:	e7831102 	str	r1, [r3, r2, lsl #2]
        curBuffDescrip->length = 0;
  136900:	e51b3008 	ldr	r3, [fp, #-8]
  136904:	e3a02000 	mov	r2, #0
  136908:	e1c320b0 	strh	r2, [r3]
        /* Initializes the buffer descriptors with empty bit. */
        curBuffDescrip->control = ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  13690c:	e51b3008 	ldr	r3, [fp, #-8]
  136910:	e3a02902 	mov	r2, #32768	; 0x8000
  136914:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == rxBdNumber - 1)
  136918:	e59b3004 	ldr	r3, [fp, #4]
  13691c:	e2433001 	sub	r3, r3, #1
  136920:	e51b200c 	ldr	r2, [fp, #-12]
  136924:	e1520003 	cmp	r2, r3
  136928:	1a000006 	bne	136948 <ENET_SetRxBufferDescriptors+0x11c>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  13692c:	e51b3008 	ldr	r3, [fp, #-8]
  136930:	e1d330b2 	ldrh	r3, [r3, #2]
  136934:	e6ff3073 	uxth	r3, r3
  136938:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  13693c:	e6ff2073 	uxth	r2, r3
  136940:	e51b3008 	ldr	r3, [fp, #-8]
  136944:	e1c320b2 	strh	r2, [r3, #2]
        
#ifdef ENET_ENHANCEDBUFFERDESCRIPTOR_MODE
        curBuffDescrip->controlExtend1 |= ENET_BUFFDESCRIPTOR_RX_INTERRUPT_MASK;
#endif

        curBuffDescrip++;
  136948:	e51b3008 	ldr	r3, [fp, #-8]
  13694c:	e2833008 	add	r3, r3, #8
  136950:	e50b3008 	str	r3, [fp, #-8]
    for (count = 0; count < rxBdNumber; count++)
  136954:	e51b300c 	ldr	r3, [fp, #-12]
  136958:	e2833001 	add	r3, r3, #1
  13695c:	e50b300c 	str	r3, [fp, #-12]
  136960:	e51b200c 	ldr	r2, [fp, #-12]
  136964:	e59b3004 	ldr	r3, [fp, #4]
  136968:	e1520003 	cmp	r2, r3
  13696c:	3affffce 	bcc	1368ac <ENET_SetRxBufferDescriptors+0x80>

    }
}
  136970:	e320f000 	nop	{0}
  136974:	e24bd004 	sub	sp, fp, #4
  136978:	e8bd8800 	pop	{fp, pc}

0013697c <ENET_SetMII>:

void ENET_SetMII(ENET_Type *base, enet_mii_speed_t speed, enet_mii_duplex_t duplex)
{
  13697c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136980:	e28db000 	add	fp, sp, #0
  136984:	e24dd01c 	sub	sp, sp, #28
  136988:	e50b0010 	str	r0, [fp, #-16]
  13698c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136990:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t rcr = base->RCR;
  136994:	e51b3010 	ldr	r3, [fp, #-16]
  136998:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  13699c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = base->TCR;
  1369a0:	e51b3010 	ldr	r3, [fp, #-16]
  1369a4:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  1369a8:	e50b300c 	str	r3, [fp, #-12]
    /* Sets speed mode. */
    if (kENET_MiiSpeed10M == speed)
  1369ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1369b0:	e3530000 	cmp	r3, #0
  1369b4:	1a000003 	bne	1369c8 <ENET_SetMII+0x4c>
    {
        rcr |= ENET_RCR_RMII_10T_MASK;
  1369b8:	e51b3008 	ldr	r3, [fp, #-8]
  1369bc:	e3833c02 	orr	r3, r3, #512	; 0x200
  1369c0:	e50b3008 	str	r3, [fp, #-8]
  1369c4:	ea000002 	b	1369d4 <ENET_SetMII+0x58>
    }
    else
    {
        rcr &= ~ENET_RCR_RMII_10T_MASK;
  1369c8:	e51b3008 	ldr	r3, [fp, #-8]
  1369cc:	e3c33c02 	bic	r3, r3, #512	; 0x200
  1369d0:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Set duplex mode. */
    if (duplex == kENET_MiiHalfDuplex)
  1369d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1369d8:	e3530000 	cmp	r3, #0
  1369dc:	1a000006 	bne	1369fc <ENET_SetMII+0x80>
    {
        rcr |= ENET_RCR_DRT_MASK;
  1369e0:	e51b3008 	ldr	r3, [fp, #-8]
  1369e4:	e3833002 	orr	r3, r3, #2
  1369e8:	e50b3008 	str	r3, [fp, #-8]
        tcr &= ~ENET_TCR_FDEN_MASK;
  1369ec:	e51b300c 	ldr	r3, [fp, #-12]
  1369f0:	e3c33004 	bic	r3, r3, #4
  1369f4:	e50b300c 	str	r3, [fp, #-12]
  1369f8:	ea000005 	b	136a14 <ENET_SetMII+0x98>
    }
    else
    {
        rcr &= ~ENET_RCR_DRT_MASK;
  1369fc:	e51b3008 	ldr	r3, [fp, #-8]
  136a00:	e3c33002 	bic	r3, r3, #2
  136a04:	e50b3008 	str	r3, [fp, #-8]
        tcr |= ENET_TCR_FDEN_MASK;
  136a08:	e51b300c 	ldr	r3, [fp, #-12]
  136a0c:	e3833004 	orr	r3, r3, #4
  136a10:	e50b300c 	str	r3, [fp, #-12]
    }

    base->RCR = rcr;
  136a14:	e51b3010 	ldr	r3, [fp, #-16]
  136a18:	e51b2008 	ldr	r2, [fp, #-8]
  136a1c:	e5832084 	str	r2, [r3, #132]	; 0x84
    base->TCR = tcr;
  136a20:	e51b3010 	ldr	r3, [fp, #-16]
  136a24:	e51b200c 	ldr	r2, [fp, #-12]
  136a28:	e58320c4 	str	r2, [r3, #196]	; 0xc4
}
  136a2c:	e320f000 	nop	{0}
  136a30:	e28bd000 	add	sp, fp, #0
  136a34:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136a38:	e12fff1e 	bx	lr

00136a3c <ENET_SetMacAddr>:

void ENET_SetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  136a3c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136a40:	e28db000 	add	fp, sp, #0
  136a44:	e24dd014 	sub	sp, sp, #20
  136a48:	e50b0010 	str	r0, [fp, #-16]
  136a4c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    uint32_t address;

    /* Set physical address lower register. */
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  136a50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136a54:	e5d33000 	ldrb	r3, [r3]
  136a58:	e1a02c03 	lsl	r2, r3, #24
  136a5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136a60:	e2833001 	add	r3, r3, #1
  136a64:	e5d33000 	ldrb	r3, [r3]
  136a68:	e1a03803 	lsl	r3, r3, #16
  136a6c:	e1822003 	orr	r2, r2, r3
  136a70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136a74:	e2833002 	add	r3, r3, #2
  136a78:	e5d33000 	ldrb	r3, [r3]
  136a7c:	e1a03403 	lsl	r3, r3, #8
  136a80:	e1823003 	orr	r3, r2, r3
                         (uint32_t)macAddr[3]);
  136a84:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136a88:	e2822003 	add	r2, r2, #3
  136a8c:	e5d22000 	ldrb	r2, [r2]
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  136a90:	e1833002 	orr	r3, r3, r2
  136a94:	e50b3008 	str	r3, [fp, #-8]
    base->PALR = address;
  136a98:	e51b3010 	ldr	r3, [fp, #-16]
  136a9c:	e51b2008 	ldr	r2, [fp, #-8]
  136aa0:	e58320e4 	str	r2, [r3, #228]	; 0xe4
    /* Set physical address high register. */
    address = (uint32_t)(((uint32_t)macAddr[4] << 8U) | ((uint32_t)macAddr[5]));
  136aa4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136aa8:	e2833004 	add	r3, r3, #4
  136aac:	e5d33000 	ldrb	r3, [r3]
  136ab0:	e1a03403 	lsl	r3, r3, #8
  136ab4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136ab8:	e2822005 	add	r2, r2, #5
  136abc:	e5d22000 	ldrb	r2, [r2]
  136ac0:	e1833002 	orr	r3, r3, r2
  136ac4:	e50b3008 	str	r3, [fp, #-8]
    base->PAUR = address << ENET_PAUR_PADDR2_SHIFT;
  136ac8:	e51b3008 	ldr	r3, [fp, #-8]
  136acc:	e1a02803 	lsl	r2, r3, #16
  136ad0:	e51b3010 	ldr	r3, [fp, #-16]
  136ad4:	e58320e8 	str	r2, [r3, #232]	; 0xe8
}
  136ad8:	e320f000 	nop	{0}
  136adc:	e28bd000 	add	sp, fp, #0
  136ae0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136ae4:	e12fff1e 	bx	lr

00136ae8 <ENET_GetMacAddr>:

void ENET_GetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  136ae8:	e92d4800 	push	{fp, lr}
  136aec:	e28db004 	add	fp, sp, #4
  136af0:	e24dd010 	sub	sp, sp, #16
  136af4:	e50b0010 	str	r0, [fp, #-16]
  136af8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(macAddr);
  136afc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b00:	e3530000 	cmp	r3, #0
  136b04:	1a000005 	bne	136b20 <ENET_GetMacAddr+0x38>
  136b08:	e3002259 	movw	r2, #601	; 0x259
  136b0c:	e30a12a8 	movw	r1, #41640	; 0xa2a8
  136b10:	e3401014 	movt	r1, #20
  136b14:	e3090f78 	movw	r0, #40824	; 0x9f78
  136b18:	e3400014 	movt	r0, #20
  136b1c:	ebff329d 	bl	103598 <rt_assert_handler>

    uint32_t address;

    /* Get from physical address lower register. */
    address = base->PALR;
  136b20:	e51b3010 	ldr	r3, [fp, #-16]
  136b24:	e59330e4 	ldr	r3, [r3, #228]	; 0xe4
  136b28:	e50b3008 	str	r3, [fp, #-8]
    macAddr[0] = 0xFFU & (address >> 24U);
  136b2c:	e51b3008 	ldr	r3, [fp, #-8]
  136b30:	e1a03c23 	lsr	r3, r3, #24
  136b34:	e6ef2073 	uxtb	r2, r3
  136b38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b3c:	e5c32000 	strb	r2, [r3]
    macAddr[1] = 0xFFU & (address >> 16U);
  136b40:	e51b3008 	ldr	r3, [fp, #-8]
  136b44:	e1a02823 	lsr	r2, r3, #16
  136b48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b4c:	e2833001 	add	r3, r3, #1
  136b50:	e6ef2072 	uxtb	r2, r2
  136b54:	e5c32000 	strb	r2, [r3]
    macAddr[2] = 0xFFU & (address >> 8U);
  136b58:	e51b3008 	ldr	r3, [fp, #-8]
  136b5c:	e1a02423 	lsr	r2, r3, #8
  136b60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b64:	e2833002 	add	r3, r3, #2
  136b68:	e6ef2072 	uxtb	r2, r2
  136b6c:	e5c32000 	strb	r2, [r3]
    macAddr[3] = 0xFFU & address;
  136b70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b74:	e2833003 	add	r3, r3, #3
  136b78:	e51b2008 	ldr	r2, [fp, #-8]
  136b7c:	e6ef2072 	uxtb	r2, r2
  136b80:	e5c32000 	strb	r2, [r3]

    /* Get from physical address high register. */
    address = (base->PAUR & ENET_PAUR_PADDR2_MASK) >> ENET_PAUR_PADDR2_SHIFT;
  136b84:	e51b3010 	ldr	r3, [fp, #-16]
  136b88:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
  136b8c:	e1a03823 	lsr	r3, r3, #16
  136b90:	e6ff3073 	uxth	r3, r3
  136b94:	e50b3008 	str	r3, [fp, #-8]
    macAddr[4] = 0xFFU & (address >> 8U);
  136b98:	e51b3008 	ldr	r3, [fp, #-8]
  136b9c:	e1a02423 	lsr	r2, r3, #8
  136ba0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ba4:	e2833004 	add	r3, r3, #4
  136ba8:	e6ef2072 	uxtb	r2, r2
  136bac:	e5c32000 	strb	r2, [r3]
    macAddr[5] = 0xFFU & address;
  136bb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136bb4:	e2833005 	add	r3, r3, #5
  136bb8:	e51b2008 	ldr	r2, [fp, #-8]
  136bbc:	e6ef2072 	uxtb	r2, r2
  136bc0:	e5c32000 	strb	r2, [r3]
}
  136bc4:	e320f000 	nop	{0}
  136bc8:	e24bd004 	sub	sp, fp, #4
  136bcc:	e8bd8800 	pop	{fp, pc}

00136bd0 <ENET_SetSMI>:

void ENET_SetSMI(ENET_Type *base, uint32_t srcClock_Hz, bool isPreambleDisabled)
{
  136bd0:	e92d4810 	push	{r4, fp, lr}
  136bd4:	e28db008 	add	fp, sp, #8
  136bd8:	e24dd024 	sub	sp, sp, #36	; 0x24
  136bdc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  136be0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  136be4:	e1a03002 	mov	r3, r2
  136be8:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    RT_ASSERT(srcClock_Hz);
  136bec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  136bf0:	e3530000 	cmp	r3, #0
  136bf4:	1a000005 	bne	136c10 <ENET_SetSMI+0x40>
  136bf8:	e3a02f9b 	mov	r2, #620	; 0x26c
  136bfc:	e30a12b8 	movw	r1, #41656	; 0xa2b8
  136c00:	e3401014 	movt	r1, #20
  136c04:	e30a0118 	movw	r0, #41240	; 0xa118
  136c08:	e3400014 	movt	r0, #20
  136c0c:	ebff3261 	bl	103598 <rt_assert_handler>

    uint32_t clkCycle = 0;
  136c10:	e3a03000 	mov	r3, #0
  136c14:	e50b3010 	str	r3, [fp, #-16]
    uint32_t speed = 0;
  136c18:	e3a03000 	mov	r3, #0
  136c1c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t mscr = 0;
  136c20:	e3a03000 	mov	r3, #0
  136c24:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    /* Calculate the MII speed which controls the frequency of the MDC. */
    speed = srcClock_Hz / (2 * ENET_MDC_FREQUENCY);
  136c28:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  136c2c:	e30c3a6b 	movw	r3, #51819	; 0xca6b
  136c30:	e3463b5f 	movt	r3, #27487	; 0x6b5f
  136c34:	e0832392 	umull	r2, r3, r2, r3
  136c38:	e1a03aa3 	lsr	r3, r3, #21
  136c3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Calculate the hold time on the MDIO output. */
    clkCycle = (10 + ENET_NANOSECOND_ONE_SECOND / srcClock_Hz - 1) / (ENET_NANOSECOND_ONE_SECOND / srcClock_Hz) - 1;
  136c40:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  136c44:	e3a00cca 	mov	r0, #51712	; 0xca00
  136c48:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  136c4c:	eb0006fa 	bl	13883c <__udivsi3>
  136c50:	e1a03000 	mov	r3, r0
  136c54:	e2834009 	add	r4, r3, #9
  136c58:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  136c5c:	e3a00cca 	mov	r0, #51712	; 0xca00
  136c60:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  136c64:	eb0006f4 	bl	13883c <__udivsi3>
  136c68:	e1a03000 	mov	r3, r0
  136c6c:	e1a01003 	mov	r1, r3
  136c70:	e1a00004 	mov	r0, r4
  136c74:	eb0006f0 	bl	13883c <__udivsi3>
  136c78:	e1a03000 	mov	r3, r0
  136c7c:	e2433001 	sub	r3, r3, #1
  136c80:	e50b3010 	str	r3, [fp, #-16]
    /* Build the configuration for MDC/MDIO control. */
    mscr = ENET_MSCR_MII_SPEED(speed) | ENET_MSCR_DIS_PRE(isPreambleDisabled) | ENET_MSCR_HOLDTIME(clkCycle);
  136c84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136c88:	e1a03083 	lsl	r3, r3, #1
  136c8c:	e203207e 	and	r2, r3, #126	; 0x7e
  136c90:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  136c94:	e1a03383 	lsl	r3, r3, #7
  136c98:	e6ef3073 	uxtb	r3, r3
  136c9c:	e1822003 	orr	r2, r2, r3
  136ca0:	e51b3010 	ldr	r3, [fp, #-16]
  136ca4:	e1a03403 	lsl	r3, r3, #8
  136ca8:	e2033c07 	and	r3, r3, #1792	; 0x700
  136cac:	e1823003 	orr	r3, r2, r3
  136cb0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base->MSCR = mscr;
  136cb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  136cb8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  136cbc:	e5832044 	str	r2, [r3, #68]	; 0x44
}
  136cc0:	e320f000 	nop	{0}
  136cc4:	e24bd008 	sub	sp, fp, #8
  136cc8:	e8bd8810 	pop	{r4, fp, pc}

00136ccc <ENET_StartSMIWrite>:

void ENET_StartSMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_write_t operation, uint32_t data)
{
  136ccc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136cd0:	e28db000 	add	fp, sp, #0
  136cd4:	e24dd01c 	sub	sp, sp, #28
  136cd8:	e50b0010 	str	r0, [fp, #-16]
  136cdc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136ce0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136ce4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136ce8:	e3a03000 	mov	r3, #0
  136cec:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  136cf0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136cf4:	e1a03e03 	lsl	r3, r3, #28
  136cf8:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  136cfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d00:	e1a03b83 	lsl	r3, r3, #23
  136d04:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  136d08:	e1822003 	orr	r2, r2, r3
  136d0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136d10:	e1a03903 	lsl	r3, r3, #18
  136d14:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136d18:	e1822003 	orr	r2, r2, r3
           (data & 0xFFFF);
  136d1c:	e59b3004 	ldr	r3, [fp, #4]
  136d20:	e6ff3073 	uxth	r3, r3
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  136d24:	e1823003 	orr	r3, r2, r3
  136d28:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  136d2c:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136d30:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136d34:	e51b3010 	ldr	r3, [fp, #-16]
  136d38:	e51b2008 	ldr	r2, [fp, #-8]
  136d3c:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136d40:	e320f000 	nop	{0}
  136d44:	e28bd000 	add	sp, fp, #0
  136d48:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136d4c:	e12fff1e 	bx	lr

00136d50 <ENET_StartSMIRead>:

void ENET_StartSMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_read_t operation)
{
  136d50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136d54:	e28db000 	add	fp, sp, #0
  136d58:	e24dd01c 	sub	sp, sp, #28
  136d5c:	e50b0010 	str	r0, [fp, #-16]
  136d60:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136d64:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136d68:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136d6c:	e3a03000 	mov	r3, #0
  136d70:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2);
  136d74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136d78:	e1a03e03 	lsl	r3, r3, #28
  136d7c:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  136d80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d84:	e1a03b83 	lsl	r3, r3, #23
  136d88:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  136d8c:	e1822003 	orr	r2, r2, r3
  136d90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136d94:	e1a03903 	lsl	r3, r3, #18
  136d98:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136d9c:	e1823003 	orr	r3, r2, r3
  136da0:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  136da4:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136da8:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136dac:	e51b3010 	ldr	r3, [fp, #-16]
  136db0:	e51b2008 	ldr	r2, [fp, #-8]
  136db4:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136db8:	e320f000 	nop	{0}
  136dbc:	e28bd000 	add	sp, fp, #0
  136dc0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136dc4:	e12fff1e 	bx	lr

00136dc8 <ENET_StartExtC45SMIWrite>:

#if defined(FSL_FEATURE_ENET_HAS_EXTEND_MDIO) && FSL_FEATURE_ENET_HAS_EXTEND_MDIO
void ENET_StartExtC45SMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  136dc8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136dcc:	e28db000 	add	fp, sp, #0
  136dd0:	e24dd01c 	sub	sp, sp, #28
  136dd4:	e50b0010 	str	r0, [fp, #-16]
  136dd8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136ddc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136de0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136de4:	e3a03000 	mov	r3, #0
  136de8:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  136dec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136df0:	e1a03823 	lsr	r3, r3, #16
  136df4:	e6ff3073 	uxth	r3, r3
  136df8:	e203301f 	and	r3, r3, #31
  136dfc:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  136e00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136e04:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136e08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136e0c:	e1a03b83 	lsl	r3, r3, #23
  136e10:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136e14:	e15b30ba 	ldrh	r3, [fp, #-10]
  136e18:	e1a03903 	lsl	r3, r3, #18
  136e1c:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136e20:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  136e24:	e15b30bc 	ldrh	r3, [fp, #-12]
  136e28:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136e2c:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136e30:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136e34:	e51b3010 	ldr	r3, [fp, #-16]
  136e38:	e51b2008 	ldr	r2, [fp, #-8]
  136e3c:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136e40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136e44:	e1a03b83 	lsl	r3, r3, #23
  136e48:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136e4c:	e15b30ba 	ldrh	r3, [fp, #-10]
  136e50:	e1a03903 	lsl	r3, r3, #18
  136e54:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136e58:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(data);
  136e5c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136e60:	e6ff3073 	uxth	r3, r3
  136e64:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136e68:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
  136e6c:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136e70:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136e74:	e51b3010 	ldr	r3, [fp, #-16]
  136e78:	e51b2008 	ldr	r2, [fp, #-8]
  136e7c:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136e80:	e320f000 	nop	{0}
  136e84:	e28bd000 	add	sp, fp, #0
  136e88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136e8c:	e12fff1e 	bx	lr

00136e90 <ENET_StartExtC45SMIRead>:

void ENET_StartExtC45SMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg)
{
  136e90:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136e94:	e28db000 	add	fp, sp, #0
  136e98:	e24dd01c 	sub	sp, sp, #28
  136e9c:	e50b0010 	str	r0, [fp, #-16]
  136ea0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136ea4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t mmfr = 0;
  136ea8:	e3a03000 	mov	r3, #0
  136eac:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  136eb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136eb4:	e1a03823 	lsr	r3, r3, #16
  136eb8:	e6ff3073 	uxth	r3, r3
  136ebc:	e203301f 	and	r3, r3, #31
  136ec0:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  136ec4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136ec8:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136ecc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ed0:	e1a03b83 	lsl	r3, r3, #23
  136ed4:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136ed8:	e15b30ba 	ldrh	r3, [fp, #-10]
  136edc:	e1a03903 	lsl	r3, r3, #18
  136ee0:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136ee4:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  136ee8:	e15b30bc 	ldrh	r3, [fp, #-12]
  136eec:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136ef0:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136ef4:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136ef8:	e51b3010 	ldr	r3, [fp, #-16]
  136efc:	e51b2008 	ldr	r2, [fp, #-8]
  136f00:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiReadFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136f04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136f08:	e1a03b83 	lsl	r3, r3, #23
  136f0c:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136f10:	e15b30ba 	ldrh	r3, [fp, #-10]
  136f14:	e1a03903 	lsl	r3, r3, #18
  136f18:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136f1c:	e1823003 	orr	r3, r2, r3
  136f20:	e3833203 	orr	r3, r3, #805306368	; 0x30000000
  136f24:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136f28:	e50b3008 	str	r3, [fp, #-8]
           ENET_MMFR_TA(2);
    base->MMFR = mmfr;
  136f2c:	e51b3010 	ldr	r3, [fp, #-16]
  136f30:	e51b2008 	ldr	r2, [fp, #-8]
  136f34:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136f38:	e320f000 	nop	{0}
  136f3c:	e28bd000 	add	sp, fp, #0
  136f40:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136f44:	e12fff1e 	bx	lr

00136f48 <ENET_GetRxErrBeforeReadFrame>:
#endif /* FSL_FEATURE_ENET_HAS_EXTEND_MDIO */

void ENET_GetRxErrBeforeReadFrame(enet_handle_t *handle, enet_data_error_stats_t *eErrorStatic)
{
  136f48:	e92d4800 	push	{fp, lr}
  136f4c:	e28db004 	add	fp, sp, #4
  136f50:	e24dd010 	sub	sp, sp, #16
  136f54:	e50b0010 	str	r0, [fp, #-16]
  136f58:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(handle);
  136f5c:	e51b3010 	ldr	r3, [fp, #-16]
  136f60:	e3530000 	cmp	r3, #0
  136f64:	1a000005 	bne	136f80 <ENET_GetRxErrBeforeReadFrame+0x38>
  136f68:	e3a02fae 	mov	r2, #696	; 0x2b8
  136f6c:	e30a12c4 	movw	r1, #41668	; 0xa2c4
  136f70:	e3401014 	movt	r1, #20
  136f74:	e3090ee0 	movw	r0, #40672	; 0x9ee0
  136f78:	e3400014 	movt	r0, #20
  136f7c:	ebff3185 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  136f80:	e51b3010 	ldr	r3, [fp, #-16]
  136f84:	e5933004 	ldr	r3, [r3, #4]
  136f88:	e3530000 	cmp	r3, #0
  136f8c:	1a000005 	bne	136fa8 <ENET_GetRxErrBeforeReadFrame+0x60>
  136f90:	e30022b9 	movw	r2, #697	; 0x2b9
  136f94:	e30a12c4 	movw	r1, #41668	; 0xa2c4
  136f98:	e3401014 	movt	r1, #20
  136f9c:	e30a0124 	movw	r0, #41252	; 0xa124
  136fa0:	e3400014 	movt	r0, #20
  136fa4:	ebff317b 	bl	103598 <rt_assert_handler>
    RT_ASSERT(eErrorStatic);
  136fa8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136fac:	e3530000 	cmp	r3, #0
  136fb0:	1a000005 	bne	136fcc <ENET_GetRxErrBeforeReadFrame+0x84>
  136fb4:	e30022ba 	movw	r2, #698	; 0x2ba
  136fb8:	e30a12c4 	movw	r1, #41668	; 0xa2c4
  136fbc:	e3401014 	movt	r1, #20
  136fc0:	e30a0138 	movw	r0, #41272	; 0xa138
  136fc4:	e3400014 	movt	r0, #20
  136fc8:	ebff3172 	bl	103598 <rt_assert_handler>

    uint16_t control = 0;
  136fcc:	e3a03000 	mov	r3, #0
  136fd0:	e14b30ba 	strh	r3, [fp, #-10]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  136fd4:	e51b3010 	ldr	r3, [fp, #-16]
  136fd8:	e5933004 	ldr	r3, [r3, #4]
  136fdc:	e50b3008 	str	r3, [fp, #-8]
        /* Add the cache invalidate maintain. */
        // rt_hw_cpu_dcache_invalidate((void *)curBuffDescrip, sizeof(enet_rx_bd_struct_t));
        // ueth_dcache_invalid((void *)curBuffDescrip, sizeof(enet_rx_bd_struct_t));

        /* The last buffer descriptor of a frame. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  136fe0:	e51b3008 	ldr	r3, [fp, #-8]
  136fe4:	e1d330b2 	ldrh	r3, [r3, #2]
  136fe8:	e6ff3073 	uxth	r3, r3
  136fec:	e2033b02 	and	r3, r3, #2048	; 0x800
  136ff0:	e3530000 	cmp	r3, #0
  136ff4:	0a000030 	beq	1370bc <ENET_GetRxErrBeforeReadFrame+0x174>
        {
            control = curBuffDescrip->control;
  136ff8:	e51b3008 	ldr	r3, [fp, #-8]
  136ffc:	e1d330b2 	ldrh	r3, [r3, #2]
  137000:	e14b30ba 	strh	r3, [fp, #-10]
            if (control & ENET_BUFFDESCRIPTOR_RX_TRUNC_MASK)
  137004:	e15b30ba 	ldrh	r3, [fp, #-10]
  137008:	e2033001 	and	r3, r3, #1
  13700c:	e3530000 	cmp	r3, #0
  137010:	0a000004 	beq	137028 <ENET_GetRxErrBeforeReadFrame+0xe0>
            {
                /* The receive truncate error. */
                eErrorStatic->statsRxTruncateErr++;
  137014:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137018:	e5933010 	ldr	r3, [r3, #16]
  13701c:	e2832001 	add	r2, r3, #1
  137020:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137024:	e5832010 	str	r2, [r3, #16]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_OVERRUN_MASK)
  137028:	e15b30ba 	ldrh	r3, [fp, #-10]
  13702c:	e2033002 	and	r3, r3, #2
  137030:	e3530000 	cmp	r3, #0
  137034:	0a000004 	beq	13704c <ENET_GetRxErrBeforeReadFrame+0x104>
            {
                /* The receive over run error. */
                eErrorStatic->statsRxOverRunErr++;
  137038:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13703c:	e593300c 	ldr	r3, [r3, #12]
  137040:	e2832001 	add	r2, r3, #1
  137044:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137048:	e583200c 	str	r2, [r3, #12]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_LENVLIOLATE_MASK)
  13704c:	e15b30ba 	ldrh	r3, [fp, #-10]
  137050:	e2033020 	and	r3, r3, #32
  137054:	e3530000 	cmp	r3, #0
  137058:	0a000004 	beq	137070 <ENET_GetRxErrBeforeReadFrame+0x128>
            {
                /* The receive length violation error. */
                eErrorStatic->statsRxLenGreaterErr++;
  13705c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137060:	e5933000 	ldr	r3, [r3]
  137064:	e2832001 	add	r2, r3, #1
  137068:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13706c:	e5832000 	str	r2, [r3]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_NOOCTET_MASK)
  137070:	e15b30ba 	ldrh	r3, [fp, #-10]
  137074:	e2033010 	and	r3, r3, #16
  137078:	e3530000 	cmp	r3, #0
  13707c:	0a000004 	beq	137094 <ENET_GetRxErrBeforeReadFrame+0x14c>
            {
                /* The receive alignment error. */
                eErrorStatic->statsRxAlignErr++;
  137080:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137084:	e5933004 	ldr	r3, [r3, #4]
  137088:	e2832001 	add	r2, r3, #1
  13708c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137090:	e5832004 	str	r2, [r3, #4]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_CRC_MASK)
  137094:	e15b30ba 	ldrh	r3, [fp, #-10]
  137098:	e2033004 	and	r3, r3, #4
  13709c:	e3530000 	cmp	r3, #0
  1370a0:	0a000018 	beq	137108 <ENET_GetRxErrBeforeReadFrame+0x1c0>
            {
                /* The receive CRC error. */
                eErrorStatic->statsRxFcsErr++;
  1370a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370a8:	e5933008 	ldr	r3, [r3, #8]
  1370ac:	e2832001 	add	r2, r3, #1
  1370b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370b4:	e5832008 	str	r2, [r3, #8]
            }
            break;
  1370b8:	ea000012 	b	137108 <ENET_GetRxErrBeforeReadFrame+0x1c0>
        }

        /* Increase the buffer descriptor, if it is the last one, increase to first one of the ring buffer. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  1370bc:	e51b3008 	ldr	r3, [fp, #-8]
  1370c0:	e1d330b2 	ldrh	r3, [r3, #2]
  1370c4:	e6ff3073 	uxth	r3, r3
  1370c8:	e2033a02 	and	r3, r3, #8192	; 0x2000
  1370cc:	e3530000 	cmp	r3, #0
  1370d0:	0a000003 	beq	1370e4 <ENET_GetRxErrBeforeReadFrame+0x19c>
        {
            curBuffDescrip = handle->rxBdBase;
  1370d4:	e51b3010 	ldr	r3, [fp, #-16]
  1370d8:	e5933000 	ldr	r3, [r3]
  1370dc:	e50b3008 	str	r3, [fp, #-8]
  1370e0:	ea000002 	b	1370f0 <ENET_GetRxErrBeforeReadFrame+0x1a8>
        }
        else
        {
            curBuffDescrip++;
  1370e4:	e51b3008 	ldr	r3, [fp, #-8]
  1370e8:	e2833008 	add	r3, r3, #8
  1370ec:	e50b3008 	str	r3, [fp, #-8]
        }

    } while (curBuffDescrip != handle->rxBdCurrent);
  1370f0:	e51b3010 	ldr	r3, [fp, #-16]
  1370f4:	e5933004 	ldr	r3, [r3, #4]
  1370f8:	e51b2008 	ldr	r2, [fp, #-8]
  1370fc:	e1520003 	cmp	r2, r3
  137100:	1affffb6 	bne	136fe0 <ENET_GetRxErrBeforeReadFrame+0x98>
}
  137104:	ea000000 	b	13710c <ENET_GetRxErrBeforeReadFrame+0x1c4>
            break;
  137108:	e320f000 	nop	{0}
}
  13710c:	e320f000 	nop	{0}
  137110:	e24bd004 	sub	sp, fp, #4
  137114:	e8bd8800 	pop	{fp, pc}

00137118 <ENET_ReadFrame>:

status_t ENET_ReadFrame(ENET_Type *base,enet_handle_t *handle,const enet_config_t *config,uint8_t *data,uint16_t *length)
{
  137118:	e92d4800 	push	{fp, lr}
  13711c:	e28db004 	add	fp, sp, #4
  137120:	e24dd018 	sub	sp, sp, #24
  137124:	e50b0010 	str	r0, [fp, #-16]
  137128:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  13712c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  137130:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(handle);
  137134:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137138:	e3530000 	cmp	r3, #0
  13713c:	1a000005 	bne	137158 <ENET_ReadFrame+0x40>
  137140:	e3a02fbd 	mov	r2, #756	; 0x2f4
  137144:	e30a12e4 	movw	r1, #41700	; 0xa2e4
  137148:	e3401014 	movt	r1, #20
  13714c:	e3090ee0 	movw	r0, #40672	; 0x9ee0
  137150:	e3400014 	movt	r0, #20
  137154:	ebff310f 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  137158:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13715c:	e5933004 	ldr	r3, [r3, #4]
  137160:	e3530000 	cmp	r3, #0
  137164:	1a000005 	bne	137180 <ENET_ReadFrame+0x68>
  137168:	e30022f5 	movw	r2, #757	; 0x2f5
  13716c:	e30a12e4 	movw	r1, #41700	; 0xa2e4
  137170:	e3401014 	movt	r1, #20
  137174:	e30a0124 	movw	r0, #41252	; 0xa124
  137178:	e3400014 	movt	r0, #20
  13717c:	ebff3105 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length);
  137180:	e59b3004 	ldr	r3, [fp, #4]
  137184:	e3530000 	cmp	r3, #0
  137188:	1a000005 	bne	1371a4 <ENET_ReadFrame+0x8c>
  13718c:	e30022f6 	movw	r2, #758	; 0x2f6
  137190:	e30a12e4 	movw	r1, #41700	; 0xa2e4
  137194:	e3401014 	movt	r1, #20
  137198:	e30a0148 	movw	r0, #41288	; 0xa148
  13719c:	e3400014 	movt	r0, #20
  1371a0:	ebff30fc 	bl	103598 <rt_assert_handler>

    /* Reset the length to zero. */
    *length = 0;
  1371a4:	e59b3004 	ldr	r3, [fp, #4]
  1371a8:	e3a02000 	mov	r2, #0
  1371ac:	e1c320b0 	strh	r2, [r3]

    uint16_t validLastMask = ENET_BUFFDESCRIPTOR_RX_LAST_MASK | ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  1371b0:	e3a03b22 	mov	r3, #34816	; 0x8800
  1371b4:	e14b30b6 	strh	r3, [fp, #-6]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  1371b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1371bc:	e5933004 	ldr	r3, [r3, #4]
  1371c0:	e50b300c 	str	r3, [fp, #-12]

    // rt_hw_cpu_dcache_invalidate((void *)physical_to_virtual(curBuffDescrip->buffer), handle->rxBuffSizeAlign);
    // ueth_dcache_invalid((void *)(curBuffDescrip->buffer_vaddr), handle->rxBuffSizeAlign);
    /* Check the current buffer descriptor's empty flag.  if empty means there is no frame received. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK)
  1371c4:	e51b300c 	ldr	r3, [fp, #-12]
  1371c8:	e1d330b2 	ldrh	r3, [r3, #2]
  1371cc:	e6ff3073 	uxth	r3, r3
  1371d0:	e6bf3073 	sxth	r3, r3
  1371d4:	e3530000 	cmp	r3, #0
  1371d8:	aa000001 	bge	1371e4 <ENET_ReadFrame+0xcc>
    {
        return kStatus_ENET_RxFrameEmpty;
  1371dc:	e3003fa2 	movw	r3, #4002	; 0xfa2
  1371e0:	ea00005c 	b	137358 <ENET_ReadFrame+0x240>
    }
    else
    {
        if ((curBuffDescrip->control & validLastMask) == ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  1371e4:	e51b300c 	ldr	r3, [fp, #-12]
  1371e8:	e1d330b2 	ldrh	r3, [r3, #2]
  1371ec:	e6ff2073 	uxth	r2, r3
  1371f0:	e15b30b6 	ldrh	r3, [fp, #-6]
  1371f4:	e0033002 	and	r3, r3, r2
  1371f8:	e6ff3073 	uxth	r3, r3
  1371fc:	e3530b02 	cmp	r3, #2048	; 0x800
  137200:	1a00003a 	bne	1372f0 <ENET_ReadFrame+0x1d8>
        {
            if(curBuffDescrip->length <= config->rxMaxFrameLen)
  137204:	e51b300c 	ldr	r3, [fp, #-12]
  137208:	e1d330b0 	ldrh	r3, [r3]
  13720c:	e6ff2073 	uxth	r2, r3
  137210:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137214:	e1d330b8 	ldrh	r3, [r3, #8]
  137218:	e1520003 	cmp	r2, r3
  13721c:	8a000018 	bhi	137284 <ENET_ReadFrame+0x16c>
            {
                *length = curBuffDescrip->length;
  137220:	e51b300c 	ldr	r3, [fp, #-12]
  137224:	e1d330b0 	ldrh	r3, [r3]
  137228:	e6ff2073 	uxth	r2, r3
  13722c:	e59b3004 	ldr	r3, [fp, #4]
  137230:	e1c320b0 	strh	r2, [r3]
                rt_memcpy(data, buffer_vaddr_rx[curBuffDescrip - handle->rxBdBase], curBuffDescrip->length);
  137234:	e51b300c 	ldr	r3, [fp, #-12]
  137238:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  13723c:	e5922000 	ldr	r2, [r2]
  137240:	e0433002 	sub	r3, r3, r2
  137244:	e1a031c3 	asr	r3, r3, #3
  137248:	e1a02003 	mov	r2, r3
  13724c:	e30c3c88 	movw	r3, #52360	; 0xcc88
  137250:	e3403015 	movt	r3, #21
  137254:	e7931102 	ldr	r1, [r3, r2, lsl #2]
  137258:	e51b300c 	ldr	r3, [fp, #-12]
  13725c:	e1d330b0 	ldrh	r3, [r3]
  137260:	e6ff3073 	uxth	r3, r3
  137264:	e1a02003 	mov	r2, r3
  137268:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  13726c:	ebff3023 	bl	103300 <rt_memcpy>
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  137270:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137274:	e51b0010 	ldr	r0, [fp, #-16]
  137278:	eb000039 	bl	137364 <ENET_UpdateReadBuffers>
                return kStatus_Success;
  13727c:	e3a03000 	mov	r3, #0
  137280:	ea000034 	b	137358 <ENET_ReadFrame+0x240>
            }
            else
            {
                LOG_E("frame error0 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  137284:	e30a0150 	movw	r0, #41296	; 0xa150
  137288:	e3400014 	movt	r0, #20
  13728c:	ebff2fa0 	bl	103114 <rt_kprintf>
  137290:	e51b300c 	ldr	r3, [fp, #-12]
  137294:	e1d330b2 	ldrh	r3, [r3, #2]
  137298:	e6ff3073 	uxth	r3, r3
  13729c:	e1a01003 	mov	r1, r3
  1372a0:	e51b300c 	ldr	r3, [fp, #-12]
  1372a4:	e1d330b0 	ldrh	r3, [r3]
  1372a8:	e6ff3073 	uxth	r3, r3
  1372ac:	e1a02003 	mov	r2, r3
  1372b0:	e30a0164 	movw	r0, #41316	; 0xa164
  1372b4:	e3400014 	movt	r0, #20
  1372b8:	ebff2f95 	bl	103114 <rt_kprintf>
  1372bc:	e30a019c 	movw	r0, #41372	; 0xa19c
  1372c0:	e3400014 	movt	r0, #20
  1372c4:	ebff2f92 	bl	103114 <rt_kprintf>
                *length = curBuffDescrip->length;
  1372c8:	e51b300c 	ldr	r3, [fp, #-12]
  1372cc:	e1d330b0 	ldrh	r3, [r3]
  1372d0:	e6ff2073 	uxth	r2, r3
  1372d4:	e59b3004 	ldr	r3, [fp, #4]
  1372d8:	e1c320b0 	strh	r2, [r3]
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  1372dc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1372e0:	e51b0010 	ldr	r0, [fp, #-16]
  1372e4:	eb00001e 	bl	137364 <ENET_UpdateReadBuffers>
                return kStatus_ENET_RxFrameError;
  1372e8:	e3a03efa 	mov	r3, #4000	; 0xfa0
  1372ec:	ea000019 	b	137358 <ENET_ReadFrame+0x240>
            }
        }
        else
        {
            LOG_E("frame error1 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  1372f0:	e30a0150 	movw	r0, #41296	; 0xa150
  1372f4:	e3400014 	movt	r0, #20
  1372f8:	ebff2f85 	bl	103114 <rt_kprintf>
  1372fc:	e51b300c 	ldr	r3, [fp, #-12]
  137300:	e1d330b2 	ldrh	r3, [r3, #2]
  137304:	e6ff3073 	uxth	r3, r3
  137308:	e1a01003 	mov	r1, r3
  13730c:	e51b300c 	ldr	r3, [fp, #-12]
  137310:	e1d330b0 	ldrh	r3, [r3]
  137314:	e6ff3073 	uxth	r3, r3
  137318:	e1a02003 	mov	r2, r3
  13731c:	e30a01a4 	movw	r0, #41380	; 0xa1a4
  137320:	e3400014 	movt	r0, #20
  137324:	ebff2f7a 	bl	103114 <rt_kprintf>
  137328:	e30a019c 	movw	r0, #41372	; 0xa19c
  13732c:	e3400014 	movt	r0, #20
  137330:	ebff2f77 	bl	103114 <rt_kprintf>
            *length = curBuffDescrip->length;
  137334:	e51b300c 	ldr	r3, [fp, #-12]
  137338:	e1d330b0 	ldrh	r3, [r3]
  13733c:	e6ff2073 	uxth	r2, r3
  137340:	e59b3004 	ldr	r3, [fp, #4]
  137344:	e1c320b0 	strh	r2, [r3]
            ENET_UpdateReadBuffers(base, handle);
  137348:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13734c:	e51b0010 	ldr	r0, [fp, #-16]
  137350:	eb000003 	bl	137364 <ENET_UpdateReadBuffers>
            return kStatus_ENET_RxFrameError;
  137354:	e3a03efa 	mov	r3, #4000	; 0xfa0
        }
    }
    /* The frame is on processing - set to empty status to make application to receive it next time. */
    return kStatus_ENET_RxFrameEmpty;
}
  137358:	e1a00003 	mov	r0, r3
  13735c:	e24bd004 	sub	sp, fp, #4
  137360:	e8bd8800 	pop	{fp, pc}

00137364 <ENET_UpdateReadBuffers>:

static void ENET_UpdateReadBuffers(ENET_Type *base, enet_handle_t *handle)
{
  137364:	e92d4800 	push	{fp, lr}
  137368:	e28db004 	add	fp, sp, #4
  13736c:	e24dd008 	sub	sp, sp, #8
  137370:	e50b0008 	str	r0, [fp, #-8]
  137374:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  137378:	e51b300c 	ldr	r3, [fp, #-12]
  13737c:	e3530000 	cmp	r3, #0
  137380:	1a000005 	bne	13739c <ENET_UpdateReadBuffers+0x38>
  137384:	e3a02fca 	mov	r2, #808	; 0x328
  137388:	e30a12f4 	movw	r1, #41716	; 0xa2f4
  13738c:	e3401014 	movt	r1, #20
  137390:	e3090ee0 	movw	r0, #40672	; 0x9ee0
  137394:	e3400014 	movt	r0, #20
  137398:	ebff307e 	bl	103598 <rt_assert_handler>

    /* Clears status. */
    handle->rxBdCurrent->control &= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  13739c:	e51b300c 	ldr	r3, [fp, #-12]
  1373a0:	e5933004 	ldr	r3, [r3, #4]
  1373a4:	e1d330b2 	ldrh	r3, [r3, #2]
  1373a8:	e6ff2073 	uxth	r2, r3
  1373ac:	e51b300c 	ldr	r3, [fp, #-12]
  1373b0:	e5933004 	ldr	r3, [r3, #4]
  1373b4:	e2022a02 	and	r2, r2, #8192	; 0x2000
  1373b8:	e6ff2072 	uxth	r2, r2
  1373bc:	e1c320b2 	strh	r2, [r3, #2]
    /* Sets the receive buffer descriptor with the empty flag. */
    handle->rxBdCurrent->control |= ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  1373c0:	e51b300c 	ldr	r3, [fp, #-12]
  1373c4:	e5933004 	ldr	r3, [r3, #4]
  1373c8:	e1d330b2 	ldrh	r3, [r3, #2]
  1373cc:	e6ff3073 	uxth	r3, r3
  1373d0:	e51b200c 	ldr	r2, [fp, #-12]
  1373d4:	e5922004 	ldr	r2, [r2, #4]
  1373d8:	e1e03883 	mvn	r3, r3, lsl #17
  1373dc:	e1e038a3 	mvn	r3, r3, lsr #17
  1373e0:	e6ff3073 	uxth	r3, r3
  1373e4:	e1c230b2 	strh	r3, [r2, #2]
    /* Increase current buffer descriptor to the next one. */
    if (handle->rxBdCurrent->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  1373e8:	e51b300c 	ldr	r3, [fp, #-12]
  1373ec:	e5933004 	ldr	r3, [r3, #4]
  1373f0:	e1d330b2 	ldrh	r3, [r3, #2]
  1373f4:	e6ff3073 	uxth	r3, r3
  1373f8:	e2033a02 	and	r3, r3, #8192	; 0x2000
  1373fc:	e3530000 	cmp	r3, #0
  137400:	0a000004 	beq	137418 <ENET_UpdateReadBuffers+0xb4>
    {
        handle->rxBdCurrent = handle->rxBdBase;
  137404:	e51b300c 	ldr	r3, [fp, #-12]
  137408:	e5932000 	ldr	r2, [r3]
  13740c:	e51b300c 	ldr	r3, [fp, #-12]
  137410:	e5832004 	str	r2, [r3, #4]
  137414:	ea000004 	b	13742c <ENET_UpdateReadBuffers+0xc8>
    }
    else
    {
        handle->rxBdCurrent++;
  137418:	e51b300c 	ldr	r3, [fp, #-12]
  13741c:	e5933004 	ldr	r3, [r3, #4]
  137420:	e2832008 	add	r2, r3, #8
  137424:	e51b300c 	ldr	r3, [fp, #-12]
  137428:	e5832004 	str	r2, [r3, #4]
    }
    /* Actives the receive buffer descriptor. */
    base->RDAR = ENET_RDAR_RDAR_MASK;
  13742c:	e51b3008 	ldr	r3, [fp, #-8]
  137430:	e3a02401 	mov	r2, #16777216	; 0x1000000
  137434:	e5832010 	str	r2, [r3, #16]
}
  137438:	e320f000 	nop	{0}
  13743c:	e24bd004 	sub	sp, fp, #4
  137440:	e8bd8800 	pop	{fp, pc}

00137444 <ENET_SendFrame>:

status_t ENET_SendFrame(ENET_Type *base, enet_handle_t *handle, const uint8_t *data, uint16_t length,uint32_t last_flag)
{
  137444:	e92d4800 	push	{fp, lr}
  137448:	e28db004 	add	fp, sp, #4
  13744c:	e24dd018 	sub	sp, sp, #24
  137450:	e50b0010 	str	r0, [fp, #-16]
  137454:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137458:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  13745c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
    RT_ASSERT(handle);
  137460:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137464:	e3530000 	cmp	r3, #0
  137468:	1a000005 	bne	137484 <ENET_SendFrame+0x40>
  13746c:	e300233d 	movw	r2, #829	; 0x33d
  137470:	e30a130c 	movw	r1, #41740	; 0xa30c
  137474:	e3401014 	movt	r1, #20
  137478:	e3090ee0 	movw	r0, #40672	; 0x9ee0
  13747c:	e3400014 	movt	r0, #20
  137480:	ebff3044 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->txBdCurrent);
  137484:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137488:	e593300c 	ldr	r3, [r3, #12]
  13748c:	e3530000 	cmp	r3, #0
  137490:	1a000005 	bne	1374ac <ENET_SendFrame+0x68>
  137494:	e300233e 	movw	r2, #830	; 0x33e
  137498:	e30a130c 	movw	r1, #41740	; 0xa30c
  13749c:	e3401014 	movt	r1, #20
  1374a0:	e30a01dc 	movw	r0, #41436	; 0xa1dc
  1374a4:	e3400014 	movt	r0, #20
  1374a8:	ebff303a 	bl	103598 <rt_assert_handler>
    RT_ASSERT(data);
  1374ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1374b0:	e3530000 	cmp	r3, #0
  1374b4:	1a000005 	bne	1374d0 <ENET_SendFrame+0x8c>
  1374b8:	e300233f 	movw	r2, #831	; 0x33f
  1374bc:	e30a130c 	movw	r1, #41740	; 0xa30c
  1374c0:	e3401014 	movt	r1, #20
  1374c4:	e30a01f0 	movw	r0, #41456	; 0xa1f0
  1374c8:	e3400014 	movt	r0, #20
  1374cc:	ebff3031 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length <= ENET_FRAME_MAX_FRAMELEN);
  1374d0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1374d4:	e30025ee 	movw	r2, #1518	; 0x5ee
  1374d8:	e1530002 	cmp	r3, r2
  1374dc:	9a000005 	bls	1374f8 <ENET_SendFrame+0xb4>
  1374e0:	e3a02d0d 	mov	r2, #832	; 0x340
  1374e4:	e30a130c 	movw	r1, #41740	; 0xa30c
  1374e8:	e3401014 	movt	r1, #20
  1374ec:	e30a01f8 	movw	r0, #41464	; 0xa1f8
  1374f0:	e3400014 	movt	r0, #20
  1374f4:	ebff3027 	bl	103598 <rt_assert_handler>

    volatile enet_tx_bd_struct_t *curBuffDescrip = handle->txBdCurrent;
  1374f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1374fc:	e593300c 	ldr	r3, [r3, #12]
  137500:	e50b3008 	str	r3, [fp, #-8]
    /* Check if the transmit buffer is ready. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_READY_MASK)
  137504:	e51b3008 	ldr	r3, [fp, #-8]
  137508:	e1d330b2 	ldrh	r3, [r3, #2]
  13750c:	e6ff3073 	uxth	r3, r3
  137510:	e6bf3073 	sxth	r3, r3
  137514:	e3530000 	cmp	r3, #0
  137518:	aa000001 	bge	137524 <ENET_SendFrame+0xe0>
    {
        return kStatus_ENET_TxFrameBusy;
  13751c:	e3003fa3 	movw	r3, #4003	; 0xfa3
  137520:	ea00004b 	b	137654 <ENET_SendFrame+0x210>
    }
    /* One transmit buffer is enough for one frame. */
    if (handle->txBuffSizeAlign >= length)
  137524:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137528:	e5932014 	ldr	r2, [r3, #20]
  13752c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  137530:	e1520003 	cmp	r2, r3
  137534:	3a000045 	bcc	137650 <ENET_SendFrame+0x20c>
    {
        /* Copy data to the buffer for uDMA transfer. */
        rt_memcpy(buffer_vaddr_tx[curBuffDescrip - handle->txBdBase], data, length);
  137538:	e51b3008 	ldr	r3, [fp, #-8]
  13753c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  137540:	e5922008 	ldr	r2, [r2, #8]
  137544:	e0433002 	sub	r3, r3, r2
  137548:	e1a031c3 	asr	r3, r3, #3
  13754c:	e1a02003 	mov	r2, r3
  137550:	e30c3e88 	movw	r3, #52872	; 0xce88
  137554:	e3403015 	movt	r3, #21
  137558:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  13755c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  137560:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  137564:	e1a00003 	mov	r0, r3
  137568:	ebff2f64 	bl	103300 <rt_memcpy>
        /* Set data length. */
        curBuffDescrip->length = length;
  13756c:	e51b3008 	ldr	r3, [fp, #-8]
  137570:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  137574:	e1c320b0 	strh	r2, [r3]
        if(last_flag)
  137578:	e59b3004 	ldr	r3, [fp, #4]
  13757c:	e3530000 	cmp	r3, #0
  137580:	0a000009 	beq	1375ac <ENET_SendFrame+0x168>
        {
            curBuffDescrip->control |= (ENET_BUFFDESCRIPTOR_TX_READY_MASK | ENET_BUFFDESCRIPTOR_TX_LAST_MASK);
  137584:	e51b3008 	ldr	r3, [fp, #-8]
  137588:	e1d330b2 	ldrh	r3, [r3, #2]
  13758c:	e6ff2073 	uxth	r2, r3
  137590:	e3a03b22 	mov	r3, #34816	; 0x8800
  137594:	e34f3fff 	movt	r3, #65535	; 0xffff
  137598:	e1823003 	orr	r3, r2, r3
  13759c:	e6ff2073 	uxth	r2, r3
  1375a0:	e51b3008 	ldr	r3, [fp, #-8]
  1375a4:	e1c320b2 	strh	r2, [r3, #2]
  1375a8:	ea00000e 	b	1375e8 <ENET_SendFrame+0x1a4>
        }
        else
        {
            curBuffDescrip->control &= ~ENET_BUFFDESCRIPTOR_TX_LAST_MASK;
  1375ac:	e51b3008 	ldr	r3, [fp, #-8]
  1375b0:	e1d330b2 	ldrh	r3, [r3, #2]
  1375b4:	e6ff3073 	uxth	r3, r3
  1375b8:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  1375bc:	e6ff2073 	uxth	r2, r3
  1375c0:	e51b3008 	ldr	r3, [fp, #-8]
  1375c4:	e1c320b2 	strh	r2, [r3, #2]
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_READY_MASK;
  1375c8:	e51b3008 	ldr	r3, [fp, #-8]
  1375cc:	e1d330b2 	ldrh	r3, [r3, #2]
  1375d0:	e6ff3073 	uxth	r3, r3
  1375d4:	e1e03883 	mvn	r3, r3, lsl #17
  1375d8:	e1e038a3 	mvn	r3, r3, lsr #17
  1375dc:	e6ff2073 	uxth	r2, r3
  1375e0:	e51b3008 	ldr	r3, [fp, #-8]
  1375e4:	e1c320b2 	strh	r2, [r3, #2]

        // rt_hw_cpu_dcache_clean((void *)physical_to_virtual(curBuffDescrip->buffer),length);
        // ueth_dcache_clean(curBuffDescrip->buffer_vaddr, length);
        /* Active the transmit buffer descriptor. */

        base->TDAR = ENET_TDAR_TDAR_MASK;
  1375e8:	e51b3010 	ldr	r3, [fp, #-16]
  1375ec:	e3a02401 	mov	r2, #16777216	; 0x1000000
  1375f0:	e5832014 	str	r2, [r3, #20]
        /* Increase the buffer descriptor address. */
        while((base->TDAR != 0))
  1375f4:	e320f000 	nop	{0}
  1375f8:	e51b3010 	ldr	r3, [fp, #-16]
  1375fc:	e5933014 	ldr	r3, [r3, #20]
  137600:	e3530000 	cmp	r3, #0
  137604:	1afffffb 	bne	1375f8 <ENET_SendFrame+0x1b4>
        {
        }
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_WRAP_MASK)
  137608:	e51b3008 	ldr	r3, [fp, #-8]
  13760c:	e1d330b2 	ldrh	r3, [r3, #2]
  137610:	e6ff3073 	uxth	r3, r3
  137614:	e2033a02 	and	r3, r3, #8192	; 0x2000
  137618:	e3530000 	cmp	r3, #0
  13761c:	0a000004 	beq	137634 <ENET_SendFrame+0x1f0>
        {
            handle->txBdCurrent = handle->txBdBase;
  137620:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137624:	e5932008 	ldr	r2, [r3, #8]
  137628:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13762c:	e583200c 	str	r2, [r3, #12]
  137630:	ea000004 	b	137648 <ENET_SendFrame+0x204>
        }
        else
        {
            handle->txBdCurrent++;
  137634:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137638:	e593300c 	ldr	r3, [r3, #12]
  13763c:	e2832008 	add	r2, r3, #8
  137640:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137644:	e583200c 	str	r2, [r3, #12]
        }
        return kStatus_Success;
  137648:	e3a03000 	mov	r3, #0
  13764c:	ea000000 	b	137654 <ENET_SendFrame+0x210>
    }
    else
    {
        return kStatus_ENET_RxFrameError;
  137650:	e3a03efa 	mov	r3, #4000	; 0xfa0
    }
}
  137654:	e1a00003 	mov	r0, r3
  137658:	e24bd004 	sub	sp, fp, #4
  13765c:	e8bd8800 	pop	{fp, pc}

00137660 <ENET_AddMulticastGroup>:

void ENET_AddMulticastGroup(ENET_Type *base, uint8_t *address)
{
  137660:	e92d4800 	push	{fp, lr}
  137664:	e28db004 	add	fp, sp, #4
  137668:	e24dd018 	sub	sp, sp, #24
  13766c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137670:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  137674:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137678:	e3530000 	cmp	r3, #0
  13767c:	1a000005 	bne	137698 <ENET_AddMulticastGroup+0x38>
  137680:	e3a02fdd 	mov	r2, #884	; 0x374
  137684:	e30a131c 	movw	r1, #41756	; 0xa31c
  137688:	e3401014 	movt	r1, #20
  13768c:	e30a021c 	movw	r0, #41500	; 0xa21c
  137690:	e3400014 	movt	r0, #20
  137694:	ebff2fbf 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  137698:	e3e03000 	mvn	r3, #0
  13769c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  1376a0:	e3a03000 	mov	r3, #0
  1376a4:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  1376a8:	e3a03000 	mov	r3, #0
  1376ac:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  1376b0:	e3a03000 	mov	r3, #0
  1376b4:	e50b300c 	str	r3, [fp, #-12]
  1376b8:	ea000028 	b	137760 <ENET_AddMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  1376bc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1376c0:	e51b300c 	ldr	r3, [fp, #-12]
  1376c4:	e0823003 	add	r3, r2, r3
  1376c8:	e5d33000 	ldrb	r3, [r3]
  1376cc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  1376d0:	e3a03000 	mov	r3, #0
  1376d4:	e50b3010 	str	r3, [fp, #-16]
  1376d8:	ea00001a 	b	137748 <ENET_AddMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  1376dc:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1376e0:	e51b3008 	ldr	r3, [fp, #-8]
  1376e4:	e0233002 	eor	r3, r3, r2
  1376e8:	e2033001 	and	r3, r3, #1
  1376ec:	e3530000 	cmp	r3, #0
  1376f0:	0a00000b 	beq	137724 <ENET_AddMulticastGroup+0xc4>
            {
                crc >>= 1U;
  1376f4:	e51b3008 	ldr	r3, [fp, #-8]
  1376f8:	e1a030a3 	lsr	r3, r3, #1
  1376fc:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  137700:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137704:	e1a030a3 	lsr	r3, r3, #1
  137708:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  13770c:	e51b2008 	ldr	r2, [fp, #-8]
  137710:	e3083320 	movw	r3, #33568	; 0x8320
  137714:	e34e3db8 	movt	r3, #60856	; 0xedb8
  137718:	e0233002 	eor	r3, r3, r2
  13771c:	e50b3008 	str	r3, [fp, #-8]
  137720:	ea000005 	b	13773c <ENET_AddMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  137724:	e51b3008 	ldr	r3, [fp, #-8]
  137728:	e1a030a3 	lsr	r3, r3, #1
  13772c:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  137730:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137734:	e1a030a3 	lsr	r3, r3, #1
  137738:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  13773c:	e51b3010 	ldr	r3, [fp, #-16]
  137740:	e2833001 	add	r3, r3, #1
  137744:	e50b3010 	str	r3, [fp, #-16]
  137748:	e51b3010 	ldr	r3, [fp, #-16]
  13774c:	e3530007 	cmp	r3, #7
  137750:	9affffe1 	bls	1376dc <ENET_AddMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137754:	e51b300c 	ldr	r3, [fp, #-12]
  137758:	e2833001 	add	r3, r3, #1
  13775c:	e50b300c 	str	r3, [fp, #-12]
  137760:	e51b300c 	ldr	r3, [fp, #-12]
  137764:	e3530005 	cmp	r3, #5
  137768:	9affffd3 	bls	1376bc <ENET_AddMulticastGroup+0x5c>
            }
        }
    }

    /* Enable a multicast group address. */
    if (!((crc >> 0x1FU) & 1U))
  13776c:	e51b3008 	ldr	r3, [fp, #-8]
  137770:	e3530000 	cmp	r3, #0
  137774:	ba00000a 	blt	1377a4 <ENET_AddMulticastGroup+0x144>
    {
        base->GALR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  137778:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13777c:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  137780:	e51b3008 	ldr	r3, [fp, #-8]
  137784:	e1a03d23 	lsr	r3, r3, #26
  137788:	e203301f 	and	r3, r3, #31
  13778c:	e3a01001 	mov	r1, #1
  137790:	e1a03311 	lsl	r3, r1, r3
  137794:	e1822003 	orr	r2, r2, r3
  137798:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13779c:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
    }
}
  1377a0:	ea000009 	b	1377cc <ENET_AddMulticastGroup+0x16c>
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  1377a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1377a8:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  1377ac:	e51b3008 	ldr	r3, [fp, #-8]
  1377b0:	e1a03d23 	lsr	r3, r3, #26
  1377b4:	e203301f 	and	r3, r3, #31
  1377b8:	e3a01001 	mov	r1, #1
  1377bc:	e1a03311 	lsl	r3, r1, r3
  1377c0:	e1822003 	orr	r2, r2, r3
  1377c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1377c8:	e5832120 	str	r2, [r3, #288]	; 0x120
}
  1377cc:	e320f000 	nop	{0}
  1377d0:	e24bd004 	sub	sp, fp, #4
  1377d4:	e8bd8800 	pop	{fp, pc}

001377d8 <ENET_LeaveMulticastGroup>:

void ENET_LeaveMulticastGroup(ENET_Type *base, uint8_t *address)
{
  1377d8:	e92d4800 	push	{fp, lr}
  1377dc:	e28db004 	add	fp, sp, #4
  1377e0:	e24dd018 	sub	sp, sp, #24
  1377e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1377e8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  1377ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1377f0:	e3530000 	cmp	r3, #0
  1377f4:	1a000005 	bne	137810 <ENET_LeaveMulticastGroup+0x38>
  1377f8:	e300239b 	movw	r2, #923	; 0x39b
  1377fc:	e30a1334 	movw	r1, #41780	; 0xa334
  137800:	e3401014 	movt	r1, #20
  137804:	e30a021c 	movw	r0, #41500	; 0xa21c
  137808:	e3400014 	movt	r0, #20
  13780c:	ebff2f61 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  137810:	e3e03000 	mvn	r3, #0
  137814:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  137818:	e3a03000 	mov	r3, #0
  13781c:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  137820:	e3a03000 	mov	r3, #0
  137824:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137828:	e3a03000 	mov	r3, #0
  13782c:	e50b300c 	str	r3, [fp, #-12]
  137830:	ea000028 	b	1378d8 <ENET_LeaveMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  137834:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  137838:	e51b300c 	ldr	r3, [fp, #-12]
  13783c:	e0823003 	add	r3, r2, r3
  137840:	e5d33000 	ldrb	r3, [r3]
  137844:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  137848:	e3a03000 	mov	r3, #0
  13784c:	e50b3010 	str	r3, [fp, #-16]
  137850:	ea00001a 	b	1378c0 <ENET_LeaveMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  137854:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  137858:	e51b3008 	ldr	r3, [fp, #-8]
  13785c:	e0233002 	eor	r3, r3, r2
  137860:	e2033001 	and	r3, r3, #1
  137864:	e3530000 	cmp	r3, #0
  137868:	0a00000b 	beq	13789c <ENET_LeaveMulticastGroup+0xc4>
            {
                crc >>= 1U;
  13786c:	e51b3008 	ldr	r3, [fp, #-8]
  137870:	e1a030a3 	lsr	r3, r3, #1
  137874:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  137878:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  13787c:	e1a030a3 	lsr	r3, r3, #1
  137880:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  137884:	e51b2008 	ldr	r2, [fp, #-8]
  137888:	e3083320 	movw	r3, #33568	; 0x8320
  13788c:	e34e3db8 	movt	r3, #60856	; 0xedb8
  137890:	e0233002 	eor	r3, r3, r2
  137894:	e50b3008 	str	r3, [fp, #-8]
  137898:	ea000005 	b	1378b4 <ENET_LeaveMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  13789c:	e51b3008 	ldr	r3, [fp, #-8]
  1378a0:	e1a030a3 	lsr	r3, r3, #1
  1378a4:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  1378a8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1378ac:	e1a030a3 	lsr	r3, r3, #1
  1378b0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  1378b4:	e51b3010 	ldr	r3, [fp, #-16]
  1378b8:	e2833001 	add	r3, r3, #1
  1378bc:	e50b3010 	str	r3, [fp, #-16]
  1378c0:	e51b3010 	ldr	r3, [fp, #-16]
  1378c4:	e3530007 	cmp	r3, #7
  1378c8:	9affffe1 	bls	137854 <ENET_LeaveMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  1378cc:	e51b300c 	ldr	r3, [fp, #-12]
  1378d0:	e2833001 	add	r3, r3, #1
  1378d4:	e50b300c 	str	r3, [fp, #-12]
  1378d8:	e51b300c 	ldr	r3, [fp, #-12]
  1378dc:	e3530005 	cmp	r3, #5
  1378e0:	9affffd3 	bls	137834 <ENET_LeaveMulticastGroup+0x5c>
            }
        }
    }

    /* Set the hash table. */
    if (!((crc >> 0x1FU) & 1U))
  1378e4:	e51b3008 	ldr	r3, [fp, #-8]
  1378e8:	e3530000 	cmp	r3, #0
  1378ec:	ba00000b 	blt	137920 <ENET_LeaveMulticastGroup+0x148>
    {
        base->GALR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  1378f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1378f4:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  1378f8:	e51b3008 	ldr	r3, [fp, #-8]
  1378fc:	e1a03d23 	lsr	r3, r3, #26
  137900:	e203301f 	and	r3, r3, #31
  137904:	e3a01001 	mov	r1, #1
  137908:	e1a03311 	lsl	r3, r1, r3
  13790c:	e1e03003 	mvn	r3, r3
  137910:	e0022003 	and	r2, r2, r3
  137914:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137918:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
    }
}
  13791c:	ea00000a 	b	13794c <ENET_LeaveMulticastGroup+0x174>
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  137920:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137924:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  137928:	e51b3008 	ldr	r3, [fp, #-8]
  13792c:	e1a03d23 	lsr	r3, r3, #26
  137930:	e203301f 	and	r3, r3, #31
  137934:	e3a01001 	mov	r1, #1
  137938:	e1a03311 	lsl	r3, r1, r3
  13793c:	e1e03003 	mvn	r3, r3
  137940:	e0022003 	and	r2, r2, r3
  137944:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137948:	e5832120 	str	r2, [r3, #288]	; 0x120
}
  13794c:	e320f000 	nop	{0}
  137950:	e24bd004 	sub	sp, fp, #4
  137954:	e8bd8800 	pop	{fp, pc}

00137958 <ENET_TransmitIRQHandler>:
void tx_enet_callback(void *base);
void ENET_TransmitIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  137958:	e92d4800 	push	{fp, lr}
  13795c:	e28db004 	add	fp, sp, #4
  137960:	e24dd008 	sub	sp, sp, #8
  137964:	e50b0008 	str	r0, [fp, #-8]
  137968:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  13796c:	e51b300c 	ldr	r3, [fp, #-12]
  137970:	e3530000 	cmp	r3, #0
  137974:	1a000005 	bne	137990 <ENET_TransmitIRQHandler+0x38>
  137978:	e30023c2 	movw	r2, #962	; 0x3c2
  13797c:	e30a1350 	movw	r1, #41808	; 0xa350
  137980:	e3401014 	movt	r1, #20
  137984:	e3090ee0 	movw	r0, #40672	; 0x9ee0
  137988:	e3400014 	movt	r0, #20
  13798c:	ebff2f01 	bl	103598 <rt_assert_handler>
    /* Check if the transmit interrupt happen. */
    if((kENET_TxBufferInterrupt | kENET_TxFrameInterrupt) & base->EIR)
  137990:	e51b3008 	ldr	r3, [fp, #-8]
  137994:	e5933004 	ldr	r3, [r3, #4]
  137998:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  13799c:	e3530000 	cmp	r3, #0
  1379a0:	0a000002 	beq	1379b0 <ENET_TransmitIRQHandler+0x58>
    {
        /* Clear the transmit interrupt event. */
        base->EIR = kENET_TxFrameInterrupt | kENET_TxBufferInterrupt;
  1379a4:	e51b3008 	ldr	r3, [fp, #-8]
  1379a8:	e3a02303 	mov	r2, #201326592	; 0xc000000
  1379ac:	e5832004 	str	r2, [r3, #4]
    }
    tx_enet_callback((void *)base);
  1379b0:	e51b0008 	ldr	r0, [fp, #-8]
  1379b4:	ebfff6e5 	bl	135550 <tx_enet_callback>
}
  1379b8:	e320f000 	nop	{0}
  1379bc:	e24bd004 	sub	sp, fp, #4
  1379c0:	e8bd8800 	pop	{fp, pc}

001379c4 <ENET_ReceiveIRQHandler>:
void rx_enet_callback(void *base);
void ENET_ReceiveIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  1379c4:	e92d4800 	push	{fp, lr}
  1379c8:	e28db004 	add	fp, sp, #4
  1379cc:	e24dd008 	sub	sp, sp, #8
  1379d0:	e50b0008 	str	r0, [fp, #-8]
  1379d4:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  1379d8:	e51b300c 	ldr	r3, [fp, #-12]
  1379dc:	e3530000 	cmp	r3, #0
  1379e0:	1a000005 	bne	1379fc <ENET_ReceiveIRQHandler+0x38>
  1379e4:	e30023ce 	movw	r2, #974	; 0x3ce
  1379e8:	e30a1368 	movw	r1, #41832	; 0xa368
  1379ec:	e3401014 	movt	r1, #20
  1379f0:	e3090ee0 	movw	r0, #40672	; 0x9ee0
  1379f4:	e3400014 	movt	r0, #20
  1379f8:	ebff2ee6 	bl	103598 <rt_assert_handler>

    /* Check if the receive interrupt happen. */
    if((kENET_RxBufferInterrupt | kENET_RxFrameInterrupt) & base->EIR)
  1379fc:	e51b3008 	ldr	r3, [fp, #-8]
  137a00:	e5933004 	ldr	r3, [r3, #4]
  137a04:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137a08:	e3530000 	cmp	r3, #0
  137a0c:	0a000004 	beq	137a24 <ENET_ReceiveIRQHandler+0x60>
    {
        /* Clear the transmit interrupt event. */
        base->EIR = kENET_RxFrameInterrupt | kENET_RxBufferInterrupt;
  137a10:	e51b3008 	ldr	r3, [fp, #-8]
  137a14:	e3a02403 	mov	r2, #50331648	; 0x3000000
  137a18:	e5832004 	str	r2, [r3, #4]
        rx_enet_callback((void *)base);
  137a1c:	e51b0008 	ldr	r0, [fp, #-8]
  137a20:	ebfff6a7 	bl	1354c4 <rx_enet_callback>
    }
}
  137a24:	e320f000 	nop	{0}
  137a28:	e24bd004 	sub	sp, fp, #4
  137a2c:	e8bd8800 	pop	{fp, pc}

00137a30 <ENET_ErrorIRQHandler>:
void ENET_ErrorIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  137a30:	e92d4810 	push	{r4, fp, lr}
  137a34:	e28db008 	add	fp, sp, #8
  137a38:	e24dd014 	sub	sp, sp, #20
  137a3c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137a40:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(handle);
  137a44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137a48:	e3530000 	cmp	r3, #0
  137a4c:	1a000005 	bne	137a68 <ENET_ErrorIRQHandler+0x38>
  137a50:	e30023da 	movw	r2, #986	; 0x3da
  137a54:	e30a1380 	movw	r1, #41856	; 0xa380
  137a58:	e3401014 	movt	r1, #20
  137a5c:	e3090ee0 	movw	r0, #40672	; 0x9ee0
  137a60:	e3400014 	movt	r0, #20
  137a64:	ebff2ecb 	bl	103598 <rt_assert_handler>

    uint32_t errMask = kENET_BabrInterrupt | kENET_BabtInterrupt | kENET_EBusERInterrupt | kENET_PayloadRxInterrupt |
  137a68:	e3a03000 	mov	r3, #0
  137a6c:	e346307c 	movt	r3, #24700	; 0x607c
  137a70:	e50b3010 	str	r3, [fp, #-16]
                       kENET_LateCollisionInterrupt | kENET_RetryLimitInterrupt | kENET_UnderrunInterrupt;
    /* Check if the error interrupt happen. */
    if (kENET_WakeupInterrupt & base->EIR)
  137a74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137a78:	e5933004 	ldr	r3, [r3, #4]
  137a7c:	e2033802 	and	r3, r3, #131072	; 0x20000
  137a80:	e3530000 	cmp	r3, #0
  137a84:	0a000012 	beq	137ad4 <ENET_ErrorIRQHandler+0xa4>
    {
        /* Clear the wakeup interrupt. */
        base->EIR = kENET_WakeupInterrupt;
  137a88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137a8c:	e3a02802 	mov	r2, #131072	; 0x20000
  137a90:	e5832004 	str	r2, [r3, #4]
        /* wake up and enter the normal mode. */
        ENET_EnableSleepMode(base, false);
  137a94:	e3a01000 	mov	r1, #0
  137a98:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137a9c:	ebfff879 	bl	135c88 <ENET_EnableSleepMode>
        /* Callback function. */
        if (handle->callback)
  137aa0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137aa4:	e5933018 	ldr	r3, [r3, #24]
  137aa8:	e3530000 	cmp	r3, #0
  137aac:	0a00001c 	beq	137b24 <ENET_ErrorIRQHandler+0xf4>
        {
            handle->callback(base, handle, kENET_WakeUpEvent, handle->userData);
  137ab0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137ab4:	e5934018 	ldr	r4, [r3, #24]
  137ab8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137abc:	e593301c 	ldr	r3, [r3, #28]
  137ac0:	e3a02003 	mov	r2, #3
  137ac4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137ac8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137acc:	e12fff34 	blx	r4
        if (handle->callback)
        {
            handle->callback(base, handle, kENET_ErrEvent, handle->userData);
        }
    }
}
  137ad0:	ea000013 	b	137b24 <ENET_ErrorIRQHandler+0xf4>
        errMask &= base->EIR;
  137ad4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137ad8:	e5933004 	ldr	r3, [r3, #4]
  137adc:	e51b2010 	ldr	r2, [fp, #-16]
  137ae0:	e0033002 	and	r3, r3, r2
  137ae4:	e50b3010 	str	r3, [fp, #-16]
        base->EIR = errMask;
  137ae8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137aec:	e51b2010 	ldr	r2, [fp, #-16]
  137af0:	e5832004 	str	r2, [r3, #4]
        if (handle->callback)
  137af4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137af8:	e5933018 	ldr	r3, [r3, #24]
  137afc:	e3530000 	cmp	r3, #0
  137b00:	0a000007 	beq	137b24 <ENET_ErrorIRQHandler+0xf4>
            handle->callback(base, handle, kENET_ErrEvent, handle->userData);
  137b04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137b08:	e5934018 	ldr	r4, [r3, #24]
  137b0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137b10:	e593301c 	ldr	r3, [r3, #28]
  137b14:	e3a02002 	mov	r2, #2
  137b18:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137b1c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137b20:	e12fff34 	blx	r4
}
  137b24:	e320f000 	nop	{0}
  137b28:	e24bd008 	sub	sp, fp, #8
  137b2c:	e8bd8810 	pop	{r4, fp, pc}

00137b30 <ENET_CommonFrame0IRQHandler>:

void ENET_CommonFrame0IRQHandler(ENET_Type *base)
{
  137b30:	e92d4800 	push	{fp, lr}
  137b34:	e28db004 	add	fp, sp, #4
  137b38:	e24dd010 	sub	sp, sp, #16
  137b3c:	e50b0010 	str	r0, [fp, #-16]
    uint32_t event = base->EIR;
  137b40:	e51b3010 	ldr	r3, [fp, #-16]
  137b44:	e5933004 	ldr	r3, [r3, #4]
  137b48:	e50b3008 	str	r3, [fp, #-8]
    uint32_t instance = get_instance_by_base(base);
  137b4c:	e51b0010 	ldr	r0, [fp, #-16]
  137b50:	ebfff633 	bl	135424 <get_instance_by_base>
  137b54:	e1a03000 	mov	r3, r0
  137b58:	e50b300c 	str	r3, [fp, #-12]

    if(base->EIMR & ENET_TX_INTERRUPT)
  137b5c:	e51b3010 	ldr	r3, [fp, #-16]
  137b60:	e5933008 	ldr	r3, [r3, #8]
  137b64:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  137b68:	e3530000 	cmp	r3, #0
  137b6c:	0a000012 	beq	137bbc <ENET_CommonFrame0IRQHandler+0x8c>
    {
        if (event & ENET_TX_INTERRUPT)
  137b70:	e51b3008 	ldr	r3, [fp, #-8]
  137b74:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  137b78:	e3530000 	cmp	r3, #0
  137b7c:	0a00000e 	beq	137bbc <ENET_CommonFrame0IRQHandler+0x8c>
        {
            if(s_enetTxIsr)
  137b80:	e30e3c24 	movw	r3, #60452	; 0xec24
  137b84:	e3403014 	movt	r3, #20
  137b88:	e5933000 	ldr	r3, [r3]
  137b8c:	e3530000 	cmp	r3, #0
  137b90:	0a000009 	beq	137bbc <ENET_CommonFrame0IRQHandler+0x8c>
            {
                s_enetTxIsr(base, s_ENETHandle[instance]);
  137b94:	e30e3c24 	movw	r3, #60452	; 0xec24
  137b98:	e3403014 	movt	r3, #20
  137b9c:	e5932000 	ldr	r2, [r3]
  137ba0:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  137ba4:	e3403014 	movt	r3, #20
  137ba8:	e51b100c 	ldr	r1, [fp, #-12]
  137bac:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137bb0:	e1a01003 	mov	r1, r3
  137bb4:	e51b0010 	ldr	r0, [fp, #-16]
  137bb8:	e12fff32 	blx	r2
            }
        }
    }
    if (base->EIMR & ENET_RX_INTERRUPT)
  137bbc:	e51b3010 	ldr	r3, [fp, #-16]
  137bc0:	e5933008 	ldr	r3, [r3, #8]
  137bc4:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137bc8:	e3530000 	cmp	r3, #0
  137bcc:	0a000012 	beq	137c1c <ENET_CommonFrame0IRQHandler+0xec>
    {
        if (event & ENET_RX_INTERRUPT)
  137bd0:	e51b3008 	ldr	r3, [fp, #-8]
  137bd4:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137bd8:	e3530000 	cmp	r3, #0
  137bdc:	0a00000e 	beq	137c1c <ENET_CommonFrame0IRQHandler+0xec>
        {
            if(s_enetRxIsr)
  137be0:	e30e3c28 	movw	r3, #60456	; 0xec28
  137be4:	e3403014 	movt	r3, #20
  137be8:	e5933000 	ldr	r3, [r3]
  137bec:	e3530000 	cmp	r3, #0
  137bf0:	0a000009 	beq	137c1c <ENET_CommonFrame0IRQHandler+0xec>
            {
                s_enetRxIsr(base, s_ENETHandle[instance]);
  137bf4:	e30e3c28 	movw	r3, #60456	; 0xec28
  137bf8:	e3403014 	movt	r3, #20
  137bfc:	e5932000 	ldr	r2, [r3]
  137c00:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  137c04:	e3403014 	movt	r3, #20
  137c08:	e51b100c 	ldr	r1, [fp, #-12]
  137c0c:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137c10:	e1a01003 	mov	r1, r3
  137c14:	e51b0010 	ldr	r0, [fp, #-16]
  137c18:	e12fff32 	blx	r2
            }
        }
    }
    if(base->EIMR & ENET_TS_INTERRUPT)
  137c1c:	e51b3010 	ldr	r3, [fp, #-16]
  137c20:	e5933008 	ldr	r3, [r3, #8]
  137c24:	e2033906 	and	r3, r3, #98304	; 0x18000
  137c28:	e3530000 	cmp	r3, #0
  137c2c:	0a000012 	beq	137c7c <ENET_CommonFrame0IRQHandler+0x14c>
    {
        if (event & ENET_TS_INTERRUPT)
  137c30:	e51b3008 	ldr	r3, [fp, #-8]
  137c34:	e2033906 	and	r3, r3, #98304	; 0x18000
  137c38:	e3530000 	cmp	r3, #0
  137c3c:	0a00000e 	beq	137c7c <ENET_CommonFrame0IRQHandler+0x14c>
        {
            if(s_enetTsIsr)
  137c40:	e30e3c30 	movw	r3, #60464	; 0xec30
  137c44:	e3403014 	movt	r3, #20
  137c48:	e5933000 	ldr	r3, [r3]
  137c4c:	e3530000 	cmp	r3, #0
  137c50:	0a000009 	beq	137c7c <ENET_CommonFrame0IRQHandler+0x14c>
            {
                s_enetTsIsr(base, s_ENETHandle[instance]);
  137c54:	e30e3c30 	movw	r3, #60464	; 0xec30
  137c58:	e3403014 	movt	r3, #20
  137c5c:	e5932000 	ldr	r2, [r3]
  137c60:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  137c64:	e3403014 	movt	r3, #20
  137c68:	e51b100c 	ldr	r1, [fp, #-12]
  137c6c:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137c70:	e1a01003 	mov	r1, r3
  137c74:	e51b0010 	ldr	r0, [fp, #-16]
  137c78:	e12fff32 	blx	r2
            }
        }
    }
    if(base->EIMR & ENET_ERR_INTERRUPT)
  137c7c:	e51b3010 	ldr	r3, [fp, #-16]
  137c80:	e5932008 	ldr	r2, [r3, #8]
  137c84:	e3a03000 	mov	r3, #0
  137c88:	e346307c 	movt	r3, #24700	; 0x607c
  137c8c:	e0033002 	and	r3, r3, r2
  137c90:	e3530000 	cmp	r3, #0
  137c94:	0a000014 	beq	137cec <ENET_CommonFrame0IRQHandler+0x1bc>
    {
        if (event & ENET_ERR_INTERRUPT)
  137c98:	e51b2008 	ldr	r2, [fp, #-8]
  137c9c:	e3a03000 	mov	r3, #0
  137ca0:	e346307c 	movt	r3, #24700	; 0x607c
  137ca4:	e0033002 	and	r3, r3, r2
  137ca8:	e3530000 	cmp	r3, #0
  137cac:	0a00000e 	beq	137cec <ENET_CommonFrame0IRQHandler+0x1bc>
        {
            if(s_enetErrIsr)
  137cb0:	e30e3c2c 	movw	r3, #60460	; 0xec2c
  137cb4:	e3403014 	movt	r3, #20
  137cb8:	e5933000 	ldr	r3, [r3]
  137cbc:	e3530000 	cmp	r3, #0
  137cc0:	0a000009 	beq	137cec <ENET_CommonFrame0IRQHandler+0x1bc>
            {
                s_enetErrIsr(base, s_ENETHandle[instance]);
  137cc4:	e30e3c2c 	movw	r3, #60460	; 0xec2c
  137cc8:	e3403014 	movt	r3, #20
  137ccc:	e5932000 	ldr	r2, [r3]
  137cd0:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  137cd4:	e3403014 	movt	r3, #20
  137cd8:	e51b100c 	ldr	r1, [fp, #-12]
  137cdc:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137ce0:	e1a01003 	mov	r1, r3
  137ce4:	e51b0010 	ldr	r0, [fp, #-16]
  137ce8:	e12fff32 	blx	r2
            }
        }
    }
}
  137cec:	e320f000 	nop	{0}
  137cf0:	e24bd004 	sub	sp, fp, #4
  137cf4:	e8bd8800 	pop	{fp, pc}

00137cf8 <ENET_DriverIRQHandler>:
void ENET_DriverIRQHandler(int irq, void *base)
{
  137cf8:	e92d4800 	push	{fp, lr}
  137cfc:	e28db004 	add	fp, sp, #4
  137d00:	e24dd008 	sub	sp, sp, #8
  137d04:	e50b0008 	str	r0, [fp, #-8]
  137d08:	e50b100c 	str	r1, [fp, #-12]
    ENET_CommonFrame0IRQHandler((ENET_Type *)base);
  137d0c:	e51b000c 	ldr	r0, [fp, #-12]
  137d10:	ebffff86 	bl	137b30 <ENET_CommonFrame0IRQHandler>
  137d14:	e320f000 	nop	{0}
  137d18:	e24bd004 	sub	sp, fp, #4
  137d1c:	e8bd8800 	pop	{fp, pc}

00137d20 <GPIO_PinInit>:

//     return instance;
// }

void GPIO_PinInit(GPIO_Type* base, uint32_t pin, const gpio_pin_config_t* Config)
{
  137d20:	e92d4800 	push	{fp, lr}
  137d24:	e28db004 	add	fp, sp, #4
  137d28:	e24dd010 	sub	sp, sp, #16
  137d2c:	e50b0008 	str	r0, [fp, #-8]
  137d30:	e50b100c 	str	r1, [fp, #-12]
  137d34:	e50b2010 	str	r2, [fp, #-16]
//     /* Enable GPIO clock. */
//     CLOCK_EnableClock(s_gpioClock[GPIO_GetInstance(base)]);
// #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */

    /* Register reset to default value */
    base->IMR &= ~(1U << pin);
  137d38:	e51b3008 	ldr	r3, [fp, #-8]
  137d3c:	e5932014 	ldr	r2, [r3, #20]
  137d40:	e3a01001 	mov	r1, #1
  137d44:	e51b300c 	ldr	r3, [fp, #-12]
  137d48:	e1a03311 	lsl	r3, r1, r3
  137d4c:	e1e03003 	mvn	r3, r3
  137d50:	e0022003 	and	r2, r2, r3
  137d54:	e51b3008 	ldr	r3, [fp, #-8]
  137d58:	e5832014 	str	r2, [r3, #20]

    /* Configure GPIO pin direction */
    if (Config->direction == kGPIO_DigitalInput)
  137d5c:	e51b3010 	ldr	r3, [fp, #-16]
  137d60:	e5933000 	ldr	r3, [r3]
  137d64:	e3530000 	cmp	r3, #0
  137d68:	1a000009 	bne	137d94 <GPIO_PinInit+0x74>
    {
        base->GDIR &= ~(1U << pin);
  137d6c:	e51b3008 	ldr	r3, [fp, #-8]
  137d70:	e5932004 	ldr	r2, [r3, #4]
  137d74:	e3a01001 	mov	r1, #1
  137d78:	e51b300c 	ldr	r3, [fp, #-12]
  137d7c:	e1a03311 	lsl	r3, r1, r3
  137d80:	e1e03003 	mvn	r3, r3
  137d84:	e0022003 	and	r2, r2, r3
  137d88:	e51b3008 	ldr	r3, [fp, #-8]
  137d8c:	e5832004 	str	r2, [r3, #4]
  137d90:	ea00000d 	b	137dcc <GPIO_PinInit+0xac>
    }
    else
    {
        GPIO_WritePinOutput(base, pin, Config->outputLogic);
  137d94:	e51b3010 	ldr	r3, [fp, #-16]
  137d98:	e5d33004 	ldrb	r3, [r3, #4]
  137d9c:	e1a02003 	mov	r2, r3
  137da0:	e51b100c 	ldr	r1, [fp, #-12]
  137da4:	e51b0008 	ldr	r0, [fp, #-8]
  137da8:	eb000010 	bl	137df0 <GPIO_WritePinOutput>
        base->GDIR |= (1U << pin);
  137dac:	e51b3008 	ldr	r3, [fp, #-8]
  137db0:	e5932004 	ldr	r2, [r3, #4]
  137db4:	e3a01001 	mov	r1, #1
  137db8:	e51b300c 	ldr	r3, [fp, #-12]
  137dbc:	e1a03311 	lsl	r3, r1, r3
  137dc0:	e1822003 	orr	r2, r2, r3
  137dc4:	e51b3008 	ldr	r3, [fp, #-8]
  137dc8:	e5832004 	str	r2, [r3, #4]
    }

    /* Configure GPIO pin interrupt mode */
    GPIO_SetPinInterruptConfig(base, pin, Config->interruptMode);
  137dcc:	e51b3010 	ldr	r3, [fp, #-16]
  137dd0:	e5933008 	ldr	r3, [r3, #8]
  137dd4:	e1a02003 	mov	r2, r3
  137dd8:	e51b100c 	ldr	r1, [fp, #-12]
  137ddc:	e51b0008 	ldr	r0, [fp, #-8]
  137de0:	eb00002c 	bl	137e98 <GPIO_SetPinInterruptConfig>
}
  137de4:	e320f000 	nop	{0}
  137de8:	e24bd004 	sub	sp, fp, #4
  137dec:	e8bd8800 	pop	{fp, pc}

00137df0 <GPIO_WritePinOutput>:

void GPIO_WritePinOutput(GPIO_Type* base, uint32_t pin, uint8_t output)
{
  137df0:	e92d4800 	push	{fp, lr}
  137df4:	e28db004 	add	fp, sp, #4
  137df8:	e24dd010 	sub	sp, sp, #16
  137dfc:	e50b0008 	str	r0, [fp, #-8]
  137e00:	e50b100c 	str	r1, [fp, #-12]
  137e04:	e1a03002 	mov	r3, r2
  137e08:	e54b300d 	strb	r3, [fp, #-13]
    assert(pin < 32);
  137e0c:	e51b300c 	ldr	r3, [fp, #-12]
  137e10:	e353001f 	cmp	r3, #31
  137e14:	9a000007 	bls	137e38 <GPIO_WritePinOutput+0x48>
  137e18:	e30a33d0 	movw	r3, #41936	; 0xa3d0
  137e1c:	e3403014 	movt	r3, #20
  137e20:	e3a0206a 	mov	r2, #106	; 0x6a
  137e24:	e30a1398 	movw	r1, #41880	; 0xa398
  137e28:	e3401014 	movt	r1, #20
  137e2c:	e30a03c4 	movw	r0, #41924	; 0xa3c4
  137e30:	e3400014 	movt	r0, #20
  137e34:	eb000445 	bl	138f50 <__assert_fail>
    if (output == 0U)
  137e38:	e55b300d 	ldrb	r3, [fp, #-13]
  137e3c:	e3530000 	cmp	r3, #0
  137e40:	1a000009 	bne	137e6c <GPIO_WritePinOutput+0x7c>
    {
        base->DR &= ~(1U << pin);  /* Set pin output to low level.*/
  137e44:	e51b3008 	ldr	r3, [fp, #-8]
  137e48:	e5932000 	ldr	r2, [r3]
  137e4c:	e3a01001 	mov	r1, #1
  137e50:	e51b300c 	ldr	r3, [fp, #-12]
  137e54:	e1a03311 	lsl	r3, r1, r3
  137e58:	e1e03003 	mvn	r3, r3
  137e5c:	e0022003 	and	r2, r2, r3
  137e60:	e51b3008 	ldr	r3, [fp, #-8]
  137e64:	e5832000 	str	r2, [r3]
    }
    else
    {
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
    }
}
  137e68:	ea000007 	b	137e8c <GPIO_WritePinOutput+0x9c>
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
  137e6c:	e51b3008 	ldr	r3, [fp, #-8]
  137e70:	e5932000 	ldr	r2, [r3]
  137e74:	e3a01001 	mov	r1, #1
  137e78:	e51b300c 	ldr	r3, [fp, #-12]
  137e7c:	e1a03311 	lsl	r3, r1, r3
  137e80:	e1822003 	orr	r2, r2, r3
  137e84:	e51b3008 	ldr	r3, [fp, #-8]
  137e88:	e5832000 	str	r2, [r3]
}
  137e8c:	e320f000 	nop	{0}
  137e90:	e24bd004 	sub	sp, fp, #4
  137e94:	e8bd8800 	pop	{fp, pc}

00137e98 <GPIO_SetPinInterruptConfig>:

void GPIO_SetPinInterruptConfig(GPIO_Type* base, uint32_t pin, gpio_interrupt_mode_t pinInterruptMode)
{
  137e98:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137e9c:	e28db000 	add	fp, sp, #0
  137ea0:	e24dd01c 	sub	sp, sp, #28
  137ea4:	e50b0010 	str	r0, [fp, #-16]
  137ea8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137eac:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    volatile uint32_t *icr;
    uint32_t icrShift;

    icrShift = pin;
  137eb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137eb4:	e50b300c 	str	r3, [fp, #-12]

    /* Register reset to default value */
    base->EDGE_SEL &= ~(1U << pin);
  137eb8:	e51b3010 	ldr	r3, [fp, #-16]
  137ebc:	e593201c 	ldr	r2, [r3, #28]
  137ec0:	e3a01001 	mov	r1, #1
  137ec4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137ec8:	e1a03311 	lsl	r3, r1, r3
  137ecc:	e1e03003 	mvn	r3, r3
  137ed0:	e0022003 	and	r2, r2, r3
  137ed4:	e51b3010 	ldr	r3, [fp, #-16]
  137ed8:	e583201c 	str	r2, [r3, #28]

    if(pin < 16)
  137edc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137ee0:	e353000f 	cmp	r3, #15
  137ee4:	8a000003 	bhi	137ef8 <GPIO_SetPinInterruptConfig+0x60>
    {
        icr = &(base->ICR1);
  137ee8:	e51b3010 	ldr	r3, [fp, #-16]
  137eec:	e283300c 	add	r3, r3, #12
  137ef0:	e50b3008 	str	r3, [fp, #-8]
  137ef4:	ea000005 	b	137f10 <GPIO_SetPinInterruptConfig+0x78>
    }
    else
    {
        icr = &(base->ICR2);
  137ef8:	e51b3010 	ldr	r3, [fp, #-16]
  137efc:	e2833010 	add	r3, r3, #16
  137f00:	e50b3008 	str	r3, [fp, #-8]
        icrShift -= 16;
  137f04:	e51b300c 	ldr	r3, [fp, #-12]
  137f08:	e2433010 	sub	r3, r3, #16
  137f0c:	e50b300c 	str	r3, [fp, #-12]
    }
    switch(pinInterruptMode)
  137f10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137f14:	e2433001 	sub	r3, r3, #1
  137f18:	e3530004 	cmp	r3, #4
  137f1c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  137f20:	ea000042 	b	138030 <GPIO_SetPinInterruptConfig+0x198>
  137f24:	00137f38 	.word	0x00137f38
  137f28:	00137f64 	.word	0x00137f64
  137f2c:	00137fa4 	.word	0x00137fa4
  137f30:	00137fe4 	.word	0x00137fe4
  137f34:	0013800c 	.word	0x0013800c
    {
        case(kGPIO_IntLowLevel):
            *icr &= ~(3U << (2 * icrShift));
  137f38:	e51b3008 	ldr	r3, [fp, #-8]
  137f3c:	e5932000 	ldr	r2, [r3]
  137f40:	e51b300c 	ldr	r3, [fp, #-12]
  137f44:	e1a03083 	lsl	r3, r3, #1
  137f48:	e3a01003 	mov	r1, #3
  137f4c:	e1a03311 	lsl	r3, r1, r3
  137f50:	e1e03003 	mvn	r3, r3
  137f54:	e0022003 	and	r2, r2, r3
  137f58:	e51b3008 	ldr	r3, [fp, #-8]
  137f5c:	e5832000 	str	r2, [r3]
            break;
  137f60:	ea000033 	b	138034 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntHighLevel):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (1U << (2 * icrShift));
  137f64:	e51b3008 	ldr	r3, [fp, #-8]
  137f68:	e5932000 	ldr	r2, [r3]
  137f6c:	e51b300c 	ldr	r3, [fp, #-12]
  137f70:	e1a03083 	lsl	r3, r3, #1
  137f74:	e3a01003 	mov	r1, #3
  137f78:	e1a03311 	lsl	r3, r1, r3
  137f7c:	e1e03003 	mvn	r3, r3
  137f80:	e0022003 	and	r2, r2, r3
  137f84:	e51b300c 	ldr	r3, [fp, #-12]
  137f88:	e1a03083 	lsl	r3, r3, #1
  137f8c:	e3a01001 	mov	r1, #1
  137f90:	e1a03311 	lsl	r3, r1, r3
  137f94:	e1822003 	orr	r2, r2, r3
  137f98:	e51b3008 	ldr	r3, [fp, #-8]
  137f9c:	e5832000 	str	r2, [r3]
            break;
  137fa0:	ea000023 	b	138034 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingEdge):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (2U << (2 * icrShift));
  137fa4:	e51b3008 	ldr	r3, [fp, #-8]
  137fa8:	e5932000 	ldr	r2, [r3]
  137fac:	e51b300c 	ldr	r3, [fp, #-12]
  137fb0:	e1a03083 	lsl	r3, r3, #1
  137fb4:	e3a01003 	mov	r1, #3
  137fb8:	e1a03311 	lsl	r3, r1, r3
  137fbc:	e1e03003 	mvn	r3, r3
  137fc0:	e0022003 	and	r2, r2, r3
  137fc4:	e51b300c 	ldr	r3, [fp, #-12]
  137fc8:	e1a03083 	lsl	r3, r3, #1
  137fcc:	e3a01002 	mov	r1, #2
  137fd0:	e1a03311 	lsl	r3, r1, r3
  137fd4:	e1822003 	orr	r2, r2, r3
  137fd8:	e51b3008 	ldr	r3, [fp, #-8]
  137fdc:	e5832000 	str	r2, [r3]
            break;
  137fe0:	ea000013 	b	138034 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntFallingEdge):
            *icr |= (3U << (2 * icrShift));
  137fe4:	e51b3008 	ldr	r3, [fp, #-8]
  137fe8:	e5932000 	ldr	r2, [r3]
  137fec:	e51b300c 	ldr	r3, [fp, #-12]
  137ff0:	e1a03083 	lsl	r3, r3, #1
  137ff4:	e3a01003 	mov	r1, #3
  137ff8:	e1a03311 	lsl	r3, r1, r3
  137ffc:	e1822003 	orr	r2, r2, r3
  138000:	e51b3008 	ldr	r3, [fp, #-8]
  138004:	e5832000 	str	r2, [r3]
            break;
  138008:	ea000009 	b	138034 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingOrFallingEdge):
            base->EDGE_SEL |= (1U << pin);
  13800c:	e51b3010 	ldr	r3, [fp, #-16]
  138010:	e593201c 	ldr	r2, [r3, #28]
  138014:	e3a01001 	mov	r1, #1
  138018:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13801c:	e1a03311 	lsl	r3, r1, r3
  138020:	e1822003 	orr	r2, r2, r3
  138024:	e51b3010 	ldr	r3, [fp, #-16]
  138028:	e583201c 	str	r2, [r3, #28]
            break;
  13802c:	ea000000 	b	138034 <GPIO_SetPinInterruptConfig+0x19c>
        default:
            break;
  138030:	e320f000 	nop	{0}
    }
}
  138034:	e320f000 	nop	{0}
  138038:	e28bd000 	add	sp, fp, #0
  13803c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  138040:	e12fff1e 	bx	lr

00138044 <ENET_ReadSMIData>:
{
  138044:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  138048:	e28db000 	add	fp, sp, #0
  13804c:	e24dd00c 	sub	sp, sp, #12
  138050:	e50b0008 	str	r0, [fp, #-8]
    return (uint32_t)((base->MMFR & ENET_MMFR_DATA_MASK) >> ENET_MMFR_DATA_SHIFT);
  138054:	e51b3008 	ldr	r3, [fp, #-8]
  138058:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  13805c:	e6ff3073 	uxth	r3, r3
}
  138060:	e1a00003 	mov	r0, r3
  138064:	e28bd000 	add	sp, fp, #0
  138068:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  13806c:	e12fff1e 	bx	lr

00138070 <ENET_GetInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @return The event status of the interrupt source. This is the logical OR of members
 *         of the enumeration :: enet_interrupt_enable_t.
 */
static inline uint32_t ENET_GetInterruptStatus(ENET_Type *base)
{
  138070:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  138074:	e28db000 	add	fp, sp, #0
  138078:	e24dd00c 	sub	sp, sp, #12
  13807c:	e50b0008 	str	r0, [fp, #-8]
    return base->EIR;
  138080:	e51b3008 	ldr	r3, [fp, #-8]
  138084:	e5933004 	ldr	r3, [r3, #4]
}
  138088:	e1a00003 	mov	r0, r3
  13808c:	e28bd000 	add	sp, fp, #0
  138090:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  138094:	e12fff1e 	bx	lr

00138098 <ENET_ClearInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupt source to be cleared.
 * This is the logical OR of members of the enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_ClearInterruptStatus(ENET_Type *base, uint32_t mask)
{
  138098:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13809c:	e28db000 	add	fp, sp, #0
  1380a0:	e24dd00c 	sub	sp, sp, #12
  1380a4:	e50b0008 	str	r0, [fp, #-8]
  1380a8:	e50b100c 	str	r1, [fp, #-12]
    base->EIR = mask;
  1380ac:	e51b3008 	ldr	r3, [fp, #-8]
  1380b0:	e51b200c 	ldr	r2, [fp, #-12]
  1380b4:	e5832004 	str	r2, [r3, #4]
}
  1380b8:	e320f000 	nop	{0}
  1380bc:	e28bd000 	add	sp, fp, #0
  1380c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1380c4:	e12fff1e 	bx	lr

001380c8 <phy_reset>:

/*******************************************************************************
 * Code
 ******************************************************************************/
status_t phy_reset(GPIO_Type *base,uint32_t pin)
{
  1380c8:	e92d4800 	push	{fp, lr}
  1380cc:	e28db004 	add	fp, sp, #4
  1380d0:	e24dd018 	sub	sp, sp, #24
  1380d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1380d8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    GPIO_Type *gpio_base = NULL;
  1380dc:	e3a03000 	mov	r3, #0
  1380e0:	e50b3008 	str	r3, [fp, #-8]
    gpio_pin_config_t sw_config =
  1380e4:	e3a03001 	mov	r3, #1
  1380e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1380ec:	e3a03000 	mov	r3, #0
  1380f0:	e54b3010 	strb	r3, [fp, #-16]
  1380f4:	e3a03000 	mov	r3, #0
  1380f8:	e50b300c 	str	r3, [fp, #-12]
        0,
        kGPIO_NoIntmode,
    };

    // gpio_base = (GPIO_Type *)rt_ioremap((void *)base,0x1000);
    gpio_base = (GPIO_Type *)ueth_remap((void *)base, UETH_REMAP, 0x1000);
  1380fc:	e3a02a01 	mov	r2, #4096	; 0x1000
  138100:	e3a01001 	mov	r1, #1
  138104:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138108:	ebff30e9 	bl	1044b4 <ueth_remap>
  13810c:	e50b0008 	str	r0, [fp, #-8]
    GPIO_PinInit(gpio_base, pin, &sw_config);
  138110:	e24b3014 	sub	r3, fp, #20
  138114:	e1a02003 	mov	r2, r3
  138118:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13811c:	e51b0008 	ldr	r0, [fp, #-8]
  138120:	ebfffefe 	bl	137d20 <GPIO_PinInit>
    GPIO_WritePinOutput(gpio_base,pin,0);
  138124:	e3a02000 	mov	r2, #0
  138128:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13812c:	e51b0008 	ldr	r0, [fp, #-8]
  138130:	ebffff2e 	bl	137df0 <GPIO_WritePinOutput>
    rt_thread_mdelay(1);
  138134:	e3a00001 	mov	r0, #1
  138138:	ebff274f 	bl	101e7c <rt_thread_mdelay>
    GPIO_WritePinOutput(gpio_base,pin,1);
  13813c:	e3a02001 	mov	r2, #1
  138140:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138144:	e51b0008 	ldr	r0, [fp, #-8]
  138148:	ebffff28 	bl	137df0 <GPIO_WritePinOutput>

    return kStatus_Success;
  13814c:	e3a03000 	mov	r3, #0

}
  138150:	e1a00003 	mov	r0, r3
  138154:	e24bd004 	sub	sp, fp, #4
  138158:	e8bd8800 	pop	{fp, pc}

0013815c <PHY_StartNegotiation>:

status_t PHY_StartNegotiation(ENET_Type *base, uint32_t phyAddr)
{
  13815c:	e92d4800 	push	{fp, lr}
  138160:	e28db004 	add	fp, sp, #4
  138164:	e24dd018 	sub	sp, sp, #24
  138168:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  13816c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32_t counter = PHY_TIMEOUT_COUNT;
  138170:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  138174:	e50b3008 	str	r3, [fp, #-8]
    status_t result = kStatus_Success;
  138178:	e3a03000 	mov	r3, #0
  13817c:	e50b3010 	str	r3, [fp, #-16]
    uint32_t bssReg;
    uint32_t timeDelay;

    result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, PHY_BCTL_RESET_MASK);
  138180:	e3a03902 	mov	r3, #32768	; 0x8000
  138184:	e3a02000 	mov	r2, #0
  138188:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13818c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138190:	eb000071 	bl	13835c <PHY_Write>
  138194:	e50b0010 	str	r0, [fp, #-16]
    if (result == kStatus_Success)
  138198:	e51b3010 	ldr	r3, [fp, #-16]
  13819c:	e3530000 	cmp	r3, #0
  1381a0:	1a000038 	bne	138288 <PHY_StartNegotiation+0x12c>
        {
            return result;
        }
#endif  /* FSL_FEATURE_PHYKSZ8081_USE_RMII50M_MODE */
        /* Set the negotiation. */
        result = PHY_Write(base, phyAddr, PHY_AUTONEG_ADVERTISE_REG,
  1381a4:	e30031e1 	movw	r3, #481	; 0x1e1
  1381a8:	e3a02004 	mov	r2, #4
  1381ac:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1381b0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1381b4:	eb000068 	bl	13835c <PHY_Write>
  1381b8:	e50b0010 	str	r0, [fp, #-16]
                           (PHY_100BASETX_FULLDUPLEX_MASK | PHY_100BASETX_HALFDUPLEX_MASK |
                            PHY_10BASETX_FULLDUPLEX_MASK | PHY_10BASETX_HALFDUPLEX_MASK | 0x1U));
        if (result == kStatus_Success)
  1381bc:	e51b3010 	ldr	r3, [fp, #-16]
  1381c0:	e3530000 	cmp	r3, #0
  1381c4:	1a00002f 	bne	138288 <PHY_StartNegotiation+0x12c>
        {
            result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG,
  1381c8:	e3a03c12 	mov	r3, #4608	; 0x1200
  1381cc:	e3a02000 	mov	r2, #0
  1381d0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1381d4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1381d8:	eb00005f 	bl	13835c <PHY_Write>
  1381dc:	e50b0010 	str	r0, [fp, #-16]
                               (PHY_BCTL_AUTONEG_MASK | PHY_BCTL_RESTART_AUTONEG_MASK));
            if (result == kStatus_Success)
  1381e0:	e51b3010 	ldr	r3, [fp, #-16]
  1381e4:	e3530000 	cmp	r3, #0
  1381e8:	1a000026 	bne	138288 <PHY_StartNegotiation+0x12c>
            {
                /* Check auto negotiation complete. */
                while (counter --)
  1381ec:	ea000020 	b	138274 <PHY_StartNegotiation+0x118>
                {
                    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &bssReg);
  1381f0:	e24b3014 	sub	r3, fp, #20
  1381f4:	e3a02001 	mov	r2, #1
  1381f8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1381fc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138200:	eb000083 	bl	138414 <PHY_Read>
  138204:	e50b0010 	str	r0, [fp, #-16]
                    if ( result == kStatus_Success)
  138208:	e51b3010 	ldr	r3, [fp, #-16]
  13820c:	e3530000 	cmp	r3, #0
  138210:	1a000010 	bne	138258 <PHY_StartNegotiation+0xfc>
                    {
                        if ((bssReg & PHY_BSTATUS_AUTONEGCOMP_MASK) != 0)
  138214:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  138218:	e2033020 	and	r3, r3, #32
  13821c:	e3530000 	cmp	r3, #0
  138220:	0a00000c 	beq	138258 <PHY_StartNegotiation+0xfc>
                        {
                            /* Wait a moment for Phy status stable. */
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  138224:	e3a03000 	mov	r3, #0
  138228:	e50b300c 	str	r3, [fp, #-12]
  13822c:	ea000003 	b	138240 <PHY_StartNegotiation+0xe4>
                            {
                                __ASM("nop");
  138230:	e320f000 	nop	{0}
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  138234:	e51b300c 	ldr	r3, [fp, #-12]
  138238:	e2833001 	add	r3, r3, #1
  13823c:	e50b300c 	str	r3, [fp, #-12]
  138240:	e51b200c 	ldr	r2, [fp, #-12]
  138244:	e30f3ffe 	movw	r3, #65534	; 0xfffe
  138248:	e34034ff 	movt	r3, #1279	; 0x4ff
  13824c:	e1520003 	cmp	r2, r3
  138250:	9afffff6 	bls	138230 <PHY_StartNegotiation+0xd4>
                            }
                            break;
  138254:	ea00000b 	b	138288 <PHY_StartNegotiation+0x12c>
                        }
                    }
                    // rt_thread_delay(PHY_NEGOTIATION_DELAY);
                    rt_thread_mdelay(PHY_NEGOTIATION_DELAY);
  138258:	e3a00064 	mov	r0, #100	; 0x64
  13825c:	ebff2706 	bl	101e7c <rt_thread_mdelay>
                    if (!counter)
  138260:	e51b3008 	ldr	r3, [fp, #-8]
  138264:	e3530000 	cmp	r3, #0
  138268:	1a000001 	bne	138274 <PHY_StartNegotiation+0x118>
                    {
                        return kStatus_PHY_AutoNegotiateFail;
  13826c:	e3013006 	movw	r3, #4102	; 0x1006
  138270:	ea000005 	b	13828c <PHY_StartNegotiation+0x130>
                while (counter --)
  138274:	e51b3008 	ldr	r3, [fp, #-8]
  138278:	e2432001 	sub	r2, r3, #1
  13827c:	e50b2008 	str	r2, [fp, #-8]
  138280:	e3530000 	cmp	r3, #0
  138284:	1affffd9 	bne	1381f0 <PHY_StartNegotiation+0x94>
                    }
                }
            }
        }
    }
    return kStatus_Success;
  138288:	e3a03000 	mov	r3, #0
}
  13828c:	e1a00003 	mov	r0, r3
  138290:	e24bd004 	sub	sp, fp, #4
  138294:	e8bd8800 	pop	{fp, pc}

00138298 <PHY_Init>:

status_t PHY_Init(ENET_Type *base, uint32_t phyAddr, uint32_t srcClock_Hz,uint32_t phy_id)
{
  138298:	e92d4800 	push	{fp, lr}
  13829c:	e28db004 	add	fp, sp, #4
  1382a0:	e24dd020 	sub	sp, sp, #32
  1382a4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1382a8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1382ac:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1382b0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    uint32_t counter = PHY_TIMEOUT_COUNT;
  1382b4:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1382b8:	e50b3008 	str	r3, [fp, #-8]
    uint32_t idReg = 0;
  1382bc:	e3a03000 	mov	r3, #0
  1382c0:	e50b3010 	str	r3, [fp, #-16]
    status_t result = kStatus_Success;
  1382c4:	e3a03000 	mov	r3, #0
  1382c8:	e50b300c 	str	r3, [fp, #-12]

    ENET_SetSMI(base, srcClock_Hz, false);
  1382cc:	e3a02000 	mov	r2, #0
  1382d0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1382d4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1382d8:	ebfffa3c 	bl	136bd0 <ENET_SetSMI>
    PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  1382dc:	e24b3010 	sub	r3, fp, #16
  1382e0:	e3a02002 	mov	r2, #2
  1382e4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1382e8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1382ec:	eb000048 	bl	138414 <PHY_Read>
    while ((idReg != phy_id) && (counter != 0))
  1382f0:	ea000007 	b	138314 <PHY_Init+0x7c>
    {
        PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  1382f4:	e24b3010 	sub	r3, fp, #16
  1382f8:	e3a02002 	mov	r2, #2
  1382fc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138300:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138304:	eb000042 	bl	138414 <PHY_Read>
        counter --;
  138308:	e51b3008 	ldr	r3, [fp, #-8]
  13830c:	e2433001 	sub	r3, r3, #1
  138310:	e50b3008 	str	r3, [fp, #-8]
    while ((idReg != phy_id) && (counter != 0))
  138314:	e51b3010 	ldr	r3, [fp, #-16]
  138318:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  13831c:	e1520003 	cmp	r2, r3
  138320:	0a000002 	beq	138330 <PHY_Init+0x98>
  138324:	e51b3008 	ldr	r3, [fp, #-8]
  138328:	e3530000 	cmp	r3, #0
  13832c:	1afffff0 	bne	1382f4 <PHY_Init+0x5c>
    }
    if (!counter)
  138330:	e51b3008 	ldr	r3, [fp, #-8]
  138334:	e3530000 	cmp	r3, #0
  138338:	1a000001 	bne	138344 <PHY_Init+0xac>
    {
        return kStatus_Fail;
  13833c:	e3a03001 	mov	r3, #1
  138340:	ea000002 	b	138350 <PHY_Init+0xb8>
    }
    /* Reset PHY. */
    counter = PHY_TIMEOUT_COUNT;
  138344:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  138348:	e50b3008 	str	r3, [fp, #-8]
    return result;
  13834c:	e51b300c 	ldr	r3, [fp, #-12]
}
  138350:	e1a00003 	mov	r0, r3
  138354:	e24bd004 	sub	sp, fp, #4
  138358:	e8bd8800 	pop	{fp, pc}

0013835c <PHY_Write>:

status_t PHY_Write(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  13835c:	e92d4800 	push	{fp, lr}
  138360:	e28db004 	add	fp, sp, #4
  138364:	e24dd020 	sub	sp, sp, #32
  138368:	e50b0010 	str	r0, [fp, #-16]
  13836c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138370:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  138374:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t counter;

    /* Clear the SMI interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138378:	e3a01502 	mov	r1, #8388608	; 0x800000
  13837c:	e51b0010 	ldr	r0, [fp, #-16]
  138380:	ebffff44 	bl	138098 <ENET_ClearInterruptStatus>

    /* Starts a SMI write command. */
    ENET_StartSMIWrite(base, phyAddr, phyReg, kENET_MiiWriteValidFrame, data);
  138384:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  138388:	e58d3000 	str	r3, [sp]
  13838c:	e3a03001 	mov	r3, #1
  138390:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  138394:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138398:	e51b0010 	ldr	r0, [fp, #-16]
  13839c:	ebfffa4a 	bl	136ccc <ENET_StartSMIWrite>

    /* Wait for SMI complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1383a0:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1383a4:	e50b3008 	str	r3, [fp, #-8]
  1383a8:	ea000008 	b	1383d0 <PHY_Write+0x74>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  1383ac:	e51b0010 	ldr	r0, [fp, #-16]
  1383b0:	ebffff2e 	bl	138070 <ENET_GetInterruptStatus>
  1383b4:	e1a03000 	mov	r3, r0
  1383b8:	e2033502 	and	r3, r3, #8388608	; 0x800000
  1383bc:	e3530000 	cmp	r3, #0
  1383c0:	1a000006 	bne	1383e0 <PHY_Write+0x84>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1383c4:	e51b3008 	ldr	r3, [fp, #-8]
  1383c8:	e2433001 	sub	r3, r3, #1
  1383cc:	e50b3008 	str	r3, [fp, #-8]
  1383d0:	e51b3008 	ldr	r3, [fp, #-8]
  1383d4:	e3530000 	cmp	r3, #0
  1383d8:	1afffff3 	bne	1383ac <PHY_Write+0x50>
  1383dc:	ea000000 	b	1383e4 <PHY_Write+0x88>
        {
            break;
  1383e0:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  1383e4:	e51b3008 	ldr	r3, [fp, #-8]
  1383e8:	e3530000 	cmp	r3, #0
  1383ec:	1a000001 	bne	1383f8 <PHY_Write+0x9c>
    {
        return kStatus_PHY_SMIVisitTimeout;
  1383f0:	e3013005 	movw	r3, #4101	; 0x1005
  1383f4:	ea000003 	b	138408 <PHY_Write+0xac>
    }

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  1383f8:	e3a01502 	mov	r1, #8388608	; 0x800000
  1383fc:	e51b0010 	ldr	r0, [fp, #-16]
  138400:	ebffff24 	bl	138098 <ENET_ClearInterruptStatus>

    return kStatus_Success;
  138404:	e3a03000 	mov	r3, #0
}
  138408:	e1a00003 	mov	r0, r3
  13840c:	e24bd004 	sub	sp, fp, #4
  138410:	e8bd8800 	pop	{fp, pc}

00138414 <PHY_Read>:

status_t PHY_Read(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t *dataPtr)
{
  138414:	e92d4800 	push	{fp, lr}
  138418:	e28db004 	add	fp, sp, #4
  13841c:	e24dd018 	sub	sp, sp, #24
  138420:	e50b0010 	str	r0, [fp, #-16]
  138424:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138428:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  13842c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(dataPtr);
  138430:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  138434:	e3530000 	cmp	r3, #0
  138438:	1a000005 	bne	138454 <PHY_Read+0x40>
  13843c:	e3a020d0 	mov	r2, #208	; 0xd0
  138440:	e30a13fc 	movw	r1, #41980	; 0xa3fc
  138444:	e3401014 	movt	r1, #20
  138448:	e30a03e4 	movw	r0, #41956	; 0xa3e4
  13844c:	e3400014 	movt	r0, #20
  138450:	ebff2c50 	bl	103598 <rt_assert_handler>

    uint32_t counter;

    /* Clear the MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138454:	e3a01502 	mov	r1, #8388608	; 0x800000
  138458:	e51b0010 	ldr	r0, [fp, #-16]
  13845c:	ebffff0d 	bl	138098 <ENET_ClearInterruptStatus>

    /* Starts a SMI read command operation. */
    ENET_StartSMIRead(base, phyAddr, phyReg, kENET_MiiReadValidFrame);
  138460:	e3a03002 	mov	r3, #2
  138464:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  138468:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13846c:	e51b0010 	ldr	r0, [fp, #-16]
  138470:	ebfffa36 	bl	136d50 <ENET_StartSMIRead>

    /* Wait for MII complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  138474:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  138478:	e50b3008 	str	r3, [fp, #-8]
  13847c:	ea000008 	b	1384a4 <PHY_Read+0x90>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  138480:	e51b0010 	ldr	r0, [fp, #-16]
  138484:	ebfffef9 	bl	138070 <ENET_GetInterruptStatus>
  138488:	e1a03000 	mov	r3, r0
  13848c:	e2033502 	and	r3, r3, #8388608	; 0x800000
  138490:	e3530000 	cmp	r3, #0
  138494:	1a000006 	bne	1384b4 <PHY_Read+0xa0>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  138498:	e51b3008 	ldr	r3, [fp, #-8]
  13849c:	e2433001 	sub	r3, r3, #1
  1384a0:	e50b3008 	str	r3, [fp, #-8]
  1384a4:	e51b3008 	ldr	r3, [fp, #-8]
  1384a8:	e3530000 	cmp	r3, #0
  1384ac:	1afffff3 	bne	138480 <PHY_Read+0x6c>
  1384b0:	ea000000 	b	1384b8 <PHY_Read+0xa4>
        {
            break;
  1384b4:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  1384b8:	e51b3008 	ldr	r3, [fp, #-8]
  1384bc:	e3530000 	cmp	r3, #0
  1384c0:	1a000001 	bne	1384cc <PHY_Read+0xb8>
    {
        return kStatus_PHY_SMIVisitTimeout;
  1384c4:	e3013005 	movw	r3, #4101	; 0x1005
  1384c8:	ea000008 	b	1384f0 <PHY_Read+0xdc>
    }

    /* Get data from MII register. */
    *dataPtr = ENET_ReadSMIData(base);
  1384cc:	e51b0010 	ldr	r0, [fp, #-16]
  1384d0:	ebfffedb 	bl	138044 <ENET_ReadSMIData>
  1384d4:	e1a02000 	mov	r2, r0
  1384d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1384dc:	e5832000 	str	r2, [r3]

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  1384e0:	e3a01502 	mov	r1, #8388608	; 0x800000
  1384e4:	e51b0010 	ldr	r0, [fp, #-16]
  1384e8:	ebfffeea 	bl	138098 <ENET_ClearInterruptStatus>

    return kStatus_Success;
  1384ec:	e3a03000 	mov	r3, #0
}
  1384f0:	e1a00003 	mov	r0, r3
  1384f4:	e24bd004 	sub	sp, fp, #4
  1384f8:	e8bd8800 	pop	{fp, pc}

001384fc <PHY_EnableLoopback>:

status_t PHY_EnableLoopback(ENET_Type *base, uint32_t phyAddr, phy_loop_t mode, bool enable)
{
  1384fc:	e92d4800 	push	{fp, lr}
  138500:	e28db004 	add	fp, sp, #4
  138504:	e24dd018 	sub	sp, sp, #24
  138508:	e50b0010 	str	r0, [fp, #-16]
  13850c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138510:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  138514:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    status_t result;
    uint32_t data = 0;
  138518:	e3a03000 	mov	r3, #0
  13851c:	e50b300c 	str	r3, [fp, #-12]

    /* Set the loop mode. */
    if (enable)
  138520:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  138524:	e3530000 	cmp	r3, #0
  138528:	0a000024 	beq	1385c0 <PHY_EnableLoopback+0xc4>
    {
        if (mode == kPHY_LocalLoop)
  13852c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138530:	e3530000 	cmp	r3, #0
  138534:	1a000010 	bne	13857c <PHY_EnableLoopback+0x80>
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  138538:	e24b300c 	sub	r3, fp, #12
  13853c:	e3a02000 	mov	r2, #0
  138540:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138544:	e51b0010 	ldr	r0, [fp, #-16]
  138548:	ebffffb1 	bl	138414 <PHY_Read>
  13854c:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  138550:	e51b3008 	ldr	r3, [fp, #-8]
  138554:	e3530000 	cmp	r3, #0
  138558:	1a00003d 	bne	138654 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data | PHY_BCTL_LOOP_MASK));
  13855c:	e51b300c 	ldr	r3, [fp, #-12]
  138560:	e3833901 	orr	r3, r3, #16384	; 0x4000
  138564:	e3a02000 	mov	r2, #0
  138568:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13856c:	e51b0010 	ldr	r0, [fp, #-16]
  138570:	ebffff79 	bl	13835c <PHY_Write>
  138574:	e1a03000 	mov	r3, r0
  138578:	ea000036 	b	138658 <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  13857c:	e24b300c 	sub	r3, fp, #12
  138580:	e3a0201f 	mov	r2, #31
  138584:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138588:	e51b0010 	ldr	r0, [fp, #-16]
  13858c:	ebffffa0 	bl	138414 <PHY_Read>
  138590:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  138594:	e51b3008 	ldr	r3, [fp, #-8]
  138598:	e3530000 	cmp	r3, #0
  13859c:	1a00002c 	bne	138654 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data | PHY_CTL2_REMOTELOOP_MASK));
  1385a0:	e51b300c 	ldr	r3, [fp, #-12]
  1385a4:	e3833004 	orr	r3, r3, #4
  1385a8:	e3a0201f 	mov	r2, #31
  1385ac:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1385b0:	e51b0010 	ldr	r0, [fp, #-16]
  1385b4:	ebffff68 	bl	13835c <PHY_Write>
  1385b8:	e1a03000 	mov	r3, r0
  1385bc:	ea000025 	b	138658 <PHY_EnableLoopback+0x15c>
        }
    }
    else
    {
        /* Disable the loop mode. */
        if (mode == kPHY_LocalLoop)
  1385c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1385c4:	e3530000 	cmp	r3, #0
  1385c8:	1a000010 	bne	138610 <PHY_EnableLoopback+0x114>
        {
            /* First read the current status in the basic control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  1385cc:	e24b300c 	sub	r3, fp, #12
  1385d0:	e3a02000 	mov	r2, #0
  1385d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1385d8:	e51b0010 	ldr	r0, [fp, #-16]
  1385dc:	ebffff8c 	bl	138414 <PHY_Read>
  1385e0:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  1385e4:	e51b3008 	ldr	r3, [fp, #-8]
  1385e8:	e3530000 	cmp	r3, #0
  1385ec:	1a000018 	bne	138654 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data & ~PHY_BCTL_LOOP_MASK));
  1385f0:	e51b300c 	ldr	r3, [fp, #-12]
  1385f4:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  1385f8:	e3a02000 	mov	r2, #0
  1385fc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138600:	e51b0010 	ldr	r0, [fp, #-16]
  138604:	ebffff54 	bl	13835c <PHY_Write>
  138608:	e1a03000 	mov	r3, r0
  13860c:	ea000011 	b	138658 <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control one register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  138610:	e24b300c 	sub	r3, fp, #12
  138614:	e3a0201f 	mov	r2, #31
  138618:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13861c:	e51b0010 	ldr	r0, [fp, #-16]
  138620:	ebffff7b 	bl	138414 <PHY_Read>
  138624:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  138628:	e51b3008 	ldr	r3, [fp, #-8]
  13862c:	e3530000 	cmp	r3, #0
  138630:	1a000007 	bne	138654 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data & ~PHY_CTL2_REMOTELOOP_MASK));
  138634:	e51b300c 	ldr	r3, [fp, #-12]
  138638:	e3c33004 	bic	r3, r3, #4
  13863c:	e3a0201f 	mov	r2, #31
  138640:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138644:	e51b0010 	ldr	r0, [fp, #-16]
  138648:	ebffff43 	bl	13835c <PHY_Write>
  13864c:	e1a03000 	mov	r3, r0
  138650:	ea000000 	b	138658 <PHY_EnableLoopback+0x15c>
            }
        }
    }
    return result;
  138654:	e51b3008 	ldr	r3, [fp, #-8]
}
  138658:	e1a00003 	mov	r0, r3
  13865c:	e24bd004 	sub	sp, fp, #4
  138660:	e8bd8800 	pop	{fp, pc}

00138664 <PHY_GetLinkStatus>:

status_t PHY_GetLinkStatus(ENET_Type *base, uint32_t phyAddr, bool *status)
{
  138664:	e92d4800 	push	{fp, lr}
  138668:	e28db004 	add	fp, sp, #4
  13866c:	e24dd018 	sub	sp, sp, #24
  138670:	e50b0010 	str	r0, [fp, #-16]
  138674:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138678:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(status);
  13867c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138680:	e3530000 	cmp	r3, #0
  138684:	1a000005 	bne	1386a0 <PHY_GetLinkStatus+0x3c>
  138688:	e3a02f4a 	mov	r2, #296	; 0x128
  13868c:	e30a1408 	movw	r1, #41992	; 0xa408
  138690:	e3401014 	movt	r1, #20
  138694:	e30a03ec 	movw	r0, #41964	; 0xa3ec
  138698:	e3400014 	movt	r0, #20
  13869c:	ebff2bbd 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  1386a0:	e3a03000 	mov	r3, #0
  1386a4:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data;

    /* Read the basic status register. */
    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &data);
  1386a8:	e24b300c 	sub	r3, fp, #12
  1386ac:	e3a02001 	mov	r2, #1
  1386b0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1386b4:	e51b0010 	ldr	r0, [fp, #-16]
  1386b8:	ebffff55 	bl	138414 <PHY_Read>
  1386bc:	e50b0008 	str	r0, [fp, #-8]
    if (result == kStatus_Success)
  1386c0:	e51b3008 	ldr	r3, [fp, #-8]
  1386c4:	e3530000 	cmp	r3, #0
  1386c8:	1a00000a 	bne	1386f8 <PHY_GetLinkStatus+0x94>
    {
        if (!(PHY_BSTATUS_LINKSTATUS_MASK & data))
  1386cc:	e51b300c 	ldr	r3, [fp, #-12]
  1386d0:	e2033004 	and	r3, r3, #4
  1386d4:	e3530000 	cmp	r3, #0
  1386d8:	1a000003 	bne	1386ec <PHY_GetLinkStatus+0x88>
        {
            /* link down. */
            *status = false;
  1386dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1386e0:	e3a02000 	mov	r2, #0
  1386e4:	e5c32000 	strb	r2, [r3]
  1386e8:	ea000002 	b	1386f8 <PHY_GetLinkStatus+0x94>
        }
        else
        {
            /* link up. */
            *status = true;
  1386ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1386f0:	e3a02001 	mov	r2, #1
  1386f4:	e5c32000 	strb	r2, [r3]
        }
    }
    return result;
  1386f8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1386fc:	e1a00003 	mov	r0, r3
  138700:	e24bd004 	sub	sp, fp, #4
  138704:	e8bd8800 	pop	{fp, pc}

00138708 <PHY_GetLinkSpeedDuplex>:

status_t PHY_GetLinkSpeedDuplex(ENET_Type *base, uint32_t phyAddr, phy_speed_t *speed, phy_duplex_t *duplex)
{
  138708:	e92d4800 	push	{fp, lr}
  13870c:	e28db004 	add	fp, sp, #4
  138710:	e24dd020 	sub	sp, sp, #32
  138714:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  138718:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  13871c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  138720:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    RT_ASSERT(duplex);
  138724:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138728:	e3530000 	cmp	r3, #0
  13872c:	1a000005 	bne	138748 <PHY_GetLinkSpeedDuplex+0x40>
  138730:	e3002141 	movw	r2, #321	; 0x141
  138734:	e30a141c 	movw	r1, #42012	; 0xa41c
  138738:	e3401014 	movt	r1, #20
  13873c:	e30a03f4 	movw	r0, #41972	; 0xa3f4
  138740:	e3400014 	movt	r0, #20
  138744:	ebff2b93 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  138748:	e3a03000 	mov	r3, #0
  13874c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data, ctlReg;

    /* Read the control two register. */

    result = PHY_Read(base, phyAddr, 31, &ctlReg);
  138750:	e24b3010 	sub	r3, fp, #16
  138754:	e3a0201f 	mov	r2, #31
  138758:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13875c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138760:	ebffff2b 	bl	138414 <PHY_Read>
  138764:	e50b0008 	str	r0, [fp, #-8]

    data = ((ctlReg>>2) & 0x7);
  138768:	e51b3010 	ldr	r3, [fp, #-16]
  13876c:	e1a03123 	lsr	r3, r3, #2
  138770:	e2033007 	and	r3, r3, #7
  138774:	e50b300c 	str	r3, [fp, #-12]
    switch (data)
  138778:	e51b300c 	ldr	r3, [fp, #-12]
  13877c:	e2433001 	sub	r3, r3, #1
  138780:	e3530005 	cmp	r3, #5
  138784:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  138788:	ea000021 	b	138814 <PHY_GetLinkSpeedDuplex+0x10c>
  13878c:	001387a4 	.word	0x001387a4
  138790:	001387dc 	.word	0x001387dc
  138794:	00138814 	.word	0x00138814
  138798:	00138814 	.word	0x00138814
  13879c:	001387c0 	.word	0x001387c0
  1387a0:	001387f8 	.word	0x001387f8
    {
        case 1:
            *speed = kPHY_Speed10M;
  1387a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1387a8:	e3a02000 	mov	r2, #0
  1387ac:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  1387b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1387b4:	e3a02000 	mov	r2, #0
  1387b8:	e5832000 	str	r2, [r3]
            break;
  1387bc:	ea00001a 	b	13882c <PHY_GetLinkSpeedDuplex+0x124>
        case 5:
            *speed = kPHY_Speed10M;
  1387c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1387c4:	e3a02000 	mov	r2, #0
  1387c8:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  1387cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1387d0:	e3a02001 	mov	r2, #1
  1387d4:	e5832000 	str	r2, [r3]
            break;
  1387d8:	ea000013 	b	13882c <PHY_GetLinkSpeedDuplex+0x124>
        case 2:
            *speed = kPHY_Speed100M;
  1387dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1387e0:	e3a02001 	mov	r2, #1
  1387e4:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  1387e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1387ec:	e3a02000 	mov	r2, #0
  1387f0:	e5832000 	str	r2, [r3]
            break;
  1387f4:	ea00000c 	b	13882c <PHY_GetLinkSpeedDuplex+0x124>
        case 6:
            *speed = kPHY_Speed100M;
  1387f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1387fc:	e3a02001 	mov	r2, #1
  138800:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  138804:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138808:	e3a02001 	mov	r2, #1
  13880c:	e5832000 	str	r2, [r3]
            break;
  138810:	ea000005 	b	13882c <PHY_GetLinkSpeedDuplex+0x124>
        default:
            *speed = kPHY_Speed100M;
  138814:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138818:	e3a02001 	mov	r2, #1
  13881c:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  138820:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138824:	e3a02001 	mov	r2, #1
  138828:	e5832000 	str	r2, [r3]
    }

    return result;
  13882c:	e51b3008 	ldr	r3, [fp, #-8]
}
  138830:	e1a00003 	mov	r0, r3
  138834:	e24bd004 	sub	sp, fp, #4
  138838:	e8bd8800 	pop	{fp, pc}

0013883c <__udivsi3>:
  13883c:	e2512001 	subs	r2, r1, #1
  138840:	012fff1e 	bxeq	lr
  138844:	3a000074 	bcc	138a1c <__udivsi3+0x1e0>
  138848:	e1500001 	cmp	r0, r1
  13884c:	9a00006b 	bls	138a00 <__udivsi3+0x1c4>
  138850:	e1110002 	tst	r1, r2
  138854:	0a00006c 	beq	138a0c <__udivsi3+0x1d0>
  138858:	e16f3f10 	clz	r3, r0
  13885c:	e16f2f11 	clz	r2, r1
  138860:	e0423003 	sub	r3, r2, r3
  138864:	e273301f 	rsbs	r3, r3, #31
  138868:	10833083 	addne	r3, r3, r3, lsl #1
  13886c:	e3a02000 	mov	r2, #0
  138870:	108ff103 	addne	pc, pc, r3, lsl #2
  138874:	e1a00000 	nop			; (mov r0, r0)
  138878:	e1500f81 	cmp	r0, r1, lsl #31
  13887c:	e0a22002 	adc	r2, r2, r2
  138880:	20400f81 	subcs	r0, r0, r1, lsl #31
  138884:	e1500f01 	cmp	r0, r1, lsl #30
  138888:	e0a22002 	adc	r2, r2, r2
  13888c:	20400f01 	subcs	r0, r0, r1, lsl #30
  138890:	e1500e81 	cmp	r0, r1, lsl #29
  138894:	e0a22002 	adc	r2, r2, r2
  138898:	20400e81 	subcs	r0, r0, r1, lsl #29
  13889c:	e1500e01 	cmp	r0, r1, lsl #28
  1388a0:	e0a22002 	adc	r2, r2, r2
  1388a4:	20400e01 	subcs	r0, r0, r1, lsl #28
  1388a8:	e1500d81 	cmp	r0, r1, lsl #27
  1388ac:	e0a22002 	adc	r2, r2, r2
  1388b0:	20400d81 	subcs	r0, r0, r1, lsl #27
  1388b4:	e1500d01 	cmp	r0, r1, lsl #26
  1388b8:	e0a22002 	adc	r2, r2, r2
  1388bc:	20400d01 	subcs	r0, r0, r1, lsl #26
  1388c0:	e1500c81 	cmp	r0, r1, lsl #25
  1388c4:	e0a22002 	adc	r2, r2, r2
  1388c8:	20400c81 	subcs	r0, r0, r1, lsl #25
  1388cc:	e1500c01 	cmp	r0, r1, lsl #24
  1388d0:	e0a22002 	adc	r2, r2, r2
  1388d4:	20400c01 	subcs	r0, r0, r1, lsl #24
  1388d8:	e1500b81 	cmp	r0, r1, lsl #23
  1388dc:	e0a22002 	adc	r2, r2, r2
  1388e0:	20400b81 	subcs	r0, r0, r1, lsl #23
  1388e4:	e1500b01 	cmp	r0, r1, lsl #22
  1388e8:	e0a22002 	adc	r2, r2, r2
  1388ec:	20400b01 	subcs	r0, r0, r1, lsl #22
  1388f0:	e1500a81 	cmp	r0, r1, lsl #21
  1388f4:	e0a22002 	adc	r2, r2, r2
  1388f8:	20400a81 	subcs	r0, r0, r1, lsl #21
  1388fc:	e1500a01 	cmp	r0, r1, lsl #20
  138900:	e0a22002 	adc	r2, r2, r2
  138904:	20400a01 	subcs	r0, r0, r1, lsl #20
  138908:	e1500981 	cmp	r0, r1, lsl #19
  13890c:	e0a22002 	adc	r2, r2, r2
  138910:	20400981 	subcs	r0, r0, r1, lsl #19
  138914:	e1500901 	cmp	r0, r1, lsl #18
  138918:	e0a22002 	adc	r2, r2, r2
  13891c:	20400901 	subcs	r0, r0, r1, lsl #18
  138920:	e1500881 	cmp	r0, r1, lsl #17
  138924:	e0a22002 	adc	r2, r2, r2
  138928:	20400881 	subcs	r0, r0, r1, lsl #17
  13892c:	e1500801 	cmp	r0, r1, lsl #16
  138930:	e0a22002 	adc	r2, r2, r2
  138934:	20400801 	subcs	r0, r0, r1, lsl #16
  138938:	e1500781 	cmp	r0, r1, lsl #15
  13893c:	e0a22002 	adc	r2, r2, r2
  138940:	20400781 	subcs	r0, r0, r1, lsl #15
  138944:	e1500701 	cmp	r0, r1, lsl #14
  138948:	e0a22002 	adc	r2, r2, r2
  13894c:	20400701 	subcs	r0, r0, r1, lsl #14
  138950:	e1500681 	cmp	r0, r1, lsl #13
  138954:	e0a22002 	adc	r2, r2, r2
  138958:	20400681 	subcs	r0, r0, r1, lsl #13
  13895c:	e1500601 	cmp	r0, r1, lsl #12
  138960:	e0a22002 	adc	r2, r2, r2
  138964:	20400601 	subcs	r0, r0, r1, lsl #12
  138968:	e1500581 	cmp	r0, r1, lsl #11
  13896c:	e0a22002 	adc	r2, r2, r2
  138970:	20400581 	subcs	r0, r0, r1, lsl #11
  138974:	e1500501 	cmp	r0, r1, lsl #10
  138978:	e0a22002 	adc	r2, r2, r2
  13897c:	20400501 	subcs	r0, r0, r1, lsl #10
  138980:	e1500481 	cmp	r0, r1, lsl #9
  138984:	e0a22002 	adc	r2, r2, r2
  138988:	20400481 	subcs	r0, r0, r1, lsl #9
  13898c:	e1500401 	cmp	r0, r1, lsl #8
  138990:	e0a22002 	adc	r2, r2, r2
  138994:	20400401 	subcs	r0, r0, r1, lsl #8
  138998:	e1500381 	cmp	r0, r1, lsl #7
  13899c:	e0a22002 	adc	r2, r2, r2
  1389a0:	20400381 	subcs	r0, r0, r1, lsl #7
  1389a4:	e1500301 	cmp	r0, r1, lsl #6
  1389a8:	e0a22002 	adc	r2, r2, r2
  1389ac:	20400301 	subcs	r0, r0, r1, lsl #6
  1389b0:	e1500281 	cmp	r0, r1, lsl #5
  1389b4:	e0a22002 	adc	r2, r2, r2
  1389b8:	20400281 	subcs	r0, r0, r1, lsl #5
  1389bc:	e1500201 	cmp	r0, r1, lsl #4
  1389c0:	e0a22002 	adc	r2, r2, r2
  1389c4:	20400201 	subcs	r0, r0, r1, lsl #4
  1389c8:	e1500181 	cmp	r0, r1, lsl #3
  1389cc:	e0a22002 	adc	r2, r2, r2
  1389d0:	20400181 	subcs	r0, r0, r1, lsl #3
  1389d4:	e1500101 	cmp	r0, r1, lsl #2
  1389d8:	e0a22002 	adc	r2, r2, r2
  1389dc:	20400101 	subcs	r0, r0, r1, lsl #2
  1389e0:	e1500081 	cmp	r0, r1, lsl #1
  1389e4:	e0a22002 	adc	r2, r2, r2
  1389e8:	20400081 	subcs	r0, r0, r1, lsl #1
  1389ec:	e1500001 	cmp	r0, r1
  1389f0:	e0a22002 	adc	r2, r2, r2
  1389f4:	20400001 	subcs	r0, r0, r1
  1389f8:	e1a00002 	mov	r0, r2
  1389fc:	e12fff1e 	bx	lr
  138a00:	03a00001 	moveq	r0, #1
  138a04:	13a00000 	movne	r0, #0
  138a08:	e12fff1e 	bx	lr
  138a0c:	e16f2f11 	clz	r2, r1
  138a10:	e262201f 	rsb	r2, r2, #31
  138a14:	e1a00230 	lsr	r0, r0, r2
  138a18:	e12fff1e 	bx	lr
  138a1c:	e3500000 	cmp	r0, #0
  138a20:	13e00000 	mvnne	r0, #0
  138a24:	ea000097 	b	138c88 <__aeabi_idiv0>

00138a28 <__aeabi_uidivmod>:
  138a28:	e3510000 	cmp	r1, #0
  138a2c:	0afffffa 	beq	138a1c <__udivsi3+0x1e0>
  138a30:	e92d4003 	push	{r0, r1, lr}
  138a34:	ebffff80 	bl	13883c <__udivsi3>
  138a38:	e8bd4006 	pop	{r1, r2, lr}
  138a3c:	e0030092 	mul	r3, r2, r0
  138a40:	e0411003 	sub	r1, r1, r3
  138a44:	e12fff1e 	bx	lr

00138a48 <__divsi3>:
  138a48:	e3510000 	cmp	r1, #0
  138a4c:	0a000081 	beq	138c58 <.divsi3_skip_div0_test+0x208>

00138a50 <.divsi3_skip_div0_test>:
  138a50:	e020c001 	eor	ip, r0, r1
  138a54:	42611000 	rsbmi	r1, r1, #0
  138a58:	e2512001 	subs	r2, r1, #1
  138a5c:	0a000070 	beq	138c24 <.divsi3_skip_div0_test+0x1d4>
  138a60:	e1b03000 	movs	r3, r0
  138a64:	42603000 	rsbmi	r3, r0, #0
  138a68:	e1530001 	cmp	r3, r1
  138a6c:	9a00006f 	bls	138c30 <.divsi3_skip_div0_test+0x1e0>
  138a70:	e1110002 	tst	r1, r2
  138a74:	0a000071 	beq	138c40 <.divsi3_skip_div0_test+0x1f0>
  138a78:	e16f2f13 	clz	r2, r3
  138a7c:	e16f0f11 	clz	r0, r1
  138a80:	e0402002 	sub	r2, r0, r2
  138a84:	e272201f 	rsbs	r2, r2, #31
  138a88:	10822082 	addne	r2, r2, r2, lsl #1
  138a8c:	e3a00000 	mov	r0, #0
  138a90:	108ff102 	addne	pc, pc, r2, lsl #2
  138a94:	e1a00000 	nop			; (mov r0, r0)
  138a98:	e1530f81 	cmp	r3, r1, lsl #31
  138a9c:	e0a00000 	adc	r0, r0, r0
  138aa0:	20433f81 	subcs	r3, r3, r1, lsl #31
  138aa4:	e1530f01 	cmp	r3, r1, lsl #30
  138aa8:	e0a00000 	adc	r0, r0, r0
  138aac:	20433f01 	subcs	r3, r3, r1, lsl #30
  138ab0:	e1530e81 	cmp	r3, r1, lsl #29
  138ab4:	e0a00000 	adc	r0, r0, r0
  138ab8:	20433e81 	subcs	r3, r3, r1, lsl #29
  138abc:	e1530e01 	cmp	r3, r1, lsl #28
  138ac0:	e0a00000 	adc	r0, r0, r0
  138ac4:	20433e01 	subcs	r3, r3, r1, lsl #28
  138ac8:	e1530d81 	cmp	r3, r1, lsl #27
  138acc:	e0a00000 	adc	r0, r0, r0
  138ad0:	20433d81 	subcs	r3, r3, r1, lsl #27
  138ad4:	e1530d01 	cmp	r3, r1, lsl #26
  138ad8:	e0a00000 	adc	r0, r0, r0
  138adc:	20433d01 	subcs	r3, r3, r1, lsl #26
  138ae0:	e1530c81 	cmp	r3, r1, lsl #25
  138ae4:	e0a00000 	adc	r0, r0, r0
  138ae8:	20433c81 	subcs	r3, r3, r1, lsl #25
  138aec:	e1530c01 	cmp	r3, r1, lsl #24
  138af0:	e0a00000 	adc	r0, r0, r0
  138af4:	20433c01 	subcs	r3, r3, r1, lsl #24
  138af8:	e1530b81 	cmp	r3, r1, lsl #23
  138afc:	e0a00000 	adc	r0, r0, r0
  138b00:	20433b81 	subcs	r3, r3, r1, lsl #23
  138b04:	e1530b01 	cmp	r3, r1, lsl #22
  138b08:	e0a00000 	adc	r0, r0, r0
  138b0c:	20433b01 	subcs	r3, r3, r1, lsl #22
  138b10:	e1530a81 	cmp	r3, r1, lsl #21
  138b14:	e0a00000 	adc	r0, r0, r0
  138b18:	20433a81 	subcs	r3, r3, r1, lsl #21
  138b1c:	e1530a01 	cmp	r3, r1, lsl #20
  138b20:	e0a00000 	adc	r0, r0, r0
  138b24:	20433a01 	subcs	r3, r3, r1, lsl #20
  138b28:	e1530981 	cmp	r3, r1, lsl #19
  138b2c:	e0a00000 	adc	r0, r0, r0
  138b30:	20433981 	subcs	r3, r3, r1, lsl #19
  138b34:	e1530901 	cmp	r3, r1, lsl #18
  138b38:	e0a00000 	adc	r0, r0, r0
  138b3c:	20433901 	subcs	r3, r3, r1, lsl #18
  138b40:	e1530881 	cmp	r3, r1, lsl #17
  138b44:	e0a00000 	adc	r0, r0, r0
  138b48:	20433881 	subcs	r3, r3, r1, lsl #17
  138b4c:	e1530801 	cmp	r3, r1, lsl #16
  138b50:	e0a00000 	adc	r0, r0, r0
  138b54:	20433801 	subcs	r3, r3, r1, lsl #16
  138b58:	e1530781 	cmp	r3, r1, lsl #15
  138b5c:	e0a00000 	adc	r0, r0, r0
  138b60:	20433781 	subcs	r3, r3, r1, lsl #15
  138b64:	e1530701 	cmp	r3, r1, lsl #14
  138b68:	e0a00000 	adc	r0, r0, r0
  138b6c:	20433701 	subcs	r3, r3, r1, lsl #14
  138b70:	e1530681 	cmp	r3, r1, lsl #13
  138b74:	e0a00000 	adc	r0, r0, r0
  138b78:	20433681 	subcs	r3, r3, r1, lsl #13
  138b7c:	e1530601 	cmp	r3, r1, lsl #12
  138b80:	e0a00000 	adc	r0, r0, r0
  138b84:	20433601 	subcs	r3, r3, r1, lsl #12
  138b88:	e1530581 	cmp	r3, r1, lsl #11
  138b8c:	e0a00000 	adc	r0, r0, r0
  138b90:	20433581 	subcs	r3, r3, r1, lsl #11
  138b94:	e1530501 	cmp	r3, r1, lsl #10
  138b98:	e0a00000 	adc	r0, r0, r0
  138b9c:	20433501 	subcs	r3, r3, r1, lsl #10
  138ba0:	e1530481 	cmp	r3, r1, lsl #9
  138ba4:	e0a00000 	adc	r0, r0, r0
  138ba8:	20433481 	subcs	r3, r3, r1, lsl #9
  138bac:	e1530401 	cmp	r3, r1, lsl #8
  138bb0:	e0a00000 	adc	r0, r0, r0
  138bb4:	20433401 	subcs	r3, r3, r1, lsl #8
  138bb8:	e1530381 	cmp	r3, r1, lsl #7
  138bbc:	e0a00000 	adc	r0, r0, r0
  138bc0:	20433381 	subcs	r3, r3, r1, lsl #7
  138bc4:	e1530301 	cmp	r3, r1, lsl #6
  138bc8:	e0a00000 	adc	r0, r0, r0
  138bcc:	20433301 	subcs	r3, r3, r1, lsl #6
  138bd0:	e1530281 	cmp	r3, r1, lsl #5
  138bd4:	e0a00000 	adc	r0, r0, r0
  138bd8:	20433281 	subcs	r3, r3, r1, lsl #5
  138bdc:	e1530201 	cmp	r3, r1, lsl #4
  138be0:	e0a00000 	adc	r0, r0, r0
  138be4:	20433201 	subcs	r3, r3, r1, lsl #4
  138be8:	e1530181 	cmp	r3, r1, lsl #3
  138bec:	e0a00000 	adc	r0, r0, r0
  138bf0:	20433181 	subcs	r3, r3, r1, lsl #3
  138bf4:	e1530101 	cmp	r3, r1, lsl #2
  138bf8:	e0a00000 	adc	r0, r0, r0
  138bfc:	20433101 	subcs	r3, r3, r1, lsl #2
  138c00:	e1530081 	cmp	r3, r1, lsl #1
  138c04:	e0a00000 	adc	r0, r0, r0
  138c08:	20433081 	subcs	r3, r3, r1, lsl #1
  138c0c:	e1530001 	cmp	r3, r1
  138c10:	e0a00000 	adc	r0, r0, r0
  138c14:	20433001 	subcs	r3, r3, r1
  138c18:	e35c0000 	cmp	ip, #0
  138c1c:	42600000 	rsbmi	r0, r0, #0
  138c20:	e12fff1e 	bx	lr
  138c24:	e13c0000 	teq	ip, r0
  138c28:	42600000 	rsbmi	r0, r0, #0
  138c2c:	e12fff1e 	bx	lr
  138c30:	33a00000 	movcc	r0, #0
  138c34:	01a00fcc 	asreq	r0, ip, #31
  138c38:	03800001 	orreq	r0, r0, #1
  138c3c:	e12fff1e 	bx	lr
  138c40:	e16f2f11 	clz	r2, r1
  138c44:	e262201f 	rsb	r2, r2, #31
  138c48:	e35c0000 	cmp	ip, #0
  138c4c:	e1a00233 	lsr	r0, r3, r2
  138c50:	42600000 	rsbmi	r0, r0, #0
  138c54:	e12fff1e 	bx	lr
  138c58:	e3500000 	cmp	r0, #0
  138c5c:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
  138c60:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
  138c64:	ea000007 	b	138c88 <__aeabi_idiv0>

00138c68 <__aeabi_idivmod>:
  138c68:	e3510000 	cmp	r1, #0
  138c6c:	0afffff9 	beq	138c58 <.divsi3_skip_div0_test+0x208>
  138c70:	e92d4003 	push	{r0, r1, lr}
  138c74:	ebffff75 	bl	138a50 <.divsi3_skip_div0_test>
  138c78:	e8bd4006 	pop	{r1, r2, lr}
  138c7c:	e0030092 	mul	r3, r2, r0
  138c80:	e0411003 	sub	r1, r1, r3
  138c84:	e12fff1e 	bx	lr

00138c88 <__aeabi_idiv0>:
  138c88:	e92d4002 	push	{r1, lr}
  138c8c:	e3a00008 	mov	r0, #8
  138c90:	eb001550 	bl	13e1d8 <raise>
  138c94:	e8bd8002 	pop	{r1, pc}

00138c98 <dummy>:
  138c98:	e12fff1e 	bx	lr

00138c9c <dummy1>:
  138c9c:	e12fff1e 	bx	lr

00138ca0 <__init_libc>:
  138ca0:	e92d4030 	push	{r4, r5, lr}
  138ca4:	e1a04000 	mov	r4, r0
  138ca8:	e24dd09c 	sub	sp, sp, #156	; 0x9c
  138cac:	e3a02098 	mov	r2, #152	; 0x98
  138cb0:	e1a05001 	mov	r5, r1
  138cb4:	e1a0000d 	mov	r0, sp
  138cb8:	e3a01000 	mov	r1, #0
  138cbc:	eb00215e 	bl	14123c <memset>
  138cc0:	e5942000 	ldr	r2, [r4]
  138cc4:	e59f3118 	ldr	r3, [pc, #280]	; 138de4 <__init_libc+0x144>
  138cc8:	e3520000 	cmp	r2, #0
  138ccc:	e5834000 	str	r4, [r3]
  138cd0:	03a02004 	moveq	r2, #4
  138cd4:	0a000009 	beq	138d00 <__init_libc+0x60>
  138cd8:	e1a03004 	mov	r3, r4
  138cdc:	e3a02000 	mov	r2, #0
  138ce0:	ea000000 	b	138ce8 <__init_libc+0x48>
  138ce4:	e1a02000 	mov	r2, r0
  138ce8:	e5b31004 	ldr	r1, [r3, #4]!
  138cec:	e2820001 	add	r0, r2, #1
  138cf0:	e3510000 	cmp	r1, #0
  138cf4:	1afffffa 	bne	138ce4 <__init_libc+0x44>
  138cf8:	e2822002 	add	r2, r2, #2
  138cfc:	e1a02102 	lsl	r2, r2, #2
  138d00:	e7943002 	ldr	r3, [r4, r2]
  138d04:	e59f00dc 	ldr	r0, [pc, #220]	; 138de8 <__init_libc+0x148>
  138d08:	e0842002 	add	r2, r4, r2
  138d0c:	e3530000 	cmp	r3, #0
  138d10:	e5802010 	str	r2, [r0, #16]
  138d14:	0a00002d 	beq	138dd0 <__init_libc+0x130>
  138d18:	e3530025 	cmp	r3, #37	; 0x25
  138d1c:	95921004 	ldrls	r1, [r2, #4]
  138d20:	928dc098 	addls	ip, sp, #152	; 0x98
  138d24:	908c3103 	addls	r3, ip, r3, lsl #2
  138d28:	95031098 	strls	r1, [r3, #-152]	; 0xffffff68
  138d2c:	e5b23008 	ldr	r3, [r2, #8]!
  138d30:	e3530000 	cmp	r3, #0
  138d34:	1afffff7 	bne	138d18 <__init_libc+0x78>
  138d38:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  138d3c:	e59dc080 	ldr	ip, [sp, #128]	; 0x80
  138d40:	e59d2018 	ldr	r2, [sp, #24]
  138d44:	e59f10a0 	ldr	r1, [pc, #160]	; 138dec <__init_libc+0x14c>
  138d48:	e5802024 	str	r2, [r0, #36]	; 0x24
  138d4c:	e59f209c 	ldr	r2, [pc, #156]	; 138df0 <__init_libc+0x150>
  138d50:	e3550000 	cmp	r5, #0
  138d54:	e5813000 	str	r3, [r1]
  138d58:	e582c000 	str	ip, [r2]
  138d5c:	0a000012 	beq	138dac <__init_libc+0x10c>
  138d60:	e59f308c 	ldr	r3, [pc, #140]	; 138df4 <__init_libc+0x154>
  138d64:	e59f208c 	ldr	r2, [pc, #140]	; 138df8 <__init_libc+0x158>
  138d68:	e5835000 	str	r5, [r3]
  138d6c:	e5825000 	str	r5, [r2]
  138d70:	e5d53000 	ldrb	r3, [r5]
  138d74:	e3530000 	cmp	r3, #0
  138d78:	0a000005 	beq	138d94 <__init_libc+0xf4>
  138d7c:	e2851001 	add	r1, r5, #1
  138d80:	e353002f 	cmp	r3, #47	; 0x2f
  138d84:	05821000 	streq	r1, [r2]
  138d88:	e4d13001 	ldrb	r3, [r1], #1
  138d8c:	e3530000 	cmp	r3, #0
  138d90:	1afffffa 	bne	138d80 <__init_libc+0xe0>
  138d94:	e1a0000d 	mov	r0, sp
  138d98:	eb002849 	bl	142ec4 <__init_tls>
  138d9c:	e59d0064 	ldr	r0, [sp, #100]	; 0x64
  138da0:	eb0028be 	bl	1430a0 <__init_ssp>
  138da4:	e28dd09c 	add	sp, sp, #156	; 0x9c
  138da8:	e8bd8030 	pop	{r4, r5, pc}
  138dac:	e59d107c 	ldr	r1, [sp, #124]	; 0x7c
  138db0:	e3510000 	cmp	r1, #0
  138db4:	1a000008 	bne	138ddc <__init_libc+0x13c>
  138db8:	e59f303c 	ldr	r3, [pc, #60]	; 138dfc <__init_libc+0x15c>
  138dbc:	e59f1030 	ldr	r1, [pc, #48]	; 138df4 <__init_libc+0x154>
  138dc0:	e59f2030 	ldr	r2, [pc, #48]	; 138df8 <__init_libc+0x158>
  138dc4:	e5813000 	str	r3, [r1]
  138dc8:	e5823000 	str	r3, [r2]
  138dcc:	eafffff0 	b	138d94 <__init_libc+0xf4>
  138dd0:	e1a02003 	mov	r2, r3
  138dd4:	e1a0c003 	mov	ip, r3
  138dd8:	eaffffd9 	b	138d44 <__init_libc+0xa4>
  138ddc:	e1a05001 	mov	r5, r1
  138de0:	eaffffde 	b	138d60 <__init_libc+0xc0>
  138de4:	0014f4a8 	.word	0x0014f4a8
  138de8:	0015d08c 	.word	0x0015d08c
  138dec:	0015d088 	.word	0x0015d088
  138df0:	0015d0cc 	.word	0x0015d0cc
  138df4:	0014ec38 	.word	0x0014ec38
  138df8:	0014ec34 	.word	0x0014ec34
  138dfc:	0014c6b0 	.word	0x0014c6b0

00138e00 <__libc_start_init>:
  138e00:	e92d4070 	push	{r4, r5, r6, lr}
  138e04:	e59f4020 	ldr	r4, [pc, #32]	; 138e2c <__libc_start_init+0x2c>
  138e08:	e59f5020 	ldr	r5, [pc, #32]	; 138e30 <__libc_start_init+0x30>
  138e0c:	eb003148 	bl	145334 <_init>
  138e10:	e1540005 	cmp	r4, r5
  138e14:	28bd8070 	popcs	{r4, r5, r6, pc}
  138e18:	e4943004 	ldr	r3, [r4], #4
  138e1c:	e12fff33 	blx	r3
  138e20:	e1540005 	cmp	r4, r5
  138e24:	3afffffb 	bcc	138e18 <__libc_start_init+0x18>
  138e28:	e8bd8070 	pop	{r4, r5, r6, pc}
  138e2c:	0014d3e8 	.word	0x0014d3e8
  138e30:	0014d3ec 	.word	0x0014d3ec

00138e34 <libc_start_main_stage2>:
  138e34:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  138e38:	e1a05001 	mov	r5, r1
  138e3c:	e1a06002 	mov	r6, r2
  138e40:	e2814001 	add	r4, r1, #1
  138e44:	e0824104 	add	r4, r2, r4, lsl #2
  138e48:	e1a07000 	mov	r7, r0
  138e4c:	ebffffeb 	bl	138e00 <__libc_start_init>
  138e50:	e1a02004 	mov	r2, r4
  138e54:	e1a01006 	mov	r1, r6
  138e58:	e1a00005 	mov	r0, r5
  138e5c:	e12fff37 	blx	r7
  138e60:	eb000056 	bl	138fc0 <exit>

00138e64 <__libc_start_main>:
  138e64:	e92d4070 	push	{r4, r5, r6, lr}
  138e68:	e1a05001 	mov	r5, r1
  138e6c:	e1a04002 	mov	r4, r2
  138e70:	e1a06000 	mov	r6, r0
  138e74:	e2810001 	add	r0, r1, #1
  138e78:	e0820100 	add	r0, r2, r0, lsl #2
  138e7c:	e5921000 	ldr	r1, [r2]
  138e80:	ebffff86 	bl	138ca0 <__init_libc>
  138e84:	e59f3010 	ldr	r3, [pc, #16]	; 138e9c <__libc_start_main+0x38>
  138e88:	e1a02004 	mov	r2, r4
  138e8c:	e1a01005 	mov	r1, r5
  138e90:	e1a00006 	mov	r0, r6
  138e94:	e8bd4070 	pop	{r4, r5, r6, lr}
  138e98:	e12fff13 	bx	r3
  138e9c:	00138e34 	.word	0x00138e34

00138ea0 <__errno_location>:
  138ea0:	e59f3010 	ldr	r3, [pc, #16]	; 138eb8 <__errno_location+0x18>
  138ea4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138ea8:	e5930000 	ldr	r0, [r3]
  138eac:	e12fff30 	blx	r0
  138eb0:	e2400058 	sub	r0, r0, #88	; 0x58
  138eb4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  138eb8:	0014d3dc 	.word	0x0014d3dc

00138ebc <__strerror_l>:
  138ebc:	e3500054 	cmp	r0, #84	; 0x54
  138ec0:	0a000013 	beq	138f14 <__strerror_l+0x58>
  138ec4:	e3a0c001 	mov	ip, #1
  138ec8:	e3a03021 	mov	r3, #33	; 0x21
  138ecc:	e59f204c 	ldr	r2, [pc, #76]	; 138f20 <__strerror_l+0x64>
  138ed0:	e1530000 	cmp	r3, r0
  138ed4:	0a000003 	beq	138ee8 <__strerror_l+0x2c>
  138ed8:	e4d23001 	ldrb	r3, [r2], #1
  138edc:	e28cc001 	add	ip, ip, #1
  138ee0:	e3530000 	cmp	r3, #0
  138ee4:	1afffff9 	bne	138ed0 <__strerror_l+0x14>
  138ee8:	e3a02049 	mov	r2, #73	; 0x49
  138eec:	e59f3030 	ldr	r3, [pc, #48]	; 138f24 <__strerror_l+0x68>
  138ef0:	e3520000 	cmp	r2, #0
  138ef4:	15f32001 	ldrbne	r2, [r3, #1]!
  138ef8:	1afffffc 	bne	138ef0 <__strerror_l+0x34>
  138efc:	e25cc001 	subs	ip, ip, #1
  138f00:	e2830001 	add	r0, r3, #1
  138f04:	0a000003 	beq	138f18 <__strerror_l+0x5c>
  138f08:	e5d32001 	ldrb	r2, [r3, #1]
  138f0c:	e1a03000 	mov	r3, r0
  138f10:	eafffff6 	b	138ef0 <__strerror_l+0x34>
  138f14:	e59f0008 	ldr	r0, [pc, #8]	; 138f24 <__strerror_l+0x68>
  138f18:	e5911014 	ldr	r1, [r1, #20]
  138f1c:	ea000d54 	b	13c474 <__lctrans>
  138f20:	0014a436 	.word	0x0014a436
  138f24:	0014a490 	.word	0x0014a490

00138f28 <strerror>:
  138f28:	e1a03000 	mov	r3, r0
  138f2c:	e59f2018 	ldr	r2, [pc, #24]	; 138f4c <strerror+0x24>
  138f30:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138f34:	e5920000 	ldr	r0, [r2]
  138f38:	e12fff30 	blx	r0
  138f3c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  138f40:	e5101018 	ldr	r1, [r0, #-24]	; 0xffffffe8
  138f44:	e1a00003 	mov	r0, r3
  138f48:	eaffffdb 	b	138ebc <__strerror_l>
  138f4c:	0014d3dc 	.word	0x0014d3dc

00138f50 <__assert_fail>:
  138f50:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138f54:	e24dd00c 	sub	sp, sp, #12
  138f58:	e58d2004 	str	r2, [sp, #4]
  138f5c:	e58d3000 	str	r3, [sp]
  138f60:	e1a02000 	mov	r2, r0
  138f64:	e1a03001 	mov	r3, r1
  138f68:	e59f0010 	ldr	r0, [pc, #16]	; 138f80 <__assert_fail+0x30>
  138f6c:	e59f1010 	ldr	r1, [pc, #16]	; 138f84 <__assert_fail+0x34>
  138f70:	eb001523 	bl	13e404 <fprintf>
  138f74:	e3a00000 	mov	r0, #0
  138f78:	eb0014b0 	bl	13e240 <fflush>
  138f7c:	eb00286b 	bl	143130 <abort>
  138f80:	0014d2a8 	.word	0x0014d2a8
  138f84:	0014abb0 	.word	0x0014abb0

00138f88 <__funcs_on_exit>:
  138f88:	e12fff1e 	bx	lr

00138f8c <__libc_exit_fini>:
  138f8c:	e92d4070 	push	{r4, r5, r6, lr}
  138f90:	e59f4020 	ldr	r4, [pc, #32]	; 138fb8 <__libc_exit_fini+0x2c>
  138f94:	e59f5020 	ldr	r5, [pc, #32]	; 138fbc <__libc_exit_fini+0x30>
  138f98:	e1540005 	cmp	r4, r5
  138f9c:	9a000003 	bls	138fb0 <__libc_exit_fini+0x24>
  138fa0:	e5343004 	ldr	r3, [r4, #-4]!
  138fa4:	e12fff33 	blx	r3
  138fa8:	e1540005 	cmp	r4, r5
  138fac:	8afffffb 	bhi	138fa0 <__libc_exit_fini+0x14>
  138fb0:	e8bd4070 	pop	{r4, r5, r6, lr}
  138fb4:	ea0030e1 	b	145340 <_fini>
  138fb8:	0014d3f0 	.word	0x0014d3f0
  138fbc:	0014d3ec 	.word	0x0014d3ec

00138fc0 <exit>:
  138fc0:	e92d4010 	push	{r4, lr}
  138fc4:	e1a04000 	mov	r4, r0
  138fc8:	ebffffee 	bl	138f88 <__funcs_on_exit>
  138fcc:	ebffffee 	bl	138f8c <__libc_exit_fini>
  138fd0:	eb002da3 	bl	144664 <__stdio_exit>
  138fd4:	e1a00004 	mov	r0, r4
  138fd8:	eb002847 	bl	1430fc <_Exit>

00138fdc <fcntl>:
  138fdc:	e92d000e 	push	{r1, r2, r3}
  138fe0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  138fe4:	e24dd020 	sub	sp, sp, #32
  138fe8:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  138fec:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
  138ff0:	e28d3038 	add	r3, sp, #56	; 0x38
  138ff4:	e3540004 	cmp	r4, #4
  138ff8:	e1a06000 	mov	r6, r0
  138ffc:	e58d3014 	str	r3, [sp, #20]
  139000:	03855802 	orreq	r5, r5, #131072	; 0x20000
  139004:	0a00000f 	beq	139048 <fcntl+0x6c>
  139008:	e354000e 	cmp	r4, #14
  13900c:	0a00001a 	beq	13907c <fcntl+0xa0>
  139010:	e3540009 	cmp	r4, #9
  139014:	0a000026 	beq	1390b4 <fcntl+0xd8>
  139018:	e59f3234 	ldr	r3, [pc, #564]	; 139254 <fcntl+0x278>
  13901c:	e1540003 	cmp	r4, r3
  139020:	0a000034 	beq	1390f8 <fcntl+0x11c>
  139024:	e244300c 	sub	r3, r4, #12
  139028:	e3530004 	cmp	r3, #4
  13902c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  139030:	ea000004 	b	139048 <fcntl+0x6c>
  139034:	00139048 	.word	0x00139048
  139038:	00139048 	.word	0x00139048
  13903c:	00139048 	.word	0x00139048
  139040:	00139048 	.word	0x00139048
  139044:	00139048 	.word	0x00139048
  139048:	e3a000dd 	mov	r0, #221	; 0xdd
  13904c:	eb000cc9 	bl	13c378 <get_rtt_syscall>
  139050:	e2503000 	subs	r3, r0, #0
  139054:	0a000046 	beq	139174 <fcntl+0x198>
  139058:	e1a02005 	mov	r2, r5
  13905c:	e1a01004 	mov	r1, r4
  139060:	e1a00006 	mov	r0, r6
  139064:	e12fff33 	blx	r3
  139068:	eb000cf7 	bl	13c44c <__syscall_ret>
  13906c:	e28dd020 	add	sp, sp, #32
  139070:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  139074:	e28dd00c 	add	sp, sp, #12
  139078:	e12fff1e 	bx	lr
  13907c:	e3a00000 	mov	r0, #0
  139080:	e1a03005 	mov	r3, r5
  139084:	e1a02004 	mov	r2, r4
  139088:	e1a01006 	mov	r1, r6
  13908c:	e58d0008 	str	r0, [sp, #8]
  139090:	e58d0004 	str	r0, [sp, #4]
  139094:	e58d0000 	str	r0, [sp]
  139098:	e3a000dd 	mov	r0, #221	; 0xdd
  13909c:	eb00231d 	bl	141d18 <__syscall_cp>
  1390a0:	eb000ce9 	bl	13c44c <__syscall_ret>
  1390a4:	e28dd020 	add	sp, sp, #32
  1390a8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  1390ac:	e28dd00c 	add	sp, sp, #12
  1390b0:	e12fff1e 	bx	lr
  1390b4:	e3a000dd 	mov	r0, #221	; 0xdd
  1390b8:	eb000cae 	bl	13c378 <get_rtt_syscall>
  1390bc:	e2503000 	subs	r3, r0, #0
  1390c0:	0a000007 	beq	1390e4 <fcntl+0x108>
  1390c4:	e28d2018 	add	r2, sp, #24
  1390c8:	e3a01010 	mov	r1, #16
  1390cc:	e1a00006 	mov	r0, r6
  1390d0:	e12fff33 	blx	r3
  1390d4:	e3700016 	cmn	r0, #22
  1390d8:	0a000027 	beq	13917c <fcntl+0x1a0>
  1390dc:	e3500000 	cmp	r0, #0
  1390e0:	1affffe0 	bne	139068 <fcntl+0x8c>
  1390e4:	e59d3018 	ldr	r3, [sp, #24]
  1390e8:	e59d001c 	ldr	r0, [sp, #28]
  1390ec:	e3530002 	cmp	r3, #2
  1390f0:	02600000 	rsbeq	r0, r0, #0
  1390f4:	eaffffdc 	b	13906c <fcntl+0x90>
  1390f8:	e3a000dd 	mov	r0, #221	; 0xdd
  1390fc:	eb000c9d 	bl	13c378 <get_rtt_syscall>
  139100:	e2503000 	subs	r3, r0, #0
  139104:	0a00000f 	beq	139148 <fcntl+0x16c>
  139108:	e1a02005 	mov	r2, r5
  13910c:	e1a01004 	mov	r1, r4
  139110:	e1a00006 	mov	r0, r6
  139114:	e12fff33 	blx	r3
  139118:	e3700016 	cmn	r0, #22
  13911c:	e1a07000 	mov	r7, r0
  139120:	0a00001e 	beq	1391a0 <fcntl+0x1c4>
  139124:	e3500000 	cmp	r0, #0
  139128:	e1a04000 	mov	r4, r0
  13912c:	aa000007 	bge	139150 <fcntl+0x174>
  139130:	e1a00004 	mov	r0, r4
  139134:	eb000cc4 	bl	13c44c <__syscall_ret>
  139138:	e28dd020 	add	sp, sp, #32
  13913c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  139140:	e28dd00c 	add	sp, sp, #12
  139144:	e12fff1e 	bx	lr
  139148:	e1a04003 	mov	r4, r3
  13914c:	e1a07003 	mov	r7, r3
  139150:	e3a000dd 	mov	r0, #221	; 0xdd
  139154:	eb000c87 	bl	13c378 <get_rtt_syscall>
  139158:	e2503000 	subs	r3, r0, #0
  13915c:	0afffff3 	beq	139130 <fcntl+0x154>
  139160:	e1a00007 	mov	r0, r7
  139164:	e3a02001 	mov	r2, #1
  139168:	e3a01002 	mov	r1, #2
  13916c:	e12fff33 	blx	r3
  139170:	eaffffee 	b	139130 <fcntl+0x154>
  139174:	e1a00003 	mov	r0, r3
  139178:	eaffffba 	b	139068 <fcntl+0x8c>
  13917c:	e3a000dd 	mov	r0, #221	; 0xdd
  139180:	eb000c7c 	bl	13c378 <get_rtt_syscall>
  139184:	e2503000 	subs	r3, r0, #0
  139188:	0a00002f 	beq	13924c <fcntl+0x270>
  13918c:	e1a02005 	mov	r2, r5
  139190:	e1a01004 	mov	r1, r4
  139194:	e1a00006 	mov	r0, r6
  139198:	e12fff33 	blx	r3
  13919c:	eaffffb2 	b	13906c <fcntl+0x90>
  1391a0:	e3a000dd 	mov	r0, #221	; 0xdd
  1391a4:	eb000c73 	bl	13c378 <get_rtt_syscall>
  1391a8:	e2503000 	subs	r3, r0, #0
  1391ac:	0a00000b 	beq	1391e0 <fcntl+0x204>
  1391b0:	e1a01004 	mov	r1, r4
  1391b4:	e3a02000 	mov	r2, #0
  1391b8:	e1a00006 	mov	r0, r6
  1391bc:	e12fff33 	blx	r3
  1391c0:	e3700016 	cmn	r0, #22
  1391c4:	e1a04000 	mov	r4, r0
  1391c8:	0a00000c 	beq	139200 <fcntl+0x224>
  1391cc:	e3500000 	cmp	r0, #0
  1391d0:	aa000003 	bge	1391e4 <fcntl+0x208>
  1391d4:	e3e00015 	mvn	r0, #21
  1391d8:	eb000c9b 	bl	13c44c <__syscall_ret>
  1391dc:	eaffffa2 	b	13906c <fcntl+0x90>
  1391e0:	e1a04003 	mov	r4, r3
  1391e4:	e3a00006 	mov	r0, #6
  1391e8:	eb000c62 	bl	13c378 <get_rtt_syscall>
  1391ec:	e2503000 	subs	r3, r0, #0
  1391f0:	0afffff7 	beq	1391d4 <fcntl+0x1f8>
  1391f4:	e1a00004 	mov	r0, r4
  1391f8:	e12fff33 	blx	r3
  1391fc:	eafffff4 	b	1391d4 <fcntl+0x1f8>
  139200:	e3a000dd 	mov	r0, #221	; 0xdd
  139204:	eb000c5b 	bl	13c378 <get_rtt_syscall>
  139208:	e2504000 	subs	r4, r0, #0
  13920c:	0a000005 	beq	139228 <fcntl+0x24c>
  139210:	e1a02005 	mov	r2, r5
  139214:	e1a00006 	mov	r0, r6
  139218:	e3a01000 	mov	r1, #0
  13921c:	e12fff34 	blx	r4
  139220:	e2504000 	subs	r4, r0, #0
  139224:	baffffc1 	blt	139130 <fcntl+0x154>
  139228:	e3a000dd 	mov	r0, #221	; 0xdd
  13922c:	eb000c51 	bl	13c378 <get_rtt_syscall>
  139230:	e2503000 	subs	r3, r0, #0
  139234:	0affffbd 	beq	139130 <fcntl+0x154>
  139238:	e3a02001 	mov	r2, #1
  13923c:	e3a01002 	mov	r1, #2
  139240:	e1a00004 	mov	r0, r4
  139244:	e12fff33 	blx	r3
  139248:	eaffffb8 	b	139130 <fcntl+0x154>
  13924c:	e1a00003 	mov	r0, r3
  139250:	eaffff85 	b	13906c <fcntl+0x90>
  139254:	00000406 	.word	0x00000406

00139258 <syscall_set_thread_area>:
  139258:	e1a01000 	mov	r1, r0
  13925c:	e3a0007b 	mov	r0, #123	; 0x7b
  139260:	ea000c6f 	b	13c424 <syscall>

00139264 <syscall_trace>:
  139264:	e92d4070 	push	{r4, r5, r6, lr}
  139268:	e1a04000 	mov	r4, r0
  13926c:	e1a05001 	mov	r5, r1
  139270:	e3a0201d 	mov	r2, #29
  139274:	e59f1018 	ldr	r1, [pc, #24]	; 139294 <syscall_trace+0x30>
  139278:	e3a000ff 	mov	r0, #255	; 0xff
  13927c:	eb000c68 	bl	13c424 <syscall>
  139280:	e1a02005 	mov	r2, r5
  139284:	e1a01004 	mov	r1, r4
  139288:	e8bd4070 	pop	{r4, r5, r6, lr}
  13928c:	e3a000ff 	mov	r0, #255	; 0xff
  139290:	ea000c63 	b	13c424 <syscall>
  139294:	0014ccf4 	.word	0x0014ccf4

00139298 <syscall_io_pgetevents>:
  139298:	e92d4010 	push	{r4, lr}
  13929c:	e3a01016 	mov	r1, #22
  1392a0:	e59f0008 	ldr	r0, [pc, #8]	; 1392b0 <syscall_io_pgetevents+0x18>
  1392a4:	ebffffee 	bl	139264 <syscall_trace>
  1392a8:	e3a00000 	mov	r0, #0
  1392ac:	e8bd8010 	pop	{r4, pc}
  1392b0:	0014c67c 	.word	0x0014c67c

001392b4 <syscall_rseq>:
  1392b4:	e92d4010 	push	{r4, lr}
  1392b8:	e3a0100d 	mov	r1, #13
  1392bc:	e59f0008 	ldr	r0, [pc, #8]	; 1392cc <syscall_rseq+0x18>
  1392c0:	ebffffe7 	bl	139264 <syscall_trace>
  1392c4:	e3a00000 	mov	r0, #0
  1392c8:	e8bd8010 	pop	{r4, pc}
  1392cc:	0014c66c 	.word	0x0014c66c

001392d0 <syscall_statx>:
  1392d0:	e92d4010 	push	{r4, lr}
  1392d4:	e3a0100e 	mov	r1, #14
  1392d8:	e59f0008 	ldr	r0, [pc, #8]	; 1392e8 <syscall_statx+0x18>
  1392dc:	ebffffe0 	bl	139264 <syscall_trace>
  1392e0:	e3a00000 	mov	r0, #0
  1392e4:	e8bd8010 	pop	{r4, pc}
  1392e8:	0014c65c 	.word	0x0014c65c

001392ec <syscall_pkey_free>:
  1392ec:	e92d4010 	push	{r4, lr}
  1392f0:	e3a01012 	mov	r1, #18
  1392f4:	e59f0008 	ldr	r0, [pc, #8]	; 139304 <syscall_pkey_free+0x18>
  1392f8:	ebffffd9 	bl	139264 <syscall_trace>
  1392fc:	e3a00000 	mov	r0, #0
  139300:	e8bd8010 	pop	{r4, pc}
  139304:	0014c648 	.word	0x0014c648

00139308 <syscall_pkey_alloc>:
  139308:	e92d4010 	push	{r4, lr}
  13930c:	e3a01013 	mov	r1, #19
  139310:	e59f0008 	ldr	r0, [pc, #8]	; 139320 <syscall_pkey_alloc+0x18>
  139314:	ebffffd2 	bl	139264 <syscall_trace>
  139318:	e3a00000 	mov	r0, #0
  13931c:	e8bd8010 	pop	{r4, pc}
  139320:	0014c634 	.word	0x0014c634

00139324 <syscall_pkey_mprotect>:
  139324:	e92d4010 	push	{r4, lr}
  139328:	e3a01016 	mov	r1, #22
  13932c:	e59f0008 	ldr	r0, [pc, #8]	; 13933c <syscall_pkey_mprotect+0x18>
  139330:	ebffffcb 	bl	139264 <syscall_trace>
  139334:	e3a00000 	mov	r0, #0
  139338:	e8bd8010 	pop	{r4, pc}
  13933c:	0014c61c 	.word	0x0014c61c

00139340 <syscall_pwritev2>:
  139340:	e92d4010 	push	{r4, lr}
  139344:	e3a01011 	mov	r1, #17
  139348:	e59f0008 	ldr	r0, [pc, #8]	; 139358 <syscall_pwritev2+0x18>
  13934c:	ebffffc4 	bl	139264 <syscall_trace>
  139350:	e3a00000 	mov	r0, #0
  139354:	e8bd8010 	pop	{r4, pc}
  139358:	0014c608 	.word	0x0014c608

0013935c <syscall_preadv2>:
  13935c:	e92d4010 	push	{r4, lr}
  139360:	e3a01010 	mov	r1, #16
  139364:	e59f0008 	ldr	r0, [pc, #8]	; 139374 <syscall_preadv2+0x18>
  139368:	ebffffbd 	bl	139264 <syscall_trace>
  13936c:	e3a00000 	mov	r0, #0
  139370:	e8bd8010 	pop	{r4, pc}
  139374:	0014c5f8 	.word	0x0014c5f8

00139378 <syscall_copy_file_range>:
  139378:	e92d4010 	push	{r4, lr}
  13937c:	e3a01018 	mov	r1, #24
  139380:	e59f0008 	ldr	r0, [pc, #8]	; 139390 <syscall_copy_file_range+0x18>
  139384:	ebffffb6 	bl	139264 <syscall_trace>
  139388:	e3a00000 	mov	r0, #0
  13938c:	e8bd8010 	pop	{r4, pc}
  139390:	0014c5e0 	.word	0x0014c5e0

00139394 <syscall_mlock2>:
  139394:	e92d4010 	push	{r4, lr}
  139398:	e3a0100f 	mov	r1, #15
  13939c:	e59f0008 	ldr	r0, [pc, #8]	; 1393ac <syscall_mlock2+0x18>
  1393a0:	ebffffaf 	bl	139264 <syscall_trace>
  1393a4:	e3a00000 	mov	r0, #0
  1393a8:	e8bd8010 	pop	{r4, pc}
  1393ac:	0014c5d0 	.word	0x0014c5d0

001393b0 <syscall_membarrier>:
  1393b0:	e92d4010 	push	{r4, lr}
  1393b4:	e3a01013 	mov	r1, #19
  1393b8:	e59f0008 	ldr	r0, [pc, #8]	; 1393c8 <syscall_membarrier+0x18>
  1393bc:	ebffffa8 	bl	139264 <syscall_trace>
  1393c0:	e3a00000 	mov	r0, #0
  1393c4:	e8bd8010 	pop	{r4, pc}
  1393c8:	0014c5bc 	.word	0x0014c5bc

001393cc <syscall_userfaultfd>:
  1393cc:	e92d4010 	push	{r4, lr}
  1393d0:	e3a01014 	mov	r1, #20
  1393d4:	e59f0008 	ldr	r0, [pc, #8]	; 1393e4 <syscall_userfaultfd+0x18>
  1393d8:	ebffffa1 	bl	139264 <syscall_trace>
  1393dc:	e3a00000 	mov	r0, #0
  1393e0:	e8bd8010 	pop	{r4, pc}
  1393e4:	0014c5a8 	.word	0x0014c5a8

001393e8 <syscall_execveat>:
  1393e8:	e92d4010 	push	{r4, lr}
  1393ec:	e3a01011 	mov	r1, #17
  1393f0:	e59f0008 	ldr	r0, [pc, #8]	; 139400 <syscall_execveat+0x18>
  1393f4:	ebffff9a 	bl	139264 <syscall_trace>
  1393f8:	e3a00000 	mov	r0, #0
  1393fc:	e8bd8010 	pop	{r4, pc}
  139400:	0014c594 	.word	0x0014c594

00139404 <syscall_bpf>:
  139404:	e92d4010 	push	{r4, lr}
  139408:	e3a0100c 	mov	r1, #12
  13940c:	e59f0008 	ldr	r0, [pc, #8]	; 13941c <syscall_bpf+0x18>
  139410:	ebffff93 	bl	139264 <syscall_trace>
  139414:	e3a00000 	mov	r0, #0
  139418:	e8bd8010 	pop	{r4, pc}
  13941c:	0014c588 	.word	0x0014c588

00139420 <syscall_memfd_create>:
  139420:	e92d4010 	push	{r4, lr}
  139424:	e3a01015 	mov	r1, #21
  139428:	e59f0008 	ldr	r0, [pc, #8]	; 139438 <syscall_memfd_create+0x18>
  13942c:	ebffff8c 	bl	139264 <syscall_trace>
  139430:	e3a00000 	mov	r0, #0
  139434:	e8bd8010 	pop	{r4, pc}
  139438:	0014c570 	.word	0x0014c570

0013943c <syscall_seccomp>:
  13943c:	e92d4010 	push	{r4, lr}
  139440:	e3a01010 	mov	r1, #16
  139444:	e59f0008 	ldr	r0, [pc, #8]	; 139454 <syscall_seccomp+0x18>
  139448:	ebffff85 	bl	139264 <syscall_trace>
  13944c:	e3a00000 	mov	r0, #0
  139450:	e8bd8010 	pop	{r4, pc}
  139454:	0014c54c 	.word	0x0014c54c

00139458 <syscall_renameat2>:
  139458:	e92d4010 	push	{r4, lr}
  13945c:	e3a01012 	mov	r1, #18
  139460:	e59f0008 	ldr	r0, [pc, #8]	; 139470 <syscall_renameat2+0x18>
  139464:	ebffff7e 	bl	139264 <syscall_trace>
  139468:	e3a00000 	mov	r0, #0
  13946c:	e8bd8010 	pop	{r4, pc}
  139470:	0014c538 	.word	0x0014c538

00139474 <syscall_sched_getattr>:
  139474:	e92d4010 	push	{r4, lr}
  139478:	e3a01016 	mov	r1, #22
  13947c:	e59f0008 	ldr	r0, [pc, #8]	; 13948c <syscall_sched_getattr+0x18>
  139480:	ebffff77 	bl	139264 <syscall_trace>
  139484:	e3a00000 	mov	r0, #0
  139488:	e8bd8010 	pop	{r4, pc}
  13948c:	0014c520 	.word	0x0014c520

00139490 <syscall_sched_setattr>:
  139490:	e92d4010 	push	{r4, lr}
  139494:	e3a01016 	mov	r1, #22
  139498:	e59f0008 	ldr	r0, [pc, #8]	; 1394a8 <syscall_sched_setattr+0x18>
  13949c:	ebffff70 	bl	139264 <syscall_trace>
  1394a0:	e3a00000 	mov	r0, #0
  1394a4:	e8bd8010 	pop	{r4, pc}
  1394a8:	0014c508 	.word	0x0014c508

001394ac <syscall_finit_module>:
  1394ac:	e92d4010 	push	{r4, lr}
  1394b0:	e3a01015 	mov	r1, #21
  1394b4:	e59f0008 	ldr	r0, [pc, #8]	; 1394c4 <syscall_finit_module+0x18>
  1394b8:	ebffff69 	bl	139264 <syscall_trace>
  1394bc:	e3a00000 	mov	r0, #0
  1394c0:	e8bd8010 	pop	{r4, pc}
  1394c4:	0014c4f0 	.word	0x0014c4f0

001394c8 <syscall_kcmp>:
  1394c8:	e92d4010 	push	{r4, lr}
  1394cc:	e3a0100d 	mov	r1, #13
  1394d0:	e59f0008 	ldr	r0, [pc, #8]	; 1394e0 <syscall_kcmp+0x18>
  1394d4:	ebffff62 	bl	139264 <syscall_trace>
  1394d8:	e3a00000 	mov	r0, #0
  1394dc:	e8bd8010 	pop	{r4, pc}
  1394e0:	0014c4e0 	.word	0x0014c4e0

001394e4 <syscall_process_vm_writev>:
  1394e4:	e92d4010 	push	{r4, lr}
  1394e8:	e3a0101a 	mov	r1, #26
  1394ec:	e59f0008 	ldr	r0, [pc, #8]	; 1394fc <syscall_process_vm_writev+0x18>
  1394f0:	ebffff5b 	bl	139264 <syscall_trace>
  1394f4:	e3a00000 	mov	r0, #0
  1394f8:	e8bd8010 	pop	{r4, pc}
  1394fc:	0014c4c4 	.word	0x0014c4c4

00139500 <syscall_process_vm_readv>:
  139500:	e92d4010 	push	{r4, lr}
  139504:	e3a01019 	mov	r1, #25
  139508:	e59f0008 	ldr	r0, [pc, #8]	; 139518 <syscall_process_vm_readv+0x18>
  13950c:	ebffff54 	bl	139264 <syscall_trace>
  139510:	e3a00000 	mov	r0, #0
  139514:	e8bd8010 	pop	{r4, pc}
  139518:	0014c4a8 	.word	0x0014c4a8

0013951c <syscall_setns>:
  13951c:	e92d4010 	push	{r4, lr}
  139520:	e3a0100e 	mov	r1, #14
  139524:	e59f0008 	ldr	r0, [pc, #8]	; 139534 <syscall_setns+0x18>
  139528:	ebffff4d 	bl	139264 <syscall_trace>
  13952c:	e3a00000 	mov	r0, #0
  139530:	e8bd8010 	pop	{r4, pc}
  139534:	0014c498 	.word	0x0014c498

00139538 <syscall_sendmmsg>:
  139538:	e92d4010 	push	{r4, lr}
  13953c:	e3a01011 	mov	r1, #17
  139540:	e59f0008 	ldr	r0, [pc, #8]	; 139550 <syscall_sendmmsg+0x18>
  139544:	ebffff46 	bl	139264 <syscall_trace>
  139548:	e3a00000 	mov	r0, #0
  13954c:	e8bd8010 	pop	{r4, pc}
  139550:	0014c484 	.word	0x0014c484

00139554 <syscall_syncfs>:
  139554:	e92d4010 	push	{r4, lr}
  139558:	e3a0100f 	mov	r1, #15
  13955c:	e59f0008 	ldr	r0, [pc, #8]	; 13956c <syscall_syncfs+0x18>
  139560:	ebffff3f 	bl	139264 <syscall_trace>
  139564:	e3a00000 	mov	r0, #0
  139568:	e8bd8010 	pop	{r4, pc}
  13956c:	0014c474 	.word	0x0014c474

00139570 <syscall_clock_adjtime>:
  139570:	e92d4010 	push	{r4, lr}
  139574:	e3a01016 	mov	r1, #22
  139578:	e59f0008 	ldr	r0, [pc, #8]	; 139588 <syscall_clock_adjtime+0x18>
  13957c:	ebffff38 	bl	139264 <syscall_trace>
  139580:	e3a00000 	mov	r0, #0
  139584:	e8bd8010 	pop	{r4, pc}
  139588:	0014c45c 	.word	0x0014c45c

0013958c <syscall_open_by_handle_at>:
  13958c:	e92d4010 	push	{r4, lr}
  139590:	e3a0101a 	mov	r1, #26
  139594:	e59f0008 	ldr	r0, [pc, #8]	; 1395a4 <syscall_open_by_handle_at+0x18>
  139598:	ebffff31 	bl	139264 <syscall_trace>
  13959c:	e3a00000 	mov	r0, #0
  1395a0:	e8bd8010 	pop	{r4, pc}
  1395a4:	0014c440 	.word	0x0014c440

001395a8 <syscall_name_to_handle_at>:
  1395a8:	e92d4010 	push	{r4, lr}
  1395ac:	e3a0101a 	mov	r1, #26
  1395b0:	e59f0008 	ldr	r0, [pc, #8]	; 1395c0 <syscall_name_to_handle_at+0x18>
  1395b4:	ebffff2a 	bl	139264 <syscall_trace>
  1395b8:	e3a00000 	mov	r0, #0
  1395bc:	e8bd8010 	pop	{r4, pc}
  1395c0:	0014c424 	.word	0x0014c424

001395c4 <syscall_fanotify_mark>:
  1395c4:	e92d4010 	push	{r4, lr}
  1395c8:	e3a01016 	mov	r1, #22
  1395cc:	e59f0008 	ldr	r0, [pc, #8]	; 1395dc <syscall_fanotify_mark+0x18>
  1395d0:	ebffff23 	bl	139264 <syscall_trace>
  1395d4:	e3a00000 	mov	r0, #0
  1395d8:	e8bd8010 	pop	{r4, pc}
  1395dc:	0014c3f8 	.word	0x0014c3f8

001395e0 <syscall_fanotify_init>:
  1395e0:	e92d4010 	push	{r4, lr}
  1395e4:	e3a01016 	mov	r1, #22
  1395e8:	e59f0008 	ldr	r0, [pc, #8]	; 1395f8 <syscall_fanotify_init+0x18>
  1395ec:	ebffff1c 	bl	139264 <syscall_trace>
  1395f0:	e3a00000 	mov	r0, #0
  1395f4:	e8bd8010 	pop	{r4, pc}
  1395f8:	0014c3e0 	.word	0x0014c3e0

001395fc <syscall_accept4>:
  1395fc:	e92d4010 	push	{r4, lr}
  139600:	e3a01010 	mov	r1, #16
  139604:	e59f0008 	ldr	r0, [pc, #8]	; 139614 <syscall_accept4+0x18>
  139608:	ebffff15 	bl	139264 <syscall_trace>
  13960c:	e3a00000 	mov	r0, #0
  139610:	e8bd8010 	pop	{r4, pc}
  139614:	0014c3d0 	.word	0x0014c3d0

00139618 <syscall_recvmmsg>:
  139618:	e92d4010 	push	{r4, lr}
  13961c:	e3a01011 	mov	r1, #17
  139620:	e59f0008 	ldr	r0, [pc, #8]	; 139630 <syscall_recvmmsg+0x18>
  139624:	ebffff0e 	bl	139264 <syscall_trace>
  139628:	e3a00000 	mov	r0, #0
  13962c:	e8bd8010 	pop	{r4, pc}
  139630:	0014c3bc 	.word	0x0014c3bc

00139634 <syscall_perf_event_open>:
  139634:	e92d4010 	push	{r4, lr}
  139638:	e3a01018 	mov	r1, #24
  13963c:	e59f0008 	ldr	r0, [pc, #8]	; 13964c <syscall_perf_event_open+0x18>
  139640:	ebffff07 	bl	139264 <syscall_trace>
  139644:	e3a00000 	mov	r0, #0
  139648:	e8bd8010 	pop	{r4, pc}
  13964c:	0014c3a4 	.word	0x0014c3a4

00139650 <syscall_rt_tgsigqueueinfo>:
  139650:	e92d4010 	push	{r4, lr}
  139654:	e3a0101a 	mov	r1, #26
  139658:	e59f0008 	ldr	r0, [pc, #8]	; 139668 <syscall_rt_tgsigqueueinfo+0x18>
  13965c:	ebffff00 	bl	139264 <syscall_trace>
  139660:	e3a00000 	mov	r0, #0
  139664:	e8bd8010 	pop	{r4, pc}
  139668:	0014c388 	.word	0x0014c388

0013966c <syscall_pwritev>:
  13966c:	e92d4010 	push	{r4, lr}
  139670:	e3a01010 	mov	r1, #16
  139674:	e59f0008 	ldr	r0, [pc, #8]	; 139684 <syscall_pwritev+0x18>
  139678:	ebfffef9 	bl	139264 <syscall_trace>
  13967c:	e3a00000 	mov	r0, #0
  139680:	e8bd8010 	pop	{r4, pc}
  139684:	0014c378 	.word	0x0014c378

00139688 <syscall_preadv>:
  139688:	e92d4010 	push	{r4, lr}
  13968c:	e3a0100f 	mov	r1, #15
  139690:	e59f0008 	ldr	r0, [pc, #8]	; 1396a0 <syscall_preadv+0x18>
  139694:	ebfffef2 	bl	139264 <syscall_trace>
  139698:	e3a00000 	mov	r0, #0
  13969c:	e8bd8010 	pop	{r4, pc}
  1396a0:	0014c368 	.word	0x0014c368

001396a4 <syscall_inotify_init1>:
  1396a4:	e92d4010 	push	{r4, lr}
  1396a8:	e3a01016 	mov	r1, #22
  1396ac:	e59f0008 	ldr	r0, [pc, #8]	; 1396bc <syscall_inotify_init1+0x18>
  1396b0:	ebfffeeb 	bl	139264 <syscall_trace>
  1396b4:	e3a00000 	mov	r0, #0
  1396b8:	e8bd8010 	pop	{r4, pc}
  1396bc:	0014c350 	.word	0x0014c350

001396c0 <syscall_pipe2>:
  1396c0:	e92d4010 	push	{r4, lr}
  1396c4:	e3a0100e 	mov	r1, #14
  1396c8:	e59f0008 	ldr	r0, [pc, #8]	; 1396d8 <syscall_pipe2+0x18>
  1396cc:	ebfffee4 	bl	139264 <syscall_trace>
  1396d0:	e3a00000 	mov	r0, #0
  1396d4:	e8bd8010 	pop	{r4, pc}
  1396d8:	0014c340 	.word	0x0014c340

001396dc <syscall_dup3>:
  1396dc:	e92d4010 	push	{r4, lr}
  1396e0:	e3a0100d 	mov	r1, #13
  1396e4:	e59f0008 	ldr	r0, [pc, #8]	; 1396f4 <syscall_dup3+0x18>
  1396e8:	ebfffedd 	bl	139264 <syscall_trace>
  1396ec:	e3a00000 	mov	r0, #0
  1396f0:	e8bd8010 	pop	{r4, pc}
  1396f4:	0014c330 	.word	0x0014c330

001396f8 <syscall_epoll_create1>:
  1396f8:	e92d4010 	push	{r4, lr}
  1396fc:	e3a01016 	mov	r1, #22
  139700:	e59f0008 	ldr	r0, [pc, #8]	; 139710 <syscall_epoll_create1+0x18>
  139704:	ebfffed6 	bl	139264 <syscall_trace>
  139708:	e3e00025 	mvn	r0, #37	; 0x25
  13970c:	e8bd8010 	pop	{r4, pc}
  139710:	0014c318 	.word	0x0014c318

00139714 <syscall_eventfd2>:
  139714:	e92d4010 	push	{r4, lr}
  139718:	e3a01011 	mov	r1, #17
  13971c:	e59f0008 	ldr	r0, [pc, #8]	; 13972c <syscall_eventfd2+0x18>
  139720:	ebfffecf 	bl	139264 <syscall_trace>
  139724:	e3a00000 	mov	r0, #0
  139728:	e8bd8010 	pop	{r4, pc}
  13972c:	0014c304 	.word	0x0014c304

00139730 <syscall_signalfd4>:
  139730:	e92d4010 	push	{r4, lr}
  139734:	e3a01012 	mov	r1, #18
  139738:	e59f0008 	ldr	r0, [pc, #8]	; 139748 <syscall_signalfd4+0x18>
  13973c:	ebfffec8 	bl	139264 <syscall_trace>
  139740:	e3a00000 	mov	r0, #0
  139744:	e8bd8010 	pop	{r4, pc}
  139748:	0014c2f0 	.word	0x0014c2f0

0013974c <syscall_timerfd_gettime>:
  13974c:	e92d4010 	push	{r4, lr}
  139750:	e3a01018 	mov	r1, #24
  139754:	e59f0008 	ldr	r0, [pc, #8]	; 139764 <syscall_timerfd_gettime+0x18>
  139758:	ebfffec1 	bl	139264 <syscall_trace>
  13975c:	e3a00000 	mov	r0, #0
  139760:	e8bd8010 	pop	{r4, pc}
  139764:	0014c2d8 	.word	0x0014c2d8

00139768 <syscall_timerfd_settime>:
  139768:	e92d4010 	push	{r4, lr}
  13976c:	e3a01018 	mov	r1, #24
  139770:	e59f0008 	ldr	r0, [pc, #8]	; 139780 <syscall_timerfd_settime+0x18>
  139774:	ebfffeba 	bl	139264 <syscall_trace>
  139778:	e3a00000 	mov	r0, #0
  13977c:	e8bd8010 	pop	{r4, pc}
  139780:	0014c2c0 	.word	0x0014c2c0

00139784 <syscall_fallocate>:
  139784:	e92d4010 	push	{r4, lr}
  139788:	e3a01012 	mov	r1, #18
  13978c:	e59f0008 	ldr	r0, [pc, #8]	; 13979c <syscall_fallocate+0x18>
  139790:	ebfffeb3 	bl	139264 <syscall_trace>
  139794:	e3a00000 	mov	r0, #0
  139798:	e8bd8010 	pop	{r4, pc}
  13979c:	0014c2ac 	.word	0x0014c2ac

001397a0 <syscall_eventfd>:
  1397a0:	e92d4010 	push	{r4, lr}
  1397a4:	e3a01010 	mov	r1, #16
  1397a8:	e59f0008 	ldr	r0, [pc, #8]	; 1397b8 <syscall_eventfd+0x18>
  1397ac:	ebfffeac 	bl	139264 <syscall_trace>
  1397b0:	e3a00000 	mov	r0, #0
  1397b4:	e8bd8010 	pop	{r4, pc}
  1397b8:	0014c29c 	.word	0x0014c29c

001397bc <syscall_timerfd_create>:
  1397bc:	e92d4010 	push	{r4, lr}
  1397c0:	e3a01017 	mov	r1, #23
  1397c4:	e59f0008 	ldr	r0, [pc, #8]	; 1397d4 <syscall_timerfd_create+0x18>
  1397c8:	ebfffea5 	bl	139264 <syscall_trace>
  1397cc:	e3a00000 	mov	r0, #0
  1397d0:	e8bd8010 	pop	{r4, pc}
  1397d4:	0014c284 	.word	0x0014c284

001397d8 <syscall_signalfd>:
  1397d8:	e92d4010 	push	{r4, lr}
  1397dc:	e3a01011 	mov	r1, #17
  1397e0:	e59f0008 	ldr	r0, [pc, #8]	; 1397f0 <syscall_signalfd+0x18>
  1397e4:	ebfffe9e 	bl	139264 <syscall_trace>
  1397e8:	e3a00000 	mov	r0, #0
  1397ec:	e8bd8010 	pop	{r4, pc}
  1397f0:	0014c270 	.word	0x0014c270

001397f4 <syscall_utimensat>:
  1397f4:	e92d4010 	push	{r4, lr}
  1397f8:	e3a01012 	mov	r1, #18
  1397fc:	e59f0008 	ldr	r0, [pc, #8]	; 13980c <syscall_utimensat+0x18>
  139800:	ebfffe97 	bl	139264 <syscall_trace>
  139804:	e3a00000 	mov	r0, #0
  139808:	e8bd8010 	pop	{r4, pc}
  13980c:	0014c25c 	.word	0x0014c25c

00139810 <syscall_kexec_load>:
  139810:	e92d4010 	push	{r4, lr}
  139814:	e3a01013 	mov	r1, #19
  139818:	e59f0008 	ldr	r0, [pc, #8]	; 139828 <syscall_kexec_load+0x18>
  13981c:	ebfffe90 	bl	139264 <syscall_trace>
  139820:	e3a00000 	mov	r0, #0
  139824:	e8bd8010 	pop	{r4, pc}
  139828:	0014c248 	.word	0x0014c248

0013982c <syscall_epoll_pwait>:
  13982c:	e92d4010 	push	{r4, lr}
  139830:	e3a01014 	mov	r1, #20
  139834:	e59f0008 	ldr	r0, [pc, #8]	; 139844 <syscall_epoll_pwait+0x18>
  139838:	ebfffe89 	bl	139264 <syscall_trace>
  13983c:	e3e00025 	mvn	r0, #37	; 0x25
  139840:	e8bd8010 	pop	{r4, pc}
  139844:	0014c234 	.word	0x0014c234

00139848 <syscall_getcpu>:
  139848:	e92d4010 	push	{r4, lr}
  13984c:	e3a0100f 	mov	r1, #15
  139850:	e59f0008 	ldr	r0, [pc, #8]	; 139860 <syscall_getcpu+0x18>
  139854:	ebfffe82 	bl	139264 <syscall_trace>
  139858:	e3a00000 	mov	r0, #0
  13985c:	e8bd8010 	pop	{r4, pc}
  139860:	0014c224 	.word	0x0014c224

00139864 <syscall_move_pages>:
  139864:	e92d4010 	push	{r4, lr}
  139868:	e3a01013 	mov	r1, #19
  13986c:	e59f0008 	ldr	r0, [pc, #8]	; 13987c <syscall_move_pages+0x18>
  139870:	ebfffe7b 	bl	139264 <syscall_trace>
  139874:	e3a00000 	mov	r0, #0
  139878:	e8bd8010 	pop	{r4, pc}
  13987c:	0014c210 	.word	0x0014c210

00139880 <syscall_vmsplice>:
  139880:	e92d4010 	push	{r4, lr}
  139884:	e3a01011 	mov	r1, #17
  139888:	e59f0008 	ldr	r0, [pc, #8]	; 139898 <syscall_vmsplice+0x18>
  13988c:	ebfffe74 	bl	139264 <syscall_trace>
  139890:	e3a00000 	mov	r0, #0
  139894:	e8bd8010 	pop	{r4, pc}
  139898:	0014c1fc 	.word	0x0014c1fc

0013989c <syscall_tee>:
  13989c:	e92d4010 	push	{r4, lr}
  1398a0:	e3a0100c 	mov	r1, #12
  1398a4:	e59f0008 	ldr	r0, [pc, #8]	; 1398b4 <syscall_tee+0x18>
  1398a8:	ebfffe6d 	bl	139264 <syscall_trace>
  1398ac:	e3a00000 	mov	r0, #0
  1398b0:	e8bd8010 	pop	{r4, pc}
  1398b4:	0014c1f0 	.word	0x0014c1f0

001398b8 <syscall_arm_sync_file_range>:
  1398b8:	e92d4010 	push	{r4, lr}
  1398bc:	e3a0101c 	mov	r1, #28
  1398c0:	e59f0008 	ldr	r0, [pc, #8]	; 1398d0 <syscall_arm_sync_file_range+0x18>
  1398c4:	ebfffe66 	bl	139264 <syscall_trace>
  1398c8:	e3a00000 	mov	r0, #0
  1398cc:	e8bd8010 	pop	{r4, pc}
  1398d0:	0014c1d4 	.word	0x0014c1d4

001398d4 <syscall_splice>:
  1398d4:	e92d4010 	push	{r4, lr}
  1398d8:	e3a0100f 	mov	r1, #15
  1398dc:	e59f0008 	ldr	r0, [pc, #8]	; 1398ec <syscall_splice+0x18>
  1398e0:	ebfffe5f 	bl	139264 <syscall_trace>
  1398e4:	e3a00000 	mov	r0, #0
  1398e8:	e8bd8010 	pop	{r4, pc}
  1398ec:	0014c1c4 	.word	0x0014c1c4

001398f0 <syscall_get_robust_list>:
  1398f0:	e92d4010 	push	{r4, lr}
  1398f4:	e3a01018 	mov	r1, #24
  1398f8:	e59f0008 	ldr	r0, [pc, #8]	; 139908 <syscall_get_robust_list+0x18>
  1398fc:	ebfffe58 	bl	139264 <syscall_trace>
  139900:	e3a00000 	mov	r0, #0
  139904:	e8bd8010 	pop	{r4, pc}
  139908:	0014c1ac 	.word	0x0014c1ac

0013990c <syscall_set_robust_list>:
  13990c:	e92d4010 	push	{r4, lr}
  139910:	e3a01018 	mov	r1, #24
  139914:	e59f0008 	ldr	r0, [pc, #8]	; 139924 <syscall_set_robust_list+0x18>
  139918:	ebfffe51 	bl	139264 <syscall_trace>
  13991c:	e3a00000 	mov	r0, #0
  139920:	e8bd8010 	pop	{r4, pc}
  139924:	0014c194 	.word	0x0014c194

00139928 <syscall_unshare>:
  139928:	e92d4010 	push	{r4, lr}
  13992c:	e3a01010 	mov	r1, #16
  139930:	e59f0008 	ldr	r0, [pc, #8]	; 139940 <syscall_unshare+0x18>
  139934:	ebfffe4a 	bl	139264 <syscall_trace>
  139938:	e3a00000 	mov	r0, #0
  13993c:	e8bd8010 	pop	{r4, pc}
  139940:	0014c184 	.word	0x0014c184

00139944 <syscall_ppoll>:
  139944:	e92d4010 	push	{r4, lr}
  139948:	e3a0100e 	mov	r1, #14
  13994c:	e59f0008 	ldr	r0, [pc, #8]	; 13995c <syscall_ppoll+0x18>
  139950:	ebfffe43 	bl	139264 <syscall_trace>
  139954:	e3a00000 	mov	r0, #0
  139958:	e8bd8010 	pop	{r4, pc}
  13995c:	0014c174 	.word	0x0014c174

00139960 <syscall_pselect6>:
  139960:	e92d4010 	push	{r4, lr}
  139964:	e3a01011 	mov	r1, #17
  139968:	e59f0008 	ldr	r0, [pc, #8]	; 139978 <syscall_pselect6+0x18>
  13996c:	ebfffe3c 	bl	139264 <syscall_trace>
  139970:	e3a00000 	mov	r0, #0
  139974:	e8bd8010 	pop	{r4, pc}
  139978:	0014c160 	.word	0x0014c160

0013997c <syscall_faccessat>:
  13997c:	e92d4010 	push	{r4, lr}
  139980:	e3a01012 	mov	r1, #18
  139984:	e59f0008 	ldr	r0, [pc, #8]	; 139994 <syscall_faccessat+0x18>
  139988:	ebfffe35 	bl	139264 <syscall_trace>
  13998c:	e3a00000 	mov	r0, #0
  139990:	e8bd8010 	pop	{r4, pc}
  139994:	0014c14c 	.word	0x0014c14c

00139998 <syscall_fchmodat>:
  139998:	e92d4010 	push	{r4, lr}
  13999c:	e3a01011 	mov	r1, #17
  1399a0:	e59f0008 	ldr	r0, [pc, #8]	; 1399b0 <syscall_fchmodat+0x18>
  1399a4:	ebfffe2e 	bl	139264 <syscall_trace>
  1399a8:	e3a00000 	mov	r0, #0
  1399ac:	e8bd8010 	pop	{r4, pc}
  1399b0:	0014c138 	.word	0x0014c138

001399b4 <syscall_readlinkat>:
  1399b4:	e92d4010 	push	{r4, lr}
  1399b8:	e3a01013 	mov	r1, #19
  1399bc:	e59f0008 	ldr	r0, [pc, #8]	; 1399cc <syscall_readlinkat+0x18>
  1399c0:	ebfffe27 	bl	139264 <syscall_trace>
  1399c4:	e3a00000 	mov	r0, #0
  1399c8:	e8bd8010 	pop	{r4, pc}
  1399cc:	0014c124 	.word	0x0014c124

001399d0 <syscall_symlinkat>:
  1399d0:	e92d4010 	push	{r4, lr}
  1399d4:	e3a01012 	mov	r1, #18
  1399d8:	e59f0008 	ldr	r0, [pc, #8]	; 1399e8 <syscall_symlinkat+0x18>
  1399dc:	ebfffe20 	bl	139264 <syscall_trace>
  1399e0:	e3a00000 	mov	r0, #0
  1399e4:	e8bd8010 	pop	{r4, pc}
  1399e8:	0014c110 	.word	0x0014c110

001399ec <syscall_linkat>:
  1399ec:	e92d4010 	push	{r4, lr}
  1399f0:	e3a0100f 	mov	r1, #15
  1399f4:	e59f0008 	ldr	r0, [pc, #8]	; 139a04 <syscall_linkat+0x18>
  1399f8:	ebfffe19 	bl	139264 <syscall_trace>
  1399fc:	e3a00000 	mov	r0, #0
  139a00:	e8bd8010 	pop	{r4, pc}
  139a04:	0014c100 	.word	0x0014c100

00139a08 <syscall_renameat>:
  139a08:	e92d4010 	push	{r4, lr}
  139a0c:	e3a01011 	mov	r1, #17
  139a10:	e59f0008 	ldr	r0, [pc, #8]	; 139a20 <syscall_renameat+0x18>
  139a14:	ebfffe12 	bl	139264 <syscall_trace>
  139a18:	e3a00000 	mov	r0, #0
  139a1c:	e8bd8010 	pop	{r4, pc}
  139a20:	0014c0ec 	.word	0x0014c0ec

00139a24 <syscall_unlinkat>:
  139a24:	e92d4010 	push	{r4, lr}
  139a28:	e3a01011 	mov	r1, #17
  139a2c:	e59f0008 	ldr	r0, [pc, #8]	; 139a3c <syscall_unlinkat+0x18>
  139a30:	ebfffe0b 	bl	139264 <syscall_trace>
  139a34:	e3a00000 	mov	r0, #0
  139a38:	e8bd8010 	pop	{r4, pc}
  139a3c:	0014c0d8 	.word	0x0014c0d8

00139a40 <syscall_fstatat64>:
  139a40:	e92d4010 	push	{r4, lr}
  139a44:	e3a01012 	mov	r1, #18
  139a48:	e59f0008 	ldr	r0, [pc, #8]	; 139a58 <syscall_fstatat64+0x18>
  139a4c:	ebfffe04 	bl	139264 <syscall_trace>
  139a50:	e3a00000 	mov	r0, #0
  139a54:	e8bd8010 	pop	{r4, pc}
  139a58:	0014c0c4 	.word	0x0014c0c4

00139a5c <syscall_futimesat>:
  139a5c:	e92d4010 	push	{r4, lr}
  139a60:	e3a01012 	mov	r1, #18
  139a64:	e59f0008 	ldr	r0, [pc, #8]	; 139a74 <syscall_futimesat+0x18>
  139a68:	ebfffdfd 	bl	139264 <syscall_trace>
  139a6c:	e3a00000 	mov	r0, #0
  139a70:	e8bd8010 	pop	{r4, pc}
  139a74:	0014c0b0 	.word	0x0014c0b0

00139a78 <syscall_fchownat>:
  139a78:	e92d4010 	push	{r4, lr}
  139a7c:	e3a01011 	mov	r1, #17
  139a80:	e59f0008 	ldr	r0, [pc, #8]	; 139a90 <syscall_fchownat+0x18>
  139a84:	ebfffdf6 	bl	139264 <syscall_trace>
  139a88:	e3a00000 	mov	r0, #0
  139a8c:	e8bd8010 	pop	{r4, pc}
  139a90:	0014c09c 	.word	0x0014c09c

00139a94 <syscall_mknodat>:
  139a94:	e92d4010 	push	{r4, lr}
  139a98:	e3a01010 	mov	r1, #16
  139a9c:	e59f0008 	ldr	r0, [pc, #8]	; 139aac <syscall_mknodat+0x18>
  139aa0:	ebfffdef 	bl	139264 <syscall_trace>
  139aa4:	e3a00000 	mov	r0, #0
  139aa8:	e8bd8010 	pop	{r4, pc}
  139aac:	0014c08c 	.word	0x0014c08c

00139ab0 <syscall_mkdirat>:
  139ab0:	e92d4010 	push	{r4, lr}
  139ab4:	e3a01010 	mov	r1, #16
  139ab8:	e59f0008 	ldr	r0, [pc, #8]	; 139ac8 <syscall_mkdirat+0x18>
  139abc:	ebfffde8 	bl	139264 <syscall_trace>
  139ac0:	e3a00000 	mov	r0, #0
  139ac4:	e8bd8010 	pop	{r4, pc}
  139ac8:	0014c07c 	.word	0x0014c07c

00139acc <syscall_openat>:
  139acc:	e92d4010 	push	{r4, lr}
  139ad0:	e3a0100f 	mov	r1, #15
  139ad4:	e59f0008 	ldr	r0, [pc, #8]	; 139ae4 <syscall_openat+0x18>
  139ad8:	ebfffde1 	bl	139264 <syscall_trace>
  139adc:	e3a00000 	mov	r0, #0
  139ae0:	e8bd8010 	pop	{r4, pc}
  139ae4:	0014c06c 	.word	0x0014c06c

00139ae8 <syscall_set_mempolicy>:
  139ae8:	e92d4010 	push	{r4, lr}
  139aec:	e3a01016 	mov	r1, #22
  139af0:	e59f0008 	ldr	r0, [pc, #8]	; 139b00 <syscall_set_mempolicy+0x18>
  139af4:	ebfffdda 	bl	139264 <syscall_trace>
  139af8:	e3a00000 	mov	r0, #0
  139afc:	e8bd8010 	pop	{r4, pc}
  139b00:	0014c054 	.word	0x0014c054

00139b04 <syscall_get_mempolicy>:
  139b04:	e92d4010 	push	{r4, lr}
  139b08:	e3a01016 	mov	r1, #22
  139b0c:	e59f0008 	ldr	r0, [pc, #8]	; 139b1c <syscall_get_mempolicy+0x18>
  139b10:	ebfffdd3 	bl	139264 <syscall_trace>
  139b14:	e3a00000 	mov	r0, #0
  139b18:	e8bd8010 	pop	{r4, pc}
  139b1c:	0014c03c 	.word	0x0014c03c

00139b20 <syscall_mbind>:
  139b20:	e92d4010 	push	{r4, lr}
  139b24:	e3a0100e 	mov	r1, #14
  139b28:	e59f0008 	ldr	r0, [pc, #8]	; 139b38 <syscall_mbind+0x18>
  139b2c:	ebfffdcc 	bl	139264 <syscall_trace>
  139b30:	e3a00000 	mov	r0, #0
  139b34:	e8bd8010 	pop	{r4, pc}
  139b38:	0014c02c 	.word	0x0014c02c

00139b3c <syscall_inotify_rm_watch>:
  139b3c:	e92d4010 	push	{r4, lr}
  139b40:	e3a01019 	mov	r1, #25
  139b44:	e59f0008 	ldr	r0, [pc, #8]	; 139b54 <syscall_inotify_rm_watch+0x18>
  139b48:	ebfffdc5 	bl	139264 <syscall_trace>
  139b4c:	e3a00000 	mov	r0, #0
  139b50:	e8bd8010 	pop	{r4, pc}
  139b54:	0014c010 	.word	0x0014c010

00139b58 <syscall_inotify_add_watch>:
  139b58:	e92d4010 	push	{r4, lr}
  139b5c:	e3a0101a 	mov	r1, #26
  139b60:	e59f0008 	ldr	r0, [pc, #8]	; 139b70 <syscall_inotify_add_watch+0x18>
  139b64:	ebfffdbe 	bl	139264 <syscall_trace>
  139b68:	e3a00000 	mov	r0, #0
  139b6c:	e8bd8010 	pop	{r4, pc}
  139b70:	0014bff4 	.word	0x0014bff4

00139b74 <syscall_inotify_init>:
  139b74:	e92d4010 	push	{r4, lr}
  139b78:	e3a01015 	mov	r1, #21
  139b7c:	e59f0008 	ldr	r0, [pc, #8]	; 139b8c <syscall_inotify_init+0x18>
  139b80:	ebfffdb7 	bl	139264 <syscall_trace>
  139b84:	e3a00000 	mov	r0, #0
  139b88:	e8bd8010 	pop	{r4, pc}
  139b8c:	0014bfdc 	.word	0x0014bfdc

00139b90 <syscall_ioprio_get>:
  139b90:	e92d4010 	push	{r4, lr}
  139b94:	e3a01013 	mov	r1, #19
  139b98:	e59f0008 	ldr	r0, [pc, #8]	; 139ba8 <syscall_ioprio_get+0x18>
  139b9c:	ebfffdb0 	bl	139264 <syscall_trace>
  139ba0:	e3a00000 	mov	r0, #0
  139ba4:	e8bd8010 	pop	{r4, pc}
  139ba8:	0014bfc8 	.word	0x0014bfc8

00139bac <syscall_ioprio_set>:
  139bac:	e92d4010 	push	{r4, lr}
  139bb0:	e3a01013 	mov	r1, #19
  139bb4:	e59f0008 	ldr	r0, [pc, #8]	; 139bc4 <syscall_ioprio_set+0x18>
  139bb8:	ebfffda9 	bl	139264 <syscall_trace>
  139bbc:	e3a00000 	mov	r0, #0
  139bc0:	e8bd8010 	pop	{r4, pc}
  139bc4:	0014bfb4 	.word	0x0014bfb4

00139bc8 <syscall_vserver>:
  139bc8:	e92d4010 	push	{r4, lr}
  139bcc:	e3a01010 	mov	r1, #16
  139bd0:	e59f0008 	ldr	r0, [pc, #8]	; 139be0 <syscall_vserver+0x18>
  139bd4:	ebfffda2 	bl	139264 <syscall_trace>
  139bd8:	e3a00000 	mov	r0, #0
  139bdc:	e8bd8010 	pop	{r4, pc}
  139be0:	0014bfa4 	.word	0x0014bfa4

00139be4 <syscall_semtimedop>:
  139be4:	e92d4010 	push	{r4, lr}
  139be8:	e3a01013 	mov	r1, #19
  139bec:	e59f0008 	ldr	r0, [pc, #8]	; 139bfc <syscall_semtimedop+0x18>
  139bf0:	ebfffd9b 	bl	139264 <syscall_trace>
  139bf4:	e3a00000 	mov	r0, #0
  139bf8:	e8bd8010 	pop	{r4, pc}
  139bfc:	0014bf90 	.word	0x0014bf90

00139c00 <syscall_keyctl>:
  139c00:	e92d4010 	push	{r4, lr}
  139c04:	e3a0100f 	mov	r1, #15
  139c08:	e59f0008 	ldr	r0, [pc, #8]	; 139c18 <syscall_keyctl+0x18>
  139c0c:	ebfffd94 	bl	139264 <syscall_trace>
  139c10:	e3a00000 	mov	r0, #0
  139c14:	e8bd8010 	pop	{r4, pc}
  139c18:	0014bf80 	.word	0x0014bf80

00139c1c <syscall_request_key>:
  139c1c:	e92d4010 	push	{r4, lr}
  139c20:	e3a01014 	mov	r1, #20
  139c24:	e59f0008 	ldr	r0, [pc, #8]	; 139c34 <syscall_request_key+0x18>
  139c28:	ebfffd8d 	bl	139264 <syscall_trace>
  139c2c:	e3a00000 	mov	r0, #0
  139c30:	e8bd8010 	pop	{r4, pc}
  139c34:	0014bf6c 	.word	0x0014bf6c

00139c38 <syscall_add_key>:
  139c38:	e92d4010 	push	{r4, lr}
  139c3c:	e3a01010 	mov	r1, #16
  139c40:	e59f0008 	ldr	r0, [pc, #8]	; 139c50 <syscall_add_key+0x18>
  139c44:	ebfffd86 	bl	139264 <syscall_trace>
  139c48:	e3a00000 	mov	r0, #0
  139c4c:	e8bd8010 	pop	{r4, pc}
  139c50:	0014bf5c 	.word	0x0014bf5c

00139c54 <syscall_msgctl>:
  139c54:	e92d4010 	push	{r4, lr}
  139c58:	e3a0100f 	mov	r1, #15
  139c5c:	e59f0008 	ldr	r0, [pc, #8]	; 139c6c <syscall_msgctl+0x18>
  139c60:	ebfffd7f 	bl	139264 <syscall_trace>
  139c64:	e3a00000 	mov	r0, #0
  139c68:	e8bd8010 	pop	{r4, pc}
  139c6c:	0014bf0c 	.word	0x0014bf0c

00139c70 <syscall_msgget>:
  139c70:	e92d4010 	push	{r4, lr}
  139c74:	e3a0100f 	mov	r1, #15
  139c78:	e59f0008 	ldr	r0, [pc, #8]	; 139c88 <syscall_msgget+0x18>
  139c7c:	ebfffd78 	bl	139264 <syscall_trace>
  139c80:	e3a00000 	mov	r0, #0
  139c84:	e8bd8010 	pop	{r4, pc}
  139c88:	0014befc 	.word	0x0014befc

00139c8c <syscall_msgrcv>:
  139c8c:	e92d4010 	push	{r4, lr}
  139c90:	e3a0100f 	mov	r1, #15
  139c94:	e59f0008 	ldr	r0, [pc, #8]	; 139ca4 <syscall_msgrcv+0x18>
  139c98:	ebfffd71 	bl	139264 <syscall_trace>
  139c9c:	e3a00000 	mov	r0, #0
  139ca0:	e8bd8010 	pop	{r4, pc}
  139ca4:	0014beec 	.word	0x0014beec

00139ca8 <syscall_msgsnd>:
  139ca8:	e92d4010 	push	{r4, lr}
  139cac:	e3a0100f 	mov	r1, #15
  139cb0:	e59f0008 	ldr	r0, [pc, #8]	; 139cc0 <syscall_msgsnd+0x18>
  139cb4:	ebfffd6a 	bl	139264 <syscall_trace>
  139cb8:	e3a00000 	mov	r0, #0
  139cbc:	e8bd8010 	pop	{r4, pc}
  139cc0:	0014bedc 	.word	0x0014bedc

00139cc4 <syscall_semctl>:
  139cc4:	e92d4010 	push	{r4, lr}
  139cc8:	e3a0100f 	mov	r1, #15
  139ccc:	e59f0008 	ldr	r0, [pc, #8]	; 139cdc <syscall_semctl+0x18>
  139cd0:	ebfffd63 	bl	139264 <syscall_trace>
  139cd4:	e3a00000 	mov	r0, #0
  139cd8:	e8bd8010 	pop	{r4, pc}
  139cdc:	0014becc 	.word	0x0014becc

00139ce0 <syscall_semget>:
  139ce0:	e92d4010 	push	{r4, lr}
  139ce4:	e3a0100f 	mov	r1, #15
  139ce8:	e59f0008 	ldr	r0, [pc, #8]	; 139cf8 <syscall_semget+0x18>
  139cec:	ebfffd5c 	bl	139264 <syscall_trace>
  139cf0:	e3a00000 	mov	r0, #0
  139cf4:	e8bd8010 	pop	{r4, pc}
  139cf8:	0014bebc 	.word	0x0014bebc

00139cfc <syscall_semop>:
  139cfc:	e92d4010 	push	{r4, lr}
  139d00:	e3a0100e 	mov	r1, #14
  139d04:	e59f0008 	ldr	r0, [pc, #8]	; 139d14 <syscall_semop+0x18>
  139d08:	ebfffd55 	bl	139264 <syscall_trace>
  139d0c:	e3a00000 	mov	r0, #0
  139d10:	e8bd8010 	pop	{r4, pc}
  139d14:	0014beac 	.word	0x0014beac

00139d18 <syscall_recvmsg>:
  139d18:	e92d4010 	push	{r4, lr}
  139d1c:	e3a01010 	mov	r1, #16
  139d20:	e59f0008 	ldr	r0, [pc, #8]	; 139d30 <syscall_recvmsg+0x18>
  139d24:	ebfffd4e 	bl	139264 <syscall_trace>
  139d28:	e3a00000 	mov	r0, #0
  139d2c:	e8bd8010 	pop	{r4, pc}
  139d30:	0014be9c 	.word	0x0014be9c

00139d34 <syscall_sendmsg>:
  139d34:	e92d4010 	push	{r4, lr}
  139d38:	e3a01010 	mov	r1, #16
  139d3c:	e59f0008 	ldr	r0, [pc, #8]	; 139d4c <syscall_sendmsg+0x18>
  139d40:	ebfffd47 	bl	139264 <syscall_trace>
  139d44:	e3a00000 	mov	r0, #0
  139d48:	e8bd8010 	pop	{r4, pc}
  139d4c:	0014be8c 	.word	0x0014be8c

00139d50 <syscall_shutdown>:
  139d50:	e92d4010 	push	{r4, lr}
  139d54:	e3a01011 	mov	r1, #17
  139d58:	e59f0008 	ldr	r0, [pc, #8]	; 139d68 <syscall_shutdown+0x18>
  139d5c:	ebfffd40 	bl	139264 <syscall_trace>
  139d60:	e3a00000 	mov	r0, #0
  139d64:	e8bd8010 	pop	{r4, pc}
  139d68:	0014be50 	.word	0x0014be50

00139d6c <syscall_socketpair>:
  139d6c:	e92d4010 	push	{r4, lr}
  139d70:	e3a01013 	mov	r1, #19
  139d74:	e59f0008 	ldr	r0, [pc, #8]	; 139d84 <syscall_socketpair+0x18>
  139d78:	ebfffd39 	bl	139264 <syscall_trace>
  139d7c:	e3a00000 	mov	r0, #0
  139d80:	e8bd8010 	pop	{r4, pc}
  139d84:	0014bdf8 	.word	0x0014bdf8

00139d88 <syscall_waitid>:
  139d88:	e92d4010 	push	{r4, lr}
  139d8c:	e3a0100f 	mov	r1, #15
  139d90:	e59f0008 	ldr	r0, [pc, #8]	; 139da0 <syscall_waitid+0x18>
  139d94:	ebfffd32 	bl	139264 <syscall_trace>
  139d98:	e3a00000 	mov	r0, #0
  139d9c:	e8bd8010 	pop	{r4, pc}
  139da0:	0014bd70 	.word	0x0014bd70

00139da4 <syscall_mq_getsetattr>:
  139da4:	e92d4010 	push	{r4, lr}
  139da8:	e3a01016 	mov	r1, #22
  139dac:	e59f0008 	ldr	r0, [pc, #8]	; 139dbc <syscall_mq_getsetattr+0x18>
  139db0:	ebfffd2b 	bl	139264 <syscall_trace>
  139db4:	e3a00000 	mov	r0, #0
  139db8:	e8bd8010 	pop	{r4, pc}
  139dbc:	0014bd58 	.word	0x0014bd58

00139dc0 <syscall_mq_notify>:
  139dc0:	e92d4010 	push	{r4, lr}
  139dc4:	e3a01012 	mov	r1, #18
  139dc8:	e59f0008 	ldr	r0, [pc, #8]	; 139dd8 <syscall_mq_notify+0x18>
  139dcc:	ebfffd24 	bl	139264 <syscall_trace>
  139dd0:	e3a00000 	mov	r0, #0
  139dd4:	e8bd8010 	pop	{r4, pc}
  139dd8:	0014bd44 	.word	0x0014bd44

00139ddc <syscall_mq_timedreceive>:
  139ddc:	e92d4010 	push	{r4, lr}
  139de0:	e3a01018 	mov	r1, #24
  139de4:	e59f0008 	ldr	r0, [pc, #8]	; 139df4 <syscall_mq_timedreceive+0x18>
  139de8:	ebfffd1d 	bl	139264 <syscall_trace>
  139dec:	e3a00000 	mov	r0, #0
  139df0:	e8bd8010 	pop	{r4, pc}
  139df4:	0014bd2c 	.word	0x0014bd2c

00139df8 <syscall_mq_timedsend>:
  139df8:	e92d4010 	push	{r4, lr}
  139dfc:	e3a01015 	mov	r1, #21
  139e00:	e59f0008 	ldr	r0, [pc, #8]	; 139e10 <syscall_mq_timedsend+0x18>
  139e04:	ebfffd16 	bl	139264 <syscall_trace>
  139e08:	e3a00000 	mov	r0, #0
  139e0c:	e8bd8010 	pop	{r4, pc}
  139e10:	0014bd14 	.word	0x0014bd14

00139e14 <syscall_mq_unlink>:
  139e14:	e92d4010 	push	{r4, lr}
  139e18:	e3a01012 	mov	r1, #18
  139e1c:	e59f0008 	ldr	r0, [pc, #8]	; 139e2c <syscall_mq_unlink+0x18>
  139e20:	ebfffd0f 	bl	139264 <syscall_trace>
  139e24:	e3a00000 	mov	r0, #0
  139e28:	e8bd8010 	pop	{r4, pc}
  139e2c:	0014bd00 	.word	0x0014bd00

00139e30 <syscall_mq_open>:
  139e30:	e92d4010 	push	{r4, lr}
  139e34:	e3a01010 	mov	r1, #16
  139e38:	e59f0008 	ldr	r0, [pc, #8]	; 139e48 <syscall_mq_open+0x18>
  139e3c:	ebfffd08 	bl	139264 <syscall_trace>
  139e40:	e3a00000 	mov	r0, #0
  139e44:	e8bd8010 	pop	{r4, pc}
  139e48:	0014bcf0 	.word	0x0014bcf0

00139e4c <syscall_pciconfig_write>:
  139e4c:	e92d4010 	push	{r4, lr}
  139e50:	e3a01018 	mov	r1, #24
  139e54:	e59f0008 	ldr	r0, [pc, #8]	; 139e64 <syscall_pciconfig_write+0x18>
  139e58:	ebfffd01 	bl	139264 <syscall_trace>
  139e5c:	e3a00000 	mov	r0, #0
  139e60:	e8bd8010 	pop	{r4, pc}
  139e64:	0014bcd8 	.word	0x0014bcd8

00139e68 <syscall_pciconfig_read>:
  139e68:	e92d4010 	push	{r4, lr}
  139e6c:	e3a01017 	mov	r1, #23
  139e70:	e59f0008 	ldr	r0, [pc, #8]	; 139e80 <syscall_pciconfig_read+0x18>
  139e74:	ebfffcfa 	bl	139264 <syscall_trace>
  139e78:	e3a00000 	mov	r0, #0
  139e7c:	e8bd8010 	pop	{r4, pc}
  139e80:	0014bcc0 	.word	0x0014bcc0

00139e84 <syscall_pciconfig_iobase>:
  139e84:	e92d4010 	push	{r4, lr}
  139e88:	e3a01019 	mov	r1, #25
  139e8c:	e59f0008 	ldr	r0, [pc, #8]	; 139e9c <syscall_pciconfig_iobase+0x18>
  139e90:	ebfffcf3 	bl	139264 <syscall_trace>
  139e94:	e3a00000 	mov	r0, #0
  139e98:	e8bd8010 	pop	{r4, pc}
  139e9c:	0014bca4 	.word	0x0014bca4

00139ea0 <syscall_arm_fadvise64_64>:
  139ea0:	e92d4010 	push	{r4, lr}
  139ea4:	e3a01019 	mov	r1, #25
  139ea8:	e59f0008 	ldr	r0, [pc, #8]	; 139eb8 <syscall_arm_fadvise64_64+0x18>
  139eac:	ebfffcec 	bl	139264 <syscall_trace>
  139eb0:	e3a00000 	mov	r0, #0
  139eb4:	e8bd8010 	pop	{r4, pc}
  139eb8:	0014bc88 	.word	0x0014bc88

00139ebc <syscall_utimes>:
  139ebc:	e92d4010 	push	{r4, lr}
  139ec0:	e3a0100f 	mov	r1, #15
  139ec4:	e59f0008 	ldr	r0, [pc, #8]	; 139ed4 <syscall_utimes+0x18>
  139ec8:	ebfffce5 	bl	139264 <syscall_trace>
  139ecc:	e3a00000 	mov	r0, #0
  139ed0:	e8bd8010 	pop	{r4, pc}
  139ed4:	0014bc78 	.word	0x0014bc78

00139ed8 <syscall_tgkill>:
  139ed8:	e92d4010 	push	{r4, lr}
  139edc:	e3a0100f 	mov	r1, #15
  139ee0:	e59f0008 	ldr	r0, [pc, #8]	; 139ef0 <syscall_tgkill+0x18>
  139ee4:	ebfffcde 	bl	139264 <syscall_trace>
  139ee8:	e3a00000 	mov	r0, #0
  139eec:	e8bd8010 	pop	{r4, pc}
  139ef0:	0014bc68 	.word	0x0014bc68

00139ef4 <syscall_fstatfs64>:
  139ef4:	e92d4010 	push	{r4, lr}
  139ef8:	e3a01012 	mov	r1, #18
  139efc:	e59f0008 	ldr	r0, [pc, #8]	; 139f0c <syscall_fstatfs64+0x18>
  139f00:	ebfffcd7 	bl	139264 <syscall_trace>
  139f04:	e3a00000 	mov	r0, #0
  139f08:	e8bd8010 	pop	{r4, pc}
  139f0c:	0014bc54 	.word	0x0014bc54

00139f10 <syscall_statfs64>:
  139f10:	e92d4010 	push	{r4, lr}
  139f14:	e3a01011 	mov	r1, #17
  139f18:	e59f0008 	ldr	r0, [pc, #8]	; 139f28 <syscall_statfs64+0x18>
  139f1c:	ebfffcd0 	bl	139264 <syscall_trace>
  139f20:	e3a00000 	mov	r0, #0
  139f24:	e8bd8010 	pop	{r4, pc}
  139f28:	0014bc40 	.word	0x0014bc40

00139f2c <syscall_clock_nanosleep>:
  139f2c:	e92d4010 	push	{r4, lr}
  139f30:	e3a01018 	mov	r1, #24
  139f34:	e59f0008 	ldr	r0, [pc, #8]	; 139f44 <syscall_clock_nanosleep+0x18>
  139f38:	ebfffcc9 	bl	139264 <syscall_trace>
  139f3c:	e3a00000 	mov	r0, #0
  139f40:	e8bd8010 	pop	{r4, pc}
  139f44:	0014bc28 	.word	0x0014bc28

00139f48 <syscall_timer_delete>:
  139f48:	e92d4010 	push	{r4, lr}
  139f4c:	e3a01015 	mov	r1, #21
  139f50:	e59f0008 	ldr	r0, [pc, #8]	; 139f60 <syscall_timer_delete+0x18>
  139f54:	ebfffcc2 	bl	139264 <syscall_trace>
  139f58:	e3a00000 	mov	r0, #0
  139f5c:	e8bd8010 	pop	{r4, pc}
  139f60:	0014bbc8 	.word	0x0014bbc8

00139f64 <syscall_timer_getoverrun>:
  139f64:	e92d4010 	push	{r4, lr}
  139f68:	e3a01019 	mov	r1, #25
  139f6c:	e59f0008 	ldr	r0, [pc, #8]	; 139f7c <syscall_timer_getoverrun+0x18>
  139f70:	ebfffcbb 	bl	139264 <syscall_trace>
  139f74:	e3a00000 	mov	r0, #0
  139f78:	e8bd8010 	pop	{r4, pc}
  139f7c:	0014bbac 	.word	0x0014bbac

00139f80 <syscall_timer_gettime>:
  139f80:	e92d4010 	push	{r4, lr}
  139f84:	e3a01016 	mov	r1, #22
  139f88:	e59f0008 	ldr	r0, [pc, #8]	; 139f98 <syscall_timer_gettime+0x18>
  139f8c:	ebfffcb4 	bl	139264 <syscall_trace>
  139f90:	e3a00000 	mov	r0, #0
  139f94:	e8bd8010 	pop	{r4, pc}
  139f98:	0014bb94 	.word	0x0014bb94

00139f9c <syscall_timer_settime>:
  139f9c:	e92d4010 	push	{r4, lr}
  139fa0:	e3a01016 	mov	r1, #22
  139fa4:	e59f0008 	ldr	r0, [pc, #8]	; 139fb4 <syscall_timer_settime+0x18>
  139fa8:	ebfffcad 	bl	139264 <syscall_trace>
  139fac:	e3a00000 	mov	r0, #0
  139fb0:	e8bd8010 	pop	{r4, pc}
  139fb4:	0014bb7c 	.word	0x0014bb7c

00139fb8 <syscall_timer_create>:
  139fb8:	e92d4010 	push	{r4, lr}
  139fbc:	e3a01015 	mov	r1, #21
  139fc0:	e59f0008 	ldr	r0, [pc, #8]	; 139fd0 <syscall_timer_create+0x18>
  139fc4:	ebfffca6 	bl	139264 <syscall_trace>
  139fc8:	e3a00000 	mov	r0, #0
  139fcc:	e8bd8010 	pop	{r4, pc}
  139fd0:	0014bb64 	.word	0x0014bb64

00139fd4 <syscall_remap_file_pages>:
  139fd4:	e92d4010 	push	{r4, lr}
  139fd8:	e3a01019 	mov	r1, #25
  139fdc:	e59f0008 	ldr	r0, [pc, #8]	; 139fec <syscall_remap_file_pages+0x18>
  139fe0:	ebfffc9f 	bl	139264 <syscall_trace>
  139fe4:	e3a00000 	mov	r0, #0
  139fe8:	e8bd8010 	pop	{r4, pc}
  139fec:	0014bb30 	.word	0x0014bb30

00139ff0 <syscall_epoll_wait>:
  139ff0:	e92d4010 	push	{r4, lr}
  139ff4:	e3a01013 	mov	r1, #19
  139ff8:	e59f0008 	ldr	r0, [pc, #8]	; 13a008 <syscall_epoll_wait+0x18>
  139ffc:	ebfffc98 	bl	139264 <syscall_trace>
  13a000:	e3e00025 	mvn	r0, #37	; 0x25
  13a004:	e8bd8010 	pop	{r4, pc}
  13a008:	0014bb1c 	.word	0x0014bb1c

0013a00c <syscall_epoll_ctl>:
  13a00c:	e92d4010 	push	{r4, lr}
  13a010:	e3a01012 	mov	r1, #18
  13a014:	e59f0008 	ldr	r0, [pc, #8]	; 13a024 <syscall_epoll_ctl+0x18>
  13a018:	ebfffc91 	bl	139264 <syscall_trace>
  13a01c:	e3e00025 	mvn	r0, #37	; 0x25
  13a020:	e8bd8010 	pop	{r4, pc}
  13a024:	0014bb08 	.word	0x0014bb08

0013a028 <syscall_epoll_create>:
  13a028:	e92d4010 	push	{r4, lr}
  13a02c:	e3a01015 	mov	r1, #21
  13a030:	e59f0008 	ldr	r0, [pc, #8]	; 13a040 <syscall_epoll_create+0x18>
  13a034:	ebfffc8a 	bl	139264 <syscall_trace>
  13a038:	e3e00025 	mvn	r0, #37	; 0x25
  13a03c:	e8bd8010 	pop	{r4, pc}
  13a040:	0014baf0 	.word	0x0014baf0

0013a044 <syscall_lookup_dcookie>:
  13a044:	e92d4010 	push	{r4, lr}
  13a048:	e3a01017 	mov	r1, #23
  13a04c:	e59f0008 	ldr	r0, [pc, #8]	; 13a05c <syscall_lookup_dcookie+0x18>
  13a050:	ebfffc83 	bl	139264 <syscall_trace>
  13a054:	e3a00000 	mov	r0, #0
  13a058:	e8bd8010 	pop	{r4, pc}
  13a05c:	0014bad8 	.word	0x0014bad8

0013a060 <syscall_io_cancel>:
  13a060:	e92d4010 	push	{r4, lr}
  13a064:	e3a01012 	mov	r1, #18
  13a068:	e59f0008 	ldr	r0, [pc, #8]	; 13a078 <syscall_io_cancel+0x18>
  13a06c:	ebfffc7c 	bl	139264 <syscall_trace>
  13a070:	e3a00000 	mov	r0, #0
  13a074:	e8bd8010 	pop	{r4, pc}
  13a078:	0014bab0 	.word	0x0014bab0

0013a07c <syscall_io_submit>:
  13a07c:	e92d4010 	push	{r4, lr}
  13a080:	e3a01012 	mov	r1, #18
  13a084:	e59f0008 	ldr	r0, [pc, #8]	; 13a094 <syscall_io_submit+0x18>
  13a088:	ebfffc75 	bl	139264 <syscall_trace>
  13a08c:	e3a00000 	mov	r0, #0
  13a090:	e8bd8010 	pop	{r4, pc}
  13a094:	0014ba9c 	.word	0x0014ba9c

0013a098 <syscall_io_getevents>:
  13a098:	e92d4010 	push	{r4, lr}
  13a09c:	e3a01015 	mov	r1, #21
  13a0a0:	e59f0008 	ldr	r0, [pc, #8]	; 13a0b0 <syscall_io_getevents+0x18>
  13a0a4:	ebfffc6e 	bl	139264 <syscall_trace>
  13a0a8:	e3a00000 	mov	r0, #0
  13a0ac:	e8bd8010 	pop	{r4, pc}
  13a0b0:	0014ba84 	.word	0x0014ba84

0013a0b4 <syscall_io_destroy>:
  13a0b4:	e92d4010 	push	{r4, lr}
  13a0b8:	e3a01013 	mov	r1, #19
  13a0bc:	e59f0008 	ldr	r0, [pc, #8]	; 13a0cc <syscall_io_destroy+0x18>
  13a0c0:	ebfffc67 	bl	139264 <syscall_trace>
  13a0c4:	e3a00000 	mov	r0, #0
  13a0c8:	e8bd8010 	pop	{r4, pc}
  13a0cc:	0014ba70 	.word	0x0014ba70

0013a0d0 <syscall_io_setup>:
  13a0d0:	e92d4010 	push	{r4, lr}
  13a0d4:	e3a01011 	mov	r1, #17
  13a0d8:	e59f0008 	ldr	r0, [pc, #8]	; 13a0e8 <syscall_io_setup+0x18>
  13a0dc:	ebfffc60 	bl	139264 <syscall_trace>
  13a0e0:	e3a00000 	mov	r0, #0
  13a0e4:	e8bd8010 	pop	{r4, pc}
  13a0e8:	0014ba5c 	.word	0x0014ba5c

0013a0ec <syscall_sched_getaffinity>:
  13a0ec:	e92d4010 	push	{r4, lr}
  13a0f0:	e3a0101a 	mov	r1, #26
  13a0f4:	e59f0008 	ldr	r0, [pc, #8]	; 13a104 <syscall_sched_getaffinity+0x18>
  13a0f8:	ebfffc59 	bl	139264 <syscall_trace>
  13a0fc:	e3a00000 	mov	r0, #0
  13a100:	e8bd8010 	pop	{r4, pc}
  13a104:	0014ba40 	.word	0x0014ba40

0013a108 <syscall_sendfile64>:
  13a108:	e92d4010 	push	{r4, lr}
  13a10c:	e3a01013 	mov	r1, #19
  13a110:	e59f0008 	ldr	r0, [pc, #8]	; 13a120 <syscall_sendfile64+0x18>
  13a114:	ebfffc52 	bl	139264 <syscall_trace>
  13a118:	e3a00000 	mov	r0, #0
  13a11c:	e8bd8010 	pop	{r4, pc}
  13a120:	0014ba00 	.word	0x0014ba00

0013a124 <syscall_fremovexattr>:
  13a124:	e92d4010 	push	{r4, lr}
  13a128:	e3a01015 	mov	r1, #21
  13a12c:	e59f0008 	ldr	r0, [pc, #8]	; 13a13c <syscall_fremovexattr+0x18>
  13a130:	ebfffc4b 	bl	139264 <syscall_trace>
  13a134:	e3a00000 	mov	r0, #0
  13a138:	e8bd8010 	pop	{r4, pc}
  13a13c:	0014b9d8 	.word	0x0014b9d8

0013a140 <syscall_lremovexattr>:
  13a140:	e92d4010 	push	{r4, lr}
  13a144:	e3a01015 	mov	r1, #21
  13a148:	e59f0008 	ldr	r0, [pc, #8]	; 13a158 <syscall_lremovexattr+0x18>
  13a14c:	ebfffc44 	bl	139264 <syscall_trace>
  13a150:	e3a00000 	mov	r0, #0
  13a154:	e8bd8010 	pop	{r4, pc}
  13a158:	0014b9c0 	.word	0x0014b9c0

0013a15c <syscall_removexattr>:
  13a15c:	e92d4010 	push	{r4, lr}
  13a160:	e3a01014 	mov	r1, #20
  13a164:	e59f0008 	ldr	r0, [pc, #8]	; 13a174 <syscall_removexattr+0x18>
  13a168:	ebfffc3d 	bl	139264 <syscall_trace>
  13a16c:	e3a00000 	mov	r0, #0
  13a170:	e8bd8010 	pop	{r4, pc}
  13a174:	0014b9ac 	.word	0x0014b9ac

0013a178 <syscall_flistxattr>:
  13a178:	e92d4010 	push	{r4, lr}
  13a17c:	e3a01013 	mov	r1, #19
  13a180:	e59f0008 	ldr	r0, [pc, #8]	; 13a190 <syscall_flistxattr+0x18>
  13a184:	ebfffc36 	bl	139264 <syscall_trace>
  13a188:	e3a00000 	mov	r0, #0
  13a18c:	e8bd8010 	pop	{r4, pc}
  13a190:	0014b998 	.word	0x0014b998

0013a194 <syscall_llistxattr>:
  13a194:	e92d4010 	push	{r4, lr}
  13a198:	e3a01013 	mov	r1, #19
  13a19c:	e59f0008 	ldr	r0, [pc, #8]	; 13a1ac <syscall_llistxattr+0x18>
  13a1a0:	ebfffc2f 	bl	139264 <syscall_trace>
  13a1a4:	e3a00000 	mov	r0, #0
  13a1a8:	e8bd8010 	pop	{r4, pc}
  13a1ac:	0014b984 	.word	0x0014b984

0013a1b0 <syscall_listxattr>:
  13a1b0:	e92d4010 	push	{r4, lr}
  13a1b4:	e3a01012 	mov	r1, #18
  13a1b8:	e59f0008 	ldr	r0, [pc, #8]	; 13a1c8 <syscall_listxattr+0x18>
  13a1bc:	ebfffc28 	bl	139264 <syscall_trace>
  13a1c0:	e3a00000 	mov	r0, #0
  13a1c4:	e8bd8010 	pop	{r4, pc}
  13a1c8:	0014b970 	.word	0x0014b970

0013a1cc <syscall_fgetxattr>:
  13a1cc:	e92d4010 	push	{r4, lr}
  13a1d0:	e3a01012 	mov	r1, #18
  13a1d4:	e59f0008 	ldr	r0, [pc, #8]	; 13a1e4 <syscall_fgetxattr+0x18>
  13a1d8:	ebfffc21 	bl	139264 <syscall_trace>
  13a1dc:	e3a00000 	mov	r0, #0
  13a1e0:	e8bd8010 	pop	{r4, pc}
  13a1e4:	0014b95c 	.word	0x0014b95c

0013a1e8 <syscall_lgetxattr>:
  13a1e8:	e92d4010 	push	{r4, lr}
  13a1ec:	e3a01012 	mov	r1, #18
  13a1f0:	e59f0008 	ldr	r0, [pc, #8]	; 13a200 <syscall_lgetxattr+0x18>
  13a1f4:	ebfffc1a 	bl	139264 <syscall_trace>
  13a1f8:	e3a00000 	mov	r0, #0
  13a1fc:	e8bd8010 	pop	{r4, pc}
  13a200:	0014b948 	.word	0x0014b948

0013a204 <syscall_getxattr>:
  13a204:	e92d4010 	push	{r4, lr}
  13a208:	e3a01011 	mov	r1, #17
  13a20c:	e59f0008 	ldr	r0, [pc, #8]	; 13a21c <syscall_getxattr+0x18>
  13a210:	ebfffc13 	bl	139264 <syscall_trace>
  13a214:	e3a00000 	mov	r0, #0
  13a218:	e8bd8010 	pop	{r4, pc}
  13a21c:	0014b934 	.word	0x0014b934

0013a220 <syscall_fsetxattr>:
  13a220:	e92d4010 	push	{r4, lr}
  13a224:	e3a01012 	mov	r1, #18
  13a228:	e59f0008 	ldr	r0, [pc, #8]	; 13a238 <syscall_fsetxattr+0x18>
  13a22c:	ebfffc0c 	bl	139264 <syscall_trace>
  13a230:	e3a00000 	mov	r0, #0
  13a234:	e8bd8010 	pop	{r4, pc}
  13a238:	0014b920 	.word	0x0014b920

0013a23c <syscall_lsetxattr>:
  13a23c:	e92d4010 	push	{r4, lr}
  13a240:	e3a01012 	mov	r1, #18
  13a244:	e59f0008 	ldr	r0, [pc, #8]	; 13a254 <syscall_lsetxattr+0x18>
  13a248:	ebfffc05 	bl	139264 <syscall_trace>
  13a24c:	e3a00000 	mov	r0, #0
  13a250:	e8bd8010 	pop	{r4, pc}
  13a254:	0014b90c 	.word	0x0014b90c

0013a258 <syscall_setxattr>:
  13a258:	e92d4010 	push	{r4, lr}
  13a25c:	e3a01011 	mov	r1, #17
  13a260:	e59f0008 	ldr	r0, [pc, #8]	; 13a270 <syscall_setxattr+0x18>
  13a264:	ebfffbfe 	bl	139264 <syscall_trace>
  13a268:	e3a00000 	mov	r0, #0
  13a26c:	e8bd8010 	pop	{r4, pc}
  13a270:	0014b8f8 	.word	0x0014b8f8

0013a274 <syscall_readahead>:
  13a274:	e92d4010 	push	{r4, lr}
  13a278:	e3a01012 	mov	r1, #18
  13a27c:	e59f0008 	ldr	r0, [pc, #8]	; 13a28c <syscall_readahead+0x18>
  13a280:	ebfffbf7 	bl	139264 <syscall_trace>
  13a284:	e3a00000 	mov	r0, #0
  13a288:	e8bd8010 	pop	{r4, pc}
  13a28c:	0014b8e4 	.word	0x0014b8e4

0013a290 <syscall_mincore>:
  13a290:	e92d4010 	push	{r4, lr}
  13a294:	e3a01010 	mov	r1, #16
  13a298:	e59f0008 	ldr	r0, [pc, #8]	; 13a2a8 <syscall_mincore+0x18>
  13a29c:	ebfffbf0 	bl	139264 <syscall_trace>
  13a2a0:	e3a00000 	mov	r0, #0
  13a2a4:	e8bd8010 	pop	{r4, pc}
  13a2a8:	0014b8a4 	.word	0x0014b8a4

0013a2ac <syscall_pivot_root>:
  13a2ac:	e92d4010 	push	{r4, lr}
  13a2b0:	e3a01013 	mov	r1, #19
  13a2b4:	e59f0008 	ldr	r0, [pc, #8]	; 13a2c4 <syscall_pivot_root+0x18>
  13a2b8:	ebfffbe9 	bl	139264 <syscall_trace>
  13a2bc:	e3a00000 	mov	r0, #0
  13a2c0:	e8bd8010 	pop	{r4, pc}
  13a2c4:	0014b890 	.word	0x0014b890

0013a2c8 <syscall_setfsgid32>:
  13a2c8:	e92d4010 	push	{r4, lr}
  13a2cc:	e3a01013 	mov	r1, #19
  13a2d0:	e59f0008 	ldr	r0, [pc, #8]	; 13a2e0 <syscall_setfsgid32+0x18>
  13a2d4:	ebfffbe2 	bl	139264 <syscall_trace>
  13a2d8:	e3a00000 	mov	r0, #0
  13a2dc:	e8bd8010 	pop	{r4, pc}
  13a2e0:	0014b868 	.word	0x0014b868

0013a2e4 <syscall_setfsuid32>:
  13a2e4:	e92d4010 	push	{r4, lr}
  13a2e8:	e3a01013 	mov	r1, #19
  13a2ec:	e59f0008 	ldr	r0, [pc, #8]	; 13a2fc <syscall_setfsuid32+0x18>
  13a2f0:	ebfffbdb 	bl	139264 <syscall_trace>
  13a2f4:	e3a00000 	mov	r0, #0
  13a2f8:	e8bd8010 	pop	{r4, pc}
  13a2fc:	0014b854 	.word	0x0014b854

0013a300 <syscall_setgid32>:
  13a300:	e92d4010 	push	{r4, lr}
  13a304:	e3a01011 	mov	r1, #17
  13a308:	e59f0008 	ldr	r0, [pc, #8]	; 13a318 <syscall_setgid32+0x18>
  13a30c:	ebfffbd4 	bl	139264 <syscall_trace>
  13a310:	e3a00000 	mov	r0, #0
  13a314:	e8bd8010 	pop	{r4, pc}
  13a318:	0014b840 	.word	0x0014b840

0013a31c <syscall_setuid32>:
  13a31c:	e92d4010 	push	{r4, lr}
  13a320:	e3a01011 	mov	r1, #17
  13a324:	e59f0008 	ldr	r0, [pc, #8]	; 13a334 <syscall_setuid32+0x18>
  13a328:	ebfffbcd 	bl	139264 <syscall_trace>
  13a32c:	e3a00000 	mov	r0, #0
  13a330:	e8bd8010 	pop	{r4, pc}
  13a334:	0014b82c 	.word	0x0014b82c

0013a338 <syscall_chown32>:
  13a338:	e92d4010 	push	{r4, lr}
  13a33c:	e3a01010 	mov	r1, #16
  13a340:	e59f0008 	ldr	r0, [pc, #8]	; 13a350 <syscall_chown32+0x18>
  13a344:	ebfffbc6 	bl	139264 <syscall_trace>
  13a348:	e3a00000 	mov	r0, #0
  13a34c:	e8bd8010 	pop	{r4, pc}
  13a350:	0014b81c 	.word	0x0014b81c

0013a354 <syscall_getresgid32>:
  13a354:	e92d4010 	push	{r4, lr}
  13a358:	e3a01014 	mov	r1, #20
  13a35c:	e59f0008 	ldr	r0, [pc, #8]	; 13a36c <syscall_getresgid32+0x18>
  13a360:	ebfffbbf 	bl	139264 <syscall_trace>
  13a364:	e3a00000 	mov	r0, #0
  13a368:	e8bd8010 	pop	{r4, pc}
  13a36c:	0014b808 	.word	0x0014b808

0013a370 <syscall_setresgid32>:
  13a370:	e92d4010 	push	{r4, lr}
  13a374:	e3a01014 	mov	r1, #20
  13a378:	e59f0008 	ldr	r0, [pc, #8]	; 13a388 <syscall_setresgid32+0x18>
  13a37c:	ebfffbb8 	bl	139264 <syscall_trace>
  13a380:	e3a00000 	mov	r0, #0
  13a384:	e8bd8010 	pop	{r4, pc}
  13a388:	0014b7f4 	.word	0x0014b7f4

0013a38c <syscall_getresuid32>:
  13a38c:	e92d4010 	push	{r4, lr}
  13a390:	e3a01014 	mov	r1, #20
  13a394:	e59f0008 	ldr	r0, [pc, #8]	; 13a3a4 <syscall_getresuid32+0x18>
  13a398:	ebfffbb1 	bl	139264 <syscall_trace>
  13a39c:	e3a00000 	mov	r0, #0
  13a3a0:	e8bd8010 	pop	{r4, pc}
  13a3a4:	0014b7e0 	.word	0x0014b7e0

0013a3a8 <syscall_setresuid32>:
  13a3a8:	e92d4010 	push	{r4, lr}
  13a3ac:	e3a01014 	mov	r1, #20
  13a3b0:	e59f0008 	ldr	r0, [pc, #8]	; 13a3c0 <syscall_setresuid32+0x18>
  13a3b4:	ebfffbaa 	bl	139264 <syscall_trace>
  13a3b8:	e3a00000 	mov	r0, #0
  13a3bc:	e8bd8010 	pop	{r4, pc}
  13a3c0:	0014b7cc 	.word	0x0014b7cc

0013a3c4 <syscall_fchown32>:
  13a3c4:	e92d4010 	push	{r4, lr}
  13a3c8:	e3a01011 	mov	r1, #17
  13a3cc:	e59f0008 	ldr	r0, [pc, #8]	; 13a3dc <syscall_fchown32+0x18>
  13a3d0:	ebfffba3 	bl	139264 <syscall_trace>
  13a3d4:	e3a00000 	mov	r0, #0
  13a3d8:	e8bd8010 	pop	{r4, pc}
  13a3dc:	0014b7b8 	.word	0x0014b7b8

0013a3e0 <syscall_setgroups32>:
  13a3e0:	e92d4010 	push	{r4, lr}
  13a3e4:	e3a01014 	mov	r1, #20
  13a3e8:	e59f0008 	ldr	r0, [pc, #8]	; 13a3f8 <syscall_setgroups32+0x18>
  13a3ec:	ebfffb9c 	bl	139264 <syscall_trace>
  13a3f0:	e3a00000 	mov	r0, #0
  13a3f4:	e8bd8010 	pop	{r4, pc}
  13a3f8:	0014b7a4 	.word	0x0014b7a4

0013a3fc <syscall_getgroups32>:
  13a3fc:	e92d4010 	push	{r4, lr}
  13a400:	e3a01014 	mov	r1, #20
  13a404:	e59f0008 	ldr	r0, [pc, #8]	; 13a414 <syscall_getgroups32+0x18>
  13a408:	ebfffb95 	bl	139264 <syscall_trace>
  13a40c:	e3a00000 	mov	r0, #0
  13a410:	e8bd8010 	pop	{r4, pc}
  13a414:	0014b790 	.word	0x0014b790

0013a418 <syscall_setregid32>:
  13a418:	e92d4010 	push	{r4, lr}
  13a41c:	e3a01013 	mov	r1, #19
  13a420:	e59f0008 	ldr	r0, [pc, #8]	; 13a430 <syscall_setregid32+0x18>
  13a424:	ebfffb8e 	bl	139264 <syscall_trace>
  13a428:	e3a00000 	mov	r0, #0
  13a42c:	e8bd8010 	pop	{r4, pc}
  13a430:	0014b77c 	.word	0x0014b77c

0013a434 <syscall_setreuid32>:
  13a434:	e92d4010 	push	{r4, lr}
  13a438:	e3a01013 	mov	r1, #19
  13a43c:	e59f0008 	ldr	r0, [pc, #8]	; 13a44c <syscall_setreuid32+0x18>
  13a440:	ebfffb87 	bl	139264 <syscall_trace>
  13a444:	e3a00000 	mov	r0, #0
  13a448:	e8bd8010 	pop	{r4, pc}
  13a44c:	0014b768 	.word	0x0014b768

0013a450 <syscall_getegid32>:
  13a450:	e92d4010 	push	{r4, lr}
  13a454:	e3a01012 	mov	r1, #18
  13a458:	e59f0008 	ldr	r0, [pc, #8]	; 13a468 <syscall_getegid32+0x18>
  13a45c:	ebfffb80 	bl	139264 <syscall_trace>
  13a460:	e3a00000 	mov	r0, #0
  13a464:	e8bd8010 	pop	{r4, pc}
  13a468:	0014b754 	.word	0x0014b754

0013a46c <syscall_geteuid32>:
  13a46c:	e92d4010 	push	{r4, lr}
  13a470:	e3a01012 	mov	r1, #18
  13a474:	e59f0008 	ldr	r0, [pc, #8]	; 13a484 <syscall_geteuid32+0x18>
  13a478:	ebfffb79 	bl	139264 <syscall_trace>
  13a47c:	e3a00000 	mov	r0, #0
  13a480:	e8bd8010 	pop	{r4, pc}
  13a484:	0014b740 	.word	0x0014b740

0013a488 <syscall_getgid32>:
  13a488:	e92d4010 	push	{r4, lr}
  13a48c:	e3a01011 	mov	r1, #17
  13a490:	e59f0008 	ldr	r0, [pc, #8]	; 13a4a0 <syscall_getgid32+0x18>
  13a494:	ebfffb72 	bl	139264 <syscall_trace>
  13a498:	e3a00000 	mov	r0, #0
  13a49c:	e8bd8010 	pop	{r4, pc}
  13a4a0:	0014b72c 	.word	0x0014b72c

0013a4a4 <syscall_getuid32>:
  13a4a4:	e92d4010 	push	{r4, lr}
  13a4a8:	e3a01011 	mov	r1, #17
  13a4ac:	e59f0008 	ldr	r0, [pc, #8]	; 13a4bc <syscall_getuid32+0x18>
  13a4b0:	ebfffb6b 	bl	139264 <syscall_trace>
  13a4b4:	e3a00000 	mov	r0, #0
  13a4b8:	e8bd8010 	pop	{r4, pc}
  13a4bc:	0014b718 	.word	0x0014b718

0013a4c0 <syscall_lchown32>:
  13a4c0:	e92d4010 	push	{r4, lr}
  13a4c4:	e3a01011 	mov	r1, #17
  13a4c8:	e59f0008 	ldr	r0, [pc, #8]	; 13a4d8 <syscall_lchown32+0x18>
  13a4cc:	ebfffb64 	bl	139264 <syscall_trace>
  13a4d0:	e3a00000 	mov	r0, #0
  13a4d4:	e8bd8010 	pop	{r4, pc}
  13a4d8:	0014b704 	.word	0x0014b704

0013a4dc <syscall_ftruncate64>:
  13a4dc:	e92d4010 	push	{r4, lr}
  13a4e0:	e3a01014 	mov	r1, #20
  13a4e4:	e59f0008 	ldr	r0, [pc, #8]	; 13a4f4 <syscall_ftruncate64+0x18>
  13a4e8:	ebfffb5d 	bl	139264 <syscall_trace>
  13a4ec:	e3a00000 	mov	r0, #0
  13a4f0:	e8bd8010 	pop	{r4, pc}
  13a4f4:	0014b6c0 	.word	0x0014b6c0

0013a4f8 <syscall_truncate64>:
  13a4f8:	e92d4010 	push	{r4, lr}
  13a4fc:	e3a01013 	mov	r1, #19
  13a500:	e59f0008 	ldr	r0, [pc, #8]	; 13a510 <syscall_truncate64+0x18>
  13a504:	ebfffb56 	bl	139264 <syscall_trace>
  13a508:	e3a00000 	mov	r0, #0
  13a50c:	e8bd8010 	pop	{r4, pc}
  13a510:	0014b6ac 	.word	0x0014b6ac

0013a514 <syscall_sendfile>:
  13a514:	e92d4010 	push	{r4, lr}
  13a518:	e3a01011 	mov	r1, #17
  13a51c:	e59f0008 	ldr	r0, [pc, #8]	; 13a52c <syscall_sendfile+0x18>
  13a520:	ebfffb4f 	bl	139264 <syscall_trace>
  13a524:	e3a00000 	mov	r0, #0
  13a528:	e8bd8010 	pop	{r4, pc}
  13a52c:	0014b664 	.word	0x0014b664

0013a530 <syscall_sigaltstack>:
  13a530:	e92d4010 	push	{r4, lr}
  13a534:	e3a01014 	mov	r1, #20
  13a538:	e59f0008 	ldr	r0, [pc, #8]	; 13a548 <syscall_sigaltstack+0x18>
  13a53c:	ebfffb48 	bl	139264 <syscall_trace>
  13a540:	e3a00000 	mov	r0, #0
  13a544:	e8bd8010 	pop	{r4, pc}
  13a548:	0014b650 	.word	0x0014b650

0013a54c <syscall_capset>:
  13a54c:	e92d4010 	push	{r4, lr}
  13a550:	e3a0100f 	mov	r1, #15
  13a554:	e59f0008 	ldr	r0, [pc, #8]	; 13a564 <syscall_capset+0x18>
  13a558:	ebfffb41 	bl	139264 <syscall_trace>
  13a55c:	e3a00000 	mov	r0, #0
  13a560:	e8bd8010 	pop	{r4, pc}
  13a564:	0014b640 	.word	0x0014b640

0013a568 <syscall_capget>:
  13a568:	e92d4010 	push	{r4, lr}
  13a56c:	e3a0100f 	mov	r1, #15
  13a570:	e59f0008 	ldr	r0, [pc, #8]	; 13a580 <syscall_capget+0x18>
  13a574:	ebfffb3a 	bl	139264 <syscall_trace>
  13a578:	e3a00000 	mov	r0, #0
  13a57c:	e8bd8010 	pop	{r4, pc}
  13a580:	0014b630 	.word	0x0014b630

0013a584 <syscall_chown>:
  13a584:	e92d4010 	push	{r4, lr}
  13a588:	e3a0100e 	mov	r1, #14
  13a58c:	e59f0008 	ldr	r0, [pc, #8]	; 13a59c <syscall_chown+0x18>
  13a590:	ebfffb33 	bl	139264 <syscall_trace>
  13a594:	e3a00000 	mov	r0, #0
  13a598:	e8bd8010 	pop	{r4, pc}
  13a59c:	0014b610 	.word	0x0014b610

0013a5a0 <syscall_pwrite64>:
  13a5a0:	e92d4010 	push	{r4, lr}
  13a5a4:	e3a01011 	mov	r1, #17
  13a5a8:	e59f0008 	ldr	r0, [pc, #8]	; 13a5b8 <syscall_pwrite64+0x18>
  13a5ac:	ebfffb2c 	bl	139264 <syscall_trace>
  13a5b0:	e3a00000 	mov	r0, #0
  13a5b4:	e8bd8010 	pop	{r4, pc}
  13a5b8:	0014b5fc 	.word	0x0014b5fc

0013a5bc <syscall_pread64>:
  13a5bc:	e92d4010 	push	{r4, lr}
  13a5c0:	e3a01010 	mov	r1, #16
  13a5c4:	e59f0008 	ldr	r0, [pc, #8]	; 13a5d4 <syscall_pread64+0x18>
  13a5c8:	ebfffb25 	bl	139264 <syscall_trace>
  13a5cc:	e3a00000 	mov	r0, #0
  13a5d0:	e8bd8010 	pop	{r4, pc}
  13a5d4:	0014b5ec 	.word	0x0014b5ec

0013a5d8 <syscall_rt_sigsuspend>:
  13a5d8:	e92d4010 	push	{r4, lr}
  13a5dc:	e3a01016 	mov	r1, #22
  13a5e0:	e59f0008 	ldr	r0, [pc, #8]	; 13a5f0 <syscall_rt_sigsuspend+0x18>
  13a5e4:	ebfffb1e 	bl	139264 <syscall_trace>
  13a5e8:	e3a00000 	mov	r0, #0
  13a5ec:	e8bd8010 	pop	{r4, pc}
  13a5f0:	0014b5d4 	.word	0x0014b5d4

0013a5f4 <syscall_rt_sigqueueinfo>:
  13a5f4:	e92d4010 	push	{r4, lr}
  13a5f8:	e3a01018 	mov	r1, #24
  13a5fc:	e59f0008 	ldr	r0, [pc, #8]	; 13a60c <syscall_rt_sigqueueinfo+0x18>
  13a600:	ebfffb17 	bl	139264 <syscall_trace>
  13a604:	e3a00000 	mov	r0, #0
  13a608:	e8bd8010 	pop	{r4, pc}
  13a60c:	0014b5bc 	.word	0x0014b5bc

0013a610 <syscall_rt_sigtimedwait>:
  13a610:	e92d4010 	push	{r4, lr}
  13a614:	e3a01018 	mov	r1, #24
  13a618:	e59f0008 	ldr	r0, [pc, #8]	; 13a628 <syscall_rt_sigtimedwait+0x18>
  13a61c:	ebfffb10 	bl	139264 <syscall_trace>
  13a620:	e3a00000 	mov	r0, #0
  13a624:	e8bd8010 	pop	{r4, pc}
  13a628:	0014b5a4 	.word	0x0014b5a4

0013a62c <syscall_rt_sigpending>:
  13a62c:	e92d4010 	push	{r4, lr}
  13a630:	e3a01016 	mov	r1, #22
  13a634:	e59f0008 	ldr	r0, [pc, #8]	; 13a644 <syscall_rt_sigpending+0x18>
  13a638:	ebfffb09 	bl	139264 <syscall_trace>
  13a63c:	e3a00000 	mov	r0, #0
  13a640:	e8bd8010 	pop	{r4, pc}
  13a644:	0014b58c 	.word	0x0014b58c

0013a648 <syscall_rt_sigreturn>:
  13a648:	e92d4010 	push	{r4, lr}
  13a64c:	e3a01015 	mov	r1, #21
  13a650:	e59f0008 	ldr	r0, [pc, #8]	; 13a660 <syscall_rt_sigreturn+0x18>
  13a654:	ebfffb02 	bl	139264 <syscall_trace>
  13a658:	e3a00000 	mov	r0, #0
  13a65c:	e8bd8010 	pop	{r4, pc}
  13a660:	0014b544 	.word	0x0014b544

0013a664 <syscall_prctl>:
  13a664:	e92d4010 	push	{r4, lr}
  13a668:	e3a0100e 	mov	r1, #14
  13a66c:	e59f0008 	ldr	r0, [pc, #8]	; 13a67c <syscall_prctl+0x18>
  13a670:	ebfffafb 	bl	139264 <syscall_trace>
  13a674:	e3a00000 	mov	r0, #0
  13a678:	e8bd8010 	pop	{r4, pc}
  13a67c:	0014b534 	.word	0x0014b534

0013a680 <syscall_getresgid>:
  13a680:	e92d4010 	push	{r4, lr}
  13a684:	e3a01012 	mov	r1, #18
  13a688:	e59f0008 	ldr	r0, [pc, #8]	; 13a698 <syscall_getresgid+0x18>
  13a68c:	ebfffaf4 	bl	139264 <syscall_trace>
  13a690:	e3a00000 	mov	r0, #0
  13a694:	e8bd8010 	pop	{r4, pc}
  13a698:	0014b520 	.word	0x0014b520

0013a69c <syscall_setresgid>:
  13a69c:	e92d4010 	push	{r4, lr}
  13a6a0:	e3a01012 	mov	r1, #18
  13a6a4:	e59f0008 	ldr	r0, [pc, #8]	; 13a6b4 <syscall_setresgid+0x18>
  13a6a8:	ebfffaed 	bl	139264 <syscall_trace>
  13a6ac:	e3a00000 	mov	r0, #0
  13a6b0:	e8bd8010 	pop	{r4, pc}
  13a6b4:	0014b50c 	.word	0x0014b50c

0013a6b8 <syscall_nfsservctl>:
  13a6b8:	e92d4010 	push	{r4, lr}
  13a6bc:	e3a01013 	mov	r1, #19
  13a6c0:	e59f0008 	ldr	r0, [pc, #8]	; 13a6d0 <syscall_nfsservctl+0x18>
  13a6c4:	ebfffae6 	bl	139264 <syscall_trace>
  13a6c8:	e3a00000 	mov	r0, #0
  13a6cc:	e8bd8010 	pop	{r4, pc}
  13a6d0:	0014b4f8 	.word	0x0014b4f8

0013a6d4 <syscall_getresuid>:
  13a6d4:	e92d4010 	push	{r4, lr}
  13a6d8:	e3a01012 	mov	r1, #18
  13a6dc:	e59f0008 	ldr	r0, [pc, #8]	; 13a6ec <syscall_getresuid+0x18>
  13a6e0:	ebfffadf 	bl	139264 <syscall_trace>
  13a6e4:	e3a00000 	mov	r0, #0
  13a6e8:	e8bd8010 	pop	{r4, pc}
  13a6ec:	0014b4d4 	.word	0x0014b4d4

0013a6f0 <syscall_setresuid>:
  13a6f0:	e92d4010 	push	{r4, lr}
  13a6f4:	e3a01012 	mov	r1, #18
  13a6f8:	e59f0008 	ldr	r0, [pc, #8]	; 13a708 <syscall_setresuid+0x18>
  13a6fc:	ebfffad8 	bl	139264 <syscall_trace>
  13a700:	e3a00000 	mov	r0, #0
  13a704:	e8bd8010 	pop	{r4, pc}
  13a708:	0014b4c0 	.word	0x0014b4c0

0013a70c <syscall_sched_rr_get_interval>:
  13a70c:	e92d4010 	push	{r4, lr}
  13a710:	e3a0101e 	mov	r1, #30
  13a714:	e59f0008 	ldr	r0, [pc, #8]	; 13a724 <syscall_sched_rr_get_interval+0x18>
  13a718:	ebfffad1 	bl	139264 <syscall_trace>
  13a71c:	e3a00000 	mov	r0, #0
  13a720:	e8bd8010 	pop	{r4, pc}
  13a724:	0014b47c 	.word	0x0014b47c

0013a728 <syscall_sched_yield>:
  13a728:	e92d4010 	push	{r4, lr}
  13a72c:	e3a01014 	mov	r1, #20
  13a730:	e59f0008 	ldr	r0, [pc, #8]	; 13a740 <syscall_sched_yield+0x18>
  13a734:	ebfffaca 	bl	139264 <syscall_trace>
  13a738:	e3a00000 	mov	r0, #0
  13a73c:	e8bd8010 	pop	{r4, pc}
  13a740:	0014b428 	.word	0x0014b428

0013a744 <syscall_munlockall>:
  13a744:	e92d4010 	push	{r4, lr}
  13a748:	e3a01013 	mov	r1, #19
  13a74c:	e59f0008 	ldr	r0, [pc, #8]	; 13a75c <syscall_munlockall+0x18>
  13a750:	ebfffac3 	bl	139264 <syscall_trace>
  13a754:	e3a00000 	mov	r0, #0
  13a758:	e8bd8010 	pop	{r4, pc}
  13a75c:	0014b3ac 	.word	0x0014b3ac

0013a760 <syscall_mlockall>:
  13a760:	e92d4010 	push	{r4, lr}
  13a764:	e3a01011 	mov	r1, #17
  13a768:	e59f0008 	ldr	r0, [pc, #8]	; 13a778 <syscall_mlockall+0x18>
  13a76c:	ebfffabc 	bl	139264 <syscall_trace>
  13a770:	e3a00000 	mov	r0, #0
  13a774:	e8bd8010 	pop	{r4, pc}
  13a778:	0014b398 	.word	0x0014b398

0013a77c <syscall_munlock>:
  13a77c:	e92d4010 	push	{r4, lr}
  13a780:	e3a01010 	mov	r1, #16
  13a784:	e59f0008 	ldr	r0, [pc, #8]	; 13a794 <syscall_munlock+0x18>
  13a788:	ebfffab5 	bl	139264 <syscall_trace>
  13a78c:	e3a00000 	mov	r0, #0
  13a790:	e8bd8010 	pop	{r4, pc}
  13a794:	0014b388 	.word	0x0014b388

0013a798 <syscall_mlock>:
  13a798:	e92d4010 	push	{r4, lr}
  13a79c:	e3a0100e 	mov	r1, #14
  13a7a0:	e59f0008 	ldr	r0, [pc, #8]	; 13a7b0 <syscall_mlock+0x18>
  13a7a4:	ebfffaae 	bl	139264 <syscall_trace>
  13a7a8:	e3a00000 	mov	r0, #0
  13a7ac:	e8bd8010 	pop	{r4, pc}
  13a7b0:	0014b378 	.word	0x0014b378

0013a7b4 <syscall__sysctl>:
  13a7b4:	e92d4010 	push	{r4, lr}
  13a7b8:	e3a01010 	mov	r1, #16
  13a7bc:	e59f0008 	ldr	r0, [pc, #8]	; 13a7cc <syscall__sysctl+0x18>
  13a7c0:	ebfffaa7 	bl	139264 <syscall_trace>
  13a7c4:	e3a00000 	mov	r0, #0
  13a7c8:	e8bd8010 	pop	{r4, pc}
  13a7cc:	0014b368 	.word	0x0014b368

0013a7d0 <syscall_fdatasync>:
  13a7d0:	e92d4010 	push	{r4, lr}
  13a7d4:	e3a01012 	mov	r1, #18
  13a7d8:	e59f0008 	ldr	r0, [pc, #8]	; 13a7e8 <syscall_fdatasync+0x18>
  13a7dc:	ebfffaa0 	bl	139264 <syscall_trace>
  13a7e0:	e3a00000 	mov	r0, #0
  13a7e4:	e8bd8010 	pop	{r4, pc}
  13a7e8:	0014b354 	.word	0x0014b354

0013a7ec <syscall_getsid>:
  13a7ec:	e92d4010 	push	{r4, lr}
  13a7f0:	e3a0100f 	mov	r1, #15
  13a7f4:	e59f0008 	ldr	r0, [pc, #8]	; 13a804 <syscall_getsid+0x18>
  13a7f8:	ebfffa99 	bl	139264 <syscall_trace>
  13a7fc:	e3a00000 	mov	r0, #0
  13a800:	e8bd8010 	pop	{r4, pc}
  13a804:	0014b344 	.word	0x0014b344

0013a808 <syscall_msync>:
  13a808:	e92d4010 	push	{r4, lr}
  13a80c:	e3a0100e 	mov	r1, #14
  13a810:	e59f0008 	ldr	r0, [pc, #8]	; 13a820 <syscall_msync+0x18>
  13a814:	ebfffa92 	bl	139264 <syscall_trace>
  13a818:	e3a00000 	mov	r0, #0
  13a81c:	e8bd8010 	pop	{r4, pc}
  13a820:	0014b314 	.word	0x0014b314

0013a824 <syscall_flock>:
  13a824:	e92d4010 	push	{r4, lr}
  13a828:	e3a0100e 	mov	r1, #14
  13a82c:	e59f0008 	ldr	r0, [pc, #8]	; 13a83c <syscall_flock+0x18>
  13a830:	ebfffa8b 	bl	139264 <syscall_trace>
  13a834:	e3a00000 	mov	r0, #0
  13a838:	e8bd8010 	pop	{r4, pc}
  13a83c:	0014b304 	.word	0x0014b304

0013a840 <syscall_setfsgid>:
  13a840:	e92d4010 	push	{r4, lr}
  13a844:	e3a01011 	mov	r1, #17
  13a848:	e59f0008 	ldr	r0, [pc, #8]	; 13a858 <syscall_setfsgid+0x18>
  13a84c:	ebfffa84 	bl	139264 <syscall_trace>
  13a850:	e3a00000 	mov	r0, #0
  13a854:	e8bd8010 	pop	{r4, pc}
  13a858:	0014b2b8 	.word	0x0014b2b8

0013a85c <syscall_setfsuid>:
  13a85c:	e92d4010 	push	{r4, lr}
  13a860:	e3a01011 	mov	r1, #17
  13a864:	e59f0008 	ldr	r0, [pc, #8]	; 13a874 <syscall_setfsuid+0x18>
  13a868:	ebfffa7d 	bl	139264 <syscall_trace>
  13a86c:	e3a00000 	mov	r0, #0
  13a870:	e8bd8010 	pop	{r4, pc}
  13a874:	0014b2a4 	.word	0x0014b2a4

0013a878 <syscall_personality>:
  13a878:	e92d4010 	push	{r4, lr}
  13a87c:	e3a01014 	mov	r1, #20
  13a880:	e59f0008 	ldr	r0, [pc, #8]	; 13a890 <syscall_personality+0x18>
  13a884:	ebfffa76 	bl	139264 <syscall_trace>
  13a888:	e3a00000 	mov	r0, #0
  13a88c:	e8bd8010 	pop	{r4, pc}
  13a890:	0014b290 	.word	0x0014b290

0013a894 <syscall_sysfs>:
  13a894:	e92d4010 	push	{r4, lr}
  13a898:	e3a0100e 	mov	r1, #14
  13a89c:	e59f0008 	ldr	r0, [pc, #8]	; 13a8ac <syscall_sysfs+0x18>
  13a8a0:	ebfffa6f 	bl	139264 <syscall_trace>
  13a8a4:	e3a00000 	mov	r0, #0
  13a8a8:	e8bd8010 	pop	{r4, pc}
  13a8ac:	0014b280 	.word	0x0014b280

0013a8b0 <syscall_bdflush>:
  13a8b0:	e92d4010 	push	{r4, lr}
  13a8b4:	e3a01010 	mov	r1, #16
  13a8b8:	e59f0008 	ldr	r0, [pc, #8]	; 13a8c8 <syscall_bdflush+0x18>
  13a8bc:	ebfffa68 	bl	139264 <syscall_trace>
  13a8c0:	e3a00000 	mov	r0, #0
  13a8c4:	e8bd8010 	pop	{r4, pc}
  13a8c8:	0014b270 	.word	0x0014b270

0013a8cc <syscall_fchdir>:
  13a8cc:	e92d4010 	push	{r4, lr}
  13a8d0:	e3a0100f 	mov	r1, #15
  13a8d4:	e59f0008 	ldr	r0, [pc, #8]	; 13a8e4 <syscall_fchdir+0x18>
  13a8d8:	ebfffa61 	bl	139264 <syscall_trace>
  13a8dc:	e3a00000 	mov	r0, #0
  13a8e0:	e8bd8010 	pop	{r4, pc}
  13a8e4:	0014b260 	.word	0x0014b260

0013a8e8 <syscall_getpgid>:
  13a8e8:	e92d4010 	push	{r4, lr}
  13a8ec:	e3a01010 	mov	r1, #16
  13a8f0:	e59f0008 	ldr	r0, [pc, #8]	; 13a900 <syscall_getpgid+0x18>
  13a8f4:	ebfffa5a 	bl	139264 <syscall_trace>
  13a8f8:	e3a00000 	mov	r0, #0
  13a8fc:	e8bd8010 	pop	{r4, pc}
  13a900:	0014b250 	.word	0x0014b250

0013a904 <syscall_quotactl>:
  13a904:	e92d4010 	push	{r4, lr}
  13a908:	e3a01011 	mov	r1, #17
  13a90c:	e59f0008 	ldr	r0, [pc, #8]	; 13a91c <syscall_quotactl+0x18>
  13a910:	ebfffa53 	bl	139264 <syscall_trace>
  13a914:	e3a00000 	mov	r0, #0
  13a918:	e8bd8010 	pop	{r4, pc}
  13a91c:	0014b23c 	.word	0x0014b23c

0013a920 <syscall_delete_module>:
  13a920:	e92d4010 	push	{r4, lr}
  13a924:	e3a01016 	mov	r1, #22
  13a928:	e59f0008 	ldr	r0, [pc, #8]	; 13a938 <syscall_delete_module+0x18>
  13a92c:	ebfffa4c 	bl	139264 <syscall_trace>
  13a930:	e3a00000 	mov	r0, #0
  13a934:	e8bd8010 	pop	{r4, pc}
  13a938:	0014b224 	.word	0x0014b224

0013a93c <syscall_init_module>:
  13a93c:	e92d4010 	push	{r4, lr}
  13a940:	e3a01014 	mov	r1, #20
  13a944:	e59f0008 	ldr	r0, [pc, #8]	; 13a954 <syscall_init_module+0x18>
  13a948:	ebfffa45 	bl	139264 <syscall_trace>
  13a94c:	e3a00000 	mov	r0, #0
  13a950:	e8bd8010 	pop	{r4, pc}
  13a954:	0014b210 	.word	0x0014b210

0013a958 <syscall_mprotect>:
  13a958:	e92d4010 	push	{r4, lr}
  13a95c:	e3a01011 	mov	r1, #17
  13a960:	e59f0008 	ldr	r0, [pc, #8]	; 13a970 <syscall_mprotect+0x18>
  13a964:	ebfffa3e 	bl	139264 <syscall_trace>
  13a968:	e3a00000 	mov	r0, #0
  13a96c:	e8bd8010 	pop	{r4, pc}
  13a970:	0014b1e8 	.word	0x0014b1e8

0013a974 <syscall_adjtimex>:
  13a974:	e92d4010 	push	{r4, lr}
  13a978:	e3a01011 	mov	r1, #17
  13a97c:	e59f0008 	ldr	r0, [pc, #8]	; 13a98c <syscall_adjtimex+0x18>
  13a980:	ebfffa37 	bl	139264 <syscall_trace>
  13a984:	e3a00000 	mov	r0, #0
  13a988:	e8bd8010 	pop	{r4, pc}
  13a98c:	0014b1d4 	.word	0x0014b1d4

0013a990 <syscall_uname>:
  13a990:	e92d4010 	push	{r4, lr}
  13a994:	e3a0100e 	mov	r1, #14
  13a998:	e59f0008 	ldr	r0, [pc, #8]	; 13a9a8 <syscall_uname+0x18>
  13a99c:	ebfffa30 	bl	139264 <syscall_trace>
  13a9a0:	e3a00000 	mov	r0, #0
  13a9a4:	e8bd8010 	pop	{r4, pc}
  13a9a8:	0014b1c4 	.word	0x0014b1c4

0013a9ac <syscall_setdomainname>:
  13a9ac:	e92d4010 	push	{r4, lr}
  13a9b0:	e3a01016 	mov	r1, #22
  13a9b4:	e59f0008 	ldr	r0, [pc, #8]	; 13a9c4 <syscall_setdomainname+0x18>
  13a9b8:	ebfffa29 	bl	139264 <syscall_trace>
  13a9bc:	e3a00000 	mov	r0, #0
  13a9c0:	e8bd8010 	pop	{r4, pc}
  13a9c4:	0014b1ac 	.word	0x0014b1ac

0013a9c8 <syscall_clone>:
  13a9c8:	e92d4010 	push	{r4, lr}
  13a9cc:	e3a0100e 	mov	r1, #14
  13a9d0:	e59f0008 	ldr	r0, [pc, #8]	; 13a9e0 <syscall_clone+0x18>
  13a9d4:	ebfffa22 	bl	139264 <syscall_trace>
  13a9d8:	e3a00000 	mov	r0, #0
  13a9dc:	e8bd8010 	pop	{r4, pc}
  13a9e0:	0014b19c 	.word	0x0014b19c

0013a9e4 <syscall_sigreturn>:
  13a9e4:	e92d4010 	push	{r4, lr}
  13a9e8:	e3a01012 	mov	r1, #18
  13a9ec:	e59f0008 	ldr	r0, [pc, #8]	; 13a9fc <syscall_sigreturn+0x18>
  13a9f0:	ebfffa1b 	bl	139264 <syscall_trace>
  13a9f4:	e3a00000 	mov	r0, #0
  13a9f8:	e8bd8010 	pop	{r4, pc}
  13a9fc:	0014b188 	.word	0x0014b188

0013aa00 <syscall_sysinfo>:
  13aa00:	e92d4010 	push	{r4, lr}
  13aa04:	e3a01010 	mov	r1, #16
  13aa08:	e59f0008 	ldr	r0, [pc, #8]	; 13aa18 <syscall_sysinfo+0x18>
  13aa0c:	ebfffa14 	bl	139264 <syscall_trace>
  13aa10:	e3a00000 	mov	r0, #0
  13aa14:	e8bd8010 	pop	{r4, pc}
  13aa18:	0014b168 	.word	0x0014b168

0013aa1c <syscall_swapoff>:
  13aa1c:	e92d4010 	push	{r4, lr}
  13aa20:	e3a01010 	mov	r1, #16
  13aa24:	e59f0008 	ldr	r0, [pc, #8]	; 13aa34 <syscall_swapoff+0x18>
  13aa28:	ebfffa0d 	bl	139264 <syscall_trace>
  13aa2c:	e3a00000 	mov	r0, #0
  13aa30:	e8bd8010 	pop	{r4, pc}
  13aa34:	0014b158 	.word	0x0014b158

0013aa38 <syscall_wait4>:
  13aa38:	e92d4010 	push	{r4, lr}
  13aa3c:	e3a0100e 	mov	r1, #14
  13aa40:	e59f0008 	ldr	r0, [pc, #8]	; 13aa50 <syscall_wait4+0x18>
  13aa44:	ebfffa06 	bl	139264 <syscall_trace>
  13aa48:	e3a00000 	mov	r0, #0
  13aa4c:	e8bd8010 	pop	{r4, pc}
  13aa50:	0014b148 	.word	0x0014b148

0013aa54 <syscall_vhangup>:
  13aa54:	e92d4010 	push	{r4, lr}
  13aa58:	e3a01010 	mov	r1, #16
  13aa5c:	e59f0008 	ldr	r0, [pc, #8]	; 13aa6c <syscall_vhangup+0x18>
  13aa60:	ebfff9ff 	bl	139264 <syscall_trace>
  13aa64:	e3a00000 	mov	r0, #0
  13aa68:	e8bd8010 	pop	{r4, pc}
  13aa6c:	0014b138 	.word	0x0014b138

0013aa70 <syscall_fstat>:
  13aa70:	e92d4010 	push	{r4, lr}
  13aa74:	e3a0100e 	mov	r1, #14
  13aa78:	e59f0008 	ldr	r0, [pc, #8]	; 13aa88 <syscall_fstat+0x18>
  13aa7c:	ebfff9f8 	bl	139264 <syscall_trace>
  13aa80:	e3a00000 	mov	r0, #0
  13aa84:	e8bd8010 	pop	{r4, pc}
  13aa88:	0014b128 	.word	0x0014b128

0013aa8c <syscall_getitimer>:
  13aa8c:	e92d4010 	push	{r4, lr}
  13aa90:	e3a01012 	mov	r1, #18
  13aa94:	e59f0008 	ldr	r0, [pc, #8]	; 13aaa4 <syscall_getitimer+0x18>
  13aa98:	ebfff9f1 	bl	139264 <syscall_trace>
  13aa9c:	e3a00000 	mov	r0, #0
  13aaa0:	e8bd8010 	pop	{r4, pc}
  13aaa4:	0014b0f4 	.word	0x0014b0f4

0013aaa8 <syscall_setitimer>:
  13aaa8:	e92d4010 	push	{r4, lr}
  13aaac:	e3a01012 	mov	r1, #18
  13aab0:	e59f0008 	ldr	r0, [pc, #8]	; 13aac0 <syscall_setitimer+0x18>
  13aab4:	ebfff9ea 	bl	139264 <syscall_trace>
  13aab8:	e3a00000 	mov	r0, #0
  13aabc:	e8bd8010 	pop	{r4, pc}
  13aac0:	0014b0e0 	.word	0x0014b0e0

0013aac4 <syscall_syslog>:
  13aac4:	e92d4010 	push	{r4, lr}
  13aac8:	e3a0100f 	mov	r1, #15
  13aacc:	e59f0008 	ldr	r0, [pc, #8]	; 13aadc <syscall_syslog+0x18>
  13aad0:	ebfff9e3 	bl	139264 <syscall_trace>
  13aad4:	e3a00000 	mov	r0, #0
  13aad8:	e8bd8010 	pop	{r4, pc}
  13aadc:	0014b0d0 	.word	0x0014b0d0

0013aae0 <syscall_fstatfs>:
  13aae0:	e92d4010 	push	{r4, lr}
  13aae4:	e3a01010 	mov	r1, #16
  13aae8:	e59f0008 	ldr	r0, [pc, #8]	; 13aaf8 <syscall_fstatfs+0x18>
  13aaec:	ebfff9dc 	bl	139264 <syscall_trace>
  13aaf0:	e3a00000 	mov	r0, #0
  13aaf4:	e8bd8010 	pop	{r4, pc}
  13aaf8:	0014b0c0 	.word	0x0014b0c0

0013aafc <syscall_statfs>:
  13aafc:	e92d4010 	push	{r4, lr}
  13ab00:	e3a0100f 	mov	r1, #15
  13ab04:	e59f0008 	ldr	r0, [pc, #8]	; 13ab14 <syscall_statfs+0x18>
  13ab08:	ebfff9d5 	bl	139264 <syscall_trace>
  13ab0c:	e3a00000 	mov	r0, #0
  13ab10:	e8bd8010 	pop	{r4, pc}
  13ab14:	0014b0b0 	.word	0x0014b0b0

0013ab18 <syscall_setpriority>:
  13ab18:	e92d4010 	push	{r4, lr}
  13ab1c:	e3a01014 	mov	r1, #20
  13ab20:	e59f0008 	ldr	r0, [pc, #8]	; 13ab30 <syscall_setpriority+0x18>
  13ab24:	ebfff9ce 	bl	139264 <syscall_trace>
  13ab28:	e3a00000 	mov	r0, #0
  13ab2c:	e8bd8010 	pop	{r4, pc}
  13ab30:	0014b09c 	.word	0x0014b09c

0013ab34 <syscall_getpriority>:
  13ab34:	e92d4010 	push	{r4, lr}
  13ab38:	e3a01014 	mov	r1, #20
  13ab3c:	e59f0008 	ldr	r0, [pc, #8]	; 13ab4c <syscall_getpriority+0x18>
  13ab40:	ebfff9c7 	bl	139264 <syscall_trace>
  13ab44:	e3a00000 	mov	r0, #0
  13ab48:	e8bd8010 	pop	{r4, pc}
  13ab4c:	0014b088 	.word	0x0014b088

0013ab50 <syscall_fchown>:
  13ab50:	e92d4010 	push	{r4, lr}
  13ab54:	e3a0100f 	mov	r1, #15
  13ab58:	e59f0008 	ldr	r0, [pc, #8]	; 13ab68 <syscall_fchown+0x18>
  13ab5c:	ebfff9c0 	bl	139264 <syscall_trace>
  13ab60:	e3a00000 	mov	r0, #0
  13ab64:	e8bd8010 	pop	{r4, pc}
  13ab68:	0014b078 	.word	0x0014b078

0013ab6c <syscall_fchmod>:
  13ab6c:	e92d4010 	push	{r4, lr}
  13ab70:	e3a0100f 	mov	r1, #15
  13ab74:	e59f0008 	ldr	r0, [pc, #8]	; 13ab84 <syscall_fchmod+0x18>
  13ab78:	ebfff9b9 	bl	139264 <syscall_trace>
  13ab7c:	e3a00000 	mov	r0, #0
  13ab80:	e8bd8010 	pop	{r4, pc}
  13ab84:	0014b068 	.word	0x0014b068

0013ab88 <syscall_ftruncate>:
  13ab88:	e92d4010 	push	{r4, lr}
  13ab8c:	e3a01012 	mov	r1, #18
  13ab90:	e59f0008 	ldr	r0, [pc, #8]	; 13aba0 <syscall_ftruncate+0x18>
  13ab94:	ebfff9b2 	bl	139264 <syscall_trace>
  13ab98:	e3a00000 	mov	r0, #0
  13ab9c:	e8bd8010 	pop	{r4, pc}
  13aba0:	0014b054 	.word	0x0014b054

0013aba4 <syscall_truncate>:
  13aba4:	e92d4010 	push	{r4, lr}
  13aba8:	e3a01011 	mov	r1, #17
  13abac:	e59f0008 	ldr	r0, [pc, #8]	; 13abbc <syscall_truncate+0x18>
  13abb0:	ebfff9ab 	bl	139264 <syscall_trace>
  13abb4:	e3a00000 	mov	r0, #0
  13abb8:	e8bd8010 	pop	{r4, pc}
  13abbc:	0014b040 	.word	0x0014b040

0013abc0 <syscall_reboot>:
  13abc0:	e92d4010 	push	{r4, lr}
  13abc4:	e3a0100f 	mov	r1, #15
  13abc8:	e59f0008 	ldr	r0, [pc, #8]	; 13abd8 <syscall_reboot+0x18>
  13abcc:	ebfff9a4 	bl	139264 <syscall_trace>
  13abd0:	e3a00000 	mov	r0, #0
  13abd4:	e8bd8010 	pop	{r4, pc}
  13abd8:	0014b020 	.word	0x0014b020

0013abdc <syscall_swapon>:
  13abdc:	e92d4010 	push	{r4, lr}
  13abe0:	e3a0100f 	mov	r1, #15
  13abe4:	e59f0008 	ldr	r0, [pc, #8]	; 13abf4 <syscall_swapon+0x18>
  13abe8:	ebfff99d 	bl	139264 <syscall_trace>
  13abec:	e3a00000 	mov	r0, #0
  13abf0:	e8bd8010 	pop	{r4, pc}
  13abf4:	0014b010 	.word	0x0014b010

0013abf8 <syscall_uselib>:
  13abf8:	e92d4010 	push	{r4, lr}
  13abfc:	e3a0100f 	mov	r1, #15
  13ac00:	e59f0008 	ldr	r0, [pc, #8]	; 13ac10 <syscall_uselib+0x18>
  13ac04:	ebfff996 	bl	139264 <syscall_trace>
  13ac08:	e3a00000 	mov	r0, #0
  13ac0c:	e8bd8010 	pop	{r4, pc}
  13ac10:	0014b000 	.word	0x0014b000

0013ac14 <syscall_symlink>:
  13ac14:	e92d4010 	push	{r4, lr}
  13ac18:	e3a01010 	mov	r1, #16
  13ac1c:	e59f0008 	ldr	r0, [pc, #8]	; 13ac2c <syscall_symlink+0x18>
  13ac20:	ebfff98f 	bl	139264 <syscall_trace>
  13ac24:	e3a00000 	mov	r0, #0
  13ac28:	e8bd8010 	pop	{r4, pc}
  13ac2c:	0014afdc 	.word	0x0014afdc

0013ac30 <syscall_setgroups>:
  13ac30:	e92d4010 	push	{r4, lr}
  13ac34:	e3a01012 	mov	r1, #18
  13ac38:	e59f0008 	ldr	r0, [pc, #8]	; 13ac48 <syscall_setgroups+0x18>
  13ac3c:	ebfff988 	bl	139264 <syscall_trace>
  13ac40:	e3a00000 	mov	r0, #0
  13ac44:	e8bd8010 	pop	{r4, pc}
  13ac48:	0014afc8 	.word	0x0014afc8

0013ac4c <syscall_getgroups>:
  13ac4c:	e92d4010 	push	{r4, lr}
  13ac50:	e3a01012 	mov	r1, #18
  13ac54:	e59f0008 	ldr	r0, [pc, #8]	; 13ac64 <syscall_getgroups+0x18>
  13ac58:	ebfff981 	bl	139264 <syscall_trace>
  13ac5c:	e3a00000 	mov	r0, #0
  13ac60:	e8bd8010 	pop	{r4, pc}
  13ac64:	0014afb4 	.word	0x0014afb4

0013ac68 <syscall_settimeofday>:
  13ac68:	e92d4010 	push	{r4, lr}
  13ac6c:	e3a01015 	mov	r1, #21
  13ac70:	e59f0008 	ldr	r0, [pc, #8]	; 13ac80 <syscall_settimeofday+0x18>
  13ac74:	ebfff97a 	bl	139264 <syscall_trace>
  13ac78:	e3a00000 	mov	r0, #0
  13ac7c:	e8bd8010 	pop	{r4, pc}
  13ac80:	0014af9c 	.word	0x0014af9c

0013ac84 <syscall_gettimeofday>:
  13ac84:	e92d4010 	push	{r4, lr}
  13ac88:	e3a01015 	mov	r1, #21
  13ac8c:	e59f0008 	ldr	r0, [pc, #8]	; 13ac9c <syscall_gettimeofday+0x18>
  13ac90:	ebfff973 	bl	139264 <syscall_trace>
  13ac94:	e3a00000 	mov	r0, #0
  13ac98:	e8bd8010 	pop	{r4, pc}
  13ac9c:	0014af84 	.word	0x0014af84

0013aca0 <syscall_getrusage>:
  13aca0:	e92d4010 	push	{r4, lr}
  13aca4:	e3a01012 	mov	r1, #18
  13aca8:	e59f0008 	ldr	r0, [pc, #8]	; 13acb8 <syscall_getrusage+0x18>
  13acac:	ebfff96c 	bl	139264 <syscall_trace>
  13acb0:	e3a00000 	mov	r0, #0
  13acb4:	e8bd8010 	pop	{r4, pc}
  13acb8:	0014af70 	.word	0x0014af70

0013acbc <syscall_sethostname>:
  13acbc:	e92d4010 	push	{r4, lr}
  13acc0:	e3a01014 	mov	r1, #20
  13acc4:	e59f0008 	ldr	r0, [pc, #8]	; 13acd4 <syscall_sethostname+0x18>
  13acc8:	ebfff965 	bl	139264 <syscall_trace>
  13accc:	e3a00000 	mov	r0, #0
  13acd0:	e8bd8010 	pop	{r4, pc}
  13acd4:	0014af48 	.word	0x0014af48

0013acd8 <syscall_sigpending>:
  13acd8:	e92d4010 	push	{r4, lr}
  13acdc:	e3a01013 	mov	r1, #19
  13ace0:	e59f0008 	ldr	r0, [pc, #8]	; 13acf0 <syscall_sigpending+0x18>
  13ace4:	ebfff95e 	bl	139264 <syscall_trace>
  13ace8:	e3a00000 	mov	r0, #0
  13acec:	e8bd8010 	pop	{r4, pc}
  13acf0:	0014af34 	.word	0x0014af34

0013acf4 <syscall_sigsuspend>:
  13acf4:	e92d4010 	push	{r4, lr}
  13acf8:	e3a01013 	mov	r1, #19
  13acfc:	e59f0008 	ldr	r0, [pc, #8]	; 13ad0c <syscall_sigsuspend+0x18>
  13ad00:	ebfff957 	bl	139264 <syscall_trace>
  13ad04:	e3a00000 	mov	r0, #0
  13ad08:	e8bd8010 	pop	{r4, pc}
  13ad0c:	0014af20 	.word	0x0014af20

0013ad10 <syscall_setregid>:
  13ad10:	e92d4010 	push	{r4, lr}
  13ad14:	e3a01011 	mov	r1, #17
  13ad18:	e59f0008 	ldr	r0, [pc, #8]	; 13ad28 <syscall_setregid+0x18>
  13ad1c:	ebfff950 	bl	139264 <syscall_trace>
  13ad20:	e3a00000 	mov	r0, #0
  13ad24:	e8bd8010 	pop	{r4, pc}
  13ad28:	0014af0c 	.word	0x0014af0c

0013ad2c <syscall_setreuid>:
  13ad2c:	e92d4010 	push	{r4, lr}
  13ad30:	e3a01011 	mov	r1, #17
  13ad34:	e59f0008 	ldr	r0, [pc, #8]	; 13ad44 <syscall_setreuid+0x18>
  13ad38:	ebfff949 	bl	139264 <syscall_trace>
  13ad3c:	e3a00000 	mov	r0, #0
  13ad40:	e8bd8010 	pop	{r4, pc}
  13ad44:	0014aef8 	.word	0x0014aef8

0013ad48 <syscall_getpgrp>:
  13ad48:	e92d4010 	push	{r4, lr}
  13ad4c:	e3a01010 	mov	r1, #16
  13ad50:	e59f0008 	ldr	r0, [pc, #8]	; 13ad60 <syscall_getpgrp+0x18>
  13ad54:	ebfff942 	bl	139264 <syscall_trace>
  13ad58:	e3a00000 	mov	r0, #0
  13ad5c:	e8bd8010 	pop	{r4, pc}
  13ad60:	0014aec4 	.word	0x0014aec4

0013ad64 <syscall_getppid>:
  13ad64:	e92d4010 	push	{r4, lr}
  13ad68:	e3a01010 	mov	r1, #16
  13ad6c:	e59f0008 	ldr	r0, [pc, #8]	; 13ad7c <syscall_getppid+0x18>
  13ad70:	ebfff93b 	bl	139264 <syscall_trace>
  13ad74:	e3a00000 	mov	r0, #0
  13ad78:	e8bd8010 	pop	{r4, pc}
  13ad7c:	0014aeb4 	.word	0x0014aeb4

0013ad80 <syscall_ustat>:
  13ad80:	e92d4010 	push	{r4, lr}
  13ad84:	e3a0100e 	mov	r1, #14
  13ad88:	e59f0008 	ldr	r0, [pc, #8]	; 13ad98 <syscall_ustat+0x18>
  13ad8c:	ebfff934 	bl	139264 <syscall_trace>
  13ad90:	e3a00000 	mov	r0, #0
  13ad94:	e8bd8010 	pop	{r4, pc}
  13ad98:	0014ae94 	.word	0x0014ae94

0013ad9c <syscall_chroot>:
  13ad9c:	e92d4010 	push	{r4, lr}
  13ada0:	e3a0100f 	mov	r1, #15
  13ada4:	e59f0008 	ldr	r0, [pc, #8]	; 13adb4 <syscall_chroot+0x18>
  13ada8:	ebfff92d 	bl	139264 <syscall_trace>
  13adac:	e3a00000 	mov	r0, #0
  13adb0:	e8bd8010 	pop	{r4, pc}
  13adb4:	0014ae84 	.word	0x0014ae84

0013adb8 <syscall_umask>:
  13adb8:	e92d4010 	push	{r4, lr}
  13adbc:	e3a0100e 	mov	r1, #14
  13adc0:	e59f0008 	ldr	r0, [pc, #8]	; 13add0 <syscall_umask+0x18>
  13adc4:	ebfff926 	bl	139264 <syscall_trace>
  13adc8:	e3a00000 	mov	r0, #0
  13adcc:	e8bd8010 	pop	{r4, pc}
  13add0:	0014ae74 	.word	0x0014ae74

0013add4 <syscall_setpgid>:
  13add4:	e92d4010 	push	{r4, lr}
  13add8:	e3a01010 	mov	r1, #16
  13addc:	e59f0008 	ldr	r0, [pc, #8]	; 13adec <syscall_setpgid+0x18>
  13ade0:	ebfff91f 	bl	139264 <syscall_trace>
  13ade4:	e3a00000 	mov	r0, #0
  13ade8:	e8bd8010 	pop	{r4, pc}
  13adec:	0014ae64 	.word	0x0014ae64

0013adf0 <syscall_umount2>:
  13adf0:	e92d4010 	push	{r4, lr}
  13adf4:	e3a01010 	mov	r1, #16
  13adf8:	e59f0008 	ldr	r0, [pc, #8]	; 13ae08 <syscall_umount2+0x18>
  13adfc:	ebfff918 	bl	139264 <syscall_trace>
  13ae00:	e3a00000 	mov	r0, #0
  13ae04:	e8bd8010 	pop	{r4, pc}
  13ae08:	0014ae34 	.word	0x0014ae34

0013ae0c <syscall_acct>:
  13ae0c:	e92d4010 	push	{r4, lr}
  13ae10:	e3a0100d 	mov	r1, #13
  13ae14:	e59f0008 	ldr	r0, [pc, #8]	; 13ae24 <syscall_acct+0x18>
  13ae18:	ebfff911 	bl	139264 <syscall_trace>
  13ae1c:	e3a00000 	mov	r0, #0
  13ae20:	e8bd8010 	pop	{r4, pc}
  13ae24:	0014ae24 	.word	0x0014ae24

0013ae28 <syscall_getegid>:
  13ae28:	e92d4010 	push	{r4, lr}
  13ae2c:	e3a01010 	mov	r1, #16
  13ae30:	e59f0008 	ldr	r0, [pc, #8]	; 13ae40 <syscall_getegid+0x18>
  13ae34:	ebfff90a 	bl	139264 <syscall_trace>
  13ae38:	e3a00000 	mov	r0, #0
  13ae3c:	e8bd8010 	pop	{r4, pc}
  13ae40:	0014ae14 	.word	0x0014ae14

0013ae44 <syscall_geteuid>:
  13ae44:	e92d4010 	push	{r4, lr}
  13ae48:	e3a01010 	mov	r1, #16
  13ae4c:	e59f0008 	ldr	r0, [pc, #8]	; 13ae5c <syscall_geteuid+0x18>
  13ae50:	ebfff903 	bl	139264 <syscall_trace>
  13ae54:	e3a00000 	mov	r0, #0
  13ae58:	e8bd8010 	pop	{r4, pc}
  13ae5c:	0014ae04 	.word	0x0014ae04

0013ae60 <syscall_getgid>:
  13ae60:	e92d4010 	push	{r4, lr}
  13ae64:	e3a0100f 	mov	r1, #15
  13ae68:	e59f0008 	ldr	r0, [pc, #8]	; 13ae78 <syscall_getgid+0x18>
  13ae6c:	ebfff8fc 	bl	139264 <syscall_trace>
  13ae70:	e3a00000 	mov	r0, #0
  13ae74:	e8bd8010 	pop	{r4, pc}
  13ae78:	0014adf4 	.word	0x0014adf4

0013ae7c <syscall_setgid>:
  13ae7c:	e92d4010 	push	{r4, lr}
  13ae80:	e3a0100f 	mov	r1, #15
  13ae84:	e59f0008 	ldr	r0, [pc, #8]	; 13ae94 <syscall_setgid+0x18>
  13ae88:	ebfff8f5 	bl	139264 <syscall_trace>
  13ae8c:	e3a00000 	mov	r0, #0
  13ae90:	e8bd8010 	pop	{r4, pc}
  13ae94:	0014ade4 	.word	0x0014ade4

0013ae98 <syscall_times>:
  13ae98:	e92d4010 	push	{r4, lr}
  13ae9c:	e3a0100e 	mov	r1, #14
  13aea0:	e59f0008 	ldr	r0, [pc, #8]	; 13aeb0 <syscall_times+0x18>
  13aea4:	ebfff8ee 	bl	139264 <syscall_trace>
  13aea8:	e3a00000 	mov	r0, #0
  13aeac:	e8bd8010 	pop	{r4, pc}
  13aeb0:	0014adc8 	.word	0x0014adc8

0013aeb4 <syscall_sync>:
  13aeb4:	e92d4010 	push	{r4, lr}
  13aeb8:	e3a0100d 	mov	r1, #13
  13aebc:	e59f0008 	ldr	r0, [pc, #8]	; 13aecc <syscall_sync+0x18>
  13aec0:	ebfff8e7 	bl	139264 <syscall_trace>
  13aec4:	e3a00000 	mov	r0, #0
  13aec8:	e8bd8010 	pop	{r4, pc}
  13aecc:	0014ad5c 	.word	0x0014ad5c

0013aed0 <syscall_nice>:
  13aed0:	e92d4010 	push	{r4, lr}
  13aed4:	e3a0100d 	mov	r1, #13
  13aed8:	e59f0008 	ldr	r0, [pc, #8]	; 13aee8 <syscall_nice+0x18>
  13aedc:	ebfff8e0 	bl	139264 <syscall_trace>
  13aee0:	e3a00000 	mov	r0, #0
  13aee4:	e8bd8010 	pop	{r4, pc}
  13aee8:	0014ad4c 	.word	0x0014ad4c

0013aeec <syscall_pause>:
  13aeec:	e92d4010 	push	{r4, lr}
  13aef0:	e3a0100e 	mov	r1, #14
  13aef4:	e59f0008 	ldr	r0, [pc, #8]	; 13af04 <syscall_pause+0x18>
  13aef8:	ebfff8d9 	bl	139264 <syscall_trace>
  13aefc:	e3a00000 	mov	r0, #0
  13af00:	e8bd8010 	pop	{r4, pc}
  13af04:	0014ad2c 	.word	0x0014ad2c

0013af08 <syscall_ptrace>:
  13af08:	e92d4010 	push	{r4, lr}
  13af0c:	e3a0100f 	mov	r1, #15
  13af10:	e59f0008 	ldr	r0, [pc, #8]	; 13af20 <syscall_ptrace+0x18>
  13af14:	ebfff8d2 	bl	139264 <syscall_trace>
  13af18:	e3a00000 	mov	r0, #0
  13af1c:	e8bd8010 	pop	{r4, pc}
  13af20:	0014ad1c 	.word	0x0014ad1c

0013af24 <syscall_getuid>:
  13af24:	e92d4010 	push	{r4, lr}
  13af28:	e3a0100f 	mov	r1, #15
  13af2c:	e59f0008 	ldr	r0, [pc, #8]	; 13af3c <syscall_getuid+0x18>
  13af30:	ebfff8cb 	bl	139264 <syscall_trace>
  13af34:	e3a00000 	mov	r0, #0
  13af38:	e8bd8010 	pop	{r4, pc}
  13af3c:	0014ad0c 	.word	0x0014ad0c

0013af40 <syscall_setuid>:
  13af40:	e92d4010 	push	{r4, lr}
  13af44:	e3a0100f 	mov	r1, #15
  13af48:	e59f0008 	ldr	r0, [pc, #8]	; 13af58 <syscall_setuid+0x18>
  13af4c:	ebfff8c4 	bl	139264 <syscall_trace>
  13af50:	e3a00000 	mov	r0, #0
  13af54:	e8bd8010 	pop	{r4, pc}
  13af58:	0014acfc 	.word	0x0014acfc

0013af5c <syscall_mount>:
  13af5c:	e92d4010 	push	{r4, lr}
  13af60:	e3a0100e 	mov	r1, #14
  13af64:	e59f0008 	ldr	r0, [pc, #8]	; 13af74 <syscall_mount+0x18>
  13af68:	ebfff8bd 	bl	139264 <syscall_trace>
  13af6c:	e3a00000 	mov	r0, #0
  13af70:	e8bd8010 	pop	{r4, pc}
  13af74:	0014acec 	.word	0x0014acec

0013af78 <syscall_lchown>:
  13af78:	e92d4010 	push	{r4, lr}
  13af7c:	e3a0100f 	mov	r1, #15
  13af80:	e59f0008 	ldr	r0, [pc, #8]	; 13af90 <syscall_lchown+0x18>
  13af84:	ebfff8b6 	bl	139264 <syscall_trace>
  13af88:	e3a00000 	mov	r0, #0
  13af8c:	e8bd8010 	pop	{r4, pc}
  13af90:	0014acbc 	.word	0x0014acbc

0013af94 <syscall_chmod>:
  13af94:	e92d4010 	push	{r4, lr}
  13af98:	e3a0100e 	mov	r1, #14
  13af9c:	e59f0008 	ldr	r0, [pc, #8]	; 13afac <syscall_chmod+0x18>
  13afa0:	ebfff8af 	bl	139264 <syscall_trace>
  13afa4:	e3a00000 	mov	r0, #0
  13afa8:	e8bd8010 	pop	{r4, pc}
  13afac:	0014acac 	.word	0x0014acac

0013afb0 <syscall_mknod>:
  13afb0:	e92d4010 	push	{r4, lr}
  13afb4:	e3a0100e 	mov	r1, #14
  13afb8:	e59f0008 	ldr	r0, [pc, #8]	; 13afc8 <syscall_mknod+0x18>
  13afbc:	ebfff8a8 	bl	139264 <syscall_trace>
  13afc0:	e3a00000 	mov	r0, #0
  13afc4:	e8bd8010 	pop	{r4, pc}
  13afc8:	0014ac9c 	.word	0x0014ac9c

0013afcc <syscall_link>:
  13afcc:	e92d4010 	push	{r4, lr}
  13afd0:	e3a0100d 	mov	r1, #13
  13afd4:	e59f0008 	ldr	r0, [pc, #8]	; 13afe4 <syscall_link+0x18>
  13afd8:	ebfff8a1 	bl	139264 <syscall_trace>
  13afdc:	e3a00000 	mov	r0, #0
  13afe0:	e8bd8010 	pop	{r4, pc}
  13afe4:	0014ac5c 	.word	0x0014ac5c

0013afe8 <syscall_creat>:
  13afe8:	e92d4010 	push	{r4, lr}
  13afec:	e3a0100e 	mov	r1, #14
  13aff0:	e59f0008 	ldr	r0, [pc, #8]	; 13b000 <syscall_creat+0x18>
  13aff4:	ebfff89a 	bl	139264 <syscall_trace>
  13aff8:	e3a00000 	mov	r0, #0
  13affc:	e8bd8010 	pop	{r4, pc}
  13b000:	0014ac4c 	.word	0x0014ac4c

0013b004 <syscall_restart_syscall>:
  13b004:	e92d4010 	push	{r4, lr}
  13b008:	e3a01018 	mov	r1, #24
  13b00c:	e59f0008 	ldr	r0, [pc, #8]	; 13b01c <syscall_restart_syscall+0x18>
  13b010:	ebfff893 	bl	139264 <syscall_trace>
  13b014:	e3a00000 	mov	r0, #0
  13b018:	e8bd8010 	pop	{r4, pc}
  13b01c:	0014abd4 	.word	0x0014abd4

0013b020 <syscall_debug>:
  13b020:	e92d4070 	push	{r4, r5, r6, lr}
  13b024:	e1a04000 	mov	r4, r0
  13b028:	e1a05001 	mov	r5, r1
  13b02c:	e3a0201d 	mov	r2, #29
  13b030:	e59f1018 	ldr	r1, [pc, #24]	; 13b050 <syscall_debug+0x30>
  13b034:	e3a000ff 	mov	r0, #255	; 0xff
  13b038:	eb0004f9 	bl	13c424 <syscall>
  13b03c:	e1a02005 	mov	r2, r5
  13b040:	e1a01004 	mov	r1, r4
  13b044:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b048:	e3a000ff 	mov	r0, #255	; 0xff
  13b04c:	ea0004f4 	b	13c424 <syscall>
  13b050:	0014c694 	.word	0x0014c694

0013b054 <syscall_shmdt>:
  13b054:	e92d4010 	push	{r4, lr}
  13b058:	e1a04000 	mov	r4, r0
  13b05c:	e3a0100e 	mov	r1, #14
  13b060:	e59f0010 	ldr	r0, [pc, #16]	; 13b078 <syscall_shmdt+0x24>
  13b064:	ebffffed 	bl	13b020 <syscall_debug>
  13b068:	e1a01004 	mov	r1, r4
  13b06c:	e8bd4010 	pop	{r4, lr}
  13b070:	e59f0004 	ldr	r0, [pc, #4]	; 13b07c <syscall_shmdt+0x28>
  13b074:	ea0004ea 	b	13c424 <syscall>
  13b078:	0014bf2c 	.word	0x0014bf2c
  13b07c:	00000132 	.word	0x00000132

0013b080 <syscall_set_tid_address>:
  13b080:	e92d4010 	push	{r4, lr}
  13b084:	e1a04000 	mov	r4, r0
  13b088:	e3a01018 	mov	r1, #24
  13b08c:	e59f0010 	ldr	r0, [pc, #16]	; 13b0a4 <syscall_set_tid_address+0x24>
  13b090:	ebffffe2 	bl	13b020 <syscall_debug>
  13b094:	e1a01004 	mov	r1, r4
  13b098:	e8bd4010 	pop	{r4, lr}
  13b09c:	e3a0007c 	mov	r0, #124	; 0x7c
  13b0a0:	ea0004df 	b	13c424 <syscall>
  13b0a4:	0014bb4c 	.word	0x0014bb4c

0013b0a8 <syscall_exit_group>:
  13b0a8:	e92d4010 	push	{r4, lr}
  13b0ac:	e1a04000 	mov	r4, r0
  13b0b0:	e3a01013 	mov	r1, #19
  13b0b4:	e59f0010 	ldr	r0, [pc, #16]	; 13b0cc <syscall_exit_group+0x24>
  13b0b8:	ebffffd8 	bl	13b020 <syscall_debug>
  13b0bc:	e1a01004 	mov	r1, r4
  13b0c0:	e8bd4010 	pop	{r4, lr}
  13b0c4:	e3a00062 	mov	r0, #98	; 0x62
  13b0c8:	ea0004d5 	b	13c424 <syscall>
  13b0cc:	0014bac4 	.word	0x0014bac4

0013b0d0 <syscall_sched_get_priority_min>:
  13b0d0:	e92d4010 	push	{r4, lr}
  13b0d4:	e1a04000 	mov	r4, r0
  13b0d8:	e3a0101f 	mov	r1, #31
  13b0dc:	e59f0010 	ldr	r0, [pc, #16]	; 13b0f4 <syscall_sched_get_priority_min+0x24>
  13b0e0:	ebffffce 	bl	13b020 <syscall_debug>
  13b0e4:	e1a01004 	mov	r1, r4
  13b0e8:	e8bd4010 	pop	{r4, lr}
  13b0ec:	e3a00097 	mov	r0, #151	; 0x97
  13b0f0:	ea0004cb 	b	13c424 <syscall>
  13b0f4:	0014b45c 	.word	0x0014b45c

0013b0f8 <syscall_sched_get_priority_max>:
  13b0f8:	e92d4010 	push	{r4, lr}
  13b0fc:	e1a04000 	mov	r4, r0
  13b100:	e3a0101f 	mov	r1, #31
  13b104:	e59f0010 	ldr	r0, [pc, #16]	; 13b11c <syscall_sched_get_priority_max+0x24>
  13b108:	ebffffc4 	bl	13b020 <syscall_debug>
  13b10c:	e1a01004 	mov	r1, r4
  13b110:	e8bd4010 	pop	{r4, lr}
  13b114:	e3a00096 	mov	r0, #150	; 0x96
  13b118:	ea0004c1 	b	13c424 <syscall>
  13b11c:	0014b43c 	.word	0x0014b43c

0013b120 <syscall_fsync>:
  13b120:	e92d4010 	push	{r4, lr}
  13b124:	e1a04000 	mov	r4, r0
  13b128:	e3a0100e 	mov	r1, #14
  13b12c:	e59f0010 	ldr	r0, [pc, #16]	; 13b144 <syscall_fsync+0x24>
  13b130:	ebffffba 	bl	13b020 <syscall_debug>
  13b134:	e1a01004 	mov	r1, r4
  13b138:	e8bd4010 	pop	{r4, lr}
  13b13c:	e3a0009b 	mov	r0, #155	; 0x9b
  13b140:	ea0004b7 	b	13c424 <syscall>
  13b144:	0014b178 	.word	0x0014b178

0013b148 <syscall_brk>:
  13b148:	e92d4010 	push	{r4, lr}
  13b14c:	e1a04000 	mov	r4, r0
  13b150:	e3a0100c 	mov	r1, #12
  13b154:	e59f0010 	ldr	r0, [pc, #16]	; 13b16c <syscall_brk+0x24>
  13b158:	ebffffb0 	bl	13b020 <syscall_debug>
  13b15c:	e1a01004 	mov	r1, r4
  13b160:	e8bd4010 	pop	{r4, lr}
  13b164:	e3a00034 	mov	r0, #52	; 0x34
  13b168:	ea0004ad 	b	13c424 <syscall>
  13b16c:	0014add8 	.word	0x0014add8

0013b170 <syscall_pipe>:
  13b170:	e92d4010 	push	{r4, lr}
  13b174:	e1a04000 	mov	r4, r0
  13b178:	e3a0100d 	mov	r1, #13
  13b17c:	e59f0010 	ldr	r0, [pc, #16]	; 13b194 <syscall_pipe+0x24>
  13b180:	ebffffa6 	bl	13b020 <syscall_debug>
  13b184:	e1a01004 	mov	r1, r4
  13b188:	e8bd4010 	pop	{r4, lr}
  13b18c:	e3a0007e 	mov	r0, #126	; 0x7e
  13b190:	ea0004a3 	b	13c424 <syscall>
  13b194:	0014adb8 	.word	0x0014adb8

0013b198 <syscall_dup>:
  13b198:	e92d4010 	push	{r4, lr}
  13b19c:	e1a04000 	mov	r4, r0
  13b1a0:	e3a0100c 	mov	r1, #12
  13b1a4:	e59f0010 	ldr	r0, [pc, #16]	; 13b1bc <syscall_dup+0x24>
  13b1a8:	ebffff9c 	bl	13b020 <syscall_debug>
  13b1ac:	e1a01004 	mov	r1, r4
  13b1b0:	e8bd4010 	pop	{r4, lr}
  13b1b4:	e3a00085 	mov	r0, #133	; 0x85
  13b1b8:	ea000499 	b	13c424 <syscall>
  13b1bc:	0014adac 	.word	0x0014adac

0013b1c0 <syscall_rmdir>:
  13b1c0:	e92d4010 	push	{r4, lr}
  13b1c4:	e1a04000 	mov	r4, r0
  13b1c8:	e3a0100e 	mov	r1, #14
  13b1cc:	e59f0010 	ldr	r0, [pc, #16]	; 13b1e4 <syscall_rmdir+0x24>
  13b1d0:	ebffff92 	bl	13b020 <syscall_debug>
  13b1d4:	e1a01004 	mov	r1, r4
  13b1d8:	e8bd4010 	pop	{r4, lr}
  13b1dc:	e3a00078 	mov	r0, #120	; 0x78
  13b1e0:	ea00048f 	b	13c424 <syscall>
  13b1e4:	0014ad9c 	.word	0x0014ad9c

0013b1e8 <syscall_chdir>:
  13b1e8:	e92d4010 	push	{r4, lr}
  13b1ec:	e1a04000 	mov	r4, r0
  13b1f0:	e3a0100e 	mov	r1, #14
  13b1f4:	e59f0010 	ldr	r0, [pc, #16]	; 13b20c <syscall_chdir+0x24>
  13b1f8:	ebffff88 	bl	13b020 <syscall_debug>
  13b1fc:	e1a01004 	mov	r1, r4
  13b200:	e8bd4010 	pop	{r4, lr}
  13b204:	e3a00075 	mov	r0, #117	; 0x75
  13b208:	ea000485 	b	13c424 <syscall>
  13b20c:	0014ac8c 	.word	0x0014ac8c

0013b210 <syscall_unlink>:
  13b210:	e92d4010 	push	{r4, lr}
  13b214:	e1a04000 	mov	r4, r0
  13b218:	e3a0100f 	mov	r1, #15
  13b21c:	e59f0010 	ldr	r0, [pc, #16]	; 13b234 <syscall_unlink+0x24>
  13b220:	ebffff7e 	bl	13b020 <syscall_debug>
  13b224:	e1a01004 	mov	r1, r4
  13b228:	e8bd4010 	pop	{r4, lr}
  13b22c:	e3a00076 	mov	r0, #118	; 0x76
  13b230:	ea00047b 	b	13c424 <syscall>
  13b234:	0014ac6c 	.word	0x0014ac6c

0013b238 <syscall_close>:
  13b238:	e92d4010 	push	{r4, lr}
  13b23c:	e1a04000 	mov	r4, r0
  13b240:	e3a0100e 	mov	r1, #14
  13b244:	e59f0010 	ldr	r0, [pc, #16]	; 13b25c <syscall_close+0x24>
  13b248:	ebffff74 	bl	13b020 <syscall_debug>
  13b24c:	e1a01004 	mov	r1, r4
  13b250:	e8bd4010 	pop	{r4, lr}
  13b254:	e3a00006 	mov	r0, #6
  13b258:	ea000471 	b	13c424 <syscall>
  13b25c:	0014ac3c 	.word	0x0014ac3c

0013b260 <syscall_exit>:
  13b260:	e92d4010 	push	{r4, lr}
  13b264:	e1a04000 	mov	r4, r0
  13b268:	e3a0100d 	mov	r1, #13
  13b26c:	e59f0010 	ldr	r0, [pc, #16]	; 13b284 <syscall_exit+0x24>
  13b270:	ebffff6a 	bl	13b020 <syscall_debug>
  13b274:	e1a01004 	mov	r1, r4
  13b278:	e8bd4010 	pop	{r4, lr}
  13b27c:	e3a00001 	mov	r0, #1
  13b280:	ea000467 	b	13c424 <syscall>
  13b284:	0014abec 	.word	0x0014abec

0013b288 <syscall_listen>:
  13b288:	e92d4070 	push	{r4, r5, r6, lr}
  13b28c:	e1a04000 	mov	r4, r0
  13b290:	e1a05001 	mov	r5, r1
  13b294:	e59f0018 	ldr	r0, [pc, #24]	; 13b2b4 <syscall_listen+0x2c>
  13b298:	e3a0100f 	mov	r1, #15
  13b29c:	ebffff5f 	bl	13b020 <syscall_debug>
  13b2a0:	e1a02005 	mov	r2, r5
  13b2a4:	e1a01004 	mov	r1, r4
  13b2a8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b2ac:	e3a0004d 	mov	r0, #77	; 0x4d
  13b2b0:	ea00045b 	b	13c424 <syscall>
  13b2b4:	0014bdb0 	.word	0x0014bdb0

0013b2b8 <syscall_clock_getres>:
  13b2b8:	e92d4070 	push	{r4, r5, r6, lr}
  13b2bc:	e1a04000 	mov	r4, r0
  13b2c0:	e1a05001 	mov	r5, r1
  13b2c4:	e59f0018 	ldr	r0, [pc, #24]	; 13b2e4 <syscall_clock_getres+0x2c>
  13b2c8:	e3a01015 	mov	r1, #21
  13b2cc:	ebffff53 	bl	13b020 <syscall_debug>
  13b2d0:	e1a02005 	mov	r2, r5
  13b2d4:	e1a01004 	mov	r1, r4
  13b2d8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b2dc:	e3a00081 	mov	r0, #129	; 0x81
  13b2e0:	ea00044f 	b	13c424 <syscall>
  13b2e4:	0014bc10 	.word	0x0014bc10

0013b2e8 <syscall_clock_gettime>:
  13b2e8:	e92d4070 	push	{r4, r5, r6, lr}
  13b2ec:	e1a04000 	mov	r4, r0
  13b2f0:	e1a05001 	mov	r5, r1
  13b2f4:	e59f0018 	ldr	r0, [pc, #24]	; 13b314 <syscall_clock_gettime+0x2c>
  13b2f8:	e3a01016 	mov	r1, #22
  13b2fc:	ebffff47 	bl	13b020 <syscall_debug>
  13b300:	e1a02005 	mov	r2, r5
  13b304:	e1a01004 	mov	r1, r4
  13b308:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b30c:	e3a00080 	mov	r0, #128	; 0x80
  13b310:	ea000443 	b	13c424 <syscall>
  13b314:	0014bbf8 	.word	0x0014bbf8

0013b318 <syscall_clock_settime>:
  13b318:	e92d4070 	push	{r4, r5, r6, lr}
  13b31c:	e1a04000 	mov	r4, r0
  13b320:	e1a05001 	mov	r5, r1
  13b324:	e59f0018 	ldr	r0, [pc, #24]	; 13b344 <syscall_clock_settime+0x2c>
  13b328:	e3a01016 	mov	r1, #22
  13b32c:	ebffff3b 	bl	13b020 <syscall_debug>
  13b330:	e1a02005 	mov	r2, r5
  13b334:	e1a01004 	mov	r1, r4
  13b338:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b33c:	e3a0007f 	mov	r0, #127	; 0x7f
  13b340:	ea000437 	b	13c424 <syscall>
  13b344:	0014bbe0 	.word	0x0014bbe0

0013b348 <syscall_tkill>:
  13b348:	e92d4070 	push	{r4, r5, r6, lr}
  13b34c:	e1a04000 	mov	r4, r0
  13b350:	e1a05001 	mov	r5, r1
  13b354:	e59f0018 	ldr	r0, [pc, #24]	; 13b374 <syscall_tkill+0x2c>
  13b358:	e3a0100e 	mov	r1, #14
  13b35c:	ebffff2f 	bl	13b020 <syscall_debug>
  13b360:	e1a02005 	mov	r2, r5
  13b364:	e1a01004 	mov	r1, r4
  13b368:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b36c:	e3a00069 	mov	r0, #105	; 0x69
  13b370:	ea00042b 	b	13c424 <syscall>
  13b374:	0014b9f0 	.word	0x0014b9f0

0013b378 <syscall_fstat64>:
  13b378:	e92d4070 	push	{r4, r5, r6, lr}
  13b37c:	e1a04000 	mov	r4, r0
  13b380:	e1a05001 	mov	r5, r1
  13b384:	e59f0018 	ldr	r0, [pc, #24]	; 13b3a4 <syscall_fstat64+0x2c>
  13b388:	e3a01010 	mov	r1, #16
  13b38c:	ebffff23 	bl	13b020 <syscall_debug>
  13b390:	e1a02005 	mov	r2, r5
  13b394:	e1a01004 	mov	r1, r4
  13b398:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b39c:	e3a00008 	mov	r0, #8
  13b3a0:	ea00041f 	b	13c424 <syscall>
  13b3a4:	0014b6f4 	.word	0x0014b6f4

0013b3a8 <syscall_lstat64>:
  13b3a8:	e92d4070 	push	{r4, r5, r6, lr}
  13b3ac:	e1a04000 	mov	r4, r0
  13b3b0:	e1a05001 	mov	r5, r1
  13b3b4:	e59f0018 	ldr	r0, [pc, #24]	; 13b3d4 <syscall_lstat64+0x2c>
  13b3b8:	e3a01010 	mov	r1, #16
  13b3bc:	ebffff17 	bl	13b020 <syscall_debug>
  13b3c0:	e1a02005 	mov	r2, r5
  13b3c4:	e1a01004 	mov	r1, r4
  13b3c8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b3cc:	e3a00043 	mov	r0, #67	; 0x43
  13b3d0:	ea000413 	b	13c424 <syscall>
  13b3d4:	0014b6e4 	.word	0x0014b6e4

0013b3d8 <syscall_stat64>:
  13b3d8:	e92d4070 	push	{r4, r5, r6, lr}
  13b3dc:	e1a04000 	mov	r4, r0
  13b3e0:	e1a05001 	mov	r5, r1
  13b3e4:	e59f0018 	ldr	r0, [pc, #24]	; 13b404 <syscall_stat64+0x2c>
  13b3e8:	e3a0100f 	mov	r1, #15
  13b3ec:	ebffff0b 	bl	13b020 <syscall_debug>
  13b3f0:	e1a02005 	mov	r2, r5
  13b3f4:	e1a01004 	mov	r1, r4
  13b3f8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b3fc:	e3a00043 	mov	r0, #67	; 0x43
  13b400:	ea000407 	b	13c424 <syscall>
  13b404:	0014b6d4 	.word	0x0014b6d4

0013b408 <syscall_ugetrlimit>:
  13b408:	e92d4070 	push	{r4, r5, r6, lr}
  13b40c:	e1a04000 	mov	r4, r0
  13b410:	e1a05001 	mov	r5, r1
  13b414:	e59f0018 	ldr	r0, [pc, #24]	; 13b434 <syscall_ugetrlimit+0x2c>
  13b418:	e3a01013 	mov	r1, #19
  13b41c:	ebfffeff 	bl	13b020 <syscall_debug>
  13b420:	e1a02005 	mov	r2, r5
  13b424:	e1a01004 	mov	r1, r4
  13b428:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b42c:	e3a0008d 	mov	r0, #141	; 0x8d
  13b430:	ea0003fb 	b	13c424 <syscall>
  13b434:	0014b688 	.word	0x0014b688

0013b438 <syscall_getcwd>:
  13b438:	e92d4070 	push	{r4, r5, r6, lr}
  13b43c:	e1a04000 	mov	r4, r0
  13b440:	e1a05001 	mov	r5, r1
  13b444:	e59f0018 	ldr	r0, [pc, #24]	; 13b464 <syscall_getcwd+0x2c>
  13b448:	e3a0100f 	mov	r1, #15
  13b44c:	ebfffef3 	bl	13b020 <syscall_debug>
  13b450:	e1a02005 	mov	r2, r5
  13b454:	e1a01004 	mov	r1, r4
  13b458:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b45c:	e3a00074 	mov	r0, #116	; 0x74
  13b460:	ea0003ef 	b	13c424 <syscall>
  13b464:	0014b620 	.word	0x0014b620

0013b468 <syscall_nanosleep>:
  13b468:	e92d4070 	push	{r4, r5, r6, lr}
  13b46c:	e1a04000 	mov	r4, r0
  13b470:	e1a05001 	mov	r5, r1
  13b474:	e59f0018 	ldr	r0, [pc, #24]	; 13b494 <syscall_nanosleep+0x2c>
  13b478:	e3a01012 	mov	r1, #18
  13b47c:	ebfffee7 	bl	13b020 <syscall_debug>
  13b480:	e1a02005 	mov	r2, r5
  13b484:	e1a01004 	mov	r1, r4
  13b488:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b48c:	e3a0000a 	mov	r0, #10
  13b490:	ea0003e3 	b	13c424 <syscall>
  13b494:	0014b49c 	.word	0x0014b49c

0013b498 <syscall_sched_getparam>:
  13b498:	e92d4070 	push	{r4, r5, r6, lr}
  13b49c:	e1a04000 	mov	r4, r0
  13b4a0:	e1a05001 	mov	r5, r1
  13b4a4:	e59f0018 	ldr	r0, [pc, #24]	; 13b4c4 <syscall_sched_getparam+0x2c>
  13b4a8:	e3a01017 	mov	r1, #23
  13b4ac:	ebfffedb 	bl	13b020 <syscall_debug>
  13b4b0:	e1a02005 	mov	r2, r5
  13b4b4:	e1a01004 	mov	r1, r4
  13b4b8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b4bc:	e3a00095 	mov	r0, #149	; 0x95
  13b4c0:	ea0003d7 	b	13c424 <syscall>
  13b4c4:	0014b3d8 	.word	0x0014b3d8

0013b4c8 <syscall_sched_setparam>:
  13b4c8:	e92d4070 	push	{r4, r5, r6, lr}
  13b4cc:	e1a04000 	mov	r4, r0
  13b4d0:	e1a05001 	mov	r5, r1
  13b4d4:	e59f0018 	ldr	r0, [pc, #24]	; 13b4f4 <syscall_sched_setparam+0x2c>
  13b4d8:	e3a01017 	mov	r1, #23
  13b4dc:	ebfffecf 	bl	13b020 <syscall_debug>
  13b4e0:	e1a02005 	mov	r2, r5
  13b4e4:	e1a01004 	mov	r1, r4
  13b4e8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b4ec:	e3a00094 	mov	r0, #148	; 0x94
  13b4f0:	ea0003cb 	b	13c424 <syscall>
  13b4f4:	0014b3c0 	.word	0x0014b3c0

0013b4f8 <syscall_lstat>:
  13b4f8:	e92d4070 	push	{r4, r5, r6, lr}
  13b4fc:	e1a04000 	mov	r4, r0
  13b500:	e1a05001 	mov	r5, r1
  13b504:	e59f0018 	ldr	r0, [pc, #24]	; 13b524 <syscall_lstat+0x2c>
  13b508:	e3a0100e 	mov	r1, #14
  13b50c:	ebfffec3 	bl	13b020 <syscall_debug>
  13b510:	e1a02005 	mov	r2, r5
  13b514:	e1a01004 	mov	r1, r4
  13b518:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b51c:	e3a00043 	mov	r0, #67	; 0x43
  13b520:	ea0003bf 	b	13c424 <syscall>
  13b524:	0014b118 	.word	0x0014b118

0013b528 <syscall_stat>:
  13b528:	e92d4070 	push	{r4, r5, r6, lr}
  13b52c:	e1a04000 	mov	r4, r0
  13b530:	e1a05001 	mov	r5, r1
  13b534:	e59f0018 	ldr	r0, [pc, #24]	; 13b554 <syscall_stat+0x2c>
  13b538:	e3a0100d 	mov	r1, #13
  13b53c:	ebfffeb7 	bl	13b020 <syscall_debug>
  13b540:	e1a02005 	mov	r2, r5
  13b544:	e1a01004 	mov	r1, r4
  13b548:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b54c:	e3a00043 	mov	r0, #67	; 0x43
  13b550:	ea0003b3 	b	13c424 <syscall>
  13b554:	0014b108 	.word	0x0014b108

0013b558 <syscall_munmap>:
  13b558:	e92d4070 	push	{r4, r5, r6, lr}
  13b55c:	e1a04000 	mov	r4, r0
  13b560:	e1a05001 	mov	r5, r1
  13b564:	e59f0018 	ldr	r0, [pc, #24]	; 13b584 <syscall_munmap+0x2c>
  13b568:	e3a0100f 	mov	r1, #15
  13b56c:	ebfffeab 	bl	13b020 <syscall_debug>
  13b570:	e1a02005 	mov	r2, r5
  13b574:	e1a01004 	mov	r1, r4
  13b578:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b57c:	e3a00036 	mov	r0, #54	; 0x36
  13b580:	ea0003a7 	b	13c424 <syscall>
  13b584:	0014b030 	.word	0x0014b030

0013b588 <syscall_setrlimit>:
  13b588:	e92d4070 	push	{r4, r5, r6, lr}
  13b58c:	e1a04000 	mov	r4, r0
  13b590:	e1a05001 	mov	r5, r1
  13b594:	e59f0018 	ldr	r0, [pc, #24]	; 13b5b4 <syscall_setrlimit+0x2c>
  13b598:	e3a01012 	mov	r1, #18
  13b59c:	ebfffe9f 	bl	13b020 <syscall_debug>
  13b5a0:	e1a02005 	mov	r2, r5
  13b5a4:	e1a01004 	mov	r1, r4
  13b5a8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b5ac:	e3a0008e 	mov	r0, #142	; 0x8e
  13b5b0:	ea00039b 	b	13c424 <syscall>
  13b5b4:	0014af5c 	.word	0x0014af5c

0013b5b8 <syscall_dup2>:
  13b5b8:	e92d4070 	push	{r4, r5, r6, lr}
  13b5bc:	e1a04000 	mov	r4, r0
  13b5c0:	e1a05001 	mov	r5, r1
  13b5c4:	e59f0018 	ldr	r0, [pc, #24]	; 13b5e4 <syscall_dup2+0x2c>
  13b5c8:	e3a0100d 	mov	r1, #13
  13b5cc:	ebfffe93 	bl	13b020 <syscall_debug>
  13b5d0:	e1a02005 	mov	r2, r5
  13b5d4:	e1a01004 	mov	r1, r4
  13b5d8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b5dc:	e3a00086 	mov	r0, #134	; 0x86
  13b5e0:	ea00038f 	b	13c424 <syscall>
  13b5e4:	0014aea4 	.word	0x0014aea4

0013b5e8 <syscall_mkdir>:
  13b5e8:	e92d4070 	push	{r4, r5, r6, lr}
  13b5ec:	e1a04000 	mov	r4, r0
  13b5f0:	e1a05001 	mov	r5, r1
  13b5f4:	e59f0018 	ldr	r0, [pc, #24]	; 13b614 <syscall_mkdir+0x2c>
  13b5f8:	e3a0100e 	mov	r1, #14
  13b5fc:	ebfffe87 	bl	13b020 <syscall_debug>
  13b600:	e1a02005 	mov	r2, r5
  13b604:	e1a01004 	mov	r1, r4
  13b608:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b60c:	e3a00077 	mov	r0, #119	; 0x77
  13b610:	ea000383 	b	13c424 <syscall>
  13b614:	0014ad8c 	.word	0x0014ad8c

0013b618 <syscall_rename>:
  13b618:	e92d4070 	push	{r4, r5, r6, lr}
  13b61c:	e1a04000 	mov	r4, r0
  13b620:	e1a05001 	mov	r5, r1
  13b624:	e59f0018 	ldr	r0, [pc, #24]	; 13b644 <syscall_rename+0x2c>
  13b628:	e3a0100f 	mov	r1, #15
  13b62c:	ebfffe7b 	bl	13b020 <syscall_debug>
  13b630:	e1a02005 	mov	r2, r5
  13b634:	e1a01004 	mov	r1, r4
  13b638:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b63c:	e3a00087 	mov	r0, #135	; 0x87
  13b640:	ea000377 	b	13c424 <syscall>
  13b644:	0014ad7c 	.word	0x0014ad7c

0013b648 <syscall_kill>:
  13b648:	e92d4070 	push	{r4, r5, r6, lr}
  13b64c:	e1a04000 	mov	r4, r0
  13b650:	e1a05001 	mov	r5, r1
  13b654:	e59f0018 	ldr	r0, [pc, #24]	; 13b674 <syscall_kill+0x2c>
  13b658:	e3a0100d 	mov	r1, #13
  13b65c:	ebfffe6f 	bl	13b020 <syscall_debug>
  13b660:	e1a02005 	mov	r2, r5
  13b664:	e1a01004 	mov	r1, r4
  13b668:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b66c:	e3a0000e 	mov	r0, #14
  13b670:	ea00036b 	b	13c424 <syscall>
  13b674:	0014ad6c 	.word	0x0014ad6c

0013b678 <syscall_access>:
  13b678:	e92d4070 	push	{r4, r5, r6, lr}
  13b67c:	e1a04000 	mov	r4, r0
  13b680:	e1a05001 	mov	r5, r1
  13b684:	e59f0018 	ldr	r0, [pc, #24]	; 13b6a4 <syscall_access+0x2c>
  13b688:	e3a0100f 	mov	r1, #15
  13b68c:	ebfffe63 	bl	13b020 <syscall_debug>
  13b690:	e1a02005 	mov	r2, r5
  13b694:	e1a01004 	mov	r1, r4
  13b698:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b69c:	e3a0007d 	mov	r0, #125	; 0x7d
  13b6a0:	ea00035f 	b	13c424 <syscall>
  13b6a4:	0014ad3c 	.word	0x0014ad3c

0013b6a8 <syscall_getrandom>:
  13b6a8:	e92d4070 	push	{r4, r5, r6, lr}
  13b6ac:	e1a06002 	mov	r6, r2
  13b6b0:	e1a04000 	mov	r4, r0
  13b6b4:	e1a05001 	mov	r5, r1
  13b6b8:	e59f001c 	ldr	r0, [pc, #28]	; 13b6dc <syscall_getrandom+0x34>
  13b6bc:	e3a01012 	mov	r1, #18
  13b6c0:	ebfffe56 	bl	13b020 <syscall_debug>
  13b6c4:	e1a03006 	mov	r3, r6
  13b6c8:	e1a02005 	mov	r2, r5
  13b6cc:	e1a01004 	mov	r1, r4
  13b6d0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b6d4:	e3a00090 	mov	r0, #144	; 0x90
  13b6d8:	ea000351 	b	13c424 <syscall>
  13b6dc:	0014c55c 	.word	0x0014c55c

0013b6e0 <syscall_shmctl>:
  13b6e0:	e92d4070 	push	{r4, r5, r6, lr}
  13b6e4:	e1a06002 	mov	r6, r2
  13b6e8:	e1a04000 	mov	r4, r0
  13b6ec:	e1a05001 	mov	r5, r1
  13b6f0:	e59f001c 	ldr	r0, [pc, #28]	; 13b714 <syscall_shmctl+0x34>
  13b6f4:	e3a0100f 	mov	r1, #15
  13b6f8:	ebfffe48 	bl	13b020 <syscall_debug>
  13b6fc:	e1a03006 	mov	r3, r6
  13b700:	e1a02005 	mov	r2, r5
  13b704:	e1a01004 	mov	r1, r4
  13b708:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b70c:	e3a00f4d 	mov	r0, #308	; 0x134
  13b710:	ea000343 	b	13c424 <syscall>
  13b714:	0014bf4c 	.word	0x0014bf4c

0013b718 <syscall_shmget>:
  13b718:	e92d4070 	push	{r4, r5, r6, lr}
  13b71c:	e1a06002 	mov	r6, r2
  13b720:	e1a04000 	mov	r4, r0
  13b724:	e1a05001 	mov	r5, r1
  13b728:	e59f001c 	ldr	r0, [pc, #28]	; 13b74c <syscall_shmget+0x34>
  13b72c:	e3a0100f 	mov	r1, #15
  13b730:	ebfffe3a 	bl	13b020 <syscall_debug>
  13b734:	e1a03006 	mov	r3, r6
  13b738:	e1a02005 	mov	r2, r5
  13b73c:	e1a01004 	mov	r1, r4
  13b740:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b744:	e59f0004 	ldr	r0, [pc, #4]	; 13b750 <syscall_shmget+0x38>
  13b748:	ea000335 	b	13c424 <syscall>
  13b74c:	0014bf3c 	.word	0x0014bf3c
  13b750:	00000133 	.word	0x00000133

0013b754 <syscall_shmat>:
  13b754:	e92d4070 	push	{r4, r5, r6, lr}
  13b758:	e1a06002 	mov	r6, r2
  13b75c:	e1a04000 	mov	r4, r0
  13b760:	e1a05001 	mov	r5, r1
  13b764:	e59f001c 	ldr	r0, [pc, #28]	; 13b788 <syscall_shmat+0x34>
  13b768:	e3a0100e 	mov	r1, #14
  13b76c:	ebfffe2b 	bl	13b020 <syscall_debug>
  13b770:	e1a03006 	mov	r3, r6
  13b774:	e1a02005 	mov	r2, r5
  13b778:	e1a01004 	mov	r1, r4
  13b77c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b780:	e59f0004 	ldr	r0, [pc, #4]	; 13b78c <syscall_shmat+0x38>
  13b784:	ea000326 	b	13c424 <syscall>
  13b788:	0014bf1c 	.word	0x0014bf1c
  13b78c:	00000131 	.word	0x00000131

0013b790 <syscall_getpeername>:
  13b790:	e92d4070 	push	{r4, r5, r6, lr}
  13b794:	e1a06002 	mov	r6, r2
  13b798:	e1a04000 	mov	r4, r0
  13b79c:	e1a05001 	mov	r5, r1
  13b7a0:	e59f001c 	ldr	r0, [pc, #28]	; 13b7c4 <syscall_getpeername+0x34>
  13b7a4:	e3a01014 	mov	r1, #20
  13b7a8:	ebfffe1c 	bl	13b020 <syscall_debug>
  13b7ac:	e1a03006 	mov	r3, r6
  13b7b0:	e1a02005 	mov	r2, r5
  13b7b4:	e1a01004 	mov	r1, r4
  13b7b8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b7bc:	e3a00048 	mov	r0, #72	; 0x48
  13b7c0:	ea000317 	b	13c424 <syscall>
  13b7c4:	0014bde4 	.word	0x0014bde4

0013b7c8 <syscall_getsockname>:
  13b7c8:	e92d4070 	push	{r4, r5, r6, lr}
  13b7cc:	e1a06002 	mov	r6, r2
  13b7d0:	e1a04000 	mov	r4, r0
  13b7d4:	e1a05001 	mov	r5, r1
  13b7d8:	e59f001c 	ldr	r0, [pc, #28]	; 13b7fc <syscall_getsockname+0x34>
  13b7dc:	e3a01014 	mov	r1, #20
  13b7e0:	ebfffe0e 	bl	13b020 <syscall_debug>
  13b7e4:	e1a03006 	mov	r3, r6
  13b7e8:	e1a02005 	mov	r2, r5
  13b7ec:	e1a01004 	mov	r1, r4
  13b7f0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b7f4:	e3a00049 	mov	r0, #73	; 0x49
  13b7f8:	ea000309 	b	13c424 <syscall>
  13b7fc:	0014bdd0 	.word	0x0014bdd0

0013b800 <syscall_accept>:
  13b800:	e92d4070 	push	{r4, r5, r6, lr}
  13b804:	e1a06002 	mov	r6, r2
  13b808:	e1a04000 	mov	r4, r0
  13b80c:	e1a05001 	mov	r5, r1
  13b810:	e59f001c 	ldr	r0, [pc, #28]	; 13b834 <syscall_accept+0x34>
  13b814:	e3a0100f 	mov	r1, #15
  13b818:	ebfffe00 	bl	13b020 <syscall_debug>
  13b81c:	e1a03006 	mov	r3, r6
  13b820:	e1a02005 	mov	r2, r5
  13b824:	e1a01004 	mov	r1, r4
  13b828:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b82c:	e3a00045 	mov	r0, #69	; 0x45
  13b830:	ea0002fb 	b	13c424 <syscall>
  13b834:	0014bdc0 	.word	0x0014bdc0

0013b838 <syscall_connect>:
  13b838:	e92d4070 	push	{r4, r5, r6, lr}
  13b83c:	e1a06002 	mov	r6, r2
  13b840:	e1a04000 	mov	r4, r0
  13b844:	e1a05001 	mov	r5, r1
  13b848:	e59f001c 	ldr	r0, [pc, #28]	; 13b86c <syscall_connect+0x34>
  13b84c:	e3a01010 	mov	r1, #16
  13b850:	ebfffdf2 	bl	13b020 <syscall_debug>
  13b854:	e1a03006 	mov	r3, r6
  13b858:	e1a02005 	mov	r2, r5
  13b85c:	e1a01004 	mov	r1, r4
  13b860:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b864:	e3a0004c 	mov	r0, #76	; 0x4c
  13b868:	ea0002ed 	b	13c424 <syscall>
  13b86c:	0014bda0 	.word	0x0014bda0

0013b870 <syscall_bind>:
  13b870:	e92d4070 	push	{r4, r5, r6, lr}
  13b874:	e1a06002 	mov	r6, r2
  13b878:	e1a04000 	mov	r4, r0
  13b87c:	e1a05001 	mov	r5, r1
  13b880:	e59f001c 	ldr	r0, [pc, #28]	; 13b8a4 <syscall_bind+0x34>
  13b884:	e3a0100d 	mov	r1, #13
  13b888:	ebfffde4 	bl	13b020 <syscall_debug>
  13b88c:	e1a03006 	mov	r3, r6
  13b890:	e1a02005 	mov	r2, r5
  13b894:	e1a01004 	mov	r1, r4
  13b898:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b89c:	e3a00046 	mov	r0, #70	; 0x46
  13b8a0:	ea0002df 	b	13c424 <syscall>
  13b8a4:	0014bd90 	.word	0x0014bd90

0013b8a8 <syscall_socket>:
  13b8a8:	e92d4070 	push	{r4, r5, r6, lr}
  13b8ac:	e1a06002 	mov	r6, r2
  13b8b0:	e1a04000 	mov	r4, r0
  13b8b4:	e1a05001 	mov	r5, r1
  13b8b8:	e59f001c 	ldr	r0, [pc, #28]	; 13b8dc <syscall_socket+0x34>
  13b8bc:	e3a0100f 	mov	r1, #15
  13b8c0:	ebfffdd6 	bl	13b020 <syscall_debug>
  13b8c4:	e1a03006 	mov	r3, r6
  13b8c8:	e1a02005 	mov	r2, r5
  13b8cc:	e1a01004 	mov	r1, r4
  13b8d0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b8d4:	e3a00052 	mov	r0, #82	; 0x52
  13b8d8:	ea0002d1 	b	13c424 <syscall>
  13b8dc:	0014bd80 	.word	0x0014bd80

0013b8e0 <syscall_sched_setaffinity>:
  13b8e0:	e92d4070 	push	{r4, r5, r6, lr}
  13b8e4:	e1a06002 	mov	r6, r2
  13b8e8:	e1a04000 	mov	r4, r0
  13b8ec:	e1a05001 	mov	r5, r1
  13b8f0:	e59f001c 	ldr	r0, [pc, #28]	; 13b914 <syscall_sched_setaffinity+0x34>
  13b8f4:	e3a0101a 	mov	r1, #26
  13b8f8:	ebfffdc8 	bl	13b020 <syscall_debug>
  13b8fc:	e1a03006 	mov	r3, r6
  13b900:	e1a02005 	mov	r2, r5
  13b904:	e1a01004 	mov	r1, r4
  13b908:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b90c:	e3a0009a 	mov	r0, #154	; 0x9a
  13b910:	ea0002c3 	b	13c424 <syscall>
  13b914:	0014ba24 	.word	0x0014ba24

0013b918 <syscall_fcntl64>:
  13b918:	e92d4070 	push	{r4, r5, r6, lr}
  13b91c:	e1a06002 	mov	r6, r2
  13b920:	e1a04000 	mov	r4, r0
  13b924:	e1a05001 	mov	r5, r1
  13b928:	e59f001c 	ldr	r0, [pc, #28]	; 13b94c <syscall_fcntl64+0x34>
  13b92c:	e3a01010 	mov	r1, #16
  13b930:	ebfffdba 	bl	13b020 <syscall_debug>
  13b934:	e1a03006 	mov	r3, r6
  13b938:	e1a02005 	mov	r2, r5
  13b93c:	e1a01004 	mov	r1, r4
  13b940:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b944:	e3a00007 	mov	r0, #7
  13b948:	ea0002b5 	b	13c424 <syscall>
  13b94c:	0014b8c4 	.word	0x0014b8c4

0013b950 <syscall_madvise>:
  13b950:	e92d4070 	push	{r4, r5, r6, lr}
  13b954:	e1a06002 	mov	r6, r2
  13b958:	e1a04000 	mov	r4, r0
  13b95c:	e1a05001 	mov	r5, r1
  13b960:	e59f001c 	ldr	r0, [pc, #28]	; 13b984 <syscall_madvise+0x34>
  13b964:	e3a01010 	mov	r1, #16
  13b968:	ebfffdac 	bl	13b020 <syscall_debug>
  13b96c:	e1a03006 	mov	r3, r6
  13b970:	e1a02005 	mov	r2, r5
  13b974:	e1a01004 	mov	r1, r4
  13b978:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b97c:	e3a00093 	mov	r0, #147	; 0x93
  13b980:	ea0002a7 	b	13c424 <syscall>
  13b984:	0014b8b4 	.word	0x0014b8b4

0013b988 <syscall_getdents64>:
  13b988:	e92d4070 	push	{r4, r5, r6, lr}
  13b98c:	e1a06002 	mov	r6, r2
  13b990:	e1a04000 	mov	r4, r0
  13b994:	e1a05001 	mov	r5, r1
  13b998:	e59f001c 	ldr	r0, [pc, #28]	; 13b9bc <syscall_getdents64+0x34>
  13b99c:	e3a01013 	mov	r1, #19
  13b9a0:	ebfffd9e 	bl	13b020 <syscall_debug>
  13b9a4:	e1a03006 	mov	r3, r6
  13b9a8:	e1a02005 	mov	r2, r5
  13b9ac:	e1a01004 	mov	r1, r4
  13b9b0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b9b4:	e3a00079 	mov	r0, #121	; 0x79
  13b9b8:	ea000299 	b	13c424 <syscall>
  13b9bc:	0014b87c 	.word	0x0014b87c

0013b9c0 <syscall_poll>:
  13b9c0:	e92d4070 	push	{r4, r5, r6, lr}
  13b9c4:	e1a06002 	mov	r6, r2
  13b9c8:	e1a04000 	mov	r4, r0
  13b9cc:	e1a05001 	mov	r5, r1
  13b9d0:	e59f001c 	ldr	r0, [pc, #28]	; 13b9f4 <syscall_poll+0x34>
  13b9d4:	e3a0100d 	mov	r1, #13
  13b9d8:	ebfffd90 	bl	13b020 <syscall_debug>
  13b9dc:	e1a03006 	mov	r3, r6
  13b9e0:	e1a02005 	mov	r2, r5
  13b9e4:	e1a01004 	mov	r1, r4
  13b9e8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b9ec:	e3a00009 	mov	r0, #9
  13b9f0:	ea00028b 	b	13c424 <syscall>
  13b9f4:	0014b4e8 	.word	0x0014b4e8

0013b9f8 <syscall_sched_getscheduler>:
  13b9f8:	e92d4070 	push	{r4, r5, r6, lr}
  13b9fc:	e1a06002 	mov	r6, r2
  13ba00:	e1a04000 	mov	r4, r0
  13ba04:	e1a05001 	mov	r5, r1
  13ba08:	e59f001c 	ldr	r0, [pc, #28]	; 13ba2c <syscall_sched_getscheduler+0x34>
  13ba0c:	e3a0101b 	mov	r1, #27
  13ba10:	ebfffd82 	bl	13b020 <syscall_debug>
  13ba14:	e1a03006 	mov	r3, r6
  13ba18:	e1a02005 	mov	r2, r5
  13ba1c:	e1a01004 	mov	r1, r4
  13ba20:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba24:	e3a00099 	mov	r0, #153	; 0x99
  13ba28:	ea00027d 	b	13c424 <syscall>
  13ba2c:	0014b40c 	.word	0x0014b40c

0013ba30 <syscall_sched_setscheduler>:
  13ba30:	e92d4070 	push	{r4, r5, r6, lr}
  13ba34:	e1a06002 	mov	r6, r2
  13ba38:	e1a04000 	mov	r4, r0
  13ba3c:	e1a05001 	mov	r5, r1
  13ba40:	e59f001c 	ldr	r0, [pc, #28]	; 13ba64 <syscall_sched_setscheduler+0x34>
  13ba44:	e3a0101b 	mov	r1, #27
  13ba48:	ebfffd74 	bl	13b020 <syscall_debug>
  13ba4c:	e1a03006 	mov	r3, r6
  13ba50:	e1a02005 	mov	r2, r5
  13ba54:	e1a01004 	mov	r1, r4
  13ba58:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba5c:	e3a00098 	mov	r0, #152	; 0x98
  13ba60:	ea00026f 	b	13c424 <syscall>
  13ba64:	0014b3f0 	.word	0x0014b3f0

0013ba68 <syscall_writev>:
  13ba68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13ba6c:	e1a06002 	mov	r6, r2
  13ba70:	e1a08000 	mov	r8, r0
  13ba74:	e1a04001 	mov	r4, r1
  13ba78:	e59f0088 	ldr	r0, [pc, #136]	; 13bb08 <syscall_writev+0xa0>
  13ba7c:	e3a0100f 	mov	r1, #15
  13ba80:	ebfffd66 	bl	13b020 <syscall_debug>
  13ba84:	e3560000 	cmp	r6, #0
  13ba88:	e3a07000 	mov	r7, #0
  13ba8c:	da000013 	ble	13bae0 <syscall_writev+0x78>
  13ba90:	e1a05007 	mov	r5, r7
  13ba94:	ea000003 	b	13baa8 <syscall_writev+0x40>
  13ba98:	e2855001 	add	r5, r5, #1
  13ba9c:	e1560005 	cmp	r6, r5
  13baa0:	e2844008 	add	r4, r4, #8
  13baa4:	0a00000d 	beq	13bae0 <syscall_writev+0x78>
  13baa8:	e5943004 	ldr	r3, [r4, #4]
  13baac:	e3530000 	cmp	r3, #0
  13bab0:	0afffff8 	beq	13ba98 <syscall_writev+0x30>
  13bab4:	e5942000 	ldr	r2, [r4]
  13bab8:	e1a01008 	mov	r1, r8
  13babc:	e3a00003 	mov	r0, #3
  13bac0:	eb000257 	bl	13c424 <syscall>
  13bac4:	e3500000 	cmp	r0, #0
  13bac8:	da000006 	ble	13bae8 <syscall_writev+0x80>
  13bacc:	e2855001 	add	r5, r5, #1
  13bad0:	e1560005 	cmp	r6, r5
  13bad4:	e0877000 	add	r7, r7, r0
  13bad8:	e2844008 	add	r4, r4, #8
  13badc:	1afffff1 	bne	13baa8 <syscall_writev+0x40>
  13bae0:	e1a00007 	mov	r0, r7
  13bae4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bae8:	13a03000 	movne	r3, #0
  13baec:	03a03001 	moveq	r3, #1
  13baf0:	e3570000 	cmp	r7, #0
  13baf4:	13a03001 	movne	r3, #1
  13baf8:	e3530000 	cmp	r3, #0
  13bafc:	01a07000 	moveq	r7, r0
  13bb00:	e1a00007 	mov	r0, r7
  13bb04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bb08:	0014b334 	.word	0x0014b334

0013bb0c <syscall_readv>:
  13bb0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bb10:	e1a06002 	mov	r6, r2
  13bb14:	e1a08000 	mov	r8, r0
  13bb18:	e1a04001 	mov	r4, r1
  13bb1c:	e59f0088 	ldr	r0, [pc, #136]	; 13bbac <syscall_readv+0xa0>
  13bb20:	e3a0100e 	mov	r1, #14
  13bb24:	ebfffd3d 	bl	13b020 <syscall_debug>
  13bb28:	e3560000 	cmp	r6, #0
  13bb2c:	e3a07000 	mov	r7, #0
  13bb30:	da000013 	ble	13bb84 <syscall_readv+0x78>
  13bb34:	e1a05007 	mov	r5, r7
  13bb38:	ea000003 	b	13bb4c <syscall_readv+0x40>
  13bb3c:	e2855001 	add	r5, r5, #1
  13bb40:	e1560005 	cmp	r6, r5
  13bb44:	e2844008 	add	r4, r4, #8
  13bb48:	0a00000d 	beq	13bb84 <syscall_readv+0x78>
  13bb4c:	e5943004 	ldr	r3, [r4, #4]
  13bb50:	e3530000 	cmp	r3, #0
  13bb54:	0afffff8 	beq	13bb3c <syscall_readv+0x30>
  13bb58:	e5942000 	ldr	r2, [r4]
  13bb5c:	e1a01008 	mov	r1, r8
  13bb60:	e3a00002 	mov	r0, #2
  13bb64:	eb00022e 	bl	13c424 <syscall>
  13bb68:	e3500000 	cmp	r0, #0
  13bb6c:	da000006 	ble	13bb8c <syscall_readv+0x80>
  13bb70:	e2855001 	add	r5, r5, #1
  13bb74:	e1560005 	cmp	r6, r5
  13bb78:	e0877000 	add	r7, r7, r0
  13bb7c:	e2844008 	add	r4, r4, #8
  13bb80:	1afffff1 	bne	13bb4c <syscall_readv+0x40>
  13bb84:	e1a00007 	mov	r0, r7
  13bb88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bb8c:	13a03000 	movne	r3, #0
  13bb90:	03a03001 	moveq	r3, #1
  13bb94:	e3570000 	cmp	r7, #0
  13bb98:	13a03001 	movne	r3, #1
  13bb9c:	e3530000 	cmp	r3, #0
  13bba0:	01a07000 	moveq	r7, r0
  13bba4:	e1a00007 	mov	r0, r7
  13bba8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bbac:	0014b324 	.word	0x0014b324

0013bbb0 <syscall_getdents>:
  13bbb0:	e92d4070 	push	{r4, r5, r6, lr}
  13bbb4:	e1a06002 	mov	r6, r2
  13bbb8:	e1a04000 	mov	r4, r0
  13bbbc:	e1a05001 	mov	r5, r1
  13bbc0:	e59f001c 	ldr	r0, [pc, #28]	; 13bbe4 <syscall_getdents+0x34>
  13bbc4:	e3a01011 	mov	r1, #17
  13bbc8:	ebfffd14 	bl	13b020 <syscall_debug>
  13bbcc:	e1a03006 	mov	r3, r6
  13bbd0:	e1a02005 	mov	r2, r5
  13bbd4:	e1a01004 	mov	r1, r4
  13bbd8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bbdc:	e3a00079 	mov	r0, #121	; 0x79
  13bbe0:	ea00020f 	b	13c424 <syscall>
  13bbe4:	0014b2dc 	.word	0x0014b2dc

0013bbe8 <syscall_readlink>:
  13bbe8:	e92d4070 	push	{r4, r5, r6, lr}
  13bbec:	e1a06002 	mov	r6, r2
  13bbf0:	e1a04000 	mov	r4, r0
  13bbf4:	e1a05001 	mov	r5, r1
  13bbf8:	e59f001c 	ldr	r0, [pc, #28]	; 13bc1c <syscall_readlink+0x34>
  13bbfc:	e3a01011 	mov	r1, #17
  13bc00:	ebfffd06 	bl	13b020 <syscall_debug>
  13bc04:	e1a03006 	mov	r3, r6
  13bc08:	e1a02005 	mov	r2, r5
  13bc0c:	e1a01004 	mov	r1, r4
  13bc10:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bc14:	e3a00091 	mov	r0, #145	; 0x91
  13bc18:	ea000201 	b	13c424 <syscall>
  13bc1c:	0014afec 	.word	0x0014afec

0013bc20 <syscall_fcntl>:
  13bc20:	e92d4070 	push	{r4, r5, r6, lr}
  13bc24:	e1a06002 	mov	r6, r2
  13bc28:	e1a04000 	mov	r4, r0
  13bc2c:	e1a05001 	mov	r5, r1
  13bc30:	e59f001c 	ldr	r0, [pc, #28]	; 13bc54 <syscall_fcntl+0x34>
  13bc34:	e3a0100e 	mov	r1, #14
  13bc38:	ebfffcf8 	bl	13b020 <syscall_debug>
  13bc3c:	e1a03006 	mov	r3, r6
  13bc40:	e1a02005 	mov	r2, r5
  13bc44:	e1a01004 	mov	r1, r4
  13bc48:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bc4c:	e3a00007 	mov	r0, #7
  13bc50:	ea0001f3 	b	13c424 <syscall>
  13bc54:	0014ae54 	.word	0x0014ae54

0013bc58 <syscall_execve>:
  13bc58:	e92d4070 	push	{r4, r5, r6, lr}
  13bc5c:	e1a06002 	mov	r6, r2
  13bc60:	e1a04000 	mov	r4, r0
  13bc64:	e1a05001 	mov	r5, r1
  13bc68:	e59f001c 	ldr	r0, [pc, #28]	; 13bc8c <syscall_execve+0x34>
  13bc6c:	e3a0100f 	mov	r1, #15
  13bc70:	ebfffcea 	bl	13b020 <syscall_debug>
  13bc74:	e1a03006 	mov	r3, r6
  13bc78:	e1a02005 	mov	r2, r5
  13bc7c:	e1a01004 	mov	r1, r4
  13bc80:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bc84:	e3a00089 	mov	r0, #137	; 0x89
  13bc88:	ea0001e5 	b	13c424 <syscall>
  13bc8c:	0014ac7c 	.word	0x0014ac7c

0013bc90 <syscall_open>:
  13bc90:	e92d4070 	push	{r4, r5, r6, lr}
  13bc94:	e1a06002 	mov	r6, r2
  13bc98:	e1a04000 	mov	r4, r0
  13bc9c:	e1a05001 	mov	r5, r1
  13bca0:	e59f001c 	ldr	r0, [pc, #28]	; 13bcc4 <syscall_open+0x34>
  13bca4:	e3a0100d 	mov	r1, #13
  13bca8:	ebfffcdc 	bl	13b020 <syscall_debug>
  13bcac:	e1a03006 	mov	r3, r6
  13bcb0:	e1a02005 	mov	r2, r5
  13bcb4:	e1a01004 	mov	r1, r4
  13bcb8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bcbc:	e3a00005 	mov	r0, #5
  13bcc0:	ea0001d7 	b	13c424 <syscall>
  13bcc4:	0014ac2c 	.word	0x0014ac2c

0013bcc8 <syscall_write>:
  13bcc8:	e92d4070 	push	{r4, r5, r6, lr}
  13bccc:	e1a06002 	mov	r6, r2
  13bcd0:	e1a04000 	mov	r4, r0
  13bcd4:	e1a05001 	mov	r5, r1
  13bcd8:	e59f001c 	ldr	r0, [pc, #28]	; 13bcfc <syscall_write+0x34>
  13bcdc:	e3a0100e 	mov	r1, #14
  13bce0:	ebfffcce 	bl	13b020 <syscall_debug>
  13bce4:	e1a03006 	mov	r3, r6
  13bce8:	e1a02005 	mov	r2, r5
  13bcec:	e1a01004 	mov	r1, r4
  13bcf0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bcf4:	e3a00003 	mov	r0, #3
  13bcf8:	ea0001c9 	b	13c424 <syscall>
  13bcfc:	0014ac1c 	.word	0x0014ac1c

0013bd00 <syscall_read>:
  13bd00:	e92d4070 	push	{r4, r5, r6, lr}
  13bd04:	e1a06002 	mov	r6, r2
  13bd08:	e1a04000 	mov	r4, r0
  13bd0c:	e1a05001 	mov	r5, r1
  13bd10:	e59f001c 	ldr	r0, [pc, #28]	; 13bd34 <syscall_read+0x34>
  13bd14:	e3a0100d 	mov	r1, #13
  13bd18:	ebfffcc0 	bl	13b020 <syscall_debug>
  13bd1c:	e1a03006 	mov	r3, r6
  13bd20:	e1a02005 	mov	r2, r5
  13bd24:	e1a01004 	mov	r1, r4
  13bd28:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bd2c:	e3a00002 	mov	r0, #2
  13bd30:	ea0001bb 	b	13c424 <syscall>
  13bd34:	0014ac0c 	.word	0x0014ac0c

0013bd38 <syscall_prlimit64>:
  13bd38:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bd3c:	e1a06002 	mov	r6, r2
  13bd40:	e1a07003 	mov	r7, r3
  13bd44:	e1a04000 	mov	r4, r0
  13bd48:	e1a05001 	mov	r5, r1
  13bd4c:	e24dd00c 	sub	sp, sp, #12
  13bd50:	e3a01012 	mov	r1, #18
  13bd54:	e59f0020 	ldr	r0, [pc, #32]	; 13bd7c <syscall_prlimit64+0x44>
  13bd58:	ebfffcb0 	bl	13b020 <syscall_debug>
  13bd5c:	e58d7000 	str	r7, [sp]
  13bd60:	e1a03006 	mov	r3, r6
  13bd64:	e1a02005 	mov	r2, r5
  13bd68:	e1a01004 	mov	r1, r4
  13bd6c:	e3a0008c 	mov	r0, #140	; 0x8c
  13bd70:	eb0001ab 	bl	13c424 <syscall>
  13bd74:	e28dd00c 	add	sp, sp, #12
  13bd78:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bd7c:	0014c410 	.word	0x0014c410

0013bd80 <syscall_recv>:
  13bd80:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bd84:	e1a06002 	mov	r6, r2
  13bd88:	e1a07003 	mov	r7, r3
  13bd8c:	e1a04000 	mov	r4, r0
  13bd90:	e1a05001 	mov	r5, r1
  13bd94:	e24dd00c 	sub	sp, sp, #12
  13bd98:	e3a0100d 	mov	r1, #13
  13bd9c:	e59f0020 	ldr	r0, [pc, #32]	; 13bdc4 <syscall_recv+0x44>
  13bda0:	ebfffc9e 	bl	13b020 <syscall_debug>
  13bda4:	e58d7000 	str	r7, [sp]
  13bda8:	e1a03006 	mov	r3, r6
  13bdac:	e1a02005 	mov	r2, r5
  13bdb0:	e1a01004 	mov	r1, r4
  13bdb4:	e3a0004e 	mov	r0, #78	; 0x4e
  13bdb8:	eb000199 	bl	13c424 <syscall>
  13bdbc:	e28dd00c 	add	sp, sp, #12
  13bdc0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bdc4:	0014be2c 	.word	0x0014be2c

0013bdc8 <syscall_send>:
  13bdc8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bdcc:	e1a06002 	mov	r6, r2
  13bdd0:	e1a07003 	mov	r7, r3
  13bdd4:	e1a04000 	mov	r4, r0
  13bdd8:	e1a05001 	mov	r5, r1
  13bddc:	e24dd00c 	sub	sp, sp, #12
  13bde0:	e3a0100d 	mov	r1, #13
  13bde4:	e59f0020 	ldr	r0, [pc, #32]	; 13be0c <syscall_send+0x44>
  13bde8:	ebfffc8c 	bl	13b020 <syscall_debug>
  13bdec:	e58d7000 	str	r7, [sp]
  13bdf0:	e1a03006 	mov	r3, r6
  13bdf4:	e1a02005 	mov	r2, r5
  13bdf8:	e1a01004 	mov	r1, r4
  13bdfc:	e3a00050 	mov	r0, #80	; 0x50
  13be00:	eb000187 	bl	13c424 <syscall>
  13be04:	e28dd00c 	add	sp, sp, #12
  13be08:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13be0c:	0014be0c 	.word	0x0014be0c

0013be10 <syscall_rt_sigprocmask>:
  13be10:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13be14:	e1a06002 	mov	r6, r2
  13be18:	e1a07003 	mov	r7, r3
  13be1c:	e1a04000 	mov	r4, r0
  13be20:	e1a05001 	mov	r5, r1
  13be24:	e24dd00c 	sub	sp, sp, #12
  13be28:	e3a01017 	mov	r1, #23
  13be2c:	e59f0020 	ldr	r0, [pc, #32]	; 13be54 <syscall_rt_sigprocmask+0x44>
  13be30:	ebfffc7a 	bl	13b020 <syscall_debug>
  13be34:	e58d7000 	str	r7, [sp]
  13be38:	e1a03006 	mov	r3, r6
  13be3c:	e1a02005 	mov	r2, r5
  13be40:	e1a01004 	mov	r1, r4
  13be44:	e3a00068 	mov	r0, #104	; 0x68
  13be48:	eb000175 	bl	13c424 <syscall>
  13be4c:	e28dd00c 	add	sp, sp, #12
  13be50:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13be54:	0014b574 	.word	0x0014b574

0013be58 <syscall_rt_sigaction>:
  13be58:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13be5c:	e1a06002 	mov	r6, r2
  13be60:	e1a07003 	mov	r7, r3
  13be64:	e1a04000 	mov	r4, r0
  13be68:	e1a05001 	mov	r5, r1
  13be6c:	e24dd00c 	sub	sp, sp, #12
  13be70:	e3a01015 	mov	r1, #21
  13be74:	e59f0020 	ldr	r0, [pc, #32]	; 13be9c <syscall_rt_sigaction+0x44>
  13be78:	ebfffc68 	bl	13b020 <syscall_debug>
  13be7c:	e58d7000 	str	r7, [sp]
  13be80:	e1a03006 	mov	r3, r6
  13be84:	e1a02005 	mov	r2, r5
  13be88:	e1a01004 	mov	r1, r4
  13be8c:	e3a00067 	mov	r0, #103	; 0x67
  13be90:	eb000163 	bl	13c424 <syscall>
  13be94:	e28dd00c 	add	sp, sp, #12
  13be98:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13be9c:	0014b55c 	.word	0x0014b55c

0013bea0 <syscall_sigprocmask>:
  13bea0:	e92d4070 	push	{r4, r5, r6, lr}
  13bea4:	e1a04000 	mov	r4, r0
  13bea8:	e24dd008 	sub	sp, sp, #8
  13beac:	e1a05001 	mov	r5, r1
  13beb0:	e59f002c 	ldr	r0, [pc, #44]	; 13bee4 <syscall_sigprocmask+0x44>
  13beb4:	e3a01014 	mov	r1, #20
  13beb8:	e1a06002 	mov	r6, r2
  13bebc:	ebfffc57 	bl	13b020 <syscall_debug>
  13bec0:	e3a00080 	mov	r0, #128	; 0x80
  13bec4:	e1a03006 	mov	r3, r6
  13bec8:	e58d0000 	str	r0, [sp]
  13becc:	e1a02005 	mov	r2, r5
  13bed0:	e1a01004 	mov	r1, r4
  13bed4:	e3a00068 	mov	r0, #104	; 0x68
  13bed8:	eb000151 	bl	13c424 <syscall>
  13bedc:	e28dd008 	add	sp, sp, #8
  13bee0:	e8bd8070 	pop	{r4, r5, r6, pc}
  13bee4:	0014b1fc 	.word	0x0014b1fc

0013bee8 <syscall_sigaction>:
  13bee8:	e92d4070 	push	{r4, r5, r6, lr}
  13beec:	e1a04000 	mov	r4, r0
  13bef0:	e24dd008 	sub	sp, sp, #8
  13bef4:	e1a05001 	mov	r5, r1
  13bef8:	e59f002c 	ldr	r0, [pc, #44]	; 13bf2c <syscall_sigaction+0x44>
  13befc:	e3a01012 	mov	r1, #18
  13bf00:	e1a06002 	mov	r6, r2
  13bf04:	ebfffc45 	bl	13b020 <syscall_debug>
  13bf08:	e3a00080 	mov	r0, #128	; 0x80
  13bf0c:	e1a03006 	mov	r3, r6
  13bf10:	e58d0000 	str	r0, [sp]
  13bf14:	e1a02005 	mov	r2, r5
  13bf18:	e1a01004 	mov	r1, r4
  13bf1c:	e3a00067 	mov	r0, #103	; 0x67
  13bf20:	eb00013f 	bl	13c424 <syscall>
  13bf24:	e28dd008 	add	sp, sp, #8
  13bf28:	e8bd8070 	pop	{r4, r5, r6, pc}
  13bf2c:	0014aee4 	.word	0x0014aee4

0013bf30 <syscall_getsockopt>:
  13bf30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bf34:	e1a06002 	mov	r6, r2
  13bf38:	e1a08003 	mov	r8, r3
  13bf3c:	e1a04000 	mov	r4, r0
  13bf40:	e1a05001 	mov	r5, r1
  13bf44:	e24dd008 	sub	sp, sp, #8
  13bf48:	e59d7020 	ldr	r7, [sp, #32]
  13bf4c:	e3a01013 	mov	r1, #19
  13bf50:	e59f0024 	ldr	r0, [pc, #36]	; 13bf7c <syscall_getsockopt+0x4c>
  13bf54:	ebfffc31 	bl	13b020 <syscall_debug>
  13bf58:	e58d8000 	str	r8, [sp]
  13bf5c:	e58d7004 	str	r7, [sp, #4]
  13bf60:	e1a03006 	mov	r3, r6
  13bf64:	e1a02005 	mov	r2, r5
  13bf68:	e1a01004 	mov	r1, r4
  13bf6c:	e3a0004a 	mov	r0, #74	; 0x4a
  13bf70:	eb00012b 	bl	13c424 <syscall>
  13bf74:	e28dd008 	add	sp, sp, #8
  13bf78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bf7c:	0014be78 	.word	0x0014be78

0013bf80 <syscall_setsockopt>:
  13bf80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bf84:	e1a06002 	mov	r6, r2
  13bf88:	e1a08003 	mov	r8, r3
  13bf8c:	e1a04000 	mov	r4, r0
  13bf90:	e1a05001 	mov	r5, r1
  13bf94:	e24dd008 	sub	sp, sp, #8
  13bf98:	e59d7020 	ldr	r7, [sp, #32]
  13bf9c:	e3a01013 	mov	r1, #19
  13bfa0:	e59f0024 	ldr	r0, [pc, #36]	; 13bfcc <syscall_setsockopt+0x4c>
  13bfa4:	ebfffc1d 	bl	13b020 <syscall_debug>
  13bfa8:	e58d8000 	str	r8, [sp]
  13bfac:	e58d7004 	str	r7, [sp, #4]
  13bfb0:	e1a03006 	mov	r3, r6
  13bfb4:	e1a02005 	mov	r2, r5
  13bfb8:	e1a01004 	mov	r1, r4
  13bfbc:	e3a0004b 	mov	r0, #75	; 0x4b
  13bfc0:	eb000117 	bl	13c424 <syscall>
  13bfc4:	e28dd008 	add	sp, sp, #8
  13bfc8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bfcc:	0014be64 	.word	0x0014be64

0013bfd0 <syscall_mremap>:
  13bfd0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bfd4:	e1a06002 	mov	r6, r2
  13bfd8:	e1a08003 	mov	r8, r3
  13bfdc:	e1a04000 	mov	r4, r0
  13bfe0:	e1a05001 	mov	r5, r1
  13bfe4:	e24dd008 	sub	sp, sp, #8
  13bfe8:	e59d7020 	ldr	r7, [sp, #32]
  13bfec:	e3a0100f 	mov	r1, #15
  13bff0:	e59f0024 	ldr	r0, [pc, #36]	; 13c01c <syscall_mremap+0x4c>
  13bff4:	ebfffc09 	bl	13b020 <syscall_debug>
  13bff8:	e58d8000 	str	r8, [sp]
  13bffc:	e58d7004 	str	r7, [sp, #4]
  13c000:	e1a03006 	mov	r3, r6
  13c004:	e1a02005 	mov	r2, r5
  13c008:	e1a01004 	mov	r1, r4
  13c00c:	e3a00092 	mov	r0, #146	; 0x92
  13c010:	eb000103 	bl	13c424 <syscall>
  13c014:	e28dd008 	add	sp, sp, #8
  13c018:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c01c:	0014b4b0 	.word	0x0014b4b0

0013c020 <syscall__newselect>:
  13c020:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c024:	e1a06002 	mov	r6, r2
  13c028:	e1a08003 	mov	r8, r3
  13c02c:	e1a04000 	mov	r4, r0
  13c030:	e1a05001 	mov	r5, r1
  13c034:	e24dd008 	sub	sp, sp, #8
  13c038:	e59d7020 	ldr	r7, [sp, #32]
  13c03c:	e3a01013 	mov	r1, #19
  13c040:	e59f0024 	ldr	r0, [pc, #36]	; 13c06c <syscall__newselect+0x4c>
  13c044:	ebfffbf5 	bl	13b020 <syscall_debug>
  13c048:	e58d8000 	str	r8, [sp]
  13c04c:	e58d7004 	str	r7, [sp, #4]
  13c050:	e1a03006 	mov	r3, r6
  13c054:	e1a02005 	mov	r2, r5
  13c058:	e1a01004 	mov	r1, r4
  13c05c:	e3a0005e 	mov	r0, #94	; 0x5e
  13c060:	eb0000ef 	bl	13c424 <syscall>
  13c064:	e28dd008 	add	sp, sp, #8
  13c068:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c06c:	0014b2f0 	.word	0x0014b2f0

0013c070 <syscall__llseek>:
  13c070:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c074:	e1a06002 	mov	r6, r2
  13c078:	e1a05000 	mov	r5, r0
  13c07c:	e1a08001 	mov	r8, r1
  13c080:	e24dd008 	sub	sp, sp, #8
  13c084:	e59d7020 	ldr	r7, [sp, #32]
  13c088:	e3a01010 	mov	r1, #16
  13c08c:	e59f0034 	ldr	r0, [pc, #52]	; 13c0c8 <syscall__llseek+0x58>
  13c090:	e1a04003 	mov	r4, r3
  13c094:	ebfffbe1 	bl	13b020 <syscall_debug>
  13c098:	e1a01005 	mov	r1, r5
  13c09c:	e58d8000 	str	r8, [sp]
  13c0a0:	e58d7004 	str	r7, [sp, #4]
  13c0a4:	e1a03006 	mov	r3, r6
  13c0a8:	e3a02000 	mov	r2, #0
  13c0ac:	e3a00004 	mov	r0, #4
  13c0b0:	eb0000db 	bl	13c424 <syscall>
  13c0b4:	e1a01fc0 	asr	r1, r0, #31
  13c0b8:	e8840003 	stm	r4, {r0, r1}
  13c0bc:	e1a00fc1 	asr	r0, r1, #31
  13c0c0:	e28dd008 	add	sp, sp, #8
  13c0c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c0c8:	0014b2cc 	.word	0x0014b2cc

0013c0cc <syscall_recvfrom>:
  13c0cc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13c0d0:	e1a06002 	mov	r6, r2
  13c0d4:	e1a09003 	mov	r9, r3
  13c0d8:	e1a04000 	mov	r4, r0
  13c0dc:	e1a05001 	mov	r5, r1
  13c0e0:	e24dd014 	sub	sp, sp, #20
  13c0e4:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13c0e8:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13c0ec:	e3a01011 	mov	r1, #17
  13c0f0:	e59f0024 	ldr	r0, [pc, #36]	; 13c11c <syscall_recvfrom+0x50>
  13c0f4:	ebfffbc9 	bl	13b020 <syscall_debug>
  13c0f8:	e58d9000 	str	r9, [sp]
  13c0fc:	e98d0180 	stmib	sp, {r7, r8}
  13c100:	e1a03006 	mov	r3, r6
  13c104:	e1a02005 	mov	r2, r5
  13c108:	e1a01004 	mov	r1, r4
  13c10c:	e3a0004f 	mov	r0, #79	; 0x4f
  13c110:	eb0000c3 	bl	13c424 <syscall>
  13c114:	e28dd014 	add	sp, sp, #20
  13c118:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13c11c:	0014be3c 	.word	0x0014be3c

0013c120 <syscall_sendto>:
  13c120:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13c124:	e1a06002 	mov	r6, r2
  13c128:	e1a09003 	mov	r9, r3
  13c12c:	e1a04000 	mov	r4, r0
  13c130:	e1a05001 	mov	r5, r1
  13c134:	e24dd014 	sub	sp, sp, #20
  13c138:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13c13c:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13c140:	e3a0100f 	mov	r1, #15
  13c144:	e59f0024 	ldr	r0, [pc, #36]	; 13c170 <syscall_sendto+0x50>
  13c148:	ebfffbb4 	bl	13b020 <syscall_debug>
  13c14c:	e58d9000 	str	r9, [sp]
  13c150:	e98d0180 	stmib	sp, {r7, r8}
  13c154:	e1a03006 	mov	r3, r6
  13c158:	e1a02005 	mov	r2, r5
  13c15c:	e1a01004 	mov	r1, r4
  13c160:	e3a00051 	mov	r0, #81	; 0x51
  13c164:	eb0000ae 	bl	13c424 <syscall>
  13c168:	e28dd014 	add	sp, sp, #20
  13c16c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13c170:	0014be1c 	.word	0x0014be1c

0013c174 <syscall_futex>:
  13c174:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13c178:	e1a06002 	mov	r6, r2
  13c17c:	e1a09003 	mov	r9, r3
  13c180:	e1a04000 	mov	r4, r0
  13c184:	e1a05001 	mov	r5, r1
  13c188:	e24dd014 	sub	sp, sp, #20
  13c18c:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13c190:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13c194:	e3a0100e 	mov	r1, #14
  13c198:	e59f0024 	ldr	r0, [pc, #36]	; 13c1c4 <syscall_futex+0x50>
  13c19c:	ebfffb9f 	bl	13b020 <syscall_debug>
  13c1a0:	e58d9000 	str	r9, [sp]
  13c1a4:	e98d0180 	stmib	sp, {r7, r8}
  13c1a8:	e1a03006 	mov	r3, r6
  13c1ac:	e1a02005 	mov	r2, r5
  13c1b0:	e1a01004 	mov	r1, r4
  13c1b4:	e3a00083 	mov	r0, #131	; 0x83
  13c1b8:	eb000099 	bl	13c424 <syscall>
  13c1bc:	e28dd014 	add	sp, sp, #20
  13c1c0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13c1c4:	0014ba14 	.word	0x0014ba14

0013c1c8 <syscall_mmap2>:
  13c1c8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13c1cc:	e1a06002 	mov	r6, r2
  13c1d0:	e1a09003 	mov	r9, r3
  13c1d4:	e1a04000 	mov	r4, r0
  13c1d8:	e1a05001 	mov	r5, r1
  13c1dc:	e59d7020 	ldr	r7, [sp, #32]
  13c1e0:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  13c1e4:	e3a0100e 	mov	r1, #14
  13c1e8:	e59f0024 	ldr	r0, [pc, #36]	; 13c214 <syscall_mmap2+0x4c>
  13c1ec:	ebfffb8b 	bl	13b020 <syscall_debug>
  13c1f0:	e58d9020 	str	r9, [sp, #32]
  13c1f4:	e58d8028 	str	r8, [sp, #40]	; 0x28
  13c1f8:	e58d7024 	str	r7, [sp, #36]	; 0x24
  13c1fc:	e1a03006 	mov	r3, r6
  13c200:	e1a02005 	mov	r2, r5
  13c204:	e1a01004 	mov	r1, r4
  13c208:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13c20c:	e3a00035 	mov	r0, #53	; 0x35
  13c210:	ea000083 	b	13c424 <syscall>
  13c214:	0014b69c 	.word	0x0014b69c

0013c218 <syscall_gettid>:
  13c218:	e92d4010 	push	{r4, lr}
  13c21c:	e59f0010 	ldr	r0, [pc, #16]	; 13c234 <syscall_gettid+0x1c>
  13c220:	e3a0100f 	mov	r1, #15
  13c224:	ebfffb7d 	bl	13b020 <syscall_debug>
  13c228:	e8bd4010 	pop	{r4, lr}
  13c22c:	e3a0008b 	mov	r0, #139	; 0x8b
  13c230:	ea00007b 	b	13c424 <syscall>
  13c234:	0014b8d4 	.word	0x0014b8d4

0013c238 <syscall_vfork>:
  13c238:	e92d4010 	push	{r4, lr}
  13c23c:	e59f0010 	ldr	r0, [pc, #16]	; 13c254 <syscall_vfork+0x1c>
  13c240:	e3a0100e 	mov	r1, #14
  13c244:	ebfffb75 	bl	13b020 <syscall_debug>
  13c248:	e8bd4010 	pop	{r4, lr}
  13c24c:	e3a0008a 	mov	r0, #138	; 0x8a
  13c250:	ea000073 	b	13c424 <syscall>
  13c254:	0014b678 	.word	0x0014b678

0013c258 <syscall_setsid>:
  13c258:	e92d4010 	push	{r4, lr}
  13c25c:	e59f0010 	ldr	r0, [pc, #16]	; 13c274 <syscall_setsid+0x1c>
  13c260:	e3a0100f 	mov	r1, #15
  13c264:	ebfffb6d 	bl	13b020 <syscall_debug>
  13c268:	e8bd4010 	pop	{r4, lr}
  13c26c:	e3a0008f 	mov	r0, #143	; 0x8f
  13c270:	ea00006b 	b	13c424 <syscall>
  13c274:	0014aed4 	.word	0x0014aed4

0013c278 <syscall_getpid>:
  13c278:	e92d4010 	push	{r4, lr}
  13c27c:	e59f0010 	ldr	r0, [pc, #16]	; 13c294 <syscall_getpid+0x1c>
  13c280:	e3a0100f 	mov	r1, #15
  13c284:	ebfffb65 	bl	13b020 <syscall_debug>
  13c288:	e8bd4010 	pop	{r4, lr}
  13c28c:	e3a0000f 	mov	r0, #15
  13c290:	ea000063 	b	13c424 <syscall>
  13c294:	0014acdc 	.word	0x0014acdc

0013c298 <syscall_fork>:
  13c298:	e92d4010 	push	{r4, lr}
  13c29c:	e59f0010 	ldr	r0, [pc, #16]	; 13c2b4 <syscall_fork+0x1c>
  13c2a0:	e3a0100d 	mov	r1, #13
  13c2a4:	ebfffb5d 	bl	13b020 <syscall_debug>
  13c2a8:	e8bd4010 	pop	{r4, lr}
  13c2ac:	e3a00088 	mov	r0, #136	; 0x88
  13c2b0:	ea00005b 	b	13c424 <syscall>
  13c2b4:	0014abfc 	.word	0x0014abfc

0013c2b8 <syscall_ioctl>:
  13c2b8:	e92d4070 	push	{r4, r5, r6, lr}
  13c2bc:	e1a04000 	mov	r4, r0
  13c2c0:	e1a05001 	mov	r5, r1
  13c2c4:	e59f0030 	ldr	r0, [pc, #48]	; 13c2fc <syscall_ioctl+0x44>
  13c2c8:	e3a0100e 	mov	r1, #14
  13c2cc:	e1a06002 	mov	r6, r2
  13c2d0:	ebfffb52 	bl	13b020 <syscall_debug>
  13c2d4:	e3540001 	cmp	r4, #1
  13c2d8:	0a000005 	beq	13c2f4 <syscall_ioctl+0x3c>
  13c2dc:	e1a03006 	mov	r3, r6
  13c2e0:	e1a02005 	mov	r2, r5
  13c2e4:	e1a01004 	mov	r1, r4
  13c2e8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13c2ec:	e3a00007 	mov	r0, #7
  13c2f0:	ea00004b 	b	13c424 <syscall>
  13c2f4:	e3a00000 	mov	r0, #0
  13c2f8:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c2fc:	0014ae44 	.word	0x0014ae44

0013c300 <syscall_lseek>:
  13c300:	e92d4070 	push	{r4, r5, r6, lr}
  13c304:	e1a04001 	mov	r4, r1
  13c308:	e24dd008 	sub	sp, sp, #8
  13c30c:	e1a05000 	mov	r5, r0
  13c310:	e3a0100e 	mov	r1, #14
  13c314:	e59f0058 	ldr	r0, [pc, #88]	; 13c374 <syscall_lseek+0x74>
  13c318:	e1a06002 	mov	r6, r2
  13c31c:	ebfffb3f 	bl	13b020 <syscall_debug>
  13c320:	e3540000 	cmp	r4, #0
  13c324:	ba000008 	blt	13c34c <syscall_lseek+0x4c>
  13c328:	e3a02000 	mov	r2, #0
  13c32c:	e58d6004 	str	r6, [sp, #4]
  13c330:	e1a03004 	mov	r3, r4
  13c334:	e1a01005 	mov	r1, r5
  13c338:	e58d2000 	str	r2, [sp]
  13c33c:	e3a00004 	mov	r0, #4
  13c340:	eb000037 	bl	13c424 <syscall>
  13c344:	e28dd008 	add	sp, sp, #8
  13c348:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c34c:	e3e02000 	mvn	r2, #0
  13c350:	e58d6004 	str	r6, [sp, #4]
  13c354:	e58d2000 	str	r2, [sp]
  13c358:	e1a03004 	mov	r3, r4
  13c35c:	e1a01005 	mov	r1, r5
  13c360:	e3a02000 	mov	r2, #0
  13c364:	e3a00004 	mov	r0, #4
  13c368:	eb00002d 	bl	13c424 <syscall>
  13c36c:	e28dd008 	add	sp, sp, #8
  13c370:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c374:	0014accc 	.word	0x0014accc

0013c378 <get_rtt_syscall>:
  13c378:	e3500e19 	cmp	r0, #400	; 0x190
  13c37c:	3a000005 	bcc	13c398 <get_rtt_syscall+0x20>
  13c380:	e59f201c 	ldr	r2, [pc, #28]	; 13c3a4 <get_rtt_syscall+0x2c>
  13c384:	e59f301c 	ldr	r3, [pc, #28]	; 13c3a8 <get_rtt_syscall+0x30>
  13c388:	e1500002 	cmp	r0, r2
  13c38c:	01a00003 	moveq	r0, r3
  13c390:	13a00000 	movne	r0, #0
  13c394:	e12fff1e 	bx	lr
  13c398:	e59f300c 	ldr	r3, [pc, #12]	; 13c3ac <get_rtt_syscall+0x34>
  13c39c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
  13c3a0:	e12fff1e 	bx	lr
  13c3a4:	000f0005 	.word	0x000f0005
  13c3a8:	00139258 	.word	0x00139258
  13c3ac:	0014c6b4 	.word	0x0014c6b4

0013c3b0 <___syscall>:
  13c3b0:	e92d4070 	push	{r4, r5, r6, lr}
  13c3b4:	e1a0c001 	mov	ip, r1
  13c3b8:	e3500e19 	cmp	r0, #400	; 0x190
  13c3bc:	e1a01002 	mov	r1, r2
  13c3c0:	e1a02003 	mov	r2, r3
  13c3c4:	e28d3010 	add	r3, sp, #16
  13c3c8:	e8930078 	ldm	r3, {r3, r4, r5, r6}
  13c3cc:	2a00000a 	bcs	13c3fc <___syscall+0x4c>
  13c3d0:	e59fe03c 	ldr	lr, [pc, #60]	; 13c414 <___syscall+0x64>
  13c3d4:	e79ee100 	ldr	lr, [lr, r0, lsl #2]
  13c3d8:	e35e0000 	cmp	lr, #0
  13c3dc:	0a00000a 	beq	13c40c <___syscall+0x5c>
  13c3e0:	e58d6018 	str	r6, [sp, #24]
  13c3e4:	e58d5014 	str	r5, [sp, #20]
  13c3e8:	e58d4010 	str	r4, [sp, #16]
  13c3ec:	e1a0000c 	mov	r0, ip
  13c3f0:	e1a0c00e 	mov	ip, lr
  13c3f4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13c3f8:	e12fff1c 	bx	ip
  13c3fc:	e59fe014 	ldr	lr, [pc, #20]	; 13c418 <___syscall+0x68>
  13c400:	e150000e 	cmp	r0, lr
  13c404:	059fe010 	ldreq	lr, [pc, #16]	; 13c41c <___syscall+0x6c>
  13c408:	0afffff4 	beq	13c3e0 <___syscall+0x30>
  13c40c:	e3a00000 	mov	r0, #0
  13c410:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c414:	0014c6b4 	.word	0x0014c6b4
  13c418:	000f0005 	.word	0x000f0005
  13c41c:	00139258 	.word	0x00139258

0013c420 <__syscall>:
  13c420:	eaffffe2 	b	13c3b0 <___syscall>

0013c424 <syscall>:
  13c424:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13c428:	e1a07000 	mov	r7, r0
  13c42c:	e1a00001 	mov	r0, r1
  13c430:	e1a01002 	mov	r1, r2
  13c434:	e1a02003 	mov	r2, r3
  13c438:	e28d6014 	add	r6, sp, #20
  13c43c:	e8960038 	ldm	r6, {r3, r4, r5}
  13c440:	ef000000 	svc	0x00000000
  13c444:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13c448:	e12fff1e 	bx	lr

0013c44c <__syscall_ret>:
  13c44c:	e3700a01 	cmn	r0, #4096	; 0x1000
  13c450:	912fff1e 	bxls	lr
  13c454:	e92d4010 	push	{r4, lr}
  13c458:	e1a04000 	mov	r4, r0
  13c45c:	ebfff28f 	bl	138ea0 <__errno_location>
  13c460:	e2644000 	rsb	r4, r4, #0
  13c464:	e5804000 	str	r4, [r0]
  13c468:	e3e00000 	mvn	r0, #0
  13c46c:	e8bd8010 	pop	{r4, pc}

0013c470 <__lctrans_impl>:
  13c470:	e12fff1e 	bx	lr

0013c474 <__lctrans>:
  13c474:	eafffffd 	b	13c470 <__lctrans_impl>

0013c478 <__lctrans_cur>:
  13c478:	e1a02000 	mov	r2, r0
  13c47c:	e59f301c 	ldr	r3, [pc, #28]	; 13c4a0 <__lctrans_cur+0x28>
  13c480:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13c484:	e5930000 	ldr	r0, [r3]
  13c488:	e12fff30 	blx	r0
  13c48c:	e5103018 	ldr	r3, [r0, #-24]	; 0xffffffe8
  13c490:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13c494:	e1a00002 	mov	r0, r2
  13c498:	e5931014 	ldr	r1, [r3, #20]
  13c49c:	eafffff3 	b	13c470 <__lctrans_impl>
  13c4a0:	0014d3dc 	.word	0x0014d3dc

0013c4a4 <__simple_malloc>:
  13c4a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c4a8:	e2505000 	subs	r5, r0, #0
  13c4ac:	e24dd008 	sub	sp, sp, #8
  13c4b0:	0a000016 	beq	13c510 <__simple_malloc+0x6c>
  13c4b4:	e3550001 	cmp	r5, #1
  13c4b8:	9a000037 	bls	13c59c <__simple_malloc+0xf8>
  13c4bc:	e3a03001 	mov	r3, #1
  13c4c0:	e1a03083 	lsl	r3, r3, #1
  13c4c4:	e1550003 	cmp	r5, r3
  13c4c8:	83a02001 	movhi	r2, #1
  13c4cc:	93a02000 	movls	r2, #0
  13c4d0:	e353000f 	cmp	r3, #15
  13c4d4:	83a02000 	movhi	r2, #0
  13c4d8:	e3520000 	cmp	r2, #0
  13c4dc:	1afffff7 	bne	13c4c0 <__simple_malloc+0x1c>
  13c4e0:	e2434001 	sub	r4, r3, #1
  13c4e4:	e59f60c8 	ldr	r6, [pc, #200]	; 13c5b4 <__simple_malloc+0x110>
  13c4e8:	e59f00c8 	ldr	r0, [pc, #200]	; 13c5b8 <__simple_malloc+0x114>
  13c4ec:	eb001587 	bl	141b10 <__lock>
  13c4f0:	e5962000 	ldr	r2, [r6]
  13c4f4:	e355013e 	cmp	r5, #-2147483633	; 0x8000000f
  13c4f8:	e2623000 	rsb	r3, r2, #0
  13c4fc:	e0044003 	and	r4, r4, r3
  13c500:	8a000009 	bhi	13c52c <__simple_malloc+0x88>
  13c504:	e0853004 	add	r3, r5, r4
  13c508:	e1a05004 	mov	r5, r4
  13c50c:	ea000004 	b	13c524 <__simple_malloc+0x80>
  13c510:	e59f00a0 	ldr	r0, [pc, #160]	; 13c5b8 <__simple_malloc+0x114>
  13c514:	eb00157d 	bl	141b10 <__lock>
  13c518:	e3a03001 	mov	r3, #1
  13c51c:	e59f6090 	ldr	r6, [pc, #144]	; 13c5b4 <__simple_malloc+0x110>
  13c520:	e5962000 	ldr	r2, [r6]
  13c524:	e1a04005 	mov	r4, r5
  13c528:	e1a05003 	mov	r5, r3
  13c52c:	e59f8088 	ldr	r8, [pc, #136]	; 13c5bc <__simple_malloc+0x118>
  13c530:	e5981000 	ldr	r1, [r8]
  13c534:	e0411002 	sub	r1, r1, r2
  13c538:	e1510005 	cmp	r1, r5
  13c53c:	20827004 	addcs	r7, r2, r4
  13c540:	2a00000e 	bcs	13c580 <__simple_malloc+0xdc>
  13c544:	e28d0008 	add	r0, sp, #8
  13c548:	e5205004 	str	r5, [r0, #-4]!
  13c54c:	eb001b2e 	bl	14320c <__expand_heap>
  13c550:	e2503000 	subs	r3, r0, #0
  13c554:	0a000012 	beq	13c5a4 <__simple_malloc+0x100>
  13c558:	e5982000 	ldr	r2, [r8]
  13c55c:	e59d1004 	ldr	r1, [sp, #4]
  13c560:	e1520003 	cmp	r2, r3
  13c564:	05962000 	ldreq	r2, [r6]
  13c568:	11a07003 	movne	r7, r3
  13c56c:	11a02003 	movne	r2, r3
  13c570:	e0833001 	add	r3, r3, r1
  13c574:	00827004 	addeq	r7, r2, r4
  13c578:	10455004 	subne	r5, r5, r4
  13c57c:	e5883000 	str	r3, [r8]
  13c580:	e0825005 	add	r5, r2, r5
  13c584:	e59f002c 	ldr	r0, [pc, #44]	; 13c5b8 <__simple_malloc+0x114>
  13c588:	e5865000 	str	r5, [r6]
  13c58c:	eb0015b7 	bl	141c70 <__unlock>
  13c590:	e1a00007 	mov	r0, r7
  13c594:	e28dd008 	add	sp, sp, #8
  13c598:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c59c:	e3a04000 	mov	r4, #0
  13c5a0:	eaffffcf 	b	13c4e4 <__simple_malloc+0x40>
  13c5a4:	e59f000c 	ldr	r0, [pc, #12]	; 13c5b8 <__simple_malloc+0x114>
  13c5a8:	e1a07003 	mov	r7, r3
  13c5ac:	eb0015af 	bl	141c70 <__unlock>
  13c5b0:	eafffff6 	b	13c590 <__simple_malloc+0xec>
  13c5b4:	0014ec3c 	.word	0x0014ec3c
  13c5b8:	0014ec44 	.word	0x0014ec44
  13c5bc:	0014ec40 	.word	0x0014ec40

0013c5c0 <__simple_calloc>:
  13c5c0:	e3510000 	cmp	r1, #0
  13c5c4:	e1a0c000 	mov	ip, r0
  13c5c8:	0a000002 	beq	13c5d8 <__simple_calloc+0x18>
  13c5cc:	e0832190 	umull	r2, r3, r0, r1
  13c5d0:	e3530000 	cmp	r3, #0
  13c5d4:	1a000001 	bne	13c5e0 <__simple_calloc+0x20>
  13c5d8:	e0000c91 	mul	r0, r1, ip
  13c5dc:	eaffffb0 	b	13c4a4 <__simple_malloc>
  13c5e0:	e92d4010 	push	{r4, lr}
  13c5e4:	ebfff22d 	bl	138ea0 <__errno_location>
  13c5e8:	e3a0300c 	mov	r3, #12
  13c5ec:	e5803000 	str	r3, [r0]
  13c5f0:	e3a00000 	mov	r0, #0
  13c5f4:	e8bd8010 	pop	{r4, pc}

0013c5f8 <adjust_size>:
  13c5f8:	e5903000 	ldr	r3, [r0]
  13c5fc:	e59f2058 	ldr	r2, [pc, #88]	; 13c65c <adjust_size+0x64>
  13c600:	e2431001 	sub	r1, r3, #1
  13c604:	e1510002 	cmp	r1, r2
  13c608:	9a000006 	bls	13c628 <adjust_size+0x30>
  13c60c:	e3530000 	cmp	r3, #0
  13c610:	03a01010 	moveq	r1, #16
  13c614:	01a02003 	moveq	r2, r3
  13c618:	05801000 	streq	r1, [r0]
  13c61c:	1a000007 	bne	13c640 <adjust_size+0x48>
  13c620:	e1a00002 	mov	r0, r2
  13c624:	e12fff1e 	bx	lr
  13c628:	e3a02000 	mov	r2, #0
  13c62c:	e2833017 	add	r3, r3, #23
  13c630:	e3c3300f 	bic	r3, r3, #15
  13c634:	e5803000 	str	r3, [r0]
  13c638:	e1a00002 	mov	r0, r2
  13c63c:	e12fff1e 	bx	lr
  13c640:	e92d4010 	push	{r4, lr}
  13c644:	ebfff215 	bl	138ea0 <__errno_location>
  13c648:	e3a0300c 	mov	r3, #12
  13c64c:	e3e02000 	mvn	r2, #0
  13c650:	e5803000 	str	r3, [r0]
  13c654:	e1a00002 	mov	r0, r2
  13c658:	e8bd8010 	pop	{r4, pc}
  13c65c:	7fffefef 	.word	0x7fffefef

0013c660 <unbin>:
  13c660:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c664:	e590200c 	ldr	r2, [r0, #12]
  13c668:	e1a07000 	mov	r7, r0
  13c66c:	e5900008 	ldr	r0, [r0, #8]
  13c670:	e24dd00c 	sub	sp, sp, #12
  13c674:	e1520000 	cmp	r2, r0
  13c678:	0a00000b 	beq	13c6ac <unbin+0x4c>
  13c67c:	e5973004 	ldr	r3, [r7, #4]
  13c680:	e5820008 	str	r0, [r2, #8]
  13c684:	e3c30001 	bic	r0, r3, #1
  13c688:	e7971000 	ldr	r1, [r7, r0]
  13c68c:	e597c008 	ldr	ip, [r7, #8]
  13c690:	e3833001 	orr	r3, r3, #1
  13c694:	e3811001 	orr	r1, r1, #1
  13c698:	e58c200c 	str	r2, [ip, #12]
  13c69c:	e5873004 	str	r3, [r7, #4]
  13c6a0:	e7871000 	str	r1, [r7, r0]
  13c6a4:	e28dd00c 	add	sp, sp, #12
  13c6a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c6ac:	e3a00001 	mov	r0, #1
  13c6b0:	e241c020 	sub	ip, r1, #32
  13c6b4:	e1a0a110 	lsl	sl, r0, r1
  13c6b8:	e1a0bc10 	lsl	fp, r0, ip
  13c6bc:	e261c020 	rsb	ip, r1, #32
  13c6c0:	e1e0100a 	mvn	r1, sl
  13c6c4:	e18bbc30 	orr	fp, fp, r0, lsr ip
  13c6c8:	e3710001 	cmn	r1, #1
  13c6cc:	e1e0200b 	mvn	r2, fp
  13c6d0:	0a000014 	beq	13c728 <unbin+0xc8>
  13c6d4:	e59f40a4 	ldr	r4, [pc, #164]	; 13c780 <unbin+0x120>
  13c6d8:	e1a0b007 	mov	fp, r7
  13c6dc:	e1a09004 	mov	r9, r4
  13c6e0:	e1a07001 	mov	r7, r1
  13c6e4:	e88d0006 	stm	sp, {r1, r2}
  13c6e8:	e59f6094 	ldr	r6, [pc, #148]	; 13c784 <unbin+0x124>
  13c6ec:	e5945000 	ldr	r5, [r4]
  13c6f0:	e0078005 	and	r8, r7, r5
  13c6f4:	ea000002 	b	13c704 <unbin+0xa4>
  13c6f8:	e5943000 	ldr	r3, [r4]
  13c6fc:	e1550003 	cmp	r5, r3
  13c700:	1afffff9 	bne	13c6ec <unbin+0x8c>
  13c704:	e1a00005 	mov	r0, r5
  13c708:	e1a01008 	mov	r1, r8
  13c70c:	e1a02009 	mov	r2, r9
  13c710:	e5963000 	ldr	r3, [r6]
  13c714:	e12fff33 	blx	r3
  13c718:	e3500000 	cmp	r0, #0
  13c71c:	1afffff5 	bne	13c6f8 <unbin+0x98>
  13c720:	e1a0700b 	mov	r7, fp
  13c724:	e89d0006 	ldm	sp, {r1, r2}
  13c728:	e3720001 	cmn	r2, #1
  13c72c:	0a000010 	beq	13c774 <unbin+0x114>
  13c730:	e1a0a002 	mov	sl, r2
  13c734:	e59f4044 	ldr	r4, [pc, #68]	; 13c780 <unbin+0x120>
  13c738:	e59f6044 	ldr	r6, [pc, #68]	; 13c784 <unbin+0x124>
  13c73c:	e2849004 	add	r9, r4, #4
  13c740:	e5945004 	ldr	r5, [r4, #4]
  13c744:	e00a8005 	and	r8, sl, r5
  13c748:	ea000002 	b	13c758 <unbin+0xf8>
  13c74c:	e5943004 	ldr	r3, [r4, #4]
  13c750:	e1550003 	cmp	r5, r3
  13c754:	1afffff9 	bne	13c740 <unbin+0xe0>
  13c758:	e1a00005 	mov	r0, r5
  13c75c:	e1a01008 	mov	r1, r8
  13c760:	e1a02009 	mov	r2, r9
  13c764:	e5963000 	ldr	r3, [r6]
  13c768:	e12fff33 	blx	r3
  13c76c:	e3500000 	cmp	r0, #0
  13c770:	1afffff5 	bne	13c74c <unbin+0xec>
  13c774:	e597200c 	ldr	r2, [r7, #12]
  13c778:	e5970008 	ldr	r0, [r7, #8]
  13c77c:	eaffffbe 	b	13c67c <unbin+0x1c>
  13c780:	0014ec58 	.word	0x0014ec58
  13c784:	0014d3d8 	.word	0x0014d3d8

0013c788 <alloc_fwd>:
  13c788:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c78c:	e59f925c 	ldr	r9, [pc, #604]	; 13c9f0 <alloc_fwd+0x268>
  13c790:	e24dd00c 	sub	sp, sp, #12
  13c794:	e58d0004 	str	r0, [sp, #4]
  13c798:	e59f6254 	ldr	r6, [pc, #596]	; 13c9f4 <alloc_fwd+0x26c>
  13c79c:	e59d3004 	ldr	r3, [sp, #4]
  13c7a0:	e5938004 	ldr	r8, [r3, #4]
  13c7a4:	e3180001 	tst	r8, #1
  13c7a8:	1a000055 	bne	13c904 <alloc_fwd+0x17c>
  13c7ac:	e1a07228 	lsr	r7, r8, #4
  13c7b0:	e2477001 	sub	r7, r7, #1
  13c7b4:	e3570020 	cmp	r7, #32
  13c7b8:	9a000005 	bls	13c7d4 <alloc_fwd+0x4c>
  13c7bc:	e59f3234 	ldr	r3, [pc, #564]	; 13c9f8 <alloc_fwd+0x270>
  13c7c0:	e1570003 	cmp	r7, r3
  13c7c4:	8a000058 	bhi	13c92c <alloc_fwd+0x1a4>
  13c7c8:	e59f322c 	ldr	r3, [pc, #556]	; 13c9fc <alloc_fwd+0x274>
  13c7cc:	e08371a7 	add	r7, r3, r7, lsr #3
  13c7d0:	e5577004 	ldrb	r7, [r7, #-4]
  13c7d4:	e1a0b007 	mov	fp, r7
  13c7d8:	e1a04207 	lsl	r4, r7, #4
  13c7dc:	e2844008 	add	r4, r4, #8
  13c7e0:	e59f3218 	ldr	r3, [pc, #536]	; 13ca00 <alloc_fwd+0x278>
  13c7e4:	e0894004 	add	r4, r9, r4
  13c7e8:	e593300c 	ldr	r3, [r3, #12]
  13c7ec:	e3530000 	cmp	r3, #0
  13c7f0:	1284a004 	addne	sl, r4, #4
  13c7f4:	1a000032 	bne	13c8c4 <alloc_fwd+0x13c>
  13c7f8:	e28b3001 	add	r3, fp, #1
  13c7fc:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13c800:	e3520000 	cmp	r2, #0
  13c804:	1a000053 	bne	13c958 <alloc_fwd+0x1d0>
  13c808:	e1a02008 	mov	r2, r8
  13c80c:	e0891207 	add	r1, r9, r7, lsl #4
  13c810:	e2811008 	add	r1, r1, #8
  13c814:	e0890203 	add	r0, r9, r3, lsl #4
  13c818:	e7891203 	str	r1, [r9, r3, lsl #4]
  13c81c:	e5801004 	str	r1, [r0, #4]
  13c820:	e1580002 	cmp	r8, r2
  13c824:	0a00004b 	beq	13c958 <alloc_fwd+0x1d0>
  13c828:	e5943000 	ldr	r3, [r4]
  13c82c:	e3530000 	cmp	r3, #0
  13c830:	0a000030 	beq	13c8f8 <alloc_fwd+0x170>
  13c834:	e59f31c8 	ldr	r3, [pc, #456]	; 13ca04 <alloc_fwd+0x27c>
  13c838:	e593c000 	ldr	ip, [r3]
  13c83c:	e12fff3c 	blx	ip
  13c840:	e3a02000 	mov	r2, #0
  13c844:	e593c000 	ldr	ip, [r3]
  13c848:	e5842000 	str	r2, [r4]
  13c84c:	e12fff3c 	blx	ip
  13c850:	e5943004 	ldr	r3, [r4, #4]
  13c854:	e1530002 	cmp	r3, r2
  13c858:	0affffcf 	beq	13c79c <alloc_fwd+0x14>
  13c85c:	e3a000f0 	mov	r0, #240	; 0xf0
  13c860:	ebfffec4 	bl	13c378 <get_rtt_syscall>
  13c864:	e2503000 	subs	r3, r0, #0
  13c868:	0affffca 	beq	13c798 <alloc_fwd+0x10>
  13c86c:	e3a02001 	mov	r2, #1
  13c870:	e3a01081 	mov	r1, #129	; 0x81
  13c874:	e1a00004 	mov	r0, r4
  13c878:	e12fff33 	blx	r3
  13c87c:	e3700026 	cmn	r0, #38	; 0x26
  13c880:	1affffc4 	bne	13c798 <alloc_fwd+0x10>
  13c884:	e3a000f0 	mov	r0, #240	; 0xf0
  13c888:	ebfffeba 	bl	13c378 <get_rtt_syscall>
  13c88c:	e2503000 	subs	r3, r0, #0
  13c890:	0affffc0 	beq	13c798 <alloc_fwd+0x10>
  13c894:	e3a02001 	mov	r2, #1
  13c898:	e1a00004 	mov	r0, r4
  13c89c:	e1a01002 	mov	r1, r2
  13c8a0:	e12fff33 	blx	r3
  13c8a4:	eaffffbb 	b	13c798 <alloc_fwd+0x10>
  13c8a8:	e3550000 	cmp	r5, #0
  13c8ac:	0a000017 	beq	13c910 <alloc_fwd+0x188>
  13c8b0:	e1a03001 	mov	r3, r1
  13c8b4:	e1a02001 	mov	r2, r1
  13c8b8:	e1a00004 	mov	r0, r4
  13c8bc:	e1a0100a 	mov	r1, sl
  13c8c0:	eb001515 	bl	141d1c <__wait>
  13c8c4:	e5945000 	ldr	r5, [r4]
  13c8c8:	ea000002 	b	13c8d8 <alloc_fwd+0x150>
  13c8cc:	e5943000 	ldr	r3, [r4]
  13c8d0:	e1550003 	cmp	r5, r3
  13c8d4:	1afffffa 	bne	13c8c4 <alloc_fwd+0x13c>
  13c8d8:	e1a00005 	mov	r0, r5
  13c8dc:	e3a01001 	mov	r1, #1
  13c8e0:	e1a02004 	mov	r2, r4
  13c8e4:	e5963000 	ldr	r3, [r6]
  13c8e8:	e12fff33 	blx	r3
  13c8ec:	e3500000 	cmp	r0, #0
  13c8f0:	1afffff5 	bne	13c8cc <alloc_fwd+0x144>
  13c8f4:	eaffffeb 	b	13c8a8 <alloc_fwd+0x120>
  13c8f8:	e1a08002 	mov	r8, r2
  13c8fc:	e3180001 	tst	r8, #1
  13c900:	0affffa9 	beq	13c7ac <alloc_fwd+0x24>
  13c904:	e3a00000 	mov	r0, #0
  13c908:	e28dd00c 	add	sp, sp, #12
  13c90c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c910:	e28b3001 	add	r3, fp, #1
  13c914:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13c918:	e59d2004 	ldr	r2, [sp, #4]
  13c91c:	e3510000 	cmp	r1, #0
  13c920:	e5922004 	ldr	r2, [r2, #4]
  13c924:	1affffbd 	bne	13c820 <alloc_fwd+0x98>
  13c928:	eaffffb7 	b	13c80c <alloc_fwd+0x84>
  13c92c:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13c930:	83a0703f 	movhi	r7, #63	; 0x3f
  13c934:	959f30c0 	ldrls	r3, [pc, #192]	; 13c9fc <alloc_fwd+0x274>
  13c938:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13c93c:	908373a7 	addls	r7, r3, r7, lsr #7
  13c940:	95577004 	ldrbls	r7, [r7, #-4]
  13c944:	92877010 	addls	r7, r7, #16
  13c948:	91a04207 	lslls	r4, r7, #4
  13c94c:	92844008 	addls	r4, r4, #8
  13c950:	e1a0b007 	mov	fp, r7
  13c954:	eaffffa1 	b	13c7e0 <alloc_fwd+0x58>
  13c958:	e1a0100b 	mov	r1, fp
  13c95c:	e59d0004 	ldr	r0, [sp, #4]
  13c960:	ebffff3e 	bl	13c660 <unbin>
  13c964:	e5943000 	ldr	r3, [r4]
  13c968:	e3530000 	cmp	r3, #0
  13c96c:	0a000009 	beq	13c998 <alloc_fwd+0x210>
  13c970:	e59f308c 	ldr	r3, [pc, #140]	; 13ca04 <alloc_fwd+0x27c>
  13c974:	e593c000 	ldr	ip, [r3]
  13c978:	e12fff3c 	blx	ip
  13c97c:	e3a02000 	mov	r2, #0
  13c980:	e593c000 	ldr	ip, [r3]
  13c984:	e5842000 	str	r2, [r4]
  13c988:	e12fff3c 	blx	ip
  13c98c:	e5943004 	ldr	r3, [r4, #4]
  13c990:	e1530002 	cmp	r3, r2
  13c994:	1a000002 	bne	13c9a4 <alloc_fwd+0x21c>
  13c998:	e3a00001 	mov	r0, #1
  13c99c:	e28dd00c 	add	sp, sp, #12
  13c9a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c9a4:	e3a000f0 	mov	r0, #240	; 0xf0
  13c9a8:	ebfffe72 	bl	13c378 <get_rtt_syscall>
  13c9ac:	e2503000 	subs	r3, r0, #0
  13c9b0:	0afffff8 	beq	13c998 <alloc_fwd+0x210>
  13c9b4:	e3a02001 	mov	r2, #1
  13c9b8:	e3a01081 	mov	r1, #129	; 0x81
  13c9bc:	e1a00004 	mov	r0, r4
  13c9c0:	e12fff33 	blx	r3
  13c9c4:	e3700026 	cmn	r0, #38	; 0x26
  13c9c8:	1afffff2 	bne	13c998 <alloc_fwd+0x210>
  13c9cc:	e3a000f0 	mov	r0, #240	; 0xf0
  13c9d0:	ebfffe68 	bl	13c378 <get_rtt_syscall>
  13c9d4:	e2503000 	subs	r3, r0, #0
  13c9d8:	0affffee 	beq	13c998 <alloc_fwd+0x210>
  13c9dc:	e3a02001 	mov	r2, #1
  13c9e0:	e1a00004 	mov	r0, r4
  13c9e4:	e1a01002 	mov	r1, r2
  13c9e8:	e12fff33 	blx	r3
  13c9ec:	eaffffe9 	b	13c998 <alloc_fwd+0x210>
  13c9f0:	0014ec58 	.word	0x0014ec58
  13c9f4:	0014d3d8 	.word	0x0014d3d8
  13c9f8:	000001ff 	.word	0x000001ff
  13c9fc:	0014cd14 	.word	0x0014cd14
  13ca00:	0015d08c 	.word	0x0015d08c
  13ca04:	0014d3d4 	.word	0x0014d3d4

0013ca08 <alloc_rev>:
  13ca08:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13ca0c:	e59f9264 	ldr	r9, [pc, #612]	; 13cc78 <alloc_rev+0x270>
  13ca10:	e24dd00c 	sub	sp, sp, #12
  13ca14:	e58d0004 	str	r0, [sp, #4]
  13ca18:	e59f625c 	ldr	r6, [pc, #604]	; 13cc7c <alloc_rev+0x274>
  13ca1c:	e59d3004 	ldr	r3, [sp, #4]
  13ca20:	e5938000 	ldr	r8, [r3]
  13ca24:	e3180001 	tst	r8, #1
  13ca28:	1a000055 	bne	13cb84 <alloc_rev+0x17c>
  13ca2c:	e1a07228 	lsr	r7, r8, #4
  13ca30:	e2477001 	sub	r7, r7, #1
  13ca34:	e3570020 	cmp	r7, #32
  13ca38:	9a000005 	bls	13ca54 <alloc_rev+0x4c>
  13ca3c:	e59f323c 	ldr	r3, [pc, #572]	; 13cc80 <alloc_rev+0x278>
  13ca40:	e1570003 	cmp	r7, r3
  13ca44:	8a000058 	bhi	13cbac <alloc_rev+0x1a4>
  13ca48:	e59f3234 	ldr	r3, [pc, #564]	; 13cc84 <alloc_rev+0x27c>
  13ca4c:	e08371a7 	add	r7, r3, r7, lsr #3
  13ca50:	e5577004 	ldrb	r7, [r7, #-4]
  13ca54:	e1a0b007 	mov	fp, r7
  13ca58:	e1a04207 	lsl	r4, r7, #4
  13ca5c:	e2844008 	add	r4, r4, #8
  13ca60:	e59f3220 	ldr	r3, [pc, #544]	; 13cc88 <alloc_rev+0x280>
  13ca64:	e0894004 	add	r4, r9, r4
  13ca68:	e593300c 	ldr	r3, [r3, #12]
  13ca6c:	e3530000 	cmp	r3, #0
  13ca70:	1284a004 	addne	sl, r4, #4
  13ca74:	1a000032 	bne	13cb44 <alloc_rev+0x13c>
  13ca78:	e28b3001 	add	r3, fp, #1
  13ca7c:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13ca80:	e3520000 	cmp	r2, #0
  13ca84:	1a000053 	bne	13cbd8 <alloc_rev+0x1d0>
  13ca88:	e1a02008 	mov	r2, r8
  13ca8c:	e0891207 	add	r1, r9, r7, lsl #4
  13ca90:	e2811008 	add	r1, r1, #8
  13ca94:	e0890203 	add	r0, r9, r3, lsl #4
  13ca98:	e7891203 	str	r1, [r9, r3, lsl #4]
  13ca9c:	e5801004 	str	r1, [r0, #4]
  13caa0:	e1580002 	cmp	r8, r2
  13caa4:	0a00004b 	beq	13cbd8 <alloc_rev+0x1d0>
  13caa8:	e5943000 	ldr	r3, [r4]
  13caac:	e3530000 	cmp	r3, #0
  13cab0:	0a000030 	beq	13cb78 <alloc_rev+0x170>
  13cab4:	e59f31d0 	ldr	r3, [pc, #464]	; 13cc8c <alloc_rev+0x284>
  13cab8:	e593c000 	ldr	ip, [r3]
  13cabc:	e12fff3c 	blx	ip
  13cac0:	e3a02000 	mov	r2, #0
  13cac4:	e593c000 	ldr	ip, [r3]
  13cac8:	e5842000 	str	r2, [r4]
  13cacc:	e12fff3c 	blx	ip
  13cad0:	e5943004 	ldr	r3, [r4, #4]
  13cad4:	e1530002 	cmp	r3, r2
  13cad8:	0affffcf 	beq	13ca1c <alloc_rev+0x14>
  13cadc:	e3a000f0 	mov	r0, #240	; 0xf0
  13cae0:	ebfffe24 	bl	13c378 <get_rtt_syscall>
  13cae4:	e2503000 	subs	r3, r0, #0
  13cae8:	0affffca 	beq	13ca18 <alloc_rev+0x10>
  13caec:	e3a02001 	mov	r2, #1
  13caf0:	e3a01081 	mov	r1, #129	; 0x81
  13caf4:	e1a00004 	mov	r0, r4
  13caf8:	e12fff33 	blx	r3
  13cafc:	e3700026 	cmn	r0, #38	; 0x26
  13cb00:	1affffc4 	bne	13ca18 <alloc_rev+0x10>
  13cb04:	e3a000f0 	mov	r0, #240	; 0xf0
  13cb08:	ebfffe1a 	bl	13c378 <get_rtt_syscall>
  13cb0c:	e2503000 	subs	r3, r0, #0
  13cb10:	0affffc0 	beq	13ca18 <alloc_rev+0x10>
  13cb14:	e3a02001 	mov	r2, #1
  13cb18:	e1a00004 	mov	r0, r4
  13cb1c:	e1a01002 	mov	r1, r2
  13cb20:	e12fff33 	blx	r3
  13cb24:	eaffffbb 	b	13ca18 <alloc_rev+0x10>
  13cb28:	e3550000 	cmp	r5, #0
  13cb2c:	0a000017 	beq	13cb90 <alloc_rev+0x188>
  13cb30:	e1a03001 	mov	r3, r1
  13cb34:	e1a02001 	mov	r2, r1
  13cb38:	e1a00004 	mov	r0, r4
  13cb3c:	e1a0100a 	mov	r1, sl
  13cb40:	eb001475 	bl	141d1c <__wait>
  13cb44:	e5945000 	ldr	r5, [r4]
  13cb48:	ea000002 	b	13cb58 <alloc_rev+0x150>
  13cb4c:	e5943000 	ldr	r3, [r4]
  13cb50:	e1550003 	cmp	r5, r3
  13cb54:	1afffffa 	bne	13cb44 <alloc_rev+0x13c>
  13cb58:	e1a00005 	mov	r0, r5
  13cb5c:	e3a01001 	mov	r1, #1
  13cb60:	e1a02004 	mov	r2, r4
  13cb64:	e5963000 	ldr	r3, [r6]
  13cb68:	e12fff33 	blx	r3
  13cb6c:	e3500000 	cmp	r0, #0
  13cb70:	1afffff5 	bne	13cb4c <alloc_rev+0x144>
  13cb74:	eaffffeb 	b	13cb28 <alloc_rev+0x120>
  13cb78:	e1a08002 	mov	r8, r2
  13cb7c:	e3180001 	tst	r8, #1
  13cb80:	0affffa9 	beq	13ca2c <alloc_rev+0x24>
  13cb84:	e3a00000 	mov	r0, #0
  13cb88:	e28dd00c 	add	sp, sp, #12
  13cb8c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13cb90:	e28b3001 	add	r3, fp, #1
  13cb94:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13cb98:	e59d2004 	ldr	r2, [sp, #4]
  13cb9c:	e3510000 	cmp	r1, #0
  13cba0:	e5922000 	ldr	r2, [r2]
  13cba4:	1affffbd 	bne	13caa0 <alloc_rev+0x98>
  13cba8:	eaffffb7 	b	13ca8c <alloc_rev+0x84>
  13cbac:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13cbb0:	83a0703f 	movhi	r7, #63	; 0x3f
  13cbb4:	959f30c8 	ldrls	r3, [pc, #200]	; 13cc84 <alloc_rev+0x27c>
  13cbb8:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13cbbc:	908373a7 	addls	r7, r3, r7, lsr #7
  13cbc0:	95577004 	ldrbls	r7, [r7, #-4]
  13cbc4:	92877010 	addls	r7, r7, #16
  13cbc8:	91a04207 	lslls	r4, r7, #4
  13cbcc:	92844008 	addls	r4, r4, #8
  13cbd0:	e1a0b007 	mov	fp, r7
  13cbd4:	eaffffa1 	b	13ca60 <alloc_rev+0x58>
  13cbd8:	e59d3004 	ldr	r3, [sp, #4]
  13cbdc:	e3c80001 	bic	r0, r8, #1
  13cbe0:	e0430000 	sub	r0, r3, r0
  13cbe4:	e1a0100b 	mov	r1, fp
  13cbe8:	ebfffe9c 	bl	13c660 <unbin>
  13cbec:	e5943000 	ldr	r3, [r4]
  13cbf0:	e3530000 	cmp	r3, #0
  13cbf4:	0a000009 	beq	13cc20 <alloc_rev+0x218>
  13cbf8:	e59f308c 	ldr	r3, [pc, #140]	; 13cc8c <alloc_rev+0x284>
  13cbfc:	e593c000 	ldr	ip, [r3]
  13cc00:	e12fff3c 	blx	ip
  13cc04:	e3a02000 	mov	r2, #0
  13cc08:	e593c000 	ldr	ip, [r3]
  13cc0c:	e5842000 	str	r2, [r4]
  13cc10:	e12fff3c 	blx	ip
  13cc14:	e5943004 	ldr	r3, [r4, #4]
  13cc18:	e1530002 	cmp	r3, r2
  13cc1c:	1a000002 	bne	13cc2c <alloc_rev+0x224>
  13cc20:	e3a00001 	mov	r0, #1
  13cc24:	e28dd00c 	add	sp, sp, #12
  13cc28:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13cc2c:	e3a000f0 	mov	r0, #240	; 0xf0
  13cc30:	ebfffdd0 	bl	13c378 <get_rtt_syscall>
  13cc34:	e2503000 	subs	r3, r0, #0
  13cc38:	0afffff8 	beq	13cc20 <alloc_rev+0x218>
  13cc3c:	e3a02001 	mov	r2, #1
  13cc40:	e3a01081 	mov	r1, #129	; 0x81
  13cc44:	e1a00004 	mov	r0, r4
  13cc48:	e12fff33 	blx	r3
  13cc4c:	e3700026 	cmn	r0, #38	; 0x26
  13cc50:	1afffff2 	bne	13cc20 <alloc_rev+0x218>
  13cc54:	e3a000f0 	mov	r0, #240	; 0xf0
  13cc58:	ebfffdc6 	bl	13c378 <get_rtt_syscall>
  13cc5c:	e2503000 	subs	r3, r0, #0
  13cc60:	0affffee 	beq	13cc20 <alloc_rev+0x218>
  13cc64:	e3a02001 	mov	r2, #1
  13cc68:	e1a00004 	mov	r0, r4
  13cc6c:	e1a01002 	mov	r1, r2
  13cc70:	e12fff33 	blx	r3
  13cc74:	eaffffe9 	b	13cc20 <alloc_rev+0x218>
  13cc78:	0014ec58 	.word	0x0014ec58
  13cc7c:	0014d3d8 	.word	0x0014d3d8
  13cc80:	000001ff 	.word	0x000001ff
  13cc84:	0014cd14 	.word	0x0014cd14
  13cc88:	0015d08c 	.word	0x0015d08c
  13cc8c:	0014d3d4 	.word	0x0014d3d4

0013cc90 <__bin_chunk>:
  13cc90:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13cc94:	e5903004 	ldr	r3, [r0, #4]
  13cc98:	e24dd01c 	sub	sp, sp, #28
  13cc9c:	e3c31001 	bic	r1, r3, #1
  13cca0:	e7902001 	ldr	r2, [r0, r1]
  13cca4:	e1a06000 	mov	r6, r0
  13cca8:	e1530002 	cmp	r3, r2
  13ccac:	e58d1010 	str	r1, [sp, #16]
  13ccb0:	e080b001 	add	fp, r0, r1
  13ccb4:	0a000000 	beq	13ccbc <__bin_chunk+0x2c>
  13ccb8:	e7f000f0 	.word	0xe7f000f0
  13ccbc:	e59d3010 	ldr	r3, [sp, #16]
  13ccc0:	e59f55e8 	ldr	r5, [pc, #1512]	; 13d2b0 <__bin_chunk+0x620>
  13ccc4:	e58d3000 	str	r3, [sp]
  13ccc8:	e3a03000 	mov	r3, #0
  13cccc:	e58d3014 	str	r3, [sp, #20]
  13ccd0:	e2853b01 	add	r3, r5, #1024	; 0x400
  13ccd4:	e283300c 	add	r3, r3, #12
  13ccd8:	e59f95d4 	ldr	r9, [pc, #1492]	; 13d2b4 <__bin_chunk+0x624>
  13ccdc:	e58d300c 	str	r3, [sp, #12]
  13cce0:	e5963000 	ldr	r3, [r6]
  13cce4:	e59b2004 	ldr	r2, [fp, #4]
  13cce8:	e0033002 	and	r3, r3, r2
  13ccec:	e3130001 	tst	r3, #1
  13ccf0:	0a000038 	beq	13cdd8 <__bin_chunk+0x148>
  13ccf4:	e59d1000 	ldr	r1, [sp]
  13ccf8:	e1a03221 	lsr	r3, r1, #4
  13ccfc:	e2432001 	sub	r2, r3, #1
  13cd00:	e3520020 	cmp	r2, #32
  13cd04:	e3813001 	orr	r3, r1, #1
  13cd08:	e5863004 	str	r3, [r6, #4]
  13cd0c:	e58d2008 	str	r2, [sp, #8]
  13cd10:	e58b3000 	str	r3, [fp]
  13cd14:	8a00006c 	bhi	13cecc <__bin_chunk+0x23c>
  13cd18:	e1a04202 	lsl	r4, r2, #4
  13cd1c:	e2844008 	add	r4, r4, #8
  13cd20:	e58d2004 	str	r2, [sp, #4]
  13cd24:	e59f358c 	ldr	r3, [pc, #1420]	; 13d2b8 <__bin_chunk+0x628>
  13cd28:	e0854004 	add	r4, r5, r4
  13cd2c:	e593300c 	ldr	r3, [r3, #12]
  13cd30:	e3530000 	cmp	r3, #0
  13cd34:	12848004 	addne	r8, r4, #4
  13cd38:	1a000056 	bne	13ce98 <__bin_chunk+0x208>
  13cd3c:	e59d3004 	ldr	r3, [sp, #4]
  13cd40:	e2837001 	add	r7, r3, #1
  13cd44:	e7953207 	ldr	r3, [r5, r7, lsl #4]
  13cd48:	e3530000 	cmp	r3, #0
  13cd4c:	0a000069 	beq	13cef8 <__bin_chunk+0x268>
  13cd50:	e59f3560 	ldr	r3, [pc, #1376]	; 13d2b8 <__bin_chunk+0x628>
  13cd54:	e593300c 	ldr	r3, [r3, #12]
  13cd58:	e3530000 	cmp	r3, #0
  13cd5c:	1a00006f 	bne	13cf20 <__bin_chunk+0x290>
  13cd60:	e5963000 	ldr	r3, [r6]
  13cd64:	e59b2004 	ldr	r2, [fp, #4]
  13cd68:	e0033002 	and	r3, r3, r2
  13cd6c:	e2133001 	ands	r3, r3, #1
  13cd70:	1a0000b5 	bne	13d04c <__bin_chunk+0x3bc>
  13cd74:	e5952408 	ldr	r2, [r5, #1032]	; 0x408
  13cd78:	e3520000 	cmp	r2, #0
  13cd7c:	0a000008 	beq	13cda4 <__bin_chunk+0x114>
  13cd80:	e59f2534 	ldr	r2, [pc, #1332]	; 13d2bc <__bin_chunk+0x62c>
  13cd84:	e592c000 	ldr	ip, [r2]
  13cd88:	e12fff3c 	blx	ip
  13cd8c:	e5853408 	str	r3, [r5, #1032]	; 0x408
  13cd90:	e592c000 	ldr	ip, [r2]
  13cd94:	e12fff3c 	blx	ip
  13cd98:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13cd9c:	e3530000 	cmp	r3, #0
  13cda0:	1a000095 	bne	13cffc <__bin_chunk+0x36c>
  13cda4:	e5943000 	ldr	r3, [r4]
  13cda8:	e3530000 	cmp	r3, #0
  13cdac:	0a000009 	beq	13cdd8 <__bin_chunk+0x148>
  13cdb0:	e59f2504 	ldr	r2, [pc, #1284]	; 13d2bc <__bin_chunk+0x62c>
  13cdb4:	e592c000 	ldr	ip, [r2]
  13cdb8:	e12fff3c 	blx	ip
  13cdbc:	e3a03000 	mov	r3, #0
  13cdc0:	e592c000 	ldr	ip, [r2]
  13cdc4:	e5843000 	str	r3, [r4]
  13cdc8:	e12fff3c 	blx	ip
  13cdcc:	e5943004 	ldr	r3, [r4, #4]
  13cdd0:	e3530000 	cmp	r3, #0
  13cdd4:	1a000075 	bne	13cfb0 <__bin_chunk+0x320>
  13cdd8:	e1a00006 	mov	r0, r6
  13cddc:	ebffff09 	bl	13ca08 <alloc_rev>
  13cde0:	e3500000 	cmp	r0, #0
  13cde4:	0a000010 	beq	13ce2c <__bin_chunk+0x19c>
  13cde8:	e5963000 	ldr	r3, [r6]
  13cdec:	e59d2010 	ldr	r2, [sp, #16]
  13cdf0:	e3c33001 	bic	r3, r3, #1
  13cdf4:	e0466003 	sub	r6, r6, r3
  13cdf8:	e5963004 	ldr	r3, [r6, #4]
  13cdfc:	e59d1000 	ldr	r1, [sp]
  13ce00:	e3c33001 	bic	r3, r3, #1
  13ce04:	e0822003 	add	r2, r2, r3
  13ce08:	e0811003 	add	r1, r1, r3
  13ce0c:	e352090a 	cmp	r2, #163840	; 0x28000
  13ce10:	e58d1000 	str	r1, [sp]
  13ce14:	9a000004 	bls	13ce2c <__bin_chunk+0x19c>
  13ce18:	e0222003 	eor	r2, r2, r3
  13ce1c:	e1520003 	cmp	r2, r3
  13ce20:	e59d1014 	ldr	r1, [sp, #20]
  13ce24:	83a01001 	movhi	r1, #1
  13ce28:	e58d1014 	str	r1, [sp, #20]
  13ce2c:	e1a0000b 	mov	r0, fp
  13ce30:	ebfffe54 	bl	13c788 <alloc_fwd>
  13ce34:	e3500000 	cmp	r0, #0
  13ce38:	0affffa8 	beq	13cce0 <__bin_chunk+0x50>
  13ce3c:	e59b3004 	ldr	r3, [fp, #4]
  13ce40:	e59d2010 	ldr	r2, [sp, #16]
  13ce44:	e3c33001 	bic	r3, r3, #1
  13ce48:	e59d1000 	ldr	r1, [sp]
  13ce4c:	e0822003 	add	r2, r2, r3
  13ce50:	e0811003 	add	r1, r1, r3
  13ce54:	e352090a 	cmp	r2, #163840	; 0x28000
  13ce58:	e58d1000 	str	r1, [sp]
  13ce5c:	9a000004 	bls	13ce74 <__bin_chunk+0x1e4>
  13ce60:	e0222003 	eor	r2, r2, r3
  13ce64:	e1520003 	cmp	r2, r3
  13ce68:	e59d1014 	ldr	r1, [sp, #20]
  13ce6c:	83a01001 	movhi	r1, #1
  13ce70:	e58d1014 	str	r1, [sp, #20]
  13ce74:	e08bb003 	add	fp, fp, r3
  13ce78:	eaffff98 	b	13cce0 <__bin_chunk+0x50>
  13ce7c:	e3570000 	cmp	r7, #0
  13ce80:	0affffad 	beq	13cd3c <__bin_chunk+0xac>
  13ce84:	e1a03001 	mov	r3, r1
  13ce88:	e1a02001 	mov	r2, r1
  13ce8c:	e1a00004 	mov	r0, r4
  13ce90:	e1a01008 	mov	r1, r8
  13ce94:	eb0013a0 	bl	141d1c <__wait>
  13ce98:	e5947000 	ldr	r7, [r4]
  13ce9c:	ea000002 	b	13ceac <__bin_chunk+0x21c>
  13cea0:	e5943000 	ldr	r3, [r4]
  13cea4:	e1570003 	cmp	r7, r3
  13cea8:	1afffffa 	bne	13ce98 <__bin_chunk+0x208>
  13ceac:	e1a00007 	mov	r0, r7
  13ceb0:	e3a01001 	mov	r1, #1
  13ceb4:	e1a02004 	mov	r2, r4
  13ceb8:	e5993000 	ldr	r3, [r9]
  13cebc:	e12fff33 	blx	r3
  13cec0:	e3500000 	cmp	r0, #0
  13cec4:	1afffff5 	bne	13cea0 <__bin_chunk+0x210>
  13cec8:	eaffffeb 	b	13ce7c <__bin_chunk+0x1ec>
  13cecc:	e59d3008 	ldr	r3, [sp, #8]
  13ced0:	e3530c02 	cmp	r3, #512	; 0x200
  13ced4:	2a000027 	bcs	13cf78 <__bin_chunk+0x2e8>
  13ced8:	e59f23e0 	ldr	r2, [pc, #992]	; 13d2c0 <__bin_chunk+0x630>
  13cedc:	e08231a3 	add	r3, r2, r3, lsr #3
  13cee0:	e5533004 	ldrb	r3, [r3, #-4]
  13cee4:	e1a04203 	lsl	r4, r3, #4
  13cee8:	e58d3008 	str	r3, [sp, #8]
  13ceec:	e2844008 	add	r4, r4, #8
  13cef0:	e58d3004 	str	r3, [sp, #4]
  13cef4:	eaffff8a 	b	13cd24 <__bin_chunk+0x94>
  13cef8:	e59d3008 	ldr	r3, [sp, #8]
  13cefc:	e0852207 	add	r2, r5, r7, lsl #4
  13cf00:	e0853203 	add	r3, r5, r3, lsl #4
  13cf04:	e2833008 	add	r3, r3, #8
  13cf08:	e7853207 	str	r3, [r5, r7, lsl #4]
  13cf0c:	e5823004 	str	r3, [r2, #4]
  13cf10:	e59f33a0 	ldr	r3, [pc, #928]	; 13d2b8 <__bin_chunk+0x628>
  13cf14:	e593300c 	ldr	r3, [r3, #12]
  13cf18:	e3530000 	cmp	r3, #0
  13cf1c:	0affff8f 	beq	13cd60 <__bin_chunk+0xd0>
  13cf20:	e59f339c 	ldr	r3, [pc, #924]	; 13d2c4 <__bin_chunk+0x634>
  13cf24:	e283a008 	add	sl, r3, #8
  13cf28:	e5958408 	ldr	r8, [r5, #1032]	; 0x408
  13cf2c:	ea000002 	b	13cf3c <__bin_chunk+0x2ac>
  13cf30:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13cf34:	e1580003 	cmp	r8, r3
  13cf38:	1afffffa 	bne	13cf28 <__bin_chunk+0x298>
  13cf3c:	e1a00008 	mov	r0, r8
  13cf40:	e3a01001 	mov	r1, #1
  13cf44:	e1a0200a 	mov	r2, sl
  13cf48:	e5993000 	ldr	r3, [r9]
  13cf4c:	e12fff33 	blx	r3
  13cf50:	e3500000 	cmp	r0, #0
  13cf54:	1afffff5 	bne	13cf30 <__bin_chunk+0x2a0>
  13cf58:	e3580000 	cmp	r8, #0
  13cf5c:	0affff7f 	beq	13cd60 <__bin_chunk+0xd0>
  13cf60:	e1a03001 	mov	r3, r1
  13cf64:	e1a02001 	mov	r2, r1
  13cf68:	e1a0000a 	mov	r0, sl
  13cf6c:	e59d100c 	ldr	r1, [sp, #12]
  13cf70:	eb001369 	bl	141d1c <__wait>
  13cf74:	eaffffeb 	b	13cf28 <__bin_chunk+0x298>
  13cf78:	e59d3008 	ldr	r3, [sp, #8]
  13cf7c:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13cf80:	83a0303f 	movhi	r3, #63	; 0x3f
  13cf84:	959f2334 	ldrls	r2, [pc, #820]	; 13d2c0 <__bin_chunk+0x630>
  13cf88:	858d3008 	strhi	r3, [sp, #8]
  13cf8c:	908233a3 	addls	r3, r2, r3, lsr #7
  13cf90:	95533004 	ldrbls	r3, [r3, #-4]
  13cf94:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13cf98:	92833010 	addls	r3, r3, #16
  13cf9c:	91a04203 	lslls	r4, r3, #4
  13cfa0:	958d3008 	strls	r3, [sp, #8]
  13cfa4:	92844008 	addls	r4, r4, #8
  13cfa8:	e58d3004 	str	r3, [sp, #4]
  13cfac:	eaffff5c 	b	13cd24 <__bin_chunk+0x94>
  13cfb0:	e3a000f0 	mov	r0, #240	; 0xf0
  13cfb4:	ebfffcef 	bl	13c378 <get_rtt_syscall>
  13cfb8:	e2503000 	subs	r3, r0, #0
  13cfbc:	0affff85 	beq	13cdd8 <__bin_chunk+0x148>
  13cfc0:	e3a02001 	mov	r2, #1
  13cfc4:	e3a01081 	mov	r1, #129	; 0x81
  13cfc8:	e1a00004 	mov	r0, r4
  13cfcc:	e12fff33 	blx	r3
  13cfd0:	e3700026 	cmn	r0, #38	; 0x26
  13cfd4:	1affff7f 	bne	13cdd8 <__bin_chunk+0x148>
  13cfd8:	e3a000f0 	mov	r0, #240	; 0xf0
  13cfdc:	ebfffce5 	bl	13c378 <get_rtt_syscall>
  13cfe0:	e2503000 	subs	r3, r0, #0
  13cfe4:	0affff7b 	beq	13cdd8 <__bin_chunk+0x148>
  13cfe8:	e3a02001 	mov	r2, #1
  13cfec:	e1a00004 	mov	r0, r4
  13cff0:	e1a01002 	mov	r1, r2
  13cff4:	e12fff33 	blx	r3
  13cff8:	eaffff76 	b	13cdd8 <__bin_chunk+0x148>
  13cffc:	e3a000f0 	mov	r0, #240	; 0xf0
  13d000:	ebfffcdc 	bl	13c378 <get_rtt_syscall>
  13d004:	e2503000 	subs	r3, r0, #0
  13d008:	e59f72b8 	ldr	r7, [pc, #696]	; 13d2c8 <__bin_chunk+0x638>
  13d00c:	0affff64 	beq	13cda4 <__bin_chunk+0x114>
  13d010:	e3a02001 	mov	r2, #1
  13d014:	e3a01081 	mov	r1, #129	; 0x81
  13d018:	e1a00007 	mov	r0, r7
  13d01c:	e12fff33 	blx	r3
  13d020:	e3700026 	cmn	r0, #38	; 0x26
  13d024:	1affff5e 	bne	13cda4 <__bin_chunk+0x114>
  13d028:	e3a000f0 	mov	r0, #240	; 0xf0
  13d02c:	ebfffcd1 	bl	13c378 <get_rtt_syscall>
  13d030:	e2503000 	subs	r3, r0, #0
  13d034:	0affff5a 	beq	13cda4 <__bin_chunk+0x114>
  13d038:	e3a02001 	mov	r2, #1
  13d03c:	e1a00007 	mov	r0, r7
  13d040:	e1a01002 	mov	r1, r2
  13d044:	e12fff33 	blx	r3
  13d048:	eaffff55 	b	13cda4 <__bin_chunk+0x114>
  13d04c:	e59d3004 	ldr	r3, [sp, #4]
  13d050:	e8950006 	ldm	r5, {r1, r2}
  13d054:	e263c020 	rsb	ip, r3, #32
  13d058:	e1a08331 	lsr	r8, r1, r3
  13d05c:	e2430020 	sub	r0, r3, #32
  13d060:	e3a03000 	mov	r3, #0
  13d064:	e1888c12 	orr	r8, r8, r2, lsl ip
  13d068:	e1888032 	orr	r8, r8, r2, lsr r0
  13d06c:	e2082001 	and	r2, r8, #1
  13d070:	e1923003 	orrs	r3, r2, r3
  13d074:	0a00005d 	beq	13d1f0 <__bin_chunk+0x560>
  13d078:	e59d3000 	ldr	r3, [sp]
  13d07c:	e5863004 	str	r3, [r6, #4]
  13d080:	e58b3000 	str	r3, [fp]
  13d084:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13d088:	e3530000 	cmp	r3, #0
  13d08c:	0a000009 	beq	13d0b8 <__bin_chunk+0x428>
  13d090:	e59f3224 	ldr	r3, [pc, #548]	; 13d2bc <__bin_chunk+0x62c>
  13d094:	e593c000 	ldr	ip, [r3]
  13d098:	e12fff3c 	blx	ip
  13d09c:	e3a02000 	mov	r2, #0
  13d0a0:	e593c000 	ldr	ip, [r3]
  13d0a4:	e5852408 	str	r2, [r5, #1032]	; 0x408
  13d0a8:	e12fff3c 	blx	ip
  13d0ac:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13d0b0:	e1530002 	cmp	r3, r2
  13d0b4:	1a000039 	bne	13d1a0 <__bin_chunk+0x510>
  13d0b8:	e59d3008 	ldr	r3, [sp, #8]
  13d0bc:	e0857207 	add	r7, r5, r7, lsl #4
  13d0c0:	e2833001 	add	r3, r3, #1
  13d0c4:	e5972004 	ldr	r2, [r7, #4]
  13d0c8:	e0855203 	add	r5, r5, r3, lsl #4
  13d0cc:	e2453008 	sub	r3, r5, #8
  13d0d0:	e586200c 	str	r2, [r6, #12]
  13d0d4:	e5863008 	str	r3, [r6, #8]
  13d0d8:	e59d2014 	ldr	r2, [sp, #20]
  13d0dc:	e5856004 	str	r6, [r5, #4]
  13d0e0:	e596300c 	ldr	r3, [r6, #12]
  13d0e4:	e3520000 	cmp	r2, #0
  13d0e8:	e5836008 	str	r6, [r3, #8]
  13d0ec:	0a000008 	beq	13d114 <__bin_chunk+0x484>
  13d0f0:	e59f31d4 	ldr	r3, [pc, #468]	; 13d2cc <__bin_chunk+0x63c>
  13d0f4:	e2866a01 	add	r6, r6, #4096	; 0x1000
  13d0f8:	e286600f 	add	r6, r6, #15
  13d0fc:	e24b1010 	sub	r1, fp, #16
  13d100:	e0060003 	and	r0, r6, r3
  13d104:	e0011003 	and	r1, r1, r3
  13d108:	e0411000 	sub	r1, r1, r0
  13d10c:	e3a02004 	mov	r2, #4
  13d110:	eb0002ca 	bl	13dc40 <__madvise>
  13d114:	e5943000 	ldr	r3, [r4]
  13d118:	e3530000 	cmp	r3, #0
  13d11c:	0a000009 	beq	13d148 <__bin_chunk+0x4b8>
  13d120:	e59f3194 	ldr	r3, [pc, #404]	; 13d2bc <__bin_chunk+0x62c>
  13d124:	e593c000 	ldr	ip, [r3]
  13d128:	e12fff3c 	blx	ip
  13d12c:	e3a02000 	mov	r2, #0
  13d130:	e593c000 	ldr	ip, [r3]
  13d134:	e5842000 	str	r2, [r4]
  13d138:	e12fff3c 	blx	ip
  13d13c:	e5943004 	ldr	r3, [r4, #4]
  13d140:	e1530002 	cmp	r3, r2
  13d144:	1a000001 	bne	13d150 <__bin_chunk+0x4c0>
  13d148:	e28dd01c 	add	sp, sp, #28
  13d14c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d150:	e3a000f0 	mov	r0, #240	; 0xf0
  13d154:	ebfffc87 	bl	13c378 <get_rtt_syscall>
  13d158:	e2503000 	subs	r3, r0, #0
  13d15c:	0afffff9 	beq	13d148 <__bin_chunk+0x4b8>
  13d160:	e3a02001 	mov	r2, #1
  13d164:	e3a01081 	mov	r1, #129	; 0x81
  13d168:	e1a00004 	mov	r0, r4
  13d16c:	e12fff33 	blx	r3
  13d170:	e3700026 	cmn	r0, #38	; 0x26
  13d174:	1afffff3 	bne	13d148 <__bin_chunk+0x4b8>
  13d178:	e3a000f0 	mov	r0, #240	; 0xf0
  13d17c:	ebfffc7d 	bl	13c378 <get_rtt_syscall>
  13d180:	e2503000 	subs	r3, r0, #0
  13d184:	0affffef 	beq	13d148 <__bin_chunk+0x4b8>
  13d188:	e3a02001 	mov	r2, #1
  13d18c:	e1a00004 	mov	r0, r4
  13d190:	e1a01002 	mov	r1, r2
  13d194:	e28dd01c 	add	sp, sp, #28
  13d198:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13d19c:	e12fff13 	bx	r3
  13d1a0:	e3a000f0 	mov	r0, #240	; 0xf0
  13d1a4:	ebfffc73 	bl	13c378 <get_rtt_syscall>
  13d1a8:	e2503000 	subs	r3, r0, #0
  13d1ac:	e59f8114 	ldr	r8, [pc, #276]	; 13d2c8 <__bin_chunk+0x638>
  13d1b0:	0affffc0 	beq	13d0b8 <__bin_chunk+0x428>
  13d1b4:	e3a02001 	mov	r2, #1
  13d1b8:	e3a01081 	mov	r1, #129	; 0x81
  13d1bc:	e1a00008 	mov	r0, r8
  13d1c0:	e12fff33 	blx	r3
  13d1c4:	e3700026 	cmn	r0, #38	; 0x26
  13d1c8:	1affffba 	bne	13d0b8 <__bin_chunk+0x428>
  13d1cc:	e3a000f0 	mov	r0, #240	; 0xf0
  13d1d0:	ebfffc68 	bl	13c378 <get_rtt_syscall>
  13d1d4:	e2503000 	subs	r3, r0, #0
  13d1d8:	0affffb6 	beq	13d0b8 <__bin_chunk+0x428>
  13d1dc:	e3a02001 	mov	r2, #1
  13d1e0:	e1a00008 	mov	r0, r8
  13d1e4:	e1a01002 	mov	r1, r2
  13d1e8:	e12fff33 	blx	r3
  13d1ec:	eaffffb1 	b	13d0b8 <__bin_chunk+0x428>
  13d1f0:	e3a03001 	mov	r3, #1
  13d1f4:	e59d1004 	ldr	r1, [sp, #4]
  13d1f8:	e1a02013 	lsl	r2, r3, r0
  13d1fc:	e1b01113 	lsls	r1, r3, r1
  13d200:	e1823c33 	orr	r3, r2, r3, lsr ip
  13d204:	e58d100c 	str	r1, [sp, #12]
  13d208:	e58d3004 	str	r3, [sp, #4]
  13d20c:	0a000011 	beq	13d258 <__bin_chunk+0x5c8>
  13d210:	e59f809c 	ldr	r8, [pc, #156]	; 13d2b4 <__bin_chunk+0x624>
  13d214:	e59fa094 	ldr	sl, [pc, #148]	; 13d2b0 <__bin_chunk+0x620>
  13d218:	e58db010 	str	fp, [sp, #16]
  13d21c:	e5959000 	ldr	r9, [r5]
  13d220:	e59d300c 	ldr	r3, [sp, #12]
  13d224:	e183b009 	orr	fp, r3, r9
  13d228:	ea000002 	b	13d238 <__bin_chunk+0x5a8>
  13d22c:	e5953000 	ldr	r3, [r5]
  13d230:	e1590003 	cmp	r9, r3
  13d234:	1afffff8 	bne	13d21c <__bin_chunk+0x58c>
  13d238:	e1a00009 	mov	r0, r9
  13d23c:	e1a0100b 	mov	r1, fp
  13d240:	e1a0200a 	mov	r2, sl
  13d244:	e5983000 	ldr	r3, [r8]
  13d248:	e12fff33 	blx	r3
  13d24c:	e3500000 	cmp	r0, #0
  13d250:	1afffff5 	bne	13d22c <__bin_chunk+0x59c>
  13d254:	e59db010 	ldr	fp, [sp, #16]
  13d258:	e59d3004 	ldr	r3, [sp, #4]
  13d25c:	e3530000 	cmp	r3, #0
  13d260:	0affff84 	beq	13d078 <__bin_chunk+0x3e8>
  13d264:	e59f8048 	ldr	r8, [pc, #72]	; 13d2b4 <__bin_chunk+0x624>
  13d268:	e59fa060 	ldr	sl, [pc, #96]	; 13d2d0 <__bin_chunk+0x640>
  13d26c:	e58db00c 	str	fp, [sp, #12]
  13d270:	e5959004 	ldr	r9, [r5, #4]
  13d274:	e59d3004 	ldr	r3, [sp, #4]
  13d278:	e183b009 	orr	fp, r3, r9
  13d27c:	ea000002 	b	13d28c <__bin_chunk+0x5fc>
  13d280:	e5953004 	ldr	r3, [r5, #4]
  13d284:	e1590003 	cmp	r9, r3
  13d288:	1afffff8 	bne	13d270 <__bin_chunk+0x5e0>
  13d28c:	e1a00009 	mov	r0, r9
  13d290:	e1a0100b 	mov	r1, fp
  13d294:	e1a0200a 	mov	r2, sl
  13d298:	e5983000 	ldr	r3, [r8]
  13d29c:	e12fff33 	blx	r3
  13d2a0:	e3500000 	cmp	r0, #0
  13d2a4:	1afffff5 	bne	13d280 <__bin_chunk+0x5f0>
  13d2a8:	e59db00c 	ldr	fp, [sp, #12]
  13d2ac:	eaffff71 	b	13d078 <__bin_chunk+0x3e8>
  13d2b0:	0014ec58 	.word	0x0014ec58
  13d2b4:	0014d3d8 	.word	0x0014d3d8
  13d2b8:	0015d08c 	.word	0x0015d08c
  13d2bc:	0014d3d4 	.word	0x0014d3d4
  13d2c0:	0014cd14 	.word	0x0014cd14
  13d2c4:	0014f058 	.word	0x0014f058
  13d2c8:	0014f060 	.word	0x0014f060
  13d2cc:	fffff000 	.word	0xfffff000
  13d2d0:	0014ec5c 	.word	0x0014ec5c

0013d2d4 <trim>:
  13d2d4:	e5903004 	ldr	r3, [r0, #4]
  13d2d8:	e1a02000 	mov	r2, r0
  13d2dc:	e3c33001 	bic	r3, r3, #1
  13d2e0:	e2430010 	sub	r0, r3, #16
  13d2e4:	e1500001 	cmp	r0, r1
  13d2e8:	912fff1e 	bxls	lr
  13d2ec:	e043c001 	sub	ip, r3, r1
  13d2f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13d2f4:	e38cc001 	orr	ip, ip, #1
  13d2f8:	e381e001 	orr	lr, r1, #1
  13d2fc:	e0820001 	add	r0, r2, r1
  13d300:	e782e001 	str	lr, [r2, r1]
  13d304:	e580c004 	str	ip, [r0, #4]
  13d308:	e782c003 	str	ip, [r2, r3]
  13d30c:	e582e004 	str	lr, [r2, #4]
  13d310:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13d314:	eafffe5d 	b	13cc90 <__bin_chunk>

0013d318 <malloc>:
  13d318:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13d31c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  13d320:	e28d3028 	add	r3, sp, #40	; 0x28
  13d324:	e523000c 	str	r0, [r3, #-12]!
  13d328:	e1a00003 	mov	r0, r3
  13d32c:	ebfffcb1 	bl	13c5f8 <adjust_size>
  13d330:	e3500000 	cmp	r0, #0
  13d334:	ba000145 	blt	13d850 <malloc+0x538>
  13d338:	e59d301c 	ldr	r3, [sp, #28]
  13d33c:	e3530907 	cmp	r3, #114688	; 0x1c000
  13d340:	8a000076 	bhi	13d520 <malloc+0x208>
  13d344:	e1a03223 	lsr	r3, r3, #4
  13d348:	e2432001 	sub	r2, r3, #1
  13d34c:	e3520020 	cmp	r2, #32
  13d350:	958d2018 	strls	r2, [sp, #24]
  13d354:	8a000066 	bhi	13d4f4 <malloc+0x1dc>
  13d358:	e3a01001 	mov	r1, #1
  13d35c:	e59dc018 	ldr	ip, [sp, #24]
  13d360:	e59f85a8 	ldr	r8, [pc, #1448]	; 13d910 <malloc+0x5f8>
  13d364:	e24c0020 	sub	r0, ip, #32
  13d368:	e1a03011 	lsl	r3, r1, r0
  13d36c:	e1a02c11 	lsl	r2, r1, ip
  13d370:	e26c0020 	rsb	r0, ip, #32
  13d374:	e2722000 	rsbs	r2, r2, #0
  13d378:	e1833031 	orr	r3, r3, r1, lsr r0
  13d37c:	e2e33000 	rsc	r3, r3, #0
  13d380:	e58d2010 	str	r2, [sp, #16]
  13d384:	e58d3014 	str	r3, [sp, #20]
  13d388:	e59fb584 	ldr	fp, [pc, #1412]	; 13d914 <malloc+0x5fc>
  13d38c:	e59f6584 	ldr	r6, [pc, #1412]	; 13d918 <malloc+0x600>
  13d390:	e898000c 	ldm	r8, {r2, r3}
  13d394:	e28d1010 	add	r1, sp, #16
  13d398:	e8910003 	ldm	r1, {r0, r1}
  13d39c:	e0011003 	and	r1, r1, r3
  13d3a0:	e0000002 	and	r0, r0, r2
  13d3a4:	e1a02000 	mov	r2, r0
  13d3a8:	e1a03001 	mov	r3, r1
  13d3ac:	e1921003 	orrs	r1, r2, r3
  13d3b0:	0a000073 	beq	13d584 <malloc+0x26c>
  13d3b4:	e3500000 	cmp	r0, #0
  13d3b8:	1a000048 	bne	13d4e0 <malloc+0x1c8>
  13d3bc:	e2637000 	rsb	r7, r3, #0
  13d3c0:	e0077003 	and	r7, r7, r3
  13d3c4:	e16f7f17 	clz	r7, r7
  13d3c8:	e267703f 	rsb	r7, r7, #63	; 0x3f
  13d3cc:	e59b300c 	ldr	r3, [fp, #12]
  13d3d0:	e1a09207 	lsl	r9, r7, #4
  13d3d4:	e2899008 	add	r9, r9, #8
  13d3d8:	e3530000 	cmp	r3, #0
  13d3dc:	e0885009 	add	r5, r8, r9
  13d3e0:	1285a004 	addne	sl, r5, #4
  13d3e4:	1a000030 	bne	13d4ac <malloc+0x194>
  13d3e8:	e2873001 	add	r3, r7, #1
  13d3ec:	e7984203 	ldr	r4, [r8, r3, lsl #4]
  13d3f0:	e0882009 	add	r2, r8, r9
  13d3f4:	e3540000 	cmp	r4, #0
  13d3f8:	00881203 	addeq	r1, r8, r3, lsl #4
  13d3fc:	07882203 	streq	r2, [r8, r3, lsl #4]
  13d400:	05812004 	streq	r2, [r1, #4]
  13d404:	0a000001 	beq	13d410 <malloc+0xf8>
  13d408:	e1540002 	cmp	r4, r2
  13d40c:	1a00009d 	bne	13d688 <malloc+0x370>
  13d410:	e7983009 	ldr	r3, [r8, r9]
  13d414:	e3530000 	cmp	r3, #0
  13d418:	0affffdc 	beq	13d390 <malloc+0x78>
  13d41c:	e59f24f8 	ldr	r2, [pc, #1272]	; 13d91c <malloc+0x604>
  13d420:	e592c000 	ldr	ip, [r2]
  13d424:	e12fff3c 	blx	ip
  13d428:	e3a03000 	mov	r3, #0
  13d42c:	e592c000 	ldr	ip, [r2]
  13d430:	e5853000 	str	r3, [r5]
  13d434:	e12fff3c 	blx	ip
  13d438:	e5953004 	ldr	r3, [r5, #4]
  13d43c:	e3530000 	cmp	r3, #0
  13d440:	0affffd2 	beq	13d390 <malloc+0x78>
  13d444:	e3a000f0 	mov	r0, #240	; 0xf0
  13d448:	ebfffbca 	bl	13c378 <get_rtt_syscall>
  13d44c:	e2503000 	subs	r3, r0, #0
  13d450:	0affffce 	beq	13d390 <malloc+0x78>
  13d454:	e3a02001 	mov	r2, #1
  13d458:	e3a01081 	mov	r1, #129	; 0x81
  13d45c:	e1a00005 	mov	r0, r5
  13d460:	e12fff33 	blx	r3
  13d464:	e3700026 	cmn	r0, #38	; 0x26
  13d468:	1affffc8 	bne	13d390 <malloc+0x78>
  13d46c:	e3a000f0 	mov	r0, #240	; 0xf0
  13d470:	ebfffbc0 	bl	13c378 <get_rtt_syscall>
  13d474:	e2503000 	subs	r3, r0, #0
  13d478:	0affffc4 	beq	13d390 <malloc+0x78>
  13d47c:	e3a02001 	mov	r2, #1
  13d480:	e1a00005 	mov	r0, r5
  13d484:	e1a01002 	mov	r1, r2
  13d488:	e12fff33 	blx	r3
  13d48c:	eaffffbf 	b	13d390 <malloc+0x78>
  13d490:	e3540000 	cmp	r4, #0
  13d494:	0affffd3 	beq	13d3e8 <malloc+0xd0>
  13d498:	e1a03001 	mov	r3, r1
  13d49c:	e1a02001 	mov	r2, r1
  13d4a0:	e1a00005 	mov	r0, r5
  13d4a4:	e1a0100a 	mov	r1, sl
  13d4a8:	eb00121b 	bl	141d1c <__wait>
  13d4ac:	e5954000 	ldr	r4, [r5]
  13d4b0:	ea000002 	b	13d4c0 <malloc+0x1a8>
  13d4b4:	e5953000 	ldr	r3, [r5]
  13d4b8:	e1540003 	cmp	r4, r3
  13d4bc:	1afffffa 	bne	13d4ac <malloc+0x194>
  13d4c0:	e1a00004 	mov	r0, r4
  13d4c4:	e3a01001 	mov	r1, #1
  13d4c8:	e1a02005 	mov	r2, r5
  13d4cc:	e5963000 	ldr	r3, [r6]
  13d4d0:	e12fff33 	blx	r3
  13d4d4:	e3500000 	cmp	r0, #0
  13d4d8:	1afffff5 	bne	13d4b4 <malloc+0x19c>
  13d4dc:	eaffffeb 	b	13d490 <malloc+0x178>
  13d4e0:	e2607000 	rsb	r7, r0, #0
  13d4e4:	e0077000 	and	r7, r7, r0
  13d4e8:	e16f7f17 	clz	r7, r7
  13d4ec:	e267701f 	rsb	r7, r7, #31
  13d4f0:	eaffffb5 	b	13d3cc <malloc+0xb4>
  13d4f4:	e2433002 	sub	r3, r3, #2
  13d4f8:	e59f2420 	ldr	r2, [pc, #1056]	; 13d920 <malloc+0x608>
  13d4fc:	e3530c02 	cmp	r3, #512	; 0x200
  13d500:	308231a3 	addcc	r3, r2, r3, lsr #3
  13d504:	208233a3 	addcs	r3, r2, r3, lsr #7
  13d508:	35533004 	ldrbcc	r3, [r3, #-4]
  13d50c:	25533004 	ldrbcs	r3, [r3, #-4]
  13d510:	32833001 	addcc	r3, r3, #1
  13d514:	22833011 	addcs	r3, r3, #17
  13d518:	e58d3018 	str	r3, [sp, #24]
  13d51c:	eaffff8d 	b	13d358 <malloc+0x40>
  13d520:	e3e02000 	mvn	r2, #0
  13d524:	e3a06000 	mov	r6, #0
  13d528:	e3a07000 	mov	r7, #0
  13d52c:	e2833a01 	add	r3, r3, #4096	; 0x1000
  13d530:	e2833007 	add	r3, r3, #7
  13d534:	e3c34eff 	bic	r4, r3, #4080	; 0xff0
  13d538:	e3c4400f 	bic	r4, r4, #15
  13d53c:	e58d2000 	str	r2, [sp]
  13d540:	e1a01004 	mov	r1, r4
  13d544:	e58d6008 	str	r6, [sp, #8]
  13d548:	e58d700c 	str	r7, [sp, #12]
  13d54c:	e3a03022 	mov	r3, #34	; 0x22
  13d550:	e3a02003 	mov	r2, #3
  13d554:	e3a00000 	mov	r0, #0
  13d558:	eb0001ca 	bl	13dc88 <__mmap>
  13d55c:	e3700001 	cmn	r0, #1
  13d560:	0a0000ba 	beq	13d850 <malloc+0x538>
  13d564:	e3a03008 	mov	r3, #8
  13d568:	e2444008 	sub	r4, r4, #8
  13d56c:	e580400c 	str	r4, [r0, #12]
  13d570:	e5803008 	str	r3, [r0, #8]
  13d574:	e2804010 	add	r4, r0, #16
  13d578:	e1a00004 	mov	r0, r4
  13d57c:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d580:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d584:	e59b200c 	ldr	r2, [fp, #12]
  13d588:	e59d301c 	ldr	r3, [sp, #28]
  13d58c:	e3520000 	cmp	r2, #0
  13d590:	e2833010 	add	r3, r3, #16
  13d594:	e59f5388 	ldr	r5, [pc, #904]	; 13d924 <malloc+0x60c>
  13d598:	e58d3024 	str	r3, [sp, #36]	; 0x24
  13d59c:	1a000094 	bne	13d7f4 <malloc+0x4dc>
  13d5a0:	e28d0024 	add	r0, sp, #36	; 0x24
  13d5a4:	eb001718 	bl	14320c <__expand_heap>
  13d5a8:	e2504000 	subs	r4, r0, #0
  13d5ac:	0a0000b8 	beq	13d894 <malloc+0x57c>
  13d5b0:	e59f1370 	ldr	r1, [pc, #880]	; 13d928 <malloc+0x610>
  13d5b4:	e3a07001 	mov	r7, #1
  13d5b8:	e5916000 	ldr	r6, [r1]
  13d5bc:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  13d5c0:	e1540006 	cmp	r4, r6
  13d5c4:	13a02001 	movne	r2, #1
  13d5c8:	e5950000 	ldr	r0, [r5]
  13d5cc:	12433010 	subne	r3, r3, #16
  13d5d0:	12846010 	addne	r6, r4, #16
  13d5d4:	15842008 	strne	r2, [r4, #8]
  13d5d8:	158d3024 	strne	r3, [sp, #36]	; 0x24
  13d5dc:	e0862003 	add	r2, r6, r3
  13d5e0:	e3500000 	cmp	r0, #0
  13d5e4:	e1833007 	orr	r3, r3, r7
  13d5e8:	e9020088 	stmdb	r2, {r3, r7}
  13d5ec:	e5812000 	str	r2, [r1]
  13d5f0:	e5063004 	str	r3, [r6, #-4]
  13d5f4:	e2464008 	sub	r4, r6, #8
  13d5f8:	0a000009 	beq	13d624 <malloc+0x30c>
  13d5fc:	e59f3318 	ldr	r3, [pc, #792]	; 13d91c <malloc+0x604>
  13d600:	e593c000 	ldr	ip, [r3]
  13d604:	e12fff3c 	blx	ip
  13d608:	e3a02000 	mov	r2, #0
  13d60c:	e593c000 	ldr	ip, [r3]
  13d610:	e5852000 	str	r2, [r5]
  13d614:	e12fff3c 	blx	ip
  13d618:	e5953004 	ldr	r3, [r5, #4]
  13d61c:	e1530002 	cmp	r3, r2
  13d620:	1a000060 	bne	13d7a8 <malloc+0x490>
  13d624:	e3540000 	cmp	r4, #0
  13d628:	0a000088 	beq	13d850 <malloc+0x538>
  13d62c:	e1a00004 	mov	r0, r4
  13d630:	ebfffcf4 	bl	13ca08 <alloc_rev>
  13d634:	e3500000 	cmp	r0, #0
  13d638:	0a00000b 	beq	13d66c <malloc+0x354>
  13d63c:	e5163008 	ldr	r3, [r6, #-8]
  13d640:	e5161004 	ldr	r1, [r6, #-4]
  13d644:	e3c33001 	bic	r3, r3, #1
  13d648:	e0443003 	sub	r3, r4, r3
  13d64c:	e5932004 	ldr	r2, [r3, #4]
  13d650:	e3c22001 	bic	r2, r2, #1
  13d654:	e0822001 	add	r2, r2, r1
  13d658:	e5832004 	str	r2, [r3, #4]
  13d65c:	e5161004 	ldr	r1, [r6, #-4]
  13d660:	e3c11001 	bic	r1, r1, #1
  13d664:	e7842001 	str	r2, [r4, r1]
  13d668:	e1a04003 	mov	r4, r3
  13d66c:	e1a00004 	mov	r0, r4
  13d670:	e59d101c 	ldr	r1, [sp, #28]
  13d674:	e2844008 	add	r4, r4, #8
  13d678:	ebffff15 	bl	13d2d4 <trim>
  13d67c:	e1a00004 	mov	r0, r4
  13d680:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d684:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d688:	e3570027 	cmp	r7, #39	; 0x27
  13d68c:	da000041 	ble	13d798 <malloc+0x480>
  13d690:	e59d3018 	ldr	r3, [sp, #24]
  13d694:	e59d001c 	ldr	r0, [sp, #28]
  13d698:	e2833002 	add	r3, r3, #2
  13d69c:	e1570003 	cmp	r7, r3
  13d6a0:	da00003a 	ble	13d790 <malloc+0x478>
  13d6a4:	e5942004 	ldr	r2, [r4, #4]
  13d6a8:	e3c22001 	bic	r2, r2, #1
  13d6ac:	e0421000 	sub	r1, r2, r0
  13d6b0:	e1a03221 	lsr	r3, r1, #4
  13d6b4:	e2433001 	sub	r3, r3, #1
  13d6b8:	e3530020 	cmp	r3, #32
  13d6bc:	9a000035 	bls	13d798 <malloc+0x480>
  13d6c0:	e3530c02 	cmp	r3, #512	; 0x200
  13d6c4:	2a000065 	bcs	13d860 <malloc+0x548>
  13d6c8:	e59fc250 	ldr	ip, [pc, #592]	; 13d920 <malloc+0x608>
  13d6cc:	e08c31a3 	add	r3, ip, r3, lsr #3
  13d6d0:	e5533004 	ldrb	r3, [r3, #-4]
  13d6d4:	e1570003 	cmp	r7, r3
  13d6d8:	1a00002e 	bne	13d798 <malloc+0x480>
  13d6dc:	e594c00c 	ldr	ip, [r4, #12]
  13d6e0:	e594e008 	ldr	lr, [r4, #8]
  13d6e4:	e0843000 	add	r3, r4, r0
  13d6e8:	e583c00c 	str	ip, [r3, #12]
  13d6ec:	e583e008 	str	lr, [r3, #8]
  13d6f0:	e58c3008 	str	r3, [ip, #8]
  13d6f4:	e593e008 	ldr	lr, [r3, #8]
  13d6f8:	e380c001 	orr	ip, r0, #1
  13d6fc:	e58e300c 	str	r3, [lr, #12]
  13d700:	e784c000 	str	ip, [r4, r0]
  13d704:	e5831004 	str	r1, [r3, #4]
  13d708:	e7841002 	str	r1, [r4, r2]
  13d70c:	e584c004 	str	ip, [r4, #4]
  13d710:	e5953000 	ldr	r3, [r5]
  13d714:	e3530000 	cmp	r3, #0
  13d718:	0affffd3 	beq	13d66c <malloc+0x354>
  13d71c:	e59f31f8 	ldr	r3, [pc, #504]	; 13d91c <malloc+0x604>
  13d720:	e593c000 	ldr	ip, [r3]
  13d724:	e12fff3c 	blx	ip
  13d728:	e3a02000 	mov	r2, #0
  13d72c:	e593c000 	ldr	ip, [r3]
  13d730:	e5852000 	str	r2, [r5]
  13d734:	e12fff3c 	blx	ip
  13d738:	e5953004 	ldr	r3, [r5, #4]
  13d73c:	e1530002 	cmp	r3, r2
  13d740:	0affffc9 	beq	13d66c <malloc+0x354>
  13d744:	e3a000f0 	mov	r0, #240	; 0xf0
  13d748:	ebfffb0a 	bl	13c378 <get_rtt_syscall>
  13d74c:	e2503000 	subs	r3, r0, #0
  13d750:	0affffc5 	beq	13d66c <malloc+0x354>
  13d754:	e3a02001 	mov	r2, #1
  13d758:	e3a01081 	mov	r1, #129	; 0x81
  13d75c:	e1a00005 	mov	r0, r5
  13d760:	e12fff33 	blx	r3
  13d764:	e3700026 	cmn	r0, #38	; 0x26
  13d768:	1affffbf 	bne	13d66c <malloc+0x354>
  13d76c:	e3a000f0 	mov	r0, #240	; 0xf0
  13d770:	ebfffb00 	bl	13c378 <get_rtt_syscall>
  13d774:	e2503000 	subs	r3, r0, #0
  13d778:	0affffbb 	beq	13d66c <malloc+0x354>
  13d77c:	e3a02001 	mov	r2, #1
  13d780:	e1a00005 	mov	r0, r5
  13d784:	e1a01002 	mov	r1, r2
  13d788:	e12fff33 	blx	r3
  13d78c:	eaffffb6 	b	13d66c <malloc+0x354>
  13d790:	e357003f 	cmp	r7, #63	; 0x3f
  13d794:	0a000038 	beq	13d87c <malloc+0x564>
  13d798:	e1a01007 	mov	r1, r7
  13d79c:	e1a00004 	mov	r0, r4
  13d7a0:	ebfffbae 	bl	13c660 <unbin>
  13d7a4:	eaffffd9 	b	13d710 <malloc+0x3f8>
  13d7a8:	e3a000f0 	mov	r0, #240	; 0xf0
  13d7ac:	ebfffaf1 	bl	13c378 <get_rtt_syscall>
  13d7b0:	e2503000 	subs	r3, r0, #0
  13d7b4:	0affff9a 	beq	13d624 <malloc+0x30c>
  13d7b8:	e1a02007 	mov	r2, r7
  13d7bc:	e3a01081 	mov	r1, #129	; 0x81
  13d7c0:	e59f015c 	ldr	r0, [pc, #348]	; 13d924 <malloc+0x60c>
  13d7c4:	e12fff33 	blx	r3
  13d7c8:	e3700026 	cmn	r0, #38	; 0x26
  13d7cc:	1affff94 	bne	13d624 <malloc+0x30c>
  13d7d0:	e3a000f0 	mov	r0, #240	; 0xf0
  13d7d4:	ebfffae7 	bl	13c378 <get_rtt_syscall>
  13d7d8:	e2503000 	subs	r3, r0, #0
  13d7dc:	0affff90 	beq	13d624 <malloc+0x30c>
  13d7e0:	e1a02007 	mov	r2, r7
  13d7e4:	e1a01007 	mov	r1, r7
  13d7e8:	e59f0134 	ldr	r0, [pc, #308]	; 13d924 <malloc+0x60c>
  13d7ec:	e12fff33 	blx	r3
  13d7f0:	eaffff8b 	b	13d624 <malloc+0x30c>
  13d7f4:	e1a06005 	mov	r6, r5
  13d7f8:	e59f7118 	ldr	r7, [pc, #280]	; 13d918 <malloc+0x600>
  13d7fc:	e2858004 	add	r8, r5, #4
  13d800:	e5954000 	ldr	r4, [r5]
  13d804:	ea000002 	b	13d814 <malloc+0x4fc>
  13d808:	e5953000 	ldr	r3, [r5]
  13d80c:	e1540003 	cmp	r4, r3
  13d810:	1afffffa 	bne	13d800 <malloc+0x4e8>
  13d814:	e1a00004 	mov	r0, r4
  13d818:	e3a01001 	mov	r1, #1
  13d81c:	e1a02006 	mov	r2, r6
  13d820:	e5973000 	ldr	r3, [r7]
  13d824:	e12fff33 	blx	r3
  13d828:	e3500000 	cmp	r0, #0
  13d82c:	1afffff5 	bne	13d808 <malloc+0x4f0>
  13d830:	e3540000 	cmp	r4, #0
  13d834:	0affff59 	beq	13d5a0 <malloc+0x288>
  13d838:	e1a03001 	mov	r3, r1
  13d83c:	e1a02001 	mov	r2, r1
  13d840:	e59f00dc 	ldr	r0, [pc, #220]	; 13d924 <malloc+0x60c>
  13d844:	e1a01008 	mov	r1, r8
  13d848:	eb001133 	bl	141d1c <__wait>
  13d84c:	eaffffeb 	b	13d800 <malloc+0x4e8>
  13d850:	e3a04000 	mov	r4, #0
  13d854:	e1a00004 	mov	r0, r4
  13d858:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d85c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d860:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13d864:	959fc0b4 	ldrls	ip, [pc, #180]	; 13d920 <malloc+0x608>
  13d868:	83a0303f 	movhi	r3, #63	; 0x3f
  13d86c:	908c33a3 	addls	r3, ip, r3, lsr #7
  13d870:	95533004 	ldrbls	r3, [r3, #-4]
  13d874:	92833010 	addls	r3, r3, #16
  13d878:	eaffff95 	b	13d6d4 <malloc+0x3bc>
  13d87c:	e5942004 	ldr	r2, [r4, #4]
  13d880:	e3c22001 	bic	r2, r2, #1
  13d884:	e0421000 	sub	r1, r2, r0
  13d888:	e3510907 	cmp	r1, #114688	; 0x1c000
  13d88c:	8affff87 	bhi	13d6b0 <malloc+0x398>
  13d890:	eaffffc0 	b	13d798 <malloc+0x480>
  13d894:	e5953000 	ldr	r3, [r5]
  13d898:	e3530000 	cmp	r3, #0
  13d89c:	0affffeb 	beq	13d850 <malloc+0x538>
  13d8a0:	e59f3074 	ldr	r3, [pc, #116]	; 13d91c <malloc+0x604>
  13d8a4:	e593c000 	ldr	ip, [r3]
  13d8a8:	e12fff3c 	blx	ip
  13d8ac:	e5854000 	str	r4, [r5]
  13d8b0:	e593c000 	ldr	ip, [r3]
  13d8b4:	e12fff3c 	blx	ip
  13d8b8:	e5953004 	ldr	r3, [r5, #4]
  13d8bc:	e3530000 	cmp	r3, #0
  13d8c0:	0affffe2 	beq	13d850 <malloc+0x538>
  13d8c4:	e3a000f0 	mov	r0, #240	; 0xf0
  13d8c8:	ebfffaaa 	bl	13c378 <get_rtt_syscall>
  13d8cc:	e2503000 	subs	r3, r0, #0
  13d8d0:	0affffde 	beq	13d850 <malloc+0x538>
  13d8d4:	e3a02001 	mov	r2, #1
  13d8d8:	e3a01081 	mov	r1, #129	; 0x81
  13d8dc:	e59f0040 	ldr	r0, [pc, #64]	; 13d924 <malloc+0x60c>
  13d8e0:	e12fff33 	blx	r3
  13d8e4:	e3700026 	cmn	r0, #38	; 0x26
  13d8e8:	1affffd8 	bne	13d850 <malloc+0x538>
  13d8ec:	e3a000f0 	mov	r0, #240	; 0xf0
  13d8f0:	ebfffaa0 	bl	13c378 <get_rtt_syscall>
  13d8f4:	e2503000 	subs	r3, r0, #0
  13d8f8:	0affffd4 	beq	13d850 <malloc+0x538>
  13d8fc:	e3a02001 	mov	r2, #1
  13d900:	e59f001c 	ldr	r0, [pc, #28]	; 13d924 <malloc+0x60c>
  13d904:	e1a01002 	mov	r1, r2
  13d908:	e12fff33 	blx	r3
  13d90c:	eaffff19 	b	13d578 <malloc+0x260>
  13d910:	0014ec58 	.word	0x0014ec58
  13d914:	0015d08c 	.word	0x0015d08c
  13d918:	0014d3d8 	.word	0x0014d3d8
  13d91c:	0014d3d4 	.word	0x0014d3d4
  13d920:	0014cd14 	.word	0x0014cd14
  13d924:	0014ec4c 	.word	0x0014ec4c
  13d928:	0014ec48 	.word	0x0014ec48

0013d92c <calloc>:
  13d92c:	e3510000 	cmp	r1, #0
  13d930:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
  13d934:	0a000002 	beq	13d944 <calloc+0x18>
  13d938:	e0832190 	umull	r2, r3, r0, r1
  13d93c:	e3530000 	cmp	r3, #0
  13d940:	1a000013 	bne	13d994 <calloc+0x68>
  13d944:	e0040190 	mul	r4, r0, r1
  13d948:	e1a00004 	mov	r0, r4
  13d94c:	ebfffe71 	bl	13d318 <malloc>
  13d950:	e2509000 	subs	r9, r0, #0
  13d954:	0a000012 	beq	13d9a4 <calloc+0x78>
  13d958:	e59f30a0 	ldr	r3, [pc, #160]	; 13da00 <calloc+0xd4>
  13d95c:	e5933000 	ldr	r3, [r3]
  13d960:	e3530000 	cmp	r3, #0
  13d964:	1a000005 	bne	13d980 <calloc+0x54>
  13d968:	e5193004 	ldr	r3, [r9, #-4]
  13d96c:	e3130001 	tst	r3, #1
  13d970:	0a00000b 	beq	13d9a4 <calloc+0x78>
  13d974:	e59f3088 	ldr	r3, [pc, #136]	; 13da04 <calloc+0xd8>
  13d978:	e1540003 	cmp	r4, r3
  13d97c:	8a00000a 	bhi	13d9ac <calloc+0x80>
  13d980:	e1a02004 	mov	r2, r4
  13d984:	e1a00009 	mov	r0, r9
  13d988:	e8bd4bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
  13d98c:	e3a01000 	mov	r1, #0
  13d990:	ea000e29 	b	14123c <memset>
  13d994:	ebffed41 	bl	138ea0 <__errno_location>
  13d998:	e3a0300c 	mov	r3, #12
  13d99c:	e3a09000 	mov	r9, #0
  13d9a0:	e5803000 	str	r3, [r0]
  13d9a4:	e1a00009 	mov	r0, r9
  13d9a8:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
  13d9ac:	e1a08003 	mov	r8, r3
  13d9b0:	e0890004 	add	r0, r9, r4
  13d9b4:	e0002003 	and	r2, r0, r3
  13d9b8:	e0400002 	sub	r0, r0, r2
  13d9bc:	e3a01000 	mov	r1, #0
  13d9c0:	eb000e1d 	bl	14123c <memset>
  13d9c4:	e0404009 	sub	r4, r0, r9
  13d9c8:	e1540008 	cmp	r4, r8
  13d9cc:	9affffeb 	bls	13d980 <calloc+0x54>
  13d9d0:	e3a02a01 	mov	r2, #4096	; 0x1000
  13d9d4:	e9100030 	ldmdb	r0, {r4, r5}
  13d9d8:	e2407010 	sub	r7, r0, #16
  13d9dc:	e89700c0 	ldm	r7, {r6, r7}
  13d9e0:	e184b006 	orr	fp, r4, r6
  13d9e4:	e185c007 	orr	ip, r5, r7
  13d9e8:	e19b300c 	orrs	r3, fp, ip
  13d9ec:	1afffff1 	bne	13d9b8 <calloc+0x8c>
  13d9f0:	e2522010 	subs	r2, r2, #16
  13d9f4:	e2400010 	sub	r0, r0, #16
  13d9f8:	1afffff5 	bne	13d9d4 <calloc+0xa8>
  13d9fc:	eaffffed 	b	13d9b8 <calloc+0x8c>
  13da00:	0015d0d0 	.word	0x0015d0d0
  13da04:	00000fff 	.word	0x00000fff

0013da08 <free>:
  13da08:	e2502000 	subs	r2, r0, #0
  13da0c:	012fff1e 	bxeq	lr
  13da10:	e5123004 	ldr	r3, [r2, #-4]
  13da14:	e2420008 	sub	r0, r2, #8
  13da18:	e3130001 	tst	r3, #1
  13da1c:	0a000000 	beq	13da24 <free+0x1c>
  13da20:	eafffc9a 	b	13cc90 <__bin_chunk>
  13da24:	e5121008 	ldr	r1, [r2, #-8]
  13da28:	e3c33001 	bic	r3, r3, #1
  13da2c:	e3110001 	tst	r1, #1
  13da30:	e0400001 	sub	r0, r0, r1
  13da34:	e0831001 	add	r1, r3, r1
  13da38:	0a000000 	beq	13da40 <free+0x38>
  13da3c:	e7f000f0 	.word	0xe7f000f0
  13da40:	ea0000f6 	b	13de20 <__munmap>

0013da44 <realloc>:
  13da44:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13da48:	e2505000 	subs	r5, r0, #0
  13da4c:	e24dd008 	sub	sp, sp, #8
  13da50:	e58d1004 	str	r1, [sp, #4]
  13da54:	0a000034 	beq	13db2c <realloc+0xe8>
  13da58:	e28d0004 	add	r0, sp, #4
  13da5c:	ebfffae5 	bl	13c5f8 <adjust_size>
  13da60:	e3500000 	cmp	r0, #0
  13da64:	ba00005b 	blt	13dbd8 <realloc+0x194>
  13da68:	e5153004 	ldr	r3, [r5, #-4]
  13da6c:	e2459008 	sub	r9, r5, #8
  13da70:	e3130001 	tst	r3, #1
  13da74:	e3c36001 	bic	r6, r3, #1
  13da78:	0a000010 	beq	13dac0 <realloc+0x7c>
  13da7c:	e7992006 	ldr	r2, [r9, r6]
  13da80:	e0894006 	add	r4, r9, r6
  13da84:	e1530002 	cmp	r3, r2
  13da88:	0a000000 	beq	13da90 <realloc+0x4c>
  13da8c:	e7f000f0 	.word	0xe7f000f0
  13da90:	e59d1004 	ldr	r1, [sp, #4]
  13da94:	e1510006 	cmp	r1, r6
  13da98:	93866001 	orrls	r6, r6, #1
  13da9c:	95056004 	strls	r6, [r5, #-4]
  13daa0:	95846000 	strls	r6, [r4]
  13daa4:	8a000038 	bhi	13db8c <realloc+0x148>
  13daa8:	e1a00009 	mov	r0, r9
  13daac:	ebfffe08 	bl	13d2d4 <trim>
  13dab0:	e1a07005 	mov	r7, r5
  13dab4:	e1a00007 	mov	r0, r7
  13dab8:	e28dd008 	add	sp, sp, #8
  13dabc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13dac0:	e5158008 	ldr	r8, [r5, #-8]
  13dac4:	e59d4004 	ldr	r4, [sp, #4]
  13dac8:	e3180001 	tst	r8, #1
  13dacc:	e086a008 	add	sl, r6, r8
  13dad0:	e0884004 	add	r4, r8, r4
  13dad4:	1a00001a 	bne	13db44 <realloc+0x100>
  13dad8:	e3540a01 	cmp	r4, #4096	; 0x1000
  13dadc:	3a00001b 	bcc	13db50 <realloc+0x10c>
  13dae0:	e2844eff 	add	r4, r4, #4080	; 0xff0
  13dae4:	e284400f 	add	r4, r4, #15
  13dae8:	e3c44eff 	bic	r4, r4, #4080	; 0xff0
  13daec:	e3c4400f 	bic	r4, r4, #15
  13daf0:	e15a0004 	cmp	sl, r4
  13daf4:	01a07005 	moveq	r7, r5
  13daf8:	0affffed 	beq	13dab4 <realloc+0x70>
  13dafc:	e1a0100a 	mov	r1, sl
  13db00:	e0490008 	sub	r0, r9, r8
  13db04:	e3a03001 	mov	r3, #1
  13db08:	e1a02004 	mov	r2, r4
  13db0c:	eb00009a 	bl	13dd7c <__mremap>
  13db10:	e3700001 	cmn	r0, #1
  13db14:	0a000031 	beq	13dbe0 <realloc+0x19c>
  13db18:	e0800008 	add	r0, r0, r8
  13db1c:	e0444008 	sub	r4, r4, r8
  13db20:	e5804004 	str	r4, [r0, #4]
  13db24:	e2807008 	add	r7, r0, #8
  13db28:	eaffffe1 	b	13dab4 <realloc+0x70>
  13db2c:	e1a00001 	mov	r0, r1
  13db30:	ebfffdf8 	bl	13d318 <malloc>
  13db34:	e1a07000 	mov	r7, r0
  13db38:	e1a00007 	mov	r0, r7
  13db3c:	e28dd008 	add	sp, sp, #8
  13db40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13db44:	e7f000f0 	.word	0xe7f000f0
  13db48:	e3540a01 	cmp	r4, #4096	; 0x1000
  13db4c:	2affffe3 	bcs	13dae0 <realloc+0x9c>
  13db50:	e59d0004 	ldr	r0, [sp, #4]
  13db54:	e2400008 	sub	r0, r0, #8
  13db58:	ebfffdee 	bl	13d318 <malloc>
  13db5c:	e2507000 	subs	r7, r0, #0
  13db60:	0affffde 	beq	13dae0 <realloc+0x9c>
  13db64:	e59d6004 	ldr	r6, [sp, #4]
  13db68:	e2462008 	sub	r2, r6, #8
  13db6c:	e1a01005 	mov	r1, r5
  13db70:	e1a00007 	mov	r0, r7
  13db74:	eb000c78 	bl	140d5c <memcpy>
  13db78:	e1a00005 	mov	r0, r5
  13db7c:	ebffffa1 	bl	13da08 <free>
  13db80:	e1a00007 	mov	r0, r7
  13db84:	e28dd008 	add	sp, sp, #8
  13db88:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13db8c:	e1a00004 	mov	r0, r4
  13db90:	ebfffafc 	bl	13c788 <alloc_fwd>
  13db94:	e3500000 	cmp	r0, #0
  13db98:	01a03006 	moveq	r3, r6
  13db9c:	15943004 	ldrne	r3, [r4, #4]
  13dba0:	059d1004 	ldreq	r1, [sp, #4]
  13dba4:	13c33001 	bicne	r3, r3, #1
  13dba8:	159d1004 	ldrne	r1, [sp, #4]
  13dbac:	10844003 	addne	r4, r4, r3
  13dbb0:	10833006 	addne	r3, r3, r6
  13dbb4:	e1530001 	cmp	r3, r1
  13dbb8:	e3833001 	orr	r3, r3, #1
  13dbbc:	e5053004 	str	r3, [r5, #-4]
  13dbc0:	e5843000 	str	r3, [r4]
  13dbc4:	2affffb7 	bcs	13daa8 <realloc+0x64>
  13dbc8:	e2410008 	sub	r0, r1, #8
  13dbcc:	ebfffdd1 	bl	13d318 <malloc>
  13dbd0:	e2507000 	subs	r7, r0, #0
  13dbd4:	1affffe3 	bne	13db68 <realloc+0x124>
  13dbd8:	e3a07000 	mov	r7, #0
  13dbdc:	eaffffb4 	b	13dab4 <realloc+0x70>
  13dbe0:	e59d1004 	ldr	r1, [sp, #4]
  13dbe4:	eafffff7 	b	13dbc8 <realloc+0x184>

0013dbe8 <__malloc_donate>:
  13dbe8:	e2602008 	rsb	r2, r0, #8
  13dbec:	e201300f 	and	r3, r1, #15
  13dbf0:	e202200f 	and	r2, r2, #15
  13dbf4:	e2833008 	add	r3, r3, #8
  13dbf8:	e0833002 	add	r3, r3, r2
  13dbfc:	e041c000 	sub	ip, r1, r0
  13dc00:	e15c0003 	cmp	ip, r3
  13dc04:	912fff1e 	bxls	lr
  13dc08:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13dc0c:	e3a0e001 	mov	lr, #1
  13dc10:	e2823008 	add	r3, r2, #8
  13dc14:	e0803003 	add	r3, r0, r3
  13dc18:	e3c1100f 	bic	r1, r1, #15
  13dc1c:	e041c003 	sub	ip, r1, r3
  13dc20:	e18cc00e 	orr	ip, ip, lr
  13dc24:	e501e004 	str	lr, [r1, #-4]
  13dc28:	e0800002 	add	r0, r0, r2
  13dc2c:	e503e008 	str	lr, [r3, #-8]
  13dc30:	e501c008 	str	ip, [r1, #-8]
  13dc34:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13dc38:	e503c004 	str	ip, [r3, #-4]
  13dc3c:	eafffc13 	b	13cc90 <__bin_chunk>

0013dc40 <__madvise>:
  13dc40:	e92d4070 	push	{r4, r5, r6, lr}
  13dc44:	e1a04000 	mov	r4, r0
  13dc48:	e3a000dc 	mov	r0, #220	; 0xdc
  13dc4c:	e1a05001 	mov	r5, r1
  13dc50:	e1a06002 	mov	r6, r2
  13dc54:	ebfff9c7 	bl	13c378 <get_rtt_syscall>
  13dc58:	e2503000 	subs	r3, r0, #0
  13dc5c:	0a000005 	beq	13dc78 <__madvise+0x38>
  13dc60:	e1a02006 	mov	r2, r6
  13dc64:	e1a01005 	mov	r1, r5
  13dc68:	e1a00004 	mov	r0, r4
  13dc6c:	e12fff33 	blx	r3
  13dc70:	e8bd4070 	pop	{r4, r5, r6, lr}
  13dc74:	eafff9f4 	b	13c44c <__syscall_ret>
  13dc78:	e1a00003 	mov	r0, r3
  13dc7c:	eafffffb 	b	13dc70 <__madvise+0x30>

0013dc80 <dummy>:
  13dc80:	e12fff1e 	bx	lr
  13dc84:	00000000 	andeq	r0, r0, r0

0013dc88 <__mmap>:
  13dc88:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13dc8c:	e28f50dc 	add	r5, pc, #220	; 0xdc
  13dc90:	e8950030 	ldm	r5, {r4, r5}
  13dc94:	e24dd00c 	sub	sp, sp, #12
  13dc98:	e28d7038 	add	r7, sp, #56	; 0x38
  13dc9c:	e89700c0 	ldm	r7, {r6, r7}
  13dca0:	e0048006 	and	r8, r4, r6
  13dca4:	e0059007 	and	r9, r5, r7
  13dca8:	e198c009 	orrs	ip, r8, r9
  13dcac:	e59db030 	ldr	fp, [sp, #48]	; 0x30
  13dcb0:	1a000024 	bne	13dd48 <__mmap+0xc0>
  13dcb4:	e371010a 	cmn	r1, #-2147483646	; 0x80000002
  13dcb8:	e1a08001 	mov	r8, r1
  13dcbc:	8a00001b 	bhi	13dd30 <__mmap+0xa8>
  13dcc0:	e3130010 	tst	r3, #16
  13dcc4:	e1a09000 	mov	r9, r0
  13dcc8:	e1a0a002 	mov	sl, r2
  13dccc:	e1a05003 	mov	r5, r3
  13dcd0:	1a000022 	bne	13dd60 <__mmap+0xd8>
  13dcd4:	e3a000c0 	mov	r0, #192	; 0xc0
  13dcd8:	ebfff9a6 	bl	13c378 <get_rtt_syscall>
  13dcdc:	e1a03626 	lsr	r3, r6, #12
  13dce0:	e2504000 	subs	r4, r0, #0
  13dce4:	e1833a07 	orr	r3, r3, r7, lsl #20
  13dce8:	0a00001e 	beq	13dd68 <__mmap+0xe0>
  13dcec:	e58d3004 	str	r3, [sp, #4]
  13dcf0:	e58db000 	str	fp, [sp]
  13dcf4:	e1a0200a 	mov	r2, sl
  13dcf8:	e1a01008 	mov	r1, r8
  13dcfc:	e1a03005 	mov	r3, r5
  13dd00:	e1a00009 	mov	r0, r9
  13dd04:	e12fff34 	blx	r4
  13dd08:	e3590000 	cmp	r9, #0
  13dd0c:	03700001 	cmneq	r0, #1
  13dd10:	1a000003 	bne	13dd24 <__mmap+0x9c>
  13dd14:	e2055030 	and	r5, r5, #48	; 0x30
  13dd18:	e3550020 	cmp	r5, #32
  13dd1c:	03e0000b 	mvneq	r0, #11
  13dd20:	13e00000 	mvnne	r0, #0
  13dd24:	e28dd00c 	add	sp, sp, #12
  13dd28:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13dd2c:	eafff9c6 	b	13c44c <__syscall_ret>
  13dd30:	ebffec5a 	bl	138ea0 <__errno_location>
  13dd34:	e3a0300c 	mov	r3, #12
  13dd38:	e5803000 	str	r3, [r0]
  13dd3c:	e3e00000 	mvn	r0, #0
  13dd40:	e28dd00c 	add	sp, sp, #12
  13dd44:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13dd48:	ebffec54 	bl	138ea0 <__errno_location>
  13dd4c:	e3a03016 	mov	r3, #22
  13dd50:	e5803000 	str	r3, [r0]
  13dd54:	e3e00000 	mvn	r0, #0
  13dd58:	e28dd00c 	add	sp, sp, #12
  13dd5c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13dd60:	eb00139d 	bl	142bdc <__vm_wait>
  13dd64:	eaffffda 	b	13dcd4 <__mmap+0x4c>
  13dd68:	e1a00004 	mov	r0, r4
  13dd6c:	eaffffec 	b	13dd24 <__mmap+0x9c>
  13dd70:	00000fff 	.word	0x00000fff
  13dd74:	fffff000 	.word	0xfffff000

0013dd78 <dummy>:
  13dd78:	e12fff1e 	bx	lr

0013dd7c <__mremap>:
  13dd7c:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
  13dd80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13dd84:	e372010a 	cmn	r2, #-2147483646	; 0x80000002
  13dd88:	e24dd014 	sub	sp, sp, #20
  13dd8c:	8a00001b 	bhi	13de00 <__mremap+0x84>
  13dd90:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13dd94:	e1a05002 	mov	r5, r2
  13dd98:	e2136002 	ands	r6, r3, #2
  13dd9c:	e1a07000 	mov	r7, r0
  13dda0:	e1a08001 	mov	r8, r1
  13dda4:	1a000010 	bne	13ddec <__mremap+0x70>
  13dda8:	e3a000a3 	mov	r0, #163	; 0xa3
  13ddac:	ebfff971 	bl	13c378 <get_rtt_syscall>
  13ddb0:	e2504000 	subs	r4, r0, #0
  13ddb4:	0a000016 	beq	13de14 <__mremap+0x98>
  13ddb8:	e58d6000 	str	r6, [sp]
  13ddbc:	e1a02005 	mov	r2, r5
  13ddc0:	e1a01008 	mov	r1, r8
  13ddc4:	e1a00007 	mov	r0, r7
  13ddc8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13ddcc:	e12fff34 	blx	r4
  13ddd0:	ebfff99d 	bl	13c44c <__syscall_ret>
  13ddd4:	e1a03000 	mov	r3, r0
  13ddd8:	e1a00003 	mov	r0, r3
  13dddc:	e28dd014 	add	sp, sp, #20
  13dde0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  13dde4:	e28dd004 	add	sp, sp, #4
  13dde8:	e12fff1e 	bx	lr
  13ddec:	eb00137a 	bl	142bdc <__vm_wait>
  13ddf0:	e28d3030 	add	r3, sp, #48	; 0x30
  13ddf4:	e58d300c 	str	r3, [sp, #12]
  13ddf8:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
  13ddfc:	eaffffe9 	b	13dda8 <__mremap+0x2c>
  13de00:	ebffec26 	bl	138ea0 <__errno_location>
  13de04:	e3a0200c 	mov	r2, #12
  13de08:	e3e03000 	mvn	r3, #0
  13de0c:	e5802000 	str	r2, [r0]
  13de10:	eafffff0 	b	13ddd8 <__mremap+0x5c>
  13de14:	e1a00004 	mov	r0, r4
  13de18:	eaffffec 	b	13ddd0 <__mremap+0x54>

0013de1c <dummy>:
  13de1c:	e12fff1e 	bx	lr

0013de20 <__munmap>:
  13de20:	e92d4070 	push	{r4, r5, r6, lr}
  13de24:	e1a04000 	mov	r4, r0
  13de28:	e1a05001 	mov	r5, r1
  13de2c:	eb00136a 	bl	142bdc <__vm_wait>
  13de30:	e3a0005b 	mov	r0, #91	; 0x5b
  13de34:	ebfff94f 	bl	13c378 <get_rtt_syscall>
  13de38:	e2503000 	subs	r3, r0, #0
  13de3c:	0a000004 	beq	13de54 <__munmap+0x34>
  13de40:	e1a01005 	mov	r1, r5
  13de44:	e1a00004 	mov	r0, r4
  13de48:	e12fff33 	blx	r3
  13de4c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13de50:	eafff97d 	b	13c44c <__syscall_ret>
  13de54:	e1a00003 	mov	r0, r3
  13de58:	eafffffb 	b	13de4c <__munmap+0x2c>

0013de5c <accept>:
  13de5c:	e3a0c000 	mov	ip, #0
  13de60:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13de64:	e24dd014 	sub	sp, sp, #20
  13de68:	e1a03002 	mov	r3, r2
  13de6c:	e58dc008 	str	ip, [sp, #8]
  13de70:	e1a02001 	mov	r2, r1
  13de74:	e58dc004 	str	ip, [sp, #4]
  13de78:	e1a01000 	mov	r1, r0
  13de7c:	e58dc000 	str	ip, [sp]
  13de80:	e59f000c 	ldr	r0, [pc, #12]	; 13de94 <accept+0x38>
  13de84:	eb000fa3 	bl	141d18 <__syscall_cp>
  13de88:	e28dd014 	add	sp, sp, #20
  13de8c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13de90:	eafff96d 	b	13c44c <__syscall_ret>
  13de94:	0000011d 	.word	0x0000011d

0013de98 <bind>:
  13de98:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13de9c:	e1a05000 	mov	r5, r0
  13dea0:	e24dd00c 	sub	sp, sp, #12
  13dea4:	e59f0040 	ldr	r0, [pc, #64]	; 13deec <bind+0x54>
  13dea8:	e1a06001 	mov	r6, r1
  13deac:	e1a07002 	mov	r7, r2
  13deb0:	ebfff930 	bl	13c378 <get_rtt_syscall>
  13deb4:	e2504000 	subs	r4, r0, #0
  13deb8:	0a000009 	beq	13dee4 <bind+0x4c>
  13debc:	e3a03000 	mov	r3, #0
  13dec0:	e1a02007 	mov	r2, r7
  13dec4:	e1a01006 	mov	r1, r6
  13dec8:	e1a00005 	mov	r0, r5
  13decc:	e58d3004 	str	r3, [sp, #4]
  13ded0:	e58d3000 	str	r3, [sp]
  13ded4:	e12fff34 	blx	r4
  13ded8:	e28dd00c 	add	sp, sp, #12
  13dedc:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13dee0:	eafff959 	b	13c44c <__syscall_ret>
  13dee4:	e1a00004 	mov	r0, r4
  13dee8:	eafffffa 	b	13ded8 <bind+0x40>
  13deec:	0000011a 	.word	0x0000011a

0013def0 <connect>:
  13def0:	e3a0c000 	mov	ip, #0
  13def4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13def8:	e24dd014 	sub	sp, sp, #20
  13defc:	e1a03002 	mov	r3, r2
  13df00:	e58dc008 	str	ip, [sp, #8]
  13df04:	e1a02001 	mov	r2, r1
  13df08:	e58dc004 	str	ip, [sp, #4]
  13df0c:	e1a01000 	mov	r1, r0
  13df10:	e58dc000 	str	ip, [sp]
  13df14:	e59f000c 	ldr	r0, [pc, #12]	; 13df28 <connect+0x38>
  13df18:	eb000f7e 	bl	141d18 <__syscall_cp>
  13df1c:	e28dd014 	add	sp, sp, #20
  13df20:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13df24:	eafff948 	b	13c44c <__syscall_ret>
  13df28:	0000011b 	.word	0x0000011b

0013df2c <htonl>:
  13df2c:	e0203860 	eor	r3, r0, r0, ror #16
  13df30:	e1a03423 	lsr	r3, r3, #8
  13df34:	e3c33cff 	bic	r3, r3, #65280	; 0xff00
  13df38:	e0230460 	eor	r0, r3, r0, ror #8
  13df3c:	e12fff1e 	bx	lr

0013df40 <htons>:
  13df40:	e1a03420 	lsr	r3, r0, #8
  13df44:	e1830400 	orr	r0, r3, r0, lsl #8
  13df48:	e1a00800 	lsl	r0, r0, #16
  13df4c:	e1a00820 	lsr	r0, r0, #16
  13df50:	e12fff1e 	bx	lr

0013df54 <listen>:
  13df54:	e92d4070 	push	{r4, r5, r6, lr}
  13df58:	e1a05000 	mov	r5, r0
  13df5c:	e24dd008 	sub	sp, sp, #8
  13df60:	e3a00f47 	mov	r0, #284	; 0x11c
  13df64:	e1a06001 	mov	r6, r1
  13df68:	ebfff902 	bl	13c378 <get_rtt_syscall>
  13df6c:	e2504000 	subs	r4, r0, #0
  13df70:	0a000009 	beq	13df9c <listen+0x48>
  13df74:	e3a03000 	mov	r3, #0
  13df78:	e1a01006 	mov	r1, r6
  13df7c:	e1a00005 	mov	r0, r5
  13df80:	e58d3004 	str	r3, [sp, #4]
  13df84:	e58d3000 	str	r3, [sp]
  13df88:	e1a02003 	mov	r2, r3
  13df8c:	e12fff34 	blx	r4
  13df90:	e28dd008 	add	sp, sp, #8
  13df94:	e8bd4070 	pop	{r4, r5, r6, lr}
  13df98:	eafff92b 	b	13c44c <__syscall_ret>
  13df9c:	e1a00004 	mov	r0, r4
  13dfa0:	eafffffa 	b	13df90 <listen+0x3c>

0013dfa4 <setsockopt>:
  13dfa4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13dfa8:	e1a05000 	mov	r5, r0
  13dfac:	e24dd00c 	sub	sp, sp, #12
  13dfb0:	e59f004c 	ldr	r0, [pc, #76]	; 13e004 <setsockopt+0x60>
  13dfb4:	e1a06001 	mov	r6, r1
  13dfb8:	e1a07002 	mov	r7, r2
  13dfbc:	e1a08003 	mov	r8, r3
  13dfc0:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
  13dfc4:	ebfff8eb 	bl	13c378 <get_rtt_syscall>
  13dfc8:	e2504000 	subs	r4, r0, #0
  13dfcc:	0a00000a 	beq	13dffc <setsockopt+0x58>
  13dfd0:	e3a0c000 	mov	ip, #0
  13dfd4:	e58d9000 	str	r9, [sp]
  13dfd8:	e1a03008 	mov	r3, r8
  13dfdc:	e1a02007 	mov	r2, r7
  13dfe0:	e1a01006 	mov	r1, r6
  13dfe4:	e1a00005 	mov	r0, r5
  13dfe8:	e58dc004 	str	ip, [sp, #4]
  13dfec:	e12fff34 	blx	r4
  13dff0:	e28dd00c 	add	sp, sp, #12
  13dff4:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
  13dff8:	eafff913 	b	13c44c <__syscall_ret>
  13dffc:	e1a00004 	mov	r0, r4
  13e000:	eafffffa 	b	13dff0 <setsockopt+0x4c>
  13e004:	00000126 	.word	0x00000126

0013e008 <socket>:
  13e008:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13e00c:	e1a06000 	mov	r6, r0
  13e010:	e24dd00c 	sub	sp, sp, #12
  13e014:	e59f0118 	ldr	r0, [pc, #280]	; 13e134 <socket+0x12c>
  13e018:	e1a05001 	mov	r5, r1
  13e01c:	e1a07002 	mov	r7, r2
  13e020:	ebfff8d4 	bl	13c378 <get_rtt_syscall>
  13e024:	e2504000 	subs	r4, r0, #0
  13e028:	0a000034 	beq	13e100 <socket+0xf8>
  13e02c:	e3a03000 	mov	r3, #0
  13e030:	e1a02007 	mov	r2, r7
  13e034:	e58d3004 	str	r3, [sp, #4]
  13e038:	e58d3000 	str	r3, [sp]
  13e03c:	e1a01005 	mov	r1, r5
  13e040:	e1a00006 	mov	r0, r6
  13e044:	e12fff34 	blx	r4
  13e048:	ebfff8ff 	bl	13c44c <__syscall_ret>
  13e04c:	e2504000 	subs	r4, r0, #0
  13e050:	ba000002 	blt	13e060 <socket+0x58>
  13e054:	e1a00004 	mov	r0, r4
  13e058:	e28dd00c 	add	sp, sp, #12
  13e05c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13e060:	ebffeb8e 	bl	138ea0 <__errno_location>
  13e064:	e5903000 	ldr	r3, [r0]
  13e068:	e3530016 	cmp	r3, #22
  13e06c:	1a00001e 	bne	13e0ec <socket+0xe4>
  13e070:	e59f30c0 	ldr	r3, [pc, #192]	; 13e138 <socket+0x130>
  13e074:	e1150003 	tst	r5, r3
  13e078:	0afffff5 	beq	13e054 <socket+0x4c>
  13e07c:	e59f00b0 	ldr	r0, [pc, #176]	; 13e134 <socket+0x12c>
  13e080:	ebfff8bc 	bl	13c378 <get_rtt_syscall>
  13e084:	e3c51702 	bic	r1, r5, #524288	; 0x80000
  13e088:	e2504000 	subs	r4, r0, #0
  13e08c:	e3c11b02 	bic	r1, r1, #2048	; 0x800
  13e090:	0a000025 	beq	13e12c <socket+0x124>
  13e094:	e3a03000 	mov	r3, #0
  13e098:	e1a02007 	mov	r2, r7
  13e09c:	e1a00006 	mov	r0, r6
  13e0a0:	e58d3004 	str	r3, [sp, #4]
  13e0a4:	e58d3000 	str	r3, [sp]
  13e0a8:	e12fff34 	blx	r4
  13e0ac:	ebfff8e6 	bl	13c44c <__syscall_ret>
  13e0b0:	e2504000 	subs	r4, r0, #0
  13e0b4:	baffffe6 	blt	13e054 <socket+0x4c>
  13e0b8:	e3150702 	tst	r5, #524288	; 0x80000
  13e0bc:	1a000011 	bne	13e108 <socket+0x100>
  13e0c0:	e3150b02 	tst	r5, #2048	; 0x800
  13e0c4:	0affffe2 	beq	13e054 <socket+0x4c>
  13e0c8:	e3a000dd 	mov	r0, #221	; 0xdd
  13e0cc:	ebfff8a9 	bl	13c378 <get_rtt_syscall>
  13e0d0:	e2503000 	subs	r3, r0, #0
  13e0d4:	0affffde 	beq	13e054 <socket+0x4c>
  13e0d8:	e3a02b02 	mov	r2, #2048	; 0x800
  13e0dc:	e3a01004 	mov	r1, #4
  13e0e0:	e1a00004 	mov	r0, r4
  13e0e4:	e12fff33 	blx	r3
  13e0e8:	eaffffd9 	b	13e054 <socket+0x4c>
  13e0ec:	ebffeb6b 	bl	138ea0 <__errno_location>
  13e0f0:	e5903000 	ldr	r3, [r0]
  13e0f4:	e353005d 	cmp	r3, #93	; 0x5d
  13e0f8:	1affffd5 	bne	13e054 <socket+0x4c>
  13e0fc:	eaffffdb 	b	13e070 <socket+0x68>
  13e100:	e1a00004 	mov	r0, r4
  13e104:	eaffffcf 	b	13e048 <socket+0x40>
  13e108:	e3a000dd 	mov	r0, #221	; 0xdd
  13e10c:	ebfff899 	bl	13c378 <get_rtt_syscall>
  13e110:	e2503000 	subs	r3, r0, #0
  13e114:	0affffe9 	beq	13e0c0 <socket+0xb8>
  13e118:	e3a02001 	mov	r2, #1
  13e11c:	e3a01002 	mov	r1, #2
  13e120:	e1a00004 	mov	r0, r4
  13e124:	e12fff33 	blx	r3
  13e128:	eaffffe4 	b	13e0c0 <socket+0xb8>
  13e12c:	e1a00004 	mov	r0, r4
  13e130:	eaffffdd 	b	13e0ac <socket+0xa4>
  13e134:	00000119 	.word	0x00000119
  13e138:	00080800 	.word	0x00080800

0013e13c <srand>:
  13e13c:	e3a02000 	mov	r2, #0
  13e140:	e59f3008 	ldr	r3, [pc, #8]	; 13e150 <srand+0x14>
  13e144:	e2400001 	sub	r0, r0, #1
  13e148:	e8830005 	stm	r3, {r0, r2}
  13e14c:	e12fff1e 	bx	lr
  13e150:	0014f068 	.word	0x0014f068

0013e154 <rand>:
  13e154:	e59f1034 	ldr	r1, [pc, #52]	; 13e190 <rand+0x3c>
  13e158:	e92d4800 	push	{fp, lr}
  13e15c:	e59f3030 	ldr	r3, [pc, #48]	; 13e194 <rand+0x40>
  13e160:	e591e000 	ldr	lr, [r1]
  13e164:	e5912004 	ldr	r2, [r1, #4]
  13e168:	e00b039e 	mul	fp, lr, r3
  13e16c:	e59fc024 	ldr	ip, [pc, #36]	; 13e198 <rand+0x44>
  13e170:	e020b29c 	mla	r0, ip, r2, fp
  13e174:	e0832c9e 	umull	r2, r3, lr, ip
  13e178:	e0803003 	add	r3, r0, r3
  13e17c:	e292b001 	adds	fp, r2, #1
  13e180:	e2a3c000 	adc	ip, r3, #0
  13e184:	e8811800 	stm	r1, {fp, ip}
  13e188:	e1a000ac 	lsr	r0, ip, #1
  13e18c:	e8bd8800 	pop	{fp, pc}
  13e190:	0014f068 	.word	0x0014f068
  13e194:	5851f42d 	.word	0x5851f42d
  13e198:	4c957f2d 	.word	0x4c957f2d

0013e19c <select>:
  13e19c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e1a0:	e3a0e000 	mov	lr, #0
  13e1a4:	e24dd014 	sub	sp, sp, #20
  13e1a8:	e59dc018 	ldr	ip, [sp, #24]
  13e1ac:	e58d3000 	str	r3, [sp]
  13e1b0:	e58de008 	str	lr, [sp, #8]
  13e1b4:	e1a03002 	mov	r3, r2
  13e1b8:	e58dc004 	str	ip, [sp, #4]
  13e1bc:	e1a02001 	mov	r2, r1
  13e1c0:	e1a01000 	mov	r1, r0
  13e1c4:	e3a0008e 	mov	r0, #142	; 0x8e
  13e1c8:	eb000ed2 	bl	141d18 <__syscall_cp>
  13e1cc:	e28dd014 	add	sp, sp, #20
  13e1d0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e1d4:	eafff89c 	b	13c44c <__syscall_ret>

0013e1d8 <raise>:
  13e1d8:	e92d4030 	push	{r4, r5, lr}
  13e1dc:	e24dd084 	sub	sp, sp, #132	; 0x84
  13e1e0:	e1a05000 	mov	r5, r0
  13e1e4:	e1a0000d 	mov	r0, sp
  13e1e8:	eb001496 	bl	143448 <__block_app_sigs>
  13e1ec:	e59f3048 	ldr	r3, [pc, #72]	; 13e23c <raise+0x64>
  13e1f0:	e5930000 	ldr	r0, [r3]
  13e1f4:	e12fff30 	blx	r0
  13e1f8:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  13e1fc:	e3a000ee 	mov	r0, #238	; 0xee
  13e200:	ebfff85c 	bl	13c378 <get_rtt_syscall>
  13e204:	e2503000 	subs	r3, r0, #0
  13e208:	0a000009 	beq	13e234 <raise+0x5c>
  13e20c:	e1a01005 	mov	r1, r5
  13e210:	e1a00004 	mov	r0, r4
  13e214:	e12fff33 	blx	r3
  13e218:	ebfff88b 	bl	13c44c <__syscall_ret>
  13e21c:	e1a04000 	mov	r4, r0
  13e220:	e1a0000d 	mov	r0, sp
  13e224:	eb001495 	bl	143480 <__restore_sigs>
  13e228:	e1a00004 	mov	r0, r4
  13e22c:	e28dd084 	add	sp, sp, #132	; 0x84
  13e230:	e8bd8030 	pop	{r4, r5, pc}
  13e234:	e1a00003 	mov	r0, r3
  13e238:	eafffff6 	b	13e218 <raise+0x40>
  13e23c:	0014d3dc 	.word	0x0014d3dc

0013e240 <fflush>:
  13e240:	e92d4070 	push	{r4, r5, r6, lr}
  13e244:	e2504000 	subs	r4, r0, #0
  13e248:	e24dd008 	sub	sp, sp, #8
  13e24c:	0a000027 	beq	13e2f0 <fflush+0xb0>
  13e250:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e254:	e3530000 	cmp	r3, #0
  13e258:	b3a05000 	movlt	r5, #0
  13e25c:	aa000020 	bge	13e2e4 <fflush+0xa4>
  13e260:	e5942014 	ldr	r2, [r4, #20]
  13e264:	e594301c 	ldr	r3, [r4, #28]
  13e268:	e1520003 	cmp	r2, r3
  13e26c:	0a000007 	beq	13e290 <fflush+0x50>
  13e270:	e3a02000 	mov	r2, #0
  13e274:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  13e278:	e1a01002 	mov	r1, r2
  13e27c:	e1a00004 	mov	r0, r4
  13e280:	e12fff33 	blx	r3
  13e284:	e5943014 	ldr	r3, [r4, #20]
  13e288:	e3530000 	cmp	r3, #0
  13e28c:	0a00003d 	beq	13e388 <fflush+0x148>
  13e290:	e994000c 	ldmib	r4, {r2, r3}
  13e294:	e1520003 	cmp	r2, r3
  13e298:	0a000006 	beq	13e2b8 <fflush+0x78>
  13e29c:	e3a01001 	mov	r1, #1
  13e2a0:	e0422003 	sub	r2, r2, r3
  13e2a4:	e58d1000 	str	r1, [sp]
  13e2a8:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  13e2ac:	e1a03fc2 	asr	r3, r2, #31
  13e2b0:	e1a00004 	mov	r0, r4
  13e2b4:	e12fff31 	blx	r1
  13e2b8:	e3a06000 	mov	r6, #0
  13e2bc:	e1550006 	cmp	r5, r6
  13e2c0:	e5846010 	str	r6, [r4, #16]
  13e2c4:	e584601c 	str	r6, [r4, #28]
  13e2c8:	e5846014 	str	r6, [r4, #20]
  13e2cc:	e5846008 	str	r6, [r4, #8]
  13e2d0:	e5846004 	str	r6, [r4, #4]
  13e2d4:	1a000032 	bne	13e3a4 <fflush+0x164>
  13e2d8:	e1a00005 	mov	r0, r5
  13e2dc:	e28dd008 	add	sp, sp, #8
  13e2e0:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e2e4:	eb001472 	bl	1434b4 <__lockfile>
  13e2e8:	e1a05000 	mov	r5, r0
  13e2ec:	eaffffdb 	b	13e260 <fflush+0x20>
  13e2f0:	e59f3104 	ldr	r3, [pc, #260]	; 13e3fc <fflush+0x1bc>
  13e2f4:	e5935000 	ldr	r5, [r3]
  13e2f8:	e3550000 	cmp	r5, #0
  13e2fc:	1a00003a 	bne	13e3ec <fflush+0x1ac>
  13e300:	e59f30f8 	ldr	r3, [pc, #248]	; 13e400 <fflush+0x1c0>
  13e304:	e5932000 	ldr	r2, [r3]
  13e308:	e3520000 	cmp	r2, #0
  13e30c:	1a000032 	bne	13e3dc <fflush+0x19c>
  13e310:	eb000047 	bl	13e434 <__ofl_lock>
  13e314:	e5904000 	ldr	r4, [r0]
  13e318:	e3540000 	cmp	r4, #0
  13e31c:	0a000009 	beq	13e348 <fflush+0x108>
  13e320:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e324:	e3530000 	cmp	r3, #0
  13e328:	aa00000a 	bge	13e358 <fflush+0x118>
  13e32c:	e5942014 	ldr	r2, [r4, #20]
  13e330:	e594301c 	ldr	r3, [r4, #28]
  13e334:	e1520003 	cmp	r2, r3
  13e338:	1a00001f 	bne	13e3bc <fflush+0x17c>
  13e33c:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  13e340:	e3540000 	cmp	r4, #0
  13e344:	1afffff5 	bne	13e320 <fflush+0xe0>
  13e348:	eb000040 	bl	13e450 <__ofl_unlock>
  13e34c:	e1a00005 	mov	r0, r5
  13e350:	e28dd008 	add	sp, sp, #8
  13e354:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e358:	e1a00004 	mov	r0, r4
  13e35c:	eb001454 	bl	1434b4 <__lockfile>
  13e360:	e5942014 	ldr	r2, [r4, #20]
  13e364:	e594301c 	ldr	r3, [r4, #28]
  13e368:	e1a06000 	mov	r6, r0
  13e36c:	e1520003 	cmp	r2, r3
  13e370:	1a000015 	bne	13e3cc <fflush+0x18c>
  13e374:	e3560000 	cmp	r6, #0
  13e378:	0affffef 	beq	13e33c <fflush+0xfc>
  13e37c:	e1a00004 	mov	r0, r4
  13e380:	eb001498 	bl	1435e8 <__unlockfile>
  13e384:	eaffffec 	b	13e33c <fflush+0xfc>
  13e388:	e3550000 	cmp	r5, #0
  13e38c:	03e05000 	mvneq	r5, #0
  13e390:	0affffd0 	beq	13e2d8 <fflush+0x98>
  13e394:	e1a00004 	mov	r0, r4
  13e398:	eb001492 	bl	1435e8 <__unlockfile>
  13e39c:	e3e05000 	mvn	r5, #0
  13e3a0:	eaffffcc 	b	13e2d8 <fflush+0x98>
  13e3a4:	e1a05006 	mov	r5, r6
  13e3a8:	e1a00004 	mov	r0, r4
  13e3ac:	eb00148d 	bl	1435e8 <__unlockfile>
  13e3b0:	e1a00005 	mov	r0, r5
  13e3b4:	e28dd008 	add	sp, sp, #8
  13e3b8:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e3bc:	e1a00004 	mov	r0, r4
  13e3c0:	ebffff9e 	bl	13e240 <fflush>
  13e3c4:	e1855000 	orr	r5, r5, r0
  13e3c8:	eaffffdb 	b	13e33c <fflush+0xfc>
  13e3cc:	e1a00004 	mov	r0, r4
  13e3d0:	ebffff9a 	bl	13e240 <fflush>
  13e3d4:	e1855000 	orr	r5, r5, r0
  13e3d8:	eaffffe5 	b	13e374 <fflush+0x134>
  13e3dc:	e5930000 	ldr	r0, [r3]
  13e3e0:	ebffff96 	bl	13e240 <fflush>
  13e3e4:	e1855000 	orr	r5, r5, r0
  13e3e8:	eaffffc8 	b	13e310 <fflush+0xd0>
  13e3ec:	e5930000 	ldr	r0, [r3]
  13e3f0:	ebffff92 	bl	13e240 <fflush>
  13e3f4:	e1a05000 	mov	r5, r0
  13e3f8:	eaffffc0 	b	13e300 <fflush+0xc0>
  13e3fc:	0014d3d0 	.word	0x0014d3d0
  13e400:	0014d338 	.word	0x0014d338

0013e404 <fprintf>:
  13e404:	e92d000e 	push	{r1, r2, r3}
  13e408:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e40c:	e24dd008 	sub	sp, sp, #8
  13e410:	e28d3010 	add	r3, sp, #16
  13e414:	e1a02003 	mov	r2, r3
  13e418:	e59d100c 	ldr	r1, [sp, #12]
  13e41c:	e58d3004 	str	r3, [sp, #4]
  13e420:	eb000959 	bl	14098c <vfprintf>
  13e424:	e28dd008 	add	sp, sp, #8
  13e428:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e42c:	e28dd00c 	add	sp, sp, #12
  13e430:	e12fff1e 	bx	lr

0013e434 <__ofl_lock>:
  13e434:	e92d4010 	push	{r4, lr}
  13e438:	e59f0008 	ldr	r0, [pc, #8]	; 13e448 <__ofl_lock+0x14>
  13e43c:	eb000db3 	bl	141b10 <__lock>
  13e440:	e59f0004 	ldr	r0, [pc, #4]	; 13e44c <__ofl_lock+0x18>
  13e444:	e8bd8010 	pop	{r4, pc}
  13e448:	0014f078 	.word	0x0014f078
  13e44c:	0014f074 	.word	0x0014f074

0013e450 <__ofl_unlock>:
  13e450:	e59f0000 	ldr	r0, [pc]	; 13e458 <__ofl_unlock+0x8>
  13e454:	ea000e05 	b	141c70 <__unlock>
  13e458:	0014f078 	.word	0x0014f078

0013e45c <perror>:
  13e45c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13e460:	e1a05000 	mov	r5, r0
  13e464:	ebffea8d 	bl	138ea0 <__errno_location>
  13e468:	e5900000 	ldr	r0, [r0]
  13e46c:	ebffeaad 	bl	138f28 <strerror>
  13e470:	e59f4104 	ldr	r4, [pc, #260]	; 13e57c <perror+0x120>
  13e474:	e1a06000 	mov	r6, r0
  13e478:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e47c:	e3530000 	cmp	r3, #0
  13e480:	aa000026 	bge	13e520 <perror+0xc4>
  13e484:	e3550000 	cmp	r5, #0
  13e488:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13e48c:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13e490:	13a09000 	movne	r9, #0
  13e494:	0a00002c 	beq	13e54c <perror+0xf0>
  13e498:	e5d53000 	ldrb	r3, [r5]
  13e49c:	e3530000 	cmp	r3, #0
  13e4a0:	1a000010 	bne	13e4e8 <perror+0x8c>
  13e4a4:	e1a00006 	mov	r0, r6
  13e4a8:	eb000bf4 	bl	141480 <strlen>
  13e4ac:	e59f30c8 	ldr	r3, [pc, #200]	; 13e57c <perror+0x120>
  13e4b0:	e1a01000 	mov	r1, r0
  13e4b4:	e3a02001 	mov	r2, #1
  13e4b8:	e1a00006 	mov	r0, r6
  13e4bc:	eb0015fa 	bl	143cac <fwrite>
  13e4c0:	e59f10b4 	ldr	r1, [pc, #180]	; 13e57c <perror+0x120>
  13e4c4:	e3a0000a 	mov	r0, #10
  13e4c8:	eb001578 	bl	143ab0 <fputc>
  13e4cc:	e3590000 	cmp	r9, #0
  13e4d0:	e5848048 	str	r8, [r4, #72]	; 0x48
  13e4d4:	e5847088 	str	r7, [r4, #136]	; 0x88
  13e4d8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  13e4dc:	e59f0098 	ldr	r0, [pc, #152]	; 13e57c <perror+0x120>
  13e4e0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13e4e4:	ea00143f 	b	1435e8 <__unlockfile>
  13e4e8:	e1a00005 	mov	r0, r5
  13e4ec:	eb000be3 	bl	141480 <strlen>
  13e4f0:	e59f3084 	ldr	r3, [pc, #132]	; 13e57c <perror+0x120>
  13e4f4:	e1a01000 	mov	r1, r0
  13e4f8:	e3a02001 	mov	r2, #1
  13e4fc:	e1a00005 	mov	r0, r5
  13e500:	eb0015e9 	bl	143cac <fwrite>
  13e504:	e59f1070 	ldr	r1, [pc, #112]	; 13e57c <perror+0x120>
  13e508:	e3a0003a 	mov	r0, #58	; 0x3a
  13e50c:	eb001567 	bl	143ab0 <fputc>
  13e510:	e59f1064 	ldr	r1, [pc, #100]	; 13e57c <perror+0x120>
  13e514:	e3a00020 	mov	r0, #32
  13e518:	eb001564 	bl	143ab0 <fputc>
  13e51c:	eaffffe0 	b	13e4a4 <perror+0x48>
  13e520:	e1a00004 	mov	r0, r4
  13e524:	eb0013e2 	bl	1434b4 <__lockfile>
  13e528:	e3550000 	cmp	r5, #0
  13e52c:	e1a09000 	mov	r9, r0
  13e530:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13e534:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13e538:	0affffd9 	beq	13e4a4 <perror+0x48>
  13e53c:	e5d53000 	ldrb	r3, [r5]
  13e540:	e3530000 	cmp	r3, #0
  13e544:	0affffd6 	beq	13e4a4 <perror+0x48>
  13e548:	eaffffe6 	b	13e4e8 <perror+0x8c>
  13e54c:	eb000bcb 	bl	141480 <strlen>
  13e550:	e1a03004 	mov	r3, r4
  13e554:	e1a01000 	mov	r1, r0
  13e558:	e3a02001 	mov	r2, #1
  13e55c:	e1a00006 	mov	r0, r6
  13e560:	eb0015d1 	bl	143cac <fwrite>
  13e564:	e1a01004 	mov	r1, r4
  13e568:	e3a0000a 	mov	r0, #10
  13e56c:	eb00154f 	bl	143ab0 <fputc>
  13e570:	e5848048 	str	r8, [r4, #72]	; 0x48
  13e574:	e5847088 	str	r7, [r4, #136]	; 0x88
  13e578:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13e57c:	0014d2a8 	.word	0x0014d2a8

0013e580 <printf>:
  13e580:	e92d000f 	push	{r0, r1, r2, r3}
  13e584:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e588:	e24dd00c 	sub	sp, sp, #12
  13e58c:	e28d3014 	add	r3, sp, #20
  13e590:	e1a02003 	mov	r2, r3
  13e594:	e59d1010 	ldr	r1, [sp, #16]
  13e598:	e59f0014 	ldr	r0, [pc, #20]	; 13e5b4 <printf+0x34>
  13e59c:	e58d3004 	str	r3, [sp, #4]
  13e5a0:	eb0008f9 	bl	14098c <vfprintf>
  13e5a4:	e28dd00c 	add	sp, sp, #12
  13e5a8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e5ac:	e28dd010 	add	sp, sp, #16
  13e5b0:	e12fff1e 	bx	lr
  13e5b4:	0014d340 	.word	0x0014d340

0013e5b8 <puts>:
  13e5b8:	e92d4070 	push	{r4, r5, r6, lr}
  13e5bc:	e59f40b0 	ldr	r4, [pc, #176]	; 13e674 <puts+0xbc>
  13e5c0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e5c4:	e3530000 	cmp	r3, #0
  13e5c8:	aa00001b 	bge	13e63c <puts+0x84>
  13e5cc:	e1a01004 	mov	r1, r4
  13e5d0:	eb001569 	bl	143b7c <fputs>
  13e5d4:	e3500000 	cmp	r0, #0
  13e5d8:	a3a05000 	movge	r5, #0
  13e5dc:	ba000021 	blt	13e668 <puts+0xb0>
  13e5e0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  13e5e4:	e353000a 	cmp	r3, #10
  13e5e8:	0a00000e 	beq	13e628 <puts+0x70>
  13e5ec:	e5943014 	ldr	r3, [r4, #20]
  13e5f0:	e5942010 	ldr	r2, [r4, #16]
  13e5f4:	e1530002 	cmp	r3, r2
  13e5f8:	0a00000a 	beq	13e628 <puts+0x70>
  13e5fc:	e3a0200a 	mov	r2, #10
  13e600:	e2831001 	add	r1, r3, #1
  13e604:	e5841014 	str	r1, [r4, #20]
  13e608:	e3a04000 	mov	r4, #0
  13e60c:	e5c32000 	strb	r2, [r3]
  13e610:	e3550000 	cmp	r5, #0
  13e614:	0a000001 	beq	13e620 <puts+0x68>
  13e618:	e59f0054 	ldr	r0, [pc, #84]	; 13e674 <puts+0xbc>
  13e61c:	eb0013f1 	bl	1435e8 <__unlockfile>
  13e620:	e1a00004 	mov	r0, r4
  13e624:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e628:	e3a0100a 	mov	r1, #10
  13e62c:	e59f0040 	ldr	r0, [pc, #64]	; 13e674 <puts+0xbc>
  13e630:	eb001412 	bl	143680 <__overflow>
  13e634:	e1a04fc0 	asr	r4, r0, #31
  13e638:	eafffff4 	b	13e610 <puts+0x58>
  13e63c:	e1a06000 	mov	r6, r0
  13e640:	e1a00004 	mov	r0, r4
  13e644:	eb00139a 	bl	1434b4 <__lockfile>
  13e648:	e1a01004 	mov	r1, r4
  13e64c:	e1a05000 	mov	r5, r0
  13e650:	e1a00006 	mov	r0, r6
  13e654:	eb001548 	bl	143b7c <fputs>
  13e658:	e3500000 	cmp	r0, #0
  13e65c:	b3e04000 	mvnlt	r4, #0
  13e660:	aaffffde 	bge	13e5e0 <puts+0x28>
  13e664:	eaffffe9 	b	13e610 <puts+0x58>
  13e668:	e3e04000 	mvn	r4, #0
  13e66c:	e1a00004 	mov	r0, r4
  13e670:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e674:	0014d340 	.word	0x0014d340

0013e678 <pop_arg>:
  13e678:	e2411009 	sub	r1, r1, #9
  13e67c:	e92d0030 	push	{r4, r5}
  13e680:	e3510011 	cmp	r1, #17
  13e684:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
  13e688:	ea000018 	b	13e6f0 <pop_arg+0x78>
  13e68c:	0013e7b8 	.word	0x0013e7b8
  13e690:	0013e71c 	.word	0x0013e71c
  13e694:	0013e73c 	.word	0x0013e73c
  13e698:	0013e6f8 	.word	0x0013e6f8
  13e69c:	0013e71c 	.word	0x0013e71c
  13e6a0:	0013e73c 	.word	0x0013e73c
  13e6a4:	0013e7f0 	.word	0x0013e7f0
  13e6a8:	0013e760 	.word	0x0013e760
  13e6ac:	0013e780 	.word	0x0013e780
  13e6b0:	0013e79c 	.word	0x0013e79c
  13e6b4:	0013e6f8 	.word	0x0013e6f8
  13e6b8:	0013e73c 	.word	0x0013e73c
  13e6bc:	0013e6f8 	.word	0x0013e6f8
  13e6c0:	0013e6f8 	.word	0x0013e6f8
  13e6c4:	0013e71c 	.word	0x0013e71c
  13e6c8:	0013e7d0 	.word	0x0013e7d0
  13e6cc:	0013e6d4 	.word	0x0013e6d4
  13e6d0:	0013e6d4 	.word	0x0013e6d4
  13e6d4:	e5923000 	ldr	r3, [r2]
  13e6d8:	e2833007 	add	r3, r3, #7
  13e6dc:	e3c33007 	bic	r3, r3, #7
  13e6e0:	e2831008 	add	r1, r3, #8
  13e6e4:	e5821000 	str	r1, [r2]
  13e6e8:	e893000c 	ldm	r3, {r2, r3}
  13e6ec:	e880000c 	stm	r0, {r2, r3}
  13e6f0:	e8bd0030 	pop	{r4, r5}
  13e6f4:	e12fff1e 	bx	lr
  13e6f8:	e5923000 	ldr	r3, [r2]
  13e6fc:	e8bd0030 	pop	{r4, r5}
  13e700:	e2833007 	add	r3, r3, #7
  13e704:	e3c33007 	bic	r3, r3, #7
  13e708:	e2831008 	add	r1, r3, #8
  13e70c:	e5821000 	str	r1, [r2]
  13e710:	e893000c 	ldm	r3, {r2, r3}
  13e714:	e880000c 	stm	r0, {r2, r3}
  13e718:	e12fff1e 	bx	lr
  13e71c:	e5923000 	ldr	r3, [r2]
  13e720:	e5934000 	ldr	r4, [r3]
  13e724:	e2833004 	add	r3, r3, #4
  13e728:	e1a05fc4 	asr	r5, r4, #31
  13e72c:	e5823000 	str	r3, [r2]
  13e730:	e8800030 	stm	r0, {r4, r5}
  13e734:	e8bd0030 	pop	{r4, r5}
  13e738:	e12fff1e 	bx	lr
  13e73c:	e3a01000 	mov	r1, #0
  13e740:	e8bd0030 	pop	{r4, r5}
  13e744:	e5923000 	ldr	r3, [r2]
  13e748:	e593c000 	ldr	ip, [r3]
  13e74c:	e2833004 	add	r3, r3, #4
  13e750:	e5823000 	str	r3, [r2]
  13e754:	e580c000 	str	ip, [r0]
  13e758:	e5801004 	str	r1, [r0, #4]
  13e75c:	e12fff1e 	bx	lr
  13e760:	e3a01000 	mov	r1, #0
  13e764:	e5923000 	ldr	r3, [r2]
  13e768:	e1d3c0b0 	ldrh	ip, [r3]
  13e76c:	e2833004 	add	r3, r3, #4
  13e770:	e5823000 	str	r3, [r2]
  13e774:	e580c000 	str	ip, [r0]
  13e778:	e5801004 	str	r1, [r0, #4]
  13e77c:	eaffffdb 	b	13e6f0 <pop_arg+0x78>
  13e780:	e5923000 	ldr	r3, [r2]
  13e784:	e1d340d0 	ldrsb	r4, [r3]
  13e788:	e2833004 	add	r3, r3, #4
  13e78c:	e1a05fc4 	asr	r5, r4, #31
  13e790:	e5823000 	str	r3, [r2]
  13e794:	e8800030 	stm	r0, {r4, r5}
  13e798:	eaffffd4 	b	13e6f0 <pop_arg+0x78>
  13e79c:	e3a05000 	mov	r5, #0
  13e7a0:	e5923000 	ldr	r3, [r2]
  13e7a4:	e5d34000 	ldrb	r4, [r3]
  13e7a8:	e2833004 	add	r3, r3, #4
  13e7ac:	e5823000 	str	r3, [r2]
  13e7b0:	e8800030 	stm	r0, {r4, r5}
  13e7b4:	eaffffcd 	b	13e6f0 <pop_arg+0x78>
  13e7b8:	e5923000 	ldr	r3, [r2]
  13e7bc:	e2831004 	add	r1, r3, #4
  13e7c0:	e5821000 	str	r1, [r2]
  13e7c4:	e5933000 	ldr	r3, [r3]
  13e7c8:	e5803000 	str	r3, [r0]
  13e7cc:	eaffffc7 	b	13e6f0 <pop_arg+0x78>
  13e7d0:	e3a01000 	mov	r1, #0
  13e7d4:	e5923000 	ldr	r3, [r2]
  13e7d8:	e283c004 	add	ip, r3, #4
  13e7dc:	e582c000 	str	ip, [r2]
  13e7e0:	e5933000 	ldr	r3, [r3]
  13e7e4:	e5801004 	str	r1, [r0, #4]
  13e7e8:	e5803000 	str	r3, [r0]
  13e7ec:	eaffffbf 	b	13e6f0 <pop_arg+0x78>
  13e7f0:	e5923000 	ldr	r3, [r2]
  13e7f4:	e1d340f0 	ldrsh	r4, [r3]
  13e7f8:	e2833004 	add	r3, r3, #4
  13e7fc:	e1a05fc4 	asr	r5, r4, #31
  13e800:	e5823000 	str	r3, [r2]
  13e804:	e8800030 	stm	r0, {r4, r5}
  13e808:	eaffffb8 	b	13e6f0 <pop_arg+0x78>

0013e80c <pad.part.0>:
  13e80c:	e92d4070 	push	{r4, r5, r6, lr}
  13e810:	e0425003 	sub	r5, r2, r3
  13e814:	e3550c01 	cmp	r5, #256	; 0x100
  13e818:	e24ddc01 	sub	sp, sp, #256	; 0x100
  13e81c:	31a02005 	movcc	r2, r5
  13e820:	23a02c01 	movcs	r2, #256	; 0x100
  13e824:	e1a06000 	mov	r6, r0
  13e828:	e1a0000d 	mov	r0, sp
  13e82c:	eb000a82 	bl	14123c <memset>
  13e830:	e35500ff 	cmp	r5, #255	; 0xff
  13e834:	9a00001b 	bls	13e8a8 <pad.part.0+0x9c>
  13e838:	e5962000 	ldr	r2, [r6]
  13e83c:	e1a04005 	mov	r4, r5
  13e840:	e2022020 	and	r2, r2, #32
  13e844:	ea000001 	b	13e850 <pad.part.0+0x44>
  13e848:	e35400ff 	cmp	r4, #255	; 0xff
  13e84c:	9a00000c 	bls	13e884 <pad.part.0+0x78>
  13e850:	e3520000 	cmp	r2, #0
  13e854:	e2444c01 	sub	r4, r4, #256	; 0x100
  13e858:	e1a01002 	mov	r1, r2
  13e85c:	1afffff9 	bne	13e848 <pad.part.0+0x3c>
  13e860:	e1a02006 	mov	r2, r6
  13e864:	e3a01c01 	mov	r1, #256	; 0x100
  13e868:	e1a0000d 	mov	r0, sp
  13e86c:	eb0014cf 	bl	143bb0 <__fwritex>
  13e870:	e5962000 	ldr	r2, [r6]
  13e874:	e35400ff 	cmp	r4, #255	; 0xff
  13e878:	e2022020 	and	r2, r2, #32
  13e87c:	e1a01002 	mov	r1, r2
  13e880:	8afffff2 	bhi	13e850 <pad.part.0+0x44>
  13e884:	e20550ff 	and	r5, r5, #255	; 0xff
  13e888:	e3510000 	cmp	r1, #0
  13e88c:	1a000003 	bne	13e8a0 <pad.part.0+0x94>
  13e890:	e1a02006 	mov	r2, r6
  13e894:	e1a01005 	mov	r1, r5
  13e898:	e1a0000d 	mov	r0, sp
  13e89c:	eb0014c3 	bl	143bb0 <__fwritex>
  13e8a0:	e28ddc01 	add	sp, sp, #256	; 0x100
  13e8a4:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e8a8:	e5961000 	ldr	r1, [r6]
  13e8ac:	e2011020 	and	r1, r1, #32
  13e8b0:	eafffff4 	b	13e888 <pad.part.0+0x7c>
  13e8b4:	00000000 	andeq	r0, r0, r0

0013e8b8 <printf_core>:
  13e8b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13e8bc:	e3a0a000 	mov	sl, #0
  13e8c0:	e1a0b001 	mov	fp, r1
  13e8c4:	e24ddfb3 	sub	sp, sp, #716	; 0x2cc
  13e8c8:	e58d0004 	str	r0, [sp, #4]
  13e8cc:	e58d2018 	str	r2, [sp, #24]
  13e8d0:	e58d3028 	str	r3, [sp, #40]	; 0x28
  13e8d4:	e58da000 	str	sl, [sp]
  13e8d8:	e58da00c 	str	sl, [sp, #12]
  13e8dc:	e59d2000 	ldr	r2, [sp]
  13e8e0:	e5db3000 	ldrb	r3, [fp]
  13e8e4:	e082200a 	add	r2, r2, sl
  13e8e8:	e3530000 	cmp	r3, #0
  13e8ec:	e58d2000 	str	r2, [sp]
  13e8f0:	0a0001c8 	beq	13f018 <printf_core+0x760>
  13e8f4:	e3530025 	cmp	r3, #37	; 0x25
  13e8f8:	e1a0300b 	mov	r3, fp
  13e8fc:	0a000005 	beq	13e918 <printf_core+0x60>
  13e900:	e5f32001 	ldrb	r2, [r3, #1]!
  13e904:	e3520000 	cmp	r2, #0
  13e908:	13520025 	cmpne	r2, #37	; 0x25
  13e90c:	1afffffb 	bne	13e900 <printf_core+0x48>
  13e910:	e3520025 	cmp	r2, #37	; 0x25
  13e914:	1a00019c 	bne	13ef8c <printf_core+0x6d4>
  13e918:	e5d32001 	ldrb	r2, [r3, #1]
  13e91c:	e1a04003 	mov	r4, r3
  13e920:	e3520025 	cmp	r2, #37	; 0x25
  13e924:	0a000003 	beq	13e938 <printf_core+0x80>
  13e928:	ea000006 	b	13e948 <printf_core+0x90>
  13e92c:	e5d42001 	ldrb	r2, [r4, #1]
  13e930:	e3520025 	cmp	r2, #37	; 0x25
  13e934:	1a000003 	bne	13e948 <printf_core+0x90>
  13e938:	e5f42002 	ldrb	r2, [r4, #2]!
  13e93c:	e2833001 	add	r3, r3, #1
  13e940:	e3520025 	cmp	r2, #37	; 0x25
  13e944:	0afffff8 	beq	13e92c <printf_core+0x74>
  13e948:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13e94c:	e043a00b 	sub	sl, r3, fp
  13e950:	e59d3000 	ldr	r3, [sp]
  13e954:	e0423003 	sub	r3, r2, r3
  13e958:	e15a0003 	cmp	sl, r3
  13e95c:	e58d3008 	str	r3, [sp, #8]
  13e960:	ca000181 	bgt	13ef6c <printf_core+0x6b4>
  13e964:	e59d3004 	ldr	r3, [sp, #4]
  13e968:	e3530000 	cmp	r3, #0
  13e96c:	0a000002 	beq	13e97c <printf_core+0xc4>
  13e970:	e5933000 	ldr	r3, [r3]
  13e974:	e3130020 	tst	r3, #32
  13e978:	0a000146 	beq	13ee98 <printf_core+0x5e0>
  13e97c:	e35a0000 	cmp	sl, #0
  13e980:	1a0000b7 	bne	13ec64 <printf_core+0x3ac>
  13e984:	e5d42001 	ldrb	r2, [r4, #1]
  13e988:	e242c030 	sub	ip, r2, #48	; 0x30
  13e98c:	e35c0009 	cmp	ip, #9
  13e990:	8a000002 	bhi	13e9a0 <printf_core+0xe8>
  13e994:	e5d43002 	ldrb	r3, [r4, #2]
  13e998:	e3530024 	cmp	r3, #36	; 0x24
  13e99c:	0a000194 	beq	13eff4 <printf_core+0x73c>
  13e9a0:	e2423020 	sub	r3, r2, #32
  13e9a4:	e353001f 	cmp	r3, #31
  13e9a8:	e3e0c000 	mvn	ip, #0
  13e9ac:	e2846001 	add	r6, r4, #1
  13e9b0:	8a000196 	bhi	13f010 <printf_core+0x758>
  13e9b4:	e59f0f44 	ldr	r0, [pc, #3908]	; 13f900 <printf_core+0x1048>
  13e9b8:	e1a01330 	lsr	r1, r0, r3
  13e9bc:	e2118001 	ands	r8, r1, #1
  13e9c0:	0a00000a 	beq	13e9f0 <printf_core+0x138>
  13e9c4:	e3a08000 	mov	r8, #0
  13e9c8:	e3a0e001 	mov	lr, #1
  13e9cc:	ea000002 	b	13e9dc <printf_core+0x124>
  13e9d0:	e1a01330 	lsr	r1, r0, r3
  13e9d4:	e3110001 	tst	r1, #1
  13e9d8:	0a000004 	beq	13e9f0 <printf_core+0x138>
  13e9dc:	e5f62001 	ldrb	r2, [r6, #1]!
  13e9e0:	e188831e 	orr	r8, r8, lr, lsl r3
  13e9e4:	e2423020 	sub	r3, r2, #32
  13e9e8:	e353001f 	cmp	r3, #31
  13e9ec:	9afffff7 	bls	13e9d0 <printf_core+0x118>
  13e9f0:	e352002a 	cmp	r2, #42	; 0x2a
  13e9f4:	0a00009c 	beq	13ec6c <printf_core+0x3b4>
  13e9f8:	e5d61000 	ldrb	r1, [r6]
  13e9fc:	e2413030 	sub	r3, r1, #48	; 0x30
  13ea00:	e3530009 	cmp	r3, #9
  13ea04:	81a02001 	movhi	r2, r1
  13ea08:	83a09000 	movhi	r9, #0
  13ea0c:	8a000012 	bhi	13ea5c <printf_core+0x1a4>
  13ea10:	e3a09000 	mov	r9, #0
  13ea14:	e59f0ee8 	ldr	r0, [pc, #3816]	; 13f904 <printf_core+0x104c>
  13ea18:	e0693e89 	rsb	r3, r9, r9, lsl #29
  13ea1c:	e0693103 	rsb	r3, r9, r3, lsl #2
  13ea20:	e5f62001 	ldrb	r2, [r6, #1]!
  13ea24:	e1a03083 	lsl	r3, r3, #1
  13ea28:	e1590000 	cmp	r9, r0
  13ea2c:	e2411030 	sub	r1, r1, #48	; 0x30
  13ea30:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13ea34:	e242e030 	sub	lr, r2, #48	; 0x30
  13ea38:	8a000025 	bhi	13ead4 <printf_core+0x21c>
  13ea3c:	e1510003 	cmp	r1, r3
  13ea40:	e0899109 	add	r9, r9, r9, lsl #2
  13ea44:	ca000022 	bgt	13ead4 <printf_core+0x21c>
  13ea48:	e35e0009 	cmp	lr, #9
  13ea4c:	e0819089 	add	r9, r1, r9, lsl #1
  13ea50:	9a000022 	bls	13eae0 <printf_core+0x228>
  13ea54:	e3590000 	cmp	r9, #0
  13ea58:	ba000143 	blt	13ef6c <printf_core+0x6b4>
  13ea5c:	e352002e 	cmp	r2, #46	; 0x2e
  13ea60:	1a000097 	bne	13ecc4 <printf_core+0x40c>
  13ea64:	e5d62001 	ldrb	r2, [r6, #1]
  13ea68:	e352002a 	cmp	r2, #42	; 0x2a
  13ea6c:	1a00011e 	bne	13eeec <printf_core+0x634>
  13ea70:	e5d62002 	ldrb	r2, [r6, #2]
  13ea74:	e2423030 	sub	r3, r2, #48	; 0x30
  13ea78:	e3530009 	cmp	r3, #9
  13ea7c:	8a000002 	bhi	13ea8c <printf_core+0x1d4>
  13ea80:	e5d63003 	ldrb	r3, [r6, #3]
  13ea84:	e3530024 	cmp	r3, #36	; 0x24
  13ea88:	0a000143 	beq	13ef9c <printf_core+0x6e4>
  13ea8c:	e59d300c 	ldr	r3, [sp, #12]
  13ea90:	e3530000 	cmp	r3, #0
  13ea94:	1a00009f 	bne	13ed18 <printf_core+0x460>
  13ea98:	e59d3004 	ldr	r3, [sp, #4]
  13ea9c:	e2866002 	add	r6, r6, #2
  13eaa0:	e3530000 	cmp	r3, #0
  13eaa4:	159d1018 	ldrne	r1, [sp, #24]
  13eaa8:	03a03001 	moveq	r3, #1
  13eaac:	15913000 	ldrne	r3, [r1]
  13eab0:	059d5004 	ldreq	r5, [sp, #4]
  13eab4:	15935000 	ldrne	r5, [r3]
  13eab8:	12832004 	addne	r2, r3, #4
  13eabc:	11e03005 	mvnne	r3, r5
  13eac0:	15812000 	strne	r2, [r1]
  13eac4:	11a03fa3 	lsrne	r3, r3, #31
  13eac8:	15d62000 	ldrbne	r2, [r6]
  13eacc:	e58d301c 	str	r3, [sp, #28]
  13ead0:	ea00007e 	b	13ecd0 <printf_core+0x418>
  13ead4:	e35e0009 	cmp	lr, #9
  13ead8:	8a000123 	bhi	13ef6c <printf_core+0x6b4>
  13eadc:	e3e09000 	mvn	r9, #0
  13eae0:	e1a01002 	mov	r1, r2
  13eae4:	eaffffcb 	b	13ea18 <printf_core+0x160>
  13eae8:	e28d3070 	add	r3, sp, #112	; 0x70
  13eaec:	e893000c 	ldm	r3, {r2, r3}
  13eaf0:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13eaf4:	e1921003 	orrs	r1, r2, r3
  13eaf8:	e1a0b00a 	mov	fp, sl
  13eafc:	0a000009 	beq	13eb28 <printf_core+0x270>
  13eb00:	e1a001a2 	lsr	r0, r2, #3
  13eb04:	e1800e83 	orr	r0, r0, r3, lsl #29
  13eb08:	e1a0c1a3 	lsr	ip, r3, #3
  13eb0c:	e2021007 	and	r1, r2, #7
  13eb10:	e1a0300c 	mov	r3, ip
  13eb14:	e1a02000 	mov	r2, r0
  13eb18:	e2811030 	add	r1, r1, #48	; 0x30
  13eb1c:	e1920003 	orrs	r0, r2, r3
  13eb20:	e56b1001 	strb	r1, [fp, #-1]!
  13eb24:	1afffff5 	bne	13eb00 <printf_core+0x248>
  13eb28:	e2183008 	ands	r3, r8, #8
  13eb2c:	0a00026f 	beq	13f4f0 <printf_core+0xc38>
  13eb30:	e04a300b 	sub	r3, sl, fp
  13eb34:	e1530005 	cmp	r3, r5
  13eb38:	ba00026b 	blt	13f4ec <printf_core+0xc34>
  13eb3c:	e2835001 	add	r5, r3, #1
  13eb40:	e3a03000 	mov	r3, #0
  13eb44:	e58d3020 	str	r3, [sp, #32]
  13eb48:	e59f3db8 	ldr	r3, [pc, #3512]	; 13f908 <printf_core+0x1050>
  13eb4c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13eb50:	e59d301c 	ldr	r3, [sp, #28]
  13eb54:	e0132fa5 	ands	r2, r3, r5, lsr #31
  13eb58:	1a000103 	bne	13ef6c <printf_core+0x6b4>
  13eb5c:	e59d2070 	ldr	r2, [sp, #112]	; 0x70
  13eb60:	e3530000 	cmp	r3, #0
  13eb64:	e59d3074 	ldr	r3, [sp, #116]	; 0x74
  13eb68:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13eb6c:	e1923003 	orrs	r3, r2, r3
  13eb70:	03a03001 	moveq	r3, #1
  13eb74:	13a03000 	movne	r3, #0
  13eb78:	e3550000 	cmp	r5, #0
  13eb7c:	01a02003 	moveq	r2, r3
  13eb80:	13a02000 	movne	r2, #0
  13eb84:	e3520000 	cmp	r2, #0
  13eb88:	1a0002a8 	bne	13f630 <printf_core+0xd78>
  13eb8c:	e04a600b 	sub	r6, sl, fp
  13eb90:	e1560005 	cmp	r6, r5
  13eb94:	a1a05006 	movge	r5, r6
  13eb98:	e0833006 	add	r3, r3, r6
  13eb9c:	e1530005 	cmp	r3, r5
  13eba0:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13eba4:	a1a05003 	movge	r5, r3
  13eba8:	e59d3020 	ldr	r3, [sp, #32]
  13ebac:	e0423003 	sub	r3, r2, r3
  13ebb0:	e1530005 	cmp	r3, r5
  13ebb4:	ba0000ec 	blt	13ef6c <printf_core+0x6b4>
  13ebb8:	e59d3020 	ldr	r3, [sp, #32]
  13ebbc:	e0857003 	add	r7, r5, r3
  13ebc0:	e1570009 	cmp	r7, r9
  13ebc4:	a1a0a007 	movge	sl, r7
  13ebc8:	b1a0a009 	movlt	sl, r9
  13ebcc:	e59d3008 	ldr	r3, [sp, #8]
  13ebd0:	e153000a 	cmp	r3, sl
  13ebd4:	ba0000e4 	blt	13ef6c <printf_core+0x6b4>
  13ebd8:	e157000a 	cmp	r7, sl
  13ebdc:	b3a09000 	movlt	r9, #0
  13ebe0:	a3a09001 	movge	r9, #1
  13ebe4:	e3180a12 	tst	r8, #73728	; 0x12000
  13ebe8:	01a03009 	moveq	r3, r9
  13ebec:	13a03001 	movne	r3, #1
  13ebf0:	e3530000 	cmp	r3, #0
  13ebf4:	0a000281 	beq	13f600 <printf_core+0xd48>
  13ebf8:	e59d3004 	ldr	r3, [sp, #4]
  13ebfc:	e5933000 	ldr	r3, [r3]
  13ec00:	e3130020 	tst	r3, #32
  13ec04:	0a000233 	beq	13f4d8 <printf_core+0xc20>
  13ec08:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13ec0c:	e3130a12 	tst	r3, #73728	; 0x12000
  13ec10:	01a03009 	moveq	r3, r9
  13ec14:	13a03001 	movne	r3, #1
  13ec18:	e3530000 	cmp	r3, #0
  13ec1c:	0a00027d 	beq	13f618 <printf_core+0xd60>
  13ec20:	e1550006 	cmp	r5, r6
  13ec24:	ca000225 	bgt	13f4c0 <printf_core+0xc08>
  13ec28:	e59d3004 	ldr	r3, [sp, #4]
  13ec2c:	e5933000 	ldr	r3, [r3]
  13ec30:	e3130020 	tst	r3, #32
  13ec34:	0a00021c 	beq	13f4ac <printf_core+0xbf4>
  13ec38:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13ec3c:	e3130a12 	tst	r3, #73728	; 0x12000
  13ec40:	01a03009 	moveq	r3, r9
  13ec44:	13a03001 	movne	r3, #1
  13ec48:	e3530000 	cmp	r3, #0
  13ec4c:	1a000004 	bne	13ec64 <printf_core+0x3ac>
  13ec50:	e1a03007 	mov	r3, r7
  13ec54:	e1a0200a 	mov	r2, sl
  13ec58:	e3a01020 	mov	r1, #32
  13ec5c:	e59d0004 	ldr	r0, [sp, #4]
  13ec60:	ebfffee9 	bl	13e80c <pad.part.0>
  13ec64:	e1a0b004 	mov	fp, r4
  13ec68:	eaffff1b 	b	13e8dc <printf_core+0x24>
  13ec6c:	e5d62001 	ldrb	r2, [r6, #1]
  13ec70:	e2423030 	sub	r3, r2, #48	; 0x30
  13ec74:	e3530009 	cmp	r3, #9
  13ec78:	9a00008b 	bls	13eeac <printf_core+0x5f4>
  13ec7c:	e59d300c 	ldr	r3, [sp, #12]
  13ec80:	e3530000 	cmp	r3, #0
  13ec84:	1a000023 	bne	13ed18 <printf_core+0x460>
  13ec88:	e59d3004 	ldr	r3, [sp, #4]
  13ec8c:	e2866001 	add	r6, r6, #1
  13ec90:	e3530000 	cmp	r3, #0
  13ec94:	0a0000be 	beq	13ef94 <printf_core+0x6dc>
  13ec98:	e59d1018 	ldr	r1, [sp, #24]
  13ec9c:	e5913000 	ldr	r3, [r1]
  13eca0:	e2832004 	add	r2, r3, #4
  13eca4:	e5939000 	ldr	r9, [r3]
  13eca8:	e5812000 	str	r2, [r1]
  13ecac:	e5d62000 	ldrb	r2, [r6]
  13ecb0:	e3590000 	cmp	r9, #0
  13ecb4:	b3888a02 	orrlt	r8, r8, #8192	; 0x2000
  13ecb8:	b2699000 	rsblt	r9, r9, #0
  13ecbc:	e352002e 	cmp	r2, #46	; 0x2e
  13ecc0:	0affff67 	beq	13ea64 <printf_core+0x1ac>
  13ecc4:	e3a03000 	mov	r3, #0
  13ecc8:	e3e05000 	mvn	r5, #0
  13eccc:	e58d301c 	str	r3, [sp, #28]
  13ecd0:	e3a07000 	mov	r7, #0
  13ecd4:	e59f0c30 	ldr	r0, [pc, #3120]	; 13f90c <printf_core+0x1054>
  13ecd8:	ea000007 	b	13ecfc <printf_core+0x444>
  13ecdc:	e5531041 	ldrb	r1, [r3, #-65]	; 0xffffffbf
  13ece0:	e2864001 	add	r4, r6, #1
  13ece4:	e2413001 	sub	r3, r1, #1
  13ece8:	e3530007 	cmp	r3, #7
  13ecec:	8a000011 	bhi	13ed38 <printf_core+0x480>
  13ecf0:	e5d62001 	ldrb	r2, [r6, #1]
  13ecf4:	e1a07001 	mov	r7, r1
  13ecf8:	e1a06004 	mov	r6, r4
  13ecfc:	e0673187 	rsb	r3, r7, r7, lsl #3
  13ed00:	e0873103 	add	r3, r7, r3, lsl #2
  13ed04:	e0803083 	add	r3, r0, r3, lsl #1
  13ed08:	e0833002 	add	r3, r3, r2
  13ed0c:	e2422041 	sub	r2, r2, #65	; 0x41
  13ed10:	e3520039 	cmp	r2, #57	; 0x39
  13ed14:	9afffff0 	bls	13ecdc <printf_core+0x424>
  13ed18:	ebffe860 	bl	138ea0 <__errno_location>
  13ed1c:	e3a03016 	mov	r3, #22
  13ed20:	e3e02000 	mvn	r2, #0
  13ed24:	e58d2000 	str	r2, [sp]
  13ed28:	e5803000 	str	r3, [r0]
  13ed2c:	e59d0000 	ldr	r0, [sp]
  13ed30:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13ed34:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13ed38:	e3510000 	cmp	r1, #0
  13ed3c:	0afffff5 	beq	13ed18 <printf_core+0x460>
  13ed40:	e351001b 	cmp	r1, #27
  13ed44:	0a000080 	beq	13ef4c <printf_core+0x694>
  13ed48:	e35c0000 	cmp	ip, #0
  13ed4c:	ba0000a1 	blt	13efd8 <printf_core+0x720>
  13ed50:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13ed54:	e59d22f0 	ldr	r2, [sp, #752]	; 0x2f0
  13ed58:	e083318c 	add	r3, r3, ip, lsl #3
  13ed5c:	e782110c 	str	r1, [r2, ip, lsl #2]
  13ed60:	e893000c 	ldm	r3, {r2, r3}
  13ed64:	e58d2070 	str	r2, [sp, #112]	; 0x70
  13ed68:	e58d3074 	str	r3, [sp, #116]	; 0x74
  13ed6c:	e59d3004 	ldr	r3, [sp, #4]
  13ed70:	e3530000 	cmp	r3, #0
  13ed74:	0a000079 	beq	13ef60 <printf_core+0x6a8>
  13ed78:	e5d63000 	ldrb	r3, [r6]
  13ed7c:	e3570000 	cmp	r7, #0
  13ed80:	e58d3010 	str	r3, [sp, #16]
  13ed84:	0a000004 	beq	13ed9c <printf_core+0x4e4>
  13ed88:	e203300f 	and	r3, r3, #15
  13ed8c:	e3530003 	cmp	r3, #3
  13ed90:	059d3010 	ldreq	r3, [sp, #16]
  13ed94:	03c33020 	biceq	r3, r3, #32
  13ed98:	058d3010 	streq	r3, [sp, #16]
  13ed9c:	e59d3010 	ldr	r3, [sp, #16]
  13eda0:	e3180a02 	tst	r8, #8192	; 0x2000
  13eda4:	e2433041 	sub	r3, r3, #65	; 0x41
  13eda8:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13edac:	e3530037 	cmp	r3, #55	; 0x37
  13edb0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  13edb4:	ea0001a2 	b	13f444 <printf_core+0xb8c>
  13edb8:	0013f298 	.word	0x0013f298
  13edbc:	0013f444 	.word	0x0013f444
  13edc0:	0013f134 	.word	0x0013f134
  13edc4:	0013f444 	.word	0x0013f444
  13edc8:	0013f298 	.word	0x0013f298
  13edcc:	0013f298 	.word	0x0013f298
  13edd0:	0013f298 	.word	0x0013f298
  13edd4:	0013f444 	.word	0x0013f444
  13edd8:	0013f444 	.word	0x0013f444
  13eddc:	0013f444 	.word	0x0013f444
  13ede0:	0013f444 	.word	0x0013f444
  13ede4:	0013f444 	.word	0x0013f444
  13ede8:	0013f444 	.word	0x0013f444
  13edec:	0013f444 	.word	0x0013f444
  13edf0:	0013f444 	.word	0x0013f444
  13edf4:	0013f444 	.word	0x0013f444
  13edf8:	0013f444 	.word	0x0013f444
  13edfc:	0013f444 	.word	0x0013f444
  13ee00:	0013f1a4 	.word	0x0013f1a4
  13ee04:	0013f444 	.word	0x0013f444
  13ee08:	0013f444 	.word	0x0013f444
  13ee0c:	0013f444 	.word	0x0013f444
  13ee10:	0013f444 	.word	0x0013f444
  13ee14:	0013f438 	.word	0x0013f438
  13ee18:	0013f444 	.word	0x0013f444
  13ee1c:	0013f444 	.word	0x0013f444
  13ee20:	0013f444 	.word	0x0013f444
  13ee24:	0013f444 	.word	0x0013f444
  13ee28:	0013f444 	.word	0x0013f444
  13ee2c:	0013f444 	.word	0x0013f444
  13ee30:	0013f444 	.word	0x0013f444
  13ee34:	0013f444 	.word	0x0013f444
  13ee38:	0013f298 	.word	0x0013f298
  13ee3c:	0013f444 	.word	0x0013f444
  13ee40:	0013f1b8 	.word	0x0013f1b8
  13ee44:	0013f1f4 	.word	0x0013f1f4
  13ee48:	0013f298 	.word	0x0013f298
  13ee4c:	0013f298 	.word	0x0013f298
  13ee50:	0013f298 	.word	0x0013f298
  13ee54:	0013f444 	.word	0x0013f444
  13ee58:	0013f1f4 	.word	0x0013f1f4
  13ee5c:	0013f444 	.word	0x0013f444
  13ee60:	0013f444 	.word	0x0013f444
  13ee64:	0013f444 	.word	0x0013f444
  13ee68:	0013f23c 	.word	0x0013f23c
  13ee6c:	0013f26c 	.word	0x0013f26c
  13ee70:	0013eae8 	.word	0x0013eae8
  13ee74:	0013f38c 	.word	0x0013f38c
  13ee78:	0013f444 	.word	0x0013f444
  13ee7c:	0013f444 	.word	0x0013f444
  13ee80:	0013f424 	.word	0x0013f424
  13ee84:	0013f444 	.word	0x0013f444
  13ee88:	0013f078 	.word	0x0013f078
  13ee8c:	0013f444 	.word	0x0013f444
  13ee90:	0013f444 	.word	0x0013f444
  13ee94:	0013f438 	.word	0x0013f438
  13ee98:	e59d2004 	ldr	r2, [sp, #4]
  13ee9c:	e1a0100a 	mov	r1, sl
  13eea0:	e1a0000b 	mov	r0, fp
  13eea4:	eb001341 	bl	143bb0 <__fwritex>
  13eea8:	eafffeb3 	b	13e97c <printf_core+0xc4>
  13eeac:	e5d63002 	ldrb	r3, [r6, #2]
  13eeb0:	e3530024 	cmp	r3, #36	; 0x24
  13eeb4:	1affff70 	bne	13ec7c <printf_core+0x3c4>
  13eeb8:	e3a0300a 	mov	r3, #10
  13eebc:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13eec0:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13eec4:	e7813102 	str	r3, [r1, r2, lsl #2]
  13eec8:	e3a02001 	mov	r2, #1
  13eecc:	e5d63001 	ldrb	r3, [r6, #1]
  13eed0:	e58d200c 	str	r2, [sp, #12]
  13eed4:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13eed8:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  13eedc:	e2433030 	sub	r3, r3, #48	; 0x30
  13eee0:	e7929183 	ldr	r9, [r2, r3, lsl #3]
  13eee4:	e2866003 	add	r6, r6, #3
  13eee8:	eaffff6f 	b	13ecac <printf_core+0x3f4>
  13eeec:	e2421030 	sub	r1, r2, #48	; 0x30
  13eef0:	e3510009 	cmp	r1, #9
  13eef4:	e3a05000 	mov	r5, #0
  13eef8:	e2866001 	add	r6, r6, #1
  13eefc:	8a00000f 	bhi	13ef40 <printf_core+0x688>
  13ef00:	e59f09fc 	ldr	r0, [pc, #2556]	; 13f904 <printf_core+0x104c>
  13ef04:	e0653e85 	rsb	r3, r5, r5, lsl #29
  13ef08:	e0653103 	rsb	r3, r5, r3, lsl #2
  13ef0c:	e1a03083 	lsl	r3, r3, #1
  13ef10:	e1550000 	cmp	r5, r0
  13ef14:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13ef18:	8a000003 	bhi	13ef2c <printf_core+0x674>
  13ef1c:	e1510003 	cmp	r1, r3
  13ef20:	e0855105 	add	r5, r5, r5, lsl #2
  13ef24:	d0815085 	addle	r5, r1, r5, lsl #1
  13ef28:	da000000 	ble	13ef30 <printf_core+0x678>
  13ef2c:	e3e05000 	mvn	r5, #0
  13ef30:	e5f62001 	ldrb	r2, [r6, #1]!
  13ef34:	e2421030 	sub	r1, r2, #48	; 0x30
  13ef38:	e3510009 	cmp	r1, #9
  13ef3c:	9afffff0 	bls	13ef04 <printf_core+0x64c>
  13ef40:	e3a03001 	mov	r3, #1
  13ef44:	e58d301c 	str	r3, [sp, #28]
  13ef48:	eaffff60 	b	13ecd0 <printf_core+0x418>
  13ef4c:	e35c0000 	cmp	ip, #0
  13ef50:	aaffff70 	bge	13ed18 <printf_core+0x460>
  13ef54:	e59d3004 	ldr	r3, [sp, #4]
  13ef58:	e3530000 	cmp	r3, #0
  13ef5c:	1affff85 	bne	13ed78 <printf_core+0x4c0>
  13ef60:	e59d3008 	ldr	r3, [sp, #8]
  13ef64:	e153000a 	cmp	r3, sl
  13ef68:	aaffff3d 	bge	13ec64 <printf_core+0x3ac>
  13ef6c:	ebffe7cb 	bl	138ea0 <__errno_location>
  13ef70:	e3e02000 	mvn	r2, #0
  13ef74:	e3a0304b 	mov	r3, #75	; 0x4b
  13ef78:	e58d2000 	str	r2, [sp]
  13ef7c:	e5803000 	str	r3, [r0]
  13ef80:	e59d0000 	ldr	r0, [sp]
  13ef84:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13ef88:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13ef8c:	e1a04003 	mov	r4, r3
  13ef90:	eafffe6c 	b	13e948 <printf_core+0x90>
  13ef94:	e59d9004 	ldr	r9, [sp, #4]
  13ef98:	eafffeaf 	b	13ea5c <printf_core+0x1a4>
  13ef9c:	e3a0300a 	mov	r3, #10
  13efa0:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13efa4:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13efa8:	e7813102 	str	r3, [r1, r2, lsl #2]
  13efac:	e5d63002 	ldrb	r3, [r6, #2]
  13efb0:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
  13efb4:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13efb8:	e2433030 	sub	r3, r3, #48	; 0x30
  13efbc:	e7915183 	ldr	r5, [r1, r3, lsl #3]
  13efc0:	e5d62004 	ldrb	r2, [r6, #4]
  13efc4:	e1e03005 	mvn	r3, r5
  13efc8:	e1a03fa3 	lsr	r3, r3, #31
  13efcc:	e2866004 	add	r6, r6, #4
  13efd0:	e58d301c 	str	r3, [sp, #28]
  13efd4:	eaffff3d 	b	13ecd0 <printf_core+0x418>
  13efd8:	e59d3004 	ldr	r3, [sp, #4]
  13efdc:	e3530000 	cmp	r3, #0
  13efe0:	0a000409 	beq	14000c <printf_core+0x1754>
  13efe4:	e59d2018 	ldr	r2, [sp, #24]
  13efe8:	e28d0070 	add	r0, sp, #112	; 0x70
  13efec:	ebfffda1 	bl	13e678 <pop_arg>
  13eff0:	eaffff60 	b	13ed78 <printf_core+0x4c0>
  13eff4:	e3a03001 	mov	r3, #1
  13eff8:	e5d42003 	ldrb	r2, [r4, #3]
  13effc:	e58d300c 	str	r3, [sp, #12]
  13f000:	e2423020 	sub	r3, r2, #32
  13f004:	e353001f 	cmp	r3, #31
  13f008:	e2846003 	add	r6, r4, #3
  13f00c:	9afffe68 	bls	13e9b4 <printf_core+0xfc>
  13f010:	e3a08000 	mov	r8, #0
  13f014:	eafffe75 	b	13e9f0 <printf_core+0x138>
  13f018:	e59d3004 	ldr	r3, [sp, #4]
  13f01c:	e3530000 	cmp	r3, #0
  13f020:	1affff41 	bne	13ed2c <printf_core+0x474>
  13f024:	e59d300c 	ldr	r3, [sp, #12]
  13f028:	e3530000 	cmp	r3, #0
  13f02c:	0a0003f6 	beq	14000c <printf_core+0x1754>
  13f030:	e3a05001 	mov	r5, #1
  13f034:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13f038:	e59d62f0 	ldr	r6, [sp, #752]	; 0x2f0
  13f03c:	e59d7018 	ldr	r7, [sp, #24]
  13f040:	e2834008 	add	r4, r3, #8
  13f044:	e5b61004 	ldr	r1, [r6, #4]!
  13f048:	e3510000 	cmp	r1, #0
  13f04c:	0a0004f8 	beq	140434 <printf_core+0x1b7c>
  13f050:	e1a00004 	mov	r0, r4
  13f054:	e2855001 	add	r5, r5, #1
  13f058:	e1a02007 	mov	r2, r7
  13f05c:	ebfffd85 	bl	13e678 <pop_arg>
  13f060:	e355000a 	cmp	r5, #10
  13f064:	e2844008 	add	r4, r4, #8
  13f068:	1afffff5 	bne	13f044 <printf_core+0x78c>
  13f06c:	e3a03001 	mov	r3, #1
  13f070:	e58d3000 	str	r3, [sp]
  13f074:	eaffff2c 	b	13ed2c <printf_core+0x474>
  13f078:	e3a03000 	mov	r3, #0
  13f07c:	e28d7070 	add	r7, sp, #112	; 0x70
  13f080:	e89700c0 	ldm	r7, {r6, r7}
  13f084:	e58d3020 	str	r3, [sp, #32]
  13f088:	e59f3878 	ldr	r3, [pc, #2168]	; 13f908 <printf_core+0x1050>
  13f08c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f090:	e3a03000 	mov	r3, #0
  13f094:	e3e02000 	mvn	r2, #0
  13f098:	e1570003 	cmp	r7, r3
  13f09c:	01560002 	cmpeq	r6, r2
  13f0a0:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13f0a4:	91a0b00a 	movls	fp, sl
  13f0a8:	9a000015 	bls	13f104 <printf_core+0x84c>
  13f0ac:	e1a0b00a 	mov	fp, sl
  13f0b0:	e58d2010 	str	r2, [sp, #16]
  13f0b4:	e58d3014 	str	r3, [sp, #20]
  13f0b8:	e1a00006 	mov	r0, r6
  13f0bc:	e1a01007 	mov	r1, r7
  13f0c0:	e3a0200a 	mov	r2, #10
  13f0c4:	e3a03000 	mov	r3, #0
  13f0c8:	eb001834 	bl	1451a0 <__aeabi_uldivmod>
  13f0cc:	e2822030 	add	r2, r2, #48	; 0x30
  13f0d0:	e56b2001 	strb	r2, [fp, #-1]!
  13f0d4:	e1a00006 	mov	r0, r6
  13f0d8:	e1a01007 	mov	r1, r7
  13f0dc:	e3a0200a 	mov	r2, #10
  13f0e0:	e3a03000 	mov	r3, #0
  13f0e4:	eb00182d 	bl	1451a0 <__aeabi_uldivmod>
  13f0e8:	e28d3010 	add	r3, sp, #16
  13f0ec:	e893000c 	ldm	r3, {r2, r3}
  13f0f0:	e1510003 	cmp	r1, r3
  13f0f4:	01500002 	cmpeq	r0, r2
  13f0f8:	e1a06000 	mov	r6, r0
  13f0fc:	e1a07001 	mov	r7, r1
  13f100:	8affffec 	bhi	13f0b8 <printf_core+0x800>
  13f104:	e3560000 	cmp	r6, #0
  13f108:	0afffe90 	beq	13eb50 <printf_core+0x298>
  13f10c:	e59f1838 	ldr	r1, [pc, #2104]	; 13f94c <printf_core+0x1094>
  13f110:	e0832196 	umull	r2, r3, r6, r1
  13f114:	e1a031a3 	lsr	r3, r3, #3
  13f118:	e0832103 	add	r2, r3, r3, lsl #2
  13f11c:	e0466082 	sub	r6, r6, r2, lsl #1
  13f120:	e2862030 	add	r2, r6, #48	; 0x30
  13f124:	e2536000 	subs	r6, r3, #0
  13f128:	e56b2001 	strb	r2, [fp, #-1]!
  13f12c:	1afffff6 	bne	13f10c <printf_core+0x854>
  13f130:	eafffe86 	b	13eb50 <printf_core+0x298>
  13f134:	e3a03000 	mov	r3, #0
  13f138:	e3e0a000 	mvn	sl, #0
  13f13c:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13f140:	e28d707c 	add	r7, sp, #124	; 0x7c
  13f144:	e58d3080 	str	r3, [sp, #128]	; 0x80
  13f148:	e58d107c 	str	r1, [sp, #124]	; 0x7c
  13f14c:	e58d7070 	str	r7, [sp, #112]	; 0x70
  13f150:	e3510000 	cmp	r1, #0
  13f154:	0a000112 	beq	13f5a4 <printf_core+0xcec>
  13f158:	e3a05000 	mov	r5, #0
  13f15c:	e28d6068 	add	r6, sp, #104	; 0x68
  13f160:	ea000007 	b	13f184 <printf_core+0x8cc>
  13f164:	e1530000 	cmp	r3, r0
  13f168:	3a0000e4 	bcc	13f500 <printf_core+0xc48>
  13f16c:	e0855000 	add	r5, r5, r0
  13f170:	e155000a 	cmp	r5, sl
  13f174:	2a0000e1 	bcs	13f500 <printf_core+0xc48>
  13f178:	e5b71004 	ldr	r1, [r7, #4]!
  13f17c:	e3510000 	cmp	r1, #0
  13f180:	0a0000de 	beq	13f500 <printf_core+0xc48>
  13f184:	e1a00006 	mov	r0, r6
  13f188:	eb00109c 	bl	143400 <wctomb>
  13f18c:	e3500000 	cmp	r0, #0
  13f190:	e04a3005 	sub	r3, sl, r5
  13f194:	aafffff2 	bge	13f164 <printf_core+0x8ac>
  13f198:	e3e03000 	mvn	r3, #0
  13f19c:	e58d3000 	str	r3, [sp]
  13f1a0:	eafffee1 	b	13ed2c <printf_core+0x474>
  13f1a4:	e255a000 	subs	sl, r5, #0
  13f1a8:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13f1ac:	0a0000fc 	beq	13f5a4 <printf_core+0xcec>
  13f1b0:	e5971000 	ldr	r1, [r7]
  13f1b4:	eaffffe5 	b	13f150 <printf_core+0x898>
  13f1b8:	e3a00001 	mov	r0, #1
  13f1bc:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f1c0:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13f1c4:	e5cd30cf 	strb	r3, [sp, #207]	; 0xcf
  13f1c8:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13f1cc:	e28db0cf 	add	fp, sp, #207	; 0xcf
  13f1d0:	e3a03000 	mov	r3, #0
  13f1d4:	e046600b 	sub	r6, r6, fp
  13f1d8:	e58d3020 	str	r3, [sp, #32]
  13f1dc:	e59f3724 	ldr	r3, [pc, #1828]	; 13f908 <printf_core+0x1050>
  13f1e0:	e1560000 	cmp	r6, r0
  13f1e4:	a1a05006 	movge	r5, r6
  13f1e8:	b1a05000 	movlt	r5, r0
  13f1ec:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f1f0:	eafffe70 	b	13ebb8 <printf_core+0x300>
  13f1f4:	e28d7070 	add	r7, sp, #112	; 0x70
  13f1f8:	e89700c0 	ldm	r7, {r6, r7}
  13f1fc:	e3560000 	cmp	r6, #0
  13f200:	e2d73000 	sbcs	r3, r7, #0
  13f204:	ba000122 	blt	13f694 <printf_core+0xddc>
  13f208:	e3180b02 	tst	r8, #2048	; 0x800
  13f20c:	1a000379 	bne	13fff8 <printf_core+0x1740>
  13f210:	e59fa6f0 	ldr	sl, [pc, #1776]	; 13f908 <printf_core+0x1050>
  13f214:	e2083001 	and	r3, r8, #1
  13f218:	e3530000 	cmp	r3, #0
  13f21c:	e28a2002 	add	r2, sl, #2
  13f220:	01a0300a 	moveq	r3, sl
  13f224:	11a03002 	movne	r3, r2
  13f228:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f22c:	13a03001 	movne	r3, #1
  13f230:	03a03000 	moveq	r3, #0
  13f234:	e58d3020 	str	r3, [sp, #32]
  13f238:	eaffff94 	b	13f090 <printf_core+0x7d8>
  13f23c:	ebffe717 	bl	138ea0 <__errno_location>
  13f240:	e5900000 	ldr	r0, [r0]
  13f244:	ebffe737 	bl	138f28 <strerror>
  13f248:	e1a0b000 	mov	fp, r0
  13f24c:	e3550000 	cmp	r5, #0
  13f250:	ba0000fa 	blt	13f640 <printf_core+0xd88>
  13f254:	e1a01005 	mov	r1, r5
  13f258:	e1a0000b 	mov	r0, fp
  13f25c:	eb0008dd 	bl	1415d8 <strnlen>
  13f260:	e08b6000 	add	r6, fp, r0
  13f264:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13f268:	eaffffd8 	b	13f1d0 <printf_core+0x918>
  13f26c:	e3570007 	cmp	r7, #7
  13f270:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
  13f274:	eaffff39 	b	13ef60 <printf_core+0x6a8>
  13f278:	0013f468 	.word	0x0013f468
  13f27c:	0013f468 	.word	0x0013f468
  13f280:	0013f478 	.word	0x0013f478
  13f284:	0013f48c 	.word	0x0013f48c
  13f288:	0013f49c 	.word	0x0013f49c
  13f28c:	0013ef60 	.word	0x0013ef60
  13f290:	0013f468 	.word	0x0013f468
  13f294:	0013f478 	.word	0x0013f478
  13f298:	e59d301c 	ldr	r3, [sp, #28]
  13f29c:	e0133fa5 	ands	r3, r3, r5, lsr #31
  13f2a0:	1affff31 	bne	13ef6c <printf_core+0x6b4>
  13f2a4:	e28d7070 	add	r7, sp, #112	; 0x70
  13f2a8:	e89700c0 	ldm	r7, {r6, r7}
  13f2ac:	e1b02fa7 	lsrs	r2, r7, #31
  13f2b0:	e58d2030 	str	r2, [sp, #48]	; 0x30
  13f2b4:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f2b8:	0a0000e8 	beq	13f660 <printf_core+0xda8>
  13f2bc:	e2873102 	add	r3, r7, #-2147483648	; 0x80000000
  13f2c0:	e1a07003 	mov	r7, r3
  13f2c4:	e59f3644 	ldr	r3, [pc, #1604]	; 13f910 <printf_core+0x1058>
  13f2c8:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13f2cc:	e3e02000 	mvn	r2, #0
  13f2d0:	e59f363c 	ldr	r3, [pc, #1596]	; 13f914 <printf_core+0x105c>
  13f2d4:	e3c71102 	bic	r1, r7, #-2147483648	; 0x80000000
  13f2d8:	e1510003 	cmp	r1, r3
  13f2dc:	01560002 	cmpeq	r6, r2
  13f2e0:	e1a00006 	mov	r0, r6
  13f2e4:	9a0000fb 	bls	13f6d8 <printf_core+0xe20>
  13f2e8:	e59d3010 	ldr	r3, [sp, #16]
  13f2ec:	e59fe624 	ldr	lr, [pc, #1572]	; 13f918 <printf_core+0x1060>
  13f2f0:	e59fc624 	ldr	ip, [pc, #1572]	; 13f91c <printf_core+0x1064>
  13f2f4:	e213a020 	ands	sl, r3, #32
  13f2f8:	e1a02006 	mov	r2, r6
  13f2fc:	e1a03007 	mov	r3, r7
  13f300:	e1a01007 	mov	r1, r7
  13f304:	01a0600e 	moveq	r6, lr
  13f308:	11a0600c 	movne	r6, ip
  13f30c:	eb001729 	bl	144fb8 <__aeabi_dcmpeq>
  13f310:	e3500000 	cmp	r0, #0
  13f314:	1a000004 	bne	13f32c <printf_core+0xa74>
  13f318:	e59fe600 	ldr	lr, [pc, #1536]	; 13f920 <printf_core+0x1068>
  13f31c:	e59fc600 	ldr	ip, [pc, #1536]	; 13f924 <printf_core+0x106c>
  13f320:	e35a0000 	cmp	sl, #0
  13f324:	01a0600e 	moveq	r6, lr
  13f328:	11a0600c 	movne	r6, ip
  13f32c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f330:	e283a003 	add	sl, r3, #3
  13f334:	e159000a 	cmp	r9, sl
  13f338:	c3a07000 	movgt	r7, #0
  13f33c:	d3a07001 	movle	r7, #1
  13f340:	e3180a02 	tst	r8, #8192	; 0x2000
  13f344:	01a03007 	moveq	r3, r7
  13f348:	13a03001 	movne	r3, #1
  13f34c:	e3530000 	cmp	r3, #0
  13f350:	0a00042e 	beq	140410 <printf_core+0x1b58>
  13f354:	e59d3004 	ldr	r3, [sp, #4]
  13f358:	e5933000 	ldr	r3, [r3]
  13f35c:	e3130020 	tst	r3, #32
  13f360:	0a00032c 	beq	140018 <printf_core+0x1760>
  13f364:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13f368:	e3130a12 	tst	r3, #73728	; 0x12000
  13f36c:	13a07001 	movne	r7, #1
  13f370:	e3570000 	cmp	r7, #0
  13f374:	0a00034f 	beq	1400b8 <printf_core+0x1800>
  13f378:	e159000a 	cmp	r9, sl
  13f37c:	a1a0a009 	movge	sl, r9
  13f380:	e35a0000 	cmp	sl, #0
  13f384:	aafffef5 	bge	13ef60 <printf_core+0x6a8>
  13f388:	eafffef7 	b	13ef6c <printf_core+0x6b4>
  13f38c:	e3550008 	cmp	r5, #8
  13f390:	e3a03078 	mov	r3, #120	; 0x78
  13f394:	33a05008 	movcc	r5, #8
  13f398:	e3a0c020 	mov	ip, #32
  13f39c:	e58d3010 	str	r3, [sp, #16]
  13f3a0:	e3888008 	orr	r8, r8, #8
  13f3a4:	e28d3070 	add	r3, sp, #112	; 0x70
  13f3a8:	e893000c 	ldm	r3, {r2, r3}
  13f3ac:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13f3b0:	e1921003 	orrs	r1, r2, r3
  13f3b4:	e1a0b00a 	mov	fp, sl
  13f3b8:	0a00004b 	beq	13f4ec <printf_core+0xc34>
  13f3bc:	e59f6584 	ldr	r6, [pc, #1412]	; 13f948 <printf_core+0x1090>
  13f3c0:	e3a01000 	mov	r1, #0
  13f3c4:	e202000f 	and	r0, r2, #15
  13f3c8:	e1a0e222 	lsr	lr, r2, #4
  13f3cc:	e58d0020 	str	r0, [sp, #32]
  13f3d0:	e58d1024 	str	r1, [sp, #36]	; 0x24
  13f3d4:	e18eee03 	orr	lr, lr, r3, lsl #28
  13f3d8:	e1a01223 	lsr	r1, r3, #4
  13f3dc:	e1a03001 	mov	r3, r1
  13f3e0:	e1a0200e 	mov	r2, lr
  13f3e4:	e59d1020 	ldr	r1, [sp, #32]
  13f3e8:	e0860001 	add	r0, r6, r1
  13f3ec:	e5d01000 	ldrb	r1, [r0]
  13f3f0:	e1920003 	orrs	r0, r2, r3
  13f3f4:	e18c1001 	orr	r1, ip, r1
  13f3f8:	e56b1001 	strb	r1, [fp, #-1]!
  13f3fc:	1affffef 	bne	13f3c0 <printf_core+0xb08>
  13f400:	e2183008 	ands	r3, r8, #8
  13f404:	0a000039 	beq	13f4f0 <printf_core+0xc38>
  13f408:	e3a02002 	mov	r2, #2
  13f40c:	e59f34f4 	ldr	r3, [pc, #1268]	; 13f908 <printf_core+0x1050>
  13f410:	e58d2020 	str	r2, [sp, #32]
  13f414:	e59d2010 	ldr	r2, [sp, #16]
  13f418:	e0833242 	add	r3, r3, r2, asr #4
  13f41c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f420:	eafffdca 	b	13eb50 <printf_core+0x298>
  13f424:	e59db070 	ldr	fp, [sp, #112]	; 0x70
  13f428:	e59f34f8 	ldr	r3, [pc, #1272]	; 13f928 <printf_core+0x1070>
  13f42c:	e35b0000 	cmp	fp, #0
  13f430:	01a0b003 	moveq	fp, r3
  13f434:	eaffff84 	b	13f24c <printf_core+0x994>
  13f438:	e59d3010 	ldr	r3, [sp, #16]
  13f43c:	e203c020 	and	ip, r3, #32
  13f440:	eaffffd7 	b	13f3a4 <printf_core+0xaec>
  13f444:	e3a03000 	mov	r3, #0
  13f448:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13f44c:	e046600b 	sub	r6, r6, fp
  13f450:	e58d3020 	str	r3, [sp, #32]
  13f454:	e59f34ac 	ldr	r3, [pc, #1196]	; 13f908 <printf_core+0x1050>
  13f458:	e1560005 	cmp	r6, r5
  13f45c:	a1a05006 	movge	r5, r6
  13f460:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f464:	eafffdd3 	b	13ebb8 <printf_core+0x300>
  13f468:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f46c:	e59d2000 	ldr	r2, [sp]
  13f470:	e5832000 	str	r2, [r3]
  13f474:	eafffeb9 	b	13ef60 <printf_core+0x6a8>
  13f478:	e59d2000 	ldr	r2, [sp]
  13f47c:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13f480:	e1a03fc2 	asr	r3, r2, #31
  13f484:	e881000c 	stm	r1, {r2, r3}
  13f488:	eafffeb4 	b	13ef60 <printf_core+0x6a8>
  13f48c:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f490:	e59d2000 	ldr	r2, [sp]
  13f494:	e1c320b0 	strh	r2, [r3]
  13f498:	eafffeb0 	b	13ef60 <printf_core+0x6a8>
  13f49c:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f4a0:	e59d2000 	ldr	r2, [sp]
  13f4a4:	e5c32000 	strb	r2, [r3]
  13f4a8:	eafffeac 	b	13ef60 <printf_core+0x6a8>
  13f4ac:	e1a01006 	mov	r1, r6
  13f4b0:	e1a0000b 	mov	r0, fp
  13f4b4:	e59d2004 	ldr	r2, [sp, #4]
  13f4b8:	eb0011bc 	bl	143bb0 <__fwritex>
  13f4bc:	eafffddd 	b	13ec38 <printf_core+0x380>
  13f4c0:	e1a02005 	mov	r2, r5
  13f4c4:	e1a03006 	mov	r3, r6
  13f4c8:	e3a01030 	mov	r1, #48	; 0x30
  13f4cc:	e59d0004 	ldr	r0, [sp, #4]
  13f4d0:	ebfffccd 	bl	13e80c <pad.part.0>
  13f4d4:	eafffdd3 	b	13ec28 <printf_core+0x370>
  13f4d8:	e59d1020 	ldr	r1, [sp, #32]
  13f4dc:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  13f4e0:	e59d2004 	ldr	r2, [sp, #4]
  13f4e4:	eb0011b1 	bl	143bb0 <__fwritex>
  13f4e8:	eafffdc6 	b	13ec08 <printf_core+0x350>
  13f4ec:	e3a03000 	mov	r3, #0
  13f4f0:	e58d3020 	str	r3, [sp, #32]
  13f4f4:	e59f340c 	ldr	r3, [pc, #1036]	; 13f908 <printf_core+0x1050>
  13f4f8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f4fc:	eafffd93 	b	13eb50 <printf_core+0x298>
  13f500:	e3550000 	cmp	r5, #0
  13f504:	e1a0b005 	mov	fp, r5
  13f508:	bafffe97 	blt	13ef6c <printf_core+0x6b4>
  13f50c:	e1550009 	cmp	r5, r9
  13f510:	b3a03000 	movlt	r3, #0
  13f514:	a3a03001 	movge	r3, #1
  13f518:	e3180a12 	tst	r8, #73728	; 0x12000
  13f51c:	e58d3010 	str	r3, [sp, #16]
  13f520:	13a03001 	movne	r3, #1
  13f524:	e3530000 	cmp	r3, #0
  13f528:	0a000062 	beq	13f6b8 <printf_core+0xe00>
  13f52c:	e3550000 	cmp	r5, #0
  13f530:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13f534:	0a000025 	beq	13f5d0 <printf_core+0xd18>
  13f538:	e5971000 	ldr	r1, [r7]
  13f53c:	e3510000 	cmp	r1, #0
  13f540:	0a000022 	beq	13f5d0 <printf_core+0xd18>
  13f544:	e3a0a000 	mov	sl, #0
  13f548:	e58d401c 	str	r4, [sp, #28]
  13f54c:	e28d6068 	add	r6, sp, #104	; 0x68
  13f550:	e1a0400a 	mov	r4, sl
  13f554:	e59da004 	ldr	sl, [sp, #4]
  13f558:	ea000004 	b	13f570 <printf_core+0xcb8>
  13f55c:	e1540005 	cmp	r4, r5
  13f560:	2a000024 	bcs	13f5f8 <printf_core+0xd40>
  13f564:	e5b71004 	ldr	r1, [r7, #4]!
  13f568:	e3510000 	cmp	r1, #0
  13f56c:	0a000021 	beq	13f5f8 <printf_core+0xd40>
  13f570:	e1a00006 	mov	r0, r6
  13f574:	eb000fa1 	bl	143400 <wctomb>
  13f578:	e0844000 	add	r4, r4, r0
  13f57c:	e1540005 	cmp	r4, r5
  13f580:	8a00001c 	bhi	13f5f8 <printf_core+0xd40>
  13f584:	e59a2000 	ldr	r2, [sl]
  13f588:	e3120020 	tst	r2, #32
  13f58c:	1afffff2 	bne	13f55c <printf_core+0xca4>
  13f590:	e1a01000 	mov	r1, r0
  13f594:	e1a0200a 	mov	r2, sl
  13f598:	e1a00006 	mov	r0, r6
  13f59c:	eb001183 	bl	143bb0 <__fwritex>
  13f5a0:	eaffffed 	b	13f55c <printf_core+0xca4>
  13f5a4:	e3590000 	cmp	r9, #0
  13f5a8:	c3a03000 	movgt	r3, #0
  13f5ac:	d3a03001 	movle	r3, #1
  13f5b0:	e3180a12 	tst	r8, #73728	; 0x12000
  13f5b4:	e58d3010 	str	r3, [sp, #16]
  13f5b8:	13a03001 	movne	r3, #1
  13f5bc:	e3530000 	cmp	r3, #0
  13f5c0:	01a0b003 	moveq	fp, r3
  13f5c4:	01a0500b 	moveq	r5, fp
  13f5c8:	0a00003a 	beq	13f6b8 <printf_core+0xe00>
  13f5cc:	e3a0b000 	mov	fp, #0
  13f5d0:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13f5d4:	e3130a12 	tst	r3, #73728	; 0x12000
  13f5d8:	e59d3010 	ldr	r3, [sp, #16]
  13f5dc:	13a03001 	movne	r3, #1
  13f5e0:	e3530000 	cmp	r3, #0
  13f5e4:	0a00027d 	beq	13ffe0 <printf_core+0x1728>
  13f5e8:	e159000b 	cmp	r9, fp
  13f5ec:	a1a0a009 	movge	sl, r9
  13f5f0:	b1a0a00b 	movlt	sl, fp
  13f5f4:	eafffe59 	b	13ef60 <printf_core+0x6a8>
  13f5f8:	e59d401c 	ldr	r4, [sp, #28]
  13f5fc:	eafffff3 	b	13f5d0 <printf_core+0xd18>
  13f600:	e1a03007 	mov	r3, r7
  13f604:	e1a0200a 	mov	r2, sl
  13f608:	e3a01020 	mov	r1, #32
  13f60c:	e59d0004 	ldr	r0, [sp, #4]
  13f610:	ebfffc7d 	bl	13e80c <pad.part.0>
  13f614:	eafffd77 	b	13ebf8 <printf_core+0x340>
  13f618:	e1a03007 	mov	r3, r7
  13f61c:	e1a0200a 	mov	r2, sl
  13f620:	e3a01030 	mov	r1, #48	; 0x30
  13f624:	e59d0004 	ldr	r0, [sp, #4]
  13f628:	ebfffc77 	bl	13e80c <pad.part.0>
  13f62c:	eafffd7b 	b	13ec20 <printf_core+0x368>
  13f630:	e3a05000 	mov	r5, #0
  13f634:	e1a0b00a 	mov	fp, sl
  13f638:	e1a06005 	mov	r6, r5
  13f63c:	eafffd5d 	b	13ebb8 <printf_core+0x300>
  13f640:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  13f644:	e1a0000b 	mov	r0, fp
  13f648:	eb0007e2 	bl	1415d8 <strnlen>
  13f64c:	e7db3000 	ldrb	r3, [fp, r0]
  13f650:	e08b6000 	add	r6, fp, r0
  13f654:	e3530000 	cmp	r3, #0
  13f658:	0affff01 	beq	13f264 <printf_core+0x9ac>
  13f65c:	eafffe42 	b	13ef6c <printf_core+0x6b4>
  13f660:	e3180b02 	tst	r8, #2048	; 0x800
  13f664:	1a000278 	bne	14004c <printf_core+0x1794>
  13f668:	e59f22bc 	ldr	r2, [pc, #700]	; 13f92c <printf_core+0x1074>
  13f66c:	e2083001 	and	r3, r8, #1
  13f670:	e3530000 	cmp	r3, #0
  13f674:	e2821005 	add	r1, r2, #5
  13f678:	01a03002 	moveq	r3, r2
  13f67c:	11a03001 	movne	r3, r1
  13f680:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13f684:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f688:	13a03001 	movne	r3, #1
  13f68c:	e58d3030 	str	r3, [sp, #48]	; 0x30
  13f690:	eaffff0d 	b	13f2cc <printf_core+0xa14>
  13f694:	e3a03001 	mov	r3, #1
  13f698:	e2766000 	rsbs	r6, r6, #0
  13f69c:	e58d3020 	str	r3, [sp, #32]
  13f6a0:	e59f3260 	ldr	r3, [pc, #608]	; 13f908 <printf_core+0x1050>
  13f6a4:	e2e77000 	rsc	r7, r7, #0
  13f6a8:	e58d6070 	str	r6, [sp, #112]	; 0x70
  13f6ac:	e58d7074 	str	r7, [sp, #116]	; 0x74
  13f6b0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f6b4:	eafffe75 	b	13f090 <printf_core+0x7d8>
  13f6b8:	e1a0300b 	mov	r3, fp
  13f6bc:	e1a02009 	mov	r2, r9
  13f6c0:	e3a01020 	mov	r1, #32
  13f6c4:	e59d0004 	ldr	r0, [sp, #4]
  13f6c8:	ebfffc4f 	bl	13e80c <pad.part.0>
  13f6cc:	e3a03000 	mov	r3, #0
  13f6d0:	e58d3010 	str	r3, [sp, #16]
  13f6d4:	eaffff94 	b	13f52c <printf_core+0xc74>
  13f6d8:	e28d206c 	add	r2, sp, #108	; 0x6c
  13f6dc:	e1a01007 	mov	r1, r7
  13f6e0:	eb000f2f 	bl	1433a4 <frexpl>
  13f6e4:	e1a02000 	mov	r2, r0
  13f6e8:	e1a03001 	mov	r3, r1
  13f6ec:	eb0013f6 	bl	1446cc <__adddf3>
  13f6f0:	e3a03000 	mov	r3, #0
  13f6f4:	e3a02000 	mov	r2, #0
  13f6f8:	e58d001c 	str	r0, [sp, #28]
  13f6fc:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13f700:	eb00162c 	bl	144fb8 <__aeabi_dcmpeq>
  13f704:	e59d306c 	ldr	r3, [sp, #108]	; 0x6c
  13f708:	e3500000 	cmp	r0, #0
  13f70c:	02433001 	subeq	r3, r3, #1
  13f710:	158d3020 	strne	r3, [sp, #32]
  13f714:	058d3020 	streq	r3, [sp, #32]
  13f718:	058d306c 	streq	r3, [sp, #108]	; 0x6c
  13f71c:	e59d3010 	ldr	r3, [sp, #16]
  13f720:	e3833020 	orr	r3, r3, #32
  13f724:	e3530061 	cmp	r3, #97	; 0x61
  13f728:	e58d303c 	str	r3, [sp, #60]	; 0x3c
  13f72c:	0a000267 	beq	1400d0 <printf_core+0x1818>
  13f730:	e3550000 	cmp	r5, #0
  13f734:	ba000460 	blt	1408bc <printf_core+0x2004>
  13f738:	13a03001 	movne	r3, #1
  13f73c:	03a03000 	moveq	r3, #0
  13f740:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13f744:	e59d701c 	ldr	r7, [sp, #28]
  13f748:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
  13f74c:	e1a00007 	mov	r0, r7
  13f750:	e1a01006 	mov	r1, r6
  13f754:	e3a02000 	mov	r2, #0
  13f758:	e3a03000 	mov	r3, #0
  13f75c:	eb001615 	bl	144fb8 <__aeabi_dcmpeq>
  13f760:	e3500000 	cmp	r0, #0
  13f764:	1a00000a 	bne	13f794 <printf_core+0xedc>
  13f768:	e59f31c0 	ldr	r3, [pc, #448]	; 13f930 <printf_core+0x1078>
  13f76c:	e1a00007 	mov	r0, r7
  13f770:	e1a01006 	mov	r1, r6
  13f774:	e3a02000 	mov	r2, #0
  13f778:	eb0014c0 	bl	144a80 <__aeabi_dmul>
  13f77c:	e59d3020 	ldr	r3, [sp, #32]
  13f780:	e58d001c 	str	r0, [sp, #28]
  13f784:	e243301c 	sub	r3, r3, #28
  13f788:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13f78c:	e58d3020 	str	r3, [sp, #32]
  13f790:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f794:	e59d3020 	ldr	r3, [sp, #32]
  13f798:	e59d601c 	ldr	r6, [sp, #28]
  13f79c:	e3530000 	cmp	r3, #0
  13f7a0:	a28d3e1f 	addge	r3, sp, #496	; 0x1f0
  13f7a4:	b28d30d0 	addlt	r3, sp, #208	; 0xd0
  13f7a8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f7ac:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13f7b0:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
  13f7b4:	e1a01007 	mov	r1, r7
  13f7b8:	e1a00006 	mov	r0, r6
  13f7bc:	eb00162d 	bl	145078 <__aeabi_d2uiz>
  13f7c0:	e48b0004 	str	r0, [fp], #4
  13f7c4:	eb00146b 	bl	144978 <__aeabi_ui2d>
  13f7c8:	e1a02000 	mov	r2, r0
  13f7cc:	e1a03001 	mov	r3, r1
  13f7d0:	e1a00006 	mov	r0, r6
  13f7d4:	e1a01007 	mov	r1, r7
  13f7d8:	eb0013ba 	bl	1446c8 <__aeabi_dsub>
  13f7dc:	e3a02000 	mov	r2, #0
  13f7e0:	e59f314c 	ldr	r3, [pc, #332]	; 13f934 <printf_core+0x107c>
  13f7e4:	eb0014a5 	bl	144a80 <__aeabi_dmul>
  13f7e8:	e3a02000 	mov	r2, #0
  13f7ec:	e3a03000 	mov	r3, #0
  13f7f0:	e1a07001 	mov	r7, r1
  13f7f4:	e1a06000 	mov	r6, r0
  13f7f8:	eb0015ee 	bl	144fb8 <__aeabi_dcmpeq>
  13f7fc:	e3500000 	cmp	r0, #0
  13f800:	0affffeb 	beq	13f7b4 <printf_core+0xefc>
  13f804:	e59d2020 	ldr	r2, [sp, #32]
  13f808:	e1a0300b 	mov	r3, fp
  13f80c:	e3520000 	cmp	r2, #0
  13f810:	e58db01c 	str	fp, [sp, #28]
  13f814:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13f818:	da000067 	ble	13f9bc <printf_core+0x1104>
  13f81c:	e58da048 	str	sl, [sp, #72]	; 0x48
  13f820:	e1a0a003 	mov	sl, r3
  13f824:	e58d5060 	str	r5, [sp, #96]	; 0x60
  13f828:	e58d4064 	str	r4, [sp, #100]	; 0x64
  13f82c:	e58d9058 	str	r9, [sp, #88]	; 0x58
  13f830:	e58d805c 	str	r8, [sp, #92]	; 0x5c
  13f834:	e28d9050 	add	r9, sp, #80	; 0x50
  13f838:	e8990300 	ldm	r9, {r8, r9}
  13f83c:	e59d2020 	ldr	r2, [sp, #32]
  13f840:	e24a3004 	sub	r3, sl, #4
  13f844:	e352001d 	cmp	r2, #29
  13f848:	b1a05002 	movlt	r5, r2
  13f84c:	a3a0501d 	movge	r5, #29
  13f850:	e153000b 	cmp	r3, fp
  13f854:	e58d3038 	str	r3, [sp, #56]	; 0x38
  13f858:	3a00001e 	bcc	13f8d8 <printf_core+0x1020>
  13f85c:	e1a04003 	mov	r4, r3
  13f860:	e2453020 	sub	r3, r5, #32
  13f864:	e58da040 	str	sl, [sp, #64]	; 0x40
  13f868:	e3a00000 	mov	r0, #0
  13f86c:	e1a0a003 	mov	sl, r3
  13f870:	e2652020 	rsb	r2, r5, #32
  13f874:	e58d201c 	str	r2, [sp, #28]
  13f878:	e5941000 	ldr	r1, [r4]
  13f87c:	e59dc01c 	ldr	ip, [sp, #28]
  13f880:	e1a09a11 	lsl	r9, r1, sl
  13f884:	e1a08511 	lsl	r8, r1, r5
  13f888:	e0986000 	adds	r6, r8, r0
  13f88c:	e1899c31 	orr	r9, r9, r1, lsr ip
  13f890:	e2a97000 	adc	r7, r9, #0
  13f894:	e28f305c 	add	r3, pc, #92	; 0x5c
  13f898:	e893000c 	ldm	r3, {r2, r3}
  13f89c:	e1a00006 	mov	r0, r6
  13f8a0:	e1a01007 	mov	r1, r7
  13f8a4:	eb00163d 	bl	1451a0 <__aeabi_uldivmod>
  13f8a8:	e1a00006 	mov	r0, r6
  13f8ac:	e4042004 	str	r2, [r4], #-4
  13f8b0:	e1a01007 	mov	r1, r7
  13f8b4:	e28f303c 	add	r3, pc, #60	; 0x3c
  13f8b8:	e893000c 	ldm	r3, {r2, r3}
  13f8bc:	eb001637 	bl	1451a0 <__aeabi_uldivmod>
  13f8c0:	e154000b 	cmp	r4, fp
  13f8c4:	2affffeb 	bcs	13f878 <printf_core+0xfc0>
  13f8c8:	e3500000 	cmp	r0, #0
  13f8cc:	e59da040 	ldr	sl, [sp, #64]	; 0x40
  13f8d0:	150b0004 	strne	r0, [fp, #-4]
  13f8d4:	124bb004 	subne	fp, fp, #4
  13f8d8:	e15b000a 	cmp	fp, sl
  13f8dc:	2a000028 	bcs	13f984 <printf_core+0x10cc>
  13f8e0:	e51a3004 	ldr	r3, [sl, #-4]
  13f8e4:	e3530000 	cmp	r3, #0
  13f8e8:	059d3038 	ldreq	r3, [sp, #56]	; 0x38
  13f8ec:	0a000021 	beq	13f978 <printf_core+0x10c0>
  13f8f0:	ea000023 	b	13f984 <printf_core+0x10cc>
  13f8f4:	e1a00000 	nop			; (mov r0, r0)
  13f8f8:	3b9aca00 	.word	0x3b9aca00
  13f8fc:	00000000 	.word	0x00000000
  13f900:	00012889 	.word	0x00012889
  13f904:	0ccccccc 	.word	0x0ccccccc
  13f908:	0014cd58 	.word	0x0014cd58
  13f90c:	0014cd94 	.word	0x0014cd94
  13f910:	0014cd6c 	.word	0x0014cd6c
  13f914:	7fefffff 	.word	0x7fefffff
  13f918:	0014cd84 	.word	0x0014cd84
  13f91c:	0014cd80 	.word	0x0014cd80
  13f920:	0014cd8c 	.word	0x0014cd8c
  13f924:	0014cd88 	.word	0x0014cd88
  13f928:	0014cd64 	.word	0x0014cd64
  13f92c:	0014cd6d 	.word	0x0014cd6d
  13f930:	41b00000 	.word	0x41b00000
  13f934:	41cdcd65 	.word	0x41cdcd65
  13f938:	38e38e39 	.word	0x38e38e39
  13f93c:	3b9aca00 	.word	0x3b9aca00
  13f940:	0014cd59 	.word	0x0014cd59
  13f944:	0014cd6f 	.word	0x0014cd6f
  13f948:	0014cf64 	.word	0x0014cf64
  13f94c:	cccccccd 	.word	0xcccccccd
  13f950:	0014cd90 	.word	0x0014cd90
  13f954:	3b9ac9ff 	.word	0x3b9ac9ff
  13f958:	40300000 	.word	0x40300000
  13f95c:	3fe00000 	.word	0x3fe00000
  13f960:	43400000 	.word	0x43400000
  13f964:	3ff00000 	.word	0x3ff00000
  13f968:	3ff80000 	.word	0x3ff80000
  13f96c:	e5332004 	ldr	r2, [r3, #-4]!
  13f970:	e3520000 	cmp	r2, #0
  13f974:	1a000002 	bne	13f984 <printf_core+0x10cc>
  13f978:	e153000b 	cmp	r3, fp
  13f97c:	e1a0a003 	mov	sl, r3
  13f980:	8afffff9 	bhi	13f96c <printf_core+0x10b4>
  13f984:	e59d3020 	ldr	r3, [sp, #32]
  13f988:	e0433005 	sub	r3, r3, r5
  13f98c:	e3530000 	cmp	r3, #0
  13f990:	e58d3020 	str	r3, [sp, #32]
  13f994:	caffffa8 	bgt	13f83c <printf_core+0xf84>
  13f998:	e58d8050 	str	r8, [sp, #80]	; 0x50
  13f99c:	e58d9054 	str	r9, [sp, #84]	; 0x54
  13f9a0:	e58da01c 	str	sl, [sp, #28]
  13f9a4:	e59d5060 	ldr	r5, [sp, #96]	; 0x60
  13f9a8:	e59da048 	ldr	sl, [sp, #72]	; 0x48
  13f9ac:	e59d4064 	ldr	r4, [sp, #100]	; 0x64
  13f9b0:	e59d805c 	ldr	r8, [sp, #92]	; 0x5c
  13f9b4:	e59d9058 	ldr	r9, [sp, #88]	; 0x58
  13f9b8:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f9bc:	e59dc020 	ldr	ip, [sp, #32]
  13f9c0:	e35c0000 	cmp	ip, #0
  13f9c4:	0a000037 	beq	13faa8 <printf_core+0x11f0>
  13f9c8:	e58da038 	str	sl, [sp, #56]	; 0x38
  13f9cc:	e1a0a00c 	mov	sl, ip
  13f9d0:	e51f10a0 	ldr	r1, [pc, #-160]	; 13f938 <printf_core+0x1080>
  13f9d4:	e2850019 	add	r0, r5, #25
  13f9d8:	e0832190 	umull	r2, r3, r0, r1
  13f9dc:	e1a030a3 	lsr	r3, r3, #1
  13f9e0:	e2836001 	add	r6, r3, #1
  13f9e4:	e1a03106 	lsl	r3, r6, #2
  13f9e8:	e51f70b4 	ldr	r7, [pc, #-180]	; 13f93c <printf_core+0x1084>
  13f9ec:	e59d001c 	ldr	r0, [sp, #28]
  13f9f0:	e58d3020 	str	r3, [sp, #32]
  13f9f4:	e58d9040 	str	r9, [sp, #64]	; 0x40
  13f9f8:	e37a0009 	cmn	sl, #9
  13f9fc:	a26ac000 	rsbge	ip, sl, #0
  13fa00:	b28aa009 	addlt	sl, sl, #9
  13fa04:	b3a0c009 	movlt	ip, #9
  13fa08:	a3a0a000 	movge	sl, #0
  13fa0c:	e150000b 	cmp	r0, fp
  13fa10:	e59b1000 	ldr	r1, [fp]
  13fa14:	9a000191 	bls	140060 <printf_core+0x17a8>
  13fa18:	e3a0e001 	mov	lr, #1
  13fa1c:	e1a0ec1e 	lsl	lr, lr, ip
  13fa20:	e1a0200b 	mov	r2, fp
  13fa24:	e3a03000 	mov	r3, #0
  13fa28:	e24ee001 	sub	lr, lr, #1
  13fa2c:	e1a09c57 	asr	r9, r7, ip
  13fa30:	ea000000 	b	13fa38 <printf_core+0x1180>
  13fa34:	e5921000 	ldr	r1, [r2]
  13fa38:	e0833c31 	add	r3, r3, r1, lsr ip
  13fa3c:	e4823004 	str	r3, [r2], #4
  13fa40:	e00e3001 	and	r3, lr, r1
  13fa44:	e0010399 	mul	r1, r9, r3
  13fa48:	e1520000 	cmp	r2, r0
  13fa4c:	e1a03001 	mov	r3, r1
  13fa50:	3afffff7 	bcc	13fa34 <printf_core+0x117c>
  13fa54:	e59b2000 	ldr	r2, [fp]
  13fa58:	e3520000 	cmp	r2, #0
  13fa5c:	028bb004 	addeq	fp, fp, #4
  13fa60:	e3510000 	cmp	r1, #0
  13fa64:	15801000 	strne	r1, [r0]
  13fa68:	12800004 	addne	r0, r0, #4
  13fa6c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13fa70:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13fa74:	e3520066 	cmp	r2, #102	; 0x66
  13fa78:	11a0300b 	movne	r3, fp
  13fa7c:	e0402003 	sub	r2, r0, r3
  13fa80:	e1560142 	cmp	r6, r2, asr #2
  13fa84:	b59d2020 	ldrlt	r2, [sp, #32]
  13fa88:	b0830002 	addlt	r0, r3, r2
  13fa8c:	e35a0000 	cmp	sl, #0
  13fa90:	1affffd8 	bne	13f9f8 <printf_core+0x1140>
  13fa94:	e1a0300a 	mov	r3, sl
  13fa98:	e59d9040 	ldr	r9, [sp, #64]	; 0x40
  13fa9c:	e59da038 	ldr	sl, [sp, #56]	; 0x38
  13faa0:	e58d001c 	str	r0, [sp, #28]
  13faa4:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13faa8:	e59d301c 	ldr	r3, [sp, #28]
  13faac:	e153000b 	cmp	r3, fp
  13fab0:	91a03005 	movls	r3, r5
  13fab4:	93a06000 	movls	r6, #0
  13fab8:	9a000013 	bls	13fb0c <printf_core+0x1254>
  13fabc:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13fac0:	e59b1000 	ldr	r1, [fp]
  13fac4:	e043600b 	sub	r6, r3, fp
  13fac8:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13facc:	e1a06146 	asr	r6, r6, #2
  13fad0:	e2530066 	subs	r0, r3, #102	; 0x66
  13fad4:	13a00001 	movne	r0, #1
  13fad8:	e3510009 	cmp	r1, #9
  13fadc:	e0866186 	add	r6, r6, r6, lsl #3
  13fae0:	83a0200a 	movhi	r2, #10
  13fae4:	81a03000 	movhi	r3, r0
  13fae8:	9a000005 	bls	13fb04 <printf_core+0x124c>
  13faec:	e0822102 	add	r2, r2, r2, lsl #2
  13faf0:	e1a02082 	lsl	r2, r2, #1
  13faf4:	e1510002 	cmp	r1, r2
  13faf8:	e2866001 	add	r6, r6, #1
  13fafc:	2afffffa 	bcs	13faec <printf_core+0x1234>
  13fb00:	e1a00003 	mov	r0, r3
  13fb04:	e0030096 	mul	r3, r6, r0
  13fb08:	e0453003 	sub	r3, r5, r3
  13fb0c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13fb10:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
  13fb14:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
  13fb18:	e3520067 	cmp	r2, #103	; 0x67
  13fb1c:	13a01000 	movne	r1, #0
  13fb20:	02011001 	andeq	r1, r1, #1
  13fb24:	e59d201c 	ldr	r2, [sp, #28]
  13fb28:	e0433001 	sub	r3, r3, r1
  13fb2c:	e042200c 	sub	r2, r2, ip
  13fb30:	e1a02142 	asr	r2, r2, #2
  13fb34:	e2422001 	sub	r2, r2, #1
  13fb38:	e0822182 	add	r2, r2, r2, lsl #3
  13fb3c:	e1530002 	cmp	r3, r2
  13fb40:	aa000057 	bge	13fca4 <printf_core+0x13ec>
  13fb44:	e51f2214 	ldr	r2, [pc, #-532]	; 13f938 <printf_core+0x1080>
  13fb48:	e2833b09 	add	r3, r3, #9216	; 0x2400
  13fb4c:	e0c10293 	smull	r0, r1, r3, r2
  13fb50:	e1a07fc3 	asr	r7, r3, #31
  13fb54:	e06770c1 	rsb	r7, r7, r1, asr #1
  13fb58:	e0872187 	add	r2, r7, r7, lsl #3
  13fb5c:	e0433002 	sub	r3, r3, r2
  13fb60:	e2833001 	add	r3, r3, #1
  13fb64:	e2477fff 	sub	r7, r7, #1020	; 0x3fc
  13fb68:	e247710f 	sub	r7, r7, #-1073741821	; 0xc0000003
  13fb6c:	e3530009 	cmp	r3, #9
  13fb70:	e08c7107 	add	r7, ip, r7, lsl #2
  13fb74:	0a00036b 	beq	140928 <printf_core+0x2070>
  13fb78:	e3a0200a 	mov	r2, #10
  13fb7c:	e2833001 	add	r3, r3, #1
  13fb80:	e0822102 	add	r2, r2, r2, lsl #2
  13fb84:	e3530009 	cmp	r3, #9
  13fb88:	e1a02082 	lsl	r2, r2, #1
  13fb8c:	1afffffa 	bne	13fb7c <printf_core+0x12c4>
  13fb90:	e58d2038 	str	r2, [sp, #56]	; 0x38
  13fb94:	e5973000 	ldr	r3, [r7]
  13fb98:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  13fb9c:	e1a00003 	mov	r0, r3
  13fba0:	e58d3048 	str	r3, [sp, #72]	; 0x48
  13fba4:	ebffe39f 	bl	138a28 <__aeabi_uidivmod>
  13fba8:	e2513000 	subs	r3, r1, #0
  13fbac:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13fbb0:	1a000003 	bne	13fbc4 <printf_core+0x130c>
  13fbb4:	e59d301c 	ldr	r3, [sp, #28]
  13fbb8:	e287c004 	add	ip, r7, #4
  13fbbc:	e153000c 	cmp	r3, ip
  13fbc0:	0a000033 	beq	13fc94 <printf_core+0x13dc>
  13fbc4:	e3100001 	tst	r0, #1
  13fbc8:	1a000336 	bne	1408a8 <printf_core+0x1ff0>
  13fbcc:	e51f3298 	ldr	r3, [pc, #-664]	; 13f93c <printf_core+0x1084>
  13fbd0:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13fbd4:	e157000b 	cmp	r7, fp
  13fbd8:	e0422003 	sub	r2, r2, r3
  13fbdc:	e16f2f12 	clz	r2, r2
  13fbe0:	e1a022a2 	lsr	r2, r2, #5
  13fbe4:	93a02000 	movls	r2, #0
  13fbe8:	e3520000 	cmp	r2, #0
  13fbec:	0a000329 	beq	140898 <printf_core+0x1fe0>
  13fbf0:	e5173004 	ldr	r3, [r7, #-4]
  13fbf4:	e51f229c 	ldr	r2, [pc, #-668]	; 13f960 <printf_core+0x10a8>
  13fbf8:	e2033001 	and	r3, r3, #1
  13fbfc:	e58d2020 	str	r2, [sp, #32]
  13fc00:	e58d3040 	str	r3, [sp, #64]	; 0x40
  13fc04:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13fc08:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13fc0c:	e15300c2 	cmp	r3, r2, asr #1
  13fc10:	3a00031d 	bcc	14088c <printf_core+0x1fd4>
  13fc14:	13a0e000 	movne	lr, #0
  13fc18:	151fc2b8 	ldrne	ip, [pc, #-696]	; 13f968 <printf_core+0x10b0>
  13fc1c:	0a00032a 	beq	1408cc <printf_core+0x2014>
  13fc20:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13fc24:	e3530000 	cmp	r3, #0
  13fc28:	0a000006 	beq	13fc48 <printf_core+0x1390>
  13fc2c:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  13fc30:	e5d33000 	ldrb	r3, [r3]
  13fc34:	e353002d 	cmp	r3, #45	; 0x2d
  13fc38:	059d3020 	ldreq	r3, [sp, #32]
  13fc3c:	028cc102 	addeq	ip, ip, #-2147483648	; 0x80000000
  13fc40:	02833102 	addeq	r3, r3, #-2147483648	; 0x80000000
  13fc44:	058d3020 	streq	r3, [sp, #32]
  13fc48:	e1a0200e 	mov	r2, lr
  13fc4c:	e1a0300c 	mov	r3, ip
  13fc50:	e59de044 	ldr	lr, [sp, #68]	; 0x44
  13fc54:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
  13fc58:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13fc5c:	e04cc00e 	sub	ip, ip, lr
  13fc60:	e59d1020 	ldr	r1, [sp, #32]
  13fc64:	e58dc044 	str	ip, [sp, #68]	; 0x44
  13fc68:	eb001297 	bl	1446cc <__adddf3>
  13fc6c:	e1a02000 	mov	r2, r0
  13fc70:	e1a03001 	mov	r3, r1
  13fc74:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13fc78:	e59d1020 	ldr	r1, [sp, #32]
  13fc7c:	eb0014cd 	bl	144fb8 <__aeabi_dcmpeq>
  13fc80:	e2502000 	subs	r2, r0, #0
  13fc84:	0a0002ab 	beq	140738 <printf_core+0x1e80>
  13fc88:	e1a0c007 	mov	ip, r7
  13fc8c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13fc90:	e48c3004 	str	r3, [ip], #4
  13fc94:	e59d301c 	ldr	r3, [sp, #28]
  13fc98:	e153000c 	cmp	r3, ip
  13fc9c:	21a0300c 	movcs	r3, ip
  13fca0:	e58d301c 	str	r3, [sp, #28]
  13fca4:	e59d301c 	ldr	r3, [sp, #28]
  13fca8:	e15b0003 	cmp	fp, r3
  13fcac:	2a00000c 	bcs	13fce4 <printf_core+0x142c>
  13fcb0:	e5133004 	ldr	r3, [r3, #-4]
  13fcb4:	e3530000 	cmp	r3, #0
  13fcb8:	059d301c 	ldreq	r3, [sp, #28]
  13fcbc:	02433004 	subeq	r3, r3, #4
  13fcc0:	0a000003 	beq	13fcd4 <printf_core+0x141c>
  13fcc4:	ea000006 	b	13fce4 <printf_core+0x142c>
  13fcc8:	e5332004 	ldr	r2, [r3, #-4]!
  13fccc:	e3520000 	cmp	r2, #0
  13fcd0:	1a000002 	bne	13fce0 <printf_core+0x1428>
  13fcd4:	e153000b 	cmp	r3, fp
  13fcd8:	e1a01003 	mov	r1, r3
  13fcdc:	8afffff9 	bhi	13fcc8 <printf_core+0x1410>
  13fce0:	e58d101c 	str	r1, [sp, #28]
  13fce4:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13fce8:	e3530067 	cmp	r3, #103	; 0x67
  13fcec:	0a000192 	beq	14033c <printf_core+0x1a84>
  13fcf0:	e3550000 	cmp	r5, #0
  13fcf4:	1a00018b 	bne	140328 <printf_core+0x1a70>
  13fcf8:	e3a02001 	mov	r2, #1
  13fcfc:	e1a031a8 	lsr	r3, r8, #3
  13fd00:	e0033002 	and	r3, r3, r2
  13fd04:	e3e0e102 	mvn	lr, #-2147483648	; 0x80000000
  13fd08:	e59d1010 	ldr	r1, [sp, #16]
  13fd0c:	e0833002 	add	r3, r3, r2
  13fd10:	e381a020 	orr	sl, r1, #32
  13fd14:	e35a0066 	cmp	sl, #102	; 0x66
  13fd18:	e04ee003 	sub	lr, lr, r3
  13fd1c:	0a000280 	beq	140724 <printf_core+0x1e6c>
  13fd20:	e026cfc6 	eor	ip, r6, r6, asr #31
  13fd24:	e28d7090 	add	r7, sp, #144	; 0x90
  13fd28:	e3560000 	cmp	r6, #0
  13fd2c:	e04ccfc6 	sub	ip, ip, r6, asr #31
  13fd30:	e1a02007 	mov	r2, r7
  13fd34:	0a00000a 	beq	13fd64 <printf_core+0x14ac>
  13fd38:	e58d3020 	str	r3, [sp, #32]
  13fd3c:	e51f33f8 	ldr	r3, [pc, #-1016]	; 13f94c <printf_core+0x1094>
  13fd40:	e081039c 	umull	r0, r1, ip, r3
  13fd44:	e1a001a1 	lsr	r0, r1, #3
  13fd48:	e0801100 	add	r1, r0, r0, lsl #2
  13fd4c:	e04c1081 	sub	r1, ip, r1, lsl #1
  13fd50:	e2811030 	add	r1, r1, #48	; 0x30
  13fd54:	e250c000 	subs	ip, r0, #0
  13fd58:	e5621001 	strb	r1, [r2, #-1]!
  13fd5c:	1afffff6 	bne	13fd3c <printf_core+0x1484>
  13fd60:	e59d3020 	ldr	r3, [sp, #32]
  13fd64:	e0471002 	sub	r1, r7, r2
  13fd68:	e3510001 	cmp	r1, #1
  13fd6c:	ca000004 	bgt	13fd84 <printf_core+0x14cc>
  13fd70:	e3a01030 	mov	r1, #48	; 0x30
  13fd74:	e5621001 	strb	r1, [r2, #-1]!
  13fd78:	e0470002 	sub	r0, r7, r2
  13fd7c:	e3500001 	cmp	r0, #1
  13fd80:	dafffffb 	ble	13fd74 <printf_core+0x14bc>
  13fd84:	e3560000 	cmp	r6, #0
  13fd88:	a3a0102b 	movge	r1, #43	; 0x2b
  13fd8c:	b3a0102d 	movlt	r1, #45	; 0x2d
  13fd90:	e2420002 	sub	r0, r2, #2
  13fd94:	e0477000 	sub	r7, r7, r0
  13fd98:	e58d004c 	str	r0, [sp, #76]	; 0x4c
  13fd9c:	e59d0010 	ldr	r0, [sp, #16]
  13fda0:	e157000e 	cmp	r7, lr
  13fda4:	e5420002 	strb	r0, [r2, #-2]
  13fda8:	e5421001 	strb	r1, [r2, #-1]
  13fdac:	cafffc6e 	bgt	13ef6c <printf_core+0x6b4>
  13fdb0:	e0833007 	add	r3, r3, r7
  13fdb4:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13fdb8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  13fdbc:	e0422001 	sub	r2, r2, r1
  13fdc0:	e1520003 	cmp	r2, r3
  13fdc4:	bafffc68 	blt	13ef6c <printf_core+0x6b4>
  13fdc8:	e0813003 	add	r3, r1, r3
  13fdcc:	e1590003 	cmp	r9, r3
  13fdd0:	e58d3010 	str	r3, [sp, #16]
  13fdd4:	c3a03000 	movgt	r3, #0
  13fdd8:	d3a03001 	movle	r3, #1
  13fddc:	e3180a12 	tst	r8, #73728	; 0x12000
  13fde0:	e58d3020 	str	r3, [sp, #32]
  13fde4:	13a03001 	movne	r3, #1
  13fde8:	e3530000 	cmp	r3, #0
  13fdec:	0a000246 	beq	14070c <printf_core+0x1e54>
  13fdf0:	e59d3004 	ldr	r3, [sp, #4]
  13fdf4:	e5933000 	ldr	r3, [r3]
  13fdf8:	e3130020 	tst	r3, #32
  13fdfc:	0a00023d 	beq	1406f8 <printf_core+0x1e40>
  13fe00:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13fe04:	e3130a12 	tst	r3, #73728	; 0x12000
  13fe08:	e59d3020 	ldr	r3, [sp, #32]
  13fe0c:	13a03001 	movne	r3, #1
  13fe10:	e3530000 	cmp	r3, #0
  13fe14:	0a000231 	beq	1406e0 <printf_core+0x1e28>
  13fe18:	e35a0066 	cmp	sl, #102	; 0x66
  13fe1c:	0a00018f 	beq	140460 <printf_core+0x1ba8>
  13fe20:	e59d301c 	ldr	r3, [sp, #28]
  13fe24:	e15b0003 	cmp	fp, r3
  13fe28:	228b3004 	addcs	r3, fp, #4
  13fe2c:	258d301c 	strcs	r3, [sp, #28]
  13fe30:	e59d301c 	ldr	r3, [sp, #28]
  13fe34:	e15b0003 	cmp	fp, r3
  13fe38:	23a03000 	movcs	r3, #0
  13fe3c:	33a03001 	movcc	r3, #1
  13fe40:	e3550000 	cmp	r5, #0
  13fe44:	b3a03000 	movlt	r3, #0
  13fe48:	e3530000 	cmp	r3, #0
  13fe4c:	0a000036 	beq	13ff2c <printf_core+0x1674>
  13fe50:	e1a0600b 	mov	r6, fp
  13fe54:	e28d7090 	add	r7, sp, #144	; 0x90
  13fe58:	e58d9030 	str	r9, [sp, #48]	; 0x30
  13fe5c:	e59d9004 	ldr	r9, [sp, #4]
  13fe60:	e287a009 	add	sl, r7, #9
  13fe64:	e58d802c 	str	r8, [sp, #44]	; 0x2c
  13fe68:	e58d4034 	str	r4, [sp, #52]	; 0x34
  13fe6c:	e5962000 	ldr	r2, [r6]
  13fe70:	e599e000 	ldr	lr, [r9]
  13fe74:	e3520000 	cmp	r2, #0
  13fe78:	1287c009 	addne	ip, r7, #9
  13fe7c:	0a000046 	beq	13ff9c <printf_core+0x16e4>
  13fe80:	e51f353c 	ldr	r3, [pc, #-1340]	; 13f94c <printf_core+0x1094>
  13fe84:	e0810392 	umull	r0, r1, r2, r3
  13fe88:	e1a031a1 	lsr	r3, r1, #3
  13fe8c:	e0831103 	add	r1, r3, r3, lsl #2
  13fe90:	e0422081 	sub	r2, r2, r1, lsl #1
  13fe94:	e2821030 	add	r1, r2, #48	; 0x30
  13fe98:	e2532000 	subs	r2, r3, #0
  13fe9c:	e56c1001 	strb	r1, [ip, #-1]!
  13fea0:	1afffff6 	bne	13fe80 <printf_core+0x15c8>
  13fea4:	e2872009 	add	r2, r7, #9
  13fea8:	e15c0002 	cmp	ip, r2
  13feac:	0a00003a 	beq	13ff9c <printf_core+0x16e4>
  13feb0:	e15b0006 	cmp	fp, r6
  13feb4:	e20ee020 	and	lr, lr, #32
  13feb8:	0a00003d 	beq	13ffb4 <printf_core+0x16fc>
  13febc:	e15c0007 	cmp	ip, r7
  13fec0:	9a000003 	bls	13fed4 <printf_core+0x161c>
  13fec4:	e3a02030 	mov	r2, #48	; 0x30
  13fec8:	e56c2001 	strb	r2, [ip, #-1]!
  13fecc:	e15c0007 	cmp	ip, r7
  13fed0:	8afffffc 	bhi	13fec8 <printf_core+0x1610>
  13fed4:	e04a400c 	sub	r4, sl, ip
  13fed8:	e35e0000 	cmp	lr, #0
  13fedc:	1a000005 	bne	13fef8 <printf_core+0x1640>
  13fee0:	e1550004 	cmp	r5, r4
  13fee4:	e1a0000c 	mov	r0, ip
  13fee8:	b1a01005 	movlt	r1, r5
  13feec:	a1a01004 	movge	r1, r4
  13fef0:	e1a02009 	mov	r2, r9
  13fef4:	eb000f2d 	bl	143bb0 <__fwritex>
  13fef8:	e59d201c 	ldr	r2, [sp, #28]
  13fefc:	e2866004 	add	r6, r6, #4
  13ff00:	e1560002 	cmp	r6, r2
  13ff04:	e0455004 	sub	r5, r5, r4
  13ff08:	23a02000 	movcs	r2, #0
  13ff0c:	33a02001 	movcc	r2, #1
  13ff10:	e3550000 	cmp	r5, #0
  13ff14:	b3a02000 	movlt	r2, #0
  13ff18:	e3520000 	cmp	r2, #0
  13ff1c:	1affffd2 	bne	13fe6c <printf_core+0x15b4>
  13ff20:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
  13ff24:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
  13ff28:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  13ff2c:	e2852012 	add	r2, r5, #18
  13ff30:	e3520012 	cmp	r2, #18
  13ff34:	da000003 	ble	13ff48 <printf_core+0x1690>
  13ff38:	e3a03012 	mov	r3, #18
  13ff3c:	e3a01030 	mov	r1, #48	; 0x30
  13ff40:	e59d0004 	ldr	r0, [sp, #4]
  13ff44:	ebfffa30 	bl	13e80c <pad.part.0>
  13ff48:	e59d3004 	ldr	r3, [sp, #4]
  13ff4c:	e5933000 	ldr	r3, [r3]
  13ff50:	e3130020 	tst	r3, #32
  13ff54:	1a000005 	bne	13ff70 <printf_core+0x16b8>
  13ff58:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
  13ff5c:	e28d7090 	add	r7, sp, #144	; 0x90
  13ff60:	e0471003 	sub	r1, r7, r3
  13ff64:	e59d2004 	ldr	r2, [sp, #4]
  13ff68:	e1a00003 	mov	r0, r3
  13ff6c:	eb000f0f 	bl	143bb0 <__fwritex>
  13ff70:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13ff74:	e3130a12 	tst	r3, #73728	; 0x12000
  13ff78:	e59d3020 	ldr	r3, [sp, #32]
  13ff7c:	13a03001 	movne	r3, #1
  13ff80:	e3530000 	cmp	r3, #0
  13ff84:	0a00023a 	beq	140874 <printf_core+0x1fbc>
  13ff88:	e59d3010 	ldr	r3, [sp, #16]
  13ff8c:	e1590003 	cmp	r9, r3
  13ff90:	a1a0a009 	movge	sl, r9
  13ff94:	b1a0a003 	movlt	sl, r3
  13ff98:	eafffbf0 	b	13ef60 <printf_core+0x6a8>
  13ff9c:	e3a02030 	mov	r2, #48	; 0x30
  13ffa0:	e15b0006 	cmp	fp, r6
  13ffa4:	e28dc098 	add	ip, sp, #152	; 0x98
  13ffa8:	e20ee020 	and	lr, lr, #32
  13ffac:	e5cd2098 	strb	r2, [sp, #152]	; 0x98
  13ffb0:	1affffc3 	bne	13fec4 <printf_core+0x160c>
  13ffb4:	e35e0000 	cmp	lr, #0
  13ffb8:	e28c8001 	add	r8, ip, #1
  13ffbc:	0a00002a 	beq	14006c <printf_core+0x17b4>
  13ffc0:	e3550000 	cmp	r5, #0
  13ffc4:	e04a4008 	sub	r4, sl, r8
  13ffc8:	1affffca 	bne	13fef8 <printf_core+0x1640>
  13ffcc:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13ffd0:	e3130008 	tst	r3, #8
  13ffd4:	1a00002d 	bne	140090 <printf_core+0x17d8>
  13ffd8:	e1a0c008 	mov	ip, r8
  13ffdc:	eaffffbd 	b	13fed8 <printf_core+0x1620>
  13ffe0:	e1a0300b 	mov	r3, fp
  13ffe4:	e1a02009 	mov	r2, r9
  13ffe8:	e3a01020 	mov	r1, #32
  13ffec:	e59d0004 	ldr	r0, [sp, #4]
  13fff0:	ebfffa05 	bl	13e80c <pad.part.0>
  13fff4:	eafffd7b 	b	13f5e8 <printf_core+0xd30>
  13fff8:	e3a03001 	mov	r3, #1
  13fffc:	e58d3020 	str	r3, [sp, #32]
  140000:	e51f36c8 	ldr	r3, [pc, #-1736]	; 13f940 <printf_core+0x1088>
  140004:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  140008:	eafffc20 	b	13f090 <printf_core+0x7d8>
  14000c:	e3a03000 	mov	r3, #0
  140010:	e58d3000 	str	r3, [sp]
  140014:	eafffb44 	b	13ed2c <printf_core+0x474>
  140018:	e59d5004 	ldr	r5, [sp, #4]
  14001c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  140020:	e1a02005 	mov	r2, r5
  140024:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  140028:	eb000ee0 	bl	143bb0 <__fwritex>
  14002c:	e5953000 	ldr	r3, [r5]
  140030:	e1a02005 	mov	r2, r5
  140034:	e3130020 	tst	r3, #32
  140038:	1afffcc9 	bne	13f364 <printf_core+0xaac>
  14003c:	e1a00006 	mov	r0, r6
  140040:	e3a01003 	mov	r1, #3
  140044:	eb000ed9 	bl	143bb0 <__fwritex>
  140048:	eafffcc5 	b	13f364 <printf_core+0xaac>
  14004c:	e3a03001 	mov	r3, #1
  140050:	e58d3030 	str	r3, [sp, #48]	; 0x30
  140054:	e51f3718 	ldr	r3, [pc, #-1816]	; 13f944 <printf_core+0x108c>
  140058:	e58d3034 	str	r3, [sp, #52]	; 0x34
  14005c:	eafffc9a 	b	13f2cc <printf_core+0xa14>
  140060:	e3510000 	cmp	r1, #0
  140064:	028bb004 	addeq	fp, fp, #4
  140068:	eafffe7f 	b	13fa6c <printf_core+0x11b4>
  14006c:	e1a0000c 	mov	r0, ip
  140070:	e1a02009 	mov	r2, r9
  140074:	e3a01001 	mov	r1, #1
  140078:	eb000ecc 	bl	143bb0 <__fwritex>
  14007c:	e599e000 	ldr	lr, [r9]
  140080:	e3550000 	cmp	r5, #0
  140084:	e20ee020 	and	lr, lr, #32
  140088:	e04a4008 	sub	r4, sl, r8
  14008c:	0affffce 	beq	13ffcc <printf_core+0x1714>
  140090:	e35e0000 	cmp	lr, #0
  140094:	1affff97 	bne	13fef8 <printf_core+0x1640>
  140098:	e1a02009 	mov	r2, r9
  14009c:	e3a01001 	mov	r1, #1
  1400a0:	e51f0758 	ldr	r0, [pc, #-1880]	; 13f950 <printf_core+0x1098>
  1400a4:	eb000ec1 	bl	143bb0 <__fwritex>
  1400a8:	e599e000 	ldr	lr, [r9]
  1400ac:	e1a0c008 	mov	ip, r8
  1400b0:	e20ee020 	and	lr, lr, #32
  1400b4:	eaffff87 	b	13fed8 <printf_core+0x1620>
  1400b8:	e1a0300a 	mov	r3, sl
  1400bc:	e1a02009 	mov	r2, r9
  1400c0:	e3a01020 	mov	r1, #32
  1400c4:	e59d0004 	ldr	r0, [sp, #4]
  1400c8:	ebfff9cf 	bl	13e80c <pad.part.0>
  1400cc:	eafffca9 	b	13f378 <printf_core+0xac0>
  1400d0:	e59d3010 	ldr	r3, [sp, #16]
  1400d4:	e213b020 	ands	fp, r3, #32
  1400d8:	159d3034 	ldrne	r3, [sp, #52]	; 0x34
  1400dc:	12833009 	addne	r3, r3, #9
  1400e0:	158d3034 	strne	r3, [sp, #52]	; 0x34
  1400e4:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  1400e8:	e355000b 	cmp	r5, #11
  1400ec:	e2833002 	add	r3, r3, #2
  1400f0:	e58d3030 	str	r3, [sp, #48]	; 0x30
  1400f4:	9a0001b8 	bls	1407dc <printf_core+0x1f24>
  1400f8:	e59d2020 	ldr	r2, [sp, #32]
  1400fc:	e28d7090 	add	r7, sp, #144	; 0x90
  140100:	e3520000 	cmp	r2, #0
  140104:	e1a03002 	mov	r3, r2
  140108:	b2623000 	rsblt	r3, r2, #0
  14010c:	e3520000 	cmp	r2, #0
  140110:	11a0c007 	movne	ip, r7
  140114:	0a0001ac 	beq	1407cc <printf_core+0x1f14>
  140118:	e51f27d4 	ldr	r2, [pc, #-2004]	; 13f94c <printf_core+0x1094>
  14011c:	e0810293 	umull	r0, r1, r3, r2
  140120:	e1a021a1 	lsr	r2, r1, #3
  140124:	e0821102 	add	r1, r2, r2, lsl #2
  140128:	e0433081 	sub	r3, r3, r1, lsl #1
  14012c:	e2831030 	add	r1, r3, #48	; 0x30
  140130:	e2523000 	subs	r3, r2, #0
  140134:	e56c1001 	strb	r1, [ip, #-1]!
  140138:	1afffff6 	bne	140118 <printf_core+0x1860>
  14013c:	e15c0007 	cmp	ip, r7
  140140:	0a0001a1 	beq	1407cc <printf_core+0x1f14>
  140144:	e59d3020 	ldr	r3, [sp, #32]
  140148:	e59d2010 	ldr	r2, [sp, #16]
  14014c:	e3530000 	cmp	r3, #0
  140150:	a3a0302b 	movge	r3, #43	; 0x2b
  140154:	b3a0302d 	movlt	r3, #45	; 0x2d
  140158:	e54c3001 	strb	r3, [ip, #-1]
  14015c:	e24c3002 	sub	r3, ip, #2
  140160:	e282200f 	add	r2, r2, #15
  140164:	e58d3010 	str	r3, [sp, #16]
  140168:	e2083008 	and	r3, r8, #8
  14016c:	e58db020 	str	fp, [sp, #32]
  140170:	e58d8040 	str	r8, [sp, #64]	; 0x40
  140174:	e58d4044 	str	r4, [sp, #68]	; 0x44
  140178:	e1a0b007 	mov	fp, r7
  14017c:	e51f683c 	ldr	r6, [pc, #-2108]	; 13f948 <printf_core+0x1090>
  140180:	e54c2002 	strb	r2, [ip, #-2]
  140184:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  140188:	e58da03c 	str	sl, [sp, #60]	; 0x3c
  14018c:	e59d401c 	ldr	r4, [sp, #28]
  140190:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  140194:	ea000007 	b	1401b8 <printf_core+0x1900>
  140198:	e1a0b00a 	mov	fp, sl
  14019c:	e1a00004 	mov	r0, r4
  1401a0:	e1a01008 	mov	r1, r8
  1401a4:	e3a02000 	mov	r2, #0
  1401a8:	e3a03000 	mov	r3, #0
  1401ac:	eb001381 	bl	144fb8 <__aeabi_dcmpeq>
  1401b0:	e3500000 	cmp	r0, #0
  1401b4:	1a000026 	bne	140254 <printf_core+0x199c>
  1401b8:	e1a01008 	mov	r1, r8
  1401bc:	e1a00004 	mov	r0, r4
  1401c0:	eb001395 	bl	14501c <__aeabi_d2iz>
  1401c4:	e59d2020 	ldr	r2, [sp, #32]
  1401c8:	e7d63000 	ldrb	r3, [r6, r0]
  1401cc:	e28ba001 	add	sl, fp, #1
  1401d0:	e1823003 	orr	r3, r2, r3
  1401d4:	e5cb3000 	strb	r3, [fp]
  1401d8:	eb0011ef 	bl	14499c <__aeabi_i2d>
  1401dc:	e1a02000 	mov	r2, r0
  1401e0:	e1a03001 	mov	r3, r1
  1401e4:	e1a00004 	mov	r0, r4
  1401e8:	e1a01008 	mov	r1, r8
  1401ec:	eb001135 	bl	1446c8 <__aeabi_dsub>
  1401f0:	e51f38a0 	ldr	r3, [pc, #-2208]	; 13f958 <printf_core+0x10a0>
  1401f4:	e3a02000 	mov	r2, #0
  1401f8:	eb001220 	bl	144a80 <__aeabi_dmul>
  1401fc:	e04a3007 	sub	r3, sl, r7
  140200:	e3530001 	cmp	r3, #1
  140204:	e1a04000 	mov	r4, r0
  140208:	e1a08001 	mov	r8, r1
  14020c:	1affffe1 	bne	140198 <printf_core+0x18e0>
  140210:	e3a03000 	mov	r3, #0
  140214:	e3a02000 	mov	r2, #0
  140218:	eb001366 	bl	144fb8 <__aeabi_dcmpeq>
  14021c:	e3500000 	cmp	r0, #0
  140220:	e3a03001 	mov	r3, #1
  140224:	13a03000 	movne	r3, #0
  140228:	e3550000 	cmp	r5, #0
  14022c:	c3833001 	orrgt	r3, r3, #1
  140230:	e3130001 	tst	r3, #1
  140234:	1a000002 	bne	140244 <printf_core+0x198c>
  140238:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14023c:	e3530000 	cmp	r3, #0
  140240:	0affffd4 	beq	140198 <printf_core+0x18e0>
  140244:	e3a0302e 	mov	r3, #46	; 0x2e
  140248:	e28bb002 	add	fp, fp, #2
  14024c:	e54b3001 	strb	r3, [fp, #-1]
  140250:	eaffffd1 	b	14019c <printf_core+0x18e4>
  140254:	e3e0310a 	mvn	r3, #-2147483646	; 0x80000002
  140258:	e59d2010 	ldr	r2, [sp, #16]
  14025c:	e59da03c 	ldr	sl, [sp, #60]	; 0x3c
  140260:	e0476002 	sub	r6, r7, r2
  140264:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
  140268:	e0433006 	sub	r3, r3, r6
  14026c:	e0433002 	sub	r3, r3, r2
  140270:	e1550003 	cmp	r5, r3
  140274:	e59d8040 	ldr	r8, [sp, #64]	; 0x40
  140278:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
  14027c:	cafffb3a 	bgt	13ef6c <printf_core+0x6b4>
  140280:	e04b2007 	sub	r2, fp, r7
  140284:	e3550000 	cmp	r5, #0
  140288:	e58d201c 	str	r2, [sp, #28]
  14028c:	0a000065 	beq	140428 <printf_core+0x1b70>
  140290:	e2423001 	sub	r3, r2, #1
  140294:	e1550003 	cmp	r5, r3
  140298:	ba000062 	blt	140428 <printf_core+0x1b70>
  14029c:	e2853002 	add	r3, r5, #2
  1402a0:	e0865003 	add	r5, r6, r3
  1402a4:	e043a002 	sub	sl, r3, r2
  1402a8:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  1402ac:	e0835005 	add	r5, r3, r5
  1402b0:	e1590005 	cmp	r9, r5
  1402b4:	c3a0b000 	movgt	fp, #0
  1402b8:	d3a0b001 	movle	fp, #1
  1402bc:	e3180a12 	tst	r8, #73728	; 0x12000
  1402c0:	01a0300b 	moveq	r3, fp
  1402c4:	13a03001 	movne	r3, #1
  1402c8:	e3530000 	cmp	r3, #0
  1402cc:	0a0001a8 	beq	140974 <printf_core+0x20bc>
  1402d0:	e59d3004 	ldr	r3, [sp, #4]
  1402d4:	e5933000 	ldr	r3, [r3]
  1402d8:	e3130020 	tst	r3, #32
  1402dc:	0a0000e4 	beq	140674 <printf_core+0x1dbc>
  1402e0:	e2283801 	eor	r3, r8, #65536	; 0x10000
  1402e4:	e3130a12 	tst	r3, #73728	; 0x12000
  1402e8:	01a0300b 	moveq	r3, fp
  1402ec:	13a03001 	movne	r3, #1
  1402f0:	e3530000 	cmp	r3, #0
  1402f4:	0a000198 	beq	14095c <printf_core+0x20a4>
  1402f8:	e35a0000 	cmp	sl, #0
  1402fc:	ca00012c 	bgt	1407b4 <printf_core+0x1efc>
  140300:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  140304:	e3130a12 	tst	r3, #73728	; 0x12000
  140308:	01a0300b 	moveq	r3, fp
  14030c:	13a03001 	movne	r3, #1
  140310:	e3530000 	cmp	r3, #0
  140314:	0a000186 	beq	140934 <printf_core+0x207c>
  140318:	e1590005 	cmp	r9, r5
  14031c:	a1a0a009 	movge	sl, r9
  140320:	b1a0a005 	movlt	sl, r5
  140324:	eafffb0d 	b	13ef60 <printf_core+0x6a8>
  140328:	e375010e 	cmn	r5, #-2147483645	; 0x80000003
  14032c:	cafffb0e 	bgt	13ef6c <printf_core+0x6b4>
  140330:	e2852001 	add	r2, r5, #1
  140334:	e3a03001 	mov	r3, #1
  140338:	eafffe71 	b	13fd04 <printf_core+0x144c>
  14033c:	e3550000 	cmp	r5, #0
  140340:	03a05001 	moveq	r5, #1
  140344:	e3760004 	cmn	r6, #4
  140348:	a1550006 	cmpge	r5, r6
  14034c:	c59d2010 	ldrgt	r2, [sp, #16]
  140350:	d59d3010 	ldrle	r3, [sp, #16]
  140354:	c2863001 	addgt	r3, r6, #1
  140358:	c2422001 	subgt	r2, r2, #1
  14035c:	d2433002 	suble	r3, r3, #2
  140360:	c58d2010 	strgt	r2, [sp, #16]
  140364:	c0455003 	subgt	r5, r5, r3
  140368:	d58d3010 	strle	r3, [sp, #16]
  14036c:	d2455001 	suble	r5, r5, #1
  140370:	e3180008 	tst	r8, #8
  140374:	1afffe5d 	bne	13fcf0 <printf_core+0x1438>
  140378:	e59d301c 	ldr	r3, [sp, #28]
  14037c:	e15b0003 	cmp	fp, r3
  140380:	2a000034 	bcs	140458 <printf_core+0x1ba0>
  140384:	e5137004 	ldr	r7, [r3, #-4]
  140388:	e3570000 	cmp	r7, #0
  14038c:	0a000031 	beq	140458 <printf_core+0x1ba0>
  140390:	e3a0100a 	mov	r1, #10
  140394:	e1a00007 	mov	r0, r7
  140398:	ebffe1a2 	bl	138a28 <__aeabi_uidivmod>
  14039c:	e3510000 	cmp	r1, #0
  1403a0:	1a00000b 	bne	1403d4 <printf_core+0x1b1c>
  1403a4:	e3a0300a 	mov	r3, #10
  1403a8:	e58d4020 	str	r4, [sp, #32]
  1403ac:	e1a04003 	mov	r4, r3
  1403b0:	e0844104 	add	r4, r4, r4, lsl #2
  1403b4:	e1a04084 	lsl	r4, r4, #1
  1403b8:	e1a01004 	mov	r1, r4
  1403bc:	e1a00007 	mov	r0, r7
  1403c0:	ebffe198 	bl	138a28 <__aeabi_uidivmod>
  1403c4:	e3510000 	cmp	r1, #0
  1403c8:	e28aa001 	add	sl, sl, #1
  1403cc:	0afffff7 	beq	1403b0 <printf_core+0x1af8>
  1403d0:	e59d4020 	ldr	r4, [sp, #32]
  1403d4:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
  1403d8:	e59d301c 	ldr	r3, [sp, #28]
  1403dc:	e0433002 	sub	r3, r3, r2
  1403e0:	e59d2010 	ldr	r2, [sp, #16]
  1403e4:	e1a03143 	asr	r3, r3, #2
  1403e8:	e3822020 	orr	r2, r2, #32
  1403ec:	e2433001 	sub	r3, r3, #1
  1403f0:	e3520066 	cmp	r2, #102	; 0x66
  1403f4:	e0833183 	add	r3, r3, r3, lsl #3
  1403f8:	10863003 	addne	r3, r6, r3
  1403fc:	e043300a 	sub	r3, r3, sl
  140400:	e1c33fc3 	bic	r3, r3, r3, asr #31
  140404:	e1550003 	cmp	r5, r3
  140408:	a1a05003 	movge	r5, r3
  14040c:	eafffe37 	b	13fcf0 <printf_core+0x1438>
  140410:	e1a0300a 	mov	r3, sl
  140414:	e1a02009 	mov	r2, r9
  140418:	e3a01020 	mov	r1, #32
  14041c:	e59d0004 	ldr	r0, [sp, #4]
  140420:	ebfff8f9 	bl	13e80c <pad.part.0>
  140424:	eafffbca 	b	13f354 <printf_core+0xa9c>
  140428:	e59d301c 	ldr	r3, [sp, #28]
  14042c:	e0865003 	add	r5, r6, r3
  140430:	eaffff9c 	b	1402a8 <printf_core+0x19f0>
  140434:	e59d32f0 	ldr	r3, [sp, #752]	; 0x2f0
  140438:	e0832105 	add	r2, r3, r5, lsl #2
  14043c:	e2833024 	add	r3, r3, #36	; 0x24
  140440:	e1530002 	cmp	r3, r2
  140444:	0afffb08 	beq	13f06c <printf_core+0x7b4>
  140448:	e5b21004 	ldr	r1, [r2, #4]!
  14044c:	e3510000 	cmp	r1, #0
  140450:	0afffffa 	beq	140440 <printf_core+0x1b88>
  140454:	eafffa2f 	b	13ed18 <printf_core+0x460>
  140458:	e3a0a009 	mov	sl, #9
  14045c:	eaffffdc 	b	1403d4 <printf_core+0x1b1c>
  140460:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140464:	e15b0003 	cmp	fp, r3
  140468:	31a0a00b 	movcc	sl, fp
  14046c:	21a0a003 	movcs	sl, r3
  140470:	e15a0003 	cmp	sl, r3
  140474:	8a00002f 	bhi	140538 <printf_core+0x1c80>
  140478:	e28d7090 	add	r7, sp, #144	; 0x90
  14047c:	e043b00a 	sub	fp, r3, sl
  140480:	e2872009 	add	r2, r7, #9
  140484:	e58d2030 	str	r2, [sp, #48]	; 0x30
  140488:	e58d2034 	str	r2, [sp, #52]	; 0x34
  14048c:	e3cb2003 	bic	r2, fp, #3
  140490:	e08a3002 	add	r3, sl, r2
  140494:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  140498:	e24a3004 	sub	r3, sl, #4
  14049c:	e58db038 	str	fp, [sp, #56]	; 0x38
  1404a0:	e3a06030 	mov	r6, #48	; 0x30
  1404a4:	e1a0b004 	mov	fp, r4
  1404a8:	e1a04003 	mov	r4, r3
  1404ac:	e5b4c004 	ldr	ip, [r4, #4]!
  1404b0:	e35c0000 	cmp	ip, #0
  1404b4:	0a000068 	beq	14065c <printf_core+0x1da4>
  1404b8:	e2870009 	add	r0, r7, #9
  1404bc:	e51f1b78 	ldr	r1, [pc, #-2936]	; 13f94c <printf_core+0x1094>
  1404c0:	e083219c 	umull	r2, r3, ip, r1
  1404c4:	e1a021a3 	lsr	r2, r3, #3
  1404c8:	e0823102 	add	r3, r2, r2, lsl #2
  1404cc:	e04c3083 	sub	r3, ip, r3, lsl #1
  1404d0:	e2833030 	add	r3, r3, #48	; 0x30
  1404d4:	e252c000 	subs	ip, r2, #0
  1404d8:	e5603001 	strb	r3, [r0, #-1]!
  1404dc:	1afffff6 	bne	1404bc <printf_core+0x1c04>
  1404e0:	e15a0004 	cmp	sl, r4
  1404e4:	1a000001 	bne	1404f0 <printf_core+0x1c38>
  1404e8:	ea000117 	b	14094c <printf_core+0x2094>
  1404ec:	e5606001 	strb	r6, [r0, #-1]!
  1404f0:	e1500007 	cmp	r0, r7
  1404f4:	8afffffc 	bhi	1404ec <printf_core+0x1c34>
  1404f8:	e59d3004 	ldr	r3, [sp, #4]
  1404fc:	e5932000 	ldr	r2, [r3]
  140500:	e3120020 	tst	r2, #32
  140504:	1a000003 	bne	140518 <printf_core+0x1c60>
  140508:	e1a02003 	mov	r2, r3
  14050c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  140510:	e0431000 	sub	r1, r3, r0
  140514:	eb000da5 	bl	143bb0 <__fwritex>
  140518:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14051c:	e1530004 	cmp	r3, r4
  140520:	1affffe1 	bne	1404ac <printf_core+0x1bf4>
  140524:	e1a0400b 	mov	r4, fp
  140528:	e59db038 	ldr	fp, [sp, #56]	; 0x38
  14052c:	e3cb3003 	bic	r3, fp, #3
  140530:	e2833004 	add	r3, r3, #4
  140534:	e08aa003 	add	sl, sl, r3
  140538:	e3550000 	cmp	r5, #0
  14053c:	0a00003b 	beq	140630 <printf_core+0x1d78>
  140540:	e59d3004 	ldr	r3, [sp, #4]
  140544:	e5933000 	ldr	r3, [r3]
  140548:	e3130020 	tst	r3, #32
  14054c:	0a00003d 	beq	140648 <printf_core+0x1d90>
  140550:	e59d201c 	ldr	r2, [sp, #28]
  140554:	e3550000 	cmp	r5, #0
  140558:	d3a03000 	movle	r3, #0
  14055c:	c3a03001 	movgt	r3, #1
  140560:	e15a0002 	cmp	sl, r2
  140564:	23a03000 	movcs	r3, #0
  140568:	e3530000 	cmp	r3, #0
  14056c:	0a000027 	beq	140610 <printf_core+0x1d58>
  140570:	e1a0600a 	mov	r6, sl
  140574:	e3a0a030 	mov	sl, #48	; 0x30
  140578:	e59db004 	ldr	fp, [sp, #4]
  14057c:	e28d7090 	add	r7, sp, #144	; 0x90
  140580:	e4963004 	ldr	r3, [r6], #4
  140584:	e287c009 	add	ip, r7, #9
  140588:	e3530000 	cmp	r3, #0
  14058c:	0a00000a 	beq	1405bc <printf_core+0x1d04>
  140590:	e1a01003 	mov	r1, r3
  140594:	e51f0c50 	ldr	r0, [pc, #-3152]	; 13f94c <printf_core+0x1094>
  140598:	e0832091 	umull	r2, r3, r1, r0
  14059c:	e1a031a3 	lsr	r3, r3, #3
  1405a0:	e0832103 	add	r2, r3, r3, lsl #2
  1405a4:	e0412082 	sub	r2, r1, r2, lsl #1
  1405a8:	e2822030 	add	r2, r2, #48	; 0x30
  1405ac:	e2531000 	subs	r1, r3, #0
  1405b0:	e56c2001 	strb	r2, [ip, #-1]!
  1405b4:	1afffff6 	bne	140594 <printf_core+0x1cdc>
  1405b8:	ea000000 	b	1405c0 <printf_core+0x1d08>
  1405bc:	e56ca001 	strb	sl, [ip, #-1]!
  1405c0:	e15c0007 	cmp	ip, r7
  1405c4:	8afffffc 	bhi	1405bc <printf_core+0x1d04>
  1405c8:	e59b3000 	ldr	r3, [fp]
  1405cc:	e3130020 	tst	r3, #32
  1405d0:	1a000005 	bne	1405ec <printf_core+0x1d34>
  1405d4:	e3550009 	cmp	r5, #9
  1405d8:	e1a0000c 	mov	r0, ip
  1405dc:	b1a01005 	movlt	r1, r5
  1405e0:	a3a01009 	movge	r1, #9
  1405e4:	e1a0200b 	mov	r2, fp
  1405e8:	eb000d70 	bl	143bb0 <__fwritex>
  1405ec:	e59d301c 	ldr	r3, [sp, #28]
  1405f0:	e2455009 	sub	r5, r5, #9
  1405f4:	e1530006 	cmp	r3, r6
  1405f8:	93a03000 	movls	r3, #0
  1405fc:	83a03001 	movhi	r3, #1
  140600:	e3550000 	cmp	r5, #0
  140604:	d3a03000 	movle	r3, #0
  140608:	e3530000 	cmp	r3, #0
  14060c:	1affffdb 	bne	140580 <printf_core+0x1cc8>
  140610:	e2852009 	add	r2, r5, #9
  140614:	e3520009 	cmp	r2, #9
  140618:	dafffe54 	ble	13ff70 <printf_core+0x16b8>
  14061c:	e3a03009 	mov	r3, #9
  140620:	e3a01030 	mov	r1, #48	; 0x30
  140624:	e59d0004 	ldr	r0, [sp, #4]
  140628:	ebfff877 	bl	13e80c <pad.part.0>
  14062c:	eafffe4f 	b	13ff70 <printf_core+0x16b8>
  140630:	e3180008 	tst	r8, #8
  140634:	0afffe4d 	beq	13ff70 <printf_core+0x16b8>
  140638:	e59d3004 	ldr	r3, [sp, #4]
  14063c:	e5933000 	ldr	r3, [r3]
  140640:	e3130020 	tst	r3, #32
  140644:	1afffe49 	bne	13ff70 <printf_core+0x16b8>
  140648:	e59d2004 	ldr	r2, [sp, #4]
  14064c:	e3a01001 	mov	r1, #1
  140650:	e51f0d08 	ldr	r0, [pc, #-3336]	; 13f950 <printf_core+0x1098>
  140654:	eb000d55 	bl	143bb0 <__fwritex>
  140658:	eaffffbc 	b	140550 <printf_core+0x1c98>
  14065c:	e15a0004 	cmp	sl, r4
  140660:	12870009 	addne	r0, r7, #9
  140664:	1affffa0 	bne	1404ec <printf_core+0x1c34>
  140668:	e28d0fb2 	add	r0, sp, #712	; 0x2c8
  14066c:	e5606230 	strb	r6, [r0, #-560]!	; 0xfffffdd0
  140670:	eaffffa0 	b	1404f8 <printf_core+0x1c40>
  140674:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  140678:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  14067c:	e59d2004 	ldr	r2, [sp, #4]
  140680:	eb000d4a 	bl	143bb0 <__fwritex>
  140684:	e2283801 	eor	r3, r8, #65536	; 0x10000
  140688:	e3130a12 	tst	r3, #73728	; 0x12000
  14068c:	01a0300b 	moveq	r3, fp
  140690:	13a03001 	movne	r3, #1
  140694:	e3530000 	cmp	r3, #0
  140698:	0a0000af 	beq	14095c <printf_core+0x20a4>
  14069c:	e59d2004 	ldr	r2, [sp, #4]
  1406a0:	e5923000 	ldr	r3, [r2]
  1406a4:	e3130020 	tst	r3, #32
  1406a8:	1affff12 	bne	1402f8 <printf_core+0x1a40>
  1406ac:	e59d101c 	ldr	r1, [sp, #28]
  1406b0:	e1a00007 	mov	r0, r7
  1406b4:	eb000d3d 	bl	143bb0 <__fwritex>
  1406b8:	e35a0000 	cmp	sl, #0
  1406bc:	ca00003c 	bgt	1407b4 <printf_core+0x1efc>
  1406c0:	e59d2004 	ldr	r2, [sp, #4]
  1406c4:	e5923000 	ldr	r3, [r2]
  1406c8:	e3130020 	tst	r3, #32
  1406cc:	1affff0b 	bne	140300 <printf_core+0x1a48>
  1406d0:	e1a01006 	mov	r1, r6
  1406d4:	e59d0010 	ldr	r0, [sp, #16]
  1406d8:	eb000d34 	bl	143bb0 <__fwritex>
  1406dc:	eaffff07 	b	140300 <printf_core+0x1a48>
  1406e0:	e59d3010 	ldr	r3, [sp, #16]
  1406e4:	e1a02009 	mov	r2, r9
  1406e8:	e3a01030 	mov	r1, #48	; 0x30
  1406ec:	e59d0004 	ldr	r0, [sp, #4]
  1406f0:	ebfff845 	bl	13e80c <pad.part.0>
  1406f4:	eafffdc7 	b	13fe18 <printf_core+0x1560>
  1406f8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  1406fc:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  140700:	e59d2004 	ldr	r2, [sp, #4]
  140704:	eb000d29 	bl	143bb0 <__fwritex>
  140708:	eafffdbc 	b	13fe00 <printf_core+0x1548>
  14070c:	e59d3010 	ldr	r3, [sp, #16]
  140710:	e1a02009 	mov	r2, r9
  140714:	e3a01020 	mov	r1, #32
  140718:	e59d0004 	ldr	r0, [sp, #4]
  14071c:	ebfff83a 	bl	13e80c <pad.part.0>
  140720:	eafffdb2 	b	13fdf0 <printf_core+0x1538>
  140724:	e156000e 	cmp	r6, lr
  140728:	cafffa0f 	bgt	13ef6c <printf_core+0x6b4>
  14072c:	e3560000 	cmp	r6, #0
  140730:	c0833006 	addgt	r3, r3, r6
  140734:	eafffd9e 	b	13fdb4 <printf_core+0x14fc>
  140738:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  14073c:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
  140740:	e51f3df4 	ldr	r3, [pc, #-3572]	; 13f954 <printf_core+0x109c>
  140744:	e0811000 	add	r1, r1, r0
  140748:	e1510003 	cmp	r1, r3
  14074c:	e5871000 	str	r1, [r7]
  140750:	9a000008 	bls	140778 <printf_core+0x1ec0>
  140754:	e4072004 	str	r2, [r7], #-4
  140758:	e157000b 	cmp	r7, fp
  14075c:	350b2004 	strcc	r2, [fp, #-4]
  140760:	e5971000 	ldr	r1, [r7]
  140764:	324bb004 	subcc	fp, fp, #4
  140768:	e2811001 	add	r1, r1, #1
  14076c:	e1510003 	cmp	r1, r3
  140770:	e5871000 	str	r1, [r7]
  140774:	8afffff6 	bhi	140754 <printf_core+0x1e9c>
  140778:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14077c:	e59b2000 	ldr	r2, [fp]
  140780:	e043600b 	sub	r6, r3, fp
  140784:	e1a06146 	asr	r6, r6, #2
  140788:	e3520009 	cmp	r2, #9
  14078c:	e0866186 	add	r6, r6, r6, lsl #3
  140790:	83a0300a 	movhi	r3, #10
  140794:	9a000004 	bls	1407ac <printf_core+0x1ef4>
  140798:	e0833103 	add	r3, r3, r3, lsl #2
  14079c:	e1a03083 	lsl	r3, r3, #1
  1407a0:	e1520003 	cmp	r2, r3
  1407a4:	e2866001 	add	r6, r6, #1
  1407a8:	2afffffa 	bcs	140798 <printf_core+0x1ee0>
  1407ac:	e287c004 	add	ip, r7, #4
  1407b0:	eafffd37 	b	13fc94 <printf_core+0x13dc>
  1407b4:	e1a0200a 	mov	r2, sl
  1407b8:	e3a03000 	mov	r3, #0
  1407bc:	e3a01030 	mov	r1, #48	; 0x30
  1407c0:	e59d0004 	ldr	r0, [sp, #4]
  1407c4:	ebfff810 	bl	13e80c <pad.part.0>
  1407c8:	eaffffbc 	b	1406c0 <printf_core+0x1e08>
  1407cc:	e3a03030 	mov	r3, #48	; 0x30
  1407d0:	e28dc08f 	add	ip, sp, #143	; 0x8f
  1407d4:	e5cd308f 	strb	r3, [sp, #143]	; 0x8f
  1407d8:	eafffe59 	b	140144 <printf_core+0x188c>
  1407dc:	e265300b 	rsb	r3, r5, #11
  1407e0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  1407e4:	e1a0300b 	mov	r3, fp
  1407e8:	e3a06000 	mov	r6, #0
  1407ec:	e1a0b004 	mov	fp, r4
  1407f0:	e1a04003 	mov	r4, r3
  1407f4:	e51f7ea4 	ldr	r7, [pc, #-3748]	; 13f958 <printf_core+0x10a0>
  1407f8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  1407fc:	e1a00006 	mov	r0, r6
  140800:	e2433001 	sub	r3, r3, #1
  140804:	e1a01007 	mov	r1, r7
  140808:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  14080c:	e3a02000 	mov	r2, #0
  140810:	e51f3ec0 	ldr	r3, [pc, #-3776]	; 13f958 <printf_core+0x10a0>
  140814:	eb001099 	bl	144a80 <__aeabi_dmul>
  140818:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14081c:	e1a06000 	mov	r6, r0
  140820:	e3730001 	cmn	r3, #1
  140824:	e1a07001 	mov	r7, r1
  140828:	1afffff2 	bne	1407f8 <printf_core+0x1f40>
  14082c:	e1a03004 	mov	r3, r4
  140830:	e1a0400b 	mov	r4, fp
  140834:	e1a0b003 	mov	fp, r3
  140838:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  14083c:	e59d001c 	ldr	r0, [sp, #28]
  140840:	e5d33000 	ldrb	r3, [r3]
  140844:	e353002d 	cmp	r3, #45	; 0x2d
  140848:	0a000028 	beq	1408f0 <printf_core+0x2038>
  14084c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  140850:	e1a02006 	mov	r2, r6
  140854:	e1a03007 	mov	r3, r7
  140858:	eb000f9b 	bl	1446cc <__adddf3>
  14085c:	e1a02006 	mov	r2, r6
  140860:	e1a03007 	mov	r3, r7
  140864:	eb000f97 	bl	1446c8 <__aeabi_dsub>
  140868:	e58d001c 	str	r0, [sp, #28]
  14086c:	e58d1038 	str	r1, [sp, #56]	; 0x38
  140870:	eafffe20 	b	1400f8 <printf_core+0x1840>
  140874:	e59d3010 	ldr	r3, [sp, #16]
  140878:	e1a02009 	mov	r2, r9
  14087c:	e3a01020 	mov	r1, #32
  140880:	e59d0004 	ldr	r0, [sp, #4]
  140884:	ebfff7e0 	bl	13e80c <pad.part.0>
  140888:	eafffdbe 	b	13ff88 <printf_core+0x16d0>
  14088c:	e3a0e000 	mov	lr, #0
  140890:	e51fcf3c 	ldr	ip, [pc, #-3900]	; 13f95c <printf_core+0x10a4>
  140894:	eafffce1 	b	13fc20 <printf_core+0x1368>
  140898:	e51f3f40 	ldr	r3, [pc, #-3904]	; 13f960 <printf_core+0x10a8>
  14089c:	e58d2040 	str	r2, [sp, #64]	; 0x40
  1408a0:	e58d3020 	str	r3, [sp, #32]
  1408a4:	eafffcd6 	b	13fc04 <printf_core+0x134c>
  1408a8:	e3a03001 	mov	r3, #1
  1408ac:	e58d3040 	str	r3, [sp, #64]	; 0x40
  1408b0:	e51f3f58 	ldr	r3, [pc, #-3928]	; 13f960 <printf_core+0x10a8>
  1408b4:	e58d3020 	str	r3, [sp, #32]
  1408b8:	eafffcd1 	b	13fc04 <printf_core+0x134c>
  1408bc:	e3a03001 	mov	r3, #1
  1408c0:	e3a05006 	mov	r5, #6
  1408c4:	e58d3044 	str	r3, [sp, #68]	; 0x44
  1408c8:	eafffb9d 	b	13f744 <printf_core+0xe8c>
  1408cc:	e59d101c 	ldr	r1, [sp, #28]
  1408d0:	e287c004 	add	ip, r7, #4
  1408d4:	e51f2f78 	ldr	r2, [pc, #-3960]	; 13f964 <printf_core+0x10ac>
  1408d8:	e51f3f78 	ldr	r3, [pc, #-3960]	; 13f968 <printf_core+0x10b0>
  1408dc:	e151000c 	cmp	r1, ip
  1408e0:	01a0c002 	moveq	ip, r2
  1408e4:	11a0c003 	movne	ip, r3
  1408e8:	e3a0e000 	mov	lr, #0
  1408ec:	eafffccb 	b	13fc20 <printf_core+0x1368>
  1408f0:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
  1408f4:	e1a02006 	mov	r2, r6
  1408f8:	e2831102 	add	r1, r3, #-2147483648	; 0x80000000
  1408fc:	e1a03007 	mov	r3, r7
  140900:	eb000f70 	bl	1446c8 <__aeabi_dsub>
  140904:	e1a03001 	mov	r3, r1
  140908:	e1a02000 	mov	r2, r0
  14090c:	e1a01007 	mov	r1, r7
  140910:	e1a00006 	mov	r0, r6
  140914:	eb000f6c 	bl	1446cc <__adddf3>
  140918:	e2813102 	add	r3, r1, #-2147483648	; 0x80000000
  14091c:	e58d001c 	str	r0, [sp, #28]
  140920:	e58d3038 	str	r3, [sp, #56]	; 0x38
  140924:	eafffdf3 	b	1400f8 <printf_core+0x1840>
  140928:	e3a0300a 	mov	r3, #10
  14092c:	e58d3038 	str	r3, [sp, #56]	; 0x38
  140930:	eafffc97 	b	13fb94 <printf_core+0x12dc>
  140934:	e1a03005 	mov	r3, r5
  140938:	e1a02009 	mov	r2, r9
  14093c:	e3a01020 	mov	r1, #32
  140940:	e59d0004 	ldr	r0, [sp, #4]
  140944:	ebfff7b0 	bl	13e80c <pad.part.0>
  140948:	eafffe72 	b	140318 <printf_core+0x1a60>
  14094c:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  140950:	e1500003 	cmp	r0, r3
  140954:	1afffee7 	bne	1404f8 <printf_core+0x1c40>
  140958:	eaffff42 	b	140668 <printf_core+0x1db0>
  14095c:	e1a03005 	mov	r3, r5
  140960:	e1a02009 	mov	r2, r9
  140964:	e3a01030 	mov	r1, #48	; 0x30
  140968:	e59d0004 	ldr	r0, [sp, #4]
  14096c:	ebfff7a6 	bl	13e80c <pad.part.0>
  140970:	eaffff49 	b	14069c <printf_core+0x1de4>
  140974:	e1a03005 	mov	r3, r5
  140978:	e1a02009 	mov	r2, r9
  14097c:	e3a01020 	mov	r1, #32
  140980:	e59d0004 	ldr	r0, [sp, #4]
  140984:	ebfff7a0 	bl	13e80c <pad.part.0>
  140988:	eafffe50 	b	1402d0 <printf_core+0x1a18>

0014098c <vfprintf>:
  14098c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  140990:	e1a09001 	mov	r9, r1
  140994:	e1a06002 	mov	r6, r2
  140998:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  14099c:	e28d5010 	add	r5, sp, #16
  1409a0:	e3a02028 	mov	r2, #40	; 0x28
  1409a4:	e3a01000 	mov	r1, #0
  1409a8:	e1a04000 	mov	r4, r0
  1409ac:	e1a00005 	mov	r0, r5
  1409b0:	eb000221 	bl	14123c <memset>
  1409b4:	e58d5000 	str	r5, [sp]
  1409b8:	e1a01009 	mov	r1, r9
  1409bc:	e28d3038 	add	r3, sp, #56	; 0x38
  1409c0:	e28d200c 	add	r2, sp, #12
  1409c4:	e3a00000 	mov	r0, #0
  1409c8:	e58d600c 	str	r6, [sp, #12]
  1409cc:	ebfff7b9 	bl	13e8b8 <printf_core>
  1409d0:	e3500000 	cmp	r0, #0
  1409d4:	ba000047 	blt	140af8 <vfprintf+0x16c>
  1409d8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  1409dc:	e3530000 	cmp	r3, #0
  1409e0:	b3a08000 	movlt	r8, #0
  1409e4:	ba000002 	blt	1409f4 <vfprintf+0x68>
  1409e8:	e1a00004 	mov	r0, r4
  1409ec:	eb000ab0 	bl	1434b4 <__lockfile>
  1409f0:	e1a08000 	mov	r8, r0
  1409f4:	e5942048 	ldr	r2, [r4, #72]	; 0x48
  1409f8:	e5943000 	ldr	r3, [r4]
  1409fc:	e3520000 	cmp	r2, #0
  140a00:	e2036020 	and	r6, r3, #32
  140a04:	d3c33020 	bicle	r3, r3, #32
  140a08:	d5843000 	strle	r3, [r4]
  140a0c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  140a10:	e3530000 	cmp	r3, #0
  140a14:	0a000024 	beq	140aac <vfprintf+0x120>
  140a18:	e5947010 	ldr	r7, [r4, #16]
  140a1c:	e3570000 	cmp	r7, #0
  140a20:	13a07000 	movne	r7, #0
  140a24:	0a000035 	beq	140b00 <vfprintf+0x174>
  140a28:	e58d5000 	str	r5, [sp]
  140a2c:	e28d3038 	add	r3, sp, #56	; 0x38
  140a30:	e28d200c 	add	r2, sp, #12
  140a34:	e1a01009 	mov	r1, r9
  140a38:	e1a00004 	mov	r0, r4
  140a3c:	ebfff79d 	bl	13e8b8 <printf_core>
  140a40:	e1a05000 	mov	r5, r0
  140a44:	e3570000 	cmp	r7, #0
  140a48:	0a00000d 	beq	140a84 <vfprintf+0xf8>
  140a4c:	e3a02000 	mov	r2, #0
  140a50:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  140a54:	e1a01002 	mov	r1, r2
  140a58:	e1a00004 	mov	r0, r4
  140a5c:	e12fff33 	blx	r3
  140a60:	e3a03000 	mov	r3, #0
  140a64:	e5942014 	ldr	r2, [r4, #20]
  140a68:	e584702c 	str	r7, [r4, #44]	; 0x2c
  140a6c:	e1520003 	cmp	r2, r3
  140a70:	03e05000 	mvneq	r5, #0
  140a74:	e5843030 	str	r3, [r4, #48]	; 0x30
  140a78:	e5843010 	str	r3, [r4, #16]
  140a7c:	e584301c 	str	r3, [r4, #28]
  140a80:	e5843014 	str	r3, [r4, #20]
  140a84:	e5943000 	ldr	r3, [r4]
  140a88:	e3130020 	tst	r3, #32
  140a8c:	13e05000 	mvnne	r5, #0
  140a90:	e1866003 	orr	r6, r6, r3
  140a94:	e3580000 	cmp	r8, #0
  140a98:	e5846000 	str	r6, [r4]
  140a9c:	1a000010 	bne	140ae4 <vfprintf+0x158>
  140aa0:	e1a00005 	mov	r0, r5
  140aa4:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  140aa8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140aac:	e3a01050 	mov	r1, #80	; 0x50
  140ab0:	e28d2088 	add	r2, sp, #136	; 0x88
  140ab4:	e594702c 	ldr	r7, [r4, #44]	; 0x2c
  140ab8:	e5843010 	str	r3, [r4, #16]
  140abc:	e584301c 	str	r3, [r4, #28]
  140ac0:	e5843014 	str	r3, [r4, #20]
  140ac4:	e5841030 	str	r1, [r4, #48]	; 0x30
  140ac8:	e584202c 	str	r2, [r4, #44]	; 0x2c
  140acc:	e1a00004 	mov	r0, r4
  140ad0:	eb000b95 	bl	14392c <__towrite>
  140ad4:	e3500000 	cmp	r0, #0
  140ad8:	13e05000 	mvnne	r5, #0
  140adc:	1affffd8 	bne	140a44 <vfprintf+0xb8>
  140ae0:	eaffffd0 	b	140a28 <vfprintf+0x9c>
  140ae4:	e1a00004 	mov	r0, r4
  140ae8:	eb000abe 	bl	1435e8 <__unlockfile>
  140aec:	e1a00005 	mov	r0, r5
  140af0:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  140af4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140af8:	e3e05000 	mvn	r5, #0
  140afc:	eaffffe7 	b	140aa0 <vfprintf+0x114>
  140b00:	e1a00004 	mov	r0, r4
  140b04:	eb000b88 	bl	14392c <__towrite>
  140b08:	e3500000 	cmp	r0, #0
  140b0c:	13e05000 	mvnne	r5, #0
  140b10:	1affffdb 	bne	140a84 <vfprintf+0xf8>
  140b14:	eaffffc3 	b	140a28 <vfprintf+0x9c>

00140b18 <sn_write>:
  140b18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  140b1c:	e5906054 	ldr	r6, [r0, #84]	; 0x54
  140b20:	e590c01c 	ldr	ip, [r0, #28]
  140b24:	e1a05000 	mov	r5, r0
  140b28:	e5900014 	ldr	r0, [r0, #20]
  140b2c:	e5963004 	ldr	r3, [r6, #4]
  140b30:	e040000c 	sub	r0, r0, ip
  140b34:	e1500003 	cmp	r0, r3
  140b38:	31a04000 	movcc	r4, r0
  140b3c:	21a04003 	movcs	r4, r3
  140b40:	e3540000 	cmp	r4, #0
  140b44:	e1a08001 	mov	r8, r1
  140b48:	e1a07002 	mov	r7, r2
  140b4c:	e5960000 	ldr	r0, [r6]
  140b50:	1a000012 	bne	140ba0 <sn_write+0x88>
  140b54:	e1570003 	cmp	r7, r3
  140b58:	31a04007 	movcc	r4, r7
  140b5c:	21a04003 	movcs	r4, r3
  140b60:	e3540000 	cmp	r4, #0
  140b64:	0a000006 	beq	140b84 <sn_write+0x6c>
  140b68:	e1a01008 	mov	r1, r8
  140b6c:	e1a02004 	mov	r2, r4
  140b70:	eb000079 	bl	140d5c <memcpy>
  140b74:	e8960009 	ldm	r6, {r0, r3}
  140b78:	e0800004 	add	r0, r0, r4
  140b7c:	e0433004 	sub	r3, r3, r4
  140b80:	e8860009 	stm	r6, {r0, r3}
  140b84:	e3a03000 	mov	r3, #0
  140b88:	e5c03000 	strb	r3, [r0]
  140b8c:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
  140b90:	e1a00007 	mov	r0, r7
  140b94:	e585301c 	str	r3, [r5, #28]
  140b98:	e5853014 	str	r3, [r5, #20]
  140b9c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  140ba0:	e1a0100c 	mov	r1, ip
  140ba4:	e1a02004 	mov	r2, r4
  140ba8:	eb00006b 	bl	140d5c <memcpy>
  140bac:	e8960009 	ldm	r6, {r0, r3}
  140bb0:	e0800004 	add	r0, r0, r4
  140bb4:	e0433004 	sub	r3, r3, r4
  140bb8:	e8860009 	stm	r6, {r0, r3}
  140bbc:	eaffffe4 	b	140b54 <sn_write+0x3c>

00140bc0 <vsnprintf>:
  140bc0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  140bc4:	e2516000 	subs	r6, r1, #0
  140bc8:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
  140bcc:	e1a08002 	mov	r8, r2
  140bd0:	e1a09003 	mov	r9, r3
  140bd4:	1a000018 	bne	140c3c <vsnprintf+0x7c>
  140bd8:	e28d7010 	add	r7, sp, #16
  140bdc:	e3a02090 	mov	r2, #144	; 0x90
  140be0:	e1a00007 	mov	r0, r7
  140be4:	e28d4004 	add	r4, sp, #4
  140be8:	e58d600c 	str	r6, [sp, #12]
  140bec:	e58d4008 	str	r4, [sp, #8]
  140bf0:	eb000191 	bl	14123c <memset>
  140bf4:	e3e02000 	mvn	r2, #0
  140bf8:	e59f1098 	ldr	r1, [pc, #152]	; 140c98 <vsnprintf+0xd8>
  140bfc:	e28d3008 	add	r3, sp, #8
  140c00:	e58d205c 	str	r2, [sp, #92]	; 0x5c
  140c04:	e58d2060 	str	r2, [sp, #96]	; 0x60
  140c08:	e58d1034 	str	r1, [sp, #52]	; 0x34
  140c0c:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  140c10:	e58d3064 	str	r3, [sp, #100]	; 0x64
  140c14:	e3a0c000 	mov	ip, #0
  140c18:	e1a02009 	mov	r2, r9
  140c1c:	e1a01008 	mov	r1, r8
  140c20:	e1a00007 	mov	r0, r7
  140c24:	e5c4c000 	strb	ip, [r4]
  140c28:	ebffff57 	bl	14098c <vfprintf>
  140c2c:	e1a05000 	mov	r5, r0
  140c30:	e1a00005 	mov	r0, r5
  140c34:	e28dd0a4 	add	sp, sp, #164	; 0xa4
  140c38:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140c3c:	e3e05000 	mvn	r5, #0
  140c40:	e1a04000 	mov	r4, r0
  140c44:	e28d7010 	add	r7, sp, #16
  140c48:	e0863005 	add	r3, r6, r5
  140c4c:	e3a02090 	mov	r2, #144	; 0x90
  140c50:	e1a00007 	mov	r0, r7
  140c54:	e3a01000 	mov	r1, #0
  140c58:	e58d300c 	str	r3, [sp, #12]
  140c5c:	e58d4008 	str	r4, [sp, #8]
  140c60:	eb000175 	bl	14123c <memset>
  140c64:	e59f202c 	ldr	r2, [pc, #44]	; 140c98 <vsnprintf+0xd8>
  140c68:	e28d3008 	add	r3, sp, #8
  140c6c:	e3560000 	cmp	r6, #0
  140c70:	e58d505c 	str	r5, [sp, #92]	; 0x5c
  140c74:	e58d5060 	str	r5, [sp, #96]	; 0x60
  140c78:	e58d2034 	str	r2, [sp, #52]	; 0x34
  140c7c:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  140c80:	e58d3064 	str	r3, [sp, #100]	; 0x64
  140c84:	aaffffe2 	bge	140c14 <vsnprintf+0x54>
  140c88:	ebffe084 	bl	138ea0 <__errno_location>
  140c8c:	e3a0204b 	mov	r2, #75	; 0x4b
  140c90:	e5802000 	str	r2, [r0]
  140c94:	eaffffe5 	b	140c30 <vsnprintf+0x70>
  140c98:	00140b18 	.word	0x00140b18

00140c9c <vsprintf>:
  140c9c:	e1a03002 	mov	r3, r2
  140ca0:	e1a02001 	mov	r2, r1
  140ca4:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  140ca8:	eaffffc4 	b	140bc0 <vsnprintf>

00140cac <atoi>:
  140cac:	e5d03000 	ldrb	r3, [r0]
  140cb0:	e2432009 	sub	r2, r3, #9
  140cb4:	e3530020 	cmp	r3, #32
  140cb8:	13520004 	cmpne	r2, #4
  140cbc:	8a000004 	bhi	140cd4 <atoi+0x28>
  140cc0:	e5f03001 	ldrb	r3, [r0, #1]!
  140cc4:	e2432009 	sub	r2, r3, #9
  140cc8:	e3530020 	cmp	r3, #32
  140ccc:	13520004 	cmpne	r2, #4
  140cd0:	9afffffa 	bls	140cc0 <atoi+0x14>
  140cd4:	e353002b 	cmp	r3, #43	; 0x2b
  140cd8:	0a000019 	beq	140d44 <atoi+0x98>
  140cdc:	e353002d 	cmp	r3, #45	; 0x2d
  140ce0:	0a00000f 	beq	140d24 <atoi+0x78>
  140ce4:	e5d01000 	ldrb	r1, [r0]
  140ce8:	e2412030 	sub	r2, r1, #48	; 0x30
  140cec:	e3520009 	cmp	r2, #9
  140cf0:	91a03000 	movls	r3, r0
  140cf4:	8a000010 	bhi	140d3c <atoi+0x90>
  140cf8:	e3a0c000 	mov	ip, #0
  140cfc:	e3a00000 	mov	r0, #0
  140d00:	e5f31001 	ldrb	r1, [r3, #1]!
  140d04:	e0800100 	add	r0, r0, r0, lsl #2
  140d08:	e0620080 	rsb	r0, r2, r0, lsl #1
  140d0c:	e2412030 	sub	r2, r1, #48	; 0x30
  140d10:	e3520009 	cmp	r2, #9
  140d14:	9afffff9 	bls	140d00 <atoi+0x54>
  140d18:	e35c0000 	cmp	ip, #0
  140d1c:	02600000 	rsbeq	r0, r0, #0
  140d20:	e12fff1e 	bx	lr
  140d24:	e5d01001 	ldrb	r1, [r0, #1]
  140d28:	e2803001 	add	r3, r0, #1
  140d2c:	e2412030 	sub	r2, r1, #48	; 0x30
  140d30:	e3520009 	cmp	r2, #9
  140d34:	93a0c001 	movls	ip, #1
  140d38:	9affffef 	bls	140cfc <atoi+0x50>
  140d3c:	e3a00000 	mov	r0, #0
  140d40:	e12fff1e 	bx	lr
  140d44:	e5d01001 	ldrb	r1, [r0, #1]
  140d48:	e2803001 	add	r3, r0, #1
  140d4c:	e2412030 	sub	r2, r1, #48	; 0x30
  140d50:	e3520009 	cmp	r2, #9
  140d54:	9affffe7 	bls	140cf8 <atoi+0x4c>
  140d58:	eafffff7 	b	140d3c <atoi+0x90>

00140d5c <memcpy>:
  140d5c:	e92d4011 	push	{r0, r4, lr}
  140d60:	e24dd01c 	sub	sp, sp, #28
  140d64:	e3520004 	cmp	r2, #4
  140d68:	3a0000b0 	bcc	141030 <copy_last_3_and_return>
  140d6c:	e2613000 	rsb	r3, r1, #0
  140d70:	e2133003 	ands	r3, r3, #3
  140d74:	0a000007 	beq	140d98 <src_aligned>
  140d78:	e1b0cf83 	lsls	ip, r3, #31
  140d7c:	e0422003 	sub	r2, r2, r3
  140d80:	44d13001 	ldrbmi	r3, [r1], #1
  140d84:	24d14001 	ldrbcs	r4, [r1], #1
  140d88:	24d1c001 	ldrbcs	ip, [r1], #1
  140d8c:	44c03001 	strbmi	r3, [r0], #1
  140d90:	24c04001 	strbcs	r4, [r0], #1
  140d94:	24c0c001 	strbcs	ip, [r0], #1

00140d98 <src_aligned>:
  140d98:	e020c001 	eor	ip, r0, r1
  140d9c:	e31c0003 	tst	ip, #3
  140da0:	1a000027 	bne	140e44 <non_congruent>
  140da4:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  140da8:	e2603000 	rsb	r3, r0, #0
  140dac:	e213301c 	ands	r3, r3, #28
  140db0:	0a00000a 	beq	140de0 <cached_aligned32>
  140db4:	e1530002 	cmp	r3, r2
  140db8:	8202301c 	andhi	r3, r2, #28
  140dbc:	e1b0ce03 	lsls	ip, r3, #28
  140dc0:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  140dc4:	48b10300 	ldmmi	r1!, {r8, r9}
  140dc8:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  140dcc:	48a00300 	stmiami	r0!, {r8, r9}
  140dd0:	e3130004 	tst	r3, #4
  140dd4:	1491a004 	ldrne	sl, [r1], #4
  140dd8:	1480a004 	strne	sl, [r0], #4
  140ddc:	e0422003 	sub	r2, r2, r3

00140de0 <cached_aligned32>:
  140de0:	e2522020 	subs	r2, r2, #32
  140de4:	3a000004 	bcc	140dfc <less_than_32_left>
  140de8:	e8b10ff0 	ldm	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
  140dec:	e2522020 	subs	r2, r2, #32
  140df0:	e8a00ff0 	stmia	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  140df4:	2afffffb 	bcs	140de8 <cached_aligned32+0x8>
  140df8:	e2822020 	add	r2, r2, #32

00140dfc <less_than_32_left>:
  140dfc:	e312001f 	tst	r2, #31
  140e00:	0a00000c 	beq	140e38 <less_than_32_left+0x3c>
  140e04:	e1b0ce02 	lsls	ip, r2, #28
  140e08:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  140e0c:	48b10300 	ldmmi	r1!, {r8, r9}
  140e10:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  140e14:	48a00300 	stmiami	r0!, {r8, r9}
  140e18:	e1b0cf02 	lsls	ip, r2, #30
  140e1c:	24913004 	ldrcs	r3, [r1], #4
  140e20:	40d140b2 	ldrhmi	r4, [r1], #2
  140e24:	24803004 	strcs	r3, [r0], #4
  140e28:	40c040b2 	strhmi	r4, [r0], #2
  140e2c:	e3120001 	tst	r2, #1
  140e30:	15d13000 	ldrbne	r3, [r1]
  140e34:	15c03000 	strbne	r3, [r0]
  140e38:	e8bd0fe0 	pop	{r5, r6, r7, r8, r9, sl, fp}
  140e3c:	e8bd4011 	pop	{r0, r4, lr}
  140e40:	e12fff1e 	bx	lr

00140e44 <non_congruent>:
  140e44:	e3520004 	cmp	r2, #4
  140e48:	3a000078 	bcc	141030 <copy_last_3_and_return>
  140e4c:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  140e50:	e2605000 	rsb	r5, r0, #0
  140e54:	e2055003 	and	r5, r5, #3
  140e58:	e1a0c185 	lsl	ip, r5, #3
  140e5c:	e26ce020 	rsb	lr, ip, #32
  140e60:	e4913004 	ldr	r3, [r1], #4
  140e64:	e2422004 	sub	r2, r2, #4
  140e68:	e1b05f85 	lsls	r5, r5, #31
  140e6c:	44c03001 	strbmi	r3, [r0], #1
  140e70:	41a03423 	lsrmi	r3, r3, #8
  140e74:	24c03001 	strbcs	r3, [r0], #1
  140e78:	21a03423 	lsrcs	r3, r3, #8
  140e7c:	24c03001 	strbcs	r3, [r0], #1
  140e80:	21a03423 	lsrcs	r3, r3, #8
  140e84:	e3520004 	cmp	r2, #4
  140e88:	3a000061 	bcc	141014 <partial_word_tail>
  140e8c:	e310001c 	tst	r0, #28
  140e90:	0a000007 	beq	140eb4 <non_congruent+0x70>
  140e94:	e4915004 	ldr	r5, [r1], #4
  140e98:	e2422004 	sub	r2, r2, #4
  140e9c:	e1834e15 	orr	r4, r3, r5, lsl lr
  140ea0:	e1a03c35 	lsr	r3, r5, ip
  140ea4:	e4804004 	str	r4, [r0], #4
  140ea8:	e3520004 	cmp	r2, #4
  140eac:	2afffff6 	bcs	140e8c <non_congruent+0x48>
  140eb0:	3a000057 	bcc	141014 <partial_word_tail>
  140eb4:	e2522020 	subs	r2, r2, #32
  140eb8:	3a00004a 	bcc	140fe8 <less_than_thirtytwo>
  140ebc:	e35c0018 	cmp	ip, #24
  140ec0:	0a000031 	beq	140f8c <loop24>
  140ec4:	e35c0008 	cmp	ip, #8
  140ec8:	0a000017 	beq	140f2c <loop8>

00140ecc <loop16>:
  140ecc:	e491c004 	ldr	ip, [r1], #4
  140ed0:	e1a0400c 	mov	r4, ip
  140ed4:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140ed8:	e2522020 	subs	r2, r2, #32
  140edc:	2491c004 	ldrcs	ip, [r1], #4
  140ee0:	e1833804 	orr	r3, r3, r4, lsl #16
  140ee4:	e1a04824 	lsr	r4, r4, #16
  140ee8:	e1844805 	orr	r4, r4, r5, lsl #16
  140eec:	e1a05825 	lsr	r5, r5, #16
  140ef0:	e1855806 	orr	r5, r5, r6, lsl #16
  140ef4:	e1a06826 	lsr	r6, r6, #16
  140ef8:	e1866807 	orr	r6, r6, r7, lsl #16
  140efc:	e1a07827 	lsr	r7, r7, #16
  140f00:	e1877808 	orr	r7, r7, r8, lsl #16
  140f04:	e1a08828 	lsr	r8, r8, #16
  140f08:	e1888809 	orr	r8, r8, r9, lsl #16
  140f0c:	e1a09829 	lsr	r9, r9, #16
  140f10:	e189980a 	orr	r9, r9, sl, lsl #16
  140f14:	e1a0a82a 	lsr	sl, sl, #16
  140f18:	e18aa80b 	orr	sl, sl, fp, lsl #16
  140f1c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140f20:	e1a0382b 	lsr	r3, fp, #16
  140f24:	2affffe9 	bcs	140ed0 <loop16+0x4>
  140f28:	ea00002e 	b	140fe8 <less_than_thirtytwo>

00140f2c <loop8>:
  140f2c:	e491c004 	ldr	ip, [r1], #4
  140f30:	e1a0400c 	mov	r4, ip
  140f34:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140f38:	e2522020 	subs	r2, r2, #32
  140f3c:	2491c004 	ldrcs	ip, [r1], #4
  140f40:	e1833c04 	orr	r3, r3, r4, lsl #24
  140f44:	e1a04424 	lsr	r4, r4, #8
  140f48:	e1844c05 	orr	r4, r4, r5, lsl #24
  140f4c:	e1a05425 	lsr	r5, r5, #8
  140f50:	e1855c06 	orr	r5, r5, r6, lsl #24
  140f54:	e1a06426 	lsr	r6, r6, #8
  140f58:	e1866c07 	orr	r6, r6, r7, lsl #24
  140f5c:	e1a07427 	lsr	r7, r7, #8
  140f60:	e1877c08 	orr	r7, r7, r8, lsl #24
  140f64:	e1a08428 	lsr	r8, r8, #8
  140f68:	e1888c09 	orr	r8, r8, r9, lsl #24
  140f6c:	e1a09429 	lsr	r9, r9, #8
  140f70:	e1899c0a 	orr	r9, r9, sl, lsl #24
  140f74:	e1a0a42a 	lsr	sl, sl, #8
  140f78:	e18aac0b 	orr	sl, sl, fp, lsl #24
  140f7c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140f80:	e1a0342b 	lsr	r3, fp, #8
  140f84:	2affffe9 	bcs	140f30 <loop8+0x4>
  140f88:	ea000016 	b	140fe8 <less_than_thirtytwo>

00140f8c <loop24>:
  140f8c:	e491c004 	ldr	ip, [r1], #4
  140f90:	e1a0400c 	mov	r4, ip
  140f94:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140f98:	e2522020 	subs	r2, r2, #32
  140f9c:	2491c004 	ldrcs	ip, [r1], #4
  140fa0:	e1833404 	orr	r3, r3, r4, lsl #8
  140fa4:	e1a04c24 	lsr	r4, r4, #24
  140fa8:	e1844405 	orr	r4, r4, r5, lsl #8
  140fac:	e1a05c25 	lsr	r5, r5, #24
  140fb0:	e1855406 	orr	r5, r5, r6, lsl #8
  140fb4:	e1a06c26 	lsr	r6, r6, #24
  140fb8:	e1866407 	orr	r6, r6, r7, lsl #8
  140fbc:	e1a07c27 	lsr	r7, r7, #24
  140fc0:	e1877408 	orr	r7, r7, r8, lsl #8
  140fc4:	e1a08c28 	lsr	r8, r8, #24
  140fc8:	e1888409 	orr	r8, r8, r9, lsl #8
  140fcc:	e1a09c29 	lsr	r9, r9, #24
  140fd0:	e189940a 	orr	r9, r9, sl, lsl #8
  140fd4:	e1a0ac2a 	lsr	sl, sl, #24
  140fd8:	e18aa40b 	orr	sl, sl, fp, lsl #8
  140fdc:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140fe0:	e1a03c2b 	lsr	r3, fp, #24
  140fe4:	2affffe9 	bcs	140f90 <loop24+0x4>

00140fe8 <less_than_thirtytwo>:
  140fe8:	e26ec020 	rsb	ip, lr, #32
  140fec:	e2822020 	add	r2, r2, #32
  140ff0:	e3520004 	cmp	r2, #4
  140ff4:	3a000006 	bcc	141014 <partial_word_tail>
  140ff8:	e4915004 	ldr	r5, [r1], #4
  140ffc:	e2422004 	sub	r2, r2, #4
  141000:	e1834e15 	orr	r4, r3, r5, lsl lr
  141004:	e1a03c35 	lsr	r3, r5, ip
  141008:	e4804004 	str	r4, [r0], #4
  14100c:	e3520004 	cmp	r2, #4
  141010:	2afffff8 	bcs	140ff8 <less_than_thirtytwo+0x10>

00141014 <partial_word_tail>:
  141014:	e1b05e0e 	lsls	r5, lr, #28
  141018:	44c03001 	strbmi	r3, [r0], #1
  14101c:	41a03423 	lsrmi	r3, r3, #8
  141020:	24c03001 	strbcs	r3, [r0], #1
  141024:	21a03423 	lsrcs	r3, r3, #8
  141028:	24c03001 	strbcs	r3, [r0], #1
  14102c:	e89d0fe0 	ldm	sp, {r5, r6, r7, r8, r9, sl, fp}

00141030 <copy_last_3_and_return>:
  141030:	e1b02f82 	lsls	r2, r2, #31
  141034:	44d12001 	ldrbmi	r2, [r1], #1
  141038:	24d13001 	ldrbcs	r3, [r1], #1
  14103c:	25d1c000 	ldrbcs	ip, [r1]
  141040:	44c02001 	strbmi	r2, [r0], #1
  141044:	24c03001 	strbcs	r3, [r0], #1
  141048:	25c0c000 	strbcs	ip, [r0]
  14104c:	e28dd01c 	add	sp, sp, #28
  141050:	e8bd4011 	pop	{r0, r4, lr}
  141054:	e12fff1e 	bx	lr

00141058 <memcmp>:
  141058:	e3520000 	cmp	r2, #0
  14105c:	0a00000c 	beq	141094 <memcmp+0x3c>
  141060:	e5d0c000 	ldrb	ip, [r0]
  141064:	e5d13000 	ldrb	r3, [r1]
  141068:	e153000c 	cmp	r3, ip
  14106c:	1a00000a 	bne	14109c <memcmp+0x44>
  141070:	e2422001 	sub	r2, r2, #1
  141074:	e0812002 	add	r2, r1, r2
  141078:	ea000003 	b	14108c <memcmp+0x34>
  14107c:	e5f0c001 	ldrb	ip, [r0, #1]!
  141080:	e5f13001 	ldrb	r3, [r1, #1]!
  141084:	e15c0003 	cmp	ip, r3
  141088:	1a000003 	bne	14109c <memcmp+0x44>
  14108c:	e1510002 	cmp	r1, r2
  141090:	1afffff9 	bne	14107c <memcmp+0x24>
  141094:	e3a00000 	mov	r0, #0
  141098:	e12fff1e 	bx	lr
  14109c:	e04c0003 	sub	r0, ip, r3
  1410a0:	e12fff1e 	bx	lr

001410a4 <memmove>:
  1410a4:	e1500001 	cmp	r0, r1
  1410a8:	e92d4030 	push	{r4, r5, lr}
  1410ac:	e1a0e000 	mov	lr, r0
  1410b0:	0a000030 	beq	141178 <memmove+0xd4>
  1410b4:	e0414000 	sub	r4, r1, r0
  1410b8:	e0444002 	sub	r4, r4, r2
  1410bc:	e0625f82 	rsb	r5, r2, r2, lsl #31
  1410c0:	e1540085 	cmp	r4, r5, lsl #1
  1410c4:	e1a0c001 	mov	ip, r1
  1410c8:	e1a03002 	mov	r3, r2
  1410cc:	9a000054 	bls	141224 <memmove+0x180>
  1410d0:	e0212000 	eor	r2, r1, r0
  1410d4:	e1500001 	cmp	r0, r1
  1410d8:	e2022003 	and	r2, r2, #3
  1410dc:	2a000027 	bcs	141180 <memmove+0xdc>
  1410e0:	e3520000 	cmp	r2, #0
  1410e4:	1a00001a 	bne	141154 <memmove+0xb0>
  1410e8:	e3100003 	tst	r0, #3
  1410ec:	0a000050 	beq	141234 <memmove+0x190>
  1410f0:	e3530000 	cmp	r3, #0
  1410f4:	11a02000 	movne	r2, r0
  1410f8:	e2433001 	sub	r3, r3, #1
  1410fc:	1a000002 	bne	14110c <memmove+0x68>
  141100:	ea00001c 	b	141178 <memmove+0xd4>
  141104:	e2533001 	subs	r3, r3, #1
  141108:	3a00001a 	bcc	141178 <memmove+0xd4>
  14110c:	e4dc1001 	ldrb	r1, [ip], #1
  141110:	e4c21001 	strb	r1, [r2], #1
  141114:	e3120003 	tst	r2, #3
  141118:	1afffff9 	bne	141104 <memmove+0x60>
  14111c:	e3530003 	cmp	r3, #3
  141120:	9a00000c 	bls	141158 <memmove+0xb4>
  141124:	e2435004 	sub	r5, r3, #4
  141128:	e3c55003 	bic	r5, r5, #3
  14112c:	e2855004 	add	r5, r5, #4
  141130:	e0824005 	add	r4, r2, r5
  141134:	e24c1004 	sub	r1, ip, #4
  141138:	e5b10004 	ldr	r0, [r1, #4]!
  14113c:	e4820004 	str	r0, [r2], #4
  141140:	e1540002 	cmp	r4, r2
  141144:	1afffffb 	bne	141138 <memmove+0x94>
  141148:	e2033003 	and	r3, r3, #3
  14114c:	e08cc005 	add	ip, ip, r5
  141150:	ea000000 	b	141158 <memmove+0xb4>
  141154:	e1a02000 	mov	r2, r0
  141158:	e3530000 	cmp	r3, #0
  14115c:	12422001 	subne	r2, r2, #1
  141160:	108c3003 	addne	r3, ip, r3
  141164:	0a000003 	beq	141178 <memmove+0xd4>
  141168:	e4dc1001 	ldrb	r1, [ip], #1
  14116c:	e153000c 	cmp	r3, ip
  141170:	e5e21001 	strb	r1, [r2, #1]!
  141174:	1afffffb 	bne	141168 <memmove+0xc4>
  141178:	e1a0000e 	mov	r0, lr
  14117c:	e8bd8030 	pop	{r4, r5, pc}
  141180:	e3520000 	cmp	r2, #0
  141184:	1a00001c 	bne	1411fc <memmove+0x158>
  141188:	e0801003 	add	r1, r0, r3
  14118c:	e3110003 	tst	r1, #3
  141190:	0a000025 	beq	14122c <memmove+0x188>
  141194:	e3530000 	cmp	r3, #0
  141198:	e2432001 	sub	r2, r3, #1
  14119c:	0afffff5 	beq	141178 <memmove+0xd4>
  1411a0:	e08c3003 	add	r3, ip, r3
  1411a4:	ea000001 	b	1411b0 <memmove+0x10c>
  1411a8:	e2522001 	subs	r2, r2, #1
  1411ac:	3afffff1 	bcc	141178 <memmove+0xd4>
  1411b0:	e5730001 	ldrb	r0, [r3, #-1]!
  1411b4:	e5610001 	strb	r0, [r1, #-1]!
  1411b8:	e3110003 	tst	r1, #3
  1411bc:	1afffff9 	bne	1411a8 <memmove+0x104>
  1411c0:	e3520003 	cmp	r2, #3
  1411c4:	91a03002 	movls	r3, r2
  1411c8:	9a00000b 	bls	1411fc <memmove+0x158>
  1411cc:	e24c0004 	sub	r0, ip, #4
  1411d0:	e2423004 	sub	r3, r2, #4
  1411d4:	e3c33003 	bic	r3, r3, #3
  1411d8:	e0800002 	add	r0, r0, r2
  1411dc:	e0400003 	sub	r0, r0, r3
  1411e0:	e08e1002 	add	r1, lr, r2
  1411e4:	e08c3002 	add	r3, ip, r2
  1411e8:	e5334004 	ldr	r4, [r3, #-4]!
  1411ec:	e1530000 	cmp	r3, r0
  1411f0:	e5214004 	str	r4, [r1, #-4]!
  1411f4:	1afffffb 	bne	1411e8 <memmove+0x144>
  1411f8:	e2023003 	and	r3, r2, #3
  1411fc:	e3530000 	cmp	r3, #0
  141200:	108c2003 	addne	r2, ip, r3
  141204:	108e3003 	addne	r3, lr, r3
  141208:	0affffda 	beq	141178 <memmove+0xd4>
  14120c:	e5721001 	ldrb	r1, [r2, #-1]!
  141210:	e15c0002 	cmp	ip, r2
  141214:	e5631001 	strb	r1, [r3, #-1]!
  141218:	1afffffb 	bne	14120c <memmove+0x168>
  14121c:	e1a0000e 	mov	r0, lr
  141220:	e8bd8030 	pop	{r4, r5, pc}
  141224:	e8bd4030 	pop	{r4, r5, lr}
  141228:	eafffecb 	b	140d5c <memcpy>
  14122c:	e1a02003 	mov	r2, r3
  141230:	eaffffe2 	b	1411c0 <memmove+0x11c>
  141234:	e1a02000 	mov	r2, r0
  141238:	eaffffb7 	b	14111c <memmove+0x78>

0014123c <memset>:
  14123c:	e3520000 	cmp	r2, #0
  141240:	012fff1e 	bxeq	lr
  141244:	e1a03000 	mov	r3, r0
  141248:	e20110ff 	and	r1, r1, #255	; 0xff
  14124c:	e6c31002 	strb	r1, [r3], r2
  141250:	e3520002 	cmp	r2, #2
  141254:	e5431001 	strb	r1, [r3, #-1]
  141258:	912fff1e 	bxls	lr
  14125c:	e3520006 	cmp	r2, #6
  141260:	e5c01001 	strb	r1, [r0, #1]
  141264:	e5c01002 	strb	r1, [r0, #2]
  141268:	e5431002 	strb	r1, [r3, #-2]
  14126c:	e5431003 	strb	r1, [r3, #-3]
  141270:	912fff1e 	bxls	lr
  141274:	e3520008 	cmp	r2, #8
  141278:	e5c01003 	strb	r1, [r0, #3]
  14127c:	e5431004 	strb	r1, [r3, #-4]
  141280:	912fff1e 	bxls	lr
  141284:	e260c000 	rsb	ip, r0, #0
  141288:	e20cc003 	and	ip, ip, #3
  14128c:	e042200c 	sub	r2, r2, ip
  141290:	e3c22003 	bic	r2, r2, #3
  141294:	e0811401 	add	r1, r1, r1, lsl #8
  141298:	e080300c 	add	r3, r0, ip
  14129c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  1412a0:	e0811801 	add	r1, r1, r1, lsl #16
  1412a4:	e3520008 	cmp	r2, #8
  1412a8:	e083e002 	add	lr, r3, r2
  1412ac:	e780100c 	str	r1, [r0, ip]
  1412b0:	e50e1004 	str	r1, [lr, #-4]
  1412b4:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  1412b8:	e3520018 	cmp	r2, #24
  1412bc:	e5831004 	str	r1, [r3, #4]
  1412c0:	e5831008 	str	r1, [r3, #8]
  1412c4:	e50e100c 	str	r1, [lr, #-12]
  1412c8:	e50e1008 	str	r1, [lr, #-8]
  1412cc:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  1412d0:	e3a04000 	mov	r4, #0
  1412d4:	e203c004 	and	ip, r3, #4
  1412d8:	e28cc018 	add	ip, ip, #24
  1412dc:	e042200c 	sub	r2, r2, ip
  1412e0:	e352001f 	cmp	r2, #31
  1412e4:	e583100c 	str	r1, [r3, #12]
  1412e8:	e5831010 	str	r1, [r3, #16]
  1412ec:	e5831014 	str	r1, [r3, #20]
  1412f0:	e5831018 	str	r1, [r3, #24]
  1412f4:	e1a05001 	mov	r5, r1
  1412f8:	e50e101c 	str	r1, [lr, #-28]	; 0xffffffe4
  1412fc:	e50e1018 	str	r1, [lr, #-24]	; 0xffffffe8
  141300:	e50e1014 	str	r1, [lr, #-20]	; 0xffffffec
  141304:	e50e1010 	str	r1, [lr, #-16]
  141308:	e1846001 	orr	r6, r4, r1
  14130c:	e1a07001 	mov	r7, r1
  141310:	e083100c 	add	r1, r3, ip
  141314:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  141318:	e2422020 	sub	r2, r2, #32
  14131c:	e3c2301f 	bic	r3, r2, #31
  141320:	e2812040 	add	r2, r1, #64	; 0x40
  141324:	e0833002 	add	r3, r3, r2
  141328:	e2812020 	add	r2, r1, #32
  14132c:	e5026020 	str	r6, [r2, #-32]	; 0xffffffe0
  141330:	e502701c 	str	r7, [r2, #-28]	; 0xffffffe4
  141334:	e5026018 	str	r6, [r2, #-24]	; 0xffffffe8
  141338:	e5027014 	str	r7, [r2, #-20]	; 0xffffffec
  14133c:	e5026010 	str	r6, [r2, #-16]
  141340:	e502700c 	str	r7, [r2, #-12]
  141344:	e90200c0 	stmdb	r2, {r6, r7}
  141348:	e2822020 	add	r2, r2, #32
  14134c:	e1520003 	cmp	r2, r3
  141350:	1afffff5 	bne	14132c <memset+0xf0>
  141354:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00141358 <strcasecmp>:
  141358:	e92d4070 	push	{r4, r5, r6, lr}
  14135c:	e1a05000 	mov	r5, r0
  141360:	e5d00000 	ldrb	r0, [r0]
  141364:	e1a04001 	mov	r4, r1
  141368:	e3500000 	cmp	r0, #0
  14136c:	1a00000c 	bne	1413a4 <strcasecmp+0x4c>
  141370:	ea00000e 	b	1413b0 <strcasecmp+0x58>
  141374:	e1500003 	cmp	r0, r3
  141378:	0a000005 	beq	141394 <strcasecmp+0x3c>
  14137c:	eb00067f 	bl	142d80 <tolower>
  141380:	e1a06000 	mov	r6, r0
  141384:	e5d40000 	ldrb	r0, [r4]
  141388:	eb00067c 	bl	142d80 <tolower>
  14138c:	e1560000 	cmp	r6, r0
  141390:	1a00000c 	bne	1413c8 <strcasecmp+0x70>
  141394:	e5f50001 	ldrb	r0, [r5, #1]!
  141398:	e2844001 	add	r4, r4, #1
  14139c:	e3500000 	cmp	r0, #0
  1413a0:	0a000002 	beq	1413b0 <strcasecmp+0x58>
  1413a4:	e5d43000 	ldrb	r3, [r4]
  1413a8:	e3530000 	cmp	r3, #0
  1413ac:	1afffff0 	bne	141374 <strcasecmp+0x1c>
  1413b0:	eb000672 	bl	142d80 <tolower>
  1413b4:	e1a05000 	mov	r5, r0
  1413b8:	e5d40000 	ldrb	r0, [r4]
  1413bc:	eb00066f 	bl	142d80 <tolower>
  1413c0:	e0450000 	sub	r0, r5, r0
  1413c4:	e8bd8070 	pop	{r4, r5, r6, pc}
  1413c8:	e5d50000 	ldrb	r0, [r5]
  1413cc:	eafffff7 	b	1413b0 <strcasecmp+0x58>

001413d0 <__strcasecmp_l>:
  1413d0:	eaffffe0 	b	141358 <strcasecmp>

001413d4 <strcat>:
  1413d4:	e92d4070 	push	{r4, r5, r6, lr}
  1413d8:	e1a04000 	mov	r4, r0
  1413dc:	e1a05001 	mov	r5, r1
  1413e0:	eb000026 	bl	141480 <strlen>
  1413e4:	e1a01005 	mov	r1, r5
  1413e8:	e0840000 	add	r0, r4, r0
  1413ec:	eb000012 	bl	14143c <strcpy>
  1413f0:	e1a00004 	mov	r0, r4
  1413f4:	e8bd8070 	pop	{r4, r5, r6, pc}

001413f8 <strcmp>:
  1413f8:	e5d02000 	ldrb	r2, [r0]
  1413fc:	e5d13000 	ldrb	r3, [r1]
  141400:	e1530002 	cmp	r3, r2
  141404:	0a000004 	beq	14141c <strcmp+0x24>
  141408:	ea000009 	b	141434 <strcmp+0x3c>
  14140c:	e5f03001 	ldrb	r3, [r0, #1]!
  141410:	e5f12001 	ldrb	r2, [r1, #1]!
  141414:	e1530002 	cmp	r3, r2
  141418:	1a000003 	bne	14142c <strcmp+0x34>
  14141c:	e3530000 	cmp	r3, #0
  141420:	1afffff9 	bne	14140c <strcmp+0x14>
  141424:	e1a00003 	mov	r0, r3
  141428:	e12fff1e 	bx	lr
  14142c:	e0430002 	sub	r0, r3, r2
  141430:	e12fff1e 	bx	lr
  141434:	e0420003 	sub	r0, r2, r3
  141438:	e12fff1e 	bx	lr

0014143c <strcpy>:
  14143c:	e92d4010 	push	{r4, lr}
  141440:	e1a04000 	mov	r4, r0
  141444:	eb000a94 	bl	143e9c <__stpcpy>
  141448:	e1a00004 	mov	r0, r4
  14144c:	e8bd8010 	pop	{r4, pc}

00141450 <strdup>:
  141450:	e92d4070 	push	{r4, r5, r6, lr}
  141454:	e1a05000 	mov	r5, r0
  141458:	eb000008 	bl	141480 <strlen>
  14145c:	e2804001 	add	r4, r0, #1
  141460:	e1a00004 	mov	r0, r4
  141464:	ebffefab 	bl	13d318 <malloc>
  141468:	e3500000 	cmp	r0, #0
  14146c:	08bd8070 	popeq	{r4, r5, r6, pc}
  141470:	e1a02004 	mov	r2, r4
  141474:	e1a01005 	mov	r1, r5
  141478:	e8bd4070 	pop	{r4, r5, r6, lr}
  14147c:	eafffe36 	b	140d5c <memcpy>

00141480 <strlen>:
  141480:	e3100003 	tst	r0, #3
  141484:	0a000023 	beq	141518 <strlen+0x98>
  141488:	e5d03000 	ldrb	r3, [r0]
  14148c:	e3530000 	cmp	r3, #0
  141490:	12803001 	addne	r3, r0, #1
  141494:	1a000005 	bne	1414b0 <strlen+0x30>
  141498:	ea000020 	b	141520 <strlen+0xa0>
  14149c:	e5d31000 	ldrb	r1, [r3]
  1414a0:	e283c001 	add	ip, r3, #1
  1414a4:	e3510000 	cmp	r1, #0
  1414a8:	0a000018 	beq	141510 <strlen+0x90>
  1414ac:	e1a0300c 	mov	r3, ip
  1414b0:	e3130003 	tst	r3, #3
  1414b4:	e1a02003 	mov	r2, r3
  1414b8:	1afffff7 	bne	14149c <strlen+0x1c>
  1414bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1414c0:	e59fe060 	ldr	lr, [pc, #96]	; 141528 <strlen+0xa8>
  1414c4:	e592c000 	ldr	ip, [r2]
  1414c8:	e59f305c 	ldr	r3, [pc, #92]	; 14152c <strlen+0xac>
  1414cc:	e08c100e 	add	r1, ip, lr
  1414d0:	e1c1100c 	bic	r1, r1, ip
  1414d4:	e1110003 	tst	r1, r3
  1414d8:	1a000004 	bne	1414f0 <strlen+0x70>
  1414dc:	e5b2c004 	ldr	ip, [r2, #4]!
  1414e0:	e08c100e 	add	r1, ip, lr
  1414e4:	e1c1100c 	bic	r1, r1, ip
  1414e8:	e1110003 	tst	r1, r3
  1414ec:	0afffffa 	beq	1414dc <strlen+0x5c>
  1414f0:	e5d23000 	ldrb	r3, [r2]
  1414f4:	e3530000 	cmp	r3, #0
  1414f8:	0a000002 	beq	141508 <strlen+0x88>
  1414fc:	e5f23001 	ldrb	r3, [r2, #1]!
  141500:	e3530000 	cmp	r3, #0
  141504:	1afffffc 	bne	1414fc <strlen+0x7c>
  141508:	e0420000 	sub	r0, r2, r0
  14150c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  141510:	e0430000 	sub	r0, r3, r0
  141514:	e12fff1e 	bx	lr
  141518:	e1a02000 	mov	r2, r0
  14151c:	eaffffe6 	b	1414bc <strlen+0x3c>
  141520:	e1a00003 	mov	r0, r3
  141524:	e12fff1e 	bx	lr
  141528:	fefefeff 	.word	0xfefefeff
  14152c:	80808080 	.word	0x80808080

00141530 <strncmp>:
  141530:	e3520000 	cmp	r2, #0
  141534:	0a00001e 	beq	1415b4 <strncmp+0x84>
  141538:	e92d4010 	push	{r4, lr}
  14153c:	e5d04000 	ldrb	r4, [r0]
  141540:	e5d1c000 	ldrb	ip, [r1]
  141544:	e3540000 	cmp	r4, #0
  141548:	0a00001b 	beq	1415bc <strncmp+0x8c>
  14154c:	e3520001 	cmp	r2, #1
  141550:	135c0000 	cmpne	ip, #0
  141554:	13a03001 	movne	r3, #1
  141558:	03a03000 	moveq	r3, #0
  14155c:	e154000c 	cmp	r4, ip
  141560:	13a03000 	movne	r3, #0
  141564:	02033001 	andeq	r3, r3, #1
  141568:	e3530000 	cmp	r3, #0
  14156c:	e242e001 	sub	lr, r2, #1
  141570:	0a000011 	beq	1415bc <strncmp+0x8c>
  141574:	e5f02001 	ldrb	r2, [r0, #1]!
  141578:	e24ee001 	sub	lr, lr, #1
  14157c:	e3520000 	cmp	r2, #0
  141580:	e5f1c001 	ldrb	ip, [r1, #1]!
  141584:	0a000008 	beq	1415ac <strncmp+0x7c>
  141588:	e042300c 	sub	r3, r2, ip
  14158c:	e16f3f13 	clz	r3, r3
  141590:	e35c0000 	cmp	ip, #0
  141594:	e1a032a3 	lsr	r3, r3, #5
  141598:	03a03000 	moveq	r3, #0
  14159c:	e35e0000 	cmp	lr, #0
  1415a0:	03a03000 	moveq	r3, #0
  1415a4:	e3530000 	cmp	r3, #0
  1415a8:	1afffff1 	bne	141574 <strncmp+0x44>
  1415ac:	e042000c 	sub	r0, r2, ip
  1415b0:	e8bd8010 	pop	{r4, pc}
  1415b4:	e1a00002 	mov	r0, r2
  1415b8:	e12fff1e 	bx	lr
  1415bc:	e1a02004 	mov	r2, r4
  1415c0:	eafffff9 	b	1415ac <strncmp+0x7c>

001415c4 <strncpy>:
  1415c4:	e92d4010 	push	{r4, lr}
  1415c8:	e1a04000 	mov	r4, r0
  1415cc:	eb000a63 	bl	143f60 <__stpncpy>
  1415d0:	e1a00004 	mov	r0, r4
  1415d4:	e8bd8010 	pop	{r4, pc}

001415d8 <strnlen>:
  1415d8:	e92d4070 	push	{r4, r5, r6, lr}
  1415dc:	e1a04001 	mov	r4, r1
  1415e0:	e3a01000 	mov	r1, #0
  1415e4:	e1a02004 	mov	r2, r4
  1415e8:	e1a05000 	mov	r5, r0
  1415ec:	eb0009d4 	bl	143d44 <memchr>
  1415f0:	e3500000 	cmp	r0, #0
  1415f4:	10400005 	subne	r0, r0, r5
  1415f8:	01a00004 	moveq	r0, r4
  1415fc:	e8bd8070 	pop	{r4, r5, r6, pc}

00141600 <twoway_strstr>:
  141600:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  141604:	e1a08001 	mov	r8, r1
  141608:	e24dde43 	sub	sp, sp, #1072	; 0x430
  14160c:	e24dd004 	sub	sp, sp, #4
  141610:	e1a09000 	mov	r9, r0
  141614:	e3a02020 	mov	r2, #32
  141618:	e3a01000 	mov	r1, #0
  14161c:	e28d0010 	add	r0, sp, #16
  141620:	ebffff05 	bl	14123c <memset>
  141624:	e5d83000 	ldrb	r3, [r8]
  141628:	e3530000 	cmp	r3, #0
  14162c:	0a0000c8 	beq	141954 <twoway_strstr+0x354>
  141630:	e5d92000 	ldrb	r2, [r9]
  141634:	e3520000 	cmp	r2, #0
  141638:	11a0c008 	movne	ip, r8
  14163c:	11a0e009 	movne	lr, r9
  141640:	13a05000 	movne	r5, #0
  141644:	13a06001 	movne	r6, #1
  141648:	1a000003 	bne	14165c <twoway_strstr+0x5c>
  14164c:	ea000075 	b	141828 <twoway_strstr+0x228>
  141650:	e5fe2001 	ldrb	r2, [lr, #1]!
  141654:	e3520000 	cmp	r2, #0
  141658:	0a000072 	beq	141828 <twoway_strstr+0x228>
  14165c:	e28d1e43 	add	r1, sp, #1072	; 0x430
  141660:	e1a022a3 	lsr	r2, r3, #5
  141664:	e0812102 	add	r2, r1, r2, lsl #2
  141668:	e0810103 	add	r0, r1, r3, lsl #2
  14166c:	e203401f 	and	r4, r3, #31
  141670:	e5121420 	ldr	r1, [r2, #-1056]	; 0xfffffbe0
  141674:	e5fc3001 	ldrb	r3, [ip, #1]!
  141678:	e2855001 	add	r5, r5, #1
  14167c:	e1811416 	orr	r1, r1, r6, lsl r4
  141680:	e3530000 	cmp	r3, #0
  141684:	e5005400 	str	r5, [r0, #-1024]	; 0xfffffc00
  141688:	e5021420 	str	r1, [r2, #-1056]	; 0xfffffbe0
  14168c:	1affffef 	bne	141650 <twoway_strstr+0x50>
  141690:	e3a00001 	mov	r0, #1
  141694:	e3e0c000 	mvn	ip, #0
  141698:	e1a01000 	mov	r1, r0
  14169c:	e0832001 	add	r2, r3, r1
  1416a0:	e1550002 	cmp	r5, r2
  1416a4:	e088e00c 	add	lr, r8, ip
  1416a8:	9a00000b 	bls	1416dc <twoway_strstr+0xdc>
  1416ac:	e7de4001 	ldrb	r4, [lr, r1]
  1416b0:	e7d8e002 	ldrb	lr, [r8, r2]
  1416b4:	e154000e 	cmp	r4, lr
  1416b8:	0a00008f 	beq	1418fc <twoway_strstr+0x2fc>
  1416bc:	9a000096 	bls	14191c <twoway_strstr+0x31c>
  1416c0:	e042000c 	sub	r0, r2, ip
  1416c4:	e1a03002 	mov	r3, r2
  1416c8:	e3a01001 	mov	r1, #1
  1416cc:	e0832001 	add	r2, r3, r1
  1416d0:	e1550002 	cmp	r5, r2
  1416d4:	e088e00c 	add	lr, r8, ip
  1416d8:	8afffff3 	bhi	1416ac <twoway_strstr+0xac>
  1416dc:	e3a06001 	mov	r6, #1
  1416e0:	e3a01000 	mov	r1, #0
  1416e4:	e1a02006 	mov	r2, r6
  1416e8:	e3e0a000 	mvn	sl, #0
  1416ec:	e0813002 	add	r3, r1, r2
  1416f0:	e1550003 	cmp	r5, r3
  1416f4:	e088e002 	add	lr, r8, r2
  1416f8:	9a00000b 	bls	14172c <twoway_strstr+0x12c>
  1416fc:	e7de400a 	ldrb	r4, [lr, sl]
  141700:	e7d8e003 	ldrb	lr, [r8, r3]
  141704:	e154000e 	cmp	r4, lr
  141708:	0a00007f 	beq	14190c <twoway_strstr+0x30c>
  14170c:	2a000087 	bcs	141930 <twoway_strstr+0x330>
  141710:	e043600a 	sub	r6, r3, sl
  141714:	e3a02001 	mov	r2, #1
  141718:	e1a01003 	mov	r1, r3
  14171c:	e0813002 	add	r3, r1, r2
  141720:	e1550003 	cmp	r5, r3
  141724:	e088e002 	add	lr, r8, r2
  141728:	8afffff3 	bhi	1416fc <twoway_strstr+0xfc>
  14172c:	e58d6008 	str	r6, [sp, #8]
  141730:	e28a2001 	add	r2, sl, #1
  141734:	e28c3001 	add	r3, ip, #1
  141738:	e1520003 	cmp	r2, r3
  14173c:	91a0b003 	movls	fp, r3
  141740:	81a0b002 	movhi	fp, r2
  141744:	e59d3008 	ldr	r3, [sp, #8]
  141748:	91a03000 	movls	r3, r0
  14174c:	e1a0200b 	mov	r2, fp
  141750:	e0881003 	add	r1, r8, r3
  141754:	e1a00008 	mov	r0, r8
  141758:	91a0a00c 	movls	sl, ip
  14175c:	e58d3008 	str	r3, [sp, #8]
  141760:	ebfffe3c 	bl	141058 <memcmp>
  141764:	e3500000 	cmp	r0, #0
  141768:	0a000075 	beq	141944 <twoway_strstr+0x344>
  14176c:	e2452001 	sub	r2, r5, #1
  141770:	e042200a 	sub	r2, r2, sl
  141774:	e152000a 	cmp	r2, sl
  141778:	e3a03000 	mov	r3, #0
  14177c:	31a0200a 	movcc	r2, sl
  141780:	e58d300c 	str	r3, [sp, #12]
  141784:	e2823001 	add	r3, r2, #1
  141788:	e58d3008 	str	r3, [sp, #8]
  14178c:	e1a04009 	mov	r4, r9
  141790:	e3a06000 	mov	r6, #0
  141794:	e3a07001 	mov	r7, #1
  141798:	e385303f 	orr	r3, r5, #63	; 0x3f
  14179c:	e58d3004 	str	r3, [sp, #4]
  1417a0:	e0493004 	sub	r3, r9, r4
  1417a4:	e1530005 	cmp	r3, r5
  1417a8:	3a000014 	bcc	141800 <twoway_strstr+0x200>
  1417ac:	e0841005 	add	r1, r4, r5
  1417b0:	e5513001 	ldrb	r3, [r1, #-1]
  1417b4:	e28d0e43 	add	r0, sp, #1072	; 0x430
  1417b8:	e1a022a3 	lsr	r2, r3, #5
  1417bc:	e0802102 	add	r2, r0, r2, lsl #2
  1417c0:	e5122420 	ldr	r2, [r2, #-1056]	; 0xfffffbe0
  1417c4:	e203001f 	and	r0, r3, #31
  1417c8:	e0122017 	ands	r2, r2, r7, lsl r0
  1417cc:	0a000040 	beq	1418d4 <twoway_strstr+0x2d4>
  1417d0:	e28d2e43 	add	r2, sp, #1072	; 0x430
  1417d4:	e0823103 	add	r3, r2, r3, lsl #2
  1417d8:	e5133400 	ldr	r3, [r3, #-1024]	; 0xfffffc00
  1417dc:	e0553003 	subs	r3, r5, r3
  1417e0:	0a000015 	beq	14183c <twoway_strstr+0x23c>
  1417e4:	e1560003 	cmp	r6, r3
  1417e8:	20844006 	addcs	r4, r4, r6
  1417ec:	30844003 	addcc	r4, r4, r3
  1417f0:	e0493004 	sub	r3, r9, r4
  1417f4:	e1530005 	cmp	r3, r5
  1417f8:	e3a06000 	mov	r6, #0
  1417fc:	2affffea 	bcs	1417ac <twoway_strstr+0x1ac>
  141800:	e59d2004 	ldr	r2, [sp, #4]
  141804:	e3a01000 	mov	r1, #0
  141808:	e1a00009 	mov	r0, r9
  14180c:	eb00094c 	bl	143d44 <memchr>
  141810:	e3500000 	cmp	r0, #0
  141814:	0a000035 	beq	1418f0 <twoway_strstr+0x2f0>
  141818:	e0403004 	sub	r3, r0, r4
  14181c:	e1530005 	cmp	r3, r5
  141820:	21a09000 	movcs	r9, r0
  141824:	2affffe0 	bcs	1417ac <twoway_strstr+0x1ac>
  141828:	e3a04000 	mov	r4, #0
  14182c:	e1a00004 	mov	r0, r4
  141830:	e28dde43 	add	sp, sp, #1072	; 0x430
  141834:	e28dd004 	add	sp, sp, #4
  141838:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  14183c:	e156000b 	cmp	r6, fp
  141840:	21a03006 	movcs	r3, r6
  141844:	31a0300b 	movcc	r3, fp
  141848:	e7d82003 	ldrb	r2, [r8, r3]
  14184c:	e0881003 	add	r1, r8, r3
  141850:	e3520000 	cmp	r2, #0
  141854:	0a00000b 	beq	141888 <twoway_strstr+0x288>
  141858:	e7d4c003 	ldrb	ip, [r4, r3]
  14185c:	e0840003 	add	r0, r4, r3
  141860:	e15c0002 	cmp	ip, r2
  141864:	0a000003 	beq	141878 <twoway_strstr+0x278>
  141868:	ea00001c 	b	1418e0 <twoway_strstr+0x2e0>
  14186c:	e5f0c001 	ldrb	ip, [r0, #1]!
  141870:	e15c0002 	cmp	ip, r2
  141874:	1a000019 	bne	1418e0 <twoway_strstr+0x2e0>
  141878:	e5f12001 	ldrb	r2, [r1, #1]!
  14187c:	e2833001 	add	r3, r3, #1
  141880:	e3520000 	cmp	r2, #0
  141884:	1afffff8 	bne	14186c <twoway_strstr+0x26c>
  141888:	e156000b 	cmp	r6, fp
  14188c:	2affffe6 	bcs	14182c <twoway_strstr+0x22c>
  141890:	e7d8300a 	ldrb	r3, [r8, sl]
  141894:	e7d4100a 	ldrb	r1, [r4, sl]
  141898:	e088200a 	add	r2, r8, sl
  14189c:	e1510003 	cmp	r1, r3
  1418a0:	e084300a 	add	r3, r4, sl
  1418a4:	1a000006 	bne	1418c4 <twoway_strstr+0x2c4>
  1418a8:	e0431004 	sub	r1, r3, r4
  1418ac:	e1560001 	cmp	r6, r1
  1418b0:	2affffdd 	bcs	14182c <twoway_strstr+0x22c>
  1418b4:	e5720001 	ldrb	r0, [r2, #-1]!
  1418b8:	e5731001 	ldrb	r1, [r3, #-1]!
  1418bc:	e1500001 	cmp	r0, r1
  1418c0:	0afffff8 	beq	1418a8 <twoway_strstr+0x2a8>
  1418c4:	e59d3008 	ldr	r3, [sp, #8]
  1418c8:	e59d600c 	ldr	r6, [sp, #12]
  1418cc:	e0844003 	add	r4, r4, r3
  1418d0:	eaffffb2 	b	1417a0 <twoway_strstr+0x1a0>
  1418d4:	e1a04001 	mov	r4, r1
  1418d8:	e1a06002 	mov	r6, r2
  1418dc:	eaffffaf 	b	1417a0 <twoway_strstr+0x1a0>
  1418e0:	e043300a 	sub	r3, r3, sl
  1418e4:	e0844003 	add	r4, r4, r3
  1418e8:	e3a06000 	mov	r6, #0
  1418ec:	eaffffab 	b	1417a0 <twoway_strstr+0x1a0>
  1418f0:	e59d3004 	ldr	r3, [sp, #4]
  1418f4:	e0899003 	add	r9, r9, r3
  1418f8:	eaffffab 	b	1417ac <twoway_strstr+0x1ac>
  1418fc:	e1510000 	cmp	r1, r0
  141900:	12811001 	addne	r1, r1, #1
  141904:	1affff64 	bne	14169c <twoway_strstr+0x9c>
  141908:	eaffff6d 	b	1416c4 <twoway_strstr+0xc4>
  14190c:	e1520006 	cmp	r2, r6
  141910:	12822001 	addne	r2, r2, #1
  141914:	1affff74 	bne	1416ec <twoway_strstr+0xec>
  141918:	eaffff7d 	b	141714 <twoway_strstr+0x114>
  14191c:	e3a00001 	mov	r0, #1
  141920:	e1a0c003 	mov	ip, r3
  141924:	e1a01000 	mov	r1, r0
  141928:	e0833000 	add	r3, r3, r0
  14192c:	eaffff5a 	b	14169c <twoway_strstr+0x9c>
  141930:	e3a06001 	mov	r6, #1
  141934:	e1a0a001 	mov	sl, r1
  141938:	e1a02006 	mov	r2, r6
  14193c:	e0811006 	add	r1, r1, r6
  141940:	eaffff69 	b	1416ec <twoway_strstr+0xec>
  141944:	e59d3008 	ldr	r3, [sp, #8]
  141948:	e0453003 	sub	r3, r5, r3
  14194c:	e58d300c 	str	r3, [sp, #12]
  141950:	eaffff8d 	b	14178c <twoway_strstr+0x18c>
  141954:	e3e0c000 	mvn	ip, #0
  141958:	e3a00001 	mov	r0, #1
  14195c:	e1a05003 	mov	r5, r3
  141960:	e1a0a00c 	mov	sl, ip
  141964:	e58d0008 	str	r0, [sp, #8]
  141968:	eaffff70 	b	141730 <twoway_strstr+0x130>

0014196c <strstr>:
  14196c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141970:	e1a04001 	mov	r4, r1
  141974:	e5d11000 	ldrb	r1, [r1]
  141978:	e1a03000 	mov	r3, r0
  14197c:	e3510000 	cmp	r1, #0
  141980:	1a000001 	bne	14198c <strstr+0x20>
  141984:	e1a00003 	mov	r0, r3
  141988:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  14198c:	eb0009c5 	bl	1440a8 <strchr>
  141990:	e2503000 	subs	r3, r0, #0
  141994:	0afffffa 	beq	141984 <strstr+0x18>
  141998:	e5d41001 	ldrb	r1, [r4, #1]
  14199c:	e3510000 	cmp	r1, #0
  1419a0:	0afffff7 	beq	141984 <strstr+0x18>
  1419a4:	e5d3c001 	ldrb	ip, [r3, #1]
  1419a8:	e35c0000 	cmp	ip, #0
  1419ac:	0a000051 	beq	141af8 <strstr+0x18c>
  1419b0:	e5d4e002 	ldrb	lr, [r4, #2]
  1419b4:	e35e0000 	cmp	lr, #0
  1419b8:	0a000029 	beq	141a64 <strstr+0xf8>
  1419bc:	e5d35002 	ldrb	r5, [r3, #2]
  1419c0:	e3550000 	cmp	r5, #0
  1419c4:	0a00004d 	beq	141b00 <strstr+0x194>
  1419c8:	e5d47003 	ldrb	r7, [r4, #3]
  1419cc:	e3570000 	cmp	r7, #0
  1419d0:	0a000032 	beq	141aa0 <strstr+0x134>
  1419d4:	e5d36003 	ldrb	r6, [r3, #3]
  1419d8:	e3560000 	cmp	r6, #0
  1419dc:	0a000049 	beq	141b08 <strstr+0x19c>
  1419e0:	e5d42004 	ldrb	r2, [r4, #4]
  1419e4:	e3520000 	cmp	r2, #0
  1419e8:	0a000002 	beq	1419f8 <strstr+0x8c>
  1419ec:	e1a01004 	mov	r1, r4
  1419f0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  1419f4:	eaffff01 	b	141600 <twoway_strstr>
  1419f8:	e5d40000 	ldrb	r0, [r4]
  1419fc:	e4d32003 	ldrb	r2, [r3], #3
  141a00:	e1800401 	orr	r0, r0, r1, lsl #8
  141a04:	e182240c 	orr	r2, r2, ip, lsl #8
  141a08:	e180080e 	orr	r0, r0, lr, lsl #16
  141a0c:	e1822805 	orr	r2, r2, r5, lsl #16
  141a10:	e180ec07 	orr	lr, r0, r7, lsl #24
  141a14:	e1825c06 	orr	r5, r2, r6, lsl #24
  141a18:	e0252865 	eor	r2, r5, r5, ror #16
  141a1c:	e02e086e 	eor	r0, lr, lr, ror #16
  141a20:	e1a02422 	lsr	r2, r2, #8
  141a24:	e1a00420 	lsr	r0, r0, #8
  141a28:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
  141a2c:	e3c00cff 	bic	r0, r0, #65280	; 0xff00
  141a30:	e0222465 	eor	r2, r2, r5, ror #8
  141a34:	e020046e 	eor	r0, r0, lr, ror #8
  141a38:	e1520000 	cmp	r2, r0
  141a3c:	1a000002 	bne	141a4c <strstr+0xe0>
  141a40:	ea000028 	b	141ae8 <strstr+0x17c>
  141a44:	e1500002 	cmp	r0, r2
  141a48:	0a000026 	beq	141ae8 <strstr+0x17c>
  141a4c:	e5f31001 	ldrb	r1, [r3, #1]!
  141a50:	e3510000 	cmp	r1, #0
  141a54:	e1812402 	orr	r2, r1, r2, lsl #8
  141a58:	1afffff9 	bne	141a44 <strstr+0xd8>
  141a5c:	e1a03001 	mov	r3, r1
  141a60:	eaffffc7 	b	141984 <strstr+0x18>
  141a64:	e5d40000 	ldrb	r0, [r4]
  141a68:	e4d32001 	ldrb	r2, [r3], #1
  141a6c:	e1811400 	orr	r1, r1, r0, lsl #8
  141a70:	e18c2402 	orr	r2, ip, r2, lsl #8
  141a74:	ea000005 	b	141a90 <strstr+0x124>
  141a78:	e5f30001 	ldrb	r0, [r3, #1]!
  141a7c:	e1802402 	orr	r2, r0, r2, lsl #8
  141a80:	e1a02802 	lsl	r2, r2, #16
  141a84:	e3500000 	cmp	r0, #0
  141a88:	e1a02822 	lsr	r2, r2, #16
  141a8c:	0a000017 	beq	141af0 <strstr+0x184>
  141a90:	e1510002 	cmp	r1, r2
  141a94:	1afffff7 	bne	141a78 <strstr+0x10c>
  141a98:	e2433001 	sub	r3, r3, #1
  141a9c:	eaffffb8 	b	141984 <strstr+0x18>
  141aa0:	e5d46000 	ldrb	r6, [r4]
  141aa4:	e4d34002 	ldrb	r4, [r3], #2
  141aa8:	e1a00801 	lsl	r0, r1, #16
  141aac:	e1a0280c 	lsl	r2, ip, #16
  141ab0:	e1800c06 	orr	r0, r0, r6, lsl #24
  141ab4:	e1822c04 	orr	r2, r2, r4, lsl #24
  141ab8:	e180040e 	orr	r0, r0, lr, lsl #8
  141abc:	e1822405 	orr	r2, r2, r5, lsl #8
  141ac0:	ea000004 	b	141ad8 <strstr+0x16c>
  141ac4:	e5f31001 	ldrb	r1, [r3, #1]!
  141ac8:	e1812002 	orr	r2, r1, r2
  141acc:	e3510000 	cmp	r1, #0
  141ad0:	e1a02402 	lsl	r2, r2, #8
  141ad4:	0affffe0 	beq	141a5c <strstr+0xf0>
  141ad8:	e1500002 	cmp	r0, r2
  141adc:	1afffff8 	bne	141ac4 <strstr+0x158>
  141ae0:	e2433002 	sub	r3, r3, #2
  141ae4:	eaffffa6 	b	141984 <strstr+0x18>
  141ae8:	e2433003 	sub	r3, r3, #3
  141aec:	eaffffa4 	b	141984 <strstr+0x18>
  141af0:	e1a03000 	mov	r3, r0
  141af4:	eaffffa2 	b	141984 <strstr+0x18>
  141af8:	e1a0300c 	mov	r3, ip
  141afc:	eaffffa0 	b	141984 <strstr+0x18>
  141b00:	e1a03005 	mov	r3, r5
  141b04:	eaffff9e 	b	141984 <strstr+0x18>
  141b08:	e1a03006 	mov	r3, r6
  141b0c:	eaffff9c 	b	141984 <strstr+0x18>

00141b10 <__lock>:
  141b10:	e59f3150 	ldr	r3, [pc, #336]	; 141c68 <__lock+0x158>
  141b14:	e593300c 	ldr	r3, [r3, #12]
  141b18:	e3530000 	cmp	r3, #0
  141b1c:	012fff1e 	bxeq	lr
  141b20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141b24:	e1a04000 	mov	r4, r0
  141b28:	e59f613c 	ldr	r6, [pc, #316]	; 141c6c <__lock+0x15c>
  141b2c:	e3a00000 	mov	r0, #0
  141b30:	e3a01106 	mov	r1, #-2147483647	; 0x80000001
  141b34:	e1a02004 	mov	r2, r4
  141b38:	e5963000 	ldr	r3, [r6]
  141b3c:	e12fff33 	blx	r3
  141b40:	e3500000 	cmp	r0, #0
  141b44:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141b48:	e5945000 	ldr	r5, [r4]
  141b4c:	e3550000 	cmp	r5, #0
  141b50:	0afffff5 	beq	141b2c <__lock+0x1c>
  141b54:	e3a0800a 	mov	r8, #10
  141b58:	e3550000 	cmp	r5, #0
  141b5c:	b2455106 	sublt	r5, r5, #-2147483647	; 0x80000001
  141b60:	e2857106 	add	r7, r5, #-2147483647	; 0x80000001
  141b64:	e1a00005 	mov	r0, r5
  141b68:	e1a01007 	mov	r1, r7
  141b6c:	e1a02004 	mov	r2, r4
  141b70:	e5963000 	ldr	r3, [r6]
  141b74:	e12fff33 	blx	r3
  141b78:	e3500000 	cmp	r0, #0
  141b7c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141b80:	e5943000 	ldr	r3, [r4]
  141b84:	e1550003 	cmp	r5, r3
  141b88:	0afffff5 	beq	141b64 <__lock+0x54>
  141b8c:	e2588001 	subs	r8, r8, #1
  141b90:	e1a05003 	mov	r5, r3
  141b94:	1affffef 	bne	141b58 <__lock+0x48>
  141b98:	e5947000 	ldr	r7, [r4]
  141b9c:	e2875001 	add	r5, r7, #1
  141ba0:	ea000002 	b	141bb0 <__lock+0xa0>
  141ba4:	e5943000 	ldr	r3, [r4]
  141ba8:	e1570003 	cmp	r7, r3
  141bac:	1afffff9 	bne	141b98 <__lock+0x88>
  141bb0:	e1a00007 	mov	r0, r7
  141bb4:	e1a01005 	mov	r1, r5
  141bb8:	e1a02004 	mov	r2, r4
  141bbc:	e5963000 	ldr	r3, [r6]
  141bc0:	e12fff33 	blx	r3
  141bc4:	e3500000 	cmp	r0, #0
  141bc8:	1afffff5 	bne	141ba4 <__lock+0x94>
  141bcc:	e3550000 	cmp	r5, #0
  141bd0:	ba00000d 	blt	141c0c <__lock+0xfc>
  141bd4:	e2857102 	add	r7, r5, #-2147483648	; 0x80000000
  141bd8:	e1a00005 	mov	r0, r5
  141bdc:	e1a01007 	mov	r1, r7
  141be0:	e1a02004 	mov	r2, r4
  141be4:	e5963000 	ldr	r3, [r6]
  141be8:	e12fff33 	blx	r3
  141bec:	e3500000 	cmp	r0, #0
  141bf0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141bf4:	e5943000 	ldr	r3, [r4]
  141bf8:	e1550003 	cmp	r5, r3
  141bfc:	0afffff5 	beq	141bd8 <__lock+0xc8>
  141c00:	e1a05003 	mov	r5, r3
  141c04:	e3550000 	cmp	r5, #0
  141c08:	aafffff1 	bge	141bd4 <__lock+0xc4>
  141c0c:	e3a000f0 	mov	r0, #240	; 0xf0
  141c10:	ebffe9d8 	bl	13c378 <get_rtt_syscall>
  141c14:	e2507000 	subs	r7, r0, #0
  141c18:	0a000006 	beq	141c38 <__lock+0x128>
  141c1c:	e3a03000 	mov	r3, #0
  141c20:	e1a02005 	mov	r2, r5
  141c24:	e3a01080 	mov	r1, #128	; 0x80
  141c28:	e1a00004 	mov	r0, r4
  141c2c:	e12fff37 	blx	r7
  141c30:	e3700026 	cmn	r0, #38	; 0x26
  141c34:	0a000001 	beq	141c40 <__lock+0x130>
  141c38:	e2455106 	sub	r5, r5, #-2147483647	; 0x80000001
  141c3c:	eaffffe4 	b	141bd4 <__lock+0xc4>
  141c40:	e3a000f0 	mov	r0, #240	; 0xf0
  141c44:	ebffe9cb 	bl	13c378 <get_rtt_syscall>
  141c48:	e2507000 	subs	r7, r0, #0
  141c4c:	0afffff9 	beq	141c38 <__lock+0x128>
  141c50:	e3a03000 	mov	r3, #0
  141c54:	e1a02005 	mov	r2, r5
  141c58:	e1a01003 	mov	r1, r3
  141c5c:	e1a00004 	mov	r0, r4
  141c60:	e12fff37 	blx	r7
  141c64:	eafffff3 	b	141c38 <__lock+0x128>
  141c68:	0015d08c 	.word	0x0015d08c
  141c6c:	0014d3d8 	.word	0x0014d3d8

00141c70 <__unlock>:
  141c70:	e5903000 	ldr	r3, [r0]
  141c74:	e3530000 	cmp	r3, #0
  141c78:	a12fff1e 	bxge	lr
  141c7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141c80:	e1a05000 	mov	r5, r0
  141c84:	e59f7084 	ldr	r7, [pc, #132]	; 141d10 <__unlock+0xa0>
  141c88:	e5954000 	ldr	r4, [r5]
  141c8c:	e2446106 	sub	r6, r4, #-2147483647	; 0x80000001
  141c90:	ea000002 	b	141ca0 <__unlock+0x30>
  141c94:	e5953000 	ldr	r3, [r5]
  141c98:	e1540003 	cmp	r4, r3
  141c9c:	1afffff9 	bne	141c88 <__unlock+0x18>
  141ca0:	e1a00004 	mov	r0, r4
  141ca4:	e1a01006 	mov	r1, r6
  141ca8:	e1a02005 	mov	r2, r5
  141cac:	e5973000 	ldr	r3, [r7]
  141cb0:	e12fff33 	blx	r3
  141cb4:	e3500000 	cmp	r0, #0
  141cb8:	1afffff5 	bne	141c94 <__unlock+0x24>
  141cbc:	e3540106 	cmp	r4, #-2147483647	; 0x80000001
  141cc0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141cc4:	e3a000f0 	mov	r0, #240	; 0xf0
  141cc8:	ebffe9aa 	bl	13c378 <get_rtt_syscall>
  141ccc:	e2503000 	subs	r3, r0, #0
  141cd0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141cd4:	e3a02001 	mov	r2, #1
  141cd8:	e3a01081 	mov	r1, #129	; 0x81
  141cdc:	e1a00005 	mov	r0, r5
  141ce0:	e12fff33 	blx	r3
  141ce4:	e3700026 	cmn	r0, #38	; 0x26
  141ce8:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  141cec:	e3a000f0 	mov	r0, #240	; 0xf0
  141cf0:	ebffe9a0 	bl	13c378 <get_rtt_syscall>
  141cf4:	e2503000 	subs	r3, r0, #0
  141cf8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141cfc:	e3a02001 	mov	r2, #1
  141d00:	e1a00005 	mov	r0, r5
  141d04:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  141d08:	e1a01002 	mov	r1, r2
  141d0c:	e12fff13 	bx	r3
  141d10:	0014d3d8 	.word	0x0014d3d8

00141d14 <__syscall_cp_c>:
  141d14:	eaffe9c1 	b	13c420 <__syscall>

00141d18 <__syscall_cp>:
  141d18:	eaffe9c0 	b	13c420 <__syscall>

00141d1c <__wait>:
  141d1c:	e3530000 	cmp	r3, #0
  141d20:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  141d24:	e3a03064 	mov	r3, #100	; 0x64
  141d28:	e1a04001 	mov	r4, r1
  141d2c:	e1a07000 	mov	r7, r0
  141d30:	e1a08002 	mov	r8, r2
  141d34:	13a09080 	movne	r9, #128	; 0x80
  141d38:	03a09000 	moveq	r9, #0
  141d3c:	e59f1120 	ldr	r1, [pc, #288]	; 141e64 <__wait+0x148>
  141d40:	ea000006 	b	141d60 <__wait+0x44>
  141d44:	e5972000 	ldr	r2, [r7]
  141d48:	e1520008 	cmp	r2, r8
  141d4c:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
  141d50:	e591c000 	ldr	ip, [r1]
  141d54:	e12fff3c 	blx	ip
  141d58:	e2533001 	subs	r3, r3, #1
  141d5c:	0a00003d 	beq	141e58 <__wait+0x13c>
  141d60:	e3540000 	cmp	r4, #0
  141d64:	0afffff6 	beq	141d44 <__wait+0x28>
  141d68:	e5942000 	ldr	r2, [r4]
  141d6c:	e3520000 	cmp	r2, #0
  141d70:	0afffff3 	beq	141d44 <__wait+0x28>
  141d74:	e59f60ec 	ldr	r6, [pc, #236]	; 141e68 <__wait+0x14c>
  141d78:	e5945000 	ldr	r5, [r4]
  141d7c:	e285a001 	add	sl, r5, #1
  141d80:	ea000002 	b	141d90 <__wait+0x74>
  141d84:	e5943000 	ldr	r3, [r4]
  141d88:	e1550003 	cmp	r5, r3
  141d8c:	1afffff9 	bne	141d78 <__wait+0x5c>
  141d90:	e1a00005 	mov	r0, r5
  141d94:	e1a0100a 	mov	r1, sl
  141d98:	e1a02004 	mov	r2, r4
  141d9c:	e5963000 	ldr	r3, [r6]
  141da0:	e12fff33 	blx	r3
  141da4:	e3500000 	cmp	r0, #0
  141da8:	1afffff5 	bne	141d84 <__wait+0x68>
  141dac:	e5973000 	ldr	r3, [r7]
  141db0:	e1530008 	cmp	r3, r8
  141db4:	1a000006 	bne	141dd4 <__wait+0xb8>
  141db8:	e3a000f0 	mov	r0, #240	; 0xf0
  141dbc:	ebffe96d 	bl	13c378 <get_rtt_syscall>
  141dc0:	e2505000 	subs	r5, r0, #0
  141dc4:	1a000012 	bne	141e14 <__wait+0xf8>
  141dc8:	e5973000 	ldr	r3, [r7]
  141dcc:	e1530008 	cmp	r3, r8
  141dd0:	0afffff8 	beq	141db8 <__wait+0x9c>
  141dd4:	e3540000 	cmp	r4, #0
  141dd8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  141ddc:	e59f6084 	ldr	r6, [pc, #132]	; 141e68 <__wait+0x14c>
  141de0:	e5945000 	ldr	r5, [r4]
  141de4:	e2457001 	sub	r7, r5, #1
  141de8:	e1a00005 	mov	r0, r5
  141dec:	e1a01007 	mov	r1, r7
  141df0:	e1a02004 	mov	r2, r4
  141df4:	e5963000 	ldr	r3, [r6]
  141df8:	e12fff33 	blx	r3
  141dfc:	e3500000 	cmp	r0, #0
  141e00:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  141e04:	e5943000 	ldr	r3, [r4]
  141e08:	e1550003 	cmp	r5, r3
  141e0c:	0afffff5 	beq	141de8 <__wait+0xcc>
  141e10:	eafffff2 	b	141de0 <__wait+0xc4>
  141e14:	e3a03000 	mov	r3, #0
  141e18:	e1a02008 	mov	r2, r8
  141e1c:	e1a01009 	mov	r1, r9
  141e20:	e1a00007 	mov	r0, r7
  141e24:	e12fff35 	blx	r5
  141e28:	e3700026 	cmn	r0, #38	; 0x26
  141e2c:	1affffe5 	bne	141dc8 <__wait+0xac>
  141e30:	e3a000f0 	mov	r0, #240	; 0xf0
  141e34:	ebffe94f 	bl	13c378 <get_rtt_syscall>
  141e38:	e2505000 	subs	r5, r0, #0
  141e3c:	0affffe1 	beq	141dc8 <__wait+0xac>
  141e40:	e3a03000 	mov	r3, #0
  141e44:	e1a02008 	mov	r2, r8
  141e48:	e1a01003 	mov	r1, r3
  141e4c:	e1a00007 	mov	r0, r7
  141e50:	e12fff35 	blx	r5
  141e54:	eaffffdb 	b	141dc8 <__wait+0xac>
  141e58:	e3540000 	cmp	r4, #0
  141e5c:	0affffd9 	beq	141dc8 <__wait+0xac>
  141e60:	eaffffc3 	b	141d74 <__wait+0x58>
  141e64:	0014d3d4 	.word	0x0014d3d4
  141e68:	0014d3d8 	.word	0x0014d3d8

00141e6c <__a_barrier_dummy>:
  141e6c:	e12fff1e 	bx	lr

00141e70 <__a_barrier_oldkuser>:
  141e70:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
  141e74:	e1a01000 	mov	r1, r0
  141e78:	e1a0200d 	mov	r2, sp
  141e7c:	e59fc080 	ldr	ip, [pc, #128]	; 141f04 <__a_gettp_cp15+0x8>
  141e80:	e1a0e00f 	mov	lr, pc
  141e84:	e1a0f00c 	mov	pc, ip
  141e88:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
  141e8c:	e12fff1e 	bx	lr

00141e90 <__a_barrier_v6>:
  141e90:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141e94:	e12fff1e 	bx	lr

00141e98 <__a_barrier_v7>:
  141e98:	f57ff05b 	dmb	ish
  141e9c:	e12fff1e 	bx	lr

00141ea0 <__a_cas_dummy>:
  141ea0:	e1a03000 	mov	r3, r0
  141ea4:	e5920000 	ldr	r0, [r2]
  141ea8:	e0530000 	subs	r0, r3, r0
  141eac:	05821000 	streq	r1, [r2]
  141eb0:	e12fff1e 	bx	lr

00141eb4 <__a_cas_v6>:
  141eb4:	e1a03000 	mov	r3, r0
  141eb8:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141ebc:	e1920f9f 	ldrex	r0, [r2]
  141ec0:	e0530000 	subs	r0, r3, r0
  141ec4:	01820f91 	strexeq	r0, r1, [r2]
  141ec8:	03300001 	teqeq	r0, #1
  141ecc:	0afffffa 	beq	141ebc <__a_cas_v6+0x8>
  141ed0:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141ed4:	e12fff1e 	bx	lr

00141ed8 <__a_cas_v7>:
  141ed8:	e1a03000 	mov	r3, r0
  141edc:	f57ff05b 	dmb	ish
  141ee0:	e1920f9f 	ldrex	r0, [r2]
  141ee4:	e0530000 	subs	r0, r3, r0
  141ee8:	01820f91 	strexeq	r0, r1, [r2]
  141eec:	03300001 	teqeq	r0, #1
  141ef0:	0afffffa 	beq	141ee0 <__a_cas_v7+0x8>
  141ef4:	f57ff05b 	dmb	ish
  141ef8:	e12fff1e 	bx	lr

00141efc <__a_gettp_cp15>:
  141efc:	ee1d0f70 	mrc	15, 0, r0, cr13, cr0, {3}
  141f00:	e12fff1e 	bx	lr
  141f04:	ffff0fc0 	.word	0xffff0fc0

00141f08 <__wake.constprop.2>:
  141f08:	e92d4070 	push	{r4, r5, r6, lr}
  141f0c:	e3510000 	cmp	r1, #0
  141f10:	e1a04000 	mov	r4, r0
  141f14:	e3a000f0 	mov	r0, #240	; 0xf0
  141f18:	03a05001 	moveq	r5, #1
  141f1c:	13a05081 	movne	r5, #129	; 0x81
  141f20:	ebffe914 	bl	13c378 <get_rtt_syscall>
  141f24:	e2503000 	subs	r3, r0, #0
  141f28:	08bd8070 	popeq	{r4, r5, r6, pc}
  141f2c:	e1a01005 	mov	r1, r5
  141f30:	e3a02001 	mov	r2, #1
  141f34:	e1a00004 	mov	r0, r4
  141f38:	e12fff33 	blx	r3
  141f3c:	e3700026 	cmn	r0, #38	; 0x26
  141f40:	18bd8070 	popne	{r4, r5, r6, pc}
  141f44:	e3a000f0 	mov	r0, #240	; 0xf0
  141f48:	ebffe90a 	bl	13c378 <get_rtt_syscall>
  141f4c:	e2503000 	subs	r3, r0, #0
  141f50:	08bd8070 	popeq	{r4, r5, r6, pc}
  141f54:	e3a02001 	mov	r2, #1
  141f58:	e1a00004 	mov	r0, r4
  141f5c:	e8bd4070 	pop	{r4, r5, r6, lr}
  141f60:	e1a01002 	mov	r1, r2
  141f64:	e12fff13 	bx	r3

00141f68 <__acquire_ptc>:
  141f68:	e12fff1e 	bx	lr

00141f6c <__tl_lock>:
  141f6c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141f70:	e59f3070 	ldr	r3, [pc, #112]	; 141fe8 <__tl_lock+0x7c>
  141f74:	e59f4070 	ldr	r4, [pc, #112]	; 141fec <__tl_lock+0x80>
  141f78:	e5930000 	ldr	r0, [r3]
  141f7c:	e5943000 	ldr	r3, [r4]
  141f80:	e12fff30 	blx	r0
  141f84:	e510505c 	ldr	r5, [r0, #-92]	; 0xffffffa4
  141f88:	e1550003 	cmp	r5, r3
  141f8c:	0a000010 	beq	141fd4 <__tl_lock+0x68>
  141f90:	e59f6058 	ldr	r6, [pc, #88]	; 141ff0 <__tl_lock+0x84>
  141f94:	e59f7058 	ldr	r7, [pc, #88]	; 141ff4 <__tl_lock+0x88>
  141f98:	e3a00000 	mov	r0, #0
  141f9c:	e1a01005 	mov	r1, r5
  141fa0:	e1a02004 	mov	r2, r4
  141fa4:	e5963000 	ldr	r3, [r6]
  141fa8:	e12fff33 	blx	r3
  141fac:	e3500000 	cmp	r0, #0
  141fb0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141fb4:	e5942000 	ldr	r2, [r4]
  141fb8:	e3520000 	cmp	r2, #0
  141fbc:	0afffff5 	beq	141f98 <__tl_lock+0x2c>
  141fc0:	e3a03000 	mov	r3, #0
  141fc4:	e1a01007 	mov	r1, r7
  141fc8:	e1a00004 	mov	r0, r4
  141fcc:	ebffff52 	bl	141d1c <__wait>
  141fd0:	eafffff0 	b	141f98 <__tl_lock+0x2c>
  141fd4:	e59f201c 	ldr	r2, [pc, #28]	; 141ff8 <__tl_lock+0x8c>
  141fd8:	e5923000 	ldr	r3, [r2]
  141fdc:	e2833001 	add	r3, r3, #1
  141fe0:	e5823000 	str	r3, [r2]
  141fe4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  141fe8:	0014d3dc 	.word	0x0014d3dc
  141fec:	0015d0d4 	.word	0x0015d0d4
  141ff0:	0014d3d8 	.word	0x0014d3d8
  141ff4:	0014f49c 	.word	0x0014f49c
  141ff8:	0014f498 	.word	0x0014f498

00141ffc <__tl_unlock>:
  141ffc:	e59f2090 	ldr	r2, [pc, #144]	; 142094 <__tl_unlock+0x98>
  142000:	e5923000 	ldr	r3, [r2]
  142004:	e3530000 	cmp	r3, #0
  142008:	1a00001e 	bne	142088 <__tl_unlock+0x8c>
  14200c:	e59f2084 	ldr	r2, [pc, #132]	; 142098 <__tl_unlock+0x9c>
  142010:	e92d4010 	push	{r4, lr}
  142014:	e592c000 	ldr	ip, [r2]
  142018:	e12fff3c 	blx	ip
  14201c:	e59f4078 	ldr	r4, [pc, #120]	; 14209c <__tl_unlock+0xa0>
  142020:	e592c000 	ldr	ip, [r2]
  142024:	e5843000 	str	r3, [r4]
  142028:	e12fff3c 	blx	ip
  14202c:	e59f306c 	ldr	r3, [pc, #108]	; 1420a0 <__tl_unlock+0xa4>
  142030:	e5933000 	ldr	r3, [r3]
  142034:	e3530000 	cmp	r3, #0
  142038:	08bd8010 	popeq	{r4, pc}
  14203c:	e3a000f0 	mov	r0, #240	; 0xf0
  142040:	ebffe8cc 	bl	13c378 <get_rtt_syscall>
  142044:	e2503000 	subs	r3, r0, #0
  142048:	08bd8010 	popeq	{r4, pc}
  14204c:	e3a02001 	mov	r2, #1
  142050:	e1a00004 	mov	r0, r4
  142054:	e1a01002 	mov	r1, r2
  142058:	e12fff33 	blx	r3
  14205c:	e3700026 	cmn	r0, #38	; 0x26
  142060:	18bd8010 	popne	{r4, pc}
  142064:	e3a000f0 	mov	r0, #240	; 0xf0
  142068:	ebffe8c2 	bl	13c378 <get_rtt_syscall>
  14206c:	e2503000 	subs	r3, r0, #0
  142070:	08bd8010 	popeq	{r4, pc}
  142074:	e3a02001 	mov	r2, #1
  142078:	e1a00004 	mov	r0, r4
  14207c:	e8bd4010 	pop	{r4, lr}
  142080:	e1a01002 	mov	r1, r2
  142084:	e12fff13 	bx	r3
  142088:	e2433001 	sub	r3, r3, #1
  14208c:	e5823000 	str	r3, [r2]
  142090:	e12fff1e 	bx	lr
  142094:	0014f498 	.word	0x0014f498
  142098:	0014d3d4 	.word	0x0014d3d4
  14209c:	0015d0d4 	.word	0x0015d0d4
  1420a0:	0014f49c 	.word	0x0014f49c

001420a4 <__tl_sync>:
  1420a4:	e59f3084 	ldr	r3, [pc, #132]	; 142130 <__tl_sync+0x8c>
  1420a8:	e92d4070 	push	{r4, r5, r6, lr}
  1420ac:	e593c000 	ldr	ip, [r3]
  1420b0:	e12fff3c 	blx	ip
  1420b4:	e59f4078 	ldr	r4, [pc, #120]	; 142134 <__tl_sync+0x90>
  1420b8:	e5942000 	ldr	r2, [r4]
  1420bc:	e3520000 	cmp	r2, #0
  1420c0:	08bd8070 	popeq	{r4, r5, r6, pc}
  1420c4:	e59f506c 	ldr	r5, [pc, #108]	; 142138 <__tl_sync+0x94>
  1420c8:	e3a03000 	mov	r3, #0
  1420cc:	e1a01005 	mov	r1, r5
  1420d0:	e1a00004 	mov	r0, r4
  1420d4:	ebffff10 	bl	141d1c <__wait>
  1420d8:	e5953000 	ldr	r3, [r5]
  1420dc:	e3530000 	cmp	r3, #0
  1420e0:	08bd8070 	popeq	{r4, r5, r6, pc}
  1420e4:	e3a000f0 	mov	r0, #240	; 0xf0
  1420e8:	ebffe8a2 	bl	13c378 <get_rtt_syscall>
  1420ec:	e2503000 	subs	r3, r0, #0
  1420f0:	08bd8070 	popeq	{r4, r5, r6, pc}
  1420f4:	e3a02001 	mov	r2, #1
  1420f8:	e1a00004 	mov	r0, r4
  1420fc:	e1a01002 	mov	r1, r2
  142100:	e12fff33 	blx	r3
  142104:	e3700026 	cmn	r0, #38	; 0x26
  142108:	18bd8070 	popne	{r4, r5, r6, pc}
  14210c:	e3a000f0 	mov	r0, #240	; 0xf0
  142110:	ebffe898 	bl	13c378 <get_rtt_syscall>
  142114:	e2503000 	subs	r3, r0, #0
  142118:	08bd8070 	popeq	{r4, r5, r6, pc}
  14211c:	e3a02001 	mov	r2, #1
  142120:	e1a00004 	mov	r0, r4
  142124:	e8bd4070 	pop	{r4, r5, r6, lr}
  142128:	e1a01002 	mov	r1, r2
  14212c:	e12fff13 	bx	r3
  142130:	0014d3d4 	.word	0x0014d3d4
  142134:	0015d0d4 	.word	0x0015d0d4
  142138:	0014f49c 	.word	0x0014f49c

0014213c <__pthread_exit>:
  14213c:	e3a02000 	mov	r2, #0
  142140:	e1a0c000 	mov	ip, r0
  142144:	e3a01001 	mov	r1, #1
  142148:	e59f3224 	ldr	r3, [pc, #548]	; 142374 <__pthread_exit+0x238>
  14214c:	e92d4880 	push	{r7, fp, lr}
  142150:	e5930000 	ldr	r0, [r3]
  142154:	e12fff30 	blx	r0
  142158:	e2404078 	sub	r4, r0, #120	; 0x78
  14215c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  142160:	e5c4102c 	strb	r1, [r4, #44]	; 0x2c
  142164:	e1530002 	cmp	r3, r2
  142168:	e24dd08c 	sub	sp, sp, #140	; 0x8c
  14216c:	e584c044 	str	ip, [r4, #68]	; 0x44
  142170:	e5c4202d 	strb	r2, [r4, #45]	; 0x2d
  142174:	0a000006 	beq	142194 <__pthread_exit+0x58>
  142178:	e9930005 	ldmib	r3, {r0, r2}
  14217c:	e5933000 	ldr	r3, [r3]
  142180:	e5842048 	str	r2, [r4, #72]	; 0x48
  142184:	e12fff33 	blx	r3
  142188:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  14218c:	e3530000 	cmp	r3, #0
  142190:	1afffff8 	bne	142178 <__pthread_exit+0x3c>
  142194:	e2849064 	add	r9, r4, #100	; 0x64
  142198:	ebffff72 	bl	141f68 <__acquire_ptc>
  14219c:	e1a00009 	mov	r0, r9
  1421a0:	ebfffe5a 	bl	141b10 <__lock>
  1421a4:	e28d0008 	add	r0, sp, #8
  1421a8:	eb0004a6 	bl	143448 <__block_app_sigs>
  1421ac:	ebffff6e 	bl	141f6c <__tl_lock>
  1421b0:	e594300c 	ldr	r3, [r4, #12]
  1421b4:	e1530004 	cmp	r3, r4
  1421b8:	0a000041 	beq	1422c4 <__pthread_exit+0x188>
  1421bc:	e59f11b4 	ldr	r1, [pc, #436]	; 142378 <__pthread_exit+0x23c>
  1421c0:	e5940008 	ldr	r0, [r4, #8]
  1421c4:	e591200c 	ldr	r2, [r1, #12]
  1421c8:	e59f81ac 	ldr	r8, [pc, #428]	; 14237c <__pthread_exit+0x240>
  1421cc:	e2422001 	sub	r2, r2, #1
  1421d0:	e581200c 	str	r2, [r1, #12]
  1421d4:	e5830008 	str	r0, [r3, #8]
  1421d8:	e5942008 	ldr	r2, [r4, #8]
  1421dc:	e582300c 	str	r3, [r2, #12]
  1421e0:	e584400c 	str	r4, [r4, #12]
  1421e4:	e5844008 	str	r4, [r4, #8]
  1421e8:	eb00028a 	bl	142c18 <__vm_lock>
  1421ec:	e2843050 	add	r3, r4, #80	; 0x50
  1421f0:	e58d3004 	str	r3, [sp, #4]
  1421f4:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  1421f8:	e3560000 	cmp	r6, #0
  1421fc:	0a000020 	beq	142284 <__pthread_exit+0x148>
  142200:	e59d3004 	ldr	r3, [sp, #4]
  142204:	e1560003 	cmp	r6, r3
  142208:	0a00001d 	beq	142284 <__pthread_exit+0x148>
  14220c:	e1a07006 	mov	r7, r6
  142210:	e516b008 	ldr	fp, [r6, #-8]
  142214:	e516a010 	ldr	sl, [r6, #-16]
  142218:	e5846058 	str	r6, [r4, #88]	; 0x58
  14221c:	e417300c 	ldr	r3, [r7], #-12
  142220:	e5843050 	str	r3, [r4, #80]	; 0x50
  142224:	e516500c 	ldr	r5, [r6, #-12]
  142228:	ea000002 	b	142238 <__pthread_exit+0xfc>
  14222c:	e516300c 	ldr	r3, [r6, #-12]
  142230:	e1550003 	cmp	r5, r3
  142234:	1afffffa 	bne	142224 <__pthread_exit+0xe8>
  142238:	e1a00005 	mov	r0, r5
  14223c:	e3a01101 	mov	r1, #1073741824	; 0x40000000
  142240:	e1a02007 	mov	r2, r7
  142244:	e5983000 	ldr	r3, [r8]
  142248:	e12fff33 	blx	r3
  14224c:	e3500000 	cmp	r0, #0
  142250:	1afffff5 	bne	14222c <__pthread_exit+0xf0>
  142254:	e29bb000 	adds	fp, fp, #0
  142258:	13a0b001 	movne	fp, #1
  14225c:	e19b3fa5 	orrs	r3, fp, r5, lsr #31
  142260:	e5840058 	str	r0, [r4, #88]	; 0x58
  142264:	0affffe2 	beq	1421f4 <__pthread_exit+0xb8>
  142268:	e1e0100a 	mvn	r1, sl
  14226c:	e1a00007 	mov	r0, r7
  142270:	e2011080 	and	r1, r1, #128	; 0x80
  142274:	ebffff23 	bl	141f08 <__wake.constprop.2>
  142278:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  14227c:	e3560000 	cmp	r6, #0
  142280:	1affffde 	bne	142200 <__pthread_exit+0xc4>
  142284:	eb000276 	bl	142c64 <__vm_unlock>
  142288:	e2845024 	add	r5, r4, #36	; 0x24
  14228c:	ebffff35 	bl	141f68 <__acquire_ptc>
  142290:	ebffff34 	bl	141f68 <__acquire_ptc>
  142294:	ea000002 	b	1422a4 <__pthread_exit+0x168>
  142298:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  14229c:	e3530001 	cmp	r3, #1
  1422a0:	1a00000e 	bne	1422e0 <__pthread_exit+0x1a4>
  1422a4:	e3a00001 	mov	r0, #1
  1422a8:	e3a01000 	mov	r1, #0
  1422ac:	e1a02005 	mov	r2, r5
  1422b0:	e5983000 	ldr	r3, [r8]
  1422b4:	e12fff33 	blx	r3
  1422b8:	e1500001 	cmp	r0, r1
  1422bc:	1afffff5 	bne	142298 <__pthread_exit+0x15c>
  1422c0:	ea000008 	b	1422e8 <__pthread_exit+0x1ac>
  1422c4:	ebffff4c 	bl	141ffc <__tl_unlock>
  1422c8:	e28d0008 	add	r0, sp, #8
  1422cc:	eb00046b 	bl	143480 <__restore_sigs>
  1422d0:	e1a00009 	mov	r0, r9
  1422d4:	ebfffe65 	bl	141c70 <__unlock>
  1422d8:	e3a00000 	mov	r0, #0
  1422dc:	ebffdb37 	bl	138fc0 <exit>
  1422e0:	e3530002 	cmp	r3, #2
  1422e4:	0a00000d 	beq	142320 <__pthread_exit+0x1e4>
  1422e8:	e1a00005 	mov	r0, r5
  1422ec:	e3a01001 	mov	r1, #1
  1422f0:	ebffff04 	bl	141f08 <__wake.constprop.2>
  1422f4:	e3a03000 	mov	r3, #0
  1422f8:	e1a00009 	mov	r0, r9
  1422fc:	e584301c 	str	r3, [r4, #28]
  142300:	ebfffe5a 	bl	141c70 <__unlock>
  142304:	e3a00001 	mov	r0, #1
  142308:	ebffe81a 	bl	13c378 <get_rtt_syscall>
  14230c:	e2503000 	subs	r3, r0, #0
  142310:	0afffffb 	beq	142304 <__pthread_exit+0x1c8>
  142314:	e3a00000 	mov	r0, #0
  142318:	e12fff33 	blx	r3
  14231c:	eafffff8 	b	142304 <__pthread_exit+0x1c8>
  142320:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  142324:	e1530001 	cmp	r3, r1
  142328:	0affffee 	beq	1422e8 <__pthread_exit+0x1ac>
  14232c:	e28d0008 	add	r0, sp, #8
  142330:	eb000436 	bl	143410 <__block_all_sigs>
  142334:	e5943054 	ldr	r3, [r4, #84]	; 0x54
  142338:	e3530000 	cmp	r3, #0
  14233c:	1a000004 	bne	142354 <__pthread_exit+0x218>
  142340:	eb000225 	bl	142bdc <__vm_wait>
  142344:	e5941034 	ldr	r1, [r4, #52]	; 0x34
  142348:	e5940030 	ldr	r0, [r4, #48]	; 0x30
  14234c:	eb0007ec 	bl	144304 <__unmapself>
  142350:	eaffffe4 	b	1422e8 <__pthread_exit+0x1ac>
  142354:	e59f0024 	ldr	r0, [pc, #36]	; 142380 <__pthread_exit+0x244>
  142358:	ebffe806 	bl	13c378 <get_rtt_syscall>
  14235c:	e2503000 	subs	r3, r0, #0
  142360:	0afffff6 	beq	142340 <__pthread_exit+0x204>
  142364:	e3a0100c 	mov	r1, #12
  142368:	e3a00000 	mov	r0, #0
  14236c:	e12fff33 	blx	r3
  142370:	eafffff2 	b	142340 <__pthread_exit+0x204>
  142374:	0014d3dc 	.word	0x0014d3dc
  142378:	0015d08c 	.word	0x0015d08c
  14237c:	0014d3d8 	.word	0x0014d3d8
  142380:	00000152 	.word	0x00000152

00142384 <start>:
  142384:	e5902008 	ldr	r2, [r0, #8]
  142388:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  14238c:	e3520000 	cmp	r2, #0
  142390:	e1a08000 	mov	r8, r0
  142394:	0a000022 	beq	142424 <start+0xa0>
  142398:	e59f30d8 	ldr	r3, [pc, #216]	; 142478 <start+0xf4>
  14239c:	e5926014 	ldr	r6, [r2, #20]
  1423a0:	e5930000 	ldr	r0, [r3]
  1423a4:	e12fff30 	blx	r0
  1423a8:	e2409078 	sub	r9, r0, #120	; 0x78
  1423ac:	e3a0009c 	mov	r0, #156	; 0x9c
  1423b0:	e599501c 	ldr	r5, [r9, #28]
  1423b4:	e2824018 	add	r4, r2, #24
  1423b8:	ebffe7ee 	bl	13c378 <get_rtt_syscall>
  1423bc:	e250a000 	subs	sl, r0, #0
  1423c0:	0a000004 	beq	1423d8 <start+0x54>
  1423c4:	e1a02004 	mov	r2, r4
  1423c8:	e1a01006 	mov	r1, r6
  1423cc:	e1a00005 	mov	r0, r5
  1423d0:	e12fff3a 	blx	sl
  1423d4:	e1a0a000 	mov	sl, r0
  1423d8:	e598500c 	ldr	r5, [r8, #12]
  1423dc:	e59f7098 	ldr	r7, [pc, #152]	; 14247c <start+0xf8>
  1423e0:	e26a6000 	rsb	r6, sl, #0
  1423e4:	e5954000 	ldr	r4, [r5]
  1423e8:	ea000002 	b	1423f8 <start+0x74>
  1423ec:	e5953000 	ldr	r3, [r5]
  1423f0:	e1540003 	cmp	r4, r3
  1423f4:	1afffffa 	bne	1423e4 <start+0x60>
  1423f8:	e1a00004 	mov	r0, r4
  1423fc:	e1a01006 	mov	r1, r6
  142400:	e1a02005 	mov	r2, r5
  142404:	e5973000 	ldr	r3, [r7]
  142408:	e12fff33 	blx	r3
  14240c:	e3500000 	cmp	r0, #0
  142410:	1afffff5 	bne	1423ec <start+0x68>
  142414:	e3740002 	cmn	r4, #2
  142418:	0a000012 	beq	142468 <start+0xe4>
  14241c:	e35a0000 	cmp	sl, #0
  142420:	1a00000c 	bne	142458 <start+0xd4>
  142424:	e3a000af 	mov	r0, #175	; 0xaf
  142428:	ebffe7d2 	bl	13c378 <get_rtt_syscall>
  14242c:	e2504000 	subs	r4, r0, #0
  142430:	e2881010 	add	r1, r8, #16
  142434:	0a000003 	beq	142448 <start+0xc4>
  142438:	e3a03008 	mov	r3, #8
  14243c:	e3a02000 	mov	r2, #0
  142440:	e3a00002 	mov	r0, #2
  142444:	e12fff34 	blx	r4
  142448:	e5983000 	ldr	r3, [r8]
  14244c:	e5980004 	ldr	r0, [r8, #4]
  142450:	e12fff33 	blx	r3
  142454:	ebffff38 	bl	14213c <__pthread_exit>
  142458:	e3a03002 	mov	r3, #2
  14245c:	e3a00000 	mov	r0, #0
  142460:	e5893024 	str	r3, [r9, #36]	; 0x24
  142464:	ebffff34 	bl	14213c <__pthread_exit>
  142468:	e3a01001 	mov	r1, #1
  14246c:	e598000c 	ldr	r0, [r8, #12]
  142470:	ebfffea4 	bl	141f08 <__wake.constprop.2>
  142474:	eaffffe8 	b	14241c <start+0x98>
  142478:	0014d3dc 	.word	0x0014d3dc
  14247c:	0014d3d8 	.word	0x0014d3d8

00142480 <start_c11>:
  142480:	e5903000 	ldr	r3, [r0]
  142484:	e92d4010 	push	{r4, lr}
  142488:	e5900004 	ldr	r0, [r0, #4]
  14248c:	e12fff33 	blx	r3
  142490:	ebffff29 	bl	14213c <__pthread_exit>

00142494 <__do_cleanup_push>:
  142494:	e1a03000 	mov	r3, r0
  142498:	e59f2018 	ldr	r2, [pc, #24]	; 1424b8 <__do_cleanup_push+0x24>
  14249c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1424a0:	e5920000 	ldr	r0, [r2]
  1424a4:	e12fff30 	blx	r0
  1424a8:	e5102030 	ldr	r2, [r0, #-48]	; 0xffffffd0
  1424ac:	e5832008 	str	r2, [r3, #8]
  1424b0:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  1424b4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  1424b8:	0014d3dc 	.word	0x0014d3dc

001424bc <__do_cleanup_pop>:
  1424bc:	e5903008 	ldr	r3, [r0, #8]
  1424c0:	e59f2010 	ldr	r2, [pc, #16]	; 1424d8 <__do_cleanup_pop+0x1c>
  1424c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1424c8:	e5920000 	ldr	r0, [r2]
  1424cc:	e12fff30 	blx	r0
  1424d0:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  1424d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  1424d8:	0014d3dc 	.word	0x0014d3dc

001424dc <__pthread_create>:
  1424dc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  1424e0:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  1424e4:	e58d001c 	str	r0, [sp, #28]
  1424e8:	e58d2014 	str	r2, [sp, #20]
  1424ec:	e1a09001 	mov	r9, r1
  1424f0:	e28d0034 	add	r0, sp, #52	; 0x34
  1424f4:	e3a02024 	mov	r2, #36	; 0x24
  1424f8:	e3a01000 	mov	r1, #0
  1424fc:	e58d3018 	str	r3, [sp, #24]
  142500:	ebfffb4d 	bl	14123c <memset>
  142504:	e3e03000 	mvn	r3, #0
  142508:	e59f656c 	ldr	r6, [pc, #1388]	; 142a7c <__pthread_create+0x5a0>
  14250c:	e58d3028 	str	r3, [sp, #40]	; 0x28
  142510:	e5963000 	ldr	r3, [r6]
  142514:	e3530000 	cmp	r3, #0
  142518:	03a00026 	moveq	r0, #38	; 0x26
  14251c:	0a0000a3 	beq	1427b0 <__pthread_create+0x2d4>
  142520:	e59f3558 	ldr	r3, [pc, #1368]	; 142a80 <__pthread_create+0x5a4>
  142524:	e5964004 	ldr	r4, [r6, #4]
  142528:	e5930000 	ldr	r0, [r3]
  14252c:	e12fff30 	blx	r0
  142530:	e3540000 	cmp	r4, #0
  142534:	e240a078 	sub	sl, r0, #120	; 0x78
  142538:	0a0000da 	beq	1428a8 <__pthread_create+0x3cc>
  14253c:	e2493001 	sub	r3, r9, #1
  142540:	e3730003 	cmn	r3, #3
  142544:	9a00009b 	bls	1427b8 <__pthread_create+0x2dc>
  142548:	ebfffe86 	bl	141f68 <__acquire_ptc>
  14254c:	e59f2530 	ldr	r2, [pc, #1328]	; 142a84 <__pthread_create+0x5a8>
  142550:	e59f3530 	ldr	r3, [pc, #1328]	; 142a88 <__pthread_create+0x5ac>
  142554:	e5927000 	ldr	r7, [r2]
  142558:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  14255c:	e5933000 	ldr	r3, [r3]
  142560:	e3520000 	cmp	r2, #0
  142564:	e58d7034 	str	r7, [sp, #52]	; 0x34
  142568:	e58d3038 	str	r3, [sp, #56]	; 0x38
  14256c:	e5960018 	ldr	r0, [r6, #24]
  142570:	0a00009e 	beq	1427f0 <__pthread_create+0x314>
  142574:	e59f4510 	ldr	r4, [pc, #1296]	; 142a8c <__pthread_create+0x5b0>
  142578:	e1a031a7 	lsr	r3, r7, #3
  14257c:	e5941000 	ldr	r1, [r4]
  142580:	e3c2500f 	bic	r5, r2, #15
  142584:	e0811000 	add	r1, r1, r0
  142588:	e3510b02 	cmp	r1, #2048	; 0x800
  14258c:	23a0c000 	movcs	ip, #0
  142590:	33a0c001 	movcc	ip, #1
  142594:	e1530001 	cmp	r3, r1
  142598:	93a0c000 	movls	ip, #0
  14259c:	e0423007 	sub	r3, r2, r7
  1425a0:	e35c0000 	cmp	ip, #0
  1425a4:	e58d3020 	str	r3, [sp, #32]
  1425a8:	1a000111 	bne	1429f4 <__pthread_create+0x518>
  1425ac:	e2817eff 	add	r7, r1, #4080	; 0xff0
  1425b0:	e287700f 	add	r7, r7, #15
  1425b4:	e3c77eff 	bic	r7, r7, #4080	; 0xff0
  1425b8:	e3c7700f 	bic	r7, r7, #15
  1425bc:	e3a00000 	mov	r0, #0
  1425c0:	e3a01000 	mov	r1, #0
  1425c4:	e3e03000 	mvn	r3, #0
  1425c8:	e58d0008 	str	r0, [sp, #8]
  1425cc:	e58d100c 	str	r1, [sp, #12]
  1425d0:	e58d3000 	str	r3, [sp]
  1425d4:	e3a02003 	mov	r2, #3
  1425d8:	e3a03022 	mov	r3, #34	; 0x22
  1425dc:	e1a01007 	mov	r1, r7
  1425e0:	ebffeda8 	bl	13dc88 <__mmap>
  1425e4:	e3700001 	cmn	r0, #1
  1425e8:	e1a0b000 	mov	fp, r0
  1425ec:	0a0000ed 	beq	1429a8 <__pthread_create+0x4cc>
  1425f0:	e5943000 	ldr	r3, [r4]
  1425f4:	e5960018 	ldr	r0, [r6, #24]
  1425f8:	e0473003 	sub	r3, r7, r3
  1425fc:	e08b3003 	add	r3, fp, r3
  142600:	e3550000 	cmp	r5, #0
  142604:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142608:	e2600000 	rsb	r0, r0, #0
  14260c:	0a000108 	beq	142a34 <__pthread_create+0x558>
  142610:	e3a08000 	mov	r8, #0
  142614:	e0830000 	add	r0, r3, r0
  142618:	eb000202 	bl	142e28 <__copy_tls>
  14261c:	e1a04000 	mov	r4, r0
  142620:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  142624:	e5805038 	str	r5, [r0, #56]	; 0x38
  142628:	e3530000 	cmp	r3, #0
  14262c:	e59f345c 	ldr	r3, [pc, #1116]	; 142a90 <__pthread_create+0x5b4>
  142630:	e5808040 	str	r8, [r0, #64]	; 0x40
  142634:	e580b030 	str	fp, [r0, #48]	; 0x30
  142638:	e5807034 	str	r7, [r0, #52]	; 0x34
  14263c:	e5840000 	str	r0, [r4]
  142640:	e5803060 	str	r3, [r0, #96]	; 0x60
  142644:	13a03002 	movne	r3, #2
  142648:	03a03001 	moveq	r3, #1
  14264c:	e59d2020 	ldr	r2, [sp, #32]
  142650:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
  142654:	e0452002 	sub	r2, r5, r2
  142658:	e5803024 	str	r3, [r0, #36]	; 0x24
  14265c:	e580203c 	str	r2, [r0, #60]	; 0x3c
  142660:	e59a2014 	ldr	r2, [sl, #20]
  142664:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  142668:	e5802014 	str	r2, [r0, #20]
  14266c:	e2802050 	add	r2, r0, #80	; 0x50
  142670:	e5802050 	str	r2, [r0, #80]	; 0x50
  142674:	e59d2014 	ldr	r2, [sp, #20]
  142678:	e3c55003 	bic	r5, r5, #3
  14267c:	e580104c 	str	r1, [r0, #76]	; 0x4c
  142680:	e5052018 	str	r2, [r5, #-24]	; 0xffffffe8
  142684:	e59d2018 	ldr	r2, [sp, #24]
  142688:	e3530000 	cmp	r3, #0
  14268c:	128d3028 	addne	r3, sp, #40	; 0x28
  142690:	e5052014 	str	r2, [r5, #-20]	; 0xffffffec
  142694:	128d2034 	addne	r2, sp, #52	; 0x34
  142698:	15052010 	strne	r2, [r5, #-16]
  14269c:	05053010 	streq	r3, [r5, #-16]
  1426a0:	e505300c 	str	r3, [r5, #-12]
  1426a4:	e28d0058 	add	r0, sp, #88	; 0x58
  1426a8:	eb000366 	bl	143448 <__block_app_sigs>
  1426ac:	e28d1058 	add	r1, sp, #88	; 0x58
  1426b0:	e3a02008 	mov	r2, #8
  1426b4:	e2450008 	sub	r0, r5, #8
  1426b8:	ebfff9a7 	bl	140d5c <memcpy>
  1426bc:	e5153004 	ldr	r3, [r5, #-4]
  1426c0:	e2458018 	sub	r8, r5, #24
  1426c4:	e3c33001 	bic	r3, r3, #1
  1426c8:	e5053004 	str	r3, [r5, #-4]
  1426cc:	ebfffe26 	bl	141f6c <__tl_lock>
  1426d0:	e59f33bc 	ldr	r3, [pc, #956]	; 142a94 <__pthread_create+0x5b8>
  1426d4:	e596c00c 	ldr	ip, [r6, #12]
  1426d8:	e3790001 	cmn	r9, #1
  1426dc:	e59f13b4 	ldr	r1, [pc, #948]	; 142a98 <__pthread_create+0x5bc>
  1426e0:	e59f03b4 	ldr	r0, [pc, #948]	; 142a9c <__pthread_create+0x5c0>
  1426e4:	e2842078 	add	r2, r4, #120	; 0x78
  1426e8:	01a00003 	moveq	r0, r3
  1426ec:	e284301c 	add	r3, r4, #28
  1426f0:	e28cc001 	add	ip, ip, #1
  1426f4:	e58d1008 	str	r1, [sp, #8]
  1426f8:	e58d2004 	str	r2, [sp, #4]
  1426fc:	e58d3000 	str	r3, [sp]
  142700:	e1a01008 	mov	r1, r8
  142704:	e1a03008 	mov	r3, r8
  142708:	e59f2390 	ldr	r2, [pc, #912]	; 142aa0 <__pthread_create+0x5c4>
  14270c:	e586c00c 	str	ip, [r6, #12]
  142710:	eb0006ff 	bl	144314 <__clone>
  142714:	e3500000 	cmp	r0, #0
  142718:	ba0000a5 	blt	1429b4 <__pthread_create+0x4d8>
  14271c:	e59a300c 	ldr	r3, [sl, #12]
  142720:	e584a008 	str	sl, [r4, #8]
  142724:	e584300c 	str	r3, [r4, #12]
  142728:	e5834008 	str	r4, [r3, #8]
  14272c:	e5943008 	ldr	r3, [r4, #8]
  142730:	e583400c 	str	r4, [r3, #12]
  142734:	ebfffe30 	bl	141ffc <__tl_unlock>
  142738:	e28d0058 	add	r0, sp, #88	; 0x58
  14273c:	eb00034f 	bl	143480 <__restore_sigs>
  142740:	ebfffe08 	bl	141f68 <__acquire_ptc>
  142744:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  142748:	e3530000 	cmp	r3, #0
  14274c:	0a000014 	beq	1427a4 <__pthread_create+0x2c8>
  142750:	e59f534c 	ldr	r5, [pc, #844]	; 142aa4 <__pthread_create+0x5c8>
  142754:	ea000002 	b	142764 <__pthread_create+0x288>
  142758:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  14275c:	e3730001 	cmn	r3, #1
  142760:	1a00000c 	bne	142798 <__pthread_create+0x2bc>
  142764:	e3e00000 	mvn	r0, #0
  142768:	e3e01001 	mvn	r1, #1
  14276c:	e28d2028 	add	r2, sp, #40	; 0x28
  142770:	e5953000 	ldr	r3, [r5]
  142774:	e12fff33 	blx	r3
  142778:	e3500000 	cmp	r0, #0
  14277c:	1afffff5 	bne	142758 <__pthread_create+0x27c>
  142780:	e1a03000 	mov	r3, r0
  142784:	e1a02001 	mov	r2, r1
  142788:	e28d0028 	add	r0, sp, #40	; 0x28
  14278c:	e1a01003 	mov	r1, r3
  142790:	e3a03001 	mov	r3, #1
  142794:	ebfffd60 	bl	141d1c <__wait>
  142798:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
  14279c:	e3500000 	cmp	r0, #0
  1427a0:	1a000002 	bne	1427b0 <__pthread_create+0x2d4>
  1427a4:	e3a00000 	mov	r0, #0
  1427a8:	e59d301c 	ldr	r3, [sp, #28]
  1427ac:	e5834000 	str	r4, [r3]
  1427b0:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  1427b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1427b8:	e1a0e009 	mov	lr, r9
  1427bc:	e28dc034 	add	ip, sp, #52	; 0x34
  1427c0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  1427c4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  1427c8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  1427cc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  1427d0:	e59e3000 	ldr	r3, [lr]
  1427d4:	e58c3000 	str	r3, [ip]
  1427d8:	ebfffde2 	bl	141f68 <__acquire_ptc>
  1427dc:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  1427e0:	e59d7034 	ldr	r7, [sp, #52]	; 0x34
  1427e4:	e3520000 	cmp	r2, #0
  1427e8:	e5960018 	ldr	r0, [r6, #24]
  1427ec:	1affff60 	bne	142574 <__pthread_create+0x98>
  1427f0:	e59f5294 	ldr	r5, [pc, #660]	; 142a8c <__pthread_create+0x5b0>
  1427f4:	e3a01000 	mov	r1, #0
  1427f8:	e5953000 	ldr	r3, [r5]
  1427fc:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  142800:	e0833000 	add	r3, r3, r0
  142804:	e2833eff 	add	r3, r3, #4080	; 0xff0
  142808:	e283300f 	add	r3, r3, #15
  14280c:	e0837007 	add	r7, r3, r7
  142810:	e3a00000 	mov	r0, #0
  142814:	e3e03000 	mvn	r3, #0
  142818:	e59f4288 	ldr	r4, [pc, #648]	; 142aa8 <__pthread_create+0x5cc>
  14281c:	e2888eff 	add	r8, r8, #4080	; 0xff0
  142820:	e288800f 	add	r8, r8, #15
  142824:	e0088004 	and	r8, r8, r4
  142828:	e3580000 	cmp	r8, #0
  14282c:	e0044007 	and	r4, r4, r7
  142830:	e58d3000 	str	r3, [sp]
  142834:	e58d0008 	str	r0, [sp, #8]
  142838:	e58d100c 	str	r1, [sp, #12]
  14283c:	e3a03022 	mov	r3, #34	; 0x22
  142840:	e0847008 	add	r7, r4, r8
  142844:	0a00007d 	beq	142a40 <__pthread_create+0x564>
  142848:	e1a00002 	mov	r0, r2
  14284c:	e1a01007 	mov	r1, r7
  142850:	ebffed0c 	bl	13dc88 <__mmap>
  142854:	e3700001 	cmn	r0, #1
  142858:	e1a0b000 	mov	fp, r0
  14285c:	0a000051 	beq	1429a8 <__pthread_create+0x4cc>
  142860:	e0803008 	add	r3, r0, r8
  142864:	e1a01004 	mov	r1, r4
  142868:	e1a00003 	mov	r0, r3
  14286c:	e3a02003 	mov	r2, #3
  142870:	e58d3020 	str	r3, [sp, #32]
  142874:	eb0002cb 	bl	1433a8 <__mprotect>
  142878:	e3500000 	cmp	r0, #0
  14287c:	1a000042 	bne	14298c <__pthread_create+0x4b0>
  142880:	e5953000 	ldr	r3, [r5]
  142884:	e5960018 	ldr	r0, [r6, #24]
  142888:	e0473003 	sub	r3, r7, r3
  14288c:	e08b3003 	add	r3, fp, r3
  142890:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142894:	e2600000 	rsb	r0, r0, #0
  142898:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  14289c:	e0835000 	add	r5, r3, r0
  1428a0:	e1a00005 	mov	r0, r5
  1428a4:	eaffff5b 	b	142618 <__pthread_create+0x13c>
  1428a8:	ebffeee1 	bl	13e434 <__ofl_lock>
  1428ac:	e5903000 	ldr	r3, [r0]
  1428b0:	e3530000 	cmp	r3, #0
  1428b4:	0a000005 	beq	1428d0 <__pthread_create+0x3f4>
  1428b8:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  1428bc:	e3520000 	cmp	r2, #0
  1428c0:	b583404c 	strlt	r4, [r3, #76]	; 0x4c
  1428c4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1428c8:	e3530000 	cmp	r3, #0
  1428cc:	1afffff9 	bne	1428b8 <__pthread_create+0x3dc>
  1428d0:	ebffeede 	bl	13e450 <__ofl_unlock>
  1428d4:	e59f31d0 	ldr	r3, [pc, #464]	; 142aac <__pthread_create+0x5d0>
  1428d8:	e5933000 	ldr	r3, [r3]
  1428dc:	e3530000 	cmp	r3, #0
  1428e0:	0a000003 	beq	1428f4 <__pthread_create+0x418>
  1428e4:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  1428e8:	e3520000 	cmp	r2, #0
  1428ec:	b3a02000 	movlt	r2, #0
  1428f0:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  1428f4:	e59f31b4 	ldr	r3, [pc, #436]	; 142ab0 <__pthread_create+0x5d4>
  1428f8:	e5933000 	ldr	r3, [r3]
  1428fc:	e3530000 	cmp	r3, #0
  142900:	0a000003 	beq	142914 <__pthread_create+0x438>
  142904:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142908:	e3520000 	cmp	r2, #0
  14290c:	b3a02000 	movlt	r2, #0
  142910:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  142914:	e59f3198 	ldr	r3, [pc, #408]	; 142ab4 <__pthread_create+0x5d8>
  142918:	e5933000 	ldr	r3, [r3]
  14291c:	e3530000 	cmp	r3, #0
  142920:	0a000003 	beq	142934 <__pthread_create+0x458>
  142924:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142928:	e3520000 	cmp	r2, #0
  14292c:	b3a02000 	movlt	r2, #0
  142930:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  142934:	e3a03003 	mov	r3, #3
  142938:	e3a04000 	mov	r4, #0
  14293c:	e3a000af 	mov	r0, #175	; 0xaf
  142940:	e58d402c 	str	r4, [sp, #44]	; 0x2c
  142944:	e58d3030 	str	r3, [sp, #48]	; 0x30
  142948:	ebffe68a 	bl	13c378 <get_rtt_syscall>
  14294c:	e2505000 	subs	r5, r0, #0
  142950:	0a000004 	beq	142968 <__pthread_create+0x48c>
  142954:	e1a02004 	mov	r2, r4
  142958:	e28d102c 	add	r1, sp, #44	; 0x2c
  14295c:	e3a03008 	mov	r3, #8
  142960:	e3a00001 	mov	r0, #1
  142964:	e12fff35 	blx	r5
  142968:	e59f3148 	ldr	r3, [pc, #328]	; 142ab8 <__pthread_create+0x5dc>
  14296c:	e58a304c 	str	r3, [sl, #76]	; 0x4c
  142970:	ebfffd7c 	bl	141f68 <__acquire_ptc>
  142974:	e3a03001 	mov	r3, #1
  142978:	e5863004 	str	r3, [r6, #4]
  14297c:	e2493001 	sub	r3, r9, #1
  142980:	e3730003 	cmn	r3, #3
  142984:	8afffeef 	bhi	142548 <__pthread_create+0x6c>
  142988:	eaffff8a 	b	1427b8 <__pthread_create+0x2dc>
  14298c:	ebffd943 	bl	138ea0 <__errno_location>
  142990:	e5903000 	ldr	r3, [r0]
  142994:	e3530026 	cmp	r3, #38	; 0x26
  142998:	0affffb8 	beq	142880 <__pthread_create+0x3a4>
  14299c:	e1a01007 	mov	r1, r7
  1429a0:	e1a0000b 	mov	r0, fp
  1429a4:	ebffed1d 	bl	13de20 <__munmap>
  1429a8:	ebfffd6e 	bl	141f68 <__acquire_ptc>
  1429ac:	e3a0000b 	mov	r0, #11
  1429b0:	eaffff7e 	b	1427b0 <__pthread_create+0x2d4>
  1429b4:	ebfffd90 	bl	141ffc <__tl_unlock>
  1429b8:	e28d0058 	add	r0, sp, #88	; 0x58
  1429bc:	eb0002af 	bl	143480 <__restore_sigs>
  1429c0:	ebfffd68 	bl	141f68 <__acquire_ptc>
  1429c4:	e596300c 	ldr	r3, [r6, #12]
  1429c8:	e35b0000 	cmp	fp, #0
  1429cc:	e2433001 	sub	r3, r3, #1
  1429d0:	e586300c 	str	r3, [r6, #12]
  1429d4:	03a0000b 	moveq	r0, #11
  1429d8:	0affff74 	beq	1427b0 <__pthread_create+0x2d4>
  1429dc:	e1a01007 	mov	r1, r7
  1429e0:	e1a0000b 	mov	r0, fp
  1429e4:	ebffed0d 	bl	13de20 <__munmap>
  1429e8:	e3a0000b 	mov	r0, #11
  1429ec:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  1429f0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1429f4:	e5943000 	ldr	r3, [r4]
  1429f8:	e1a02001 	mov	r2, r1
  1429fc:	e0458003 	sub	r8, r5, r3
  142a00:	e0485000 	sub	r5, r8, r0
  142a04:	e1a00005 	mov	r0, r5
  142a08:	e3a01000 	mov	r1, #0
  142a0c:	e58d8024 	str	r8, [sp, #36]	; 0x24
  142a10:	ebfffa09 	bl	14123c <memset>
  142a14:	e3580000 	cmp	r8, #0
  142a18:	e1a03008 	mov	r3, r8
  142a1c:	0afffee6 	beq	1425bc <__pthread_create+0xe0>
  142a20:	e3a08000 	mov	r8, #0
  142a24:	e5960018 	ldr	r0, [r6, #24]
  142a28:	e1a0b008 	mov	fp, r8
  142a2c:	e0430000 	sub	r0, r3, r0
  142a30:	eafffef8 	b	142618 <__pthread_create+0x13c>
  142a34:	e1a08005 	mov	r8, r5
  142a38:	e58db020 	str	fp, [sp, #32]
  142a3c:	eaffff95 	b	142898 <__pthread_create+0x3bc>
  142a40:	e3a02003 	mov	r2, #3
  142a44:	e1a01007 	mov	r1, r7
  142a48:	e1a00008 	mov	r0, r8
  142a4c:	ebffec8d 	bl	13dc88 <__mmap>
  142a50:	e3700001 	cmn	r0, #1
  142a54:	e1a0b000 	mov	fp, r0
  142a58:	0affffd2 	beq	1429a8 <__pthread_create+0x4cc>
  142a5c:	e5953000 	ldr	r3, [r5]
  142a60:	e5960018 	ldr	r0, [r6, #24]
  142a64:	e0473003 	sub	r3, r7, r3
  142a68:	e08b3003 	add	r3, fp, r3
  142a6c:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142a70:	e2600000 	rsb	r0, r0, #0
  142a74:	e58db020 	str	fp, [sp, #32]
  142a78:	eaffff86 	b	142898 <__pthread_create+0x3bc>
  142a7c:	0015d08c 	.word	0x0015d08c
  142a80:	0014d3dc 	.word	0x0014d3dc
  142a84:	0014d3e4 	.word	0x0014d3e4
  142a88:	0014d3e0 	.word	0x0014d3e0
  142a8c:	0014f48c 	.word	0x0014f48c
  142a90:	0015d0b4 	.word	0x0015d0b4
  142a94:	00142480 	.word	0x00142480
  142a98:	0015d0d4 	.word	0x0015d0d4
  142a9c:	00142384 	.word	0x00142384
  142aa0:	007d0f00 	.word	0x007d0f00
  142aa4:	0014d3d8 	.word	0x0014d3d8
  142aa8:	fffff000 	.word	0xfffff000
  142aac:	0014f490 	.word	0x0014f490
  142ab0:	0014d3d0 	.word	0x0014d3d0
  142ab4:	0014d338 	.word	0x0014d338
  142ab8:	0014f494 	.word	0x0014f494

00142abc <__get_thread_map>:
  142abc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  142ac0:	e2504000 	subs	r4, r0, #0
  142ac4:	e24dd014 	sub	sp, sp, #20
  142ac8:	0a000002 	beq	142ad8 <__get_thread_map+0x1c>
  142acc:	e2840078 	add	r0, r4, #120	; 0x78
  142ad0:	e28dd014 	add	sp, sp, #20
  142ad4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  142ad8:	e3a06000 	mov	r6, #0
  142adc:	e3a07000 	mov	r7, #0
  142ae0:	e3e03000 	mvn	r3, #0
  142ae4:	e58d6008 	str	r6, [sp, #8]
  142ae8:	e58d700c 	str	r7, [sp, #12]
  142aec:	e59f5074 	ldr	r5, [pc, #116]	; 142b68 <__get_thread_map+0xac>
  142af0:	e3a02003 	mov	r2, #3
  142af4:	e5951018 	ldr	r1, [r5, #24]
  142af8:	e58d3000 	str	r3, [sp]
  142afc:	e3510000 	cmp	r1, #0
  142b00:	03a01078 	moveq	r1, #120	; 0x78
  142b04:	e3a03022 	mov	r3, #34	; 0x22
  142b08:	ebffec5e 	bl	13dc88 <__mmap>
  142b0c:	e2504000 	subs	r4, r0, #0
  142b10:	0a000012 	beq	142b60 <__get_thread_map+0xa4>
  142b14:	e59f3050 	ldr	r3, [pc, #80]	; 142b6c <__get_thread_map+0xb0>
  142b18:	e2855028 	add	r5, r5, #40	; 0x28
  142b1c:	e5932000 	ldr	r2, [r3]
  142b20:	e2843050 	add	r3, r4, #80	; 0x50
  142b24:	e5845060 	str	r5, [r4, #96]	; 0x60
  142b28:	e5844000 	str	r4, [r4]
  142b2c:	e5844008 	str	r4, [r4, #8]
  142b30:	e584400c 	str	r4, [r4, #12]
  142b34:	e5842014 	str	r2, [r4, #20]
  142b38:	e5843050 	str	r3, [r4, #80]	; 0x50
  142b3c:	e3a000e0 	mov	r0, #224	; 0xe0
  142b40:	ebffe60c 	bl	13c378 <get_rtt_syscall>
  142b44:	e3500000 	cmp	r0, #0
  142b48:	0a000000 	beq	142b50 <__get_thread_map+0x94>
  142b4c:	e12fff30 	blx	r0
  142b50:	e3a03000 	mov	r3, #0
  142b54:	e584001c 	str	r0, [r4, #28]
  142b58:	e5843020 	str	r3, [r4, #32]
  142b5c:	eaffffda 	b	142acc <__get_thread_map+0x10>
  142b60:	e1a00004 	mov	r0, r4
  142b64:	eaffffd9 	b	142ad0 <__get_thread_map+0x14>
  142b68:	0015d08c 	.word	0x0015d08c
  142b6c:	0015d0d8 	.word	0x0015d0d8

00142b70 <__put_thread_map>:
  142b70:	e3500000 	cmp	r0, #0
  142b74:	012fff1e 	bxeq	lr
  142b78:	e59f3010 	ldr	r3, [pc, #16]	; 142b90 <__put_thread_map+0x20>
  142b7c:	e2400078 	sub	r0, r0, #120	; 0x78
  142b80:	e5931018 	ldr	r1, [r3, #24]
  142b84:	e3510000 	cmp	r1, #0
  142b88:	03a01078 	moveq	r1, #120	; 0x78
  142b8c:	eaffeca3 	b	13de20 <__munmap>
  142b90:	0015d08c 	.word	0x0015d08c

00142b94 <__pthread_init_run>:
  142b94:	e92d4070 	push	{r4, r5, r6, lr}
  142b98:	e1a05000 	mov	r5, r0
  142b9c:	e3a00000 	mov	r0, #0
  142ba0:	e1a06001 	mov	r6, r1
  142ba4:	ebffffc4 	bl	142abc <__get_thread_map>
  142ba8:	e2504000 	subs	r4, r0, #0
  142bac:	08bd8070 	popeq	{r4, r5, r6, pc}
  142bb0:	eb000582 	bl	1441c0 <__set_thread_area>
  142bb4:	e1a00006 	mov	r0, r6
  142bb8:	e12fff35 	blx	r5
  142bbc:	e59f3014 	ldr	r3, [pc, #20]	; 142bd8 <__pthread_init_run+0x44>
  142bc0:	e2440078 	sub	r0, r4, #120	; 0x78
  142bc4:	e5931018 	ldr	r1, [r3, #24]
  142bc8:	e8bd4070 	pop	{r4, r5, r6, lr}
  142bcc:	e3510000 	cmp	r1, #0
  142bd0:	03a01078 	moveq	r1, #120	; 0x78
  142bd4:	eaffec91 	b	13de20 <__munmap>
  142bd8:	0015d08c 	.word	0x0015d08c

00142bdc <__vm_wait>:
  142bdc:	e92d4070 	push	{r4, r5, r6, lr}
  142be0:	e59f402c 	ldr	r4, [pc, #44]	; 142c14 <__vm_wait+0x38>
  142be4:	e5942000 	ldr	r2, [r4]
  142be8:	e3520000 	cmp	r2, #0
  142bec:	08bd8070 	popeq	{r4, r5, r6, pc}
  142bf0:	e2845004 	add	r5, r4, #4
  142bf4:	e3a03001 	mov	r3, #1
  142bf8:	e1a01005 	mov	r1, r5
  142bfc:	e59f0010 	ldr	r0, [pc, #16]	; 142c14 <__vm_wait+0x38>
  142c00:	ebfffc45 	bl	141d1c <__wait>
  142c04:	e5942000 	ldr	r2, [r4]
  142c08:	e3520000 	cmp	r2, #0
  142c0c:	1afffff8 	bne	142bf4 <__vm_wait+0x18>
  142c10:	e8bd8070 	pop	{r4, r5, r6, pc}
  142c14:	0014f4a0 	.word	0x0014f4a0

00142c18 <__vm_lock>:
  142c18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  142c1c:	e59f6038 	ldr	r6, [pc, #56]	; 142c5c <__vm_lock+0x44>
  142c20:	e59f8038 	ldr	r8, [pc, #56]	; 142c60 <__vm_lock+0x48>
  142c24:	e1a07006 	mov	r7, r6
  142c28:	e5964000 	ldr	r4, [r6]
  142c2c:	e2845001 	add	r5, r4, #1
  142c30:	e1a00004 	mov	r0, r4
  142c34:	e1a01005 	mov	r1, r5
  142c38:	e1a02007 	mov	r2, r7
  142c3c:	e5983000 	ldr	r3, [r8]
  142c40:	e12fff33 	blx	r3
  142c44:	e3500000 	cmp	r0, #0
  142c48:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142c4c:	e5963000 	ldr	r3, [r6]
  142c50:	e1540003 	cmp	r4, r3
  142c54:	0afffff5 	beq	142c30 <__vm_lock+0x18>
  142c58:	eafffff2 	b	142c28 <__vm_lock+0x10>
  142c5c:	0014f4a0 	.word	0x0014f4a0
  142c60:	0014d3d8 	.word	0x0014d3d8

00142c64 <__vm_unlock>:
  142c64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  142c68:	e59f6098 	ldr	r6, [pc, #152]	; 142d08 <__vm_unlock+0xa4>
  142c6c:	e59f8098 	ldr	r8, [pc, #152]	; 142d0c <__vm_unlock+0xa8>
  142c70:	e1a07006 	mov	r7, r6
  142c74:	e5964000 	ldr	r4, [r6]
  142c78:	e2445001 	sub	r5, r4, #1
  142c7c:	ea000002 	b	142c8c <__vm_unlock+0x28>
  142c80:	e5963000 	ldr	r3, [r6]
  142c84:	e1540003 	cmp	r4, r3
  142c88:	1afffff9 	bne	142c74 <__vm_unlock+0x10>
  142c8c:	e1a00004 	mov	r0, r4
  142c90:	e1a01005 	mov	r1, r5
  142c94:	e1a02007 	mov	r2, r7
  142c98:	e5983000 	ldr	r3, [r8]
  142c9c:	e12fff33 	blx	r3
  142ca0:	e3500000 	cmp	r0, #0
  142ca4:	1afffff5 	bne	142c80 <__vm_unlock+0x1c>
  142ca8:	e3540001 	cmp	r4, #1
  142cac:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142cb0:	e5963004 	ldr	r3, [r6, #4]
  142cb4:	e3530000 	cmp	r3, #0
  142cb8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142cbc:	e3a000f0 	mov	r0, #240	; 0xf0
  142cc0:	ebffe5ac 	bl	13c378 <get_rtt_syscall>
  142cc4:	e2503000 	subs	r3, r0, #0
  142cc8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142ccc:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  142cd0:	e3a01081 	mov	r1, #129	; 0x81
  142cd4:	e59f002c 	ldr	r0, [pc, #44]	; 142d08 <__vm_unlock+0xa4>
  142cd8:	e12fff33 	blx	r3
  142cdc:	e3700026 	cmn	r0, #38	; 0x26
  142ce0:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142ce4:	e3a000f0 	mov	r0, #240	; 0xf0
  142ce8:	ebffe5a2 	bl	13c378 <get_rtt_syscall>
  142cec:	e2503000 	subs	r3, r0, #0
  142cf0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142cf4:	e1a01004 	mov	r1, r4
  142cf8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  142cfc:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  142d00:	e59f0000 	ldr	r0, [pc]	; 142d08 <__vm_unlock+0xa4>
  142d04:	e12fff13 	bx	r3
  142d08:	0014f4a0 	.word	0x0014f4a0
  142d0c:	0014d3d8 	.word	0x0014d3d8

00142d10 <time>:
  142d10:	e92d4010 	push	{r4, lr}
  142d14:	e1a04000 	mov	r4, r0
  142d18:	e24dd010 	sub	sp, sp, #16
  142d1c:	e1a0100d 	mov	r1, sp
  142d20:	e3a00000 	mov	r0, #0
  142d24:	eb000595 	bl	144380 <__clock_gettime>
  142d28:	e89d0003 	ldm	sp, {r0, r1}
  142d2c:	e3540000 	cmp	r4, #0
  142d30:	18840003 	stmne	r4, {r0, r1}
  142d34:	e28dd010 	add	sp, sp, #16
  142d38:	e8bd8010 	pop	{r4, pc}

00142d3c <__aio_close>:
  142d3c:	e12fff1e 	bx	lr

00142d40 <close>:
  142d40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  142d44:	e24dd014 	sub	sp, sp, #20
  142d48:	ebfffffb 	bl	142d3c <__aio_close>
  142d4c:	e3a03000 	mov	r3, #0
  142d50:	e1a01000 	mov	r1, r0
  142d54:	e58d3008 	str	r3, [sp, #8]
  142d58:	e58d3004 	str	r3, [sp, #4]
  142d5c:	e58d3000 	str	r3, [sp]
  142d60:	e1a02003 	mov	r2, r3
  142d64:	e3a00006 	mov	r0, #6
  142d68:	ebfffbea 	bl	141d18 <__syscall_cp>
  142d6c:	e3700004 	cmn	r0, #4
  142d70:	03a00000 	moveq	r0, #0
  142d74:	e28dd014 	add	sp, sp, #20
  142d78:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  142d7c:	eaffe5b2 	b	13c44c <__syscall_ret>

00142d80 <tolower>:
  142d80:	e2403041 	sub	r3, r0, #65	; 0x41
  142d84:	e3530019 	cmp	r3, #25
  142d88:	93800020 	orrls	r0, r0, #32
  142d8c:	e12fff1e 	bx	lr

00142d90 <__tolower_l>:
  142d90:	e2403041 	sub	r3, r0, #65	; 0x41
  142d94:	e3530019 	cmp	r3, #25
  142d98:	93800020 	orrls	r0, r0, #32
  142d9c:	e12fff1e 	bx	lr

00142da0 <__init_tp>:
  142da0:	e92d4010 	push	{r4, lr}
  142da4:	e5800000 	str	r0, [r0]
  142da8:	e1a04000 	mov	r4, r0
  142dac:	e2800078 	add	r0, r0, #120	; 0x78
  142db0:	eb000502 	bl	1441c0 <__set_thread_area>
  142db4:	e3500000 	cmp	r0, #0
  142db8:	ba000015 	blt	142e14 <__init_tp+0x74>
  142dbc:	03a02001 	moveq	r2, #1
  142dc0:	059f3054 	ldreq	r3, [pc, #84]	; 142e1c <__init_tp+0x7c>
  142dc4:	e3a00c01 	mov	r0, #256	; 0x100
  142dc8:	05832000 	streq	r2, [r3]
  142dcc:	e3a03001 	mov	r3, #1
  142dd0:	e5843024 	str	r3, [r4, #36]	; 0x24
  142dd4:	ebffe567 	bl	13c378 <get_rtt_syscall>
  142dd8:	e2503000 	subs	r3, r0, #0
  142ddc:	0a00000a 	beq	142e0c <__init_tp+0x6c>
  142de0:	e59f0038 	ldr	r0, [pc, #56]	; 142e20 <__init_tp+0x80>
  142de4:	e12fff33 	blx	r3
  142de8:	e59f2034 	ldr	r2, [pc, #52]	; 142e24 <__init_tp+0x84>
  142dec:	e2843050 	add	r3, r4, #80	; 0x50
  142df0:	e584001c 	str	r0, [r4, #28]
  142df4:	e5844008 	str	r4, [r4, #8]
  142df8:	e584400c 	str	r4, [r4, #12]
  142dfc:	e5842060 	str	r2, [r4, #96]	; 0x60
  142e00:	e5843050 	str	r3, [r4, #80]	; 0x50
  142e04:	e3a00000 	mov	r0, #0
  142e08:	e8bd8010 	pop	{r4, pc}
  142e0c:	e1a00003 	mov	r0, r3
  142e10:	eafffff4 	b	142de8 <__init_tp+0x48>
  142e14:	e3e00000 	mvn	r0, #0
  142e18:	e8bd8010 	pop	{r4, pc}
  142e1c:	0015d08c 	.word	0x0015d08c
  142e20:	0015d0d4 	.word	0x0015d0d4
  142e24:	0015d0b4 	.word	0x0015d0b4

00142e28 <__copy_tls>:
  142e28:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  142e2c:	e59f808c 	ldr	r8, [pc, #140]	; 142ec0 <__copy_tls+0x98>
  142e30:	e3e03077 	mvn	r3, #119	; 0x77
  142e34:	e5982020 	ldr	r2, [r8, #32]
  142e38:	e598601c 	ldr	r6, [r8, #28]
  142e3c:	e1a07102 	lsl	r7, r2, #2
  142e40:	e2277003 	eor	r7, r7, #3
  142e44:	e1e07007 	mvn	r7, r7
  142e48:	e5981018 	ldr	r1, [r8, #24]
  142e4c:	e5984014 	ldr	r4, [r8, #20]
  142e50:	e2466001 	sub	r6, r6, #1
  142e54:	e0433000 	sub	r3, r3, r0
  142e58:	e0066003 	and	r6, r6, r3
  142e5c:	e0877001 	add	r7, r7, r1
  142e60:	e3540000 	cmp	r4, #0
  142e64:	e1a09000 	mov	r9, r0
  142e68:	e0806006 	add	r6, r0, r6
  142e6c:	e080a007 	add	sl, r0, r7
  142e70:	0a00000d 	beq	142eac <__copy_tls+0x84>
  142e74:	e1a0b00a 	mov	fp, sl
  142e78:	e2865078 	add	r5, r6, #120	; 0x78
  142e7c:	e5943014 	ldr	r3, [r4, #20]
  142e80:	e5941004 	ldr	r1, [r4, #4]
  142e84:	e0853003 	add	r3, r5, r3
  142e88:	e5ab3004 	str	r3, [fp, #4]!
  142e8c:	e5940014 	ldr	r0, [r4, #20]
  142e90:	e5942008 	ldr	r2, [r4, #8]
  142e94:	e0850000 	add	r0, r5, r0
  142e98:	ebfff7af 	bl	140d5c <memcpy>
  142e9c:	e5944000 	ldr	r4, [r4]
  142ea0:	e3540000 	cmp	r4, #0
  142ea4:	1afffff4 	bne	142e7c <__copy_tls+0x54>
  142ea8:	e5982020 	ldr	r2, [r8, #32]
  142eac:	e7892007 	str	r2, [r9, r7]
  142eb0:	e1a00006 	mov	r0, r6
  142eb4:	e586a074 	str	sl, [r6, #116]	; 0x74
  142eb8:	e586a004 	str	sl, [r6, #4]
  142ebc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  142ec0:	0015d08c 	.word	0x0015d08c

00142ec4 <__init_tls>:
  142ec4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  142ec8:	e5901014 	ldr	r1, [r0, #20]
  142ecc:	e24dd00c 	sub	sp, sp, #12
  142ed0:	e3510000 	cmp	r1, #0
  142ed4:	e590600c 	ldr	r6, [r0, #12]
  142ed8:	0a000062 	beq	143068 <__init_tls+0x1a4>
  142edc:	e3a04000 	mov	r4, #0
  142ee0:	e59f81a0 	ldr	r8, [pc, #416]	; 143088 <__init_tls+0x1c4>
  142ee4:	e1a02006 	mov	r2, r6
  142ee8:	e1a03004 	mov	r3, r4
  142eec:	e1a0e004 	mov	lr, r4
  142ef0:	e590c010 	ldr	ip, [r0, #16]
  142ef4:	e5987000 	ldr	r7, [r8]
  142ef8:	e59f918c 	ldr	r9, [pc, #396]	; 14308c <__init_tls+0x1c8>
  142efc:	e59f518c 	ldr	r5, [pc, #396]	; 143090 <__init_tls+0x1cc>
  142f00:	ea000007 	b	142f24 <__init_tls+0x60>
  142f04:	e3500002 	cmp	r0, #2
  142f08:	1a00003c 	bne	143000 <__init_tls+0x13c>
  142f0c:	e3550000 	cmp	r5, #0
  142f10:	15923008 	ldrne	r3, [r2, #8]
  142f14:	10453003 	subne	r3, r5, r3
  142f18:	e2511001 	subs	r1, r1, #1
  142f1c:	e082200c 	add	r2, r2, ip
  142f20:	0a000007 	beq	142f44 <__init_tls+0x80>
  142f24:	e5920000 	ldr	r0, [r2]
  142f28:	e3500006 	cmp	r0, #6
  142f2c:	1afffff4 	bne	142f04 <__init_tls+0x40>
  142f30:	e5923008 	ldr	r3, [r2, #8]
  142f34:	e2511001 	subs	r1, r1, #1
  142f38:	e0463003 	sub	r3, r6, r3
  142f3c:	e082200c 	add	r2, r2, ip
  142f40:	1afffff7 	bne	142f24 <__init_tls+0x60>
  142f44:	e3540000 	cmp	r4, #0
  142f48:	15887000 	strne	r7, [r8]
  142f4c:	e35e0000 	cmp	lr, #0
  142f50:	0a000044 	beq	143068 <__init_tls+0x1a4>
  142f54:	e3a04001 	mov	r4, #1
  142f58:	e59ec008 	ldr	ip, [lr, #8]
  142f5c:	e59e1010 	ldr	r1, [lr, #16]
  142f60:	e59f212c 	ldr	r2, [pc, #300]	; 143094 <__init_tls+0x1d0>
  142f64:	e59e001c 	ldr	r0, [lr, #28]
  142f68:	e083300c 	add	r3, r3, ip
  142f6c:	e59fc124 	ldr	ip, [pc, #292]	; 143098 <__init_tls+0x1d4>
  142f70:	e5821008 	str	r1, [r2, #8]
  142f74:	e5823004 	str	r3, [r2, #4]
  142f78:	e59e1014 	ldr	r1, [lr, #20]
  142f7c:	e5820010 	str	r0, [r2, #16]
  142f80:	e58c2014 	str	r2, [ip, #20]
  142f84:	e58c4020 	str	r4, [ip, #32]
  142f88:	e3500003 	cmp	r0, #3
  142f8c:	93a0e004 	movls	lr, #4
  142f90:	e0833001 	add	r3, r3, r1
  142f94:	e2404001 	sub	r4, r0, #1
  142f98:	e2633000 	rsb	r3, r3, #0
  142f9c:	e0033004 	and	r3, r3, r4
  142fa0:	e0833001 	add	r3, r3, r1
  142fa4:	93a01087 	movls	r1, #135	; 0x87
  142fa8:	91a0000e 	movls	r0, lr
  142fac:	e3c44007 	bic	r4, r4, #7
  142fb0:	e2844008 	add	r4, r4, #8
  142fb4:	82801083 	addhi	r1, r0, #131	; 0x83
  142fb8:	e5824014 	str	r4, [r2, #20]
  142fbc:	e0834004 	add	r4, r3, r4
  142fc0:	e0844001 	add	r4, r4, r1
  142fc4:	e3c44003 	bic	r4, r4, #3
  142fc8:	9582e010 	strls	lr, [r2, #16]
  142fcc:	e35400bc 	cmp	r4, #188	; 0xbc
  142fd0:	e58c001c 	str	r0, [ip, #28]
  142fd4:	e582300c 	str	r3, [r2, #12]
  142fd8:	e58c4018 	str	r4, [ip, #24]
  142fdc:	959f00b8 	ldrls	r0, [pc, #184]	; 14309c <__init_tls+0x1d8>
  142fe0:	8a000013 	bhi	143034 <__init_tls+0x170>
  142fe4:	ebffff8f 	bl	142e28 <__copy_tls>
  142fe8:	ebffff6c 	bl	142da0 <__init_tp>
  142fec:	e3500000 	cmp	r0, #0
  142ff0:	aa000000 	bge	142ff8 <__init_tls+0x134>
  142ff4:	e7f000f0 	.word	0xe7f000f0
  142ff8:	e28dd00c 	add	sp, sp, #12
  142ffc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  143000:	e3500007 	cmp	r0, #7
  143004:	01a0e002 	moveq	lr, r2
  143008:	0affffc2 	beq	142f18 <__init_tls+0x54>
  14300c:	e1500009 	cmp	r0, r9
  143010:	1affffc0 	bne	142f18 <__init_tls+0x54>
  143014:	e5920014 	ldr	r0, [r2, #20]
  143018:	e1500007 	cmp	r0, r7
  14301c:	9affffbd 	bls	142f18 <__init_tls+0x54>
  143020:	e3500502 	cmp	r0, #8388608	; 0x800000
  143024:	31a07000 	movcc	r7, r0
  143028:	23a07502 	movcs	r7, #8388608	; 0x800000
  14302c:	e3a04001 	mov	r4, #1
  143030:	eaffffb8 	b	142f18 <__init_tls+0x54>
  143034:	e3a000c0 	mov	r0, #192	; 0xc0
  143038:	ebffe4ce 	bl	13c378 <get_rtt_syscall>
  14303c:	e2505000 	subs	r5, r0, #0
  143040:	0a00000e 	beq	143080 <__init_tls+0x1bc>
  143044:	e3e03000 	mvn	r3, #0
  143048:	e3a00000 	mov	r0, #0
  14304c:	e58d3000 	str	r3, [sp]
  143050:	e1a01004 	mov	r1, r4
  143054:	e58d0004 	str	r0, [sp, #4]
  143058:	e3a03022 	mov	r3, #34	; 0x22
  14305c:	e3a02003 	mov	r2, #3
  143060:	e12fff35 	blx	r5
  143064:	eaffffde 	b	142fe4 <__init_tls+0x120>
  143068:	e59f2024 	ldr	r2, [pc, #36]	; 143094 <__init_tls+0x1d0>
  14306c:	e59fc024 	ldr	ip, [pc, #36]	; 143098 <__init_tls+0x1d4>
  143070:	e592100c 	ldr	r1, [r2, #12]
  143074:	e5923004 	ldr	r3, [r2, #4]
  143078:	e5920010 	ldr	r0, [r2, #16]
  14307c:	eaffffc1 	b	142f88 <__init_tls+0xc4>
  143080:	e1a00005 	mov	r0, r5
  143084:	eaffffd6 	b	142fe4 <__init_tls+0x120>
  143088:	0014d3e4 	.word	0x0014d3e4
  14308c:	6474e551 	.word	0x6474e551
  143090:	00000000 	.word	0x00000000
  143094:	0014f568 	.word	0x0014f568
  143098:	0015d08c 	.word	0x0015d08c
  14309c:	0014f4ac 	.word	0x0014f4ac

001430a0 <__init_ssp>:
  1430a0:	e2501000 	subs	r1, r0, #0
  1430a4:	e92d4010 	push	{r4, lr}
  1430a8:	1a000009 	bne	1430d4 <__init_ssp+0x34>
  1430ac:	e59f3034 	ldr	r3, [pc, #52]	; 1430e8 <__init_ssp+0x48>
  1430b0:	e59f2034 	ldr	r2, [pc, #52]	; 1430ec <__init_ssp+0x4c>
  1430b4:	e0010293 	mul	r1, r3, r2
  1430b8:	e5831000 	str	r1, [r3]
  1430bc:	e5933000 	ldr	r3, [r3]
  1430c0:	e59f2028 	ldr	r2, [pc, #40]	; 1430f0 <__init_ssp+0x50>
  1430c4:	e5920000 	ldr	r0, [r2]
  1430c8:	e12fff30 	blx	r0
  1430cc:	e5003064 	str	r3, [r0, #-100]	; 0xffffff9c
  1430d0:	e8bd8010 	pop	{r4, pc}
  1430d4:	e3a02004 	mov	r2, #4
  1430d8:	e59f0008 	ldr	r0, [pc, #8]	; 1430e8 <__init_ssp+0x48>
  1430dc:	ebfff71e 	bl	140d5c <memcpy>
  1430e0:	e59f3000 	ldr	r3, [pc]	; 1430e8 <__init_ssp+0x48>
  1430e4:	eafffff4 	b	1430bc <__init_ssp+0x1c>
  1430e8:	0015d0d8 	.word	0x0015d0d8
  1430ec:	41c64e6d 	.word	0x41c64e6d
  1430f0:	0014d3dc 	.word	0x0014d3dc

001430f4 <__stack_chk_fail>:
  1430f4:	e7f000f0 	.word	0xe7f000f0
  1430f8:	e12fff1e 	bx	lr

001430fc <_Exit>:
  1430fc:	e92d4010 	push	{r4, lr}
  143100:	e1a04000 	mov	r4, r0
  143104:	e3a000f8 	mov	r0, #248	; 0xf8
  143108:	ebffe49a 	bl	13c378 <get_rtt_syscall>
  14310c:	e2503000 	subs	r3, r0, #0
  143110:	0a000001 	beq	14311c <_Exit+0x20>
  143114:	e1a00004 	mov	r0, r4
  143118:	e12fff33 	blx	r3
  14311c:	e3a00001 	mov	r0, #1
  143120:	ebffe494 	bl	13c378 <get_rtt_syscall>
  143124:	e2503000 	subs	r3, r0, #0
  143128:	0afffffb 	beq	14311c <_Exit+0x20>
  14312c:	eafffff8 	b	143114 <_Exit+0x18>

00143130 <abort>:
  143130:	e3a04000 	mov	r4, #0
  143134:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  143138:	e3a00006 	mov	r0, #6
  14313c:	e24dd024 	sub	sp, sp, #36	; 0x24
  143140:	ebffec24 	bl	13e1d8 <raise>
  143144:	e1a00004 	mov	r0, r4
  143148:	eb0000b0 	bl	143410 <__block_all_sigs>
  14314c:	e59f00b0 	ldr	r0, [pc, #176]	; 143204 <abort+0xd4>
  143150:	ebfffa6e 	bl	141b10 <__lock>
  143154:	e3a000ae 	mov	r0, #174	; 0xae
  143158:	e58d400c 	str	r4, [sp, #12]
  14315c:	e58d4010 	str	r4, [sp, #16]
  143160:	e58d4014 	str	r4, [sp, #20]
  143164:	e58d4018 	str	r4, [sp, #24]
  143168:	e58d401c 	str	r4, [sp, #28]
  14316c:	ebffe481 	bl	13c378 <get_rtt_syscall>
  143170:	e2505000 	subs	r5, r0, #0
  143174:	0a000004 	beq	14318c <abort+0x5c>
  143178:	e1a02004 	mov	r2, r4
  14317c:	e28d100c 	add	r1, sp, #12
  143180:	e3a03008 	mov	r3, #8
  143184:	e3a00006 	mov	r0, #6
  143188:	e12fff35 	blx	r5
  14318c:	e59f3074 	ldr	r3, [pc, #116]	; 143208 <abort+0xd8>
  143190:	e5930000 	ldr	r0, [r3]
  143194:	e12fff30 	blx	r0
  143198:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  14319c:	e3a000ee 	mov	r0, #238	; 0xee
  1431a0:	ebffe474 	bl	13c378 <get_rtt_syscall>
  1431a4:	e2503000 	subs	r3, r0, #0
  1431a8:	0a000002 	beq	1431b8 <abort+0x88>
  1431ac:	e1a00004 	mov	r0, r4
  1431b0:	e3a01006 	mov	r1, #6
  1431b4:	e12fff33 	blx	r3
  1431b8:	e3a03020 	mov	r3, #32
  1431bc:	e3a05000 	mov	r5, #0
  1431c0:	e08d4003 	add	r4, sp, r3
  1431c4:	e3a000af 	mov	r0, #175	; 0xaf
  1431c8:	e58d5008 	str	r5, [sp, #8]
  1431cc:	e524301c 	str	r3, [r4, #-28]!	; 0xffffffe4
  1431d0:	ebffe468 	bl	13c378 <get_rtt_syscall>
  1431d4:	e2506000 	subs	r6, r0, #0
  1431d8:	0a000004 	beq	1431f0 <abort+0xc0>
  1431dc:	e1a02005 	mov	r2, r5
  1431e0:	e1a01004 	mov	r1, r4
  1431e4:	e3a03008 	mov	r3, #8
  1431e8:	e3a00001 	mov	r0, #1
  1431ec:	e12fff36 	blx	r6
  1431f0:	e7f000f0 	.word	0xe7f000f0
  1431f4:	e3a00009 	mov	r0, #9
  1431f8:	ebffebf6 	bl	13e1d8 <raise>
  1431fc:	e3a0007f 	mov	r0, #127	; 0x7f
  143200:	ebffffbd 	bl	1430fc <_Exit>
  143204:	0015d0dc 	.word	0x0015d0dc
  143208:	0014d3dc 	.word	0x0014d3dc

0014320c <__expand_heap>:
  14320c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  143210:	e59f2178 	ldr	r2, [pc, #376]	; 143390 <__expand_heap+0x184>
  143214:	e5903000 	ldr	r3, [r0]
  143218:	e24dd01c 	sub	sp, sp, #28
  14321c:	e1530002 	cmp	r3, r2
  143220:	8a000051 	bhi	14336c <__expand_heap+0x160>
  143224:	e59f7168 	ldr	r7, [pc, #360]	; 143394 <__expand_heap+0x188>
  143228:	e59f8168 	ldr	r8, [pc, #360]	; 143398 <__expand_heap+0x18c>
  14322c:	e5975000 	ldr	r5, [r7]
  143230:	e2634000 	rsb	r4, r3, #0
  143234:	e3550000 	cmp	r5, #0
  143238:	e0044008 	and	r4, r4, r8
  14323c:	e0844003 	add	r4, r4, r3
  143240:	e1a06000 	mov	r6, r0
  143244:	11e03005 	mvnne	r3, r5
  143248:	0a00003b 	beq	14333c <__expand_heap+0x130>
  14324c:	e1540003 	cmp	r4, r3
  143250:	2a00001d 	bcs	1432cc <__expand_heap+0xc0>
  143254:	e59f3140 	ldr	r3, [pc, #320]	; 14339c <__expand_heap+0x190>
  143258:	e0848005 	add	r8, r4, r5
  14325c:	e5933010 	ldr	r3, [r3, #16]
  143260:	e3530502 	cmp	r3, #8388608	; 0x800000
  143264:	21a02003 	movcs	r2, r3
  143268:	33a02502 	movcc	r2, #8388608	; 0x800000
  14326c:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  143270:	e1580002 	cmp	r8, r2
  143274:	81530005 	cmphi	r3, r5
  143278:	8a000013 	bhi	1432cc <__expand_heap+0xc0>
  14327c:	e28d3014 	add	r3, sp, #20
  143280:	e3530502 	cmp	r3, #8388608	; 0x800000
  143284:	21a02003 	movcs	r2, r3
  143288:	33a02502 	movcc	r2, #8388608	; 0x800000
  14328c:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  143290:	e1580002 	cmp	r8, r2
  143294:	81530005 	cmphi	r3, r5
  143298:	8a00000b 	bhi	1432cc <__expand_heap+0xc0>
  14329c:	e3a0002d 	mov	r0, #45	; 0x2d
  1432a0:	ebffe434 	bl	13c378 <get_rtt_syscall>
  1432a4:	e2503000 	subs	r3, r0, #0
  1432a8:	0a000036 	beq	143388 <__expand_heap+0x17c>
  1432ac:	e1a00008 	mov	r0, r8
  1432b0:	e12fff33 	blx	r3
  1432b4:	e5972000 	ldr	r2, [r7]
  1432b8:	e0823004 	add	r3, r2, r4
  1432bc:	e1530000 	cmp	r3, r0
  1432c0:	05864000 	streq	r4, [r6]
  1432c4:	05870000 	streq	r0, [r7]
  1432c8:	0a000018 	beq	143330 <__expand_heap+0x124>
  1432cc:	e3a01a01 	mov	r1, #4096	; 0x1000
  1432d0:	e59f50c8 	ldr	r5, [pc, #200]	; 1433a0 <__expand_heap+0x194>
  1432d4:	e3a08000 	mov	r8, #0
  1432d8:	e5953000 	ldr	r3, [r5]
  1432dc:	e3a09000 	mov	r9, #0
  1432e0:	e1a030a3 	lsr	r3, r3, #1
  1432e4:	e1a01311 	lsl	r1, r1, r3
  1432e8:	e1510004 	cmp	r1, r4
  1432ec:	21a04001 	movcs	r4, r1
  1432f0:	e3e03000 	mvn	r3, #0
  1432f4:	e3a02003 	mov	r2, #3
  1432f8:	e58d3000 	str	r3, [sp]
  1432fc:	e58d8008 	str	r8, [sp, #8]
  143300:	e58d900c 	str	r9, [sp, #12]
  143304:	e3a03022 	mov	r3, #34	; 0x22
  143308:	e1a01004 	mov	r1, r4
  14330c:	e3a00000 	mov	r0, #0
  143310:	ebffea5c 	bl	13dc88 <__mmap>
  143314:	e3700001 	cmn	r0, #1
  143318:	e1a02000 	mov	r2, r0
  14331c:	03a02000 	moveq	r2, #0
  143320:	15953000 	ldrne	r3, [r5]
  143324:	15864000 	strne	r4, [r6]
  143328:	12833001 	addne	r3, r3, #1
  14332c:	15853000 	strne	r3, [r5]
  143330:	e1a00002 	mov	r0, r2
  143334:	e28dd01c 	add	sp, sp, #28
  143338:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  14333c:	e3a0002d 	mov	r0, #45	; 0x2d
  143340:	ebffe40c 	bl	13c378 <get_rtt_syscall>
  143344:	e2503000 	subs	r3, r0, #0
  143348:	0a00000c 	beq	143380 <__expand_heap+0x174>
  14334c:	e1a00005 	mov	r0, r5
  143350:	e12fff33 	blx	r3
  143354:	e2605000 	rsb	r5, r0, #0
  143358:	e0055008 	and	r5, r5, r8
  14335c:	e0855000 	add	r5, r5, r0
  143360:	e1e03005 	mvn	r3, r5
  143364:	e5875000 	str	r5, [r7]
  143368:	eaffffb7 	b	14324c <__expand_heap+0x40>
  14336c:	ebffd6cb 	bl	138ea0 <__errno_location>
  143370:	e3a0300c 	mov	r3, #12
  143374:	e3a02000 	mov	r2, #0
  143378:	e5803000 	str	r3, [r0]
  14337c:	eaffffeb 	b	143330 <__expand_heap+0x124>
  143380:	e3e03000 	mvn	r3, #0
  143384:	eafffff6 	b	143364 <__expand_heap+0x158>
  143388:	e1a00003 	mov	r0, r3
  14338c:	eaffffc8 	b	1432b4 <__expand_heap+0xa8>
  143390:	7fffefff 	.word	0x7fffefff
  143394:	0014f580 	.word	0x0014f580
  143398:	00000fff 	.word	0x00000fff
  14339c:	0015d08c 	.word	0x0015d08c
  1433a0:	0014f584 	.word	0x0014f584

001433a4 <frexpl>:
  1433a4:	ea000417 	b	144408 <frexp>

001433a8 <__mprotect>:
  1433a8:	e2811eff 	add	r1, r1, #4080	; 0xff0
  1433ac:	e92d4070 	push	{r4, r5, r6, lr}
  1433b0:	e281100f 	add	r1, r1, #15
  1433b4:	e59f5040 	ldr	r5, [pc, #64]	; 1433fc <__mprotect+0x54>
  1433b8:	e0801001 	add	r1, r0, r1
  1433bc:	e0011005 	and	r1, r1, r5
  1433c0:	e0055000 	and	r5, r5, r0
  1433c4:	e3a0007d 	mov	r0, #125	; 0x7d
  1433c8:	e1a06002 	mov	r6, r2
  1433cc:	e0414005 	sub	r4, r1, r5
  1433d0:	ebffe3e8 	bl	13c378 <get_rtt_syscall>
  1433d4:	e2503000 	subs	r3, r0, #0
  1433d8:	0a000005 	beq	1433f4 <__mprotect+0x4c>
  1433dc:	e1a02006 	mov	r2, r6
  1433e0:	e1a01004 	mov	r1, r4
  1433e4:	e1a00005 	mov	r0, r5
  1433e8:	e12fff33 	blx	r3
  1433ec:	e8bd4070 	pop	{r4, r5, r6, lr}
  1433f0:	eaffe415 	b	13c44c <__syscall_ret>
  1433f4:	e1a00003 	mov	r0, r3
  1433f8:	eafffffb 	b	1433ec <__mprotect+0x44>
  1433fc:	fffff000 	.word	0xfffff000

00143400 <wctomb>:
  143400:	e3500000 	cmp	r0, #0
  143404:	012fff1e 	bxeq	lr
  143408:	e3a02000 	mov	r2, #0
  14340c:	ea00042a 	b	1444bc <wcrtomb>

00143410 <__block_all_sigs>:
  143410:	e92d4010 	push	{r4, lr}
  143414:	e1a04000 	mov	r4, r0
  143418:	e3a000af 	mov	r0, #175	; 0xaf
  14341c:	ebffe3d5 	bl	13c378 <get_rtt_syscall>
  143420:	e250e000 	subs	lr, r0, #0
  143424:	08bd8010 	popeq	{r4, pc}
  143428:	e1a02004 	mov	r2, r4
  14342c:	e1a0c00e 	mov	ip, lr
  143430:	e8bd4010 	pop	{r4, lr}
  143434:	e3a03008 	mov	r3, #8
  143438:	e59f1004 	ldr	r1, [pc, #4]	; 143444 <__block_all_sigs+0x34>
  14343c:	e3a00000 	mov	r0, #0
  143440:	e12fff1c 	bx	ip
  143444:	0014cf74 	.word	0x0014cf74

00143448 <__block_app_sigs>:
  143448:	e92d4010 	push	{r4, lr}
  14344c:	e1a04000 	mov	r4, r0
  143450:	e3a000af 	mov	r0, #175	; 0xaf
  143454:	ebffe3c7 	bl	13c378 <get_rtt_syscall>
  143458:	e250e000 	subs	lr, r0, #0
  14345c:	08bd8010 	popeq	{r4, pc}
  143460:	e1a02004 	mov	r2, r4
  143464:	e1a0c00e 	mov	ip, lr
  143468:	e8bd4010 	pop	{r4, lr}
  14346c:	e3a03008 	mov	r3, #8
  143470:	e59f1004 	ldr	r1, [pc, #4]	; 14347c <__block_app_sigs+0x34>
  143474:	e3a00000 	mov	r0, #0
  143478:	e12fff1c 	bx	ip
  14347c:	0014cf7c 	.word	0x0014cf7c

00143480 <__restore_sigs>:
  143480:	e92d4010 	push	{r4, lr}
  143484:	e1a04000 	mov	r4, r0
  143488:	e3a000af 	mov	r0, #175	; 0xaf
  14348c:	ebffe3b9 	bl	13c378 <get_rtt_syscall>
  143490:	e250e000 	subs	lr, r0, #0
  143494:	08bd8010 	popeq	{r4, pc}
  143498:	e1a01004 	mov	r1, r4
  14349c:	e1a0c00e 	mov	ip, lr
  1434a0:	e8bd4010 	pop	{r4, lr}
  1434a4:	e3a03008 	mov	r3, #8
  1434a8:	e3a02000 	mov	r2, #0
  1434ac:	e3a00002 	mov	r0, #2
  1434b0:	e12fff1c 	bx	ip

001434b4 <__lockfile>:
  1434b4:	e59f2124 	ldr	r2, [pc, #292]	; 1435e0 <__lockfile+0x12c>
  1434b8:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
  1434bc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  1434c0:	e1a06000 	mov	r6, r0
  1434c4:	e5920000 	ldr	r0, [r2]
  1434c8:	e12fff30 	blx	r0
  1434cc:	e510805c 	ldr	r8, [r0, #-92]	; 0xffffffa4
  1434d0:	e3c33101 	bic	r3, r3, #1073741824	; 0x40000000
  1434d4:	e1530008 	cmp	r3, r8
  1434d8:	0a00003e 	beq	1435d8 <__lockfile+0x124>
  1434dc:	e59f7100 	ldr	r7, [pc, #256]	; 1435e4 <__lockfile+0x130>
  1434e0:	e286504c 	add	r5, r6, #76	; 0x4c
  1434e4:	ea000002 	b	1434f4 <__lockfile+0x40>
  1434e8:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  1434ec:	e3530000 	cmp	r3, #0
  1434f0:	1a000008 	bne	143518 <__lockfile+0x64>
  1434f4:	e3a00000 	mov	r0, #0
  1434f8:	e1a01008 	mov	r1, r8
  1434fc:	e1a02005 	mov	r2, r5
  143500:	e5973000 	ldr	r3, [r7]
  143504:	e12fff33 	blx	r3
  143508:	e3500000 	cmp	r0, #0
  14350c:	1afffff5 	bne	1434e8 <__lockfile+0x34>
  143510:	e3a00001 	mov	r0, #1
  143514:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143518:	e3888101 	orr	r8, r8, #1073741824	; 0x40000000
  14351c:	ea000002 	b	14352c <__lockfile+0x78>
  143520:	e596404c 	ldr	r4, [r6, #76]	; 0x4c
  143524:	e3540000 	cmp	r4, #0
  143528:	1a000007 	bne	14354c <__lockfile+0x98>
  14352c:	e3a00000 	mov	r0, #0
  143530:	e1a01008 	mov	r1, r8
  143534:	e1a02005 	mov	r2, r5
  143538:	e5973000 	ldr	r3, [r7]
  14353c:	e12fff33 	blx	r3
  143540:	e3500000 	cmp	r0, #0
  143544:	1afffff5 	bne	143520 <__lockfile+0x6c>
  143548:	eafffff0 	b	143510 <__lockfile+0x5c>
  14354c:	e3140101 	tst	r4, #1073741824	; 0x40000000
  143550:	e3849101 	orr	r9, r4, #1073741824	; 0x40000000
  143554:	0a000017 	beq	1435b8 <__lockfile+0x104>
  143558:	e3a000f0 	mov	r0, #240	; 0xf0
  14355c:	ebffe385 	bl	13c378 <get_rtt_syscall>
  143560:	e2504000 	subs	r4, r0, #0
  143564:	0afffff0 	beq	14352c <__lockfile+0x78>
  143568:	e3a03000 	mov	r3, #0
  14356c:	e1a02009 	mov	r2, r9
  143570:	e3a01080 	mov	r1, #128	; 0x80
  143574:	e1a00005 	mov	r0, r5
  143578:	e12fff34 	blx	r4
  14357c:	e3700026 	cmn	r0, #38	; 0x26
  143580:	1affffe9 	bne	14352c <__lockfile+0x78>
  143584:	e3a000f0 	mov	r0, #240	; 0xf0
  143588:	ebffe37a 	bl	13c378 <get_rtt_syscall>
  14358c:	e2504000 	subs	r4, r0, #0
  143590:	0affffe5 	beq	14352c <__lockfile+0x78>
  143594:	e3a03000 	mov	r3, #0
  143598:	e1a02009 	mov	r2, r9
  14359c:	e1a01003 	mov	r1, r3
  1435a0:	e1a00005 	mov	r0, r5
  1435a4:	e12fff34 	blx	r4
  1435a8:	eaffffdf 	b	14352c <__lockfile+0x78>
  1435ac:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  1435b0:	e1530004 	cmp	r3, r4
  1435b4:	1affffdc 	bne	14352c <__lockfile+0x78>
  1435b8:	e1a00004 	mov	r0, r4
  1435bc:	e1a01009 	mov	r1, r9
  1435c0:	e1a02005 	mov	r2, r5
  1435c4:	e5973000 	ldr	r3, [r7]
  1435c8:	e12fff33 	blx	r3
  1435cc:	e3500000 	cmp	r0, #0
  1435d0:	1afffff5 	bne	1435ac <__lockfile+0xf8>
  1435d4:	eaffffdf 	b	143558 <__lockfile+0xa4>
  1435d8:	e3a00000 	mov	r0, #0
  1435dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  1435e0:	0014d3dc 	.word	0x0014d3dc
  1435e4:	0014d3d8 	.word	0x0014d3d8

001435e8 <__unlockfile>:
  1435e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1435ec:	e1a05000 	mov	r5, r0
  1435f0:	e59f7084 	ldr	r7, [pc, #132]	; 14367c <__unlockfile+0x94>
  1435f4:	e280604c 	add	r6, r0, #76	; 0x4c
  1435f8:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  1435fc:	ea000002 	b	14360c <__unlockfile+0x24>
  143600:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  143604:	e1540003 	cmp	r4, r3
  143608:	1afffffa 	bne	1435f8 <__unlockfile+0x10>
  14360c:	e1a00004 	mov	r0, r4
  143610:	e3a01000 	mov	r1, #0
  143614:	e1a02006 	mov	r2, r6
  143618:	e5973000 	ldr	r3, [r7]
  14361c:	e12fff33 	blx	r3
  143620:	e1500001 	cmp	r0, r1
  143624:	1afffff5 	bne	143600 <__unlockfile+0x18>
  143628:	e3140101 	tst	r4, #1073741824	; 0x40000000
  14362c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143630:	e3a000f0 	mov	r0, #240	; 0xf0
  143634:	ebffe34f 	bl	13c378 <get_rtt_syscall>
  143638:	e2503000 	subs	r3, r0, #0
  14363c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143640:	e3a02001 	mov	r2, #1
  143644:	e3a01081 	mov	r1, #129	; 0x81
  143648:	e1a00006 	mov	r0, r6
  14364c:	e12fff33 	blx	r3
  143650:	e3700026 	cmn	r0, #38	; 0x26
  143654:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  143658:	e3a000f0 	mov	r0, #240	; 0xf0
  14365c:	ebffe345 	bl	13c378 <get_rtt_syscall>
  143660:	e2503000 	subs	r3, r0, #0
  143664:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143668:	e3a02001 	mov	r2, #1
  14366c:	e1a00006 	mov	r0, r6
  143670:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  143674:	e1a01002 	mov	r1, r2
  143678:	e12fff13 	bx	r3
  14367c:	0014d3d8 	.word	0x0014d3d8

00143680 <__overflow>:
  143680:	e92d4010 	push	{r4, lr}
  143684:	e5903010 	ldr	r3, [r0, #16]
  143688:	e24dd008 	sub	sp, sp, #8
  14368c:	e3530000 	cmp	r3, #0
  143690:	e1a04000 	mov	r4, r0
  143694:	e5cd1007 	strb	r1, [sp, #7]
  143698:	0a000015 	beq	1436f4 <__overflow+0x74>
  14369c:	e5942014 	ldr	r2, [r4, #20]
  1436a0:	e1520003 	cmp	r2, r3
  1436a4:	1a000009 	bne	1436d0 <__overflow+0x50>
  1436a8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  1436ac:	e1a00004 	mov	r0, r4
  1436b0:	e3a02001 	mov	r2, #1
  1436b4:	e28d1007 	add	r1, sp, #7
  1436b8:	e12fff33 	blx	r3
  1436bc:	e3500001 	cmp	r0, #1
  1436c0:	1a00000f 	bne	143704 <__overflow+0x84>
  1436c4:	e5dd0007 	ldrb	r0, [sp, #7]
  1436c8:	e28dd008 	add	sp, sp, #8
  1436cc:	e8bd8010 	pop	{r4, pc}
  1436d0:	e5dd0007 	ldrb	r0, [sp, #7]
  1436d4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  1436d8:	e1500003 	cmp	r0, r3
  1436dc:	0afffff1 	beq	1436a8 <__overflow+0x28>
  1436e0:	e2823001 	add	r3, r2, #1
  1436e4:	e5843014 	str	r3, [r4, #20]
  1436e8:	e5c20000 	strb	r0, [r2]
  1436ec:	e28dd008 	add	sp, sp, #8
  1436f0:	e8bd8010 	pop	{r4, pc}
  1436f4:	eb00008c 	bl	14392c <__towrite>
  1436f8:	e3500000 	cmp	r0, #0
  1436fc:	05943010 	ldreq	r3, [r4, #16]
  143700:	0affffe5 	beq	14369c <__overflow+0x1c>
  143704:	e3e00000 	mvn	r0, #0
  143708:	eaffffee 	b	1436c8 <__overflow+0x48>

0014370c <dummy>:
  14370c:	e12fff1e 	bx	lr

00143710 <__stdio_close>:
  143710:	e92d4010 	push	{r4, lr}
  143714:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
  143718:	ebfffd87 	bl	142d3c <__aio_close>
  14371c:	e1a04000 	mov	r4, r0
  143720:	e3a00006 	mov	r0, #6
  143724:	ebffe313 	bl	13c378 <get_rtt_syscall>
  143728:	e2503000 	subs	r3, r0, #0
  14372c:	0a000003 	beq	143740 <__stdio_close+0x30>
  143730:	e1a00004 	mov	r0, r4
  143734:	e12fff33 	blx	r3
  143738:	e8bd4010 	pop	{r4, lr}
  14373c:	eaffe342 	b	13c44c <__syscall_ret>
  143740:	e1a00003 	mov	r0, r3
  143744:	eafffffb 	b	143738 <__stdio_close+0x28>

00143748 <__stdio_seek>:
  143748:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  14374c:	e590503c 	ldr	r5, [r0, #60]	; 0x3c
  143750:	e24dd014 	sub	sp, sp, #20
  143754:	e3a0008c 	mov	r0, #140	; 0x8c
  143758:	e1a07002 	mov	r7, r2
  14375c:	e1a06003 	mov	r6, r3
  143760:	ebffe304 	bl	13c378 <get_rtt_syscall>
  143764:	e2504000 	subs	r4, r0, #0
  143768:	0a00000e 	beq	1437a8 <__stdio_seek+0x60>
  14376c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  143770:	e1a02007 	mov	r2, r7
  143774:	e58d3000 	str	r3, [sp]
  143778:	e1a01006 	mov	r1, r6
  14377c:	e28d3008 	add	r3, sp, #8
  143780:	e1a00005 	mov	r0, r5
  143784:	e12fff34 	blx	r4
  143788:	ebffe32f 	bl	13c44c <__syscall_ret>
  14378c:	e3500000 	cmp	r0, #0
  143790:	b3e00000 	mvnlt	r0, #0
  143794:	b3e01000 	mvnlt	r1, #0
  143798:	a28d1008 	addge	r1, sp, #8
  14379c:	a8910003 	ldmge	r1, {r0, r1}
  1437a0:	e28dd014 	add	sp, sp, #20
  1437a4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  1437a8:	e1a00004 	mov	r0, r4
  1437ac:	eafffff5 	b	143788 <__stdio_seek+0x40>

001437b0 <__stdio_write>:
  1437b0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  1437b4:	e590301c 	ldr	r3, [r0, #28]
  1437b8:	e5905014 	ldr	r5, [r0, #20]
  1437bc:	e24dd014 	sub	sp, sp, #20
  1437c0:	e0455003 	sub	r5, r5, r3
  1437c4:	e88d0028 	stm	sp, {r3, r5}
  1437c8:	e1a06000 	mov	r6, r0
  1437cc:	e1a08002 	mov	r8, r2
  1437d0:	e3a07002 	mov	r7, #2
  1437d4:	e58d200c 	str	r2, [sp, #12]
  1437d8:	e58d1008 	str	r1, [sp, #8]
  1437dc:	e0855002 	add	r5, r5, r2
  1437e0:	e1a0400d 	mov	r4, sp
  1437e4:	ea00000d 	b	143820 <__stdio_write+0x70>
  1437e8:	e3500000 	cmp	r0, #0
  1437ec:	ba000020 	blt	143874 <__stdio_write+0xc4>
  1437f0:	e5943004 	ldr	r3, [r4, #4]
  1437f4:	e0455000 	sub	r5, r5, r0
  1437f8:	e1500003 	cmp	r0, r3
  1437fc:	80400003 	subhi	r0, r0, r3
  143800:	8594300c 	ldrhi	r3, [r4, #12]
  143804:	82844008 	addhi	r4, r4, #8
  143808:	e5942000 	ldr	r2, [r4]
  14380c:	e0433000 	sub	r3, r3, r0
  143810:	e0820000 	add	r0, r2, r0
  143814:	82477001 	subhi	r7, r7, #1
  143818:	e5843004 	str	r3, [r4, #4]
  14381c:	e5840000 	str	r0, [r4]
  143820:	e3a00092 	mov	r0, #146	; 0x92
  143824:	e596903c 	ldr	r9, [r6, #60]	; 0x3c
  143828:	ebffe2d2 	bl	13c378 <get_rtt_syscall>
  14382c:	e2503000 	subs	r3, r0, #0
  143830:	0a00001c 	beq	1438a8 <__stdio_write+0xf8>
  143834:	e1a00009 	mov	r0, r9
  143838:	e1a02007 	mov	r2, r7
  14383c:	e1a01004 	mov	r1, r4
  143840:	e12fff33 	blx	r3
  143844:	ebffe300 	bl	13c44c <__syscall_ret>
  143848:	e1500005 	cmp	r0, r5
  14384c:	1affffe5 	bne	1437e8 <__stdio_write+0x38>
  143850:	e1a00008 	mov	r0, r8
  143854:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
  143858:	e5963030 	ldr	r3, [r6, #48]	; 0x30
  14385c:	e586201c 	str	r2, [r6, #28]
  143860:	e0823003 	add	r3, r2, r3
  143864:	e5862014 	str	r2, [r6, #20]
  143868:	e5863010 	str	r3, [r6, #16]
  14386c:	e28dd014 	add	sp, sp, #20
  143870:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  143874:	e3a00000 	mov	r0, #0
  143878:	e5963000 	ldr	r3, [r6]
  14387c:	e3570002 	cmp	r7, #2
  143880:	e3833020 	orr	r3, r3, #32
  143884:	e5863000 	str	r3, [r6]
  143888:	e5860010 	str	r0, [r6, #16]
  14388c:	e586001c 	str	r0, [r6, #28]
  143890:	e5860014 	str	r0, [r6, #20]
  143894:	0afffff4 	beq	14386c <__stdio_write+0xbc>
  143898:	e5940004 	ldr	r0, [r4, #4]
  14389c:	e0480000 	sub	r0, r8, r0
  1438a0:	e28dd014 	add	sp, sp, #20
  1438a4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  1438a8:	e1a00003 	mov	r0, r3
  1438ac:	eaffffe4 	b	143844 <__stdio_write+0x94>

001438b0 <__stdout_write>:
  1438b0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  1438b4:	e1a04000 	mov	r4, r0
  1438b8:	e5900000 	ldr	r0, [r0]
  1438bc:	e59f3060 	ldr	r3, [pc, #96]	; 143924 <__stdout_write+0x74>
  1438c0:	e3100040 	tst	r0, #64	; 0x40
  1438c4:	e24dd00c 	sub	sp, sp, #12
  1438c8:	e1a05001 	mov	r5, r1
  1438cc:	e1a06002 	mov	r6, r2
  1438d0:	e5843024 	str	r3, [r4, #36]	; 0x24
  1438d4:	0a000005 	beq	1438f0 <__stdout_write+0x40>
  1438d8:	e1a02006 	mov	r2, r6
  1438dc:	e1a01005 	mov	r1, r5
  1438e0:	e1a00004 	mov	r0, r4
  1438e4:	ebffffb1 	bl	1437b0 <__stdio_write>
  1438e8:	e28dd00c 	add	sp, sp, #12
  1438ec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  1438f0:	e3a00036 	mov	r0, #54	; 0x36
  1438f4:	e594703c 	ldr	r7, [r4, #60]	; 0x3c
  1438f8:	ebffe29e 	bl	13c378 <get_rtt_syscall>
  1438fc:	e2503000 	subs	r3, r0, #0
  143900:	0afffff4 	beq	1438d8 <__stdout_write+0x28>
  143904:	e1a0200d 	mov	r2, sp
  143908:	e1a00007 	mov	r0, r7
  14390c:	e59f1014 	ldr	r1, [pc, #20]	; 143928 <__stdout_write+0x78>
  143910:	e12fff33 	blx	r3
  143914:	e3500000 	cmp	r0, #0
  143918:	13e03000 	mvnne	r3, #0
  14391c:	15843050 	strne	r3, [r4, #80]	; 0x50
  143920:	eaffffec 	b	1438d8 <__stdout_write+0x28>
  143924:	001437b0 	.word	0x001437b0
  143928:	00005413 	.word	0x00005413

0014392c <__towrite>:
  14392c:	e1a03000 	mov	r3, r0
  143930:	e5901048 	ldr	r1, [r0, #72]	; 0x48
  143934:	e5900000 	ldr	r0, [r0]
  143938:	e2412001 	sub	r2, r1, #1
  14393c:	e1822001 	orr	r2, r2, r1
  143940:	e2101008 	ands	r1, r0, #8
  143944:	e5832048 	str	r2, [r3, #72]	; 0x48
  143948:	1a000009 	bne	143974 <__towrite+0x48>
  14394c:	e593c02c 	ldr	ip, [r3, #44]	; 0x2c
  143950:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  143954:	e1a00001 	mov	r0, r1
  143958:	e08c2002 	add	r2, ip, r2
  14395c:	e5831008 	str	r1, [r3, #8]
  143960:	e5831004 	str	r1, [r3, #4]
  143964:	e583c01c 	str	ip, [r3, #28]
  143968:	e583c014 	str	ip, [r3, #20]
  14396c:	e5832010 	str	r2, [r3, #16]
  143970:	e12fff1e 	bx	lr
  143974:	e3800020 	orr	r0, r0, #32
  143978:	e5830000 	str	r0, [r3]
  14397c:	e3e00000 	mvn	r0, #0
  143980:	e12fff1e 	bx	lr

00143984 <__towrite_needs_stdio_exit>:
  143984:	ea000336 	b	144664 <__stdio_exit>

00143988 <locking_putc>:
  143988:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  14398c:	e1a05001 	mov	r5, r1
  143990:	e1a04000 	mov	r4, r0
  143994:	e59f7110 	ldr	r7, [pc, #272]	; 143aac <locking_putc+0x124>
  143998:	e281604c 	add	r6, r1, #76	; 0x4c
  14399c:	ea000002 	b	1439ac <locking_putc+0x24>
  1439a0:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  1439a4:	e3530000 	cmp	r3, #0
  1439a8:	1a000021 	bne	143a34 <locking_putc+0xac>
  1439ac:	e3a00000 	mov	r0, #0
  1439b0:	e3e01103 	mvn	r1, #-1073741824	; 0xc0000000
  1439b4:	e1a02006 	mov	r2, r6
  1439b8:	e5973000 	ldr	r3, [r7]
  1439bc:	e12fff33 	blx	r3
  1439c0:	e3500000 	cmp	r0, #0
  1439c4:	1afffff5 	bne	1439a0 <locking_putc+0x18>
  1439c8:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  1439cc:	e20480ff 	and	r8, r4, #255	; 0xff
  1439d0:	e1530008 	cmp	r3, r8
  1439d4:	0a00001c 	beq	143a4c <locking_putc+0xc4>
  1439d8:	e5953014 	ldr	r3, [r5, #20]
  1439dc:	e5952010 	ldr	r2, [r5, #16]
  1439e0:	e1530002 	cmp	r3, r2
  1439e4:	0a000018 	beq	143a4c <locking_putc+0xc4>
  1439e8:	e2832001 	add	r2, r3, #1
  1439ec:	e5852014 	str	r2, [r5, #20]
  1439f0:	e5c34000 	strb	r4, [r3]
  1439f4:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  1439f8:	ea000002 	b	143a08 <locking_putc+0x80>
  1439fc:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  143a00:	e1540003 	cmp	r4, r3
  143a04:	1afffffa 	bne	1439f4 <locking_putc+0x6c>
  143a08:	e1a00004 	mov	r0, r4
  143a0c:	e3a01000 	mov	r1, #0
  143a10:	e1a02006 	mov	r2, r6
  143a14:	e5973000 	ldr	r3, [r7]
  143a18:	e12fff33 	blx	r3
  143a1c:	e1500001 	cmp	r0, r1
  143a20:	1afffff5 	bne	1439fc <locking_putc+0x74>
  143a24:	e3140101 	tst	r4, #1073741824	; 0x40000000
  143a28:	1a00000c 	bne	143a60 <locking_putc+0xd8>
  143a2c:	e1a00008 	mov	r0, r8
  143a30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  143a34:	e1a00005 	mov	r0, r5
  143a38:	ebfffe9d 	bl	1434b4 <__lockfile>
  143a3c:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  143a40:	e20480ff 	and	r8, r4, #255	; 0xff
  143a44:	e1530008 	cmp	r3, r8
  143a48:	1affffe2 	bne	1439d8 <locking_putc+0x50>
  143a4c:	e1a01008 	mov	r1, r8
  143a50:	e1a00005 	mov	r0, r5
  143a54:	ebffff09 	bl	143680 <__overflow>
  143a58:	e1a08000 	mov	r8, r0
  143a5c:	eaffffe4 	b	1439f4 <locking_putc+0x6c>
  143a60:	e3a000f0 	mov	r0, #240	; 0xf0
  143a64:	ebffe243 	bl	13c378 <get_rtt_syscall>
  143a68:	e2503000 	subs	r3, r0, #0
  143a6c:	0affffee 	beq	143a2c <locking_putc+0xa4>
  143a70:	e3a02001 	mov	r2, #1
  143a74:	e3a01081 	mov	r1, #129	; 0x81
  143a78:	e1a00006 	mov	r0, r6
  143a7c:	e12fff33 	blx	r3
  143a80:	e3700026 	cmn	r0, #38	; 0x26
  143a84:	1affffe8 	bne	143a2c <locking_putc+0xa4>
  143a88:	e3a000f0 	mov	r0, #240	; 0xf0
  143a8c:	ebffe239 	bl	13c378 <get_rtt_syscall>
  143a90:	e2503000 	subs	r3, r0, #0
  143a94:	0affffe4 	beq	143a2c <locking_putc+0xa4>
  143a98:	e3a02001 	mov	r2, #1
  143a9c:	e1a00006 	mov	r0, r6
  143aa0:	e1a01002 	mov	r1, r2
  143aa4:	e12fff33 	blx	r3
  143aa8:	eaffffdf 	b	143a2c <locking_putc+0xa4>
  143aac:	0014d3d8 	.word	0x0014d3d8

00143ab0 <fputc>:
  143ab0:	e591204c 	ldr	r2, [r1, #76]	; 0x4c
  143ab4:	e1a03001 	mov	r3, r1
  143ab8:	e3520000 	cmp	r2, #0
  143abc:	e1a0c000 	mov	ip, r0
  143ac0:	ba00001d 	blt	143b3c <fputc+0x8c>
  143ac4:	0a000017 	beq	143b28 <fputc+0x78>
  143ac8:	e59f10a8 	ldr	r1, [pc, #168]	; 143b78 <fputc+0xc8>
  143acc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  143ad0:	e5910000 	ldr	r0, [r1]
  143ad4:	e12fff30 	blx	r0
  143ad8:	e510105c 	ldr	r1, [r0, #-92]	; 0xffffffa4
  143adc:	e3c22101 	bic	r2, r2, #1073741824	; 0x40000000
  143ae0:	e1520001 	cmp	r2, r1
  143ae4:	0a000003 	beq	143af8 <fputc+0x48>
  143ae8:	e1a01003 	mov	r1, r3
  143aec:	e1a0000c 	mov	r0, ip
  143af0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  143af4:	eaffffa3 	b	143988 <locking_putc>
  143af8:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  143afc:	e20c00ff 	and	r0, ip, #255	; 0xff
  143b00:	e1500002 	cmp	r0, r2
  143b04:	0a000008 	beq	143b2c <fputc+0x7c>
  143b08:	e5932014 	ldr	r2, [r3, #20]
  143b0c:	e5931010 	ldr	r1, [r3, #16]
  143b10:	e1520001 	cmp	r2, r1
  143b14:	0a000004 	beq	143b2c <fputc+0x7c>
  143b18:	e2821001 	add	r1, r2, #1
  143b1c:	e5831014 	str	r1, [r3, #20]
  143b20:	e5c2c000 	strb	ip, [r2]
  143b24:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  143b28:	eaffff96 	b	143988 <locking_putc>
  143b2c:	e1a01000 	mov	r1, r0
  143b30:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  143b34:	e1a00003 	mov	r0, r3
  143b38:	eafffed0 	b	143680 <__overflow>
  143b3c:	e5912050 	ldr	r2, [r1, #80]	; 0x50
  143b40:	e20000ff 	and	r0, r0, #255	; 0xff
  143b44:	e1500002 	cmp	r0, r2
  143b48:	0a000007 	beq	143b6c <fputc+0xbc>
  143b4c:	e5912014 	ldr	r2, [r1, #20]
  143b50:	e5911010 	ldr	r1, [r1, #16]
  143b54:	e1520001 	cmp	r2, r1
  143b58:	0a000003 	beq	143b6c <fputc+0xbc>
  143b5c:	e2821001 	add	r1, r2, #1
  143b60:	e5831014 	str	r1, [r3, #20]
  143b64:	e5c2c000 	strb	ip, [r2]
  143b68:	e12fff1e 	bx	lr
  143b6c:	e1a01000 	mov	r1, r0
  143b70:	e1a00003 	mov	r0, r3
  143b74:	eafffec1 	b	143680 <__overflow>
  143b78:	0014d3dc 	.word	0x0014d3dc

00143b7c <fputs>:
  143b7c:	e92d4070 	push	{r4, r5, r6, lr}
  143b80:	e1a06001 	mov	r6, r1
  143b84:	e1a05000 	mov	r5, r0
  143b88:	ebfff63c 	bl	141480 <strlen>
  143b8c:	e1a03006 	mov	r3, r6
  143b90:	e1a04000 	mov	r4, r0
  143b94:	e1a02000 	mov	r2, r0
  143b98:	e3a01001 	mov	r1, #1
  143b9c:	e1a00005 	mov	r0, r5
  143ba0:	eb000041 	bl	143cac <fwrite>
  143ba4:	e0500004 	subs	r0, r0, r4
  143ba8:	13e00000 	mvnne	r0, #0
  143bac:	e8bd8070 	pop	{r4, r5, r6, pc}

00143bb0 <__fwritex>:
  143bb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  143bb4:	e5924010 	ldr	r4, [r2, #16]
  143bb8:	e1a05002 	mov	r5, r2
  143bbc:	e3540000 	cmp	r4, #0
  143bc0:	e1a06000 	mov	r6, r0
  143bc4:	e1a07001 	mov	r7, r1
  143bc8:	0a000009 	beq	143bf4 <__fwritex+0x44>
  143bcc:	e5950014 	ldr	r0, [r5, #20]
  143bd0:	e0444000 	sub	r4, r4, r0
  143bd4:	e1540007 	cmp	r4, r7
  143bd8:	2a00000b 	bcs	143c0c <__fwritex+0x5c>
  143bdc:	e1a02007 	mov	r2, r7
  143be0:	e1a01006 	mov	r1, r6
  143be4:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  143be8:	e1a00005 	mov	r0, r5
  143bec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  143bf0:	e12fff13 	bx	r3
  143bf4:	e1a00002 	mov	r0, r2
  143bf8:	ebffff4b 	bl	14392c <__towrite>
  143bfc:	e3500000 	cmp	r0, #0
  143c00:	1a000027 	bne	143ca4 <__fwritex+0xf4>
  143c04:	e5954010 	ldr	r4, [r5, #16]
  143c08:	eaffffef 	b	143bcc <__fwritex+0x1c>
  143c0c:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  143c10:	e3530000 	cmp	r3, #0
  143c14:	ba00000d 	blt	143c50 <__fwritex+0xa0>
  143c18:	e3570000 	cmp	r7, #0
  143c1c:	0a00000b 	beq	143c50 <__fwritex+0xa0>
  143c20:	e2473001 	sub	r3, r7, #1
  143c24:	e7d62003 	ldrb	r2, [r6, r3]
  143c28:	e0863003 	add	r3, r6, r3
  143c2c:	e352000a 	cmp	r2, #10
  143c30:	1a000003 	bne	143c44 <__fwritex+0x94>
  143c34:	ea00000e 	b	143c74 <__fwritex+0xc4>
  143c38:	e5732001 	ldrb	r2, [r3, #-1]!
  143c3c:	e352000a 	cmp	r2, #10
  143c40:	0a00000c 	beq	143c78 <__fwritex+0xc8>
  143c44:	e1530006 	cmp	r3, r6
  143c48:	e0434006 	sub	r4, r3, r6
  143c4c:	1afffff9 	bne	143c38 <__fwritex+0x88>
  143c50:	e1a04007 	mov	r4, r7
  143c54:	e1a02004 	mov	r2, r4
  143c58:	e1a01006 	mov	r1, r6
  143c5c:	ebfff43e 	bl	140d5c <memcpy>
  143c60:	e5953014 	ldr	r3, [r5, #20]
  143c64:	e1a00007 	mov	r0, r7
  143c68:	e0834004 	add	r4, r3, r4
  143c6c:	e5854014 	str	r4, [r5, #20]
  143c70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  143c74:	e1a04007 	mov	r4, r7
  143c78:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  143c7c:	e1a02004 	mov	r2, r4
  143c80:	e1a01006 	mov	r1, r6
  143c84:	e1a00005 	mov	r0, r5
  143c88:	e12fff33 	blx	r3
  143c8c:	e1500004 	cmp	r0, r4
  143c90:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
  143c94:	e0866004 	add	r6, r6, r4
  143c98:	e5950014 	ldr	r0, [r5, #20]
  143c9c:	e0474004 	sub	r4, r7, r4
  143ca0:	eaffffeb 	b	143c54 <__fwritex+0xa4>
  143ca4:	e1a00004 	mov	r0, r4
  143ca8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00143cac <fwrite>:
  143cac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  143cb0:	e1a05003 	mov	r5, r3
  143cb4:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
  143cb8:	e3510000 	cmp	r1, #0
  143cbc:	e1a04002 	mov	r4, r2
  143cc0:	11a04002 	movne	r4, r2
  143cc4:	03a04000 	moveq	r4, #0
  143cc8:	e3530000 	cmp	r3, #0
  143ccc:	e1a06001 	mov	r6, r1
  143cd0:	e0070192 	mul	r7, r2, r1
  143cd4:	aa000009 	bge	143d00 <fwrite+0x54>
  143cd8:	e1a02005 	mov	r2, r5
  143cdc:	e1a01007 	mov	r1, r7
  143ce0:	ebffffb2 	bl	143bb0 <__fwritex>
  143ce4:	e1a08000 	mov	r8, r0
  143ce8:	e1570008 	cmp	r7, r8
  143cec:	0a000012 	beq	143d3c <fwrite+0x90>
  143cf0:	e1a01006 	mov	r1, r6
  143cf4:	e1a00008 	mov	r0, r8
  143cf8:	ebffd2cf 	bl	13883c <__udivsi3>
  143cfc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143d00:	e1a08000 	mov	r8, r0
  143d04:	e1a00005 	mov	r0, r5
  143d08:	ebfffde9 	bl	1434b4 <__lockfile>
  143d0c:	e1a02005 	mov	r2, r5
  143d10:	e1a09000 	mov	r9, r0
  143d14:	e1a01007 	mov	r1, r7
  143d18:	e1a00008 	mov	r0, r8
  143d1c:	ebffffa3 	bl	143bb0 <__fwritex>
  143d20:	e3590000 	cmp	r9, #0
  143d24:	e1a08000 	mov	r8, r0
  143d28:	0affffee 	beq	143ce8 <fwrite+0x3c>
  143d2c:	e1a00005 	mov	r0, r5
  143d30:	ebfffe2c 	bl	1435e8 <__unlockfile>
  143d34:	e1570008 	cmp	r7, r8
  143d38:	1affffec 	bne	143cf0 <fwrite+0x44>
  143d3c:	e1a00004 	mov	r0, r4
  143d40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00143d44 <memchr>:
  143d44:	e3100003 	tst	r0, #3
  143d48:	e20110ff 	and	r1, r1, #255	; 0xff
  143d4c:	0a000010 	beq	143d94 <memchr+0x50>
  143d50:	e3520000 	cmp	r2, #0
  143d54:	0a000031 	beq	143e20 <memchr+0xdc>
  143d58:	e5d03000 	ldrb	r3, [r0]
  143d5c:	e1530001 	cmp	r3, r1
  143d60:	0a00003e 	beq	143e60 <memchr+0x11c>
  143d64:	e2803001 	add	r3, r0, #1
  143d68:	ea000005 	b	143d84 <memchr+0x40>
  143d6c:	e3520000 	cmp	r2, #0
  143d70:	0a00002a 	beq	143e20 <memchr+0xdc>
  143d74:	e5d3c000 	ldrb	ip, [r3]
  143d78:	e2833001 	add	r3, r3, #1
  143d7c:	e15c0001 	cmp	ip, r1
  143d80:	0a000036 	beq	143e60 <memchr+0x11c>
  143d84:	e3130003 	tst	r3, #3
  143d88:	e2422001 	sub	r2, r2, #1
  143d8c:	e1a00003 	mov	r0, r3
  143d90:	1afffff5 	bne	143d6c <memchr+0x28>
  143d94:	e3520000 	cmp	r2, #0
  143d98:	0a000020 	beq	143e20 <memchr+0xdc>
  143d9c:	e5d03000 	ldrb	r3, [r0]
  143da0:	e1530001 	cmp	r3, r1
  143da4:	0a00002d 	beq	143e60 <memchr+0x11c>
  143da8:	e92d4070 	push	{r4, r5, r6, lr}
  143dac:	e3520003 	cmp	r2, #3
  143db0:	e0814401 	add	r4, r1, r1, lsl #8
  143db4:	e0844804 	add	r4, r4, r4, lsl #16
  143db8:	9a00001d 	bls	143e34 <memchr+0xf0>
  143dbc:	e5903000 	ldr	r3, [r0]
  143dc0:	e59f60cc 	ldr	r6, [pc, #204]	; 143e94 <memchr+0x150>
  143dc4:	e0233004 	eor	r3, r3, r4
  143dc8:	e083c006 	add	ip, r3, r6
  143dcc:	e59f50c4 	ldr	r5, [pc, #196]	; 143e98 <memchr+0x154>
  143dd0:	e1cc3003 	bic	r3, ip, r3
  143dd4:	e1130005 	tst	r3, r5
  143dd8:	1a000015 	bne	143e34 <memchr+0xf0>
  143ddc:	e280e004 	add	lr, r0, #4
  143de0:	ea000006 	b	143e00 <memchr+0xbc>
  143de4:	e59e3000 	ldr	r3, [lr]
  143de8:	e28ee004 	add	lr, lr, #4
  143dec:	e0233004 	eor	r3, r3, r4
  143df0:	e083c006 	add	ip, r3, r6
  143df4:	e1cc3003 	bic	r3, ip, r3
  143df8:	e1130005 	tst	r3, r5
  143dfc:	1a000009 	bne	143e28 <memchr+0xe4>
  143e00:	e2422004 	sub	r2, r2, #4
  143e04:	e3520003 	cmp	r2, #3
  143e08:	e1a0000e 	mov	r0, lr
  143e0c:	8afffff4 	bhi	143de4 <memchr+0xa0>
  143e10:	e3520000 	cmp	r2, #0
  143e14:	1a000003 	bne	143e28 <memchr+0xe4>
  143e18:	e3a00000 	mov	r0, #0
  143e1c:	e8bd8070 	pop	{r4, r5, r6, pc}
  143e20:	e3a00000 	mov	r0, #0
  143e24:	e12fff1e 	bx	lr
  143e28:	e5d03000 	ldrb	r3, [r0]
  143e2c:	e1510003 	cmp	r1, r3
  143e30:	08bd8070 	popeq	{r4, r5, r6, pc}
  143e34:	e0802002 	add	r2, r0, r2
  143e38:	e2803001 	add	r3, r0, #1
  143e3c:	ea000003 	b	143e50 <memchr+0x10c>
  143e40:	e5d3c000 	ldrb	ip, [r3]
  143e44:	e2833001 	add	r3, r3, #1
  143e48:	e15c0001 	cmp	ip, r1
  143e4c:	08bd8070 	popeq	{r4, r5, r6, pc}
  143e50:	e1520003 	cmp	r2, r3
  143e54:	e1a00003 	mov	r0, r3
  143e58:	1afffff8 	bne	143e40 <memchr+0xfc>
  143e5c:	eaffffed 	b	143e18 <memchr+0xd4>
  143e60:	e5d03000 	ldrb	r3, [r0]
  143e64:	e1510003 	cmp	r1, r3
  143e68:	012fff1e 	bxeq	lr
  143e6c:	e0802002 	add	r2, r0, r2
  143e70:	e2803001 	add	r3, r0, #1
  143e74:	e1520003 	cmp	r2, r3
  143e78:	e1a00003 	mov	r0, r3
  143e7c:	0affffe7 	beq	143e20 <memchr+0xdc>
  143e80:	e5d3c000 	ldrb	ip, [r3]
  143e84:	e2833001 	add	r3, r3, #1
  143e88:	e15c0001 	cmp	ip, r1
  143e8c:	1afffff8 	bne	143e74 <memchr+0x130>
  143e90:	e12fff1e 	bx	lr
  143e94:	fefefeff 	.word	0xfefefeff
  143e98:	80808080 	.word	0x80808080

00143e9c <__stpcpy>:
  143e9c:	e0203001 	eor	r3, r0, r1
  143ea0:	e3130003 	tst	r3, #3
  143ea4:	e92d4010 	push	{r4, lr}
  143ea8:	1a00001f 	bne	143f2c <__stpcpy+0x90>
  143eac:	e3110003 	tst	r1, #3
  143eb0:	0a00000e 	beq	143ef0 <__stpcpy+0x54>
  143eb4:	e5d13000 	ldrb	r3, [r1]
  143eb8:	e3530000 	cmp	r3, #0
  143ebc:	e5c03000 	strb	r3, [r0]
  143ec0:	08bd8010 	popeq	{r4, pc}
  143ec4:	e2813001 	add	r3, r1, #1
  143ec8:	e2802001 	add	r2, r0, #1
  143ecc:	ea000003 	b	143ee0 <__stpcpy+0x44>
  143ed0:	e4d31001 	ldrb	r1, [r3], #1
  143ed4:	e3510000 	cmp	r1, #0
  143ed8:	e4c21001 	strb	r1, [r2], #1
  143edc:	08bd8010 	popeq	{r4, pc}
  143ee0:	e3130003 	tst	r3, #3
  143ee4:	e1a01003 	mov	r1, r3
  143ee8:	e1a00002 	mov	r0, r2
  143eec:	1afffff7 	bne	143ed0 <__stpcpy+0x34>
  143ef0:	e5913000 	ldr	r3, [r1]
  143ef4:	e59f405c 	ldr	r4, [pc, #92]	; 143f58 <__stpcpy+0xbc>
  143ef8:	e59fe05c 	ldr	lr, [pc, #92]	; 143f5c <__stpcpy+0xc0>
  143efc:	e0832004 	add	r2, r3, r4
  143f00:	e1c22003 	bic	r2, r2, r3
  143f04:	e112000e 	tst	r2, lr
  143f08:	1a000007 	bne	143f2c <__stpcpy+0x90>
  143f0c:	e281c004 	add	ip, r1, #4
  143f10:	e4803004 	str	r3, [r0], #4
  143f14:	e1a0100c 	mov	r1, ip
  143f18:	e49c3004 	ldr	r3, [ip], #4
  143f1c:	e0832004 	add	r2, r3, r4
  143f20:	e1c22003 	bic	r2, r2, r3
  143f24:	e112000e 	tst	r2, lr
  143f28:	0afffff8 	beq	143f10 <__stpcpy+0x74>
  143f2c:	e5d13000 	ldrb	r3, [r1]
  143f30:	e3530000 	cmp	r3, #0
  143f34:	e5c03000 	strb	r3, [r0]
  143f38:	08bd8010 	popeq	{r4, pc}
  143f3c:	e2803001 	add	r3, r0, #1
  143f40:	e5f12001 	ldrb	r2, [r1, #1]!
  143f44:	e1a00003 	mov	r0, r3
  143f48:	e3520000 	cmp	r2, #0
  143f4c:	e4c32001 	strb	r2, [r3], #1
  143f50:	1afffffa 	bne	143f40 <__stpcpy+0xa4>
  143f54:	e8bd8010 	pop	{r4, pc}
  143f58:	fefefeff 	.word	0xfefefeff
  143f5c:	80808080 	.word	0x80808080

00143f60 <__stpncpy>:
  143f60:	e0203001 	eor	r3, r0, r1
  143f64:	e3130003 	tst	r3, #3
  143f68:	e92d4070 	push	{r4, r5, r6, lr}
  143f6c:	1a000030 	bne	144034 <__stpncpy+0xd4>
  143f70:	e3110003 	tst	r1, #3
  143f74:	0a000044 	beq	14408c <__stpncpy+0x12c>
  143f78:	e3520000 	cmp	r2, #0
  143f7c:	0a000040 	beq	144084 <__stpncpy+0x124>
  143f80:	e5d13000 	ldrb	r3, [r1]
  143f84:	e3530000 	cmp	r3, #0
  143f88:	e5c03000 	strb	r3, [r0]
  143f8c:	0a00003c 	beq	144084 <__stpncpy+0x124>
  143f90:	e2813001 	add	r3, r1, #1
  143f94:	e2800001 	add	r0, r0, #1
  143f98:	ea000005 	b	143fb4 <__stpncpy+0x54>
  143f9c:	e3520000 	cmp	r2, #0
  143fa0:	0a000032 	beq	144070 <__stpncpy+0x110>
  143fa4:	e4d31001 	ldrb	r1, [r3], #1
  143fa8:	e3510000 	cmp	r1, #0
  143fac:	e4c01001 	strb	r1, [r0], #1
  143fb0:	0a00002e 	beq	144070 <__stpncpy+0x110>
  143fb4:	e3130003 	tst	r3, #3
  143fb8:	e2422001 	sub	r2, r2, #1
  143fbc:	e1a01003 	mov	r1, r3
  143fc0:	e1a04000 	mov	r4, r0
  143fc4:	1afffff4 	bne	143f9c <__stpncpy+0x3c>
  143fc8:	e3520000 	cmp	r2, #0
  143fcc:	0a000027 	beq	144070 <__stpncpy+0x110>
  143fd0:	e5d1c000 	ldrb	ip, [r1]
  143fd4:	e35c0000 	cmp	ip, #0
  143fd8:	0a000024 	beq	144070 <__stpncpy+0x110>
  143fdc:	e3520003 	cmp	r2, #3
  143fe0:	9a00002b 	bls	144094 <__stpncpy+0x134>
  143fe4:	e5913000 	ldr	r3, [r1]
  143fe8:	e59f60b0 	ldr	r6, [pc, #176]	; 1440a0 <__stpncpy+0x140>
  143fec:	e59f50b0 	ldr	r5, [pc, #176]	; 1440a4 <__stpncpy+0x144>
  143ff0:	e0830006 	add	r0, r3, r6
  143ff4:	e1c00003 	bic	r0, r0, r3
  143ff8:	e1100005 	tst	r0, r5
  143ffc:	1a000024 	bne	144094 <__stpncpy+0x134>
  144000:	e281e004 	add	lr, r1, #4
  144004:	ea000004 	b	14401c <__stpncpy+0xbc>
  144008:	e49e3004 	ldr	r3, [lr], #4
  14400c:	e083c006 	add	ip, r3, r6
  144010:	e1ccc003 	bic	ip, ip, r3
  144014:	e11c0005 	tst	ip, r5
  144018:	1a000007 	bne	14403c <__stpncpy+0xdc>
  14401c:	e2422004 	sub	r2, r2, #4
  144020:	e4843004 	str	r3, [r4], #4
  144024:	e3520003 	cmp	r2, #3
  144028:	e1a00004 	mov	r0, r4
  14402c:	e1a0100e 	mov	r1, lr
  144030:	8afffff4 	bhi	144008 <__stpncpy+0xa8>
  144034:	e3520000 	cmp	r2, #0
  144038:	0a000011 	beq	144084 <__stpncpy+0x124>
  14403c:	e5d13000 	ldrb	r3, [r1]
  144040:	e3530000 	cmp	r3, #0
  144044:	e5c03000 	strb	r3, [r0]
  144048:	0a00000d 	beq	144084 <__stpncpy+0x124>
  14404c:	e2800001 	add	r0, r0, #1
  144050:	ea000003 	b	144064 <__stpncpy+0x104>
  144054:	e5f13001 	ldrb	r3, [r1, #1]!
  144058:	e3530000 	cmp	r3, #0
  14405c:	e4c03001 	strb	r3, [r0], #1
  144060:	0a000002 	beq	144070 <__stpncpy+0x110>
  144064:	e2522001 	subs	r2, r2, #1
  144068:	e1a04000 	mov	r4, r0
  14406c:	1afffff8 	bne	144054 <__stpncpy+0xf4>
  144070:	e3a01000 	mov	r1, #0
  144074:	e1a00004 	mov	r0, r4
  144078:	ebfff46f 	bl	14123c <memset>
  14407c:	e1a00004 	mov	r0, r4
  144080:	e8bd8070 	pop	{r4, r5, r6, pc}
  144084:	e1a04000 	mov	r4, r0
  144088:	eafffff8 	b	144070 <__stpncpy+0x110>
  14408c:	e1a04000 	mov	r4, r0
  144090:	eaffffcc 	b	143fc8 <__stpncpy+0x68>
  144094:	e5c4c000 	strb	ip, [r4]
  144098:	e1a00004 	mov	r0, r4
  14409c:	eaffffea 	b	14404c <__stpncpy+0xec>
  1440a0:	fefefeff 	.word	0xfefefeff
  1440a4:	80808080 	.word	0x80808080

001440a8 <strchr>:
  1440a8:	e92d4010 	push	{r4, lr}
  1440ac:	e1a04001 	mov	r4, r1
  1440b0:	eb000004 	bl	1440c8 <__strchrnul>
  1440b4:	e5d03000 	ldrb	r3, [r0]
  1440b8:	e20440ff 	and	r4, r4, #255	; 0xff
  1440bc:	e1540003 	cmp	r4, r3
  1440c0:	13a00000 	movne	r0, #0
  1440c4:	e8bd8010 	pop	{r4, pc}

001440c8 <__strchrnul>:
  1440c8:	e20110ff 	and	r1, r1, #255	; 0xff
  1440cc:	e3510000 	cmp	r1, #0
  1440d0:	e92d4070 	push	{r4, r5, r6, lr}
  1440d4:	e1a04000 	mov	r4, r0
  1440d8:	0a000031 	beq	1441a4 <__strchrnul+0xdc>
  1440dc:	e3100003 	tst	r0, #3
  1440e0:	0a00000e 	beq	144120 <__strchrnul+0x58>
  1440e4:	e5d02000 	ldrb	r2, [r0]
  1440e8:	e3520000 	cmp	r2, #0
  1440ec:	0a00002f 	beq	1441b0 <__strchrnul+0xe8>
  1440f0:	e1510002 	cmp	r1, r2
  1440f4:	0a00002d 	beq	1441b0 <__strchrnul+0xe8>
  1440f8:	e2803001 	add	r3, r0, #1
  1440fc:	ea000004 	b	144114 <__strchrnul+0x4c>
  144100:	e4d32001 	ldrb	r2, [r3], #1
  144104:	e3520000 	cmp	r2, #0
  144108:	08bd8070 	popeq	{r4, r5, r6, pc}
  14410c:	e1520001 	cmp	r2, r1
  144110:	08bd8070 	popeq	{r4, r5, r6, pc}
  144114:	e3130003 	tst	r3, #3
  144118:	e1a00003 	mov	r0, r3
  14411c:	1afffff7 	bne	144100 <__strchrnul+0x38>
  144120:	e590c000 	ldr	ip, [r0]
  144124:	e0815401 	add	r5, r1, r1, lsl #8
  144128:	e59f4088 	ldr	r4, [pc, #136]	; 1441b8 <__strchrnul+0xf0>
  14412c:	e0855805 	add	r5, r5, r5, lsl #16
  144130:	e025e00c 	eor	lr, r5, ip
  144134:	e08e2004 	add	r2, lr, r4
  144138:	e08c3004 	add	r3, ip, r4
  14413c:	e1c2200e 	bic	r2, r2, lr
  144140:	e1c3300c 	bic	r3, r3, ip
  144144:	e59f6070 	ldr	r6, [pc, #112]	; 1441bc <__strchrnul+0xf4>
  144148:	e1833002 	orr	r3, r3, r2
  14414c:	e1130006 	tst	r3, r6
  144150:	1a000008 	bne	144178 <__strchrnul+0xb0>
  144154:	e5b0c004 	ldr	ip, [r0, #4]!
  144158:	e02ce005 	eor	lr, ip, r5
  14415c:	e08e2004 	add	r2, lr, r4
  144160:	e08c3004 	add	r3, ip, r4
  144164:	e1c2200e 	bic	r2, r2, lr
  144168:	e1c3300c 	bic	r3, r3, ip
  14416c:	e1833002 	orr	r3, r3, r2
  144170:	e1130006 	tst	r3, r6
  144174:	0afffff6 	beq	144154 <__strchrnul+0x8c>
  144178:	e5d03000 	ldrb	r3, [r0]
  14417c:	e3530000 	cmp	r3, #0
  144180:	08bd8070 	popeq	{r4, r5, r6, pc}
  144184:	e1510003 	cmp	r1, r3
  144188:	08bd8070 	popeq	{r4, r5, r6, pc}
  14418c:	e5f03001 	ldrb	r3, [r0, #1]!
  144190:	e3530000 	cmp	r3, #0
  144194:	08bd8070 	popeq	{r4, r5, r6, pc}
  144198:	e1530001 	cmp	r3, r1
  14419c:	1afffffa 	bne	14418c <__strchrnul+0xc4>
  1441a0:	e8bd8070 	pop	{r4, r5, r6, pc}
  1441a4:	ebfff4b5 	bl	141480 <strlen>
  1441a8:	e0840000 	add	r0, r4, r0
  1441ac:	e8bd8070 	pop	{r4, r5, r6, pc}
  1441b0:	e1a00004 	mov	r0, r4
  1441b4:	e8bd8070 	pop	{r4, r5, r6, pc}
  1441b8:	fefefeff 	.word	0xfefefeff
  1441bc:	80808080 	.word	0x80808080

001441c0 <__set_thread_area>:
  1441c0:	e59f3108 	ldr	r3, [pc, #264]	; 1442d0 <__set_thread_area+0x110>
  1441c4:	e92d4010 	push	{r4, lr}
  1441c8:	e5933000 	ldr	r3, [r3]
  1441cc:	e1a04000 	mov	r4, r0
  1441d0:	e3130902 	tst	r3, #32768	; 0x8000
  1441d4:	0a000017 	beq	144238 <__set_thread_area+0x78>
  1441d8:	e59f20f4 	ldr	r2, [pc, #244]	; 1442d4 <__set_thread_area+0x114>
  1441dc:	e59f10f4 	ldr	r1, [pc, #244]	; 1442d8 <__set_thread_area+0x118>
  1441e0:	e59f00f4 	ldr	r0, [pc, #244]	; 1442dc <__set_thread_area+0x11c>
  1441e4:	e59fc0f4 	ldr	ip, [pc, #244]	; 1442e0 <__set_thread_area+0x120>
  1441e8:	e59f30f4 	ldr	r3, [pc, #244]	; 1442e4 <__set_thread_area+0x124>
  1441ec:	e5922010 	ldr	r2, [r2, #16]
  1441f0:	e580c000 	str	ip, [r0]
  1441f4:	e5831000 	str	r1, [r3]
  1441f8:	e5921000 	ldr	r1, [r2]
  1441fc:	e3510000 	cmp	r1, #0
  144200:	0a000005 	beq	14421c <__set_thread_area+0x5c>
  144204:	e351000f 	cmp	r1, #15
  144208:	1a00001b 	bne	14427c <__set_thread_area+0xbc>
  14420c:	e5922004 	ldr	r2, [r2, #4]
  144210:	e5d21000 	ldrb	r1, [r2]
  144214:	e3510076 	cmp	r1, #118	; 0x76
  144218:	0a000021 	beq	1442a4 <__set_thread_area+0xe4>
  14421c:	e59f00c4 	ldr	r0, [pc, #196]	; 1442e8 <__set_thread_area+0x128>
  144220:	ebffe054 	bl	13c378 <get_rtt_syscall>
  144224:	e2503000 	subs	r3, r0, #0
  144228:	08bd8010 	popeq	{r4, pc}
  14422c:	e1a00004 	mov	r0, r4
  144230:	e8bd4010 	pop	{r4, lr}
  144234:	e12fff13 	bx	r3
  144238:	e3e03a0f 	mvn	r3, #61440	; 0xf000
  14423c:	e59f10a8 	ldr	r1, [pc, #168]	; 1442ec <__set_thread_area+0x12c>
  144240:	e5132003 	ldr	r2, [r3, #-3]
  144244:	e59f30a4 	ldr	r3, [pc, #164]	; 1442f0 <__set_thread_area+0x130>
  144248:	e59f008c 	ldr	r0, [pc, #140]	; 1442dc <__set_thread_area+0x11c>
  14424c:	e5831000 	str	r1, [r3]
  144250:	e59fc09c 	ldr	ip, [pc, #156]	; 1442f4 <__set_thread_area+0x134>
  144254:	e59f3088 	ldr	r3, [pc, #136]	; 1442e4 <__set_thread_area+0x124>
  144258:	e2411040 	sub	r1, r1, #64	; 0x40
  14425c:	e3520001 	cmp	r2, #1
  144260:	e580c000 	str	ip, [r0]
  144264:	e5831000 	str	r1, [r3]
  144268:	da000009 	ble	144294 <__set_thread_area+0xd4>
  14426c:	e3520002 	cmp	r2, #2
  144270:	059f2080 	ldreq	r2, [pc, #128]	; 1442f8 <__set_thread_area+0x138>
  144274:	05832000 	streq	r2, [r3]
  144278:	eaffffe7 	b	14421c <__set_thread_area+0x5c>
  14427c:	e5b21008 	ldr	r1, [r2, #8]!
  144280:	e3510000 	cmp	r1, #0
  144284:	0affffe4 	beq	14421c <__set_thread_area+0x5c>
  144288:	e351000f 	cmp	r1, #15
  14428c:	0affffde 	beq	14420c <__set_thread_area+0x4c>
  144290:	eafffff9 	b	14427c <__set_thread_area+0xbc>
  144294:	e7f000f0 	.word	0xe7f000f0
  144298:	e59f2058 	ldr	r2, [pc, #88]	; 1442f8 <__set_thread_area+0x138>
  14429c:	e5832000 	str	r2, [r3]
  1442a0:	eaffffdd 	b	14421c <__set_thread_area+0x5c>
  1442a4:	e5d21001 	ldrb	r1, [r2, #1]
  1442a8:	e3510036 	cmp	r1, #54	; 0x36
  1442ac:	1affffda 	bne	14421c <__set_thread_area+0x5c>
  1442b0:	e5d22002 	ldrb	r2, [r2, #2]
  1442b4:	e2422030 	sub	r2, r2, #48	; 0x30
  1442b8:	e3520009 	cmp	r2, #9
  1442bc:	859f1038 	ldrhi	r1, [pc, #56]	; 1442fc <__set_thread_area+0x13c>
  1442c0:	859f2038 	ldrhi	r2, [pc, #56]	; 144300 <__set_thread_area+0x140>
  1442c4:	85801000 	strhi	r1, [r0]
  1442c8:	85832000 	strhi	r2, [r3]
  1442cc:	eaffffd2 	b	14421c <__set_thread_area+0x5c>
  1442d0:	0015d088 	.word	0x0015d088
  1442d4:	0015d08c 	.word	0x0015d08c
  1442d8:	00141e98 	.word	0x00141e98
  1442dc:	0014d3d8 	.word	0x0014d3d8
  1442e0:	00141ed8 	.word	0x00141ed8
  1442e4:	0014d3d4 	.word	0x0014d3d4
  1442e8:	000f0005 	.word	0x000f0005
  1442ec:	ffff0fe0 	.word	0xffff0fe0
  1442f0:	0014d3dc 	.word	0x0014d3dc
  1442f4:	ffff0fc0 	.word	0xffff0fc0
  1442f8:	00141e70 	.word	0x00141e70
  1442fc:	00141eb4 	.word	0x00141eb4
  144300:	00141e90 	.word	0x00141e90

00144304 <__unmapself>:
  144304:	e3a07036 	mov	r7, #54	; 0x36
  144308:	ef000000 	svc	0x00000000
  14430c:	e3a07001 	mov	r7, #1
  144310:	ef000000 	svc	0x00000000

00144314 <__clone>:
  144314:	e92d00f0 	push	{r4, r5, r6, r7}
  144318:	e3a07082 	mov	r7, #130	; 0x82
  14431c:	e1a06003 	mov	r6, r3
  144320:	e1a05000 	mov	r5, r0
  144324:	e1a00002 	mov	r0, r2
  144328:	e3c1100f 	bic	r1, r1, #15
  14432c:	e59d2010 	ldr	r2, [sp, #16]
  144330:	e59d3014 	ldr	r3, [sp, #20]
  144334:	e59d4018 	ldr	r4, [sp, #24]
  144338:	e92d007f 	push	{r0, r1, r2, r3, r4, r5, r6}
  14433c:	e1a0000d 	mov	r0, sp
  144340:	ef000000 	svc	0x00000000
  144344:	e1100000 	tst	r0, r0
  144348:	0a000002 	beq	144358 <__clone+0x44>
  14434c:	e28dd01c 	add	sp, sp, #28
  144350:	e8bd00f0 	pop	{r4, r5, r6, r7}
  144354:	e12fff1e 	bx	lr
  144358:	e1a00006 	mov	r0, r6
  14435c:	e3150001 	tst	r5, #1
  144360:	1a000003 	bne	144374 <__clone+0x60>
  144364:	e1a0e00f 	mov	lr, pc
  144368:	e1a0f005 	mov	pc, r5
  14436c:	e3a07001 	mov	r7, #1
  144370:	ef000000 	svc	0x00000000
  144374:	e1a0e00f 	mov	lr, pc
  144378:	e12fff15 	bx	r5
  14437c:	eafffffa 	b	14436c <__clone+0x58>

00144380 <__clock_gettime>:
  144380:	e92d4070 	push	{r4, r5, r6, lr}
  144384:	e1a04000 	mov	r4, r0
  144388:	e59f0074 	ldr	r0, [pc, #116]	; 144404 <__clock_gettime+0x84>
  14438c:	e1a05001 	mov	r5, r1
  144390:	ebffdff8 	bl	13c378 <get_rtt_syscall>
  144394:	e2503000 	subs	r3, r0, #0
  144398:	0a000017 	beq	1443fc <__clock_gettime+0x7c>
  14439c:	e1a01005 	mov	r1, r5
  1443a0:	e1a00004 	mov	r0, r4
  1443a4:	e12fff33 	blx	r3
  1443a8:	e3700026 	cmn	r0, #38	; 0x26
  1443ac:	0a000001 	beq	1443b8 <__clock_gettime+0x38>
  1443b0:	e8bd4070 	pop	{r4, r5, r6, lr}
  1443b4:	eaffe024 	b	13c44c <__syscall_ret>
  1443b8:	e3540000 	cmp	r4, #0
  1443bc:	13e00015 	mvnne	r0, #21
  1443c0:	1afffffa 	bne	1443b0 <__clock_gettime+0x30>
  1443c4:	e3a0004e 	mov	r0, #78	; 0x4e
  1443c8:	ebffdfea 	bl	13c378 <get_rtt_syscall>
  1443cc:	e2503000 	subs	r3, r0, #0
  1443d0:	0a000002 	beq	1443e0 <__clock_gettime+0x60>
  1443d4:	e1a01004 	mov	r1, r4
  1443d8:	e1a00005 	mov	r0, r5
  1443dc:	e12fff33 	blx	r3
  1443e0:	e5953008 	ldr	r3, [r5, #8]
  1443e4:	e3a00000 	mov	r0, #0
  1443e8:	e0632283 	rsb	r2, r3, r3, lsl #5
  1443ec:	e0833102 	add	r3, r3, r2, lsl #2
  1443f0:	e1a03183 	lsl	r3, r3, #3
  1443f4:	e5853008 	str	r3, [r5, #8]
  1443f8:	e8bd8070 	pop	{r4, r5, r6, pc}
  1443fc:	e1a00003 	mov	r0, r3
  144400:	eaffffea 	b	1443b0 <__clock_gettime+0x30>
  144404:	00000107 	.word	0x00000107

00144408 <frexp>:
  144408:	e59fc09c 	ldr	ip, [pc, #156]	; 1444ac <frexp+0xa4>
  14440c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  144410:	e01c6a21 	ands	r6, ip, r1, lsr #20
  144414:	e1a04000 	mov	r4, r0
  144418:	e1a05001 	mov	r5, r1
  14441c:	1a000009 	bne	144448 <frexp+0x40>
  144420:	e1a07002 	mov	r7, r2
  144424:	e3a03000 	mov	r3, #0
  144428:	e3a02000 	mov	r2, #0
  14442c:	eb0002e1 	bl	144fb8 <__aeabi_dcmpeq>
  144430:	e3500000 	cmp	r0, #0
  144434:	0a000011 	beq	144480 <frexp+0x78>
  144438:	e5876000 	str	r6, [r7]
  14443c:	e1a00004 	mov	r0, r4
  144440:	e1a01005 	mov	r1, r5
  144444:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  144448:	e156000c 	cmp	r6, ip
  14444c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  144450:	e3e00000 	mvn	r0, #0
  144454:	e0007004 	and	r7, r0, r4
  144458:	e3a04000 	mov	r4, #0
  14445c:	e59f104c 	ldr	r1, [pc, #76]	; 1444b0 <frexp+0xa8>
  144460:	e2463fff 	sub	r3, r6, #1020	; 0x3fc
  144464:	e0018005 	and	r8, r1, r5
  144468:	e59f5044 	ldr	r5, [pc, #68]	; 1444b4 <frexp+0xac>
  14446c:	e2433002 	sub	r3, r3, #2
  144470:	e5823000 	str	r3, [r2]
  144474:	e1870004 	orr	r0, r7, r4
  144478:	e1881005 	orr	r1, r8, r5
  14447c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  144480:	e59f3030 	ldr	r3, [pc, #48]	; 1444b8 <frexp+0xb0>
  144484:	e1a00004 	mov	r0, r4
  144488:	e1a01005 	mov	r1, r5
  14448c:	e3a02000 	mov	r2, #0
  144490:	eb00017a 	bl	144a80 <__aeabi_dmul>
  144494:	e1a02007 	mov	r2, r7
  144498:	ebffffda 	bl	144408 <frexp>
  14449c:	e5973000 	ldr	r3, [r7]
  1444a0:	e2433040 	sub	r3, r3, #64	; 0x40
  1444a4:	e5873000 	str	r3, [r7]
  1444a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1444ac:	000007ff 	.word	0x000007ff
  1444b0:	800fffff 	.word	0x800fffff
  1444b4:	3fe00000 	.word	0x3fe00000
  1444b8:	43f00000 	.word	0x43f00000

001444bc <wcrtomb>:
  1444bc:	e2502000 	subs	r2, r0, #0
  1444c0:	0a000025 	beq	14455c <wcrtomb+0xa0>
  1444c4:	e351007f 	cmp	r1, #127	; 0x7f
  1444c8:	9a000022 	bls	144558 <wcrtomb+0x9c>
  1444cc:	e59f0114 	ldr	r0, [pc, #276]	; 1445e8 <wcrtomb+0x12c>
  1444d0:	e92d4010 	push	{r4, lr}
  1444d4:	e5900000 	ldr	r0, [r0]
  1444d8:	e12fff30 	blx	r0
  1444dc:	e5100018 	ldr	r0, [r0, #-24]	; 0xffffffe8
  1444e0:	e1a03001 	mov	r3, r1
  1444e4:	e5900000 	ldr	r0, [r0]
  1444e8:	e1a0c002 	mov	ip, r2
  1444ec:	e3500000 	cmp	r0, #0
  1444f0:	0a000025 	beq	14458c <wcrtomb+0xd0>
  1444f4:	e3510b02 	cmp	r1, #2048	; 0x800
  1444f8:	3a00001a 	bcc	144568 <wcrtomb+0xac>
  1444fc:	e2412a0e 	sub	r2, r1, #57344	; 0xe000
  144500:	e3510b36 	cmp	r1, #55296	; 0xd800
  144504:	23520a02 	cmpcs	r2, #8192	; 0x2000
  144508:	3a00002a 	bcc	1445b8 <wcrtomb+0xfc>
  14450c:	e2412801 	sub	r2, r1, #65536	; 0x10000
  144510:	e3520601 	cmp	r2, #1048576	; 0x100000
  144514:	2a000022 	bcs	1445a4 <wcrtomb+0xe8>
  144518:	e3e0e00f 	mvn	lr, #15
  14451c:	e3e0207f 	mvn	r2, #127	; 0x7f
  144520:	e18ee923 	orr	lr, lr, r3, lsr #18
  144524:	e203303f 	and	r3, r3, #63	; 0x3f
  144528:	e1823003 	orr	r3, r2, r3
  14452c:	e5cc3003 	strb	r3, [ip, #3]
  144530:	e3a03004 	mov	r3, #4
  144534:	e1a00701 	lsl	r0, r1, #14
  144538:	e1a01a01 	lsl	r1, r1, #20
  14453c:	e1820d20 	orr	r0, r2, r0, lsr #26
  144540:	e1821d21 	orr	r1, r2, r1, lsr #26
  144544:	e5cce000 	strb	lr, [ip]
  144548:	e5cc0001 	strb	r0, [ip, #1]
  14454c:	e5cc1002 	strb	r1, [ip, #2]
  144550:	e1a00003 	mov	r0, r3
  144554:	e8bd8010 	pop	{r4, pc}
  144558:	e5c21000 	strb	r1, [r2]
  14455c:	e3a03001 	mov	r3, #1
  144560:	e1a00003 	mov	r0, r3
  144564:	e12fff1e 	bx	lr
  144568:	e201203f 	and	r2, r1, #63	; 0x3f
  14456c:	e1e02c82 	mvn	r2, r2, lsl #25
  144570:	e3e0103f 	mvn	r1, #63	; 0x3f
  144574:	e1e02ca2 	mvn	r2, r2, lsr #25
  144578:	e1813323 	orr	r3, r1, r3, lsr #6
  14457c:	e5cc3000 	strb	r3, [ip]
  144580:	e5cc2001 	strb	r2, [ip, #1]
  144584:	e3a03002 	mov	r3, #2
  144588:	eafffff0 	b	144550 <wcrtomb+0x94>
  14458c:	e2413cdf 	sub	r3, r1, #57088	; 0xdf00
  144590:	e2433080 	sub	r3, r3, #128	; 0x80
  144594:	e353007f 	cmp	r3, #127	; 0x7f
  144598:	95c21000 	strbls	r1, [r2]
  14459c:	93a03001 	movls	r3, #1
  1445a0:	9affffea 	bls	144550 <wcrtomb+0x94>
  1445a4:	ebffd23d 	bl	138ea0 <__errno_location>
  1445a8:	e3a02054 	mov	r2, #84	; 0x54
  1445ac:	e3e03000 	mvn	r3, #0
  1445b0:	e5802000 	str	r2, [r0]
  1445b4:	eaffffe5 	b	144550 <wcrtomb+0x94>
  1445b8:	e3e0207f 	mvn	r2, #127	; 0x7f
  1445bc:	e3e0001f 	mvn	r0, #31
  1445c0:	e203e03f 	and	lr, r3, #63	; 0x3f
  1445c4:	e1a01a01 	lsl	r1, r1, #20
  1445c8:	e1803623 	orr	r3, r0, r3, lsr #12
  1445cc:	e1821d21 	orr	r1, r2, r1, lsr #26
  1445d0:	e182200e 	orr	r2, r2, lr
  1445d4:	e5cc3000 	strb	r3, [ip]
  1445d8:	e5cc1001 	strb	r1, [ip, #1]
  1445dc:	e5cc2002 	strb	r2, [ip, #2]
  1445e0:	e3a03003 	mov	r3, #3
  1445e4:	eaffffd9 	b	144550 <wcrtomb+0x94>
  1445e8:	0014d3dc 	.word	0x0014d3dc

001445ec <close_file>:
  1445ec:	e92d4010 	push	{r4, lr}
  1445f0:	e2504000 	subs	r4, r0, #0
  1445f4:	e24dd008 	sub	sp, sp, #8
  1445f8:	0a000015 	beq	144654 <close_file+0x68>
  1445fc:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  144600:	e3530000 	cmp	r3, #0
  144604:	aa000014 	bge	14465c <close_file+0x70>
  144608:	e5942014 	ldr	r2, [r4, #20]
  14460c:	e594301c 	ldr	r3, [r4, #28]
  144610:	e1520003 	cmp	r2, r3
  144614:	0a000004 	beq	14462c <close_file+0x40>
  144618:	e3a02000 	mov	r2, #0
  14461c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  144620:	e1a01002 	mov	r1, r2
  144624:	e1a00004 	mov	r0, r4
  144628:	e12fff33 	blx	r3
  14462c:	e994000c 	ldmib	r4, {r2, r3}
  144630:	e1520003 	cmp	r2, r3
  144634:	0a000006 	beq	144654 <close_file+0x68>
  144638:	e3a01001 	mov	r1, #1
  14463c:	e0422003 	sub	r2, r2, r3
  144640:	e58d1000 	str	r1, [sp]
  144644:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  144648:	e1a00004 	mov	r0, r4
  14464c:	e1a03fc2 	asr	r3, r2, #31
  144650:	e12fff31 	blx	r1
  144654:	e28dd008 	add	sp, sp, #8
  144658:	e8bd8010 	pop	{r4, pc}
  14465c:	ebfffb94 	bl	1434b4 <__lockfile>
  144660:	eaffffe8 	b	144608 <close_file+0x1c>

00144664 <__stdio_exit>:
  144664:	e92d4010 	push	{r4, lr}
  144668:	ebffe771 	bl	13e434 <__ofl_lock>
  14466c:	e5904000 	ldr	r4, [r0]
  144670:	e3540000 	cmp	r4, #0
  144674:	0a000004 	beq	14468c <__stdio_exit+0x28>
  144678:	e1a00004 	mov	r0, r4
  14467c:	ebffffda 	bl	1445ec <close_file>
  144680:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  144684:	e3540000 	cmp	r4, #0
  144688:	1afffffa 	bne	144678 <__stdio_exit+0x14>
  14468c:	e59f3020 	ldr	r3, [pc, #32]	; 1446b4 <__stdio_exit+0x50>
  144690:	e5930000 	ldr	r0, [r3]
  144694:	ebffffd4 	bl	1445ec <close_file>
  144698:	e59f3018 	ldr	r3, [pc, #24]	; 1446b8 <__stdio_exit+0x54>
  14469c:	e5930000 	ldr	r0, [r3]
  1446a0:	ebffffd1 	bl	1445ec <close_file>
  1446a4:	e8bd4010 	pop	{r4, lr}
  1446a8:	e59f300c 	ldr	r3, [pc, #12]	; 1446bc <__stdio_exit+0x58>
  1446ac:	e5930000 	ldr	r0, [r3]
  1446b0:	eaffffcd 	b	1445ec <close_file>
  1446b4:	0014f490 	.word	0x0014f490
  1446b8:	0014d3d0 	.word	0x0014d3d0
  1446bc:	0014d338 	.word	0x0014d338

001446c0 <__aeabi_drsub>:
  1446c0:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
  1446c4:	ea000000 	b	1446cc <__adddf3>

001446c8 <__aeabi_dsub>:
  1446c8:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

001446cc <__adddf3>:
  1446cc:	e92d4030 	push	{r4, r5, lr}
  1446d0:	e1a04081 	lsl	r4, r1, #1
  1446d4:	e1a05083 	lsl	r5, r3, #1
  1446d8:	e1340005 	teq	r4, r5
  1446dc:	01300002 	teqeq	r0, r2
  1446e0:	1194c000 	orrsne	ip, r4, r0
  1446e4:	1195c002 	orrsne	ip, r5, r2
  1446e8:	11f0cac4 	mvnsne	ip, r4, asr #21
  1446ec:	11f0cac5 	mvnsne	ip, r5, asr #21
  1446f0:	0a000079 	beq	1448dc <__adddf3+0x210>
  1446f4:	e1a04aa4 	lsr	r4, r4, #21
  1446f8:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
  1446fc:	b2655000 	rsblt	r5, r5, #0
  144700:	da000006 	ble	144720 <__adddf3+0x54>
  144704:	e0844005 	add	r4, r4, r5
  144708:	e0202002 	eor	r2, r0, r2
  14470c:	e0213003 	eor	r3, r1, r3
  144710:	e0220000 	eor	r0, r2, r0
  144714:	e0231001 	eor	r1, r3, r1
  144718:	e0202002 	eor	r2, r0, r2
  14471c:	e0213003 	eor	r3, r1, r3
  144720:	e3550036 	cmp	r5, #54	; 0x36
  144724:	88bd8030 	pophi	{r4, r5, pc}
  144728:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  14472c:	e1a01601 	lsl	r1, r1, #12
  144730:	e3a0c601 	mov	ip, #1048576	; 0x100000
  144734:	e18c1621 	orr	r1, ip, r1, lsr #12
  144738:	0a000001 	beq	144744 <__adddf3+0x78>
  14473c:	e2700000 	rsbs	r0, r0, #0
  144740:	e2e11000 	rsc	r1, r1, #0
  144744:	e3130102 	tst	r3, #-2147483648	; 0x80000000
  144748:	e1a03603 	lsl	r3, r3, #12
  14474c:	e18c3623 	orr	r3, ip, r3, lsr #12
  144750:	0a000001 	beq	14475c <__adddf3+0x90>
  144754:	e2722000 	rsbs	r2, r2, #0
  144758:	e2e33000 	rsc	r3, r3, #0
  14475c:	e1340005 	teq	r4, r5
  144760:	0a000057 	beq	1448c4 <__adddf3+0x1f8>
  144764:	e2444001 	sub	r4, r4, #1
  144768:	e275e020 	rsbs	lr, r5, #32
  14476c:	ba000005 	blt	144788 <__adddf3+0xbc>
  144770:	e1a0ce12 	lsl	ip, r2, lr
  144774:	e0900532 	adds	r0, r0, r2, lsr r5
  144778:	e2a11000 	adc	r1, r1, #0
  14477c:	e0900e13 	adds	r0, r0, r3, lsl lr
  144780:	e0b11553 	adcs	r1, r1, r3, asr r5
  144784:	ea000006 	b	1447a4 <__adddf3+0xd8>
  144788:	e2455020 	sub	r5, r5, #32
  14478c:	e28ee020 	add	lr, lr, #32
  144790:	e3520001 	cmp	r2, #1
  144794:	e1a0ce13 	lsl	ip, r3, lr
  144798:	238cc002 	orrcs	ip, ip, #2
  14479c:	e0900553 	adds	r0, r0, r3, asr r5
  1447a0:	e0b11fc3 	adcs	r1, r1, r3, asr #31
  1447a4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  1447a8:	5a000002 	bpl	1447b8 <__adddf3+0xec>
  1447ac:	e27cc000 	rsbs	ip, ip, #0
  1447b0:	e2f00000 	rscs	r0, r0, #0
  1447b4:	e2e11000 	rsc	r1, r1, #0
  1447b8:	e3510601 	cmp	r1, #1048576	; 0x100000
  1447bc:	3a00000e 	bcc	1447fc <__adddf3+0x130>
  1447c0:	e3510602 	cmp	r1, #2097152	; 0x200000
  1447c4:	3a000006 	bcc	1447e4 <__adddf3+0x118>
  1447c8:	e1b010a1 	lsrs	r1, r1, #1
  1447cc:	e1b00060 	rrxs	r0, r0
  1447d0:	e1a0c06c 	rrx	ip, ip
  1447d4:	e2844001 	add	r4, r4, #1
  1447d8:	e1a02a84 	lsl	r2, r4, #21
  1447dc:	e3720501 	cmn	r2, #4194304	; 0x400000
  1447e0:	2a000055 	bcs	14493c <__adddf3+0x270>
  1447e4:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
  1447e8:	01b0c0a0 	lsrseq	ip, r0, #1
  1447ec:	e2b00000 	adcs	r0, r0, #0
  1447f0:	e0a11a04 	adc	r1, r1, r4, lsl #20
  1447f4:	e1811005 	orr	r1, r1, r5
  1447f8:	e8bd8030 	pop	{r4, r5, pc}
  1447fc:	e1b0c08c 	lsls	ip, ip, #1
  144800:	e0b00000 	adcs	r0, r0, r0
  144804:	e0a11001 	adc	r1, r1, r1
  144808:	e3110601 	tst	r1, #1048576	; 0x100000
  14480c:	e2444001 	sub	r4, r4, #1
  144810:	1afffff3 	bne	1447e4 <__adddf3+0x118>
  144814:	e3310000 	teq	r1, #0
  144818:	01a01000 	moveq	r1, r0
  14481c:	03a00000 	moveq	r0, #0
  144820:	e16f3f11 	clz	r3, r1
  144824:	02833020 	addeq	r3, r3, #32
  144828:	e243300b 	sub	r3, r3, #11
  14482c:	e2532020 	subs	r2, r3, #32
  144830:	aa000007 	bge	144854 <__adddf3+0x188>
  144834:	e292200c 	adds	r2, r2, #12
  144838:	da000004 	ble	144850 <__adddf3+0x184>
  14483c:	e282c014 	add	ip, r2, #20
  144840:	e262200c 	rsb	r2, r2, #12
  144844:	e1a00c11 	lsl	r0, r1, ip
  144848:	e1a01231 	lsr	r1, r1, r2
  14484c:	ea000004 	b	144864 <__adddf3+0x198>
  144850:	e2822014 	add	r2, r2, #20
  144854:	d262c020 	rsble	ip, r2, #32
  144858:	e1a01211 	lsl	r1, r1, r2
  14485c:	d1811c30 	orrle	r1, r1, r0, lsr ip
  144860:	d1a00210 	lslle	r0, r0, r2
  144864:	e0544003 	subs	r4, r4, r3
  144868:	a0811a04 	addge	r1, r1, r4, lsl #20
  14486c:	a1811005 	orrge	r1, r1, r5
  144870:	a8bd8030 	popge	{r4, r5, pc}
  144874:	e1e04004 	mvn	r4, r4
  144878:	e254401f 	subs	r4, r4, #31
  14487c:	aa00000d 	bge	1448b8 <__adddf3+0x1ec>
  144880:	e294400c 	adds	r4, r4, #12
  144884:	ca000005 	bgt	1448a0 <__adddf3+0x1d4>
  144888:	e2844014 	add	r4, r4, #20
  14488c:	e2642020 	rsb	r2, r4, #32
  144890:	e1a00430 	lsr	r0, r0, r4
  144894:	e1800211 	orr	r0, r0, r1, lsl r2
  144898:	e1851431 	orr	r1, r5, r1, lsr r4
  14489c:	e8bd8030 	pop	{r4, r5, pc}
  1448a0:	e264400c 	rsb	r4, r4, #12
  1448a4:	e2642020 	rsb	r2, r4, #32
  1448a8:	e1a00230 	lsr	r0, r0, r2
  1448ac:	e1800411 	orr	r0, r0, r1, lsl r4
  1448b0:	e1a01005 	mov	r1, r5
  1448b4:	e8bd8030 	pop	{r4, r5, pc}
  1448b8:	e1a00431 	lsr	r0, r1, r4
  1448bc:	e1a01005 	mov	r1, r5
  1448c0:	e8bd8030 	pop	{r4, r5, pc}
  1448c4:	e3340000 	teq	r4, #0
  1448c8:	e2233601 	eor	r3, r3, #1048576	; 0x100000
  1448cc:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
  1448d0:	02844001 	addeq	r4, r4, #1
  1448d4:	12455001 	subne	r5, r5, #1
  1448d8:	eaffffa1 	b	144764 <__adddf3+0x98>
  1448dc:	e1f0cac4 	mvns	ip, r4, asr #21
  1448e0:	11f0cac5 	mvnsne	ip, r5, asr #21
  1448e4:	0a000018 	beq	14494c <__adddf3+0x280>
  1448e8:	e1340005 	teq	r4, r5
  1448ec:	01300002 	teqeq	r0, r2
  1448f0:	0a000003 	beq	144904 <__adddf3+0x238>
  1448f4:	e194c000 	orrs	ip, r4, r0
  1448f8:	01a01003 	moveq	r1, r3
  1448fc:	01a00002 	moveq	r0, r2
  144900:	e8bd8030 	pop	{r4, r5, pc}
  144904:	e1310003 	teq	r1, r3
  144908:	13a01000 	movne	r1, #0
  14490c:	13a00000 	movne	r0, #0
  144910:	18bd8030 	popne	{r4, r5, pc}
  144914:	e1b0caa4 	lsrs	ip, r4, #21
  144918:	1a000003 	bne	14492c <__adddf3+0x260>
  14491c:	e1b00080 	lsls	r0, r0, #1
  144920:	e0b11001 	adcs	r1, r1, r1
  144924:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
  144928:	e8bd8030 	pop	{r4, r5, pc}
  14492c:	e2944501 	adds	r4, r4, #4194304	; 0x400000
  144930:	32811601 	addcc	r1, r1, #1048576	; 0x100000
  144934:	38bd8030 	popcc	{r4, r5, pc}
  144938:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  14493c:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
  144940:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  144944:	e3a00000 	mov	r0, #0
  144948:	e8bd8030 	pop	{r4, r5, pc}
  14494c:	e1f0cac4 	mvns	ip, r4, asr #21
  144950:	11a01003 	movne	r1, r3
  144954:	11a00002 	movne	r0, r2
  144958:	01f0cac5 	mvnseq	ip, r5, asr #21
  14495c:	11a03001 	movne	r3, r1
  144960:	11a02000 	movne	r2, r0
  144964:	e1904601 	orrs	r4, r0, r1, lsl #12
  144968:	01925603 	orrseq	r5, r2, r3, lsl #12
  14496c:	01310003 	teqeq	r1, r3
  144970:	13811702 	orrne	r1, r1, #524288	; 0x80000
  144974:	e8bd8030 	pop	{r4, r5, pc}

00144978 <__aeabi_ui2d>:
  144978:	e3300000 	teq	r0, #0
  14497c:	03a01000 	moveq	r1, #0
  144980:	012fff1e 	bxeq	lr
  144984:	e92d4030 	push	{r4, r5, lr}
  144988:	e3a04b01 	mov	r4, #1024	; 0x400
  14498c:	e2844032 	add	r4, r4, #50	; 0x32
  144990:	e3a05000 	mov	r5, #0
  144994:	e3a01000 	mov	r1, #0
  144998:	eaffff9d 	b	144814 <__adddf3+0x148>

0014499c <__aeabi_i2d>:
  14499c:	e3300000 	teq	r0, #0
  1449a0:	03a01000 	moveq	r1, #0
  1449a4:	012fff1e 	bxeq	lr
  1449a8:	e92d4030 	push	{r4, r5, lr}
  1449ac:	e3a04b01 	mov	r4, #1024	; 0x400
  1449b0:	e2844032 	add	r4, r4, #50	; 0x32
  1449b4:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
  1449b8:	42600000 	rsbmi	r0, r0, #0
  1449bc:	e3a01000 	mov	r1, #0
  1449c0:	eaffff93 	b	144814 <__adddf3+0x148>

001449c4 <__aeabi_f2d>:
  1449c4:	e1b02080 	lsls	r2, r0, #1
  1449c8:	e1a011c2 	asr	r1, r2, #3
  1449cc:	e1a01061 	rrx	r1, r1
  1449d0:	e1a00e02 	lsl	r0, r2, #28
  1449d4:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
  1449d8:	133304ff 	teqne	r3, #-16777216	; 0xff000000
  1449dc:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
  1449e0:	112fff1e 	bxne	lr
  1449e4:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
  1449e8:	012fff1e 	bxeq	lr
  1449ec:	e33304ff 	teq	r3, #-16777216	; 0xff000000
  1449f0:	03811702 	orreq	r1, r1, #524288	; 0x80000
  1449f4:	012fff1e 	bxeq	lr
  1449f8:	e92d4030 	push	{r4, r5, lr}
  1449fc:	e3a04d0e 	mov	r4, #896	; 0x380
  144a00:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  144a04:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  144a08:	eaffff81 	b	144814 <__adddf3+0x148>

00144a0c <__aeabi_ul2d>:
  144a0c:	e1902001 	orrs	r2, r0, r1
  144a10:	012fff1e 	bxeq	lr
  144a14:	e92d4030 	push	{r4, r5, lr}
  144a18:	e3a05000 	mov	r5, #0
  144a1c:	ea000006 	b	144a3c <__aeabi_l2d+0x1c>

00144a20 <__aeabi_l2d>:
  144a20:	e1902001 	orrs	r2, r0, r1
  144a24:	012fff1e 	bxeq	lr
  144a28:	e92d4030 	push	{r4, r5, lr}
  144a2c:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
  144a30:	5a000001 	bpl	144a3c <__aeabi_l2d+0x1c>
  144a34:	e2700000 	rsbs	r0, r0, #0
  144a38:	e2e11000 	rsc	r1, r1, #0
  144a3c:	e3a04b01 	mov	r4, #1024	; 0x400
  144a40:	e2844032 	add	r4, r4, #50	; 0x32
  144a44:	e1b0cb21 	lsrs	ip, r1, #22
  144a48:	0affff5a 	beq	1447b8 <__adddf3+0xec>
  144a4c:	e3a02003 	mov	r2, #3
  144a50:	e1b0c1ac 	lsrs	ip, ip, #3
  144a54:	12822003 	addne	r2, r2, #3
  144a58:	e1b0c1ac 	lsrs	ip, ip, #3
  144a5c:	12822003 	addne	r2, r2, #3
  144a60:	e08221ac 	add	r2, r2, ip, lsr #3
  144a64:	e2623020 	rsb	r3, r2, #32
  144a68:	e1a0c310 	lsl	ip, r0, r3
  144a6c:	e1a00230 	lsr	r0, r0, r2
  144a70:	e1800311 	orr	r0, r0, r1, lsl r3
  144a74:	e1a01231 	lsr	r1, r1, r2
  144a78:	e0844002 	add	r4, r4, r2
  144a7c:	eaffff4d 	b	1447b8 <__adddf3+0xec>

00144a80 <__aeabi_dmul>:
  144a80:	e92d4070 	push	{r4, r5, r6, lr}
  144a84:	e3a0c0ff 	mov	ip, #255	; 0xff
  144a88:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  144a8c:	e01c4a21 	ands	r4, ip, r1, lsr #20
  144a90:	101c5a23 	andsne	r5, ip, r3, lsr #20
  144a94:	1134000c 	teqne	r4, ip
  144a98:	1135000c 	teqne	r5, ip
  144a9c:	0b00006f 	bleq	144c60 <__aeabi_dmul+0x1e0>
  144aa0:	e0844005 	add	r4, r4, r5
  144aa4:	e0216003 	eor	r6, r1, r3
  144aa8:	e1c11a8c 	bic	r1, r1, ip, lsl #21
  144aac:	e1c33a8c 	bic	r3, r3, ip, lsl #21
  144ab0:	e1905601 	orrs	r5, r0, r1, lsl #12
  144ab4:	11925603 	orrsne	r5, r2, r3, lsl #12
  144ab8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144abc:	e3833601 	orr	r3, r3, #1048576	; 0x100000
  144ac0:	0a00001c 	beq	144b38 <__aeabi_dmul+0xb8>
  144ac4:	e08ec290 	umull	ip, lr, r0, r2
  144ac8:	e3a05000 	mov	r5, #0
  144acc:	e0a5e291 	umlal	lr, r5, r1, r2
  144ad0:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
  144ad4:	e0a5e390 	umlal	lr, r5, r0, r3
  144ad8:	e3a06000 	mov	r6, #0
  144adc:	e0a65391 	umlal	r5, r6, r1, r3
  144ae0:	e33c0000 	teq	ip, #0
  144ae4:	138ee001 	orrne	lr, lr, #1
  144ae8:	e24440ff 	sub	r4, r4, #255	; 0xff
  144aec:	e3560c02 	cmp	r6, #512	; 0x200
  144af0:	e2c44c03 	sbc	r4, r4, #768	; 0x300
  144af4:	2a000002 	bcs	144b04 <__aeabi_dmul+0x84>
  144af8:	e1b0e08e 	lsls	lr, lr, #1
  144afc:	e0b55005 	adcs	r5, r5, r5
  144b00:	e0a66006 	adc	r6, r6, r6
  144b04:	e1821586 	orr	r1, r2, r6, lsl #11
  144b08:	e1811aa5 	orr	r1, r1, r5, lsr #21
  144b0c:	e1a00585 	lsl	r0, r5, #11
  144b10:	e1800aae 	orr	r0, r0, lr, lsr #21
  144b14:	e1a0e58e 	lsl	lr, lr, #11
  144b18:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  144b1c:	835c0c07 	cmphi	ip, #1792	; 0x700
  144b20:	8a00000f 	bhi	144b64 <__aeabi_dmul+0xe4>
  144b24:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
  144b28:	01b0e0a0 	lsrseq	lr, r0, #1
  144b2c:	e2b00000 	adcs	r0, r0, #0
  144b30:	e0a11a04 	adc	r1, r1, r4, lsl #20
  144b34:	e8bd8070 	pop	{r4, r5, r6, pc}
  144b38:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
  144b3c:	e1861001 	orr	r1, r6, r1
  144b40:	e1800002 	orr	r0, r0, r2
  144b44:	e0211003 	eor	r1, r1, r3
  144b48:	e05440ac 	subs	r4, r4, ip, lsr #1
  144b4c:	c074500c 	rsbsgt	r5, r4, ip
  144b50:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  144b54:	c8bd8070 	popgt	{r4, r5, r6, pc}
  144b58:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144b5c:	e3a0e000 	mov	lr, #0
  144b60:	e2544001 	subs	r4, r4, #1
  144b64:	ca000058 	bgt	144ccc <__aeabi_dmul+0x24c>
  144b68:	e3740036 	cmn	r4, #54	; 0x36
  144b6c:	d3a00000 	movle	r0, #0
  144b70:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
  144b74:	d8bd8070 	pople	{r4, r5, r6, pc}
  144b78:	e2644000 	rsb	r4, r4, #0
  144b7c:	e2544020 	subs	r4, r4, #32
  144b80:	aa000018 	bge	144be8 <__aeabi_dmul+0x168>
  144b84:	e294400c 	adds	r4, r4, #12
  144b88:	ca00000b 	bgt	144bbc <__aeabi_dmul+0x13c>
  144b8c:	e2844014 	add	r4, r4, #20
  144b90:	e2645020 	rsb	r5, r4, #32
  144b94:	e1a03510 	lsl	r3, r0, r5
  144b98:	e1a00430 	lsr	r0, r0, r4
  144b9c:	e1800511 	orr	r0, r0, r1, lsl r5
  144ba0:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
  144ba4:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  144ba8:	e0900fa3 	adds	r0, r0, r3, lsr #31
  144bac:	e0a21431 	adc	r1, r2, r1, lsr r4
  144bb0:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144bb4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144bb8:	e8bd8070 	pop	{r4, r5, r6, pc}
  144bbc:	e264400c 	rsb	r4, r4, #12
  144bc0:	e2645020 	rsb	r5, r4, #32
  144bc4:	e1a03410 	lsl	r3, r0, r4
  144bc8:	e1a00530 	lsr	r0, r0, r5
  144bcc:	e1800411 	orr	r0, r0, r1, lsl r4
  144bd0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144bd4:	e0900fa3 	adds	r0, r0, r3, lsr #31
  144bd8:	e2a11000 	adc	r1, r1, #0
  144bdc:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144be0:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144be4:	e8bd8070 	pop	{r4, r5, r6, pc}
  144be8:	e2645020 	rsb	r5, r4, #32
  144bec:	e18ee510 	orr	lr, lr, r0, lsl r5
  144bf0:	e1a03430 	lsr	r3, r0, r4
  144bf4:	e1833511 	orr	r3, r3, r1, lsl r5
  144bf8:	e1a00431 	lsr	r0, r1, r4
  144bfc:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144c00:	e1c00431 	bic	r0, r0, r1, lsr r4
  144c04:	e0800fa3 	add	r0, r0, r3, lsr #31
  144c08:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144c0c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144c10:	e8bd8070 	pop	{r4, r5, r6, pc}
  144c14:	e3340000 	teq	r4, #0
  144c18:	1a000008 	bne	144c40 <__aeabi_dmul+0x1c0>
  144c1c:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
  144c20:	e1b00080 	lsls	r0, r0, #1
  144c24:	e0a11001 	adc	r1, r1, r1
  144c28:	e3110601 	tst	r1, #1048576	; 0x100000
  144c2c:	02444001 	subeq	r4, r4, #1
  144c30:	0afffffa 	beq	144c20 <__aeabi_dmul+0x1a0>
  144c34:	e1811006 	orr	r1, r1, r6
  144c38:	e3350000 	teq	r5, #0
  144c3c:	112fff1e 	bxne	lr
  144c40:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
  144c44:	e1b02082 	lsls	r2, r2, #1
  144c48:	e0a33003 	adc	r3, r3, r3
  144c4c:	e3130601 	tst	r3, #1048576	; 0x100000
  144c50:	02455001 	subeq	r5, r5, #1
  144c54:	0afffffa 	beq	144c44 <__aeabi_dmul+0x1c4>
  144c58:	e1833006 	orr	r3, r3, r6
  144c5c:	e12fff1e 	bx	lr
  144c60:	e134000c 	teq	r4, ip
  144c64:	e00c5a23 	and	r5, ip, r3, lsr #20
  144c68:	1135000c 	teqne	r5, ip
  144c6c:	0a000006 	beq	144c8c <__aeabi_dmul+0x20c>
  144c70:	e1906081 	orrs	r6, r0, r1, lsl #1
  144c74:	11926083 	orrsne	r6, r2, r3, lsl #1
  144c78:	1affffe5 	bne	144c14 <__aeabi_dmul+0x194>
  144c7c:	e0211003 	eor	r1, r1, r3
  144c80:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144c84:	e3a00000 	mov	r0, #0
  144c88:	e8bd8070 	pop	{r4, r5, r6, pc}
  144c8c:	e1906081 	orrs	r6, r0, r1, lsl #1
  144c90:	01a00002 	moveq	r0, r2
  144c94:	01a01003 	moveq	r1, r3
  144c98:	11926083 	orrsne	r6, r2, r3, lsl #1
  144c9c:	0a00000f 	beq	144ce0 <__aeabi_dmul+0x260>
  144ca0:	e134000c 	teq	r4, ip
  144ca4:	1a000001 	bne	144cb0 <__aeabi_dmul+0x230>
  144ca8:	e1906601 	orrs	r6, r0, r1, lsl #12
  144cac:	1a00000b 	bne	144ce0 <__aeabi_dmul+0x260>
  144cb0:	e135000c 	teq	r5, ip
  144cb4:	1a000003 	bne	144cc8 <__aeabi_dmul+0x248>
  144cb8:	e1926603 	orrs	r6, r2, r3, lsl #12
  144cbc:	11a00002 	movne	r0, r2
  144cc0:	11a01003 	movne	r1, r3
  144cc4:	1a000005 	bne	144ce0 <__aeabi_dmul+0x260>
  144cc8:	e0211003 	eor	r1, r1, r3
  144ccc:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144cd0:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  144cd4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  144cd8:	e3a00000 	mov	r0, #0
  144cdc:	e8bd8070 	pop	{r4, r5, r6, pc}
  144ce0:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  144ce4:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
  144ce8:	e8bd8070 	pop	{r4, r5, r6, pc}

00144cec <__aeabi_ddiv>:
  144cec:	e92d4070 	push	{r4, r5, r6, lr}
  144cf0:	e3a0c0ff 	mov	ip, #255	; 0xff
  144cf4:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  144cf8:	e01c4a21 	ands	r4, ip, r1, lsr #20
  144cfc:	101c5a23 	andsne	r5, ip, r3, lsr #20
  144d00:	1134000c 	teqne	r4, ip
  144d04:	1135000c 	teqne	r5, ip
  144d08:	0b00005c 	bleq	144e80 <__aeabi_ddiv+0x194>
  144d0c:	e0444005 	sub	r4, r4, r5
  144d10:	e021e003 	eor	lr, r1, r3
  144d14:	e1925603 	orrs	r5, r2, r3, lsl #12
  144d18:	e1a01601 	lsl	r1, r1, #12
  144d1c:	0a00004b 	beq	144e50 <__aeabi_ddiv+0x164>
  144d20:	e1a03603 	lsl	r3, r3, #12
  144d24:	e3a05201 	mov	r5, #268435456	; 0x10000000
  144d28:	e1853223 	orr	r3, r5, r3, lsr #4
  144d2c:	e1833c22 	orr	r3, r3, r2, lsr #24
  144d30:	e1a02402 	lsl	r2, r2, #8
  144d34:	e1855221 	orr	r5, r5, r1, lsr #4
  144d38:	e1855c20 	orr	r5, r5, r0, lsr #24
  144d3c:	e1a06400 	lsl	r6, r0, #8
  144d40:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
  144d44:	e1550003 	cmp	r5, r3
  144d48:	01560002 	cmpeq	r6, r2
  144d4c:	e2a440fd 	adc	r4, r4, #253	; 0xfd
  144d50:	e2844c03 	add	r4, r4, #768	; 0x300
  144d54:	2a000001 	bcs	144d60 <__aeabi_ddiv+0x74>
  144d58:	e1b030a3 	lsrs	r3, r3, #1
  144d5c:	e1a02062 	rrx	r2, r2
  144d60:	e0566002 	subs	r6, r6, r2
  144d64:	e0c55003 	sbc	r5, r5, r3
  144d68:	e1b030a3 	lsrs	r3, r3, #1
  144d6c:	e1a02062 	rrx	r2, r2
  144d70:	e3a00601 	mov	r0, #1048576	; 0x100000
  144d74:	e3a0c702 	mov	ip, #524288	; 0x80000
  144d78:	e056e002 	subs	lr, r6, r2
  144d7c:	e0d5e003 	sbcs	lr, r5, r3
  144d80:	20466002 	subcs	r6, r6, r2
  144d84:	21a0500e 	movcs	r5, lr
  144d88:	2180000c 	orrcs	r0, r0, ip
  144d8c:	e1b030a3 	lsrs	r3, r3, #1
  144d90:	e1a02062 	rrx	r2, r2
  144d94:	e056e002 	subs	lr, r6, r2
  144d98:	e0d5e003 	sbcs	lr, r5, r3
  144d9c:	20466002 	subcs	r6, r6, r2
  144da0:	21a0500e 	movcs	r5, lr
  144da4:	218000ac 	orrcs	r0, r0, ip, lsr #1
  144da8:	e1b030a3 	lsrs	r3, r3, #1
  144dac:	e1a02062 	rrx	r2, r2
  144db0:	e056e002 	subs	lr, r6, r2
  144db4:	e0d5e003 	sbcs	lr, r5, r3
  144db8:	20466002 	subcs	r6, r6, r2
  144dbc:	21a0500e 	movcs	r5, lr
  144dc0:	2180012c 	orrcs	r0, r0, ip, lsr #2
  144dc4:	e1b030a3 	lsrs	r3, r3, #1
  144dc8:	e1a02062 	rrx	r2, r2
  144dcc:	e056e002 	subs	lr, r6, r2
  144dd0:	e0d5e003 	sbcs	lr, r5, r3
  144dd4:	20466002 	subcs	r6, r6, r2
  144dd8:	21a0500e 	movcs	r5, lr
  144ddc:	218001ac 	orrcs	r0, r0, ip, lsr #3
  144de0:	e195e006 	orrs	lr, r5, r6
  144de4:	0a00000d 	beq	144e20 <__aeabi_ddiv+0x134>
  144de8:	e1a05205 	lsl	r5, r5, #4
  144dec:	e1855e26 	orr	r5, r5, r6, lsr #28
  144df0:	e1a06206 	lsl	r6, r6, #4
  144df4:	e1a03183 	lsl	r3, r3, #3
  144df8:	e1833ea2 	orr	r3, r3, r2, lsr #29
  144dfc:	e1a02182 	lsl	r2, r2, #3
  144e00:	e1b0c22c 	lsrs	ip, ip, #4
  144e04:	1affffdb 	bne	144d78 <__aeabi_ddiv+0x8c>
  144e08:	e3110601 	tst	r1, #1048576	; 0x100000
  144e0c:	1a000006 	bne	144e2c <__aeabi_ddiv+0x140>
  144e10:	e1811000 	orr	r1, r1, r0
  144e14:	e3a00000 	mov	r0, #0
  144e18:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
  144e1c:	eaffffd5 	b	144d78 <__aeabi_ddiv+0x8c>
  144e20:	e3110601 	tst	r1, #1048576	; 0x100000
  144e24:	01811000 	orreq	r1, r1, r0
  144e28:	03a00000 	moveq	r0, #0
  144e2c:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  144e30:	835c0c07 	cmphi	ip, #1792	; 0x700
  144e34:	8affff4a 	bhi	144b64 <__aeabi_dmul+0xe4>
  144e38:	e055c003 	subs	ip, r5, r3
  144e3c:	0056c002 	subseq	ip, r6, r2
  144e40:	01b0c0a0 	lsrseq	ip, r0, #1
  144e44:	e2b00000 	adcs	r0, r0, #0
  144e48:	e0a11a04 	adc	r1, r1, r4, lsl #20
  144e4c:	e8bd8070 	pop	{r4, r5, r6, pc}
  144e50:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
  144e54:	e18e1621 	orr	r1, lr, r1, lsr #12
  144e58:	e09440ac 	adds	r4, r4, ip, lsr #1
  144e5c:	c074500c 	rsbsgt	r5, r4, ip
  144e60:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  144e64:	c8bd8070 	popgt	{r4, r5, r6, pc}
  144e68:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144e6c:	e3a0e000 	mov	lr, #0
  144e70:	e2544001 	subs	r4, r4, #1
  144e74:	eaffff3a 	b	144b64 <__aeabi_dmul+0xe4>
  144e78:	e185e006 	orr	lr, r5, r6
  144e7c:	eaffff38 	b	144b64 <__aeabi_dmul+0xe4>
  144e80:	e00c5a23 	and	r5, ip, r3, lsr #20
  144e84:	e134000c 	teq	r4, ip
  144e88:	0135000c 	teqeq	r5, ip
  144e8c:	0affff93 	beq	144ce0 <__aeabi_dmul+0x260>
  144e90:	e134000c 	teq	r4, ip
  144e94:	1a000006 	bne	144eb4 <__aeabi_ddiv+0x1c8>
  144e98:	e1904601 	orrs	r4, r0, r1, lsl #12
  144e9c:	1affff8f 	bne	144ce0 <__aeabi_dmul+0x260>
  144ea0:	e135000c 	teq	r5, ip
  144ea4:	1affff87 	bne	144cc8 <__aeabi_dmul+0x248>
  144ea8:	e1a00002 	mov	r0, r2
  144eac:	e1a01003 	mov	r1, r3
  144eb0:	eaffff8a 	b	144ce0 <__aeabi_dmul+0x260>
  144eb4:	e135000c 	teq	r5, ip
  144eb8:	1a000004 	bne	144ed0 <__aeabi_ddiv+0x1e4>
  144ebc:	e1925603 	orrs	r5, r2, r3, lsl #12
  144ec0:	0affff6d 	beq	144c7c <__aeabi_dmul+0x1fc>
  144ec4:	e1a00002 	mov	r0, r2
  144ec8:	e1a01003 	mov	r1, r3
  144ecc:	eaffff83 	b	144ce0 <__aeabi_dmul+0x260>
  144ed0:	e1906081 	orrs	r6, r0, r1, lsl #1
  144ed4:	11926083 	orrsne	r6, r2, r3, lsl #1
  144ed8:	1affff4d 	bne	144c14 <__aeabi_dmul+0x194>
  144edc:	e1904081 	orrs	r4, r0, r1, lsl #1
  144ee0:	1affff78 	bne	144cc8 <__aeabi_dmul+0x248>
  144ee4:	e1925083 	orrs	r5, r2, r3, lsl #1
  144ee8:	1affff63 	bne	144c7c <__aeabi_dmul+0x1fc>
  144eec:	eaffff7b 	b	144ce0 <__aeabi_dmul+0x260>

00144ef0 <__gedf2>:
  144ef0:	e3e0c000 	mvn	ip, #0
  144ef4:	ea000002 	b	144f04 <__cmpdf2+0x4>

00144ef8 <__ledf2>:
  144ef8:	e3a0c001 	mov	ip, #1
  144efc:	ea000000 	b	144f04 <__cmpdf2+0x4>

00144f00 <__cmpdf2>:
  144f00:	e3a0c001 	mov	ip, #1
  144f04:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
  144f08:	e1a0c081 	lsl	ip, r1, #1
  144f0c:	e1f0cacc 	mvns	ip, ip, asr #21
  144f10:	e1a0c083 	lsl	ip, r3, #1
  144f14:	11f0cacc 	mvnsne	ip, ip, asr #21
  144f18:	0a00000e 	beq	144f58 <__cmpdf2+0x58>
  144f1c:	e28dd004 	add	sp, sp, #4
  144f20:	e190c081 	orrs	ip, r0, r1, lsl #1
  144f24:	0192c083 	orrseq	ip, r2, r3, lsl #1
  144f28:	11310003 	teqne	r1, r3
  144f2c:	01300002 	teqeq	r0, r2
  144f30:	03a00000 	moveq	r0, #0
  144f34:	012fff1e 	bxeq	lr
  144f38:	e3700000 	cmn	r0, #0
  144f3c:	e1310003 	teq	r1, r3
  144f40:	51510003 	cmppl	r1, r3
  144f44:	01500002 	cmpeq	r0, r2
  144f48:	21a00fc3 	asrcs	r0, r3, #31
  144f4c:	31e00fc3 	mvncc	r0, r3, asr #31
  144f50:	e3800001 	orr	r0, r0, #1
  144f54:	e12fff1e 	bx	lr
  144f58:	e1a0c081 	lsl	ip, r1, #1
  144f5c:	e1f0cacc 	mvns	ip, ip, asr #21
  144f60:	1a000001 	bne	144f6c <__cmpdf2+0x6c>
  144f64:	e190c601 	orrs	ip, r0, r1, lsl #12
  144f68:	1a000004 	bne	144f80 <__cmpdf2+0x80>
  144f6c:	e1a0c083 	lsl	ip, r3, #1
  144f70:	e1f0cacc 	mvns	ip, ip, asr #21
  144f74:	1affffe8 	bne	144f1c <__cmpdf2+0x1c>
  144f78:	e192c603 	orrs	ip, r2, r3, lsl #12
  144f7c:	0affffe6 	beq	144f1c <__cmpdf2+0x1c>
  144f80:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
  144f84:	e12fff1e 	bx	lr

00144f88 <__aeabi_cdrcmple>:
  144f88:	e1a0c000 	mov	ip, r0
  144f8c:	e1a00002 	mov	r0, r2
  144f90:	e1a0200c 	mov	r2, ip
  144f94:	e1a0c001 	mov	ip, r1
  144f98:	e1a01003 	mov	r1, r3
  144f9c:	e1a0300c 	mov	r3, ip
  144fa0:	eaffffff 	b	144fa4 <__aeabi_cdcmpeq>

00144fa4 <__aeabi_cdcmpeq>:
  144fa4:	e92d4001 	push	{r0, lr}
  144fa8:	ebffffd4 	bl	144f00 <__cmpdf2>
  144fac:	e3500000 	cmp	r0, #0
  144fb0:	43700000 	cmnmi	r0, #0
  144fb4:	e8bd8001 	pop	{r0, pc}

00144fb8 <__aeabi_dcmpeq>:
  144fb8:	e52de008 	str	lr, [sp, #-8]!
  144fbc:	ebfffff8 	bl	144fa4 <__aeabi_cdcmpeq>
  144fc0:	03a00001 	moveq	r0, #1
  144fc4:	13a00000 	movne	r0, #0
  144fc8:	e49df008 	ldr	pc, [sp], #8

00144fcc <__aeabi_dcmplt>:
  144fcc:	e52de008 	str	lr, [sp, #-8]!
  144fd0:	ebfffff3 	bl	144fa4 <__aeabi_cdcmpeq>
  144fd4:	33a00001 	movcc	r0, #1
  144fd8:	23a00000 	movcs	r0, #0
  144fdc:	e49df008 	ldr	pc, [sp], #8

00144fe0 <__aeabi_dcmple>:
  144fe0:	e52de008 	str	lr, [sp, #-8]!
  144fe4:	ebffffee 	bl	144fa4 <__aeabi_cdcmpeq>
  144fe8:	93a00001 	movls	r0, #1
  144fec:	83a00000 	movhi	r0, #0
  144ff0:	e49df008 	ldr	pc, [sp], #8

00144ff4 <__aeabi_dcmpge>:
  144ff4:	e52de008 	str	lr, [sp, #-8]!
  144ff8:	ebffffe2 	bl	144f88 <__aeabi_cdrcmple>
  144ffc:	93a00001 	movls	r0, #1
  145000:	83a00000 	movhi	r0, #0
  145004:	e49df008 	ldr	pc, [sp], #8

00145008 <__aeabi_dcmpgt>:
  145008:	e52de008 	str	lr, [sp, #-8]!
  14500c:	ebffffdd 	bl	144f88 <__aeabi_cdrcmple>
  145010:	33a00001 	movcc	r0, #1
  145014:	23a00000 	movcs	r0, #0
  145018:	e49df008 	ldr	pc, [sp], #8

0014501c <__aeabi_d2iz>:
  14501c:	e1a02081 	lsl	r2, r1, #1
  145020:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  145024:	2a00000c 	bcs	14505c <__aeabi_d2iz+0x40>
  145028:	5a000009 	bpl	145054 <__aeabi_d2iz+0x38>
  14502c:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  145030:	e0532ac2 	subs	r2, r3, r2, asr #21
  145034:	9a00000a 	bls	145064 <__aeabi_d2iz+0x48>
  145038:	e1a03581 	lsl	r3, r1, #11
  14503c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  145040:	e1833aa0 	orr	r3, r3, r0, lsr #21
  145044:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  145048:	e1a00233 	lsr	r0, r3, r2
  14504c:	12600000 	rsbne	r0, r0, #0
  145050:	e12fff1e 	bx	lr
  145054:	e3a00000 	mov	r0, #0
  145058:	e12fff1e 	bx	lr
  14505c:	e1900601 	orrs	r0, r0, r1, lsl #12
  145060:	1a000002 	bne	145070 <__aeabi_d2iz+0x54>
  145064:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
  145068:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
  14506c:	e12fff1e 	bx	lr
  145070:	e3a00000 	mov	r0, #0
  145074:	e12fff1e 	bx	lr

00145078 <__aeabi_d2uiz>:
  145078:	e1b02081 	lsls	r2, r1, #1
  14507c:	2a00000a 	bcs	1450ac <__aeabi_d2uiz+0x34>
  145080:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  145084:	2a00000a 	bcs	1450b4 <__aeabi_d2uiz+0x3c>
  145088:	5a000007 	bpl	1450ac <__aeabi_d2uiz+0x34>
  14508c:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  145090:	e0532ac2 	subs	r2, r3, r2, asr #21
  145094:	4a000008 	bmi	1450bc <__aeabi_d2uiz+0x44>
  145098:	e1a03581 	lsl	r3, r1, #11
  14509c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  1450a0:	e1833aa0 	orr	r3, r3, r0, lsr #21
  1450a4:	e1a00233 	lsr	r0, r3, r2
  1450a8:	e12fff1e 	bx	lr
  1450ac:	e3a00000 	mov	r0, #0
  1450b0:	e12fff1e 	bx	lr
  1450b4:	e1900601 	orrs	r0, r0, r1, lsl #12
  1450b8:	1a000001 	bne	1450c4 <__aeabi_d2uiz+0x4c>
  1450bc:	e3e00000 	mvn	r0, #0
  1450c0:	e12fff1e 	bx	lr
  1450c4:	e3a00000 	mov	r0, #0
  1450c8:	e12fff1e 	bx	lr

001450cc <__aeabi_ldivmod>:
  1450cc:	e3530000 	cmp	r3, #0
  1450d0:	03520000 	cmpeq	r2, #0
  1450d4:	1a000007 	bne	1450f8 <__aeabi_ldivmod+0x2c>
  1450d8:	e3510000 	cmp	r1, #0
  1450dc:	b3a01102 	movlt	r1, #-2147483648	; 0x80000000
  1450e0:	b3a00000 	movlt	r0, #0
  1450e4:	ba000002 	blt	1450f4 <__aeabi_ldivmod+0x28>
  1450e8:	03500000 	cmpeq	r0, #0
  1450ec:	13e01102 	mvnne	r1, #-2147483648	; 0x80000000
  1450f0:	13e00000 	mvnne	r0, #0
  1450f4:	eaffcee3 	b	138c88 <__aeabi_idiv0>
  1450f8:	e24dd008 	sub	sp, sp, #8
  1450fc:	e92d6000 	push	{sp, lr}
  145100:	e3510000 	cmp	r1, #0
  145104:	ba000006 	blt	145124 <__aeabi_ldivmod+0x58>
  145108:	e3530000 	cmp	r3, #0
  14510c:	ba000011 	blt	145158 <__aeabi_ldivmod+0x8c>
  145110:	eb000031 	bl	1451dc <__udivmoddi4>
  145114:	e59de004 	ldr	lr, [sp, #4]
  145118:	e28dd008 	add	sp, sp, #8
  14511c:	e8bd000c 	pop	{r2, r3}
  145120:	e12fff1e 	bx	lr
  145124:	e2700000 	rsbs	r0, r0, #0
  145128:	e0c11081 	sbc	r1, r1, r1, lsl #1
  14512c:	e3530000 	cmp	r3, #0
  145130:	ba000011 	blt	14517c <__aeabi_ldivmod+0xb0>
  145134:	eb000028 	bl	1451dc <__udivmoddi4>
  145138:	e59de004 	ldr	lr, [sp, #4]
  14513c:	e28dd008 	add	sp, sp, #8
  145140:	e8bd000c 	pop	{r2, r3}
  145144:	e2700000 	rsbs	r0, r0, #0
  145148:	e0c11081 	sbc	r1, r1, r1, lsl #1
  14514c:	e2722000 	rsbs	r2, r2, #0
  145150:	e0c33083 	sbc	r3, r3, r3, lsl #1
  145154:	e12fff1e 	bx	lr
  145158:	e2722000 	rsbs	r2, r2, #0
  14515c:	e0c33083 	sbc	r3, r3, r3, lsl #1
  145160:	eb00001d 	bl	1451dc <__udivmoddi4>
  145164:	e59de004 	ldr	lr, [sp, #4]
  145168:	e28dd008 	add	sp, sp, #8
  14516c:	e8bd000c 	pop	{r2, r3}
  145170:	e2700000 	rsbs	r0, r0, #0
  145174:	e0c11081 	sbc	r1, r1, r1, lsl #1
  145178:	e12fff1e 	bx	lr
  14517c:	e2722000 	rsbs	r2, r2, #0
  145180:	e0c33083 	sbc	r3, r3, r3, lsl #1
  145184:	eb000014 	bl	1451dc <__udivmoddi4>
  145188:	e59de004 	ldr	lr, [sp, #4]
  14518c:	e28dd008 	add	sp, sp, #8
  145190:	e8bd000c 	pop	{r2, r3}
  145194:	e2722000 	rsbs	r2, r2, #0
  145198:	e0c33083 	sbc	r3, r3, r3, lsl #1
  14519c:	e12fff1e 	bx	lr

001451a0 <__aeabi_uldivmod>:
  1451a0:	e3530000 	cmp	r3, #0
  1451a4:	03520000 	cmpeq	r2, #0
  1451a8:	1a000004 	bne	1451c0 <__aeabi_uldivmod+0x20>
  1451ac:	e3510000 	cmp	r1, #0
  1451b0:	03500000 	cmpeq	r0, #0
  1451b4:	13e01000 	mvnne	r1, #0
  1451b8:	13e00000 	mvnne	r0, #0
  1451bc:	eaffceb1 	b	138c88 <__aeabi_idiv0>
  1451c0:	e24dd008 	sub	sp, sp, #8
  1451c4:	e92d6000 	push	{sp, lr}
  1451c8:	eb000003 	bl	1451dc <__udivmoddi4>
  1451cc:	e59de004 	ldr	lr, [sp, #4]
  1451d0:	e28dd008 	add	sp, sp, #8
  1451d4:	e8bd000c 	pop	{r2, r3}
  1451d8:	e12fff1e 	bx	lr

001451dc <__udivmoddi4>:
  1451dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  1451e0:	e1510003 	cmp	r1, r3
  1451e4:	e24dd008 	sub	sp, sp, #8
  1451e8:	01500002 	cmpeq	r0, r2
  1451ec:	e1a09000 	mov	r9, r0
  1451f0:	e1a0a001 	mov	sl, r1
  1451f4:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  1451f8:	3a00003c 	bcc	1452f0 <__udivmoddi4+0x114>
  1451fc:	e1a00002 	mov	r0, r2
  145200:	e3530000 	cmp	r3, #0
  145204:	e1a01003 	mov	r1, r3
  145208:	016f3f10 	clzeq	r3, r0
  14520c:	116f2f13 	clzne	r2, r3
  145210:	02832020 	addeq	r2, r3, #32
  145214:	e35a0000 	cmp	sl, #0
  145218:	016f3f19 	clzeq	r3, r9
  14521c:	116f3f1a 	clzne	r3, sl
  145220:	02833020 	addeq	r3, r3, #32
  145224:	e0423003 	sub	r3, r2, r3
  145228:	e243c020 	sub	ip, r3, #32
  14522c:	e1a07311 	lsl	r7, r1, r3
  145230:	e1877c10 	orr	r7, r7, r0, lsl ip
  145234:	e263e020 	rsb	lr, r3, #32
  145238:	e1877e30 	orr	r7, r7, r0, lsr lr
  14523c:	e1a06310 	lsl	r6, r0, r3
  145240:	e15a0007 	cmp	sl, r7
  145244:	01590006 	cmpeq	r9, r6
  145248:	2a000030 	bcs	145310 <__udivmoddi4+0x134>
  14524c:	e3a01000 	mov	r1, #0
  145250:	e3a02000 	mov	r2, #0
  145254:	e88d0006 	stm	sp, {r1, r2}
  145258:	e3530000 	cmp	r3, #0
  14525c:	0a000026 	beq	1452fc <__udivmoddi4+0x120>
  145260:	e1b070a7 	lsrs	r7, r7, #1
  145264:	e1a06066 	rrx	r6, r6
  145268:	e1a02003 	mov	r2, r3
  14526c:	ea000007 	b	145290 <__udivmoddi4+0xb4>
  145270:	e0590006 	subs	r0, r9, r6
  145274:	e0ca1007 	sbc	r1, sl, r7
  145278:	e0904000 	adds	r4, r0, r0
  14527c:	e0a15001 	adc	r5, r1, r1
  145280:	e2949001 	adds	r9, r4, #1
  145284:	e2a5a000 	adc	sl, r5, #0
  145288:	e2522001 	subs	r2, r2, #1
  14528c:	0a000006 	beq	1452ac <__udivmoddi4+0xd0>
  145290:	e15a0007 	cmp	sl, r7
  145294:	01590006 	cmpeq	r9, r6
  145298:	2afffff4 	bcs	145270 <__udivmoddi4+0x94>
  14529c:	e0999009 	adds	r9, r9, r9
  1452a0:	e0aaa00a 	adc	sl, sl, sl
  1452a4:	e2522001 	subs	r2, r2, #1
  1452a8:	1afffff8 	bne	145290 <__udivmoddi4+0xb4>
  1452ac:	e89d00c0 	ldm	sp, {r6, r7}
  1452b0:	e1a02339 	lsr	r2, r9, r3
  1452b4:	e0966009 	adds	r6, r6, r9
  1452b8:	e1822e1a 	orr	r2, r2, sl, lsl lr
  1452bc:	e1a0133a 	lsr	r1, sl, r3
  1452c0:	e1822c3a 	orr	r2, r2, sl, lsr ip
  1452c4:	e0a7700a 	adc	r7, r7, sl
  1452c8:	e1a0a001 	mov	sl, r1
  1452cc:	e1a0131a 	lsl	r1, sl, r3
  1452d0:	e1811c12 	orr	r1, r1, r2, lsl ip
  1452d4:	e1a00312 	lsl	r0, r2, r3
  1452d8:	e0566000 	subs	r6, r6, r0
  1452dc:	e1811e32 	orr	r1, r1, r2, lsr lr
  1452e0:	e0c77001 	sbc	r7, r7, r1
  1452e4:	e1a09002 	mov	r9, r2
  1452e8:	e88d00c0 	stm	sp, {r6, r7}
  1452ec:	ea000002 	b	1452fc <__udivmoddi4+0x120>
  1452f0:	e3a03000 	mov	r3, #0
  1452f4:	e3a04000 	mov	r4, #0
  1452f8:	e88d0018 	stm	sp, {r3, r4}
  1452fc:	e3580000 	cmp	r8, #0
  145300:	18880600 	stmne	r8, {r9, sl}
  145304:	e89d0003 	ldm	sp, {r0, r1}
  145308:	e28dd008 	add	sp, sp, #8
  14530c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  145310:	e3a02001 	mov	r2, #1
  145314:	e1a01c12 	lsl	r1, r2, ip
  145318:	e1811e32 	orr	r1, r1, r2, lsr lr
  14531c:	e0599006 	subs	r9, r9, r6
  145320:	e1a02312 	lsl	r2, r2, r3
  145324:	e58d1004 	str	r1, [sp, #4]
  145328:	e0caa007 	sbc	sl, sl, r7
  14532c:	e58d2000 	str	r2, [sp]
  145330:	eaffffc8 	b	145258 <__udivmoddi4+0x7c>

00145334 <_init>:
  145334:	e92d4001 	push	{r0, lr}
  145338:	e8bd4001 	pop	{r0, lr}
  14533c:	e12fff1e 	bx	lr

00145340 <_fini>:
  145340:	e92d4001 	push	{r0, lr}
  145344:	e8bd4001 	pop	{r0, lr}
  145348:	e12fff1e 	bx	lr
  14534c:	706d6f63 	.word	0x706d6f63
  145350:	6974656c 	.word	0x6974656c
  145354:	00006e6f 	.word	0x00006e6f
  145358:	20746553 	.word	0x20746553
  14535c:	6c626f6e 	.word	0x6c626f6e
  145360:	696b636f 	.word	0x696b636f
  145364:	6520676e 	.word	0x6520676e
  145368:	726f7272 	.word	0x726f7272
  14536c:	00000021 	.word	0x00000021
  145370:	61657243 	.word	0x61657243
  145374:	6c206574 	.word	0x6c206574
  145378:	65747369 	.word	0x65747369
  14537c:	2064666e 	.word	0x2064666e
  145380:	6b636f73 	.word	0x6b636f73
  145384:	65207465 	.word	0x65207465
  145388:	726f7272 	.word	0x726f7272
  14538c:	7325203a 	.word	0x7325203a
  145390:	72726528 	.word	0x72726528
  145394:	203a6f6e 	.word	0x203a6f6e
  145398:	0a296425 	.word	0x0a296425
  14539c:	00000000 	.word	0x00000000
  1453a0:	73746553 	.word	0x73746553
  1453a4:	6f6b636f 	.word	0x6f6b636f
  1453a8:	72207470 	.word	0x72207470
  1453ac:	65737565 	.word	0x65737565
  1453b0:	20646461 	.word	0x20646461
  1453b4:	6c696166 	.word	0x6c696166
  1453b8:	00006465 	.word	0x00006465
  1453bc:	646e6942 	.word	0x646e6942
  1453c0:	636f7320 	.word	0x636f7320
  1453c4:	2074656b 	.word	0x2074656b
  1453c8:	6f727265 	.word	0x6f727265
  1453cc:	25203a72 	.word	0x25203a72
  1453d0:	72652873 	.word	0x72652873
  1453d4:	3a6f6e72 	.word	0x3a6f6e72
  1453d8:	29642520 	.word	0x29642520
  1453dc:	6466202c 	.word	0x6466202c
  1453e0:	0a64253d 	.word	0x0a64253d
  1453e4:	00000000 	.word	0x00000000
  1453e8:	7473694c 	.word	0x7473694c
  1453ec:	73206e65 	.word	0x73206e65
  1453f0:	656b636f 	.word	0x656b636f
  1453f4:	72652074 	.word	0x72652074
  1453f8:	3a726f72 	.word	0x3a726f72
  1453fc:	28732520 	.word	0x28732520
  145400:	6e727265 	.word	0x6e727265
  145404:	25203a6f 	.word	0x25203a6f
  145408:	000a2964 	.word	0x000a2964
  14540c:	61657243 	.word	0x61657243
  145410:	63206574 	.word	0x63206574
  145414:	6e65696c 	.word	0x6e65696c
  145418:	20646674 	.word	0x20646674
  14541c:	6b636f73 	.word	0x6b636f73
  145420:	65207465 	.word	0x65207465
  145424:	726f7272 	.word	0x726f7272
  145428:	7325203a 	.word	0x7325203a
  14542c:	72726528 	.word	0x72726528
  145430:	203a6f6e 	.word	0x203a6f6e
  145434:	0a296425 	.word	0x0a296425
  145438:	00000000 	.word	0x00000000
  14543c:	656c6573 	.word	0x656c6573
  145440:	65207463 	.word	0x65207463
  145444:	726f7272 	.word	0x726f7272
  145448:	00000000 	.word	0x00000000
  14544c:	746e6f63 	.word	0x746e6f63
  145450:	65756e69 	.word	0x65756e69
  145454:	00000000 	.word	0x00000000
  145458:	69745f75 	.word	0x69745f75
  14545c:	0072656d 	.word	0x0072656d
  145460:	5f6d7475 	.word	0x5f6d7475
  145464:	6574756d 	.word	0x6574756d
  145468:	00000078 	.word	0x00000078
  14546c:	00007325 	.word	0x00007325
  145470:	72657355 	.word	0x72657355
  145474:	3a505041 	.word	0x3a505041
  145478:	73252820 	.word	0x73252820
  14547c:	73612029 	.word	0x73612029
  145480:	74726573 	.word	0x74726573
  145484:	206e6f69 	.word	0x206e6f69
  145488:	6c696166 	.word	0x6c696166
  14548c:	61206465 	.word	0x61206465
  145490:	75662074 	.word	0x75662074
  145494:	6974636e 	.word	0x6974636e
  145498:	253a6e6f 	.word	0x253a6e6f
  14549c:	6c202c73 	.word	0x6c202c73
  1454a0:	20656e69 	.word	0x20656e69
  1454a4:	626d756e 	.word	0x626d756e
  1454a8:	253a7265 	.word	0x253a7265
  1454ac:	000a2064 	.word	0x000a2064
  1454b0:	6e616863 	.word	0x6e616863
  1454b4:	206c656e 	.word	0x206c656e
  1454b8:	30203d3e 	.word	0x30203d3e
  1454bc:	00000000 	.word	0x00000000
  1454c0:	5049776c 	.word	0x5049776c
  1454c4:	0074694b 	.word	0x0074694b
  1454c8:	61746164 	.word	0x61746164
  1454cc:	00646e49 	.word	0x00646e49
  1454d0:	6c207325 	.word	0x6c207325
  1454d4:	20656e69 	.word	0x20656e69
  1454d8:	73206425 	.word	0x73206425
  1454dc:	74646e65 	.word	0x74646e65
  1454e0:	7265206f 	.word	0x7265206f
  1454e4:	0a726f72 	.word	0x0a726f72
  1454e8:	00000000 	.word	0x00000000
  1454ec:	5049776c 	.word	0x5049776c
  1454f0:	2074694b 	.word	0x2074694b
  1454f4:	67617355 	.word	0x67617355
  1454f8:	090a3a65 	.word	0x090a3a65
  1454fc:	5049776c 	.word	0x5049776c
  145500:	2074694b 	.word	0x2074694b
  145504:	20202020 	.word	0x20202020
  145508:	20202020 	.word	0x20202020
  14550c:	20202020 	.word	0x20202020
  145510:	203a2020 	.word	0x203a2020
  145514:	6e757220 	.word	0x6e757220
  145518:	49776c20 	.word	0x49776c20
  14551c:	74694b50 	.word	0x74694b50
  145520:	6177202c 	.word	0x6177202c
  145524:	66207469 	.word	0x66207469
  145528:	6520726f 	.word	0x6520726f
  14552c:	65646874 	.word	0x65646874
  145530:	6f742076 	.word	0x6f742076
  145534:	74746120 	.word	0x74746120
  145538:	0a686361 	.word	0x0a686361
  14553c:	49776c09 	.word	0x49776c09
  145540:	74694b50 	.word	0x74694b50
  145544:	74746120 	.word	0x74746120
  145548:	20686361 	.word	0x20686361
  14554c:	653c2020 	.word	0x653c2020
  145550:	3a3e6874 	.word	0x3a3e6874
  145554:	74612020 	.word	0x74612020
  145558:	68636174 	.word	0x68636174
  14555c:	65687420 	.word	0x65687420
  145560:	76656420 	.word	0x76656420
  145564:	20656369 	.word	0x20656369
  145568:	6874653c 	.word	0x6874653c
  14556c:	6f74203e 	.word	0x6f74203e
  145570:	49776c20 	.word	0x49776c20
  145574:	74694b50 	.word	0x74694b50
  145578:	776c090a 	.word	0x776c090a
  14557c:	694b5049 	.word	0x694b5049
  145580:	65642074 	.word	0x65642074
  145584:	61747461 	.word	0x61747461
  145588:	3c206863 	.word	0x3c206863
  14558c:	3e687465 	.word	0x3e687465
  145590:	6420203a 	.word	0x6420203a
  145594:	74612d65 	.word	0x74612d65
  145598:	68636174 	.word	0x68636174
  14559c:	65687420 	.word	0x65687420
  1455a0:	76656420 	.word	0x76656420
  1455a4:	20656369 	.word	0x20656369
  1455a8:	6874653c 	.word	0x6874653c
  1455ac:	7266203e 	.word	0x7266203e
  1455b0:	6c206d6f 	.word	0x6c206d6f
  1455b4:	4b504977 	.word	0x4b504977
  1455b8:	090a7469 	.word	0x090a7469
  1455bc:	5049776c 	.word	0x5049776c
  1455c0:	2074694b 	.word	0x2074694b
  1455c4:	61666564 	.word	0x61666564
  1455c8:	20746c75 	.word	0x20746c75
  1455cc:	74653c20 	.word	0x74653c20
  1455d0:	203a3e68 	.word	0x203a3e68
  1455d4:	74657320 	.word	0x74657320
  1455d8:	74653c20 	.word	0x74653c20
  1455dc:	61203e68 	.word	0x61203e68
  1455e0:	68742073 	.word	0x68742073
  1455e4:	65642065 	.word	0x65642065
  1455e8:	6c756166 	.word	0x6c756166
  1455ec:	65642074 	.word	0x65642074
  1455f0:	65636976 	.word	0x65636976
  1455f4:	776c090a 	.word	0x776c090a
  1455f8:	694b5049 	.word	0x694b5049
  1455fc:	74732074 	.word	0x74732074
  145600:	73757461 	.word	0x73757461
  145604:	20202020 	.word	0x20202020
  145608:	20202020 	.word	0x20202020
  14560c:	7320203a 	.word	0x7320203a
  145610:	20776f68 	.word	0x20776f68
  145614:	20656874 	.word	0x20656874
  145618:	74617473 	.word	0x74617473
  14561c:	6f207375 	.word	0x6f207375
  145620:	75722066 	.word	0x75722066
  145624:	6e696e6e 	.word	0x6e696e6e
  145628:	776c2067 	.word	0x776c2067
  14562c:	494b5049 	.word	0x494b5049
  145630:	00000074 	.word	0x00000074
  145634:	5049776c 	.word	0x5049776c
  145638:	3a74694b 	.word	0x3a74694b
  14563c:	61747320 	.word	0x61747320
  145640:	20737472 	.word	0x20737472
  145644:	72206f74 	.word	0x72206f74
  145648:	61206e75 	.word	0x61206e75
  14564c:	68742073 	.word	0x68742073
  145650:	65732065 	.word	0x65732065
  145654:	72657672 	.word	0x72657672
  145658:	00000000 	.word	0x00000000
  14565c:	2e2e2e20 	.word	0x2e2e2e20
  145660:	6c696166 	.word	0x6c696166
  145664:	00216465 	.word	0x00216465
  145668:	2e2e2e20 	.word	0x2e2e2e20
  14566c:	70696b73 	.word	0x70696b73
  145670:	21646570 	.word	0x21646570
  145674:	726c4120 	.word	0x726c4120
  145678:	79646165 	.word	0x79646165
  14567c:	696e6920 	.word	0x696e6920
  145680:	6c616974 	.word	0x6c616974
  145684:	64657a69 	.word	0x64657a69
  145688:	00000000 	.word	0x00000000
  14568c:	2e2e2e20 	.word	0x2e2e2e20
  145690:	63637573 	.word	0x63637573
  145694:	65646565 	.word	0x65646565
  145698:	00002164 	.word	0x00002164
  14569c:	5049776c 	.word	0x5049776c
  1456a0:	3a74694b 	.word	0x3a74694b
  1456a4:	696e6920 	.word	0x696e6920
  1456a8:	74652074 	.word	0x74652074
  1456ac:	65642068 	.word	0x65642068
  1456b0:	2e2e2e76 	.word	0x2e2e2e76
  1456b4:	00000000 	.word	0x00000000
  1456b8:	63637573 	.word	0x63637573
  1456bc:	65646565 	.word	0x65646565
  1456c0:	00000064 	.word	0x00000064
  1456c4:	61747461 	.word	0x61747461
  1456c8:	00006863 	.word	0x00006863
  1456cc:	5049776c 	.word	0x5049776c
  1456d0:	3a74694b 	.word	0x3a74694b
  1456d4:	74746120 	.word	0x74746120
  1456d8:	20686361 	.word	0x20686361
  1456dc:	69766564 	.word	0x69766564
  1456e0:	25206563 	.word	0x25206563
  1456e4:	00000a73 	.word	0x00000a73
  1456e8:	6e6e6163 	.word	0x6e6e6163
  1456ec:	6f20746f 	.word	0x6f20746f
  1456f0:	206e6570 	.word	0x206e6570
  1456f4:	61746164 	.word	0x61746164
  1456f8:	6168635f 	.word	0x6168635f
  1456fc:	6c656e6e 	.word	0x6c656e6e
  145700:	6c70202c 	.word	0x6c70202c
  145704:	65736165 	.word	0x65736165
  145708:	6b616d20 	.word	0x6b616d20
  14570c:	75732065 	.word	0x75732065
  145710:	6c206572 	.word	0x6c206572
  145714:	4b504977 	.word	0x4b504977
  145718:	73207469 	.word	0x73207469
  14571c:	65767265 	.word	0x65767265
  145720:	73692072 	.word	0x73692072
  145724:	6e757220 	.word	0x6e757220
  145728:	676e696e 	.word	0x676e696e
  14572c:	00000021 	.word	0x00000021
  145730:	74616564 	.word	0x74616564
  145734:	68636174 	.word	0x68636174
  145738:	00000000 	.word	0x00000000
  14573c:	5049776c 	.word	0x5049776c
  145740:	3a74694b 	.word	0x3a74694b
  145744:	2d656420 	.word	0x2d656420
  145748:	61747461 	.word	0x61747461
  14574c:	64206863 	.word	0x64206863
  145750:	63697665 	.word	0x63697665
  145754:	73252065 	.word	0x73252065
  145758:	0000000a 	.word	0x0000000a
  14575c:	61666564 	.word	0x61666564
  145760:	00746c75 	.word	0x00746c75
  145764:	5049776c 	.word	0x5049776c
  145768:	3a74694b 	.word	0x3a74694b
  14576c:	74657320 	.word	0x74657320
  145770:	65687420 	.word	0x65687420
  145774:	66656420 	.word	0x66656420
  145778:	746c7561 	.word	0x746c7561
  14577c:	76656420 	.word	0x76656420
  145780:	20656369 	.word	0x20656369
  145784:	00007325 	.word	0x00007325
  145788:	74617473 	.word	0x74617473
  14578c:	00007375 	.word	0x00007375
  145790:	5049776c 	.word	0x5049776c
  145794:	3a74694b 	.word	0x3a74694b
  145798:	65687420 	.word	0x65687420
  14579c:	61747320 	.word	0x61747320
  1457a0:	20737574 	.word	0x20737574
  1457a4:	7420666f 	.word	0x7420666f
  1457a8:	61206568 	.word	0x61206568
  1457ac:	63617474 	.word	0x63617474
  1457b0:	20646568 	.word	0x20646568
  1457b4:	69766564 	.word	0x69766564
  1457b8:	20736563 	.word	0x20736563
  1457bc:	66207361 	.word	0x66207361
  1457c0:	6f6c6c6f 	.word	0x6f6c6c6f
  1457c4:	00007377 	.word	0x00007377

001457c8 <__func__.9579>:
  1457c8:	63617473 75725f6b 0000006e              stack_run...

001457d4 <__FUNCTION__.6247>:
  1457d4:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  1457e4:	00000000                                ....

001457e8 <__FUNCTION__.6253>:
  1457e8:	6e616863 5f6c656e 5f646d63 6c706572     channel_cmd_repl
  1457f8:	00000079                                y...

001457fc <__FUNCTION__.6242>:
  1457fc:	6e616863 5f6c656e 5f646d63 646e6573     channel_cmd_send
  14580c:	00000000 3a207325 6c696146 206f7420     ....%s :Fail to 
  14581c:	6f6c6c61 65746163 73206120 65726168     allocate a share
  14582c:	656d2064 79726f6d 735f2021 6b5f6d68     d memory! _shm_k
  14583c:	25207965 000a646c 20656854 6f6c6c61     ey %ld..The allo
  14584c:	65746163 68732064 64657261 6d656d20     cated shared mem
  14585c:	2079726f 73656f64 2074276e 65766168     ory doesn't have
  14586c:	76206120 64696c61 64646120 73736572      a valid address
  14587c:	00000021                                !...

00145880 <__func__.6282>:
  145880:	6e616863 5f6c656e 706d6f63 5f65736f     channel_compose_
  145890:	00646d63 6e616863 206c656e 30203d3e     cmd.channel >= 0
  1458a0:	00000000 68746575 7672735f 00000000     ....ueth_srv....
  1458b0:	68746575 746e695f 00000000 6e65706f     ueth_int....open
  1458c0:	20732520 6c696166 000a6465               %s failed..

001458cc <__FUNCTION__.5856>:
  1458cc:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  1458dc:	00000000                                ....

001458e0 <__FUNCTION__.5845>:
  1458e0:	6e616863 5f6c656e 5f646d63 646e6573     channel_cmd_send
  1458f0:	6365725f 00000076                       _recv...

001458f8 <unet_socket_ops>:
  1458f8:	00108e10 00108e8c 00108eb8 00108ef0     ................
  145908:	00108f20 00108f58 00108f94 00109044      ...X.......D...
  145918:	001090d8 00109120 00109168 00109198     .... ...h.......
  145928:	001091d0 001048d4 00000000              .....H......

00145934 <unet_netdb_ops>:
  145934:	00109278 001093b8 001093e8 00109428     x...........(...

00145944 <unet_inet_family>:
  145944:	00000002 00000002 001458f8 00145934     .........X..4Y..
  145954:	6474656e 00007665                       netdev..

0014595c <__FUNCTION__.7159>:
  14595c:	5f6c6173 74656e75 74656e5f 5f766564     sal_unet_netdev_
  14596c:	5f746573 695f6670 006f666e 20766564     set_pf_info.dev 
  14597c:	52203d21 554e5f54 00004c4c 2d766564     != RT_NULL..dev-
  14598c:	7261703e 2e746e65 65707974 203d3d20     >parent.type == 
  14599c:	4f5f5452 63656a62 6c435f74 5f737361     RT_Object_Class_
  1459ac:	69766544 00006563 69206f54 6974696e     Device..To initi
  1459bc:	7a696c61 65642065 65636976 2073253a     alize device:%s 
  1459cc:	6c696166 202e6465 20656854 6f727265     failed. The erro
  1459dc:	6f632072 69206564 6c252073 00000a64     r code is %ld...

001459ec <__FUNCTION__.6035>:
  1459ec:	68746575 7665645f 5f656369 65726e75     ueth_device_unre
  1459fc:	74736967 00007265                       gister..

00145a04 <__FUNCTION__.6044>:
  145a04:	68746575 7665645f 5f656369 74696e69     ueth_device_init
  145a14:	00000000                                ....

00145a18 <__FUNCTION__.6049>:
  145a18:	68746575 7665645f 5f656369 736f6c63     ueth_device_clos
  145a28:	00000065                                e...

00145a2c <__FUNCTION__.6055>:
  145a2c:	68746575 7665645f 5f656369 746e6f63     ueth_device_cont
  145a3c:	006c6f72 6474656e 00007665 656d616e     rol.netdev..name
  145a4c:	00000000 31335b1b 2f455b6d 6474656e     .....[31m[E/netd
  145a5c:	205d7665 00000000 20656854 7774656e     ev] ....The netw
  145a6c:	206b726f 65746e69 63616672 65642065     ork interface de
  145a7c:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  145a8c:	74726f70 206f7420 20746573 74617473     port to set stat
  145a9c:	002e7375 6d305b1b 0000000a 20656854     us...[0m....The 
  145aac:	7774656e 206b726f 65746e69 63616672     network interfac
  145abc:	65642065 65636976 29732528 746f6e20     e device(%s) not
  145acc:	70757320 74726f70 206f7420 20746573      support to set 
  145adc:	50434844 61747320 2e737574 00000000     DHCP status.....
  145aec:	615f7069 00726464 20656854 7774656e     ip_addr.The netw
  145afc:	206b726f 65746e69 63616672 65642065     ork interface de
  145b0c:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  145b1c:	74726f70 206f7420 20746573 61205049     port to set IP a
  145b2c:	65726464 002e7373 20656854 7774656e     ddress..The netw
  145b3c:	206b726f 65746e69 63616672 65642065     ork interface de
  145b4c:	65636976 29732528 43484420 61632050     vice(%s) DHCP ca
  145b5c:	69626170 7974696c 20736920 62616e65     pability is enab
  145b6c:	202c656c 20746f6e 70707573 2074726f     le, not support 
  145b7c:	20746573 61205049 65726464 002e7373     set IP address..
  145b8c:	6d74656e 006b7361 20656854 7774656e     netmask.The netw
  145b9c:	206b726f 65746e69 63616672 65642065     ork interface de
  145bac:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  145bbc:	74726f70 206f7420 20746573 6d74656e     port to set netm
  145bcc:	206b7361 72646461 2e737365 00000000     ask address.....
  145bdc:	20656854 7774656e 206b726f 65746e69     The network inte
  145bec:	63616672 65642065 65636976 29732528     rface device(%s)
  145bfc:	43484420 61632050 69626170 7974696c      DHCP capability
  145c0c:	20736920 62616e65 202c656c 20746f6e      is enable, not 
  145c1c:	70707573 2074726f 20746573 6d74656e     support set netm
  145c2c:	206b7361 72646461 2e737365 00000000     ask address.....
  145c3c:	00007767 20656854 7774656e 206b726f     gw..The network 
  145c4c:	65746e69 63616672 65642065 65636976     interface device
  145c5c:	29732528 746f6e20 70757320 74726f70     (%s) not support
  145c6c:	206f7420 20746573 65746167 20796177      to set gateway 
  145c7c:	72646461 2e737365 00000000 20656854     address.....The 
  145c8c:	7774656e 206b726f 65746e69 63616672     network interfac
  145c9c:	65642065 65636976 29732528 43484420     e device(%s) DHC
  145cac:	61632050 69626170 7974696c 20736920     P capability is 
  145cbc:	62616e65 202c656c 20746f6e 70707573     enable, not supp
  145ccc:	2074726f 20746573 65746167 20796177     ort set gateway 
  145cdc:	72646461 2e737365 00000000 5f736e64     address.....dns_
  145cec:	76726573 00007265 20656854 626d756e     server..The numb
  145cfc:	6f207265 4e442066 65732053 72657672     er of DNS server
  145d0c:	64252873 65732029 78652074 64656563     s(%d) set exceed
  145d1c:	68742073 616d2065 756d6978 756e206d     s the maximum nu
  145d2c:	7265626d 29642528 0000002e 20656854     mber(%d)....The 
  145d3c:	7774656e 206b726f 65746e69 63616672     network interfac
  145d4c:	65642065 65636976 29732528 746f6e20     e device(%s) not
  145d5c:	70757320 74726f70 206f7420 20746573      support to set 
  145d6c:	20534e44 76726573 61207265 65726464     DNS server addre
  145d7c:	002e7373 74617473 635f7375 626c6c61     ss..status_callb
  145d8c:	006b6361 72646461 6c61635f 6361626c     ack.addr_callbac
  145d9c:	0000006b                                k...

00145da0 <__FUNCTION__.6920>:
  145da0:	6474656e 725f7665 73696765 00726574     netdev_register.

00145db0 <__FUNCTION__.6929>:
  145db0:	6474656e 755f7665 6765726e 65747369     netdev_unregiste
  145dc0:	00000072                                r...

00145dc4 <__FUNCTION__.6975>:
  145dc4:	6474656e 665f7665 6c696d61 65675f79     netdev_family_ge
  145dd4:	00000074                                t...

00145dd8 <__FUNCTION__.6982>:
  145dd8:	6474656e 735f7665 755f7465 00000070     netdev_set_up...

00145de8 <__FUNCTION__.6986>:
  145de8:	6474656e 735f7665 645f7465 006e776f     netdev_set_down.

00145df8 <__FUNCTION__.6991>:
  145df8:	6474656e 645f7665 5f706368 62616e65     netdev_dhcp_enab
  145e08:	0064656c                                led.

00145e0c <__FUNCTION__.6996>:
  145e0c:	6474656e 735f7665 695f7465 64646170     netdev_set_ipadd
  145e1c:	00000072                                r...

00145e20 <__FUNCTION__.7001>:
  145e20:	6474656e 735f7665 6e5f7465 616d7465     netdev_set_netma
  145e30:	00006b73                                sk..

00145e34 <__FUNCTION__.7006>:
  145e34:	6474656e 735f7665 675f7465 00000077     netdev_set_gw...

00145e44 <__FUNCTION__.7012>:
  145e44:	6474656e 735f7665 645f7465 735f736e     netdev_set_dns_s
  145e54:	65767265 00000072                       erver...

00145e5c <__FUNCTION__.7017>:
  145e5c:	6474656e 735f7665 735f7465 75746174     netdev_set_statu
  145e6c:	61635f73 61626c6c 00006b63              s_callback..

00145e78 <__FUNCTION__.7022>:
  145e78:	6474656e 735f7665 615f7465 5f726464     netdev_set_addr_
  145e88:	6c6c6163 6b636162 00000000              callback....

00145e94 <__FUNCTION__.7027>:
  145e94:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145ea4:	7465735f 6170695f 00726464              _set_ipaddr.

00145eb0 <__FUNCTION__.7032>:
  145eb0:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145ec0:	7465735f 74656e5f 6b73616d 00000000     _set_netmask....

00145ed0 <__FUNCTION__.7037>:
  145ed0:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145ee0:	7465735f 0077675f                       _set_gw.

00145ee8 <__FUNCTION__.7044>:
  145ee8:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145ef8:	7465735f 736e645f 7265735f 00726576     _set_dns_server.
  145f08:	00000030                                0...

00145f0c <__FUNCTION__.5841>:
  145f0c:	6474656e 695f7665 64613470 615f7264     netdev_ip4addr_a
  145f1c:	006e6f74 31335b1b 2f455b6d 2e6c6173     ton..[31m[E/sal.
  145f2c:	5d746b73 00000020 6d206f4e 726f6d65     skt] ...No memor
  145f3c:	6f662079 6f732072 74656b63 62617420     y for socket tab
  145f4c:	0a2e656c 00000000 6d305b1b 0000000a     le.......[0m....
  145f5c:	5f6c6173 6b636f6c 00000000 32335b1b     sal_lock.....[32
  145f6c:	2f495b6d 2e6c6173 5d746b73 00000020     m[I/sal.skt] ...
  145f7c:	6b636f53 41207465 72747362 69746361     Socket Abstracti
  145f8c:	4c206e6f 72657961 696e6920 6c616974     on Layer initial
  145f9c:	20657a69 63637573 2e737365 00000000     ize success.....
  145fac:	6b6e696c 2d74722e 65726874 6f2e6461     link.rt-thread.o
  145fbc:	00006772 20706553 32203220 00323230     rg..Sep  2 2022.
  145fcc:	00007325 006e614a 00626546 0072614d     %s..Jan.Feb.Mar.
  145fdc:	00727041 0079614d 006e754a 006c754a     Apr.May.Jun.Jul.
  145fec:	00677541 00706553 0074634f 00766f4e     Aug.Sep.Oct.Nov.
  145ffc:	00636544 3e2d7473 6b636f73 5b737465     Dec.st->sockets[
  14600c:	6b636f73 2d5d7465 67616d3e 3d206369     socket]->magic =
  14601c:	4153203d 4f535f4c 54454b43 47414d5f     = SAL_SOCKET_MAG
  14602c:	00004349 00000030 20746f6e 646e6966     IC..0...not find
  14603c:	74656e20 6b726f77 746e6920 61667265      network interfa
  14604c:	64206563 63697665 79622065 6f727020     ce device by pro
  14605c:	6f636f74 6166206c 796c696d 29642528     tocol family(%d)
  14606c:	0000002e 6b636f73 203d2120 4e5f5452     ....sock != RT_N
  14607c:	004c4c55 2077654e 6b636f73 72207465     ULL.New socket r
  14608c:	73696765 65726574 61662064 64656c69     egistered failed
  14609c:	6572202c 6e727574 72726520 2520726f     , return error %
  1460ac:	00002e64 656d616e 00000000 204c4153     d...name....SAL 
  1460bc:	6b636f73 70207465 6f746f72 206c6f63     socket protocol 
  1460cc:	696d6166 6920796c 7475706e 69616620     family input fai
  1460dc:	2c64656c 74657220 206e7275 6f727265     led, return erro
  1460ec:	64252072 0000002e                       r %d....

001460f4 <__FUNCTION__.6969>:
  1460f4:	5f6c6173 5f746567 6b636f73 00007465     sal_get_socket..

00146104 <__FUNCTION__.6974>:
  146104:	5f6c6173 6b636f6c 00000000              sal_lock....

00146110 <__FUNCTION__.7032>:
  146110:	6b636f73 645f7465 74656c65 00000065     socket_delete...

00146120 <__FUNCTION__.7057>:
  146120:	5f6c6173 646e6962 00000000 6c207325     sal_bind....%s l
  146130:	20656e69 73206425 74646e65 7265206f     ine %d sendto er
  146140:	0a726f72 00000000                       ror.....

00146148 <__func__.6506>:
  146148:	74656e75 6e65735f 006f7464 20736664     unet_sendto.dfs 
  146158:	65726c61 20796461 74696e69 00000a2e     already init....
  146168:	6f6c7366 00006b63 6f6c6466 00006b63     fslock..fdlock..
  146178:	00000030 20534644 6e206466 69207765     0...DFS fd new i
  146188:	61662073 64656c69 6f432021 20646c75     s failed! Could 
  146198:	20746f6e 6e756f66 6e612064 706d6520     not found an emp
  1461a8:	66207974 6e652064 2e797274 00000000     ty fd entry.....
  1461b8:	20746466 4e203d21 004c4c55 735f6466     fdt != NULL.fd_s
  1461c8:	2d746f6c 67616d3e 3d206369 4644203d     lot->magic == DF
  1461d8:	44465f53 47414d5f 00004349              S_FD_MAGIC..

001461e4 <__FUNCTION__.6409>:
  1461e4:	5f736664 6b636f6c 00000000              dfs_lock....

001461f0 <__FUNCTION__.6417>:
  1461f0:	5f736664 6c5f6466 006b636f              dfs_fd_lock.

001461fc <__FUNCTION__.6470>:
  1461fc:	5f746466 725f6466 61656c65 00006573     fdt_fd_release..
  14620c:	5f736664 0072676d                       dfs_mgr.

00146214 <_net_fops>:
  146214:	0010a3f0 0010a26c 0010a2e0 0010a368     ....l.......h...
  146224:	0010a448 7069776c 73797320 206d6574     H...lwip system 
  146234:	65726c61 20796461 74696e69 00000a2e     already init....
  146244:	656e6f64 00000000 6c696146 74206465     done....Failed t
  146254:	7263206f 65746165 6d657320 6f687061     o create semapho
  146264:	00006572 76726573 73656369 49776c2f     re..services/lwI
  146274:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146284:	2f637273 68637261 7379732f 6372615f     src/arch/sys_arc
  146294:	00632e68 69706374 6e695f70 5f747570     h.c.tcpip_input_
  1462a4:	656d6974 00000072 006d6573 64257325     timer...sem.%s%d
  1462b4:	00000000 0000756d 20746573 786f626d     ....mu..set mbox
  1462c4:	6f6c675f 006c6162 786f626d 00000000     _global.mbox....
  1462d4:	6d5f7472 65725f62 72207663 72757465     rt_mb_recv retur
  1462e4:	2064656e 68746977 72726520 0021726f     ned with error!.
  1462f4:	3d212074 5f545220 4c4c554e 00000000     t != RT_NULL....
  146304:	7373410a 69747265 203a6e6f 69206425     .Assertion: %d i
  146314:	7325206e 0000000a 00000030              n %s....0...

00146320 <__FUNCTION__.7499>:
  146320:	5f737973 65726874 6e5f6461 00007765     sys_thread_new..

00146330 <__FUNCTION__.7511>:
  146330:	5f737973 68637261 7373615f 00747265     sys_arch_assert.
  146340:	65657266 20676e69 6e6e6f63 74697720     freeing conn wit
  146350:	74756f68 65726620 676e6965 62637020     hout freeing pcb
  146360:	00000000 76726573 73656369 49776c2f     ....services/lwI
  146370:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146380:	2f637273 2f697061 5f697061 2e62696c     src/api/api_lib.
  146390:	00000063 6e6e6f63 73616820 206f6e20     c...conn has no 
  1463a0:	76636572 786f626d 00000000 6e6e6f63     recvmbox....conn
  1463b0:	63613e2d 74706563 786f626d 6f687320     ->acceptmbox sho
  1463c0:	6e646c75 65207427 74736978 00000000     uldn't exist....
  1463d0:	6e6e6f63 73616820 206f6e20 635f706f     conn has no op_c
  1463e0:	6c706d6f 64657465 00000000 6374656e     ompleted....netc
  1463f0:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  146400:	64696c61 6e6f6320 0000006e 6374656e     alid conn...netc
  146410:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  146420:	64696c61 64646120 00000072 6374656e     alid addr...netc
  146430:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  146440:	64696c61 726f7020 00000074 6374656e     alid port...netc
  146450:	5f6e6e6f 646e6962 6e69203a 696c6176     onn_bind: invali
  146460:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  146470:	6e6e6f63 3a746365 766e6920 64696c61     connect: invalid
  146480:	6e6f6320 0000006e 6374656e 5f6e6e6f      conn...netconn_
  146490:	63736964 656e6e6f 203a7463 61766e69     disconnect: inva
  1464a0:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  1464b0:	5f6e6e6f 7473696c 203a6e65 61766e69     onn_listen: inva
  1464c0:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  1464d0:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  1464e0:	2064696c 6e696f70 00726574 6374656e     lid pointer.netc
  1464f0:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  146500:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  146510:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  146520:	6f702064 65746e69 00000072 6374656e     d pointer...netc
  146530:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  146540:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  146550:	76636572 6e69203a 696c6176 65722064     recv: invalid re
  146560:	626d7663 0000786f 20667562 4e203d21     cvmbox..buf != N
  146570:	004c4c55 3d212070 4c554e20 0000004c     ULL.p != NULL...
  146580:	6374656e 5f6e6e6f 646e6573 6e69203a     netconn_send: in
  146590:	696c6176 6f632064 00006e6e 6374656e     valid conn..netc
  1465a0:	5f6e6e6f 74697277 69203a65 6c61766e     onn_write: inval
  1465b0:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  1465c0:	74697277 69203a65 6c61766e 63206469     write: invalid c
  1465d0:	2d6e6e6f 7079743e 00000065 6374656e     onn->type...netc
  1465e0:	5f6e6e6f 736f6c63 69203a65 6c61766e     onn_close: inval
  1465f0:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  146600:	6e696f6a 61656c5f 675f6576 70756f72     join_leave_group
  146610:	6e69203a 696c6176 6f632064 00006e6e     : invalid conn..
  146620:	6374656e 5f6e6e6f 68746567 6274736f     netconn_gethostb
  146630:	6d616e79 69203a65 6c61766e 6e206469     yname: invalid n
  146640:	00656d61 6374656e 5f6e6e6f 68746567     ame.netconn_geth
  146650:	6274736f 6d616e79 69203a65 6c61766e     ostbyname: inval
  146660:	61206469 00726464 76726573 73656369     id addr.services
  146670:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  146680:	2f322e30 2f637273 2f697061 5f697061     0.2/src/api/api_
  146690:	2e67736d 00000063 76636572 7064755f     msg.c...recv_udp
  1466a0:	73756d20 61682074 61206576 62637020      must have a pcb
  1466b0:	67726120 6e656d75 00000074 76636572      argument...recv
  1466c0:	7064755f 73756d20 61682074 61206576     _udp must have a
  1466d0:	7261206e 656d7567 0000746e 76636572     n argument..recv
  1466e0:	7064755f 6572203a 66207663 7720726f     _udp: recv for w
  1466f0:	676e6f72 62637020 00000021 76636572     rong pcb!...recv
  146700:	7063745f 73756d20 61682074 61206576     _tcp must have a
  146710:	62637020 67726120 6e656d75 00000074      pcb argument...
  146720:	76636572 7063745f 73756d20 61682074     recv_tcp must ha
  146730:	61206576 7261206e 656d7567 0000746e     ve an argument..
  146740:	76636572 7063745f 6572203a 66207663     recv_tcp: recv f
  146750:	7720726f 676e6f72 62637020 00000021     or wrong pcb!...
  146760:	6e6e6f63 203d2120 4c4c554e 00000000     conn != NULL....
  146770:	6e6e6f63 75633e2d 6e657272 736d5f74     conn->current_ms
  146780:	3d212067 4c554e20 0000004c 76616e69     g != NULL...inav
  146790:	2064696c 635f706f 6c706d6f 64657465     lid op_completed
  1467a0:	6d65735f 00000000 6e6e6f63 75633e2d     _sem....conn->cu
  1467b0:	6e657272 736d5f74 3d3d2067 4c554e20     rrent_msg == NUL
  1467c0:	0000004c 5f626370 3a77656e 62637020     L...pcb_new: pcb
  1467d0:	726c6120 79646165 6c6c6120 7461636f      already allocat
  1467e0:	00006465 6374656e 5f6e6e6f 6f6c6c61     ed..netconn_allo
  1467f0:	75203a63 6665646e 64656e69 74656e20     c: undefined net
  146800:	6e6e6f63 7079745f 00000065 20424350     conn_type...PCB 
  146810:	7473756d 20656220 6c616564 61636f6c     must be dealloca
  146820:	20646574 7374756f 20656469 73696874     ted outside this
  146830:	6e756620 6f697463 0000006e 76636572      function...recv
  146840:	786f626d 73756d20 65622074 61656420     mbox must be dea
  146850:	636f6c6c 64657461 66656220 2065726f     llocated before 
  146860:	6c6c6163 20676e69 73696874 6e756620     calling this fun
  146870:	6f697463 0000006e 65636361 626d7470     ction...acceptmb
  146880:	6d20786f 20747375 64206562 6c6c6165     ox must be deall
  146890:	7461636f 62206465 726f6665 61632065     ocated before ca
  1468a0:	6e696c6c 68742067 66207369 74636e75     lling this funct
  1468b0:	006e6f69 61766e69 2064696c 6e6e6f63     ion.invalid conn
  1468c0:	00000000 73696874 20736920 20726f66     ....this is for 
  1468d0:	20706374 6374656e 736e6e6f 6c6e6f20     tcp netconns onl
  1468e0:	00000079 6e6e6f63 73756d20 65622074     y...conn must be
  1468f0:	206e6920 74617473 454e2065 4e4f4354      in state NETCON
  146900:	4c435f4e 0045534f 20626370 65726c61     N_CLOSE.pcb alre
  146910:	20796461 736f6c63 00006465 736f6c43     ady closed..Clos
  146920:	20676e69 696c2061 6e657473 62637020     ing a listen pcb
  146930:	79616d20 746f6e20 69616620 0000216c      may not fail!..
  146940:	20727265 45203d21 4f5f5252 0000004b     err != ERR_OK...
  146950:	6374656e 206e6e6f 74617473 72652065     netconn state er
  146960:	00726f72 636f6c62 676e696b 6e6f6320     ror.blocking con
  146970:	7463656e 206e6920 676f7270 73736572     nect in progress
  146980:	00000000 65726c61 20796461 74697277     ....already writ
  146990:	20676e69 6320726f 69736f6c 0000676e     ing or closing..
  1469a0:	74617473 00002165 6e6e6f63 74733e2d     state!..conn->st
  1469b0:	20657461 4e203d3d 4f435445 435f4e4e     ate == NETCONN_C
  1469c0:	454e4e4f 00005443 6e6f6328 633e2d6e     ONNECT..(conn->c
  1469d0:	65727275 6d5f746e 21206773 554e203d     urrent_msg != NU
  1469e0:	20294c4c 63207c7c 2d6e6e6f 5f6e693e     LL) || conn->in_
  1469f0:	5f6e6f6e 636f6c62 676e696b 6e6f635f     non_blocking_con
  146a00:	7463656e 00000000 636f6c62 676e696b     nect....blocking
  146a10:	6e6f6320 7463656e 61747320 65206574      connect state e
  146a20:	726f7272 00000000 61766e49 2064696c     rror....Invalid 
  146a30:	6374656e 206e6e6f 65707974 00000000     netconn type....
  146a40:	6e6e6f63 74733e2d 20657461 4e203d3d     conn->state == N
  146a50:	4f435445 575f4e4e 45544952 00000000     ETCONN_WRITE....
  146a60:	6e6e6f63 63703e2d 63742e62 3d212070     conn->pcb.tcp !=
  146a70:	4c554e20 0000004c 6e6e6f63 72773e2d      NULL...conn->wr
  146a80:	5f657469 7366666f 3c207465 6e6f6320     ite_offset < con
  146a90:	633e2d6e 65727275 6d5f746e 3e2d6773     n->current_msg->
  146aa0:	2e67736d 656c2e77 0000006e 7069776c     msg.w.len...lwip
  146ab0:	74656e5f 6e6e6f63 5f6f645f 74697277     _netconn_do_writ
  146ac0:	726f6d65 69203a65 6c61766e 6c206469     emore: invalid l
  146ad0:	74676e65 00002168 2d67736d 67736d3e     ength!..msg->msg
  146ae0:	6c2e772e 21206e65 0030203d 61766e69     .w.len != 0.inva
  146af0:	2064696c 6374656e 5f6e6e6f 65707974     lid netconn_type
  146b00:	00000000                                ....

00146b04 <err_to_errno_table>:
  146b04:	00000000 0000000c 00000069 0000000b     ........i.......
  146b14:	00000071 00000073 00000016 0000000b     q...s...........
  146b24:	00000062 00000072 0000006a 0000006b     b...r...j...k...
  146b34:	ffffffff 00000067 00000068 0000006b     ....g...h...k...
  146b44:	00000005 76726573 73656369 49776c2f     ....services/lwI
  146b54:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146b64:	2f637273 2f697061 6274656e 632e6675     src/api/netbuf.c
  146b74:	00000000 6274656e 615f6675 636f6c6c     ....netbuf_alloc
  146b84:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  146b94:	63656863 6874206b 66207461 74737269     check that first
  146ba4:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  146bb4:	00657a69 6274656e 665f6675 3a656572     ize.netbuf_free:
  146bc4:	766e6920 64696c61 66756220 00000000      invalid buf....
  146bd4:	6274656e 725f6675 203a6665 61766e69     netbuf_ref: inva
  146be4:	2064696c 00667562 6274656e 635f6675     lid buf.netbuf_c
  146bf4:	6e696168 6e69203a 696c6176 65682064     hain: invalid he
  146c04:	00006461 6274656e 635f6675 6e696168     ad..netbuf_chain
  146c14:	6e69203a 696c6176 61742064 00006c69     : invalid tail..
  146c24:	6274656e 645f6675 3a617461 766e6920     netbuf_data: inv
  146c34:	64696c61 66756220 00000000 6274656e     alid buf....netb
  146c44:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  146c54:	74616420 72747061 00000000 6274656e      dataptr....netb
  146c64:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  146c74:	6e656c20 00000000 6274656e 6e5f6675      len....netbuf_n
  146c84:	3a747865 766e6920 64696c61 66756220     ext: invalid buf
  146c94:	00000000 6274656e 665f6675 74737269     ....netbuf_first
  146ca4:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  146cb4:	656d616e 206e656c 74207369 6c206f6f     namelen is too l
  146cc4:	00676e6f 76726573 73656369 49776c2f     ong.services/lwI
  146cd4:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146ce4:	2f637273 2f697061 6474656e 00632e62     src/api/netdb.c.
  146cf4:	61746f74 69735f6c 3c20657a 454e203d     total_size <= NE
  146d04:	5f424454 4d454c45 5a49535f 70203a45     TDB_ELEM_SIZE: p
  146d14:	7361656c 65722065 74726f70 69687420     lease report thi
  146d24:	00002173 6377656e 206e6e6f 4e203d21     s!..newconn != N
  146d34:	004c4c55 76726573 73656369 49776c2f     ULL.services/lwI
  146d44:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146d54:	2f637273 2f697061 6b636f73 2e737465     src/api/sockets.
  146d64:	00000063 61766e69 2064696c 6b636f73     c...invalid sock
  146d74:	69207465 7865646e 00000000 72646461     et index....addr
  146d84:	6c617620 62206469 61207475 6c726464      valid but addrl
  146d94:	4e206e65 004c4c55 7069776c 6e69625f     en NULL.lwip_bin
  146da4:	69203a64 6c61766e 61206469 65726464     d: invalid addre
  146db4:	00007373 6b636f73 616c3e2d 61647473     ss..sock->lastda
  146dc4:	3d206174 554e203d 00004c4c 7069776c     ta == NULL..lwip
  146dd4:	6e6f635f 7463656e 6e69203a 696c6176     _connect: invali
  146de4:	64612064 73657264 00000073 20667562     d address...buf 
  146df4:	4e203d21 004c4c55 61766e69 2064696c     != NULL.invalid 
  146e04:	79706f63 2c6e656c 6e656c20 756f7720     copylen, len wou
  146e14:	7520646c 7265646e 776f6c66 00000000     ld underflow....
  146e24:	7069776c 6e65735f 67736d64 6e69203a     lwip_sendmsg: in
  146e34:	696c6176 736d2064 72646867 00000000     valid msghdr....
  146e44:	7069776c 6e65735f 67736d64 6e69203a     lwip_sendmsg: in
  146e54:	696c6176 736d2064 72646867 766f6920     valid msghdr iov
  146e64:	00000000 7069776c 6e65735f 67736d64     ....lwip_sendmsg
  146e74:	6e69203a 696c6176 736d2064 72646867     : invalid msghdr
  146e84:	6d616e20 00000065 5f766f69 206e656c      name...iov_len 
  146e94:	3175203c 00745f36 7069776c 6e65735f     < u16_t.lwip_sen
  146ea4:	3a6f7464 7a697320 756d2065 66207473     dto: size must f
  146eb4:	69207469 3175206e 00745f36 7069776c     it in u16_t.lwip
  146ec4:	6e65735f 3a6f7464 766e6920 64696c61     _sendto: invalid
  146ed4:	64646120 73736572 00000000 6165726e      address....nrea
  146ee4:	3e207964 0030203d 6b636f73 65733e2d     dy >= 0.sock->se
  146ef4:	7463656c 6961775f 676e6974 30203e20     lect_waiting > 0
  146f04:	00000000 656c6573 635f7463 72702e62     ....select_cb.pr
  146f14:	3d207665 554e203d 00004c4c 656c6573     ev == NULL..sele
  146f24:	635f7463 72702e62 21207665 554e203d     ct_cb.prev != NU
  146f34:	00004c4c 6e6b6e75 206e776f 6e657665     LL..unknown even
  146f44:	00000074 69706374 68745f70 64616572     t...tcpip_thread
  146f54:	6e69203a 696c6176 656d2064 67617373     : invalid messag
  146f64:	00000065 76726573 73656369 49776c2f     e...services/lwI
  146f74:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146f84:	2f637273 2f697061 69706374 00632e70     src/api/tcpip.c.
  146f94:	61766e49 2064696c 786f626d 00000000     Invalid mbox....
  146fa4:	6c696166 74206465 7263206f 65746165     failed to create
  146fb4:	70637420 745f7069 61657268 626d2064      tcpip_thread mb
  146fc4:	0000786f 6c696166 74206465 7263206f     ox..failed to cr
  146fd4:	65746165 636f6c20 63745f6b 5f706970     eate lock_tcpip_
  146fe4:	65726f63 00000000 69706374 00000070     core....tcpip...
  146ff4:	7778797a 73747576 6f707172 6b6c6d6e     zyxwvutsrqponmlk
  147004:	6768696a 63646566 38396162 34353637     jihgfedcba987654
  147014:	30313233 34333231 38373635 63626139     3210123456789abc
  147024:	67666564 6b6a6968 6f6e6d6c 73727170     defghijklmnopqrs
  147034:	77767574 007a7978                       tuvwxyz.

0014703c <dns_mquery_v4group>:
  14703c:	fb0000e0 20736e64 76726573 6f207265     ....dns server o
  14704c:	6f207475 72612066 00796172 76726573     ut of array.serv
  14705c:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  14706c:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  14707c:	736e642f 0000632e 61727261 6e692079     /dns.c..array in
  14708c:	20786564 2074756f 6220666f 646e756f     dex out of bound
  14709c:	00000073 6e6b6e75 206e776f 5f736e64     s...unknown dns_
  1470ac:	6c626174 6e652065 20797274 74617473     table entry stat
  1470bc:	00003a65 656c6564 6d206574 00000065     e:..delete me...
  1470cc:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  1470dc:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  1470ec:	65726f63 656e692f 68635f74 6d75736b     core/inet_chksum
  1470fc:	0000632e 5f574152 00424350              .c..RAW_PCB.

00147108 <memp_RAW_PCB>:
  147108:	00147100 0014e0e4 0004001c 00151bb0     .q..............
  147118:	0014e0f4 5f504455 00424350              ....UDP_PCB.

00147124 <memp_UDP_PCB>:
  147124:	0014711c 0014e0f8 00080028 0015ba24     .q......(...$...
  147134:	0014e108 5f504354 00424350              ....TCP_PCB.

00147140 <memp_TCP_PCB>:
  147140:	00147138 0014e10c 000800a4 0015c210     8q..............
  147150:	0014e11c 5f504354 5f424350 5453494c     ....TCP_PCB_LIST
  147160:	00004e45                                EN..

00147164 <memp_TCP_PCB_LISTEN>:
  147164:	00147154 0014e120 00080020 0015b4c4     Tq.. ... .......
  147174:	0014e130 5f504354 00474553              0...TCP_SEG.

00147180 <memp_TCP_SEG>:
  147180:	00147178 0014e134 00280010 00151cd4     xq..4.....(.....
  147190:	0014e144 53414552 54414453 00000041     D...REASSDATA...

001471a0 <memp_REASSDATA>:
  1471a0:	00147194 0014e148 000a0020 0015b728     .q..H... ...(...
  1471b0:	0014e158 47415246 5542505f 00000046     X...FRAG_PBUF...

001471c0 <memp_FRAG_PBUF>:
  1471c0:	001471b4 0014e15c 000f0018 00158abc     .q..\...........
  1471d0:	0014e16c 4254454e 00004655              l...NETBUF..

001471dc <memp_NETBUF>:
  1471dc:	001471d4 0014e170 00400010 0014f78c     .q..p.....@.....
  1471ec:	0014e180 4354454e 004e4e4f              ....NETCONN.

001471f8 <memp_NETCONN>:
  1471f8:	001471f0 0014e184 00080040 0015bcc8     .q......@.......
  147208:	0014e194 49504354 534d5f50 50415f47     ....TCPIP_MSG_AP
  147218:	00000049                                I...

0014721c <memp_TCPIP_MSG_API>:
  14721c:	0014720c 0014e198 00400010 00158ebc     .r........@.....
  14722c:	0014e1a8 49504354 534d5f50 4e495f47     ....TCPIP_MSG_IN
  14723c:	00544b50                                PKT.

00147240 <memp_TCPIP_MSG_INPKT>:
  147240:	00147230 0014e1ac 00400010 00150690     0r........@.....
  147250:	0014e1bc 5f505241 55455551 00000045     ....ARP_QUEUE...

00147260 <memp_ARP_QUEUE>:
  147260:	00147254 0014e1c0 001e0008 00151594     Tr..............
  147270:	0014e1d0 504d4749 4f52475f 00005055     ....IGMP_GROUP..

00147280 <memp_IGMP_GROUP>:
  147280:	00147274 0014e1d4 00080010 0015c02c     tr..........,...
  147290:	0014e1e4 5f535953 454d4954 0054554f     ....SYS_TIMEOUT.

001472a0 <memp_SYS_TIMEOUT>:
  1472a0:	00147294 0014e1e8 00070010 0015c894     .r..............
  1472b0:	0014e1f8 4454454e 00000042              ....NETDB...

001472bc <memp_NETDB>:
  1472bc:	001472b4 0014e1fc 00010134 0014f628     .r......4...(...
  1472cc:	0014e20c 46554250 4645525f 4d4f522f     ....PBUF_REF/ROM
  1472dc:	00000000                                ....

001472e0 <memp_PBUF>:
  1472e0:	001472d0 0014e210 00400030 00159dc0     .r......0.@.....
  1472f0:	0014e220 46554250 4f4f505f 0000004c      ...PBUF_POOL...

00147300 <memp_PBUF_POOL>:
  147300:	001472f4 0014e224 0010061c 00152638     .r..$.......8&..
  147310:	0014e234                                4...

00147314 <memp_pools>:
  147314:	00147108 00147124 00147140 00147164     .q..$q..@q..dq..
  147324:	00147180 001471a0 001471c0 001471dc     .q...q...q...q..
  147334:	001471f8 0014721c 00147240 00147260     .q...r..@r..`r..
  147344:	00147280 001472a0 001472bc 001472e0     .r...r...r...r..
  147354:	00147300 76726573 73656369 49776c2f     .s..services/lwI
  147364:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  147374:	2f637273 65726f63 6d656d2f 00632e70     src/core/memp.c.
  147384:	65746564 64657463 6d656d20 766f2070     detected memp ov
  147394:	6c667265 6920776f 6f70206e 00206c6f     erflow in pool .
	...
  147404:	65746564 64657463 6d656d20 6e752070     detected memp un
  147414:	66726564 20776f6c 70206e69 206c6f6f     derflow in pool 
	...
  147484:	706d656d 6c616d5f 3a636f6c 6d656d20     memp_malloc: mem
  147494:	72702070 7265706f 6120796c 6e67696c     p properly align
  1474a4:	00006465 61766e69 2064696c 6c6f6f70     ed..invalid pool
  1474b4:	73656420 00000063 706d656d 6c616d5f      desc...memp_mal
  1474c4:	3a636f6c 70797420 203c2065 504d454d     loc: type < MEMP
  1474d4:	58414d5f 00000000 706d656d 6572665f     _MAX....memp_fre
  1474e4:	6d203a65 70206d65 65706f72 20796c72     e: mem properly 
  1474f4:	67696c61 0064656e 706d656d 6572665f     aligned.memp_fre
  147504:	74203a65 20657079 454d203c 4d5f504d     e: type < MEMP_M
  147514:	00005841 69206f4e 2074696e 636e7566     AX..No init func
  147524:	6e6f6974 76696720 00006e65 76726573     tion given..serv
  147534:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147544:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147554:	74656e2f 632e6669 00000000 66206669     /netif.c....if f
  147564:	74737269 203d2120 4c4c554e 616c202c     irst != NULL, la
  147574:	6d207473 20747375 6f736c61 20656220     st must also be 
  147584:	4e203d21 004c4c55 75676f62 62702073     != NULL.bogus pb
  147594:	203a6675 206e656c 74203d21 6c5f746f     uf: len != tot_l
  1475a4:	62206e65 6e207475 20747865 4e203d3d     en but next == N
  1475b4:	214c4c55 00000000 756f6873 6e20646c     ULL!....should n
  1475c4:	6220746f 756e2065 73206c6c 65636e69     ot be null since
  1475d4:	72696620 21207473 616c203d 00217473      first != last!.
  1475e4:	66756270 6c6c615f 203a636f 20646162     pbuf_alloc: bad 
  1475f4:	66756270 79616c20 00007265 76726573     pbuf layer..serv
  147604:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147614:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147624:	7562702f 00632e66 66756270 6c6c615f     /pbuf.c.pbuf_all
  147634:	203a636f 66756270 3e2d7020 6c796170     oc: pbuf p->payl
  147644:	2064616f 706f7270 796c7265 696c6120     oad properly ali
  147654:	64656e67 00000000 63656863 2d70206b     gned....check p-
  147664:	7961703e 64616f6c 70202b20 656c3e2d     >payload + p->le
  147674:	6f64206e 6e207365 6f20746f 66726576     n does not overf
  147684:	20776f6c 66756270 00000000 46554250     low pbuf....PBUF
  147694:	4f4f505f 55425f4c 5a495346 756d2045     _POOL_BUFSIZE mu
  1476a4:	62207473 69622065 72656767 61687420     st be bigger tha
  1476b4:	454d206e 4c415f4d 4d4e4749 00544e45     n MEM_ALIGNMENT.
  1476c4:	5f6d6572 206e656c 616d203c 31755f78     rem_len < max_u1
  1476d4:	00745f36 66756270 6c6c615f 203a636f     6_t.pbuf_alloc: 
  1476e4:	66756270 3e2d7120 6c796170 2064616f     pbuf q->payload 
  1476f4:	706f7270 796c7265 696c6120 64656e67     properly aligned
  147704:	00000000 66756270 6c6c615f 203a636f     ....pbuf_alloc: 
  147714:	66756270 61703e2d 616f6c79 72702064     pbuf->payload pr
  147724:	7265706f 6120796c 6e67696c 00006465     operly aligned..
  147734:	66756270 6c6c615f 203a636f 6f727265     pbuf_alloc: erro
  147744:	756f656e 79742073 00006570 66756270     neous type..pbuf
  147754:	6c6c615f 6465636f 7375635f 3a6d6f74     _alloced_custom:
  147764:	64616220 75627020 616c2066 00726579      bad pbuf layer.
  147774:	66756270 6165725f 636f6c6c 2070203a     pbuf_realloc: p 
  147784:	4e203d21 004c4c55 66756270 6165725f     != NULL.pbuf_rea
  147794:	636f6c6c 6173203a 7020656e 79743e2d     lloc: sane p->ty
  1477a4:	00006570 776f7267 6d203c20 755f7861     pe..grow < max_u
  1477b4:	745f3631 00000000 66756270 6165725f     16_t....pbuf_rea
  1477c4:	636f6c6c 2071203a 4e203d21 004c4c55     lloc: q != NULL.
  1477d4:	5f6d656d 6d697274 74657220 656e7275     mem_trim returne
  1477e4:	20712064 4e203d3d 004c4c55 3d212070     d q == NULL.p !=
  1477f4:	4c554e20 0000004c 72636e69 6e656d65      NULL...incremen
  147804:	616d5f74 74696e67 20656475 70203d3c     t_magnitude <= p
  147814:	656c3e2d 0000006e 20646162 66756270     ->len...bad pbuf
  147824:	70797420 00000065 66756270 6572665f      type...pbuf_fre
  147834:	73203a65 20656e61 65707974 00000000     e: sane type....
  147844:	66756270 6572665f 70203a65 65723e2d     pbuf_free: p->re
  147854:	203e2066 00000030 3e2d6370 74737563     f > 0...pc->cust
  147864:	665f6d6f 5f656572 636e7566 6e6f6974     om_free_function
  147874:	203d2120 4c4c554e 00000000 66756270      != NULL....pbuf
  147884:	66657220 65766f20 6f6c6672 00000077      ref overflow...
  147894:	21206828 554e203d 20294c4c 28202626     (h != NULL) && (
  1478a4:	3d212074 4c554e20 2820294c 676f7270     t != NULL) (prog
  1478b4:	6d6d6172 76207265 616c6f69 20736574     rammer violates 
  1478c4:	29495041 00000000 743e2d70 6c5f746f     API)....p->tot_l
  1478d4:	3d206e65 2d70203d 6e656c3e 666f2820     en == p->len (of
  1478e4:	73616c20 62702074 69206675 6863206e      last pbuf in ch
  1478f4:	296e6961 00000000 6e3e2d70 20747865     ain)....p->next 
  147904:	4e203d3d 004c4c55 743e2d70 6c5f746f     == NULL.p->tot_l
  147914:	3d206e65 2d70203d 6e656c3e 71202b20     en == p->len + q
  147924:	6f743e2d 656c5f74 0000006e 743e2d70     ->tot_len...p->t
  147934:	6c5f746f 3d206e65 2d70203d 6e656c3e     ot_len == p->len
  147944:	00000000 66756270 706f635f 74203a79     ....pbuf_copy: t
  147954:	65677261 6f6e2074 69622074 6e652067     arget not big en
  147964:	6867756f 206f7420 646c6f68 756f7320     ough to hold sou
  147974:	00656372 7366666f 745f7465 3d3c206f     rce.offset_to <=
  147984:	745f7020 6c3e2d6f 00006e65 7366666f      p_to->len..offs
  147994:	665f7465 206d6f72 70203d3c 6f72665f     et_from <= p_fro
  1479a4:	6c3e2d6d 00006e65 6f745f70 203d2120     m->len..p_to != 
  1479b4:	4c4c554e 00000000 66756270 706f635f     NULL....pbuf_cop
  1479c4:	20292879 73656f64 746f6e20 6c6c6120     y() does not all
  1479d4:	7020776f 656b6361 75712074 73657565     ow packet queues
  1479e4:	00000021 66756270 706f635f 61705f79     !...pbuf_copy_pa
  1479f4:	61697472 69203a6c 6c61766e 62206469     rtial: invalid b
  147a04:	00006675 66756270 706f635f 61705f79     uf..pbuf_copy_pa
  147a14:	61697472 69203a6c 6c61766e 64206469     rtial: invalid d
  147a24:	70617461 00007274 66756270 6b61745f     ataptr..pbuf_tak
  147a34:	69203a65 6c61766e 62206469 00006675     e: invalid buf..
  147a44:	66756270 6b61745f 69203a65 6c61766e     pbuf_take: inval
  147a54:	64206469 70617461 00007274 66756270     id dataptr..pbuf
  147a64:	6b61745f 62203a65 6e206675 6c20746f     _take: buf not l
  147a74:	65677261 6f6e6520 00686775 66756270     arge enough.pbuf
  147a84:	6b61745f 69203a65 6c61766e 70206469     _take: invalid p
  147a94:	00667562 20646964 20746f6e 79706f63     buf.did not copy
  147aa4:	6c6c6120 74616420 00000061 66756270      all data...pbuf
  147ab4:	706f635f 61662079 64656c69 00000000     _copy failed....
  147ac4:	20776172 20626370 76636572 6c616320     raw pcb recv cal
  147ad4:	6361626c 6c61206b 65726574 62702064     lback altered pb
  147ae4:	70206675 6f6c7961 70206461 746e696f     uf payload point
  147af4:	77207265 6f687469 65207475 6e697461     er without eatin
  147b04:	61702067 74656b63 00000000 76726573     g packet....serv
  147b14:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147b24:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147b34:	7761722f 0000632e 276e6143 65722074     /raw.c..Can't re
  147b44:	726f7473 65682065 72656461 20657720     store header we 
  147b54:	7473756a 6d657220 6465766f 00000021     just removed!...
  147b64:	0a73250a 00000009 74696d78 6825203a     .%s.....xmit: %h
  147b74:	00090a75 76636572 6825203a 00090a75     u...recv: %hu...
  147b84:	203a7766 0a756825 00000009 706f7264     fw: %hu.....drop
  147b94:	6825203a 00090a75 656b6863 203a7272     : %hu...chkerr: 
  147ba4:	0a756825 00000009 656e656c 203a7272     %hu.....lenerr: 
  147bb4:	0a756825 00000009 656d656d 203a7272     %hu.....memerr: 
  147bc4:	0a756825 00000009 72657472 25203a72     %hu.....rterr: %
  147bd4:	090a7568 00000000 746f7270 3a727265     hu......proterr:
  147be4:	75682520 0000090a 6574706f 203a7272      %hu....opterr: 
  147bf4:	0a756825 00000009 3a727265 75682520     %hu.....err: %hu
  147c04:	0000090a 68636163 74696865 6825203a     ....cachehit: %h
  147c14:	00000a75 765f7872 25203a31 090a7568     u...rx_v1: %hu..
  147c24:	00000000 675f7872 70756f72 6825203a     ....rx_group: %h
  147c34:	00090a75 675f7872 72656e65 203a6c61     u...rx_general: 
  147c44:	0a756825 00000009 725f7872 726f7065     %hu.....rx_repor
  147c54:	25203a74 090a7568 00000000 6a5f7874     t: %hu......tx_j
  147c64:	3a6e696f 75682520 0000090a 6c5f7874     oin: %hu....tx_l
  147c74:	65766165 6825203a 00090a75 725f7874     eave: %hu...tx_r
  147c84:	726f7065 25203a74 000a7568 4d454d0a     eport: %hu...MEM
  147c94:	0a732520 00000009 69617661 25203a6c      %s.....avail: %
  147ca4:	090a756c 00000000 64657375 6c25203a     lu......used: %l
  147cb4:	00090a75 3a78616d 756c2520 0000090a     u...max: %lu....
  147cc4:	3a727265 756c2520 0000000a 5359530a     err: %lu.....SYS
  147cd4:	0000090a 2e6d6573 64657375 2520203a     ....sem.used:  %
  147ce4:	090a756c 00000000 2e6d6573 3a78616d     lu......sem.max:
  147cf4:	25202020 090a756c 00000000 2e6d6573        %lu......sem.
  147d04:	3a727265 25202020 090a756c 00000000     err:   %lu......
  147d14:	6574756d 73752e78 203a6465 0a756c25     mutex.used: %lu.
  147d24:	00000009 6574756d 616d2e78 20203a78     ....mutex.max:  
  147d34:	0a756c25 00000009 6574756d 72652e78     %lu.....mutex.er
  147d44:	20203a72 0a756c25 00000009 786f626d     r:  %lu.....mbox
  147d54:	6573752e 20203a64 0a756c25 00000009     .used:  %lu.....
  147d64:	786f626d 78616d2e 2020203a 0a756c25     mbox.max:   %lu.
  147d74:	00000009 786f626d 7272652e 2020203a     ....mbox.err:   
  147d84:	0a756c25 00000000 4b4e494c 00000000     %lu.....LINK....
  147d94:	41485445 00005052 465f5049 00474152     ETHARP..IP_FRAG.
  147da4:	00005049 504d4749 00000000 504d4349     IP..IGMP....ICMP
  147db4:	00000000 00504455 00504354 50414548     ....UDP.TCP.HEAP
  147dc4:	00000000 534f4c43 00004445 5453494c     ....CLOSED..LIST
  147dd4:	00004e45 5f4e5953 544e4553 00000000     EN..SYN_SENT....
  147de4:	5f4e5953 44564352 00000000 41545345     SYN_RCVD....ESTA
  147df4:	53494c42 00444548 5f4e4946 54494157     BLISHED.FIN_WAIT
  147e04:	0000315f 5f4e4946 54494157 0000325f     _1..FIN_WAIT_2..
  147e14:	534f4c43 41575f45 00005449 534f4c43     CLOSE_WAIT..CLOS
  147e24:	00474e49 5453414c 4b43415f 00000000     ING.LAST_ACK....
  147e34:	454d4954 4941575f 00000054              TIME_WAIT...

00147e40 <tcp_state_str>:
  147e40:	00147dc8 00147dd0 00147dd8 00147de4     .}...}...}...}..
  147e50:	00147df0 00147dfc 00147e08 00147e14     .}...}...~...~..
  147e60:	00147e20 00147e28 00147e34               ~..(~..4~..

00147e6c <tcp_backoff>:
  147e6c:	04030201 07070605 07070707 00000007     ................

00147e7c <tcp_persist_backoff>:
  147e7c:	180c0603 00786030                       ....0`x.

00147e84 <tcp_pcb_lists>:
  147e84:	0015cc40 0015cc44 0015cc38 0015cc48     @...D...8...H...
  147e94:	20626370 4e203d21 004c4c55 76726573     pcb != NULL.serv
  147ea4:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147eb4:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147ec4:	7063742f 0000632e 2d626370 6174733e     /tcp.c..pcb->sta
  147ed4:	3d206574 494c203d 4e455453 00000000     te == LISTEN....
  147ee4:	2d626370 616c663e 26207367 5f465420     pcb->flags & TF_
  147ef4:	4c435852 4445534f 00000000 276e6f64     RXCLOSED....don'
  147f04:	61632074 74206c6c 615f7063 74726f62     t call tcp_abort
  147f14:	7063742f 6162615f 6e6f646e 726f6620     /tcp_abandon for
  147f24:	73696c20 2d6e6574 73626370 00000000      listen-pcbs....
  147f34:	5f706374 646e6962 6163203a 6e6f206e     tcp_bind: can on
  147f44:	6220796c 20646e69 73206e69 65746174     ly bind in state
  147f54:	4f4c4320 00444553 5f706374 7473696c      CLOSED.tcp_list
  147f64:	203a6e65 20626370 65726c61 20796461     en: pcb already 
  147f74:	6e6e6f63 65746365 00000064 5f77656e     connected...new_
  147f84:	5f766372 5f6e6e61 20646e77 30203d3c     rcv_ann_wnd <= 0
  147f94:	66666678 00000066 276e6f64 61632074     xffff...don't ca
  147fa4:	74206c6c 725f7063 65766365 6f662064     ll tcp_recved fo
  147fb4:	696c2072 6e657473 6263702d 00000073     r listen-pcbs...
  147fc4:	5f706374 76636572 203a6465 206e656c     tcp_recved: len 
  147fd4:	70617277 20646570 5f766372 0a646e77     wrapped rcv_wnd.
  147fe4:	00000000 5f706374 6e6e6f63 3a746365     ....tcp_connect:
  147ff4:	6e616320 6c6e6f20 6f632079 63656e6e      can only connec
  148004:	72662074 73206d6f 65746174 4f4c4320     t from state CLO
  148014:	00444553 5f706374 776f6c73 3a726d74     SED.tcp_slowtmr:
  148024:	74636120 20657669 2d626370 6174733e      active pcb->sta
  148034:	21206574 4c43203d 4445534f 0000000a     te != CLOSED....
  148044:	5f706374 776f6c73 3a726d74 74636120     tcp_slowtmr: act
  148054:	20657669 2d626370 6174733e 21206574     ive pcb->state !
  148064:	494c203d 4e455453 0000000a 5f706374     = LISTEN....tcp_
  148074:	776f6c73 3a726d74 74636120 20657669     slowtmr: active 
  148084:	2d626370 6174733e 21206574 4954203d     pcb->state != TI
  148094:	572d454d 0a544941 00000000 5f706374     ME-WAIT.....tcp_
  1480a4:	776f6c73 3a726d74 64696d20 20656c64     slowtmr: middle 
  1480b4:	20706374 74203d21 615f7063 76697463     tcp != tcp_activ
  1480c4:	63705f65 00007362 5f706374 776f6c73     e_pcbs..tcp_slow
  1480d4:	3a726d74 72696620 70207473 3d206263     tmr: first pcb =
  1480e4:	6374203d 63615f70 65766974 6263705f     = tcp_active_pcb
  1480f4:	00000073 5f706374 776f6c73 3a726d74     s...tcp_slowtmr:
  148104:	4d495420 41572d45 70205449 3e2d6263      TIME-WAIT pcb->
  148114:	74617473 3d3d2065 4d495420 41572d45     state == TIME-WA
  148124:	00005449 5f706374 776f6c73 3a726d74     IT..tcp_slowtmr:
  148134:	64696d20 20656c64 20706374 74203d21      middle tcp != t
  148144:	745f7063 63705f77 00007362 5f706374     cp_tw_pcbs..tcp_
  148154:	776f6c73 3a726d74 72696620 70207473     slowtmr: first p
  148164:	3d206263 6374203d 77745f70 6263705f     cb == tcp_tw_pcb
  148174:	00000073 61766e69 2064696c 74617473     s...invalid stat
  148184:	00000065 61766e69 2064696c 6b636f73     e...invalid sock
  148194:	73207465 65746174 726f6620 63657220     et state for rec
  1481a4:	61632076 61626c6c 00006b63 61766e69     v callback..inva
  1481b4:	2064696c 6b636f73 73207465 65746174     lid socket state
  1481c4:	726f6620 6e657320 61632074 61626c6c      for sent callba
  1481d4:	00006b63 61766e69 2064696c 6b636f73     ck..invalid sock
  1481e4:	73207465 65746174 726f6620 72726520     et state for err
  1481f4:	6c616320 6361626c 0000006b 61766e69      callback...inva
  148204:	2064696c 6b636f73 73207465 65746174     lid socket state
  148214:	726f6620 6c6f7020 0000006c 65736e75      for poll...unse
  148224:	7320746e 656d6765 2073746e 6b61656c     nt segments leak
  148234:	00676e69 63616e75 2064656b 6d676573     ing.unacked segm
  148244:	73746e65 61656c20 676e696b 00000000     ents leaking....
  148254:	65736f6f 65732071 6e656d67 6c207374     ooseq segments l
  148264:	696b6165 0000676e 6e3e2d70 20747865     eaking..p->next 
  148274:	4e203d21 004c4c55 76726573 73656369     != NULL.services
  148284:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  148294:	2f322e30 2f637273 65726f63 7063742f     0.2/src/core/tcp
  1482a4:	2e6e695f 00000063 6c3e2d70 3d206e65     _in.c...p->len =
  1482b4:	0030203d 743e2d70 6c5f746f 3d206e65     = 0.p->tot_len =
  1482c4:	2d70203d 78656e3e 743e2d74 6c5f746f     = p->next->tot_l
  1482d4:	00006e65 5f706374 75706e69 61203a74     en..tcp_input: a
  1482e4:	76697463 63702065 733e2d62 65746174     ctive pcb->state
  1482f4:	203d2120 534f4c43 00004445 5f706374      != CLOSED..tcp_
  148304:	75706e69 61203a74 76697463 63702065     input: active pc
  148314:	733e2d62 65746174 203d2120 454d4954     b->state != TIME
  148324:	4941572d 00000054 5f706374 75706e69     -WAIT...tcp_inpu
  148334:	61203a74 76697463 63702065 733e2d62     t: active pcb->s
  148344:	65746174 203d2120 5453494c 00004e45     tate != LISTEN..
  148354:	5f706374 75706e69 70203a74 3e2d6263     tcp_input: pcb->
  148364:	7478656e 203d2120 20626370 66656228     next != pcb (bef
  148374:	2065726f 68636163 00002965 5f706374     ore cache)..tcp_
  148384:	75706e69 70203a74 3e2d6263 7478656e     input: pcb->next
  148394:	203d2120 20626370 74666128 63207265      != pcb (after c
  1483a4:	65686361 00000029 5f706374 75706e69     ache)...tcp_inpu
  1483b4:	54203a74 2d454d49 54494157 62637020     t: TIME-WAIT pcb
  1483c4:	74733e2d 20657461 54203d3d 2d454d49     ->state == TIME-
  1483d4:	54494157 00000000 2d626370 6665723e     WAIT....pcb->ref
  1483e4:	64657375 7461645f 3d3d2061 4c554e20     used_data == NUL
  1483f4:	0000004c 5f706374 75706e69 70203a74     L...tcp_input: p
  148404:	3e2d6263 74617473 3d212065 4f4c4320     cb->state != CLO
  148414:	00444553 2d626370 646e733e 6575715f     SED.pcb->snd_que
  148424:	656c6575 203e206e 00000030 73206f6e     uelen > 0...no s
  148434:	656d6765 7420746e 7266206f 00006565     egment to free..
  148444:	2d626370 73696c3e 656e6574 613e2d72     pcb->listener->a
  148454:	70656363 3d212074 4c554e20 0000004c     ccept != NULL...
  148464:	5f706374 65636572 3a657669 6f727720     tcp_receive: wro
  148474:	7320676e 65746174 00000000 2d626370     ng state....pcb-
  148484:	646e733e 6575715f 656c6575 3d3e206e     >snd_queuelen >=
  148494:	75627020 6c635f66 6e286e65 2d747865      pbuf_clen(next-
  1484a4:	0029703e 5f706374 65636572 3a657669     >p).tcp_receive:
  1484b4:	6c617620 71206469 65756575 6e656c20      valid queue len
  1484c4:	00687467 65736e69 20702e67 4e203d21     gth.inseg.p != N
  1484d4:	004c4c55 61736e69 6f20656e 65736666     ULL.insane offse
  1484e4:	00002174 66756270 6f6f7420 6f687320     t!..pbuf too sho
  1484f4:	00217472 66756270 6165685f 20726564     rt!.pbuf_header 
  148504:	6c696166 00006465 5f706374 65636572     failed..tcp_rece
  148514:	3a657669 67657320 746e656d 746f6e20     ive: segment not
  148524:	69727420 64656d6d 726f6320 74636572      trimmed correct
  148534:	7420796c 6372206f 6e775f76 00000a64     ly to rcv_wnd...
  148544:	5f706374 65636572 3a657669 67657320     tcp_receive: seg
  148554:	746e656d 746f6e20 69727420 64656d6d     ment not trimmed
  148564:	726f6320 74636572 7420796c 6f6f206f      correctly to oo
  148574:	20716573 75657571 00000a65 5f706374     seq queue...tcp_
  148584:	65636572 3a657669 70637420 206e656c     receive: tcplen 
  148594:	6372203e 6e775f76 00000a64 5f706374     > rcv_wnd...tcp_
  1485a4:	65636572 3a657669 736f6f20 74207165     receive: ooseq t
  1485b4:	656c7063 203e206e 5f766372 0a646e77     cplen > rcv_wnd.
  1485c4:	00000000 63656863 6874206b 66207461     ....check that f
  1485d4:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  1485e4:	7320646c 63757274 63742074 64685f70     ld struct tcp_hd
  1485f4:	00000072 76726573 73656369 49776c2f     r...services/lwI
  148604:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  148614:	2f637273 65726f63 7063742f 74756f5f     src/core/tcp_out
  148624:	0000632e 743e2d70 6c5f746f 3e206e65     .c..p->tot_len >
  148634:	706f203d 6e656c74 00000000 6465656e     = optlen....need
  148644:	636e7520 6e696168 70206465 00667562      unchained pbuf.
  148654:	5f706374 74697277 70203a65 73667562     tcp_write: pbufs
  148664:	206e6f20 75657571 3e3d2065 20746120      on queue => at 
  148674:	7361656c 6e6f2074 75712065 20657565     least one queue 
  148684:	2d6e6f6e 74706d65 00000079 5f706374     non-empty...tcp_
  148694:	74697277 6e203a65 6270206f 20736675     write: no pbufs 
  1486a4:	71206e6f 65756575 203e3d20 68746f62     on queue => both
  1486b4:	65757120 20736575 74706d65 00000079      queues empty...
  1486c4:	5f706374 74697277 61203a65 3d206772     tcp_write: arg =
  1486d4:	554e203d 28204c4c 676f7270 6d6d6172     = NULL (programm
  1486e4:	76207265 616c6f69 20736574 29495041     er violates API)
  1486f4:	00000000 5f73736d 61636f6c 7369206c     ....mss_local is
  148704:	6f6f7420 616d7320 00006c6c 6f636e69      too small..inco
  148714:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  148724:	73762065 7073202e 00656361 6f636e69     e vs. space.inco
  148734:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  148744:	73762065 656c202e 0000006e 5f706374     e vs. len...tcp_
  148754:	74697277 52203a65 70204d4f 73667562     write: ROM pbufs
  148764:	6e616320 20746f6e 6f206562 73726576      cannot be overs
  148774:	64657a69 00000000 65736e75 6f5f746e     ized....unsent_o
  148784:	73726576 20657a69 6d73696d 68637461     versize mismatch
  148794:	63702820 753e2d62 6e65736e 73692074      (pcb->unsent is
  1487a4:	4c554e20 0000294c 5f706374 74697277      NULL)..tcp_writ
  1487b4:	63203a65 6b636568 61687420 69662074     e: check that fi
  1487c4:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  1487d4:	68742064 6f632065 656c706d 73206574     d the complete s
  1487e4:	656c6765 0000006e 7265766f 657a6973     eglen...oversize
  1487f4:	203d3d20 00000030 76657270 6765735f      == 0...prev_seg
  148804:	203d2120 4c4c554e 00000000 5f706374      != NULL....tcp_
  148814:	74697277 63203a65 6f6e6e61 6f632074     write: cannot co
  148824:	7461636e 74616e65 68772065 70206e65     ncatenate when p
  148834:	3e2d6263 65736e75 6920746e 6d652073     cb->unsent is em
  148844:	00797470 5f706374 74697277 65203a65     pty.tcp_write: e
  148854:	6e657478 6e6f6973 20666f20 65666572     xtension of refe
  148864:	636e6572 65722065 72697571 72207365     rence requires r
  148874:	72656665 65636e65 00000000 5f706374     eference....tcp_
  148884:	74697277 76203a65 64696c61 65757120     write: valid que
  148894:	6c206575 74676e65 00000068 5f706374     ue length...tcp_
  1488a4:	75716e65 5f657565 67616c66 6e203a73     enqueue_flags: n
  1488b4:	20646565 68746965 54207265 535f5043     eed either TCP_S
  1488c4:	6f204e59 43542072 49465f50 6e69204e     YN or TCP_FIN in
  1488d4:	616c6620 28207367 676f7270 6d6d6172      flags (programm
  1488e4:	76207265 616c6f69 20736574 29495041     er violates API)
  1488f4:	00000000 5f706374 75716e65 5f657565     ....tcp_enqueue_
  148904:	67616c66 63203a73 6b636568 61687420     flags: check tha
  148914:	69662074 20747372 66756270 6e616320     t first pbuf can
  148924:	6c6f6820 706f2064 6e656c74 00000000      hold optlen....
  148934:	2d676573 7063743e 20726468 20746f6e     seg->tcphdr not 
  148944:	67696c61 0064656e 5f706374 75716e65     aligned.tcp_enqu
  148954:	5f657565 67616c66 69203a73 6c61766e     eue_flags: inval
  148964:	73206469 656d6765 6c20746e 74676e65     id segment lengt
  148974:	00000068 5f706374 75716e65 5f657565     h...tcp_enqueue_
  148984:	67616c66 69203a73 6c61766e 71206469     flags: invalid q
  148994:	65756575 6e656c20 00687467 276e6f64     ueue length.don'
  1489a4:	61632074 74206c6c 6f5f7063 75707475     t call tcp_outpu
  1489b4:	6f662074 696c2072 6e657473 6263702d     t for listen-pcb
  1489c4:	00000073 20545352 20746f6e 65707865     s...RST not expe
  1489d4:	64657463 72656820 00002165              cted here!..

001489e0 <lwip_cyclic_timers>:
  1489e0:	000000fa 0011cf94 000003e8 00132ca0     .............,..
  1489f0:	000003e8 0012d8f0 0000ea60 0012a530     ........`...0...
  148a00:	000001f4 0012a664 00000064 00130c9c     ....d...d.......
  148a10:	000003e8 00116ab0 76726573 73656369     .....j..services
  148a20:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  148a30:	2f322e30 2f637273 65726f63 6d69742f     0.2/src/core/tim
  148a40:	74756f65 00632e73 5f737973 656d6974     eouts.c.sys_time
  148a50:	3a74756f 6d697420 74756f65 203d2120     out: timeout != 
  148a60:	4c4c554e 6f70202c 4d206c6f 5f504d45     NULL, pool MEMP_
  148a70:	5f535953 454d4954 2054554f 65207369     SYS_TIMEOUT is e
  148a80:	7974706d 00000000 66756270 6165685f     mpty....pbuf_hea
  148a90:	20726564 6c696166 000a6465 76726573     der failed..serv
  148aa0:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  148ab0:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  148ac0:	7064752f 0000632e 63656863 6874206b     /udp.c..check th
  148ad0:	66207461 74737269 75627020 61632066     at first pbuf ca
  148ae0:	6f68206e 7320646c 63757274 64752074     n hold struct ud
  148af0:	64685f70 00000072                       p_hdr...

00148af8 <ethbroadcast>:
  148af8:	ffffffff 0000ffff                       ........

00148b00 <ethzero>:
	...
  148b08:	6974656e 683e2d66 64646177 656c5f72     netif->hwaddr_le
  148b18:	756d206e 62207473 20362065 20726f66     n must be 6 for 
  148b28:	65687465 74656e72 74756f5f 21747570     ethernet_output!
  148b38:	00000000 76726573 73656369 49776c2f     ....services/lwI
  148b48:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  148b58:	2f637273 6974656e 74652f66 6e726568     src/netif/ethern
  148b68:	632e7465 00000000 6974656e 00000066     et.c....netif...
  148b78:	74736f68 00000000 676e6970 7365725f     host....ping_res
  148b88:	00000070                                p...

00148b8c <lwip_netdev_ops>:
  148b8c:	00128fc8 00128ff8 00129028 001290f4     ........(.......
  148b9c:	00129130 00129190 00000000 00129450     0...........P...
  148bac:	7069776c 74656e5f 00006669 6974656e     lwip_netif..neti
  148bbc:	3d212066 5f545220 4c4c554e 00000000     f != RT_NULL....
  148bcc:	6c6c616d 6e20636f 66697465 69616620     malloc netif fai
  148bdc:	0a64656c 00000000 68747472 64616572     led.....rtthread
  148bec:	3230255f 32302578 00000078 69706374     _%02x%02x...tcpi
  148bfc:	00000070 20766564 52203d21 554e5f54     p...dev != RT_NU
  148c0c:	00004c4c 6d787265 00000062 75736572     LL..erxmb...resu
  148c1c:	3d20746c 5452203d 4b4f455f 00000000     lt == RT_EOK....
  148c2c:	00787265 6d787465 00000062 7774656e     erx.etxmb...netw
  148c3c:	206b726f 65746e69 63616672 616e2065     ork interface na
  148c4c:	7420656d 6c206f6f 21676e6f 00000a0d     me too long!....
  148c5c:	7774656e 206b726f 65746e69 63616672     network interfac
  148c6c:	25203a65 6f6e2073 6f662074 21646e75     e: %s not found!
  148c7c:	00000a0d                                ....

00148c80 <__FUNCTION__.7782>:
  148c80:	7069776c 74656e5f 5f766564 676e6970     lwip_netdev_ping
  148c90:	00000000                                ....

00148c94 <__FUNCTION__.7794>:
  148c94:	6474656e 615f7665 00006464              netdev_add..

00148ca0 <__FUNCTION__.7803>:
  148ca0:	6474656e 645f7665 00006c65              netdev_del..

00148cac <__FUNCTION__.7808>:
  148cac:	6474656e 665f7665 7367616c 6e79735f     netdev_flags_syn
  148cbc:	00000063                                c...

00148cc0 <__FUNCTION__.7814>:
  148cc0:	65687465 74656e72 6c5f6669 6f6b6e69     ethernetif_linko
  148cd0:	75707475 00000074                       utput...

00148cd8 <__FUNCTION__.7846>:
  148cd8:	5f687465 69766564 6c5f6563 636b6e69     eth_device_linkc
  148ce8:	676e6168 00000065                       hange...

00148cf0 <__FUNCTION__.7870>:
  148cf0:	5f687465 74737973 645f6d65 63697665     eth_system_devic
  148d00:	6e695f65 705f7469 61766972 00006574     e_init_private..
  148d10:	70636864 636e695f 6263705f 6665725f     dhcp_inc_pcb_ref
  148d20:	6e756f63 3a292874 6d656d20 2079726f     count(): memory 
  148d30:	6b61656c 00000000 76726573 73656369     leak....services
  148d40:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  148d50:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  148d60:	68642f34 632e7063 00000000 70636864     4/dhcp.c....dhcp
  148d70:	6263705f 6665725f 6e756f63 3a292874     _pcb_refcount():
  148d80:	66657220 6e756f63 72652074 00726f72      refcount error.
  148d90:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  148da0:	70636864 203d2120 4c4c554e 00000000     dhcp != NULL....
  148db0:	6974656e 6c612066 64616572 61682079     netif already ha
  148dc0:	20612073 75727473 64207463 20706368     s a struct dhcp 
  148dd0:	00746573 6974656e 73692066 746f6e20     set.netif is not
  148de0:	2c707520 646c6f20 79747320 7020656c      up, old style p
  148df0:	3f74726f 00000000 66756270 6f5f7020     ort?....pbuf p_o
  148e00:	77207475 276e7361 72662074 00646565     ut wasn't freed.
  148e10:	6c706572 61772079 74276e73 65726620     reply wasn't fre
  148e20:	00006465 70636864 6e69625f 6e203a64     ed..dhcp_bind: n
  148e30:	66697465 203d2120 4c4c554e 00000000     etif != NULL....
  148e40:	70636864 6e69625f 64203a64 20706368     dhcp_bind: dhcp 
  148e50:	4e203d21 004c4c55 70636864 6f74735f     != NULL.dhcp_sto
  148e60:	6e203a70 66697465 203d2120 4c4c554e     p: netif != NULL
  148e70:	00000000 70636864 74706f5f 3a6e6f69     ....dhcp_option:
  148e80:	63686420 6f3e2d70 6f697470 6f5f736e      dhcp->options_o
  148e90:	6c5f7475 2b206e65 2b203220 74706f20     ut_len + 2 + opt
  148ea0:	5f6e6f69 206e656c 44203d3c 5f504348     ion_len <= DHCP_
  148eb0:	4954504f 5f534e4f 004e454c 70636864     OPTIONS_LEN.dhcp
  148ec0:	74706f5f 5f6e6f69 65747962 6864203a     _option_byte: dh
  148ed0:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  148ee0:	206e656c 4844203c 4f5f5043 4f495450     len < DHCP_OPTIO
  148ef0:	4c5f534e 00004e45 70636864 74706f5f     NS_LEN..dhcp_opt
  148f00:	5f6e6f69 726f6873 64203a74 2d706368     ion_short: dhcp-
  148f10:	74706f3e 736e6f69 74756f5f 6e656c5f     >options_out_len
  148f20:	32202b20 203d3c20 50434844 54504f5f      + 2 <= DHCP_OPT
  148f30:	534e4f49 4e454c5f 00000000 70636864     IONS_LEN....dhcp
  148f40:	74706f5f 5f6e6f69 676e6f6c 6864203a     _option_long: dh
  148f50:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  148f60:	206e656c 2034202b 44203d3c 5f504348     len + 4 <= DHCP_
  148f70:	4954504f 5f534e4f 004e454c 50434844     OPTIONS_LEN.DHCP
  148f80:	6f68203a 616e7473 6920656d 6f742073     : hostname is to
  148f90:	6f6c206f 0021676e 206e656c 34203d3d     o long!.len == 4
  148fa0:	00000000 206e656c 64203d3e 646f6365     ....len >= decod
  148fb0:	656c5f65 0000006e 206e656c 34202525     e_len...len %% 4
  148fc0:	203d3d20 00000030 206e656c 31203d3d      == 0...len == 1
  148fd0:	00000000 7265766f 64616f6c 206e6920     ....overload in 
  148fe0:	656c6966 616e732f 0000656d 63656863     file/sname..chec
  148ff0:	6564206b 65646f63 7864695f 00000000     k decode_idx....
  149000:	6f636564 6c5f6564 25206e65 20342025     decode_len %% 4 
  149010:	30203d3d 00000000 61766e69 2064696c     == 0....invalid 
  149020:	6f636564 6c5f6564 00006e65 7478656e     decode_len..next
  149030:	75627020 61772066 756e2073 00006c6c      pbuf was null..
  149040:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  149050:	74656e20 21206669 554e203d 00004c4c      netif != NULL..
  149060:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  149070:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  149080:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  149090:	63686420 703e2d70 74756f5f 203d3d20      dhcp->p_out == 
  1490a0:	4c4c554e 00000000 70636864 6572635f     NULL....dhcp_cre
  1490b0:	5f657461 3a67736d 63686420 6d3e2d70     ate_msg: dhcp->m
  1490c0:	6f5f6773 3d207475 554e203d 00004c4c     sg_out == NULL..
  1490d0:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  1490e0:	65686320 74206b63 20746168 73726966      check that firs
  1490f0:	62702074 63206675 68206e61 20646c6f     t pbuf can hold 
  149100:	75727473 64207463 5f706368 0067736d     struct dhcp_msg.
  149110:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  149120:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  149130:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  149140:	63686420 703e2d70 74756f5f 203d2120      dhcp->p_out != 
  149150:	4c4c554e 00000000 70636864 6c65645f     NULL....dhcp_del
  149160:	5f657465 3a67736d 63686420 6d3e2d70     ete_msg: dhcp->m
  149170:	6f5f6773 21207475 554e203d 00004c4c     sg_out != NULL..
  149180:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  149190:	3a72656c 63686420 3d212070 4c554e20     ler: dhcp != NUL
  1491a0:	0000004c 70636864 74706f5f 5f6e6f69     L...dhcp_option_
  1491b0:	69617274 3a72656c 63686420 6d3e2d70     trailer: dhcp->m
  1491c0:	6f5f6773 21207475 554e203d 000a4c4c     sg_out != NULL..
  1491d0:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  1491e0:	3a72656c 63686420 6f3e2d70 6f697470     ler: dhcp->optio
  1491f0:	6f5f736e 6c5f7475 3c206e65 43484420     ns_out_len < DHC
  149200:	504f5f50 4e4f4954 454c5f53 00000a4e     P_OPTIONS_LEN...
  149210:	3d212071 4c554e20 0000004c 76726573     q != NULL...serv
  149220:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  149230:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  149240:	7670692f 74652f34 70726168 0000632e     /ipv4/etharp.c..
  149250:	703e2d71 203d2120 4c4c554e 00000000     q->p != NULL....
  149260:	703e2d72 203d2120 4c4c554e 00000000     r->p != NULL....
  149270:	74617473 3d3d2065 48544520 5f505241     state == ETHARP_
  149280:	54415453 45505f45 4e49444e 7c7c2047     STATE_PENDING ||
  149290:	61747320 3e206574 5445203d 50524148      state >= ETHARP
  1492a0:	4154535f 535f4554 4c424154 00000045     _STATE_STABLE...
  1492b0:	5f707261 6c626174 5d695b65 3d20712e     arp_table[i].q =
  1492c0:	554e203d 00004c4c 203c2069 5f505241     = NULL..i < ARP_
  1492d0:	4c424154 49535f45 0000455a 5f707261     TABLE_SIZE..arp_
  1492e0:	6c626174 5d695b65 6174732e 3d206574     table[i].state =
  1492f0:	5445203d 50524148 4154535f 455f4554     = ETHARP_STATE_E
  149300:	5954504d 00000000 6974656e 683e2d66     MPTY....netif->h
  149310:	64646177 656c5f72 3d3d206e 48544520     waddr_len == ETH
  149320:	4157485f 5f524444 004e454c 5f687465     _HWADDR_LEN.eth_
  149330:	20746572 4e203d21 204c4c55 69202626     ret != NULL && i
  149340:	65725f70 3d212074 4c554e20 0000004c     p_ret != NULL...
  149350:	64617069 21207264 554e203d 00004c4c     ipaddr != NULL..
  149360:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  149370:	5f687465 20746572 4e203d21 004c4c55     eth_ret != NULL.
  149380:	5f707261 6c626174 72615b65 64695f70     arp_table[arp_id
  149390:	732e5d78 65746174 203d3e20 41485445     x].state >= ETHA
  1493a0:	535f5052 45544154 4154535f 00454c42     RP_STATE_STABLE.
  1493b0:	5f707261 6c626174 5d695b65 6174732e     arp_table[i].sta
  1493c0:	3d206574 4550203d 4e49444e 726f2047     te == PENDING or
  1493d0:	41545320 00454c42 70206f6e 656b6361      STABLE.no packe
  1493e0:	75712074 73657565 6c6c6120 6465776f     t queues allowed
  1493f0:	00000021 63656863 6874206b 66207461     !...check that f
  149400:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  149410:	7320646c 63757274 74652074 70726168     ld struct etharp
  149420:	7264685f 00000000 6974656e 683e2d66     _hdr....netif->h
  149430:	64646177 656c5f72 756d206e 62207473     waddr_len must b
  149440:	68742065 61732065 6120656d 54452073     e the same as ET
  149450:	57485f48 52444441 4e454c5f 726f6620     H_HWADDR_LEN for
  149460:	68746520 21707261 00000000 706d6369      etharp!....icmp
  149470:	706e695f 203a7475 69766f6d 7220676e     _input: moving r
  149480:	61703e2d 616f6c79 6f742064 6d636920     ->payload to icm
  149490:	65682070 72656461 69616620 0a64656c     p header failed.
  1494a0:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1494b0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1494c0:	2f637273 65726f63 7670692f 63692f34     src/core/ipv4/ic
  1494d0:	632e706d 00000000 706d6369 706e695f     mp.c....icmp_inp
  1494e0:	203a7475 74736572 6e69726f 726f2067     ut: restoring or
  1494f0:	6e696769 70206c61 61703e2d 616f6c79     iginal p->payloa
  149500:	61662064 64656c69 0000000a 63656863     d failed....chec
  149510:	6874206b 66207461 74737269 75627020     k that first pbu
  149520:	61632066 6f68206e 6920646c 20706d63     f can hold icmp 
  149530:	7373656d 00656761 76726573 73656369     message.services
  149540:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  149550:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  149560:	67692f34 632e706d 00000000 706d6769     4/igmp.c....igmp
  149570:	6f6f6c5f 5f70756b 756f7267 66203a70     _lookup_group: f
  149580:	74737269 6f726720 6d207075 20747375     irst group must 
  149590:	61206562 79736c6c 6d657473 00000073     be allsystems...
  1495a0:	706d6769 6f6f6c5f 5f70756b 756f7267     igmp_lookup_grou
  1495b0:	61203a70 65206c6c 70656378 69662074     p: all except fi
  1495c0:	20747372 756f7267 756d2070 6e207473     rst group must n
  1495d0:	6220746f 6c612065 7379736c 736d6574     ot be allsystems
  1495e0:	00000000 706d6769 696f6a5f 6f72676e     ....igmp_joingro
  1495f0:	203a7075 65747461 2074706d 6a206f74     up: attempt to j
  149600:	206e696f 2d6e6f6e 746c756d 73616369     oin non-multicas
  149610:	64612074 73657264 00000073 706d6769     t address...igmp
  149620:	696f6a5f 6f72676e 203a7075 65747461     _joingroup: atte
  149630:	2074706d 6a206f74 206e696f 736c6c61     mpt to join alls
  149640:	65747379 6120736d 65726464 00007373     ystems address..
  149650:	706d6769 696f6a5f 6f72676e 6e5f7075     igmp_joingroup_n
  149660:	66697465 7461203a 706d6574 6f742074     etif: attempt to
  149670:	696f6a20 6f6e206e 756d2d6e 6369746c      join non-multic
  149680:	20747361 72646461 00737365 706d6769     ast address.igmp
  149690:	696f6a5f 6f72676e 6e5f7075 66697465     _joingroup_netif
  1496a0:	7461203a 706d6574 6f742074 696f6a20     : attempt to joi
  1496b0:	6c61206e 7379736c 736d6574 64646120     n allsystems add
  1496c0:	73736572 00000000 706d6769 696f6a5f     ress....igmp_joi
  1496d0:	6f72676e 6e5f7075 66697465 7461203a     ngroup_netif: at
  1496e0:	706d6574 6f742074 696f6a20 6e6f206e     tempt to join on
  1496f0:	6e6f6e20 4d47492d 656e2050 00666974      non-IGMP netif.
  149700:	706d6769 61656c5f 72676576 3a70756f     igmp_leavegroup:
  149710:	74746120 74706d65 206f7420 7661656c      attempt to leav
  149720:	6f6e2065 756d2d6e 6369746c 20747361     e non-multicast 
  149730:	72646461 00737365 706d6769 61656c5f     address.igmp_lea
  149740:	72676576 3a70756f 74746120 74706d65     vegroup: attempt
  149750:	206f7420 7661656c 6c612065 7379736c      to leave allsys
  149760:	736d6574 64646120 73736572 00000000     tems address....
  149770:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  149780:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  149790:	656c206f 20657661 2d6e6f6e 746c756d     o leave non-mult
  1497a0:	73616369 64612074 73657264 00000073     icast address...
  1497b0:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  1497c0:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  1497d0:	656c206f 20657661 736c6c61 65747379     o leave allsyste
  1497e0:	6120736d 65726464 00007373 706d6769     ms address..igmp
  1497f0:	61656c5f 72676576 5f70756f 6974656e     _leavegroup_neti
  149800:	61203a66 6d657474 74207470 656c206f     f: attempt to le
  149810:	20657661 6e206e6f 492d6e6f 20504d47     ave on non-IGMP 
  149820:	6974656e 00000066 706d6769 6e65735f     netif...igmp_sen
  149830:	63203a64 6b636568 61687420 69662074     d: check that fi
  149840:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  149850:	74732064 74637572 6d676920 736d5f70     d struct igmp_ms
  149860:	00000067 723e2d70 3d206665 0031203d     g...p->ref == 1.
  149870:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  149880:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  149890:	65726f63 7670692f 70692f34 00632e34     core/ipv4/ip4.c.
  1498a0:	63656863 6874206b 66207461 74737269     check that first
  1498b0:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  1498c0:	63757274 70692074 7264685f 00000000     truct ip_hdr....

001498d0 <ip_addr_any>:
  1498d0:	00000000                                ....

001498d4 <ip_addr_broadcast>:
  1498d4:	ffffffff 61686e75 656c646e 00000064     ....unhandled...
  1498e4:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  1498f4:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  149904:	65726f63 7670692f 70692f34 64615f34     core/ipv4/ip4_ad
  149914:	632e7264 00000000 76657270 203d2120     dr.c....prev != 
  149924:	00727069 76726573 73656369 49776c2f     ipr.services/lwI
  149934:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  149944:	2f637273 65726f63 7670692f 70692f34     src/core/ipv4/ip
  149954:	72665f34 632e6761 00000000 76657270     4_frag.c....prev
  149964:	656e3e2d 3d207478 7069203d 00000072     ->next == ipr...
  149974:	66756270 72665f73 20646565 6c63202b     pbufs_freed + cl
  149984:	3c206e65 7830203d 66666666 00000000     en <= 0xffff....
  149994:	725f7069 73736165 7562705f 756f6366     ip_reass_pbufcou
  1499a4:	3e20746e 6c63203d 00006e65 696e6173     nt >= clen..sani
  1499b4:	63207974 6b636568 6e696c20 2064656b     ty check linked 
  1499c4:	7473696c 00000000 63656863 7266206b     list....check fr
  1499d4:	656d6761 2073746e 276e6f64 766f2074     agments don't ov
  1499e4:	616c7265 00000070 70206f6e 69766572     erlap...no previ
  1499f4:	2073756f 67617266 746e656d 6874202c     ous fragment, th
  149a04:	6d207369 20747375 74206562 66206568     is must be the f
  149a14:	74737269 61726620 6e656d67 00002174     irst fragment!..
  149a24:	696e6173 63207974 6b636568 00000000     sanity check....
  149a34:	696c6176 65746164 7461645f 61726761     validate_datagra
  149a44:	656e3a6d 705f7478 21667562 4c554e3d     m:next_pbuf!=NUL
  149a54:	0000004c 696c6176 65746164 7461645f     L...validate_dat
  149a64:	61726761 61643a6d 72676174 65206d61     agram:datagram e
  149a74:	3d21646e 61746164 6d617267 6e656c20     nd!=datagram len
  149a84:	00000000 3d212070 4c554e20 0000004c     ....p != NULL...
  149a94:	20726370 4e203d21 004c4c55 20726370     pcr != NULL.pcr 
  149aa4:	70203d3d 00000000 5f347069 67617266     == p....ip4_frag
  149ab4:	64202928 2073656f 20746f6e 70707573     () does not supp
  149ac4:	2074726f 6f205049 6f697470 0000736e     ort IP options..
  149ad4:	665f7069 28676172 4d203a29 6c612046     ip_frag(): MF al
  149ae4:	64616572 65732079 00000074 73696874     ready set...this
  149af4:	65656e20 61207364 75627020 6e692066      needs a pbuf in
  149b04:	656e6f20 65697020 00216563 676e6970      one piece!.ping
  149b14:	7a69735f 73692065 6f6f7420 67696220     _size is too big
  149b24:	00000000 76726573 73656369 49776c2f     ....services/lwI
  149b34:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  149b44:	2f637273 73707061 6e69702f 69702f67     src/apps/ping/pi
  149b54:	632e676e 00000000 00003165 63616d65     ng.c....e1..emac
  149b64:	6e695f31 00007274 6d305b1b 642f445b     1_intr...[0m[D/d
  149b74:	652e7672 5d74656e 00000020 74656e65     rv.enet] ...enet
  149b84:	6c206425 206b6e69 00007075 6d305b1b     %d link up...[0m
  149b94:	0000000a 74656e65 6c206425 206b6e69     ....enet%d link 
  149ba4:	6e776f64 00000000 31335b1b 2f455b6d     down.....[31m[E/
  149bb4:	2e767264 74656e65 0000205d 4f525245     drv.enet] ..ERRO
  149bc4:	61203a52 636f6c6c 6d656d20 746f6e20     R: alloc mem not
  149bd4:	6f6e6520 20686775 20726f66 74656e65      enough for enet
  149be4:	69726420 00726576 4f525245 72203a52      driver.ERROR: r
  149bf4:	75622078 70206666 20656761 6f6c6c61     x buff page allo
  149c04:	61662063 64656c69 00000000 4f525245     c failed....ERRO
  149c14:	74203a52 75622078 70206666 20656761     R: tx buff page 
  149c24:	6f6c6c61 61662063 64656c69 00000000     alloc failed....
  149c34:	4f525245 72203a52 64622078 67617020     ERROR: rx bd pag
  149c44:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  149c54:	4f525245 74203a52 64622078 67617020     ERROR: tx bd pag
  149c64:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  149c74:	51494e55 495f4555 73692044 25782520     UNIQUE_ID is %x%
  149c84:	00000078 51494e55 495f4555 68632044     x...UNIQUE_ID ch
  149c94:	65676e61 206f7420 62203233 20737469     ange to 32 bits 
  149ca4:	00007825 00000070 2074656e 6f727265     %x..p...net erro
  149cb4:	65732072 6c20646e 74676e65 64252068     r send length %d
  149cc4:	63786520 20646565 2078616d 676e656c      exceed max leng
  149cd4:	00006874 2074656e 6f727265 65722072     th..net error re
  149ce4:	6c207663 74676e65 64252068 63786520     cv length %d exc
  149cf4:	20646565 2078616d 676e656c 00006874     eed max length..
  149d04:	20687465 64616572 766e6920 64696c61     eth read invalid
  149d14:	72617020 74656d61 62207265 65666675      parameter buffe
  149d24:	70252072 7a697320 64252065 00000000     r %p size %d....
  149d34:	20687465 74697277 6e692065 696c6176     eth write invali
  149d44:	61702064 656d6172 20726574 66667562     d parameter buff
  149d54:	25207265 69732070 2520657a 00000064     er %p size %d...
  149d64:	65746e69 75707272 616d2074 20686374     interrput match 
  149d74:	65736162 64646120 72652072 00726f72     base addr error.
  149d84:	33335b1b 2f575b6d 2e767264 74656e65     .[33m[W/drv.enet
  149d94:	0000205d 20594850 6b6e694c 776f6420     ] ..PHY Link dow
  149da4:	70202c6e 7361656c 68632065 206b6365     n, please check 
  149db4:	20656874 6c626163 6f632065 63656e6e     the cable connec
  149dc4:	6e6f6974 646e6120 6e696c20 6170206b     tion and link pa
  149dd4:	656e7472 65732072 6e697474 00002e67     rtner setting...

00149de4 <_k_enet_ops>:
  149de4:	00000000 00135220 00135268 001352a4     .... R..hR...R..
  149df4:	00135354 00134c54 32335b1b 2f495b6d     TS..TL...[32m[I/
  149e04:	2e767264 74656e65 0000205d 63616d65     drv.enet] ..emac
  149e14:	76656420 20656369 74696e69 63757320      device init suc
  149e24:	73736563 00000000 63616d65 76656420     cess....emac dev
  149e34:	20656369 74696e69 69616620 203a646c     ice init faild: 
  149e44:	00006425 6b6e696c 6425645f 00000000     %d..link_d%d....

00149e54 <__FUNCTION__.9268>:
  149e54:	695f7472 7536786d 74655f6c 78745f68     rt_imx6ul_eth_tx
  149e64:	00000000 45535341 45205452 524f5252     ....ASSERT ERROR
  149e74:	25202220 3a222073 6c696620 25222065      " %s ": file "%
  149e84:	4c202273 20656e69 22642522 6e756620     s" Line "%d" fun
  149e94:	6f697463 616e206e 2220656d 20227325     ction name "%s" 
  149ea4:	0000000a                                ....

00149ea8 <s_enetBases>:
  149ea8:	00000000 02188000 020b4000 74736e69     .........@..inst
  149eb8:	65636e61 41203c20 59415252 5a49535f     ance < ARRAY_SIZ
  149ec8:	5f732845 74656e65 65736142 00002973     E(s_enetBases)..
  149ed8:	666e6f63 00006769 646e6168 0000656c     config..handle..
  149ee8:	66667562 6f437265 6769666e 00000000     bufferConfig....
  149ef8:	66667562 6f437265 6769666e 78723e2d     bufferConfig->rx
  149f08:	74536442 41747261 41726464 6e67696c     BdStartAddrAlign
  149f18:	00000000 66667562 6f437265 6769666e     ....bufferConfig
  149f28:	78743e2d 74536442 41747261 41726464     ->txBdStartAddrA
  149f38:	6e67696c 00000000 66667562 6f437265     lign....bufferCo
  149f48:	6769666e 78723e2d 66667542 6c417265     nfig->rxBufferAl
  149f58:	006e6769 66667562 6f437265 6769666e     ign.bufferConfig
  149f68:	78743e2d 66667542 6c417265 006e6769     ->txBufferAlign.
  149f78:	4163616d 00726464 66667562 6f437265     macAddr.bufferCo
  149f88:	6769666e 78723e2d 66667542 657a6953     nfig->rxBuffSize
  149f98:	67696c41 3d3e206e 454e4520 58525f54     Align >= ENET_RX
  149fa8:	4e494d5f 4655425f 53524546 00455a49     _MIN_BUFFERSIZE.
  149fb8:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  149fc8:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  149fd8:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  149fe8:	754e6442 7265626d 28203e20 54454e45     BdNumber > (ENET
  149ff8:	4152465f 4d5f454d 465f5841 454d4152     _FRAME_MAX_FRAME
  14a008:	204e454c 4e45202b 465f5445 454d4152     LEN + ENET_FRAME
  14a018:	414c565f 41545f4e 4e454c47 00000029     _VLAN_TAGLEN)...
  14a028:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  14a038:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  14a048:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  14a058:	754e6442 7265626d 45203e20 5f54454e     BdNumber > ENET_
  14a068:	4d415246 414d5f45 52465f58 4c454d41     FRAME_MAX_FRAMEL
  14a078:	00004e45 66667562 6f437265 6769666e     EN..bufferConfig
  14a088:	78723e2d 66667542 657a6953 67696c41     ->rxBuffSizeAlig
  14a098:	202a206e 66667562 6f437265 6769666e     n * bufferConfig
  14a0a8:	78723e2d 754e6442 7265626d 63203e20     ->rxBdNumber > c
  14a0b8:	69666e6f 723e2d67 78614d78 6d617246     onfig->rxMaxFram
  14a0c8:	6e654c65 00000000 64427874 72617453     eLen....txBdStar
  14a0d8:	696c4174 00006e67 75427874 74536666     tAlign..txBuffSt
  14a0e8:	41747261 6e67696c 00000000 64427872     artAlign....rxBd
  14a0f8:	72617453 696c4174 00006e67 75427872     StartAlign..rxBu
  14a108:	74536666 41747261 6e67696c 00000000     ffStartAlign....
  14a118:	43637273 6b636f6c 007a485f 646e6168     srcClock_Hz.hand
  14a128:	3e2d656c 64427872 72727543 00746e65     le->rxBdCurrent.
  14a138:	72724565 7453726f 63697461 00000000     eErrorStatic....
  14a148:	676e656c 00006874 31335b1b 2f455b6d     length...[31m[E/
  14a158:	2e767264 74656e65 0000205d 6d617266     drv.enet] ..fram
  14a168:	72652065 30726f72 72756320 66667542     e error0 curBuff
  14a178:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  14a188:	25783020 20783430 676e656c 25206874      0x%04x length %
  14a198:	00000a64 6d305b1b 0000000a 6d617266     d....[0m....fram
  14a1a8:	72652065 31726f72 72756320 66667542     e error1 curBuff
  14a1b8:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  14a1c8:	25783020 20783430 676e656c 25206874      0x%04x length %
  14a1d8:	00000a64 646e6168 3e2d656c 64427874     d...handle->txBd
  14a1e8:	72727543 00746e65 61746164 00000000     Current.data....
  14a1f8:	676e656c 3c206874 4e45203d 465f5445     length <= ENET_F
  14a208:	454d4152 58414d5f 4152465f 454c454d     RAME_MAX_FRAMELE
  14a218:	0000004e 72646461 00737365              N...address.

0014a224 <__FUNCTION__.9236>:
  14a224:	54454e45 7465475f 74736e49 65636e61     ENET_GetInstance
  14a234:	00000000                                ....

0014a238 <__FUNCTION__.9241>:
  14a238:	54454e45 7465475f 61666544 43746c75     ENET_GetDefaultC
  14a248:	69666e6f 00000067                       onfig...

0014a250 <__FUNCTION__.9250>:
  14a250:	54454e45 696e495f 00000074              ENET_Init...

0014a25c <__FUNCTION__.9259>:
  14a25c:	54454e45 7465535f 6c6c6143 6b636162     ENET_SetCallback
  14a26c:	00000000                                ....

0014a270 <__FUNCTION__.9288>:
  14a270:	54454e45 7465535f 75427854 72656666     ENET_SetTxBuffer
  14a280:	63736544 74706972 0073726f              Descriptors.

0014a28c <__FUNCTION__.9302>:
  14a28c:	54454e45 7465535f 75427852 72656666     ENET_SetRxBuffer
  14a29c:	63736544 74706972 0073726f              Descriptors.

0014a2a8 <__FUNCTION__.9324>:
  14a2a8:	54454e45 7465475f 4163614d 00726464     ENET_GetMacAddr.

0014a2b8 <__FUNCTION__.9331>:
  14a2b8:	54454e45 7465535f 00494d53              ENET_SetSMI.

0014a2c4 <__FUNCTION__.9371>:
  14a2c4:	54454e45 7465475f 72457852 66654272     ENET_GetRxErrBef
  14a2d4:	5265726f 46646165 656d6172 00000000     oreReadFrame....

0014a2e4 <__FUNCTION__.9383>:
  14a2e4:	54454e45 6165525f 61724664 0000656d     ENET_ReadFrame..

0014a2f4 <__FUNCTION__.9390>:
  14a2f4:	54454e45 6470555f 52657461 42646165     ENET_UpdateReadB
  14a304:	65666675 00007372                       uffers..

0014a30c <__FUNCTION__.9398>:
  14a30c:	54454e45 6e65535f 61724664 0000656d     ENET_SendFrame..

0014a31c <__FUNCTION__.9407>:
  14a31c:	54454e45 6464415f 746c754d 73616369     ENET_AddMulticas
  14a32c:	6f724774 00007075                       tGroup..

0014a334 <__FUNCTION__.9422>:
  14a334:	54454e45 61654c5f 754d6576 6369746c     ENET_LeaveMultic
  14a344:	47747361 70756f72 00000000              astGroup....

0014a350 <__FUNCTION__.9439>:
  14a350:	54454e45 6172545f 696d736e 51524974     ENET_TransmitIRQ
  14a360:	646e6148 0072656c                       Handler.

0014a368 <__FUNCTION__.9446>:
  14a368:	54454e45 6365525f 65766965 48515249     ENET_ReceiveIRQH
  14a378:	6c646e61 00007265                       andler..

0014a380 <__FUNCTION__.9451>:
  14a380:	54454e45 7272455f 5249726f 6e614851     ENET_ErrorIRQHan
  14a390:	72656c64 00000000 76726573 73656369     dler....services
  14a3a0:	49776c2f 74694b50 7672642f 656e655f     /lwIPKit/drv_ene
  14a3b0:	72642f74 72657669 6c73662f 6970675f     t/driver/fsl_gpi
  14a3c0:	00632e6f 206e6970 3233203c 00000000     o.c.pin < 32....

0014a3d0 <__func__.6332>:
  14a3d0:	4f495047 6972575f 69506574 74754f6e     GPIO_WritePinOut
  14a3e0:	00747570 61746164 00727450 74617473     put.dataPtr.stat
  14a3f0:	00007375 6c707564 00007865              us..duplex..

0014a3fc <__FUNCTION__.8416>:
  14a3fc:	5f594850 64616552 00000000              PHY_Read....

0014a408 <__FUNCTION__.8434>:
  14a408:	5f594850 4c746547 536b6e69 75746174     PHY_GetLinkStatu
  14a418:	00000073                                s...

0014a41c <__FUNCTION__.8443>:
  14a41c:	5f594850 4c746547 536b6e69 64656570     PHY_GetLinkSpeed
  14a42c:	6c707544 00007865                       Duplex..

0014a434 <errid>:
  14a434:	19222154 0302010d 0c1c4b11 1d0b0410     T!"......K......
  14a444:	68271e12 71706f6e 06052062 1514130f     ..'hnopqb ......
  14a454:	0716081a 18172428 1b0e0a09 8323251f     ....($.......%#.
  14a464:	2a267d82 3e3d3c2b 4a47433f 5a59584d     .}&*+<=>?CGJMXYZ
  14a474:	5e5d5c5b 6361605f 67666564 6c6b6a69     [\]^_`acdefgijkl
  14a484:	79747372 487c7b7a 00000000              rstyz{|H....

0014a490 <errmsg>:
  14a490:	656c6c49 206c6167 65747962 71657320     Illegal byte seq
  14a4a0:	636e6575 6f440065 6e69616d 72726520     uence.Domain err
  14a4b0:	5200726f 6c757365 6f6e2074 65722074     or.Result not re
  14a4c0:	73657270 61746e65 00656c62 20746f4e     presentable.Not 
  14a4d0:	74742061 65500079 73696d72 6e6f6973     a tty.Permission
  14a4e0:	6e656420 00646569 7265704f 6f697461      denied.Operatio
  14a4f0:	6f6e206e 65702074 74696d72 00646574     n not permitted.
  14a500:	73206f4e 20686375 656c6966 20726f20     No such file or 
  14a510:	65726964 726f7463 6f4e0079 63757320     directory.No suc
  14a520:	72702068 7365636f 69460073 6520656c     h process.File e
  14a530:	74736978 61560073 2065756c 206f6f74     xists.Value too 
  14a540:	6772616c 6f662065 61642072 74206174     large for data t
  14a550:	00657079 73206f4e 65636170 66656c20     ype.No space lef
  14a560:	6e6f2074 76656420 00656369 2074754f     t on device.Out 
  14a570:	6d20666f 726f6d65 65520079 72756f73     of memory.Resour
  14a580:	62206563 00797375 65746e49 70757272     ce busy.Interrup
  14a590:	20646574 74737973 63206d65 006c6c61     ted system call.
  14a5a0:	6f736552 65637275 6d657420 61726f70     Resource tempora
  14a5b0:	796c6972 616e7520 6c696176 656c6261     rily unavailable
  14a5c0:	766e4900 64696c61 65657320 7243006b     .Invalid seek.Cr
  14a5d0:	2d73736f 69766564 6c206563 006b6e69     oss-device link.
  14a5e0:	64616552 6c6e6f2d 69662079 7320656c     Read-only file s
  14a5f0:	65747379 6944006d 74636572 2079726f     ystem.Directory 
  14a600:	20746f6e 74706d65 6f430079 63656e6e     not empty.Connec
  14a610:	6e6f6974 73657220 62207465 65702079     tion reset by pe
  14a620:	4f007265 61726570 6e6f6974 6d697420     er.Operation tim
  14a630:	6f206465 43007475 656e6e6f 6f697463     ed out.Connectio
  14a640:	6572206e 65737566 6f480064 69207473     n refused.Host i
  14a650:	6f642073 48006e77 2074736f 75207369     s down.Host is u
  14a660:	6165726e 62616863 4100656c 65726464     nreachable.Addre
  14a670:	69207373 7375206e 72420065 6e656b6f     ss in use.Broken
  14a680:	70697020 2f490065 7265204f 00726f72      pipe.I/O error.
  14a690:	73206f4e 20686375 69766564 6f206563     No such device o
  14a6a0:	64612072 73657264 6c420073 206b636f     r address.Block 
  14a6b0:	69766564 72206563 69757165 00646572     device required.
  14a6c0:	73206f4e 20686375 69766564 4e006563     No such device.N
  14a6d0:	6120746f 72696420 6f746365 49007972     ot a directory.I
  14a6e0:	20612073 65726964 726f7463 65540079     s a directory.Te
  14a6f0:	66207478 20656c69 79737562 65784500     xt file busy.Exe
  14a700:	6f662063 74616d72 72726520 4900726f     c format error.I
  14a710:	6c61766e 61206469 6d756772 00746e65     nvalid argument.
  14a720:	75677241 746e656d 73696c20 6f742074     Argument list to
  14a730:	6f6c206f 5300676e 6f626d79 2063696c     o long.Symbolic 
  14a740:	6b6e696c 6f6f6c20 69460070 616e656c     link loop.Filena
  14a750:	7420656d 6c206f6f 00676e6f 206f6f54     me too long.Too 
  14a760:	796e616d 65706f20 6966206e 2073656c     many open files 
  14a770:	73206e69 65747379 6f4e006d 6c696620     in system.No fil
  14a780:	65642065 69726373 726f7470 76612073     e descriptors av
  14a790:	616c6961 00656c62 20646142 656c6966     ailable.Bad file
  14a7a0:	73656420 70697263 00726f74 63206f4e      descriptor.No c
  14a7b0:	646c6968 6f727020 73736563 64614200     hild process.Bad
  14a7c0:	64646120 73736572 6c694600 6f742065      address.File to
  14a7d0:	616c206f 00656772 206f6f54 796e616d     o large.Too many
  14a7e0:	6e696c20 4e00736b 6f6c206f 20736b63      links.No locks 
  14a7f0:	69617661 6c62616c 65520065 72756f73     available.Resour
  14a800:	64206563 6c646165 206b636f 6c756f77     ce deadlock woul
  14a810:	636f2064 00727563 74617453 6f6e2065     d occur.State no
  14a820:	65722074 65766f63 6c626172 72500065     t recoverable.Pr
  14a830:	6f697665 6f207375 72656e77 65696420     evious owner die
  14a840:	704f0064 74617265 206e6f69 636e6163     d.Operation canc
  14a850:	64656c65 6e754600 6f697463 6f6e206e     eled.Function no
  14a860:	6d692074 6d656c70 65746e65 6f4e0064     t implemented.No
  14a870:	73656d20 65676173 20666f20 69736564      message of desi
  14a880:	20646572 65707974 65644900 6669746e     red type.Identif
  14a890:	20726569 6f6d6572 00646576 69766544     ier removed.Devi
  14a8a0:	6e206563 6120746f 72747320 006d6165     ce not a stream.
  14a8b0:	64206f4e 20617461 69617661 6c62616c     No data availabl
  14a8c0:	65440065 65636976 6d697420 74756f65     e.Device timeout
  14a8d0:	74754f00 20666f20 65727473 20736d61     .Out of streams 
  14a8e0:	6f736572 65637275 694c0073 68206b6e     resources.Link h
  14a8f0:	62207361 206e6565 65766573 00646572     as been severed.
  14a900:	746f7250 6c6f636f 72726520 4200726f     Protocol error.B
  14a910:	6d206461 61737365 46006567 20656c69     ad message.File 
  14a920:	63736564 74706972 6920726f 6162206e     descriptor in ba
  14a930:	74732064 00657461 20746f4e 6f732061     d state.Not a so
  14a940:	74656b63 73654400 616e6974 6e6f6974     cket.Destination
  14a950:	64646120 73736572 71657220 65726975      address require
  14a960:	654d0064 67617373 6f742065 616c206f     d.Message too la
  14a970:	00656772 746f7250 6c6f636f 6f727720     rge.Protocol wro
  14a980:	7420676e 20657079 20726f66 6b636f73     ng type for sock
  14a990:	50007465 6f746f72 206c6f63 20746f6e     et.Protocol not 
  14a9a0:	69617661 6c62616c 72500065 636f746f     available.Protoc
  14a9b0:	6e206c6f 7320746f 6f707075 64657472     ol not supported
  14a9c0:	636f5300 2074656b 65707974 746f6e20     .Socket type not
  14a9d0:	70757320 74726f70 4e006465 7320746f      supported.Not s
  14a9e0:	6f707075 64657472 6f725000 6f636f74     upported.Protoco
  14a9f0:	6166206c 796c696d 746f6e20 70757320     l family not sup
  14aa00:	74726f70 41006465 65726464 66207373     ported.Address f
  14aa10:	6c696d61 6f6e2079 75732074 726f7070     amily not suppor
  14aa20:	20646574 70207962 6f746f72 006c6f63     ted by protocol.
  14aa30:	72646441 20737365 20746f6e 69617661     Address not avai
  14aa40:	6c62616c 654e0065 726f7774 7369206b     lable.Network is
  14aa50:	776f6420 654e006e 726f7774 6e75206b      down.Network un
  14aa60:	63616572 6c626168 6f430065 63656e6e     reachable.Connec
  14aa70:	6e6f6974 73657220 62207465 656e2079     tion reset by ne
  14aa80:	726f7774 6f43006b 63656e6e 6e6f6974     twork.Connection
  14aa90:	6f626120 64657472 206f4e00 66667562      aborted.No buff
  14aaa0:	73207265 65636170 61766120 62616c69     er space availab
  14aab0:	5300656c 656b636f 73692074 6e6f6320     le.Socket is con
  14aac0:	7463656e 53006465 656b636f 6f6e2074     nected.Socket no
  14aad0:	6f632074 63656e6e 00646574 6e6e6143     t connected.Cann
  14aae0:	7320746f 20646e65 65746661 6f732072     ot send after so
  14aaf0:	74656b63 75687320 776f6474 704f006e     cket shutdown.Op
  14ab00:	74617265 206e6f69 65726c61 20796461     eration already 
  14ab10:	70206e69 72676f72 00737365 7265704f     in progress.Oper
  14ab20:	6f697461 6e69206e 6f727020 73657267     ation in progres
  14ab30:	74530073 20656c61 656c6966 6e616820     s.Stale file han
  14ab40:	00656c64 6f6d6552 49206574 65204f2f     dle.Remote I/O e
  14ab50:	726f7272 6f755100 65206174 65656378     rror.Quota excee
  14ab60:	00646564 6d206f4e 75696465 6f66206d     ded.No medium fo
  14ab70:	00646e75 6e6f7257 656d2067 6d756964     und.Wrong medium
  14ab80:	70797420 754d0065 6869746c 6120706f      type.Multihop a
  14ab90:	6d657474 64657470 206f4e00 6f727265     ttempted.No erro
  14aba0:	6e692072 6d726f66 6f697461 0000006e     r information...
  14abb0:	65737341 6f697472 6166206e 64656c69     Assertion failed
  14abc0:	7325203a 73252820 7325203a 6425203a     : %s (%s: %s: %d
  14abd0:	00000a29                                )...

0014abd4 <__FUNCTION__.6013>:
  14abd4:	63737973 5f6c6c61 74736572 5f747261     syscall_restart_
  14abe4:	63737973 006c6c61                       syscall.

0014abec <__FUNCTION__.6017>:
  14abec:	63737973 5f6c6c61 74697865 00000000     syscall_exit....

0014abfc <__FUNCTION__.6020>:
  14abfc:	63737973 5f6c6c61 6b726f66 00000000     syscall_fork....

0014ac0c <__FUNCTION__.6026>:
  14ac0c:	63737973 5f6c6c61 64616572 00000000     syscall_read....

0014ac1c <__FUNCTION__.6032>:
  14ac1c:	63737973 5f6c6c61 74697277 00000065     syscall_write...

0014ac2c <__FUNCTION__.6038>:
  14ac2c:	63737973 5f6c6c61 6e65706f 00000000     syscall_open....

0014ac3c <__FUNCTION__.6042>:
  14ac3c:	63737973 5f6c6c61 736f6c63 00000065     syscall_close...

0014ac4c <__FUNCTION__.6045>:
  14ac4c:	63737973 5f6c6c61 61657263 00000074     syscall_creat...

0014ac5c <__FUNCTION__.6048>:
  14ac5c:	63737973 5f6c6c61 6b6e696c 00000000     syscall_link....

0014ac6c <__FUNCTION__.6052>:
  14ac6c:	63737973 5f6c6c61 696c6e75 00006b6e     syscall_unlink..

0014ac7c <__FUNCTION__.6058>:
  14ac7c:	63737973 5f6c6c61 63657865 00006576     syscall_execve..

0014ac8c <__FUNCTION__.6062>:
  14ac8c:	63737973 5f6c6c61 69646863 00000072     syscall_chdir...

0014ac9c <__FUNCTION__.6065>:
  14ac9c:	63737973 5f6c6c61 6f6e6b6d 00000064     syscall_mknod...

0014acac <__FUNCTION__.6068>:
  14acac:	63737973 5f6c6c61 6f6d6863 00000064     syscall_chmod...

0014acbc <__FUNCTION__.6071>:
  14acbc:	63737973 5f6c6c61 6f68636c 00006e77     syscall_lchown..

0014accc <__FUNCTION__.6077>:
  14accc:	63737973 5f6c6c61 6565736c 0000006b     syscall_lseek...

0014acdc <__FUNCTION__.6080>:
  14acdc:	63737973 5f6c6c61 70746567 00006469     syscall_getpid..

0014acec <__FUNCTION__.6083>:
  14acec:	63737973 5f6c6c61 6e756f6d 00000074     syscall_mount...

0014acfc <__FUNCTION__.6086>:
  14acfc:	63737973 5f6c6c61 75746573 00006469     syscall_setuid..

0014ad0c <__FUNCTION__.6089>:
  14ad0c:	63737973 5f6c6c61 75746567 00006469     syscall_getuid..

0014ad1c <__FUNCTION__.6092>:
  14ad1c:	63737973 5f6c6c61 61727470 00006563     syscall_ptrace..

0014ad2c <__FUNCTION__.6095>:
  14ad2c:	63737973 5f6c6c61 73756170 00000065     syscall_pause...

0014ad3c <__FUNCTION__.6100>:
  14ad3c:	63737973 5f6c6c61 65636361 00007373     syscall_access..

0014ad4c <__FUNCTION__.6103>:
  14ad4c:	63737973 5f6c6c61 6563696e 00000000     syscall_nice....

0014ad5c <__FUNCTION__.6106>:
  14ad5c:	63737973 5f6c6c61 636e7973 00000000     syscall_sync....

0014ad6c <__FUNCTION__.6111>:
  14ad6c:	63737973 5f6c6c61 6c6c696b 00000000     syscall_kill....

0014ad7c <__FUNCTION__.6116>:
  14ad7c:	63737973 5f6c6c61 616e6572 0000656d     syscall_rename..

0014ad8c <__FUNCTION__.6121>:
  14ad8c:	63737973 5f6c6c61 69646b6d 00000072     syscall_mkdir...

0014ad9c <__FUNCTION__.6125>:
  14ad9c:	63737973 5f6c6c61 69646d72 00000072     syscall_rmdir...

0014adac <__FUNCTION__.6129>:
  14adac:	63737973 5f6c6c61 00707564              syscall_dup.

0014adb8 <__FUNCTION__.6133>:
  14adb8:	63737973 5f6c6c61 65706970 00000000     syscall_pipe....

0014adc8 <__FUNCTION__.6136>:
  14adc8:	63737973 5f6c6c61 656d6974 00000073     syscall_times...

0014add8 <__FUNCTION__.6140>:
  14add8:	63737973 5f6c6c61 006b7262              syscall_brk.

0014ade4 <__FUNCTION__.6143>:
  14ade4:	63737973 5f6c6c61 67746573 00006469     syscall_setgid..

0014adf4 <__FUNCTION__.6146>:
  14adf4:	63737973 5f6c6c61 67746567 00006469     syscall_getgid..

0014ae04 <__FUNCTION__.6149>:
  14ae04:	63737973 5f6c6c61 65746567 00646975     syscall_geteuid.

0014ae14 <__FUNCTION__.6152>:
  14ae14:	63737973 5f6c6c61 65746567 00646967     syscall_getegid.

0014ae24 <__FUNCTION__.6155>:
  14ae24:	63737973 5f6c6c61 74636361 00000000     syscall_acct....

0014ae34 <__FUNCTION__.6158>:
  14ae34:	63737973 5f6c6c61 756f6d75 0032746e     syscall_umount2.

0014ae44 <__FUNCTION__.6164>:
  14ae44:	63737973 5f6c6c61 74636f69 0000006c     syscall_ioctl...

0014ae54 <__FUNCTION__.6170>:
  14ae54:	63737973 5f6c6c61 746e6366 0000006c     syscall_fcntl...

0014ae64 <__FUNCTION__.6173>:
  14ae64:	63737973 5f6c6c61 70746573 00646967     syscall_setpgid.

0014ae74 <__FUNCTION__.6176>:
  14ae74:	63737973 5f6c6c61 73616d75 0000006b     syscall_umask...

0014ae84 <__FUNCTION__.6179>:
  14ae84:	63737973 5f6c6c61 6f726863 0000746f     syscall_chroot..

0014ae94 <__FUNCTION__.6182>:
  14ae94:	63737973 5f6c6c61 61747375 00000074     syscall_ustat...

0014aea4 <__FUNCTION__.6187>:
  14aea4:	63737973 5f6c6c61 32707564 00000000     syscall_dup2....

0014aeb4 <__FUNCTION__.6190>:
  14aeb4:	63737973 5f6c6c61 70746567 00646970     syscall_getppid.

0014aec4 <__FUNCTION__.6193>:
  14aec4:	63737973 5f6c6c61 70746567 00707267     syscall_getpgrp.

0014aed4 <__FUNCTION__.6196>:
  14aed4:	63737973 5f6c6c61 73746573 00006469     syscall_setsid..

0014aee4 <__FUNCTION__.6203>:
  14aee4:	63737973 5f6c6c61 61676973 6f697463     syscall_sigactio
  14aef4:	0000006e                                n...

0014aef8 <__FUNCTION__.6206>:
  14aef8:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14af08:	00000000                                ....

0014af0c <__FUNCTION__.6209>:
  14af0c:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14af1c:	00000000                                ....

0014af20 <__FUNCTION__.6212>:
  14af20:	63737973 5f6c6c61 73676973 65707375     syscall_sigsuspe
  14af30:	0000646e                                nd..

0014af34 <__FUNCTION__.6215>:
  14af34:	63737973 5f6c6c61 70676973 69646e65     syscall_sigpendi
  14af44:	0000676e                                ng..

0014af48 <__FUNCTION__.6218>:
  14af48:	63737973 5f6c6c61 68746573 6e74736f     syscall_sethostn
  14af58:	00656d61                                ame.

0014af5c <__FUNCTION__.6223>:
  14af5c:	63737973 5f6c6c61 72746573 696d696c     syscall_setrlimi
  14af6c:	00000074                                t...

0014af70 <__FUNCTION__.6226>:
  14af70:	63737973 5f6c6c61 72746567 67617375     syscall_getrusag
  14af80:	00000065                                e...

0014af84 <__FUNCTION__.6229>:
  14af84:	63737973 5f6c6c61 74746567 6f656d69     syscall_gettimeo
  14af94:	79616466 00000000                       fday....

0014af9c <__FUNCTION__.6232>:
  14af9c:	63737973 5f6c6c61 74746573 6f656d69     syscall_settimeo
  14afac:	79616466 00000000                       fday....

0014afb4 <__FUNCTION__.6235>:
  14afb4:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14afc4:	00000073                                s...

0014afc8 <__FUNCTION__.6238>:
  14afc8:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14afd8:	00000073                                s...

0014afdc <__FUNCTION__.6241>:
  14afdc:	63737973 5f6c6c61 6c6d7973 006b6e69     syscall_symlink.

0014afec <__FUNCTION__.6247>:
  14afec:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14affc:	00000000                                ....

0014b000 <__FUNCTION__.6250>:
  14b000:	63737973 5f6c6c61 6c657375 00006269     syscall_uselib..

0014b010 <__FUNCTION__.6253>:
  14b010:	63737973 5f6c6c61 70617773 00006e6f     syscall_swapon..

0014b020 <__FUNCTION__.6256>:
  14b020:	63737973 5f6c6c61 6f626572 0000746f     syscall_reboot..

0014b030 <__FUNCTION__.6261>:
  14b030:	63737973 5f6c6c61 6d6e756d 00007061     syscall_munmap..

0014b040 <__FUNCTION__.6264>:
  14b040:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14b050:	00000000                                ....

0014b054 <__FUNCTION__.6267>:
  14b054:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14b064:	00000065                                e...

0014b068 <__FUNCTION__.6270>:
  14b068:	63737973 5f6c6c61 6d686366 0000646f     syscall_fchmod..

0014b078 <__FUNCTION__.6273>:
  14b078:	63737973 5f6c6c61 6f686366 00006e77     syscall_fchown..

0014b088 <__FUNCTION__.6276>:
  14b088:	63737973 5f6c6c61 70746567 726f6972     syscall_getprior
  14b098:	00797469                                ity.

0014b09c <__FUNCTION__.6279>:
  14b09c:	63737973 5f6c6c61 70746573 726f6972     syscall_setprior
  14b0ac:	00797469                                ity.

0014b0b0 <__FUNCTION__.6285>:
  14b0b0:	63737973 5f6c6c61 74617473 00007366     syscall_statfs..

0014b0c0 <__FUNCTION__.6291>:
  14b0c0:	63737973 5f6c6c61 61747366 00736674     syscall_fstatfs.

0014b0d0 <__FUNCTION__.6294>:
  14b0d0:	63737973 5f6c6c61 6c737973 0000676f     syscall_syslog..

0014b0e0 <__FUNCTION__.6297>:
  14b0e0:	63737973 5f6c6c61 69746573 656d6974     syscall_setitime
  14b0f0:	00000072                                r...

0014b0f4 <__FUNCTION__.6300>:
  14b0f4:	63737973 5f6c6c61 69746567 656d6974     syscall_getitime
  14b104:	00000072                                r...

0014b108 <__FUNCTION__.6305>:
  14b108:	63737973 5f6c6c61 74617473 00000000     syscall_stat....

0014b118 <__FUNCTION__.6310>:
  14b118:	63737973 5f6c6c61 6174736c 00000074     syscall_lstat...

0014b128 <__FUNCTION__.6315>:
  14b128:	63737973 5f6c6c61 61747366 00000074     syscall_fstat...

0014b138 <__FUNCTION__.6318>:
  14b138:	63737973 5f6c6c61 6e616876 00707567     syscall_vhangup.

0014b148 <__FUNCTION__.6321>:
  14b148:	63737973 5f6c6c61 74696177 00000034     syscall_wait4...

0014b158 <__FUNCTION__.6324>:
  14b158:	63737973 5f6c6c61 70617773 0066666f     syscall_swapoff.

0014b168 <__FUNCTION__.6327>:
  14b168:	63737973 5f6c6c61 69737973 006f666e     syscall_sysinfo.

0014b178 <__FUNCTION__.6331>:
  14b178:	63737973 5f6c6c61 6e797366 00000063     syscall_fsync...

0014b188 <__FUNCTION__.6334>:
  14b188:	63737973 5f6c6c61 72676973 72757465     syscall_sigretur
  14b198:	0000006e                                n...

0014b19c <__FUNCTION__.6337>:
  14b19c:	63737973 5f6c6c61 6e6f6c63 00000065     syscall_clone...

0014b1ac <__FUNCTION__.6340>:
  14b1ac:	63737973 5f6c6c61 64746573 69616d6f     syscall_setdomai
  14b1bc:	6d616e6e 00000065                       nname...

0014b1c4 <__FUNCTION__.6343>:
  14b1c4:	63737973 5f6c6c61 6d616e75 00000065     syscall_uname...

0014b1d4 <__FUNCTION__.6346>:
  14b1d4:	63737973 5f6c6c61 746a6461 78656d69     syscall_adjtimex
  14b1e4:	00000000                                ....

0014b1e8 <__FUNCTION__.6349>:
  14b1e8:	63737973 5f6c6c61 6f72706d 74636574     syscall_mprotect
  14b1f8:	00000000                                ....

0014b1fc <__FUNCTION__.6356>:
  14b1fc:	63737973 5f6c6c61 70676973 6d636f72     syscall_sigprocm
  14b20c:	006b7361                                ask.

0014b210 <__FUNCTION__.6359>:
  14b210:	63737973 5f6c6c61 74696e69 646f6d5f     syscall_init_mod
  14b220:	00656c75                                ule.

0014b224 <__FUNCTION__.6362>:
  14b224:	63737973 5f6c6c61 656c6564 6d5f6574     syscall_delete_m
  14b234:	6c75646f 00000065                       odule...

0014b23c <__FUNCTION__.6365>:
  14b23c:	63737973 5f6c6c61 746f7571 6c746361     syscall_quotactl
  14b24c:	00000000                                ....

0014b250 <__FUNCTION__.6368>:
  14b250:	63737973 5f6c6c61 70746567 00646967     syscall_getpgid.

0014b260 <__FUNCTION__.6371>:
  14b260:	63737973 5f6c6c61 64686366 00007269     syscall_fchdir..

0014b270 <__FUNCTION__.6374>:
  14b270:	63737973 5f6c6c61 6c666462 00687375     syscall_bdflush.

0014b280 <__FUNCTION__.6377>:
  14b280:	63737973 5f6c6c61 66737973 00000073     syscall_sysfs...

0014b290 <__FUNCTION__.6380>:
  14b290:	63737973 5f6c6c61 73726570 6c616e6f     syscall_personal
  14b2a0:	00797469                                ity.

0014b2a4 <__FUNCTION__.6383>:
  14b2a4:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14b2b4:	00000000                                ....

0014b2b8 <__FUNCTION__.6386>:
  14b2b8:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14b2c8:	00000000                                ....

0014b2cc <__FUNCTION__.6394>:
  14b2cc:	63737973 5f6c6c61 736c6c5f 006b6565     syscall__llseek.

0014b2dc <__FUNCTION__.6400>:
  14b2dc:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14b2ec:	00000000                                ....

0014b2f0 <__FUNCTION__.6408>:
  14b2f0:	63737973 5f6c6c61 77656e5f 656c6573     syscall__newsele
  14b300:	00007463                                ct..

0014b304 <__FUNCTION__.6411>:
  14b304:	63737973 5f6c6c61 636f6c66 0000006b     syscall_flock...

0014b314 <__FUNCTION__.6414>:
  14b314:	63737973 5f6c6c61 6e79736d 00000063     syscall_msync...

0014b324 <__FUNCTION__.6422>:
  14b324:	63737973 5f6c6c61 64616572 00000076     syscall_readv...

0014b334 <__FUNCTION__.6434>:
  14b334:	63737973 5f6c6c61 74697277 00007665     syscall_writev..

0014b344 <__FUNCTION__.6441>:
  14b344:	63737973 5f6c6c61 73746567 00006469     syscall_getsid..

0014b354 <__FUNCTION__.6444>:
  14b354:	63737973 5f6c6c61 74616466 6e797361     syscall_fdatasyn
  14b364:	00000063                                c...

0014b368 <__FUNCTION__.6447>:
  14b368:	63737973 5f6c6c61 7379735f 006c7463     syscall__sysctl.

0014b378 <__FUNCTION__.6450>:
  14b378:	63737973 5f6c6c61 636f6c6d 0000006b     syscall_mlock...

0014b388 <__FUNCTION__.6453>:
  14b388:	63737973 5f6c6c61 6c6e756d 006b636f     syscall_munlock.

0014b398 <__FUNCTION__.6456>:
  14b398:	63737973 5f6c6c61 636f6c6d 6c6c616b     syscall_mlockall
  14b3a8:	00000000                                ....

0014b3ac <__FUNCTION__.6459>:
  14b3ac:	63737973 5f6c6c61 6c6e756d 616b636f     syscall_munlocka
  14b3bc:	00006c6c                                ll..

0014b3c0 <__FUNCTION__.6464>:
  14b3c0:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b3d0:	72617074 00006d61                       tparam..

0014b3d8 <__FUNCTION__.6469>:
  14b3d8:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b3e8:	72617074 00006d61                       tparam..

0014b3f0 <__FUNCTION__.6475>:
  14b3f0:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b400:	68637374 6c756465 00007265              tscheduler..

0014b40c <__FUNCTION__.6481>:
  14b40c:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b41c:	68637374 6c756465 00007265              tscheduler..

0014b428 <__FUNCTION__.6484>:
  14b428:	63737973 5f6c6c61 65686373 69795f64     syscall_sched_yi
  14b438:	00646c65                                eld.

0014b43c <__FUNCTION__.6488>:
  14b43c:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b44c:	72705f74 69726f69 6d5f7974 00007861     t_priority_max..

0014b45c <__FUNCTION__.6492>:
  14b45c:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b46c:	72705f74 69726f69 6d5f7974 00006e69     t_priority_min..

0014b47c <__FUNCTION__.6495>:
  14b47c:	63737973 5f6c6c61 65686373 72725f64     syscall_sched_rr
  14b48c:	7465675f 746e695f 61767265 0000006c     _get_interval...

0014b49c <__FUNCTION__.6500>:
  14b49c:	63737973 5f6c6c61 6f6e616e 65656c73     syscall_nanoslee
  14b4ac:	00000070                                p...

0014b4b0 <__FUNCTION__.6508>:
  14b4b0:	63737973 5f6c6c61 6d65726d 00007061     syscall_mremap..

0014b4c0 <__FUNCTION__.6511>:
  14b4c0:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14b4d0:	00000064                                d...

0014b4d4 <__FUNCTION__.6514>:
  14b4d4:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14b4e4:	00000064                                d...

0014b4e8 <__FUNCTION__.6520>:
  14b4e8:	63737973 5f6c6c61 6c6c6f70 00000000     syscall_poll....

0014b4f8 <__FUNCTION__.6523>:
  14b4f8:	63737973 5f6c6c61 7373666e 63767265     syscall_nfsservc
  14b508:	00006c74                                tl..

0014b50c <__FUNCTION__.6526>:
  14b50c:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14b51c:	00000064                                d...

0014b520 <__FUNCTION__.6529>:
  14b520:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14b530:	00000064                                d...

0014b534 <__FUNCTION__.6532>:
  14b534:	63737973 5f6c6c61 74637270 0000006c     syscall_prctl...

0014b544 <__FUNCTION__.6535>:
  14b544:	63737973 5f6c6c61 735f7472 65726769     syscall_rt_sigre
  14b554:	6e727574 00000000                       turn....

0014b55c <__FUNCTION__.6543>:
  14b55c:	63737973 5f6c6c61 735f7472 63616769     syscall_rt_sigac
  14b56c:	6e6f6974 00000000                       tion....

0014b574 <__FUNCTION__.6551>:
  14b574:	63737973 5f6c6c61 735f7472 72706769     syscall_rt_sigpr
  14b584:	616d636f 00006b73                       ocmask..

0014b58c <__FUNCTION__.6554>:
  14b58c:	63737973 5f6c6c61 735f7472 65706769     syscall_rt_sigpe
  14b59c:	6e69646e 00000067                       nding...

0014b5a4 <__FUNCTION__.6557>:
  14b5a4:	63737973 5f6c6c61 735f7472 69746769     syscall_rt_sigti
  14b5b4:	7764656d 00746961                       medwait.

0014b5bc <__FUNCTION__.6560>:
  14b5bc:	63737973 5f6c6c61 735f7472 75716769     syscall_rt_sigqu
  14b5cc:	69657565 006f666e                       eueinfo.

0014b5d4 <__FUNCTION__.6563>:
  14b5d4:	63737973 5f6c6c61 735f7472 75736769     syscall_rt_sigsu
  14b5e4:	6e657073 00000064                       spend...

0014b5ec <__FUNCTION__.6566>:
  14b5ec:	63737973 5f6c6c61 61657270 00343664     syscall_pread64.

0014b5fc <__FUNCTION__.6569>:
  14b5fc:	63737973 5f6c6c61 69727770 34366574     syscall_pwrite64
  14b60c:	00000000                                ....

0014b610 <__FUNCTION__.6572>:
  14b610:	63737973 5f6c6c61 776f6863 0000006e     syscall_chown...

0014b620 <__FUNCTION__.6577>:
  14b620:	63737973 5f6c6c61 63746567 00006477     syscall_getcwd..

0014b630 <__FUNCTION__.6580>:
  14b630:	63737973 5f6c6c61 67706163 00007465     syscall_capget..

0014b640 <__FUNCTION__.6583>:
  14b640:	63737973 5f6c6c61 73706163 00007465     syscall_capset..

0014b650 <__FUNCTION__.6586>:
  14b650:	63737973 5f6c6c61 61676973 7473746c     syscall_sigaltst
  14b660:	006b6361                                ack.

0014b664 <__FUNCTION__.6589>:
  14b664:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14b674:	00000000                                ....

0014b678 <__FUNCTION__.6592>:
  14b678:	63737973 5f6c6c61 726f6676 0000006b     syscall_vfork...

0014b688 <__FUNCTION__.6597>:
  14b688:	63737973 5f6c6c61 74656775 6d696c72     syscall_ugetrlim
  14b698:	00007469                                it..

0014b69c <__FUNCTION__.6606>:
  14b69c:	63737973 5f6c6c61 70616d6d 00000032     syscall_mmap2...

0014b6ac <__FUNCTION__.6609>:
  14b6ac:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14b6bc:	00003436                                64..

0014b6c0 <__FUNCTION__.6612>:
  14b6c0:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14b6d0:	00343665                                e64.

0014b6d4 <__FUNCTION__.6617>:
  14b6d4:	63737973 5f6c6c61 74617473 00003436     syscall_stat64..

0014b6e4 <__FUNCTION__.6622>:
  14b6e4:	63737973 5f6c6c61 6174736c 00343674     syscall_lstat64.

0014b6f4 <__FUNCTION__.6627>:
  14b6f4:	63737973 5f6c6c61 61747366 00343674     syscall_fstat64.

0014b704 <__FUNCTION__.6630>:
  14b704:	63737973 5f6c6c61 6f68636c 32336e77     syscall_lchown32
  14b714:	00000000                                ....

0014b718 <__FUNCTION__.6633>:
  14b718:	63737973 5f6c6c61 75746567 32336469     syscall_getuid32
  14b728:	00000000                                ....

0014b72c <__FUNCTION__.6636>:
  14b72c:	63737973 5f6c6c61 67746567 32336469     syscall_getgid32
  14b73c:	00000000                                ....

0014b740 <__FUNCTION__.6639>:
  14b740:	63737973 5f6c6c61 65746567 33646975     syscall_geteuid3
  14b750:	00000032                                2...

0014b754 <__FUNCTION__.6642>:
  14b754:	63737973 5f6c6c61 65746567 33646967     syscall_getegid3
  14b764:	00000032                                2...

0014b768 <__FUNCTION__.6645>:
  14b768:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14b778:	00003233                                32..

0014b77c <__FUNCTION__.6648>:
  14b77c:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14b78c:	00003233                                32..

0014b790 <__FUNCTION__.6651>:
  14b790:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14b7a0:	00323373                                s32.

0014b7a4 <__FUNCTION__.6654>:
  14b7a4:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14b7b4:	00323373                                s32.

0014b7b8 <__FUNCTION__.6657>:
  14b7b8:	63737973 5f6c6c61 6f686366 32336e77     syscall_fchown32
  14b7c8:	00000000                                ....

0014b7cc <__FUNCTION__.6660>:
  14b7cc:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14b7dc:	00323364                                d32.

0014b7e0 <__FUNCTION__.6663>:
  14b7e0:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14b7f0:	00323364                                d32.

0014b7f4 <__FUNCTION__.6666>:
  14b7f4:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14b804:	00323364                                d32.

0014b808 <__FUNCTION__.6669>:
  14b808:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14b818:	00323364                                d32.

0014b81c <__FUNCTION__.6672>:
  14b81c:	63737973 5f6c6c61 776f6863 0032336e     syscall_chown32.

0014b82c <__FUNCTION__.6675>:
  14b82c:	63737973 5f6c6c61 75746573 32336469     syscall_setuid32
  14b83c:	00000000                                ....

0014b840 <__FUNCTION__.6678>:
  14b840:	63737973 5f6c6c61 67746573 32336469     syscall_setgid32
  14b850:	00000000                                ....

0014b854 <__FUNCTION__.6681>:
  14b854:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14b864:	00003233                                32..

0014b868 <__FUNCTION__.6684>:
  14b868:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14b878:	00003233                                32..

0014b87c <__FUNCTION__.6690>:
  14b87c:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14b88c:	00003436                                64..

0014b890 <__FUNCTION__.6693>:
  14b890:	63737973 5f6c6c61 6f766970 6f725f74     syscall_pivot_ro
  14b8a0:	0000746f                                ot..

0014b8a4 <__FUNCTION__.6696>:
  14b8a4:	63737973 5f6c6c61 636e696d 0065726f     syscall_mincore.

0014b8b4 <__FUNCTION__.6702>:
  14b8b4:	63737973 5f6c6c61 7664616d 00657369     syscall_madvise.

0014b8c4 <__FUNCTION__.6708>:
  14b8c4:	63737973 5f6c6c61 746e6366 0034366c     syscall_fcntl64.

0014b8d4 <__FUNCTION__.6711>:
  14b8d4:	63737973 5f6c6c61 74746567 00006469     syscall_gettid..

0014b8e4 <__FUNCTION__.6714>:
  14b8e4:	63737973 5f6c6c61 64616572 61656861     syscall_readahea
  14b8f4:	00000064                                d...

0014b8f8 <__FUNCTION__.6717>:
  14b8f8:	63737973 5f6c6c61 78746573 72747461     syscall_setxattr
  14b908:	00000000                                ....

0014b90c <__FUNCTION__.6720>:
  14b90c:	63737973 5f6c6c61 7465736c 74746178     syscall_lsetxatt
  14b91c:	00000072                                r...

0014b920 <__FUNCTION__.6723>:
  14b920:	63737973 5f6c6c61 74657366 74746178     syscall_fsetxatt
  14b930:	00000072                                r...

0014b934 <__FUNCTION__.6726>:
  14b934:	63737973 5f6c6c61 78746567 72747461     syscall_getxattr
  14b944:	00000000                                ....

0014b948 <__FUNCTION__.6729>:
  14b948:	63737973 5f6c6c61 7465676c 74746178     syscall_lgetxatt
  14b958:	00000072                                r...

0014b95c <__FUNCTION__.6732>:
  14b95c:	63737973 5f6c6c61 74656766 74746178     syscall_fgetxatt
  14b96c:	00000072                                r...

0014b970 <__FUNCTION__.6735>:
  14b970:	63737973 5f6c6c61 7473696c 74746178     syscall_listxatt
  14b980:	00000072                                r...

0014b984 <__FUNCTION__.6738>:
  14b984:	63737973 5f6c6c61 73696c6c 74617874     syscall_llistxat
  14b994:	00007274                                tr..

0014b998 <__FUNCTION__.6741>:
  14b998:	63737973 5f6c6c61 73696c66 74617874     syscall_flistxat
  14b9a8:	00007274                                tr..

0014b9ac <__FUNCTION__.6744>:
  14b9ac:	63737973 5f6c6c61 6f6d6572 61786576     syscall_removexa
  14b9bc:	00727474                                ttr.

0014b9c0 <__FUNCTION__.6747>:
  14b9c0:	63737973 5f6c6c61 6d65726c 7865766f     syscall_lremovex
  14b9d0:	72747461 00000000                       attr....

0014b9d8 <__FUNCTION__.6750>:
  14b9d8:	63737973 5f6c6c61 6d657266 7865766f     syscall_fremovex
  14b9e8:	72747461 00000000                       attr....

0014b9f0 <__FUNCTION__.6755>:
  14b9f0:	63737973 5f6c6c61 6c696b74 0000006c     syscall_tkill...

0014ba00 <__FUNCTION__.6758>:
  14ba00:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14ba10:	00003436                                64..

0014ba14 <__FUNCTION__.6767>:
  14ba14:	63737973 5f6c6c61 65747566 00000078     syscall_futex...

0014ba24 <__FUNCTION__.6773>:
  14ba24:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14ba34:	66666174 74696e69 00000079              taffinity...

0014ba40 <__FUNCTION__.6776>:
  14ba40:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14ba50:	66666174 74696e69 00000079              taffinity...

0014ba5c <__FUNCTION__.6779>:
  14ba5c:	63737973 5f6c6c61 735f6f69 70757465     syscall_io_setup
  14ba6c:	00000000                                ....

0014ba70 <__FUNCTION__.6782>:
  14ba70:	63737973 5f6c6c61 645f6f69 72747365     syscall_io_destr
  14ba80:	0000796f                                oy..

0014ba84 <__FUNCTION__.6785>:
  14ba84:	63737973 5f6c6c61 675f6f69 76657465     syscall_io_getev
  14ba94:	73746e65 00000000                       ents....

0014ba9c <__FUNCTION__.6788>:
  14ba9c:	63737973 5f6c6c61 735f6f69 696d6275     syscall_io_submi
  14baac:	00000074                                t...

0014bab0 <__FUNCTION__.6791>:
  14bab0:	63737973 5f6c6c61 635f6f69 65636e61     syscall_io_cance
  14bac0:	0000006c                                l...

0014bac4 <__FUNCTION__.6795>:
  14bac4:	63737973 5f6c6c61 74697865 6f72675f     syscall_exit_gro
  14bad4:	00007075                                up..

0014bad8 <__FUNCTION__.6798>:
  14bad8:	63737973 5f6c6c61 6b6f6f6c 645f7075     syscall_lookup_d
  14bae8:	6b6f6f63 00006569                       cookie..

0014baf0 <__FUNCTION__.6801>:
  14baf0:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14bb00:	65746165 00000000                       eate....

0014bb08 <__FUNCTION__.6804>:
  14bb08:	63737973 5f6c6c61 6c6f7065 74635f6c     syscall_epoll_ct
  14bb18:	0000006c                                l...

0014bb1c <__FUNCTION__.6807>:
  14bb1c:	63737973 5f6c6c61 6c6f7065 61775f6c     syscall_epoll_wa
  14bb2c:	00007469                                it..

0014bb30 <__FUNCTION__.6810>:
  14bb30:	63737973 5f6c6c61 616d6572 69665f70     syscall_remap_fi
  14bb40:	705f656c 73656761 00000000              le_pages....

0014bb4c <__FUNCTION__.6814>:
  14bb4c:	63737973 5f6c6c61 5f746573 5f646974     syscall_set_tid_
  14bb5c:	72646461 00737365                       address.

0014bb64 <__FUNCTION__.6817>:
  14bb64:	63737973 5f6c6c61 656d6974 72635f72     syscall_timer_cr
  14bb74:	65746165 00000000                       eate....

0014bb7c <__FUNCTION__.6820>:
  14bb7c:	63737973 5f6c6c61 656d6974 65735f72     syscall_timer_se
  14bb8c:	6d697474 00000065                       ttime...

0014bb94 <__FUNCTION__.6823>:
  14bb94:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14bba4:	6d697474 00000065                       ttime...

0014bbac <__FUNCTION__.6826>:
  14bbac:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14bbbc:	65766f74 6e757272 00000000              toverrun....

0014bbc8 <__FUNCTION__.6829>:
  14bbc8:	63737973 5f6c6c61 656d6974 65645f72     syscall_timer_de
  14bbd8:	6574656c 00000000                       lete....

0014bbe0 <__FUNCTION__.6834>:
  14bbe0:	63737973 5f6c6c61 636f6c63 65735f6b     syscall_clock_se
  14bbf0:	6d697474 00000065                       ttime...

0014bbf8 <__FUNCTION__.6839>:
  14bbf8:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14bc08:	6d697474 00000065                       ttime...

0014bc10 <__FUNCTION__.6844>:
  14bc10:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14bc20:	73657274 00000000                       tres....

0014bc28 <__FUNCTION__.6847>:
  14bc28:	63737973 5f6c6c61 636f6c63 616e5f6b     syscall_clock_na
  14bc38:	6c736f6e 00706565                       nosleep.

0014bc40 <__FUNCTION__.6853>:
  14bc40:	63737973 5f6c6c61 74617473 34367366     syscall_statfs64
  14bc50:	00000000                                ....

0014bc54 <__FUNCTION__.6859>:
  14bc54:	63737973 5f6c6c61 61747366 36736674     syscall_fstatfs6
  14bc64:	00000034                                4...

0014bc68 <__FUNCTION__.6862>:
  14bc68:	63737973 5f6c6c61 696b6774 00006c6c     syscall_tgkill..

0014bc78 <__FUNCTION__.6865>:
  14bc78:	63737973 5f6c6c61 6d697475 00007365     syscall_utimes..

0014bc88 <__FUNCTION__.6868>:
  14bc88:	63737973 5f6c6c61 5f6d7261 76646166     syscall_arm_fadv
  14bc98:	36657369 34365f34 00000000              ise64_64....

0014bca4 <__FUNCTION__.6871>:
  14bca4:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bcb4:	6f695f67 65736162 00000000              g_iobase....

0014bcc0 <__FUNCTION__.6874>:
  14bcc0:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bcd0:	65725f67 00006461                       g_read..

0014bcd8 <__FUNCTION__.6877>:
  14bcd8:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bce8:	72775f67 00657469                       g_write.

0014bcf0 <__FUNCTION__.6880>:
  14bcf0:	63737973 5f6c6c61 6f5f716d 006e6570     syscall_mq_open.

0014bd00 <__FUNCTION__.6883>:
  14bd00:	63737973 5f6c6c61 755f716d 6e696c6e     syscall_mq_unlin
  14bd10:	0000006b                                k...

0014bd14 <__FUNCTION__.6886>:
  14bd14:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14bd24:	646e6573 00000000                       send....

0014bd2c <__FUNCTION__.6889>:
  14bd2c:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14bd3c:	65636572 00657669                       receive.

0014bd44 <__FUNCTION__.6892>:
  14bd44:	63737973 5f6c6c61 6e5f716d 6669746f     syscall_mq_notif
  14bd54:	00000079                                y...

0014bd58 <__FUNCTION__.6895>:
  14bd58:	63737973 5f6c6c61 675f716d 65737465     syscall_mq_getse
  14bd68:	74746174 00000072                       tattr...

0014bd70 <__FUNCTION__.6898>:
  14bd70:	63737973 5f6c6c61 74696177 00006469     syscall_waitid..

0014bd80 <__FUNCTION__.6904>:
  14bd80:	63737973 5f6c6c61 6b636f73 00007465     syscall_socket..

0014bd90 <__FUNCTION__.6910>:
  14bd90:	63737973 5f6c6c61 646e6962 00000000     syscall_bind....

0014bda0 <__FUNCTION__.6916>:
  14bda0:	63737973 5f6c6c61 6e6e6f63 00746365     syscall_connect.

0014bdb0 <__FUNCTION__.6921>:
  14bdb0:	63737973 5f6c6c61 7473696c 00006e65     syscall_listen..

0014bdc0 <__FUNCTION__.6927>:
  14bdc0:	63737973 5f6c6c61 65636361 00007470     syscall_accept..

0014bdd0 <__FUNCTION__.6933>:
  14bdd0:	63737973 5f6c6c61 73746567 6e6b636f     syscall_getsockn
  14bde0:	00656d61                                ame.

0014bde4 <__FUNCTION__.6939>:
  14bde4:	63737973 5f6c6c61 70746567 6e726565     syscall_getpeern
  14bdf4:	00656d61                                ame.

0014bdf8 <__FUNCTION__.6942>:
  14bdf8:	63737973 5f6c6c61 6b636f73 61707465     syscall_socketpa
  14be08:	00007269                                ir..

0014be0c <__FUNCTION__.6949>:
  14be0c:	63737973 5f6c6c61 646e6573 00000000     syscall_send....

0014be1c <__FUNCTION__.6958>:
  14be1c:	63737973 5f6c6c61 646e6573 00006f74     syscall_sendto..

0014be2c <__FUNCTION__.6965>:
  14be2c:	63737973 5f6c6c61 76636572 00000000     syscall_recv....

0014be3c <__FUNCTION__.6974>:
  14be3c:	63737973 5f6c6c61 76636572 6d6f7266     syscall_recvfrom
  14be4c:	00000000                                ....

0014be50 <__FUNCTION__.6977>:
  14be50:	63737973 5f6c6c61 74756873 6e776f64     syscall_shutdown
  14be60:	00000000                                ....

0014be64 <__FUNCTION__.6985>:
  14be64:	63737973 5f6c6c61 73746573 6f6b636f     syscall_setsocko
  14be74:	00007470                                pt..

0014be78 <__FUNCTION__.6993>:
  14be78:	63737973 5f6c6c61 73746567 6f6b636f     syscall_getsocko
  14be88:	00007470                                pt..

0014be8c <__FUNCTION__.6996>:
  14be8c:	63737973 5f6c6c61 646e6573 0067736d     syscall_sendmsg.

0014be9c <__FUNCTION__.6999>:
  14be9c:	63737973 5f6c6c61 76636572 0067736d     syscall_recvmsg.

0014beac <__FUNCTION__.7002>:
  14beac:	63737973 5f6c6c61 6f6d6573 00000070     syscall_semop...

0014bebc <__FUNCTION__.7005>:
  14bebc:	63737973 5f6c6c61 676d6573 00007465     syscall_semget..

0014becc <__FUNCTION__.7008>:
  14becc:	63737973 5f6c6c61 636d6573 00006c74     syscall_semctl..

0014bedc <__FUNCTION__.7011>:
  14bedc:	63737973 5f6c6c61 7367736d 0000646e     syscall_msgsnd..

0014beec <__FUNCTION__.7014>:
  14beec:	63737973 5f6c6c61 7267736d 00007663     syscall_msgrcv..

0014befc <__FUNCTION__.7017>:
  14befc:	63737973 5f6c6c61 6767736d 00007465     syscall_msgget..

0014bf0c <__FUNCTION__.7020>:
  14bf0c:	63737973 5f6c6c61 6367736d 00006c74     syscall_msgctl..

0014bf1c <__FUNCTION__.7026>:
  14bf1c:	63737973 5f6c6c61 616d6873 00000074     syscall_shmat...

0014bf2c <__FUNCTION__.7030>:
  14bf2c:	63737973 5f6c6c61 646d6873 00000074     syscall_shmdt...

0014bf3c <__FUNCTION__.7036>:
  14bf3c:	63737973 5f6c6c61 676d6873 00007465     syscall_shmget..

0014bf4c <__FUNCTION__.7042>:
  14bf4c:	63737973 5f6c6c61 636d6873 00006c74     syscall_shmctl..

0014bf5c <__FUNCTION__.7045>:
  14bf5c:	63737973 5f6c6c61 5f646461 0079656b     syscall_add_key.

0014bf6c <__FUNCTION__.7048>:
  14bf6c:	63737973 5f6c6c61 75716572 5f747365     syscall_request_
  14bf7c:	0079656b                                key.

0014bf80 <__FUNCTION__.7051>:
  14bf80:	63737973 5f6c6c61 6379656b 00006c74     syscall_keyctl..

0014bf90 <__FUNCTION__.7054>:
  14bf90:	63737973 5f6c6c61 746d6573 64656d69     syscall_semtimed
  14bfa0:	0000706f                                op..

0014bfa4 <__FUNCTION__.7057>:
  14bfa4:	63737973 5f6c6c61 72657376 00726576     syscall_vserver.

0014bfb4 <__FUNCTION__.7060>:
  14bfb4:	63737973 5f6c6c61 72706f69 735f6f69     syscall_ioprio_s
  14bfc4:	00007465                                et..

0014bfc8 <__FUNCTION__.7063>:
  14bfc8:	63737973 5f6c6c61 72706f69 675f6f69     syscall_ioprio_g
  14bfd8:	00007465                                et..

0014bfdc <__FUNCTION__.7066>:
  14bfdc:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14bfec:	74696e69 00000000                       init....

0014bff4 <__FUNCTION__.7069>:
  14bff4:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c004:	5f646461 63746177 00000068              add_watch...

0014c010 <__FUNCTION__.7072>:
  14c010:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c020:	775f6d72 68637461 00000000              rm_watch....

0014c02c <__FUNCTION__.7075>:
  14c02c:	63737973 5f6c6c61 6e69626d 00000064     syscall_mbind...

0014c03c <__FUNCTION__.7078>:
  14c03c:	63737973 5f6c6c61 5f746567 706d656d     syscall_get_memp
  14c04c:	63696c6f 00000079                       olicy...

0014c054 <__FUNCTION__.7081>:
  14c054:	63737973 5f6c6c61 5f746573 706d656d     syscall_set_memp
  14c064:	63696c6f 00000079                       olicy...

0014c06c <__FUNCTION__.7084>:
  14c06c:	63737973 5f6c6c61 6e65706f 00007461     syscall_openat..

0014c07c <__FUNCTION__.7087>:
  14c07c:	63737973 5f6c6c61 69646b6d 00746172     syscall_mkdirat.

0014c08c <__FUNCTION__.7090>:
  14c08c:	63737973 5f6c6c61 6f6e6b6d 00746164     syscall_mknodat.

0014c09c <__FUNCTION__.7093>:
  14c09c:	63737973 5f6c6c61 6f686366 74616e77     syscall_fchownat
  14c0ac:	00000000                                ....

0014c0b0 <__FUNCTION__.7096>:
  14c0b0:	63737973 5f6c6c61 69747566 6173656d     syscall_futimesa
  14c0c0:	00000074                                t...

0014c0c4 <__FUNCTION__.7099>:
  14c0c4:	63737973 5f6c6c61 61747366 36746174     syscall_fstatat6
  14c0d4:	00000034                                4...

0014c0d8 <__FUNCTION__.7102>:
  14c0d8:	63737973 5f6c6c61 696c6e75 74616b6e     syscall_unlinkat
  14c0e8:	00000000                                ....

0014c0ec <__FUNCTION__.7105>:
  14c0ec:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14c0fc:	00000000                                ....

0014c100 <__FUNCTION__.7108>:
  14c100:	63737973 5f6c6c61 6b6e696c 00007461     syscall_linkat..

0014c110 <__FUNCTION__.7111>:
  14c110:	63737973 5f6c6c61 6c6d7973 616b6e69     syscall_symlinka
  14c120:	00000074                                t...

0014c124 <__FUNCTION__.7114>:
  14c124:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14c134:	00007461                                at..

0014c138 <__FUNCTION__.7117>:
  14c138:	63737973 5f6c6c61 6d686366 7461646f     syscall_fchmodat
  14c148:	00000000                                ....

0014c14c <__FUNCTION__.7120>:
  14c14c:	63737973 5f6c6c61 63636166 61737365     syscall_faccessa
  14c15c:	00000074                                t...

0014c160 <__FUNCTION__.7123>:
  14c160:	63737973 5f6c6c61 6c657370 36746365     syscall_pselect6
  14c170:	00000000                                ....

0014c174 <__FUNCTION__.7126>:
  14c174:	63737973 5f6c6c61 6c6f7070 0000006c     syscall_ppoll...

0014c184 <__FUNCTION__.7129>:
  14c184:	63737973 5f6c6c61 68736e75 00657261     syscall_unshare.

0014c194 <__FUNCTION__.7132>:
  14c194:	63737973 5f6c6c61 5f746573 75626f72     syscall_set_robu
  14c1a4:	6c5f7473 00747369                       st_list.

0014c1ac <__FUNCTION__.7135>:
  14c1ac:	63737973 5f6c6c61 5f746567 75626f72     syscall_get_robu
  14c1bc:	6c5f7473 00747369                       st_list.

0014c1c4 <__FUNCTION__.7138>:
  14c1c4:	63737973 5f6c6c61 696c7073 00006563     syscall_splice..

0014c1d4 <__FUNCTION__.7141>:
  14c1d4:	63737973 5f6c6c61 5f6d7261 636e7973     syscall_arm_sync
  14c1e4:	6c69665f 61725f65 0065676e              _file_range.

0014c1f0 <__FUNCTION__.7144>:
  14c1f0:	63737973 5f6c6c61 00656574              syscall_tee.

0014c1fc <__FUNCTION__.7147>:
  14c1fc:	63737973 5f6c6c61 70736d76 6563696c     syscall_vmsplice
  14c20c:	00000000                                ....

0014c210 <__FUNCTION__.7150>:
  14c210:	63737973 5f6c6c61 65766f6d 6761705f     syscall_move_pag
  14c220:	00007365                                es..

0014c224 <__FUNCTION__.7153>:
  14c224:	63737973 5f6c6c61 63746567 00007570     syscall_getcpu..

0014c234 <__FUNCTION__.7156>:
  14c234:	63737973 5f6c6c61 6c6f7065 77705f6c     syscall_epoll_pw
  14c244:	00746961                                ait.

0014c248 <__FUNCTION__.7159>:
  14c248:	63737973 5f6c6c61 6578656b 6f6c5f63     syscall_kexec_lo
  14c258:	00006461                                ad..

0014c25c <__FUNCTION__.7162>:
  14c25c:	63737973 5f6c6c61 6d697475 61736e65     syscall_utimensa
  14c26c:	00000074                                t...

0014c270 <__FUNCTION__.7165>:
  14c270:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14c280:	00000000                                ....

0014c284 <__FUNCTION__.7168>:
  14c284:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c294:	61657263 00006574                       create..

0014c29c <__FUNCTION__.7171>:
  14c29c:	63737973 5f6c6c61 6e657665 00646674     syscall_eventfd.

0014c2ac <__FUNCTION__.7174>:
  14c2ac:	63737973 5f6c6c61 6c6c6166 7461636f     syscall_fallocat
  14c2bc:	00000065                                e...

0014c2c0 <__FUNCTION__.7177>:
  14c2c0:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c2d0:	74746573 00656d69                       settime.

0014c2d8 <__FUNCTION__.7180>:
  14c2d8:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c2e8:	74746567 00656d69                       gettime.

0014c2f0 <__FUNCTION__.7183>:
  14c2f0:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14c300:	00000034                                4...

0014c304 <__FUNCTION__.7186>:
  14c304:	63737973 5f6c6c61 6e657665 32646674     syscall_eventfd2
  14c314:	00000000                                ....

0014c318 <__FUNCTION__.7189>:
  14c318:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14c328:	65746165 00000031                       eate1...

0014c330 <__FUNCTION__.7192>:
  14c330:	63737973 5f6c6c61 33707564 00000000     syscall_dup3....

0014c340 <__FUNCTION__.7195>:
  14c340:	63737973 5f6c6c61 65706970 00000032     syscall_pipe2...

0014c350 <__FUNCTION__.7198>:
  14c350:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c360:	74696e69 00000031                       init1...

0014c368 <__FUNCTION__.7201>:
  14c368:	63737973 5f6c6c61 61657270 00007664     syscall_preadv..

0014c378 <__FUNCTION__.7204>:
  14c378:	63737973 5f6c6c61 69727770 00766574     syscall_pwritev.

0014c388 <__FUNCTION__.7207>:
  14c388:	63737973 5f6c6c61 745f7472 67697367     syscall_rt_tgsig
  14c398:	75657571 666e6965 0000006f              queueinfo...

0014c3a4 <__FUNCTION__.7210>:
  14c3a4:	63737973 5f6c6c61 66726570 6576655f     syscall_perf_eve
  14c3b4:	6f5f746e 006e6570                       nt_open.

0014c3bc <__FUNCTION__.7213>:
  14c3bc:	63737973 5f6c6c61 76636572 67736d6d     syscall_recvmmsg
  14c3cc:	00000000                                ....

0014c3d0 <__FUNCTION__.7216>:
  14c3d0:	63737973 5f6c6c61 65636361 00347470     syscall_accept4.

0014c3e0 <__FUNCTION__.7219>:
  14c3e0:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14c3f0:	696e695f 00000074                       _init...

0014c3f8 <__FUNCTION__.7222>:
  14c3f8:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14c408:	72616d5f 0000006b                       _mark...

0014c410 <__FUNCTION__.7230>:
  14c410:	63737973 5f6c6c61 696c7270 3674696d     syscall_prlimit6
  14c420:	00000034                                4...

0014c424 <__FUNCTION__.7233>:
  14c424:	63737973 5f6c6c61 656d616e 5f6f745f     syscall_name_to_
  14c434:	646e6168 615f656c 00000074              handle_at...

0014c440 <__FUNCTION__.7236>:
  14c440:	63737973 5f6c6c61 6e65706f 5f79625f     syscall_open_by_
  14c450:	646e6168 615f656c 00000074              handle_at...

0014c45c <__FUNCTION__.7239>:
  14c45c:	63737973 5f6c6c61 636f6c63 64615f6b     syscall_clock_ad
  14c46c:	6d69746a 00000065                       jtime...

0014c474 <__FUNCTION__.7242>:
  14c474:	63737973 5f6c6c61 636e7973 00007366     syscall_syncfs..

0014c484 <__FUNCTION__.7245>:
  14c484:	63737973 5f6c6c61 646e6573 67736d6d     syscall_sendmmsg
  14c494:	00000000                                ....

0014c498 <__FUNCTION__.7248>:
  14c498:	63737973 5f6c6c61 6e746573 00000073     syscall_setns...

0014c4a8 <__FUNCTION__.7251>:
  14c4a8:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14c4b8:	725f6d76 76646165 00000000              vm_readv....

0014c4c4 <__FUNCTION__.7254>:
  14c4c4:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14c4d4:	775f6d76 65746972 00000076              vm_writev...

0014c4e0 <__FUNCTION__.7257>:
  14c4e0:	63737973 5f6c6c61 706d636b 00000000     syscall_kcmp....

0014c4f0 <__FUNCTION__.7260>:
  14c4f0:	63737973 5f6c6c61 696e6966 6f6d5f74     syscall_finit_mo
  14c500:	656c7564 00000000                       dule....

0014c508 <__FUNCTION__.7263>:
  14c508:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14c518:	74746174 00000072                       tattr...

0014c520 <__FUNCTION__.7266>:
  14c520:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14c530:	74746174 00000072                       tattr...

0014c538 <__FUNCTION__.7269>:
  14c538:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14c548:	00000032                                2...

0014c54c <__FUNCTION__.7272>:
  14c54c:	63737973 5f6c6c61 63636573 00706d6f     syscall_seccomp.

0014c55c <__FUNCTION__.7278>:
  14c55c:	63737973 5f6c6c61 72746567 6f646e61     syscall_getrando
  14c56c:	0000006d                                m...

0014c570 <__FUNCTION__.7281>:
  14c570:	63737973 5f6c6c61 666d656d 72635f64     syscall_memfd_cr
  14c580:	65746165 00000000                       eate....

0014c588 <__FUNCTION__.7284>:
  14c588:	63737973 5f6c6c61 00667062              syscall_bpf.

0014c594 <__FUNCTION__.7287>:
  14c594:	63737973 5f6c6c61 63657865 74616576     syscall_execveat
  14c5a4:	00000000                                ....

0014c5a8 <__FUNCTION__.7290>:
  14c5a8:	63737973 5f6c6c61 72657375 6c756166     syscall_userfaul
  14c5b8:	00646674                                tfd.

0014c5bc <__FUNCTION__.7293>:
  14c5bc:	63737973 5f6c6c61 626d656d 69727261     syscall_membarri
  14c5cc:	00007265                                er..

0014c5d0 <__FUNCTION__.7296>:
  14c5d0:	63737973 5f6c6c61 636f6c6d 0000326b     syscall_mlock2..

0014c5e0 <__FUNCTION__.7299>:
  14c5e0:	63737973 5f6c6c61 79706f63 6c69665f     syscall_copy_fil
  14c5f0:	61725f65 0065676e                       e_range.

0014c5f8 <__FUNCTION__.7302>:
  14c5f8:	63737973 5f6c6c61 61657270 00327664     syscall_preadv2.

0014c608 <__FUNCTION__.7305>:
  14c608:	63737973 5f6c6c61 69727770 32766574     syscall_pwritev2
  14c618:	00000000                                ....

0014c61c <__FUNCTION__.7308>:
  14c61c:	63737973 5f6c6c61 79656b70 72706d5f     syscall_pkey_mpr
  14c62c:	6365746f 00000074                       otect...

0014c634 <__FUNCTION__.7311>:
  14c634:	63737973 5f6c6c61 79656b70 6c6c615f     syscall_pkey_all
  14c644:	0000636f                                oc..

0014c648 <__FUNCTION__.7314>:
  14c648:	63737973 5f6c6c61 79656b70 6572665f     syscall_pkey_fre
  14c658:	00000065                                e...

0014c65c <__FUNCTION__.7317>:
  14c65c:	63737973 5f6c6c61 74617473 00000078     syscall_statx...

0014c66c <__FUNCTION__.7320>:
  14c66c:	63737973 5f6c6c61 71657372 00000000     syscall_rseq....

0014c67c <__FUNCTION__.7323>:
  14c67c:	63737973 5f6c6c61 705f6f69 65746567     syscall_io_pgete
  14c68c:	746e6576 00000073 335b1a0a 5b206d34     vents.....[34m [
  14c69c:	64202020 7973206f 6c616373 203a5d6c        do syscall]: 
  14c6ac:	6d305b1b 00000000                       .[0m....

0014c6b4 <syscall_table>:
  14c6b4:	0013b004 0013b260 0013c298 0013bd00     ....`...........
  14c6c4:	0013bcc8 0013bc90 0013b238 00000000     ........8.......
  14c6d4:	0013afe8 0013afcc 0013b210 0013bc58     ............X...
  14c6e4:	0013b1e8 00000000 0013afb0 0013af94     ................
  14c6f4:	0013af78 00000000 00000000 0013c300     x...............
  14c704:	0013c278 0013af5c 00000000 0013af40     x...\.......@...
  14c714:	0013af24 00000000 0013af08 00000000     $...............
  14c724:	00000000 0013aeec 00000000 00000000     ................
  14c734:	00000000 0013b678 0013aed0 00000000     ....x...........
  14c744:	0013aeb4 0013b648 0013b618 0013b5e8     ....H...........
  14c754:	0013b1c0 0013b198 0013b170 0013ae98     ........p.......
  14c764:	00000000 0013b148 0013ae7c 0013ae60     ....H...|...`...
  14c774:	00000000 0013ae44 0013ae28 0013ae0c     ....D...(.......
  14c784:	0013adf0 00000000 0013c2b8 0013bc20     ............ ...
  14c794:	00000000 0013add4 00000000 00000000     ................
  14c7a4:	0013adb8 0013ad9c 0013ad80 0013b5b8     ................
  14c7b4:	0013ad64 0013ad48 0013c258 0013bee8     d...H...X.......
	...
  14c7cc:	0013ad2c 0013ad10 0013acf4 0013acd8     ,...............
  14c7dc:	0013acbc 0013b588 00000000 0013aca0     ................
  14c7ec:	0013ac84 0013ac68 0013ac4c 0013ac30     ....h...L...0...
  14c7fc:	00000000 0013ac14 00000000 0013bbe8     ................
  14c80c:	0013abf8 0013abdc 0013abc0 00000000     ................
  14c81c:	00000000 0013b558 0013aba4 0013ab88     ....X...........
  14c82c:	0013ab6c 0013ab50 0013ab34 0013ab18     l...P...4.......
  14c83c:	00000000 0013aafc 0013aae0 00000000     ................
  14c84c:	00000000 0013aac4 0013aaa8 0013aa8c     ................
  14c85c:	0013b528 0013b4f8 0013aa70 00000000     (.......p.......
  14c86c:	00000000 0013aa54 00000000 00000000     ....T...........
  14c87c:	0013aa38 0013aa1c 0013aa00 00000000     8...............
  14c88c:	0013b120 0013a9e4 0013a9c8 0013a9ac      ...............
  14c89c:	0013a990 00000000 0013a974 0013a958     ........t...X...
  14c8ac:	0013bea0 00000000 0013a93c 0013a920     ........<... ...
  14c8bc:	00000000 0013a904 0013a8e8 0013a8cc     ................
  14c8cc:	0013a8b0 0013a894 0013a878 00000000     ........x.......
  14c8dc:	0013a85c 0013a840 0013c070 0013bbb0     \...@...p.......
  14c8ec:	0013c020 0013a824 0013a808 0013bb0c      ...$...........
  14c8fc:	0013ba68 0013a7ec 0013a7d0 0013a7b4     h...............
  14c90c:	0013a798 0013a77c 0013a760 0013a744     ....|...`...D...
  14c91c:	0013b4c8 0013b498 0013ba30 0013b9f8     ........0.......
  14c92c:	0013a728 0013b0f8 0013b0d0 0013a70c     (...............
  14c93c:	0013b468 0013bfd0 0013a6f0 0013a6d4     h...............
	...
  14c954:	0013b9c0 0013a6b8 0013a69c 0013a680     ................
  14c964:	0013a664 0013a648 0013be58 0013be10     d...H...X.......
  14c974:	0013a62c 0013a610 0013a5f4 0013a5d8     ,...............
  14c984:	0013a5bc 0013a5a0 0013a584 0013b438     ............8...
  14c994:	0013a568 0013a54c 0013a530 0013a514     h...L...0.......
	...
  14c9ac:	0013c238 0013b408 0013c1c8 0013a4f8     8...............
  14c9bc:	0013a4dc 0013b3d8 0013b3a8 0013b378     ............x...
  14c9cc:	0013a4c0 0013a4a4 0013a488 0013a46c     ............l...
  14c9dc:	0013a450 0013a434 0013a418 0013a3fc     P...4...........
  14c9ec:	0013a3e0 0013a3c4 0013a3a8 0013a38c     ................
  14c9fc:	0013a370 0013a354 0013a338 0013a31c     p...T...8.......
  14ca0c:	0013a300 0013a2e4 0013a2c8 0013b988     ................
  14ca1c:	0013a2ac 0013a290 0013b950 0013b918     ........P.......
	...
  14ca34:	0013c218 0013a274 0013a258 0013a23c     ....t...X...<...
  14ca44:	0013a220 0013a204 0013a1e8 0013a1cc      ...............
  14ca54:	0013a1b0 0013a194 0013a178 0013a15c     ........x...\...
  14ca64:	0013a140 0013a124 0013b348 0013a108     @...$...H.......
  14ca74:	0013c174 0013b8e0 0013a0ec 0013a0d0     t...............
  14ca84:	0013a0b4 0013a098 0013a07c 0013a060     ........|...`...
  14ca94:	0013b0a8 0013a044 0013a028 0013a00c     ....D...(.......
  14caa4:	00139ff0 00139fd4 00000000 00000000     ................
  14cab4:	0013b080 00139fb8 00139f9c 00139f80     ................
  14cac4:	00139f64 00139f48 0013b318 0013b2e8     d...H...........
  14cad4:	0013b2b8 00139f2c 00139f10 00139ef4     ....,...........
  14cae4:	00139ed8 00139ebc 00139ea0 00139e84     ................
  14caf4:	00139e68 00139e4c 00139e30 00139e14     h...L...0.......
  14cb04:	00139df8 00139ddc 00139dc0 00139da4     ................
  14cb14:	00139d88 0013b8a8 0013b870 0013b838     ........p...8...
  14cb24:	0013b288 0013b800 0013b7c8 0013b790     ................
  14cb34:	00139d6c 0013bdc8 0013c120 0013bd80     l....... .......
  14cb44:	0013c0cc 00139d50 0013bf80 0013bf30     ....P.......0...
  14cb54:	00139d34 00139d18 00139cfc 00139ce0     4...............
  14cb64:	00139cc4 00139ca8 00139c8c 00139c70     ............p...
  14cb74:	00139c54 0013b754 0013b054 0013b718     T...T...T.......
  14cb84:	0013b6e0 00139c38 00139c1c 00139c00     ....8...........
  14cb94:	00139be4 00139bc8 00139bac 00139b90     ................
  14cba4:	00139b74 00139b58 00139b3c 00139b20     t...X...<... ...
  14cbb4:	00139b04 00139ae8 00139acc 00139ab0     ................
  14cbc4:	00139a94 00139a78 00139a5c 00139a40     ....x...\...@...
  14cbd4:	00139a24 00139a08 001399ec 001399d0     $...............
  14cbe4:	001399b4 00139998 0013997c 00139960     ........|...`...
  14cbf4:	00139944 00139928 0013990c 001398f0     D...(...........
  14cc04:	001398d4 001398b8 0013989c 00139880     ................
  14cc14:	00139864 00139848 0013982c 00139810     d...H...,.......
  14cc24:	001397f4 001397d8 001397bc 001397a0     ................
  14cc34:	00139784 00139768 0013974c 00139730     ....h...L...0...
  14cc44:	00139714 001396f8 001396dc 001396c0     ................
  14cc54:	001396a4 00139688 0013966c 00139650     ........l...P...
  14cc64:	00139634 00139618 001395fc 001395e0     4...............
  14cc74:	001395c4 0013bd38 001395a8 0013958c     ....8...........
  14cc84:	00139570 00139554 00139538 0013951c     p...T...8.......
  14cc94:	00139500 001394e4 001394c8 001394ac     ................
  14cca4:	00139490 00139474 00139458 0013943c     ....t...X...<...
  14ccb4:	0013b6a8 00139420 00139404 001393e8     .... ...........
  14ccc4:	001393cc 001393b0 00139394 00139378     ............x...
  14ccd4:	0013935c 00139340 00139324 00139308     \...@...$.......
  14cce4:	001392ec 001392d0 001392b4 00139298     ................
  14ccf4:	335b1b0a 5b206d31 74706d65 79732079     ..[31m [empty sy
  14cd04:	6c616373 203a5d6c 6d305b1b 00000000     scall]: .[0m....

0014cd14 <bin_tab>:
  14cd14:	23222120 25252424 27272626 28282828      !"#$$%%&&''((((
  14cd24:	29292929 2a2a2a2a 2b2b2b2b 2c2c2c2c     ))))****++++,,,,
  14cd34:	2c2c2c2c 2d2d2d2d 2d2d2d2d 2e2e2e2e     ,,,,--------....
  14cd44:	2e2e2e2e 2f2f2f2f 2f2f2f2f              ....////////

0014cd50 <stderr>:
  14cd50:	0014d2a8                                ....

0014cd54 <stdout>:
  14cd54:	0014d340 20202b2d 30583020 00000078     @...-+   0X0x...
  14cd64:	6c756e28 0000296c 2b58302d 30205830     (null)..-0X+0X 0
  14cd74:	78302d58 2078302b 00007830 00666e69     X-0x+0x 0x..inf.
  14cd84:	00464e49 006e616e 004e414e 0000002e     INF.nan.NAN.....

0014cd94 <states>:
  14cd94:	000a0019 00191919 05000000 00000000     ................
  14cda4:	00090000 0b000000 00000000 00000000     ................
  14cdb4:	0a110019 03191919 0100070a 180b091b     ................
  14cdc4:	06090000 0b00000b 00190600 19190000     ................
  14cdd4:	00000019 00000000 00000000 00000000     ................
  14cde4:	00000e00 00000000 00190000 19190d0a     ................
  14cdf4:	000d0019 09000200 0000000e 000e0009     ................
  14ce04:	00000e00 00000000 00000000 00000000     ................
	...
  14ce1c:	0c000000 00000000 00000000 13000000     ................
  14ce2c:	00000000 00000013 000c0900 00000000     ................
  14ce3c:	0c00000c 00000000 00000000 00000000     ................
	...
  14ce58:	00001000 00000000 00000000 00000f00     ................
  14ce68:	000f0400 09000000 00000010 00100000     ................
  14ce78:	00001000 00000000 00000000 00000000     ................
	...
  14ce90:	12000000 00000000 00000000 11000000     ................
  14cea0:	00000000 00000011 00120900 00000000     ................
  14ceb0:	12000012 001a0000 1a1a0000 0000001a     ................
	...
  14ced4:	001a0000 1a1a0000 0000001a 09000000     ................
	...
  14cf04:	14000000 00000000 00000000 17000000     ................
  14cf14:	00000000 00000017 00140900 00000000     ................
  14cf24:	14000014 00000000 00000000 00000000     ................
	...
  14cf40:	00001600 00000000 00000000 00001500     ................
  14cf50:	00150000 09000000 00000016 00160000     ................
  14cf60:	00001600                                ....

0014cf64 <xdigits>:
  14cf64:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0014cf74 <all_mask>:
  14cf74:	ffffffff ffffffff                       ........

0014cf7c <app_mask>:
  14cf7c:	7fffffff fffffffc                       ........

0014cf84 <__EH_FRAME_BEGIN__>:
  14cf84:	00000000                                ....
